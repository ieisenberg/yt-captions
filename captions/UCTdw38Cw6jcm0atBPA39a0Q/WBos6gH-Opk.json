[
  {
    "start": "0",
    "end": "115000"
  },
  {
    "text": "hello everyone welcome to the beautiful Pacific Northwest of the United States",
    "start": "1960",
    "end": "7340"
  },
  {
    "text": "of America it's great to be here in come home and awesome to hear in the middle",
    "start": "7340",
    "end": "16880"
  },
  {
    "text": "of a beautiful sunrise and some folding right outside my windows here thanks for",
    "start": "16880",
    "end": "22430"
  },
  {
    "text": "letting me borrow the Sun for a bit I know Richard Campbell is over in conference room three a few hundred",
    "start": "22430",
    "end": "28670"
  },
  {
    "text": "kilometers north of me also experiencing that sunrise so I'm Matt Ferguson mess hall listen as",
    "start": "28670",
    "end": "39469"
  },
  {
    "text": "we say in Denmark and I'm the lead designer on c-sharp language at Microsoft and today we're going to talk",
    "start": "39469",
    "end": "47960"
  },
  {
    "text": "about language design because that's what I know to talk about so I have a",
    "start": "47960",
    "end": "53659"
  },
  {
    "text": "few things cued up in my slides here that I will try to actually successfully",
    "start": "53659",
    "end": "61429"
  },
  {
    "text": "click on there we go this I want to talk about some of the",
    "start": "61429",
    "end": "66980"
  },
  {
    "text": "some of the features that are probably more interesting or or different than",
    "start": "66980",
    "end": "72770"
  },
  {
    "text": "what people used to when that's just shipped a couple of months ago one that",
    "start": "72770",
    "end": "80270"
  },
  {
    "text": "is queued up for the next release and some thoughts for for its further into the future of c-sharp now I was in the",
    "start": "80270",
    "end": "88360"
  },
  {
    "text": "the quiz that the NBC social last night and I almost wanted and what bothers me",
    "start": "88360",
    "end": "95510"
  },
  {
    "text": "is not the bottle of whiskey that I didn't win it's the fact that I flunked the question about which programming",
    "start": "95510",
    "end": "102500"
  },
  {
    "text": "language was named after a TV series so to redeem myself I sprinkle in a few quotes from that franchise throughout",
    "start": "102500",
    "end": "110330"
  },
  {
    "text": "that hopefully are relevant to the topic so to start out with let's talk about",
    "start": "110330",
    "end": "118990"
  },
  {
    "start": "115000",
    "end": "133000"
  },
  {
    "text": "nullable reference types which is a feature that shipped in c-sharp eight and has been out now for four or five",
    "start": "118990",
    "end": "127010"
  },
  {
    "text": "months in release so the the sort of",
    "start": "127010",
    "end": "133520"
  },
  {
    "start": "133000",
    "end": "291000"
  },
  {
    "text": "core issue that Noble reference types are there to help",
    "start": "133520",
    "end": "139109"
  },
  {
    "text": "address is really the elephant in the room of object-oriented programming for",
    "start": "139109",
    "end": "144810"
  },
  {
    "text": "the past fifty years are just one of them it can be more than one elephant and that's that's the problem with null",
    "start": "144810",
    "end": "153719"
  },
  {
    "text": "so we've sort of all just accepted the fact that null is a valid value of any",
    "start": "153719",
    "end": "163590"
  },
  {
    "text": "object type so an all is a person null is a vehicle null is an animal not as",
    "start": "163590",
    "end": "170129"
  },
  {
    "text": "any is anything you might want it to be and of course that that causes problem I have a tiny little program here and if I",
    "start": "170129",
    "end": "178230"
  },
  {
    "text": "run it then it's trivial what it does I",
    "start": "178230",
    "end": "183810"
  },
  {
    "text": "create a person I get the length of their middle name using a helper function and then I write that length out and there's nothing the compiler",
    "start": "183810",
    "end": "191040"
  },
  {
    "text": "doesn't complain it doesn't give any cause for concern but when I run the",
    "start": "191040",
    "end": "198030"
  },
  {
    "text": "program of course you get one of the famous monty python explosions followed",
    "start": "198030",
    "end": "205560"
  },
  {
    "text": "by and now for something completely different so it's taking a little while",
    "start": "205560",
    "end": "211379"
  },
  {
    "text": "because i'm proceeding so things take longer when you're presenting but let's",
    "start": "211379",
    "end": "219810"
  },
  {
    "text": "see here you go get that beautiful red",
    "start": "219810",
    "end": "225689"
  },
  {
    "text": "telling us that something is wrong we get the and we get the thing in the",
    "start": "225689",
    "end": "234090"
  },
  {
    "text": "debugger telling us that there was a null reference exception the middle variable was null oh because I don't",
    "start": "234090",
    "end": "239099"
  },
  {
    "text": "actually have a middle name and I was trying to take the length of it and now the program crashed so wouldn't it be",
    "start": "239099",
    "end": "244919"
  },
  {
    "text": "nice if the compiler could have warned me a little bit about something like that happening in my code and that's",
    "start": "244919",
    "end": "251370"
  },
  {
    "text": "what all the reference types are about so essentially the idea with all the",
    "start": "251370",
    "end": "257909"
  },
  {
    "text": "reference types is that it's a whole big feature probably the crowning jewel of",
    "start": "257909",
    "end": "263580"
  },
  {
    "text": "c-sharp a that's all about making fewer things work it's not a new thing that makes more",
    "start": "263580",
    "end": "270180"
  },
  {
    "text": "things work but is it's a feature that will tell you when your program is probably it's probably wrong in more",
    "start": "270180",
    "end": "278190"
  },
  {
    "text": "places than it has previously and so it's gonna give you more it's going to",
    "start": "278190",
    "end": "284220"
  },
  {
    "text": "talk more smack at you and give you more warnings or errors and so therefore it's a feature that you have chopped it up",
    "start": "284220",
    "end": "289890"
  },
  {
    "text": "into so let's go and have a look at that so here's that person class that we were using looks very innocent again and I",
    "start": "289890",
    "end": "296160"
  },
  {
    "start": "291000",
    "end": "793000"
  },
  {
    "text": "use that to argument structure there too to build one of them before but if we go",
    "start": "296160",
    "end": "302940"
  },
  {
    "text": "and turn on the nullable reference types checking we can huh nullable enable it's",
    "start": "302940",
    "end": "312210"
  },
  {
    "text": "a new directive and t-shirt then it'll start telling you something is suspect or suspect with respect to nulls so you",
    "start": "312210",
    "end": "319890"
  },
  {
    "text": "see I get a warning on the prison constructor here saying that middle name is uninitialized and it's non null Abal",
    "start": "319890",
    "end": "329340"
  },
  {
    "text": "so it shouldn't be it should be initialized huh well I can initialize it",
    "start": "329340",
    "end": "336110"
  },
  {
    "text": "middle name equals no ha there I've initialized it sure enough the morning",
    "start": "336110",
    "end": "342450"
  },
  {
    "text": "goes away but now I get a different morning saying you can't assign null to a none null reference type so",
    "start": "342450",
    "end": "349260"
  },
  {
    "text": "essentially by training on this feature I've said that all the reference types in c-sharp are now none nullable and we",
    "start": "349260",
    "end": "356700"
  },
  {
    "text": "will warn you if you try to put a null into them or leave an all in them as I did to start out with and that is really",
    "start": "356700",
    "end": "363300"
  },
  {
    "text": "there that is the first half of trying to address the null problem I'm",
    "start": "363300",
    "end": "368690"
  },
  {
    "text": "essentially just don't let your stick nulls on there no nulls anywhere unless",
    "start": "368690",
    "end": "374430"
  },
  {
    "text": "you explicitly ask for it so how do you explicitly ask for it you ask well you",
    "start": "374430",
    "end": "383250"
  },
  {
    "text": "can have an nullable reference types which is the name of the feature and you",
    "start": "383250",
    "end": "388290"
  },
  {
    "text": "can put the question mark syntax now on reference types we've had that on value types in c-sharp for years and years but",
    "start": "388290",
    "end": "394170"
  },
  {
    "text": "now the reference type can also be nullable and now we're declaring to the world that middle names can be null and",
    "start": "394170",
    "end": "399750"
  },
  {
    "text": "now we're allowed to put the null in there without incident but let's go and have a look at what happened in our",
    "start": "399750",
    "end": "405960"
  },
  {
    "text": "program now now because we declared middle name to be a type string question",
    "start": "405960",
    "end": "412979"
  },
  {
    "text": "mark and now we grab it out here the type inference infers here that the vara",
    "start": "412979",
    "end": "419610"
  },
  {
    "text": "is a string question mark and therefore we're not allowed to dot it so I'm",
    "start": "419610",
    "end": "425180"
  },
  {
    "text": "getting protected here so how can I but how can i how can I help how can I get",
    "start": "425180",
    "end": "433110"
  },
  {
    "text": "around this morning well the old-fashioned way of doing that",
    "start": "433110",
    "end": "438150"
  },
  {
    "text": "in c-sharp would be to check for null first if middle equals no or as we say",
    "start": "438150",
    "end": "445139"
  },
  {
    "text": "nowadays you can say middle is null then",
    "start": "445139",
    "end": "450590"
  },
  {
    "text": "return zero maybe and now you can see the warning goes away on them on the",
    "start": "450590",
    "end": "456599"
  },
  {
    "text": "middle dot length down here because we do control flow analysis to see that if",
    "start": "456599",
    "end": "462360"
  },
  {
    "text": "you get to this point in the code then middle cannot be null because if it was we would have branched",
    "start": "462360",
    "end": "468930"
  },
  {
    "text": "out already off the method here so essentially the way that you deal with",
    "start": "468930",
    "end": "475909"
  },
  {
    "text": "nullable reference types and avoid the warnings is just to do the null checking",
    "start": "475909",
    "end": "480960"
  },
  {
    "text": "that you've done all along and and we're very smart about recognizing when you",
    "start": "480960",
    "end": "487229"
  },
  {
    "text": "are when you're doing various forms of null checking we could also have said we",
    "start": "487229",
    "end": "492599"
  },
  {
    "text": "could have checked it in a completely different way we can say return middle question dot length well that gives you",
    "start": "492599",
    "end": "499199"
  },
  {
    "text": "a nullable int it gives you null if the length was if the middle was null",
    "start": "499199",
    "end": "504569"
  },
  {
    "text": "otherwise it gives you the length but that we can alter less it so that if it hoped that whole thing is no then you",
    "start": "504569",
    "end": "510870"
  },
  {
    "text": "return zero instead and again the warnings go away so that's the that's",
    "start": "510870",
    "end": "516089"
  },
  {
    "text": "the essence of the Melville reference types feature so when you add something",
    "start": "516089",
    "end": "522268"
  },
  {
    "text": "like that to an old language there's bound to be these gray areas we we can",
    "start": "522269",
    "end": "531390"
  },
  {
    "text": "just handle everything so we try to handle as much as but there are some places where we just",
    "start": "531390",
    "end": "537950"
  },
  {
    "text": "we don't want to warn because it's not a nice thing you could have done instead",
    "start": "537950",
    "end": "543240"
  },
  {
    "text": "for instance you create an array of strings you're not going to warn you to saying that oh well these strings you created",
    "start": "543240",
    "end": "550170"
  },
  {
    "text": "and all so a few places where the fact that this is grafted onto an existing",
    "start": "550170",
    "end": "556740"
  },
  {
    "text": "language and intended to be turned on on your existing code means that we made",
    "start": "556740",
    "end": "562230"
  },
  {
    "text": "some trade-offs that it's not entirely safe but it'll get the vast majority of",
    "start": "562230",
    "end": "568710"
  },
  {
    "text": "the places in your code where where you might get these non-reference exceptions",
    "start": "568710",
    "end": "574830"
  },
  {
    "text": "and it's really helped us fix this one so this is a this is a point in the talk",
    "start": "574830",
    "end": "581220"
  },
  {
    "text": "where I would encourage you if you have questions on this on this feature click",
    "start": "581220",
    "end": "586350"
  },
  {
    "text": "them in slide them that should be there should be a link next to where the streams is coming at you going to slide",
    "start": "586350",
    "end": "594570"
  },
  {
    "text": "oh and and ask your questions there and I will wait for a suitable amount of time to see if they show up",
    "start": "594570",
    "end": "602420"
  },
  {
    "text": "while we're waiting for them while we're",
    "start": "606900",
    "end": "612010"
  },
  {
    "text": "waiting for the questions to come in one thing that you might observe here is",
    "start": "612010",
    "end": "617260"
  },
  {
    "text": "that this is actually sort of a little bit unsafe in a way right that it's not",
    "start": "617260",
    "end": "625180"
  },
  {
    "text": "so bad here but let's say that I didn't have this this local variable here this",
    "start": "625180",
    "end": "630670"
  },
  {
    "text": "temporary variable for the middle name but I was actually oh hang on can i it's",
    "start": "630670",
    "end": "643870"
  },
  {
    "text": "not working",
    "start": "643870",
    "end": "646380"
  },
  {
    "text": "I can inline the temporary variable here [Music]",
    "start": "651319",
    "end": "656680"
  },
  {
    "text": "and that's actually fine but if but let's say that the middle name changes",
    "start": "656680",
    "end": "663040"
  },
  {
    "text": "between south this is where let's see",
    "start": "663040",
    "end": "669180"
  },
  {
    "text": "let's say that the middle name changes between the the assignment and the test",
    "start": "669180",
    "end": "674920"
  },
  {
    "text": "so let's say that I said yeah that's actually this is where I want to inline the temporary variable sorry for the",
    "start": "674920",
    "end": "681010"
  },
  {
    "text": "confusion here let's say that I fixed the warning like so if Peter middle name",
    "start": "681010",
    "end": "689009"
  },
  {
    "text": "it's no with trans ero now you see the",
    "start": "689459",
    "end": "696850"
  },
  {
    "text": "warning goes away because the analysis assumes that the that Peter middle name",
    "start": "696850",
    "end": "703300"
  },
  {
    "text": "stays the same between the test and the and the dotting here that's not actually",
    "start": "703300",
    "end": "708490"
  },
  {
    "text": "entirely reliable right there might be multiple threads or some other code",
    "start": "708490",
    "end": "714310"
  },
  {
    "text": "might be changing the middle name of this object behind the scenes that the analysis of this method can't see so",
    "start": "714310",
    "end": "720279"
  },
  {
    "text": "we're making some optimistic assumptions that vocationally may be wrong and that's again part of finding the balance",
    "start": "720279",
    "end": "727200"
  },
  {
    "text": "with more there are some features that are more safe by construction than",
    "start": "727200",
    "end": "733839"
  },
  {
    "text": "others and certainly the ways in which you can not reference p-type middle name",
    "start": "733839",
    "end": "740260"
  },
  {
    "text": "twice but kind of grab it right away into a temporary variable that no one else has access to those are more safe",
    "start": "740260",
    "end": "745660"
  },
  {
    "text": "by construction now we have a question on this one which is you know how would",
    "start": "745660",
    "end": "755890"
  },
  {
    "text": "you go about enabling this nullable check in a big old solution with many projects yes so the way it's enabled is",
    "start": "755890",
    "end": "764020"
  },
  {
    "text": "that you can either enable it for the whole project with a with a project",
    "start": "764020",
    "end": "769660"
  },
  {
    "text": "setting which I hope that we can turn on by default in new projects starting",
    "start": "769660",
    "end": "776079"
  },
  {
    "text": "maybe already as soon as done at 5:00 and but you can also as you saw me do in",
    "start": "776079",
    "end": "782470"
  },
  {
    "text": "the person class and that's what I did in the program before I even started I",
    "start": "782470",
    "end": "787810"
  },
  {
    "text": "did that in the in the project with the the program in here but I hadn't turned it on for the",
    "start": "787810",
    "end": "795080"
  },
  {
    "start": "793000",
    "end": "1077000"
  },
  {
    "text": "project that has the class in it instead I can you can turn it on per file with these directives and you can even like",
    "start": "795080",
    "end": "801620"
  },
  {
    "text": "turn it on for part of a file so I can take this nullable enable and I can put",
    "start": "801620",
    "end": "806960"
  },
  {
    "text": "it down here and now you can see that the I get a warning on the question mark because the features not turned on for",
    "start": "806960",
    "end": "813230"
  },
  {
    "text": "the first half of the file you turn it on and off or there are various ways that you can carve out the pieces that",
    "start": "813230",
    "end": "820250"
  },
  {
    "text": "are currently features currently applied to and so one way of doing this is to",
    "start": "820250",
    "end": "825860"
  },
  {
    "text": "use these mechanisms to gradually introduce nullable reference types to",
    "start": "825860",
    "end": "832670"
  },
  {
    "text": "your code base a bit at a time there may be some code bases that I that are just",
    "start": "832670",
    "end": "840760"
  },
  {
    "text": "very well tested and you're not really worried about them having no problems in themselves but there may be a library",
    "start": "840760",
    "end": "847670"
  },
  {
    "text": "they may be a library that other code bases rely on and so you can also choose",
    "start": "847670",
    "end": "853580"
  },
  {
    "text": "to offer inaudible annotations but not do the null checking inside of your own body if you go your own code if you",
    "start": "853580",
    "end": "859850"
  },
  {
    "text": "trust the code itself to define though these various ways that you can do gradual adoption but it is so it is a",
    "start": "859850",
    "end": "865700"
  },
  {
    "text": "hump to get over to get existing code to to pinned all annotated and all aware if",
    "start": "865700",
    "end": "872300"
  },
  {
    "text": "you will and let me try to provide these these ways of managing that what we are",
    "start": "872300",
    "end": "880460"
  },
  {
    "text": "doing is we're rolling out nullable across all the core libraries and we're encouraging people who offer libraries",
    "start": "880460",
    "end": "888350"
  },
  {
    "text": "from that aren't from Microsoft to also do the same so that when you rely on",
    "start": "888350",
    "end": "894430"
  },
  {
    "text": "other people's API is the libraries you will get those nullable annotations in",
    "start": "894430",
    "end": "900230"
  },
  {
    "text": "the signatures and and you can you can get better feedback on how you use those",
    "start": "900230",
    "end": "905560"
  },
  {
    "text": "libraries in your own code so",
    "start": "905560",
    "end": "911290"
  },
  {
    "text": "once you if you turn it on on a new project though then it keeps you honest all the time it comes just one more",
    "start": "911850",
    "end": "916920"
  },
  {
    "text": "piece of feedback that you get from the tooling and so there it's kind of smooth it's only when you're sort of going",
    "start": "916920",
    "end": "923130"
  },
  {
    "text": "through the bulk update if you choose to do so that's the harder what could be a reason not to enable this feature if",
    "start": "923130",
    "end": "930030"
  },
  {
    "text": "you're able to use t-shirt in a new project there's really not a good reason",
    "start": "930030",
    "end": "936090"
  },
  {
    "text": "the feature is very non obnoxious in new code the only reason I can think of to",
    "start": "936090",
    "end": "944730"
  },
  {
    "text": "not use it in new code is if if a live library you rely on heavily hasn't",
    "start": "944730",
    "end": "952170"
  },
  {
    "text": "adopted it yet you you have the choice of either still using the feature but",
    "start": "952170",
    "end": "959070"
  },
  {
    "text": "then you might get more warnings when the next version of the library gets its nullable annotations or in that case you",
    "start": "959070",
    "end": "966000"
  },
  {
    "text": "might choose to wait until your dependencies about have adopted it before you do so you don't get to churn",
    "start": "966000",
    "end": "971520"
  },
  {
    "text": "that's sort of the only reason I can think of so that should be sort of temporary in the next within the next",
    "start": "971520",
    "end": "978630"
  },
  {
    "text": "year or two hopefully most of the world most of the active code and active libraries out there are not aware how",
    "start": "978630",
    "end": "986400"
  },
  {
    "text": "would this help when not implicitly assigning all but rather the value being derived from an expression that could",
    "start": "986400",
    "end": "992130"
  },
  {
    "text": "return all I external library well it",
    "start": "992130",
    "end": "997410"
  },
  {
    "text": "helps because the type of those libraries will say whether the thing can be naal or not and we will defensively",
    "start": "997410",
    "end": "1003770"
  },
  {
    "text": "say oh that thing might be null then we will warn if you if you do reference it",
    "start": "1003770",
    "end": "1011210"
  },
  {
    "text": "unsafely without checking first of course if you rely on a library that hasn't been annotated yet you won't get",
    "start": "1011210",
    "end": "1018500"
  },
  {
    "text": "any warnings and so it doesn't help you if you're relying on a library that hasn't been all annotated that's that's",
    "start": "1018500",
    "end": "1025670"
  },
  {
    "text": "really where the boundary is and again we could have made sort of the safe choice here and say well if you use an",
    "start": "1025670",
    "end": "1031250"
  },
  {
    "text": "old library that's not annotated we're going to warn you all over the place and that's probably very that's not very",
    "start": "1031250",
    "end": "1038329"
  },
  {
    "text": "conducive to adoption and so we said instead that old code non-null aware",
    "start": "1038330",
    "end": "1044089"
  },
  {
    "text": "code where the feature hasn't turned on those libraries they get a pass they don't",
    "start": "1044090",
    "end": "1049850"
  },
  {
    "text": "trigger any warnings in user code so it",
    "start": "1049850",
    "end": "1055340"
  },
  {
    "text": "doesn't really help you there okay um and then I think that was mostly it for",
    "start": "1055340",
    "end": "1063410"
  },
  {
    "text": "the novel reference types and we've got through the questions so I will go back to the slides and stairs like deck here",
    "start": "1063410",
    "end": "1076820"
  },
  {
    "text": "again now is something completely different so training away from what's",
    "start": "1076820",
    "end": "1086180"
  },
  {
    "start": "1077000",
    "end": "1186000"
  },
  {
    "text": "already out there and heading into the future of c-sharp one of the things that",
    "start": "1086180",
    "end": "1093440"
  },
  {
    "text": "we have been looking at for a very very long time and we sort of hinted oh we're",
    "start": "1093440",
    "end": "1099950"
  },
  {
    "text": "almost there we almost figured this out is a feature that we affectionately",
    "start": "1099950",
    "end": "1106490"
  },
  {
    "text": "called Wreckers or a set of features or a kind of feature idea if you will the",
    "start": "1106490",
    "end": "1114920"
  },
  {
    "text": "idea is in c-sharp as a classic object-oriented programming language",
    "start": "1114920",
    "end": "1121420"
  },
  {
    "text": "writing simple data types can be pretty laborious because all the defaults",
    "start": "1122650",
    "end": "1130010"
  },
  {
    "text": "sometimes are kind of poking the wrong way and we we want to find some ways to",
    "start": "1130010",
    "end": "1138140"
  },
  {
    "text": "make this easier um so it started out with okay we can we can build a feature",
    "start": "1138140",
    "end": "1143480"
  },
  {
    "text": "that lets you write a very abbreviated syntax and then it it's opinionated and it sort of just generates all the right",
    "start": "1143480",
    "end": "1149840"
  },
  {
    "text": "stuff for some value of that but every time we've looked at it like that it that hasn't really panned out to be a",
    "start": "1149840",
    "end": "1155330"
  },
  {
    "text": "very nice feature or it's one of those where as soon as you don't fit within the opinionated Ness of that feature you",
    "start": "1155330",
    "end": "1163610"
  },
  {
    "text": "fall off a cliff and you have to write a whole bunch of code yourself so",
    "start": "1163610",
    "end": "1169010"
  },
  {
    "text": "we've been searching for is a way to kind of kind of like if you remember",
    "start": "1169010",
    "end": "1176570"
  },
  {
    "text": "link language integrated query in c-sharp 3 or you know about it it it wasn't really one feature so much",
    "start": "1176570",
    "end": "1183620"
  },
  {
    "text": "as it was a set of features that kind of work together to achieve a certain",
    "start": "1183620",
    "end": "1190310"
  },
  {
    "text": "scenario but also a valuable features in and of themselves and we're trying to think of records in the same way and so",
    "start": "1190310",
    "end": "1196850"
  },
  {
    "text": "I'll show you where our thinking is today with no promises that this is how it will ship in actual c-sharp 9 but",
    "start": "1196850",
    "end": "1204530"
  },
  {
    "text": "we're hoping to ship seizure at 9 late this fall along with night 5 in November",
    "start": "1204530",
    "end": "1211010"
  },
  {
    "text": "and so we're hopefully converging on this there's still some open questions and you'll see some of those so one of",
    "start": "1211010",
    "end": "1218090"
  },
  {
    "text": "the things that we that we've try to do intermittently for a while is to better",
    "start": "1218090",
    "end": "1224990"
  },
  {
    "text": "support immutable data types as opposed to mutable so there are several ways in",
    "start": "1224990",
    "end": "1231170"
  },
  {
    "text": "which if you want to write immutable data type you're at a disadvantage in c-sharp and we'll continue to deal with",
    "start": "1231170",
    "end": "1238190"
  },
  {
    "text": "some of those and I'll show you that in a bit we also want to better support what we call nominal creation or what we started",
    "start": "1238190",
    "end": "1244280"
  },
  {
    "text": "calling nominal creation and essentially think of it as using object initializers",
    "start": "1244280",
    "end": "1249920"
  },
  {
    "text": "instead of or on top of constructors because it has a bunch of good properties and people use them a lot and",
    "start": "1249920",
    "end": "1258340"
  },
  {
    "text": "there are a few other things here but we'll get to them in a minute but one of the big points here is that we want to",
    "start": "1258340",
    "end": "1266690"
  },
  {
    "text": "have all these features work well with inheritance and that turns out to be because inheritance is a key feature in",
    "start": "1266690",
    "end": "1271760"
  },
  {
    "text": "c-sharp and records feature isn't really worth its salt in an object or in a programming language if it isn't robust",
    "start": "1271760",
    "end": "1278450"
  },
  {
    "text": "across inheritance and and hat it doesn't have like a good conceptual",
    "start": "1278450",
    "end": "1285440"
  },
  {
    "text": "founding even when you have inheritance hierarchies things that derived from each other so that's been one of the things that",
    "start": "1285440",
    "end": "1291800"
  },
  {
    "text": "has been really important for us to work out before we before we go public with this feature so let's let's dive in and",
    "start": "1291800",
    "end": "1297200"
  },
  {
    "start": "1297000",
    "end": "1625000"
  },
  {
    "text": "have a look let's start out with them nominal creation so",
    "start": "1297200",
    "end": "1303160"
  },
  {
    "text": "classically this is sort of as opposed to positional creation so so classically",
    "start": "1303160",
    "end": "1308450"
  },
  {
    "text": "object on the programming languages like Java and so on they have constructor",
    "start": "1308450",
    "end": "1314420"
  },
  {
    "text": "classes have constructors does the person class here it has a constructor that takes the data that eventually",
    "start": "1314420",
    "end": "1322580"
  },
  {
    "text": "becomes the properties so you have to write the constructor you have to assign",
    "start": "1322580",
    "end": "1329600"
  },
  {
    "text": "to the properties at least to share it you used to also manually write a backing field and and and the logic to",
    "start": "1329600",
    "end": "1340090"
  },
  {
    "text": "surface the backing field through the property and now we at least have Auto properties to deal with that but it",
    "start": "1340090",
    "end": "1345980"
  },
  {
    "text": "still you have to do this transformation work here and then when you when you write the derived class it gets a little",
    "start": "1345980",
    "end": "1353780"
  },
  {
    "text": "more annoying because you have to take the parameters for the base class as well as your your additional state here",
    "start": "1353780",
    "end": "1360170"
  },
  {
    "text": "and pass some of it up to the base class explicitly and then do the rest you now",
    "start": "1360170",
    "end": "1365570"
  },
  {
    "text": "contrast that with how you would do it with object initializes which have been able to do in C shirt since C sharp 3",
    "start": "1365570",
    "end": "1375160"
  },
  {
    "text": "you would just write a class like this two properties and that's it and the",
    "start": "1375160",
    "end": "1381200"
  },
  {
    "text": "drive class derives and then has another property and that's it and now the place",
    "start": "1381200",
    "end": "1387770"
  },
  {
    "text": "where it gets a little more laborious is that instead of just passing values to a essentially a creation function",
    "start": "1387770",
    "end": "1393920"
  },
  {
    "text": "constructor well you have to do it nominally by name instead of by position here so that your you're directly",
    "start": "1393920",
    "end": "1401450"
  },
  {
    "text": "setting the properties as part of your construction expression here instead of",
    "start": "1401450",
    "end": "1408950"
  },
  {
    "text": "passing them into a function that then does something with them that happens to always be the same thing pretty much so",
    "start": "1408950",
    "end": "1416350"
  },
  {
    "text": "clearly there's just some terse Ness benefits to the nominal creation part",
    "start": "1416350",
    "end": "1422360"
  },
  {
    "text": "but there are also other benefits from a software engineering perspective in",
    "start": "1422360",
    "end": "1427610"
  },
  {
    "text": "particular if you think about these chunks of code the base class the drive class the the consuming client of the",
    "start": "1427610",
    "end": "1435500"
  },
  {
    "text": "code think of them being independent living in different projects different assemblies and and evolving may be to",
    "start": "1435500",
    "end": "1443379"
  },
  {
    "text": "some degree independently there are all kinds of there are all kinds of strong",
    "start": "1443379",
    "end": "1450100"
  },
  {
    "text": "dependencies in the in the positional regime here where let's say I wanted to",
    "start": "1450100",
    "end": "1456369"
  },
  {
    "text": "add another property to a person now I",
    "start": "1456369",
    "end": "1462279"
  },
  {
    "text": "have to I I can't just add another parameter to the constructor because now",
    "start": "1462279",
    "end": "1468489"
  },
  {
    "text": "I'm going to break the derived class and I'm gonna break the construction here",
    "start": "1468489",
    "end": "1473789"
  },
  {
    "text": "now I could I could maybe add it with a with an optional parameter but that's still binary breaking change or now I",
    "start": "1473789",
    "end": "1480639"
  },
  {
    "text": "have to keep a constructor around that it's not really the one I'm supposed to use anymore just so that my other code",
    "start": "1480639",
    "end": "1487269"
  },
  {
    "text": "doesn't break so it's the whole independent updates thing becomes very gnarly it's your very strong",
    "start": "1487269",
    "end": "1492309"
  },
  {
    "text": "dependencies between both at the source and the binary level between the different components here and contrast",
    "start": "1492309",
    "end": "1498909"
  },
  {
    "text": "that over here we're really as long as the members that I'm talking about are",
    "start": "1498909",
    "end": "1505570"
  },
  {
    "text": "still there the code will still compile so a lot of a lot of people I talk to",
    "start": "1505570",
    "end": "1511599"
  },
  {
    "text": "they use the mandate this nominal",
    "start": "1511599",
    "end": "1516669"
  },
  {
    "text": "approach to to class libraries and say we don't we're not going to do the constructor based thing at all even",
    "start": "1516669",
    "end": "1522639"
  },
  {
    "text": "though that sort of is the official way in the language service fee for the because of these software engineering",
    "start": "1522639",
    "end": "1527950"
  },
  {
    "text": "benefits now of course the big downside is that it works by actually assigning",
    "start": "1527950",
    "end": "1535090"
  },
  {
    "text": "to the properties as part of the after the object has been created so under the",
    "start": "1535090",
    "end": "1541809"
  },
  {
    "text": "hood it creates a student then assigns into these properties which means that",
    "start": "1541809",
    "end": "1546909"
  },
  {
    "text": "they have to be mutable and so if you want to have immutable data",
    "start": "1546909",
    "end": "1553779"
  },
  {
    "text": "representations which you often do when you're just simply representing data simply or have a an immutable data model",
    "start": "1553779",
    "end": "1560769"
  },
  {
    "text": "like the syntax trees in a Rosslyn compiler for c-sharp for instance are immutable and many things nowadays are",
    "start": "1560769",
    "end": "1567489"
  },
  {
    "text": "done with immutable models well having to make your object model",
    "start": "1567489",
    "end": "1573130"
  },
  {
    "text": "mutable just so that you can use object initializes that seems like it's um it's",
    "start": "1573130",
    "end": "1578440"
  },
  {
    "text": "a serious disadvantage and so one of the features we're looking at is what we're calling in it only properties and that's",
    "start": "1578440",
    "end": "1586390"
  },
  {
    "text": "the idea is that you can create a version of the property setter that only",
    "start": "1586390",
    "end": "1592000"
  },
  {
    "text": "works during initialization time and so we're we're creating ascension to this",
    "start": "1592000",
    "end": "1597460"
  },
  {
    "text": "concept of initialization time which is which stretches beyond the actual",
    "start": "1597460",
    "end": "1602919"
  },
  {
    "text": "constructor call and also includes the stuff that's in the object initializer",
    "start": "1602919",
    "end": "1608049"
  },
  {
    "text": "here so so these properties are assignable until the until the object",
    "start": "1608049",
    "end": "1613330"
  },
  {
    "text": "initializer stops and then no longer so now you're sort of regaining",
    "start": "1613330",
    "end": "1618870"
  },
  {
    "text": "immutability while being able to use nominal object creation that's one",
    "start": "1618870",
    "end": "1624130"
  },
  {
    "text": "feature now one thing you lose with nominal object creation is this ability",
    "start": "1624130",
    "end": "1633399"
  },
  {
    "start": "1625000",
    "end": "1803000"
  },
  {
    "text": "to do whole object validation and other initialization logic that kind of depends on having all the data available",
    "start": "1633399",
    "end": "1639880"
  },
  {
    "text": "to some logic that says oh this object can't be created because this is that or",
    "start": "1639880",
    "end": "1645640"
  },
  {
    "text": "that does some last-minute initialization or something so in a",
    "start": "1645640",
    "end": "1656080"
  },
  {
    "text": "positional regime you would put some logic in the constructor here and say ok I'm gonna check that the you know they",
    "start": "1656080",
    "end": "1663669"
  },
  {
    "text": "join the length of this name all told isn't isn't too great otherwise he'll",
    "start": "1663669",
    "end": "1669580"
  },
  {
    "text": "throw an exception whereas for the the nominal stuff there isn't really a place",
    "start": "1669580",
    "end": "1675640"
  },
  {
    "text": "to put this check because by the time the constructor runs you haven't assigned the first name and the last",
    "start": "1675640",
    "end": "1680799"
  },
  {
    "text": "name yet that is yet to come that is yet that happens during the execution of the",
    "start": "1680799",
    "end": "1685809"
  },
  {
    "text": "initializers so we're thinking of this idea we've called the validators but",
    "start": "1685809",
    "end": "1691510"
  },
  {
    "text": "they should probably be called initializers or something many things are already called initializers so we'll",
    "start": "1691510",
    "end": "1697029"
  },
  {
    "text": "think of a good name for them but the idea is that it's something like a constructor",
    "start": "1697029",
    "end": "1702909"
  },
  {
    "text": "it doesn't take any parameters it doesn't have any accessibility defined or anything it's just a chunk of code",
    "start": "1702909",
    "end": "1708909"
  },
  {
    "text": "that a class can declare that gets run after initialization so it's the last",
    "start": "1708909",
    "end": "1714999"
  },
  {
    "text": "stuff that gets run so here it would get run after the object initializes had",
    "start": "1714999",
    "end": "1721509"
  },
  {
    "text": "already been assigned and it can now examine the well this should be",
    "start": "1721509",
    "end": "1727330"
  },
  {
    "text": "uppercase later first name and last name let's bug in my slide there you now",
    "start": "1727330",
    "end": "1732340"
  },
  {
    "text": "examine the state of the object and decide whether this is a good object to share with the world before it gets a",
    "start": "1732340",
    "end": "1738129"
  },
  {
    "text": "sign and sort of has this last chance of throwing an exception just before this object has been completed and gets",
    "start": "1738129",
    "end": "1744309"
  },
  {
    "text": "assigned to P and shared with the world and and consumed so it's sort of the last chance to get in a at a check or",
    "start": "1744309",
    "end": "1753489"
  },
  {
    "text": "some other initialize the logic here so so that's another way in which we're",
    "start": "1753489",
    "end": "1758950"
  },
  {
    "text": "trying to make nominal creation more full-fledged one thing that we haven't gotten so far",
    "start": "1758950",
    "end": "1764710"
  },
  {
    "text": "looking at yet is no one's forcing you to assign these properties that are",
    "start": "1764710",
    "end": "1772779"
  },
  {
    "text": "declared here whereas with the positional if you are if your",
    "start": "1772779",
    "end": "1777849"
  },
  {
    "text": "constructors parameters aren't optional then you are forced to pass something in sometimes you want that you want",
    "start": "1777849",
    "end": "1784359"
  },
  {
    "text": "something to be mandatory and we're still looking at what's the what's the right feature for letting properties be",
    "start": "1784359",
    "end": "1792129"
  },
  {
    "text": "mandatory to have mandatory initialization so it's working progress",
    "start": "1792129",
    "end": "1797340"
  },
  {
    "text": "now those things aren't about records but we'll that's a separate feature yet",
    "start": "1797340",
    "end": "1806019"
  },
  {
    "text": "they're just like useful features in c-sharp and here's one more that might be moderately useful in and of itself",
    "start": "1806019",
    "end": "1811450"
  },
  {
    "text": "but we're sort of starting to gather up a set of building blocks for having a",
    "start": "1811450",
    "end": "1816849"
  },
  {
    "text": "dedicated records feature again just like link there are all these building blocks lambdas and expression trees and",
    "start": "1816849",
    "end": "1822849"
  },
  {
    "text": "so on and then there's the actual career expression feature that brings them all together now",
    "start": "1822849",
    "end": "1831029"
  },
  {
    "text": "thing that that is frequently annoying to people is that you can only really",
    "start": "1831410",
    "end": "1837410"
  },
  {
    "text": "create objects with constructors if you want to apply an object initializer like",
    "start": "1837410",
    "end": "1843830"
  },
  {
    "text": "down here you can only apply it in a new expression you can have like a call like",
    "start": "1843830",
    "end": "1849950"
  },
  {
    "text": "a factory method and then apply an object initializer so it's hard for a class to offer a more abstract view of",
    "start": "1849950",
    "end": "1856910"
  },
  {
    "text": "its object creation options really now let's say that we had some way of naming",
    "start": "1856910",
    "end": "1863930"
  },
  {
    "text": "something in factory then we we could allow you to apply object initializes to",
    "start": "1863930",
    "end": "1869360"
  },
  {
    "text": "the result of a factory and the factory in turn would have to promise that it will only return new objects and we",
    "start": "1869360",
    "end": "1874640"
  },
  {
    "text": "could check that so assume that we have that feature let me try to to to do one",
    "start": "1874640",
    "end": "1880570"
  },
  {
    "text": "one thing that you could do if you had that so let's add to the person class let's give it a protective essentially a",
    "start": "1880570",
    "end": "1888710"
  },
  {
    "text": "copy constructor a constructor that takes an existing person and copies its",
    "start": "1888710",
    "end": "1897140"
  },
  {
    "text": "state over to a new to this new person okay its protective so it's only meant",
    "start": "1897140",
    "end": "1903080"
  },
  {
    "text": "to be called from inside the class itself and now we put a public virtual",
    "start": "1903080",
    "end": "1910010"
  },
  {
    "text": "method out there and the surface area of person called with takes no parameters",
    "start": "1910010",
    "end": "1915320"
  },
  {
    "text": "and all it does is it creates an new copy of this person and returns it and",
    "start": "1915320",
    "end": "1923200"
  },
  {
    "text": "this we can whether it's an if an attribute or an actual keyword we can",
    "start": "1923200",
    "end": "1929720"
  },
  {
    "text": "discuss since axis always up for discussion but because it's marked a",
    "start": "1929720",
    "end": "1934910"
  },
  {
    "text": "factory method he it satisfies that criterion because it is retraining a new object and compiler can check this and",
    "start": "1934910",
    "end": "1943250"
  },
  {
    "text": "we can do the same kind of thing in student and you can override the with method and return student instead of a",
    "start": "1943250",
    "end": "1950600"
  },
  {
    "text": "person and actually maybe we can add crowberry and return types to see",
    "start": "1950600",
    "end": "1957260"
  },
  {
    "text": "sheriff as well and we're working on doing that properly in runtime as it's a separate feature again so that you can",
    "start": "1957260",
    "end": "1963050"
  },
  {
    "text": "have a more specific return type when you override a method than the one that that was in the original declaration so now",
    "start": "1963050",
    "end": "1970590"
  },
  {
    "text": "we are all riding with two actual returning student instead of a person so that the width method essentially gives",
    "start": "1970590",
    "end": "1976649"
  },
  {
    "text": "you a copy of what the object actually was not a copy at the sort of static",
    "start": "1976649",
    "end": "1982519"
  },
  {
    "text": "aesthetically known type okay what's with this whiff method well if I had",
    "start": "1982519",
    "end": "1989100"
  },
  {
    "text": "that and it's a factory method then I could do this I could call the width method get a copy bag of p1 but because",
    "start": "1989100",
    "end": "1996480"
  },
  {
    "text": "I'm calling a factory method I get to apply an object initializer to it and so I can create a modified copy for",
    "start": "1996480",
    "end": "2002990"
  },
  {
    "text": "instance when I got married I changed my last name so I used to be called Nilson but then I got married and now I'm",
    "start": "2002990",
    "end": "2009080"
  },
  {
    "text": "called Torgerson so we're creating a new record of me that's like the old one but with something changed I just",
    "start": "2009080",
    "end": "2014870"
  },
  {
    "text": "non-destructive mutation which is a key element in working with with immutable",
    "start": "2014870",
    "end": "2024350"
  },
  {
    "text": "data and so this is using these",
    "start": "2024350",
    "end": "2029649"
  },
  {
    "text": "combination of elements I can now have an immutable object that where I can",
    "start": "2029649",
    "end": "2036649"
  },
  {
    "text": "create when I can do non-destructive mutation and you know maybe like with",
    "start": "2036649",
    "end": "2042799"
  },
  {
    "text": "the current object initializes maybe we allow you to emit the arguments for",
    "start": "2042799",
    "end": "2047899"
  },
  {
    "text": "niceness when when the argument list is empty or what we're currently planning",
    "start": "2047899",
    "end": "2053780"
  },
  {
    "text": "there's a there's a keyword that that's syntactic sugar for doing what you just saw that's a with expression that is",
    "start": "2053780",
    "end": "2061099"
  },
  {
    "text": "assigned for this very purpose for a non-destructive communication so now",
    "start": "2061099",
    "end": "2070220"
  },
  {
    "start": "2068000",
    "end": "2276000"
  },
  {
    "text": "these building blocks let's go and talk about what a record what a record feature could be so let's imagine that",
    "start": "2070220",
    "end": "2076368"
  },
  {
    "text": "this is extra keyword that you can put on a class a struct declaration you say that it's a record and you declare some",
    "start": "2076369",
    "end": "2084290"
  },
  {
    "text": "properties and it has inheritance like everything else but the record keyword",
    "start": "2084290",
    "end": "2089898"
  },
  {
    "text": "means that there are some things you get well first of all even without the record keyword we get nominal creation",
    "start": "2089899",
    "end": "2095300"
  },
  {
    "text": "because we have this in it only property feature but on top",
    "start": "2095300",
    "end": "2102290"
  },
  {
    "text": "of that the record keyword automatically generates that with stuff that was a little gnarly an example before so when",
    "start": "2102290",
    "end": "2109940"
  },
  {
    "text": "you put record on it will it will just put the right thing into the class to",
    "start": "2109940",
    "end": "2116210"
  },
  {
    "text": "support a non-destructive mutation so that you can with these records here",
    "start": "2116210",
    "end": "2122680"
  },
  {
    "text": "also we didn't talk about that as a separable a separate feature but you could get",
    "start": "2122680",
    "end": "2129109"
  },
  {
    "text": "value equality so let's say very hypothetically that I can divorced or",
    "start": "2129109",
    "end": "2135109"
  },
  {
    "text": "just changed my mind about my last name you know there would be another",
    "start": "2135109",
    "end": "2140420"
  },
  {
    "text": "non-destructive mutation here and we",
    "start": "2140420",
    "end": "2146140"
  },
  {
    "text": "value equality would then mean that even though P 3 reference is a different object a different object identity than",
    "start": "2146140",
    "end": "2152900"
  },
  {
    "text": "the original P 1 then comparing them equal with various equals and mechanisms",
    "start": "2152900",
    "end": "2159650"
  },
  {
    "text": "would still make them the same because they contain the same values value equality is also really useful when",
    "start": "2159650",
    "end": "2166040"
  },
  {
    "text": "you're just talking about plain old data it's a little dangerous when you have objects that are immutable but value",
    "start": "2166040",
    "end": "2172040"
  },
  {
    "text": "equality and immutable go really well together and so we would also support",
    "start": "2172040",
    "end": "2177710"
  },
  {
    "text": "value equality out of the gate on records getting implementing value",
    "start": "2177710",
    "end": "2183230"
  },
  {
    "text": "equality is yourself is really tedious and it's also",
    "start": "2183230",
    "end": "2188690"
  },
  {
    "text": "error-prone and especially when you have inheritance in the mix it's actually",
    "start": "2188690",
    "end": "2194480"
  },
  {
    "text": "really hard to to create or it's hard to get it right to create an equality",
    "start": "2194480",
    "end": "2202339"
  },
  {
    "text": "implementation that is symmetric even when there's inheritance involved tend to accidentally compare things using the",
    "start": "2202339",
    "end": "2211010"
  },
  {
    "text": "left hand sides equality in some cases and right hand sides equality in other cases or rather if you swap them you get",
    "start": "2211010",
    "end": "2218869"
  },
  {
    "text": "different equality supply but we have a trick for that and so we we know a good",
    "start": "2218869",
    "end": "2224299"
  },
  {
    "text": "way to implement value equality across inheritance so we've been debating",
    "start": "2224299",
    "end": "2229309"
  },
  {
    "text": "whether value equality should be something that you can independently opt-in to on a class or",
    "start": "2229309",
    "end": "2234950"
  },
  {
    "text": "whether it should just be something we do when you when you go fooling and say I'm I'm on my class to be a record class",
    "start": "2234950",
    "end": "2240560"
  },
  {
    "text": "we haven't we our current plan of record is plant record is to to just have value",
    "start": "2240560",
    "end": "2247400"
  },
  {
    "text": "quality generated for records because we think records are broad and useful enough that that it's fine that when you",
    "start": "2247400",
    "end": "2253100"
  },
  {
    "text": "want value of the quality you probably want the other stuff as well we may be wrong on that and we're designing value",
    "start": "2253100",
    "end": "2258620"
  },
  {
    "text": "of quality in such a way that it's easily separable as a feature if we decide that that's the right thing even later even in a subsequent now there are",
    "start": "2258620",
    "end": "2269840"
  },
  {
    "text": "other things to think about for records now the the the record syntax that we have here is pretty terse in that you",
    "start": "2269840",
    "end": "2278030"
  },
  {
    "start": "2276000",
    "end": "2417000"
  },
  {
    "text": "only have to state the properties and the rest gets figured out for you but of course people can't get enough of",
    "start": "2278030",
    "end": "2284150"
  },
  {
    "text": "terseness right and so you you might wonder whether there are some",
    "start": "2284150",
    "end": "2290030"
  },
  {
    "text": "abbreviations that you can do when you have a record maybe you know maybe things are probably by default and so",
    "start": "2290030",
    "end": "2296420"
  },
  {
    "text": "whenever you declare your properties they're public by default because after all a record is really about the data",
    "start": "2296420",
    "end": "2301970"
  },
  {
    "text": "and you wouldn't normally or having things private would sort of not be the",
    "start": "2301970",
    "end": "2309800"
  },
  {
    "text": "best default maybe most records wouldn't have any private stuff and only very advanced ones would and so maybe just",
    "start": "2309800",
    "end": "2315470"
  },
  {
    "text": "changing the default would be good maybe you want to go even even further and say that if you declare something that just",
    "start": "2315470",
    "end": "2322940"
  },
  {
    "text": "looks like it what would be a private field in normal class maybe that actually defaults to generating a public",
    "start": "2322940",
    "end": "2329890"
  },
  {
    "text": "in it only property of that name and so that things are so terse that you can",
    "start": "2329890",
    "end": "2337130"
  },
  {
    "text": "you can just write your types as one-liners now it's almost like being in",
    "start": "2337130",
    "end": "2342320"
  },
  {
    "text": "a functional language but with beautiful inheritance you get these very church data declarations so where to where to",
    "start": "2342320",
    "end": "2351940"
  },
  {
    "text": "set the dial on this abbreviation stuff is something that we're also it's an active debate and they're still figuring",
    "start": "2351940",
    "end": "2360320"
  },
  {
    "text": "it out and again it's something that if we don't do it upfront it's still going to be really useful and we can add",
    "start": "2360320",
    "end": "2365690"
  },
  {
    "text": "later my public demand so that's up for the suffer debate now you you might also",
    "start": "2365690",
    "end": "2373010"
  },
  {
    "text": "want to mix constructors and records and it might be nice if you could declare a record with sort of a constructor to",
    "start": "2373010",
    "end": "2379490"
  },
  {
    "text": "clear it directly on the class name and just have these things turn into",
    "start": "2379490",
    "end": "2385850"
  },
  {
    "text": "properties to init only properties on the person class as well as there being a constructor generated for taking in",
    "start": "2385850",
    "end": "2393980"
  },
  {
    "text": "those we could even declare a Deconstructor for you as well if you have a constructor of course it has now",
    "start": "2393980",
    "end": "2402860"
  },
  {
    "text": "we're back to some of the same problems with the positional creation that you and I have to repeat yourself in a drive",
    "start": "2402860",
    "end": "2408050"
  },
  {
    "text": "class and so on right so this might be something that you would mostly do if you don't also have inheritance in the",
    "start": "2408050",
    "end": "2414050"
  },
  {
    "text": "mix but it's certainly on the table so that was it for records and I'm gonna go",
    "start": "2414050",
    "end": "2421880"
  },
  {
    "start": "2417000",
    "end": "2630000"
  },
  {
    "text": "over and see if there are some there's a question here and while I'm look while",
    "start": "2421880",
    "end": "2427010"
  },
  {
    "text": "I'm answering that maybe more questions will come in will the nominal initialize is still cover up the code line if an",
    "start": "2427010",
    "end": "2433940"
  },
  {
    "text": "error occurs say you use a method to set a property that is the main reason I don't use them cover up the code line",
    "start": "2433940",
    "end": "2447220"
  },
  {
    "text": "always meaning the sense of it in a sense of tooling that you don't get the",
    "start": "2447220",
    "end": "2453010"
  },
  {
    "text": "the the place where the error occurs",
    "start": "2453010",
    "end": "2458890"
  },
  {
    "text": "called out as specifically there's certainly if I'm understanding you",
    "start": "2458890",
    "end": "2464000"
  },
  {
    "text": "correctly for instance in the debugger there are places where you can't really the sub statement places where the",
    "start": "2464000",
    "end": "2470630"
  },
  {
    "text": "debugger can't really like step two and you can't really get the feedback at that level maybe when we've talked about",
    "start": "2470630",
    "end": "2476660"
  },
  {
    "text": "whether we should improve the tooling here so I think maybe that is say if that was the question maybe that is",
    "start": "2476660",
    "end": "2482510"
  },
  {
    "text": "something that we could could handle angel just kind of wait another second",
    "start": "2482510",
    "end": "2488150"
  },
  {
    "text": "to see if there are more questions on the records you",
    "start": "2488150",
    "end": "2493030"
  },
  {
    "text": "there was a nullable question that I missed maybe came in after I change",
    "start": "2496869",
    "end": "2503740"
  },
  {
    "text": "topics which I can I can come back to it says Ken moving to Noble references be",
    "start": "2503740",
    "end": "2509680"
  },
  {
    "text": "automated somehow at least for most cases that's a really good question I think to some degree it probably can we",
    "start": "2509680",
    "end": "2517140"
  },
  {
    "text": "experimented with some tools and we did try to use them on the on the core",
    "start": "2517140",
    "end": "2526059"
  },
  {
    "text": "library on our core libraries and I'm not sure what the state of them are they're certainly hacky but probably",
    "start": "2526059",
    "end": "2534609"
  },
  {
    "text": "things you could do to kind of do a broad sweep and then get most of it right",
    "start": "2534609",
    "end": "2542099"
  },
  {
    "text": "put malleability in accordingly so that is that so me an option that the danger",
    "start": "2545390",
    "end": "2551209"
  },
  {
    "text": "of that is that you if you have any wrong behavior in there you might end up encoding that in the in the signature",
    "start": "2551209",
    "end": "2557420"
  },
  {
    "text": "rather than discovering it and fixing it so they're trade offs there okay I am",
    "start": "2557420",
    "end": "2567619"
  },
  {
    "text": "not seeing more questions in slider right now so let's move to the third",
    "start": "2567619",
    "end": "2573559"
  },
  {
    "text": "topic which is not something that we're",
    "start": "2573559",
    "end": "2579950"
  },
  {
    "text": "actively working on right now but that we've been debating also for years and it's one of those things that would be a",
    "start": "2579950",
    "end": "2585499"
  },
  {
    "text": "really big change to c-sharp that would into c sure that would involve the",
    "start": "2585499",
    "end": "2591200"
  },
  {
    "text": "runtime and various things if something that needs a lot of means a lot of working through making sure we get it",
    "start": "2591200",
    "end": "2598309"
  },
  {
    "text": "right but I think it's very exciting if there are people out there who are",
    "start": "2598309",
    "end": "2603700"
  },
  {
    "text": "acquainted with certain functional languages maybe one of the ways of",
    "start": "2603700",
    "end": "2609019"
  },
  {
    "text": "looking at it is it's sort of an attempt to add equivalent to what Haskell calls",
    "start": "2609019",
    "end": "2615799"
  },
  {
    "text": "type classes to c-sharp but I'm not",
    "start": "2615799",
    "end": "2621259"
  },
  {
    "text": "gonna explain it from that angle because most of you are probably not Haskell programmers and so that's not going to be very enlightening but the the idea is",
    "start": "2621259",
    "end": "2632569"
  },
  {
    "text": "to add a triple of features to some",
    "start": "2632569",
    "end": "2637969"
  },
  {
    "text": "version of c-sharp which I will call ten but that does not entail any sort of",
    "start": "2637969",
    "end": "2644269"
  },
  {
    "text": "promise or decision and and those would",
    "start": "2644269",
    "end": "2649789"
  },
  {
    "text": "help especially but not exclusively with generic abstraction so the first feature",
    "start": "2649789",
    "end": "2659180"
  },
  {
    "text": "is static interface members so interfaces today and in most object-oriented languages can only",
    "start": "2659180",
    "end": "2664549"
  },
  {
    "text": "specify instance members for the implementing classes roles is an idea of",
    "start": "2664549",
    "end": "2673119"
  },
  {
    "text": "allowing an existing value like an existing object viewing it from a certain angle and",
    "start": "2673119",
    "end": "2680570"
  },
  {
    "text": "giving it that it might imbue it with additional members and also even",
    "start": "2680570",
    "end": "2686200"
  },
  {
    "text": "additional types without messing with what how its represented at runtime like",
    "start": "2686200",
    "end": "2692630"
  },
  {
    "text": "without wrapping it or anything and extensions are sort of a type level version of that like extension methods",
    "start": "2692630",
    "end": "2699500"
  },
  {
    "text": "but allowing not just methods but other things to apply to a given type in a",
    "start": "2699500",
    "end": "2706550"
  },
  {
    "text": "given scope in addition to what the type already has and they're all kind of tied together in various ways and I have an",
    "start": "2706550",
    "end": "2712010"
  },
  {
    "text": "example that I'll go through that showcases all of them it's a little contrived but on the other hand it",
    "start": "2712010",
    "end": "2719390"
  },
  {
    "text": "addresses a a common need that in in the",
    "start": "2719390",
    "end": "2725810"
  },
  {
    "text": "net code that is not well handled today so so in that sense it shows some of",
    "start": "2725810",
    "end": "2733310"
  },
  {
    "start": "2731000",
    "end": "2814000"
  },
  {
    "text": "what these features will be able to do okay so starting out with an interface",
    "start": "2733310",
    "end": "2738410"
  },
  {
    "text": "here one of the things that we really struggle with this numeric abstraction",
    "start": "2738410",
    "end": "2743680"
  },
  {
    "text": "internet because numerix is done through is typically done primarily with static",
    "start": "2743680",
    "end": "2750470"
  },
  {
    "text": "members in particular operators it's really hard to abstract generically",
    "start": "2750470",
    "end": "2759430"
  },
  {
    "text": "algorithms that work on types that have certain numeric capabilities but if we",
    "start": "2759430",
    "end": "2766100"
  },
  {
    "text": "had static members and interfaces we could describe we could describe numeric",
    "start": "2766100",
    "end": "2773360"
  },
  {
    "text": "entities more abstractly with interfaces like this so this is a mathematical",
    "start": "2773360",
    "end": "2782830"
  },
  {
    "text": "object called a monoid and we're representing with an interface and a monoid is something that has a neutral",
    "start": "2782830",
    "end": "2791720"
  },
  {
    "text": "element which we'll call zero and it has an operator which applies to mono i'ts",
    "start": "2791720",
    "end": "2797960"
  },
  {
    "text": "and produces to the particular kind of Monroy dan produces other objects of that particular kind of mon line and of",
    "start": "2797960",
    "end": "2804830"
  },
  {
    "text": "course the serie one is then expected to be neutral under under the-- what we",
    "start": "2804830",
    "end": "2810260"
  },
  {
    "text": "call the addition the Oberoi and so based on just these two operations we could we could write",
    "start": "2810260",
    "end": "2816470"
  },
  {
    "start": "2814000",
    "end": "2863000"
  },
  {
    "text": "ourselves a generic method that takes anything that's a monoid takes an array",
    "start": "2816470",
    "end": "2823550"
  },
  {
    "text": "of those and starts out with the neutral element and then she reaches over the",
    "start": "2823550",
    "end": "2829550"
  },
  {
    "text": "array and adds the the additional",
    "start": "2829550",
    "end": "2834910"
  },
  {
    "text": "elements whatever they are to that accumulating it and then returning the",
    "start": "2834910",
    "end": "2840140"
  },
  {
    "text": "result course this is very this is a trivial America algorithm but imagine",
    "start": "2840140",
    "end": "2846110"
  },
  {
    "text": "bigger numeric algorithms and imagine bigger types representing their capabilities now we we get a way of",
    "start": "2846110",
    "end": "2857390"
  },
  {
    "text": "writing a beautiful generic code extracted or when you write capabilities",
    "start": "2857390",
    "end": "2862690"
  },
  {
    "text": "so I think so static members in and of themselves are pretty useful and now we",
    "start": "2862690",
    "end": "2868160"
  },
  {
    "start": "2863000",
    "end": "3074000"
  },
  {
    "text": "would go and implement I'm annoyed on say the ordinary int in a net and we",
    "start": "2868160",
    "end": "2875119"
  },
  {
    "text": "would add either an implicit or explicit implementation of zero and we would sort",
    "start": "2875119",
    "end": "2880760"
  },
  {
    "text": "of just let the plus event implement the plus operator expected by the I'm on our",
    "start": "2880760",
    "end": "2886520"
  },
  {
    "text": "interface and and now we would be able to call this generic add all method with",
    "start": "2886520",
    "end": "2892550"
  },
  {
    "text": "an int array and infer the the type argument to the int and it would satisfy",
    "start": "2892550",
    "end": "2899750"
  },
  {
    "text": "the constraint that it is indeed and I'm on right of int so that kind of all",
    "start": "2899750",
    "end": "2906140"
  },
  {
    "text": "clicks together that's a story in and of itself and it's really nice and so we should just have static members and",
    "start": "2906140",
    "end": "2913220"
  },
  {
    "text": "interface in fact several years ago we did an experiment of how to implement that in the runtime and that turned out",
    "start": "2913220",
    "end": "2918920"
  },
  {
    "text": "exceedingly well except back then we weren't eager to put new language",
    "start": "2918920",
    "end": "2924050"
  },
  {
    "text": "features in the run time because the doesn't everyone time shift is part of Windows and updating it was a nightmare",
    "start": "2924050",
    "end": "2931280"
  },
  {
    "text": "that we didn't want to embark on but now we've done that core we can so let's go an embrace that however there are also",
    "start": "2931280",
    "end": "2937970"
  },
  {
    "text": "some problems with this scenario and I'm going to exaggerate them a bit just to sufficiently motivate the other features",
    "start": "2937970",
    "end": "2945320"
  },
  {
    "text": "but let's have a look at it one problem is that you can imagine many many different sets of operators being being",
    "start": "2945320",
    "end": "2956330"
  },
  {
    "text": "embodied in interfaces and putting all of them on hint would be like groups and",
    "start": "2956330",
    "end": "2963320"
  },
  {
    "text": "rings and all kinds of mathematical objects plus more than you could come up with yourself and we would have to put",
    "start": "2963320",
    "end": "2970460"
  },
  {
    "text": "all those in in and it will sort of have too many interfaces for it to be reasonable and be hard to predict which",
    "start": "2970460",
    "end": "2976580"
  },
  {
    "text": "one we should put on there another problem is that there's more than one",
    "start": "2976580",
    "end": "2982340"
  },
  {
    "text": "way that it could actually implement this interface like the natural the obvious one is with with 0 and with the",
    "start": "2982340",
    "end": "2990170"
  },
  {
    "text": "inter plus operator but ink but integers are actually a mono over multiplication",
    "start": "2990170",
    "end": "2995210"
  },
  {
    "text": "as well with a neutral element being one and the and the operator being",
    "start": "2995210",
    "end": "3001690"
  },
  {
    "text": "multiplication and so we could equally well not equally well because that's",
    "start": "3001690",
    "end": "3007180"
  },
  {
    "text": "more contrived but we could imagine perfectly valid implementation of I'm",
    "start": "3007180",
    "end": "3013000"
  },
  {
    "text": "why not I'm on edge on hints that uses that one and multiplication as as the",
    "start": "3013000",
    "end": "3021000"
  },
  {
    "text": "implementation so how do we choose in this case it's probably obvious but some",
    "start": "3021000",
    "end": "3027460"
  },
  {
    "text": "K you can imagine cases where it's not so obvious third problem is you know I",
    "start": "3027460",
    "end": "3033340"
  },
  {
    "text": "might want int to implement I'm on out of team but I might not have access to",
    "start": "3033340",
    "end": "3038980"
  },
  {
    "text": "go in and muck with a core library here I can't go and slap interfaces on it so it'll kind of have to funnel through",
    "start": "3038980",
    "end": "3045010"
  },
  {
    "text": "some like central acceptance process oh yes this is a good interface let's put",
    "start": "3045010",
    "end": "3050800"
  },
  {
    "text": "it in the core library and haven't implemented em it's kind of like I'm I don't get to muck with that as as a",
    "start": "3050800",
    "end": "3058510"
  },
  {
    "text": "numeric programmer who wants to use once to abstract do something abstractly over",
    "start": "3058510",
    "end": "3064680"
  },
  {
    "text": "certain and numeric types so that's more like a software engineering challenge as",
    "start": "3064680",
    "end": "3071140"
  },
  {
    "text": "well so let's try to solve that and the idea is to have something called a roll",
    "start": "3071140",
    "end": "3076600"
  },
  {
    "start": "3074000",
    "end": "3173000"
  },
  {
    "text": "and I'm not going to quibble about syntax this is definitely a strawman syntax is if we ever do it it",
    "start": "3076600",
    "end": "3083109"
  },
  {
    "text": "will not look like this what a roll is a new kind of type",
    "start": "3083109",
    "end": "3089010"
  },
  {
    "text": "declaration it declares a new kind of thing which can enhance other types with",
    "start": "3089010",
    "end": "3096150"
  },
  {
    "text": "additional behavior so I'm going to declare a roll that enhances int with",
    "start": "3096150",
    "end": "3103950"
  },
  {
    "text": "the neutral element 0 thus that's static property ok",
    "start": "3103950",
    "end": "3110040"
  },
  {
    "text": "and now that means that I can sew this in to add mono which has a 0 but the",
    "start": "3110040",
    "end": "3120420"
  },
  {
    "text": "role is something that is it's a type that I can apply to ends so and it's not",
    "start": "3120420",
    "end": "3126810"
  },
  {
    "text": "representation changing so I can actually take in a whole array of int and I can just cast it to this into",
    "start": "3126810",
    "end": "3134460"
  },
  {
    "text": "admin oi type because it's a role on end and that doesn't you know create a new",
    "start": "3134460",
    "end": "3140010"
  },
  {
    "text": "array and copy things over anything it's really just a reference assignment it's just another view type view that I have",
    "start": "3140010",
    "end": "3147000"
  },
  {
    "text": "on the same values that's what a role means and but because I'm doing that I",
    "start": "3147000",
    "end": "3153930"
  },
  {
    "text": "can now view my int values as as into",
    "start": "3153930",
    "end": "3160350"
  },
  {
    "text": "admin rights if it added any instance members I could loop over the this array here and I could do things to my values",
    "start": "3160350",
    "end": "3167700"
  },
  {
    "text": "that in admin I added to them that weren't inherit can't but roles could",
    "start": "3167700",
    "end": "3174120"
  },
  {
    "text": "even implement interfaces so it could implement the I'm annoyed interface for int and say that when you view int as",
    "start": "3174120",
    "end": "3182730"
  },
  {
    "text": "this role then they implement this interface now and again just just like",
    "start": "3182730",
    "end": "3191280"
  },
  {
    "text": "the implementation of the interface before it works the same way checks to see ok doesn't have all the operations",
    "start": "3191280",
    "end": "3196350"
  },
  {
    "text": "well it has the plus but we need to specify the 0 as well and now it does have all the operations to apply in the",
    "start": "3196350",
    "end": "3201390"
  },
  {
    "text": "interface so when viewed as an int add Mahanoy and int is a monoid and this is how the",
    "start": "3201390",
    "end": "3208920"
  },
  {
    "text": "role specifies that that's the case and how it's the case by giving the implementations here and now the",
    "start": "3208920",
    "end": "3216120"
  },
  {
    "text": "interesting thing is that because of that once I view my end array as an array of int",
    "start": "3216120",
    "end": "3222750"
  },
  {
    "text": "ad monoids I can pass that to a doll and the role becomes the type argument and",
    "start": "3222750",
    "end": "3229080"
  },
  {
    "text": "the type argument is therefore something that satisfies the constraint that has a",
    "start": "3229080",
    "end": "3235170"
  },
  {
    "text": "plus and a zero and the generic method a run so essentially what I've built is an",
    "start": "3235170",
    "end": "3242040"
  },
  {
    "text": "adapter for intz for them to fit into my generic abstraction an adapter that does",
    "start": "3242040",
    "end": "3249480"
  },
  {
    "text": "that does not adapt them at runtime by changing their representation but just",
    "start": "3249480",
    "end": "3254640"
  },
  {
    "text": "adapts into the type system if you will so so that's what roles can do they can",
    "start": "3254640",
    "end": "3261480"
  },
  {
    "text": "adapt individual values or like arrays of values here so that they fit certain",
    "start": "3261480",
    "end": "3267330"
  },
  {
    "text": "shapes or certain types now one of the",
    "start": "3267330",
    "end": "3277070"
  },
  {
    "text": "things that you can do with that because I'm choosing which role to apply here is",
    "start": "3277070",
    "end": "3282810"
  },
  {
    "text": "that I could implement that other that could you implement that other",
    "start": "3282810",
    "end": "3287850"
  },
  {
    "text": "implementation of mono it's unint using a different role so I have an in-mold Mahanoy here maybe there should",
    "start": "3287850",
    "end": "3295530"
  },
  {
    "text": "be better naming conventions for these and and that also implements I'm on a",
    "start": "3295530",
    "end": "3300810"
  },
  {
    "text": "light event but in a different way gives that those the multiplication based implementation and now both can coexist",
    "start": "3300810",
    "end": "3308340"
  },
  {
    "text": "and be part of my toolbox so to speak and then when I choose to pass my int",
    "start": "3308340",
    "end": "3315720"
  },
  {
    "text": "array to at all I can i specify with the with the type parameter or the type",
    "start": "3315720",
    "end": "3322950"
  },
  {
    "text": "argument which which role I want to apply like how my hints are gonna play",
    "start": "3322950",
    "end": "3330240"
  },
  {
    "text": "the role of I'm on our gets to be specified there so I can I can do one",
    "start": "3330240",
    "end": "3336030"
  },
  {
    "text": "with in malmo noid instead here call the same method with the same array has a different role and get a different",
    "start": "3336030",
    "end": "3343619"
  },
  {
    "text": "result now sometimes that's what you want",
    "start": "3343619",
    "end": "3349140"
  },
  {
    "start": "3347000",
    "end": "3476000"
  },
  {
    "text": "sometimes you want to be able to view individual values through a certain lens",
    "start": "3349140",
    "end": "3354660"
  },
  {
    "text": "and sometimes what you want is just to extend in a certain part of your program you want to extend a given type with",
    "start": "3354660",
    "end": "3361200"
  },
  {
    "text": "extra capabilities and that's what we've had extension methods for for many years",
    "start": "3361200",
    "end": "3367170"
  },
  {
    "text": "now the problem with extension methods is that they're sort of like an evolutionary dead end in that based on",
    "start": "3367170",
    "end": "3373440"
  },
  {
    "text": "how they've done you can't really have extension properties and extension much",
    "start": "3373440",
    "end": "3378600"
  },
  {
    "text": "else and so this is sort of an attempt to back off that particular design but",
    "start": "3378600",
    "end": "3386100"
  },
  {
    "text": "use the general concept and introduce a more a more generalized version of the",
    "start": "3386100",
    "end": "3391740"
  },
  {
    "text": "feature that we call extensions and what an extension is is it's like a role it",
    "start": "3391740",
    "end": "3398180"
  },
  {
    "text": "specifies an enhancement of a given type but it but it causes that enhancement to",
    "start": "3398180",
    "end": "3405360"
  },
  {
    "text": "apply to all values of that type implicitly just like an extension as it applies to all values of the type that",
    "start": "3405360",
    "end": "3411210"
  },
  {
    "text": "it enhances so it's just a generalization of the extension method concept so now all ends are employed in",
    "start": "3411210",
    "end": "3418050"
  },
  {
    "text": "the scope of this declaration wherever this declaration has been put into effect like has been using or whatever",
    "start": "3418050",
    "end": "3423930"
  },
  {
    "text": "and so now I can get the zero off of in my knife but I can also get it off of int because all intz on out in tonight's",
    "start": "3423930",
    "end": "3431880"
  },
  {
    "text": "endeavor have the zero static property and again because this is just",
    "start": "3431880",
    "end": "3438990"
  },
  {
    "text": "essentially a role defined for all ends I can implement interfaces with it and",
    "start": "3438990",
    "end": "3444060"
  },
  {
    "text": "now all int as long as this declaration",
    "start": "3444060",
    "end": "3449760"
  },
  {
    "text": "is enforced so to speak all intz are now mono it's and can be passed to a doll",
    "start": "3449760",
    "end": "3455730"
  },
  {
    "text": "here so this would allow essentially the full generalization of extension methods",
    "start": "3455730",
    "end": "3461040"
  },
  {
    "text": "not just to extension all other kinds of members but also to extension interfaces",
    "start": "3461040",
    "end": "3467550"
  },
  {
    "text": "to extend with implementation of extra interfaces and and that's it so we have",
    "start": "3467550",
    "end": "3476970"
  },
  {
    "start": "3476000",
    "end": "3600000"
  },
  {
    "text": "time for a few more questions and I see that there are a few let's see",
    "start": "3476970",
    "end": "3486619"
  },
  {
    "text": "which use cases do you use for static interfaces where do you see it being used I think that numeric abstraction is",
    "start": "3488089",
    "end": "3496799"
  },
  {
    "text": "one another thing is if you want to abstract over construction how the how",
    "start": "3496799",
    "end": "3502769"
  },
  {
    "text": "this kind of object can be constructed a constructor is essentially a static",
    "start": "3502769",
    "end": "3508920"
  },
  {
    "text": "member so you could the interface could specify that certain constructors are",
    "start": "3508920",
    "end": "3514079"
  },
  {
    "text": "present or factory methods it's things like that that would be another big scenario for it let's see there was a",
    "start": "3514079",
    "end": "3526249"
  },
  {
    "text": "question for the previous topic I imagine for some classes I would want to",
    "start": "3526670",
    "end": "3532499"
  },
  {
    "text": "have both mutable and immutable instances why not have them specified at create instead eg new person as record",
    "start": "3532499",
    "end": "3541339"
  },
  {
    "text": "that's an interesting idea that's sort of the idea that a given class can specify both sometimes you you do that",
    "start": "3541339",
    "end": "3549210"
  },
  {
    "text": "you have that pattern where you can you take things for a while and then you freeze them and the only way you can",
    "start": "3549210",
    "end": "3554430"
  },
  {
    "text": "implement that today is to have a bit inside of an object saying I'm freezed and then start throwing on all the",
    "start": "3554430",
    "end": "3561269"
  },
  {
    "text": "mutation stuff and maybe you could build that kind of thing into the type system as well we haven't thought of that but",
    "start": "3561269",
    "end": "3569329"
  },
  {
    "text": "that might be an avenue you're thinking I haven't thought of it much but yeah good idea",
    "start": "3569329",
    "end": "3576470"
  },
  {
    "text": "any more questions also on the are you just completely you know you just want to get beer and",
    "start": "3576690",
    "end": "3583470"
  },
  {
    "text": "whatever time zone you're in see think",
    "start": "3583470",
    "end": "3591480"
  },
  {
    "text": "we have seconds left of the talk I don't see",
    "start": "3591480",
    "end": "3601290"
  },
  {
    "text": "more things coming in even with the lag we should conclude that you guys are you guys are ready to the end of the day so",
    "start": "3601290",
    "end": "3608460"
  },
  {
    "text": "I want to say thank you very much for listening to my crazy ramblings and you",
    "start": "3608460",
    "end": "3614370"
  },
  {
    "text": "know keep using c-sharp and keep getting us the good ideas and the bad ones and everything in between so we can keep",
    "start": "3614370",
    "end": "3621450"
  },
  {
    "text": "evolving it as a great language thank you very much",
    "start": "3621450",
    "end": "3626180"
  }
]