[
  {
    "start": "0",
    "end": "42000"
  },
  {
    "text": "thanks for coming to my talk and today",
    "start": "560",
    "end": "5990"
  },
  {
    "text": "we're going to take a look at meta programming in JavaScript and",
    "start": "5990",
    "end": "11059"
  },
  {
    "text": "specifically the featured called proxies",
    "start": "11059",
    "end": "16670"
  },
  {
    "text": "so I'm Eric and I'm an independent consultant and I do a lot of JavaScript",
    "start": "16670",
    "end": "24630"
  },
  {
    "text": "training and mostly I'm addicted to JavaScript so that's pretty much what I",
    "start": "24630",
    "end": "31050"
  },
  {
    "text": "do and I'm also very fascinated by meta",
    "start": "31050",
    "end": "36750"
  },
  {
    "text": "programming and when I hear the word meta programming I think of these guys",
    "start": "36750",
    "end": "42350"
  },
  {
    "start": "42000",
    "end": "42000"
  },
  {
    "text": "like wizards doing magic at least that's what it feels like when you try out meta",
    "start": "42350",
    "end": "48539"
  },
  {
    "text": "programming the first time and this also seems to be embodied in one of my",
    "start": "48539",
    "end": "56640"
  },
  {
    "text": "favorite books which is this book structure and interpretation of computer programs which uses a language called",
    "start": "56640",
    "end": "66150"
  },
  {
    "text": "Lisp which is a language that is very suited for meta programming and you can",
    "start": "66150",
    "end": "74729"
  },
  {
    "text": "also see this in there you can see that they're using this wizard here as well",
    "start": "74729",
    "end": "81380"
  },
  {
    "text": "they have this thing called the meta circular evaluator and there's this",
    "start": "81380",
    "end": "88200"
  },
  {
    "text": "wizard doing things to it and JavaScript",
    "start": "88200",
    "end": "94799"
  },
  {
    "text": "is actually in many ways very similar to Lisp it has a lot of the good parts from",
    "start": "94799",
    "end": "101130"
  },
  {
    "text": "lift except it's not homo iconic which is",
    "start": "101130",
    "end": "107490"
  },
  {
    "text": "this very mystical term which I won't be mentioning any more because it's not",
    "start": "107490",
    "end": "113549"
  },
  {
    "text": "relevant so meta programming I did a",
    "start": "113549",
    "end": "120710"
  },
  {
    "text": "Wikipedia lookup and they have defined meta programming to be the ability to",
    "start": "120710",
    "end": "126270"
  },
  {
    "text": "treat programs as data and the ability to read generate",
    "start": "126270",
    "end": "133130"
  },
  {
    "text": "lies or transform other programs and even modifying itself while running so",
    "start": "133130",
    "end": "141620"
  },
  {
    "text": "what are they really referring to when they're saying all this these things so",
    "start": "141620",
    "end": "147590"
  },
  {
    "text": "one of the staples of metaprogramming is macros and what macros does is that it",
    "start": "147590",
    "end": "154940"
  },
  {
    "text": "enables you to create your own language constructs and your own syntax so here's",
    "start": "154940",
    "end": "163340"
  },
  {
    "start": "156000",
    "end": "156000"
  },
  {
    "text": "an example of a meta programming library for JavaScript called sweet Jas where I",
    "start": "163340",
    "end": "171470"
  },
  {
    "text": "define some syntax and if I use that syntax it will be expanded to whatever",
    "start": "171470",
    "end": "181460"
  },
  {
    "text": "that syntax compiles to so this is an example of doing macros in JavaScript so",
    "start": "181460",
    "end": "189070"
  },
  {
    "text": "here I've created some of my own syntax but you can also use this to create your",
    "start": "189070",
    "end": "197210"
  },
  {
    "start": "195000",
    "end": "195000"
  },
  {
    "text": "own operators so let's say that you wanted to have a different way of",
    "start": "197210",
    "end": "203710"
  },
  {
    "text": "handling promises of a chaining promises so I'm creating some sort of operator",
    "start": "203710",
    "end": "212090"
  },
  {
    "text": "here so that I can write code that looks like this because I think that this is a",
    "start": "212090",
    "end": "218510"
  },
  {
    "text": "better way of expressing chain promises so this is just an example I don't",
    "start": "218510",
    "end": "225230"
  },
  {
    "text": "actually use this but you could use this to create a better developer experience",
    "start": "225230",
    "end": "233000"
  },
  {
    "text": "for yourself so all of this macro stuff happens during compile time meaning that",
    "start": "233000",
    "end": "240950"
  },
  {
    "text": "all this happens before any of your code runs and a lot of languages also have",
    "start": "240950",
    "end": "248959"
  },
  {
    "text": "this separate step for macros called macro expansion time but the important",
    "start": "248959",
    "end": "255200"
  },
  {
    "text": "thing is that all this happens before the code ever runs so the other part of",
    "start": "255200",
    "end": "260630"
  },
  {
    "text": "meta programming another branch is called reflex",
    "start": "260630",
    "end": "265790"
  },
  {
    "text": "and reflection has some sub-branches one",
    "start": "265790",
    "end": "271370"
  },
  {
    "text": "of them is introspection meaning that code is able to inspect itself self",
    "start": "271370",
    "end": "278840"
  },
  {
    "text": "modification which is pretty self-explanatory meaning that there's code that can change itself and then",
    "start": "278840",
    "end": "287540"
  },
  {
    "text": "there's this thing called intercession intercession the definition of the word",
    "start": "287540",
    "end": "292910"
  },
  {
    "text": "is acting on the behalf of someone else or intervening with someone else so",
    "start": "292910",
    "end": "299740"
  },
  {
    "text": "intercession that means that it's code that can make decision decisions based",
    "start": "299740",
    "end": "306980"
  },
  {
    "text": "on itself so an example of introspection in JavaScript and it could be that we",
    "start": "306980",
    "end": "316190"
  },
  {
    "start": "310000",
    "end": "310000"
  },
  {
    "text": "have an object here which have some properties which again have values and",
    "start": "316190",
    "end": "321620"
  },
  {
    "text": "then I use this method here called object keys to see what kind of keys",
    "start": "321620",
    "end": "327740"
  },
  {
    "text": "exist on this object so I've just inspected the code has inspected itself while it's running such as a simple",
    "start": "327740",
    "end": "336380"
  },
  {
    "text": "example of introspection and then you have self modification so we can imagine",
    "start": "336380",
    "end": "341720"
  },
  {
    "start": "339000",
    "end": "339000"
  },
  {
    "text": "that we have just a simple function here that is a sum function but it's a bit",
    "start": "341720",
    "end": "348530"
  },
  {
    "text": "grumpy because it usually returns the sum of the arguments but if you ever",
    "start": "348530",
    "end": "354680"
  },
  {
    "text": "pass in a first argument that is larger than five it rewrites itself to only",
    "start": "354680",
    "end": "362510"
  },
  {
    "text": "ever return zero so if I run this with one plus one it returns two if I return",
    "start": "362510",
    "end": "370040"
  },
  {
    "text": "if I do it with ten plus one it returns eleven but all of the preceding times I",
    "start": "370040",
    "end": "376490"
  },
  {
    "text": "I call this then it's just going to return zero so it changes itself during",
    "start": "376490",
    "end": "381710"
  },
  {
    "text": "the runtime and then you could do very simple intercession in JavaScript as",
    "start": "381710",
    "end": "389360"
  },
  {
    "start": "385000",
    "end": "385000"
  },
  {
    "text": "well so if you have an object which has a property we could use this feature",
    "start": "389360",
    "end": "395150"
  },
  {
    "text": "called object defined property to say that we want to define new property on this object and we want",
    "start": "395150",
    "end": "402780"
  },
  {
    "text": "to define a getter for that property where we say that if the health property",
    "start": "402780",
    "end": "409890"
  },
  {
    "text": "here is bigger than zero it's going to return a string fit like a champ otherwise it's going to return hurt",
    "start": "409890",
    "end": "416520"
  },
  {
    "text": "badly based on the health of this hero so if I try to access hero dot status",
    "start": "416520",
    "end": "424200"
  },
  {
    "text": "here that would be a string hit like a champ but this sort of an assertion in",
    "start": "424200",
    "end": "430410"
  },
  {
    "text": "JavaScript is very limited not very flexible because you have to be very",
    "start": "430410",
    "end": "435840"
  },
  {
    "text": "explicit about which fields should have these special properties but the",
    "start": "435840",
    "end": "444510"
  },
  {
    "text": "important thing about all of all of this is that it all happens during runtime so",
    "start": "444510",
    "end": "449730"
  },
  {
    "text": "this happens while your code is running so now let me know what's the most",
    "start": "449730",
    "end": "457920"
  },
  {
    "text": "important parts of meta programming is we can ask ourselves why is this useful",
    "start": "457920",
    "end": "462990"
  },
  {
    "text": "why what do we do this so I I had a hard",
    "start": "462990",
    "end": "469380"
  },
  {
    "text": "time coming up with a concise answer to that but I did a little Wikipedia and",
    "start": "469380",
    "end": "475350"
  },
  {
    "text": "Google again and it said that in some cases this allows programmers to",
    "start": "475350",
    "end": "480900"
  },
  {
    "text": "minimize the number of lines of code to express a solution and thus reducing the development time which seems pretty nice",
    "start": "480900",
    "end": "488480"
  },
  {
    "text": "but I think that the main thing that meta programming enables is that you",
    "start": "488480",
    "end": "494460"
  },
  {
    "text": "want to have the ability to express and model your problems in a way that makes",
    "start": "494460",
    "end": "501150"
  },
  {
    "text": "sense and which is as expressive as possible",
    "start": "501150",
    "end": "506670"
  },
  {
    "text": "because what we want is really developer friendly interfaces so that you could",
    "start": "506670",
    "end": "514530"
  },
  {
    "text": "use meta programming to create all these interfaces that you would like to have",
    "start": "514530",
    "end": "522140"
  },
  {
    "text": "and you could build these higher-order abstractions from it so so a general",
    "start": "522560",
    "end": "528270"
  },
  {
    "text": "higher-order abstraction or interface that we're used to from the web is proxies in the form of proxy servers",
    "start": "528270",
    "end": "537950"
  },
  {
    "text": "that are placed in front of a set of web servers so a proxy server might be",
    "start": "537950",
    "end": "546890"
  },
  {
    "start": "542000",
    "end": "542000"
  },
  {
    "text": "placed in front of one or more servers and it's there to abstract away some",
    "start": "546890",
    "end": "552860"
  },
  {
    "text": "sort of complexity it might be rules for authentication it might be some sort of",
    "start": "552860",
    "end": "559790"
  },
  {
    "text": "logic for redirecting and so on but the",
    "start": "559790",
    "end": "565490"
  },
  {
    "text": "main thing is that the consumer can't see a difference between the proxy and",
    "start": "565490",
    "end": "570620"
  },
  {
    "text": "an actual server it's supposed to be transparent to the consumer just to",
    "start": "570620",
    "end": "576410"
  },
  {
    "text": "provide a single interface to the consumer so the proxy has the same kind",
    "start": "576410",
    "end": "583190"
  },
  {
    "text": "of methods that a server has and different use cases for this might also",
    "start": "583190",
    "end": "589850"
  },
  {
    "text": "be like load balancing compression caching and so on everything that you want to abstract away from the client so",
    "start": "589850",
    "end": "600110"
  },
  {
    "text": "this is a very specific use of proxies in web servers but there's no reason why",
    "start": "600110",
    "end": "606740"
  },
  {
    "text": "we can't generalize this and say that we",
    "start": "606740",
    "end": "612290"
  },
  {
    "start": "611000",
    "end": "611000"
  },
  {
    "text": "could have a proxy that we put in front of one or more just more general objects",
    "start": "612290",
    "end": "620200"
  },
  {
    "text": "so an object has different properties that you can read you can get something",
    "start": "620200",
    "end": "626330"
  },
  {
    "text": "you can set something it might have message that you can apply and so on so",
    "start": "626330",
    "end": "633080"
  },
  {
    "text": "again this is all about providing a better interface to program against and",
    "start": "633080",
    "end": "639470"
  },
  {
    "text": "to interact with so in in JavaScript the",
    "start": "639470",
    "end": "646580"
  },
  {
    "text": "specification for this new type called",
    "start": "646580",
    "end": "652640"
  },
  {
    "text": "proxy has existed for for a long time as a specification that is and it's a part",
    "start": "652640",
    "end": "661040"
  },
  {
    "text": "of the ACMA script 6 specification it's its own type and",
    "start": "661040",
    "end": "666380"
  },
  {
    "text": "this is the feature that enables you to do this advanced type of intersection in",
    "start": "666380",
    "end": "673100"
  },
  {
    "text": "JavaScript because what it enables you",
    "start": "673100",
    "end": "678110"
  },
  {
    "text": "to do is that you could define custom behavior for these fundamental operators",
    "start": "678110",
    "end": "683900"
  },
  {
    "text": "fundamental operations like property lookup assignment enumerated and",
    "start": "683900",
    "end": "690560"
  },
  {
    "text": "function invocation and so on so all of these fundamental things that you can do in the JavaScript language and because",
    "start": "690560",
    "end": "697670"
  },
  {
    "text": "of this there is no viable way to",
    "start": "697670",
    "end": "704560"
  },
  {
    "text": "transpile this so that you most of FMO",
    "start": "704560",
    "end": "709880"
  },
  {
    "text": "script 6 is just syntax sugar you could just use babel to transpile it but you",
    "start": "709880",
    "end": "716330"
  },
  {
    "text": "can actually do that with proxies because it changes the fundamentals of",
    "start": "716330",
    "end": "722930"
  },
  {
    "text": "the language but fortunately now the support has become really good so you",
    "start": "722930",
    "end": "729200"
  },
  {
    "text": "can actually use this so fairly recently the support has gotten really good so",
    "start": "729200",
    "end": "738320"
  },
  {
    "text": "let's have a closer look at this proxy thing so the proxy is has its own",
    "start": "738320",
    "end": "745160"
  },
  {
    "text": "constructor and the constructor takes a target object and a handler object and",
    "start": "745160",
    "end": "751810"
  },
  {
    "text": "this target object could be any type of object it could be just a regular object",
    "start": "751810",
    "end": "758060"
  },
  {
    "text": "it could be an array it could be a function it could even be another proxy",
    "start": "758060",
    "end": "765410"
  },
  {
    "text": "so that this could be recursive but the important thing is that anything that is",
    "start": "765410",
    "end": "771200"
  },
  {
    "text": "an object could be the target of a proxy so the nice thing about JavaScript is",
    "start": "771200",
    "end": "776210"
  },
  {
    "text": "that arrays and functions are just objects underneath another thing about",
    "start": "776210",
    "end": "784370"
  },
  {
    "text": "the proxy is that it's completely transparent meaning that if you take a",
    "start": "784370",
    "end": "791540"
  },
  {
    "text": "type of of the proxy it'll always return the type of the target that you pass through the proxy to create it so",
    "start": "791540",
    "end": "797990"
  },
  {
    "text": "there's no way for the consumer to know that you are using that you've been",
    "start": "797990",
    "end": "803149"
  },
  {
    "text": "given a proxy and then there is the",
    "start": "803149",
    "end": "813350"
  },
  {
    "start": "811000",
    "end": "811000"
  },
  {
    "text": "handler object which is the second argument to the proxy constructor and",
    "start": "813350",
    "end": "819399"
  },
  {
    "text": "this handler is an object that contains these so-called traps traps for",
    "start": "819399",
    "end": "827720"
  },
  {
    "text": "operations on the object so any type of operation that you could do to the object it's something that you can trap",
    "start": "827720",
    "end": "834709"
  },
  {
    "text": "in this handler so an example here is with a get trapped where I'm saying that",
    "start": "834709",
    "end": "841339"
  },
  {
    "text": "if you try to get something from this object you should check if this property",
    "start": "841339",
    "end": "848510"
  },
  {
    "text": "that you're trying to get exists on the target object if it does you'll just",
    "start": "848510",
    "end": "853580"
  },
  {
    "text": "return that otherwise you'll return 37 so if I make a new instance of this",
    "start": "853580",
    "end": "861320"
  },
  {
    "text": "proxy with just an empty object that's a target and I set the property a to 1 and",
    "start": "861320",
    "end": "868940"
  },
  {
    "text": "then the property B to undefined if I log log out the result of getting a and",
    "start": "868940",
    "end": "874850"
  },
  {
    "text": "B I'll get 1 and undefined but if I log out the result of checking if the object",
    "start": "874850",
    "end": "884480"
  },
  {
    "text": "has the key C it'll give me false but if I try to log out the C property it will",
    "start": "884480",
    "end": "891890"
  },
  {
    "text": "log out 37 because it doesn't really have it doesn't have the C property but",
    "start": "891890",
    "end": "899360"
  },
  {
    "text": "we defaulted to 37 so that's just a simple example of trapping operations to",
    "start": "899360",
    "end": "907700"
  },
  {
    "text": "an object and there is as I said a trap",
    "start": "907700",
    "end": "913100"
  },
  {
    "start": "911000",
    "end": "911000"
  },
  {
    "text": "for any type of operation that you can do to an object so you can trap the get operation to set the has operation which",
    "start": "913100",
    "end": "921800"
  },
  {
    "text": "is the operation that is triggered when you use the in operator and you have",
    "start": "921800",
    "end": "930470"
  },
  {
    "text": "construct so if you try to construct a new instance of this object you can trap that by using the",
    "start": "930470",
    "end": "936559"
  },
  {
    "text": "construct trap and so on and so on so any type of operation that you can do to",
    "start": "936559",
    "end": "941839"
  },
  {
    "text": "an object can be trapped and there's also this new API included together with",
    "start": "941839",
    "end": "949129"
  },
  {
    "text": "the proxy which is called the reflect API and the reflective API is an API",
    "start": "949129",
    "end": "955160"
  },
  {
    "text": "that has a method for any type of operation that you can do to an object",
    "start": "955160",
    "end": "960199"
  },
  {
    "text": "so if I have an object here I can use reflect that get to pull out the health",
    "start": "960199",
    "end": "966889"
  },
  {
    "text": "property of the hero so you could of course in it but why you need that",
    "start": "966889",
    "end": "972410"
  },
  {
    "text": "because you could just access it directly but the point of this reflect",
    "start": "972410",
    "end": "978019"
  },
  {
    "text": "API is that there is a one-to-one match to the proxy traps so that if I wanted",
    "start": "978019",
    "end": "984949"
  },
  {
    "text": "to define a proxy that is just defining the default behavior of an object I",
    "start": "984949",
    "end": "990559"
  },
  {
    "text": "could put in the corresponding reflect methods into all of the different traps",
    "start": "990559",
    "end": "998290"
  },
  {
    "text": "and there's also a special type of proxy which is called a revocable proxy so if",
    "start": "1002129",
    "end": "1010329"
  },
  {
    "start": "1003000",
    "end": "1003000"
  },
  {
    "text": "I create an object here and they want to proxy that with a revocable proxy I could use the proxy adopt revocable",
    "start": "1010329",
    "end": "1018249"
  },
  {
    "text": "method and then it takes the same arguments as the proxy constructor but",
    "start": "1018249",
    "end": "1024100"
  },
  {
    "text": "instead of just returning a proxy it returns the proxy and a method that you",
    "start": "1024100",
    "end": "1030339"
  },
  {
    "text": "could revoke this proxy with so if I try to access proxy dot name here it'll give",
    "start": "1030339",
    "end": "1037240"
  },
  {
    "text": "me the name but if I revoke this proxy it will throw an error the next time I",
    "start": "1037240",
    "end": "1047048"
  },
  {
    "text": "try to access something on this proxy because you're not allowed to do that anymore",
    "start": "1047049",
    "end": "1052740"
  },
  {
    "text": "which pretty much then makes the proxy useless so a lot of this meta",
    "start": "1053549",
    "end": "1063789"
  },
  {
    "text": "programming types that you could do with proxies is available as we saw with object defined property",
    "start": "1063789",
    "end": "1070480"
  },
  {
    "text": "and object keys and so on but the main thing about proxies is that you can now overload operators that are fundamental",
    "start": "1070480",
    "end": "1077860"
  },
  {
    "text": "to the language you can overload how the dot works how the equals works and how function invocation works so now that we",
    "start": "1077860",
    "end": "1089260"
  },
  {
    "text": "have introduced the important stuff about proxies and the reflect API we",
    "start": "1089260",
    "end": "1094660"
  },
  {
    "text": "could look at some simple examples of how you would use this proxy for",
    "start": "1094660",
    "end": "1100720"
  },
  {
    "start": "1100000",
    "end": "1100000"
  },
  {
    "text": "something useful so one popular example",
    "start": "1100720",
    "end": "1105760"
  },
  {
    "text": "to look at is validation so we could make ourselves a function that takes an",
    "start": "1105760",
    "end": "1112870"
  },
  {
    "text": "object and then takes a set of validations that you're supposed to do on that object we could return a new",
    "start": "1112870",
    "end": "1121720"
  },
  {
    "text": "proxy of that object that we passed we can say that we want to add a set trap",
    "start": "1121720",
    "end": "1128980"
  },
  {
    "text": "so whenever you try to set something on this object it's going to be trapped by",
    "start": "1128980",
    "end": "1135549"
  },
  {
    "text": "this proxy trap and we'll assume that this validations object here is just an",
    "start": "1135549",
    "end": "1141730"
  },
  {
    "text": "object that contains a function for validating whatever key it belongs to",
    "start": "1141730",
    "end": "1149230"
  },
  {
    "text": "and it'll either throw an error or just return true if nothing if nothing is",
    "start": "1149230",
    "end": "1157210"
  },
  {
    "text": "wrong so we'll just validate the value that you're trying to add to a set and",
    "start": "1157210",
    "end": "1162240"
  },
  {
    "text": "then we'll use reflect set to set the actual value and then we'll just return true because that is the default",
    "start": "1162240",
    "end": "1170080"
  },
  {
    "text": "behavior of using the equals operator in JavaScript so then we could make some",
    "start": "1170080",
    "end": "1178000"
  },
  {
    "text": "validations here we could say that we want to validate the age property and we want to validate the name property and",
    "start": "1178000",
    "end": "1186390"
  },
  {
    "text": "for the age we'll just check if there's a number otherwise we'll just throw an",
    "start": "1186390",
    "end": "1191500"
  },
  {
    "text": "error and for a name we'll just assume that this is supposed to be a string otherwise we'll throw an error",
    "start": "1191500",
    "end": "1199200"
  },
  {
    "text": "so with this we can now have dynamic validation of objects so if I create a",
    "start": "1199200",
    "end": "1206610"
  },
  {
    "text": "new object here that is a result of wrapping it in the validate function",
    "start": "1206610",
    "end": "1213590"
  },
  {
    "text": "with those validations that we made I can set the name and age here to a",
    "start": "1213590",
    "end": "1219240"
  },
  {
    "text": "string and a number and nothing happens but as soon as I try to set the name to a number here it'll just throw telling",
    "start": "1219240",
    "end": "1226620"
  },
  {
    "text": "you that this is not allowed because it has to be a string so this is something",
    "start": "1226620",
    "end": "1232170"
  },
  {
    "text": "that would have been really hard to do",
    "start": "1232170",
    "end": "1237950"
  },
  {
    "text": "without proxies dynamically like this",
    "start": "1238670",
    "end": "1244880"
  },
  {
    "text": "and then another popular example is debugging and logging so we could make",
    "start": "1244970",
    "end": "1252480"
  },
  {
    "start": "1245000",
    "end": "1245000"
  },
  {
    "text": "ourselves a function where we log every access to the object so every time you",
    "start": "1252480",
    "end": "1259830"
  },
  {
    "text": "try to get some field of an object we could log that so we can create a new proxy and then we could have a getter",
    "start": "1259830",
    "end": "1266910"
  },
  {
    "text": "trap and whenever you try to get something from that proxy we could log",
    "start": "1266910",
    "end": "1273090"
  },
  {
    "text": "out that you've tried to access a certain key and then we could pass a second argument here if you wanted to",
    "start": "1273090",
    "end": "1280350"
  },
  {
    "text": "have some kind of string reference so that you can know which object that you were which was was accessed then we",
    "start": "1280350",
    "end": "1288960"
  },
  {
    "text": "could just return the result of using reflect get to get the actual key on the",
    "start": "1288960",
    "end": "1294030"
  },
  {
    "text": "target object if you wanted to use this you can make a self tanner and then we",
    "start": "1294030",
    "end": "1301260"
  },
  {
    "text": "could make a proxy where we pass that object into that function give it some",
    "start": "1301260",
    "end": "1307020"
  },
  {
    "text": "kind of reference and if I try to access H now it'll just log out access H on ABC",
    "start": "1307020",
    "end": "1313020"
  },
  {
    "text": "or if I try to access a name it'll do the same thing so the nice thing about",
    "start": "1313020",
    "end": "1319530"
  },
  {
    "text": "this is that you're able to wrap objects wrap functionality around objects",
    "start": "1319530",
    "end": "1325740"
  },
  {
    "text": "without the objects knowing about this and until recently we actually used to",
    "start": "1325740",
    "end": "1336260"
  },
  {
    "start": "1331000",
    "end": "1331000"
  },
  {
    "text": "have a specification for observables in JavaScript which we don't anymore because that was that was revoked for",
    "start": "1336260",
    "end": "1346160"
  },
  {
    "text": "various reasons but with proxies you could actually pretty easily make these",
    "start": "1346160",
    "end": "1352820"
  },
  {
    "text": "observable objects yourself so we could make a function here that makes an",
    "start": "1352820",
    "end": "1358040"
  },
  {
    "text": "object observable so it's a function that takes an object and then a function that's going to be called whenever",
    "start": "1358040",
    "end": "1364520"
  },
  {
    "text": "something changes so you can make a new proxy we could add a setter trap so that",
    "start": "1364520",
    "end": "1372950"
  },
  {
    "text": "whenever you try to set something on this object we can do something we'll just do the the regular thing of setting",
    "start": "1372950",
    "end": "1379850"
  },
  {
    "text": "whatever value you tried to set on the object and then we'll call the on change",
    "start": "1379850",
    "end": "1384980"
  },
  {
    "text": "method with the key that you set and the value you can do the same thing here",
    "start": "1384980",
    "end": "1390650"
  },
  {
    "text": "with the delete trap so if you delete some property from the object we want to",
    "start": "1390650",
    "end": "1396200"
  },
  {
    "text": "have a notification about that as well so now we could use this",
    "start": "1396200",
    "end": "1402049"
  },
  {
    "text": "we could have an object here and the main difference between this and the",
    "start": "1402049",
    "end": "1409760"
  },
  {
    "text": "original object of serve is that you'll have to override the original object",
    "start": "1409760",
    "end": "1415150"
  },
  {
    "text": "because it'll only trigger if you try to access or change something on that",
    "start": "1415150",
    "end": "1420770"
  },
  {
    "text": "observable object so if I just wrapped around observable here and change something on person without overriding",
    "start": "1420770",
    "end": "1427490"
  },
  {
    "text": "it nothing would happen so that's one of the drawbacks but now you could change something on this object and it will",
    "start": "1427490",
    "end": "1434750"
  },
  {
    "text": "trigger your own change method so that's",
    "start": "1434750",
    "end": "1441620"
  },
  {
    "text": "observable objects which could be useful in a lot of situations",
    "start": "1441620",
    "end": "1448330"
  },
  {
    "start": "1447000",
    "end": "1447000"
  },
  {
    "text": "then I found this example here by a guy named Keith who used proxies to make",
    "start": "1448760",
    "end": "1457670"
  },
  {
    "text": "this DSL which is another thing that you could use proxies for so this is a URL",
    "start": "1457670",
    "end": "1466100"
  },
  {
    "text": "builder meaning that we could use the",
    "start": "1466100",
    "end": "1472580"
  },
  {
    "text": "fundamental operations of an object to just build dynamic results so we could",
    "start": "1472580",
    "end": "1480470"
  },
  {
    "text": "have we could create an instance of this URL builder by giving it the first",
    "start": "1480470",
    "end": "1485890"
  },
  {
    "text": "argument which should be the domain and then we could just start to say that we",
    "start": "1485890",
    "end": "1491810"
  },
  {
    "text": "want to use the Google URL builder we want search products bacon and eggs and",
    "start": "1491810",
    "end": "1498440"
  },
  {
    "text": "then as soon as we call this as a function that will return an actual URL",
    "start": "1498440",
    "end": "1506679"
  },
  {
    "text": "so again these are pretty pretty simple examples and I would say that yes this",
    "start": "1507670",
    "end": "1519140"
  },
  {
    "text": "is this is nice but why is this useful I would I would probably say that yeah",
    "start": "1519140",
    "end": "1526760"
  },
  {
    "text": "cool but I'm probably not going to use any of this so I haven't really looked into proxies",
    "start": "1526760",
    "end": "1534850"
  },
  {
    "text": "for a while but I've been on a project now for about eight months where I",
    "start": "1535960",
    "end": "1543370"
  },
  {
    "text": "finally found a very real-world use case",
    "start": "1543370",
    "end": "1548570"
  },
  {
    "text": "for it and in this project we have a lot",
    "start": "1548570",
    "end": "1559640"
  },
  {
    "text": "of real time data a lot of real time data that looks might look something",
    "start": "1559640",
    "end": "1565550"
  },
  {
    "text": "like this we have a lot of collections we have let's say we have a set of stories which is just a large array of",
    "start": "1565550",
    "end": "1572210"
  },
  {
    "text": "different stories and then we have a large array of people here and if you",
    "start": "1572210",
    "end": "1578720"
  },
  {
    "text": "look at these data structures here you can see that just plain and this is plain",
    "start": "1578720",
    "end": "1585049"
  },
  {
    "text": "serializable java script but there is a lot of references here so that we have a",
    "start": "1585049",
    "end": "1591049"
  },
  {
    "text": "set of stories here where every story refers to some author every story has an",
    "start": "1591049",
    "end": "1597110"
  },
  {
    "text": "author every story has an array of people that have that have liked this",
    "start": "1597110",
    "end": "1602179"
  },
  {
    "text": "story people who have read this story and so on and they all implicitly point",
    "start": "1602179",
    "end": "1607880"
  },
  {
    "text": "to some other collection so there's a collection of people as well and those people have authored stories and they",
    "start": "1607880",
    "end": "1615049"
  },
  {
    "text": "have read stories and they have liked stories so and so this connection is in",
    "start": "1615049",
    "end": "1622809"
  },
  {
    "text": "both directions so you might say that this is a sort of graph like data and",
    "start": "1622809",
    "end": "1633190"
  },
  {
    "text": "the graph looks sort of like this it's just a very big object with a lot of",
    "start": "1633190",
    "end": "1639740"
  },
  {
    "text": "collections and all of the collections have references to other collections or the same collection so in this project",
    "start": "1639740",
    "end": "1648020"
  },
  {
    "text": "we we're pretty we're bound to this to",
    "start": "1648020",
    "end": "1654710"
  },
  {
    "text": "this data format but what we really want",
    "start": "1654710",
    "end": "1660980"
  },
  {
    "text": "to do is be able to access this graph here this JSON graph very deeply so I",
    "start": "1660980",
    "end": "1669669"
  },
  {
    "start": "1662000",
    "end": "1662000"
  },
  {
    "text": "want to be able to say that I want to go into this graph I want to pull out the first story and I want to find out who",
    "start": "1669669",
    "end": "1680510"
  },
  {
    "text": "are the people like this story and then I want to find the name of the first person that liked this story and you",
    "start": "1680510",
    "end": "1686000"
  },
  {
    "text": "might imagine that this goes deeper as well so another example is that I want",
    "start": "1686000",
    "end": "1691070"
  },
  {
    "text": "to go into the first person and I'm going to find out yeah maybe it's",
    "start": "1691070",
    "end": "1700190"
  },
  {
    "text": "supposed to say stories there as well so I want to find the author and then I want to find out the likes and then I",
    "start": "1700190",
    "end": "1708350"
  },
  {
    "text": "want to find the name of the first one so the way you could do this is first of",
    "start": "1708350",
    "end": "1716280"
  },
  {
    "text": "all you could do this very explicitly but just very naively so that you could",
    "start": "1716280",
    "end": "1721650"
  },
  {
    "text": "go into the into the graph you can pull out the first story from the story",
    "start": "1721650",
    "end": "1728309"
  },
  {
    "text": "collection and then you can find all the references to people their will which will just be strings and then I could",
    "start": "1728309",
    "end": "1735660"
  },
  {
    "text": "map all of those I could say that okay take all of those strings and then for each of those strings go into the graph",
    "start": "1735660",
    "end": "1742830"
  },
  {
    "text": "again into the people collection and then find the correct person and then map that back to back to our results and",
    "start": "1742830",
    "end": "1751919"
  },
  {
    "text": "then we could use that to find the actual person we were looking for and then find the name and so on and we",
    "start": "1751919",
    "end": "1758010"
  },
  {
    "text": "could do this with the other example as well so this is very explicit and it's",
    "start": "1758010",
    "end": "1766200"
  },
  {
    "text": "not really a nice interface it's this is just one or two levels if you want to",
    "start": "1766200",
    "end": "1773190"
  },
  {
    "text": "access something seven eight levels down into the graph this gets really tedious",
    "start": "1773190",
    "end": "1779330"
  },
  {
    "text": "so we looked at several several approaches to solving this and one of",
    "start": "1779330",
    "end": "1788159"
  },
  {
    "start": "1788000",
    "end": "1788000"
  },
  {
    "text": "the things that kind of inspired us was the whole functionality that MongoDB has",
    "start": "1788159",
    "end": "1794429"
  },
  {
    "text": "the populate so in MongoDB you could say that I have a collection of strings here",
    "start": "1794429",
    "end": "1802049"
  },
  {
    "text": "which are just references to other collections or the same collection and then you could say that I want to pull",
    "start": "1802049",
    "end": "1809880"
  },
  {
    "text": "out this this item from the database and I want it populated so you can so you",
    "start": "1809880",
    "end": "1815760"
  },
  {
    "text": "could say that I want all of the stories here on a person to be populated from",
    "start": "1815760",
    "end": "1822179"
  },
  {
    "text": "the story collection so this would be",
    "start": "1822179",
    "end": "1828950"
  },
  {
    "text": "okay if you were going to do this just a single level but if you're going to do this recursively that doesn't work very",
    "start": "1828950",
    "end": "1837390"
  },
  {
    "text": "well and we also didn't have the luxury of being able to use something like MongoDB",
    "start": "1837390",
    "end": "1843780"
  },
  {
    "text": "and another thing is that we really wanted this thing to be schema-less",
    "start": "1843780",
    "end": "1850370"
  },
  {
    "start": "1847000",
    "end": "1847000"
  },
  {
    "text": "so if we had a person object here where",
    "start": "1850370",
    "end": "1857520"
  },
  {
    "text": "that contains just some metadata and",
    "start": "1857520",
    "end": "1862530"
  },
  {
    "text": "then we could say that yeah this person has authored a set of stories and he has read the set of stories but we might at",
    "start": "1862530",
    "end": "1869760"
  },
  {
    "text": "some point want to add another field that they have liked the set of stories or at some point you might want to say",
    "start": "1869760",
    "end": "1876900"
  },
  {
    "text": "that yeah we want to have every person is supposed to be able to make their own",
    "start": "1876900",
    "end": "1882360"
  },
  {
    "text": "list of stories and then they can refer to a set of stories there as well so that this schema might change at any",
    "start": "1882360",
    "end": "1888990"
  },
  {
    "text": "point in time which would make these having schemas at all very hard so our",
    "start": "1888990",
    "end": "1899910"
  },
  {
    "start": "1898000",
    "end": "1898000"
  },
  {
    "text": "solution to this was to just go for these naming conventions so an object",
    "start": "1899910",
    "end": "1908160"
  },
  {
    "text": "here containing a story is authored by a",
    "start": "1908160",
    "end": "1913290"
  },
  {
    "text": "person and person here refers to the",
    "start": "1913290",
    "end": "1918930"
  },
  {
    "text": "people collection so we we just said that if you find a key that that has a",
    "start": "1918930",
    "end": "1925350"
  },
  {
    "text": "pluralized version as a collection just try to look up that reference and then",
    "start": "1925350",
    "end": "1931850"
  },
  {
    "text": "we want that to be accessible so that we want to go from a reference here to an",
    "start": "1931850",
    "end": "1938010"
  },
  {
    "text": "actual object that you can access deeply and then again stories here links back",
    "start": "1938010",
    "end": "1943800"
  },
  {
    "text": "to the stories collection which could then be populated with itself and so on",
    "start": "1943800",
    "end": "1950460"
  },
  {
    "text": "so you could think of this as an infinitely recursive graph the first",
    "start": "1950460",
    "end": "1958770"
  },
  {
    "text": "thing we did was try to do this naively with something like object",
    "start": "1958770",
    "end": "1964410"
  },
  {
    "start": "1961000",
    "end": "1961000"
  },
  {
    "text": "assigned so the code here isn't important but we tried to solve this",
    "start": "1964410",
    "end": "1970370"
  },
  {
    "text": "using object assign and then to create some sort of interface here where we",
    "start": "1970370",
    "end": "1976530"
  },
  {
    "text": "could say I want to have a method called populate which I can pass some sort of depth how",
    "start": "1976530",
    "end": "1984960"
  },
  {
    "text": "long do you want to be able to access this graph how deeply pass the graph",
    "start": "1984960",
    "end": "1991139"
  },
  {
    "text": "itself which is just a JSON object with the set of JSON collections and then we",
    "start": "1991139",
    "end": "1996690"
  },
  {
    "text": "could pass an object that we will want to be populated against this graph so",
    "start": "1996690",
    "end": "2005029"
  },
  {
    "text": "now we could say that I want to have a populated person which should I want to be able to access three levels deep and",
    "start": "2005029",
    "end": "2012559"
  },
  {
    "text": "I'll pass it the graph and I'll just pass the first person of the people array alerted the people collection",
    "start": "2012559",
    "end": "2018830"
  },
  {
    "text": "because that's the object that I'm interested in and this actually works",
    "start": "2018830",
    "end": "2025659"
  },
  {
    "text": "pretty nice so if we access this object now or we pass this into the populate",
    "start": "2025659",
    "end": "2032809"
  },
  {
    "text": "method it'll do this but if you try to",
    "start": "2032809",
    "end": "2039529"
  },
  {
    "text": "do this more than say four levels everything blows up because this just",
    "start": "2039529",
    "end": "2047269"
  },
  {
    "text": "grows exponentially right you wouldn't be able to do this we want to let's say",
    "start": "2047269",
    "end": "2052579"
  },
  {
    "text": "we we wanted to be able to access this infinitely deep of course that's going to take infinite amounts of memory and",
    "start": "2052579",
    "end": "2058010"
  },
  {
    "text": "it's going to be insanely slow and it's just a very naive approach to try to",
    "start": "2058010",
    "end": "2063618"
  },
  {
    "text": "solve this but it would be so nice if that just worked and this is where you",
    "start": "2063619",
    "end": "2073040"
  },
  {
    "start": "2072000",
    "end": "2072000"
  },
  {
    "text": "could use the power of proxies because now we could try to implement the same thing here using proxies and that's what",
    "start": "2073040",
    "end": "2080388"
  },
  {
    "text": "we did with the exact same with the exact same API so instead of the instead",
    "start": "2080389",
    "end": "2092210"
  },
  {
    "text": "of this now being the depths that this is being populated it's sort of more like a maximum depth for some reasons",
    "start": "2092210",
    "end": "2100910"
  },
  {
    "text": "that I'll show later but it's the exact same thing and now this this works",
    "start": "2100910",
    "end": "2111260"
  },
  {
    "text": "the same way except you're able to do this infinitely deep and the reason for",
    "start": "2111260",
    "end": "2119390"
  },
  {
    "text": "this is that imagine that we have these two collections here so stories and",
    "start": "2119390",
    "end": "2125750"
  },
  {
    "text": "people here represent the graphs so the graph is just two collections that are in some ways linked to each other so if",
    "start": "2125750",
    "end": "2133820"
  },
  {
    "text": "we try to access the first story here and we want to access the person and we",
    "start": "2133820",
    "end": "2140060"
  },
  {
    "text": "want to because we want to go into the author of the story and we want to go in and see what is the first story this",
    "start": "2140060",
    "end": "2147080"
  },
  {
    "text": "person has authored whenever we try to access the person here instead of us",
    "start": "2147080",
    "end": "2155540"
  },
  {
    "text": "eagerly populating and making an insanely large objects with proxies we",
    "start": "2155540",
    "end": "2160820"
  },
  {
    "text": "could just implement this as a jump so whenever you try to access this property it just jumps to the object in the in",
    "start": "2160820",
    "end": "2168050"
  },
  {
    "text": "the people collection and when you try to access stories from there it just",
    "start": "2168050",
    "end": "2174440"
  },
  {
    "text": "jumps back so you could access this infinitely deep it seems like this is an infinitely recursive a big object but",
    "start": "2174440",
    "end": "2184160"
  },
  {
    "text": "you're just jumping and that means that",
    "start": "2184160",
    "end": "2189380"
  },
  {
    "text": "you can do these things you could just access things infinitely deep without",
    "start": "2189380",
    "end": "2197500"
  },
  {
    "text": "without actually creating an instantly big objects let's see",
    "start": "2197500",
    "end": "2208210"
  },
  {
    "text": "yeah that's what I mean about proxies being lazy here because when you create",
    "start": "2211650",
    "end": "2217210"
  },
  {
    "text": "a proxy see when you create a proxy like",
    "start": "2217210",
    "end": "2229690"
  },
  {
    "text": "this with the object design version you're actually doing this eagerly you're creating this insanely large",
    "start": "2229690",
    "end": "2235900"
  },
  {
    "text": "object that is returned to you but when you're using proxies you're just wrapping a proxy around which is lazy so",
    "start": "2235900",
    "end": "2242020"
  },
  {
    "text": "nothing happens until you actually try to access something on the object but",
    "start": "2242020",
    "end": "2248680"
  },
  {
    "text": "the caveat here is that if you don't set a limit to the depths and you try to",
    "start": "2248680",
    "end": "2254670"
  },
  {
    "text": "stringify this proxy it's going to just blow up because that means that it's",
    "start": "2254670",
    "end": "2259990"
  },
  {
    "text": "going to recursively access any property that the object has so if you want to be",
    "start": "2259990",
    "end": "2266050"
  },
  {
    "text": "able to stringify or at least serialize this in some way you'll have to set a limit of the depth that this is going to",
    "start": "2266050",
    "end": "2272890"
  },
  {
    "text": "be populated but otherwise it works exactly the same and for the consumer",
    "start": "2272890",
    "end": "2279460"
  },
  {
    "text": "there is no difference between how you use this proxied version and the object",
    "start": "2279460",
    "end": "2286360"
  },
  {
    "text": "of fine version which is the important part sorry about this so this made us",
    "start": "2286360",
    "end": "2297730"
  },
  {
    "text": "really happy because now we were able to use this really nice way of accessing",
    "start": "2297730",
    "end": "2304090"
  },
  {
    "text": "the graph very deeply and we didn't have to pay any performance costs by doing it",
    "start": "2304090",
    "end": "2309640"
  },
  {
    "text": "and the other nice thing is that since this data was real-time we just always",
    "start": "2309640",
    "end": "2316480"
  },
  {
    "text": "had a representation of our data real time as Jason we didn't really need to do anything fancy we just needed to",
    "start": "2316480",
    "end": "2323650"
  },
  {
    "text": "update the the references correctly we didn't have to think about this actually",
    "start": "2323650",
    "end": "2330040"
  },
  {
    "text": "being a graph it's just JSON everything serializable so once we figured this out",
    "start": "2330040",
    "end": "2337690"
  },
  {
    "text": "I figured why not try to use proxies to solve all of the",
    "start": "2337690",
    "end": "2344470"
  },
  {
    "text": "in JavaScript so I was going to try to",
    "start": "2344470",
    "end": "2351609"
  },
  {
    "text": "fix this undefined it's not a function and cannot read properly undefined of",
    "start": "2351609",
    "end": "2357310"
  },
  {
    "text": "undefined so I my head a while trying to",
    "start": "2357310",
    "end": "2367930"
  },
  {
    "start": "2361000",
    "end": "2361000"
  },
  {
    "text": "do this so I think why don't we just really fine what undefined this will",
    "start": "2367930",
    "end": "2372970"
  },
  {
    "text": "make ourselves a new undefined here we say that undefined is a proxy of just an",
    "start": "2372970",
    "end": "2379090"
  },
  {
    "text": "empty function and I'll say that if you try to get something because the nice",
    "start": "2379090",
    "end": "2385960"
  },
  {
    "text": "thing about function is that functions have properties so they kind of look like objects and if I define a getter",
    "start": "2385960",
    "end": "2393220"
  },
  {
    "text": "trap on this proxy I could say that in",
    "start": "2393220",
    "end": "2400030"
  },
  {
    "text": "any case if you're trying to get something here and it's not the name of",
    "start": "2400030",
    "end": "2405190"
  },
  {
    "text": "the function I'll just return another undefined proxy to you so just recursively returning that to",
    "start": "2405190",
    "end": "2412510"
  },
  {
    "text": "you and if you try to call this as a function I'll just return undefined to",
    "start": "2412510",
    "end": "2418390"
  },
  {
    "text": "you again so I can now make em myself a",
    "start": "2418390",
    "end": "2427480"
  },
  {
    "start": "2425000",
    "end": "2425000"
  },
  {
    "text": "function here that I chose to call seatbelt where we return a new proxy so",
    "start": "2427480",
    "end": "2437320"
  },
  {
    "text": "we're wrapping an object in seatbelts here and we are returning a new proxy of",
    "start": "2437320",
    "end": "2443890"
  },
  {
    "text": "that object where we have this Gator trap and we can say that's the first thing you can do is just get whatever",
    "start": "2443890",
    "end": "2450430"
  },
  {
    "text": "you're trying to get from that object then we could say that if whatever you",
    "start": "2450430",
    "end": "2455530"
  },
  {
    "text": "try to access is an object we'll just return a seatbelt version of that object",
    "start": "2455530",
    "end": "2461440"
  },
  {
    "text": "to you so that it's recursively doing this seatbelt thing otherwise we'll see",
    "start": "2461440",
    "end": "2468609"
  },
  {
    "text": "that does this property exists if it does we'll return that actual property to meaning that this is a primitive type",
    "start": "2468609",
    "end": "2476170"
  },
  {
    "text": "so if it's a it fits a I see that there's actually this is not",
    "start": "2476170",
    "end": "2481400"
  },
  {
    "text": "actually going to work now if it's false or the number zero and for certain cases",
    "start": "2481400",
    "end": "2486560"
  },
  {
    "text": "but just imagine that JavaScript wasn't insane so if the property doesn't exist",
    "start": "2486560",
    "end": "2495200"
  },
  {
    "text": "we'll just return our new undefined definition and now I can make myself an",
    "start": "2495200",
    "end": "2502160"
  },
  {
    "text": "object here which I call never undefined which is the result of the seat-belt",
    "start": "2502160",
    "end": "2508190"
  },
  {
    "text": "function where I just passed some simple object here if I try to access never",
    "start": "2508190",
    "end": "2515240"
  },
  {
    "text": "undefined foo that has the value bar if I try to access the the nested object here that has the value 10 and so on so",
    "start": "2515240",
    "end": "2524060"
  },
  {
    "text": "the object works exactly like it did before for any field that is accessible",
    "start": "2524060",
    "end": "2530950"
  },
  {
    "text": "but what if I try to access a field that doesn't exist and then try to access",
    "start": "2531550",
    "end": "2537110"
  },
  {
    "text": "something that is not a function call that as a function and then access something on that again in this case",
    "start": "2537110",
    "end": "2543910"
  },
  {
    "text": "this is just a function this is just our new undefined so it doesn't actually crash anymore",
    "start": "2543910",
    "end": "2549710"
  },
  {
    "text": "so you can do things like this and it doesn't crash anymore no errors so feel",
    "start": "2549710",
    "end": "2556940"
  },
  {
    "text": "like this is yeah I solved all of JavaScript's problems and but and",
    "start": "2556940",
    "end": "2563300"
  },
  {
    "text": "there's one thing that I have not figured out yet and that is how I can do",
    "start": "2563300",
    "end": "2569510"
  },
  {
    "start": "2567000",
    "end": "2567000"
  },
  {
    "text": "this what if I could just replace the object prototype with this and this",
    "start": "2569510",
    "end": "2575930"
  },
  {
    "text": "would just be completely transparent so I think that this is probably like the next my next ambition here so all of",
    "start": "2575930",
    "end": "2585290"
  },
  {
    "text": "this that I've shown you here now is of course just fully abusing proxies and",
    "start": "2585290",
    "end": "2590840"
  },
  {
    "text": "these are examples of the things that this is an example of the things that",
    "start": "2590840",
    "end": "2596150"
  },
  {
    "text": "you shouldn't do with meta programming because what you're doing here is changing how the language works so much",
    "start": "2596150",
    "end": "2603560"
  },
  {
    "text": "that it's not at some point recognizable anymore and that's usually what they",
    "start": "2603560",
    "end": "2608960"
  },
  {
    "text": "call the curse of Lisp as well because when you start building a",
    "start": "2608960",
    "end": "2613970"
  },
  {
    "text": "program with Lisp and use a lot of mirror programming that program is going to have so many macros and so much meta",
    "start": "2613970",
    "end": "2620600"
  },
  {
    "text": "programming that it's kind of a language on its own which is really the the thing",
    "start": "2620600",
    "end": "2627980"
  },
  {
    "text": "that can go wrong with using meta programming so the really good things",
    "start": "2627980",
    "end": "2634730"
  },
  {
    "text": "about the meta programming is that you can create this really powerful abstractions and you can for the",
    "start": "2634730",
    "end": "2642650"
  },
  {
    "text": "fundamental operators you could get things like laziness so that you don't have to you could do a lot of this with",
    "start": "2642650",
    "end": "2649310"
  },
  {
    "text": "just regular higher-order functions or other types of abstractions here but in",
    "start": "2649310",
    "end": "2655160"
  },
  {
    "text": "this case you could do it for the fundamental operators so that it's all",
    "start": "2655160",
    "end": "2660410"
  },
  {
    "text": "of this is transparent but the really bad things about this is that you might",
    "start": "2660410",
    "end": "2668390"
  },
  {
    "text": "introduce a lot of magic and you might",
    "start": "2668390",
    "end": "2674060"
  },
  {
    "text": "end up making especially if you use macros as well that's going to be your",
    "start": "2674060",
    "end": "2680810"
  },
  {
    "text": "own language at some point and there's also performance so with a star here",
    "start": "2680810",
    "end": "2687830"
  },
  {
    "text": "because we use proxies to get performance on the the the interface",
    "start": "2687830",
    "end": "2693080"
  },
  {
    "text": "that we wanted to build but proxies themselves are a lot slower just regular",
    "start": "2693080",
    "end": "2698930"
  },
  {
    "text": "functions and objects and so on but in this case it made something that was",
    "start": "2698930",
    "end": "2705440"
  },
  {
    "text": "impossible possible because of our proxies work so the main takeaway from",
    "start": "2705440",
    "end": "2714890"
  },
  {
    "text": "this is that you should you should imagine what would be the perfect",
    "start": "2714890",
    "end": "2720290"
  },
  {
    "text": "interface to interact with this to consume this and then try to build it",
    "start": "2720290",
    "end": "2727900"
  },
  {
    "text": "instead of just instead of just being",
    "start": "2729910",
    "end": "2738260"
  },
  {
    "text": "with what's available in the language so",
    "start": "2738260",
    "end": "2743140"
  },
  {
    "text": "that's about it I guess I see that I",
    "start": "2743740",
    "end": "2754490"
  },
  {
    "text": "have 10 15 minutes left so if anyone has any questions I can do them all either",
    "start": "2754490",
    "end": "2761900"
  },
  {
    "text": "an hour afterwards I guess yeah yeah",
    "start": "2761900",
    "end": "2785990"
  },
  {
    "text": "that's that's the issue that you saw with the observable as well as right because with that version of an",
    "start": "2785990",
    "end": "2792290"
  },
  {
    "text": "observable you aren't able to observe something that you haven't created so",
    "start": "2792290",
    "end": "2797869"
  },
  {
    "text": "that's that's and that's an issue so I see that someone solve this by",
    "start": "2797869",
    "end": "2805070"
  },
  {
    "text": "overriding prototypes and let's say that they wanted to proxy the console log",
    "start": "2805070",
    "end": "2810920"
  },
  {
    "text": "function they override the console log in the beginning of their application so",
    "start": "2810920",
    "end": "2817090"
  },
  {
    "text": "that feels really hockey so yeah that's that's one of the limitations I guess",
    "start": "2817090",
    "end": "2824840"
  },
  {
    "text": "that you'll have to work around in slightly hacky ways I haven't found any good ways to solve that at least yes",
    "start": "2824840",
    "end": "2835900"
  },
  {
    "text": "they are at let's see I can press escape here and let me see so if you go yeah",
    "start": "2835900",
    "end": "2848150"
  },
  {
    "text": "it's lights calm I take LV I'll see if I can maybe get it",
    "start": "2848150",
    "end": "2855680"
  },
  {
    "text": "a bit bigger here let's see",
    "start": "2855680",
    "end": "2859359"
  },
  {
    "text": "yeah so all the code as well so the whole the whole grass population thing",
    "start": "2862680",
    "end": "2870580"
  },
  {
    "text": "is something that we're open sourcing because we've think that it's a really",
    "start": "2870580",
    "end": "2875740"
  },
  {
    "text": "interesting idea and we didn't find anything and that really did the same thing and we're also trying to implement",
    "start": "2875740",
    "end": "2883000"
  },
  {
    "text": "this with the JSON API spec so that you can get automatically if you have a huge",
    "start": "2883000",
    "end": "2890290"
  },
  {
    "text": "amount of like JSON API with links that that also is something that's just",
    "start": "2890290",
    "end": "2896200"
  },
  {
    "text": "populate about that so you can access it deeply so I guess this also kind of",
    "start": "2896200",
    "end": "2903190"
  },
  {
    "text": "overlaps with what all the graph databases are going to do now or like graph QL at least so yeah yes yep",
    "start": "2903190",
    "end": "2920550"
  },
  {
    "text": "[Music] yeah that's you mean if I wanted to",
    "start": "2933870",
    "end": "2942600"
  },
  {
    "text": "override how json.stringify accessed it or yeah you can do I don't have the link",
    "start": "2942600",
    "end": "2961770"
  },
  {
    "text": "right now but you can do some pretty insane things by using the with statement and proxies where you can then",
    "start": "2961770",
    "end": "2969450"
  },
  {
    "text": "then you can sort of get the things that the first question asked about working",
    "start": "2969450",
    "end": "2975540"
  },
  {
    "text": "as well but it's yeah it's a it's a bit edgy but yeah some people are doing",
    "start": "2975540",
    "end": "2983340"
  },
  {
    "text": "pretty insane things with proxies so yeah passing some kind of context or",
    "start": "2983340",
    "end": "2989760"
  },
  {
    "text": "at least because with what you want to do is be able to proxy all of the global",
    "start": "2989760",
    "end": "2995820"
  },
  {
    "text": "the Global's in JavaScript I want to be able to proxy object or object prototype or and not have to pass that further on",
    "start": "2995820",
    "end": "3003560"
  },
  {
    "text": "it kind of like you you you want to be able to override all those things or at least yeah proxy them so I think that is",
    "start": "3003560",
    "end": "3012790"
  },
  {
    "text": "like the next step of this yeah",
    "start": "3012790",
    "end": "3021220"
  },
  {
    "text": "[Music]",
    "start": "3024500",
    "end": "3030360"
  },
  {
    "text": "that is I'm guessing that I actually",
    "start": "3035890",
    "end": "3042890"
  },
  {
    "text": "haven't looked into how you can do that",
    "start": "3042890",
    "end": "3048770"
  },
  {
    "text": "in code in that sense but I know that if you go for example into the console of of Chrome you can see that this is a",
    "start": "3048770",
    "end": "3056750"
  },
  {
    "text": "proxy so there is a way to override this it's just that it's the benefit of",
    "start": "3056750",
    "end": "3065480"
  },
  {
    "text": "proxies from the consumer perspective is that it's transparent but I'm guessing",
    "start": "3065480",
    "end": "3070790"
  },
  {
    "text": "that there is just as you could access the underscore underscore proto in most of the JavaScript engines there is a way",
    "start": "3070790",
    "end": "3077990"
  },
  {
    "text": "to do this in proxy with purchase as well but I actually don't actually haven't figured that out yet but yeah",
    "start": "3077990",
    "end": "3089240"
  },
  {
    "text": "that would also be helpful yes",
    "start": "3089240",
    "end": "3101290"
  },
  {
    "text": "you",
    "start": "3101290",
    "end": "3103350"
  }
]