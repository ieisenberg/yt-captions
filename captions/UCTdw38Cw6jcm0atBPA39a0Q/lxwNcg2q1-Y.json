[
  {
    "start": "0",
    "end": "174000"
  },
  {
    "text": "um so today the first talk we're going to have is from david wenger uh he is a developer at microsoft",
    "start": "160",
    "end": "7600"
  },
  {
    "text": "and here is hi dave will how's it going going very well i'm i'm always impressed",
    "start": "7600",
    "end": "14719"
  },
  {
    "text": "by that uh lego collection you have in the background there dave",
    "start": "14719",
    "end": "19439"
  },
  {
    "text": "do you do you ever uh just pick one off the shelves and take it apart and rebuild it or they just build ones",
    "start": "20960",
    "end": "27519"
  },
  {
    "text": "live sometimes they fall off the shelves and get rebuilt but uh usually i try to be nice my kids",
    "start": "27519",
    "end": "33760"
  },
  {
    "text": "not so much [Laughter] now i mean same i love lego do you find",
    "start": "33760",
    "end": "40719"
  },
  {
    "text": "the you know lego sort of helps you take a break from programming but still keep your mind active in a",
    "start": "40719",
    "end": "46960"
  },
  {
    "text": "sort of way of uh you know programming in a way nice and procedural there's always",
    "start": "46960",
    "end": "52000"
  },
  {
    "text": "instructions or do you just like building random things no i'm definitely not the random",
    "start": "52000",
    "end": "57680"
  },
  {
    "text": "builder i'll leave that to the kids i'm definitely uh follow the instructions and uh i like to uh so",
    "start": "57680",
    "end": "65198"
  },
  {
    "text": "you know there's cars and stuff behind me i like cars um what i like about it is as you're",
    "start": "65199",
    "end": "70479"
  },
  {
    "text": "putting it together you can see some of you're seeing how it works and how it fits together and then of course",
    "start": "70479",
    "end": "76080"
  },
  {
    "text": "it's uh it's greater than its parts kind of thing that's the same thing i like about programming so there's definitely",
    "start": "76080",
    "end": "82240"
  },
  {
    "text": "parallels now you are talking to us today about",
    "start": "82240",
    "end": "87439"
  },
  {
    "text": "records but i'm assuming it's not the old music records there's something uh very different",
    "start": "87439",
    "end": "92720"
  },
  {
    "text": "uh c sharp records right that's right yeah and uh so can you maybe just give",
    "start": "92720",
    "end": "98720"
  },
  {
    "text": "us a hint before we start why would i choose to use records over classes and",
    "start": "98720",
    "end": "104320"
  },
  {
    "text": "instructs for instance uh that's an interesting question uh that's",
    "start": "104320",
    "end": "109360"
  },
  {
    "text": "kind of you know maybe what i'm gonna answer but yeah i think i think the uh scott kind",
    "start": "109360",
    "end": "117280"
  },
  {
    "text": "of i won't say he stole a line from me because i'm pretty sure i stole it from him but i have used it before in talks",
    "start": "117280",
    "end": "122880"
  },
  {
    "text": "uh when he was talking about looking you know one level below what you understand i love",
    "start": "122880",
    "end": "128800"
  },
  {
    "text": "that idea that's what i do as well and that's sort of how i approach records",
    "start": "128800",
    "end": "134160"
  },
  {
    "text": "so for me it's not that much about when you would use a record or a structure a class it's what's more important is to",
    "start": "134160",
    "end": "141520"
  },
  {
    "text": "understand what a record is under the covers so that you can make",
    "start": "141520",
    "end": "146640"
  },
  {
    "text": "that decision because it's always going to be you know dependent on what you're doing",
    "start": "146640",
    "end": "151760"
  },
  {
    "text": "i'm looking forward to this dave because i've got questions of my own about records for you but i'll leave that to",
    "start": "151760",
    "end": "158480"
  },
  {
    "text": "the end i think uh we'll go through your talk so uh the stream is yours take it away all right thank you",
    "start": "158480",
    "end": "164480"
  },
  {
    "text": "no pressure following uh that wonderful keynote but uh hello thank you for tuning in uh my",
    "start": "164480",
    "end": "171120"
  },
  {
    "text": "name's dave let's talk about records what is a record uh that's a tough question that i don't",
    "start": "171120",
    "end": "179200"
  },
  {
    "start": "174000",
    "end": "270000"
  },
  {
    "text": "know the answer to because well i didn't prepare for this talk at all um",
    "start": "179200",
    "end": "184400"
  },
  {
    "text": "no a record is a funny thing to define because in c sharp nine a record is another way",
    "start": "184400",
    "end": "191120"
  },
  {
    "text": "of defining a type but in c 10 even that statement is not true and a record is now just",
    "start": "191120",
    "end": "198080"
  },
  {
    "text": "a thing and it's another way to define a thing but it's not really its own thing and",
    "start": "198080",
    "end": "203680"
  },
  {
    "text": "what i think a record is and this is a very well led to by williams question which was completely unscripted i",
    "start": "203680",
    "end": "209760"
  },
  {
    "text": "promise is a record is really just the collection of its parts right it's it's",
    "start": "209760",
    "end": "215519"
  },
  {
    "text": "all the bits of record put together that's what define it and i've sort of put six uh of those",
    "start": "215519",
    "end": "222239"
  },
  {
    "text": "features i guess uh on the screen there to me this is what defines a record it's just a record",
    "start": "222239",
    "end": "227840"
  },
  {
    "text": "has these has these qualities essentially what's interesting about records or",
    "start": "227840",
    "end": "234239"
  },
  {
    "text": "about these qualities is that five of these which i have circled with a squiggly square",
    "start": "234239",
    "end": "240319"
  },
  {
    "text": "are not exclusive to records and so like i was saying before one of the",
    "start": "240319",
    "end": "245439"
  },
  {
    "text": "really cool things about records is even if you're never going to use them by understanding how they work and",
    "start": "245439",
    "end": "250959"
  },
  {
    "text": "understanding what the compiler does to achieve recordness",
    "start": "250959",
    "end": "256320"
  },
  {
    "text": "you can bring some of those concepts to your existing code even if you don't use records or maybe",
    "start": "256320",
    "end": "261440"
  },
  {
    "text": "you will use records or maybe use records and you'll take some of them out so that's kind of what i want to talk about and i'm just going to",
    "start": "261440",
    "end": "268560"
  },
  {
    "text": "barrel through here we go so the first one up is simplified declaration and as of right",
    "start": "268560",
    "end": "275360"
  },
  {
    "start": "270000",
    "end": "437000"
  },
  {
    "text": "now and including c 10 which is coming out in november",
    "start": "275360",
    "end": "280960"
  },
  {
    "text": "this is exclusive to records the only way to get this simplified syntax is to use a record you",
    "start": "280960",
    "end": "288000"
  },
  {
    "text": "can't put it on your own classes and things there's lots of requests for that but you can't at the moment",
    "start": "288000",
    "end": "293280"
  },
  {
    "text": "and what this essentially is well i mean you can see there right it's a one line declaration",
    "start": "293280",
    "end": "298720"
  },
  {
    "text": "it kind of looks like a type declaration because it's public something car right it's not a return",
    "start": "298720",
    "end": "304560"
  },
  {
    "text": "type it's a thing it kind of looks like a constructor because again it doesn't have a",
    "start": "304560",
    "end": "309759"
  },
  {
    "text": "return type but it does have brackets and parameters so it kind of looks like a method call right so it kind of looks like a constructor",
    "start": "309759",
    "end": "315120"
  },
  {
    "text": "and it kind of looks like a type declaration and it turns out it's kind of those things in one that",
    "start": "315120",
    "end": "320720"
  },
  {
    "text": "numdor's parameter there explodes out and becomes a parameter of the",
    "start": "320720",
    "end": "326880"
  },
  {
    "text": "constructor and a property of the class that this would generate and that's really what a record is at the",
    "start": "326880",
    "end": "333199"
  },
  {
    "text": "end of the day a record is a different way of defining a class and it has some other behaviors but that's kind of where it is",
    "start": "333199",
    "end": "339280"
  },
  {
    "text": "um now full disclosure if you know what records are and how they work that's a lie it's not a set we'll talk",
    "start": "339280",
    "end": "346000"
  },
  {
    "text": "about that later and there's a lot more that gets generated with records it's",
    "start": "346000",
    "end": "351360"
  },
  {
    "text": "not just a one constructor but we'll cover all of that um but simplified declaration is",
    "start": "351360",
    "end": "358000"
  },
  {
    "text": "for me the sort of the quintessential thing about a record i love that you can define a class in one",
    "start": "358000",
    "end": "364400"
  },
  {
    "text": "line and use it and it has properties and it does what you need to do it's really good for you know data transfer objects those",
    "start": "364400",
    "end": "370720"
  },
  {
    "text": "sort of things those small classes um i just have you know a file and put 20 records definitions in it's 20 lines",
    "start": "370720",
    "end": "377840"
  },
  {
    "text": "and you're done so it's really nice and if nothing else uh it's",
    "start": "377840",
    "end": "382880"
  },
  {
    "text": "was probably one of my favorite or second favorite feature of them um even though it's arguably the least interesting but that's what a record is",
    "start": "382880",
    "end": "389840"
  },
  {
    "text": "essentially so let's get going uh i said that records was a class and in c sharp 9 that's true in",
    "start": "389840",
    "end": "397840"
  },
  {
    "text": "c sharp 10 that's not true so what you can now do or well now if you're using preview",
    "start": "397840",
    "end": "403759"
  },
  {
    "text": "versions of vs and in future is you can actually tell the compiler what type of thing you want this record",
    "start": "403759",
    "end": "410400"
  },
  {
    "text": "to be so you can say public record class car and that will generate a class and of course if you can say class well then you can",
    "start": "410400",
    "end": "416720"
  },
  {
    "text": "say struct and that will generate a struct and this is also why records aren't really anything because a record is just",
    "start": "416720",
    "end": "423759"
  },
  {
    "text": "a class or a struct it's not a new kind of type in.net",
    "start": "423759",
    "end": "428880"
  },
  {
    "text": "which it seems like it is at first but it's not it's just the features you know um",
    "start": "428880",
    "end": "437199"
  },
  {
    "start": "437000",
    "end": "652000"
  },
  {
    "text": "i just saw melissa's question about david's room and i thought she was talking about lego uh yes if you ask questions on slider",
    "start": "437199",
    "end": "443360"
  },
  {
    "text": "that's what that qr code in the corner is for um okay so immutable back to records",
    "start": "443360",
    "end": "449039"
  },
  {
    "text": "uh records are immutable by default um someone there's many people who disagree",
    "start": "449039",
    "end": "456080"
  },
  {
    "text": "with that statement uh there's often i won't say heated debates but there's discussions about",
    "start": "456080",
    "end": "462000"
  },
  {
    "text": "this concept uh there's some in github on like the docs page where it says they're immutable by default and",
    "start": "462000",
    "end": "468560"
  },
  {
    "text": "people complain that they're not on c-sharp discord hello everyone on c-sharp discord uh i say things like yeah they're",
    "start": "468560",
    "end": "475759"
  },
  {
    "text": "immutable by default and everyone says no they're not immutable is controversial",
    "start": "475759",
    "end": "482560"
  },
  {
    "text": "so let me let me talk about this when i say by default what i mean is that simplified declaration of a",
    "start": "482560",
    "end": "488400"
  },
  {
    "text": "record this one liner if you define a record in one line like that then",
    "start": "488400",
    "end": "493759"
  },
  {
    "text": "it is an immutable object guaranteed the problem with immutability in records",
    "start": "493759",
    "end": "500240"
  },
  {
    "text": "is you can't essentially know whether a record is immutable or not",
    "start": "500240",
    "end": "506240"
  },
  {
    "text": "there is nothing by definition that says it's immutable so this record definition right single",
    "start": "506240",
    "end": "511919"
  },
  {
    "text": "line this is immutable this record definition is exactly the same but it is not",
    "start": "511919",
    "end": "518839"
  },
  {
    "text": "immutable and from a consuming point of view you can't tell obviously you can look at the source code and tell if you can look",
    "start": "518839",
    "end": "524959"
  },
  {
    "text": "at the source code well that answers all the questions right but if you are given uh an instance of type car and someone",
    "start": "524959",
    "end": "532240"
  },
  {
    "text": "tells you it's a record that doesn't mean anything right this record down the bottom there is a mutable record because it has a set",
    "start": "532240",
    "end": "538959"
  },
  {
    "text": "accessor on that property you can set that whenever you like so as i lied to you earlier that's not",
    "start": "538959",
    "end": "545760"
  },
  {
    "text": "how the c compiler generates a record what it actually generates is an init accessor so this is a new",
    "start": "545760",
    "end": "553680"
  },
  {
    "text": "thing added in c sharp nine four records but it works on any property",
    "start": "553680",
    "end": "559120"
  },
  {
    "text": "it works on structs it works on classes and what it does is it allows you to define a mutable sorry an immutable type",
    "start": "559120",
    "end": "566640"
  },
  {
    "text": "so one where you can't set properties or the unit properties anyway except you can set them in if you're",
    "start": "566640",
    "end": "574160"
  },
  {
    "text": "initializing an object and there's essentially two ways to initialize an object in c sharp",
    "start": "574160",
    "end": "579680"
  },
  {
    "text": "number one is the constructor whoops that's the constructor there on the screen thank you",
    "start": "579680",
    "end": "584959"
  },
  {
    "text": "so as you can see right in the constructor there we're setting this num doors property but well we've said we can't set it so",
    "start": "584959",
    "end": "590640"
  },
  {
    "text": "how does that work well the compiler knows that okay in the constructor you can call the unit property and it is very specifically in the",
    "start": "590640",
    "end": "596560"
  },
  {
    "text": "constructor you can't set an init property in a method even if the method is called from the constructor like it is specific",
    "start": "596560",
    "end": "603120"
  },
  {
    "text": "the other initialization case which i skipped to earlier is object initialization so pretend we",
    "start": "603120",
    "end": "608320"
  },
  {
    "text": "didn't have the constructor you can construct an object in c-sharp like this you just specify those properties",
    "start": "608320",
    "end": "613839"
  },
  {
    "text": "and c-sharp will let you the file will let you even though you're setting a property because you're initializing",
    "start": "613839",
    "end": "620640"
  },
  {
    "text": "the um initializing object thank you aaron yes they did uh if you try and set the",
    "start": "620640",
    "end": "627360"
  },
  {
    "text": "property the normal way then you get an error because the compiler cannot know or doesn't know",
    "start": "627360",
    "end": "633680"
  },
  {
    "text": "that you're initializing an object kind of like i mean you look at that and you're like well obviously i",
    "start": "633680",
    "end": "638800"
  },
  {
    "text": "am but you know what i mean um so let's let's let's just dig",
    "start": "638800",
    "end": "644160"
  },
  {
    "text": "into that because fine that's immutability it's easy to say yes there's an internet accessor but the interesting thing comes as i",
    "start": "644160",
    "end": "650079"
  },
  {
    "text": "said from knowing why so this is sharplab if you haven't seen",
    "start": "650079",
    "end": "656320"
  },
  {
    "start": "652000",
    "end": "957000"
  },
  {
    "text": "sharp lab before sharplab is an amazing tool it's a website written by a",
    "start": "656320",
    "end": "661839"
  },
  {
    "text": "lovely man just across the pond in new zealand and what it does is as i type out code over here",
    "start": "661839",
    "end": "668399"
  },
  {
    "text": "which i will do right now it is compiling my code into il and then it is",
    "start": "668399",
    "end": "675120"
  },
  {
    "text": "using sorry using the latest bits of roslyn so c sharp 10 essentially and then it is decompiling my code but",
    "start": "675120",
    "end": "682079"
  },
  {
    "text": "it is telling il spy which is the decompiler it's saying hey i wrote this code with c sharp 1. so none of these",
    "start": "682079",
    "end": "688800"
  },
  {
    "text": "features are sort of available to il spy as it's decompiling so if we look at this record i've just",
    "start": "688800",
    "end": "695519"
  },
  {
    "text": "defined what it does is it explodes out to well here's our class car and there's a bunch of stuff here's",
    "start": "695519",
    "end": "702000"
  },
  {
    "text": "our backing field for our property here's our property and we can see it has an internet accessor right that's cool doesn't really tell us",
    "start": "702000",
    "end": "709440"
  },
  {
    "text": "much but okay if i create a variable",
    "start": "709440",
    "end": "714880"
  },
  {
    "text": "of this type i can this is a bit weird but i can set the property even though it's also",
    "start": "714880",
    "end": "721680"
  },
  {
    "text": "set in the constructor you wouldn't want to do it but you can but you can see here",
    "start": "721680",
    "end": "726800"
  },
  {
    "text": "this is my object initializer right this is what it compiles to it compiles to create a car and then set the numdos",
    "start": "726800",
    "end": "732639"
  },
  {
    "text": "property the compiler is allowed to do this because it's",
    "start": "732639",
    "end": "738079"
  },
  {
    "text": "the compiler it knows right it trusts itself if i paste this over here i'm going to get an error so this is the",
    "start": "738079",
    "end": "744800"
  },
  {
    "text": "compiler enforcing hey you've got an init property here right it says here you can't just",
    "start": "744800",
    "end": "750079"
  },
  {
    "text": "do this so how does an internet property work well if we switch to il which is very scary scary and i don't",
    "start": "750079",
    "end": "757040"
  },
  {
    "text": "like doing so i won't do it again but if we have a look at what this really generates uh and actually you",
    "start": "757040",
    "end": "762880"
  },
  {
    "text": "know what i'm gonna change this because it's too scary for me i'm just gonna make this a uh what do",
    "start": "762880",
    "end": "769360"
  },
  {
    "text": "you say number doors going to do the old-fashioned way on a class",
    "start": "769360",
    "end": "774800"
  },
  {
    "text": "which means i need to get rid of that this is a class with an inner property",
    "start": "774800",
    "end": "780160"
  },
  {
    "text": "uh sorry i'll just go back to the c sharp just to prove there's no magic here so this is just got a field property in an accessor we'll get rid of",
    "start": "780160",
    "end": "787279"
  },
  {
    "text": "all that record junk if we go down the bottom here's our properties here's a property",
    "start": "787279",
    "end": "793279"
  },
  {
    "text": "called num doors it's an int now properties if you didn't know they're really just get and set methods under the hood so i get says get them dollars and our",
    "start": "793279",
    "end": "800800"
  },
  {
    "text": "set is set numbers so in il",
    "start": "800800",
    "end": "806079"
  },
  {
    "text": "right in a net dll there's no such thing as in it it's a c-sharp compiler thing",
    "start": "806079",
    "end": "811200"
  },
  {
    "text": "uh an init is really just a set with a hat on and this is the hat it's a mod rack",
    "start": "811200",
    "end": "817440"
  },
  {
    "text": "i have no idea what that means and it basically annotates it with this type and then the",
    "start": "817440",
    "end": "823760"
  },
  {
    "text": "compiler knows hey if something is annotated with this type it's an init property and so it doesn't let you set",
    "start": "823760",
    "end": "830000"
  },
  {
    "text": "it so why is this interesting well there's two reasons number one firstly",
    "start": "830000",
    "end": "835760"
  },
  {
    "text": "you can use inner properties in your normal classes right you don't need to use records to get this feature",
    "start": "835760",
    "end": "841440"
  },
  {
    "text": "that's pretty cool number two this type is defined in uh net right it's in net core",
    "start": "841440",
    "end": "849600"
  },
  {
    "text": "i don't know 3.1 or whatever if you're not targeting dotnet 3.1 you can't use init properties you get an",
    "start": "849600",
    "end": "856480"
  },
  {
    "text": "error that says hey there is no type called is external in it and you look at that and you're like what the hell are you talking about",
    "start": "856480",
    "end": "861519"
  },
  {
    "text": "well it turns out if you work out what the compiler does you can do this and go to public static",
    "start": "861519",
    "end": "867839"
  },
  {
    "text": "class is external limits and i'm going to get rid of the ielts computing",
    "start": "867839",
    "end": "873440"
  },
  {
    "text": "if you do that actually i'm not if you do this you can use inner properties if we look",
    "start": "873440",
    "end": "878880"
  },
  {
    "text": "down at our property here you can see our mod rack now if you were keen eyed this is actually slightly different",
    "start": "878880",
    "end": "884800"
  },
  {
    "text": "before this said system private call live in front of it right that's where the type came from",
    "start": "884800",
    "end": "890560"
  },
  {
    "text": "now the type is coming from our assembly so we just essentially put in part of the runtime and uh",
    "start": "890560",
    "end": "896720"
  },
  {
    "text": "you know now we can use inner properties everywhere it is a little bit tricky in that you want to be careful making this public because if you've got something",
    "start": "896720",
    "end": "902800"
  },
  {
    "text": "consuming you that targets 3.1 or whatever but good question graham good question",
    "start": "902800",
    "end": "908880"
  },
  {
    "text": "can you get a property by reflection set it yes so this is the the asterisks here for immutability in c",
    "start": "908880",
    "end": "915760"
  },
  {
    "text": "sharp uh c sharp loves backwards compatibility in fact so does all of microsoft",
    "start": "915760",
    "end": "920959"
  },
  {
    "text": "so we don't like breaking people so as you can see this is a set in il this is still called set num doors",
    "start": "920959",
    "end": "927519"
  },
  {
    "text": "you can set this in reflection uh a now the good thing about that is it means that a d serializer will still be able to set it",
    "start": "927519",
    "end": "934959"
  },
  {
    "text": "so you can use a record or you can have a class with an inner property and if you're deserializing it from json or",
    "start": "934959",
    "end": "940560"
  },
  {
    "text": "whatever that's cool your inner properties still work they can still be set by the decompiler but also your",
    "start": "940560",
    "end": "947040"
  },
  {
    "text": "immutability still works and so you know that you know no one else can change this property",
    "start": "947040",
    "end": "952800"
  },
  {
    "text": "which is cool",
    "start": "952800",
    "end": "955839"
  },
  {
    "start": "957000",
    "end": "1089000"
  },
  {
    "text": "so the one uh drawback if you like to inner properties or not drawback but",
    "start": "957839",
    "end": "964160"
  },
  {
    "text": "there's a bit of a gap still within the properties which hopefully will be fixed in future and",
    "start": "964160",
    "end": "969360"
  },
  {
    "text": "that is around nullability so if i define a class and i have a nullable string address",
    "start": "969360",
    "end": "975120"
  },
  {
    "text": "then fine we can make that init property you can only set it during initialization",
    "start": "975120",
    "end": "980560"
  },
  {
    "text": "and that's it it's great but if i define a non-nullable string and i don't have a constructor then i",
    "start": "980560",
    "end": "987120"
  },
  {
    "text": "get an error because nothing is initializing this property which means its default value is null but you've said it's not nullable but",
    "start": "987120",
    "end": "994399"
  },
  {
    "text": "you don't want to initialize it because you want the people to initialize it and they can't set it like so it's it's all very",
    "start": "994399",
    "end": "1000560"
  },
  {
    "text": "these kind of features kind of bump into each other and there's a few ways around it you can just have a constructor and i",
    "start": "1000560",
    "end": "1005600"
  },
  {
    "text": "mean that makes sense right if everyone has to set a name then have it in your constructor right the",
    "start": "1005600",
    "end": "1010720"
  },
  {
    "text": "other way around it if you're sure that someone is going to set the name like for example if you know your code and you know for sure this is only ever going to",
    "start": "1010720",
    "end": "1017199"
  },
  {
    "text": "be used when deserializing um you know some input then",
    "start": "1017199",
    "end": "1022800"
  },
  {
    "text": "you can sort of work around the issue so one way is to assign it to null and then use the",
    "start": "1022800",
    "end": "1028160"
  },
  {
    "text": "exclamation mark which is the null forgiveness operator which is the compiler shut up and get out of my way operator",
    "start": "1028160",
    "end": "1034640"
  },
  {
    "text": "and this will work and this just says yeah look okay fine i've initialized it don't worry someone will follow up later",
    "start": "1034640",
    "end": "1041280"
  },
  {
    "text": "and obviously you could just make it nullable as well but that's a bit annoying because then you've got to you know check for nulls all the time so",
    "start": "1041280",
    "end": "1046640"
  },
  {
    "text": "what's coming in c sharp 11 it it recently got cut from c-sharp 10",
    "start": "1046640",
    "end": "1052080"
  },
  {
    "text": "sadly is required properties and i mentioned this because this is just going to make everything",
    "start": "1052080",
    "end": "1057280"
  },
  {
    "text": "so much nicer and it's really going to fill in the sort of the the complete picture here so with inner",
    "start": "1057280",
    "end": "1063120"
  },
  {
    "text": "properties i can say this can only be set during initialization can't set it anywhere else with required",
    "start": "1063120",
    "end": "1069280"
  },
  {
    "text": "i can say this has to be set during initialization and so that really completes the picture and then you can",
    "start": "1069280",
    "end": "1074720"
  },
  {
    "text": "really create classes that you can control how they're used fully when would i use an init property",
    "start": "1074720",
    "end": "1082320"
  },
  {
    "text": "over a record i will leave that question until the last slide thank you aaron",
    "start": "1082320",
    "end": "1090720"
  },
  {
    "start": "1089000",
    "end": "1352000"
  },
  {
    "text": "value semantics so value semantics is the next property we're going to talk about next property shouldn't use property it's",
    "start": "1091440",
    "end": "1096880"
  },
  {
    "text": "really hard to talk about types and kinds and classes and objects value semantics is the next feature",
    "start": "1096880",
    "end": "1101919"
  },
  {
    "text": "we're going to talk about uh what is value semantics good question uh what does this code do",
    "start": "1101919",
    "end": "1109520"
  },
  {
    "text": "right what is result is it true or false right who knows no way of knowing",
    "start": "1109520",
    "end": "1114559"
  },
  {
    "text": "um value semantics will submit the semantics that we're talking about here is what does it mean for one thing",
    "start": "1114559",
    "end": "1120960"
  },
  {
    "text": "to be equal to another thing i'm going to switch to visual studio for this one which is over here so",
    "start": "1120960",
    "end": "1130080"
  },
  {
    "text": "feel free to yell at me producers if i need to zoom i will in fact a little bit later so i have a different type of record",
    "start": "1130080",
    "end": "1136720"
  },
  {
    "text": "here called the point and uh i've constructed a point it's got two properties x and y right pretty",
    "start": "1136720",
    "end": "1142160"
  },
  {
    "text": "boring uh i'm actually going to make another points though",
    "start": "1142160",
    "end": "1147200"
  },
  {
    "text": "and i'm going to set it to the same the same values and then when i do",
    "start": "1147200",
    "end": "1152720"
  },
  {
    "text": "equals here so that's p1 equal p2",
    "start": "1152720",
    "end": "1158240"
  },
  {
    "text": "and i run my code and i look for the console window hello contour window there is that's not",
    "start": "1158240",
    "end": "1164720"
  },
  {
    "text": "the right one um oh there it is sorry that took a while",
    "start": "1164720",
    "end": "1169840"
  },
  {
    "text": "so yes what can i say um so that output's true right those two points are equal because",
    "start": "1169840",
    "end": "1176960"
  },
  {
    "text": "they point to the same point if i change one it's now false great make sense if i make this",
    "start": "1176960",
    "end": "1184880"
  },
  {
    "text": "a class not a glass but a class and i run this it's still false",
    "start": "1184880",
    "end": "1191600"
  },
  {
    "text": "right so why isn't this",
    "start": "1191600",
    "end": "1196640"
  },
  {
    "text": "why was it true with a record and why was it false with class well that's value semantics so records",
    "start": "1196640",
    "end": "1201679"
  },
  {
    "text": "have no sense of equality of themselves they they sort of pass that on to their constituent parts",
    "start": "1201679",
    "end": "1208000"
  },
  {
    "text": "um the real answer here is that um for a class the default equals does",
    "start": "1208000",
    "end": "1215919"
  },
  {
    "text": "uh the default uh equality for a class is",
    "start": "1215919",
    "end": "1221280"
  },
  {
    "text": "reference equality which means is this literally the exact same instance right so what a record does",
    "start": "1221280",
    "end": "1228480"
  },
  {
    "text": "is it does value equality the value equality means yeah these",
    "start": "1228480",
    "end": "1233840"
  },
  {
    "text": "represent the same thing they're still not the exact same instance right that second check still returns false but they mean the same thing now if",
    "start": "1233840",
    "end": "1241200"
  },
  {
    "text": "you've used structs before structs also have value equality",
    "start": "1241200",
    "end": "1246559"
  },
  {
    "text": "so and this is another thing where records get weird right what's a record well it's a class well except it can be",
    "start": "1246559",
    "end": "1251600"
  },
  {
    "text": "a struct what's cool about records they have value equality but so destructs but records can be structs so they",
    "start": "1251600",
    "end": "1257520"
  },
  {
    "text": "already have it it's kind of weird and this is kind of why i didn't want to answer the when would you use question because",
    "start": "1257520",
    "end": "1263840"
  },
  {
    "text": "it depends so if a struct has value equality i can achieve value equality",
    "start": "1263840",
    "end": "1269760"
  },
  {
    "text": "now great uh if a record has value equality i can use that to get it what about a",
    "start": "1269760",
    "end": "1275840"
  },
  {
    "text": "class well it turns out you can actually value a quality very easily you can just override the equals method",
    "start": "1275840",
    "end": "1282960"
  },
  {
    "text": "here and i can say return now i get to type on camera while making",
    "start": "1282960",
    "end": "1290000"
  },
  {
    "text": "lots of mistakes uh and p x equals x i'm just gonna",
    "start": "1290000",
    "end": "1297039"
  },
  {
    "text": "describing oh look thank you intellicode oh yep you compile oh i missed pickles",
    "start": "1297039",
    "end": "1305360"
  },
  {
    "text": "no one in chat is yelling out equals i'm shocked so i've just made this class have value",
    "start": "1305360",
    "end": "1311200"
  },
  {
    "text": "equality so what's so good about records right like this is where you have to uh you",
    "start": "1311200",
    "end": "1318080"
  },
  {
    "text": "have to pick and choose what you're using why would you want to do it well so valuable quality is really good",
    "start": "1318080",
    "end": "1323840"
  },
  {
    "text": "in some circumstances for example a point class it's pretty uh well it's obvious but it",
    "start": "1323840",
    "end": "1330240"
  },
  {
    "text": "might be common that we don't care what instance is what we just care",
    "start": "1330240",
    "end": "1337200"
  },
  {
    "text": "where is this point in physical space and so that's what value equality provides right and so you can achieve all these",
    "start": "1337200",
    "end": "1342799"
  },
  {
    "text": "things but again it's just a cool thing to know so now the question becomes",
    "start": "1342799",
    "end": "1348559"
  },
  {
    "text": "or rather back to here whoops nope wrong one there we go so value semantics so",
    "start": "1348559",
    "end": "1354960"
  },
  {
    "start": "1352000",
    "end": "1522000"
  },
  {
    "text": "classes have reference equality but you can implement value equality if you want structure value",
    "start": "1354960",
    "end": "1360559"
  },
  {
    "text": "equality records act like structs which is good so why would you use records well it turns out records are better at being struck than",
    "start": "1360559",
    "end": "1367120"
  },
  {
    "text": "structure so this is a benchmark.net output thingy",
    "start": "1367120",
    "end": "1373440"
  },
  {
    "text": "and so this is just calling the equals method and a record uh the equals method take took 20",
    "start": "1373440",
    "end": "1380000"
  },
  {
    "text": "nanoseconds i think this had two in properties it was basically the point class i had and a struct took 340 nanoseconds now",
    "start": "1380000",
    "end": "1387520"
  },
  {
    "text": "that's a very short amount of time and 104 bytes allocated is not a lot of memory",
    "start": "1387520",
    "end": "1392720"
  },
  {
    "text": "but sometimes people can care about these things and if you do you might want to choose a",
    "start": "1392720",
    "end": "1398960"
  },
  {
    "text": "record so how is this speed achieved well for that we have to go back",
    "start": "1398960",
    "end": "1404080"
  },
  {
    "text": "to sharp lab and we go back to making this a record and we go back",
    "start": "1404080",
    "end": "1409200"
  },
  {
    "text": "to c sharp and we look at the equals method the equals method in a record",
    "start": "1409200",
    "end": "1414799"
  },
  {
    "text": "is right here and it does a bunch of rubbish but essentially it does what i did in my class it says hey are",
    "start": "1414799",
    "end": "1422000"
  },
  {
    "text": "these two fields uh equal and if i in fact add another field here",
    "start": "1422000",
    "end": "1427200"
  },
  {
    "text": "uh private underscore new fields we will see in the equals method",
    "start": "1427200",
    "end": "1434559"
  },
  {
    "text": "um at the end at start there is no let's get hash code sorry there it is we will see that it is",
    "start": "1434559",
    "end": "1442000"
  },
  {
    "text": "including new field in its uh in its equality check so a record will generate an equals",
    "start": "1442000",
    "end": "1447919"
  },
  {
    "text": "method that checks every single field and that's how it does it equality right so it's the constituent",
    "start": "1447919",
    "end": "1453600"
  },
  {
    "text": "parts a struct on the other hand and if we look at the source of.net we can find this out so",
    "start": "1453600",
    "end": "1459440"
  },
  {
    "text": "all structs inherit from value type which is confusingly a class but ignore",
    "start": "1459440",
    "end": "1465120"
  },
  {
    "text": "that value types equals method happens to be at the top of the file which is very convenient for me",
    "start": "1465120",
    "end": "1471360"
  },
  {
    "text": "and if we look at what it does we get to this line and if you know what this line is you'll know why it's slower right this is",
    "start": "1471360",
    "end": "1477679"
  },
  {
    "text": "reflection and if you think about it this kind of makes sense a struct at run time has to work out right what",
    "start": "1477679",
    "end": "1484559"
  },
  {
    "text": "fields do they have okay let me loop through them and and you know this this gets the value of both fields and",
    "start": "1484559",
    "end": "1490720"
  },
  {
    "text": "checks the equals like it's the same logic but this is happening at runtime working out which fields you've got this",
    "start": "1490720",
    "end": "1496880"
  },
  {
    "text": "is happening at compile time generating an equals method so",
    "start": "1496880",
    "end": "1502720"
  },
  {
    "text": "records are sort of i won't say they're cheating because",
    "start": "1502720",
    "end": "1508080"
  },
  {
    "text": "they're not but they're a form of code generation and if you've looked into source generators and if you know me you know that i",
    "start": "1508080",
    "end": "1513679"
  },
  {
    "text": "love structures um that's one of the advantages right is they can look at your code and they can do things and",
    "start": "1513679",
    "end": "1519679"
  },
  {
    "text": "therefore it can get faster results and with expressions",
    "start": "1519679",
    "end": "1525120"
  },
  {
    "start": "1522000",
    "end": "1840000"
  },
  {
    "text": "uh this is good we're banning through them hopefully there's lots of questions waiting for me maybe please ask questions",
    "start": "1525120",
    "end": "1530640"
  },
  {
    "text": "um all right with expressions so uh here i am defining two cars a honda rest 2000",
    "start": "1530640",
    "end": "1536000"
  },
  {
    "text": "is a car with two doors and a honda accord euro is basically the same as a honda s2000 but with four",
    "start": "1536000",
    "end": "1541120"
  },
  {
    "text": "doors now if you know cars you now know what car i drive it's not the convertible um so",
    "start": "1541120",
    "end": "1549840"
  },
  {
    "text": "uh what am i doing here like what is this new with rubbish so what this is doing is this is",
    "start": "1549840",
    "end": "1557039"
  },
  {
    "text": "now firstly it's setting a uh setting a property which well hang on",
    "start": "1557039",
    "end": "1562799"
  },
  {
    "text": "isn't that illegal because of init properties well it is but this is another form",
    "start": "1562799",
    "end": "1569039"
  },
  {
    "text": "of initializing types and well it's kind of the same form this is like an object expression but with some other stuff",
    "start": "1569039",
    "end": "1575520"
  },
  {
    "text": "but so what this is doing is saying hey here's an instance of a car under s2000 take that",
    "start": "1575520",
    "end": "1582880"
  },
  {
    "text": "make a copy of it and give me a new one but set the num doors to four so it's still",
    "start": "1582880",
    "end": "1589760"
  },
  {
    "text": "initializing our honda record euro object it's just that as part of that initialization",
    "start": "1589760",
    "end": "1595279"
  },
  {
    "text": "we're going to get most of it from the existing object right so",
    "start": "1595279",
    "end": "1602240"
  },
  {
    "text": "let's go back to here and we'll zoom the browser as requested sorry for not noticing earlier um",
    "start": "1602240",
    "end": "1610000"
  },
  {
    "text": "so what are we going to do so here we are so we have a car and everything and i'm just going to",
    "start": "1611120",
    "end": "1617600"
  },
  {
    "text": "see with oops with doors now this one is a very silly",
    "start": "1617600",
    "end": "1624320"
  },
  {
    "text": "example because car only has one property but let's just have a look how it works anyway",
    "start": "1624320",
    "end": "1629600"
  },
  {
    "text": "uh scroll down here it is so this is our with expression now it's not",
    "start": "1629600",
    "end": "1636640"
  },
  {
    "text": "very clear and you just have to trust me on that but it is um",
    "start": "1636640",
    "end": "1641760"
  },
  {
    "text": "the way a with expression works is a little bit more compiler magic where the compiler gets to cheat so",
    "start": "1641760",
    "end": "1646880"
  },
  {
    "text": "you're not allowed to set the num doors property in your code but the compiler can set it in its code because you know it's the compiler right so what",
    "start": "1646880",
    "end": "1653760"
  },
  {
    "text": "the compiler does is it makes a copy of the car and then it sets the property and then it gives you back the car you want it now",
    "start": "1653760",
    "end": "1659200"
  },
  {
    "text": "these variable names get confusing that's because the decompilation doesn't know your variable names um but so it calls this weird clone",
    "start": "1659200",
    "end": "1667679"
  },
  {
    "text": "method right now so i did this before and i'll do it again if we copy the code here you'll find",
    "start": "1667679",
    "end": "1674000"
  },
  {
    "text": "this is illegal code besides the fact that carbon exists not only because we're setting the",
    "start": "1674000",
    "end": "1679120"
  },
  {
    "text": "property which is this error but the name clone doesn't exist and there's an end of",
    "start": "1679120",
    "end": "1684240"
  },
  {
    "text": "file expected and things just get weird and that's because of this right this is not c code",
    "start": "1684240",
    "end": "1692159"
  },
  {
    "text": "so what is this nonsense this is what is referred to as an unspeakable method so this is a method",
    "start": "1692159",
    "end": "1697760"
  },
  {
    "text": "that is valid in il as a name but it's not valid in c sharp and so the compiler uses this all",
    "start": "1697760",
    "end": "1705039"
  },
  {
    "text": "the time to generate things that it doesn't want people to call in fact you can see it right here in the backing",
    "start": "1705039",
    "end": "1711440"
  },
  {
    "text": "fields the same thing the backing field of a property is unspeakable because the compiler doesn't want anyone to be able",
    "start": "1711440",
    "end": "1716880"
  },
  {
    "text": "to get at it so why don't we want people to get at the clone method",
    "start": "1716880",
    "end": "1722000"
  },
  {
    "text": "well in order to maintain immutability we have to know that there is a way to",
    "start": "1722000",
    "end": "1728640"
  },
  {
    "text": "make a 100 accurate copy of this instance right",
    "start": "1728640",
    "end": "1733679"
  },
  {
    "text": "uh we have if if the if the act of copying changes something",
    "start": "1733679",
    "end": "1738799"
  },
  {
    "text": "then that breaks immutability so the clone method uh is down here it doesn't look very",
    "start": "1738799",
    "end": "1745200"
  },
  {
    "text": "interesting it just calls this constructor here's the constructor it just sets fields uh in fact again if i can",
    "start": "1745200",
    "end": "1750799"
  },
  {
    "text": "i can add a field here as well [Applause] yep you'll see the",
    "start": "1750799",
    "end": "1758799"
  },
  {
    "text": "the new field is here as well so again all fields get generated into this but so this",
    "start": "1758799",
    "end": "1765679"
  },
  {
    "text": "what this means is that there is a a way the compiler trusts to clone a record and as soon as it",
    "start": "1765679",
    "end": "1773520"
  },
  {
    "text": "knows well okay if i can make a faithful copy and that means i can set some properties",
    "start": "1773520",
    "end": "1780080"
  },
  {
    "text": "and that means i can sort of maintain immutability but allow for it's not really",
    "start": "1780080",
    "end": "1786399"
  },
  {
    "text": "modification because it's always copying but it allow for i guess deriving new instances and so",
    "start": "1786399",
    "end": "1791600"
  },
  {
    "text": "that's what with expressions do so the other thing with really",
    "start": "1791600",
    "end": "1797600"
  },
  {
    "text": "expressions are this is just i love this you can nest them and it makes for really expressive code so this is actually from my",
    "start": "1797600",
    "end": "1803679"
  },
  {
    "text": "train game it draws a bunch of stuff on the screen so i have a background and when you mouse over things i want to",
    "start": "1803679",
    "end": "1809679"
  },
  {
    "text": "hover them so i can define the hover background and saying hey the hover background's the same as the background it just has a",
    "start": "1809679",
    "end": "1815279"
  },
  {
    "text": "different color and so then whatever i do with the background i know hover background will sort of inherit it right it's not inheritance but you know",
    "start": "1815279",
    "end": "1821679"
  },
  {
    "text": "what i mean um and same thing with the colors right i want light blue but i want an alpha of 85 percent",
    "start": "1821679",
    "end": "1827279"
  },
  {
    "text": "um so it's really nice syntax once you get to use it with expressions are not exclusive to",
    "start": "1827279",
    "end": "1834799"
  },
  {
    "text": "records but they are exclusive to things the compiler knows it can copy so in c sharp nine",
    "start": "1834799",
    "end": "1840720"
  },
  {
    "start": "1840000",
    "end": "1927000"
  },
  {
    "text": "that means records and in c sharp ten that means record structs",
    "start": "1840720",
    "end": "1845760"
  },
  {
    "text": "in c sharp ten it's also going to be available on every struct which is pretty cool",
    "start": "1845760",
    "end": "1851120"
  },
  {
    "text": "so every structure you might have out there you can now use with expressions and anonymous types so anonymous types",
    "start": "1851120",
    "end": "1858000"
  },
  {
    "text": "is another one of these things where the compiler generates code since the compiler generates all of the code for",
    "start": "1858000",
    "end": "1863200"
  },
  {
    "text": "them it knows it can make a faithful copy if we look let me",
    "start": "1863200",
    "end": "1870080"
  },
  {
    "text": "make a new anonymous type quickly",
    "start": "1870080",
    "end": "1874880"
  },
  {
    "text": "the anonymous type here it is unspeakable names again right um the anonymous type doesn't have",
    "start": "1876240",
    "end": "1883919"
  },
  {
    "text": "anything interesting it has an equals method it has two string like there's nothing here to clone but because the compiler",
    "start": "1883919",
    "end": "1889600"
  },
  {
    "text": "generates well essentially all of this code but it generates this constructor the compiler is going to when user with",
    "start": "1889600",
    "end": "1896559"
  },
  {
    "text": "expression it'll just call the constructor of this type pass in all of the properties from the",
    "start": "1896559",
    "end": "1902559"
  },
  {
    "text": "existing one except for whatever you set on here unfortunately i can't demo this because",
    "start": "1902559",
    "end": "1908559"
  },
  {
    "text": "um this version uh t-rex i don't think sharp web",
    "start": "1908559",
    "end": "1915440"
  },
  {
    "text": "uh this version this branch is up-to-date and unfortunately the the master build of uh roston is currently failing",
    "start": "1915440",
    "end": "1921919"
  },
  {
    "text": "and um it's not my fault all right so that's with expressions",
    "start": "1921919",
    "end": "1927679"
  },
  {
    "start": "1927000",
    "end": "2124000"
  },
  {
    "text": "fully customizable so this is the last my last point uh we're doing well time uh they're",
    "start": "1928720",
    "end": "1934880"
  },
  {
    "text": "fully customizable and so i'm just gonna go back to here we've actually seen this already",
    "start": "1934880",
    "end": "1940480"
  },
  {
    "text": "uh and we've seen this in basically every demo i've done let me get rid of all",
    "start": "1940480",
    "end": "1945840"
  },
  {
    "text": "this stuff in fact here look i'm customizing a record um",
    "start": "1945840",
    "end": "1951278"
  },
  {
    "text": "that sometimes gets confused there we go what the compiler does is it wants to",
    "start": "1951760",
    "end": "1958399"
  },
  {
    "text": "generate a bunch of code for your record he wants to generate a property and",
    "start": "1958399",
    "end": "1965360"
  },
  {
    "text": "what it does is for everything it's going to generate it checks whether you have first so here it would want to generate this",
    "start": "1965360",
    "end": "1971519"
  },
  {
    "text": "numdos property sorry no it won't wait a minute now it wants to generate another property",
    "start": "1971519",
    "end": "1976960"
  },
  {
    "text": "but i got there first so it's not going to so if i comment out my property here's another",
    "start": "1976960",
    "end": "1983440"
  },
  {
    "text": "property we get if i don't comment out my property",
    "start": "1983440",
    "end": "1989360"
  },
  {
    "text": "but we still get it but this is mine now you can't tell because i've done it the same way but if i change this to a set",
    "start": "1989360",
    "end": "1996000"
  },
  {
    "text": "and now this number property has a set and so this is true of every part of a",
    "start": "1996000",
    "end": "2002080"
  },
  {
    "text": "record so if you want to change how a records tostring is done you can just",
    "start": "2002080",
    "end": "2010320"
  },
  {
    "text": "you can just do this and you can go whoops you see",
    "start": "2010720",
    "end": "2017200"
  },
  {
    "text": "and now when we look at the generated code for a record the two string method says return ndc so",
    "start": "2017200",
    "end": "2023039"
  },
  {
    "text": "you can take the bits of the record you want and if you want to change them then you just change them what this means is",
    "start": "2023039",
    "end": "2029760"
  },
  {
    "text": "you can take this equals method and you can put it here and you can",
    "start": "2029760",
    "end": "2036320"
  },
  {
    "text": "return false and now you don't have value equality anymore right",
    "start": "2036320",
    "end": "2041360"
  },
  {
    "text": "um and so this is i mean you probably wouldn't do that please don't right but this is where records again",
    "start": "2041360",
    "end": "2048878"
  },
  {
    "text": "they get kind of weird right a record could be a one line declaration that does everything for you or you could have a 3 000 line file that",
    "start": "2048879",
    "end": "2055760"
  },
  {
    "text": "has methods and properties and fields and whatever else any fields you define the compiler will put in your records method any",
    "start": "2055760",
    "end": "2061839"
  },
  {
    "text": "uh properties the backing fields are going right so you can customize as much as you like",
    "start": "2061839",
    "end": "2068079"
  },
  {
    "text": "and so that goes back to the question of you know when should i use a property",
    "start": "2068079",
    "end": "2074240"
  },
  {
    "text": "unit method well what is a record right a record is anything you like it can be immutable and some would argue",
    "start": "2074240",
    "end": "2080560"
  },
  {
    "text": "that it's immediate by default but it's also not necessarily it can be really simple to declare",
    "start": "2080560",
    "end": "2085599"
  },
  {
    "text": "or you can declare it in a really long verbose way it can have value semantics",
    "start": "2085599",
    "end": "2091358"
  },
  {
    "text": "or it cannot right so what i like about a record is that i get to look at how",
    "start": "2091359",
    "end": "2096398"
  },
  {
    "text": "the compiler team at microsoft who writes c sharp think a immutable class should be",
    "start": "2096399",
    "end": "2102880"
  },
  {
    "text": "written and so i get to look at the get hash code method and go what does this do how does this work",
    "start": "2102880",
    "end": "2108000"
  },
  {
    "text": "more importantly i get to not write a get hashcode method because i'm not smart enough and i don't want my dictionaries to break right",
    "start": "2108000",
    "end": "2114000"
  },
  {
    "text": "i get to take advantage of the things from a record that i want but not",
    "start": "2114000",
    "end": "2120800"
  },
  {
    "text": "get the things that i don't want on this though i strongly recommend if",
    "start": "2120800",
    "end": "2126800"
  },
  {
    "start": "2124000",
    "end": "2242000"
  },
  {
    "text": "you're going to do this that you uh invest in uh using sharp lab to uh",
    "start": "2126800",
    "end": "2134400"
  },
  {
    "text": "to have a look at what's going on i'll give you an example of why uh let's just make we're gonna make this",
    "start": "2134400",
    "end": "2141280"
  },
  {
    "text": "a record that's to have an x and a y",
    "start": "2141280",
    "end": "2146400"
  },
  {
    "text": "uh and we're going to i don't know let's just we'll define one property and we'll let the compiler define the other and we'll",
    "start": "2146400",
    "end": "2152960"
  },
  {
    "text": "try to correctly use a cursor so we have a we have a points got two",
    "start": "2152960",
    "end": "2159839"
  },
  {
    "text": "properties great i'm initializing it to one and two great so what should this output",
    "start": "2159839",
    "end": "2167200"
  },
  {
    "text": "you would think that it should output one and two and it's just building and it's going to be really slow oh",
    "start": "2167920",
    "end": "2173200"
  },
  {
    "text": "there it is but it outputs one and zero so why is that",
    "start": "2173200",
    "end": "2178640"
  },
  {
    "text": "so the danger of customizing is that the compiler might be doing things you don't know in",
    "start": "2178640",
    "end": "2184400"
  },
  {
    "text": "this case uh it's because i never set this property",
    "start": "2184400",
    "end": "2189759"
  },
  {
    "text": "now it's going to be one and two right so if you're going to customize it please",
    "start": "2189839",
    "end": "2195200"
  },
  {
    "text": "be careful but you can so it's kind of nice but it also you",
    "start": "2195200",
    "end": "2202800"
  },
  {
    "text": "know can be a trap um the compiler does tell you here there's a little green squiggle and it says uh that parameter y is unread so",
    "start": "2202800",
    "end": "2211119"
  },
  {
    "text": "that's nice um it just it means that the the you shouldn't",
    "start": "2211119",
    "end": "2216880"
  },
  {
    "text": "necessarily assume maybe that uh things are going to keep working the way you want which is",
    "start": "2216880",
    "end": "2222640"
  },
  {
    "text": "again that's you know that's why i said you can't tell a record is immutable well in this case here's a record with two properties you can't tell whether",
    "start": "2222640",
    "end": "2228160"
  },
  {
    "text": "the one is used or not and i can't set this so this record's just fundamentally broken this y",
    "start": "2228160",
    "end": "2233440"
  },
  {
    "text": "can never be anything but zero that's not a good thing um but anyway whoops hello you're still",
    "start": "2233440",
    "end": "2239839"
  },
  {
    "text": "on the screen anyway i guess so records can be anything",
    "start": "2239839",
    "end": "2245040"
  },
  {
    "text": "but what's sort of important is that you look that one level",
    "start": "2245040",
    "end": "2252560"
  },
  {
    "text": "that one level below what's going on and therefore you'll know what's going on",
    "start": "2252560",
    "end": "2259280"
  },
  {
    "text": "and but you can take those bits you can take the bits you want use them in the class use them to",
    "start": "2259280",
    "end": "2264320"
  },
  {
    "text": "instruct you know change your existing code maybe i don't know it's up to you um and with",
    "start": "2264320",
    "end": "2271200"
  },
  {
    "text": "that hopefully someone has some questions because i am done but i am pretty good for time",
    "start": "2271200",
    "end": "2279280"
  },
  {
    "text": "oh it's just me hello i have that's fascinating dave there's uh",
    "start": "2280400",
    "end": "2286480"
  },
  {
    "text": "a whole lot to learn about the the c-sharp compiler and and records there um and we do have some interesting",
    "start": "2286480",
    "end": "2292720"
  },
  {
    "text": "questions actually the first one comes from aaron powell",
    "start": "2292720",
    "end": "2297839"
  },
  {
    "text": "and he's asking when would i use an init property over a record",
    "start": "2297839",
    "end": "2302960"
  },
  {
    "start": "2299000",
    "end": "2636000"
  },
  {
    "text": "yeah i mean essentially this is up to which bits do you want if you only want",
    "start": "2302960",
    "end": "2308640"
  },
  {
    "text": "in it properties then you probably just want to use one and if you want unit properties and",
    "start": "2308640",
    "end": "2314160"
  },
  {
    "text": "some of the other stuff records provide then use records and my dog agrees",
    "start": "2314160",
    "end": "2321200"
  },
  {
    "text": "you um yeah it really just is a matter of i mean essentially write down the pros and cons and pick",
    "start": "2321359",
    "end": "2326640"
  },
  {
    "text": "which column has the more things and it's very much case by case so now that's fair cool so",
    "start": "2326640",
    "end": "2333680"
  },
  {
    "text": "the next question is from harry asking how does inheritance work with records that's that for me that's an interesting",
    "start": "2333680",
    "end": "2339440"
  },
  {
    "text": "question as well what do you think yeah so so inheritance is is uh it's",
    "start": "2339440",
    "end": "2345440"
  },
  {
    "text": "i didn't get into it because it makes the code well it doesn't make the code harder to understand but some of the features of records are",
    "start": "2345440",
    "end": "2352880"
  },
  {
    "text": "the way they are because of inherit so things like the clone method and things like if you noticed when there was a two-string method it called something",
    "start": "2352880",
    "end": "2359119"
  },
  {
    "text": "called print members that is there to support inheritance and so if i have a record that inherits from",
    "start": "2359119",
    "end": "2364560"
  },
  {
    "text": "another record then the two string of the outer one we'll call print members on itself and then print members on the",
    "start": "2364560",
    "end": "2370960"
  },
  {
    "text": "inner one not two string on the inner one so the output looks better so there's a bunch of things around like",
    "start": "2370960",
    "end": "2376720"
  },
  {
    "text": "yeah with clone especially like with immutability where they the code they generate is specifically",
    "start": "2376720",
    "end": "2382640"
  },
  {
    "text": "to handle inheritance so the answer to the question is it works totally fine um you can't inherit you can't inherit a",
    "start": "2382640",
    "end": "2390640"
  },
  {
    "text": "class from a record or a record from a class though well maybe you can arrest you always have to okay it's really strong",
    "start": "2390640",
    "end": "2396480"
  },
  {
    "text": "from a record yes but it's exclusive and again that's because of those immutability guarantees right if you",
    "start": "2396480",
    "end": "2401680"
  },
  {
    "text": "could inherit from a class then that base class could do anything you want so um the next question from graeme",
    "start": "2401680",
    "end": "2409839"
  },
  {
    "text": "greene i think you've already answered that question before uh can you get a property by reflection and set it",
    "start": "2409839",
    "end": "2415520"
  },
  {
    "text": "yeah that's the three issue none of this none of this stuff is really sort of run time um effect like there were yeah",
    "start": "2415520",
    "end": "2422079"
  },
  {
    "text": "there is a slight change to the runtime four records which is that is external in type but yeah at the end of the day these classes are just",
    "start": "2422079",
    "end": "2428560"
  },
  {
    "text": "plain old.net classes you can set properties but then that's also true with private setters and private fields and private properties so",
    "start": "2428560",
    "end": "2434640"
  },
  {
    "text": "that's sort of not you know that's not new right read only fields same thing reflection right yeah you can",
    "start": "2434640",
    "end": "2441280"
  },
  {
    "text": "do what you want but i think you know in some ways use records because you sort of would prefer",
    "start": "2441280",
    "end": "2447520"
  },
  {
    "text": "the generated code it's like you said uh or showed the one benchmark it's a lot more optimal",
    "start": "2447520",
    "end": "2452560"
  },
  {
    "text": "to use the generated code it's smarter you know it's real code",
    "start": "2452560",
    "end": "2457920"
  },
  {
    "text": "cool so that sort of segues in the next question when we combine records with the width keyword",
    "start": "2458960",
    "end": "2466640"
  },
  {
    "text": "um and if you have a complex record for instance it has a dictionary or an i list a collection",
    "start": "2466640",
    "end": "2473839"
  },
  {
    "text": "and and you then with that add another value to that record does that complicated type or",
    "start": "2473839",
    "end": "2481040"
  },
  {
    "text": "complex type get cloned exactly correctly yeah so this is this is uh yes",
    "start": "2481040",
    "end": "2489440"
  },
  {
    "text": "sorry no it doesn't um this is where records get uh a little bit hairy and in fact so",
    "start": "2489440",
    "end": "2495119"
  },
  {
    "text": "destruct right um there's no deep cloning ability like there's nothing baked",
    "start": "2495119",
    "end": "2501200"
  },
  {
    "text": "into.net right there if there was the compiler wouldn't have had to generate that clone method so there is no way to know",
    "start": "2501200",
    "end": "2509520"
  },
  {
    "text": "essentially know how to clone a dictionary right we can say i know how to clone the dictionary because we understand what the dictionary that's in",
    "start": "2509520",
    "end": "2514880"
  },
  {
    "text": "the framework happens to do but there's no guarantees you know someone else could write a dictionary that does something different",
    "start": "2514880",
    "end": "2519920"
  },
  {
    "text": "so no you're not going to get a deep clone you're not going to get an exact copy like that so you know you essentially",
    "start": "2519920",
    "end": "2527040"
  },
  {
    "text": "are copying a pointer to the same dictionary across to the new instance so you do need to be careful of",
    "start": "2527040",
    "end": "2532560"
  },
  {
    "text": "that you know you can't get immutability out of mutable things um that's you know that's just life",
    "start": "2532560",
    "end": "2539599"
  },
  {
    "text": "essentially uh this isn't this isn't gonna reinvent the world um so you do have to be a little bit",
    "start": "2539599",
    "end": "2544880"
  },
  {
    "text": "careful yeah i wouldn't go i wouldn't suggest going and changing all of your classes to records just because you want to",
    "start": "2544880",
    "end": "2550560"
  },
  {
    "text": "you know i don't know i don't know why you would anyway but uh you're probably um but yeah so you do need to be a",
    "start": "2550560",
    "end": "2556240"
  },
  {
    "text": "little bit careful um they are i mean the value equality thing is",
    "start": "2556240",
    "end": "2562839"
  },
  {
    "text": "it's you know what is the value of a dictionary right about when you compare two dictionaries",
    "start": "2562839",
    "end": "2567920"
  },
  {
    "text": "it doesn't compare every element it doesn't i think and i think as dot net developers we sort of understand that that",
    "start": "2567920",
    "end": "2573520"
  },
  {
    "text": "that's different and so when you think about well how would that work with value quality well the answer is it doesn't",
    "start": "2573520",
    "end": "2578560"
  },
  {
    "text": "right which i think makes sense but maybe so to so give a recommendation is if you",
    "start": "2578560",
    "end": "2584480"
  },
  {
    "text": "had a record uh with an array for instance just a simple array or something very basic",
    "start": "2584480",
    "end": "2590560"
  },
  {
    "text": "rather than a dictionary that cloning would be more guaranteed or more",
    "start": "2590560",
    "end": "2595680"
  },
  {
    "text": "you know correct yeah definitely if you i mean so this is sort of not i guess not",
    "start": "2595680",
    "end": "2600800"
  },
  {
    "text": "relevant to records really at all but essentially if you're going for immutable immutability everything has to be immutable from the",
    "start": "2600800",
    "end": "2607200"
  },
  {
    "text": "ground up like you just and and you certainly can achieve immutability without records like the",
    "start": "2607200",
    "end": "2612319"
  },
  {
    "text": "internet accessor helps but i mean you can do it traditional ways right with constructors and private",
    "start": "2612319",
    "end": "2617680"
  },
  {
    "text": "setters you don't get a with expression but you can make with methods that do the same thing",
    "start": "2617680",
    "end": "2623119"
  },
  {
    "text": "cool that's fascinating david um thank you very much i think we've all",
    "start": "2623119",
    "end": "2629599"
  },
  {
    "text": "got a fair bit to take away and learn from your talk so thank you very much",
    "start": "2629599",
    "end": "2638559"
  }
]