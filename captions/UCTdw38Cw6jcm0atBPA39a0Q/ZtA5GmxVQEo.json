[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "good morning Copenhagen and welcome to NDC my name is Damian and I'm running a",
    "start": "3830",
    "end": "12840"
  },
  {
    "text": "small london-based consultancy helping our clients get after speed with modern",
    "start": "12840",
    "end": "20100"
  },
  {
    "text": "trends in web development we pretty much do all things all things web if you want",
    "start": "20100",
    "end": "28650"
  },
  {
    "start": "27000",
    "end": "199000"
  },
  {
    "text": "to get in touch with me you can do that via email or you can also follow me on twitter if emails to person if you",
    "start": "28650",
    "end": "37409"
  },
  {
    "text": "actually check my Twitter profile it will appear that I never tweet anything",
    "start": "37409",
    "end": "43710"
  },
  {
    "text": "because that doesn't seem to be any any tweets but that's actually not not true because I'm Serbian originally and",
    "start": "43710",
    "end": "53180"
  },
  {
    "text": "Serbian people aren't scared of anything apart from three things the draft",
    "start": "53180",
    "end": "60320"
  },
  {
    "text": "uniformed people and the big brother so every now and then every periodically I",
    "start": "60320",
    "end": "67170"
  },
  {
    "text": "always delete all of my tweets from my Twitter account so my followers only have like a sort of limited window of",
    "start": "67170",
    "end": "73590"
  },
  {
    "text": "opportunity to kind of see my tweets and the stuff that I stuff that I retweet",
    "start": "73590",
    "end": "79100"
  },
  {
    "text": "which is actually quite interesting because if you go on my Twitter page you",
    "start": "79100",
    "end": "86130"
  },
  {
    "text": "get to see this can anyone spot the problem maybe here maybe maybe the font",
    "start": "86130",
    "end": "92399"
  },
  {
    "text": "is too small but there is something weird on my Twitter profile anyone with",
    "start": "92399",
    "end": "98880"
  },
  {
    "text": "a good good eyes I can see a problem",
    "start": "98880",
    "end": "105078"
  },
  {
    "text": "No uh okay what's the problem",
    "start": "107350",
    "end": "113710"
  },
  {
    "text": "okay but there aren't any yes exactly okay so basically it says that I have",
    "start": "113710",
    "end": "118939"
  },
  {
    "text": "seven tweets all together but there aren't any and apart for me being Serbia",
    "start": "118939",
    "end": "125690"
  },
  {
    "text": "I'm also suffering from heavy OCPD so",
    "start": "125690",
    "end": "132650"
  },
  {
    "text": "I'm really annoyed by this and then I googled for it and found out that it is",
    "start": "132650",
    "end": "138530"
  },
  {
    "text": "actually by design basically they say if",
    "start": "138530",
    "end": "143630"
  },
  {
    "text": "you ever deleted a bunch of tweets your tweet counter might not be correct",
    "start": "143630",
    "end": "148870"
  },
  {
    "text": "and that really annoyed me and because they said you can get in touch with our",
    "start": "148870",
    "end": "153920"
  },
  {
    "text": "customer service representative and they'll be able to fix the problem for you which I did two years ago and they",
    "start": "153920",
    "end": "161209"
  },
  {
    "text": "still haven't come back to me so I still have these seven phantom treats on on my account and I really find it absolutely",
    "start": "161209",
    "end": "170959"
  },
  {
    "text": "fascinating that in 2019 ad we have all",
    "start": "170959",
    "end": "178040"
  },
  {
    "text": "these clouds formation templates and communities and docker containers and",
    "start": "178040",
    "end": "183650"
  },
  {
    "text": "web scale stuff MongoDB and the computers cannot count correctly from",
    "start": "183650",
    "end": "189769"
  },
  {
    "text": "zero to zero there is absolutely fascinating but I don't actually think",
    "start": "189769",
    "end": "198049"
  },
  {
    "text": "that that's unexpected i think i think that that's actually perfectly normal",
    "start": "198049",
    "end": "204859"
  },
  {
    "text": "thing in in sort of today's day and age and it's all to do with what is called a",
    "start": "204859",
    "end": "210709"
  },
  {
    "text": "climax design climate design theory misses from a book by john cole called the system's bible it's actually a",
    "start": "210709",
    "end": "216920"
  },
  {
    "text": "really interesting book - it's very short book I really like short books so you can read it in like a couple of days",
    "start": "216920",
    "end": "223090"
  },
  {
    "text": "and one of the things that he says in this book is that a large system produced by expanding the dimensions of",
    "start": "223090",
    "end": "230239"
  },
  {
    "text": "a smaller system does not behave like the smaller system so basically if you",
    "start": "230239",
    "end": "235730"
  },
  {
    "text": "take a reasonably sized system and then just make it bigger the system just stops behaving as they",
    "start": "235730",
    "end": "242840"
  },
  {
    "text": "as the original one I think just don't scale systems normal systems in nature just do not scale that way and I'll give",
    "start": "242840",
    "end": "254600"
  },
  {
    "start": "252000",
    "end": "290000"
  },
  {
    "text": "you a couple of income for example so the first one in my favorite one is about the space vehicle preparation shed",
    "start": "254600",
    "end": "261500"
  },
  {
    "text": "quite like the name shed okay which turns out to be the largest man-made",
    "start": "261500",
    "end": "267410"
  },
  {
    "text": "building in the world and its only purpose in life is to sort of protect the space rockets from the elements but",
    "start": "267410",
    "end": "275090"
  },
  {
    "text": "it turns out that the building is so large that it has its own climate so it has like clouds and and raining them so",
    "start": "275090",
    "end": "282740"
  },
  {
    "text": "it basically pellets the Rockets with storms of its own even though it's designed to protect them from from the",
    "start": "282740",
    "end": "288350"
  },
  {
    "text": "weather another one is about this ocean",
    "start": "288350",
    "end": "293870"
  },
  {
    "start": "290000",
    "end": "319000"
  },
  {
    "text": "liner the queen elizabeth ii which is the largest ocean liner ever ever built",
    "start": "293870",
    "end": "300890"
  },
  {
    "text": "and for the purpose of safety and reliability it has three separate",
    "start": "300890",
    "end": "308930"
  },
  {
    "text": "boilers and on the recent cruise in perfect weather conditions and calm sea",
    "start": "308930",
    "end": "314120"
  },
  {
    "text": "all three of them failed simultaneously and the last one is about this largest",
    "start": "314120",
    "end": "323360"
  },
  {
    "start": "319000",
    "end": "365000"
  },
  {
    "text": "telescope the optical telescope in in a world it's the two hundred and thirty",
    "start": "323360",
    "end": "329270"
  },
  {
    "text": "inches got but this two hundred and thirty interests reflector a massive massive mirror so that you can focus",
    "start": "329270",
    "end": "338120"
  },
  {
    "text": "things really really clearly but the problem is it doesn't it takes a really",
    "start": "338120",
    "end": "343250"
  },
  {
    "text": "long time to leave the thermal equilibrium basically to settle due to",
    "start": "343250",
    "end": "349280"
  },
  {
    "text": "the thermal expansion and contraction and by the time it reaches the equilibrium the night is over so",
    "start": "349280",
    "end": "355370"
  },
  {
    "text": "basically you cannot you cannot use it is so large that it cannot be used at all because it never reaches the thermal",
    "start": "355370",
    "end": "361250"
  },
  {
    "text": "equilibrium and",
    "start": "361250",
    "end": "367210"
  },
  {
    "start": "365000",
    "end": "551000"
  },
  {
    "text": "things also work the same way the other",
    "start": "367210",
    "end": "373009"
  },
  {
    "text": "way around so if you start making things smaller and smaller you also hit a",
    "start": "373009",
    "end": "381199"
  },
  {
    "text": "different kind of problems because the systems don't scale that way either if you have some obstructions that work on",
    "start": "381199",
    "end": "387080"
  },
  {
    "text": "scale X they don't really work well on scale scale 1000 time X and also X",
    "start": "387080",
    "end": "392330"
  },
  {
    "text": "divided by 1000 and there's this really amazing talk I think it was actually",
    "start": "392330",
    "end": "399819"
  },
  {
    "text": "1959 by Richard Feynman and it was it was actually a lecture a public lecture",
    "start": "399819",
    "end": "406669"
  },
  {
    "text": "and it was called this plenty of room at the bottom and at the time it didn't",
    "start": "406669",
    "end": "414080"
  },
  {
    "text": "kind of raise any interest like people weren't really fascinated by by that but",
    "start": "414080",
    "end": "419870"
  },
  {
    "text": "I urge you to watch the the the the lecture it's absolutely mind-blowing how",
    "start": "419870",
    "end": "426009"
  },
  {
    "text": "clever the guy was and and the idea is that that that he had and basically the",
    "start": "426009",
    "end": "431180"
  },
  {
    "text": "whole talk revolves around trying to make smaller and smaller machines I",
    "start": "431180",
    "end": "436669"
  },
  {
    "text": "don't know if you ever used pantograph when you were kids but those were basically the machines where you could",
    "start": "436669",
    "end": "441969"
  },
  {
    "text": "paint over a certain picture and then set the scale and then it would make the picture you know twice as big or half",
    "start": "441969",
    "end": "448190"
  },
  {
    "text": "half the size of the original one and and so on so basically his idea was to",
    "start": "448190",
    "end": "453440"
  },
  {
    "text": "build the human hand at like half the scale and then he used these to build",
    "start": "453440",
    "end": "459319"
  },
  {
    "text": "even smaller hands and then use these to build even smaller ones and so on all",
    "start": "459319",
    "end": "464900"
  },
  {
    "text": "the way to sort of microscopic microscopic level so rather than kind of using chemistry to create and then synthesize small",
    "start": "464900",
    "end": "473150"
  },
  {
    "text": "things use some sort of machinery that just is recursively built to be smaller",
    "start": "473150",
    "end": "478520"
  },
  {
    "text": "and smaller and then he sort of predicted that there would be some problems if you try to do this and he",
    "start": "478520",
    "end": "486169"
  },
  {
    "text": "says as the sizes got smaller one would have to redesign some tools because the",
    "start": "486169",
    "end": "491630"
  },
  {
    "text": "relative strengths of various forces would change although gravity would become unimportant surface tension will",
    "start": "491630",
    "end": "497630"
  },
  {
    "text": "become more important so on different scales different forces come",
    "start": "497630",
    "end": "503250"
  },
  {
    "text": "to play like when you have the macroscale gravity is really powerful force but on the microscopic level you",
    "start": "503250",
    "end": "509520"
  },
  {
    "text": "can completely neglect neglect neglect the gravity so you know if your project",
    "start": "509520",
    "end": "514530"
  },
  {
    "text": "manager ever comes back to you and says oh yes yesterday I watch this really cool documentary about the gravity and",
    "start": "514530",
    "end": "520919"
  },
  {
    "text": "the planets and that's actually amazing like they're never late they always have",
    "start": "520919",
    "end": "526560"
  },
  {
    "text": "really predictable trajectories and everything just runs like like the",
    "start": "526560",
    "end": "531630"
  },
  {
    "text": "clockwork there's no probability involved there's no chance everything is really really deterministic and",
    "start": "531630",
    "end": "536940"
  },
  {
    "text": "determine like why can't we have that unlike microscopic scale why can't we have our quantum devices working like",
    "start": "536940",
    "end": "542580"
  },
  {
    "text": "that well you can't because these forces just don't come into play on such small",
    "start": "542580",
    "end": "547620"
  },
  {
    "text": "scales so and this is actually really",
    "start": "547620",
    "end": "555200"
  },
  {
    "start": "551000",
    "end": "752000"
  },
  {
    "text": "interesting because if we go back to the sort of very beginnings of the general-purpose computing and and the",
    "start": "555200",
    "end": "563280"
  },
  {
    "text": "phone Neumann architecture we'll see",
    "start": "563280",
    "end": "569400"
  },
  {
    "text": "that initially we had some physical constraints about the size of the system",
    "start": "569400",
    "end": "576780"
  },
  {
    "text": "that were capable of of building and and that sort of also implied the size of",
    "start": "576780",
    "end": "581820"
  },
  {
    "text": "the problems that we could solve and the size of the programs that we could write and we could we could build so for",
    "start": "581820",
    "end": "587310"
  },
  {
    "text": "example the very first general-purpose computer programmable computer called ENIAC had 20,000 vacuum tubes and by",
    "start": "587310",
    "end": "598170"
  },
  {
    "text": "design a few of them were always broken like when you have 20,000 of them a few",
    "start": "598170",
    "end": "606089"
  },
  {
    "text": "of them would just be broken by design all the time like three or five or ten or however many and then one of the",
    "start": "606089",
    "end": "613620"
  },
  {
    "text": "really important problems at the time was whether it's possible or not to",
    "start": "613620",
    "end": "622230"
  },
  {
    "text": "design a reliable system from unreliable components but you had these unreliable",
    "start": "622230",
    "end": "630420"
  },
  {
    "text": "components like vacuum tubes but is there a way to kind of clever combine them in such a way so that even",
    "start": "630420",
    "end": "636329"
  },
  {
    "text": "though they're individually unreliable that the system when you build becomes a",
    "start": "636329",
    "end": "641910"
  },
  {
    "text": "reliable system and this guy John for Norman was actually real name was Janos",
    "start": "641910",
    "end": "650220"
  },
  {
    "text": "Liars Newman or Norman Janos liar because he was Austrian or",
    "start": "650220",
    "end": "655230"
  },
  {
    "text": "austro-hungarian he sort of mathematically proved that this thing is",
    "start": "655230",
    "end": "662220"
  },
  {
    "text": "possible so even with unreliable components you can still make make",
    "start": "662220",
    "end": "668459"
  },
  {
    "text": "reliable systems but then at some point after that transistors were invented and",
    "start": "668459",
    "end": "673980"
  },
  {
    "text": "then this problem has just gone away there was no need for designing systems",
    "start": "673980",
    "end": "680100"
  },
  {
    "text": "in such a way because the components were inherently reliable which is",
    "start": "680100",
    "end": "686759"
  },
  {
    "text": "actually really interesting from today's perspective because whatever was all is",
    "start": "686759",
    "end": "694019"
  },
  {
    "text": "now new and whatever is new is now old again so now we have these clouds we",
    "start": "694019",
    "end": "700139"
  },
  {
    "text": "have those general-purpose clouding cloud infrastructure that is composed of",
    "start": "700139",
    "end": "706319"
  },
  {
    "text": "unreliable components like each of the machines individual machines in the cloud might go up and down at any point",
    "start": "706319",
    "end": "713100"
  },
  {
    "text": "in time and we really don't have a control over that and when that happens but we're still trying to design and",
    "start": "713100",
    "end": "720600"
  },
  {
    "text": "build reliable systems around that around that constraint so even though this art of you know making reliable",
    "start": "720600",
    "end": "727110"
  },
  {
    "text": "things of and unreliable components there was a long period of time and that",
    "start": "727110",
    "end": "732269"
  },
  {
    "text": "was not needed that obviously is becoming more and more important in",
    "start": "732269",
    "end": "737579"
  },
  {
    "text": "recent years and it's same with like functional programming like function program was of sort of under on the",
    "start": "737579",
    "end": "743970"
  },
  {
    "text": "margins of computing Sciences in it and then studies but it's becoming more and",
    "start": "743970",
    "end": "749819"
  },
  {
    "text": "more fashionable in recent in recent yes",
    "start": "749819",
    "end": "756709"
  },
  {
    "start": "752000",
    "end": "782000"
  },
  {
    "text": "so I really like kind of put things in perspective and really like history and",
    "start": "756709",
    "end": "761910"
  },
  {
    "text": "sort of anniversaries and you know 20",
    "start": "761910",
    "end": "767760"
  },
  {
    "text": "19 is actually a brilliant year for anniversaries I'm really blessed that today's is is 2019 because there's so",
    "start": "767760",
    "end": "774930"
  },
  {
    "text": "many important anniversaries this year and in my opinion it is actually 50",
    "start": "774930",
    "end": "784320"
  },
  {
    "start": "782000",
    "end": "832000"
  },
  {
    "text": "years ago in 1969 that was I think one of the most important years in the",
    "start": "784320",
    "end": "790290"
  },
  {
    "text": "history of human kind in history human civilization can you or it may be named",
    "start": "790290",
    "end": "797660"
  },
  {
    "text": "one of the things that happen in 1969 I guess you're too young but maybe maybe",
    "start": "797660",
    "end": "804660"
  },
  {
    "text": "one big thing no okay Apollo 11 the moon",
    "start": "804660",
    "end": "816540"
  },
  {
    "text": "landing yes definitely so basically that's the kind of ultimate accomplishment in the human exploration",
    "start": "816540",
    "end": "823320"
  },
  {
    "text": "it's the very first time that a human species has set foot on a thing that's",
    "start": "823320",
    "end": "830040"
  },
  {
    "text": "not earth yes another important thing",
    "start": "830040",
    "end": "836520"
  },
  {
    "start": "832000",
    "end": "900000"
  },
  {
    "text": "that happened in 1969 is also the very first ARPANET link was established in",
    "start": "836520",
    "end": "841830"
  },
  {
    "text": "our politics like the precursor of of today's today's Internet and it's absolutely mind-boggling that today some",
    "start": "841830",
    "end": "851190"
  },
  {
    "text": "child in Africa might have access to more information then I don't know the president of the",
    "start": "851190",
    "end": "858090"
  },
  {
    "text": "most powerful country in the world 30 years ago Apollo 11 and discovery and",
    "start": "858090",
    "end": "867570"
  },
  {
    "text": "also some kind of freedoms and social political things like you know Woodstock",
    "start": "867570",
    "end": "873720"
  },
  {
    "text": "Summer of Love and of the 60s if you into music I think Beatles released",
    "start": "873720",
    "end": "879270"
  },
  {
    "text": "their all the last studio album they are be Road which i think is the best Beatles album and they also had the last",
    "start": "879270",
    "end": "886050"
  },
  {
    "text": "public performance even the football palace quote that a thousandth goal of his of his career as well",
    "start": "886050",
    "end": "894589"
  },
  {
    "text": "but it's not actually 1969 that that is",
    "start": "894800",
    "end": "900800"
  },
  {
    "start": "900000",
    "end": "976000"
  },
  {
    "text": "gonna be important for me it's gonna be the 1869 instead and it's in 1869 yeah",
    "start": "900800",
    "end": "909800"
  },
  {
    "text": "exactly approximately 150 years ago that dimitri van richmond the left released",
    "start": "909800",
    "end": "917439"
  },
  {
    "text": "the very first version of the periodic table of elements it didn't look like today's today's money was actually",
    "start": "917439",
    "end": "923779"
  },
  {
    "text": "rotated by 90 degrees so you probably wouldn't recognize it as as such but i",
    "start": "923779",
    "end": "930110"
  },
  {
    "text": "think this was sort of a monumental accomplishment and a monumental",
    "start": "930110",
    "end": "938509"
  },
  {
    "text": "monumental achievement so the same way in you know 100 years later the kind of",
    "start": "938509",
    "end": "945529"
  },
  {
    "text": "three three things converged into into one like the the kind of age of",
    "start": "945529",
    "end": "951049"
  },
  {
    "text": "discovery the age of communication so we're kind of closer together and communicate better and all these those civil liberties in 1869 we finally kind",
    "start": "951049",
    "end": "961670"
  },
  {
    "text": "of got a grip on what the stuff around us is is made from this is like the",
    "start": "961670",
    "end": "967939"
  },
  {
    "text": "breakthrough year for for chemistry when I was a student and I really enjoyed",
    "start": "967939",
    "end": "974809"
  },
  {
    "text": "enjoyed chemistry but later on I really learned to appreciate especially the",
    "start": "974809",
    "end": "980420"
  },
  {
    "start": "976000",
    "end": "1105000"
  },
  {
    "text": "chemistry from that from that era because I think the guys that did chemistry had at that time were the sort",
    "start": "980420",
    "end": "985579"
  },
  {
    "text": "of ultimate developers ultimate debuggers they were capable of",
    "start": "985579",
    "end": "990699"
  },
  {
    "text": "deciphering the secrets of the microscopic world by running experiments",
    "start": "990699",
    "end": "997279"
  },
  {
    "text": "and using really really primitive tools so chemistry was just sort of a window",
    "start": "997279",
    "end": "1003699"
  },
  {
    "text": "into all this intricate behavior of the quantum quantum mechanics and they",
    "start": "1003699",
    "end": "1009399"
  },
  {
    "text": "managed to work out the fine structure of the of the stuff that surrounds us by",
    "start": "1009399",
    "end": "1016110"
  },
  {
    "text": "using very primitive twelve tools and kind of running a limited set set of experiments which is literally what sort",
    "start": "1016110",
    "end": "1023019"
  },
  {
    "text": "of black box debugging is all about okay have a system you put some inputs here",
    "start": "1023019",
    "end": "1028550"
  },
  {
    "text": "you observe some output you have no idea about the mechanics of what's happened happening inside the system but by",
    "start": "1028550",
    "end": "1035689"
  },
  {
    "text": "running sufficient number of those experiments you can actually pretty clerk get a pretty close idea of you",
    "start": "1035690",
    "end": "1042050"
  },
  {
    "text": "know how the system works and what is it actually composed of so what's all these",
    "start": "1042050",
    "end": "1052190"
  },
  {
    "text": "sort of chemistry stuff about well it's about what stuff is made of like what",
    "start": "1052190",
    "end": "1057830"
  },
  {
    "text": "are these particles these discrete particles that consist the matter around",
    "start": "1057830",
    "end": "1063470"
  },
  {
    "text": "us what are their properties like they managed to sort of make a catalog of all the chemical elements that exist and and",
    "start": "1063470",
    "end": "1070640"
  },
  {
    "text": "and list their their properties and then that allows you to build new stuff in a",
    "start": "1070640",
    "end": "1076310"
  },
  {
    "text": "predictable way because if you understand the properties of these elements then you no longer have to have blind experiments and let's try and mix",
    "start": "1076310",
    "end": "1082520"
  },
  {
    "text": "this with that you can make some predictions of what happens if I combine a with B or B with C and or C with D",
    "start": "1082520",
    "end": "1090460"
  },
  {
    "text": "which is sort of very very similar to computer programming and then we can ask",
    "start": "1090460",
    "end": "1097340"
  },
  {
    "text": "a sort of similar similar question like what are computer programs made of like if we look into a typical JavaScript",
    "start": "1097340",
    "end": "1104800"
  },
  {
    "text": "program we see lots of different things",
    "start": "1104800",
    "end": "1110320"
  },
  {
    "start": "1105000",
    "end": "1175000"
  },
  {
    "text": "we see what we call values things like numbers boolean's strings",
    "start": "1110320",
    "end": "1116210"
  },
  {
    "text": "objects arrays and functions we also see",
    "start": "1116210",
    "end": "1122120"
  },
  {
    "text": "different operators like plus minus multiplication and so on we see the flow",
    "start": "1122120",
    "end": "1127400"
  },
  {
    "text": "control statements like for loops if statements and switch statements modern",
    "start": "1127400",
    "end": "1133160"
  },
  {
    "text": "JavaScript also has classes so there those are some other artifacts that we can use and and and many more and then",
    "start": "1133160",
    "end": "1140810"
  },
  {
    "text": "the question is do all these things overlap a little bit like would it be",
    "start": "1140810",
    "end": "1146960"
  },
  {
    "text": "possible to accomplish the same type of computations basically perform the same",
    "start": "1146960",
    "end": "1154550"
  },
  {
    "text": "type of computations as you can do with all these artifacts but by using a much smaller set of features",
    "start": "1154550",
    "end": "1161940"
  },
  {
    "text": "like what is what are those discrete",
    "start": "1161940",
    "end": "1167000"
  },
  {
    "text": "elementary particles that we can use to compose any kind of JavaScript program",
    "start": "1167000",
    "end": "1172230"
  },
  {
    "text": "and make any sort of computation and then obviously because this is not real",
    "start": "1172230",
    "end": "1182820"
  },
  {
    "start": "1175000",
    "end": "1392000"
  },
  {
    "text": "world this is some make-believe imaginary think depending on who you ask",
    "start": "1182820",
    "end": "1188850"
  },
  {
    "text": "you might get different different answers so um some people will just be satisfied",
    "start": "1188850",
    "end": "1194460"
  },
  {
    "text": "by saying well it's all just ones and zeros all you need is this kind of sufficient stream of ones and zeros and",
    "start": "1194460",
    "end": "1201389"
  },
  {
    "text": "that can represent any program and any piece of information and any and any any",
    "start": "1201389",
    "end": "1207450"
  },
  {
    "text": "computation because that's what it ultimately comes comes down to the other",
    "start": "1207450",
    "end": "1215820"
  },
  {
    "text": "option is to use I'm gonna call it J's flip but it has much more colorful",
    "start": "1215820",
    "end": "1221730"
  },
  {
    "text": "colorful name a basic idea is that that you can reduce all of JavaScript to just",
    "start": "1221730",
    "end": "1228809"
  },
  {
    "text": "these six characters so any program that you can build in JavaScript you can actually implement just by using this",
    "start": "1228809",
    "end": "1235769"
  },
  {
    "text": "these six characters it is basically",
    "start": "1235769",
    "end": "1242460"
  },
  {
    "text": "something that you know one of those incredibly smart and annoying kids in a",
    "start": "1242460",
    "end": "1248009"
  },
  {
    "text": "classroom would would would come up with when you give him a task like this so it's abusing the kind of type inference",
    "start": "1248009",
    "end": "1258769"
  },
  {
    "text": "rules in JavaScript and the kind of quirks of operations and and and and and the fact that JavaScript is loosely",
    "start": "1258769",
    "end": "1264899"
  },
  {
    "text": "coupled coupled language loosely typed language I can actually show you a",
    "start": "1264899",
    "end": "1270629"
  },
  {
    "text": "little example of a program in let's",
    "start": "1270629",
    "end": "1276690"
  },
  {
    "text": "call it J's flip you probably cannot see this but this program is about hundred and twenty kilobytes long so there's 120",
    "start": "1276690",
    "end": "1285990"
  },
  {
    "text": "K of stuff like this so it's just a",
    "start": "1285990",
    "end": "1291539"
  },
  {
    "text": "repetition of these six symbols and hopefully if I take this and then paste",
    "start": "1291539",
    "end": "1297410"
  },
  {
    "text": "it in chrome dev tools and then run it",
    "start": "1297410",
    "end": "1304460"
  },
  {
    "text": "it's gonna take a while we got this",
    "start": "1304460",
    "end": "1314110"
  },
  {
    "text": "okay I'm gonna do it the other way Don I'm gonna make it bigger first and then paste it",
    "start": "1326810",
    "end": "1334870"
  },
  {
    "text": "okay so basically that was a fizzbuzz implementation in Jay s flip only by",
    "start": "1338549",
    "end": "1346600"
  },
  {
    "text": "using those six six characters you get this program that that you know Prince phase if it's divisible by three buzz if",
    "start": "1346600",
    "end": "1354100"
  },
  {
    "text": "it's divisible by five or fizzbuzz if it's divisible by by fifteen but that's",
    "start": "1354100",
    "end": "1360700"
  },
  {
    "text": "not really what what what I'm after I want I want something else because this",
    "start": "1360700",
    "end": "1371139"
  },
  {
    "text": "these primitives that they don't really scale well it's not something that you could use to build an application reason",
    "start": "1371139",
    "end": "1378970"
  },
  {
    "text": "about the application that that you're building it's basically just a gimmick to encode every JavaScript program using",
    "start": "1378970",
    "end": "1389649"
  },
  {
    "text": "those six six characters so to do that",
    "start": "1389649",
    "end": "1395109"
  },
  {
    "start": "1392000",
    "end": "1515000"
  },
  {
    "text": "let's let's look into values you already mentioned values as one of the primitives that we can use in in the",
    "start": "1395109",
    "end": "1402789"
  },
  {
    "text": "language so what what is a value what are values and what we can do with them so we can store values in constants or",
    "start": "1402789",
    "end": "1410590"
  },
  {
    "text": "in variables like like this so we have this string value which we can store",
    "start": "1410590",
    "end": "1416559"
  },
  {
    "text": "into this variable or constant called V we can also make values the values of",
    "start": "1416559",
    "end": "1424960"
  },
  {
    "text": "certain property of an object in in JavaScript so here we have an object and the reference to that object called",
    "start": "1424960",
    "end": "1430659"
  },
  {
    "text": "person stored into a variable and then we have this value being the value of a",
    "start": "1430659",
    "end": "1439119"
  },
  {
    "text": "property called the name of this base object so here we actually have two values one is the object and the other",
    "start": "1439119",
    "end": "1445419"
  },
  {
    "text": "one is this string value which is the value of a property called name of this of this object we can also store them in",
    "start": "1445419",
    "end": "1453460"
  },
  {
    "text": "a race so here we have an array and then one of the elements of this array is this string string value we can pass",
    "start": "1453460",
    "end": "1463840"
  },
  {
    "text": "them two functions so any kind of value that you have you can pass as a parameter to a function and then get",
    "start": "1463840",
    "end": "1471009"
  },
  {
    "text": "some sort of results is out back and finally we can return",
    "start": "1471009",
    "end": "1477220"
  },
  {
    "text": "values as the result of function applications or function invocation so",
    "start": "1477220",
    "end": "1482950"
  },
  {
    "text": "when you invoke a function that function can return return a value and what is",
    "start": "1482950",
    "end": "1490750"
  },
  {
    "text": "really important is that in JavaScript",
    "start": "1490750",
    "end": "1496650"
  },
  {
    "text": "functions are actually values and we can do with functions all these things that",
    "start": "1496650",
    "end": "1501700"
  },
  {
    "text": "we just seen that we can do with the with the string so basically there's a perfect symmetry between all the",
    "start": "1501700",
    "end": "1508150"
  },
  {
    "text": "different types of values whatever you can do with one you can do with the with the other as well there's no like special cases or special special",
    "start": "1508150",
    "end": "1515110"
  },
  {
    "start": "1515000",
    "end": "2177000"
  },
  {
    "text": "treatment so for example the only extra",
    "start": "1515110",
    "end": "1524050"
  },
  {
    "text": "thing that we can do with functions so this is what makes functions special is that we can apply them or we can invoke",
    "start": "1524050",
    "end": "1530770"
  },
  {
    "text": "them what we can call them however you you call this and for the purpose of",
    "start": "1530770",
    "end": "1536170"
  },
  {
    "text": "this abstraction functions are like boxes so function is just the black box",
    "start": "1536170",
    "end": "1542260"
  },
  {
    "text": "where you provide some inputs the function does something to those inputs and then return an output as a as a",
    "start": "1542260",
    "end": "1549340"
  },
  {
    "text": "result and you pass the input these parameters and you capture the result by capturing the return value of a of a",
    "start": "1549340",
    "end": "1556060"
  },
  {
    "text": "function and because functions are",
    "start": "1556060",
    "end": "1561540"
  },
  {
    "text": "values we call them that you say that in JavaScript they're first-class citizens",
    "start": "1561540",
    "end": "1567970"
  },
  {
    "text": "or first-class values because they're equivalent to all the other all the other values and if you kind of look",
    "start": "1567970",
    "end": "1575440"
  },
  {
    "text": "into this feature of the language a little bit and and sort of investigate you'll see that that's not an easy",
    "start": "1575440",
    "end": "1582250"
  },
  {
    "text": "problem to solve and that's why not every not all programming languages",
    "start": "1582250",
    "end": "1587520"
  },
  {
    "text": "support functions as first-class citizens because it's tricky to solve",
    "start": "1587520",
    "end": "1592810"
  },
  {
    "text": "the so-called fan art problem and the fan art problem is being able to pass functions as parameters to other",
    "start": "1592810",
    "end": "1599620"
  },
  {
    "text": "functions and return functions as results of other function other",
    "start": "1599620",
    "end": "1604810"
  },
  {
    "text": "functioning okay so let's just briefly go over function",
    "start": "1604810",
    "end": "1612610"
  },
  {
    "text": "is a value just to kind of build some intuition for this so the first thing that we said we can do with values is",
    "start": "1612610",
    "end": "1617950"
  },
  {
    "text": "store them in variables and we can do that with functions so here we have this anonymous function that adds two numbers",
    "start": "1617950",
    "end": "1624159"
  },
  {
    "text": "together and we store a reference to that function in this constant called a",
    "start": "1624159",
    "end": "1630779"
  },
  {
    "text": "we can also have functions as property values of an object so here we have this",
    "start": "1630779",
    "end": "1638500"
  },
  {
    "text": "object called person which is also a value and it has two properties one is",
    "start": "1638500",
    "end": "1643659"
  },
  {
    "text": "called name and the value of the property called name is miyamoto and it also has a property called get",
    "start": "1643659",
    "end": "1650200"
  },
  {
    "text": "name and the value of property get name is this anonymous function that returns this dot this dot name and effectively",
    "start": "1650200",
    "end": "1658390"
  },
  {
    "text": "that function becomes a method so purely",
    "start": "1658390",
    "end": "1664149"
  },
  {
    "text": "by functions being values and having the capability to store them as properties",
    "start": "1664149",
    "end": "1670750"
  },
  {
    "text": "of an object we sort of get the object oriented programming for for free",
    "start": "1670750",
    "end": "1676870"
  },
  {
    "text": "because we can just add methods to any object we want and then invoke them as methods and get the correct get the",
    "start": "1676870",
    "end": "1682899"
  },
  {
    "text": "correct behavior we can also store",
    "start": "1682899",
    "end": "1689679"
  },
  {
    "text": "functions as elements or elements of an",
    "start": "1689679",
    "end": "1694750"
  },
  {
    "text": "array so here we have this array called functions with three functions as its",
    "start": "1694750",
    "end": "1700659"
  },
  {
    "text": "elements and then we iterate over this array the same as we would iterate over",
    "start": "1700659",
    "end": "1706149"
  },
  {
    "text": "array with any other elements and then just invoke functions one by one",
    "start": "1706149",
    "end": "1715480"
  },
  {
    "text": "starting from the last one and then passing the result of that particular",
    "start": "1715480",
    "end": "1723220"
  },
  {
    "text": "function invocation as the input to the next to the next function can anyone",
    "start": "1723220",
    "end": "1728500"
  },
  {
    "text": "tell me what would be result after I run this",
    "start": "1728500",
    "end": "1733320"
  },
  {
    "text": "if I was to run this what would be the result",
    "start": "1735850",
    "end": "1741580"
  },
  {
    "text": "so it calls the last function first with 1000 as a parameter then captures that",
    "start": "1748059",
    "end": "1754419"
  },
  {
    "text": "result passes that to the one before captures that result and then passes that to the first function so what do I",
    "start": "1754419",
    "end": "1760330"
  },
  {
    "text": "get as a result",
    "start": "1760330",
    "end": "1763739"
  },
  {
    "text": "hello 2001 because if we start with a thousand two times thousand is 2000 plus",
    "start": "1765929",
    "end": "1772179"
  },
  {
    "text": "one 2001 and then we get hello 2000 2001 thank you okay and then we come to these",
    "start": "1772179",
    "end": "1782759"
  },
  {
    "text": "these last two so all the one all these ones so far are important and useful but",
    "start": "1782759",
    "end": "1791679"
  },
  {
    "text": "for now I'm just gonna park them on a side and because I'm not too interested in that what I'm really interested is is",
    "start": "1791679",
    "end": "1797289"
  },
  {
    "text": "this stuff one being able to pass function as a parameter to another",
    "start": "1797289",
    "end": "1803619"
  },
  {
    "text": "function so here we have two functions ones called set interval which is a",
    "start": "1803619",
    "end": "1810159"
  },
  {
    "text": "built-in function and then we pass this",
    "start": "1810159",
    "end": "1815619"
  },
  {
    "text": "function as a parameter to the set interval function the one that logs the",
    "start": "1815619",
    "end": "1822849"
  },
  {
    "text": "current time and if I was to run this",
    "start": "1822849",
    "end": "1829859"
  },
  {
    "text": "I'll see the current timestamp being logged once once every every second and",
    "start": "1829859",
    "end": "1840339"
  },
  {
    "text": "this is really interesting and really useful and really powerful idea because",
    "start": "1840339",
    "end": "1846969"
  },
  {
    "text": "if we think about functions as boxes it's some sort of black box that you",
    "start": "1846969",
    "end": "1852190"
  },
  {
    "text": "provide some inputs and then you get some outputs what this allows us to do",
    "start": "1852190",
    "end": "1857739"
  },
  {
    "text": "is to pass other boxes as inputs to",
    "start": "1857739",
    "end": "1863190"
  },
  {
    "text": "other boxes yeah so basically we can have boxes not working only on values as",
    "start": "1863190",
    "end": "1870700"
  },
  {
    "text": "we used to like strings and numbers and objects and whatnot but we can also have boxes working an operating on other",
    "start": "1870700",
    "end": "1878289"
  },
  {
    "text": "boxes working with other boxes and we can actually explore this idea a",
    "start": "1878289",
    "end": "1884559"
  },
  {
    "text": "little bit and look at something that you should all be very familiar with can",
    "start": "1884559",
    "end": "1895390"
  },
  {
    "text": "you see the phone use the font size okay yeah okay all right",
    "start": "1895390",
    "end": "1904440"
  },
  {
    "text": "so say we have an array of people or a list of people and then we have this",
    "start": "1905190",
    "end": "1912720"
  },
  {
    "text": "function called get names that takes an array of people and then returns another",
    "start": "1912720",
    "end": "1920110"
  },
  {
    "text": "array but only containing their names if I was to call this get names what would",
    "start": "1920110",
    "end": "1927520"
  },
  {
    "text": "I get as a result",
    "start": "1927520",
    "end": "1931679"
  },
  {
    "text": "well I get those three names because those are the names of these of these",
    "start": "1936660",
    "end": "1942340"
  },
  {
    "text": "three people so we start with an empty array and then we iterate over this array of of people and we just push",
    "start": "1942340",
    "end": "1950340"
  },
  {
    "text": "their name on to this result and then return this result at the at the end",
    "start": "1950340",
    "end": "1956040"
  },
  {
    "text": "okay we got yeah okay and we can",
    "start": "1956040",
    "end": "1961420"
  },
  {
    "text": "similarly we can have another sort of computation called pars where we give it an array of strings that should contain",
    "start": "1961420",
    "end": "1968260"
  },
  {
    "text": "numbers and we then parse these strings",
    "start": "1968260",
    "end": "1974590"
  },
  {
    "text": "into integers and then just return an array of integers instead so we started with an area of strings and we ended up",
    "start": "1974590",
    "end": "1980740"
  },
  {
    "text": "with an array of integers and if we sort of inspect these two computations the",
    "start": "1980740",
    "end": "1987130"
  },
  {
    "text": "get names and and tars will see that they're very similar to one another they",
    "start": "1987130",
    "end": "1994480"
  },
  {
    "text": "they sort of share a lot of a lot of structure but the difference is minuscule the only thing that's",
    "start": "1994480",
    "end": "1999790"
  },
  {
    "text": "different is basically what is it that we are pushing how do we encapsulate",
    "start": "1999790",
    "end": "2006990"
  },
  {
    "text": "this rule as to what we are pushing on to this this array here and this is a",
    "start": "2006990",
    "end": "2014910"
  },
  {
    "text": "place where we can use this feature that we can pass function as parameter to",
    "start": "2014910",
    "end": "2019950"
  },
  {
    "text": "other functions and then do something like like this so",
    "start": "2019950",
    "end": "2026210"
  },
  {
    "text": "we can start with an empty result and",
    "start": "2038000",
    "end": "2045760"
  },
  {
    "text": "then we can iterate like so and then we",
    "start": "2045760",
    "end": "2053690"
  },
  {
    "text": "can push",
    "start": "2053690",
    "end": "2056200"
  },
  {
    "text": "and then we return the result okay so now we have this box called",
    "start": "2065450",
    "end": "2071810"
  },
  {
    "text": "map but the box is configurable with",
    "start": "2071810",
    "end": "2077810"
  },
  {
    "text": "another box like when we if we want to use this map we need to pass another function as a as a parameter basically",
    "start": "2077810",
    "end": "2083810"
  },
  {
    "text": "the rule that specifies how do we transform the element of the original",
    "start": "2083810",
    "end": "2089179"
  },
  {
    "text": "array into the element of the resulting array and then we can implement these two functions in a much simpler way we",
    "start": "2089179",
    "end": "2097160"
  },
  {
    "text": "can say get names",
    "start": "2097160",
    "end": "2100990"
  },
  {
    "text": "and let's call this my map just not too",
    "start": "2108100",
    "end": "2112530"
  },
  {
    "text": "okay and we get exactly exactly the same exactly the same result because the",
    "start": "2126100",
    "end": "2133300"
  },
  {
    "text": "function that we've passed in as a parameter would always extract the name property of of this notice person",
    "start": "2133300",
    "end": "2140770"
  },
  {
    "text": "and similarly we can do the same thing with as parse so we can implement the parts - will we call these numbers",
    "start": "2140770",
    "end": "2152700"
  },
  {
    "text": "recalling inputs okay and we get exactly",
    "start": "2170460",
    "end": "2177549"
  },
  {
    "start": "2177000",
    "end": "2240000"
  },
  {
    "text": "exactly the same result so rather than having all this duplication floating",
    "start": "2177549",
    "end": "2182980"
  },
  {
    "text": "around we managed to create a reusable abstraction called my map or map as it",
    "start": "2182980",
    "end": "2189220"
  },
  {
    "text": "would have been called on a rate of prototype that allows us to map one",
    "start": "2189220",
    "end": "2195819"
  },
  {
    "text": "array onto another to transform all the elements of the original range and",
    "start": "2195819",
    "end": "2201039"
  },
  {
    "text": "package them into another into another array okay",
    "start": "2201039",
    "end": "2210779"
  },
  {
    "text": "and then we can do the similar thing here except that these two computations",
    "start": "2218510",
    "end": "2227000"
  },
  {
    "text": "are slightly different so here we don't",
    "start": "2227000",
    "end": "2232640"
  },
  {
    "text": "want to transform each and every element of the original array we want to only include some of the elements of these",
    "start": "2232640",
    "end": "2241460"
  },
  {
    "start": "2240000",
    "end": "2352000"
  },
  {
    "text": "arrays into the resulting array only the element that satisfied certain certain condition and we can do this by",
    "start": "2241460",
    "end": "2251060"
  },
  {
    "text": "implementing the filter method what you normally do so we can say array dot plus",
    "start": "2251060",
    "end": "2261290"
  },
  {
    "text": "v dot filter is a function that takes function is a parameter and then",
    "start": "2261290",
    "end": "2269800"
  },
  {
    "text": "and that's what well we need to check if when we invoke F against the current",
    "start": "2274420",
    "end": "2281710"
  },
  {
    "text": "element of the array returns through to your fault even if it isn't true T then we need to push that element onto the",
    "start": "2281710",
    "end": "2290950"
  },
  {
    "text": "resulting array and then we can say",
    "start": "2290950",
    "end": "2300029"
  },
  {
    "text": "let's do numbers",
    "start": "2300029",
    "end": "2303539"
  },
  {
    "text": "numbers",
    "start": "2307020",
    "end": "2310010"
  },
  {
    "text": "okay so we got we got exactly the same exactly the same is that what is here we",
    "start": "2327500",
    "end": "2332810"
  },
  {
    "text": "had all these all this looping logic that was very very repetitive and same as same as above we managed to make this",
    "start": "2332810",
    "end": "2340790"
  },
  {
    "text": "way shorter by implementing this filter method or my filter that just filters out the numbers that",
    "start": "2340790",
    "end": "2347540"
  },
  {
    "text": "are that are odd yeah but then how about",
    "start": "2347540",
    "end": "2358940"
  },
  {
    "start": "2352000",
    "end": "2707000"
  },
  {
    "text": "this I'm going to show you a few more computations that can also be simplified",
    "start": "2358940",
    "end": "2365660"
  },
  {
    "text": "and and sort of be duplicated so the first one is counting the sum of all the",
    "start": "2365660",
    "end": "2378980"
  },
  {
    "text": "numbers in an in a array so how do we do that well we start with zero then we",
    "start": "2378980",
    "end": "2385940"
  },
  {
    "text": "iterate through the array in there and just keep adding numbers up and then we end up with 30 as a as a result okay if",
    "start": "2385940",
    "end": "2394490"
  },
  {
    "text": "we want to compute the product of all the numbers then we the only thing that we need to change is the value that we",
    "start": "2394490",
    "end": "2400369"
  },
  {
    "text": "start with to one and change this rule",
    "start": "2400369",
    "end": "2405670"
  },
  {
    "text": "that specifies how do we combine the running results and the current element",
    "start": "2405670",
    "end": "2412369"
  },
  {
    "text": "to get the new value of the result so rather than adding them up we now need to multiply them together but apart from",
    "start": "2412369",
    "end": "2418609"
  },
  {
    "text": "that everything else is exactly exactly the same and we get whatever the result",
    "start": "2418609",
    "end": "2423950"
  },
  {
    "text": "is and we can do the same for min and Max yeah so mean starts with infinity as",
    "start": "2423950",
    "end": "2429680"
  },
  {
    "text": "the initial value and then it just computes math dot mean of the running result and the next element of the array",
    "start": "2429680",
    "end": "2437030"
  },
  {
    "text": "max starts with minus infinity as the initial value and computes math dot max",
    "start": "2437030",
    "end": "2442580"
  },
  {
    "text": "of the result and the current element of the right but again all these four",
    "start": "2442580",
    "end": "2448270"
  },
  {
    "text": "computations are very similar to one another that there's lots of duplication",
    "start": "2448270",
    "end": "2453680"
  },
  {
    "text": "happening around here so what we can do with this what can we do this well we",
    "start": "2453680",
    "end": "2459950"
  },
  {
    "text": "can build another abstraction and call it fold or reduce so we can say something like this you",
    "start": "2459950",
    "end": "2466080"
  },
  {
    "text": "can say well now I need a method called",
    "start": "2466080",
    "end": "2473220"
  },
  {
    "text": "reduced let's call it my reduce but",
    "start": "2473220",
    "end": "2479550"
  },
  {
    "text": "reduce would be slightly different it would actually take two parameters rather than one because we we need to",
    "start": "2479550",
    "end": "2486260"
  },
  {
    "text": "customize what the starting value of this accumulator is and what the rule is",
    "start": "2486260",
    "end": "2492960"
  },
  {
    "text": "for how we combine the running value with the current element of the array so",
    "start": "2492960",
    "end": "2498780"
  },
  {
    "text": "you're going to call this reducer sorry",
    "start": "2498780",
    "end": "2507530"
  },
  {
    "text": "and then we'll just put this looping",
    "start": "2512400",
    "end": "2518160"
  },
  {
    "text": "logic in in here and we can say we start",
    "start": "2518160",
    "end": "2529829"
  },
  {
    "text": "with zero and we iterate until the",
    "start": "2529829",
    "end": "2535410"
  },
  {
    "text": "length and then we just say accumulator equals reducer accumulator this I and we",
    "start": "2535410",
    "end": "2544410"
  },
  {
    "text": "just return accumulator is resolved so basically exactly the same thing as",
    "start": "2544410",
    "end": "2551069"
  },
  {
    "text": "we did up there the only difference is that is that we sort of parameterised the rule as to how we combine these two",
    "start": "2551069",
    "end": "2558509"
  },
  {
    "text": "values the running result and the current element of delay and what is the value that we start with and then we can",
    "start": "2558509",
    "end": "2567019"
  },
  {
    "text": "implement these functions in a much simpler way so for example some would be",
    "start": "2567019",
    "end": "2576890"
  },
  {
    "text": "something like this",
    "start": "2580579",
    "end": "2583869"
  },
  {
    "text": "I would recall these numbers we call them numbers",
    "start": "2585580",
    "end": "2591329"
  },
  {
    "text": "okay so you've got exactly the same result we got 30 same as we did same as",
    "start": "2595589",
    "end": "2600989"
  },
  {
    "text": "we did before because we parameterize this reduce function with these two",
    "start": "2600989",
    "end": "2608640"
  },
  {
    "text": "values initial value of zero because when we some things we need to start with zero and the rule that says the",
    "start": "2608640",
    "end": "2615180"
  },
  {
    "text": "next value of the accumulator is obtained by adding the running value of",
    "start": "2615180",
    "end": "2620549"
  },
  {
    "text": "the accumulator and the current element of this of this array and we can do the",
    "start": "2620549",
    "end": "2626729"
  },
  {
    "text": "same thing for product and min and Max all right let's let's do product and",
    "start": "2626729",
    "end": "2632359"
  },
  {
    "text": "mean and then we can stop",
    "start": "2632359",
    "end": "2636109"
  },
  {
    "text": "actually this is an interesting one so we can I'm gonna do this first",
    "start": "2659180",
    "end": "2664910"
  },
  {
    "text": "okay so we got one okay so this works the way we would we would want we have",
    "start": "2673740",
    "end": "2681099"
  },
  {
    "text": "the rule that does math dot mean accumulator and X and we start with infinity but is there a way for me to",
    "start": "2681099",
    "end": "2688749"
  },
  {
    "text": "simplify this do we make this bit less",
    "start": "2688749",
    "end": "2695559"
  },
  {
    "text": "cluttered because there is something here that is a bit pointless",
    "start": "2695559",
    "end": "2700588"
  },
  {
    "text": "okay let's let's let's make a little experiment I'm gonna take this function",
    "start": "2706210",
    "end": "2712290"
  },
  {
    "start": "2707000",
    "end": "3002000"
  },
  {
    "text": "because this is a really sort of important idea and it's one of the sort",
    "start": "2712290",
    "end": "2717400"
  },
  {
    "text": "of things that is really annoying when when when you see let's call this",
    "start": "2717400",
    "end": "2723640"
  },
  {
    "text": "function X X X okay so the function that we passed in as a parameter to reduce we",
    "start": "2723640",
    "end": "2730000"
  },
  {
    "text": "extracted it here and we call it X X X it's a function that takes two",
    "start": "2730000",
    "end": "2735040"
  },
  {
    "text": "parameters and cause math dot min with those two parameters okay if I call xxx",
    "start": "2735040",
    "end": "2743620"
  },
  {
    "text": "I don't know 1 2 3 45 what will I get as a result and if I call math dot min 1 2",
    "start": "2743620",
    "end": "2757090"
  },
  {
    "text": "3 45 or I get this result same okay and",
    "start": "2757090",
    "end": "2762790"
  },
  {
    "text": "if I call it we don't know 1 2 3 & 4 4 5 as a result and if I call this get the",
    "start": "2762790",
    "end": "2772480"
  },
  {
    "text": "same so it seems that if I call xxx and",
    "start": "2772480",
    "end": "2778450"
  },
  {
    "text": "math dot min with the same combination of parameters I would always get the",
    "start": "2778450",
    "end": "2783970"
  },
  {
    "text": "same result which means what",
    "start": "2783970",
    "end": "2787890"
  },
  {
    "text": "so if you have two functions that always produce the same result when you give",
    "start": "2790280",
    "end": "2796049"
  },
  {
    "text": "them same parameters what does that effectively mean and it's the same",
    "start": "2796049",
    "end": "2803250"
  },
  {
    "text": "function it's if we can just substitute one for another because it's a black box we cannot tell how it does what it does",
    "start": "2803250",
    "end": "2810390"
  },
  {
    "text": "but if we observe that whenever we pass the same thing to one end the other that",
    "start": "2810390",
    "end": "2815790"
  },
  {
    "text": "you always get the same result that means we can just substitute one one for another which sort of makes perfect",
    "start": "2815790",
    "end": "2822390"
  },
  {
    "text": "sense because this function xxx does not do anything it is just a sort of wrapper",
    "start": "2822390",
    "end": "2828420"
  },
  {
    "text": "around math dot min it's just one extra level of indirection because we travel parameters it receives it just passes",
    "start": "2828420",
    "end": "2837000"
  },
  {
    "text": "his own directly to math dot min and whatever math dot min returns the result that's what that function would return",
    "start": "2837000",
    "end": "2843059"
  },
  {
    "text": "as a result as well yeah it's just one extra box that does nothing yeah so we",
    "start": "2843059",
    "end": "2850829"
  },
  {
    "text": "can then go here and replace this with just math dot min and get exactly the",
    "start": "2850829",
    "end": "2858299"
  },
  {
    "text": "same result and then we can do the same thing for oh I need to call my reduce",
    "start": "2858299",
    "end": "2868040"
  },
  {
    "text": "okay and we get exactly the exactly the",
    "start": "2876360",
    "end": "2883300"
  },
  {
    "text": "same result as as before by the way can",
    "start": "2883300",
    "end": "2888370"
  },
  {
    "text": "anyone tell me why did this not work with reduce but it did with with my",
    "start": "2888370",
    "end": "2895150"
  },
  {
    "text": "reviews I'm not saying that mine is better man is actually not better but it just happens to work in this in this",
    "start": "2895150",
    "end": "2901840"
  },
  {
    "text": "case",
    "start": "2901840",
    "end": "2904080"
  },
  {
    "text": "well the reason the reason is because the real reduce method is not really",
    "start": "2919540",
    "end": "2925390"
  },
  {
    "text": "implemented like this it's not calling reducer only with these three with these",
    "start": "2925390",
    "end": "2931480"
  },
  {
    "text": "two parameters actually passing some extra parameters on as well so I think here it will actually pass the index and",
    "start": "2931480",
    "end": "2939750"
  },
  {
    "text": "the array itself and that would break the math dot mean and math dot max",
    "start": "2939750",
    "end": "2946450"
  },
  {
    "text": "functions because if you pass four parameters to math dot max of which one",
    "start": "2946450",
    "end": "2952540"
  },
  {
    "text": "is an array you'll get none none as a result as a result back so if we take",
    "start": "2952540",
    "end": "2966490"
  },
  {
    "text": "this away we get the behavior that we want but with really deuce we won't be",
    "start": "2966490",
    "end": "2972190"
  },
  {
    "text": "able to just pass math dot min and math dot max directly okay so this was this",
    "start": "2972190",
    "end": "2983980"
  },
  {
    "text": "was filtering map and reduced and we've",
    "start": "2983980",
    "end": "2990040"
  },
  {
    "text": "seen these four different algorithms and computations and how we can condense",
    "start": "2990040",
    "end": "2997480"
  },
  {
    "text": "them by using fold or using using reduce and it actually turns out that that that",
    "start": "2997480",
    "end": "3004890"
  },
  {
    "start": "3002000",
    "end": "3230000"
  },
  {
    "text": "there is a kind of a special class or or or or category for for these type of",
    "start": "3004890",
    "end": "3011250"
  },
  {
    "text": "computations because you'll see that they all are very similar because they all have this binary operation that has",
    "start": "3011250",
    "end": "3016830"
  },
  {
    "text": "a neutral element so if you ever heard about mono it that that would be an",
    "start": "3016830",
    "end": "3022560"
  },
  {
    "text": "example of over over over mono inter structure we have the binary operation that is associative and has a neutral",
    "start": "3022560",
    "end": "3028320"
  },
  {
    "text": "and has a neutral element but what is interesting about this is that we can",
    "start": "3028320",
    "end": "3036930"
  },
  {
    "text": "take this idea a step further",
    "start": "3036930",
    "end": "3041720"
  },
  {
    "text": "I'm just gonna go back to this my reduce",
    "start": "3042480",
    "end": "3047490"
  },
  {
    "text": "and my map and my filter if we sort of look into this these two implementations",
    "start": "3047490",
    "end": "3053579"
  },
  {
    "text": "of my map and my filter will see that",
    "start": "3053579",
    "end": "3060240"
  },
  {
    "text": "they also are very similar to one another yet there's also a fair bit of",
    "start": "3060240",
    "end": "3066359"
  },
  {
    "text": "similarity between those two computations so the question is is there",
    "start": "3066359",
    "end": "3072150"
  },
  {
    "text": "a way to implement filter and map by using reduce I can reduce be use to",
    "start": "3072150",
    "end": "3079619"
  },
  {
    "text": "implement these two in another way so if",
    "start": "3079619",
    "end": "3084750"
  },
  {
    "text": "I get this going",
    "start": "3084750",
    "end": "3089119"
  },
  {
    "text": "not sure why do I get 301 here and not",
    "start": "3105690",
    "end": "3110760"
  },
  {
    "text": "that's not what I'd expect",
    "start": "3114790",
    "end": "3118260"
  },
  {
    "text": "hmm okay I need to look into that but let's let's let's implement this with",
    "start": "3120340",
    "end": "3126430"
  },
  {
    "text": "with with reduce so how how would it look like so we can say return this dot reduce and",
    "start": "3126430",
    "end": "3135970"
  },
  {
    "text": "then we need to pass in the reducer so what should this reduce to do well it should get the accumulator and the",
    "start": "3135970",
    "end": "3142480"
  },
  {
    "text": "current value and then return this as a",
    "start": "3142480",
    "end": "3148900"
  },
  {
    "text": "result so we start with an empty array",
    "start": "3148900",
    "end": "3158020"
  },
  {
    "text": "as the initial value of the accumulator and then in each iteration when we are",
    "start": "3158020",
    "end": "3165310"
  },
  {
    "text": "reducer we just append the F applied onto the current element of the array on",
    "start": "3165310",
    "end": "3172690"
  },
  {
    "text": "to whichever elements we've collected previously and that gives us the same",
    "start": "3172690",
    "end": "3178930"
  },
  {
    "text": "the same result and we can do the same thing the similar thing for filter we can also replace that with residue so",
    "start": "3178930",
    "end": "3184990"
  },
  {
    "text": "you can say return they stop reduce accumulator and X but then the the logic",
    "start": "3184990",
    "end": "3192940"
  },
  {
    "text": "is slightly different here we need to test what F X returns if FX is a true T",
    "start": "3192940",
    "end": "3198400"
  },
  {
    "text": "value then we need to concatenate accumulator and X otherwise we just",
    "start": "3198400",
    "end": "3204700"
  },
  {
    "text": "return the accumulator and we also start with an empty with an empty array",
    "start": "3204700",
    "end": "3211980"
  },
  {
    "text": "sigh he's mine yeah okay so that's that's",
    "start": "3216400",
    "end": "3222260"
  },
  {
    "text": "where the fifth reason we get we get exactly the same exactly the same result one three five seven seven nine and this",
    "start": "3222260",
    "end": "3231140"
  },
  {
    "start": "3230000",
    "end": "3286000"
  },
  {
    "text": "is really interesting because it turns out that you know map and filter are just special cases of all reduce so it's",
    "start": "3231140",
    "end": "3239359"
  },
  {
    "text": "actually reduced that's this magical spanner that you can use on arrays to",
    "start": "3239359",
    "end": "3244760"
  },
  {
    "text": "accomplish any kind of computation or transformation over edge you can either",
    "start": "3244760",
    "end": "3249980"
  },
  {
    "text": "condense an array to a scalar value like a number or an object or something like this or you can also convert array onto",
    "start": "3249980",
    "end": "3257690"
  },
  {
    "text": "another array either by mapping element over elements individually or by filtering them and removing the ones",
    "start": "3257690",
    "end": "3263750"
  },
  {
    "text": "that don't satisfy a particular particular condition so you know map and",
    "start": "3263750",
    "end": "3269210"
  },
  {
    "text": "filter they just got their own special names because they are computations that are common but again they can also be",
    "start": "3269210",
    "end": "3277400"
  },
  {
    "text": "implemented just as a simple usage of of this reduce reuse matter and that's why",
    "start": "3277400",
    "end": "3287890"
  },
  {
    "start": "3286000",
    "end": "3413000"
  },
  {
    "text": "read functions and and and reduce is a is a good abstraction because it's really really versatile and you can",
    "start": "3287890",
    "end": "3294109"
  },
  {
    "text": "accomplish a lot with very little with very little code okay so the the last",
    "start": "3294109",
    "end": "3308599"
  },
  {
    "text": "bit about function is a value and about values is the capability of function",
    "start": "3308599",
    "end": "3316940"
  },
  {
    "text": "being returned as a result of a function application and this is a really",
    "start": "3316940",
    "end": "3322910"
  },
  {
    "text": "powerful idea and and any useful useful concept because again if we think about",
    "start": "3322910",
    "end": "3329569"
  },
  {
    "text": "func functions as as boxes this means that we can pass a box into the function",
    "start": "3329569",
    "end": "3339470"
  },
  {
    "text": "and then get function to do something and then return another box another black box as a result so we have",
    "start": "3339470",
    "end": "3346309"
  },
  {
    "text": "functions that actually operate on other functions take them as parameters and then return them as as results",
    "start": "3346309",
    "end": "3352820"
  },
  {
    "text": "and here we see like a really simple usage of that of that idea so if I was",
    "start": "3352820",
    "end": "3360320"
  },
  {
    "text": "to run this I would create a logger for",
    "start": "3360320",
    "end": "3371630"
  },
  {
    "text": "the name my service and then when I call this log function it's actually this",
    "start": "3371630",
    "end": "3377930"
  },
  {
    "text": "anonymous function here that would be invoked because that's what create logger functions returned as a result",
    "start": "3377930",
    "end": "3383120"
  },
  {
    "text": "the the create logger function is a box that returns another box as a result which we can customize with this name",
    "start": "3383120",
    "end": "3389900"
  },
  {
    "text": "here so when I say give me a logger for the name my service and then capture the result again which is a reference to",
    "start": "3389900",
    "end": "3396020"
  },
  {
    "text": "this anonymous function here when I call log one two three I get to see you know my service 1 1 2 3 because this would",
    "start": "3396020",
    "end": "3403490"
  },
  {
    "text": "prepend whichever name we passed here as a as a first parameter of the console",
    "start": "3403490",
    "end": "3410150"
  },
  {
    "text": "console dot lock and this really is a",
    "start": "3410150",
    "end": "3419510"
  },
  {
    "start": "3413000",
    "end": "3600000"
  },
  {
    "text": "useful useful idea and I'm slightly",
    "start": "3419510",
    "end": "3425930"
  },
  {
    "text": "running out of time so I'm just going to show you a couple of scenarios where this might be very very useful so",
    "start": "3425930",
    "end": "3432650"
  },
  {
    "text": "imagine we have a function and let's",
    "start": "3432650",
    "end": "3439160"
  },
  {
    "text": "call it s Q R T and it's basically just math dot s QR t",
    "start": "3439160",
    "end": "3445420"
  },
  {
    "text": "and when we call it we get four four as a as a result but then we can we can do",
    "start": "3449750",
    "end": "3458119"
  },
  {
    "text": "this we can say log is a function that",
    "start": "3458119",
    "end": "3464270"
  },
  {
    "text": "takes a function as a parameter and then",
    "start": "3464270",
    "end": "3469780"
  },
  {
    "text": "returns another function as a result and in here we obtain result by applying",
    "start": "3469780",
    "end": "3479720"
  },
  {
    "text": "this function on to whichever F onto whichever X we passed in as a parameter",
    "start": "3479720",
    "end": "3486020"
  },
  {
    "text": "and then return that as a result and",
    "start": "3486020",
    "end": "3494990"
  },
  {
    "text": "then here we let's say just log X and result",
    "start": "3494990",
    "end": "3500859"
  },
  {
    "text": "what happens now",
    "start": "3516190",
    "end": "3519579"
  },
  {
    "text": "okay so we still get exactly the same result as before so SQ RT with log 16",
    "start": "3526310",
    "end": "3533230"
  },
  {
    "text": "returns 4 but we can also see that this 16 + 4 is being logged onto the console",
    "start": "3533230",
    "end": "3538910"
  },
  {
    "text": "so what this little log function did or what it allows us to do is it allows us",
    "start": "3538910",
    "end": "3545630"
  },
  {
    "text": "to decorate any function we want all we need to do is just pass that function as a parameter and then we get another",
    "start": "3545630",
    "end": "3551900"
  },
  {
    "text": "function as a result that would always invoke the function that we are decorating but it would also as a",
    "start": "3551900",
    "end": "3557420"
  },
  {
    "text": "side-effect log the parameter that we passed in and the result that we got back so we have a sort of non-invasive",
    "start": "3557420",
    "end": "3563930"
  },
  {
    "text": "way of attaching this side-effect of logging things onto any function any",
    "start": "3563930",
    "end": "3569480"
  },
  {
    "text": "function we we like and I'm just going to show you one more for for the end",
    "start": "3569480",
    "end": "3576220"
  },
  {
    "text": "let's call this one memorize which is also a function that returns function as",
    "start": "3576220",
    "end": "3583700"
  },
  {
    "text": "a result but this one is slightly different it has this hidden local",
    "start": "3583700",
    "end": "3591110"
  },
  {
    "text": "variable called map and then it returns a function that does this it first",
    "start": "3591110",
    "end": "3597280"
  },
  {
    "text": "checks if this map has a property called",
    "start": "3597280",
    "end": "3603920"
  },
  {
    "text": "X or rather doesn't and if it doesn't",
    "start": "3603920",
    "end": "3609350"
  },
  {
    "text": "then it stores F applied to X to map and",
    "start": "3609350",
    "end": "3614990"
  },
  {
    "text": "then returns",
    "start": "3614990",
    "end": "3617500"
  },
  {
    "text": "my ex okay and then we can now say Const",
    "start": "3621039",
    "end": "3630630"
  },
  {
    "text": "sq Artie wait vlog and map equals sorry",
    "start": "3630630",
    "end": "3641640"
  },
  {
    "text": "okay I'm just gonna comment this up and",
    "start": "3657890",
    "end": "3665030"
  },
  {
    "text": "so now you can see that this still returns four which is the correct result so the function still does the same",
    "start": "3665030",
    "end": "3673349"
  },
  {
    "text": "thing if I call it with nine I'll get three sorry if I get 49 I'll get three",
    "start": "3673349",
    "end": "3681540"
  },
  {
    "text": "and you can see that now we have to log statements being made to two logs being",
    "start": "3681540",
    "end": "3687329"
  },
  {
    "text": "made 16 4 and 9 9 3 okay if I call it",
    "start": "3687329",
    "end": "3692910"
  },
  {
    "text": "with 16 again I get 4 as a result which",
    "start": "3692910",
    "end": "3699390"
  },
  {
    "text": "is the correct result but you'll see that the reasoner additional log",
    "start": "3699390",
    "end": "3705420"
  },
  {
    "text": "statement because this decorator here the memoirs decorator is clever enough to work out that we've already invoked",
    "start": "3705420",
    "end": "3712890"
  },
  {
    "text": "this function with these combination of parameters store that result in this map",
    "start": "3712890",
    "end": "3718380"
  },
  {
    "text": "and then just return that as a result immediately because there was no need to perform the same computation computation",
    "start": "3718380",
    "end": "3723990"
  },
  {
    "text": "again and this allows us to kind of add caching in a non-invasive way on top of",
    "start": "3723990",
    "end": "3732089"
  },
  {
    "text": "any any kind of function that we that we want I guess I guess I'll have to stop",
    "start": "3732089",
    "end": "3739319"
  },
  {
    "text": "stop now run run out of time you've been great thank you very much investor luck",
    "start": "3739319",
    "end": "3746690"
  },
  {
    "text": "[Applause]",
    "start": "3747190",
    "end": "3751639"
  }
]