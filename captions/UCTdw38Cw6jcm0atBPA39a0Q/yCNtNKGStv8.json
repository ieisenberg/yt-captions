[
  {
    "start": "0",
    "end": "64000"
  },
  {
    "text": "perhaps good morning what I observed the gender distribution is almost like my classes which is a pity because I'm",
    "start": "60",
    "end": "9150"
  },
  {
    "text": "talking about sanity and in my experience women are usually much more",
    "start": "9150",
    "end": "15299"
  },
  {
    "text": "sane than the nasty boys so I'm talking",
    "start": "15299",
    "end": "21869"
  },
  {
    "text": "about sane and safe C++ class types and a warning I have too many slides because",
    "start": "21869",
    "end": "28050"
  },
  {
    "text": "I have material around that area for at least a day and I try to put everything",
    "start": "28050",
    "end": "36120"
  },
  {
    "text": "in 45 minute and that's not possible but I try to give you the most important",
    "start": "36120",
    "end": "41670"
  },
  {
    "text": "stuff on that way who is not a C++ programmer at the moment okay",
    "start": "41670",
    "end": "49079"
  },
  {
    "text": "but even you can learn something because I have some some aches some wisdom there some sanity not from my own making that",
    "start": "49079",
    "end": "59730"
  },
  {
    "text": "you should take away home regardless for language he using so if you look at the",
    "start": "59730",
    "end": "66330"
  },
  {
    "start": "64000",
    "end": "226000"
  },
  {
    "text": "dimensions I about 2 years ago I started to work with more closely to work with",
    "start": "66330",
    "end": "72930"
  },
  {
    "text": "people who care about safety critical systems and actually long ago but that",
    "start": "72930",
    "end": "78780"
  },
  {
    "text": "was when when I started seriously looking into what they are trying to to achieve to give guidelines and rules to",
    "start": "78780",
    "end": "86670"
  },
  {
    "text": "make codes safer and in C++ we have different areas we have some areas where",
    "start": "86670",
    "end": "92759"
  },
  {
    "text": "say ok it's saying makes reason and it's very easy to use and it stays safe",
    "start": "92759",
    "end": "98540"
  },
  {
    "text": "that's good stuff that's where you want to be because then even if you change things usually nothing bad happens and",
    "start": "98540",
    "end": "107030"
  },
  {
    "text": "then there's a large area that either requires very high discipline because",
    "start": "107030",
    "end": "114090"
  },
  {
    "text": "you might end up an undefined behavior or might even be a high safety regulator",
    "start": "114090",
    "end": "120060"
  },
  {
    "text": "a hurry means because it's dangerous and explosive or even it might go into the",
    "start": "120060",
    "end": "126240"
  },
  {
    "text": "insanity of undefined behavior land where anything can happen and you might not even be able to detect it",
    "start": "126240",
    "end": "133050"
  },
  {
    "text": "I've also reviewed code bases where you have let's say not too unsafe stuff but",
    "start": "133050",
    "end": "139290"
  },
  {
    "text": "again stuff that's ill-advised and somehow that's poisonous actually poisoning all the codebase because",
    "start": "139290",
    "end": "144630"
  },
  {
    "text": "everybody is doing it in my opinion wrongly or badly and things like oh not",
    "start": "144630",
    "end": "150570"
  },
  {
    "text": "using conscious is in that domain of ill-advised stuff so how it didn't make",
    "start": "150570",
    "end": "158580"
  },
  {
    "text": "you too afraid but I want to cover that area a little bit with some typical C++",
    "start": "158580",
    "end": "165630"
  },
  {
    "text": "types and figure out where where they belong if they are on the high discipline area or even the danger",
    "start": "165630",
    "end": "172410"
  },
  {
    "text": "danger danger area or in the easy-to-use area and I understand you know not",
    "start": "172410",
    "end": "180240"
  },
  {
    "text": "always can be in that easy-to-use area there might be because it's C++ because you want to do something serious stuff",
    "start": "180240",
    "end": "186900"
  },
  {
    "text": "there might be stuff that is in the high discipline area but please don't go here",
    "start": "186900",
    "end": "191910"
  },
  {
    "text": "with your codebase and if you're here try to get away from that Scott Myers",
    "start": "191910",
    "end": "199290"
  },
  {
    "text": "once wrote when in doubt do as the ins two integers are great because they can",
    "start": "199290",
    "end": "206880"
  },
  {
    "text": "do a lot of things and they just seem to work most of the time that's why I added",
    "start": "206880",
    "end": "211890"
  },
  {
    "text": "to that but not maybe always but values are important thing values actually typically end up to be in that easy to",
    "start": "211890",
    "end": "219840"
  },
  {
    "text": "use no no need to think about every detail area that you want to be in and",
    "start": "219840",
    "end": "227390"
  },
  {
    "start": "226000",
    "end": "296000"
  },
  {
    "text": "value types Stepanov when he created SEL he actually introduced the concept",
    "start": "227390",
    "end": "234600"
  },
  {
    "text": "called regular a regular type or a semi regular type is something that you can",
    "start": "234600",
    "end": "239640"
  },
  {
    "text": "easily use and if you put it into a container nothing can go wrong if you",
    "start": "239640",
    "end": "245250"
  },
  {
    "text": "put a create a vector of int you have a very hard time to break that vector even",
    "start": "245250",
    "end": "251370"
  },
  {
    "text": "and so a regular type trickly typically is copyable it is default constructible",
    "start": "251370",
    "end": "258600"
  },
  {
    "text": "it is a quality comparable that makes it regular not semi regular instead on/off",
    "start": "258600",
    "end": "264030"
  },
  {
    "text": "sends regular also made you have the comparison with less than so you can",
    "start": "264030",
    "end": "269920"
  },
  {
    "text": "actually sort things but not all things need to be sorted in all kind of things",
    "start": "269920",
    "end": "275620"
  },
  {
    "text": "and sorting will be different in C++ 20 when we get the spaceship operator which",
    "start": "275620",
    "end": "281470"
  },
  {
    "text": "changes a lot of things or guidelines that you might have already with respect",
    "start": "281470",
    "end": "286480"
  },
  {
    "text": "to the comparators and stuff so value types are nice and the standard library",
    "start": "286480",
    "end": "291640"
  },
  {
    "text": "expects them and it works fine with them how do we get value types and if I give",
    "start": "291640",
    "end": "298150"
  },
  {
    "start": "296000",
    "end": "698000"
  },
  {
    "text": "you a landscape of what kind of types I want to show we see value types usually are in that area we have everything is",
    "start": "298150",
    "end": "305170"
  },
  {
    "text": "fine good great but there are other kind of class types that we can create for example we can create empty types I will",
    "start": "305170",
    "end": "312310"
  },
  {
    "text": "give you a little bit empty types usually don't because they have nothing in there nothing can go wrong at least",
    "start": "312310",
    "end": "321010"
  },
  {
    "text": "nothing serious can go wrong we have other things like pointing types and",
    "start": "321010",
    "end": "328840"
  },
  {
    "text": "that's not only pointer everything that refers to something else where lifetime",
    "start": "328840",
    "end": "333910"
  },
  {
    "text": "is actually crucial if you refer to something that's no longer there you're in deep trouble in C++ if you actually",
    "start": "333910",
    "end": "339970"
  },
  {
    "text": "try to use it and that's where you get easily into an undefined behavior land",
    "start": "339970",
    "end": "345220"
  },
  {
    "text": "like a pointer to an object that's already gone one things and using",
    "start": "345220",
    "end": "353710"
  },
  {
    "text": "pointing types usually requires to have to be a highly disciplined programmer to",
    "start": "353710",
    "end": "358930"
  },
  {
    "text": "not run into that situation that either they are not initialized properly or they're referring to something that's",
    "start": "358930",
    "end": "364840"
  },
  {
    "text": "not there I introduced a category that's",
    "start": "364840",
    "end": "371200"
  },
  {
    "text": "not often actually visible or let's say mentally aware about it's called what I",
    "start": "371200",
    "end": "377770"
  },
  {
    "text": "call managing types types that control other objects or values vector is such a",
    "start": "377770",
    "end": "384970"
  },
  {
    "text": "managing time because it controls memory and the elements in the vector do it",
    "start": "384970",
    "end": "390490"
  },
  {
    "text": "owns them and it controls the lifetime of them there are other classes where you might end up writing something",
    "start": "390490",
    "end": "397150"
  },
  {
    "text": "called a manager that keep stuff around keeping let's say open",
    "start": "397150",
    "end": "402940"
  },
  {
    "text": "database connections around or keeping file handles around that are open",
    "start": "402940",
    "end": "409030"
  },
  {
    "text": "because they refer to a socket that you write or read from there are typically managing types a category what's in the",
    "start": "409030",
    "end": "415810"
  },
  {
    "text": "managing type is something that actually stays around longer in your program and usually refer to it from down the call",
    "start": "415810",
    "end": "422920"
  },
  {
    "text": "chain too to get some stuff of it some people put managing roles into global",
    "start": "422920",
    "end": "429400"
  },
  {
    "text": "objects which I believe is a big big mistake because it's very hard to test to have some global objects around there",
    "start": "429400",
    "end": "436150"
  },
  {
    "text": "so consider stuff that's managing types and well you might ask me why it was",
    "start": "436150",
    "end": "442570"
  },
  {
    "text": "vector of managing time because you can have perceived vector it's copyable it's if you put a vector of IND it's",
    "start": "442570",
    "end": "449470"
  },
  {
    "text": "perfectly reasonable to use as a value type library experts have the expertise",
    "start": "449470",
    "end": "455770"
  },
  {
    "text": "to actually move a managing type to become a value type but it typically means to jump a lot of Hoops caring",
    "start": "455770",
    "end": "462940"
  },
  {
    "text": "about exception safety guarantees and stuff like that if you write your own vector even though biana teaches that to",
    "start": "462940",
    "end": "469300"
  },
  {
    "text": "you as a first serious class in his books I believe that's a mistake you shouldn't write stuff like vector as you",
    "start": "469300",
    "end": "476260"
  },
  {
    "text": "first attempt to use C++ because he will get it wrong even library writers even",
    "start": "476260",
    "end": "483700"
  },
  {
    "text": "the standard libraries tends to get stuff wrong and not by bad intent it's",
    "start": "483700",
    "end": "489460"
  },
  {
    "text": "just very hard to make it right and safe and sane and a typical implementation",
    "start": "489460",
    "end": "495820"
  },
  {
    "text": "that goes along that line is actually on the the insanity area to get here to get",
    "start": "495820",
    "end": "503350"
  },
  {
    "text": "there so you're more or less have to go down here and then end up here again for you users and the other things like",
    "start": "503350",
    "end": "511750"
  },
  {
    "text": "plain pointers are just ridiculously dangerous in modern C++ and it should no",
    "start": "511750",
    "end": "517750"
  },
  {
    "text": "longer be used plain point is managing memory have no use at all anymore in C++",
    "start": "517750",
    "end": "524110"
  },
  {
    "text": "today and also I have seen classes with very let's say interesting combinations",
    "start": "524110",
    "end": "529810"
  },
  {
    "text": "or special member functions people like oh we define a move constructor",
    "start": "529810",
    "end": "535569"
  },
  {
    "text": "because we just learned that and forget about move assignment or don't care about copying or define a destructor",
    "start": "535569",
    "end": "542829"
  },
  {
    "text": "without caring about copying and moving that's something there are weird combination and you allow to do that",
    "start": "542829",
    "end": "549970"
  },
  {
    "text": "they will perfectly compile but they might not be actually very useful for you users now I explained my landscape",
    "start": "549970",
    "end": "558489"
  },
  {
    "text": "here and oh I forgot about a polymorphic type who is using virtual regularly try",
    "start": "558489",
    "end": "568329"
  },
  {
    "text": "to get rid of that it's kind of a drug it's very rare especially in in that say",
    "start": "568329",
    "end": "575860"
  },
  {
    "text": "in technique system where you either have an open hierarchy of classes that",
    "start": "575860",
    "end": "582970"
  },
  {
    "text": "is extended every other day the hierarchy itself and also where you have",
    "start": "582970",
    "end": "589269"
  },
  {
    "text": "the runtime variation of behavior there are a few design patterns like strategy",
    "start": "589269",
    "end": "596790"
  },
  {
    "text": "or composite when you might end up",
    "start": "596790",
    "end": "603970"
  },
  {
    "text": "having things like ok I want an oo polymorphic hierarchy but even those can be changed in C++ Niko you saw this",
    "start": "603970",
    "end": "610989"
  },
  {
    "text": "yesterday show the trick of using student variant if the set of classes that are let's save form and abstraction",
    "start": "610989",
    "end": "617739"
  },
  {
    "text": "or have a common abstraction is closed you don't extend that a variant is today",
    "start": "617739",
    "end": "622869"
  },
  {
    "text": "a means of implementing that without any needs to go into virtual member",
    "start": "622869",
    "end": "627910"
  },
  {
    "text": "functions and and polymorphic behavior and you end up being a valued at having value types there's an other approach",
    "start": "627910",
    "end": "636309"
  },
  {
    "text": "where you type a ratio to get polymorphic behavior from value types shown parent has a nice talk about that",
    "start": "636309",
    "end": "643059"
  },
  {
    "text": "and I don't have the time to go into details how to do that but now where are",
    "start": "643059",
    "end": "648459"
  },
  {
    "text": "things like int double and pool in that area I move around and you my child stopped",
    "start": "648459",
    "end": "656970"
  },
  {
    "text": "when I reached the area where in this nobody's brave enough here sure",
    "start": "656970",
    "end": "671339"
  },
  {
    "text": "here y-you don't know what it is you",
    "start": "678449",
    "end": "695829"
  },
  {
    "text": "should give my talk now our primitive language types sane and save let's say",
    "start": "695829",
    "end": "705129"
  },
  {
    "start": "698000",
    "end": "800000"
  },
  {
    "text": "they are quite safe to use because they are values so nothing can go wrong by using them except we have things like",
    "start": "705129",
    "end": "713410"
  },
  {
    "text": "okay this is a little piece of code I have 41 I get modular three and that's",
    "start": "713410",
    "end": "719290"
  },
  {
    "text": "not not fall so it's true and then I ask true and I plus one so",
    "start": "719290",
    "end": "725559"
  },
  {
    "text": "true and 42 and what's the result that comes up here yes I know",
    "start": "725559",
    "end": "734248"
  },
  {
    "text": "and it's but the the typical mistake anybody done that mistake there a couple",
    "start": "736589",
    "end": "745389"
  },
  {
    "text": "of problems first any kind of that's something that is a number can be converted to a boolean silently without",
    "start": "745389",
    "end": "753339"
  },
  {
    "text": "any hassle and also boolean actually promote to integral types or their",
    "start": "753339",
    "end": "759370"
  },
  {
    "text": "integers so I can perfectly use a bit and to combine it with an integer and we",
    "start": "759370",
    "end": "767440"
  },
  {
    "text": "have true and forty two now you have to",
    "start": "767440",
    "end": "774639"
  },
  {
    "text": "think about what is that a numerical value of true it's 1 so 1 + 42 bitwise",
    "start": "774639",
    "end": "785170"
  },
  {
    "text": "is false no so interesting stuff can happen and",
    "start": "785170",
    "end": "793990"
  },
  {
    "text": "it's very hard to spot when reading your code and this is just a test case to show ok write tests another thing I have",
    "start": "793990",
    "end": "805209"
  },
  {
    "start": "800000",
    "end": "982000"
  },
  {
    "text": "a vector of doubles using C++ 17 class Hamlet argument deduction and a set of",
    "start": "805209",
    "end": "811060"
  },
  {
    "text": "double and I want to populate the set with all fractions that I can create",
    "start": "811060",
    "end": "817779"
  },
  {
    "text": "from the vector elements so the vector has four elements so there should be maybe 16 candidates to go into the set",
    "start": "817779",
    "end": "825070"
  },
  {
    "text": "and some end up being one so this set should have maybe a little bit less so I",
    "start": "825070",
    "end": "830380"
  },
  {
    "text": "I said 16 minus 4 because of the the",
    "start": "830380",
    "end": "835390"
  },
  {
    "text": "ones plus 1 for the single one that goes in there and what is the size that we",
    "start": "835390",
    "end": "840579"
  },
  {
    "text": "end up really in the end in the set",
    "start": "840579",
    "end": "845160"
  },
  {
    "text": "very simple naive code few lines of code requires a lot of discipline and",
    "start": "846370",
    "end": "854020"
  },
  {
    "text": "understanding to see what's happening anybody dare to to give a guess on the",
    "start": "854020",
    "end": "860290"
  },
  {
    "text": "number of elements in the set I know",
    "start": "860290",
    "end": "865350"
  },
  {
    "text": "well dividing by zero as well defiant behavior in C++ yeah it's double not",
    "start": "866790",
    "end": "874450"
  },
  {
    "text": "integers what is the size of the set so",
    "start": "874450",
    "end": "882430"
  },
  {
    "text": "I said it's not 16 maybe it's 13 is it 13 12 10 I know it's",
    "start": "882430",
    "end": "894220"
  },
  {
    "text": "one that's exactly one element in the set why that's something everybody that",
    "start": "894220",
    "end": "901029"
  },
  {
    "text": "uses or let's say 99% of the people that use double every day forget about",
    "start": "901029",
    "end": "906779"
  },
  {
    "text": "there's a valid double value called not a number JavaScript programs are very",
    "start": "906779",
    "end": "912520"
  },
  {
    "text": "familiar with that not a number in C++ is defined to be outside of the range of",
    "start": "912520",
    "end": "919540"
  },
  {
    "text": "comparable values so if you compare not a number with anything any other double number it's always being false and if",
    "start": "919540",
    "end": "927220"
  },
  {
    "text": "you look at the definition of our set works and users stood less if you have",
    "start": "927220",
    "end": "932370"
  },
  {
    "text": "compare a less than B and B less than a and if both return false a and B are",
    "start": "932370",
    "end": "939520"
  },
  {
    "text": "considered equivalent now if you compare one with not a number it's false if you",
    "start": "939520",
    "end": "944860"
  },
  {
    "text": "compare not a number with one it's false again so they are equivalent and this vector is designed deliberately to start",
    "start": "944860",
    "end": "951520"
  },
  {
    "text": "with zero so the first fraction you create is zero divided by zero which results in another number so they this",
    "start": "951520",
    "end": "959230"
  },
  {
    "text": "set actually has one element in there that is not a number the set gets tainted no other number can be entered in that",
    "start": "959230",
    "end": "965950"
  },
  {
    "text": "set and it has ends up with the size of one so much for sanity of built-in types",
    "start": "965950",
    "end": "974800"
  },
  {
    "text": "anybody knew that by heart consciously every day think about not a number",
    "start": "974800",
    "end": "982560"
  },
  {
    "start": "982000",
    "end": "1085000"
  },
  {
    "text": "another thing a typical loop people try to prevent that from happening",
    "start": "982560",
    "end": "987940"
  },
  {
    "text": "I just want to print vector elements backwards and I know the last index is",
    "start": "987940",
    "end": "993640"
  },
  {
    "text": "size minus 1 at least I attempt pretend to know and why I is greatly equals 0 I",
    "start": "993640",
    "end": "1001040"
  },
  {
    "text": "output vector why is that loop correct",
    "start": "1001040",
    "end": "1006290"
  },
  {
    "text": "why yes if if size would be 0 that loop",
    "start": "1007519",
    "end": "1018810"
  },
  {
    "text": "would be really really big and maybe not terminating and actually it will not",
    "start": "1018810",
    "end": "1025050"
  },
  {
    "text": "never terminate because what is the type did used for I its an unsigned and if I",
    "start": "1025050",
    "end": "1038640"
  },
  {
    "text": "compare an unsigned greater equals 0 what will the compiler create of that true it's an endless loop it depends I",
    "start": "1038640",
    "end": "1051000"
  },
  {
    "text": "compile that code I might have gotten a warning but it still runs and just boom",
    "start": "1051000",
    "end": "1058400"
  },
  {
    "text": "endless loops are undefined behavior fluckey the compiler will just remove that loop and do nothing in optimized",
    "start": "1058400",
    "end": "1067020"
  },
  {
    "text": "code so there are people who try to fix that by making size return an integer I",
    "start": "1067020",
    "end": "1074570"
  },
  {
    "text": "will show you Brittain brief briefly in a couple of minutes why I believe that's",
    "start": "1074570",
    "end": "1080910"
  },
  {
    "text": "the wrong approach to tackling that problem so we have integral promotion we",
    "start": "1080910",
    "end": "1088169"
  },
  {
    "start": "1085000",
    "end": "1209000"
  },
  {
    "text": "have automatic numeric conversions and all of these things get in the way especially the integral promotions the",
    "start": "1088169",
    "end": "1095370"
  },
  {
    "text": "rule about signed and unsigned and shorts and unsigned long Long's and doubles they are really really hard to",
    "start": "1095370",
    "end": "1103200"
  },
  {
    "text": "know by heart and get right and consciously think think about them and",
    "start": "1103200",
    "end": "1108320"
  },
  {
    "text": "and then we have these special values for floating-point numbers that are often forgotten miles infinity plus",
    "start": "1108320",
    "end": "1115080"
  },
  {
    "text": "infinity is okay but not a number is outside of the realm of comparing for",
    "start": "1115080",
    "end": "1120929"
  },
  {
    "text": "actually with optional we now got it right out an empty optional is always less than everything else but with not a",
    "start": "1120929",
    "end": "1127710"
  },
  {
    "text": "number is not less than minus infinity so that's the problem there one thing",
    "start": "1127710",
    "end": "1136830"
  },
  {
    "text": "that we can learn from that is if you ever ride a class type that has a single element constructor always make that",
    "start": "1136830",
    "end": "1144269"
  },
  {
    "text": "explicit you don't want to have implicit conversions in your type system because",
    "start": "1144269",
    "end": "1150779"
  },
  {
    "text": "that makes a lot of things interesting it sounds so cool first that your class",
    "start": "1150779",
    "end": "1156240"
  },
  {
    "text": "automatically compares five to five apples but you don't want to let's say",
    "start": "1156240",
    "end": "1162899"
  },
  {
    "text": "convert the apples back to doubles and then do something interesting with them don't make that explicit to jump into",
    "start": "1162899",
    "end": "1170820"
  },
  {
    "text": "your face if you get things like old size minus one sticks around and if size was zero it gets a very big number in",
    "start": "1170820",
    "end": "1177749"
  },
  {
    "text": "the unsigned realm and comparison if you have comparison if you put types in a",
    "start": "1177749",
    "end": "1184649"
  },
  {
    "text": "set or any kind of sort of data structure make sure that's total the",
    "start": "1184649",
    "end": "1189960"
  },
  {
    "text": "ordering is told that every element compares well defined with the others in a nice manner not a number is not there",
    "start": "1189960",
    "end": "1198269"
  },
  {
    "text": "so actually you should never create a set of double if you really care about safety unless you can guarantee you",
    "start": "1198269",
    "end": "1205379"
  },
  {
    "text": "never get not a number which is a different story",
    "start": "1205379",
    "end": "1210258"
  },
  {
    "start": "1209000",
    "end": "1467000"
  },
  {
    "text": "primitive types have a big problem let's say you create a function that takes three ins very nice very simple to do",
    "start": "1211519",
    "end": "1219690"
  },
  {
    "text": "who has not done that okay now you call it and how do you call it",
    "start": "1219690",
    "end": "1226740"
  },
  {
    "text": "correctly is it three to one the right sequence of values or is it one two three and which will give you the",
    "start": "1226740",
    "end": "1232320"
  },
  {
    "text": "desired result it's very hard to know that yes well today we have cpp",
    "start": "1232320",
    "end": "1239789"
  },
  {
    "text": "reference so at least for the standard ly it's very quickly to figure out sometimes you might even be able to",
    "start": "1239789",
    "end": "1245100"
  },
  {
    "text": "hover and your IDE and it will tell you something about the the parameter names",
    "start": "1245100",
    "end": "1250130"
  },
  {
    "text": "there are people who want to get there where you want to have named parameters so you can actually have default values",
    "start": "1250130",
    "end": "1256890"
  },
  {
    "text": "for someone in the some parameter in the middle but I believe that's securing a symptom and not not solving the real",
    "start": "1256890",
    "end": "1264420"
  },
  {
    "text": "problem in C++ we can actually wrap the primitive types to have a real meaning",
    "start": "1264420",
    "end": "1271320"
  },
  {
    "text": "and have the type system and the compiler tell us if you do something wrong if we wrap things like that",
    "start": "1271320",
    "end": "1277140"
  },
  {
    "text": "especially if you wrap a single value in a class type we have to be aware of something that's something where the",
    "start": "1277140",
    "end": "1283430"
  },
  {
    "text": "sended library is unaware of and that giving us a problem of that size minus one problem we have things that count",
    "start": "1283430",
    "end": "1291330"
  },
  {
    "text": "stuff like size T or size type in the containers we you cannot have negative",
    "start": "1291330",
    "end": "1296970"
  },
  {
    "text": "values it's zero nothing one two three or more and that's where the natural",
    "start": "1296970",
    "end": "1302580"
  },
  {
    "text": "numbers including zero actually have an a nice property but those values are",
    "start": "1302580",
    "end": "1307890"
  },
  {
    "text": "absolute you might add let's say five apples and ten apples and get 15 apples",
    "start": "1307890",
    "end": "1314820"
  },
  {
    "text": "so you have a count that increases but if you subtract five from 15 or 15 from",
    "start": "1314820",
    "end": "1322320"
  },
  {
    "text": "five how many apples do you have if you subtract fifteen apples from five apples",
    "start": "1322320",
    "end": "1328760"
  },
  {
    "text": "minus ten can you represent minus ten apples maybe on a bank account having a",
    "start": "1328760",
    "end": "1336600"
  },
  {
    "text": "future of apples there's a different type in the standard library put it if",
    "start": "1336600",
    "end": "1344430"
  },
  {
    "text": "tea or different side four that's the distance between two counts or between",
    "start": "1344430",
    "end": "1350970"
  },
  {
    "text": "two pointers which more or less count by it's in your memory and that distance",
    "start": "1350970",
    "end": "1356040"
  },
  {
    "text": "can actually go backwards so they today this is a signed integer type the",
    "start": "1356040",
    "end": "1362040"
  },
  {
    "text": "problem is if you subtract 15 apples from five apples you should get a",
    "start": "1362040",
    "end": "1367470"
  },
  {
    "text": "distance oh they are ten less which is a distance and not an absolute number",
    "start": "1367470",
    "end": "1374350"
  },
  {
    "text": "anymore so we are talking about absolute values and relative values and just an",
    "start": "1374350",
    "end": "1381400"
  },
  {
    "text": "example from the standard library this is GCC library code from one of the I",
    "start": "1381400",
    "end": "1387490"
  },
  {
    "text": "believe it's vector inside as a vector or some algorithm inside distance actually computes the distance in return",
    "start": "1387490",
    "end": "1396880"
  },
  {
    "text": "type difference type of productivity between two iterators it's immediately",
    "start": "1396880",
    "end": "1402640"
  },
  {
    "text": "transformed silently implicitly with the assignment operator initialization to an",
    "start": "1402640",
    "end": "1408429"
  },
  {
    "text": "unsigned size type you wonder why is that I actually cheat the type system",
    "start": "1408429",
    "end": "1415360"
  },
  {
    "text": "I changed the five while initialization that and this might actually be negative maybe first and last are ordered in a",
    "start": "1415360",
    "end": "1423760"
  },
  {
    "text": "way that in practice it will never be negative but you never know you could have zero and minus one and then end up",
    "start": "1423760",
    "end": "1431830"
  },
  {
    "text": "in a very big number and the reason is the compiler will actually barf at you if you compare an unsigned value which",
    "start": "1431830",
    "end": "1440590"
  },
  {
    "text": "is capacity - size with an signed value",
    "start": "1440590",
    "end": "1447010"
  },
  {
    "text": "and that's why they made size type and a size type but later on it's used as a",
    "start": "1447010",
    "end": "1455200"
  },
  {
    "text": "difference type again so it's cast down here I when I've shown that you seen",
    "start": "1455200",
    "end": "1462250"
  },
  {
    "text": "that code acid WTF okay more on that",
    "start": "1462250",
    "end": "1467710"
  },
  {
    "start": "1467000",
    "end": "1563000"
  },
  {
    "text": "later so my perception of in stubbles an",
    "start": "1467710",
    "end": "1473770"
  },
  {
    "text": "unsigned and ins even are worse because ins have undefined behavior and overflow we don't have access to the carry bit we",
    "start": "1473770",
    "end": "1481270"
  },
  {
    "text": "just get whatever we get unicorns rainbows pink elephants doubles has that",
    "start": "1481270",
    "end": "1490980"
  },
  {
    "text": "not nice not a number thing and an signs are almost safe to use but very hard to",
    "start": "1490980",
    "end": "1497440"
  },
  {
    "text": "get right because of you very often they represent absolute values and subtracting one absolute",
    "start": "1497440",
    "end": "1504669"
  },
  {
    "text": "value from the other should give you relative which is a signed integer type so actually unsigned subtraction should",
    "start": "1504669",
    "end": "1512340"
  },
  {
    "text": "result in an integer type which we don't have in the language and we can't change that in the language because of si si",
    "start": "1512340",
    "end": "1518759"
  },
  {
    "text": "got it wrong already but si didn't have a really a type system it stemmed from B which didn't have a type system at all",
    "start": "1518759",
    "end": "1524159"
  },
  {
    "text": "everything was a word and even string is in that area where it might might",
    "start": "1524159",
    "end": "1530639"
  },
  {
    "text": "actually go here in the hi discipline area because sometimes strings how do",
    "start": "1530639",
    "end": "1535830"
  },
  {
    "text": "you call correctly that instead of our nice function with three ins what is if you have a function taking three string",
    "start": "1535830",
    "end": "1542210"
  },
  {
    "text": "parameters which sequence to you are the arguments given and I want to show you",
    "start": "1542210",
    "end": "1549389"
  },
  {
    "text": "something that's the hook called the whole value pattern and I need to speed up to give you something about that and",
    "start": "1549389",
    "end": "1555090"
  },
  {
    "text": "the whole value pattern is more than twenty years old it was a ok I don't go",
    "start": "1555090",
    "end": "1561840"
  },
  {
    "text": "into that detail just show you the whole value pattern what cunningham the inventor of the wikiwikiweb",
    "start": "1561840",
    "end": "1568529"
  },
  {
    "start": "1563000",
    "end": "1734000"
  },
  {
    "text": "and many other things that you might take for granted now and nobody knows that he invented that wrote the checks",
    "start": "1568529",
    "end": "1576389"
  },
  {
    "text": "pattern language around 1996 or five or seven something I didn't check that the",
    "start": "1576389",
    "end": "1581909"
  },
  {
    "text": "data exactly and that is text taken from there and he is talking in the more less",
    "start": "1581909",
    "end": "1587909"
  },
  {
    "text": "the smaller ground but it's more or less timeless without bound to specific language maybe only the wording there if",
    "start": "1587909",
    "end": "1594240"
  },
  {
    "text": "you have some quantities in them in a model and very often you just want to",
    "start": "1594240",
    "end": "1599399"
  },
  {
    "text": "use int or double or even string for that there are the fundamental things in",
    "start": "1599399",
    "end": "1605970"
  },
  {
    "text": "your language or library that you can use and he says this is no longer",
    "start": "1605970",
    "end": "1611249"
  },
  {
    "text": "necessary it was standard in languages with big are no abstraction like see",
    "start": "1611249",
    "end": "1618090"
  },
  {
    "text": "that's my addition it actually interferes with smooth and proper communication between parts of your program and with its users because",
    "start": "1618090",
    "end": "1627320"
  },
  {
    "text": "because bits strings and numbers can be used to represent almost anything anyone",
    "start": "1627320",
    "end": "1635039"
  },
  {
    "text": "in isolation means almost nothing so if you have a parameter with an int",
    "start": "1635039",
    "end": "1640310"
  },
  {
    "text": "for an unsigned or whatever primitive type think twice what does it represent",
    "start": "1640310",
    "end": "1645590"
  },
  {
    "text": "and words recommendation is construct special values or special types for your",
    "start": "1645590",
    "end": "1651830"
  },
  {
    "text": "domain model or for any kind of model in your system and use these values as the arguments of the messages translate to",
    "start": "1651830",
    "end": "1658190"
  },
  {
    "text": "see plus what is the parameter types of the functions and the units of input and",
    "start": "1658190",
    "end": "1663770"
  },
  {
    "text": "output for your system make sure these objects capture the whole quantity with all its implications",
    "start": "1663770",
    "end": "1670220"
  },
  {
    "text": "we don't really magnitude that means you have should provide the corresponding required functions and operators",
    "start": "1670220",
    "end": "1676160"
  },
  {
    "text": "returning the corresponding result types that actually fit like if you have a tie",
    "start": "1676160",
    "end": "1684440"
  },
  {
    "text": "press representing an absolute integral values if you subtract these return a",
    "start": "1684440",
    "end": "1691430"
  },
  {
    "text": "relative integral values or a signed integer for example or a read signed integer include format converters in",
    "start": "1691430",
    "end": "1699530"
  },
  {
    "text": "your user interface that can correctly reliably construct these objects constructors and i/o but do not expect",
    "start": "1699530",
    "end": "1707600"
  },
  {
    "text": "your domain model to handle string or an americorps resonation of the same information so once you commit it to",
    "start": "1707600",
    "end": "1713540"
  },
  {
    "text": "that abstraction use it throughout your system don't make it automatically",
    "start": "1713540",
    "end": "1719090"
  },
  {
    "text": "convert to int and back no implicit conversions take that home if you take",
    "start": "1719090",
    "end": "1726290"
  },
  {
    "text": "one thing home today take that home that's an old stuff almost always forgotten because we're too lazy and in",
    "start": "1726290",
    "end": "1734180"
  },
  {
    "start": "1734000",
    "end": "1808000"
  },
  {
    "text": "C++ actually doing that just requires this that's a minimal amount of things",
    "start": "1734180",
    "end": "1740300"
  },
  {
    "text": "that you can do my example had counters that we're unsigned and if you make your",
    "start": "1740300",
    "end": "1746420"
  },
  {
    "text": "count or wrap it in a struct it's a different type it's the same size of as",
    "start": "1746420",
    "end": "1752180"
  },
  {
    "text": "size T but it's a different type so you can distinguish different counters counters for weight and counters for",
    "start": "1752180",
    "end": "1759260"
  },
  {
    "text": "notifies even though they are completely the same you might end up overloading",
    "start": "1759260",
    "end": "1765410"
  },
  {
    "text": "operators this is not the recommended way to do that but in C glasses you can even make it work in a",
    "start": "1765410",
    "end": "1771769"
  },
  {
    "text": "way that you want to do it but you can guarantee if you subtract two weight counters you don't get a range counter",
    "start": "1771769",
    "end": "1777850"
  },
  {
    "text": "you get the difference between rate counters which is a different type now",
    "start": "1777850",
    "end": "1785539"
  },
  {
    "text": "in C plus a sound here on using these kinds of aggregate types with a single",
    "start": "1785539",
    "end": "1790850"
  },
  {
    "text": "element actually makes them more you can extend them now with by inheriting so",
    "start": "1790850",
    "end": "1797720"
  },
  {
    "text": "you can actually add operators like that by inheriting and using the curiously recurring template parameter pattern to",
    "start": "1797720",
    "end": "1803659"
  },
  {
    "text": "get there and I might not have the time to show you that but I might try another",
    "start": "1803659",
    "end": "1809450"
  },
  {
    "start": "1808000",
    "end": "2167000"
  },
  {
    "text": "thing if you I do these value types and these wrappers should I make a value",
    "start": "1809450",
    "end": "1814700"
  },
  {
    "text": "type default constructible should I have a default constructor either by declaring it or by implicitly getting it",
    "start": "1814700",
    "end": "1821690"
  },
  {
    "text": "and there are is actually one yes and most of them are knows whenever there's",
    "start": "1821690",
    "end": "1829700"
  },
  {
    "text": "a natural default value or a neutral value in the domain major domain operation then you can default construct",
    "start": "1829700",
    "end": "1837230"
  },
  {
    "text": "it and provide a default constructor at BestBuy if you have to declare it",
    "start": "1837230",
    "end": "1842480"
  },
  {
    "text": "because you have other constructors equal default Maria often you need to",
    "start": "1842480",
    "end": "1847610"
  },
  {
    "text": "guarantee sometimes you need to guarantee a class invariant so you have input parameters that actually define",
    "start": "1847610",
    "end": "1854570"
  },
  {
    "text": "the initial state and these must follow some given rules that often means you",
    "start": "1854570",
    "end": "1859580"
  },
  {
    "text": "don't have a default default constructor and that might end up it's okay it'll be",
    "start": "1859580",
    "end": "1865309"
  },
  {
    "text": "okay if you don't have really a default value in your domain sometimes people",
    "start": "1865309",
    "end": "1870860"
  },
  {
    "text": "want to have a default constructor because they have to piecemeal construct the value like oh I want to initialize",
    "start": "1870860",
    "end": "1878240"
  },
  {
    "text": "it but I don't know if it's a or B because I have another condition real I have to rely on to actually in this lies",
    "start": "1878240",
    "end": "1883970"
  },
  {
    "text": "that value I believe that maybe should be actually no because today we have",
    "start": "1883970",
    "end": "1889610"
  },
  {
    "text": "either the the conditional operator to give the corresponding result or an in place called lambda if the",
    "start": "1889610",
    "end": "1895309"
  },
  {
    "text": "internationalisation is complex and we we don't want and we to have that piecemeal somehow and again",
    "start": "1895309",
    "end": "1905020"
  },
  {
    "text": "we have seen that already in some other areas if the there's no natural default value in your domain abstraction like oh",
    "start": "1905020",
    "end": "1912490"
  },
  {
    "text": "we have playing cards we have poker we have all kind of things of some kind of",
    "start": "1912490",
    "end": "1919350"
  },
  {
    "text": "colors and there is no D what is the default card is the ace of spades or ace",
    "start": "1919350",
    "end": "1925510"
  },
  {
    "text": "of hearts or two of whatever there shouldn't be a default constructor and",
    "start": "1925510",
    "end": "1933039"
  },
  {
    "text": "also when the type in Vernon requires a reasonable initialization and there are some things where you don't want have a",
    "start": "1933039",
    "end": "1939279"
  },
  {
    "text": "default constructor thing like a cryptographic key without a decent seed is very very bad so you don't want to",
    "start": "1939279",
    "end": "1947649"
  },
  {
    "text": "have a cryptographic key class even if it's just a big number numerical value to be default constructible because you",
    "start": "1947649",
    "end": "1955350"
  },
  {
    "text": "users might use it wrongly or not safely and you get all kind of bad things in",
    "start": "1955350",
    "end": "1961779"
  },
  {
    "text": "your libraries that care about cryptography now back to our example",
    "start": "1961779",
    "end": "1971860"
  },
  {
    "text": "from before with our size time and capacity I want to make repeat that because I try to explain them ugly this",
    "start": "1971860",
    "end": "1978820"
  },
  {
    "text": "slot has been explained so distance is actually a relative type and subtracting",
    "start": "1978820",
    "end": "1986080"
  },
  {
    "text": "capacity from size from capacity in a vector also means it's a relative it's",
    "start": "1986080",
    "end": "1991450"
  },
  {
    "text": "how much space is left it's always positive if you do the subtraction here",
    "start": "1991450",
    "end": "1997360"
  },
  {
    "text": "but again you might flip it around and if one might be bigger of you or if your",
    "start": "1997360",
    "end": "2002640"
  },
  {
    "text": "vector is implemented wrongly it might actually be minus one because you",
    "start": "2002640",
    "end": "2007710"
  },
  {
    "text": "exceeded the size the size exceeds the capacity because you did something wrong things might like that might happen so",
    "start": "2007710",
    "end": "2014250"
  },
  {
    "text": "actually this is a relative son you subtract 15 apples from five apples so",
    "start": "2014250",
    "end": "2021299"
  },
  {
    "text": "you get the difference between in apples so this is actually relative size but",
    "start": "2021299",
    "end": "2026309"
  },
  {
    "text": "the result I because both arms inés and subtract neurons and doesn't give us assigned value but",
    "start": "2026309",
    "end": "2031710"
  },
  {
    "text": "and value that is the problem here so to be honest and should have been different",
    "start": "2031710",
    "end": "2037890"
  },
  {
    "text": "types of order here and here we should have actually cast this part to the",
    "start": "2037890",
    "end": "2043080"
  },
  {
    "text": "difference type instead of recasting n to difference type in these areas the",
    "start": "2043080",
    "end": "2050280"
  },
  {
    "text": "best example to understand that relative versus absolute least stood Crono that we haven't in the c+ library since 2011",
    "start": "2050280",
    "end": "2057720"
  },
  {
    "text": "where we have time points and duration time point is the absolute thing and",
    "start": "2057720",
    "end": "2063179"
  },
  {
    "text": "duration is a relative thing why you can substract two time points you always end",
    "start": "2063179",
    "end": "2068580"
  },
  {
    "text": "up at getting a duration and not getting a new time point you can add a duration to a time point and you get a new time",
    "start": "2068580",
    "end": "2075388"
  },
  {
    "text": "point adding two time points is nonsense in contrast adding to let's say counts",
    "start": "2075389",
    "end": "2081810"
  },
  {
    "text": "is reasonable because they are always zero based but a time point has an arbitrary starting time we don't",
    "start": "2081810",
    "end": "2088500"
  },
  {
    "text": "represent time points from the beginning because we don't know when the beginning was its arbitrary so adding time points",
    "start": "2088500",
    "end": "2096210"
  },
  {
    "text": "is nonsense adding duration gives a longer duration which is sane and reasonable and this",
    "start": "2096210",
    "end": "2101700"
  },
  {
    "text": "differentiation is very often forgotten when your model units for example many",
    "start": "2101700",
    "end": "2107099"
  },
  {
    "text": "anybody using something called back 3 or reg 3d or back to or 2d points there is",
    "start": "2107099",
    "end": "2115890"
  },
  {
    "text": "a type that represents maybe 3 integers or 3 double values and it can have two",
    "start": "2115890",
    "end": "2121770"
  },
  {
    "text": "roles one is the absolute role in a coordinate system a given position and the other role is the displacement the",
    "start": "2121770",
    "end": "2129109"
  },
  {
    "text": "actual vector pointing somewhere and that's the relative so actually these",
    "start": "2129109",
    "end": "2135450"
  },
  {
    "text": "types should have two different incarnations one for the absolute values and one for the relative values actually",
    "start": "2135450",
    "end": "2141000"
  },
  {
    "text": "distinguish them and have arithmetic around that I haven't yet seen a system where that is made that way the",
    "start": "2141000",
    "end": "2148589"
  },
  {
    "text": "distinction is made and that's where all kind of bugs come from like this ugly",
    "start": "2148589",
    "end": "2154349"
  },
  {
    "text": "stuff here and especially if you write a generic unit library which I tried and",
    "start": "2154349",
    "end": "2159450"
  },
  {
    "text": "failed so far to get there you must make the distinction absolutely relative values now there are people",
    "start": "2159450",
    "end": "2170500"
  },
  {
    "start": "2167000",
    "end": "2248000"
  },
  {
    "text": "working on strong types I myself try that again especially is aggregate that",
    "start": "2170500",
    "end": "2176260"
  },
  {
    "text": "inherit that's something what I am trying to make up like okay weight",
    "start": "2176260",
    "end": "2181420"
  },
  {
    "text": "counter is a strong unsigned taking weight count as a CR T P argument so",
    "start": "2181420",
    "end": "2186640"
  },
  {
    "text": "that's actually a type encapsulating an unsigned it's a weight counter consists",
    "start": "2186640",
    "end": "2191680"
  },
  {
    "text": "of a single unsigned and provides operations for equality comparison increment and output and the side",
    "start": "2191680",
    "end": "2198820"
  },
  {
    "text": "there's a static assert that does not begin then non sign so there's no overhead having these kind of features",
    "start": "2198820",
    "end": "2204280"
  },
  {
    "text": "but I have a limitation in the number of operations that I'm allowed to do I only can increment it it's a counter and",
    "start": "2204280",
    "end": "2211530"
  },
  {
    "text": "nothing else and I can compare it to to have a third equal and I also have",
    "start": "2211530",
    "end": "2217870"
  },
  {
    "text": "something that I'm not sure if I should call it that way but get actually breaks the capsulation to get out the the",
    "start": "2217870",
    "end": "2224620"
  },
  {
    "text": "underlying value which is kind of unconsciously standardized by the",
    "start": "2224620",
    "end": "2230500"
  },
  {
    "text": "standard library all kinds of wrappers that provide access to the underlying rep thing like unique pointer now",
    "start": "2230500",
    "end": "2238270"
  },
  {
    "text": "implement get to allow to access that so grep get in your code and you see where",
    "start": "2238270",
    "end": "2244750"
  },
  {
    "text": "the encapsulation is broken up MD",
    "start": "2244750",
    "end": "2249790"
  },
  {
    "start": "2248000",
    "end": "2286000"
  },
  {
    "text": "classes something-for-nothing in C++ you get something for nothing an",
    "start": "2249790",
    "end": "2255790"
  },
  {
    "text": "empty class is typically can be used with empty base class optimization and",
    "start": "2255790",
    "end": "2261040"
  },
  {
    "text": "CRT P makes sense to stay here in that realm by making better nicer value types",
    "start": "2261040",
    "end": "2266380"
  },
  {
    "text": "sometimes they're used as tags and trades with managing types or Oh polymorphic types and that's where empty",
    "start": "2266380",
    "end": "2273160"
  },
  {
    "text": "types can actually be useful who has written an empty class that with no data members who has used an empty class type",
    "start": "2273160",
    "end": "2282370"
  },
  {
    "text": "with no data members traits so they're different things one thing is iterate",
    "start": "2282370",
    "end": "2288910"
  },
  {
    "start": "2286000",
    "end": "2317000"
  },
  {
    "text": "attacks yeah all have used that without knowing when you call the standard library function because tag dispatch is",
    "start": "2288910",
    "end": "2296170"
  },
  {
    "text": "used there to get the best optimized version of an algorithm and that's a mechanic's art going on I don't want to go into details",
    "start": "2296170",
    "end": "2304040"
  },
  {
    "text": "there's also trades which are empty types that just have mechanics for getting at compile-time interesting",
    "start": "2304040",
    "end": "2310430"
  },
  {
    "text": "values from other things like with template specialization figuring out what stuff is going on and we have the",
    "start": "2310430",
    "end": "2318859"
  },
  {
    "start": "2317000",
    "end": "2380000"
  },
  {
    "text": "empty base class optimization there are some tricky things to get it really work for example if you have an empty type",
    "start": "2318859",
    "end": "2325880"
  },
  {
    "text": "it's not actually empty because every type has to have some location and you",
    "start": "2325880",
    "end": "2333710"
  },
  {
    "text": "only get a location when there is abide hanging around somewhere that you can point to if you combine empty types with",
    "start": "2333710",
    "end": "2340340"
  },
  {
    "text": "us something that is has something in it then the combined type is actually the",
    "start": "2340340",
    "end": "2346760"
  },
  {
    "text": "empty type is not adding place through that plain type because there is nothing to access there but there is already a",
    "start": "2346760",
    "end": "2354140"
  },
  {
    "text": "space for the plain type that's where the empty base cause optimization actually works and you need to come to",
    "start": "2354140",
    "end": "2362030"
  },
  {
    "text": "my lecture to learn more about that and we might actually get that form M empty members as well in C plus 20 with an",
    "start": "2362030",
    "end": "2369020"
  },
  {
    "text": "attribute called no unique address but I'm not sure we it's we don't have that",
    "start": "2369020",
    "end": "2375260"
  },
  {
    "text": "yet so we're it's not working I'm also that's a glimpse of what I'm trying to",
    "start": "2375260",
    "end": "2382220"
  },
  {
    "start": "2380000",
    "end": "2451000"
  },
  {
    "text": "achieve with my strong typing thing that's the version without the get to fit on the slides so for example the",
    "start": "2382220",
    "end": "2387980"
  },
  {
    "text": "Equality class type is actually a mixin",
    "start": "2387980",
    "end": "2393320"
  },
  {
    "text": "it doesn't have any real members and it's mixing in the Equality comparison",
    "start": "2393320",
    "end": "2398420"
  },
  {
    "text": "operator to the you type to be able to compare that and it's using how do you",
    "start": "2398420",
    "end": "2408920"
  },
  {
    "text": "call that",
    "start": "2408920",
    "end": "2411160"
  },
  {
    "text": "black out it's using a c-plus was 17 mechanism where you say okay I access",
    "start": "2415450",
    "end": "2421460"
  },
  {
    "text": "the members of a structure tuple and just take the conference to the members",
    "start": "2421460",
    "end": "2428540"
  },
  {
    "text": "and because there's only a single member that list consists of a single element and I know it's always a single member",
    "start": "2428540",
    "end": "2433610"
  },
  {
    "text": "so this equality thing not only works for types that use it strong but also",
    "start": "2433610",
    "end": "2439370"
  },
  {
    "text": "for your types that just wrap a single value and you can use that as a mix in base class for your type and adaptors is",
    "start": "2439370",
    "end": "2453410"
  },
  {
    "start": "2451000",
    "end": "2494000"
  },
  {
    "text": "something else that's empty but they require a lot of discipline where you can with inheriting constructors that we",
    "start": "2453410",
    "end": "2459560"
  },
  {
    "text": "get from C+ 17 this is a set that actually provides index access to the",
    "start": "2459560",
    "end": "2464930"
  },
  {
    "text": "set elements so you can write your strange loops with that and that's an",
    "start": "2464930",
    "end": "2473150"
  },
  {
    "text": "empty adapter not adding members to the set but inheriting from the set using these adapters typically requires that",
    "start": "2473150",
    "end": "2480560"
  },
  {
    "text": "you exclusively use the the adapter and not the base class and no never never",
    "start": "2480560",
    "end": "2485750"
  },
  {
    "text": "actually up cast with the base class which requires discipline to make it right and I'm sure I lost you but we're",
    "start": "2485750",
    "end": "2493430"
  },
  {
    "text": "running out of time pointing types pointing types require",
    "start": "2493430",
    "end": "2498980"
  },
  {
    "start": "2494000",
    "end": "2582000"
  },
  {
    "text": "high discipline and that's point as reference and all kind of smarts things smart pointers might go into the",
    "start": "2498980",
    "end": "2505880"
  },
  {
    "text": "managing area so a unique point is actually a managing type that is a pointing type so a lot of managing types",
    "start": "2505880",
    "end": "2512960"
  },
  {
    "text": "if you have a manager that you have to pass on the call chain to actually have global let's say semi global state you",
    "start": "2512960",
    "end": "2519890"
  },
  {
    "text": "might need a pointing type like a reference or polymorphic type to",
    "start": "2519890",
    "end": "2524930"
  },
  {
    "text": "actually have that dynamic polymorphism you need a pointing type of reference or a pointer to actually make use of",
    "start": "2524930",
    "end": "2531230"
  },
  {
    "text": "virtual if you only pass pointing types",
    "start": "2531230",
    "end": "2536450"
  },
  {
    "text": "down the call chain then lifetime management is easy and that makes it",
    "start": "2536450",
    "end": "2542810"
  },
  {
    "text": "safe and sane ever you keep something hanging around that you pass sideways or up the coal",
    "start": "2542810",
    "end": "2549869"
  },
  {
    "text": "chain make sure you have lifetime extension either by having a managing type or some other means that is not",
    "start": "2549869",
    "end": "2555930"
  },
  {
    "text": "going away very bad things happen if the Poynting types is nullable so it might",
    "start": "2555930",
    "end": "2561690"
  },
  {
    "text": "point to nothing that's a danger and the biggest danger is dangling pointing",
    "start": "2561690",
    "end": "2567240"
  },
  {
    "text": "types something dangles if it points to something that's no longer there and that's the biggest danger that's where",
    "start": "2567240",
    "end": "2573810"
  },
  {
    "text": "the high discipline actually kicks in where you have to make sure it's not dangling and there are things that are",
    "start": "2573810",
    "end": "2579840"
  },
  {
    "text": "pointing types that are not pointers like iterators who has ever made it back",
    "start": "2579840",
    "end": "2586710"
  },
  {
    "start": "2582000",
    "end": "2648000"
  },
  {
    "text": "because an iterator was invalidated yeah so dangling smart pointers reference",
    "start": "2586710",
    "end": "2595859"
  },
  {
    "text": "wrappers which is underappreciated and I'm not sure if my ideas of using it",
    "start": "2595859",
    "end": "2601230"
  },
  {
    "text": "more is actually a good idea but maybe and now we get views like string view",
    "start": "2601230",
    "end": "2606330"
  },
  {
    "text": "and spans so it's not only pointer a string view or a span that we might get in 20 is really a referencing a pointing",
    "start": "2606330",
    "end": "2614670"
  },
  {
    "text": "type where you have the danger of it being dangling and there are some",
    "start": "2614670",
    "end": "2623160"
  },
  {
    "text": "pointing types that have interesting study Havel icons reference a new lifetime extension but only and that but",
    "start": "2623160",
    "end": "2630780"
  },
  {
    "text": "only is almost as intricate as the rules",
    "start": "2630780",
    "end": "2635910"
  },
  {
    "text": "for some integral promotion you never know if you're doing it right you make a tiny change and you break it because it",
    "start": "2635910",
    "end": "2641970"
  },
  {
    "text": "becomes dangling iterators yes pointers",
    "start": "2641970",
    "end": "2650040"
  },
  {
    "start": "2648000",
    "end": "2801000"
  },
  {
    "text": "no pointers my guideline today is no playing pointers not even for a single",
    "start": "2650040",
    "end": "2657270"
  },
  {
    "text": "element thing like the core guidelines say because when you see a point you",
    "start": "2657270",
    "end": "2662460"
  },
  {
    "text": "know okay this is a place where I have to refactor and tell the user what the",
    "start": "2662460",
    "end": "2669089"
  },
  {
    "text": "pointer actually means if it's really a pointer and very often the point as I use without any need and no C style",
    "start": "2669089",
    "end": "2676560"
  },
  {
    "text": "arrays they are not fitting well into the C++ type system because they decay to",
    "start": "2676560",
    "end": "2682820"
  },
  {
    "text": "pointers as well and not even point arithmetic we have seen code like that",
    "start": "2682820",
    "end": "2688390"
  },
  {
    "text": "one of P I don't that's something",
    "start": "2688390",
    "end": "2695300"
  },
  {
    "text": "inherited from B and C don't it's very confusing for those who have not used",
    "start": "2695300",
    "end": "2700820"
  },
  {
    "text": "that language and it's something you wouldn't want to do and it's point arithmetic is bad very very bad managers",
    "start": "2700820",
    "end": "2712150"
  },
  {
    "text": "it's a German rigid corner Gordon inventor you told me oh I have these object types that don't inherit",
    "start": "2712150",
    "end": "2718670"
  },
  {
    "text": "that they are still encapsulating interesting stuff and have stayed that change then that's relevant and he",
    "start": "2718670",
    "end": "2724010"
  },
  {
    "text": "coined the term monomorphic object types sitting next to me and I'm not sure if that's good at here but it's not",
    "start": "2724010",
    "end": "2729500"
  },
  {
    "text": "polymorphic so no inheritance just encapsulation and that's important to do that and sometimes we have that kind of",
    "start": "2729500",
    "end": "2735410"
  },
  {
    "text": "state at least as long as you're not thinking eval use exclusively any",
    "start": "2735410",
    "end": "2740510"
  },
  {
    "text": "Haskell programmers here these managing things are kind of okay we have stayed",
    "start": "2740510",
    "end": "2747080"
  },
  {
    "text": "that my change it goes into the directory of monads not exactly amounted",
    "start": "2747080",
    "end": "2753020"
  },
  {
    "text": "but something so if we have these managing types we can actually make them",
    "start": "2753020",
    "end": "2758150"
  },
  {
    "text": "more sane and safe by making them move only so you actually are not copying",
    "start": "2758150",
    "end": "2763730"
  },
  {
    "text": "some resources around or we can have ra íí- or we can actually have the magic of",
    "start": "2763730",
    "end": "2769580"
  },
  {
    "text": "vector where we make it a value type with a lot of effort to make it right and another effort on the template",
    "start": "2769580",
    "end": "2777920"
  },
  {
    "text": "arguments and pointing types are also safe and sane as I said if you only use",
    "start": "2777920",
    "end": "2783440"
  },
  {
    "text": "them down the call chain and I don't want to go in the details because we're",
    "start": "2783440",
    "end": "2788839"
  },
  {
    "text": "running out of time we're running out of time we're running out of time don't write your own generic REI wrapper a",
    "start": "2788839",
    "end": "2795080"
  },
  {
    "text": "non-generic one is okayish but wait for C+ was twenties unique resource I hope",
    "start": "2795080",
    "end": "2800089"
  },
  {
    "text": "we will get that dynamic polymorphism Shawn parent says inheritance is a base class of all evil and it's much overused",
    "start": "2800089",
    "end": "2808940"
  },
  {
    "start": "2801000",
    "end": "2835000"
  },
  {
    "text": "we are all were trained at least of my in object-orientation but we forgot very",
    "start": "2808940",
    "end": "2815270"
  },
  {
    "text": "often about the biggest advantages encapsulation first all that inheritance",
    "start": "2815270",
    "end": "2821270"
  },
  {
    "text": "stuff is tricky and hard to get right and usually used much too often",
    "start": "2821270",
    "end": "2829720"
  },
  {
    "text": "abstractions but many abstractions don't share that much of commonality who knows",
    "start": "2829720",
    "end": "2837530"
  },
  {
    "start": "2835000",
    "end": "2911000"
  },
  {
    "text": "that table by Howard Tennant when you",
    "start": "2837530",
    "end": "2842960"
  },
  {
    "text": "write some constructor or a special member function what do you actually get",
    "start": "2842960",
    "end": "2848050"
  },
  {
    "text": "if you don't know the table go to howard Heenan's talk in a sees you 2013 and let",
    "start": "2848050",
    "end": "2854210"
  },
  {
    "text": "it explain to you and there are some box in the Senate that we can get rid of like oh I define a destructor but still",
    "start": "2854210",
    "end": "2861470"
  },
  {
    "text": "my class stays copyable and that's one of the curses of dynamic polymorphic",
    "start": "2861470",
    "end": "2867109"
  },
  {
    "text": "type we have that user declared a structure virtual defaulted even but",
    "start": "2867109",
    "end": "2872840"
  },
  {
    "text": "still your class is copyable and it shouldn't be because copying in the",
    "start": "2872840",
    "end": "2880400"
  },
  {
    "text": "inheritance hierarchy very often leads and leads to slicing and getting bad stuff there happening and also what's",
    "start": "2880400",
    "end": "2888109"
  },
  {
    "text": "what's interesting if you define a move assignment operator you still get a default constructor a",
    "start": "2888109",
    "end": "2894230"
  },
  {
    "text": "default destructor no copying and no move operation and if you declare that",
    "start": "2894230",
    "end": "2899330"
  },
  {
    "text": "deleted you never will be able to move it that's a good thing sometimes",
    "start": "2899330",
    "end": "2904369"
  },
  {
    "text": "especially the managed types should not be moved around they just should stick",
    "start": "2904369",
    "end": "2909950"
  },
  {
    "text": "there and that's my recommendation if you write oh oh polymorphic base classes",
    "start": "2909950",
    "end": "2919420"
  },
  {
    "start": "2911000",
    "end": "2939000"
  },
  {
    "text": "declare a destructor and declare deleted move assignment operator and you get no",
    "start": "2919420",
    "end": "2926480"
  },
  {
    "text": "copying and no moving which is a good thing for polymorphic types and I will",
    "start": "2926480",
    "end": "2933230"
  },
  {
    "text": "put my slides up on line on my private wiki and almost all hierarchies are",
    "start": "2933230",
    "end": "2941240"
  },
  {
    "start": "2939000",
    "end": "3111000"
  },
  {
    "text": "wrong and that are the same combinations of classes and the constructor different so aggregates don't have a",
    "start": "2941240",
    "end": "2947810"
  },
  {
    "text": "constructor all fields are public or all members are public so you get all default operations they just work unless",
    "start": "2947810",
    "end": "2956510"
  },
  {
    "text": "you have a member that's non copyable then you get a moove only or non movable but again things usually just work",
    "start": "2956510",
    "end": "2963619"
  },
  {
    "text": "simple value classes might have a constructor so you might either resurrect the default constructor of",
    "start": "2963619",
    "end": "2970280"
  },
  {
    "text": "this as a reasonable default value or you might not have a default constructor because your class guarantees an",
    "start": "2970280",
    "end": "2976550"
  },
  {
    "text": "invariant like an integer that's never zero because you want to divide by it that could be an interesting value type",
    "start": "2976550",
    "end": "2984710"
  },
  {
    "text": "that you might be using using your dynamic domain we have manager types that very often have a constructor maybe",
    "start": "2984710",
    "end": "2993400"
  },
  {
    "text": "have a default constructor usually not where a destructor and any kind of",
    "start": "2993400",
    "end": "3000819"
  },
  {
    "text": "moving around is expert level coding aria I have some constructor no default",
    "start": "3000819",
    "end": "3008530"
  },
  {
    "text": "constructor usually at least have a user declare destructor which is can also be",
    "start": "3008530",
    "end": "3014589"
  },
  {
    "text": "very expert level to get it right and are usually not copyable and might be",
    "start": "3014589",
    "end": "3019750"
  },
  {
    "text": "move rule or not because today we can actually have local variables of our a a I taught and they don't have to move",
    "start": "3019750",
    "end": "3026410"
  },
  {
    "text": "around a copy around and even you can return them from a factory in C+ or 17",
    "start": "3026410",
    "end": "3031420"
  },
  {
    "text": "without being movable and it's safe and sane Oh Oh danger lurking",
    "start": "3031420",
    "end": "3037720"
  },
  {
    "text": "maybe constructor no copy no movement does it that is my recommendation don't",
    "start": "3037720",
    "end": "3044650"
  },
  {
    "text": "copy or move polymorphic times at least",
    "start": "3044650",
    "end": "3051040"
  },
  {
    "text": "not with the standard mechanism there are people trying to get deep cloning",
    "start": "3051040",
    "end": "3056050"
  },
  {
    "text": "SmartPoint in the Senate library I thought it was a good idea today I think it's not a good idea if you have a",
    "start": "3056050",
    "end": "3063400"
  },
  {
    "text": "polymorphism virtual member functions don't copy many of your classes okay",
    "start": "3063400",
    "end": "3071020"
  },
  {
    "text": "they are good but if you want to have value properties copying and moving our",
    "start": "3071020",
    "end": "3077290"
  },
  {
    "text": "expert level implement and very easy to get wrong like forgetting the bait to move the base",
    "start": "3077290",
    "end": "3083200"
  },
  {
    "text": "class and stuff like that it's very easy to get wrong and sometimes very hard to test especially if the manager class the",
    "start": "3083200",
    "end": "3089770"
  },
  {
    "text": "kind of a generic class you might actually write interesting template argument types for your test case like",
    "start": "3089770",
    "end": "3095920"
  },
  {
    "text": "okay a type that's non copyable non movable or throws on every second attempt to copy and make sure that your",
    "start": "3095920",
    "end": "3103270"
  },
  {
    "text": "class actually doesn't perfect you error is broken from that and there are other",
    "start": "3103270",
    "end": "3109000"
  },
  {
    "text": "means look at your own parents talk so if you could look at our landscape don't",
    "start": "3109000",
    "end": "3114400"
  },
  {
    "text": "go here stay here make your classes whole value per and set my message today and takeaways",
    "start": "3114400",
    "end": "3122040"
  },
  {
    "start": "3121000",
    "end": "3390000"
  },
  {
    "text": "appreciate the C++ type system whenever you write a cost it's the time to stop",
    "start": "3122040",
    "end": "3127540"
  },
  {
    "text": "and think and refactor consider each cast that you write an indication of a",
    "start": "3127540",
    "end": "3135880"
  },
  {
    "text": "problem in your modeling of the system what try to model with value types first",
    "start": "3135880",
    "end": "3145290"
  },
  {
    "text": "be aware of relative where this absolute dimension if you have kind of units in",
    "start": "3145589",
    "end": "3151000"
  },
  {
    "text": "your system wrap all kind of primitives using whole value I consider using in",
    "start": "3151000",
    "end": "3157720"
  },
  {
    "text": "taboc a design bug be aware of the",
    "start": "3157720",
    "end": "3163990"
  },
  {
    "text": "required expect especially in a safe recruiting system because in the end can represent everything it doesn't mean it",
    "start": "3163990",
    "end": "3170319"
  },
  {
    "text": "means nothing and you wonder meaning Unicode to be it maintainable and understandable and half",
    "start": "3170319",
    "end": "3175660"
  },
  {
    "text": "the compiler actually check that you misused it be aware of the required",
    "start": "3175660",
    "end": "3183099"
  },
  {
    "text": "expertise and it's not only Scott Myers alone that you need to learn by heart to make the managers and oo hierarchy is",
    "start": "3183099",
    "end": "3189880"
  },
  {
    "text": "correct be very disciplined about using pointing types we cannot get rid of them",
    "start": "3189880",
    "end": "3195130"
  },
  {
    "text": "completely but be careful and understand the implications of the potential",
    "start": "3195130",
    "end": "3200380"
  },
  {
    "text": "dangling and the normal and run away",
    "start": "3200380",
    "end": "3206109"
  },
  {
    "text": "from types that have weird special member function combinations",
    "start": "3206109",
    "end": "3211050"
  },
  {
    "text": "which might even be legacy types that define copies without caring about moves and some like that or defined",
    "start": "3211480",
    "end": "3218050"
  },
  {
    "text": "instructors without caring about copy and moves very bad things and that's it",
    "start": "3218050",
    "end": "3224640"
  },
  {
    "text": "who has a question I have two hats to give away and we're running out of time",
    "start": "3224640",
    "end": "3231630"
  },
  {
    "text": "question there was one there and one there and you both get ahead so you",
    "start": "3231630",
    "end": "3239920"
  },
  {
    "text": "first yeah",
    "start": "3239920",
    "end": "3247020"
  },
  {
    "text": "well in c-plus was eleven you can't you don't have spaceship but let's say you",
    "start": "3251920",
    "end": "3257350"
  },
  {
    "text": "only have to write the comparative the spaceship operator and then you get all the other comparisons for free",
    "start": "3257350",
    "end": "3263290"
  },
  {
    "text": "automatically by the compiler",
    "start": "3263290",
    "end": "3266610"
  },
  {
    "text": "today you wouldn't change anything what you might do is use that empty based",
    "start": "3270180",
    "end": "3275319"
  },
  {
    "text": "optimization trick to actually mix in the comparison operators for your type but not not not anything today there's",
    "start": "3275319",
    "end": "3285039"
  },
  {
    "text": "nothing you can do today because the compilers that don't give you a spaceship another question don't today",
    "start": "3285039",
    "end": "3307029"
  },
  {
    "text": "let's say back you can use vector with types that are not default constructible it requires a lot of let's say",
    "start": "3307029",
    "end": "3313809"
  },
  {
    "text": "implementation of effort on the side of vector but you can do that so there's no",
    "start": "3313809",
    "end": "3319779"
  },
  {
    "text": "need for having everything well even if",
    "start": "3319779",
    "end": "3336970"
  },
  {
    "text": "it's not default constructible you can actually for you if you use it and know okay for me it's always the ace of",
    "start": "3336970",
    "end": "3343420"
  },
  {
    "text": "hearts that the default value then you can provide that default value in the",
    "start": "3343420",
    "end": "3349859"
  },
  {
    "text": "member definition as a member initializer and then it's in debt usage",
    "start": "3349859",
    "end": "3355930"
  },
  {
    "text": "domain that's the default value but not for a playing card what is the default playing card there is no reasonable",
    "start": "3355930",
    "end": "3362140"
  },
  {
    "text": "default maybe except for joker so the",
    "start": "3362140",
    "end": "3368049"
  },
  {
    "text": "user can provide a default value but that's deliberate they're not an implicitly for well there's no reasonable implicit default value there",
    "start": "3368049",
    "end": "3378579"
  },
  {
    "text": "was another question or someone ran out I think we need to stop now because we want to change rooms and maybe have a",
    "start": "3378579",
    "end": "3385240"
  },
  {
    "text": "break thank you a lot you",
    "start": "3385240",
    "end": "3389619"
  }
]