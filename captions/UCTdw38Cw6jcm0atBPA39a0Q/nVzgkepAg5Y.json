[
  {
    "start": "0",
    "end": "135000"
  },
  {
    "text": "wow what a massive audience thank you it's awesome I was talking to a friend",
    "start": "1159",
    "end": "9179"
  },
  {
    "text": "yesterday and he kept on asking like okay but your workshop and your talks",
    "start": "9179",
    "end": "15000"
  },
  {
    "text": "what do they have to do with dotnet and c-sharp I tried to explain it they're",
    "start": "15000",
    "end": "20520"
  },
  {
    "text": "not he came up but yeah but what do they have to do with c-sharp I said no so this is not really the C++",
    "start": "20520",
    "end": "28590"
  },
  {
    "text": "conference so um apologies if you wish we're going to talk about an idea that I",
    "start": "28590",
    "end": "37530"
  },
  {
    "text": "had in 2012 and something that happened since so I presented the idea and the funniest",
    "start": "37530",
    "end": "47820"
  },
  {
    "text": "thing happened the years later I looked on my Wikipedia page yes I have a wiki",
    "start": "47820",
    "end": "57510"
  },
  {
    "text": "up Wikipedia page friends so I was looking at my API page which I never do",
    "start": "57510",
    "end": "63059"
  },
  {
    "text": "anything with I never participated and just let people go so essentially there's a guy who deleted everything",
    "start": "63059",
    "end": "68760"
  },
  {
    "text": "I've done from Wikipedia and there was one thing left which was Andre invented",
    "start": "68760",
    "end": "76590"
  },
  {
    "text": "the expected type that's the only thing on Wikipedia probably right now that I",
    "start": "76590",
    "end": "82799"
  },
  {
    "text": "did and so I thought I should give a talk about it because it seems to be of",
    "start": "82799",
    "end": "88380"
  },
  {
    "text": "the last bastion of things that I've done that I've are interesting to people so what happened was after I presented",
    "start": "88380",
    "end": "97409"
  },
  {
    "text": "this this idea in in 2012 one fine",
    "start": "97409",
    "end": "103799"
  },
  {
    "text": "German Jean Francois Bastian he took it and ran with it he was very nice to give",
    "start": "103799",
    "end": "109409"
  },
  {
    "text": "me credit to but essentially he took he did all the legwork which is real not like 95% of the work to standardize it",
    "start": "109409",
    "end": "116960"
  },
  {
    "text": "so as of right now what we're talking about is being proposed for standardization for C+ was 20 so you",
    "start": "116960",
    "end": "126180"
  },
  {
    "text": "know this talk might have might be more applicable in the near future than",
    "start": "126180",
    "end": "133270"
  },
  {
    "text": "than it may seem ok so we're going to start with discussing exceptions who's a",
    "start": "133270",
    "end": "140500"
  },
  {
    "start": "135000",
    "end": "363000"
  },
  {
    "text": "fan yes like it's okay who's coding C++",
    "start": "140500",
    "end": "145590"
  },
  {
    "text": "starting with a couple of us don't okay who hates exception exceptions",
    "start": "145590",
    "end": "152080"
  },
  {
    "text": "exceptions suck man the same people right okay so the left hand votes that",
    "start": "152080",
    "end": "157360"
  },
  {
    "text": "way right hand goes the other way awesome so most of us you know when I",
    "start": "157360",
    "end": "163390"
  },
  {
    "text": "read about the exceptions quite literally my for my next like you know five thousand lines of code they all had",
    "start": "163390",
    "end": "169450"
  },
  {
    "text": "a try-catch in there there's all the functions I wrote oh my god so awesome and try and catch and they become blue",
    "start": "169450",
    "end": "175990"
  },
  {
    "text": "in the editor now so jazz the body oh my god is the key word so I get to do try",
    "start": "175990",
    "end": "182200"
  },
  {
    "text": "and catch and catch things and throw things and that was awesome but I took them for for the most part all of this",
    "start": "182200",
    "end": "189220"
  },
  {
    "text": "exception business for me it was well this is the feature you gotta use it going forward and it was very unclear to",
    "start": "189220",
    "end": "196720"
  },
  {
    "text": "me what would be the motivation of exceptions and how do they came about like how come it's all about this",
    "start": "196720",
    "end": "202600"
  },
  {
    "text": "throwing catch and stack unwinding on all of this nonsense right so what we're going to do right now is we're going to",
    "start": "202600",
    "end": "208930"
  },
  {
    "text": "start from P universe without exceptions and we're going to slowly figure out",
    "start": "208930",
    "end": "215530"
  },
  {
    "text": "what it takes to handle errors non-locally if you wish and we're going",
    "start": "215530",
    "end": "221800"
  },
  {
    "text": "to get to a model of exceptions that is pretty much the the proposed model the existing model so first of all like I",
    "start": "221800",
    "end": "231570"
  },
  {
    "text": "press the okay great have this new remote which does this about that",
    "start": "231690",
    "end": "238020"
  },
  {
    "text": "alright so what would be a proper proper baseline so what do you compare except",
    "start": "238020",
    "end": "243730"
  },
  {
    "text": "some exceptions against a Zener handling mechanism right what are the design goals what are the use cases how do",
    "start": "243730",
    "end": "250030"
  },
  {
    "text": "their semantics support these use cases as etc so I'm sure most of us in this",
    "start": "250030",
    "end": "258760"
  },
  {
    "text": "room do have a notional you know they have some some some perception some some",
    "start": "258760",
    "end": "265000"
  },
  {
    "text": "ideas about to answering these questions so let's move on to considering the exceptions so",
    "start": "265000",
    "end": "275699"
  },
  {
    "text": "you know the base the core definition of an exception it would be an exceptional case the problem with this definition is",
    "start": "275699",
    "end": "282860"
  },
  {
    "text": "what's exceptional really depends a lot on the context is by in exceptional is",
    "start": "282860",
    "end": "288180"
  },
  {
    "text": "by definition subjective because what's exception is not normal what is normal",
    "start": "288180",
    "end": "294449"
  },
  {
    "text": "the norm what is not norm something that we encounter all day long right it's",
    "start": "294449",
    "end": "300479"
  },
  {
    "text": "sort of the average is the you know the the run-of-the-mill situation so I've",
    "start": "300479",
    "end": "306569"
  },
  {
    "text": "been working on systems in which things that would be considered normal exceptional were not being organ systems",
    "start": "306569",
    "end": "313620"
  },
  {
    "text": "such as machines interconnected via via a very very solid interconnect and if",
    "start": "313620",
    "end": "320039"
  },
  {
    "text": "there's the two machines are not communicating that would be of as bad as the RAM not working so in that case",
    "start": "320039",
    "end": "327599"
  },
  {
    "text": "opening a file or communicating when opening a socket to the other machine would have been an exceptional case",
    "start": "327599",
    "end": "334099"
  },
  {
    "text": "similarly something that would be considered a normal normal thing",
    "start": "334099",
    "end": "341000"
  },
  {
    "text": "otherwise would be exceptional in these other systems etc so depending on the",
    "start": "341000",
    "end": "346229"
  },
  {
    "text": "situation you may consider exceptional things different by the you know atom",
    "start": "346229",
    "end": "351240"
  },
  {
    "text": "like person whom so you know Alan Perlis he he's sort of the father of computing",
    "start": "351240",
    "end": "357960"
  },
  {
    "text": "funny one-liners and he said famously that one man's constant is another man's variable so what do we want from an",
    "start": "357960",
    "end": "366839"
  },
  {
    "start": "363000",
    "end": "1032000"
  },
  {
    "text": "exception system that error handling in general that is that is palatable we",
    "start": "366839",
    "end": "373589"
  },
  {
    "text": "want to learn it once and use many times we don't to have many mechanisms say",
    "start": "373589",
    "end": "379289"
  },
  {
    "text": "they'll open a parenthesis right here sadly in c-plus we have quite a few ways of finding errors and more are coming by",
    "start": "379289",
    "end": "386099"
  },
  {
    "text": "which is a sign to me that people are not really super happy with what's going on right now",
    "start": "386099",
    "end": "391159"
  },
  {
    "text": "who knows about herb satis latest proposal all right so I'm in the right crowd here so I'm seeing a pair Apache",
    "start": "391159",
    "end": "398219"
  },
  {
    "text": "there of people who are like yeah you know know so we want to minimize",
    "start": "398219",
    "end": "403800"
  },
  {
    "text": "soft airs and maximize the Harder's and what's softer what's a heart there who",
    "start": "403800",
    "end": "408930"
  },
  {
    "text": "can as I'm taking this turn from reliability from from reliability theory",
    "start": "408930",
    "end": "415620"
  },
  {
    "text": "if you wish what would be a software a software is not discovered immediately a hardware is discovered as soon as it",
    "start": "415620",
    "end": "422729"
  },
  {
    "text": "happens you can have a you can have detection so what would be an example of a software and c++ Thank You dangling",
    "start": "422729",
    "end": "433320"
  },
  {
    "text": "pointer you said it yesterday too so a dangling pointer would be a great example because he just sits there and",
    "start": "433320",
    "end": "439020"
  },
  {
    "text": "the program I even continued running almost correctly until he doesn't write",
    "start": "439020",
    "end": "444840"
  },
  {
    "text": "and you know all the demon asel demons and stuff those of you who've been yesterday in the tsipras's meetup",
    "start": "444840",
    "end": "452810"
  },
  {
    "text": "organized by by Pat here so you know Adi gave a great great talk and part of it",
    "start": "452810",
    "end": "459509"
  },
  {
    "text": "was a function that was never called that will remove everything from her drive and even though it was ostensibly",
    "start": "459509",
    "end": "466139"
  },
  {
    "text": "never called it was called and it was it would remove everything from her drive",
    "start": "466139",
    "end": "471949"
  },
  {
    "text": "simply because the the C++ a model of computation considers all behavior",
    "start": "471949",
    "end": "480000"
  },
  {
    "text": "defined and by that you know considers that the behavior of any given program is defined and does optimizations based",
    "start": "480000",
    "end": "487800"
  },
  {
    "text": "on that assumption and then whenever you have undefined behavior it's going to",
    "start": "487800",
    "end": "492840"
  },
  {
    "text": "you know really odd things are going to happen now you know we want to minimize",
    "start": "492840",
    "end": "499080"
  },
  {
    "text": "these softwares we want to have as few software's as possible that you know it's a bad the software is a bad thing",
    "start": "499080",
    "end": "504570"
  },
  {
    "text": "you know in a reliable system we want to maximize the hard does you detect them as soon as they happen",
    "start": "504570",
    "end": "510300"
  },
  {
    "text": "another thing that we want would be to allow centralized but also local",
    "start": "510300",
    "end": "515610"
  },
  {
    "text": "handling right and I'm sure you can figure out some assistance for handing",
    "start": "515610",
    "end": "521070"
  },
  {
    "text": "girls are good at local hanging immediately right there you test an error code real quick right and the",
    "start": "521070",
    "end": "527370"
  },
  {
    "text": "others would be you know better centralized error handling which is I throw from everywhere",
    "start": "527370",
    "end": "532500"
  },
  {
    "text": "catch in one place right by the way by show of hands how many of you think what",
    "start": "532500",
    "end": "543060"
  },
  {
    "text": "is okay now how do i phrase this what is the ideal ratio of throws two catches 1",
    "start": "543060",
    "end": "551250"
  },
  {
    "text": "to 1 or less 0 to 0 0 to 0 is correct no",
    "start": "551250",
    "end": "558810"
  },
  {
    "text": "matter what okay 10 to 1 ten throws for each one catch",
    "start": "558810",
    "end": "564590"
  },
  {
    "text": "all right 100 to 1 1000 to 1 or more",
    "start": "564590",
    "end": "573410"
  },
  {
    "text": "all right thank you so we have a few opinions I think I have no idea but I",
    "start": "573410",
    "end": "579000"
  },
  {
    "text": "think that there's no answer to this but I do I do think and a lot of people",
    "start": "579000",
    "end": "584280"
  },
  {
    "text": "agree that you need to have in a good application a bunch of throws but only a",
    "start": "584280",
    "end": "589710"
  },
  {
    "text": "handful of caches because exceptions are designed specifically for handling",
    "start": "589710",
    "end": "594960"
  },
  {
    "text": "errors in in a centralized fashion as opposed to in a local in a local manner",
    "start": "594960",
    "end": "600030"
  },
  {
    "text": "right but we want both because sometimes you want that sometimes you want the",
    "start": "600030",
    "end": "605490"
  },
  {
    "text": "other so you want a flexible system and that's what we're going to aim for this this talk we want to be able to",
    "start": "605490",
    "end": "613230"
  },
  {
    "text": "transport an arbitrary keep on we want to transport this arbitrary amount of",
    "start": "613230",
    "end": "618330"
  },
  {
    "text": "very information from the from the throw side to the castle from whenever there happened to wherever there is going to",
    "start": "618330",
    "end": "624510"
  },
  {
    "text": "be detected and handled so that's an interesting thing we would like to have",
    "start": "624510",
    "end": "630780"
  },
  {
    "text": "and we want to have a little cast on the normal path which we're going to discuss",
    "start": "630780",
    "end": "635820"
  },
  {
    "text": "a bit today and of course we want to make correct code easy to write",
    "start": "635820",
    "end": "641430"
  },
  {
    "text": "incorrect or difficult to write though I I think we're in agreement about this",
    "start": "641430",
    "end": "647100"
  },
  {
    "text": "list of the I have a dream right great",
    "start": "647100",
    "end": "654829"
  },
  {
    "text": "exhibit number a your honor members of the jury I'm sure the a to I",
    "start": "655339",
    "end": "663030"
  },
  {
    "text": "function which is I mean you know let's let's give it credit it's like probably",
    "start": "663030",
    "end": "668160"
  },
  {
    "text": "the first function in the C programming language ever invented right so it's a",
    "start": "668160",
    "end": "673890"
  },
  {
    "text": "it's an epitome of poor error handling the problem is a 2y is in case of error",
    "start": "673890",
    "end": "680040"
  },
  {
    "text": "in case anything bad happens doing parts in the string it will return 0 thank you",
    "start": "680040",
    "end": "689390"
  },
  {
    "text": "which just so happens to be the most frequent valid number right so then if",
    "start": "689390",
    "end": "696120"
  },
  {
    "text": "8y retail you call 8y you get 0 so then you need to kind of figure out was it a real 0 string or not the problem being",
    "start": "696120",
    "end": "704330"
  },
  {
    "text": "the actual string 0 but also the actual string with whitespace preceding 0 also",
    "start": "704330",
    "end": "711720"
  },
  {
    "text": "the string that has white space followed by a plus or minus sign followed by 55",
    "start": "711720",
    "end": "718650"
  },
  {
    "text": "zeroes if I wish followed by another million spaces because I can that's also",
    "start": "718650",
    "end": "726600"
  },
  {
    "text": "valid 0 so it turns out that the parsing the deciding whether a to I was right",
    "start": "726600",
    "end": "733290"
  },
  {
    "text": "you know encountered an error or not is almost as difficult as implementing 8y itself time",
    "start": "733290",
    "end": "743100"
  },
  {
    "text": "I'm not gonna renounce this joke no matter how much you don't laugh okay I'm not gonna so another problem with a 2y",
    "start": "743100",
    "end": "752700"
  },
  {
    "text": "which is also very interesting is that 8y is what's called in math a surjective",
    "start": "752700",
    "end": "760410"
  },
  {
    "text": "function and I summon thee to come back",
    "start": "760410",
    "end": "766710"
  },
  {
    "text": "from the drunkenness of your college years and tell me what the subjective",
    "start": "766710",
    "end": "771840"
  },
  {
    "text": "function is what is it okay you're",
    "start": "771840",
    "end": "777360"
  },
  {
    "text": "really drunk everybody ìiíd what he fainted he rose he was like I was just",
    "start": "777360",
    "end": "782970"
  },
  {
    "text": "actually yes it can have many different",
    "start": "782970",
    "end": "788370"
  },
  {
    "text": "inputs and a single output no f-",
    "start": "788370",
    "end": "794540"
  },
  {
    "text": "okay any yes please the range equals the",
    "start": "795660",
    "end": "802750"
  },
  {
    "text": "domain meaning whatever whatever code domain the function has you know the",
    "start": "802750",
    "end": "808180"
  },
  {
    "text": "possible values values of the output they're gonna be covered there's gonna be at least one value in the input",
    "start": "808180",
    "end": "813280"
  },
  {
    "text": "that's going to cover the output right which means you can't reserve a particular value of an int to say well",
    "start": "813280",
    "end": "821710"
  },
  {
    "text": "this particular int is a pariah so I'm going to say whenever there's an R I'm gonna return a pariah that does happen",
    "start": "821710",
    "end": "829030"
  },
  {
    "text": "with floating-point numbers because we have nan thank you very much that can",
    "start": "829030",
    "end": "834250"
  },
  {
    "text": "happen with pointers because we have now that could happen with strings can you",
    "start": "834250",
    "end": "843250"
  },
  {
    "text": "happen with strings is there a string that's a pariah no an empty string would be a valid valid string but I know a",
    "start": "843250",
    "end": "850270"
  },
  {
    "text": "string that never ever nobody ever ever has been in which and that would be your",
    "start": "850270",
    "end": "856900"
  },
  {
    "text": "prior string that returned in case of her don't do that I was kidding okay so",
    "start": "856900",
    "end": "862180"
  },
  {
    "text": "um a try being a suggestion can preserve a variance say you know whatever so you",
    "start": "862180",
    "end": "868390"
  },
  {
    "text": "know now just as a as a side remark there is an integer which is a semi pariah what what is your least favorite",
    "start": "868390",
    "end": "875800"
  },
  {
    "text": "integer I mean int not integer int in the you know like 32-bit end what is your least",
    "start": "875800",
    "end": "881920"
  },
  {
    "text": "favorite 32-bit end - one - one is very nice mean int why would be you can't",
    "start": "881920",
    "end": "894190"
  },
  {
    "text": "stay you can't - it and get something positive a bunch of code that seems that if you if X less than 0 X gets minus X",
    "start": "894190",
    "end": "902080"
  },
  {
    "text": "and they're like yes X is positive now except 1 is the minimum integer the you",
    "start": "902080",
    "end": "907900"
  },
  {
    "text": "know the most negative integer so that's a problem which when you write library code it's really unpleasant because you",
    "start": "907900",
    "end": "914380"
  },
  {
    "text": "gotta pay attention to this kind of nonsense right so anyway hy would be a good example of a function",
    "start": "914380",
    "end": "921190"
  },
  {
    "text": "that you know it has a number of issues related to error handling and I gotta",
    "start": "921190",
    "end": "927040"
  },
  {
    "text": "add the following in 8y there's two kinds of verse that may happen you may try to convert a",
    "start": "927040",
    "end": "932360"
  },
  {
    "text": "string that's not a number but you may also try to convert the string that is too large a number and these are",
    "start": "932360",
    "end": "939380"
  },
  {
    "text": "different errors you know you may have a string of digits that don't fit in an integer and many early implementation of",
    "start": "939380",
    "end": "946670"
  },
  {
    "text": "it too I forgot about that so they simply like they just go through the input and overflow the integer and they",
    "start": "946670",
    "end": "953120"
  },
  {
    "text": "just return in some nonsense right all right so let's discuss a bit about or no",
    "start": "953120",
    "end": "961089"
  },
  {
    "text": "like there no love there no right so",
    "start": "961510",
    "end": "967070"
  },
  {
    "text": "yeah I'm seeing like some sneakers in the room so area is general but it",
    "start": "967070",
    "end": "974960"
  },
  {
    "text": "doesn't mean my software's because pretty much nobody's looking at it ever it allows for centralized handing can do",
    "start": "974960",
    "end": "981440"
  },
  {
    "text": "a bunch of stuff and then look at there no it'll also look and Hanley do one thing and look at there no you can",
    "start": "981440",
    "end": "987860"
  },
  {
    "text": "execute an arbitrary cannot sorry cannot transport an arbitrary amount of error information from wherever it happens to",
    "start": "987860",
    "end": "995000"
  },
  {
    "text": "whatever wherever you are and that's a power because you know there's a kind of a crowding of error codes in operating",
    "start": "995000",
    "end": "1002680"
  },
  {
    "text": "systems they keep on trying to allocate new New York codes and you kind of skim out of for like divine I don't think if",
    "start": "1002680",
    "end": "1009460"
  },
  {
    "text": "this bit is whatever this happened so very pleasant when your user and you want to add your own error codes and",
    "start": "1009460",
    "end": "1017410"
  },
  {
    "text": "their get printed as I don't know filer or whatever I or so it's a bummer I",
    "start": "1017410",
    "end": "1023310"
  },
  {
    "text": "don't think I need to insist that turn-on would not be the best would not be the flagship that we work on from now",
    "start": "1023310",
    "end": "1029860"
  },
  {
    "text": "on right agreed thank you very much all right don't be a special value solution",
    "start": "1029860",
    "end": "1036189"
  },
  {
    "start": "1032000",
    "end": "1247000"
  },
  {
    "text": "which we discussed already problem you know the main problem is it's not generally enough to be considerable",
    "start": "1036190",
    "end": "1041800"
  },
  {
    "text": "considered there's simply no there are simply types with no no unique sorry no",
    "start": "1041800",
    "end": "1048370"
  },
  {
    "text": "singleton values no singular I meant to say values so pointers are good because",
    "start": "1048370",
    "end": "1055240"
  },
  {
    "text": "there's null and there's also a pointer minus one did you know down the pointer minus one",
    "start": "1055240",
    "end": "1062280"
  },
  {
    "text": "if you do memory-mapped i/o in linux that there's there are a number of functions that return you the pointer -",
    "start": "1062280",
    "end": "1068110"
  },
  {
    "text": "one you actually need to check because it's a it's a different error than if it returns null now I'm not kidding this is",
    "start": "1068110",
    "end": "1075790"
  },
  {
    "text": "what we have yeah not that joke don't don't ok so I make jokes people say like",
    "start": "1075790",
    "end": "1082360"
  },
  {
    "text": "whatever and then okay so with the",
    "start": "1082360",
    "end": "1087940"
  },
  {
    "text": "special value it's I'm sure everybody knows that the trade-offs involved and everything so you know I can't transport",
    "start": "1087940",
    "end": "1094570"
  },
  {
    "text": "whatever information I need and it's kind of a bummer it looks ad hoc and it's not a general solution right we",
    "start": "1094570",
    "end": "1104559"
  },
  {
    "text": "would have a solution that requires us to pass in the you know the I want to",
    "start": "1104559",
    "end": "1110080"
  },
  {
    "text": "pass in a sort of a pointer to the error information and the system fills it this",
    "start": "1110080",
    "end": "1115660"
  },
  {
    "text": "is very common in now in places like Windows API right in Windows you very",
    "start": "1115660",
    "end": "1122140"
  },
  {
    "text": "often whenever you want to receive an error code you cannot pass a pointer to an integer whatever and it feels it for",
    "start": "1122140",
    "end": "1129100"
  },
  {
    "text": "you with their code if if you asked for it also like the the C standard library has",
    "start": "1129100",
    "end": "1136450"
  },
  {
    "text": "the string to long function which takes a string but also takes this fine",
    "start": "1136450",
    "end": "1143470"
  },
  {
    "text": "gentleman here do you know what it does by the way C is like that you know it",
    "start": "1143470",
    "end": "1151000"
  },
  {
    "text": "should be in the Guinness Book of Records because he has the most functions for converting integer strings to integers in the world there's a - I",
    "start": "1151000",
    "end": "1157240"
  },
  {
    "text": "ate - I - you well you know it - whatever which are all bad right and then it has a string - long string -",
    "start": "1157240",
    "end": "1165700"
  },
  {
    "text": "long son long string - whatever and then it has a scan F and F scan F and then it has a massive even if there",
    "start": "1165700",
    "end": "1173290"
  },
  {
    "text": "are or are around or wherever standard ecv T does this ring a bell okay we are",
    "start": "1173290",
    "end": "1180850"
  },
  {
    "text": "old my friend you and I are old so what you gonna do okay this fine parameter",
    "start": "1180850",
    "end": "1188169"
  },
  {
    "text": "here e is passing by the user and filled by by the function itself with a pointer",
    "start": "1188169",
    "end": "1196060"
  },
  {
    "text": "to recall this is a double pointer I'm allowed to do double pointer this is a C++ doc not a c-sharp talk for those of",
    "start": "1196060",
    "end": "1203260"
  },
  {
    "text": "you can hit in the wrong place here so you pass in a pointer to a pointer to character and the function fills it with",
    "start": "1203260",
    "end": "1210250"
  },
  {
    "text": "wherever the conversion stopped and then it leaves it to you to divine whatever",
    "start": "1210250",
    "end": "1215770"
  },
  {
    "text": "the hell happened right it's like whoa so am I here right so usually you want",
    "start": "1215770",
    "end": "1221590"
  },
  {
    "text": "to be on the 0 character which would be the last you know past the end of the string meaning the whole string has been",
    "start": "1221590",
    "end": "1227560"
  },
  {
    "text": "converted R will be the the radix and by the way the radix can be as big as 32",
    "start": "1227560",
    "end": "1235530"
  },
  {
    "text": "because it yeah because it is like the lower case and upper case letters okay right so I'm happy to teach string too",
    "start": "1235530",
    "end": "1243190"
  },
  {
    "text": "long from 45 years ago and four months so how about exceptions given that we",
    "start": "1243190",
    "end": "1250720"
  },
  {
    "start": "1247000",
    "end": "1395000"
  },
  {
    "text": "have our list to begin with let us again this is a universe without exception so",
    "start": "1250720",
    "end": "1255730"
  },
  {
    "text": "we're free to invent syntax and stylize things a bit just for the time being right so let's talk about some like well",
    "start": "1255730",
    "end": "1263770"
  },
  {
    "text": "I have some invalid invalid input class which contains whatever information I want to pass about this function failing",
    "start": "1263770",
    "end": "1271720"
  },
  {
    "text": "and then I have something like well how about I return an int or an invalid",
    "start": "1271720",
    "end": "1277900"
  },
  {
    "text": "input so this or here would would signify a sort of some type of variant",
    "start": "1277900",
    "end": "1287820"
  },
  {
    "text": "right who knows what variants and some title a few of us so well some time is",
    "start": "1287820",
    "end": "1295750"
  },
  {
    "text": "like it's either this guy or the other guy and you know that the name of the some type would be the name is earned by",
    "start": "1295750",
    "end": "1303010"
  },
  {
    "text": "virtue of the type being able to encode everything that I mean has plus",
    "start": "1303010",
    "end": "1308790"
  },
  {
    "text": "everything that an invalid input or whatever the other guy is all right so it's the sum of the possible states so",
    "start": "1308790",
    "end": "1315520"
  },
  {
    "text": "that's a variant right so in our you know in our fledgling system of handling",
    "start": "1315520",
    "end": "1322510"
  },
  {
    "text": "errors we're gonna have to return either an int or some other thing that happened that you know that prevented me from",
    "start": "1322510",
    "end": "1329890"
  },
  {
    "text": "reducing that hint and all is good and dandy and then I'm going to do some sort of a type switch notice I made it blue",
    "start": "1329890",
    "end": "1336760"
  },
  {
    "text": "because it would be a sort of a pseudo keyword and then I pattern match against the some type and I say well was it the",
    "start": "1336760",
    "end": "1343180"
  },
  {
    "text": "first branch of the second branch and if it's the right branch and I'm going to",
    "start": "1343180",
    "end": "1349000"
  },
  {
    "text": "that's the happy case and otherwise is the unhappy case so you know you can read all about it",
    "start": "1349000",
    "end": "1354880"
  },
  {
    "text": "algebraic types and you know in the STD variant and boost variant and all that",
    "start": "1354880",
    "end": "1360460"
  },
  {
    "text": "good stuff now of course this is kind of hopelessly local and it's kind of weird",
    "start": "1360460",
    "end": "1366310"
  },
  {
    "text": "and one thing that I don't like is that we you know the the previous syntax here",
    "start": "1366310",
    "end": "1374170"
  },
  {
    "text": "I turn back a bit so the previous syntax here gives almost equal importance to the end and to the invalid input when",
    "start": "1374170",
    "end": "1381250"
  },
  {
    "text": "didn't we agree that we have some sort of happy case int rare exceptional",
    "start": "1381250",
    "end": "1386950"
  },
  {
    "text": "unhappy case invalid input so they should be distinguished more than just",
    "start": "1386950",
    "end": "1392110"
  },
  {
    "text": "that they are equally possible in a variant so this of the some types technology is not really what we're",
    "start": "1392110",
    "end": "1398620"
  },
  {
    "start": "1395000",
    "end": "1544000"
  },
  {
    "text": "looking for what we're looking for is some sort of unexpected versus unexpected Millia vocabulary right right",
    "start": "1398620",
    "end": "1413350"
  },
  {
    "text": "I expect an int but if you know come hell or high water something else might",
    "start": "1413350",
    "end": "1419260"
  },
  {
    "text": "be returned right so they need to be distinguished syntactically and",
    "start": "1419260",
    "end": "1424810"
  },
  {
    "text": "semantically as expected versus unexpected very saying here here's a at",
    "start": "1424810",
    "end": "1430120"
  },
  {
    "text": "this point 36 minutes in here you know so at this very point this talk becomes",
    "start": "1430120",
    "end": "1435510"
  },
  {
    "text": "interesting right this is like a long bath tonight",
    "start": "1435510",
    "end": "1441300"
  },
  {
    "text": "I'm trying folks I'm trying so you know because until now all we've done was to",
    "start": "1441300",
    "end": "1447580"
  },
  {
    "text": "set up the stage just kind of say ah you know what's uh you know what would happen if and that kind of you know so",
    "start": "1447580",
    "end": "1454890"
  },
  {
    "text": "from now on we're starting to get into something new and not that doesn't exist",
    "start": "1454890",
    "end": "1460120"
  },
  {
    "text": "anymore yet that were just not as much inventing as discovering the interesting",
    "start": "1460120",
    "end": "1468370"
  },
  {
    "text": "distinction here is that we're not being smart we're just starting with our list",
    "start": "1468370",
    "end": "1473650"
  },
  {
    "text": "of the nice things we want and then we pull on that string and by means of",
    "start": "1473650",
    "end": "1479280"
  },
  {
    "text": "simple reasoning we get to some artifact as opposed to our we're so clever we're",
    "start": "1479280",
    "end": "1485799"
  },
  {
    "text": "gonna do something really smart that nobody nobody expects and this is awesome so we discover more than we",
    "start": "1485799",
    "end": "1491190"
  },
  {
    "text": "invent something right it's a consequence more than more than something as surprising so local code",
    "start": "1491190",
    "end": "1501190"
  },
  {
    "text": "should be able to work was the ignoring invalid input because that would be centralized error handling so I should",
    "start": "1501190",
    "end": "1507429"
  },
  {
    "text": "assume the happy case and just code my way out and then if anything bad happens",
    "start": "1507429",
    "end": "1512500"
  },
  {
    "text": "there should be a mechanism to to take care of that so part by consequence the",
    "start": "1512500",
    "end": "1521409"
  },
  {
    "text": "function has an over return types plus one or more cover return return type so now I say one or more it means because",
    "start": "1521409",
    "end": "1528159"
  },
  {
    "text": "that particular function may call other functions that in turn choose to have their own covert return types and the",
    "start": "1528159",
    "end": "1536080"
  },
  {
    "text": "next natural question would be word do all of these hidden covert return values",
    "start": "1536080",
    "end": "1541179"
  },
  {
    "text": "go what's their deal well it turns out they need to have their own their own",
    "start": "1541179",
    "end": "1547330"
  },
  {
    "start": "1544000",
    "end": "1760000"
  },
  {
    "text": "flow of control because they can't be handled by the happy case because the happy case is not prepared to handle",
    "start": "1547330",
    "end": "1553059"
  },
  {
    "text": "them right it's simple deduction right this time nothing up my sleeves friends",
    "start": "1553059",
    "end": "1558909"
  },
  {
    "text": "I'm really not David Copperfield here right I'm not inventing anything so",
    "start": "1558909",
    "end": "1565539"
  },
  {
    "text": "covert virus must return somewhere you know somewhere to some some color that is able to handle those particular",
    "start": "1565539",
    "end": "1572890"
  },
  {
    "text": "exceptional cases and only certain course understands their nerve some don't indeed so there's there's a sort",
    "start": "1572890",
    "end": "1579789"
  },
  {
    "text": "of a search process if you wish for a color that knows how to handle the my particular exceptional case so that",
    "start": "1579789",
    "end": "1587169"
  },
  {
    "text": "means covert return types come with covert execution pass each with potentially its own and the callers must",
    "start": "1587169",
    "end": "1595690"
  },
  {
    "text": "plan somehow return points electing such types so here we are we",
    "start": "1595690",
    "end": "1601510"
  },
  {
    "text": "just invented exceptions friends they",
    "start": "1601510",
    "end": "1607360"
  },
  {
    "text": "are consequence as much as a terrible invention I'm using the silence for an",
    "start": "1607360",
    "end": "1617740"
  },
  {
    "text": "effect here to let it sink in okay so we get to a pipe base first much exception",
    "start": "1617740",
    "end": "1624040"
  },
  {
    "text": "handling let me add one little detail first match is an interesting decision",
    "start": "1624040",
    "end": "1630310"
  },
  {
    "text": "for C++ and for all object-oriented languages because all our",
    "start": "1630310",
    "end": "1635410"
  },
  {
    "text": "object-oriented languages always go for best match who can give us an example of",
    "start": "1635410",
    "end": "1641950"
  },
  {
    "text": "best match in object-oriented languages when does the language choose the best",
    "start": "1641950",
    "end": "1648220"
  },
  {
    "text": "match for you overloading best match thank you but",
    "start": "1648220",
    "end": "1654520"
  },
  {
    "text": "that would be more like C++ because some object-oriented languages are not very strong at overloading so even more yeah",
    "start": "1654520",
    "end": "1662200"
  },
  {
    "text": "overriding so it's going to always pick the you know when color method is going to find the most derived version of the",
    "start": "1662200",
    "end": "1669280"
  },
  {
    "text": "method yes thank you very much the most specialized as they say other ideas from",
    "start": "1669280",
    "end": "1674800"
  },
  {
    "text": "the C++ world come on templates write in templates you",
    "start": "1674800",
    "end": "1680890"
  },
  {
    "text": "always choose the best match the combine has the soul this whole partial ordering business and it's always going whenever",
    "start": "1680890",
    "end": "1686590"
  },
  {
    "text": "there's some templates kind of hanging out you know having a smoke and a beer and whatever I think is gonna say you",
    "start": "1686590",
    "end": "1692980"
  },
  {
    "text": "are the best match you go to the military right that's so that's the thing it's only the best match however",
    "start": "1692980",
    "end": "1699370"
  },
  {
    "text": "exception by the way that's not good or bad it's just there it's an object-oriented thing in function",
    "start": "1699370",
    "end": "1706420"
  },
  {
    "text": "languages is the exact opposite and if you have if you talk to a functional guy they're gonna hate you because they can",
    "start": "1706420",
    "end": "1713680"
  },
  {
    "text": "say first match is the best match and you say well I have the power of",
    "start": "1713680",
    "end": "1718840"
  },
  {
    "text": "language with me best match is the best match and it just works right come on it's in the name best match is the best",
    "start": "1718840",
    "end": "1725590"
  },
  {
    "text": "match known they say the first match is the best match because in all function languages you're going to see that the",
    "start": "1725590",
    "end": "1730820"
  },
  {
    "text": "first function match is going to be called so it matters in which order define your your functions interesting",
    "start": "1730820",
    "end": "1738409"
  },
  {
    "text": "so why is it first match in exception handling any ideas speed I think it has",
    "start": "1738409",
    "end": "1748279"
  },
  {
    "text": "to do with the fact that you you you move up the stack and essentially the first person able to hand to handle that",
    "start": "1748279",
    "end": "1755090"
  },
  {
    "text": "or anything like it is going to be a good match for for the exception right",
    "start": "1755090",
    "end": "1760360"
  },
  {
    "start": "1760000",
    "end": "2065000"
  },
  {
    "text": "awesome so exceptions aftermath so",
    "start": "1760360",
    "end": "1766549"
  },
  {
    "text": "they're fairly general it's unclear whether the minimize of terms people keep keep on making these having these",
    "start": "1766549",
    "end": "1772970"
  },
  {
    "text": "memory leaks whenever exceptions are thrown but you know we as a community community are getting a lot better it",
    "start": "1772970",
    "end": "1779710"
  },
  {
    "text": "they're designed for centralized handling they are not good at all at",
    "start": "1779710",
    "end": "1784759"
  },
  {
    "text": "local handling and that's a problem friends right so this will pretty much the only read definitely read line or",
    "start": "1784759",
    "end": "1791269"
  },
  {
    "text": "you know read bullet point on our slide here they are law transporting any",
    "start": "1791269",
    "end": "1797059"
  },
  {
    "text": "amount of our information they have a little cost on the normal path famous",
    "start": "1797059",
    "end": "1804649"
  },
  {
    "text": "last words what is the cost of exceptions when they are not thrown 0 0 more than 0 what is",
    "start": "1804649",
    "end": "1818029"
  },
  {
    "text": "it give me a number",
    "start": "1818029",
    "end": "1820840"
  },
  {
    "text": "40 kilobytes right so but that just for",
    "start": "1825129",
    "end": "1831080"
  },
  {
    "text": "one exception or one catch sight ok all right so 40 kilobytes may be still",
    "start": "1831080",
    "end": "1837710"
  },
  {
    "text": "important in some applications but I told you about runtime costing at in terms of time do exceptions make your",
    "start": "1837710",
    "end": "1843980"
  },
  {
    "text": "code smaller as slower even if never thrown this is the question yes no other",
    "start": "1843980",
    "end": "1852769"
  },
  {
    "text": "thoughts yes",
    "start": "1852769",
    "end": "1856629"
  },
  {
    "text": "thank you so the answer was the compiler must generate code in a different manner",
    "start": "1860579",
    "end": "1866709"
  },
  {
    "text": "when exception started when the spectrum of exceptions is present because it",
    "start": "1866709",
    "end": "1873339"
  },
  {
    "text": "needs to generate prologue and epilogue standardized for each function and it",
    "start": "1873339",
    "end": "1878709"
  },
  {
    "text": "also needs to make sure that whenever exception is thrown the appropriate cleanup code is executed right and that",
    "start": "1878709",
    "end": "1889059"
  },
  {
    "text": "major limits the optimizations that the compiler can do which is essential one",
    "start": "1889059",
    "end": "1894279"
  },
  {
    "text": "is called motion the compilers in non exceptional code let's say see straight line code they're going to be able to do",
    "start": "1894279",
    "end": "1900339"
  },
  {
    "text": "code motion which means you know more fragments of code around for maximum performance and whenever you have",
    "start": "1900339",
    "end": "1906639"
  },
  {
    "text": "exceptions this is not possible anymore because there's you know there's restrictions on what the code can be",
    "start": "1906639",
    "end": "1912940"
  },
  {
    "text": "moved right if you look at the generated",
    "start": "1912940",
    "end": "1918969"
  },
  {
    "text": "code in any function you're going to see that actually placing no except to the",
    "start": "1918969",
    "end": "1924429"
  },
  {
    "text": "function and all the function it calls may have a dramatic impact on the generated code dramatic and no except is",
    "start": "1924429",
    "end": "1932079"
  },
  {
    "text": "not you know is no basket of fruit either because if you do put no except",
    "start": "1932079",
    "end": "1939309"
  },
  {
    "text": "and you throw you can still do that and that is undefined behavior thank you",
    "start": "1939309",
    "end": "1950049"
  },
  {
    "text": "very much and that removes all of your files on your drive as Adi sure that's last night so not perfect so it's",
    "start": "1950049",
    "end": "1959409"
  },
  {
    "text": "unclear whether exceptions make correct code easy to write I would say that it",
    "start": "1959409",
    "end": "1964449"
  },
  {
    "text": "took us literally 20 years as a community to even so even to ask",
    "start": "1964449",
    "end": "1970359"
  },
  {
    "text": "ourselves the right questions but I think there's a lot of progress herp has",
    "start": "1970359",
    "end": "1975399"
  },
  {
    "text": "done a lot of good work on sort of proselytizing proper he has this",
    "start": "1975399",
    "end": "1981849"
  },
  {
    "text": "exceptional C++ books and he has a lot of blog posts that followed on how to",
    "start": "1981849",
    "end": "1987009"
  },
  {
    "text": "write correct code in the presence of exceptions and one the things he recommends and which is pretty awesome is you don't want to have",
    "start": "1987009",
    "end": "1994330"
  },
  {
    "text": "like raw pointers in your called raw data and whatnot in your own class definitions you want to have like you",
    "start": "1994330",
    "end": "2000870"
  },
  {
    "text": "know shared pointers or unique pointers or whatnot that take care of their own destruction and then whenever the",
    "start": "2000870",
    "end": "2006030"
  },
  {
    "text": "destructor of the class runs is going to appropriately destroy all of the components so that's nice because it",
    "start": "2006030",
    "end": "2012720"
  },
  {
    "text": "makes it makes exceptions take care of exceptional situations a lot a lot better so today we're going to focus on",
    "start": "2012720",
    "end": "2020430"
  },
  {
    "text": "the remaining redline so this is a you know this my point here local handling will be our focus going forward",
    "start": "2020430",
    "end": "2029179"
  },
  {
    "text": "so um the issues we have with exceptions",
    "start": "2029210",
    "end": "2039990"
  },
  {
    "text": "regard regarding local ER handling is that error handling when done loca is very symmetric it's",
    "start": "2039990",
    "end": "2046410"
  },
  {
    "text": "very heavy on the syntax side is very difficult to look at and difficult to maintain so let's take a look at",
    "start": "2046410",
    "end": "2053730"
  },
  {
    "text": "something of interest we're going to implement a scheme that allows local",
    "start": "2053730",
    "end": "2059610"
  },
  {
    "text": "handling with exceptions but allow me to start with a couple of background items",
    "start": "2059610",
    "end": "2066050"
  },
  {
    "start": "2065000",
    "end": "2133000"
  },
  {
    "text": "we've discussed a bit of this already STD variant or boost variant or",
    "start": "2066050",
    "end": "2071690"
  },
  {
    "text": "sometimes and they give equal importance all members which we don't like optional",
    "start": "2071690",
    "end": "2077398"
  },
  {
    "text": "is an interesting artifact lots about stood optional boost optional it's",
    "start": "2077399",
    "end": "2083760"
  },
  {
    "text": "either something or nothing so it has the dead boolean that tells you that you know it's nothing in database",
    "start": "2083760",
    "end": "2089820"
  },
  {
    "text": "terminology that would be Nala bald data right so any column can be like whatever",
    "start": "2089820",
    "end": "2096120"
  },
  {
    "text": "floating-point number or null which means there's no value present at all right but you know option is not good",
    "start": "2096120",
    "end": "2103230"
  },
  {
    "text": "because we want we don't option we want not a value or nothing we want a value or the exception that prevented this",
    "start": "2103230",
    "end": "2109170"
  },
  {
    "text": "vary from being produced right you see why I'm going with this so I'm going",
    "start": "2109170",
    "end": "2115170"
  },
  {
    "text": "with these technologies are very close to being needed but are not really exactly what we want even the sort of",
    "start": "2115170",
    "end": "2121080"
  },
  {
    "text": "the monadic world which may be an either which mimic which are mimicked by if you wish busted",
    "start": "2121080",
    "end": "2128200"
  },
  {
    "text": "variant instead optional they would not be exactly appropriate for us so we need",
    "start": "2128200",
    "end": "2134710"
  },
  {
    "start": "2133000",
    "end": "2164000"
  },
  {
    "text": "to do our own by the way another related technology would be promising future in",
    "start": "2134710",
    "end": "2140620"
  },
  {
    "text": "C++ no bottom they come from the you know multi-threading world and",
    "start": "2140620",
    "end": "2147120"
  },
  {
    "text": "essentially it's it's again it's painfully close to what we need because it's it's either you know promise of T's",
    "start": "2147120",
    "end": "2154510"
  },
  {
    "text": "either T or it gives the exception that prevent the T from being returned here",
    "start": "2154510",
    "end": "2160720"
  },
  {
    "text": "however we want eager and synchronous handling of these cases so let's define",
    "start": "2160720",
    "end": "2167650"
  },
  {
    "start": "2164000",
    "end": "2302000"
  },
  {
    "text": "a simple plus either actually that would",
    "start": "2167650",
    "end": "2173920"
  },
  {
    "text": "be expected so this kind of historical a bit and we would have either a T or a",
    "start": "2173920",
    "end": "2182620"
  },
  {
    "text": "new place in a Union and we have a pool that tells me whether it's a T or not so that would be my Union type and now we",
    "start": "2182620",
    "end": "2190390"
  },
  {
    "text": "define expected which takes two template arguments the first is the type that is",
    "start": "2190390",
    "end": "2196750"
  },
  {
    "text": "the happy case and the second is the exception that may be produced if the happy case didn't happen right so we",
    "start": "2196750",
    "end": "2204790"
  },
  {
    "text": "want to express the union of an over type and a covert type so it's almost like a variant but it gives asymmetric",
    "start": "2204790",
    "end": "2210670"
  },
  {
    "text": "importance to the two branches right so in the normal case the value of is value",
    "start": "2210670",
    "end": "2217150"
  },
  {
    "text": "of type T is there in in the bad case of value of type E is there and he has extra information about what happened",
    "start": "2217150",
    "end": "2223420"
  },
  {
    "text": "and E would be constructed by the function that returns it and read by the",
    "start": "2223420",
    "end": "2230950"
  },
  {
    "text": "receiver of the function so an expected te would be either a t or my dog ate my",
    "start": "2230950",
    "end": "2241330"
  },
  {
    "text": "homework yes it's either the homework or the dog",
    "start": "2241330",
    "end": "2249660"
  },
  {
    "text": "sorry or the excuse thank you yes so it's either you know so that would be",
    "start": "2250200",
    "end": "2256750"
  },
  {
    "text": "typically returned from functions notice that nothing has been thrown we're not talking about throwing anything yet",
    "start": "2256750",
    "end": "2262720"
  },
  {
    "text": "please hands off the triggers okay we're not throwing anything we are returning",
    "start": "2262720",
    "end": "2269490"
  },
  {
    "text": "only and we're returning these that you know the slightly larger and more",
    "start": "2269490",
    "end": "2276510"
  },
  {
    "text": "elaborate values than we otherwise would be returning but the benefit is that we",
    "start": "2276510",
    "end": "2281770"
  },
  {
    "text": "get to pass around information that completely describes the computation",
    "start": "2281770",
    "end": "2287080"
  },
  {
    "text": "either at T has has been computed or there was some reason for not being able",
    "start": "2287080",
    "end": "2292750"
  },
  {
    "text": "to compute it and there's no people there's a there's an e doesn't there's a there's a an excuse that if you wish",
    "start": "2292750",
    "end": "2300130"
  },
  {
    "text": "e-excuse awesome so now redesigning a to Y if you wish",
    "start": "2300130",
    "end": "2306520"
  },
  {
    "text": "we're going to write something like expected of ant and some error type er R and that's my a to Y and if you want",
    "start": "2306520",
    "end": "2315160"
  },
  {
    "text": "local you're going to look the result has value or result error whatever",
    "start": "2315160",
    "end": "2320470"
  },
  {
    "text": "and the typical idiom is if result use the result the way this works is the",
    "start": "2320470",
    "end": "2329290"
  },
  {
    "text": "expected type we're gonna see in a minute the expected type is going to define primitives for testing with if",
    "start": "2329290",
    "end": "2336480"
  },
  {
    "text": "and you know as the cool way of you know that C++ 1x wave you don't implement",
    "start": "2336480",
    "end": "2343540"
  },
  {
    "text": "operator bull right what is the C++ awesome way of implementing I want to be",
    "start": "2343540",
    "end": "2350859"
  },
  {
    "text": "testable with if explicit thank you very much I have the illusion that everybody",
    "start": "2350859",
    "end": "2358030"
  },
  {
    "text": "knows and you're like you know what we're not gonna say anything let him let him sweat under the color there don't",
    "start": "2358030",
    "end": "2363400"
  },
  {
    "text": "care so yes implant explicit operator bull and that makes it is testable but not convertible to bull implicitly which has",
    "start": "2363400",
    "end": "2369970"
  },
  {
    "text": "all of the liabilities that we know about so if result used and then we have",
    "start": "2369970",
    "end": "2374980"
  },
  {
    "text": "the star result star result would be dereference the result expecting an t it",
    "start": "2374980",
    "end": "2382570"
  },
  {
    "text": "affecting the happy case okay so box I",
    "start": "2382570",
    "end": "2388870"
  },
  {
    "text": "disagree with this design decision I'm teaching it because it was taken by by",
    "start": "2388870",
    "end": "2395230"
  },
  {
    "text": "the folks in the committee who proposed this and who look at this and the reason",
    "start": "2395230",
    "end": "2400690"
  },
  {
    "text": "for which this decision was taken notice okay so I'm we talked about like if and",
    "start": "2400690",
    "end": "2406240"
  },
  {
    "text": "star force and that's not a pointer it's not a pointer it's a it's there so the",
    "start": "2406240",
    "end": "2414910"
  },
  {
    "text": "fact that you star against the non pointer is rather new but it's not the",
    "start": "2414910",
    "end": "2421420"
  },
  {
    "text": "new West because there is a type that does that which is sed optional and",
    "start": "2421420",
    "end": "2430570"
  },
  {
    "text": "let's see the optional port design which uses like o star means you know the",
    "start": "2430570",
    "end": "2437020"
  },
  {
    "text": "option is going to be the reference even if it's not a pointer and then the you know the folks came with the expected",
    "start": "2437020",
    "end": "2442780"
  },
  {
    "text": "proposal and they said oh wait a second we have something that these are stars in optional so we should be consistent",
    "start": "2442780",
    "end": "2449430"
  },
  {
    "text": "with the poor decision design decision we made before so let's do that by the",
    "start": "2449430",
    "end": "2456550"
  },
  {
    "text": "way the proposal is still in flux so you have the power to influence it right your local politician yes sorry yes I",
    "start": "2456550",
    "end": "2468640"
  },
  {
    "text": "would have an implicit conversion so the code is unmodified would be unmodified for the happy case so not the happy",
    "start": "2468640",
    "end": "2475690"
  },
  {
    "text": "happy case you know to begin to put stars and arrows every everywhere so that's the problem so okay if you want",
    "start": "2475690",
    "end": "2483730"
  },
  {
    "text": "centralized or hanging I simply use star result with you know this was my personal opinion you may love it you",
    "start": "2483730",
    "end": "2491230"
  },
  {
    "text": "star result and that would be an int or otherwise he's going to throw there so",
    "start": "2491230",
    "end": "2497650"
  },
  {
    "text": "all you need to do to your code again is add those stars and arrows to your code to make sure that the you're happy case",
    "start": "2497650",
    "end": "2505390"
  },
  {
    "text": "is handled properly right so with the expected of the DNA we're going to have",
    "start": "2505390",
    "end": "2512410"
  },
  {
    "text": "an association between errors and computational goals so that's very nice it's an its new",
    "start": "2512410",
    "end": "2518880"
  },
  {
    "text": "traditional exceptions are tied to functions you say well you know I have",
    "start": "2518880",
    "end": "2524890"
  },
  {
    "text": "this function that tries to do something and may throw an exception and have this other function that may try to something",
    "start": "2524890",
    "end": "2531460"
  },
  {
    "text": "else and throws another exception but here this the grouping is different its",
    "start": "2531460",
    "end": "2537190"
  },
  {
    "text": "orthogonal if you wish in this case we don't associate the exceptions with functions but we associate exceptions",
    "start": "2537190",
    "end": "2544540"
  },
  {
    "text": "with results right so function is going to return and expect it and then you",
    "start": "2544540",
    "end": "2552130"
  },
  {
    "text": "know the expected the expected itself has meaning regardless of the function",
    "start": "2552130",
    "end": "2557680"
  },
  {
    "text": "that produced it it's going to be I'm going to transport this information around so I find that very interesting",
    "start": "2557680",
    "end": "2563620"
  },
  {
    "text": "because it's pretty much like with mutexes and lox people sometimes associate mutexes and lox with function",
    "start": "2563620",
    "end": "2570520"
  },
  {
    "text": "which is the wrong way to look at it because you want to associate meat X and lox with data that they protect yes I",
    "start": "2570520",
    "end": "2576640"
  },
  {
    "text": "hope everybody is at the Sundering yes here I know this stadium is huge and",
    "start": "2576640",
    "end": "2581830"
  },
  {
    "text": "there's so many people here that maybe they're not everybody hears me but yes right yes mutexes go with the data they",
    "start": "2581830",
    "end": "2588190"
  },
  {
    "text": "protect us the association it's not with like uncle if this function is gonna use this mutex and this other function is",
    "start": "2588190",
    "end": "2593710"
  },
  {
    "text": "gonna use oh my god this other mutex no please right it's the data similarly expected would would associate",
    "start": "2593710",
    "end": "2601510"
  },
  {
    "text": "the error with the data that was supposed to be there right and I like",
    "start": "2601510",
    "end": "2606880"
  },
  {
    "text": "that prop dislike my most significant bit I like about about this idea awesome",
    "start": "2606880",
    "end": "2613930"
  },
  {
    "text": "so now we have a lot of advantages for the small price so another thing is like",
    "start": "2613930",
    "end": "2620470"
  },
  {
    "text": "naturally we have multiple exceptions active you know in C++ as there's rule",
    "start": "2620470",
    "end": "2628210"
  },
  {
    "text": "you can only have one exception in flight except when you can you know I",
    "start": "2628210",
    "end": "2635200"
  },
  {
    "text": "suppose you can have multiple exceptions flight in flight right you just can't",
    "start": "2635200",
    "end": "2640210"
  },
  {
    "text": "throw an exception when one is already thrown but you can't throw from a catch and catch it inside the catch and you",
    "start": "2640210",
    "end": "2648220"
  },
  {
    "text": "have two exceptions flying right so with with this you can we have",
    "start": "2648220",
    "end": "2656259"
  },
  {
    "text": "an array of expected you can have you",
    "start": "2656259",
    "end": "2661779"
  },
  {
    "text": "know a map with whatever collection of expected objects and some or all of them may be exceptions no problem so you get",
    "start": "2661779",
    "end": "2669009"
  },
  {
    "text": "to collect a bunch of exceptions if you want I won't recommend it necessarily but it can so for each value that's",
    "start": "2669009",
    "end": "2675639"
  },
  {
    "text": "being that's supposed to be somewhere you may also have the exception that prevented it from being produced so",
    "start": "2675639",
    "end": "2681789"
  },
  {
    "text": "that's pretty awesome you can switch at will between the style",
    "start": "2681789",
    "end": "2686919"
  },
  {
    "text": "of I want to healthier right now and I want to simply use the value for the happy case and if anything goes wrong",
    "start": "2686919",
    "end": "2695439"
  },
  {
    "text": "an exception is going to be thrown so you can very naturally switch between these two programming styles",
    "start": "2695439",
    "end": "2701939"
  },
  {
    "text": "teleportation if you wish is possible across thread boundaries across no flow subsystem boundaries you can even like",
    "start": "2701939",
    "end": "2708759"
  },
  {
    "text": "passes through a C API for a while as a pointer and then back from the C API into into years which is I can't heard",
    "start": "2708759",
    "end": "2715179"
  },
  {
    "text": "of with exceptions it's really difficult you can teleport across time save the",
    "start": "2715179",
    "end": "2721539"
  },
  {
    "text": "exception now throw it later if you wish etc so exceptions become commoditized",
    "start": "2721539",
    "end": "2728849"
  },
  {
    "text": "thanks for the follow alright right commoditize so exceptions become as okay",
    "start": "2729779",
    "end": "2735459"
  },
  {
    "text": "as any other value to mess with right so you can collect and group and combine them anyway what do you wish awesome so",
    "start": "2735459",
    "end": "2743169"
  },
  {
    "start": "2741000",
    "end": "3162000"
  },
  {
    "text": "let's look at an implementation well it's not stay here don't leave so",
    "start": "2743169",
    "end": "2751509"
  },
  {
    "text": "let's look at an implementation we have a bit of code here so we have the expected class as promised we it has two",
    "start": "2751509",
    "end": "2758889"
  },
  {
    "text": "parameters then it has a simple payload it has a TA or a na and it has an okay",
    "start": "2758889",
    "end": "2766419"
  },
  {
    "text": "which is initialized to true because I'm an optimistic person so by default I",
    "start": "2766419",
    "end": "2771999"
  },
  {
    "text": "assume that the object is good is nice right so then the constructor the",
    "start": "2771999",
    "end": "2777969"
  },
  {
    "text": "default constructor of expected is going to create a tea address yay and this guy because it's",
    "start": "2777969",
    "end": "2786490"
  },
  {
    "text": "true is just gonna work right I don't need to initialize it again make sense so I'm initializing the T part and all",
    "start": "2786490",
    "end": "2793900"
  },
  {
    "text": "key is gonna be true by the way those debate about this what is unexpected if",
    "start": "2793900",
    "end": "2800109"
  },
  {
    "text": "constructed implicitly from nothing should it should we go for a glass half",
    "start": "2800109",
    "end": "2805539"
  },
  {
    "text": "full or for the glass half empty and the obvious answer is they call it expected",
    "start": "2805539",
    "end": "2811210"
  },
  {
    "text": "what do you expect right so I'm not sure why any people any",
    "start": "2811210",
    "end": "2817809"
  },
  {
    "text": "person would kind of even create that argument so then we have the obvious you",
    "start": "2817809",
    "end": "2824019"
  },
  {
    "text": "know the usual suspects which would be I'm going to create an expected from a TM I'm copying it into and by the way so",
    "start": "2824019",
    "end": "2830470"
  },
  {
    "text": "you know those of you who already use C++ sort of more recent version C++ you",
    "start": "2830470",
    "end": "2838930"
  },
  {
    "text": "know that for each of these functions there's a hecatomb of of additional over",
    "start": "2838930",
    "end": "2843999"
  },
  {
    "text": "laws that in neutral for example for this particular expected of consti and person RHS you need to have what other",
    "start": "2843999",
    "end": "2850180"
  },
  {
    "text": "functions just for completeness you are",
    "start": "2850180",
    "end": "2855700"
  },
  {
    "text": "dedicated smart engineers yes no I mean",
    "start": "2855700",
    "end": "2862210"
  },
  {
    "text": "for this constructor that takes a con Steve reference I would need to have other very similar constructors that yes",
    "start": "2862210",
    "end": "2871089"
  },
  {
    "text": "that take the are very thank you that take the are val reference to team right",
    "start": "2871089",
    "end": "2877950"
  },
  {
    "text": "and i need to have the methods that work on temporary sometimes i don't think that construction is actually defined",
    "start": "2880140",
    "end": "2886150"
  },
  {
    "text": "for constructing our values so probably not but anyhow this is a this is um",
    "start": "2886150",
    "end": "2892720"
  },
  {
    "text": "what was the word distilled down version of what you're gonna find online in the",
    "start": "2892720",
    "end": "2898749"
  },
  {
    "text": "implementation because the apprentice is really like you can i there's a lot of repetition in in the actual",
    "start": "2898749",
    "end": "2905470"
  },
  {
    "text": "implementation just to handle all the cases the advantage being you have a lot of generality because you get to",
    "start": "2905470",
    "end": "2911470"
  },
  {
    "text": "initials from any are valuable value what what is their of type team and now we get to this third overall",
    "start": "2911470",
    "end": "2918840"
  },
  {
    "text": "which is interesting I have a constructor that takes a expected of Const unexpected of e RHS and the",
    "start": "2918840",
    "end": "2926100"
  },
  {
    "text": "initialize is okay to false and it generates a neat construction at the",
    "start": "2926100",
    "end": "2931470"
  },
  {
    "text": "address of nay now my question to you is why do you think it was necessary to take unexpected of V instead of E let me",
    "start": "2931470",
    "end": "2944610"
  },
  {
    "text": "kind of let me specify unexpected is like a completely boring wrapper type it",
    "start": "2944610",
    "end": "2950160"
  },
  {
    "text": "does doesn't do anything at all all it has it has a value member which is the actual e object that's in there yes",
    "start": "2950160",
    "end": "2956880"
  },
  {
    "text": "please excellent Thank You T could be e and",
    "start": "2956880",
    "end": "2962990"
  },
  {
    "text": "that's actually it can happen what if I want to parse an integer and the error code is also an integer right but wait",
    "start": "2962990",
    "end": "2972390"
  },
  {
    "text": "it gets worse what if I want to parse an integer and error code is along and then",
    "start": "2972390",
    "end": "2978270"
  },
  {
    "text": "I have all the conversion nonsense going on for me right what if I expect a",
    "start": "2978270",
    "end": "2984810"
  },
  {
    "text": "actually what if I expect an unexpected you can't do that so unexpected is",
    "start": "2984810",
    "end": "2992550"
  },
  {
    "text": "specifically designed to be a pariah in the normal values world I'm not kidding that is I'm not kidding this is not a",
    "start": "2992550",
    "end": "2998880"
  },
  {
    "text": "joke don't laugh please ladies and gentlemen so unexpected was particularly",
    "start": "2998880",
    "end": "3004430"
  },
  {
    "text": "designed to be distinguished a distinguished type that you're not",
    "start": "3004430",
    "end": "3010430"
  },
  {
    "text": "supposed to ever expect okay and",
    "start": "3010430",
    "end": "3017260"
  },
  {
    "text": "therefore so actually does the limitation in the proposal it says you can't you can define expense of anything",
    "start": "3017260",
    "end": "3023180"
  },
  {
    "text": "except unexpected you can't expect the unexpected so did that movie with that name doesn't",
    "start": "3023180",
    "end": "3029390"
  },
  {
    "text": "work okay so very interesting right so this unexpected is a wrapper that simply",
    "start": "3029390",
    "end": "3036050"
  },
  {
    "text": "is a tag type that you know gives a tag on top of e to make sure it is distinguished from from T nice now we",
    "start": "3036050",
    "end": "3043460"
  },
  {
    "text": "have this is again a sort of a one of those usual suspects that we have expected of some",
    "start": "3043460",
    "end": "3049310"
  },
  {
    "text": "type that may or may not be tea and is going to be forwarded right and let's",
    "start": "3049310",
    "end": "3060410"
  },
  {
    "text": "see yeah these are interesting PP so it's gonna get interesting at swap so",
    "start": "3060410",
    "end": "3066200"
  },
  {
    "text": "these functions are going to copy and expect an internal order say is going to simply initialize and they're going to",
    "start": "3066200",
    "end": "3071540"
  },
  {
    "text": "appropriately new this or new that depending on the flag similarly there's",
    "start": "3071540",
    "end": "3077990"
  },
  {
    "text": "a move operator right so we're gonna move from here and there's still moves",
    "start": "3077990",
    "end": "3083630"
  },
  {
    "text": "that move and just because I'm a bad person I wrote ok RHS okay I didn't say RHS",
    "start": "3083630",
    "end": "3091190"
  },
  {
    "text": "sequels move or voyages ok because I know it's a boolean so move doesn't do anything but believe me there are folks",
    "start": "3091190",
    "end": "3099260"
  },
  {
    "text": "right now in this room who believe he shouldn't written as did he move that guy is not a good guy he's not uniform",
    "start": "3099260",
    "end": "3108160"
  },
  {
    "text": "bad person so as I promised that it",
    "start": "3108160",
    "end": "3113720"
  },
  {
    "text": "comes to the operators that convert to a tea and that would be the dereference",
    "start": "3113720",
    "end": "3119750"
  },
  {
    "text": "and again although it's not a pointer it's going to work this way so the the",
    "start": "3119750",
    "end": "3126740"
  },
  {
    "text": "star praetor is going to be if not okay gonna throw as promised and otherwise you just simply return a value and then",
    "start": "3126740",
    "end": "3133550"
  },
  {
    "text": "we have the Const and our value reciprocals that are implemented",
    "start": "3133550",
    "end": "3140510"
  },
  {
    "text": "similarly then I get to access the error object and notice that error here is not",
    "start": "3140510",
    "end": "3153200"
  },
  {
    "text": "an unexpected of V is just the e so it's it's undressed from the wrapper the",
    "start": "3153200",
    "end": "3158270"
  },
  {
    "text": "wrapper was necessary doing construction only alright do I have a value so these",
    "start": "3158270",
    "end": "3165830"
  },
  {
    "start": "3162000",
    "end": "3209000"
  },
  {
    "text": "are sort of the usual suspects operator bull as we discussed of value etc etc etc these are not very difficult to",
    "start": "3165830",
    "end": "3174410"
  },
  {
    "text": "implement there's a very very interesting practical primitive which is",
    "start": "3174410",
    "end": "3180440"
  },
  {
    "text": "value or what do you think it does value underscore or yes Adi yeah it's",
    "start": "3180440",
    "end": "3191960"
  },
  {
    "text": "it's the exactly so if none expect the expect that thing is not there give me that you give me that value you",
    "start": "3191960",
    "end": "3197990"
  },
  {
    "text": "know it's on it's the default value so it don't throw please just give me that value right very nice so actually this",
    "start": "3197990",
    "end": "3205700"
  },
  {
    "text": "turns out to be practically very very useful this would be the last function",
    "start": "3205700",
    "end": "3213380"
  },
  {
    "start": "3209000",
    "end": "3536000"
  },
  {
    "text": "we discuss which is also the most interesting apologies for the expected",
    "start": "3213380",
    "end": "3218540"
  },
  {
    "text": "with a capital e here historical reasons so we define the method swap and believe",
    "start": "3218540",
    "end": "3226160"
  },
  {
    "text": "me are not the first four lines are the return type and also believe me or not the return type is void it's a very",
    "start": "3226160",
    "end": "3233360"
  },
  {
    "text": "fancy way of writing void there and I'm writing it this way actually I found a",
    "start": "3233360",
    "end": "3239600"
  },
  {
    "text": "bug in the proposal because you can't actually swap any two expected values so",
    "start": "3239600",
    "end": "3247270"
  },
  {
    "text": "swapping is enabled if and only if T would be a default North remove",
    "start": "3247270",
    "end": "3254990"
  },
  {
    "text": "constructible type which means I can move on our value of type T to another T",
    "start": "3254990",
    "end": "3260810"
  },
  {
    "text": "without an exception and that is not for whatever is an introspection primitive",
    "start": "3260810",
    "end": "3267140"
  },
  {
    "text": "in a standard library and something named or may or may not know that",
    "start": "3267140",
    "end": "3272510"
  },
  {
    "text": "particular primitive is not implementable in portable C++ you can't",
    "start": "3272510",
    "end": "3278030"
  },
  {
    "text": "sit down and write it on your own it's it's supported by a primitive inside the",
    "start": "3278030",
    "end": "3283040"
  },
  {
    "text": "compiler which is underscore underscore de braga right so in it you can't do it",
    "start": "3283040",
    "end": "3290300"
  },
  {
    "text": "it's an introspection thing that only the compiler knows about it's not accessible to regular C++ code I highly",
    "start": "3290300",
    "end": "3296930"
  },
  {
    "text": "recommend you look into this stuff you know all of the all of the underscore T things all of the ease this is that",
    "start": "3296930",
    "end": "3303200"
  },
  {
    "text": "because I believe introspection is really the bee's knees so we have there is no form of",
    "start": "3303200",
    "end": "3309350"
  },
  {
    "text": "constructive or constructive constructive all T must be like that T",
    "start": "3309350",
    "end": "3314390"
  },
  {
    "text": "must be also swap of swappable but possible possibly with a throw and he",
    "start": "3314390",
    "end": "3320329"
  },
  {
    "text": "must be also not remove constructible and swappable let me explain why this is",
    "start": "3320329",
    "end": "3326180"
  },
  {
    "text": "and what happens here so consider I want to swap this with RHS",
    "start": "3326180",
    "end": "3332060"
  },
  {
    "text": "so if I'm okay and the other guy is ok easy I just want the yeas right",
    "start": "3332060",
    "end": "3338410"
  },
  {
    "text": "everybody's fair nice right fine that's",
    "start": "3338410",
    "end": "3344930"
  },
  {
    "text": "an easy case if I'm okay but the other guy is not okay I'm going to defer by",
    "start": "3344930",
    "end": "3352040"
  },
  {
    "text": "swapping the order of arguments I'm going to essentially punt on this case it's gonna be handled down you see what",
    "start": "3352040",
    "end": "3358640"
  },
  {
    "text": "I'm doing here on the Earth's branch if I'm okay and the other guy is not okay",
    "start": "3358640",
    "end": "3365450"
  },
  {
    "text": "let the other guy handle it so I this is we use friends right because otherwise I",
    "start": "3365450",
    "end": "3372050"
  },
  {
    "text": "have to copy the Cinco twice all right otherwise so on this branch here are not okay I'm not okay if I'm not okay and",
    "start": "3372050",
    "end": "3380839"
  },
  {
    "text": "the other guys is also not okay I'm swapping two inmates it's good to bad",
    "start": "3380839",
    "end": "3386359"
  },
  {
    "text": "people right swapna RHS Nate we're good and here's where the demons come right",
    "start": "3386359",
    "end": "3393650"
  },
  {
    "text": "at the dot dot dot so under the Daisy",
    "start": "3393650",
    "end": "3399589"
  },
  {
    "text": "cases are understood we're good with AZ cases these are sort of the obvious okay",
    "start": "3399589",
    "end": "3406069"
  },
  {
    "text": "so now I have the hard case in which one is good and one is bad so let's see how we swap a good person with a bad person",
    "start": "3406069",
    "end": "3412819"
  },
  {
    "text": "and make it fly well first we're going to create a t object by means of a move",
    "start": "3412819",
    "end": "3423020"
  },
  {
    "text": "from nay remember I'm bad the other guy's good so I'm going to create a temporary by moving from nay so at this",
    "start": "3423020",
    "end": "3429050"
  },
  {
    "text": "point this is empty is a you know can can receive another object but not",
    "start": "3429050",
    "end": "3434329"
  },
  {
    "text": "before actually destroying the II that's there you know just for good form this",
    "start": "3434329",
    "end": "3439369"
  },
  {
    "text": "is almost are needed for most types but it just to be like in keep with",
    "start": "3439369",
    "end": "3445490"
  },
  {
    "text": "everything with the law we're going to simply say let me also call that the",
    "start": "3445490",
    "end": "3450660"
  },
  {
    "text": "structor against the object that has been moved from notice that at this point right here after the destructor",
    "start": "3450660",
    "end": "3456870"
  },
  {
    "text": "right here after this destructor call at this point I committed to the transaction already because I moved from",
    "start": "3456870",
    "end": "3462540"
  },
  {
    "text": "from the guy and if an exception happens below this point that's bad",
    "start": "3462540",
    "end": "3468180"
  },
  {
    "text": "it means I lost irretrievably state so we don't that's why the requirement at",
    "start": "3468180",
    "end": "3473820"
  },
  {
    "text": "the beginning the signature remember they must be no throw move constructive etc so we're gonna have okay let me now",
    "start": "3473820",
    "end": "3483090"
  },
  {
    "text": "create a new at the a which is now empty I'm going to create a new by means of",
    "start": "3483090",
    "end": "3488160"
  },
  {
    "text": "moving from RHS yeh because the other guy is good set the okay to true at this",
    "start": "3488160",
    "end": "3493230"
  },
  {
    "text": "point ok equals true at this point my object this is good has received the",
    "start": "3493230",
    "end": "3499230"
  },
  {
    "text": "swap and now I don't need to go the same about RHS all right Jesse a destroyed",
    "start": "3499230",
    "end": "3504270"
  },
  {
    "text": "the good guy and then move the move into it from T and finally RHS ok gets true",
    "start": "3504270",
    "end": "3510630"
  },
  {
    "text": "false because it was a bad so this is difficult and to wit it had bugs in the",
    "start": "3510630",
    "end": "3517980"
  },
  {
    "text": "in the initial implementation the proposal and I find it very interesting to think about and work on like you know",
    "start": "3517980",
    "end": "3523980"
  },
  {
    "text": "when do you commit to transactions what is the minimum amount of moves and risk you can take to make sure that this",
    "start": "3523980",
    "end": "3530760"
  },
  {
    "text": "transaction goes through I'm seeing ominous looks from the organizers here so we're gonna stop in a minute typical",
    "start": "3530760",
    "end": "3538560"
  },
  {
    "start": "3536000",
    "end": "3550000"
  },
  {
    "text": "years you'd say expect a double runtime or whatever good equals 100 third start",
    "start": "3538560",
    "end": "3544530"
  },
  {
    "text": "good is 100 expected unexpected you know the drill whenever you want to use it",
    "start": "3544530",
    "end": "3555090"
  },
  {
    "start": "3550000",
    "end": "3571000"
  },
  {
    "text": "there's a very nice helper function which is also called unexpected which constructs an unexpected object guess",
    "start": "3555090",
    "end": "3562080"
  },
  {
    "text": "what right so this would be sort of simple",
    "start": "3562080",
    "end": "3568380"
  },
  {
    "text": "casual use of of expected great so we centralized use you simply put",
    "start": "3568380",
    "end": "3575580"
  },
  {
    "start": "3571000",
    "end": "3589000"
  },
  {
    "text": "star everywhere whenever you want to access anything you're going to use star and you're good an exception is going to be thrown and",
    "start": "3575580",
    "end": "3581340"
  },
  {
    "text": "you're good no problem locally you can always test with if as",
    "start": "3581340",
    "end": "3587200"
  },
  {
    "text": "we discussed and you're just fine and one other topic of debate is the last",
    "start": "3587200",
    "end": "3594310"
  },
  {
    "text": "topic gonna discuss is if an expected of te sorry object is bad but nobody looks",
    "start": "3594310",
    "end": "3601330"
  },
  {
    "text": "at it is it should he throw or not should he signal the exception or not so I was I call the function didn't succeed",
    "start": "3601330",
    "end": "3609730"
  },
  {
    "text": "but I never look at the value should anything happen no amazing leaders",
    "start": "3609730",
    "end": "3617290"
  },
  {
    "text": "debate about the still so I I agree that now the tree in the forest philosophy nothing you know if I don't care about",
    "start": "3617290",
    "end": "3623440"
  },
  {
    "text": "that valid and nothing should happen all right with this friends we're done thank you",
    "start": "3623440",
    "end": "3630130"
  },
  {
    "text": "very much and don't forget your favorite color is green thank you I'll be around here if you",
    "start": "3630130",
    "end": "3640600"
  },
  {
    "text": "have questions",
    "start": "3640600",
    "end": "3643110"
  }
]