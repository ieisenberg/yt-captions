[
  {
    "text": "foreign",
    "start": "2340",
    "end": "5340"
  },
  {
    "text": "now I can't see you but hopefully you can see me",
    "start": "9420",
    "end": "14900"
  },
  {
    "text": "okay let's just do this the way you used to hello everybody I'm making in this",
    "start": "15000",
    "end": "21660"
  },
  {
    "text": "video now none of that later today however there's a video going up you might want to check",
    "start": "21660",
    "end": "27359"
  },
  {
    "text": "it out it's not about vlogging today is about vlogging um and we're going to go straight into",
    "start": "27359",
    "end": "33120"
  },
  {
    "text": "the topic I hope you're having a great I was about to say NDC Copenhagen developer Festival can have a oh if yay",
    "start": "33120",
    "end": "42239"
  },
  {
    "text": "still awake at 20 past 10. let's see how that goes after lunch",
    "start": "42239",
    "end": "47820"
  },
  {
    "text": "so quick introduction for those of you who don't know me um hello everybody my name is Nick",
    "start": "47820",
    "end": "53219"
  },
  {
    "text": "chapsis I make YouTube videos primarily and just to check how many of you know me from YouTube",
    "start": "53219",
    "end": "59460"
  },
  {
    "text": "I see some hands that are not raised please take out your phone right now and subscribe it is free it doesn't cost anything it",
    "start": "59460",
    "end": "65939"
  },
  {
    "text": "makes me feel very very nice no I'm a bunch of other things Microsoft",
    "start": "65939",
    "end": "71880"
  },
  {
    "text": "and vpa yes whatever um I turned to 30 in April which means you can legally make a podcast now when",
    "start": "71880",
    "end": "78060"
  },
  {
    "text": "I did make one so keep coding podcast I only have like seven episodes but we have more coming uh from September and",
    "start": "78060",
    "end": "85080"
  },
  {
    "text": "I'm also the founder and author at a platform called Dome train where we create educational courses for things",
    "start": "85080",
    "end": "91740"
  },
  {
    "text": "like logging minimal apis and so on you might want to check it out now",
    "start": "91740",
    "end": "97439"
  },
  {
    "text": "I want to ask a question how many of you have actually seen this talk already on YouTube from NDC Oslo I see some hands",
    "start": "97439",
    "end": "103799"
  },
  {
    "text": "what the hell are you doing here thanks for being here this usually",
    "start": "103799",
    "end": "108960"
  },
  {
    "text": "happens the first talk but this presented will go up um as you might say and now I wanted to",
    "start": "108960",
    "end": "115320"
  },
  {
    "text": "say it has changed since you saw it but that's not the case so I'm sorry you're gonna watch the same thing but",
    "start": "115320",
    "end": "121439"
  },
  {
    "text": "I'm here I want to talk about the title now just just for a second",
    "start": "121439",
    "end": "126659"
  },
  {
    "text": "because well it's a bit obnoxious isn't it you're doing logging wrong like like how",
    "start": "126659",
    "end": "133560"
  },
  {
    "text": "do I know that you're doing it wrong well I don't in fact you might many of you might be doing it right now",
    "start": "133560",
    "end": "139980"
  },
  {
    "text": "for you this talk will be more of a validation that yeah okay indeed I'm doing everything right or you might find",
    "start": "139980",
    "end": "145620"
  },
  {
    "text": "something that you don't know about um but I want to talk about something",
    "start": "145620",
    "end": "150780"
  },
  {
    "text": "that happened in the previous conference back in I think November or April and",
    "start": "150780",
    "end": "156120"
  },
  {
    "text": "that was in Romania so I was in.net days and Rachel Apple was giving the keynote which was all",
    "start": "156120",
    "end": "163080"
  },
  {
    "text": "about dark patterns and how people try to get you to click on things that well ads mostly or let's say you have an",
    "start": "163080",
    "end": "171300"
  },
  {
    "text": "audible subscription audible will do its best to get you to not um unsubscribe and so on",
    "start": "171300",
    "end": "177540"
  },
  {
    "text": "and she was talking about clickbait at this specific point and well I thought the screen will turn into like this",
    "start": "177540",
    "end": "185519"
  },
  {
    "text": "because if you know anything about my YouTube videos I'm not saying I'm click baiting but I'm certainly pushing it is",
    "start": "185519",
    "end": "193560"
  },
  {
    "text": "all I'm gonna say but if you have to know one thing about clickbait is that it actually works so don't hate the",
    "start": "193560",
    "end": "202440"
  },
  {
    "text": "player hate the game and that's why this title was selected",
    "start": "202440",
    "end": "207780"
  },
  {
    "text": "for this talk this is a phone room obviously um so you're wondering okay what can I",
    "start": "207780",
    "end": "212879"
  },
  {
    "text": "learn here now the last thing I want to address",
    "start": "212879",
    "end": "218099"
  },
  {
    "text": "before I go into the the main body of the presentation is that some people will tell you that you don't need",
    "start": "218099",
    "end": "224640"
  },
  {
    "text": "logging at all in today's day and age we have open Telemetry the Spanish is all you need traces whatever",
    "start": "224640",
    "end": "231000"
  },
  {
    "text": "um and logging you shouldn't even worry about now in a utopian an Ideal World maybe that's that's true maybe where we",
    "start": "231000",
    "end": "238080"
  },
  {
    "text": "can all start with Evergreen projects everything.net 8 from scratch then maybe that could be the case but I do",
    "start": "238080",
    "end": "244560"
  },
  {
    "text": "understand that not everyone is in this situation and even if you do start from",
    "start": "244560",
    "end": "250560"
  },
  {
    "text": "scratch that doesn't mean that logging isn't needed even then it is needed audit logs",
    "start": "250560",
    "end": "256340"
  },
  {
    "text": "some would argue debugging tracing but why do I say that well because there's",
    "start": "256340",
    "end": "262740"
  },
  {
    "text": "this individual here who's also a speaker he had a talk yesterday unfortunately so I can't redirect you to his talk name Martin twaites any of you",
    "start": "262740",
    "end": "270660"
  },
  {
    "text": "know Martin anyone been on the talk yes awesome yeah Martin are you here",
    "start": "270660",
    "end": "275699"
  },
  {
    "text": "no you're not your loss but um he's very much an advocate for",
    "start": "275699",
    "end": "282600"
  },
  {
    "text": "not doing logging or very small amount of logging but he's interesting guy but here's the",
    "start": "282600",
    "end": "289440"
  },
  {
    "text": "interesting thing about Martin let's take a look at his LinkedIn profile and see where he works hmm he's a principal",
    "start": "289440",
    "end": "296340"
  },
  {
    "text": "developer advocate for honeycomb which is a company about observability spans metrics and tracing and all that how",
    "start": "296340",
    "end": "304500"
  },
  {
    "text": "convenient that he advocates for the things that makes him money",
    "start": "304500",
    "end": "309720"
  },
  {
    "text": "so what you should know when you see speakers on stage talking about things like this is that everyone has an",
    "start": "309720",
    "end": "314880"
  },
  {
    "text": "ulterior motive everyone wants to either promote their career the business the website so take everything you you hear",
    "start": "314880",
    "end": "322280"
  },
  {
    "text": "on the stage and any other stage with a grain of salt on a completely unrelated",
    "start": "322280",
    "end": "327600"
  },
  {
    "text": "note I have a logging course on my website for 69.99 you can actually Master this",
    "start": "327600",
    "end": "334020"
  },
  {
    "text": "topic I have to work on my Segways a bit because I think this came across as anyway so let's talk about the talk now",
    "start": "334020",
    "end": "340320"
  },
  {
    "text": "the talk is not about any of these things I'm going to show you now and I want you to raise your hand by the",
    "start": "340320",
    "end": "346320"
  },
  {
    "text": "way this talk is very raise your hand heavy so after 10 reps you might want to use the other one so you have equal",
    "start": "346320",
    "end": "352860"
  },
  {
    "text": "shoulders do you know what local is great do you know what SEC is more hands",
    "start": "352860",
    "end": "360720"
  },
  {
    "text": "great um cloudwatch AWS cloudwords yay how about application insights do we know",
    "start": "360720",
    "end": "367440"
  },
  {
    "text": "that hey Microsoft look at all those hands you sell out how about datadog do we know what that",
    "start": "367440",
    "end": "374160"
  },
  {
    "text": "is yeah you don't pay the bill for that someone else pays a bill for that",
    "start": "374160",
    "end": "379620"
  },
  {
    "text": "do you know how expensive that is if you mess it up at this point I would make a joke about",
    "start": "379620",
    "end": "385259"
  },
  {
    "text": "gcp but I don't know what they have there I don't even think it's a real Cloud platform like anyone using gcp",
    "start": "385259",
    "end": "392460"
  },
  {
    "text": "I'm sorry I've heard it great like all six people",
    "start": "392460",
    "end": "398039"
  },
  {
    "text": "like it is this talk really about right well",
    "start": "398039",
    "end": "405180"
  },
  {
    "text": "it's about this fundamentally it is about your code your c-sharp that is doing any",
    "start": "405180",
    "end": "411360"
  },
  {
    "text": "sort of logging if you've written a line of code like this ever in your life this",
    "start": "411360",
    "end": "416400"
  },
  {
    "text": "talk is for you but as I'll be going through this this talk",
    "start": "416400",
    "end": "421979"
  },
  {
    "text": "you might be like Nick you know I think what you're trying to do is you're trying to sell us a",
    "start": "421979",
    "end": "428280"
  },
  {
    "text": "performance talk as a logging talk and will certainly feel that way at some stages but please bear with me",
    "start": "428280",
    "end": "436199"
  },
  {
    "text": "there's a reason rewind there's a reason why",
    "start": "436199",
    "end": "444479"
  },
  {
    "text": "um that's the case and that is because a byproduct like a happy accident of doing logging right is a great increase in",
    "start": "444479",
    "end": "451680"
  },
  {
    "text": "your applications performance so don't think that everything I'm talking about when I'm talking about performance is that we're doing this",
    "start": "451680",
    "end": "458819"
  },
  {
    "text": "because of performance but I want you to understand the benefit of what you're getting on top of beta logging",
    "start": "458819",
    "end": "466319"
  },
  {
    "text": "and ultimately this is about the real world these are things that I've seen being done wrong I've done them wrong I",
    "start": "466319",
    "end": "471840"
  },
  {
    "text": "keep seeing them on code bases all the time and the very easy mistakes to fix once you understand the meaning behind",
    "start": "471840",
    "end": "479280"
  },
  {
    "text": "them now I want to ask a question what is this",
    "start": "479280",
    "end": "484500"
  },
  {
    "text": "I want to be more specific what is this what is this supposed to be representing this value this hello this parameter",
    "start": "484500",
    "end": "490860"
  },
  {
    "text": "anyone can shout what it is it's a string great what is supposed to represent",
    "start": "490860",
    "end": "497960"
  },
  {
    "text": "log message message information",
    "start": "498300",
    "end": "504000"
  },
  {
    "text": "what measures template let's see what Microsoft says this is supposed to be",
    "start": "504000",
    "end": "509699"
  },
  {
    "text": "the message the message it's not the message it's the message",
    "start": "509699",
    "end": "515700"
  },
  {
    "text": "template so let's start this talk with a bit of a theme and I'm going to have my eight",
    "start": "515700",
    "end": "521279"
  },
  {
    "text": "logging rules that you can follow or note I don't care one thing I should point out however is that",
    "start": "521279",
    "end": "526980"
  },
  {
    "text": "apart from a couple which I will tell you ahead of time that they are heavily subjective and you don't have to follow",
    "start": "526980",
    "end": "532560"
  },
  {
    "text": "them the rest are objective it's things that you should be doing no questions asked it's not about",
    "start": "532560",
    "end": "540300"
  },
  {
    "text": "personal opinion it's about that's how you should do it and because.net has changed so much over the years",
    "start": "540300",
    "end": "547200"
  },
  {
    "text": "well some people are still doing them wrong so the first rule is the message",
    "start": "547200",
    "end": "553620"
  },
  {
    "text": "is actually the message template and it's arbitrated as such and we're going to see in this talk what this means but",
    "start": "553620",
    "end": "560100"
  },
  {
    "text": "I'm going to show you a few lines of code and I'm going to ask you if you are doing any of these on your logs don't",
    "start": "560100",
    "end": "565560"
  },
  {
    "text": "worry this is not a trap question I just want you to be engaged and if you use string interpolation in",
    "start": "565560",
    "end": "571440"
  },
  {
    "text": "your logs nice how about string concatenation not so much because I guess",
    "start": "571440",
    "end": "577680"
  },
  {
    "text": "interpolation replaces that how about string template um templating and formatting yeah but this approach right",
    "start": "577680",
    "end": "584100"
  },
  {
    "text": "with the zero and then yeah so it was a trap question all of these are wrong so if you're doing any of this then you're",
    "start": "584100",
    "end": "589860"
  },
  {
    "text": "in the right room but I'm going to start with the first one which is one of my favorite c-sharp",
    "start": "589860",
    "end": "596040"
  },
  {
    "text": "features actually and if you're still in Java or if someone of you is doing Java",
    "start": "596040",
    "end": "602399"
  },
  {
    "text": "they still haven't figured this one out and that is string interpolation so what is string interpolation well it",
    "start": "602399",
    "end": "609720"
  },
  {
    "text": "came in the C sharp six or seven I want to say and let's say we take this message and",
    "start": "609720",
    "end": "616500"
  },
  {
    "text": "we want to parameterize it so username chaps is just in fact now we could do this with string",
    "start": "616500",
    "end": "621839"
  },
  {
    "text": "concatenation so we can have the the quote double quotes and then plus and",
    "start": "621839",
    "end": "627420"
  },
  {
    "text": "then so on and so forth and build the same string using multiple strings like this",
    "start": "627420",
    "end": "633480"
  },
  {
    "text": "or we could use string.comcat now behind the scenes what's happening in C sharp",
    "start": "633480",
    "end": "639660"
  },
  {
    "text": "is actually that that second line will be compiled into that third line",
    "start": "639660",
    "end": "644940"
  },
  {
    "text": "so those two things are basically the same now you could also have a string.format where you can have indexed parameters in",
    "start": "644940",
    "end": "652740"
  },
  {
    "text": "your message template and you can say zero is name one is age and so on",
    "start": "652740",
    "end": "658980"
  },
  {
    "text": "and you can mix and match as well so you can have one earlier and and zero later",
    "start": "658980",
    "end": "664260"
  },
  {
    "text": "but when string interpolation came out we got this where you can have this dollar sign in the beginning and then",
    "start": "664260",
    "end": "671040"
  },
  {
    "text": "Kelly braces and then who can say name here in h here and as you can see it's just a way more elegant",
    "start": "671040",
    "end": "677880"
  },
  {
    "text": "solution than what we really were using before which was the string concatenation",
    "start": "677880",
    "end": "684000"
  },
  {
    "text": "now one thing you have to know about c-sharp especially all the way until C sharp 11 and 12 now is that the weight",
    "start": "684000",
    "end": "690240"
  },
  {
    "text": "was shipped with net made it very dangerous to add features that fundamentally changed where c-sharp runs",
    "start": "690240",
    "end": "698220"
  },
  {
    "text": "and that is the CLR because c-sharp is compiled into IL code and that IL code those instructions are what we",
    "start": "698220",
    "end": "704160"
  },
  {
    "text": "ultimately have executed and why is that well that's because of updating or if something is breaking and",
    "start": "704160",
    "end": "711839"
  },
  {
    "text": "you have a service pack too on your Windows machine then it's very hard to make sure everyone installs the new",
    "start": "711839",
    "end": "717420"
  },
  {
    "text": "version just it's just a mess so how c-sharp features were added until C",
    "start": "717420",
    "end": "722880"
  },
  {
    "text": "sharp 11 and 12 is through syntactic sugar so what we had is through the",
    "start": "722880",
    "end": "728279"
  },
  {
    "text": "process of lowering we would get features are higher as high as higher versions of lower features which means",
    "start": "728279",
    "end": "735959"
  },
  {
    "text": "that for example string interpolation is no different the in fact the only feature or features that we have now in",
    "start": "735959",
    "end": "742140"
  },
  {
    "text": "C sharp 12 and 11 that fundamentally change the CLR to be able to be accommodated are generics on attributes",
    "start": "742140",
    "end": "748920"
  },
  {
    "text": "and that virtual abstract static thing on the interfaces those two things",
    "start": "748920",
    "end": "754560"
  },
  {
    "text": "require the CLR change but it's fine now because c-sharp or net is released",
    "start": "754560",
    "end": "760380"
  },
  {
    "text": "not bi-weekly every two weeks with patches so if that was an issue they could easily patch that",
    "start": "760380",
    "end": "767399"
  },
  {
    "text": "and string interpolation is no different in fact all the way until C sharp nine if you wrote a message like the top one",
    "start": "767399",
    "end": "773880"
  },
  {
    "text": "what the compiler would do behind the scenes is just a string dot format",
    "start": "773880",
    "end": "779040"
  },
  {
    "text": "why is this bad and why am I going into this tangent about strings well it's bad",
    "start": "779040",
    "end": "784320"
  },
  {
    "text": "because of this both for format and concat you might be able to spot it I'm",
    "start": "784320",
    "end": "790200"
  },
  {
    "text": "going to give you a bit of a hint these things are bad if you've ever tried to write high performance C sharp",
    "start": "790200",
    "end": "796440"
  },
  {
    "text": "whenever you see parameters of an object array Mega red flag or run or fix it",
    "start": "796440",
    "end": "804000"
  },
  {
    "text": "and that has to do with how c-sharp deals with memory so memory is allocated",
    "start": "804000",
    "end": "809100"
  },
  {
    "text": "in two places in c-sharp you might have heard them it's the stack and the Heap neck",
    "start": "809100",
    "end": "815519"
  },
  {
    "text": "what what the hell I thought this is a logging talk it will make sense so let's take a look",
    "start": "815519",
    "end": "821579"
  },
  {
    "text": "at the two different places where we can allocate memory",
    "start": "821579",
    "end": "826399"
  },
  {
    "text": "so the first one is a stack let's assume I have something like this let's avoid method and also assume that nothing will",
    "start": "830579",
    "end": "836820"
  },
  {
    "text": "be optimized the way of the method because some people try to get clever with saying yeah the compiler will",
    "start": "836820",
    "end": "842339"
  },
  {
    "text": "remove all of these parameters because nothing is using it assume that they are used so what I have here is an integer which",
    "start": "842339",
    "end": "849899"
  },
  {
    "text": "is a value type I have a good which is also a value type because it's a struct and I have a point",
    "start": "849899",
    "end": "855240"
  },
  {
    "text": "to D that for the purposes of this demonstration assume that it is also a",
    "start": "855240",
    "end": "860700"
  },
  {
    "text": "struct which is a value type the way this will be allocated on the memory is in a very local thing to what",
    "start": "860700",
    "end": "868500"
  },
  {
    "text": "we call the stack frame which is what we have in this method and it's going to look something like this so we're going",
    "start": "868500",
    "end": "874320"
  },
  {
    "text": "to say put 30 on stack in position zero put the good in position two um or one I can't do indexing then two",
    "start": "874320",
    "end": "882480"
  },
  {
    "text": "and three now if you want to be very pedantic there's actually more going on behind the scenes to accommodate this",
    "start": "882480",
    "end": "887699"
  },
  {
    "text": "track but don't worry fundamentally or conceptually that's what's going on behind the scenes",
    "start": "887699",
    "end": "893940"
  },
  {
    "text": "and the good thing about this is that this memory is only used within the stack frame and once we're outside the",
    "start": "893940",
    "end": "900360"
  },
  {
    "text": "stack frame it can be automatically disposed not garbage collected mind you but just disappear out of existence",
    "start": "900360",
    "end": "907079"
  },
  {
    "text": "because we can guarantee for a fact that nothing else needs this and because those are value types and they're",
    "start": "907079",
    "end": "912540"
  },
  {
    "text": "allocated locally we can just dispose them no garbage collection",
    "start": "912540",
    "end": "917579"
  },
  {
    "text": "the Heap on the other hand is quite different in this example assume that both person and point to D are reference",
    "start": "917579",
    "end": "925440"
  },
  {
    "text": "types they're classes and reference types are always allocated on the hip the hip is another area somewhere we",
    "start": "925440",
    "end": "932940"
  },
  {
    "text": "don't really know exactly where it is and you can think of it the way I like to think of it it's like just a",
    "start": "932940",
    "end": "938579"
  },
  {
    "text": "dictionary with Blobs of memory floating in space you can tell I'm not that",
    "start": "938579",
    "end": "944459"
  },
  {
    "text": "technical on the subject and they all have an address sort of an ID saying",
    "start": "944459",
    "end": "950040"
  },
  {
    "text": "that okay if you want the person then the person is on this location and if",
    "start": "950040",
    "end": "955980"
  },
  {
    "text": "you want the point to D the point of D is there there can be miles apart it doesn't really matter they're not local",
    "start": "955980",
    "end": "961560"
  },
  {
    "text": "but because of how they're allocated and how they can be used we can never really be sure who's using it so what we're",
    "start": "961560",
    "end": "968279"
  },
  {
    "text": "doing is we're allocating there we also don't know their size that's another reason why",
    "start": "968279",
    "end": "973320"
  },
  {
    "text": "we might want to do that or while we're doing it and we say okay they use that",
    "start": "973320",
    "end": "978899"
  },
  {
    "text": "allocate there there might be some references to it at some point later let's see how many of those don't have",
    "start": "978899",
    "end": "984180"
  },
  {
    "text": "any references to it and then garbage collector so let's see how the two compare",
    "start": "984180",
    "end": "991199"
  },
  {
    "text": "so we have the stack and we have the Heap the stack is where value types can be allocated now it's not where they",
    "start": "991199",
    "end": "998519"
  },
  {
    "text": "always allocated the value types can also be allocated on the Heap and we're going to see how",
    "start": "998519",
    "end": "1004339"
  },
  {
    "text": "also local variables and parameters let's say you have a class they can also",
    "start": "1004339",
    "end": "1010339"
  },
  {
    "text": "be allocated there sorry a method not a class it's very",
    "start": "1010339",
    "end": "1016040"
  },
  {
    "text": "fast and it automatically disappears when out of scope we do not expect a garbage collection event to clear out",
    "start": "1016040",
    "end": "1022519"
  },
  {
    "text": "that memory now the Heap is where reference types are always allocated and it's sort of a",
    "start": "1022519",
    "end": "1029360"
  },
  {
    "text": "big pool of memory and it needs to be garbage collected so boxed value types",
    "start": "1029360",
    "end": "1036020"
  },
  {
    "text": "can be allocated here now what is boxing I will explain what",
    "start": "1036020",
    "end": "1041120"
  },
  {
    "text": "boxing is by taking a look at this graph over here so any of you have seen this",
    "start": "1041120",
    "end": "1046819"
  },
  {
    "text": "showing how Microsoft tells you that dotnet is the best thing ever in",
    "start": "1046819",
    "end": "1051980"
  },
  {
    "text": "existence and the fastest thing as well yeah Microsoft made this it is not",
    "start": "1051980",
    "end": "1058640"
  },
  {
    "text": "objective but it's not subjective you can read more on how this is generated but the reason why I'm bringing it up is",
    "start": "1058640",
    "end": "1064580"
  },
  {
    "text": "because the way.net has gotten that fast is by actually eliminating a lot of the",
    "start": "1064580",
    "end": "1070220"
  },
  {
    "text": "hip allocations that cause garbage collection which in return cause inconsistency in performance and slows",
    "start": "1070220",
    "end": "1075559"
  },
  {
    "text": "application down and a bit of a self-promotion as well in",
    "start": "1075559",
    "end": "1080840"
  },
  {
    "text": "the podcast I had Stephen Tob who is a genius performance guy in Microsoft where we spent three hours talking about",
    "start": "1080840",
    "end": "1087679"
  },
  {
    "text": "things like that and I pretend like I can understand what he's saying I'm not asleep I'm just blinking maybe not the",
    "start": "1087679",
    "end": "1093980"
  },
  {
    "text": "best frame to choose for this so what is boxing and why am I so",
    "start": "1093980",
    "end": "1099799"
  },
  {
    "text": "against it well let's take a look at this method we have an integer elf um called age and we",
    "start": "1099799",
    "end": "1107360"
  },
  {
    "text": "assign the age to be third and then we return it now I don't really know IL but I know",
    "start": "1107360",
    "end": "1112400"
  },
  {
    "text": "how to copy it from my ID so I'm just going to paste it here so this line will",
    "start": "1112400",
    "end": "1118340"
  },
  {
    "text": "be translated into this line when I compile my code all this really says is that you put an integer with value",
    "start": "1118340",
    "end": "1124760"
  },
  {
    "text": "thread in this location on the stack and again later then just get it and do something with it",
    "start": "1124760",
    "end": "1129980"
  },
  {
    "text": "and that's very cheap very easy no magic involved however if I have the same",
    "start": "1129980",
    "end": "1135320"
  },
  {
    "text": "thing but as you can see I convert that implicitly to an object because I can't",
    "start": "1135320",
    "end": "1140419"
  },
  {
    "text": "convert any type to an object then the instruction actually changes not only do",
    "start": "1140419",
    "end": "1145880"
  },
  {
    "text": "we allocate on the stack but we also box it into an int32 object this boxing",
    "start": "1145880",
    "end": "1152960"
  },
  {
    "text": "process over here is what will make this value actually go on the Heap so I have",
    "start": "1152960",
    "end": "1160100"
  },
  {
    "text": "an object type so I have a value type converted into a reference type which has to go on the Heap and then that",
    "start": "1160100",
    "end": "1166820"
  },
  {
    "text": "causes the device to be allocated presumably in this case for no reason and this goes both ways by the way so",
    "start": "1166820",
    "end": "1173179"
  },
  {
    "text": "you have unboxing as well so you have unbox that parameter and",
    "start": "1173179",
    "end": "1178400"
  },
  {
    "text": "then return it now why is that all bad",
    "start": "1178400",
    "end": "1186080"
  },
  {
    "text": "ultimately this because you're gonna create so much garbage out of it and as",
    "start": "1186080",
    "end": "1191120"
  },
  {
    "text": "we've established garbage needs to be garbage collected and that's what slows application down",
    "start": "1191120",
    "end": "1196700"
  },
  {
    "text": "so let's take a look at the two main reasons crap",
    "start": "1196700",
    "end": "1202160"
  },
  {
    "text": "and then a ton of strings can also cause tons of crap because strings are not special I mean technically they are they",
    "start": "1203120",
    "end": "1210260"
  },
  {
    "text": "are reference type or reference types are compared based on their values but",
    "start": "1210260",
    "end": "1215840"
  },
  {
    "text": "they're not also not magic many people think that we have this word called the string interning which makes you think",
    "start": "1215840",
    "end": "1221539"
  },
  {
    "text": "that each string is allocated once per value of the string in memory and then",
    "start": "1221539",
    "end": "1226580"
  },
  {
    "text": "reused using its memory address and this is only true for string compile time string literals all the ones forced",
    "start": "1226580",
    "end": "1233480"
  },
  {
    "text": "manually during runtime it won't be done for every string so even if you're Computing the same",
    "start": "1233480",
    "end": "1240980"
  },
  {
    "text": "string over and over and over and over again that string multiple times will be allocated in your memory and that will",
    "start": "1240980",
    "end": "1247640"
  },
  {
    "text": "come again into the picture when we talk about logging that's why I'm giving you all this background so more boxing means",
    "start": "1247640",
    "end": "1253760"
  },
  {
    "text": "more hip allocations which means um more work to set and retrieve values which means more gaps collections",
    "start": "1253760",
    "end": "1259580"
  },
  {
    "text": "triggered which means more pausing which means inconsistency in performance and imagine you're building a game or",
    "start": "1259580",
    "end": "1264799"
  },
  {
    "text": "something that needs to be on a frame by frame precision well this can really screw you up",
    "start": "1264799",
    "end": "1271400"
  },
  {
    "text": "more strings mean more hip allocations because they are reference types and they're expensive reference types as",
    "start": "1271400",
    "end": "1276620"
  },
  {
    "text": "well they're heavy types which means more garbage collections more pausing which means more time to clean things up",
    "start": "1276620",
    "end": "1284059"
  },
  {
    "text": "but you might say Nick string interpolation handlers fix that",
    "start": "1284059",
    "end": "1289159"
  },
  {
    "text": "and that is true in C sharp 10 we got an amazing feature called string interpolation handlers and it looks",
    "start": "1289159",
    "end": "1295700"
  },
  {
    "text": "something like this so before this thing would be converted to a string.format which would box because it uses the",
    "start": "1295700",
    "end": "1302059"
  },
  {
    "text": "parameters object array however from C sharp 10 onwards all that",
    "start": "1302059",
    "end": "1308059"
  },
  {
    "text": "will be converted to this beauty which is a lot but thankfully you don't have to write it but let's talk about it",
    "start": "1308059",
    "end": "1314659"
  },
  {
    "text": "first you have to know if you have to know this is a ref struct always allocated On The Stack",
    "start": "1314659",
    "end": "1320419"
  },
  {
    "text": "not only that but that 16 or sorry 19 and 2 that you see on its instantiation",
    "start": "1320419",
    "end": "1326539"
  },
  {
    "text": "has to do with the size of the string that we are passing the literal size of",
    "start": "1326539",
    "end": "1331820"
  },
  {
    "text": "the string and then the number of parameters we're going to pass in this case two parameters the name and the age",
    "start": "1331820",
    "end": "1338179"
  },
  {
    "text": "and the most important thing about all this all this is that the appended",
    "start": "1338179",
    "end": "1344240"
  },
  {
    "text": "append formatted method that accepts an integer the age uses a generic whenever",
    "start": "1344240",
    "end": "1350419"
  },
  {
    "text": "you see generics in C sharp you're actually preventing the process of boxing so by having the compiler detect",
    "start": "1350419",
    "end": "1357440"
  },
  {
    "text": "all that in compile time we don't have to worry about it in runtime saving us more memory and if you've been in C",
    "start": "1357440",
    "end": "1364520"
  },
  {
    "text": "shops in C sharp one where we didn't have generics I say we I wasn't there",
    "start": "1364520",
    "end": "1370159"
  },
  {
    "text": "we have we had an array list that accepted objects and you had to cast them out of whatever type they were to",
    "start": "1370159",
    "end": "1377360"
  },
  {
    "text": "use them um in C chapter we got generics and thankfully we did it better than Java so",
    "start": "1377360",
    "end": "1384020"
  },
  {
    "text": "well and it's funny because Matt storgensen who is obviously the lead for c-sharp",
    "start": "1384020",
    "end": "1390679"
  },
  {
    "text": "was actually responsible for generics in Java or part of the team so I call it sabotage",
    "start": "1390679",
    "end": "1397960"
  },
  {
    "text": "so by doing all that yes we are saving that boxing and allocation but we still",
    "start": "1398600",
    "end": "1404780"
  },
  {
    "text": "have all of those strings being allocated once per unique entry so if",
    "start": "1404780",
    "end": "1410240"
  },
  {
    "text": "you have like let's say a name and a grid or a name a good an age or a good enablement age and a daytime parameter",
    "start": "1410240",
    "end": "1416659"
  },
  {
    "text": "and you use that in a string you're going to create an amount of string as many of your log invocations and those",
    "start": "1416659",
    "end": "1423320"
  },
  {
    "text": "are unique strings that are being allocated in your memory let's visualize that because all that",
    "start": "1423320",
    "end": "1428539"
  },
  {
    "text": "might just go over your head so if you profile your application doing that which is just generating these",
    "start": "1428539",
    "end": "1434720"
  },
  {
    "text": "strings for login purposes then your memory will look something like this where we have these spikes going on and",
    "start": "1434720",
    "end": "1441440"
  },
  {
    "text": "then down and on and down and on and down and memory pressure will depend on whatever metal you're running this on",
    "start": "1441440",
    "end": "1448820"
  },
  {
    "text": "but fundamentally as you can see we go all the way up to 16 megabytes and then",
    "start": "1448820",
    "end": "1454760"
  },
  {
    "text": "something happens so we go down what happens is garbage collection and you can see that by actually me highlighting",
    "start": "1454760",
    "end": "1461539"
  },
  {
    "text": "this bit which is microseconds of pausing your application completely",
    "start": "1461539",
    "end": "1467960"
  },
  {
    "text": "everything to just say okay let's count how many of you don't have",
    "start": "1467960",
    "end": "1473240"
  },
  {
    "text": "any references this this this this this okay let's clean it and your strings will be part of this at some point",
    "start": "1473240",
    "end": "1479539"
  },
  {
    "text": "so the more you allocate the more of this happens the more it needs to be garbage collected the more your",
    "start": "1479539",
    "end": "1484640"
  },
  {
    "text": "application is pausing so rule number two I shall not use string interpolation or",
    "start": "1484640",
    "end": "1490520"
  },
  {
    "text": "concatenation in the message template but what should you use if you can't use",
    "start": "1490520",
    "end": "1496640"
  },
  {
    "text": "those amazing features of C sharp well structure logging so let's consider the following we have",
    "start": "1496640",
    "end": "1504380"
  },
  {
    "text": "this log message where actually this is very close to what I was doing when I was working for a payment provider and",
    "start": "1504380",
    "end": "1511640"
  },
  {
    "text": "we have a look at DOT log and then payment with ID whatever string interpolation failed with status",
    "start": "1511640",
    "end": "1517820"
  },
  {
    "text": "whatever and if I do that and I push it into application insights then I'm going to see something like this I'm going to",
    "start": "1517820",
    "end": "1524360"
  },
  {
    "text": "have payment with ID it's fantastic it's great I'm getting all the information I need and when business comes and says oh",
    "start": "1524360",
    "end": "1531080"
  },
  {
    "text": "we had this massive incident and production went down and the validation",
    "start": "1531080",
    "end": "1536120"
  },
  {
    "text": "service just clicked the bucket and we had to go back and find all the canceled",
    "start": "1536120",
    "end": "1541400"
  },
  {
    "text": "payments then you're like oh I know what I can do because I can see that all of this ends with requires action canceled",
    "start": "1541400",
    "end": "1549140"
  },
  {
    "text": "and so on so because I'm smart I'm gonna say go to traces and say where message",
    "start": "1549140",
    "end": "1554419"
  },
  {
    "text": "end with canceled right and then order by date timestamp and that's it",
    "start": "1554419",
    "end": "1559520"
  },
  {
    "text": "and this will work I will get exactly what business asks and they will be happy and I'm gonna get the bonus and",
    "start": "1559520",
    "end": "1565100"
  },
  {
    "text": "everyone will sleep very well at night however when they come back and they say",
    "start": "1565100",
    "end": "1570440"
  },
  {
    "text": "you know that happened again and now we actually need to know the number or the payment ID of what happened to that",
    "start": "1570440",
    "end": "1576740"
  },
  {
    "text": "payment until it was canceled you're gonna be very sad because if",
    "start": "1576740",
    "end": "1582080"
  },
  {
    "text": "that's all you have you're gonna have to write some very nasty Rejects and try to filter things and it's just not going to",
    "start": "1582080",
    "end": "1588080"
  },
  {
    "text": "work but now let's do this let's utilize structure logging",
    "start": "1588080",
    "end": "1593419"
  },
  {
    "text": "so let's say logar.log information to log an information log and instead of",
    "start": "1593419",
    "end": "1598940"
  },
  {
    "text": "using that dollar sign in the beginning is string interpolation let's just say payment with ID Kelly braces payment ID",
    "start": "1598940",
    "end": "1606559"
  },
  {
    "text": "failed with status payment status and then I have the ID and the status as",
    "start": "1606559",
    "end": "1612200"
  },
  {
    "text": "secondary parameters they're not part of the string they're separate I will still if I push this into",
    "start": "1612200",
    "end": "1619159"
  },
  {
    "text": "application insights have a very nice set of logs person very nice set of traces",
    "start": "1619159",
    "end": "1625279"
  },
  {
    "text": "the difference is that if I expand each of these entries now what I can see is",
    "start": "1625279",
    "end": "1630919"
  },
  {
    "text": "this so not only do I have the computed string but I also have the original",
    "start": "1630919",
    "end": "1636260"
  },
  {
    "text": "format I have the payment ID I have the payment status as individual parameters",
    "start": "1636260",
    "end": "1641840"
  },
  {
    "text": "and what can you do with these parameters well you can filter them you can use them you can go and say traces where custom",
    "start": "1641840",
    "end": "1648440"
  },
  {
    "text": "dimensions and by the way this is universal to any login provider so all of them will allow you to somehow",
    "start": "1648440",
    "end": "1654559"
  },
  {
    "text": "search for them and give me everything about the payment that was canceled so as long as that",
    "start": "1654559",
    "end": "1662659"
  },
  {
    "text": "naming that you gave to this parameter is consistent throughout the application and I should say",
    "start": "1662659",
    "end": "1668240"
  },
  {
    "text": "hopefully if you have a distributed system throughout the whole system",
    "start": "1668240",
    "end": "1673340"
  },
  {
    "text": "that you can correlate everything and see what happened everywhere you can even go deeper if you want to use",
    "start": "1673340",
    "end": "1678440"
  },
  {
    "text": "original format and check for any Logs with that format you can do that if you're using the eventid.net ads by",
    "start": "1678440",
    "end": "1686059"
  },
  {
    "text": "default at least in the app inside provider then you can use that as well because the message can actually change",
    "start": "1686059",
    "end": "1692600"
  },
  {
    "text": "and that can cause issues um but this is a way way better solution",
    "start": "1692600",
    "end": "1699500"
  },
  {
    "text": "but you're probably going to say Nick this is still boxing",
    "start": "1699500",
    "end": "1705460"
  },
  {
    "text": "and you're right at this point we're still boxing but we fixed the part where we allocate a new",
    "start": "1709640",
    "end": "1716360"
  },
  {
    "text": "string every time we're just gonna allocate that single template and then of course it's up to the provider to",
    "start": "1716360",
    "end": "1722419"
  },
  {
    "text": "know what it's going to do with that string but if the provider is optimized it will actually save you quite a bit of",
    "start": "1722419",
    "end": "1727700"
  },
  {
    "text": "memory in strings which is more important than just boxing a couple of value types the ID and the status in",
    "start": "1727700",
    "end": "1732860"
  },
  {
    "text": "this case both of them are relatively cheap so I shall use structure logging and",
    "start": "1732860",
    "end": "1739400"
  },
  {
    "text": "give good names to my parameters consistent names Universal names you don't want to have payment ID called ID",
    "start": "1739400",
    "end": "1746779"
  },
  {
    "text": "here payment ID here and payment identifier there just use the exact same",
    "start": "1746779",
    "end": "1751880"
  },
  {
    "text": "name everywhere but you might say hey Nick I'm using cellular does this",
    "start": "1751880",
    "end": "1758960"
  },
  {
    "text": "all apply to me how many of you use serialogue as you raise your hands it's a great Library that's another joke",
    "start": "1758960",
    "end": "1765200"
  },
  {
    "text": "I actually really really like it there's two ways of doing cellular there is the raw side logger where you",
    "start": "1765200",
    "end": "1772940"
  },
  {
    "text": "just load configuration and you enrich it if you want and so on and then you create a logger and then you just add",
    "start": "1772940",
    "end": "1779179"
  },
  {
    "text": "this single logger into your application and you keep using it throughout the application and then there's the other",
    "start": "1779179",
    "end": "1784760"
  },
  {
    "text": "one where you have the serialog.extensions Dot Login approach where you set the static logger and then",
    "start": "1784760",
    "end": "1790940"
  },
  {
    "text": "you use the add login parameter to add cell log in your application now",
    "start": "1790940",
    "end": "1796220"
  },
  {
    "text": "both of them have pros and cons the first one will be more performant because it's detached by the built-in",
    "start": "1796220",
    "end": "1802399"
  },
  {
    "text": "logger the second one will actually add cellulog as one of the providers of logging so what you want to do in that",
    "start": "1802399",
    "end": "1808880"
  },
  {
    "text": "situation is clear everything else and only have cellulog and then cellular can have its own providers",
    "start": "1808880",
    "end": "1815740"
  },
  {
    "text": "this will all get quite irrelevant as we go through the topic but there are performance differences depending on",
    "start": "1815740",
    "end": "1822200"
  },
  {
    "text": "which side you are on them now the good thing about serolog is that",
    "start": "1822200",
    "end": "1827299"
  },
  {
    "text": "very early they actually prevented boxing and they're preventing it in the same",
    "start": "1827299",
    "end": "1833000"
  },
  {
    "text": "way that C sharp is trying to prevent it in C sharp 10 onwards with string intervalation and that is by providing",
    "start": "1833000",
    "end": "1839419"
  },
  {
    "text": "methods like information write error whatever that have n amount of generic",
    "start": "1839419",
    "end": "1846679"
  },
  {
    "text": "parameters so we have the template as the first parameter and they actually do call it template we don't call it",
    "start": "1846679",
    "end": "1851960"
  },
  {
    "text": "message to confuse people sorry I got a bit heated there and they pre-created an N amount I think",
    "start": "1851960",
    "end": "1860480"
  },
  {
    "text": "all the way to five six or seven methods that have generic parameters",
    "start": "1860480",
    "end": "1867440"
  },
  {
    "text": "and this will prevent boxing only doesn't then",
    "start": "1867440",
    "end": "1874880"
  },
  {
    "text": "let's talk about the log level for a second because that's relevant in Microsoft or the Microsoft vlogger",
    "start": "1874880",
    "end": "1881120"
  },
  {
    "text": "you have the enum called log level and you have Trace debug information warning",
    "start": "1881120",
    "end": "1887120"
  },
  {
    "text": "error critical and then in the end they said  we don't have the nun so they added",
    "start": "1887120",
    "end": "1893600"
  },
  {
    "text": "that six so if anything comes after that we're screwed",
    "start": "1893600",
    "end": "1898760"
  },
  {
    "text": "the reason why they did it just pulling the leg is because when you're configuring your log level in your",
    "start": "1898760",
    "end": "1904220"
  },
  {
    "text": "application if you set it to none six then everything else is basically shadowed so that's it just looks weird",
    "start": "1904220",
    "end": "1911480"
  },
  {
    "text": "to me just make it nullable come on then you have cell log which goes with",
    "start": "1911480",
    "end": "1916820"
  },
  {
    "text": "verbose debug information iron and fatal fatal really a bit Grim isn't it",
    "start": "1916820",
    "end": "1925220"
  },
  {
    "text": "I think it's made by a German guy so it makes sense but fundamentally they mean the exact",
    "start": "1925220",
    "end": "1931340"
  },
  {
    "text": "same things Trace debug information warning error fatal Trace is just a very small information",
    "start": "1931340",
    "end": "1936860"
  },
  {
    "text": "that's not supposed to be or and verbose that's not supposed to be shared with anybody really including your login",
    "start": "1936860",
    "end": "1942440"
  },
  {
    "text": "provider if you want to push it somewhere it would have sensitive information debug is as the name implies",
    "start": "1942440",
    "end": "1948140"
  },
  {
    "text": "for you to debug your application usually you don't push it but you can information is informational it gives",
    "start": "1948140",
    "end": "1954200"
  },
  {
    "text": "you something about your app warning is oh there's something going on and maybe you want to take you know take a look",
    "start": "1954200",
    "end": "1960980"
  },
  {
    "text": "here error is something broke but your app is still running critical is something broke call 911 or whatever you",
    "start": "1960980",
    "end": "1968779"
  },
  {
    "text": "have uh whoever's on call all that can be configured in your",
    "start": "1968779",
    "end": "1974659"
  },
  {
    "text": "application settings.json or your login provide or your settings provider so you probably have seen this because it comes",
    "start": "1974659",
    "end": "1981080"
  },
  {
    "text": "with every goddamn template in c-sharp so the default log level is information",
    "start": "1981080",
    "end": "1986899"
  },
  {
    "text": "for everything but then you can have log categories like microsoft.asp.net core",
    "start": "1986899",
    "end": "1991940"
  },
  {
    "text": "to say that anything under that category has a different level and then when you use logarithmation or",
    "start": "1991940",
    "end": "1998740"
  },
  {
    "text": "logger.loginformation that Associates a specific log level with that message and",
    "start": "1998740",
    "end": "2003940"
  },
  {
    "text": "that's how c-sharp knows to display it or send it to your provider or not",
    "start": "2003940",
    "end": "2009039"
  },
  {
    "text": "now I want to talk about the dot the the Microsoft logger a bit because the Microsoft logger looks like this we have",
    "start": "2009039",
    "end": "2016600"
  },
  {
    "text": "an easy enabled check to see if the log level is enabled and if it is not enabled we're not going to push the log",
    "start": "2016600",
    "end": "2022840"
  },
  {
    "text": "and that's great because it means you're going to do less work you don't you know if something is debug and you have",
    "start": "2022840",
    "end": "2028240"
  },
  {
    "text": "information well why would I even worry about it but the problem is that at this point",
    "start": "2028240",
    "end": "2033760"
  },
  {
    "text": "we've already boxed those arguments so yes it is optimized but it is not as",
    "start": "2033760",
    "end": "2039460"
  },
  {
    "text": "optimized as it could be and that's where the center log logger comes in from a very very stage they did",
    "start": "2039460",
    "end": "2046059"
  },
  {
    "text": "the following they said when I write this I'm going to use generics I'm still going to have that is enabled log level",
    "start": "2046059",
    "end": "2053560"
  },
  {
    "text": "check but I'm only going to write and box which boxing is inevitable in this case at least with the tooling we had at",
    "start": "2053560",
    "end": "2060220"
  },
  {
    "text": "the time I'm only going to do the boxing if I know that the log level is enabled",
    "start": "2060220",
    "end": "2068378"
  },
  {
    "text": "so this will prevent unnecessary work what you can do as well with the built-in Microsoft logger is to write",
    "start": "2068379",
    "end": "2074560"
  },
  {
    "text": "your own methods to describe what each thing should do so if you want to log a payment file you can make a load payment",
    "start": "2074560",
    "end": "2080260"
  },
  {
    "text": "file method because you're going to have the good and the status as compile time parameters it's not going to be any",
    "start": "2080260",
    "end": "2085599"
  },
  {
    "text": "boxing and you can say if log level is not enabled then return early and you're",
    "start": "2085599",
    "end": "2090940"
  },
  {
    "text": "going to prevent the Box again and necessary work so rule number four I shall prevent",
    "start": "2090940",
    "end": "2097300"
  },
  {
    "text": "unnecessary boxing for inactive log levels now you might have seen what I just showed you before and you might say",
    "start": "2097300",
    "end": "2102580"
  },
  {
    "text": "God I have to make one method per thing I want to log how is that even that",
    "start": "2102580",
    "end": "2108940"
  },
  {
    "text": "doesn't scale and you're right and the good thing about this is that Microsoft also knows it because Microsoft turns",
    "start": "2108940",
    "end": "2114700"
  },
  {
    "text": "out they also write code in.net and they have been very hard at work",
    "start": "2114700",
    "end": "2120099"
  },
  {
    "text": "they made a logging Source generator so instead of you having they acknowledge",
    "start": "2120099",
    "end": "2126040"
  },
  {
    "text": "that yeah that thing I just showed you make a method per log message is the way to go",
    "start": "2126040",
    "end": "2131140"
  },
  {
    "text": "but it's also very very tedious to do so what they did is they gave us this tooling where you can slap this into a",
    "start": "2131140",
    "end": "2138099"
  },
  {
    "text": "partial static class and you can add the logger message attribute you can specify log level message event ID a bunch of",
    "start": "2138099",
    "end": "2145060"
  },
  {
    "text": "different other things and then all you need to do is you set the message you give it a name and behind the scenes",
    "start": "2145060",
    "end": "2152320"
  },
  {
    "text": "a magic sword generator we'll take a look at this and say oh I know what to do with this I can write some code that",
    "start": "2152320",
    "end": "2158619"
  },
  {
    "text": "does all this so you don't have to and I can make it as optimized as I can and in",
    "start": "2158619",
    "end": "2164140"
  },
  {
    "text": "many ways more optimize that you ever could because it has access to things that your code doesn't internal things",
    "start": "2164140",
    "end": "2171099"
  },
  {
    "text": "so you write the first line and you get the last line and it's the exact same log entry as",
    "start": "2171099",
    "end": "2178540"
  },
  {
    "text": "before you still have your message you still keep your original format you have an event name event ID payment ID all",
    "start": "2178540",
    "end": "2185320"
  },
  {
    "text": "that is still there but why is it awesome and why it is my preferred way of doing this type of thing well it is",
    "start": "2185320",
    "end": "2191440"
  },
  {
    "text": "awesome because all this code is written for you that's exactly what's going to happen behind the scenes now a bit of a",
    "start": "2191440",
    "end": "2198760"
  },
  {
    "text": "spoiler in.net 8 is actually changes to be optimized even further so I think if your logs have less than four or three",
    "start": "2198760",
    "end": "2205060"
  },
  {
    "text": "parameters um different type of code will be generated but let's talk about what is current",
    "start": "2205060",
    "end": "2210640"
  },
  {
    "text": "right now and it's this let's take a look at each thing individually first the logger is a neighboring message or",
    "start": "2210640",
    "end": "2218200"
  },
  {
    "text": "check is at the very top of the method so Microsoft acknowledges that yeah you don't want to do any work without",
    "start": "2218200",
    "end": "2224079"
  },
  {
    "text": "needing to do the work and that's not negotiable have it there do it then you",
    "start": "2224079",
    "end": "2229960"
  },
  {
    "text": "have a log callback that actually as you can see here is a static read-only",
    "start": "2229960",
    "end": "2235300"
  },
  {
    "text": "action that accepts an eye logger good a string and an exception which is not",
    "start": "2235300",
    "end": "2241119"
  },
  {
    "text": "level so it sort of caches in a way the logging action with generics as you're",
    "start": "2241119",
    "end": "2247900"
  },
  {
    "text": "gonna see here in this logger message dot defined method which is ultimately what behind the scenes makes logging so",
    "start": "2247900",
    "end": "2254320"
  },
  {
    "text": "optimized so we have all that and we can customize something we can say for",
    "start": "2254320",
    "end": "2259599"
  },
  {
    "text": "example skip the enable check and so on but we didn't have to write a single line of this we just well we did write a",
    "start": "2259599",
    "end": "2266079"
  },
  {
    "text": "single line I'm lying did you solve the single line but that's what the compiler will write for us",
    "start": "2266079",
    "end": "2271839"
  },
  {
    "text": "and if we go deeper into loggermessage.define you'll see that there's more optimizations going on with",
    "start": "2271839",
    "end": "2278260"
  },
  {
    "text": "more generics more that log values thing that will only be allocated on the stack and then this check to say okay do we",
    "start": "2278260",
    "end": "2285400"
  },
  {
    "text": "want to skip a second enable checked or not it's all just very very tight very",
    "start": "2285400",
    "end": "2290500"
  },
  {
    "text": "very optimized and you shall consider using certain rated loggers especially",
    "start": "2290500",
    "end": "2296920"
  },
  {
    "text": "for your hot Buffs I'm not saying go ahead and use them everywhere because that can get tedious you're going to",
    "start": "2296920",
    "end": "2302500"
  },
  {
    "text": "have a file where you can just create these entries and maybe you know performance is contextually doesn't mean",
    "start": "2302500",
    "end": "2308800"
  },
  {
    "text": "the same thing for everyone so if you have a hot path consider this maybe you don't want to use it everywhere",
    "start": "2308800",
    "end": "2315838"
  },
  {
    "text": "now one thing I want to talk about is custom string interpolation handlers because when we got this type of tooling",
    "start": "2315880",
    "end": "2323200"
  },
  {
    "text": "from c-sharp and n.net we also got the ability to make our own of this",
    "start": "2323200",
    "end": "2328660"
  },
  {
    "text": "and this is where me and a few other people actually have tried to fly too close to the Sun",
    "start": "2328660",
    "end": "2334780"
  },
  {
    "text": "so I'll tell you a bit of a of a cautionary tale about this you can technically if you want if you",
    "start": "2334780",
    "end": "2341260"
  },
  {
    "text": "if you're smart about this and you say Okay since I have this interpolation Handler I could get the name and the age",
    "start": "2341260",
    "end": "2348579"
  },
  {
    "text": "the the strings of those things at compile time and use them as parameters in my logging to prevent having to",
    "start": "2348579",
    "end": "2355780"
  },
  {
    "text": "create message templates so keep using string interpolation so you could do that by creating a",
    "start": "2355780",
    "end": "2361240"
  },
  {
    "text": "refract call it login templated Handler slap interpolated string Handler attribute on it and then you use the",
    "start": "2361240",
    "end": "2368560"
  },
  {
    "text": "default one internally to make sort of a facade of a proxy and if you do all that you can create",
    "start": "2368560",
    "end": "2374140"
  },
  {
    "text": "your own append formatted method because there's no interface to actually follow this is done using duct typing",
    "start": "2374140",
    "end": "2381640"
  },
  {
    "text": "and if you do that you're going to get this or something like this where you have a color argument expression I don't",
    "start": "2381640",
    "end": "2388180"
  },
  {
    "text": "know how many of you know of this attribute but it will allow you to capture the compile time name of",
    "start": "2388180",
    "end": "2393579"
  },
  {
    "text": "whatever parameter you pass in which means that",
    "start": "2393579",
    "end": "2398680"
  },
  {
    "text": "and and then of course I can make my own sort of overload of login information and if I do that you see that my",
    "start": "2398680",
    "end": "2404800"
  },
  {
    "text": "parameter is a ref of logging in the polluted string Handler this means that basically I'm accepting an interpolated",
    "start": "2404800",
    "end": "2411280"
  },
  {
    "text": "string that is all there is to it so if you make around 100 like this then that method can accept this thing and if that",
    "start": "2411280",
    "end": "2419140"
  },
  {
    "text": "method accepts this thing then what's going to happen when I push it into obligation insights is the following as",
    "start": "2419140",
    "end": "2425320"
  },
  {
    "text": "you can see in the custom Dimensions I have the ID the value and the name both",
    "start": "2425320",
    "end": "2431140"
  },
  {
    "text": "captured and the status now see they're matching their low lower case so it's exactly what I had when I pushed the",
    "start": "2431140",
    "end": "2437740"
  },
  {
    "text": "thing into whatever environment the problem with this approach is that",
    "start": "2437740",
    "end": "2444520"
  },
  {
    "text": "anything you put in there will actually be pushed if you have good dot new good",
    "start": "2444520",
    "end": "2450540"
  },
  {
    "text": "that thing the text going.new good will be pushed if you have get status the",
    "start": "2450540",
    "end": "2456339"
  },
  {
    "text": "thing will be posted if you have a method the whole thing it will be pushed good luck keeping consistency between",
    "start": "2456339",
    "end": "2463119"
  },
  {
    "text": "your argument names and good luck filtering all that it's not going to happen there are ways to prevent it if",
    "start": "2463119",
    "end": "2469720"
  },
  {
    "text": "you really want to go about it by controlling it through you writing an analyzer code analyzer but then at this",
    "start": "2469720",
    "end": "2476140"
  },
  {
    "text": "point I would question your sanity and my sanity because I try to do this took a long time bad idea",
    "start": "2476140",
    "end": "2482260"
  },
  {
    "text": "don't do this control your parameter names because even if you get them to be",
    "start": "2482260",
    "end": "2488740"
  },
  {
    "text": "consistent in your single application you might not get them to be consistent everywhere in your system and we really",
    "start": "2488740",
    "end": "2495099"
  },
  {
    "text": "really want that so log payment error as you can see here event ID all that controlled in your",
    "start": "2495099",
    "end": "2501400"
  },
  {
    "text": "application and you're going to be very very happy so rule number six I shall not try to get",
    "start": "2501400",
    "end": "2508180"
  },
  {
    "text": "too clever with tooling and that's a rule for me actually and I'm just sharing with you",
    "start": "2508180",
    "end": "2514359"
  },
  {
    "text": "I want to go back to the log level for a second because there's more behind the scenes about this parameter",
    "start": "2514359",
    "end": "2522119"
  },
  {
    "text": "so we established what it is we associate each log entry with a log level to help us filter and so on",
    "start": "2526900",
    "end": "2533680"
  },
  {
    "text": "and the default log level in dotnet is information now if you have a separate",
    "start": "2533680",
    "end": "2540060"
  },
  {
    "text": "namespace or a separate log category as they call them you can Define it as it is or as you want by default this is",
    "start": "2540060",
    "end": "2546520"
  },
  {
    "text": "warning if I go ahead and I change this microsoft.asp.net core to information",
    "start": "2546520",
    "end": "2552119"
  },
  {
    "text": "then what I'm going to see in the asp.net core application in a single request mind you is this",
    "start": "2552119",
    "end": "2559119"
  },
  {
    "text": "those are little strings that are going to be created and the only thing I really care about here is this one which",
    "start": "2559119",
    "end": "2565000"
  },
  {
    "text": "is me saying Retreat quote for currency is this in this many milliseconds",
    "start": "2565000",
    "end": "2571799"
  },
  {
    "text": "if you keep or you don't fine-tune your log levels and your categories you're going to end",
    "start": "2572140",
    "end": "2578440"
  },
  {
    "text": "up with a lot of crap in your login provider for example I did ask you if any of you are using datadog now for",
    "start": "2578440",
    "end": "2585400"
  },
  {
    "text": "those of you who are not using datadog which in case you don't know also a sort of a Telemetry login Pro destination",
    "start": "2585400",
    "end": "2592900"
  },
  {
    "text": "sort of thing where you can have apms and if you go to check out your",
    "start": "2592900",
    "end": "2598960"
  },
  {
    "text": "subscription uh during payment you're greeted with four payment methods it is",
    "start": "2598960",
    "end": "2604660"
  },
  {
    "text": "Visa Mastercard American Express and this one this is a kidney it can get",
    "start": "2604660",
    "end": "2609700"
  },
  {
    "text": "very expensive very very expensive and logs are one of the things that really",
    "start": "2609700",
    "end": "2614800"
  },
  {
    "text": "make it to be incredibly expensive in fact because we're a big client we're Consulting with",
    "start": "2614800",
    "end": "2620980"
  },
  {
    "text": "them and one of the things they said was have you considered lowering your log level because think about it you're",
    "start": "2620980",
    "end": "2628480"
  },
  {
    "text": "pushing your logs of log level information even not not just the Microsoft expanded core all of your logs",
    "start": "2628480",
    "end": "2635440"
  },
  {
    "text": "to your login provider but at which point do you go and say I'm going to",
    "start": "2635440",
    "end": "2641380"
  },
  {
    "text": "take a look at the logs you're going to take a look at the logs when they fail you're not going to wake up a morning",
    "start": "2641380",
    "end": "2646780"
  },
  {
    "text": "and be like you know how I'm feeling I'm feeling take a look at the logs today like you never I've never done it I've",
    "start": "2646780",
    "end": "2652359"
  },
  {
    "text": "never done it I did do it when things went wrong but that's about it",
    "start": "2652359",
    "end": "2657640"
  },
  {
    "text": "so you should treat them as just one of your tools and what I would argue is",
    "start": "2657640",
    "end": "2664839"
  },
  {
    "text": "that your information log level default log level doesn't need to be information",
    "start": "2664839",
    "end": "2670240"
  },
  {
    "text": "the counter argument of course is that what happens when eventually something",
    "start": "2670240",
    "end": "2675339"
  },
  {
    "text": "does fail and you need to trace the whole lifetime of request and that is a very valid argument now a bit of",
    "start": "2675339",
    "end": "2681339"
  },
  {
    "text": "attention I'm working on a tool that actually fixes that uses um the new interceptors coming in.net that will",
    "start": "2681339",
    "end": "2687819"
  },
  {
    "text": "allow you to say if something went wrong here these are all the buffered logs before",
    "start": "2687819",
    "end": "2694420"
  },
  {
    "text": "in this scope and you can choose to obtain to also ship everything before",
    "start": "2694420",
    "end": "2700300"
  },
  {
    "text": "the failure for that request I don't know when I'm going to launch that or if we're going to make a video for that so subscribe to take a look at it",
    "start": "2700300",
    "end": "2707079"
  },
  {
    "text": "but there are ways around it so you should Twitter logs are just a single",
    "start": "2707079",
    "end": "2712599"
  },
  {
    "text": "tool and then you use other things like metrics traces spans whatever to see if",
    "start": "2712599",
    "end": "2718000"
  },
  {
    "text": "your application is working or not because some people say I'm using logs just to see that there's a flow of requests coming in to say that my app is",
    "start": "2718000",
    "end": "2724480"
  },
  {
    "text": "working that's not what logs are for so be very very careful this is bad",
    "start": "2724480",
    "end": "2732760"
  },
  {
    "text": "so rule number seven I shall consider using warning as the default Logo level",
    "start": "2732760",
    "end": "2738940"
  },
  {
    "text": "this doesn't have to be on everywhere you can start playing around with this by just configuring some of your load",
    "start": "2738940",
    "end": "2744520"
  },
  {
    "text": "categories the ones you feel comfortable with to a higher log level and then see how that goes and also for the love of",
    "start": "2744520",
    "end": "2751300"
  },
  {
    "text": "God also use metrics in your applications in what whichever capacity you can not everything needs to be in a",
    "start": "2751300",
    "end": "2756819"
  },
  {
    "text": "log in fact most things don't need to be in a log",
    "start": "2756819",
    "end": "2761880"
  },
  {
    "text": "now I want to talk about this quote because well you might be thinking of this quote",
    "start": "2762339",
    "end": "2768579"
  },
  {
    "text": "as I'm giving this talk because I'm talking about performance quite a bit",
    "start": "2768579",
    "end": "2773460"
  },
  {
    "text": "I'm sure many many of you have heard of it pretty much optimization is the root",
    "start": "2774280",
    "end": "2779319"
  },
  {
    "text": "of all evil now in my opinion the root of all evil is people taking this quote",
    "start": "2779319",
    "end": "2785500"
  },
  {
    "text": "and misinterpreting it for their own purpose and what many people do with this quote",
    "start": "2785500",
    "end": "2791140"
  },
  {
    "text": "is that they use it as a way to just ditch any responsibility of writing good",
    "start": "2791140",
    "end": "2797020"
  },
  {
    "text": "software it doesn't have to be performant it just has to do the right thing and do it well",
    "start": "2797020",
    "end": "2803380"
  },
  {
    "text": "let's think about why do we log so ultimately and you might have had or",
    "start": "2803380",
    "end": "2809260"
  },
  {
    "text": "thought of this as I've been going through we're really logging to tell a good story it's the story usually of",
    "start": "2809260",
    "end": "2815079"
  },
  {
    "text": "what happened to a request and good stories end in tragedy",
    "start": "2815079",
    "end": "2822539"
  },
  {
    "text": "for some people um but once you want to take a look at are usually the ones that do end in",
    "start": "2822819",
    "end": "2828700"
  },
  {
    "text": "tragedy and think of this their books but",
    "start": "2828700",
    "end": "2833920"
  },
  {
    "text": "they're also good books do you see a difference here now out of all these these two books you can probably gain",
    "start": "2833920",
    "end": "2840300"
  },
  {
    "text": "the same knowledge the same available knowledge one of them is very dense very big I mean they're both in JavaScript so",
    "start": "2840300",
    "end": "2849540"
  },
  {
    "text": "but one of them is very very small and only gives you the good parts",
    "start": "2849880",
    "end": "2855640"
  },
  {
    "text": "logs should be like that you can have a login provider that ends up like the",
    "start": "2855640",
    "end": "2860859"
  },
  {
    "text": "first book the one you want to have is the second",
    "start": "2860859",
    "end": "2865680"
  },
  {
    "text": "what I like to do with my logs is I like to be what we call in Greece laconic now",
    "start": "2866380",
    "end": "2871960"
  },
  {
    "text": "I don't know how many of you know the word I thought nobody knew of the word laconic and then I gave this talk in",
    "start": "2871960",
    "end": "2877240"
  },
  {
    "text": "Romania and everyone knew of the word Electronics I'm not going to assume anything um but what you need to know is that",
    "start": "2877240",
    "end": "2883720"
  },
  {
    "text": "this word has to do with Spartans not these ones not these ones these ones",
    "start": "2883720",
    "end": "2889660"
  },
  {
    "text": "so the OG Spartans they I have to censor it sorry the original Spartans",
    "start": "2889660",
    "end": "2896319"
  },
  {
    "text": "um the location of Laconia is where Sparta is um were known for the laconism and what",
    "start": "2896319",
    "end": "2903640"
  },
  {
    "text": "laconic means is to use a very few words to express yourself",
    "start": "2903640",
    "end": "2909579"
  },
  {
    "text": "so this is how I like to think about logging not just the log message but",
    "start": "2909579",
    "end": "2914800"
  },
  {
    "text": "each individual message each message is me saying this happened and this happened and this happened that this",
    "start": "2914800",
    "end": "2920560"
  },
  {
    "text": "happened how many of these happens can I eliminate to tell you the exact same story",
    "start": "2920560",
    "end": "2925780"
  },
  {
    "text": "and that's how I like to think about it accurate descriptive and short messages",
    "start": "2925780",
    "end": "2931780"
  },
  {
    "text": "system consistent parameter names and properly utilized log levels",
    "start": "2931780",
    "end": "2938680"
  },
  {
    "text": "so my final rule rule number eight is I",
    "start": "2938680",
    "end": "2943720"
  },
  {
    "text": "shall log only what's necessary to tell a good story and that's it thank you very much and keep coding",
    "start": "2943720",
    "end": "2950540"
  },
  {
    "text": "[Applause]",
    "start": "2950540",
    "end": "2957170"
  }
]