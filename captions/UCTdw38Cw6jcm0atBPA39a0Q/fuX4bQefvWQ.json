[
  {
    "text": "all right my timer has begun so I think even",
    "start": "3240",
    "end": "8639"
  },
  {
    "text": "though it's right after lunch and I'm sure a few people are still going to be trickling in we are going to hop into things so welcome to my talk the power",
    "start": "8639",
    "end": "16680"
  },
  {
    "text": "of function composition my name is Connor hookstra I go by codor report",
    "start": "16680",
    "end": "22880"
  },
  {
    "text": "online uh so you might know me by that Alias um this is the full about me slide",
    "start": "22880",
    "end": "29679"
  },
  {
    "text": "I'm not not going to spend too much time going through this because we've got a lot of stuff to get through in my talk",
    "start": "29679",
    "end": "35760"
  },
  {
    "text": "the stuff worth highlighting uh for the last 5 years as you can probably tell by my t-shirt I've worked at uh Nvidia",
    "start": "35760",
    "end": "42640"
  },
  {
    "text": "which a lot of companies you know hadn't heard of in the last couple years I guess everyone in Tech has heard of it",
    "start": "42640",
    "end": "48079"
  },
  {
    "text": "but my parents finally know what uh company I work for uh thanks to the stock price going up um for the 10 years",
    "start": "48079",
    "end": "55559"
  },
  {
    "text": "that I've been in industry I've been a professional C++ developer um over the last two to three years I've migrated a",
    "start": "55559",
    "end": "62039"
  },
  {
    "text": "bit to python but uh I consider myself a polygo programmer so I've never checked any production. net languages into uh",
    "start": "62039",
    "end": "70400"
  },
  {
    "text": "you know production code but I have written some C and some f for YouTube videos primarily but um I actually added",
    "start": "70400",
    "end": "77600"
  },
  {
    "text": "some C and F code to this talk because I I have heard from the first day of the",
    "start": "77600",
    "end": "83040"
  },
  {
    "text": "conference that a lot of folks are uh working on the net stack um in the last",
    "start": "83040",
    "end": "89159"
  },
  {
    "text": "I guess three years now four years my favorite languages have become these languages that fit in this Paradigm",
    "start": "89159",
    "end": "95360"
  },
  {
    "text": "called array languages if you've heard of APL that is probably the most",
    "start": "95360",
    "end": "100439"
  },
  {
    "text": "well-known of the array languages maybe if you include Julia Julia is more wellknown than APL uh but APL was",
    "start": "100439",
    "end": "106920"
  },
  {
    "text": "created in the 1960s and then in the last decade I guess J was created in 1990 but in the last decade there's been",
    "start": "106920",
    "end": "113960"
  },
  {
    "text": "a bunch of new languages inspired by these and we'll talk about that a bit later um I have four different",
    "start": "113960",
    "end": "120759"
  },
  {
    "text": "podcasts uh so trying to compete with Richard Campbell if you've seen any of his talks um the most well-known one is",
    "start": "120759",
    "end": "126880"
  },
  {
    "text": "the one on the left there algorithms Plus data structures equals programs we're approaching 200 episodes as a",
    "start": "126880",
    "end": "133120"
  },
  {
    "text": "weekly podcast primarily I'd say 70% of the podcasts focus on C++ but we jump",
    "start": "133120",
    "end": "139440"
  },
  {
    "text": "around from language to language typically it's more lower level systems language is we just did a five episode",
    "start": "139440",
    "end": "145360"
  },
  {
    "text": "series with uh Doug Gregor who's uh one of the top people at Apple working on the Swift l anguage we've also had folks",
    "start": "145360",
    "end": "151879"
  },
  {
    "text": "to talk about the Russ language if you've heard about the carbon initiative out of Google we've also had Chandler kth who's one of the top people working",
    "start": "151879",
    "end": "158040"
  },
  {
    "text": "on that so it's a programing language focused podcast even if you're not a C++",
    "start": "158040",
    "end": "163560"
  },
  {
    "text": "person you might be interested the two middle ones are on uh array languages and related topics and the last one's a",
    "start": "163560",
    "end": "169560"
  },
  {
    "text": "running podcast all of this stuff you can find on a GitHub repository GitHub repository called content uh my previous",
    "start": "169560",
    "end": "176800"
  },
  {
    "text": "talks that I've given at other conferences this is my first NDC conference so happy to be here it's been an awesome conference so far uh but if",
    "start": "176800",
    "end": "183080"
  },
  {
    "text": "you're interested in any of that stuff check out this GitHub repo So today we're going to talk about function",
    "start": "183080",
    "end": "188480"
  },
  {
    "text": "composition what is the goal of this talk I'm sure if you're working in F or",
    "start": "188480",
    "end": "193519"
  },
  {
    "text": "a functional language you've heard of function composition before but I think function composition is a",
    "start": "193519",
    "end": "200519"
  },
  {
    "text": "misunderstood thing in computer science most people think of function composition is is composing two unary",
    "start": "200519",
    "end": "207319"
  },
  {
    "text": "functions together but that is just the tip of the iceberg and my goal of this talk is to show you that there are",
    "start": "207319",
    "end": "213200"
  },
  {
    "text": "different function composition strategies there are different types of function composition and hopefully at",
    "start": "213200",
    "end": "218680"
  },
  {
    "text": "the end of this talk regardless of what language you're working in whether that's c f python JavaScript any other",
    "start": "218680",
    "end": "224599"
  },
  {
    "text": "language that you can take some of these strategies and techniques and bring them back to your language maybe there's",
    "start": "224599",
    "end": "229680"
  },
  {
    "text": "already a library that exists in your language of choice that you can just go and reach for um and if not you can build these libraries I've built a",
    "start": "229680",
    "end": "235879"
  },
  {
    "text": "couple and I'll mention them at the very end of the talk so are five different function composition",
    "start": "235879",
    "end": "241840"
  },
  {
    "text": "strategies that I'm going to cover in today's talk they are operators functions trains chains and",
    "start": "241840",
    "end": "248599"
  },
  {
    "text": "stacks probably all of you are familiar with the first two anyone can compose",
    "start": "248599",
    "end": "253959"
  },
  {
    "text": "functions just by using functions and if you've worked in a functional language like FP or hasell these come with",
    "start": "253959",
    "end": "260000"
  },
  {
    "text": "operators that give you the ability to compose functions and usually I save the",
    "start": "260000",
    "end": "266199"
  },
  {
    "text": "goal of this talk or the summary of this talk till the end but I'm going to I'm going to start to potentially confuse",
    "start": "266199",
    "end": "271880"
  },
  {
    "text": "you hopefully blow your minds by putting that slide at the beginning so that is this slide here um these are the",
    "start": "271880",
    "end": "278560"
  },
  {
    "text": "different operators and techniques for composing functions across the languages that we're going to look in this talk",
    "start": "278560",
    "end": "284720"
  },
  {
    "text": "and anything that's left white after I color code and highlight some of these are operators but on top of that we have",
    "start": "284720",
    "end": "291840"
  },
  {
    "text": "functions which are highlighted in blue they only exist in hasal then we have trains which exist in the array",
    "start": "291840",
    "end": "298759"
  },
  {
    "text": "languages then we have chains which only exist in jelly which is a super super esoteric",
    "start": "298759",
    "end": "305000"
  },
  {
    "text": "language it's actually designed for code golfing if you've ever heard of the art of trying to solve a problem in as few",
    "start": "305000",
    "end": "311120"
  },
  {
    "text": "characters as possible jelly was a language designed to be good at that that is the sole purpose of the language",
    "start": "311120",
    "end": "317759"
  },
  {
    "text": "however there are some very very interesting programming language ideas inside of jelly jell is actually so",
    "start": "317759",
    "end": "323479"
  },
  {
    "text": "confusing though that I had to write a tool to convert the jelly code into something that was decipherable for me",
    "start": "323479",
    "end": "329160"
  },
  {
    "text": "and that's someone who understands everything to the left of the yellow bar like I love APL jcap Etc and last but",
    "start": "329160",
    "end": "335360"
  },
  {
    "text": "not least is wewa which is a stack language similar to Fourth Joy Factor if you've heard of any of those languages",
    "start": "335360",
    "end": "341759"
  },
  {
    "text": "combined with an array language and so they don't necessarily have um a strategy for composing functions but you",
    "start": "341759",
    "end": "347440"
  },
  {
    "text": "get a lot of this stuff for free when working with a stack language so we're going to come back to this at the end",
    "start": "347440",
    "end": "353520"
  },
  {
    "text": "probably most of you are just scratching your head being like holy smokes this is overwhelming but hopefully by the end of",
    "start": "353520",
    "end": "359000"
  },
  {
    "text": "this some of this will make sense probably not all of it I'll be honest but hopefully some of it so uh at the",
    "start": "359000",
    "end": "365240"
  },
  {
    "text": "top left of this we have fof does anybody know I made this term up so you",
    "start": "365240",
    "end": "370759"
  },
  {
    "text": "probably have never heard it before but can anyone guess what fof stands for someone actually came very close in another",
    "start": "370759",
    "end": "378080"
  },
  {
    "text": "conference no guesses it stands for function only",
    "start": "378319",
    "end": "383800"
  },
  {
    "text": "functions so it's a function that takes as arguments only functions and returns",
    "start": "383800",
    "end": "390319"
  },
  {
    "text": "you a function but in order to really understand that we got to look at a bunch of terms so these are the terms",
    "start": "390319",
    "end": "395919"
  },
  {
    "text": "these are combinators and we're going to Define that in a sec and these are the terms that we're going to work through combinator combinatory logic combinator",
    "start": "395919",
    "end": "401199"
  },
  {
    "text": "function only function pure function and higher order function we're going to go through this very fast because it's not entirely necessary to understand the",
    "start": "401199",
    "end": "407400"
  },
  {
    "text": "rest of the talk but if you want to come back to this after the fact uh and and kind of digest this a bit more I think",
    "start": "407400",
    "end": "413680"
  },
  {
    "text": "it's helpful going down the road so first let's look at pure functions and combinators so a pure function is a function that when you give it the same",
    "start": "413680",
    "end": "419599"
  },
  {
    "text": "input it always gives you the same output no side effects if you're used to F or languages like hll they refer to",
    "start": "419599",
    "end": "425520"
  },
  {
    "text": "this as referential transparency but basically same input same output and they're very nice to work with a",
    "start": "425520",
    "end": "430840"
  },
  {
    "text": "combinator is a function that Deals Only in its arguments it can't refer to anything else no Global State no",
    "start": "430840",
    "end": "437080"
  },
  {
    "text": "constants defined in the function it only is allowed to deal in what you pass it and when I first heard about",
    "start": "437080",
    "end": "442800"
  },
  {
    "text": "combinators my first thought was are these the same thing as pure functions they sound very similar but they're not",
    "start": "442800",
    "end": "447960"
  },
  {
    "text": "you can come up with examples where you have a pure function but it's not a combinator for instance if you have a",
    "start": "447960",
    "end": "453639"
  },
  {
    "text": "function that defines a constant in the body of the function that is not an argument that it's referring to so that",
    "start": "453639",
    "end": "459599"
  },
  {
    "text": "is still a pure function because it doesn't refer to Global State doesn't have any side effects but it's not a combinator because it's not dealing only",
    "start": "459599",
    "end": "465159"
  },
  {
    "text": "in its arguments so pure function combinator similar but not the same the next thought I had is what's the",
    "start": "465159",
    "end": "470800"
  },
  {
    "text": "similarity between these two and higher order functions so a higher order function if you're not familiar is a",
    "start": "470800",
    "end": "475840"
  },
  {
    "text": "function that either takes as an argument a function or returns you a function once again though you can come",
    "start": "475840",
    "end": "482440"
  },
  {
    "text": "up with counter examples where you know you have a higher order function that's not pure because it's got side effects or you have a higher order function",
    "start": "482440",
    "end": "488639"
  },
  {
    "text": "that's not a combinator so these all are not the same thing you can come up with examples that they all qualify qualify",
    "start": "488639",
    "end": "494120"
  },
  {
    "text": "for each of these but they're not the same my mental model though is that we live in a pure functional land like",
    "start": "494120",
    "end": "500960"
  },
  {
    "text": "hasell per se and we can assume that higher order functions and combinators are both pure functions and so then the",
    "start": "500960",
    "end": "508159"
  },
  {
    "text": "question becomes what is a function only function and what is a combinatory logic combinator is it just this green circle",
    "start": "508159",
    "end": "514919"
  },
  {
    "text": "and the the first answer to what is a combinatory logic combinator is no it's not there is this inner blue circle",
    "start": "514919",
    "end": "521839"
  },
  {
    "text": "which are the combinators from combinatory logic and this is also referred to as the ski combinator",
    "start": "521839",
    "end": "527720"
  },
  {
    "text": "Calculus if you you ever heard those two terms before this is basically a field of abstract mathematics that was created",
    "start": "527720",
    "end": "533720"
  },
  {
    "text": "in the late 1920s uh up until the 1950s by a guy Nam hascal Curry the hasell is",
    "start": "533720",
    "end": "538800"
  },
  {
    "text": "from the language Curry is from currying functions I mean both of those two things were named after that guy it's pretty awesome if you can have both your",
    "start": "538800",
    "end": "544760"
  },
  {
    "text": "first name and your last name used to name things um but there are combinators outside of combinatory logic combinators",
    "start": "544760",
    "end": "551040"
  },
  {
    "text": "if you've ever heard of parser combinators that's something completely different but that's because a combinator all a combinator is is it's a",
    "start": "551040",
    "end": "557880"
  },
  {
    "text": "function that Deals Only in its arguments it doesn't necessarily mean that it has to be a combinatory logic combinator however the K and I in the",
    "start": "557880",
    "end": "567000"
  },
  {
    "text": "ski actually aren't function only functions they are combinatory logic combinators but K and",
    "start": "567000",
    "end": "574560"
  },
  {
    "text": "I which we're going to look at in a second they don't necessarily need to take a function as an argument and",
    "start": "574560",
    "end": "581160"
  },
  {
    "text": "therefore it doesn't qualify as a higher order function so we have to put it outside the yellow circle and then so",
    "start": "581160",
    "end": "586240"
  },
  {
    "text": "finally we're only missing the function only functions and that is the final pink circle it's these combinators from",
    "start": "586240",
    "end": "593360"
  },
  {
    "text": "combinatory logic combinators that only take as arguments functions and only",
    "start": "593360",
    "end": "600120"
  },
  {
    "text": "return you a function so it's a function that Deals Only in functions you don't pass it any data all your arguments have",
    "start": "600120",
    "end": "606000"
  },
  {
    "text": "to be functions and the return type has to be a function and you might be thinking this is kind of confusing but once we look at a couple examples which",
    "start": "606000",
    "end": "611120"
  },
  {
    "text": "we're going to look at in a SE SEC it'll hopefully start to make a lot of sense so like I said this isn't NE like you",
    "start": "611120",
    "end": "617600"
  },
  {
    "text": "don't need to actually understand this diagram but it is helpful if at the end of the talk you think back to this this",
    "start": "617600",
    "end": "622959"
  },
  {
    "text": "sort of taxonomy or categorization so we're done with this and uh technically",
    "start": "622959",
    "end": "628440"
  },
  {
    "text": "this is more accurate you know there is no such thing as a function only function that's not a higher order function so that yellow without the pink",
    "start": "628440",
    "end": "635320"
  },
  {
    "text": "you know really it should not be a circle it should be whatever you know the we should get rid of that area but you know this is good enough so let's uh",
    "start": "635320",
    "end": "642680"
  },
  {
    "text": "you know recap combinator a function that Deals Only in its arguments a combinatory logic combinator that's just",
    "start": "642680",
    "end": "647920"
  },
  {
    "text": "a combinator from combinatory logic function only function all its arguments are functions and its return type is a",
    "start": "647920",
    "end": "653040"
  },
  {
    "text": "function where you contrast that with a higher order function at the bottom it has either or uh it's either it takes a",
    "start": "653040",
    "end": "658920"
  },
  {
    "text": "function has an argument or returns a function and then a pure function same input so same output so combinators I've",
    "start": "658920",
    "end": "665560"
  },
  {
    "text": "been talking all about combinators you're probably thinking what the heck is a combinator let's look at a couple so in the 1958 textbook written by",
    "start": "665560",
    "end": "672720"
  },
  {
    "text": "hasell Curry called combinatory logic he defined the five elementary combinators",
    "start": "672720",
    "end": "678279"
  },
  {
    "text": "and gave them pretty awesome names the elementary identificator the elementary permut the duplicator the compositor",
    "start": "678279",
    "end": "685279"
  },
  {
    "text": "compositor and the cancellatus i c WB and K and we're going to look at I first",
    "start": "685279",
    "end": "691440"
  },
  {
    "text": "because it's the simplest it's just a function that you return what it's given you the first",
    "start": "691440",
    "end": "698279"
  },
  {
    "text": "time I saw this I was like what that does absolutely nothing how is this useful for anything uh but then I also",
    "start": "698279",
    "end": "704800"
  },
  {
    "text": "saw that in C++ 20 they actually added this stood identity and a lot of functional languages have this uh hll",
    "start": "704800",
    "end": "711240"
  },
  {
    "text": "calls it ID uh closure calls it identity it is useful when you start trying to do",
    "start": "711240",
    "end": "716959"
  },
  {
    "text": "these different composition uh techniques so I just returns you what it's given the next combinator K this is",
    "start": "716959",
    "end": "725200"
  },
  {
    "text": "known as the cancellor because it discards the second argument K is a binary function it takes two arguments",
    "start": "725200",
    "end": "731720"
  },
  {
    "text": "and it gets rid of the second one once again you might be thinking why is this useful but it comes in handy",
    "start": "731720",
    "end": "738360"
  },
  {
    "text": "next up is I think the first interesting combinator and it's the W combinator so",
    "start": "738360",
    "end": "743920"
  },
  {
    "text": "it takes as an argument F which is a binary function binary meaning it takes",
    "start": "743920",
    "end": "749199"
  },
  {
    "text": "takes two arguments and it basically turns that into a unary function a function that takes one argument and it",
    "start": "749199",
    "end": "755480"
  },
  {
    "text": "does that by passing that single argument twice to the original binary",
    "start": "755480",
    "end": "760560"
  },
  {
    "text": "function so if you imagine F we take a binary function for example as plus",
    "start": "760560",
    "end": "765639"
  },
  {
    "text": "adding numbers together that takes two arguments if you pass plus to the W combinator that now becomes a function",
    "start": "765639",
    "end": "772720"
  },
  {
    "text": "that you could called double because it's passing the same argument twice so you're just doubling whatever number",
    "start": "772720",
    "end": "777760"
  },
  {
    "text": "that's given so here is I believe a small digression which is that you're going to hear me use the words binary",
    "start": "777760",
    "end": "783480"
  },
  {
    "text": "and unary and then also sometimes I will uh interchange between Mantic and dietic",
    "start": "783480",
    "end": "788600"
  },
  {
    "text": "and uh this has nothing to do with monads uh there are basically two different ways Latin and Greek to refer",
    "start": "788600",
    "end": "795160"
  },
  {
    "text": "to the number of arguments a function takes and these two things are called",
    "start": "795160",
    "end": "800560"
  },
  {
    "text": "aity and adicity and in I think arity is the Latin one and for zero arguments",
    "start": "800560",
    "end": "807240"
  },
  {
    "text": "it's Nary and then one is unary two is binary three is tary and four is quary",
    "start": "807240",
    "end": "813040"
  },
  {
    "text": "but then on the Greek side of things they refer to arity as aity and then you have ntic Mantic datic triatic and",
    "start": "813040",
    "end": "819720"
  },
  {
    "text": "tetratic so this is a bit confusing because we got two different ways of referring to things and actually the very first time I started watching talks",
    "start": "819720",
    "end": "825800"
  },
  {
    "text": "online like years ago in C++ they have uh functions in the algorithm header",
    "start": "825800",
    "end": "830880"
  },
  {
    "text": "where they they take like the argument is a template type and it's called binary operation and I was always",
    "start": "830880",
    "end": "836279"
  },
  {
    "text": "confused because binary to me meant you know ones and zeros you know binary arithmetic I didn't realize it was referring to an operation that takes two",
    "start": "836279",
    "end": "842839"
  },
  {
    "text": "arguments so anyways in case you're confused when I say binary unary Mantic dietic that's what this means so moving",
    "start": "842839",
    "end": "849120"
  },
  {
    "text": "along uh this is the W combinator so once again f a binary function that then",
    "start": "849120",
    "end": "855480"
  },
  {
    "text": "returns you w returns you a unary function very useful uh next combinator is B so this",
    "start": "855480",
    "end": "861800"
  },
  {
    "text": "is what most people think of as function composition so B is a binary function",
    "start": "861800",
    "end": "867959"
  },
  {
    "text": "that takes two arguments f and g that are both unary functions and then it just composes them one after another it",
    "start": "867959",
    "end": "874120"
  },
  {
    "text": "applies G to your argument first and then applies f after so this is the dot",
    "start": "874120",
    "end": "880560"
  },
  {
    "text": "in hll and uh you can get this with the pipeline operator in f um kind of and uh",
    "start": "880560",
    "end": "887720"
  },
  {
    "text": "this is this is what most people think of as function composition next up is C",
    "start": "887720",
    "end": "892959"
  },
  {
    "text": "this is known as flip and hascal I'm not sure if F has this but basically what it",
    "start": "892959",
    "end": "898839"
  },
  {
    "text": "does is C is a unary function that takes a single argument that is f which is a",
    "start": "898839",
    "end": "904079"
  },
  {
    "text": "binary function and it just swis switches or swaps the order of the",
    "start": "904079",
    "end": "909240"
  },
  {
    "text": "arguments that you're passing to it so for an associative function uh like plus",
    "start": "909240",
    "end": "914320"
  },
  {
    "text": "this doesn't matter because it doesn't matter the order you pass it to but for a non-associative function like minus uh",
    "start": "914320",
    "end": "921240"
  },
  {
    "text": "you have to sometimes the order that you pass you know 10 - 5 5 - 10 don't give you the same answer whereas 10 plus 5 5",
    "start": "921240",
    "end": "927800"
  },
  {
    "text": "plus 10 do so this is comes in uh super handy when you're dealing with binary operations and last but not least of the",
    "start": "927800",
    "end": "934720"
  },
  {
    "text": "elementary combinators is the S combinator so this is where things get to start to get a little confusing so s",
    "start": "934720",
    "end": "940480"
  },
  {
    "text": "is a binary function that takes two function arguments f and g f is binary and G is unary you apply G to you your",
    "start": "940480",
    "end": "948240"
  },
  {
    "text": "single argument X and that gives you result and then you take that with your initial argument X and you now have two",
    "start": "948240",
    "end": "954000"
  },
  {
    "text": "things G of x and x and you pass that to your binary function s so a little",
    "start": "954000",
    "end": "959279"
  },
  {
    "text": "confusing but this is actually extremely useful and there's a reason that s is one of the three combinators in the ski",
    "start": "959279",
    "end": "965720"
  },
  {
    "text": "combinator calculus because it's actually one of the most important ones so I've gone through all of the",
    "start": "965720",
    "end": "971319"
  },
  {
    "text": "elementary combinators um but there's a bunch more and we're going to look at these via example because honestly I",
    "start": "971319",
    "end": "978079"
  },
  {
    "text": "think that when when you're you know giving showing these in a talk it's a bit hard to show why these are useful in",
    "start": "978079",
    "end": "985079"
  },
  {
    "text": "in the abstract you know it's easy for me to go through these and describe them but like what's the utility in these",
    "start": "985079",
    "end": "990399"
  },
  {
    "text": "like you know why are these useful it's much easier to understand why these are useful when you look at an example so uh",
    "start": "990399",
    "end": "997480"
  },
  {
    "text": "yeah there's actually a couple extra off of this um I I'll provide some links if you want to go look at them all but uh",
    "start": "997480",
    "end": "1002519"
  },
  {
    "text": "these are the ones um that we're going to talk about so let's get to the example this is kind of the the most interesting part of the talk and uh I",
    "start": "1002519",
    "end": "1008360"
  },
  {
    "text": "think we're doing great on time so uh this is an example from Elite code contest I think it was like a month ago",
    "start": "1008360",
    "end": "1014199"
  },
  {
    "text": "it's called special array and it's a pretty simple problem but it's great for sort of solving these in different languages and we're going to solve it in",
    "start": "1014199",
    "end": "1020199"
  },
  {
    "text": "10 languages originally I solved it in eight but I added F and C for the you know NDC crowd so what is this problem",
    "start": "1020199",
    "end": "1027199"
  },
  {
    "text": "it is uh called special array run and it uh States you're given an array of integers and it's considered special if",
    "start": "1027199",
    "end": "1034640"
  },
  {
    "text": "every pair of adjacent elements uh contain two numbers with different parity parity meaning is it",
    "start": "1034640",
    "end": "1040798"
  },
  {
    "text": "even or is it odd so basically you want to have alternating numbers where it's odd even odd even or even odd even odd",
    "start": "1040799",
    "end": "1046640"
  },
  {
    "text": "you don't ever want to have two consecutive elements that are both even or both odd it's a pretty straightforward problem um and I think",
    "start": "1046640",
    "end": "1054400"
  },
  {
    "text": "first uh well first we're going to look at and this a simple example which we're going to use so 431 six four numbers uh",
    "start": "1054400",
    "end": "1060559"
  },
  {
    "text": "the first thing we want to do is kind of group these by two so we've got you know four3 the first two adjacent then 31 then 1 six uh then we want to check",
    "start": "1060559",
    "end": "1068080"
  },
  {
    "text": "whether they're even or odd so in Array languages you represent true and false by ones and zeros so uh zero represents",
    "start": "1068080",
    "end": "1074720"
  },
  {
    "text": "even here one represents odd and then we want to check do none of the these uh equal each other so we want these to all",
    "start": "1074720",
    "end": "1081720"
  },
  {
    "text": "not equal their sibling uh and so for the first and the last one they don't equal each other but for the middle one",
    "start": "1081720",
    "end": "1087720"
  },
  {
    "text": "it does so you're going to end up with one Z one because the first and last are not equal but the middle two are and uh",
    "start": "1087720",
    "end": "1094799"
  },
  {
    "text": "then we're just going to do like an all reduction because we want all of these to be true we want all of these to be one but in this case because we have a",
    "start": "1094799",
    "end": "1100559"
  },
  {
    "text": "zero your answer ends up being false or zero so hopefully that makes sense now we're going to go through uh initially",
    "start": "1100559",
    "end": "1106760"
  },
  {
    "text": "like I said eight different languages but we've actually added or we I've added f and c I just did this a couple",
    "start": "1106760",
    "end": "1112720"
  },
  {
    "text": "hours ago because I figured H you know we're at the NDC conference why not U but first we're going to start with uh",
    "start": "1112720",
    "end": "1118520"
  },
  {
    "text": "python so python only has functions when it comes to function composition and uh first we're just going to solve this",
    "start": "1118520",
    "end": "1124600"
  },
  {
    "text": "maybe how I would have solved this when I started learning python in University like a decade ago or decade plus I guess",
    "start": "1124600",
    "end": "1129880"
  },
  {
    "text": "so simple uh for Loop and we're creating a a range of integers one less than the",
    "start": "1129880",
    "end": "1135960"
  },
  {
    "text": "length of our integer list nums and then we're checking uh for each of our pairs",
    "start": "1135960",
    "end": "1141120"
  },
  {
    "text": "so nums I and nums i+ one then we're doing modulus 2 to get the par and we",
    "start": "1141120",
    "end": "1147840"
  },
  {
    "text": "want to check that if these are equal we short circuit and return false and if we",
    "start": "1147840",
    "end": "1153280"
  },
  {
    "text": "make it to the end of our Loop without ever returning false you just return true um I really don't like this code",
    "start": "1153280",
    "end": "1158320"
  },
  {
    "text": "but like I said this is how I probably would have solved it a decade plus ago when I was first learning how to program so any suggestions on something that we",
    "start": "1158320",
    "end": "1165760"
  },
  {
    "text": "could do to simplify this",
    "start": "1165760",
    "end": "1170600"
  },
  {
    "text": "no suggestions well the first thing I would do is get rid of uh the I the",
    "start": "1171320",
    "end": "1176919"
  },
  {
    "text": "index having to index into these two things I and i+ one I really don't like that so you can make use of a function",
    "start": "1176919",
    "end": "1183159"
  },
  {
    "text": "called zip in Python and uh if we zip the initial list with the tail of the",
    "start": "1183159",
    "end": "1189760"
  },
  {
    "text": "list so the one colon in the brackets is basically a slice of our initial list which drops the first element so it",
    "start": "1189760",
    "end": "1196440"
  },
  {
    "text": "starts your sub list or your slice at the second element one and then this",
    "start": "1196440",
    "end": "1201600"
  },
  {
    "text": "gives us a basically zipped pair of tupes which are the adjacent elements next to each other and so we can",
    "start": "1201600",
    "end": "1207480"
  },
  {
    "text": "destructure those X and Y and now I don't need to index into anything so",
    "start": "1207480",
    "end": "1212640"
  },
  {
    "text": "still not amazing but nicer than what we have before the next thing we can do is",
    "start": "1212640",
    "end": "1218320"
  },
  {
    "text": "put this into a generator expression so now because we don't have the indices we",
    "start": "1218320",
    "end": "1223720"
  },
  {
    "text": "can actually just put this destructuring for Loop into a generator expression and then then instead of returning false and",
    "start": "1223720",
    "end": "1230000"
  },
  {
    "text": "true this is basically just a reduction all that's going to check to make sure that none of these are equal to each",
    "start": "1230000",
    "end": "1235360"
  },
  {
    "text": "each other and note that we had to change our binary operation initially we were checking if they were equal then we",
    "start": "1235360",
    "end": "1240440"
  },
  {
    "text": "were returning false but now we are checking we want all of them to be not equal technically there's a function in",
    "start": "1240440",
    "end": "1247000"
  },
  {
    "text": "Python called none uh but I think it's easier to read that we want to see that all of them are not equal that none of",
    "start": "1247000",
    "end": "1253159"
  },
  {
    "text": "them are equal but that's just kind of my personal preference so at this point this is where we're going to look at",
    "start": "1253159",
    "end": "1258200"
  },
  {
    "text": "some C SHP and F code and I got to be honest I did this a couple hours ago you know don't tell Richard but I did it",
    "start": "1258200",
    "end": "1264320"
  },
  {
    "text": "while I was in his talk and uh I didn't want to write it myself so I just went and asked chat GPT technically I think",
    "start": "1264320",
    "end": "1270039"
  },
  {
    "text": "it's GPT 40 you get a couple free questions I managed to do this in like you know a couple questions so I just",
    "start": "1270039",
    "end": "1275279"
  },
  {
    "text": "copy and pasted this code and said GPT 40 could you convert this to c and uh this is what it gave me um pretty ugly",
    "start": "1275279",
    "end": "1284000"
  },
  {
    "text": "pretty worse than the you know worse than this python code but that's uh there's one big change we make here to",
    "start": "1284000",
    "end": "1289080"
  },
  {
    "text": "make it nicer and that's the fall and we just move those braces over there now this is much nicer code in my opinion uh",
    "start": "1289080",
    "end": "1296559"
  },
  {
    "text": "still not at all what I wanted so uh like I said I'm not a c expert but I know that if you want to do something in",
    "start": "1296559",
    "end": "1301679"
  },
  {
    "text": "the functional style in C you reach for link so I went back to GPT 40 and I said",
    "start": "1301679",
    "end": "1307240"
  },
  {
    "text": "Thank you thank you this is very nice but could you make it more functional and use Link and when it did that uh it",
    "start": "1307240",
    "end": "1313080"
  },
  {
    "text": "gave me the following and this is much closer to what I was looking for so you can see the zip that we had in Python uh",
    "start": "1313080",
    "end": "1318360"
  },
  {
    "text": "the you know one colon slicing that we were doing you get with nums do skip one it's",
    "start": "1318360",
    "end": "1323600"
  },
  {
    "text": "basically dropping one element and then when we zip nums with that sort of tail of nums we then can apply some binary",
    "start": "1323600",
    "end": "1330559"
  },
  {
    "text": "operation that's doing the you know modulus not equal to and then we have this all function a little bit irritating but really this result Arrow",
    "start": "1330559",
    "end": "1338600"
  },
  {
    "text": "result that is the ey combinator if we had something where we could in has school it's just called ID we could just",
    "start": "1338600",
    "end": "1344799"
  },
  {
    "text": "pass ID right there we just want a function that returns you what it's passed because because when we perform",
    "start": "1344799",
    "end": "1350279"
  },
  {
    "text": "the zip we're going to end up with a list of trues and falses and clearly what link the link all function does is",
    "start": "1350279",
    "end": "1356200"
  },
  {
    "text": "it just it checks for some condition do all of these satisfy the predicate but we already have a list of trues and",
    "start": "1356200",
    "end": "1362200"
  },
  {
    "text": "falses we don't need to apply a predicate we just need to apply the identity function so this is pretty nice",
    "start": "1362200",
    "end": "1367840"
  },
  {
    "text": "I think that's the that's the extent of the uh C code but then I asked it great can you do it for f and it nailed F on",
    "start": "1367840",
    "end": "1374520"
  },
  {
    "text": "the first try because there is no you know imperative looping Solutions in it's a functional language and uh pair",
    "start": "1374520",
    "end": "1381080"
  },
  {
    "text": "wise does the zipping for you nice that we have a built-in function so that zip tail trick that's just called pairwise",
    "start": "1381080",
    "end": "1387880"
  },
  {
    "text": "um in uh in F and then uh we just do this array for all very similar to what",
    "start": "1387880",
    "end": "1393480"
  },
  {
    "text": "we had in the link code and uh pretty nice so n dc.net we got some s and some",
    "start": "1393480",
    "end": "1399559"
  },
  {
    "text": "C in the slide deck back to the python code so now we have this generator expression with uh you know a zip we're",
    "start": "1399559",
    "end": "1406960"
  },
  {
    "text": "destructuring but when I see this code I think to myself that's a combinator because what we have here is not equal",
    "start": "1406960",
    "end": "1413480"
  },
  {
    "text": "that's a binary operation that takes two arguments and we're applying that binary operation after applying the same unary",
    "start": "1413480",
    "end": "1421039"
  },
  {
    "text": "operation to two different arguments the modulus 2 and so we can convert this to use",
    "start": "1421039",
    "end": "1429440"
  },
  {
    "text": "something called the S combinator where we apply a unary operation to two arguments first and",
    "start": "1429440",
    "end": "1437279"
  },
  {
    "text": "then take the results of those and pass them along to a binary function so in operator module they have a not",
    "start": "1437279",
    "end": "1443400"
  },
  {
    "text": "equal function that is NE and then in this Dove key library that I've written that provides you a bunch of these",
    "start": "1443400",
    "end": "1448640"
  },
  {
    "text": "combinators uh we've got odd which is a unary function and then s which is a s combinator so the S combinator to be",
    "start": "1448640",
    "end": "1454279"
  },
  {
    "text": "explicit here is a binary function that takes two function arguments f and g g is unary and F is binary you apply G to",
    "start": "1454279",
    "end": "1462400"
  },
  {
    "text": "two different arguments in this case odd and then once you have the result of that you pass the two results to the",
    "start": "1462400",
    "end": "1468039"
  },
  {
    "text": "binary function f and by using this s function we can get back to this code so this I think is",
    "start": "1468039",
    "end": "1473799"
  },
  {
    "text": "actually worse than the previous solution but that's because we're destructuring the X and Y and then passing it to the function we formed by",
    "start": "1473799",
    "end": "1480440"
  },
  {
    "text": "passing not equal and odd to S but we don't actually need to do this the map",
    "start": "1480440",
    "end": "1485600"
  },
  {
    "text": "in Python is very attic so we can get rid of the X and Y and the destructuring and just replace this with a map that's",
    "start": "1485600",
    "end": "1494600"
  },
  {
    "text": "mapping over two lists the nums and the nums one colon the wise that we had from F and then we can just pass this",
    "start": "1494600",
    "end": "1501279"
  },
  {
    "text": "function that's returned by S and this I think is actually quite nice if you compare it to where we started with the",
    "start": "1501279",
    "end": "1506520"
  },
  {
    "text": "for Loop returning true returning false so this is python we're going to come back to python at the end but I",
    "start": "1506520",
    "end": "1512559"
  },
  {
    "text": "think we're going to move on now to hll and uh hasell hll is H's hll I mean uh I",
    "start": "1512559",
    "end": "1519919"
  },
  {
    "text": "I love hll at one point it was my favorite language but uh it's a bit confusing and you're going to see why um so this is the equivalent of the code",
    "start": "1519919",
    "end": "1526960"
  },
  {
    "text": "that we just saw in Python so map oddd that makes sense you're just mapping odd",
    "start": "1526960",
    "end": "1532600"
  },
  {
    "text": "over your list of integers fold one ersan ersan that's just the equivalent of our all in python or our for for all",
    "start": "1532600",
    "end": "1540080"
  },
  {
    "text": "in uh in F but what is this ZIP width not equal to angle star angle tail so if",
    "start": "1540080",
    "end": "1547480"
  },
  {
    "text": "we go back and also make note of the two dots if we go back to our little combinator table and we look at the",
    "start": "1547480",
    "end": "1552799"
  },
  {
    "text": "hascal uh column at the very end the dot is the B combinator and the angle star",
    "start": "1552799",
    "end": "1558760"
  },
  {
    "text": "angle is the S combinator so remember that function that combinator s that",
    "start": "1558760",
    "end": "1564799"
  },
  {
    "text": "takes a binary function and a unit function and I said oh it's kind of confusing but it comes in useful well we're using it right here so if we come",
    "start": "1564799",
    "end": "1570679"
  },
  {
    "text": "back and we just focus on the zip width not equal to angle star angle tail that's the S combinator so tail is our",
    "start": "1570679",
    "end": "1577080"
  },
  {
    "text": "unary function and zip width not equal to is our binary function and so",
    "start": "1577080",
    "end": "1582480"
  },
  {
    "text": "basically this is a way of spelling what pairwise did in F it's zipping the",
    "start": "1582480",
    "end": "1587880"
  },
  {
    "text": "initial list with its tail and then it's going to apply a binary operation the operation that we're applying here is",
    "start": "1587880",
    "end": "1593279"
  },
  {
    "text": "the not equal to that's that slash equals for some reason hcle spells they're not equal to different from every other language although so does f",
    "start": "1593279",
    "end": "1601000"
  },
  {
    "text": "uh if we want to be F uses you know angle angle You Know It's upsetting when there is disagreement across languages",
    "start": "1601000",
    "end": "1607320"
  },
  {
    "text": "on operators we all agreed on what plus was but when it comes to exponents not equal to every language had a different",
    "start": "1607320",
    "end": "1612919"
  },
  {
    "text": "decision um so that's basically what zipwith not equal to s combinator tail is doing um however even though it's",
    "start": "1612919",
    "end": "1619520"
  },
  {
    "text": "cool that you can spell it this way we can avoid this by making use of a function similar to pair wise that we",
    "start": "1619520",
    "end": "1624960"
  },
  {
    "text": "had in F but it's slightly different pairwise just does the zipping action",
    "start": "1624960",
    "end": "1630120"
  },
  {
    "text": "for us but map adjacent here it bundles a binary operation with it and then applies that binary operation to the",
    "start": "1630120",
    "end": "1636559"
  },
  {
    "text": "zipped elements at the same time and in my opinion this is actually really really nice code like the zip width not",
    "start": "1636559",
    "end": "1643120"
  },
  {
    "text": "equal to s combinator tail I think that's elegant but it's it's it's hard to par this however is much easier to",
    "start": "1643120",
    "end": "1650360"
  },
  {
    "text": "parse we're mapping odd mapping adjacent elements applying not equal to and doing fold one ent ent and luckily the fold",
    "start": "1650360",
    "end": "1658000"
  },
  {
    "text": "one Ampersand Ampersand we actually have a nicer way to spell this in hll and that's and which I think is unfortunate",
    "start": "1658000",
    "end": "1663840"
  },
  {
    "text": "because this is the equivalent of all in Python but for some reason they decided to call it and in hasle uh and all is a",
    "start": "1663840",
    "end": "1670440"
  },
  {
    "text": "different function so all does exist but it does something different and uh yes so this is our final hasal solution",
    "start": "1670440",
    "end": "1676919"
  },
  {
    "text": "except it's we used the side combinator before in the python code can we use the side",
    "start": "1676919",
    "end": "1682559"
  },
  {
    "text": "combinator here we're mapping a unary function odd and then we're mapping adjacent a binary function not equal to",
    "start": "1682559",
    "end": "1690880"
  },
  {
    "text": "that's the side combinator and in hcll they call the side combinator on so we can actually compose these two things",
    "start": "1690880",
    "end": "1696760"
  },
  {
    "text": "which is saying take two elements adjacent elements at a time and first apply odd to each of your adjacent",
    "start": "1696760",
    "end": "1703440"
  },
  {
    "text": "elements and then apply your binary operation and in my opinion this is extremely elegant code still a little",
    "start": "1703440",
    "end": "1709039"
  },
  {
    "text": "bit hard to read if you're not familiar with hll but compared to what we started with the zip tail with the S combinator",
    "start": "1709039",
    "end": "1715519"
  },
  {
    "text": "this is very nice so I think up next we have uh oh yeah we're going to revisit",
    "start": "1715519",
    "end": "1720720"
  },
  {
    "text": "so what if we had the map adjacent in Python so this is where we ended with the python code but if we make a little",
    "start": "1720720",
    "end": "1728039"
  },
  {
    "text": "room add a map adjacent how does this change well we",
    "start": "1728039",
    "end": "1734960"
  },
  {
    "text": "get rid of our map replace that with a map adjacent and then we get rid of the nums and the nums bracket one colon and",
    "start": "1734960",
    "end": "1741880"
  },
  {
    "text": "just pass nums once and now once again I think this is more readable code you still have to have access to this and",
    "start": "1741880",
    "end": "1747039"
  },
  {
    "text": "unfortunately python does not have a adjacent map in a library anywhere um but still pretty easy to write and note",
    "start": "1747039",
    "end": "1752679"
  },
  {
    "text": "that pairwise is the exact function that we had in F you have to find this in a library called iter tools but it exists",
    "start": "1752679",
    "end": "1758480"
  },
  {
    "text": "it just Zips with uh your basically sibling your adjacent elements two at a time so I think at this",
    "start": "1758480",
    "end": "1765760"
  },
  {
    "text": "point oh and I think yeah the point that I'm making here is uh we don't even need to use the SC combinator um at this",
    "start": "1765760",
    "end": "1772640"
  },
  {
    "text": "point because adjacent map takes a binary operation we're forming a binary operation here but if you wanted to this",
    "start": "1772640",
    "end": "1778080"
  },
  {
    "text": "might be more idiomatic in Python code just use a map map your odd over nums and then pass that as the first argument",
    "start": "1778080",
    "end": "1784480"
  },
  {
    "text": "to adjacent map and then the binary operation you pass to adjacent map is the not equal to so we're once again",
    "start": "1784480",
    "end": "1790320"
  },
  {
    "text": "we're going to come back to python but we're going to we're going to keep moving so uh closure here um we have",
    "start": "1790320",
    "end": "1795919"
  },
  {
    "text": "functions and operators we already looked at F so we're we're going to go through this really quickly um and uh",
    "start": "1795919",
    "end": "1801080"
  },
  {
    "text": "this basically is uh something called the thread last macro it's also referred to as a thrush operator it's similar to",
    "start": "1801080",
    "end": "1807919"
  },
  {
    "text": "what the pipeline operator or the pipe forward operator in F does it basically just passes your argument along to the",
    "start": "1807919",
    "end": "1814000"
  },
  {
    "text": "next operation in this case it's passing it as the last argument to each of your operations so partition does your kind",
    "start": "1814000",
    "end": "1819760"
  },
  {
    "text": "of creating a list of two adjacent elements the map is performing the not equals to and then the every at the",
    "start": "1819760",
    "end": "1825320"
  },
  {
    "text": "bottom is the equivalent of the all in C once again it wants a predicate in order",
    "start": "1825320",
    "end": "1830600"
  },
  {
    "text": "to check do all of my elements in my list satisfy this predicate but at this point we have trues and falses so once",
    "start": "1830600",
    "end": "1835720"
  },
  {
    "text": "again we can use the I combinator in this case we actually have the I combinator enclosure and it's called",
    "start": "1835720",
    "end": "1840919"
  },
  {
    "text": "identity here's an alternative uh closure solution um where it's just basically combining the last two into",
    "start": "1840919",
    "end": "1846919"
  },
  {
    "text": "one and using a slightly different syntax this way we can avoid using the I combinator if we want uh it's your preference which you like more but",
    "start": "1846919",
    "end": "1853080"
  },
  {
    "text": "anyways closure similar to F in some regards and uh with that we are now",
    "start": "1853080",
    "end": "1858360"
  },
  {
    "text": "going to move on to my favorite part of the talk which is all of the array languages so APL bqn J and cap and all",
    "start": "1858360",
    "end": "1865279"
  },
  {
    "text": "of these languages have operators but they also have trains technically you could write functions if you wanted to",
    "start": "1865279",
    "end": "1870480"
  },
  {
    "text": "to do function composition but that's not the idiomatic way to use these languages so uh first things first uh",
    "start": "1870480",
    "end": "1876320"
  },
  {
    "text": "trains what are trains trains are basically just the juxtaposition they putting side by side of functions so",
    "start": "1876320",
    "end": "1883159"
  },
  {
    "text": "when you put two functions next to each other in APL that forms a two train and when you put three functions next to",
    "start": "1883159",
    "end": "1889120"
  },
  {
    "text": "each other that forms a three train and you can continuously do this so that when you form a three train that'll then",
    "start": "1889120",
    "end": "1894799"
  },
  {
    "text": "form a function which is probably going to be unary or at least it will be in the cases we look at and then we can continue to build up these longer trains",
    "start": "1894799",
    "end": "1902000"
  },
  {
    "text": "which we'll see when we do this by example so Jay was the first array language to add these trains and they",
    "start": "1902000",
    "end": "1908000"
  },
  {
    "text": "did it in 1990 and for the two trains they chose s and d and for the three trains they chose fi and F1 uh at a",
    "start": "1908000",
    "end": "1914760"
  },
  {
    "text": "certain point in 2014 dialog APL there're the sort of um main company that's implements an APL these days they",
    "start": "1914760",
    "end": "1921880"
  },
  {
    "text": "decided to add trains because Jay did but they switched the snd to the B and B1 because they realized that those were",
    "start": "1921880",
    "end": "1927799"
  },
  {
    "text": "better choices for reasons I'm not going to get into and then since then cap and bqn have made the same decision note",
    "start": "1927799",
    "end": "1933279"
  },
  {
    "text": "though that cap did not add the three train which is uh incredibly interesting it is opaque now but once we get to the",
    "start": "1933279",
    "end": "1940279"
  },
  {
    "text": "live coding you will see uh why it makes a difference um so uh if we look at",
    "start": "1940279",
    "end": "1946120"
  },
  {
    "text": "these um for the ones that correspond to the two trains and three trains we can hide them we've got s b d B1 and fi and",
    "start": "1946120",
    "end": "1955000"
  },
  {
    "text": "uh if we get rid of s and d and add F1 in the modern apls sort of excluding J",
    "start": "1955000",
    "end": "1961159"
  },
  {
    "text": "this is what we have so the first two B and B1 are the two trains and then fi and F1 are the three trains so B we've",
    "start": "1961159",
    "end": "1967039"
  },
  {
    "text": "already looked at B1 is just basically an extension of B where instead of applying a unary operation after a unary",
    "start": "1967039",
    "end": "1972679"
  },
  {
    "text": "operation you're applying a unary operation after a binary operation um super useful and then fi and F1 these",
    "start": "1972679",
    "end": "1979519"
  },
  {
    "text": "get a little bit more confusing but we're going to see them in examples and they'll make more sense but basically fi you have a binary function in two unary",
    "start": "1979519",
    "end": "1986159"
  },
  {
    "text": "function so it's similar to S where we applied a unary operation to two different arguments and then the binary",
    "start": "1986159",
    "end": "1992440"
  },
  {
    "text": "uh operation afterwards f it has two different unary operations and applies them to the same argument then you have",
    "start": "1992440",
    "end": "1998600"
  },
  {
    "text": "two results and you pass those along to the binary operation and the F1 has the same pattern but instead of applying it",
    "start": "1998600",
    "end": "2004320"
  },
  {
    "text": "to a single argument it applies the F and H to uh two arguments so I believe",
    "start": "2004320",
    "end": "2010279"
  },
  {
    "text": "this brings us to the live coding portion of this talk hopefully the internet's working",
    "start": "2010279",
    "end": "2017679"
  },
  {
    "text": "because uh this is all going to be done in the browser so everything you see now you guys can go and try uh later after",
    "start": "2017679",
    "end": "2024320"
  },
  {
    "text": "the talk or if you want to whip out your laptop right now you could technically even do this on your cell phone uh",
    "start": "2024320",
    "end": "2029440"
  },
  {
    "text": "because you can just go tap those symbols and the solutions are so short as you're about to see um it's actually",
    "start": "2029440",
    "end": "2034880"
  },
  {
    "text": "not that hard you know you don't want to go co code C on your cell phone but uh for array languages it's actually possible so this is Tri apl.org and this",
    "start": "2034880",
    "end": "2043159"
  },
  {
    "text": "is how you create a list maybe I should make this slight h no we'll keep it at this size because that was terrible um",
    "start": "2043159",
    "end": "2048960"
  },
  {
    "text": "this is a list of four numbers so that's what we're going to work with the first thing we want to do is we want to",
    "start": "2048960",
    "end": "2055240"
  },
  {
    "text": "um we want to check if these are even or odd so this two pipe is how you do two",
    "start": "2055240",
    "end": "2061839"
  },
  {
    "text": "modulus so the percent sign two in Python you spell by two pipe and we do",
    "start": "2061839",
    "end": "2067358"
  },
  {
    "text": "this it's basically going to turn zero if it's even and one if it's odd so two",
    "start": "2067359",
    "end": "2072960"
  },
  {
    "text": "characters we're like halfway there uh next thing we want to do is we want to take two adjacent elements at a time so",
    "start": "2072960",
    "end": "2079000"
  },
  {
    "text": "there's an operation in APL called an n-wise reduction where you specify n the number of elements you want to look at",
    "start": "2079000",
    "end": "2084720"
  },
  {
    "text": "at a time and then it creates you sublists of that length n and then creates like a sliding window so if we",
    "start": "2084720",
    "end": "2091599"
  },
  {
    "text": "want a uh adjacent elements we can basically do two catenate which will",
    "start": "2091599",
    "end": "2096800"
  },
  {
    "text": "form you a list and then the reduce is the Slash and so when we hit this it's going to give us basically the first two",
    "start": "2096800",
    "end": "2102240"
  },
  {
    "text": "elements then it's going to slide by one give you the next two elements and then slide by one and give you the last two elements but what's amazing about this",
    "start": "2102240",
    "end": "2109440"
  },
  {
    "text": "ny's reduction is you can replace this operation with any binary operation you want so in our case we want not equal to",
    "start": "2109440",
    "end": "2117119"
  },
  {
    "text": "so we just replace this with a not equal to hit enter and I have to delete the catenate",
    "start": "2117119",
    "end": "2122720"
  },
  {
    "text": "in order for that to work and then we get our one1 and you can do with any Bing",
    "start": "2122720",
    "end": "2128359"
  },
  {
    "text": "operations so if we were solving a different problem then we wanted to put a plus there if we wanted to put uh you know divides there a domain error",
    "start": "2128359",
    "end": "2134480"
  },
  {
    "text": "because you can't divide by zero um if we did this though it would work anyways",
    "start": "2134480",
    "end": "2139920"
  },
  {
    "text": "pretty cool so let's go back to our not equals and uh two",
    "start": "2139920",
    "end": "2148040"
  },
  {
    "text": "modulus I'm got to type the two modulus and so after this all we want to do is",
    "start": "2148040",
    "end": "2153760"
  },
  {
    "text": "an and reduction which is just two characters that's and and as we saw before uh this is",
    "start": "2153760",
    "end": "2160599"
  },
  {
    "text": "reduce and that is our full solution there pretty fantastic we all want to",
    "start": "2160599",
    "end": "2166760"
  },
  {
    "text": "switch to APL right um so now let's uh switch over to the other APL cap and so",
    "start": "2166760",
    "end": "2174160"
  },
  {
    "text": "this is basically an APL inspired language but it makes a few different decisions the main one here is that they",
    "start": "2174160",
    "end": "2179599"
  },
  {
    "text": "don't have a three train um and actually let's go let's quickly back because we didn't actually solve this tacitly so um",
    "start": "2179599",
    "end": "2186280"
  },
  {
    "text": "here we've built up just an expression that's going to evaluate eagerly oh the screen",
    "start": "2186280",
    "end": "2192240"
  },
  {
    "text": "disappeared all right we can't don't touch the computer too hard if we try to evaluate this though um it doesn't start",
    "start": "2194760",
    "end": "2201960"
  },
  {
    "text": "with a three a three train so we're going to get a syntax error so in order to get this to uh evaluate correctly we",
    "start": "2201960",
    "end": "2209160"
  },
  {
    "text": "need to add an identity here so what this is going to do is then this is going to correctly form us a three train",
    "start": "2209160",
    "end": "2214400"
  },
  {
    "text": "which is going to be the FI this will form another train and then this will be our final two train which is a b",
    "start": "2214400",
    "end": "2220280"
  },
  {
    "text": "combinator so this will parse actually",
    "start": "2220280",
    "end": "2225240"
  },
  {
    "text": "what if we uh type this correctly so this will parse correctly but keep this in mind we had to make this slight",
    "start": "2225359",
    "end": "2231680"
  },
  {
    "text": "change uh in order to get this to work so let's do this a lot quicker for cap so we we've already seen this 4316 is",
    "start": "2231680",
    "end": "2237680"
  },
  {
    "text": "our initial list then we want to do uh even or odd that's two modulus then we want to do our n wise reduction so uh",
    "start": "2237680",
    "end": "2244720"
  },
  {
    "text": "here we're going to do catenate once again just to show the two pairs that are forming and then we're going to replace that with the not equal to to",
    "start": "2244720",
    "end": "2251200"
  },
  {
    "text": "get our ones and zeros and then last but not least we're going to do our and reduction uh if I can type this properly",
    "start": "2251200",
    "end": "2258680"
  },
  {
    "text": "so same thing we just saw but in this case we don't have the three train so",
    "start": "2258680",
    "end": "2263720"
  },
  {
    "text": "what's going to happen when I parenthesize this to turn it into a pointf free tcid expression is that this is going to form a unary function",
    "start": "2263720",
    "end": "2270000"
  },
  {
    "text": "because of something called left bound functions this is going to form a unary function because of something called left bound functions and this is already",
    "start": "2270000",
    "end": "2276000"
  },
  {
    "text": "a unary function so we just have three unary functions next to each other which is just going to be two B combinators",
    "start": "2276000",
    "end": "2281599"
  },
  {
    "text": "after each other so when we evaluate this we get the same result which this is really really nice because in dialog",
    "start": "2281599",
    "end": "2287280"
  },
  {
    "text": "APL we had to make a change in order to actually form a point free function whereas in cap we don't need to do that",
    "start": "2287280",
    "end": "2293040"
  },
  {
    "text": "all right switching back here we're going to go to bqn so bqn is a modern",
    "start": "2293040",
    "end": "2298440"
  },
  {
    "text": "APL that has slightly different glyphs it was actually supposed to be APL plus one for each of the characters a plus 1",
    "start": "2298440",
    "end": "2304319"
  },
  {
    "text": "is B p+ one is q but then they messed up uh the N because l+ one is m not n so",
    "start": "2304319",
    "end": "2312480"
  },
  {
    "text": "it's actually uh the joke is now that bqn is APL plus Fibonacci um if you're familiar with that sequence um anyways",
    "start": "2312480",
    "end": "2319880"
  },
  {
    "text": "uh this is similar so we've got two modulus and that gives us so we've got two different test case one that's going",
    "start": "2319880",
    "end": "2325560"
  },
  {
    "text": "to pass and one that's going to fail and uh unfortunately we don't have the NYSE reduction in bqn so the thing we have to",
    "start": "2325560",
    "end": "2332520"
  },
  {
    "text": "do here is we have to uh use a function here called windows and that BAS basically turns um it's it's similar to",
    "start": "2332520",
    "end": "2339760"
  },
  {
    "text": "the MSE reduction but it gives you a matrix of two elements at a time um and you can do this for the same thing like",
    "start": "2339760",
    "end": "2345680"
  },
  {
    "text": "2 3 4 uh and after this we want to do a basically um not equal to uh reduction",
    "start": "2345680",
    "end": "2353040"
  },
  {
    "text": "um over let see if we can type this correctly",
    "start": "2353040",
    "end": "2359520"
  },
  {
    "text": "uh actually let's do it this way not",
    "start": "2362040",
    "end": "2367319"
  },
  {
    "text": "cool for some reason this is",
    "start": "2370040",
    "end": "2374280"
  },
  {
    "text": "uh where is not equal",
    "start": "2388240",
    "end": "2392839"
  },
  {
    "text": "well this is not uh let's see if we can copy it from over",
    "start": "2401319",
    "end": "2407200"
  },
  {
    "text": "here there we go not equal and then we need to do this with",
    "start": "2409760",
    "end": "2415760"
  },
  {
    "text": "cells so that should give us what we're looking for and uh now we want to do our and",
    "start": "2415760",
    "end": "2422560"
  },
  {
    "text": "reduction unfortunately this isn't going to work now so this should give us our right answer but what we have here is a",
    "start": "2422560",
    "end": "2429760"
  },
  {
    "text": "three train followed by another three train followed by a unary function which",
    "start": "2429760",
    "end": "2435200"
  },
  {
    "text": "is going to be the BC combinator and you can't have two unary functions in a row so you have to do this trick which is",
    "start": "2435200",
    "end": "2441400"
  },
  {
    "text": "add this thing called Nothing um which basically it breaks after your single",
    "start": "2441400",
    "end": "2447680"
  },
  {
    "text": "unary function and then enables you to call another unary function and still form the B combinator so a little bit",
    "start": "2447680",
    "end": "2454640"
  },
  {
    "text": "unfortunate that we have to do that and last but not least is J so J is an array language it was Ken Iverson's second",
    "start": "2454640",
    "end": "2461079"
  },
  {
    "text": "array language he did APL in the 1960s and then he did J in the 1990s and it was basically just APL but using asky",
    "start": "2461079",
    "end": "2467720"
  },
  {
    "text": "symbols so you can type it without all the special characters so once again 4316 is our list of numbers then we can",
    "start": "2467720",
    "end": "2475800"
  },
  {
    "text": "do two modulus so the pipe actually exists on our keyboard so that stays the same and then you get our list of ones",
    "start": "2475800",
    "end": "2481599"
  },
  {
    "text": "and zeros uh then we can uh do our ny's reduction",
    "start": "2481599",
    "end": "2488839"
  },
  {
    "text": "oh it's pretty flaky oh we're back um we can do our n",
    "start": "2488839",
    "end": "2496400"
  },
  {
    "text": "wise reduction uh as so so this is the equivalent of our catenate but if we uh",
    "start": "2496400",
    "end": "2502359"
  },
  {
    "text": "change this to not equals to which so not equals to does not exist on your keyboard so you spell that with a",
    "start": "2502359",
    "end": "2508720"
  },
  {
    "text": "squiggle uh colon and then you have to put that with a reduction so that gives us our ones and zeros and then you want",
    "start": "2508720",
    "end": "2515160"
  },
  {
    "text": "to do an and reduction once again the and doesn't exist on our keyboard so you spell that with an ampers or asterisk",
    "start": "2515160",
    "end": "2521720"
  },
  {
    "text": "Dot and then slash for the reduction uh which is going to work once again so in",
    "start": "2521720",
    "end": "2527359"
  },
  {
    "text": "order to make this point free we have to uh put this thing called CAP um and then",
    "start": "2527359",
    "end": "2533480"
  },
  {
    "text": "we'll space this out so it's a little bit more legible and",
    "start": "2533480",
    "end": "2538839"
  },
  {
    "text": "uh and uh if we do this then we are able to parse correctly because we have a",
    "start": "2538839",
    "end": "2544680"
  },
  {
    "text": "three train followed by another three train followed by unit function but because they chose the two train to be the S combinator we don't want the S",
    "start": "2544680",
    "end": "2550960"
  },
  {
    "text": "combinator right now we want the B combinator so you have to use the cap in order to turn the S into the B which",
    "start": "2550960",
    "end": "2556680"
  },
  {
    "text": "we're going to talk about a little bit later so that got us through the first portion of our Li coding um and uh the",
    "start": "2556680",
    "end": "2565200"
  },
  {
    "text": "next language that we're going to look at is jelly so jelly like I said was a language designed to be a code golfing",
    "start": "2565200",
    "end": "2571280"
  },
  {
    "text": "language and it doesn't have trains it has something that is called chains",
    "start": "2571280",
    "end": "2576839"
  },
  {
    "text": "which is similar to this idea of trains that you put functions next to each other and then it forms some kind of",
    "start": "2576839",
    "end": "2583760"
  },
  {
    "text": "composition pattern but the way that they do it is they don't hardcode you know three trains as F and 51 and two",
    "start": "2583760",
    "end": "2590720"
  },
  {
    "text": "trains as B and B1 they basically just have a pattern matching table a list of",
    "start": "2590720",
    "end": "2596640"
  },
  {
    "text": "like look at the arities of your function if you have 211 that's the D2 combinator if you have one two one",
    "start": "2596640",
    "end": "2602359"
  },
  {
    "text": "that's the five combinator so you just and and one of the reasons it's able to do this is that in AP l bqn cap and J",
    "start": "2602359",
    "end": "2609440"
  },
  {
    "text": "all of their functions are ambivalent which means that they have two definitions um the easiest one to think",
    "start": "2609440",
    "end": "2614920"
  },
  {
    "text": "about is the minus sign minus is subtraction in the diic case where you have two arguments and it's negation in",
    "start": "2614920",
    "end": "2621720"
  },
  {
    "text": "the case where you only have a single argument but they took that you know that exists in mathematics for the minus operation and they did that for every",
    "start": "2621720",
    "end": "2628000"
  },
  {
    "text": "symbol so uh you know maximum is both maximum when you're giving it two numbers and it's cealing to go to the",
    "start": "2628000",
    "end": "2635000"
  },
  {
    "text": "closest integer uh or the the you know rounding up when you have a single integer and so because of this amb",
    "start": "2635000",
    "end": "2641559"
  },
  {
    "text": "veilance every function has both a unary definition and a in a binary definition which means you can only do so much in",
    "start": "2641559",
    "end": "2647520"
  },
  {
    "text": "terms of pattern matching whereas jelly every function is fixed its aity is fixed so you're able to do more so we're",
    "start": "2647520",
    "end": "2653960"
  },
  {
    "text": "going to look at this example uh it's easier if I don't live code this and just show this one by one so we've got a",
    "start": "2653960",
    "end": "2659160"
  },
  {
    "text": "simple example 416 if we want to check are these odds this is the jello tool so",
    "start": "2659160",
    "end": "2664559"
  },
  {
    "text": "the jelly is the yellow uh B overd uh but that means nothing to me and so",
    "start": "2664559",
    "end": "2670480"
  },
  {
    "text": "Jello is a tool that I wrote that basically I can type in keywords and it does the conversion behind the scenes to",
    "start": "2670480",
    "end": "2676040"
  },
  {
    "text": "the the jelly interpreter so odd is odd question mark That's My Jello keyword that I've added but the actual jelly uh",
    "start": "2676040",
    "end": "2682839"
  },
  {
    "text": "is the yellow code so now we've got our list of zeros and ones for odd we want to check are the adjacent elements uh",
    "start": "2682839",
    "end": "2689599"
  },
  {
    "text": "not equal to each other and we do that we actually have a built-in function in jelly uh that I've called differ which",
    "start": "2689599",
    "end": "2695280"
  },
  {
    "text": "basically checks to see are the adj elements different from each other and",
    "start": "2695280",
    "end": "2700599"
  },
  {
    "text": "in jelly this is a d aant k because that's how they get away with uh I think",
    "start": "2700599",
    "end": "2706680"
  },
  {
    "text": "the person that made this is Spanish and so they've got all these underd dots overd dos accents and that's how they",
    "start": "2706680",
    "end": "2711760"
  },
  {
    "text": "spelled their language yes I saw someone put their hands up like what are we doing remember the goal of this language was to code golf it's not to be readable",
    "start": "2711760",
    "end": "2719160"
  },
  {
    "text": "in fact they they added something that actually like compresses these symbols like if it has a string it can compress",
    "start": "2719160",
    "end": "2725160"
  },
  {
    "text": "it into absolute nonsense but like say btes of code anyways it's uh if you think this is bad you should see some of",
    "start": "2725160",
    "end": "2730760"
  },
  {
    "text": "the other parts of the language and last but not least we want to just do an all reduction which we call all here and so",
    "start": "2730760",
    "end": "2736240"
  },
  {
    "text": "that is our final solution in jelly the B overt D axon Kon a under three uh",
    "start": "2736240",
    "end": "2741800"
  },
  {
    "text": "letters uh but what's interesting about this is that where is the function",
    "start": "2741800",
    "end": "2747400"
  },
  {
    "text": "composition well the pattern matching engine in this case says whenever we have a series of unary functions where",
    "start": "2747400",
    "end": "2753040"
  },
  {
    "text": "the aity is 1 one one one one you just continue to apply the combinator you",
    "start": "2753040",
    "end": "2758200"
  },
  {
    "text": "just apply the function after the last function was applied and so I have a tool here that actually shows you this",
    "start": "2758200",
    "end": "2764280"
  },
  {
    "text": "is a super simple uh aity chain where your aity chain is just 111 but this",
    "start": "2764280",
    "end": "2770040"
  },
  {
    "text": "shows you that it's the B combinator and then after that it's the B combinator but this will do it for all different types of combinators the s combinator f",
    "start": "2770040",
    "end": "2775839"
  },
  {
    "text": "combinator 51 Etc um so very cool tool if you want to go play and and this idea",
    "start": "2775839",
    "end": "2781720"
  },
  {
    "text": "of function composition by chains just look at the pattern matching of the aity",
    "start": "2781720",
    "end": "2787559"
  },
  {
    "text": "chains that are formed by the you know ju position of your functions is a really really interesting idea so this",
    "start": "2787559",
    "end": "2793680"
  },
  {
    "text": "is uh because I built this tool I built a bunch of stuff into it so you've noticed that across these Solutions when we were in hasell we started with fold",
    "start": "2793680",
    "end": "2800079"
  },
  {
    "text": "L1 Ampersand Ampersand but you can actually spell and you can do this in jelly or in jello just by basically",
    "start": "2800079",
    "end": "2807480"
  },
  {
    "text": "typing whatever you think and anytime it notices that you could you know use a different algorithm uh so differ for",
    "start": "2807480",
    "end": "2813880"
  },
  {
    "text": "instance you could spell that with a not equal to Prior prior is what they call map adjacent in or what I call map",
    "start": "2813880",
    "end": "2819240"
  },
  {
    "text": "adjacent in jello but if you type that the algorithm adviser will just say hey just use differ here or if you use an",
    "start": "2819240",
    "end": "2825359"
  },
  {
    "text": "and fold uh to do an all reduction we'll say Hey you can just use all instead of that um and you can note at the bottom",
    "start": "2825359",
    "end": "2831680"
  },
  {
    "text": "too one of the reasons I showed this is it just shows you that you can see a different uh you know aity chain here you've got one two Q two",
    "start": "2831680",
    "end": "2838359"
  },
  {
    "text": "Q all right I think this brings us to our last language that we're going to look at which is wewa and so this uses",
    "start": "2838359",
    "end": "2843839"
  },
  {
    "text": "operators plus Stacks so like I said Stacks kind of have in asteris before because this isn't actually",
    "start": "2843839",
    "end": "2848960"
  },
  {
    "text": "corresponding to the S combinator the B combinator but you get a lot of this stuff for free so let's hop back to um",
    "start": "2848960",
    "end": "2855599"
  },
  {
    "text": "our browser go to the wewa tab and so once again this is just another online",
    "start": "2855599",
    "end": "2861400"
  },
  {
    "text": "editor that you can use and we're going to build this up so the first thing we're going to do is once again our modulus 2 so one of the interesting",
    "start": "2861400",
    "end": "2867839"
  },
  {
    "text": "things uh if I can type this correctly is that uh all the other languages I had",
    "start": "2867839",
    "end": "2873680"
  },
  {
    "text": "to memorize keyboard shortcuts and I just code in these languages enough that I could kind of know them all uh except for the case of bqn when I couldn't type",
    "start": "2873680",
    "end": "2879920"
  },
  {
    "text": "the uh not equal to symbol but um here we just type the start of the name of",
    "start": "2879920",
    "end": "2886280"
  },
  {
    "text": "our function that we want so here we want modulus and as soon as the prefix of that function that you want turns a",
    "start": "2886280",
    "end": "2893319"
  },
  {
    "text": "certain color this turned blue you can then just hit control enter and it converts that prefix string the name of",
    "start": "2893319",
    "end": "2900000"
  },
  {
    "text": "your symbol into the symbol so I actually don't need to memorize any of these keyboard shortcuts and because of",
    "start": "2900000",
    "end": "2906160"
  },
  {
    "text": "that this language is has actually gotten in the array language space quite popular quite quickly this was only released uh in September of 2023 and",
    "start": "2906160",
    "end": "2913440"
  },
  {
    "text": "anyway so that's how you do two modulus once again we don't have the N wise reduction in wiwa we have to do the windows trick so if we do win for",
    "start": "2913440",
    "end": "2919480"
  },
  {
    "text": "Windows 2 this is going to give a matrix where each row is two elements at a time and then you move one by one and then we",
    "start": "2919480",
    "end": "2925760"
  },
  {
    "text": "want to do our not equal to reduction here so we're going to do rows uh Slash",
    "start": "2925760",
    "end": "2931400"
  },
  {
    "text": "and then not equal to hit contrl enter it's going to turn these all into symbols and then this does our sort of",
    "start": "2931400",
    "end": "2937119"
  },
  {
    "text": "not equal to reductions across each of our rows and then last but not least we're going to do our all reduction",
    "start": "2937119",
    "end": "2942720"
  },
  {
    "text": "which you spell in wewa slash and then Min and then we're done but once again similar to the Jelly",
    "start": "2942720",
    "end": "2950280"
  },
  {
    "text": "code it's not apparent if there's any composition here and there's not really um you can think of some of this as just",
    "start": "2950280",
    "end": "2956440"
  },
  {
    "text": "kind of unary function composition but the way that stack languages works works are they just apply whatever function is",
    "start": "2956440",
    "end": "2962599"
  },
  {
    "text": "at the top of the stack to the arguments that are on the argument stack and uh",
    "start": "2962599",
    "end": "2967640"
  },
  {
    "text": "anyways it's food for thought because this is you know this wew language was inspired by bqm but it gets a lot of the",
    "start": "2967640",
    "end": "2973640"
  },
  {
    "text": "same functionality without actually having to reach for these combinators which might be a good thing so that is",
    "start": "2973640",
    "end": "2979640"
  },
  {
    "text": "the wewalk code and that brings us to um the summary of these six languages um",
    "start": "2979640",
    "end": "2987880"
  },
  {
    "text": "and I sort of want to go through once again these different uh you know train models chain models uh stack models so",
    "start": "2987880",
    "end": "2994599"
  },
  {
    "text": "in the cap code at the top we start off by forming a unary function so this is",
    "start": "2994599",
    "end": "3000680"
  },
  {
    "text": "just something in cap whenever you have a binary function with a argument on the left that's called a left bound function",
    "start": "3000680",
    "end": "3006760"
  },
  {
    "text": "and that just forms your unary function and we get the same thing with the two not equal to slash the two y's reduction",
    "start": "3006760",
    "end": "3013200"
  },
  {
    "text": "and so we have a unary function followed by unary function and this is just the B combinator and then the and reduction or",
    "start": "3013200",
    "end": "3019880"
  },
  {
    "text": "just all that's another unary function so this is just the B combinator so two B combinators because we have three",
    "start": "3019880",
    "end": "3025599"
  },
  {
    "text": "unary functions in a row and this is made possible by the fact that there's no three train whenever you have a three",
    "start": "3025599",
    "end": "3030920"
  },
  {
    "text": "train that and would then want to interpret that two uh the two equals 2",
    "start": "3030920",
    "end": "3037119"
  },
  {
    "text": "as a a three train and it's not going to work so um or you need to put like the identity at the beginning which then",
    "start": "3037119",
    "end": "3042760"
  },
  {
    "text": "forms a three train another three train and a b combinator which is what you have to do with dialog APL so this I think is actually a nicer model than the",
    "start": "3042760",
    "end": "3048160"
  },
  {
    "text": "dialog APL one in the second example we start off with a three train so uh",
    "start": "3048160",
    "end": "3055119"
  },
  {
    "text": "that's the FI combinator and then that forms a unary function which with the two not equal to slash forms another",
    "start": "3055119",
    "end": "3061280"
  },
  {
    "text": "three train the FI combinator and then the and reduction is a unary function so",
    "start": "3061280",
    "end": "3066640"
  },
  {
    "text": "that's the B combinator so this is almost identical to the Cap Code but it's a lot more confusing in my opinion",
    "start": "3066640",
    "end": "3072200"
  },
  {
    "text": "to understand and that's because it has three trains wewa we just covered and as I mentioned like unary function or it's",
    "start": "3072200",
    "end": "3079240"
  },
  {
    "text": "technically the application of a partially applied binary function which is a unary function but you know potato potato no one says potato but uh",
    "start": "3079240",
    "end": "3087200"
  },
  {
    "text": "um and windows 2 once again another you know partially applied binary function and then this is a unary function",
    "start": "3087200",
    "end": "3092400"
  },
  {
    "text": "applied this is a unary function applied but like we don't need to use any combinators to get this kind of composition for free so uh it's",
    "start": "3092400",
    "end": "3099720"
  },
  {
    "text": "interesting and note that because we've got the blue here uh we need that because there's no n-wise reduction so",
    "start": "3099720",
    "end": "3105400"
  },
  {
    "text": "one of the points of this talk too is the algorithms that you're able to reach for and use affect the combinators that",
    "start": "3105400",
    "end": "3111079"
  },
  {
    "text": "you need to use uh bqn similar to dialog APL we start off with a three train uh",
    "start": "3111079",
    "end": "3117000"
  },
  {
    "text": "which is a f combinator then another three train which is the five combinator but in this case because once again we don't have the N wise reduction we need",
    "start": "3117000",
    "end": "3122760"
  },
  {
    "text": "to reach for the not equals to rowwise reduction but that's a unary function so",
    "start": "3122760",
    "end": "3127839"
  },
  {
    "text": "this is a b combinator but now because we have a b combinator you can never get two b combinators in a in a row without",
    "start": "3127839",
    "end": "3134440"
  },
  {
    "text": "using something to disambiguate so we have to put a b combinator here but that nothing we got this little devil Emoji",
    "start": "3134440",
    "end": "3142079"
  },
  {
    "text": "uh this in my opinion it's I'm glad that bqn has it it's just unfortunate that",
    "start": "3142079",
    "end": "3147640"
  },
  {
    "text": "bqn has to have it in the times when you want to do stuff like this the J code three train five combinator three train",
    "start": "3147640",
    "end": "3155640"
  },
  {
    "text": "five combinator two train B combinator but once again we have to use this cap thing",
    "start": "3155640",
    "end": "3163160"
  },
  {
    "text": "for a different reason than in uh bqn bqn we needed it because we had two b combinators in a row uh in J we needed",
    "start": "3163160",
    "end": "3171079"
  },
  {
    "text": "it because the two train is not the B combinator it's the S combinator and so they have this thing called app which",
    "start": "3171079",
    "end": "3177400"
  },
  {
    "text": "turns a two train from being s to b which like this is extremely confusing",
    "start": "3177400",
    "end": "3183760"
  },
  {
    "text": "in my opinion the fact that like you have a special token to change the meaning of a train trains already are",
    "start": "3183760",
    "end": "3189359"
  },
  {
    "text": "confusing but the fact that you have a token that can change the two train from an S to a b um and I also think it's",
    "start": "3189359",
    "end": "3195720"
  },
  {
    "text": "incredibly hard to read I mean most of you are probably thinking all of this is incredibly hard to read but I think the",
    "start": "3195720",
    "end": "3201240"
  },
  {
    "text": "fact that you know Jay uses uh multiple asky symbols at least the other language",
    "start": "3201240",
    "end": "3206799"
  },
  {
    "text": "they use single symbols to represent functions but here you need to know that the asterisk dot that represents and how",
    "start": "3206799",
    "end": "3214839"
  },
  {
    "text": "like you need to memorize basically when symbols end which is it's just extra",
    "start": "3214839",
    "end": "3220160"
  },
  {
    "text": "things to learn and then last but not least the only language that reads left to right of these six is uh jelly and",
    "start": "3220160",
    "end": "3226680"
  },
  {
    "text": "Jell-O so odd unary function differ unary function B combinator all unary",
    "start": "3226680",
    "end": "3232400"
  },
  {
    "text": "function B combinator so similar to cap just the opposite direction and obviously the thing you can note about",
    "start": "3232400",
    "end": "3238359"
  },
  {
    "text": "the jello code is that this semantically it's identical to you know other than the wewa and bqn solutions it's",
    "start": "3238359",
    "end": "3244680"
  },
  {
    "text": "identical to what the other code is doing but it's incredibly readable and really really nice in my",
    "start": "3244680",
    "end": "3250640"
  },
  {
    "text": "opinion so this is a summary of across all the languages that we've looked at",
    "start": "3250640",
    "end": "3256079"
  },
  {
    "text": "uh which ones have access to which function composition strategies and uh I think that brings us to the sort of",
    "start": "3256079",
    "end": "3262040"
  },
  {
    "text": "conclusion of our talk which is look at that great for time um you",
    "start": "3262040",
    "end": "3269200"
  },
  {
    "text": "know I think this code is incredibly beautiful however beautiful code is a",
    "start": "3269200",
    "end": "3275319"
  },
  {
    "text": "subjective thing one person can look at the initial python code and they say oh I prefer for loops and if statements I",
    "start": "3275319",
    "end": "3280760"
  },
  {
    "text": "think that's the most beautiful readable code because I don't need to learn anything extra I don't need to go learn what's in the iter tools Library some C",
    "start": "3280760",
    "end": "3287599"
  },
  {
    "text": "developers would say that their code is more beautiful than the F because of the same reason I can understand for loops",
    "start": "3287599",
    "end": "3292720"
  },
  {
    "text": "and if statements I love this code it speaks to me but like it is the essence",
    "start": "3292720",
    "end": "3298160"
  },
  {
    "text": "of what I'm after a lot of other languages require a bunch of ceremony whereas these do not and a lot of that",
    "start": "3298160",
    "end": "3304440"
  },
  {
    "text": "is because of the comp the function composition strategies that you have access to in these languages um you know",
    "start": "3304440",
    "end": "3310319"
  },
  {
    "text": "one of my podcasts it has the title algorithms Plus data structures equals programs this is a Nicholas verth book that was written uh it's actually taught",
    "start": "3310319",
    "end": "3317160"
  },
  {
    "text": "the book uh teaches in Pascal um but in Array languages there's really only one data structure and that's the array",
    "start": "3317160",
    "end": "3323640"
  },
  {
    "text": "there's no hash Maps there's no you know uh sets it's it's just the arrays and you can represent sort of the different data structures using this so I'm",
    "start": "3323640",
    "end": "3329720"
  },
  {
    "text": "starting to like my opinion of the title of this book it's really scratch out the data structures and replace that with",
    "start": "3329720",
    "end": "3334880"
  },
  {
    "text": "combinators and scratch out the programs and replace that with beautiful code and so the question is is like if you're in",
    "start": "3334880",
    "end": "3340319"
  },
  {
    "text": "a language that has access to different data structures what if you add the combinators though you can get even more elegant code in my opinion um and you",
    "start": "3340319",
    "end": "3347680"
  },
  {
    "text": "know like I said we started off with this hopefully you understand a little bit more of this but the point is is",
    "start": "3347680",
    "end": "3353319"
  },
  {
    "text": "like you know on your free time if you want go and check these out not because I want you to switch to programming an APL but take these you know compositions",
    "start": "3353319",
    "end": "3361599"
  },
  {
    "text": "other than just the B combinator and see how you can fold those into your language you know we've been coming back to the python solution over and over",
    "start": "3361599",
    "end": "3367359"
  },
  {
    "text": "again we left it at this adjacent map which we borrowed from hll but what if we borrowed the differ which was in",
    "start": "3367359",
    "end": "3374200"
  },
  {
    "text": "jelly what what do we end up with we no longer have any combinators",
    "start": "3374200",
    "end": "3379880"
  },
  {
    "text": "here which is what I mentioned earlier the algorithms that you have at your disposal the things that you can reach",
    "start": "3379880",
    "end": "3386000"
  },
  {
    "text": "for libraries affect the code that you can write and a lot of the discovery of these types of algorithms come from my",
    "start": "3386000",
    "end": "3392079"
  },
  {
    "text": "exploration of these languages and learning about the combination or the composition strategies and like if you",
    "start": "3392079",
    "end": "3397359"
  },
  {
    "text": "look at this compared to what we had in the very beginning I found it very hard to like for anyone to argue that this isn't a simpler more elegant sure I need",
    "start": "3397359",
    "end": "3404039"
  },
  {
    "text": "to know what differ means but that's basically the only thing here that's not in your basic you know idiomatic python",
    "start": "3404039",
    "end": "3411240"
  },
  {
    "text": "everyone in Python knows what a map is they know what all is I guess odd you know but I think everyone knows what odd means Tech technically so like you know",
    "start": "3411240",
    "end": "3418319"
  },
  {
    "text": "be curious go and try and learn these languages and uh on top of this you know you might be thinking why is a person",
    "start": "3418319",
    "end": "3423839"
  },
  {
    "text": "from Nvidia giving uh giving this talk you know I do it because I'm really interested in these array languages but",
    "start": "3423839",
    "end": "3429160"
  },
  {
    "text": "differ and map they're both Maps differ is just a adjacent map which can be implemented using a map all that's just",
    "start": "3429160",
    "end": "3435559"
  },
  {
    "text": "a reduction reductions in maps map reduce heard of that gpus eat this stuff",
    "start": "3435559",
    "end": "3441079"
  },
  {
    "text": "for breakfast you know the for Loop that we had in Python originally it's hard to accelerate that kind of code you can do",
    "start": "3441079",
    "end": "3447240"
  },
  {
    "text": "it but it's so much easier to accelerate this kind of code and that's why coui exists it's a Cuda accelerated numpy",
    "start": "3447240",
    "end": "3454000"
  },
  {
    "text": "because numpy is just a bunch of operations and if you can go accelerate all these operations um it's so much",
    "start": "3454000",
    "end": "3459240"
  },
  {
    "text": "easier to basically get like accelerated code so the point being is that there is actually some utility other than just",
    "start": "3459240",
    "end": "3464440"
  },
  {
    "text": "you know oh look I can you know write my code a lot shorter by having access to this different stuff you can implement",
    "start": "3464440",
    "end": "3469760"
  },
  {
    "text": "this stuff a lot faster at the end of the day so last but not least if you want to go try these languages out as I",
    "start": "3469760",
    "end": "3475240"
  },
  {
    "text": "mentioned all of that stuff was in the browser uh you can find this I the same content GitHub repository where I listed",
    "start": "3475240",
    "end": "3481599"
  },
  {
    "text": "all my talks and podcasts you can find the slide deck and links to all of this stuff you want to go check this stuff out um if you don't want to go check",
    "start": "3481599",
    "end": "3488039"
  },
  {
    "text": "that out and you are uh in one of these two languages I have two different libraries that basically Implement a lot",
    "start": "3488039",
    "end": "3493559"
  },
  {
    "text": "of these uh combinators um I use them basically in all of my personal projects because whenever you know I have to",
    "start": "3493559",
    "end": "3499559"
  },
  {
    "text": "write a Lambda that's doing some simple thing a lot of the times there's a combinator for that um and with that I",
    "start": "3499559",
    "end": "3504720"
  },
  {
    "text": "will say uh head over to comment monary logic.com to learn more and uh thank you for your",
    "start": "3504720",
    "end": "3510010"
  },
  {
    "text": "[Applause]",
    "start": "3510010",
    "end": "3515860"
  },
  {
    "text": "time I'll be around for the rest of the conference if folks want to come and talk to me uh because yeah",
    "start": "3516720",
    "end": "3524119"
  }
]