[
  {
    "text": "good morning everyone at the moment we're at a great stage within the container Revolution",
    "start": "1760",
    "end": "9480"
  },
  {
    "text": "it's getting all of the excitement and everyone's enthusiastic about it but what we're also seeing is how it can",
    "start": "9480",
    "end": "15759"
  },
  {
    "text": "actually start working and how it can actually start working and adding value to our companies and to projects in",
    "start": "15759",
    "end": "22039"
  },
  {
    "text": "production and delivering back on the promise of how these containers can",
    "start": "22039",
    "end": "27560"
  },
  {
    "text": "deliver great amazing things and this is kind of what I want to go into today I",
    "start": "27560",
    "end": "32640"
  },
  {
    "text": "want to talk about how we can actually take containers remove some of the burz and buzzwords and uh excitement and",
    "start": "32640",
    "end": "39800"
  },
  {
    "text": "actually get down to how do we start delivering value and how we do we start adding and supporting containers in",
    "start": "39800",
    "end": "46480"
  },
  {
    "text": "production um and at scale using toolings like kubernetes so my name is Ben Hall I am",
    "start": "46480",
    "end": "53440"
  },
  {
    "text": "the founder of company called katacoda and katacoda is an Interactive Learning platform for software Developers we give",
    "start": "53440",
    "end": "60760"
  },
  {
    "text": "free Hands-On uh interactive tutorials and everything is in the browser you don't have to download you don't have to",
    "start": "60760",
    "end": "67000"
  },
  {
    "text": "configure everything and we have topics and content on kubernetes on Docker on",
    "start": "67000",
    "end": "73720"
  },
  {
    "text": "open shift and we take you from get started all the way up to running and scaling in",
    "start": "73720",
    "end": "80119"
  },
  {
    "text": "production and for today what I want to start with is why I personally consider",
    "start": "80119",
    "end": "85400"
  },
  {
    "text": "containers being important why I'm so passionate and enthusiastic about them and then I want to walk you through the",
    "start": "85400",
    "end": "91360"
  },
  {
    "text": "process and some of the tips and some of the tricks that I've picked up about how you take it from building an asp.net",
    "start": "91360",
    "end": "97360"
  },
  {
    "text": "core application running as um containerized application deploying that",
    "start": "97360",
    "end": "103040"
  },
  {
    "text": "onto kubernetes explaining what kubernetes is and then using Azure to help scale that",
    "start": "103040",
    "end": "108640"
  },
  {
    "text": "out help Ru that in the cloud and then explain some of the advantages some of the benefits that kubernetes can bring",
    "start": "108640",
    "end": "115479"
  },
  {
    "text": "and what problems it can solve and so if we start and look at the ecosystem at the moment we're in this",
    "start": "115479",
    "end": "122439"
  },
  {
    "text": "really amazing explosion of Technologies we have um awesome new languages which are appearing such as asp.net but also",
    "start": "122439",
    "end": "130280"
  },
  {
    "text": "things like elixir um f and some of the functional things are actually starting to become mainstream and this is great",
    "start": "130280",
    "end": "139080"
  },
  {
    "text": "but also it becomes a problem especially when we need to manage and maintain all of these different languages and all of",
    "start": "139080",
    "end": "145400"
  },
  {
    "text": "the potential applications all of the Big Data Solutions all of the nosql um data storage offerings and if we always",
    "start": "145400",
    "end": "152800"
  },
  {
    "text": "have to reinvent the wheel if we always have to figure out how we need to install how we need to manage how we",
    "start": "152800",
    "end": "157879"
  },
  {
    "text": "need to back up all of these interesting complexities start um coming into play",
    "start": "157879",
    "end": "163319"
  },
  {
    "text": "and this can have a huge impact about how quickly we can innovate and how quickly we can start adopting these",
    "start": "163319",
    "end": "168519"
  },
  {
    "text": "Technologies if we keep needing to learn everything every single time and we need to change how production works and",
    "start": "168519",
    "end": "174599"
  },
  {
    "text": "operates into in order to support these Technologies then that's going to add",
    "start": "174599",
    "end": "179920"
  },
  {
    "text": "barriers that's going to have blockers and it's just going to remove some of the advantages that they can bring and",
    "start": "179920",
    "end": "185840"
  },
  {
    "text": "then once everything's running we still have to maintain it we still have to worry about how do we do upgrades and",
    "start": "185840",
    "end": "191239"
  },
  {
    "text": "how do we make sure that we don't have any have any downtime in the meantime and so this is where I think containers",
    "start": "191239",
    "end": "197280"
  },
  {
    "text": "can have huge Advantage because it can help simplify and help remove some of this complexity it can help remove some",
    "start": "197280",
    "end": "204000"
  },
  {
    "text": "of the uncertainties about how applications should operate and how applications should scale what required",
    "start": "204000",
    "end": "210239"
  },
  {
    "text": "from an application in order to run effectively and properly and securely and by having everything at the",
    "start": "210239",
    "end": "217319"
  },
  {
    "text": "container we introduce this standardization where everything becomes a very consistent experience from",
    "start": "217319",
    "end": "223680"
  },
  {
    "text": "building applications using different languages to running and deploying them at scale um and top on top of",
    "start": "223680",
    "end": "229840"
  },
  {
    "text": "Technologies like kubernetes and I'm sure uh many of us have seen a container in operation we",
    "start": "229840",
    "end": "236959"
  },
  {
    "text": "have the docker command line and near allows us to go off to the docker",
    "start": "236959",
    "end": "242319"
  },
  {
    "text": "registry which has got all of the docker images and these Docker images have everything which the application or the",
    "start": "242319",
    "end": "248599"
  },
  {
    "text": "process needs in order to be able to start it's got any uh operating system dependencies it's got any runtime",
    "start": "248599",
    "end": "254879"
  },
  {
    "text": "dependencies such as the donet framework or the jvm um and it's got all the",
    "start": "254879",
    "end": "260280"
  },
  {
    "text": "application configuration the default configuration needed for the application to launch successfully and this allows",
    "start": "260280",
    "end": "266360"
  },
  {
    "text": "us to do things like docka R give it the image name which which we're interested in in this case reddish um the",
    "start": "266360",
    "end": "272400"
  },
  {
    "text": "particular version so we're not just using the latest uh greatest we're actually being very targeted because the",
    "start": "272400",
    "end": "278840"
  },
  {
    "text": "latest tag is amazing for those who uh have seen it like you just do dock R reddish and it will pull down the latest",
    "start": "278840",
    "end": "285800"
  },
  {
    "text": "version and you get the latest and greatest version available but once you start depending on this latest version",
    "start": "285800",
    "end": "292080"
  },
  {
    "text": "the problem is that can change the latest tag is a moving Target uh and so",
    "start": "292080",
    "end": "297320"
  },
  {
    "text": "one day you'll be running reddish version 3 and the next say you may be running Red version 4 and that could",
    "start": "297320",
    "end": "302440"
  },
  {
    "text": "inry some uh unknown side effects so when I run images I always I'm very",
    "start": "302440",
    "end": "307919"
  },
  {
    "text": "distinct and very concrete with what version I actually want to ruin just so I don't get any unexpected side effects",
    "start": "307919",
    "end": "314039"
  },
  {
    "text": "and so in this case it's 3.0.3 um and to make that container accessible I open up the port so I made",
    "start": "314039",
    "end": "320639"
  },
  {
    "text": "the port available on the host 6379 so any traffic I send to that",
    "start": "320639",
    "end": "325720"
  },
  {
    "text": "machine gets uh proxied and gets uh passed to the container running process",
    "start": "325720",
    "end": "331919"
  },
  {
    "text": "and now it's as if from a development experience as if I've got reddis installed on my local machine and so it",
    "start": "331919",
    "end": "337880"
  },
  {
    "text": "can use and interact with it the development dependency without ever worrying about how that needs to be",
    "start": "337880",
    "end": "342919"
  },
  {
    "text": "configured in other covers and as this container gets uh container technology gets adopted we see",
    "start": "342919",
    "end": "349120"
  },
  {
    "text": "more interesting use cases and more complex applications starting to be containerized so now with some of the",
    "start": "349120",
    "end": "356120"
  },
  {
    "text": "amazing work that the Microsoft team have done SQL Server the official full-blown FAL server runs on Linux",
    "start": "356120",
    "end": "363680"
  },
  {
    "text": "they've managed to migrate the Windows NT kernel into the Linux user space",
    "start": "363680",
    "end": "368960"
  },
  {
    "text": "using things which I do not fully understand it's some magic but it seems to work very nicely so congratulations",
    "start": "368960",
    "end": "375599"
  },
  {
    "text": "to them but it works on L Linux and you can execute all of the SQL commands and",
    "start": "375599",
    "end": "380840"
  },
  {
    "text": "all of uh all of the operations that you would expect from seal server on Windows",
    "start": "380840",
    "end": "387039"
  },
  {
    "text": "but because we now have it on Linux it means we can now RN it effectively inside of",
    "start": "387039",
    "end": "392599"
  },
  {
    "text": "containers and so in this case uh I'm launching the latest uh CTP our SQL",
    "start": "392599",
    "end": "399199"
  },
  {
    "text": "Server 2017 and as it launches out you can kind of see normal operations which you'd",
    "start": "399199",
    "end": "406199"
  },
  {
    "text": "expect from SQL Server it's creating the master it's creating the model we've got some tempdb um uh initialization",
    "start": "406199",
    "end": "414000"
  },
  {
    "text": "happening and when we launch the container we have to pass it through environment variables because it's a big",
    "start": "414000",
    "end": "420160"
  },
  {
    "text": "blown fem seem like we need to accept the NG the license agreement and so we need to pass that in the uh environment",
    "start": "420160",
    "end": "426919"
  },
  {
    "text": "variable and we have to set an sa password something super strong and secure um such this beautiful password",
    "start": "426919",
    "end": "433919"
  },
  {
    "text": "of mine but the benefit as we can see is this it take this is everything which is",
    "start": "433919",
    "end": "439720"
  },
  {
    "text": "required to run SQL Server we don't have to download huge massive uh installation",
    "start": "439720",
    "end": "445599"
  },
  {
    "text": "files and isos anymore we don't have to sit there and going through 10 15 different screens and Ticking boxes",
    "start": "445599",
    "end": "452479"
  },
  {
    "text": "which we're not quite confident if that's a box which we ticked last time we tried to install it or if it's the same configuration my colleague next to",
    "start": "452479",
    "end": "459080"
  },
  {
    "text": "me has and so now this container introduced this standardization about what SQL server looks like and how SQL",
    "start": "459080",
    "end": "465720"
  },
  {
    "text": "Server operates and of course we can go in and can we can tweak and modify and add all the extensions which we want but",
    "start": "465720",
    "end": "472520"
  },
  {
    "text": "we've got this consistent Baseline to be starting with and because we don't have to go for the installation this is where",
    "start": "472520",
    "end": "478919"
  },
  {
    "text": "things like the accept and use a license agreement becomes a little bit different because like how do you take that box to",
    "start": "478919",
    "end": "484039"
  },
  {
    "text": "verify that actually I do uh agree to these terms and so this is where you see things like uh the old way of working",
    "start": "484039",
    "end": "491479"
  },
  {
    "text": "and traditional way uh kind of being exposed in a containerized system and so this SQL Server started",
    "start": "491479",
    "end": "498840"
  },
  {
    "text": "from an image there millions of images available on the doco Hub and um these",
    "start": "498840",
    "end": "504639"
  },
  {
    "text": "can either be used as kind of like foundation and you can start those containers and in them uh within your",
    "start": "504639",
    "end": "510840"
  },
  {
    "text": "systems or you can take and embrace an extend mentality you can use either the",
    "start": "510840",
    "end": "516080"
  },
  {
    "text": "foundations for what your application looks like and what your application Desires in this case things like the net",
    "start": "516080",
    "end": "522080"
  },
  {
    "text": "core and then use that as the foundation to deploy uh your application on top of",
    "start": "522080",
    "end": "528000"
  },
  {
    "text": "and all of these images are based on layers and this is a really important concept within the docker uh system",
    "start": "528000",
    "end": "535600"
  },
  {
    "text": "because when we deploy our application and it depends on net we don't want to",
    "start": "535600",
    "end": "540720"
  },
  {
    "text": "have to deploy its own unique version of net every single time if we're running",
    "start": "540720",
    "end": "546839"
  },
  {
    "text": "100 200 different Services if they all had their own installation of net that",
    "start": "546839",
    "end": "552079"
  },
  {
    "text": "would just become a maintenance Nightmare and also we'd need much bigger discs and much bigger hard drive space",
    "start": "552079",
    "end": "558200"
  },
  {
    "text": "um and it would become much slower on the network and everything would just eventually grind to a halt and we could end do anything apart from wait for the",
    "start": "558200",
    "end": "564720"
  },
  {
    "text": "Net Framework to be downloaded and that's not very motivational and it's not very uh productive",
    "start": "564720",
    "end": "569920"
  },
  {
    "text": "so instead by having it as a layer we can actually start reusing and repurposing the files underneath they're",
    "start": "569920",
    "end": "576160"
  },
  {
    "text": "all s booxed and all of the containers that in uh completely separated for uh at R time purposes but in terms of files",
    "start": "576160",
    "end": "583920"
  },
  {
    "text": "on this they can share and they can reuse and they can be much become much more uh much more uh effective in how",
    "start": "583920",
    "end": "590839"
  },
  {
    "text": "they repurpose uh the different dependencies that they require but from the application",
    "start": "590839",
    "end": "596320"
  },
  {
    "text": "Viewpoint it's all the same everything gets flattened and they just see the application hierarchy uh and this flat",
    "start": "596320",
    "end": "603040"
  },
  {
    "text": "kind of merged uh file system but under the coverage you've got the layers",
    "start": "603040",
    "end": "608640"
  },
  {
    "text": "underneath and now we've got these containers and some of the benefits are they've got their own process space so",
    "start": "608640",
    "end": "614680"
  },
  {
    "text": "they can't interact and interfere with other applications which are running they've got their own network interface",
    "start": "614680",
    "end": "620240"
  },
  {
    "text": "so you can open ports and send traffic to it uh the own rout directories so if you ask what's running inside of a",
    "start": "620240",
    "end": "626240"
  },
  {
    "text": "container it will have all of the files which you can expect from from a full virtual machine or a bare metal machine",
    "start": "626240",
    "end": "632360"
  },
  {
    "text": "such as user directories bin directories um on windows program files and system",
    "start": "632360",
    "end": "637399"
  },
  {
    "text": "C2 Etc but they're completely sandboxed and completely isolated and so in many",
    "start": "637399",
    "end": "642720"
  },
  {
    "text": "ways they deliver some of the benefits which we would traditionally get from virtual machines but containers are sign",
    "start": "642720",
    "end": "649480"
  },
  {
    "text": "significantly not a virtual machine they're much more lightweight they're much more uh flexible and you can get a",
    "start": "649480",
    "end": "657160"
  },
  {
    "text": "lot more benefits from them in different ways but for me one of the main things is about the performance because we're not",
    "start": "657160",
    "end": "663279"
  },
  {
    "text": "depending on this hypervisor which is managing the relationship between a guest operating system and our underline",
    "start": "663279",
    "end": "669000"
  },
  {
    "text": "host machine we get all of the Native performance and in particular we get the native IO which means that containers",
    "start": "669000",
    "end": "675959"
  },
  {
    "text": "are great for running Big Data workloads running SQL server in the maximum performance possible where traditionally",
    "start": "675959",
    "end": "683920"
  },
  {
    "text": "VMS could have an overhead um through that bottleneck and through that data path",
    "start": "683920",
    "end": "689920"
  },
  {
    "text": "but the other benefit is guest uh containers don't need a guest operating system containers operate against a host",
    "start": "689920",
    "end": "697160"
  },
  {
    "text": "kernel and reuse and re take advantage of what's already there and so because",
    "start": "697160",
    "end": "702200"
  },
  {
    "text": "we don't have a guest operating system we don't need to wait 10 minutes for it to boot up we don't need to pre-allocate",
    "start": "702200",
    "end": "708760"
  },
  {
    "text": "a VM 8 gig of ram in order just to run our node process in isolation instead we",
    "start": "708760",
    "end": "715360"
  },
  {
    "text": "can take advantage of the S boxing in the nature with without pre-allocating",
    "start": "715360",
    "end": "720720"
  },
  {
    "text": "any hard disk or space or CPU Etc and so what's actually running on our machine",
    "start": "720720",
    "end": "726399"
  },
  {
    "text": "is actually what's required and so we can get much better resource optimization and capacity planning about",
    "start": "726399",
    "end": "732839"
  },
  {
    "text": "how our systems work and because we don't have this pre-allocation step everything takes",
    "start": "732839",
    "end": "738839"
  },
  {
    "text": "milliseconds to launch Docker is fundamentally just a process manager it doesn't do anything apart",
    "start": "738839",
    "end": "745839"
  },
  {
    "text": "from launch and secure processes that is with fil and that's all what's happening in the",
    "start": "745839",
    "end": "752079"
  },
  {
    "text": "covers it does this via kernel virtualization and so when you run the process it's taking advantage of the",
    "start": "752079",
    "end": "758440"
  },
  {
    "text": "kernel from the host machine um and that gives it the performance and the capabilities and the",
    "start": "758440",
    "end": "764760"
  },
  {
    "text": "covers but there are three main Concepts to keep in mind when you're thinking about Docker and you're thinking about",
    "start": "764760",
    "end": "769880"
  },
  {
    "text": "these container processes you've got the Renning process itself which is the container this process got launched by a",
    "start": "769880",
    "end": "776839"
  },
  {
    "text": "Docker image and you can think of this has like a layered zip file if you",
    "start": "776839",
    "end": "782079"
  },
  {
    "text": "extorted a container image it would be exported a zip and that zip would just have multiple folders inside of it each",
    "start": "782079",
    "end": "788800"
  },
  {
    "text": "reflecting the layer under the covers and then he's got the docker rry which can be public and hosted on the cloud or",
    "start": "788800",
    "end": "795360"
  },
  {
    "text": "it can be private and hosted inside your data center which we'll look at in a moment but it's important to remember",
    "start": "795360",
    "end": "801360"
  },
  {
    "text": "that Docker isn't the only game in town Docker isn't the only container run time we've got some really exciting",
    "start": "801360",
    "end": "806760"
  },
  {
    "text": "Technologies such as um the contain a RN time interface uh as part of kubernetes",
    "start": "806760",
    "end": "812680"
  },
  {
    "text": "we've got RNC which is a really lowlevel um way of starting containers",
    "start": "812680",
    "end": "818839"
  },
  {
    "text": "got container D and rocket and they've all got their slight opinions and their slight variations and some of the",
    "start": "818839",
    "end": "825079"
  },
  {
    "text": "different advantages that they bring to the party but they are all cohering and working towards a common standard and",
    "start": "825079",
    "end": "832199"
  },
  {
    "text": "that allows us to try and move around and experiment with different um Technologies and repurposing reusing the",
    "start": "832199",
    "end": "839800"
  },
  {
    "text": "same images and the covers and so we've got the container Ren ey uh we've got the open container initiative and that",
    "start": "839800",
    "end": "846560"
  },
  {
    "text": "defined specifications so the rtime spec which is actually how do you start containers and how do you talk about",
    "start": "846560",
    "end": "851639"
  },
  {
    "text": "them and the image specification which is uh how do you build an image and what",
    "start": "851639",
    "end": "856680"
  },
  {
    "text": "does an image look like and so we can have different Technologies which all build and all go into this um overall",
    "start": "856680",
    "end": "862680"
  },
  {
    "text": "system and this is what allows us to do things like renal server in a consistent reliable way we start our container",
    "start": "862680",
    "end": "870360"
  },
  {
    "text": "based on the image and that's what brings up but the containers aren't used just for background posteres we can also",
    "start": "870360",
    "end": "876759"
  },
  {
    "text": "use use them for normal everyday command line tooling too and so when I work with",
    "start": "876759",
    "end": "881880"
  },
  {
    "text": "azour I don't necessarily want the Azure command line um installed on my laptop",
    "start": "881880",
    "end": "887120"
  },
  {
    "text": "because I'm unsure about the dependencies it requires my laptop at the moment is working quite happily and",
    "start": "887120",
    "end": "892639"
  },
  {
    "text": "I don't really want to mess with that but I still want to take advantage of the tooling and I still want access um",
    "start": "892639",
    "end": "898240"
  },
  {
    "text": "to the aure command line interface and so now I can use all of this as a container I can launch the container I",
    "start": "898240",
    "end": "905079"
  },
  {
    "text": "can pass this flag it to make it interactive and work at the ter terminal and then it works and operates in",
    "start": "905079",
    "end": "911560"
  },
  {
    "text": "exactly the same way I can set my credentials I can launch and manage all the my my Azure machines and then when",
    "start": "911560",
    "end": "918040"
  },
  {
    "text": "I'm done I simply exit the container and I I'm back on my host and everything is",
    "start": "918040",
    "end": "923440"
  },
  {
    "text": "still exactly how I left it and so now I don't get conflict between uh things upgrading in the background which may",
    "start": "923440",
    "end": "929880"
  },
  {
    "text": "have an impact on how I actually Ru my applications and how uh I actually do my daily development",
    "start": "929880",
    "end": "935600"
  },
  {
    "text": "work and all of these images are based on the Hub which I've mentioned and they're all official um and so you can",
    "start": "935600",
    "end": "941839"
  },
  {
    "text": "look at 90% of your dependencies I'm sure have an image already available and you can take that and you can start that",
    "start": "941839",
    "end": "948880"
  },
  {
    "text": "or you can simply use it as inspiration and build your own container and configure it how you need and these",
    "start": "948880",
    "end": "955759"
  },
  {
    "text": "images are great they give a lot of value and um means that we don't have to worry about dependences but what about",
    "start": "955759",
    "end": "962160"
  },
  {
    "text": "our own applications what how do we deploy and how do we build our own applications using",
    "start": "962160",
    "end": "968440"
  },
  {
    "text": "containers so what I've got is a amazing application uh built with asp.net core",
    "start": "968440",
    "end": "974720"
  },
  {
    "text": "and um it's got two classes and this is the fundamental",
    "start": "974720",
    "end": "980560"
  },
  {
    "text": "things required the first program file I'm sure many of us have seen um if",
    "start": "980560",
    "end": "986399"
  },
  {
    "text": "we've been experimenting with asp.net core pleas is bootstrapping that um self-hosting HTTP server and the most",
    "start": "986399",
    "end": "993639"
  },
  {
    "text": "important bit is we're defining the URL um which we want to listen on by default",
    "start": "993639",
    "end": "999120"
  },
  {
    "text": "sometimes applications like to listen on 17201 which means it will only respond",
    "start": "999120",
    "end": "1004600"
  },
  {
    "text": "to traffic from the same network interface a local host but when you're in a container and running in a",
    "start": "1004600",
    "end": "1010759"
  },
  {
    "text": "containerized world only listening to local hosts doesn't really help you because nothing else is running inside",
    "start": "1010759",
    "end": "1017000"
  },
  {
    "text": "that container which means you will not listen to anything apart from your own messages which doesn't really help you",
    "start": "1017000",
    "end": "1023079"
  },
  {
    "text": "scale and so when you launch applications you need to be very explicit and make sure that you're um",
    "start": "1023079",
    "end": "1028918"
  },
  {
    "text": "binding and listening to uh the outside world um and you do that by in this case with a onet bring to 000000 so all of",
    "start": "1028919",
    "end": "1037319"
  },
  {
    "text": "the IP addresses on the machine and in this case listen on Port 5,000 so we can respond and accept traffic and then once",
    "start": "1037319",
    "end": "1044199"
  },
  {
    "text": "a request comes in um no matter what request it is we simply respond with the host name um of that request which in",
    "start": "1044199",
    "end": "1051360"
  },
  {
    "text": "this case is the also the host name maps to The Container ID because that's by default how it works in the Cs so this",
    "start": "1051360",
    "end": "1058080"
  },
  {
    "text": "is our application and this is what we'll be using our as as our example and now we need to turn it into",
    "start": "1058080",
    "end": "1064640"
  },
  {
    "text": "a Docker image a Docker image will then allow us to run it at the container and then allow us to deploy it onto",
    "start": "1064640",
    "end": "1070559"
  },
  {
    "text": "kubernetes and so to start and start building these Docker images we need a Docker file this Docker file lives with",
    "start": "1070559",
    "end": "1077120"
  },
  {
    "text": "your source code it can be checked in into your source code um repositor such as git um and it can be maintained and",
    "start": "1077120",
    "end": "1084159"
  },
  {
    "text": "supported with the rest of your application and the third part of the docker file is defining what your",
    "start": "1084159",
    "end": "1089760"
  },
  {
    "text": "application needs in order to be able to run effectively so what dependencies does it require so this could be node",
    "start": "1089760",
    "end": "1096440"
  },
  {
    "text": "version six node version 8 or in this case umnet 1.1.1 and because with.net we need the",
    "start": "1096440",
    "end": "1104640"
  },
  {
    "text": "build tools we need to be able to take our source code and build and compile binaries download the new get packages",
    "start": "1104640",
    "end": "1111360"
  },
  {
    "text": "um and perform other things and so we say that we need the SDK tooling um as part of that and this comes from the Hub",
    "start": "1111360",
    "end": "1118760"
  },
  {
    "text": "um there's different versions available depending on what you require so if you want to go ahead and you want to start experimenting with um the asp.net 2.0",
    "start": "1118760",
    "end": "1127640"
  },
  {
    "text": "there's an image available for that and you can go ahead and download without worrying about how that will impact and",
    "start": "1127640",
    "end": "1133240"
  },
  {
    "text": "how that will affect your machine so the next stage is once we've got our dependency we just need to",
    "start": "1133240",
    "end": "1138440"
  },
  {
    "text": "Define how do we deploy our application and secondly with the work which Microsoft",
    "start": "1138440",
    "end": "1143960"
  },
  {
    "text": "are doing it becomes a very standard streamline process depending on uh without too many switches between",
    "start": "1143960",
    "end": "1150520"
  },
  {
    "text": "different variations in applications so the first part is we need our application and we need it we need to",
    "start": "1150520",
    "end": "1156120"
  },
  {
    "text": "give it somewhere to live so we make a app directory and we set that the working directory we then copy our thef",
    "start": "1156120",
    "end": "1163600"
  },
  {
    "text": "pod file from our host machine from our source code and P it into the container and into the Container image itself and",
    "start": "1163600",
    "end": "1171000"
  },
  {
    "text": "so now we can use that file in future commands such as running net restore and so they'll go ahead when that gets",
    "start": "1171000",
    "end": "1177640"
  },
  {
    "text": "executed it will download all the new get packages and all the versions that been defined in the project file and so",
    "start": "1177640",
    "end": "1183280"
  },
  {
    "text": "we now have that foundation for what the application needs the next stage is um",
    "start": "1183280",
    "end": "1189120"
  },
  {
    "text": "we need the application itself and then we need to build and publish the binaries as a",
    "start": "1189120",
    "end": "1194760"
  },
  {
    "text": "result the reason I split these two is quite important because we don't really want for every single build we don't",
    "start": "1194760",
    "end": "1202280"
  },
  {
    "text": "want to have to go back to newa and download all the packages if nothing's changed if our CSP file lists exactly",
    "start": "1202280",
    "end": "1210360"
  },
  {
    "text": "the same dependencies and the same versions as what um it was the last time",
    "start": "1210360",
    "end": "1216080"
  },
  {
    "text": "we built the container then nothing should have changed everything should be identical so having to go back and",
    "start": "1216080",
    "end": "1222679"
  },
  {
    "text": "download that maybe 5 Meg or maybe 50 meg of dependencies it's just going to add a lot of time to your build process",
    "start": "1222679",
    "end": "1229919"
  },
  {
    "text": "and it's just a lot of overhead which you don't need and so as part of this process Docker has caching built in and",
    "start": "1229919",
    "end": "1236440"
  },
  {
    "text": "so Docker is aware of the files um and their versions and if they have changed",
    "start": "1236440",
    "end": "1242200"
  },
  {
    "text": "or not and so when we do this copy if that file hasn't changed Docker will just refer back to the cache um and use",
    "start": "1242200",
    "end": "1249880"
  },
  {
    "text": "the cach version of The Run commands uh from the previous build and so in this case if the project hasn't changed net",
    "start": "1249880",
    "end": "1257559"
  },
  {
    "text": "restore will just use the C cached version until so we don't have to go off and redownload our dependencies so we",
    "start": "1257559",
    "end": "1263480"
  },
  {
    "text": "get much quicker build time our application thought code is likely to have changed and so that will invalidate",
    "start": "1263480",
    "end": "1269400"
  },
  {
    "text": "the cash on the next line and as such it will then rerun and rebuild uh reexecute",
    "start": "1269400",
    "end": "1274720"
  },
  {
    "text": "the Renning struction as we get newly built compiled binaries as a result and",
    "start": "1274720",
    "end": "1279919"
  },
  {
    "text": "these kind of structuring and thinking can have a huge impact on build times especially as you start scaling out to",
    "start": "1279919",
    "end": "1285240"
  },
  {
    "text": "different projects and different approaches so will now Define how we build we Simply Now need to say how to",
    "start": "1285240",
    "end": "1293279"
  },
  {
    "text": "execute and what is the metadata around our containers so uh what ports does our",
    "start": "1293279",
    "end": "1298440"
  },
  {
    "text": "container listen on and how did that application start in the first place and",
    "start": "1298440",
    "end": "1303480"
  },
  {
    "text": "by defining this within the image just gives us that standardization and that uh standard way of launching containers",
    "start": "1303480",
    "end": "1310480"
  },
  {
    "text": "without worrying about what technology it is on the inside if every time we got an image which we needed to deploy the",
    "start": "1310480",
    "end": "1317720"
  },
  {
    "text": "third step was we needed to look inside and figure out what te technology was and then look up how we actually launch",
    "start": "1317720",
    "end": "1323400"
  },
  {
    "text": "it that's going to add a lot of overheads that's going to start adding manual interventions or require",
    "start": "1323400",
    "end": "1328520"
  },
  {
    "text": "scripting and automation by having it baked into the image all of the information which we need to launch is",
    "start": "1328520",
    "end": "1335080"
  },
  {
    "text": "there and so we don't have to go off and think about how that works and then how that",
    "start": "1335080",
    "end": "1340279"
  },
  {
    "text": "operates so we've got this Docker file it lists our dependencies so we need to build and RN that and so when we do um",
    "start": "1340279",
    "end": "1347520"
  },
  {
    "text": "duck a build we give it a nice friendly name of um katacoda donet example we",
    "start": "1347520",
    "end": "1352600"
  },
  {
    "text": "give it our version number so we know what build we're actually referring to and we know what build we want to push out in this case 31 and then Docker will",
    "start": "1352600",
    "end": "1360360"
  },
  {
    "text": "run through every single step in our Docker file execute the commands and we will eventually get our build image",
    "start": "1360360",
    "end": "1367520"
  },
  {
    "text": "which has got everything our application needs so The NET Framework it's got all of our new get packages and our built",
    "start": "1367520",
    "end": "1373279"
  },
  {
    "text": "binaries as a result and then that launches in exactly the same way that we was winning things like Reddit",
    "start": "1373279",
    "end": "1379400"
  },
  {
    "text": "or um SQL Server this is the advantages that having this standardization and",
    "start": "1379400",
    "end": "1384919"
  },
  {
    "text": "this consistent way of launching and starting containers really add",
    "start": "1384919",
    "end": "1390320"
  },
  {
    "text": "value because whether it's a donet application whether it's a node application whether it's an F",
    "start": "1390320",
    "end": "1396799"
  },
  {
    "text": "application we still have this consistent experience from the outside and a consistent way of managing them",
    "start": "1396799",
    "end": "1403640"
  },
  {
    "text": "and this really simplifies the build pipeline too because we don't need our build agent to anything apart from know",
    "start": "1403640",
    "end": "1410640"
  },
  {
    "text": "how to communicate with docka and how to RN Docker build the build agents don't need to be configured with particular",
    "start": "1410640",
    "end": "1416360"
  },
  {
    "text": "Zions of particular Frameworks we don't need to start ring fence and build agents to Rend that Legacy application",
    "start": "1416360",
    "end": "1423080"
  },
  {
    "text": "which hasn't been touched but we need to be able to build and release it um and it runs on a particular old version of",
    "start": "1423080",
    "end": "1429240"
  },
  {
    "text": "net which nothing El does that can all be incapsulated and um defined by the",
    "start": "1429240",
    "end": "1435640"
  },
  {
    "text": "docker file and when you build the docker image all of that processing all of that version is happening within",
    "start": "1435640",
    "end": "1441480"
  },
  {
    "text": "containers itself so our cicd pipeline just",
    "start": "1441480",
    "end": "1446640"
  },
  {
    "text": "communicates with duck and now um calling things like Docker build Docker run run our unit tests and verify that",
    "start": "1446640",
    "end": "1453600"
  },
  {
    "text": "everything happens successfully and we start to see these consistent experiences and this is how",
    "start": "1453600",
    "end": "1459279"
  },
  {
    "text": "we Define node we still see the same pattern defining our base um",
    "start": "1459279",
    "end": "1464440"
  },
  {
    "text": "dependencies copying over package Json to Define what our dependen are um",
    "start": "1464440",
    "end": "1469480"
  },
  {
    "text": "installing and building and running in that consistent way but one thing you'll see is um these images start to get",
    "start": "1469480",
    "end": "1476559"
  },
  {
    "text": "quite large especially now we've built our done that application but it's also included all of our fdk tooling now this",
    "start": "1476559",
    "end": "1484159"
  },
  {
    "text": "is great from a build point of view but it exposes a security risk when we're winning in production because we don't",
    "start": "1484159",
    "end": "1490080"
  },
  {
    "text": "necessarily want a GCC compiler on our production servers cuz if anyone did",
    "start": "1490080",
    "end": "1495200"
  },
  {
    "text": "manage to um find an exploit they'd have all the tooling which they need in order to be download Force code compile it and",
    "start": "1495200",
    "end": "1501840"
  },
  {
    "text": "RN it and launch it on our systems so Docker has realized this and everything now corrected it and added this concept",
    "start": "1501840",
    "end": "1507640"
  },
  {
    "text": "of multi-stage builds and this allows us to take our existing Docker file which",
    "start": "1507640",
    "end": "1513120"
  },
  {
    "text": "we all know and love this will build our dependencies on applications um but at",
    "start": "1513120",
    "end": "1518760"
  },
  {
    "text": "the side effect is quite large like roughly 900 Meg and we can improve it",
    "start": "1518760",
    "end": "1523919"
  },
  {
    "text": "and so we can take uh a docka file and combine that with um something which is",
    "start": "1523919",
    "end": "1530720"
  },
  {
    "text": "much more streamlined um and so we can add this second stage to the process and the",
    "start": "1530720",
    "end": "1537279"
  },
  {
    "text": "second stage is a way to optimize how we want that container to be built and operating and running in production so",
    "start": "1537279",
    "end": "1544080"
  },
  {
    "text": "we've Define a second base image in this case we only need the runtime dependencies of net in order to launch",
    "start": "1544080",
    "end": "1551399"
  },
  {
    "text": "so this had been cut down all of that additional risk and all of that additional attack Vector because we",
    "start": "1551399",
    "end": "1557200"
  },
  {
    "text": "don't have the build tool in um in there again we Define things like working directories and how that",
    "start": "1557200",
    "end": "1563399"
  },
  {
    "text": "container image launches and then when we need add the binary we can copy it from the third stage the third stage",
    "start": "1563399",
    "end": "1570320"
  },
  {
    "text": "would had all of the build toolings and produce everything um and create this out directory can copy that from the",
    "start": "1570320",
    "end": "1576440"
  },
  {
    "text": "third stage into the second stage and that is what we'll launch and that's what we push into production and as a",
    "start": "1576440",
    "end": "1582440"
  },
  {
    "text": "result um what you'll see is you'll take a 900 Meg Docker image which has got",
    "start": "1582440",
    "end": "1588360"
  },
  {
    "text": "everything and that can be cut down and can be streamlined to something which is still um on the large side but it's a",
    "start": "1588360",
    "end": "1594559"
  },
  {
    "text": "lot more streamlined a lot more performing uh a lot more easier to deploy into production at 250 Meg",
    "start": "1594559",
    "end": "1601960"
  },
  {
    "text": "roughly and we'll see that now because how do you operate and how do you start pushing these things into production now",
    "start": "1601960",
    "end": "1607799"
  },
  {
    "text": "we've got our image built and we're ready and we want to scale out so the third thing is it needs to go somewhere",
    "start": "1607799",
    "end": "1614360"
  },
  {
    "text": "it needs in order to be from a build agent or from your Dev machine and pushed into somewhere that is accessible",
    "start": "1614360",
    "end": "1621440"
  },
  {
    "text": "from production and so you do this using Docker push Docker push will push it into a registry the registry which is",
    "start": "1621440",
    "end": "1629159"
  },
  {
    "text": "where all of the images are stored and so in this case it's pushing into the uh",
    "start": "1629159",
    "end": "1635159"
  },
  {
    "text": "public registry and making the image available publicly great for open source projects or Community ideas which you",
    "start": "1635159",
    "end": "1641240"
  },
  {
    "text": "want to share and make them easy to deploy one important thing to notice is it only pushes the layers which are",
    "start": "1641240",
    "end": "1648279"
  },
  {
    "text": "application have changed and this is where that layered file system really starts take into um account and benefit",
    "start": "1648279",
    "end": "1655320"
  },
  {
    "text": "we don't need to P the entire NET Framework because it's already on the registry that's where it came from and",
    "start": "1655320",
    "end": "1660880"
  },
  {
    "text": "so Docker is aware of this it checks to make sure and so only pushing the 14 Meg",
    "start": "1660880",
    "end": "1666840"
  },
  {
    "text": "um which is our application and our dependencies um and everything else is just taken care of from what became",
    "start": "1666840",
    "end": "1672279"
  },
  {
    "text": "before it and when when we do new builds and we um create new versions we'll push those in given a different verion name",
    "start": "1672279",
    "end": "1679480"
  },
  {
    "text": "and again it will only push the layers which have changed so that's where we get can get a lot of value from having",
    "start": "1679480",
    "end": "1685559"
  },
  {
    "text": "these optimized settings and if you go into the public registry go into catod",
    "start": "1685559",
    "end": "1691159"
  },
  {
    "text": "you'll see the beautiful application running um on the system and from a build cicd pipeline we",
    "start": "1691159",
    "end": "1698519"
  },
  {
    "text": "kind of walk through these steps we went from dock a build and which created the images and then when we started the",
    "start": "1698519",
    "end": "1704200"
  },
  {
    "text": "release process that involved a dock of push um and then when it we went to our",
    "start": "1704200",
    "end": "1710080"
  },
  {
    "text": "servers we do a Docker poll which would download everything and make it available for deploy for the Public",
    "start": "1710080",
    "end": "1716200"
  },
  {
    "text": "Image the public registry isn't very good for companies it's not very good because we don't really want to release",
    "start": "1716200",
    "end": "1722600"
  },
  {
    "text": "our source codes into the open world and so this is where you have hosted private",
    "start": "1722600",
    "end": "1727799"
  },
  {
    "text": "registers you can download them and run them locally on your machine or you can use things like Azure and let Azure and",
    "start": "1727799",
    "end": "1734519"
  },
  {
    "text": "Microsoft manage and make the registry available for you so the container registry it's very cool it's very easy",
    "start": "1734519",
    "end": "1740559"
  },
  {
    "text": "to work with and it fits natively and naturally into the rest of a Shore so",
    "start": "1740559",
    "end": "1745720"
  },
  {
    "text": "when you go in you go into the portal um and it asks you a few questions mainly what URL would you like",
    "start": "1745720",
    "end": "1753480"
  },
  {
    "text": "what DNS name would you like um and where would you like the location of your images to be so whichever data",
    "start": "1753480",
    "end": "1760320"
  },
  {
    "text": "centers you're particularly used to deploying to and then you create the registry and then um you'll get given",
    "start": "1760320",
    "end": "1768960"
  },
  {
    "text": "uh a DNS name which you selected in this case uh catod demo red one um bit of a",
    "start": "1768960",
    "end": "1774600"
  },
  {
    "text": "weird name but it seems to work you'll then have a login a username and a password and so this allows us to from",
    "start": "1774600",
    "end": "1781399"
  },
  {
    "text": "our command line log in um to the regory using the DNS which we entered using the",
    "start": "1781399",
    "end": "1787159"
  },
  {
    "text": "username and our super long super secure password which Azure provided for",
    "start": "1787159",
    "end": "1792200"
  },
  {
    "text": "us so now we have this Azure uh Azure container registry which is private and",
    "start": "1792200",
    "end": "1798279"
  },
  {
    "text": "only people which we've explicitly given access to can access our images and so",
    "start": "1798279",
    "end": "1804840"
  },
  {
    "text": "um in order to push our images we need to tell that image where to go and where that image should live and so by default",
    "start": "1804840",
    "end": "1811200"
  },
  {
    "text": "it goes to the public registry which is docker.io but we can change that and we can prefix the image name with a",
    "start": "1811200",
    "end": "1818159"
  },
  {
    "text": "particular uh registry URL in this case our private one and aure and when we do",
    "start": "1818159",
    "end": "1823360"
  },
  {
    "text": "a Docker push it will now push into that private registry um using authentication",
    "start": "1823360",
    "end": "1828640"
  },
  {
    "text": "tokens which we just logged in and then the image is available and we can see it in the UI um and that's now our process",
    "start": "1828640",
    "end": "1836120"
  },
  {
    "text": "so we now have it in Azure so now we need to deploy and this is where kubernetes and",
    "start": "1836120",
    "end": "1842880"
  },
  {
    "text": "complexity starts to be introduced because going to every single machine in",
    "start": "1842880",
    "end": "1847919"
  },
  {
    "text": "your cluster and running do run isn't the most effective way of deploying",
    "start": "1847919",
    "end": "1854080"
  },
  {
    "text": "applications this can introduce a lot of uncertainty in a lot of manual processing and it introduces a lot of uh",
    "start": "1854559",
    "end": "1864039"
  },
  {
    "text": "risk so we need a way in order to capsulate that risk and reduce it um and",
    "start": "1864720",
    "end": "1870440"
  },
  {
    "text": "have a more streamlined automated way of processing um running it and this is where container orchestration comes in",
    "start": "1870440",
    "end": "1877600"
  },
  {
    "text": "there's many different orchestration so you may have heard of things like Dr swarm which is uh doers native one um",
    "start": "1877600",
    "end": "1884039"
  },
  {
    "text": "things like dcos things like kubernetes and their responsibility is making sure that your containers are running in a",
    "start": "1884039",
    "end": "1891360"
  },
  {
    "text": "healthy reliable consistent way across multiple different machines and allowing",
    "start": "1891360",
    "end": "1896679"
  },
  {
    "text": "them and enabling them all to communicate and act if you if you have one big uh compute plane and making that",
    "start": "1896679",
    "end": "1903919"
  },
  {
    "text": "work and so let's look at what that actually looks like in reality so my one",
    "start": "1903919",
    "end": "1909360"
  },
  {
    "text": "of my personal favorite Technologies is kubernetes kubernetes defines itself as an open source system for automating",
    "start": "1909360",
    "end": "1916760"
  },
  {
    "text": "deployment scale in and management of containerized applications so it's kind",
    "start": "1916760",
    "end": "1921880"
  },
  {
    "text": "of sing our production level problems and making it making it easy for us to manage our applications which we have",
    "start": "1921880",
    "end": "1928320"
  },
  {
    "text": "just built and kubernetes was born from inside of the lessons which Google have",
    "start": "1928320",
    "end": "1934120"
  },
  {
    "text": "learned Google has been running containers for the last 10 years they've run everything from databases to um that",
    "start": "1934120",
    "end": "1941440"
  },
  {
    "text": "big data workloads to their search engines to Gmail to Maps everything",
    "start": "1941440",
    "end": "1946480"
  },
  {
    "text": "inside of Google runs as a container and you can imagine at Google scale they",
    "start": "1946480",
    "end": "1951919"
  },
  {
    "text": "have built some really interesting really unique ways of managing this across like 40,000 different data",
    "start": "1951919",
    "end": "1958880"
  },
  {
    "text": "centers and however many machines they have now and this system was called Bor and so bur is how Google ruins",
    "start": "1958880",
    "end": "1967159"
  },
  {
    "text": "containers and they produce a white paper which defined how they operate and some of the lessons which they've",
    "start": "1967159",
    "end": "1972279"
  },
  {
    "text": "learned um and how they actually manage that in reality and while right papers are really inter interesting to read",
    "start": "1972279",
    "end": "1978919"
  },
  {
    "text": "they're not as easy to implement in reality you have to do a lot of effort to go from a white paper to have",
    "start": "1978919",
    "end": "1985080"
  },
  {
    "text": "something running and so in order to be able to capture that and in order be to be able to make an impact Google decided",
    "start": "1985080",
    "end": "1991880"
  },
  {
    "text": "to launch kubernetes and start this open source project and so they took the",
    "start": "1991880",
    "end": "1996960"
  },
  {
    "text": "lessons which they've learned they made it applicable to uh a wider audience and",
    "start": "1996960",
    "end": "2002039"
  },
  {
    "text": "wider version uh applications and um approaches and then released it to the",
    "start": "2002039",
    "end": "2007919"
  },
  {
    "text": "Linux Foundation into a new foundation called Cloud native foundation and so it's not driven by Google Google don't",
    "start": "2007919",
    "end": "2014960"
  },
  {
    "text": "have a incentive to control it they've just given all of the IP all of the good",
    "start": "2014960",
    "end": "2020360"
  },
  {
    "text": "copyright all of the um responsibility to a third party independent nature and",
    "start": "2020360",
    "end": "2026639"
  },
  {
    "text": "what this means is other vendors and other companies are much more willing to adopt and uh work with the foundation",
    "start": "2026639",
    "end": "2035559"
  },
  {
    "text": "because they're not driving Google directly they're driving the community as a whole and so you see compan",
    "start": "2035559",
    "end": "2041200"
  },
  {
    "text": "companies like Microsoft and red hat putting a lot of weight and a lot of effort into kubernetes because it is a",
    "start": "2041200",
    "end": "2047559"
  },
  {
    "text": "Community Driven project and it has um that approach Google is still very much",
    "start": "2047559",
    "end": "2053320"
  },
  {
    "text": "involved if you go to the Google Cloud platform and you say want to run containers under the covers is all",
    "start": "2053320",
    "end": "2060440"
  },
  {
    "text": "kubernetes that you're dealing with and that you're managing and so Google is still very passionate still very enthusi",
    "start": "2060440",
    "end": "2066720"
  },
  {
    "text": "enthusiastic and still a major driver behind the project it's just that they've invited other people to the",
    "start": "2066720",
    "end": "2073000"
  },
  {
    "text": "party which is great from our point of view because we get to build uh build on the shoulders of many amazing companies",
    "start": "2073000",
    "end": "2080358"
  },
  {
    "text": "and its responsibility is to take this ocean of containers we have data Lakes so we may as well have oceans of",
    "start": "2080359",
    "end": "2087040"
  },
  {
    "text": "containers too and take all of these containers they all come into kubernetes and kubernetes responsibility is",
    "start": "2087040",
    "end": "2093679"
  },
  {
    "text": "figuring out what the best most optimal most healthy way to run those containers across multiple different hosts and",
    "start": "2093679",
    "end": "2100320"
  },
  {
    "text": "multiple different machines and with that it comes with some really Advanced really cool features things like",
    "start": "2100320",
    "end": "2105960"
  },
  {
    "text": "role-based access control so who is actually responsible and who is allowed to deploy and manage containers running",
    "start": "2105960",
    "end": "2112240"
  },
  {
    "text": "in production but not just who but also what context are they working in making",
    "start": "2112240",
    "end": "2117760"
  },
  {
    "text": "sure that team a can't interact or interfere with Team B's containers by mistake making sure that you can start",
    "start": "2117760",
    "end": "2125160"
  },
  {
    "text": "defining quoters around what um what teams are allowed to deploy and how much",
    "start": "2125160",
    "end": "2130960"
  },
  {
    "text": "resources they're allowed to be allocated and so you could start seeing companies build similar things to like",
    "start": "2130960",
    "end": "2136760"
  },
  {
    "text": "platforms other services and cloudlike nature within their own company and you",
    "start": "2136760",
    "end": "2141880"
  },
  {
    "text": "can say that like team a is allowed 20 gig of memory um and allowed um to",
    "start": "2141880",
    "end": "2149440"
  },
  {
    "text": "deploy thousands of applications well Team B is more constrained because it's a test environment or it's a staging",
    "start": "2149440",
    "end": "2154839"
  },
  {
    "text": "environment and so they only allowed a maximum of 2 gig so if something does go wrong or a process goes Rogue it doesn't",
    "start": "2154839",
    "end": "2162119"
  },
  {
    "text": "take down our cluster doesn't interfere or interact with other things written on the system at a host we see things like",
    "start": "2162119",
    "end": "2169560"
  },
  {
    "text": "auditing so if you need processes and you need tracking about what's being deployed within your system for like",
    "start": "2169560",
    "end": "2175079"
  },
  {
    "text": "Financial regulations for uh Etc then cetes is keeping a track and it's",
    "start": "2175079",
    "end": "2180880"
  },
  {
    "text": "keeping a list of all the events that are happening and you can see when versions are being upgraded when systems",
    "start": "2180880",
    "end": "2186839"
  },
  {
    "text": "are being scaled up and scale down also really helpful from a a uh debugging and",
    "start": "2186839",
    "end": "2192160"
  },
  {
    "text": "just an awareness of what's happening within your system can see who did what at what point in time and there's lots",
    "start": "2192160",
    "end": "2199040"
  },
  {
    "text": "of other features which are amazing one which I'm a particular fan of is batch X batch",
    "start": "2199040",
    "end": "2205560"
  },
  {
    "text": "execution ring containers is great most applications will be long lived there'll be databases or there'll be web servers",
    "start": "2205560",
    "end": "2212359"
  },
  {
    "text": "and we want them to run and if we deploy them we want them to be stay running and that's that's their aim and that's their",
    "start": "2212359",
    "end": "2219280"
  },
  {
    "text": "responsibility in life but sometimes as we enter into a world of big data we don't want long running Big Data",
    "start": "2219280",
    "end": "2225920"
  },
  {
    "text": "workloads what we want is short small optimized workloads but we want",
    "start": "2225920",
    "end": "2230960"
  },
  {
    "text": "thousands hundred tens of thousands of them and we want to be able to run as they manage and process this chunk of",
    "start": "2230960",
    "end": "2237400"
  },
  {
    "text": "data uh and when you're done just simply stop your execution and let uh give up",
    "start": "2237400",
    "end": "2243200"
  },
  {
    "text": "your space to the next process in the queue and this is what kuet is is designed to do kubus is is designed for",
    "start": "2243200",
    "end": "2250640"
  },
  {
    "text": "managing and scheduling workloads it's not just about long running web servers it's about what workloads require",
    "start": "2250640",
    "end": "2257640"
  },
  {
    "text": "execution and so we can um have our big data processes we can send them to",
    "start": "2257640",
    "end": "2263240"
  },
  {
    "text": "kubernetes and kubernetes will manage what resources are available on our cluster when a resource becomes",
    "start": "2263240",
    "end": "2269599"
  },
  {
    "text": "available it will deploy the workload and when that finish and the resources um are available again it will deploy",
    "start": "2269599",
    "end": "2275920"
  },
  {
    "text": "the next workload in our system really powerful when we start to think about things like GPU and how are how we",
    "start": "2275920",
    "end": "2283319"
  },
  {
    "text": "can make gpus available for big data and GPU will sit there in a server a server",
    "start": "2283319",
    "end": "2290000"
  },
  {
    "text": "may have eight of them depending on how uh passionate we are about our workloads and kubernetes will say like we can win",
    "start": "2290000",
    "end": "2296640"
  },
  {
    "text": "a maximum of eight workloads at any one point in time so we allocate those eight they'll use the GPU however they need um",
    "start": "2296640",
    "end": "2304520"
  },
  {
    "text": "and when they finish the next workload will be done and will be p and we start to build up this queue um and we don't",
    "start": "2304520",
    "end": "2310480"
  },
  {
    "text": "care where it's running we don't um worry about um how to make it run and",
    "start": "2310480",
    "end": "2316359"
  },
  {
    "text": "how to uh allocate that resource explicitly instead we just want to make sure that it's been run at some point in",
    "start": "2316359",
    "end": "2323000"
  },
  {
    "text": "time so kubernetes is really Advanced and really cool and this is where Azure fits into the picture so the Azure",
    "start": "2323000",
    "end": "2329560"
  },
  {
    "text": "container service is um the new offering for Microsoft and it's responsible for",
    "start": "2329560",
    "end": "2336119"
  },
  {
    "text": "running containers but the way it does this is by bootstrapping and deploying clusters",
    "start": "2336119",
    "end": "2344079"
  },
  {
    "text": "like kubernetes or swarm or DC and it does what aure is amazing app so",
    "start": "2344079",
    "end": "2349839"
  },
  {
    "text": "starting machines making them available ensuring that they're in the right availability sets configuring things",
    "start": "2349839",
    "end": "2355520"
  },
  {
    "text": "like low balancers um aing IP addresses but it doesn't do any more than that it",
    "start": "2355520",
    "end": "2360680"
  },
  {
    "text": "then lets kubernetes do what kubernetes is awesome out too which is managing workloads and scheduling workloads and",
    "start": "2360680",
    "end": "2367520"
  },
  {
    "text": "making sure that our containers keep running and so it's really a Best of Both Worlds and that's why I'm really excited about why Microsoft is heading",
    "start": "2367520",
    "end": "2374640"
  },
  {
    "text": "in this direction and so when we deploy uh when we Deploy kubernetes on top of",
    "start": "2374640",
    "end": "2381640"
  },
  {
    "text": "theour it will tell us and Define what the default uh configuration and setup",
    "start": "2381640",
    "end": "2388240"
  },
  {
    "text": "is that we need so we need a master which will manage all of the scheduling and manage all of the house and making",
    "start": "2388240",
    "end": "2394240"
  },
  {
    "text": "sure that what we've asked to run is actually running and then have nodes or agents",
    "start": "2394240",
    "end": "2399680"
  },
  {
    "text": "running and they will actually be the ones which do the workload that'll be the ones where the container is actually",
    "start": "2399680",
    "end": "2404720"
  },
  {
    "text": "running um and it's actually execut not and this is all structured within availability sets and so we can start",
    "start": "2404720",
    "end": "2411400"
  },
  {
    "text": "adding reliability if we lose an aure region then the container surface can cope with that and make sure that that's",
    "start": "2411400",
    "end": "2418040"
  },
  {
    "text": "uh been defined correctly and one of the really nice things about winning in Azure and winning with kubernetes is it",
    "start": "2418040",
    "end": "2424400"
  },
  {
    "text": "all integrates naturally it's aware that it's winning in side of the assur data center and so it knows how to in",
    "start": "2424400",
    "end": "2430800"
  },
  {
    "text": "interact and configure things like low balances and so we don't have to money go in and a sign IP addresses we can let",
    "start": "2430800",
    "end": "2437240"
  },
  {
    "text": "the process and let cogntive manage that and that's what we'll see so there's",
    "start": "2437240",
    "end": "2442319"
  },
  {
    "text": "three um there's three current container orchestrations available Docker swarm which is a native default um from Docker",
    "start": "2442319",
    "end": "2450240"
  },
  {
    "text": "which is very good uh it's got some really nice features got kubernetes which obviously is one I'm passionate",
    "start": "2450240",
    "end": "2457040"
  },
  {
    "text": "about and dcos which is awesome but you need to be at a certain scale I think uh I",
    "start": "2457040",
    "end": "2463119"
  },
  {
    "text": "feel in order to take maximum advantage of it and this is why I think kubernetes is in a Sweet Spot between both",
    "start": "2463119",
    "end": "2470119"
  },
  {
    "text": "alongside kubernetes there's an other project which I think is awesome too called open shift open shift is created",
    "start": "2470119",
    "end": "2476200"
  },
  {
    "text": "by Red Hat um and it takes kubernetes it's kubernetes and its covers but",
    "start": "2476200",
    "end": "2482359"
  },
  {
    "text": "they've added their own opinionation uh opinionated views on top of it and",
    "start": "2482359",
    "end": "2488040"
  },
  {
    "text": "delivered a cleaner out thebox experience and so we will manage things",
    "start": "2488040",
    "end": "2493200"
  },
  {
    "text": "about your entire workload process from start to finish and so it integrates",
    "start": "2493200",
    "end": "2498839"
  },
  {
    "text": "with Jenkins um so you can start building uh container",
    "start": "2498839",
    "end": "2505200"
  },
  {
    "text": "images it will then from Jenkin integration it will push it into its own",
    "start": "2505200",
    "end": "2510359"
  },
  {
    "text": "private registry internally so that's been managed and maintained for you and then because it's winning on top of",
    "start": "2510359",
    "end": "2515720"
  },
  {
    "text": "kubernetes it will scale out AC across multiple nodes multiple data centers and keep your application R it and then it",
    "start": "2515720",
    "end": "2522000"
  },
  {
    "text": "comes with all the security all the routing everything which you need in order to be able to run effectively and",
    "start": "2522000",
    "end": "2527440"
  },
  {
    "text": "in this it's just kubernetes and a lot of features which we see like role based Access Control",
    "start": "2527440",
    "end": "2533760"
  },
  {
    "text": "originally started within open shift and then Google uh sorry then redab pushed them upstream and made them available to",
    "start": "2533760",
    "end": "2540640"
  },
  {
    "text": "the rest of the community which I think is cool so I'm hoping that that will appear on uh the Azure container service",
    "start": "2540640",
    "end": "2547760"
  },
  {
    "text": "soon so let's say we want to deploy kubernetes let's say we want to go and we want to use Azure to bootstrap it and",
    "start": "2547760",
    "end": "2554559"
  },
  {
    "text": "so within the portal there's the Azure container service uh and the third option in which it asks you with what do",
    "start": "2554559",
    "end": "2561040"
  },
  {
    "text": "you actually want to deploy so drop down menu select kubernetes uh we're all good to go the next stage is we need to",
    "start": "2561040",
    "end": "2568000"
  },
  {
    "text": "configure the master so we need to configure the machine which is responsible for or managing order the",
    "start": "2568000",
    "end": "2575240"
  },
  {
    "text": "workloads within our system so we give it a DNS name so we can talk to it we give it um the public key of",
    "start": "2575240",
    "end": "2583240"
  },
  {
    "text": "SSH so we can log into it and then we deliver this strained service principle",
    "start": "2583240",
    "end": "2589079"
  },
  {
    "text": "which I'm not 100% confident about but I do know if you RN those four commands",
    "start": "2589079",
    "end": "2594880"
  },
  {
    "text": "then it will create you the username and password and from my understanding the way this is used is it's used in order",
    "start": "2594880",
    "end": "2601240"
  },
  {
    "text": "to be able to configure the assure low balancing and configure the Ure Azure",
    "start": "2601240",
    "end": "2607880"
  },
  {
    "text": "environment within kubernetes um and create that barrier and and create that integration with the Azure Cloud sh we",
    "start": "2607880",
    "end": "2614680"
  },
  {
    "text": "don't need anything stored we've got it all within the browser which is awesome and so you can take these commands and it will produce the information which we",
    "start": "2614680",
    "end": "2621520"
  },
  {
    "text": "desire and the next thing which we need before I move on is the master count so 3",
    "start": "2621520",
    "end": "2627680"
  },
  {
    "text": "1359 Masters just for reliability of purposes and depending on how large",
    "start": "2627680",
    "end": "2633079"
  },
  {
    "text": "you're managing uh you're anticipating your Clif to be will depend on how many",
    "start": "2633079",
    "end": "2638160"
  },
  {
    "text": "masses you expect I'd recommend running three if you're running across multiple data centers or multiple regions um",
    "start": "2638160",
    "end": "2645000"
  },
  {
    "text": "because if one goes down if you lose a region your system will still be up it will still be healthy and it'll still be",
    "start": "2645000",
    "end": "2650119"
  },
  {
    "text": "managed but for the purposes of experimentation one master is great and it will get you there um and solve your",
    "start": "2650119",
    "end": "2656960"
  },
  {
    "text": "problem the the next stage is then configuring the agent uh Define how many agents you want",
    "start": "2656960",
    "end": "2663440"
  },
  {
    "text": "so how many nodes will be processed in the workload depending on what you SC so you can start with one and you can",
    "start": "2663440",
    "end": "2669079"
  },
  {
    "text": "change it later which we'll see um Define what machine type or what size so",
    "start": "2669079",
    "end": "2674520"
  },
  {
    "text": "the standard DS uh 2 machine in aure and then what operating system so far uh",
    "start": "2674520",
    "end": "2681240"
  },
  {
    "text": "yeah we'll talk about that in a moment um and then Microsoft and aure will go off it will deploy and start all of the",
    "start": "2681240",
    "end": "2687559"
  },
  {
    "text": "machines which obviously aure is very good at and then deploy kubernetes and configure all and bootstrap all of that",
    "start": "2687559",
    "end": "2694400"
  },
  {
    "text": "commands and this we all done for the portal but we the like it's aure there's",
    "start": "2694400",
    "end": "2699440"
  },
  {
    "text": "an API for everything and so we can do it through the command line if we wished and so by using aure going to the ACs",
    "start": "2699440",
    "end": "2706920"
  },
  {
    "text": "and say create we give it what type of orchestrator we want in this case kubernetes uh and that will deploy our",
    "start": "2706920",
    "end": "2713240"
  },
  {
    "text": "cluster we can then install command line tooling for managing and interacting with uh the kubernetes cluster get the",
    "start": "2713240",
    "end": "2720000"
  },
  {
    "text": "credentials required uh and then uh that's everything we need and with the cloud sh uh running on the phone we can",
    "start": "2720000",
    "end": "2727440"
  },
  {
    "text": "do that from an iPhone if we want um on our train on the way into work and then by the time we get to work it's all been",
    "start": "2727440",
    "end": "2733400"
  },
  {
    "text": "happily deployed and everything's winning for us which is pretty awesome so we have our Azure has now",
    "start": "2733400",
    "end": "2741960"
  },
  {
    "text": "bootstrapped kubernetes for us and so we can either ssh in based on uh the public",
    "start": "2741960",
    "end": "2748680"
  },
  {
    "text": "key which we gave it or if you went through the command line we' have installed the client tool which is called called CU kle and can we we can",
    "start": "2748680",
    "end": "2756359"
  },
  {
    "text": "remote administrator um from our local machine either way perfectly acceptable",
    "start": "2756359",
    "end": "2761960"
  },
  {
    "text": "um and ifed I'd probably recommend downloading it locally because then you're not sshing into boxes but um the",
    "start": "2761960",
    "end": "2768920"
  },
  {
    "text": "choice is yours so the third thing that you can ask is like so You' booted up my cluster",
    "start": "2768920",
    "end": "2775200"
  },
  {
    "text": "so what are you aware about and you can say things like kubernetes get nodes or CU kle get nodes and it'll list the",
    "start": "2775200",
    "end": "2781839"
  },
  {
    "text": "master it list the agents which the aware of and what their status is so are they down are they um being configured",
    "start": "2781839",
    "end": "2789280"
  },
  {
    "text": "or are they ready to be um have workloads deployed on top of them which in Cas case they are so now deploying",
    "start": "2789280",
    "end": "2796960"
  },
  {
    "text": "workloads and a lot of the complexity about how it operates in the covers has kind of been hidden for us it's all",
    "start": "2796960",
    "end": "2803839"
  },
  {
    "text": "available and it's all happening under the covers if we want to go low level but from a high level we can simply say",
    "start": "2803839",
    "end": "2812079"
  },
  {
    "text": "um CU CLE run so very similar to Docker run give it the name of our deployment and what the project is which we we want",
    "start": "2812079",
    "end": "2818280"
  },
  {
    "text": "to run and the image which we want to be deployed in this case our uh net example",
    "start": "2818280",
    "end": "2823440"
  },
  {
    "text": "which we deployed uh deployed in earlier in the presentation or built earlier in",
    "start": "2823440",
    "end": "2828880"
  },
  {
    "text": "in the presentation and then we can ask kubernetes certain things about what the state of our cluster and what the state",
    "start": "2828880",
    "end": "2835160"
  },
  {
    "text": "of our deployments are things like get deployments so this will list everything which is running on our cluster and it",
    "start": "2835160",
    "end": "2841319"
  },
  {
    "text": "will list the version numbers which is why we see the desired and current state uh how many of the verion or how many of",
    "start": "2841319",
    "end": "2848000"
  },
  {
    "text": "the containers are up to date and running the particular verion we we want and how many are available and so we get some insight and",
    "start": "2848000",
    "end": "2855119"
  },
  {
    "text": "as we start scaling up we can see what that state is but in the covers fundamentally it's all R in containers",
    "start": "2855119",
    "end": "2861839"
  },
  {
    "text": "that's the process of what kuet is doing when we say Cube kle run we are",
    "start": "2861839",
    "end": "2867160"
  },
  {
    "text": "scheduling the workload we're scheduling this image to be deployed inside of our cluster kubernetes will then go like oh",
    "start": "2867160",
    "end": "2874160"
  },
  {
    "text": "cool I've got something which I need to do it will find the available node which uh which the workload needs in the case",
    "start": "2874160",
    "end": "2881599"
  },
  {
    "text": "of this we've only got one agent or one node so that's where the workload will be scheduled on it will tend to that",
    "start": "2881599",
    "end": "2887640"
  },
  {
    "text": "node that it needs to do something in this case launch the container and that's what kubernetes is managing and",
    "start": "2887640",
    "end": "2893359"
  },
  {
    "text": "wrapping up and making available for us for now we'll have our container started but we need to make it available to the",
    "start": "2893359",
    "end": "2899520"
  },
  {
    "text": "outside world and we do this with CLE expose we tell it what deployment we",
    "start": "2899520",
    "end": "2905760"
  },
  {
    "text": "want um the information about ports so our application is running on Port 5,000",
    "start": "2905760",
    "end": "2911319"
  },
  {
    "text": "so we say that all traffic all of the incoming requests should be targeted toward 5 5,000 but we can say actually",
    "start": "2911319",
    "end": "2919720"
  },
  {
    "text": "from the outside Viewpoint we want to hide that so ruin everything on Port 80 and so when requests come in on Port 80",
    "start": "2919720",
    "end": "2926200"
  },
  {
    "text": "send them to our application send them to this cluster um and all the traffic should go into P 5,000 and finally we",
    "start": "2926200",
    "end": "2933319"
  },
  {
    "text": "say type low balancer this means that it will go off to aure and configure the",
    "start": "2933319",
    "end": "2938640"
  },
  {
    "text": "low balance of forest Define an IP address um make sure that it's all ring in a secure nature um and then give us",
    "start": "2938640",
    "end": "2945680"
  },
  {
    "text": "back so we say get the services internally it will have an its own IP address but you'll see that it's pending",
    "start": "2945680",
    "end": "2952480"
  },
  {
    "text": "waiting for the low balancer to be configured and waiting for that IP address to be started and allocated and",
    "start": "2952480",
    "end": "2958559"
  },
  {
    "text": "so after a few moments um the IP address will appear in this case",
    "start": "2958559",
    "end": "2965200"
  },
  {
    "text": "40856 and and we can now send request to that we could update our DNS we could add a c name um and give it a nice",
    "start": "2965520",
    "end": "2972200"
  },
  {
    "text": "pretty URL and that will now start responding to requests from our",
    "start": "2972200",
    "end": "2977400"
  },
  {
    "text": "application and if we go to Azure go to our kubernetes cluster go to the mod",
    "start": "2977400",
    "end": "2982680"
  },
  {
    "text": "appropriate pod and that is what will get uh processed and now everything we",
    "start": "2982680",
    "end": "2988880"
  },
  {
    "text": "send more requests everything will be responded to from our container but ring one process isn't very interesting so we",
    "start": "2988880",
    "end": "2995559"
  },
  {
    "text": "can now start scaling up and scaling our workloads so coup could all scale and say we need three replicas we need three",
    "start": "2995559",
    "end": "3002359"
  },
  {
    "text": "instances of this application R in across our cluster and under the covers",
    "start": "3002359",
    "end": "3007480"
  },
  {
    "text": "again cuetes will go I need to schedule some workloads find the most available nodes if we had three nodes within our",
    "start": "3007480",
    "end": "3014280"
  },
  {
    "text": "cluster it would deploy one instance onto each in a spread mentality to try and make it as available and um uh",
    "start": "3014280",
    "end": "3022400"
  },
  {
    "text": "available as possible in case we lose um that node or an application crashed for example and then we'll have three pods",
    "start": "3022400",
    "end": "3029520"
  },
  {
    "text": "three containers running uh all with their own unique names and end the",
    "start": "3029520",
    "end": "3034680"
  },
  {
    "text": "coverage this is also updated and configured our low balancer it's aware of what the state of",
    "start": "3034680",
    "end": "3040160"
  },
  {
    "text": "our cluster is it's aware of what's running and it's aware of how we so it to expose our service and so um when we",
    "start": "3040160",
    "end": "3047839"
  },
  {
    "text": "started in this IP address using curl we'll get Round Rob into each of the available pods in our system now",
    "start": "3047839",
    "end": "3056920"
  },
  {
    "text": "okay from the system and so with these commands we could take um our Azure",
    "start": "3056920",
    "end": "3062440"
  },
  {
    "text": "container service our running kubernetes cluster deploy our application with the",
    "start": "3062440",
    "end": "3067680"
  },
  {
    "text": "particular image um expose it and make it available with the Azure low balancer and then use",
    "start": "3067680",
    "end": "3074640"
  },
  {
    "text": "get service to get that external IP address and find out what's been allocated or we could go through the",
    "start": "3074640",
    "end": "3080160"
  },
  {
    "text": "Azure portal it's all listed and they already find it in there and so we can make it available and now we can start",
    "start": "3080160",
    "end": "3085680"
  },
  {
    "text": "scaling it or got and start scaling down um our our application but as we're doing this like",
    "start": "3085680",
    "end": "3092839"
  },
  {
    "text": "we've currently got only got one agent so what happens if it goes down like how does our system start responding and the",
    "start": "3092839",
    "end": "3099400"
  },
  {
    "text": "chances are we want more than one agent and we want more than one thing on our uh system and so through the Azure",
    "start": "3099400",
    "end": "3106280"
  },
  {
    "text": "portal Azure as I mentioned is managing the infrastructure or is managing and",
    "start": "3106280",
    "end": "3111599"
  },
  {
    "text": "making sure that these machines are available so we can set the agent count to be whatever we need we can scale this",
    "start": "3111599",
    "end": "3117319"
  },
  {
    "text": "up and scale this down as required so in this case we're saying um we need two",
    "start": "3117319",
    "end": "3123119"
  },
  {
    "text": "once that's been saved um aour will start spinning up an add an additional",
    "start": "3123119",
    "end": "3129440"
  },
  {
    "text": "machine and now it also knows how to configure kubernetes so we add that new node into",
    "start": "3129920",
    "end": "3135720"
  },
  {
    "text": "the cluster um that node will then get configured and iterated and uh",
    "start": "3135720",
    "end": "3141079"
  },
  {
    "text": "initialize and after 2 minutes or so we'll have that additional agent available so makes it really easy and",
    "start": "3141079",
    "end": "3147839"
  },
  {
    "text": "simplified to add additional workloads and additional effort what we need in order to meet our demands when that",
    "start": "3147839",
    "end": "3154839"
  },
  {
    "text": "demand has gone we can scale it back down again and so now when in our",
    "start": "3154839",
    "end": "3162079"
  },
  {
    "text": "system and now we've got this additional agent we can scale our application we can say we need six replicas and then uh",
    "start": "3162079",
    "end": "3169720"
  },
  {
    "text": "it will start issuing that workload initially we'll say like we've only got three available because the image hasn't",
    "start": "3169720",
    "end": "3175720"
  },
  {
    "text": "been downloaded and has mid started yet but you can see youve got that mixture between what we Des we desire and what",
    "start": "3175720",
    "end": "3182119"
  },
  {
    "text": "we actually have available after a few moments when it's been initialized you'll see everything deployed",
    "start": "3182119",
    "end": "3189480"
  },
  {
    "text": "um the cube will go from uh 3 to six um and our system and our low balancers",
    "start": "3189480",
    "end": "3195480"
  },
  {
    "text": "will operate across two different versions so now we've got our application working what about deploying",
    "start": "3195480",
    "end": "3202119"
  },
  {
    "text": "new versions and again Azure Azure and kubernetes is there to manage for us and",
    "start": "3202119",
    "end": "3207720"
  },
  {
    "text": "so in our system Cube Cod all set image give it the name of what the deployment",
    "start": "3207720",
    "end": "3213200"
  },
  {
    "text": "we want to be updated give it the new version of our image which we want to be deployed and then kubernetes will do a",
    "start": "3213200",
    "end": "3219599"
  },
  {
    "text": "rolling update of our application and so it'll make sure that we don't lose capacity we don't lose any uh downtime",
    "start": "3219599",
    "end": "3229200"
  },
  {
    "text": "uh with our deployment instead it will go to each pod and it will replace it it will stop the previous version start the",
    "start": "3229200",
    "end": "3235480"
  },
  {
    "text": "new pod uh start the new container and then launch it and make it available um in the low Baner and so as we're doing",
    "start": "3235480",
    "end": "3242160"
  },
  {
    "text": "sending requests um you'll see it being po popped and kind of uh spread across",
    "start": "3242160",
    "end": "3249480"
  },
  {
    "text": "these different versions until is completely rolled out until seamlessly from the user's point of view but what",
    "start": "3249480",
    "end": "3256280"
  },
  {
    "text": "about the isure registry at the moment we just said deploy the one from public images so where does the isure container",
    "start": "3256280",
    "end": "3262640"
  },
  {
    "text": "registry come in and so um we need first to tell it about some secrets we need to",
    "start": "3262640",
    "end": "3268720"
  },
  {
    "text": "give it some um username and password so it can go off to the registry um and",
    "start": "3268720",
    "end": "3274559"
  },
  {
    "text": "actually get access to our images and so kubernetes has all of the secrets management uh and all of the security",
    "start": "3274559",
    "end": "3281760"
  },
  {
    "text": "built in and so you're storing in that highly secured way using command line or",
    "start": "3281760",
    "end": "3287000"
  },
  {
    "text": "using um different approaches but in this case we can say create a secret um of type dock registry and this can be",
    "start": "3287000",
    "end": "3293400"
  },
  {
    "text": "our username and password in order to be able to go off um um and pull our images",
    "start": "3293400",
    "end": "3299319"
  },
  {
    "text": "and the covers as I said you can use the command line or you can do it the low level Way by default this is all based",
    "start": "3299319",
    "end": "3305920"
  },
  {
    "text": "on yaml and you can see things about how that application is configured and some of the conventions which cuets have put",
    "start": "3305920",
    "end": "3313440"
  },
  {
    "text": "in place so how many replicas do we need we're currently at six but we could go in and change this up and down what's",
    "start": "3313440",
    "end": "3319240"
  },
  {
    "text": "the rolling update strategy so when we say update our image how should that work and how should that operate how",
    "start": "3319240",
    "end": "3325119"
  },
  {
    "text": "quickly should we um change each image should we wait a certain amount of time for the application to start and become",
    "start": "3325119",
    "end": "3331720"
  },
  {
    "text": "available before we move on to the next one and then we can point it to our image um so our private registry we can",
    "start": "3331720",
    "end": "3340640"
  },
  {
    "text": "tell it uh how to access it um using image pull secrets so it knows which",
    "start": "3340640",
    "end": "3346240"
  },
  {
    "text": "authentication and know which username and password to use and then when we deploy this it will go off to our",
    "start": "3346240",
    "end": "3351960"
  },
  {
    "text": "private registry but work in exactly the same way that it did before and kubernetes now allows us to do some",
    "start": "3351960",
    "end": "3358559"
  },
  {
    "text": "really interesting work and particularly around um things like the event Loop and",
    "start": "3358559",
    "end": "3364119"
  },
  {
    "text": "managing our deployments so we've got this yaml which is the definition in the covers but this allows us to issue and",
    "start": "3364119",
    "end": "3371119"
  },
  {
    "text": "schedule diff different types of workloads so let's say from a monitoring point of view um we have a monitor which",
    "start": "3371119",
    "end": "3378319"
  },
  {
    "text": "needs to be deployed under every single agent within our cluster um so that we can track and monitor things",
    "start": "3378319",
    "end": "3383839"
  },
  {
    "text": "successfully so now with kubernetes you can say this is the type of a demon set a demon set is a container which",
    "start": "3383839",
    "end": "3390599"
  },
  {
    "text": "deployed onto every single host within our system and so when in aour we said",
    "start": "3390599",
    "end": "3396280"
  },
  {
    "text": "added that new agent the demon set would have automatically been deployed and auto automatically been made available",
    "start": "3396280",
    "end": "3402760"
  },
  {
    "text": "within our system and so we wouldn't have had to explicitly go in and configure and bring up certain uh",
    "start": "3402760",
    "end": "3408480"
  },
  {
    "text": "workloads it would have just happened for US based on what kubernetes is aware of what our desired State should be and",
    "start": "3408480",
    "end": "3415200"
  },
  {
    "text": "this is where we start getting some really interesting um approaches and some really interesting um",
    "start": "3415200",
    "end": "3421160"
  },
  {
    "text": "capabilities we also now have Windows containers like we have Linux containers at the beginning but with SQL uh Windows",
    "start": "3421160",
    "end": "3427920"
  },
  {
    "text": "Server 2016 we can run Windows containers uh within the docker file",
    "start": "3427920",
    "end": "3433599"
  },
  {
    "text": "when they get built they'll do things like um you can Define dependencies but like Windows dependencies so I we can",
    "start": "3433599",
    "end": "3441280"
  },
  {
    "text": "install window features like the asp.net framework we can configure how I works",
    "start": "3441280",
    "end": "3446640"
  },
  {
    "text": "and operates um in this case creating a new website called nerd dinner and just like we did with Linux um and uh Linux",
    "start": "3446640",
    "end": "3454480"
  },
  {
    "text": "containers we can copy source code in in this case the nerd dinner from uh May",
    "start": "3454480",
    "end": "3460119"
  },
  {
    "text": "2010 the traditional asp.net 2 example application but we can now build it as a",
    "start": "3460119",
    "end": "3466240"
  },
  {
    "text": "container completely untouched completely independent using the same tooling and same approach duck build but",
    "start": "3466240",
    "end": "3472839"
  },
  {
    "text": "now we're targeting windows and we're targeting and configuring a Windows container and windows functionality such",
    "start": "3472839",
    "end": "3479200"
  },
  {
    "text": "as I can be launched and it can be operated and we have our beautiful uh ASP",
    "start": "3479200",
    "end": "3486000"
  },
  {
    "text": "application running as containers but more importantly it can be operated and it can be worked in exactly the same way",
    "start": "3486000",
    "end": "3492760"
  },
  {
    "text": "within aure we've got another drop down saying uh the operating system and we can select windows and so now we our",
    "start": "3492760",
    "end": "3499880"
  },
  {
    "text": "cluster can start operating and working in a hybrid fashion it can manage our new shiny uh or some application built",
    "start": "3499880",
    "end": "3507280"
  },
  {
    "text": "with ASP 2 uh as. K or Elixir or anything rning on Linux and exactly the",
    "start": "3507280",
    "end": "3514720"
  },
  {
    "text": "same way it operates and manages our traditional applications run on things like I and asp.net",
    "start": "3514720",
    "end": "3521240"
  },
  {
    "text": "2.0 and having this themess themeless transparent experience between the two",
    "start": "3521240",
    "end": "3526480"
  },
  {
    "text": "and using the same tooling the same conventions and the same approaches and in order to scale those up and scale",
    "start": "3526480",
    "end": "3532039"
  },
  {
    "text": "those down and I think that's a really interesting proposition about where um this can um start heading and I think",
    "start": "3532039",
    "end": "3539079"
  },
  {
    "text": "this is what we're going to start seeing with containers as we move forward we already have SQL Server wining out the",
    "start": "3539079",
    "end": "3544480"
  },
  {
    "text": "container now and so we simplified how that looks and how that feels and how we can operate that um both in development",
    "start": "3544480",
    "end": "3550680"
  },
  {
    "text": "and production but what about development time what about things like Visual Studio as a container like why do",
    "start": "3550680",
    "end": "3556920"
  },
  {
    "text": "we download and install uh download 5 gig of the installation files to spend",
    "start": "3556920",
    "end": "3562160"
  },
  {
    "text": "an hour having it set up and configure itself to then only need another dat or",
    "start": "3562160",
    "end": "3567440"
  },
  {
    "text": "override or interact with other Visual Studio installations already on our system and so we can't work with things",
    "start": "3567440",
    "end": "3572880"
  },
  {
    "text": "side by side if those operated as a container they would be completely independent they wouldn't interactive",
    "start": "3572880",
    "end": "3579000"
  },
  {
    "text": "with the rry and we can run different versions seamlessly side by side without them interacting and when an update does",
    "start": "3579000",
    "end": "3585280"
  },
  {
    "text": "get applied we' simply download the image download the new layer and that would work gets ruin and as get started",
    "start": "3585280",
    "end": "3592440"
  },
  {
    "text": "and we're now finally starting to see this come into um interaction so this is Eclipse the new version of Eclipse which",
    "start": "3592440",
    "end": "3599720"
  },
  {
    "text": "uh is significantly better than the old versions and it's significantly changed about how it gets deployed when you go",
    "start": "3599720",
    "end": "3605920"
  },
  {
    "text": "onto the eclipse website the getting started and the installation is Docker run",
    "start": "3605920",
    "end": "3611240"
  },
  {
    "text": "eclipse the entire IDE and entire insulation experience is based around",
    "start": "3611240",
    "end": "3616640"
  },
  {
    "text": "containers it's based on how we can keep things sandboxed and isolated but still",
    "start": "3616640",
    "end": "3622400"
  },
  {
    "text": "run in a really interesting uh desired workflow state so just to",
    "start": "3622400",
    "end": "3631079"
  },
  {
    "text": "summarize we have containers we have containers which can simplify uh our",
    "start": "3631400",
    "end": "3636640"
  },
  {
    "text": "deployment process be it eclipse or be it SQL server or something like reddish",
    "start": "3636640",
    "end": "3642480"
  },
  {
    "text": "we've got this consistent experience about how they can be launched how they can built and how they can be operated",
    "start": "3642480",
    "end": "3647640"
  },
  {
    "text": "and so we don't need to configure build agents anymore because all of that complexity sits within the docker file",
    "start": "3647640",
    "end": "3653480"
  },
  {
    "text": "itself and that's where we Define what our appliation needs and Define how our applications are",
    "start": "3653480",
    "end": "3659400"
  },
  {
    "text": "built once we start scaling this out we've got tooling like kubernetes which",
    "start": "3659400",
    "end": "3664559"
  },
  {
    "text": "can help manage and scale these applications across multiple different agents um configuring the low balances",
    "start": "3664559",
    "end": "3670599"
  },
  {
    "text": "as required making them available making them secure and ensuring that if they do crash or if a node goes down that",
    "start": "3670599",
    "end": "3676880"
  },
  {
    "text": "workload is rescheduled somewhere else to make sure we're not losing availability or capacity by building",
    "start": "3676880",
    "end": "3683359"
  },
  {
    "text": "this and deploying it on top of aour we can take advantage of what aour is really good at which is starting and",
    "start": "3683359",
    "end": "3689000"
  },
  {
    "text": "configuring and bootstrapping infrastructure and then let kubernetes and our workflow fit on top of that",
    "start": "3689000",
    "end": "3695039"
  },
  {
    "text": "without uh is having to reinvent a wheel or use different third party Technologies and then when it comes to",
    "start": "3695039",
    "end": "3700839"
  },
  {
    "text": "things like monitoring uh kubernetes can manage uh that workload we can deploy",
    "start": "3700839",
    "end": "3706240"
  },
  {
    "text": "these demon sets which get executed across all of our nodes and so when new",
    "start": "3706240",
    "end": "3712279"
  },
  {
    "text": "things happen and when new agents are deployed they automatically fit within our monitoring system because",
    "start": "3712279",
    "end": "3718359"
  },
  {
    "text": "automatically they have the right configuration and the right settings being deployed onto them and so we can",
    "start": "3718359",
    "end": "3723400"
  },
  {
    "text": "monitor our applications across the entire thing and so with that I'd like to thank you there m for your time and",
    "start": "3723400",
    "end": "3729119"
  },
  {
    "text": "for attending I'd love to hear your feedback about if you're playing with kubernetes and you get started what you",
    "start": "3729119",
    "end": "3734960"
  },
  {
    "text": "think how did it work how did it work for you and if you have any questions please do feel free to reach out and",
    "start": "3734960",
    "end": "3740359"
  },
  {
    "text": "send me an email or drop me a tweet or catch me at the drinks later and with that thank you very much I I hope you",
    "start": "3740359",
    "end": "3746160"
  },
  {
    "text": "enjoy the rest of the conference [Applause]",
    "start": "3746160",
    "end": "3751479"
  }
]