[
  {
    "text": "all right let try it again yay perfect hey we're good we're going uh okay well thank you very much uh for coming along",
    "start": "6040",
    "end": "13000"
  },
  {
    "text": "I'm amazed to see so many people for a final session of the day it's I'm sure been a long day um lots of good content",
    "start": "13000",
    "end": "19439"
  },
  {
    "text": "um I'm hoping we've all got an hour left in us uh I'll try and keep it kind of fun and light uh my name is Steve I'm a",
    "start": "19439",
    "end": "25720"
  },
  {
    "text": "Microsoft MVP uh Pro author and engineer at elastic uh you can find me online I'm",
    "start": "25720",
    "end": "31199"
  },
  {
    "text": "stevej Gordon on most of the social media platforms I spend most of my time still on Twitter I won't call it X um",
    "start": "31199",
    "end": "38680"
  },
  {
    "text": "and uh but I am on the other one so you can kind of reach out for any of those channels um I blog at stevej gordon.",
    "start": "38680",
    "end": "44640"
  },
  {
    "text": "co.uk um and on there you'll find some blog posts that kind of tie back to some of the stuff that I'm going to cover",
    "start": "44640",
    "end": "49879"
  },
  {
    "text": "today kind of going a bit deeper um into the internals of some of the stuff that we're going to be looking at so if you",
    "start": "49879",
    "end": "55559"
  },
  {
    "text": "head over there afterwards if you're interested and search like hosted Services you'll find um and content there as",
    "start": "55559",
    "end": "61359"
  },
  {
    "text": "well um this session is based uh pretty heavily on a plight course that I've got out um you can see that course is sort",
    "start": "61359",
    "end": "68520"
  },
  {
    "text": "of written around Net 6 time frame very little has changed we've got one new interface and a couple of new options",
    "start": "68520",
    "end": "74400"
  },
  {
    "text": "that I'll run through today but otherwise that course is still very current um you can see that course is 2",
    "start": "74400",
    "end": "79560"
  },
  {
    "text": "hours 46 minutes we're not going to sit for 2 hours and 46 minutes you'll be pleased to know um what I've tried to do",
    "start": "79560",
    "end": "84759"
  },
  {
    "text": "is distill down the bits that I think are most useful to understand about how some of this stuff hangs together and",
    "start": "84759",
    "end": "90119"
  },
  {
    "text": "how we can build practical um background services in these tools but if you want to kind of get the full depth afterwards",
    "start": "90119",
    "end": "97439"
  },
  {
    "text": "if you do have a plight subscription um you can go to this link here and you'll be able to access the course or if you",
    "start": "97439",
    "end": "103079"
  },
  {
    "text": "just search Steve G Steve Gordon I remember my name Steve Gordon on the search bar um then you'll find all of my",
    "start": "103079",
    "end": "109280"
  },
  {
    "text": "content there as well so I want to start by talking about a thing that's called The Host um uh we",
    "start": "109280",
    "end": "116479"
  },
  {
    "text": "should probably start with a definition of that because host is a heavily overloaded in computers uh and software",
    "start": "116479",
    "end": "123719"
  },
  {
    "text": "engineering I'm specifically talking about the host from the Microsoft extensions hosting package so a new get",
    "start": "123719",
    "end": "129399"
  },
  {
    "text": "package that we can bring into uh net applications um uh to give them this host capability and what the host",
    "start": "129399",
    "end": "136760"
  },
  {
    "text": "ultimately does is turn traditional console applications into long running",
    "start": "136760",
    "end": "142160"
  },
  {
    "text": "Services um you might be using this fairly often without even necessarily paying that much attention to it in aspn",
    "start": "142160",
    "end": "148280"
  },
  {
    "text": "net core asp.net core applications today are just console applications at the heart they start up with this host",
    "start": "148280",
    "end": "154959"
  },
  {
    "text": "concept and that starts things like the kestal web server which starts listening on a certain port or ports and then the",
    "start": "154959",
    "end": "160840"
  },
  {
    "text": "requests flow through the pipeline and that's obviously something that you want to live for a fairly long time uh fairly",
    "start": "160840",
    "end": "166440"
  },
  {
    "text": "indefinitely um as it serving requests to your users so that depends on the exact same Concepts and features that",
    "start": "166440",
    "end": "172720"
  },
  {
    "text": "we'll be building on top of shortly those same concepts are also available in a package uh or a template I should",
    "start": "172720",
    "end": "179200"
  },
  {
    "text": "say called worker Services um and this enables us to kind of Leverage this host concept to build long running workloads",
    "start": "179200",
    "end": "185760"
  },
  {
    "text": "so maybe data processing workloads Q processing um or data sort of analysis workloads that we might want to fire up",
    "start": "185760",
    "end": "192120"
  },
  {
    "text": "and have them run either indefinitely if they're polling cues constantly or for at least a fairly am long amount of time",
    "start": "192120",
    "end": "199200"
  },
  {
    "text": "to do some kind of unit of work these can be deployed as you might expect with traditional dnet",
    "start": "199200",
    "end": "205159"
  },
  {
    "text": "applications we can obviously run the ex executable directly or deploy that somewhere that we can do so",
    "start": "205159",
    "end": "210519"
  },
  {
    "text": "um the most common way that you would be thinking about deploying uh particularly worker Services is using containers it's",
    "start": "210519",
    "end": "216920"
  },
  {
    "text": "extremely convenient to be able to containerize uh net applications on top of the net runtime image uh and then we",
    "start": "216920",
    "end": "223560"
  },
  {
    "text": "can deploy these into any kind of container orchestration environment and scale them according to the workloads",
    "start": "223560",
    "end": "228959"
  },
  {
    "text": "that you have um and this kind of concept of joining aspet core and worker Services together can be used to build",
    "start": "228959",
    "end": "235239"
  },
  {
    "text": "sort of microservice based kind of event driven architectures um very easily and if you deploy the containers the",
    "start": "235239",
    "end": "241200"
  },
  {
    "text": "orchestration of starting those up and keeping those running together is pretty straightforward um they can still be",
    "start": "241200",
    "end": "246400"
  },
  {
    "text": "used in the sort of more traditional sense of a long running service so actually as a Windows service or a Linux Damon um to do that there's an",
    "start": "246400",
    "end": "253040"
  },
  {
    "text": "additional package that you can bring in for each of those that gives some additional capabilities about managing the lifetime in those scenarios I won't",
    "start": "253040",
    "end": "260079"
  },
  {
    "text": "be touching on that here it is covered in the course if you're interested but to be honest I steer everyone towards",
    "start": "260079",
    "end": "265360"
  },
  {
    "text": "containers as the right way to be thinking about deploying these units of work",
    "start": "265360",
    "end": "270440"
  },
  {
    "text": "um the hosting Library itself integrates very nicely with uh the DI configuration and logging extensions packages as well",
    "start": "270440",
    "end": "277280"
  },
  {
    "text": "in fact it kind of depends on them um it uses di as its mechanism for registering itself and some of its dependent",
    "start": "277280",
    "end": "283520"
  },
  {
    "text": "lifetime Management Services it uses the configuration system so you can configure the host through the aspnet",
    "start": "283520",
    "end": "290039"
  },
  {
    "text": "core configuration system things like app settings. Json or environment variables and it will use the ilogger um",
    "start": "290039",
    "end": "296440"
  },
  {
    "text": "sort of abstractions as well from Microsoft so you pull in this could you get all of those as part of the",
    "start": "296440",
    "end": "301880"
  },
  {
    "text": "workload and ultimately what this thing is doing is managing the life cycle and the lifetime of your app so making sure",
    "start": "301880",
    "end": "308000"
  },
  {
    "text": "that at startup we're starting up this host that's going to trigger the startup of any of our background services our",
    "start": "308000",
    "end": "313800"
  },
  {
    "text": "units of work that we want to uh run it's going to keep the application alive um until a shutdown signal is re read in",
    "start": "313800",
    "end": "321319"
  },
  {
    "text": "and then it can trigger a graceful shutdown of the application for you and there are various I call them events they're not sort of events in the",
    "start": "321319",
    "end": "327360"
  },
  {
    "text": "classic net definition of an event um but as we'll see when we look at the code and there are various events that",
    "start": "327360",
    "end": "332759"
  },
  {
    "text": "we can hook into to understand where our app is in that life cycle and finally it's responsible for starting uh any",
    "start": "332759",
    "end": "340120"
  },
  {
    "text": "hosted or background services that we've created I'm going to use those two terms kind of interchangeably hosted Services",
    "start": "340120",
    "end": "346080"
  },
  {
    "text": "is the name of the interface background Services is the name of the abstract um class that implements that interface and",
    "start": "346080",
    "end": "352080"
  },
  {
    "text": "we'll be using both of those uh very soon um so actually I'm going to dive",
    "start": "352080",
    "end": "357880"
  },
  {
    "text": "straight into code I've got relatively few slides um you'll probably be pleased to hear and I'd rather spend some time",
    "start": "357880",
    "end": "363400"
  },
  {
    "text": "looking at how this stuff is kind of hanging together practically so I'm going to just do um",
    "start": "363400",
    "end": "369039"
  },
  {
    "text": "to prove I'm not cheating um I'm just going to do a net new uh console app to prove that we are literally starting um",
    "start": "369039",
    "end": "375120"
  },
  {
    "text": "with a console application um from the heart for all of this stuff to",
    "start": "375120",
    "end": "380319"
  },
  {
    "text": "work once that's uh created the project uh we'll switch into that",
    "start": "380319",
    "end": "387680"
  },
  {
    "text": "um no it's not called that into that directory and then we first thing we",
    "start": "387680",
    "end": "394160"
  },
  {
    "text": "need to do is add the Microsoft extensions hosting package that we're going to be using so I'll add that in",
    "start": "394160",
    "end": "401599"
  },
  {
    "text": "there and that's all restored fortunately so now um we're kind of ready to go now I'm going to switch to visual studio now though now you know",
    "start": "401639",
    "end": "407840"
  },
  {
    "text": "that I've been able to create this thing without cheating uh we'll jump to visual studio if I get the right window and",
    "start": "407840",
    "end": "413720"
  },
  {
    "text": "we'll open up that project and we'll just take a look at",
    "start": "413720",
    "end": "419360"
  },
  {
    "text": "what the default template of a console application is many of you have probably seen this and then we'll look at how we can turn this into a sort of long",
    "start": "419360",
    "end": "425879"
  },
  {
    "text": "running application and of course Visual Studio is not",
    "start": "425879",
    "end": "433080"
  },
  {
    "text": "responding there we go I thinking I was going to have to try and describe code to you which wouldn't be fun um so when",
    "start": "433479",
    "end": "439720"
  },
  {
    "text": "we open this up if I just expand uh packages here we'll see that obviously we've got the package that we added and",
    "start": "439720",
    "end": "445240"
  },
  {
    "text": "if I drop that down then we can see of course we're getting all of those additional libraries I mentioned being pulled in so all of the default",
    "start": "445240",
    "end": "450879"
  },
  {
    "text": "configuration stuff uh the DI stuff and the logging stuff there um and then this",
    "start": "450879",
    "end": "456039"
  },
  {
    "text": "is at the moment just a regular kind of top level statements um console application I'm going to run it I'm sure",
    "start": "456039",
    "end": "462599"
  },
  {
    "text": "pretty much 99% of us have seen this demo um being run but I I like to start at the very beginning here and it also",
    "start": "462599",
    "end": "469680"
  },
  {
    "text": "tests that Visual Studio builds this thing",
    "start": "469680",
    "end": "473199"
  },
  {
    "text": "properly and very slowly apparently for one line of code",
    "start": "475199",
    "end": "481440"
  },
  {
    "text": "okay so a traditional console app we've printed hello world and then the the process has terminated we've got an exit",
    "start": "482360",
    "end": "488159"
  },
  {
    "text": "code um and our work is done in this app because this essentially a main method here has finished its work so as our",
    "start": "488159",
    "end": "495360"
  },
  {
    "text": "first job let's turn this into a long running application and we're going to bring in the Microsoft extensions uh",
    "start": "495360",
    "end": "502879"
  },
  {
    "text": "hosting stuff that we need and I'm also going to be using some stuff from Microsoft extensions at dependency",
    "start": "502879",
    "end": "509520"
  },
  {
    "text": "injection as well and then um we need a host uh we need to create this thing called a host now there's a definition",
    "start": "509520",
    "end": "515760"
  },
  {
    "text": "of a host in the library which is an ihost interface that a host is meant to implement we're not going to create our",
    "start": "515760",
    "end": "521440"
  },
  {
    "text": "own implementation of that we're going to use the one that ships in the box and it's referred to by Microsoft sometimes as the generic host um generic because",
    "start": "521440",
    "end": "528240"
  },
  {
    "text": "it can be used to both host the aspnet core applications as well as these regular worker service type applications",
    "start": "528240",
    "end": "534200"
  },
  {
    "text": "uh we don't create it uh by neing up directly what we do is use a host application Builder",
    "start": "534200",
    "end": "540040"
  },
  {
    "text": "um and we're going to use that to create our host so when we call this uh host uh",
    "start": "540040",
    "end": "547399"
  },
  {
    "text": "static class here we can get to these three possible methods to uh create this host application Builder this top one is",
    "start": "547399",
    "end": "553360"
  },
  {
    "text": "the one we're going to use this B basically creates a an application Builder that's going to be preconfigured with things like all of the stuff that",
    "start": "553360",
    "end": "559120"
  },
  {
    "text": "we're going to need to load configuration from the default sources like environment variables and app settings. Json if you don't want that",
    "start": "559120",
    "end": "565760"
  },
  {
    "text": "behavior you could use this empty Builder down here which will give you the same thing but just with about any of that preconfigured stuff so if you",
    "start": "565760",
    "end": "571320"
  },
  {
    "text": "really want to start from scratch which is pretty rare um you can do that this create default Builder here is actually",
    "start": "571320",
    "end": "576920"
  },
  {
    "text": "a legacy option you can see it returns not an application Builder but an ihost Builder this is a sort of legacy of how",
    "start": "576920",
    "end": "583399"
  },
  {
    "text": "this uh framework has evolved over time and it's there for backwards compatibility but generally you want the",
    "start": "583399",
    "end": "589000"
  },
  {
    "text": "host this create application Builder here because that's actually um much easier to configure it relies a lot less",
    "start": "589000",
    "end": "594920"
  },
  {
    "text": "on callbacks and things to set it up then we can create a host using this",
    "start": "594920",
    "end": "600000"
  },
  {
    "text": "I'm not actually going to do any useful workload just yet so we're just actually going to immediately build our host we're not going to configure it with",
    "start": "600000",
    "end": "605440"
  },
  {
    "text": "anything additional and once we've got our host we can do uh an await um H run",
    "start": "605440",
    "end": "611519"
  },
  {
    "text": "async on that we use run async doesn't really matter if you choose run or run Ayn at this point because it's you know",
    "start": "611519",
    "end": "617079"
  },
  {
    "text": "we're at the end of this method it doesn't matter if we we block here NE necessarily but that's all we need to do",
    "start": "617079",
    "end": "622760"
  },
  {
    "text": "to R register the host Concepts and make this app a long running app so now if I build this application you can see it",
    "start": "622760",
    "end": "628959"
  },
  {
    "text": "hasn't immediately exited it's done some logging to the built-in ey logger which has got the console logger attached to",
    "start": "628959",
    "end": "634839"
  },
  {
    "text": "it and we can see that logging is coming from this hosting lifetime stuff so we notify that the app started up we can",
    "start": "634839",
    "end": "641760"
  },
  {
    "text": "control C in this application is shut down so this default lifetime here is what's referred to as the console lifetime so it also registers that when",
    "start": "641760",
    "end": "649200"
  },
  {
    "text": "we have certain key presses that will trigger the graceful shutdown picks up the hosting environment as production",
    "start": "649200",
    "end": "654639"
  },
  {
    "text": "which is the assumed default unless you configure that and we haven't configured that anywhere and then we get the ENT roote path and if we do what it suggests",
    "start": "654639",
    "end": "661320"
  },
  {
    "text": "and do contrl c of course we break out of that long running application uh the application shuts down and then the",
    "start": "661320",
    "end": "667440"
  },
  {
    "text": "process exits so that's already just turned this console app into something that's long running it's not doing",
    "start": "667440",
    "end": "672800"
  },
  {
    "text": "anything useful just yet but before we kind of actually build out some hosted Services I want to kind of just show a",
    "start": "672800",
    "end": "679639"
  },
  {
    "text": "few bits about these internals and how things are hanging together here so we've got this interface called",
    "start": "679639",
    "end": "685480"
  },
  {
    "text": "ihost and if I can navigate to the definition of that then we can look at this pretty simple definition of what a",
    "start": "685480",
    "end": "691120"
  },
  {
    "text": "host has to provide the first thing it exposes here is this um service provider",
    "start": "691120",
    "end": "696160"
  },
  {
    "text": "through the services property so when the host is being configured we have access to the service collection just as",
    "start": "696160",
    "end": "702320"
  },
  {
    "text": "you do in hnet core to add services to the collection and then when the host is being built that service collection gets",
    "start": "702320",
    "end": "708040"
  },
  {
    "text": "turned into a service provider a DI container that we can resolve services from and that's added onto the host so",
    "start": "708040",
    "end": "714200"
  },
  {
    "text": "that we can access it if we need to so while it's reasonably rare from here where we have access to the host we",
    "start": "714200",
    "end": "719880"
  },
  {
    "text": "could do actually if I store this just for later uh we could do host. services.",
    "start": "719880",
    "end": "725560"
  },
  {
    "text": "getet required service and I'll I'll just get a host application lifetime um service that I",
    "start": "725560",
    "end": "732279"
  },
  {
    "text": "know is in the container by default that's registered as part of the hosting framework and so it's just that easy to",
    "start": "732279",
    "end": "737360"
  },
  {
    "text": "to access services so before we run this host it is possible to pull out this uh services from this de built di container",
    "start": "737360",
    "end": "744600"
  },
  {
    "text": "if you want to do any setup work so maybe you need to access some databases do some preinitialization of some data",
    "start": "744600",
    "end": "750320"
  },
  {
    "text": "you could do this here before you trigger that run host which actually starts the host up returning to the",
    "start": "750320",
    "end": "756000"
  },
  {
    "text": "interface um two methods they're pretty self-explanatory start async is about starting the host up um it triggers the",
    "start": "756000",
    "end": "763279"
  },
  {
    "text": "host start which then triggers uh going in and starting up the hosted services that we're going to be creating and I I",
    "start": "763279",
    "end": "768720"
  },
  {
    "text": "won't dive into the code there but I will just drop over to um GitHub and we",
    "start": "768720",
    "end": "773839"
  },
  {
    "text": "look at just a small portion of this start async method um It's relatively complex but it's it's mostly um just",
    "start": "773839",
    "end": "780560"
  },
  {
    "text": "about how it orders stuff so initially it creates a cancellation token source and it kind of basically ties together",
    "start": "780560",
    "end": "786320"
  },
  {
    "text": "three possible um reasons for canceling this startup there could be a token passed into start asnc which is",
    "start": "786320",
    "end": "792519"
  },
  {
    "text": "extremely rare but there could be one from a user from us in our code that would they might want to treat a cancellation of the startup there's also",
    "start": "792519",
    "end": "799920"
  },
  {
    "text": "a token here that's accessed on the application lifetime interface that we'll look at shortly called application",
    "start": "799920",
    "end": "805800"
  },
  {
    "text": "stopping and so if anything triggers that something like control C for example Le then that triggers the shutdown of this startup process and um",
    "start": "805800",
    "end": "813560"
  },
  {
    "text": "potentially there's a startup timeout configured which controls how long this app has to start up by default um it",
    "start": "813560",
    "end": "820760"
  },
  {
    "text": "doesn't have a limit and so there won't be an imposed startup Timeout on there",
    "start": "820760",
    "end": "826040"
  },
  {
    "text": "but basically further down it's going to call into the DI container and resolve any instances of um this IH hosted",
    "start": "826040",
    "end": "833079"
  },
  {
    "text": "service and we'll look at that interface in a minute because we'll be implementing it but it's going to find all registered uh instances of that in",
    "start": "833079",
    "end": "839480"
  },
  {
    "text": "the DI container and then a little bit further down it's going to for each basically over those and call the start",
    "start": "839480",
    "end": "845320"
  },
  {
    "text": "async method on each of those hosted services so as part of startup it's starting up any hosted Services which are our units of work that we're going",
    "start": "845320",
    "end": "852160"
  },
  {
    "text": "to be creating um by default that's sequential but you can configure concurrent and we'll look at again how",
    "start": "852160",
    "end": "857600"
  },
  {
    "text": "that that has an effect on how our code runs um stop acing again fairly",
    "start": "857600",
    "end": "863199"
  },
  {
    "text": "self-explanatory it's basically about shutting down gracefully so by default there's a shutdown time out of 30",
    "start": "863199",
    "end": "869120"
  },
  {
    "text": "seconds configured and that allows 30 seconds for any of our user code to be notified of shutting down and then try",
    "start": "869120",
    "end": "875240"
  },
  {
    "text": "and shut down finish any workloads we're doing before the application terminates um you can extend the time out if you",
    "start": "875240",
    "end": "880839"
  },
  {
    "text": "want to um but otherwise that's all a host is really",
    "start": "880839",
    "end": "886240"
  },
  {
    "text": "defining the way we configure those options there's a type in here called host options and if I just dive into",
    "start": "886240",
    "end": "892160"
  },
  {
    "text": "what that is this is the options type that gets bound from the configuration system in in net um and you can see the",
    "start": "892160",
    "end": "899040"
  },
  {
    "text": "the default shutdown timeout for this is 30 seconds so we can configure a different timeout if we need it for our",
    "start": "899040",
    "end": "904320"
  },
  {
    "text": "application the startup timeout is basically infinite or not configured um so an application will take as long as",
    "start": "904320",
    "end": "910959"
  },
  {
    "text": "it needs to to start up it's sometimes useful to set that because you might have you know some database",
    "start": "910959",
    "end": "916360"
  },
  {
    "text": "initialization work but if it hasn't completed in a reasonable amount of time maybe you do want to have bought the",
    "start": "916360",
    "end": "921399"
  },
  {
    "text": "startup of that particular instance um so that you can log the event and then go and look at why that happened we've",
    "start": "921399",
    "end": "927639"
  },
  {
    "text": "got these two properties about and these are new in net 8 um services start concurrently and stop concurrently so",
    "start": "927639",
    "end": "933160"
  },
  {
    "text": "this is about configuring how those IH hosted services are triggered um and we'll look at how we can uh affect those",
    "start": "933160",
    "end": "939120"
  },
  {
    "text": "later these default are for so actually everything will start up sequentially each hosted service will start in turn",
    "start": "939120",
    "end": "944800"
  },
  {
    "text": "and have to complete its startup before the next one that's just historic um that's how it used to work and they've",
    "start": "944800",
    "end": "950600"
  },
  {
    "text": "preserved that behavior in net 8 but we do have a configuration switch to set it up so that we can say actually fire off",
    "start": "950600",
    "end": "956399"
  },
  {
    "text": "all our hosted service startups um once they've all completed the app is ready and that can improve your startup time",
    "start": "956399",
    "end": "962759"
  },
  {
    "text": "and your shutdown time a little bit the final option here is about um managing what happens if there's unhandled",
    "start": "962759",
    "end": "968560"
  },
  {
    "text": "exceptions in our user code so in our background services our units of work that we'll be creating if if we don't",
    "start": "968560",
    "end": "974480"
  },
  {
    "text": "handle Exceptions there what should happen if one bubbles up and by default the host is going to stop in that",
    "start": "974480",
    "end": "980000"
  },
  {
    "text": "scenario because it assumes that it's hit some kind of critical scenario that means the host can't really do its job",
    "start": "980000",
    "end": "985319"
  },
  {
    "text": "um and so it's actually going to be stopped the other option there is ignore and so you might choose to do that it's",
    "start": "985319",
    "end": "991240"
  },
  {
    "text": "possible sometimes that you expect certain exceptions to occur but you want other background services to continue",
    "start": "991240",
    "end": "996959"
  },
  {
    "text": "running for a while um and you could manage that in your code depending on what's the right scenario for",
    "start": "996959",
    "end": "1002160"
  },
  {
    "text": "you um so we're going to configure this briefly so there's a couple of ways that we can do configuration in net um one",
    "start": "1002160",
    "end": "1008360"
  },
  {
    "text": "option here is on the Builder we can just configure this directly and if we access the services here the I service",
    "start": "1008360",
    "end": "1013639"
  },
  {
    "text": "collection there's a configure method that we can use to basically do Post configuration of any um bound types and",
    "start": "1013639",
    "end": "1021240"
  },
  {
    "text": "so in here we could just do options startup time out equals time span uh from say 5 seconds and then we've",
    "start": "1021240",
    "end": "1029280"
  },
  {
    "text": "configured a startup time on this app of 5 Seconds for all of those hostage services to start up successfully or we",
    "start": "1029280",
    "end": "1035120"
  },
  {
    "text": "consider that a failure the other option that we've got um if I can find my Mouse um is that we can go in here and we can",
    "start": "1035120",
    "end": "1041400"
  },
  {
    "text": "add and you've probably seen this um you've probably seen this uh in applications you're working on um an app",
    "start": "1041400",
    "end": "1048199"
  },
  {
    "text": "settings. J file did I create",
    "start": "1048199",
    "end": "1055000"
  },
  {
    "text": "that um and then we just name this app setting so this is a pre sort of determined name that the hosting",
    "start": "1060960",
    "end": "1067000"
  },
  {
    "text": "framework looks for and the configuration system looks for in our applications because I've added this manually I need to make sure it would be",
    "start": "1067000",
    "end": "1073440"
  },
  {
    "text": "copied to my output directory um and then in this we can also use this as a",
    "start": "1073440",
    "end": "1079000"
  },
  {
    "text": "mechanism of configuring things so here I could do uh host",
    "start": "1079000",
    "end": "1085159"
  },
  {
    "text": "options we create in here we have a shutdown",
    "start": "1085159",
    "end": "1090240"
  },
  {
    "text": "timeout uh and for example we could set the shutdown timeout to be 15 seconds in this application so both options are",
    "start": "1090760",
    "end": "1097440"
  },
  {
    "text": "valid ways of configuring this thing um and this allows us to control how this host is actually going to",
    "start": "1097440",
    "end": "1103080"
  },
  {
    "text": "function uh let me just check I've covered everything I wanted to talk about there I have so now we've built",
    "start": "1103080",
    "end": "1109400"
  },
  {
    "text": "our host we're then ready to run it and we saw that the host had start async and stop async but we don't have a run async",
    "start": "1109400",
    "end": "1115679"
  },
  {
    "text": "so where's that come from well that comes from this extension method uh and that's going to call the host start",
    "start": "1115679",
    "end": "1122039"
  },
  {
    "text": "async on our behalf so that triggers the start up of the host and the startup of all those IH hosted services and then it",
    "start": "1122039",
    "end": "1128640"
  },
  {
    "text": "triggers uh or falls into this wait for shutdown so this is essentially what's going to keep this application alive now",
    "start": "1128640",
    "end": "1133840"
  },
  {
    "text": "permanently uh until a shutdown signal um is reached and this wait for shutdown um it's pretty straightforward um it",
    "start": "1133840",
    "end": "1141240"
  },
  {
    "text": "accesses the services to get this ihost application lifetime thing so let's have a look at that",
    "start": "1141240",
    "end": "1147360"
  },
  {
    "text": "interface so this is the thing that allows us to kind of control and manage uh or not get notified of events within",
    "start": "1147360",
    "end": "1153720"
  },
  {
    "text": "the host lifetime uh system so you can see one option we have on here is that there's a a method we can call called",
    "start": "1153720",
    "end": "1159600"
  },
  {
    "text": "stop applications so we can inject this thing wherever we want to in our application and in code we can",
    "start": "1159600",
    "end": "1164640"
  },
  {
    "text": "programmatically tell the app to shut down so we could use that if an exceptions from that we can't handle or",
    "start": "1164640",
    "end": "1169919"
  },
  {
    "text": "we've maybe finished our workload uh that we wanted to run these tokens here uh the three cancellation tokens they're",
    "start": "1169919",
    "end": "1176320"
  },
  {
    "text": "not really they are used as cancellation tokens in a few places but they're also kind of used in a weird way to provide a",
    "start": "1176320",
    "end": "1182320"
  },
  {
    "text": "kind of messaging or event system when these things occur in code so we can actually register delegates against the",
    "start": "1182320",
    "end": "1188440"
  },
  {
    "text": "cancellation token and in a few places that's done to trigger other things to happen and it's happening inside the",
    "start": "1188440",
    "end": "1193919"
  },
  {
    "text": "host framework automatically um but we can also do things like on the host here",
    "start": "1193919",
    "end": "1199640"
  },
  {
    "text": "we could do um sorry on the lifetime that I've pulled from di we can do um on the application started we could",
    "start": "1199640",
    "end": "1205200"
  },
  {
    "text": "register a delegate here um that we want to run um and we could just do in our case",
    "start": "1205200",
    "end": "1211039"
  },
  {
    "text": "we'll just do a console right line uh we just say hello um and if I",
    "start": "1211039",
    "end": "1216320"
  },
  {
    "text": "now run this application we're going to see that once this application starts up we get the default sort of logging from",
    "start": "1216320",
    "end": "1222600"
  },
  {
    "text": "uh the host framework but then once the application had finished starting up it canceled that cancellation token as a",
    "start": "1222600",
    "end": "1228679"
  },
  {
    "text": "effort to notify anyone that cared that the application had started up and so then our delegate on that registration",
    "start": "1228679",
    "end": "1234080"
  },
  {
    "text": "ran um can be useful um it's it's obviously not that useful to log uh or write out",
    "start": "1234080",
    "end": "1241200"
  },
  {
    "text": "to the console but certain uses for this would be maybe that you want to have um observability type events occur when",
    "start": "1241200",
    "end": "1247440"
  },
  {
    "text": "your app starts up and when it stops so you can see we've got started it successfully started stopping it's about",
    "start": "1247440",
    "end": "1253039"
  },
  {
    "text": "to stop and stopped that it has kind of stopped everything that was running and so application started and stopped if",
    "start": "1253039",
    "end": "1258799"
  },
  {
    "text": "you had a notification going out to a system um you could then track which how many of these things you have got running in your environment how long",
    "start": "1258799",
    "end": "1265280"
  },
  {
    "text": "they've been running for and other potentially useful information um about the lifetime of those applications so that's one possible use case for",
    "start": "1265280",
    "end": "1271559"
  },
  {
    "text": "registering those things um that's that and then I'll just",
    "start": "1271559",
    "end": "1278080"
  },
  {
    "text": "dive back and show you the rest of this weight for shutdown async method so the first thing it does is there's again a",
    "start": "1278080",
    "end": "1283840"
  },
  {
    "text": "cancellation that could have been passed into run async and eventually start async and then here um this token is",
    "start": "1283840",
    "end": "1289960"
  },
  {
    "text": "generally not set but what this code does is register but when that token cancels if it's present then that",
    "start": "1289960",
    "end": "1295760"
  },
  {
    "text": "triggers the stop application to be invoked on that ihost application lifetime so if someone's trying to cancel startup then we basically trigger",
    "start": "1295760",
    "end": "1302679"
  },
  {
    "text": "the stop of the application that's generally not going to happen um but this code here is what keeps the app",
    "start": "1302679",
    "end": "1307880"
  },
  {
    "text": "alive so it creates the task completion Source um and then it registers to the application stopping cancellation token",
    "start": "1307880",
    "end": "1315159"
  },
  {
    "text": "it registers a delegate here that basically takes in that task complete source and will set the result on it if",
    "start": "1315159",
    "end": "1321600"
  },
  {
    "text": "application stopping is cancelled so it's a slightly weird use of cancellation tokens um but this will be",
    "start": "1321600",
    "end": "1327000"
  },
  {
    "text": "triggered as soon as like control C for example is received by the console lifetime that triggers this application",
    "start": "1327000",
    "end": "1332840"
  },
  {
    "text": "stopping event and as soon as that cancels then this result will be set and what that means is that this await here",
    "start": "1332840",
    "end": "1338919"
  },
  {
    "text": "is just going to await a task that's just going to be sitting there um asynchronously waiting for probably an",
    "start": "1338919",
    "end": "1344600"
  },
  {
    "text": "indefinite amount of time until someone shuts down the app and as soon as that happens that triggers this task",
    "start": "1344600",
    "end": "1349799"
  },
  {
    "text": "completion source to complete um and then this code continues and the next thing it does is then stop the",
    "start": "1349799",
    "end": "1355440"
  },
  {
    "text": "application so it's all kind of asynchronous based um and that's kind of how everything's kept alive behind the",
    "start": "1355440",
    "end": "1361559"
  },
  {
    "text": "scenes um let's see that's probably probably enough of the internals so what",
    "start": "1361559",
    "end": "1366840"
  },
  {
    "text": "I'm going to do now is actually try and do a semi-useful workload with this app because right now it starts up and does",
    "start": "1366840",
    "end": "1372080"
  },
  {
    "text": "nothing so I'm going to add a class to this uh that I'm going to call time",
    "start": "1372080",
    "end": "1377279"
  },
  {
    "text": "service um I'm just going to be because I'm really fussy um and I prefer file scope Nam spaces to tweak those I'm",
    "start": "1377279",
    "end": "1384120"
  },
  {
    "text": "going to accept uh from Di and I logger into here uh and we'll just store that into a",
    "start": "1384120",
    "end": "1392120"
  },
  {
    "text": "field also going to be pedantic and rename that field um so",
    "start": "1392120",
    "end": "1398039"
  },
  {
    "text": "this is one of the primary Constructors which is quite a nice feature of uh recent. net and then the thing that we",
    "start": "1398039",
    "end": "1403480"
  },
  {
    "text": "want to implement is that host uh hosted Service uh interface that we saw earlier",
    "start": "1403480",
    "end": "1409440"
  },
  {
    "text": "so this is the thing that the host is going to be looking for from the DI container and starting up for us and so as you might expect it has its own start",
    "start": "1409440",
    "end": "1415799"
  },
  {
    "text": "acing can stop acing methods for when the app starting and for when the app's stopping I'm just going to put in a a dummy implementation here that's just",
    "start": "1415799",
    "end": "1422559"
  },
  {
    "text": "going to do a completed task so actually not going to do anything useful and then in here we need to start off our long",
    "start": "1422559",
    "end": "1428559"
  },
  {
    "text": "running work and I'm going to start doing this a few of you might immediately notice an immediate bad bad",
    "start": "1428559",
    "end": "1434640"
  },
  {
    "text": "bad thing that's going to happen in here um don't worry don't point it out to me I am aware of it but let's just see what",
    "start": "1434640",
    "end": "1439880"
  },
  {
    "text": "goes wrong um and then we'll make this work properly so I'm just going to be a good citizen and I'll throw if this",
    "start": "1439880",
    "end": "1444960"
  },
  {
    "text": "cancellation token is requested I'll log um some information uh the time",
    "start": "1444960",
    "end": "1451120"
  },
  {
    "text": "is time we'll do a time only from date",
    "start": "1451120",
    "end": "1456720"
  },
  {
    "text": "time date time oops date time",
    "start": "1456720",
    "end": "1462120"
  },
  {
    "text": "dot auto complete is choosing odd things for me today uh that'll do um so we pass",
    "start": "1462120",
    "end": "1468480"
  },
  {
    "text": "ing the time to the logger and then I'm going to just set this work to to Loop basically um every two seconds so I'm",
    "start": "1468480",
    "end": "1475559"
  },
  {
    "text": "going to do a task. delay here of 2000 I'll pass in the cancellation token here so again we'll try and be good citizens",
    "start": "1475559",
    "end": "1481880"
  },
  {
    "text": "with async um and so looks like we might have got our long running work that's going to be started by the host and",
    "start": "1481880",
    "end": "1487240"
  },
  {
    "text": "everything's going to work um it won't but let's um see why in a minute now before I register this I just want to",
    "start": "1487240",
    "end": "1493240"
  },
  {
    "text": "create a duplicate service so we can just look at some other things that are going on as well",
    "start": "1493240",
    "end": "1498840"
  },
  {
    "text": "so by default I've created two background Services two units of background work I want to kick off um",
    "start": "1498840",
    "end": "1504039"
  },
  {
    "text": "the the host knows nothing about these yet so we need to register these with the di container in order for it to be aware of them so if I do builder.",
    "start": "1504039",
    "end": "1510520"
  },
  {
    "text": "Services there's a method here uh which is specifically designed for this um and we can use that to",
    "start": "1510520",
    "end": "1518760"
  },
  {
    "text": "register these uh implementations and I might as well just copy this one so I",
    "start": "1518760",
    "end": "1523840"
  },
  {
    "text": "can register uh both of these now be by by default as I said uh hosted services",
    "start": "1523840",
    "end": "1529799"
  },
  {
    "text": "will start up in sequence rather than concurrently it's configurable but if you don't configure it it's by sequence",
    "start": "1529799",
    "end": "1536000"
  },
  {
    "text": "and the order will be determined by how we've registered them so this one will get triggered first and this one second",
    "start": "1536000",
    "end": "1541640"
  },
  {
    "text": "because of the order they're registered into di if I jump in here I'll just stick uh breakpoint here",
    "start": "1541640",
    "end": "1548840"
  },
  {
    "text": "and down here in both of the start ASN methods and we'll run this code so our app hopefully will start up",
    "start": "1548840",
    "end": "1557039"
  },
  {
    "text": "uh our first breakpoint here here has been hit so start aink has run and that looks good we get some logging so far looking good and then it all goes",
    "start": "1557039",
    "end": "1563440"
  },
  {
    "text": "horribly wrong so two things happened here that we might not have expected the first um is reasonably obvious because",
    "start": "1563440",
    "end": "1569919"
  },
  {
    "text": "I've told you that this is sequential so uh this one started it we saw that breako being hit but this one never did",
    "start": "1569919",
    "end": "1576279"
  },
  {
    "text": "get hit um and the reason is that this start a Inc never returns it never returns a task it just starts doing some",
    "start": "1576279",
    "end": "1582520"
  },
  {
    "text": "long running work and kind of keeps going what we want to do is pass back a task um that says we started a workload",
    "start": "1582520",
    "end": "1589200"
  },
  {
    "text": "but we kind of started a background workload um and you can carry on the reason this has thrown an exception is",
    "start": "1589200",
    "end": "1594320"
  },
  {
    "text": "we triggered or we start uh configured a startup time out of 5 Seconds earlier on",
    "start": "1594320",
    "end": "1599399"
  },
  {
    "text": "and so after 5 Seconds the app went well you you haven't you haven't finished with this start acing method yet so you",
    "start": "1599399",
    "end": "1604600"
  },
  {
    "text": "haven't started the host and so if we look at the um output here we never saw",
    "start": "1604600",
    "end": "1609760"
  },
  {
    "text": "any of the hosts logging that we've seen previously saying the application started and we just get this failed to",
    "start": "1609760",
    "end": "1615080"
  },
  {
    "text": "start message so we've hit our timeout because basically we screwed up the code here so this is expecting us to trigger",
    "start": "1615080",
    "end": "1621120"
  },
  {
    "text": "a long running background workload not just do long running work immediately and start async so I'm going to copy",
    "start": "1621120",
    "end": "1626520"
  },
  {
    "text": "this and I'm going to do uh task. run here now this is still not like a great practice so don't copy this um but what",
    "start": "1626520",
    "end": "1633600"
  },
  {
    "text": "I'm going to do here is um just paste in that long running work",
    "start": "1633600",
    "end": "1639080"
  },
  {
    "text": "that we've got uh into basically a fire for getet you don't really want to be doing fire and forget on tasks but we",
    "start": "1639080",
    "end": "1644640"
  },
  {
    "text": "can do um so we're creating a task by triggering task. Run we're just ignoring or forgetting about that task um and",
    "start": "1644640",
    "end": "1651640"
  },
  {
    "text": "then we're letting our application run so once we've created that there's no actual async code in this method so I'm",
    "start": "1651640",
    "end": "1658320"
  },
  {
    "text": "going to now return uh task uh completed task and that's our",
    "start": "1658320",
    "end": "1664279"
  },
  {
    "text": "start method now redefined so we we're firing this task off on the background it will get scheduled on the threadpool",
    "start": "1664279",
    "end": "1669440"
  },
  {
    "text": "somewhere and then we're just saying okay we started up um we've got no way of being notified if there's exceptions",
    "start": "1669440",
    "end": "1675200"
  },
  {
    "text": "thrown in there we've got no way of stopping that workload um so it's not great um but we'll see now that actually",
    "start": "1675200",
    "end": "1682480"
  },
  {
    "text": "if I copy that into both my task uh both of my background services and run this app again then we should see that indeed",
    "start": "1682480",
    "end": "1689279"
  },
  {
    "text": "this breakpoint has been hit and now this breakpoint has been hit so that sequential startup um has run and I if I",
    "start": "1689279",
    "end": "1694799"
  },
  {
    "text": "beat the cancellation token um then we see the application started up curiously",
    "start": "1694799",
    "end": "1700559"
  },
  {
    "text": "I'm not seeing logging what have I done",
    "start": "1700559",
    "end": "1706000"
  },
  {
    "text": "wrong it's now is the time to shout out if you can see why it's not logging uh",
    "start": "1706440",
    "end": "1711559"
  },
  {
    "text": "now I did hit a weird Quirk with this app before and I just rerun this to make",
    "start": "1711559",
    "end": "1716880"
  },
  {
    "text": "sure I didn't hit weird key press started started yeah I think it fired off just",
    "start": "1716880",
    "end": "1724000"
  },
  {
    "text": "before I managed to to get through to that point so if you beat the 5sec timeout we had a little race there uh",
    "start": "1724000",
    "end": "1729240"
  },
  {
    "text": "this time it's now logging so both of those Services have started up successfully and they're both um logging",
    "start": "1729240",
    "end": "1734320"
  },
  {
    "text": "to the console um as I say they're both now starting in that sequential mode if we",
    "start": "1734320",
    "end": "1739600"
  },
  {
    "text": "wanted to um and uh it's quite often if useful if those Services don't really",
    "start": "1739600",
    "end": "1745039"
  },
  {
    "text": "depend on any uh on one another for any reason oops put my brace in the wrong place let's turn this there and put a",
    "start": "1745039",
    "end": "1752760"
  },
  {
    "text": "comma and I'll just do o do Services concurrently equals true this is how we",
    "start": "1752760",
    "end": "1758559"
  },
  {
    "text": "can then configure that we want them to start up together so instead the host will now um actually attempt to fire off",
    "start": "1758559",
    "end": "1765679"
  },
  {
    "text": "the start async on both of those at the exact same time or immediately one after the other at least and then it will",
    "start": "1765679",
    "end": "1771320"
  },
  {
    "text": "await but all of them completing and starting up so that's how you can configure that new Donna 8 feature if",
    "start": "1771320",
    "end": "1777279"
  },
  {
    "text": "you need to um so we've we've kind of achieved our goal we've completed um this long",
    "start": "1777279",
    "end": "1784279"
  },
  {
    "text": "running application um I don't really um like that I've done this fire and forget",
    "start": "1784279",
    "end": "1790200"
  },
  {
    "text": "stuff so I think we should probably improve that so what I'm going to do is I'm actually going to get rid of this second instance now uh we don't need",
    "start": "1790200",
    "end": "1795840"
  },
  {
    "text": "time service two but in time service one I'm going to switch from using this",
    "start": "1795840",
    "end": "1800880"
  },
  {
    "text": "background uh sorry this IH hosted service to to instead implement this abstract class called background service",
    "start": "1800880",
    "end": "1806840"
  },
  {
    "text": "and background service adds one abstract method that we have to implement called execute async um and this is where we",
    "start": "1806840",
    "end": "1813559"
  },
  {
    "text": "can trigger our long running workloads um and then the background uh service implementation will handle starting that",
    "start": "1813559",
    "end": "1819760"
  },
  {
    "text": "off correctly so I'm going to go back to my original code here and part put that",
    "start": "1819760",
    "end": "1825200"
  },
  {
    "text": "in here make this async really rates me that they name this stopping token instead of cancellation token and uh",
    "start": "1825200",
    "end": "1832279"
  },
  {
    "text": "made us have to do that um so we've got this execute async method and we can still override start async and stop",
    "start": "1832279",
    "end": "1838799"
  },
  {
    "text": "async for special cases but generally we don't need to implement those at all and so you'll see that that's got a lot simpler already and background",
    "start": "1838799",
    "end": "1846279"
  },
  {
    "text": "service implements IH hosted service for us um and it does things properly so it",
    "start": "1846279",
    "end": "1852840"
  },
  {
    "text": "first creates a cancellation token Source um and sticks that in a field up here",
    "start": "1852840",
    "end": "1858519"
  },
  {
    "text": "uh up here sorry um then it uh calls into execute async passing in the token",
    "start": "1858519",
    "end": "1865559"
  },
  {
    "text": "from that cancellation token source and stores the task into this uh this field",
    "start": "1865559",
    "end": "1871039"
  },
  {
    "text": "up here um and that's also accessible via this property on the background service so it hasn't awaited this so it",
    "start": "1871039",
    "end": "1877159"
  },
  {
    "text": "hasn't expected this to you know start asynchronous work and it's just called into it and said I want to store the",
    "start": "1877159",
    "end": "1883080"
  },
  {
    "text": "task that you return um which we expect to happen pretty fast um if for any reason that happens to complete entirely",
    "start": "1883080",
    "end": "1889360"
  },
  {
    "text": "synchronously which is possible um then it just bubbles that task back up so any exceptions Bubble Up um but otherwise",
    "start": "1889360",
    "end": "1895639"
  },
  {
    "text": "from this method it just returns task completed task so it has started that work off but it's stored it into a task",
    "start": "1895639",
    "end": "1901320"
  },
  {
    "text": "that it can access later and that means that when the application is shutting down and stop async is called um it",
    "start": "1901320",
    "end": "1907320"
  },
  {
    "text": "triggers the cancellation token Source by calling cancel on it that triggers the cancellation of this token passed",
    "start": "1907320",
    "end": "1913080"
  },
  {
    "text": "into our execute async method and then as long as we're cooperatively cancelling in our execute async method",
    "start": "1913080",
    "end": "1919279"
  },
  {
    "text": "that will allow that code to stop um doing any asynchronous work it was doing once it's triggered that",
    "start": "1919279",
    "end": "1925639"
  },
  {
    "text": "cancellation it basically starts a Race So it creates a task completion Source here and then it registers on the um",
    "start": "1925639",
    "end": "1932519"
  },
  {
    "text": "cancellation token that's passed into stop async which will be linked to the shutdown timeout uh that's been",
    "start": "1932519",
    "end": "1938840"
  },
  {
    "text": "configured in the app if that cancellation token cancels then it's going to set canceled on that uh task",
    "start": "1938840",
    "end": "1944960"
  },
  {
    "text": "completion Source over here so this just kind of linking these two cancellations events together and what that means is",
    "start": "1944960",
    "end": "1951000"
  },
  {
    "text": "um that uh we then do this when any and so basically this now is a race between the completion of our code in execute",
    "start": "1951000",
    "end": "1957200"
  },
  {
    "text": "async um which we might hopefully cooperatively cancel and the task from this task completion source which is",
    "start": "1957200",
    "end": "1963320"
  },
  {
    "text": "going to be uh cancelled as soon as uh the shutdown timeout was hit so we've got in this application 15 seconds for",
    "start": "1963320",
    "end": "1969720"
  },
  {
    "text": "execute async to complete successfully um otherwise it would be forcefully um started to shut down so that's kind of",
    "start": "1969720",
    "end": "1976360"
  },
  {
    "text": "what background service is doing on our half and as you can see it simplifies the story quite a lot because anytime we want to Define these units of work we",
    "start": "1976360",
    "end": "1982480"
  },
  {
    "text": "just implement this one method uh we don't have to think about storing tasks and dealing with cancellation token",
    "start": "1982480",
    "end": "1988399"
  },
  {
    "text": "sources to do things properly um and then everything just kind of works as we'd expect now so far we've done this",
    "start": "1988399",
    "end": "1994159"
  },
  {
    "text": "in a console application and we've gone through and we've manually added all the things we need and you might think there's quite a",
    "start": "1994159",
    "end": "1999679"
  },
  {
    "text": "lot of ceremony there um and that's true and that's why Microsoft ship the worker service template um so if I create this",
    "start": "1999679",
    "end": "2007919"
  },
  {
    "text": "project into my solution you'll see that what it gives us is exactly what we just spent the",
    "start": "2007919",
    "end": "2013559"
  },
  {
    "text": "last what 20 minutes building out which is it sets up brings in the hosting package we need it creates the host",
    "start": "2013559",
    "end": "2019440"
  },
  {
    "text": "registers in this case just a dummy worker Service uh or background service here uh which is kind of doing what we",
    "start": "2019440",
    "end": "2024880"
  },
  {
    "text": "were doing before builds and runs the host uh it includes app settings but it",
    "start": "2024880",
    "end": "2030240"
  },
  {
    "text": "also includes the app settings. development. Json so that we can have hierarchies of configuration in",
    "start": "2030240",
    "end": "2035639"
  },
  {
    "text": "different environments um and it basically sets everything up so if you want to build these these units of work",
    "start": "2035639",
    "end": "2040840"
  },
  {
    "text": "for processing data or reading from cues Etc just use the worker service template you don't have to go through everything",
    "start": "2040840",
    "end": "2046440"
  },
  {
    "text": "I've shown you but hopefully it was somewhat useful going into what uh you know happens behind the scenes to",
    "start": "2046440",
    "end": "2052800"
  },
  {
    "text": "understand how this stuff all works the final thing I'm going to show you as part of this demo is in the time service",
    "start": "2052800",
    "end": "2058679"
  },
  {
    "text": "I'm just going to show you that there is a brand new um interface inet 8 called I",
    "start": "2058679",
    "end": "2064480"
  },
  {
    "text": "hosted life cycle service um and if I by",
    "start": "2064480",
    "end": "2069800"
  },
  {
    "text": "oops uh let's do Implement that you'll see what that",
    "start": "2069800",
    "end": "2075839"
  },
  {
    "text": "asks us to implement is four additional methods and generally you might only Implement one of these the rest should just return a task completed tasks but",
    "start": "2075839",
    "end": "2082720"
  },
  {
    "text": "what this lets us do is have very high Precision control over the life cycle of the startup of these Services it's quite",
    "start": "2082720",
    "end": "2090158"
  },
  {
    "text": "rare you need this but basically there's a there's a sequence that gets called on any of these any ihost service that's",
    "start": "2090159",
    "end": "2096520"
  },
  {
    "text": "registered that also happens to implement this interface starting async will happen before any of the start",
    "start": "2096520",
    "end": "2101880"
  },
  {
    "text": "async are invoked and started will happen afterwards and then similar for stopping the one time this could be",
    "start": "2101880",
    "end": "2108880"
  },
  {
    "text": "particularly useful is if you have like database initialization work that you want to do and your host Services depend",
    "start": "2108880",
    "end": "2114560"
  },
  {
    "text": "on that database you might want to make sure that maybe any migrations and things have run before the actual",
    "start": "2114560",
    "end": "2119839"
  },
  {
    "text": "workloads kick off and so if you register just one of these and in starting async you do your database",
    "start": "2119839",
    "end": "2125480"
  },
  {
    "text": "configuration you can guarantee that that's going to be the very first thing that runs in your code once that's finished then star async gets called on",
    "start": "2125480",
    "end": "2132320"
  },
  {
    "text": "all your other hosted services and their workloads can begin so that's one use case it's pretty Niche it was added more",
    "start": "2132320",
    "end": "2139359"
  },
  {
    "text": "for some framework stuff that Microsoft were building um so it's pretty rare that you'd actually go in and Implement that",
    "start": "2139359",
    "end": "2145520"
  },
  {
    "text": "yourself so I'm going to drop back to slides for a few minutes and then we'll look at some slightly more like real",
    "start": "2145520",
    "end": "2150880"
  },
  {
    "text": "world uses for background services and how we can actually use this stuff in",
    "start": "2150880",
    "end": "2156640"
  },
  {
    "text": "practice so let's recap that whole startup because we looked at code and I",
    "start": "2156640",
    "end": "2162240"
  },
  {
    "text": "appreciate it's the end of a long day so reading the code and trying to part put in your head where all that task cancellation stuff um happens might be",
    "start": "2162240",
    "end": "2169400"
  },
  {
    "text": "quite difficult so in our application in program CS we built the host we built that from the host application Builder",
    "start": "2169400",
    "end": "2175440"
  },
  {
    "text": "and then on that ihost we called that run async extension method the run async extension method then called into start",
    "start": "2175440",
    "end": "2181400"
  },
  {
    "text": "async on the ihost and then it triggered the startup",
    "start": "2181400",
    "end": "2186800"
  },
  {
    "text": "of any of those hosted services that it can resolve from di I've shown it on the diagram here that it's sequential so",
    "start": "2186800",
    "end": "2192520"
  },
  {
    "text": "that's the default Behavior Uh remember but you can configure that concurrent Behavior if none of these have",
    "start": "2192520",
    "end": "2197640"
  },
  {
    "text": "dependencies on one another so really the only reason you'd want to start these in order is if you know the first",
    "start": "2197640",
    "end": "2202800"
  },
  {
    "text": "service is doing something that has to be started before the second one then kicks off um and that might be a reason",
    "start": "2202800",
    "end": "2209079"
  },
  {
    "text": "to you know have this dependency order so once those have all started that's when that um application started",
    "start": "2209079",
    "end": "2216040"
  },
  {
    "text": "cancellation token on ihost application lifetime got cancelled and that's then signaling that the application has successfully started all of the the",
    "start": "2216040",
    "end": "2222640"
  },
  {
    "text": "registered units of work and at that point the ihost called into that um wait for shutdown async method um and that's",
    "start": "2222640",
    "end": "2229760"
  },
  {
    "text": "what then basically registered with the application stopping token um and then just waited until that occurred and",
    "start": "2229760",
    "end": "2236119"
  },
  {
    "text": "that's what keeps the application alive uh indefinitely then we've got options to",
    "start": "2236119",
    "end": "2241680"
  },
  {
    "text": "Signal the shutdown of those applications and we've kind of touched on some of these so by default that console lifetime that's default for the",
    "start": "2241680",
    "end": "2247520"
  },
  {
    "text": "generic host when you first introduce it um is listening for various signals that",
    "start": "2247520",
    "end": "2252640"
  },
  {
    "text": "might be uh shut down signals from a user so in the terminal if someone's typing control c um a Sig in that will",
    "start": "2252640",
    "end": "2259160"
  },
  {
    "text": "trigger graceful shutdown control Break um and Sig quit will shut trigger the shutdown and finally like things like",
    "start": "2259160",
    "end": "2265240"
  },
  {
    "text": "Sig term so if you're running this in a container and Docker stops your container um then that will trigger the",
    "start": "2265240",
    "end": "2270560"
  },
  {
    "text": "graceful shutdown of your application as well we also saw that if we wanted to shut this down at any point in code we",
    "start": "2270560",
    "end": "2276200"
  },
  {
    "text": "could just uh inject the ihost application lifetime interface and call it stop application uh method and then",
    "start": "2276200",
    "end": "2282720"
  },
  {
    "text": "that triggers that same graceful shutdown to begin um if your app happens to be using environment. exit if you're",
    "start": "2282720",
    "end": "2288560"
  },
  {
    "text": "building these worker Services just don't um it's not really a good idea um before net 6 it was they tried to make",
    "start": "2288560",
    "end": "2294880"
  },
  {
    "text": "that a graceful shutdown as well but there were various um Deadlocks and race conditions that occurred um so since net",
    "start": "2294880",
    "end": "2300960"
  },
  {
    "text": "6 they've abandoned trying to make it graceful and just accepted that that is a true terminate the app now like stop",
    "start": "2300960",
    "end": "2306040"
  },
  {
    "text": "the foreground and background Freds and um the application you shouldn't be using environment. exit in these",
    "start": "2306040",
    "end": "2311359"
  },
  {
    "text": "applications to trigger shutdown and termination you should use that um interface that we've got there if you're doing it in code so on that host",
    "start": "2311359",
    "end": "2318319"
  },
  {
    "text": "shutdown sequence um shutdown occurs because maybe someone's pressed contrl C",
    "start": "2318319",
    "end": "2323560"
  },
  {
    "text": "on the console lifetime that call stop application on the host application lifetime that triggers that uh stopping",
    "start": "2323560",
    "end": "2330280"
  },
  {
    "text": "token to be cancelled um so that anyone that's listening and registered to that can not",
    "start": "2330280",
    "end": "2335359"
  },
  {
    "text": "be notified that shutdown is beginning that that includes the wait for shutdown async method of added on the ihost which",
    "start": "2335359",
    "end": "2342520"
  },
  {
    "text": "was basically waiting until that um signal occurred and then as soon as that occurred it could fall through to the",
    "start": "2342520",
    "end": "2347839"
  },
  {
    "text": "next line of code which called stop async on the host then your hosted services are",
    "start": "2347839",
    "end": "2353760"
  },
  {
    "text": "stopped um Again by default that will be sequential and it will also be in Reverse registration order so the one",
    "start": "2353760",
    "end": "2359480"
  },
  {
    "text": "that started last would be the first to stop and again you might have requirements where some of these have to stop in a particular order to like drain",
    "start": "2359480",
    "end": "2366079"
  },
  {
    "text": "a queue or finish some proc processing and if you do leave it in this uh kind of sequential mode otherwise again you",
    "start": "2366079",
    "end": "2372200"
  },
  {
    "text": "could switch that to concurrent if you want to at that point the application stopped cancellation token got cancelled",
    "start": "2372200",
    "end": "2378480"
  },
  {
    "text": "so anyone that's listening to that is aware that the application's now basically finished everything and is about to exit and then stop acing",
    "start": "2378480",
    "end": "2385160"
  },
  {
    "text": "completes and the the main method resumes and then the the process just exits normally so that hopefully sort of",
    "start": "2385160",
    "end": "2391680"
  },
  {
    "text": "explains that life cycle a little bit better so we can use these Concepts to",
    "start": "2391680",
    "end": "2396839"
  },
  {
    "text": "build these long running background workloads and I wanted to sort of talk about a few use cases that I've used",
    "start": "2396839",
    "end": "2402119"
  },
  {
    "text": "these for practically um the first is not necessarily that obvious but it this really nice scenario where we can",
    "start": "2402119",
    "end": "2409119"
  },
  {
    "text": "offload work from aset core request so typically in aset core you know a request comes in say it gets handled by",
    "start": "2409119",
    "end": "2414440"
  },
  {
    "text": "a controller in MVC we've got our code in that controller that goes off to a database does a bunch of work and",
    "start": "2414440",
    "end": "2420480"
  },
  {
    "text": "eventually you know can return some response to the user and generally those are going to be relatively quick we hope and you know within less than a second",
    "start": "2420480",
    "end": "2427319"
  },
  {
    "text": "and we've probably returned data to the user but if we have any of those that take a long time to gather the data it's",
    "start": "2427319",
    "end": "2433200"
  },
  {
    "text": "a particularly heavy piece of work maybe um we don't necessarily want a user in a webbased UI system sitting there hanging",
    "start": "2433200",
    "end": "2439880"
  },
  {
    "text": "around waiting for the response so what we can do instead is push that work as soon as it's received into the",
    "start": "2439880",
    "end": "2445240"
  },
  {
    "text": "controller we can push that work onto a background service um we'll look at how we can do this in code in a moment but",
    "start": "2445240",
    "end": "2451520"
  },
  {
    "text": "we can push that work onto the background service and then we can just return an immediate response to the user and said acknowledged basically so we",
    "start": "2451520",
    "end": "2457480"
  },
  {
    "text": "can return like an accepted uh status code if it's an API or we could return even uh an accepted code but we could",
    "start": "2457480",
    "end": "2464000"
  },
  {
    "text": "include a token maybe so that the application can poll using that token to see if the work's finished and at some",
    "start": "2464000",
    "end": "2469640"
  },
  {
    "text": "point get the results kind of asynchronously later on and this is a nice way of making your applications more responsive if you know there's you",
    "start": "2469640",
    "end": "2476400"
  },
  {
    "text": "know a delay and the user doesn't necessarily have to be sat there waiting for the response before they can continue what we're doing another good",
    "start": "2476400",
    "end": "2482839"
  },
  {
    "text": "scenario in aset core is for things like refreshing caches so say you have a cash in memory for 10 minutes for some data",
    "start": "2482839",
    "end": "2489680"
  },
  {
    "text": "from a database that's quite heavy to gather um that's great because your user is just getting it from the in in memory",
    "start": "2489680",
    "end": "2496319"
  },
  {
    "text": "cache but at some point one unlucky user is going to hit that cash when the data is expired after 10 minutes and that",
    "start": "2496319",
    "end": "2502280"
  },
  {
    "text": "user is then going to pay the cost of waiting for the database to be queried the cache to be rebuilt and then the",
    "start": "2502280",
    "end": "2508359"
  },
  {
    "text": "response so what we can do is kick off a background service that every 9 Minutes say is is doing that database call and",
    "start": "2508359",
    "end": "2514280"
  },
  {
    "text": "refreshing the data in the cache which means it's always kept fresh it's always kept within 9 Minutes old um but it",
    "start": "2514280",
    "end": "2520599"
  },
  {
    "text": "means that none of your users are ever going to hit that situation where the cach isn't populated with uh non- stale",
    "start": "2520599",
    "end": "2527079"
  },
  {
    "text": "data so that's aspet cor there's a couple of good scenarios there for worker Services um a really powerful one",
    "start": "2527079",
    "end": "2533160"
  },
  {
    "text": "is doing things like Q processing so while we can offload work from a request to a background service in process we",
    "start": "2533160",
    "end": "2539839"
  },
  {
    "text": "could also offload it to an entirely separate service using something like a q or a service bus and this lets us",
    "start": "2539839",
    "end": "2546240"
  },
  {
    "text": "build start building those kind of event driven or you know sort of Q driven uh microservice architectures where we can",
    "start": "2546240",
    "end": "2552240"
  },
  {
    "text": "distribute this work into lots of little microservices and so we can just fire off one of these Services that's polling",
    "start": "2552240",
    "end": "2557920"
  },
  {
    "text": "a queue for example uh doing a bunch of background work and then um just processing any messages that it",
    "start": "2557920",
    "end": "2564160"
  },
  {
    "text": "gets so to give you a real world example this is from my pite demo so it's not like an actual real world app but the",
    "start": "2564160",
    "end": "2570599"
  },
  {
    "text": "demo is heavily based on some stuff I did work on um in a real company uh where we were building out like a a data",
    "start": "2570599",
    "end": "2576599"
  },
  {
    "text": "processing pipeline um where apis were passing stuff on to q's and then we had all sorts of background Services um",
    "start": "2576599",
    "end": "2583319"
  },
  {
    "text": "processing and so if I show you what the app's doing um it's basically an app for a tennis club so it allows users to book",
    "start": "2583319",
    "end": "2590000"
  },
  {
    "text": "courts manage their membership Etc one of the features um of this application",
    "start": "2590000",
    "end": "2595119"
  },
  {
    "text": "is um that there's a an admin area where an administrator can upload results from like a tennis match or a set of tennis",
    "start": "2595119",
    "end": "2601760"
  },
  {
    "text": "matches so imagine there's a tournament happened and they want to publish the results and have them unloaded somewhere",
    "start": "2601760",
    "end": "2607119"
  },
  {
    "text": "somewhere so in V1 of this implementation if I upload the scores I'm going to click upload and then we",
    "start": "2607119",
    "end": "2613280"
  },
  {
    "text": "wait and we wait and we not really sure anything's happening the only reason we know something happening is we've got this car little icon spinning around up",
    "start": "2613280",
    "end": "2620240"
  },
  {
    "text": "here but as a user we're like What eventually we we see this completed message and so great it's done and if I",
    "start": "2620240",
    "end": "2628319"
  },
  {
    "text": "can find the right console window here uh so this is the web application output so you can see after it received that um",
    "start": "2628319",
    "end": "2635280"
  },
  {
    "text": "file it's done a bunch of API calls to do some processing and eventually after about 9 seconds we we were done now as a",
    "start": "2635280",
    "end": "2641880"
  },
  {
    "text": "user that wasn't a great experience and there's no real reason to keep a user sitting around um waiting for that to",
    "start": "2641880",
    "end": "2647359"
  },
  {
    "text": "happen to understand kind of the implementation of that um basically when that file is posted it creates a",
    "start": "2647359",
    "end": "2654480"
  },
  {
    "text": "temporary file name creates a file stream over that for that new file and basically copies from the uploading file",
    "start": "2654480",
    "end": "2660520"
  },
  {
    "text": "into the file stream repositions the file stream and then calls this process async process async is what's doing the",
    "start": "2660520",
    "end": "2667920"
  },
  {
    "text": "heavy lifting it's calling apis get player details it's simulating some long running work here and then um posting",
    "start": "2667920",
    "end": "2674680"
  },
  {
    "text": "results somewhere so that all has to complete and we saw that that took 9 seconds",
    "start": "2674680",
    "end": "2679760"
  },
  {
    "text": "before then we delete the file and eventually redirect the user to that upload complete page so one nice option",
    "start": "2679760",
    "end": "2685079"
  },
  {
    "text": "would be is if we could offload that work so in V2 that's what we do we still",
    "start": "2685079",
    "end": "2690280"
  },
  {
    "text": "create a temporary file name we open the file stream copy the file in and and then we close the file stream don't",
    "start": "2690280",
    "end": "2695720"
  },
  {
    "text": "worry about this code it's not really important for this part of the demo um but the code then goes into here and it",
    "start": "2695720",
    "end": "2701040"
  },
  {
    "text": "calls this or calls into this file processing Channel and adds the file name to the channel we'll look at the channel in a minute um but you can see",
    "start": "2701040",
    "end": "2707680"
  },
  {
    "text": "as soon as that happens which should be basically instantaneous it's all in process in memory um then as long as",
    "start": "2707680",
    "end": "2713720"
  },
  {
    "text": "that's been written Returns the user to the upload complete page so this channel thing is basically my own class that",
    "start": "2713720",
    "end": "2720839"
  },
  {
    "text": "wraps a channel and this is a a nice producer consumer asynchronous API that",
    "start": "2720839",
    "end": "2726160"
  },
  {
    "text": "we have now inet for doing sort of essentially in memory queuing where we could have multiple producers and consumers reading data from this thing",
    "start": "2726160",
    "end": "2733599"
  },
  {
    "text": "um and it's in this system threading Channel's name space and it's extremely perfect for this scenario so we we wrap",
    "start": "2733599",
    "end": "2739880"
  },
  {
    "text": "that channel and then the ads file AC sync method that we Rec called from the controller just basically eventually writes that file file name into that",
    "start": "2739880",
    "end": "2746880"
  },
  {
    "text": "channel that should generally be completely sort of synchronous and immediate then this read all acing",
    "start": "2746880",
    "end": "2753079"
  },
  {
    "text": "method down here is what's being listened to the consumer of this channel is listening to and that's just a",
    "start": "2753079",
    "end": "2758280"
  },
  {
    "text": "background service within this web application and so what that does is it uses this a wait for in each syntax",
    "start": "2758280",
    "end": "2764440"
  },
  {
    "text": "which has been available for a while now to asynchronously sort of await more data being available in that channel",
    "start": "2764440",
    "end": "2770240"
  },
  {
    "text": "from this read or asnc method and so once we get a file name from the channel it just opens that file processes it and",
    "start": "2770240",
    "end": "2776839"
  },
  {
    "text": "deletes it and so what this means is as a user we've shifted that work um away from their sort of their UI so if I go",
    "start": "2776839",
    "end": "2785000"
  },
  {
    "text": "to V2 endpoint upload my scores click upload immediately they tolds great",
    "start": "2785000",
    "end": "2790520"
  },
  {
    "text": "upload complete we' got your file they can move on with their day and do something more useful um but in the background our web",
    "start": "2790520",
    "end": "2797319"
  },
  {
    "text": "application uh I missed it running but it has actually already run and processed that file so it shifted that work onto uh that channel the channel",
    "start": "2797319",
    "end": "2805079"
  },
  {
    "text": "redit and then processed it so this is a really nice way to move that work away from the the kind of the request flow um",
    "start": "2805079",
    "end": "2812000"
  },
  {
    "text": "there's a couple of potential gotas here so one is you know this is happening in one web service if we need to scale the",
    "start": "2812000",
    "end": "2817880"
  },
  {
    "text": "processing work because it's quite intense we'd have to scale this entire web service um the other problem is if",
    "start": "2817880",
    "end": "2824119"
  },
  {
    "text": "this web service dies partway through processing then we've kind of lost the fact that that file was uploaded",
    "start": "2824119",
    "end": "2829680"
  },
  {
    "text": "anywhere because it's it's all in memory it's all an in memory q and so those are the couple of potential reasons where we",
    "start": "2829680",
    "end": "2835680"
  },
  {
    "text": "might want to look to moving this to an out of process que and a worker service and so if I show you the code for what",
    "start": "2835680",
    "end": "2841640"
  },
  {
    "text": "that looks like um we can then see how that sort of differs slightly so in fre",
    "start": "2841640",
    "end": "2847240"
  },
  {
    "text": "we're doing the exact same thing as before uploading and saving the file locally just to get it from the user as quickly as possible into some storage",
    "start": "2847240",
    "end": "2853640"
  },
  {
    "text": "location uh on disc it then writes to a channel it's a different Channel this time that that file has occurred and",
    "start": "2853640",
    "end": "2859359"
  },
  {
    "text": "again redirects a user to the upload complete so this channel um is a very similar implementation but the thing",
    "start": "2859359",
    "end": "2866319"
  },
  {
    "text": "listening or consuming this channel is a different background service and what this one's doing is reading the full",
    "start": "2866319",
    "end": "2872800"
  },
  {
    "text": "name from the channel and then using the AWS transfer utility it's pushing this file to S3 so we're immediately pushing",
    "start": "2872800",
    "end": "2880000"
  },
  {
    "text": "this somewhere that we can persist this file um um and we're just using the transfer utility to do that um so again",
    "start": "2880000",
    "end": "2888280"
  },
  {
    "text": "I push this to a background service within the web app just to avoid any delays with uploading s to S3 delaying",
    "start": "2888280",
    "end": "2894079"
  },
  {
    "text": "the user we've already got their files so they can they can get their response and then in the background we just quickly upload this to S3 um locally I'm",
    "start": "2894079",
    "end": "2901520"
  },
  {
    "text": "running that using local stack so when you see the demo it will be a bit slow just because it's not real S3 but I never trust conference Wi-Fi for cloud",
    "start": "2901520",
    "end": "2908200"
  },
  {
    "text": "demos um so that offloads that work and then in this application so that's the web app there",
    "start": "2908200",
    "end": "2915119"
  },
  {
    "text": "in this application I've got a separate worker service here this score processor and this thing is fired up at the same",
    "start": "2915119",
    "end": "2921200"
  },
  {
    "text": "time and it has a background service running here that's just listening uh to a queue",
    "start": "2921200",
    "end": "2927400"
  },
  {
    "text": "so the first question might be well how did this que how does this help us because we just uploaded a file to S3",
    "start": "2927400",
    "end": "2933440"
  },
  {
    "text": "well one of the things you can do in Amazon is when a file is uploaded to S3 you can have a notification put onto a queue that says hey there's a new blob",
    "start": "2933440",
    "end": "2939920"
  },
  {
    "text": "here and that's what I've set up behind the scenes for this environment so as soon as the S3 file was created",
    "start": "2939920",
    "end": "2945559"
  },
  {
    "text": "something was dropped on an sqsq to say hey here's a new file and so this service is reading from that queue and",
    "start": "2945559",
    "end": "2950720"
  },
  {
    "text": "in this W loop it's just constantly polling the queue and if it gets a message it writes it to a channel within",
    "start": "2950720",
    "end": "2956799"
  },
  {
    "text": "this worker service otherwise it waits 10 seconds and just tries um polling the queue again um so that one's running and",
    "start": "2956799",
    "end": "2963400"
  },
  {
    "text": "then we've got this score processing service which is another background service in in that worker service project and so this one is reading from",
    "start": "2963400",
    "end": "2970040"
  },
  {
    "text": "that um or consuming that channel and that channel is receiving messages from that have been read off of sqs the",
    "start": "2970040",
    "end": "2976720"
  },
  {
    "text": "reason I do it as two independent worker services or background Services sorry is that this means that we can kind of have",
    "start": "2976720",
    "end": "2982799"
  },
  {
    "text": "our Q reading work just constantly running and we're not then periodically delaying to process any files we've got",
    "start": "2982799",
    "end": "2988200"
  },
  {
    "text": "so we just we're having one background service that's pulling the queue throwing them onto a channel we have a",
    "start": "2988200",
    "end": "2993400"
  },
  {
    "text": "second one that's just waiting for things to appear on the channel and then actually processing them and so we're kind of separating those two distinct",
    "start": "2993400",
    "end": "2999520"
  },
  {
    "text": "pieces of work and so once we get the message uh from there this background service in its implementation here we'll",
    "start": "2999520",
    "end": "3005839"
  },
  {
    "text": "call this method and this basically just accesses the object Keys the list of file names essentially in the blob that",
    "start": "3005839",
    "end": "3011160"
  },
  {
    "text": "have been added uh one or many might have been added and notified it opens a file stream or an S3 stream over that",
    "start": "3011160",
    "end": "3018160"
  },
  {
    "text": "file and then it processes it just as we did before with the same processing code and once it's done it deletes the",
    "start": "3018160",
    "end": "3023559"
  },
  {
    "text": "message so now we've got a degree of persistence if that message isn't deleted it will be picked up by another",
    "start": "3023559",
    "end": "3029040"
  },
  {
    "text": "worker service after its sort of sort of hidden period um runs out and so as long as this is em poent em potent uh it",
    "start": "3029040",
    "end": "3036640"
  },
  {
    "text": "means that we can we can just sort of safely retry this workload until it eventually succeeds if anything weird",
    "start": "3036640",
    "end": "3042119"
  },
  {
    "text": "happens so that's those two running together and um it's not going to be particularly exciting because you can",
    "start": "3042119",
    "end": "3048240"
  },
  {
    "text": "kind of guess what this is going to look like but if I go back to my app and go fee free upload is complete immediately",
    "start": "3048240",
    "end": "3054880"
  },
  {
    "text": "the application is now hopefully um it's taken that file it's created a",
    "start": "3054880",
    "end": "3060520"
  },
  {
    "text": "temporary file name to upload it and I think it takes a while because I'm on local stack but at some point that file",
    "start": "3060520",
    "end": "3066280"
  },
  {
    "text": "will appear in the kind of the local stack instance which is just like fake S3 running on my machine um I'm going to",
    "start": "3066280",
    "end": "3072079"
  },
  {
    "text": "open up another window as well so that we can see the Q reader so yeah this this has now logged that it's successfully uploaded the file to S3",
    "start": "3072079",
    "end": "3078920"
  },
  {
    "text": "this Q reader then picked up a message from the KE on it next read through that said hey you've got this new file by",
    "start": "3078920",
    "end": "3084000"
  },
  {
    "text": "this name and then in a second once it's finished um pulling that down from my very slow local S3 and we should see the",
    "start": "3084000",
    "end": "3090480"
  },
  {
    "text": "processing um logging begin to appear I'll wait one second or two just to see if that does happen there it goes so now",
    "start": "3090480",
    "end": "3097760"
  },
  {
    "text": "we've got that processing happening but this is the web service on the left the other one on the right is our worker",
    "start": "3097760",
    "end": "3103000"
  },
  {
    "text": "service and so we've got these two independent essentially microservices Now with discreete uh",
    "start": "3103000",
    "end": "3109640"
  },
  {
    "text": "responsibilities so there's a couple of like semi Advanced things that I just want to touch on in the last few minutes we've got um so if I go back to the Q",
    "start": "3110960",
    "end": "3118880"
  },
  {
    "text": "reading service um here you'll note that all of this W Loop is inside a tri block",
    "start": "3118880",
    "end": "3125319"
  },
  {
    "text": "um and so I've got this exception handling here exception handling is really important in these ex um execute",
    "start": "3125319",
    "end": "3131559"
  },
  {
    "text": "async methods because as I said earlier if you don't handle exceptions and they bubble up then that will just trigger",
    "start": "3131559",
    "end": "3136760"
  },
  {
    "text": "the application or the host to entirely stop and so what I'm doing is here is if I get an operation canel exception that",
    "start": "3136760",
    "end": "3144000"
  },
  {
    "text": "could happen and that's expected because if the app is shutting down at any point then this cancellation token will be",
    "start": "3144000",
    "end": "3150480"
  },
  {
    "text": "cancelled and so we'd see that exception Bubble Up um so I L that that's happened but then I don't really worry about it",
    "start": "3150480",
    "end": "3157400"
  },
  {
    "text": "um and then any other exceptions for now I'm just logging a critical message in either case we end up in this finally",
    "start": "3157400",
    "end": "3163480"
  },
  {
    "text": "block and what this does is complete the channel so the nice thing about channels is you can cons signal from a consumer",
    "start": "3163480",
    "end": "3169079"
  },
  {
    "text": "to producers uh or producers to Consumers that one end or the other has finished and so in this case the",
    "start": "3169079",
    "end": "3174640"
  },
  {
    "text": "producer saying look if I've crashed out for some reason I'm not going to be adding anything new to that channel so",
    "start": "3174640",
    "end": "3179680"
  },
  {
    "text": "as soon as the consumer of this channel has finished reading all the items from it it knows it's not going to get any more and it breaks its um async uh for",
    "start": "3179680",
    "end": "3187319"
  },
  {
    "text": "each Loop so what we're doing here is just saying well if this has failed we're not going to be writing anything new to the",
    "start": "3187319",
    "end": "3192720"
  },
  {
    "text": "channel and then in the score processing service again we we have a tri block around this work here um and so one",
    "start": "3192720",
    "end": "3199520"
  },
  {
    "text": "option is that this will break when that completed writer or the writer gets completed in which case in the happy",
    "start": "3199520",
    "end": "3206040"
  },
  {
    "text": "pathway flow to the finally otherwise if we have an exception while we're processing then we still hit one of",
    "start": "3206040",
    "end": "3211200"
  },
  {
    "text": "these Capt blocks here but in either case once we reach this finally that we then trigger programmatically the",
    "start": "3211200",
    "end": "3216559"
  },
  {
    "text": "shutdown of this worker service because if there's nothing new going to be read from the queue there's nothing else that we can ever do um or you know if the",
    "start": "3216559",
    "end": "3224400"
  },
  {
    "text": "processing from the queue has crashed then we probably also want to stop and then we should be sort of alerting on that and maybe looking at why those",
    "start": "3224400",
    "end": "3230079"
  },
  {
    "text": "Services failed the other thing I want to point out in both of these is I've used cancellation tokens a bit",
    "start": "3230079",
    "end": "3235119"
  },
  {
    "text": "differently so in this background service there's a stopping token and you can see that all the way through the",
    "start": "3235119",
    "end": "3241200"
  },
  {
    "text": "code I'm you know listening to the Token I'm passing the token into async methods as a good citizen so that means as soon",
    "start": "3241200",
    "end": "3247480"
  },
  {
    "text": "as the application is being shut down these async methods will be cancelled and will just kind of exit from this",
    "start": "3247480",
    "end": "3253359"
  },
  {
    "text": "piece of work um and that's kind of the Q reading side on the processing side I",
    "start": "3253359",
    "end": "3258799"
  },
  {
    "text": "did it a bit differently though there's a stopping token still here but I'm not actually um listening to that at all in",
    "start": "3258799",
    "end": "3264920"
  },
  {
    "text": "my code and I explicitly fact disabled my warning is telling me I should do so and that's because in this particular",
    "start": "3264920",
    "end": "3270680"
  },
  {
    "text": "piece of code if we're shutting down what I actually want to try and do is drain this Channel or let any in",
    "start": "3270680",
    "end": "3276000"
  },
  {
    "text": "inflight processing finish and so this app has like a time out of one minute set for it shut down and so this has one",
    "start": "3276000",
    "end": "3282440"
  },
  {
    "text": "minute for this code to complete reading anything that's been added to that channel and then hopefully Drake out of",
    "start": "3282440",
    "end": "3287760"
  },
  {
    "text": "this for each Loop naturally and then just shut down an end um but that's a conscious decision there not to cancel",
    "start": "3287760",
    "end": "3294359"
  },
  {
    "text": "this immediately and to try and let this basically race that cancellation token of the the shutdown",
    "start": "3294359",
    "end": "3300079"
  },
  {
    "text": "timeout um so that's two important things the last one is a really unusual",
    "start": "3300079",
    "end": "3305240"
  },
  {
    "text": "gotcha that I ran into one time um so we saw earlier that start async has to return a task very quickly for the app",
    "start": "3305240",
    "end": "3311280"
  },
  {
    "text": "to start up successfully if you have any synchronous work in execute async before your first",
    "start": "3311280",
    "end": "3317640"
  },
  {
    "text": "await you have to remember that this method is running at that point synchronously and so here I'm just",
    "start": "3317640",
    "end": "3322960"
  },
  {
    "text": "throwing in a Fred sleep but if you were like calling a database and the only apis you had were synchronous apis and",
    "start": "3322960",
    "end": "3328960"
  },
  {
    "text": "that took a little bit of time uh to do the database calls and get whatever you're pulling back from the database",
    "start": "3328960",
    "end": "3334839"
  },
  {
    "text": "then actually this method is running synchronously and that's blocking start async from finishing because that task",
    "start": "3334839",
    "end": "3340319"
  },
  {
    "text": "hasn't yet returned to start async and so until this first await uh we could be running synchronously and if that",
    "start": "3340319",
    "end": "3347240"
  },
  {
    "text": "happens you're a bit stuck I mean if you can switch to async methods here you should definitely do that that's the best solution but if for any reason you",
    "start": "3347240",
    "end": "3353119"
  },
  {
    "text": "can't and you have got this little bit of long running synchronous work then the trick um uh recommended to me by",
    "start": "3353119",
    "end": "3359280"
  },
  {
    "text": "David Fowler is put in a task yield um and immediately you know yield the task back here and that just means that we",
    "start": "3359280",
    "end": "3365440"
  },
  {
    "text": "immediately turn this method async um uh before we start doing this synchronous work and then that just comes s of the",
    "start": "3365440",
    "end": "3371799"
  },
  {
    "text": "async state machine so it's an unusual gotcha but if you run into it you can be sort of left wondering why your app",
    "start": "3371799",
    "end": "3377319"
  },
  {
    "text": "hasn't started up um for some weird and unusual reason so that's pretty much it uh in",
    "start": "3377319",
    "end": "3383359"
  },
  {
    "text": "terms of code uh I'll just pop back into slid to wrap up so I just want to recap",
    "start": "3383359",
    "end": "3388599"
  },
  {
    "text": "a couple of the key points that I want people to kind of leave with um when you're using these things in in real life so definitely avoid blocking code",
    "start": "3388599",
    "end": "3395480"
  },
  {
    "text": "and start async you want that code to just return a task very quickly the best option is just to not Implement IH",
    "start": "3395480",
    "end": "3401000"
  },
  {
    "text": "hosted service yourself and use the background service um abstract class that does it for you as I've just shown",
    "start": "3401000",
    "end": "3407160"
  },
  {
    "text": "you there if you do have that weird Edge case where you might have a lot of synchronous code that happens before your first await in execute async you",
    "start": "3407160",
    "end": "3414559"
  },
  {
    "text": "just need to make sure that you either get ready rid of that synchronous work allow your time out to be long enough for it to run or do what I did there and",
    "start": "3414559",
    "end": "3421520"
  },
  {
    "text": "just put a a tar shield in consider registration order for your background services so as I say by",
    "start": "3421520",
    "end": "3427760"
  },
  {
    "text": "default those will start up in a sequential manner um which is the historic and standard behavior of this",
    "start": "3427760",
    "end": "3433760"
  },
  {
    "text": "thing all along and that means that you can register them uh into di in a particular order so that they can depend",
    "start": "3433760",
    "end": "3439599"
  },
  {
    "text": "on one another if the the final service that you want to register needed service one to have done something or at least",
    "start": "3439599",
    "end": "3444760"
  },
  {
    "text": "started doing something registration order can be honored but if you don't need that which is pretty rare to be",
    "start": "3444760",
    "end": "3450680"
  },
  {
    "text": "honest uh if you are sort of coupling these things together you want to try and avoid that and maybe switch to channels um but if you can't for uh you",
    "start": "3450680",
    "end": "3458359"
  },
  {
    "text": "can't for any reason then leave that sequential mode otherwise um switch to the concurrent options so that was on",
    "start": "3458359",
    "end": "3463720"
  },
  {
    "text": "that host options we can start and stop concurrently just to make things a little bit quicker um really consider",
    "start": "3463720",
    "end": "3470079"
  },
  {
    "text": "how you're doing your exception handling try not to let anything unhandled Bubble Up and deal with it in the right way and",
    "start": "3470079",
    "end": "3475119"
  },
  {
    "text": "that might be that you stop the application or it might be as you saw we might do something else like say that we've completed a writer on a channel so",
    "start": "3475119",
    "end": "3482520"
  },
  {
    "text": "that we can signal other uh background services that we finished uh producing new content for them um consider how you",
    "start": "3482520",
    "end": "3489440"
  },
  {
    "text": "do that Cooperative cancellation in your code so sometimes you do want to cooperatively cancel your execute async",
    "start": "3489440",
    "end": "3494799"
  },
  {
    "text": "and shut it down almost instantly other times you might want to let it drain workloads in which case you don't want",
    "start": "3494799",
    "end": "3499960"
  },
  {
    "text": "to listen to the Token that's passed into that execute async method because that will trigger your code to stop um",
    "start": "3499960",
    "end": "3506640"
  },
  {
    "text": "and then just a reminder that there's this I hosted life cycle service interface that gives you those four new",
    "start": "3506640",
    "end": "3511680"
  },
  {
    "text": "life cycle events for a hosted service very rare that I can think of anyone really needing that as I say one",
    "start": "3511680",
    "end": "3517960"
  },
  {
    "text": "scenario might be sort of doing database setup very early on in your app so",
    "start": "3517960",
    "end": "3523240"
  },
  {
    "text": "that's that's it we can all get off and go to beers or trains or whatever we got to do um that's the link to the plural",
    "start": "3523240",
    "end": "3528599"
  },
  {
    "text": "site course so if you did enjoy this but you want to go deeper um and you've got a subscription then uh you can check",
    "start": "3528599",
    "end": "3534680"
  },
  {
    "text": "that out otherwise um thanks very much I'm here at the elastic stand for the next couple of days so if you have any",
    "start": "3534680",
    "end": "3540720"
  },
  {
    "text": "questions or something pops into your head tomorrow feel free to grab me otherwise thank you and have a good good",
    "start": "3540720",
    "end": "3548038"
  },
  {
    "text": "[Applause]",
    "start": "3552630",
    "end": "3557199"
  },
  {
    "text": "evening",
    "start": "3565039",
    "end": "3568039"
  }
]