[
  {
    "text": "get started afternoon everyone it's a second last talk for the",
    "start": "7410",
    "end": "13860"
  },
  {
    "text": "conference so it's been pretty interesting I've been to a bunch of really interesting talks over the course",
    "start": "13860",
    "end": "20490"
  },
  {
    "text": "of this conference I'm going to be talking to you something about better",
    "start": "20490",
    "end": "26310"
  },
  {
    "text": "JavaScript tests which is a quite a vague topic so I'll try and explain what",
    "start": "26310",
    "end": "31589"
  },
  {
    "text": "I'm what going to talk to you about I've come from a dotnet background where I've",
    "start": "31589",
    "end": "37800"
  },
  {
    "text": "had a large focus on helping clients make write better tests not throwing the",
    "start": "37800",
    "end": "43590"
  },
  {
    "text": "tests weed away after sort of six months or so and moving over to JavaScript which I've been heavily doing for the",
    "start": "43590",
    "end": "51030"
  },
  {
    "text": "last sort of six to twelve months I've just some of the ecosystem generally has",
    "start": "51030",
    "end": "57359"
  },
  {
    "text": "a lot less knowledge collectively about testing there's a heap of really good projects out there a lot of good",
    "start": "57359",
    "end": "63300"
  },
  {
    "text": "community champions doing good stuff but there's a lot we can learn so I'm going",
    "start": "63300",
    "end": "68610"
  },
  {
    "text": "to be taking some of the ideas that I've had out of my from my net experience and",
    "start": "68610",
    "end": "74130"
  },
  {
    "text": "also just experimenting around how I can write better JavaScript apps and sort of",
    "start": "74130",
    "end": "79740"
  },
  {
    "text": "hopefully give you a couple of different tips and tricks that you can take away and use straight away start writing",
    "start": "79740",
    "end": "85170"
  },
  {
    "text": "better tests so this place to start would probably be defining what I mean I better what is better so if we've got we",
    "start": "85170",
    "end": "94770"
  },
  {
    "text": "try and plot out what our good characteristics of tests fast comprehensive reliable maintainable give",
    "start": "94770",
    "end": "104670"
  },
  {
    "text": "you increased confidence and enables you to refactor your code with confidence they're kind of some random things that",
    "start": "104670",
    "end": "112200"
  },
  {
    "text": "I've just selected as things that are quite good to be striving towards so if",
    "start": "112200",
    "end": "118980"
  },
  {
    "text": "we try and plot out what each of those could be the idea is you would want the",
    "start": "118980",
    "end": "123990"
  },
  {
    "text": "large your tests to be further out on this graph which means they're generally",
    "start": "123990",
    "end": "129149"
  },
  {
    "text": "better tests so a lot of the tips will be trying to push one of these sort of",
    "start": "129149",
    "end": "135180"
  },
  {
    "text": "things further out but then as you're trying to achieve",
    "start": "135180",
    "end": "140819"
  },
  {
    "text": "these things like more comprehensive tests you send start suffering things like your tests are really large and",
    "start": "140819",
    "end": "147870"
  },
  {
    "text": "complicated to write they're really slow to run they fail intermittently",
    "start": "147870",
    "end": "153270"
  },
  {
    "text": "especially when you start talking about UI tests or they don't fail at all so",
    "start": "153270",
    "end": "158610"
  },
  {
    "text": "they're giving you false confidence and this one is particularly bad because the",
    "start": "158610",
    "end": "165209"
  },
  {
    "text": "number of times you put a heap of effort into a really good test suite and then you go try and change something and half",
    "start": "165209",
    "end": "171690"
  },
  {
    "text": "your tests fail because they're testing implementation which you've now changed I have to go update all your mocks and",
    "start": "171690",
    "end": "178230"
  },
  {
    "text": "that sort of stuff you don't want your tests to be getting in the way of helping your codebase evolve over time",
    "start": "178230",
    "end": "183810"
  },
  {
    "text": "and then this is sort of a broader issue is you've invested a heap of time into",
    "start": "183810",
    "end": "189840"
  },
  {
    "text": "your tests but they're not catching the issues you're still deploying having bugs so as that said why do we actually",
    "start": "189840",
    "end": "200489"
  },
  {
    "text": "write tests let's go back to the the problem for me it's just about shipping software if I want to be able to ship",
    "start": "200489",
    "end": "207930"
  },
  {
    "text": "with confidence and I don't want to fail we'll all have been there we've done a",
    "start": "207930",
    "end": "214440"
  },
  {
    "text": "production deployment and things go bad we don't want to do that so tests are kind of that insurance for us because at",
    "start": "214440",
    "end": "223620"
  },
  {
    "text": "the end of the day we're really paid to write software we're not paid to write tests so if we have a good test suite we",
    "start": "223620",
    "end": "231480"
  },
  {
    "text": "can deploy with confidence and then make our customers really happy so that's",
    "start": "231480",
    "end": "237150"
  },
  {
    "text": "writing better tests through your JavaScript app there's going to be a lot of code later and actually diving in",
    "start": "237150",
    "end": "242850"
  },
  {
    "text": "I'd really like everyone if you've got questions when we're in a particular sample around sort of what problems",
    "start": "242850",
    "end": "249989"
  },
  {
    "text": "you've encountered we can dive in assuming I'm let you know if I'm going to be touching on your question later",
    "start": "249989",
    "end": "257060"
  },
  {
    "text": "bit about me my background I am Digital development just for a company called",
    "start": "257060",
    "end": "262289"
  },
  {
    "text": "seven west media in Perth in Western Australia we produce a large newspaper",
    "start": "262289",
    "end": "270900"
  },
  {
    "text": "and a bunch of other digital products I also do a fair amount of open source my",
    "start": "270900",
    "end": "276930"
  },
  {
    "text": "testing specific open source projects include a org called test stack we've",
    "start": "276930",
    "end": "283080"
  },
  {
    "text": "got a couple of projects in there WAIS is a UI testing framework solano wraps selenium and introduces a bunch of",
    "start": "283080",
    "end": "290849"
  },
  {
    "text": "really nice features and just better abstractions help you create maintainable selenium tests convention",
    "start": "290849",
    "end": "298949"
  },
  {
    "text": "tests which I'm not going to touch on today but it's an interesting class of tests where rather than writing specific",
    "start": "298949",
    "end": "306029"
  },
  {
    "text": "tests write some sort of convention for your code base so as soon as you add a",
    "start": "306029",
    "end": "311610"
  },
  {
    "text": "particular type of code the convention test picks that up and make sure it it",
    "start": "311610",
    "end": "316680"
  },
  {
    "text": "is here's to the conventions of your project really useful if you're doing like event handling making sure that you",
    "start": "316680",
    "end": "323279"
  },
  {
    "text": "if you create an event it has a handler those sort of things and finally B to D Phi which is a BDD",
    "start": "323279",
    "end": "330599"
  },
  {
    "text": "testing framework the other one is should Li which is an assertion library that focuses on creating really good",
    "start": "330599",
    "end": "338550"
  },
  {
    "text": "error messages so that's something that I've been really looking for when moving over to JavaScript because I've been",
    "start": "338550",
    "end": "344909"
  },
  {
    "text": "spoiled we've seen the testing pyramids",
    "start": "344909",
    "end": "350639"
  },
  {
    "text": "I everyone familiar yeah who likes this concept and agrees with it are we not",
    "start": "350639",
    "end": "358560"
  },
  {
    "text": "putting up a hands because who doesn't agree then not familiar so this is a",
    "start": "358560",
    "end": "365210"
  },
  {
    "text": "something floats around the testing areas um quite quite a lot and the idea",
    "start": "365210",
    "end": "373139"
  },
  {
    "text": "is that you should write heaps of unit tests and then you hit the next problem",
    "start": "373139",
    "end": "378210"
  },
  {
    "text": "no one agrees what a unit test is so then you move up to the next layer and some people like well they're service",
    "start": "378210",
    "end": "384539"
  },
  {
    "text": "tests their acceptance tests their integration API component tests one",
    "start": "384539",
    "end": "391229"
  },
  {
    "text": "thing people do agree on is the GUI tests at the top which I have had a lot",
    "start": "391229",
    "end": "399060"
  },
  {
    "text": "of experience with and have come to the conclusion that generally they are a bad idea for anything other than just",
    "start": "399060",
    "end": "405440"
  },
  {
    "text": "smoke testing your system but this is a good kind of generalization of the types",
    "start": "405440",
    "end": "411680"
  },
  {
    "text": "of different types of testing that you want to be performing as you move further up your tests are slower",
    "start": "411680",
    "end": "417170"
  },
  {
    "text": "generally more brittle down the bottom not as comprehensive so you need a mix of these things so just different",
    "start": "417170",
    "end": "425930"
  },
  {
    "text": "scenarios that I have in my mind and kind of want to address is you've got different problems that you have to",
    "start": "425930",
    "end": "432950"
  },
  {
    "text": "solve when you're testing so it could be you don't have much testing you haven't invested much time so you want to get",
    "start": "432950",
    "end": "438830"
  },
  {
    "text": "some confidence well you probably want to do a specific type of testing will give you the confidence without a lot of",
    "start": "438830",
    "end": "445490"
  },
  {
    "text": "effort what about a bug really easy to fix that in a bit of code that's moving",
    "start": "445490",
    "end": "450650"
  },
  {
    "text": "all the time you probably want to do lower level unit tests for that sort of thing or you're shipping a particularly",
    "start": "450650",
    "end": "457130"
  },
  {
    "text": "critical feature so you need to have a lot of confidence that your tests are",
    "start": "457130",
    "end": "462230"
  },
  {
    "text": "actually going to stop regressions because it could be expensive embarrassing whatever if bugs are in",
    "start": "462230",
    "end": "468890"
  },
  {
    "text": "that area of your system the point is there's no real one testing strategy so",
    "start": "468890",
    "end": "475550"
  },
  {
    "text": "when we dive into the code we're going to go through different levels and just apply different techniques to each of",
    "start": "475550",
    "end": "481700"
  },
  {
    "text": "them and show that we can actually blend some of these together to really get the best out of everything so unit tests the",
    "start": "481700",
    "end": "489380"
  },
  {
    "text": "definition that I like and I follow is they're in process they're isolated",
    "start": "489380",
    "end": "495860"
  },
  {
    "text": "they're fast and they test one thing one thing that I do fight against is when people talk",
    "start": "495860",
    "end": "503660"
  },
  {
    "text": "about they have to be a module or they have to be a function or have to be a class that ends up with people overusing",
    "start": "503660",
    "end": "510950"
  },
  {
    "text": "mocking frameworks and we'll go into why that's a bad idea later so if we're",
    "start": "510950",
    "end": "516710"
  },
  {
    "text": "looking at a little spider chart here unit test looks something like that they're quite reliable they give you a",
    "start": "516710",
    "end": "522890"
  },
  {
    "text": "bit of confidence that generally you have to write a lot of them and that gives you the confidence quite",
    "start": "522890",
    "end": "527930"
  },
  {
    "text": "maintainable because they don't do much but they're not very comprehensive",
    "start": "527930",
    "end": "534190"
  },
  {
    "text": "so they have pros fast write faster run easy to debug but they inhibit",
    "start": "535139",
    "end": "541420"
  },
  {
    "text": "refactoring so show you some techniques later what it doesn't show you is issues",
    "start": "541420",
    "end": "548230"
  },
  {
    "text": "between collaborations they've seen a number of the other talks I've seen over MVC last couple of days there seems to",
    "start": "548230",
    "end": "554320"
  },
  {
    "text": "be people moving more towards integration and UI sort of style tests because it solves that particular",
    "start": "554320",
    "end": "560980"
  },
  {
    "text": "problem um when talking about unit tests there's",
    "start": "560980",
    "end": "567010"
  },
  {
    "text": "a lot of different ways you can obviously start with in JavaScript the",
    "start": "567010",
    "end": "572920"
  },
  {
    "text": "main two ways are using browsers or using node everything else is a subset",
    "start": "572920",
    "end": "578410"
  },
  {
    "text": "of one of those I'm a massive fan of going down the node path so I when I'm",
    "start": "578410",
    "end": "583810"
  },
  {
    "text": "writing these sort of tests I don't really care about browser quirks I",
    "start": "583810",
    "end": "589089"
  },
  {
    "text": "really want to test the logic of my code because it will have other techniques",
    "start": "589089",
    "end": "594940"
  },
  {
    "text": "like browser stack which will test your application in as many browsers as you need and have sort of high-level tests",
    "start": "594940",
    "end": "601720"
  },
  {
    "text": "for that particular reason be very specific in what you want to get out of",
    "start": "601720",
    "end": "606880"
  },
  {
    "text": "each of these different style testing so examples of those are maca jest and",
    "start": "606880",
    "end": "613889"
  },
  {
    "text": "tapes as a bunch of others the one that I'm going to be using today is jest so",
    "start": "613889",
    "end": "619470"
  },
  {
    "text": "you can use just with anything it's come out of Facebook so it's quite tied to",
    "start": "619470",
    "end": "624610"
  },
  {
    "text": "the react community but there's been a lot of people around the angular 2 and a really a community starting to pick jest",
    "start": "624610",
    "end": "631420"
  },
  {
    "text": "up because it brings some really fresh ideas especially when you're starting to use the new world of JavaScript with es6",
    "start": "631420",
    "end": "639370"
  },
  {
    "text": "and webpack and those sort of things it works really well with that style out of",
    "start": "639370",
    "end": "645190"
  },
  {
    "text": "curiosity who's using angular 1 no angular 2 react",
    "start": "645190",
    "end": "654209"
  },
  {
    "text": "what about Aurelia okay so what about vanilla Jas kind of traditional okay",
    "start": "654209",
    "end": "662040"
  },
  {
    "text": "who's using webpack here not too many so what sir what are the",
    "start": "662040",
    "end": "668160"
  },
  {
    "text": "others using call something out of mist yep so knockouts an interesting one what",
    "start": "668160",
    "end": "676980"
  },
  {
    "text": "do you use through your package manager' is it Bauer yep so if you're using NPM",
    "start": "676980",
    "end": "688140"
  },
  {
    "text": "via package manager just as great it sort of works with that new node way of thinking a lot of what I'm going to be",
    "start": "688140",
    "end": "695190"
  },
  {
    "text": "talking about is moving into that direction where I see JavaScript moving not talking too much about using bower",
    "start": "695190",
    "end": "702450"
  },
  {
    "text": "global script tags and the problems that come out than that so let's dive into it",
    "start": "702450",
    "end": "709230"
  },
  {
    "text": "let's have a look at some unit testing so I've got a little simple app here is",
    "start": "709230",
    "end": "721560"
  },
  {
    "text": "pretty calm popular at this conference a lot of speakers like to track what beers they're drinking so I thought really",
    "start": "721560",
    "end": "729510"
  },
  {
    "text": "simple demo would be a like tracking what whisky you like drinking so it's",
    "start": "729510",
    "end": "736770"
  },
  {
    "text": "quite really really simple you just start typing after a couple of seconds",
    "start": "736770",
    "end": "742110"
  },
  {
    "text": "it'll find a bunch of different whiskies and you can check them in not going to go much further than that but this gives",
    "start": "742110",
    "end": "747930"
  },
  {
    "text": "us a nice base to be able to test with so the unit tests that I want to write",
    "start": "747930",
    "end": "753420"
  },
  {
    "text": "is around the search so I start typing after half a second it executes my search so the pretty common pattern you",
    "start": "753420",
    "end": "761250"
  },
  {
    "text": "see",
    "start": "761250",
    "end": "763490"
  },
  {
    "text": "so in here I've got my utils and part of",
    "start": "766500",
    "end": "771940"
  },
  {
    "text": "my utilities is I've got this little search latest class or function is",
    "start": "771940",
    "end": "780490"
  },
  {
    "text": "everyone familiar with like a s six modules import and export syntax anyone",
    "start": "780490",
    "end": "786160"
  },
  {
    "text": "not familiar cool I won't go over it then so this is a typical thing I see",
    "start": "786160",
    "end": "793210"
  },
  {
    "text": "when I see these sort of functions people keep their modules going further",
    "start": "793210",
    "end": "798340"
  },
  {
    "text": "and further down so it's pulling in my API which is then calling the web server to get all the results you pass in a",
    "start": "798340",
    "end": "807160"
  },
  {
    "text": "callback witches do I have results let's bump that up in it then sets the delay",
    "start": "807160",
    "end": "817030"
  },
  {
    "text": "for half a second once that has fired it",
    "start": "817030",
    "end": "822160"
  },
  {
    "text": "checks to see if the search term has changed if it hasn't it'll execute the",
    "start": "822160",
    "end": "827890"
  },
  {
    "text": "search when the search comes back it'll make sure it's still the same and then it will call the to have results",
    "start": "827890",
    "end": "833970"
  },
  {
    "text": "function so that's kind of cool works I've got a test here which tests this",
    "start": "833970",
    "end": "842310"
  },
  {
    "text": "quite simple it searches after timeout I",
    "start": "843930",
    "end": "849960"
  },
  {
    "text": "call search latest give it a callback I then execute search term change changed",
    "start": "850380",
    "end": "857880"
  },
  {
    "text": "this is what jess looks like I'll just run this",
    "start": "857880",
    "end": "863190"
  },
  {
    "text": "cool so it's quite nice it's got a console runner that gives you a lot of",
    "start": "868040",
    "end": "873600"
  },
  {
    "text": "feedback you can just type in test name still tur down so here you can see my",
    "start": "873600",
    "end": "881610"
  },
  {
    "text": "testers blowing up because I don't have a oh god no one can see that but uh I'll",
    "start": "881610",
    "end": "895170"
  },
  {
    "text": "just wait for my machine to reboot and then I can continue writing the test so",
    "start": "895170",
    "end": "900540"
  },
  {
    "text": "had this happen for a long time excuse me while I start my computer",
    "start": "900540",
    "end": "906809"
  },
  {
    "text": "again",
    "start": "906809",
    "end": "909350"
  },
  {
    "text": "you like that",
    "start": "937160",
    "end": "940149"
  },
  {
    "text": "into presenter mode so the last",
    "start": "963770",
    "end": "970010"
  },
  {
    "text": "conference I was at quite a little while ago I started went up to do my",
    "start": "970010",
    "end": "978410"
  },
  {
    "text": "presentation open my laptop machinery boots for our windows update not having",
    "start": "978410",
    "end": "984440"
  },
  {
    "text": "much luck okay so we're almost back mmm",
    "start": "984440",
    "end": "994810"
  },
  {
    "text": "keoki I have to close all of the things",
    "start": "994810",
    "end": "1002880"
  },
  {
    "text": "okay get our tests running again and we're",
    "start": "1005890",
    "end": "1015490"
  },
  {
    "text": "almost back where we are",
    "start": "1015490",
    "end": "1018510"
  },
  {
    "text": "cool so back after a brief interruption",
    "start": "1031430",
    "end": "1036100"
  },
  {
    "text": "also I just have to stop the app up again",
    "start": "1037270",
    "end": "1041949"
  },
  {
    "text": "okay so you can see back where we are you can see that my tests have failed because of the network request this",
    "start": "1057880",
    "end": "1064690"
  },
  {
    "text": "typical problem you're talking to an your API you need a bunch of stuff started don't have things isolated so",
    "start": "1064690",
    "end": "1072160"
  },
  {
    "text": "once we want everything's all started here my tests now pass because it can",
    "start": "1072160",
    "end": "1077380"
  },
  {
    "text": "talk to the running API we want to get rid of that problem so the first thing",
    "start": "1077380",
    "end": "1082480"
  },
  {
    "text": "is in my search term changed this here is a problem I'm invoking an API and",
    "start": "1082480",
    "end": "1087760"
  },
  {
    "text": "then makes my tests brittle so one thing we want to move towards especially if we",
    "start": "1087760",
    "end": "1094179"
  },
  {
    "text": "have code with logic is making sure these things are as pure as possible this is a much better approach than",
    "start": "1094179",
    "end": "1102510"
  },
  {
    "text": "mocking so in this instance I've got two options I can either mock the HTTP call out or I",
    "start": "1102510",
    "end": "1109600"
  },
  {
    "text": "can raise the function up if you raise",
    "start": "1109600",
    "end": "1115600"
  },
  {
    "text": "the function up which I'm going to do here you end up with a lot of modules which don't actually have a deep",
    "start": "1115600",
    "end": "1121570"
  },
  {
    "text": "dependency hierarchy and then it makes things much easier to reuse much more",
    "start": "1121570",
    "end": "1126669"
  },
  {
    "text": "composable so I'll just call this perform search",
    "start": "1126669",
    "end": "1132690"
  },
  {
    "text": "and switch that over so now this cat",
    "start": "1136190",
    "end": "1142040"
  },
  {
    "text": "this utility is not actually in control of whether it where it actually performs",
    "start": "1142040",
    "end": "1147380"
  },
  {
    "text": "the search it's just actually doing that delay and then invoke so if I go over to",
    "start": "1147380",
    "end": "1152900"
  },
  {
    "text": "the test now I can pass this as my second parameter so perform search",
    "start": "1152900",
    "end": "1158750"
  },
  {
    "text": "that's great it's just a function and then it returns a the results so I can",
    "start": "1158750",
    "end": "1167390"
  },
  {
    "text": "start off with ID of one name is I don't",
    "start": "1167390",
    "end": "1174620"
  },
  {
    "text": "know let's leave that blank for the moment and then we'll go grab some others and then we need a region",
    "start": "1174620",
    "end": "1183100"
  },
  {
    "text": "we open the browser",
    "start": "1192410",
    "end": "1195460"
  },
  {
    "text": "cool I will grab Glenmorangie Signet as our whiskey cool so now instead of",
    "start": "1207250",
    "end": "1214960"
  },
  {
    "text": "hitting my API I'm just blocking it out manually test my test still passes",
    "start": "1214960",
    "end": "1220630"
  },
  {
    "text": "problem is I'm not actually I'm just making sure the tests are defined this",
    "start": "1220630",
    "end": "1226180"
  },
  {
    "text": "is one feature I really really love out of should Lee and the dotnet community",
    "start": "1226180",
    "end": "1231430"
  },
  {
    "text": "is something called approval tests the idea is this when you've got something",
    "start": "1231430",
    "end": "1237100"
  },
  {
    "text": "quite complex to assert that could be like a bunch of data or a single object",
    "start": "1237100",
    "end": "1243670"
  },
  {
    "text": "that has a lot of properties you find you unit tests have sort of seven or eight logical asserts they're all",
    "start": "1243670",
    "end": "1249760"
  },
  {
    "text": "testing the same thing but what you're trying to assert against is quite hard",
    "start": "1249760",
    "end": "1254770"
  },
  {
    "text": "to assert so just has this thing called should match snapshot which is exactly",
    "start": "1254770",
    "end": "1262330"
  },
  {
    "text": "the same thing so instead of going expect results start like first index",
    "start": "1262330",
    "end": "1268330"
  },
  {
    "text": "name to be blah I can just go should match snapshot when just runs it should",
    "start": "1268330",
    "end": "1277750"
  },
  {
    "text": "tell me that I have one snapshot now",
    "start": "1277750",
    "end": "1282900"
  },
  {
    "text": "what that will actually do is write out a snapshot there that's good you trigger",
    "start": "1283830",
    "end": "1291100"
  },
  {
    "text": "that",
    "start": "1291100",
    "end": "1293280"
  },
  {
    "text": "hmm empty why is it empty",
    "start": "1299440",
    "end": "1308390"
  },
  {
    "text": "search term returns can anyone see what I've done art promise doing everything",
    "start": "1321959",
    "end": "1333119"
  },
  {
    "text": "asynchronously I returned a value not a promise okay so here you can see it's",
    "start": "1333119",
    "end": "1343469"
  },
  {
    "text": "gone snapshot summary one snapshot has been written so what that'll do is will",
    "start": "1343469",
    "end": "1349349"
  },
  {
    "text": "actually drop our test result directly into this snapshot file this is really",
    "start": "1349349",
    "end": "1355289"
  },
  {
    "text": "nice because in my test if I go now change this to ten-year-old and go save",
    "start": "1355289",
    "end": "1362099"
  },
  {
    "text": "I'll have a failed test and it gives me",
    "start": "1362099",
    "end": "1368849"
  },
  {
    "text": "a gif of what the value was before and what it is now I know the Reds really",
    "start": "1368849",
    "end": "1375419"
  },
  {
    "text": "hard to see on the projector but it gives us a really nice way of testing this stuff we can then just go just",
    "start": "1375419",
    "end": "1384209"
  },
  {
    "text": "update and it will copy whatever is the new value over the old one so it makes",
    "start": "1384209",
    "end": "1389879"
  },
  {
    "text": "it easy to maintain these things over time any questions about snapshot",
    "start": "1389879",
    "end": "1394979"
  },
  {
    "text": "testing does anyone use snapshot or approval testing before give it a go",
    "start": "1394979",
    "end": "1401309"
  },
  {
    "text": "it's a it saves so much time",
    "start": "1401309",
    "end": "1406729"
  },
  {
    "text": "it is so it'll be named after the file",
    "start": "1408979",
    "end": "1414209"
  },
  {
    "text": "here and it exports for each test name",
    "start": "1414209",
    "end": "1419879"
  },
  {
    "text": "it exports a value which is then used as the snapshot",
    "start": "1419879",
    "end": "1425119"
  },
  {
    "text": "yeah so there's actually um another one for JavaScript as well so the library",
    "start": "1427520",
    "end": "1432559"
  },
  {
    "text": "that introduced this concept was called a approval test and it actually has a net version a JavaScript version a",
    "start": "1432559",
    "end": "1439070"
  },
  {
    "text": "Python version that's pretty much for every of them all of the different",
    "start": "1439070",
    "end": "1444230"
  },
  {
    "text": "frameworks rather and ecosystems the one difference is that what approval tests",
    "start": "1444230",
    "end": "1449900"
  },
  {
    "text": "and should we do is when the test fails it'll actually just pop up a diff tool of what it was before and after and then",
    "start": "1449900",
    "end": "1456830"
  },
  {
    "text": "you merge the results so if you are happy with the changes you merge it across to the approved file the where",
    "start": "1456830",
    "end": "1465590"
  },
  {
    "text": "Facebook and moving with just is interactive resolution in the console so",
    "start": "1465590",
    "end": "1472160"
  },
  {
    "text": "it's quite a really really powerful way of asserting against data yes so that is",
    "start": "1472160",
    "end": "1483440"
  },
  {
    "text": "your assertion that file is your assertion so you have to check that in so that's a little let's go back into",
    "start": "1483440",
    "end": "1491330"
  },
  {
    "text": "PowerPoint now blue screens are really inconvenient",
    "start": "1491330",
    "end": "1496360"
  },
  {
    "text": "I can't even resume at the same spot cause under the exist cool so the two",
    "start": "1503140",
    "end": "1514810"
  },
  {
    "text": "things have kind of started showing with unit tests is keeping modules really pure so make sure you rather than",
    "start": "1514810",
    "end": "1521470"
  },
  {
    "text": "mocking things out and ending up with quite a deep hierarchy this is really",
    "start": "1521470",
    "end": "1527080"
  },
  {
    "text": "common in net with IOC containers try and keep functions really really pure so",
    "start": "1527080",
    "end": "1532780"
  },
  {
    "text": "you pass your different dependencies in and make the boundaries between these",
    "start": "1532780",
    "end": "1537790"
  },
  {
    "text": "different modules values or objects instead because then they're super easy to test you can just create what you",
    "start": "1537790",
    "end": "1546310"
  },
  {
    "text": "want to test against pass it in that the function as pure so there's no side effects and mocks the potential design",
    "start": "1546310",
    "end": "1555970"
  },
  {
    "text": "issues really so jess does have the ability to mock out modules which is",
    "start": "1555970",
    "end": "1562690"
  },
  {
    "text": "really handy it also has the ability to mock out all the timers so in that set",
    "start": "1562690",
    "end": "1568810"
  },
  {
    "text": "timeout that we are using you could use just to take control of that timer until",
    "start": "1568810",
    "end": "1574600"
  },
  {
    "text": "all time is to resolve so you don't have to wait half a second in your tests",
    "start": "1574600",
    "end": "1579960"
  },
  {
    "text": "those use of mocks not too bad but if you can avoid them ends up being nicer in JavaScript",
    "start": "1579960",
    "end": "1586050"
  },
  {
    "text": "so the next when it's unit tests are kind of great we can try and make these",
    "start": "1586050",
    "end": "1591670"
  },
  {
    "text": "small little units of code but it's not super interesting the type of tests that",
    "start": "1591670",
    "end": "1596830"
  },
  {
    "text": "I'm really getting excited about are still unit tests keeping everything in process but allowing it to test the",
    "start": "1596830",
    "end": "1605230"
  },
  {
    "text": "majority of your application so it's not quite unit integration tests because you",
    "start": "1605230",
    "end": "1610480"
  },
  {
    "text": "don't go out of process but it's quite close so if this is a unit test and the",
    "start": "1610480",
    "end": "1617920"
  },
  {
    "text": "sort of attributes of that if we go to higher level the orange there is kind of bit higher confidence definitely slower",
    "start": "1617920",
    "end": "1626290"
  },
  {
    "text": "less reliable because there's more stuff going on probably more chance of issues",
    "start": "1626290",
    "end": "1634380"
  },
  {
    "text": "I find them really maintainable because they remove all of these implementation details and they also enable you to",
    "start": "1634419",
    "end": "1642009"
  },
  {
    "text": "refactor really rapidly so these",
    "start": "1642009",
    "end": "1647169"
  },
  {
    "text": "high-level unit tests I find them really faster right they're quite fast to run it also it covers the interaction",
    "start": "1647169",
    "end": "1654129"
  },
  {
    "text": "between modules with unit tests miss and they also a less prone to breaking during refactoring so they're kind of",
    "start": "1654129",
    "end": "1660429"
  },
  {
    "text": "your staple tests that you never want to modify during refactoring where unit",
    "start": "1660429",
    "end": "1665980"
  },
  {
    "text": "tests if you refactor you can delete them if they if they break that's kind",
    "start": "1665980",
    "end": "1671259"
  },
  {
    "text": "of my mindset because you your unit tests are testing a lot about the",
    "start": "1671259",
    "end": "1676659"
  },
  {
    "text": "implementation of your code and if the implementation is no longer what the test is asserting probably change they",
    "start": "1676659",
    "end": "1685119"
  },
  {
    "text": "have two downsides though that they're a lot harder to debug and they cannot cover all scenarios there's a really",
    "start": "1685119",
    "end": "1692080"
  },
  {
    "text": "really good talk called unit integration tests are a scam and the idea of this",
    "start": "1692080",
    "end": "1699309"
  },
  {
    "text": "talk is prove going through mathematically proving that high-level or integration tests are bad for your",
    "start": "1699309",
    "end": "1706779"
  },
  {
    "text": "application and the reason for that is if you've got a number of modules and they have a number of code paths as you",
    "start": "1706779",
    "end": "1714730"
  },
  {
    "text": "add more modules in you have a combinatorial explosion of the paths through your application so these style",
    "start": "1714730",
    "end": "1721059"
  },
  {
    "text": "tests cannot possibly test all of the paths through your application this is why you still need the low-level unit",
    "start": "1721059",
    "end": "1727659"
  },
  {
    "text": "tests quickly I'm going to show you two things I'm going to show you an approach",
    "start": "1727659",
    "end": "1732850"
  },
  {
    "text": "to that I use to testing single page applications it is specific all it is",
    "start": "1732850",
    "end": "1738730"
  },
  {
    "text": "implemented using react but a lot of the same concepts can be applied elsewhere and the other one is testing a nodejs",
    "start": "1738730",
    "end": "1746619"
  },
  {
    "text": "Express API so another style of testing called subcutaneous testings so when I'm",
    "start": "1746619",
    "end": "1755499"
  },
  {
    "text": "testing a single page application there's a couple of things I do I said that before I like testing in node so",
    "start": "1755499",
    "end": "1762609"
  },
  {
    "text": "node never has a browser how do I do sort of these high-level browser tests",
    "start": "1762609",
    "end": "1768450"
  },
  {
    "text": "just does this by default as soon as you run ingest it actually already has a MOT",
    "start": "1768450",
    "end": "1775200"
  },
  {
    "text": "Don using je estan I then make sure all of my external services are marked so",
    "start": "1775200",
    "end": "1781630"
  },
  {
    "text": "any HTTP calls that sockets those sort of things they're the points that I mock I try",
    "start": "1781630",
    "end": "1787420"
  },
  {
    "text": "very very hard not to mock anything within my application a test simply just",
    "start": "1787420",
    "end": "1794140"
  },
  {
    "text": "mounts your application into this test Dom and then starts like simulating",
    "start": "1794140",
    "end": "1799630"
  },
  {
    "text": "browser events and then making sure your application behaves the way it should so that something gets rendered the nice",
    "start": "1799630",
    "end": "1806620"
  },
  {
    "text": "thing about all of this though is with one level sort of below we're using the",
    "start": "1806620",
    "end": "1811750"
  },
  {
    "text": "Dom but we've mocked all of that out so it stays really quick we don't have to worry about starting up browsers we",
    "start": "1811750",
    "end": "1817300"
  },
  {
    "text": "don't have to worry about browser quirks those sort of things and then in the",
    "start": "1817300",
    "end": "1822550"
  },
  {
    "text": "node web service similar sort of concepts we want to make sure that we",
    "start": "1822550",
    "end": "1827830"
  },
  {
    "text": "can mock out any external things like databases we also want to because we're",
    "start": "1827830",
    "end": "1835360"
  },
  {
    "text": "not going to go through our API directly we want to reduce logic that's in our middlewares so if you're all net developers and your",
    "start": "1835360",
    "end": "1842320"
  },
  {
    "text": "back-end these are kind of your MVC action filters and those sort of things",
    "start": "1842320",
    "end": "1847930"
  },
  {
    "text": "you want to remove as much logic out of those as possible so I'll jump across to",
    "start": "1847930",
    "end": "1857580"
  },
  {
    "text": "so this is my really simple react up and",
    "start": "1861160",
    "end": "1869370"
  },
  {
    "text": "this is the start of the test so we've seen here that I've got my search and after a certain time it hits the API I",
    "start": "1869370",
    "end": "1879360"
  },
  {
    "text": "use a tool called fetch mock to mock my API this will change if using angular",
    "start": "1879360",
    "end": "1885760"
  },
  {
    "text": "you'll have to use their HTTP mocks those sort of things but the first thing I do is make sure that I don't want",
    "start": "1885760",
    "end": "1892690"
  },
  {
    "text": "anything succeeding by default so I want if my test calls an API I never want it",
    "start": "1892690",
    "end": "1899050"
  },
  {
    "text": "to go out so I start off saying anything I haven't explicitly mocked blows up with a 500 then we'll just mock out this",
    "start": "1899050",
    "end": "1907410"
  },
  {
    "text": "the get function the next thing I want",
    "start": "1907410",
    "end": "1912460"
  },
  {
    "text": "to do is I want to mount my application so I can go const up equals mount app so",
    "start": "1912460",
    "end": "1921130"
  },
  {
    "text": "i'm using the tool called enzyme it is just a wrapper around the react test",
    "start": "1921130",
    "end": "1927880"
  },
  {
    "text": "utilities and essentially it takes this app component it creates the divs in the fake browser",
    "start": "1927880",
    "end": "1934030"
  },
  {
    "text": "and then melts my app into it and gives me back an instance if you're using",
    "start": "1934030",
    "end": "1940630"
  },
  {
    "text": "another framework these sort of techniques can still be used so the",
    "start": "1940630",
    "end": "1946300"
  },
  {
    "text": "jeaious dome is actually a complete poly well reasonably complete polyfill for the dom so most of these libraries can",
    "start": "1946300",
    "end": "1953230"
  },
  {
    "text": "actually work using it the first thing I'll do is I will find my input which is",
    "start": "1953230",
    "end": "1963490"
  },
  {
    "text": "called searchbox thing I like about these style",
    "start": "1963490",
    "end": "1975940"
  },
  {
    "text": "of tests is their because they are so high they allow you just to really focus",
    "start": "1975940",
    "end": "1981549"
  },
  {
    "text": "on what what are you trying to test the next thing to do is once I've got my",
    "start": "1981549",
    "end": "1987220"
  },
  {
    "text": "search box I can actually start simulating events",
    "start": "1987220",
    "end": "1992159"
  },
  {
    "text": "so I'm just simulating a textbox change event reacts quite nice in this way it",
    "start": "2005250",
    "end": "2011320"
  },
  {
    "text": "has an amusing I'm taking advantage of react synthetic event system but if",
    "start": "2011320",
    "end": "2017770"
  },
  {
    "text": "you're using another library like just even jQuery you could trigger use jQuery",
    "start": "2017770",
    "end": "2023470"
  },
  {
    "text": "to trigger real Dom events so once I've simulated that that should",
    "start": "2023470",
    "end": "2029860"
  },
  {
    "text": "kick off my my test my research so what I need to do is I need to wait for that",
    "start": "2029860",
    "end": "2036910"
  },
  {
    "text": "half a second to elapse because I'm not locking out time yet does anyone in the",
    "start": "2036910",
    "end": "2042850"
  },
  {
    "text": "concurrency talked earlier like the JavaScript asynchronous patterns yeah so",
    "start": "2042850",
    "end": "2049800"
  },
  {
    "text": "this is actually using a think in a weight that is in stage three at the",
    "start": "2049800",
    "end": "2056200"
  },
  {
    "text": "moment I might have hit stage for it with Babel so essentially what this",
    "start": "2056200",
    "end": "2061388"
  },
  {
    "text": "allows me to do is remove callbacks from my code so I just want to await a weight function and just say wait wait 700",
    "start": "2061389",
    "end": "2069908"
  },
  {
    "text": "milliseconds so essentially that's going to pause my test for 700 milliseconds hopefully by this time the the input box",
    "start": "2069909",
    "end": "2077740"
  },
  {
    "text": "is fired off that search and now it's searching because I'm mocking out the",
    "start": "2077740",
    "end": "2085600"
  },
  {
    "text": "API that returns instantly so I don't have to worry about latency there so now",
    "start": "2085600",
    "end": "2092770"
  },
  {
    "text": "I should have are the results so I can actually just go app dot find and then",
    "start": "2092770",
    "end": "2100360"
  },
  {
    "text": "in my app for each result I'm just creating a span which has some text in",
    "start": "2100360",
    "end": "2106330"
  },
  {
    "text": "it so I'll just find me all stands",
    "start": "2106330",
    "end": "2112740"
  },
  {
    "text": "because there's only going to be one result I can actually just go expect app",
    "start": "2116340",
    "end": "2122710"
  },
  {
    "text": "dot fine spanned text to be Glenmorangie",
    "start": "2122710",
    "end": "2127990"
  },
  {
    "text": "signal and save that cool so it didn't",
    "start": "2127990",
    "end": "2143530"
  },
  {
    "text": "find it",
    "start": "2143530",
    "end": "2146190"
  },
  {
    "text": "another missed",
    "start": "2152880",
    "end": "2155839"
  },
  {
    "text": "so we are know so find actually is really really handy at I'll search by ID",
    "start": "2163410",
    "end": "2170279"
  },
  {
    "text": "or react component or class so it's kind of this hybrid so if I had my own",
    "start": "2170279",
    "end": "2177420"
  },
  {
    "text": "abstractions my own components I can actually pass my my component in this is",
    "start": "2177420",
    "end": "2188250"
  },
  {
    "text": "something I'm going to show you a bit later with that and refactor this to use something called the page object pattern",
    "start": "2188250",
    "end": "2195019"
  },
  {
    "text": "just to save time I'll just copy the",
    "start": "2195170",
    "end": "2201710"
  },
  {
    "text": "hopefully that'll pass",
    "start": "2205829",
    "end": "2209190"
  },
  {
    "text": "can search for whiskey",
    "start": "2216970",
    "end": "2220530"
  },
  {
    "text": "ah I know so we changed the signature of our test so it's actually found the",
    "start": "2226800",
    "end": "2234210"
  },
  {
    "text": "legit problem so when I've got my search",
    "start": "2234210",
    "end": "2239610"
  },
  {
    "text": "latest I now have to pass a second function into that which is that perform",
    "start": "2239610",
    "end": "2245070"
  },
  {
    "text": "search and that just calls my search whiskey's so it was found finding a",
    "start": "2245070",
    "end": "2253440"
  },
  {
    "text": "legit bug in my code cool now everything passes so the style test",
    "start": "2253440",
    "end": "2262020"
  },
  {
    "text": "is really really nice because you're working at your app level you can still use abstractions for things so you're",
    "start": "2262020",
    "end": "2268290"
  },
  {
    "text": "not just testing the Dom so it's not super brittle like UI tests and everything's in memory so the nice thing",
    "start": "2268290",
    "end": "2276240"
  },
  {
    "text": "is if you are invoking promises and need to resolve things because you've got",
    "start": "2276240",
    "end": "2281790"
  },
  {
    "text": "everything within your test you can actually control when those promises resolve one of the largest problems",
    "start": "2281790",
    "end": "2288900"
  },
  {
    "text": "around UI test is when you click on a button and it's doing something asynchronous you can't control when that",
    "start": "2288900",
    "end": "2296190"
  },
  {
    "text": "resolves so you have to kind of guess similar to the way I'm doing the wait",
    "start": "2296190",
    "end": "2301320"
  },
  {
    "text": "800 milliseconds here but that's because of the timer if I mock that out which I can because it's all in process it's not",
    "start": "2301320",
    "end": "2308700"
  },
  {
    "text": "a separate browser window I can just mock the timers and now I can tell them",
    "start": "2308700",
    "end": "2315570"
  },
  {
    "text": "also resolve so it's really really super flexible and it's a lovely way of writing tests any questions around this",
    "start": "2315570",
    "end": "2321690"
  },
  {
    "text": "before we move on to the API so sweet",
    "start": "2321690",
    "end": "2328760"
  },
  {
    "text": "so our API is up here so is everyone",
    "start": "2329170",
    "end": "2337180"
  },
  {
    "text": "using HughesNet here most people is anyone actually using node no cool",
    "start": "2337180",
    "end": "2349599"
  },
  {
    "text": "I'll skip through this a lot of these techniques I've actually taken directly from the way I build web api anyway so a",
    "start": "2349599",
    "end": "2358059"
  },
  {
    "text": "lot of these can be applied directly back to your dotnet project but I'll move through it reasonably quick so here",
    "start": "2358059",
    "end": "2366309"
  },
  {
    "text": "I've just got a route that I define the whiskey's route I then get the query off",
    "start": "2366309",
    "end": "2371829"
  },
  {
    "text": "the query string and then I call my database function here I actually just",
    "start": "2371829",
    "end": "2380680"
  },
  {
    "text": "returned 200 and whiskey's and then I returned the error this is written like",
    "start": "2380680",
    "end": "2386470"
  },
  {
    "text": "this very specifically I do not want anything that's not HTTP or API related",
    "start": "2386470",
    "end": "2392349"
  },
  {
    "text": "in here so in the.net world one of the libraries are used to facilitate this as",
    "start": "2392349",
    "end": "2398710"
  },
  {
    "text": "a library by Jimmy Bogart called mediator and it allows you to plug sort of middlewares in and it makes all your",
    "start": "2398710",
    "end": "2405789"
  },
  {
    "text": "API control is really really thin taking the same approach here",
    "start": "2405789",
    "end": "2411869"
  },
  {
    "text": "so my test I actually just want to create an in-memory database and then go",
    "start": "2419160",
    "end": "2424200"
  },
  {
    "text": "from just under the API surface area through to the database this tests all",
    "start": "2424200",
    "end": "2429900"
  },
  {
    "text": "of the moving parts and gives me a heap of confidence I'm using a library called",
    "start": "2429900",
    "end": "2436200"
  },
  {
    "text": "connects so it's very similar to entity framework or in hibernate or one of",
    "start": "2436200",
    "end": "2441720"
  },
  {
    "text": "these all I do is my connect file which",
    "start": "2441720",
    "end": "2448110"
  },
  {
    "text": "is kind of my configuration to my database I've got two options of development one I've got test one test",
    "start": "2448110",
    "end": "2454920"
  },
  {
    "text": "one is simply an in-memory sequel Lite database",
    "start": "2454920",
    "end": "2459560"
  },
  {
    "text": "so I run my database migrations this is a super important area of when you start",
    "start": "2469400",
    "end": "2475580"
  },
  {
    "text": "doing these tests you need a reproducible way of building up your databases so another one of my open",
    "start": "2475580",
    "end": "2482150"
  },
  {
    "text": "source projects in net land is called DB up and I use that quite fondly to do",
    "start": "2482150",
    "end": "2488900"
  },
  {
    "text": "the same thing the idea is you just have a list of migrations and it just keeps a",
    "start": "2488900",
    "end": "2496910"
  },
  {
    "text": "record of which migrations it's run so you can create an empty database and run it up to a specific point so each of my",
    "start": "2496910",
    "end": "2504860"
  },
  {
    "text": "tests will just create an empty in-memory database run the migration so now I'm up to date and then set up some",
    "start": "2504860",
    "end": "2512810"
  },
  {
    "text": "sort of test expected data I then use",
    "start": "2512810",
    "end": "2519020"
  },
  {
    "text": "same code that I would use in my API so",
    "start": "2519020",
    "end": "2524920"
  },
  {
    "text": "importantly I don't call my API I'd call whatever my API is calling so I remove",
    "start": "2524920",
    "end": "2530780"
  },
  {
    "text": "all of those HTTP concepts because I'm going just below the surface this style",
    "start": "2530780",
    "end": "2535820"
  },
  {
    "text": "is called subcutaneous testing it's also really useful if you're doing MVC on the",
    "start": "2535820",
    "end": "2542810"
  },
  {
    "text": "front end you can go just below the view side so work at an abstraction below the",
    "start": "2542810",
    "end": "2548930"
  },
  {
    "text": "HTTP level and allows you to get really effective testing without having to go",
    "start": "2548930",
    "end": "2554030"
  },
  {
    "text": "through something that you have no control of so here should return all",
    "start": "2554030",
    "end": "2560900"
  },
  {
    "text": "whiskey's when get receives it called we call it now this is a quite an important",
    "start": "2560900",
    "end": "2568270"
  },
  {
    "text": "technique that I use all the time it's called creating a seam in your code so",
    "start": "2568270",
    "end": "2574540"
  },
  {
    "text": "if I go into my database get whiskey's call actually I'm defining a second",
    "start": "2574540",
    "end": "2580040"
  },
  {
    "text": "optional parameter which is tests database that allows me to pass a",
    "start": "2580040",
    "end": "2585050"
  },
  {
    "text": "database instance in that this method will use if I don't it'll just use my",
    "start": "2585050",
    "end": "2590990"
  },
  {
    "text": "app like the applications one so that's quite handy",
    "start": "2590990",
    "end": "2597510"
  },
  {
    "text": "so you can have a look if you look up that pattern it's known as a test seam it's quite common in the dot in the Java",
    "start": "2597510",
    "end": "2605430"
  },
  {
    "text": "space actually because I've set up the",
    "start": "2605430",
    "end": "2610710"
  },
  {
    "text": "data here I've only got one in there and then I can just call to be one",
    "start": "2610710",
    "end": "2616050"
  },
  {
    "text": "I hate these sort of tests and I do this all the time when there's some sort of test data so this is a perfect example",
    "start": "2616050",
    "end": "2622740"
  },
  {
    "text": "if you have any of these in your code once again just go get rid of that change this to two should to match",
    "start": "2622740",
    "end": "2631700"
  },
  {
    "text": "snapshot and test that",
    "start": "2631700",
    "end": "2639200"
  },
  {
    "text": "so snapshot automatically gets created and you can see the data from my databases in there the great thing going",
    "start": "2641120",
    "end": "2647270"
  },
  {
    "text": "to keep going on about these snapshot testing that are the best thing ever the",
    "start": "2647270",
    "end": "2654080"
  },
  {
    "text": "great thing is that we're really good at seeing when there's problems with our data writing assertions against the data",
    "start": "2654080",
    "end": "2662420"
  },
  {
    "text": "misses stuff all the time you kind of just pick the most important things and just ignore the rest snapshot testing",
    "start": "2662420",
    "end": "2669560"
  },
  {
    "text": "gets around that just go and take anything out of the talk it's using approval tests in your net API code or",
    "start": "2669560",
    "end": "2677920"
  },
  {
    "text": "something like jest or approval test is super super handy technique so that",
    "start": "2677920",
    "end": "2686420"
  },
  {
    "text": "subcutaneous testing any questions around that awesome",
    "start": "2686420",
    "end": "2694809"
  },
  {
    "text": "you might have seen here that I created a mockable abstractions for external",
    "start": "2702230",
    "end": "2707430"
  },
  {
    "text": "systems this is an alternate way I prefer creating an in-memory database but if you don't have things like",
    "start": "2707430",
    "end": "2713340"
  },
  {
    "text": "migrations and the ability to quickly stand up a database you can't really do",
    "start": "2713340",
    "end": "2718950"
  },
  {
    "text": "that there's another pattern which is quite common well quite useful for this",
    "start": "2718950",
    "end": "2726420"
  },
  {
    "text": "problem is called ports and adapters and the idea is that for anytime you're talking to any external system create an",
    "start": "2726420",
    "end": "2734520"
  },
  {
    "text": "adapter for your application you can then have multiple ports that plug into",
    "start": "2734520",
    "end": "2739980"
  },
  {
    "text": "that the idea is all of your application code sort of sits in the middle and then",
    "start": "2739980",
    "end": "2746550"
  },
  {
    "text": "anything outside that could be the Dom it could be API calls it could be",
    "start": "2746550",
    "end": "2752880"
  },
  {
    "text": "databases anything that's external to your application make sure there's an abstraction in place you can then test",
    "start": "2752880",
    "end": "2759990"
  },
  {
    "text": "through these ports or through these adapters and at laugh and mock out the",
    "start": "2759990",
    "end": "2766860"
  },
  {
    "text": "other adapters because these ports and adapters are well defined in your",
    "start": "2766860",
    "end": "2773010"
  },
  {
    "text": "application you're safe from refactoring so an example is if you had an email",
    "start": "2773010",
    "end": "2779310"
  },
  {
    "text": "sender you could use an event emitter or something like that just to decouple you",
    "start": "2779310",
    "end": "2784440"
  },
  {
    "text": "so that's the example of the adapter in my application I've just call email",
    "start": "2784440",
    "end": "2790860"
  },
  {
    "text": "sender passed through emails and it would just raise an event and then I'd have two implementations I'd have a test",
    "start": "2790860",
    "end": "2797580"
  },
  {
    "text": "one and I'd have a real one I'd plug them in the correct one in this leads me",
    "start": "2797580",
    "end": "2805560"
  },
  {
    "text": "to integration tests now we are because we've got the we want to move from the",
    "start": "2805560",
    "end": "2814350"
  },
  {
    "text": "sort of all in memory to something that's a little bit higher level problem",
    "start": "2814350",
    "end": "2819390"
  },
  {
    "text": "with them is out of process communication means you lose control of that out of process so if you're calling",
    "start": "2819390",
    "end": "2826410"
  },
  {
    "text": "another API you've got no control of asynchronous operations in there you can't cross that space it's completely",
    "start": "2826410",
    "end": "2833280"
  },
  {
    "text": "separated they're slow there's often shared mutable state there",
    "start": "2833280",
    "end": "2839229"
  },
  {
    "text": "also tend to be fragile because of this asynchronous issues in outside services",
    "start": "2839229",
    "end": "2846298"
  },
  {
    "text": "but we'll go ahead and do that anyway",
    "start": "2848009",
    "end": "2852599"
  },
  {
    "text": "for this I'm actually using a library called super test I'm now rather than going subcutaneous I'm going upper level",
    "start": "2853319",
    "end": "2862619"
  },
  {
    "text": "what I'm actually doing is using our super test to create an instance of my",
    "start": "2864269",
    "end": "2872349"
  },
  {
    "text": "Express server so as it is anyone using a scenic or yeah",
    "start": "2872349",
    "end": "2877440"
  },
  {
    "text": "so as vena core has a really really handy test library for doing this you",
    "start": "2877440",
    "end": "2883180"
  },
  {
    "text": "can just pass it your application bootstrapper and it will create you an in-memory test database sorry in memory",
    "start": "2883180",
    "end": "2890049"
  },
  {
    "text": "test web api and you can get HTTP handlers back for that super super handy",
    "start": "2890049",
    "end": "2895900"
  },
  {
    "text": "super test similar sort of thing i'm passing at my in-memory database and",
    "start": "2895900",
    "end": "2900969"
  },
  {
    "text": "then I'm telling super sis to start that server so at least they're sharing the same in-memory database it then is",
    "start": "2900969",
    "end": "2908079"
  },
  {
    "text": "actually making real HTTP calls and then validating that solution so this is",
    "start": "2908079",
    "end": "2914309"
  },
  {
    "text": "there's a few downsides of going up to this next level you just lose the",
    "start": "2914309",
    "end": "2919930"
  },
  {
    "text": "ability to reach into the API and control things like asynchronous",
    "start": "2919930",
    "end": "2925210"
  },
  {
    "text": "operations and timers and that sort of thing the advantage is any sort of middlewares",
    "start": "2925210",
    "end": "2931299"
  },
  {
    "text": "or action filters are going to be used",
    "start": "2931299",
    "end": "2935549"
  },
  {
    "text": "yep the question was out of interest what does the snapshot look like exactly",
    "start": "2943250",
    "end": "2949099"
  },
  {
    "text": "the same as the other mainly because I am NOT snapshotting the entire result",
    "start": "2949099",
    "end": "2959690"
  },
  {
    "text": "I'm just stop showing the body those two snapshot the results would see I have a",
    "start": "2959690",
    "end": "2967880"
  },
  {
    "text": "failure and it has the entire result so things like the headers that have come",
    "start": "2967880",
    "end": "2973340"
  },
  {
    "text": "back so quite useful as well just snapshotting the entire result",
    "start": "2973340",
    "end": "2978910"
  },
  {
    "text": "because for instance if you changed cause settings on the API calls you",
    "start": "2978910",
    "end": "2985369"
  },
  {
    "text": "would have all your snapshots failed so you could see the impact of your change that's massive advantage of moving up",
    "start": "2985369",
    "end": "2992359"
  },
  {
    "text": "that one level",
    "start": "2992359",
    "end": "2995019"
  },
  {
    "text": "cool so UI tests along same way as those integration tests they're out of process",
    "start": "3000109",
    "end": "3007220"
  },
  {
    "text": "one area that I do really really like UI testing and they've had a lot of success",
    "start": "3007220",
    "end": "3013410"
  },
  {
    "text": "is smoke testing deployments so create a small suite of UI automation tests which",
    "start": "3013410",
    "end": "3020190"
  },
  {
    "text": "do not run as part of your CI build but if you have like a continuous deployment",
    "start": "3020190",
    "end": "3025579"
  },
  {
    "text": "environment whenever you deploy run these smoke tests against the deployed environment and they should do things",
    "start": "3025579",
    "end": "3031890"
  },
  {
    "text": "that are like business critical functions through your application the reason why I find them not very useful",
    "start": "3031890",
    "end": "3038730"
  },
  {
    "text": "for other reasons is it's really hard to",
    "start": "3038730",
    "end": "3043880"
  },
  {
    "text": "reach in if you're going through the UI there's a lot going on you can't necessarily see that there's",
    "start": "3043880",
    "end": "3050310"
  },
  {
    "text": "asynchronous operations going on behind the scenes you don't know when to wait those sort of things and also you",
    "start": "3050310",
    "end": "3057560"
  },
  {
    "text": "normally won't have a way to reset the tests unless you close down the UI and",
    "start": "3057560",
    "end": "3064859"
  },
  {
    "text": "reopen it your tests will actually impact each other so if they're running randomly the first test may change the",
    "start": "3064859",
    "end": "3072960"
  },
  {
    "text": "result of the second one this is why it's good for smoke testing because you're just validating that the",
    "start": "3072960",
    "end": "3077990"
  },
  {
    "text": "application works you're not validating correctness of things but I'm going to show you some UI",
    "start": "3077990",
    "end": "3088589"
  },
  {
    "text": "test patterns for our react application so if we go back into our app test here",
    "start": "3088589",
    "end": "3097640"
  },
  {
    "text": "you'll notice that I'm going app bind and then I'm calling a simulation event",
    "start": "3097640",
    "end": "3104250"
  },
  {
    "text": "and then I'm waiting for things instead of mounting if I actually created a",
    "start": "3104250",
    "end": "3109619"
  },
  {
    "text": "something that encapsulates that so I'll just call this app page",
    "start": "3109619",
    "end": "3117710"
  },
  {
    "text": "so just create a constructor here javascript has classes now",
    "start": "3119500",
    "end": "3125530"
  },
  {
    "text": "so when I create my app page it'll mount the application I can then move this",
    "start": "3132890",
    "end": "3142880"
  },
  {
    "text": "into a function which can be called search for whiskey this is for a term",
    "start": "3142880",
    "end": "3156759"
  },
  {
    "text": "and I'll move that in here so those who",
    "start": "3156759",
    "end": "3164059"
  },
  {
    "text": "haven't seen a sink and a weight it's a something that's coming to JavaScript quite soon if you're using net you've",
    "start": "3164059",
    "end": "3170839"
  },
  {
    "text": "probably all seen it very very similar concept it's going to be it's currently in typescript and you can plug in a",
    "start": "3170839",
    "end": "3177980"
  },
  {
    "text": "bunch of plugins to Babel to enable it essentially it allows you to just",
    "start": "3177980",
    "end": "3183230"
  },
  {
    "text": "decorate your function with a async keyword and then that function will return a promise instead of returning",
    "start": "3183230",
    "end": "3189289"
  },
  {
    "text": "the value so I'll encapsulate all of this searching logic into this page",
    "start": "3189289",
    "end": "3194720"
  },
  {
    "text": "object so now what my test starts looking at is I can just go Const app",
    "start": "3194720",
    "end": "3200920"
  },
  {
    "text": "equals new app page app search to",
    "start": "3200920",
    "end": "3207769"
  },
  {
    "text": "whiskey and I'll call it Glenn again and then I'll change up here",
    "start": "3207769",
    "end": "3215890"
  },
  {
    "text": "so the event that simulated is passing in the using the value I pass in we can",
    "start": "3219190",
    "end": "3228880"
  },
  {
    "text": "then go Const results equals app dots get results",
    "start": "3228880",
    "end": "3237000"
  },
  {
    "text": "so what this will do is I'm encapsulating the fact that each of these results are in a span I don't want",
    "start": "3260340",
    "end": "3267610"
  },
  {
    "text": "my test to know that and instead I'm just going to return a list of strings which are the test results now I can",
    "start": "3267610",
    "end": "3275500"
  },
  {
    "text": "just go results and remove the dot text",
    "start": "3275500",
    "end": "3282210"
  },
  {
    "text": "and that will be potentially a single",
    "start": "3284250",
    "end": "3289320"
  },
  {
    "text": "that won't work it's going to go dot text for the moment",
    "start": "3291570",
    "end": "3298950"
  },
  {
    "text": "that was our existing test so just go back and fix that",
    "start": "3302460",
    "end": "3307970"
  },
  {
    "text": "to make the noise",
    "start": "3317319",
    "end": "3320609"
  },
  {
    "text": "cool so here I have broken it because my",
    "start": "3322880",
    "end": "3328279"
  },
  {
    "text": "snapshot was saying I did have that and now I've got nothing",
    "start": "3328279",
    "end": "3332950"
  },
  {
    "text": "can anyone see the back we'll progress",
    "start": "3348309",
    "end": "3354710"
  },
  {
    "text": "anyway we get the idea so this is called page object pattern the idea is you encapsulate the",
    "start": "3354710",
    "end": "3361819"
  },
  {
    "text": "functionality of your application into an API so then your tests consume the",
    "start": "3361819",
    "end": "3368270"
  },
  {
    "text": "API rather than directly manipulating things yourself the major advantage of",
    "start": "3368270",
    "end": "3374359"
  },
  {
    "text": "this is if I refactor my UI I only have to make changes to one page object to",
    "start": "3374359",
    "end": "3380780"
  },
  {
    "text": "make all my tests pass again so it's another technique for just keeping your UI tests maintainable",
    "start": "3380780",
    "end": "3388450"
  },
  {
    "text": "yes so that the question was was the sole function of the get results function to facilitate your tests yes",
    "start": "3393690",
    "end": "3400630"
  },
  {
    "text": "the page objects will only be used by tests they are essentially they live",
    "start": "3400630",
    "end": "3407250"
  },
  {
    "text": "alongside your tests to logically wrap your application so rather than having",
    "start": "3407250",
    "end": "3412720"
  },
  {
    "text": "to know how your application does things it pulls that in so you don't believe that into multiple tests and the last",
    "start": "3412720",
    "end": "3426040"
  },
  {
    "text": "type of test that I want to show you is defensive tests so this is our just a",
    "start": "3426040",
    "end": "3433390"
  },
  {
    "text": "bit of a concept for in this test I have I'm mocking things out and I'm calling",
    "start": "3433390",
    "end": "3440710"
  },
  {
    "text": "fetch mock catch so if I remove this the test will fail worse than it did now",
    "start": "3440710",
    "end": "3451170"
  },
  {
    "text": "I've got the broken test but if I remove that essentially the test will fail",
    "start": "3453390",
    "end": "3459700"
  },
  {
    "text": "because it's throwing directly now often when you're at this higher level you've",
    "start": "3459700",
    "end": "3465640"
  },
  {
    "text": "got error handling so you'll gracefully handle that arrow and your tests won't actually see that",
    "start": "3465640",
    "end": "3471340"
  },
  {
    "text": "things have failed so something that I've started doing in it at the moment",
    "start": "3471340",
    "end": "3477130"
  },
  {
    "text": "I'm just using I'm just going to give",
    "start": "3477130",
    "end": "3485320"
  },
  {
    "text": "you one example but I'm using this for quite a number of things is I want to",
    "start": "3485320",
    "end": "3490540"
  },
  {
    "text": "make sure that if I have an unmatched API call I fail my test so actually the",
    "start": "3490540",
    "end": "3498160"
  },
  {
    "text": "only way I can do this at the moment is hooking into the console output so whenever I get a console message that",
    "start": "3498160",
    "end": "3504730"
  },
  {
    "text": "says unmatched I'll push it into an array and then after every test if I've",
    "start": "3504730",
    "end": "3510010"
  },
  {
    "text": "seen any unmatched API calls I'll fail the test",
    "start": "3510010",
    "end": "3515310"
  },
  {
    "text": "so here I've got a value of Glenn M I'm",
    "start": "3516859",
    "end": "3522990"
  },
  {
    "text": "just going to change the stuff",
    "start": "3522990",
    "end": "3526069"
  },
  {
    "text": "[Music]",
    "start": "3528770",
    "end": "3531860"
  },
  {
    "text": "need to remove the other test",
    "start": "3537270",
    "end": "3541260"
  },
  {
    "text": "so I'm going to simulate the targeting so I'm going to search for Glen mo but",
    "start": "3544750",
    "end": "3550990"
  },
  {
    "text": "I've mocked out Glen this often happens as your API evolves and things don't quite match up so here I've got this",
    "start": "3550990",
    "end": "3560619"
  },
  {
    "text": "unmatched get to Glen mo and for some",
    "start": "3560619",
    "end": "3570309"
  },
  {
    "text": "reason that's not finding the error",
    "start": "3570309",
    "end": "3574710"
  },
  {
    "text": "got too many hours now",
    "start": "3577420",
    "end": "3580980"
  },
  {
    "text": "I'll skip that as well but the essentially the idea is that think about",
    "start": "3583040",
    "end": "3589550"
  },
  {
    "text": "when you can do this so anytime that you've got a potential condition in your",
    "start": "3589550",
    "end": "3594920"
  },
  {
    "text": "application if things happen too many times so additional API calls I've had",
    "start": "3594920",
    "end": "3600200"
  },
  {
    "text": "bugs in my single page applications before which due to some state",
    "start": "3600200",
    "end": "3605300"
  },
  {
    "text": "management issues I create two API calls for the same thing if you explicitly",
    "start": "3605300",
    "end": "3611030"
  },
  {
    "text": "make sure that you only mock out once instead of multiple times those sort of",
    "start": "3611030",
    "end": "3617630"
  },
  {
    "text": "issues will find themselves so actively go out and think about what can I test that is not just what I'm expecting that",
    "start": "3617630",
    "end": "3625040"
  },
  {
    "text": "the negative so fail when my test does something I don't expect as well it's a",
    "start": "3625040",
    "end": "3637220"
  },
  {
    "text": "bit of a recap of all things that we have talked about testing in node much",
    "start": "3637220",
    "end": "3643580"
  },
  {
    "text": "faster than spinning up browsers definitely can still do that but it has its place snapshot testing amazing get",
    "start": "3643580",
    "end": "3651740"
  },
  {
    "text": "on that use different styles of testing all of these are completely valid blend",
    "start": "3651740",
    "end": "3657740"
  },
  {
    "text": "them what you want to do is make sure that your tests are quick and reliable",
    "start": "3657740",
    "end": "3663380"
  },
  {
    "text": "and all of those sort of things don't be afraid to try and have a little session and workshop how can we actually solve",
    "start": "3663380",
    "end": "3670040"
  },
  {
    "text": "this better and then testing doesn't have to be painful it really can be",
    "start": "3670040",
    "end": "3675050"
  },
  {
    "text": "quite pleasant if you continue pushing these things testing can be really valuable and are",
    "start": "3675050",
    "end": "3681500"
  },
  {
    "text": "and not up endurance to refactoring thank you any questions",
    "start": "3681500",
    "end": "3691390"
  },
  {
    "text": "come grab me after I'll be around sir just hanging in the main hallway for the next hour or so and thanks everyone",
    "start": "3692720",
    "end": "3700420"
  },
  {
    "text": "[Applause]",
    "start": "3700420",
    "end": "3703058"
  }
]