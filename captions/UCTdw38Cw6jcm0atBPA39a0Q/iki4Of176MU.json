[
  {
    "text": "okay one thanks for coming and hello my name is Matt today going to talk about",
    "start": "7690",
    "end": "13420"
  },
  {
    "text": "standard which is something which is fairly new fairly recent has come out of the work with the the.net core then",
    "start": "13420",
    "end": "19990"
  },
  {
    "text": "everybody come across Dinah standard yet we just kind of heard about it need to know a bit more okay this stuff will go",
    "start": "19990",
    "end": "25810"
  },
  {
    "text": "straight into its what is the dotnet standard it's a specification which defines a defines a version set of API",
    "start": "25810",
    "end": "32558"
  },
  {
    "text": "is that a guaranteed to be implemented by a.net platform so it'll tell you what api's are available what you can target",
    "start": "32559",
    "end": "39040"
  },
  {
    "text": "and where you can run if you have a library that targets the standard it runs on all supporting platforms and",
    "start": "39040",
    "end": "44519"
  },
  {
    "text": "that's basically it you know so it's a nice easy thing in and of itself it's a nice easy concept that's pretty much all",
    "start": "44519",
    "end": "51040"
  },
  {
    "text": "there is to it except there's always a bit more which you can go into and have a look at so",
    "start": "51040",
    "end": "56049"
  },
  {
    "text": "I'm you know we'll have a look really serene of what api's are included how does versioning work what about a",
    "start": "56049",
    "end": "61720"
  },
  {
    "text": "compatibility with existing frameworks existing platforms how does it relate to dotnet core and portable class libraries",
    "start": "61720",
    "end": "68070"
  },
  {
    "text": "and then also have a look at how does it work I always like to take a go like a",
    "start": "68070",
    "end": "73450"
  },
  {
    "text": "level down to see what something is actually doing there and it gets a better understanding then of how something works and what it's doing and",
    "start": "73450",
    "end": "81039"
  },
  {
    "text": "then also going to have a look at dotnet standard 2.0 the latest version that they're working on right now which has",
    "start": "81039",
    "end": "87100"
  },
  {
    "text": "big changes and which is probably the reason you've heard about darknet standard this is all about adding all the extra api is back into the dotnet",
    "start": "87100",
    "end": "94030"
  },
  {
    "text": "core which got removed so we're going to kind of back up a little bit first and",
    "start": "94030",
    "end": "99909"
  },
  {
    "text": "we'll start with what problem we're trying to solve here what is it that the dotnet standard is trying to fix and",
    "start": "99909",
    "end": "106560"
  },
  {
    "text": "basically if we look at dotnet we kind of tend to think dotnet framework maybe darknet core as well but there's much",
    "start": "106560",
    "end": "112509"
  },
  {
    "text": "more to the darknet than that you know of course it got done at framework dotnet core you've got lots of other frameworks as well you know donek",
    "start": "112509",
    "end": "118420"
  },
  {
    "text": "compact frame worked on a micro framework even you've got Silverlight Windows Phones you've got mono with xamarin and unity",
    "start": "118420",
    "end": "125259"
  },
  {
    "text": "as well and or even Xbox so dotnet is more than just our net framework more than just darknet core and all of these",
    "start": "125259",
    "end": "132010"
  },
  {
    "text": "implementations are different as well so some of them started as Forks so you had done a framework donut compact framework",
    "start": "132010",
    "end": "137890"
  },
  {
    "text": "was forked off for that all for different reasons as well you get a smaller footprints run in a more a constrained space doc",
    "start": "137890",
    "end": "143890"
  },
  {
    "text": "net micro framework again smaller footprint running a Australian space Silverlight smaller",
    "start": "143890",
    "end": "150340"
  },
  {
    "text": "footprint running in a constrained space but also cross-platform so that's nice Windows Store Windows Phone the same things here mono is different in that",
    "start": "150340",
    "end": "157269"
  },
  {
    "text": "it's a completely different implementation completely separate to.net framework it's not a fork at all",
    "start": "157269",
    "end": "162569"
  },
  {
    "text": "but what it all means really is that they are different implementations the different implementations over time that",
    "start": "162569",
    "end": "168280"
  },
  {
    "text": "have evolved over time as well and so there are differences as incompatibilities between the frameworks",
    "start": "168280",
    "end": "174730"
  },
  {
    "text": "so the reason that they were their fault in the first place they get a smaller footprint to get a smaller set of",
    "start": "174730",
    "end": "180579"
  },
  {
    "text": "libraries means that different api's have been cut out different API have been included and so those differences",
    "start": "180579",
    "end": "186819"
  },
  {
    "text": "between the two so it all brings down to one big question how do you share libraries and code across the different",
    "start": "186819",
    "end": "192699"
  },
  {
    "text": "implementations and that's what the ballot stand is going to do it defines the API is that are available on all of",
    "start": "192699",
    "end": "198579"
  },
  {
    "text": "those platforms if you target a spec you can run on the supporting platforms but",
    "start": "198579",
    "end": "203949"
  },
  {
    "text": "isn't that just portable class libraries great question glad you asked it thank you the answer is of course yes but also",
    "start": "203949",
    "end": "211599"
  },
  {
    "text": "know so libraries plural class libraries do solve the same problem the whole point of them is to target multiple",
    "start": "211599",
    "end": "218169"
  },
  {
    "text": "platforms to run on multiple platforms but and they do it in a slightly different way they target profiles",
    "start": "218169",
    "end": "223720"
  },
  {
    "text": "rather than frameworks so instead of saying I'm going to run on dotnet framework 3.5 they're going to run on",
    "start": "223720",
    "end": "228970"
  },
  {
    "text": "profiles profiles 721 486 and these profiles are api subsets they are the",
    "start": "228970",
    "end": "235900"
  },
  {
    "text": "common api's that are available on all of those versions of the frameworks that you are targeting the different",
    "start": "235900",
    "end": "241120"
  },
  {
    "text": "frameworks you're targeting frequently this is this is seen as a",
    "start": "241120",
    "end": "246720"
  },
  {
    "text": "lowest common denominator but it's really kind of more accurate so it's an intersection of the API is it's not",
    "start": "246720",
    "end": "252219"
  },
  {
    "text": "really just the least things that are there but is everything that you can use rather than just release things and so",
    "start": "252219",
    "end": "258759"
  },
  {
    "text": "it kind of solves the same problem but portable class libraries have their own problems so you know first of all they",
    "start": "258759",
    "end": "264820"
  },
  {
    "text": "are really a little bit weird and arcane that the whole thing is based on profile numbers and these profile numbers are",
    "start": "264820",
    "end": "270520"
  },
  {
    "text": "effectively random you don't you can't assign any particular value to these numbers they're just the next profile",
    "start": "270520",
    "end": "277630"
  },
  {
    "text": "along you can't reason about them you can't say when weather new version of something is profile 236",
    "start": "277630",
    "end": "283900"
  },
  {
    "text": "the next version of profile 48 or whatever there's no relation there's no version and it's all a bit weird the",
    "start": "283900",
    "end": "290440"
  },
  {
    "text": "tooling can hide a lot of this for you so visual Studios got you know dialog boxes with check boxes and dropdowns",
    "start": "290440",
    "end": "296259"
  },
  {
    "text": "which tells you what target what frameworks you're targeting what versions you're targeting and it can work it all out for you but other than",
    "start": "296259",
    "end": "303070"
  },
  {
    "text": "that it's all just a bit odd and tricky to work with the big problem however is",
    "start": "303070",
    "end": "308289"
  },
  {
    "text": "that they're not scalable when you add in a new API when you add in a new version of a framework or even you want",
    "start": "308289",
    "end": "313360"
  },
  {
    "text": "to add in a new framework itself like net core then you have to have a new profile and if you've got a new profiles",
    "start": "313360",
    "end": "319419"
  },
  {
    "text": "new profile number you have to recompile retarget repackage reduce redeploy stuff and so that doesn't help especially with",
    "start": "319419",
    "end": "326710"
  },
  {
    "text": "something like darknet core new platform comes along you want to use existing code and reshare existing libraries but",
    "start": "326710",
    "end": "333970"
  },
  {
    "text": "you have to rebuild everything to do so and so that doesn't work with dotnet core so Dino standard kind of flips the",
    "start": "333970",
    "end": "341800"
  },
  {
    "text": "whole model instead of portable class libraries you can kind of consider them a pull model really they find the common",
    "start": "341800",
    "end": "349990"
  },
  {
    "text": "ground between them all gather all together and say here's a profile you can target star next and it is more of a",
    "start": "349990",
    "end": "355419"
  },
  {
    "text": "push it defines the state that the specification it defines the api's that are available and it says these api's",
    "start": "355419",
    "end": "362349"
  },
  {
    "text": "will be available you target this specification and the platform will implement it and so again libraries",
    "start": "362349",
    "end": "369669"
  },
  {
    "text": "target a standard they run on supporting platforms but the key thing is they run on new platforms as well if the new",
    "start": "369669",
    "end": "375849"
  },
  {
    "text": "platform comes along as long as it supports the standard as long as it's implements for standard then the the API",
    "start": "375849",
    "end": "383020"
  },
  {
    "text": "is and the libraries will just work hopefully so darn expand is a",
    "start": "383020",
    "end": "389020"
  },
  {
    "text": "specification what does that mean you know we kind of have a look at the why now let's have a look at the what so",
    "start": "389020",
    "end": "394560"
  },
  {
    "text": "firstly it's not a Word document it's not a really dry sort of hard specification like that with a list of",
    "start": "394560",
    "end": "400990"
  },
  {
    "text": "api's that have to be implemented it's a binary specification it's a set of reference assemblies which you compile",
    "start": "400990",
    "end": "406780"
  },
  {
    "text": "against you build against that and those the api's that are available to you this is then distributed in a new get package",
    "start": "406780",
    "end": "413169"
  },
  {
    "text": "with its own versions listed a net standard library package and then within the package there are new",
    "start": "413169",
    "end": "419170"
  },
  {
    "text": "versions target framework monikers so you know the lib folder you get with net 46 net 25 xamarin mono and so on we've",
    "start": "419170",
    "end": "428050"
  },
  {
    "text": "got a new one now it is next standard and that's version with one point zero one point whatever all the way up to 2.0",
    "start": "428050",
    "end": "433300"
  },
  {
    "text": "which is the new one so tight frameworks just as a reminder so yeah so the toka",
    "start": "433300",
    "end": "441040"
  },
  {
    "text": "frame with monikers these folders in the lip folders the key thing with target framework monikers is that you depend on",
    "start": "441040",
    "end": "447160"
  },
  {
    "text": "a new get package but it's not the version of the package that you're interested in you've interested in the",
    "start": "447160",
    "end": "453070"
  },
  {
    "text": "target framework moniker itself so you can have different versions within the package based on the target framework",
    "start": "453070",
    "end": "459610"
  },
  {
    "text": "that you're targeting so you can pull in",
    "start": "459610",
    "end": "464650"
  },
  {
    "text": "a particular version of a package and it's whatever framework that your project is targeting that decides what",
    "start": "464650",
    "end": "471750"
  },
  {
    "text": "assembly gets referenced it's also",
    "start": "471750",
    "end": "477250"
  },
  {
    "text": "useful to think of target frameworks as a platform this is a good way of sort of getting to grips with the the idea of",
    "start": "477250",
    "end": "482470"
  },
  {
    "text": "the.net standard itself so donut framework don't net cause they're concrete platforms your apps run on",
    "start": "482470",
    "end": "487480"
  },
  {
    "text": "those you know those of implementations they're they're built they're concrete that's what you run on",
    "start": "487480",
    "end": "492550"
  },
  {
    "text": "the doníts standard you can consider that to be an abstract platform your code can't run on it so you can't if",
    "start": "492550",
    "end": "498520"
  },
  {
    "text": "there isn't actual implementation for it but it's the definition of a platform your concrete platforms can then",
    "start": "498520",
    "end": "504790"
  },
  {
    "text": "implement it it's like an interface as it were so again libraries targets they",
    "start": "504790",
    "end": "511090"
  },
  {
    "text": "can start they can target the next standard as an abstract platform and that means they get to run on all of",
    "start": "511090",
    "end": "516550"
  },
  {
    "text": "these platforms but they can also of course target a concrete platform and this way they can get platform specific",
    "start": "516550",
    "end": "523060"
  },
  {
    "text": "API s so if you're running on dotnet core you can have a library which targets directly dotnet core and it can",
    "start": "523060",
    "end": "529180"
  },
  {
    "text": "make use of api's that are available only and our net core and then your app your app never targets the the.net",
    "start": "529180",
    "end": "535900"
  },
  {
    "text": "standard it always targets a concrete platform because it's always going to run on a concrete platform it's a nice",
    "start": "535900",
    "end": "543700"
  },
  {
    "text": "analogy of way of thinking about it as well you can if you think about HTML you've got HTML 3/4 whatever and you",
    "start": "543700",
    "end": "551110"
  },
  {
    "text": "write HTML which fits to that standard because you're all good developers and but then when you run that on Chrome",
    "start": "551110",
    "end": "557590"
  },
  {
    "text": "you're not running HTML 3 you're not running HTML 4 you're just running paste amount in chrome and it's exactly the",
    "start": "557590",
    "end": "563860"
  },
  {
    "text": "same with the dotnet standard you you target a particular version of it and you just run it on a platform don't take this analogy too far because",
    "start": "563860",
    "end": "571480"
  },
  {
    "text": "it's HTML and it's scary but that's a nice way of kind of looking at it and thinking about it does anybody have any",
    "start": "571480",
    "end": "578680"
  },
  {
    "text": "questions right now by the way if you have any questions please feel free and jump in and dive good ok versioning them",
    "start": "578680",
    "end": "586150"
  },
  {
    "text": "so I've mentioned the new get packages versions and the target framework monikers themselves are versioned and so",
    "start": "586150",
    "end": "592510"
  },
  {
    "text": "how does versioning work with the dotnet standard the first thing is that the dotnet standard is an additive",
    "start": "592510",
    "end": "598870"
  },
  {
    "text": "versioning system so you only ever add api's into the darknet standard it defines the set of api's you're going to",
    "start": "598870",
    "end": "605589"
  },
  {
    "text": "use and they'll only ever be added to them nothing gets removed so the standard is kind of immutable and we get",
    "start": "605589",
    "end": "612220"
  },
  {
    "text": "to add in assemblies we can add in types we could add in type members but nothing gets removed out of it this has the nice",
    "start": "612220",
    "end": "619180"
  },
  {
    "text": "property of meaning that all versions are super sets of previous versions so if you have a platform that implements",
    "start": "619180",
    "end": "626650"
  },
  {
    "text": "1.6 of the standard you also know that it's got all the api's from 1.5 all the",
    "start": "626650",
    "end": "631900"
  },
  {
    "text": "api's from 1.4 and so on and so forth that also means that a new newer",
    "start": "631900",
    "end": "637900"
  },
  {
    "text": "platform if it targets a newer version of a standard it can consume anything that targets in the earlier version so",
    "start": "637900",
    "end": "644290"
  },
  {
    "text": "you've got that sort of backwards compatibility thing built in from that because everything's a superset another",
    "start": "644290",
    "end": "652060"
  },
  {
    "text": "good question glad you asked how if it's such a brand-new thing that we don't really know so much about it how have we got so many versions",
    "start": "652060",
    "end": "660450"
  },
  {
    "text": "you I don't use the darknet standard you have to have another assembly to go with",
    "start": "666100",
    "end": "672200"
  },
  {
    "text": "it but this is probably okay because they're all out of support anyway so full four point five and four five one",
    "start": "672200",
    "end": "678770"
  },
  {
    "text": "or even out to support their own supports this time last year and so you should be on four five two or four six",
    "start": "678770",
    "end": "684110"
  },
  {
    "text": "and so on what else can we say about this if you have a look at the the",
    "start": "684110",
    "end": "690620"
  },
  {
    "text": "platforms down the bottom tier Windows 8.1 that's the last one that supports the standard one point two doesn't",
    "start": "690620",
    "end": "696470"
  },
  {
    "text": "support anything else so if you have a 2.0 clap a library you won't be able to",
    "start": "696470",
    "end": "701900"
  },
  {
    "text": "consume it on Windows 8.1 and/or all Windows Phone Silverlight so anybody",
    "start": "701900",
    "end": "707810"
  },
  {
    "text": "really upset just checking what else we got yes oh yeah windows 10 apps Windows",
    "start": "707810",
    "end": "715070"
  },
  {
    "text": "10 supports 1.4 and before it the 2.0 will be supported in the next version of",
    "start": "715070",
    "end": "720560"
  },
  {
    "text": "the Windows 10 platform there so I realize this is a big kind of",
    "start": "720560",
    "end": "726200"
  },
  {
    "text": "complicated thing there so does anyone have any questions yes yep so the",
    "start": "726200",
    "end": "740240"
  },
  {
    "text": "question there was if you can only add ap is is the risk of the platform getting bloated if you can't remove it",
    "start": "740240",
    "end": "745670"
  },
  {
    "text": "if you can't clean up your code and answer is yes absolutely so I'll talk more about that when you get to the",
    "start": "745670",
    "end": "752090"
  },
  {
    "text": "dollar standard 2.0 stuff so as well leave it out but yes the definitely is a",
    "start": "752090",
    "end": "757520"
  },
  {
    "text": "risk there and you have to manage how you add things in basically and so there's a process for that anybody else",
    "start": "757520",
    "end": "763820"
  },
  {
    "text": "have any questions about these the versioning here that we've got hockey dokie right so given all that the",
    "start": "763820",
    "end": "772340"
  },
  {
    "text": "question becomes what version of the.net standard should I use and it becomes a trade-off because the higher version",
    "start": "772340",
    "end": "778100"
  },
  {
    "text": "that you targets you'll have more API is available to you because it's more supersets but the less platforms you'll",
    "start": "778100",
    "end": "784610"
  },
  {
    "text": "have to run it on so if we have a look at where are we for well if we want to",
    "start": "784610",
    "end": "791120"
  },
  {
    "text": "target 1.3 or above we have to be running on dotnet framework 4.6 if we",
    "start": "791120",
    "end": "796430"
  },
  {
    "text": "are targeting 2.0 with the extended API set that's available we'll only be able to run on",
    "start": "796430",
    "end": "801950"
  },
  {
    "text": "six-one and that can narrow down your your targets of what you want to implement um so yeah so a higher version",
    "start": "801950",
    "end": "811130"
  },
  {
    "text": "you'll get more api's but fewer platforms a lower version will give you more of a reach but it'll have then less",
    "start": "811130",
    "end": "817340"
  },
  {
    "text": "API there to go for so it's it's a trade-off and the idea is you just target the lowest version you cap",
    "start": "817340",
    "end": "822950"
  },
  {
    "text": "because then if you can if you can run a lower version you'll get the broader reach so what API is our included this",
    "start": "822950",
    "end": "831170"
  },
  {
    "text": "is a this is a useful one so we have a link here let's hope my Wi-Fi is working yeah very good so it's all on github",
    "start": "831170",
    "end": "839330"
  },
  {
    "text": "that the standard is on github and there's some very nice Docs and very useful documentation here with another",
    "start": "839330",
    "end": "849110"
  },
  {
    "text": "sort of another run-through of the the subversion matrix that's going on there and also some some advice also some",
    "start": "849110",
    "end": "856250"
  },
  {
    "text": "mapping between some of the portable class library profiles but the thing I wanna show you really is along the top here these versions of the.net platform",
    "start": "856250",
    "end": "862850"
  },
  {
    "text": "are our links and it will take you to useful information useful information",
    "start": "862850",
    "end": "868310"
  },
  {
    "text": "about that particular version so this will tell you what's in the darknet standard 1.2 it tells you what platforms",
    "start": "868310",
    "end": "873860"
  },
  {
    "text": "are supported and what versions of those frameworks are supported for that for that for that standard and also a kind",
    "start": "873860",
    "end": "880250"
  },
  {
    "text": "of high-level overview of what's new what api's are in that particular you know by namespace and so on",
    "start": "880250",
    "end": "885790"
  },
  {
    "text": "two useful links we got here though are api's and then a diff with the previous version the API is is all of the API is",
    "start": "885790",
    "end": "893240"
  },
  {
    "text": "that ring the standard which is killed my Safari beatable so that's that's a",
    "start": "893240",
    "end": "900170"
  },
  {
    "text": "big list and then easier to manage is is the diff and this this shows you then",
    "start": "900170",
    "end": "906170"
  },
  {
    "text": "what api's have been added so it's reasonably small set in this example we can click on overview to go back to the",
    "start": "906170",
    "end": "912320"
  },
  {
    "text": "page know to go back to that page and so",
    "start": "912320",
    "end": "917840"
  },
  {
    "text": "we can see you know if we go up to 1.6 again you know a set of api's has been added and if we go and look at 2.0 which",
    "start": "917840",
    "end": "924980"
  },
  {
    "text": "is the new extended api set we'll see that there's now actually they're adding a ton of new api s-- so there's a whole",
    "start": "924980",
    "end": "931790"
  },
  {
    "text": "load of things and i'm not even going to try and load to diff for that one now where'd I put my that okay so that's",
    "start": "931790",
    "end": "939860"
  },
  {
    "text": "a really useful site there to see what api's are available what you can target and you know if you want to just have a",
    "start": "939860",
    "end": "945290"
  },
  {
    "text": "look at it a slightly better way of doing it slightly more automated way of doing it is by using the portability",
    "start": "945290",
    "end": "951310"
  },
  {
    "text": "analyzer which Microsoft have produced it's a really useful tool there's a command line version limit API port and",
    "start": "951310",
    "end": "958370"
  },
  {
    "text": "then there's a plugin to visual studio itself and it will give you a nice sort of report of what API is you're using",
    "start": "958370",
    "end": "965089"
  },
  {
    "text": "and whether they're available on a particular target framework it's not just for the.net standard either so you",
    "start": "965089",
    "end": "971240"
  },
  {
    "text": "can tell it to analyze your code and say you know it does this work on dialect",
    "start": "971240",
    "end": "976310"
  },
  {
    "text": "standard one Oh does it work on dinette standard 1.6 or does it work on dotnet framework 4.5 and it'll run through and",
    "start": "976310",
    "end": "983269"
  },
  {
    "text": "it'll tell you what's there and it will say you know whether these api's are available or not it can even give you",
    "start": "983269",
    "end": "988310"
  },
  {
    "text": "recommended changes so if it's saying that something it needs to move then you can reuse this which is a useful way of",
    "start": "988310",
    "end": "994490"
  },
  {
    "text": "working with it so this is now answering the question of how do we work with with",
    "start": "994490",
    "end": "1001540"
  },
  {
    "text": "something which is purely additive and how does that that work this kind of",
    "start": "1001540",
    "end": "1006610"
  },
  {
    "text": "works post 2.0 so they know what they're doing with 2.0 there's that kind of like a line in the sand this is - to fix the",
    "start": "1006610",
    "end": "1013120"
  },
  {
    "text": "issues with api's that were removed from dotnet core and to make bring net core back up to parity and make it easier to",
    "start": "1013120",
    "end": "1019449"
  },
  {
    "text": "work with porting between dotnet core and our net framework so there's an own set of work for 2.0 but what happens",
    "start": "1019449",
    "end": "1025990"
  },
  {
    "text": "after and that's this is the process they've got set up there's a review board and that consists of the.net team",
    "start": "1025990",
    "end": "1032230"
  },
  {
    "text": "xamarin and unity the project's open source so I'm sure if you have comments and things and raising issues that would",
    "start": "1032230",
    "end": "1038380"
  },
  {
    "text": "be Bo you know address and absolutely fine but it makes sense for these three to be the board members because they are the",
    "start": "1038380",
    "end": "1043900"
  },
  {
    "text": "people who implement implement platforms so they have the most - they're the most",
    "start": "1043900",
    "end": "1049870"
  },
  {
    "text": "impacted by this the idea really is that not everything will be added so the one",
    "start": "1049870",
    "end": "1057100"
  },
  {
    "text": "to try and keep the standard small because it does need to be implemented everywhere and if it's going to be implemented on small devices then a",
    "start": "1057100",
    "end": "1063070"
  },
  {
    "text": "smaller API is good so there's going to try and keep keep things out of the standards basically we want to work with",
    "start": "1063070",
    "end": "1069520"
  },
  {
    "text": "like out-of-band packages so things like the way what's it called system collection is immutable",
    "start": "1069520",
    "end": "1074980"
  },
  {
    "text": "that's an out-of-band package they're going to do more like that and try and work like that especially if the",
    "start": "1074980",
    "end": "1081430"
  },
  {
    "text": "assembly itself is purely il it's got no runtime concerns and also if it's based",
    "start": "1081430",
    "end": "1086440"
  },
  {
    "text": "on the darknet standard already it makes sense just to ship it as an out-of-band package for things that do make it in",
    "start": "1086440",
    "end": "1093610"
  },
  {
    "text": "there's going to be a set of criteria which have to be which have to be met before it gets in firstly it has to be a",
    "start": "1093610",
    "end": "1099460"
  },
  {
    "text": "ubiquitous API it has to be used everywhere if it's going to be in the standard which goes everywhere the API",
    "start": "1099460",
    "end": "1105070"
  },
  {
    "text": "has to be useful everywhere as well so it's no good putting something which is a Windows display framework kind of",
    "start": "1105070",
    "end": "1112120"
  },
  {
    "text": "thing if it's not going to run on Windows the API needs to be mature as well because it's going to be in the API",
    "start": "1112120",
    "end": "1118300"
  },
  {
    "text": "forever it's going to be in the standard forever so if they want something which is stabled mature and it's doing the job",
    "start": "1118300",
    "end": "1123820"
  },
  {
    "text": "is supposed to be doing and finally the other one is things with runtime considerations where the runtime needs",
    "start": "1123820",
    "end": "1129910"
  },
  {
    "text": "to get involved not necessarily the platform not not talking about platform specific things but runtime like CLR",
    "start": "1129910",
    "end": "1135460"
  },
  {
    "text": "stuff and sim D support is a good example of this this is where the gist they would need to recognize certain",
    "start": "1135460",
    "end": "1142060"
  },
  {
    "text": "types and recompile the machine code to take advantage of processes do vector",
    "start": "1142060",
    "end": "1148120"
  },
  {
    "text": "maths in a more efficient manner that's a good example of something which would fit in the standard because then the",
    "start": "1148120",
    "end": "1153940"
  },
  {
    "text": "runtime has to implement that differently does that answer the question by the way about how to do it",
    "start": "1153940",
    "end": "1161879"
  },
  {
    "text": "right let's have a look at packaging them",
    "start": "1162180",
    "end": "1167040"
  },
  {
    "text": "okay so I've already said that it comes in a new get package this is the next",
    "start": "1171040",
    "end": "1176960"
  },
  {
    "text": "standard library package there's kind of three different versions let's have a quick look where are we that's why I",
    "start": "1176960",
    "end": "1185270"
  },
  {
    "text": "think I'm in the wrong place so as",
    "start": "1185270",
    "end": "1190460"
  },
  {
    "text": "everyone seen NuGet package manager buy the package Explorer it's a really useful little tool for no I don't want",
    "start": "1190460",
    "end": "1197060"
  },
  {
    "text": "an update it's a really useful tool for examining your examining packages it can",
    "start": "1197060",
    "end": "1204440"
  },
  {
    "text": "down the search for them downloads them and show us what what's inside and stuff",
    "start": "1204440",
    "end": "1209540"
  },
  {
    "text": "so net standard library is the is the package which defines the dotnet standard and there's a couple of",
    "start": "1209540",
    "end": "1215660"
  },
  {
    "text": "versions a couple of preview versions but really we've got one six zero and one six one so we haven't got any of the previous versions there and this is one",
    "start": "1215660",
    "end": "1222320"
  },
  {
    "text": "trying to say the the version of the package is not as important as what's inside the package so if we load that up",
    "start": "1222320",
    "end": "1230770"
  },
  {
    "text": "first thing you'll notice on the right-hand sides that there's no live folder there's no libs folder or anything there's no dll's in this",
    "start": "1230770",
    "end": "1236840"
  },
  {
    "text": "package it's a it's a meta package about meta package I means that it now has a",
    "start": "1236840",
    "end": "1242150"
  },
  {
    "text": "whole bunch of dependencies on other packages and those get pulled in and that's what defines the standard",
    "start": "1242150",
    "end": "1247930"
  },
  {
    "text": "so on the left here we have dependencies on dotnet standard this is so for the",
    "start": "1247930",
    "end": "1255620"
  },
  {
    "text": "target framework of dotnet standard version 1.0 all of these packages gets",
    "start": "1255620",
    "end": "1260720"
  },
  {
    "text": "pulled in and we can sort of follows out there we can see what dll's and the assemblies were referenced there we've",
    "start": "1260720",
    "end": "1267740"
  },
  {
    "text": "got a similar set for 1.1 another set for 1.2 except for 1.3 and so if your",
    "start": "1267740",
    "end": "1275660"
  },
  {
    "text": "project targets these particular versions then that particular set of references will be included but what's",
    "start": "1275660",
    "end": "1283850"
  },
  {
    "text": "interesting is that despite the fact we're up to 1.6 and running up to a 2.0 is we've only got a target framework",
    "start": "1283850",
    "end": "1290810"
  },
  {
    "text": "there for 1.0 2 all the way to 1.3 there's nothing for 1.4 1.5 1.6 and",
    "start": "1290810",
    "end": "1296420"
  },
  {
    "text": "that's because the package dependencies define what other packages get pulled in",
    "start": "1296420",
    "end": "1303710"
  },
  {
    "text": "and 1.4 1.5 1.6 didn't add any new assemblies and so there's no change to",
    "start": "1303710",
    "end": "1310039"
  },
  {
    "text": "the number of assemblies that will get referenced what has changed is the actual packages that are being used",
    "start": "1310039",
    "end": "1316210"
  },
  {
    "text": "let's have a look at system run time and so if we pull this one in we get to see",
    "start": "1316210",
    "end": "1323360"
  },
  {
    "text": "that there is a lib folder and the ref folder so the lib folder kind of has some dll's in there for us and the rest",
    "start": "1323360",
    "end": "1329899"
  },
  {
    "text": "folder also has it as well and we can see here now we've got a different versions for 1.0 1.2 to 1.5 not",
    "start": "1329899",
    "end": "1338270"
  },
  {
    "text": "everything because not everything it didn't change in all of those versions and so normal fullback rules take take",
    "start": "1338270",
    "end": "1343909"
  },
  {
    "text": "account now okay so yes that kind of",
    "start": "1343909",
    "end": "1352549"
  },
  {
    "text": "covers everything we've got there so the new I don't think I'll show you the framework one because yeah yeah so yeah",
    "start": "1352549",
    "end": "1359480"
  },
  {
    "text": "I didn't point out really for those are the new framework monikers their net standard and it's 1.0 1.2 and everything",
    "start": "1359480",
    "end": "1364970"
  },
  {
    "text": "interestingly it moves away from the net 45 and it puts a decimal point in there",
    "start": "1364970",
    "end": "1370270"
  },
  {
    "text": "I'm not sure why okay yeah the target",
    "start": "1370270",
    "end": "1376700"
  },
  {
    "text": "framework decides what you do and also fine-grained package versions right then",
    "start": "1376700",
    "end": "1382490"
  },
  {
    "text": "dönitz down at 2.0 so this is the fun stuff this is the new stuff the interesting stuff and all the changes",
    "start": "1382490",
    "end": "1388309"
  },
  {
    "text": "that are going on first thing says it's work in progress it's not finished yet it's going to be shipping with Visual Studio 2017 and the",
    "start": "1388309",
    "end": "1395480"
  },
  {
    "text": "big thing that it does is it gives us loads more AP is as you see on the well",
    "start": "1395480",
    "end": "1401539"
  },
  {
    "text": "we can we can see right there all of those API is now are being added back in so that's lots definitely definitely why",
    "start": "1401539",
    "end": "1410899"
  },
  {
    "text": "I class loads more it also consolidates sort of reference assemblies as well so whereas that",
    "start": "1410899",
    "end": "1417110"
  },
  {
    "text": "package we just saw had a load of dependencies on other packages and other dll's is now going to change we're going to",
    "start": "1417110",
    "end": "1423440"
  },
  {
    "text": "have one DLL next standard DLL the idea is this is that the the standard itself",
    "start": "1423440",
    "end": "1429110"
  },
  {
    "text": "is monolithic so why is it split up into lots of different assemblies just have one assembly that describes everything",
    "start": "1429110",
    "end": "1437600"
  },
  {
    "text": "similarly we're going to get rid of though those packs dependencies but",
    "start": "1437600",
    "end": "1443030"
  },
  {
    "text": "important things say is that it's got the same goals is it nothing is changing with their despite bigger people and",
    "start": "1443030",
    "end": "1448520"
  },
  {
    "text": "changes in how its works and everything it still intends to do the same thing it still intended to share code across",
    "start": "1448520",
    "end": "1454250"
  },
  {
    "text": "everywhere and in fact it's possibly more so because this is one of the",
    "start": "1454250",
    "end": "1459350"
  },
  {
    "text": "quotes on the docs for version 2.0 they saying 100% source and binary compatibility for classic dotnet",
    "start": "1459350",
    "end": "1464870"
  },
  {
    "text": "framework xamarin assemblies and also existing portable class libraries important points to the important thing",
    "start": "1464870",
    "end": "1471080"
  },
  {
    "text": "to point out here is a hundred percent source and binary compatibility doesn't mean that all api's are going to be available it means it can have a hundred",
    "start": "1471080",
    "end": "1477830"
  },
  {
    "text": "percent source and binary compatibility across platforms so this means you going to be able to use it on all the",
    "start": "1477830",
    "end": "1483409"
  },
  {
    "text": "platforms and it will always be available so kind of what was wrong with",
    "start": "1483409",
    "end": "1489919"
  },
  {
    "text": "the version one series why why do we need such a big upheaval and a change to 2.0 and the simple answer is they're",
    "start": "1489919",
    "end": "1496429"
  },
  {
    "text": "just not enough libraries targeting the dotnet standard or portable class libraries so the majority of NuGet",
    "start": "1496429",
    "end": "1501650"
  },
  {
    "text": "packages a dotnet framework packages and and that means that with a new platform",
    "start": "1501650",
    "end": "1506690"
  },
  {
    "text": "like dotnet core it's very hard to consume those because it's just too different so that the stats that were",
    "start": "1506690",
    "end": "1512299"
  },
  {
    "text": "released was when they sort of announced the darkness standard was that there are about 45,000 NuGet packages targeting",
    "start": "1512299",
    "end": "1518750"
  },
  {
    "text": "the dotnet framework don''t framework verses four and a half thousand targeting portable class",
    "start": "1518750",
    "end": "1524690"
  },
  {
    "text": "libraries versus 1,800 which implemented the dotnet standard so there's a huge amount of code there which platforms",
    "start": "1524690",
    "end": "1531799"
  },
  {
    "text": "like dotnet core and other new platforms that come along you notice of other mono Bills of the xamarin and unity platforms",
    "start": "1531799",
    "end": "1538669"
  },
  {
    "text": "won't be able to take advantage of that code the other issue is that is tightly coupled the dotnet core so the dotnet",
    "start": "1538669",
    "end": "1546470"
  },
  {
    "text": "standard was built from the darknet core because it was a requirement for dotnet core but that means that right now with",
    "start": "1546470",
    "end": "1552919"
  },
  {
    "text": "the 1.0 say well one point series it can't evolve in the.net core separately if you add an API into dark net core",
    "start": "1552919",
    "end": "1559280"
  },
  {
    "text": "it'll kind of get into to the standard and secondly just not enough api's so",
    "start": "1559280",
    "end": "1565610"
  },
  {
    "text": "dotnet core refactored a whole bunch of API is a refactor the libraries and it moves things",
    "start": "1565610",
    "end": "1570860"
  },
  {
    "text": "it changed the shape of certain api's so not just removing things but change the shape of them as well so reflection",
    "start": "1570860",
    "end": "1576440"
  },
  {
    "text": "change and other things got removed and I like the quo here they said they've",
    "start": "1576440",
    "end": "1582530"
  },
  {
    "text": "kind of cleaned it up there but the cleanup went a little bit overboard and they did change things really quite",
    "start": "1582530",
    "end": "1587750"
  },
  {
    "text": "drastically when all that kind of means that porting applications to darknet core was harder than it needed to be and",
    "start": "1587750",
    "end": "1594320"
  },
  {
    "text": "it was it was kind of tricky so they're going to add in all these api's back",
    "start": "1594320",
    "end": "1599720"
  },
  {
    "text": "again and instead of adding absolutely everything from the dotnet framework they're going to be doing implementing",
    "start": "1599720",
    "end": "1606020"
  },
  {
    "text": "pulling in an intersection of the.net framework and mono and xamarin stuff the rationale behind this is that the idea",
    "start": "1606020",
    "end": "1613429"
  },
  {
    "text": "for dialect standard is to work across platforms and mono and xamarin have already been very successful at working",
    "start": "1613429",
    "end": "1619610"
  },
  {
    "text": "cross-platform and so if the api's are in mono and xamarin then they are probably the api's that we wanted to use",
    "start": "1619610",
    "end": "1625340"
  },
  {
    "text": "so it's gonna be an intersection of what that on a framework has what mono has and work from it from their platform",
    "start": "1625340",
    "end": "1633290"
  },
  {
    "text": "specific API is going to be excluded for the most part so it doesn't make sense for dominant framework to pull in WPF or",
    "start": "1633290",
    "end": "1639760"
  },
  {
    "text": "with Windows forms because obviously that's not going to work on all platforms and so for the most part",
    "start": "1639760",
    "end": "1647140"
  },
  {
    "text": "platform specific stuff is excluded but some api's are going to be pulled in and they are going to be used and some of",
    "start": "1647140",
    "end": "1654500"
  },
  {
    "text": "them are going to work in different ways so sometimes we they're going to be emulated and so things like the registry",
    "start": "1654500",
    "end": "1661610"
  },
  {
    "text": "for example okay yep faces being pulled in the audience there we we don't",
    "start": "1661610",
    "end": "1667520"
  },
  {
    "text": "necessarily want the whole of the registry there but sometimes it's really useful for saving application settings",
    "start": "1667520",
    "end": "1672890"
  },
  {
    "text": "and there will be existing code out there which is doing that for application settings and so if you",
    "start": "1672890",
    "end": "1678260"
  },
  {
    "text": "emulate it you know mono already emulates it with any files for example then that could be very useful for an",
    "start": "1678260",
    "end": "1684590"
  },
  {
    "text": "application point of view but then if you want to use it for something to look at system settings then it'll at runtime",
    "start": "1684590",
    "end": "1690679"
  },
  {
    "text": "it'll probably fail similarly things like app domains so app domain various",
    "start": "1690679",
    "end": "1696470"
  },
  {
    "text": "platforms like dotnet core don't support creating app domains but the api's are still going to be there because various",
    "start": "1696470",
    "end": "1702440"
  },
  {
    "text": "other things do and require it but at runtime they will throw they will table throw exceptions so I was going to",
    "start": "1702440",
    "end": "1711590"
  },
  {
    "text": "be in the darknet standard 2.0 all of these things basically as a high-level overview of the files of the api's are",
    "start": "1711590",
    "end": "1717770"
  },
  {
    "text": "going to be in there it's not just these citizen just the changes this is kind of everything so you know for example",
    "start": "1717770",
    "end": "1723590"
  },
  {
    "text": "threads thread pull tasks and everything a lot of that was already in dotnet core and already in the Garnett standard but",
    "start": "1723590",
    "end": "1730130"
  },
  {
    "text": "it adds back things like the binary format of for serialization as we've got compatibility with previous code there",
    "start": "1730130",
    "end": "1735800"
  },
  {
    "text": "XPath annex link as well and total exam and again if you go back to the github",
    "start": "1735800",
    "end": "1741470"
  },
  {
    "text": "page for the docs day you get to so you can kill your browser and look at all of the api's right so another somewhat",
    "start": "1741470",
    "end": "1750470"
  },
  {
    "text": "controversial chains are doing is changing the way the API is a reference the API set is defined by putting",
    "start": "1750470",
    "end": "1757550"
  },
  {
    "text": "everything into one library so if we have another look at I've closed that",
    "start": "1757550",
    "end": "1765860"
  },
  {
    "text": "one already",
    "start": "1765860",
    "end": "1768070"
  },
  {
    "text": "so if we have another look at our next standard library of 1 zeros series then",
    "start": "1773170",
    "end": "1779020"
  },
  {
    "text": "we see we've got a lot of different assemblies being pulled in we're pulling in lots of different packages and",
    "start": "1779020",
    "end": "1784360"
  },
  {
    "text": "there's a lot of api's going on there a lot of assembly is going on not not",
    "start": "1784360",
    "end": "1791350"
  },
  {
    "text": "right now so that's going to change now and the API is going to be defined by",
    "start": "1791350",
    "end": "1797830"
  },
  {
    "text": "next standard DLL by single API single a single assembly because the",
    "start": "1797830",
    "end": "1802870"
  },
  {
    "text": "specification is monolithic you have to have everything you can't mix and match you have the whole API set there so why",
    "start": "1802870",
    "end": "1809380"
  },
  {
    "text": "have reference assemblies as fine-grained and small just have them as a single one but this has implications",
    "start": "1809380",
    "end": "1814960"
  },
  {
    "text": "then on packaging on implementation and also on backwards compatibility the existing assemblies which reference",
    "start": "1814960",
    "end": "1823080"
  },
  {
    "text": "the.net standard are expecting to have all these fine grained assemblies around",
    "start": "1823080",
    "end": "1828100"
  },
  {
    "text": "and now they're going to be they'll have they'll have gone it's also going to",
    "start": "1828100",
    "end": "1834130"
  },
  {
    "text": "split with the.net core as I say previously built from the dotnet core source code now has its own repository on github and the dotnet slash standard",
    "start": "1834130",
    "end": "1840580"
  },
  {
    "text": "you can see all the API is defined there so they're all defined as c-sharp files and it builds in compiles and you can",
    "start": "1840580",
    "end": "1846700"
  },
  {
    "text": "raise issues against it you can talk to that the project maintainer is there and",
    "start": "1846700",
    "end": "1851860"
  },
  {
    "text": "by splitting out now it means that dotnet course simply implements the standard it's no longer a special case",
    "start": "1851860",
    "end": "1857230"
  },
  {
    "text": "whereas before it was driving the standard the other thing is that dotnet",
    "start": "1857230",
    "end": "1862720"
  },
  {
    "text": "core is also deprecating the fine-grained packages that it had because dotnet core needs to implement",
    "start": "1862720",
    "end": "1868870"
  },
  {
    "text": "the whole standard as well then it also",
    "start": "1868870",
    "end": "1873970"
  },
  {
    "text": "makes no sense to have all of the libraries as separate libraries but this was also one of the selling points of",
    "start": "1873970",
    "end": "1879670"
  },
  {
    "text": "darknet core was that you could have a pay-for-play you could deploy just the assemblies that were you using so this",
    "start": "1879670",
    "end": "1886300"
  },
  {
    "text": "is now going to have implications on deployment was that if you've got the platform package which includes",
    "start": "1886300",
    "end": "1892690"
  },
  {
    "text": "everything then it's much more of a heavyweight platform and the this talk of tooling to help this as well so post",
    "start": "1892690",
    "end": "1899920"
  },
  {
    "text": "builds you can do trimming and it'll just include just the dependencies you have and you can deploy that but right",
    "start": "1899920",
    "end": "1904990"
  },
  {
    "text": "now it's just going to be the whole platform what would be interesting would be to know who was already deploying dotnet",
    "start": "1904990",
    "end": "1911420"
  },
  {
    "text": "core applications as standalone applications trimmed down and who is deploying it as a platform application",
    "start": "1911420",
    "end": "1917900"
  },
  {
    "text": "as well so whether it's going to cause much of a trouble there you have any",
    "start": "1917900",
    "end": "1926750"
  },
  {
    "text": "questions where we are so far right very good right so I want to have a look at",
    "start": "1926750",
    "end": "1932720"
  },
  {
    "text": "how it works so how all the how we can sort of fix everything up and make everything work so that the differences",
    "start": "1932720",
    "end": "1938510"
  },
  {
    "text": "between platforms work okay and the differences between versions also work",
    "start": "1938510",
    "end": "1943900"
  },
  {
    "text": "so there's two ways of this works firstly reference assemblies and secondly type forwarding reference",
    "start": "1943900",
    "end": "1950570"
  },
  {
    "text": "assemblies are dead easy they're just the assemblies that you pass into the compiler and that defines the API if you",
    "start": "1950570",
    "end": "1956150"
  },
  {
    "text": "try and use an API that isn't in that assembly you'll get a compiler error so that's how we define our API set it's a",
    "start": "1956150",
    "end": "1961520"
  },
  {
    "text": "reference assembly the compiler is not interested in the implementation of any assembly reference and so reference",
    "start": "1961520",
    "end": "1968360"
  },
  {
    "text": "assemblies themselves they use empty types though so they have methods which have no implementation they don't return",
    "start": "1968360",
    "end": "1974990"
  },
  {
    "text": "anything and they're just void messes so if we have a look a really big file noti",
    "start": "1974990",
    "end": "1983330"
  },
  {
    "text": "you saw where I'm so big but we'll we'll do that so",
    "start": "1983330",
    "end": "1989559"
  },
  {
    "text": "that's not a good example let's have a look at where all my classes so here's",
    "start": "1992010",
    "end": "1999150"
  },
  {
    "text": "an example this is one of our reference assemblies here and you can see that all of the methods then are just empty if we",
    "start": "1999150",
    "end": "2005360"
  },
  {
    "text": "have a look at another one there there's there's nothing going on things are just there they're throwing there like even throwing a proper",
    "start": "2005360",
    "end": "2011240"
  },
  {
    "text": "exception there are empty types because the compiler is just not interested in the implementation so the implementation",
    "start": "2011240",
    "end": "2021799"
  },
  {
    "text": "assembly is then which do provide the implementation these get resolved at runtime these are implemented on your",
    "start": "2021799",
    "end": "2028010"
  },
  {
    "text": "system they're installed as your system and these contained after implementation so you must contain at least the",
    "start": "2028010",
    "end": "2033980"
  },
  {
    "text": "reference types and members that you've got in your code but they can obviously contain more a pis and so they can have",
    "start": "2033980",
    "end": "2041059"
  },
  {
    "text": "you know just because you're not referencing something doesn't mean it's not allowed to be in there and this is how a platform can support the super",
    "start": "2041059",
    "end": "2048108"
  },
  {
    "text": "sets of versions and it can support a later version if you have a look on your",
    "start": "2048109",
    "end": "2055398"
  },
  {
    "text": "system you've got the Microsoft net folder for dotnet framework these are all your implementation assemblies you",
    "start": "2055399",
    "end": "2060560"
  },
  {
    "text": "have a look at those in the decompile you'd see the actual code and what is it all doing if you fired up the compiler",
    "start": "2060560",
    "end": "2066230"
  },
  {
    "text": "and you use those as a reference you wouldn't be targeting a particular version of the framework you're targeting the version of the framework",
    "start": "2066230",
    "end": "2071510"
  },
  {
    "text": "you have installed and so you wouldn't be able to manage the api's that are available to you as a visual studio and",
    "start": "2071510",
    "end": "2077658"
  },
  {
    "text": "msbuild they use references assemblies and they've been doing it for absolutely ages and they use that to target the",
    "start": "2077659",
    "end": "2083148"
  },
  {
    "text": "particular framework you run so you've got the drop-down inside Visual Studio that's telling Visual Studio msbuild to",
    "start": "2083149",
    "end": "2090169"
  },
  {
    "text": "use that particular folder so we can have a look at that we pop back to here",
    "start": "2090169",
    "end": "2096760"
  },
  {
    "text": "and so we've got program files reference assemblies and the dotnet framework in",
    "start": "2096760",
    "end": "2103100"
  },
  {
    "text": "fact if we go back here there's a whole bunch of them you know from version 3.5 through to version 462 and if you have a",
    "start": "2103100",
    "end": "2109220"
  },
  {
    "text": "look in here there's a whole load of assemblies that are going on there I could drag one into it where are we look",
    "start": "2109220",
    "end": "2118609"
  },
  {
    "text": "there so let's drag one in and again if",
    "start": "2118609",
    "end": "2124040"
  },
  {
    "text": "we look to the type in here [Music] something that isn't an exception then",
    "start": "2124040",
    "end": "2132020"
  },
  {
    "text": "again that's got implementation typical",
    "start": "2132020",
    "end": "2139880"
  },
  {
    "text": "the one I pick at random isn't the reference assembly at all it's got an implementation where you can pretend",
    "start": "2139880",
    "end": "2145010"
  },
  {
    "text": "that's empty that would have been a whole lot better don't pick things of random in future",
    "start": "2145010",
    "end": "2151780"
  },
  {
    "text": "so assuming oh yeah I want to stay in Windows there's like because Visual",
    "start": "2151780",
    "end": "2157010"
  },
  {
    "text": "Studio uses reference assemblies from that folder whereas if we go back to new gap and we have a look at our one of our",
    "start": "2157010",
    "end": "2164180"
  },
  {
    "text": "assemblies here system collections for example and we open that what you can",
    "start": "2164180",
    "end": "2171740"
  },
  {
    "text": "see is we've got our Lib folder as you'd expect with with implementation",
    "start": "2171740",
    "end": "2176960"
  },
  {
    "text": "delousing there we've also got a ref folder so new get actually knows how to ship reference assemblies as well it's",
    "start": "2176960",
    "end": "2182300"
  },
  {
    "text": "got a ref folder and particular targets frameworks as well and then the DLL",
    "start": "2182300",
    "end": "2187430"
  },
  {
    "text": "there and that DLL would be an empty reference assembly as well right so when",
    "start": "2187430",
    "end": "2197420"
  },
  {
    "text": "you do make a reference on something and you embed a reference into a type on there the compiler actually embeds the",
    "start": "2197420",
    "end": "2203059"
  },
  {
    "text": "embeds that reference as an assembly qualified name so it's not just the names based system threading timer",
    "start": "2203059",
    "end": "2209030"
  },
  {
    "text": "it also embeds in the assembly name and there's as well systems are threading it also embeds the version and many public",
    "start": "2209030",
    "end": "2215210"
  },
  {
    "text": "key information as well and the runtime uses this when it's resolving all the all the types it looks for system",
    "start": "2215210",
    "end": "2222500"
  },
  {
    "text": "threading dll and make sure it's loaded and it uses that one of the things that is important with the CLR is that when",
    "start": "2222500",
    "end": "2230720"
  },
  {
    "text": "you're comparing types the assembly name is taken into into consideration so if I had system threading DLL which contains",
    "start": "2230720",
    "end": "2237619"
  },
  {
    "text": "system threading timer that is a different type to system dot foo DLL system threading timer and so they're",
    "start": "2237619",
    "end": "2244400"
  },
  {
    "text": "not equivalent and this is this then causes problems with platform implementation differences so this is a",
    "start": "2244400",
    "end": "2250940"
  },
  {
    "text": "good example down here system dot objects on the.net framework that's implemented in ms core Lib but in",
    "start": "2250940",
    "end": "2256549"
  },
  {
    "text": "portable class libraries and in dotnet core that's implemented in system run time we",
    "start": "2256549",
    "end": "2262130"
  },
  {
    "text": "need to try and unify that because just as it stands right now those types are not the same and so if you've got",
    "start": "2262130",
    "end": "2268520"
  },
  {
    "text": "systems or objects which isn't the same then that's going to cause you massive problems so this gets fixed by type",
    "start": "2268520",
    "end": "2276800"
  },
  {
    "text": "forwarding then won't come across type forwarding at all before yeah time forwarding is a nice mechanism within",
    "start": "2276800",
    "end": "2284120"
  },
  {
    "text": "the CLR which is an assembly level attribute which simply redirects them type to another assembly so we've got",
    "start": "2284120",
    "end": "2291770"
  },
  {
    "text": "this type forwarded to we give it another type name and it is then when the CLR tries to load that particular",
    "start": "2291770",
    "end": "2297860"
  },
  {
    "text": "type it sees the attribute says oh okay I need to look in another assembly and it goes and resolves it from there one",
    "start": "2297860",
    "end": "2304430"
  },
  {
    "text": "thing that type forwarding can do is it can't rename anything everything has to be in the same namespace it can just",
    "start": "2304430",
    "end": "2310130"
  },
  {
    "text": "move things into a different assembly it redirects at runtime but also it redirects at compile time so it can fix",
    "start": "2310130",
    "end": "2316700"
  },
  {
    "text": "up references at compile time as well so the compiler will also follow these attributes so what it allows us to",
    "start": "2316700",
    "end": "2324140"
  },
  {
    "text": "allows us to reference to type in one assembly but implemented it in another this is useful for platform differences",
    "start": "2324140",
    "end": "2330640"
  },
  {
    "text": "issues such as system the object being objects being implemented in different assemblies but also for refactoring the",
    "start": "2330640",
    "end": "2337040"
  },
  {
    "text": "platform for how net core for example could split things out into different assemblies how does this affect the",
    "start": "2337040",
    "end": "2345230"
  },
  {
    "text": "dotnet standard well the API is defined in these references in reference assemblies which are included in the",
    "start": "2345230",
    "end": "2350690"
  },
  {
    "text": "package and one point the one state version one series libraries they",
    "start": "2350690",
    "end": "2355970"
  },
  {
    "text": "reference types in system dot something dot dll so the whole bunch of systems thinking DLL and then when that gets",
    "start": "2355970",
    "end": "2364700"
  },
  {
    "text": "resolved at runtime each platform can then put in type forwarding to actually put it to the real implementation so we",
    "start": "2364700",
    "end": "2370760"
  },
  {
    "text": "can have different implementations on different platforms so we get some more",
    "start": "2370760",
    "end": "2376460"
  },
  {
    "text": "interesting question what can reference what so this is now more about the compatibility how do things and what is",
    "start": "2376460",
    "end": "2382640"
  },
  {
    "text": "it that you can reference between things if we look at the dotnet standard one",
    "start": "2382640",
    "end": "2388090"
  },
  {
    "text": "you get this kind of pattern here so across the top now we've got our application frameworks so we got",
    "start": "2388090",
    "end": "2393500"
  },
  {
    "text": "Donna framework net core xamarin zamarons very similar to dart net framework as it happens they can then",
    "start": "2393500",
    "end": "2399050"
  },
  {
    "text": "reference a net standard library built with the.net standard one so a donna",
    "start": "2399050",
    "end": "2404750"
  },
  {
    "text": "standard assembly and then don't let the standard assembly itself can reference another don't know standard library or a",
    "start": "2404750",
    "end": "2411200"
  },
  {
    "text": "portable class library I will quickly walk through how this works because",
    "start": "2411200",
    "end": "2416750"
  },
  {
    "text": "there is differences with the type systems here so when you are compiling your library your dotnet standard one",
    "start": "2416750",
    "end": "2423380"
  },
  {
    "text": "assembly the reference is there they are all talking to system thing DLL when",
    "start": "2423380",
    "end": "2431660"
  },
  {
    "text": "you're referencing a third party dot next and at libraries they're also referencing system thing DLL so no",
    "start": "2431660",
    "end": "2437510"
  },
  {
    "text": "compile errors that's all good that just works portable class library also references system that whatever DLL and",
    "start": "2437510",
    "end": "2443810"
  },
  {
    "text": "so no compile errors and that's works portable class libraries possibly have more API in the.net standard one and so",
    "start": "2443810",
    "end": "2450650"
  },
  {
    "text": "there's also another package you can use there you can bring in Microsoft net core portable compatibility to add in",
    "start": "2450650",
    "end": "2456260"
  },
  {
    "text": "those extra ap is when you're then building your app at the top level",
    "start": "2456260",
    "end": "2462110"
  },
  {
    "text": "firstly you need to sort of add a reference to your new assembly and there are changes to new get to make that work",
    "start": "2462110",
    "end": "2468380"
  },
  {
    "text": "so it new get understands the mapping between the platforms and the doníts standard library so it's it knows that",
    "start": "2468380",
    "end": "2475940"
  },
  {
    "text": "net 4.6 if you are targeting down at 4.6 you can include anything which targets next standard 1.3 and below when you're",
    "start": "2475940",
    "end": "2484880"
  },
  {
    "text": "compiling dotnet cornet core everything references system dot whatever DLL and so no compile errors so everything's",
    "start": "2484880",
    "end": "2491360"
  },
  {
    "text": "great with that so we've now got us like a full stack of everything being referenced but Donna framework and",
    "start": "2491360",
    "end": "2497870"
  },
  {
    "text": "xamarin they don't have system got whatever dot dll's they have things living in ms core lip and so we need to",
    "start": "2497870",
    "end": "2504950"
  },
  {
    "text": "fix that up and the system actually gives forwarding reference assemblies",
    "start": "2504950",
    "end": "2511310"
  },
  {
    "text": "which fix up those those changes so if we go back and have a look at Mary there",
    "start": "2511310",
    "end": "2519130"
  },
  {
    "text": "in our references assemblies folder up here four four six two if we go up to the top there is a facades folder",
    "start": "2519130",
    "end": "2527020"
  },
  {
    "text": "and this now gives us the API set from dotnet call from dotnet standards one point whatever and these are just type",
    "start": "2527020",
    "end": "2533200"
  },
  {
    "text": "forwarding assemblies and these will forward straight to m/s call it and so",
    "start": "2533200",
    "end": "2541960"
  },
  {
    "text": "that fixes things up it means that we've got no compile errors and we can then reference from the net framework to",
    "start": "2541960",
    "end": "2547300"
  },
  {
    "text": "dotnet standard to a third-party darknet standard or a portable class library a",
    "start": "2547300",
    "end": "2552480"
  },
  {
    "text": "runtime we're still going to have references to system but whatever DLL that's fine for dotnet core because that",
    "start": "2552480",
    "end": "2559570"
  },
  {
    "text": "everything just matches one-to-one again for the desktop frameworks those runtime",
    "start": "2559570",
    "end": "2565600"
  },
  {
    "text": "facades are in place and they're they're also installed into the microsoft.net",
    "start": "2565600",
    "end": "2571420"
  },
  {
    "text": "folder and that just redirects everything as well",
    "start": "2571420",
    "end": "2576060"
  },
  {
    "text": "Doni standard 2.0 has the same sort of idea it allows you to reference donek standard library and portable class",
    "start": "2576540",
    "end": "2582880"
  },
  {
    "text": "libraries but it's also adding in support for dotnet framework libraries as well and we'll kind of quickly walk",
    "start": "2582880",
    "end": "2588490"
  },
  {
    "text": "through that too to change the net standard dll changes a bunch of things as well and makes things a bit trickier",
    "start": "2588490",
    "end": "2594280"
  },
  {
    "text": "so when you build your library in the middle there all of your types of referenced as being part of next",
    "start": "2594280",
    "end": "2600160"
  },
  {
    "text": "standard DLL when you reference another dotnet standard library assembly if it's",
    "start": "2600160",
    "end": "2607119"
  },
  {
    "text": "net to sorry Dino standard to everything's fine because it's all next down to deal out everything just works so no compile errors but if you're",
    "start": "2607119",
    "end": "2614590"
  },
  {
    "text": "looking at a one point of series libraries there everything's reference",
    "start": "2614590",
    "end": "2619720"
  },
  {
    "text": "to system DLL and that won't works I would give you compile errors so what",
    "start": "2619720",
    "end": "2625540"
  },
  {
    "text": "happens is the next standard library includes a whole bunch of system facades there which then type forward to next",
    "start": "2625540",
    "end": "2631780"
  },
  {
    "text": "standard so we've got things pointing again to move things around and do that and a compile time it'll fix of those",
    "start": "2631780",
    "end": "2637180"
  },
  {
    "text": "references and fix up your compile errors the same is true for portable",
    "start": "2637180",
    "end": "2642730"
  },
  {
    "text": "class libraries they're expecting system dot whatever and so they get pulled through and redirected your additional",
    "start": "2642730",
    "end": "2648150"
  },
  {
    "text": "package is no longer necessary now because the new api's have been added and then we get to download framework",
    "start": "2648150",
    "end": "2654460"
  },
  {
    "text": "which is all different again because now we've got the references in there of talking to ms call it",
    "start": "2654460",
    "end": "2660670"
  },
  {
    "text": "rather than system dot whatever DLL and here again we see that the dotnet",
    "start": "2660670",
    "end": "2665799"
  },
  {
    "text": "standard library so I've got the package for the dotnet standard library - as you",
    "start": "2665799",
    "end": "2671950"
  },
  {
    "text": "can see it's still working progress because it's one point seven but that includes next standard DLL here which",
    "start": "2671950",
    "end": "2678970"
  },
  {
    "text": "has got our whole API set in there and then it's got a whole bunch of system the allows to type forward it's also got",
    "start": "2678970",
    "end": "2685839"
  },
  {
    "text": "MS core Lib as well in fact if we have a look at that I've got the NuGet package open here if we have a look in next",
    "start": "2685839",
    "end": "2693280"
  },
  {
    "text": "standard we see there's a whole load of namespaces and a whole bunch of types in there but then if we go to say system",
    "start": "2693280",
    "end": "2700150"
  },
  {
    "text": "console we see there are no types going on in there but there are a bunch of type forward attributes so we the NuGet",
    "start": "2700150",
    "end": "2707920"
  },
  {
    "text": "package will automatically forward away for us for that it also provides MS core",
    "start": "2707920",
    "end": "2712990"
  },
  {
    "text": "Lib which doesn't have any implementation and if we open that we then get even more type forwards as well",
    "start": "2712990",
    "end": "2719380"
  },
  {
    "text": "so if anything is referencing MS collip we've got the type forwards here which will point to net standard so it's going",
    "start": "2719380",
    "end": "2725319"
  },
  {
    "text": "to point everything to next standard for us and unify all those types so when you",
    "start": "2725319",
    "end": "2732369"
  },
  {
    "text": "combine your application again donek core is ships with a next standard dll so everything works and everything's",
    "start": "2732369",
    "end": "2738220"
  },
  {
    "text": "fine so that's good so that can be net cord 2.0 but we could have a transient",
    "start": "2738220",
    "end": "2743470"
  },
  {
    "text": "reference to Emma's call it and so that could cause us problems so what happens here is we've got a package with C the",
    "start": "2743470",
    "end": "2751329"
  },
  {
    "text": "net core app package includes the net standard library package which includes the MS core lips facade which for is",
    "start": "2751329",
    "end": "2756490"
  },
  {
    "text": "everything - net standard which gets for it's the real implementation so it's changing everything along and it gets repointed to the right thing and then",
    "start": "2756490",
    "end": "2765490"
  },
  {
    "text": "also we kind of have to do the reverse then for the desktop frameworks so then we have the desktop frameworks which",
    "start": "2765490",
    "end": "2772900"
  },
  {
    "text": "have a reference to Emma score live sorry it's got references to next",
    "start": "2772900",
    "end": "2778030"
  },
  {
    "text": "standard and they need to be forwarded to Emma's call it this isn't yet implemented so we don't have this yet but there will be a Florida in place for",
    "start": "2778030",
    "end": "2784480"
  },
  {
    "text": "that there's also going to be transient references here so the the football",
    "start": "2784480",
    "end": "2790839"
  },
  {
    "text": "class library have references to system whatever and dart net framework so yeah the donut framework one there has references to",
    "start": "2790839",
    "end": "2797020"
  },
  {
    "text": "Emma's core lib those are already implemented by the system so everything's fine there it just works",
    "start": "2797020",
    "end": "2802440"
  },
  {
    "text": "and at runtime the next standard DLL is forwarded simply to the actual",
    "start": "2802440",
    "end": "2807730"
  },
  {
    "text": "implementation for dotnet core and on the desktop again we need a forwarder",
    "start": "2807730",
    "end": "2813070"
  },
  {
    "text": "from net standard DLL 2ms call it and that is yet that's still part of these the work which is in progress so that",
    "start": "2813070",
    "end": "2820600"
  },
  {
    "text": "boils down to DA net standard one can reference a dotnet standard one assembly or a portable class library dotnet",
    "start": "2820600",
    "end": "2828790"
  },
  {
    "text": "standard two can reference a dotnet standard assembly version one or version two it can also reference portable class",
    "start": "2828790",
    "end": "2834850"
  },
  {
    "text": "libraries and it more importantly can reference dotnet framework assemblies as well so that means we can make use of",
    "start": "2834850",
    "end": "2841120"
  },
  {
    "text": "all the dotnet framework assemblies and packages that are available on NuGet for",
    "start": "2841120",
    "end": "2846400"
  },
  {
    "text": "us the other important thing is that NuGet knows the mapping between these",
    "start": "2846400",
    "end": "2852520"
  },
  {
    "text": "things in those the mapping between the platforms and the dotnet standard versions so when you are implementing a",
    "start": "2852520",
    "end": "2858180"
  },
  {
    "text": "platform and you're working with it and you want to consume something new get knows which version you can consume and",
    "start": "2858180",
    "end": "2865450"
  },
  {
    "text": "it also allows them the referencing between the dotnet framework libraries and from no standard platforms okay so",
    "start": "2865450",
    "end": "2873280"
  },
  {
    "text": "that kind of brings it to the end that kind of covers everything really and so to recap the dotnet standard it's a",
    "start": "2873280",
    "end": "2878590"
  },
  {
    "text": "specification which lists all the available API is across the platforms it's a replacement for portable class",
    "start": "2878590",
    "end": "2884170"
  },
  {
    "text": "libraries it changes the model it makes it so the portable class libraries are more extensible and you can add new",
    "start": "2884170",
    "end": "2889870"
  },
  {
    "text": "platforms in there and the other big thing really is that 2.0 is adding back all these API s so it's going to make",
    "start": "2889870",
    "end": "2895660"
  },
  {
    "text": "porting your code a whole lot easier because you should just be able to consume both you know so donek standard",
    "start": "2895660",
    "end": "2901840"
  },
  {
    "text": "platforms to be able to consume dotnet framework assemblies and vice-versa dotnet framework stuff will be able to",
    "start": "2901840",
    "end": "2907150"
  },
  {
    "text": "consume dotnet standard stuff so a couple of useful links just to finish",
    "start": "2907150",
    "end": "2912640"
  },
  {
    "text": "off then the dotnet standard is actually on github as I said under the dotnet repo Dante slash standard there's some",
    "start": "2912640",
    "end": "2919300"
  },
  {
    "text": "really useful documentation in there that that's where the links to the version information is is on",
    "start": "2919300",
    "end": "2925230"
  },
  {
    "text": "and also emo Landreth from the is a project program manager on the net team",
    "start": "2925230",
    "end": "2930270"
  },
  {
    "text": "he's got a number of very very useful videos which explains this stuff as well and they're well worth a watch and then",
    "start": "2930270",
    "end": "2938070"
  },
  {
    "text": "if you want to have a play with it yourself even though it's still in progress it's still currently called dot next down at one point seven you can get",
    "start": "2938070",
    "end": "2944550"
  },
  {
    "text": "it off of my gate in the dotnet core repo there is called next standard library - although that will probably",
    "start": "2944550",
    "end": "2950760"
  },
  {
    "text": "unified as progress goes on so that's going to be finished I don't know if",
    "start": "2950760",
    "end": "2956190"
  },
  {
    "text": "anybody has any questions right now hello yes where we've got a microphone",
    "start": "2956190",
    "end": "2962490"
  },
  {
    "text": "sorry so we can record it I have a question about refereeing interesting portable class libraries if it gets any",
    "start": "2962490",
    "end": "2968220"
  },
  {
    "text": "easier before they understand that one of the problems it could be that if you say I have a library that I want to",
    "start": "2968220",
    "end": "2975750"
  },
  {
    "text": "reference to other libraries but they are incompatible profiles yeah that's the problem can I then repackage my",
    "start": "2975750",
    "end": "2983609"
  },
  {
    "text": "library to use dotnet standard will it be possible then for to reference these",
    "start": "2983609",
    "end": "2989820"
  },
  {
    "text": "to other portable class libraries even though they have incompatible profiles",
    "start": "2989820",
    "end": "2994830"
  },
  {
    "text": "I'm not possibly not because of the incompatible profiles so there if we go",
    "start": "2994830",
    "end": "3000590"
  },
  {
    "text": "back to the links for dotnet standard where is it",
    "start": "3000590",
    "end": "3006470"
  },
  {
    "text": "there so there is a mapping of the profiles which are available down here",
    "start": "3006470",
    "end": "3012140"
  },
  {
    "text": "so we can't consume all portable class libraries but there's a subset of them which you can consume and these profiles",
    "start": "3012140",
    "end": "3018109"
  },
  {
    "text": "here are what you can consume and what version of the donek standard it maps to so as long as those mapped to a version",
    "start": "3018109",
    "end": "3024980"
  },
  {
    "text": "under standard you should be able to take them yes but if it's incompatible right now then the likelihood is that",
    "start": "3024980",
    "end": "3029990"
  },
  {
    "text": "they won't map to something there and in which case it won't it won't be able to do it however if it's your library you",
    "start": "3029990",
    "end": "3036650"
  },
  {
    "text": "could repackage it to be a dotnet standard library in which case then you know you can work around whatever API",
    "start": "3036650",
    "end": "3043369"
  },
  {
    "text": "difference is the work and then you could consume it from different places again mm-hmm thank you okay thanks any",
    "start": "3043369",
    "end": "3051530"
  },
  {
    "text": "other questions nope ok I think we're done and oh we have one question over there sorry hi",
    "start": "3051530",
    "end": "3061059"
  },
  {
    "text": "so the only promise of dotnet core particularly for web apps that you can put everything in a bin folder and not",
    "start": "3061059",
    "end": "3066730"
  },
  {
    "text": "care about the rest of the machine and only ship the parts you want so how's I going to play with this big",
    "start": "3066730",
    "end": "3073569"
  },
  {
    "text": "monolithic dll's anyone come across it yet and found that their deploys ten",
    "start": "3073569",
    "end": "3078819"
  },
  {
    "text": "times the size or I think he's too early to say about that so it is going to it is changing the",
    "start": "3078819",
    "end": "3084730"
  },
  {
    "text": "deployment model so right now everything is going to have a tonic core is going to have a platform package which",
    "start": "3084730",
    "end": "3090790"
  },
  {
    "text": "includes everything but which means that you can't do this smaller model and",
    "start": "3090790",
    "end": "3096339"
  },
  {
    "text": "smaller deployment but is that there are talk this talk of tools which will then",
    "start": "3096339",
    "end": "3101589"
  },
  {
    "text": "you know after you've done your build trim everything down so you've got a smaller deployment model but right now everything is still going to be this big",
    "start": "3101589",
    "end": "3107400"
  },
  {
    "text": "big thing but I'm also because when it's not done it's it's hard to say what the sizes of all of that as well so it might",
    "start": "3107400",
    "end": "3114520"
  },
  {
    "text": "be that it's still reasonable a reasonable size rather than millions of gigs right so that those tools are going",
    "start": "3114520",
    "end": "3120250"
  },
  {
    "text": "to be very non-trivial because as soon as you do some reflection or IOC you could be loading stuff which you very",
    "start": "3120250",
    "end": "3125740"
  },
  {
    "text": "hard to work out by inspecting the code what's being referenced yes yeah mono already has a some tooling in place for",
    "start": "3125740",
    "end": "3132940"
  },
  {
    "text": "for similar similar kinds of thing which does does that kind of thing but yes reflection can cause your problems and",
    "start": "3132940",
    "end": "3139839"
  },
  {
    "text": "you have to then provide extra inputs to say I also want these these assemblies",
    "start": "3139839",
    "end": "3145150"
  },
  {
    "text": "as well and you know maybe it'll just be that it'll work with the.net standard",
    "start": "3145150",
    "end": "3150849"
  },
  {
    "text": "libraries and themselves so it can trim down the platform but it won't trim down any of your any of your code or your third-party references you know it's not",
    "start": "3150849",
    "end": "3158770"
  },
  {
    "text": "yet defined but of course it's you the current position now with a monolithic",
    "start": "3158770",
    "end": "3163990"
  },
  {
    "text": "package is the same as when you do an SDK based platform install so where you",
    "start": "3163990",
    "end": "3169420"
  },
  {
    "text": "install dotnet onto the the whatever it is the container that you're you're running in and then you've just",
    "start": "3169420",
    "end": "3175240"
  },
  {
    "text": "installed just Europe you're just your application and there's the dependencies there as part of the platform",
    "start": "3175240",
    "end": "3182609"
  },
  {
    "text": "okay right well thank you very much for coming then okay",
    "start": "3182869",
    "end": "3189260"
  }
]