[
  {
    "text": "well I do think it's about that time um so I hope that everyone enjoyed lunch I sure did I thought it was great my name",
    "start": "6919",
    "end": "14480"
  },
  {
    "text": "is Sandy bar and I'm here today to talk to you about automated accessibility",
    "start": "14480",
    "end": "19920"
  },
  {
    "text": "assurances I got involved with accessibility because I think a lot about who has access to things and and",
    "start": "19920",
    "end": "26800"
  },
  {
    "text": "what we can do for each other in the world and as a software engineer um you know what we can do for our",
    "start": "26800",
    "end": "32800"
  },
  {
    "text": "organizations is ensuring that we create accessible software for our users and so",
    "start": "32800",
    "end": "38600"
  },
  {
    "text": "that's what my talk is about today accessibility testing is often thought about as an afterthought it's",
    "start": "38600",
    "end": "46239"
  },
  {
    "text": "considered to be technical debt something to be done towards the end of a project after you build the software",
    "start": "46239",
    "end": "53480"
  },
  {
    "text": "but waiting until development is CED completed can be costly and it can lead to unplanned rework that only only then",
    "start": "53480",
    "end": "60320"
  },
  {
    "text": "increases the time to release instead though if we account for the accessibility requirements from the",
    "start": "60320",
    "end": "67200"
  },
  {
    "text": "start of a project and create test plans based on those requirements we can then",
    "start": "67200",
    "end": "72600"
  },
  {
    "text": "automate tests to ensure that what we deliver is actually accessible and remains to be accessible as it scales",
    "start": "72600",
    "end": "80320"
  },
  {
    "text": "and evolves over time the web content accessibility",
    "start": "80320",
    "end": "85600"
  },
  {
    "text": "guidelines is an international standard developed by the worldwide web Consortium",
    "start": "85600",
    "end": "91360"
  },
  {
    "text": "w3c web accessibility initiative pronounced y w AI that explains how to",
    "start": "91360",
    "end": "98320"
  },
  {
    "text": "make web content more accessible to people with disabilities wad defines three levels of",
    "start": "98320",
    "end": "104600"
  },
  {
    "text": "accessibility conformance first is AAA uh which is optimally accessible it's",
    "start": "104600",
    "end": "112040"
  },
  {
    "text": "the highest level and it should be required as a policy for not required I'm sorry as a policy for entire sites",
    "start": "112040",
    "end": "118880"
  },
  {
    "text": "because it's not always uh possible to meet the level of success criteria for some content for example the contrast",
    "start": "118880",
    "end": "126640"
  },
  {
    "text": "ratio between text and color backgrounds and background colors should be at least seven to one and pre-recorded video",
    "start": "126640",
    "end": "133920"
  },
  {
    "text": "content must have a sign language translation and audio",
    "start": "133920",
    "end": "139800"
  },
  {
    "text": "descriptions websites that then meet doublea standards are considered reasonably accessible by most users text",
    "start": "139959",
    "end": "147360"
  },
  {
    "text": "and background color contrasts must be between four and a half to one and content should be presented under clear",
    "start": "147360",
    "end": "154239"
  },
  {
    "text": "headings in a logical order as in H1 and H2 and H3 and all elements that affect",
    "start": "154239",
    "end": "161360"
  },
  {
    "text": "navigation need to be consistent across the site websites that are meet level a meet",
    "start": "161360",
    "end": "169280"
  },
  {
    "text": "the minimum level of conformance and is considered basic accessibility for every",
    "start": "169280",
    "end": "174640"
  },
  {
    "text": "website this includes things like keyboard navigation providing equivalent text for non-text content form controls",
    "start": "174640",
    "end": "182519"
  },
  {
    "text": "need to have labels content must be accessible by screen readers and information must not be conveyed through",
    "start": "182519",
    "end": "189720"
  },
  {
    "text": "size shape or color alone the single double and AAA",
    "start": "189720",
    "end": "195040"
  },
  {
    "text": "conformance levels are cumulative meaning that to be considered doublea",
    "start": "195040",
    "end": "200239"
  },
  {
    "text": "conformant websites must meet all success criteria for single and double A",
    "start": "200239",
    "end": "205640"
  },
  {
    "text": "and to be AAA conformant all criteria must be met for single double and AA",
    "start": "205640",
    "end": "212120"
  },
  {
    "text": "a a11 y or as you may have also heard it pronounced Ally is a numeronym it's",
    "start": "212120",
    "end": "218879"
  },
  {
    "text": "shorthand for a word where the count of abbreviated letters are replaced by that numeral it's like kubernetes or ien for",
    "start": "218879",
    "end": "228000"
  },
  {
    "text": "internationalization although it can be much easier to type and spell using a11y",
    "start": "228000",
    "end": "234040"
  },
  {
    "text": "in place of the word accessibility is not actually accessible it fails the wag",
    "start": "234040",
    "end": "239159"
  },
  {
    "text": "31 one one success criteria for unusual words because certain disabilities can",
    "start": "239159",
    "end": "245319"
  },
  {
    "text": "make it difficult to understand non-literal Language by automating assurances I mean",
    "start": "245319",
    "end": "252519"
  },
  {
    "text": "programmatic automated tests as opposed to manual testing performed by a person",
    "start": "252519",
    "end": "258440"
  },
  {
    "text": "automated tests can validate in a matter of minutes that a new set of changes doesn't adversely affect accessibility",
    "start": "258440",
    "end": "265919"
  },
  {
    "text": "and continuous integration pipelines can automate checks on code rep repositories that reduce defects and ensure that",
    "start": "265919",
    "end": "272479"
  },
  {
    "text": "software is delivered reliably have you ever wondered why our websites aren already accessible why are",
    "start": "272479",
    "end": "280240"
  },
  {
    "text": "we hesitating to solve this problem for one it can be too hard as Engineers were",
    "start": "280240",
    "end": "286600"
  },
  {
    "text": "not all experts on accessibility and the majority of us don't actually experience things like visual or other impairments",
    "start": "286600",
    "end": "293880"
  },
  {
    "text": "that require the use of assisted technology like a screen reader so then we assume the majority of our users also",
    "start": "293880",
    "end": "300639"
  },
  {
    "text": "aren't experiencing these challenges and it can be too expensive",
    "start": "300639",
    "end": "305759"
  },
  {
    "text": "everything from the cost of Enterprise testing tools to prioritizing the effort and the rework that we talked about",
    "start": "305759",
    "end": "312320"
  },
  {
    "text": "earlier and often we get too stuck on our design decisions and this is not",
    "start": "312320",
    "end": "318280"
  },
  {
    "text": "meant as any offense to any designers I'm sure it's not you it's that once decisions have been made they can be",
    "start": "318280",
    "end": "325080"
  },
  {
    "text": "very hard to change so thankfully we don't have to do all the heavy lifting on our own today",
    "start": "325080",
    "end": "333520"
  },
  {
    "text": "I'm demonstrating these free and open-source tools to access with accessibility of testing and ensure",
    "start": "333520",
    "end": "339800"
  },
  {
    "text": "conformance with withag standards and success criterias first we'll take a look at",
    "start": "339800",
    "end": "345759"
  },
  {
    "text": "eslint plugins that validate accessibility standards are met by performing static code analysis directly",
    "start": "345759",
    "end": "352720"
  },
  {
    "text": "on your template code then I'll show how user Focus testing with testing Library",
    "start": "352720",
    "end": "358639"
  },
  {
    "text": "ensures exessive ibility in your unit tests and finally we'll add the ax core",
    "start": "358639",
    "end": "364440"
  },
  {
    "text": "accessibility engine that automates accessibility testing against a fully running application in your endtoend",
    "start": "364440",
    "end": "371560"
  },
  {
    "text": "test these can all be used with various front-end Frameworks like react angular",
    "start": "371560",
    "end": "377160"
  },
  {
    "text": "view in V or NX workspaces with just or v test in",
    "start": "377160",
    "end": "383759"
  },
  {
    "text": "jsd so first up I'll show how the rule sets in these es lint plugins",
    "start": "383759",
    "end": "389919"
  },
  {
    "text": "assist with accessibility by giving feed developers feedback right in the code",
    "start": "389919",
    "end": "395280"
  },
  {
    "text": "early in the development stage eslint is a static code analysis tool that can",
    "start": "395280",
    "end": "400560"
  },
  {
    "text": "efficiently audit code and flag problems based on lint rules these rules run against",
    "start": "400560",
    "end": "407319"
  },
  {
    "text": "pre-compiled code checking to ensure the specific standards for each rule are",
    "start": "407319",
    "end": "412960"
  },
  {
    "text": "met these particular eslint plugins are framework specific because they parse",
    "start": "412960",
    "end": "418360"
  },
  {
    "text": "and evaluate framework specific template code there's a comparable recommended",
    "start": "418360",
    "end": "424720"
  },
  {
    "text": "accessibility rule set in each of these plugins which listed the rules here on the screen quite a lot of them um they",
    "start": "424720",
    "end": "432360"
  },
  {
    "text": "can detect many common accessibility issues the plug-in for react jsx a11y",
    "start": "432360",
    "end": "438479"
  },
  {
    "text": "came first and this is where the rule set was initially developed and has the most comprehensive set of rules the",
    "start": "438479",
    "end": "445440"
  },
  {
    "text": "vue.js accessibility plug-in came later and superseded a separate vuejs a11y",
    "start": "445440",
    "end": "451879"
  },
  {
    "text": "plug-in that was actually no longer being maintained the accessibility rule set",
    "start": "451879",
    "end": "456919"
  },
  {
    "text": "for angular is in the angular eslint template plugin which will be installed and available to you if you're already",
    "start": "456919",
    "end": "463400"
  },
  {
    "text": "using angular eslint I myself am a member of the angular eslint",
    "start": "463400",
    "end": "469479"
  },
  {
    "text": "organization eslint plugins must first be installed via mpm or your preferred",
    "start": "469479",
    "end": "474840"
  },
  {
    "text": "package manager and enabled via configuration many pop popular workspace",
    "start": "474840",
    "end": "480120"
  },
  {
    "text": "and build tools come preconfigured with eslint and its recommended rule set the",
    "start": "480120",
    "end": "485840"
  },
  {
    "text": "plugins are enabled by adding them to the plugins configuration and for the jsx and view plugins the recommended",
    "start": "485840",
    "end": "492319"
  },
  {
    "text": "rules are applied in the root extend configuration eslint supports various",
    "start": "492319",
    "end": "498560"
  },
  {
    "text": "configuration formats like Json javascripts modules and also",
    "start": "498560",
    "end": "504879"
  },
  {
    "text": "yaml and then um configurations for your various rules uh",
    "start": "507440",
    "end": "513240"
  },
  {
    "text": "can be added as well as you need to maybe adjust some some things for your codebase so this this is an example of",
    "start": "513240",
    "end": "519919"
  },
  {
    "text": "uh configuring the rule label has for for the vue.js accessibility plugin for angular the template rules",
    "start": "519919",
    "end": "527640"
  },
  {
    "text": "are conf configured slightly differently in this HTML override section which",
    "start": "527640",
    "end": "532839"
  },
  {
    "text": "applies the configuration to both inline and separate HTML template files for",
    "start": "532839",
    "end": "538200"
  },
  {
    "text": "angular you want to look into and follow the setup for each plug-in for your framework or your style of workspace for",
    "start": "538200",
    "end": "545680"
  },
  {
    "text": "example for angular there's an NG ad schematic that will install and configure angular es lint for your",
    "start": "545680",
    "end": "551920"
  },
  {
    "text": "angular CLI project but if you were using an enex workspace NX handles that",
    "start": "551920",
    "end": "558880"
  },
  {
    "text": "set setup and configuration for you so let's get into each of the rules and",
    "start": "558880",
    "end": "564160"
  },
  {
    "text": "what they help us solve the first rule alt text checks for images to have",
    "start": "564160",
    "end": "570360"
  },
  {
    "text": "alternative text image alt text needs to serve the same purpose and have the same meaning",
    "start": "570360",
    "end": "577560"
  },
  {
    "text": "or intent as the image image alt text shouldn't repeat information that is nearby or from the",
    "start": "577560",
    "end": "584560"
  },
  {
    "text": "image caption and it's very important that we also remember to use empty alt",
    "start": "584560",
    "end": "590519"
  },
  {
    "text": "text for decorative images it's appropriate to use an empty alt when we have equivalent text",
    "start": "590519",
    "end": "596800"
  },
  {
    "text": "provided adjacent to the image and the image itself would provide no additional",
    "start": "596800",
    "end": "602240"
  },
  {
    "text": "meaning for a non-visual user I got lots of time to tell you",
    "start": "602240",
    "end": "607560"
  },
  {
    "text": "about alt text but to screen reader users less is more your alt text should",
    "start": "607560",
    "end": "613360"
  },
  {
    "text": "be no longer than 125 characters it shouldn't contain the phrase image of",
    "start": "613360",
    "end": "619120"
  },
  {
    "text": "include the word picture image is the inherent role and will be announced alongside the alt text what should be",
    "start": "619120",
    "end": "627320"
  },
  {
    "text": "provided is a short descriptive label describing the meaning purpose or intent of the image to help figure it out w3c",
    "start": "627320",
    "end": "635800"
  },
  {
    "text": "provides an ALT decision tree resource that helps describe how to use alt text",
    "start": "635800",
    "end": "641120"
  },
  {
    "text": "on images in various situations and I'll link this resource at the end this anchor has content rule checks",
    "start": "641120",
    "end": "648720"
  },
  {
    "text": "anchors or links to have an accessible name the accessible name is what is read",
    "start": "648720",
    "end": "655120"
  },
  {
    "text": "by screen readers for an element along with its role the accessible name can be provided by text content an ARA label or",
    "start": "655120",
    "end": "663279"
  },
  {
    "text": "a child element with text content or an ARA label similarly The Heading has content",
    "start": "663279",
    "end": "670079"
  },
  {
    "text": "rule checks for headings to have an accessible name in angular we have the elements",
    "start": "670079",
    "end": "676399"
  },
  {
    "text": "have content rule which covers both of those things and is the equivalent of the anchor or heading has content",
    "start": "676399",
    "end": "683120"
  },
  {
    "text": "rules this rule checks links buttons headings all for accessible name",
    "start": "683120",
    "end": "690000"
  },
  {
    "text": "the label has Associated control rule checks for labels to be associated with the form control and provide their",
    "start": "690000",
    "end": "696680"
  },
  {
    "text": "accessible name a form control may have more than one label but a label can't be",
    "start": "696680",
    "end": "703040"
  },
  {
    "text": "Associated to more than one control and you're not supposed to use labels as",
    "start": "703040",
    "end": "708160"
  },
  {
    "text": "Standalone elements without a form control that's not their",
    "start": "708160",
    "end": "714040"
  },
  {
    "text": "purpose a form control then nested inside a label as we're showing here",
    "start": "714040",
    "end": "719240"
  },
  {
    "text": "creates an implicit Association this rule validates implicit associations by",
    "start": "719240",
    "end": "724760"
  },
  {
    "text": "looking for a form control element inside the label there's also a configuration option to support any of",
    "start": "724760",
    "end": "731480"
  },
  {
    "text": "your custom form controls you might",
    "start": "731480",
    "end": "735240"
  },
  {
    "text": "have a label with a matching um four attribute uh to an ID on a form control",
    "start": "737600",
    "end": "744480"
  },
  {
    "text": "then creates what's called an explicit Association this rule only validates",
    "start": "744480",
    "end": "750600"
  },
  {
    "text": "explicit associations by just checking that the label has a four attribute so it doesn't go as far as looking for a",
    "start": "750600",
    "end": "757480"
  },
  {
    "text": "control throughout your template code to match the four and ID actually static code analysis works best",
    "start": "757480",
    "end": "765000"
  },
  {
    "text": "with nested controls where the implicit Association can be validated within a single note it's often better to imp to",
    "start": "765000",
    "end": "773279"
  },
  {
    "text": "prefer these implicit nested label associations wherever possible anyways",
    "start": "773279",
    "end": "778920"
  },
  {
    "text": "because with for an ID you also must take care to guarantee the uniqueness of",
    "start": "778920",
    "end": "784279"
  },
  {
    "text": "IDs throughout your page label has four is then the",
    "start": "784279",
    "end": "791199"
  },
  {
    "text": "comparable rule in the vue.js accessibility plug-in it has been deprecated in jsx a11y and angular es",
    "start": "791199",
    "end": "798519"
  },
  {
    "text": "lint and was the predecessor of their label has Associated control rules",
    "start": "798519",
    "end": "803720"
  },
  {
    "text": "there's also a ticket open in the view accessibility plugin uh to replicate",
    "start": "803720",
    "end": "809279"
  },
  {
    "text": "this Rule and move to label has Associated control there's another ticket about the",
    "start": "809279",
    "end": "815079"
  },
  {
    "text": "default configuration on this rule requiring both an explicit with matching",
    "start": "815079",
    "end": "820680"
  },
  {
    "text": "for an ID and implicit Association by nesting the the form control you must",
    "start": "820680",
    "end": "828399"
  },
  {
    "text": "configure this rule to require only one of those checks for nesting controls or",
    "start": "828399",
    "end": "833519"
  },
  {
    "text": "for the four and ID attributes applying this on top of the recommended configur",
    "start": "833519",
    "end": "838720"
  },
  {
    "text": "figuration makes this label house for rule behave like the label house",
    "start": "838720",
    "end": "843759"
  },
  {
    "text": "Associated control rule this next rule Mouse events have key events checks for elements with",
    "start": "843759",
    "end": "850639"
  },
  {
    "text": "mouse over or Mouse out events and ensures that they also have a paired are",
    "start": "850639",
    "end": "856040"
  },
  {
    "text": "paired with a focus or blur event for keyboard users for example like a tool tip is",
    "start": "856040",
    "end": "862320"
  },
  {
    "text": "intended to provide clarification or missing information and needs to be shown both to Mouse and and keyboard",
    "start": "862320",
    "end": "869519"
  },
  {
    "text": "users and for screen reader users as a side note a clarifying tool tip should",
    "start": "869519",
    "end": "875720"
  },
  {
    "text": "also be connected to its trigger with the ARA described by",
    "start": "875720",
    "end": "880839"
  },
  {
    "text": "attribute similarly this rule looks for elements with click events without key",
    "start": "880839",
    "end": "886320"
  },
  {
    "text": "events that do not otherwise have built-in keyboard support from the browser HTML elements that support",
    "start": "886320",
    "end": "893120"
  },
  {
    "text": "interaction have builtin keyboard support like your button or your form controls when a button has focus it can",
    "start": "893120",
    "end": "900959"
  },
  {
    "text": "be activated with the enter or space key same as clicking it with the mouse in",
    "start": "900959",
    "end": "906240"
  },
  {
    "text": "other words that button's click event is activated with enterer space without",
    "start": "906240",
    "end": "912560"
  },
  {
    "text": "giving it explicit key events and an anchor link with an href can be",
    "start": "912560",
    "end": "919120"
  },
  {
    "text": "navigated with an Enter key typically so not only does keyboard support make interactive controls more",
    "start": "919120",
    "end": "926199"
  },
  {
    "text": "accessible for keyboard users but it also enables assistive Technologies like",
    "start": "926199",
    "end": "931279"
  },
  {
    "text": "when a screen reader announces information about the focused element or switch device is used to navigate a web",
    "start": "931279",
    "end": "938959"
  },
  {
    "text": "page however one issue I have with this rule is that its suggestion to add a",
    "start": "938959",
    "end": "945160"
  },
  {
    "text": "keyboard listener to elements that are not inherently interactive doesn't quite",
    "start": "945160",
    "end": "950279"
  },
  {
    "text": "improve accessibility for all users for starters non-interactive elements that",
    "start": "950279",
    "end": "955920"
  },
  {
    "text": "don't have built-in keyboard support ALS also don't receive focus by default so",
    "start": "955920",
    "end": "961839"
  },
  {
    "text": "this next rule is good to pair with the click events have key events rule interactive supports Focus validates",
    "start": "961839",
    "end": "969279"
  },
  {
    "text": "that interactive elements are actually able to receive Focus either because they have built-in keyboard support from",
    "start": "969279",
    "end": "976199"
  },
  {
    "text": "the browser or by having a tab index to include them in the focus order this rule passes with the tab",
    "start": "976199",
    "end": "983600"
  },
  {
    "text": "index but tab index is not the suggested fix because it's not actually a appropriate to go just freely throw in",
    "start": "983600",
    "end": "990880"
  },
  {
    "text": "tab index wherever in order to satisfy Wick haag's 4.1.2 name roll value Criterion you",
    "start": "990880",
    "end": "998319"
  },
  {
    "text": "shouldn't add tab index to elements without a label that describes the context and a role to specify what that",
    "start": "998319",
    "end": "1005399"
  },
  {
    "text": "element is if you have violations for this rule or the previous click events have key",
    "start": "1005399",
    "end": "1011680"
  },
  {
    "text": "events rule you should instead look to use your semantic HTML elements that",
    "start": "1011680",
    "end": "1017199"
  },
  {
    "text": "already have built-in keyboard with board support or if you're building custom",
    "start": "1017199",
    "end": "1022279"
  },
  {
    "text": "interactions Yara provides an authoring practices guide which is a resource you",
    "start": "1022279",
    "end": "1027918"
  },
  {
    "text": "can look up up how to build custom widgets in a conformant matter and I will link that Resource as well at the",
    "start": "1027919",
    "end": "1034880"
  },
  {
    "text": "end Beyond ensuring keyboard support the no static element interactions rule",
    "start": "1034880",
    "end": "1040400"
  },
  {
    "text": "requires an element with click or Mouse events to be a semantic HTML element",
    "start": "1040400",
    "end": "1046120"
  },
  {
    "text": "with an inherent interactive role or have an explicit ARA role assigned in",
    "start": "1046120",
    "end": "1051600"
  },
  {
    "text": "order to meet the wick Haag 4.2.1 name roll value criteria this rule does Ensure",
    "start": "1051600",
    "end": "1058840"
  },
  {
    "text": "accessibility for screen readers users and those with that need other assistive Technologies to rely that rely on the",
    "start": "1058840",
    "end": "1065919"
  },
  {
    "text": "accessibility apis in the browser speaking of the accessibility",
    "start": "1065919",
    "end": "1071360"
  },
  {
    "text": "API next up are a few of the rules that concern Arya roles and attributes Arya",
    "start": "1071360",
    "end": "1078080"
  },
  {
    "text": "is an an acronym for accessible Rich internet applications the purpose of Arya is to provide information to screen",
    "start": "1078080",
    "end": "1085440"
  },
  {
    "text": "readers and other assistive Technologies the first rule of Arya is",
    "start": "1085440",
    "end": "1090799"
  },
  {
    "text": "that no Arya is better than bad Arya if an HTML element with the required",
    "start": "1090799",
    "end": "1096919"
  },
  {
    "text": "semantics and behavior already exists you should use that invalid use of Arya",
    "start": "1096919",
    "end": "1103760"
  },
  {
    "text": "can actually misrepresent an element's functionality and cause confusion for",
    "start": "1103760",
    "end": "1109000"
  },
  {
    "text": "non-visual users so if you're using Arya to present information to the accessibility API be sure to follow the",
    "start": "1109000",
    "end": "1116720"
  },
  {
    "text": "Y areya authoring practices guide and I'd also recommend that you build your",
    "start": "1116720",
    "end": "1122120"
  },
  {
    "text": "components as as shared components to be used throughout your application and those are implemented with Arya rather",
    "start": "1122120",
    "end": "1128960"
  },
  {
    "text": "than sticking Arya roles and attributes directly in your feature code using shared components can also",
    "start": "1128960",
    "end": "1136799"
  },
  {
    "text": "create help to create a cons consistent user experience across your application this next rule validates ARA",
    "start": "1136799",
    "end": "1144760"
  },
  {
    "text": "Ro attributes to be valid ARA roles if you assign a invalid ARA role you can't",
    "start": "1144760",
    "end": "1151080"
  },
  {
    "text": "just make things up the API it will will not not understand semantically what that element is so this is a great one",
    "start": "1151080",
    "end": "1158640"
  },
  {
    "text": "to pre pair with the previous rule for validating those area attributes there's no support yet for",
    "start": "1158640",
    "end": "1165840"
  },
  {
    "text": "this an angular eslint uh but I do plan to add it an AR Ro defines then what an",
    "start": "1165840",
    "end": "1172039"
  },
  {
    "text": "element does semantic HTML elements have an implicit ARA role it is best to use",
    "start": "1172039",
    "end": "1179640"
  },
  {
    "text": "those well supported native HTML whenever you can in your IDE with an es lint",
    "start": "1179640",
    "end": "1188000"
  },
  {
    "text": "extension enabled when you Mouse over a violation a red squiggly line you might see sometimes a suggestion gets provided",
    "start": "1188000",
    "end": "1195480"
  },
  {
    "text": "to you this rules checks for elements with ARA roles to have valid ARA attributes",
    "start": "1195480",
    "end": "1203400"
  },
  {
    "text": "and it's telling us that this this one has um require I'm sorry the required AR",
    "start": "1203400",
    "end": "1211120"
  },
  {
    "text": "attributes it's saying that this one has required ARA attribute of ARA",
    "start": "1211120",
    "end": "1217559"
  },
  {
    "text": "checked um so we we have several types of Arya roles that that require",
    "start": "1217559",
    "end": "1223280"
  },
  {
    "text": "different ARA attributes to provide information such as their state to the API so the combo box rule requires ARA",
    "start": "1223280",
    "end": "1231760"
  },
  {
    "text": "controls for what it controls and area expanded for whether or not it's",
    "start": "1231760",
    "end": "1236960"
  },
  {
    "text": "open some rules then have built-in State when they're used with the appropriate semantic HTML",
    "start": "1236960",
    "end": "1243919"
  },
  {
    "text": "elements so for example if we use the rule switch uh with an input type",
    "start": "1243919",
    "end": "1250520"
  },
  {
    "text": "checkbox the required ARA attribute ARA checked is then implied by the",
    "start": "1250520",
    "end": "1256320"
  },
  {
    "text": "checkbox's checked state",
    "start": "1256320",
    "end": "1260120"
  },
  {
    "text": "this rule role supports ARA props is only available currently in the jsx rule",
    "start": "1261360",
    "end": "1266640"
  },
  {
    "text": "set role supports ARA props validates the the assigned role supports the given",
    "start": "1266640",
    "end": "1272840"
  },
  {
    "text": "properties even for semantic HTML elements that have an implicit ARA role",
    "start": "1272840",
    "end": "1278159"
  },
  {
    "text": "like this input type radio Arya invalid is not a valid attribute for radio",
    "start": "1278159",
    "end": "1285960"
  },
  {
    "text": "buttons these are some of the additional ARA rules that are so far only available",
    "start": "1287039",
    "end": "1292320"
  },
  {
    "text": "in the react jsx accessibility plug-in these rules can be applied incrementally",
    "start": "1292320",
    "end": "1297440"
  },
  {
    "text": "to improve ARA and usage of semantic HTML elements in an existing code base",
    "start": "1297440",
    "end": "1303080"
  },
  {
    "text": "such as not allowing an element with an inherent non-interactive role like a div",
    "start": "1303080",
    "end": "1309200"
  },
  {
    "text": "to be assigned an interactive role like a button automating these lint rules gives",
    "start": "1309200",
    "end": "1315080"
  },
  {
    "text": "developers accessibility guidance early on in the development life cycle even",
    "start": "1315080",
    "end": "1320480"
  },
  {
    "text": "before the code is run in my experience having applied these lint rules in large",
    "start": "1320480",
    "end": "1326720"
  },
  {
    "text": "codebases developers are educated and become more aware of accessibility from",
    "start": "1326720",
    "end": "1332080"
  },
  {
    "text": "the start of a project lint rules can run automated checks and perform fixes",
    "start": "1332080",
    "end": "1338000"
  },
  {
    "text": "on our code but human factors do have a significant role to play in",
    "start": "1338000",
    "end": "1343559"
  },
  {
    "text": "accessibility and software testing to ensure that our products are design designed and developed with",
    "start": "1343559",
    "end": "1349440"
  },
  {
    "text": "consideration for all of our users so in this next section I'll demonstrate how",
    "start": "1349440",
    "end": "1355640"
  },
  {
    "text": "we can use testing library to mimic user interaction and automate validation",
    "start": "1355640",
    "end": "1361480"
  },
  {
    "text": "based on how our components are actually being used by our users testing library is a utility for",
    "start": "1361480",
    "end": "1368480"
  },
  {
    "text": "testing Dom nodes whether they're simulated as JS Dom with just or in the",
    "start": "1368480",
    "end": "1373760"
  },
  {
    "text": "browser with other test Runners testing Library gain pop popularity with react but there are",
    "start": "1373760",
    "end": "1379960"
  },
  {
    "text": "testing Library wrappers for other Frameworks uh like I'm showing angular view here and several others I certainly",
    "start": "1379960",
    "end": "1386919"
  },
  {
    "text": "couldn't fit on this slide testing library is most commonly used in unit testing with jest and JS Tom but it can",
    "start": "1386919",
    "end": "1394640"
  },
  {
    "text": "also then be used with other test Runners and Frameworks testing Library queries the",
    "start": "1394640",
    "end": "1401080"
  },
  {
    "text": "Dom in accordance to how a user would interact with the page it can find links",
    "start": "1401080",
    "end": "1406679"
  },
  {
    "text": "and buttons by their text content and form controls by their label text writing tests that interact with the Dom",
    "start": "1406679",
    "end": "1414200"
  },
  {
    "text": "rather than your component implementation details and in the same way that a user would use a component",
    "start": "1414200",
    "end": "1420679"
  },
  {
    "text": "gives more confidence that those tests ensure a component does what it is supposed to do for your real",
    "start": "1420679",
    "end": "1428679"
  },
  {
    "text": "users testing the interface rather than the implementation makes for more",
    "start": "1428679",
    "end": "1433960"
  },
  {
    "text": "maintainable tests this idea is not a new one and it applies Beyond accessibility in front-end application",
    "start": "1433960",
    "end": "1441720"
  },
  {
    "text": "this quote in the screenshot is from a talk given 10 years ago by Sandy Mets at rails comp",
    "start": "1441720",
    "end": "1449200"
  },
  {
    "text": "2013 what we're validating in accessibility testing are the programmatically determinable user",
    "start": "1449440",
    "end": "1455600"
  },
  {
    "text": "outcomes specifically we the structure of HTML elements that are used by user",
    "start": "1455600",
    "end": "1461279"
  },
  {
    "text": "agents and assisted Technologies to extract and present information the semantic markup the Dom structure and",
    "start": "1461279",
    "end": "1469480"
  },
  {
    "text": "relationships ARA roles and attributes accessible names and alternative text",
    "start": "1469480",
    "end": "1475559"
  },
  {
    "text": "content test should have assertions against interactive controls like inputs",
    "start": "1475559",
    "end": "1480640"
  },
  {
    "text": "buttons and form controls and they need to validate that all of these controls have the expected labels to provide",
    "start": "1480640",
    "end": "1487679"
  },
  {
    "text": "their accessible names they should simulate user events such as hover type or click and then",
    "start": "1487679",
    "end": "1495320"
  },
  {
    "text": "make assertions on the expected user outcomes testing how the interface is",
    "start": "1495320",
    "end": "1501880"
  },
  {
    "text": "used is more inclusive because these tests then become accessible by",
    "start": "1501880",
    "end": "1507520"
  },
  {
    "text": "default after you do your setup and rendering in a test the first step is",
    "start": "1507520",
    "end": "1513000"
  },
  {
    "text": "typically to query the elements that you have under test as in the elements that",
    "start": "1513000",
    "end": "1518039"
  },
  {
    "text": "a user interacts with or those that will have expected user outcomes testing Library defines a",
    "start": "1518039",
    "end": "1524799"
  },
  {
    "text": "priority order for using queries that reflects user experience of visual or",
    "start": "1524799",
    "end": "1529840"
  },
  {
    "text": "Mouse users as well as those that use assistive technology let's take a look",
    "start": "1529840",
    "end": "1535240"
  },
  {
    "text": "at each of these queries to understand more about why they have this precedence and why we may want to use",
    "start": "1535240",
    "end": "1541880"
  },
  {
    "text": "them by roll should be your top choice for querying elements in your UI you can",
    "start": "1541880",
    "end": "1547880"
  },
  {
    "text": "use the name option with this query to filter Elements by their accessible name which also supports regular expression",
    "start": "1547880",
    "end": "1555159"
  },
  {
    "text": "as I have here for case in sensitivity the HTML elements like button that",
    "start": "1555159",
    "end": "1560600"
  },
  {
    "text": "you'll be querying for in your user interaction test already have their implicit role to find so I don't want",
    "start": "1560600",
    "end": "1566960"
  },
  {
    "text": "you thinking here that you may need to add role attributes into your templates in order to find these elements like",
    "start": "1566960",
    "end": "1573399"
  },
  {
    "text": "maybe you're doing with test IDs ARA roles are a predefined property of those",
    "start": "1573399",
    "end": "1579320"
  },
  {
    "text": "semantic HTML elements querying by label validates",
    "start": "1579320",
    "end": "1584720"
  },
  {
    "text": "that you have a label associated with your form control which provides the accessible",
    "start": "1584720",
    "end": "1589880"
  },
  {
    "text": "Name by display value queries form Fields by their filled-in",
    "start": "1589880",
    "end": "1595399"
  },
  {
    "text": "values by placeholder text queries form Fields as you may have guessed by their",
    "start": "1595399",
    "end": "1600679"
  },
  {
    "text": "placeholder text however for your users placeholder text is not an accessible",
    "start": "1600679",
    "end": "1606600"
  },
  {
    "text": "substitute for a label a placeholder does not serve an as an accessible name",
    "start": "1606600",
    "end": "1612480"
  },
  {
    "text": "and it is no longer visible once a user starts typing into an input by text should be used to query",
    "start": "1612480",
    "end": "1619600"
  },
  {
    "text": "non-interactive Elements by their text content such as text in a paragraph or span aligning to then how users read",
    "start": "1619600",
    "end": "1626880"
  },
  {
    "text": "text on a page and their expected outcomes by Alt text test things for",
    "start": "1626880",
    "end": "1633399"
  },
  {
    "text": "non-visual users and queries images by their alternative text",
    "start": "1633399",
    "end": "1639158"
  },
  {
    "text": "content this query by test ID is not accessible and not otherwise advised",
    "start": "1639240",
    "end": "1645320"
  },
  {
    "text": "with testing Library except in cases where it's not practical to match by role label or text test IDs are an",
    "start": "1645320",
    "end": "1653159"
  },
  {
    "text": "escape hatch not a front door test IDs are not being presented to users and",
    "start": "1653159",
    "end": "1659000"
  },
  {
    "text": "they're not part of the user experience so I would avoid using them at all",
    "start": "1659000",
    "end": "1664600"
  },
  {
    "text": "costs not directly related to accessibility but I also want to mention here that in addition to the get by",
    "start": "1664600",
    "end": "1671480"
  },
  {
    "text": "examples I've been showing testing Library provides these additional query variants so it's got one set of queries",
    "start": "1671480",
    "end": "1678200"
  },
  {
    "text": "for single elements and another set of allby queries that return an",
    "start": "1678200",
    "end": "1683440"
  },
  {
    "text": "array the get queries return an error when you query for an element and it's",
    "start": "1683440",
    "end": "1688760"
  },
  {
    "text": "not found whereas the query queries return null than if no elements are",
    "start": "1688760",
    "end": "1694919"
  },
  {
    "text": "found so because get by methods throw an error when they don't find an element",
    "start": "1694919",
    "end": "1700320"
  },
  {
    "text": "you want to use Query by apis to make to make assertions that elements are not",
    "start": "1700320",
    "end": "1705720"
  },
  {
    "text": "present in the Dom fine queries then are async and for angular they'll trigger a",
    "start": "1705720",
    "end": "1712080"
  },
  {
    "text": "change detection cycle for you before querying for a match find is a",
    "start": "1712080",
    "end": "1717360"
  },
  {
    "text": "combination of get and wait for and it will retry looking for an element up to",
    "start": "1717360",
    "end": "1722519"
  },
  {
    "text": "1,000 millisecs which another example in angular can be helpful for avoiding our",
    "start": "1722519",
    "end": "1728760"
  },
  {
    "text": "fake async in our tests so once you've queried for and",
    "start": "1728760",
    "end": "1734240"
  },
  {
    "text": "gathered the elements under test following an range act assert pattern",
    "start": "1734240",
    "end": "1739760"
  },
  {
    "text": "the next step is to perform some user interaction on those elements the fire",
    "start": "1739760",
    "end": "1745039"
  },
  {
    "text": "event API built into testing library is actually just a lightweight wrapper around the browser's dispatch event",
    "start": "1745039",
    "end": "1752600"
  },
  {
    "text": "API and for angular will also run that change detection cycle for",
    "start": "1752600",
    "end": "1757679"
  },
  {
    "text": "you the fire event API methods that only trigger a single event on the target",
    "start": "1757679",
    "end": "1764320"
  },
  {
    "text": "element a real user doing a key down event would first have to focus on the",
    "start": "1764320",
    "end": "1769760"
  },
  {
    "text": "Target and then do the key down but fire event allows you to shortcut some of this and then dispatches the events",
    "start": "1769760",
    "end": "1776840"
  },
  {
    "text": "directly a lot of the times I think fire event is sort of close enough for like a simple click event where the preceding",
    "start": "1776840",
    "end": "1783919"
  },
  {
    "text": "user interactions can be assumed but because fire event doesn't do all of the",
    "start": "1783919",
    "end": "1789159"
  },
  {
    "text": "events that an actual user would go through when performing a specific action separately testing library has a",
    "start": "1789159",
    "end": "1796600"
  },
  {
    "text": "companion Library called user event that's built on top of fire event user event provides methods that",
    "start": "1796600",
    "end": "1803919"
  },
  {
    "text": "more closely resemble user interactions by trying to simulate all of the real events that would happen in the browser",
    "start": "1803919",
    "end": "1810480"
  },
  {
    "text": "as the user interacts with it user event describes full user interactions rather",
    "start": "1810480",
    "end": "1816240"
  },
  {
    "text": "than distinct events as part of its validation user event also checks that",
    "start": "1816240",
    "end": "1822120"
  },
  {
    "text": "elements are actually visible and can be interacted with for example it takes",
    "start": "1822120",
    "end": "1827360"
  },
  {
    "text": "into account that browsers don't allow clicking a disabled button testing Library recommends that",
    "start": "1827360",
    "end": "1834320"
  },
  {
    "text": "developers prefer user event over fire event because the user event API methods",
    "start": "1834320",
    "end": "1839640"
  },
  {
    "text": "provide more involved and complete user interactions for example and user event",
    "start": "1839640",
    "end": "1846440"
  },
  {
    "text": "hover simulates hovering over an element by triggering the appropriate Mouse over and mouse enter events click hovers over",
    "start": "1846440",
    "end": "1855000"
  },
  {
    "text": "the element first then simulates all of the mouse pointer interactions to perform the click type simulates a user",
    "start": "1855000",
    "end": "1863279"
  },
  {
    "text": "typing into an element by first focusing on the input then doing all the key down",
    "start": "1863279",
    "end": "1868360"
  },
  {
    "text": "key up change and input events to simulate the browser user",
    "start": "1868360",
    "end": "1874159"
  },
  {
    "text": "event needs to mock the UI layer and apply workarounds on top of the test environment to simulate trusted browser",
    "start": "1874159",
    "end": "1882080"
  },
  {
    "text": "events that are not otherwise programmatically available so the user",
    "start": "1882080",
    "end": "1887320"
  },
  {
    "text": "event has a setup function that should be invoked at the start of each session and then it will configure an instance",
    "start": "1887320",
    "end": "1893440"
  },
  {
    "text": "of user event applying those workarounds in the configuration from the beginning",
    "start": "1893440",
    "end": "1898720"
  },
  {
    "text": "this setup function is actually newer to version 14 of user event and in order to",
    "start": "1898720",
    "end": "1904039"
  },
  {
    "text": "ease the transition the user event API methods can still be called directly as",
    "start": "1904039",
    "end": "1909279"
  },
  {
    "text": "they previously would have been um and they'll just call setup internally so far with testing Library",
    "start": "1909279",
    "end": "1916799"
  },
  {
    "text": "we've C covered using queries that are accessible by default and automating simulated user interactions for our test",
    "start": "1916799",
    "end": "1924120"
  },
  {
    "text": "finally we'll need to make assertions against the expected user outcomes",
    "start": "1924120",
    "end": "1929320"
  },
  {
    "text": "expected user outcomes in software testing are defined by the ideal results",
    "start": "1929320",
    "end": "1934480"
  },
  {
    "text": "that should be fulfilled once a test case has been executed the outcomes that are tested should be relevant to the",
    "start": "1934480",
    "end": "1941320"
  },
  {
    "text": "user impact and how components are used rather than testing internal component",
    "start": "1941320",
    "end": "1946720"
  },
  {
    "text": "implement ation details to that effect just Dom is another companion library",
    "start": "1946720",
    "end": "1952760"
  },
  {
    "text": "that provides custom Dom element matchers for just just's matchers allow you to write",
    "start": "1952760",
    "end": "1959799"
  },
  {
    "text": "tests based on on user outcomes with human readable assertions once installed",
    "start": "1959799",
    "end": "1966519"
  },
  {
    "text": "in order to use it in your test you import it once in your test setup and then those matchers will be available to",
    "start": "1966519",
    "end": "1972480"
  },
  {
    "text": "your tests gom's matchers don't even require that your queries come from testing",
    "start": "1972480",
    "end": "1978919"
  },
  {
    "text": "Library it can actually work with any Dom based testing library or",
    "start": "1978919",
    "end": "1984638"
  },
  {
    "text": "framework first first assertion to be in the document is your basic check that an",
    "start": "1984679",
    "end": "1990799"
  },
  {
    "text": "element was actually rendered a lot of times though what I see is people using this to be visible",
    "start": "1990799",
    "end": "1998159"
  },
  {
    "text": "as their basic assertion where they seem to just be checking that an element was rendered so I think that Tob in the",
    "start": "1998159",
    "end": "2004320"
  },
  {
    "text": "document would suffice for that in addition to be present in the document to be visible also checks for um",
    "start": "2004320",
    "end": "2012480"
  },
  {
    "text": "elements to not have display none visibility hidden or collapse or opacity",
    "start": "2012480",
    "end": "2018159"
  },
  {
    "text": "zero not to have the hidden attribute the parent element must also be visible",
    "start": "2018159",
    "end": "2024480"
  },
  {
    "text": "according to those parameters and if it's a details element it must have the open attribute to me that's a lot of",
    "start": "2024480",
    "end": "2032480"
  },
  {
    "text": "extra checks to go through when you're just checking if something was rendered",
    "start": "2032480",
    "end": "2038960"
  },
  {
    "text": "these next matchers check in elements attributes classes and inline Styles",
    "start": "2039399",
    "end": "2044679"
  },
  {
    "text": "inline styles are rendered by jsdom and can be validated with the two have style",
    "start": "2044679",
    "end": "2049960"
  },
  {
    "text": "matcher CSS a component CSS is typically uh not applied by default so you can",
    "start": "2049960",
    "end": "2057040"
  },
  {
    "text": "then have use the two have class to make assertions on your your conditional",
    "start": "2057040",
    "end": "2062079"
  },
  {
    "text": "classes so for example if you may have a CSS class that affects visibility you",
    "start": "2062079",
    "end": "2068480"
  },
  {
    "text": "can't really use that 2B visible matcher because it's not going to be rendered so you want to check the conditional class",
    "start": "2068480",
    "end": "2075398"
  },
  {
    "text": "based on the assertion the two have Focus assertion can test that the expected element has",
    "start": "2075399",
    "end": "2082440"
  },
  {
    "text": "Focus or on the other hand that elements that are not visible or are disabled are",
    "start": "2082440",
    "end": "2089480"
  },
  {
    "text": "also not focusable or able to be navigated to by keyboard certain Focus",
    "start": "2089480",
    "end": "2094760"
  },
  {
    "text": "behaviors are expected in a single page P application such as when a modal dialogue is displayed focus should be",
    "start": "2094760",
    "end": "2102480"
  },
  {
    "text": "positioned into the dialogue and then when it's closed it needs to return to the previously focused",
    "start": "2102480",
    "end": "2109720"
  },
  {
    "text": "element in single page applications we often perform navigation as well that",
    "start": "2109720",
    "end": "2116640"
  },
  {
    "text": "results in a Content update but it doesn't refresh the entire page so on",
    "start": "2116640",
    "end": "2121839"
  },
  {
    "text": "that navigation focus should not be moved or reset so let's look at an example test",
    "start": "2121839",
    "end": "2128720"
  },
  {
    "text": "for the validating the focus is not reset after navigation First we're going",
    "start": "2128720",
    "end": "2133800"
  },
  {
    "text": "to render the component with testing library and for react we'll apply the browser router",
    "start": "2133800",
    "end": "2140280"
  },
  {
    "text": "wrapper to test an angular component with routing you'd Supply the router testing Library here in the render",
    "start": "2140280",
    "end": "2146000"
  },
  {
    "text": "options very similar we'll click the first link and wait for the location to",
    "start": "2146000",
    "end": "2151760"
  },
  {
    "text": "resolve to the routed path and then after navigation we'll",
    "start": "2151760",
    "end": "2156800"
  },
  {
    "text": "will assert that the navigated link still has Focus we're going to tab over",
    "start": "2156800",
    "end": "2162040"
  },
  {
    "text": "to the next link and then using the keyboard enter",
    "start": "2162040",
    "end": "2167280"
  },
  {
    "text": "we will navigate the the link and after navigation we'll assert that that second",
    "start": "2167280",
    "end": "2172640"
  },
  {
    "text": "link still has Focus these matchers to be disabled and",
    "start": "2172640",
    "end": "2178960"
  },
  {
    "text": "to be enabled do uh app look for the elements with the disabled attribute",
    "start": "2178960",
    "end": "2184560"
  },
  {
    "text": "they do not apply to the Arya disabled attribute which doesn't have the same behavior as disabled the disabled uh",
    "start": "2184560",
    "end": "2192200"
  },
  {
    "text": "attribute only applies to certain HTML elements like button input text area",
    "start": "2192200",
    "end": "2198520"
  },
  {
    "text": "select and their options option groups and field set HTML",
    "start": "2198520",
    "end": "2203800"
  },
  {
    "text": "elements to be enabled works the same as not to be disabled and helps to avoid",
    "start": "2203800",
    "end": "2209640"
  },
  {
    "text": "the deil negation of not disabled to have accessible name and",
    "start": "2209640",
    "end": "2216079"
  },
  {
    "text": "accessible description check for elements to have accessible names and descriptions accessible names should",
    "start": "2216079",
    "end": "2222520"
  },
  {
    "text": "convey the purpose or intent of an element and it should also distinguish an element from other elements in the",
    "start": "2222520",
    "end": "2230200"
  },
  {
    "text": "page accessible descriptions then provide additional information that complement an accessible",
    "start": "2230200",
    "end": "2236880"
  },
  {
    "text": "name an AC element's accessible name can come from Child content here's a test",
    "start": "2236880",
    "end": "2242800"
  },
  {
    "text": "for that an ARA label or by referencing content with ARA labeled by here I'm",
    "start": "2242800",
    "end": "2249960"
  },
  {
    "text": "just rendering HTML for the sake of example um but it works very similarly",
    "start": "2249960",
    "end": "2256200"
  },
  {
    "text": "in any of your testing Frameworks you can check getting getting your Elements by rooll and validate that they have",
    "start": "2256200",
    "end": "2262839"
  },
  {
    "text": "their accessible name an ARA labeled by also um checks",
    "start": "2262839",
    "end": "2270319"
  },
  {
    "text": "that you are referencing an element uh by ID basically so it's able to connect",
    "start": "2270319",
    "end": "2276680"
  },
  {
    "text": "here um your ARA labeled by to the element with the categories title",
    "start": "2276680",
    "end": "2283720"
  },
  {
    "text": "ID form controls should be prepared with a label for their accessible name here",
    "start": "2283720",
    "end": "2289760"
  },
  {
    "text": "we're testing both implicit and explicit form control associations with the forign ID",
    "start": "2289760",
    "end": "2296640"
  },
  {
    "text": "attributes a field set with a legend provides the accessible name to a group",
    "start": "2296640",
    "end": "2301800"
  },
  {
    "text": "of form controls tables should have a caption for their accessible name ARA label does",
    "start": "2301800",
    "end": "2309079"
  },
  {
    "text": "work for all these twoo but visible labels provide accessibility for all",
    "start": "2309079",
    "end": "2315040"
  },
  {
    "text": "users accessible descriptions can be set with the ARA description attribute or by",
    "start": "2315040",
    "end": "2320520"
  },
  {
    "text": "referencing an element with Arya described by descriptions can also be provided by",
    "start": "2320520",
    "end": "2327079"
  },
  {
    "text": "the title attribute on links or form controls however the HTML title",
    "start": "2327079",
    "end": "2332480"
  },
  {
    "text": "attribute isn't shown to keyboard or mobile users so again visible text",
    "start": "2332480",
    "end": "2337800"
  },
  {
    "text": "descriptions provide accessibility to all of our users when in doubt you can actually",
    "start": "2337800",
    "end": "2344680"
  },
  {
    "text": "inspect accessibility properties like name and description in the Chrome or Firefox Dev Tools in Chrome Dev tools",
    "start": "2344680",
    "end": "2351599"
  },
  {
    "text": "there's an accessibility pain incorporated into the Exel elements inspector you can view accessibility",
    "start": "2351599",
    "end": "2358440"
  },
  {
    "text": "properties and ARA attributes in Firefox the accessibility inspector is a",
    "start": "2358440",
    "end": "2363599"
  },
  {
    "text": "separate panel in the dev tools these ones are the structural matchers to be empty Dom element is",
    "start": "2363599",
    "end": "2371000"
  },
  {
    "text": "commonly used in the negative as in not to be empty Dom element to contain an",
    "start": "2371000",
    "end": "2376920"
  },
  {
    "text": "element can check for elements to be descendants of other elements to contain",
    "start": "2376920",
    "end": "2382160"
  },
  {
    "text": "HTML asserts whether an HTML string is contained in an element testing specific",
    "start": "2382160",
    "end": "2388880"
  },
  {
    "text": "Dom structure though is very implementation specific and not really",
    "start": "2388880",
    "end": "2394000"
  },
  {
    "text": "how a user experiences your application it can be better to assert on elements",
    "start": "2394000",
    "end": "2399359"
  },
  {
    "text": "over which you have control with to contain element to have text content however",
    "start": "2399359",
    "end": "2406400"
  },
  {
    "text": "does align with your user's experience you want to use two have text content on your non-interactive elements with text",
    "start": "2406400",
    "end": "2413920"
  },
  {
    "text": "content such as your paragraphs or spans the two have text content matcher also supports regular expression for partial",
    "start": "2413920",
    "end": "2421560"
  },
  {
    "text": "case insensitive or explicit full content matching these matchers check for the",
    "start": "2421560",
    "end": "2427960"
  },
  {
    "text": "Arya invalid attribute or for form elements to conform to the required type",
    "start": "2427960",
    "end": "2434160"
  },
  {
    "text": "pattern min max or Min and max length constraints to have error message checks",
    "start": "2434160",
    "end": "2441560"
  },
  {
    "text": "whether the element has an ARA error message attribute that references an element with the given error",
    "start": "2441560",
    "end": "2449640"
  },
  {
    "text": "message and the rest of these matchers are also for making assertions on form",
    "start": "2450280",
    "end": "2455319"
  },
  {
    "text": "controls I've got a quick interaction user flow to help us put it all together first",
    "start": "2455319",
    "end": "2461960"
  },
  {
    "text": "we're calling testing libraries render with the component template and providing a spy to the onsubmit",
    "start": "2461960",
    "end": "2469400"
  },
  {
    "text": "property we'll initialize an instance of user event by calling it setup",
    "start": "2469400",
    "end": "2477480"
  },
  {
    "text": "function the component rendering and user event set setup Arrangement can",
    "start": "2477880",
    "end": "2483400"
  },
  {
    "text": "also be extracted out of your spec into a setup function for a convenient use in",
    "start": "2483400",
    "end": "2488520"
  },
  {
    "text": "multiple specs we're going to query for the elements under test by using the get by",
    "start": "2488520",
    "end": "2494599"
  },
  {
    "text": "roll queries off of the testing Library screen object and we then we'll perform",
    "start": "2494599",
    "end": "2500119"
  },
  {
    "text": "user interactions on those elements we'll type into the textbox control and select an options from the combo box and",
    "start": "2500119",
    "end": "2508319"
  },
  {
    "text": "then we'll assert that we have the expected values we're going to click the button",
    "start": "2508319",
    "end": "2514359"
  },
  {
    "text": "to submit the form and will make the final assertions that the form data has",
    "start": "2514359",
    "end": "2519400"
  },
  {
    "text": "been submitted testing a complete user flow that's really it it reads well",
    "start": "2519400",
    "end": "2525640"
  },
  {
    "text": "clearly communicates intent and directly validates the user experience and",
    "start": "2525640",
    "end": "2530760"
  },
  {
    "text": "accessibility for all users by ensuring that form controls are accessible by",
    "start": "2530760",
    "end": "2535920"
  },
  {
    "text": "their role and name and that interactions are compatible with the accessibility API used by assistive",
    "start": "2535920",
    "end": "2544200"
  },
  {
    "text": "Technologies so this next section introduces fully automated accessibility",
    "start": "2544200",
    "end": "2549680"
  },
  {
    "text": "testing with the axe core accessibility testing engine Cypress a is a testing",
    "start": "2549680",
    "end": "2555359"
  },
  {
    "text": "library that integrates axe with Cypress a popular end to-end testing framework",
    "start": "2555359",
    "end": "2561040"
  },
  {
    "text": "Cypress a injects the axe core accessibility engine into a page and",
    "start": "2561040",
    "end": "2566200"
  },
  {
    "text": "runs an exhaustive set of tests against the excuse me an exhausted set of",
    "start": "2566200",
    "end": "2574160"
  },
  {
    "text": "automated tests checking that what you would have maybe with the ax Dev tools browser extension if you were going to",
    "start": "2574160",
    "end": "2580559"
  },
  {
    "text": "test things manually in the browser axe is an open-source library",
    "start": "2580559",
    "end": "2585800"
  },
  {
    "text": "that is used to drive other popular accessibility tools such as the storybook a11y add-on I'm using axc cor",
    "start": "2585800",
    "end": "2593400"
  },
  {
    "text": "here with Cyprus in order to integrate it into our endtoend test and run it in a fully rendered um running",
    "start": "2593400",
    "end": "2600960"
  },
  {
    "text": "application the ax core accessibility testing engine applies all of these rules wherever it is called to check for",
    "start": "2600960",
    "end": "2609119"
  },
  {
    "text": "accessibility the fact that these run against a fully rendered application enables them to look for things like",
    "start": "2609119",
    "end": "2615359"
  },
  {
    "text": "proper page structure ensure every page has an H1 heading and that those",
    "start": "2615359",
    "end": "2620720"
  },
  {
    "text": "headings are in a higher high higher archical order as an H1 H2 followed by",
    "start": "2620720",
    "end": "2626839"
  },
  {
    "text": "H3 and that there is only one of each of the main Banner or header content info",
    "start": "2626839",
    "end": "2632839"
  },
  {
    "text": "or footer landmarks and that other landmarks have unique names they can also validate ARA usage",
    "start": "2632839",
    "end": "2640119"
  },
  {
    "text": "checking for valid required or allowed attributes for required parent or",
    "start": "2640119",
    "end": "2646319"
  },
  {
    "text": "children for an ARA role and that elements with certain ARA roles also have a unique accessible",
    "start": "2646319",
    "end": "2654040"
  },
  {
    "text": "name this is literally all the code that it takes to inject act into your page",
    "start": "2654040",
    "end": "2659680"
  },
  {
    "text": "and run all of those rules you will visit the URL inject X and then run the the cheze",
    "start": "2659680",
    "end": "2667800"
  },
  {
    "text": "a11 Y function from Ax core to validate the Page's",
    "start": "2667800",
    "end": "2673480"
  },
  {
    "text": "accessibility check a11y also allows you to filter to specific parts of the page",
    "start": "2673480",
    "end": "2679720"
  },
  {
    "text": "you can provide a call back for extracting information for the accessibility violations and you may",
    "start": "2679720",
    "end": "2686240"
  },
  {
    "text": "also allow your test to pass regardless of failures say if you're working toward more",
    "start": "2686240",
    "end": "2692920"
  },
  {
    "text": "accessibility acts can also then be configured globally to exclude or include specific",
    "start": "2692920",
    "end": "2699760"
  },
  {
    "text": "rules when the Cypress tests run if the ax test don't pass they print a11y error",
    "start": "2699760",
    "end": "2707160"
  },
  {
    "text": "to the Cyprus log clicking on these errors then prints information about the",
    "start": "2707160",
    "end": "2712359"
  },
  {
    "text": "error and the relevant accessibility standards to your console log this same",
    "start": "2712359",
    "end": "2717480"
  },
  {
    "text": "information is what is returned to the check a11 y call back and then could be used to to generate reports with your",
    "start": "2717480",
    "end": "2725040"
  },
  {
    "text": "audit your your accessibility assessments so at this point we've",
    "start": "2725040",
    "end": "2730800"
  },
  {
    "text": "actually built up three stages of assurance with linting unit and endtoend",
    "start": "2730800",
    "end": "2736079"
  },
  {
    "text": "test to ensure that changes don't negatively impact software quality and",
    "start": "2736079",
    "end": "2741280"
  },
  {
    "text": "now this validation can be automated with conf continuous integration I can confirm that",
    "start": "2741280",
    "end": "2748119"
  },
  {
    "text": "development teams who practice continuous integration and continuous delivery to automatically build test and",
    "start": "2748119",
    "end": "2754559"
  },
  {
    "text": "prepare frequent and small code changes for release benefit from increased",
    "start": "2754559",
    "end": "2760040"
  },
  {
    "text": "efficiency and Rapid software delivery GitHub actions is one such cicd",
    "start": "2760040",
    "end": "2766680"
  },
  {
    "text": "platform that allows you to automate your build test and deployment pipeline you can create workflows that build and",
    "start": "2766680",
    "end": "2773559"
  },
  {
    "text": "test every poll request to your repository or even deploy your merge poll request to",
    "start": "2773559",
    "end": "2780280"
  },
  {
    "text": "production you can get started with GitHub actions uh with the provided templates and here's where we're look",
    "start": "2780280",
    "end": "2786520"
  },
  {
    "text": "we're checking out one for no JS continuous integration and here's here's",
    "start": "2786520",
    "end": "2792079"
  },
  {
    "text": "where we got started with that template um what it does is it basically checks out the code sets up node and mpm for us",
    "start": "2792079",
    "end": "2801240"
  },
  {
    "text": "runs that npm install and then it runs each of the build lint test and endtoend",
    "start": "2801240",
    "end": "2808280"
  },
  {
    "text": "steps to ensure that each of those checks pass and if it fails it somewhere",
    "start": "2808280",
    "end": "2813680"
  },
  {
    "text": "along the way it will report what steps was failed you want to then apply this",
    "start": "2813680",
    "end": "2820240"
  },
  {
    "text": "action in your PRS so in your GitHub repo you'll have to set a branch protection rule to require these status",
    "start": "2820240",
    "end": "2826640"
  },
  {
    "text": "checks to pass before merging with your branch protection rule",
    "start": "2826640",
    "end": "2831800"
  },
  {
    "text": "set PRS must pass status checks before merging which you can then still",
    "start": "2831800",
    "end": "2837760"
  },
  {
    "text": "override as an admin but once your checks have passed PRS will have a green",
    "start": "2837760",
    "end": "2843760"
  },
  {
    "text": "check and the merge button is enabled the different levels of software testing",
    "start": "2843760",
    "end": "2849960"
  },
  {
    "text": "that I've discussed in our project make up our testing pyramid the point of a",
    "start": "2849960",
    "end": "2855240"
  },
  {
    "text": "testing pyramid is to encourage that we write tests with different granularities",
    "start": "2855240",
    "end": "2860400"
  },
  {
    "text": "and to test less as the level increases with fewer endtoend tests and lots of",
    "start": "2860400",
    "end": "2866920"
  },
  {
    "text": "unit tests endtoend tests run against your entire system they're the most",
    "start": "2866920",
    "end": "2872319"
  },
  {
    "text": "comprehensive and require the most time and resources to run integration tests",
    "start": "2872319",
    "end": "2878040"
  },
  {
    "text": "validate that components work together but can be slow to render Pages or maybe make HTTP requests the difference",
    "start": "2878040",
    "end": "2885240"
  },
  {
    "text": "between end to endend and integration testing is how much of the system is actually under test parts of the system",
    "start": "2885240",
    "end": "2892400"
  },
  {
    "text": "are tested in conjunction with each other in integration testing but n to add tests validate the system as a",
    "start": "2892400",
    "end": "2900440"
  },
  {
    "text": "whole cypris is an end-to-end testing framework but in practice we often will",
    "start": "2900440",
    "end": "2905680"
  },
  {
    "text": "knock out our services to simulate API calls or different environments which puts it more at the integration level",
    "start": "2905680",
    "end": "2912880"
  },
  {
    "text": "actually unit tests like those we covered with testing Library validate a",
    "start": "2912880",
    "end": "2918000"
  },
  {
    "text": "discrete unit of code to ensure the unit behaves as intended unit testing shouldn't depend on other components or",
    "start": "2918000",
    "end": "2924880"
  },
  {
    "text": "services in the UI and unit tests are generally fast to run and provide",
    "start": "2924880",
    "end": "2930280"
  },
  {
    "text": "specific feedback but they can only find problems at the individual unit level and can't test the system as a whole",
    "start": "2930280",
    "end": "2938359"
  },
  {
    "text": "unit tests though run earlier because they're faster and a closer proximity to the components and can expose problems",
    "start": "2938359",
    "end": "2945440"
  },
  {
    "text": "more quickly static code analysis tools like es lint take this one step further back",
    "start": "2945440",
    "end": "2952680"
  },
  {
    "text": "and validate the code itself before it even runs to ensure that developers",
    "start": "2952680",
    "end": "2957760"
  },
  {
    "text": "adhere to standards like code formatting naming conventions type safety in addition to the accessibility standards",
    "start": "2957760",
    "end": "2964440"
  },
  {
    "text": "we've covered today typescript is a static type Checker and these static tests are relatively inexp",
    "start": "2964440",
    "end": "2974400"
  },
  {
    "text": "inexpensive it's worth mentioning uh keny Do's alternate model that he calls the testing trophy that favors",
    "start": "2974400",
    "end": "2981000"
  },
  {
    "text": "integration over unit testing it's based on the idea that you should write tests not too many mostly",
    "start": "2981000",
    "end": "2989599"
  },
  {
    "text": "integration integration tests give more confidence than your unit tests compared",
    "start": "2989599",
    "end": "2995079"
  },
  {
    "text": "to unit tests integration testing with just can actually mean mocking fewer services or testing your parent",
    "start": "2995079",
    "end": "3002559"
  },
  {
    "text": "components versus your child components so the line between unit and integration testing can also be blurred into more of",
    "start": "3002559",
    "end": "3009680"
  },
  {
    "text": "a spectrum to how much of the system is under test so when we're unit testing we",
    "start": "3009680",
    "end": "3015960"
  },
  {
    "text": "want to test high enough up in the componentry to simulate realistic user",
    "start": "3015960",
    "end": "3021480"
  },
  {
    "text": "interactions and then we'll test the user experience and inter interact with application functionality rather than",
    "start": "3021480",
    "end": "3028760"
  },
  {
    "text": "your specific component structure or implementation when it comes to",
    "start": "3028760",
    "end": "3034920"
  },
  {
    "text": "accessibility testing being technically correct is not enough manual testing",
    "start": "3034920",
    "end": "3041520"
  },
  {
    "text": "still does need to be performed to ensure that you're using semantically correct code which can't be fully",
    "start": "3041520",
    "end": "3048079"
  },
  {
    "text": "automatically detected that all interactive elements can be used with a keyboard that your content is arranged",
    "start": "3048079",
    "end": "3054839"
  },
  {
    "text": "with a logic iCal focus in reading order you need to have a visible Focus",
    "start": "3054839",
    "end": "3060079"
  },
  {
    "text": "indicator on interactive elements that meets the contrast and display standards you must have well-formed tables",
    "start": "3060079",
    "end": "3067119"
  },
  {
    "text": "meaningful and appropriate alt text and how form errors are communicated and that you're not using placeholder texts",
    "start": "3067119",
    "end": "3073680"
  },
  {
    "text": "as an instruction be sure to test with the screen reader and validate the usage of",
    "start": "3073680",
    "end": "3079160"
  },
  {
    "text": "your ARA roles and attributes to ensure that they're used correctly and most importantly consistently",
    "start": "3079160",
    "end": "3086440"
  },
  {
    "text": "more important if you can you should test your site with actual users that use assist of Technologies you'll come",
    "start": "3086440",
    "end": "3093599"
  },
  {
    "text": "to understand so much more about these users and their actual experience with your",
    "start": "3093599",
    "end": "3100040"
  },
  {
    "text": "software these are some of the resources from the w3c web accessibility initiative that I promised earlier they",
    "start": "3100040",
    "end": "3106920"
  },
  {
    "text": "have great tutorials on developing accessible web content I highly highly",
    "start": "3106920",
    "end": "3112599"
  },
  {
    "text": "recommend the one on page structure and here's uh the one on the alt decision tree that I promised there's also that y",
    "start": "3112599",
    "end": "3120160"
  },
  {
    "text": "Arya authoring practices guide with a complete set of Arya design patterns and",
    "start": "3120160",
    "end": "3126920"
  },
  {
    "text": "examples I myself also published a series of articles on the angular Dev 2",
    "start": "3126920",
    "end": "3132400"
  },
  {
    "text": "site that goes a lot more into depth and detail on each of the eslint accessibility rules that are available",
    "start": "3132400",
    "end": "3138400"
  },
  {
    "text": "for angular and that's really all I have for you today and I think we have time for",
    "start": "3138400",
    "end": "3144280"
  },
  {
    "text": "questions",
    "start": "3144280",
    "end": "3147280"
  }
]