[
  {
    "text": "hi everyone my name is Michael Stipe i'm a GraphQL technical steering committee",
    "start": "1360",
    "end": "7880"
  },
  {
    "text": "member and uh one of the main authors of the GraphQL composite schema",
    "start": "7880",
    "end": "14120"
  },
  {
    "text": "specification which defines how distributed GraphQL systems work when they use",
    "start": "14120",
    "end": "20760"
  },
  {
    "text": "federation i'm also one of the founders of Chili Cream at Chili Cream we are",
    "start": "20760",
    "end": "26960"
  },
  {
    "text": "building for instance the hot chocolate graphical server for .NET and we are also providing GraphQL",
    "start": "26960",
    "end": "33680"
  },
  {
    "text": "tooling called Nitro where you can manage your GraphQL documents monitor uh",
    "start": "33680",
    "end": "39120"
  },
  {
    "text": "GraphQL gateways get insights about your GraphQL servers and",
    "start": "39120",
    "end": "44600"
  },
  {
    "text": "inspect GraphQL on a trace level with proper GraphQL",
    "start": "44600",
    "end": "51239"
  },
  {
    "text": "telemetry we work with companies of any size help them along in their",
    "start": "51239",
    "end": "58079"
  },
  {
    "text": "GraphQL journeys and over the last couple of years we have seen a lot of approaches",
    "start": "58079",
    "end": "65280"
  },
  {
    "text": "for building applications that level gra that leverage GraphQL",
    "start": "65280",
    "end": "72600"
  },
  {
    "text": "when developers innet think of GraphQL",
    "start": "72640",
    "end": "77920"
  },
  {
    "text": "it's often around database first approaches which is an approach where",
    "start": "77920",
    "end": "83000"
  },
  {
    "text": "GraphQL sits or infers the database model and uh they misuse or use misuse",
    "start": "83000",
    "end": "92079"
  },
  {
    "text": "GraphQL as a kind of SQL over the V over the wire",
    "start": "92079",
    "end": "98240"
  },
  {
    "text": "but you also find a lot of simple layered applications where you have",
    "start": "98240",
    "end": "104439"
  },
  {
    "text": "GraphQL GraphQL layer that operates on a simple service layer right you have the",
    "start": "104439",
    "end": "111200"
  },
  {
    "text": "GraphQL layer operating against a simple service layer which operates against the database",
    "start": "111200",
    "end": "118280"
  },
  {
    "text": "lastly we have seen a lot of enterprise applications that run at scale and uh",
    "start": "118280",
    "end": "125280"
  },
  {
    "text": "when we look into these we have heard the terms like cleaner architecture CQS",
    "start": "125280",
    "end": "130959"
  },
  {
    "text": "and DDD before we dive into all these things",
    "start": "130959",
    "end": "137360"
  },
  {
    "text": "around DDD CQIS or uh clean architecture let's do a quick refresher",
    "start": "137360",
    "end": "144879"
  },
  {
    "text": "from which angle GraphQL actually originally started right so what was the",
    "start": "144879",
    "end": "151120"
  },
  {
    "text": "intent that Facebook actually had with GraphQL so GraphQL was created by Meta",
    "start": "151120",
    "end": "158400"
  },
  {
    "text": "or by Facebook originally which is renamed now to Meta and the intent was",
    "start": "158400",
    "end": "163680"
  },
  {
    "text": "to have a thin layer of GraphQL over your business layer to expose the",
    "start": "163680",
    "end": "169519"
  },
  {
    "text": "business model in a much richer way instead of exposing endpoints like you",
    "start": "169519",
    "end": "175599"
  },
  {
    "text": "would do with REST or whatever you're exposing the business model to your",
    "start": "175599",
    "end": "180800"
  },
  {
    "text": "consumers and they can pick and choose from that business model what they need",
    "start": "180800",
    "end": "187120"
  },
  {
    "text": "a GraphQL schema has roots or we call them operations queries represent side effect",
    "start": "187120",
    "end": "195120"
  },
  {
    "text": "free reads on your system and mutations for instance um are causing",
    "start": "195120",
    "end": "202959"
  },
  {
    "text": "side effects to your system are changing data lastly there are subscriptions",
    "start": "202959",
    "end": "208159"
  },
  {
    "text": "which is an eventing system in GraphQL or it's actually more it's basically you can subscribe to an event and run a",
    "start": "208159",
    "end": "215120"
  },
  {
    "text": "query to aggregate data okay let's talk about enterprise",
    "start": "215120",
    "end": "222040"
  },
  {
    "text": "apps and let's begin by asking what is an enterprise app ghana explains it like",
    "start": "222040",
    "end": "229040"
  },
  {
    "text": "this enterprise applications are system that run all phases of an enterprises",
    "start": "229040",
    "end": "236120"
  },
  {
    "text": "operations to integrate core business processes sales accounting finance human",
    "start": "236120",
    "end": "242080"
  },
  {
    "text": "resources and whatnot so what does that mean an enterprise does not consist only on of",
    "start": "242080",
    "end": "249439"
  },
  {
    "text": "business processes right it has other pillars like sales",
    "start": "249439",
    "end": "254959"
  },
  {
    "text": "accounting inventory these pillars make up the enterprise",
    "start": "254959",
    "end": "260479"
  },
  {
    "text": "when an enterprise grows it will inherit inherently create multiple of these",
    "start": "260479",
    "end": "266600"
  },
  {
    "text": "constructs each value stream has its own ecosystem and these different business",
    "start": "266600",
    "end": "273479"
  },
  {
    "text": "units form one big enterprise well 20 years ago",
    "start": "273479",
    "end": "280080"
  },
  {
    "text": "digitalization struck most enterprises still struggle today to",
    "start": "280080",
    "end": "286560"
  },
  {
    "text": "get their business processes and their businesses translated into",
    "start": "286560",
    "end": "292600"
  },
  {
    "text": "software so how do enterprises handle these complex systems and how do you",
    "start": "292600",
    "end": "300160"
  },
  {
    "text": "build this these complex uh business processes and your whole business into",
    "start": "300160",
    "end": "306400"
  },
  {
    "text": "software they're commonly thrown three terms into the",
    "start": "306400",
    "end": "313440"
  },
  {
    "text": "fray here it's clean architecture CQS and domain driven",
    "start": "313440",
    "end": "319720"
  },
  {
    "text": "design let's start with clean architecture and there will not just be",
    "start": "319720",
    "end": "326720"
  },
  {
    "text": "slides there will also be some code so don't worry so clean architecture is an",
    "start": "326720",
    "end": "331759"
  },
  {
    "text": "architectural style that seeks the separation of concerns and introduces",
    "start": "331759",
    "end": "337280"
  },
  {
    "text": "high modularity by introducing a clear layering to an",
    "start": "337280",
    "end": "342440"
  },
  {
    "text": "application we do that in enterprise applications to be independent from external components so what are external",
    "start": "342440",
    "end": "350680"
  },
  {
    "text": "components for instance frameworks like entity framework like uh whatn not what you have out there",
    "start": "350680",
    "end": "359039"
  },
  {
    "text": "newtonoft json uh or even database systems like your SQL server you want to",
    "start": "359039",
    "end": "364960"
  },
  {
    "text": "be independent of that you are using an SQL server and you want to be independent of",
    "start": "364960",
    "end": "372240"
  },
  {
    "text": "anything that is not your business these technical things that we",
    "start": "372240",
    "end": "378000"
  },
  {
    "text": "want to be independent on they change rapidly so they might",
    "start": "378000",
    "end": "383520"
  },
  {
    "text": "change over the lifetime of our application and we want to be able to swap them",
    "start": "383520",
    "end": "389319"
  },
  {
    "text": "out so let's have a look at the layers actually that clean architecture",
    "start": "389319",
    "end": "395360"
  },
  {
    "text": "introduces here we have at the most inner circle here",
    "start": "395360",
    "end": "401520"
  },
  {
    "text": "the domain layer and the domain layer basically holds your core business model",
    "start": "401520",
    "end": "408080"
  },
  {
    "text": "so we talk here about entities and repositories uh that sit here that's the thing that",
    "start": "408080",
    "end": "414720"
  },
  {
    "text": "will most likely not change over the lifetime of your application maybe you add things but like the",
    "start": "414720",
    "end": "422039"
  },
  {
    "text": "structure at itself will not deviate a lot",
    "start": "422039",
    "end": "428240"
  },
  {
    "text": "then we have the application layer and this is used to orchestrate use cases to",
    "start": "428240",
    "end": "436880"
  },
  {
    "text": "orchestrate um interactions against your entities with your use cases that you",
    "start": "436880",
    "end": "443440"
  },
  {
    "text": "describe in your business then we have the infrastructure",
    "start": "443440",
    "end": "449199"
  },
  {
    "text": "layer and the infrastructure layer is where all this technical stuff lives all",
    "start": "449199",
    "end": "454319"
  },
  {
    "text": "the things that are not our business domain and that we want to be able to",
    "start": "454319",
    "end": "460400"
  },
  {
    "text": "swap out so ideally we could take this infrastructure layer that we have implemented once uh throw it out and",
    "start": "460400",
    "end": "468000"
  },
  {
    "text": "implemented completely new against a complete new system like we move from SQL server to",
    "start": "468000",
    "end": "474880"
  },
  {
    "text": "MongoDB last we have the presentation layer",
    "start": "476280",
    "end": "481479"
  },
  {
    "text": "and that's actually when we talk about enterprise applications where graphq is",
    "start": "481479",
    "end": "486720"
  },
  {
    "text": "on the top is where graphq lives but there could also be other things like",
    "start": "486720",
    "end": "492080"
  },
  {
    "text": "your UI framework could sit on top of that or web api or",
    "start": "492080",
    "end": "499039"
  },
  {
    "text": "gpc important here is that our layers reference from the outer to the",
    "start": "500199",
    "end": "507520"
  },
  {
    "text": "inner and not the reverse way so domain cannot reference application but",
    "start": "507520",
    "end": "513440"
  },
  {
    "text": "application can reference domain and infrastructure can reference application",
    "start": "513440",
    "end": "519839"
  },
  {
    "text": "but application cannot reference",
    "start": "519839",
    "end": "524159"
  },
  {
    "text": "infrastructure so let me wait that was too fast let's quickly have a look at",
    "start": "526360",
    "end": "532560"
  },
  {
    "text": "how such an application would look like and let me zoom in no",
    "start": "532560",
    "end": "538760"
  },
  {
    "text": "there so this is like an application we look closer into that so don't",
    "start": "538760",
    "end": "544519"
  },
  {
    "text": "worry can I actually zoom better in yeah doesn't matter so we have here",
    "start": "544519",
    "end": "551680"
  },
  {
    "text": "an application layer and then the domain layer infrastructure layer and this is",
    "start": "551680",
    "end": "556959"
  },
  {
    "text": "actually where our graphq server sits sits on top and has references to all of",
    "start": "556959",
    "end": "562320"
  },
  {
    "text": "the uh lower APIs okay let me zoom",
    "start": "562320",
    "end": "569720"
  },
  {
    "text": "out we're going to back there in a second okay so this is about structuring",
    "start": "569720",
    "end": "578640"
  },
  {
    "text": "clean architecture is about structuring your solution into several parts we're going to explore actually what these",
    "start": "578640",
    "end": "584560"
  },
  {
    "text": "parts is uh in a second there's a second thing here that",
    "start": "584560",
    "end": "590240"
  },
  {
    "text": "is commonly thrown into the fray and that is CQS so where does",
    "start": "590240",
    "end": "595399"
  },
  {
    "text": "CQS come in here cqs stands for command query responsibility",
    "start": "595399",
    "end": "602040"
  },
  {
    "text": "segregation and uh yeah you always have to be careful that you don't misspell",
    "start": "602040",
    "end": "607440"
  },
  {
    "text": "here but anyway uh it separate it separates read and write models in our",
    "start": "607440",
    "end": "614880"
  },
  {
    "text": "case um it's used in the application layer to define uh our business cases",
    "start": "614880",
    "end": "623200"
  },
  {
    "text": "our use cases with CQS we have a taskbased",
    "start": "623200",
    "end": "629279"
  },
  {
    "text": "interaction on the application like for instance the checkout in our web shop",
    "start": "629279",
    "end": "635680"
  },
  {
    "text": "that could be one command that we design that fully describes how this um command",
    "start": "635680",
    "end": "643120"
  },
  {
    "text": "interacts with the domain layer and does a thing in our application so when we compare that to",
    "start": "643120",
    "end": "649200"
  },
  {
    "text": "GraphQL commands would be mutations because mutations cause side effects to",
    "start": "649200",
    "end": "655760"
  },
  {
    "text": "our systems they do something and GraphQL actually has the same abstraction like CQS where you have a",
    "start": "655760",
    "end": "662480"
  },
  {
    "text": "read model that is side effect free which which are queries and you have the",
    "start": "662480",
    "end": "668279"
  },
  {
    "text": "mutations that closely relates to commands and um do side effects to your",
    "start": "668279",
    "end": "674160"
  },
  {
    "text": "system so if we look at the graphical structure here then you can see that at",
    "start": "674160",
    "end": "679839"
  },
  {
    "text": "the top level so basically there add to watch",
    "start": "679839",
    "end": "685040"
  },
  {
    "text": "list that is our mutation and everything beneath is actually query which queries the uh",
    "start": "685040",
    "end": "693760"
  },
  {
    "text": "effect of our change to our system so when we do a mutation we can immediately",
    "start": "693760",
    "end": "698800"
  },
  {
    "text": "read the effect it has to our system this is great for client applications as",
    "start": "698800",
    "end": "704560"
  },
  {
    "text": "they can do a change and then read the change and update the client store",
    "start": "704560",
    "end": "710399"
  },
  {
    "text": "without doing another round trip to the server but actually CQIS embraces",
    "start": "710399",
    "end": "717040"
  },
  {
    "text": "eventual consistency while a command can update the read model immediately and return us the the",
    "start": "717040",
    "end": "724079"
  },
  {
    "text": "effect of the change uh it can also defer that like could",
    "start": "724079",
    "end": "730240"
  },
  {
    "text": "also be async user flows for instance that are more expensive might take their time to",
    "start": "730240",
    "end": "737800"
  },
  {
    "text": "complete and we are using eventual consistency to at some point update the read",
    "start": "737800",
    "end": "745120"
  },
  {
    "text": "model while best practices in GraphQL is what I showed before where you immediately return the change we have",
    "start": "745639",
    "end": "752079"
  },
  {
    "text": "also in GraphQL a pattern where can I point you yeah where we can do a",
    "start": "752079",
    "end": "759720"
  },
  {
    "text": "mutation and then instead of returning the change we are returning here a transaction ID and then we can subscribe",
    "start": "759720",
    "end": "767839"
  },
  {
    "text": "do a subscription subscribe to an event and get updates on what is happening in",
    "start": "767839",
    "end": "773839"
  },
  {
    "text": "my change and eventually get uh the update the updated data back and update",
    "start": "773839",
    "end": "780560"
  },
  {
    "text": "my store it's from a transport lang level a bit more to do because I first",
    "start": "780560",
    "end": "786079"
  },
  {
    "text": "have to do a mutation and then subscribe so we have two connections instead of one what is always important here is",
    "start": "786079",
    "end": "794160"
  },
  {
    "text": "eventual consistency adds complexity to your system from the UI really to the",
    "start": "794160",
    "end": "799279"
  },
  {
    "text": "business flows so I would always um have a look is it needed in your case or can",
    "start": "799279",
    "end": "807360"
  },
  {
    "text": "you just uh do commands that immediately",
    "start": "807360",
    "end": "813279"
  },
  {
    "text": "complete secure queries operate on the read model right like in GraphQL queries",
    "start": "813399",
    "end": "820800"
  },
  {
    "text": "you basically have a onetoone match here so we align",
    "start": "820800",
    "end": "827079"
  },
  {
    "text": "100% because queries in CQS translates very easily to queries in",
    "start": "827079",
    "end": "833639"
  },
  {
    "text": "GraphQL so and let's actually have a look how this looks",
    "start": "833639",
    "end": "841639"
  },
  {
    "text": "like and now let's hope I can zoom in better so this is the domain level layer",
    "start": "841639",
    "end": "848160"
  },
  {
    "text": "and in my domain layer I have here the aggregates these are my basic um business entities um I'm going into what",
    "start": "848160",
    "end": "855760"
  },
  {
    "text": "aggregates is and stuff uh a bit later but here for instance we have a product",
    "start": "855760",
    "end": "861360"
  },
  {
    "text": "ident entity let's zoom out and the product entity describes basically what",
    "start": "861360",
    "end": "868320"
  },
  {
    "text": "the property has on properties but also what interactions I can have with the",
    "start": "868320",
    "end": "873680"
  },
  {
    "text": "property for instance I can rename it um I can change the price or I can remove",
    "start": "873680",
    "end": "880000"
  },
  {
    "text": "some stock if I sell something or add some stock and depending on what",
    "start": "880000",
    "end": "885279"
  },
  {
    "text": "interaction I have there are exceptions that it throws or there are also events",
    "start": "885279",
    "end": "891360"
  },
  {
    "text": "that we store and then other uh entities can react to the",
    "start": "891360",
    "end": "896519"
  },
  {
    "text": "change so this is um what's in my core domain there are also other stuffs like",
    "start": "896519",
    "end": "901680"
  },
  {
    "text": "common things like the base entity class for instance uh which just describes",
    "start": "901680",
    "end": "907600"
  },
  {
    "text": "that each entity for instance has an events collection things like",
    "start": "907600",
    "end": "912680"
  },
  {
    "text": "that okay so apart from that we also have down here the exceptions folder",
    "start": "912680",
    "end": "917839"
  },
  {
    "text": "which describes all the errors that can happen in these business cases okay in the application layer as I've as I",
    "start": "917839",
    "end": "924720"
  },
  {
    "text": "pointed out earlier let me",
    "start": "924720",
    "end": "930360"
  },
  {
    "text": "just cranky okay I have to learn the zoom tool",
    "start": "930360",
    "end": "937480"
  },
  {
    "text": "here ah yeah that's nicer okay so in the application layer um we have for each",
    "start": "937480",
    "end": "944959"
  },
  {
    "text": "entity a root folder and let's have a look for instance at product and there",
    "start": "944959",
    "end": "950000"
  },
  {
    "text": "you can see we have commands and we have queries so let's first uh have a look at",
    "start": "950000",
    "end": "957000"
  },
  {
    "text": "the queries here",
    "start": "957000",
    "end": "962959"
  },
  {
    "text": "okay",
    "start": "967800",
    "end": "970800"
  },
  {
    "text": "okay okay so a query class and I'm using here mediator as I said before we want",
    "start": "973639",
    "end": "979600"
  },
  {
    "text": "to be independent of tooling so my application layer is actually dependent on mediator you could build that",
    "start": "979600",
    "end": "986560"
  },
  {
    "text": "yourself but you always have to make a decision how much do you want to abstract things um the more you abstract",
    "start": "986560",
    "end": "994800"
  },
  {
    "text": "in these things the higher is the price tag for the whole thing so I made the",
    "start": "994800",
    "end": "1000320"
  },
  {
    "text": "decision here to use mediator and not build that on my own you could do that",
    "start": "1000320",
    "end": "1005839"
  },
  {
    "text": "okay in this query we basically have a request to mediator that's my query in",
    "start": "1005839",
    "end": "1010880"
  },
  {
    "text": "this case for instance I have here a product by ID and down here I have uh",
    "start": "1010880",
    "end": "1016480"
  },
  {
    "text": "the fulfillment of my query that's a request handler it executes here against",
    "start": "1016480",
    "end": "1021680"
  },
  {
    "text": "a thing that is called a data loader so what is a data loader so a data loader",
    "start": "1021680",
    "end": "1027280"
  },
  {
    "text": "is often associated with GraphQL but actually uh Facebook introduced the data",
    "start": "1027280",
    "end": "1034000"
  },
  {
    "text": "loader as a way to efficiently fetch data between the business layer and your",
    "start": "1034000",
    "end": "1040558"
  },
  {
    "text": "data layer and they use that in their REST API in their REST architecture",
    "start": "1040559",
    "end": "1046000"
  },
  {
    "text": "before and later in GraphQL in GraphQL it has a much higher impact but it",
    "start": "1046000",
    "end": "1051600"
  },
  {
    "text": "actually has nothing to do with GraphQL and it's useful also just in your business layers so what it does",
    "start": "1051600",
    "end": "1059880"
  },
  {
    "text": "actually is abstracting the data fetching uh between uh my business",
    "start": "1059880",
    "end": "1065679"
  },
  {
    "text": "component and the actual data store let me just quickly go back to the slides",
    "start": "1065679",
    "end": "1072720"
  },
  {
    "text": "because I have some slides for data loader so a data loader allows for batching so when we have a graphical",
    "start": "1072720",
    "end": "1079520"
  },
  {
    "text": "request like that where we have nested fetches then a data loader allows us to",
    "start": "1079520",
    "end": "1086640"
  },
  {
    "text": "collect these fetches defer basically the execution of the the query and",
    "start": "1086640",
    "end": "1091919"
  },
  {
    "text": "instead of um put the data loader in between here collect all the the requests that we do to a data loader and",
    "start": "1091919",
    "end": "1098559"
  },
  {
    "text": "later do a batch request to the database which is much more efficient",
    "start": "1098559",
    "end": "1104160"
  },
  {
    "text": "so how this works on an execution level is actually that a resolver would call",
    "start": "1104160",
    "end": "1110400"
  },
  {
    "text": "the business layer and the business layer would call the data loader and the data loader would call the",
    "start": "1110400",
    "end": "1117320"
  },
  {
    "text": "database and the data loader would actually when it gets a call first look in a task cache if it already has",
    "start": "1117320",
    "end": "1126080"
  },
  {
    "text": "resolved some data for the key that is passed in if that is the case we would",
    "start": "1126080",
    "end": "1134000"
  },
  {
    "text": "deliver from the from the task cache otherwise we just would just create a promise like a promise to get that data",
    "start": "1134000",
    "end": "1141200"
  },
  {
    "text": "at some point and then the component can await the whole thing and at some point",
    "start": "1141200",
    "end": "1146720"
  },
  {
    "text": "uh when there is nothing anymore to do so everything is executed from a graphical",
    "start": "1146720",
    "end": "1153600"
  },
  {
    "text": "standpoint this would be dispatched and resolve the data i show you the effect",
    "start": "1153600",
    "end": "1159039"
  },
  {
    "text": "um in a minute it's much simpler than it sounds so the idea with data loader is",
    "start": "1159039",
    "end": "1165600"
  },
  {
    "text": "that it proves data fetching uh and ensures consistency so let's",
    "start": "1165600",
    "end": "1171760"
  },
  {
    "text": "actually go back to the code so in my code we have here our product let's go",
    "start": "1171760",
    "end": "1178480"
  },
  {
    "text": "back here get product by ID query so this query",
    "start": "1178480",
    "end": "1184559"
  },
  {
    "text": "um asks the data loader here to load a certain ID that's a requested ID so if",
    "start": "1184559",
    "end": "1190640"
  },
  {
    "text": "we go to our application layer and that's the GraphQL layer here then we",
    "start": "1190640",
    "end": "1195760"
  },
  {
    "text": "can see that we have these root types and let me quickly go to the product",
    "start": "1195760",
    "end": "1202240"
  },
  {
    "text": "operations here so this is the GraphQL root type product operations so all the",
    "start": "1202240",
    "end": "1209120"
  },
  {
    "text": "operations that we have as product here we have a query as I said we have the same same semantics here query maps very",
    "start": "1209120",
    "end": "1216000"
  },
  {
    "text": "very well to query we basically inject here mediator and then we uh send here",
    "start": "1216000",
    "end": "1223280"
  },
  {
    "text": "our get um product by ID query in and then we get the result back so let's",
    "start": "1223280",
    "end": "1229760"
  },
  {
    "text": "actually try that out i'm starting that",
    "start": "1229760",
    "end": "1234480"
  },
  {
    "text": "quickly and so this is Nitro our graphql IDE and",
    "start": "1234919",
    "end": "1242159"
  },
  {
    "text": "uh this allows us actually to have a look at our graphql schema so we can dive into our graphql schema here and we",
    "start": "1242159",
    "end": "1249840"
  },
  {
    "text": "can also actually let's refresh that and we can also execute graphql queries so at",
    "start": "1249840",
    "end": "1256640"
  },
  {
    "text": "the moment we looked at for instance here the product by ID i can see when I execute the product by ID I get here my",
    "start": "1256640",
    "end": "1263280"
  },
  {
    "text": "product that is the representation of what we have in our um business layer",
    "start": "1263280",
    "end": "1269200"
  },
  {
    "text": "with all the available properties that we have there so one interesting effect",
    "start": "1269200",
    "end": "1274400"
  },
  {
    "text": "here is that actually this get product by ID or get products here returns me a",
    "start": "1274400",
    "end": "1280480"
  },
  {
    "text": "product and this product actually is the read model in our architecture we",
    "start": "1280480",
    "end": "1287799"
  },
  {
    "text": "separated the read model some people call it product DTO or whatever it's up",
    "start": "1287799",
    "end": "1293440"
  },
  {
    "text": "to you a bit um we have here the read model so this is a stupid DTO and we",
    "start": "1293440",
    "end": "1300080"
  },
  {
    "text": "have actually in domain our product",
    "start": "1300080",
    "end": "1305400"
  },
  {
    "text": "aggregate which is more complex has all these uh flows that we can execute there",
    "start": "1305400",
    "end": "1311760"
  },
  {
    "text": "like to uh rename it to change the price or what not okay let me go",
    "start": "1311760",
    "end": "1320120"
  },
  {
    "text": "back so what we see in graphql essentially everywhere is the read model and when we want to execute that I",
    "start": "1320120",
    "end": "1328640"
  },
  {
    "text": "can use here the um the query builder and say get products for",
    "start": "1328640",
    "end": "1335080"
  },
  {
    "text": "instance then we can just pick here for instance the products and from products",
    "start": "1335080",
    "end": "1340559"
  },
  {
    "text": "we want the nodes and then we fetch for instance here a couple of properties",
    "start": "1340559",
    "end": "1345840"
  },
  {
    "text": "let's actually just fetch the",
    "start": "1345840",
    "end": "1351039"
  },
  {
    "text": "Okay yeah so I forgot the paging type so it forces me here to specify how many",
    "start": "1351559",
    "end": "1357200"
  },
  {
    "text": "items I want so that we don't overfetch i can do that and then I get the data",
    "start": "1357200",
    "end": "1362799"
  },
  {
    "text": "back so the nice thing when you combine GraphQL with CQ CQS and um all these",
    "start": "1362799",
    "end": "1372159"
  },
  {
    "text": "layers is that you still can take advant advantage of GraphQL here because what",
    "start": "1372159",
    "end": "1377840"
  },
  {
    "text": "GraphQL does here is just ask for the name right and what we did in our layers is",
    "start": "1377840",
    "end": "1385520"
  },
  {
    "text": "we passed something in here which is a selection this is graphq specific and tells me what is selected in this",
    "start": "1385520",
    "end": "1392679"
  },
  {
    "text": "query and what we can do with hot chocolate here is ask for the selection",
    "start": "1392679",
    "end": "1398000"
  },
  {
    "text": "to create a selector so if we go to our query here you can see that I have an",
    "start": "1398000",
    "end": "1403919"
  },
  {
    "text": "expression here which describes the projection the data I'm interested in but abstract from graphq so this is just",
    "start": "1403919",
    "end": "1412240"
  },
  {
    "text": "the standard uh expression trees that we have in net for years",
    "start": "1412240",
    "end": "1417679"
  },
  {
    "text": "so these I can pass through to my data loaders and somewhere where I have",
    "start": "1417679",
    "end": "1423039"
  },
  {
    "text": "implemented in the infrastructure let's quickly go there my",
    "start": "1423039",
    "end": "1428960"
  },
  {
    "text": "data loader here we get passed in the selector which",
    "start": "1428960",
    "end": "1436559"
  },
  {
    "text": "is just the expression and then we can apply it just as a select to my query",
    "start": "1436559",
    "end": "1442080"
  },
  {
    "text": "here you could also rewrite it if you have and you want to translate it to be",
    "start": "1442080",
    "end": "1448880"
  },
  {
    "text": "baser that's which then translate to the perfect database query down the line so",
    "start": "1454760",
    "end": "1460159"
  },
  {
    "text": "you have no end uh N plus1 problem across the board from GraphQL from your",
    "start": "1460159",
    "end": "1466080"
  },
  {
    "text": "UI to GraphQL to the database okay let's move on",
    "start": "1466080",
    "end": "1474400"
  },
  {
    "text": "okay so let's talk about DDD where this comes actually in here so what is DDD",
    "start": "1476919",
    "end": "1483919"
  },
  {
    "text": "ddd is a strategic design approach for complex applications so this is not",
    "start": "1483919",
    "end": "1490080"
  },
  {
    "text": "meant for things like a to-do app uh or a app that you want to throw away next",
    "start": "1490080",
    "end": "1495960"
  },
  {
    "text": "week like for this you can use database first or simple layering or whatnot like",
    "start": "1495960",
    "end": "1501360"
  },
  {
    "text": "when you build with these things like when you use clean architecture to your structure your projects when you use CQS",
    "start": "1501360",
    "end": "1508159"
  },
  {
    "text": "and when you use DDD these things are built to last to last and to swap out",
    "start": "1508159",
    "end": "1513440"
  },
  {
    "text": "things over time ddd helps focus on the core",
    "start": "1513440",
    "end": "1520880"
  },
  {
    "text": "business problems by aligning software models with business requirements and",
    "start": "1520880",
    "end": "1526080"
  },
  {
    "text": "using a shared language between developers and domain experts",
    "start": "1526080",
    "end": "1531120"
  },
  {
    "text": "called the ubiquitous language this ubiquitous language is the",
    "start": "1531120",
    "end": "1537120"
  },
  {
    "text": "common language between developers and stakeholders to build a model we come",
    "start": "1537120",
    "end": "1542400"
  },
  {
    "text": "together to build up a common understanding of how the business works",
    "start": "1542400",
    "end": "1548960"
  },
  {
    "text": "and how it should translate into software we have a lot of tools",
    "start": "1548960",
    "end": "1554320"
  },
  {
    "text": "available to do that like for instance eventtorming or whatnot",
    "start": "1554320",
    "end": "1559799"
  },
  {
    "text": "understanding your business is key to applying DDD to your project but it's",
    "start": "1559799",
    "end": "1565520"
  },
  {
    "text": "also key to writing uh successful software applications the idea is to simplify",
    "start": "1565520",
    "end": "1573120"
  },
  {
    "text": "complex systems and make it understandable and",
    "start": "1573120",
    "end": "1578720"
  },
  {
    "text": "maintainable so we have this in GraphQL 2 right the ubiquitous language in",
    "start": "1578840",
    "end": "1585360"
  },
  {
    "text": "GraphQL is the schema this is actually how we expose the business model to our",
    "start": "1585360",
    "end": "1592279"
  },
  {
    "text": "users so when we think in GraphQL you have this rich schema here which",
    "start": "1592279",
    "end": "1598559"
  },
  {
    "text": "describes every aspect of your business like it's not just the the the types",
    "start": "1598559",
    "end": "1604559"
  },
  {
    "text": "here but if we look for instance at the mutations and we for instance look at",
    "start": "1604559",
    "end": "1610000"
  },
  {
    "text": "the remove product stock mutation that is when we uh basically take something",
    "start": "1610000",
    "end": "1616400"
  },
  {
    "text": "out of our uh warehouse and we sell it then I can see if I do this mutation I",
    "start": "1616400",
    "end": "1625120"
  },
  {
    "text": "get back a product here or errors and if I go on the errors I can exactly see what domain errors are thrown so what",
    "start": "1625120",
    "end": "1633200"
  },
  {
    "text": "are the uh cases where something goes wrong and if I go on the domain errors",
    "start": "1633200",
    "end": "1638320"
  },
  {
    "text": "here then I can see what data I will have for my consumer to mitigate these",
    "start": "1638320",
    "end": "1645000"
  },
  {
    "text": "errors maybe um adopt how many items I want to take out of the warehouse right",
    "start": "1645000",
    "end": "1651279"
  },
  {
    "text": "and it's super nice to write these mutations and to really reason about",
    "start": "1651279",
    "end": "1656400"
  },
  {
    "text": "your business model right um let's do that for instance we go we take here the remove",
    "start": "1656400",
    "end": "1664080"
  },
  {
    "text": "product stock mutation and then we want to handle the errors here and then I can choose which",
    "start": "1664080",
    "end": "1671919"
  },
  {
    "text": "error I want to handle so I take both here but what if my model changes in the",
    "start": "1671919",
    "end": "1678640"
  },
  {
    "text": "future i might want to handle also exceptions or domain errors that are",
    "start": "1678640",
    "end": "1685600"
  },
  {
    "text": "introduced after I ship my client this also works with GraphQL right with the",
    "start": "1685600",
    "end": "1691200"
  },
  {
    "text": "mutation convention patterns that we have in GraphQL we can also just catch any error that is not known today that's",
    "start": "1691200",
    "end": "1698240"
  },
  {
    "text": "my catch else and then say okay I always want the message because at least I want",
    "start": "1698240",
    "end": "1703520"
  },
  {
    "text": "to give my user or my consumer a message what is wrong and then they um can at",
    "start": "1703520",
    "end": "1709840"
  },
  {
    "text": "least ask ask support or whatnot",
    "start": "1709840",
    "end": "1716440"
  },
  {
    "text": "okay so it's surprising how many companies do not know how their business",
    "start": "1716440",
    "end": "1721559"
  },
  {
    "text": "works if you ask a developer product manager or a product owner how their",
    "start": "1721559",
    "end": "1727120"
  },
  {
    "text": "business works you often get three different answers and sometimes none of them is correct by sitting together",
    "start": "1727120",
    "end": "1735440"
  },
  {
    "text": "modeling it modeling discussing the models you're creating it becomes clearer to everyone involved in GraphQL",
    "start": "1735440",
    "end": "1743919"
  },
  {
    "text": "even if you're not doing DDD or what not then we often see P see that uh",
    "start": "1743919",
    "end": "1750159"
  },
  {
    "text": "companies introduce a schema guild where the front end engineers the back end engineers and the stakeholders come",
    "start": "1750159",
    "end": "1756080"
  },
  {
    "text": "together and discuss how features translate into the",
    "start": "1756080",
    "end": "1761919"
  },
  {
    "text": "schema the building blocks of DDD the uh",
    "start": "1762919",
    "end": "1768039"
  },
  {
    "text": "entities value objects aggregates and repositories so what is an",
    "start": "1768039",
    "end": "1774120"
  },
  {
    "text": "aggregate an aggregate is a cluster of related objects that are treated as a",
    "start": "1774120",
    "end": "1780240"
  },
  {
    "text": "single unit when it comes to data changes it represent it represents a",
    "start": "1780240",
    "end": "1786520"
  },
  {
    "text": "group of domain entities and value objects that are tightly coupled around a common business concern",
    "start": "1786520",
    "end": "1796480"
  },
  {
    "text": "if we bring that into perspective to GraphQL we call the entities",
    "start": "1796480",
    "end": "1803320"
  },
  {
    "text": "nodes and that is a term that Facebook introduced into GraphQL because we're",
    "start": "1803320",
    "end": "1809120"
  },
  {
    "text": "thinking graphs right an entity is a node and a value object translates into a scala and an aggregate is basically a",
    "start": "1809120",
    "end": "1816640"
  },
  {
    "text": "group of types and when you think about repositories that's basically our roots in the",
    "start": "1816640",
    "end": "1822880"
  },
  {
    "text": "GraphQL schema but there's more in DDD we also",
    "start": "1822880",
    "end": "1828720"
  },
  {
    "text": "have a concept of bounded contexts which define",
    "start": "1828720",
    "end": "1834399"
  },
  {
    "text": "uh specific areas in your business and this helps us to isolate",
    "start": "1834399",
    "end": "1841600"
  },
  {
    "text": "uh certain business concerns for instance we could have an",
    "start": "1841600",
    "end": "1847000"
  },
  {
    "text": "oh for instance we could have um an ordering service or a catalog",
    "start": "1847000",
    "end": "1856480"
  },
  {
    "text": "service or an identity service and all of these are bounded contexts that have",
    "start": "1856520",
    "end": "1862240"
  },
  {
    "text": "maybe similar entities or maybe different entities in GraphQL we have this too",
    "start": "1862240",
    "end": "1871919"
  },
  {
    "text": "we call the we call these subgraphs so each of these bounded",
    "start": "1871919",
    "end": "1878000"
  },
  {
    "text": "contexts would be a graphql server or would be a graphql schema and on top of",
    "start": "1878000",
    "end": "1883039"
  },
  {
    "text": "that we have a composite schema that brings all these different bounded contexts together into a single graphql",
    "start": "1883039",
    "end": "1890799"
  },
  {
    "text": "schema which we call the composite schema so a graphical gateway orch",
    "start": "1890799",
    "end": "1896960"
  },
  {
    "text": "orchestrates the data between subgraphs these subgraphs can have requirements",
    "start": "1896960",
    "end": "1903919"
  },
  {
    "text": "against each other data requirements for instance if if you want to fetch this you have to provide this",
    "start": "1903919",
    "end": "1910679"
  },
  {
    "text": "data this is done by creating a query plan on the gateway level and then executing and resolving the data behind",
    "start": "1910679",
    "end": "1918640"
  },
  {
    "text": "subgraphs could be other services technologies whatever you have there it",
    "start": "1918640",
    "end": "1923679"
  },
  {
    "text": "could also be that uh a certain boundary context is implemented in REST and then",
    "start": "1923679",
    "end": "1928799"
  },
  {
    "text": "you translate it to uh GraphQL and uh integrated into your composite schema i",
    "start": "1928799",
    "end": "1936559"
  },
  {
    "text": "met last week actually with the Netflix engineers and their system has around",
    "start": "1936559",
    "end": "1942240"
  },
  {
    "text": "4,000 of these subgraphs so 4,000 of these bounded contexts and their gateway",
    "start": "1942240",
    "end": "1948320"
  },
  {
    "text": "executes six million requests a second and they just have two Java instances",
    "start": "1948320",
    "end": "1954000"
  },
  {
    "text": "running so this is uh really running at scale and proven at the largest",
    "start": "1954000",
    "end": "1959200"
  },
  {
    "text": "companies out there all client applications would",
    "start": "1959200",
    "end": "1964399"
  },
  {
    "text": "interact against the composite schema so while we have bounded context subgraph",
    "start": "1964399",
    "end": "1971519"
  },
  {
    "text": "uh in our company and like each team can work in isolations on a certain uh",
    "start": "1971519",
    "end": "1977440"
  },
  {
    "text": "problem area to the consumer we have a single unified business",
    "start": "1977440",
    "end": "1983399"
  },
  {
    "text": "model so each of our applications in each of their versions",
    "start": "1983399",
    "end": "1989039"
  },
  {
    "text": "interacts against this single business model reducing complexity for our users",
    "start": "1989039",
    "end": "1995760"
  },
  {
    "text": "and guaranteeing that no clients breaks",
    "start": "1995760",
    "end": "2000720"
  },
  {
    "text": "ever okay let's zoom back to DDD here uh in DD we have uh events so we have",
    "start": "2001080",
    "end": "2010320"
  },
  {
    "text": "different event event kinds we have for instance domain events and domain events",
    "start": "2010320",
    "end": "2015440"
  },
  {
    "text": "are events between aggregates between entities and um so within a bounded",
    "start": "2015440",
    "end": "2023240"
  },
  {
    "text": "context and this allows basically also to design these entities in isolation",
    "start": "2023240",
    "end": "2028799"
  },
  {
    "text": "and then let them interact in use cases together as an orchestration but there's also the need",
    "start": "2028799",
    "end": "2035919"
  },
  {
    "text": "sometimes to have integration events which are events between uh entities of",
    "start": "2035919",
    "end": "2042720"
  },
  {
    "text": "different bounded contexts um and this can be designed uh",
    "start": "2042720",
    "end": "2049040"
  },
  {
    "text": "with a messaging system out there where you translate then for instance domain",
    "start": "2049040",
    "end": "2054320"
  },
  {
    "text": "events into integration events and let these entities interact in graphql we",
    "start": "2054320",
    "end": "2060638"
  },
  {
    "text": "also have an eventing system but that is more for the outside world so basically for you consumers of your GraphQL",
    "start": "2060639",
    "end": "2068079"
  },
  {
    "text": "endpoint and we call that subscriptions and that is a very nice",
    "start": "2068079",
    "end": "2074320"
  },
  {
    "text": "thing where you can give users an interactive um uh an interactive point where they",
    "start": "2074320",
    "end": "2082480"
  },
  {
    "text": "can subscribe to and then run basically a query against the system when something change which updates your",
    "start": "2082480",
    "end": "2088638"
  },
  {
    "text": "client store or whatever",
    "start": "2088639",
    "end": "2093240"
  },
  {
    "text": "so what are the are the advantages of introducing a domain driven design to",
    "start": "2093839",
    "end": "2100960"
  },
  {
    "text": "your um to your software product one is",
    "start": "2100960",
    "end": "2106560"
  },
  {
    "text": "alignment between software and business needs right suddenly your software engineers know what your uh what your",
    "start": "2106560",
    "end": "2114400"
  },
  {
    "text": "business is about they are not just hacking something down and trying to get something to work they really understand",
    "start": "2114400",
    "end": "2121200"
  },
  {
    "text": "the business domain uh by heart and also this the stakeholders and",
    "start": "2121200",
    "end": "2129119"
  },
  {
    "text": "the uh developers together build the system so overall you get a much deeper",
    "start": "2129119",
    "end": "2134560"
  },
  {
    "text": "understanding of your system you also get a lot of flexibility because you can uh swap things out bring",
    "start": "2134560",
    "end": "2142640"
  },
  {
    "text": "in uh new new components like there's always this example of we can swap out",
    "start": "2142640",
    "end": "2147680"
  },
  {
    "text": "the database like in my experience that is the rarest thing that people do uh",
    "start": "2147680",
    "end": "2155040"
  },
  {
    "text": "like in one project actually we did that once uh migrate from to",
    "start": "2155040",
    "end": "2161960"
  },
  {
    "text": "Postgress but it's very rare right that's also like when you think about",
    "start": "2161960",
    "end": "2168240"
  },
  {
    "text": "abstracting your data layer um you also have to think about is it worth",
    "start": "2168240",
    "end": "2173880"
  },
  {
    "text": "abstracting for instance entity framework out uh is it worth the the",
    "start": "2173880",
    "end": "2179040"
  },
  {
    "text": "complexity cost right but there are lots of things like messaging solutions or",
    "start": "2179040",
    "end": "2184400"
  },
  {
    "text": "whatnot where you actually want the flexibility to swap that out and there's also the the the",
    "start": "2184400",
    "end": "2191440"
  },
  {
    "text": "scalability concern that you want to have as I said for instance most of us",
    "start": "2191440",
    "end": "2196560"
  },
  {
    "text": "will not build an application that runs six million requests per second right but uh it's important to know that you",
    "start": "2196560",
    "end": "2203599"
  },
  {
    "text": "can get there with your system uh you don't have to make all the difficult decisions today to get there because",
    "start": "2203599",
    "end": "2210400"
  },
  {
    "text": "there's a lot more involved to get to that level than just throwing DDD at a",
    "start": "2210400",
    "end": "2215920"
  },
  {
    "text": "project or something like that um but the good thing is you're choosing here",
    "start": "2215920",
    "end": "2221280"
  },
  {
    "text": "patterns and uh structural approaches to your for your project that will get you there if you need to uh and I hope for",
    "start": "2221280",
    "end": "2229280"
  },
  {
    "text": "many of you if you're working at a startup that you get to that level most of us will not",
    "start": "2229280",
    "end": "2236880"
  },
  {
    "text": "okay so what are the problems here um one thing is like if you start",
    "start": "2238079",
    "end": "2244720"
  },
  {
    "text": "with DDD it's complex it's comp more complex like if you for instance choose",
    "start": "2244720",
    "end": "2250160"
  },
  {
    "text": "clean architecture like how you structure your project and and CQS",
    "start": "2250160",
    "end": "2256440"
  },
  {
    "text": "um it's there's complexity involved in that but uh like to do proper domain",
    "start": "2256440",
    "end": "2262480"
  },
  {
    "text": "driven design is even more complexity like you really have to understand you have to bring together a a set of people",
    "start": "2262480",
    "end": "2271119"
  },
  {
    "text": "and makes them really understand your business but you actually want to want",
    "start": "2271119",
    "end": "2276400"
  },
  {
    "text": "this problem right you want to want that your engineers understand the business",
    "start": "2276400",
    "end": "2284560"
  },
  {
    "text": "it's also time consuming at at least in the beginning like when you uh start",
    "start": "2284560",
    "end": "2290480"
  },
  {
    "text": "fresh or refactor a project and bring it into the the domain driven design fold",
    "start": "2290480",
    "end": "2296000"
  },
  {
    "text": "this is an is a very high uh initial investment in getting there and also you",
    "start": "2296000",
    "end": "2304160"
  },
  {
    "text": "have to build up the skills in your developers but actually uh I think it's",
    "start": "2304160",
    "end": "2311839"
  },
  {
    "text": "worth doing it so hot take the only way to make enterprise",
    "start": "2311839",
    "end": "2319440"
  },
  {
    "text": "applications accessible is actually with graphql so why do I say that so in the",
    "start": "2319440",
    "end": "2327760"
  },
  {
    "text": "beginning I said that graphq was meant as a sin layer over your business layer",
    "start": "2327760",
    "end": "2335200"
  },
  {
    "text": "so when we look at this project here and we go really in from the products operation right then you can see",
    "start": "2335200",
    "end": "2343800"
  },
  {
    "text": "that each of these things here is a very thin function or very thin method where",
    "start": "2343800",
    "end": "2350160"
  },
  {
    "text": "we just declare okay I have here a product sorry or a list of products here",
    "start": "2350160",
    "end": "2359599"
  },
  {
    "text": "and what I want to fetch that and the only thing I do is I inject him mediator",
    "start": "2359599",
    "end": "2366079"
  },
  {
    "text": "I execute mediator and I get the result back there's no business code in my",
    "start": "2367920",
    "end": "2374240"
  },
  {
    "text": "resolver here and then when I go to the query",
    "start": "2374240",
    "end": "2379839"
  },
  {
    "text": "it's also very simple code so I have basically here DTO which represents my",
    "start": "2379839",
    "end": "2387480"
  },
  {
    "text": "request then I have here the handler for my request this is all abstracted right",
    "start": "2387480",
    "end": "2393920"
  },
  {
    "text": "i just describe how I want to get my data but I have no implementation how I",
    "start": "2393920",
    "end": "2399280"
  },
  {
    "text": "get my data with which framework I get my data this is actually down in my infrastructure",
    "start": "2399280",
    "end": "2405480"
  },
  {
    "text": "layer uh where I have the data loader for it and this really describes how I",
    "start": "2405480",
    "end": "2412000"
  },
  {
    "text": "fetch my data from the database here I have the mapping and you could use other things for the mapping there are",
    "start": "2412000",
    "end": "2417760"
  },
  {
    "text": "frameworks out there i just did roll it by hand here myself but here I map from",
    "start": "2417760",
    "end": "2423359"
  },
  {
    "text": "the right model to my read model uh then uh have your ordering",
    "start": "2423359",
    "end": "2429880"
  },
  {
    "text": "applied maybe do some projections and then I use paging here so I uh get just a certain range of",
    "start": "2429880",
    "end": "2438240"
  },
  {
    "text": "my data set but this is the implementation this could be swapped out i could put in here if I really",
    "start": "2438240",
    "end": "2443599"
  },
  {
    "text": "wanted to um but everywhere you have very small",
    "start": "2443599",
    "end": "2449839"
  },
  {
    "text": "code very understandable code so it's easy to reason about these things and",
    "start": "2449839",
    "end": "2455359"
  },
  {
    "text": "let me show you one more thing here um like if we go back to our GraphQL layer here you can see there's a folder",
    "start": "2455359",
    "end": "2462359"
  },
  {
    "text": "nodes and let's actually go to the brand node here so let's say we want",
    "start": "2462359",
    "end": "2470640"
  },
  {
    "text": "to query here let me wipe that out let's say we want to query here get",
    "start": "2470640",
    "end": "2478319"
  },
  {
    "text": "brands and products so each brand has a list of",
    "start": "2478319",
    "end": "2484079"
  },
  {
    "text": "products right so we could get all the brands which is",
    "start": "2484079",
    "end": "2489839"
  },
  {
    "text": "easy okay so I can query that and actually I have to define the slicing",
    "start": "2493160",
    "end": "2500480"
  },
  {
    "text": "here and then I get here two brands air strider",
    "start": "2502520",
    "end": "2507640"
  },
  {
    "text": "and so each brands has a list of products right so I could actually dive",
    "start": "2507640",
    "end": "2513359"
  },
  {
    "text": "in here get into the products then get into the",
    "start": "2513359",
    "end": "2518680"
  },
  {
    "text": "nodes and I might just want to have from the nodes the",
    "start": "2518680",
    "end": "2524920"
  },
  {
    "text": "name and then I could query that and again I have to ask for how",
    "start": "2524920",
    "end": "2532960"
  },
  {
    "text": "many and then I actually get here this actually has no products but this has",
    "start": "2533079",
    "end": "2538560"
  },
  {
    "text": "products right and the crucial thing here is actually on the right model the",
    "start": "2538560",
    "end": "2545040"
  },
  {
    "text": "right model is not connected so if I go back here and I go to my uh domain layer",
    "start": "2545040",
    "end": "2553839"
  },
  {
    "text": "and I look actually at product then you can see that it's not really connected",
    "start": "2553839",
    "end": "2559119"
  },
  {
    "text": "it's just loosely connected to um my brand so I just have here the brand",
    "start": "2559119",
    "end": "2565000"
  },
  {
    "text": "ID sorry um and the way this is done again is on",
    "start": "2565000",
    "end": "2571359"
  },
  {
    "text": "the data loader level in my application layer so let's dive from here in so when",
    "start": "2571359",
    "end": "2580400"
  },
  {
    "text": "I go here in my graphql type So I described here that I want to extend on",
    "start": "2580400",
    "end": "2586319"
  },
  {
    "text": "my graphql model the brand type right you say object type you annotate that",
    "start": "2586319",
    "end": "2592480"
  },
  {
    "text": "here and then you say I want to provide extra stuff to my graphql model and",
    "start": "2592480",
    "end": "2597800"
  },
  {
    "text": "integrate actually different entities from different areas and then I write",
    "start": "2597800",
    "end": "2603040"
  },
  {
    "text": "one resolver here again very very small code where I again use mediator",
    "start": "2603040",
    "end": "2611680"
  },
  {
    "text": "And in here I just send out a command to get the products by brand one thing up",
    "start": "2611680",
    "end": "2619599"
  },
  {
    "text": "here because we are talking about projections this resolver says I need a",
    "start": "2619599",
    "end": "2625800"
  },
  {
    "text": "brand to work and this brand at least has to have an ID because this ID I need",
    "start": "2625800",
    "end": "2631280"
  },
  {
    "text": "to pass on so even with projections you can define in your reserver requirements",
    "start": "2631280",
    "end": "2637119"
  },
  {
    "text": "and pre-resolve them then down the line so in",
    "start": "2637119",
    "end": "2642599"
  },
  {
    "text": "this again very small code like this code is looks very repetitive if you uh",
    "start": "2642599",
    "end": "2648400"
  },
  {
    "text": "want to see but that's good it's testable on its own so you can test it in isolation without the graphq layer",
    "start": "2648400",
    "end": "2655280"
  },
  {
    "text": "with the graphq layer you can test the application layer or you test um just",
    "start": "2655280",
    "end": "2661440"
  },
  {
    "text": "the domain layer and you don't even have to have a database for it you could just",
    "start": "2661440",
    "end": "2666640"
  },
  {
    "text": "mock all these things with inmemory instances if you just want to debug the",
    "start": "2666640",
    "end": "2672240"
  },
  {
    "text": "flow behind these things so again here uh very small code",
    "start": "2672240",
    "end": "2677440"
  },
  {
    "text": "this translates actually to again a data later down in our infrastructure level",
    "start": "2677440",
    "end": "2683440"
  },
  {
    "text": "where we have here the products data",
    "start": "2683440",
    "end": "2688839"
  },
  {
    "text": "loader and in this case this is a this is a batched pagenated data loader",
    "start": "2688839",
    "end": "2694400"
  },
  {
    "text": "sounds complex because as I said the data loader is about batching and what",
    "start": "2694400",
    "end": "2701200"
  },
  {
    "text": "we do here is basically we say uh give me a a a",
    "start": "2701200",
    "end": "2707680"
  },
  {
    "text": "collection of brand ids and then we're going to fetch the data for these brand ids and we do a two",
    "start": "2707680",
    "end": "2715520"
  },
  {
    "text": "batched page async so we have a window function on the um database and then",
    "start": "2715520",
    "end": "2720800"
  },
  {
    "text": "fetch multiple paged uh product lists at once so this is the complex part but",
    "start": "2720800",
    "end": "2729240"
  },
  {
    "text": "also very maintainable because it's we again a small slice here it looks",
    "start": "2729240",
    "end": "2734720"
  },
  {
    "text": "complex if we go back here it's very easy because here",
    "start": "2734720",
    "end": "2741200"
  },
  {
    "text": "it's just about a single ID right sorry",
    "start": "2741200",
    "end": "2747040"
  },
  {
    "text": "wrong yeah here it's just about a single ID so I just say give me this page for",
    "start": "2747880",
    "end": "2754160"
  },
  {
    "text": "this ID but in the infrastructure layer I have the batching code so again very simple from going",
    "start": "2754160",
    "end": "2762400"
  },
  {
    "text": "from a very flat graphical layer just a couple of things here the everything else is basically inferred from your",
    "start": "2762400",
    "end": "2769280"
  },
  {
    "text": "read model uh and works out of the",
    "start": "2769280",
    "end": "2774880"
  },
  {
    "text": "box okay let's actually go to the next",
    "start": "2775160",
    "end": "2780799"
  },
  {
    "text": "slide so with GraphQL as I said we have this composite schema which actually",
    "start": "2781319",
    "end": "2786880"
  },
  {
    "text": "makes up all your boundary context into a single schema where all your clients can access it",
    "start": "2786880",
    "end": "2795200"
  },
  {
    "text": "uh and the the good thing here is that we never break our clients so how is",
    "start": "2795319",
    "end": "2801680"
  },
  {
    "text": "that possible because the schema evolution story in GraphQL is much better than with anything that you have",
    "start": "2801680",
    "end": "2808079"
  },
  {
    "text": "in REST so why is that because in GraphQL we have a thing that is called a",
    "start": "2808079",
    "end": "2813920"
  },
  {
    "text": "schema registry so what is a schema registry this is Nitro the same app",
    "start": "2813920",
    "end": "2819760"
  },
  {
    "text": "where we write our queries in but this is for instance a gateway with a lot of these uh downstream services these are",
    "start": "2819760",
    "end": "2827200"
  },
  {
    "text": "all bounded contexts if you will and then we have here our gateway down here",
    "start": "2827200",
    "end": "2832319"
  },
  {
    "text": "you can see the clients that are using our GraphQL server so the thing with GraphQL",
    "start": "2832319",
    "end": "2841160"
  },
  {
    "text": "is let me show you this so at development time you're writing these",
    "start": "2841160",
    "end": "2846480"
  },
  {
    "text": "queries right you're writing these queries you're defining what data you want the moment you ship these clients",
    "start": "2846480",
    "end": "2852720"
  },
  {
    "text": "to production what the build process will do is strip the queries from your clients upload it into a schema and",
    "start": "2852720",
    "end": "2860240"
  },
  {
    "text": "client registry and after that you have a REST application let me show you Twitter for",
    "start": "2860240",
    "end": "2868480"
  },
  {
    "text": "instance so developer tools so Twitter also runs on GraphQL and what we can do here is",
    "start": "2872200",
    "end": "2879920"
  },
  {
    "text": "actually I filtered down here to GraphQL we're going to do a refresh and",
    "start": "2879920",
    "end": "2884960"
  },
  {
    "text": "what you see here is requests and these requests while they look like REST are actually GraphQL requests and you can",
    "start": "2884960",
    "end": "2891280"
  },
  {
    "text": "see here Twitter API graphql right and if we look at the um at the payload here",
    "start": "2891280",
    "end": "2898640"
  },
  {
    "text": "for instance you see it's just this strange thing variables which is in the ul this is also a get",
    "start": "2898640",
    "end": "2905240"
  },
  {
    "text": "request and it has uh kind of here these strange ids so what we do in GraphQL when you",
    "start": "2905240",
    "end": "2912720"
  },
  {
    "text": "ship to production is we strip your gra your graphql clients from all the queries we replace them with",
    "start": "2912720",
    "end": "2919880"
  },
  {
    "text": "hashes and then we upload that to our schema registry and our graphql server",
    "start": "2919880",
    "end": "2925920"
  },
  {
    "text": "executes against this schema registry that means like if the client comes in",
    "start": "2925920",
    "end": "2932880"
  },
  {
    "text": "with a very cryptic hash and asks for something the server will ask the schema",
    "start": "2932880",
    "end": "2938000"
  },
  {
    "text": "registry please give me uh the information for this query and then it can process this query this makes graph",
    "start": "2938000",
    "end": "2945599"
  },
  {
    "text": "super fast because you don't have to validate queries and whatnot you can pre-ompile them and uh you have the",
    "start": "2945599",
    "end": "2952800"
  },
  {
    "text": "security of rest and also the traceability of rest because you have proper routes here where you can see",
    "start": "2952800",
    "end": "2959599"
  },
  {
    "text": "what is executed in this case this is called data safe mode if I like for",
    "start": "2959599",
    "end": "2965440"
  },
  {
    "text": "instance something I have to be careful what I like but uh",
    "start": "2965440",
    "end": "2972279"
  },
  {
    "text": "uh not nothing political so let's skip over that",
    "start": "2973760",
    "end": "2979880"
  },
  {
    "text": "uh yeah net something is always good then you can see here favorite tweet so",
    "start": "2979880",
    "end": "2985440"
  },
  {
    "text": "this is very debugable in the browser and this is a post right we can",
    "start": "2985440",
    "end": "2991760"
  },
  {
    "text": "see actually here that it's a GraphQL uh request but instead of sending the query",
    "start": "2991760",
    "end": "2997359"
  },
  {
    "text": "over we're sending the query ID over here and uh we still send over the",
    "start": "2997359",
    "end": "3003040"
  },
  {
    "text": "variables that we have in GraphQL standard thing and then you get also",
    "start": "3003040",
    "end": "3008079"
  },
  {
    "text": "here the graphq response which is just done so I liked something that's",
    "start": "3008079",
    "end": "3014599"
  },
  {
    "text": "unliked okay so this basically looks like rest api uh at production level and gives you",
    "start": "3014599",
    "end": "3022960"
  },
  {
    "text": "all the benefits of what you would have uh in a rest api but at development time",
    "start": "3022960",
    "end": "3028880"
  },
  {
    "text": "you have all the flexibility all the type safness of graphql uh with your",
    "start": "3028880",
    "end": "3035800"
  },
  {
    "text": "system okay let's go back and this really like",
    "start": "3035800",
    "end": "3041920"
  },
  {
    "text": "because we track these changes like when we go here you can see all the clients with all the versions so we track each",
    "start": "3041920",
    "end": "3048559"
  },
  {
    "text": "field that the client uses and that means when you do a change to your schema you do just an innocent C change",
    "start": "3048559",
    "end": "3056079"
  },
  {
    "text": "which translates in a changed schema like these tools know that and",
    "start": "3056079",
    "end": "3061920"
  },
  {
    "text": "you can see immediately in your backlog okay you did a breaking change and then these these toolings can tell you uh",
    "start": "3061920",
    "end": "3070160"
  },
  {
    "text": "which client you just broke or which version you broke it might not matter because the version might be very old",
    "start": "3070160",
    "end": "3076319"
  },
  {
    "text": "and you don't care about the users that use it but you get this information and you don't get that with REST if you have",
    "start": "3076319",
    "end": "3083280"
  },
  {
    "text": "a REST request the abstraction is just this request but not down to the fields",
    "start": "3083280",
    "end": "3088880"
  },
  {
    "text": "that you're using uh within this payload so you have no clue",
    "start": "3088880",
    "end": "3094160"
  },
  {
    "text": "uh if you consume a rest request uh what data your client actually uses from that",
    "start": "3094160",
    "end": "3100000"
  },
  {
    "text": "rest request okay with this I'm done i hope um you",
    "start": "3100000",
    "end": "3106559"
  },
  {
    "text": "learned something and if you want to learn more",
    "start": "3106559",
    "end": "3111760"
  },
  {
    "text": "uh you can go to learn.chillcream.com chili cream.com and uh get lots more information uh around all the tool set",
    "start": "3111760",
    "end": "3118480"
  },
  {
    "text": "that we have uh like the hot chocolate server is all open source uh and you can",
    "start": "3118480",
    "end": "3124480"
  },
  {
    "text": "just use it MIT and with this I'm done if you have questions just uh shoot",
    "start": "3124480",
    "end": "3131700"
  },
  {
    "text": "[Applause]",
    "start": "3131700",
    "end": "3140510"
  }
]