[
  {
    "text": "all right in his best-selling 2014 book homo sapians Yuval Noir Harari discusses",
    "start": "2560",
    "end": "11040"
  },
  {
    "text": "a history of humankind and one of the most important ideas at the core of this",
    "start": "11040",
    "end": "16278"
  },
  {
    "text": "book is the importance of words the importance of stories words and stories",
    "start": "16279",
    "end": "21920"
  },
  {
    "text": "and language are the master key that unlocked our potential as human beings",
    "start": "21920",
    "end": "27400"
  },
  {
    "text": "whether it's your religion your nationality or the company that you work for and the vision that that company has",
    "start": "27400",
    "end": "34960"
  },
  {
    "text": "our ability to communicate an idea to get people behind an idea is fundamental",
    "start": "34960",
    "end": "40600"
  },
  {
    "text": "to what has made us so successful now I can see some of your furri asly checking the agenda thinking",
    "start": "40600",
    "end": "46280"
  },
  {
    "text": "this was going to be a talk about event of an architecture why are we talking about a history of",
    "start": "46280",
    "end": "51640"
  },
  {
    "text": "humankind but there's a link here and that link is that event Ren architecture is fundamentally a communication pattern",
    "start": "51640",
    "end": "60239"
  },
  {
    "text": "it's a way of modeling Integrations between systems whether that be the technical communication between two",
    "start": "60239",
    "end": "66760"
  },
  {
    "text": "services or the human communication when it is your talking about what it is that",
    "start": "66760",
    "end": "72000"
  },
  {
    "text": "your system does and that's what you're going to learn about in this talk you're going to learn some of the secrets of",
    "start": "72000",
    "end": "77320"
  },
  {
    "text": "event div architecture some basic concepts through to some more advanced",
    "start": "77320",
    "end": "82520"
  },
  {
    "text": "patterns that you can use and take away I'm James East I'm a serverless",
    "start": "82520",
    "end": "88000"
  },
  {
    "text": "developer Advocate at data dog and I want to start off just by saying this is not going to be a talk about a specific",
    "start": "88000",
    "end": "93560"
  },
  {
    "text": "programming language a specific technology a specific messaging provider this is a really simple talk that's",
    "start": "93560",
    "end": "99960"
  },
  {
    "text": "simply about boxes and lines yeah it's one of those kind of talks and I",
    "start": "99960",
    "end": "105200"
  },
  {
    "text": "actually want to start at Copenhagen being very very honest with you all as we get started I've built Event Systems",
    "start": "105200",
    "end": "111439"
  },
  {
    "text": "in the past I've built small systems big systems good systems I've built an awful lot more bad systems systems that have",
    "start": "111439",
    "end": "119119"
  },
  {
    "text": "failed really really badly and how many of you have ever done something or built something that has failed don't worry",
    "start": "119119",
    "end": "124600"
  },
  {
    "text": "it's a safe space okay those of you with your hands down can you come and find me afterwards I want to know what the heck it is that",
    "start": "124600",
    "end": "129959"
  },
  {
    "text": "you're building and that's a really odd way to start a talk right talking about",
    "start": "129959",
    "end": "135040"
  },
  {
    "text": "failures but I'm sure all of you who built something that failed you learned so much more in that failure than you",
    "start": "135040",
    "end": "142080"
  },
  {
    "text": "did when you built and deployed the thing that just worked so that's what I want to try and share with you some of the pitfalls some",
    "start": "142080",
    "end": "149040"
  },
  {
    "text": "of the problems I've encountered and there's something I love talking about almost as much as serous and event of an",
    "start": "149040",
    "end": "156760"
  },
  {
    "text": "architecture and that is pizza who here loves pizza by the way just quick show",
    "start": "156760",
    "end": "162159"
  },
  {
    "text": "hands okay those of you with your hands down",
    "start": "162159",
    "end": "167200"
  },
  {
    "text": "what um so for the rest of this talk you're all now going to be Developers for a completely fictional pizza",
    "start": "167200",
    "end": "172879"
  },
  {
    "text": "delivery company called plant-based pizza and this is your architecture today you've already adopted",
    "start": "172879",
    "end": "179000"
  },
  {
    "text": "microservices you've got good reasons for doing that and you've prioritized synchronous",
    "start": "179000",
    "end": "184799"
  },
  {
    "text": "communication so you've got this order processing service right at the core here that's kind of the most fundamental",
    "start": "184799",
    "end": "190400"
  },
  {
    "text": "part if people can't order pizzas then well you're not really a very good pizza restaurant are you but this order",
    "start": "190400",
    "end": "197360"
  },
  {
    "text": "processing service has these really explicit dependencies to all these other services and now you need to go and add",
    "start": "197360",
    "end": "203080"
  },
  {
    "text": "a new loyalty Point service and to do that you need to go and make a change to the order processing service to make all",
    "start": "203080",
    "end": "210319"
  },
  {
    "text": "that work and what you're dealing with here is a form of coupling synchronous",
    "start": "210319",
    "end": "215560"
  },
  {
    "text": "communication gives you more tightly coupled systems and I'm sure some of you will",
    "start": "215560",
    "end": "220840"
  },
  {
    "text": "have heard the general rule of thumb in software development which is that you should aim for law coupling and high",
    "start": "220840",
    "end": "227400"
  },
  {
    "text": "cohesion now cohesion is a relatively straightforward one the idea of cohesion is that things that change together",
    "start": "227400",
    "end": "233079"
  },
  {
    "text": "should live together and you've already kind of got that building microservices architectures because the features the",
    "start": "233079",
    "end": "239400"
  },
  {
    "text": "function ality that are going to change together are deployed as an independent unit but coupling is a slightly more",
    "start": "239400",
    "end": "246439"
  },
  {
    "text": "tricky one coupling is tricky because there's lots of different types of coupling that you might see you've got",
    "start": "246439",
    "end": "253879"
  },
  {
    "text": "technology coupling are you using Java C++ rest grpc",
    "start": "253879",
    "end": "259280"
  },
  {
    "text": "graphql you've got data format semantic coupling how do you handle null values",
    "start": "259280",
    "end": "265160"
  },
  {
    "text": "are you using binary Json protuff what kind of casing are you using for your your property names and then you've got",
    "start": "265160",
    "end": "272080"
  },
  {
    "text": "things like location and runtime and temporal coupling that's primarily what",
    "start": "272080",
    "end": "277360"
  },
  {
    "text": "you're dealing with when you build systems that prioritize synchronous communication at the point your system",
    "start": "277360",
    "end": "283280"
  },
  {
    "text": "is running it needs to know the location of all the other services it needs to talk to at that moment in",
    "start": "283280",
    "end": "291759"
  },
  {
    "text": "time and coupling isn't all bad because if you built systems that were completely decoupled well it'd be really",
    "start": "291759",
    "end": "298039"
  },
  {
    "text": "hard to get any meaningful work done and there's an appropriate level of coupling to aim for and that level",
    "start": "298039",
    "end": "305240"
  },
  {
    "text": "depends on the amount of control you have over the endpoints I love this",
    "start": "305240",
    "end": "310280"
  },
  {
    "text": "quote from Gregor if you're not familiar with Gregor's work he wrote Enterprise Integration patterns which is a really fantastic book about some of these",
    "start": "310280",
    "end": "317120"
  },
  {
    "text": "Concepts and what I think Gregor means by this quote is that if you're working on a team that maybe owns three",
    "start": "317120",
    "end": "322759"
  },
  {
    "text": "different Services coupling them Services together more tightly isn't necessarily a bad",
    "start": "322759",
    "end": "328080"
  },
  {
    "text": "thing because you you control the backlog you control the slas you control",
    "start": "328080",
    "end": "333360"
  },
  {
    "text": "the on call you control all of that stuff and it's okay but once you start integrating with something outside of",
    "start": "333360",
    "end": "339800"
  },
  {
    "text": "your control whether that be a third party API or maybe another service",
    "start": "339800",
    "end": "345160"
  },
  {
    "text": "inside your organization you want to look to reduce that coupling as much as",
    "start": "345160",
    "end": "352000"
  },
  {
    "text": "possible so if it's coupling that we're dealing with coupling is the challenge that we're trying to solve for why does",
    "start": "352000",
    "end": "357639"
  },
  {
    "text": "it actually help to be event driven so let's come let's come back to this this use case that you've got you",
    "start": "357639",
    "end": "363680"
  },
  {
    "text": "need to add this new loyalty Point service and to add that loyalty Point service at the moment you need to go and",
    "start": "363680",
    "end": "369599"
  },
  {
    "text": "make a change to the order processing service so you might go off you might build your loyalty Point service it's fantastic you deploy it and then you're",
    "start": "369599",
    "end": "376240"
  },
  {
    "text": "stuck in the backlog of the order processing service waiting for them to call your",
    "start": "376240",
    "end": "381680"
  },
  {
    "text": "service and when you think about that think about that point of integration is it really right should the order",
    "start": "381680",
    "end": "387919"
  },
  {
    "text": "processing service even Cur about the fact that people are collecting loyalty points now I would argue no because it's",
    "start": "387919",
    "end": "395280"
  },
  {
    "text": "not its responsibility but there's another challenge here as well if you're",
    "start": "395280",
    "end": "400720"
  },
  {
    "text": "prioritizing this synchronous communication that needs this runtime this temporal this location coupling a",
    "start": "400720",
    "end": "406720"
  },
  {
    "text": "failure in one of your services and this might be a service that's not on the critical path of your application if",
    "start": "406720",
    "end": "412960"
  },
  {
    "text": "people can't collect loyalty points I'm sure they won't mind as long as they still get the pizza that they ordered in the first place but having this",
    "start": "412960",
    "end": "420000"
  },
  {
    "text": "synchronous communication can have the knock on effect of causing maybe more critical systems to go down these",
    "start": "420000",
    "end": "426639"
  },
  {
    "text": "cascading failures across multiple services so this is another challenge that you have to deal with and this is",
    "start": "426639",
    "end": "432400"
  },
  {
    "text": "your responsibility as a developer of the audit processing service to care about the constraints of a system that",
    "start": "432400",
    "end": "438479"
  },
  {
    "text": "you don't even control I realize I'm massively oversimplifying that I realize there are",
    "start": "438479",
    "end": "444160"
  },
  {
    "text": "ways to build synchronous microservices that deal with some of these challenges circuit breakers exponential back off",
    "start": "444160",
    "end": "450560"
  },
  {
    "text": "proper er error handling but that means that's your responsibility for the constraints of a",
    "start": "450560",
    "end": "457120"
  },
  {
    "text": "system you don't control and this is where event of architecture can help you so before we",
    "start": "457120",
    "end": "462639"
  },
  {
    "text": "get into the Practical stuff let's just get some level set on some of these terms what does it actually mean to be",
    "start": "462639",
    "end": "467960"
  },
  {
    "text": "event driven and one of the best definitions I've found for this is taken from on a",
    "start": "467960",
    "end": "473360"
  },
  {
    "text": "marting fowers talks um about event driven architecture and at its core an event driven system simply rever reveres",
    "start": "473360",
    "end": "480039"
  },
  {
    "text": "the lines of dependency it reverses these lines of integration so instead of your order",
    "start": "480039",
    "end": "485720"
  },
  {
    "text": "processing service needing to know about the loow point service or the kitchen service instead all these services are",
    "start": "485720",
    "end": "491919"
  },
  {
    "text": "simply reacting to events that the order processing service is publishing so you",
    "start": "491919",
    "end": "497199"
  },
  {
    "text": "flipped that line of dependency around so if that is what it means to be",
    "start": "497199",
    "end": "503120"
  },
  {
    "text": "a vent of and at its core what actually is an event an event is an immutable fact it",
    "start": "503120",
    "end": "512320"
  },
  {
    "text": "something that has happened in the past it's something that cannot be changed so I want you to imagine it's the middle of",
    "start": "512320",
    "end": "518159"
  },
  {
    "text": "winter here in Copenhagen I imagine it's quite dark all the time if it's anything like the UK and you get up and you're in",
    "start": "518159",
    "end": "523479"
  },
  {
    "text": "your house and you need to do something meaningful in your house and you want to get from one side of a room to the other",
    "start": "523479",
    "end": "528680"
  },
  {
    "text": "and there's plugs and there's Lego bricks and there's all this kind of stuff lying around and of course you don't want to stand on any of that stuff",
    "start": "528680",
    "end": "534959"
  },
  {
    "text": "because that's going to really hurt so you're going to go over to the light switch and you're going to hit the light switch",
    "start": "534959",
    "end": "540600"
  },
  {
    "text": "that's going to raise a light switched on event it is irrefutable that the",
    "start": "540600",
    "end": "545760"
  },
  {
    "text": "light switched on you can't un switched on a light that has happened it's",
    "start": "545760",
    "end": "551120"
  },
  {
    "text": "on once you're done doing what you need to do then you're going to hit that light switched again that's going to raise a light Switched Off event then",
    "start": "551120",
    "end": "558720"
  },
  {
    "text": "you're back to dodging Lego bricks on the floor the light switched on the light Switched Off it is irrefutable",
    "start": "558720",
    "end": "564640"
  },
  {
    "text": "them things have happened so if that's an event what do it mean to be event",
    "start": "564640",
    "end": "571560"
  },
  {
    "text": "driven and I sometimes think this gets a little bit confused with what I'd call an event based system so you've got",
    "start": "571560",
    "end": "578560"
  },
  {
    "text": "event driven systems you've got event based systems and there's a really important distinction between the two an event driven system drives",
    "start": "578560",
    "end": "587279"
  },
  {
    "text": "business functionality using business events we've been using events in",
    "start": "587279",
    "end": "593000"
  },
  {
    "text": "systems for years I started out building windows forms applications in net things",
    "start": "593000",
    "end": "598240"
  },
  {
    "text": "happened when buttons were clicked when windows were resized when your mouse",
    "start": "598240",
    "end": "603279"
  },
  {
    "text": "hovered these are all events but that's what I'd call an event-based systems these are technical",
    "start": "603279",
    "end": "610120"
  },
  {
    "text": "events not business events business events are things like these order boxed",
    "start": "610120",
    "end": "616760"
  },
  {
    "text": "order completed staff member clocked in you could look at two systems in the",
    "start": "616760",
    "end": "623000"
  },
  {
    "text": "exact same domain for two different companies and they would probably have a completely different set of events",
    "start": "623000",
    "end": "630279"
  },
  {
    "text": "but they're probably going to have things that are similar buttons are going to be clicked files are going to",
    "start": "630279",
    "end": "635519"
  },
  {
    "text": "be uploaded to cloud storage so this is a really important distinction to make",
    "start": "635519",
    "end": "640880"
  },
  {
    "text": "it's important because an event Ren architecture lets you tell the story of your business through its technical",
    "start": "640880",
    "end": "647560"
  },
  {
    "text": "implementation the language of your business comes into the software",
    "start": "647560",
    "end": "653560"
  },
  {
    "text": "itself so something else you'll often hear about event of an architecture is that events are first class CL citizens",
    "start": "653560",
    "end": "660480"
  },
  {
    "text": "in your system that sounds a little bit buzzwordy doesn't it first class",
    "start": "660480",
    "end": "666279"
  },
  {
    "text": "citizens what does that even mean so how many of you are familiar with the idea of API first design heard the term",
    "start": "666279",
    "end": "673639"
  },
  {
    "text": "before okay about half you cool if you're not familiar the idea of API first design is that the first thing you",
    "start": "673639",
    "end": "679120"
  },
  {
    "text": "do before you write a single line of code is to design the API imagine you've",
    "start": "679120",
    "end": "684440"
  },
  {
    "text": "got a front end team and a back end team you want to do something together you're going to design that API first both",
    "start": "684440",
    "end": "690519"
  },
  {
    "text": "teams can go off work independently work asynchronously and then you bring it all back together at the",
    "start": "690519",
    "end": "695800"
  },
  {
    "text": "end and in an event driven system your events are your API so making Events",
    "start": "695800",
    "end": "702160"
  },
  {
    "text": "first class citizens means that you practice event first design the first thing you're going",
    "start": "702160",
    "end": "708279"
  },
  {
    "text": "going to do when you start building an event different system is actually design your events work out what your",
    "start": "708279",
    "end": "713839"
  },
  {
    "text": "events actually are and some of you might be thinking now you've heard the term events you've",
    "start": "713839",
    "end": "719320"
  },
  {
    "text": "also heard the term messages what's the difference do I use events or do I use",
    "start": "719320",
    "end": "725600"
  },
  {
    "text": "messages when actually events are messages events are a type of message",
    "start": "725600",
    "end": "733680"
  },
  {
    "text": "and typically there's three different types of messages you will see in a system you'll see commands you'll see",
    "start": "733680",
    "end": "739240"
  },
  {
    "text": "events you'll see queries Now commands and events are very similar the",
    "start": "739240",
    "end": "744480"
  },
  {
    "text": "difference between a command and an event is mostly just a statement of intent am I telling a system to do",
    "start": "744480",
    "end": "751279"
  },
  {
    "text": "something which would be a command or am I telling a system that something has",
    "start": "751279",
    "end": "756680"
  },
  {
    "text": "happened in my system that will be an event and someone else can react to it and then of course queries are nice and",
    "start": "756680",
    "end": "762800"
  },
  {
    "text": "easy queries is just me asking for a specific piece of data getting some information from",
    "start": "762800",
    "end": "768199"
  },
  {
    "text": "somewhere so at this top level you've got messages you've got events commands and queries inside events you've got a",
    "start": "768199",
    "end": "775000"
  },
  {
    "text": "few different types of events events aren't just these Rand pieces of Json",
    "start": "775000",
    "end": "780320"
  },
  {
    "text": "data that you just start publishing and don't really think about there's different types of events the first of which is a",
    "start": "780320",
    "end": "787360"
  },
  {
    "text": "notification event sometimes known as a thin event a really small really simple",
    "start": "787360",
    "end": "793199"
  },
  {
    "text": "packet of data that simply just notifies another system that something has",
    "start": "793199",
    "end": "798920"
  },
  {
    "text": "happened and this is where you start with your implementation at the pizza",
    "start": "798920",
    "end": "805040"
  },
  {
    "text": "restaurant you start with this point of integration here between the order service and the kitchen service you think we're going to take that",
    "start": "805040",
    "end": "810600"
  },
  {
    "text": "synchronous bit of communication and we're going to make that event so your order service starts publishing this",
    "start": "810600",
    "end": "816000"
  },
  {
    "text": "order confirmed event and your kitchen service consumes that event nice and simple right the kitchen service",
    "start": "816000",
    "end": "822519"
  },
  {
    "text": "consumes the event it has a look at the event and the event only contains an",
    "start": "822519",
    "end": "827720"
  },
  {
    "text": "order ID that's it this is a notification event it's really thin remember so what does the kitchen",
    "start": "827720",
    "end": "834079"
  },
  {
    "text": "service do how does the kitchen service know what exactly it needs to put on this order so it thinks well I could",
    "start": "834079",
    "end": "840000"
  },
  {
    "text": "just make a call back I can just make a call back to my order processing service to get more information about the order",
    "start": "840000",
    "end": "848000"
  },
  {
    "text": "yay we event driven woohoo but actually this isn't really any better off is it because we had a",
    "start": "848000",
    "end": "853800"
  },
  {
    "text": "synchronous line of communication going from order service to Kitchen service and we've still got that it's just now",
    "start": "853800",
    "end": "860079"
  },
  {
    "text": "the other way around so we're not really any better off doing this there's another challenge here though now that you're publishing these events you open",
    "start": "860079",
    "end": "867600"
  },
  {
    "text": "up the potential for other services to access them so maybe one other service starts accessing this event starts",
    "start": "867600",
    "end": "873480"
  },
  {
    "text": "making a call back and then three more services do and then another service then a couple more services and then",
    "start": "873480",
    "end": "879959"
  },
  {
    "text": "suddenly before you know it everything's on fire because all these services that you didn't even know about are all calling back to your system and",
    "start": "879959",
    "end": "886399"
  },
  {
    "text": "overloading your system one of the common things you'll hear in event and systems is that",
    "start": "886399",
    "end": "892680"
  },
  {
    "text": "services are unaware of the downstream consumers of their events and whilst",
    "start": "892680",
    "end": "898440"
  },
  {
    "text": "this is Tech technically true you probably should C about what Downstream systems might do with the",
    "start": "898440",
    "end": "905160"
  },
  {
    "text": "event that they receive so how do we solve for this how do we get around this challenge of",
    "start": "905160",
    "end": "910360"
  },
  {
    "text": "needing call backs needing systems to call back and get more information which leads us nicely on to",
    "start": "910360",
    "end": "916240"
  },
  {
    "text": "a second type of events that you'll commonly see which is the idea of event carried State transfer otherwise",
    "start": "916240",
    "end": "922839"
  },
  {
    "text": "sometimes known as a thicker event or a fat event so if we take that order confirmed event this is what it looked like just",
    "start": "922839",
    "end": "929079"
  },
  {
    "text": "an order ID and this is what meant we needed to make the call back this same event as a thicker event would look",
    "start": "929079",
    "end": "934560"
  },
  {
    "text": "something like this you'll notice now the state of the order is being carried as part of the",
    "start": "934560",
    "end": "942800"
  },
  {
    "text": "event so now as a developer of the kitchen service you're happy now because you received this order confirmed event and you're like excellent we've got all",
    "start": "942800",
    "end": "949120"
  },
  {
    "text": "the order items we know exactly what we need to cook we no longer need that call",
    "start": "949120",
    "end": "954560"
  },
  {
    "text": "back which makes it sound obvious right clearly the right answer here is always",
    "start": "954560",
    "end": "959839"
  },
  {
    "text": "to use thicker events that's so fast because let's look at why that can",
    "start": "959839",
    "end": "966680"
  },
  {
    "text": "be a problem in an advent system there's typically three key components you've got some kind of producer or a publisher",
    "start": "966680",
    "end": "973199"
  },
  {
    "text": "you've got some kind of consumer or a subscriber and then you've got some kind of transport mechanism in the middle",
    "start": "973199",
    "end": "979279"
  },
  {
    "text": "that might be an event bus it might be a queue it might be a topic it might be a stream there's just something in the",
    "start": "979279",
    "end": "984839"
  },
  {
    "text": "middle that's transporting these events from place to place and you'll IM immediately noticed that the producer",
    "start": "984839",
    "end": "990279"
  },
  {
    "text": "and the consumer here have no idea that each other exist there's no line between them directly they don't this almost",
    "start": "990279",
    "end": "997399"
  },
  {
    "text": "immediately removes that runtime that temporal that location coupling which is",
    "start": "997399",
    "end": "1002720"
  },
  {
    "text": "good the primary integration pattern at play here is the publish subscribe integration pattern a producer publishes",
    "start": "1002720",
    "end": "1010160"
  },
  {
    "text": "an event an N number of systems can then go off and can subscribe to that event and the responsibilities of a",
    "start": "1010160",
    "end": "1017680"
  },
  {
    "text": "producer and a consumer get really interesting as a producer your responsibility is to stick to that",
    "start": "1017680",
    "end": "1024240"
  },
  {
    "text": "schema you agreed on you agreed on what an event is going to look like and you agree to try to stick to that and not",
    "start": "1024240",
    "end": "1030600"
  },
  {
    "text": "make breaking changes wherever possible where it gets interesting though is the things that you're no",
    "start": "1030600",
    "end": "1036319"
  },
  {
    "text": "longer responsible for as a producer you are not responsible for what happens to your event after it gets",
    "start": "1036319",
    "end": "1043959"
  },
  {
    "text": "published when compared to synchronous communication you also now not concerned with the constraints of the system",
    "start": "1043959",
    "end": "1050919"
  },
  {
    "text": "that's Downstream of you if you think about building a synchronous communication you're making a rest API call you need to Cur about what rate",
    "start": "1050919",
    "end": "1057960"
  },
  {
    "text": "limit can that system support how do you secure what API keys do you need is it up is it down is it fast is it slow you",
    "start": "1057960",
    "end": "1065000"
  },
  {
    "text": "need to think about all them things as a developer with an aventor system these things aren't your responsibility",
    "start": "1065000",
    "end": "1070919"
  },
  {
    "text": "anymore if you want to publish one one event a second 10 events a second 100 events a second that's fine so that's a",
    "start": "1070919",
    "end": "1078360"
  },
  {
    "text": "really interesting benefit as a producer now as a consumer you just need to plan and",
    "start": "1078360",
    "end": "1084200"
  },
  {
    "text": "control the ingestion rate because remember these producers now they don't care how many events they're publishing",
    "start": "1084200",
    "end": "1089280"
  },
  {
    "text": "so you need to plan for that you need to control and plan for your own ingestion rate and one thing I would always",
    "start": "1089280",
    "end": "1095120"
  },
  {
    "text": "recommend you to do in an event Ren system is to subscribe something else to",
    "start": "1095120",
    "end": "1100919"
  },
  {
    "text": "that bus don't subscribe your application Cod directly to the bus or the message Channel where these events",
    "start": "1100919",
    "end": "1107400"
  },
  {
    "text": "are being published to put some kind of intermediary in the middle typically a q",
    "start": "1107400",
    "end": "1112840"
  },
  {
    "text": "so what's going to happen here is the event the producer is going to produce an event the event's going to hit the event bus and then it's going to filter",
    "start": "1112840",
    "end": "1118840"
  },
  {
    "text": "through into a queue a queue that you control you're going to then hook your",
    "start": "1118840",
    "end": "1123880"
  },
  {
    "text": "application code up to that que which means you can control an ingestion rate that suits you if you can only handle",
    "start": "1123880",
    "end": "1130799"
  },
  {
    "text": "one message a second that's absolutely fine your que might start to get really really big but at least you're not",
    "start": "1130799",
    "end": "1135960"
  },
  {
    "text": "dropping losing messages your systems aren't failing and falling off over there's another really subtle",
    "start": "1135960",
    "end": "1142360"
  },
  {
    "text": "benefit of event Ren systems how many of you have ever tried to build something and you thought the",
    "start": "1142360",
    "end": "1148360"
  },
  {
    "text": "product manager wanted X and actually they wanted 96,2",
    "start": "1148360",
    "end": "1153559"
  },
  {
    "text": "42 still a safe space you can still admit if you built the wrong thing that's okay communication is really really",
    "start": "1153559",
    "end": "1160960"
  },
  {
    "text": "difficult language is so important as we learned at the start now that you've got these events",
    "start": "1160960",
    "end": "1166080"
  },
  {
    "text": "these business events flying around you can start to have really sensible conversations with people instead of",
    "start": "1166080",
    "end": "1172919"
  },
  {
    "text": "talking about rest apis and microservices you're now talking about what should happen after an order is",
    "start": "1172919",
    "end": "1180679"
  },
  {
    "text": "placed what should happen after an order is cancelled you can have these conversations using a language that",
    "start": "1180679",
    "end": "1187280"
  },
  {
    "text": "everyone understands because remember event Ren architecture is fundamentally a communication pattern it's a way of",
    "start": "1187280",
    "end": "1194240"
  },
  {
    "text": "modeling Integrations between systems",
    "start": "1194240",
    "end": "1199520"
  },
  {
    "text": "so let's actually start to make this more event Ren now let's actually take this core order processing floor we'll",
    "start": "1202559",
    "end": "1209039"
  },
  {
    "text": "move it from a synchronous um based system to a more asynchronous one and this is what the floor looks like today",
    "start": "1209039",
    "end": "1215640"
  },
  {
    "text": "an order comes into the order API the order API makes that synchronous call to the kitchen the kitchen's going to go",
    "start": "1215640",
    "end": "1221919"
  },
  {
    "text": "off it's going to create the order once it's done it's going to make a call back order processing Services yep I know",
    "start": "1221919",
    "end": "1227120"
  },
  {
    "text": "this order is ready now I know this order needs to be delivered make a call to the delivery service delivery service",
    "start": "1227120",
    "end": "1232400"
  },
  {
    "text": "delivers the order call comes back that's been delivered finally call goes out to the new loyalty Point service",
    "start": "1232400",
    "end": "1238640"
  },
  {
    "text": "loyalty Point service response and even in this relatively simple architecture you've still got six",
    "start": "1238640",
    "end": "1243919"
  },
  {
    "text": "lines of synchronous communication there six things that are runtime coupled that are temporally coupled that need to",
    "start": "1243919",
    "end": "1250679"
  },
  {
    "text": "exist for this system to work so let's actually go about and make this event now and if you're in this",
    "start": "1250679",
    "end": "1256320"
  },
  {
    "text": "situation today where you've got all these synchronous calls the first question you might be asking yourself is how do I actually understand the events",
    "start": "1256320",
    "end": "1263760"
  },
  {
    "text": "in my system how do I know what these business events are and to put this same image back on",
    "start": "1263760",
    "end": "1270400"
  },
  {
    "text": "screen again there's something in this image that is kind of useful a technique and that is the idea of event",
    "start": "1270400",
    "end": "1277600"
  },
  {
    "text": "storming who's heard of event storming who's actually done event storming just keep your hands up okay quite a few you",
    "start": "1277600",
    "end": "1284120"
  },
  {
    "text": "awesome so the idea of event storming is you if you're not familiar it was popularized by a guy called Alberto",
    "start": "1284120",
    "end": "1289240"
  },
  {
    "text": "brandolini and quoting directly from the website it is the smartest approach to",
    "start": "1289240",
    "end": "1294760"
  },
  {
    "text": "collaboration Beyond cord boundaries and the website lists quite a",
    "start": "1294760",
    "end": "1300760"
  },
  {
    "text": "few different scenarios where where event storming is really useful one of which being to design clean and",
    "start": "1300760",
    "end": "1306320"
  },
  {
    "text": "maintainable event driven software to support rapidly evolving",
    "start": "1306320",
    "end": "1311640"
  },
  {
    "text": "businesses sounds nice for us right and I do want to point out at this point these two things don't have to be",
    "start": "1311640",
    "end": "1317919"
  },
  {
    "text": "together you can build an event D system without doing event storming and event",
    "start": "1317919",
    "end": "1323080"
  },
  {
    "text": "storming is still very very useful even if you're not building an event Ren system so these two things are exclusive",
    "start": "1323080",
    "end": "1329640"
  },
  {
    "text": "however they do work really well together because we're talking about",
    "start": "1329640",
    "end": "1334679"
  },
  {
    "text": "events so this isn't going to be a deep dive on event storming but just really quickly how this would actually work",
    "start": "1334679",
    "end": "1339720"
  },
  {
    "text": "you'd get everybody in a room together technical people non-technical people business people domain experts all of",
    "start": "1339720",
    "end": "1345880"
  },
  {
    "text": "you in the room together and this is not a technical session I can guarantee you every time",
    "start": "1345880",
    "end": "1352640"
  },
  {
    "text": "you do an event storming Workshop there will be two developers in the corner talking about how best to implement this",
    "start": "1352640",
    "end": "1357799"
  },
  {
    "text": "with kubernetes the answer to that question is of course always don't just",
    "start": "1357799",
    "end": "1363080"
  },
  {
    "text": "kidding and but this is this is not a technical discussion this is all about the business this is about understanding",
    "start": "1363080",
    "end": "1368600"
  },
  {
    "text": "this shared language so everyone's in the room you're all putting postic notes on the wall to indicate all of the",
    "start": "1368600",
    "end": "1374559"
  },
  {
    "text": "events that happen in the system and then going to organize these events by",
    "start": "1374559",
    "end": "1380720"
  },
  {
    "text": "time so then you know end to end what events should happen in roughly what",
    "start": "1380720",
    "end": "1386400"
  },
  {
    "text": "order so now you've got this shared language for all the things that happen and then you're going to add more posit notes for the commands that are going to",
    "start": "1386400",
    "end": "1393480"
  },
  {
    "text": "trigger these events again shared language and for the queries that are",
    "start": "1393480",
    "end": "1398760"
  },
  {
    "text": "needed for um them commands to to happen What views the people need to work with and there's a bit more to it than that",
    "start": "1398760",
    "end": "1404120"
  },
  {
    "text": "but what you'll commonly end up with is a set of things that look like this you've got a query if you imagine you're",
    "start": "1404120",
    "end": "1410240"
  },
  {
    "text": "on a mobile app on your phone trying to order a pizza the first thing you're going to do is you're going to list all of the pizzas that are available to buy",
    "start": "1410240",
    "end": "1417960"
  },
  {
    "text": "then you're going to add one of these pizzas to your basket a command and then off the back of that there's going to be a vent that gets triggered the pizza",
    "start": "1417960",
    "end": "1425000"
  },
  {
    "text": "added to order event and you're typically going end up with this repeated over and over again",
    "start": "1425000",
    "end": "1430240"
  },
  {
    "text": "query command event query command event not in all cases but in most cases and",
    "start": "1430240",
    "end": "1435360"
  },
  {
    "text": "the benefit of this again is to get that shared language so now everybody in the business knows",
    "start": "1435360",
    "end": "1441200"
  },
  {
    "text": "exactly what the right language is to get the system working in the way it",
    "start": "1441200",
    "end": "1446400"
  },
  {
    "text": "should so one of the things you'll commonly hear about event of an architecture and it was even in that quote from the event storming website to",
    "start": "1446400",
    "end": "1453559"
  },
  {
    "text": "build rapidly evolving systems evolvability is a core benefit",
    "start": "1453559",
    "end": "1459440"
  },
  {
    "text": "of event of an architecture right you've got these events that are just flying around and any service at any time can",
    "start": "1459440",
    "end": "1465440"
  },
  {
    "text": "just hook into this stream of events which sounds incredibly evolvable right you can add new features add new",
    "start": "1465440",
    "end": "1471799"
  },
  {
    "text": "functionality without touching a single other part of your architecture and let's actually think",
    "start": "1471799",
    "end": "1477919"
  },
  {
    "text": "that through now let's come back to this same order confirmed event this thicker event and remember you introduce that thicker event to get around that issue",
    "start": "1477919",
    "end": "1484480"
  },
  {
    "text": "of needing a call back and because you're all doing such a fantastic job building this system and",
    "start": "1484480",
    "end": "1490000"
  },
  {
    "text": "it's scaling and it's resilient you now need to go Global pizza restaurants are opening all over the world you now need",
    "start": "1490000",
    "end": "1496440"
  },
  {
    "text": "to start supporting multiple career CES because that value field that's just a decimal isn't all that useful what",
    "start": "1496440",
    "end": "1503520"
  },
  {
    "text": "currency is that that in so you think well we did that event storming thing it's only the kitchen service that",
    "start": "1503520",
    "end": "1509279"
  },
  {
    "text": "actually curs about this order confirmed event the kitchen truly doesn't Cur about the value I'm just going to make",
    "start": "1509279",
    "end": "1514600"
  },
  {
    "text": "this change to my event I'm going to change that order value from being a decimal to being an object an object",
    "start": "1514600",
    "end": "1521640"
  },
  {
    "text": "that has a currency and a value anyone see a problem with us doing that okay a",
    "start": "1521640",
    "end": "1526960"
  },
  {
    "text": "few hands because although the kitchen service doesn't care they've just carry",
    "start": "1526960",
    "end": "1532279"
  },
  {
    "text": "on working with the items at this point you get an incredibly angry phone call that angry phone call is from the",
    "start": "1532279",
    "end": "1538279"
  },
  {
    "text": "analytics service who knew there was an analytic service there is now because you've got this evolvable system you can",
    "start": "1538279",
    "end": "1543760"
  },
  {
    "text": "add new services at any time remember and the analytics service well they really really cared about that order",
    "start": "1543760",
    "end": "1549960"
  },
  {
    "text": "value because they're going to use that which doesn't sound particularly evolvable right it's also not a good way",
    "start": "1549960",
    "end": "1555760"
  },
  {
    "text": "of making friends I'll tell you that so what do we do now how do we handle this",
    "start": "1555760",
    "end": "1561399"
  },
  {
    "text": "how can we deal with this scenario and I'm going to put a really horrible word on screen now it's a",
    "start": "1561399",
    "end": "1568159"
  },
  {
    "text": "really really naughty word please don't all get up and leave when I do this sometimes I find this bit of the talk really even difficult myself and that",
    "start": "1568159",
    "end": "1575760"
  },
  {
    "text": "word is governance yeah yeah it's awful Isn't it it makes you feel like",
    "start": "1575760",
    "end": "1581000"
  },
  {
    "text": "bureaucratic and red tape and change approval boards and all that kind of stuff but it's something that's really",
    "start": "1581000",
    "end": "1587080"
  },
  {
    "text": "important to get right when you building Event Systems that use these thicker",
    "start": "1587080",
    "end": "1592159"
  },
  {
    "text": "events and governance doesn't need to be painful that's a weird sentence isn't it I never thought I'd say that there's",
    "start": "1592159",
    "end": "1599240"
  },
  {
    "text": "things you can do to make this easier and you can use a process that some of you have probably already familiar with",
    "start": "1599240",
    "end": "1605440"
  },
  {
    "text": "that's the idea of a request for comment or an RFC who's familiar with the RFC process broadly what it does okay cool",
    "start": "1605440",
    "end": "1612440"
  },
  {
    "text": "quite common in open source software with an RFC before you make a change to a system you're first going to write a",
    "start": "1612440",
    "end": "1618360"
  },
  {
    "text": "RFC about the proposed change that you're going to make and that then gives",
    "start": "1618360",
    "end": "1624080"
  },
  {
    "text": "other systems other teams the ability to comment on the change you're thinking of making so the kitchen service would see",
    "start": "1624080",
    "end": "1629960"
  },
  {
    "text": "this and they'd be like yeah that's fine don't worry change that value if you want the analytic service are going to see it and they're going to say oh oh",
    "start": "1629960",
    "end": "1636760"
  },
  {
    "text": "please don't do that that's going to be hard that's going to be painful and you can have this conversation so it allows you to keep your teams asynchronous keep",
    "start": "1636760",
    "end": "1643600"
  },
  {
    "text": "your teams working independently while still having an element of collaboration it's",
    "start": "1643600",
    "end": "1648919"
  },
  {
    "text": "useful so that's how you can handle things at a more process level what about at a technical level how can we",
    "start": "1648919",
    "end": "1655120"
  },
  {
    "text": "handle things actually inside our system inside the code that we write and we can actually use this schema the fact that this schema of the",
    "start": "1655120",
    "end": "1662200"
  },
  {
    "text": "events is the Titus form a coupling we can use that to our advantage in some ways you can agree on a consistent",
    "start": "1662200",
    "end": "1669240"
  },
  {
    "text": "schema that every single event across your entire organization is going to have they're all going to have the same",
    "start": "1669240",
    "end": "1675200"
  },
  {
    "text": "scheme and there's actually a specification that exists to describe this this is the cloud",
    "start": "1675200",
    "end": "1681640"
  },
  {
    "text": "events specification it is a defined schema for defining",
    "start": "1681640",
    "end": "1686760"
  },
  {
    "text": "events and to walk through some of the fields that are in here you've got this data property down at the bottom the data property is what's going to contain",
    "start": "1686760",
    "end": "1693159"
  },
  {
    "text": "the actual event payload so although this top level schemer is the same inside the data property you're going to",
    "start": "1693159",
    "end": "1699960"
  },
  {
    "text": "have some very different things you've then got the data content type this is a really useful one because",
    "start": "1699960",
    "end": "1706039"
  },
  {
    "text": "it tells a consumer what kind of data to to expect inside that data property here we're sending Json we say application",
    "start": "1706039",
    "end": "1712679"
  },
  {
    "text": "Json this could be binary it could be XML it could be HTML maybe that'll be weird you've got this expiry time this",
    "start": "1712679",
    "end": "1719799"
  },
  {
    "text": "is an optional field in the specification but I always like to include it because it's a useful one if you are publishing events that might be",
    "start": "1719799",
    "end": "1725919"
  },
  {
    "text": "time sensitive if you publish an order confirmed event are people going to wait",
    "start": "1725919",
    "end": "1731240"
  },
  {
    "text": "a day for their Pizza probably not so you're probably going to put an expiry time in there so that the kitchen",
    "start": "1731240",
    "end": "1736440"
  },
  {
    "text": "doesn't cook an order that's a day old you've got the time this is the time the event was actually published and then",
    "start": "1736440",
    "end": "1743320"
  },
  {
    "text": "you've got the ID this this ID is a uniquely generated identifier generated",
    "start": "1743320",
    "end": "1748480"
  },
  {
    "text": "by the producer and this allows your Downstream consumers to implement things like idem",
    "start": "1748480",
    "end": "1753600"
  },
  {
    "text": "potency they can look at this event and say I've seen event a 1 2 3 4 7 8 n",
    "start": "1753600",
    "end": "1759080"
  },
  {
    "text": "before I can just drop that now I can ignore that and then when it comes to this conversation around evolvability",
    "start": "1759080",
    "end": "1765200"
  },
  {
    "text": "you've got these top two properties here the source and the detail or the type",
    "start": "1765200",
    "end": "1771519"
  },
  {
    "text": "the source is where did this event come from and I always like to include the environment in here as well so this is",
    "start": "1771519",
    "end": "1776600"
  },
  {
    "text": "the production orders system and then you've got the type and the type tells the consumer exactly what",
    "start": "1776600",
    "end": "1783080"
  },
  {
    "text": "this event is it's an order completed event or an order created event and importantly you've got that version",
    "start": "1783080",
    "end": "1789240"
  },
  {
    "text": "number suffixed on the end this is what you can use to build",
    "start": "1789240",
    "end": "1794880"
  },
  {
    "text": "more evolvable systems to evolve your schemas over time because today you might be publishing",
    "start": "1794880",
    "end": "1800600"
  },
  {
    "text": "version one of this event and what you're going to do is when you need to make that breaking change you're going to start publishing",
    "start": "1800600",
    "end": "1806600"
  },
  {
    "text": "two events you're going to publish version one and version two at the same time and it's really important that all",
    "start": "1806600",
    "end": "1813120"
  },
  {
    "text": "the subscribers include the version number in however they subscribe whatever rules they Define however they",
    "start": "1813120",
    "end": "1819159"
  },
  {
    "text": "Define that if they need to include that version number so you're going to publish version two version two is going to be incredibly sad because nobody",
    "start": "1819159",
    "end": "1825000"
  },
  {
    "text": "really cares about it it's just being published and it's just kind of disappearing and you're going to set a depreciation",
    "start": "1825000",
    "end": "1830640"
  },
  {
    "text": "date you're going to set a depreciation date on version one a month from now we're going to stop publishing version",
    "start": "1830640",
    "end": "1836559"
  },
  {
    "text": "one and it's really important that you stick to that date because if you push that date back",
    "start": "1836559",
    "end": "1843360"
  },
  {
    "text": "let it slide let it slide suddenly you're supporting 10 different versions of the same event and this is where this",
    "start": "1843360",
    "end": "1849000"
  },
  {
    "text": "pattern kind of starts to fall down so you need to be really strong on that depreciation date over time everyone's",
    "start": "1849000",
    "end": "1855039"
  },
  {
    "text": "going to migrate over to version two probably do that an hour before you're due to depreciate it at least in my",
    "start": "1855039",
    "end": "1860559"
  },
  {
    "text": "experience that's how teams kind of work but now you've managed to change that over time you've managed to evolve your",
    "start": "1860559",
    "end": "1865799"
  },
  {
    "text": "system you've managed to introduce a breaking change safely so that brings us back to this",
    "start": "1865799",
    "end": "1871559"
  },
  {
    "text": "question doesn't it thick or thin events what's the right one to",
    "start": "1871559",
    "end": "1878200"
  },
  {
    "text": "use and I've gone back and forward on this question so many times you wouldn't believe it so I'm not going to give you a concrete answer here because of course",
    "start": "1878200",
    "end": "1885519"
  },
  {
    "text": "thin events reduce that coupling at the schema level because you're not including data inside the event it does",
    "start": "1885519",
    "end": "1893799"
  },
  {
    "text": "open up the potential for you need to for you to need to make a call back though so then you might think well",
    "start": "1893799",
    "end": "1899880"
  },
  {
    "text": "thicker events surely thicker events are better because then we don't need to make these call backs but then you have more coupling at the schema level so you",
    "start": "1899880",
    "end": "1907159"
  },
  {
    "text": "need to have really good govern there's that word again governance process you need to have good change management you",
    "start": "1907159",
    "end": "1912600"
  },
  {
    "text": "need to have good schema management so there's a lot more things you need to think about with thicker events at least",
    "start": "1912600",
    "end": "1917679"
  },
  {
    "text": "a process level so maybe long live the thin",
    "start": "1917679",
    "end": "1923279"
  },
  {
    "text": "event and actually there's a law in software we love laws in software don't we love these rules of thumb postell's",
    "start": "1923279",
    "end": "1930840"
  },
  {
    "text": "law sometimes known as the robustness principle states that you should be be liberal in what you accept and be",
    "start": "1930840",
    "end": "1937000"
  },
  {
    "text": "conservative in what you send the second part of that is the incredibly important",
    "start": "1937000",
    "end": "1942240"
  },
  {
    "text": "bit be conservative in what you send and if you take that to the extreme",
    "start": "1942240",
    "end": "1948720"
  },
  {
    "text": "obviously you might end up back in this same position again where you're publishing that order completed event and you're only including the order ID",
    "start": "1948720",
    "end": "1955039"
  },
  {
    "text": "but as we found earlier this isn't particularly helpful for",
    "start": "1955039",
    "end": "1960200"
  },
  {
    "text": "consumers so there's something we can take here from one of the core principles of microservices that can",
    "start": "1960200",
    "end": "1965440"
  },
  {
    "text": "help us one of the principles of microservices is that each service should own its own",
    "start": "1965440",
    "end": "1971399"
  },
  {
    "text": "data the order service owns the order data the delivery service owns the delivery",
    "start": "1971399",
    "end": "1976679"
  },
  {
    "text": "data so so this allows us to start introducing patterns where we can publish these thinner",
    "start": "1976679",
    "end": "1982039"
  },
  {
    "text": "events but we can just include multiple identifiers and if you think about this",
    "start": "1982039",
    "end": "1988399"
  },
  {
    "text": "in practice when you're ordering a pizza on your phone you're going to log in that's the first thing you're going to do so inside your web app inside your",
    "start": "1988399",
    "end": "1995080"
  },
  {
    "text": "mobile app somewhere you're going to have a customer ID for the logged in customer and then the first thing you're",
    "start": "1995080",
    "end": "2000840"
  },
  {
    "text": "going to do if you want this order to be delivered is you're going to add a delivery address that delivery address",
    "start": "2000840",
    "end": "2005960"
  },
  {
    "text": "is going to be stored by the delivery service of course they own the delivery data and then when you come come to",
    "start": "2005960",
    "end": "2012039"
  },
  {
    "text": "submit the actual order you can include that customer ID that delivery address",
    "start": "2012039",
    "end": "2017080"
  },
  {
    "text": "ID inside that order that gets submitted and then when you publish that event you've got the data there the delivery",
    "start": "2017080",
    "end": "2022960"
  },
  {
    "text": "service can consume that event and say hey I know what this delivery address is I know where I need to send this order to they can then go off and organize the",
    "start": "2022960",
    "end": "2030399"
  },
  {
    "text": "delivery there's another pattern here which I always like to point out which is called the claim check pattern um",
    "start": "2030399",
    "end": "2035880"
  },
  {
    "text": "coupled with what's called an enricher so the idea of the claim check pattern is simply that when you publish the",
    "start": "2035880",
    "end": "2041480"
  },
  {
    "text": "event you just store all that additional data in some kind of s location on the",
    "start": "2041480",
    "end": "2047320"
  },
  {
    "text": "side that might be a cache that you put a little API in front of that might be something like an S3 bucket but you",
    "start": "2047320",
    "end": "2053320"
  },
  {
    "text": "store that data somewhere else and then you include in the event that you publish the the location of that data so",
    "start": "2053320",
    "end": "2061040"
  },
  {
    "text": "here we've got SL metadata SL an order number and then when when you consume that event as a consumer you can use an",
    "start": "2061040",
    "end": "2067320"
  },
  {
    "text": "enrich to actually reach out to that metadata location pull down that additional data and then you've got this",
    "start": "2067320",
    "end": "2074000"
  },
  {
    "text": "thicker event but you're not actually passing the entire thin event the benefit of doing this is that when that",
    "start": "2074000",
    "end": "2080919"
  },
  {
    "text": "call back comes back in the call back isn't coming back in and affecting that main order processing service it's",
    "start": "2080919",
    "end": "2086919"
  },
  {
    "text": "affecting something else that's on the side again that might be a cash that might be an S3 bucket it might be just something else so you're protecting your",
    "start": "2086919",
    "end": "2094440"
  },
  {
    "text": "system from that call back and whichever way you do this Embrace",
    "start": "2094440",
    "end": "2100359"
  },
  {
    "text": "some kind of structured schema pattern if you're not going to use the cloud event specification there's another",
    "start": "2100359",
    "end": "2105520"
  },
  {
    "text": "pattern called the metadata data pattern where you break your event into a metadata section and a data section just",
    "start": "2105520",
    "end": "2110920"
  },
  {
    "text": "do something that is consistent that's a really hard thing to add retrospectively so do it from the",
    "start": "2110920",
    "end": "2116839"
  },
  {
    "text": "start and something else I've been thinking about a lot recently is this idea of thick in private thin in",
    "start": "2116839",
    "end": "2122560"
  },
  {
    "text": "public if you think about that quote from Gregor earlier the the level of",
    "start": "2122560",
    "end": "2127720"
  },
  {
    "text": "couple in depends on the level of control you have over the end points so if you're building them three services that you consume that you own using",
    "start": "2127720",
    "end": "2135680"
  },
  {
    "text": "thicker events with them services that you own isn't necessarily a bad thing because again you control the release",
    "start": "2135680",
    "end": "2141920"
  },
  {
    "text": "Cycles you control the backlog you control the on call you control all of that stuff but once you start publishing",
    "start": "2141920",
    "end": "2148800"
  },
  {
    "text": "events that are going to be consumed by a service that you don't control these public events you want to try and make",
    "start": "2148800",
    "end": "2155800"
  },
  {
    "text": "them as thin as possible distinguishing between private events and public events is a really important thing to do as you",
    "start": "2155800",
    "end": "2162760"
  },
  {
    "text": "build out an event system so something else you need to do if you build an advent system is to",
    "start": "2162760",
    "end": "2168319"
  },
  {
    "text": "start thinking asynchronous first everything becomes asynchronous and if you're used to making method calls or",
    "start": "2168319",
    "end": "2174640"
  },
  {
    "text": "HTTP requests this can be quite a paradigm shift I know it was for me when I first started doing this and it's a",
    "start": "2174640",
    "end": "2181119"
  },
  {
    "text": "paradigm shift because interesting things can start to happen as the order service you're going to publish your",
    "start": "2181119",
    "end": "2186800"
  },
  {
    "text": "order confirm event and you know because of that event storming thing that you did at some point later you're going to",
    "start": "2186800",
    "end": "2194440"
  },
  {
    "text": "get an order prepared event or an order ready event but you can never guarantee that",
    "start": "2194440",
    "end": "2200720"
  },
  {
    "text": "that event is going to come back frankly you can never guarantee that that order confirmed event is even going to get there in the first place and remember",
    "start": "2200720",
    "end": "2207160"
  },
  {
    "text": "frankly you don't care and this becomes a problem with",
    "start": "2207160",
    "end": "2212960"
  },
  {
    "text": "consistency asynchronous systems te typically gravitate towards more",
    "start": "2212960",
    "end": "2218119"
  },
  {
    "text": "eventually consistent systems and there's two different types of consistency there's eventual consistency",
    "start": "2218119",
    "end": "2223319"
  },
  {
    "text": "and there's strong consistency and to kind of talk you through the difference I want to talk about the payment part of",
    "start": "2223319",
    "end": "2228880"
  },
  {
    "text": "plant-based pizza and I know we're just before lunch here so I'm going to ask you to imagine something now everyone and it's going to be really hard I'm",
    "start": "2228880",
    "end": "2234119"
  },
  {
    "text": "sorry unless you're the ones who don't like pizza then you're going to be okay I want you to imagine you've just walked into a pizza restaurant you've placed",
    "start": "2234119",
    "end": "2239920"
  },
  {
    "text": "your order you've gone in to pick it up you can smell the pizza you can see them all being prepared behind the counter",
    "start": "2239920",
    "end": "2246079"
  },
  {
    "text": "they're being boxed up it's just a wonderful place to be and before you take that pizzza away you need to pay",
    "start": "2246079",
    "end": "2253680"
  },
  {
    "text": "for it don't you and you've got two options when it comes to paying for things the first option you have is to",
    "start": "2253680",
    "end": "2259920"
  },
  {
    "text": "take out your purse take out your wallet take out some croner hand over that Corona they put that in the tail you get",
    "start": "2259920",
    "end": "2265800"
  },
  {
    "text": "your pizza and off you go this is a strongly consistent transaction at the point the transaction",
    "start": "2265800",
    "end": "2271760"
  },
  {
    "text": "happens you can absolutely guarantee that that transaction has happened because the money is no longer with you",
    "start": "2271760",
    "end": "2277319"
  },
  {
    "text": "the money is with the pizza restaurant you get your pizza and you go on your Merry way you've got a second option though",
    "start": "2277319",
    "end": "2283520"
  },
  {
    "text": "don't you a more common option nowadays that's to pay with your credit card so you tap your credit card you",
    "start": "2283520",
    "end": "2290040"
  },
  {
    "text": "take the pizza you walk out you check your bank statement and then you think a it must be free pizza Fridays that's",
    "start": "2290040",
    "end": "2296119"
  },
  {
    "text": "amazing and then a couple of days later you check your bank statement again the pizza's charging you now and of course",
    "start": "2296119",
    "end": "2301280"
  },
  {
    "text": "free pizza Fridays doesn't actually exist great if it did that is an eventually consistent transaction",
    "start": "2301280",
    "end": "2308319"
  },
  {
    "text": "all you're doing when you tap your card is making a theoretical guarantee that at some point in the future that money",
    "start": "2308319",
    "end": "2314920"
  },
  {
    "text": "is going to move it's going to move from their Bank your bank to their bank it's the same with an event system you",
    "start": "2314920",
    "end": "2320800"
  },
  {
    "text": "publish an event and theoretically at some point later you should receive an event back",
    "start": "2320800",
    "end": "2326359"
  },
  {
    "text": "based on the flow of the system and really there's no way around this this is a tradeoff of an event",
    "start": "2326359",
    "end": "2332800"
  },
  {
    "text": "system you need to embrace eventual consistency but this is where you are now you've",
    "start": "2332800",
    "end": "2338960"
  },
  {
    "text": "built out much of this architecture now you've started to build out this event driven system you've got events flying around you've removed all of this",
    "start": "2338960",
    "end": "2344560"
  },
  {
    "text": "synchronous coupling life's wonderful and then Your Business Leaders come along and Your Business Leaders say",
    "start": "2344560",
    "end": "2350400"
  },
  {
    "text": "you know that loyalty Point service that you spent Blood Sweat tears hours years building we're going to get rid of that",
    "start": "2350400",
    "end": "2356599"
  },
  {
    "text": "now we don't want it we're just going to buy a SAS product we're going to buy an off the-shelf product and that",
    "start": "2356599",
    "end": "2361800"
  },
  {
    "text": "off-the-shelf product only supports synchronous calls it only exposes arrest",
    "start": "2361800",
    "end": "2369000"
  },
  {
    "text": "API so how do you manage that because you've got this wonderful event of an asynchronous system then you've got this bit on the side that isn't",
    "start": "2369000",
    "end": "2375640"
  },
  {
    "text": "asynchronous this same pattern can also apply if you're dealing with Legacy systems if you've got a system that you already exist already exists and you",
    "start": "2375640",
    "end": "2382079"
  },
  {
    "text": "need to integrate with that because you want to protect against that system but you don't want to get all rid rid of all",
    "start": "2382079",
    "end": "2388240"
  },
  {
    "text": "this wonderful event drivenness and what I always recommend is that you should keep some kind of",
    "start": "2388240",
    "end": "2394440"
  },
  {
    "text": "loyalty Point service keep some kind of loyalty point service that service is still going to",
    "start": "2394440",
    "end": "2400319"
  },
  {
    "text": "be event driven and that service is going to act as a kind of translation layer it's going to take the events that",
    "start": "2400319",
    "end": "2405560"
  },
  {
    "text": "come in translate them to a HTTP call make the HTTP call and then maybe publish an event back onto the bus based",
    "start": "2405560",
    "end": "2412200"
  },
  {
    "text": "on the the stat of the response but really importantly you've got a queue in the middle you've got",
    "start": "2412200",
    "end": "2417839"
  },
  {
    "text": "some kind of durable storage and that's again to protect yourself against these Downstream",
    "start": "2417839",
    "end": "2423560"
  },
  {
    "text": "systems systems that you don't control maybe your legacy system can only support one request a second okay having",
    "start": "2423560",
    "end": "2430119"
  },
  {
    "text": "this cue allows you to control that having this durability allows you to control that so if you need to integrate",
    "start": "2430119",
    "end": "2435640"
  },
  {
    "text": "an event driven system with one that isn't event driven still having some kind of event driven microservice there is really useful and then that simply",
    "start": "2435640",
    "end": "2442040"
  },
  {
    "text": "acts as a translation layer this can be a really great way to get started for people who aren't familiar with the",
    "start": "2442040",
    "end": "2447280"
  },
  {
    "text": "venten systems because all you're doing is kind of adding this little translation and you've still got a bit of hat dtp knocking around which people",
    "start": "2447280",
    "end": "2453520"
  },
  {
    "text": "are familiar with another topic that's incredibly important in Event Systems there's probably a whole another hour I could",
    "start": "2453520",
    "end": "2459599"
  },
  {
    "text": "talk on about observability in asynchronous systems this is probably its own talk but there's something I",
    "start": "2459599",
    "end": "2464800"
  },
  {
    "text": "wanted to point out really today and that is make sure you include the",
    "start": "2464800",
    "end": "2471000"
  },
  {
    "text": "potential to add distributed tracing to your event driven systems if we come back to that cloud event specification",
    "start": "2471000",
    "end": "2478960"
  },
  {
    "text": "again the specification actually includes a spec for distributed tracing",
    "start": "2480560",
    "end": "2486800"
  },
  {
    "text": "the tra parent property and here I'm using an open Telemetry compatible um Trace contact",
    "start": "2486800",
    "end": "2495119"
  },
  {
    "text": "but it doesn't necessarily need to be that it could simply be a correlation ID it could be some common identifier that",
    "start": "2495119",
    "end": "2501800"
  },
  {
    "text": "you pass from system to system to system that allows you to understand cause and effect cause and effect gets incredibly",
    "start": "2501800",
    "end": "2508520"
  },
  {
    "text": "difficult in Event Systems because you've no longer got this service that makes a call to this service and you can",
    "start": "2508520",
    "end": "2513800"
  },
  {
    "text": "follow all the bites across the network and see that they've talked to each other so really early on think about how you",
    "start": "2513800",
    "end": "2520839"
  },
  {
    "text": "going to observe this system how are you going to understand cause and effect how you going to if your system breaks how",
    "start": "2520839",
    "end": "2526560"
  },
  {
    "text": "are you going to be able to look back upstream and see what might have changed in another",
    "start": "2526560",
    "end": "2531800"
  },
  {
    "text": "system so the other thing I want to talk about is boundaries surely somewhere somehow you're going to need synchronous we've",
    "start": "2531800",
    "end": "2538119"
  },
  {
    "text": "already talked about making synchronous calls out what about synchronous calls coming in maybe you're a mobile app",
    "start": "2538119",
    "end": "2543920"
  },
  {
    "text": "maybe you're a web app that probably doesn't talk event so how do you deal with that and a",
    "start": "2543920",
    "end": "2550520"
  },
  {
    "text": "pattern that I'm quite a big fan of is including these really thin synchronous API layers around the edge of your",
    "start": "2550520",
    "end": "2557599"
  },
  {
    "text": "system so you're going to build this synchronous API and all this API is responsible for is simply validating the",
    "start": "2557599",
    "end": "2564119"
  },
  {
    "text": "request that comes in storing that data in a database and Publishing an event",
    "start": "2564119",
    "end": "2569280"
  },
  {
    "text": "onto the event bus no complex business logic it's just a validation layer all",
    "start": "2569280",
    "end": "2574319"
  },
  {
    "text": "the complex business logic is going to happen asynchronously behind the scenes and if you've ever bought something on",
    "start": "2574319",
    "end": "2579960"
  },
  {
    "text": "Amazon with a card that's expired you'll have seen this in action when you place the order on Amazon you'll have got a",
    "start": "2579960",
    "end": "2586400"
  },
  {
    "text": "thank you for your order screen seconds minutes later you'll get an email into your inbox saying can you please go and",
    "start": "2586400",
    "end": "2592160"
  },
  {
    "text": "update your payment method this is exactly what is happening here you've got the request coming in it's being validated up front to give",
    "start": "2592160",
    "end": "2598640"
  },
  {
    "text": "that user that real-time feedback that the order is valid and then all the actual complex stuff is happening asynchronously behind the",
    "start": "2598640",
    "end": "2606119"
  },
  {
    "text": "scenes now this might make you think if all the work is happening asynchronously in the background how does that help the",
    "start": "2606119",
    "end": "2613280"
  },
  {
    "text": "person like me who orders a pizza and sits there furiously refreshing their phone understanding what the status of my order is because all the work is",
    "start": "2613280",
    "end": "2620480"
  },
  {
    "text": "happening asynchronously now but remember you've still got events that are flying around you've still got",
    "start": "2620480",
    "end": "2625800"
  },
  {
    "text": "the kitchen service publishing that order prepared event and the delivery service might be",
    "start": "2625800",
    "end": "2631280"
  },
  {
    "text": "interested in that because they need to go and deliver the order but the order service can also be",
    "start": "2631280",
    "end": "2636480"
  },
  {
    "text": "interested in that order prepared event the order service can consume that order",
    "start": "2636480",
    "end": "2641680"
  },
  {
    "text": "prepared event and all it's going to do with it is update the status of the order in the database so me sat there",
    "start": "2641680",
    "end": "2647839"
  },
  {
    "text": "furiously refreshing my app can see that the order is being prepared it's going to be on its way",
    "start": "2647839",
    "end": "2655200"
  },
  {
    "text": "soon asynchronous commands can we do commands in an asynchronous",
    "start": "2655200",
    "end": "2661680"
  },
  {
    "text": "way a common thing you need to do in most software systems is to send emails",
    "start": "2661680",
    "end": "2667200"
  },
  {
    "text": "send an email it's quite a common request and you might want to break that email sending functionality out into its",
    "start": "2667200",
    "end": "2673079"
  },
  {
    "text": "own micros service you want to put it behind some kind of abstraction and of course a way you could do that is to use a synchronous",
    "start": "2673079",
    "end": "2679160"
  },
  {
    "text": "API so anyone who wants to send an email makes a synchronous API call to the email service email service goes off and",
    "start": "2679160",
    "end": "2685000"
  },
  {
    "text": "sends the email but in most systems I've worked on sending emails isn't a critical feature",
    "start": "2685000",
    "end": "2691640"
  },
  {
    "text": "of the system if an email doesn't go or an email is delayed that's kind of Okay",
    "start": "2691640",
    "end": "2696720"
  },
  {
    "text": "so here we're back in that same position again where we've got a piece of non-critical functionality that might fail that then might cause a cascading",
    "start": "2696720",
    "end": "2703839"
  },
  {
    "text": "failure and cause my system to fail an email has a reasonably",
    "start": "2703839",
    "end": "2709040"
  },
  {
    "text": "consistent schema doesn't it from two subject body email's been that way for",
    "start": "2709040",
    "end": "2714599"
  },
  {
    "text": "at least as long as I can remember so this is a really good candidate to start making asynchronous",
    "start": "2714599",
    "end": "2719640"
  },
  {
    "text": "to start prioritizing more asynchronous communication it's non-critical it's got a reasonably consistent schema if it",
    "start": "2719640",
    "end": "2725760"
  },
  {
    "text": "doesn't happen for a minute an hour is kind of okay so how would you actually do that how would you actually do",
    "start": "2725760",
    "end": "2731559"
  },
  {
    "text": "commands in an asynchronous way well the first thing you could do of course is you could build your email service to",
    "start": "2731559",
    "end": "2737680"
  },
  {
    "text": "start consuming that order completed event and then the email service knows",
    "start": "2737680",
    "end": "2743000"
  },
  {
    "text": "when that order completed event happens it needs to go off and send an email with a certain subject with a certain",
    "start": "2743000",
    "end": "2749960"
  },
  {
    "text": "body but now you've put all the logic for what uh email should look like an order confirmed email inside the email",
    "start": "2749960",
    "end": "2756680"
  },
  {
    "text": "ser service not inside the order service so if the order service needs to change that email you're back in that same",
    "start": "2756680",
    "end": "2763359"
  },
  {
    "text": "position where you're stuck in the backlog of another service that you don't control so this doesn't really work",
    "start": "2763359",
    "end": "2768520"
  },
  {
    "text": "either using pure events and this is where asynchronous commands can be really useful instead of your email",
    "start": "2768520",
    "end": "2774440"
  },
  {
    "text": "service exposing some kind of HTTP API your typical rest API it's going to",
    "start": "2774440",
    "end": "2780000"
  },
  {
    "text": "expose some kind of message Channel as its API that might be a topic that might be a Quee and that that topic is going",
    "start": "2780000",
    "end": "2787839"
  },
  {
    "text": "to all the other services in your organization that need to send emails will have permissions to publish messages onto that topic directly and",
    "start": "2787839",
    "end": "2795599"
  },
  {
    "text": "they're going to publish a send email message a command it's not an event it's",
    "start": "2795599",
    "end": "2800720"
  },
  {
    "text": "not past tense it's not already happened I am asking a system to send an email that message is still going to",
    "start": "2800720",
    "end": "2806839"
  },
  {
    "text": "follow that cloud event specification you're still going to have a defined spec the to the from the body the",
    "start": "2806839",
    "end": "2812440"
  },
  {
    "text": "subject inside the data you'll notice as well there's also a response Channel prop there the response Channel allows",
    "start": "2812440",
    "end": "2819160"
  },
  {
    "text": "you to start to do a synchronous request response in the event you publish you can say in in the command you publish",
    "start": "2819160",
    "end": "2824400"
  },
  {
    "text": "you can say actually here is what I want you to send a response back to to give me an update on how things are going so",
    "start": "2824400",
    "end": "2830520"
  },
  {
    "text": "you send that send email command you as the order service can go off and start doing more work you can start doing other things that's going to be consumed",
    "start": "2830520",
    "end": "2837520"
  },
  {
    "text": "by the email service email service is going to go off and send the email and then going to make that call back to the",
    "start": "2837520",
    "end": "2843680"
  },
  {
    "text": "response channel so this is a way you can do asynchronous request response asynchronous commands in some cases you",
    "start": "2843680",
    "end": "2850520"
  },
  {
    "text": "might want to keep things synchronous if it's an absolutely critical piece of functionality that you absolutely need",
    "start": "2850520",
    "end": "2855920"
  },
  {
    "text": "to know what's happened at that moment in time taking payments as an example maybe you do keep that bit synchronous",
    "start": "2855920",
    "end": "2862200"
  },
  {
    "text": "but it's good to have this as a pattern for these kind of anciliary pieces of functionality that aren't super",
    "start": "2862200",
    "end": "2868040"
  },
  {
    "text": "important so let's walk through this complete end to end flow now let's actually walk through how this floww is",
    "start": "2868040",
    "end": "2873720"
  },
  {
    "text": "event driven so that submit order request comes in to your order API your",
    "start": "2873720",
    "end": "2879599"
  },
  {
    "text": "order API does that little bit of validation check that the order is valid stores the data in a database and",
    "start": "2879599",
    "end": "2884880"
  },
  {
    "text": "publishes the order confirmed event the kitchen is going to consume",
    "start": "2884880",
    "end": "2890280"
  },
  {
    "text": "that order confirmed event the kitchen is going to go off it's going to create the order eventually the kitchen is",
    "start": "2890280",
    "end": "2895720"
  },
  {
    "text": "going to publish an order prepared event the order prepared event is going to be consumed by the delivery service",
    "start": "2895720",
    "end": "2901920"
  },
  {
    "text": "because the delivery service needs to go off and obviously deliver the order to people but the order is also going to",
    "start": "2901920",
    "end": "2907760"
  },
  {
    "text": "consume that event to then go off and update the status of the order in the database so that when I come along and",
    "start": "2907760",
    "end": "2913319"
  },
  {
    "text": "I'm trying to get the status of my pizza order I know exactly that this or I know that this order is now being",
    "start": "2913319",
    "end": "2920200"
  },
  {
    "text": "prepared there's one more potential problem with what we've built here that's with this little component",
    "start": "2920200",
    "end": "2927680"
  },
  {
    "text": "here so that submit order request is going to come in you're going to store the order in the database and then",
    "start": "2927680",
    "end": "2933440"
  },
  {
    "text": "you're going to publish the event what happens if that event fails to",
    "start": "2933440",
    "end": "2939720"
  },
  {
    "text": "publish now you've got the state stored in your database but the event has never made it so that pizza is never going to",
    "start": "2939720",
    "end": "2944839"
  },
  {
    "text": "be created which means you're going to have some very sad customers the opposite could also happen",
    "start": "2944839",
    "end": "2951280"
  },
  {
    "text": "even more dangerous the event could be published but maybe the state doesn't make it to the database now you've got a",
    "start": "2951280",
    "end": "2956640"
  },
  {
    "text": "kitchen making an order that technically doesn't even really exist so how can you deal with this how",
    "start": "2956640",
    "end": "2961839"
  },
  {
    "text": "can you handle this the first pattern to think about is the outbox pattern the transaction outbox pattern is anyone",
    "start": "2961839",
    "end": "2968359"
  },
  {
    "text": "familiar the outbox pattern Okay cool so what you do with the outbox pattern is that you're going to have two tables in",
    "start": "2968359",
    "end": "2975000"
  },
  {
    "text": "your database two different storage um storage locations you're going to have your actual dat table that's going to",
    "start": "2975000",
    "end": "2980079"
  },
  {
    "text": "store the actual State the order information and you're going to have a separate table an outbox table and when",
    "start": "2980079",
    "end": "2985480"
  },
  {
    "text": "you update your state in the database you're also going to write the event that you want to publish into the outbox and you're going to wrap all of that in",
    "start": "2985480",
    "end": "2991640"
  },
  {
    "text": "a database transaction which means if either of them fail to happen well the whole transaction fails nothing gets stored in",
    "start": "2991640",
    "end": "2997480"
  },
  {
    "text": "the database and then you've got some secondary process that's simply working through the outbox looking for things",
    "start": "2997480",
    "end": "3002960"
  },
  {
    "text": "that haven't been sent going off and sending them events now this does mean that you're",
    "start": "3002960",
    "end": "3009559"
  },
  {
    "text": "typically going to be duplicating data the same data that's going to be in your event is typically the same data that's going to be in your database table so",
    "start": "3009559",
    "end": "3016079"
  },
  {
    "text": "you end up with some duplication you also need to be really careful with cleanup I've once taking a system",
    "start": "3016079",
    "end": "3021359"
  },
  {
    "text": "offline because I never cleaned up the outbox table you end up with this infinitely growing log of all the events",
    "start": "3021359",
    "end": "3026720"
  },
  {
    "text": "that have been sent suddenly the Windows server that was running the SQL Server stopped working because there was no dis space so you do need to make sure you've",
    "start": "3026720",
    "end": "3033440"
  },
  {
    "text": "got cleanup mechanisms in place when things have been sent after so long you're going to want to clean them up there's another pattern we have here",
    "start": "3033440",
    "end": "3040440"
  },
  {
    "text": "though that can help us the idea of change data capture if you're using a database provider that supports change",
    "start": "3040440",
    "end": "3046799"
  },
  {
    "text": "data capture you can take the changes that happen in your database out as a stream of some kind and then you can use",
    "start": "3046799",
    "end": "3053440"
  },
  {
    "text": "that to kind of infer the events that you want to publish services like Amazon Dynamo DB for",
    "start": "3053440",
    "end": "3059000"
  },
  {
    "text": "example Dynamo DB has a feature called Dynamo DB streams which means you can stream out all of the changes that",
    "start": "3059000",
    "end": "3064480"
  },
  {
    "text": "happen in your database so then you're not duplicating data you're not worrying about using up",
    "start": "3064480",
    "end": "3069880"
  },
  {
    "text": "dis space you can just react to that changes changes that happen in your database use that to publish events",
    "start": "3069880",
    "end": "3076880"
  },
  {
    "text": "Downstream so excellent there you have it you've done it you've taken the pizza restaurant you've turned that from",
    "start": "3076880",
    "end": "3082839"
  },
  {
    "text": "synchronous microservices into asynchronous microservice which is f fantastic for them not so good for all",
    "start": "3082839",
    "end": "3088839"
  },
  {
    "text": "of you who now to go back to your own companies right because you've just done this theoretical company and made that event driven so what does this mean for",
    "start": "3088839",
    "end": "3094880"
  },
  {
    "text": "you how can you get started adopting an event driven system and the first thing you're going",
    "start": "3094880",
    "end": "3100000"
  },
  {
    "text": "to want to do is start small don't try to make your entire system event",
    "start": "3100000",
    "end": "3106440"
  },
  {
    "text": "overnight pick one little integration one point of integration you want to",
    "start": "3106440",
    "end": "3111799"
  },
  {
    "text": "pick something that isn't completely critical isn't your tier one service but also something that doesn't not",
    "start": "3111799",
    "end": "3117760"
  },
  {
    "text": "something that doesn't really matter you want to pick something in the middle and make that event R learn some",
    "start": "3117760",
    "end": "3123040"
  },
  {
    "text": "lessons get some best practices in place get some standards in place and then start to scale that across your",
    "start": "3123040",
    "end": "3129200"
  },
  {
    "text": "organization the other thing I always recommend to people is to add events regardless how you're building",
    "start": "3129200",
    "end": "3134839"
  },
  {
    "text": "your system today start publishing events when things change if something gets written to your",
    "start": "3134839",
    "end": "3141480"
  },
  {
    "text": "database publish an event that the thing changed because until you've got events being published",
    "start": "3141480",
    "end": "3147119"
  },
  {
    "text": "you don't have the potential to be able to add um things to handle them events and then maybe you get to a point where",
    "start": "3147119",
    "end": "3152720"
  },
  {
    "text": "you need to add a new feature a new piece of functionality and you think ha I've got this event fantastic and this",
    "start": "3152720",
    "end": "3158440"
  },
  {
    "text": "event has a defined schema and I'm going to make it doable I'm going to put a queue in front of my consumer to handle the load and then you can slowly start",
    "start": "3158440",
    "end": "3165640"
  },
  {
    "text": "to add these pieces of event driven functionality and remember event driven architecture is fundamentally a",
    "start": "3165640",
    "end": "3171799"
  },
  {
    "text": "communication pattern it's a way of modeling Integrations between systems and of course a lot of this is the",
    "start": "3171799",
    "end": "3177799"
  },
  {
    "text": "technical communication between systems but it's also the human communication the language the words we",
    "start": "3177799",
    "end": "3184920"
  },
  {
    "text": "use is incredibly important and whilst software",
    "start": "3184920",
    "end": "3190680"
  },
  {
    "text": "development at least for the moment is still a completely human endeavor it probably helps to keep that",
    "start": "3190680",
    "end": "3198240"
  },
  {
    "text": "same language in your system and you can bring this language into your Integrations into how your systems work",
    "start": "3198240",
    "end": "3205280"
  },
  {
    "text": "now of course event of AR cure is not a silver bullet nothing in software ever is it does have its tradeoffs it does",
    "start": "3205280",
    "end": "3211720"
  },
  {
    "text": "have its pitfalls but I hope if you're all going out to start building vent systems after you leave here that you",
    "start": "3211720",
    "end": "3217359"
  },
  {
    "text": "understand some of them pitfalls and you have patterns to help you build against that all the slides for the talk are um",
    "start": "3217359",
    "end": "3223960"
  },
  {
    "text": "on that QR code there at the bottom I've also got a whole loot of videos on my YouTube channel talking about rent architecture and some of the patterns",
    "start": "3223960",
    "end": "3229720"
  },
  {
    "text": "and actually since last time I gave this talk I actually built plant-based pizza so if you want to take that top QR code",
    "start": "3229720",
    "end": "3234839"
  },
  {
    "text": "that will actually give you a Deployable version of the application it's all AWS so if you're not familiar with AWS then",
    "start": "3234839",
    "end": "3239880"
  },
  {
    "text": "maybe not so useful but thank you all very much for listening I will be here for questions if anyone's got any questions thank you",
    "start": "3239880",
    "end": "3247319"
  },
  {
    "text": "[Applause]",
    "start": "3249160",
    "end": "3252630"
  }
]