[
  {
    "start": "0",
    "end": "126000"
  },
  {
    "text": "someone named Steven haunts and this is my talk net data security hope is not a",
    "start": "9930",
    "end": "14950"
  },
  {
    "text": "strategy so first of all thank you for having me over here in Sydney it's an amazing city my flown over from the UK",
    "start": "14950",
    "end": "21720"
  },
  {
    "text": "so taught me about 30 hours to get here so I'm still awake just okay so a little bit about me so",
    "start": "21720",
    "end": "30460"
  },
  {
    "text": "I'm the co-founder and CTO of a payments company in the UK called ladder pay so we aim to make business and consumer",
    "start": "30460",
    "end": "36280"
  },
  {
    "text": "payments easier for our customers and as well as that I also for the last three years I've been offering courses for all",
    "start": "36280",
    "end": "42370"
  },
  {
    "text": "sites over in the States so a few supplemental materials just before we",
    "start": "42370",
    "end": "48280"
  },
  {
    "text": "start so we're going to cover quite a lot of ground very quickly in this talk so if you don't grasp all of the concepts straightaway in the talk that's",
    "start": "48280",
    "end": "54609"
  },
  {
    "text": "absolutely fine treat is the art of the possible but I've got some other resources out there to help you so first of all there's my course practical",
    "start": "54609",
    "end": "61809"
  },
  {
    "text": "cryptography and dotnet that's available on site is everyone a Provost our subscriber here quick char hands it's",
    "start": "61809",
    "end": "69159"
  },
  {
    "text": "quite a few for those of you aren't so I've got some cards at the front there which give you 30 days free access to the library so if you want to try it out",
    "start": "69159",
    "end": "75040"
  },
  {
    "text": "and watching other courses then help yourself to a card there so this course",
    "start": "75040",
    "end": "80050"
  },
  {
    "text": "will basically walk through what we're doing in this talk but in a lot more detail when it kind of holds your hand and goes through the code demonstrations",
    "start": "80050",
    "end": "85570"
  },
  {
    "text": "it's a much better pace I've got a second course called play-by-play enterprise data encryption we've as you",
    "start": "85570",
    "end": "91900"
  },
  {
    "text": "revealed which is all about taking everything we talked about in this course but then using the azure key volt to protect all of your encryption keys",
    "start": "91900",
    "end": "97960"
  },
  {
    "text": "so it makes quite a good supplemental course what we're talking about if you",
    "start": "97960",
    "end": "103390"
  },
  {
    "text": "go to the github page listed there I've got all of the source code from my course available for free so everything",
    "start": "103390",
    "end": "109480"
  },
  {
    "text": "we're talking about here is is in that github repository so you don't have to code anything if you don't want to you can just steal what's there and use it",
    "start": "109480",
    "end": "115990"
  },
  {
    "text": "and bend it to your own will and also the slides here up on github as well so",
    "start": "115990",
    "end": "121390"
  },
  {
    "text": "if you want a copy of the slides afterwards just go to that address there ok so why are we here then so I believe",
    "start": "121390",
    "end": "128679"
  },
  {
    "start": "126000",
    "end": "170000"
  },
  {
    "text": "that as developers you is basically your responsibility or you have a big responsibility to your employers and to",
    "start": "128679",
    "end": "135220"
  },
  {
    "text": "your customers to protect their data so we're in a society now where data breaches are becoming even more common",
    "start": "135220",
    "end": "141490"
  },
  {
    "text": "every day and the people that can really help prevent that is you guys working in your",
    "start": "141490",
    "end": "146610"
  },
  {
    "text": "teams back at the office so for many years you know companies tend to think you know we'll just cross our fingers",
    "start": "146610",
    "end": "152820"
  },
  {
    "text": "you know it's not going to happen to us we're too small to get hacked or you know you've got all these brilliant firewalls and this impenetrable",
    "start": "152820",
    "end": "159870"
  },
  {
    "text": "intrusion detection systems we've got no one's ever gonna hack us well guess what it happens every day so nobody's immune",
    "start": "159870",
    "end": "165630"
  },
  {
    "text": "to it so it's up to us as developers to try and put better security into our systems and as the course is named hope",
    "start": "165630",
    "end": "172530"
  },
  {
    "start": "170000",
    "end": "275000"
  },
  {
    "text": "it's not a strategy such as hoping that you're not going to get hacked and having real data stolen from your databases isn't a good strategy going",
    "start": "172530",
    "end": "178530"
  },
  {
    "text": "forward unfortunately the reality of the world is we've increasing project",
    "start": "178530",
    "end": "183660"
  },
  {
    "text": "budgets security always gets pushed right to the bottom of the pile so it's kind of up to us to try and make sure",
    "start": "183660",
    "end": "189060"
  },
  {
    "text": "that doesn't happen okay so what's this talk not about so this isn't a deep",
    "start": "189060",
    "end": "194940"
  },
  {
    "text": "mathematical talk about how encryption algorithms work you'll be glad to know so we're not going to do lots of complex maths because I'm rubbish at it and",
    "start": "194940",
    "end": "202680"
  },
  {
    "text": "we're not going to talk about cryptanalysis either so cryptanalysis is kind of the art and the science of breaking encryption algorithms so that's",
    "start": "202680",
    "end": "208470"
  },
  {
    "text": "not what this talks about what this talk is about is about people like you and me who work on teams of developers for",
    "start": "208470",
    "end": "215070"
  },
  {
    "text": "organizations building enterprise systems so this talk is really aimed at you know looking at what's in the dotnet",
    "start": "215070",
    "end": "220980"
  },
  {
    "text": "framework and using those tools for our benefit so most of these sort of code",
    "start": "220980",
    "end": "227880"
  },
  {
    "text": "snippets are going to look at us or from the more traditional saying quality in quotes dotnet framework so typical you",
    "start": "227880",
    "end": "234720"
  },
  {
    "text": "know surface I at API is WCF web services all that sort of thing or client codes and if you do winforms WPF",
    "start": "234720",
    "end": "240690"
  },
  {
    "text": "or anything like that then this stuff's all very relevant so in the.net core",
    "start": "240690",
    "end": "245880"
  },
  {
    "text": "world if you're using dotnet core 1.1 and don't know standard 1.6 you kind of outta luck so most of the api's we're",
    "start": "245880",
    "end": "252060"
  },
  {
    "text": "talking about are not included but luckily two days ago dotnet core 2 was",
    "start": "252060",
    "end": "257820"
  },
  {
    "text": "released and no standard 2 and you'll be glad to know that we have feature parity of all the api's so if you're in the",
    "start": "257820",
    "end": "263010"
  },
  {
    "text": "dotnet core world and you're upgrading to dotnet core - then you're in luck and what a good time to release dotnet",
    "start": "263010",
    "end": "268920"
  },
  {
    "text": "core 2 while we're here at NDC Sydney so I spent the last two days upgrading my codebase",
    "start": "268920",
    "end": "275340"
  },
  {
    "start": "275000",
    "end": "583000"
  },
  {
    "text": "so what what we're talking about it's got a very Microsoft focus today actually the concepts of what we're",
    "start": "275340",
    "end": "282100"
  },
  {
    "text": "talking about it's kind of transferable across different systems so if you work in you know Java PHP god forbid - no js'",
    "start": "282100",
    "end": "288730"
  },
  {
    "text": "or anything else like that and all the concepts that we're talking about transfer a Porsche stop see the api's are different so is everyone here at net",
    "start": "288730",
    "end": "294639"
  },
  {
    "text": "developer I can't pretty much buy to anyone good room it's being a PHP developer now I said that sorry I",
    "start": "294639",
    "end": "302550"
  },
  {
    "text": "apologize okay so we're gonna cover quite a bit of ground so what we're gonna do is gonna break it down into a",
    "start": "302550",
    "end": "308470"
  },
  {
    "text": "series of abstractions I guess because we love abstractions so first of all we're gonna talk about random numbers",
    "start": "308470",
    "end": "313900"
  },
  {
    "text": "and why they're important because they kind of underpin everything that we do in cryptography we're then gonna look at",
    "start": "313900",
    "end": "319600"
  },
  {
    "text": "hashing and hash max or that's a hash message authentication codes then we're going to talk a bit about secure",
    "start": "319600",
    "end": "325450"
  },
  {
    "text": "password storage and so what's a good technique and what's not good techniques to use then we gonna look at symmetric",
    "start": "325450",
    "end": "331930"
  },
  {
    "text": "encryption so we'll look at IES and what that is and how you use it then we can look at asymmetric encryption which is",
    "start": "331930",
    "end": "337960"
  },
  {
    "text": "RSA and then we're gonna look at digital signatures but once you've done that we're not going to stop there so we're",
    "start": "337960",
    "end": "343570"
  },
  {
    "text": "going to explore all of the different primitives are available to us and the dotnet framework but where the real value is when we start combining them",
    "start": "343570",
    "end": "349270"
  },
  {
    "text": "together to do what's called hybrid encryption so we're taking the best of both worlds from the all these different primitives and using them together okay",
    "start": "349270",
    "end": "357640"
  },
  {
    "text": "so what is cryptography then so generally you know cryptography is about protecting information you know you have a piece of plain text you encrypt it",
    "start": "357640",
    "end": "363520"
  },
  {
    "text": "with some secret encryption keys and you get ciphertext out at the back so that's what we all commonly think of as cryptography",
    "start": "363520",
    "end": "370260"
  },
  {
    "text": "Bashi there's kind of four pillars to cryptography that we want to explore during this talk so the first one is",
    "start": "370260",
    "end": "376090"
  },
  {
    "text": "confidentiality so that's what we typically think of when we're talking about encryption you know you have a piece of data you don't want someone",
    "start": "376090",
    "end": "381550"
  },
  {
    "text": "else to see it's even encrypted but also we've got integrity which is about detecting over anyone's tampered with",
    "start": "381550",
    "end": "386979"
  },
  {
    "text": "our data or whether it's been corrupted in any way then we got authentication which is about proving you know am I",
    "start": "386979",
    "end": "394570"
  },
  {
    "text": "allowed to see this data so you have you got access to see some data and then we've got non-repudiation x' this is",
    "start": "394570",
    "end": "400120"
  },
  {
    "text": "being able to prove that it was actually you that sense a piece of data in the first place",
    "start": "400120",
    "end": "405460"
  },
  {
    "text": "so examples of cryptography mean you can't wake up in the morning and function for about the day without being exposed to cryptography in one way shape",
    "start": "405460",
    "end": "412370"
  },
  {
    "text": "or form so every time you use the Internet maybe anything over HTTP it's going to",
    "start": "412370",
    "end": "417590"
  },
  {
    "text": "be using cryptography and the backgrounds protect your traffic you know using a cash machine or on ATM and",
    "start": "417590",
    "end": "423979"
  },
  {
    "text": "you put your PIN number in there's a handshake that goes on between that machine in the bank at all friends okay yes that's all using cryptographic",
    "start": "423979",
    "end": "429050"
  },
  {
    "text": "protocols mobile phones these days especially iPhones you know with the secure Enclave chips on there they're",
    "start": "429050",
    "end": "435499"
  },
  {
    "text": "very secure devices these days as you've seen in the US where the FBI tried to get Apple to unlock the San Bernardino",
    "start": "435499",
    "end": "442310"
  },
  {
    "text": "killers I find which I refused to do and then paid some company over a million",
    "start": "442310",
    "end": "447830"
  },
  {
    "text": "dollars for some tools to help them but then we've got other areas like in",
    "start": "447830",
    "end": "452960"
  },
  {
    "text": "crypto currency so Bitcoin litecoin and all the different currencies that are coming out in that area and the",
    "start": "452960",
    "end": "458659"
  },
  {
    "text": "underpinning blockchain protocols as well all quick top a few based I wish I had more time to talk about block chains",
    "start": "458659",
    "end": "464839"
  },
  {
    "text": "it's one of my favorite subjects but I only have an hour but also a picture down here electronic voting systems are",
    "start": "464839",
    "end": "472400"
  },
  {
    "text": "all based on cryptography as well as you know once you've registered your vote can someone go and change your vote and tamper with it or can you vote twice",
    "start": "472400",
    "end": "478729"
  },
  {
    "text": "so those all use cryptography behind the scenes to help implement them okay so",
    "start": "478729",
    "end": "484909"
  },
  {
    "text": "let's start looking at the top of the list then that we looked at that's random numbers so random numbers are",
    "start": "484909",
    "end": "491180"
  },
  {
    "text": "very important to cryptography it's one of the most important concepts we need to get right and because used in to generate encryption keys so we can do",
    "start": "491180",
    "end": "497330"
  },
  {
    "text": "that you know see that multiple times throughout the talk and there's different ways of doing it in dotnet but but the one you don't want to use is",
    "start": "497330",
    "end": "504500"
  },
  {
    "text": "that system got random because it's it's not a random number it's always very deterministic so if you don't change the",
    "start": "504500",
    "end": "510529"
  },
  {
    "text": "seed that you pass into it you get same numbers out so it's only really good for simulating dice throws and maybe the odd",
    "start": "510529",
    "end": "516979"
  },
  {
    "text": "lottery number so what's better to use is a class called rnj crypto service",
    "start": "516979",
    "end": "522529"
  },
  {
    "text": "provider now you're gonna find that a lot of these objects in net if you're not familiar with them have got some really ridiculous names which is where a",
    "start": "522529",
    "end": "527540"
  },
  {
    "text": "lot of people tend to overlook the mininet framework because they're not very obvious so this one is our ng",
    "start": "527540",
    "end": "533240"
  },
  {
    "text": "crypto service provider and that lives in the system got security cryptography now space along with everything else that",
    "start": "533240",
    "end": "539100"
  },
  {
    "text": "we're talking about today and you know this is very easy to use and it'll be a common theme all of the things we're",
    "start": "539100",
    "end": "544440"
  },
  {
    "text": "looking at actually very easy to use they're just not very obvious in a documentation from Microsoft so to",
    "start": "544440",
    "end": "550920"
  },
  {
    "text": "generate a random number so we've got a small method here so be passing what length we want so typically you know we",
    "start": "550920",
    "end": "555960"
  },
  {
    "text": "might want 32 by its random number which is 256 bits which is very common key letters to use these days we create an",
    "start": "555960",
    "end": "563310"
  },
  {
    "text": "instance of RNG crypto service provider we create an array we call get bias yeah",
    "start": "563310",
    "end": "570210"
  },
  {
    "text": "we pass in the array that we want filled which is fatal to bias for example and then it gets filled with random data so",
    "start": "570210",
    "end": "577529"
  },
  {
    "text": "typically what we're going to use to generate encryption keys for the rest of this talk so moving on then so the next",
    "start": "577529",
    "end": "584820"
  },
  {
    "start": "583000",
    "end": "807000"
  },
  {
    "text": "thing is hashing so as everyone used hashing before I'm familiar with hashing yeah I mean the concepts are quite",
    "start": "584820",
    "end": "591510"
  },
  {
    "text": "simple with hashing but they're very powerful what they can do so a good way to think of it is if you've got a piece of data and then you create a hash code",
    "start": "591510",
    "end": "597900"
  },
  {
    "text": "off of it it's a bit like a unique fingerprint for that piece of data so you can take in an arbitrary block of",
    "start": "597900",
    "end": "604170"
  },
  {
    "text": "data because you know generally in a byte array you run a hashing algorithm over it and you get a fixed length",
    "start": "604170",
    "end": "610220"
  },
  {
    "text": "string effectively out the back of it which is the hash code for that piece of data there's kind of a few properties of",
    "start": "610220",
    "end": "619020"
  },
  {
    "text": "hashing that are important so the first one is it should be easy to compute so generating a hash of a piece of data",
    "start": "619020",
    "end": "624030"
  },
  {
    "text": "should be easy but it should be infeasible to generate a certificate you shouldn't be able to say you know for",
    "start": "624030",
    "end": "630480"
  },
  {
    "text": "this praveen piece of will flips given hash code what's the data I need to generate the hash you shouldn't be able",
    "start": "630480",
    "end": "635490"
  },
  {
    "text": "to do that and it should be infeasible to modify a message without changing the",
    "start": "635490",
    "end": "640530"
  },
  {
    "text": "hash so if you've got say a PDF document and you generate a hash of that document if you go and change just one bit in",
    "start": "640530",
    "end": "646980"
  },
  {
    "text": "that document then the entire hash code should be completely different so I'm not slightly different but it'll be completely different and it should be",
    "start": "646980",
    "end": "654209"
  },
  {
    "text": "infeasible to find two identical hashes for the same piece of data or different pieces of data that produce identical",
    "start": "654209",
    "end": "659310"
  },
  {
    "text": "hashes that's called a hash collision so that's something you don't want to happen with hashing so good way of thinking about hashing",
    "start": "659310",
    "end": "666140"
  },
  {
    "text": "then you know when we look at encryption it's generally a two-way operation so you have a piece of data you encrypt it",
    "start": "666140",
    "end": "671180"
  },
  {
    "text": "with a key and then you decrypt it with the same case it's two-way but with a hash it's kind of like one-way",
    "start": "671180",
    "end": "676550"
  },
  {
    "text": "encryption effectively so you have a piece of data hash it even you can't recover that original data from the hash",
    "start": "676550",
    "end": "682120"
  },
  {
    "text": "that's good way of thinking about it so there's lots of different ham hashing algorithms that are out there so",
    "start": "682120",
    "end": "687920"
  },
  {
    "text": "one that's very common and quite old is md5 this produces a 16 byte hash value",
    "start": "687920",
    "end": "694010"
  },
  {
    "text": "and it was designed by a chap called Ron Rivest in 1991 but in 1996 a hash",
    "start": "694010",
    "end": "699980"
  },
  {
    "text": "collision resistant for mobility was discovered so it's actually not a very secure hashing algorithm to use these days the reason we still talk about it",
    "start": "699980",
    "end": "707480"
  },
  {
    "text": "is because if you're in the enterprise application development space you probably might have to work with systems",
    "start": "707480",
    "end": "712640"
  },
  {
    "text": "that are much older than you we still use md5 hashes you still need the ability to bounce calculate them so they",
    "start": "712640",
    "end": "720950"
  },
  {
    "text": "still use very commonly with legacy systems following off from that then we",
    "start": "720950",
    "end": "726020"
  },
  {
    "text": "have the shower or secure hash family of hashes and these come in different flavors and so sha-1 and char two are",
    "start": "726020",
    "end": "732500"
  },
  {
    "text": "both in the.net framework so sha-1 produces 160 bit hash and char 2",
    "start": "732500",
    "end": "737990"
  },
  {
    "text": "produces a 256 bit or 512 bit hash depending on which one you use and both",
    "start": "737990",
    "end": "745220"
  },
  {
    "text": "of those were designed by the National Security Agency in the United States so naturally that means a few people",
    "start": "745220",
    "end": "751460"
  },
  {
    "text": "slightly nervous so there was a competition to come up with a new one called char free because they're very imaginative with the names and the aim",
    "start": "751460",
    "end": "758840"
  },
  {
    "text": "of this competition was it was going to be an on NSA designed hashing algorithm so in the ends algorithm called kick",
    "start": "758840",
    "end": "765950"
  },
  {
    "text": "hack I think is how you pronounce it I know I hate pronounce it was deemed to be the winner in 2012",
    "start": "765950",
    "end": "770960"
  },
  {
    "text": "now unfortunately that's not in the dotnet framework yet but I'd expect it to be in there at some point in the not-too-distant future so how do we",
    "start": "770960",
    "end": "779960"
  },
  {
    "text": "create a hash again it's very easy a lot these things are very easy to use so in the method on the screen we pass in a",
    "start": "779960",
    "end": "785720"
  },
  {
    "text": "byte array which is our data we want hash so that could be someone's password it could be a PDF document it could be",
    "start": "785720",
    "end": "791090"
  },
  {
    "text": "anything songs it's in a byte array then we call a static medical create on the",
    "start": "791090",
    "end": "796250"
  },
  {
    "text": "sha-256 class or objects and then we call compute hash and we pass in the data we want hashed and then we receive a byte array back",
    "start": "796250",
    "end": "802460"
  },
  {
    "text": "which is our hash the piece of data so",
    "start": "802460",
    "end": "807950"
  },
  {
    "start": "807000",
    "end": "917000"
  },
  {
    "text": "moving on from that then so the next step of hashing is called authenticated hashing and these are or they're correct",
    "start": "807950",
    "end": "815510"
  },
  {
    "text": "term is hash message authentication codes or h max so these work exactly the",
    "start": "815510",
    "end": "820610"
  },
  {
    "text": "same way is how you generate a normal hash so you pass some data in you hash it you get a hash code back out the back",
    "start": "820610",
    "end": "825860"
  },
  {
    "text": "of it but what you also have the ability to do is pass in an encryption key so using one of these random numbers that",
    "start": "825860",
    "end": "831320"
  },
  {
    "text": "were generated 32 bytes in length you can pass that key in and generate the hash code now the good thing about this",
    "start": "831320",
    "end": "837680"
  },
  {
    "text": "is the only way you can regenerate that same hash code is if you have that encryption key so if someone hasn't got",
    "start": "837680",
    "end": "843980"
  },
  {
    "text": "the same key and they try and regenerate the hash hash will be different so it's good for authentication because someone",
    "start": "843980",
    "end": "849410"
  },
  {
    "text": "has to be in the possession of that key so we'll talk about that quite a bit later on so said they used for verify",
    "start": "849410",
    "end": "857990"
  },
  {
    "text": "integrity and authentication which is what makes them powerful and you can have h max based on any of the hashing",
    "start": "857990",
    "end": "864170"
  },
  {
    "text": "algorithms so md5 or the char family of hashes we can use sha-256 in the remainder of this talk and the strength",
    "start": "864170",
    "end": "871250"
  },
  {
    "text": "is based on the length of the key so you want a good strong key which is why typically these days we use 32 bias",
    "start": "871250",
    "end": "876410"
  },
  {
    "text": "which is 256 bits you can't go higher but generally at the minute people tend to use 32 by it",
    "start": "876410",
    "end": "882170"
  },
  {
    "text": "keys and the most common type of attack against this is called a brute-force attack and we'll talk a little bit about",
    "start": "882170",
    "end": "889070"
  },
  {
    "text": "that in a moment but again they're very easy to use so have a method here we",
    "start": "889070",
    "end": "894290"
  },
  {
    "text": "pass in a byte array of our data we want hashed we pass in a byte array which represents our key so if a to two bytes",
    "start": "894290",
    "end": "899930"
  },
  {
    "text": "of random data and we create an instance of the H max sha-256 objects we pass the",
    "start": "899930",
    "end": "906170"
  },
  {
    "text": "key into the constructor then we simply call compute hash on that objects passing in our data that we want hashed",
    "start": "906170",
    "end": "911600"
  },
  {
    "text": "let me receive a byte array out the back which is our hash code",
    "start": "911600",
    "end": "916750"
  },
  {
    "start": "917000",
    "end": "1376000"
  },
  {
    "text": "so that leads us on to talking about passwords whether the thorny issue of passwords so passwords are kind of",
    "start": "917149",
    "end": "924660"
  },
  {
    "text": "essential to every system we use that's the common way B's to authenticate our users and typically the way people do",
    "start": "924660",
    "end": "931410"
  },
  {
    "text": "this or have done it previously is to hash the password to store those hashes in the database so has anyone done that",
    "start": "931410",
    "end": "936690"
  },
  {
    "text": "in the systems they work on or seen that a few hands Publix people know where I'm",
    "start": "936690",
    "end": "942209"
  },
  {
    "text": "going next so this is all well and good and it's served its purpose for quite a",
    "start": "942209",
    "end": "948899"
  },
  {
    "text": "while but it's actually not that secure so you can do what's called a brute-force attack against that password which is where you just try billions of",
    "start": "948899",
    "end": "955290"
  },
  {
    "text": "part of our combinations per second and in eventually you're going to be able to",
    "start": "955290",
    "end": "960300"
  },
  {
    "text": "generate the same hash code for the password another type of attack is called a dictionary or rainbow table",
    "start": "960300",
    "end": "965970"
  },
  {
    "text": "attack and these are huge databases of passwords including all the clever ones we turn the vowels into numbers and put",
    "start": "965970",
    "end": "971339"
  },
  {
    "text": "exclamation marks at the end you know that really doesn't work so these rainbow tables exist and literally you",
    "start": "971339",
    "end": "978270"
  },
  {
    "text": "know passing your hash password and it's more than likely gonna have that password in the dictionary and the",
    "start": "978270",
    "end": "985410"
  },
  {
    "text": "reason why these are these attacks are easy to do is because generally used tools that hash cat and which works",
    "start": "985410",
    "end": "991770"
  },
  {
    "text": "using the GPUs on your computer so GPUs are probably increasing in speed at a",
    "start": "991770",
    "end": "996870"
  },
  {
    "text": "faster rate than what normal CPUs are so people leverage the power of GPUs to try and crack passwords so you can literally",
    "start": "996870",
    "end": "1003230"
  },
  {
    "text": "do billions of combinations per second so a good way to illustrate this so",
    "start": "1003230",
    "end": "1008630"
  },
  {
    "text": "there's lots of sites like this on the Internet this one's called crack station net so you park you paste in your hashed",
    "start": "1008630",
    "end": "1014720"
  },
  {
    "text": "password at the top there that's a sha-256 hash password they put in a little capture hit crack hashes and then",
    "start": "1014720",
    "end": "1020630"
  },
  {
    "text": "it recovers to password for you pretty much instantly and it's pretty accurate you can download from dubious places on",
    "start": "1020630",
    "end": "1028819"
  },
  {
    "text": "the Internet massive databases of passwords so it's not it's not a very good technique so we want to do",
    "start": "1028819",
    "end": "1034370"
  },
  {
    "text": "something slightly better so the next best way but not the best way is to do what's called salted password which is",
    "start": "1034370",
    "end": "1040850"
  },
  {
    "text": "where assault is effectively another random number and you know so you phototube bytes in length you append",
    "start": "1040850",
    "end": "1047329"
  },
  {
    "text": "that to the password and then you hash the pass and that gives you what's called increased entropy so it increases the",
    "start": "1047329",
    "end": "1052919"
  },
  {
    "text": "password space that you've got to search to try and break that password and again that's much better than just doing",
    "start": "1052919",
    "end": "1058490"
  },
  {
    "text": "hashes or even plaintext passwords but as GPUs are getting faster this can also",
    "start": "1058490",
    "end": "1064620"
  },
  {
    "text": "start becoming susceptible to attacks as well because you can still test billions of combinations per second so you know a",
    "start": "1064620",
    "end": "1070919"
  },
  {
    "text": "password that's hashed as opposed to by salts may be secured now but you know who knows what could happen into for",
    "start": "1070919",
    "end": "1076980"
  },
  {
    "text": "your you know five years as these GPUs get faster so what we want to get onto",
    "start": "1076980",
    "end": "1082559"
  },
  {
    "text": "now then is the better way of doing it so it's using something called a password-based key derivation function",
    "start": "1082559",
    "end": "1089690"
  },
  {
    "text": "very obvious what that is isn't it or as it's commonly known a pbkdf2 so if you",
    "start": "1089690",
    "end": "1096570"
  },
  {
    "text": "want to sound really cool down the pub you can just talk about pbkdf2 but actually the concept is very simple",
    "start": "1096570",
    "end": "1101970"
  },
  {
    "text": "in what it's doing so we have the password that we want to hash go into",
    "start": "1101970",
    "end": "1107669"
  },
  {
    "text": "the box at the bottom we have a salt so we're still going to use a salt you know first to buy a piece of entropy but then",
    "start": "1107669",
    "end": "1113700"
  },
  {
    "text": "we pass in a number of iterations and what that number of iterations is is the number of times that pass was gonna be repeatedly hashed and the reason we do",
    "start": "1113700",
    "end": "1121019"
  },
  {
    "text": "this is we're trying to algorithmically slow down the hashing process so if you think about a GPU can crack say 2",
    "start": "1121019",
    "end": "1126389"
  },
  {
    "text": "billion passwords a second if you our Griffin to slow it down then maybe they can only check 10 passwords a second so",
    "start": "1126389",
    "end": "1132750"
  },
  {
    "text": "it makes it much harder for them to do it and less efficient so a password based key derivation",
    "start": "1132750",
    "end": "1140340"
  },
  {
    "text": "function is actually an official spec so I've had to write it down so can ever remember it it's called the RSA",
    "start": "1140340",
    "end": "1145409"
  },
  {
    "text": "cryptographic standards pkcs number five version two if you if you're wondering",
    "start": "1145409",
    "end": "1150870"
  },
  {
    "text": "and it's also publishes an RFC document so it's also called RFC two eight nine AIDS okay and this is why a lot of",
    "start": "1150870",
    "end": "1158100"
  },
  {
    "text": "people don't tend to know about these things because they've given very non-obvious names but the idea is he",
    "start": "1158100",
    "end": "1163500"
  },
  {
    "text": "supposed it slows the password cracking process down so it basically makes it much more secure but you'll be glad to",
    "start": "1163500",
    "end": "1170399"
  },
  {
    "text": "know it's very easy to use provided you know what classes to use so we have to use RFC up there RFC two",
    "start": "1170399",
    "end": "1176250"
  },
  {
    "text": "eight nine eighty derive bytes of course it's obvious so when I method up here now we're",
    "start": "1176250",
    "end": "1182429"
  },
  {
    "text": "passing in a byte array of our data to be hashed or password in this case we're passing a salt a photo two bytes of",
    "start": "1182429",
    "end": "1188280"
  },
  {
    "text": "random entropy and we pass in a number of iterations create an instance that a",
    "start": "1188280",
    "end": "1193320"
  },
  {
    "text": "class pass all those three things in call get bytes and passing 20 and then we get the resulting byte array which is",
    "start": "1193320",
    "end": "1200400"
  },
  {
    "text": "our hash so the reason we passing 20 to get 20 bytes is the RFC to eight nine eight",
    "start": "1200400",
    "end": "1206520"
  },
  {
    "text": "derive by its objects you see char one below the scenes or blow the covers which is gives you a twenty by a hash so",
    "start": "1206520",
    "end": "1213059"
  },
  {
    "text": "you don't need to actually extract any more than 20 bytes so what's a good number of iterations to use and when I",
    "start": "1213059",
    "end": "1219630"
  },
  {
    "text": "originally wrote this talk probably a couple of years ago now how did a little test on my laptop I did some timing tests so four hundred iterations it took",
    "start": "1219630",
    "end": "1227760"
  },
  {
    "text": "two milliseconds so hashed a password for a thousand iterations it took 16",
    "start": "1227760",
    "end": "1233490"
  },
  {
    "text": "milliseconds 10,000 iterations it took 196 milliseconds all the way up to half",
    "start": "1233490",
    "end": "1238559"
  },
  {
    "text": "a million iterations and it took seven seconds just over seven seconds to calculate so one of the things you need",
    "start": "1238559",
    "end": "1244980"
  },
  {
    "text": "to think about as a developer is what is an acceptable amount of time or delay to incur on your users on your systems so",
    "start": "1244980",
    "end": "1250679"
  },
  {
    "text": "you know seven seconds is very secure but if you've got a pup you've got someone logging onto a website do you",
    "start": "1250679",
    "end": "1256590"
  },
  {
    "text": "really want them to wait seven seconds they're probably going to go somewhere else so you have to work out what's an",
    "start": "1256590",
    "end": "1262020"
  },
  {
    "text": "acceptable level so I mean I've if sometimes if you go into a website and type a password then it feels like you wait in a couple of seconds it's",
    "start": "1262020",
    "end": "1268140"
  },
  {
    "text": "probably because they're using this style of password hashing behind the covers so you know typically I'd say you",
    "start": "1268140",
    "end": "1274230"
  },
  {
    "text": "know one hundred thousand or between 100 and 200 thousand iterations you probably don't get the good bets but you have to",
    "start": "1274230",
    "end": "1279570"
  },
  {
    "text": "think about the context in which you're using these algorithms does anyone",
    "start": "1279570",
    "end": "1285120"
  },
  {
    "text": "remember this from a few years ago I'm not gonna ask if anyone was a member",
    "start": "1285120",
    "end": "1290320"
  },
  {
    "text": "cuz I'd be on the phone but actually Madison they had to know what their",
    "start": "1290320",
    "end": "1295330"
  },
  {
    "text": "source code and dates and lots of other stuff stolen and one of the interesting",
    "start": "1295330",
    "end": "1300669"
  },
  {
    "text": "things about it was how they took their approach to passwords so they were actually being quite good they were",
    "start": "1300669",
    "end": "1306009"
  },
  {
    "text": "using something called bcrypt behind-the-scene now bcrypt is kind of another flavor of password-based key",
    "start": "1306009",
    "end": "1311289"
  },
  {
    "text": "derivation function it uses different algorithms internally but it's a similar concept you have a hash password and a",
    "start": "1311289",
    "end": "1316690"
  },
  {
    "text": "number of iterations and that's how they were still in their passwords that's great but the attackers also stole the",
    "start": "1316690",
    "end": "1323200"
  },
  {
    "text": "source code to the system which was a bit of a problem because when they were going through it they realized that some",
    "start": "1323200",
    "end": "1328350"
  },
  {
    "text": "enterprising engineer at the company to try and improve the performance of the system was actually storing local md5",
    "start": "1328350",
    "end": "1334509"
  },
  {
    "text": "hashes of the passwords so when you read log on to her sites it was storing an md5 hash which is a",
    "start": "1334509",
    "end": "1342039"
  },
  {
    "text": "lot easier to brute-force and because of this and they managed to recover about",
    "start": "1342039",
    "end": "1347950"
  },
  {
    "text": "11 million passwords from the system just because some Engineer probably fought his do something good to improve the system not actually really knowing",
    "start": "1347950",
    "end": "1354159"
  },
  {
    "text": "what he was doing she caused a major problem so there's a really good article here on that link there which talks",
    "start": "1354159",
    "end": "1360490"
  },
  {
    "text": "about the story in a lot more detail what we can do today it's all talked about how they put the processes are you",
    "start": "1360490",
    "end": "1366039"
  },
  {
    "text": "went through two to do that okay so we've talked about random numbers you'll",
    "start": "1366039",
    "end": "1371649"
  },
  {
    "text": "talks about hashing authenticated hashing and password so let's move on to encryption so the first one we'll look",
    "start": "1371649",
    "end": "1377470"
  },
  {
    "start": "1376000",
    "end": "1731000"
  },
  {
    "text": "at is symmetric encryption and the reason this way this works is you have",
    "start": "1377470",
    "end": "1383169"
  },
  {
    "text": "an encryption key you use that to encrypt some data then to decrypt that data you use the same encryption key so that's why it's called",
    "start": "1383169",
    "end": "1389529"
  },
  {
    "text": "symmetric now there's a one problem with",
    "start": "1389529",
    "end": "1395230"
  },
  {
    "text": "symmetric encryption is to actually share in the keys is very difficult to do so if you've got an encryption key",
    "start": "1395230",
    "end": "1400600"
  },
  {
    "text": "and I encrypt some data how am I going to get that key to someone else now am I gonna email it to you probably not a good idea should I put it on a USB stick",
    "start": "1400600",
    "end": "1408309"
  },
  {
    "text": "and hand it to you probably better but you know someone bashes you over the head with a pipe and steals the USB stick you're in trouble so this is one",
    "start": "1408309",
    "end": "1416080"
  },
  {
    "text": "of the problems of symmetric encryption it's one of the things we can talk about later took about hybrid encryption it became",
    "start": "1416080",
    "end": "1423910"
  },
  {
    "text": "just show this slide again encryptions a two-way operation as you said it's",
    "start": "1423910",
    "end": "1429550"
  },
  {
    "text": "symmetric use the same key to encrypt and decrypt whereas hashing which we talked about before is a one-way operation so it works n is we encrypt",
    "start": "1429550",
    "end": "1441250"
  },
  {
    "text": "several bytes at a time and that data is basically split into blocks it does some",
    "start": "1441250",
    "end": "1446410"
  },
  {
    "text": "internal encryption operations doesn't loss whopping of all the blocks but it's a it's a very algorithmic process it's",
    "start": "1446410",
    "end": "1451450"
  },
  {
    "text": "very fast and the blocks are typically padded as well as if you get to the end",
    "start": "1451450",
    "end": "1456670"
  },
  {
    "text": "of the day to your encrypted and it's not at the correct size of the block then it will pad those blocks out so in",
    "start": "1456670",
    "end": "1463210"
  },
  {
    "text": "dotnet there's free encryption algorithms we can make use of says AES which is one we're gonna talk about most",
    "start": "1463210",
    "end": "1469690"
  },
  {
    "text": "later and there's another one called des and in Triple DES so they're kind of older encryption algorithms they've been",
    "start": "1469690",
    "end": "1476260"
  },
  {
    "text": "broken the reason they're still in the dotnet framework is again you might be dealing with legacy systems that have got des or Triple DES encrypted data",
    "start": "1476260",
    "end": "1482490"
  },
  {
    "text": "it's why used to work for a large bank in the UK and our core banking platform",
    "start": "1482490",
    "end": "1488140"
  },
  {
    "text": "was actually on an IAS 400 I'd be a mainframe so some of the data that it were passed back to us it was encrypted",
    "start": "1488140",
    "end": "1494350"
  },
  {
    "text": "with Triple DES so we had to use some of these classes to access that data but you don't want to go into writing a new",
    "start": "1494350",
    "end": "1500080"
  },
  {
    "text": "system using DES or Triple DES you all know whose AES so a AES is international",
    "start": "1500080",
    "end": "1509500"
  },
  {
    "text": "standard so was the u.s. national standards and institutes and Technology standard and it was made a standard in 2001 and it",
    "start": "1509500",
    "end": "1517450"
  },
  {
    "text": "was invented by two Belgian mathematicians so Joan Damon and Vinson",
    "start": "1517450",
    "end": "1523060"
  },
  {
    "text": "rhymin and the original algorithm they came up with is called Ryan down but",
    "start": "1523060",
    "end": "1528190"
  },
  {
    "text": "then round out was what originally won the competition and became the standard and he's known as AES as we know it today so to use it there's several",
    "start": "1528190",
    "end": "1537220"
  },
  {
    "text": "things we have to do to pass into a yes to make it work so we have our plain text at the bottom so that's a data that",
    "start": "1537220",
    "end": "1542440"
  },
  {
    "text": "we want to encrypt do we want to make a secret we have our key which we pass in as well so that",
    "start": "1542440",
    "end": "1548050"
  },
  {
    "text": "could be 128 bits 192 or 256 it's in length so we can use 256 bits",
    "start": "1548050",
    "end": "1555090"
  },
  {
    "text": "their military sprinkled an initialization vector which is 16 bytes of random data that you have to pass him",
    "start": "1555090",
    "end": "1561420"
  },
  {
    "text": "and the reason we do that is because the data split into blocks and he does operations between those blocks you kind",
    "start": "1561420",
    "end": "1566800"
  },
  {
    "text": "of need a bit of seed data to get it started it's kind of like a kickstart to the algorithm so we pass in 16 bytes to",
    "start": "1566800",
    "end": "1573580"
  },
  {
    "text": "do that those 16 bytes aren't secret they're not a key so you can store them along with your data it's a need to be",
    "start": "1573580",
    "end": "1580420"
  },
  {
    "text": "aware of so in doc nets we have two flavors of AES which are most commonly",
    "start": "1580420",
    "end": "1586750"
  },
  {
    "text": "used this AES managed and AES crypto service provider and they both do",
    "start": "1586750",
    "end": "1592450"
  },
  {
    "text": "exactly the same thing so AES managed is a native dotnet implementation of AES",
    "start": "1592450",
    "end": "1599260"
  },
  {
    "text": "and there's everyone with it it works it's fine it does his job but it's not been certified with something called",
    "start": "1599260",
    "end": "1604990"
  },
  {
    "text": "FIPS 197 - - which is basically a certification scheme that the algorithms go through and what that gives you is",
    "start": "1604990",
    "end": "1611830"
  },
  {
    "text": "then if you're certified you know that if you receive any encrypted data from another system say written in Java or an",
    "start": "1611830",
    "end": "1617920"
  },
  {
    "text": "IBM mainframe you're going to be able to decrypt that data and vice versa so AES",
    "start": "1617920",
    "end": "1622960"
  },
  {
    "text": "managed hasn't gone through that certification scheme it'll probably work but it's not certified to work so the",
    "start": "1622960",
    "end": "1631330"
  },
  {
    "text": "alternative then is AES crypto service provider and that usually the underlying windows crypto platform and not quite",
    "start": "1631330",
    "end": "1638200"
  },
  {
    "text": "sure how they've done it in botnet core basically used something else I don't",
    "start": "1638200",
    "end": "1643420"
  },
  {
    "text": "know what so to use it again is fairly",
    "start": "1643420",
    "end": "1650560"
  },
  {
    "text": "straightforward and all the code which I said about on github at the beginning all of this is in there so you can just",
    "start": "1650560",
    "end": "1655780"
  },
  {
    "text": "steal it or steal it borrow it use it it's open source so we have our in quit",
    "start": "1655780",
    "end": "1662470"
  },
  {
    "text": "method and we pass in a byte array of our data to encrypt that could be you know that small bit attack so it could",
    "start": "1662470",
    "end": "1668650"
  },
  {
    "text": "be a large document that's been split out into a byte array we pass in our key",
    "start": "1668650",
    "end": "1673900"
  },
  {
    "text": "which is 32 bytes in length and then we pass in our sixteen byte initialization vector then we simply create an instance",
    "start": "1673900",
    "end": "1682120"
  },
  {
    "text": "of the AES crypto so to provide a class we in the key in the IV and then we creates",
    "start": "1682120",
    "end": "1687220"
  },
  {
    "text": "a memory stream and a crypto streams it's all stream based how it works so you can pass in quite large pieces of data and then we you know cool right and",
    "start": "1687220",
    "end": "1696309"
  },
  {
    "text": "then flush on that crypto stream and then we can pull that data back out which gives us our encrypted byte array",
    "start": "1696309",
    "end": "1701549"
  },
  {
    "text": "so it's quite straightforward to use and to decrypt it and they'll be passing the",
    "start": "1701549",
    "end": "1706809"
  },
  {
    "text": "same information our data to the equipped our key and our initialization vector we create the AES crypto service",
    "start": "1706809",
    "end": "1712989"
  },
  {
    "text": "provider class create the streams cool right on the streams and then that data",
    "start": "1712989",
    "end": "1718210"
  },
  {
    "text": "gets decrypted so it's nice and straightforward to use",
    "start": "1718210",
    "end": "1723090"
  },
  {
    "text": "okay so following on from symmetric encryption we have a symmetric encryption so I'm sure everyone's heard",
    "start": "1723570",
    "end": "1729009"
  },
  {
    "text": "of RSA okay yeah so it's a same premise",
    "start": "1729009",
    "end": "1734499"
  },
  {
    "start": "1731000",
    "end": "1744000"
  },
  {
    "text": "but it works in a different way so in asymmetric encryption we have two sets of encryption keys you have a public key",
    "start": "1734499",
    "end": "1740529"
  },
  {
    "text": "and a private key I'll talk about those a little bit more in a minute so RSA was",
    "start": "1740529",
    "end": "1747129"
  },
  {
    "start": "1744000",
    "end": "1783000"
  },
  {
    "text": "invented by RSA data security incorporated in the States by free guys Rivest Shamir and Adleman",
    "start": "1747129",
    "end": "1753039"
  },
  {
    "text": "and the way this works compared to say AES in AES is very old with making how",
    "start": "1753039",
    "end": "1758830"
  },
  {
    "text": "it works you know it splits about data into blocks it does encryption operations it swaps blocks around so it's very you know what we typically",
    "start": "1758830",
    "end": "1765639"
  },
  {
    "text": "think of as a computer algorithm whereas RSA is more mathematical in how it works it's all based on modulus",
    "start": "1765639",
    "end": "1771129"
  },
  {
    "text": "arithmetic so at the moment the current minimum recommended key lamp for RS 8",
    "start": "1771129",
    "end": "1777599"
  },
  {
    "text": "2048 bits but you can use 4096 bit keys as well one of the downsides of RSA is",
    "start": "1777599",
    "end": "1787929"
  },
  {
    "start": "1783000",
    "end": "1806000"
  },
  {
    "text": "because it's mathematical and it's all based on modulus arithmetic is you can only encrypt up to the size of the key so you're limited on how much data you",
    "start": "1787929",
    "end": "1794979"
  },
  {
    "text": "can encrypt in one go which seems like a bit of a limitation but as you'll see later it doesn't really matter because",
    "start": "1794979",
    "end": "1801220"
  },
  {
    "text": "when we start combining a lot these systems together we get a lot of benefits so the way the key works and",
    "start": "1801220",
    "end": "1807279"
  },
  {
    "start": "1806000",
    "end": "1863000"
  },
  {
    "text": "it's all based on prime number factorization so if we have this simple sum up here so 23 times 17 you know even",
    "start": "1807279",
    "end": "1814179"
  },
  {
    "text": "in our heads on a calculator and quickly work out the answer it's 391 if we go the other way so far",
    "start": "1814179",
    "end": "1821509"
  },
  {
    "text": "so I ask you what two prime numbers make up five thousand nine hundred and sixty-three anyone know the answer no",
    "start": "1821509",
    "end": "1829940"
  },
  {
    "text": "one's got it yet that's fine so it's 67 and eighty-nine multiplied together and that's kind of the underlying premise of how the security",
    "start": "1829940",
    "end": "1837110"
  },
  {
    "text": "of the keys works but the prime numbers are huge massive prime numbers so in",
    "start": "1837110",
    "end": "1843350"
  },
  {
    "text": "this sort of case our public key is the five thousand nine hundred and sixty-three and the private key is the",
    "start": "1843350",
    "end": "1849259"
  },
  {
    "text": "67 and eighty nine numbers so the private key you don't want anyone else to know that's your own private key but",
    "start": "1849259",
    "end": "1855289"
  },
  {
    "text": "the public key you can put it on the internet you can post it to people email it it's it's okay for anyone to use how",
    "start": "1855289",
    "end": "1864289"
  },
  {
    "start": "1863000",
    "end": "1956000"
  },
  {
    "text": "does this work in practice then so first of all in dotnet we want to generate a new key or a new set of keys so you",
    "start": "1864289",
    "end": "1873350"
  },
  {
    "text": "create the RSA crypto service provider class you pass in the key length that you want so in this case 2048 bit keys",
    "start": "1873350",
    "end": "1879639"
  },
  {
    "text": "and then you call export parameters passing you false gives you your public key and then you could pass seen true",
    "start": "1879639",
    "end": "1885889"
  },
  {
    "text": "and it gives you your private key so in this example we're just storing it in memory so one thing has to be aware of",
    "start": "1885889",
    "end": "1891379"
  },
  {
    "text": "is how you're going to secure and protect those keys it's one ways you can generate certificates to store them in",
    "start": "1891379",
    "end": "1896509"
  },
  {
    "text": "certificates or you can use things like as your key volts or all hardware security modules to do that so is",
    "start": "1896509",
    "end": "1901850"
  },
  {
    "text": "everyone here work on Azure what is sure and then we come from know few people okay so azure",
    "start": "1901850",
    "end": "1912889"
  },
  {
    "text": "kevo is effectively a hardware security module or an abstraction over a hardware security module when it's a piece of",
    "start": "1912889",
    "end": "1918019"
  },
  {
    "text": "hardware which is designed to secure or to store encryption keys very securely so if anyone tries to tamper with the",
    "start": "1918019",
    "end": "1923659"
  },
  {
    "text": "hardware security module then it wipes itself so Microsoft has data centers full of these things they're based on",
    "start": "1923659",
    "end": "1929000"
  },
  {
    "text": "the thallus and shield hardware so highly recommends playing around with",
    "start": "1929000",
    "end": "1934850"
  },
  {
    "text": "that it's actually very cheap to use on a dribbler costs cents per key it's",
    "start": "1934850",
    "end": "1939950"
  },
  {
    "text": "really cheap and that's what from code okay I mean",
    "start": "1939950",
    "end": "1951000"
  },
  {
    "text": "there's a full set of API so you can use it and use it from what you want okay so",
    "start": "1951000",
    "end": "1957120"
  },
  {
    "start": "1956000",
    "end": "2009000"
  },
  {
    "text": "to encrypt some data then so we pass in a byte array of our data to encrypt we create the RSA crypto service provider",
    "start": "1957120",
    "end": "1962970"
  },
  {
    "text": "objects we import our public key because when we encrypt data we use our public key to encrypt it and then we call RSA",
    "start": "1962970",
    "end": "1970230"
  },
  {
    "text": "dot encrypt and then we get our encrypted data back out so to decrypt",
    "start": "1970230",
    "end": "1977610"
  },
  {
    "text": "the data we pass in our data to decrypt typos on slide there create the RSA",
    "start": "1977610",
    "end": "1984540"
  },
  {
    "text": "service provider objects we import our private key this time because the decrypt the data we need to use our",
    "start": "1984540",
    "end": "1990090"
  },
  {
    "text": "private key then we just called equipped on the RSA object and we get the original data back so we think about how",
    "start": "1990090",
    "end": "1995940"
  },
  {
    "text": "this is being used in fact here so if I want to send say you some data I would",
    "start": "1995940",
    "end": "2001730"
  },
  {
    "text": "use your public key to encrypt the data and then you decrypt it if your private key but you're the only person that knows that key okay so moving on from",
    "start": "2001730",
    "end": "2012380"
  },
  {
    "start": "2009000",
    "end": "2071000"
  },
  {
    "text": "asymmetric encryption we've got digital signatures so early one when we talked",
    "start": "2012380",
    "end": "2018260"
  },
  {
    "text": "about the four pillars around cryptography one of them is non-repudiation so being able to prove it was actually you that sends a piece",
    "start": "2018260",
    "end": "2023840"
  },
  {
    "text": "of data so this is where digital signatures help us out with that and these are used all the time so has",
    "start": "2023840",
    "end": "2030290"
  },
  {
    "text": "anyone used DocuSign the website yeah shoot a few hands up there so DocuSign",
    "start": "2030290",
    "end": "2036500"
  },
  {
    "text": "is a good example so it's a way of signing contracts between two parties so we use it a pro site when we sign a and",
    "start": "2036500",
    "end": "2042170"
  },
  {
    "text": "all for agreement for a course we do a two-way signature thing with DocuSign and that's using digital signatures",
    "start": "2042170",
    "end": "2047990"
  },
  {
    "text": "behind the scene so that if say even me or cause I disputed anything in the contracts where you can't because we",
    "start": "2047990",
    "end": "2054530"
  },
  {
    "text": "both both digitally signs that contract says do digital signatures we kind of",
    "start": "2054530",
    "end": "2060950"
  },
  {
    "text": "need three different things to any key generation which is exactly the same as what we did for RSA and we need a sign",
    "start": "2060950",
    "end": "2067730"
  },
  {
    "text": "in our Griffin and a signature verifier algorithm so the way this works saying",
    "start": "2067730",
    "end": "2072888"
  },
  {
    "text": "is you have a large piece of data in the green box at the end there and then you create a hash or hash Mac with",
    "start": "2072889",
    "end": "2080060"
  },
  {
    "text": "that data so you end up with the data to buy a hash that piece of data it's actually that hash which you then create",
    "start": "2080060",
    "end": "2086419"
  },
  {
    "text": "a digital signature off so because additional signatures in.net are based around RSA you've still got",
    "start": "2086419",
    "end": "2091669"
  },
  {
    "text": "that limits of how much dates you can encrypt in one go so you tend to generate your signatures off of hashes",
    "start": "2091669",
    "end": "2097400"
  },
  {
    "text": "of other pieces of data so if we look at this as an example so we've got Bob",
    "start": "2097400",
    "end": "2103130"
  },
  {
    "start": "2100000",
    "end": "2240000"
  },
  {
    "text": "wants to send a digital signature so what he does is he creates a digital",
    "start": "2103130",
    "end": "2108950"
  },
  {
    "text": "signature using his private yeah his private key so you remember before when",
    "start": "2108950",
    "end": "2114170"
  },
  {
    "text": "we used i RSA you're being cryptic with a public key and decrypted with a private key this is the other way around",
    "start": "2114170",
    "end": "2119360"
  },
  {
    "text": "so we create the signature using your own private key you send the message over the Internet to someone or the",
    "start": "2119360",
    "end": "2125570"
  },
  {
    "text": "intergalactic spider's web my diagram I'm not very good at art and design on a Friday so you send that",
    "start": "2125570",
    "end": "2131750"
  },
  {
    "text": "image that that digital signature to Alice at the bottom there and then she uses Bob's public key to verify that",
    "start": "2131750",
    "end": "2137540"
  },
  {
    "text": "signature so if anyone else other than Bob created their signature then the the",
    "start": "2137540",
    "end": "2144800"
  },
  {
    "text": "signature won't verify at the end so Alice will know that that message didn't come from Bob so we're going to use it",
    "start": "2144800",
    "end": "2152300"
  },
  {
    "text": "it's quite straightforward so we generate a set of keys exactly the same code as what we saw a little while ago",
    "start": "2152300",
    "end": "2158740"
  },
  {
    "text": "and then we want to use a class called an RSA pkcs1 signature formatter",
    "start": "2158740",
    "end": "2167410"
  },
  {
    "text": "wonderful bit of class naming by Microsoft there so what we do so we create the RSA crypto service provider",
    "start": "2167860",
    "end": "2174530"
  },
  {
    "text": "then we load our private key into it so our keys were ready to use and then we create the RSA pkcs1 signature formatter",
    "start": "2174530",
    "end": "2182030"
  },
  {
    "text": "try saying that after a few beers and we party in the RSA objects we tell it what",
    "start": "2182030",
    "end": "2187730"
  },
  {
    "text": "hashing algorithm we want to use so char t56 in our case here and then we call create signature of the hash that we've",
    "start": "2187730",
    "end": "2194300"
  },
  {
    "text": "passed in and that will give us back it's quiet array with that digital signature in so now if we want to verify",
    "start": "2194300",
    "end": "2200330"
  },
  {
    "text": "that a signature is valid so I recipient is now going to check the signature we",
    "start": "2200330",
    "end": "2206390"
  },
  {
    "text": "pass in the hash of the data that's been signed and we pass in the signature create the",
    "start": "2206390",
    "end": "2212969"
  },
  {
    "text": "RSA crypto service provider object loading the public key that's what we're going to use to verify the signature and",
    "start": "2212969",
    "end": "2219269"
  },
  {
    "text": "then we call RSA pkcs1 signature D for matter set the hashing algorithm to",
    "start": "2219269",
    "end": "2225900"
  },
  {
    "text": "sha-256 and we call verify signature and we pass in the hash of the data that was",
    "start": "2225900",
    "end": "2231569"
  },
  {
    "text": "originally signed and the signature and they leave a return true or false true it's about a signature folks it's not",
    "start": "2231569",
    "end": "2237449"
  },
  {
    "text": "discarded okay so if we do a quick recap",
    "start": "2237449",
    "end": "2242999"
  },
  {
    "start": "2240000",
    "end": "2288000"
  },
  {
    "text": "of the four pillars and then we'll look at how we've satisfied those four pillars so confidentiality we talked",
    "start": "2242999",
    "end": "2248039"
  },
  {
    "text": "about AES and RSA so that's new typical encryption that we all know enough",
    "start": "2248039",
    "end": "2253279"
  },
  {
    "text": "integrity we talked about hashing and we've used sha-256 there's a hashing",
    "start": "2253279",
    "end": "2259380"
  },
  {
    "text": "algorithm there authentication we use hey shush max or hash message",
    "start": "2259380",
    "end": "2264569"
  },
  {
    "text": "authentication codes using sha-256 and then we talked about non-repudiation",
    "start": "2264569",
    "end": "2270119"
  },
  {
    "text": "using digital signatures you've been able to prove that you're the actual original sender of a message so it's all",
    "start": "2270119",
    "end": "2277559"
  },
  {
    "text": "great and very useful in their own life but really want to do is start using these things together to do think more powerful which is where we get onto",
    "start": "2277559",
    "end": "2284130"
  },
  {
    "text": "hybrid encryption okay",
    "start": "2284130",
    "end": "2289640"
  },
  {
    "text": "so we've already said the RSA has a limit on the amount of dates you can encrypt in one go it's a very slow",
    "start": "2289640",
    "end": "2296759"
  },
  {
    "text": "mathematical process so you can't encrypt or decrypt anything bigger than the size of the key is on the other hand",
    "start": "2296759",
    "end": "2305190"
  },
  {
    "text": "is very fast and very efficient encrypting data but sharing the keys is hard you can't it's very difficult to",
    "start": "2305190",
    "end": "2311130"
  },
  {
    "text": "get a key from one person to the other so what we're gonna start off by doing is combining RSA and IES into a hybrid",
    "start": "2311130",
    "end": "2318509"
  },
  {
    "text": "scheme so we're gonna build this up bit by bit so what we're gonna do first in",
    "start": "2318509",
    "end": "2323969"
  },
  {
    "start": "2320000",
    "end": "2367000"
  },
  {
    "text": "is we're gonna use AES for encrypting our data and then we can use RSA for encrypting our encryption key so if we",
    "start": "2323969",
    "end": "2332039"
  },
  {
    "text": "walk through this is a few examples so first of all we're going to generate a session key so it's just a 32 byte",
    "start": "2332039",
    "end": "2337589"
  },
  {
    "text": "random number generates then we're gonna use that session key to encrypt our data using",
    "start": "2337589",
    "end": "2342930"
  },
  {
    "text": "AES it's that's our data encrypted they need to be sent and then we can use our",
    "start": "2342930",
    "end": "2348500"
  },
  {
    "text": "recipients public key to encrypt that session key then we send the whole lots",
    "start": "2348500",
    "end": "2353820"
  },
  {
    "text": "over to the recipient and then for them to recover the message they have to use their private key to decrypt the session",
    "start": "2353820",
    "end": "2359910"
  },
  {
    "text": "key and then once you've recovered that key they can then go and decrypt the original data and given that neck is in",
    "start": "2359910",
    "end": "2365609"
  },
  {
    "text": "the original data back so in terms of the data that we're sending across to a",
    "start": "2365609",
    "end": "2370740"
  },
  {
    "start": "2367000",
    "end": "2387000"
  },
  {
    "text": "recipient so we've got the RSA encrypted session key we have an initialization",
    "start": "2370740",
    "end": "2376170"
  },
  {
    "text": "vectors removed we need 16 bytes to jumpstart AES and then we have the AES",
    "start": "2376170",
    "end": "2381720"
  },
  {
    "text": "encrypted data they've on front of that so far let's walk for a couple of",
    "start": "2381720",
    "end": "2388200"
  },
  {
    "start": "2387000",
    "end": "2411000"
  },
  {
    "text": "examples so Alice once has had and Bob a message so she starts off by generating",
    "start": "2388200",
    "end": "2393660"
  },
  {
    "text": "her session key and then she generates her initialization vector she encrypts",
    "start": "2393660",
    "end": "2399089"
  },
  {
    "text": "her data with AES that so dates are now protected she don't encrypts her session",
    "start": "2399089",
    "end": "2404700"
  },
  {
    "text": "key of RSA and posts the whole thing over to Bob so Bob now wants to read",
    "start": "2404700",
    "end": "2412109"
  },
  {
    "text": "that message so he decrypt the session key using his private key cuz only he",
    "start": "2412109",
    "end": "2417390"
  },
  {
    "text": "knows that private key he then uses that the cryptic key and initialization vector to recover the original message",
    "start": "2417390",
    "end": "2424230"
  },
  {
    "text": "and then he can read the message so meet me at noon blow the clock tower where a red rose in your button V spy thriller",
    "start": "2424230",
    "end": "2431390"
  },
  {
    "text": "so now Bob wants to send a reply back to Alice so he creates a new session key",
    "start": "2431390",
    "end": "2437070"
  },
  {
    "text": "cue never reused the same keys you generate new ones he creates a new",
    "start": "2437070",
    "end": "2442109"
  },
  {
    "text": "initialization vector and he then encrypts his reply using that session key he then using Alice's public key",
    "start": "2442109",
    "end": "2450589"
  },
  {
    "text": "encrypts the session key and then sends a whole lot across to Alice so she now",
    "start": "2450589",
    "end": "2458730"
  },
  {
    "text": "uses her private key against only she knows her private key to decrypt the session key she then uses that than the",
    "start": "2458730",
    "end": "2465480"
  },
  {
    "text": "IV to decrypt a message and they can then she can read it so I will meet you I'll be wearing a blue hat and red boots",
    "start": "2465480",
    "end": "2471780"
  },
  {
    "text": "so she's a very fashion-conscious that's great so we've satisfied a couple",
    "start": "2471780",
    "end": "2478710"
  },
  {
    "text": "of problems so we've satisfied the the fact that RSA can only encrypt small amounts of data efficiently and we've",
    "start": "2478710",
    "end": "2485190"
  },
  {
    "text": "also fixed the problem we're getting an asymmetric key from one person to the",
    "start": "2485190",
    "end": "2490500"
  },
  {
    "text": "other which was hard we've now had a better way of doing them so now what we",
    "start": "2490500",
    "end": "2496320"
  },
  {
    "start": "2495000",
    "end": "2555000"
  },
  {
    "text": "want to do is we want to make sure that whoever receives that message is confident that someone hasn't tampered with the data always being corrupted as",
    "start": "2496320",
    "end": "2503730"
  },
  {
    "text": "it's been sent so once no is that data actually intact and not being fiddled with so we did exactly the same process",
    "start": "2503730",
    "end": "2510180"
  },
  {
    "text": "as what we did before but before we send the message to the recipient we also generates a hash mark of the",
    "start": "2510180",
    "end": "2517800"
  },
  {
    "text": "ciphertext in the IV concatenate it together the reason we use a hash Mac is because we can then use that a session",
    "start": "2517800",
    "end": "2524400"
  },
  {
    "text": "key to generate the hash so in any way you can verify the hash is if you've recovered the key on the other end so",
    "start": "2524400",
    "end": "2533820"
  },
  {
    "text": "then on the other ends the recipient uses their private key they decrypt the session key they can decrypt the text",
    "start": "2533820",
    "end": "2540089"
  },
  {
    "text": "and then they can use that decrypted session key to verify the hash if the hashes are identical then great the date",
    "start": "2540089",
    "end": "2546089"
  },
  {
    "text": "has not been corrupted if the hash is a difference then you discard the message because someone's either tampered with",
    "start": "2546089",
    "end": "2551369"
  },
  {
    "text": "it in transit always been corrupted over the wire so our data that we send across",
    "start": "2551369",
    "end": "2558330"
  },
  {
    "text": "the wire then looks like this now so we have an encrypted session key we have a mission as a tional vector we have only s encrypted data and then we have a H",
    "start": "2558330",
    "end": "2566040"
  },
  {
    "text": "Mac of the encrypted data that's great so now what we want to do is you want to",
    "start": "2566040",
    "end": "2572250"
  },
  {
    "text": "make sure it was actually Bob that sent the message in the first place and not Jeff Eve evil Jeff so game everything",
    "start": "2572250",
    "end": "2581609"
  },
  {
    "start": "2577000",
    "end": "2606000"
  },
  {
    "text": "we've done before we're still going to do but before we send the data we're going to use our private key to create a",
    "start": "2581609",
    "end": "2590220"
  },
  {
    "text": "signed hash but the hash that we created previously let's using our private key so as the",
    "start": "2590220",
    "end": "2595820"
  },
  {
    "text": "sender only I only I have that private key so if anyone verifies the signature on the other end you can only have come",
    "start": "2595820",
    "end": "2601550"
  },
  {
    "text": "from me unless someone's stolen my key",
    "start": "2601550",
    "end": "2605380"
  },
  {
    "text": "so again if we look at what that looks like so when we send that data we have the RSA encrypted session key the",
    "start": "2606850",
    "end": "2613520"
  },
  {
    "text": "initialization vector that is encrypted data we have our hash of the encrypted data or a hash mark of the encrypted",
    "start": "2613520",
    "end": "2619610"
  },
  {
    "text": "data and we have a digital signature of that hash so the person on the other end has to verify that signature they then",
    "start": "2619610",
    "end": "2627380"
  },
  {
    "text": "have to use their private key to decrypt the session key which I then used to decrypt the data and then read the",
    "start": "2627380",
    "end": "2632450"
  },
  {
    "text": "message so actually what we've done so we've used all of these very simple primitives in dotnet to give us something quite",
    "start": "2632450",
    "end": "2638780"
  },
  {
    "text": "powerful so we can send we can securely send data from A to B using public and",
    "start": "2638780",
    "end": "2645410"
  },
  {
    "text": "private keys because that makes the key sharing problem a lot easier but we've used the efficiency in the speed and",
    "start": "2645410",
    "end": "2650630"
  },
  {
    "text": "power of AES to encrypt our data and we've made sure that the data hasn't been tampered with over the over the",
    "start": "2650630",
    "end": "2656840"
  },
  {
    "text": "wire or been intercepted and we've also made sure that you know we're sure that it was actually Bob that's in that data",
    "start": "2656840",
    "end": "2662570"
  },
  {
    "text": "in the first place it sounds quite a powerful concept I've just talked over",
    "start": "2662570",
    "end": "2670400"
  },
  {
    "text": "that start without showing the slide but that's the fact we recap in what we've just done it's anyone's brain melted yet",
    "start": "2670400",
    "end": "2679089"
  },
  {
    "start": "2681000",
    "end": "2697000"
  },
  {
    "text": "okay so that's effectively what I wanted to cover there's quite a lot to it as I",
    "start": "2681490",
    "end": "2688820"
  },
  {
    "text": "say if you don't quite understand all of it right now that's absolutely fine treat this talk as kind of the art of the possible so you kind of had a flavor",
    "start": "2688820",
    "end": "2694850"
  },
  {
    "text": "of what you can do with these sorts of things if you do want to watch my course it's about three hours long before hours",
    "start": "2694850",
    "end": "2702200"
  },
  {
    "start": "2697000",
    "end": "2712000"
  },
  {
    "text": "long it covers the same topic but he goes into a bit more detail and a bit more depth and it walks you through all the code samples so it's it's a slow way",
    "start": "2702200",
    "end": "2710480"
  },
  {
    "text": "of going free which is good where we talked before about the difficulties of",
    "start": "2710480",
    "end": "2716930"
  },
  {
    "start": "2712000",
    "end": "2741000"
  },
  {
    "text": "storing RSA keys so this course here shows you exactly how to do that and",
    "start": "2716930",
    "end": "2722270"
  },
  {
    "text": "again all the source code phase of on the course so you can just take it and that shows you how to store keys in",
    "start": "2722270",
    "end": "2728869"
  },
  {
    "text": "your key votes if you're using Azure I'm sure AWS and Google cloud have very similar things in them as well I've just",
    "start": "2728869",
    "end": "2734359"
  },
  {
    "text": "not used it myself that's a good way of securely protecting your RSA keys so you",
    "start": "2734359",
    "end": "2743150"
  },
  {
    "start": "2741000",
    "end": "2754000"
  },
  {
    "text": "feel free to use the code steal it do what you want with it and use it as a basis for your own security in your own",
    "start": "2743150",
    "end": "2749750"
  },
  {
    "text": "systems I encourage people to do that and take a look at it and again the slides all on github as",
    "start": "2749750",
    "end": "2756530"
  },
  {
    "start": "2754000",
    "end": "2764000"
  },
  {
    "text": "well so if you want to refer back to the slides you know you can just go and download them from there I don't want",
    "start": "2756530",
    "end": "2761690"
  },
  {
    "text": "the slides for my for talks so a bit of further reading so I mean when I first",
    "start": "2761690",
    "end": "2766970"
  },
  {
    "start": "2764000",
    "end": "2856000"
  },
  {
    "text": "started looking at this sort of stuff years ago it's it's absolutely fascinating subjects cryptography so I've got three book recommendations here",
    "start": "2766970",
    "end": "2773780"
  },
  {
    "text": "should you want to go in more detail on it so the first book is called the code book by the back with Simon Singh it's a",
    "start": "2773780",
    "end": "2780080"
  },
  {
    "text": "very small book it's kind of a novel sizes I read it on holiday once my wife's horror but it kind of covers the",
    "start": "2780080",
    "end": "2787010"
  },
  {
    "text": "history of encryption and cryptography from sort of ancient they helped us or modern modern day so it's kind of a",
    "start": "2787010",
    "end": "2793310"
  },
  {
    "text": "historical document more than anything is good fun to read everyday cryptography covers a lot of the things",
    "start": "2793310",
    "end": "2799100"
  },
  {
    "text": "that we talked about today in hybrid encryption but it also has lots of examples about where encryption in",
    "start": "2799100",
    "end": "2804440"
  },
  {
    "text": "cryptography is used in real world scenarios so how does a TLS handshake work when you use your browser how to",
    "start": "2804440",
    "end": "2810859"
  },
  {
    "text": "cash machines authenticate you it goes into more detail on that the last book",
    "start": "2810859",
    "end": "2816619"
  },
  {
    "text": "is called applied cryptography now this is the book that was released in the early 90s this is the book that the NSA",
    "start": "2816619",
    "end": "2821750"
  },
  {
    "text": "tried to ban at the time this is at a time when encryption was considered ammunition a weapon but it's a fantastic",
    "start": "2821750",
    "end": "2830510"
  },
  {
    "text": "book but it's very mathematically heavy so you have to be into that kind of thing it doesn't cover AES because it",
    "start": "2830510",
    "end": "2837020"
  },
  {
    "text": "came up for AES was written but if you want to have a good insight into how these algorithms have evolved over time",
    "start": "2837020",
    "end": "2842180"
  },
  {
    "text": "and how they work and it's a great book to read so thank you very much I hope you've enjoyed it",
    "start": "2842180",
    "end": "2848630"
  },
  {
    "text": "you",
    "start": "2848630",
    "end": "2850690"
  }
]