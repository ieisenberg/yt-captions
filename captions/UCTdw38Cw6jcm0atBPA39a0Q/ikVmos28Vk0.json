[
  {
    "text": "all right so let's get started um I'd look to thank you that you are",
    "start": "1340",
    "end": "6960"
  },
  {
    "text": "here that early in the morning especially because yesterday was supposed to party so I'm really glad that you are here so um I'd like to give",
    "start": "6960",
    "end": "14340"
  },
  {
    "text": "you next around 50 minutes a short introduction to the kotlin programming language so I've called this talk The",
    "start": "14340",
    "end": "20340"
  },
  {
    "text": "Chronicles of lost semicolons so because in kotlin you do not have to use semicolons anymore to end your",
    "start": "20340",
    "end": "27060"
  },
  {
    "text": "statements so now the semicolons have to go somewhere so where did they go",
    "start": "27060",
    "end": "32880"
  },
  {
    "text": "they go to conesco pre-con scope is like a language where you mainly use these semicolons so they found a new new home",
    "start": "32880",
    "end": "39660"
  },
  {
    "text": "there so who am I my name is Christian Wertz I'm",
    "start": "39660",
    "end": "44940"
  },
  {
    "text": "a senior full stack engineer trainer and speaker and you can just scan if you'd like this QR code or with my website",
    "start": "44940",
    "end": "51420"
  },
  {
    "text": "type that rocks and there you will find a GitHub link to all the code we'll talk about today",
    "start": "51420",
    "end": "58218"
  },
  {
    "text": "so what really is kotlin well kotlin is heavily influenced from other languages",
    "start": "58379",
    "end": "63780"
  },
  {
    "text": "like C sharp or from java and kotlin is a multi-paradigm language developed by",
    "start": "63780",
    "end": "69299"
  },
  {
    "text": "chat brains so by the people who brought us IntelliJ or Rider or webstorm",
    "start": "69299",
    "end": "74700"
  },
  {
    "text": "so they have um it's heavy influence by them so it's also a multi-target",
    "start": "74700",
    "end": "80600"
  },
  {
    "text": "language so you can compile it to jvm you can relate to JavaScript also to",
    "start": "80600",
    "end": "87000"
  },
  {
    "text": "Native so to for Linux Windows and Mac OS and you can even compile it to for",
    "start": "87000",
    "end": "92460"
  },
  {
    "text": "example use it with swift or with C libraries so it's but it's also open source so you can also",
    "start": "92460",
    "end": "99540"
  },
  {
    "text": "um go to GitHub and then check the for example GitHub stores and then work with the with the team behind chat brains",
    "start": "99540",
    "end": "106259"
  },
  {
    "text": "so but why should you consider using kotlin so kotlin has great interoperability",
    "start": "106259",
    "end": "112740"
  },
  {
    "text": "with many other languages so for example especially for Java you can call kotlin",
    "start": "112740",
    "end": "117960"
  },
  {
    "text": "code from java and can call Java code from kotlin but you can also of course call kotlin code from Swift or you can",
    "start": "117960",
    "end": "125640"
  },
  {
    "text": "call it from C and of course if you like use spring boot if you are a Java developer just quick show of hands how",
    "start": "125640",
    "end": "132360"
  },
  {
    "text": "many of you are travel developers here nice some of you perfect and I think the rest of you c-sharp Developers",
    "start": "132360",
    "end": "139680"
  },
  {
    "text": "okay yeah nice so I think many of the c-sharp developers will see some features in kotlin which they already",
    "start": "139680",
    "end": "145560"
  },
  {
    "text": "know but the Java developers sadly don't know so I think travel developers can also um really really um take something with",
    "start": "145560",
    "end": "152700"
  },
  {
    "text": "them so as already mentioned you can use it for example with Apache projects you",
    "start": "152700",
    "end": "157739"
  },
  {
    "text": "can use it in your normal Java project so also if you have like your Maven project ready you can just put kotlin in",
    "start": "157739",
    "end": "164040"
  },
  {
    "text": "there and then just use it you can just use kotlin in a small part of your pro of your Java project so it's really cool",
    "start": "164040",
    "end": "170459"
  },
  {
    "text": "to just get started by using a little bit of kotlin in your existing projects also if you are using spring boot as a",
    "start": "170459",
    "end": "177780"
  },
  {
    "text": "Java developer then it's one of the official languages which you can use to create spring boot applications even on",
    "start": "177780",
    "end": "184080"
  },
  {
    "text": "the spring.io initializer website you can then see that you can also just choose kotlin to start with programming",
    "start": "184080",
    "end": "192720"
  },
  {
    "text": "so but who does kotlin really like who does it in production well many great companies are using kotlin first Android",
    "start": "192720",
    "end": "200519"
  },
  {
    "text": "is using kotlin as their main programming language for development so if you are using an Android application",
    "start": "200519",
    "end": "207000"
  },
  {
    "text": "it's a high chance that you are using it with kotlin under the hood so because",
    "start": "207000",
    "end": "212099"
  },
  {
    "text": "Google said you should mainly use kotlin as a programming language of course they are still also um supporting Java but",
    "start": "212099",
    "end": "219000"
  },
  {
    "text": "they say whenever possible use kotlin then also pick players like Pinterest",
    "start": "219000",
    "end": "224099"
  },
  {
    "text": "Uber Netflix and Amazon also all use kotlin in their productive code and I'm from Switzerland so I've worked in many",
    "start": "224099",
    "end": "230819"
  },
  {
    "text": "insurance companies as a contractor also in Banks and all of them are already using kotlin in production in their",
    "start": "230819",
    "end": "236819"
  },
  {
    "text": "backend applications also in production so for example an insurance company I've been working they use it for their",
    "start": "236819",
    "end": "242700"
  },
  {
    "text": "customer portal for all their micro services in their backend and it's running since two or three years so and",
    "start": "242700",
    "end": "248340"
  },
  {
    "text": "they are still doing fine I can still log in so it's they should do fine",
    "start": "248340",
    "end": "254060"
  },
  {
    "text": "so now we are done with the presentation let's go right into the code",
    "start": "254099",
    "end": "259620"
  },
  {
    "text": "so we are here in IntelliJ and this is what I've opened here is a so-called kts",
    "start": "259620",
    "end": "265979"
  },
  {
    "text": "file there are two different types of file types in kotlin the dot KT file",
    "start": "265979",
    "end": "271500"
  },
  {
    "text": "this is like the normal c-sharp file or like a Java file and then it's the dot kts file the kts stands for kotlin",
    "start": "271500",
    "end": "278940"
  },
  {
    "text": "script that's not like something like Java and JavaScript this only means that this is like compiled in memory so I can",
    "start": "278940",
    "end": "286020"
  },
  {
    "text": "do something like this I can say I have my print line here and as you can see now it immediately",
    "start": "286020",
    "end": "292860"
  },
  {
    "text": "compiles and but that it outputs it right beside this is a feature of IntelliJ so",
    "start": "292860",
    "end": "298440"
  },
  {
    "text": "um this is like a worksheet file and I'm using this worksheet file because this way I can immediately output the value",
    "start": "298440",
    "end": "304500"
  },
  {
    "text": "I've been I've been showing you so I don't have to like open a terminal or something like this so but everything I show you in this",
    "start": "304500",
    "end": "311580"
  },
  {
    "text": "file you can do in a normal um kotlin file besides running",
    "start": "311580",
    "end": "316680"
  },
  {
    "text": "um code on top level kotlin supports top level functions but not like code on",
    "start": "316680",
    "end": "322199"
  },
  {
    "text": "this level so I would have to like wrap it in a main function that I can um to",
    "start": "322199",
    "end": "327300"
  },
  {
    "text": "be able to execute it and if I would use a KT file but let's get started",
    "start": "327300",
    "end": "333660"
  },
  {
    "text": "so the first thing I'd like to show you is something real simple like how can you initiate uh instantiate a variable",
    "start": "333660",
    "end": "340259"
  },
  {
    "text": "so you would do it like this in kotlin you say let's say NDC Oslo here and as",
    "start": "340259",
    "end": "346560"
  },
  {
    "text": "you can see now the we have the bar keyword then we have the name of the of the property and then we have the type",
    "start": "346560",
    "end": "352620"
  },
  {
    "text": "so what we can do because kotlin knows type inference we can remove this type here and kotlin still knows that this is",
    "start": "352620",
    "end": "359580"
  },
  {
    "text": "a string of course if I now say I'd like to change this to name",
    "start": "359580",
    "end": "365460"
  },
  {
    "text": "as we can see this of course works but if I want to change this to a one this doesn't work because even if I've removed the type it's still strictly",
    "start": "365460",
    "end": "372539"
  },
  {
    "text": "typed so but because kotlin really wants us to write immutable code whenever possible",
    "start": "372539",
    "end": "378660"
  },
  {
    "text": "kotlin also provides the Vel keyword and now this is final so I can no longer",
    "start": "378660",
    "end": "386780"
  },
  {
    "text": "reassign the value so but now how can I do for example",
    "start": "386780",
    "end": "392580"
  },
  {
    "text": "things like string concatenation I could do it like this this is how we would do it in Java but",
    "start": "392580",
    "end": "398819"
  },
  {
    "text": "of course in c-sharp because it's funny because I've um taken a look into C sharp a little bit more and by preparing",
    "start": "398819",
    "end": "405600"
  },
  {
    "text": "this talk and I've seen that many things we have in kotlin are heavily influenced by c-sharp so you guys will will will",
    "start": "405600",
    "end": "412259"
  },
  {
    "text": "um feel at home so we can do instead of concatenating it we can just use the",
    "start": "412259",
    "end": "417660"
  },
  {
    "text": "dollar sign here and then access our property right inside of our string now we can go even further of course we",
    "start": "417660",
    "end": "424500"
  },
  {
    "text": "can say we want to access the length of the property and then we have to use curly braces",
    "start": "424500",
    "end": "430400"
  },
  {
    "text": "so the next thing is how can we do multi-line strings so let's say we want to create a multi-line string we can use",
    "start": "430800",
    "end": "437639"
  },
  {
    "text": "quotation uppercase here these quotations and then wrap our",
    "start": "437639",
    "end": "444479"
  },
  {
    "text": "string in it I have to now do a split view so that we can see line breaks and",
    "start": "444479",
    "end": "450120"
  },
  {
    "text": "as you can see now nothing really changed but I can now say a write a new line here",
    "start": "450120",
    "end": "457080"
  },
  {
    "text": "and we can now say it's Friday already",
    "start": "457080",
    "end": "463620"
  },
  {
    "text": "and if we now compile this as you can see we now have like this this",
    "start": "463620",
    "end": "468780"
  },
  {
    "text": "indentation here to fix this we can say trim indentation and kotlin then figures",
    "start": "468780",
    "end": "475380"
  },
  {
    "text": "out it tries to figure out how um we can indent this but because we",
    "start": "475380",
    "end": "481380"
  },
  {
    "text": "have here started on not only new line it doesn't know how to do this but if we",
    "start": "481380",
    "end": "486419"
  },
  {
    "text": "change this here now it has removed the indentation you can also use for example train margin and say I want to create a prefix",
    "start": "486419",
    "end": "495539"
  },
  {
    "text": "myself then can use it like this to prefix your code and to make sure that you can use your",
    "start": "495539",
    "end": "503220"
  },
  {
    "text": "own prefixes this is how you can use multi-line strings of course in there you can also",
    "start": "503220",
    "end": "508379"
  },
  {
    "text": "use your dollar sign and then to access the variables but let's go to another",
    "start": "508379",
    "end": "513959"
  },
  {
    "text": "topic so kotlin because it really wants us to use immutable code whenever",
    "start": "513959",
    "end": "519180"
  },
  {
    "text": "possible they also have changed many of the statements in in Java or in which",
    "start": "519180",
    "end": "524399"
  },
  {
    "text": "which are statements in Java in C sharp to Expressions so what they what we",
    "start": "524399",
    "end": "529560"
  },
  {
    "text": "would do normally is like we have this string here let's call it let's um initialize it empty and we would say",
    "start": "529560",
    "end": "535320"
  },
  {
    "text": "if for example true we say name NDC else we would say name equals",
    "start": "535320",
    "end": "544200"
  },
  {
    "text": "nothing now because of that we would have to make our variable mutable so to fix this",
    "start": "544200",
    "end": "550800"
  },
  {
    "text": "kotlin said well we will make this if statement of the statement but also an expression so what we can do here is we",
    "start": "550800",
    "end": "557459"
  },
  {
    "text": "can put this on the same line and remove this explicit um",
    "start": "557459",
    "end": "563339"
  },
  {
    "text": "assignment and as you can see now this compiles and as we can see if we check",
    "start": "563339",
    "end": "568680"
  },
  {
    "text": "what the name contains it contains NDC because it's just it takes return the",
    "start": "568680",
    "end": "574080"
  },
  {
    "text": "return of the if else expression and because of that we can just remove this VAR and make it a well because we",
    "start": "574080",
    "end": "582660"
  },
  {
    "text": "no no longer have to reassign the value so now we have just a final variable here instead",
    "start": "582660",
    "end": "589320"
  },
  {
    "text": "the same thing we could do for example if it if we'd like to use try catch we can say we have try catch here",
    "start": "589320",
    "end": "597480"
  },
  {
    "text": "and as you can see this little compiles and we don't have to like re um assign a",
    "start": "597480",
    "end": "602760"
  },
  {
    "text": "value in our catch block but can only use like the last element um of our try or the last element of our",
    "start": "602760",
    "end": "609240"
  },
  {
    "text": "catch block to assign it to our to our name and if you would now say for example we",
    "start": "609240",
    "end": "614880"
  },
  {
    "text": "have here throw exception then in this case it would go into the",
    "start": "614880",
    "end": "620459"
  },
  {
    "text": "catch block and now in name there is nothing safe in it because",
    "start": "620459",
    "end": "625920"
  },
  {
    "text": "um the dry block wasn't successful another thing you can do is of course",
    "start": "625920",
    "end": "632820"
  },
  {
    "text": "pattern matching so we don't know switch in kotlin but what we know instead is the when expression so let's just create",
    "start": "632820",
    "end": "640800"
  },
  {
    "text": "like a a type and an object which can take any um kind of of type this any is like in",
    "start": "640800",
    "end": "647940"
  },
  {
    "text": "Java object or also like you can save anything if you'd like so we have this",
    "start": "647940",
    "end": "653040"
  },
  {
    "text": "when expression here and we say well with any we can say well if this is a",
    "start": "653040",
    "end": "658079"
  },
  {
    "text": "string we just say let's print",
    "start": "658079",
    "end": "663740"
  },
  {
    "text": "a string and now of course because we are in this Branch we can we currently knows that",
    "start": "664680",
    "end": "671760"
  },
  {
    "text": "this string it is this any is a string so we can access the properties of this string and can",
    "start": "671760",
    "end": "677880"
  },
  {
    "text": "say it all with the length and it's a string with length 0 and we couldn't do this of course if you were a",
    "start": "677880",
    "end": "684600"
  },
  {
    "text": "not in this Branch because in the other branches this would just be of type any and any doesn't have the property length",
    "start": "684600",
    "end": "690300"
  },
  {
    "text": "on it so we can go in further we can say well let's say something is in a Range so we can say",
    "start": "690300",
    "end": "697860"
  },
  {
    "text": "this is in a range from 1 to 10 then we can say",
    "start": "697860",
    "end": "703019"
  },
  {
    "text": "any is in range 1 to 10. and if I now change this for example to a 2",
    "start": "703019",
    "end": "709140"
  },
  {
    "text": "then we can see that it shows is in range one two uh one to ten now we can",
    "start": "709140",
    "end": "715380"
  },
  {
    "text": "of course not just print out something but because it's not just an a statement it's also an expression we can do the",
    "start": "715380",
    "end": "721320"
  },
  {
    "text": "following we can say we want to remove this and we want to save this in a result",
    "start": "721320",
    "end": "727440"
  },
  {
    "text": "here and then we get an error because we don't have provided a catch a default",
    "start": "727440",
    "end": "734640"
  },
  {
    "text": "case because if it's not a string or this range is not correct then we have to provide something else so we say else",
    "start": "734640",
    "end": "740760"
  },
  {
    "text": "and we say nothing found for example and now as you can see",
    "start": "740760",
    "end": "746399"
  },
  {
    "text": "we get 2 is in range one to ten if I change this for example to an 11",
    "start": "746399",
    "end": "751500"
  },
  {
    "text": "then I will get back nothing found so this way we can use also this this one expression to not only like assign",
    "start": "751500",
    "end": "758760"
  },
  {
    "text": "something and do some break and to return in there but we can then just assign the value we get in these in",
    "start": "758760",
    "end": "765660"
  },
  {
    "text": "these branches into our result variable so but now let's go to some functions so",
    "start": "765660",
    "end": "772920"
  },
  {
    "text": "we have the the fun keyword let's say we have hello here and we have our string",
    "start": "772920",
    "end": "778440"
  },
  {
    "text": "and we return a string here and we say hello",
    "start": "778440",
    "end": "783779"
  },
  {
    "text": "and we have the name now of course we can't just call this like this and you see and let's save it in the variable",
    "start": "783779",
    "end": "791220"
  },
  {
    "text": "and as 16 of course we can save this in a variable and we can check the what the value here is and we can see Hello NDC",
    "start": "791220",
    "end": "798540"
  },
  {
    "text": "now kotlin has some special features in the function so the first thing is you don't have to specify Vel or VAR why because",
    "start": "798540",
    "end": "807620"
  },
  {
    "text": "the properties you pass in the functions are always immutable so you can't do this because these are immutable so",
    "start": "807620",
    "end": "814320"
  },
  {
    "text": "kotlin doesn't want you to change these now the other thing is if you have a",
    "start": "814320",
    "end": "820380"
  },
  {
    "text": "function which just immediately returns something so if there is no code here",
    "start": "820380",
    "end": "825660"
  },
  {
    "text": "prior but it just returns immediately then you can remove these curly braces",
    "start": "825660",
    "end": "831600"
  },
  {
    "text": "and return and create like an expression body so what is this we can do the following we remove this curly brace",
    "start": "831600",
    "end": "837480"
  },
  {
    "text": "here this return and we write this on one line and now we have an expression body and we could",
    "start": "837480",
    "end": "843240"
  },
  {
    "text": "even remove this explicit type here because kotlin knows well it",
    "start": "843240",
    "end": "848940"
  },
  {
    "text": "has to be always a string personally I'd like to keep this this return type because we will see later if",
    "start": "848940",
    "end": "855480"
  },
  {
    "text": "we work with nullable types then it's really uh really good if we know if it's",
    "start": "855480",
    "end": "861540"
  },
  {
    "text": "an optional type or uh or a non-nullable type so we have now this now let's just",
    "start": "861540",
    "end": "867000"
  },
  {
    "text": "return here and let's see something interesting if I would say well I don't want to return this I just want to",
    "start": "867000",
    "end": "872880"
  },
  {
    "text": "Output this like this and I want to not return anything as you",
    "start": "872880",
    "end": "880019"
  },
  {
    "text": "can see the result and everything still compiles and now if I recompile it we",
    "start": "880019",
    "end": "885240"
  },
  {
    "text": "can see that we get something back from this function even if we have not provided anything even if we don't",
    "start": "885240",
    "end": "891600"
  },
  {
    "text": "provide a return because we get a unit back unit is also like a type in kotlin",
    "start": "891600",
    "end": "897720"
  },
  {
    "text": "and the cool thing about this is that we can still work with the thing we got back from this so we can write much more",
    "start": "897720",
    "end": "905220"
  },
  {
    "text": "fluent code than if we would have to check oh well this is a void function we don't get anything back so we would then",
    "start": "905220",
    "end": "910980"
  },
  {
    "text": "have to like handle it differently like for example also if you're using a mocking framework you maybe also have",
    "start": "910980",
    "end": "916260"
  },
  {
    "text": "already had the problem that oh well this is a void function I have to like mock these in the other way than I would",
    "start": "916260",
    "end": "922680"
  },
  {
    "text": "do with a function which which returns something so this problem we don't have because we can use unit I will go deeper",
    "start": "922680",
    "end": "929279"
  },
  {
    "text": "why this is important later when we see the extension functions so but let's create a little bit a more",
    "start": "929279",
    "end": "937440"
  },
  {
    "text": "complex function let's create a with a create box function which takes an integer for the width and integer for",
    "start": "937440",
    "end": "944040"
  },
  {
    "text": "the height and it just returns a string and we say then return uh",
    "start": "944040",
    "end": "950820"
  },
  {
    "text": "box with and then we have the width here",
    "start": "950820",
    "end": "957660"
  },
  {
    "text": "and height and we have the height so we just call this we say well 150",
    "start": "957660",
    "end": "965699"
  },
  {
    "text": "let's say 100 as you can see this works fine a box between 150 and",
    "start": "965699",
    "end": "971220"
  },
  {
    "text": "height 100. now let's let's say we go back into this code later and we say oh",
    "start": "971220",
    "end": "976800"
  },
  {
    "text": "well we have to add like the coordinates to it let's add X and Y",
    "start": "976800",
    "end": "983100"
  },
  {
    "text": "and then we go we see oldest Stone on compiles well I have to add here my X and Y",
    "start": "983100",
    "end": "988320"
  },
  {
    "text": "now as you can see because we are in IntelliJ we see that this um these properties are now in the wrong",
    "start": "988320",
    "end": "994620"
  },
  {
    "text": "order so now if we see we have a box between 0 and height zero so let's just say we have this x here just",
    "start": "994620",
    "end": "1001759"
  },
  {
    "text": "to show um as you can see now now the wrong properties are filled with with these",
    "start": "1001759",
    "end": "1007040"
  },
  {
    "text": "values we put in but maybe you will see this now here in in the code but let's say you create a pull request or a merch",
    "start": "1007040",
    "end": "1013399"
  },
  {
    "text": "request and in your gitlab or in your in your other source control you will then",
    "start": "1013399",
    "end": "1019279"
  },
  {
    "text": "not see what these properties really mean you will only see 150 hundred zero and zero so it's not really that clear",
    "start": "1019279",
    "end": "1026900"
  },
  {
    "text": "what these properties really try to do and because of that um kotlin also is as said heavily influenced by",
    "start": "1026900",
    "end": "1033860"
  },
  {
    "text": "also by c-sharp so what you could do is you can say well I want the width to be 150. the height",
    "start": "1033860",
    "end": "1041418"
  },
  {
    "text": "to be 100 x to be 0 and Y I also do P0 now what we hear often do is because we",
    "start": "1041419",
    "end": "1049640"
  },
  {
    "text": "just passed in 0 and 0 for X and Y if we are not interested in these two coordinates we what we then could do of",
    "start": "1049640",
    "end": "1055880"
  },
  {
    "text": "course we could create like an overloaded function and then say well I want something where I only want to provide the width and the height and",
    "start": "1055880",
    "end": "1062240"
  },
  {
    "text": "nothing else but this is quite repetitive and we would have to do this for each combination so instead of this kotlin",
    "start": "1062240",
    "end": "1069440"
  },
  {
    "text": "knows default arguments so we can say well for X here I want a zero by default",
    "start": "1069440",
    "end": "1074480"
  },
  {
    "text": "and for y I also went once uh one zero so I can remove this and what we also could do is we could",
    "start": "1074480",
    "end": "1081440"
  },
  {
    "text": "also say well if we do not provide the height we could say we just want to take",
    "start": "1081440",
    "end": "1086539"
  },
  {
    "text": "the value with saved in the width so what we now could do is we could just remove everything beside the width and",
    "start": "1086539",
    "end": "1094340"
  },
  {
    "text": "as we can see everything still compiles because this way we've created like",
    "start": "1094340",
    "end": "1100280"
  },
  {
    "text": "these overloaded functions but having only one function um to achieve the same thing basically",
    "start": "1100280",
    "end": "1105740"
  },
  {
    "text": "and it's also much more it's it's also much more clear what this this 150",
    "start": "1105740",
    "end": "1111080"
  },
  {
    "text": "really means if we use these named arguments here now we can even do this we can say convert to expression body and put this",
    "start": "1111080",
    "end": "1118640"
  },
  {
    "text": "like into one line or into two lines here without the curly braces so this is this is how functions work we",
    "start": "1118640",
    "end": "1126919"
  },
  {
    "text": "will come back to this later but just to give you a brief introduction now the next thing is like nowadays we are using",
    "start": "1126919",
    "end": "1133160"
  },
  {
    "text": "link or you're using stream to um to iterate over our list of course but let's keep it a little bit",
    "start": "1133160",
    "end": "1139580"
  },
  {
    "text": "um a little bit old school and say we sort with with the for Loops here and let's say we want to iterate over an",
    "start": "1139580",
    "end": "1145940"
  },
  {
    "text": "index how can we do this in in kotlin we say we have our I and we say we want to iterate over a range so we can say we",
    "start": "1145940",
    "end": "1152360"
  },
  {
    "text": "start with zero and one until 10. now we say print line and output what we found",
    "start": "1152360",
    "end": "1158120"
  },
  {
    "text": "here that we can see this outputs 0 to 10. now off we have the problem that we for example have an array and we don't",
    "start": "1158120",
    "end": "1164240"
  },
  {
    "text": "want to Output like the array on we want to Output only until the array length",
    "start": "1164240",
    "end": "1169700"
  },
  {
    "text": "but not including the length so how can we do this we can use until",
    "start": "1169700",
    "end": "1176539"
  },
  {
    "text": "to do this and now as you can see it outputs 0 to 9. now what is this until function if we check this is an infix",
    "start": "1176539",
    "end": "1184460"
  },
  {
    "text": "function which is called like on the integer and takes a second integer as an",
    "start": "1184460",
    "end": "1189740"
  },
  {
    "text": "argument so C sharp m in C sharp you guys already know this for the extension functions but",
    "start": "1189740",
    "end": "1196480"
  },
  {
    "text": "this is something a little bit special in in kotlin where you can also use infix and this means that you don't have",
    "start": "1196480",
    "end": "1202820"
  },
  {
    "text": "to provide like the parentheses but we will see this later in in the extension function but just uh to to give you a",
    "start": "1202820",
    "end": "1209480"
  },
  {
    "text": "brief introduction about this now this until here this returns an INT range so what we can now do is we can say well I",
    "start": "1209480",
    "end": "1216679"
  },
  {
    "text": "want to step of two so I want to jump over each second element so we get only",
    "start": "1216679",
    "end": "1222799"
  },
  {
    "text": "0 2 4 6 and 8 output and let's say we want to go from let's",
    "start": "1222799",
    "end": "1229400"
  },
  {
    "text": "say 10 to 0. how could we do this well we can't use this because 10 is always",
    "start": "1229400",
    "end": "1235100"
  },
  {
    "text": "greater than zero and we can't iterate over this it will never even iterate once but instead we can use",
    "start": "1235100",
    "end": "1243020"
  },
  {
    "text": "down to zero and as you can see now this outputs 10 to 0. now we can of course",
    "start": "1243020",
    "end": "1249200"
  },
  {
    "text": "also use the step here again as we can see 10 to 0 which which jumps",
    "start": "1249200",
    "end": "1254539"
  },
  {
    "text": "over each second element now this is how we can do iterate over the indexes",
    "start": "1254539",
    "end": "1260539"
  },
  {
    "text": "but let's say we have a list here instead and we have list of and we have in hello and and you see here now just a quick",
    "start": "1260539",
    "end": "1268580"
  },
  {
    "text": "side note lists and sets and also Maps or all immutable by default in kotlin so",
    "start": "1268580",
    "end": "1275660"
  },
  {
    "text": "if I would say here list dot add this will not compile because there is",
    "start": "1275660",
    "end": "1282020"
  },
  {
    "text": "no ad on this list interface but I have to change this to mutable list off",
    "start": "1282020",
    "end": "1288020"
  },
  {
    "text": "to be able to add an element to a list or remove an element to a list",
    "start": "1288020",
    "end": "1293659"
  },
  {
    "text": "because kotlin wants us as already mentioned to use immutable code whenever possible",
    "start": "1293659",
    "end": "1299000"
  },
  {
    "text": "so but let's change this back to list off because we don't need we don't need to add",
    "start": "1299000",
    "end": "1304460"
  },
  {
    "text": "something now we can iterate over this by using this list we have here as we can see now we get hello and ndcback now",
    "start": "1304460",
    "end": "1313760"
  },
  {
    "text": "kotlin has many many different functions on the lists as you can see",
    "start": "1313760",
    "end": "1320780"
  },
  {
    "text": "you can almost everything you can think of and um you have maybe you have already um if you wanted something you",
    "start": "1320780",
    "end": "1327500"
  },
  {
    "text": "then go on to stack Overflow copy this and put this into your code if you want some like special kind of filter most of",
    "start": "1327500",
    "end": "1334460"
  },
  {
    "text": "it we're not everything I ever needed is already here from kotlin implemented so",
    "start": "1334460",
    "end": "1340159"
  },
  {
    "text": "associate by also you have your different filters filter not nulls or remove the remove the null elements and",
    "start": "1340159",
    "end": "1347179"
  },
  {
    "text": "all the things are already here and you could use them so but we keep it simple",
    "start": "1347179",
    "end": "1352220"
  },
  {
    "text": "we say we want to use this with index now what does this with index do this",
    "start": "1352220",
    "end": "1358340"
  },
  {
    "text": "like creates an index beside our values that we can like access the current",
    "start": "1358340",
    "end": "1363440"
  },
  {
    "text": "index we are looping through and what we now could do is of course we could say we have this I dot value or I dot index",
    "start": "1363440",
    "end": "1370220"
  },
  {
    "text": "but instead of this we can use destructuring so what can we do we can",
    "start": "1370220",
    "end": "1375679"
  },
  {
    "text": "say we can use parentheses and we can say the first value of this like it's like a",
    "start": "1375679",
    "end": "1381559"
  },
  {
    "text": "tuple here we can use the first value as and save it in I and the second and",
    "start": "1381559",
    "end": "1386840"
  },
  {
    "text": "save it in value and now we can access it like this",
    "start": "1386840",
    "end": "1391658"
  },
  {
    "text": "and as you can see now this outputs the uh the index beside the value without",
    "start": "1392059",
    "end": "1397220"
  },
  {
    "text": "having to like access the property of this this object of which of this",
    "start": "1397220",
    "end": "1402260"
  },
  {
    "text": "indexed value so the next thing is what do we often do in",
    "start": "1402260",
    "end": "1409760"
  },
  {
    "text": "for Loops we have already as you have seen we have to check for null so to fix this kotlin has implemented uh in my",
    "start": "1409760",
    "end": "1417020"
  },
  {
    "text": "opinion really cool way to do null safety so let's say we have our function here we have our hello again and we have our",
    "start": "1417020",
    "end": "1423500"
  },
  {
    "text": "string here and we return a string now how would you check for null and if um",
    "start": "1423500",
    "end": "1429919"
  },
  {
    "text": "if you want to check if the property you put in is null or not well you would say normally we have a name not equals to",
    "start": "1429919",
    "end": "1435740"
  },
  {
    "text": "null then we return hello name otherwise we say return null now we",
    "start": "1435740",
    "end": "1443840"
  },
  {
    "text": "get two errors here one arrow and one one warning as you can see here kotlin tells us well name not equals",
    "start": "1443840",
    "end": "1452240"
  },
  {
    "text": "null is always true because kotlin tells you well this string here",
    "start": "1452240",
    "end": "1457340"
  },
  {
    "text": "doesn't allow to put in a string type or an object which is null",
    "start": "1457340",
    "end": "1463400"
  },
  {
    "text": "so basically we can check this if I say I have this hello here and I pass a null this will also not compile because",
    "start": "1463400",
    "end": "1469880"
  },
  {
    "text": "kotlin knows two different types for each of the types you have it knows the",
    "start": "1469880",
    "end": "1475520"
  },
  {
    "text": "non-nullable type and the nullable type the nullable type is if you add a question mark behind as you can see now",
    "start": "1475520",
    "end": "1482059"
  },
  {
    "text": "this value this check is now gone away and kotlin knows okay it's it's nice",
    "start": "1482059",
    "end": "1488179"
  },
  {
    "text": "that you use this not equal now to check for null but this return here doesn't",
    "start": "1488179",
    "end": "1493220"
  },
  {
    "text": "work because we said this has always to be a string so to fix this we add a question mark here now what does this",
    "start": "1493220",
    "end": "1500059"
  },
  {
    "text": "question mark really do if you see the compiled jvm byte code there is not just like another another type created like",
    "start": "1500059",
    "end": "1507320"
  },
  {
    "text": "called nullable string or something like this it's just it creates comments in your jvm byte code and because the jvm",
    "start": "1507320",
    "end": "1515179"
  },
  {
    "text": "compiler jdk compiler doesn't really doesn't read these comments but the kotlin compiler reads this comment and",
    "start": "1515179",
    "end": "1521240"
  },
  {
    "text": "find out okay this function here takes an optional string and returns an optional string sorry bytecode is not",
    "start": "1521240",
    "end": "1527720"
  },
  {
    "text": "manipulated or anything like this but it's just it's just a comments in",
    "start": "1527720",
    "end": "1532760"
  },
  {
    "text": "your jvm in your bytecode so this is now fine but let's make a",
    "start": "1532760",
    "end": "1538700"
  },
  {
    "text": "little bit of more of a complex example so I have to create two classes here I",
    "start": "1538700",
    "end": "1544159"
  },
  {
    "text": "will talk about classes later I just have to create them here to show you how how a more complex example can work so",
    "start": "1544159",
    "end": "1551600"
  },
  {
    "text": "let's say we have a first name here which is a string and we have an address here",
    "start": "1551600",
    "end": "1558220"
  },
  {
    "text": "and this address has",
    "start": "1559700",
    "end": "1563740"
  },
  {
    "text": "has a street it's simple and now let's say we have a function here and call this get Street",
    "start": "1566120",
    "end": "1573799"
  },
  {
    "text": "and it takes a person and it returns a string",
    "start": "1573799",
    "end": "1578840"
  },
  {
    "text": "now we could say for example well if the person not equals null",
    "start": "1578840",
    "end": "1585400"
  },
  {
    "text": "null and the person.address not equals null in this case return",
    "start": "1585740",
    "end": "1592659"
  },
  {
    "text": "person.address dot Street now as cotton already tells well there is",
    "start": "1592659",
    "end": "1599480"
  },
  {
    "text": "nothing nullable here so let's say well we want to allow an analyable person to be put in",
    "start": "1599480",
    "end": "1605120"
  },
  {
    "text": "and we also want to allow a nullable string to be returned so otherwise we say here return null",
    "start": "1605120",
    "end": "1611960"
  },
  {
    "text": "as you can see now everything compiles now but let's change this address to also be nullable",
    "start": "1611960",
    "end": "1618740"
  },
  {
    "text": "now as you can see we can see in IntelliJ we have checked for this for this address to be null and for the",
    "start": "1618740",
    "end": "1624559"
  },
  {
    "text": "person to be not null but kotlin tells you well you're making things way too difficult you can make this much easier",
    "start": "1624559",
    "end": "1630799"
  },
  {
    "text": "so we can use Save calls instead you get from C sharp already know this so we can",
    "start": "1630799",
    "end": "1637700"
  },
  {
    "text": "use person and then use a question mark to say well if this is",
    "start": "1637700",
    "end": "1642860"
  },
  {
    "text": "if this is not null then call address if this is not null then call street now we can remove everything here and even put",
    "start": "1642860",
    "end": "1650299"
  },
  {
    "text": "this in one line and now we have created the exact same code as before but with the save core",
    "start": "1650299",
    "end": "1656659"
  },
  {
    "text": "with the safeguards we could make it much more concise and if we now say we",
    "start": "1656659",
    "end": "1662000"
  },
  {
    "text": "have our street here and we say we have get street we pass in let's say no",
    "start": "1662000",
    "end": "1668240"
  },
  {
    "text": "then of course we would get um now Street back so this string here",
    "start": "1668240",
    "end": "1673580"
  },
  {
    "text": "is implicitly nullable so let's say we want something else we want this string we really want a string then as you can",
    "start": "1673580",
    "end": "1680960"
  },
  {
    "text": "see we get an error because you can't assign a possible nullable value to a string to a not nullable string so to",
    "start": "1680960",
    "end": "1688100"
  },
  {
    "text": "fix this we can use the Elvis operator and can say well if then if this gets treat is null on the left side we use um",
    "start": "1688100",
    "end": "1695419"
  },
  {
    "text": "the right side of this of this check and can say for example no Street and the straight here as you can see now",
    "start": "1695419",
    "end": "1702400"
  },
  {
    "text": "it contains no stream so this is how you can use the anal",
    "start": "1702400",
    "end": "1708740"
  },
  {
    "text": "safety to make your code much more concise and also make sure that everything you pass in or return to a",
    "start": "1708740",
    "end": "1714140"
  },
  {
    "text": "function really is some it has has the type you expect it to be",
    "start": "1714140",
    "end": "1719360"
  },
  {
    "text": "so now after the now saved let's go a little bit more into a functional",
    "start": "1719360",
    "end": "1725360"
  },
  {
    "text": "programming so let's have our list here again and we have our list off and we say hello and world and NDC now what",
    "start": "1725360",
    "end": "1735260"
  },
  {
    "text": "we'd like to do is we want to do a filter on the list and like filter all the strings which are not of length five",
    "start": "1735260",
    "end": "1742039"
  },
  {
    "text": "so how can we do this well let's create such the function call this a string length five and we pass it in the string",
    "start": "1742039",
    "end": "1749059"
  },
  {
    "text": "and we say string length equals five and now we can have our our result here and",
    "start": "1749059",
    "end": "1756860"
  },
  {
    "text": "we say list dot filter now as you can see there are many ways to do this but let's call let's start simple",
    "start": "1756860",
    "end": "1763520"
  },
  {
    "text": "we have a filter function which just takes a Lambda and",
    "start": "1763520",
    "end": "1769460"
  },
  {
    "text": "what we then can do is we pass it in this element and we say is string length",
    "start": "1769460",
    "end": "1775279"
  },
  {
    "text": "five and pass it in the element here now in kotlin if you have a function which",
    "start": "1775279",
    "end": "1783440"
  },
  {
    "text": "if you have a function which a Lambda which takes only one element and one",
    "start": "1783440",
    "end": "1789140"
  },
  {
    "text": "input element you can remove this and say this is implicitly it because it",
    "start": "1789140",
    "end": "1796279"
  },
  {
    "text": "knows that it's the only thing that goes into the Lambda so it has to be this it now you have to be careful of course if",
    "start": "1796279",
    "end": "1802159"
  },
  {
    "text": "you have like something a wrapped Lambda or something like this then um if you're not sure that you",
    "start": "1802159",
    "end": "1808120"
  },
  {
    "text": "explicitly know what this it really is just explicitly then state it because otherwise it gets complicated to read",
    "start": "1808120",
    "end": "1814580"
  },
  {
    "text": "the code sometimes but in here I think it's it's easily readable then the other thing you can do is if you have a",
    "start": "1814580",
    "end": "1820460"
  },
  {
    "text": "function and the only parameter of this function is a Lambda like here you can move the Lambda out of the function and",
    "start": "1820460",
    "end": "1829100"
  },
  {
    "text": "if then the function has has no more arguments in it we can just remove them",
    "start": "1829100",
    "end": "1835279"
  },
  {
    "text": "at all and now we have just our Lambda here with our spring line five call and",
    "start": "1835279",
    "end": "1840740"
  },
  {
    "text": "this is a little bit more concise so but we can go further we can make this a string length 5 itself a Lambda so let's",
    "start": "1840740",
    "end": "1848419"
  },
  {
    "text": "just copy this comment this out and say we have this is now a variable",
    "start": "1848419",
    "end": "1855500"
  },
  {
    "text": "instead and we can then say this is a Lambda here",
    "start": "1855500",
    "end": "1862600"
  },
  {
    "text": "we can create a Lambda from it and as you can see nothing really changed it's it's Lambda is still like a normal",
    "start": "1863840",
    "end": "1870080"
  },
  {
    "text": "function but what you could do also is you could say well this takes a string",
    "start": "1870080",
    "end": "1875419"
  },
  {
    "text": "and returns a Boolean and then you could of course remove this here and use it because kotlin now knows",
    "start": "1875419",
    "end": "1883159"
  },
  {
    "text": "what the interface of the of the class of the Lambda really is",
    "start": "1883159",
    "end": "1888559"
  },
  {
    "text": "so but because now this is a Lambda what we could do here is we could say",
    "start": "1888559",
    "end": "1894080"
  },
  {
    "text": "that we just pass this Lambda to our filter and now as you can see this is",
    "start": "1894080",
    "end": "1899120"
  },
  {
    "text": "exactly the same if we check the result here we can see that this still outputs hello world so this works fine and so",
    "start": "1899120",
    "end": "1906980"
  },
  {
    "text": "this is really cool but let's wouldn't it be cool if it just could call this a string length 5 on our string itself so",
    "start": "1906980",
    "end": "1914000"
  },
  {
    "text": "if we could say hello for example and then is string length five",
    "start": "1914000",
    "end": "1920600"
  },
  {
    "text": "the guys um the guys of you who work with C sharp of course have this extension functions so but for the other",
    "start": "1920600",
    "end": "1927020"
  },
  {
    "text": "ones what are extension functions well let's just remove this and remove these two things here because we don't need",
    "start": "1927020",
    "end": "1933320"
  },
  {
    "text": "them so let's say you want to call a function on a type which already",
    "start": "1933320",
    "end": "1941899"
  },
  {
    "text": "exists how can we do this we can create a so-called extension function you have already seen before with these until we",
    "start": "1941899",
    "end": "1948559"
  },
  {
    "text": "have seen at the at the loops or the step function so what we now could do is we can say we want to call this is",
    "start": "1948559",
    "end": "1955399"
  },
  {
    "text": "strangling five on our string and now we can remove here this",
    "start": "1955399",
    "end": "1962720"
  },
  {
    "text": "properties argument and can say instead of the string we pass we use this because this refers to the string we are",
    "start": "1962720",
    "end": "1970520"
  },
  {
    "text": "using it on now it's important to say many of many of the people who will see a extension function for the first time",
    "start": "1970520",
    "end": "1976399"
  },
  {
    "text": "think there is some kind of black magic behind it that like the class gets like the byte code gets changed or something",
    "start": "1976399",
    "end": "1983000"
  },
  {
    "text": "gets added to an existing Clause this is not the case what really happens behind the scene is it creates a function",
    "start": "1983000",
    "end": "1990500"
  },
  {
    "text": "in the basic Library which takes as a first argument like you would do in in C",
    "start": "1990500",
    "end": "1996260"
  },
  {
    "text": "sharp this string here and all other arguments you pass in here as the as the",
    "start": "1996260",
    "end": "2002559"
  },
  {
    "text": "rest of the arguments so this way it's really easy to extend functionality",
    "start": "2002559",
    "end": "2008380"
  },
  {
    "text": "to existing classes even if you don't have access to them for example if you're using a library you can just",
    "start": "2008380",
    "end": "2014080"
  },
  {
    "text": "extend them by using an extension function instead of inheriting from it so",
    "start": "2014080",
    "end": "2019960"
  },
  {
    "text": "as you can see now this now compiles and we get true if I remove something then I get falls back from it",
    "start": "2019960",
    "end": "2026919"
  },
  {
    "text": "now as you can see here the cool thing here is okay you can do this on a string but wouldn't it be nice",
    "start": "2026919",
    "end": "2033760"
  },
  {
    "text": "if I could call this also on a nullable type so let's say we have a VAR here and this is a nullable type",
    "start": "2033760",
    "end": "2041559"
  },
  {
    "text": "and I initialize it with null now",
    "start": "2041559",
    "end": "2046898"
  },
  {
    "text": "if I could call this on a nullable name well I can do this I just need to say",
    "start": "2047140",
    "end": "2052480"
  },
  {
    "text": "well this is not only on the string but also on the nullable string now I have just to check if this this here exists",
    "start": "2052480",
    "end": "2059320"
  },
  {
    "text": "and now I can call the a string link 5 function on a null type because as",
    "start": "2059320",
    "end": "2065679"
  },
  {
    "text": "already mentioned we just call this a string length five function with this with this name as an argument",
    "start": "2065679",
    "end": "2072760"
  },
  {
    "text": "so we can now do this what we could also do is we could create extension properties so we have this name here and",
    "start": "2072760",
    "end": "2079839"
  },
  {
    "text": "we say we want to create the property like this we can then say this is not a function anymore but this is a property",
    "start": "2079839",
    "end": "2086800"
  },
  {
    "text": "we can then say this is of type Boolean and can say",
    "start": "2086800",
    "end": "2092618"
  },
  {
    "text": "we have a get here and can then say",
    "start": "2092619",
    "end": "2098879"
  },
  {
    "text": "so and can then say by using get we get back if this is length five so as we can see here this",
    "start": "2100240",
    "end": "2106660"
  },
  {
    "text": "returns false of course if I add here hello then",
    "start": "2106660",
    "end": "2111700"
  },
  {
    "text": "this returns true so this way you can use extension functions to extend your existing classes or even like strings or",
    "start": "2111700",
    "end": "2119140"
  },
  {
    "text": "your primitive types by really easy without having to like inherit from it",
    "start": "2119140",
    "end": "2125460"
  },
  {
    "text": "um yeah it's because here it's it's because of this this the safe call because this returns then false because",
    "start": "2134740",
    "end": "2141760"
  },
  {
    "text": "it's it it isn't length equals to five yeah exactly yeah",
    "start": "2141760",
    "end": "2147359"
  },
  {
    "text": "now what we could also do is and let's now talk a little bit about how classes",
    "start": "2148420",
    "end": "2154180"
  },
  {
    "text": "work so we have a class here again we have this person here and let's let's um make this really simple we have this",
    "start": "2154180",
    "end": "2160480"
  },
  {
    "text": "string now let's say we have a person one here and let's initiate it with",
    "start": "2160480",
    "end": "2166119"
  },
  {
    "text": "first name now how do classes work now as we can see we have here this well",
    "start": "2166119",
    "end": "2171339"
  },
  {
    "text": "what this means is we don't need like an a body of the class because if you don't pass in anything explicitly if you use",
    "start": "2171339",
    "end": "2178839"
  },
  {
    "text": "well it will create a standard getter for us and we'll create a hidden um private",
    "start": "2178839",
    "end": "2185800"
  },
  {
    "text": "Setters so if we say we have this person one and say first name as we can see we can access this with with my name but if",
    "start": "2185800",
    "end": "2192820"
  },
  {
    "text": "I try to set this to something as you can see this does not work because",
    "start": "2192820",
    "end": "2198280"
  },
  {
    "text": "we don't have specified that this is aware a VAR but if I change this to VAR as you can see we can reassign it so",
    "start": "2198280",
    "end": "2204640"
  },
  {
    "text": "under the hood you are not really accessing the property but you are accessing the Getters and Setters with or which are created from from kotlin um",
    "start": "2204640",
    "end": "2211900"
  },
  {
    "text": "implicitly now let's say you want to inherit this",
    "start": "2211900",
    "end": "2217720"
  },
  {
    "text": "person let's say we have this class here let's call this teacher and we want to extend from this",
    "start": "2217720",
    "end": "2225240"
  },
  {
    "text": "and you I don't care right now um",
    "start": "2225599",
    "end": "2231040"
  },
  {
    "text": "now as you can see this doesn't work because this type is final well because",
    "start": "2231040",
    "end": "2236500"
  },
  {
    "text": "by default all classes in kotlin are file and cannot be inherited from because kotlin doesn't want you to",
    "start": "2236500",
    "end": "2242980"
  },
  {
    "text": "really use inheritance they want to use composition or like the extension functions or extension properties",
    "start": "2242980",
    "end": "2248619"
  },
  {
    "text": "whenever possible but of course you can do this you could say you have this you can make this class open so you can",
    "start": "2248619",
    "end": "2254440"
  },
  {
    "text": "extend to it but as already mentioned if you just want to add like an additional function",
    "start": "2254440",
    "end": "2260560"
  },
  {
    "text": "to it where you for example have to access the first name you can just create an extension function so you",
    "start": "2260560",
    "end": "2266140"
  },
  {
    "text": "could do the following you could say you have your function person here and then you can for example say shouted name",
    "start": "2266140",
    "end": "2273760"
  },
  {
    "text": "and you can then say this is first name dot sorry this here",
    "start": "2273760",
    "end": "2279400"
  },
  {
    "text": "this DOT first name dot uppercase and now if I have my person here I can just",
    "start": "2279400",
    "end": "2284859"
  },
  {
    "text": "call person one dot shouter name and I have access to it so I don't have to use inheritance if I want to add",
    "start": "2284859",
    "end": "2291579"
  },
  {
    "text": "functionality to it now what's Also let's say we want to",
    "start": "2291579",
    "end": "2297160"
  },
  {
    "text": "create like a body for a class if you would like to use like static functions you could use a companion object and",
    "start": "2297160",
    "end": "2303760"
  },
  {
    "text": "could then say well I have my I'm static here and you could then call",
    "start": "2303760",
    "end": "2310240"
  },
  {
    "text": "a person dot I'm static like with with static functions",
    "start": "2310240",
    "end": "2316300"
  },
  {
    "text": "and you don't need static functions because because talking has already mentioned supports top level functions",
    "start": "2316300",
    "end": "2322359"
  },
  {
    "text": "you can't just create like a top level function and then pass um something in it um if you if you need something special",
    "start": "2322359",
    "end": "2329200"
  },
  {
    "text": "but of course if you have like your person class and you have some state in there even if it's not an object then",
    "start": "2329200",
    "end": "2335440"
  },
  {
    "text": "you can use this to have your have your static types I have your static functions and static properties",
    "start": "2335440",
    "end": "2341859"
  },
  {
    "text": "now if you want to create like a private or an your own additional variables",
    "start": "2341859",
    "end": "2347920"
  },
  {
    "text": "which are not in the Constructor you can use it like this you can say let's say remove the shout name here and",
    "start": "2347920",
    "end": "2354760"
  },
  {
    "text": "we say we have our shouted name which is a string",
    "start": "2354760",
    "end": "2360880"
  },
  {
    "text": "and we take this from the first name and we say get here and we say",
    "start": "2360880",
    "end": "2367480"
  },
  {
    "text": "let's just call Print line here and we say",
    "start": "2367480",
    "end": "2373839"
  },
  {
    "text": "get called and now we can use field Fields like this implicit field with",
    "start": "2373839",
    "end": "2379660"
  },
  {
    "text": "lies behind this shouted name and we then return this field and we have the set value",
    "start": "2379660",
    "end": "2388119"
  },
  {
    "text": "where we can say print line set called and we have the field which",
    "start": "2388119",
    "end": "2394359"
  },
  {
    "text": "is then new the value we pass in and we say field equals value now if I now",
    "start": "2394359",
    "end": "2400720"
  },
  {
    "text": "access this here if I access here shouted name",
    "start": "2400720",
    "end": "2407640"
  },
  {
    "text": "then as we can see this returns my name in uppercase if I now set this to something else",
    "start": "2407800",
    "end": "2413920"
  },
  {
    "text": "we can see that a set was called from question to empty so as we can see this",
    "start": "2413920",
    "end": "2419619"
  },
  {
    "text": "works but this is like how get and set Works under the hood and without you",
    "start": "2419619",
    "end": "2424660"
  },
  {
    "text": "providing something it just Returns the field or sets the field",
    "start": "2424660",
    "end": "2430140"
  },
  {
    "text": "now what also is interesting with classes in kotliness let's say we",
    "start": "2431740",
    "end": "2437619"
  },
  {
    "text": "have these two these two um properties here we have person one and person two now if I compare these",
    "start": "2437619",
    "end": "2444400"
  },
  {
    "text": "two by the way double equals in kotlin means that you compare by value so it uses the",
    "start": "2444400",
    "end": "2451540"
  },
  {
    "text": "equals and with triple equals it compares the references so as you can see this returns false but clearly these",
    "start": "2451540",
    "end": "2458740"
  },
  {
    "text": "are the same objects um if you are just looking at the values so we can fix this by using data class",
    "start": "2458740",
    "end": "2465760"
  },
  {
    "text": "as you can see now this returns true because data classes provide for you the equals hash code and two string Methods",
    "start": "2465760",
    "end": "2472300"
  },
  {
    "text": "which then have the possibility to let kotlin really check the the input or the",
    "start": "2472300",
    "end": "2479859"
  },
  {
    "text": "data of your class so what you also could do let's say we",
    "start": "2479859",
    "end": "2484900"
  },
  {
    "text": "add a last name here which is a string and we can then say let's do it like this and like this and",
    "start": "2484900",
    "end": "2493359"
  },
  {
    "text": "now what you also could do is destructuring of data classes so what you could do is you can say well I have",
    "start": "2493359",
    "end": "2499119"
  },
  {
    "text": "my first and my last and I use person one and now if we check what is written in",
    "start": "2499119",
    "end": "2505839"
  },
  {
    "text": "first and in last as you can see this outputs my first MLS",
    "start": "2505839",
    "end": "2512500"
  },
  {
    "text": "name because the data classes support this kind of destructuring",
    "start": "2512500",
    "end": "2517839"
  },
  {
    "text": "so this is how you can use the the data classes now before we go to another",
    "start": "2517839",
    "end": "2524560"
  },
  {
    "text": "topic I'd like to also give you an introduction to these infix functions I've I've shown you prior with this",
    "start": "2524560",
    "end": "2529839"
  },
  {
    "text": "until how you can create one yourself and can create like your own DSL uh your",
    "start": "2529839",
    "end": "2535540"
  },
  {
    "text": "own custom DSL so for example for the ones who have already used Gradle with",
    "start": "2535540",
    "end": "2541060"
  },
  {
    "text": "the kotlin DSL um to to create your your configuration they are also using these infix",
    "start": "2541060",
    "end": "2547420"
  },
  {
    "text": "functions so let's say you have a person here and let's create just a function",
    "start": "2547420",
    "end": "2552460"
  },
  {
    "text": "here and say you have a person as we could of course just now create this in our person but I want to show you how",
    "start": "2552460",
    "end": "2558640"
  },
  {
    "text": "can you do it within with an infix and an extension function so you have your person and you say well I want to have a",
    "start": "2558640",
    "end": "2565359"
  },
  {
    "text": "grids function and then have a second person here and I want to have like this DOT first",
    "start": "2565359",
    "end": "2572200"
  },
  {
    "text": "name greets person DOT first name so we can now of",
    "start": "2572200",
    "end": "2579099"
  },
  {
    "text": "course do the following we can say person one dot greets",
    "start": "2579099",
    "end": "2586000"
  },
  {
    "text": "person two and then we get back uh Christian greets Christian yeah it's",
    "start": "2586000",
    "end": "2591640"
  },
  {
    "text": "not it's I'm reading myself so let's change this to Max so that I'm not creating myself so now as you can see",
    "start": "2591640",
    "end": "2599140"
  },
  {
    "text": "this works but now we can do something cool we can say well we use an infix function and now nothing really changed",
    "start": "2599140",
    "end": "2605619"
  },
  {
    "text": "but we could do what we could do now is we can remove the parentheses here",
    "start": "2605619",
    "end": "2611160"
  },
  {
    "text": "and we can remove this and this still compiles and now this way you can create",
    "start": "2611740",
    "end": "2617260"
  },
  {
    "text": "like fluent code and you could then also do green you could of course then also",
    "start": "2617260",
    "end": "2623920"
  },
  {
    "text": "like put other put other function calls to it like we have seen prior with this int range we could do one until 10 and",
    "start": "2623920",
    "end": "2631300"
  },
  {
    "text": "then step two and then so on and so far and so on and because of this and this is really cool to write your own like um",
    "start": "2631300",
    "end": "2638619"
  },
  {
    "text": "custom DSL functions or your custom dsls or like write fluent code",
    "start": "2638619",
    "end": "2644020"
  },
  {
    "text": "so one more thing which I think is especially interesting for for the ones of who work with Java or with languages",
    "start": "2644020",
    "end": "2651280"
  },
  {
    "text": "which are not C sharp it's like let's say you have your big decimal here you have like one here and then you have",
    "start": "2651280",
    "end": "2659200"
  },
  {
    "text": "like your auto pick decimal here your two so often what you have to do is you",
    "start": "2659200",
    "end": "2665140"
  },
  {
    "text": "would have to use you you would have to use the function",
    "start": "2665140",
    "end": "2670300"
  },
  {
    "text": "the dot add function to um have the result here to say BD dot BDM add and then bd2",
    "start": "2670300",
    "end": "2679000"
  },
  {
    "text": "to put them together and that's also why some companies said well we are using double it's good enough because we don't",
    "start": "2679000",
    "end": "2685359"
  },
  {
    "text": "want to to handle this so kotlin fixed this and we could now do the following we can say we use a plus here because",
    "start": "2685359",
    "end": "2693760"
  },
  {
    "text": "kotlin provides this operator functions what do they do well you can like",
    "start": "2693760",
    "end": "2701140"
  },
  {
    "text": "overwrite this plus minus multiplication and and division by yourself well of",
    "start": "2701140",
    "end": "2706960"
  },
  {
    "text": "course this can be dangerous if you handle it wrong because you could just say well if you use minus then it can be",
    "start": "2706960",
    "end": "2712420"
  },
  {
    "text": "plus and vice versa but of course you have just be to be careful by yourself but the cool thing here is that you",
    "start": "2712420",
    "end": "2718839"
  },
  {
    "text": "could also let's say if you have like complex objects and you would like to put them together you could overwrite",
    "start": "2718839",
    "end": "2724720"
  },
  {
    "text": "this plus and then do the things under the hood you really like to happen if you use this this Plus",
    "start": "2724720",
    "end": "2731319"
  },
  {
    "text": "so this also cool like this is also like as you can see this is an infix",
    "start": "2731319",
    "end": "2736900"
  },
  {
    "text": "this is in an inline operator function inline means that during runtime the",
    "start": "2736900",
    "end": "2742540"
  },
  {
    "text": "code which is the function which is written here will get inlined into in",
    "start": "2742540",
    "end": "2747640"
  },
  {
    "text": "the in the code where it's called so before we um go to the last last part",
    "start": "2747640",
    "end": "2755260"
  },
  {
    "text": "I'd like to show you a little bit about the interoperability so we have this Java class here I've just created a",
    "start": "2755260",
    "end": "2761800"
  },
  {
    "text": "normal Java class in my in my code and what I now can do is I can say I have my",
    "start": "2761800",
    "end": "2767319"
  },
  {
    "text": "Java here and I can access the Java class from my",
    "start": "2767319",
    "end": "2772960"
  },
  {
    "text": "kotlin code and can then have here my high from java it's just a function and",
    "start": "2772960",
    "end": "2778180"
  },
  {
    "text": "which I have defined in my Java class as you can see here this is now um this is nullable why is this nullable",
    "start": "2778180",
    "end": "2785079"
  },
  {
    "text": "because I've added an add nullable annotation to my Java class to this function my Java class to tell kotlin",
    "start": "2785079",
    "end": "2791619"
  },
  {
    "text": "well this return or the return of this high from java maybe null",
    "start": "2791619",
    "end": "2797380"
  },
  {
    "text": "so I of course could Now call it like this but I can also of course extend my Java",
    "start": "2797380",
    "end": "2803680"
  },
  {
    "text": "class I can say hi from kotlin and can say hi from kotlin",
    "start": "2803680",
    "end": "2811599"
  },
  {
    "text": "and can then and can then hear access hyphen cotton",
    "start": "2811599",
    "end": "2817359"
  },
  {
    "text": "so I can even of course extend functionality from java libraries or from",
    "start": "2817359",
    "end": "2822760"
  },
  {
    "text": "many other things that's for example also how spring does many of its if of its of its uh of its features by for",
    "start": "2822760",
    "end": "2829540"
  },
  {
    "text": "example you can go into the data in your if you have something to change about an interface you can just add new",
    "start": "2829540",
    "end": "2836339"
  },
  {
    "text": "functionality to the existing spring things so this is how we can use",
    "start": "2836339",
    "end": "2841780"
  },
  {
    "text": "interoperability and as a last topic I'd like to show you about lazy evaluation",
    "start": "2841780",
    "end": "2846940"
  },
  {
    "text": "so let's say we have a function here and this is a really expensive",
    "start": "2846940",
    "end": "2854200"
  },
  {
    "text": "this is really expensive to do so we have here our",
    "start": "2855040",
    "end": "2860800"
  },
  {
    "text": "let's say we have a Boolean here and we say here really expensive call and re-return just",
    "start": "2860800",
    "end": "2869079"
  },
  {
    "text": "through now let's say we have an if here and we say well if the first thing passes",
    "start": "2869079",
    "end": "2875260"
  },
  {
    "text": "then we want to do this really expensive call but in here we also need the value",
    "start": "2875260",
    "end": "2881440"
  },
  {
    "text": "of this really expensive call what could we do well we could just call here this really expensive call again",
    "start": "2881440",
    "end": "2889000"
  },
  {
    "text": "but the problem of course is we do this really expensive call twice so what we could also do is we could say",
    "start": "2889000",
    "end": "2895599"
  },
  {
    "text": "we have our check which is really expensive here we will do",
    "start": "2895599",
    "end": "2901119"
  },
  {
    "text": "each time without even if it's not if if we are not in this in this true case but",
    "start": "2901119",
    "end": "2907359"
  },
  {
    "text": "the problem here of course is even if we don't go into this this case here we will still get this call here",
    "start": "2907359",
    "end": "2914680"
  },
  {
    "text": "because we have already evaluated the value for this really expensive call so to fix this kotlin knows delegation you",
    "start": "2914680",
    "end": "2922599"
  },
  {
    "text": "can use delegation in in extremely complex ways but kotlin itself offers some easy way in we can use we can say",
    "start": "2922599",
    "end": "2930160"
  },
  {
    "text": "well this is a string this is a Boolean sorry a Boolean and we can say buy lazy",
    "start": "2930160",
    "end": "2936339"
  },
  {
    "text": "and can can then pass our function call into this Lambda from this lazy here and",
    "start": "2936339",
    "end": "2941859"
  },
  {
    "text": "as you can see this lazy this is just like a lazy initializer and I won't go",
    "start": "2941859",
    "end": "2948700"
  },
  {
    "text": "into this what this really does but as we can see now something interesting happened there was no call",
    "start": "2948700",
    "end": "2954160"
  },
  {
    "text": "to this really um expensive function we have here but if I change this here and say check and",
    "start": "2954160",
    "end": "2961720"
  },
  {
    "text": "I say here I assigned check to it as we can see we",
    "start": "2961720",
    "end": "2966760"
  },
  {
    "text": "get only a call once because it happens only at the first time you",
    "start": "2966760",
    "end": "2973480"
  },
  {
    "text": "call it and then it gets cached and just reused so this way you can use a lazy evaluation with delegation to",
    "start": "2973480",
    "end": "2980980"
  },
  {
    "text": "um only call your code once and then reuse the value only if needed",
    "start": "2980980",
    "end": "2987000"
  },
  {
    "text": "all right so it's done thank you for for attending and my name",
    "start": "2987520",
    "end": "2995619"
  },
  {
    "text": "is Christian Wertz um if you'd like to see the code I've shown you just go to my website if you'd like to get in to",
    "start": "2995619",
    "end": "3002160"
  },
  {
    "text": "contact please just um send me a link send me something on LinkedIn I will gladly accept it and",
    "start": "3002160",
    "end": "3008280"
  },
  {
    "text": "yeah thank you for attending foreign",
    "start": "3008280",
    "end": "3014880"
  }
]