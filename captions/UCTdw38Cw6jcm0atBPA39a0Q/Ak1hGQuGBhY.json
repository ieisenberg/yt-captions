[
  {
    "text": "basically in uh you know the black background and uh and white uh things and that's also the environment i'm",
    "start": "2639",
    "end": "9040"
  },
  {
    "text": "gonna show you some demo code as well um so that might be a little bit difficult to see if you're sitting in the back so you might wanna move uh you know forward",
    "start": "9040",
    "end": "16880"
  },
  {
    "text": "i've tried to increase the scaling of the of the of my screen as much as possible",
    "start": "16880",
    "end": "22160"
  },
  {
    "text": "so but now you have been warned um we have we have room here in the front",
    "start": "22160",
    "end": "27279"
  },
  {
    "text": "all right so um i just gave another talk and i just need to reset my brain a little bit to see",
    "start": "27279",
    "end": "33200"
  },
  {
    "text": "what what what is this one about all right got it all right so um so like sudden",
    "start": "33200",
    "end": "39840"
  },
  {
    "text": "back in the 2014 2015 time frame i am i was asked by one of my recurring",
    "start": "39840",
    "end": "46719"
  },
  {
    "text": "clients to come back and help them out as a freelance software developer you know i've done some work for them before",
    "start": "46719",
    "end": "52800"
  },
  {
    "text": "and and then they you know i went on to do other things and then i came back because they wanted my help with some stuff as well",
    "start": "52800",
    "end": "58800"
  },
  {
    "text": "and they've been pretty busy while i was gone and this team was a as it was a team of very skilled developers so they",
    "start": "58800",
    "end": "65280"
  },
  {
    "text": "had lots of you know great things that they did and one of the things that they did while i was gone was that they'd enable in a",
    "start": "65280",
    "end": "71439"
  },
  {
    "text": "continuous delivery um so i learned a lot about continuous delivery from from these people um so that's sort of like",
    "start": "71439",
    "end": "77840"
  },
  {
    "text": "the organization they were they were really good at what they were doing but this talk is not about continuous",
    "start": "77840",
    "end": "83280"
  },
  {
    "text": "delivery um it's about another interesting thing that they did because also while i've i've been gone",
    "start": "83280",
    "end": "89360"
  },
  {
    "text": "what um they've implemented a locking system in their production system so whenever you know the production code",
    "start": "89360",
    "end": "96079"
  },
  {
    "text": "was running it would log uh to um i think they they use this um elk stack as",
    "start": "96079",
    "end": "101280"
  },
  {
    "text": "far as i remember um so um so we started you know i started helping them you know creating new",
    "start": "101280",
    "end": "107600"
  },
  {
    "text": "features and so on and you know once in a while when you create new features you inadvertently create bugs as well",
    "start": "107600",
    "end": "113680"
  },
  {
    "text": "so sometimes you know we would get bug reports and this happens it was it was a pretty",
    "start": "113680",
    "end": "119600"
  },
  {
    "text": "good code base we actually did a lot of things or they had already done a lot of things right so we didn't have that many",
    "start": "119600",
    "end": "124799"
  },
  {
    "text": "bugs but you know they came up from time to time and then i found out that you know if if the bug was you know precise",
    "start": "124799",
    "end": "131360"
  },
  {
    "text": "enough that we could identify uh you know when things went wrong and",
    "start": "131360",
    "end": "136640"
  },
  {
    "text": "sort of you know how you know which part of the system went wrong we could prob we could usually find you know just from",
    "start": "136640",
    "end": "142800"
  },
  {
    "text": "the bug report we could find the logs you know the log entries that related to that particular behavior",
    "start": "142800",
    "end": "148480"
  },
  {
    "text": "and from that it turned out that we could always on you know get an understanding of what",
    "start": "148480",
    "end": "153920"
  },
  {
    "text": "went wrong and reproduce the problem and based on the logs you know the understanding that we gained from the",
    "start": "153920",
    "end": "159440"
  },
  {
    "text": "logs and that turned out to be repeatedly you know an experience that we had",
    "start": "159440",
    "end": "166640"
  },
  {
    "text": "so um so i thought that was interesting um and i you know it couldn't really it was very pleasant to work with",
    "start": "166640",
    "end": "172480"
  },
  {
    "text": "because it took a lot of stress away from understanding defects in the system you sort of like you go and look at the",
    "start": "172480",
    "end": "177519"
  },
  {
    "text": "logs and you look through the logs a little bit and say okay now i pretty much understand it i can reproduce that i say as as a unit test or things like",
    "start": "177519",
    "end": "184239"
  },
  {
    "text": "that um so when i went on my own way you know after the engagement and ended i am i",
    "start": "184239",
    "end": "189360"
  },
  {
    "text": "started i couldn't really stop thinking about you know what what was it that made",
    "start": "189360",
    "end": "194400"
  },
  {
    "text": "that logging uh you know such a as a useful thing because they didn't log a lot of stuff actually",
    "start": "194400",
    "end": "200239"
  },
  {
    "text": "they just um they just like the right you know they locked that stuff that we needed in order to reproduce problems",
    "start": "200239",
    "end": "207200"
  },
  {
    "text": "so i thought that was interesting did they know something that i didn't know or you know did it did it just",
    "start": "207200",
    "end": "212640"
  },
  {
    "text": "turned out that they were lucky and these people were really skilled but and you know to be honest in this particular",
    "start": "212640",
    "end": "219040"
  },
  {
    "text": "instance i actually think it turns out that they were lucky um there were circumstances around how that you know",
    "start": "219040",
    "end": "225440"
  },
  {
    "text": "code base worked and the entire environment that it was running in where it was quite obvious that there were things you wanted to log and you know",
    "start": "225440",
    "end": "232400"
  },
  {
    "text": "they went ahead and and did that but i still couldn't really shake the idea of you know what's the right amount of",
    "start": "232400",
    "end": "237840"
  },
  {
    "text": "logging um so based on that experience with having this very nice uh you know uh",
    "start": "237840",
    "end": "244000"
  },
  {
    "text": "stress-free interaction with you know just enough locking i i thought you know",
    "start": "244000",
    "end": "249280"
  },
  {
    "text": "there's actually there's a you can actually apply a method to that so this is what that talk this talking",
    "start": "249280",
    "end": "254959"
  },
  {
    "text": "about it's about what to log and also a little bit about how to log and actually got to spend most of the time on what to",
    "start": "254959",
    "end": "260639"
  },
  {
    "text": "log so um usually when i when i visit other",
    "start": "260639",
    "end": "266560"
  },
  {
    "text": "organizations so not the one that i used to talk about right now but other organizations code often looks like this",
    "start": "266560",
    "end": "272240"
  },
  {
    "text": "so you have a lot of you know code that is um sprinkled with you know",
    "start": "272240",
    "end": "278080"
  },
  {
    "text": "liberal you know use of lockdown debug and and lock.info or whatever else you might",
    "start": "278080",
    "end": "284320"
  },
  {
    "text": "you might have and there's so much stuff going on there that's it's noise that actually makes it hard to understand",
    "start": "284320",
    "end": "290080"
  },
  {
    "text": "what the code is actually doing and i should probably be um we should probably just to spend a little time you",
    "start": "290080",
    "end": "296320"
  },
  {
    "text": "know discussing what it is that we are looking at here so uh this is um you know one of my patented um",
    "start": "296320",
    "end": "303120"
  },
  {
    "text": "online restaurant reservations you know system demos it's it's not patented but uh but but",
    "start": "303120",
    "end": "309759"
  },
  {
    "text": "i've been using this you know this kind of demo application for a long time you know it's one of those things where um",
    "start": "309759",
    "end": "315440"
  },
  {
    "text": "you you scroll you know you you find a website or you use an app and then you fill in some details about the",
    "start": "315440",
    "end": "321199"
  },
  {
    "text": "reservations that you'd like to to do and then you can press the submit button and this slide shows you how long i've",
    "start": "321199",
    "end": "326560"
  },
  {
    "text": "been using uh this particular you know demo scenario so i'd like to reuse my slides um so i copied that in so i've",
    "start": "326560",
    "end": "333440"
  },
  {
    "text": "been doing this for many years now but the point is this type of system what we're looking at here is you press the",
    "start": "333440",
    "end": "338960"
  },
  {
    "text": "submit button it creates a json document it posts the json document to an http",
    "start": "338960",
    "end": "344240"
  },
  {
    "text": "service somewhere and the code that we're going to look at is you know the http side of things so not the",
    "start": "344240",
    "end": "350400"
  },
  {
    "text": "client the code that actually does that but the code that receives that json document that's that's what we're",
    "start": "350400",
    "end": "356000"
  },
  {
    "text": "looking at here at the moment you know there's there's this post method it takes a dto that's basically just the",
    "start": "356000",
    "end": "361520"
  },
  {
    "text": "data from the from the json document and then it you know does stuff with it but you almost can't tell what it is that",
    "start": "361520",
    "end": "367919"
  },
  {
    "text": "it's doing because there's all of that locking stuff going on um so i don't think code should look",
    "start": "367919",
    "end": "374080"
  },
  {
    "text": "like this i'd like you know code to look like this so so this is more easy to read because",
    "start": "374080",
    "end": "379280"
  },
  {
    "text": "there's there isn't all of that noise um so um write code like that",
    "start": "379280",
    "end": "386639"
  },
  {
    "text": "but then you might say well yeah but mark you know you just remove all the logging",
    "start": "386720",
    "end": "391759"
  },
  {
    "text": "so um we need logs you can't just remove all the logging and say just because it's more readable",
    "start": "391759",
    "end": "398639"
  },
  {
    "text": "you can save it let's throw away all the logging that's not what i did actually this code it turns out actually logs uh",
    "start": "398639",
    "end": "404720"
  },
  {
    "text": "we'll get back to how that works later on um before we do that i think we should just",
    "start": "404720",
    "end": "410960"
  },
  {
    "text": "talk a little bit about you know why do we actually log because this is more than one reason you know as developers we'd often you know think of ourselves",
    "start": "410960",
    "end": "417680"
  },
  {
    "text": "first so we think okay so we can do you know various things where you know where we lock debug information or other",
    "start": "417680",
    "end": "424160"
  },
  {
    "text": "things that enable us to troubleshoot things you know when things go wrong in production and that's logging for our",
    "start": "424160",
    "end": "430160"
  },
  {
    "text": "own purposes which is fine but there are other reasons as well so maybe other you know departments would",
    "start": "430160",
    "end": "436240"
  },
  {
    "text": "like you to log you know other types of things so maybe the business for example would like you to log you",
    "start": "436240",
    "end": "442000"
  },
  {
    "text": "know things that are important to them what we'd typically call you know key performance in indicators so stuff like",
    "start": "442000",
    "end": "448160"
  },
  {
    "text": "you know how many sales are you having or how many page views or whatever else you think might be interesting and if",
    "start": "448160",
    "end": "453840"
  },
  {
    "text": "you're operating in a domain where you you know you are covered by law or regulations you might also be required",
    "start": "453840",
    "end": "460400"
  },
  {
    "text": "to you know leave behind an audit trade which is also a sort of locking so there's at least these three you know",
    "start": "460400",
    "end": "466000"
  },
  {
    "text": "wide you know reasons why you'd like to log there might be others as well but i actually can't think of them but that's",
    "start": "466000",
    "end": "471840"
  },
  {
    "text": "what i think i think captures most of it and but what they have in common is that you have a running system and that",
    "start": "471840",
    "end": "477520"
  },
  {
    "text": "running system produces some you know some output that you can sort of peruse at at your own leisure at a later time",
    "start": "477520",
    "end": "483919"
  },
  {
    "text": "so it's typically to some sort of out of process system uh so we if we define logging that broadly that's all logging and that's",
    "start": "483919",
    "end": "491039"
  },
  {
    "text": "that's pretty much uh it doesn't turns out that it doesn't really matter that much you know which which of those use",
    "start": "491039",
    "end": "496400"
  },
  {
    "text": "cases you have so it's probably clear that we we don't want to log too much because if you've",
    "start": "496400",
    "end": "502800"
  },
  {
    "text": "ever tried one of those turnkey solutions where you basically can you know you know click a little button or",
    "start": "502800",
    "end": "507840"
  },
  {
    "text": "you know download some sort of framework and then it will instrument all your code and then you can try to run that in",
    "start": "507840",
    "end": "513360"
  },
  {
    "text": "production you probably know that it generates tons of data very very quickly if you lock everything that's not really",
    "start": "513360",
    "end": "520080"
  },
  {
    "text": "practical because it's going to generate so much data that you probably can't fit it on your storage devices or if you're",
    "start": "520080",
    "end": "526399"
  },
  {
    "text": "running in the cloud you don't want to pay the price for that and also just the act of locking everything that's going on in the system",
    "start": "526399",
    "end": "533040"
  },
  {
    "text": "it's probably going to slow down the system so there's a limit to how much you want to log on the other hand you also don't want to lock too little for",
    "start": "533040",
    "end": "539200"
  },
  {
    "text": "obvious reasons because if there's too little information in your locks you can't use it for troubleshooting",
    "start": "539200",
    "end": "545519"
  },
  {
    "text": "maybe you're not you know complying with the regulations or the business doesn't feel that it has you know good enough",
    "start": "545519",
    "end": "550720"
  },
  {
    "text": "insights into what's going on so there's also you know logging too little so obviously what we don't want to do we",
    "start": "550720",
    "end": "555760"
  },
  {
    "text": "want to lock just the right amount of data so this is almost like this fairy tale with you know with a girl who comes",
    "start": "555760",
    "end": "561839"
  },
  {
    "text": "into a house that is empty at the moment that she's trying out all the food that's left and she's trying the beds",
    "start": "561839",
    "end": "567519"
  },
  {
    "text": "and so on and some of it's just a little bit too much and some of it is a little bit little but you know the middle thing is just",
    "start": "567519",
    "end": "573680"
  },
  {
    "text": "right okay so that's that's what we're aiming for so obviously for that reason that kind of locking we're going to call",
    "start": "573680",
    "end": "578880"
  },
  {
    "text": "that goldilocks at golgi logging okay um so so so what what does that actually mean",
    "start": "578880",
    "end": "584959"
  },
  {
    "text": "so we sort of need to figure out okay so what is goldilocking um so what to log",
    "start": "584959",
    "end": "590399"
  },
  {
    "text": "so um the key lies in repeatability so this is sort of like a theme that we've seen in software development for the",
    "start": "590399",
    "end": "596399"
  },
  {
    "text": "last few decades is that we you know repeatable bills are interesting that's something that we actually want to",
    "start": "596399",
    "end": "602079"
  },
  {
    "text": "strive for repeatable deployments is the thing that we might want to strive for so what we're going to do here is what we're",
    "start": "602079",
    "end": "608160"
  },
  {
    "text": "going to look at something called repeatable execution and that's the term that i just made up um but the idea is",
    "start": "608160",
    "end": "613600"
  },
  {
    "text": "that we should be able to repeat that the execution that happened in production you know based on what's in",
    "start": "613600",
    "end": "619519"
  },
  {
    "text": "the log and we can sort of replay that afterwards and um there's a there's a method to the",
    "start": "619519",
    "end": "625440"
  },
  {
    "text": "madness and and we can start looking at a code like this so so here we have uh you know two um two integers that are",
    "start": "625440",
    "end": "632640"
  },
  {
    "text": "being added together x and y are two integers and we produce z uh which is another integer from that so first of",
    "start": "632640",
    "end": "638800"
  },
  {
    "text": "all would you like something like this and uh it's it seems a little bit it",
    "start": "638800",
    "end": "644000"
  },
  {
    "text": "seems a little bit odd to say adding x and y but on the other hand you may not know",
    "start": "644000",
    "end": "649120"
  },
  {
    "text": "what x and y are because you know if this is something that arrives from from outside of your system it could be the",
    "start": "649120",
    "end": "655120"
  },
  {
    "text": "user who's entering you know in a user interface they're entering two numbers and then you're adding them together",
    "start": "655120",
    "end": "662399"
  },
  {
    "text": "i don't think it makes much sense to us to to lock that you're adding them together but if they're arriving from outside of your system it makes sense to",
    "start": "662399",
    "end": "669120"
  },
  {
    "text": "log what the values are so you could sort of think of that as sort of like a variation on that at least log what x",
    "start": "669120",
    "end": "675600"
  },
  {
    "text": "and y are that might make sense if if they're they if they're external values but at least we could say something else",
    "start": "675600",
    "end": "682000"
  },
  {
    "text": "you know would you log what the result is it doesn't make sense if you know what x",
    "start": "682000",
    "end": "687360"
  },
  {
    "text": "and y is this is entirely redundant because if you know those two numbers you can also you can always just",
    "start": "687360",
    "end": "694000"
  },
  {
    "text": "recalculate you can run the calculation again in order to get z you don't need to actually lock what z",
    "start": "694000",
    "end": "700079"
  },
  {
    "text": "was because it is repeatable all right so this is a function this is",
    "start": "700079",
    "end": "705760"
  },
  {
    "text": "a very simple mathematical function you know x plus y um and in general you know mathematical",
    "start": "705760",
    "end": "711360"
  },
  {
    "text": "functions have to have this quality that you can always just repeat them and they always produce the same",
    "start": "711360",
    "end": "716959"
  },
  {
    "text": "output that turns out to be a really interesting quality of functions in general it's one of the many reasons why",
    "start": "716959",
    "end": "723519"
  },
  {
    "text": "functional programming is such an interesting thing because we're working with functions and we really like these things called pure functions for a lot",
    "start": "723519",
    "end": "730160"
  },
  {
    "text": "of reasons so we can learn from functional programming in terms of you know what is what do we",
    "start": "730160",
    "end": "736720"
  },
  {
    "text": "have to log and what don't we have to log so in functional programming we really like these things called pure functions",
    "start": "736720",
    "end": "743279"
  },
  {
    "text": "and pure function is a function that has some some extra qualities associated with it so one of them is determinism",
    "start": "743279",
    "end": "749600"
  },
  {
    "text": "you know the same input will always produce the same output that's what we just saw by adding numbers together or",
    "start": "749600",
    "end": "755519"
  },
  {
    "text": "in general that works for mathematics but it also works for a lot of other things so if you want to you know reverse the string through that is",
    "start": "755519",
    "end": "762399"
  },
  {
    "text": "always oof uh and and and and such and going on like that so um so that you",
    "start": "762399",
    "end": "768639"
  },
  {
    "text": "can actually write a lot of complicated complex behavior as pure functions by just being deterministic that's one side",
    "start": "768639",
    "end": "775120"
  },
  {
    "text": "of the coin another thing you need to do is you need to make sure that there are no side effects so side effect is",
    "start": "775120",
    "end": "780240"
  },
  {
    "text": "something that changes the observable state of the system so sending an email or you know deleting",
    "start": "780240",
    "end": "786240"
  },
  {
    "text": "a file on disk or creating a row in a database even repainting the screen is actually a side effect something that a",
    "start": "786240",
    "end": "792480"
  },
  {
    "text": "pure function can't do so it's worthwhile being aware of the pure functions are",
    "start": "792480",
    "end": "798560"
  },
  {
    "text": "have a lot of nice you know qualities when when they have these two qualities there's a lot of other",
    "start": "798560",
    "end": "804079"
  },
  {
    "text": "niceties that sort of follow from that it makes the functions much easier to unit test and also you know you can",
    "start": "804079",
    "end": "809920"
  },
  {
    "text": "repeat the execution so there's a lot of nice things about that but on the other hand we need to understand that since we",
    "start": "809920",
    "end": "816160"
  },
  {
    "text": "can't do side effects we can't really do anything that changes the state of the world and then you know in a",
    "start": "816160",
    "end": "821279"
  },
  {
    "text": "philosophical sense all software is exists in order to change the state of the world",
    "start": "821279",
    "end": "826560"
  },
  {
    "text": "at least it exists to make money for some person and you know that's also changing the state of the world um so we",
    "start": "826560",
    "end": "832160"
  },
  {
    "text": "can't really do anything useful if we can't do side effects and also you know having something that is non-deterministic like you know",
    "start": "832160",
    "end": "838160"
  },
  {
    "text": "generating a random number or reading contents of a disk or you know getting the current time",
    "start": "838160",
    "end": "843600"
  },
  {
    "text": "that's non-deterministic behavior we can't do that with pure functions as well so it seems quite limiting",
    "start": "843600",
    "end": "849199"
  },
  {
    "text": "and it turns turns out it's not actually that limiting but there will be a residual of things where we need you know we need",
    "start": "849199",
    "end": "856560"
  },
  {
    "text": "state changes and we need non-deterministic code and we call those things impure actions so it's not that",
    "start": "856560",
    "end": "862560"
  },
  {
    "text": "in functional programming that we can't do impure things it's just that we want to favor pure functions because they're",
    "start": "862560",
    "end": "868639"
  },
  {
    "text": "easy to unit test they're easy to reason about um it turns out we don't need to to lock what happens inside of a pure",
    "start": "868639",
    "end": "874399"
  },
  {
    "text": "function because we can always just you know run it again whereas the impure actions they are non-deterministic they",
    "start": "874399",
    "end": "880480"
  },
  {
    "text": "may you know may have side effects so they are you know more difficult to work with so we'd like to minimize the",
    "start": "880480",
    "end": "886480"
  },
  {
    "text": "the use of those things um so that's sort of like the general idea",
    "start": "886480",
    "end": "892079"
  },
  {
    "text": "so if we're looking at a little bit of a piece of sharp code like this one for example so um so i'm not assuming that",
    "start": "892079",
    "end": "898639"
  },
  {
    "text": "you're a sharp developer but if you're familiar with that sort of you know c based language you can probably follow",
    "start": "898639",
    "end": "903920"
  },
  {
    "text": "along here um you might ask yourself if we're trying to validate whether the dto is valid or not um is that a pure function",
    "start": "903920",
    "end": "911600"
  },
  {
    "text": "or not and you can't really tell at this level of abstraction because you know",
    "start": "911600",
    "end": "917839"
  },
  {
    "text": "c sharp or java or typescript or you know basically any mainstream language even if sharp doesn't allow you to",
    "start": "917839",
    "end": "924160"
  },
  {
    "text": "actually make that sort of decision so in order to answer that question you have to go and look at the source code in order to actually look at it and say",
    "start": "924160",
    "end": "931199"
  },
  {
    "text": "does it do any sort of you know non-deterministic behavior so this is very this is a very simple example just",
    "start": "931199",
    "end": "938000"
  },
  {
    "text": "that's just to get the point across so the the protocol here is that if we return the empty string uh that's sort",
    "start": "938000",
    "end": "943440"
  },
  {
    "text": "of like an error message and an empty error message indicates that there are no there's no error on the other hand if",
    "start": "943440",
    "end": "949040"
  },
  {
    "text": "we return a string that's not empty that indicates an error that means the the detail is not valid",
    "start": "949040",
    "end": "955839"
  },
  {
    "text": "so we might ask ourselves you know are there any side effects here and it doesn't look like it's sending email or",
    "start": "956000",
    "end": "961120"
  },
  {
    "text": "you know changing things on disk or anything else so there's no side effects is it deterministic well it's not",
    "start": "961120",
    "end": "967680"
  },
  {
    "text": "relying on the on on any sort of random number generator or it's not reading",
    "start": "967680",
    "end": "972720"
  },
  {
    "text": "from disk or anything like that so yeah it's actually deterministic so you know by looking through the source code",
    "start": "972720",
    "end": "979279"
  },
  {
    "text": "we can determine that yes this is actually a pure function but but we have a problem and that is",
    "start": "979279",
    "end": "985279"
  },
  {
    "text": "you know if if we might have a stakeholder that comes by later on and tells us well you know",
    "start": "985279",
    "end": "990800"
  },
  {
    "text": "your validation code is fine as you know it's it's not wrong but it's not capturing all the things",
    "start": "990800",
    "end": "997040"
  },
  {
    "text": "that might you know that we might want to reject so for example if people are posting trying to create a reservation",
    "start": "997040",
    "end": "1003519"
  },
  {
    "text": "in the past that doesn't really make any sense we can't accept a reservation in the past so we should consider that to be invalid",
    "start": "1003519",
    "end": "1009519"
  },
  {
    "text": "as well and you go and say okay so i can deal with that i'm going to you know change the code a little bit and i'm going to say if the date is less than",
    "start": "1009519",
    "end": "1015600"
  },
  {
    "text": "datetime.now i'm also going to consider that an invalid date now this turns out to be",
    "start": "1015600",
    "end": "1020720"
  },
  {
    "text": "non-deterministic because if you if you have you know code like this where you say the input isn't completely known on",
    "start": "1020720",
    "end": "1026798"
  },
  {
    "text": "beforehand and then you run the code now if you we're trying to make a reservation on the 20th of january 2020",
    "start": "1026799",
    "end": "1033839"
  },
  {
    "text": "as you can tell the slides are a bit old now something happened in 2020 that sort of made me not being able to actually",
    "start": "1033839",
    "end": "1039839"
  },
  {
    "text": "run this presentation back then um but if um if you're running this code on",
    "start": "1039839",
    "end": "1045438"
  },
  {
    "text": "the 19th you'll get you know just an empty message meaning you know all is valid and then if you run it two days",
    "start": "1045439",
    "end": "1051600"
  },
  {
    "text": "later you're gonna get an error message saying this is an embedded date so the same input um but now the output is",
    "start": "1051600",
    "end": "1057679"
  },
  {
    "text": "different so that's considered non-deterministic so so that's a bit of a problem um you",
    "start": "1057679",
    "end": "1063520"
  },
  {
    "text": "know determining whether things are pure or impure is is actually not that easy but you can go and read the source code",
    "start": "1063520",
    "end": "1070320"
  },
  {
    "text": "and in a very simple example that the one that i just showed you here it's sort of fairly obvious but if you have a",
    "start": "1070320",
    "end": "1076000"
  },
  {
    "text": "lot of code and your code calls some other code that calls some other code and so on the thing about you know",
    "start": "1076000",
    "end": "1081280"
  },
  {
    "text": "purity or impurity is that it's transitive so if you have something that calls impure code the caller is also",
    "start": "1081280",
    "end": "1087280"
  },
  {
    "text": "impure and the caller of that is impure and and so on um so um so it's it's difficult to actually",
    "start": "1087280",
    "end": "1093760"
  },
  {
    "text": "identify that so it'd be really nice if there was a tool instead of you know using our own brains for that and i have",
    "start": "1093760",
    "end": "1101360"
  },
  {
    "text": "good news and i have bad news here because the good news is such a tool does exist the bad news is that it doesn't exist",
    "start": "1101360",
    "end": "1107919"
  },
  {
    "text": "for any of the mainstream languages that you know so you know c-sharp java typescript",
    "start": "1107919",
    "end": "1113360"
  },
  {
    "text": "you know python javascript even if sharp closure whatever such a tool doesn't exist",
    "start": "1113360",
    "end": "1119120"
  },
  {
    "text": "because the tool is a language and there's more than one language but sort of the biggest language that does this",
    "start": "1119120",
    "end": "1124160"
  },
  {
    "text": "thing that that actually can make that distinction is a language called haskell and i'm not assuming that you know",
    "start": "1124160",
    "end": "1130320"
  },
  {
    "text": "anything about haskell at all so i'm going to give you a very quick crash course in how that",
    "start": "1130320",
    "end": "1136080"
  },
  {
    "text": "actually works so haskell uses its type system to make the distinction between things that are pure and things that are",
    "start": "1136080",
    "end": "1141840"
  },
  {
    "text": "on impure and with that type system you can actually if you've defined a",
    "start": "1141840",
    "end": "1147679"
  },
  {
    "text": "function to be pure and then you're trying to call an impure action from your pure function the code's not going",
    "start": "1147679",
    "end": "1152799"
  },
  {
    "text": "to compile so that's basically how it works so you're using the type system in order",
    "start": "1152799",
    "end": "1158559"
  },
  {
    "text": "to to determine whether things are pure or not so a crash course in just reading type or function signatures in haskell",
    "start": "1158559",
    "end": "1165679"
  },
  {
    "text": "look goes like this so on the left hand side you have the name of a function so i am pure is the name of a function the",
    "start": "1165679",
    "end": "1171919"
  },
  {
    "text": "two colons is basically just a delimiter from you know between the name and then the type of the function you can think",
    "start": "1171919",
    "end": "1177919"
  },
  {
    "text": "of that as a method signature like in c sharp but and you read those from from left to right",
    "start": "1177919",
    "end": "1184160"
  },
  {
    "text": "so so the input is on the left hand side and you might have more than one input but here we just have one and then to",
    "start": "1184160",
    "end": "1190160"
  },
  {
    "text": "the right most side you have the output and these are types so we actually in this case we have a type called input",
    "start": "1190160",
    "end": "1195360"
  },
  {
    "text": "and we have another type called output just to make things a little bit more explicit a little bit explicit so this",
    "start": "1195360",
    "end": "1201520"
  },
  {
    "text": "is this is a pure function and it's probably easier to see how that is a pure function if i show you what an",
    "start": "1201520",
    "end": "1207120"
  },
  {
    "text": "impure action looks like as you can see the mpi action looks almost like the pure function except that it has this",
    "start": "1207120",
    "end": "1213280"
  },
  {
    "text": "little modifier called i o so if you have this modifier that's at",
    "start": "1213280",
    "end": "1218799"
  },
  {
    "text": "this i o modifier means that's an impure action so by order of elimination if that i o modifier is not there then by",
    "start": "1218799",
    "end": "1225760"
  },
  {
    "text": "default things are pure and haskell so you have to explicitly say that things are impure otherwise they're just pure",
    "start": "1225760",
    "end": "1231679"
  },
  {
    "text": "by default so that's basically how the how you can distinguish you know between impure",
    "start": "1231679",
    "end": "1236720"
  },
  {
    "text": "actions and pure functions uh at the type level which is which is pretty nice",
    "start": "1236720",
    "end": "1242000"
  },
  {
    "text": "um so um you might then ask yourself okay so if you if you were doing this in haskell if",
    "start": "1242000",
    "end": "1248240"
  },
  {
    "text": "you want to validate whether another reservation is in the future if you want if you did that in haskell how would you go about doing you know solving that",
    "start": "1248240",
    "end": "1254320"
  },
  {
    "text": "problem and here's just one way of doing it and again i i don't expect you to actually be able",
    "start": "1254320",
    "end": "1259600"
  },
  {
    "text": "to read the haskell code it's not really important just focus on the two top lines which is the function declaration",
    "start": "1259600",
    "end": "1265520"
  },
  {
    "text": "so we have this thing called validate reservation that's a function and then you know i ran out of space so i had to",
    "start": "1265520",
    "end": "1270880"
  },
  {
    "text": "move the type declaration to a new line that's possible you can do that so you'll see here we have more than one",
    "start": "1270880",
    "end": "1276240"
  },
  {
    "text": "inputs but the output is something called either string reservation d2 and",
    "start": "1276240",
    "end": "1281600"
  },
  {
    "text": "don't worry if you don't understand what that means the point that i'm trying to get across here is we look for the i o",
    "start": "1281600",
    "end": "1287200"
  },
  {
    "text": "modifier and we don't find it and that means this is a pure function this is basically how how that works",
    "start": "1287200",
    "end": "1293440"
  },
  {
    "text": "so how do we solve solve the problem of you know looking at the current time and seeing whether the reservation is in the",
    "start": "1293440",
    "end": "1299520"
  },
  {
    "text": "past or in the future now it's a really dumb you know the primitive",
    "start": "1299520",
    "end": "1305360"
  },
  {
    "text": "solution to that we just pass in the value that represents what time it is right now as an argument to the function",
    "start": "1305360",
    "end": "1311760"
  },
  {
    "text": "and then the function just deals with that value so translate it to c sharp it might look like this we have you know a",
    "start": "1311760",
    "end": "1317280"
  },
  {
    "text": "now argument and then we're just you know checking on that and that's a pure function it's a very common thing to do in",
    "start": "1317280",
    "end": "1323360"
  },
  {
    "text": "functional programming and you might say okay so but that but that's that you know that's cheating or",
    "start": "1323360",
    "end": "1329840"
  },
  {
    "text": "some people might say that breaks encapsulation and i'll argue that it doesn't but that leads into a discussion",
    "start": "1329840",
    "end": "1335280"
  },
  {
    "text": "of what encapsulation means um or you know you might just say but mark aren't you aren't you concerned",
    "start": "1335280",
    "end": "1341760"
  },
  {
    "text": "that um you know people may call this function with you know with a value that's not",
    "start": "1341760",
    "end": "1347280"
  },
  {
    "text": "daytime now they may call this function with the value that is in 2030 or a",
    "start": "1347280",
    "end": "1352320"
  },
  {
    "text": "value that is in 1980 or you know something else and and basically you can say well i'm",
    "start": "1352320",
    "end": "1357919"
  },
  {
    "text": "not concerned for a couple of reasons first of all there's no side effects here so it doesn't matter what they do",
    "start": "1357919",
    "end": "1363840"
  },
  {
    "text": "and also i'm not concerned because i i think that's actually an advantage because that means instead of just",
    "start": "1363840",
    "end": "1369520"
  },
  {
    "text": "running on the system clock you can now perform simulations so you can write unit tests that that will you know test",
    "start": "1369520",
    "end": "1376000"
  },
  {
    "text": "what's going to happen if i run this code in 2030 or what would happen you know",
    "start": "1376000",
    "end": "1381440"
  },
  {
    "text": "you know in other sorts of circumstances or you can use your you know data from your locking",
    "start": "1381440",
    "end": "1387200"
  },
  {
    "text": "system to say what actually happened yesterday when this code ran you know you can pass",
    "start": "1387200",
    "end": "1392960"
  },
  {
    "text": "those values in and that enables you to to perform simulations and that's repeat repeatable execution",
    "start": "1392960",
    "end": "1399600"
  },
  {
    "text": "there's a it's basically just a it's one of those many benefits that just fall out of pure",
    "start": "1399600",
    "end": "1405280"
  },
  {
    "text": "functions because you can always do that with pure functions um so that's considered an advantage so",
    "start": "1405280",
    "end": "1411760"
  },
  {
    "text": "it's not cheating it's actually a very good thing to do it this way all right",
    "start": "1411760",
    "end": "1416799"
  },
  {
    "text": "so um so i'm not i'm not trying to suggest that you should now go and throw away all your mainstream code bases and",
    "start": "1416799",
    "end": "1423679"
  },
  {
    "text": "rewrite everything in haskell now if you want to do that please hire me to help you i would love",
    "start": "1423679",
    "end": "1430400"
  },
  {
    "text": "to do that but you know that's not that's not really my it's not about my agenda here um what i find haskell",
    "start": "1430400",
    "end": "1435440"
  },
  {
    "text": "really interesting for is as a thinking tool so i use haskell for proofs of concept so for example if i want to",
    "start": "1435440",
    "end": "1442080"
  },
  {
    "text": "learn you know i have this red online restaurant reservation system and i'd like to write",
    "start": "1442080",
    "end": "1448159"
  },
  {
    "text": "as much of it as pure functions and just just only the things that cannot be pure functions i'll need to you know sort of",
    "start": "1448159",
    "end": "1455200"
  },
  {
    "text": "isolate those and treat them differently but i'd like to know in a system like that you know",
    "start": "1455200",
    "end": "1461279"
  },
  {
    "text": "what's what's impure what's essentially impure what can i not get away from you know being impure and how much stuff can",
    "start": "1461279",
    "end": "1467760"
  },
  {
    "text": "i actually do as pure functions so you know writing a prototype and haskell will enable me to",
    "start": "1467760",
    "end": "1473279"
  },
  {
    "text": "to sort of answer that sort of question so that's what i did and again i'm not expecting you to know any haskell so i'm",
    "start": "1473279",
    "end": "1480000"
  },
  {
    "text": "just going to briefly walk you through some of the type signatures here so in the code base that we're looking at the",
    "start": "1480000",
    "end": "1485840"
  },
  {
    "text": "moment here this is my basic my domain model so this is where i model you know what a reservation looks like what a",
    "start": "1485840",
    "end": "1492240"
  },
  {
    "text": "valid reservation looks like uh this is how i make decisions about you know whether or not i can accept the",
    "start": "1492240",
    "end": "1497600"
  },
  {
    "text": "reservation or not so here we have a little bit more of a sophisticated version of a validation function and",
    "start": "1497600",
    "end": "1503600"
  },
  {
    "text": "again if we're looking for this i o modifier you'll notice that nothing here",
    "start": "1503600",
    "end": "1508880"
  },
  {
    "text": "even if we've you know i've split this in multiple lines there's nothing that says i o here so",
    "start": "1508880",
    "end": "1514720"
  },
  {
    "text": "this is a pure function and we can sort of scroll down this this file here and look at just the",
    "start": "1514720",
    "end": "1520960"
  },
  {
    "text": "function signatures and nowhere will you find the i o modifier and that means",
    "start": "1520960",
    "end": "1526000"
  },
  {
    "text": "this entire domain model here is actually written as pure functions and the um we'll get back to this try accept",
    "start": "1526000",
    "end": "1532320"
  },
  {
    "text": "function later on this is sort of like the core decision logic that makes use of a lot of those",
    "start": "1532320",
    "end": "1537760"
  },
  {
    "text": "those other functions uh you know in this in this file so when i post a",
    "start": "1537760",
    "end": "1543600"
  },
  {
    "text": "json document this it ends up calling this tri-accept method that then makes the decision can we or can we not accept",
    "start": "1543600",
    "end": "1550480"
  },
  {
    "text": "that particular reservation and again you'll notice you know the output the the output type here looks really",
    "start": "1550480",
    "end": "1556640"
  },
  {
    "text": "horrible if you don't know what that means uh that's really not something that you know i'm gonna try to explain",
    "start": "1556640",
    "end": "1561919"
  },
  {
    "text": "to you in two minutes because i can't the point is there's no i o modifier here so it's a pure function",
    "start": "1561919",
    "end": "1568159"
  },
  {
    "text": "um so that's nice it's nice to know that you can write a lot of the of actually all the business decision logic as pure",
    "start": "1568159",
    "end": "1574159"
  },
  {
    "text": "functions now on the other hand it turns out that you know interacting with something like sql server this is",
    "start": "1574159",
    "end": "1579200"
  },
  {
    "text": "actually saving things in sql server that is not something that is possible to do as pure functions these need to be",
    "start": "1579200",
    "end": "1585360"
  },
  {
    "text": "impure actions basically anything that performs i o is impure hence the name of that",
    "start": "1585360",
    "end": "1591440"
  },
  {
    "text": "modifier i o so you can see it's sitting here this is a an action that inserts a row",
    "start": "1591440",
    "end": "1596559"
  },
  {
    "text": "into the database we have other things down here read reservation this reads a single",
    "start": "1596559",
    "end": "1602240"
  },
  {
    "text": "reservation or it tries to read a single reservation it says io right here read reservations is a query that gives",
    "start": "1602240",
    "end": "1608640"
  },
  {
    "text": "us a collection of reservations back based on a predicate uh or criterion um",
    "start": "1608640",
    "end": "1616000"
  },
  {
    "text": "and it says i o here so we have a clear distinction between things that are you know impure and things that are pure and",
    "start": "1616000",
    "end": "1622559"
  },
  {
    "text": "it's nice to know which you know which bucket things need to fall in",
    "start": "1622559",
    "end": "1628000"
  },
  {
    "text": "so so that's that's there's that point now i i did oversimplify things a little bit when i said that this is the way you",
    "start": "1628000",
    "end": "1634320"
  },
  {
    "text": "distinguish between pure and impure there's actually a generalization of that impurity here where sometimes",
    "start": "1634320",
    "end": "1639679"
  },
  {
    "text": "you'll see things look like this where it says monet iom and then there's an m that m refers back to the monad i o and",
    "start": "1639679",
    "end": "1647279"
  },
  {
    "text": "if you see that in modifier and the modifier you know refers back to something called monet io that is also",
    "start": "1647279",
    "end": "1653440"
  },
  {
    "text": "impure this is sort of like a generalization of that i o modifier there and don't worry if you don't understand it it's just that you know",
    "start": "1653440",
    "end": "1659679"
  },
  {
    "text": "that's the sort of stuff that we go looking for so we can see down here at the bottom i",
    "start": "1659679",
    "end": "1664720"
  },
  {
    "text": "have this little um this is sort of like an interpreter and we can get back to that in a little",
    "start": "1664720",
    "end": "1669760"
  },
  {
    "text": "while um but this is basically it takes a little domain specific language and runs an interpreter over the database",
    "start": "1669760",
    "end": "1676000"
  },
  {
    "text": "and you can see this sort of example here monad moon iom and then the m appears over here so that's an impure",
    "start": "1676000",
    "end": "1682880"
  },
  {
    "text": "function as uh action as well so the way that you basically you know you have these pure functions and the pure",
    "start": "1682880",
    "end": "1688240"
  },
  {
    "text": "functions can't call into the database but then you still need to do the database stuff which is impure so how do",
    "start": "1688240",
    "end": "1694320"
  },
  {
    "text": "i sort of how do you sort of compose those two things together and you do that at the entry point",
    "start": "1694320",
    "end": "1699440"
  },
  {
    "text": "basically so um it also turns out that you know doing anything evolving the system clock is also impure because it's",
    "start": "1699440",
    "end": "1705600"
  },
  {
    "text": "non-deterministic so you can again see this monit iom here and so on so what i've done here is that",
    "start": "1705600",
    "end": "1712720"
  },
  {
    "text": "i've created some some code that can enable me to sort of interleave pure function pure code with impure actions",
    "start": "1712720",
    "end": "1721600"
  },
  {
    "text": "via a set of interpreters that all are all running and being impure",
    "start": "1721600",
    "end": "1726720"
  },
  {
    "text": "and then what i can do is i have this thing called lock clock which is also impure but it's sort of like a wrapper",
    "start": "1726720",
    "end": "1732399"
  },
  {
    "text": "around actually accessing the system clock and what this wrapper does it just locks",
    "start": "1732399",
    "end": "1737760"
  },
  {
    "text": "you know whenever you know i'm doing something that is an impure action it's writing that information to a log and",
    "start": "1737760",
    "end": "1743840"
  },
  {
    "text": "the same thing goes with this thing called log reservation it's just wrapping around the actual access to sql",
    "start": "1743840",
    "end": "1749360"
  },
  {
    "text": "server but it is it's locking all the information so sort of like the decorator design pattern",
    "start": "1749360",
    "end": "1756240"
  },
  {
    "text": "um right okay so um so let's have a look at that as well so",
    "start": "1756240",
    "end": "1761520"
  },
  {
    "text": "this this system is actually an entire system it's just a very thin slice so it's sort of like a proof of concept but",
    "start": "1761520",
    "end": "1767200"
  },
  {
    "text": "it actually it does work it can't do http traffic it can save in in sql",
    "start": "1767200",
    "end": "1772640"
  },
  {
    "text": "server of all things you know getting haskell to talk to sql server was kind of interesting i had to send a few pull",
    "start": "1772640",
    "end": "1778320"
  },
  {
    "text": "requests i sent some pool requests in 2019 and they were just merged last week basically so",
    "start": "1778320",
    "end": "1785039"
  },
  {
    "text": "i think the the original maintainer of that system had other things to do so what i'm going to do here is i'm",
    "start": "1785039",
    "end": "1790799"
  },
  {
    "text": "going to start the web server i'm gonna need a connection string to my database i'm just running the database",
    "start": "1790799",
    "end": "1796799"
  },
  {
    "text": "on my local db here so i am i can't remember the um i can't remember the the syntax of that",
    "start": "1796799",
    "end": "1803120"
  },
  {
    "text": "so i'm just gonna i've kept that in a file i'm just gonna put that you know contents in my clipboard and then i'm",
    "start": "1803120",
    "end": "1809679"
  },
  {
    "text": "going to run the application so let's see uh so it's not that it's anything secret the contents are right here um i'm using",
    "start": "1809679",
    "end": "1817360"
  },
  {
    "text": "integrated authentication so there's no um there's no passwords here so now the server is running is running on port",
    "start": "1817360",
    "end": "1823279"
  },
  {
    "text": "8080 um so now i need to figure out a way to post a json document to to port 8080 on my local machine so i'm going to",
    "start": "1823279",
    "end": "1830480"
  },
  {
    "text": "use another um another terminal for that so i can use curl",
    "start": "1830480",
    "end": "1836320"
  },
  {
    "text": "that's my preferred thing you know do yourself a favor if you're doing any sort of http work use curl it just makes",
    "start": "1836320",
    "end": "1842880"
  },
  {
    "text": "things easier because curl is always around someone told me yesterday that curl is actually running on the mass",
    "start": "1842880",
    "end": "1848960"
  },
  {
    "text": "rovers on mars i'm sort of working you know it's getting my head around okay so",
    "start": "1848960",
    "end": "1854399"
  },
  {
    "text": "what's the what's the ping time of tcp ip from mars to the earth it's like 8 28",
    "start": "1854399",
    "end": "1860159"
  },
  {
    "text": "minutes something like that so how does that work i mean i'm not sure i understand that okay so what i",
    "start": "1860159",
    "end": "1866399"
  },
  {
    "text": "want to do is i want to post to a resource called reservations i'm going to need to give it a content type i'm",
    "start": "1866399",
    "end": "1872880"
  },
  {
    "text": "going i'm going to need to tell it it's application slash json because otherwise you know there's a little bit of content",
    "start": "1872880",
    "end": "1878960"
  },
  {
    "text": "negotiation going on there and then i want to write my um my json document so the way it's",
    "start": "1878960",
    "end": "1885919"
  },
  {
    "text": "designed i need to give it an id the id needs to be a um",
    "start": "1885919",
    "end": "1891200"
  },
  {
    "text": "the idea needs to be a and a good so let's see if i can do this and then",
    "start": "1891279",
    "end": "1896960"
  },
  {
    "text": "like this um so i need to create a new guide so i can use this thing called the uuid gen uh uuid gen so that's just",
    "start": "1896960",
    "end": "1905279"
  },
  {
    "text": "going to create every time i run this code i'm just going to create a new good if i've done things correctly",
    "start": "1905279",
    "end": "1910640"
  },
  {
    "text": "i'm going to need a date so i'm just going to use the date of tomorrow so 2022.0603",
    "start": "1910640",
    "end": "1918600"
  },
  {
    "text": "and at nineteen hundred and um i'm gonna need a name for the person",
    "start": "1919039",
    "end": "1925840"
  },
  {
    "text": "named for the reservation so we're gonna say ill burrows is gonna make the the reservation we",
    "start": "1925840",
    "end": "1933200"
  },
  {
    "text": "need an email address for ill so that's going to be elbows",
    "start": "1933200",
    "end": "1938480"
  },
  {
    "text": "at example.com like that and we need a quantity that's",
    "start": "1938480",
    "end": "1944880"
  },
  {
    "text": "the last thing and and we'll you know try to make a reservation for two people does that",
    "start": "1944880",
    "end": "1950720"
  },
  {
    "text": "look okay to you did i make it do you like forget any quotes or things no",
    "start": "1950720",
    "end": "1956240"
  },
  {
    "text": "okay let's let's try it out it's always a little bit stressful here okay so it says 200 okay so um it looks",
    "start": "1956240",
    "end": "1963919"
  },
  {
    "text": "like it's worked so just as a sanity check we can go i have actually have access to the um to the",
    "start": "1963919",
    "end": "1969519"
  },
  {
    "text": "database sitting here in in sql server so if i go and refresh that we should now see a row in the",
    "start": "1969519",
    "end": "1975039"
  },
  {
    "text": "database so if if this demo had been running if i'd been doing this in 2002 you'd be very impressed but you know",
    "start": "1975039",
    "end": "1981679"
  },
  {
    "text": "yeah you can have an http thing that actually ends up in a database but that's really not the point of the",
    "start": "1981679",
    "end": "1987120"
  },
  {
    "text": "demo the point of the demo is that while this happened um the system logged all the mpl actions",
    "start": "1987120",
    "end": "1994399"
  },
  {
    "text": "so where do you wanna where do you always put your log files on the desktop obviously",
    "start": "1994399",
    "end": "2000399"
  },
  {
    "text": "this is just proof of concept code right so in this case it's looking like this um so this is basically just something",
    "start": "2000399",
    "end": "2007120"
  },
  {
    "text": "that you know there's a format i choose to use because that's that's machine readable to haskell code it's basically",
    "start": "2007120",
    "end": "2013039"
  },
  {
    "text": "just sort of like serialized haskell code um but what we can see here from the entries is i you know the first",
    "start": "2013039",
    "end": "2018240"
  },
  {
    "text": "thing that happened is that you know part of the system you know ask for the current time there's no input to that",
    "start": "2018240",
    "end": "2023519"
  },
  {
    "text": "question because you're just asking what the what is the current time but then the output was this particular value",
    "start": "2023519",
    "end": "2029120"
  },
  {
    "text": "then the system asked you know made a query against the database read the existing reservations you know using",
    "start": "2029120",
    "end": "2034240"
  },
  {
    "text": "this particular date as input it got you know the empty collection as output because there's no prior reservations in",
    "start": "2034240",
    "end": "2040000"
  },
  {
    "text": "the database then it you know called this method called create reservation and it also",
    "start": "2040000",
    "end": "2046159"
  },
  {
    "text": "locked what the what the input was and if we scroll to the end we can see the output is is nothing this is called unit",
    "start": "2046159",
    "end": "2052720"
  },
  {
    "text": "but it basically means void as output and then i also log the entire",
    "start": "2052720",
    "end": "2058158"
  },
  {
    "text": "http request and response so that's why you're seeing a lot of you know escaped",
    "start": "2058159",
    "end": "2063358"
  },
  {
    "text": "strings here because there's sort of the strings that i escape within strings and so on so that's a little bit confusing um but that's that's basically what",
    "start": "2063359",
    "end": "2070398"
  },
  {
    "text": "happened um so um so what i can do is that i can start let's see on my",
    "start": "2070399",
    "end": "2076560"
  },
  {
    "text": "haskell prompt here i'm going to stop the web server and i'm going to start something called ghcis ghci is a ripple",
    "start": "2076560",
    "end": "2083599"
  },
  {
    "text": "you know redevelop print loop where i can just add hog interact with values uh in in haskell",
    "start": "2083599",
    "end": "2089679"
  },
  {
    "text": "um and again don't worry too much about the syntax it's more like what can you do with the values here so there's a little",
    "start": "2089679",
    "end": "2096000"
  },
  {
    "text": "bit of color going on here and it's quite busy to look at so um i'm just gonna you know simplify the prompt a",
    "start": "2096000",
    "end": "2102400"
  },
  {
    "text": "little bit here so i'm just going to say it's going to look like this and i'm going to clear clear clear the",
    "start": "2102400",
    "end": "2107680"
  },
  {
    "text": "screen here so i can do something like that all right so the first thing i want to do is i want to load that file so",
    "start": "2107680",
    "end": "2114720"
  },
  {
    "text": "again don't worry too much about the syntax there's a built-in function of build an action called read",
    "start": "2114720",
    "end": "2121119"
  },
  {
    "text": "file and i just need to to find my file on the desktop so it's something like users",
    "start": "2121119",
    "end": "2126800"
  },
  {
    "text": "mark disk top log.txt",
    "start": "2126800",
    "end": "2132960"
  },
  {
    "text": "all right so that reads the file so if if not if we don't see any exceptions that just worked if you're wondering",
    "start": "2132960",
    "end": "2139119"
  },
  {
    "text": "what ill is it l is just the log it's just the contents of that file and",
    "start": "2139119",
    "end": "2144320"
  },
  {
    "text": "it looks quite unreadable here so we want to pass it we want to interpret it",
    "start": "2144320",
    "end": "2149359"
  },
  {
    "text": "into something that i actually proper haskell values um so the way that i can do that i'm going to create a new",
    "start": "2149359",
    "end": "2156320"
  },
  {
    "text": "value called replay data and the way that i'm going to do that is i'm i think i have a",
    "start": "2156320",
    "end": "2162400"
  },
  {
    "text": "a function or an action already this is a function that's called read",
    "start": "2162400",
    "end": "2168560"
  },
  {
    "text": "replay ah replay let's say replay something like read replay data from a log okay so",
    "start": "2168560",
    "end": "2175040"
  },
  {
    "text": "if we look at what that looks like replay data that looks a little bit more um",
    "start": "2175040",
    "end": "2180960"
  },
  {
    "text": "you know it's a little bit more readable still quite you know abstract but we have all the information and that now",
    "start": "2180960",
    "end": "2187119"
  },
  {
    "text": "they're actually at haskell values it's like you know if you didn't listen to sharp now you actually have c-sharp",
    "start": "2187119",
    "end": "2192160"
  },
  {
    "text": "objects this is a collection of objects basically so for example if we're interested in if we want to see what was",
    "start": "2192160",
    "end": "2197680"
  },
  {
    "text": "the reservation that was actually locked i'm going to need that later on so i'm going to call that r",
    "start": "2197680",
    "end": "2202880"
  },
  {
    "text": "so i can get the head of that's just the first element in a collection of something called observations of",
    "start": "2202880",
    "end": "2209680"
  },
  {
    "text": "post reservation you know from that replay data",
    "start": "2209680",
    "end": "2214480"
  },
  {
    "text": "so there's my reservation so let's let's clear out this as well it's it gets a little bit busy",
    "start": "2214800",
    "end": "2221520"
  },
  {
    "text": "so let's start here again so let's let's just re you know this is the reservation that is in the log we've now passed it",
    "start": "2221520",
    "end": "2227920"
  },
  {
    "text": "and i have access to it so if i'm wondering what happened i'm not really but just you know if in case i am i know",
    "start": "2227920",
    "end": "2235040"
  },
  {
    "text": "i talked about this function called try accept before so i can try to ask you",
    "start": "2235040",
    "end": "2240320"
  },
  {
    "text": "know what's the type of that so when i go colon type i'm not trying to run the function i'm just you know",
    "start": "2240320",
    "end": "2245680"
  },
  {
    "text": "basically looking at the type of it and saying what's the type of it and and that looks really complicated but",
    "start": "2245680",
    "end": "2250960"
  },
  {
    "text": "basically what it turns out is that it needs a reservation as well as one of its input arguments and then it needs",
    "start": "2250960",
    "end": "2256160"
  },
  {
    "text": "something else and there's something else is the seating duration",
    "start": "2256160",
    "end": "2261440"
  },
  {
    "text": "so this restaurant has a seating duration where you have a table for a couple of of hours and then you have to",
    "start": "2261440",
    "end": "2266800"
  },
  {
    "text": "leave the table because there might be other people and then we also have a table configuration and i can read that",
    "start": "2266800",
    "end": "2272320"
  },
  {
    "text": "from a config system that i have already and so i do that so seating duration is",
    "start": "2272320",
    "end": "2278160"
  },
  {
    "text": "something called a nominal diff time that is basically the same thing as a time span uh in the in c sharp so that's",
    "start": "2278160",
    "end": "2284720"
  },
  {
    "text": "just the duration this is 9000 seconds that's two and a half hours tables it's the table configuration from",
    "start": "2284720",
    "end": "2291760"
  },
  {
    "text": "the restaurant so this restaurant has four tables it has a table for two it has a table for four for six and four",
    "start": "2291760",
    "end": "2298079"
  },
  {
    "text": "eight so i thought that was easy to remember because that becomes important a little bit later on so now i have",
    "start": "2298079",
    "end": "2303359"
  },
  {
    "text": "those values so what would happen if i try to call i can i can sort of ask the",
    "start": "2303359",
    "end": "2308880"
  },
  {
    "text": "type system you know if i try to call with the seating duration",
    "start": "2308880",
    "end": "2313920"
  },
  {
    "text": "and with the tables and with the reservation then i lost the okay and then it came back",
    "start": "2313920",
    "end": "2321200"
  },
  {
    "text": "okay so what it would give me is this horrible looking thing here except t of blah blah blah blah",
    "start": "2321200",
    "end": "2327440"
  },
  {
    "text": "and you don't need to understand exactly what that is except for that it is a pure value it is it is not something",
    "start": "2327440",
    "end": "2333119"
  },
  {
    "text": "that is impure um but but the pure value actually describes a little program in a",
    "start": "2333119",
    "end": "2338400"
  },
  {
    "text": "little dsl and you need an interpreter to run over that program in order to figure out you know what's actually",
    "start": "2338400",
    "end": "2344320"
  },
  {
    "text": "going to happen this is how you interleave pure functions with impure actions and what happened when i ran the",
    "start": "2344320",
    "end": "2350640"
  },
  {
    "text": "actual code was that that interpreter then went and interacted with the database",
    "start": "2350640",
    "end": "2356640"
  },
  {
    "text": "but what i can do now is i can i can define another interpreter that instead of interacting with the database it's",
    "start": "2356640",
    "end": "2362400"
  },
  {
    "text": "going to replay what happened in the logs so i have another function here",
    "start": "2362400",
    "end": "2367440"
  },
  {
    "text": "called replay i think it's called replay yes and um it takes a the replay data that",
    "start": "2367440",
    "end": "2374320"
  },
  {
    "text": "we already have and it takes one of those except t horrible looking things and then it produces a pure value and",
    "start": "2374320",
    "end": "2380800"
  },
  {
    "text": "something called an either value that indicates whether it's a success or a failure that's basically how that works",
    "start": "2380800",
    "end": "2387440"
  },
  {
    "text": "um so you notice all of these are pure functions there's no nothing that says i o here so the replay",
    "start": "2387440",
    "end": "2394000"
  },
  {
    "text": "would be a pure function so what we can do is i can find the try",
    "start": "2394000",
    "end": "2399119"
  },
  {
    "text": "accept here and i can say let's replay that um with the replay data that i have",
    "start": "2399119",
    "end": "2406960"
  },
  {
    "text": "and i just need to put a little simple there and it produces the value right of",
    "start": "2406960",
    "end": "2412319"
  },
  {
    "text": "nothing so that basically just you know you know repeated the execution that happened on the server based on on the",
    "start": "2412319",
    "end": "2420400"
  },
  {
    "text": "on the log data and you know if it seems a little underwhelming that it just you know the output is right of nothing it's",
    "start": "2420400",
    "end": "2427599"
  },
  {
    "text": "because this was you know trying to save something in a database and that's all about the side effect and the side",
    "start": "2427599",
    "end": "2433440"
  },
  {
    "text": "effect doesn't really produce any output or it can but you know we didn't do that in this case so there's no output it",
    "start": "2433440",
    "end": "2438880"
  },
  {
    "text": "just means things went well there was no output fine okay so um",
    "start": "2438880",
    "end": "2445440"
  },
  {
    "text": "so the point the point of this is again it's not that i really tried i'm not trying to convince you that you should",
    "start": "2445440",
    "end": "2450720"
  },
  {
    "text": "write all your production code in haskell but it's it's interesting to do those",
    "start": "2450720",
    "end": "2457760"
  },
  {
    "text": "kinds of proofs of concepts because we learned something about you know what is pure",
    "start": "2457760",
    "end": "2463680"
  },
  {
    "text": "what can be pure and what has to be impure and what we've learned here for from this",
    "start": "2463680",
    "end": "2469359"
  },
  {
    "text": "little proof of concept is that the impure actions in a system like this one is first of all the database um and the",
    "start": "2469359",
    "end": "2476480"
  },
  {
    "text": "system clock now this is not surprising you know if you've done this sort of exercise a couple of times you will know",
    "start": "2476480",
    "end": "2482240"
  },
  {
    "text": "that databases are always impure because they involve io and the system clock is always impure because they're not",
    "start": "2482240",
    "end": "2489200"
  },
  {
    "text": "determined it's non-deterministic so but there might be other sources of impurity as well but in this state of",
    "start": "2489200",
    "end": "2495599"
  },
  {
    "text": "the of the application uh that's that's basically what we have to deal with",
    "start": "2495599",
    "end": "2501599"
  },
  {
    "text": "so in order to have you know in order to figure out what to log basically what what we've learned so far",
    "start": "2501599",
    "end": "2507760"
  },
  {
    "text": "is that we don't need to log what happens inside of a pure function because we can always",
    "start": "2507760",
    "end": "2513280"
  },
  {
    "text": "just re-run the function but the things that we can't just re-run",
    "start": "2513280",
    "end": "2518480"
  },
  {
    "text": "is all the stuff that's impure because that is non-deterministic or may have side effects so that's the stuff we need",
    "start": "2518480",
    "end": "2524640"
  },
  {
    "text": "to log no more than that but also no less than that we need all the impure",
    "start": "2524640",
    "end": "2530480"
  },
  {
    "text": "things logged but that's also going to be enough and that's sort of like what that little replay demo also",
    "start": "2530480",
    "end": "2536640"
  },
  {
    "text": "demonstrated so what we can now turn our attention to is",
    "start": "2536640",
    "end": "2542319"
  },
  {
    "text": "once we know that you know we can think about you know how do we then do that in a sane manner and not like this you",
    "start": "2542319",
    "end": "2549119"
  },
  {
    "text": "know all of those log statements that are sprinkled all over the code that just makes the code really unreadable so",
    "start": "2549119",
    "end": "2554319"
  },
  {
    "text": "so that's not what we want to do so i also wrote the code in visual studio",
    "start": "2554319",
    "end": "2559839"
  },
  {
    "text": "and see sharp so we can now try to have a look at that and the",
    "start": "2559839",
    "end": "2564880"
  },
  {
    "text": "the post method that i think is more readable is is this one here",
    "start": "2564880",
    "end": "2570640"
  },
  {
    "text": "so um it doesn't look like it's logging but it is and and the way that it works is you'll notice for example that",
    "start": "2570640",
    "end": "2577280"
  },
  {
    "text": "it's not accessing datetime.now it's doing something called clock.getcurrentdatetime",
    "start": "2577280",
    "end": "2582720"
  },
  {
    "text": "and if you know the.net api you're saying what's that i've never seen that before because normally you do",
    "start": "2582720",
    "end": "2588400"
  },
  {
    "text": "daytime.now so if you go to the definition here you'll find that this is actually a",
    "start": "2588400",
    "end": "2593520"
  },
  {
    "text": "method on an interface an interface called i clock and and i define this interface because i know the the",
    "start": "2593520",
    "end": "2599920"
  },
  {
    "text": "system time the clock is non-deterministic so i need to hide that behind an interface",
    "start": "2599920",
    "end": "2605760"
  },
  {
    "text": "so that's one thing also it turns out that the database interaction so for example if i'm reading the reservations",
    "start": "2605760",
    "end": "2612319"
  },
  {
    "text": "here if we go and have a look at that that's another interface this is a repository interface that defines read",
    "start": "2612319",
    "end": "2618640"
  },
  {
    "text": "reservations and it also defines a method called create so you probably um you know most people",
    "start": "2618640",
    "end": "2624960"
  },
  {
    "text": "will will probably have some data access that's hidden that's hidden behind an interface already so that should be sort",
    "start": "2624960",
    "end": "2630960"
  },
  {
    "text": "of you know not surprising and if we want to see you know what what kind of classes implement that interface",
    "start": "2630960",
    "end": "2638480"
  },
  {
    "text": "first of all we'll find something that is not surprising at all we have a class here called sql reservations repository",
    "start": "2638480",
    "end": "2644160"
  },
  {
    "text": "and if we just try to scroll a little bit we'll see we have some sql code actually sitting",
    "start": "2644160",
    "end": "2649920"
  },
  {
    "text": "here this could also be based on an orm it doesn't really matter but it's just like this is the thing that actually talks to",
    "start": "2649920",
    "end": "2656079"
  },
  {
    "text": "sql server so that's not surprising at all now it turns out though that if you",
    "start": "2656079",
    "end": "2663760"
  },
  {
    "text": "add other things that um that implement that interface there's another one um",
    "start": "2663760",
    "end": "2668960"
  },
  {
    "text": "there's one con log reservations repository and this this one also implements the",
    "start": "2668960",
    "end": "2674480"
  },
  {
    "text": "interface but it does that by taking an inner one and wrapping around that so this is a",
    "start": "2674480",
    "end": "2679839"
  },
  {
    "text": "design pattern known as the um it's the decorator design pattern and and if you're wondering okay so",
    "start": "2679839",
    "end": "2686240"
  },
  {
    "text": "what's the inner one we can go and look at the place where we actually create this thing and you'll notice it's not surprising that the",
    "start": "2686240",
    "end": "2692960"
  },
  {
    "text": "inner one for log reservations repository is actually that sql thing here but it might be something else but",
    "start": "2692960",
    "end": "2698800"
  },
  {
    "text": "you know that's that's the way that we use that i usually configure those things so inside of the log is is",
    "start": "2698800",
    "end": "2704400"
  },
  {
    "text": "sitting the sql implementation so um so what happens here with the create",
    "start": "2704400",
    "end": "2710000"
  },
  {
    "text": "method for example is that you know i take the reservation then i log that this interaction takes place and then i",
    "start": "2710000",
    "end": "2716480"
  },
  {
    "text": "call inner.create and this is a void method so it doesn't return anything but the same thing goes with the read",
    "start": "2716480",
    "end": "2723119"
  },
  {
    "text": "reservations thing here um i'm taking i'm calling in a resume inner dot read reservations first",
    "start": "2723119",
    "end": "2729119"
  },
  {
    "text": "and then i have the output of that i locked that this interaction took place you know what was the input what was the",
    "start": "2729119",
    "end": "2735200"
  },
  {
    "text": "output and then i returned the reservations and i do the same thing with the system clock we can very briefly look at that",
    "start": "2735200",
    "end": "2742319"
  },
  {
    "text": "if we're interested there's a system clock implementation that just you know delegates to daytime.now but then it's",
    "start": "2742319",
    "end": "2749359"
  },
  {
    "text": "decorated by this lock clock that not surprisingly just locks that we",
    "start": "2749359",
    "end": "2755119"
  },
  {
    "text": "accessed uh the the current time and what what the time was at that point",
    "start": "2755119",
    "end": "2761599"
  },
  {
    "text": "all right so um so i have the system running already so i should be able to go and interact with it and see if if",
    "start": "2761599",
    "end": "2767200"
  },
  {
    "text": "that actually works so it's running on a different port and i just need to figure out what that port",
    "start": "2767200",
    "end": "2772319"
  },
  {
    "text": "is so it's sitting right here and if you're wondering why it looks like there's an error at the moment it's just because",
    "start": "2772319",
    "end": "2777599"
  },
  {
    "text": "this is a proof of concept it's a very thin slice through the entire system so so this system",
    "start": "2777599",
    "end": "2783040"
  },
  {
    "text": "actually doesn't support you know http get requests it only supports a post and that's why we see that this um this 404",
    "start": "2783040",
    "end": "2790560"
  },
  {
    "text": "error here this is entirely expected i just needed the um the port number so i",
    "start": "2790560",
    "end": "2796160"
  },
  {
    "text": "can try to basically reuse that um that request from before just with a",
    "start": "2796160",
    "end": "2801440"
  },
  {
    "text": "different port number uh maybe just to keep things a little bit more interesting we should change the name here so instead of you know having ill",
    "start": "2801440",
    "end": "2808880"
  },
  {
    "text": "making the um the reservation it would be her brother rain and so",
    "start": "2808880",
    "end": "2815119"
  },
  {
    "text": "we'll have you know rainbows here instead of of elbows so if you remember the table",
    "start": "2815119",
    "end": "2820640"
  },
  {
    "text": "configuration of this restaurant it has table for two table for four for six and four eight so now we're trying to make",
    "start": "2820640",
    "end": "2826720"
  },
  {
    "text": "another reservation on the same date on the same time for two people now that should still be possible because we have",
    "start": "2826720",
    "end": "2832800"
  },
  {
    "text": "a table for four maybe not good business for the restaurant but you know if if they don't have any other reservations",
    "start": "2832800",
    "end": "2838319"
  },
  {
    "text": "that could work now what i did here is that i actually i introduced you know deliberately a",
    "start": "2838319",
    "end": "2845119"
  },
  {
    "text": "little bug in the system um so um so if i try to actually run this",
    "start": "2845119",
    "end": "2851520"
  },
  {
    "text": "it's it doesn't work oh no you know you'll notice here it says you",
    "start": "2851520",
    "end": "2857119"
  },
  {
    "text": "know internals 500 internal server error couldn't accept",
    "start": "2857119",
    "end": "2862558"
  },
  {
    "text": "what went wrong there's a bug in the system how can we troubleshoot that",
    "start": "2863599",
    "end": "2868720"
  },
  {
    "text": "uh if only there were logging let's see where do we put the log we can just put the log in the file there you can see",
    "start": "2868720",
    "end": "2874079"
  },
  {
    "text": "there's this thing called log.txt here so yeah we actually like what happened that was that's fortunate and let's just",
    "start": "2874079",
    "end": "2880720"
  },
  {
    "text": "clear this and have a look at it so what's inside log.txt well um in this in",
    "start": "2880720",
    "end": "2886800"
  },
  {
    "text": "this sharp demo here i decided to do that as a json document instead of this you know haskell um you know code",
    "start": "2886800",
    "end": "2892880"
  },
  {
    "text": "instead because that's easy ng-sharp but but the idea is the same we have all the data that we need in",
    "start": "2892880",
    "end": "2898960"
  },
  {
    "text": "order to figure out what what actually went wrong so what i can do with this is i'm going to move that log file to my",
    "start": "2898960",
    "end": "2904559"
  },
  {
    "text": "unit testing you know library so booking api.unit tests and i'm going to call it",
    "start": "2904559",
    "end": "2909680"
  },
  {
    "text": "repro1.txt so just you know moving moving the file",
    "start": "2909680",
    "end": "2915359"
  },
  {
    "text": "there and then if i go and have a look at my code in um in visual studio if i",
    "start": "2915359",
    "end": "2920559"
  },
  {
    "text": "scroll down and have a look at my unit tests you can see repro.txt is sitting is",
    "start": "2920559",
    "end": "2926319"
  },
  {
    "text": "sitting right here and one thing i actually want to do straight away is i'm just going to make that an embedded",
    "start": "2926319",
    "end": "2932000"
  },
  {
    "text": "resource um and it's it's basically because i actually want to read the contents of that file and when doing",
    "start": "2932000",
    "end": "2938160"
  },
  {
    "text": "that from a unit tests it's you know i think it's easier to just make it an embedded resource and read it from there because otherwise you need to manage",
    "start": "2938160",
    "end": "2943760"
  },
  {
    "text": "actually moving files and copying files around it making sure that they're cleaned up afterwards and so on your",
    "start": "2943760",
    "end": "2948880"
  },
  {
    "text": "mileage may vary but that's that's what i usually do so i'm going to add add a new test class here and want to be able",
    "start": "2948880",
    "end": "2955760"
  },
  {
    "text": "to reproduce this problem here so i'm going to add a class called repros",
    "start": "2955760",
    "end": "2961280"
  },
  {
    "text": "and make it a public class",
    "start": "2961280",
    "end": "2967280"
  },
  {
    "text": "i'm using xunit.net so i have to decorate it with this effect attribute here",
    "start": "2967280",
    "end": "2973119"
  },
  {
    "text": "and let's say public void i'm just going to call this repro 1 as well",
    "start": "2973119",
    "end": "2980319"
  },
  {
    "text": "so this is the first repro that i want to do so the first thing i want to do is just load the log from that embedded",
    "start": "2980319",
    "end": "2985760"
  },
  {
    "text": "resource so i can i and i did cheat a little bit so i have you know an api for that",
    "start": "2985760",
    "end": "2991200"
  },
  {
    "text": "so i'm just going to say okay i'm going to load repro 1.txt from that embedded resource there so ill",
    "start": "2991200",
    "end": "2998720"
  },
  {
    "text": "let's call it log that's a little bit easier so l is just a string and you recall that that string is actually a",
    "start": "2998720",
    "end": "3004559"
  },
  {
    "text": "json document then now the next thing i want to do then is i want to have a system under test i want to you know be able to",
    "start": "3004559",
    "end": "3011119"
  },
  {
    "text": "create you know and an object and test this and i also need to read the um the data transfer object",
    "start": "3011119",
    "end": "3018559"
  },
  {
    "text": "the dto from the log so what i can do here is i'll show you how this works afterwards but i'm basically i have a",
    "start": "3018559",
    "end": "3024720"
  },
  {
    "text": "little api for that as well where i say load load the reservation controller post scenario and then what it does it",
    "start": "3024720",
    "end": "3031520"
  },
  {
    "text": "returns back the system under test that's my reservations controller the one that has the post method and then it",
    "start": "3031520",
    "end": "3038079"
  },
  {
    "text": "also gives me a dto that was passed out of that log file so that's the reservations dto",
    "start": "3038079",
    "end": "3043920"
  },
  {
    "text": "object and i can now you know exercise my system under test so i can say post that dto you know so",
    "start": "3043920",
    "end": "3050960"
  },
  {
    "text": "again i'll remind you the dto is passed from the um",
    "start": "3050960",
    "end": "3057040"
  },
  {
    "text": "from the log file and then you know what's actually supposed to happen you know this um this actual here is",
    "start": "3057040",
    "end": "3063839"
  },
  {
    "text": "something called an action result so i want to say that this should be assignable from something called an ok",
    "start": "3063839",
    "end": "3069440"
  },
  {
    "text": "result because i would expect this to work i also know that it didn't i'm",
    "start": "3069440",
    "end": "3074480"
  },
  {
    "text": "going to need to import a namespace here i also know that it didn't so if i try",
    "start": "3074480",
    "end": "3079760"
  },
  {
    "text": "to run my tests now i would expect this one to fail because that was a bug in",
    "start": "3079760",
    "end": "3085599"
  },
  {
    "text": "the system and and it does it actually does fail so it says you know i expected you know",
    "start": "3085599",
    "end": "3092240"
  },
  {
    "text": "i expected an okay result but i actually got an object result and and if you if you try to sort of examine",
    "start": "3092240",
    "end": "3098559"
  },
  {
    "text": "that object results you'll you'll figure out or you'll find that it actually contains a 500 internal server error",
    "start": "3098559",
    "end": "3104480"
  },
  {
    "text": "with the message couldn't accept so that's how that works so we now have a nice repro of of things here",
    "start": "3104480",
    "end": "3111520"
  },
  {
    "text": "and i can show you in a little while exactly how that works but but the nice thing about having a repro is that now",
    "start": "3111520",
    "end": "3117520"
  },
  {
    "text": "you can actually start troubleshooting so um i know so i deliberately made this this",
    "start": "3117520",
    "end": "3124000"
  },
  {
    "text": "little piece of sabotage here so um um so i know where to go and look for it so the d the defect is actually sitting",
    "start": "3124000",
    "end": "3131599"
  },
  {
    "text": "around here so i'm just going to add a break point just to prove a point here so i can i can add a breakpoint i can go",
    "start": "3131599",
    "end": "3137119"
  },
  {
    "text": "back to repros i can decide to go and debug that particular test",
    "start": "3137119",
    "end": "3142800"
  },
  {
    "text": "and and i'm gonna wait a while because",
    "start": "3142800",
    "end": "3149359"
  },
  {
    "text": "that takes some time let's see i think we hit the um the break point now",
    "start": "3149359",
    "end": "3154640"
  },
  {
    "text": "so um so what's what's happening when we're running this test is that it's using the log information to replay what",
    "start": "3154640",
    "end": "3160960"
  },
  {
    "text": "actually happened and then you know at this point we are going through a loop and trying to find the index of a table",
    "start": "3160960",
    "end": "3167520"
  },
  {
    "text": "that can fit the um that can fit the the the the reservation that we're interested in and we find the",
    "start": "3167520",
    "end": "3174640"
  },
  {
    "text": "index it's the first uh you know it's the first table in the collection in the in that",
    "start": "3174640",
    "end": "3180240"
  },
  {
    "text": "array so the index is zero um so we've actually did find it but then you know so we say okay so we found",
    "start": "3180240",
    "end": "3185920"
  },
  {
    "text": "the table uh that means we can remove the tables you know down here we can remove that the table or that index oh",
    "start": "3185920",
    "end": "3192319"
  },
  {
    "text": "no it returns false and it you know we have an off by one error here um so it's",
    "start": "3192319",
    "end": "3197760"
  },
  {
    "text": "it it shouldn't have been you know less than or equal it should just have been less than so now we understand what the",
    "start": "3197760",
    "end": "3203599"
  },
  {
    "text": "problem is and you know i i knew that because i actually deliberately introduced this bug but the point is",
    "start": "3203599",
    "end": "3210079"
  },
  {
    "text": "you can you can actually use the debugger or you can use all your other you know troubleshooting skills because",
    "start": "3210079",
    "end": "3216000"
  },
  {
    "text": "now you have a you know a deterministic repro of the problem and then once you find the problem you also have a nice",
    "start": "3216000",
    "end": "3222319"
  },
  {
    "text": "reprotest that you could that you can then run and um and see that you've you know you now fix that you know that",
    "start": "3222319",
    "end": "3228480"
  },
  {
    "text": "particular defect so how does this work um let's go back and have a look at the",
    "start": "3228480",
    "end": "3234400"
  },
  {
    "text": "repro so what happens inside of this method here is that it it takes the json",
    "start": "3234400",
    "end": "3241119"
  },
  {
    "text": "document and it starts to pass that json document and it looks at all the different operations",
    "start": "3241119",
    "end": "3246400"
  },
  {
    "text": "that it encounters and and you know sorts them out into various different collections and uh and then it",
    "start": "3246400",
    "end": "3253520"
  },
  {
    "text": "creates some replay implementations of those uh those interfaces so it's probably",
    "start": "3253520",
    "end": "3258640"
  },
  {
    "text": "easiest to understand the replay log uh the replay clock sorry so when you",
    "start": "3258640",
    "end": "3263839"
  },
  {
    "text": "initialize the replay clock you take all the observations that you've seen in the log file of you know whenever the system",
    "start": "3263839",
    "end": "3270240"
  },
  {
    "text": "is asking for the current time you you put that in a collection this is an innumerable of date time you pass that",
    "start": "3270240",
    "end": "3276240"
  },
  {
    "text": "to the constructor of the replay clock it creates a queue out of those because they they should be in order and then",
    "start": "3276240",
    "end": "3283200"
  },
  {
    "text": "every time we call getcurrenttime this is that's the interface method we dq one of those values that that comes",
    "start": "3283200",
    "end": "3290319"
  },
  {
    "text": "from the log file and we return that so that's how it's replaying",
    "start": "3290319",
    "end": "3295520"
  },
  {
    "text": "what happened and the same thing basically is true for the repository it looks a little bit more complicated but",
    "start": "3295520",
    "end": "3301920"
  },
  {
    "text": "basically the idea is the same when we call read reservations so read reservations might be called called with",
    "start": "3301920",
    "end": "3308720"
  },
  {
    "text": "you know more than one date time so the first level of um of data that i have here is a dictionary",
    "start": "3308720",
    "end": "3316240"
  },
  {
    "text": "where where i index into the dictionary and say okay i want the entry in that dictionary that con you know that",
    "start": "3316240",
    "end": "3322799"
  },
  {
    "text": "corresponds to this particular date and i may have may have seen more than one observation of that particular date so",
    "start": "3322799",
    "end": "3329200"
  },
  {
    "text": "inside of that you know dictionary entry there's a queue because there might be more than one observation of that query",
    "start": "3329200",
    "end": "3335200"
  },
  {
    "text": "and then again i dequeue one of those values which is an iono mobile of reservation and then i return that",
    "start": "3335200",
    "end": "3341760"
  },
  {
    "text": "so so these are two things you know the repository here which is a replay repository and the clock which is a",
    "start": "3341760",
    "end": "3347599"
  },
  {
    "text": "replay clock i now pass them as dependencies i inject them into the reservations controller so",
    "start": "3347599",
    "end": "3353599"
  },
  {
    "text": "when the reservation controller and all sorts of other things that might you know want to interact with those things",
    "start": "3353599",
    "end": "3358640"
  },
  {
    "text": "when it comes methods on those classes it replaced what was in the log",
    "start": "3358640",
    "end": "3364000"
  },
  {
    "text": "so that that's how that works right okay so we're pretty much done um",
    "start": "3364000",
    "end": "3370880"
  },
  {
    "text": "so just to summarize we really favor pure functions because pure functions we can always just",
    "start": "3370880",
    "end": "3376680"
  },
  {
    "text": "re-repeat that execution to get you know the the result if we know what the input to the pure function is",
    "start": "3376680",
    "end": "3383040"
  },
  {
    "text": "when then we also know what the output will be we can just run the function again so we want to have as much pure",
    "start": "3383040",
    "end": "3388319"
  },
  {
    "text": "code as possible because all the stuff that happens in pure code um we don't need to lock that what we need",
    "start": "3388319",
    "end": "3394160"
  },
  {
    "text": "to log is the impure actions in this case we saw one example was the system clock we want to log all of those",
    "start": "3394160",
    "end": "3400000"
  },
  {
    "text": "accesses and also you know we are accessing these the database we want to",
    "start": "3400000",
    "end": "3405440"
  },
  {
    "text": "log that as well so the way that i do that i'm using this decorator pattern where i'm wrapping the actual implementations in another",
    "start": "3405440",
    "end": "3412000"
  },
  {
    "text": "implementation of the same interface that then performs the locking you know the decorator design pattern",
    "start": "3412000",
    "end": "3417280"
  },
  {
    "text": "so basically in order to to do this there's um",
    "start": "3417280",
    "end": "3423040"
  },
  {
    "text": "well you sort of need to move towards a functional paradigm because otherwise you're just going to have a lot of",
    "start": "3423040",
    "end": "3428799"
  },
  {
    "text": "impure and pure code interleaved but but if you can do it uh here's the",
    "start": "3428799",
    "end": "3435200"
  },
  {
    "text": "here's the recipe so first of all identify all the impure actions so in this case it was the system clock and",
    "start": "3435200",
    "end": "3441520"
  },
  {
    "text": "the database make you know model those actions as polymorphic types you know an interface",
    "start": "3441520",
    "end": "3447440"
  },
  {
    "text": "or base class because otherwise you can't use the decorator design pattern i just stick with interfaces so make interfaces out of the database access",
    "start": "3447440",
    "end": "3454720"
  },
  {
    "text": "make interfaces out of the you know accessing the system clock if you have other things if you need to send emails",
    "start": "3454720",
    "end": "3460960"
  },
  {
    "text": "you need to hide that behind an interface as well if you want to generate random numbers you know you need to hide that behind an interface",
    "start": "3460960",
    "end": "3467520"
  },
  {
    "text": "and once you've defined all of those things that are impure you know behind an interface you know use a decorator",
    "start": "3467520",
    "end": "3472960"
  },
  {
    "text": "design use the decorated design pattern to you know lock from the decorator and that means",
    "start": "3472960",
    "end": "3479599"
  },
  {
    "text": "when you're using one of those polymorphic types there's no locking noise in your actual code it just",
    "start": "3479599",
    "end": "3484799"
  },
  {
    "text": "happens automatically that you know whenever you're doing something impure it's being locked and to um to a lock a",
    "start": "3484799",
    "end": "3491680"
  },
  {
    "text": "lock destination somewhere and then you know profit basically uh use the logs to",
    "start": "3491680",
    "end": "3497680"
  },
  {
    "text": "enable replay so it's just to make sure that that i get my point across here it's not that i",
    "start": "3497680",
    "end": "3504319"
  },
  {
    "text": "it's not that i actually recommend that you create one of those replay machineries that i just showed you here",
    "start": "3504319",
    "end": "3510400"
  },
  {
    "text": "the reason why i showed you this replay stuff is just to get the point across how deterministic it actually is if you",
    "start": "3510400",
    "end": "3517119"
  },
  {
    "text": "have the right amount of information in your log now i didn't do that when i worked for that company that i talked",
    "start": "3517119",
    "end": "3522720"
  },
  {
    "text": "about you know seven or eight years ago what we did was basically just look through the logs and then we all there",
    "start": "3522720",
    "end": "3528480"
  },
  {
    "text": "was always enough information in the log that we understood but you know we could get an understanding of what the problem",
    "start": "3528480",
    "end": "3534480"
  },
  {
    "text": "was and then we could go and re and write a unit test that reproduced what happened at at run time you know maybe",
    "start": "3534480",
    "end": "3541839"
  },
  {
    "text": "using some of the data that we could pull from the log so it was more like an ad hoc process you know go and look at the logs you",
    "start": "3541839",
    "end": "3548640"
  },
  {
    "text": "know maybe take some copies of the things you know write a repro you know and then run that one so it's not that i",
    "start": "3548640",
    "end": "3553920"
  },
  {
    "text": "have you know this fancy machinery this was just to get the point across but that's basically um",
    "start": "3553920",
    "end": "3560559"
  },
  {
    "text": "what um what i have in mind for for this talk if you if you want to see more of the details of how that works you can go",
    "start": "3560559",
    "end": "3566880"
  },
  {
    "text": "to block the plot.dk and you know find the archive search for repeatable",
    "start": "3566880",
    "end": "3572319"
  },
  {
    "text": "execution and i have a little blog series with three blog posts that that walks you through that and shows you",
    "start": "3572319",
    "end": "3578079"
  },
  {
    "text": "some more of that code so if you're interested in that you can find it there and all free",
    "start": "3578079",
    "end": "3583119"
  },
  {
    "text": "you can also also go and buy some of my books if you'd like to and in code that fits in your head i talk a little bit about that but actually most of the",
    "start": "3583119",
    "end": "3590079"
  },
  {
    "text": "details are on the blog so that's probably where you want to go an amount of time that fits perfectly because i'm",
    "start": "3590079",
    "end": "3596240"
  },
  {
    "text": "also out of slides and out of content so thanks for coming",
    "start": "3596240",
    "end": "3601838"
  }
]