[
  {
    "text": "well welcome everybody wow okay welcome everybody thanks so much",
    "start": "4759",
    "end": "9800"
  },
  {
    "text": "for joining me today my name is Brandon mik and in this session we'll be talking about correcting common async await",
    "start": "9800",
    "end": "16600"
  },
  {
    "text": "mistakes in.net now I'm going to be moving fast because async await came out a long time",
    "start": "16600",
    "end": "23480"
  },
  {
    "text": "ago and every new release ofn net has come out with more async aake goodies so",
    "start": "23480",
    "end": "29160"
  },
  {
    "text": "there's more had to add into this presentation so it's about an hour and a half worth of material we're going to",
    "start": "29160",
    "end": "34280"
  },
  {
    "text": "cram into an hour but don't worry because if you go to this website that I made for you today Cod traveler. async",
    "start": "34280",
    "end": "42039"
  },
  {
    "text": "best practices you can find everything recovering today you can find a recording of this talk from a previous",
    "start": "42039",
    "end": "47920"
  },
  {
    "text": "NDC session you can find the slides we're going to be looking at open source samples you can find those on GitHub",
    "start": "47920",
    "end": "54079"
  },
  {
    "text": "they're all linked there as long along with a bunch of resources if you want to dive further down this Rabbit Hole um",
    "start": "54079",
    "end": "61559"
  },
  {
    "text": "this is a a special topic for me because I'm I'm actually a mobile app developer",
    "start": "61559",
    "end": "66799"
  },
  {
    "text": "I make apps for IOS and Android using zamarin and net Maui and everything",
    "start": "66799",
    "end": "72119"
  },
  {
    "text": "we're talking about today are mistakes that I've made and it was until I kind of went down the rabbit hole did I",
    "start": "72119",
    "end": "79040"
  },
  {
    "text": "really understand what was going on so let's jump into it because we got a lot to cover now we're going to break down",
    "start": "79040",
    "end": "85840"
  },
  {
    "text": "this method and see what's really going on uh yes this is old code still using web client no you should not be using",
    "start": "85840",
    "end": "92880"
  },
  {
    "text": "web client this is not part of the best practices this is old code like I said I've been given this talk for a few",
    "start": "92880",
    "end": "98360"
  },
  {
    "text": "years now slides are a little complicated as you'll see in a second and I haven't updated them yet but what",
    "start": "98360",
    "end": "104759"
  },
  {
    "text": "we're looking at here is an async task method called read data from URL we pass in a string URL then we new up a web",
    "start": "104759",
    "end": "111799"
  },
  {
    "text": "client web client calls download data task async and we await it which is good",
    "start": "111799",
    "end": "117680"
  },
  {
    "text": "we want to we want to await that task because if download data task async",
    "start": "117680",
    "end": "123560"
  },
  {
    "text": "takes a couple seconds well we want that to be happening on a background thread we don't want our UI to be tied or UI",
    "start": "123560",
    "end": "131280"
  },
  {
    "text": "thread to be tied up and processing stuff in the background so what's actually going on here well let's say",
    "start": "131280",
    "end": "139000"
  },
  {
    "text": "thread one kicks off this method so thread one jumps into read data from URL",
    "start": "139000",
    "end": "144160"
  },
  {
    "text": "it news up web client and in the signs bite array B bite array result um but",
    "start": "144160",
    "end": "150920"
  },
  {
    "text": "then thread one hits that awake keyword and it returns it goes back to interact",
    "start": "150920",
    "end": "156400"
  },
  {
    "text": "with the user and this is really important because again thread one's our calling thread thread one's our UI",
    "start": "156400",
    "end": "161840"
  },
  {
    "text": "thread thread one's our main thread and thread one is the only thread that can interact with the user so if we have our",
    "start": "161840",
    "end": "169200"
  },
  {
    "text": "app on the screen and the user starts scrolling thread one's the only one that can redraw the UI or if the user Taps a",
    "start": "169200",
    "end": "175080"
  },
  {
    "text": "button thread one's the only thread that can respond to that button tap so if thread one was is running download data",
    "start": "175080",
    "end": "180760"
  },
  {
    "text": "task async well let's say it takes 5 Seconds thread one's then Frozen for 5",
    "start": "180760",
    "end": "185959"
  },
  {
    "text": "seconds it can't respond any button Taps it can't respond to any swipes and our app's basically Frozen and what happens",
    "start": "185959",
    "end": "192080"
  },
  {
    "text": "next our users you know they force quit the app they give us a onear review on the App Store and life's not good but",
    "start": "192080",
    "end": "198440"
  },
  {
    "text": "luckily we have async await so as soon as we call the await keyword a",
    "start": "198440",
    "end": "203959"
  },
  {
    "text": "background thread will run that task so a background thread runs download data task async uh in this case we call it",
    "start": "203959",
    "end": "210000"
  },
  {
    "text": "thread 2 but it could be any thread from the thread pool uh there's a we don't have time to dive into it today but net",
    "start": "210000",
    "end": "216959"
  },
  {
    "text": "has a thread pool that it manages for us so every other thread other than thread one is a background thread and depending",
    "start": "216959",
    "end": "223159"
  },
  {
    "text": "on the size of your server your phone whatever is running the code determines",
    "start": "223159",
    "end": "228480"
  },
  {
    "text": "the size of the thread pool so if you have more CPU power more RAM you'll have a bigger thread pool than say like a",
    "start": "228480",
    "end": "233760"
  },
  {
    "text": "little Raspberry Pi but when thread 2 is done when download t t when when",
    "start": "233760",
    "end": "239920"
  },
  {
    "text": "download data task async is finished thread 2 shouts back to thread one and goes hey I'm all done you're back up and",
    "start": "239920",
    "end": "247680"
  },
  {
    "text": "thread one jumps back in and thread one continues running our code so thread one",
    "start": "247680",
    "end": "252799"
  },
  {
    "text": "uh creates that string data by uh passing in the bite array and then kicks off that load data method so to really",
    "start": "252799",
    "end": "261199"
  },
  {
    "text": "understand how all this works because the threads really talk to each other no they're not people they're just computer",
    "start": "261199",
    "end": "266800"
  },
  {
    "text": "programs we've got to look at the compiler gener ated code so what you might not know is anytime",
    "start": "266800",
    "end": "275000"
  },
  {
    "text": "you create an async task method the compiler creates all of this code for",
    "start": "275000",
    "end": "280560"
  },
  {
    "text": "you now the first thing you'll notice is the compiler generated a class I didn't",
    "start": "280560",
    "end": "288080"
  },
  {
    "text": "write a class I made a method but when this code compiles the compiler turns our async task method into a class that",
    "start": "288080",
    "end": "295400"
  },
  {
    "text": "inherits from I async State machine now if you look closely these variable names",
    "start": "295400",
    "end": "300960"
  },
  {
    "text": "look very very similar like this class is called angle bracket read data from",
    "start": "300960",
    "end": "306120"
  },
  {
    "text": "URL angle bracket dore1 you know it's got a little bit of a funny name but that's basically the same uh same as my",
    "start": "306120",
    "end": "312759"
  },
  {
    "text": "method name and the compiler does this on purpose because we can't we can't use angle",
    "start": "312759",
    "end": "320360"
  },
  {
    "text": "brackets for our our class names that's an invalid class name if we were to write that code but the compiler can do",
    "start": "320360",
    "end": "326720"
  },
  {
    "text": "it and it does it on purpose so that it avoids comp avoids any conflicts so this",
    "start": "326720",
    "end": "332479"
  },
  {
    "text": "way it can generate a class it knows there's no other class in our code called angle bracket read data from URL",
    "start": "332479",
    "end": "338319"
  },
  {
    "text": "angle bracket because again that'd be illegal for us to write but compiler knows the rules so it can break its own",
    "start": "338319",
    "end": "343720"
  },
  {
    "text": "rules so it generates all this code for us it generates also all these fields so",
    "start": "343720",
    "end": "349120"
  },
  {
    "text": "every private or rather every local variable that we created in our code",
    "start": "349120",
    "end": "355520"
  },
  {
    "text": "becomes a field so we have private string data we've got private bite array result we have private web client WC and",
    "start": "355520",
    "end": "363520"
  },
  {
    "text": "we have public string URL now that's public because if you remember URL was",
    "start": "363520",
    "end": "369240"
  },
  {
    "text": "the parameter we passed into the method now the biggest thing in here and",
    "start": "369240",
    "end": "375680"
  },
  {
    "text": "this is where we're going to focus a lot on today is this move next method and this is what used to baffle me because I",
    "start": "375680",
    "end": "383680"
  },
  {
    "text": "I started publishing apps to the App Store uh about eight years ago and I I",
    "start": "383680",
    "end": "389080"
  },
  {
    "text": "thought understood async A8 I didn't uh but uh I would get these weird bug",
    "start": "389080",
    "end": "394919"
  },
  {
    "text": "reports these weird stack traces would come back in like I would see move next all over these stack traces and I'm like",
    "start": "394919",
    "end": "401280"
  },
  {
    "text": "what is this method you know I I never wrote a method in my code called move next and well it turns out it's because",
    "start": "401280",
    "end": "407080"
  },
  {
    "text": "it was autogenerated from the compiler so let's actually look at what move next",
    "start": "407080",
    "end": "412880"
  },
  {
    "text": "looks like so this is the code that the compiler generated for move next and",
    "start": "412880",
    "end": "418440"
  },
  {
    "text": "essentially what this is is is a giant State machine so you can see it's essentially a giant switch statement",
    "start": "418440",
    "end": "425280"
  },
  {
    "text": "with multiple cases in it and the way this works every time we use the await",
    "start": "425280",
    "end": "430639"
  },
  {
    "text": "keyword the compiler will generate another case so in this example we use",
    "start": "430639",
    "end": "435840"
  },
  {
    "text": "the awake keyword once so we have two cases if we were to use the awake keyword twice we would have three cases",
    "start": "435840",
    "end": "442440"
  },
  {
    "text": "if we use the awake keyword four times we would have five cases so for every awake keyword it generates another case",
    "start": "442440",
    "end": "449879"
  },
  {
    "text": "in our switch statement and if we look at case Zero we can see this is basically our code leading up to that",
    "start": "449879",
    "end": "456759"
  },
  {
    "text": "first await so we we initialize that web client we kick off download data task",
    "start": "456759",
    "end": "462039"
  },
  {
    "text": "async s it to a variable called a waiter zero and then we return so this is this",
    "start": "462039",
    "end": "467240"
  },
  {
    "text": "is the magic this is how thread one knows to leave the method and it can just return to continue interacting with",
    "start": "467240",
    "end": "473479"
  },
  {
    "text": "the user continue handling those button Taps scrolling drawing on the screen the",
    "start": "473479",
    "end": "479400"
  },
  {
    "text": "because it knows download data task async is going to be run in the background on a different",
    "start": "479400",
    "end": "485560"
  },
  {
    "text": "thread now before it returns though it sets that value of PC to one and this is",
    "start": "485560",
    "end": "492759"
  },
  {
    "text": "important because remember when thread 2 is done it shouts back to thread one and goes hey you're back up and thread one's",
    "start": "492759",
    "end": "498919"
  },
  {
    "text": "got to jump back into our code and the way thread one knows where to pick up where it left off is from that variable",
    "start": "498919",
    "end": "506599"
  },
  {
    "text": "so it set the new state that PC variable to one so now it knows it just jumps",
    "start": "506599",
    "end": "512719"
  },
  {
    "text": "back into case one where it gets the result from download data task async encodes that bite array into a string",
    "start": "512719",
    "end": "519518"
  },
  {
    "text": "and runs that method called load data now here is the gotcha this is the",
    "start": "519519",
    "end": "527800"
  },
  {
    "text": "biggest problem that causes the most headaches that in uh C code that I see",
    "start": "527800",
    "end": "533360"
  },
  {
    "text": "today and it's because everything in move next is wrapped in a tri catch block now now I didn't write a tri catch",
    "start": "533360",
    "end": "541040"
  },
  {
    "text": "block but what the compiler did it took all my code and put it inside of this Tri catch block so this means that if",
    "start": "541040",
    "end": "549000"
  },
  {
    "text": "any of my code throws an exception it's going to be caught by this exception",
    "start": "549000",
    "end": "554680"
  },
  {
    "text": "Handler and now that's usually okay because as long as we use the await",
    "start": "554680",
    "end": "560560"
  },
  {
    "text": "keyword when we call the task as long as we say await task that exception gets",
    "start": "560560",
    "end": "566920"
  },
  {
    "text": "rethrown but if you don't the task that exception disappears and it's gone",
    "start": "566920",
    "end": "573399"
  },
  {
    "text": "forever and this was the biggest problem of mine uh when I first started out when",
    "start": "573399",
    "end": "579040"
  },
  {
    "text": "I started making mobile apps using zamin publishing to the App Store and the weird bugs I was seeing was because I",
    "start": "579040",
    "end": "584839"
  },
  {
    "text": "thought I was being smart I knew about background threads and I knew about a single weight or at least I thought I did uh so I would say things like task.",
    "start": "584839",
    "end": "592680"
  },
  {
    "text": "run and put a bunch of Co in there cuz I knew I wanted the UI thread to be free I",
    "start": "592680",
    "end": "598680"
  },
  {
    "text": "wanted this code to run on a background task but I didn't care when this code finished it was just a background task",
    "start": "598680",
    "end": "603959"
  },
  {
    "text": "so I didn't a wait task.run so I would just say task. run boom go ahead and what I didn't know was that code was",
    "start": "603959",
    "end": "610760"
  },
  {
    "text": "throwing an exception but because I wasn't awaiting the task that exception was caught in this exception Handler and",
    "start": "610760",
    "end": "617519"
  },
  {
    "text": "it was never bubbled up to me the developer so I never caught it in any of my testing and it would happen you know",
    "start": "617519",
    "end": "623680"
  },
  {
    "text": "in weird scenarios that didn't expect just like exceptions usually do uh now you might thinking well wait a minute we",
    "start": "623680",
    "end": "631880"
  },
  {
    "text": "got rid of exceptions that's a good thing right no exceptions are good we",
    "start": "631880",
    "end": "637200"
  },
  {
    "text": "want exceptions to be thrown because exceptions happen when there's an exceptional case when there's something",
    "start": "637200",
    "end": "643360"
  },
  {
    "text": "that we didn't write code for that the system doesn't know how to handle occurs that's when exceptions get thrown so we",
    "start": "643360",
    "end": "650360"
  },
  {
    "text": "want exceptions to be bubbled up to us so that we can handle them gracefully whereas with my code when I said task.",
    "start": "650360",
    "end": "657399"
  },
  {
    "text": "run put a bunch of code in it didn't a wait it those exceptions were getting caught never resurfaced to me so that I",
    "start": "657399",
    "end": "663560"
  },
  {
    "text": "could handle them and then what happened to my apps was my apps now in this weird state that I never planned for you know",
    "start": "663560",
    "end": "669440"
  },
  {
    "text": "it's like if somebody's on a bus using my app and they try to press the submit button and it fails because maybe the",
    "start": "669440",
    "end": "675600"
  },
  {
    "text": "bus goes through a tunnel well what happens well I don't know because I'm",
    "start": "675600",
    "end": "680760"
  },
  {
    "text": "assuming that it finished successfully I never realized that my exceptions were being swallowed",
    "start": "680760",
    "end": "687240"
  },
  {
    "text": "up okay so let's do a quick review the async keyword adds about 100",
    "start": "687240",
    "end": "692639"
  },
  {
    "text": "bytes nowadays this is more of a fun fact than anything else cuz does anybody",
    "start": "692639",
    "end": "697760"
  },
  {
    "text": "really care about 100 bytes I don't you know we're talking 100 bytes not 100",
    "start": "697760",
    "end": "702959"
  },
  {
    "text": "kilobytes not 100 megabytes not 100 gigabytes this just 100 bytes so this is",
    "start": "702959",
    "end": "708360"
  },
  {
    "text": "more of a fun fact that yes the compiler has to write some extra code for us so that extra code makes our app size a",
    "start": "708360",
    "end": "714360"
  },
  {
    "text": "little larger but in reality I don't really care about this but if if you are working on a an embedded system or",
    "start": "714360",
    "end": "721639"
  },
  {
    "text": "Raspberry Pi maybe this matters but just know that every async class or every",
    "start": "721639",
    "end": "727320"
  },
  {
    "text": "async keyword becomes a class and that adds about a 100 bytes to our app",
    "start": "727320",
    "end": "732399"
  },
  {
    "text": "size and we want to await every task because like we said non awaited tasks",
    "start": "732399",
    "end": "737560"
  },
  {
    "text": "hide exceptions and that's a bad thing we want exceptions to be rethrown bubbled back up to us as the developer",
    "start": "737560",
    "end": "744120"
  },
  {
    "text": "so that we can handle them gracefully and we can tell our app what to do if our app this is internet connection for",
    "start": "744120",
    "end": "750440"
  },
  {
    "text": "example okay so let's actually jump into some code here I've I've got a sample",
    "start": "750440",
    "end": "755880"
  },
  {
    "text": "app and again this is all open source the links available on on the website",
    "start": "755880",
    "end": "761120"
  },
  {
    "text": "and I'll give you a chance to uh grab that link before we finish again today but this sample app is it's just an app",
    "start": "761120",
    "end": "768360"
  },
  {
    "text": "that I made to pull down the top stories from Hacker News if you've never heard of Hacker News it's just a it's a cool",
    "start": "768360",
    "end": "774839"
  },
  {
    "text": "website where people can share um cool text stories so if you're into that stuff you can check it out I like to",
    "start": "774839",
    "end": "781000"
  },
  {
    "text": "flip through it every now and again um and so I made this app that goes out pulls the top stories from The Hacker",
    "start": "781000",
    "end": "787360"
  },
  {
    "text": "News API and displays them here in the mobile app so that way I don't have to click through them and I can just tap on",
    "start": "787360",
    "end": "793320"
  },
  {
    "text": "any of these and I can read the article right here so let's jump into this code",
    "start": "793320",
    "end": "798680"
  },
  {
    "text": "now again don't worry about memorizing anything because you'll see we're working in this class called news view",
    "start": "798680",
    "end": "805440"
  },
  {
    "text": "model bad asyn practices but the good good news is I've already completed this",
    "start": "805440",
    "end": "811920"
  },
  {
    "text": "for you so there's another view model called good I in away practices where",
    "start": "811920",
    "end": "816959"
  },
  {
    "text": "everything we're talking about today is already done so let's jump into it and the first one",
    "start": "816959",
    "end": "822600"
  },
  {
    "text": "we have here we have to refactor this method called refresh um now what we're",
    "start": "822600",
    "end": "828760"
  },
  {
    "text": "looking at is this is the Constructor of my class and I'm calling this refresh method which is what triggers when the",
    "start": "828760",
    "end": "835199"
  },
  {
    "text": "user does uh pull to refresh on my app so this is what's going to go go out to The Hacker News API it's going to get",
    "start": "835199",
    "end": "840720"
  },
  {
    "text": "the top stories and I put this in my Constructor because it's kind of a bad",
    "start": "840720",
    "end": "845959"
  },
  {
    "text": "experience if a user launches my app and then they have to manually pull to refresh like if you're just greeted with",
    "start": "845959",
    "end": "851199"
  },
  {
    "text": "a blank screen you're not going to know what to do you're going to think the app's broken so I want that data to be there so I want to call refresh as soon",
    "start": "851199",
    "end": "858000"
  },
  {
    "text": "as this app launches but here in the Constructor you know we can't use async",
    "start": "858000",
    "end": "863920"
  },
  {
    "text": "A8 and this is actually a good thing we because Constructors aren't made for",
    "start": "863920",
    "end": "869199"
  },
  {
    "text": "async A8 Constructors are literally just to initialize a class as it gets",
    "start": "869199",
    "end": "875320"
  },
  {
    "text": "assigned into memory we're just supposed to set some variables set some properties uh we're not supposed to do",
    "start": "875320",
    "end": "881160"
  },
  {
    "text": "any long running tasks in the Constructor we're literally just creating an object so that c can put",
    "start": "881160",
    "end": "886440"
  },
  {
    "text": "that object in memory for us so we'll never be able to use asyn weight in the Constructor so okay uh what do we do",
    "start": "886440",
    "end": "893279"
  },
  {
    "text": "because I just said we need to await every task and now we can't well",
    "start": "893279",
    "end": "899199"
  },
  {
    "text": "there's one cool thing we can do I can create a method here called refresh",
    "start": "899199",
    "end": "904480"
  },
  {
    "text": "where all a wait that method and then here I'll just",
    "start": "904480",
    "end": "912360"
  },
  {
    "text": "call my new method",
    "start": "912360",
    "end": "915800"
  },
  {
    "text": "refresh my computer just froze one second guys I have no idea what's going",
    "start": "919120",
    "end": "926120"
  },
  {
    "text": "on let's see yep now we're back sorry hopefully that didn't mess up",
    "start": "926600",
    "end": "933160"
  },
  {
    "text": "anything back there all right so so now in our Constructor we're calling this",
    "start": "933160",
    "end": "939160"
  },
  {
    "text": "method refresh which is void so I don't get those squiggles anymore and inside",
    "start": "939160",
    "end": "946160"
  },
  {
    "text": "of this refresh method I'm calling our async task method refresh and I'm able",
    "start": "946160",
    "end": "952120"
  },
  {
    "text": "to await it now this is good code it might not feel",
    "start": "952120",
    "end": "958240"
  },
  {
    "text": "like good code because it's async void right and what are we told as C developers never use async void async",
    "start": "958240",
    "end": "965519"
  },
  {
    "text": "void's only meant for uh vent handlers we should never write an async void method uh well it turns out this is",
    "start": "965519",
    "end": "971519"
  },
  {
    "text": "actually a valid use case for async void but my problem with that advice when",
    "start": "971519",
    "end": "976759"
  },
  {
    "text": "people say don't ever use it ever use async void is nobody ever tells you why you shouldn't use asyn FOID so let's",
    "start": "976759",
    "end": "984000"
  },
  {
    "text": "let's look at why real quick so one one thing that uh bad thing about async void",
    "start": "984000",
    "end": "990759"
  },
  {
    "text": "is if we scroll down a little bit we'll see this method here you know it gets the top stories it clears the collection",
    "start": "990759",
    "end": "996880"
  },
  {
    "text": "and then it inserts all the new stories into that collection so what if I did",
    "start": "996880",
    "end": "1001959"
  },
  {
    "text": "something like this where I start adding stories to the collection up here",
    "start": "1001959",
    "end": "1007360"
  },
  {
    "text": "and this is not good because what's what's going to happen is again let's",
    "start": "1007360",
    "end": "1012639"
  },
  {
    "text": "say thread one kicks off this method refresh so thread one comes into here thread one hits this awake key word and",
    "start": "1012639",
    "end": "1019440"
  },
  {
    "text": "as we just learned it's going to return so thread one's going to exit the method and it's going to continue on so now",
    "start": "1019440",
    "end": "1024918"
  },
  {
    "text": "thread one's running this line of code meanwhile a background thread let's say thread two is running our async task",
    "start": "1024919",
    "end": "1032000"
  },
  {
    "text": "refresh method and now both of these both of these threads are interacting",
    "start": "1032000",
    "end": "1037199"
  },
  {
    "text": "with the top Story collection so what's going to happen is we just created a race condition where sometimes thread",
    "start": "1037199",
    "end": "1043438"
  },
  {
    "text": "one's going to win and it's going to be able to add this top story before it gets cleared down here by thread 2 but",
    "start": "1043439",
    "end": "1049760"
  },
  {
    "text": "sometimes thread 2 is going to win maybe you have a really fast internet connection and all those top stories are cashed and it just comes back right away",
    "start": "1049760",
    "end": "1056160"
  },
  {
    "text": "so so this is one of the dangers with async void because if if I didn't see",
    "start": "1056160",
    "end": "1062080"
  },
  {
    "text": "this method right here you know it's this one's apparent it's in my face I call it here it's written two lines of",
    "start": "1062080",
    "end": "1069559"
  },
  {
    "text": "code or few lines of code down below um but what if it wasn't right like what if",
    "start": "1069559",
    "end": "1074720"
  },
  {
    "text": "this method was written by another developer on my team it lives in a different class so I don't see right",
    "start": "1074720",
    "end": "1080919"
  },
  {
    "text": "away that this is async void so I'm just writing my code you know as a good C developer and I'm just using",
    "start": "1080919",
    "end": "1086360"
  },
  {
    "text": "intellisense to feel my way around this code base and I see that refresh returns",
    "start": "1086360",
    "end": "1091760"
  },
  {
    "text": "void and as a c developer it's a totally valid assumption that we can assume",
    "start": "1091760",
    "end": "1099760"
  },
  {
    "text": "because this method returns void that this method will finish running before this next line of code runs but in",
    "start": "1099760",
    "end": "1107320"
  },
  {
    "text": "reality refresh is still running out a background task so we've basically just",
    "start": "1107320",
    "end": "1113039"
  },
  {
    "text": "inserted the future bomb to everybody else on our team by running an async void method so that's one of the big",
    "start": "1113039",
    "end": "1118840"
  },
  {
    "text": "dangers is they might not know it's async void they might not understand that we've just created a race condition",
    "start": "1118840",
    "end": "1124799"
  },
  {
    "text": "so so why else is why else is this bad well let's say this method throws an",
    "start": "1124799",
    "end": "1130880"
  },
  {
    "text": "exception so so now we know every time this method",
    "start": "1130880",
    "end": "1136039"
  },
  {
    "text": "runs it's going to throw an exception and and you might think okay no big deal right I'll just do a little try catch",
    "start": "1136039",
    "end": "1142840"
  },
  {
    "text": "block here I'll catch every single exception that pops up and I'll put the refresh method",
    "start": "1142840",
    "end": "1150080"
  },
  {
    "text": "inside of that problem solved right well not really because again remember when",
    "start": "1150080",
    "end": "1156520"
  },
  {
    "text": "thread one calls this Constructor then thread one goes into refresh and thread",
    "start": "1156520",
    "end": "1161840"
  },
  {
    "text": "one keeps running this code until it hits the awake keyword well thread one returns so thread one continues on and",
    "start": "1161840",
    "end": "1168559"
  },
  {
    "text": "thread one's now down here and it's exited the tri catch block meanwhile",
    "start": "1168559",
    "end": "1174039"
  },
  {
    "text": "that background thread thread two is still running this code so this exception here is about to be thrown and",
    "start": "1174039",
    "end": "1181640"
  },
  {
    "text": "we've already exited the tri catch block so another reason why async void is bad or why it's dangerous is it's almost",
    "start": "1181640",
    "end": "1189080"
  },
  {
    "text": "impossible to catch an exception so okay now now what can we do right because",
    "start": "1189080",
    "end": "1194799"
  },
  {
    "text": "this is this is bad code we don't want to do this we don't want to uh you know set these landmines for future",
    "start": "1194799",
    "end": "1201200"
  },
  {
    "text": "developers on our team well what we can do let's bring this",
    "start": "1201200",
    "end": "1207280"
  },
  {
    "text": "code up and let's blow away async void because I don't like it either even though it is valid um so what I've done",
    "start": "1207280",
    "end": "1214880"
  },
  {
    "text": "for you is I've actually written a library called safe fire and forget uh",
    "start": "1214880",
    "end": "1220080"
  },
  {
    "text": "this so this is an extension method that you can add on to the end of any task and what it does is basically what we",
    "start": "1220080",
    "end": "1227200"
  },
  {
    "text": "just talked about so if I go to the code here because this is actually the code",
    "start": "1227200",
    "end": "1234520"
  },
  {
    "text": "for that Library this is just the sample app that lives in it and we scroll all the way down here to see how it handles",
    "start": "1234520",
    "end": "1241120"
  },
  {
    "text": "safe fire and forget you can see what I'm doing for you is I'm wrapping your",
    "start": "1241120",
    "end": "1247440"
  },
  {
    "text": "task in a TR catch block I'm still calling a wait but this is async void so",
    "start": "1247440",
    "end": "1254760"
  },
  {
    "text": "it's fired forget meaning as soon as let's say Say thread one sees that away keyword it's going to exit it's going to",
    "start": "1254760",
    "end": "1261799"
  },
  {
    "text": "continue on your task is still going to run in the background thread so no worries there um but if your task does",
    "start": "1261799",
    "end": "1268640"
  },
  {
    "text": "throw an exception I also give you the opportunity to handle it so what we can",
    "start": "1268640",
    "end": "1274320"
  },
  {
    "text": "do is we can put a little function in here and say maybe say trace. right line",
    "start": "1274320",
    "end": "1280679"
  },
  {
    "text": "and pass in our exception there's probably a better way to do it but I can tell it",
    "start": "1280679",
    "end": "1288559"
  },
  {
    "text": "safe fire and forget means I'm going to run this in the background and I'm just going to move on so I know that this",
    "start": "1288559",
    "end": "1295919"
  },
  {
    "text": "code will execute right away we're not going to await this and I know it's safe because",
    "start": "1295919",
    "end": "1303080"
  },
  {
    "text": "we're still awaiting that task so we're still able to get that exception if the exception is thrown so uh so highly",
    "start": "1303080",
    "end": "1310559"
  },
  {
    "text": "recommend this like I said all this codes open source so this is this is that website if you haven't pulled it up on your phone yet already uh and you can",
    "start": "1310559",
    "end": "1317520"
  },
  {
    "text": "head to the n get package here called asyn weight best practices uh I've been",
    "start": "1317520",
    "end": "1322720"
  },
  {
    "text": "uh publishing this for a while we've got over a million download so I think other people like it too or because this is",
    "start": "1322720",
    "end": "1329559"
  },
  {
    "text": "all open source you're totally welcome just to copy and paste the code if you don't want to add another dependency to your library but the thing I really",
    "start": "1329559",
    "end": "1336000"
  },
  {
    "text": "really like about sayy and forget is it it's forcing us to be very explicit so",
    "start": "1336000",
    "end": "1341679"
  },
  {
    "text": "if another developer comes along they're going to see safe fire and forget they might not recognize that right away but",
    "start": "1341679",
    "end": "1348080"
  },
  {
    "text": "but once they understand this is us saying we're fire and forgetting we're we're going to tell this task to go off",
    "start": "1348080",
    "end": "1353960"
  },
  {
    "text": "and run and the next line of code's going to run right away it's very much inyour face it's very obvious that what",
    "start": "1353960",
    "end": "1360799"
  },
  {
    "text": "our attentions are okay so first refactor",
    "start": "1360799",
    "end": "1365919"
  },
  {
    "text": "done now scrolling down here we're inside this refresh method again this is what triggers anytime the user does a",
    "start": "1365919",
    "end": "1372320"
  },
  {
    "text": "pull to refresh on the app and the first refactor I have here is for this very",
    "start": "1372320",
    "end": "1377960"
  },
  {
    "text": "iable so what I'm doing here is I'm creating a task as a variable where",
    "start": "1377960",
    "end": "1384600"
  },
  {
    "text": "basically I'm kicking off task. delay and I'm saying wait two seconds and this",
    "start": "1384600",
    "end": "1389919"
  },
  {
    "text": "variable name is called minimum refresh time task uh because I want every time",
    "start": "1389919",
    "end": "1395720"
  },
  {
    "text": "you do a pull to refresh on my app I want you to see that spinning indicator for at least two seconds no matter what",
    "start": "1395720",
    "end": "1401760"
  },
  {
    "text": "even if you have the fastest internet connection in the world I want to make sure you see that animation and so later",
    "start": "1401760",
    "end": "1407600"
  },
  {
    "text": "on this method you'll see we wait for this task to finish before we end the animation and this might feel a little",
    "start": "1407600",
    "end": "1414600"
  },
  {
    "text": "weird or seem a little strange but it's actually really common um I know in the in the mobile World probably in the web",
    "start": "1414600",
    "end": "1420840"
  },
  {
    "text": "world too because we want our users to have a consistent experience you know if they pull a refresh and they get all the",
    "start": "1420840",
    "end": "1427080"
  },
  {
    "text": "data and then let's say all that data gets cached so the next pull to refresh takes half a second half a second might",
    "start": "1427080",
    "end": "1433799"
  },
  {
    "text": "not even be enough time for the animation to happen so they might assume that the app didn't trigger the pull to",
    "start": "1433799",
    "end": "1439520"
  },
  {
    "text": "refresh and so they'll just keep pulling to refresh and next thing you know we're blowing up The Hacker News API because",
    "start": "1439520",
    "end": "1444840"
  },
  {
    "text": "they don't realize that they actually have the latest data so so I want the app to take at least two seconds every",
    "start": "1444840",
    "end": "1450120"
  },
  {
    "text": "time to show the little animation and the reason I want to refactor this is because we have a cancellation token",
    "start": "1450120",
    "end": "1457200"
  },
  {
    "text": "here now as good C developers anytime we kick off a task we should always pass in",
    "start": "1457200",
    "end": "1464440"
  },
  {
    "text": "a cancellation token but sometimes we have use libraries that we don't own so",
    "start": "1464440",
    "end": "1469760"
  },
  {
    "text": "I can't always go and change a method to add a new parameter because maybe I'm using somebody else's nit package right",
    "start": "1469760",
    "end": "1476640"
  },
  {
    "text": "so there's a cool thing we can do and it's called weight",
    "start": "1476640",
    "end": "1482360"
  },
  {
    "text": "async and inside of weight async we can pass in that cancellation token and what",
    "start": "1482360",
    "end": "1488799"
  },
  {
    "text": "this extension method basically does is it bolts that cancellation token onto the original task so now if my original",
    "start": "1488799",
    "end": "1496559"
  },
  {
    "text": "cancellation token is cancelled so we'll test. DeLay So it's a way to essentially",
    "start": "1496559",
    "end": "1502520"
  },
  {
    "text": "bolt on a cancellation token if for whatever reason the the async task method you're",
    "start": "1502520",
    "end": "1508919"
  },
  {
    "text": "calling doesn't allow it but you know again we're good C developers so we're",
    "start": "1508919",
    "end": "1514240"
  },
  {
    "text": "always going to have a cancellation token parameter and as as luck has it so",
    "start": "1514240",
    "end": "1520000"
  },
  {
    "text": "is the net team they also allow us to pass in cancellation tokens so we're just going to pass it in here instead of using weight async since it's already",
    "start": "1520000",
    "end": "1526679"
  },
  {
    "text": "baked in for us okay the next refactor we're calling get top stories so what we're doing we're",
    "start": "1526679",
    "end": "1533120"
  },
  {
    "text": "we're getting the top stories from Hacker News then we're going to clear out the previous collection and then we're going to add them into that",
    "start": "1533120",
    "end": "1539279"
  },
  {
    "text": "collection in a sorted order um and this looks pretty good right like we're using",
    "start": "1539279",
    "end": "1544480"
  },
  {
    "text": "we're using the away keyword async task method um so why do we want to refactor",
    "start": "1544480",
    "end": "1550440"
  },
  {
    "text": "this well if we think about what's going on let's say let's say thread one kicks",
    "start": "1550440",
    "end": "1556720"
  },
  {
    "text": "off refresh right so so thread one creates runs this code thread one runs this code thread one comes all the way",
    "start": "1556720",
    "end": "1562320"
  },
  {
    "text": "up to here until it hits the awake keyword and then thread one returns and",
    "start": "1562320",
    "end": "1567520"
  },
  {
    "text": "so get top stories is going to run on a background thread great that's exactly what we want but remember when get top",
    "start": "1567520",
    "end": "1573760"
  },
  {
    "text": "stories is done it's going to pull thread one back in So thread one now has",
    "start": "1573760",
    "end": "1578840"
  },
  {
    "text": "to jump in to clear my clear my top Story collection and run through this for each Loop and again thread one",
    "start": "1578840",
    "end": "1586600"
  },
  {
    "text": "that's our UI thread the only thing that's can interact with the user so if that's doing something else that means",
    "start": "1586600",
    "end": "1593640"
  },
  {
    "text": "it can't handle that button tap it can't refresh the UI and so you know if this four each Loop takes 5 Seconds well",
    "start": "1593640",
    "end": "1601279"
  },
  {
    "text": "thread one is now locked up for 5 seconds our I is Frozen for 5 seconds so what we can do here is we can add in",
    "start": "1601279",
    "end": "1609480"
  },
  {
    "text": "configur we false now this looks a little weird but",
    "start": "1609480",
    "end": "1615039"
  },
  {
    "text": "it's an it's an extension method on every task that tells net to say I don't care what",
    "start": "1615039",
    "end": "1622799"
  },
  {
    "text": "thread I return on so so again with configurate false thread one will run all this code it'll hit the awake",
    "start": "1622799",
    "end": "1629480"
  },
  {
    "text": "keyword thread one go returns it goes back it's now interacting with our user our apps working great everybody's Happy",
    "start": "1629480",
    "end": "1635520"
  },
  {
    "text": "And now when thread two is done running get top stories it doesn't go call back",
    "start": "1635520",
    "end": "1640720"
  },
  {
    "text": "to thread one it just goes to the thread pool and says hey any available tasks",
    "start": "1640720",
    "end": "1646279"
  },
  {
    "text": "anybody and it just grabs whatever task is or whatever thread is available to continue and running on our code so",
    "start": "1646279",
    "end": "1653440"
  },
  {
    "text": "highly recommend configure weight false uh for a couple reasons one we've now",
    "start": "1653440",
    "end": "1658559"
  },
  {
    "text": "ensured we're not going back to thread one so you know what if what if this was",
    "start": "1658559",
    "end": "1663679"
  },
  {
    "text": "a game right like what if what if this was a a game that had to run at 60",
    "start": "1663679",
    "end": "1668919"
  },
  {
    "text": "frames a second 120 frames a second so thread one's going to be really busy drawing the UI and if we didn't have",
    "start": "1668919",
    "end": "1675919"
  },
  {
    "text": "configur weight false and by the way there is configure weight true but that's just the default so configure",
    "start": "1675919",
    "end": "1681679"
  },
  {
    "text": "weight true is the same as not doing anything um but if we did call back to thread one and thread one's really busy",
    "start": "1681679",
    "end": "1688480"
  },
  {
    "text": "well our code just sitting here it's just paused until thread one is available to jump back in but with",
    "start": "1688480",
    "end": "1695120"
  },
  {
    "text": "configur weight false we can say hey I don't care what thread this continues on threadpool just give me whatever",
    "start": "1695120",
    "end": "1701760"
  },
  {
    "text": "whatever thread is free and I'm happy so uh my rule of thumb again I'm a mobile",
    "start": "1701760",
    "end": "1707519"
  },
  {
    "text": "developer and we use the mvvm architecture a lot so my realle thumb is in my view models in my Surface layer",
    "start": "1707519",
    "end": "1714200"
  },
  {
    "text": "any parts of my code that never touch the UI I configure away fals everything",
    "start": "1714200",
    "end": "1720000"
  },
  {
    "text": "uh if I am in my UI layer so maybe I'm handling a button tap and I need to redraw something on the page um then",
    "start": "1720000",
    "end": "1726919"
  },
  {
    "text": "obviously don't use configurate false because you want to return to the UI thread to uh update the UI but",
    "start": "1726919",
    "end": "1732960"
  },
  {
    "text": "configurate false I add it everywhere where I'm not interacting with the UI",
    "start": "1732960",
    "end": "1738919"
  },
  {
    "text": "all right another refactor done so let's keep going down here and here it is so",
    "start": "1738919",
    "end": "1744559"
  },
  {
    "text": "now we see this is that task we created earlier so we have our minimum refresh time task and let's bump this up a",
    "start": "1744559",
    "end": "1750760"
  },
  {
    "text": "little bit um and I'm calling dot weight and this is bad um I I have a rule of",
    "start": "1750760",
    "end": "1757080"
  },
  {
    "text": "thumb with DOT weight and that's never never never never use dweight dweight is",
    "start": "1757080",
    "end": "1764039"
  },
  {
    "text": "really really bad um the reason it's really bad is when this code gets called so now we",
    "start": "1764039",
    "end": "1772840"
  },
  {
    "text": "know we're we're not on thread one anymore we know we're on a background thread thanks to configurate false so let's say thread five is running this",
    "start": "1772840",
    "end": "1779159"
  },
  {
    "text": "code now it's whatever random thread that the thread pool gave us um so let's say thread five hits this code and it",
    "start": "1779159",
    "end": "1785760"
  },
  {
    "text": "hits weight well what weight does it doesn't release the calling threat so",
    "start": "1785760",
    "end": "1791840"
  },
  {
    "text": "weight says uhuh thread five you stay right here you're not able to return you stay here I'm still going to run this on",
    "start": "1791840",
    "end": "1797480"
  },
  {
    "text": "a background task so that uh minimum refresh time task is still running on a",
    "start": "1797480",
    "end": "1803360"
  },
  {
    "text": "different thread but meanwhile we've locked up thread five so now without",
    "start": "1803360",
    "end": "1809120"
  },
  {
    "text": "weight we're locking up two threads when we only really should be using one now",
    "start": "1809120",
    "end": "1816240"
  },
  {
    "text": "that can be really really bad if we didn't put in configur weight false here like if if we were still returning to",
    "start": "1816240",
    "end": "1822000"
  },
  {
    "text": "the calling thread if thread one was down here well now we've just Frozen our app so really really bad stuff and you",
    "start": "1822000",
    "end": "1829760"
  },
  {
    "text": "know even if even if you don't make apps that have UI like maybe you're sitting there Going H well I uh I only make apis",
    "start": "1829760",
    "end": "1836919"
  },
  {
    "text": "for the back end I don't have to worry about this stuff it matters for you too because every time we call thread weight",
    "start": "1836919",
    "end": "1842919"
  },
  {
    "text": "or dot every time you call Dot weight you're using two tasks when you only should be using one and eventually your",
    "start": "1842919",
    "end": "1849480"
  },
  {
    "text": "server is going to hit what's called threadpool exhaustion because there's a limited amount of threads in that thread pool which again the beefer beefier your",
    "start": "1849480",
    "end": "1856880"
  },
  {
    "text": "server the more threads you'll have access to um but again with weight you're going to use two threads every",
    "start": "1856880",
    "end": "1862159"
  },
  {
    "text": "time you only need to be using one and eventually you're going to run out of it and that's called threadpool exhaustion",
    "start": "1862159",
    "end": "1867559"
  },
  {
    "text": "so so what we should be doing down here is just awaiting it easy um but the reason I added this",
    "start": "1867559",
    "end": "1876639"
  },
  {
    "text": "in here is it's it's rare nowadays but there might still be times where you",
    "start": "1876639",
    "end": "1883600"
  },
  {
    "text": "can't call async A8 I see it in Old interfaces like I've had old interfaces",
    "start": "1883600",
    "end": "1889080"
  },
  {
    "text": "that return a Bo not a task of type buol that just return a Bool and I have to implement this method because it's part",
    "start": "1889080",
    "end": "1895080"
  },
  {
    "text": "of the interface but that doesn't let me use async a weight so in those rare cases what do we do because you know",
    "start": "1895080",
    "end": "1902600"
  },
  {
    "text": "Brandon just told you to never use weight well there's a better way we can",
    "start": "1902600",
    "end": "1909360"
  },
  {
    "text": "call get a waiter get resol now get waiter get",
    "start": "1909360",
    "end": "1915399"
  },
  {
    "text": "resol is still bad because it's still still blocking it does the same behavior as weight so if thread five is calling",
    "start": "1915399",
    "end": "1923480"
  },
  {
    "text": "this code down here thread five is still going to be blocked it's still going to be locked get waiter get res doesn't",
    "start": "1923480",
    "end": "1929519"
  },
  {
    "text": "release that thread it's still going to run uh minimum refresh time task on a background thread so we're still using",
    "start": "1929519",
    "end": "1935799"
  },
  {
    "text": "two threads and we should only be using one but the benefit of geta waiter get result is if our code throws an",
    "start": "1935799",
    "end": "1942320"
  },
  {
    "text": "exception get a waer g result throws our exception um the one good side of weight",
    "start": "1942320",
    "end": "1950159"
  },
  {
    "text": "is it also rethrows the exception just like uh the await keyword does but",
    "start": "1950159",
    "end": "1955600"
  },
  {
    "text": "weight and result they both throw what's called a system. aggregate exception",
    "start": "1955600",
    "end": "1960639"
  },
  {
    "text": "which if you've never seen those it's an aggregate exception is an exception that holds multiple exceptions so in my",
    "start": "1960639",
    "end": "1969440"
  },
  {
    "text": "experience get a waiter get results way better because it'll actually throw my exception with my code in it whereas",
    "start": "1969440",
    "end": "1975519"
  },
  {
    "text": "with the aggregate exception that's just another step for me when I'm debugging code trying to figure out what's wrong",
    "start": "1975519",
    "end": "1980720"
  },
  {
    "text": "looking at stack traces because I have to dig into the system. agregate exception with do weight but with geta",
    "start": "1980720",
    "end": "1987360"
  },
  {
    "text": "we or get result it'll throw our code with our exception so it's a little better than do weight but again if you",
    "start": "1987360",
    "end": "1994919"
  },
  {
    "text": "can if you can avoid it avoid it and instead use the aw",
    "start": "1994919",
    "end": "2000799"
  },
  {
    "text": "keyword okay so next thing to refactor we've got a method called get top stories uh turns a task of type Frozen",
    "start": "2000799",
    "end": "2009120"
  },
  {
    "text": "set and this is actually pretty cool Frozen set is something brand new in net 8 this actually has nothing to do with",
    "start": "2009120",
    "end": "2015799"
  },
  {
    "text": "async A8 but I'm really excited about it so I want to share it with you here um a frozen set you can think of it like a",
    "start": "2015799",
    "end": "2022360"
  },
  {
    "text": "list that can never change uh maybe you're familiar with uh immutable",
    "start": "2022360",
    "end": "2028559"
  },
  {
    "text": "collections like there's already a thing called immutable list and a mutable array and there's I read only list and",
    "start": "2028559",
    "end": "2034600"
  },
  {
    "text": "so it's like these things already exist in net why is the net team adding this in in net 8 um with this they've created",
    "start": "2034600",
    "end": "2042120"
  },
  {
    "text": "this new namespace called system. collections. Frozen so there's also a frozen dictionary you can use well the",
    "start": "2042120",
    "end": "2048560"
  },
  {
    "text": "reason this is being added in is because yes you might have an immutable list or",
    "start": "2048560",
    "end": "2053599"
  },
  {
    "text": "you might be using a type of IAD only list but it's not really true because",
    "start": "2053599",
    "end": "2059440"
  },
  {
    "text": "you know C we've got reference types and anybody can always kind of come in and swap out a reference to an object in",
    "start": "2059440",
    "end": "2065919"
  },
  {
    "text": "your list and all of a sudden your list is different now so with Frozen set your",
    "start": "2065919",
    "end": "2071398"
  },
  {
    "text": "list will never change so I'm really excited for this because the way I like to write my code is anytime I get",
    "start": "2071399",
    "end": "2077240"
  },
  {
    "text": "results back from an API or pull anything out of a database I like to keep that immutable I don't ever want",
    "start": "2077240",
    "end": "2083960"
  },
  {
    "text": "that to change in case I need to reference it later so what I love about Frozen set is it'll never change there's",
    "start": "2083960",
    "end": "2091000"
  },
  {
    "text": "no way for another developer on my team to accidentally swap something out in the list and huge performance benefit",
    "start": "2091000",
    "end": "2097839"
  },
  {
    "text": "because now net knows there's never ever going to be anything right writing to this set it's actually not a list",
    "start": "2097839",
    "end": "2104760"
  },
  {
    "text": "because it's not indexed but there's never ever going to be anything written we're only going to create it once so it can do a bunch of uh performance",
    "start": "2104760",
    "end": "2110960"
  },
  {
    "text": "optimization so your reads are going to be super fast on Frozen set so like I said nothing to do with asyn weight just",
    "start": "2110960",
    "end": "2116480"
  },
  {
    "text": "highly recommend it I'm a big fan of Frozen uh the new Frozen collections name space and like I said there's also",
    "start": "2116480",
    "end": "2122359"
  },
  {
    "text": "a frozen dictionary too which also highly recommend so",
    "start": "2122359",
    "end": "2127520"
  },
  {
    "text": "we're looking at this code here right we we're supposed to refactor this method but you know I'm seeing we're using async of weight we're calling configur",
    "start": "2127520",
    "end": "2133640"
  },
  {
    "text": "weight false and this looks pretty good I mean you know it it does kind of suck that we have to call configure weight",
    "start": "2133640",
    "end": "2139720"
  },
  {
    "text": "false every time um but that's kind of is what it is you know I worked at",
    "start": "2139720",
    "end": "2145480"
  },
  {
    "text": "Microsoft for about seven years and worked closely with a net team and I would always poke him I was like Hey",
    "start": "2145480",
    "end": "2150640"
  },
  {
    "text": "guys give me give me a flag give me a global flag that I can say configurate",
    "start": "2150640",
    "end": "2155760"
  },
  {
    "text": "false is the default cuz I'm tired of writing it so much but they haven't done it yet maybe someday we'll get that uh",
    "start": "2155760",
    "end": "2160960"
  },
  {
    "text": "it doesn't exist today it doesn't exist in upcoming version of net 8 so for now we just got to call configure weight",
    "start": "2160960",
    "end": "2166440"
  },
  {
    "text": "false every time uh but that's okay and so this looks pretty good but one thing",
    "start": "2166440",
    "end": "2171960"
  },
  {
    "text": "we can do better is we could turn this into an IAS sync innumerable now we",
    "start": "2171960",
    "end": "2179280"
  },
  {
    "text": "don't have a ton of time today so I'm going to cheat a little bit and I'm going to go over to my good async O8 practices class and show you what this",
    "start": "2179280",
    "end": "2185280"
  },
  {
    "text": "looks like um so if you haven't heard of IAS sync inumerable IAS sync inumerable",
    "start": "2185280",
    "end": "2191240"
  },
  {
    "text": "is what allows us to call a wait for each so maybe",
    "start": "2191240",
    "end": "2196800"
  },
  {
    "text": "you've used a wait for each in your code uh if you haven't what it's doing is",
    "start": "2196800",
    "end": "2202040"
  },
  {
    "text": "it's awaiting this task um but this task is innumerable meaning you can enumerate",
    "start": "2202040",
    "end": "2209079"
  },
  {
    "text": "through it you can move to the next one so what happens is we call a weight and",
    "start": "2209079",
    "end": "2215760"
  },
  {
    "text": "again we still want to call configure weight false we always want to pass in our cancellation token because again",
    "start": "2215760",
    "end": "2221200"
  },
  {
    "text": "we're good C developers um but basically it's just a for each Loop that every time there's a new value provided back",
    "start": "2221200",
    "end": "2228680"
  },
  {
    "text": "in this async method it'll run this code so what's really cool about this and",
    "start": "2228680",
    "end": "2234200"
  },
  {
    "text": "here I'll jump back to the bad one um to show you for reference you know this bad one is I don't like it because we have",
    "start": "2234200",
    "end": "2241720"
  },
  {
    "text": "to first get the top story IDs The Hacker News API kind of sucks because I",
    "start": "2241720",
    "end": "2247839"
  },
  {
    "text": "can't just say give me the top stories instead I have to call the first API and say give me the IDS of all the top",
    "start": "2247839",
    "end": "2254640"
  },
  {
    "text": "stories and then once I have the ID numbers I have to make subsequent calls for every single story to say hey for",
    "start": "2254640",
    "end": "2261280"
  },
  {
    "text": "this ID give me the story so I don't know who came up with that idea who wrote that API I hate it but that's what",
    "start": "2261280",
    "end": "2268319"
  },
  {
    "text": "this code is doing right it's doing everything in serial so one at a time it's a waiting getting the next story",
    "start": "2268319",
    "end": "2274079"
  },
  {
    "text": "and this is really slow because what if I have 50 top stories what if I have a 100 top stories well now I'm going to",
    "start": "2274079",
    "end": "2280640"
  },
  {
    "text": "have 100 API calls one after each other that sucks so with isync inumerable if",
    "start": "2280640",
    "end": "2286960"
  },
  {
    "text": "we jump into here what I'm doing is I'm creating a list of tasks and what I'm",
    "start": "2286960",
    "end": "2294920"
  },
  {
    "text": "doing is saying for every story that I have an ID for kick off this task so this task the",
    "start": "2294920",
    "end": "2302880"
  },
  {
    "text": "API hackernews API service. gstory will start running so now I have 50 API calls all running",
    "start": "2302880",
    "end": "2310400"
  },
  {
    "text": "in parallel and then the way I handle this is I just have a while loop so in",
    "start": "2310400",
    "end": "2316640"
  },
  {
    "text": "my while loop I have I just say do I still have any tasks left and I also",
    "start": "2316640",
    "end": "2322240"
  },
  {
    "text": "give the user the ability to limit it so maybe they only want 10 stories um they can do that so as long as we haven't hit",
    "start": "2322240",
    "end": "2328160"
  },
  {
    "text": "their limit and as long as we still have tasks left uh we can use what's called",
    "start": "2328160",
    "end": "2333839"
  },
  {
    "text": "task. when any so task pass. win any we pass in a list and anytime well",
    "start": "2333839",
    "end": "2341359"
  },
  {
    "text": "specifically a list of tasks and anytime a task in that list has completed it'll give it to us so when I",
    "start": "2341359",
    "end": "2348599"
  },
  {
    "text": "say await task. when any the first API call to return and complete it gives me",
    "start": "2348599",
    "end": "2353800"
  },
  {
    "text": "that task of type story Model so what I do is because it's done now I can remove it from my list and then I grab the",
    "start": "2353800",
    "end": "2361760"
  },
  {
    "text": "story out of it and we call yield return to return that story with which again",
    "start": "2361760",
    "end": "2367880"
  },
  {
    "text": "triggers our for each Loop so then this code runs it's added to the list and our user is able to see these stories",
    "start": "2367880",
    "end": "2374680"
  },
  {
    "text": "rolling in in real time and it's way faster because we're making all those API calls at the same time instead of",
    "start": "2374680",
    "end": "2380319"
  },
  {
    "text": "waiting for them one at a time to come back um if you've never heard of yield",
    "start": "2380319",
    "end": "2385520"
  },
  {
    "text": "return um this doesn't actually exit the method it's it's an ie numerable thing",
    "start": "2385520",
    "end": "2391160"
  },
  {
    "text": "where it can return partial results back so that's how it's getting those partial results back to our a wait for each Loop",
    "start": "2391160",
    "end": "2398839"
  },
  {
    "text": "um one other cool thing with isync enumerable because again good C developers always allow us to pass into",
    "start": "2398839",
    "end": "2404240"
  },
  {
    "text": "cancellation tokens so we've got that here but iyn enumerable has this cool thing built in called this enumerator",
    "start": "2404240",
    "end": "2410880"
  },
  {
    "text": "cancellation where if I just apply this attribute to let net know that yes this",
    "start": "2410880",
    "end": "2416920"
  },
  {
    "text": "is the token that I want to cancel this method then in my code I never have to",
    "start": "2416920",
    "end": "2424560"
  },
  {
    "text": "write anything like this never have to check that cancellation token I never have to see if it's been cancelled I",
    "start": "2424560",
    "end": "2430280"
  },
  {
    "text": "never have to worry about throwing it because as soon as this cancellation token is cancelled because I've given it",
    "start": "2430280",
    "end": "2436319"
  },
  {
    "text": "this enumerator cancellation attribute net knows okay break this method we got",
    "start": "2436319",
    "end": "2441599"
  },
  {
    "text": "to move on we're done so really really cool highly recommend I think innumerable you know the um the Json do",
    "start": "2441599",
    "end": "2449520"
  },
  {
    "text": "the net Json team system. text. Json there we go the system. tex. Json team",
    "start": "2449520",
    "end": "2454960"
  },
  {
    "text": "uh they've added in a bunch of features to support isnc innumerable so a lot of it's baked into HTTP client for us too",
    "start": "2454960",
    "end": "2461319"
  },
  {
    "text": "so all of this is really really cool you can even use it in your apis that you build in asp.net",
    "start": "2461319",
    "end": "2466640"
  },
  {
    "text": "core okay so we'll pretend like we refactored that even though even though we didn't but we looked at it we talked",
    "start": "2466640",
    "end": "2472440"
  },
  {
    "text": "about it that still counts okay the next thing to refactor um I have this method called get story",
    "start": "2472440",
    "end": "2478440"
  },
  {
    "text": "and all it's doing is calling my Hacker News API service and calling that g story API and if we look at this the git",
    "start": "2478440",
    "end": "2487359"
  },
  {
    "text": "story method returns a type of task story Model and my git story method also",
    "start": "2487359",
    "end": "2494480"
  },
  {
    "text": "returns a task of type story Model so there's something really cool we can do here we can actually get rid of the",
    "start": "2494480",
    "end": "2500560"
  },
  {
    "text": "async keyword and we can get rid of the awake keyword and we can just return",
    "start": "2500560",
    "end": "2505599"
  },
  {
    "text": "that task now this probably feels a little weird because we're not awaiting",
    "start": "2505599",
    "end": "2511160"
  },
  {
    "text": "it um but this is really cool because we just got a little performance benefit because if I go back and put that code",
    "start": "2511160",
    "end": "2517480"
  },
  {
    "text": "back in and we think about what's going on here if we say thread one calls this method well thread one comes in here",
    "start": "2517480",
    "end": "2524359"
  },
  {
    "text": "immediately hits the await keyword and returns this code runs we get the top",
    "start": "2524359",
    "end": "2529520"
  },
  {
    "text": "story and then I mean if we had configurate false it'd be a little bit better here but without configur weight",
    "start": "2529520",
    "end": "2535720"
  },
  {
    "text": "false now it's going to call thread one back in here and thread one's just coming in here to return the value so we",
    "start": "2535720",
    "end": "2543960"
  },
  {
    "text": "just switched threads twice which is not cheap I mean it's it's relatively fast",
    "start": "2543960",
    "end": "2549960"
  },
  {
    "text": "you know we're talking Nan but we don't need to do that because we can just",
    "start": "2549960",
    "end": "2555000"
  },
  {
    "text": "return the task and then we avoid an additional unnecessary thread switch so",
    "start": "2555000",
    "end": "2561440"
  },
  {
    "text": "we can get a little performance boost by doing this so one of my rules of thumb is if you have a method where the only",
    "start": "2561440",
    "end": "2568640"
  },
  {
    "text": "place you use the await keyword is in the return statement instead of saying return a wait just return that task",
    "start": "2568640",
    "end": "2578160"
  },
  {
    "text": "check okay last thing to refactor here we've got another method called get top",
    "start": "2579119",
    "end": "2584599"
  },
  {
    "text": "story IDs and you know I I just said it I just said anytime we have a method",
    "start": "2584599",
    "end": "2590760"
  },
  {
    "text": "where we only use the awake keyword in the return statement we should return the task so is that should be what we're doing",
    "start": "2590760",
    "end": "2597920"
  },
  {
    "text": "here right you now we can return the task and we've got another return statement up here but that's okay because we can say task. from result and",
    "start": "2597920",
    "end": "2604920"
  },
  {
    "text": "we can pass in there we go so all this looks fine this is going to compile but this is actually",
    "start": "2604920",
    "end": "2612480"
  },
  {
    "text": "a trick question this is this is one of the exceptions to that to that rule that I just introduced you to because in this",
    "start": "2612480",
    "end": "2619720"
  },
  {
    "text": "case we're inside of a tri catch block and so if we if we think about what's happening in this code uh let's say",
    "start": "2619720",
    "end": "2626760"
  },
  {
    "text": "again thread one calls this method it comes into here if statements false so we get to here and we go to get the top",
    "start": "2626760",
    "end": "2633559"
  },
  {
    "text": "story IDs but thread one just return so we just hit this return statement so we've exited this method we're no longer",
    "start": "2633559",
    "end": "2640720"
  },
  {
    "text": "inside of get top story IDs anymore which means we're also no longer inside of this Tri catch block so caveat to the",
    "start": "2640720",
    "end": "2648599"
  },
  {
    "text": "rule that I just shared with you is if you do have a return await inside of a",
    "start": "2648599",
    "end": "2655119"
  },
  {
    "text": "tri catch block keep it and again that's that's from a lot of experience where I've made that mistake one too many",
    "start": "2655119",
    "end": "2661520"
  },
  {
    "text": "times um another another place where we want to keep that is if we have a using",
    "start": "2661520",
    "end": "2667240"
  },
  {
    "text": "block so think about I disposable right we can say using blah blah blah we've got our brackets and at the end of that",
    "start": "2667240",
    "end": "2674079"
  },
  {
    "text": "using block that object's going to be disposed and I've also added bugs to my",
    "start": "2674079",
    "end": "2680240"
  },
  {
    "text": "app where I didn't return a wait because I said I don't need it I want to save the thread switch and again what",
    "start": "2680240",
    "end": "2686720"
  },
  {
    "text": "happened was we returned we left the meth method which means we left the using block which means that object that",
    "start": "2686720",
    "end": "2693119"
  },
  {
    "text": "I needed just got disposed and weird errors happened so if you're inside of a TR catch block or if you're inside of a",
    "start": "2693119",
    "end": "2698800"
  },
  {
    "text": "using block keep return a weight uh if you're not you don't need it now what",
    "start": "2698800",
    "end": "2706319"
  },
  {
    "text": "can we do here you know I mean I see right away we don't have configurate false shame on me so let's put that in",
    "start": "2706319",
    "end": "2712119"
  },
  {
    "text": "there um but this all looks pretty good",
    "start": "2712119",
    "end": "2718520"
  },
  {
    "text": "however we have this line of code here we have we have a spot in our method",
    "start": "2718520",
    "end": "2723960"
  },
  {
    "text": "where we don't use the awake keyword so what I've done here is again to",
    "start": "2723960",
    "end": "2729599"
  },
  {
    "text": "prevent from my users from just hammering The Hacker News API I say if you've if you've already gotten the data",
    "start": "2729599",
    "end": "2735680"
  },
  {
    "text": "within the last hour you know the top stories don't change that much you know I don't want somebody sitting there and",
    "start": "2735680",
    "end": "2741280"
  },
  {
    "text": "just calling the API all day um so to try and limit that I say if the data is recent within an hour then just grab the",
    "start": "2741280",
    "end": "2749319"
  },
  {
    "text": "IDS we've already got you know we can refresh the links and we can still do everything but we don't need to make another API call",
    "start": "2749319",
    "end": "2756480"
  },
  {
    "text": "and now we're in an async method where we're not calling the await keyword and",
    "start": "2756480",
    "end": "2762680"
  },
  {
    "text": "if you think about this this is the hot path of our method this path here will",
    "start": "2762680",
    "end": "2769200"
  },
  {
    "text": "be called more than this path so the first time the user launches our app the",
    "start": "2769200",
    "end": "2774760"
  },
  {
    "text": "data is not going to be recent so it's got to go get those top story IDs but then the second time they refresh the",
    "start": "2774760",
    "end": "2781400"
  },
  {
    "text": "app we're going to go down this part of the method and the third time we're g to go down this part of the method so the",
    "start": "2781400",
    "end": "2788559"
  },
  {
    "text": "majority of the time this method gets called we don't use the await keyword",
    "start": "2788559",
    "end": "2793599"
  },
  {
    "text": "there's something cool we can do instead of returning a task we can return a value task now value task is kind of the",
    "start": "2793599",
    "end": "2802720"
  },
  {
    "text": "same thing as a task it's it's not exactly the same and again I've got some documentation on the website for you where if you want to dig down deep into",
    "start": "2802720",
    "end": "2809319"
  },
  {
    "text": "this you can see the exactly all the differences uh but the biggest difference is value task is a value type",
    "start": "2809319",
    "end": "2815400"
  },
  {
    "text": "and if remember in C we've got reference types and we've got value types reference types live in the Heap value",
    "start": "2815400",
    "end": "2822079"
  },
  {
    "text": "types live in the stack and the reason why value task is better in this case because it can't do everything a task",
    "start": "2822079",
    "end": "2829000"
  },
  {
    "text": "can do but if we're just doing a method return totally fine you have nothing to worry about with value task um but",
    "start": "2829000",
    "end": "2835839"
  },
  {
    "text": "because value task ises on the stack it can just pop it right on or push it right onto the top of the stack which",
    "start": "2835839",
    "end": "2842559"
  },
  {
    "text": "that's an O of one that's super fast whereas anytime you have to add something to the Heap it's got to be",
    "start": "2842559",
    "end": "2847920"
  },
  {
    "text": "indexed it's got to have a hash so those are a little bit more expensive and so in this case where we know we don't",
    "start": "2847920",
    "end": "2854160"
  },
  {
    "text": "really need all this extra benefits from the task and especially because the hot path of our code doesn't use the await",
    "start": "2854160",
    "end": "2861319"
  },
  {
    "text": "keyword then we can just return value task and get a little performance boost",
    "start": "2861319",
    "end": "2867240"
  },
  {
    "text": "here and done all right so we fixed the",
    "start": "2868960",
    "end": "2874200"
  },
  {
    "text": "code so I know I threw a lot at you so let's do a quick review um these asyn",
    "start": "2874720",
    "end": "2881800"
  },
  {
    "text": "best practices never used weight never use. result uh nowadays everything should be",
    "start": "2881800",
    "end": "2888720"
  },
  {
    "text": "asynchronous there's very rare cases unless you're working on an old code base or working with an old codebase",
    "start": "2888720",
    "end": "2895359"
  },
  {
    "text": "like I said the only times I see it nowadays is if I've got to implement this interface this interface implements",
    "start": "2895359",
    "end": "2901200"
  },
  {
    "text": "a method that doesn't return task and now I'm stuck so I have to use it but",
    "start": "2901200",
    "end": "2906400"
  },
  {
    "text": "if we can never use do weight never use do result because it locks the calling thread so if that's thread one it's",
    "start": "2906400",
    "end": "2913200"
  },
  {
    "text": "going to keep thread one right here while it still runs another uh background task on a different thread so we're using two threads and our app is",
    "start": "2913200",
    "end": "2921040"
  },
  {
    "text": "frozen well that's happening so really really bad things but if you have to because you're using that old interface",
    "start": "2921040",
    "end": "2928240"
  },
  {
    "text": "then get a waiter get results going to be your friend get a waiter get result returns or throws an exception with your",
    "start": "2928240",
    "end": "2935760"
  },
  {
    "text": "code in it so if the the method throws an exception that we're calling. geta waiter get result on that exception is",
    "start": "2935760",
    "end": "2941720"
  },
  {
    "text": "going to be your code with uh your exception instead of weight and result",
    "start": "2941720",
    "end": "2947000"
  },
  {
    "text": "both throw system. aggregate exceptions and we didn't show this in the code today but get a wait or get result also",
    "start": "2947000",
    "end": "2953359"
  },
  {
    "text": "replaces result it literally has the same behavior for weight and result so",
    "start": "2953359",
    "end": "2959160"
  },
  {
    "text": "don't use it hopefully you can avoid it but in the rare cases where you have to get a wait or get result will give you a",
    "start": "2959160",
    "end": "2965599"
  },
  {
    "text": "easier stack Trace debug in the future uh fire and forget tasks don't don't do",
    "start": "2965599",
    "end": "2970799"
  },
  {
    "text": "what I used to do and call task. run and just say yeah this is running out of background thread I don't care when it finishes so I'm not going to await it",
    "start": "2970799",
    "end": "2977079"
  },
  {
    "text": "because like we saw if our code throws an exception we're never going to be able to handle it it'll never get",
    "start": "2977079",
    "end": "2982200"
  },
  {
    "text": "rethrown it'll never be bubbled back up to me the developer so for fire and forget highly recommend uh grabbing this",
    "start": "2982200",
    "end": "2990040"
  },
  {
    "text": "noug get package async await best practices and using the safe fire and forget extension method but again it's",
    "start": "2990040",
    "end": "2995640"
  },
  {
    "text": "open source so if your company's got weird rules about adding in third party libraries you can just copy paste the code I don't mind you've got my",
    "start": "2995640",
    "end": "3002880"
  },
  {
    "text": "permission avoid return await so if the only place in our method where we use",
    "start": "3002880",
    "end": "3008760"
  },
  {
    "text": "the await keyword is in the return statement we can remove the await we can remove async and we can just return the",
    "start": "3008760",
    "end": "3014720"
  },
  {
    "text": "task that helps us avoid an unnecessary thread switch gives us a little performance boost but again there be",
    "start": "3014720",
    "end": "3022599"
  },
  {
    "text": "Dragons Keep in mind if you have a TR catch block keep return a weight if you",
    "start": "3022599",
    "end": "3027960"
  },
  {
    "text": "have a using block keep return a weight because again as soon as you hit that return statement your codee's exited but",
    "start": "3027960",
    "end": "3035440"
  },
  {
    "text": "if you have return a wait it's at least going to wait for that task to finish before returning so try to avoid it if",
    "start": "3035440",
    "end": "3041960"
  },
  {
    "text": "you can if you want to get the little performance boost unless you're going to try catch block or using",
    "start": "3041960",
    "end": "3048559"
  },
  {
    "text": "block configur white false like I said I use this everywhere hopefully maybe",
    "start": "3048559",
    "end": "3054079"
  },
  {
    "text": "someday the net team will give us us a a global property where I can say for all of this code I want configur weight",
    "start": "3054079",
    "end": "3060160"
  },
  {
    "text": "false to be the default uh until then you're going to end up writing this a lot you're going to append it to every",
    "start": "3060160",
    "end": "3066440"
  },
  {
    "text": "single task um but also keep in mind if you do need to return to that calling",
    "start": "3066440",
    "end": "3072119"
  },
  {
    "text": "thread um so for UI things you always want to return to the UI thread so you can update the UI you don't want to use",
    "start": "3072119",
    "end": "3079280"
  },
  {
    "text": "configure we false uh another example Entity framework EF core can be fickle",
    "start": "3079280",
    "end": "3084720"
  },
  {
    "text": "with this sometimes needs everything to be on the same thread so some places where you don't want to use configur way",
    "start": "3084720",
    "end": "3090079"
  },
  {
    "text": "Falls yes but my rule of thumb for me is a mobile app developer making net Maui",
    "start": "3090079",
    "end": "3095559"
  },
  {
    "text": "apps if I'm in my view model layer if I'm on my services layer of my app where I'm never going to touch the UI and I'm",
    "start": "3095559",
    "end": "3101280"
  },
  {
    "text": "not using crazy things like any the framework I can figure way Falls everything to get that performance benefit so I don't have to return to the",
    "start": "3101280",
    "end": "3107680"
  },
  {
    "text": "calling thread now there is a caveat to this uh we didn't have time today to",
    "start": "3107680",
    "end": "3112880"
  },
  {
    "text": "jump into What's called the synchronization context uh again that's linked on the website if",
    "start": "3112880",
    "end": "3117960"
  },
  {
    "text": "you want to dig into it but basically the synchronization context is what helps your helps you get back to the UI",
    "start": "3117960",
    "end": "3124839"
  },
  {
    "text": "thread um so pretty much every NET Framework has a synchronization context",
    "start": "3124839",
    "end": "3130440"
  },
  {
    "text": "uh but asp.net cord doesn't so there's this weird caveat with configurate false",
    "start": "3130440",
    "end": "3136559"
  },
  {
    "text": "because asp.net cord doesn't have a synchronization context to tell it I don't care what thread I return to so by",
    "start": "3136559",
    "end": "3142880"
  },
  {
    "text": "default on asp.net core you're always is or rather you'll never return to the calling thread you're always going to go",
    "start": "3142880",
    "end": "3149079"
  },
  {
    "text": "back to whatever threadpool thread is free uh just something to keep in mind you can still call configure we false in",
    "start": "3149079",
    "end": "3155640"
  },
  {
    "text": "your asp.net core code it's not going to break anything I actually still do it as a best practice just in case we need to",
    "start": "3155640",
    "end": "3161799"
  },
  {
    "text": "copy paste that code into somewhere else but there is a thing called synchronization context and asp.net core",
    "start": "3161799",
    "end": "3168040"
  },
  {
    "text": "doesn't have one but zamin wind fors WPF wind UI Blazer pretty much every other",
    "start": "3168040",
    "end": "3173359"
  },
  {
    "text": "NET Framework configure Way Fall else use it value task so if your method's",
    "start": "3173359",
    "end": "3180040"
  },
  {
    "text": "hot path doesn't call the awake keyword return value task you'll get a",
    "start": "3180040",
    "end": "3186359"
  },
  {
    "text": "little performance boost like we said value task is a value type whereas task is a reference type so instead of going",
    "start": "3186359",
    "end": "3192520"
  },
  {
    "text": "through all that overhead of initializing a task that you're never going to use we can use value task instead but there are small differences",
    "start": "3192520",
    "end": "3199960"
  },
  {
    "text": "like you should never reuse a value task you shouldn't pass around value task variables but you know if you're just",
    "start": "3199960",
    "end": "3206000"
  },
  {
    "text": "creating a method and you're just going to await the method that's totally cool and by using value task we can get a",
    "start": "3206000",
    "end": "3211960"
  },
  {
    "text": "little bit of a performance boost in our code iyn inumerable so this was that",
    "start": "3211960",
    "end": "3217240"
  },
  {
    "text": "that cool method that gave us the await for each Loop highly highly recommend it it's a little weird to implement like we",
    "start": "3217240",
    "end": "3223240"
  },
  {
    "text": "saw in my code you I had to create a list of tasks and put them in a while loop and it looks a little weird but I",
    "start": "3223240",
    "end": "3228880"
  },
  {
    "text": "promise you'll get used to it and once you do it's beautiful because as soon as",
    "start": "3228880",
    "end": "3233920"
  },
  {
    "text": "those tasks are done we get those results and for me as a mobile app developer I can start updating stuff on",
    "start": "3233920",
    "end": "3239520"
  },
  {
    "text": "the list so the user's not sitting there waiting for every single story to finish before I display it to them they'll see",
    "start": "3239520",
    "end": "3246200"
  },
  {
    "text": "the stories appear in real time as the API calls finish so highly recommend it I think Anu bable it is like I said it's",
    "start": "3246200",
    "end": "3252839"
  },
  {
    "text": "a little strange it's a little weird to get used to but totally worth it and remember we always want to pass in",
    "start": "3252839",
    "end": "3259160"
  },
  {
    "text": "cancellation token to anytime we have a async task method same is true with isync enumerable but we want to add this",
    "start": "3259160",
    "end": "3266799"
  },
  {
    "text": "enumerator cancellation attribute to that cancellation token so that the isnc",
    "start": "3266799",
    "end": "3273359"
  },
  {
    "text": "numeral just stops for us so net helps us out with that weight async so",
    "start": "3273359",
    "end": "3278799"
  },
  {
    "text": "remember if there's ever a method where you have to await it you should be passing a cancellation token but",
    "start": "3278799",
    "end": "3286319"
  },
  {
    "text": "sometimes sometimes that exists where the developer didn't give us that option so if you ever hit one of those",
    "start": "3286319",
    "end": "3292640"
  },
  {
    "text": "scenarios totally okay because you can still call weight async at the end and basically just bolt on that cancellation",
    "start": "3292640",
    "end": "3299280"
  },
  {
    "text": "token so it's essentially a way to still pass in a cancellation token to that task even if that developer before us",
    "start": "3299280",
    "end": "3306079"
  },
  {
    "text": "didn't allow us to do it all right there is one thing we didn't talk about today uh or we didn't",
    "start": "3306079",
    "end": "3312359"
  },
  {
    "text": "look at in code rather but it's really important and it's really really cool it's called I async disposable so we've",
    "start": "3312359",
    "end": "3319040"
  },
  {
    "text": "talked about eye disposable where you know it's a using block and when that using block is finished then you can",
    "start": "3319040",
    "end": "3325359"
  },
  {
    "text": "dispose properly of objects so for big things like file streams we always want to make sure we're good developers and",
    "start": "3325359",
    "end": "3330880"
  },
  {
    "text": "we dispose of those with uh with net now we also have I async disposable and what",
    "start": "3330880",
    "end": "3337680"
  },
  {
    "text": "I want to show you is just how this works because it's a it's a little weird it's a little unintuitive at least it",
    "start": "3337680",
    "end": "3343760"
  },
  {
    "text": "was for me um but the way it looks is we say a weight using and then we can we",
    "start": "3343760",
    "end": "3350640"
  },
  {
    "text": "still want to say configurate false assuming we don't want to return to the main thread and the way this executes is",
    "start": "3350640",
    "end": "3356680"
  },
  {
    "text": "that it'll run all the code inside this block so we say we're saving the data to the file and then once this code is done",
    "start": "3356680",
    "end": "3364440"
  },
  {
    "text": "at the closing squiggly curly bracket that's when we await the disposing of",
    "start": "3364440",
    "end": "3370359"
  },
  {
    "text": "this uh file stream so so file stream it's a it's a net API they've already implemented IAS sync disposable for us",
    "start": "3370359",
    "end": "3377520"
  },
  {
    "text": "and as long as we say await using then we get all the benefits of being able to",
    "start": "3377520",
    "end": "3383119"
  },
  {
    "text": "offload disposing of that file IO object onto a background thread so we get a",
    "start": "3383119",
    "end": "3388160"
  },
  {
    "text": "little bit more performance so yes file stream existed before iyn disposable did",
    "start": "3388160",
    "end": "3394280"
  },
  {
    "text": "so it's also it also implements I disposable so you can still just say using instead of await using but if a",
    "start": "3394280",
    "end": "3401839"
  },
  {
    "text": "method or if a if a if a class implements isync disposable you should probably use a weight using instead of",
    "start": "3401839",
    "end": "3409119"
  },
  {
    "text": "just using okay so if you haven't had a chance now is the time to take out your",
    "start": "3409119",
    "end": "3414680"
  },
  {
    "text": "phone phones grab a picture of this slide because this link is where you can find everything from today I know we",
    "start": "3414680",
    "end": "3421200"
  },
  {
    "text": "moved really fast like I said there's a lot of information here um but these are",
    "start": "3421200",
    "end": "3426319"
  },
  {
    "text": "all lessons learned that I made along the way when I thought I was doing things right turns out I wasn't and it",
    "start": "3426319",
    "end": "3432760"
  },
  {
    "text": "wasn't until you kind of really dig down deep into the net runtime do you really figure out what's going on so here on",
    "start": "3432760",
    "end": "3438640"
  },
  {
    "text": "this website Cod traveler. async AWA best practices that's that's my web page",
    "start": "3438640",
    "end": "3444319"
  },
  {
    "text": "you can find everything we covered today so this is where you can find a recording I've given this talk at a previous NDC before they recorded it for",
    "start": "3444319",
    "end": "3450520"
  },
  {
    "text": "us just like they're doing today I'll make sure to refresh this once the PTO recording's out for you um so you've got",
    "start": "3450520",
    "end": "3455920"
  },
  {
    "text": "the recording that you can share with your friends and co-workers who maybe couldn't make it today you've also got the slides if you want to grab some of",
    "start": "3455920",
    "end": "3461799"
  },
  {
    "text": "these slides and use them go for them copy them be my guest and also all that code so the the a the async A8 best",
    "start": "3461799",
    "end": "3469160"
  },
  {
    "text": "practices library is all open source it's on GitHub it's got an MIT license so you're more than welcome to copy",
    "start": "3469160",
    "end": "3475160"
  },
  {
    "text": "paste any of that code do whatever you want with it and if you want to keep going if you haven't had enough async a",
    "start": "3475160",
    "end": "3482079"
  },
  {
    "text": "weight you want to keep going deeper down the rabbit hole you can find links to things like value task and",
    "start": "3482079",
    "end": "3487200"
  },
  {
    "text": "synchronization context and all these really nitty-gritty things that probably most of your co-workers don't know about",
    "start": "3487200",
    "end": "3493119"
  },
  {
    "text": "but now you can be an expert in them too thank",
    "start": "3493119",
    "end": "3498280"
  },
  {
    "text": "you",
    "start": "3502280",
    "end": "3505280"
  }
]