[
  {
    "start": "0",
    "end": "31000"
  },
  {
    "text": "all right we'll make starts thanks for",
    "start": "5629",
    "end": "11670"
  },
  {
    "text": "coming along the late Friday afternoon good you've all stuck around excellent",
    "start": "11670",
    "end": "18570"
  },
  {
    "text": "we're going to talk about lowering which is a word that if you say it enough at me loses all its meaning but there's a",
    "start": "18570",
    "end": "26039"
  },
  {
    "text": "pretty good chance that some of you won't know what it means anyway so let's",
    "start": "26039",
    "end": "31460"
  },
  {
    "start": "31000",
    "end": "231000"
  },
  {
    "text": "talk about it what is lowering so imagine you're writing a compiler",
    "start": "31460",
    "end": "38180"
  },
  {
    "text": "c-sharp Ambala and your job is to write a method that takes a for each loop the",
    "start": "38180",
    "end": "44940"
  },
  {
    "text": "code for one and outputs some al composite this is not how a compiler is",
    "start": "44940",
    "end": "51180"
  },
  {
    "text": "written let's pretend that we have one method called compile forage now IL is",
    "start": "51180",
    "end": "58010"
  },
  {
    "text": "I'm gonna say reasonably complicated because I don't understand it and therefore it's magic but c-sharp I do",
    "start": "58010",
    "end": "65070"
  },
  {
    "text": "understand so in my mind I'm thinking well rather than write this for each - IL method I",
    "start": "65070",
    "end": "70289"
  },
  {
    "text": "know how to rewrite a for each loop as a for loop so I will write that and now I",
    "start": "70289",
    "end": "76289"
  },
  {
    "text": "can worry about writing a full loop - IL method i kill two birds with one stone great do less work and of course then",
    "start": "76289",
    "end": "83160"
  },
  {
    "text": "you keep thinking like well a for loop is just a while loop if you reorder bits and if you really want to go crazy a",
    "start": "83160",
    "end": "89340"
  },
  {
    "text": "while loop well you could just write that using go-to statements and now if I convert all this c-sharp and stay in a",
    "start": "89340",
    "end": "96450"
  },
  {
    "text": "language that I like and understand I can write one method to compile that -",
    "start": "96450",
    "end": "102869"
  },
  {
    "text": "IL and I get sort of four things for the price of one right if we do go all the",
    "start": "102869",
    "end": "108660"
  },
  {
    "text": "way to IL with this little code snippet and this is the only il in the talk and",
    "start": "108660",
    "end": "113729"
  },
  {
    "text": "I barely understand it so don't worry but this is what essentially all of",
    "start": "113729",
    "end": "119160"
  },
  {
    "text": "those bits of code look like kind of and you know there's familiar things here we have get items so we're pulling an item",
    "start": "119160",
    "end": "125940"
  },
  {
    "text": "out of the loop we have get count we have to do that to compare the count at the end and at the end here we have the",
    "start": "125940",
    "end": "132629"
  },
  {
    "text": "bacon lettuce and tomato sandwich which is not what that means but I told you I didn't know al that actually means",
    "start": "132629",
    "end": "138870"
  },
  {
    "text": "branch if less then that is the thing at the end that says we've got a count from",
    "start": "138870",
    "end": "144450"
  },
  {
    "text": "our loop we've got a you know value in our index er if there's still more to go",
    "start": "144450",
    "end": "150750"
  },
  {
    "text": "let's loop back around it does a branch and if you have any experience with il",
    "start": "150750",
    "end": "156000"
  },
  {
    "text": "or with assembly because they're very similar branching is kind of all that",
    "start": "156000",
    "end": "161100"
  },
  {
    "text": "can do right there is no blocks in il you can't have like it doesn't have loop",
    "start": "161100",
    "end": "167010"
  },
  {
    "text": "constructs it's all just branching which kind of means it's all just go twos so if you think about having to implement a",
    "start": "167010",
    "end": "174870"
  },
  {
    "text": "for each loop if you've got a writer if you've got to implement in an il and you therefore will have to use go twos maybe",
    "start": "174870",
    "end": "181500"
  },
  {
    "text": "it is easier to go all the way through to goto statements in c-sharp before you get there that's not actually what",
    "start": "181500",
    "end": "187290"
  },
  {
    "text": "happens but anyway so lower ring is going through these lower level",
    "start": "187290",
    "end": "195390"
  },
  {
    "text": "constructs but in the language that like in the same language in the language",
    "start": "195390",
    "end": "201000"
  },
  {
    "text": "that you're compiling so there you go Eric Lippert",
    "start": "201000",
    "end": "206120"
  },
  {
    "text": "has that little sentence I don't actually know if Lauren is a is a sort",
    "start": "206120",
    "end": "211350"
  },
  {
    "text": "of technically correct term but it seems to be what everyone calls it so that's what I called it but basically the idea",
    "start": "211350",
    "end": "216959"
  },
  {
    "text": "is you stay in the same language you just go through lower level features if",
    "start": "216959",
    "end": "222030"
  },
  {
    "text": "you go from a high level language to a low level language well that's called compiling so doesn't make sense to call",
    "start": "222030",
    "end": "229650"
  },
  {
    "text": "it that the thing is we all well we all use lowering every day probably and one",
    "start": "229650",
    "end": "237390"
  },
  {
    "start": "231000",
    "end": "296000"
  },
  {
    "text": "of the most sort of commonly known one is with linked queries so I'm hoping",
    "start": "237390",
    "end": "242910"
  },
  {
    "text": "that most people in the room who've used a link query know you can basically write there's two ways we can write with query syntax or we can write with the",
    "start": "242910",
    "end": "249900"
  },
  {
    "text": "methods index and it's it's pretty prevalent that these two things coexist there's reasons for why you might want",
    "start": "249900",
    "end": "256229"
  },
  {
    "text": "one or the other even in Visual Studio there's refactoring that offers you to convert from one for the other Emeka",
    "start": "256229",
    "end": "261900"
  },
  {
    "text": "ghen the query syntax gets lowered by the compiler into the methods in tax",
    "start": "261900",
    "end": "268500"
  },
  {
    "text": "rather than compiling both of these - IL they simply convert from one form of",
    "start": "268500",
    "end": "274510"
  },
  {
    "text": "c-sharp to the other and compile that and in fact these methods are extension",
    "start": "274510",
    "end": "279910"
  },
  {
    "text": "methods if you've ever written an extension method you know that it's just a fancy way of writing a static method so you can go even further and say that",
    "start": "279910",
    "end": "286870"
  },
  {
    "text": "well you could lower but that method form of a link query into normal static method calls so all of this stuff is",
    "start": "286870",
    "end": "294280"
  },
  {
    "text": "happening all the time in c-sharp something as simple as defining a variable this has to be lowered right",
    "start": "294280",
    "end": "300970"
  },
  {
    "start": "296000",
    "end": "357000"
  },
  {
    "text": "there is no il concept for VAR there's no even the dotnet concept of var var is",
    "start": "300970",
    "end": "307000"
  },
  {
    "text": "a c-sharp field so the c-sharp compiler in order to produce a dotnet DLL has to",
    "start": "307000",
    "end": "313120"
  },
  {
    "text": "do something with it that dotnet understands so the compiler essentially rewrites your code or pretends that you",
    "start": "313120",
    "end": "318400"
  },
  {
    "text": "wrote string so we're all using this all the time it's also used to optimize or",
    "start": "318400",
    "end": "326340"
  },
  {
    "text": "optimize but improve your code there's minor little optimizations the compiler",
    "start": "326340",
    "end": "331539"
  },
  {
    "text": "makes so if you write this code and you had two string literals this could be compiled down to call the add operator",
    "start": "331539",
    "end": "338169"
  },
  {
    "text": "on a string passed in the left hand side in the right hand side that'll combine these strings at runtime but the",
    "start": "338169",
    "end": "343270"
  },
  {
    "text": "compiler is smart enough to know that it can do the same job at compile time so to save time if you write that code",
    "start": "343270",
    "end": "348849"
  },
  {
    "text": "you're essentially compiling that code compiler just lunges them together and so there's lots of these little",
    "start": "348849",
    "end": "355380"
  },
  {
    "text": "optimizations if we have three parts to our string now if these were all string",
    "start": "355380",
    "end": "361570"
  },
  {
    "text": "constants the same thing holds true as was on the previous slide but if these",
    "start": "361570",
    "end": "366789"
  },
  {
    "text": "are parameters or variables or fields or anything else it can't the compiler",
    "start": "366789",
    "end": "372130"
  },
  {
    "text": "can't do that at compile time obviously there has to be that at runtime so logically with the plus operator you",
    "start": "372130",
    "end": "379090"
  },
  {
    "text": "would have to do this operators in c-sharp have a left hand side in the right hand side they only have two parameters so you would have to",
    "start": "379090",
    "end": "385690"
  },
  {
    "text": "have a temporary variable and part 1 and part 2 together then add part 3 to our temporary variable the compiler does",
    "start": "385690",
    "end": "391750"
  },
  {
    "text": "this all the time to make allow you to write you know easy code without defining these temporary variables yourself but of course if it did that",
    "start": "391750",
    "end": "398280"
  },
  {
    "text": "that temporary variable is now something the garbage collector has to go and clean up all right that's an allocation that you",
    "start": "398280",
    "end": "404349"
  },
  {
    "text": "may be intend so to improve this if you write this top bit of code what the compiler",
    "start": "404349",
    "end": "411110"
  },
  {
    "text": "actually does is love as a two-string concat witch pre-allocate s-- one string copies the bits in and the way we go so",
    "start": "411110",
    "end": "417650"
  },
  {
    "text": "there's all these really small little optimizations that you're getting the benefit of all the time even something",
    "start": "417650",
    "end": "423800"
  },
  {
    "text": "as simple as this again that M is not a dotnet thing that's the c-sharp thing so",
    "start": "423800",
    "end": "429440"
  },
  {
    "text": "that is calling a constructor of yeah system decimal it's not very exciting but that's what's happening so why do we",
    "start": "429440",
    "end": "438080"
  },
  {
    "start": "437000",
    "end": "584000"
  },
  {
    "text": "care well there's kind of two reasons number one is understanding about the",
    "start": "438080",
    "end": "446780"
  },
  {
    "text": "performance of your code that's the reason that if you want to go home and tell your boss on Monday that's the time",
    "start": "446780",
    "end": "452150"
  },
  {
    "text": "to stick with I write code like this all the time because this is what my brain",
    "start": "452150",
    "end": "458450"
  },
  {
    "text": "says to do or possibly just my fingers do it without my brain even catching up concatenating strings let's just want to",
    "start": "458450",
    "end": "465710"
  },
  {
    "text": "do some people like string format some people like this way I go this way and in c-sharp six string interpolation the",
    "start": "465710",
    "end": "473870"
  },
  {
    "text": "way interpolate strings came out and everyone in the code base I was working on went and changed them all to this which is cool this is very readable I",
    "start": "473870",
    "end": "482000"
  },
  {
    "text": "like the little coloring you get in video studio with the count thing that's cool but if you know what the compiler",
    "start": "482000",
    "end": "489140"
  },
  {
    "text": "does with your code when this came out every time someone changed the top line",
    "start": "489140",
    "end": "494750"
  },
  {
    "text": "there to that second form it's a readability improvement but I saw",
    "start": "494750",
    "end": "499820"
  },
  {
    "text": "a potential performance degradation because string interpolation lowers to",
    "start": "499820",
    "end": "505190"
  },
  {
    "text": "string dot format and string dot format is generally speaking slower than string concatenation now it's slower because it",
    "start": "505190",
    "end": "512000"
  },
  {
    "text": "does more and it does good stuff it does like culture sensitive things so in this example with count here I'd actually",
    "start": "512000",
    "end": "519860"
  },
  {
    "text": "argue that top line is probably wrong and it probably should have been string format because if count was more than a thousand you might want the little",
    "start": "519860",
    "end": "525770"
  },
  {
    "text": "thousand separator and of course whether that's a comma like appear right 1 comma",
    "start": "525770",
    "end": "531680"
  },
  {
    "text": "0 0 0 in Europe it would be a dot string dot format is aware of that",
    "start": "531680",
    "end": "537120"
  },
  {
    "text": "maybe I shouldn't mentioned Europe today but never Munt so this is a potential",
    "start": "537120",
    "end": "543270"
  },
  {
    "text": "performance regression let's say right this is probably unlikely to break your app and make it crumble but you never",
    "start": "543270",
    "end": "549660"
  },
  {
    "text": "know it's something to be aware of now the good thing is that since C sharp",
    "start": "549660",
    "end": "555450"
  },
  {
    "text": "sticks came out I think like maybe six months afterwards there was a contribution from the community that",
    "start": "555450",
    "end": "561180"
  },
  {
    "text": "improved string interpolation so it it will also lower to string doc and cat if it can so there's kind of less reasons",
    "start": "561180",
    "end": "568740"
  },
  {
    "text": "to worry now essentially well you kind of don't have to worry cuz if it's going to use the string format call if there's",
    "start": "568740",
    "end": "574350"
  },
  {
    "text": "an argument it always should have been but so performance is kind of the not really performance either just",
    "start": "574350",
    "end": "580320"
  },
  {
    "text": "understanding performance it's kind of the main reason but the other reason that I like to know is because I like to",
    "start": "580320",
    "end": "587130"
  },
  {
    "start": "584000",
    "end": "605000"
  },
  {
    "text": "know I'm interested in this sort of thing and it's funny because I think",
    "start": "587130",
    "end": "593130"
  },
  {
    "text": "I've seen this quote at least three times this week because I think this is a very common",
    "start": "593130",
    "end": "598860"
  },
  {
    "text": "thing that all developers like to understand how things work and so that's",
    "start": "598860",
    "end": "604260"
  },
  {
    "text": "why I like to know so back to our for each loop though this is a for each loop",
    "start": "604260",
    "end": "610230"
  },
  {
    "start": "605000",
    "end": "1215000"
  },
  {
    "text": "it's not very exciting for um in values now the body of the loop there I've",
    "start": "610230",
    "end": "615750"
  },
  {
    "text": "colored in green because I want you to ignore it it's like a comment right from the compilers point of view we assume",
    "start": "615750",
    "end": "622200"
  },
  {
    "text": "that it doesn't know what's inside the loop obviously it does because it has to compile it but by extension note even if",
    "start": "622200",
    "end": "628680"
  },
  {
    "text": "it knew the console dot write lines here it doesn't know what console dot write line does so that kind of doesn't factor it but needless to say that's the body",
    "start": "628680",
    "end": "635339"
  },
  {
    "text": "it's green so you can see where it goes so what does the compiler do when we get the for each loop so we can't talk about",
    "start": "635339",
    "end": "643380"
  },
  {
    "text": "for each without talking about fire enumerable an ienumerable of T they're",
    "start": "643380",
    "end": "648720"
  },
  {
    "text": "relatively simple interfaces ienumerable has one method which returns an enumerator it's called get enumerator and an enumerator has a current which is",
    "start": "648720",
    "end": "656850"
  },
  {
    "text": "the current thing we're pointing at it has a move next which returns whether",
    "start": "656850",
    "end": "662190"
  },
  {
    "text": "the move worked not whether there is more but whether we did move and it has a reset method which no one has ever",
    "start": "662190",
    "end": "667860"
  },
  {
    "text": "called and then ienumerable of T and I knew of T is the same thing but we redefine a",
    "start": "667860",
    "end": "673779"
  },
  {
    "text": "couple of things in terms of T I am sure this is one of these examples where if generics existed from C sharp 1 this",
    "start": "673779",
    "end": "679000"
  },
  {
    "text": "would look a lot cleaner because this is kind of you know but anyway but so for",
    "start": "679000",
    "end": "684580"
  },
  {
    "text": "each works on Eire numerals right everyone knows that but it kind of",
    "start": "684580",
    "end": "690010"
  },
  {
    "text": "doesn't let's write a for each loop so I will write this",
    "start": "690010",
    "end": "695080"
  },
  {
    "text": "no thank you right I'll write a Forex",
    "start": "695080",
    "end": "700209"
  },
  {
    "text": "loop now obviously this doesn't compile but I'm going to have a thing that's",
    "start": "700209",
    "end": "707290"
  },
  {
    "text": "what I want and I'm going to create a class called my femur so this doesn't compile as you would expect and if we",
    "start": "707290",
    "end": "714820"
  },
  {
    "text": "hover over this you can't read it because visual shooter doesn't zoom tool tips but that says blah blah blah blah",
    "start": "714820",
    "end": "720640"
  },
  {
    "text": "blah getenumerator but it doesn't say you don't implement ienumerable it just",
    "start": "720640",
    "end": "727779"
  },
  {
    "text": "says you don't have a getenumerator method and in fact if we write one let's",
    "start": "727779",
    "end": "733510"
  },
  {
    "text": "call this one my enumerator I love that it suggests the name it's so clever you",
    "start": "733510",
    "end": "741459"
  },
  {
    "text": "know what I don't even actually need to do anything here if I do this and then create that class so this still doesn't",
    "start": "741459",
    "end": "750940"
  },
  {
    "text": "compile but this error message you can't see is slightly different this now says you don't have a current and you don't",
    "start": "750940",
    "end": "757029"
  },
  {
    "text": "have a move next if I give this a current yeah like an object it doesn't",
    "start": "757029",
    "end": "763540"
  },
  {
    "text": "really matter and we give it a move next",
    "start": "763540",
    "end": "768810"
  },
  {
    "text": "52 you can always be false and this now compiles so there's no irony removals",
    "start": "769770",
    "end": "775750"
  },
  {
    "text": "and now I numerators is nothing for each is pattern-based which is the boring way of saying it's",
    "start": "775750",
    "end": "781690"
  },
  {
    "text": "duck types meaning if it looks like a duck and sounds like a duck and walks like a duck and it's probably a duck so",
    "start": "781690",
    "end": "788649"
  },
  {
    "text": "this is interesting thing number one about Forex loops yes my first time using virtual desktops",
    "start": "788649",
    "end": "795680"
  },
  {
    "text": "it's very exciting to worked so all this stuff with ienumerable see I didn't even need reset because no",
    "start": "795680",
    "end": "801319"
  },
  {
    "text": "one ever calls reset you actually don't like we don't need that so the compiler",
    "start": "801319",
    "end": "806420"
  },
  {
    "text": "doesn't use it either so what does it look like the first thing the compiler has to do when we have a for each loop",
    "start": "806420",
    "end": "812120"
  },
  {
    "text": "is we have to introduce a scope so it's very subtle but there are braces there",
    "start": "812120",
    "end": "817129"
  },
  {
    "text": "and that's simply because you know our m in our loop we can't use that anywhere else so we have to contain it easy",
    "start": "817129",
    "end": "823519"
  },
  {
    "text": "enough so we call get a numerator on our values and we get it back there's no",
    "start": "823519",
    "end": "829309"
  },
  {
    "text": "castes there's no checking if it's ienumerable etc all those things we just call get any route you can kind of think",
    "start": "829309",
    "end": "834800"
  },
  {
    "text": "of this as as long as that line of code compiles then everything is fine it's",
    "start": "834800",
    "end": "840319"
  },
  {
    "text": "not technically true because extension methods don't work but that's a choice that they made there's no great",
    "start": "840319",
    "end": "846139"
  },
  {
    "text": "technical reason why not on the numbers you'll it'll break things but so we get in the numerator and it's var because we",
    "start": "846139",
    "end": "853100"
  },
  {
    "text": "don't know what it is but we don't care right as long as it has the right methods we have a try finally because",
    "start": "853100",
    "end": "858350"
  },
  {
    "text": "error correction is good and then we declare our loop variable and then while",
    "start": "858350",
    "end": "863449"
  },
  {
    "text": "we can move we move so that's about it for eclipse lower to a while loop 15",
    "start": "863449",
    "end": "870319"
  },
  {
    "text": "minutes in good talk yet let's go bit further haven't used the current property yet so",
    "start": "870319",
    "end": "876319"
  },
  {
    "text": "we get our current value into our loop variable and then we have our body which we all gonna ignore right everyone happy",
    "start": "876319",
    "end": "884740"
  },
  {
    "text": "who's itching to raise their hand and tell me thank you John why are there two casts he says so this",
    "start": "884740",
    "end": "892970"
  },
  {
    "text": "is where for me it gets interesting because knowing what a for each loop",
    "start": "892970",
    "end": "899120"
  },
  {
    "text": "does yeah it's it's a little bit interesting I like knowing what the compiler does so fine but when you get",
    "start": "899120",
    "end": "904220"
  },
  {
    "text": "up to something like why are there two casts that's when I'm like okay I have to find this out he sees me I just got to bug me if I don't know so let us have",
    "start": "904220",
    "end": "912319"
  },
  {
    "text": "an aside this is a loop roll this is",
    "start": "912319",
    "end": "917920"
  },
  {
    "text": "pretend that two different developers wrote this code in the boxier developer",
    "start": "917920",
    "end": "922970"
  },
  {
    "text": "a wrote an object array put some mints into it and then call the method that took an object array fine",
    "start": "922970",
    "end": "930059"
  },
  {
    "text": "developer B wrote a method that takes an object array and pulled some ins out of it so this looks fine and if you read",
    "start": "930059",
    "end": "937660"
  },
  {
    "text": "that in English it says for each int in my array it kind of sounds like oh that's going to go through my array find",
    "start": "937660",
    "end": "942819"
  },
  {
    "text": "the intz pulled them out and do something with them but if we look at the code on the left which is what the compiler actually outputs that's not true right that's not",
    "start": "942819",
    "end": "950049"
  },
  {
    "text": "what's happening there's no looking to check if there's n so this just casts so if you get the types in this wrong",
    "start": "950049",
    "end": "955209"
  },
  {
    "text": "you'll get an invalid cast exception maybe some of you have seen this at runtime it does happen and if you look",
    "start": "955209",
    "end": "962199"
  },
  {
    "text": "at the code on the right and you think I mean why would you get an invalid cast exception there's no casts there well now you know",
    "start": "962199",
    "end": "969639"
  },
  {
    "text": "the compiler puts two in so there are two casts going on here we have a cast",
    "start": "969639",
    "end": "974829"
  },
  {
    "text": "from int to object to go into the array and we have a cast from object two in to come out of the array but it kind of",
    "start": "974829",
    "end": "983290"
  },
  {
    "text": "doesn't explain it for me so I'm gonna change the example a little bit but due to space constraints it gets a bit confusing so bear with me hopefully you",
    "start": "983290",
    "end": "989350"
  },
  {
    "text": "can follow a level if we change our array e to a person array and we put employees into it and then we instead of",
    "start": "989350",
    "end": "996970"
  },
  {
    "text": "pulling out in store persons we pull out customers in the second bit this two",
    "start": "996970",
    "end": "1003720"
  },
  {
    "text": "array is now become required so don't forget this is developer a and B they've never talked to each other they haven't met right developer eyes job he's",
    "start": "1003720",
    "end": "1010439"
  },
  {
    "text": "putting employees into something that wants people so he has to provide some kind of way for that to work",
    "start": "1010439",
    "end": "1016289"
  },
  {
    "text": "it could be through inheritance that it works it could be through an implicit caste operator an explicit cast operator",
    "start": "1016289",
    "end": "1021480"
  },
  {
    "text": "doesn't matter somehow that translation from employee to person has to work and",
    "start": "1021480",
    "end": "1026668"
  },
  {
    "text": "then develop a B they're writing something that translates from person to customer and so they have to write",
    "start": "1026669",
    "end": "1032519"
  },
  {
    "text": "something that makes that work but they're each within their own domains right so when this code runs current",
    "start": "1032519",
    "end": "1040230"
  },
  {
    "text": "will be an employee the first time it gets cast it will be cast to a person",
    "start": "1040230",
    "end": "1045870"
  },
  {
    "text": "and that translation is supplied by developer a and then the second time it gets cast it will be cast to a customer",
    "start": "1045870",
    "end": "1051929"
  },
  {
    "text": "from a person and that translation is supplied by developer B so that all works if we only had one cast you will",
    "start": "1051929",
    "end": "1058200"
  },
  {
    "text": "be pulling out an employee casting it to customer that could potentially blow up but more importantly",
    "start": "1058200",
    "end": "1064460"
  },
  {
    "text": "from each developer's perspective that is completely and utterly mysterious",
    "start": "1064460",
    "end": "1070100"
  },
  {
    "text": "right if you've wrote if you've written a a method where you put employees into something that takes people and it",
    "start": "1070100",
    "end": "1076380"
  },
  {
    "text": "throws up saying I expected customers you have no idea what you have no idea that he expected that and same thing if",
    "start": "1076380",
    "end": "1082110"
  },
  {
    "text": "you write a method that expects customers and you'll get given employees you have no idea that these two these two developers might not even know the",
    "start": "1082110",
    "end": "1088320"
  },
  {
    "text": "other class exists so the two castes allow this sort of pipeline through from what we put in the array to what type of",
    "start": "1088320",
    "end": "1094710"
  },
  {
    "text": "things the array can store to what type of things were pulling out of the forage I find that interesting because I know",
    "start": "1094710",
    "end": "1101040"
  },
  {
    "text": "that I was never be smart enough to come up with that if I was designing a language but after the fact I could look at it and go oh yeah I can't see other",
    "start": "1101040",
    "end": "1106950"
  },
  {
    "text": "words anyway and then we disposed things and that's how it works now the dispossess got a little bit of",
    "start": "1106950",
    "end": "1113430"
  },
  {
    "text": "poetic license as well because inside the compiler it knows if you're I disposable and it'll just leave out that",
    "start": "1113430",
    "end": "1119430"
  },
  {
    "text": "call if you're not but this is a PowerPoint slide so you get that so that's a Forex look it's cool if you go",
    "start": "1119430",
    "end": "1126840"
  },
  {
    "text": "home or go back to work on Monday and you write a foreach loop and you compile",
    "start": "1126840",
    "end": "1132930"
  },
  {
    "text": "it and you look in aisle spied you look at that DLL don't try and show off to",
    "start": "1132930",
    "end": "1138690"
  },
  {
    "text": "your workmates and say I know what this is going to look like because it won't look like this because this is a c-sharp four for each lip a c-sharp five for",
    "start": "1138690",
    "end": "1146340"
  },
  {
    "text": "each that looks slightly different watch the M in c-sharp five our int M",
    "start": "1146340",
    "end": "1154680"
  },
  {
    "text": "declaration moved inside the while loop that's it that's all that happened this",
    "start": "1154680",
    "end": "1159960"
  },
  {
    "text": "solved so many Stack Overflow posts it was ridiculous and again this is where",
    "start": "1159960",
    "end": "1166830"
  },
  {
    "text": "this stuff isn't really this is like historical interesting now so what happened he'd say sharp five that caused",
    "start": "1166830",
    "end": "1171960"
  },
  {
    "text": "this well that's actually a little bit of a false question it's what happened in c-sharp for that caused them for them fix it as a sharp five",
    "start": "1171960",
    "end": "1179470"
  },
  {
    "text": "and well I won't spoil yet what happened",
    "start": "1179470",
    "end": "1184730"
  },
  {
    "text": "in c-sharp for is lick and lambdas right and it exposed a way to say bug but",
    "start": "1184730",
    "end": "1196159"
  },
  {
    "text": "there was an assumption in people's code and it was it was possible from back in c-sharp to with anonymous delegates but",
    "start": "1196159",
    "end": "1203210"
  },
  {
    "text": "link you know made everyone start writing more lambda expressions so it just got a lot more noise but yeah",
    "start": "1203210",
    "end": "1211220"
  },
  {
    "text": "anyway I went I went spoiler but to talk about with problem is we have talked about closures which means we have to talk about lambdas so a lambda in green",
    "start": "1211220",
    "end": "1220190"
  },
  {
    "start": "1215000",
    "end": "1428000"
  },
  {
    "text": "there or actually well in green is the body of a lambda technically I guess the lander includes the XP but anyway so",
    "start": "1220190",
    "end": "1226820"
  },
  {
    "text": "we're defining a lambda it's an action it takes in one parameter fine and we're going to call it conceptually this lowers to this which",
    "start": "1226820",
    "end": "1235850"
  },
  {
    "text": "is your action is a method pointer we call the action which ends up calling the method great realistically this",
    "start": "1235850",
    "end": "1243049"
  },
  {
    "text": "isn't how the compiler works because having this method here on your class could potentially be a problem if again",
    "start": "1243049",
    "end": "1253940"
  },
  {
    "text": "because it doesn't know what's in the body of the lambda right it doesn't know what console the right loan what does it",
    "start": "1253940",
    "end": "1260330"
  },
  {
    "text": "could be something that that has to hold this instance of C in memory forever so",
    "start": "1260330",
    "end": "1265580"
  },
  {
    "text": "if this class is a windows form with a hundred controls and lots of event handlers that uses up lots and lots",
    "start": "1265580",
    "end": "1271010"
  },
  {
    "text": "around whatever and defining one little lambda is going to result in this being held in memory for the entire life of your application that could be a bad",
    "start": "1271010",
    "end": "1277399"
  },
  {
    "text": "thing so the compiler can't really prove that this is going to happen or not going to happen so all it does is it",
    "start": "1277399",
    "end": "1283490"
  },
  {
    "text": "tries to generate code that will avoid it as much as a can which just means in practice it generates a little class to",
    "start": "1283490",
    "end": "1290720"
  },
  {
    "text": "hold your method so that even if something goes wrong in this class this instance is held in memory at least it",
    "start": "1290720",
    "end": "1296450"
  },
  {
    "text": "knows it's generated the smallest classic can there is one more step to",
    "start": "1296450",
    "end": "1301789"
  },
  {
    "text": "this which I'm not going to cover because doesn't apply as soon as you close over things which is what we're talking about but if you're interested",
    "start": "1301789",
    "end": "1308539"
  },
  {
    "text": "you can go and find out about that later but so here's essentially how a lambda",
    "start": "1308539",
    "end": "1314180"
  },
  {
    "text": "expression is lowered we have a helper class that gets created we point to the method on that helper class great so",
    "start": "1314180",
    "end": "1322880"
  },
  {
    "text": "what happens if we close over something so closing over something means if we modify our lambda to refer to something",
    "start": "1322880",
    "end": "1329420"
  },
  {
    "text": "from outside of it so just to recap this is our lambda this is what it looks like when it's lowered so if I add in a Y",
    "start": "1329420",
    "end": "1338000"
  },
  {
    "text": "here so we're now running out X plus y we've defined Y locally so we're closing",
    "start": "1338000",
    "end": "1343790"
  },
  {
    "text": "over Y right the lambda is using something from outside itself a code on the right obviously this now doesn't",
    "start": "1343790",
    "end": "1350090"
  },
  {
    "text": "compile anymore because where does y I come from so what happens is any local",
    "start": "1350090",
    "end": "1355160"
  },
  {
    "text": "variable that you're closing over gets hoisted up to be a field on the helper class so now this helper class now",
    "start": "1355160",
    "end": "1362030"
  },
  {
    "text": "compiles again we have a why every reference to the local in your method gets replaced with a reference to that",
    "start": "1362030",
    "end": "1368360"
  },
  {
    "text": "field so we create a class we set something like a field call a method right this is reasonably straightforward",
    "start": "1368360",
    "end": "1375080"
  },
  {
    "text": "if we change the value of Y to fish then",
    "start": "1375080",
    "end": "1380600"
  },
  {
    "text": "all we do is set that field to fish so from this example it's relatively clear",
    "start": "1380600",
    "end": "1387890"
  },
  {
    "text": "hopefully that this is going to print out hello fish right we're closing over",
    "start": "1387890",
    "end": "1393710"
  },
  {
    "text": "Y naught the value of Y but the variable itself so we're always getting the latest version of it when you write out",
    "start": "1393710",
    "end": "1401060"
  },
  {
    "text": "code like this that's its you know it's reasonably expected once you bring loops",
    "start": "1401060",
    "end": "1407210"
  },
  {
    "text": "into the equation though things just get a bit more hidden and it sort of revealed some problems do let me know if",
    "start": "1407210",
    "end": "1414020"
  },
  {
    "text": "this is like - whatever this talks kind of a bit of a roller coaster or if like gets really complex or whatever and then",
    "start": "1414020",
    "end": "1419810"
  },
  {
    "text": "falls off a cliff at the end if you should start to feel ill I won't be offended if you leave put a green card",
    "start": "1419810",
    "end": "1426290"
  },
  {
    "text": "in so I know you were sick so let's go back to our loop and we've got to change our loop now to have lambdas in it so",
    "start": "1426290",
    "end": "1432620"
  },
  {
    "text": "instead of actually writing out what we want to do we're gonna assemble a list of things which I would probably call",
    "start": "1432620",
    "end": "1438170"
  },
  {
    "text": "tasks but that keyword is taken so our loop now is just going to add things to a list but it adds",
    "start": "1438170",
    "end": "1443960"
  },
  {
    "text": "and it's capturing our M so in c-sharp for this is what that code looked like",
    "start": "1443960",
    "end": "1449960"
  },
  {
    "text": "we create an instance of our helper because that's how we declare our M right our M is now a field so how do you",
    "start": "1449960",
    "end": "1455600"
  },
  {
    "text": "yeah declare a field well you don't really but you know you create an object just to hold it and so then inside our",
    "start": "1455600",
    "end": "1462740"
  },
  {
    "text": "loop we're constantly setting that field and then we're adding our lambdas in our actions so later on when this gets when",
    "start": "1462740",
    "end": "1469940"
  },
  {
    "text": "these actions get called that's going to print out the last value that M had right the most recent value because it's",
    "start": "1469940",
    "end": "1476749"
  },
  {
    "text": "not closing over the value so in c-sharp 5 that moves inside the loop every item",
    "start": "1476749",
    "end": "1483049"
  },
  {
    "text": "in our list of things now gets its own helper class or its own instance any way and everything's works so the way this",
    "start": "1483049",
    "end": "1489769"
  },
  {
    "text": "manifested in c-sharp 4 was everybody went gung ho with link they said yes give me a list of all my customers and",
    "start": "1489769",
    "end": "1495649"
  },
  {
    "text": "then they loop through the customer and they say give me a list of all their orders and then every customer had the lot had the orders from the last",
    "start": "1495649",
    "end": "1501619"
  },
  {
    "text": "customer in the list and it got to be that I remember sitting that at so at where I was working the time we had this",
    "start": "1501619",
    "end": "1508009"
  },
  {
    "text": "customer RM and we had a linked thing and we succumb to this that fixed it and then we were like looking on Stack",
    "start": "1508009",
    "end": "1514129"
  },
  {
    "text": "Overflow and you could just start reading the first two sentences you go oh yeah I know the answer this one that's this problem and it you know",
    "start": "1514129",
    "end": "1519409"
  },
  {
    "text": "generated enough noise that they fixed it this this is a breaking change in the compiler which doesn't happen much",
    "start": "1519409",
    "end": "1524480"
  },
  {
    "text": "probably didn't break anyone maybe but anyway before we finish on closures",
    "start": "1524480",
    "end": "1530389"
  },
  {
    "start": "1530000",
    "end": "1602000"
  },
  {
    "text": "though just to complete the story if we close over something from outside the",
    "start": "1530389",
    "end": "1536960"
  },
  {
    "text": "method our lambda is in theme is get a bit more tricky so we can't just hoist Z",
    "start": "1536960",
    "end": "1544399"
  },
  {
    "text": "up here to be a field on our class because Zed is now living you know in",
    "start": "1544399",
    "end": "1551090"
  },
  {
    "text": "our outer scope it could be set by another method on this class it could be a public thing that gets set by who",
    "start": "1551090",
    "end": "1558740"
  },
  {
    "text": "knows what it could be a property or a method that you know does some work so this now has to capture the entire class",
    "start": "1558740",
    "end": "1565909"
  },
  {
    "text": "so it's actually capturing the this if you think about it if this and said this",
    "start": "1565909",
    "end": "1571879"
  },
  {
    "text": "dot Z and of makes a bit more sense right there's like an implementation detail of what we're pulling off the class it",
    "start": "1571879",
    "end": "1577490"
  },
  {
    "text": "has to close over the whole class so the reason I mentioned this is back to knowing about performance",
    "start": "1577490",
    "end": "1583460"
  },
  {
    "text": "characteristics earlier I said to avoid potential memory problems it defines the",
    "start": "1583460",
    "end": "1589429"
  },
  {
    "text": "smallest class it can so it doesn't hold your class in memory but if you do this you're now forcing the compiler to",
    "start": "1589429",
    "end": "1596420"
  },
  {
    "text": "basically do the thing that it tried to avoid doing so good to know",
    "start": "1596420",
    "end": "1601900"
  },
  {
    "text": "all right last thing on Forex loops is yield coz yields are fun because yields",
    "start": "1601900",
    "end": "1607340"
  },
  {
    "start": "1602000",
    "end": "1687000"
  },
  {
    "text": "when you look at them they look like magic and then when you peel the curtain back they really don't anymore it's kinda disappointing because you never",
    "start": "1607340",
    "end": "1613250"
  },
  {
    "text": "get that moment back but this is an iterative method or get into the iterative method so if you haven't used",
    "start": "1613250",
    "end": "1620420"
  },
  {
    "text": "one what will happen in c-sharp conceptually is we call get ian's we get",
    "start": "1620420",
    "end": "1626929"
  },
  {
    "text": "back a 1 we do some work in this case consult at write line and then somehow we call gideon's again but we skip over",
    "start": "1626929",
    "end": "1633800"
  },
  {
    "text": "the 1 and somehow get to line 2 of that method and run that code which seems really weird so how does it work here is",
    "start": "1633800",
    "end": "1643490"
  },
  {
    "text": "our while loop I've simplified it down just using the using statement and here's our each array 2 method",
    "start": "1643490",
    "end": "1649940"
  },
  {
    "text": "so there's another helper get Ian's helper in fact well I'll show you later",
    "start": "1649940",
    "end": "1657880"
  },
  {
    "text": "so yeah so we have another helper class much like with our lambdas and we're passing in minus 2 okay",
    "start": "1658120",
    "end": "1665809"
  },
  {
    "text": "the interesting thing here to note and this is true of all for each loops get",
    "start": "1665809",
    "end": "1671210"
  },
  {
    "text": "int is only called once all right we call get into immediately called getting ready it's the enumerator that's",
    "start": "1671210",
    "end": "1677210"
  },
  {
    "text": "important numerator that we're going to deal with get into itself is only called once so I don't know maybe that's a clue",
    "start": "1677210",
    "end": "1684500"
  },
  {
    "text": "if you're really smart not only anyway let's look at our helper I'll help it implement every interface",
    "start": "1684500",
    "end": "1690110"
  },
  {
    "start": "1687000",
    "end": "1726000"
  },
  {
    "text": "because it should I guess to be fairer and it has a few fields it has a state",
    "start": "1690110",
    "end": "1696890"
  },
  {
    "text": "field which kind of spoils the fun gives the game I as a current because it's an enumerator it has a value has an initial",
    "start": "1696890",
    "end": "1703670"
  },
  {
    "text": "thread ID because we're going to do some threading although not much it's ok it has to implement some things from the",
    "start": "1703670",
    "end": "1709790"
  },
  {
    "text": "interface that's fine it has a constructor which gets the initial state which was minus two very",
    "start": "1709790",
    "end": "1717110"
  },
  {
    "text": "good and it captures the current thread has a disposed method which doesn't do",
    "start": "1717110",
    "end": "1722300"
  },
  {
    "text": "anything and it has a reset method which doesn't do anything because nobody ever calls reset and then it hasn't",
    "start": "1722300",
    "end": "1727970"
  },
  {
    "start": "1726000",
    "end": "1795000"
  },
  {
    "text": "getenumerator method which starts to get a bit oh I'm sorry I'm just like throwing all this code at you but at",
    "start": "1727970",
    "end": "1735500"
  },
  {
    "text": "least there's not many generics so get a numerator let's just talk through it so if our state is minus two which it is",
    "start": "1735500",
    "end": "1741200"
  },
  {
    "text": "and we're still on the same thread set state to zero and return ourselves otherwise if any of those conditions are",
    "start": "1741200",
    "end": "1748130"
  },
  {
    "text": "met create a new instance of ourselves or year of this type and return that so",
    "start": "1748130",
    "end": "1753230"
  },
  {
    "text": "this is another one of those little optimizations where in the best case the",
    "start": "1753230",
    "end": "1758630"
  },
  {
    "text": "compiler is trying to write code that will do the best thing so if you have an",
    "start": "1758630",
    "end": "1763760"
  },
  {
    "text": "iterative method and you call it and loop through it on the same thread and only ever do it once or only ever yeah",
    "start": "1763760",
    "end": "1771910"
  },
  {
    "text": "then you'll just use one instance of this helper but if that's not true in order to not mix up you know your each",
    "start": "1771910",
    "end": "1779300"
  },
  {
    "text": "raises arm I was pointing at three now at seven we create multiple instances so again performance it's good to know as",
    "start": "1779300",
    "end": "1786320"
  },
  {
    "text": "soon as you need to write a method you could get lots of instances of these helpers created one per thread or just",
    "start": "1786320",
    "end": "1792050"
  },
  {
    "text": "one per time it's used in your method and then we have our move next method",
    "start": "1792050",
    "end": "1797930"
  },
  {
    "start": "1795000",
    "end": "1995000"
  },
  {
    "text": "and if you didn't work it out from the state field this is the state machine so",
    "start": "1797930",
    "end": "1804130"
  },
  {
    "text": "the way you split up that method to do line one then line to then line three is you rewrite it into a switch statement",
    "start": "1804130",
    "end": "1811190"
  },
  {
    "text": "that has case in this case and in this case so move next is the method that's called lots and lots of times right",
    "start": "1811190",
    "end": "1817400"
  },
  {
    "text": "that's the one that we look through so every time move next is called another chunk of our method is executed",
    "start": "1817400",
    "end": "1822950"
  },
  {
    "text": "and we set state to point to the next one it's kind of like disappointingly",
    "start": "1822950",
    "end": "1828860"
  },
  {
    "text": "simple because yield looks so magical and obviously this gets a bit Messier",
    "start": "1828860",
    "end": "1835340"
  },
  {
    "text": "when there's other code in the mix but essentially all of the other code goes in the middle here the state variable",
    "start": "1835340",
    "end": "1840710"
  },
  {
    "text": "the state field it transitions a lot so minus one that it's fetching the next value which",
    "start": "1840710",
    "end": "1846020"
  },
  {
    "text": "in this case is just a one and then the state represents the thing and then there's other there's minus three states",
    "start": "1846020",
    "end": "1852530"
  },
  {
    "text": "you'll see there's all sorts of things but so this is essentially it's just a signature what other state machines are",
    "start": "1852530",
    "end": "1860390"
  },
  {
    "text": "in c-sharp that have moved next methods async/await so once you know how your works cuz you",
    "start": "1860390",
    "end": "1868190"
  },
  {
    "text": "can write a very simple example with yields you might feel brave enough to then go on to async/await but you have",
    "start": "1868190",
    "end": "1873200"
  },
  {
    "text": "to be very brave because it's very messy but essentially this is very similar to",
    "start": "1873200",
    "end": "1878360"
  },
  {
    "text": "yield right we're going to run some code now we're going to wait for something to happen in the yield case we knew what it",
    "start": "1878360",
    "end": "1884300"
  },
  {
    "text": "was we were going to go back here and do some whatever it's in we don't really know what's going to happen in this but essentially do some code something we",
    "start": "1884300",
    "end": "1890929"
  },
  {
    "text": "stopped executing this method and then we want to come back in and if you've ever seen an exception from an async",
    "start": "1890929",
    "end": "1896809"
  },
  {
    "text": "method the word move next appears a lot and now you know why I'm kind of",
    "start": "1896809",
    "end": "1902179"
  },
  {
    "text": "guessing that at some point someone just copied the code from you to writer and they just started working hell I woulda done it",
    "start": "1902179",
    "end": "1907400"
  },
  {
    "text": "and so our move next method and I'm not showing I think awake because that's like could be an entire talk but I'll",
    "start": "1907400",
    "end": "1912710"
  },
  {
    "text": "move next method is not dissimilar we have a state we come in we execute our",
    "start": "1912710",
    "end": "1918140"
  },
  {
    "text": "first bit of our code then well we're gonna await a task delay so we get in a waiter again as an optimization it",
    "start": "1918140",
    "end": "1926059"
  },
  {
    "text": "checks have we already finished on a task dr. lay probably not but you know you never know sometimes tasks can",
    "start": "1926059",
    "end": "1932360"
  },
  {
    "text": "finish quickly and before anything happens but if we haven't finished we said our state variable ready for the",
    "start": "1932360",
    "end": "1938300"
  },
  {
    "text": "next one we go off and do whatever magic it happens to stop this and wait here and hook up callbacks but then",
    "start": "1938300",
    "end": "1944900"
  },
  {
    "text": "essentially at some point we'll come back in to move next our states now zero we execute our second chunk of code we",
    "start": "1944900",
    "end": "1950929"
  },
  {
    "text": "do they get a waiter now this is the state bid is is interesting because if",
    "start": "1950929",
    "end": "1956540"
  },
  {
    "text": "you've ever if you ever have to debug an async method like with tools like windbg",
    "start": "1956540",
    "end": "1961940"
  },
  {
    "text": "or visually I can show you this stuff the state field is where you are up to",
    "start": "1961940",
    "end": "1969500"
  },
  {
    "text": "in this method countered by the number of await keywords starting from the top of your method going to the bottom and",
    "start": "1969500",
    "end": "1975020"
  },
  {
    "text": "so it can actually really help you like if this an exception from you know after right",
    "start": "1975020",
    "end": "1981170"
  },
  {
    "text": "line three your exceptions not coming from my async method it's gonna come from move next it's gonna come from this",
    "start": "1981170",
    "end": "1986870"
  },
  {
    "text": "whole other class but so if you can find out the state field and what value is you just go and look at all right we're",
    "start": "1986870",
    "end": "1992809"
  },
  {
    "text": "up to there so let's bring it all together hmm kind of I cheated a bit",
    "start": "1992809",
    "end": "2002170"
  },
  {
    "text": "this some more in this if you weren't convinced yet why this is interesting to",
    "start": "2002170",
    "end": "2007570"
  },
  {
    "text": "know this is some completely arbitrary and silly code but it doesn't do much it's not very exciting it's got a couple",
    "start": "2007570",
    "end": "2014410"
  },
  {
    "text": "of loops it's about ten lines code if you looked at this code and your or your",
    "start": "2014410",
    "end": "2022179"
  },
  {
    "text": "perhaps your manager looked at this code and said this is too slow or this uses too much memory or whatever improve the",
    "start": "2022179",
    "end": "2027460"
  },
  {
    "text": "performance of this code at first glance this code has one loop two loops it's",
    "start": "2027460",
    "end": "2034780"
  },
  {
    "text": "kind of it it hasn't auto by like you could find a faster sort algorithm maybe it's kind of hiding all of its",
    "start": "2034780",
    "end": "2041200"
  },
  {
    "text": "complexity but if we know what the compiler does well okay this loop that's",
    "start": "2041200",
    "end": "2046929"
  },
  {
    "text": "just gonna be a while loop that's fairly safe fairly standard we have an iterator",
    "start": "2046929",
    "end": "2052450"
  },
  {
    "text": "method though so that's going to get a helper class created we're gonna have an instance of that we might have one instance per thread if this is some high",
    "start": "2052450",
    "end": "2060128"
  },
  {
    "text": "blowed threaded console that right line app that could be a problem inside that",
    "start": "2060129",
    "end": "2066700"
  },
  {
    "text": "helper well we're gonna have a state machine that returns a one that's easy",
    "start": "2066700",
    "end": "2071878"
  },
  {
    "text": "but it also has a yield return inside another loop which I didn't cover but essentially that means that inside that",
    "start": "2071879",
    "end": "2079648"
  },
  {
    "text": "that helper class that is an enumerator it stores another enumerator which is",
    "start": "2079649",
    "end": "2084850"
  },
  {
    "text": "the one for the inner loop more importantly it's that helper class uses",
    "start": "2084850",
    "end": "2090850"
  },
  {
    "text": "this dot mean so it's gonna keep a reference to that whole class that this is all sitting in it also uses max which",
    "start": "2090850",
    "end": "2097750"
  },
  {
    "text": "is gonna get host to a field that's fine no it's not sorry it's not now it is because it has a lambda right so we're",
    "start": "2097750",
    "end": "2104770"
  },
  {
    "text": "going to get a helper class for our lambda that's going to live on our helper class for our iterator they're",
    "start": "2104770",
    "end": "2109990"
  },
  {
    "text": "both going to capture the class that the one of those things could exist per",
    "start": "2109990",
    "end": "2115410"
  },
  {
    "text": "thread and that's the one that has the other right so you can sort of start to see that all this complexity whatever",
    "start": "2115410",
    "end": "2120420"
  },
  {
    "text": "can creep into your code now that's not to say you shouldn't use these features because they're fantastic right these",
    "start": "2120420",
    "end": "2126570"
  },
  {
    "text": "are this is the reason to write C sharp and not just write IL and goto statements is because it has these",
    "start": "2126570",
    "end": "2132210"
  },
  {
    "text": "high-level functions but if you're aware of what's going on when there comes to be a problem hopefully you can make some",
    "start": "2132210",
    "end": "2140220"
  },
  {
    "text": "more interesting choices so you've done it thank you well done you survived all",
    "start": "2140220",
    "end": "2146280"
  },
  {
    "text": "the code I was going to show you or at least the PowerPoint code but where to",
    "start": "2146280",
    "end": "2151710"
  },
  {
    "text": "next because hopefully maybe you're interested in this stuff now or were before and that's why you came here",
    "start": "2151710",
    "end": "2157589"
  },
  {
    "text": "probably so there's a few few recommended things I would say if you're",
    "start": "2157589",
    "end": "2162990"
  },
  {
    "text": "brave the Roseland compiler is awesome and actually you don't even have to be that brave let me zoom across here so",
    "start": "2162990",
    "end": "2170460"
  },
  {
    "text": "this is Roselyn this is the c-sharp compiler and if we look in the Microsoft code analysis c-sharp there's a folder",
    "start": "2170460",
    "end": "2176700"
  },
  {
    "text": "here called lowering and it's not very exciting it has about eight files in it",
    "start": "2176700",
    "end": "2182490"
  },
  {
    "text": "and it has a folder for hey iterators we talked at them and lambdas we talked about them these are all called",
    "start": "2182490",
    "end": "2188280"
  },
  {
    "text": "rewriters because what happens is right none of this stuff actually rewrites your c-sharp that was a complete lie but",
    "start": "2188280",
    "end": "2195060"
  },
  {
    "text": "the compiler passes your c-sharp into a syntax tree and the rewriters rewrite",
    "start": "2195060",
    "end": "2200790"
  },
  {
    "text": "the nodes of that tree so some of them are reasonably complex like async inner areas and lambda they do a bunch of work",
    "start": "2200790",
    "end": "2206940"
  },
  {
    "text": "so they've got their own folders with classes and things but there's this folder here called local rewriter and it",
    "start": "2206940",
    "end": "2213720"
  },
  {
    "text": "has lots and lots and lots of files because lowering is used in lots and",
    "start": "2213720",
    "end": "2219480"
  },
  {
    "text": "lots places my favorite well I'm not my favorite but one of my favorites is if the if rewriter I like because I always",
    "start": "2219480",
    "end": "2227490"
  },
  {
    "text": "think of if statements as being extremely simple and I said that il could do branching which is basically an",
    "start": "2227490",
    "end": "2234270"
  },
  {
    "text": "if statement so why does it need to be rewritten so the cool thing about Rosslyn is the comments in this bit are awesome they",
    "start": "2234270",
    "end": "2240839"
  },
  {
    "text": "pretty much for every one of these there is a comment that says this code becomes and it shows you what the app that's going to and it shows you in this pseudo not",
    "start": "2240839",
    "end": "2248040"
  },
  {
    "text": "really IL but also not really see sharp thing but you can see so if condition run some code well as I said if the very",
    "start": "2248040",
    "end": "2255450"
  },
  {
    "text": "start il doesn't have blocks we can't say run this bit of code so what we have to do is flip the condition and say if",
    "start": "2255450",
    "end": "2262950"
  },
  {
    "text": "we're not running skip that bit of code right so back to branching if we look at",
    "start": "2262950",
    "end": "2269670"
  },
  {
    "text": "for each there's actually four different lowerings in here and this or this file",
    "start": "2269670",
    "end": "2277830"
  },
  {
    "text": "also got slightly more complicated since I did the slides because now it's a sinking numerable as well but this is",
    "start": "2277830",
    "end": "2282900"
  },
  {
    "text": "not a big not a big difference there but so you can see this is essentially what I had on the slides right here's our two",
    "start": "2282900",
    "end": "2288030"
  },
  {
    "text": "casts V and T because I don't know they always use single letters I never know",
    "start": "2288030",
    "end": "2294270"
  },
  {
    "text": "what they mean but if we scroll down like even the bits of it this is the bit",
    "start": "2294270",
    "end": "2299790"
  },
  {
    "text": "responsible for two lines like as you read this you kind of can get used to it eventually it's a bit weird where are we",
    "start": "2299790",
    "end": "2308210"
  },
  {
    "text": "to introduce you to do I'm just going to scape shop nope we're still in the first one to do nope uh yeah so this is a",
    "start": "2308210",
    "end": "2317850"
  },
  {
    "text": "special case for for each which for any collection that has indexing so you know",
    "start": "2317850",
    "end": "2323910"
  },
  {
    "text": "how I said for each lowest two while what turns out I'm just full of lies it also lowers to four if we have indexing",
    "start": "2323910",
    "end": "2329490"
  },
  {
    "text": "right so there's four different special well there's one general case I guess in 40 min special cases this uses iron your",
    "start": "2329490",
    "end": "2335820"
  },
  {
    "text": "bubble even less there's one for I think it's arrays and strings I can't remember",
    "start": "2335820",
    "end": "2343880"
  },
  {
    "text": "no no lower for each Oh Celia single dead dimensional array and there's one",
    "start": "2344330",
    "end": "2351570"
  },
  {
    "text": "more did you do multiracial way otherwise it strings anyway so yeah",
    "start": "2351570",
    "end": "2357650"
  },
  {
    "text": "Rozlyn is you know the source of truth for this stuff but it can be hard to read especially well here this",
    "start": "2357650",
    "end": "2367940"
  },
  {
    "text": "expression is this which is like you know six characters out to what eight",
    "start": "2367940",
    "end": "2373080"
  },
  {
    "text": "lines and some of the some of the rear and not written so verbose Lee is this",
    "start": "2373080",
    "end": "2381340"
  },
  {
    "text": "and they're just like he is a new node look and it's all backwards because you know you have to pass in the things",
    "start": "2381340",
    "end": "2387190"
  },
  {
    "text": "inside you so it's all your gonna read it backwards so it's be weird so Roslyn can be confronting your favorite",
    "start": "2387190",
    "end": "2393880"
  },
  {
    "start": "2392000",
    "end": "2678000"
  },
  {
    "text": "decompiler is an option and well that's",
    "start": "2393880",
    "end": "2399280"
  },
  {
    "text": "true Sharpe lab is my favorite decompiler although it's not technically a decompiler so sharp lab if you haven't",
    "start": "2399280",
    "end": "2405040"
  },
  {
    "text": "used it and if my oh come on this could",
    "start": "2405040",
    "end": "2410590"
  },
  {
    "text": "mean the Wi-Fi is not working II you worked so this is sharp lab sharp lab I",
    "start": "2410590",
    "end": "2417010"
  },
  {
    "text": "oh it's a lovely open source free thing written by a lovely man in New Zealand and what it does is you type in code on",
    "start": "2417010",
    "end": "2426700"
  },
  {
    "text": "the left which that's the example from my slide and it will compile your code and by default it uses the latest",
    "start": "2426700",
    "end": "2434010"
  },
  {
    "text": "c-sharp compiler but you can select whichever compiler you want including these c-sharp next things these are",
    "start": "2434010",
    "end": "2440830"
  },
  {
    "text": "actual feature branches from the Rozlyn github repository so you can test out",
    "start": "2440830",
    "end": "2445920"
  },
  {
    "text": "function pointers to your heart's content I don't even know if they'll ever make it in c-sharp but you can still compile",
    "start": "2445920",
    "end": "2452110"
  },
  {
    "text": "them but then what it does well in in one of its modes because it has a bunch",
    "start": "2452110",
    "end": "2457270"
  },
  {
    "text": "of different modes here as well but what it does is so it's compiled this code in c-sharp eight and then what it does is",
    "start": "2457270",
    "end": "2462640"
  },
  {
    "text": "it says to il spy which is what it uses to decompile it says hey can you decompile this code please I wrote it in",
    "start": "2462640",
    "end": "2468850"
  },
  {
    "text": "c-sharp one so all of the features that have been added to c-sharp 8ielts five",
    "start": "2468850",
    "end": "2474040"
  },
  {
    "text": "doesn't get to use and then it also turns off a bunch of other things so that I ask why doesn't use any of them so this is you know it's kind of as",
    "start": "2474040",
    "end": "2481990"
  },
  {
    "text": "close to raw representation as you can get it's as John says you shouldn't",
    "start": "2481990",
    "end": "2487090"
  },
  {
    "text": "trust it it's not real but then none of this is real because lowering doesn't actually happen to c-sharp it happens to bound loads on a tree but we don't read",
    "start": "2487090",
    "end": "2494200"
  },
  {
    "text": "bound nodes rather actually I think that is one of the options here yes index but so this is this is where our you know",
    "start": "2494200",
    "end": "2501310"
  },
  {
    "text": "eight line for each loop that doesn't do much turns out to actually do quite a lot of things do to do to do look see I",
    "start": "2501310",
    "end": "2508840"
  },
  {
    "text": "told you no one ever calls reset but yeah so he's out getting a numerator",
    "start": "2508840",
    "end": "2514079"
  },
  {
    "text": "he's out state machine he is where we're at Co I said there was another enumerator inside the state machine",
    "start": "2514079",
    "end": "2520500"
  },
  {
    "text": "that's s2 for those playing at home here's our actual code he is out",
    "start": "2520500",
    "end": "2526109"
  },
  {
    "text": "rewritten getting into method which creates a helper so sharp lab is awesome for looking at this sort of thing and it",
    "start": "2526109",
    "end": "2531660"
  },
  {
    "text": "shows you everything I think of I gotta go back a bit more yeah",
    "start": "2531660",
    "end": "2536670"
  },
  {
    "text": "the I think one just to if I don't really wanted me to show I think well",
    "start": "2536670",
    "end": "2542849"
  },
  {
    "text": "I'm not going to because it's horrible oh that's a good idea",
    "start": "2542849",
    "end": "2549950"
  },
  {
    "text": "so what yeah oh right sorry yes yes so",
    "start": "2550099",
    "end": "2562020"
  },
  {
    "text": "the eight but the I think the async case is particularly I want so confusing but",
    "start": "2562020",
    "end": "2567030"
  },
  {
    "text": "it's not how to read because if you look so we have our statements here we have go twos inside all these cases but then",
    "start": "2567030",
    "end": "2573030"
  },
  {
    "text": "they all flow through to this one which then jumps around within itself so yeah but basically it's we come in we do some",
    "start": "2573030",
    "end": "2581910"
  },
  {
    "text": "work we're going to await but if we've already completed then we want to just continue rather than wait to be called",
    "start": "2581910",
    "end": "2588869"
  },
  {
    "text": "back again there's kind of why jumps around but it this gets you know messy it doesn't help that all these things",
    "start": "2588869",
    "end": "2594480"
  },
  {
    "text": "have silly names but you're kind of gonna extract them out let me talk the good names in BS so sharp web is is like",
    "start": "2594480",
    "end": "2603089"
  },
  {
    "text": "I love sharp lab it can also run your code it can show I li can do a bunch of",
    "start": "2603089",
    "end": "2608940"
  },
  {
    "text": "things uh wrong way I told you ahead and use this before yeah so shop lub I think",
    "start": "2608940",
    "end": "2616950"
  },
  {
    "text": "that yes that's all yes there you go thank you",
    "start": "2616950",
    "end": "2622760"
  },
  {
    "text": "I've ruined it for myself the effort what I was going to say was the yeah the",
    "start": "2628549",
    "end": "2635869"
  },
  {
    "text": "performance thing is the reason to understand this and hopefully maybe some of you are just interested but I find",
    "start": "2635869",
    "end": "2643459"
  },
  {
    "text": "myself forever just you know if I'm writing some code don't know what it is",
    "start": "2643459",
    "end": "2648949"
  },
  {
    "text": "but there's just like at least once a week I will be curious about ah is this",
    "start": "2648949",
    "end": "2655459"
  },
  {
    "text": "the best way to do this or should I do something else and I'll go to sharp lab and I'll find out and it goes along with",
    "start": "2655459",
    "end": "2661519"
  },
  {
    "text": "you know reading the code of the dotnet framework since we now can do that there and see yo is this method implemented better or whatever and it just helps you",
    "start": "2661519",
    "end": "2668920"
  },
  {
    "text": "hopefully prevent problems would also understand them and then yeah if anyone has any questions feel free or I will",
    "start": "2668920",
    "end": "2674929"
  },
  {
    "text": "hang around cool",
    "start": "2674929",
    "end": "2680439"
  }
]