[
  {
    "text": "so welcome to this talk about escaping from WCF and embracing the brave new",
    "start": "5210",
    "end": "13340"
  },
  {
    "text": "world of GRP see why you'd want to do that how easy or difficult it's likely",
    "start": "13340",
    "end": "20990"
  },
  {
    "text": "to be and various other bits and pieces I am mark Rendell you may remember me",
    "start": "20990",
    "end": "28009"
  },
  {
    "text": "from very stupid talks and some",
    "start": "28009",
    "end": "33110"
  },
  {
    "text": "technical talks that went quite well but at the moment so Microsoft when they",
    "start": "33110",
    "end": "40490"
  },
  {
    "text": "announced this last year that WCF was going away I somehow got involved and",
    "start": "40490",
    "end": "46360"
  },
  {
    "text": "then I ended up writing a book on how to migrate from WCF to gr PC which you can",
    "start": "46360",
    "end": "51710"
  },
  {
    "text": "get on the website on Microsoft's website and I've started building a tool to do it as well it's not a marketing",
    "start": "51710",
    "end": "59270"
  },
  {
    "text": "session for the toll I'm not going to show you it I'm not going to demonstrate it all I am gonna say is that everything",
    "start": "59270",
    "end": "66140"
  },
  {
    "text": "I show you it will do automatically with two clicks so just bear that in mind so",
    "start": "66140",
    "end": "72500"
  },
  {
    "text": "here we are at the start of 2020 don't make all three point one is out that's a",
    "start": "72500",
    "end": "77630"
  },
  {
    "text": "long term service release and the future of Dom net looks like this so we have",
    "start": "77630",
    "end": "84740"
  },
  {
    "text": "dotnet core 3.1 that came out in November 2019 then version 5 will be out",
    "start": "84740",
    "end": "91970"
  },
  {
    "text": "this November and don't net 5 so it's not dotnet core 4 because that would be",
    "start": "91970",
    "end": "98420"
  },
  {
    "text": "too confusing yeah it's donate 5 because everybody",
    "start": "98420",
    "end": "106790"
  },
  {
    "text": "understands what that means it means donek 4 is dead and you should stop",
    "start": "106790",
    "end": "111799"
  },
  {
    "text": "using it and Microsoft would really really like it if you stopped using it because then they could take all the",
    "start": "111799",
    "end": "116990"
  },
  {
    "text": "developers that make the patch is to do with time zones changing I think that's",
    "start": "116990",
    "end": "122630"
  },
  {
    "text": "the only reason they change dotnet for now is that someone moves a time zone but yes don't make 5 it's mono it's",
    "start": "122630",
    "end": "131239"
  },
  {
    "text": "dotnet core is xamarin it's the whole stack moving forward and then once a",
    "start": "131239",
    "end": "137810"
  },
  {
    "text": "year in November every year we'll get a new dotnet release oh that's what Microsoft",
    "start": "137810",
    "end": "146450"
  },
  {
    "text": "claimed and so don't met past we have",
    "start": "146450",
    "end": "151730"
  },
  {
    "text": "things that have been brought across to dotnet v and dotnet three point what",
    "start": "151730",
    "end": "157160"
  },
  {
    "text": "call three point one not confusing at all but we have things that are not being brought across a WPF and windows",
    "start": "157160",
    "end": "164510"
  },
  {
    "text": "forms are both in dotnet core 3.1 only if you run it on Windows because",
    "start": "164510",
    "end": "171740"
  },
  {
    "text": "Microsoft but they're there and they work and Microsoft will continue to",
    "start": "171740",
    "end": "178100"
  },
  {
    "text": "support those until they convince everyone that the best way to make desktop applications is blazer and run",
    "start": "178100",
    "end": "186170"
  },
  {
    "text": "it in electron or something they don't think so things that are not going into",
    "start": "186170",
    "end": "194120"
  },
  {
    "text": "dotnet core and dotnet 5 web forms is not making it across and you're supposed",
    "start": "194120",
    "end": "201050"
  },
  {
    "text": "to use blazer instead so as anyone who's going to blazer talks or has been to a",
    "start": "201050",
    "end": "207800"
  },
  {
    "text": "blazer talk it looks quite good at the moment it's it looks the server-side",
    "start": "207800",
    "end": "213950"
  },
  {
    "text": "blazer thing I'm just kind of that can't be right I thought viewstate was bad we're just",
    "start": "213950",
    "end": "221150"
  },
  {
    "text": "going to keep an open signal our connection further yet but blazer webassembly looks quite exciting I quite",
    "start": "221150",
    "end": "228530"
  },
  {
    "text": "like the idea that blazer webassembly they download a web assembly version of",
    "start": "228530",
    "end": "235780"
  },
  {
    "text": "technically the mono runtime and then they just download dll's like il dll's and they run them in the",
    "start": "235780",
    "end": "243200"
  },
  {
    "text": "browser and so I'm thinking if that's the mono runtime then does that include",
    "start": "243200",
    "end": "249019"
  },
  {
    "text": "Manos implementation of system dot web and if it does can we download that into",
    "start": "249019",
    "end": "254959"
  },
  {
    "text": "the browser and compile our web forms applications to dll's and then download the web forms dll's",
    "start": "254959",
    "end": "262430"
  },
  {
    "text": "into the browser and actually run web forms inside blazer",
    "start": "262430",
    "end": "268159"
  },
  {
    "text": "and I'm actually has somebody already done that and that's what we're all",
    "start": "268159",
    "end": "274560"
  },
  {
    "text": "living in the universe is actually just this is a side-effect of someone running",
    "start": "274560",
    "end": "279960"
  },
  {
    "text": "a web forms in a browser in a higher existence so yes if you've got millions",
    "start": "279960",
    "end": "287430"
  },
  {
    "text": "of lines of web forms that you need support to Blaser I'm sorry there's",
    "start": "287430",
    "end": "294150"
  },
  {
    "text": "really nothing you can do it well that WCF is not coming across and that's what we're going to talk about now too",
    "start": "294150",
    "end": "301129"
  },
  {
    "text": "switching to gr PC which is Microsoft's recommendation and then this workflow foundation hands up who used workflow",
    "start": "301129",
    "end": "307770"
  },
  {
    "text": "foundation okay I swear to god I've done",
    "start": "307770",
    "end": "313020"
  },
  {
    "text": "this talk half a dozen times that's the first time I've seen hands",
    "start": "313020",
    "end": "318110"
  },
  {
    "text": "Wow workflow foundation is actually getting an open source port full",
    "start": "318110",
    "end": "324240"
  },
  {
    "text": "disclosure so is WCF but w CF s-- open source port is gonna be a lot more",
    "start": "324240",
    "end": "331259"
  },
  {
    "text": "challenging for them to implement properly and by the time you get to things like MSM cube bindings well",
    "start": "331259",
    "end": "338819"
  },
  {
    "text": "that's going away and distributed transaction controllers good luck",
    "start": "338819",
    "end": "344639"
  },
  {
    "text": "getting networking in a kubernetes cluster but workflow foundation relies less on those things and so there is an",
    "start": "344639",
    "end": "350669"
  },
  {
    "text": "open source port of that so WCF specifically WCF had it was incredibly",
    "start": "350669",
    "end": "360060"
  },
  {
    "text": "flexible and one of the main reasons that dotnet development teams adopted",
    "start": "360060",
    "end": "365219"
  },
  {
    "text": "WCF back in 2008 2009 was because everybody was doing soap soap over HTTP",
    "start": "365219",
    "end": "373169"
  },
  {
    "text": "because that's the solution to distributed systems engineering it's to",
    "start": "373169",
    "end": "378690"
  },
  {
    "text": "wrap a single digit in two kilobytes of namespace infested XML",
    "start": "378690",
    "end": "386900"
  },
  {
    "text": "so that you can send it over the wire to a client that's been generated from yet",
    "start": "387330",
    "end": "393970"
  },
  {
    "text": "another big pile of namespace infested XML and you could do all this just by",
    "start": "393970",
    "end": "400330"
  },
  {
    "text": "writing a simple class and about four hundred lines of namespace infested XML",
    "start": "400330",
    "end": "405790"
  },
  {
    "text": "we loved XML back in the back in the 2000 was didn't we I was the best but",
    "start": "405790",
    "end": "412390"
  },
  {
    "text": "the great thing if you use WCF with soap over HTTP then it could play nicely with",
    "start": "412390",
    "end": "418270"
  },
  {
    "text": "other platforms it could talk to Java or it could talk to Python there weren't other platforms apart from those too I",
    "start": "418270",
    "end": "424690"
  },
  {
    "text": "don't think did Ruby ever do soap could you write let probably but yes if you",
    "start": "424690",
    "end": "432850"
  },
  {
    "text": "wanted to interoperate with other systems then soap WCF was very good for",
    "start": "432850",
    "end": "438040"
  },
  {
    "text": "that the basic HTTP binding and then you had WCF with net tcp and net tcp opened",
    "start": "438040",
    "end": "446020"
  },
  {
    "text": "a TCP connection on HTTP connection just a raw socket connection and you had a",
    "start": "446020",
    "end": "451450"
  },
  {
    "text": "dotnet application at one end and a dotnet application at the other end and they could talk to each other and have",
    "start": "451450",
    "end": "457330"
  },
  {
    "text": "asynchronous conversations and it was a binary protocol and very very efficient",
    "start": "457330",
    "end": "462760"
  },
  {
    "text": "and incredibly fast and you could stream things in both directions at the same",
    "start": "462760",
    "end": "467860"
  },
  {
    "text": "time the problem with net TCP Microsoft",
    "start": "467860",
    "end": "473500"
  },
  {
    "text": "very optimistically said here is the specification for net TCP Java people",
    "start": "473500",
    "end": "480520"
  },
  {
    "text": "would you like to implement that in Java so that you could talk to our net TCP services and the Java people when know",
    "start": "480520",
    "end": "489000"
  },
  {
    "text": "so if you used net TCP it was a dotnet application talking to a dotnet",
    "start": "489000",
    "end": "494650"
  },
  {
    "text": "application at which point you might as well use dotnet remoting so and of",
    "start": "494650",
    "end": "502030"
  },
  {
    "text": "course the configuration feed",
    "start": "502030",
    "end": "508200"
  },
  {
    "text": "I hated configuring WCF I absolutely hated it because they didn't have like",
    "start": "508200",
    "end": "514710"
  },
  {
    "text": "decent functioning intellisense for the xml at the time cuz that's quite",
    "start": "514710",
    "end": "520530"
  },
  {
    "text": "difficult to do and you couldn't configure it in cut these days we can do configuration in code and you just have",
    "start": "520530",
    "end": "526980"
  },
  {
    "text": "like action callbacks that pass in builder objects and you set properties on them and then it just magically",
    "start": "526980",
    "end": "532800"
  },
  {
    "text": "happens but no XML it's XML all the way down and so now Microsoft are saying",
    "start": "532800",
    "end": "541800"
  },
  {
    "text": "we're not supporting WCF moving forward WCF is not coming do not make call get",
    "start": "541800",
    "end": "547170"
  },
  {
    "text": "over it and my grades to GRP see who makes G RPC Google what does the G in G",
    "start": "547170",
    "end": "556260"
  },
  {
    "text": "RPC stand for currently anything but Google according to google it stands for",
    "start": "556260",
    "end": "563670"
  },
  {
    "text": "glamorous I think was was won every time they release a new update to it they changed what the G stands for it's just",
    "start": "563670",
    "end": "570330"
  },
  {
    "text": "never Google that's why it's a lowercase G so you know it's not Google but G RPC",
    "start": "570330",
    "end": "576660"
  },
  {
    "text": "essentially is an attempt to solve the same problem that WCF attempted to solve",
    "start": "576660",
    "end": "582540"
  },
  {
    "text": "which is of course remote procedure calls G RPC is based on protoboys so",
    "start": "582540",
    "end": "587820"
  },
  {
    "text": "protobuf existed first and protobuf is google's serialization framework and",
    "start": "587820",
    "end": "594270"
  },
  {
    "text": "format and specification and with protobuf you create a file that",
    "start": "594270",
    "end": "600840"
  },
  {
    "text": "describes your data object and then you use a file compiler that generates",
    "start": "600840",
    "end": "610050"
  },
  {
    "text": "Python or Java or C++ or net or you can even these days even though it's all",
    "start": "610050",
    "end": "618090"
  },
  {
    "text": "still the JVM you can get different compilers that compile it to scholar or Kotlin or closure but yes it generates",
    "start": "618090",
    "end": "627300"
  },
  {
    "text": "these stubs that mean everything can talk this same language it's also",
    "start": "627300",
    "end": "633060"
  },
  {
    "text": "incredibly small over the network minimal possible size and very very fast",
    "start": "633060",
    "end": "639690"
  },
  {
    "text": "to serialize and deserialize so the CPU time involved in decoding and encoding is also very low as well as the",
    "start": "639690",
    "end": "647690"
  },
  {
    "text": "network latency and it's really quite simple it's it's very straightforward",
    "start": "647690",
    "end": "654810"
  },
  {
    "text": "and quite limited in some ways but incredibly powerfully in other ways so",
    "start": "654810",
    "end": "662100"
  },
  {
    "text": "then on top of this they built G our PC they had an internal project called stubby which was their own RPC framework",
    "start": "662100",
    "end": "670260"
  },
  {
    "text": "and stubby had some very very hairy C and C++ code in there and they",
    "start": "670260",
    "end": "676410"
  },
  {
    "text": "distributed it as a as a linked library and that could be used by their",
    "start": "676410",
    "end": "682950"
  },
  {
    "text": "plaything stuff and their Java stuff and their C++ stuff but it was really very",
    "start": "682950",
    "end": "688440"
  },
  {
    "text": "Google specific if there were ever any problems with it they just hacked more",
    "start": "688440",
    "end": "693900"
  },
  {
    "text": "lines of code into it to fix that problem for that particular user and it had become unmanageable and then HTTP 2",
    "start": "693900",
    "end": "700950"
  },
  {
    "text": "came along or rather quick no not quick what was it speedy speedy came along",
    "start": "700950",
    "end": "706500"
  },
  {
    "text": "which was Google's attempt to improve HTTP and then speedy became HTTP 2 and",
    "start": "706500",
    "end": "712950"
  },
  {
    "text": "everyone adopted it and that was cool and then they went actually HTTP 2 does",
    "start": "712950",
    "end": "719040"
  },
  {
    "text": "most of the complicated stuff that stubby does in terms of framing and duplexing and streaming and everything",
    "start": "719040",
    "end": "725940"
  },
  {
    "text": "else let's rewrite stubby over the top of HTTP 2 and so they did that and",
    "start": "725940",
    "end": "732060"
  },
  {
    "text": "called it G RPC and it works exactly the same as protobuf so you gently describe",
    "start": "732060",
    "end": "738480"
  },
  {
    "text": "your service in a dot proto file and then you use the compiler and it",
    "start": "738480",
    "end": "743820"
  },
  {
    "text": "generates source code in whatever language you ask it to and then you just",
    "start": "743820",
    "end": "749010"
  },
  {
    "text": "implement the services and it creates clients for other services and everything else so with G RPC we get",
    "start": "749010",
    "end": "758910"
  },
  {
    "text": "because it's a binary format we get the benefits of net TCP style performance",
    "start": "758910",
    "end": "764430"
  },
  {
    "text": "and because HTTP 2 supports multiplexing",
    "start": "764430",
    "end": "769590"
  },
  {
    "text": "connections you're doing a brilliant job that sign language for multiplexing but yes",
    "start": "769590",
    "end": "779730"
  },
  {
    "text": "and bi-directional streaming and everything else so it can do everything",
    "start": "779730",
    "end": "785010"
  },
  {
    "text": "that net TCP can do but it supports more platforms and frameworks and languages",
    "start": "785010",
    "end": "792000"
  },
  {
    "text": "than were ever able to talk soap it's quite a lot of them are officially",
    "start": "792000",
    "end": "797790"
  },
  {
    "text": "supported but then there are unofficial implementations for more cutting-edge",
    "start": "797790",
    "end": "803279"
  },
  {
    "text": "things like rust has a gr PC compiler implementation so you get the benefit of",
    "start": "803279",
    "end": "808920"
  },
  {
    "text": "soap and interoperability but without XML and you get the benefit of net TCP",
    "start": "808920",
    "end": "815040"
  },
  {
    "text": "but your clients and servers can be all different platforms and languages here's",
    "start": "815040",
    "end": "822540"
  },
  {
    "text": "a list of everything that G RPC supports dotnet Java Python Dart",
    "start": "822540",
    "end": "829320"
  },
  {
    "text": "so if you're doing flutter then you can create a gene RPC client for your",
    "start": "829320",
    "end": "834360"
  },
  {
    "text": "flutter application in Dart elixir and Erlang separately and so if you're",
    "start": "834360",
    "end": "842040"
  },
  {
    "text": "creating telephone switchboards that need G RPC you can do that Haskell because high school programmers",
    "start": "842040",
    "end": "849810"
  },
  {
    "text": "haven't got anything real to write so they just run around looking for projects to do the one thing so it",
    "start": "849810",
    "end": "859769"
  },
  {
    "text": "supports JavaScript but only in node because it's actually a wrapper around",
    "start": "859769",
    "end": "865320"
  },
  {
    "text": "the G RPC native library it doesn't",
    "start": "865320",
    "end": "871860"
  },
  {
    "text": "directly support the web browser because the web browser the HTTP to",
    "start": "871860",
    "end": "877920"
  },
  {
    "text": "implementation you don't have enough control over it from JavaScript to do the things that gr PC wants to do with",
    "start": "877920",
    "end": "886829"
  },
  {
    "text": "HTTP to solution to that was to create a",
    "start": "886829",
    "end": "892140"
  },
  {
    "text": "tiny little proxy service that you could run on the same machine or in the same local network as your g RPC service that",
    "start": "892140",
    "end": "901079"
  },
  {
    "text": "would then expose it as WebSockets i think and then your browser application could",
    "start": "901079",
    "end": "907619"
  },
  {
    "text": "connect to that and talk to that over WebSockets or HTTP and it would pass",
    "start": "907619",
    "end": "912990"
  },
  {
    "text": "proxy the messages on which is quite cool and you know if you really need to",
    "start": "912990",
    "end": "919230"
  },
  {
    "text": "be able to talk to it from the browser then that's a great solution I literally saw this on Monday as I was finishing",
    "start": "919230",
    "end": "927300"
  },
  {
    "text": "off the prep for this talk and James Newton King who works on the G RPC for",
    "start": "927300",
    "end": "934860"
  },
  {
    "text": "asp net core implementation they've got an experimental thing which they have",
    "start": "934860",
    "end": "940769"
  },
  {
    "text": "released as a NuGet package which does the G RPC web protocol natively inside",
    "start": "940769",
    "end": "949379"
  },
  {
    "text": "your asp net called g RPC application so you don't need that additional process",
    "start": "949379",
    "end": "955050"
  },
  {
    "text": "so it'll run the G RPC service but it will also run that proxy in the same",
    "start": "955050",
    "end": "960929"
  },
  {
    "text": "process so that your browser applications can connect to it as well so you don't need that proxy server",
    "start": "960929",
    "end": "966679"
  },
  {
    "text": "running for your web stuff having that chance to play with it yet but it looks quite cool and if it does work it will",
    "start": "966679",
    "end": "973110"
  },
  {
    "text": "be brilliant so asp net cord g RPC you've actually",
    "start": "973110",
    "end": "979620"
  },
  {
    "text": "been able to do G RPC and donate for a very long time there is an official first party implementation it's been",
    "start": "979620",
    "end": "986970"
  },
  {
    "text": "supported by the Google team that works on G RPC for years but it is a bunch of",
    "start": "986970",
    "end": "993029"
  },
  {
    "text": "pea invoke wrappers over the G RPC native library that's written in C and",
    "start": "993029",
    "end": "998850"
  },
  {
    "text": "that comes with all the overhead of P",
    "start": "998850",
    "end": "1003949"
  },
  {
    "text": "invoke and marshaling and everything else that goes on with that sort of thing Microsoft wanted a fully managed",
    "start": "1003949",
    "end": "1010939"
  },
  {
    "text": "implementation that would play nicely with the rest of the asp net core hosting model things like dependency",
    "start": "1010939",
    "end": "1017839"
  },
  {
    "text": "injection and kestrel and all that sort of stuff and so they said hey let's",
    "start": "1017839",
    "end": "1024260"
  },
  {
    "text": "write our own implementation of G RPC but because this is 2020s Microsoft and",
    "start": "1024260",
    "end": "1030829"
  },
  {
    "text": "not 2010's Microsoft they're actually doing it in the G RPC github organization so this is Microsoft",
    "start": "1030829",
    "end": "1038480"
  },
  {
    "text": "getting code 2g RPC which makes asp net core do it so it's a fully managed",
    "start": "1038480",
    "end": "1045620"
  },
  {
    "text": "implementation part of the GRP see it's maintained by Microsoft people including James Newton King who did Jason net so",
    "start": "1045620",
    "end": "1054830"
  },
  {
    "text": "you know he's quite good at the serialization stuff it runs on the Kestrel HTTP server which means it is",
    "start": "1054830",
    "end": "1061790"
  },
  {
    "text": "ridiculously fast like 99.99999% as fast",
    "start": "1061790",
    "end": "1066890"
  },
  {
    "text": "as the fastest web server in the world and there's also a client generator and",
    "start": "1066890",
    "end": "1073040"
  },
  {
    "text": "the client-side uses HTTP client which is also got bonkers fast over the last",
    "start": "1073040",
    "end": "1079010"
  },
  {
    "text": "couple of races of dotnet call setting it up in your asp net core application",
    "start": "1079010",
    "end": "1087799"
  },
  {
    "text": "it's literally just adding a couple more things to startup so we say services",
    "start": "1087799",
    "end": "1093530"
  },
  {
    "text": "don't add GRP see if I've done yes I have services don't add G RPC hooks it",
    "start": "1093530",
    "end": "1100760"
  },
  {
    "text": "up as long as you've created the application with GRP C libraries",
    "start": "1100760",
    "end": "1106340"
  },
  {
    "text": "referenced and then in configure we have endpoints map G RPC service portfolio",
    "start": "1106340",
    "end": "1113150"
  },
  {
    "text": "service that's that's basically it that's now hooked up your G RPC service",
    "start": "1113150",
    "end": "1119590"
  },
  {
    "text": "you can add other endpoints in there you can have an MVC application or a razor",
    "start": "1119590",
    "end": "1125090"
  },
  {
    "text": "pages application or just standard endpoints map get map put and that sort",
    "start": "1125090",
    "end": "1132320"
  },
  {
    "text": "of thing in the same application you shouldn't but you can what you'll",
    "start": "1132320",
    "end": "1138530"
  },
  {
    "text": "actually see if you sort of do dotnet new G RPC is they say map the T RPC",
    "start": "1138530",
    "end": "1145100"
  },
  {
    "text": "service and then just put an HTTP GET that catches any HTTP request after it",
    "start": "1145100",
    "end": "1151429"
  },
  {
    "text": "that says this is a G RPC server stop trying to access it from your browser so yes that's that's basically",
    "start": "1151429",
    "end": "1160760"
  },
  {
    "text": "it to create your actual to say I need this",
    "start": "1160760",
    "end": "1167419"
  },
  {
    "text": "service and it does this thing and this is what my the stuff that you would have done with service contracts and data",
    "start": "1167419",
    "end": "1172789"
  },
  {
    "text": "contracts and operation contracts and data members and everything else we now have the dot prototype file so we use",
    "start": "1172789",
    "end": "1179570"
  },
  {
    "text": "that to describe our service and then the build process and this is included",
    "start": "1179570",
    "end": "1186169"
  },
  {
    "text": "in the MS build process so Visual Studio will just run it in the background or it",
    "start": "1186169",
    "end": "1193789"
  },
  {
    "text": "will happen when you do the build on your continuous integration server and then you derive from the generated class",
    "start": "1193789",
    "end": "1202129"
  },
  {
    "text": "and override some methods and that's where you put your actual implementation",
    "start": "1202129",
    "end": "1208009"
  },
  {
    "text": "so it's a bit different from WCF WCF you created an interface and decorated it",
    "start": "1208009",
    "end": "1213649"
  },
  {
    "text": "with the attributes and that was in c-sharp and then you implemented the interface using another class or",
    "start": "1213649",
    "end": "1222379"
  },
  {
    "text": "whatever else and then it would generate the WSDL file for other people who",
    "start": "1222379",
    "end": "1229519"
  },
  {
    "text": "wanted to consume your service and they could generate their client from that WSDL file here we effectively handwrite",
    "start": "1229519",
    "end": "1237830"
  },
  {
    "text": "the WSDL file that's what the proto file is is the description of the service don't worry it's much simpler than WSDL",
    "start": "1237830",
    "end": "1247279"
  },
  {
    "text": "then they won't ever hand written a WSDL file there's always one respect so yes",
    "start": "1247279",
    "end": "1257360"
  },
  {
    "text": "you write that file but it's it's like code and then you derive from the class",
    "start": "1257360",
    "end": "1264559"
  },
  {
    "text": "that it generates for you in c-sharp this is a prototype file this is very",
    "start": "1264559",
    "end": "1272690"
  },
  {
    "text": "very simple it's got an option with a c-sharp namespace you can have all sorts of options in your profile for different",
    "start": "1272690",
    "end": "1281840"
  },
  {
    "text": "platforms so if somebody else who's not using c-sharp compiles this to java then",
    "start": "1281840",
    "end": "1288019"
  },
  {
    "text": "it will just ignore that c-sharp namespace and if you get a profile from somebody else you'll probably see a",
    "start": "1288019",
    "end": "1293960"
  },
  {
    "text": "whole bunch of options related to the code Jennifer other platforms that you don't care about the package name that's",
    "start": "1293960",
    "end": "1301640"
  },
  {
    "text": "important that becomes part of the URL for the service and then you have the service and you have our pcs and an RPC",
    "start": "1301640",
    "end": "1310880"
  },
  {
    "text": "has a name that takes an object and returns another object and that's",
    "start": "1310880",
    "end": "1316820"
  },
  {
    "text": "basically it and then you have your message definitions which look like this so we",
    "start": "1316820",
    "end": "1323390"
  },
  {
    "text": "have a portfolio message and a portfolio item message and protobuf supports a set",
    "start": "1323390",
    "end": "1334340"
  },
  {
    "text": "of data types and natively and it doesn't support any other data types",
    "start": "1334340",
    "end": "1341230"
  },
  {
    "text": "natively but it's quite extensible and so there are ways of creating more",
    "start": "1341230",
    "end": "1348020"
  },
  {
    "text": "complex types but in 32 is just a 32-bit",
    "start": "1348020",
    "end": "1353930"
  },
  {
    "text": "integer there is also u int 32 for an unsigned 32-bit integer and there's s",
    "start": "1353930",
    "end": "1361190"
  },
  {
    "text": "int 32 for a signed 32-bit integer because of course you need int 32 is",
    "start": "1361190",
    "end": "1368930"
  },
  {
    "text": "also signed but if you know that your number is going to have a lot of negative values then you should use s",
    "start": "1368930",
    "end": "1374960"
  },
  {
    "text": "int 32 because the encoding is more efficient if there think yeah we have",
    "start": "1374960",
    "end": "1381650"
  },
  {
    "text": "double we have string byte arrays we",
    "start": "1381650",
    "end": "1389600"
  },
  {
    "text": "don't have arrays we just have the repeated keyword and that will in c-sharp that will generate a collection",
    "start": "1389600",
    "end": "1395540"
  },
  {
    "text": "for you of type portfolio item and then the other thing you'll notice oh my",
    "start": "1395540",
    "end": "1400690"
  },
  {
    "text": "field names are wrong here I've used camelcase this is from some old code that should be snake underscore",
    "start": "1400690",
    "end": "1409250"
  },
  {
    "text": "Train case according to the G RPC standards",
    "start": "1409250",
    "end": "1414940"
  },
  {
    "text": "yes the last thing is on the end you see there is a number by each one of those",
    "start": "1417070",
    "end": "1423520"
  },
  {
    "text": "fields and that is very important that number identifies that field in the",
    "start": "1423520",
    "end": "1431590"
  },
  {
    "text": "binary protocol so it doesn't put the name in it puts the number a actually",
    "start": "1431590",
    "end": "1436660"
  },
  {
    "text": "combines the field number with another number that represents the type into a",
    "start": "1436660",
    "end": "1442240"
  },
  {
    "text": "single byte if it can the first 15",
    "start": "1442240",
    "end": "1448360"
  },
  {
    "text": "fields encode one byte smaller than all the other fields but that number says",
    "start": "1448360",
    "end": "1457740"
  },
  {
    "text": "the first field in portfolio the number one field in portfolio will always be a",
    "start": "1457740",
    "end": "1463330"
  },
  {
    "text": "32-bit integer and specifically that type of 32-bit integer and it will",
    "start": "1463330",
    "end": "1471070"
  },
  {
    "text": "always be used for the ID if you change your object then you can add more fields",
    "start": "1471070",
    "end": "1478210"
  },
  {
    "text": "and you can remove existing fields that",
    "start": "1478210",
    "end": "1483550"
  },
  {
    "text": "you reserved the number and this means that no matter how your service evolves",
    "start": "1483550",
    "end": "1489750"
  },
  {
    "text": "theoretically it should always be possible for an older version of the client to talk to a newer version of the",
    "start": "1489750",
    "end": "1496450"
  },
  {
    "text": "server and even for a newer version of the server to talk to an older version of the client so those field numbers are",
    "start": "1496450",
    "end": "1503080"
  },
  {
    "text": "incredibly important and very useful one",
    "start": "1503080",
    "end": "1509260"
  },
  {
    "text": "more thing which I know it's going to please everybody in the room who cares about money protobuf doesn't have a",
    "start": "1509260",
    "end": "1516430"
  },
  {
    "text": "decimal type it has double yeah I know now the thing is that's",
    "start": "1516430",
    "end": "1526010"
  },
  {
    "text": "actually okay because if you turn a decimal into a double its serializes",
    "start": "1526010",
    "end": "1532910"
  },
  {
    "text": "fine it maintains that value absolutely fine and if you then turn it back into a decimal at the other end it's not going",
    "start": "1532910",
    "end": "1539900"
  },
  {
    "text": "to randomly change it that's not the problem the problem is where someone pulls down",
    "start": "1539900",
    "end": "1545420"
  },
  {
    "text": "your repeated portfolio item items and then runs a link aggregation over the",
    "start": "1545420",
    "end": "1551960"
  },
  {
    "text": "generated protobuf class which has got a double in it and says what is five times four point nine nine and of course as we",
    "start": "1551960",
    "end": "1559280"
  },
  {
    "text": "all know that's twenty-four point nine four nine nine nine nine nine nine nine nine nine nine nine nine nine eight nine",
    "start": "1559280",
    "end": "1565779"
  },
  {
    "text": "bigger cities so but you can create your own decimal type quite easily",
    "start": "1567100",
    "end": "1573919"
  },
  {
    "text": "you just need units and menos basically so that's quite easy so here is what the",
    "start": "1573919",
    "end": "1581240"
  },
  {
    "text": "implementation looks like the protobuf compiler or msbuild in our case has",
    "start": "1581240",
    "end": "1588049"
  },
  {
    "text": "generated a portfolios portfolios base class for us and that declares virtual",
    "start": "1588049",
    "end": "1596540"
  },
  {
    "text": "methods for all the methods we declared in a proto file in this instance get and",
    "start": "1596540",
    "end": "1603610"
  },
  {
    "text": "our methods the base class method takes",
    "start": "1603610",
    "end": "1609110"
  },
  {
    "text": "a get request and also a server call context which is gr pcs equivalent of HTTP context and it has useful",
    "start": "1609110",
    "end": "1616400"
  },
  {
    "text": "information about things like authentication and it returns a task of",
    "start": "1616400",
    "end": "1621470"
  },
  {
    "text": "get response it's always asynchronous because it should be",
    "start": "1621470",
    "end": "1626650"
  },
  {
    "text": "it will only ever take one parameter so you can't have multiple parameters to an",
    "start": "1626650",
    "end": "1632390"
  },
  {
    "text": "RPC if you have multiple parameters you wrap them up into an object and it will",
    "start": "1632390",
    "end": "1638240"
  },
  {
    "text": "always return a message so you have to declare a message type for it to return",
    "start": "1638240",
    "end": "1644030"
  },
  {
    "text": "you can't just return an int you have to wrap that int in a message over the wire",
    "start": "1644030",
    "end": "1650150"
  },
  {
    "text": "that doesn't really do anything but it's there are very good reasons for",
    "start": "1650150",
    "end": "1655879"
  },
  {
    "text": "this mainly to do with forward and backward compatibility so by only taking",
    "start": "1655879",
    "end": "1661100"
  },
  {
    "text": "that message type as a parameter it's impossible to break the interface as long as you don't break that message",
    "start": "1661100",
    "end": "1668119"
  },
  {
    "text": "which as long as you keep your field numbers in line you will never do if you change the parameter list for a WCF",
    "start": "1668119",
    "end": "1674539"
  },
  {
    "text": "contract method that's it all those generated clients out there won't work and if you're using net TCP bindings",
    "start": "1674539",
    "end": "1681139"
  },
  {
    "text": "good luck decoding those error messages equally you have to also have to return",
    "start": "1681139",
    "end": "1688340"
  },
  {
    "text": "a response there's no such thing as a void RPC it has to return a response that response can be empty and quite",
    "start": "1688340",
    "end": "1695809"
  },
  {
    "text": "often it will be empty if you don't care there's no information to come back you return an empty response but again if at",
    "start": "1695809",
    "end": "1703279"
  },
  {
    "text": "some point in the future you suddenly went you know what it would be quite easy quite useful to get the number of",
    "start": "1703279",
    "end": "1708679"
  },
  {
    "text": "rows that are updated in the database back from that method so you add a field",
    "start": "1708679",
    "end": "1713929"
  },
  {
    "text": "to that response object and again you haven't broken binary compatibility with",
    "start": "1713929",
    "end": "1719239"
  },
  {
    "text": "existing clients oh yeah gooood there's no type for guiit in",
    "start": "1719239",
    "end": "1726129"
  },
  {
    "text": "protobuf or UUID fun thing though when",
    "start": "1726129",
    "end": "1732529"
  },
  {
    "text": "you come to convert your or try and represent your gooood in a proto file",
    "start": "1732529",
    "end": "1738759"
  },
  {
    "text": "you might be tempted as I was to represent it as a byte array because of",
    "start": "1738759",
    "end": "1744229"
  },
  {
    "text": "gooood is a byte array yes that's absolutely fine and then send that over to someone else and then a Java",
    "start": "1744229",
    "end": "1751279"
  },
  {
    "text": "programmer will get that byte array and put it through Java's optimized gooood",
    "start": "1751279",
    "end": "1756799"
  },
  {
    "text": "byte parser which converts it into multiple Long's using a different Indian",
    "start": "1756799",
    "end": "1763220"
  },
  {
    "text": "Miss from c-sharp and you just get a completely different gooood that comes",
    "start": "1763220",
    "end": "1768259"
  },
  {
    "text": "out at the other end the really fun thing is when it C realizes it back again and sends it back to c-sharp it doesn't even come out as the gooood that",
    "start": "1768259",
    "end": "1775669"
  },
  {
    "text": "gets eesh it doesn't just know anyway so goo it's just use strings everything",
    "start": "1775669",
    "end": "1782299"
  },
  {
    "text": "understands gooood notation strings or UUID notations brings outside of our little dotnet",
    "start": "1782299",
    "end": "1788780"
  },
  {
    "text": "bubble which is why that says trader ID must be a UUID so G RPC has several",
    "start": "1788780",
    "end": "1799040"
  },
  {
    "text": "modes that it supports and they map fairly well to WCF and I'm going to show",
    "start": "1799040",
    "end": "1807080"
  },
  {
    "text": "some code examples in a minute of first a simple request reply service so WCF",
    "start": "1807080",
    "end": "1814040"
  },
  {
    "text": "basic HTTP binding the sort of thing you would just do soap you pass a request it",
    "start": "1814040",
    "end": "1820130"
  },
  {
    "text": "returns a response and that's the simplest G RPC thing you pass a request it returns a response WCF with certain",
    "start": "1820130",
    "end": "1828890"
  },
  {
    "text": "bindings if you returned an ienumerable from your operation contract method it",
    "start": "1828890",
    "end": "1836150"
  },
  {
    "text": "could stream those items so it would send the first one as soon as it was ready and then they would stream over",
    "start": "1836150",
    "end": "1842150"
  },
  {
    "text": "one at a time worked very well with net TCP binding didn't work at all with some",
    "start": "1842150",
    "end": "1847940"
  },
  {
    "text": "of the other bindings G RPC can return a stream from the server which you can",
    "start": "1847940",
    "end": "1855290"
  },
  {
    "text": "then indium or eat over and read the objects off G RPC can also send so open",
    "start": "1855290",
    "end": "1862880"
  },
  {
    "text": "a stream to the server and then just send messages up it which is kind of like WCF where you've got a operation",
    "start": "1862880",
    "end": "1870590"
  },
  {
    "text": "contract with one-way methods so it's fire-and-forget I don't care just do it",
    "start": "1870590",
    "end": "1875630"
  },
  {
    "text": "don't get back to me w CF s-- most powerful feature the full duplex so the",
    "start": "1875630",
    "end": "1884810"
  },
  {
    "text": "client has an interface that it can use to send message calls to the server and",
    "start": "1884810",
    "end": "1891920"
  },
  {
    "text": "the server has a callback interface that it can use to invoke methods on the client and so you had a two-way",
    "start": "1891920",
    "end": "1898910"
  },
  {
    "text": "conversation which allowed you to do a lot of very powerful things G our PC has",
    "start": "1898910",
    "end": "1905780"
  },
  {
    "text": "bi-directional streaming so you can the server can return a stream the client can open a string into the server and",
    "start": "1905780",
    "end": "1911600"
  },
  {
    "text": "then they can send messages in both directions completely independently of each other and then you can write",
    "start": "1911600",
    "end": "1918690"
  },
  {
    "text": "funky code that will effectively make that work like full duplex which I will",
    "start": "1918690",
    "end": "1924720"
  },
  {
    "text": "show you shortly if you're using WCF with a binding to MSN queue then just",
    "start": "1924720",
    "end": "1932780"
  },
  {
    "text": "write the code to write it to the queue and yeah sorry all right a gr piece G",
    "start": "1932780",
    "end": "1939960"
  },
  {
    "text": "RPC service to write it to the queue and then use yeah that that's MSM Q",
    "start": "1939960",
    "end": "1948750"
  },
  {
    "text": "particular software apparently MSN queue is dead according to their blog so don't use that anymore",
    "start": "1948750",
    "end": "1955490"
  },
  {
    "text": "so basic binding looks like this so here",
    "start": "1955490",
    "end": "1962970"
  },
  {
    "text": "we have a WCF or what used to be a WCF service contract is the hotel service",
    "start": "1962970",
    "end": "1969120"
  },
  {
    "text": "it's got method get' available rooms which takes a date/time offset of a",
    "start": "1969120",
    "end": "1975420"
  },
  {
    "text": "check-in date and a date/time offset for the checkout date and returns a list of rooms we also have a simple method where",
    "start": "1975420",
    "end": "1984240"
  },
  {
    "text": "you specify the room number and it just returns that room we have a more",
    "start": "1984240",
    "end": "1989610"
  },
  {
    "text": "complicated one where you specify a list of numbers and it returns the matching list of rooms and then finally we have a",
    "start": "1989610",
    "end": "1997310"
  },
  {
    "text": "streaming method where you just say just get me all the rooms but bearing in mind",
    "start": "1997310",
    "end": "2002810"
  },
  {
    "text": "that that could be those big Hilton hotels just over the river that's a lot of rooms so don't build a massive list",
    "start": "2002810",
    "end": "2010850"
  },
  {
    "text": "on the server and send it over all at once the implementation for that we just",
    "start": "2010850",
    "end": "2018170"
  },
  {
    "text": "implement that interface and we've got our data repository and we're just going",
    "start": "2018170",
    "end": "2023450"
  },
  {
    "text": "to return a list here and we're going to return a room there and all rooms is",
    "start": "2023450",
    "end": "2030560"
  },
  {
    "text": "returning an ienumerable service a very thin wrapper around effectively a repository class and now a room object",
    "start": "2030560",
    "end": "2038150"
  },
  {
    "text": "here room has a number it's on the floor it's got a name just in case it's called",
    "start": "2038150",
    "end": "2045380"
  },
  {
    "text": "like the Lincoln suite or something and it's got a price which is a decimal so",
    "start": "2045380",
    "end": "2051409"
  },
  {
    "text": "to represent this in a pro to buff file our hotel",
    "start": "2051410",
    "end": "2057950"
  },
  {
    "text": "service looks very similar I'm going to make this a little bit bigger can",
    "start": "2057950",
    "end": "2066379"
  },
  {
    "text": "everyone see that all right at the back just about good",
    "start": "2066380",
    "end": "2071570"
  },
  {
    "text": "so yeah hotel service effectively this becomes our service contract interface",
    "start": "2071570",
    "end": "2078350"
  },
  {
    "text": "so we're saying it has these methods they take these request types and they",
    "start": "2078350",
    "end": "2083929"
  },
  {
    "text": "return these response types so we've wrapped the parameters for each of those",
    "start": "2083930",
    "end": "2089060"
  },
  {
    "text": "methods in a G RPC in a pro to buff message and I've just named those after",
    "start": "2089060",
    "end": "2096169"
  },
  {
    "text": "the method that they apply to so get available rooms has a get available rooms request and returns a get",
    "start": "2096170",
    "end": "2102500"
  },
  {
    "text": "available rooms response now you might be tempted at this point to say I'm",
    "start": "2102500",
    "end": "2110690"
  },
  {
    "text": "going to create a reusable message that can be shared by multiple services",
    "start": "2110690",
    "end": "2116260"
  },
  {
    "text": "called rooms list which has just got a repeated rooms filled in or room filled",
    "start": "2116260",
    "end": "2121370"
  },
  {
    "text": "inside it it's generally a better idea to do it this way so for the wrapper",
    "start": "2121370",
    "end": "2128510"
  },
  {
    "text": "message around your request and your response create it separately for each",
    "start": "2128510",
    "end": "2136090"
  },
  {
    "text": "method so that if one of them needs to add a field to its parameters or add a",
    "start": "2136090",
    "end": "2143060"
  },
  {
    "text": "field to its response you're not going to break all the others so you'll future-proofing your",
    "start": "2143060",
    "end": "2149180"
  },
  {
    "text": "application this way by duplicating a little bit of code and you know it's",
    "start": "2149180",
    "end": "2154370"
  },
  {
    "text": "copy and paste we're programmers we're good at that",
    "start": "2154370",
    "end": "2159069"
  },
  {
    "text": "she got the vin plug-in it's yank and paste so yeah now another type that",
    "start": "2159900",
    "end": "2169020"
  },
  {
    "text": "protobuf does not have is a date or a date time or a date time offset what it",
    "start": "2169020",
    "end": "2177010"
  },
  {
    "text": "does have is something called a well moment type and as soon as you try and build anything real in G RPC you will",
    "start": "2177010",
    "end": "2185290"
  },
  {
    "text": "start needing to use the well-known types this is a library of protobuf",
    "start": "2185290",
    "end": "2191410"
  },
  {
    "text": "definitions that are part of the call system it's like the standard library for protobuf but they are defined in",
    "start": "2191410",
    "end": "2199450"
  },
  {
    "text": "protobuf and you can generate the code for them the same way you can generate the code for your own profile date/time",
    "start": "2199450",
    "end": "2207970"
  },
  {
    "text": "offset and date/time both map nicely to timestamp timestamp does actually",
    "start": "2207970",
    "end": "2213490"
  },
  {
    "text": "include timezone information so it's strictly it's more like date time offset",
    "start": "2213490",
    "end": "2220210"
  },
  {
    "text": "than date time so we import google slash protobuf slash timestamp proto and then",
    "start": "2220210",
    "end": "2229240"
  },
  {
    "text": "down here we use the message type the field type google.com stamp there is a",
    "start": "2229240",
    "end": "2236440"
  },
  {
    "text": "standard for this so the path to the import that doesn't actually exist anywhere on disk the compiler just knows",
    "start": "2236440",
    "end": "2243340"
  },
  {
    "text": "about it it's built into the compiler but the name of the type is always the",
    "start": "2243340",
    "end": "2250600"
  },
  {
    "text": "path with the slash is replaced with dots and then pascal case on the thing",
    "start": "2250600",
    "end": "2257830"
  },
  {
    "text": "at the end so slash protobuf slash timestamp becomes dot protobuf timestamp and here",
    "start": "2257830",
    "end": "2263620"
  },
  {
    "text": "I've actually got my proper case on the fields we have to get room requests and",
    "start": "2263620",
    "end": "2268870"
  },
  {
    "text": "to get rooms requests and we have an all rooms request doesn't take any parameters so I just declare an empty",
    "start": "2268870",
    "end": "2275380"
  },
  {
    "text": "object if later on I decide I want to add a parameter to all the rooms then I",
    "start": "2275380",
    "end": "2281380"
  },
  {
    "text": "can and I don't break any existing clients you just have to write code for these by the way you have to sort of say",
    "start": "2281380",
    "end": "2287980"
  },
  {
    "text": "if that feels not set then do something sensible you can't just add field and then assume that it will",
    "start": "2287980",
    "end": "2294100"
  },
  {
    "text": "always be said it might not be but that is just again that's just programming we",
    "start": "2294100",
    "end": "2301690"
  },
  {
    "text": "have a repeated room values in the get available rooms response and room down",
    "start": "2301690",
    "end": "2309460"
  },
  {
    "text": "here we've got a double for the price and finally all rooms so all rooms which",
    "start": "2309460",
    "end": "2320530"
  },
  {
    "text": "was the one that returned an ienumerable of room is now in its return section",
    "start": "2320530",
    "end": "2326170"
  },
  {
    "text": "saying I returned a stream of all rooms response that says this will open a",
    "start": "2326170",
    "end": "2332260"
  },
  {
    "text": "stream and it will write objects until there are no more objects and then it will close that stream again there are",
    "start": "2332260",
    "end": "2338350"
  },
  {
    "text": "multiple reasons why you might want to use a stream rather so if you've got ten",
    "start": "2338350",
    "end": "2346180"
  },
  {
    "text": "rooms and each one is like 50 bytes",
    "start": "2346180",
    "end": "2351460"
  },
  {
    "text": "worth of data then don't return a string because it's much quicker to just build",
    "start": "2351460",
    "end": "2357310"
  },
  {
    "text": "that list in memory encode that list in one go and fire it back as a single response but if you've got a thousand",
    "start": "2357310",
    "end": "2363700"
  },
  {
    "text": "rooms and each one is 500 bytes in memory and you don't want to use 500 K",
    "start": "2363700",
    "end": "2368890"
  },
  {
    "text": "of memory building a building the response then you can use a stream and",
    "start": "2368890",
    "end": "2375040"
  },
  {
    "text": "send them one at a time equally if you've just got a bunch of objects and",
    "start": "2375040",
    "end": "2381640"
  },
  {
    "text": "they take a long time to calculate they take a long time to construct from whatever sources and you want the first",
    "start": "2381640",
    "end": "2387490"
  },
  {
    "text": "one the client can start using the first one while you're still working on the others then you can use a stream to give",
    "start": "2387490",
    "end": "2395830"
  },
  {
    "text": "more responsiveness for your user and finally maybe you've just got a",
    "start": "2395830",
    "end": "2401800"
  },
  {
    "text": "notification service maybe you've just got sort of incoming messages or a weather service or something and you",
    "start": "2401800",
    "end": "2408100"
  },
  {
    "text": "just want to infrequently send updates and so you can do that using a stream as",
    "start": "2408100",
    "end": "2413320"
  },
  {
    "text": "well so then we have our room conversion so this",
    "start": "2413320",
    "end": "2422890"
  },
  {
    "text": "solution was converted from a dotnet four point seven point two WCF solution",
    "start": "2422890",
    "end": "2430940"
  },
  {
    "text": "and that solution had this room class in it which was a date contract and it had",
    "start": "2430940",
    "end": "2437900"
  },
  {
    "text": "data members which have now been commented out so this conversion class",
    "start": "2437900",
    "end": "2447070"
  },
  {
    "text": "has been generated and that's gone into the proto's folder as well so the proto",
    "start": "2447070",
    "end": "2452780"
  },
  {
    "text": "smolder is where by convention you put your prototype files you don't have to you can put them anywhere you want but that's where the",
    "start": "2452780",
    "end": "2459500"
  },
  {
    "text": "boilerplate puts it for you the proto file has said use hotel core dot proto's",
    "start": "2459500",
    "end": "2468050"
  },
  {
    "text": "is the namespace and all the classes that g RPC generates for you are partial",
    "start": "2468050",
    "end": "2475790"
  },
  {
    "text": "which means you can add functionality to them and in this case I've added",
    "start": "2475790",
    "end": "2482650"
  },
  {
    "text": "implicit operators to convert between the protobuf room message and the old",
    "start": "2482650",
    "end": "2490450"
  },
  {
    "text": "room data contracts type and you can see here that it just sets the fields and",
    "start": "2490450",
    "end": "2497690"
  },
  {
    "text": "calls convert to double on the price and convert dr decimal on that price there",
    "start": "2497690",
    "end": "2504790"
  },
  {
    "text": "and then finally the service code itself",
    "start": "2504790",
    "end": "2513860"
  },
  {
    "text": "so this is my implementation code here this is where it implements the methods",
    "start": "2513860",
    "end": "2524570"
  },
  {
    "text": "from the proto file from the service in the proto file and we inject basically",
    "start": "2524570",
    "end": "2530690"
  },
  {
    "text": "i've just copied the old service contract implementation over from the WCF application and i inject that into",
    "start": "2530690",
    "end": "2539440"
  },
  {
    "text": "my g RPC service and then for each one of those requests i just call the",
    "start": "2539440",
    "end": "2546440"
  },
  {
    "text": "equivalent service contract request converting check-in dates which is a",
    "start": "2546440",
    "end": "2552270"
  },
  {
    "text": "protobuf timestamp to the date time offset and then I create a new get",
    "start": "2552270",
    "end": "2560250"
  },
  {
    "text": "available rooms response write the values into responsive Al use and then",
    "start": "2560250",
    "end": "2565530"
  },
  {
    "text": "because the original code here was synchronous has a lot of wucf code is I just returned a task from result on",
    "start": "2565530",
    "end": "2573600"
  },
  {
    "text": "there similar thing with get room response and get rooms response just",
    "start": "2573600",
    "end": "2580530"
  },
  {
    "text": "pulling numbers out and into a race but essentially all I'm doing here is",
    "start": "2580530",
    "end": "2585570"
  },
  {
    "text": "mapping from the G RPC request and response messages and the G RPC methods",
    "start": "2585570",
    "end": "2592080"
  },
  {
    "text": "to the old service contract method so if you've got code that basically will work",
    "start": "2592080",
    "end": "2599460"
  },
  {
    "text": "in dotnet call so you're not using any new get packages for which there is not",
    "start": "2599460",
    "end": "2605520"
  },
  {
    "text": "an updated version that works with don't make call and you're not using horrible",
    "start": "2605520",
    "end": "2610530"
  },
  {
    "text": "things that are built into the dotnet framework that nobody even knew about or you know if you are you can get rid of",
    "start": "2610530",
    "end": "2617400"
  },
  {
    "text": "them then you should be able to rescue most of your existing code and just wrap",
    "start": "2617400",
    "end": "2624660"
  },
  {
    "text": "this G RPC facade around it and carry on using it as should theoretically be",
    "start": "2624660",
    "end": "2631050"
  },
  {
    "text": "fairly low effort and you can see here",
    "start": "2631050",
    "end": "2636750"
  },
  {
    "text": "we have our all rooms so when you specify streaming for a RPC method you",
    "start": "2636750",
    "end": "2647670"
  },
  {
    "text": "don't create the stream the GRP C runtime creates the stream for you and just goes here you are here's the stream",
    "start": "2647670",
    "end": "2654810"
  },
  {
    "text": "right to it and so you do that and then",
    "start": "2654810",
    "end": "2660020"
  },
  {
    "text": "we say for each item in get rooms create",
    "start": "2660020",
    "end": "2666660"
  },
  {
    "text": "a new all rooms response and then write that response to the stream and then the other thing that we really want to do",
    "start": "2666660",
    "end": "2673110"
  },
  {
    "text": "know that that's fine this is a bit",
    "start": "2673110",
    "end": "2678180"
  },
  {
    "text": "weird because this method returns a task when that",
    "start": "2678180",
    "end": "2686259"
  },
  {
    "text": "task completes the stream will be closed and the connection will be closed and",
    "start": "2686259",
    "end": "2692229"
  },
  {
    "text": "the client will will finish and so you have to keep it inside this method you",
    "start": "2692229",
    "end": "2698289"
  },
  {
    "text": "have to sort of do an async call you lose all the async calls you can think of but don't just start something",
    "start": "2698289",
    "end": "2704680"
  },
  {
    "text": "running on a background thread and pass the string to it and then return a completed task because that will cause G",
    "start": "2704680",
    "end": "2712029"
  },
  {
    "text": "RPC to go and we're done and if you're anything like me you'll spend several hours trying to work out why that",
    "start": "2712029",
    "end": "2718960"
  },
  {
    "text": "happened tasks run does not do what you think it does so that's a duplex service that's",
    "start": "2718960",
    "end": "2727269"
  },
  {
    "text": "not a duplex service that's a very simple service and yeah effectively it's",
    "start": "2727269",
    "end": "2733720"
  },
  {
    "text": "just taking your old boilerplate code and wrapping it in some new boilerplate",
    "start": "2733720",
    "end": "2739119"
  },
  {
    "text": "code and then over time you can kind of refactor it and make it a little bit",
    "start": "2739119",
    "end": "2744190"
  },
  {
    "text": "more native to G RPC and maybe sort of pull things out of service contracts and",
    "start": "2744190",
    "end": "2750219"
  },
  {
    "text": "everything else but you can achieve this without having to rewrite everything",
    "start": "2750219",
    "end": "2756819"
  },
  {
    "text": "from scratch I think it's my point if you can drag your c-sharp files into a",
    "start": "2756819",
    "end": "2763089"
  },
  {
    "text": "dotnet call 3.1 project and that dotnet call 3.1 project builds then you can",
    "start": "2763089",
    "end": "2769089"
  },
  {
    "text": "probably carry on using them the only thing you will definitely definitely need to remove data contracts and data",
    "start": "2769089",
    "end": "2777910"
  },
  {
    "text": "member will actually work those are still there but service contract",
    "start": "2777910",
    "end": "2785859"
  },
  {
    "text": "operation contract full contract all the things that were in system dot service model those are gone so comment those",
    "start": "2785859",
    "end": "2792190"
  },
  {
    "text": "out you'll probably be fine okay so that was request/response basic",
    "start": "2792190",
    "end": "2799150"
  },
  {
    "text": "binding obviously that's quite straightforward trying to make duplex",
    "start": "2799150",
    "end": "2805630"
  },
  {
    "text": "work is a little bit more complicated or we also saw server streaming there by",
    "start": "2805630",
    "end": "2811809"
  },
  {
    "text": "the way that all rooms method where it used to return innumerable and now it just returns the",
    "start": "2811809",
    "end": "2817029"
  },
  {
    "text": "service tree but body directional streaming as a way of doing full duplex is much more fun and the other thing",
    "start": "2817029",
    "end": "2825970"
  },
  {
    "text": "that this kind of highlights is that WCF had this concept of session and you had",
    "start": "2825970",
    "end": "2834220"
  },
  {
    "text": "instance context mode and you could basically say when the client opens the",
    "start": "2834220",
    "end": "2841269"
  },
  {
    "text": "connection starter session create an instance of the service contract class and keep it alive until",
    "start": "2841269",
    "end": "2848650"
  },
  {
    "text": "the client is finished and so if you set any fields or stored any data in private",
    "start": "2848650",
    "end": "2855970"
  },
  {
    "text": "fields or properties inside that class that effectively was your session state so no load-balancing at all but it did",
    "start": "2855970",
    "end": "2865299"
  },
  {
    "text": "make it very very easy to have a continuous conversation going and as",
    "start": "2865299",
    "end": "2870309"
  },
  {
    "text": "we'll see from microsoft's calculator example because why wouldn't you implement a calculator as a full duplex",
    "start": "2870309",
    "end": "2878220"
  },
  {
    "text": "WCF service that requires net TCP binding to work so we have our",
    "start": "2878220",
    "end": "2889170"
  },
  {
    "text": "our calculator interface this would have been our service contract interface in",
    "start": "2891540",
    "end": "2900960"
  },
  {
    "text": "our old code this is taken directly from Microsoft's WCF samples so we have add",
    "start": "2900960",
    "end": "2906810"
  },
  {
    "text": "to subtract from x divided by all of which take a double and a clear and all",
    "start": "2906810",
    "end": "2913740"
  },
  {
    "text": "of these methods return void so no value",
    "start": "2913740",
    "end": "2920130"
  },
  {
    "text": "goes back from these methods any values that go back to the client are going to",
    "start": "2920130",
    "end": "2925710"
  },
  {
    "text": "come through the callback interface and I call back interface looks like this so",
    "start": "2925710",
    "end": "2934500"
  },
  {
    "text": "we have a result I've added a result async just to make my life a bit easier and an equation and an equation async",
    "start": "2934500",
    "end": "2942270"
  },
  {
    "text": "and so anytime the server wants to communicate data back to the client it does it by invoking a method now WCF did",
    "start": "2942270",
    "end": "2950340"
  },
  {
    "text": "some really hairy stuff it basically used run time reflection and ILM it to",
    "start": "2950340",
    "end": "2958170"
  },
  {
    "text": "generate an in-memory representation of that callback class that Marshall method",
    "start": "2958170",
    "end": "2964440"
  },
  {
    "text": "calls to net TCP sockets and everything else we're not going to do that now",
    "start": "2964440",
    "end": "2972170"
  },
  {
    "text": "instead we are going to abuse or use",
    "start": "2972170",
    "end": "2978860"
  },
  {
    "text": "bi-directional streaming so service now it doesn't have all those methods it",
    "start": "2978860",
    "end": "2986370"
  },
  {
    "text": "doesn't have an add and subtract and everything else it just has a start and it creates a client stream of actions",
    "start": "2986370",
    "end": "2994620"
  },
  {
    "text": "and returns another stream of callbacks and so our calculator action message",
    "start": "2994620",
    "end": "3001300"
  },
  {
    "text": "here has a message type you can nest",
    "start": "3001300",
    "end": "3006650"
  },
  {
    "text": "messages inside other messages which is a really good way of making sure you don't get clashes between type names and",
    "start": "3006650",
    "end": "3015530"
  },
  {
    "text": "so our calculator action has nested message types for clear and add to and subtract from and",
    "start": "3015530",
    "end": "3023269"
  },
  {
    "text": "then it uses a one-off so one of is a pro to buff keyword and it says here is",
    "start": "3023269",
    "end": "3030979"
  },
  {
    "text": "a subset of fields within these braces only one of these can be set and if you",
    "start": "3030979",
    "end": "3041209"
  },
  {
    "text": "set one of them and then set another one the first one that you set won't be set anymore and so this calculator action",
    "start": "3041209",
    "end": "3049099"
  },
  {
    "text": "will either have a clear or an add to or a subtract from and you'll be able to",
    "start": "3049099",
    "end": "3055789"
  },
  {
    "text": "tell which one it is so this is effectively like a variant type or a union type it's saying this message will",
    "start": "3055789",
    "end": "3063409"
  },
  {
    "text": "be one of these things and the callback same thing we have a result callback and",
    "start": "3063409",
    "end": "3068899"
  },
  {
    "text": "an equation call back in another one off filled in there and then we have our",
    "start": "3068899",
    "end": "3077109"
  },
  {
    "text": "calculator implementation here so this",
    "start": "3077109",
    "end": "3082339"
  },
  {
    "text": "is matches the service contract implementation so we have our add two",
    "start": "3082339",
    "end": "3090819"
  },
  {
    "text": "and our subtract from and everything else and we have a callback type which",
    "start": "3090819",
    "end": "3099079"
  },
  {
    "text": "works just like our callback would have worked in WCF with full duplex binding",
    "start": "3099079",
    "end": "3105619"
  },
  {
    "text": "except instead of operation context current get callback contract angle",
    "start": "3105619",
    "end": "3112159"
  },
  {
    "text": "brackets the type of the callback contract we're just going to create it ourselves and pass it in and then our",
    "start": "3112159",
    "end": "3123130"
  },
  {
    "text": "service and this is the point where it gets really fun is we have our start",
    "start": "3123429",
    "end": "3131509"
  },
  {
    "text": "method here and that gives us the request stream which is the requests",
    "start": "3131509",
    "end": "3136519"
  },
  {
    "text": "coming in from the client and the response stream which is the way that we can write responses to the client and their cervical context as before and",
    "start": "3136519",
    "end": "3145039"
  },
  {
    "text": "then because this is not net call 3.1 and we're doing c-sharp 8 we've got a",
    "start": "3145039",
    "end": "3151579"
  },
  {
    "text": "sink enumerable and so request stream is a my async stream",
    "start": "3151579",
    "end": "3157400"
  },
  {
    "text": "but there's an extension method on that that turns it into an ie async enumerable of those requests and so we",
    "start": "3157400",
    "end": "3164750"
  },
  {
    "text": "can just do an a wait for each then we can have a switch statement and that",
    "start": "3164750",
    "end": "3171590"
  },
  {
    "text": "action as well as having the fields for things like clear and add to it",
    "start": "3171590",
    "end": "3177110"
  },
  {
    "text": "generates an action case enumeration and a field of that type and that tells you",
    "start": "3177110",
    "end": "3186710"
  },
  {
    "text": "which one of the fields is set so we can very quickly switch over that and we can",
    "start": "3186710",
    "end": "3191750"
  },
  {
    "text": "say if it's a clear message then invoke the clear method if it's an add to",
    "start": "3191750",
    "end": "3197810"
  },
  {
    "text": "message invoke the add to method if it's a subtract from message invoke subtract from and then down here you can see the",
    "start": "3197810",
    "end": "3207320"
  },
  {
    "text": "invoke add to async it passes in that action and it just calls that on the contract contract was passed in up at",
    "start": "3207320",
    "end": "3216230"
  },
  {
    "text": "the top here was a factory to create it in the client code for that because it's",
    "start": "3216230",
    "end": "3225920"
  },
  {
    "text": "no fun having this so we have a program dot CS here and we have a calculator",
    "start": "3225920",
    "end": "3234830"
  },
  {
    "text": "client adapter so it's all very well you on your team on your server side saying",
    "start": "3234830",
    "end": "3240320"
  },
  {
    "text": "hey we've created a gr PC version of this and all you have to do is instead",
    "start": "3240320",
    "end": "3246050"
  },
  {
    "text": "of implementing a callback interface you have to subscribe to a stream of",
    "start": "3246050",
    "end": "3251210"
  },
  {
    "text": "callback messages and decide what you're going to do according to the type of the message and whether that's a result",
    "start": "3251210",
    "end": "3256340"
  },
  {
    "text": "callback or an equation callback and so to be helpful to our users and also to",
    "start": "3256340",
    "end": "3262340"
  },
  {
    "text": "remove barriers to adoption we're going to create library that contains wrapper",
    "start": "3262340",
    "end": "3270650"
  },
  {
    "text": "around the G RPC client that is compatible source code compatible with",
    "start": "3270650",
    "end": "3276230"
  },
  {
    "text": "their old generated WCF client because we're nice like that and that",
    "start": "3276230",
    "end": "3281930"
  },
  {
    "text": "essentially just does the same thing but at the other end so we need to make sure",
    "start": "3281930",
    "end": "3288590"
  },
  {
    "text": "it started obviously and then we have a call back to ask",
    "start": "3288590",
    "end": "3299280"
  },
  {
    "text": "which we're going to run asynchronously over the response stream you can see here that this is just essentially when",
    "start": "3299280",
    "end": "3309060"
  },
  {
    "text": "you call the method on this class it makes sure this stream has been started and then it's wraps that up in the right",
    "start": "3309060",
    "end": "3316170"
  },
  {
    "text": "kind of action so it's creating a new add to there and then writes that to the request stream and if we scroll down",
    "start": "3316170",
    "end": "3323910"
  },
  {
    "text": "here far enough we've got the run callback and that looks very similar to the server-side thing",
    "start": "3323910",
    "end": "3330180"
  },
  {
    "text": "so you're just for each a weight or a weight for reaching over that stream with callback messages and then passing",
    "start": "3330180",
    "end": "3337560"
  },
  {
    "text": "those through to the callback implementation that was how they used to",
    "start": "3337560",
    "end": "3342930"
  },
  {
    "text": "get these things back in the WCF days",
    "start": "3342930",
    "end": "3347329"
  },
  {
    "text": "it's complicated but it does work and",
    "start": "3348290",
    "end": "3354320"
  },
  {
    "text": "really once you know those patterns it's quite possible",
    "start": "3354320",
    "end": "3359790"
  },
  {
    "text": "so sort of repeatable that you can make a visual studio plug-in that does it",
    "start": "3359790",
    "end": "3367410"
  },
  {
    "text": "but please don't I don't like competition so yes but this effectively",
    "start": "3367410",
    "end": "3376560"
  },
  {
    "text": "this still gives you a way of wrapping around your existing code and just",
    "start": "3376560",
    "end": "3384150"
  },
  {
    "text": "wrapping it in a new way of handling this and of course the advantage is that",
    "start": "3384150",
    "end": "3389820"
  },
  {
    "text": "once you've done this if you had a service that only worked with net TCP so",
    "start": "3389820",
    "end": "3395070"
  },
  {
    "text": "your Java users or other people couldn't use it if you rewrite it using this way",
    "start": "3395070",
    "end": "3400680"
  },
  {
    "text": "of doing bi-directional streaming and firing things backwards and forwards then you can go to the Python people and",
    "start": "3400680",
    "end": "3406710"
  },
  {
    "text": "say yes you can generate a Python client or you can generate a Java client and everybody can be happy and and work",
    "start": "3406710",
    "end": "3413880"
  },
  {
    "text": "together and hippie-dippy sort of stuff like that",
    "start": "3413880",
    "end": "3418640"
  },
  {
    "text": "the other thing this achieves because our where's my server calculator service",
    "start": "3419440",
    "end": "3431020"
  },
  {
    "text": "class gone here so remember the thing",
    "start": "3431020",
    "end": "3436170"
  },
  {
    "text": "about when you're streaming in either direction the stream stays open until",
    "start": "3436170",
    "end": "3442180"
  },
  {
    "text": "that methods the tasks that that method returns completes so if that method has",
    "start": "3442180",
    "end": "3452799"
  },
  {
    "text": "to stay open and that method is running inside of this class which it is because",
    "start": "3452799",
    "end": "3457839"
  },
  {
    "text": "it's using members of this class then that's going to keep this instance of the class alive for as long as the",
    "start": "3457839",
    "end": "3467130"
  },
  {
    "text": "method is running for for as long as the stream is open which means in G RPC in a",
    "start": "3467130",
    "end": "3474250"
  },
  {
    "text": "very hacky bad way we have managed to implement session in exactly the same",
    "start": "3474250",
    "end": "3479890"
  },
  {
    "text": "way that WCF used to do it and so if you every time somebody calls start create",
    "start": "3479890",
    "end": "3486490"
  },
  {
    "text": "an instance of your service contract class then you have instance per session",
    "start": "3486490",
    "end": "3492180"
  },
  {
    "text": "handling the same way that you used to in WCF which i think is quite nice very",
    "start": "3492180",
    "end": "3499180"
  },
  {
    "text": "very happy but quite nice all the code that are showing here will be pushed up",
    "start": "3499180",
    "end": "3505480"
  },
  {
    "text": "to github and available for you to download as a reference so yeah security",
    "start": "3505480",
    "end": "3513839"
  },
  {
    "text": "WCF security was all kinds of fun how long never got left two minutes that's fine but yes",
    "start": "3513839",
    "end": "3521200"
  },
  {
    "text": "so in WCF security was all WS security and it applied to things like how are we",
    "start": "3521200",
    "end": "3527740"
  },
  {
    "text": "going to do encryption are we going to do message level encryption or value level encryption and also how are we",
    "start": "3527740",
    "end": "3533289"
  },
  {
    "text": "going to authenticate the user and authorize the user and there were lots of different ways of doing this it",
    "start": "3533289",
    "end": "3538450"
  },
  {
    "text": "integrated with Active Directory and LDAP and Kerberos and God knows what",
    "start": "3538450",
    "end": "3543579"
  },
  {
    "text": "else basically GRP see how is the data going to be encrypted well this is HTTP - it's",
    "start": "3543579",
    "end": "3550960"
  },
  {
    "text": "encrypted because it's over TLS you can do it you can force it to turn TLS off which is quite handy when you're",
    "start": "3550960",
    "end": "3558579"
  },
  {
    "text": "running in like a kubernetes cluster and the networks encrypted anyway so why do it twice but for public services they're",
    "start": "3558579",
    "end": "3568089"
  },
  {
    "text": "running over HTTP - that basically includes TLS so all communications are",
    "start": "3568089",
    "end": "3574630"
  },
  {
    "text": "encrypted by default and as far as authentication and authorization goes it",
    "start": "3574630",
    "end": "3581349"
  },
  {
    "text": "supports certificate authentication so the client can supply a certificate and",
    "start": "3581349",
    "end": "3586779"
  },
  {
    "text": "the server can validate that certificate the server the client can also validate",
    "start": "3586779",
    "end": "3592029"
  },
  {
    "text": "the server's certificate and so you can make sure that both those certificates were generated by the same Authority",
    "start": "3592029",
    "end": "3597640"
  },
  {
    "text": "which is quite handy for internal systems and the other thing it supports",
    "start": "3597640",
    "end": "3603190"
  },
  {
    "text": "for at the call level so the certificate authentication is handled at the",
    "start": "3603190",
    "end": "3609880"
  },
  {
    "text": "connection level so when the connection is opened the certificates are validated and we go okay so this is a valid client",
    "start": "3609880",
    "end": "3616990"
  },
  {
    "text": "talking to a valid server if you then want to do call level authentication you basically use a token a JSON web token",
    "start": "3616990",
    "end": "3625240"
  },
  {
    "text": "some kind of bearer token if you have been using Active Directory Windows ntlm",
    "start": "3625240",
    "end": "3632230"
  },
  {
    "text": "LDAP Kerberos authentication for your WCF service then you need to hook up one",
    "start": "3632230",
    "end": "3640089"
  },
  {
    "text": "of those things that generates a bearer token from your Active Directory so ad",
    "start": "3640089",
    "end": "3645640"
  },
  {
    "text": "FS or something similar and then you can pass that through into your G RPC",
    "start": "3645640",
    "end": "3653410"
  },
  {
    "text": "service and because Microsoft have got libraries for understanding ad FS tokens",
    "start": "3653410",
    "end": "3659319"
  },
  {
    "text": "you can still use them as the authentication on the server side because the server authentication is",
    "start": "3659319",
    "end": "3666160"
  },
  {
    "text": "just asp net core authentication it works with the same providers you should use JWT token orth or Roth or octo or",
    "start": "3666160",
    "end": "3674890"
  },
  {
    "text": "whatever you want to use in production this is the really nice thing so if you",
    "start": "3674890",
    "end": "3681099"
  },
  {
    "text": "get a WCF service that used to run on Windows 20:16 on a server with 32 gigabytes of",
    "start": "3681099",
    "end": "3692640"
  },
  {
    "text": "RAM and a 4 core and 8 core Xeon processor and could manage you know a",
    "start": "3692640",
    "end": "3699989"
  },
  {
    "text": "thousand requests a second you can now run that same service as a dotnet called G RPC service on a Raspberry Pi and it",
    "start": "3699989",
    "end": "3708269"
  },
  {
    "text": "will be able to do 10,000 requests a second so you can run one thing you",
    "start": "3708269",
    "end": "3713999"
  },
  {
    "text": "can't do with an asp net core 3.1 g RPC service is run it in iis you can run it",
    "start": "3713999",
    "end": "3721649"
  },
  {
    "text": "natively on windows you can run it behind nginx you can run it behind the web server proxy you can do",
    "start": "3721649",
    "end": "3726959"
  },
  {
    "text": "authentication at that proxy you can't run it in IRS because i is doesn't implement all of HTTP 2's optional",
    "start": "3726959",
    "end": "3734809"
  },
  {
    "text": "specifically response trains this is a matter of waiting for is to catch up and",
    "start": "3734809",
    "end": "3740899"
  },
  {
    "text": "possibly by the end of this year you will be able to do that but you can run it in a docker container",
    "start": "3740899",
    "end": "3746609"
  },
  {
    "text": "you can run it in a kubernetes pod it will play nicely with service meshes if",
    "start": "3746609",
    "end": "3752429"
  },
  {
    "text": "you've got a big production kubernetes environment or aks or eks or google",
    "start": "3752429",
    "end": "3758429"
  },
  {
    "text": "cloud or whatever else you might have this has been a fairly high-level talk",
    "start": "3758429",
    "end": "3765449"
  },
  {
    "text": "and I've kind of said hey these things are possible there's a lot more detail in this book that I wrote and my wife",
    "start": "3765449",
    "end": "3772919"
  },
  {
    "text": "helped for Microsoft which is on their docks website if you just google G RPC",
    "start": "3772919",
    "end": "3780449"
  },
  {
    "text": "for WCF developers it's search engine optimized it's wait at the top if you",
    "start": "3780449",
    "end": "3785519"
  },
  {
    "text": "Bing for it it's on like the third page so don't do that why would you do that",
    "start": "3785519",
    "end": "3791369"
  },
  {
    "text": "oh I know because Microsoft's had it a plug into Chrome that does it for you",
    "start": "3791369",
    "end": "3797329"
  },
  {
    "text": "both the code samples that I've shown here were generated by visual recode",
    "start": "3797630",
    "end": "3803029"
  },
  {
    "text": "which is preview 3 is going to be out next week which does the duplex stuff it",
    "start": "3803029",
    "end": "3808439"
  },
  {
    "text": "is a commercial product but it will do an awful lot of this legwork for you and",
    "start": "3808439",
    "end": "3813449"
  },
  {
    "text": "I'm really hoping it is going to be an option for people to",
    "start": "3813449",
    "end": "3818470"
  },
  {
    "text": "excu huge great sways of code without having to manually play all through and",
    "start": "3818470",
    "end": "3823720"
  },
  {
    "text": "do everything to pull software are going to be selling that I'm just making it",
    "start": "3823720",
    "end": "3829020"
  },
  {
    "text": "that's what it does so version one we'll just do WCF to Tihar PC 1.5 will also do WCF rest if",
    "start": "3829020",
    "end": "3837070"
  },
  {
    "text": "anyone's been using that just turn that into an asp net core MVC project and then 2.0 we're gonna look at web api and",
    "start": "3837070",
    "end": "3844630"
  },
  {
    "text": "then maybe at some point in the future i'll do that thing with blazer and mono when system web and just really upset",
    "start": "3844630",
    "end": "3851140"
  },
  {
    "text": "microsoft that's it I've used all the time thank you very much for coming I hope that was useful I'm around for the",
    "start": "3851140",
    "end": "3857680"
  },
  {
    "text": "rest of the conference and I've got a two hour workshop on G RPC or I won't be",
    "start": "3857680",
    "end": "3862840"
  },
  {
    "text": "mentioning WCF but I will be showing you a lot more detail about creating gr PC",
    "start": "3862840",
    "end": "3867970"
  },
  {
    "text": "applications from scratch thank you very much [Applause]",
    "start": "3867970",
    "end": "3874710"
  }
]