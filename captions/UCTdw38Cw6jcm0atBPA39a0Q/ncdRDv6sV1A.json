[
  {
    "text": "uh my name is max arshinov and for my day job i'm a cto at ita group",
    "start": "560",
    "end": "6399"
  },
  {
    "text": "which is an outsourcing company based in kazan russia our main focus is building custom complex systems for",
    "start": "6399",
    "end": "12960"
  },
  {
    "text": "our clients and for the past three years i have been speaking at various conference",
    "start": "12960",
    "end": "18000"
  },
  {
    "text": "conferences though that's my first time at ndc and i'm very happy to be a part of it",
    "start": "18000",
    "end": "23680"
  },
  {
    "text": "and for the past two years i also have been teaching in kazan university so this is",
    "start": "23680",
    "end": "29760"
  },
  {
    "text": "some background information about me unfortunately i don't have a twitter account but you can find me on facebook",
    "start": "29760",
    "end": "36640"
  },
  {
    "text": "or email me so we live in a strange time normally i",
    "start": "36640",
    "end": "41920"
  },
  {
    "text": "expect that the audience to share the same room with the speaker however this is impossible now so i",
    "start": "41920",
    "end": "48160"
  },
  {
    "text": "tried to take advantage of this new format my talk includes some live coding please feel free to clone the repository",
    "start": "48160",
    "end": "54480"
  },
  {
    "text": "if it's more convenient to you to have the code open on your second screen in your favorite ide you can also find",
    "start": "54480",
    "end": "60960"
  },
  {
    "text": "the presentation and the links and everything that i mentioned during the talk uh by this link so and the last thing",
    "start": "60960",
    "end": "68159"
  },
  {
    "text": "before we begin please text me on in slack or in webex chat if there's any",
    "start": "68159",
    "end": "75280"
  },
  {
    "text": "uh where you are now hopefully this knowledge can help us to feel connected to each other some feedback",
    "start": "75280",
    "end": "82240"
  },
  {
    "text": "for instance i'm at my office right now in kazan despite that about 1.5 million people",
    "start": "82240",
    "end": "88240"
  },
  {
    "text": "live in the city i don't expect that foreigners uh know any russian cities apart from",
    "start": "88240",
    "end": "93360"
  },
  {
    "text": "moscow and maybe petersburg so here's the clue i'm only eight 22 kilos to the east from moscow and",
    "start": "93360",
    "end": "100640"
  },
  {
    "text": "when i say only i mean it here in russia we really consider this a short distance anyway let's get started so today i'm",
    "start": "100640",
    "end": "108720"
  },
  {
    "text": "gonna be talking about expression trees if you had asked me a few years ago if i wanted to know the implementation",
    "start": "108720",
    "end": "114479"
  },
  {
    "text": "details of this technology i would have 100 sure answered no because",
    "start": "114479",
    "end": "120479"
  },
  {
    "text": "then i thought that expression trees are just part of link so i didn't expect that there might be",
    "start": "120479",
    "end": "126240"
  },
  {
    "text": "some other way to apply them in real life scenarios apart from maybe feeding them into like wearable extension methods",
    "start": "126240",
    "end": "132720"
  },
  {
    "text": "such as select wear and order by everything started with just one short",
    "start": "132720",
    "end": "137920"
  },
  {
    "text": "refactoring or more precisely with something that i thought would be a short refactoring",
    "start": "137920",
    "end": "144239"
  },
  {
    "text": "in reality it was a starting point down the rabbit hole again the experience on how to properly",
    "start": "144239",
    "end": "150239"
  },
  {
    "text": "use expression trees over several years after this incident we only have about an hour uh so i'm not",
    "start": "150239",
    "end": "156959"
  },
  {
    "text": "going to tell you uh the chronology i will only present you a fact",
    "start": "156959",
    "end": "162400"
  },
  {
    "text": "uh i only present you facts and uh i will ignore the chronological order so",
    "start": "162400",
    "end": "170319"
  },
  {
    "text": "let's just pretend that you are a random person who just have got a new",
    "start": "170319",
    "end": "176000"
  },
  {
    "text": "job as a developer for the commerce solution",
    "start": "176000",
    "end": "181840"
  },
  {
    "text": "i will use this example because e-commerce domain is well known so i hope that business rules will be",
    "start": "182239",
    "end": "188959"
  },
  {
    "text": "straightforward to everyone every business system has some business rules involved so let's start with a",
    "start": "188959",
    "end": "194400"
  },
  {
    "text": "simple one our manager asked us to show on the ui",
    "start": "194400",
    "end": "200400"
  },
  {
    "text": "only those products for which is for sale checkbox is selected",
    "start": "200400",
    "end": "205599"
  },
  {
    "text": "in the admin area all other products should be considered as drafts and should not be shown to",
    "start": "205599",
    "end": "212640"
  },
  {
    "text": "customers no problem we can easily write code like this so far so good after a while the manager is",
    "start": "212640",
    "end": "220159"
  },
  {
    "text": "changing her mind his for sale rule still applies but now she wants to remove products",
    "start": "220159",
    "end": "227120"
  },
  {
    "text": "that are not in stock from the ui because customers kind of get upset when they are told that their products are",
    "start": "227120",
    "end": "232959"
  },
  {
    "text": "unavailable after payment and not before it so this should be an easy fix let's introduce another property and call it",
    "start": "232959",
    "end": "239599"
  },
  {
    "text": "in stock and get another one just to combine both condition into a single",
    "start": "239599",
    "end": "245360"
  },
  {
    "text": "read-only property so so that we can encapsulate the filtering rules",
    "start": "245360",
    "end": "250799"
  },
  {
    "text": "in a convenient way well and uh has anyone already guessed what i'm getting at right now",
    "start": "250799",
    "end": "256320"
  },
  {
    "text": "if so please let me know in the chat let's check okay the link is works",
    "start": "256320",
    "end": "262960"
  },
  {
    "text": "perfect link is working well the problem is that this code compiles and perfectly",
    "start": "262960",
    "end": "269199"
  },
  {
    "text": "works with in-memory variables but it fails in runtime when working with a real db unless you have other uh i've written",
    "start": "269199",
    "end": "275840"
  },
  {
    "text": "some default rm behavior the problem is that the is available property is not mapped to any table",
    "start": "275840",
    "end": "281199"
  },
  {
    "text": "column so orm doesn't really know which column should be included in the select statement of the sql query",
    "start": "281199",
    "end": "289120"
  },
  {
    "text": "an easy fix would be to add the to list call just before the work",
    "start": "289120",
    "end": "294400"
  },
  {
    "text": "hold but this is not acceptable solution in many cases we really cannot assume that there are",
    "start": "294400",
    "end": "299600"
  },
  {
    "text": "just a few products in the database there might be thousands of millions on them so querying them all into memory is not",
    "start": "299600",
    "end": "305840"
  },
  {
    "text": "an option okay there is another simple fix",
    "start": "305840",
    "end": "311600"
  },
  {
    "text": "let's get rid of the is available property and just copy paste the",
    "start": "311600",
    "end": "316639"
  },
  {
    "text": "condition as is this is definitely an easy solution but what will you do when you have hundreds of lines like",
    "start": "316639",
    "end": "323120"
  },
  {
    "text": "this maintenance of such a code base might be a nightmare and we all know that repeating yourself",
    "start": "323120",
    "end": "328479"
  },
  {
    "text": "is not a god not a good thing right so in order to come up with a better",
    "start": "328479",
    "end": "334400"
  },
  {
    "text": "solution we need to examine the basics from the very beginning why the same lambda perfectly works when it's applied to an",
    "start": "334400",
    "end": "341440"
  },
  {
    "text": "in-memory database and fails with a real one have you ever tried to define a lambda",
    "start": "341440",
    "end": "346800"
  },
  {
    "text": "function using a var statement you can't do this because it just won't compile",
    "start": "346800",
    "end": "352800"
  },
  {
    "text": "the c-sharp compiler will ask you to be more specific about whether you would like to define a",
    "start": "352800",
    "end": "357840"
  },
  {
    "text": "delegate or an expression so even these two lambdas look the same",
    "start": "357840",
    "end": "364240"
  },
  {
    "text": "they have different type so basically these are different things in terms of the",
    "start": "364240",
    "end": "369280"
  },
  {
    "text": "programming language however it's not difficult to transform",
    "start": "369280",
    "end": "374400"
  },
  {
    "text": "an expression into a delegate let's say we have a simple expression",
    "start": "374400",
    "end": "379440"
  },
  {
    "text": "like this to get the corresponding delegate",
    "start": "379440",
    "end": "385360"
  },
  {
    "text": "we only need to call the compile method which will kindly unwrap the expression and provide you with the instance of the",
    "start": "385360",
    "end": "391520"
  },
  {
    "text": "underlying function the only disadvantage of this approach is that this is a compilation process",
    "start": "391520",
    "end": "399440"
  },
  {
    "text": "which is a synonym with a relatively slow process performance considerations might be",
    "start": "399440",
    "end": "404560"
  },
  {
    "text": "important for your project or not but anyway generally speaking none of us want random compilations to happen in",
    "start": "404560",
    "end": "410639"
  },
  {
    "text": "the app we develop and maintain so is there a chance that there is an",
    "start": "410639",
    "end": "415840"
  },
  {
    "text": "inverse transformation that is faster than the compilation process the answer is kind of",
    "start": "415840",
    "end": "421199"
  },
  {
    "text": "yes and no at the same time the solution is proposed by another",
    "start": "421199",
    "end": "427199"
  },
  {
    "text": "russian developer his name is alexander zaitsev his approach is the following let's",
    "start": "427199",
    "end": "432560"
  },
  {
    "text": "decorate the is available property with a special attribute and add a special decompile method",
    "start": "432560",
    "end": "441599"
  },
  {
    "text": "the implementation of the decompile method is quite tricky it uses the git get il as a byte array",
    "start": "441599",
    "end": "448400"
  },
  {
    "text": "method available as a part of method input type which is a part of system.reflection namespace",
    "start": "448400",
    "end": "453520"
  },
  {
    "text": "this method behaves exactly as you might expect it returns backery of the il instructions",
    "start": "453520",
    "end": "459280"
  },
  {
    "text": "under the hood these bytes are translated into objects using mono reflection once we have those",
    "start": "459280",
    "end": "465199"
  },
  {
    "text": "objects we can translate them into expression trees the decompile method searches for",
    "start": "465199",
    "end": "471360"
  },
  {
    "text": "properties marked with computed attribute and replaces the original call",
    "start": "471360",
    "end": "476560"
  },
  {
    "text": "of the is available property with its body this is kind of run time hand written in",
    "start": "476560",
    "end": "482240"
  },
  {
    "text": "lining mechanism for expressions although this process is completely unintuitive",
    "start": "482240",
    "end": "488560"
  },
  {
    "text": "this approach might be better in terms of performance in many cases the bad thing is that delegate the",
    "start": "488560",
    "end": "494479"
  },
  {
    "text": "compiler nuget package has stuck on version 0.28 and",
    "start": "494479",
    "end": "499919"
  },
  {
    "text": "it's not supported so practically speaking starting from",
    "start": "499919",
    "end": "506560"
  },
  {
    "text": "expression and transforming them into delegates all the way seems to be a much more reliable solution provided",
    "start": "506560",
    "end": "512719"
  },
  {
    "text": "though that performance limitations are not a problem for a project or there is a way to solve them during",
    "start": "512719",
    "end": "518479"
  },
  {
    "text": "this talk i will only consider the approach when delegates are created from expressions and expressions are never created from",
    "start": "518479",
    "end": "524480"
  },
  {
    "text": "delegates i'll be using cash to reduce the performance impact",
    "start": "524480",
    "end": "529920"
  },
  {
    "text": "we are good to go up here let's review another use case",
    "start": "532399",
    "end": "537920"
  },
  {
    "text": "some criteria don't have to always be used together we might want to show products that are",
    "start": "538160",
    "end": "544399"
  },
  {
    "text": "for sale or are in stock in different contexts independently",
    "start": "544399",
    "end": "550240"
  },
  {
    "text": "and sometimes we might want to only show the products that satisfy both criteria",
    "start": "550240",
    "end": "556480"
  },
  {
    "text": "so there is an easy way to do it when a predicate is combined using the and statement we can just chain multiple",
    "start": "556480",
    "end": "563920"
  },
  {
    "text": "work calls together and let query provider do the job",
    "start": "563920",
    "end": "568720"
  },
  {
    "text": "also corresponding lambdas can be easily defined as static read-only variables",
    "start": "569279",
    "end": "575040"
  },
  {
    "text": "so we don't have to bother with possible code duplications",
    "start": "575040",
    "end": "579760"
  },
  {
    "text": "but what if i wanted to combine some criteria using the or operator",
    "start": "580800",
    "end": "587760"
  },
  {
    "text": "i need something like this and here's the problem this code won't compile once again",
    "start": "588240",
    "end": "594000"
  },
  {
    "text": "because the or operator is not defined for the expression found bull type",
    "start": "594000",
    "end": "599600"
  },
  {
    "text": "this scenario is addressed within the scope of the specification button this pattern is explained in the main",
    "start": "599600",
    "end": "605360"
  },
  {
    "text": "drawing design blog book by eric evans and is frequently used in the context of domain driven design",
    "start": "605360",
    "end": "612480"
  },
  {
    "text": "so let's take a closer look the pattern outlines a business rule",
    "start": "612480",
    "end": "618560"
  },
  {
    "text": "that is combinable with other business rules in this example that we now see on the screen a unit of",
    "start": "618560",
    "end": "625440"
  },
  {
    "text": "business logic inherits its functionality from the abstract composite specification class",
    "start": "625440",
    "end": "630880"
  },
  {
    "text": "the composite specification class has a one function called is satisfied by that returns a boolean",
    "start": "630880",
    "end": "637760"
  },
  {
    "text": "value this is kind of authentic implementation from java world the usage of this implementation is",
    "start": "637760",
    "end": "643839"
  },
  {
    "text": "quite limited because it relies on the is satisfied by method which assumes",
    "start": "643839",
    "end": "648959"
  },
  {
    "text": "that all the data is available in memory you surely can try to overcome this problem by combining specifications with",
    "start": "648959",
    "end": "655680"
  },
  {
    "text": "query object button however you will most likely end up finding yourself sinking into quicksand",
    "start": "655680",
    "end": "662320"
  },
  {
    "text": "parsing all available combinations of your specification with which essentially means implementing a",
    "start": "662320",
    "end": "668160"
  },
  {
    "text": "mechanism very similar to expression trees on your own luckily we don't have to do this because",
    "start": "668160",
    "end": "674000"
  },
  {
    "text": "microsoft has already gave us the technology so we only need to build a tiny wrapper",
    "start": "674000",
    "end": "680399"
  },
  {
    "text": "on top of the original expression function type and add",
    "start": "680399",
    "end": "685839"
  },
  {
    "text": "boolean support so this code will compel will compile it's not only solved",
    "start": "685839",
    "end": "694160"
  },
  {
    "text": "the original problem but also improved the readability and reusability of our code",
    "start": "694480",
    "end": "700079"
  },
  {
    "text": "which is nice so let's take a closer a closer look at the",
    "start": "700079",
    "end": "705279"
  },
  {
    "text": "implementation here is how the operators are defined in the wrapper",
    "start": "705279",
    "end": "712560"
  },
  {
    "text": "there is just one little thing to do unfortunately these matters just don't",
    "start": "713279",
    "end": "718959"
  },
  {
    "text": "exist but we can fix that by writing some extension methods so",
    "start": "718959",
    "end": "726959"
  },
  {
    "text": "let's write some code and now we are at the point when you can",
    "start": "726959",
    "end": "732320"
  },
  {
    "text": "open your favorite ide if you like i'll be sharing my screen and talk and talk you through the code",
    "start": "732320",
    "end": "738320"
  },
  {
    "text": "so you can follow me here or using your setup either approach works for me",
    "start": "738320",
    "end": "747920"
  },
  {
    "text": "so the naive implementation",
    "start": "748399",
    "end": "753600"
  },
  {
    "text": "would look like this i started with this one so here's the expression here's the another",
    "start": "753600",
    "end": "760560"
  },
  {
    "text": "one and expression dot or else looks like a good starting point",
    "start": "760560",
    "end": "768079"
  },
  {
    "text": "and yeah maybe maybe maybe this would work i don't know so",
    "start": "768079",
    "end": "775120"
  },
  {
    "text": "that was uh my thoughts actually what we what we have here",
    "start": "775120",
    "end": "782639"
  },
  {
    "text": "this implementation will fail with invalid operation exception let's check that",
    "start": "782639",
    "end": "790160"
  },
  {
    "text": "so you see this on the screen okay let's check another implementation",
    "start": "793040",
    "end": "802240"
  },
  {
    "text": "so the problem was that i was trying to combine combine lambdax expressions",
    "start": "802720",
    "end": "809519"
  },
  {
    "text": "so love essentially is a body and parameters so",
    "start": "809519",
    "end": "817920"
  },
  {
    "text": "argument exception is trying to tell us that just makes no sense to combine two",
    "start": "817920",
    "end": "823440"
  },
  {
    "text": "lambdas together instead of trying to combine lambda let's try to combine lambda's bodies",
    "start": "823440",
    "end": "831360"
  },
  {
    "text": "and this is this is something which is closer to the actual",
    "start": "831360",
    "end": "836560"
  },
  {
    "text": "implementation but still fails but with another exception which is system argument exception",
    "start": "836560",
    "end": "843199"
  },
  {
    "text": "and trust me let's verify that and the exception would be incorrect",
    "start": "843199",
    "end": "849360"
  },
  {
    "text": "number of parameters supplied for lambda declaration so now you can trust me",
    "start": "849360",
    "end": "857839"
  },
  {
    "text": "well that was uh kind of disappointing",
    "start": "858639",
    "end": "866240"
  },
  {
    "text": "because you cannot easily find the official documentation how to do this properly so instead of",
    "start": "866240",
    "end": "873850"
  },
  {
    "text": "[Music] instead of following the official documentation i had to",
    "start": "873850",
    "end": "879120"
  },
  {
    "text": "search on the internet looking for answers and luckily i found one",
    "start": "879120",
    "end": "885839"
  },
  {
    "text": "joseph alba is famous for being the author of c sharp in a nutshell book",
    "start": "886880",
    "end": "894000"
  },
  {
    "text": "and he is also the author of linkipad software and linkyukit",
    "start": "894000",
    "end": "899920"
  },
  {
    "text": "library that uses link you keep internally joseph needed to solve the same issue",
    "start": "899920",
    "end": "906320"
  },
  {
    "text": "for the linker kit so he suggested using using expression invoke to fix the issue",
    "start": "906320",
    "end": "911680"
  },
  {
    "text": "and this approach works for me at least partially the combined expression",
    "start": "911680",
    "end": "917120"
  },
  {
    "text": "works as expected when applied to in-memory variables or when compiled into delegate it also",
    "start": "917120",
    "end": "923920"
  },
  {
    "text": "works fine with entity framework core but not with entity framework 6 and entity framework 6 will throw not",
    "start": "923920",
    "end": "930959"
  },
  {
    "text": "supported exception once you try to pass this the expression that combines at least",
    "start": "930959",
    "end": "936000"
  },
  {
    "text": "one instance of expression invoke in the expression tree so",
    "start": "936000",
    "end": "944639"
  },
  {
    "text": "why that's a good question",
    "start": "947519",
    "end": "955839"
  },
  {
    "text": "let's review the explain uh let's let's first examine the official",
    "start": "958639",
    "end": "963920"
  },
  {
    "text": "documentation here's what i found um in the official",
    "start": "963920",
    "end": "969440"
  },
  {
    "text": "documentation i think that you have already read this from the screen",
    "start": "969440",
    "end": "975440"
  },
  {
    "text": "so does it make sense to you no okay here is the explanation",
    "start": "975440",
    "end": "984240"
  },
  {
    "text": "from jodoff",
    "start": "984240",
    "end": "986880"
  },
  {
    "text": "any better now",
    "start": "992880",
    "end": "997839"
  },
  {
    "text": "actually it doesn't matter because the original goal was to be able to combine the",
    "start": "998399",
    "end": "1003600"
  },
  {
    "text": "expressions as if you wrote the uh wrote them uh by hand",
    "start": "1003600",
    "end": "1010720"
  },
  {
    "text": "so joseph recommends fixing this problem using a special as expandable method and i won't go to the technical details",
    "start": "1010720",
    "end": "1017360"
  },
  {
    "text": "of this method here that's too tedious and boring uh furthermore there is another method for",
    "start": "1017360",
    "end": "1024079"
  },
  {
    "text": "achieving the same result which creates exactly the same expression tree as if wrote by hand i borrowed this",
    "start": "1024079",
    "end": "1031120"
  },
  {
    "text": "implementation from the from the blog post by pete montgomery who in turn claims that it was meek ef team who introduced",
    "start": "1031120",
    "end": "1039199"
  },
  {
    "text": "that technique to him so let's get back to food",
    "start": "1039199",
    "end": "1052240"
  },
  {
    "text": "so first let's examine the implementation",
    "start": "1052240",
    "end": "1062880"
  },
  {
    "text": "of joseph albachar",
    "start": "1063520",
    "end": "1067840"
  },
  {
    "text": "so let's take a look that's the first expression",
    "start": "1080400",
    "end": "1085919"
  },
  {
    "text": "which is x less than one or else x greater than three and",
    "start": "1086640",
    "end": "1092880"
  },
  {
    "text": "the another one",
    "start": "1092880",
    "end": "1096320"
  },
  {
    "text": "i'm not sure if you can see the text here um let me try to all right",
    "start": "1098240",
    "end": "1105759"
  },
  {
    "text": "so oh okay so here is invoke which",
    "start": "1107120",
    "end": "1113600"
  },
  {
    "text": "would never happen here if we build this expression by hand and um",
    "start": "1113600",
    "end": "1122400"
  },
  {
    "text": "here is the original expressions so there is no",
    "start": "1122400",
    "end": "1130720"
  },
  {
    "text": "there is no invoke here what pitman montgomery suggests",
    "start": "1130720",
    "end": "1138240"
  },
  {
    "text": "to do is a little bit trickier",
    "start": "1138240",
    "end": "1143840"
  },
  {
    "text": "what we need here is a way to compose expressions with parameters and the",
    "start": "1143919",
    "end": "1150400"
  },
  {
    "text": "exception was due to the parameters was binded to",
    "start": "1150400",
    "end": "1155520"
  },
  {
    "text": "the body of the previous expressions expression in what we need we need to rebind all the parameters",
    "start": "1155520",
    "end": "1162720"
  },
  {
    "text": "uh from one one expression to another so here is the tricky part we take first",
    "start": "1162720",
    "end": "1169600"
  },
  {
    "text": "expression we take the second expression and we take the function",
    "start": "1169600",
    "end": "1175440"
  },
  {
    "text": "that will merge those expressions in our case that's or else expression we create a",
    "start": "1175440",
    "end": "1180880"
  },
  {
    "text": "dictionary to map all the parameters and now for the second body we replace",
    "start": "1180880",
    "end": "1187840"
  },
  {
    "text": "all the parameters with the parameters of the first expression uh which",
    "start": "1187840",
    "end": "1194160"
  },
  {
    "text": "parameter rebinder replace parameter method will do for us and once those parameters are rebinded",
    "start": "1194160",
    "end": "1200880"
  },
  {
    "text": "from expression one to expression two we can create uh lambdas",
    "start": "1200880",
    "end": "1206240"
  },
  {
    "text": "which uh would look like exactly if as we wrote them by hand",
    "start": "1206240",
    "end": "1212480"
  },
  {
    "text": "and let's check this as well so here was um implementation by the file",
    "start": "1212480",
    "end": "1220320"
  },
  {
    "text": "bahari so let's check this",
    "start": "1220320",
    "end": "1225360"
  },
  {
    "text": "so this works which means that these two implementation this one and another one",
    "start": "1232000",
    "end": "1240799"
  },
  {
    "text": "that's my previous debug session",
    "start": "1240799",
    "end": "1244399"
  },
  {
    "text": "so these two will be exactly the same the same",
    "start": "1247120",
    "end": "1254240"
  },
  {
    "text": "this technique not only makes it possible to combine predicates with or and not statements but also unlocks",
    "start": "1259840",
    "end": "1266799"
  },
  {
    "text": "some more advanced tricks let's say we have a specification for a product",
    "start": "1266799",
    "end": "1272880"
  },
  {
    "text": "and we have a specification for a category or a product group if you will so we",
    "start": "1272880",
    "end": "1279840"
  },
  {
    "text": "would like to sort all the categories and put ones that have a good enough rating on top",
    "start": "1279840",
    "end": "1286480"
  },
  {
    "text": "what i what if i need to reuse the specification that is originally defined for the category class",
    "start": "1287600",
    "end": "1294400"
  },
  {
    "text": "for products still i cannot do this again because of",
    "start": "1294400",
    "end": "1301039"
  },
  {
    "text": "the type mismatch unless i call select many instead of select but what if i don't want to what if i'm",
    "start": "1301039",
    "end": "1308559"
  },
  {
    "text": "under certain circumstances when i only have a queryable product",
    "start": "1308559",
    "end": "1315120"
  },
  {
    "text": "what we have here that takes category as an in and",
    "start": "1317280",
    "end": "1322880"
  },
  {
    "text": "produces boolean value as a result when the lambda that takes product as",
    "start": "1322880",
    "end": "1329440"
  },
  {
    "text": "input and produces boolean as a result so in order to use the existing",
    "start": "1329440",
    "end": "1336080"
  },
  {
    "text": "specification we only need another expression that takes product and returns category",
    "start": "1336080",
    "end": "1343039"
  },
  {
    "text": "once combined we've got exactly what we need those of you who are familiar with functional",
    "start": "1344159",
    "end": "1349200"
  },
  {
    "text": "programming might notice that this might somehow remind you what functional composition is for those",
    "start": "1349200",
    "end": "1354880"
  },
  {
    "text": "who are not familiar with functional programming i highly recommend watching power composition talk by scott flashing",
    "start": "1354880",
    "end": "1360720"
  },
  {
    "text": "scott has already given this talk today but i think that you can find this video on youtube as well",
    "start": "1360720",
    "end": "1369039"
  },
  {
    "text": "so we are finally at the point when the true power of expression trees is revealed once we",
    "start": "1369520",
    "end": "1376000"
  },
  {
    "text": "figured out how to combine expressions of any kind it's clear that this is a",
    "start": "1376000",
    "end": "1381679"
  },
  {
    "text": "powerful code generation tool which still much easier to use than the things like reflection emit",
    "start": "1381679",
    "end": "1389360"
  },
  {
    "text": "number two some expression might be easily written compiled into delegates and cached",
    "start": "1389360",
    "end": "1394799"
  },
  {
    "text": "and number three other ones can be dynamically built in runtime and later combined or not with some expressions that are",
    "start": "1394799",
    "end": "1401919"
  },
  {
    "text": "written by human beings that's meta programming time",
    "start": "1401919",
    "end": "1407840"
  },
  {
    "text": "so the first good example of using expression expressions accompanied by reflection is",
    "start": "1412159",
    "end": "1419200"
  },
  {
    "text": "automapper so",
    "start": "1419200",
    "end": "1426240"
  },
  {
    "text": "let's take a look",
    "start": "1427279",
    "end": "1431840"
  },
  {
    "text": "so let's say we have products",
    "start": "1446720",
    "end": "1450480"
  },
  {
    "text": "and what we used to write",
    "start": "1452000",
    "end": "1459840"
  },
  {
    "text": "is a boring code with handwritten selects if i have a data a video and",
    "start": "1461279",
    "end": "1468720"
  },
  {
    "text": "i have almost the same um properties in this detail i have to",
    "start": "1468720",
    "end": "1476000"
  },
  {
    "text": "write tedious and boring mapping code uh the things like this are kind of",
    "start": "1476000",
    "end": "1482559"
  },
  {
    "text": "obvious if a detailer has the category name property that it's",
    "start": "1482559",
    "end": "1489440"
  },
  {
    "text": "obvious that it should be mapped to a category name a property of the original",
    "start": "1489440",
    "end": "1496000"
  },
  {
    "text": "entity so this how product list dtl looks like category name here and the original",
    "start": "1496000",
    "end": "1502960"
  },
  {
    "text": "entity is it's here so yeah that's obvious product",
    "start": "1502960",
    "end": "1511679"
  },
  {
    "text": "dot category dot name so instead of instead of writing this boring code by",
    "start": "1511679",
    "end": "1518080"
  },
  {
    "text": "hand we can use automapper project2 method which will kindly",
    "start": "1518080",
    "end": "1524720"
  },
  {
    "text": "build all of these mappings uh automatically based on conventions",
    "start": "1524720",
    "end": "1533919"
  },
  {
    "text": "but what if i told you that we can do the same trick with",
    "start": "1533919",
    "end": "1540240"
  },
  {
    "text": "filtering and sorting basically that is how system link dynamic core works",
    "start": "1540240",
    "end": "1546480"
  },
  {
    "text": "under the hood so let me run the web up",
    "start": "1546480",
    "end": "1557360"
  },
  {
    "text": "so let's see here is my very simple minimalistic e-commerce",
    "start": "1557360",
    "end": "1564000"
  },
  {
    "text": "solution and i have some laptops here some smartphones",
    "start": "1564000",
    "end": "1570159"
  },
  {
    "text": "what if i'm interested in apple macbooks only here that's fine",
    "start": "1570159",
    "end": "1577919"
  },
  {
    "text": "okay what if i would like to find something else that's fine",
    "start": "1577919",
    "end": "1583360"
  },
  {
    "text": "filtering is working also maybe i would like to sort by",
    "start": "1583360",
    "end": "1589440"
  },
  {
    "text": "name or sometimes i'd like to sort by price the sorting also works so you might be",
    "start": "1589440",
    "end": "1596000"
  },
  {
    "text": "thinking that there is a boring code like e filter is said then",
    "start": "1596000",
    "end": "1601039"
  },
  {
    "text": "add where statement blah blah blah no it works like this",
    "start": "1601039",
    "end": "1608480"
  },
  {
    "text": "so let me remove this commanding code for now i have a product filter plus",
    "start": "1609360",
    "end": "1617679"
  },
  {
    "text": "a simple one that has name and price and my product class also has name",
    "start": "1617679",
    "end": "1625120"
  },
  {
    "text": "and price property so",
    "start": "1625120",
    "end": "1630559"
  },
  {
    "text": "this means that if product filter name property is set or price",
    "start": "1632799",
    "end": "1639600"
  },
  {
    "text": "product filter dot price property is set we can build this filter automatically",
    "start": "1639600",
    "end": "1646559"
  },
  {
    "text": "and that's what i do so i need to write uh just one liner",
    "start": "1646559",
    "end": "1651840"
  },
  {
    "text": "here and spec builder is a is a helper helper class that we commonly use in our",
    "start": "1651840",
    "end": "1659840"
  },
  {
    "text": "production code uh so it automatically searches for the",
    "start": "1659840",
    "end": "1665200"
  },
  {
    "text": "same properties by conventions then caches the filter query and",
    "start": "1665200",
    "end": "1670240"
  },
  {
    "text": "uh i have overridden uh the implicit operator",
    "start": "1670240",
    "end": "1677760"
  },
  {
    "text": "operator for and this specification that is built by spec builder so i can i can use",
    "start": "1677760",
    "end": "1685760"
  },
  {
    "text": "the specification instance as a parameter to wear a method so no more boring filtering code the",
    "start": "1685760",
    "end": "1692720"
  },
  {
    "text": "same stuff for ordering this is a little bit tricky because order by",
    "start": "1692720",
    "end": "1699120"
  },
  {
    "text": "method is not the only one we have order by an order by descending and we have two generics there",
    "start": "1699120",
    "end": "1706399"
  },
  {
    "text": "so the implementation is a little bit more difficult i'll just show you sources to give you",
    "start": "1706399",
    "end": "1714320"
  },
  {
    "text": "a general idea but i wouldn't go into technical details",
    "start": "1714320",
    "end": "1719440"
  },
  {
    "text": "because well it's more like writing some boring code once in order to avoid",
    "start": "1719440",
    "end": "1726640"
  },
  {
    "text": "writing boring code all the time",
    "start": "1726640",
    "end": "1730799"
  },
  {
    "text": "so let's get back to the presentation",
    "start": "1732000",
    "end": "1739840"
  },
  {
    "text": "actually that was that was a simple one we can do some crazy things for instance",
    "start": "1745120",
    "end": "1753200"
  },
  {
    "text": "data validation is a very common task that can be simplified long time ago um when",
    "start": "1753200",
    "end": "1761840"
  },
  {
    "text": "we were younger and there was no react angular view and dozens of other",
    "start": "1761840",
    "end": "1768559"
  },
  {
    "text": "javascript frameworks we used write validation logic once on the back end",
    "start": "1768559",
    "end": "1773760"
  },
  {
    "text": "and welcome to brand new world no one uses server site rendering anymore",
    "start": "1773760",
    "end": "1779039"
  },
  {
    "text": "web is spi sent me now so now we have to write validation logic twice one on the back end and the",
    "start": "1779039",
    "end": "1786480"
  },
  {
    "text": "other one on the front end but we didn't have to javascript",
    "start": "1786480",
    "end": "1792399"
  },
  {
    "text": "developers use babel to transpile javascript code to another javascript code",
    "start": "1792399",
    "end": "1797600"
  },
  {
    "text": "or g6 to javascript or typescript to javascript anything to javascript i have a better",
    "start": "1797600",
    "end": "1804080"
  },
  {
    "text": "idea what if we just generated it from g-sharp",
    "start": "1804080",
    "end": "1809279"
  },
  {
    "text": "instead of writing it so luckily there are libraries javascript libraries to build web forms",
    "start": "1809279",
    "end": "1815760"
  },
  {
    "text": "with built-in validation support so let's try try to take advantage of it here here are some examples",
    "start": "1815760",
    "end": "1823840"
  },
  {
    "text": "this is a screenshot from tcop tcomp form project on github take a look at",
    "start": "1823840",
    "end": "1830640"
  },
  {
    "text": "var predicate predicate equals function which returns",
    "start": "1830640",
    "end": "1837679"
  },
  {
    "text": "x uh greater or equals zero looks like an expression right",
    "start": "1837679",
    "end": "1846000"
  },
  {
    "text": "then this is ngx formally a form builder for angular",
    "start": "1846000",
    "end": "1852159"
  },
  {
    "text": "and what we see here validators ip well these are",
    "start": "1852159",
    "end": "1858399"
  },
  {
    "text": "expressions we only need to build exactly the same expressions from the c-sharp code and transfer them",
    "start": "1858399",
    "end": "1864880"
  },
  {
    "text": "somehow to the front-end we can even include this method mate information into this work",
    "start": "1864880",
    "end": "1870399"
  },
  {
    "text": "definitions if we want to make sure that some essential information is communicated to the front-end as a part",
    "start": "1870399",
    "end": "1877679"
  },
  {
    "text": "of type definitions and let's get back to the code now",
    "start": "1877679",
    "end": "1883919"
  },
  {
    "text": "so [Music]",
    "start": "1885039",
    "end": "1888778"
  },
  {
    "text": "i'll open my example which is t-com",
    "start": "1890320",
    "end": "1898000"
  },
  {
    "text": "um okay let's go here and i'll click on save and now i see that",
    "start": "1898399",
    "end": "1903760"
  },
  {
    "text": "price must be greater than 100",
    "start": "1903760",
    "end": "1908799"
  },
  {
    "text": "so um when i when i click here",
    "start": "1908799",
    "end": "1916399"
  },
  {
    "text": "what you might not have seen is that",
    "start": "1916399",
    "end": "1921840"
  },
  {
    "text": "that there is a server request which gets the error",
    "start": "1926559",
    "end": "1933279"
  },
  {
    "text": "message and the predicate from the server so let's get back here",
    "start": "1933279",
    "end": "1942000"
  },
  {
    "text": "what i do here is when component then multi-mod function is called",
    "start": "1942000",
    "end": "1948960"
  },
  {
    "text": "and that's the best way to do web request in react we do",
    "start": "1948960",
    "end": "1955440"
  },
  {
    "text": "a adjective request to api",
    "start": "1955440",
    "end": "1960398"
  },
  {
    "text": "form method of our controller and uh get the json file then we build this",
    "start": "1960840",
    "end": "1967919"
  },
  {
    "text": "refi uh refinement from data that is transferred from the backend",
    "start": "1967919",
    "end": "1973039"
  },
  {
    "text": "and this data is c-sharp expression that i translated to",
    "start": "1973039",
    "end": "1982320"
  },
  {
    "text": "well in this particular example to string but we can also translate it to",
    "start": "1982320",
    "end": "1989200"
  },
  {
    "text": "perfectly valid javascript and in this specific example in this specific case uh string actually",
    "start": "1989200",
    "end": "1996399"
  },
  {
    "text": "works for us because what we get is a valid javascript the translation would",
    "start": "1996399",
    "end": "2002559"
  },
  {
    "text": "be exactly the same so i borrowed this implementation from",
    "start": "2002559",
    "end": "2010960"
  },
  {
    "text": "from the existing expression dot to string method which is basically an expression visitor",
    "start": "2010960",
    "end": "2018559"
  },
  {
    "text": "it's quite complicated to to transpile all kinds of c sharp code to",
    "start": "2018559",
    "end": "2026159"
  },
  {
    "text": "all kinds of javascript code and i don't think that that's even possible because uh these",
    "start": "2026159",
    "end": "2032960"
  },
  {
    "text": "are just different languages and they're basically two different so there are",
    "start": "2032960",
    "end": "2039519"
  },
  {
    "text": "subsets of code that cannot be translated to javascript but what we can do we can create",
    "start": "2039519",
    "end": "2046799"
  },
  {
    "text": "a reasonable subset of the expressions that we would like to support in our",
    "start": "2046799",
    "end": "2052079"
  },
  {
    "text": "application and then for instance we can define",
    "start": "2052079",
    "end": "2057440"
  },
  {
    "text": "we can define a validation attribute and decorate our code with this kind of",
    "start": "2057440",
    "end": "2064320"
  },
  {
    "text": "validation attribute that will include validation logic which is defined as expressions from",
    "start": "2064320",
    "end": "2072480"
  },
  {
    "text": "our type to boo then these expressions can be transferred to javascript and",
    "start": "2072480",
    "end": "2079919"
  },
  {
    "text": "we don't have to write any javascript validation on our own because this javascript will be",
    "start": "2079919",
    "end": "2089599"
  },
  {
    "text": "generated for us all right",
    "start": "2089599",
    "end": "2096559"
  },
  {
    "text": "so what about tests",
    "start": "2099920",
    "end": "2104078"
  },
  {
    "text": "i i've got some more weird scenarios where expression trees might be helpful",
    "start": "2105280",
    "end": "2111920"
  },
  {
    "text": "you might be familiar with mocking frameworks like mocu what you might not notice is that how",
    "start": "2111920",
    "end": "2118320"
  },
  {
    "text": "mocu builds mocks internally now you're looking at screenshot from the",
    "start": "2118320",
    "end": "2123839"
  },
  {
    "text": "marquee documentation these lines of code are not delegates these are expressions so moku actually",
    "start": "2123839",
    "end": "2131280"
  },
  {
    "text": "analyzes the expressions uh the expression trees i'm sorry and uses castle.dynamic proxy internally to",
    "start": "2131280",
    "end": "2138240"
  },
  {
    "text": "compile classes in runtime so the code that you write in the setup",
    "start": "2138240",
    "end": "2143920"
  },
  {
    "text": "will never run an expression visitor will walk through the tree and create a class",
    "start": "2143920",
    "end": "2150000"
  },
  {
    "text": "that is actually will be created so this is a tree that's not coded being invoked",
    "start": "2150000",
    "end": "2157599"
  },
  {
    "text": "i realized that this trick might be abused even harder i don't have a live demo for that but",
    "start": "2157599",
    "end": "2163119"
  },
  {
    "text": "just let me know if you want to go to some uh technical details",
    "start": "2163119",
    "end": "2168400"
  },
  {
    "text": "what we can do is to build a method that takes any controller from our",
    "start": "2168400",
    "end": "2174880"
  },
  {
    "text": "solution and which takes a controller method as a parameter provided that this",
    "start": "2174880",
    "end": "2181599"
  },
  {
    "text": "parameter is an expression and not delegate so by um by passing this",
    "start": "2181599",
    "end": "2188560"
  },
  {
    "text": "um expression into some special function we can analyze the invocation of the",
    "start": "2188560",
    "end": "2195200"
  },
  {
    "text": "controller method at ins and instead of instantiating the original controller",
    "start": "2195200",
    "end": "2201119"
  },
  {
    "text": "uh we can build a web request so that's how we can um write uh integration tests",
    "start": "2201119",
    "end": "2209119"
  },
  {
    "text": "that actually uh do web requests to out to our api but",
    "start": "2209119",
    "end": "2214880"
  },
  {
    "text": "we can use our our source code including detail files including",
    "start": "2214880",
    "end": "2221040"
  },
  {
    "text": "controllers including intellisense so",
    "start": "2221040",
    "end": "2226079"
  },
  {
    "text": "we would write a code that looks like a call of uh a method of the controller but",
    "start": "2226079",
    "end": "2232480"
  },
  {
    "text": "what would actually happen is that we we would provide a an expression tree to",
    "start": "2232480",
    "end": "2239040"
  },
  {
    "text": "the method then this method will be analyzed and once it's analyzed we build a",
    "start": "2239040",
    "end": "2246240"
  },
  {
    "text": "web request and this web request goes to the server and get back and everything is being",
    "start": "2246240",
    "end": "2252560"
  },
  {
    "text": "analyzed under the hood so this idea somehow is related to",
    "start": "2252560",
    "end": "2257599"
  },
  {
    "text": "computation expressions uh in f-sharp if you if you know what i mean so",
    "start": "2257599",
    "end": "2264079"
  },
  {
    "text": "anyway this is a complex topic so if you have some additional questions please let me know",
    "start": "2264079",
    "end": "2269680"
  },
  {
    "text": "and just ask me and we can discuss the details",
    "start": "2269680",
    "end": "2275440"
  },
  {
    "text": "last but not least this is a topic that we actively discussed with vagifa belov",
    "start": "2277760",
    "end": "2285680"
  },
  {
    "text": "you might know him as a musician and in the seaspeaker we together with him",
    "start": "2285680",
    "end": "2291920"
  },
  {
    "text": "and with dylan beatty and some other great guys they're from geeks at conferences from time to time",
    "start": "2291920",
    "end": "2298400"
  },
  {
    "text": "and time to time and i hope that we could have done a great gig here at andes this year",
    "start": "2298400",
    "end": "2304400"
  },
  {
    "text": "well you know maybe next time so i'm feeling lucky about it uh",
    "start": "2304400",
    "end": "2311520"
  },
  {
    "text": "anyway vagine told me that um he has been under impression that rule",
    "start": "2311520",
    "end": "2317200"
  },
  {
    "text": "engine that comes with microsoft wins workflow foundation is slow",
    "start": "2317200",
    "end": "2322640"
  },
  {
    "text": "very slow so um he and his team used to i used it to execute some of",
    "start": "2322640",
    "end": "2329920"
  },
  {
    "text": "their business rules and uh soon they found out that rule processing",
    "start": "2329920",
    "end": "2335200"
  },
  {
    "text": "slows down the entire application execution that was really strange it was hard to believe",
    "start": "2335200",
    "end": "2341280"
  },
  {
    "text": "that industry strength through engine like this needs a long time to process that",
    "start": "2341280",
    "end": "2347280"
  },
  {
    "text": "because these business rules were quite simple so",
    "start": "2347280",
    "end": "2353839"
  },
  {
    "text": "eventually they ran a profiler and it immediately showed that there that",
    "start": "2353839",
    "end": "2360800"
  },
  {
    "text": "the time was spent in just one place in fact it was not the",
    "start": "2360800",
    "end": "2368079"
  },
  {
    "text": "actual rule validation but preparation for it in sensation of the wf rule passer",
    "start": "2368079",
    "end": "2375599"
  },
  {
    "text": "the parser class is not public so they used a trick to obtain its instance",
    "start": "2375599",
    "end": "2382079"
  },
  {
    "text": "they retrieved its non-public constructor information with a reflection and then called invoke and it was so",
    "start": "2382079",
    "end": "2389200"
  },
  {
    "text": "slow that they noticed it even in their integration tests so what they did is they choose their",
    "start": "2389200",
    "end": "2396240"
  },
  {
    "text": "constructor information compiled expression and location to into their bits cached them and",
    "start": "2396240",
    "end": "2404160"
  },
  {
    "text": "used them instead of activate or create instance you can see some benchmarks",
    "start": "2404160",
    "end": "2411440"
  },
  {
    "text": "here so activator and constructor invoke and the difference",
    "start": "2411440",
    "end": "2418160"
  },
  {
    "text": "is uh huge when we use uh constructor",
    "start": "2418160",
    "end": "2425040"
  },
  {
    "text": "so here's the clue you can use uh compiled expression",
    "start": "2425040",
    "end": "2430960"
  },
  {
    "text": "instead of reflection of course i don't really mean somebody should completely stop using",
    "start": "2430960",
    "end": "2436480"
  },
  {
    "text": "activator create instance but there are certain use cases like iec frameworks",
    "start": "2436480",
    "end": "2442079"
  },
  {
    "text": "when it gives clear performance advantage so let's review the iec framework performance comparison",
    "start": "2442079",
    "end": "2448160"
  },
  {
    "text": "table clearly some of them are faster than other is it coincident i don't think so",
    "start": "2448160",
    "end": "2456160"
  },
  {
    "text": "and i just know because i examined the implementation of single injector that under the hood what",
    "start": "2456160",
    "end": "2463040"
  },
  {
    "text": "they do they build the composition route they search for all the dependencies",
    "start": "2463040",
    "end": "2468560"
  },
  {
    "text": "then they create the constructors compile them and and that's all once compiled uh we",
    "start": "2468560",
    "end": "2476160"
  },
  {
    "text": "run delegates no reflection invoked no not not record no not reflect later",
    "start": "2476160",
    "end": "2482319"
  },
  {
    "text": "reflection and location i'm sorry so basically don't use invoke either",
    "start": "2482319",
    "end": "2489920"
  },
  {
    "text": "um wrapping up so what we learn uh after three years of",
    "start": "2489920",
    "end": "2496400"
  },
  {
    "text": "actively using expression trees in real projects your team can deliver crude much faster",
    "start": "2496400",
    "end": "2502319"
  },
  {
    "text": "and write less code in.net javascript typecrip and probably",
    "start": "2502319",
    "end": "2507440"
  },
  {
    "text": "any other languages then your lead developer has to know some",
    "start": "2507440",
    "end": "2514960"
  },
  {
    "text": "advanced stuff number three expression.compile can be",
    "start": "2514960",
    "end": "2521200"
  },
  {
    "text": "cached if all expressions are defined as static and that's why you want to define",
    "start": "2521200",
    "end": "2528240"
  },
  {
    "text": "all or most of your expressions as static so your your code might be shorter",
    "start": "2528240",
    "end": "2536240"
  },
  {
    "text": "but harder to understand and that's a trade-off you need to decide if you want to go into some",
    "start": "2536240",
    "end": "2542319"
  },
  {
    "text": "uh technical details some weird stuff if you can get advantage of it",
    "start": "2542319",
    "end": "2549520"
  },
  {
    "text": "and that's pretty much this is it so",
    "start": "2549520",
    "end": "2556240"
  }
]