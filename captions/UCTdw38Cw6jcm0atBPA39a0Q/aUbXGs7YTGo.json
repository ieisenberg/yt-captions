[
  {
    "start": "0",
    "end": "300000"
  },
  {
    "text": "so good afternoon I'm bill Wagner and this Twitter handle on the slide so you",
    "start": "5150",
    "end": "10889"
  },
  {
    "text": "can contact me afterwards any way you want it's also my github handle so with",
    "start": "10889",
    "end": "16260"
  },
  {
    "text": "any other questions go ahead and go to the C sharp Docs repo and you can pose questions and ask issues there so the",
    "start": "16260",
    "end": "24210"
  },
  {
    "text": "title of this I chose rather deliberately so we're",
    "start": "24210",
    "end": "29460"
  },
  {
    "text": "what I want to have happen out of this talk so I'm going to show you a variety of different things that you can do with",
    "start": "29460",
    "end": "35610"
  },
  {
    "text": "the new features we've added into the c-sharp language that should make you more productive and should increase the",
    "start": "35610",
    "end": "42420"
  },
  {
    "text": "quality and the clarity of the code that you write so what that does mean is as I start each of the demos and I show some",
    "start": "42420",
    "end": "48899"
  },
  {
    "text": "code that looks like it could have been written a few years ago I don't want you to go back and go oh no I've got to",
    "start": "48899",
    "end": "55469"
  },
  {
    "text": "rewrite all this because that codes probably been tested it certainly works it's certainly in a good spot but as",
    "start": "55469",
    "end": "62129"
  },
  {
    "text": "we've been involving the language we wanted to make that a little better so the idea behind this is if you think",
    "start": "62129",
    "end": "69210"
  },
  {
    "text": "about computer languages programming languages they are all opinionated they",
    "start": "69210",
    "end": "76049"
  },
  {
    "text": "were designed by people who thought certain things and certain techniques and certain goals were important other",
    "start": "76049",
    "end": "83070"
  },
  {
    "text": "things not so much so at the time of their design in every instance they come",
    "start": "83070",
    "end": "89189"
  },
  {
    "text": "up with ideas that say we believe this is the way you should write software and this is how you should do it and they",
    "start": "89189",
    "end": "96659"
  },
  {
    "text": "made those things easy but if you look at the arc of computer programming",
    "start": "96659",
    "end": "102450"
  },
  {
    "text": "languages they usually take a long time to get get a lot of adoption and once",
    "start": "102450",
    "end": "107939"
  },
  {
    "text": "they do have a lot of adoption they take a long time to stay in the industry because there is so much code out there",
    "start": "107939",
    "end": "114509"
  },
  {
    "text": "that is using that language so every programming language expresses opinions",
    "start": "114509",
    "end": "121009"
  },
  {
    "text": "in a lot of ways the programming languages will have intentional opinions",
    "start": "121009",
    "end": "127350"
  },
  {
    "text": "we think this is a good way to solve these kinds of problems some languages",
    "start": "127350",
    "end": "133260"
  },
  {
    "text": "and probably every language in some way or other has ax opinions I know we didn't think about",
    "start": "133260",
    "end": "140260"
  },
  {
    "text": "that and now it's here right I mean every",
    "start": "140260",
    "end": "145330"
  },
  {
    "text": "language does so I'm not gonna try to pick on any in particular here language expresses opinions by making some things",
    "start": "145330",
    "end": "152830"
  },
  {
    "text": "easier and by making other things harder and this is the thing that we're really wrestling with and trying to do is we",
    "start": "152830",
    "end": "159760"
  },
  {
    "text": "continue to evolve the c-sharp language if you look at the arc of our modern more recent language releases we have",
    "start": "159760",
    "end": "170860"
  },
  {
    "text": "learned a lot of things as in industry since the initial design of c-sharp in round 1999-2000 so we want to make it",
    "start": "170860",
    "end": "179740"
  },
  {
    "text": "easier to create better software using the techniques people are recommending",
    "start": "179740",
    "end": "185530"
  },
  {
    "text": "in general in 2020 and beyond that is the only way the language will stay relevant it's still gonna be an",
    "start": "185530",
    "end": "192550"
  },
  {
    "text": "object-oriented language that is where its roots are we do not intend to take any features away because that would",
    "start": "192550",
    "end": "199150"
  },
  {
    "text": "just be unwise there's too much code out there but we also have recognized and",
    "start": "199150",
    "end": "204730"
  },
  {
    "text": "continue to recognize that things we may have thought were good ideas or may have thought were now this is easy enough in",
    "start": "204730",
    "end": "212560"
  },
  {
    "text": "99 or 2000 isn't easy enough anymore so we want to make that better",
    "start": "212560",
    "end": "218670"
  },
  {
    "text": "so we are doing a lot of things to make it easier to work with different kinds of data one of the things that we",
    "start": "218670",
    "end": "225520"
  },
  {
    "text": "learned you know that if I look at the arc of history in computer languages the",
    "start": "225520",
    "end": "230980"
  },
  {
    "text": "advent of Java and c-sharp was because the industry finally realized after C",
    "start": "230980",
    "end": "236410"
  },
  {
    "text": "and C++ and other languages like that that managing allocated memory was a",
    "start": "236410",
    "end": "242860"
  },
  {
    "text": "whole lot harder than anybody thought it was see ya",
    "start": "242860",
    "end": "247870"
  },
  {
    "text": "malloc and free how hard could it be right how many different bugs were",
    "start": "247870",
    "end": "253030"
  },
  {
    "text": "because of that C++ knew and delete and different kinds of new and delete and so on and smart pointers and so on better",
    "start": "253030",
    "end": "260560"
  },
  {
    "text": "still a problem wait to see sharp in Java these things are easier but now",
    "start": "260560",
    "end": "266229"
  },
  {
    "text": "when you look there are still things that we did not make as easy as we could have from things that we've now learned as an",
    "start": "266229",
    "end": "271479"
  },
  {
    "text": "industry with the kinds of programs that we write now so it's important to start to add those features so with that",
    "start": "271479",
    "end": "278919"
  },
  {
    "text": "introduction I'm really gonna spend the rest of the time looking at code and talking about the way we wrote things",
    "start": "278919",
    "end": "284620"
  },
  {
    "text": "and the recommendations we had and how we would go about doing that now and different things we've added to the",
    "start": "284620",
    "end": "291039"
  },
  {
    "text": "language that we want you to explore and to start to adopt as habits every time",
    "start": "291039",
    "end": "297039"
  },
  {
    "text": "that you're working so the first thing we're going to learn is if you work in",
    "start": "297039",
    "end": "302500"
  },
  {
    "start": "300000",
    "end": "400000"
  },
  {
    "text": "the area of computer languages the only demos you're allowed to do involve points and a person class",
    "start": "302500",
    "end": "309629"
  },
  {
    "text": "because they're easy to explain I don't have to explain the domain we know what a 2d point looks like we know what a",
    "start": "309629",
    "end": "315340"
  },
  {
    "text": "person object should be and points let us work with value types very nice and",
    "start": "315340",
    "end": "321129"
  },
  {
    "text": "easily and person objects let us work with reference types so I'm gonna start",
    "start": "321129",
    "end": "326770"
  },
  {
    "text": "with some things in our basic point class I'm gonna shrink this down a little bit they after changing are so",
    "start": "326770",
    "end": "334389"
  },
  {
    "text": "I've got x and y I can public gather a private setter I know I can simplify",
    "start": "334389",
    "end": "339789"
  },
  {
    "text": "some of this and I will get to a fair amount of it I have a design decision that I want to calculate the distance",
    "start": "339789",
    "end": "345430"
  },
  {
    "text": "but I want to calculate it lazily so I've got a nullable double to store the",
    "start": "345430",
    "end": "351460"
  },
  {
    "text": "distance and I've got a property that retrieves the distance calculating it if I need to I've got a constructor I've",
    "start": "351460",
    "end": "359080"
  },
  {
    "text": "got an operator equals operator not equals because of that I have to override equals and we've got a gitch",
    "start": "359080",
    "end": "366909"
  },
  {
    "text": "hashcode that I'm not gonna debate whether that's a good get hash code or not but it's keeping the compiler happy",
    "start": "366909",
    "end": "372849"
  },
  {
    "text": "and then just because I want to make sure this is good for beginners I'm",
    "start": "372849",
    "end": "377979"
  },
  {
    "text": "going to show a neat little trick to get you through that entry level programming interview where everybody says I want",
    "start": "377979",
    "end": "383680"
  },
  {
    "text": "you to swap these values all right and you know anyone has their first",
    "start": "383680",
    "end": "389169"
  },
  {
    "text": "programming interview it's like x equals y y equals x oh you got it wrong you've",
    "start": "389169",
    "end": "394240"
  },
  {
    "text": "never had to write that code again but just in case you do I'm going to show you a neat trick so a c-sharp 7 and we added tuples",
    "start": "394240",
    "end": "402470"
  },
  {
    "start": "400000",
    "end": "490000"
  },
  {
    "text": "and we added them just so that it was an easy way not to have to write a class or",
    "start": "402470",
    "end": "408800"
  },
  {
    "text": "a struct every time he wanted to hold more than one value right because that",
    "start": "408800",
    "end": "414260"
  },
  {
    "text": "was encouraging behavior that we didn't like right we want to keep these things",
    "start": "414260",
    "end": "419390"
  },
  {
    "text": "together but then I got to write a class I got to put all these things in there I'm gonna define these methods and now I",
    "start": "419390",
    "end": "425240"
  },
  {
    "text": "suddenly got two pages of code just for something you can make a lot of sense so we put in tuples turns out once you have",
    "start": "425240",
    "end": "432350"
  },
  {
    "text": "these there's some really neat fun tricks you can do so let's start here with this constructor it looks like a",
    "start": "432350",
    "end": "439730"
  },
  {
    "text": "lot of constructors you would write for any of the types that you create I've got a set of private fields I've got a",
    "start": "439730",
    "end": "446480"
  },
  {
    "text": "set of arguments that come in and I'm gonna set each private feel to that argument and depending on how many fields you have you get this different",
    "start": "446480",
    "end": "452990"
  },
  {
    "text": "life this is this this is that that's that the other thing well let's just write this in a real simple way now that I've got two pools and I'm gonna go X",
    "start": "452990",
    "end": "461140"
  },
  {
    "text": "right X comma Y comma distance equals",
    "start": "461140",
    "end": "468640"
  },
  {
    "text": "and let's change that to this that X because I gave them the same same casing",
    "start": "468640",
    "end": "474919"
  },
  {
    "text": "is that Y and that's going to equal X comma y comma distance comma default and",
    "start": "474919",
    "end": "485900"
  },
  {
    "text": "then I don't need these lines okay so I've just made one assignment that",
    "start": "485900",
    "end": "492500"
  },
  {
    "start": "490000",
    "end": "567000"
  },
  {
    "text": "says let's really temporarily just create this tuple that has the private",
    "start": "492500",
    "end": "498350"
  },
  {
    "text": "fields that I want to initialize on the left side and on the right side let's just create another tuple that's got the",
    "start": "498350",
    "end": "504590"
  },
  {
    "text": "arguments I want to pass to it okay this is one of the ones we do not have a code",
    "start": "504590",
    "end": "510890"
  },
  {
    "text": "fix or refactoring for and there are a couple reasons for it this looks good",
    "start": "510890",
    "end": "516440"
  },
  {
    "text": "because it's got a total of three variables and they're generally small in practice when I'm writing code and when",
    "start": "516440",
    "end": "523339"
  },
  {
    "text": "I'm looking at different things I will use this technique just about all the time with two arguments I will often use",
    "start": "523339",
    "end": "532790"
  },
  {
    "text": "it with three depending on the length of the variable names four starts to look dumb so I usually",
    "start": "532790",
    "end": "538950"
  },
  {
    "text": "don't do that and then I would go back to separate statements so if we were gonna add a refactoring for this and",
    "start": "538950",
    "end": "544050"
  },
  {
    "text": "there's a called possible community project to do it we would want to be able to go through go both ways to be",
    "start": "544050",
    "end": "549120"
  },
  {
    "text": "able to say take these separate statements and make it into a tuple assignment take this tuple assignment make it back into separate statements",
    "start": "549120",
    "end": "555150"
  },
  {
    "text": "because classes have a way of growing fields occasionally over time so there's",
    "start": "555150",
    "end": "560790"
  },
  {
    "text": "that one well now as soon as you see that then you start to look at something and you go this operator equal equal",
    "start": "560790",
    "end": "568650"
  },
  {
    "text": "looks like it should do something a lot like that and if you've ever done code",
    "start": "568650",
    "end": "575880"
  },
  {
    "text": "reviews you may often see depending on the thoroughness of your tests that",
    "start": "575880",
    "end": "581730"
  },
  {
    "text": "sometimes in one of these you might miss a left and a right or you might miss the property names because we we copied and",
    "start": "581730",
    "end": "588120"
  },
  {
    "text": "pasted this right because that's what we do so let's write it in a way that makes",
    "start": "588120",
    "end": "593250"
  },
  {
    "text": "it just a little bit easier so I'm gonna go left out X comma left out y equals",
    "start": "593250",
    "end": "601370"
  },
  {
    "text": "right dot X and come right down Y okay",
    "start": "601370",
    "end": "615860"
  },
  {
    "text": "and then you see I don't need that extra and in there I don't have to make sure I get the that logic correct it's just",
    "start": "615860",
    "end": "622890"
  },
  {
    "text": "this tuple on the left that I quickly create tuple on the right quickly create life is good and we can do the same",
    "start": "622890",
    "end": "628709"
  },
  {
    "text": "thing of course with the not equal and then because people copy and paste code",
    "start": "628709",
    "end": "633990"
  },
  {
    "text": "you know that at least in somewhere in your code base instead of the or there there's an and and it the logic is wrong",
    "start": "633990",
    "end": "639770"
  },
  {
    "text": "and here I can just go left out X left out Y and it's just should not equal",
    "start": "639770",
    "end": "648510"
  },
  {
    "text": "right that X comma right that Y cool",
    "start": "648510",
    "end": "656889"
  },
  {
    "text": "I like it alright so now that's just a little bit smaller it's really clear",
    "start": "656889",
    "end": "663489"
  },
  {
    "text": "what it means though that's just doing a couple little tricks with tuples which we'll have a few more as we keep going",
    "start": "663489",
    "end": "669220"
  },
  {
    "text": "through some other core themes all right now I said we had this swap quartz thing",
    "start": "669220",
    "end": "675369"
  },
  {
    "text": "I know what we're gonna do now that's",
    "start": "675369",
    "end": "681850"
  },
  {
    "text": "now gonna be X comma y equals y comma X",
    "start": "681850",
    "end": "690839"
  },
  {
    "text": "take that nasty interview person with your weird stupid programming questions",
    "start": "690839",
    "end": "696239"
  },
  {
    "text": "because that's gonna work okay",
    "start": "696239",
    "end": "702269"
  },
  {
    "text": "sitting with John skeet he showed me a version of this where he does the same kind of trick with the Fibonacci sequence and you get you know this",
    "start": "702269",
    "end": "708339"
  },
  {
    "text": "current current neck's it's kind of cool so we start to do things like that because the way we defined this and we",
    "start": "708339",
    "end": "714339"
  },
  {
    "text": "said we had to do this for the language is this going to evaluate all of the expressions on the right side to create",
    "start": "714339",
    "end": "721269"
  },
  {
    "text": "that tuple and evaluate the expressions on the left side to find the variables those things store in and then do the",
    "start": "721269",
    "end": "727959"
  },
  {
    "text": "assignments so this will work correctly and where we really needed that in",
    "start": "727959",
    "end": "733209"
  },
  {
    "text": "practice other than for tricks like this is to be able to show things like you could have expressions on either side",
    "start": "733209",
    "end": "739119"
  },
  {
    "text": "and things on the right side could change what happens on the left and we need to know exactly how that worked yes",
    "start": "739119",
    "end": "746379"
  },
  {
    "text": "so that's cool so that's the first part that's just a few little trips tricks with tuples anytime you're looking at a",
    "start": "746379",
    "end": "753399"
  },
  {
    "start": "748000",
    "end": "795000"
  },
  {
    "text": "couple maybe three sometimes four variables that you want to have travel",
    "start": "753399",
    "end": "759160"
  },
  {
    "text": "together go ahead and put them in a tuple and use it knee of these tricks and again none of these really do",
    "start": "759160",
    "end": "766209"
  },
  {
    "text": "anything different than what we saw before with the old code it is really a",
    "start": "766209",
    "end": "771339"
  },
  {
    "text": "visual and a take a look at it and see if you like the way it looks for each",
    "start": "771339",
    "end": "776470"
  },
  {
    "text": "for individual classes and individual struts that you're working with you know if you write this and you've got five or",
    "start": "776470",
    "end": "782350"
  },
  {
    "text": "six things and it just looks bad or if you've got some really long variable names and it looks bad and don't",
    "start": "782350",
    "end": "787710"
  },
  {
    "text": "but this is just something when it provides more clarity to what you're right go ahead and and do just that so",
    "start": "787710",
    "end": "794600"
  },
  {
    "text": "now our next thing that I really want to talk about that we added and this was one that was added in the seven-point",
    "start": "794600",
    "end": "803490"
  },
  {
    "start": "795000",
    "end": "1034000"
  },
  {
    "text": "releases where we did a lot of work to make it more more better to write",
    "start": "803490",
    "end": "810709"
  },
  {
    "text": "read-only structs and we've been saying to make value types immutable since c-sharp 1.0 that was all on all of you",
    "start": "810709",
    "end": "819050"
  },
  {
    "text": "we really didn't provide a lot of support for that so what we have done now is let's say I said in my design you",
    "start": "819050",
    "end": "826350"
  },
  {
    "text": "know this really should have been an immutable structu store these points I don't want them being modified once I've",
    "start": "826350",
    "end": "832440"
  },
  {
    "text": "collected that data they should be never changing so now I can add the read-only",
    "start": "832440",
    "end": "837660"
  },
  {
    "text": "modifier on the struct definition so if I wanted this to be immutable I would do",
    "start": "837660",
    "end": "843240"
  },
  {
    "text": "that and now the compiler is you notice I've got red squiggles going out all over the place here because I didn't",
    "start": "843240",
    "end": "849720"
  },
  {
    "text": "make it an immutable type in that any of",
    "start": "849720",
    "end": "854940"
  },
  {
    "text": "the private member variables the compiler now tells me those must be read-only because they weren't this",
    "start": "854940",
    "end": "862320"
  },
  {
    "text": "would not compile furthermore anything that tries to set any of those read-only",
    "start": "862320",
    "end": "868140"
  },
  {
    "text": "variables well those can't be you know that's bad",
    "start": "868140",
    "end": "873240"
  },
  {
    "text": "- you've said this was supposed to be a read-only struct now the impetus behind this was performance in certain areas in",
    "start": "873240",
    "end": "881670"
  },
  {
    "text": "that now we want to be able to pass trucks by references we want to be able to do things like using span and reusing",
    "start": "881670",
    "end": "887010"
  },
  {
    "text": "memory and if the compiler can enforce the fact that a struct doesn't change and cannot be mutated then that is a",
    "start": "887010",
    "end": "895620"
  },
  {
    "text": "safer thing to do because we can pass this struct by reference we know it can't get modified and it's safe when it",
    "start": "895620",
    "end": "902370"
  },
  {
    "text": "comes back or as if you pass something by reference and it could possibly be modified the compilers going to make a",
    "start": "902370",
    "end": "908579"
  },
  {
    "text": "copy of it to make sure the codes correct so before I make this completely read-only this is where it gets to a lot",
    "start": "908579",
    "end": "915959"
  },
  {
    "text": "of design decisions maybe I don't want the whole thing to be read-only so let's annotate what we can and say I",
    "start": "915959",
    "end": "924040"
  },
  {
    "text": "know this method doesn't modify state so you know getting the export well that",
    "start": "924040",
    "end": "932110"
  },
  {
    "text": "should be read-only so I can put the read-only modifier there to ensure that the get accessor does not modify",
    "start": "932110",
    "end": "937960"
  },
  {
    "text": "anything inside this object okay that may look redundant but it really isn't",
    "start": "937960",
    "end": "946240"
  },
  {
    "text": "because of property we know execute code so you could change state there again",
    "start": "946240",
    "end": "954370"
  },
  {
    "text": "we'll do the same thing with the read-only on the on the Y and then here",
    "start": "954370",
    "end": "961000"
  },
  {
    "text": "on distance right that shouldn't change state he said so we'll write the",
    "start": "961000",
    "end": "966940"
  },
  {
    "text": "read-only modifier on that property quick thing to note if you have only a",
    "start": "966940",
    "end": "972070"
  },
  {
    "text": "get accessor you cannot put the read-only modifier on the get accessor you have to put it on the property ok",
    "start": "972070",
    "end": "978730"
  },
  {
    "text": "and if you notice as soon as I do that I'm now getting an error and another",
    "start": "978730",
    "end": "985090"
  },
  {
    "text": "warning saying yeah you can't do this because you said this was read-only",
    "start": "985090",
    "end": "990360"
  },
  {
    "text": "right so by saying it was read-only you're not allowed to modify the thing and now you really have a design",
    "start": "990360",
    "end": "996820"
  },
  {
    "text": "decision to make as to what you wanted to do if you wanted to make this completely read only or if you wanted to",
    "start": "996820",
    "end": "1002100"
  },
  {
    "text": "still allow this lazy evaluation to go on now let's say every time I create a",
    "start": "1002100",
    "end": "1007110"
  },
  {
    "text": "point in this particular application I'm always going to calculate the distance well then I would probably move that",
    "start": "1007110",
    "end": "1012540"
  },
  {
    "text": "calculation up into the constructor and really make this read-only and cache that value let's say only 1 out of 1,000",
    "start": "1012540",
    "end": "1022860"
  },
  {
    "text": "points I'll calculate the distance then maybe I don't want to pay that cost and I would say ok I'm not going to make",
    "start": "1022860",
    "end": "1028560"
  },
  {
    "text": "this read-only and then note that",
    "start": "1028560",
    "end": "1034980"
  },
  {
    "start": "1034000",
    "end": "1181000"
  },
  {
    "text": "because this is going at the getting set properties it doesn't give me a warning here it's going to just say the same",
    "start": "1034980",
    "end": "1041699"
  },
  {
    "text": "thing so it's here what we're trying to get at and what we want you to be able",
    "start": "1041699",
    "end": "1047160"
  },
  {
    "text": "to do is anytime that you're looking at a struct only this read-only modifier",
    "start": "1047160",
    "end": "1053730"
  },
  {
    "text": "cannot be added classes anytime you're creating a struct if your design was to make it an",
    "start": "1053730",
    "end": "1060040"
  },
  {
    "text": "immutable struct add the read-only modifier on the struct if it was meant",
    "start": "1060040",
    "end": "1066400"
  },
  {
    "text": "to be only some things are read-only then add it to those methods so I'm",
    "start": "1066400",
    "end": "1071920"
  },
  {
    "text": "going to finish this up because I do want to show one or two other techniques that we've added is I am going to make",
    "start": "1071920",
    "end": "1077200"
  },
  {
    "text": "this read-only and then we are going to deal with some of these these errors is",
    "start": "1077200",
    "end": "1082870"
  },
  {
    "text": "now I'm going to use an implicit property here and now I'm just going to",
    "start": "1082870",
    "end": "1088750"
  },
  {
    "text": "say well this is just just has a get access err and I am going to use the",
    "start": "1088750",
    "end": "1096040"
  },
  {
    "text": "read-only property syntax when you do this whether it's in a read-only struct",
    "start": "1096040",
    "end": "1101470"
  },
  {
    "text": "or not the compiler knows the code it generates and it automatically makes that property a read-only as the",
    "start": "1101470",
    "end": "1108190"
  },
  {
    "text": "read-only modifier to it and il so that the CLI will know that that that X",
    "start": "1108190",
    "end": "1113710"
  },
  {
    "text": "property is a read-only really read-only property and will do the same thing with",
    "start": "1113710",
    "end": "1120130"
  },
  {
    "text": "Y and delete that I love deleting code and getting features and now that's of course going",
    "start": "1120130",
    "end": "1129490"
  },
  {
    "text": "to be read-only as well I could add the read-only modifier here if I wanted to but it is redundant it doesn't add",
    "start": "1129490",
    "end": "1136900"
  },
  {
    "text": "anything it's already there so now I'm going to have to change how I do the distance I'm going to remove the",
    "start": "1136900",
    "end": "1142120"
  },
  {
    "text": "nullable attribute on it and here I'm just going to do the same trick I'm",
    "start": "1142120",
    "end": "1148120"
  },
  {
    "text": "going to make this a get only accessor I'm going to get rid of all that do this and you know math dot square root x",
    "start": "1148120",
    "end": "1158650"
  },
  {
    "text": "times X plus y times y all right and again you can see this gets just a",
    "start": "1158650",
    "end": "1164860"
  },
  {
    "text": "little bit longer and this should be distance and these become capitals",
    "start": "1164860",
    "end": "1171640"
  },
  {
    "text": "because I need to use the properties",
    "start": "1171640",
    "end": "1174960"
  },
  {
    "text": "okay and now I have a truly read-only struct and now I have to just remove",
    "start": "1179799",
    "end": "1186409"
  },
  {
    "start": "1181000",
    "end": "1240000"
  },
  {
    "text": "that because that was done for a bug somebody was just any data backwards so we needed that for a little bit but now",
    "start": "1186409",
    "end": "1192200"
  },
  {
    "text": "I haven't truly read-only struct now the point of this trick in the point of what",
    "start": "1192200",
    "end": "1197360"
  },
  {
    "text": "I want to say is this should enforce what your design is add these modifiers",
    "start": "1197360",
    "end": "1203330"
  },
  {
    "text": "to enforce the design it will communicate to other developers what you meant someone comes in here later and",
    "start": "1203330",
    "end": "1209090"
  },
  {
    "text": "wants to add a method and I call the read-only modifier was probably there",
    "start": "1209090",
    "end": "1214429"
  },
  {
    "text": "for a reason maybe I shouldn't add something in the mutate state maybe I should do something to create a new",
    "start": "1214429",
    "end": "1219919"
  },
  {
    "text": "point based on the existing data however I wanted to modify it so you communicate",
    "start": "1219919",
    "end": "1225200"
  },
  {
    "text": "that design to others and you communicate it to the compiler the compiler will now help you enforce your",
    "start": "1225200",
    "end": "1230840"
  },
  {
    "text": "design okay now a little bit of a sneak as to our next trick what we're going to",
    "start": "1230840",
    "end": "1238070"
  },
  {
    "text": "do the other big feature we added in c-sharp eight is knowable reference",
    "start": "1238070",
    "end": "1244610"
  },
  {
    "start": "1240000",
    "end": "1365000"
  },
  {
    "text": "types and once you get to dotnet core 3.1 more and more of the base class",
    "start": "1244610",
    "end": "1250970"
  },
  {
    "text": "libraries have been annotated so that the api's now have the noble annotations",
    "start": "1250970",
    "end": "1257110"
  },
  {
    "text": "so for instance I have no bubbles turned on here and if I have a method that looks like this I'm now getting a green",
    "start": "1257110",
    "end": "1264110"
  },
  {
    "text": "squiggle here which is warning what that is telling me is as of dotnet core 3.1",
    "start": "1264110",
    "end": "1270370"
  },
  {
    "text": "the equals override has now been annotated with object could be null so",
    "start": "1270370",
    "end": "1276230"
  },
  {
    "text": "it's an object question mark okay then I have to put that there okay this is one of the reasons why",
    "start": "1276230",
    "end": "1284529"
  },
  {
    "text": "officially c-sharp eight is not supported on older frameworks while the",
    "start": "1284529",
    "end": "1289850"
  },
  {
    "text": "nullable reference types feature for one is a big one that it's implemented completely compiler so the compiler",
    "start": "1289850",
    "end": "1296269"
  },
  {
    "text": "would do the right thing the older libraries have not been annotated which causes two bad effects",
    "start": "1296269",
    "end": "1303620"
  },
  {
    "text": "you will get warnings at times when you shouldn't and you won't get warnings at some of the times when you should",
    "start": "1303620",
    "end": "1309450"
  },
  {
    "text": "so because of that it really doesn't help as much and it really would provide kind of a false sense of security if you",
    "start": "1309450",
    "end": "1315450"
  },
  {
    "text": "added this into your code and expect everything to be good but you're not getting annotations from the libraries you use between now and net five and",
    "start": "1315450",
    "end": "1323549"
  },
  {
    "text": "then net six we're going to continue to add more annotations into more of the",
    "start": "1323549",
    "end": "1328830"
  },
  {
    "text": "dotnet libraries based on how many based on usage usage and download statistics",
    "start": "1328830",
    "end": "1334769"
  },
  {
    "text": "that we have for which classes and which API is get use the most is it is quite a bit of work to annotate everything so",
    "start": "1334769",
    "end": "1342330"
  },
  {
    "text": "between now and that net five nine and six as you start adopting c-sharp eight",
    "start": "1342330",
    "end": "1348269"
  },
  {
    "text": "and nullable reference types with each new release you may start to see a few new warnings because more api's have",
    "start": "1348269",
    "end": "1355889"
  },
  {
    "text": "been annotated but that should be pointing out potential errors in your code so we'd still want you to encourage",
    "start": "1355889",
    "end": "1362549"
  },
  {
    "text": "you to start looking at it and start considering annotating your own code and turning this on where you can so next",
    "start": "1362549",
    "end": "1370649"
  },
  {
    "start": "1365000",
    "end": "1538000"
  },
  {
    "text": "I'm going to get to as we talked about this and we start adding this here's something that we've learned over the",
    "start": "1370649",
    "end": "1375870"
  },
  {
    "text": "course of time nullable reference makes the null reference exception is the",
    "start": "1375870",
    "end": "1380880"
  },
  {
    "text": "single most reported exception on any dotnet app anywhere in the planet it is",
    "start": "1380880",
    "end": "1386580"
  },
  {
    "text": "more than double any other exception type that we ever see in any telemetry",
    "start": "1386580",
    "end": "1391950"
  },
  {
    "text": "that we see looking at open source projects on github checking for null is the single biggest",
    "start": "1391950",
    "end": "1400850"
  },
  {
    "text": "expression and work that people do in code so let's do everything we can to",
    "start": "1400850",
    "end": "1407519"
  },
  {
    "text": "make that more efficient so that you can add null checks without muddying the",
    "start": "1407519",
    "end": "1412889"
  },
  {
    "text": "rest of your algorithms and I'm gonna admit I'm totally guilty of this because I do a lot of work in Docs and writing",
    "start": "1412889",
    "end": "1418649"
  },
  {
    "text": "samples and we often don't check for null because the more null checks we add the harder it is to figure out the",
    "start": "1418649",
    "end": "1423840"
  },
  {
    "text": "algorithm that we're trying to explain so instead of writing the code you would really have to write in production we",
    "start": "1423840",
    "end": "1429019"
  },
  {
    "text": "trimmed some of these out and we're we want to change that habit ourselves as well and in doing this we're going to do",
    "start": "1429019",
    "end": "1436440"
  },
  {
    "text": "some things to add things to the language to make null checks not take so many lines of code",
    "start": "1436440",
    "end": "1441750"
  },
  {
    "text": "so let's look at our override of equals it's right now it's it's in at about ten",
    "start": "1441750",
    "end": "1447030"
  },
  {
    "text": "lines of code there is really only one line of code here that has anything to do with the algorithm at all and that's",
    "start": "1447030",
    "end": "1453780"
  },
  {
    "text": "the one that calls our operator equals that says this is value based equality check to see if all the properties are",
    "start": "1453780",
    "end": "1459000"
  },
  {
    "text": "equal that's cool the rest of it is all related to the null check that's bad so",
    "start": "1459000",
    "end": "1466350"
  },
  {
    "text": "let's try to shrink this out a little bit so let's do this and say alright so this if object is point other pt we're",
    "start": "1466350",
    "end": "1472830"
  },
  {
    "text": "going to add some things with pattern matching so I'm just going to clear that",
    "start": "1472830",
    "end": "1478410"
  },
  {
    "text": "here and then well now I'm just going to return this equals that I still need the",
    "start": "1478410",
    "end": "1485520"
  },
  {
    "text": "bracket sorry don't want to get into that bug and now I have that okay so now",
    "start": "1485520",
    "end": "1491010"
  },
  {
    "text": "I've I've shrunk that a little I'm feeling a little better it's a little bit more clear to see what you want okay",
    "start": "1491010",
    "end": "1498330"
  },
  {
    "text": "now this is one that it depends on how you like the ternary operator or not but",
    "start": "1498330",
    "end": "1503850"
  },
  {
    "text": "I can turn this into a single line expression and I can return is point",
    "start": "1503850",
    "end": "1510830"
  },
  {
    "text": "other PT question mark",
    "start": "1510830",
    "end": "1516019"
  },
  {
    "text": "boom yeah if not just return false okay",
    "start": "1517910",
    "end": "1531110"
  },
  {
    "text": "and I would usually try to format that like this okay so now we have a very",
    "start": "1531710",
    "end": "1539460"
  },
  {
    "text": "concise null check here if object is a type of a point if you've been a c-sharp",
    "start": "1539460",
    "end": "1545760"
  },
  {
    "text": "program for a long time you knew that is for a long time only worked with reference types not with value types",
    "start": "1545760",
    "end": "1552080"
  },
  {
    "text": "works with value types and now we can say it is and has an assignment in the",
    "start": "1552080",
    "end": "1557520"
  },
  {
    "text": "same statement and then we're gonna just check equality if that test succeeded if",
    "start": "1557520",
    "end": "1563400"
  },
  {
    "text": "not and if it was null it is not a point so the is operator only returns true if",
    "start": "1563400",
    "end": "1569790"
  },
  {
    "text": "the object is not null whether it's a reference type or a value type in all",
    "start": "1569790",
    "end": "1575080"
  },
  {
    "text": "there would always return false because it's not an object it's nothing okay so",
    "start": "1575080",
    "end": "1580769"
  },
  {
    "text": "there we go slightly simplified way of doing null checks but to really do null",
    "start": "1580769",
    "end": "1588850"
  },
  {
    "start": "1588000",
    "end": "1658000"
  },
  {
    "text": "checks you know remember I said I do either person classes or points so yeah",
    "start": "1588850",
    "end": "1594309"
  },
  {
    "text": "now let's go over the person type we've got some reference properties and we have the same kind of thing here what",
    "start": "1594309",
    "end": "1601779"
  },
  {
    "text": "I've got is I've got a person with first name and last name and we've got you",
    "start": "1601779",
    "end": "1608320"
  },
  {
    "text": "know more than half of this code is the null track stuff okay thankfully though",
    "start": "1608320",
    "end": "1613480"
  },
  {
    "text": "if you look closely you'll see three dots at the throw because this is something we we wanted to start",
    "start": "1613480",
    "end": "1618789"
  },
  {
    "text": "encouraging and we say use a throw expression what does that do no okay so",
    "start": "1618789",
    "end": "1624220"
  },
  {
    "text": "now if you look what this does I'm gonna add a carriage return here to make this little bit easier and as well just",
    "start": "1624220",
    "end": "1630490"
  },
  {
    "text": "change this to the expression bodied members because you know the brackets are just taking up space for no apparent reason and I now have a set that says",
    "start": "1630490",
    "end": "1638440"
  },
  {
    "text": "all right so first name equals value and then a double question mark just null coalescing operator and if value happens",
    "start": "1638440",
    "end": "1646090"
  },
  {
    "text": "to be null then throw in your argument no exception okay so I like that I also",
    "start": "1646090",
    "end": "1654970"
  },
  {
    "text": "like the way intellisense did that for me another little trick here that is my",
    "start": "1654970",
    "end": "1660039"
  },
  {
    "start": "1658000",
    "end": "1740000"
  },
  {
    "text": "single biggest complaint about API consistency in the.net libraries is",
    "start": "1660039",
    "end": "1665639"
  },
  {
    "text": "argument null exception the parameter name is first and the message is next in",
    "start": "1665639",
    "end": "1670710"
  },
  {
    "text": "the argument exception they're reversed thank you very much so in all cases if",
    "start": "1670710",
    "end": "1676929"
  },
  {
    "text": "you look at our Docs what we try to do is we try to use name parameters even though we often put them in the normal",
    "start": "1676929",
    "end": "1682059"
  },
  {
    "text": "order and then in order to make sure refactoring works we use the name of",
    "start": "1682059",
    "end": "1688350"
  },
  {
    "text": "operator for the param name just because then if I refactor this and I change the",
    "start": "1688350",
    "end": "1693580"
  },
  {
    "text": "name of the argument that code will also be refactored so we can do the same thing here in this",
    "start": "1693580",
    "end": "1699190"
  },
  {
    "text": "next one I've got the same kind of thing cool hit our light bulb and use the",
    "start": "1699190",
    "end": "1706240"
  },
  {
    "text": "throw expression hey I can do it here and in my constructor - I'm now feeling really",
    "start": "1706240",
    "end": "1711259"
  },
  {
    "text": "good about this yeah I can do the same",
    "start": "1711259",
    "end": "1718820"
  },
  {
    "text": "one there and if you notice that I did all the null checks first and then the",
    "start": "1718820",
    "end": "1724639"
  },
  {
    "text": "assignments and this refactoring knows enough to start to move those around and see those anywhere in a method so with",
    "start": "1724639",
    "end": "1731450"
  },
  {
    "text": "most of the methods you'd write you do something like I'm going to test all the arguments first and then I'm going to go on and I'll do more things later the",
    "start": "1731450",
    "end": "1741889"
  },
  {
    "text": "next one that I want to look at here is we added a method onto this person class",
    "start": "1741889",
    "end": "1747139"
  },
  {
    "text": "to hyphenate last name for a partner so I could do a dot - 8b or depending on",
    "start": "1747139",
    "end": "1753379"
  },
  {
    "text": "how the partners wanted to switch like a DB dot - a day and get a new last name that has the concatenation of those and",
    "start": "1753379",
    "end": "1761019"
  },
  {
    "text": "you can see I have to check to see if partner is null and if it's not in all",
    "start": "1761019",
    "end": "1766039"
  },
  {
    "text": "I'm gonna do this work to set last name and if it is now I'm gonna throw a null",
    "start": "1766039",
    "end": "1773720"
  },
  {
    "text": "VAR argument exception now I wrote this in a slightly different way because I wanted to show something very important",
    "start": "1773720",
    "end": "1779869"
  },
  {
    "text": "about the way the warnings get generated my mark said earlier in this project I have turned on turned on nullable",
    "start": "1779869",
    "end": "1786649"
  },
  {
    "text": "reference types and I have all the warnings turned on so if you look at this argument this person argument it",
    "start": "1786649",
    "end": "1793249"
  },
  {
    "text": "should be and it is declared to be a non knowable reference type okay so if I",
    "start": "1793249",
    "end": "1799099"
  },
  {
    "text": "delete this null check and I just wanted",
    "start": "1799099",
    "end": "1805039"
  },
  {
    "text": "to leave the null track okay I am not getting any warning any",
    "start": "1805039",
    "end": "1812960"
  },
  {
    "text": "errors or warnings to say you might be dereferencing something that's null here this is not good because I declare it to",
    "start": "1812960",
    "end": "1819320"
  },
  {
    "text": "be not nullable and then put the null Trax back and I'm going to point out that with your code when the compiler",
    "start": "1819320",
    "end": "1827180"
  },
  {
    "text": "looks at anything that you've annotated with null reference types it pays attention to what you're doing and it",
    "start": "1827180",
    "end": "1833210"
  },
  {
    "text": "does do a thorough static analysis of your code and what you've already written so this partner is a non",
    "start": "1833210",
    "end": "1839900"
  },
  {
    "text": "nullable reference type but down here if I do a console dot write line and I",
    "start": "1839900",
    "end": "1846050"
  },
  {
    "text": "could do partner dot last name okay now",
    "start": "1846050",
    "end": "1851320"
  },
  {
    "text": "there it is I now have a warning under partner the green squiggles that is a",
    "start": "1851320",
    "end": "1857090"
  },
  {
    "text": "nullable reference warning and if I hover over it it is going to say you know this you might be dereferencing",
    "start": "1857090",
    "end": "1863660"
  },
  {
    "text": "null here okay even though the type was declared the argument was declared as a",
    "start": "1863660",
    "end": "1869540"
  },
  {
    "text": "non nullable reference type because you added this null check the compiler goes I bet you did that for a reason crazy",
    "start": "1869540",
    "end": "1877910"
  },
  {
    "text": "human programmer so because you did that for a reason and this line of code this",
    "start": "1877910",
    "end": "1883520"
  },
  {
    "text": "console dot write line is not inside the block where you have checked it against",
    "start": "1883520",
    "end": "1889340"
  },
  {
    "text": "null maybe you really is null here so I'm not going to trust the type system",
    "start": "1889340",
    "end": "1896240"
  },
  {
    "text": "quite so much right there that's sort of the key to what not nullable reference types are they are annotations on",
    "start": "1896240",
    "end": "1903110"
  },
  {
    "text": "variables it's not a new type and we're doing static analysis of the code to",
    "start": "1903110",
    "end": "1908780"
  },
  {
    "text": "determine should we issue a warning here so as you're adding things when you have",
    "start": "1908780",
    "end": "1914960"
  },
  {
    "text": "null reference checks those will affect the static analysis I am NOT encouraging",
    "start": "1914960",
    "end": "1920510"
  },
  {
    "text": "you to remove null reference checks just so you know but I am pointing out what will happen with warnings however there",
    "start": "1920510",
    "end": "1927650"
  },
  {
    "text": "is a neat trick that we can do to make these null reference checks simpler",
    "start": "1927650",
    "end": "1933940"
  },
  {
    "text": "again I'm going to want to throw this no reference exception with if this is bad so I'm gonna move this up here and I",
    "start": "1933940",
    "end": "1940850"
  },
  {
    "text": "don't want to do a no reference check with this if because this is just it's really old school but what I'm gonna want it to is",
    "start": "1940850",
    "end": "1949340"
  },
  {
    "text": "I would like to use that same kind of a throw expression but if you look at that line of code where I do the return I'm",
    "start": "1949340",
    "end": "1956200"
  },
  {
    "text": "just using person I don't really need to assign this to anything so I'm going to",
    "start": "1956200",
    "end": "1961519"
  },
  {
    "text": "use a discard I'm gonna say discard equals partner or throw that in all",
    "start": "1961519",
    "end": "1968570"
  },
  {
    "text": "reference exception argument null exception okay so the discard here is a special token that says if I don't",
    "start": "1968570",
    "end": "1978169"
  },
  {
    "text": "already have a variable named underscore there this looks like a variable but the",
    "start": "1978169",
    "end": "1983960"
  },
  {
    "text": "compiler can throw it away and in fact does not store anything to it so this is",
    "start": "1983960",
    "end": "1990710"
  },
  {
    "text": "something we think is going to be idiomatic that we would like to encourage people to use more and more which is if all you're really trying to",
    "start": "1990710",
    "end": "1997850"
  },
  {
    "text": "do is check to see whether an argument or a field or whatever is null assign",
    "start": "1997850",
    "end": "2003639"
  },
  {
    "text": "that field to a a discard and when you have it and if the right hand side of",
    "start": "2003639",
    "end": "2011799"
  },
  {
    "text": "that assignment is null add the question mark question mark throw and that's a null Chuck now the reason to do this you",
    "start": "2011799",
    "end": "2019480"
  },
  {
    "text": "know we talk kind of about writing less code and I and I really think that that's less important than making your",
    "start": "2019480",
    "end": "2026710"
  },
  {
    "text": "actual algorithm stand out more clearly the original version of this was about four lines long and more than half of",
    "start": "2026710",
    "end": "2033519"
  },
  {
    "text": "the code in it was a null check and the throw we've now changed that in all check into a single assignment statement",
    "start": "2033519",
    "end": "2039850"
  },
  {
    "text": "with an expression on it and then while this is a one-line method so it is reasonably simple whatever else you're",
    "start": "2039850",
    "end": "2046210"
  },
  {
    "text": "doing now becomes the code that you would really look at right so what we're trying to do is make it so these these",
    "start": "2046210",
    "end": "2054940"
  },
  {
    "text": "techniques that we have to use all the time just to ensure our code is correct and things don't crash and we don't get calls at weird hours takes up less of",
    "start": "2054940",
    "end": "2063669"
  },
  {
    "text": "the code so that we can see that it's correct and we can really concentrate on the logic that we've written so for the",
    "start": "2063669",
    "end": "2071770"
  },
  {
    "text": "last larger set of demos that I want to work with is dealing with pattern-matching which is",
    "start": "2071770",
    "end": "2079450"
  },
  {
    "start": "2078000",
    "end": "2175000"
  },
  {
    "text": "something that we think is a really better way to write a lot of the",
    "start": "2079450",
    "end": "2084790"
  },
  {
    "text": "algorithms that we have to write as we're working with data as working with data of different types and different",
    "start": "2084790",
    "end": "2091230"
  },
  {
    "text": "properties and we're bringing data from different places possibly as JSON",
    "start": "2091230",
    "end": "2097090"
  },
  {
    "text": "packets either from rest or graph QL and maybe looking at it and parsing it we need to create different object types",
    "start": "2097090",
    "end": "2103300"
  },
  {
    "text": "and so on so the idea behind this is this is part of the system that does toll calculations so I'm going to start",
    "start": "2103300",
    "end": "2110080"
  },
  {
    "text": "with the set of comments so imagine a large metropolitan city shouldn't be too",
    "start": "2110080",
    "end": "2116109"
  },
  {
    "text": "hard right now and we want to discourage traffic at times that there's already an",
    "start": "2116109",
    "end": "2122350"
  },
  {
    "text": "incredible amount of traffic so there's a toll system that does charges people",
    "start": "2122350",
    "end": "2128020"
  },
  {
    "text": "to use the roads at peak times so the business people of complan have said all right so here's what we're gonna do on",
    "start": "2128020",
    "end": "2134800"
  },
  {
    "text": "the weekends tolls are just its normal cost if you go overnight on a week night",
    "start": "2134800",
    "end": "2141990"
  },
  {
    "text": "well that's when we want the lorries to do the deliveries and so on so we're gonna even lower it further so if it's",
    "start": "2141990",
    "end": "2147970"
  },
  {
    "text": "the wee hours of the morning you only pay 75% of the normal toll day time so",
    "start": "2147970",
    "end": "2154030"
  },
  {
    "text": "not rush hour but after morning rush room before afternoon rush well it's",
    "start": "2154030",
    "end": "2159100"
  },
  {
    "text": "still pretty busy in the city so you pay one-and-a-half times if you're morning",
    "start": "2159100",
    "end": "2164619"
  },
  {
    "text": "rush going into the city it's double evening rush going out of the city is also double okay so I made a few small I",
    "start": "2164619",
    "end": "2175840"
  },
  {
    "start": "2175000",
    "end": "2258000"
  },
  {
    "text": "made an enum for morning rush daytime evening rush overnight is weekday okay",
    "start": "2175840",
    "end": "2182530"
  },
  {
    "text": "this is a pattern matching switch expression okay so if you squint at it",
    "start": "2182530",
    "end": "2189580"
  },
  {
    "text": "it kind of looks a little bit like a switch statement but these are all expressions so you know it's a lambda",
    "start": "2189580",
    "end": "2195190"
  },
  {
    "text": "arrow and the right-hand side is always an expression it is not a set of statements or a block and there's no",
    "start": "2195190",
    "end": "2201310"
  },
  {
    "text": "break we did switch the order and this is so that you can change them I can",
    "start": "2201310",
    "end": "2207580"
  },
  {
    "text": "make the output of one switch feed into another switch expression because then that makes it a little bit more fluent",
    "start": "2207580",
    "end": "2212700"
  },
  {
    "text": "so I'm gonna take what day of the week is it and I'm gonna switch on that value so that's an enum in the day time class",
    "start": "2212700",
    "end": "2219029"
  },
  {
    "text": "they times struct and of course has Sunday Monday Tuesday Wednesday Thursday Friday Saturday and I'm gonna say if",
    "start": "2219029",
    "end": "2225029"
  },
  {
    "text": "it's Saturday or Sunday well it's not a weekday anything else which is this",
    "start": "2225029",
    "end": "2230849"
  },
  {
    "text": "discard character and a switch statement is match everything else well then it is a weekday so return return true this is",
    "start": "2230849",
    "end": "2241680"
  },
  {
    "text": "a really good way to look at bits of data and make a determination about the",
    "start": "2241680",
    "end": "2247680"
  },
  {
    "text": "values or the properties or the types of that data in this instance I'm making a",
    "start": "2247680",
    "end": "2252869"
  },
  {
    "text": "determination based on the values of veneno so here when I did the time band",
    "start": "2252869",
    "end": "2258750"
  },
  {
    "start": "2258000",
    "end": "2308000"
  },
  {
    "text": "well this talks about how worse we are still innovating and we are still going to add more we don't have a range",
    "start": "2258750",
    "end": "2265619"
  },
  {
    "text": "pattern patterns have to be a particular value so if I take the hour I would need",
    "start": "2265619",
    "end": "2270720"
  },
  {
    "text": "24 rows here to match every different possible value 0 through 23 and that",
    "start": "2270720",
    "end": "2276359"
  },
  {
    "text": "would look really ugly so here I am using some nested ifs one of the proposals that we're looking at right",
    "start": "2276359",
    "end": "2282029"
  },
  {
    "text": "now is a range pattern that would say if our was between 0 & 6 or between 6 and",
    "start": "2282029",
    "end": "2289349"
  },
  {
    "text": "10 you know and we're looking at a way to add that which would simplify this guy so again going back to what I said",
    "start": "2289349",
    "end": "2296069"
  },
  {
    "text": "at the very beginning this isn't necessarily go rewrite all your code use",
    "start": "2296069",
    "end": "2301109"
  },
  {
    "text": "pattern matching look for places where it would make sense speaking of places where it would make sense so let's look",
    "start": "2301109",
    "end": "2308910"
  },
  {
    "start": "2308000",
    "end": "2375000"
  },
  {
    "text": "at an imperative way to calculate that multiplier okay the first thing I'm",
    "start": "2308910",
    "end": "2314700"
  },
  {
    "text": "going to do is I'm going to check to see if it's a weekday if it is a weekday I want to look if you're going into the",
    "start": "2314700",
    "end": "2321059"
  },
  {
    "text": "city if you're going into the city then I want to look as morning rushes the daytime is evening rush oh it's",
    "start": "2321059",
    "end": "2326940"
  },
  {
    "text": "something else that must be overnight okay this else matches inbound so now you're leaving the city so let's get the",
    "start": "2326940",
    "end": "2334500"
  },
  {
    "text": "time of the tool I'm already off the page so I made the same call again I could probably refactor this but this is",
    "start": "2334500",
    "end": "2339539"
  },
  {
    "text": "already really long and I wanted to remember what it was and again more is it morning what is it",
    "start": "2339539",
    "end": "2344860"
  },
  {
    "text": "in the evening what is it overnight and so on and then we get back to this last else oh that's the weekend so the",
    "start": "2344860",
    "end": "2351580"
  },
  {
    "text": "multiplier is one okay this code does not fit on one page it ends on line 95",
    "start": "2351580",
    "end": "2357400"
  },
  {
    "text": "it starts on line 46 so we have almost",
    "start": "2357400",
    "end": "2363400"
  },
  {
    "text": "50 lines of code and yes I know I'm following some coding standards that have braces we could remove the braces",
    "start": "2363400",
    "end": "2369040"
  },
  {
    "text": "and we could shrink it but that leads to bugs so I'm not doing that that 50 line",
    "start": "2369040",
    "end": "2376150"
  },
  {
    "start": "2375000",
    "end": "2401000"
  },
  {
    "text": "method is implementing those what six lines of business requirements including",
    "start": "2376150",
    "end": "2384160"
  },
  {
    "text": "the comment that says this is exactly these are the business requirements so five different business requirements 50",
    "start": "2384160",
    "end": "2390460"
  },
  {
    "text": "lines of code it's that good business people are not going well about how much did you test this did you go through",
    "start": "2390460",
    "end": "2396880"
  },
  {
    "text": "everything how do you are you sure this is something where we can really use",
    "start": "2396880",
    "end": "2402330"
  },
  {
    "start": "2401000",
    "end": "2441000"
  },
  {
    "text": "pattern matching so we'll go ahead and implement this here from the pattern matching bed so I repeated the same",
    "start": "2402330",
    "end": "2408160"
  },
  {
    "text": "business requirements here and now if you look at this once again I'm gonna use those tuples because now I've got",
    "start": "2408160",
    "end": "2413950"
  },
  {
    "text": "three variables I'd like to make into one thing but I'm not going to define a class to hold",
    "start": "2413950",
    "end": "2420450"
  },
  {
    "text": "whether or not it's a weekday which time band and is it whether or not you're going into or out of the city so I just",
    "start": "2420450",
    "end": "2426730"
  },
  {
    "text": "made a tuple out of those three variables here on line 106 I've got his weekday time of toll get",
    "start": "2426730",
    "end": "2432280"
  },
  {
    "text": "time bad time toll inbound then I've got the switch and now I can build a table with all the combinations of all those",
    "start": "2432280",
    "end": "2439240"
  },
  {
    "text": "values copy and paste helped here and I didn't want you to watch me type all",
    "start": "2439240",
    "end": "2444820"
  },
  {
    "start": "2441000",
    "end": "2628000"
  },
  {
    "text": "that but so there is this is what I need to fill in those lines don't take a",
    "start": "2444820",
    "end": "2451360"
  },
  {
    "text": "picture yet a salt zero is this is broad okay so the first thing I can do is they",
    "start": "2451360",
    "end": "2458859"
  },
  {
    "text": "look at my requirements all right so the weekend everything should be 1.0 great so I'm going to start here at the first false handle visual studio check if you",
    "start": "2458859",
    "end": "2467170"
  },
  {
    "text": "press down alt you can select on a column so I'm going to just select this",
    "start": "2467170",
    "end": "2473230"
  },
  {
    "text": "one column down there not quite there that's close enough and now just delete that one and then I can just write the",
    "start": "2473230",
    "end": "2478930"
  },
  {
    "text": "one in there okay that's cool so now I fill that half the table life is good so now I've got okay so what did I say",
    "start": "2478930",
    "end": "2486549"
  },
  {
    "text": "day time was I said day time was always going to be one or one and a half yes",
    "start": "2486549",
    "end": "2492999"
  },
  {
    "text": "daytime is one and a half okay great so I need a 5 here and a 5 here morning",
    "start": "2492999",
    "end": "2499299"
  },
  {
    "text": "rush if I'm going into the city is double if I'm going out it's the same",
    "start": "2499299",
    "end": "2504930"
  },
  {
    "text": "overnight oh that was one 0.75 because you get a discount for the laurie's going in overnight and then evening rush",
    "start": "2504930",
    "end": "2513400"
  },
  {
    "text": "I said that was going to be no wait I just messed this up didn't I these are so I was already in the wrong row that",
    "start": "2513400",
    "end": "2520029"
  },
  {
    "text": "should be those were supposed to be the zeros that's still the weekend okay and",
    "start": "2520029",
    "end": "2525880"
  },
  {
    "text": "then up here I've got evening rush going home is 2 going in is one day time I",
    "start": "2525880",
    "end": "2531940"
  },
  {
    "text": "said that was gonna be 1.5 for both of",
    "start": "2531940",
    "end": "2537910"
  },
  {
    "text": "them great morning rush going home or leaving the city is one going in is 2",
    "start": "2537910",
    "end": "2544239"
  },
  {
    "text": "okay great now I've got that that's that's not not that hard to really",
    "start": "2544239",
    "end": "2550749"
  },
  {
    "text": "comprehend now right I've got 12 rows it's not bad okay but we can still",
    "start": "2550749",
    "end": "2557769"
  },
  {
    "text": "simplify this a fair amount and again here I would really look at the code look at the options that you have look",
    "start": "2557769",
    "end": "2564700"
  },
  {
    "text": "at how many rows you have how many different values you have to decide how far to go down this next set of",
    "start": "2564700",
    "end": "2570160"
  },
  {
    "text": "refactoring I'm gonna do everything on the weekend back here with the falses",
    "start": "2570160",
    "end": "2575940"
  },
  {
    "text": "well that's all all 1.0 I don't care what any other value is so I'm just",
    "start": "2575940",
    "end": "2582940"
  },
  {
    "text": "gonna add a row here that does false don't care don't",
    "start": "2582940",
    "end": "2588370"
  },
  {
    "text": "and that is gonna be one point oh okay",
    "start": "2588370",
    "end": "2593650"
  },
  {
    "text": "now notice how I get the red squiggles",
    "start": "2593650",
    "end": "2599440"
  },
  {
    "text": "on all of the lines below it this is will help you test if you're doing any of these you refactorings to see if you",
    "start": "2599440",
    "end": "2604720"
  },
  {
    "text": "got it right by doing any of these refactorings with the warning or the errors and all of these says this which",
    "start": "2604720",
    "end": "2611410"
  },
  {
    "text": "arm was already handled by something above it so there's no way to execute this code because the statement above it",
    "start": "2611410",
    "end": "2617920"
  },
  {
    "text": "it's always gonna get handled okay that was exactly what I wanted so that's good now I can take these and I can",
    "start": "2617920",
    "end": "2624610"
  },
  {
    "text": "delete them cool turns out if I want to be really fussy I can make this just",
    "start": "2624610",
    "end": "2631330"
  },
  {
    "start": "2628000",
    "end": "2697000"
  },
  {
    "text": "another discard because well once I've handled all the true cases I don't care okay but we'll wait to do that one last",
    "start": "2631330",
    "end": "2638760"
  },
  {
    "text": "now there's a couple other ones I can do here I look anything overnight is that",
    "start": "2638760",
    "end": "2645910"
  },
  {
    "text": "0.75 so whether it's true or false I can replace this with a discard okay and if",
    "start": "2645910",
    "end": "2652180"
  },
  {
    "text": "I do that this one should turn red cool that was exactly what I wanted okay and",
    "start": "2652180",
    "end": "2658930"
  },
  {
    "text": "then okay anything at the day time that's also one and a half I can do that cool and then this one should turn red",
    "start": "2658930",
    "end": "2667300"
  },
  {
    "text": "there we go that's done okay that's nice cool okay I don't like the way this",
    "start": "2667300",
    "end": "2674290"
  },
  {
    "text": "looks it's it's correct it's about as simple as I can get it but you know I'd like to kind of just let's just move",
    "start": "2674290",
    "end": "2681400"
  },
  {
    "text": "this one up here and I'll leave the 1.0 is together okay and then I've got the",
    "start": "2681400",
    "end": "2687700"
  },
  {
    "text": "ones that have thumb of that since it didn't add any squiggles well okay I'm okay I put him in an order that still",
    "start": "2687700",
    "end": "2693520"
  },
  {
    "text": "works so now we took this thing that was",
    "start": "2693520",
    "end": "2698710"
  },
  {
    "text": "50 lines of code that was very imperative if then else if else if else",
    "start": "2698710",
    "end": "2703840"
  },
  {
    "text": "if else that the other thing all of one-line branches and we said you know I",
    "start": "2703840",
    "end": "2709690"
  },
  {
    "text": "can turn that into first it was 12 rows and now it's down to 6 rows and the real",
    "start": "2709690",
    "end": "2718630"
  },
  {
    "text": "kicker that I want is not the amount of code that you're writing and how much of this there is but how clear is",
    "start": "2718630",
    "end": "2727270"
  },
  {
    "start": "2726000",
    "end": "2765000"
  },
  {
    "text": "that versus how clear is that and it",
    "start": "2727270",
    "end": "2733599"
  },
  {
    "text": "merely this is a little bit of a contrived example and you should play with this a little bit to figure out what works in your code and in your code",
    "start": "2733599",
    "end": "2739630"
  },
  {
    "text": "bases but a lot of times when we're looking at properties looking at types",
    "start": "2739630",
    "end": "2745480"
  },
  {
    "text": "or looking at values of data and we are making decisions on an algorithm this is",
    "start": "2745480",
    "end": "2751900"
  },
  {
    "text": "an incredibly powerful tool to use and the more I've started to play with us and the more I've started to use it I",
    "start": "2751900",
    "end": "2758020"
  },
  {
    "text": "find myself going I really want to reach for this tool very often okay so as",
    "start": "2758020",
    "end": "2765940"
  },
  {
    "start": "2765000",
    "end": "2798000"
  },
  {
    "text": "we're getting close to the end I'm going to end with one really small quiz I don't want anyone to speak up with this but I'm gonna write a routine and this",
    "start": "2765940",
    "end": "2774010"
  },
  {
    "text": "routine is gonna have a bug in it and when you spot the bug I want you to raise your hand so now this told people",
    "start": "2774010",
    "end": "2779950"
  },
  {
    "text": "the business people have come back and said alright this system is working but",
    "start": "2779950",
    "end": "2785200"
  },
  {
    "text": "we want to kind of reward people who are really regular and following things so we're gonna allow people to get a year-long subscription and pay in",
    "start": "2785200",
    "end": "2792309"
  },
  {
    "text": "advance because of some cash up front we like that and then you know they can you know",
    "start": "2792309",
    "end": "2797500"
  },
  {
    "text": "be like frequent drivers and do something better so I'm gonna make a public static method that's going to",
    "start": "2797500",
    "end": "2802839"
  },
  {
    "start": "2798000",
    "end": "2847000"
  },
  {
    "text": "return a date time for the start and AJ time for the end and the method is going",
    "start": "2802839",
    "end": "2810970"
  },
  {
    "text": "to be called generate subscription and",
    "start": "2810970",
    "end": "2816700"
  },
  {
    "text": "what it's going to do well we need to figure out the start starts going to be today so far a start equals date time",
    "start": "2816700",
    "end": "2823770"
  },
  {
    "text": "dot now dot date and you know it's going to expire one year from now so I'm going",
    "start": "2823770",
    "end": "2831369"
  },
  {
    "text": "to do var and equals new date time I'm going to do start dot year plus one",
    "start": "2831369",
    "end": "2839700"
  },
  {
    "text": "start got month because it's the same day right start that day",
    "start": "2839700",
    "end": "2847270"
  },
  {
    "start": "2847000",
    "end": "2976000"
  },
  {
    "text": "okay all right I'm seeing tragically few hands come up so to make sure everybody",
    "start": "2847270",
    "end": "2854600"
  },
  {
    "text": "can see the code well I'm going to leap over here this is a bug that's gonna",
    "start": "2854600",
    "end": "2860090"
  },
  {
    "text": "show up one month from yesterday there",
    "start": "2860090",
    "end": "2866060"
  },
  {
    "text": "are not enough hands about that that was a pretty good hit okay so everybody's got that what is this gonna do that's",
    "start": "2866060",
    "end": "2873260"
  },
  {
    "text": "gonna be really bad anybody raise your hand really early good on the 29th of",
    "start": "2873260",
    "end": "2885560"
  },
  {
    "text": "February 2020 this is going to crash because there is no 29th of February 2021 now the point of this little quiz",
    "start": "2885560",
    "end": "2893200"
  },
  {
    "text": "is date time math is really really hard because this is probably the most",
    "start": "2893200",
    "end": "2899480"
  },
  {
    "text": "obvious example and I did it here today because it is very timely so a better",
    "start": "2899480",
    "end": "2909830"
  },
  {
    "text": "way to do this keeping this one fairly simple is start dot add years one okay",
    "start": "2909830",
    "end": "2916990"
  },
  {
    "text": "because the dotnet Franco and I need to add the return start and the reason I",
    "start": "2916990",
    "end": "2927230"
  },
  {
    "text": "did that out of that there's now the date time struct and any good day time",
    "start": "2927230",
    "end": "2934040"
  },
  {
    "text": "library is going to handle all kinds of conditions whether it's a leap here whether it's yours it end in double zero",
    "start": "2934040",
    "end": "2940760"
  },
  {
    "text": "that you'd think are leap years but aren't going on and going off summer",
    "start": "2940760",
    "end": "2946100"
  },
  {
    "text": "time if you're doing math around hours and so on if you're doing really",
    "start": "2946100",
    "end": "2951920"
  },
  {
    "text": "extensive stuff around culture john skeets not--it i'm open source library is incredibly powerful and does a lot",
    "start": "2951920",
    "end": "2957950"
  },
  {
    "text": "more for a lot of reasonable things it's built in a date time but they did this",
    "start": "2957950",
    "end": "2964910"
  },
  {
    "text": "in particular because i would actually look at your code a little bit and maybe do a quick search to see if you're just",
    "start": "2964910",
    "end": "2970940"
  },
  {
    "text": "doing your own date time math and try and replace it with something that's probably tested okay so that's the code",
    "start": "2970940",
    "end": "2978660"
  },
  {
    "text": "as we get close so the new habits the reason we went through all of these things and the reason I did some of this little light-hearted but focusing on a",
    "start": "2978660",
    "end": "2986670"
  },
  {
    "text": "few different areas fun with tuples anytime you find yourself going I'm",
    "start": "2986670",
    "end": "2991769"
  },
  {
    "text": "carrying a few bits of data and I really don't want to do all the work to make a",
    "start": "2991769",
    "end": "2998880"
  },
  {
    "text": "struct think about using tuples there's also a proposal that we're working on",
    "start": "2998880",
    "end": "3003950"
  },
  {
    "text": "for records which would be a very very short and better simpler syntax actually",
    "start": "3003950",
    "end": "3009980"
  },
  {
    "text": "create a type if you needed it read-only members and read-only struct",
    "start": "3009980",
    "end": "3015789"
  },
  {
    "text": "declare your intent when you're writing structs and value types and let the",
    "start": "3015789",
    "end": "3021529"
  },
  {
    "text": "compiler enforce that and communicate it both of the compiler and to everyone who's going to read and maintain your",
    "start": "3021529",
    "end": "3027140"
  },
  {
    "text": "code has a better chance of being correct over the long haul the examples",
    "start": "3027140",
    "end": "3033049"
  },
  {
    "text": "I was showing where I was doing the question mark question mark initializations and other things like that the technique we refer to that as",
    "start": "3033049",
    "end": "3039500"
  },
  {
    "text": "is natin all by initialization so the more often you can ensure that a field",
    "start": "3039500",
    "end": "3046160"
  },
  {
    "text": "or an argument or a variable is initialized to something that does not",
    "start": "3046160",
    "end": "3051289"
  },
  {
    "text": "null as soon as you declare it and create it at that point in text then you know that variable is never null and you",
    "start": "3051289",
    "end": "3058490"
  },
  {
    "text": "can declare it as a non null reference type and you will the compiler will help you spot those errors remember that",
    "start": "3058490",
    "end": "3064970"
  },
  {
    "text": "those are just in metadata so especially in public api's especially as you're in",
    "start": "3064970",
    "end": "3071630"
  },
  {
    "text": "this process where you're probably migrating some code and some of it hasn't been annotated check for nulls",
    "start": "3071630",
    "end": "3076970"
  },
  {
    "text": "anyway and especially in public api's as I said anything that we're doing we're annotating api's I can guarantee you we",
    "start": "3076970",
    "end": "3083839"
  },
  {
    "text": "are not removing null chats patterns and data anytime you find yourself like",
    "start": "3083839",
    "end": "3089630"
  },
  {
    "text": "switching on things and doing a lot of if-then-else some kind of logic by looking at a property looking at a type",
    "start": "3089630",
    "end": "3095259"
  },
  {
    "text": "consider pattern matching it is a different way of thinking about a problem but it is a very very powerful",
    "start": "3095259",
    "end": "3102500"
  },
  {
    "text": "way for certain classes of problem this is not to say stop using object-oriented",
    "start": "3102500",
    "end": "3107750"
  },
  {
    "text": "stop using inheritance would never want to say that but if you looked at those algorithms I wrote I really didn't have an",
    "start": "3107750",
    "end": "3113779"
  },
  {
    "text": "inheritance hierarchy to work with but have been really cumbersome one to make one that switch expression was actually",
    "start": "3113779",
    "end": "3121339"
  },
  {
    "text": "much more powerful and a lot more clear in a smaller space for exactly what the code was doing that's what we're looking",
    "start": "3121339",
    "end": "3128029"
  },
  {
    "text": "for and then the classic because I just really remind her date and time math and",
    "start": "3128029",
    "end": "3133910"
  },
  {
    "start": "3133000",
    "end": "3238000"
  },
  {
    "text": "what I would make the recommendation here is do what you can to follow the good engineering software engineering",
    "start": "3133910",
    "end": "3140269"
  },
  {
    "text": "practices that you're doing for your applications I'm sure all of you are building some kind of a culture of",
    "start": "3140269",
    "end": "3145819"
  },
  {
    "text": "trying to write good software when that feels cumbersome do a little bit of research see if there's a better way to",
    "start": "3145819",
    "end": "3153589"
  },
  {
    "text": "follow the really good practices without writing quite as much extra code",
    "start": "3153589",
    "end": "3158739"
  },
  {
    "text": "specifically look for some new features and recommendations I used the light bulb today and there's also a",
    "start": "3158739",
    "end": "3164689"
  },
  {
    "text": "screwdriver icon for other recommendations for purpose if you're using Visual Studio then you will get",
    "start": "3164689",
    "end": "3171349"
  },
  {
    "text": "hints on some of the things that we think we've added features that you may not know about check that light bulb on the screwdriver and I meant this bit",
    "start": "3171349",
    "end": "3178880"
  },
  {
    "text": "about talking about looking for the new research and do some research we love Stack Overflow and we love that",
    "start": "3178880",
    "end": "3187309"
  },
  {
    "text": "it helps me every day too but very often now what we're finding because dotnet has been around for about twenty years",
    "start": "3187309",
    "end": "3193130"
  },
  {
    "text": "is there are answers that have 15 years of uploads and they were great perfect",
    "start": "3193130",
    "end": "3198709"
  },
  {
    "text": "answers for a long time and we've added features to make that yeah this will work but you know there's a better way",
    "start": "3198709",
    "end": "3204499"
  },
  {
    "text": "to do it and the better way has maybe six months of upvotes so it's harder to",
    "start": "3204499",
    "end": "3210679"
  },
  {
    "text": "find it and like Tessa was talking about in her opening keynote yesterday that's",
    "start": "3210679",
    "end": "3215929"
  },
  {
    "text": "a positive feedback loop people keep seeing that first answer and using it even though there may be a better way so",
    "start": "3215929",
    "end": "3221209"
  },
  {
    "text": "when I say do some research take a little bit more time including Stack Overflow we're trying very hard to stay",
    "start": "3221209",
    "end": "3226789"
  },
  {
    "text": "up to date on Docs and check the recommendations from the IDE to try to",
    "start": "3226789",
    "end": "3232369"
  },
  {
    "text": "find some slightly better things and use the things that we're adding to build some new build some new habits I could",
    "start": "3232369",
    "end": "3239359"
  },
  {
    "start": "3238000",
    "end": "3345000"
  },
  {
    "text": "add ms / new c-sharp is where that's going to point to the latest c-sharp stuff",
    "start": "3239359",
    "end": "3245910"
  },
  {
    "text": "I'm going to particularly call out two things that I put in here if you go into",
    "start": "3245910",
    "end": "3252510"
  },
  {
    "text": "the sample browser which is Doc's that Microsoft comm slash samples and search",
    "start": "3252510",
    "end": "3258480"
  },
  {
    "text": "for Explorer c-sharp you will see any of the things that we have that are going to help you explore some new things and",
    "start": "3258480",
    "end": "3263940"
  },
  {
    "text": "new areas that one day I'll show another",
    "start": "3263940",
    "end": "3272250"
  },
  {
    "text": "thing that we're doing is we have started adding a dotnet Docs what's new",
    "start": "3272250",
    "end": "3278640"
  },
  {
    "text": "page so every month we will be publishing you know what's really big and new and as a bonus because we're all",
    "start": "3278640",
    "end": "3284490"
  },
  {
    "text": "open source we are recognizing everybody who contributed to Doc's in the last month by their github IDs and if they",
    "start": "3284490",
    "end": "3291480"
  },
  {
    "text": "have added their name to the github profile we will put it there but we don't dig any deeper than that and if",
    "start": "3291480",
    "end": "3298830"
  },
  {
    "text": "you look at our tutorials the toll calculator is part of a much larger",
    "start": "3298830",
    "end": "3304980"
  },
  {
    "text": "application on pattern matching that will take you up through a lot more techniques that you can use there thank",
    "start": "3304980",
    "end": "3311880"
  },
  {
    "text": "you for your time I sure everybody's excited to get to the reception but I will be up here for any questions you",
    "start": "3311880",
    "end": "3318660"
  },
  {
    "text": "can ask me questions now what I think we've got a couple minutes left and thank you very much for your time [Applause]",
    "start": "3318660",
    "end": "3334089"
  }
]