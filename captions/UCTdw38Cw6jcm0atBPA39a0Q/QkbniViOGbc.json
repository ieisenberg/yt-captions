[
  {
    "text": "so hi everyone I'm Michael styp I'm a graph Quil TSC so working on",
    "start": "160",
    "end": "7799"
  },
  {
    "text": "the graph Quil technical steering committee and I'm also the author of the hot chocolate uh graph Quil library",
    "start": "7799",
    "end": "15160"
  },
  {
    "text": "in.net and today I want to talk about distributed graph qu before we get",
    "start": "15160",
    "end": "20640"
  },
  {
    "text": "started if uh you have any questions during the talk you can post it to slido",
    "start": "20640",
    "end": "27800"
  },
  {
    "text": "because it's a um much better for me to answer them after that because if you",
    "start": "27800",
    "end": "33440"
  },
  {
    "text": "try to scream down here uh it uh will be difficult to ask questions so if you",
    "start": "33440",
    "end": "38840"
  },
  {
    "text": "have questions just put them on slider and I will look them up and answer them as we go",
    "start": "38840",
    "end": "47079"
  },
  {
    "text": "forward",
    "start": "51160",
    "end": "54160"
  },
  {
    "text": "okay okay let's talk about distributed graph qu or let's talk about graph qu because",
    "start": "58239",
    "end": "66760"
  },
  {
    "text": "I know a lot of people still don't have an idea about graph qu and um in this",
    "start": "66760",
    "end": "73840"
  },
  {
    "text": "talk we start at the very bottom and then go into the most complex topic",
    "start": "73840",
    "end": "79520"
  },
  {
    "text": "around graph qu which is distributed graphs why should you care about graph",
    "start": "79520",
    "end": "86520"
  },
  {
    "text": "qu there is a recent report by Gartner which expects",
    "start": "86520",
    "end": "93640"
  },
  {
    "text": "graph qus share to grow in companies from 10% so 10% of the Enterprises using",
    "start": "93640",
    "end": "101119"
  },
  {
    "text": "graph quare in 2021 to 50% of Enterprises in the world using graph",
    "start": "101119",
    "end": "106799"
  },
  {
    "text": "quare by 2025 which is not far off so graph quare is growing hugely and it's",
    "start": "106799",
    "end": "112759"
  },
  {
    "text": "becoming more and more important to know about",
    "start": "112759",
    "end": "121200"
  },
  {
    "text": "so let's try to look at why graph quare was invented why Facebook actually",
    "start": "122479",
    "end": "129200"
  },
  {
    "text": "created graph Quil so back in the days around",
    "start": "129200",
    "end": "135519"
  },
  {
    "text": "2012 Facebook created something new called graph quare but they only did",
    "start": "135519",
    "end": "141760"
  },
  {
    "text": "that because they faced actually a real problem they didn't just go out there",
    "start": "141760",
    "end": "146959"
  },
  {
    "text": "and say we need a new API standard or whatever they actually had before 2012 a",
    "start": "146959",
    "end": "152200"
  },
  {
    "text": "lot of problems with their mobile applications and back in the day people thought that Facebook would not survive",
    "start": "152200",
    "end": "159519"
  },
  {
    "text": "the mobile age like today there are a lot of doubters around the strategy about uh the metaverse back then people",
    "start": "159519",
    "end": "167480"
  },
  {
    "text": "doubted their ability to adapt to the cloud first and mobile first",
    "start": "167480",
    "end": "174280"
  },
  {
    "text": "age so actually their Facebook applic application their mobile application didn't look like that it was more like",
    "start": "174280",
    "end": "180640"
  },
  {
    "text": "this uh small and ugly and uh the news feed actually was looking like this and",
    "start": "180640",
    "end": "187400"
  },
  {
    "text": "people were complaining about the mobile application because it had three major",
    "start": "187400",
    "end": "192440"
  },
  {
    "text": "problems back then like people were complaining that the app start was very",
    "start": "192440",
    "end": "198319"
  },
  {
    "text": "slow that it used a ton of data and on top of that that the battery quickly was",
    "start": "198319",
    "end": "204920"
  },
  {
    "text": "drained by the application a common thing you would do back then was just to to",
    "start": "204920",
    "end": "210280"
  },
  {
    "text": "uh shut down the background service of Facebook and make sure it doesn't start on the iPhone but uh that was not a",
    "start": "210280",
    "end": "218200"
  },
  {
    "text": "solution so three Engineers actually at Facebook started looking into this",
    "start": "218200",
    "end": "224560"
  },
  {
    "text": "problem and looking why that is a problem to um why they have this problem",
    "start": "224560",
    "end": "229920"
  },
  {
    "text": "with the application so what they discovered is actually that they took the technologies that they built on for",
    "start": "229920",
    "end": "237079"
  },
  {
    "text": "the web application and put that into the mobile application they bet on HTML",
    "start": "237079",
    "end": "242439"
  },
  {
    "text": "5 but they also bet on something called rest and that is basically what Facebook",
    "start": "242439",
    "end": "248599"
  },
  {
    "text": "was built with so the main issue here was when they looked at the request",
    "start": "248599",
    "end": "254760"
  },
  {
    "text": "graphs and debug the application they could see when it starts up basically would do a couple of calls a couple",
    "start": "254760",
    "end": "261359"
  },
  {
    "text": "hundred of calls actually uh the first one was maybe like fetching the current",
    "start": "261359",
    "end": "267160"
  },
  {
    "text": "user and when they did that call they could see that the application actually",
    "start": "267160",
    "end": "272320"
  },
  {
    "text": "just needed three information from that request but this call would uh like draw",
    "start": "272320",
    "end": "278520"
  },
  {
    "text": "in 50 properties so 50 properties of data but they only needed three and from",
    "start": "278520",
    "end": "284560"
  },
  {
    "text": "these three properties one was actually an ID that they needed just to feed into",
    "start": "284560",
    "end": "290320"
  },
  {
    "text": "the next request to fetch the news feed and again when we looked when they",
    "start": "290320",
    "end": "296800"
  },
  {
    "text": "looked at this request they could see that they actually also just needed a",
    "start": "296800",
    "end": "301919"
  },
  {
    "text": "couple of these properties so they didn't need all the properties that the web application for the that was",
    "start": "301919",
    "end": "308479"
  },
  {
    "text": "designed for desktop usage uh um needed they just needed a couple of information",
    "start": "308479",
    "end": "315440"
  },
  {
    "text": "because the screen size was much smaller and from these four properties",
    "start": "315440",
    "end": "321440"
  },
  {
    "text": "that they needed from this request two were actually IDs because I needed these IDs to feed them into the next request",
    "start": "321440",
    "end": "329319"
  },
  {
    "text": "so you can see where this is going they were fetching data just to fetch more data and on top of that they needed to",
    "start": "329319",
    "end": "337680"
  },
  {
    "text": "throw away a lot of the data they fetched the data fetching graph maybe",
    "start": "337680",
    "end": "343680"
  },
  {
    "text": "look something like this we call that a data waterfall where each request",
    "start": "343680",
    "end": "348759"
  },
  {
    "text": "depends actually on a previous request and that means we cannot paralyze",
    "start": "348759",
    "end": "354240"
  },
  {
    "text": "this what they discovered there was that different clients have really very",
    "start": "354240",
    "end": "359759"
  },
  {
    "text": "different needs and Facebook actually was not alone at uh like figuring out",
    "start": "359759",
    "end": "366039"
  },
  {
    "text": "this problem there were patterns around this like the BFF pattern and that doesn't mean best friend forever it",
    "start": "366039",
    "end": "372680"
  },
  {
    "text": "actually means uh backend for front end right and um with that pattern you would",
    "start": "372680",
    "end": "378880"
  },
  {
    "text": "build a specific back end for every front end you will would uh would",
    "start": "378880",
    "end": "386039"
  },
  {
    "text": "build and that is super awesome because now we have a specific backend for the",
    "start": "386039",
    "end": "392039"
  },
  {
    "text": "specific needs that we have in specific device types and that is super easy cons to",
    "start": "392039",
    "end": "398199"
  },
  {
    "text": "consume for our frontend deps but it also has like the",
    "start": "398199",
    "end": "404319"
  },
  {
    "text": "downsides of a lot of code duplication so we have",
    "start": "404319",
    "end": "410160"
  },
  {
    "text": "a lot of uh maintenance that we need to do because when we change something",
    "start": "410160",
    "end": "415520"
  },
  {
    "text": "behind our BFF in the actual infrastructure of our system we kind of need to update that in our microservices",
    "start": "415520",
    "end": "423280"
  },
  {
    "text": "maybe but also in all the BFFs that use this specific microservice or even rest",
    "start": "423280",
    "end": "428800"
  },
  {
    "text": "service that you have behind your BFFs so we have a lot of uh maintenance that we uh have to do here and this doesn't",
    "start": "428800",
    "end": "436319"
  },
  {
    "text": "really scale to for companies like Facebook another company that actually looked at uh",
    "start": "436319",
    "end": "442759"
  },
  {
    "text": "issues in this case was Netflix because they had an even worse problem because",
    "start": "442759",
    "end": "449039"
  },
  {
    "text": "they had much more device types that they had to support like TV boxes um like consoles mobile phones and",
    "start": "449039",
    "end": "458160"
  },
  {
    "text": "what have you so they had the same con the same problem and this problem is actually",
    "start": "458160",
    "end": "464479"
  },
  {
    "text": "that they aggregated data on the client",
    "start": "464479",
    "end": "469240"
  },
  {
    "text": "side so what they um came up with was a",
    "start": "470280",
    "end": "475400"
  },
  {
    "text": "similar concept to graph a bit different and they called the the client adapter",
    "start": "475400",
    "end": "481840"
  },
  {
    "text": "framework the client adapter framework would introduce a client adapter code",
    "start": "481840",
    "end": "487520"
  },
  {
    "text": "layer into the back end and then depending on which device type or client",
    "start": "487520",
    "end": "492720"
  },
  {
    "text": "framework would call the back end they would select a certain adapter and then Fetch and aggregate that on the back end",
    "start": "492720",
    "end": "501120"
  },
  {
    "text": "but this kind of broke the layering and the client developers always had to write these adapters they had to be",
    "start": "501120",
    "end": "507159"
  },
  {
    "text": "injected in the back end and that was a nightmare when you think about deployment and maintenance and stuff like that so this",
    "start": "507159",
    "end": "515159"
  },
  {
    "text": "was actually where graph Quil came in and once Facebook introduced graph Quil",
    "start": "515159",
    "end": "521080"
  },
  {
    "text": "all these companies that were actually trying to figure this problem out red behind",
    "start": "521080",
    "end": "526240"
  },
  {
    "text": "graphql so let's talk about graphql in graphql we changed the paradigma how",
    "start": "526240",
    "end": "534080"
  },
  {
    "text": "data is being fetched so essentially we re uh we change the responsibility so",
    "start": "534080",
    "end": "539839"
  },
  {
    "text": "it's not the backend engineer that says what data you can fetch for a request it's actually the front-end engineer",
    "start": "539839",
    "end": "546720"
  },
  {
    "text": "that tells the back end what data is needed in this request for instance this",
    "start": "546720",
    "end": "552399"
  },
  {
    "text": "is similar to the first request I showed you in rest uh we are essentially fetching from the currently signed in",
    "start": "552399",
    "end": "558760"
  },
  {
    "text": "user me the name of that user just the name and if we send that to our graph C",
    "start": "558760",
    "end": "564160"
  },
  {
    "text": "server we get back exactly what we asked for it almost looks like like the graph",
    "start": "564160",
    "end": "570320"
  },
  {
    "text": "quare server filled up the request graphs with some data it's not like that we will see that in a bit but it's a",
    "start": "570320",
    "end": "577279"
  },
  {
    "text": "good mental picture to start thinking about that problem so as our components change our",
    "start": "577279",
    "end": "583519"
  },
  {
    "text": "data needs change our device types change we can ask for more or less data",
    "start": "583519",
    "end": "589880"
  },
  {
    "text": "in this instance maybe we want also to have the profile picture and then some information around this profile picture",
    "start": "589880",
    "end": "596800"
  },
  {
    "text": "and we can send that again to our graph Cur server say endpoint and get this data we asked for not more not",
    "start": "596800",
    "end": "605079"
  },
  {
    "text": "less but when we look at that we can also see that graph is not about flat data structures it's actually about",
    "start": "605079",
    "end": "611720"
  },
  {
    "text": "trees of data and this is great with relations like you can drill into",
    "start": "611720",
    "end": "616959"
  },
  {
    "text": "related objects like the friends maybe of that user or the news of that uh user",
    "start": "616959",
    "end": "623200"
  },
  {
    "text": "so I could now suddenly ask for all the data I needed",
    "start": "623200",
    "end": "628240"
  },
  {
    "text": "in my uh mobile application let's actually have a look at uh um some application here that is a",
    "start": "628240",
    "end": "637200"
  },
  {
    "text": "demo application we often use in workshops Let me refresh that like you",
    "start": "637200",
    "end": "642240"
  },
  {
    "text": "can see this whole dashboard that I have here is a single data call to my back",
    "start": "642240",
    "end": "647600"
  },
  {
    "text": "end and no matter what I'm doing in this application you can see I'm asking here for another coin it's just one more data",
    "start": "647600",
    "end": "656040"
  },
  {
    "text": "call to my back end it's never more and if if I for instance need some more aggregated data here it's one more",
    "start": "656040",
    "end": "663440"
  },
  {
    "text": "request to the back end and we are only fetching always the data that we need",
    "start": "663440",
    "end": "669240"
  },
  {
    "text": "additionally let me go back here to the um front page refresh that and then",
    "start": "669240",
    "end": "675279"
  },
  {
    "text": "let's have maybe a look at this request",
    "start": "675279",
    "end": "680880"
  },
  {
    "text": "here no that was wrong okay so this is actually the graph",
    "start": "684760",
    "end": "690959"
  },
  {
    "text": "C request the backend did and what I can see here that is that I have a lot more",
    "start": "690959",
    "end": "696480"
  },
  {
    "text": "constructs we have something called a fragment here and it looks much more complex than the request I did uh",
    "start": "696480",
    "end": "704320"
  },
  {
    "text": "earlier in my presentation so let's have a look at that how this works",
    "start": "704320",
    "end": "710680"
  },
  {
    "text": "actually so in graphql we have construct called a fragment and the fragment is",
    "start": "710680",
    "end": "716480"
  },
  {
    "text": "essentially the data contract for for my UI component so graph has constructs",
    "start": "716480",
    "end": "722560"
  },
  {
    "text": "specifically made for uh front end engineers and this is for instance a react component of the same application",
    "start": "722560",
    "end": "730079"
  },
  {
    "text": "and you can see that up here I have a fragment that is the data contract the data needed for this component to fetch",
    "start": "730079",
    "end": "737440"
  },
  {
    "text": "data or the to display data down here I'm using this very same data in this",
    "start": "737440",
    "end": "743800"
  },
  {
    "text": "case it's just an ID that I'm using down here in my component",
    "start": "743800",
    "end": "750120"
  },
  {
    "text": "so what graph lines do basically is as I compose my component I'm really",
    "start": "750120",
    "end": "756440"
  },
  {
    "text": "composing a request so I'm using my fragment here that I'm using is",
    "start": "756440",
    "end": "762959"
  },
  {
    "text": "basically a primitive for composition and this is super awesome because it allows me to have this very",
    "start": "762959",
    "end": "770040"
  },
  {
    "text": "efficient data fetching where I only fetch the data I need for a certain",
    "start": "770040",
    "end": "775680"
  },
  {
    "text": "screen so graph quare gives me this Unified API for all my clients that I",
    "start": "775680",
    "end": "782560"
  },
  {
    "text": "ever have to build and I only get what I need so I",
    "start": "782560",
    "end": "789079"
  },
  {
    "text": "get the power at the front end engineer to ask for the data I need and this",
    "start": "789079",
    "end": "794360"
  },
  {
    "text": "more and this is why graph Quil actually for front-end developers sells itself",
    "start": "794360",
    "end": "800440"
  },
  {
    "text": "you show that to a front-end developers and they basically start to shake because it's so awesome to them",
    "start": "800440",
    "end": "809519"
  },
  {
    "text": "so what is graph graph qu is an API technology a",
    "start": "809519",
    "end": "815920"
  },
  {
    "text": "query language and a RH time to fulfill these queries there's only one endpoint in a",
    "start": "815920",
    "end": "822639"
  },
  {
    "text": "graph setup and to this one endpoint I can issue any request I can fetch all",
    "start": "822639",
    "end": "829079"
  },
  {
    "text": "the data I need in one request and there's no over or underetching so over",
    "start": "829079",
    "end": "834720"
  },
  {
    "text": "fetching is when I need to consume more data than I uh than I want to because",
    "start": "834720",
    "end": "841279"
  },
  {
    "text": "the backend engineer decided this is a data that you have to have and under fetching is every time I had one of",
    "start": "841279",
    "end": "847759"
  },
  {
    "text": "these IDs that referred to another resource in rest that's underetching because I don't want that ID I want the",
    "start": "847759",
    "end": "853399"
  },
  {
    "text": "data behind that ID graph is built on a strong type system that has more type constructs",
    "start": "853399",
    "end": "860279"
  },
  {
    "text": "than C and that makes graph super predictable",
    "start": "860279",
    "end": "865959"
  },
  {
    "text": "to use on top of that graph qu is real",
    "start": "865959",
    "end": "871399"
  },
  {
    "text": "time so there are three operations to graph qu there read operations write operations and we have",
    "start": "871399",
    "end": "878600"
  },
  {
    "text": "events which we call subscription in graph qu and",
    "start": "878600",
    "end": "883880"
  },
  {
    "text": "um if you align them to rest operations like the query is the get side effect",
    "start": "883880",
    "end": "890320"
  },
  {
    "text": "free reads to my system mutation is the put post patch delete everything that we want to change in your system and",
    "start": "890320",
    "end": "897120"
  },
  {
    "text": "subscriptions you don't have in rest you could could have something like signal R but in graph it's built",
    "start": "897120",
    "end": "903759"
  },
  {
    "text": "in let's have a look at a simple graphql",
    "start": "904160",
    "end": "909880"
  },
  {
    "text": "example and I have prepared here this is an empty project so far and let's build",
    "start": "909880",
    "end": "916480"
  },
  {
    "text": "maybe a simple hello world and then we dive in deeper so I'm creating here just a new",
    "start": "916480",
    "end": "924199"
  },
  {
    "text": "web application that's a net web application and it's basically a hello world for the minimal API and to make",
    "start": "924199",
    "end": "932399"
  },
  {
    "text": "that graph quare server it's just one package that I need more so in this case",
    "start": "932399",
    "end": "937800"
  },
  {
    "text": "I can just go here say net at package hot chocolate. asp.net core that's our",
    "start": "937800",
    "end": "943880"
  },
  {
    "text": "graph quare server I add",
    "start": "943880",
    "end": "947959"
  },
  {
    "text": "that should have prefetched that okay let's reload that and now I",
    "start": "950959",
    "end": "958360"
  },
  {
    "text": "can build my gra server so I said there are these operation types in the beginning and these operation types is",
    "start": "958360",
    "end": "965440"
  },
  {
    "text": "what we need to build first so in our case we're going to create here a query operation type let me see that I have a",
    "start": "965440",
    "end": "972920"
  },
  {
    "text": "template for that and that's basically a class so an the root operation query is",
    "start": "972920",
    "end": "978880"
  },
  {
    "text": "basically a class in net and to resolve something in our",
    "start": "978880",
    "end": "984199"
  },
  {
    "text": "graph qu server we need to introduce something called a resolver which is a method in my case I want to just",
    "start": "984199",
    "end": "990560"
  },
  {
    "text": "introduce a hello world method here so this method is called hello it has an",
    "start": "990560",
    "end": "996079"
  },
  {
    "text": "argument name which has a default word and just it returns here a string that I",
    "start": "996079",
    "end": "1002240"
  },
  {
    "text": "built up so this is actually all I need to my for my graph quare server I can",
    "start": "1002240",
    "end": "1007399"
  },
  {
    "text": "configure it now with my di so I'm going up here to the Builder Services add",
    "start": "1007399",
    "end": "1013880"
  },
  {
    "text": "graph qu server and then I say add query type",
    "start": "1013880",
    "end": "1019920"
  },
  {
    "text": "and then I'm just referring to this query class down",
    "start": "1019920",
    "end": "1025079"
  },
  {
    "text": "there okay but there's one more thing we have to do and that is specify the",
    "start": "1025079",
    "end": "1031000"
  },
  {
    "text": "transport and I can basically go down here to the app part and just say map graph quare and then I'm done that's my",
    "start": "1031000",
    "end": "1038319"
  },
  {
    "text": "graph qu server I can now run it let's do that",
    "start": "1038319",
    "end": "1043760"
  },
  {
    "text": "quickly and I forgot the semicolon it's always",
    "start": "1045760",
    "end": "1050840"
  },
  {
    "text": "this another one ah yeah yeah yeah I see",
    "start": "1051160",
    "end": "1058360"
  },
  {
    "text": "it let's do it okay so let's call that",
    "start": "1060080",
    "end": "1068320"
  },
  {
    "text": "thing graphql so I'm greeted here by banana cake poop that's our graph quare server",
    "start": "1068320",
    "end": "1075280"
  },
  {
    "text": "so we have a lot of funny names like the serice hot",
    "start": "1075280",
    "end": "1080559"
  },
  {
    "text": "chocolate the client strawberry shake and the graph qu ID is called banana cake pop I can create a new tab here and",
    "start": "1080559",
    "end": "1088919"
  },
  {
    "text": "then I could write graph C queries but I also could look at my schema here and you can see I have a query type that has",
    "start": "1088919",
    "end": "1096520"
  },
  {
    "text": "a field hello which returns this string and you can see down here it even",
    "start": "1096520",
    "end": "1102400"
  },
  {
    "text": "inferred the argument that I have plus the default value so it basically a one",
    "start": "1102400",
    "end": "1107799"
  },
  {
    "text": "toone translation from what we have in C to what we have now over the wire for",
    "start": "1107799",
    "end": "1113000"
  },
  {
    "text": "the API and that's empowering because I can infer my business layer and expose",
    "start": "1113000",
    "end": "1118720"
  },
  {
    "text": "it in a much richer way to my front end engineers in order to query that I can",
    "start": "1118720",
    "end": "1124200"
  },
  {
    "text": "just go in here and you can see it's powered with intellisense because I have a strong schema and then I can for",
    "start": "1124200",
    "end": "1131200"
  },
  {
    "text": "instance say just hello let's have something proper here hello Michael and",
    "start": "1131200",
    "end": "1136640"
  },
  {
    "text": "then that works okay let's put that",
    "start": "1136640",
    "end": "1143000"
  },
  {
    "text": "away go back to the slides okay so what we did here is basically we took a",
    "start": "1143799",
    "end": "1149440"
  },
  {
    "text": "simple C type we infert from that the graph Quil type as I said this",
    "start": "1149440",
    "end": "1155960"
  },
  {
    "text": "method here is called a resolver in a graph quare context um what we call this approach is",
    "start": "1155960",
    "end": "1161320"
  },
  {
    "text": "actually The annotation based approach where we infer like our runtime language C into graph qu that's actually what",
    "start": "1161320",
    "end": "1169000"
  },
  {
    "text": "Facebook did for the first graph Quil server from a graph Quil type here the",
    "start": "1169000",
    "end": "1174480"
  },
  {
    "text": "type is similar to the class we call that object type it has a field here a",
    "start": "1174480",
    "end": "1179600"
  },
  {
    "text": "field is like a method in C and the field can has arguments arguments can",
    "start": "1179600",
    "end": "1185799"
  },
  {
    "text": "have defaults they can even have more complex defaults than C like we could have object structures here or list or",
    "start": "1185799",
    "end": "1193520"
  },
  {
    "text": "whatever and we also have here this bang operator so in in graphql the",
    "start": "1193520",
    "end": "1199760"
  },
  {
    "text": "nullability is reversed so in C this thing basically call shut up means shut",
    "start": "1199760",
    "end": "1207120"
  },
  {
    "text": "up so I know what I do in graph CR it means it's non null um and in C we have",
    "start": "1207120",
    "end": "1214240"
  },
  {
    "text": "that reversed so we Mark types that are nullable in graph qu I Mark types that are",
    "start": "1214240",
    "end": "1221320"
  },
  {
    "text": "non-nullable so graph quare gives us a chance to model an interface to our core",
    "start": "1221320",
    "end": "1226760"
  },
  {
    "text": "domain and expose that to our front-end Engineers or as I said expose our",
    "start": "1226760",
    "end": "1232240"
  },
  {
    "text": "business layer in a much richer way to our front-end Engineers but graph qu is also a",
    "start": "1232240",
    "end": "1239159"
  },
  {
    "text": "monolith and I said this talks about distributed graph qu so let's talk about",
    "start": "1239159",
    "end": "1245840"
  },
  {
    "text": "that let's first have a look at the monolith like a typical graph quare server also how Facebook B did it was",
    "start": "1245840",
    "end": "1253520"
  },
  {
    "text": "really a monolith from bottom to top",
    "start": "1253520",
    "end": "1258919"
  },
  {
    "text": "me show you one here so this is some uh this is",
    "start": "1258919",
    "end": "1265919"
  },
  {
    "text": "basically the back end to the front end I showed you earlier and let me",
    "start": "1265919",
    "end": "1271440"
  },
  {
    "text": "just let restore",
    "start": "1271440",
    "end": "1275278"
  },
  {
    "text": "that yes",
    "start": "1278120",
    "end": "1282880"
  },
  {
    "text": "okay okay so this is basically also a graph Cur server has more to it you can",
    "start": "1284000",
    "end": "1289520"
  },
  {
    "text": "see here's the configuration of the graph server uh we have here the transport mapping and then we have a ton",
    "start": "1289520",
    "end": "1296039"
  },
  {
    "text": "of types here you can see like the account data that we have here for the user uh with all its data we have assets",
    "start": "1296039",
    "end": "1304159"
  },
  {
    "text": "and we also have notifications that is a big monolith if we look at that then we",
    "start": "1304159",
    "end": "1310360"
  },
  {
    "text": "have here the assets queries and in there we could use Entity framework like",
    "start": "1310360",
    "end": "1315520"
  },
  {
    "text": "I did here or it could be your business layer your that's actually the proper way that you have like a service layer",
    "start": "1315520",
    "end": "1322000"
  },
  {
    "text": "in between that holds a business logic and stuff like that but it's basically like one big service",
    "start": "1322000",
    "end": "1331679"
  },
  {
    "text": "right and actually that's good to start like if you are just one team or um if",
    "start": "1331919",
    "end": "1339720"
  },
  {
    "text": "you don't have the need having a monolith is actually super good because it's simple to build it is easy to debug",
    "start": "1339720",
    "end": "1347360"
  },
  {
    "text": "and it's also easy to to update if you think about uh updating packages um you just do that in your",
    "start": "1347360",
    "end": "1355559"
  },
  {
    "text": "solution and everything is fine and you could also have it distributed kind of in assemblies where you have for each of",
    "start": "1355559",
    "end": "1362520"
  },
  {
    "text": "your boundaries one assembly and that is actually good to go um because the main",
    "start": "1362520",
    "end": "1367559"
  },
  {
    "text": "thing I would consider in the beginning before going into distributed graph Quil is if folders might be enough like",
    "start": "1367559",
    "end": "1374600"
  },
  {
    "text": "sometimes we just want to have these nice boxes but sometimes these nice boxes are actually folders um so think",
    "start": "1374600",
    "end": "1381559"
  },
  {
    "text": "about if you really need distributed",
    "start": "1381559",
    "end": "1387760"
  },
  {
    "text": "graph where a monolist becomes a problem is when we think about scale there are a",
    "start": "1388600",
    "end": "1395640"
  },
  {
    "text": "lot of other things like it's it's faster to update but it's also slower to",
    "start": "1395640",
    "end": "1400760"
  },
  {
    "text": "update if you think about you want to just change this little thing in this component but now you have to update all",
    "start": "1400760",
    "end": "1407400"
  },
  {
    "text": "the other parts because they're using maybe the same helper or you need a new package for this part and now you have",
    "start": "1407400",
    "end": "1414000"
  },
  {
    "text": "to update all the other things this means also that it's more difficult to",
    "start": "1414000",
    "end": "1419240"
  },
  {
    "text": "adapt to new technologies so a monolith gives you a lot less flexibility it's easier to",
    "start": "1419240",
    "end": "1426559"
  },
  {
    "text": "debug and manage but L less flexibility but the main point uh that I",
    "start": "1426559",
    "end": "1432679"
  },
  {
    "text": "here is actually it's difficult to scale and uh that is",
    "start": "1432679",
    "end": "1439320"
  },
  {
    "text": "basically the opposite side that Facebook took to what was fashionable at this time and fashionable at the time",
    "start": "1439320",
    "end": "1446520"
  },
  {
    "text": "were microservices so if you think about Facebook and their scale you would think",
    "start": "1446520",
    "end": "1451880"
  },
  {
    "text": "that they would use something like a microservice concept but they didn't because for them like the the unified",
    "start": "1451880",
    "end": "1459799"
  },
  {
    "text": "API the single thing was much more productive in iteration speed between front end and backend",
    "start": "1459799",
    "end": "1466600"
  },
  {
    "text": "Engineers so let's talk about microservices so the premise that people",
    "start": "1466600",
    "end": "1471720"
  },
  {
    "text": "tell you is that they are easy to scale so we can scale these things",
    "start": "1471720",
    "end": "1476799"
  },
  {
    "text": "independently that means we don't we only scale the parts that maybe are under pressure right we get all this",
    "start": "1476799",
    "end": "1484200"
  },
  {
    "text": "flexibility of of Technology all our teams can use different technology like",
    "start": "1484200",
    "end": "1489799"
  },
  {
    "text": "one team can use JavaScript the other net the other Java maybe someone uses go",
    "start": "1489799",
    "end": "1495799"
  },
  {
    "text": "whatever maybe you have 13 teams like Netflix and then 130 different",
    "start": "1495799",
    "end": "1501080"
  },
  {
    "text": "Technologies right then we can work independently as",
    "start": "1501080",
    "end": "1506559"
  },
  {
    "text": "a team on each of our microservices and on top of that they are much more",
    "start": "1506559",
    "end": "1511799"
  },
  {
    "text": "resilient at least that is what the adver tells",
    "start": "1511799",
    "end": "1518320"
  },
  {
    "text": "you uh and they're also easier to maintain that's sometimes controversial",
    "start": "1518320",
    "end": "1523840"
  },
  {
    "text": "but that is the advertising",
    "start": "1523840",
    "end": "1528960"
  },
  {
    "text": "but there are a lot of cons that you have to think about before going head on into a microservice",
    "start": "1528960",
    "end": "1534120"
  },
  {
    "text": "setup it actually has a lot of increased complexity because you now you have all these different parts how do you debug",
    "start": "1534120",
    "end": "1540760"
  },
  {
    "text": "that how do you figure out uh issues you have to think about Network latency",
    "start": "1540760",
    "end": "1545919"
  },
  {
    "text": "about data consistency that is also a pro of a microservice setup that you have",
    "start": "1545919",
    "end": "1551159"
  },
  {
    "text": "overlapping data because you can use that but it's also a ton more complexity",
    "start": "1551159",
    "end": "1556760"
  },
  {
    "text": "that you introduce to your system deployment becomes more complex uh more",
    "start": "1556760",
    "end": "1562520"
  },
  {
    "text": "complex and also it is much more difficult to consume and that's where graph Quil actually shines with its",
    "start": "1562520",
    "end": "1569679"
  },
  {
    "text": "single API for the",
    "start": "1569679",
    "end": "1574240"
  },
  {
    "text": "consumer before going into Distributing a graph you should really think about",
    "start": "1575000",
    "end": "1580559"
  },
  {
    "text": "the concerns of Separation why do I want to separate and what is a good good reason to separate",
    "start": "1580559",
    "end": "1588760"
  },
  {
    "text": "like the most common reason I hear is the business logic boundaries or verticals that people have and that's",
    "start": "1588760",
    "end": "1596200"
  },
  {
    "text": "basically the reason to create folders or assemblies because it's actually not",
    "start": "1596200",
    "end": "1601240"
  },
  {
    "text": "a good reason to just create services and that's not really microservices like",
    "start": "1601240",
    "end": "1607120"
  },
  {
    "text": "domain services for each of your business concerns like assets accounts",
    "start": "1607120",
    "end": "1612279"
  },
  {
    "text": "or whatever and it's also not a good idea to have all your microservices",
    "start": "1612279",
    "end": "1619080"
  },
  {
    "text": "distributed about uh around hundreds of repositories I worked at a company that",
    "start": "1619080",
    "end": "1624279"
  },
  {
    "text": "actually had more repositories than developers yeah suddenly you're just",
    "start": "1624279",
    "end": "1631039"
  },
  {
    "text": "updating all of these uh these repositories and trying to keep them",
    "start": "1631039",
    "end": "1636640"
  },
  {
    "text": "maintained so be cautious about uh just a reason to put something in a",
    "start": "1636640",
    "end": "1642679"
  },
  {
    "text": "box a much better reason to think about distributed graph C is actually",
    "start": "1642679",
    "end": "1649039"
  },
  {
    "text": "organizational boundaries and with that we mean teams like you have maybe like",
    "start": "1649039",
    "end": "1654360"
  },
  {
    "text": "Netflix 130 teams or you have 20 teams or five teams and you want them to build",
    "start": "1654360",
    "end": "1659919"
  },
  {
    "text": "independently of each other language choice is also not a good",
    "start": "1659919",
    "end": "1664960"
  },
  {
    "text": "reason because how many languages do you want to have in your company maybe two maybe three but not",
    "start": "1664960",
    "end": "1672320"
  },
  {
    "text": "130 technology constraints uh can be a reason and scale",
    "start": "1672320",
    "end": "1678200"
  },
  {
    "text": "can also be a reason let's talk about scale so when we talk about scale it's",
    "start": "1678200",
    "end": "1684480"
  },
  {
    "text": "really three things that we should think about it's scaling data scaling",
    "start": "1684480",
    "end": "1689640"
  },
  {
    "text": "throughput so pressure and scaling developers so when we talk about scaling",
    "start": "1689640",
    "end": "1696600"
  },
  {
    "text": "data we often talk about Regional data we call that partitioning or",
    "start": "1696600",
    "end": "1704559"
  },
  {
    "text": "sharding sharding really is a method to distribute data across multiple regions",
    "start": "1704559",
    "end": "1710519"
  },
  {
    "text": "machines diss or files and when we talk about that it's",
    "start": "1710519",
    "end": "1716840"
  },
  {
    "text": "like we want to put the data close to our customer so when a request comes in we",
    "start": "1716840",
    "end": "1722399"
  },
  {
    "text": "want to direct it to the most optimal spot to fetch it from when we talk about throughput",
    "start": "1722399",
    "end": "1730880"
  },
  {
    "text": "scaling then we talk about a ton of requests and we want to scale our instances and that's where really",
    "start": "1730880",
    "end": "1738159"
  },
  {
    "text": "scaling a monolith like a huge graph graph might also be a",
    "start": "1738159",
    "end": "1744640"
  },
  {
    "text": "problem but this unified API worked for Facebook at a huge scale so this is not",
    "start": "1744720",
    "end": "1751760"
  },
  {
    "text": "the only reason why you should think about distributed graph Quil really the setup that Facebook did is put a thin",
    "start": "1751760",
    "end": "1758880"
  },
  {
    "text": "layer of graph Quil over the business layer they called the DNS layer their",
    "start": "1758880",
    "end": "1764159"
  },
  {
    "text": "entities layer and they allowed basically us users to project what they",
    "start": "1764159",
    "end": "1770279"
  },
  {
    "text": "needed so when we talk about graphql in the open source space after Facebook",
    "start": "1770279",
    "end": "1776760"
  },
  {
    "text": "open sourced it in 2016 people would build it not like Facebook did but more in a way that they",
    "start": "1776760",
    "end": "1783679"
  },
  {
    "text": "used graph qu really as a Gateway they would and mostly front end developers",
    "start": "1783679",
    "end": "1790480"
  },
  {
    "text": "actually uh tried to do it because they really wanted to use graph quare they would take a graph quare server and",
    "start": "1790480",
    "end": "1796480"
  },
  {
    "text": "spend it over your existing infrastructure and uh that gave them a",
    "start": "1796480",
    "end": "1802679"
  },
  {
    "text": "lot of benefits because they could model these entities that they actually have in",
    "start": "1802679",
    "end": "1808159"
  },
  {
    "text": "these services and connect them and give these connections actual meaning and",
    "start": "1808159",
    "end": "1814720"
  },
  {
    "text": "while they still had this crappy infrastructure behind graphql the front end Engineers no longer had to uh deal",
    "start": "1814720",
    "end": "1822600"
  },
  {
    "text": "with that they had this nice graphs and that over also solved a lot",
    "start": "1822600",
    "end": "1829480"
  },
  {
    "text": "of these scaling concerns because when I did a request for instance for my mobile application and just asked",
    "start": "1829480",
    "end": "1836600"
  },
  {
    "text": "for uh the name of a cryptocurrency or whatever or product then I would just",
    "start": "1836600",
    "end": "1842320"
  },
  {
    "text": "use the service that delivers these data like the product service and when my desktop application",
    "start": "1842320",
    "end": "1849640"
  },
  {
    "text": "asked for the same list but needed more information it would use more services",
    "start": "1849640",
    "end": "1854880"
  },
  {
    "text": "behind that so when we had like high pressure",
    "start": "1854880",
    "end": "1860000"
  },
  {
    "text": "on our graph layer which was just very thin on top uh we could scale like the services",
    "start": "1860000",
    "end": "1866960"
  },
  {
    "text": "behind that so we used graph as a Gateway but still using graph as a",
    "start": "1866960",
    "end": "1873799"
  },
  {
    "text": "Gateway has a lot of concerns to it because we basically have a BFF just",
    "start": "1873799",
    "end": "1879240"
  },
  {
    "text": "more dynamic in front of our old infrastructure and that means we have",
    "start": "1879240",
    "end": "1884480"
  },
  {
    "text": "all the freedoms to put our microservices behind that and the front",
    "start": "1884480",
    "end": "1889679"
  },
  {
    "text": "end engineer has all the benefits of this unified API but we still have all the concerns",
    "start": "1889679",
    "end": "1896880"
  },
  {
    "text": "of the BFF like high maintenance we also cannot optimize very well because these",
    "start": "1896880",
    "end": "1902320"
  },
  {
    "text": "resolvers are hardcoded and uh there's a very tight coupling between my infrastructure and",
    "start": "1902320",
    "end": "1908679"
  },
  {
    "text": "my graph quare layer let me just show you how um people",
    "start": "1908679",
    "end": "1914639"
  },
  {
    "text": "used to do that uh we did that also here we don't only have here these Entity framework resolvers we also used here",
    "start": "1914639",
    "end": "1921960"
  },
  {
    "text": "rest services like in this uh asset price note here we for instance have",
    "start": "1921960",
    "end": "1928039"
  },
  {
    "text": "here the asset price change data loader which let me quickly go here",
    "start": "1928039",
    "end": "1934000"
  },
  {
    "text": "where we fetch some Downstream this is an ugly method just to fetch some data from a rest service you would see",
    "start": "1934000",
    "end": "1940279"
  },
  {
    "text": "something like this very hand optimized and this really doesn't scale",
    "start": "1940279",
    "end": "1947399"
  },
  {
    "text": "okay the main concern that really brought in distributed graph qu then was",
    "start": "1952639",
    "end": "1959720"
  },
  {
    "text": "scaling developers or scaling our project with developers and this is really where we talk about distributed",
    "start": "1959720",
    "end": "1966720"
  },
  {
    "text": "graph qu it's not only scale we can scale much better with distributed graph qu but it's really scaling with",
    "start": "1966720",
    "end": "1974399"
  },
  {
    "text": "developers and in such a setup instead of having these rest services or grp",
    "start": "1974399",
    "end": "1980519"
  },
  {
    "text": "series Services behind our graph Quil Gateway we would swap them out with graph qu servers so we would compose our",
    "start": "1980519",
    "end": "1989120"
  },
  {
    "text": "Gateway from subgraphs each of these graph quare servers really represent a",
    "start": "1989120",
    "end": "1994519"
  },
  {
    "text": "subgraph that make up this graph qu Gateway and behind that we might have",
    "start": "1994519",
    "end": "2001559"
  },
  {
    "text": "microservices and that's really ideal like you don't have to have micros service could also be some other shape",
    "start": "2001559",
    "end": "2008519"
  },
  {
    "text": "or form that you prefer or even that your subgraphs call your business layer directly but the idea behind that is",
    "start": "2008519",
    "end": "2016480"
  },
  {
    "text": "that teams can own now a certain piece of your graph and independently deploy",
    "start": "2016480",
    "end": "2023279"
  },
  {
    "text": "it and they don't have a shared configuration when they deploy the overall graph updates and integrates",
    "start": "2023279",
    "end": "2030559"
  },
  {
    "text": "this subgraph and that's where um hot chocolate introduces a concept called",
    "start": "2030559",
    "end": "2036960"
  },
  {
    "text": "grapher which gives you all the capabilities of distributed graph",
    "start": "2036960",
    "end": "2042639"
  },
  {
    "text": "gr the idea is here to have basically zero",
    "start": "2042639",
    "end": "2047879"
  },
  {
    "text": "configuration when you put configuration there it's decentralized it's declarative and",
    "start": "2047879",
    "end": "2054560"
  },
  {
    "text": "composition of these graphs is done at build time to give you an early error if",
    "start": "2054560",
    "end": "2059638"
  },
  {
    "text": "something is wrong like maybe you build something in your subgraph that cannot be composed then you don't want to First",
    "start": "2059639",
    "end": "2065440"
  },
  {
    "text": "deploy it and then fail there it uses query plans to optimize these request",
    "start": "2065440",
    "end": "2071079"
  },
  {
    "text": "and use overlapping data like finding the best spot to fetch the data",
    "start": "2071079",
    "end": "2077200"
  },
  {
    "text": "phone and it also uses throughput to scale that by just using the subgraphs",
    "start": "2077200",
    "end": "2085118"
  },
  {
    "text": "that are really uh needed for a graph query subgraphs are valid on their own",
    "start": "2085119",
    "end": "2092079"
  },
  {
    "text": "like you could compose them with multiple overall graphs but there also transformation",
    "start": "2092079",
    "end": "2098960"
  },
  {
    "text": "capabilities that you have in in older uh Technologies of the graphical distrib",
    "start": "2098960",
    "end": "2105079"
  },
  {
    "text": "distributed approaches like schema stitching you have the Federation Concepts and the stitching Concepts on",
    "start": "2105079",
    "end": "2111000"
  },
  {
    "text": "top of that the graph Fusion Gateway has hot reload capabilities so in short",
    "start": "2111000",
    "end": "2117480"
  },
  {
    "text": "Fusion is a more natural approach towards distributed graph gr but let's have a look at that because so far we",
    "start": "2117480",
    "end": "2123800"
  },
  {
    "text": "just looked at simple graph C servers okay okay let's quickly get demo",
    "start": "2123800",
    "end": "2130160"
  },
  {
    "text": "four",
    "start": "2130160",
    "end": "2132720"
  },
  {
    "text": "up awesome okay this is a simple graph qu",
    "start": "2136160",
    "end": "2142680"
  },
  {
    "text": "setup I so far just have here subgraphs I have two subgraphs in this demo one is",
    "start": "2142680",
    "end": "2148680"
  },
  {
    "text": "called accounts and this account subgraph Deals Only with users so I have",
    "start": "2148680",
    "end": "2155720"
  },
  {
    "text": "here a query and you can see I have have here a user and if I go into that user",
    "start": "2155720",
    "end": "2161000"
  },
  {
    "text": "this user has ID name birth date and",
    "start": "2161000",
    "end": "2165920"
  },
  {
    "text": "username and this query here uses Entity",
    "start": "2167160",
    "end": "2172400"
  },
  {
    "text": "framework or in this case I have here a data loader which then uses Entity framework behind that but it could be",
    "start": "2172400",
    "end": "2178079"
  },
  {
    "text": "whatever you want it to be um and in this instance we have like here uh three",
    "start": "2178079",
    "end": "2185400"
  },
  {
    "text": "resolvers like get users by ID get user by username and then we have a get users",
    "start": "2185400",
    "end": "2191079"
  },
  {
    "text": "just to get a list a paginated list and uh step through that data so the second subgraph that I have",
    "start": "2191079",
    "end": "2200119"
  },
  {
    "text": "here is for reviews so basically reviews somebody wrote around a",
    "start": "2200119",
    "end": "2206599"
  },
  {
    "text": "product for my overall uh graph that I want to have here so the graph is around",
    "start": "2206599",
    "end": "2212119"
  },
  {
    "text": "a product catalog where I can write reviews and I have users basically that write these reviews",
    "start": "2212119",
    "end": "2218200"
  },
  {
    "text": "if I if I look at the review graph here I can see that the review graph actually",
    "start": "2218200",
    "end": "2224119"
  },
  {
    "text": "has a product but this product only has an ID and we have just here a partial",
    "start": "2224119",
    "end": "2230319"
  },
  {
    "text": "thing that is just the reviews I also can see that it has a user but this user",
    "start": "2230319",
    "end": "2237520"
  },
  {
    "text": "actually has only an ID and a name and knows reviews that this user wrote it's",
    "start": "2237520",
    "end": "2242760"
  },
  {
    "text": "basically the author of the reviews it also has a review of object which has a",
    "start": "2242760",
    "end": "2249040"
  },
  {
    "text": "body and stars and all these things that are specific uh specific to reviews what",
    "start": "2249040",
    "end": "2254839"
  },
  {
    "text": "we see here really is that we have kind of some overlap between those two",
    "start": "2254839",
    "end": "2260599"
  },
  {
    "text": "Services we call that overlapping data and the graphql Fusion engine can use",
    "start": "2260599",
    "end": "2267119"
  },
  {
    "text": "this overlapping data to optimize your request but we will see that so what I want to do is now really",
    "start": "2267119",
    "end": "2274839"
  },
  {
    "text": "create a Gateway that gives me one view one overall graph from these services so what do I have to do for that let me",
    "start": "2274839",
    "end": "2282200"
  },
  {
    "text": "just close this and let's do that so I'm going here",
    "start": "2282200",
    "end": "2289040"
  },
  {
    "text": "and I'm using a project uh a project template which is called uh graph qu",
    "start": "2289040",
    "end": "2294839"
  },
  {
    "text": "Gateway this template comes actually with our templates that we have for hot chocolate to install them I can just do",
    "start": "2294839",
    "end": "2302319"
  },
  {
    "text": "net new install and then it's the hot chocolate templates",
    "start": "2302319",
    "end": "2308000"
  },
  {
    "text": "and I could install them and then uh it downloads them from from newat I have them already installed so I can just say",
    "start": "2308000",
    "end": "2315680"
  },
  {
    "text": "net new graph qu Gateway and then this thing creates me a",
    "start": "2315680",
    "end": "2320960"
  },
  {
    "text": "Gateway if I look at the Gateway code here let's do that let's actually",
    "start": "2320960",
    "end": "2326720"
  },
  {
    "text": "refresh that don't",
    "start": "2326720",
    "end": "2330920"
  },
  {
    "text": "restore then I can see that uh I basically have almost no code here it's",
    "start": "2331800",
    "end": "2337280"
  },
  {
    "text": "it's single code file I have here my Fusion Gateway setup which at the moment",
    "start": "2337280",
    "end": "2342440"
  },
  {
    "text": "is configured to load the Gateway configuration from a file and it's also set up to use hot reload it could also",
    "start": "2342440",
    "end": "2350000"
  },
  {
    "text": "store the configuration actually in reddis uh in a database or wherever you want",
    "start": "2350000",
    "end": "2356240"
  },
  {
    "text": "that apart from that I have here the HTP client Factory to which is set up to",
    "start": "2356240",
    "end": "2362119"
  },
  {
    "text": "just uh do HTTP requests you could configure that with poy to make it more",
    "start": "2362119",
    "end": "2367440"
  },
  {
    "text": "resilient and you could also have like a header propagation if we had a proper",
    "start": "2367440",
    "end": "2373079"
  },
  {
    "text": "authorization setup here but apart from that it's a simple graph C server I can",
    "start": "2373079",
    "end": "2378160"
  },
  {
    "text": "start that and at this point actually this",
    "start": "2378160",
    "end": "2383359"
  },
  {
    "text": "graph has no configuration so if I call that it would",
    "start": "2383359",
    "end": "2390160"
  },
  {
    "text": "actually say there's nothing so now I want to compose my",
    "start": "2390160",
    "end": "2395319"
  },
  {
    "text": "subgraphs into it and I said that is done at build time so I can come up here",
    "start": "2395319",
    "end": "2400920"
  },
  {
    "text": "with the second Tab and then I can use the fusion command line and I installed",
    "start": "2400920",
    "end": "2407000"
  },
  {
    "text": "that already here so the fusion command line is a local tool it's hot chocolate Fusion command",
    "start": "2407000",
    "end": "2414079"
  },
  {
    "text": "line away and with that I can compose like the graph configuration so what I'm",
    "start": "2414440",
    "end": "2420960"
  },
  {
    "text": "doing here now is saying net Fusion then you can see here compose my Gateway with",
    "start": "2420960",
    "end": "2427560"
  },
  {
    "text": "the review subgraph or let's start with the account subgraph actually I'm going to do that the Gateway is running by the",
    "start": "2427560",
    "end": "2435599"
  },
  {
    "text": "way we don't have to restart it it is no configured and we can go here to Banana",
    "start": "2435599",
    "end": "2443839"
  },
  {
    "text": "Kpop I'm actually going here to my Gateway configuration let's take that actually",
    "start": "2443839",
    "end": "2450359"
  },
  {
    "text": "away refresh that and now I can see here I have a lot",
    "start": "2450359",
    "end": "2456119"
  },
  {
    "text": "of types and this are actually the types you saw the methods in the user subgraph this is",
    "start": "2456119",
    "end": "2464079"
  },
  {
    "text": "a one to one translation of my uh user subgraphs",
    "start": "2464079",
    "end": "2469560"
  },
  {
    "text": "the user subgraph actually is not running behind that so if I would call one of these it would fail in this",
    "start": "2469560",
    "end": "2475040"
  },
  {
    "text": "instance but it's already composed so I can compose it really at build time and",
    "start": "2475040",
    "end": "2480720"
  },
  {
    "text": "get also build time errors if something is wrong so let's compose into it the",
    "start": "2480720",
    "end": "2486960"
  },
  {
    "text": "second subgraph and see what happens so I'm taking this second subgraph here",
    "start": "2486960",
    "end": "2492560"
  },
  {
    "text": "which is",
    "start": "2492560",
    "end": "2494920"
  },
  {
    "text": "reviews and then I'm going back here I didn't restart but suddenly I have a ton more",
    "start": "2497920",
    "end": "2505079"
  },
  {
    "text": "things here I have the reviews but I not only have the reviews the review types",
    "start": "2505079",
    "end": "2511680"
  },
  {
    "text": "really integrated with the user types so I have suddenly here review nodes I have",
    "start": "2511680",
    "end": "2518760"
  },
  {
    "text": "here an author which is a user and I have merged these entities that really belong together so now I have an",
    "start": "2518760",
    "end": "2525240"
  },
  {
    "text": "integrated graph that I can query so how this composition really",
    "start": "2525240",
    "end": "2532000"
  },
  {
    "text": "works is that we take these types and we going to merge them and we're going to",
    "start": "2532000",
    "end": "2539640"
  },
  {
    "text": "annotate which types are really which data is really where so we know that for",
    "start": "2539640",
    "end": "2545880"
  },
  {
    "text": "instance these two properties are available of in both subgraphs so I can query them for both I know that these",
    "start": "2545880",
    "end": "2553319"
  },
  {
    "text": "information are only available on the accounts subgraph and that these information are only available on the uh",
    "start": "2553319",
    "end": "2561240"
  },
  {
    "text": "review subgraph and how the composition really works is that we take these subgraphs",
    "start": "2561240",
    "end": "2568240"
  },
  {
    "text": "merge them into one Fusion graph configuration so how that uh is set up",
    "start": "2568240",
    "end": "2575800"
  },
  {
    "text": "actually in the wild would be that you have a build Pipeline and this build pipeline would build your subgraph basically a net build and then extract",
    "start": "2575800",
    "end": "2584079"
  },
  {
    "text": "from that all the information about this schema dump the schema pack it as a subgraph configuration and then we would",
    "start": "2584079",
    "end": "2591040"
  },
  {
    "text": "start deploying this deploying means that we first download the fusion graph",
    "start": "2591040",
    "end": "2596760"
  },
  {
    "text": "configuration that is currently deployed outside and uh in this Fusion graph",
    "start": "2596760",
    "end": "2603160"
  },
  {
    "text": "configuration are really all information that we need to compose the new version of this graph so we have all the",
    "start": "2603160",
    "end": "2611119"
  },
  {
    "text": "currently deployed subgraph versions in there and we also have the public schema",
    "start": "2611119",
    "end": "2616960"
  },
  {
    "text": "that is outwardly exposed in there so what we do in the composition",
    "start": "2616960",
    "end": "2622040"
  },
  {
    "text": "step is take this new subgraph information and merges with these the older ones once we've done that and this",
    "start": "2622040",
    "end": "2630000"
  },
  {
    "text": "works through we don't have an error we can deploy that and we are done we have a new graph the Gateway need only to be",
    "start": "2630000",
    "end": "2637839"
  },
  {
    "text": "deployed once because we can fully configure it with this Fusion configuration let's talk about query",
    "start": "2637839",
    "end": "2645079"
  },
  {
    "text": "plans because so far I just showed you the composition to show you a bit the",
    "start": "2645079",
    "end": "2650319"
  },
  {
    "text": "the query plans let's start these subgraphs so I'm going to",
    "start": "2650319",
    "end": "2657599"
  },
  {
    "text": "run project not the Gateway we going to take a subgraph here the Rev subgraph",
    "start": "2661119",
    "end": "2668640"
  },
  {
    "text": "there and now I take the other subgraph here which is the account",
    "start": "2673440",
    "end": "2680319"
  },
  {
    "text": "subgraph we run that comes up and we go here to our operations",
    "start": "2680920",
    "end": "2689960"
  },
  {
    "text": "Tab and we can basically query it so I could go here reviews go into the notes",
    "start": "2689960",
    "end": "2697800"
  },
  {
    "text": "take the body and run this query and you can see the data is coming in this is the the",
    "start": "2697800",
    "end": "2704280"
  },
  {
    "text": "graph at the moment is new so takes the first time to initialize that is with aot you don't have that problem but now",
    "start": "2704280",
    "end": "2711160"
  },
  {
    "text": "you can see it's really fast even in such a distributed setup we have really fast",
    "start": "2711160",
    "end": "2716839"
  },
  {
    "text": "interaction so let's make really a more complex graph so let's get this graph",
    "start": "2716839",
    "end": "2722200"
  },
  {
    "text": "out and then let's really have a look at what's happening under the hood",
    "start": "2722200",
    "end": "2728280"
  },
  {
    "text": "so I'm throwing this example away and actually I have here another",
    "start": "2728280",
    "end": "2735240"
  },
  {
    "text": "demo this is the full subgraph also with uh more things to it like we have here",
    "start": "2735240",
    "end": "2740480"
  },
  {
    "text": "three subgraphs like a product subgraph account subgraph and review subgraph",
    "start": "2740480",
    "end": "2745839"
  },
  {
    "text": "let's quickly run these come",
    "start": "2745839",
    "end": "2752039"
  },
  {
    "text": "on and this is net run",
    "start": "2753079",
    "end": "2758040"
  },
  {
    "text": "Gateway okay Gateway is coming up then we take the account subgraph",
    "start": "2759599",
    "end": "2768800"
  },
  {
    "text": "here the product subgraph it's a bit too type and we going to run here the review",
    "start": "2770760",
    "end": "2779760"
  },
  {
    "text": "subgraph okay all these graphs come up let's go",
    "start": "2779760",
    "end": "2785160"
  },
  {
    "text": "in here and take a different more complex query this query 3 you can see",
    "start": "2785160",
    "end": "2790760"
  },
  {
    "text": "at the moment I don't have the uh field here I need to refresh my schema because",
    "start": "2790760",
    "end": "2795880"
  },
  {
    "text": "I brought a third subgraph in I refreshed it and I see I can now call it if I run this query you can see it has",
    "start": "2795880",
    "end": "2803040"
  },
  {
    "text": "some in initialization time but now everything is up we are fast and I can",
    "start": "2803040",
    "end": "2809280"
  },
  {
    "text": "actually look at the query plan so what I did here is provide a header called graph query plan header it's only",
    "start": "2809280",
    "end": "2816400"
  },
  {
    "text": "working on development but I suddenly can look into What's Happening Here I have here a query plan and this query",
    "start": "2816400",
    "end": "2823680"
  },
  {
    "text": "plan exposes all the step that the graph qu server does to resolve this data let's actually look at that in a",
    "start": "2823680",
    "end": "2830760"
  },
  {
    "text": "more structural way so when I do the certain requests here then uh I get a query plan in this",
    "start": "2830760",
    "end": "2839760"
  },
  {
    "text": "instance I quered the products and the graphco server actually looked at how it",
    "start": "2839760",
    "end": "2845280"
  },
  {
    "text": "can fetch these data and determined like the products data I actually get from",
    "start": "2845280",
    "end": "2851160"
  },
  {
    "text": "the products graph so the products and the name I get that from the products graph uh I can compose that and then I",
    "start": "2851160",
    "end": "2858800"
  },
  {
    "text": "expose here internally the ID because this ID I need and then I go for each of",
    "start": "2858800",
    "end": "2865160"
  },
  {
    "text": "the products that I fetch here and fetch that from the subgraph and when you look at that you",
    "start": "2865160",
    "end": "2871359"
  },
  {
    "text": "can see okay that is not performant because we are actually going now for each of the item in my products graph in",
    "start": "2871359",
    "end": "2878839"
  },
  {
    "text": "my products list and fetch something from a subgraph which would kind of be slow but the cool thing here is that",
    "start": "2878839",
    "end": "2885720"
  },
  {
    "text": "this is transparent we have we can hook that up to open Telemetry and see these",
    "start": "2885720",
    "end": "2890800"
  },
  {
    "text": "query plant and reason about them and then the teams can make decisions part",
    "start": "2890800",
    "end": "2896400"
  },
  {
    "text": "on that one decision in this case is that we need a batch fetching method in",
    "start": "2896400",
    "end": "2902319"
  },
  {
    "text": "our review subgraph to get all the reviews for a product in one",
    "start": "2902319",
    "end": "2907920"
  },
  {
    "text": "go so let's do that in order to do that I can go back",
    "start": "2907920",
    "end": "2913599"
  },
  {
    "text": "to my solution here stop in this case my review subgraph go into my review",
    "start": "2913599",
    "end": "2920960"
  },
  {
    "text": "subgraph and look at the queries in my queries I can see I have",
    "start": "2920960",
    "end": "2926640"
  },
  {
    "text": "here a single method called get products by ID uh which just gives allows me to pass",
    "start": "2926640",
    "end": "2934400"
  },
  {
    "text": "in one ID to make it batch fetchable I can now introduce a new resolver",
    "start": "2934400",
    "end": "2941240"
  },
  {
    "text": "here oh sorry come",
    "start": "2941559",
    "end": "2946720"
  },
  {
    "text": "on which allows me to pass in multiple IDs so this is totally faked it's not database here just for demos purposes",
    "start": "2946720",
    "end": "2954359"
  },
  {
    "text": "this would be a call to your service layer or your database or whatever but it allows me now to pass in multiple",
    "start": "2954359",
    "end": "2961599"
  },
  {
    "text": "product IDs into my resolver here so I introduced the this field here",
    "start": "2961599",
    "end": "2968839"
  },
  {
    "text": "and I can also give my Gateway composition a couple of hints here that",
    "start": "2968839",
    "end": "2974200"
  },
  {
    "text": "this field should be used in a certain way essentially give my schema more semantics so I can basically add here",
    "start": "2974200",
    "end": "2982440"
  },
  {
    "text": "little configuration and then tell it to that",
    "start": "2982440",
    "end": "2989680"
  },
  {
    "text": "this resolver actually the IDS passed in here is",
    "start": "2989680",
    "end": "2994839"
  },
  {
    "text": "semantically the same as the ID that is returned from this product and then the",
    "start": "2994839",
    "end": "3000240"
  },
  {
    "text": "composition can reason about the structure of the graph and what it means in that graph so I've done that and now",
    "start": "3000240",
    "end": "3008280"
  },
  {
    "text": "I just need to pack my subgraph this is in the build step uh how I would do that",
    "start": "3008280",
    "end": "3013680"
  },
  {
    "text": "is basically I do a net run and then I can export dump the schema that is the",
    "start": "3013680",
    "end": "3019720"
  },
  {
    "text": "schema of my solution here and sorry I have to actually say that it's the project",
    "start": "3019720",
    "end": "3029760"
  },
  {
    "text": "subgraph and then we R your subgraph and then I export the schema here so it dumps this schema file here",
    "start": "3029760",
    "end": "3038240"
  },
  {
    "text": "and then we can compose our our um subgraph",
    "start": "3038240",
    "end": "3044680"
  },
  {
    "text": "configuration Fusion subgraph we pack our subgraph configuration here and now",
    "start": "3045000",
    "end": "3050079"
  },
  {
    "text": "we can compose our new Gateway compose",
    "start": "3050079",
    "end": "3058319"
  },
  {
    "text": "no why so we compose our Gateway the Gateway is while we are doing that still",
    "start": "3058319",
    "end": "3064799"
  },
  {
    "text": "running so it's already hot reloaded we can just say net",
    "start": "3064799",
    "end": "3070839"
  },
  {
    "text": "run um project sub graph yes but not this guy",
    "start": "3070839",
    "end": "3077640"
  },
  {
    "text": "here okay this comes up we do the same request",
    "start": "3078119",
    "end": "3084079"
  },
  {
    "text": "again go here we rerun that and let me just collapse the data you",
    "start": "3084079",
    "end": "3091240"
  },
  {
    "text": "can see now our review subgraph here has a query plan where we resolve",
    "start": "3091240",
    "end": "3097040"
  },
  {
    "text": "first like before the products but now we have here a resolver key by key badge",
    "start": "3097040",
    "end": "3103280"
  },
  {
    "text": "where we now collect all the IDS of the first request and then batch them in one",
    "start": "3103280",
    "end": "3108520"
  },
  {
    "text": "go to our new method that we produced here the products by ID like structural now we have two",
    "start": "3108520",
    "end": "3116040"
  },
  {
    "text": "requests and it's fully optimized and I have a very um it's very easy to provide these",
    "start": "3116040",
    "end": "3123240"
  },
  {
    "text": "and I have full control over how it's batched and I can put in my",
    "start": "3123240",
    "end": "3128280"
  },
  {
    "text": "optimizations there so you have this control of these query plans in how this",
    "start": "3128280",
    "end": "3134079"
  },
  {
    "text": "performs you can even optimize them by hand and provide them back to your",
    "start": "3134079",
    "end": "3139680"
  },
  {
    "text": "gateway so let's talk about real time graphql because that was for many um",
    "start": "3139680",
    "end": "3145760"
  },
  {
    "text": "distributed Gra graph quare technology is a problem let's have a look at how we handle that with fusion and net so let's",
    "start": "3145760",
    "end": "3153559"
  },
  {
    "text": "go back to the same solution actually here and what we want to do is we have",
    "start": "3153559",
    "end": "3158920"
  },
  {
    "text": "here a mutation that provides reviews so what we want to do is introduce a subscription into",
    "start": "3158920",
    "end": "3166960"
  },
  {
    "text": "that come on that gives us um a notification every",
    "start": "3167200",
    "end": "3173440"
  },
  {
    "text": "time somebody publishes a review so that's an easy thing to do we added here",
    "start": "3173440",
    "end": "3179200"
  },
  {
    "text": "a subscription type in our graph server and then we basically do the same like",
    "start": "3179200",
    "end": "3186240"
  },
  {
    "text": "we did before we dump our schema then we um compose our or we pack",
    "start": "3186240",
    "end": "3194920"
  },
  {
    "text": "our subgraph we compose our Gateway Fusion",
    "start": "3194920",
    "end": "3201599"
  },
  {
    "text": "compose and then we start our graph C server again",
    "start": "3201599",
    "end": "3207480"
  },
  {
    "text": "and what this PEC subgraph actually does is inspect our graph Cur server for how transport works with this thing are we",
    "start": "3207480",
    "end": "3214720"
  },
  {
    "text": "using graph qu over SS are we using graph Quil WS or are be using the Legacy",
    "start": "3214720",
    "end": "3220079"
  },
  {
    "text": "Apollo protocol and then it comes up and it just",
    "start": "3220079",
    "end": "3225760"
  },
  {
    "text": "works so we can now go here go actually to this um demo two and then we have",
    "start": "3225760",
    "end": "3234640"
  },
  {
    "text": "here our subscription I can run that and you can see I'm subscribed",
    "start": "3234640",
    "end": "3240280"
  },
  {
    "text": "now actually let's refresh that so this is empty you can see I'm",
    "start": "3240280",
    "end": "3246559"
  },
  {
    "text": "subscribed and uh we can open another tub while this is subscribed and this",
    "start": "3246559",
    "end": "3251960"
  },
  {
    "text": "another top is called create review and I have this review that I",
    "start": "3251960",
    "end": "3257000"
  },
  {
    "text": "want to create here I fire that go back here and I can see my result is there so",
    "start": "3257000",
    "end": "3262280"
  },
  {
    "text": "this is graphical subscription in a distributed setup it's just add your subscription to subgraph compose we will",
    "start": "3262280",
    "end": "3269319"
  },
  {
    "text": "figure out how to configure the Gateway with transport and all um and just make",
    "start": "3269319",
    "end": "3275440"
  },
  {
    "text": "it work and let me show you one more thing so just so this is not fake I'm changing",
    "start": "3275440",
    "end": "3281720"
  },
  {
    "text": "the data here to whatever I'm running that and you can see real time data",
    "start": "3281720",
    "end": "3290200"
  },
  {
    "text": "works there are other concerns in graph qu but see I have six more minutes there",
    "start": "3291319",
    "end": "3298680"
  },
  {
    "text": "are other concerns here like there are patterns and best practices they also challenged graphical gateways quite a",
    "start": "3298680",
    "end": "3305599"
  },
  {
    "text": "lot one of the patterns are the really schema patterns like the note pattern or",
    "start": "3305599",
    "end": "3311200"
  },
  {
    "text": "the pagination patterns and stuff like that and this is also really easy to do",
    "start": "3311200",
    "end": "3316400"
  },
  {
    "text": "with graph fusion and let me show you that also",
    "start": "3316400",
    "end": "3323039"
  },
  {
    "text": "quickly like I'm going back in here and at at the moment my Gateway looks a bit",
    "start": "3323039",
    "end": "3328680"
  },
  {
    "text": "like this I can go here to my schema graph you can see uh I have here query mutation subscription when I go to query",
    "start": "3328680",
    "end": "3336440"
  },
  {
    "text": "I don't have the typical node field I would have if I implemented the relay server specification basically the graph",
    "start": "3336440",
    "end": "3342400"
  },
  {
    "text": "quare best practices that all uh Enterprise graph ques would Implement uh and in in order to have",
    "start": "3342400",
    "end": "3349480"
  },
  {
    "text": "that you don't even need to implement that in your subgraphs what you need to do is actually just tell us about that",
    "start": "3349480",
    "end": "3355599"
  },
  {
    "text": "you want to use such a thing so we could go back here say compose me the Gateway",
    "start": "3355599",
    "end": "3361920"
  },
  {
    "text": "and enable nodes that the nodes pattern for instance and then we start our",
    "start": "3361920",
    "end": "3367280"
  },
  {
    "text": "subgraph here again here we go to our go to",
    "start": "3367280",
    "end": "3373640"
  },
  {
    "text": "our graph qu IDE we refresh that thing go to the query type and there is the",
    "start": "3373640",
    "end": "3379319"
  },
  {
    "text": "notes pattern which I can now easily use let's do that do we have a notes quy",
    "start": "3379319",
    "end": "3385680"
  },
  {
    "text": "Here yeah that's a notes query for instance for an item in our graph um it",
    "start": "3385680",
    "end": "3391319"
  },
  {
    "text": "it actually just uh looks up the ID and looks what type it is I can do that here",
    "start": "3391319",
    "end": "3396400"
  },
  {
    "text": "you can see it's a product type I again expose here the the query plan and what you can see is that we have here",
    "start": "3396400",
    "end": "3403000"
  },
  {
    "text": "sequence and then we have a specific um specific query plan um shape for our",
    "start": "3403000",
    "end": "3413440"
  },
  {
    "text": "note resolver and this has here a couple of br buches like if it's a product then we fetch it from this graph it's a",
    "start": "3413440",
    "end": "3420160"
  },
  {
    "text": "reviews fetch it from this graph if it's a user fetch it from this graph and at the end we compose the results and give",
    "start": "3420160",
    "end": "3426839"
  },
  {
    "text": "you the thing and in this case I also could like get the product here uh get",
    "start": "3426839",
    "end": "3433359"
  },
  {
    "text": "the name uh maybe go into the reviews uh let's get the list of reviews",
    "start": "3433359",
    "end": "3439039"
  },
  {
    "text": "here uh body maybe let's also get the author from the auth of the birthday and then rerun that and then we get the data",
    "start": "3439039",
    "end": "3446799"
  },
  {
    "text": "here and and we are using now three subgraphs here probably like you can see here we we resolving the node uh from",
    "start": "3446799",
    "end": "3455119"
  },
  {
    "text": "the product server and then we compose the result down here and then we fetch other data",
    "start": "3455119",
    "end": "3461280"
  },
  {
    "text": "from another graph and down here we then fetch the birth date from the accounts graph so everything uh is composed",
    "start": "3461280",
    "end": "3469280"
  },
  {
    "text": "so no matter what the complexity is we take it out and uh we allow these um",
    "start": "3469280",
    "end": "3476599"
  },
  {
    "text": "these isolated work of your teams on their part of the graph and just make it",
    "start": "3476599",
    "end": "3482960"
  },
  {
    "text": "work there's one more thing uh I'm a graph quare TSC as I said and the graph",
    "start": "3482960",
    "end": "3489160"
  },
  {
    "text": "quare Foundation is something hosted by the Linux Foundation it's an uh it",
    "start": "3489160",
    "end": "3494200"
  },
  {
    "text": "governs the Open Source process around graph qu and uh if you're interested in",
    "start": "3494200",
    "end": "3499760"
  },
  {
    "text": "to graph we actually have a conference in San Francisco in September so if you",
    "start": "3499760",
    "end": "3507359"
  },
  {
    "text": "want to speak we are looking always for new speakers in the graph realm if you have something to to talk about in graph",
    "start": "3507359",
    "end": "3515319"
  },
  {
    "text": "or even if you want to watch it uh make sure to sign up for it and with that if",
    "start": "3515319",
    "end": "3522119"
  },
  {
    "text": "you have questions shoot or I look them up if you added",
    "start": "3522119",
    "end": "3528160"
  },
  {
    "text": "them to slido let me quickly",
    "start": "3528160",
    "end": "3533799"
  },
  {
    "text": "look uh I have that down here here",
    "start": "3533799",
    "end": "3540280"
  },
  {
    "text": "no damn it I closed the window but doesn't",
    "start": "3540280",
    "end": "3545440"
  },
  {
    "text": "matter ah",
    "start": "3548680",
    "end": "3552838"
  },
  {
    "text": "typical uh audience Q okay what's the difference between fusion and Apollo",
    "start": "3554960",
    "end": "3560720"
  },
  {
    "text": "Federation um like Apollo Federation is the first approach towards feder ated",
    "start": "3560720",
    "end": "3566839"
  },
  {
    "text": "schemas um f we actually had a different approach before we created Fusion to",
    "start": "3566839",
    "end": "3573119"
  },
  {
    "text": "solve all the problems that they uh introduced with Apollo Federation like things like the node patterns Apollo is",
    "start": "3573119",
    "end": "3580160"
  },
  {
    "text": "working for two years already on that they um it has no traction subscriptions",
    "start": "3580160",
    "end": "3585960"
  },
  {
    "text": "things like defer and stream they just work and they work much faster like we have a customer that um migrated from",
    "start": "3585960",
    "end": "3593000"
  },
  {
    "text": "Apollo Federation and they were using 1,000 200 pots and they migrated to",
    "start": "3593000",
    "end": "3598160"
  },
  {
    "text": "fusion and now they're using 30 pots for for the same performance like hot",
    "start": "3598160",
    "end": "3603359"
  },
  {
    "text": "chocolate is one of the five fastest draft server out there out competing Apollo by",
    "start": "3603359",
    "end": "3610319"
  },
  {
    "text": "uh I think by factor of 15 or so so there's a ton of difference but from a",
    "start": "3610319",
    "end": "3617440"
  },
  {
    "text": "conceptual standpoint we are much easier to use you saw how easy it is to compose",
    "start": "3617440",
    "end": "3622720"
  },
  {
    "text": "this graph like I had only two times to annotate something to make it faster in",
    "start": "3622720",
    "end": "3628280"
  },
  {
    "text": "Apollo you can also have um low annotations but as soon as you has com",
    "start": "3628280",
    "end": "3634319"
  },
  {
    "text": "Concepts like requiring data from another subgraph you have to um annotate",
    "start": "3634319",
    "end": "3639559"
  },
  {
    "text": "that the uh then we have like directives which is complex with Apollo and there",
    "start": "3639559",
    "end": "3646280"
  },
  {
    "text": "there's a lot of complexities around that we took that out it's not that Apollo is",
    "start": "3646280",
    "end": "3652480"
  },
  {
    "text": "necessarily a bad solution but uh we also learned from these Concepts we used",
    "start": "3652480",
    "end": "3658920"
  },
  {
    "text": "stitching before and this is just another iteration in this U bandwagon of",
    "start": "3658920",
    "end": "3665079"
  },
  {
    "text": "distributed graph C and uh I think it's much easier as you",
    "start": "3665079",
    "end": "3671359"
  },
  {
    "text": "could could see with subscription and these things yeah so that's also one point",
    "start": "3671359",
    "end": "3679119"
  },
  {
    "text": "here's the question uh will API stitching infusion work with graph. net",
    "start": "3679119",
    "end": "3684640"
  },
  {
    "text": "implementation or do I need hot chocolate uh so hot chocolate that's also a major difference to us and",
    "start": "3684640",
    "end": "3691839"
  },
  {
    "text": "Federation you can use any graph quare server and they don't have to implement anything from Fusion we can do that with",
    "start": "3691839",
    "end": "3698720"
  },
  {
    "text": "any graph quare server without polluting your graph quare server with any",
    "start": "3698720",
    "end": "3704280"
  },
  {
    "text": "code um and also we have a support for stitching Concepts like you can not only",
    "start": "3704280",
    "end": "3709400"
  },
  {
    "text": "Federate these configurations but you have also transformation rules like if you want flatten data structure like if",
    "start": "3709400",
    "end": "3715279"
  },
  {
    "text": "you have this ugly um SRP graph Quil integration there",
    "start": "3715279",
    "end": "3721279"
  },
  {
    "text": "right uh and they have not the structure you want to have you can flatten that rewrite that and integrate into",
    "start": "3721279",
    "end": "3729599"
  },
  {
    "text": "Fusion do we need endpoint map graph qu in program yes you need that so this is",
    "start": "3729599",
    "end": "3736319"
  },
  {
    "text": "standard we have the same middleware pipeline that means you have also the same capabilities that you had with hot",
    "start": "3736319",
    "end": "3742760"
  },
  {
    "text": "chocolate but we have a complete new execution engine under there how do we know the fu the fusion",
    "start": "3742760",
    "end": "3751440"
  },
  {
    "text": "correctly mapped the IDS for users what if we have coincidence the same names",
    "start": "3751440",
    "end": "3758520"
  },
  {
    "text": "and Fields and uh classes and Fields so same classes and Fields just means",
    "start": "3758520",
    "end": "3764640"
  },
  {
    "text": "there's an overlap that is something you have to uh work with like if you have",
    "start": "3764640",
    "end": "3770480"
  },
  {
    "text": "the same types in the subgraph it's essentially for us the same time that means we can put it over each other and",
    "start": "3770480",
    "end": "3777079"
  },
  {
    "text": "that means we can fetch the datas from both sides like Fusion will always expect that you have overlapping data",
    "start": "3777079",
    "end": "3783680"
  },
  {
    "text": "first this is something that in a polo fation for instance they call sharable you always have to annotate that with",
    "start": "3783680",
    "end": "3789920"
  },
  {
    "text": "hot chocolate uh Fusion we just expect that this is overlapping data and you tell us if you want it otherwise because",
    "start": "3789920",
    "end": "3796680"
  },
  {
    "text": "that is the most common case you want to have um and also this like if the type",
    "start": "3796680",
    "end": "3804359"
  },
  {
    "text": "for instance if I had to montic author type in my uh Downstream service for",
    "start": "3804359",
    "end": "3809480"
  },
  {
    "text": "reviews it could be named authors and we would still be able to merge it with the",
    "start": "3809480",
    "end": "3815440"
  },
  {
    "text": "user type and if it had a different ID structure we could rewrite that and uh",
    "start": "3815440",
    "end": "3821000"
  },
  {
    "text": "map these things are there limited uh yeah so are",
    "start": "3821000",
    "end": "3826200"
  },
  {
    "text": "there limitations toward scale like this is specifically built for high scale so",
    "start": "3826200",
    "end": "3832680"
  },
  {
    "text": "like to give you the capabilities of SC radio subgraphs you have a very thin",
    "start": "3832680",
    "end": "3838000"
  },
  {
    "text": "Gateway that is hot reloadable um and it is just there to",
    "start": "3838000",
    "end": "3843279"
  },
  {
    "text": "root requests to your Downstream services and these you can scale",
    "start": "3843279",
    "end": "3850359"
  },
  {
    "text": "independently um and uh like as I said we are looking at three kinds of scale",
    "start": "3850359",
    "end": "3856200"
  },
  {
    "text": "here like data rerouting overlapping data uh it's throughput to your",
    "start": "3856200",
    "end": "3861279"
  },
  {
    "text": "subgraphs and it's also um Team team scaling like your developer scaling so",
    "start": "3861279",
    "end": "3867680"
  },
  {
    "text": "that you can work with multiple teams okay",
    "start": "3867680",
    "end": "3875359"
  },
  {
    "text": "awesome thank you I think I'm bit over the time",
    "start": "3875880",
    "end": "3881700"
  },
  {
    "text": "[Applause]",
    "start": "3881700",
    "end": "3887579"
  }
]