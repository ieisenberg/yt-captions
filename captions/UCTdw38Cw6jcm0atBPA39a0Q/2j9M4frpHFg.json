[
  {
    "start": "0",
    "end": "102000"
  },
  {
    "text": "okay hi Mick started life in 2002 it",
    "start": "650",
    "end": "6960"
  },
  {
    "text": "replaced template-based across we make build system I had this problem that",
    "start": "6960",
    "end": "13559"
  },
  {
    "text": "bill took forever but actually the main problem with it was that all the build intelligence or bid knowledge was",
    "start": "13559",
    "end": "19800"
  },
  {
    "text": "distributed into hundreds or make files so hi Mick is a second-order build",
    "start": "19800",
    "end": "25890"
  },
  {
    "text": "system it generate make files from simple build description files and then",
    "start": "25890",
    "end": "30960"
  },
  {
    "text": "it offloads the actual build to make and in that regard I think it's similar to see making you make but you also think",
    "start": "30960",
    "end": "38309"
  },
  {
    "text": "it high make has some features that some of the other bits isn't don't in our",
    "start": "38309",
    "end": "46230"
  },
  {
    "text": "organization we try to build from source as much as possible you think it gives",
    "start": "46230",
    "end": "53149"
  },
  {
    "text": "quite a lot of flexibility and high dynamics in the development process because anyone can change code",
    "start": "53149",
    "end": "60030"
  },
  {
    "text": "everywhere and whether it's changing a API or inserting a printf force and",
    "start": "60030",
    "end": "66570"
  },
  {
    "text": "debugging also it has this advantage by building everything with the same",
    "start": "66570",
    "end": "72630"
  },
  {
    "text": "compiler and the same compilers which is we avoid application binary interface",
    "start": "72630",
    "end": "78500"
  },
  {
    "text": "problems and we also avoid one definition rule violations of course",
    "start": "78500",
    "end": "85290"
  },
  {
    "text": "there are some exceptions to this for instance acute and boost which are really big binaries or",
    "start": "85290",
    "end": "91350"
  },
  {
    "text": "libraries they are provided as pre-compiled libraries ok design",
    "start": "91350",
    "end": "99810"
  },
  {
    "text": "principles hi Mike was designed to be easy to use and that also implies it should be easy",
    "start": "99810",
    "end": "107070"
  },
  {
    "start": "102000",
    "end": "102000"
  },
  {
    "text": "to use correctly one of the things does is it puts all the build intelligence",
    "start": "107070",
    "end": "113640"
  },
  {
    "text": "into one place high makers also cross-platform it cares about",
    "start": "113640",
    "end": "120899"
  },
  {
    "text": "correctness it cares about fast builds and it also has quite a lot of X ability",
    "start": "120899",
    "end": "130759"
  },
  {
    "text": "when that said is we also think that and hi make is an enterprise build system",
    "start": "131860",
    "end": "137030"
  },
  {
    "start": "132000",
    "end": "132000"
  },
  {
    "text": "it's not something you use to build trivial applications everything is",
    "start": "137030",
    "end": "142280"
  },
  {
    "text": "controlled and deterministic there's nothing like our we need a secret past",
    "start": "142280",
    "end": "148580"
  },
  {
    "text": "compiler let's try to find one on the system or we need boost where is boost",
    "start": "148580",
    "end": "155690"
  },
  {
    "text": "on this computer either boost is there what's not there you'd never go searching for it that also means that",
    "start": "155690",
    "end": "164570"
  },
  {
    "text": "when we do a build with GCC 8.3 that will be different from a build with GCC",
    "start": "164570",
    "end": "170390"
  },
  {
    "text": "7.2 and the same if it compiled with silver standard 11 that will be",
    "start": "170390",
    "end": "176480"
  },
  {
    "text": "different from a build with standard 14 or something I make has always supported",
    "start": "176480",
    "end": "186550"
  },
  {
    "start": "182000",
    "end": "182000"
  },
  {
    "text": "multiple choice and multiple platforms when we started this in 2002 we compiled",
    "start": "186550",
    "end": "193670"
  },
  {
    "text": "on hp-ux with the acc compiler and solaris and easy and across compiled to",
    "start": "193670",
    "end": "198980"
  },
  {
    "text": "the pieces operating system a little bit later we got support for we and we",
    "start": "198980",
    "end": "204140"
  },
  {
    "text": "should see purpose on windows and then we moved on to linux and we supported",
    "start": "204140",
    "end": "209660"
  },
  {
    "text": "ECC on that and we started cross compile to vxworks and the current status as",
    "start": "209660",
    "end": "216530"
  },
  {
    "text": "that we do most of our above but we also cross compile to the integrity OS with",
    "start": "216530",
    "end": "222260"
  },
  {
    "text": "the multi compiler and we support quite a few embedded linux a--'s with their",
    "start": "222260",
    "end": "228500"
  },
  {
    "text": "tool chains hi mike has a lot of features and i'm",
    "start": "228500",
    "end": "236050"
  },
  {
    "start": "232000",
    "end": "232000"
  },
  {
    "text": "going to give you a list that i'm not going to talk much about them just to give you an overview ok we can do out to",
    "start": "236050",
    "end": "244970"
  },
  {
    "text": "source builds and in source builds we generally make files for can we make and",
    "start": "244970",
    "end": "250100"
  },
  {
    "text": "for claire make which is particular case we can do parallel builds distribute builds we have support for unity or what",
    "start": "250100",
    "end": "258590"
  },
  {
    "text": "some people call the jumbo build support we can generate project files for a",
    "start": "258590",
    "end": "265040"
  },
  {
    "text": "static analysis static code analysis tool from perforce can generate the",
    "start": "265040",
    "end": "272810"
  },
  {
    "text": "Jason compilation database which for instance client ID uses we generate",
    "start": "272810",
    "end": "279950"
  },
  {
    "text": "static libraries by default but can also generate shared objects or dll's cute",
    "start": "279950",
    "end": "286880"
  },
  {
    "text": "plugins MATLAB executables we generate",
    "start": "286880",
    "end": "292010"
  },
  {
    "text": "all our doxygen took documentation through high mech has support for many",
    "start": "292010",
    "end": "299630"
  },
  {
    "text": "languages and tools assembler C and c plus they were kind of the more common ones then we have the core by DL lexan",
    "start": "299630",
    "end": "308660"
  },
  {
    "text": "yak the cute - chain and we have quite a",
    "start": "308660",
    "end": "314210"
  },
  {
    "text": "few kind of internal special-purpose code generators we can enable this and",
    "start": "314210",
    "end": "321620"
  },
  {
    "text": "thyrsus latter part of clang and GCC we",
    "start": "321620",
    "end": "327230"
  },
  {
    "text": "can instrument the code with code coverage for a code coverage analysis",
    "start": "327230",
    "end": "333590"
  },
  {
    "text": "tool a squished cocoa in our case and we can track and report third-party",
    "start": "333590",
    "end": "339230"
  },
  {
    "text": "licenses export regulations security classifications as an issue in our business and it has an plugin that goes",
    "start": "339230",
    "end": "349610"
  },
  {
    "text": "into the tooth creator IDE but I'm not going to talk much about these features",
    "start": "349610",
    "end": "355340"
  },
  {
    "text": "I'm going to talk about other things one of the things is we think that hi mix is",
    "start": "355340",
    "end": "361130"
  },
  {
    "text": "really simple to use and I said that was a design goal so high mech has these",
    "start": "361130",
    "end": "369440"
  },
  {
    "start": "367000",
    "end": "367000"
  },
  {
    "text": "built description files they have this suffix HMK and the general name PKG dot",
    "start": "369440",
    "end": "376460"
  },
  {
    "text": "HMK which is unpronounceable so we call them hi make files and there's one hi",
    "start": "376460",
    "end": "382130"
  },
  {
    "text": "make file for each directory and you have this term that a directory with the",
    "start": "382130",
    "end": "389060"
  },
  {
    "text": "hi make file is a package so we most of the time you just talk about packages",
    "start": "389060",
    "end": "395950"
  },
  {
    "text": "mm okay the hammock file it uses a",
    "start": "396050",
    "end": "401250"
  },
  {
    "text": "declarative language to describe the source files to build the executables to",
    "start": "401250",
    "end": "406770"
  },
  {
    "text": "create and dependencies to other packages so if you look at the first one",
    "start": "406770",
    "end": "413460"
  },
  {
    "text": "here the first example that one creates a library and you can see there are two",
    "start": "413460",
    "end": "419190"
  },
  {
    "text": "key words in the beginning both of them are actually all key words are prefixed with HMK that makes it easy to do error",
    "start": "419190",
    "end": "426539"
  },
  {
    "text": "checking so if the user makes this kind of stupid typo hi may courage catch that",
    "start": "426539",
    "end": "432270"
  },
  {
    "text": "and give an usable error message well the first one it specifies okay this",
    "start": "432270",
    "end": "438630"
  },
  {
    "text": "library is going to be built from one C++ file called my utility then it has",
    "start": "438630",
    "end": "444509"
  },
  {
    "text": "this library has one header file that is going to be exported or may made",
    "start": "444509",
    "end": "449940"
  },
  {
    "text": "available to other packages then this package depends on two other packages so",
    "start": "449940",
    "end": "456889"
  },
  {
    "text": "we can see I've written it depends on the header on the library from boost it",
    "start": "456889",
    "end": "465030"
  },
  {
    "text": "depends on some basic types from some component all other identifies you want",
    "start": "465030",
    "end": "474810"
  },
  {
    "text": "to use it you can use they are just temporary variables you can use",
    "start": "474810",
    "end": "480360"
  },
  {
    "text": "conditionals I haven't showed that but you can do that the other example shows",
    "start": "480360",
    "end": "490889"
  },
  {
    "text": "how to create one executable so you state okay there's one program it's",
    "start": "490889",
    "end": "497009"
  },
  {
    "text": "called X ax then you associate one C++ file with that executable that's the",
    "start": "497009",
    "end": "502889"
  },
  {
    "text": "second line and then finally we say okay this executable needs this package comm",
    "start": "502889",
    "end": "509820"
  },
  {
    "text": "power adapter in order to link",
    "start": "509820",
    "end": "514700"
  },
  {
    "text": "so one goal of high make is and the high make files are very precise there are",
    "start": "516620",
    "end": "522209"
  },
  {
    "text": "absolutely no redundancy in them and we think there's there are no",
    "start": "522209",
    "end": "527339"
  },
  {
    "text": "unnecessary declarations either we don't specify path to include files and we",
    "start": "527339",
    "end": "533490"
  },
  {
    "text": "don't specify the name of the library to produce or the libraries we use",
    "start": "533490",
    "end": "539600"
  },
  {
    "text": "so quite easy just to give you an",
    "start": "547699",
    "end": "553050"
  },
  {
    "start": "553000",
    "end": "553000"
  },
  {
    "text": "example of how we can build let's assume we're going to build for red that",
    "start": "553050",
    "end": "558240"
  },
  {
    "text": "Enterprise Linux 7 point 2 so the command is line is complete something",
    "start": "558240",
    "end": "563699"
  },
  {
    "text": "like this first the name of executable then we specify the name on the high make violet and describes a product or",
    "start": "563699",
    "end": "572009"
  },
  {
    "text": "the executable and then we specify the platform so in this case it's a platform",
    "start": "572009",
    "end": "578369"
  },
  {
    "text": "that defines how to build for red at seven to 64-bit if we were if we were to",
    "start": "578369",
    "end": "586379"
  },
  {
    "text": "build exact same thing for Windows we will just replace the platform that's it",
    "start": "586379",
    "end": "591660"
  },
  {
    "text": "so there's another platform that specifies how to build forbidden 7 with with visual studio 2015 32-bit and",
    "start": "591660",
    "end": "599970"
  },
  {
    "text": "finally I have an example that if we were going to be in the same thing for our embedded computer that runs",
    "start": "599970",
    "end": "606209"
  },
  {
    "text": "integrity 11 it would be like that just a platform so the platform is a",
    "start": "606209",
    "end": "615689"
  },
  {
    "start": "614000",
    "end": "614000"
  },
  {
    "text": "high-level abstraction of what to build on that's what we call a built architecture what to build for that is a",
    "start": "615689",
    "end": "623399"
  },
  {
    "text": "runtime architecture and how to build and that is the compiler type whether",
    "start": "623399",
    "end": "630329"
  },
  {
    "text": "it's DC or clang or whatever and the compiler version the compiler Flags",
    "start": "630329",
    "end": "635879"
  },
  {
    "text": "linka flags and so on everything is kind of abstracted into this platform and the",
    "start": "635879",
    "end": "643019"
  },
  {
    "text": "platform is part of one of many many configuration files so we have a two",
    "start": "643019",
    "end": "649860"
  },
  {
    "start": "644000",
    "end": "644000"
  },
  {
    "text": "specialist that maintains these central control cooperation files so the",
    "start": "649860",
    "end": "656999"
  },
  {
    "text": "platform itself just specifies the default configuration and then we have",
    "start": "656999",
    "end": "662490"
  },
  {
    "text": "many Kandor ready to use build parameter rare variants so if you take an example",
    "start": "662490",
    "end": "668879"
  },
  {
    "text": "for the reddit Enterprise Linux we can choose between for optimization levels",
    "start": "668879",
    "end": "674660"
  },
  {
    "text": "like release debug non-optimized and so on we can",
    "start": "674660",
    "end": "680339"
  },
  {
    "text": "select between four different five versions of GCC and clang for level of",
    "start": "680339",
    "end": "686059"
  },
  {
    "text": "compiler warning stiffnesses default strict and it ends up with Atlantic for",
    "start": "686059",
    "end": "694620"
  },
  {
    "text": "CPR standards and so on and so on and actually this comes to a ridiculously",
    "start": "694620",
    "end": "699660"
  },
  {
    "text": "large number of permutations so but most",
    "start": "699660",
    "end": "705029"
  },
  {
    "text": "of them don't make sense I think in practice less than 100 permutations are",
    "start": "705029",
    "end": "712019"
  },
  {
    "text": "ever used for granted but then okay this was read that then we have the same",
    "start": "712019",
    "end": "718910"
  },
  {
    "text": "platforms and we have these variants four pieces vxworks integrity windows",
    "start": "718910",
    "end": "726300"
  },
  {
    "text": "and so on",
    "start": "726300",
    "end": "729170"
  },
  {
    "text": "okay in in the yard oh hi Mac we have some vocabulary terms so I already said",
    "start": "732760",
    "end": "740060"
  },
  {
    "text": "we have this package this is a director with the high make file most often a",
    "start": "740060",
    "end": "745430"
  },
  {
    "text": "package produces a library or an executable then we have a package set",
    "start": "745430",
    "end": "750860"
  },
  {
    "text": "that identifies or no sorry organizes one or more packages and these packages",
    "start": "750860",
    "end": "756980"
  },
  {
    "text": "are referenced by text identifiers you saw that before but here comes more",
    "start": "756980",
    "end": "762130"
  },
  {
    "text": "good explanation so this these are the enterprise it consists of a package set",
    "start": "762130",
    "end": "768860"
  },
  {
    "text": "ID say comfy and that is system unique so we have a kind of a librarian that",
    "start": "768860",
    "end": "776750"
  },
  {
    "text": "allocates this and then we have a package ID in this presence adapter that",
    "start": "776750",
    "end": "784100"
  },
  {
    "text": "one is just unique we didn't within the package set and together they will form a fully qualified package ID kung fu /",
    "start": "784100",
    "end": "791810"
  },
  {
    "text": "adapter this makes easy to move code",
    "start": "791810",
    "end": "798590"
  },
  {
    "text": "around and we move the code and then the librarian just changes the path to the",
    "start": "798590",
    "end": "803840"
  },
  {
    "text": "package set and these identifiers are also used for number and other things",
    "start": "803840",
    "end": "808910"
  },
  {
    "text": "like creating the name of the library yeah targets in make okay so this",
    "start": "808910",
    "end": "816560"
  },
  {
    "start": "815000",
    "end": "815000"
  },
  {
    "text": "identifies map to paths so the package that I ID maps to an absolute path so",
    "start": "816560",
    "end": "823190"
  },
  {
    "text": "the comfy could move could nap to workspace components view and the",
    "start": "823190",
    "end": "829490"
  },
  {
    "text": "package ID will be path relative will be a path relative the package set so in",
    "start": "829490",
    "end": "836300"
  },
  {
    "text": "this adapter slash source for instance and that means whenever we see in a",
    "start": "836300",
    "end": "841640"
  },
  {
    "text": "hammock file fully qualified ID I confuse slash adapter that can be mapped",
    "start": "841640",
    "end": "846950"
  },
  {
    "text": "into a absolute path and fully filled path",
    "start": "846950",
    "end": "852550"
  },
  {
    "text": "inhye make the packages shall specify the direct dependencies to other",
    "start": "855199",
    "end": "861389"
  },
  {
    "text": "packages required by the source files it should never specify any transitive",
    "start": "861389",
    "end": "868049"
  },
  {
    "text": "dependencies and together these packages or dependencies will form an directed",
    "start": "868049",
    "end": "875429"
  },
  {
    "text": "acyclic graph a dog and this is a simple",
    "start": "875429",
    "end": "881369"
  },
  {
    "start": "880000",
    "end": "880000"
  },
  {
    "text": "dog or packages it has a root at the top that one is generated by make always and",
    "start": "881369",
    "end": "890609"
  },
  {
    "text": "then it's an executable number 1 which again depends on two packages a1 and a2",
    "start": "890609",
    "end": "895849"
  },
  {
    "text": "which it again depends and depends on depends if you are going to build",
    "start": "895849",
    "end": "900929"
  },
  {
    "text": "another executable you can just kind of add it into the same dog you can see it",
    "start": "900929",
    "end": "907349"
  },
  {
    "text": "has most of the common and same packages as common dependence as before just a",
    "start": "907349",
    "end": "913019"
  },
  {
    "text": "new executable so this is kind of looks kind of easy and I just want to say one",
    "start": "913019",
    "end": "920850"
  },
  {
    "text": "thing the dog we got here on the left is a dog of packages",
    "start": "920850",
    "end": "927709"
  },
  {
    "text": "sometimes when you talk about make you're talking about dog of source files",
    "start": "927709",
    "end": "933239"
  },
  {
    "text": "and object files that's what I got here in the right corner so within each of",
    "start": "933239",
    "end": "939869"
  },
  {
    "text": "these packages there will be a dog like that but in hi make them you don't really care about that yes",
    "start": "939869",
    "end": "951289"
  },
  {
    "text": "no a package cannot produce an executable and the library no but you",
    "start": "957210",
    "end": "964870"
  },
  {
    "text": "can pretty one package can produce more than one executable but not both and not",
    "start": "964870",
    "end": "970510"
  },
  {
    "text": "not both types a dog in the real world",
    "start": "970510",
    "end": "978400"
  },
  {
    "text": "will will look more like this and Hammack will verify that there are",
    "start": "978400",
    "end": "986380"
  },
  {
    "text": "no cycles in this graph this dog so we must ensure that is a dog a cyclic okay",
    "start": "986380",
    "end": "999490"
  },
  {
    "start": "997000",
    "end": "997000"
  },
  {
    "text": "we have these keywords they specify the task so the users use the keywords to",
    "start": "999490",
    "end": "1006060"
  },
  {
    "text": "specify what source file do I have and each keyword has an Associated task that",
    "start": "1006060",
    "end": "1011880"
  },
  {
    "text": "describes how shall the source file be processed and there are some simple tasks like this just the C++ file the",
    "start": "1011880",
    "end": "1020300"
  },
  {
    "text": "syllabus file will be compiled into an object file will be put into the library",
    "start": "1020300",
    "end": "1026220"
  },
  {
    "text": "and finally we bid will put into the executable and here's another one we",
    "start": "1026220",
    "end": "1033240"
  },
  {
    "text": "call it at static C sources we do use it for our test files for instance used by",
    "start": "1033240",
    "end": "1039030"
  },
  {
    "text": "D test Google test one case with them",
    "start": "1039030",
    "end": "1044490"
  },
  {
    "text": "they should not be put into a library so they go directly to the linker also we",
    "start": "1044490",
    "end": "1054210"
  },
  {
    "start": "1053000",
    "end": "1053000"
  },
  {
    "text": "have more complex tasks like this is a IDL koruba IDL 3 source file you can see",
    "start": "1054210",
    "end": "1061380"
  },
  {
    "text": "it goes through all this this chain of tools first the IDL compiler which",
    "start": "1061380",
    "end": "1067620"
  },
  {
    "text": "generates an ACL file and the simple person to head the files which we then goes through the ACL compiler and you",
    "start": "1067620",
    "end": "1074790"
  },
  {
    "text": "can just follow it on but the thing is",
    "start": "1074790",
    "end": "1080430"
  },
  {
    "text": "the user or the developer he just specifies this ideally three sources hi make takes clear everything else",
    "start": "1080430",
    "end": "1087450"
  },
  {
    "text": "so this that all the tasks like like the ideal task is chained to the ACL task",
    "start": "1087450",
    "end": "1095100"
  },
  {
    "text": "which again is chained to the CC so it just kind of passes on the files to the next task in the chain okay",
    "start": "1095100",
    "end": "1107100"
  },
  {
    "text": "you got high mech fire like this two source files and some dependencies and",
    "start": "1107100",
    "end": "1114690"
  },
  {
    "text": "then how do you actually find the dependencies because getting a list of",
    "start": "1114690",
    "end": "1119700"
  },
  {
    "text": "files not easy this can be difficult okay the observation is that",
    "start": "1119700",
    "end": "1125900"
  },
  {
    "text": "dependencies are most often governed by the in hash includes so you can assume",
    "start": "1125900",
    "end": "1131580"
  },
  {
    "text": "that one of these sleeper those files do this include so the question is which",
    "start": "1131580",
    "end": "1138450"
  },
  {
    "text": "package provides this header so what Jaime has got is something we call the",
    "start": "1138450",
    "end": "1145500"
  },
  {
    "start": "1143000",
    "end": "1143000"
  },
  {
    "text": "dependency finder it creates an index by scanning for header files in all",
    "start": "1145500",
    "end": "1152340"
  },
  {
    "text": "packages in all package sets in the workspace and then it makes a map from",
    "start": "1152340",
    "end": "1160170"
  },
  {
    "text": "the header file to the fully qualified package ID so we end up with a file like",
    "start": "1160170",
    "end": "1166500"
  },
  {
    "text": "this but this depends if and that also knows that from an ID L file there will",
    "start": "1166500",
    "end": "1172740"
  },
  {
    "text": "actually be an dot H file so if you look at headline number three and number four",
    "start": "1172740",
    "end": "1178830"
  },
  {
    "text": "there you can see there's like idea that's an action source file the line",
    "start": "1178830",
    "end": "1184710"
  },
  {
    "text": "number four that's a generated header file and then the dependency finder goes",
    "start": "1184710",
    "end": "1191280"
  },
  {
    "text": "on to scan all the source files in this package for hash includes and then it's",
    "start": "1191280",
    "end": "1197610"
  },
  {
    "text": "a simple job of just looking up into this index and generating the set of",
    "start": "1197610",
    "end": "1202860"
  },
  {
    "text": "dependencies",
    "start": "1202860",
    "end": "1205100"
  },
  {
    "text": "yeah build correctness mike has some",
    "start": "1209429",
    "end": "1215049"
  },
  {
    "text": "features for that one thing we try to catch possible one different that one",
    "start": "1215049",
    "end": "1221889"
  },
  {
    "start": "1216000",
    "end": "1216000"
  },
  {
    "text": "definition rule violations because if there are two practices that export the",
    "start": "1221889",
    "end": "1228100"
  },
  {
    "text": "same header file and they have the same name but the different but different",
    "start": "1228100",
    "end": "1233970"
  },
  {
    "text": "contents like that could in in the worst case be two different versions of the same class and if some simple was files",
    "start": "1233970",
    "end": "1242200"
  },
  {
    "text": "are compiled with the first header file and some are compiled with the second header file we will probably get the one",
    "start": "1242200",
    "end": "1247330"
  },
  {
    "text": "definition rule violation and that is undefined behavior so what time it does is that since it knows everything about",
    "start": "1247330",
    "end": "1254350"
  },
  {
    "text": "all files it will just check order any two files of the same name exported",
    "start": "1254350",
    "end": "1260429"
  },
  {
    "text": "makes that assumption that okay if the name of identical will just give an",
    "start": "1260429",
    "end": "1266950"
  },
  {
    "text": "error message and then we have the case so have you ever renamed a header file",
    "start": "1266950",
    "end": "1274870"
  },
  {
    "start": "1271000",
    "end": "1271000"
  },
  {
    "text": "in the version control system but continued having a CPP file referencing",
    "start": "1274870",
    "end": "1280120"
  },
  {
    "text": "the old name or have ever had an executable but change the name of the executable and but still continue",
    "start": "1280120",
    "end": "1287500"
  },
  {
    "text": "testing the old one and you didn't find out until you clean the workspace and",
    "start": "1287500",
    "end": "1293950"
  },
  {
    "text": "well there here's a build system called",
    "start": "1293950",
    "end": "1299350"
  },
  {
    "text": "tip and as a reference at the bottom there that gave me an idea to implement",
    "start": "1299350",
    "end": "1305559"
  },
  {
    "text": "this feature how to delete stained around objects so actually I think okay",
    "start": "1305559",
    "end": "1315669"
  },
  {
    "text": "the left example there here the hi make file space used to specify my compulsivity and my cantata H and then",
    "start": "1315669",
    "end": "1323470"
  },
  {
    "text": "they change the names of the files and",
    "start": "1323470",
    "end": "1328649"
  },
  {
    "text": "then on this other one they change the name of executable from food to bar",
    "start": "1328649",
    "end": "1334649"
  },
  {
    "text": "so what hummock does is when it creates the",
    "start": "1334649",
    "end": "1339680"
  },
  {
    "text": "make funds it will also create an index or mappings from source file to the right object and from their adopted",
    "start": "1339680",
    "end": "1346010"
  },
  {
    "text": "tutor a little bit and it's going to look something like this so you can see",
    "start": "1346010",
    "end": "1351710"
  },
  {
    "text": "at the first line it's got few dot CPP it will map to the object file then we",
    "start": "1351710",
    "end": "1358970"
  },
  {
    "text": "have the IDL file it maps to four files and so on so when hi Mike reads bill description",
    "start": "1358970",
    "end": "1365420"
  },
  {
    "text": "files again it will check against the new computed set of source files",
    "start": "1365420",
    "end": "1370700"
  },
  {
    "text": "interrupt or against this index and then delete all the files that aren't in the",
    "start": "1370700",
    "end": "1376910"
  },
  {
    "text": "new set okay building faster you",
    "start": "1376910",
    "end": "1384800"
  },
  {
    "start": "1384000",
    "end": "1384000"
  },
  {
    "text": "probably know recurse it may consider harmful that's a paper from Pete Miller in 1998 he thought the good thing was to",
    "start": "1384800",
    "end": "1392090"
  },
  {
    "text": "have one really large make file with all dependencies in a global view of all",
    "start": "1392090",
    "end": "1398120"
  },
  {
    "text": "dependencies and how make used to do that for a while but we that was ok for",
    "start": "1398120",
    "end": "1403850"
  },
  {
    "text": "a bill full build but we found out that we have just an incremental rebuild that",
    "start": "1403850",
    "end": "1410540"
  },
  {
    "text": "was rather slow because make spent so much time analyzing all the dependencies before it started rebuilding before and",
    "start": "1410540",
    "end": "1417680"
  },
  {
    "text": "with a few files that had actually changed and I think it was because the",
    "start": "1417680",
    "end": "1422960"
  },
  {
    "text": "dog was too large and too complex so instead I make uses two levels of make",
    "start": "1422960",
    "end": "1428420"
  },
  {
    "text": "files there's one make file per package",
    "start": "1428420",
    "end": "1434090"
  },
  {
    "text": "one top-level make file that determines the order in which a package shall be built and that gives rise to a shallow",
    "start": "1434090",
    "end": "1441380"
  },
  {
    "text": "recursive make so if you got this simple dog there you will end up with the make",
    "start": "1441380",
    "end": "1446870"
  },
  {
    "text": "file like this",
    "start": "1446870",
    "end": "1449710"
  },
  {
    "text": "and that when it comes to parallelity we can observe that package a two and a",
    "start": "1451880",
    "end": "1459230"
  },
  {
    "text": "three can be built in parallel with each other and when a 2 and a 3 are built a 1",
    "start": "1459230",
    "end": "1465530"
  },
  {
    "text": "can be built and then finally XA 1 can be built in hi make each package has two",
    "start": "1465530",
    "end": "1470840"
  },
  {
    "text": "stages there's a stage one that generates header files and CVP from ideal for instance then it exports all",
    "start": "1470840",
    "end": "1478760"
  },
  {
    "text": "these header files and that is not done in parallel for some reason it's kind of",
    "start": "1478760",
    "end": "1484610"
  },
  {
    "text": "complicated to explain and then we have the stage two which compiled CP into",
    "start": "1484610",
    "end": "1490220"
  },
  {
    "text": "object files trade libraries and creates executables and then we made this",
    "start": "1490220",
    "end": "1497270"
  },
  {
    "text": "observation that the stage one that is to compile ideal into a header on CP and",
    "start": "1497270",
    "end": "1503930"
  },
  {
    "text": "copying that is really fast but compiling C purpose in table file that's slow some high mech can will then",
    "start": "1503930",
    "end": "1512600"
  },
  {
    "text": "transform the dog so that more slow work can be done in parallel so is how the",
    "start": "1512600",
    "end": "1519020"
  },
  {
    "text": "same dog like this that's it as a package dog that will be transformed",
    "start": "1519020",
    "end": "1526430"
  },
  {
    "text": "into this dog and here I was supposed to have some people colors I'm not here but",
    "start": "1526430",
    "end": "1532580"
  },
  {
    "text": "you can probably see that there are some suffixes s1 and s2 but the thing the",
    "start": "1532580",
    "end": "1540860"
  },
  {
    "text": "thing here is that for each package we can start the slow stage too as soon as",
    "start": "1540860",
    "end": "1547790"
  },
  {
    "text": "as the first h1 is completed so if you",
    "start": "1547790",
    "end": "1553520"
  },
  {
    "text": "look here ok ok",
    "start": "1553520",
    "end": "1558800"
  },
  {
    "text": "that one stage two there can be completed as soon as that one is completed",
    "start": "1558800",
    "end": "1566320"
  },
  {
    "text": "in addition we can know now compile all the see people's files in a1 a2 and a3",
    "start": "1569059",
    "end": "1575749"
  },
  {
    "text": "in Poland because you can see up on this level here we got all the s 2 and stage",
    "start": "1575749",
    "end": "1582859"
  },
  {
    "text": "2 is here which so there are so many",
    "start": "1582859",
    "end": "1588139"
  },
  {
    "text": "more files that can be built in pallet",
    "start": "1588139",
    "end": "1591729"
  },
  {
    "start": "1594000",
    "end": "1594000"
  },
  {
    "text": "however doing this even though it's a",
    "start": "1594639",
    "end": "1599899"
  },
  {
    "text": "record a shallow occurs we make it requires one plus two and make",
    "start": "1599899",
    "end": "1605269"
  },
  {
    "text": "invocation that can take a long time so",
    "start": "1605269",
    "end": "1610669"
  },
  {
    "text": "incremental rebuilds are not fast enough because it still takes to find a time to",
    "start": "1610669",
    "end": "1615679"
  },
  {
    "text": "just invoke make so what hi mike has got",
    "start": "1615679",
    "end": "1621049"
  },
  {
    "text": "well we could tell the user to do various tricks we don't like to tell use",
    "start": "1621049",
    "end": "1627679"
  },
  {
    "text": "it to do that so again to inspired a feature to do a minimum rebuild so it's",
    "start": "1627679",
    "end": "1638269"
  },
  {
    "start": "1635000",
    "end": "1635000"
  },
  {
    "text": "something we call an exile to exclude automatically it prunes the dog so after is a successful build of x1 hi",
    "start": "1638269",
    "end": "1647929"
  },
  {
    "text": "make we create the database with the command line the timestamp of every source file and the dog and you can see",
    "start": "1647929",
    "end": "1656599"
  },
  {
    "text": "the dog here but it's actually not that dog that is recorded it's this dog did",
    "start": "1656599",
    "end": "1663769"
  },
  {
    "text": "you see the arrows changing direction so they are not pointing upwards so when",
    "start": "1663769",
    "end": "1671179"
  },
  {
    "text": "the build command is repeated Jaime will now check against the database to find change source files so if you look at",
    "start": "1671179",
    "end": "1678409"
  },
  {
    "text": "this package b2 there as a lot of source files one of them has changed so okay it knows",
    "start": "1678409",
    "end": "1686149"
  },
  {
    "text": "that b2 has changed then it just follows the arabs upwards so it must rebuild a 4",
    "start": "1686149",
    "end": "1691999"
  },
  {
    "text": "and a 5 a 2 and excellent then it makes the in the inverse list",
    "start": "1691999",
    "end": "1699080"
  },
  {
    "text": "the green ones and then it just removes them from dark so instead of building",
    "start": "1699080",
    "end": "1706790"
  },
  {
    "text": "all the packages it just built the few that must be rebuilt so it will then",
    "start": "1706790",
    "end": "1714440"
  },
  {
    "text": "generate a top level high make a top level make file that looks more like this you can see there are some yellow",
    "start": "1714440",
    "end": "1720740"
  },
  {
    "text": "lines there there are some conditionals in the in the make file so and that is",
    "start": "1720740",
    "end": "1729140"
  },
  {
    "text": "the make we'll just skip a lot of things it will not do the actual build so in",
    "start": "1729140",
    "end": "1734540"
  },
  {
    "text": "order to invoke with this automatic exclusion it will set first a number of",
    "start": "1734540",
    "end": "1742580"
  },
  {
    "text": "environment variables all the packages that shall be excluded have this equal",
    "start": "1742580",
    "end": "1748160"
  },
  {
    "text": "to true and then invokes make or not",
    "start": "1748160",
    "end": "1753040"
  },
  {
    "text": "so this xl2 mode has two modes the basic",
    "start": "1753460",
    "end": "1759980"
  },
  {
    "text": "one where hi make will check each and every source file in this index in the",
    "start": "1759980",
    "end": "1765740"
  },
  {
    "text": "database and then find the set of change packages and that is easy for the user",
    "start": "1765740",
    "end": "1771220"
  },
  {
    "text": "but sometimes that can be too slow when there are many many source files so in",
    "start": "1771220",
    "end": "1777440"
  },
  {
    "text": "that case the user can provide hi make with the set of files you check so you could query the version control system",
    "start": "1777440",
    "end": "1784400"
  },
  {
    "text": "or query the IDE or whatever to produce that list then it will just check those",
    "start": "1784400",
    "end": "1791000"
  },
  {
    "text": "files and update those files later",
    "start": "1791000",
    "end": "1795430"
  },
  {
    "start": "1796000",
    "end": "1796000"
  },
  {
    "text": "another thing that we do to build faster is to reduce the number of directories",
    "start": "1796690",
    "end": "1803750"
  },
  {
    "text": "to search for include files our coding",
    "start": "1803750",
    "end": "1811040"
  },
  {
    "text": "standard recommends that the CPP and the header file should be in the same directory so unless we doing something",
    "start": "1811040",
    "end": "1817790"
  },
  {
    "text": "we will actually end up with thousands or mine - I directives and then this",
    "start": "1817790",
    "end": "1823520"
  },
  {
    "text": "build will be slow because for each and every hash include of something there",
    "start": "1823520",
    "end": "1829070"
  },
  {
    "text": "are so many directives that must must be searched we also found that some tools have this",
    "start": "1829070",
    "end": "1837200"
  },
  {
    "text": "limit on no more than 1024 - I directives so I make just one thing it",
    "start": "1837200",
    "end": "1846500"
  },
  {
    "start": "1845000",
    "end": "1845000"
  },
  {
    "text": "all the head of us that shall be a make made available to other packages must be exported and the default is to have one",
    "start": "1846500",
    "end": "1854090"
  },
  {
    "text": "shared export directory for four for one package set assumed depending on how",
    "start": "1854090",
    "end": "1861890"
  },
  {
    "text": "many packages there are in a pack and in a package set we might reduce that by 10",
    "start": "1861890",
    "end": "1869140"
  },
  {
    "text": "but that can still be too many - mine -",
    "start": "1869770",
    "end": "1875660"
  },
  {
    "text": "I directives so we also optionally allow the user to specify that all header",
    "start": "1875660",
    "end": "1882380"
  },
  {
    "text": "files shall be exported to one single directory and we have seen really good",
    "start": "1882380",
    "end": "1888170"
  },
  {
    "text": "build improvements times on that okay",
    "start": "1888170",
    "end": "1898210"
  },
  {
    "start": "1895000",
    "end": "1895000"
  },
  {
    "text": "everything in hi make is a package and we can and the dog or packages and then",
    "start": "1898210",
    "end": "1905570"
  },
  {
    "text": "we can modify the build by changing the dog just to do a small recap here you",
    "start": "1905570",
    "end": "1913850"
  },
  {
    "start": "1911000",
    "end": "1911000"
  },
  {
    "text": "see in the standard package which produces a library or it can aggregate",
    "start": "1913850",
    "end": "1919640"
  },
  {
    "text": "other packages then we have this program package that produces one or more programs or executables and then there's",
    "start": "1919640",
    "end": "1926660"
  },
  {
    "text": "a new package type for you which we call a virtual package it's an interface to",
    "start": "1926660",
    "end": "1932540"
  },
  {
    "text": "pre-compiled libraries we can but we can also use it to set compile flags or to",
    "start": "1932540",
    "end": "1938450"
  },
  {
    "text": "check preconditions and things like that and now that's what I'm going to talk about for the next few minutes okay this",
    "start": "1938450",
    "end": "1949790"
  },
  {
    "start": "1947000",
    "end": "1947000"
  },
  {
    "text": "is what the user has written in the hi make file so at the point here is the",
    "start": "1949790",
    "end": "1954950"
  },
  {
    "text": "keywords can add implicit dependencies because the user has this and the graph looks like this",
    "start": "1954950",
    "end": "1962410"
  },
  {
    "text": "and then the user sighs ah I also need an ideal three source file into this",
    "start": "1962410",
    "end": "1968410"
  },
  {
    "text": "package the green one the green line so",
    "start": "1968410",
    "end": "1974440"
  },
  {
    "text": "that's what this user specifies but associated with that keyword there are",
    "start": "1974440",
    "end": "1979630"
  },
  {
    "text": "some dependencies so the dog will then change into this automatically so",
    "start": "1979630",
    "end": "1987910"
  },
  {
    "text": "somewhere someone with experience knowledge about this IDL compiler knows",
    "start": "1987910",
    "end": "1994360"
  },
  {
    "text": "that it needs depends to b1 c1 and d1",
    "start": "1994360",
    "end": "2000500"
  },
  {
    "text": "then we have the platform and if you recall the platform is something you specify to be infrared hat or for",
    "start": "2002180",
    "end": "2009420"
  },
  {
    "text": "integrity or for Windows that one the pattern can change the dog you can add",
    "start": "2009420",
    "end": "2014760"
  },
  {
    "text": "include directories link time dependencies or some platform specific practices so the platform adds include",
    "start": "2014760",
    "end": "2025230"
  },
  {
    "start": "2022000",
    "end": "2022000"
  },
  {
    "text": "directive if you have a source file like this and do hash include' or socket adage when you're on Linux and I suppose",
    "start": "2025230",
    "end": "2033510"
  },
  {
    "text": "on Windows you don't have to specify the something like the blue - i directive",
    "start": "2033510",
    "end": "2040260"
  },
  {
    "text": "there a compiler just knows where to find the system headers but if you are",
    "start": "2040260",
    "end": "2047430"
  },
  {
    "text": "other operating systems it's not that easy but the user shouldn't know that",
    "start": "2047430",
    "end": "2055220"
  },
  {
    "text": "and we don't want any operating system space specific specific - I directives",
    "start": "2055220",
    "end": "2062700"
  },
  {
    "text": "in the compiler conversion so what we do is that the platform specifies a global",
    "start": "2062700",
    "end": "2069360"
  },
  {
    "text": "dependency to a package that represents the always include directory so we have",
    "start": "2069360",
    "end": "2077850"
  },
  {
    "text": "the dog that the user knows about then user specifies the platform MCP integral",
    "start": "2077850",
    "end": "2083970"
  },
  {
    "text": "to the 11 and that is an real-time operating system for our target computer",
    "start": "2083970",
    "end": "2091158"
  },
  {
    "text": "and then you can see within that platform it hasn't filed and then it's best",
    "start": "2091159",
    "end": "2098250"
  },
  {
    "text": "specifies a global dependency to this OS in 11 / include so each and every",
    "start": "2098250",
    "end": "2105000"
  },
  {
    "text": "package will then get the dependency to that if you look into that the green",
    "start": "2105000",
    "end": "2111750"
  },
  {
    "text": "package there you can see it's a virtual package and all it does it's saying telling hi Mac there is some include",
    "start": "2111750",
    "end": "2119520"
  },
  {
    "text": "files in this directory and I want you to use this - i directive ok and then we",
    "start": "2119520",
    "end": "2130440"
  },
  {
    "start": "2129000",
    "end": "2129000"
  },
  {
    "text": "have some link time dependencies it's kind of the same same we have this this",
    "start": "2130440",
    "end": "2139500"
  },
  {
    "text": "is a kind of a bit more complex dog so",
    "start": "2139500",
    "end": "2144589"
  },
  {
    "text": "this x1 depends on a simple past file and has a 2 and a 3 s dependencies and",
    "start": "2144589",
    "end": "2154230"
  },
  {
    "text": "when we build for Red Hat that's probably what the dog is going to look",
    "start": "2154230",
    "end": "2159660"
  },
  {
    "text": "like but if we're going to build for our",
    "start": "2159660",
    "end": "2164910"
  },
  {
    "text": "missile computer we specified another platform that one in that platform",
    "start": "2164910",
    "end": "2172410"
  },
  {
    "text": "there's a statement saying the penndot HMK program it means that these three",
    "start": "2172410",
    "end": "2179490"
  },
  {
    "text": "dependencies there shall be applied to each and every executable in the system",
    "start": "2179490",
    "end": "2186619"
  },
  {
    "text": "so hi Mac will then add these dependencies can you see the green lines",
    "start": "2186619",
    "end": "2197369"
  },
  {
    "text": "there no ok there are green lines from the",
    "start": "2197369",
    "end": "2204210"
  },
  {
    "text": "executables down here there are no green lines from a1 a2 and a3",
    "start": "2204210",
    "end": "2211640"
  },
  {
    "text": "so adjust these dependencies are only added to the executables and if you look",
    "start": "2214310",
    "end": "2221970"
  },
  {
    "text": "into one of those new packages again we see it's a virtual package and it says",
    "start": "2221970",
    "end": "2228150"
  },
  {
    "text": "there is a library which provides the C runtime which is needed for linking ah",
    "start": "2228150",
    "end": "2244400"
  },
  {
    "text": "kind of I needed a term to specify that it's not a normal packet which generates",
    "start": "2244400",
    "end": "2253050"
  },
  {
    "text": "a library so I just as a virtual package there also something called a bridge",
    "start": "2253050",
    "end": "2258780"
  },
  {
    "text": "which I'm not going into but that one invokes another build system so it's",
    "start": "2258780",
    "end": "2264030"
  },
  {
    "text": "just a tank okay and then we have the",
    "start": "2264030",
    "end": "2274800"
  },
  {
    "start": "2272000",
    "end": "2272000"
  },
  {
    "text": "platform can specify what kind of operating system abstraction layer to",
    "start": "2274800",
    "end": "2281760"
  },
  {
    "text": "use so assume you have a c++ like this you use our runtime libraries get time",
    "start": "2281760",
    "end": "2290760"
  },
  {
    "text": "local which we can assume is implemented differently on Windows and Linux and",
    "start": "2290760",
    "end": "2297920"
  },
  {
    "text": "real-time computer so you have this dog",
    "start": "2297920",
    "end": "2303720"
  },
  {
    "text": "here my field just sets up a dependency",
    "start": "2303720",
    "end": "2311460"
  },
  {
    "text": "to the runtime library always abstraction layer that one has some implementation and then it sets up a",
    "start": "2311460",
    "end": "2318690"
  },
  {
    "text": "dependency to the RTL always implementation and RTL always interface",
    "start": "2318690",
    "end": "2324560"
  },
  {
    "text": "once at the bottom but those packages don't exist they are just hooks or",
    "start": "2324560",
    "end": "2330560"
  },
  {
    "text": "placeholders so when we build for reddit",
    "start": "2330560",
    "end": "2336270"
  },
  {
    "text": "seven to inside that platform file you",
    "start": "2336270",
    "end": "2342600"
  },
  {
    "text": "will find some substitution statements it says to",
    "start": "2342600",
    "end": "2348460"
  },
  {
    "text": "substitute no it says to substitute our",
    "start": "2348460",
    "end": "2356619"
  },
  {
    "text": "TL / always implementation with our TL / always Linux implementation and the same",
    "start": "2356619",
    "end": "2364480"
  },
  {
    "text": "for the interface so when the build is",
    "start": "2364480",
    "end": "2369640"
  },
  {
    "text": "actually done hi Meg will replace those two placeholders with the real",
    "start": "2369640",
    "end": "2376420"
  },
  {
    "text": "implementation for that operating system",
    "start": "2376420",
    "end": "2380130"
  },
  {
    "text": "and if you're going to build for Windows",
    "start": "2382170",
    "end": "2387269"
  },
  {
    "text": "instead there will be a similar set of statements key words but this time it",
    "start": "2387269",
    "end": "2395890"
  },
  {
    "text": "replaces them with the implementation for Windows so the graph will change into this",
    "start": "2395890",
    "end": "2403019"
  },
  {
    "start": "2409000",
    "end": "2409000"
  },
  {
    "text": "okay and then we do something to ensure build sameness or build consistency",
    "start": "2409720",
    "end": "2419500"
  },
  {
    "text": "because in our division we have two major application frameworks and some of",
    "start": "2419500",
    "end": "2427910"
  },
  {
    "text": "the components of the components only worked with framework number one others only work with framework number two and",
    "start": "2427910",
    "end": "2434750"
  },
  {
    "text": "but if you mix by mistake framework one",
    "start": "2434750",
    "end": "2439880"
  },
  {
    "text": "and framework two components you will get very confusing bit errors and",
    "start": "2439880",
    "end": "2445970"
  },
  {
    "text": "instead of giving them build errors from GCC we try to give them a more",
    "start": "2445970",
    "end": "2451640"
  },
  {
    "text": "reasonable build error from hi make so we use again some virtual packages to",
    "start": "2451640",
    "end": "2460250"
  },
  {
    "start": "2457000",
    "end": "2457000"
  },
  {
    "text": "check some build precondition those two package there are more or less same but",
    "start": "2460250",
    "end": "2467359"
  },
  {
    "text": "you can see one is for the framework one when we call it a checker and it use a",
    "start": "2467359",
    "end": "2473109"
  },
  {
    "text": "conditional if not deaf RTL framework one and then if that one is not set we",
    "start": "2473109",
    "end": "2481009"
  },
  {
    "text": "will issue an aggro and the other packet hi make file is more or less the same it",
    "start": "2481009",
    "end": "2487940"
  },
  {
    "text": "just uses framework to instead of framework one so what we then do is all",
    "start": "2487940",
    "end": "2495680"
  },
  {
    "text": "the framework one component or packages set up a dependent set up the dependency",
    "start": "2495680",
    "end": "2502549"
  },
  {
    "text": "to the framework one checker all the",
    "start": "2502549",
    "end": "2507819"
  },
  {
    "text": "packages in the framework to set up depends into the framework to checker",
    "start": "2507819",
    "end": "2514420"
  },
  {
    "text": "and then if someone in package a one sets up a dependency to one from the",
    "start": "2514420",
    "end": "2520670"
  },
  {
    "text": "framework one and one from the framework tool and tries to build where he has",
    "start": "2520670",
    "end": "2526730"
  },
  {
    "text": "specified I'm going to use framework one that will then issue this error this",
    "start": "2526730",
    "end": "2532970"
  },
  {
    "text": "component requires framework to architecture I admit it could have been more precise",
    "start": "2532970",
    "end": "2540320"
  },
  {
    "text": "it could have said that framework mm to",
    "start": "2540320",
    "end": "2545660"
  },
  {
    "text": "a requires frame active architecture but it's good enough",
    "start": "2545660",
    "end": "2552520"
  },
  {
    "text": "okay it seems I got time to do some esoteric features okay we have licensed",
    "start": "2556770",
    "end": "2567960"
  },
  {
    "start": "2565000",
    "end": "2565000"
  },
  {
    "text": "reporting in hi make because of course we use some third-party components like",
    "start": "2567960",
    "end": "2575240"
  },
  {
    "text": "boost and they have some kind of license bsd aperture MIT or sometimes the",
    "start": "2575240",
    "end": "2582270"
  },
  {
    "text": "commercial license so when we build the product how can we find out what license",
    "start": "2582270",
    "end": "2588090"
  },
  {
    "text": "are actually part of this executable so what how we solve that is that a package",
    "start": "2588090",
    "end": "2596070"
  },
  {
    "text": "that has some kind of license uses this keyword HMK license and it just attaches",
    "start": "2596070",
    "end": "2602250"
  },
  {
    "text": "the licensed text as a file it could be a text file it could be a PDF it could",
    "start": "2602250",
    "end": "2608610"
  },
  {
    "text": "be an image whatever i'm it doesn't care then when hi make traverses the dog it",
    "start": "2608610",
    "end": "2614820"
  },
  {
    "text": "picks picks up all these entries copies license files to a directory specified",
    "start": "2614820",
    "end": "2620369"
  },
  {
    "text": "by the user and creates a report and we",
    "start": "2620369",
    "end": "2627030"
  },
  {
    "text": "do something similar to security classification because since we are in",
    "start": "2627030",
    "end": "2632190"
  },
  {
    "start": "2628000",
    "end": "2628000"
  },
  {
    "text": "defense there are many at least three security classifications involved so",
    "start": "2632190",
    "end": "2641780"
  },
  {
    "text": "what we start with is that each every source file in our version control",
    "start": "2641780",
    "end": "2647310"
  },
  {
    "text": "system has an explicit security as classification as a comment magic",
    "start": "2647310",
    "end": "2653550"
  },
  {
    "text": "comment so there's challenges on this one when we're building an unclassified product how do we know that each and",
    "start": "2653550",
    "end": "2661650"
  },
  {
    "text": "every source file is actually tagged and classified and nothing over higher",
    "start": "2661650",
    "end": "2668910"
  },
  {
    "text": "classification again hi make traverses the dog creates a report so and that of",
    "start": "2668910",
    "end": "2676350"
  },
  {
    "text": "course requires that high make knows about this magic comment of course when",
    "start": "2676350",
    "end": "2684150"
  },
  {
    "text": "we have third-party components they don't have this magic comment",
    "start": "2684150",
    "end": "2690000"
  },
  {
    "text": "you have a whitelist in addition so from a boost of course doesn't have this comment but we know boost is okay okay",
    "start": "2690000",
    "end": "2701670"
  },
  {
    "start": "2701000",
    "end": "2701000"
  },
  {
    "text": "that led me to the conclusion having the",
    "start": "2701670",
    "end": "2708359"
  },
  {
    "text": "package in the dog is an enabler it allows us to do so many things with the",
    "start": "2708359",
    "end": "2714060"
  },
  {
    "text": "build changing packages removing",
    "start": "2714060",
    "end": "2719070"
  },
  {
    "text": "packages we also found it's really easy to extend the build tool with new",
    "start": "2719070",
    "end": "2725250"
  },
  {
    "text": "features like I mentioned initially that",
    "start": "2725250",
    "end": "2730740"
  },
  {
    "text": "we had this unity build support to add",
    "start": "2730740",
    "end": "2736200"
  },
  {
    "text": "that I just changed one of the tasks to",
    "start": "2736200",
    "end": "2742020"
  },
  {
    "text": "do that and we also find out having centrally controlled config files",
    "start": "2742020",
    "end": "2747470"
  },
  {
    "text": "simplify the build process improvement because a built ism is not static and",
    "start": "2747470",
    "end": "2752700"
  },
  {
    "text": "not something you can say I'm done there always a way to improve the build",
    "start": "2752700",
    "end": "2758130"
  },
  {
    "text": "process more parallelity yeah where to put the header files fewer",
    "start": "2758130",
    "end": "2767160"
  },
  {
    "text": "- I directives and things like that but if that is distributed in the hundreds",
    "start": "2767160",
    "end": "2772320"
  },
  {
    "text": "or build description files it's more or less impossible to improve the build",
    "start": "2772320",
    "end": "2777660"
  },
  {
    "text": "process",
    "start": "2777660",
    "end": "2779809"
  },
  {
    "text": "thank you",
    "start": "2782730",
    "end": "2785480"
  }
]