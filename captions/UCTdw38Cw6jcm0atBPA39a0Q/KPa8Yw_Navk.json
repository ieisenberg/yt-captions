[
  {
    "text": "hello everyone thanks so much for coming this is uh FSH wh f for C",
    "start": "1959",
    "end": "8519"
  },
  {
    "text": "programmers um my name is Scott Vin um I have a website FSH forun and profit.com",
    "start": "8519",
    "end": "14360"
  },
  {
    "text": "uh which I think kind of gives away my bias so um I'm a big fan of F and I will",
    "start": "14360",
    "end": "22560"
  },
  {
    "text": "try not to be too biased I'll try and present why I think this is an interesting language for you to learn um",
    "start": "22560",
    "end": "30039"
  },
  {
    "text": "but if I if I go overboard like you don't have to trust me you know I'll you can look for yourself",
    "start": "30039",
    "end": "36200"
  },
  {
    "text": "so um the goal of this talk really is just to demystify f a bit uh a lot of",
    "start": "36200",
    "end": "41840"
  },
  {
    "text": "people think that functional programming is very scary and there's moan ads and with mathematical things um I'm just",
    "start": "41840",
    "end": "49800"
  },
  {
    "text": "kind of try and demystify a little bit just um so that you can kind of maybe get interested in investigating it",
    "start": "49800",
    "end": "57199"
  },
  {
    "text": "obviously you can't become an expert uh in an hour so uh and I'm not going to go through",
    "start": "57199",
    "end": "62640"
  },
  {
    "text": "this is not going to be one of those feature things where I show you all the features of the language because I think that's the kind of stuff you can learn",
    "start": "62640",
    "end": "68240"
  },
  {
    "text": "by yourself I'm going to talk about more like the philosophy of the language and how functional programming is different",
    "start": "68240",
    "end": "73960"
  },
  {
    "text": "from AUD programming and how FSH has a different philosophy than C in terms of how you do things so is it worth the",
    "start": "73960",
    "end": "82320"
  },
  {
    "text": "effort to learn another you new language it's like there's all these new languages there's rust and there's go and there's cotlin and there's like you",
    "start": "82320",
    "end": "89079"
  },
  {
    "text": "know is it really worth it to learn a new language so this is a quote that I like",
    "start": "89079",
    "end": "95119"
  },
  {
    "text": "um a language that doesn't affect the way you think about programming is not worth knowing so for example if you know C",
    "start": "95119",
    "end": "101680"
  },
  {
    "text": "learning Java is not going to change the way you think about programming so it's not worth learning Java I mean it might",
    "start": "101680",
    "end": "107360"
  },
  {
    "text": "be worth learning Java to get a job but it's not worth learning it to try and expand your mind right um on the hand I",
    "start": "107360",
    "end": "114840"
  },
  {
    "text": "think f is a language that will change the way you think about programming and so I do think it's worth putting an",
    "start": "114840",
    "end": "120320"
  },
  {
    "text": "effort in to learn it um here was a conversation I saw on Reddit I think someone said well yeah f",
    "start": "120320",
    "end": "126880"
  },
  {
    "text": "is a little bit better but is it really worth the effort you know which I sympathize with I mean it's like there's",
    "start": "126880",
    "end": "132200"
  },
  {
    "text": "so many new things you really don't want to spend a lot of time learning something you know if you're not going to really get anything out of it but",
    "start": "132200",
    "end": "139519"
  },
  {
    "text": "somebody responded with this um you know learning f was a big boost to my career",
    "start": "139519",
    "end": "145080"
  },
  {
    "text": "as a c developer so this person doesn't use it professionally there aren't that many F jobs but we're talking about",
    "start": "145080",
    "end": "150560"
  },
  {
    "text": "personal development here we're talking about learning new paradigms learning new ways of programming and he said this",
    "start": "150560",
    "end": "157080"
  },
  {
    "text": "knowledge actually made me a better program in general so that's a good reason to learn f um another way to before you put a lot",
    "start": "157080",
    "end": "165400"
  },
  {
    "text": "of effort into something is to find somebody who has done it before so find someone you trust who has learned cop",
    "start": "165400",
    "end": "171159"
  },
  {
    "text": "and has also learned fop and ask them is it worth learning and if they say yes you know don't have to trust me but you",
    "start": "171159",
    "end": "177840"
  },
  {
    "text": "know don't trust people who've never you've never just look look at it and say it's horrible don't bother cuz you",
    "start": "177840",
    "end": "182920"
  },
  {
    "text": "need to have a you need to have experience in both sides and only then can you make a sensible decision so find someone like that and ask them what they",
    "start": "182920",
    "end": "189599"
  },
  {
    "text": "think all right so some misconceptions about F I'll just clear up quickly um it's developed by Microsoft research not",
    "start": "189599",
    "end": "197120"
  },
  {
    "text": "Microsoft proper uh but it became a proper Microsoft product in 2010 Shi with visual studio and now it's on a",
    "start": "197120",
    "end": "203640"
  },
  {
    "text": "parity with c and VB and so on parity in in quotes um it's open Source I think",
    "start": "203640",
    "end": "210280"
  },
  {
    "text": "it's one of the first Microsoft products to go open source it's on GitHub you can change the compiler and put a full",
    "start": "210280",
    "end": "215760"
  },
  {
    "text": "request in and go for it uh it's crossplatform it works on Linux it works on Windows it works on the Mac um it",
    "start": "215760",
    "end": "223120"
  },
  {
    "text": "works with you know uh net core it works with mono um obviously it works really",
    "start": "223120",
    "end": "229000"
  },
  {
    "text": "well in Visual Studio but it also works really well with Ed as a visual studio code has a fantastic F plugin um called",
    "start": "229000",
    "end": "236159"
  },
  {
    "text": "ionide which I highly recommend and there's also things for emac and V and so on um really important active and",
    "start": "236159",
    "end": "243840"
  },
  {
    "text": "friendly Community when you're learning a language you don't want people to to you know tell you off asking stupid",
    "start": "243840",
    "end": "250920"
  },
  {
    "text": "questions when you're beginning right you want people who are supportive so if you go to fop org which is the F",
    "start": "250920",
    "end": "257000"
  },
  {
    "text": "software Foundation there's instructions on how to download There's also instructions on how to get to the F",
    "start": "257000",
    "end": "262079"
  },
  {
    "text": "slack Channel um which way there's a beginners channel in there you can ask questions",
    "start": "262079",
    "end": "267360"
  },
  {
    "text": "and on FSH on Twitter the hashtag that's a great place to ask questions or to find out what's going on at the shop",
    "start": "267360",
    "end": "273800"
  },
  {
    "text": "right so what am I going to talk about so the first thing I'm going to talk about is the differences between C and F",
    "start": "273800",
    "end": "281280"
  },
  {
    "text": "um when you're learning a new language you always want to kind of compare it with what you already know and that's",
    "start": "281280",
    "end": "287160"
  },
  {
    "text": "true for anything I actually think that's a bad idea to be honest I think when you're learning something new",
    "start": "287160",
    "end": "292199"
  },
  {
    "text": "especially if it's a completely different Paradigm you should actually have like a beginner's mind and forget everything you know because it's going",
    "start": "292199",
    "end": "297560"
  },
  {
    "text": "to interfere with your learning so ideally when you're learning language like f you should forget everything you",
    "start": "297560",
    "end": "303759"
  },
  {
    "text": "know about Z that's kind of impossible but that's would be the recommended approach because otherwise you're going to get frustrated to say well why",
    "start": "303759",
    "end": "309880"
  },
  {
    "text": "doesn't it do this and why doesn't it do that but since you're here I am and since you are C people I'm going to talk",
    "start": "309880",
    "end": "316400"
  },
  {
    "text": "about the differences anyway so the first thing is the syntax is very different and this is probably what you see first and this is what puts a lot of",
    "start": "316400",
    "end": "323280"
  },
  {
    "text": "people off and I'll talk about that type inference uh is something which is very",
    "start": "323280",
    "end": "328440"
  },
  {
    "text": "different between our c um the defaults are different so in f",
    "start": "328440",
    "end": "333759"
  },
  {
    "text": "everything defaults to immutability for example and mutability is something special and there's a different",
    "start": "333759",
    "end": "340280"
  },
  {
    "text": "philosophy about what's important when you program uh and then I'll talk about",
    "start": "340280",
    "end": "346039"
  },
  {
    "text": "things which are sort of special to F that c doesn't have um the fact that f is a functional first language uh the",
    "start": "346039",
    "end": "352600"
  },
  {
    "text": "fact that F has an ALG type system uh and the fact that f is an interactive",
    "start": "352600",
    "end": "359039"
  },
  {
    "text": "language you can can play with it like python or Ruby it feels like a scripting language um these differences between C",
    "start": "359039",
    "end": "366800"
  },
  {
    "text": "by the way I've ranked them from least important to most important people really focus on the syntax that is the",
    "start": "366800",
    "end": "373039"
  },
  {
    "text": "least important thing about a language the fact that it's got a different philosophy I think is more important and that but it's not obvious just by",
    "start": "373039",
    "end": "379440"
  },
  {
    "text": "looking at the code it's not obvious that it has a different philosophy but I'll talk about that so let's start with",
    "start": "379440",
    "end": "384680"
  },
  {
    "text": "a syntax because everyone this is thing that people really complain about so what I'm going to do is I'll start start",
    "start": "384680",
    "end": "389759"
  },
  {
    "text": "off with a c example and I'll mutate it I'll Transform it into F code so here's",
    "start": "389759",
    "end": "396360"
  },
  {
    "text": "immutable class in C it's got It's a person class it's got a name property and a birthday property it's pretty dumb",
    "start": "396360",
    "end": "403360"
  },
  {
    "text": "class really all right so the first thing first difference in the syntax is",
    "start": "403360",
    "end": "408599"
  },
  {
    "text": "indentation rather than curly braces and you've probably seen this um here's all the curly braces and the question is do",
    "start": "408599",
    "end": "415120"
  },
  {
    "text": "we really need them do they add value right it if you look at cop code I think",
    "start": "415120",
    "end": "421479"
  },
  {
    "text": "onethird of a c code is Curly braces is it really that important the indentation always already gives you everything you",
    "start": "421479",
    "end": "427039"
  },
  {
    "text": "need to know so this is the code with curly braces and this is the code",
    "start": "427039",
    "end": "432319"
  },
  {
    "text": "without curly braces with indentation okay there's the code with curly braces there's the code with indentation now",
    "start": "432319",
    "end": "438879"
  },
  {
    "text": "some people will say well you know is it really that harder to read without the curly braces some people say yes it's",
    "start": "438879",
    "end": "445759"
  },
  {
    "text": "like oh no this is like impossible to read I can't possibly understand this code I I really that's that's a silly thing",
    "start": "445759",
    "end": "452560"
  },
  {
    "text": "to say um okay so if you if you there's a couple of things to notice first of all",
    "start": "452560",
    "end": "458000"
  },
  {
    "text": "you might have noticed I put equal signs that's used to start the blocks um whoops and the other thing is",
    "start": "458000",
    "end": "465039"
  },
  {
    "text": "that we can shift all the without the curly braces we actually get a lot of vertical space back so we get a lot of",
    "start": "465039",
    "end": "470520"
  },
  {
    "text": "vertical space compaction which is much nice which is very nice so if you're worried about whites space here is a",
    "start": "470520",
    "end": "476319"
  },
  {
    "text": "helpful vend diagram um there are people who complain about whites space and there are people",
    "start": "476319",
    "end": "482360"
  },
  {
    "text": "who've used the language with whitespace and the intersection is a very small",
    "start": "482360",
    "end": "487479"
  },
  {
    "text": "intersection there there are some people who do complain and have you know who've used it but normally people who complain",
    "start": "487479",
    "end": "493400"
  },
  {
    "text": "actually haven't done it um so people complain about python but they never actually use Python okay",
    "start": "493400",
    "end": "500039"
  },
  {
    "text": "um here's Eric Raymond who is you know can't get much more hacker credentials than that uh he said python so he's",
    "start": "500039",
    "end": "507039"
  },
  {
    "text": "talking about python which is very similar to F in terms of the wide space the pythons use of whites space stopped feeling unnatural after about 20 minutes",
    "start": "507039",
    "end": "513518"
  },
  {
    "text": "I just indented code like I would with c and it worked all right and that's",
    "start": "513519",
    "end": "518760"
  },
  {
    "text": "pretty much you just indent it the way you would normally indent it and pretty much things work that is not the hardest part about learning f believe",
    "start": "518760",
    "end": "525120"
  },
  {
    "text": "me so you know give it a go don't let this Whit space thing bother you how many people here know",
    "start": "525120",
    "end": "531399"
  },
  {
    "text": "python okay well then you've got no problem no problem with fot all right okay here's some other syntax",
    "start": "531399",
    "end": "537399"
  },
  {
    "text": "differences I'll just go through quickly um a lot of these things are also going to be available in C at some point if",
    "start": "537399",
    "end": "543680"
  },
  {
    "text": "they're not available now I'm sort of losing track of which features are actually making it into the C releases but first one backing fields from",
    "start": "543680",
    "end": "550440"
  },
  {
    "text": "Constructor parameters if you look at the Constructor there's a name and a birthday and then there's a backing",
    "start": "550440",
    "end": "556279"
  },
  {
    "text": "fields which are name a birthday and there's just a lot of names and it's like duplicate stuff everywhere right that's annoying let's get rid of it so",
    "start": "556279",
    "end": "563480"
  },
  {
    "text": "in F the parameters that you pass the Constructor automatically become backing",
    "start": "563480",
    "end": "568720"
  },
  {
    "text": "fields so you don't need to Define them and then you can just in your property you can just return it that's saves a bit of",
    "start": "568720",
    "end": "575880"
  },
  {
    "text": "code right there okay that's very nice um the primary Constructor and the class",
    "start": "575880",
    "end": "581640"
  },
  {
    "text": "definition get merged so in C the constructors are separate kind of methods as it were um separate from the",
    "start": "581640",
    "end": "589079"
  },
  {
    "text": "class definition uh in F you take this Constructor and you put it at the top",
    "start": "589079",
    "end": "595079"
  },
  {
    "text": "because how often do you have more than one Constructor I mean sometimes you do and in F you can have secondary",
    "start": "595079",
    "end": "601240"
  },
  {
    "text": "Constructors too that's not a problem but almost always why not just like make it part of the class definition like",
    "start": "601240",
    "end": "606640"
  },
  {
    "text": "that that saves a bit more it also saves some more vertical space that's another three or four lines we've saved right",
    "start": "606640",
    "end": "611760"
  },
  {
    "text": "there um n Noise Okay so this is an a mutable class we've got all these GS",
    "start": "611760",
    "end": "617000"
  },
  {
    "text": "everywhere get get get let's get rid of the GS okay the Gs are gone that's",
    "start": "617000",
    "end": "623959"
  },
  {
    "text": "good um another thing we don't need is semicolons nobody like",
    "start": "623959",
    "end": "630120"
  },
  {
    "text": "semicolons right everybody hates semicolons let's let's get rid of them now occasionally you do have two things",
    "start": "630120",
    "end": "636000"
  },
  {
    "text": "on the same line and you can use a semicolon if you need to but you don't need to",
    "start": "636000",
    "end": "642120"
  },
  {
    "text": "normally right okay no return so in C you have a return keyword",
    "start": "642120",
    "end": "648920"
  },
  {
    "text": "to tell you this is the return of the method or whatever uh in F you don't need it and code looks like this and the",
    "start": "648920",
    "end": "656000"
  },
  {
    "text": "reason is that f is an expression oriented language everything is an expression not a statement so an expression is something that returns",
    "start": "656000",
    "end": "662560"
  },
  {
    "text": "something it's not just it doesn't just do something it always returns something it's like if in in C difference between",
    "start": "662560",
    "end": "668360"
  },
  {
    "text": "an action and a funk right everything is a funk in C in F there's no actions it always returns",
    "start": "668360",
    "end": "674720"
  },
  {
    "text": "something and so if it always returns something you're always going to need a return statement so you just make the last line of the block be the return so",
    "start": "674720",
    "end": "682360"
  },
  {
    "text": "in this case the name is the last line that's what gets returns all right so you got implicit returns that's very",
    "start": "682360",
    "end": "688600"
  },
  {
    "text": "nice all all right public members okay so this is a mutable class people can't",
    "start": "688600",
    "end": "693680"
  },
  {
    "text": "change it why make everything private so in um it's again it's noise like in C you",
    "start": "693680",
    "end": "701160"
  },
  {
    "text": "spend a lot of time typing public like let's not get rid of it let's let's get rid of public we don't need public now",
    "start": "701160",
    "end": "706920"
  },
  {
    "text": "in F this is a good example where the defaults are different in F you can make things private if you want to you can",
    "start": "706920",
    "end": "712720"
  },
  {
    "text": "the the the same have same accessibility modifi you can say private and internal and all that stuff the defaults are",
    "start": "712720",
    "end": "717839"
  },
  {
    "text": "different the default is public in in C the default is private all right type inference okay so",
    "start": "717839",
    "end": "724320"
  },
  {
    "text": "in the Constructor we say that the name is a string and the birthday is a dates and in the properties we say the name is",
    "start": "724320",
    "end": "730680"
  },
  {
    "text": "a string and the birthday is a date it's like why are we duplicating this why can't the compiler figure this out why",
    "start": "730680",
    "end": "736320"
  },
  {
    "text": "do I have to keep typing date time over and over right in FP the compiler does",
    "start": "736320",
    "end": "741560"
  },
  {
    "text": "figure it out for us right we specify it once and then thereafter it's figured it",
    "start": "741560",
    "end": "746880"
  },
  {
    "text": "out now at this point I properties are kind of getting kind of hard to know the properties getting sparse so in F you",
    "start": "746880",
    "end": "754880"
  },
  {
    "text": "have to say that something's actually a member so that's a little bit of a clunky thing you have to say this is a",
    "start": "754880",
    "end": "760000"
  },
  {
    "text": "member member this dot so this is the self it's the same as this in cop it's",
    "start": "760000",
    "end": "765079"
  },
  {
    "text": "the self- reference okay and um so that inates a",
    "start": "765079",
    "end": "770399"
  },
  {
    "text": "class member and use the same Syntax for methods as property so this is a method",
    "start": "770399",
    "end": "777639"
  },
  {
    "text": "age and you calculate the age by doing something and again I don't have to return I just say that the difference",
    "start": "777639",
    "end": "783760"
  },
  {
    "text": "divided by 365 that's the age so methods and properties look very similar in fop",
    "start": "783760",
    "end": "789160"
  },
  {
    "text": "and notice that with age I didn't have to say it returned an INT right in the the compiler figured it",
    "start": "789160",
    "end": "796920"
  },
  {
    "text": "out all right type annotations so in C types come before",
    "start": "796920",
    "end": "804079"
  },
  {
    "text": "the variable name so date time birthday string name in F Shar is the other round",
    "start": "804079",
    "end": "810160"
  },
  {
    "text": "the types come afterwards so it's birthday colon date time Name colon string if you've ever used typescript",
    "start": "810160",
    "end": "817399"
  },
  {
    "text": "has the same thing a lot of languages do this most modern languages now kind of adopt this kind of a standard way of",
    "start": "817399",
    "end": "822800"
  },
  {
    "text": "doing types so the C kind of languages have their own way of doing it but other languages do it this",
    "start": "822800",
    "end": "828079"
  },
  {
    "text": "way different keywords okay now if you care about this is the kind of syntax difference that really if you care about",
    "start": "828079",
    "end": "833480"
  },
  {
    "text": "this I'm sorry you know I can't help you different keywords so in F C we use",
    "start": "833480",
    "end": "839839"
  },
  {
    "text": "class and we use VAR in F we use type and we use",
    "start": "839839",
    "end": "845000"
  },
  {
    "text": "let all right and those different keywords but really that's all you have to remember it's not that hard all right",
    "start": "845000",
    "end": "852120"
  },
  {
    "text": "now modern C does have a lot of these features um when I wrote this I I think",
    "start": "852120",
    "end": "857480"
  },
  {
    "text": "I wrote this based on um I I you know I haven't done C for a while so I've kind of lost track of what's",
    "start": "857480",
    "end": "862880"
  },
  {
    "text": "current but this is an example where the Constructor has merged with a class definition it's got Auto properties it's",
    "start": "862880",
    "end": "868839"
  },
  {
    "text": "got the expression bodied members and so on so it does kind of look like C except for the fact you've got public and",
    "start": "868839",
    "end": "874639"
  },
  {
    "text": "you've got the duplicated types and everything uh and the expression body members only work for single lines and",
    "start": "874639",
    "end": "879720"
  },
  {
    "text": "it's you know but it's the same idea I mean you know conciseness is good conciseness is really nice if you can do",
    "start": "879720",
    "end": "886360"
  },
  {
    "text": "it all right now that was the object oriented syntax I showed you the functional program syntax is even simpler because all this member stuff",
    "start": "886360",
    "end": "893320"
  },
  {
    "text": "it's kind of ugly so um in functional programming the key thing is you separate the data structures from the",
    "start": "893320",
    "end": "901399"
  },
  {
    "text": "behavior so the functions that act on the data are separate from the data things",
    "start": "901399",
    "end": "906839"
  },
  {
    "text": "themselves so in F if I wanted to define a person I would Define it like this so",
    "start": "906839",
    "end": "914040"
  },
  {
    "text": "this is what we call a record type in F and it kind of looks a little bit like Jason I suppose um there's a name and",
    "start": "914040",
    "end": "921920"
  },
  {
    "text": "there's a birthday and that's the type this is an immutable data structure with two properties there is no Behavior it's",
    "start": "921920",
    "end": "929360"
  },
  {
    "text": "just like you can think of it as a a dto as well it's it's like a dumb object with no Behavior if I want some uh",
    "start": "929360",
    "end": "936399"
  },
  {
    "text": "functions that work on it I Define separately I Define an age function and the age function uh looks like that so",
    "start": "936399",
    "end": "943279"
  },
  {
    "text": "again it's let uh there is one parameter which is person and there's a space",
    "start": "943279",
    "end": "949160"
  },
  {
    "text": "between the parameters and that becomes important later on when you do things like partial application so in function",
    "start": "949160",
    "end": "955199"
  },
  {
    "text": "languages you tend to use spaces between the function parameters um notice that I didn't have to uh what",
    "start": "955199",
    "end": "964639"
  },
  {
    "text": "else have I got yeah I didn't have any I don't got any type annotations but the fact that I'm passing a person and the",
    "start": "964639",
    "end": "971600"
  },
  {
    "text": "person has a birthday it figures out that the person is a person type and it figures out there's an in return so if I",
    "start": "971600",
    "end": "978759"
  },
  {
    "text": "look at the the what is infer the type inference will say this is a person to int function I don't have to specify",
    "start": "978759",
    "end": "986000"
  },
  {
    "text": "that which is very nice so there you go that's type infan is great and so it kind of looks like if",
    "start": "986000",
    "end": "991880"
  },
  {
    "text": "you're used to python this looks very much like python you're not specifying any types anywhere you just kind of writing code and you know but unlike",
    "start": "991880",
    "end": "1000160"
  },
  {
    "text": "pythons is strictly typed so you'll get a compile error if you make a mistake so as I said syntax is not the",
    "start": "1000160",
    "end": "1007360"
  },
  {
    "text": "most important thing it's never the most important thing about a programm language but okay I'm going to make an",
    "start": "1007360",
    "end": "1014279"
  },
  {
    "text": "exception originally we had like 20 L 21 lines of code now we got five lines of code if we take those two properties",
    "start": "1014279",
    "end": "1022600"
  },
  {
    "text": "um and we find if you compare C and F code bases where it's actually pretty much the same code being Rewritten we'll",
    "start": "1022720",
    "end": "1029280"
  },
  {
    "text": "find that F code in general is about three times less you know onethird of much F code is C code because of the",
    "start": "1029280",
    "end": "1036438"
  },
  {
    "text": "vertical um compression because of the lack of braces the lack of null checking uh the fact that you don't have",
    "start": "1036439",
    "end": "1042600"
  },
  {
    "text": "Constructors and stuff there's just a lot less code um and that's kind of I think that's",
    "start": "1042600",
    "end": "1048480"
  },
  {
    "text": "kind of important even though syntax is not that important I think the fact that you can see three times more on your",
    "start": "1048480",
    "end": "1053600"
  },
  {
    "text": "screen it's like getting a a super large monitor so that's nice uh and you only",
    "start": "1053600",
    "end": "1058840"
  },
  {
    "text": "have to write one third as much code so that's nice too so that's not like I say syntax is not that important but I think conciseness is important and I think C",
    "start": "1058840",
    "end": "1066520"
  },
  {
    "text": "can sometimes be a little verbos you know but that's not the I mean I wouldn't say that's not the only reason",
    "start": "1066520",
    "end": "1071919"
  },
  {
    "text": "to use a language so just let you know there's other more important reasons type inference okay so that's the syntax",
    "start": "1071919",
    "end": "1077960"
  },
  {
    "text": "stuff um type inference here's a function do something",
    "start": "1077960",
    "end": "1084320"
  },
  {
    "text": "and it's got some parameters an f and an x uh and let's say we're going to add one to X and we're going to pass it into",
    "start": "1084320",
    "end": "1090200"
  },
  {
    "text": "this F so f is obviously some sort of function um and then the output of that function is a y and then we're going to",
    "start": "1090200",
    "end": "1097000"
  },
  {
    "text": "take Y and we're going to add it to hello so what can I haven't specified",
    "start": "1097000",
    "end": "1102240"
  },
  {
    "text": "anything in the parameters right so can the compiler figure out what's going on and the answer say yes",
    "start": "1102240",
    "end": "1109159"
  },
  {
    "text": "it does and the way it does it like this first of all it says that X has to be an INT because anything you add an INT has to be an INT fop's really strict there's",
    "start": "1109159",
    "end": "1116440"
  },
  {
    "text": "no kind of coercion between types so you can't add a float to an INT and you can't add an INT 64 to an INT 32 they're",
    "start": "1116440",
    "end": "1123440"
  },
  {
    "text": "all different um so this it knows that X has to be an INT and then it also knows",
    "start": "1123440",
    "end": "1129200"
  },
  {
    "text": "because you're passing into f f must be a function now what about y y has to be a string for the same reason if you're",
    "start": "1129200",
    "end": "1134919"
  },
  {
    "text": "going to add something to another string y has to be a string so now if you at F",
    "start": "1134919",
    "end": "1140480"
  },
  {
    "text": "we know that the input to F is an INT and the output of f is a string so it's an INT to string function and so finally",
    "start": "1140480",
    "end": "1147760"
  },
  {
    "text": "this is the inferred type okay the first parameter f is a function which takes an",
    "start": "1147760",
    "end": "1152960"
  },
  {
    "text": "in and returns a string the second parameter is an integer and the return type the very last line is a",
    "start": "1152960",
    "end": "1160159"
  },
  {
    "text": "string because that's hello plus something so the the type inferences works like this it can do quite a lot of",
    "start": "1160159",
    "end": "1165919"
  },
  {
    "text": "stuff occasionally you need to annotate types um but in many many cases you can",
    "start": "1165919",
    "end": "1170960"
  },
  {
    "text": "just write code like this and it just works okay that's all very good but is",
    "start": "1170960",
    "end": "1176760"
  },
  {
    "text": "it really how useful is that really I mean it's kind of saves some typing let me show you a more complex example okay",
    "start": "1176760",
    "end": "1183280"
  },
  {
    "text": "this is the group by extension method from link um and I challenge you",
    "start": "1183280",
    "end": "1190720"
  },
  {
    "text": "to scan this and figure out what exactly it does there's a lot of noise here",
    "start": "1190720",
    "end": "1197559"
  },
  {
    "text": "sometimes you can't even find the name of the method because it's buried under all the stuff I mean this is nice you know it's nice to know but there's a lot",
    "start": "1197559",
    "end": "1204799"
  },
  {
    "text": "of noise and if you're writing your own functions you're going to have to figure out what all these types are yourself and annotate them properly uh",
    "start": "1204799",
    "end": "1212000"
  },
  {
    "text": "in F the code looks like this okay almost always the the compiler will figure out all this stuff for you which",
    "start": "1212000",
    "end": "1219720"
  },
  {
    "text": "is kind of cool so the benefit of type in is obviously less typing but more importantly less noise you can really",
    "start": "1219720",
    "end": "1226880"
  },
  {
    "text": "focus on the logic of the code and not about the kind of types get in the way um again if anyone who's used a dynamic",
    "start": "1226880",
    "end": "1233520"
  },
  {
    "text": "language like python or Ruby you don't really need to see all the types every single time in visual studio and in vs",
    "start": "1233520",
    "end": "1240240"
  },
  {
    "text": "code you can actually hover over the thing and it will tell you what the types are and there's a Code lens thing I mean there's lots of things that will",
    "start": "1240240",
    "end": "1245880"
  },
  {
    "text": "tell you what the types are without having to type them explicitly all right different",
    "start": "1245880",
    "end": "1251080"
  },
  {
    "text": "defaults so the different defaults and F it's mutable by default mutability is a",
    "start": "1251080",
    "end": "1256760"
  },
  {
    "text": "special case everything is non-null by default and if you want nullability",
    "start": "1256760",
    "end": "1261880"
  },
  {
    "text": "that's a special case uh everything the F record types and stuff are structural",
    "start": "1261880",
    "end": "1267559"
  },
  {
    "text": "you get structural equality by default and reference equality is a special case or for classes and stuff you get",
    "start": "1267559",
    "end": "1273320"
  },
  {
    "text": "reference equality so structural equality means that if all the properties are the same then the two things are the same you I'm sure you've",
    "start": "1273320",
    "end": "1279440"
  },
  {
    "text": "written you've overwritten equals and get hash code to do that a million times right and then everything must be",
    "start": "1279440",
    "end": "1285520"
  },
  {
    "text": "initialized that's a big difference so let's start with",
    "start": "1285520",
    "end": "1291080"
  },
  {
    "text": "immutability so um there's a a value in f x = 1 now in fshp um the assignment",
    "start": "1291240",
    "end": "1300679"
  },
  {
    "text": "operator is not equals the assignment operator is the backwards Arrow like that it's a different thing Al together",
    "start": "1300679",
    "end": "1305880"
  },
  {
    "text": "so you can't assignment and equality are not going to get mixed up so we're going to sign 2 to X and if we try and do it",
    "start": "1305880",
    "end": "1310960"
  },
  {
    "text": "the compiler is going to complain and says it's not mutable okay now if I do want a mutable value I have to use the",
    "start": "1310960",
    "end": "1318600"
  },
  {
    "text": "mutable keyword and then when I assign it it's happy so this is saying that",
    "start": "1318600",
    "end": "1324360"
  },
  {
    "text": "mutability is something you have to ask for it's not something happens by default and because you have to ask for it and because it's so explicit you tend",
    "start": "1324360",
    "end": "1331000"
  },
  {
    "text": "to use it less you know it's like you tend to because we're lazy right we tend to use",
    "start": "1331000",
    "end": "1336679"
  },
  {
    "text": "whatever is easiest if things in C we can we can create readon class in C but it's kind of a pain so we tend not",
    "start": "1336679",
    "end": "1343240"
  },
  {
    "text": "bother so much um we everything tends to be mutable you know we tend not to",
    "start": "1343240",
    "end": "1349400"
  },
  {
    "text": "do it this way in F is exact opposite everything's immutable by default and so if you're lazy you just follow the flow",
    "start": "1349400",
    "end": "1355200"
  },
  {
    "text": "and make everything immutable and very occasionally you need things to be mutable what about nullability",
    "start": "1355200",
    "end": "1361600"
  },
  {
    "text": "so here's our person type if I do this I'm going to say this is X is a person",
    "start": "1361600",
    "end": "1367320"
  },
  {
    "text": "and I'm going to assign it to be null I get a compile time error person doesn't have null as a",
    "start": "1367320",
    "end": "1373600"
  },
  {
    "text": "value okay this is very different from C where you can assign null to most classes",
    "start": "1373600",
    "end": "1380159"
  },
  {
    "text": "um if I do want to assign null to a class I have to do it like this okay I have to say allow null literal",
    "start": "1380159",
    "end": "1386000"
  },
  {
    "text": "attributes on top and I have to use a special class and so on it's like painful right I mean it does work if I",
    "start": "1386000",
    "end": "1393440"
  },
  {
    "text": "do this um but because it's much more painful you're really never going to do it the the only reason you might want to",
    "start": "1393440",
    "end": "1398840"
  },
  {
    "text": "do it is to be backwardly compatible with something you know but you're never going to use this in",
    "start": "1398840",
    "end": "1404200"
  },
  {
    "text": "real code so you're never going to write you can pretty much rely that all your classes in fop and going to be null",
    "start": "1404200",
    "end": "1409679"
  },
  {
    "text": "that's nice because you eliminate null checking if you ever a right defensive code in your Constructor you know if the",
    "start": "1409679",
    "end": "1415919"
  },
  {
    "text": "parameter is null throw an exception or whatever um you never see that kind of code in fot because nothing it's",
    "start": "1415919",
    "end": "1422320"
  },
  {
    "text": "nothing's you can guarantee that nothing's null okay structural",
    "start": "1422320",
    "end": "1427520"
  },
  {
    "text": "equality so here's our person type again now let's say um that we have this crazy",
    "start": "1427520",
    "end": "1432799"
  },
  {
    "text": "r that if someone has the same name and they have the same birthday they're the same person all right not a very good rule",
    "start": "1432799",
    "end": "1439960"
  },
  {
    "text": "but I've seen that actually done in practice so here's a here Alice version one Alice version",
    "start": "1439960",
    "end": "1446600"
  },
  {
    "text": "two both these things have the same name they have the same birthday the question is are they equal is Alice version one",
    "start": "1446600",
    "end": "1452960"
  },
  {
    "text": "the same as Alice version two and the answer is yes in F that is true you do",
    "start": "1452960",
    "end": "1460400"
  },
  {
    "text": "not have to override get hash code and you do not have to override equals to",
    "start": "1460400",
    "end": "1466399"
  },
  {
    "text": "get this this is the default Behavior and that's a great relief to me because",
    "start": "1466399",
    "end": "1472000"
  },
  {
    "text": "I hate writing equals and I always get it wrong and I worry that there might be some special case when two things are",
    "start": "1472000",
    "end": "1477600"
  },
  {
    "text": "null and I haven't checked it properly it's like I can never remember how to do it right I probably have bugs in my code",
    "start": "1477600",
    "end": "1482799"
  },
  {
    "text": "and the same thing with get hash code hate writing it right so you never have to write that's one one big relief there",
    "start": "1482799",
    "end": "1490080"
  },
  {
    "text": "okay everything has to be initialized um okay here's our person again okay so in C you can say here's a",
    "start": "1490080",
    "end": "1497640"
  },
  {
    "text": "variable here's backing field or or something and it's just going to be a person um now in C that can be set to",
    "start": "1497640",
    "end": "1504080"
  },
  {
    "text": "null the default value for a class is null F that's an error okay you can't",
    "start": "1504080",
    "end": "1509240"
  },
  {
    "text": "there is no default value for anything null is certainly not a default value because it's not a nullable thing so you",
    "start": "1509240",
    "end": "1514760"
  },
  {
    "text": "always have to initialize it to be something so you never have an uninitialized variable in",
    "start": "1514760",
    "end": "1520679"
  },
  {
    "text": "fop um and if you partially initialize it let's say you set the name but you forget to set the",
    "start": "1520679",
    "end": "1525919"
  },
  {
    "text": "birthday uh that's also an error every every single property is required when you initialize it so if you add a new",
    "start": "1525919",
    "end": "1534279"
  },
  {
    "text": "property um all your code will break until you fixed it which is probably",
    "start": "1534279",
    "end": "1539640"
  },
  {
    "text": "good I think I don't know um you know you you never have this thing where you've added a new property and somebody",
    "start": "1539640",
    "end": "1545600"
  },
  {
    "text": "forgets to initialize it properly because you've got a Constructor which is backwardly compatible and you know",
    "start": "1545600",
    "end": "1551039"
  },
  {
    "text": "that's never going to happen fop which is kind of nice so you can trust a lot of it's to do with trust you can trust that things",
    "start": "1551039",
    "end": "1556840"
  },
  {
    "text": "have been properly initialized so you tend to not write defensive code in F",
    "start": "1556840",
    "end": "1562440"
  },
  {
    "text": "you don't have to check for null you don't have to check is it initializes a valid object all that stuff tends to",
    "start": "1562440",
    "end": "1568200"
  },
  {
    "text": "disappear so that's another reason why the code is shorter because there's just a lot less defensive programming all right so here's here",
    "start": "1568200",
    "end": "1575200"
  },
  {
    "text": "here's what I think is the most important thing which is the different philosophy so c c obviously is derived",
    "start": "1575200",
    "end": "1583120"
  },
  {
    "text": "from C like languages obviously it doesn't have pointers and you know stuff like that but it's got the imperative",
    "start": "1583120",
    "end": "1589320"
  },
  {
    "text": "model you have for Loops you have mutability and so on and so forth now f",
    "start": "1589320",
    "end": "1594559"
  },
  {
    "text": "is a cousin of ml which is a language designed in the 1970s pretty much around the same time as C uh and that ML stand",
    "start": "1594559",
    "end": "1602039"
  },
  {
    "text": "for meta language and it was originally designed for proving things okay so it wasn't really designed to be",
    "start": "1602039",
    "end": "1608240"
  },
  {
    "text": "a kind of useful Enterprise programming language um and that means there's a different",
    "start": "1608240",
    "end": "1614799"
  },
  {
    "text": "philosophy and so let's look at an example of a philosophical difference",
    "start": "1614799",
    "end": "1620760"
  },
  {
    "text": "and let's talk about predictable code so what I mean by predictable code is can you understand the code in front of you",
    "start": "1620760",
    "end": "1627279"
  },
  {
    "text": "just by looking at it okay you're not allowed to look at the documentation you're not allowed to look at the rest of the code base you're not allowed to",
    "start": "1627279",
    "end": "1633399"
  },
  {
    "text": "look at the implementation and just by looking at the code in front of you can you tell what it",
    "start": "1633399",
    "end": "1638799"
  },
  {
    "text": "does all right and if you can that's great because that's more less makes understanding the code much easier so",
    "start": "1638799",
    "end": "1645799"
  },
  {
    "text": "here's some code x = 1 do something with X and Y equal hello +",
    "start": "1645799",
    "end": "1652159"
  },
  {
    "text": "x so the question is what is",
    "start": "1652159",
    "end": "1656320"
  },
  {
    "text": "y well in C this wouldn't work but uh if",
    "start": "1660480",
    "end": "1666080"
  },
  {
    "text": "I told you the answer is hello world would that give you a clue no the answer is you can't tell",
    "start": "1666080",
    "end": "1671679"
  },
  {
    "text": "this is a trick question actually this is this is actually JavaScript okay it was not cave at all um this do something",
    "start": "1671679",
    "end": "1678720"
  },
  {
    "text": "function in JavaScript changes what x is from a int to a string and it does it",
    "start": "1678720",
    "end": "1686120"
  },
  {
    "text": "silently so that when I come back later and I use it it's now a string and Y is now hello world okay this is horrible",
    "start": "1686120",
    "end": "1693559"
  },
  {
    "text": "this is horrible this is like code you can't this is an example of why you can't you know trust JavaScript in C",
    "start": "1693559",
    "end": "1700120"
  },
  {
    "text": "that could never happen because you got static typing you can't change the type of something you know magically behind",
    "start": "1700120",
    "end": "1705640"
  },
  {
    "text": "the scenes so this is an example C being more predictable than JavaScript if you look at the C code you can you know for",
    "start": "1705640",
    "end": "1712440"
  },
  {
    "text": "fact that it can't compile just by looking at the code you don't have to you know look at the implementation of",
    "start": "1712440",
    "end": "1719320"
  },
  {
    "text": "do something to figure out that it's not going to compile so this is good this is the kind of thing we want so let's take",
    "start": "1719320",
    "end": "1724559"
  },
  {
    "text": "this extend this and look at some other things so let's say we're trying to make a predictable language rule number one you're not allowed to change the type of",
    "start": "1724559",
    "end": "1730640"
  },
  {
    "text": "a variable once you defined it that's a very good rule okay let's look at another example two customers in C they have the",
    "start": "1730640",
    "end": "1737559"
  },
  {
    "text": "same idea and the same name um are the customers",
    "start": "1737559",
    "end": "1743360"
  },
  {
    "text": "equal well you can't tell because it depends on whether the customer class",
    "start": "1744679",
    "end": "1750159"
  },
  {
    "text": "has overwritten get equals or not get hash code and and equals or not you can't tell because behavior in in the",
    "start": "1750159",
    "end": "1757519"
  },
  {
    "text": "object-oriented world you're not supposed to know about the behavior of an object objects are meant to be opaque",
    "start": "1757519",
    "end": "1763880"
  },
  {
    "text": "right so you can't tell um I think to make the code predict a predictable",
    "start": "1763880",
    "end": "1770480"
  },
  {
    "text": "language if they have the same values they should be equal okay now I'm not saying that has to be true but this is",
    "start": "1770480",
    "end": "1776159"
  },
  {
    "text": "on this particular set of guidelines making things predictable it makes life much more predictable um okay here is a customer",
    "start": "1776159",
    "end": "1783480"
  },
  {
    "text": "and here is an order and they both happen to have the same properties and the same values in those properties so",
    "start": "1783480",
    "end": "1789440"
  },
  {
    "text": "the next question is the customer equal to the order all right can you",
    "start": "1789440",
    "end": "1796159"
  },
  {
    "text": "tell well you might say well it depends on how they've overridden equality and so on it's like no that's the wrong",
    "start": "1796159",
    "end": "1802559"
  },
  {
    "text": "answer this is probably a bug right if you've you've accidentally compared the two things by mistake you why would you",
    "start": "1802559",
    "end": "1808399"
  },
  {
    "text": "ever compare a customer to an order that's like it's a bug in your code you you've typed the wrong thing so ideally",
    "start": "1808399",
    "end": "1814880"
  },
  {
    "text": "your compiler would say you're not allowed this is a compile ER you're not allowed to compare two different things",
    "start": "1814880",
    "end": "1820279"
  },
  {
    "text": "right so from predictability point of view that should be a compile time error okay how about another one let's",
    "start": "1820279",
    "end": "1827240"
  },
  {
    "text": "say you create a custom customer and then you say the customer has an address and the address has a",
    "start": "1827240",
    "end": "1832360"
  },
  {
    "text": "country and you what is the value of that what is the address.",
    "start": "1832360",
    "end": "1838360"
  },
  {
    "text": "country well what's going to happen are you going to get null reference are you going to get who knows maybe maybe the",
    "start": "1838360",
    "end": "1845240"
  },
  {
    "text": "customer has initialized the address to something valid I don't know I can't tell all right because the Constructor",
    "start": "1845240",
    "end": "1851279"
  },
  {
    "text": "has no parameters so you know and in and we can",
    "start": "1851279",
    "end": "1856720"
  },
  {
    "text": "probably assume that it's probably left is null but we can't tell um and in you know if the customer if the address is",
    "start": "1856720",
    "end": "1862919"
  },
  {
    "text": "not required if it's an optional thing then we should make it a special optional type don't just set it to",
    "start": "1862919",
    "end": "1868360"
  },
  {
    "text": "null so here's another one whoops always initialize objects to a valid State we want the compiler to",
    "start": "1868360",
    "end": "1874559"
  },
  {
    "text": "enforce this okay that way we guarantee when we look at an object we know that it's in a valid State we never have to",
    "start": "1874559",
    "end": "1880679"
  },
  {
    "text": "test whether it's null we never have to test where the address has been set and so on so on and if it's not a valid State it's a compil",
    "start": "1880679",
    "end": "1888240"
  },
  {
    "text": "okay here's another one we got us um set of uh we have a customer we add it to a",
    "start": "1888240",
    "end": "1895639"
  },
  {
    "text": "set and then we do something with the customer we don't know what happens to that customer and next question is that",
    "start": "1895639",
    "end": "1900960"
  },
  {
    "text": "customer still in the set of customers true or",
    "start": "1900960",
    "end": "1907320"
  },
  {
    "text": "false and the answer is we don't know because the process customer when you",
    "start": "1907639",
    "end": "1914240"
  },
  {
    "text": "you could have mutated the customer and you might have changed it hash code and when you look it up again it's in a different place so that you can't find",
    "start": "1914240",
    "end": "1919880"
  },
  {
    "text": "it again okay that's the problem with mutable stuff now if you had something where it was an immutable",
    "start": "1919880",
    "end": "1926039"
  },
  {
    "text": "customer and you do something if the process customer changes it it's going to have to return a new thing it's going",
    "start": "1926039",
    "end": "1932399"
  },
  {
    "text": "to be right there in your in in your face that it's returned a new changed version of the customer and if it hasn't",
    "start": "1932399",
    "end": "1937919"
  },
  {
    "text": "changed the customer then it's not going to return anything but you know if it doesn't return anything it can't possibly have changed the customer so",
    "start": "1937919",
    "end": "1944360"
  },
  {
    "text": "immutability is great there and in this case the orig customers never changed so it the hash code can't have changed it's",
    "start": "1944360",
    "end": "1950559"
  },
  {
    "text": "always going to be existing in that set so you can rely that things are going to work immutability is very useful in",
    "start": "1950559",
    "end": "1956600"
  },
  {
    "text": "terms of knowing and trusting that your code is not going to break you know so here's all these things we",
    "start": "1956600",
    "end": "1963039"
  },
  {
    "text": "talked about um can't change the type oh I've got one more so yeah objects and collection should be mutable it makes",
    "start": "1963039",
    "end": "1968960"
  },
  {
    "text": "life really easy now these guidelines is about immutability about predictability now you might say well I need mutability",
    "start": "1968960",
    "end": "1975360"
  },
  {
    "text": "stuff for performance I might mean it in Array because I've got stuff is like yes the guidelines for good performance are",
    "start": "1975360",
    "end": "1982000"
  },
  {
    "text": "different from the guidelines for predictability and they they Collide sometimes performance is more important",
    "start": "1982000",
    "end": "1988000"
  },
  {
    "text": "than predictability um sometimes predictability is more important than performance and you just have to choose",
    "start": "1988000",
    "end": "1993399"
  },
  {
    "text": "but if you're if you're going for predictable immutability is the best thing to go for uh one more so let's say",
    "start": "1993399",
    "end": "2000200"
  },
  {
    "text": "we have some sort of customer database uh and we're going to get a customer using its ID okay so what is",
    "start": "2000200",
    "end": "2006919"
  },
  {
    "text": "the output what is the ID we get return this customer type value uh what's the id of that",
    "start": "2006919",
    "end": "2014440"
  },
  {
    "text": "customer well what happens if the customer is missing okay let's say you can't find it in the database what is",
    "start": "2014880",
    "end": "2020840"
  },
  {
    "text": "that customer is the customer nil null or is it you're going to throw an exception or what I don't know can't",
    "start": "2020840",
    "end": "2027120"
  },
  {
    "text": "tell if the customer is null if you're going to use null as the convention then that the rest of the code is going to",
    "start": "2027120",
    "end": "2032440"
  },
  {
    "text": "break if you're going to throw an exception as a convention I mean I'm going to have to look at the documentation or something to figure it out right",
    "start": "2032440",
    "end": "2038279"
  },
  {
    "text": "what you really want to do is do something like this return something which is the customer or the error and now you can handle two",
    "start": "2038279",
    "end": "2044679"
  },
  {
    "text": "different cases if there's a customer there you can get it and if it's an error there you can get it but by making",
    "start": "2044679",
    "end": "2050919"
  },
  {
    "text": "it a special type called customer or error you've made it explicit that this thing might work might not work and if",
    "start": "2050919",
    "end": "2057000"
  },
  {
    "text": "it doesn't work here's the here's the um you know the the error case you don't",
    "start": "2057000",
    "end": "2062480"
  },
  {
    "text": "have to like figure out look at the documentation to figure out is it null or not",
    "start": "2062480",
    "end": "2068079"
  },
  {
    "text": "okay so these are all the the rules no missing data no nulls okay so trying to",
    "start": "2068079",
    "end": "2074040"
  },
  {
    "text": "document things using the um uh type system so FP aims to be a",
    "start": "2074040",
    "end": "2081560"
  },
  {
    "text": "predictable language like this you you're not allowed to change the type of variable objects with the same values",
    "start": "2081560",
    "end": "2087720"
  },
  {
    "text": "are equal by default objects of different types can't be compared objects have to be initialized to",
    "start": "2087720",
    "end": "2093358"
  },
  {
    "text": "something objects are generally immutable missing data errors are made explicit by using special types if you",
    "start": "2093359",
    "end": "2100240"
  },
  {
    "text": "use a null that's considered a code smell in F if you throw exceptions for",
    "start": "2100240",
    "end": "2106079"
  },
  {
    "text": "control flow obviously sometimes you throw exceptions because you just can't handle something that's fine but if you're trying to throw an exception a f",
    "start": "2106079",
    "end": "2112079"
  },
  {
    "text": "not found exception that's for control flow you shouldn't throw exceptions for that so in F you tend not to do that so",
    "start": "2112079",
    "end": "2118160"
  },
  {
    "text": "f is not perfect obviously there's back doors and you can't always drust but you can see that the kind of conventions",
    "start": "2118160",
    "end": "2124440"
  },
  {
    "text": "lean in a certain direction the philosophy behind what you think is good code and bad code like in C Minal is not",
    "start": "2124440",
    "end": "2130119"
  },
  {
    "text": "necessarily a code smell in F it is a it is a code smell so that's kind of a philosophical",
    "start": "2130119",
    "end": "2136640"
  },
  {
    "text": "difference between the two languages all right so that's the end of the differences now let's look at some of",
    "start": "2136640",
    "end": "2143960"
  },
  {
    "text": "the um things which are kind of unique to F and the first thing about f is a",
    "start": "2143960",
    "end": "2150319"
  },
  {
    "text": "functional first language now what do I mean by that um f",
    "start": "2150319",
    "end": "2157280"
  },
  {
    "text": "is a high language you can do o programming and you can do functional programming but it leans towards",
    "start": "2157280",
    "end": "2163160"
  },
  {
    "text": "functional program we tend to do the functional stuff first that's all kind of goto if we can use object oriented",
    "start": "2163160",
    "end": "2170599"
  },
  {
    "text": "programming in you know if there's a particular need for it in a certain situation but generally we prefer to use",
    "start": "2170599",
    "end": "2175920"
  },
  {
    "text": "functional programming if we can so let me just quickly for people who are not familiar with functional programming I'm just going to quickly",
    "start": "2175920",
    "end": "2182920"
  },
  {
    "text": "give you some things about functional programming so functional programming functions are the most important things in function programming they're the",
    "start": "2182920",
    "end": "2188680"
  },
  {
    "text": "building blocks for everything um the way that you combine functions is composition so like Lego so",
    "start": "2188680",
    "end": "2197640"
  },
  {
    "text": "in an objectoriented language you make classes that contain other classes and you build bigger classes in them in in a",
    "start": "2197640",
    "end": "2203960"
  },
  {
    "text": "functional program language you create functions out of smaller functions and you compose functions to make bigger things that's how it works um and",
    "start": "2203960",
    "end": "2211480"
  },
  {
    "text": "parameterization is really important in functional programming so in um if you want to",
    "start": "2211480",
    "end": "2217040"
  },
  {
    "text": "share code you know you don't want to repeat yourself and you want to have shared code you tend to use parameters",
    "start": "2217040",
    "end": "2222560"
  },
  {
    "text": "rather than base classes rather than use inheritance or something parameterization is the way of doing",
    "start": "2222560",
    "end": "2228040"
  },
  {
    "text": "it so in um functional programming",
    "start": "2228040",
    "end": "2233560"
  },
  {
    "text": "functions are things um and I think of it like a little bit of Railway track with a tunnel on top um there's an input",
    "start": "2233560",
    "end": "2241800"
  },
  {
    "text": "there's an output like the input is an apple and the output is a banana um so you see apple Arrow banana",
    "start": "2241800",
    "end": "2248640"
  },
  {
    "text": "um so here's a here's a in F you write the code like this to define a normal thing you say let xal 1 and to define a",
    "start": "2248640",
    "end": "2256079"
  },
  {
    "text": "function you say let add equals this and that gives you a bit of raway track um",
    "start": "2256079",
    "end": "2261119"
  },
  {
    "text": "notice that in F we use the same keyword let to Define normal values simple",
    "start": "2261119",
    "end": "2267440"
  },
  {
    "text": "values and also to Define functions that's not a coincidence because in F",
    "start": "2267440",
    "end": "2272520"
  },
  {
    "text": "functions are treated like things okay so the difference between a thing like an integer and a thing like a",
    "start": "2272520",
    "end": "2278599"
  },
  {
    "text": "function is not that big a difference so it's a standalone thing a",
    "start": "2278599",
    "end": "2284119"
  },
  {
    "text": "function um and because it's a thing it can be used as inputs and outputs to other functions so here's our wellway",
    "start": "2284119",
    "end": "2290720"
  },
  {
    "text": "track uh here's an input and the output could be a function for example because it's a thing uh or you could have a",
    "start": "2290720",
    "end": "2297480"
  },
  {
    "text": "function as the input to a to a function or you could have a function with an input output and there's a an extra",
    "start": "2297480",
    "end": "2303640"
  },
  {
    "text": "parameter which is another function which is the can controls how the function Works think strategy",
    "start": "2303640",
    "end": "2309200"
  },
  {
    "text": "pattern for example strategy pattern is exactly the same thing so this is the basic model for how",
    "start": "2309200",
    "end": "2315640"
  },
  {
    "text": "you do stuff in functional programming and that's it really that's pretty much all you need to",
    "start": "2315640",
    "end": "2320680"
  },
  {
    "text": "know um you can see that it gets quite complicated functions that return functions that return functions can get",
    "start": "2320680",
    "end": "2326119"
  },
  {
    "text": "quite complicated but the the the concepts are basically straightforward so let's look at composition quickly so composition you",
    "start": "2326119",
    "end": "2333720"
  },
  {
    "text": "have two functions and you want to glue them together uh and F that's the double",
    "start": "2333720",
    "end": "2338880"
  },
  {
    "text": "angle bracket and you glue them together and now you get a new function now what's interesting is that",
    "start": "2338880",
    "end": "2345680"
  },
  {
    "text": "you can't tell that this new function was built from smaller functions right the the the fact that",
    "start": "2345680",
    "end": "2351880"
  },
  {
    "text": "how it was built is Now hidden from you so for example where did the banana go right um in the lowlevel code you care",
    "start": "2351880",
    "end": "2358680"
  },
  {
    "text": "about bananas but when you get to the high level code bananas aren't important so you've now abstracted a way that the",
    "start": "2358680",
    "end": "2365160"
  },
  {
    "text": "Banas were ever involved right so that's how you can do a subraction in F let's say we have some",
    "start": "2365160",
    "end": "2372200"
  },
  {
    "text": "functions if I want to compose them I use the double angle bracket again so here's a new function I just the add",
    "start": "2372200",
    "end": "2377680"
  },
  {
    "text": "function glue together with a double function and I can just call this is a new function I can just call it with say five add one at six double it is 12 so",
    "start": "2377680",
    "end": "2385119"
  },
  {
    "text": "that's the answer right so I just basically glued two little functions together to make a bigger function uh",
    "start": "2385119",
    "end": "2390680"
  },
  {
    "text": "and I can do that with like three functions same kind of thing all right so this is you can see this it's really",
    "start": "2390680",
    "end": "2396440"
  },
  {
    "text": "easy in FS to do this it's like you can see the language is designed to make this",
    "start": "2396440",
    "end": "2402160"
  },
  {
    "text": "easy um let's look at it in C see how easy it is in C so in C here are our",
    "start": "2402160",
    "end": "2409319"
  },
  {
    "text": "functions and first of all we don't get the type inference so we have to Define",
    "start": "2409319",
    "end": "2414400"
  },
  {
    "text": "what the types of the functions are um and if you want to compose functions together we have to have a special",
    "start": "2414400",
    "end": "2420680"
  },
  {
    "text": "extension method called compose um and that extension method is not built into C so we have to write our",
    "start": "2420680",
    "end": "2427119"
  },
  {
    "text": "own it's not that hard to write but you know you could write code like",
    "start": "2427119",
    "end": "2432440"
  },
  {
    "text": "this but nobody would understand it um unless you were functional programmer already if we if you already knew",
    "start": "2432440",
    "end": "2438599"
  },
  {
    "text": "functional program this would be fine but I wouldn't write if I was in a c codebase i wouldn't write this kind of code because no what most of my",
    "start": "2438599",
    "end": "2444760"
  },
  {
    "text": "colleagues wouldn't be able to understand what I'm talking about so it's just not natural in cop C is not a functional first",
    "start": "2444760",
    "end": "2450560"
  },
  {
    "text": "language another thing you do in F A lot is another kind of composition is piping",
    "start": "2450560",
    "end": "2456079"
  },
  {
    "text": "so let's say you you know you have a function you add one to five and then you want to double it and then you want to square that um in typical languages",
    "start": "2456079",
    "end": "2464720"
  },
  {
    "text": "you have these nested parentheses and they get deeper and deeper and deeper and you kind of lose track uh these",
    "start": "2464720",
    "end": "2470359"
  },
  {
    "text": "nested function calls can get quite confusing right you lose where is where does it start I have to kind of go",
    "start": "2470359",
    "end": "2476520"
  },
  {
    "text": "down another an alternative way thinking about is is a pipeline so you you start with five and you feed that into the ad",
    "start": "2476520",
    "end": "2482599"
  },
  {
    "text": "function the output is six you take the six you feed it into the double function you take that and you feed it into the Square function so this pipeline",
    "start": "2482599",
    "end": "2488880"
  },
  {
    "text": "oriented model and I think it's just a lot easier to understand same same concept the same end result but it just",
    "start": "2488880",
    "end": "2495760"
  },
  {
    "text": "kind of conceptual way of thinking about it and in F you have the same pipeline so if you used to Unix the vertical pipe",
    "start": "2495760",
    "end": "2503119"
  },
  {
    "text": "right piping things on the on the on the command line same kind of thing except that the pipe character in F is a",
    "start": "2503119",
    "end": "2509200"
  },
  {
    "text": "vertical bar with a angle bracket so in F you tend to see the",
    "start": "2509200",
    "end": "2514760"
  },
  {
    "text": "bottom kind of code rather than the top kind of code the top kind of code is kind of ugly the bottom kind of code is",
    "start": "2514760",
    "end": "2519800"
  },
  {
    "text": "very much more common and you can do the same thing in C Define some functions Define a",
    "start": "2519800",
    "end": "2527280"
  },
  {
    "text": "pipe um helper function but again I would never write code like this in C so",
    "start": "2527280",
    "end": "2533400"
  },
  {
    "text": "you can do it so this is the difference this it's not that you can't I mean it's not that you can do it something in F",
    "start": "2533400",
    "end": "2538720"
  },
  {
    "text": "that you can't do in C and vice versa I mean obviously in theory they're equivalent but in practice it's you know you tend to do",
    "start": "2538720",
    "end": "2545599"
  },
  {
    "text": "things in a certain way because the language makes it easy the language C does not make it easy to do this kind of",
    "start": "2545599",
    "end": "2550800"
  },
  {
    "text": "functional programming stuff and it in F makes it easy okay here's another one parameterize all the",
    "start": "2550800",
    "end": "2557960"
  },
  {
    "text": "things so here is a function that prints the numbers 1 to 10 right this is F code",
    "start": "2557960",
    "end": "2566280"
  },
  {
    "text": "and um the first thing we do if we're an experienced program is say you know why have you hardcoded 10 what happens if",
    "start": "2566280",
    "end": "2572760"
  },
  {
    "text": "you want to print 1 to 11 or 2 to 17 something don't hardcode the numbers",
    "start": "2572760",
    "end": "2578400"
  },
  {
    "text": "pass the numbers in as a parameter right like that so it's second nature to us to",
    "start": "2578400",
    "end": "2584480"
  },
  {
    "text": "parameterize this kind of stuff don't hardcode something when you can pass it in as a parameter right second nature",
    "start": "2584480",
    "end": "2591480"
  },
  {
    "text": "now if you're a functional programmer you say well you've hardcoded the behavior as well it's like well what",
    "start": "2591480",
    "end": "2597480"
  },
  {
    "text": "happens if I don't want to print it what happens if I want to you know do something else with it right don't",
    "start": "2597480",
    "end": "2602880"
  },
  {
    "text": "hardcode the behavior parameterize it so a functional programmer would",
    "start": "2602880",
    "end": "2608680"
  },
  {
    "text": "parameterize the action that you take as well um you just make another parameter",
    "start": "2608680",
    "end": "2613839"
  },
  {
    "text": "and this is what you do with each thing in the list and now what we've made is we actually made a much more generic um",
    "start": "2613839",
    "end": "2619880"
  },
  {
    "text": "design because we've decoupled the action the list uh the action and the looping they're all now completely",
    "start": "2619880",
    "end": "2625280"
  },
  {
    "text": "separate so we actually got a more decoupled design in fact this is no longer just printing a list it could be doing anything with a list it's",
    "start": "2625280",
    "end": "2630400"
  },
  {
    "text": "iterating of a list and doing something it's easy in F because you can",
    "start": "2630400",
    "end": "2635520"
  },
  {
    "text": "just stick the parameter right there it's really easy to do you just type it and you don't have to worry about what type it is I what is the type of action",
    "start": "2635520",
    "end": "2641920"
  },
  {
    "text": "I don't know the compiler will figure it out for me so it's very easy to do um which is",
    "start": "2641920",
    "end": "2649079"
  },
  {
    "text": "why people do it again it's just a natural behavior in F to do this kind of thing let's look at a more complex example let's look at um say that we",
    "start": "2649079",
    "end": "2656200"
  },
  {
    "text": "have a product and a sum and obviously there's some duplicate code here um and don't repeat yourself",
    "start": "2656200",
    "end": "2664280"
  },
  {
    "text": "right so what can we do to not repeat ourselves so what we're going to do is we're going to notice that some of the",
    "start": "2664280",
    "end": "2671559"
  },
  {
    "text": "code is common the looping through the list is common code but the initial",
    "start": "2671559",
    "end": "2677040"
  },
  {
    "text": "value is different uh and the action that we take each time through the loop is different right so we have some stuff",
    "start": "2677040",
    "end": "2683359"
  },
  {
    "text": "which is in common and some stuff which are different so what we naturally do is we parameterize the stuff that's",
    "start": "2683359",
    "end": "2688920"
  },
  {
    "text": "different and keep the common code the same so here's how it would look in F the function that does this is called",
    "start": "2688920",
    "end": "2694520"
  },
  {
    "text": "fold um we have some parameters we have the action parameter and the initial value parameter and then the list of",
    "start": "2694520",
    "end": "2700000"
  },
  {
    "text": "things so we're going to say the total so far is the initial we're going to initialize it to the initial value I'm",
    "start": "2700000",
    "end": "2705720"
  },
  {
    "text": "going to use a mutable here just to make it look like the C there are other ways of doing it in F but just to make it look the same and for each item in the",
    "start": "2705720",
    "end": "2712440"
  },
  {
    "text": "list we're going to run the action on the total so far and the new item in the list that's going to give us another",
    "start": "2712440",
    "end": "2718240"
  },
  {
    "text": "total and at the end after we've gone through every the item we have the final total and that becomes the return value",
    "start": "2718240",
    "end": "2724599"
  },
  {
    "text": "so there you can see that we've got the common code uh we've got the initial value and we've got the paramed action",
    "start": "2724599",
    "end": "2731760"
  },
  {
    "text": "so this is how you'd write that code in in F and once you've done that you can go",
    "start": "2731760",
    "end": "2738240"
  },
  {
    "text": "back and you can write the product and the sum um in this way using this list fold function um and there's the initial",
    "start": "2738240",
    "end": "2745800"
  },
  {
    "text": "value and there's the action what's cool about doing this way is that we've got a lot more Focus now on what's the",
    "start": "2745800",
    "end": "2751920"
  },
  {
    "text": "difference in the original C code you know a lot of the code was the common code and it was hard to see what was",
    "start": "2751920",
    "end": "2758359"
  },
  {
    "text": "special about each Case by by making it parameterized it's very clear what the difference in the initial value is and",
    "start": "2758359",
    "end": "2764079"
  },
  {
    "text": "it's also very diff clear what the difference in the action through each loop is and the actual Loop logic is you",
    "start": "2764079",
    "end": "2770200"
  },
  {
    "text": "know something we don't care about if you're doing link this is the same as link aggregate this do fold is the same",
    "start": "2770200",
    "end": "2776240"
  },
  {
    "text": "as link Aggregate and in F there's lots and lots of collection functions like this and one of the challenges when you're",
    "start": "2776240",
    "end": "2782400"
  },
  {
    "text": "learning f is to memorize what all these functions are because there's like a hundred of them and they all slightly different definitely worth um spending",
    "start": "2782400",
    "end": "2789640"
  },
  {
    "text": "some time figuring out what they all do all right so there's a lot of topics",
    "start": "2789640",
    "end": "2795280"
  },
  {
    "text": "talk about functional design patterns I have whole talk about functional design patterns if you go to my website FP",
    "start": "2795280",
    "end": "2801440"
  },
  {
    "text": "patterns or just Google for functional design patterns and I think you'll come across the talk all right another thing",
    "start": "2801440",
    "end": "2806960"
  },
  {
    "text": "about FSH is this algebraic type system so FSH types are different from",
    "start": "2806960",
    "end": "2812920"
  },
  {
    "text": "classes okay A type is not a Class A type is more like a set and this is something very important",
    "start": "2812920",
    "end": "2820040"
  },
  {
    "text": "to kind of get into your head um so what is a type so if we have these functions there's a set of inputs and there a set",
    "start": "2820040",
    "end": "2826160"
  },
  {
    "text": "of outputs right so a type is just the name that you give to a set of things",
    "start": "2826160",
    "end": "2831760"
  },
  {
    "text": "that can be used as input so you have all these integers we're going to give it a name we're going to call it integer that's the name of the set all these",
    "start": "2831760",
    "end": "2838160"
  },
  {
    "text": "strings we're going to give it a name we call it string so the string type is just the list of every possible string",
    "start": "2838160",
    "end": "2843200"
  },
  {
    "text": "in the world right uh if you have a person type it's it's just a set of all",
    "start": "2843200",
    "end": "2848599"
  },
  {
    "text": "the possible people in the world if you have a fruit type it's a set of all possible fruit in the world right since",
    "start": "2848599",
    "end": "2855200"
  },
  {
    "text": "it's just a set it can be anything so you can have a set of functions so this is the set of all functions that work on",
    "start": "2855200",
    "end": "2862640"
  },
  {
    "text": "flute so this is each of these functions has a fruit input and a fruit output so it's a fruit to fruit function this is",
    "start": "2862640",
    "end": "2868160"
  },
  {
    "text": "the set of all fruit to fruit functions so we call that the fruit to fruit type",
    "start": "2868160",
    "end": "2873280"
  },
  {
    "text": "so anything can be anything can be a type now now because the types are just",
    "start": "2873280",
    "end": "2879240"
  },
  {
    "text": "data because it's just a set um there's no Behavior it's really easy to glue them together and you can use",
    "start": "2879240",
    "end": "2885640"
  },
  {
    "text": "composition just like you can for functions um and that's why it's called an algebraic typ system because just like an algebra where you can add things",
    "start": "2885640",
    "end": "2891760"
  },
  {
    "text": "and multiply things in the F type system you can add types and multiply",
    "start": "2891760",
    "end": "2897400"
  },
  {
    "text": "types so again we're going to use the Lego analogy now uh there's two ways of",
    "start": "2897400",
    "end": "2903920"
  },
  {
    "text": "gluing types together in F you can and them and you can all them okay and I'll",
    "start": "2903920",
    "end": "2909000"
  },
  {
    "text": "explain what that means in a second so that's basically two different things so the and what does it mean to and so",
    "start": "2909000",
    "end": "2914280"
  },
  {
    "text": "let's say you have fruit salad and a fruit salad is one each of an apple and a banana and a cherry okay now um that",
    "start": "2914280",
    "end": "2923359"
  },
  {
    "text": "is the common this kind of anding together a name is a first name and a last name an address is a street and a",
    "start": "2923359",
    "end": "2929520"
  },
  {
    "text": "city and a postcode whatever this is what you used to in all languages have a data stretch like this okay and in sharp",
    "start": "2929520",
    "end": "2937000"
  },
  {
    "text": "you'd write it like this okay so a fruit salad is a has an apple property and a banana property and a cherry property",
    "start": "2937000",
    "end": "2943440"
  },
  {
    "text": "all right that's something you're very familiar with the other way is something that you probably won't be familiar with",
    "start": "2943440",
    "end": "2949119"
  },
  {
    "text": "if if unless you've had experience with functional languages um often you want have a choice of things a snack is a",
    "start": "2949119",
    "end": "2955359"
  },
  {
    "text": "apple or a banana or a cherry it's a choice one of these things not all of them but one of them",
    "start": "2955359",
    "end": "2960480"
  },
  {
    "text": "only um and this is the kind of type that's not available in C and in F it's",
    "start": "2960480",
    "end": "2965720"
  },
  {
    "text": "called a discriminated Union type or a sum type and in this case you use the vertical bar so it's an apple or it's a",
    "start": "2965720",
    "end": "2972799"
  },
  {
    "text": "banana or it's a cherry okay these are really really useful types one of the",
    "start": "2972799",
    "end": "2978000"
  },
  {
    "text": "things I miss in cop that's in fop is like even forget about the functional program side this is fantastic and we'll",
    "start": "2978000",
    "end": "2984920"
  },
  {
    "text": "see why in a minute so let's look at an example of how you might do this so let's say you",
    "start": "2984920",
    "end": "2990680"
  },
  {
    "text": "have a business requirement that you're going to accept card pay uh uh payments for an e-commerce and you can or you",
    "start": "2990680",
    "end": "2997319"
  },
  {
    "text": "know you can accept cash you can accept a check or you can accept a credit card right so if there's cash there's no",
    "start": "2997319",
    "end": "3003240"
  },
  {
    "text": "other information if there's a check you need a check number if there's a credit card you need a credit card type and a",
    "start": "3003240",
    "end": "3008640"
  },
  {
    "text": "card number and so on so how would you implement this this these requirements well if you uh you know C",
    "start": "3008640",
    "end": "3016000"
  },
  {
    "text": "programmer you'd probably say well okay I'm going to start with some sort of Base Class or some interface or",
    "start": "3016000",
    "end": "3021799"
  },
  {
    "text": "something uh and then I'm going to create a cash class that inherits from it I'll create a check class CL with",
    "start": "3021799",
    "end": "3027079"
  },
  {
    "text": "some extra data that inherits from it I'll create a card class with some extra data that inherits from it and so on so that's probably the that's some of the",
    "start": "3027079",
    "end": "3033400"
  },
  {
    "text": "object oriented way using inheritance now that's fine except that",
    "start": "3033400",
    "end": "3039799"
  },
  {
    "text": "you've can now got four different files probably because you wouldn't put them all in the same file it's kind of kind of a little bit ugly let's look at how f",
    "start": "3039799",
    "end": "3046280"
  },
  {
    "text": "is very different so in F you build the system by composing smaller types so we",
    "start": "3046280",
    "end": "3052400"
  },
  {
    "text": "start off with some simple primitive types we're going to say the check number is an INT and a card number numbers of string so those are just",
    "start": "3052400",
    "end": "3058319"
  },
  {
    "text": "Primitives and then we're going to say that a card type is a Visa or a MasterCard so that's an all type a",
    "start": "3058319",
    "end": "3064880"
  },
  {
    "text": "choice type and then we're going to say a credit card is a card type and a card number and that uh multiplication that's",
    "start": "3064880",
    "end": "3072680"
  },
  {
    "text": "the pair that's the F symbol for Tuple that's a pair of those",
    "start": "3072680",
    "end": "3078720"
  },
  {
    "text": "things and now our payment method is a choice it's either cash or it's a check",
    "start": "3078720",
    "end": "3084079"
  },
  {
    "text": "or it's a card and if it's a check there's some extra information and if there's a card there's some extra",
    "start": "3084079",
    "end": "3090040"
  },
  {
    "text": "information and then we'll say okay the payment amount is another primitive type and then the currency is a choice",
    "start": "3090040",
    "end": "3096960"
  },
  {
    "text": "between euros and dollars and then finally our top level payment is going to be an amount plus a currency plus a",
    "start": "3096960",
    "end": "3105400"
  },
  {
    "text": "method so that's an and so what we've done here is we've built a complex type",
    "start": "3105400",
    "end": "3110680"
  },
  {
    "text": "in you know 20 lines of code uh without writing any real code this is a great way of doing kind of",
    "start": "3110680",
    "end": "3117000"
  },
  {
    "text": "design okay you can get this you can this on one piece of paper it's really nice so you can see it's a very",
    "start": "3117000",
    "end": "3122760"
  },
  {
    "text": "different way of thinking about how you construct your domain",
    "start": "3122760",
    "end": "3128079"
  },
  {
    "text": "model so this is one of the principles in F you Ed types as kind of executable",
    "start": "3128240",
    "end": "3133480"
  },
  {
    "text": "documentation so if I showed you this this is F code can you guess what domain",
    "start": "3133480",
    "end": "3139920"
  },
  {
    "text": "this is right just by looking at the code even if you weren't an F expert can you guess what this is I think think you can",
    "start": "3139920",
    "end": "3146960"
  },
  {
    "text": "you can say well it's something to do with playing cards right and you can see that a suit is a choice between a club",
    "start": "3146960",
    "end": "3152319"
  },
  {
    "text": "and a diamond and a heart and whatever a card is a pair a suit and a rank and a hand is a list of cards and a deck is a",
    "start": "3152319",
    "end": "3158079"
  },
  {
    "text": "list of cards and a player is a name and a hand and so on and so forth um those are the nouns you can also document",
    "start": "3158079",
    "end": "3163880"
  },
  {
    "text": "verbs so to deal is a function and uh you start off with a deck that's your",
    "start": "3163880",
    "end": "3170319"
  },
  {
    "text": "input the output is a new deck cuz the decks immutable so now you're going to have a deck with missing a card and you're also going to have a card on the",
    "start": "3170319",
    "end": "3176160"
  },
  {
    "text": "table so that's the output similarly when you pick up a card off the table the input is the is your hand plus the",
    "start": "3176160",
    "end": "3182559"
  },
  {
    "text": "card on the table that's the input and the output you have a new hand and the card on table's now disappeared because",
    "start": "3182559",
    "end": "3188480"
  },
  {
    "text": "everything's immutable so you've got a different hand it's not you haven't mutated your hand you have a different hand with this extra card in",
    "start": "3188480",
    "end": "3195400"
  },
  {
    "text": "it and it fits on one screen so it's documentation and it's also code this is",
    "start": "3195400",
    "end": "3200720"
  },
  {
    "text": "compilable code which is very nice here's another example of uh executable",
    "start": "3200720",
    "end": "3206040"
  },
  {
    "text": "documentation if I show you this and I say uh what payment methods are accepted it's like really obvious right",
    "start": "3206040",
    "end": "3214359"
  },
  {
    "text": "now with the O thing I'd have to look in four different files I'd have to find all the things that inherit it's not",
    "start": "3214359",
    "end": "3219960"
  },
  {
    "text": "really obvious just by looking at the code what payment methods are accepted I have to look at some documentation",
    "start": "3219960",
    "end": "3225839"
  },
  {
    "text": "probably so I think this is really nice if you're trying to do like domain design or something so another big topic I don't",
    "start": "3225839",
    "end": "3232960"
  },
  {
    "text": "really have enough time I have a whole talk on domain design and designing with",
    "start": "3232960",
    "end": "3238160"
  },
  {
    "text": "types and I am doing that talk this afternoon um I also have a book coming",
    "start": "3238160",
    "end": "3243480"
  },
  {
    "text": "out soon it's in Early Access right now uh it should be out in a couple of months um so that's basically this topic",
    "start": "3243480",
    "end": "3252160"
  },
  {
    "text": "right interactivity the last thing and I've got a few minutes left before I forget I just want to say that don't",
    "start": "3252160",
    "end": "3257200"
  },
  {
    "text": "forget if you're interested in F or any other functional language there is a lab",
    "start": "3257200",
    "end": "3263200"
  },
  {
    "text": "where anyone can show up and you can ask questions of the functional track people so the functional track I think is in",
    "start": "3263200",
    "end": "3268319"
  },
  {
    "text": "this room all day and all tomorrow and you know if you're interested in functional programming just stay in this",
    "start": "3268319",
    "end": "3273839"
  },
  {
    "text": "room and if you got questions like I say come to the the functional lab and you can ask questions of people and we can",
    "start": "3273839",
    "end": "3279280"
  },
  {
    "text": "do code demos and stuff um and there was something else I was going to say can't",
    "start": "3279280",
    "end": "3284680"
  },
  {
    "text": "remember was now right interactivity so I got a few minutes left and let me just show you some interactivity by the way",
    "start": "3284680",
    "end": "3292799"
  },
  {
    "text": "FSH um fun is a key word in F I just want to point that",
    "start": "3292799",
    "end": "3298000"
  },
  {
    "text": "out I'm not I'm not trying to imply anything just purely purely by",
    "start": "3298000",
    "end": "3304119"
  },
  {
    "text": "coincidence one thing about F I think it is a fun language I mean I don't think anyone says oh I love programming C it's",
    "start": "3304119",
    "end": "3310960"
  },
  {
    "text": "fantastic or J you know Java I think the thing about functional language is because it's concise it feels like a",
    "start": "3310960",
    "end": "3317599"
  },
  {
    "text": "scripting language so you feel like you can just like type stuff and it kind of works which is very nice so I am going",
    "start": "3317599",
    "end": "3323599"
  },
  {
    "text": "to switch to visual studio if you can see see that okay yep so let me show you",
    "start": "3323599",
    "end": "3329359"
  },
  {
    "text": "some code so here's a here's here's some real F code so this is in F you have the",
    "start": "3329359",
    "end": "3335720"
  },
  {
    "text": "this is f script but in F you can actually like highlight code and you can run it interactively",
    "start": "3335720",
    "end": "3342880"
  },
  {
    "text": "I'm going to say execute in interactive and what happens is it pops up down here at the bottom I don't know if you can",
    "start": "3342880",
    "end": "3348280"
  },
  {
    "text": "see that um so basically it's run this piece of code just this one St bit of code and I can so I can interactively",
    "start": "3348280",
    "end": "3355520"
  },
  {
    "text": "play with it so that's interesting I wonder what happens there and I can say you know uh add",
    "start": "3355520",
    "end": "3361960"
  },
  {
    "text": "one to five and it's like it doesn't have to compile I can just like run it Alt Enter and that's six so that's very",
    "start": "3362319",
    "end": "3370440"
  },
  {
    "text": "nice so here's here's a classic thing think of a number uh this is a game think of a number add one to it Square",
    "start": "3370440",
    "end": "3376920"
  },
  {
    "text": "it subtract one divide by the number you first thought of subtract the number you first thought of and the answer is two",
    "start": "3376920",
    "end": "3382280"
  },
  {
    "text": "okay so this is kind of a children's thing now in F this is how you'd write you say Okay add one square it subtract",
    "start": "3382280",
    "end": "3390520"
  },
  {
    "text": "one divide by the number you first thought of subtract by the number you first thought of okay there's our",
    "start": "3390520",
    "end": "3396799"
  },
  {
    "text": "functions and then we just pipe them so you start with the number you first thought of you pipe it into add one you",
    "start": "3396799",
    "end": "3403480"
  },
  {
    "text": "pipe it into square it you pipe that into you know so this code looks very",
    "start": "3403480",
    "end": "3408559"
  },
  {
    "text": "much like the requirements this piping model is great for this kind of thing it kind of looks like your code so and what",
    "start": "3408559",
    "end": "3415280"
  },
  {
    "text": "I can do is then like run it and see going to highlight everything and there it is notice that I didn't specify what",
    "start": "3415280",
    "end": "3423000"
  },
  {
    "text": "kind of function it was and it's figured out that you pass an integer and it returns an integer that's nice okay",
    "start": "3423000",
    "end": "3428520"
  },
  {
    "text": "think of a number if I pass in 10 hey the answer is two if I pass an 11 the",
    "start": "3428520",
    "end": "3435119"
  },
  {
    "text": "answer is two um and you know because it's so easy um and let's",
    "start": "3435119",
    "end": "3442039"
  },
  {
    "text": "say log it",
    "start": "3442039",
    "end": "3446359"
  },
  {
    "text": "and then I'm going to return so here I'm going to use a semicolon to",
    "start": "3449880",
    "end": "3455920"
  },
  {
    "text": "uh what's the problem Oh I need to pass the X in there there you go right and then I so this is how easy",
    "start": "3455920",
    "end": "3462280"
  },
  {
    "text": "you can like I want you know it didn't tell me what the original number was so I'm going to do this I'm just going to stick it in the pipeline I got a new new",
    "start": "3462280",
    "end": "3469799"
  },
  {
    "text": "little help function that logs say input that's that so I can play with",
    "start": "3469799",
    "end": "3475000"
  },
  {
    "text": "interactively gonna go down here highlight it all again and try it",
    "start": "3475000",
    "end": "3480440"
  },
  {
    "text": "again and now this time it says a it's because I got a bug in my code because I didn't say this was an",
    "start": "3480440",
    "end": "3487599"
  },
  {
    "text": "integer there we go so the nice thing about interact I didn't have to write a unit",
    "start": "3487599",
    "end": "3493119"
  },
  {
    "text": "test I could like play with it and find a bug all right so by playing with it I",
    "start": "3493119",
    "end": "3498359"
  },
  {
    "text": "already found a bug and it's like it took me seconds to fix it so this feels like doing python or or JavaScript well",
    "start": "3498359",
    "end": "3504280"
  },
  {
    "text": "maybe not JavaScript but it certainly feels like python to me me um very nice very easy to work",
    "start": "3504280",
    "end": "3509839"
  },
  {
    "text": "with um I'll do one more quickly and I got about a minute left so this is a",
    "start": "3509839",
    "end": "3515559"
  },
  {
    "text": "Roman digit converter so I'm going to define a type um Roman digit so I'm going to use a",
    "start": "3515559",
    "end": "3521599"
  },
  {
    "text": "choice and I'm going to say okay a Roman number is a list of digits and to convert a digit to an INT",
    "start": "3521599",
    "end": "3528880"
  },
  {
    "text": "I'm going to say well if it's an i that's a one and if it's a v it's a five and so on and then I'm just going to I'm",
    "start": "3528880",
    "end": "3535400"
  },
  {
    "text": "not going to really go through the code but I'm just showing you that you can this is what F code looks like I'm going to map it and I'm going to sum",
    "start": "3535400",
    "end": "3541720"
  },
  {
    "text": "it so here's my digits and then the answer is 16 and if I change the digits",
    "start": "3541720",
    "end": "3547960"
  },
  {
    "text": "to be uh x x then the answer is now 26 and I'll put",
    "start": "3547960",
    "end": "3554880"
  },
  {
    "text": "another one in here and it's now 27 so you can see it's",
    "start": "3554880",
    "end": "3560880"
  },
  {
    "text": "really easy to play around with this is one of the like I say it's a fun language to work with right so that's",
    "start": "3560880",
    "end": "3566440"
  },
  {
    "text": "the demo like I said it feels like a scripting language a lot of fun to work with and that is it thanks very much um",
    "start": "3566440",
    "end": "3573520"
  },
  {
    "text": "the slides and the video will be up on my website in a couple of weeks under",
    "start": "3573520",
    "end": "3578760"
  },
  {
    "text": "cop um if you want fop Consulting we have a consulting company F works most",
    "start": "3578760",
    "end": "3583880"
  },
  {
    "text": "importantly if you want to know more about FSH f.org is the way place you should go so thanks very much and don't",
    "start": "3583880",
    "end": "3590640"
  },
  {
    "text": "forget to uh fill in the thing when you go out thanks so much",
    "start": "3590640",
    "end": "3596440"
  }
]