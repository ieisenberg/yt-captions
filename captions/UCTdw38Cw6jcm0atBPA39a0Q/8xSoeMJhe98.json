[
  {
    "text": "right it is 1500 hours um who would like to learn about some property-based testing",
    "start": "179",
    "end": "6240"
  },
  {
    "text": "yes that's what I like to hear so um in case we have a map which is most of you I will admit",
    "start": "6240",
    "end": "12420"
  },
  {
    "text": "um my name is Lucy there's a picture of me on a good day this is me on a Friday of having been at conference for three",
    "start": "12420",
    "end": "18180"
  },
  {
    "text": "days uh so I prefer pronouns she they um I work at a place called Coda I build",
    "start": "18180",
    "end": "24960"
  },
  {
    "text": "front-end stuff Kodak does Financial uh like Financial software apis for things",
    "start": "24960",
    "end": "31500"
  },
  {
    "text": "like QuickBooks and xero if you're in the market of building Financial Integrations let me know I might be able",
    "start": "31500",
    "end": "37920"
  },
  {
    "text": "to hook you up with some good apis um so I currently work in front end land",
    "start": "37920",
    "end": "43559"
  },
  {
    "text": "using typescript and react but previously I worked in.net and angular unfortunately",
    "start": "43559",
    "end": "51420"
  },
  {
    "text": "um I love functional programming I run the f-shock group at Kodak um who here likes F sharp",
    "start": "51600",
    "end": "58379"
  },
  {
    "text": "I don't know wow that's amazing that's so much better than I expected I",
    "start": "58379",
    "end": "63660"
  },
  {
    "text": "love functional programming if you want to come talk to me about functional programming um that would be fantastic",
    "start": "63660",
    "end": "69479"
  },
  {
    "text": "um if you want to talk to me about not work things that's me on a boat um I like making things I love knitting",
    "start": "69479",
    "end": "76439"
  },
  {
    "text": "only hats and scarves because jumpers are too complicated for me um I like sewing I like making myself",
    "start": "76439",
    "end": "83520"
  },
  {
    "text": "outfits um I love making PowerPoints I spent way too much time making this PowerPoint so",
    "start": "83520",
    "end": "89460"
  },
  {
    "text": "I do hope you enjoy um I went to RuPaul's dragcon UK early this month and I met Lawrence Cheney if",
    "start": "89460",
    "end": "96180"
  },
  {
    "text": "any of you know who that is and um I went to smell bad last year and I saw a polar bear and I definitely took this",
    "start": "96180",
    "end": "101939"
  },
  {
    "text": "photo I promise um so someone who is much cleverer than",
    "start": "101939",
    "end": "107400"
  },
  {
    "text": "me told me that I should put the conclusion at the start so people know what we're aiming for so",
    "start": "107400",
    "end": "112560"
  },
  {
    "text": "um conclusion property-based testing is a technique for testing statements of the type for all X that satisfy some",
    "start": "112560",
    "end": "119159"
  },
  {
    "text": "precondition some predicate will hold it can give you confidence that your",
    "start": "119159",
    "end": "124680"
  },
  {
    "text": "code behaves correctly across a wide range of inputs and it can help you find bugs in your",
    "start": "124680",
    "end": "130259"
  },
  {
    "text": "code resulting from inputs you never would have thought to test and and this technique can be used",
    "start": "130259",
    "end": "135900"
  },
  {
    "text": "alongside existing unit tests and if you really want to you could use it tomorrow but I have better things to do on a",
    "start": "135900",
    "end": "141180"
  },
  {
    "text": "Saturday so questions started who here knows what property-based testing is",
    "start": "141180",
    "end": "148760"
  },
  {
    "text": "fantastic so I've only got a few people part of my hecklers know what it is but um that means I can lie to you tell you",
    "start": "149280",
    "end": "156720"
  },
  {
    "text": "about this wonderful thing that doesn't exist yes",
    "start": "156720",
    "end": "162020"
  },
  {
    "text": "trust me I made this up at Virginia so I came up with this myself um so let's jump straight in let's go",
    "start": "162319",
    "end": "168480"
  },
  {
    "text": "for a scenario um I am a senior developer and you have joined my company as an intern",
    "start": "168480",
    "end": "173760"
  },
  {
    "text": "um this is you you're looking very cute on your first day of work um in my company we use F-sharp",
    "start": "173760",
    "end": "180480"
  },
  {
    "text": "functional programming and test driven development who likes functional programming who likes test driven development",
    "start": "180480",
    "end": "188000"
  },
  {
    "text": "um so we're going to write a list reverse function for don't ask me why but we're doing it so I give you the",
    "start": "192000",
    "end": "198780"
  },
  {
    "text": "skeleton for it um and you kind of look at it you go oh my gosh it's F sharp I don't know what F",
    "start": "198780",
    "end": "204900"
  },
  {
    "text": "sharp is so let's just talk through it quickly so I Define a function called list reverse",
    "start": "204900",
    "end": "211800"
  },
  {
    "text": "it takes a single argument which is a list of integers it will return a list of integers",
    "start": "211800",
    "end": "220739"
  },
  {
    "text": "and the implementation will go here for now of just making it throw an error we'll look at it later",
    "start": "220739",
    "end": "227099"
  },
  {
    "text": "um so it's not so scary who thinks I've sharp scary good",
    "start": "227099",
    "end": "233459"
  },
  {
    "text": "so what should we do next we might want to jump straight in and be like yeah let's implement the function but no we do test driven development here",
    "start": "233459",
    "end": "240540"
  },
  {
    "text": "um I love test driven development it's great let's follow the principles where we'll write the tests first",
    "start": "240540",
    "end": "247260"
  },
  {
    "text": "um I'm assuming you all know what test driven development is but the first thing we'll do we'll write",
    "start": "247260",
    "end": "252780"
  },
  {
    "text": "a test so this is a test for our code it's written in F sharp it's using a new SS unit again oh there you go have a bit",
    "start": "252780",
    "end": "260699"
  },
  {
    "text": "of time to read the slide",
    "start": "260699",
    "end": "263540"
  },
  {
    "text": "thank you now tell me who actually read the Slime who just watched the line",
    "start": "266360",
    "end": "274160"
  },
  {
    "text": "[Laughter] I don't know what FS what F sharp",
    "start": "274470",
    "end": "280320"
  },
  {
    "text": "testing looks like here's just going over it quickly so we're all on the same page so",
    "start": "280320",
    "end": "285720"
  },
  {
    "text": "using end unit and Fs units pre-standard library for net testing FS unit just",
    "start": "285720",
    "end": "291840"
  },
  {
    "text": "gives a bit of syntactic sugar on top so it's nice and friendly to write in F sharp",
    "start": "291840",
    "end": "297419"
  },
  {
    "text": "um we've got the name of our test which is written in double back ticks and technically this is a variable which has got a name with a space in it but you",
    "start": "297419",
    "end": "304740"
  },
  {
    "text": "know um we're setting up our test so one thing you might have noticed F sharp",
    "start": "304740",
    "end": "310380"
  },
  {
    "text": "does use semicolon as a list delimiter and there's nothing you can do about it you just have to accept that fact",
    "start": "310380",
    "end": "318020"
  },
  {
    "text": "um so we're making a list one two three and we're going to say oh I'm going to reverse the list and next I'm going to",
    "start": "318300",
    "end": "324360"
  },
  {
    "text": "assert it's it is as is written you don't need to worry about the funny symbol I'm just",
    "start": "324360",
    "end": "330000"
  },
  {
    "text": "saying the reverse list should equal three two one and you're like cool that's not so bad",
    "start": "330000",
    "end": "336360"
  },
  {
    "text": "this is great work is going great on my first day we run the test and it fails as we",
    "start": "336360",
    "end": "342960"
  },
  {
    "text": "expect because there's no implementation let's add another test for our Edge case of the empty list",
    "start": "342960",
    "end": "349620"
  },
  {
    "text": "um so let's implement picture mostly unrelated just making good use of my",
    "start": "349620",
    "end": "355259"
  },
  {
    "text": "stock image Library access so I'll give you a bit of time to think",
    "start": "355259",
    "end": "361320"
  },
  {
    "text": "how are you going to implement this function",
    "start": "361320",
    "end": "365539"
  },
  {
    "text": "together so [Music] the answer is of course",
    "start": "370740",
    "end": "376320"
  },
  {
    "text": "foreign you do this",
    "start": "376320",
    "end": "381680"
  },
  {
    "text": "so if anyone who doesn't know they're sharp the translation for this is if the",
    "start": "382699",
    "end": "388080"
  },
  {
    "text": "list is one two three then return the list three two one otherwise just return the empty list",
    "start": "388080",
    "end": "394080"
  },
  {
    "text": "so you run the test they pass which means tester and development we've done it",
    "start": "394080",
    "end": "399240"
  },
  {
    "text": "right we've written the test we've written our code everything passes great I think it's time for a nap and to",
    "start": "399240",
    "end": "404580"
  },
  {
    "text": "prepare your letter to get promoted to senior software developer because you are ready",
    "start": "404580",
    "end": "410940"
  },
  {
    "text": "so sometime later in the dead of night",
    "start": "410940",
    "end": "416699"
  },
  {
    "text": "I come along and I go I try and run less reverse in the list six seven eight and I get an empty list and then I'm just",
    "start": "416699",
    "end": "423120"
  },
  {
    "text": "there being like what on Earth's going on why is this function not working I should get the list eight seven six I",
    "start": "423120",
    "end": "428400"
  },
  {
    "text": "get a limited list so I come back and I say okay I'm gonna write a new unit test I'm going to say",
    "start": "428400",
    "end": "434639"
  },
  {
    "text": "if I reverse the list six seven eight I should get the list eight seven six",
    "start": "434639",
    "end": "439680"
  },
  {
    "text": "it fails as I expect I give it back to you and you have to uh you know",
    "start": "439680",
    "end": "444900"
  },
  {
    "text": "go I should update my implementation foreign",
    "start": "444900",
    "end": "449960"
  },
  {
    "text": "it is of course if we're given the list six seven eight then please giving back the list eight",
    "start": "452099",
    "end": "458340"
  },
  {
    "text": "seven six um I'm sure you're sat there thinking this is ridiculous no one would do this this",
    "start": "458340",
    "end": "465000"
  },
  {
    "text": "is stupid and then I remembered I'm standing up here I'm a developer I'm",
    "start": "465000",
    "end": "470580"
  },
  {
    "text": "going to convince you this is in fact the logical thing to do",
    "start": "470580",
    "end": "475580"
  },
  {
    "text": "so please don't read this page it is from test driven development page on Wikipedia uh we're just going to zoom",
    "start": "476960",
    "end": "483720"
  },
  {
    "text": "into this bit number three so part of the test driven development cycle you write the test you check they fail and",
    "start": "483720",
    "end": "489419"
  },
  {
    "text": "then you write the simplest code that passes the new test and",
    "start": "489419",
    "end": "495240"
  },
  {
    "text": "okay my example it was list reversal but let's you didn't know it was a traversal let's",
    "start": "495240",
    "end": "500819"
  },
  {
    "text": "say you were just given this mystery function that you had to implement and you were just given these three tests as",
    "start": "500819",
    "end": "506699"
  },
  {
    "text": "a specification",
    "start": "506699",
    "end": "509419"
  },
  {
    "text": "so what is the simplest implementation I mean it is of course a match statement",
    "start": "513919",
    "end": "522300"
  },
  {
    "text": "we are making assumptions that anything that isn't specified we're just returning an empty list we're just",
    "start": "522300",
    "end": "527820"
  },
  {
    "text": "returning some kind of sensible default we could also throw an exception if we wanted to we can return anything really",
    "start": "527820",
    "end": "533339"
  },
  {
    "text": "if anyone studied C plus plus at University and had to look at undefined behavior and scarred me for life",
    "start": "533339",
    "end": "541320"
  },
  {
    "text": "technically speaking anything other than the specification is undefined Behavior so we can do what we want",
    "start": "541320",
    "end": "547940"
  },
  {
    "text": "so in order to fully specify our reversal function we could just add more test cases",
    "start": "548100",
    "end": "555300"
  },
  {
    "text": "but then someone could just come along and add more cases to the match statement",
    "start": "555300",
    "end": "561260"
  },
  {
    "text": "so this is from our programmer humor the uh finest subreddit under the sun",
    "start": "565399",
    "end": "573380"
  },
  {
    "text": "um so clearly this isn't the right approach um I don't know if someone",
    "start": "573720",
    "end": "579120"
  },
  {
    "text": "clever than me is in the audience and can tell me how many unique integer lists you can get on a computer with some",
    "start": "579120",
    "end": "585720"
  },
  {
    "text": "amount of memory like please let me know but there's a lot of lists like that would be a very very long function and",
    "start": "585720",
    "end": "592080"
  },
  {
    "text": "I'm really lazy so let's take a step back and go well how do we actually Define a function",
    "start": "592080",
    "end": "600200"
  },
  {
    "text": "um so we've defined Its Behavior Define what it does so I could say okay well let's reversal I'm just rearranging the",
    "start": "600480",
    "end": "607380"
  },
  {
    "text": "items to be backwards that's fine right but all I've really done in this case is",
    "start": "607380",
    "end": "614820"
  },
  {
    "text": "said well backwards in reversal are just synonyms of each other so me describing them as",
    "start": "614820",
    "end": "620399"
  },
  {
    "text": "oh reversal is putting it all backwards it doesn't make any like doesn't make any sense",
    "start": "620399",
    "end": "626580"
  },
  {
    "text": "so what would happen if you tried to explain less reversal to an alien who for some reason knew perfect English but",
    "start": "626580",
    "end": "634380"
  },
  {
    "text": "didn't know what list reversing was",
    "start": "634380",
    "end": "638300"
  },
  {
    "text": "any ideas",
    "start": "641160",
    "end": "643819"
  },
  {
    "text": "so what we can do instead is we can um Define some properties",
    "start": "647700",
    "end": "652980"
  },
  {
    "text": "The Pride surprise what is the property that is for all X satisfy some precondition some predicate will hold",
    "start": "652980",
    "end": "661500"
  },
  {
    "text": "so what are the properties of less reversal well one of them is for all lists reversing it twice will give you",
    "start": "661500",
    "end": "667019"
  },
  {
    "text": "the same list for a non-empty list if you reverse it the first item will be the last item",
    "start": "667019",
    "end": "675480"
  },
  {
    "text": "likewise last item will be the first item in the reverse list",
    "start": "675480",
    "end": "681240"
  },
  {
    "text": "also if you have a list there's a palindrome you can reverse it and you'll get an equal list and I'm sure there are more but you get",
    "start": "681240",
    "end": "688019"
  },
  {
    "text": "the point how does this help us why am I",
    "start": "688019",
    "end": "694920"
  },
  {
    "text": "identifying these properties you can't possibly test it for every single input to this function so what",
    "start": "694920",
    "end": "700620"
  },
  {
    "text": "we're going to do instead we're going to do a mathematical proof hands up if you've ever mathematically",
    "start": "700620",
    "end": "707519"
  },
  {
    "text": "proved the properties of your code",
    "start": "707519",
    "end": "711200"
  },
  {
    "text": "I I don't know about you I'm a programmer I'm nowhere near clever enough to write",
    "start": "713640",
    "end": "719760"
  },
  {
    "text": "these proofs but I was made to do at University and it was really bloody hard and I always got it wrong and I think if",
    "start": "719760",
    "end": "726000"
  },
  {
    "text": "I had to mathematically prove all my code was correct then you know I'd write 100 lines a year",
    "start": "726000",
    "end": "731519"
  },
  {
    "text": "as a generous estimate so there must be a better way and um",
    "start": "731519",
    "end": "737519"
  },
  {
    "text": "I would like to just introduce something called property based testing the surprise of the century",
    "start": "737519",
    "end": "744660"
  },
  {
    "text": "I'm sure you've never heard of this phrase before but you will by the end of it you will to understand exactly what it is",
    "start": "744660",
    "end": "750839"
  },
  {
    "text": "so property-based testing unsurprisingly we can use it to test properties",
    "start": "750839",
    "end": "756420"
  },
  {
    "text": "for all X that satisfy some precondition some predicate will hold",
    "start": "756420",
    "end": "761820"
  },
  {
    "text": "in this example we're going to check that given a list of integers if I reverse it twice I get the original list",
    "start": "761820",
    "end": "769740"
  },
  {
    "text": "so we can do an implementation of this with a library called FS check so fscheck is",
    "start": "769740",
    "end": "776279"
  },
  {
    "text": "a.net Library it is called FS check it is an F-sharp Library it is intended",
    "start": "776279",
    "end": "781860"
  },
  {
    "text": "fresh shot but it's a.net Library so you can use it for c-sharp Stuff isn't.net amazing",
    "start": "781860",
    "end": "789980"
  },
  {
    "text": "so a property-based test in FS check will look something a bit like this",
    "start": "790440",
    "end": "796880"
  },
  {
    "text": "so let's just go through the bits of what's Happening first we write a function to specify the",
    "start": "797820",
    "end": "803160"
  },
  {
    "text": "property I always call mine check function because I am very creative",
    "start": "803160",
    "end": "809060"
  },
  {
    "text": "then we specify what we are given with an argument to this check function so",
    "start": "809820",
    "end": "815399"
  },
  {
    "text": "given a list of integers means that my argument might function it's going to have one argument which is",
    "start": "815399",
    "end": "821820"
  },
  {
    "text": "a single integer list then we specify how to manipulate the inputs in this case I am going to run it",
    "start": "821820",
    "end": "829019"
  },
  {
    "text": "through the F sharp standard Library list reversal function twice and then I'm going to assert with my",
    "start": "829019",
    "end": "836459"
  },
  {
    "text": "standard Library surgeons which is just should equal in this case and finally I just tell FS check to run",
    "start": "836459",
    "end": "843000"
  },
  {
    "text": "the test and magic it works",
    "start": "843000",
    "end": "849320"
  },
  {
    "text": "so let's run it let's look at the output great we've got",
    "start": "849959",
    "end": "855300"
  },
  {
    "text": "a green tick cool end of end of story end of story brilliant fantastic um",
    "start": "855300",
    "end": "861120"
  },
  {
    "text": "let's look at actually what's doing under the hood um you might have seen in the input it says here past 100 tests",
    "start": "861120",
    "end": "867660"
  },
  {
    "text": "so if we put in a bit of vlogging so we're",
    "start": "867660",
    "end": "873899"
  },
  {
    "text": "just going to log what list it's giving us we can see that FS checks actually running our test and it's generating many different lists",
    "start": "873899",
    "end": "881279"
  },
  {
    "text": "for us and we're going to put those lists into the property check if it actually holds",
    "start": "881279",
    "end": "887339"
  },
  {
    "text": "the input starts small there is a kind of formal way of saying small but",
    "start": "887339",
    "end": "893279"
  },
  {
    "text": "informally understand you know an empty list is smaller than a list of one item",
    "start": "893279",
    "end": "899399"
  },
  {
    "text": "they start small and they get bigger as it progresses so",
    "start": "899399",
    "end": "904980"
  },
  {
    "text": "the way FS check generates these inputs is it's trying to find edge cases really quickly for you so for example it will",
    "start": "904980",
    "end": "910980"
  },
  {
    "text": "start with an empty list if you were testing numbers it will start with like zero one minus one you",
    "start": "910980",
    "end": "918240"
  },
  {
    "text": "know Infinity not a number all the crazy numbers you want if you're",
    "start": "918240",
    "end": "923699"
  },
  {
    "text": "testing strings it will generate like empty string random Unicode string loads and loads of stuff it generates",
    "start": "923699",
    "end": "930720"
  },
  {
    "text": "try and find your edge cases really quickly um on the flip side in the case of a",
    "start": "930720",
    "end": "936959"
  },
  {
    "text": "failure what happens so let's write a test reverse in the list gives the original list and you know I pop up and I go well",
    "start": "936959",
    "end": "944880"
  },
  {
    "text": "clearly it won't work for non-palindromic lists and then you know I run it and then oh",
    "start": "944880",
    "end": "951240"
  },
  {
    "text": "look a little red little red box oh that doesn't actually work looking at the output it gives us",
    "start": "951240",
    "end": "958740"
  },
  {
    "text": "foreign the first input it ran that actually",
    "start": "958740",
    "end": "963959"
  },
  {
    "text": "caused the failure and then it's done something called shrinking which is like I'll just hand",
    "start": "963959",
    "end": "969420"
  },
  {
    "text": "wave it away um it gives you a minimal input to cause a failure in this case the fact that we have a list that is",
    "start": "969420",
    "end": "976019"
  },
  {
    "text": "just zero and one is like the minimal item to cause a failure if you want to",
    "start": "976019",
    "end": "981420"
  },
  {
    "text": "um investigate this bit more you could just write a single unit test with this zero one and you can debug it it's great",
    "start": "981420",
    "end": "989600"
  },
  {
    "text": "meat",
    "start": "991260",
    "end": "994260"
  },
  {
    "text": "so let's think about addition like who can confidently stand up and tell me what is addition other than one plus one",
    "start": "996300",
    "end": "1002720"
  },
  {
    "text": "equals two go for it do you want to yeah",
    "start": "1002720",
    "end": "1009759"
  },
  {
    "text": "binary function oh sorry it's a function that takes some number of let's say for example two",
    "start": "1010459",
    "end": "1017300"
  },
  {
    "text": "um and it is I want to say it video but it's a you can do it either way yeah",
    "start": "1017300",
    "end": "1023720"
  },
  {
    "text": "um and you get out a single number at the end and that number",
    "start": "1023720",
    "end": "1030459"
  },
  {
    "text": "I know how to give you like the group yeah",
    "start": "1030579",
    "end": "1035600"
  },
  {
    "text": "um so Let's Pretend again um I know this isn't the UFO talk but um you know there's a",
    "start": "1035600",
    "end": "1041480"
  },
  {
    "text": "million we can do a notch it again oh no no wrong button wrong button oh no oh",
    "start": "1041480",
    "end": "1046520"
  },
  {
    "text": "well um yeah so if you go on to the dark place of maths Wikipedia and you look up",
    "start": "1046520",
    "end": "1052400"
  },
  {
    "text": "Edition and you will find this lovely little section which is called properties",
    "start": "1052400",
    "end": "1057559"
  },
  {
    "text": "um conveniently is exactly the kind of thing we can test to see if our function that takes two",
    "start": "1057559",
    "end": "1062960"
  },
  {
    "text": "numbers and gives us another number is addition so for addition we have commutativity that is a plus b equals B",
    "start": "1062960",
    "end": "1069140"
  },
  {
    "text": "plus a we've got associativity which is a plus b plus C is the same as",
    "start": "1069140",
    "end": "1076460"
  },
  {
    "text": "a plus b plus c and then we have the identity element of zero so if you take something and add",
    "start": "1076460",
    "end": "1082940"
  },
  {
    "text": "zero to it you get the same thing so if we for some reason I don't really know why decided to write our own ad",
    "start": "1082940",
    "end": "1089480"
  },
  {
    "text": "function we could prove there is addition by just testing these properties so for example I will take my",
    "start": "1089480",
    "end": "1097460"
  },
  {
    "text": "two inputs and swap them around and if this test holds I can say it's commutative not a proof",
    "start": "1097460",
    "end": "1104780"
  },
  {
    "text": "not a proof but we can use property-based testing to just give us a very high",
    "start": "1104780",
    "end": "1111020"
  },
  {
    "text": "um confidence that it is commutative we can test associativity by doing",
    "start": "1111020",
    "end": "1117320"
  },
  {
    "text": "pretty much the same thing so we can apply our function to two of the variables two of the inputs first and",
    "start": "1117320",
    "end": "1123679"
  },
  {
    "text": "then the other two inputs see if we get the same answer and we can check the zero identity so",
    "start": "1123679",
    "end": "1129980"
  },
  {
    "text": "just take anything and add zero to it you should get the same thing so",
    "start": "1129980",
    "end": "1135679"
  },
  {
    "text": "this isn't a proof dial function is addition but as I said before I'm not a",
    "start": "1135679",
    "end": "1142520"
  },
  {
    "text": "mathematician I'm a programmer I've never done a mathematical proof of any of my code works but I could run this",
    "start": "1142520",
    "end": "1148580"
  },
  {
    "text": "and I can be like I'm pretty sure it's Edition and that's good enough for me",
    "start": "1148580",
    "end": "1153980"
  },
  {
    "text": "um so you are there and you look at this and you go meow meow because you're a cat and you can't talk",
    "start": "1153980",
    "end": "1159860"
  },
  {
    "text": "which obviously translates to I understand Edition so much more now",
    "start": "1159860",
    "end": "1165940"
  },
  {
    "text": "and this is just showing that with property-based testing you can analyze your functions and understand them a bit",
    "start": "1166160",
    "end": "1172340"
  },
  {
    "text": "better so anyone who sat there was like oh Jesus Christ I don't care about addition",
    "start": "1172340",
    "end": "1177799"
  },
  {
    "text": "I'm not a mathematician I just I know one plus one is two and that's fine for me um I understand proving that our",
    "start": "1177799",
    "end": "1184940"
  },
  {
    "text": "addition is Edition is a bit abstract but let's have a look at it in real life where you might actually want to use it",
    "start": "1184940",
    "end": "1192380"
  },
  {
    "text": "so scenario number one you may want to use it is there might be some Randomness in your code",
    "start": "1192380",
    "end": "1198440"
  },
  {
    "text": "um so I have used this before I had a scenario where I had some code that given a",
    "start": "1198440",
    "end": "1205580"
  },
  {
    "text": "single list it will randomly remove one element from the list and it will give you the rest of the list",
    "start": "1205580",
    "end": "1212720"
  },
  {
    "text": "how on Earth are you meant to unit test this you you expect to get something",
    "start": "1212720",
    "end": "1217940"
  },
  {
    "text": "different every single time you can't write a unit test for it other than just fixing the random input",
    "start": "1217940",
    "end": "1224419"
  },
  {
    "text": "but then you don't know if it's actually working it might just always return the element four how do you know",
    "start": "1224419",
    "end": "1230000"
  },
  {
    "text": "and that's where property-based testing comes in so if we've got our function",
    "start": "1230000",
    "end": "1235400"
  },
  {
    "text": "remove random which um takes a list of items and returns a",
    "start": "1235400",
    "end": "1240740"
  },
  {
    "text": "single item and the rest of the list indicated by a star here um what I can do is I can say oh let's",
    "start": "1240740",
    "end": "1249140"
  },
  {
    "text": "write a property based test for it for um if I take the two values returned to",
    "start": "1249140",
    "end": "1254299"
  },
  {
    "text": "me and submission them together I should get the same list so if we quickly run through this just",
    "start": "1254299",
    "end": "1260780"
  },
  {
    "text": "to show you how your property-based testing is really cool uh first of all I can make sure my mouse is actually in",
    "start": "1260780",
    "end": "1267380"
  },
  {
    "text": "the right place on the screen because I don't have liquor um first of all we're just going to ignore empty lists if FS check gives us",
    "start": "1267380",
    "end": "1274280"
  },
  {
    "text": "an empty list just kind of ignore it you can to let this check to filter out uh",
    "start": "1274280",
    "end": "1279320"
  },
  {
    "text": "stuff you don't want but for this we just do this uh we'll take the two return values so",
    "start": "1279320",
    "end": "1285320"
  },
  {
    "text": "the removed item the rest of the list we will smush it together with this lovely list cons operator",
    "start": "1285320",
    "end": "1291679"
  },
  {
    "text": "and then we are going to check equivalents using this should be equivalent which just checks that they",
    "start": "1291679",
    "end": "1296780"
  },
  {
    "text": "are the same items but in a different order and with that we've now written a",
    "start": "1296780",
    "end": "1303020"
  },
  {
    "text": "reliable test for something that is random and does something different happens every single time",
    "start": "1303020",
    "end": "1310539"
  },
  {
    "text": "so scenario number two you might want to",
    "start": "1312919",
    "end": "1318620"
  },
  {
    "text": "use this for is when the solution is easy to verify but hard to prove let's say for some reason you are",
    "start": "1318620",
    "end": "1326179"
  },
  {
    "text": "writing a sorting algorithm and you're like hmm I should probably test that this works",
    "start": "1326179",
    "end": "1331640"
  },
  {
    "text": "how would you prove a sorting algorithm actually works again I'm not an mathematician I have no idea I think",
    "start": "1331640",
    "end": "1339140"
  },
  {
    "text": "it's probably quite difficult thank you Eli",
    "start": "1339140",
    "end": "1344179"
  },
  {
    "text": "um what we could do instead is we can say well I don't really care if it's like proved correct as long as it's like",
    "start": "1344179",
    "end": "1350120"
  },
  {
    "text": "probably good enough we could just run the Sorting algorithm loads of times run through the list and",
    "start": "1350120",
    "end": "1355820"
  },
  {
    "text": "check all the pairs are in order ta-da",
    "start": "1355820",
    "end": "1363559"
  },
  {
    "text": "so we write property-based tests we solve the list we shove it into this F sharp pairwise",
    "start": "1364760",
    "end": "1371179"
  },
  {
    "text": "function which does kind of exactly what you might expect it generates the success of pairs in the list and then",
    "start": "1371179",
    "end": "1377960"
  },
  {
    "text": "just run through each pair and check it's in order and now we've written the test that",
    "start": "1377960",
    "end": "1383240"
  },
  {
    "text": "shows the Outsource probably works",
    "start": "1383240",
    "end": "1387700"
  },
  {
    "text": "so the next scenario I have lost count of which scenario we're on I apologize um you may want to use it if you have an",
    "start": "1389960",
    "end": "1396620"
  },
  {
    "text": "existing implementation to compare against so who has ever done this you've got an",
    "start": "1396620",
    "end": "1402740"
  },
  {
    "text": "old Legacy function and you're writing a new function to replace it",
    "start": "1402740",
    "end": "1407740"
  },
  {
    "text": "fantastic it is a complete pain because you're always there being like Oh there must be",
    "start": "1407780",
    "end": "1414200"
  },
  {
    "text": "some Edge case I've missed some weird Quirk where it doesn't work as it should and people have been relying on that and",
    "start": "1414200",
    "end": "1420200"
  },
  {
    "text": "I don't want to break anything so guess what we can use property based",
    "start": "1420200",
    "end": "1426980"
  },
  {
    "text": "testing for this we can write a single four-line test that just gives us random inputs runs the refactored one checks it",
    "start": "1426980",
    "end": "1433880"
  },
  {
    "text": "was equal for the Legacy function run it through property-based testing and hey Presto I have a four line test",
    "start": "1433880",
    "end": "1442220"
  },
  {
    "text": "that just captures in theory every single edge case",
    "start": "1442220",
    "end": "1447740"
  },
  {
    "text": "it's amazing I have done this before and oh my God it helped me sleep that night",
    "start": "1447740",
    "end": "1453919"
  },
  {
    "text": "next one you might want to do by the way I should add I have used property-based testing in all of these scenarios this",
    "start": "1453919",
    "end": "1460100"
  },
  {
    "text": "is actual IRL stuff um next time next place you might want to",
    "start": "1460100",
    "end": "1465919"
  },
  {
    "text": "use it if you've got forward and reverse functions so example of that serialization and",
    "start": "1465919",
    "end": "1471559"
  },
  {
    "text": "deserialization if you're me and for some reason you're like I know what would be a really fun thing to do this",
    "start": "1471559",
    "end": "1477200"
  },
  {
    "text": "weekend let's write a custom serializer and deserializer for my thing because why not foreign",
    "start": "1477200",
    "end": "1484640"
  },
  {
    "text": "surprise you can use property-based testing for this",
    "start": "1484640",
    "end": "1491120"
  },
  {
    "text": "so you can just say oh get me your own object shove it into the serializer deserialize IT check you get the",
    "start": "1491120",
    "end": "1497659"
  },
  {
    "text": "original object back brilliant you've tested your entire serialization deserialization logic with a single test",
    "start": "1497659",
    "end": "1504380"
  },
  {
    "text": "it fantastic even better um I had an issue with my custom",
    "start": "1504380",
    "end": "1509600"
  },
  {
    "text": "serializers and deserializers I added an optional property onto my object",
    "start": "1509600",
    "end": "1515299"
  },
  {
    "text": "now because it was so onto my class because it was optional of course there's no compiler errors it's just",
    "start": "1515299",
    "end": "1521179"
  },
  {
    "text": "everything I don't like everything I make doesn't have that that thing it's fine my unit test would not of course I would",
    "start": "1521179",
    "end": "1528080"
  },
  {
    "text": "have had to remember to go in and update my unit test for this missing field but property-based testing",
    "start": "1528080",
    "end": "1534980"
  },
  {
    "text": "it generates the objects for you it generates objects with that optional field it serializes and deserialized",
    "start": "1534980",
    "end": "1540620"
  },
  {
    "text": "them and says there's an issue you've forgotten to serialize this feedback deserialize this",
    "start": "1540620",
    "end": "1546140"
  },
  {
    "text": "feel bad whichever one you've forgotten and you're there being like yes brilliant so good",
    "start": "1546140",
    "end": "1551900"
  },
  {
    "text": "so yeah if you ever want to write custom serialize and deserializers for some reason uh let's be friends but also",
    "start": "1551900",
    "end": "1558380"
  },
  {
    "text": "property-based testing um this one is probably so I did show",
    "start": "1558380",
    "end": "1565640"
  },
  {
    "text": "this talk to my um my peers in my company and this one was their favorite option which is I like to call the",
    "start": "1565640",
    "end": "1572179"
  },
  {
    "text": "nuclear exception finding option which is literally run the code and make sure it doesn't",
    "start": "1572179",
    "end": "1578059"
  },
  {
    "text": "throw and you can just write this this",
    "start": "1578059",
    "end": "1583580"
  },
  {
    "text": "tiny test it will check it never throws and if it does throw it will go hey",
    "start": "1583580",
    "end": "1588980"
  },
  {
    "text": "if you give it this thing it throws and you're like oh my God this is brilliant it's so easy as well",
    "start": "1588980",
    "end": "1596380"
  },
  {
    "text": "and last but not least you might want to use it to",
    "start": "1596380",
    "end": "1603380"
  },
  {
    "text": "um just check you might want to use it when only some of the range of possible outcomes is actually valid",
    "start": "1603380",
    "end": "1609799"
  },
  {
    "text": "um so for example if you have you want to always verify that you return a",
    "start": "1609799",
    "end": "1615620"
  },
  {
    "text": "positive number from your function um it seems a bit weird to suggest",
    "start": "1615620",
    "end": "1621440"
  },
  {
    "text": "testing that something isn't correct well you're testing that it's not wrong",
    "start": "1621440",
    "end": "1627860"
  },
  {
    "text": "rather than testing it's correct um you might want to do this simply because it's easier like you might want",
    "start": "1627860",
    "end": "1634700"
  },
  {
    "text": "to say okay I know my function is always going to return a positive number I don't know what that positive number is",
    "start": "1634700",
    "end": "1639799"
  },
  {
    "text": "I don't really care I just want to check that it's always positive and um",
    "start": "1639799",
    "end": "1644960"
  },
  {
    "text": "this is actually so useful because if somewhere else you're relying on it being non-negative",
    "start": "1644960",
    "end": "1651740"
  },
  {
    "text": "you should have a test for it if you're relying on that behavior of it being non-negative it should be in a test if someone changes it accidentally returns",
    "start": "1651740",
    "end": "1658820"
  },
  {
    "text": "a negative number they break a test and they can be like maybe something's up here maybe I'm",
    "start": "1658820",
    "end": "1663919"
  },
  {
    "text": "doing something wrong rather than just returning a random negative number and going like woohoo",
    "start": "1663919",
    "end": "1669980"
  },
  {
    "text": "let's just see let's just see what breaks",
    "start": "1669980",
    "end": "1674980"
  },
  {
    "text": "so as I said I've used property-based session RL but I have actually found",
    "start": "1677059",
    "end": "1682760"
  },
  {
    "text": "case of beings in the wild in production code um I would like to especially thank",
    "start": "1682760",
    "end": "1688580"
  },
  {
    "text": "someone called Richard Sanders and Pope in my company give me a woo",
    "start": "1688580",
    "end": "1695380"
  },
  {
    "text": "yeah thank you um so I just typed FS check into",
    "start": "1695380",
    "end": "1701720"
  },
  {
    "text": "searching all the repos at my company and it came out with 74 references this was before I ever gave this talk so",
    "start": "1701720",
    "end": "1708200"
  },
  {
    "text": "somebody else of my company is also a fan of FS check and I actually gave this talk at my",
    "start": "1708200",
    "end": "1716659"
  },
  {
    "text": "company and then checked it again four months later and it went up to 129.",
    "start": "1716659",
    "end": "1722000"
  },
  {
    "text": "so I am single-handedly responsible for increasing the number of property-based testing tests at my company by about 50",
    "start": "1722000",
    "end": "1729620"
  },
  {
    "text": "percent and I may have opened Pandora's box but it seems okay",
    "start": "1729620",
    "end": "1736520"
  },
  {
    "text": "I'll admit most of this code just went around the um the route of just checking never throws which",
    "start": "1736520",
    "end": "1742640"
  },
  {
    "text": "can use it for that but and um if you're sat there thinking ah",
    "start": "1742640",
    "end": "1750200"
  },
  {
    "text": "I'm a front-end developer I'm a safe this is.net no no",
    "start": "1750200",
    "end": "1755600"
  },
  {
    "text": "admittedly when I made this talk we are a company of.net developers with JavaScript on the front end so front end",
    "start": "1755600",
    "end": "1761899"
  },
  {
    "text": "nerves I've lost the ability to edit this text so um you'll just have to appreciate my um attempt at hiding it so",
    "start": "1761899",
    "end": "1767480"
  },
  {
    "text": "JavaScript developers you are not safe either um there is a library out there called",
    "start": "1767480",
    "end": "1772940"
  },
  {
    "text": "Fast check and I just want to highlight this one because they have a fantastic page it's",
    "start": "1772940",
    "end": "1778460"
  },
  {
    "text": "amazing reading called issues discovered where they actually have published kind",
    "start": "1778460",
    "end": "1783679"
  },
  {
    "text": "of where they have found bugs in really big libraries",
    "start": "1783679",
    "end": "1788779"
  },
  {
    "text": "um for example Facebook suggests who knows what jest is",
    "start": "1788779",
    "end": "1794320"
  },
  {
    "text": "clearly not front end devs in the audience um just here four million downloads a week as of May 2019 uh just",
    "start": "1794360",
    "end": "1801320"
  },
  {
    "text": "is used for basically testing every single react front end that is out there so it's used a lot",
    "start": "1801320",
    "end": "1807679"
  },
  {
    "text": "and fast check found an issue where to strict equal fails to distinguish",
    "start": "1807679",
    "end": "1812899"
  },
  {
    "text": "between zero and five times ten to the minus 324.",
    "start": "1812899",
    "end": "1819200"
  },
  {
    "text": "specifically that but who on Earth would have thought to write a test oh let's",
    "start": "1819760",
    "end": "1825080"
  },
  {
    "text": "check that zeros doesn't strict equal 5 times 10 to the minus 324.",
    "start": "1825080",
    "end": "1831740"
  },
  {
    "text": "I wouldn't have thought about it but fast chat was there being like I'm just going to generate all these random",
    "start": "1831740",
    "end": "1837140"
  },
  {
    "text": "numbers and shove them at you and oh look you lose",
    "start": "1837140",
    "end": "1842320"
  },
  {
    "text": "um it's also trapped that to equal was not symmetric for a set and um there's some",
    "start": "1842899",
    "end": "1848779"
  },
  {
    "text": "strange thing here I I've read this a lot of",
    "start": "1848779",
    "end": "1854299"
  },
  {
    "text": "times still don't really understand what's going on but the point is who on Earth would have gone I'm going to write unit tests for these two examples",
    "start": "1854299",
    "end": "1861380"
  },
  {
    "text": "probably no one I never would have thought of it but maybe that's just me being lazy",
    "start": "1861380",
    "end": "1868460"
  },
  {
    "text": "and if you're sat here going well I'm not a JavaScript developer or a.net developer",
    "start": "1868460",
    "end": "1873620"
  },
  {
    "text": "um sadly You're Not Safe either um if you go on to the search engine of",
    "start": "1873620",
    "end": "1879380"
  },
  {
    "text": "your choice and you type in property based testing for what my language is you'll find Myriad of framework so",
    "start": "1879380",
    "end": "1885260"
  },
  {
    "text": "python uh Haskell was the OG uh property-based",
    "start": "1885260",
    "end": "1891559"
  },
  {
    "text": "testing I believe uh you've got Java you've got rust you've got Ruby you've got C for some",
    "start": "1891559",
    "end": "1898100"
  },
  {
    "text": "reason who on Earth is still using C but you can property base test in it um PHP",
    "start": "1898100",
    "end": "1905299"
  },
  {
    "text": "go you know I think you get the idea it's like stuff for pretty much every language",
    "start": "1905299",
    "end": "1910880"
  },
  {
    "text": "unless I did check if there was a property based testing framework for brain",
    "start": "1910880",
    "end": "1916039"
  },
  {
    "text": "and unfortunately there isn't so esoteric programming language lovers you're a bit out of luck",
    "start": "1916039",
    "end": "1922720"
  },
  {
    "text": "I had to check in it doesn't exist much to my um much to my disappointment",
    "start": "1924460",
    "end": "1930799"
  },
  {
    "text": "foreign you've probably got a few questions and I'm just going to go over some questions",
    "start": "1930799",
    "end": "1935840"
  },
  {
    "text": "I've been asked before um so can I use this for complex types like",
    "start": "1935840",
    "end": "1942260"
  },
  {
    "text": "it's all well and good me coming up here and being like yeah I can test the my list reversal function works for integers and you're sort of being like I",
    "start": "1942260",
    "end": "1950899"
  },
  {
    "text": "work in the real world and we have like complicated objects and stuff like that um",
    "start": "1950899",
    "end": "1956419"
  },
  {
    "text": "the answer is yes with a big asterisk big asterisk stands for uh basically",
    "start": "1956419",
    "end": "1964399"
  },
  {
    "text": "your mileage may vary um using this for complex types heavily depends on what language you are using",
    "start": "1964399",
    "end": "1972260"
  },
  {
    "text": "so to compare and contrast the two ones I've actually used FS check and fast check",
    "start": "1972260",
    "end": "1977539"
  },
  {
    "text": "um can I use this for complex types for FS check yes you can",
    "start": "1977539",
    "end": "1983240"
  },
  {
    "text": "um let's say I'm writing a little simulation of an object moving across a",
    "start": "1983240",
    "end": "1988279"
  },
  {
    "text": "table um I've got some physical properties which is just the friction between the objects and the and the table and the",
    "start": "1988279",
    "end": "1994220"
  },
  {
    "text": "weight and I've also got where the box is on the table how fast it's going and you",
    "start": "1994220",
    "end": "1999919"
  },
  {
    "text": "know the physical properties I wrote this in about a minute",
    "start": "1999919",
    "end": "2009059"
  },
  {
    "text": "okay it's the coefficient of friction I can have that right I'm 32 principle you can't know the",
    "start": "2009279",
    "end": "2015279"
  },
  {
    "text": "political position uh this is a box it doesn't count",
    "start": "2015279",
    "end": "2021159"
  },
  {
    "text": "uh it's limited by the Precision of double Precision floating Point numbers rather than the uncertainty principle",
    "start": "2021159",
    "end": "2028240"
  },
  {
    "text": "but thank you for the correction I will add it into my slides",
    "start": "2028240",
    "end": "2032820"
  },
  {
    "text": "um so I write property based test for this I'm going to check something I don't know what it is let's just uh pop a proper breakpoint here and just check",
    "start": "2033399",
    "end": "2040539"
  },
  {
    "text": "what it generates in the debugger oh look it's just generated the correct things for me",
    "start": "2040539",
    "end": "2046000"
  },
  {
    "text": "um if you kind of have a look at this you might realize that actually there are some really funny numbers in there",
    "start": "2046000",
    "end": "2052240"
  },
  {
    "text": "um so effort is just there being like Oh yeah like negative zero let's Chuck that in negative 0.0 the weight is negative",
    "start": "2052240",
    "end": "2060099"
  },
  {
    "text": "Infinity yeah I think I think this is like the",
    "start": "2060099",
    "end": "2066339"
  },
  {
    "text": "the Delta of a double Precision inflating Point number or something it's it's something like that um",
    "start": "2066339",
    "end": "2072878"
  },
  {
    "text": "next computer yes exactly it's so FS check tries to generate things to to",
    "start": "2072879",
    "end": "2079300"
  },
  {
    "text": "find Edge case as quickly as possible in which case in this case you know negative Infinity for the weight uh this",
    "start": "2079300",
    "end": "2085419"
  },
  {
    "text": "number that makes computers cry minus zero not a number things like that",
    "start": "2085419",
    "end": "2092858"
  },
  {
    "text": "um this is intentional for the framework if you have a look at our code we are sailing we're using Doubles Doubles you",
    "start": "2092859",
    "end": "2100300"
  },
  {
    "text": "can put negative Infinity in so in theory our code should support the case",
    "start": "2100300",
    "end": "2105400"
  },
  {
    "text": "when our weight is negative Infinity weight you know you know our box is a black hole but the",
    "start": "2105400",
    "end": "2114579"
  },
  {
    "text": "opposite I don't know um what you can do is you could say that's stupid I'm just going to say okay",
    "start": "2114579",
    "end": "2120520"
  },
  {
    "text": "the weight has to be some number between one and a hundred something like that you can constrain your tests to only",
    "start": "2120520",
    "end": "2127060"
  },
  {
    "text": "generate sensible values but then you have to be aware that you're now kind of saying that is the domain of your",
    "start": "2127060",
    "end": "2134320"
  },
  {
    "text": "solution um on the other hand uh fast check for",
    "start": "2134320",
    "end": "2140079"
  },
  {
    "text": "JavaScript and typescript um it's not so good one of the big problems with doing this",
    "start": "2140079",
    "end": "2147880"
  },
  {
    "text": "in JavaScript is of course the runtime typing is exceedingly Lacks",
    "start": "2147880",
    "end": "2153460"
  },
  {
    "text": "slash basically non-existent um even if you use typescripts typescript interfaces arecome part-time",
    "start": "2153460",
    "end": "2160240"
  },
  {
    "text": "only you cannot use them at runtime if you have interfaces you cannot use that to generate objects",
    "start": "2160240",
    "end": "2166540"
  },
  {
    "text": "so again I've got the same problem the same interface but this time written in typescripts",
    "start": "2166540",
    "end": "2173140"
  },
  {
    "text": "if I want to do a property based test for this I have to rewrite it as a fast",
    "start": "2173140",
    "end": "2178359"
  },
  {
    "text": "check arbitrary um kind of like write something like this it's not I'll have a bit of time to read",
    "start": "2178359",
    "end": "2186400"
  },
  {
    "text": "the slide if you'd like well I have some water",
    "start": "2186400",
    "end": "2190260"
  },
  {
    "text": "so before you want to write any tests for your complex types you have to rewrite them as a fast check arbitrary",
    "start": "2194859",
    "end": "2200380"
  },
  {
    "text": "which is an ideal it's I mean if you've got lots of",
    "start": "2200380",
    "end": "2205599"
  },
  {
    "text": "objects and you have to do this every single time it's a bit of a roadblock it'd be nice if oh my scarce making a",
    "start": "2205599",
    "end": "2212440"
  },
  {
    "text": "making a break for it so um to come back to this can I use it for complex types",
    "start": "2212440",
    "end": "2217480"
  },
  {
    "text": "yes but your mileage may vary just beware",
    "start": "2217480",
    "end": "2224940"
  },
  {
    "text": "next question is are there are there any performance Implement in um I fearlessly talk to my friend about",
    "start": "2225220",
    "end": "2231160"
  },
  {
    "text": "this over dinner and we didn't stop talking about it for about two hours so I might might go off on one a bit here I",
    "start": "2231160",
    "end": "2236380"
  },
  {
    "text": "do apologize the answer is yes no sort of it depends on what you consider performance to be",
    "start": "2236380",
    "end": "2241720"
  },
  {
    "text": "um so it is an unfortunate truth of our universe that if you do more stuff it",
    "start": "2241720",
    "end": "2248800"
  },
  {
    "text": "takes more time and yeah with property-based testing you're doing more stuff",
    "start": "2248800",
    "end": "2254560"
  },
  {
    "text": "you might sit there in the evening think well oh I'm running a test with 100 cases it's going to take 100 times as",
    "start": "2254560",
    "end": "2260079"
  },
  {
    "text": "long and you're like ah 100x oh gosh no um but let's just let's just analyze",
    "start": "2260079",
    "end": "2265420"
  },
  {
    "text": "this for a second and I will pop up here and I will say I don't actually know how the test Runner Works under the hood",
    "start": "2265420",
    "end": "2271900"
  },
  {
    "text": "um mostly because I just don't really care it runs my tests and that's that",
    "start": "2271900",
    "end": "2277900"
  },
  {
    "text": "um so I make two test fixtures I have one that just checks that you know true",
    "start": "2277900",
    "end": "2283720"
  },
  {
    "text": "is equal to true wow I'll write another one that says give me",
    "start": "2283720",
    "end": "2288760"
  },
  {
    "text": "a number and check the numbers equal to itself wow the world's most useful test fixtures",
    "start": "2288760",
    "end": "2296260"
  },
  {
    "text": "and um I copy and paste these 10 times and I run them and who wants to see what",
    "start": "2296260",
    "end": "2302260"
  },
  {
    "text": "happens yeah oh amazing so I run them twice and this is what",
    "start": "2302260",
    "end": "2309339"
  },
  {
    "text": "happens um I did not cherry pick this I ran it a few times as you can see the",
    "start": "2309339",
    "end": "2315040"
  },
  {
    "text": "property-based tests take about 25 times longer than the traditional tests",
    "start": "2315040",
    "end": "2320560"
  },
  {
    "text": "um every time I run it it seemed to be around 10 to 50 times slower for the property-based tests",
    "start": "2320560",
    "end": "2325900"
  },
  {
    "text": "um but this is where me I might be making complete fool of myself standing up here",
    "start": "2325900",
    "end": "2331359"
  },
  {
    "text": "talking about this and if you have a look at the little top thing at the top so this is the visual studio test Runner",
    "start": "2331359",
    "end": "2336640"
  },
  {
    "text": "um it says they've spent 830 milliseconds running the tests but it only spent 251 milliseconds actually",
    "start": "2336640",
    "end": "2343119"
  },
  {
    "text": "running the test and even worse if you click here and open it up apparently only the first test actually took time",
    "start": "2343119",
    "end": "2348400"
  },
  {
    "text": "to write so um I'm kind of sat here being like I think something spooky is happening under the hood",
    "start": "2348400",
    "end": "2353740"
  },
  {
    "text": "then I'm kind of there being like I don't really care it's milliseconds I'll",
    "start": "2353740",
    "end": "2358900"
  },
  {
    "text": "spend more time getting coffee every single day like that isn't even enough to get an extra coffee",
    "start": "2358900",
    "end": "2366540"
  },
  {
    "text": "ah so as I said I foolishly talked to my friend about this over dinner and we",
    "start": "2366760",
    "end": "2373180"
  },
  {
    "text": "ended up having this kind of bit of a discussion I thought I'd check in here this might be interesting on performance",
    "start": "2373180",
    "end": "2378220"
  },
  {
    "text": "of your tests so as I'm sure all know there's kind of three main categories of Errors you've",
    "start": "2378220",
    "end": "2383859"
  },
  {
    "text": "got compileras which is when you get the syntax wrong or your types wrong or something like that and you know you",
    "start": "2383859",
    "end": "2389440"
  },
  {
    "text": "know instantly you get the red squiggly you get the little red the little red text selling you off and you sat alone you go I'm so sorry Mr",
    "start": "2389440",
    "end": "2395800"
  },
  {
    "text": "typescript compiler please forgive me then you've got runtime errors so something varies an exception it's not",
    "start": "2395800",
    "end": "2402160"
  },
  {
    "text": "cool um and then worst of all you've got the logic errors so this is when the code",
    "start": "2402160",
    "end": "2407740"
  },
  {
    "text": "runs fine it just gives you the wrong answer you have no idea something's wrong until someone looks at goes",
    "start": "2407740",
    "end": "2414240"
  },
  {
    "text": "I think something's not right and of course the compile errors are the",
    "start": "2414240",
    "end": "2419859"
  },
  {
    "text": "easiest to identify you know instantly you get a red squiggle and you go oopsie logic errors are a bit hard they are oh",
    "start": "2419859",
    "end": "2425980"
  },
  {
    "text": "God I think this number's wrong no the number's not wrong you're wrong who's wrong I'm not wrong I'm definitely never",
    "start": "2425980",
    "end": "2431260"
  },
  {
    "text": "wrong ever so okay",
    "start": "2431260",
    "end": "2436300"
  },
  {
    "text": "um I will admit I love the typescript compiler the typescript and Palette is",
    "start": "2436300",
    "end": "2442119"
  },
  {
    "text": "my best friend I want to take the typescript Impala out for dinner and just spend a bit of time with it",
    "start": "2442119",
    "end": "2447460"
  },
  {
    "text": "um uh I personally have a fan of very very strict type checking and I find",
    "start": "2447460",
    "end": "2453460"
  },
  {
    "text": "typescript is like really good for doing that um even the runtime typing we just won't think about that compile time",
    "start": "2453460",
    "end": "2458800"
  },
  {
    "text": "typing it's fantastic so let's consider this code we've got a function takes two optional",
    "start": "2458800",
    "end": "2466420"
  },
  {
    "text": "um arguments two numbers you know we want to have the logic of oh you either have to give me both the numbers or",
    "start": "2466420",
    "end": "2472780"
  },
  {
    "text": "neither of them and I might think okay I'll write the code like this so I'll just take both numbers I'll check if I've got a or b a",
    "start": "2472780",
    "end": "2480220"
  },
  {
    "text": "but not b or B and I throw and then just like do something",
    "start": "2480220",
    "end": "2486520"
  },
  {
    "text": "and oh yes have a bit of reading time look",
    "start": "2486520",
    "end": "2492280"
  },
  {
    "text": "look PowerPoint has figured out this is a dark slide so it's made the black around black for this I don't know why",
    "start": "2492280",
    "end": "2499180"
  },
  {
    "text": "just a bit of fun so if I'm using this function I can",
    "start": "2499180",
    "end": "2505119"
  },
  {
    "text": "write something like this I can call it of nothing I call it one I can call it with two things that's fine and type",
    "start": "2505119",
    "end": "2510700"
  },
  {
    "text": "scriptures sat there being like yep all good here this is fine this is absolutely fine when we run it for this one of course",
    "start": "2510700",
    "end": "2517240"
  },
  {
    "text": "we'll get an error so we'd have to write a test for that we'd have to check if I'm given one I throw an error",
    "start": "2517240",
    "end": "2523420"
  },
  {
    "text": "alternatively I could write it like this so I could say I could gather up both of",
    "start": "2523420",
    "end": "2531640"
  },
  {
    "text": "these into a single object and that object itself is optional",
    "start": "2531640",
    "end": "2538300"
  },
  {
    "text": "when I call it I have to call it like this so I can call it with nothing or I can call it with my object with both A",
    "start": "2538300",
    "end": "2543579"
  },
  {
    "text": "and B if I try and write this touch kit comes along there's like no no you cannot do",
    "start": "2543579",
    "end": "2550660"
  },
  {
    "text": "this we get a nice red squiggly error we look at ourselves and go oopsie I did an obviously I shouldn't have done that",
    "start": "2550660",
    "end": "2555760"
  },
  {
    "text": "Oopsy Daisy but most importantly I don't have to write a test for this if I've got super strict type checking",
    "start": "2555760",
    "end": "2563440"
  },
  {
    "text": "compiler I don't have to test this like there's no test for this therefore there's no there's no code to write for",
    "start": "2563440",
    "end": "2570640"
  },
  {
    "text": "that test and pardon exactly no code no problem the best code",
    "start": "2570640",
    "end": "2576339"
  },
  {
    "text": "is no code I'm sure we'll all agree um so in a way by writing it like this I've",
    "start": "2576339",
    "end": "2585099"
  },
  {
    "text": "improved the performance of my test Suite because I've got one fewer tester right so I feel like people can't people can't",
    "start": "2585099",
    "end": "2591640"
  },
  {
    "text": "turn around to me and be like oh what about the performance of my unit tests if they're not doing stuff like this also it's like is this more or less",
    "start": "2591640",
    "end": "2598660"
  },
  {
    "text": "performant in real life I don't know I don't care I've got enough CPU Cycles I'm running bloody react from JavaScript",
    "start": "2598660",
    "end": "2605380"
  },
  {
    "text": "and stuff I don't care about performance to that degree laughs",
    "start": "2605380",
    "end": "2610540"
  },
  {
    "text": "so I'm sad about being like Oh typescript I love you will you take me out for dinner will you marry me and",
    "start": "2610540",
    "end": "2615760"
  },
  {
    "text": "then I realize that actually unfortunately we live in the real world and compilers cannot save us from",
    "start": "2615760",
    "end": "2622480"
  },
  {
    "text": "everything and unfortunately we do have these issues at runtime which is what we",
    "start": "2622480",
    "end": "2629140"
  },
  {
    "text": "have a comprehensive test suite for and how can I have a talk about testing without mentioning my best friend the",
    "start": "2629140",
    "end": "2634720"
  },
  {
    "text": "testing pyramid so testing pyramid you can",
    "start": "2634720",
    "end": "2640200"
  },
  {
    "text": "basically break your tests into kind of three levels at the bottom you've got the lowly unit test testing a single",
    "start": "2640200",
    "end": "2646300"
  },
  {
    "text": "function you know single function on its own you've got like testing the least",
    "start": "2646300",
    "end": "2651819"
  },
  {
    "text": "amount code quickest run quickest to write good stuff have loads of these next up integration test so testing a",
    "start": "2651819",
    "end": "2658300"
  },
  {
    "text": "few components together or testing an entire service on its own and at the top end-to-end test so testing the real",
    "start": "2658300",
    "end": "2664900"
  },
  {
    "text": "service in a real environment doing real stuff of real databases and you know takes a long time to write Essex a long",
    "start": "2664900",
    "end": "2671200"
  },
  {
    "text": "time to run them and then right at the bottom here this is my own addition I've",
    "start": "2671200",
    "end": "2676359"
  },
  {
    "text": "actually put the compiler down here because of course if you're using a type checking compiler and you're using it properly you don't have to write as many",
    "start": "2676359",
    "end": "2683140"
  },
  {
    "text": "tests which is why I think the compiler is the most important thing but we can we can",
    "start": "2683140",
    "end": "2688240"
  },
  {
    "text": "we can discuss later if you are using a dynamically type language not strongly I",
    "start": "2688240",
    "end": "2693280"
  },
  {
    "text": "don't know whichever word is anyway property-based testing lives here it lives in the unit Tesla you can turn up",
    "start": "2693280",
    "end": "2699280"
  },
  {
    "text": "tomorrow install your property tests property based testing framework and go over button Can someone say something",
    "start": "2699280",
    "end": "2706420"
  },
  {
    "text": "okay just me um",
    "start": "2706420",
    "end": "2711960"
  },
  {
    "text": "so what does the property base what does the testing pyramid save us from so if I'm writing my code I write with my best",
    "start": "2712000",
    "end": "2719200"
  },
  {
    "text": "friend the compiler uh get it merged into main off someone has diligently reviewed it uh get it",
    "start": "2719200",
    "end": "2726700"
  },
  {
    "text": "built run my unit test run my integration test push it out to a test environment hope that it's not on fire",
    "start": "2726700",
    "end": "2731859"
  },
  {
    "text": "Runway end-to-end test push it out to prod and really hope that it's not on fire I've only caused two production",
    "start": "2731859",
    "end": "2737319"
  },
  {
    "text": "outages so far in my career and I think I'm doing really well and the point I want to say is that",
    "start": "2737319",
    "end": "2744400"
  },
  {
    "text": "you kind of want to have as much chess testing as possible",
    "start": "2744400",
    "end": "2749500"
  },
  {
    "text": "on your when you're writing your code and when you're building your code and you can put property-based testing there",
    "start": "2749500",
    "end": "2756760"
  },
  {
    "text": "before they can cause issues in production and I don't know about you I'd kind of rather spend a few extra",
    "start": "2756760",
    "end": "2763060"
  },
  {
    "text": "seconds a week my unit tests to run then cause an outage because outages are a bit longer than a few seconds",
    "start": "2763060",
    "end": "2770260"
  },
  {
    "text": "answer to does test Suite performance really matter is like no in this case",
    "start": "2770260",
    "end": "2776380"
  },
  {
    "text": "it sounds scary to say that you might have a 30X increase and you might go oh my God that's so much but then you're",
    "start": "2776380",
    "end": "2781540"
  },
  {
    "text": "like wow it's like a few milliseconds but I do have to put in here maybe",
    "start": "2781540",
    "end": "2790359"
  },
  {
    "text": "so if you go away tomorrow and convert every single unit test that you've got into property based testing framework and increase your unit testing times",
    "start": "2790420",
    "end": "2797920"
  },
  {
    "text": "were 30 times that's not going to be seconds that's gonna be minutes that's going to be a long time",
    "start": "2797920",
    "end": "2803020"
  },
  {
    "text": "please do not do that I'm not standing up here saying property based testing everything I'm saying this",
    "start": "2803020",
    "end": "2808180"
  },
  {
    "text": "is a tool please please use it responsibly",
    "start": "2808180",
    "end": "2814020"
  },
  {
    "text": "so the next question is when shouldn't I use property-based testing you know it's",
    "start": "2814020",
    "end": "2819339"
  },
  {
    "text": "a Pusheen as promised and I know you're sat here thinking oh my gosh I love property-based testing",
    "start": "2819339",
    "end": "2825099"
  },
  {
    "text": "it's my favorite new thing my favorite new toy I just want to go and take it do everything with it and then you know",
    "start": "2825099",
    "end": "2830319"
  },
  {
    "text": "kind of a few months later you're like oh God why do I think that was a good idea like on reflection like it wasn't",
    "start": "2830319",
    "end": "2836319"
  },
  {
    "text": "great now I'm looking back I'm like oh so please do not shoot yourself in the foot with it I'm going to say when you",
    "start": "2836319",
    "end": "2843160"
  },
  {
    "text": "shouldn't use it so you don't have to uh wasn't that great animation",
    "start": "2843160",
    "end": "2849540"
  },
  {
    "text": "um so please do not use property based testing if you don't have standard unit tests like standard unit test first test",
    "start": "2850300",
    "end": "2855700"
  },
  {
    "text": "specific examples simply because they're just easier to understand",
    "start": "2855700",
    "end": "2860460"
  },
  {
    "text": "um please don't use property-based testing if standard unit tests are fine you might sit there and think I don't",
    "start": "2861460",
    "end": "2867520"
  },
  {
    "text": "need to really care about this thing I can just I've only got a limited number of inputs I can just test every single input works correctly that's fine just",
    "start": "2867520",
    "end": "2874599"
  },
  {
    "text": "stick with standard unit tests don't use it when you want to test them a specific case specific Edge case",
    "start": "2874599",
    "end": "2882700"
  },
  {
    "text": "property-based testing no it's just the opposite of that",
    "start": "2882700",
    "end": "2888420"
  },
  {
    "text": "um one problem with property-based testing is it can be really hard to identify suitable properties",
    "start": "2889060",
    "end": "2895119"
  },
  {
    "text": "sometimes if you've got real things real like classes doing real things you might",
    "start": "2895119",
    "end": "2901420"
  },
  {
    "text": "really struggle to identify properties and also your properties may actually",
    "start": "2901420",
    "end": "2906640"
  },
  {
    "text": "end up being as much code as the actual code itself and there begs",
    "start": "2906640",
    "end": "2912220"
  },
  {
    "text": "the question who tests the unit test especially if you um so sometimes this",
    "start": "2912220",
    "end": "2920079"
  },
  {
    "text": "can actually be indicative that you don't fully understand what your function is meant to be doing",
    "start": "2920079",
    "end": "2925300"
  },
  {
    "text": "so in the case of addition if I'm just sat there being like well one plus one is two then you might be like yeah but what what's three plus four then that",
    "start": "2925300",
    "end": "2932020"
  },
  {
    "text": "doesn't explain it to me but I mean I didn't understand what Edition was from those properties but",
    "start": "2932020",
    "end": "2937839"
  },
  {
    "text": "I'm a computer scientist oh dear oh goodbye my scarf oh I'm glad the microphone wasn't clipped to you",
    "start": "2937839",
    "end": "2945359"
  },
  {
    "text": "um next thing next place you might want to use it is your models may not actually be suitable",
    "start": "2945520",
    "end": "2951520"
  },
  {
    "text": "as I showed before with the um the infinitely heavy box on the table FS",
    "start": "2951520",
    "end": "2958480"
  },
  {
    "text": "check really likes generating mad numbers I mean you might be sad being like oh",
    "start": "2958480",
    "end": "2965260"
  },
  {
    "text": "I've said I'm using a double but really I'm just using sensible doubles and like if you pass me a nan well I don't know",
    "start": "2965260",
    "end": "2971500"
  },
  {
    "text": "what to do with that and it's like should you possibly be using a different",
    "start": "2971500",
    "end": "2977079"
  },
  {
    "text": "type that represents that it's a sensible double rather than just a double I personally think so but going back and",
    "start": "2977079",
    "end": "2984280"
  },
  {
    "text": "rewriting all of your stuff just so you can kind of property basis it isn't great what you can do instead is you can",
    "start": "2984280",
    "end": "2990520"
  },
  {
    "text": "instead say hey FS checkup I need to generate my object but only use like between 1 and 100 for the weight",
    "start": "2990520",
    "end": "2996819"
  },
  {
    "text": "you can do that but it's going to be a big big roadblock to getting implemented",
    "start": "2996819",
    "end": "3002520"
  },
  {
    "text": "and I'm here to convince you this is great and easy and you should still try it out tomorrow",
    "start": "3002520",
    "end": "3008060"
  },
  {
    "text": "so you will be very glad to know I am finished talking",
    "start": "3008099",
    "end": "3014220"
  },
  {
    "text": "in conclusion hey hey what a familiar looking slide",
    "start": "3014220",
    "end": "3019380"
  },
  {
    "text": "um so in conclusion property based testing is a technique for testing statements of the type for all X that",
    "start": "3019380",
    "end": "3024660"
  },
  {
    "text": "satisfy some free conditions some predicate holds it can give you confidence that your code behaves correctly across a wide",
    "start": "3024660",
    "end": "3031260"
  },
  {
    "text": "range of inputs it can help you find bugs in your code resulting from inputs you never would",
    "start": "3031260",
    "end": "3036660"
  },
  {
    "text": "have thought to test and last but not least this technique can be used alongside existing unit",
    "start": "3036660",
    "end": "3042359"
  },
  {
    "text": "tests and you can try it out tomorrow if you are so inclined so with that I will say thank you for",
    "start": "3042359",
    "end": "3049500"
  },
  {
    "text": "listening",
    "start": "3049500",
    "end": "3051859"
  }
]