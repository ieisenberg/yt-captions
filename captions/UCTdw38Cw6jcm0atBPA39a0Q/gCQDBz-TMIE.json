[
  {
    "start": "0",
    "end": "52000"
  },
  {
    "text": "hello everyone hey please close the door yeah thank you hello everyone having a",
    "start": "4040",
    "end": "14869"
  },
  {
    "text": "good time so far yes excellent conference this is the session about C++",
    "start": "14869",
    "end": "20449"
  },
  {
    "text": "unit testing the good the bad and the ugly coming to this session and come",
    "start": "20449",
    "end": "26900"
  },
  {
    "text": "from a background of several different object-oriented and dynamic languages and it always amazes me that there are",
    "start": "26900",
    "end": "35350"
  },
  {
    "text": "differences between C++ and those languages and as far as unit testing",
    "start": "35350",
    "end": "40460"
  },
  {
    "text": "tools and unit testing in general and that's what I'm going to talk about today and the good news is that C++ in",
    "start": "40460",
    "end": "47329"
  },
  {
    "text": "some aspect is much better than the others by the way but before that an",
    "start": "47329",
    "end": "52550"
  },
  {
    "start": "52000",
    "end": "322000"
  },
  {
    "text": "introduction my name is draw helper I'm a consultant and Software Architect been",
    "start": "52550",
    "end": "58579"
  },
  {
    "text": "working in the software industry for more than a decade and somewhere along",
    "start": "58579",
    "end": "64610"
  },
  {
    "text": "the line about ten years ago I've stumbled or found a job with an agile",
    "start": "64610",
    "end": "69980"
  },
  {
    "text": "company agile startup and learned all about agile and unit testing and TDD and",
    "start": "69980",
    "end": "76840"
  },
  {
    "text": "really liked it and ever since I've been speaking about those topics and mental",
    "start": "76840",
    "end": "83690"
  },
  {
    "text": "and developers and and whatever just spread in the world how to write better",
    "start": "83690",
    "end": "89810"
  },
  {
    "text": "code because we still have a lot to cover as developers as software developers in the software industry in",
    "start": "89810",
    "end": "97130"
  },
  {
    "text": "order to improve the way we do in stuff I'm also a Pluralsight author I have several courses on global site of",
    "start": "97130",
    "end": "104390"
  },
  {
    "text": "which about C++ unit testing one about unit testing fundamentals would catch",
    "start": "104390",
    "end": "109610"
  },
  {
    "text": "any testing thermo-calc talked about today and that one about mocking with Google Mach and feel free to check them",
    "start": "109610",
    "end": "118190"
  },
  {
    "text": "out I have a blog at helper code comm where I speak about I write about anything I find interesting usually",
    "start": "118190",
    "end": "124070"
  },
  {
    "text": "software related and I have a twitter handle ad helper when you can reach me and I'll get notified immediately on my",
    "start": "124070",
    "end": "131360"
  },
  {
    "text": "watch so if you want to ask questions or comments just feel free",
    "start": "131360",
    "end": "137280"
  },
  {
    "text": "and we are going to talk about C++ unit testing but before that let's talk about C++ because C++ is an amazing language",
    "start": "137280",
    "end": "144390"
  },
  {
    "text": "it enabled us to do so many cool things first of all it is a multi pattern kind",
    "start": "144390",
    "end": "150900"
  },
  {
    "text": "of language we can write code procedural functional object-oriented",
    "start": "150900",
    "end": "156090"
  },
  {
    "text": "meta programming you name it it's also a very performant and highly treatable",
    "start": "156090",
    "end": "162060"
  },
  {
    "text": "kind of language we can affect our marriage memory we use how fast or slow a program will run and we have so much",
    "start": "162060",
    "end": "170220"
  },
  {
    "text": "control we don't have in any other language at least once I saw and it is",
    "start": "170220",
    "end": "175680"
  },
  {
    "text": "truly a multi-platform language right unlike other languages who claim to be",
    "start": "175680",
    "end": "182190"
  },
  {
    "text": "multi-platform starting with the j c++ is really multi-platform it can run on any computer any platform any machine",
    "start": "182190",
    "end": "189540"
  },
  {
    "text": "any chip you can think about and I've been in those projects and it's amazing",
    "start": "189540",
    "end": "195000"
  },
  {
    "text": "to write your code once compile it anywhere and then you get the same results and it plays nice with other",
    "start": "195000",
    "end": "202410"
  },
  {
    "text": "languages because usually we don't live in a void we want our C++ code base to",
    "start": "202410",
    "end": "208560"
  },
  {
    "text": "be able accessible from other languages such as Python or Java or C shop vb.net",
    "start": "208560",
    "end": "214620"
  },
  {
    "text": "if you do that oh you want to call those libraries from our library in a harness",
    "start": "214620",
    "end": "219739"
  },
  {
    "text": "some library someone else's vote and it's highly extensible we can create our",
    "start": "219739",
    "end": "226890"
  },
  {
    "text": "own syntax in C+ as essentially we can do amazing stuff we can define new types",
    "start": "226890",
    "end": "231989"
  },
  {
    "text": "and we can override operators and we can play with macros and do things that",
    "start": "231989",
    "end": "237360"
  },
  {
    "text": "other languages can only dream about it's also a good language for a",
    "start": "237360",
    "end": "243030"
  },
  {
    "text": "low-level programming who here loves low-level programming okay not as many as I expected but yeah good for you we",
    "start": "243030",
    "end": "250200"
  },
  {
    "text": "can call the GPU or the CPU or inspects processes running in the operating",
    "start": "250200",
    "end": "256380"
  },
  {
    "text": "system and that's because all of those were written using C and C++ the",
    "start": "256380",
    "end": "261540"
  },
  {
    "text": "operating system and other compilers for the languages and even languages that now have a managed compiler such a",
    "start": "261540",
    "end": "268830"
  },
  {
    "text": "c-sharp that managed compiler was tennessee plus plus and the run time the running on with this night nifty garbage",
    "start": "268830",
    "end": "275370"
  },
  {
    "text": "collection they have was also written in c++ which means that as c++ developer i",
    "start": "275370",
    "end": "281490"
  },
  {
    "text": "can somehow even know the way it was implemented I can really understand",
    "start": "281490",
    "end": "286560"
  },
  {
    "text": "those low-level internals because I've written similar code now all of you are",
    "start": "286560",
    "end": "292800"
  },
  {
    "text": "C++ developer who is a C++ developer resident okay most of the room right",
    "start": "292800",
    "end": "298190"
  },
  {
    "text": "yeah okay yeah we only write C++ in one",
    "start": "298190",
    "end": "303300"
  },
  {
    "text": "platform windows for example okay and the rest was a do it for any other",
    "start": "303300",
    "end": "310290"
  },
  {
    "text": "platform under the Sun nice and well I",
    "start": "310290",
    "end": "316320"
  },
  {
    "text": "gave the I gave this talk in NDC Oslo there we had a lot of windows developers but different conference so C++ is a",
    "start": "316320",
    "end": "323760"
  },
  {
    "start": "322000",
    "end": "378000"
  },
  {
    "text": "powerful language but with that great power come great responsibility because you really can mess things up with C++",
    "start": "323760",
    "end": "330620"
  },
  {
    "text": "right you can cause amazing colossal problem with C++ given to the right or",
    "start": "330620",
    "end": "338130"
  },
  {
    "text": "wrong developer C++ can cause crashes and faults and memory allocation issues",
    "start": "338130",
    "end": "345630"
  },
  {
    "text": "you just have to name it so we need something in order to improve and obviously education is one of them we",
    "start": "345630",
    "end": "352560"
  },
  {
    "text": "need to really understand what all software does and how it does it and know how we allocate or the allocate",
    "start": "352560",
    "end": "358170"
  },
  {
    "text": "things and again how is the memory the file system or whatever is most relevant",
    "start": "358170",
    "end": "364110"
  },
  {
    "text": "to your line of work but I found there is one tool and I'm highly biased that",
    "start": "364110",
    "end": "369740"
  },
  {
    "text": "helps me and that is writing automated test as well specifically unit testing",
    "start": "369740",
    "end": "375960"
  },
  {
    "text": "but not only unit testing because once I start using unit testing by the way",
    "start": "375960",
    "end": "381240"
  },
  {
    "start": "378000",
    "end": "629000"
  },
  {
    "text": "before I start will write unit tests so it's it was first program excellent this",
    "start": "381240",
    "end": "386970"
  },
  {
    "text": "is most of the whom this usually doesn't happen usually I get the feel free",
    "start": "386970",
    "end": "392700"
  },
  {
    "text": "people shall is raising their hands so if you do write unit tests then you're fine because writing unit tests means I",
    "start": "392700",
    "end": "399870"
  },
  {
    "text": "can avoid those stupid bugs when I was a young developer just starting my",
    "start": "399870",
    "end": "405060"
  },
  {
    "text": "I didn't know any better I used to hack as quickly as I can punch the keyboard finishing that",
    "start": "405060",
    "end": "412500"
  },
  {
    "text": "specific task committed for it over defense to the next developer in line or a tester he will try to run that's my",
    "start": "412500",
    "end": "420210"
  },
  {
    "text": "software and it will immediately crash with the unittest that shouldn't happen",
    "start": "420210",
    "end": "425550"
  },
  {
    "text": "that doesn't happen because all of those stupid bags of dangling pointers or",
    "start": "425550",
    "end": "430980"
  },
  {
    "text": "accidentally going overboard with your days need to be caught in this stage all",
    "start": "430980",
    "end": "436560"
  },
  {
    "text": "those stupid bugs disappear once you start to write test for the code and you get an early feedback because the thing",
    "start": "436560",
    "end": "443580"
  },
  {
    "text": "I hate the most on writing software is that two weeks after finish writing something I'll get a bug report and if I",
    "start": "443580",
    "end": "450750"
  },
  {
    "text": "get a bug report after two weeks I have a problem because I'm already working on something else and I forgot what I did",
    "start": "450750",
    "end": "456660"
  },
  {
    "text": "two weeks ago and usually the bug report well depends on the tester you're working with but some of them are not",
    "start": "456660",
    "end": "463410"
  },
  {
    "text": "very detailed some of them I used I got a basketball saying software just crashed good luck and then you try to",
    "start": "463410",
    "end": "471030"
  },
  {
    "text": "reproduce that bad report obviously doesn't happen on your machine and then you say it works on my machine and you",
    "start": "471030",
    "end": "477570"
  },
  {
    "text": "mark the bug as cannot be reproduce and the testers get very annoyed with that and reopen the bug and you started a",
    "start": "477570",
    "end": "484830"
  },
  {
    "text": "small fight about that they take a few days maybe a few weeks until you actually get to fix that bug I want to",
    "start": "484830",
    "end": "490410"
  },
  {
    "text": "find my problems as quickly as I can once I write them I want them to be",
    "start": "490410",
    "end": "495690"
  },
  {
    "text": "found don't want to wait till a tester or a customer find them for me and then",
    "start": "495690",
    "end": "502110"
  },
  {
    "text": "the selling point for unit testing most of the time people bring me in to explain and teach about unit tests when",
    "start": "502110",
    "end": "510210"
  },
  {
    "text": "they find out they have a lot of the duration bugs they keep on breaking stuff because this is a painful thing to",
    "start": "510210",
    "end": "518010"
  },
  {
    "text": "do you'll fit something and you break something and you fix that and you break the first thing again and once you have",
    "start": "518010",
    "end": "523529"
  },
  {
    "text": "a lot of unit tests you have a safety net that protects you from regression and you can write sustainable and",
    "start": "523529",
    "end": "530400"
  },
  {
    "text": "manageable code because something funny happens when you start to write automated test your code your design",
    "start": "530400",
    "end": "536130"
  },
  {
    "text": "changes you start to write very loosely coupled design you start to",
    "start": "536130",
    "end": "542310"
  },
  {
    "text": "divide your dependencies from your coal business and your code changes to the",
    "start": "542310",
    "end": "547500"
  },
  {
    "text": "better I I don't buy this old design for testability thing I designed for readability and maintainability I get to",
    "start": "547500",
    "end": "554430"
  },
  {
    "text": "test it because of that but that's it my code becomes better half dependency injection and I have different classes",
    "start": "554430",
    "end": "561510"
  },
  {
    "text": "with single responsibility for each and it brings me for a battle of jakku vented design intuitively without",
    "start": "561510",
    "end": "568500"
  },
  {
    "text": "thinking about it and finally unit ourselves kind of documentation list for me because I got",
    "start": "568500",
    "end": "575220"
  },
  {
    "text": "code as fast as I read English and that is a good thing that means that when I",
    "start": "575220",
    "end": "582990"
  },
  {
    "text": "get to the same project I worked on a month ago or even before lunch all I need to do is read the test random debug",
    "start": "582990",
    "end": "590700"
  },
  {
    "text": "them and understand how the code works and unlike the text document that you might have written your design document",
    "start": "590700",
    "end": "596490"
  },
  {
    "text": "it doesn't get stilled because the test progress with your code keep on changing and updated as your",
    "start": "596490",
    "end": "602459"
  },
  {
    "text": "code updates so unit test is a good thing to have and it's a very simple",
    "start": "602459",
    "end": "607829"
  },
  {
    "text": "thing that unit tests unfortunately not only we have a lot of",
    "start": "607829",
    "end": "613140"
  },
  {
    "text": "definition of what a unit test is and you can argue about it till it turned blue in the face I found that there is",
    "start": "613140",
    "end": "619440"
  },
  {
    "text": "no clear definition of what is a unit as out there you know Google it you find",
    "start": "619440",
    "end": "624570"
  },
  {
    "text": "several definitions some of them written by speakers that came here today and so",
    "start": "624570",
    "end": "630120"
  },
  {
    "start": "629000",
    "end": "778000"
  },
  {
    "text": "I have my own definition you know if you can't beat them join them and my",
    "start": "630120",
    "end": "636660"
  },
  {
    "text": "definition of unit test is very simple it's a method a unit test is essentially",
    "start": "636660",
    "end": "642000"
  },
  {
    "text": "a method all of us know how to write those there are different tools but it is essentially a method and don't let",
    "start": "642000",
    "end": "648870"
  },
  {
    "text": "anyone lie to you there are no such thing as a unit testing framework those are method running frameworks and that's",
    "start": "648870",
    "end": "653880"
  },
  {
    "text": "it they have nothing to do really with unit tests don't really check that you are writing a unit test the just one",
    "start": "653880",
    "end": "659010"
  },
  {
    "text": "code but the thing that makes it a unit test is that unlike the code rat in",
    "start": "659010",
    "end": "664410"
  },
  {
    "text": "production it tests a very specific functionality this is the thing of fun developers find the hardest thing to",
    "start": "664410",
    "end": "671100"
  },
  {
    "text": "think about the because when we like production code we usually need to tackle all of the",
    "start": "671100",
    "end": "676950"
  },
  {
    "text": "possible option out there an interest is called the complete opposite now that a single unit tests attest something very",
    "start": "676950",
    "end": "683130"
  },
  {
    "text": "specific and it's out wrap your head around if you've been writing unit tests",
    "start": "683130",
    "end": "689160"
  },
  {
    "text": "for some time and usually in the beginning they fail because they are too complex and they have a lot of logic in",
    "start": "689160",
    "end": "695190"
  },
  {
    "text": "them and then you reduce that and you get to that specific functionality also unit tests have a very clear pass or",
    "start": "695190",
    "end": "701040"
  },
  {
    "text": "fail criteria which seems trivial but have been in organizations in which they will run tests automatically and then",
    "start": "701040",
    "end": "708540"
  },
  {
    "text": "someone will get in the book in the morning some very poor developer or tester and check the database or the",
    "start": "708540",
    "end": "715230"
  },
  {
    "text": "server or the logs to decide whether or not the test has passed and I don't want that I want those tests to run",
    "start": "715230",
    "end": "721440"
  },
  {
    "text": "automatically and just notify me when they fail and finally unit tests unlike",
    "start": "721440",
    "end": "727680"
  },
  {
    "text": "integration or accepting tests that I can write using a unit testing framework run in isolation you don't get to call",
    "start": "727680",
    "end": "735240"
  },
  {
    "text": "anything outside your code you don't call access servers and you don't call any database and probably not a lot of",
    "start": "735240",
    "end": "744180"
  },
  {
    "text": "third-party libraries but that's up to how you hold your code and what you use",
    "start": "744180",
    "end": "750140"
  },
  {
    "text": "and the reason we're doing that is because we want those tests to run on any machine including the build server",
    "start": "750140",
    "end": "755820"
  },
  {
    "text": "easily I wanted us not to affect one another I don't want the ordering of the",
    "start": "755820",
    "end": "762060"
  },
  {
    "text": "way they run the test the effect of the test walk they should walk in any order in any way I should be able to run the",
    "start": "762060",
    "end": "768990"
  },
  {
    "text": "same tests a thousand times get us exactly the same result because if it fails I want to run it at least one more",
    "start": "768990",
    "end": "774690"
  },
  {
    "text": "time to see what happens now all if this done by this simple guy",
    "start": "774690",
    "end": "780600"
  },
  {
    "start": "778000",
    "end": "929000"
  },
  {
    "text": "a method of unit test anyone recognized that one this is Google tests who will",
    "start": "780600",
    "end": "787440"
  },
  {
    "text": "uses Google tests this is the most popular C++ unit testing framework out there I'm not sure for the good reason",
    "start": "787440",
    "end": "794730"
  },
  {
    "text": "is that it was the first or at least the first maintained one well one of the first and but all of them look roughly",
    "start": "794730",
    "end": "802110"
  },
  {
    "text": "the same and if you go to other languages you can probably recognize the sense rupture and the structure is combined",
    "start": "802110",
    "end": "808450"
  },
  {
    "text": "form this in simplest assets amico right or the veterans it was just no developers know that if I write it with",
    "start": "808450",
    "end": "815410"
  },
  {
    "text": "uppercase its macro and that mecco essentially does a few things for me it creates a new class in the background",
    "start": "815410",
    "end": "822100"
  },
  {
    "text": "and you method in that class and write somewhere that this is a test and it should be then when I learned my tests",
    "start": "822100",
    "end": "829510"
  },
  {
    "text": "and in Google test I will create an executable that run all the tests with or without any parameters basically so",
    "start": "829510",
    "end": "838210"
  },
  {
    "text": "this is the mecca that makes everything happen I need I have the name of the class in the background we usually call",
    "start": "838210",
    "end": "845530"
  },
  {
    "text": "those tests pictures this is a like a grouping of several tests that are something related to one another either",
    "start": "845530",
    "end": "852760"
  },
  {
    "text": "the test the same component the same part of the system or the same functionality but essentially it's a",
    "start": "852760",
    "end": "858490"
  },
  {
    "text": "class in object-oriented and this is my actual test now in Google test it must be something that can be compiled as a",
    "start": "858490",
    "end": "865810"
  },
  {
    "text": "method name because it is the meta name and I try to use uppercase lowercase and",
    "start": "865810",
    "end": "871330"
  },
  {
    "text": "underscore to make it barely human readable so I will understand why that",
    "start": "871330",
    "end": "876700"
  },
  {
    "text": "has failed and what he does here in the middle is the important part this is",
    "start": "876700",
    "end": "881830"
  },
  {
    "text": "where I do stuff I usually do three things in an in every test first of",
    "start": "881830",
    "end": "886960"
  },
  {
    "text": "which is a range I'll arrange the system I'll do something in the system to get",
    "start": "886960",
    "end": "892930"
  },
  {
    "text": "to the point in which I came and whatever I'm trying to test here I only need to create a new object and the",
    "start": "892930",
    "end": "899860"
  },
  {
    "text": "second part is the act part this is the play button that's well I'll run the experiment the test I want to check and",
    "start": "899860",
    "end": "906910"
  },
  {
    "text": "the final one is an assert usually called the self but it depends on the any testing framework and that assert",
    "start": "906910",
    "end": "913660"
  },
  {
    "text": "will check something for me in this case check that I'll get false back from this method and that's it this is a very",
    "start": "913660",
    "end": "920620"
  },
  {
    "text": "simplistic view of a unit test but even more complex logic can be fit inside",
    "start": "920620",
    "end": "926650"
  },
  {
    "text": "those walls now in C++ and in any other",
    "start": "926650",
    "end": "933190"
  },
  {
    "start": "929000",
    "end": "995000"
  },
  {
    "text": "language to tell you the truth a unit testing framework so called unit testing framework will give me at least we think",
    "start": "933190",
    "end": "939460"
  },
  {
    "text": "first of which I can declare test and test picture which are the containers of",
    "start": "939460",
    "end": "945190"
  },
  {
    "text": "this test and might have some behavior I need alcohol have a bunch of assertions",
    "start": "945190",
    "end": "950529"
  },
  {
    "text": "the number of assertions depending on the unit testing framework and its capabilities enable me to check for",
    "start": "950529",
    "end": "956830"
  },
  {
    "text": "certain conditions they must specify the assert the better because I'll get a better error message when it fails and",
    "start": "956830",
    "end": "963820"
  },
  {
    "text": "test runners in C passes in most unit s in thermo Canal I'll actually create an executable so I'll get to run that but",
    "start": "963820",
    "end": "972040"
  },
  {
    "text": "sometimes some unit isn't a mocha bundled with specific program to run them and especially in Windows and",
    "start": "972040",
    "end": "980550"
  },
  {
    "text": "sometimes I get integrated runner if you walk in Windows you can run some of those from Visual Studio IO you can run",
    "start": "980550",
    "end": "987160"
  },
  {
    "text": "for me cleats in Linux after doing some trickling because most of the time I want to have them form within my",
    "start": "987160",
    "end": "993310"
  },
  {
    "text": "development environment now in C++ unit",
    "start": "993310",
    "end": "998320"
  },
  {
    "start": "995000",
    "end": "1183000"
  },
  {
    "text": "testing there are good good news and bad news the good news is that you have a lot of choices there are a lot of unit",
    "start": "998320",
    "end": "1006300"
  },
  {
    "text": "testing framework in C++ I never seen so many in net in one language and more",
    "start": "1006300",
    "end": "1012690"
  },
  {
    "text": "than that there are a lot of styles because usually a unit testing framework any language you choose looks about the",
    "start": "1012690",
    "end": "1018750"
  },
  {
    "text": "same the same way it was invented with j-unit back I don't know 2002 or 3 1997",
    "start": "1018750",
    "end": "1028589"
  },
  {
    "text": "thank you yeah on a plane to a conference they invented that one day oh",
    "start": "1028589",
    "end": "1034829"
  },
  {
    "text": "that one comes back and Eric gamma and they wrote a unit with ideas that was",
    "start": "1034829",
    "end": "1041520"
  },
  {
    "text": "right for 1997 a time that at least I wasn't in the software industry and no",
    "start": "1041520",
    "end": "1047970"
  },
  {
    "text": "one has changed that unless you go to C++ where people thought about metal ideas of testing your code and I'll show",
    "start": "1047970",
    "end": "1054750"
  },
  {
    "text": "you those the bad thing is that you don't always get to the code your documentation most of those are the open source",
    "start": "1054750",
    "end": "1062160"
  },
  {
    "text": "projects people hacking away in the middle of the night and so they don't",
    "start": "1062160",
    "end": "1067290"
  },
  {
    "text": "really have a lot of time to either commentation and well most of time you don't need it but when you",
    "start": "1067290",
    "end": "1073180"
  },
  {
    "text": "you need it you wish you had it when you need to do something which is not trivial and amazingly enough well I'll talk",
    "start": "1073180",
    "end": "1081250"
  },
  {
    "text": "about it but the one with the least amount of documentation is the one that is maintained by the actual company and",
    "start": "1081250",
    "end": "1088030"
  },
  {
    "text": "not all unit testing for Moka maintains just like any other open-source project some of them are maintained I've just",
    "start": "1088030",
    "end": "1094870"
  },
  {
    "text": "updated my demos because some of those frame oak was recent the the one was",
    "start": "1094870",
    "end": "1102400"
  },
  {
    "text": "updated yesterday people keep on working on them all the time but some of them haven't been for years and the ugly one",
    "start": "1102400",
    "end": "1110650"
  },
  {
    "text": "is deployment because in C++ we don't have yet well we have some tries to have",
    "start": "1110650",
    "end": "1118300"
  },
  {
    "text": "a better package management Coenen or VC package for Microsoft but",
    "start": "1118300",
    "end": "1125050"
  },
  {
    "text": "it is could be a pain to deploy dot unit testing framework and some of those",
    "start": "1125050",
    "end": "1130120"
  },
  {
    "text": "options you need to compile your unit testing framework itself and you need to compile it the same way you compile your",
    "start": "1130120",
    "end": "1136810"
  },
  {
    "text": "test and your code you know if it's the bug or the lists multi-threaded single-sided compartment the same",
    "start": "1136810",
    "end": "1143920"
  },
  {
    "text": "platform and so on which can be very frustrating especially when you get it wrong and then then you get a bunch of",
    "start": "1143920",
    "end": "1151050"
  },
  {
    "text": "very funny link messages which is a terrible thing to solve just because you",
    "start": "1151050",
    "end": "1157270"
  },
  {
    "text": "compiled something not exactly the same way happened to me a day before cause you don't want that and in case of",
    "start": "1157270",
    "end": "1164230"
  },
  {
    "text": "Windows if you compile with the different Visual Studio then it's no goal you'll have a bunch of linking",
    "start": "1164230",
    "end": "1169840"
  },
  {
    "text": "problems and you won't get away with that and it can become painful now the",
    "start": "1169840",
    "end": "1176590"
  },
  {
    "text": "good news about that is that many unit testing framework authors understood that and they have better solutions so",
    "start": "1176590",
    "end": "1184120"
  },
  {
    "start": "1183000",
    "end": "1405000"
  },
  {
    "text": "in we have quite a lot of unit testing framework and I'm sure I'm missing some I try to get as complete list as I could",
    "start": "1184120",
    "end": "1190570"
  },
  {
    "text": "and I'll try to show at least a few of those the first of which is obviously Google tests in my experience every",
    "start": "1190570",
    "end": "1198340"
  },
  {
    "text": "single client I got to at least considered working with Google tests because",
    "start": "1198340",
    "end": "1205450"
  },
  {
    "text": "it's widely used it's out of that the go-to guy for unit testing in C++ they",
    "start": "1205450",
    "end": "1212140"
  },
  {
    "text": "dominated the market for almost forever and it's not a bad yeah Google test and",
    "start": "1212140",
    "end": "1217990"
  },
  {
    "text": "then I have Microsoft try its native unit testing if you go into Visual Studio and create a new native C++ unit",
    "start": "1217990",
    "end": "1225850"
  },
  {
    "text": "as in project you got something called I'll call its native MS test I'm not sure what its name is and it goes in a",
    "start": "1225850",
    "end": "1234160"
  },
  {
    "text": "completely different direction different API and different way to walk then all the others and then this is my favorite",
    "start": "1234160",
    "end": "1240340"
  },
  {
    "text": "catch because catch was written and by the way by phil nash works for JetBrains",
    "start": "1240340",
    "end": "1246250"
  },
  {
    "text": "right now and it has a lot of very interesting ideas i think it's one of",
    "start": "1246250",
    "end": "1252790"
  },
  {
    "text": "the first unit testing framework that actually looked at j unit and said no i don't want to do that I want to do something completely different and I",
    "start": "1252790",
    "end": "1260710"
  },
  {
    "text": "think I got it right for my experience if someone starts with catch you'll miss a lot of the pitfalls that people fall",
    "start": "1260710",
    "end": "1267460"
  },
  {
    "text": "in using Google test not because it's a bad thermic it just drives you in the",
    "start": "1267460",
    "end": "1272830"
  },
  {
    "text": "right direction and the CPP unit it was created in 2000 2000 by Michael feathers",
    "start": "1272830",
    "end": "1281680"
  },
  {
    "text": "because he wrote a book called walking effectively with legacy code and you need a unit testing framework for C++ so",
    "start": "1281680",
    "end": "1287500"
  },
  {
    "text": "you got a unit testing framework for C++ and there's boost test anyone ever use",
    "start": "1287500",
    "end": "1293500"
  },
  {
    "text": "boost test okay was it fun it's very",
    "start": "1293500",
    "end": "1298540"
  },
  {
    "text": "well both a lot of things you need to write there",
    "start": "1298540",
    "end": "1304330"
  },
  {
    "text": "you could like it it's up to you you actually like this micro management kind",
    "start": "1304330",
    "end": "1310030"
  },
  {
    "text": "of style that's okay not judging anyone and there's doc tests",
    "start": "1310030",
    "end": "1316120"
  },
  {
    "text": "doctors is interesting it is one of the first unit testing framework that looked at catch and says I want that exactly",
    "start": "1316120",
    "end": "1322300"
  },
  {
    "text": "but a bit different it has similar syntax but you get to write your test",
    "start": "1322300",
    "end": "1328630"
  },
  {
    "text": "inside your production code and actually filner saw that and an enabled catch to",
    "start": "1328630",
    "end": "1334930"
  },
  {
    "text": "do the same so you get back and forth with ideas there and the idea is that you right inside",
    "start": "1334930",
    "end": "1339980"
  },
  {
    "text": "your production code you let your tests and Delhomme compilation depending on whatever preprocessor the definition use",
    "start": "1339980",
    "end": "1347570"
  },
  {
    "text": "the test could disappear completely when you want to give the code to your customer or it can run if you want to",
    "start": "1347570",
    "end": "1355550"
  },
  {
    "text": "run your test right now and it enable you to test things that you can test from outside your library or executable",
    "start": "1355550",
    "end": "1363730"
  },
  {
    "text": "and there's less this is another layer I call them catch derivative it took the",
    "start": "1363730",
    "end": "1368840"
  },
  {
    "text": "same ideas catches change them a bit it's more manual kind of sign your test",
    "start": "1368840",
    "end": "1376120"
  },
  {
    "text": "in line way I'll show you that and there's actually plus plus that one",
    "start": "1376120",
    "end": "1381590"
  },
  {
    "text": "actually looked at the project in dotnet called X unit and said I want that API",
    "start": "1381590",
    "end": "1386720"
  },
  {
    "text": "and created a similar API in C++ and there's metal metal is completely",
    "start": "1386720",
    "end": "1394850"
  },
  {
    "text": "different from all the others it has a syntax you might like and I found it to",
    "start": "1394850",
    "end": "1399980"
  },
  {
    "text": "be very effective when you want to scare off Java developers let's see the let's",
    "start": "1399980",
    "end": "1406790"
  },
  {
    "start": "1405000",
    "end": "1885000"
  },
  {
    "text": "eat all those shall we now this project is on github everything under the helper",
    "start": "1406790",
    "end": "1413180"
  },
  {
    "text": "you can find that and I'll give you the link at the end of the session this is Google test as I showed you I'm testing",
    "start": "1413180",
    "end": "1419090"
  },
  {
    "text": "a bowling score in game there's a bowling cutter anyone ever saw the bowling game cutter you can you might",
    "start": "1419090",
    "end": "1425480"
  },
  {
    "text": "get that yeah in the job interview and the ideas you get a bunch of results of",
    "start": "1425480",
    "end": "1432080"
  },
  {
    "text": "playing both the bowling game and you check the score and here in Google test I'll create a new game all several",
    "start": "1432080",
    "end": "1438590"
  },
  {
    "text": "gutter ball which means I have no score and it should be zero okay now this feel",
    "start": "1438590",
    "end": "1444380"
  },
  {
    "text": "fine thing here is actually resharper for c++ that enable me to run the test",
    "start": "1444380",
    "end": "1449420"
  },
  {
    "text": "formula in the code but i could have also run it from command line or even these days even using visual studio i",
    "start": "1449420",
    "end": "1455960"
  },
  {
    "text": "might be able this is actually the sharper but i might be able to see the test here as well once it stops reading",
    "start": "1455960",
    "end": "1462770"
  },
  {
    "text": "them it will bubble bank find a bunch of tests and i'm sure we can create the",
    "start": "1462770",
    "end": "1467900"
  },
  {
    "text": "same effect in linux using your idea of choice now when run in this state",
    "start": "1467900",
    "end": "1473000"
  },
  {
    "text": "have all seven eyeballs and check the score now the most important thing about any unit testing framework is the old",
    "start": "1473000",
    "end": "1480350"
  },
  {
    "text": "message and we'll get when it fails because as far as I'm concerned I'm only writing those tests to fail if I had a",
    "start": "1480350",
    "end": "1487970"
  },
  {
    "text": "way to know which test will fail and which will not I will delete all the tests that will never fail but there's",
    "start": "1487970",
    "end": "1493490"
  },
  {
    "text": "no way to predict the future is not yet because those tests are written to catch",
    "start": "1493490",
    "end": "1498530"
  },
  {
    "text": "me when I write a bug and that's it and the rest of it is wasting CPU and my time so at least the least I can do is",
    "start": "1498530",
    "end": "1506870"
  },
  {
    "text": "if the test fails I want the best error message I can think of now let's make it",
    "start": "1506870",
    "end": "1512150"
  },
  {
    "text": "fail if I'll do that it's bound to fail on it using resharper this time and hope",
    "start": "1512150",
    "end": "1521000"
  },
  {
    "text": "for the best yes you know it's running and it failed and I get a nice level message and it",
    "start": "1521000",
    "end": "1528110"
  },
  {
    "text": "doesn't matter which unit testing framework you you choose run this experiment and see what happens see",
    "start": "1528110",
    "end": "1534320"
  },
  {
    "text": "whether or not you can understand the problem and here it's very easy to understand because Google test does an excellent job itself tells me what I",
    "start": "1534320",
    "end": "1541760"
  },
  {
    "text": "expected to get tells me what I checked the actual method and it tells me the",
    "start": "1541760",
    "end": "1546770"
  },
  {
    "text": "actual results this is excellent and Google test has a lot of those results if I look at a certain score",
    "start": "1546770",
    "end": "1554570"
  },
  {
    "text": "I'll get a very long list it has a third F their application actually crashed",
    "start": "1554570",
    "end": "1560060"
  },
  {
    "text": "which I didn't find any other unit testing firm couldn't do that or exit and there's the usual suspect false Ness",
    "start": "1560060",
    "end": "1569000"
  },
  {
    "text": "with that here we go and yeah and greater and equal and",
    "start": "1569000",
    "end": "1575780"
  },
  {
    "text": "result Neal and did in for an exception all use your own predicate these days with lambdas we can define what we want",
    "start": "1575780",
    "end": "1583280"
  },
  {
    "text": "the test to check and so on and so on and there's quite a lot of those and screens related and so on so this is",
    "start": "1583280",
    "end": "1591730"
  },
  {
    "text": "actually pretty cool although I have another session about what I hate about unit testing framework I hate using the",
    "start": "1591730",
    "end": "1598340"
  },
  {
    "text": "right result I found developers usually in the beginning users are true for everything",
    "start": "1598340",
    "end": "1604690"
  },
  {
    "text": "because that's way we think and should be that way and that's the first thing I actually like about catch",
    "start": "1604690",
    "end": "1610629"
  },
  {
    "text": "because if we go down here or up there he will go and look at the same test",
    "start": "1610629",
    "end": "1617289"
  },
  {
    "text": "with catch here we go this is exactly the same cat s would catch it looks",
    "start": "1617289",
    "end": "1622649"
  },
  {
    "text": "related about the same right but there's one big difference and this is it in",
    "start": "1622649",
    "end": "1627849"
  },
  {
    "text": "catch we don't have a lot of asserts we have about five of those and we usually",
    "start": "1627849",
    "end": "1632889"
  },
  {
    "text": "use only one and this is it require and write the actual code right wide to",
    "start": "1632889",
    "end": "1638079"
  },
  {
    "text": "expect the test to do and that's it and I like to write in code and unfortunately no other language enable",
    "start": "1638079",
    "end": "1645429"
  },
  {
    "text": "me to do that that nice you know in dotnet and Java you can have the same effect because not only does I write it",
    "start": "1645429",
    "end": "1653079"
  },
  {
    "text": "in code but when I do get an error message you know using zippers are",
    "start": "1653079",
    "end": "1659229"
  },
  {
    "text": "strictly and it's easier in many languages to do the same thing I actually did that for one client and",
    "start": "1659229",
    "end": "1665379"
  },
  {
    "text": "when I run the same test again with my catch test you see the error message you",
    "start": "1665379",
    "end": "1672719"
  },
  {
    "text": "will choir games code to be equal zero and zero ten and zero is not then you",
    "start": "1672719",
    "end": "1678219"
  },
  {
    "text": "get a very good hello message because catch knows most of the thing you try to",
    "start": "1678219",
    "end": "1685059"
  },
  {
    "text": "write there if I would have tried to compare strings it will understand that or something inside the collection and",
    "start": "1685059",
    "end": "1690969"
  },
  {
    "text": "so on and this is a powerful capabilities because I don't need to think about what I'm testing just write",
    "start": "1690969",
    "end": "1697599"
  },
  {
    "text": "it in code which I find easier so that's",
    "start": "1697599",
    "end": "1702849"
  },
  {
    "text": "the first thing I really like about catch oh it's a we have other options",
    "start": "1702849",
    "end": "1708909"
  },
  {
    "text": "here as well first of which as I said a bit different is Microsoft option they",
    "start": "1708909",
    "end": "1714609"
  },
  {
    "text": "so what everybody else did and decide to go a different route and that ought very similar to what you'll see in Java",
    "start": "1714609",
    "end": "1719739"
  },
  {
    "text": "and.net you define a test class and give it a name and inside you have fields and",
    "start": "1719739",
    "end": "1726579"
  },
  {
    "text": "public test methods which is the actual test you have this Arabic all kind of",
    "start": "1726579",
    "end": "1731829"
  },
  {
    "text": "you exeunt LastPass will do the same thing for you now I found this library",
    "start": "1731829",
    "end": "1736899"
  },
  {
    "text": "to be lacking it doesn't have enough asserts for my benefits and it doesn't almost know the commutation whatsoever",
    "start": "1736899",
    "end": "1745109"
  },
  {
    "text": "but if your windows only shop it will run out of the box and unlike the other",
    "start": "1745109",
    "end": "1750579"
  },
  {
    "text": "guys it doesn't create an executable you can only run it using visual studio from",
    "start": "1750579",
    "end": "1755589"
  },
  {
    "text": "here or visual studio panel from the command line unlike the other languages where you",
    "start": "1755589",
    "end": "1761499"
  },
  {
    "text": "just execute the code which can be problematic if you're using other built",
    "start": "1761499",
    "end": "1768639"
  },
  {
    "text": "systems not visual studio ones and I also found this I'll key I don't really",
    "start": "1768639",
    "end": "1775719"
  },
  {
    "text": "like it that much but that's my preference and I promise at least one",
    "start": "1775719",
    "end": "1781329"
  },
  {
    "text": "more or less it is less it's very similar to catch but you have to create a specification array and then inside",
    "start": "1781329",
    "end": "1788169"
  },
  {
    "text": "that you write all the tests here let's test case and then it we need to explicitly run those specifications now",
    "start": "1788169",
    "end": "1797339"
  },
  {
    "text": "this was handled differently by different unit testing framework for example in Google test I just need to",
    "start": "1797339",
    "end": "1805209"
  },
  {
    "text": "find what the main probably he'll does the main because it's an executable you need to write this magic those two in",
    "start": "1805209",
    "end": "1811569"
  },
  {
    "text": "order to run the tests and in catch he said well no need to rewrite that code",
    "start": "1811569",
    "end": "1816819"
  },
  {
    "text": "anytime I'll add a new unit testing framework so there's a define that do that for me many languages do that as",
    "start": "1816819",
    "end": "1823779"
  },
  {
    "text": "well another thing about catcher as always do like it is that all you need to do in order to use that is include a",
    "start": "1823779",
    "end": "1830979"
  },
  {
    "text": "header file which will also work for list and doc test many others and you",
    "start": "1830979",
    "end": "1836259"
  },
  {
    "text": "don't need to compile anything and you can somehow get to Google test to do the same thing you can compile it to a",
    "start": "1836259",
    "end": "1842109"
  },
  {
    "text": "single C++ file and add it to your project but it's a pain and just",
    "start": "1842109",
    "end": "1848440"
  },
  {
    "text": "including a file easier although your compilation times might be longer due to",
    "start": "1848440",
    "end": "1854499"
  },
  {
    "text": "that because you compile in it as well and that's all I need to use catch include the header file and defined is",
    "start": "1854499",
    "end": "1861819"
  },
  {
    "text": "define beforehand and I am ready to write s so deployment is easier so this",
    "start": "1861819",
    "end": "1867669"
  },
  {
    "text": "was a quick overview of all those the others are derivative it",
    "start": "1867669",
    "end": "1873610"
  },
  {
    "text": "of how Google test does things how Microsoft does things or how catch does things with slight differences between",
    "start": "1873610",
    "end": "1880630"
  },
  {
    "text": "them API was usually the another tool I",
    "start": "1880630",
    "end": "1886000"
  },
  {
    "start": "1885000",
    "end": "1946000"
  },
  {
    "text": "usually need is a mocking thermic mo confirm walk were here was in my session",
    "start": "1886000",
    "end": "1891250"
  },
  {
    "text": "yesterday okay not enough so I need to explain a mocking framework essentially is when I need to isolate dependencies I",
    "start": "1891250",
    "end": "1898150"
  },
  {
    "text": "have a database or server I don't want to call those in my unit test so what I do I take the class that caused the",
    "start": "1898150",
    "end": "1906190"
  },
  {
    "text": "database inherited and override all the methods and I end up with a class that",
    "start": "1906190",
    "end": "1911260"
  },
  {
    "text": "does absolutely nothing and this is essentially a mocking framework that's all it does and you get a fake object",
    "start": "1911260",
    "end": "1918190"
  },
  {
    "text": "that you can shove into your code somehow and replace the dependency you don't want to run and you get to tell",
    "start": "1918190",
    "end": "1923830"
  },
  {
    "text": "that mocking framework exactly what you want I don't like calling that a mocking framework because it's very misleading",
    "start": "1923830",
    "end": "1929950"
  },
  {
    "text": "and cause you not use it perhaps a lot of developers thinks that mocks is very",
    "start": "1929950",
    "end": "1935290"
  },
  {
    "text": "complex you can actually write your own just inherit the class override all the methods but I don't want to because",
    "start": "1935290",
    "end": "1941290"
  },
  {
    "text": "someone will do it for me and I want to change the behavior in every test and so I use a mocking",
    "start": "1941290",
    "end": "1946419"
  },
  {
    "text": "framework that will enable me to create those fake objects and set behavior because in one test I want to for an",
    "start": "1946419",
    "end": "1951970"
  },
  {
    "text": "exception because the server is not there there so the server the effect server and another day I want to return",
    "start": "1951970",
    "end": "1958390"
  },
  {
    "text": "some message and that way I get to isolate the code and care about the code and testing from the outside environment",
    "start": "1958390",
    "end": "1965290"
  },
  {
    "text": "and the last thing a mocking framework will enable me to do is to check whether or not something was called now also a",
    "start": "1965290",
    "end": "1973059"
  },
  {
    "start": "1971000",
    "end": "2080000"
  },
  {
    "text": "good bad and ugly kind of situation the good is that they are mocking framework for C++ they want to begin with there",
    "start": "1973059",
    "end": "1980530"
  },
  {
    "text": "are mocking framework right now and we have quite a few now we didn't have a lot in the beginning all we are this",
    "start": "1980530",
    "end": "1986020"
  },
  {
    "text": "Google mock the bad thing is yeah everybody uses Google mock it's not a",
    "start": "1986020",
    "end": "1991330"
  },
  {
    "text": "bad mocking thermic in the beginning it was only the only one now today this year a couple of years last year's we",
    "start": "1991330",
    "end": "1998320"
  },
  {
    "text": "have a few more and you need to be boiled because the some of the oils are not maintained anymore and the ugly one",
    "start": "1998320",
    "end": "2007140"
  },
  {
    "text": "is that in most of them I'd still need to write quite a lot of code which I don't like because god I write is a KO",
    "start": "2007140",
    "end": "2012510"
  },
  {
    "text": "is code I need to maintain whenever my depends he has a new method the holes changes signature I need to change my",
    "start": "2012510",
    "end": "2018270"
  },
  {
    "text": "marks accordingly and most of them were written a while ago especially Google",
    "start": "2018270",
    "end": "2023610"
  },
  {
    "text": "Mach and they don't really look like triple-a it's not a range actor search",
    "start": "2023610",
    "end": "2029130"
  },
  {
    "text": "and they have a bunch of ideas that I don't really like for example you need to define all of the calls that will",
    "start": "2029130",
    "end": "2035700"
  },
  {
    "text": "happen in your system and then you write your tests and you write your Mach tell them I expect me today and let it be to",
    "start": "2035700",
    "end": "2041490"
  },
  {
    "text": "be called and someone changes the production code add another method another method call you don't care about that in your test but Google Mach will",
    "start": "2041490",
    "end": "2048898"
  },
  {
    "text": "be very angry with you about that and it will give you'll get warning or else",
    "start": "2048899",
    "end": "2054810"
  },
  {
    "text": "depending on how you initialize it and I don't care about that specific call someone had a call to my code didn't",
    "start": "2054810",
    "end": "2061350"
  },
  {
    "text": "change the flow I'm actually testing my test should continue to execute the same way and unfortunately that's not the way",
    "start": "2061350",
    "end": "2068580"
  },
  {
    "text": "we thought things should happen in way way back and these days modern mocking",
    "start": "2068580",
    "end": "2074340"
  },
  {
    "text": "framework doesn't do that anymore but in C++ some of them still do and",
    "start": "2074340",
    "end": "2081000"
  },
  {
    "start": "2080000",
    "end": "2196000"
  },
  {
    "text": "what do we have in C++ we have Google mock as I said come bundled with Google tests very good integration with one",
    "start": "2081000",
    "end": "2086310"
  },
  {
    "text": "another so usually when using Google tests people tend to use Google mock as well there's Tom plays written by beyond",
    "start": "2086310",
    "end": "2093750"
  },
  {
    "text": "was I think speaking in the next room and not supposed to the other one and",
    "start": "2093750",
    "end": "2099680"
  },
  {
    "text": "it's very similar to Google mock but a lot of modernizing done there it's a single header deployment as well and",
    "start": "2099680",
    "end": "2106220"
  },
  {
    "text": "there are some ideas I think are good in hindsight some of them I think he made a",
    "start": "2106220",
    "end": "2112050"
  },
  {
    "text": "mistake I think he did the right choice there and it's very interesting to use there's hippo mock which still around",
    "start": "2112050",
    "end": "2118980"
  },
  {
    "text": "but I haven't seen it been updated for some time and there's one innovative one",
    "start": "2118980",
    "end": "2124410"
  },
  {
    "text": "called fake it fake it although doesn't mock everything just like Google mock it will only mock your virtual functions",
    "start": "2124410",
    "end": "2131040"
  },
  {
    "text": "and you can't have multiple inheritance but you don't need to write classes it will automatically in the background do",
    "start": "2131040",
    "end": "2138300"
  },
  {
    "text": "some magic to create your mocks class and there's isolator plus plus disclaimer used to work for that company",
    "start": "2138300",
    "end": "2145730"
  },
  {
    "text": "which does something completely different it uses a runtime instrumentation to change your actual",
    "start": "2145730",
    "end": "2152010"
  },
  {
    "text": "code during runtime to do absolutely nothing for you cost money quite a bit",
    "start": "2152010",
    "end": "2157200"
  },
  {
    "text": "but you might want to use that because you don't want to refactor your code and you have a lot of legacy code it might",
    "start": "2157200",
    "end": "2163770"
  },
  {
    "text": "be a good option it used to be a Windows only kind of solution but they have Linux for the last year or so and you",
    "start": "2163770",
    "end": "2171300"
  },
  {
    "text": "might want to check it I didn't get a lot of experience with it I don't get any money out of it so don't worry about",
    "start": "2171300",
    "end": "2178050"
  },
  {
    "text": "that and essentially it takes all the pain away when it works and you should",
    "start": "2178050",
    "end": "2184980"
  },
  {
    "text": "check if it works for your project it won't work on all platforms and it does",
    "start": "2184980",
    "end": "2191820"
  },
  {
    "text": "a lot of magic in the background dependent on your operating system of choice let's see those quickly run on so",
    "start": "2191820",
    "end": "2203720"
  },
  {
    "start": "2196000",
    "end": "2699000"
  },
  {
    "text": "going up here let's start with Google Mach always a good place to start I show",
    "start": "2203720",
    "end": "2208830"
  },
  {
    "text": "the similar I showed the same one yesterday actually this is Google test and here I have effect data access now",
    "start": "2208830",
    "end": "2216990"
  },
  {
    "text": "in Google Mach you have to write your fake objects you have to inherent the objects you want to override this method",
    "start": "2216990",
    "end": "2224210"
  },
  {
    "text": "get data is inside the data access and I'll override it using Google mocks",
    "start": "2224210",
    "end": "2230250"
  },
  {
    "text": "macros that was an essentially enable me to change the behavior of that method in",
    "start": "2230250",
    "end": "2235589"
  },
  {
    "text": "the test in the test I can tell it what to do but I do have to write the code to do that this is the bare minimum I need",
    "start": "2235589",
    "end": "2242880"
  },
  {
    "text": "to write essentially it's a constant method with no parameters called get data and it returned a pair of twins and",
    "start": "2242880",
    "end": "2249810"
  },
  {
    "text": "I know the someone in the code that said not to use pairs but that is a demo that's so it's fine and similarly I have",
    "start": "2249810",
    "end": "2259650"
  },
  {
    "text": "a fake REST API client that we named sorry and it inherited a REST API client",
    "start": "2259650",
    "end": "2265890"
  },
  {
    "text": "I'll do some trickery with the constructor not to call it and so it won't connect to a server or anything",
    "start": "2265890",
    "end": "2271560"
  },
  {
    "text": "and here I have a method with bad little cottage to beget returns the string and gain get a string on the way",
    "start": "2271560",
    "end": "2278730"
  },
  {
    "text": "and the test which I'm going to use for all my different examples is my data",
    "start": "2278730",
    "end": "2285599"
  },
  {
    "text": "base returns dispel and I do that with Google mock by using expect call and I",
    "start": "2285599",
    "end": "2291359"
  },
  {
    "text": "expected I expect that when I Hall get data it will repeatedly always return this data",
    "start": "2291359",
    "end": "2298109"
  },
  {
    "text": "I can tell it to for an exception of an Kazu code up to me the quite a lot of options there but this is what I need",
    "start": "2298109",
    "end": "2305070"
  },
  {
    "text": "here and I also expect macfay client to call HTP get with this specifics drink",
    "start": "2305070",
    "end": "2312660"
  },
  {
    "text": "and that's it at least once because in google mock verifying and setting the",
    "start": "2312660",
    "end": "2319260"
  },
  {
    "text": "behavior is done in the same place which I don't like I think they should be divided and but here I tell it not only",
    "start": "2319260",
    "end": "2325830"
  },
  {
    "text": "you should return the number three as a string but unless that call was made at",
    "start": "2325830",
    "end": "2331800"
  },
  {
    "text": "least once the test should fail okay this is what I'm doing here if you you",
    "start": "2331800",
    "end": "2338310"
  },
  {
    "text": "never see in a mocking form of before it's a bit complex technical while to wrap your head around this but",
    "start": "2338310",
    "end": "2344130"
  },
  {
    "text": "essentially that's all he can do what the mocking framework and then I'll create a new calculator and calculate",
    "start": "2344130",
    "end": "2351210"
  },
  {
    "text": "the next data and I found that running it in debug will probably help explain",
    "start": "2351210",
    "end": "2357210"
  },
  {
    "text": "what happens there so if al Ron I'll get to the actual code I'm testing you see",
    "start": "2357210",
    "end": "2362609"
  },
  {
    "text": "there's no assert ill because I have no state to actually check because I faked out the database and the server so what",
    "start": "2362609",
    "end": "2370349"
  },
  {
    "text": "I need to check is that the server was called if your test is that if the user",
    "start": "2370349",
    "end": "2375510"
  },
  {
    "text": "is valid send an email you want to check that the email was sent but there's no email or just faked it out so I want to",
    "start": "2375510",
    "end": "2381480"
  },
  {
    "text": "check that the method call sent in the email client was called so no certs so",
    "start": "2381480",
    "end": "2386550"
  },
  {
    "text": "the test looked a bit strange and if I",
    "start": "2386550",
    "end": "2391890"
  },
  {
    "text": "go in this is the code I'm testing very trivial I will never test this code in real production systems but hiland get",
    "start": "2391890",
    "end": "2399000"
  },
  {
    "text": "that access I'll get data back and the data is essentially exactly what I told him to want into that's what I said but",
    "start": "2399000",
    "end": "2405780"
  },
  {
    "text": "that's what happens and here I'll build the some sort of string and run HTTP GET with",
    "start": "2405780",
    "end": "2412890"
  },
  {
    "text": "that string and now the test basically is over I don't really care what happens",
    "start": "2412890",
    "end": "2418200"
  },
  {
    "text": "after that because this is a fake object I told him what to do just for the test to pass and not fail but the actual",
    "start": "2418200",
    "end": "2424620"
  },
  {
    "text": "result of the test is here inside the test which is very powerful because I get to test things that are deep inside",
    "start": "2424620",
    "end": "2430770"
  },
  {
    "text": "my code I don't need some value I'll just test something was cold and",
    "start": "2430770",
    "end": "2436160"
  },
  {
    "text": "obviously I needed to initialize the class with those fake objects beforehand I did construct an injection to do that",
    "start": "2436160",
    "end": "2443370"
  },
  {
    "text": "but that is part of using mocks and this is how you do a tool Google mock now",
    "start": "2443370",
    "end": "2449220"
  },
  {
    "text": "with trample a it's very similar the",
    "start": "2449220",
    "end": "2455040"
  },
  {
    "text": "actual test will look about the same with different values Hill is connecting",
    "start": "2455040",
    "end": "2460830"
  },
  {
    "text": "I told you that Google mock and Google tests are tightly coupled and they're not at the couple well integrated is the",
    "start": "2460830",
    "end": "2466920"
  },
  {
    "text": "word I'm looking for so you don't need to do that but any other mocking thermic you need to tell the unit testing",
    "start": "2466920",
    "end": "2472260"
  },
  {
    "text": "framework we have a problem and that's what I'm doing here I copied that from the site don't worry you don't need to",
    "start": "2472260",
    "end": "2478230"
  },
  {
    "text": "remember that and this is essentially the same test you see allow Co blah blah blah blah",
    "start": "2478230",
    "end": "2484350"
  },
  {
    "text": "return and the quail call for expectation so we have two different ApS but it is about the same and if you look",
    "start": "2484350",
    "end": "2492290"
  },
  {
    "text": "it's fake it in fake it the nice thing is that I don't have any fake classes it",
    "start": "2492290",
    "end": "2500370"
  },
  {
    "text": "will do that for me as long as all the method calls up your virtual and in fact",
    "start": "2500370",
    "end": "2505890"
  },
  {
    "text": "it all I need to say is mock with that access and I'll get a magic class already mocked so I don't need to write",
    "start": "2505890",
    "end": "2513360"
  },
  {
    "text": "classes and if they change I don't need to change all my tests and when he",
    "start": "2513360",
    "end": "2519390"
  },
  {
    "text": "method HTTP GET is called return free I find it to be more streamlined to read",
    "start": "2519390",
    "end": "2524790"
  },
  {
    "text": "it this way but I am coming from other languages and that's how we do it in dotnet and Java and I used to work for",
    "start": "2524790",
    "end": "2531510"
  },
  {
    "text": "mocking company for a company that made mocking frameworks and that's the API we liked and the verify checking that the",
    "start": "2531510",
    "end": "2538530"
  },
  {
    "text": "method was called is done in the end just like an assert which I like as well it's more clear",
    "start": "2538530",
    "end": "2544680"
  },
  {
    "text": "understandable what I'm testing you because it comes at the end I'm checking",
    "start": "2544680",
    "end": "2550320"
  },
  {
    "text": "that HD Paquette was called at least once and if we go to isolate applause",
    "start": "2550320",
    "end": "2559290"
  },
  {
    "text": "this is a completely different beast first of all you don't need to create any classes because it doesn't use any",
    "start": "2559290",
    "end": "2564660"
  },
  {
    "text": "classes it actually uses your real class it just changes the way it walks didn't",
    "start": "2564660",
    "end": "2571020"
  },
  {
    "text": "run time so I have here an address and a fake it but not only did I fake it for",
    "start": "2571020",
    "end": "2577020"
  },
  {
    "text": "whatever I have in this test I faked all the future instances anywhere you write",
    "start": "2577020",
    "end": "2582780"
  },
  {
    "text": "new with that class this is immensely powerful it only depends the injection because I told him",
    "start": "2582780",
    "end": "2589680"
  },
  {
    "text": "that fake address God City will return London if I'll takes a card res and try",
    "start": "2589680",
    "end": "2595410"
  },
  {
    "text": "to run it fake address get city and run",
    "start": "2595410",
    "end": "2601320"
  },
  {
    "text": "it then as you can tell I'll get an empty string right but once",
    "start": "2601320",
    "end": "2610140"
  },
  {
    "text": "I pass this line like so and do the same thing again then magically and this is a",
    "start": "2610140",
    "end": "2621119"
  },
  {
    "text": "real class I haven't created a fake object it will return London you see I'm using an actual address not just a point",
    "start": "2621119",
    "end": "2627630"
  },
  {
    "text": "of the class now what is really cool is when I call get a dress form City",
    "start": "2627630",
    "end": "2634410"
  },
  {
    "text": "Factory whatever then it will use a singleton returning that responded",
    "start": "2634410",
    "end": "2641310"
  },
  {
    "text": "singleton there's an actual new inside we can run all the way there it will new",
    "start": "2641310",
    "end": "2646619"
  },
  {
    "text": "a singleton and if we go like so past the singleton that singleton essentially",
    "start": "2646619",
    "end": "2653160"
  },
  {
    "text": "is fact as well because I told him whatever used an address and its name is",
    "start": "2653160",
    "end": "2658730"
  },
  {
    "text": "singleton now singleton get city and",
    "start": "2658730",
    "end": "2665630"
  },
  {
    "text": "this is a class I just need it will attend London as well and this is a",
    "start": "2665630",
    "end": "2671010"
  },
  {
    "text": "machine and it might Wharf your money okay I have no opinion at least on the topic basically depending on your",
    "start": "2671010",
    "end": "2678270"
  },
  {
    "text": "project and this is powerful capabilities that you can harness",
    "start": "2678270",
    "end": "2683630"
  },
  {
    "text": "especially if your code is legacy code with the law without any dependency injection lot of things stuck together",
    "start": "2683630",
    "end": "2690599"
  },
  {
    "text": "huge monolith might save you some time a lot of time it much might be worth it",
    "start": "2690599",
    "end": "2696170"
  },
  {
    "text": "and again not affiliated with them so that's it now in C++ we have something",
    "start": "2696170",
    "end": "2703980"
  },
  {
    "start": "2699000",
    "end": "2843000"
  },
  {
    "text": "going for us um does the multiple assert dilemma I've heard about the the single",
    "start": "2703980",
    "end": "2709080"
  },
  {
    "text": "assault whole every test should have only single assert it is not a rule never written anywhere but it is true",
    "start": "2709080",
    "end": "2715260"
  },
  {
    "text": "because the most things are testing the test the test will be more complex but sometimes my assert is actually a",
    "start": "2715260",
    "end": "2721650"
  },
  {
    "text": "singular self eaten several times for example consider this example I am",
    "start": "2721650",
    "end": "2727140"
  },
  {
    "text": "taking a string and I pass that string and I get a result back a single result but it has a lot of aspects it's a movie",
    "start": "2727140",
    "end": "2734040"
  },
  {
    "text": "it's I as an IMDB ID a title a plot and minimum length okay I want to test all",
    "start": "2734040",
    "end": "2743460"
  },
  {
    "text": "of those I don't need for tests to test that now in other languages like C sharp",
    "start": "2743460",
    "end": "2749160"
  },
  {
    "text": "and Java L I might have a problem because assertions there will for an exception that I would they walk luckily",
    "start": "2749160",
    "end": "2755250"
  },
  {
    "text": "for me at least all of the unit s in from okay so in simplest ass doesn't do that which means that right now the test",
    "start": "2755250",
    "end": "2762599"
  },
  {
    "text": "is a problem because if I run the test distant from the command line you see it failed and he failed because the movie",
    "start": "2762599",
    "end": "2768089"
  },
  {
    "text": "name was not right it was wrong it wasn't what I expected but I have no clue about the rest of their assertions",
    "start": "2768089",
    "end": "2774690"
  },
  {
    "text": "whether or not they failed or passed and I like to get as much information as I can get and for that I can use something",
    "start": "2774690",
    "end": "2781800"
  },
  {
    "text": "else and all of those I just show you have the same capability and that instead of cell to use some other world",
    "start": "2781800",
    "end": "2787680"
  },
  {
    "text": "here they called expect expect says if the assertion fails continue till the",
    "start": "2787680",
    "end": "2793320"
  },
  {
    "text": "end and just in the end tell me about it and the reason we can do that is because those don't force an exception just like",
    "start": "2793320",
    "end": "2800280"
  },
  {
    "text": "C sharp or Java J unit that was written 1997 and no one has ever thought about changing that",
    "start": "2800280",
    "end": "2806310"
  },
  {
    "text": "ever seen but in surpluses we have so if I run the same test now that I change it to expect",
    "start": "2806310",
    "end": "2812059"
  },
  {
    "text": "insert the set and I need to compile C++ for you then you see I'll get a better",
    "start": "2812059",
    "end": "2819319"
  },
  {
    "text": "or message the movie name is not correct and the plot is not correct as well and",
    "start": "2819319",
    "end": "2825440"
  },
  {
    "text": "this is better because there's a difference between one property is not correct to all of the properties are not",
    "start": "2825440",
    "end": "2831799"
  },
  {
    "text": "correct and I don't want to write for tests because essentially I'm testing just one scene another cool thing about",
    "start": "2831799",
    "end": "2838039"
  },
  {
    "text": "unit testing for mocking C++ eye is that",
    "start": "2838039",
    "end": "2843730"
  },
  {
    "start": "2843000",
    "end": "2984000"
  },
  {
    "text": "it's movable in my belief because failures don't fall exception just like I show you you get better failure",
    "start": "2843730",
    "end": "2850609"
  },
  {
    "text": "message usually in C++ in any other language in my experience I don't know why and you have single powerful Excel",
    "start": "2850609",
    "end": "2857059"
  },
  {
    "text": "assert when going to catch and all its derivative which also I find very useful but there's another thing I like about",
    "start": "2857059",
    "end": "2863089"
  },
  {
    "text": "catch in that section anyone here is familiar with test fixtures setup and",
    "start": "2863089",
    "end": "2869270"
  },
  {
    "text": "teardown if we look at the same example from yesterday in any unit testing",
    "start": "2869270",
    "end": "2875900"
  },
  {
    "text": "framework J unit and unit all of those I have the ability to define special methods that will run before every test",
    "start": "2875900",
    "end": "2882770"
  },
  {
    "text": "and after every test I do to enable code reuse or initialize my system and do",
    "start": "2882770",
    "end": "2889400"
  },
  {
    "text": "things that so I don't need to do them in my tests so if I write it here and heal the setup and the tail down then I",
    "start": "2889400",
    "end": "2897770"
  },
  {
    "text": "don't need to write it in my tests and the tests look better unfortunately I think it's a bad solution and by the way",
    "start": "2897770",
    "end": "2905089"
  },
  {
    "text": "a lot of consultant will think the exact opposite but i I've seen people mess this up",
    "start": "2905089",
    "end": "2912109"
  },
  {
    "text": "because first of all a new developer who come you want a different behavior I'll write it here and mess up your tests",
    "start": "2912109",
    "end": "2918170"
  },
  {
    "text": "second of all when this test here will fail you start doing this go up go down",
    "start": "2918170",
    "end": "2923210"
  },
  {
    "text": "go up go down try to combine the test in your head and in catch they did",
    "start": "2923210",
    "end": "2928460"
  },
  {
    "text": "something completely different although it does support the feature if you want to catch they have something called",
    "start": "2928460",
    "end": "2933920"
  },
  {
    "text": "sections and sections essentially is writing a mini test inside your test you",
    "start": "2933920",
    "end": "2940160"
  },
  {
    "text": "see as the initialization he'll and I have this section that will run and have another",
    "start": "2940160",
    "end": "2945680"
  },
  {
    "text": "section he'll and they will run individually in different execution times if one fail and the other passes",
    "start": "2945680",
    "end": "2952579"
  },
  {
    "text": "that's fine I'll get those results it's not like writing everything in the same test and I haven't found a good way to",
    "start": "2952579",
    "end": "2959029"
  },
  {
    "text": "do that in manage languages because C++ is more powerful and not in a good way anyway and those section enable me to",
    "start": "2959029",
    "end": "2968319"
  },
  {
    "text": "write better code and when developers start with section inside the fixtures they usually write better tests as well",
    "start": "2968319",
    "end": "2974450"
  },
  {
    "text": "in my experience so this is why I like unit testing framework in C++ and I",
    "start": "2974450",
    "end": "2980960"
  },
  {
    "text": "think that you actually can do a better job with those so how do you choose there's so much things so many things to",
    "start": "2980960",
    "end": "2987619"
  },
  {
    "start": "2984000",
    "end": "3152000"
  },
  {
    "text": "choose form first of all decide whether or not you need multi-platform support some of those don't support your",
    "start": "2987619",
    "end": "2993140"
  },
  {
    "text": "platform of choice most of them will but for example Microsoft in testing thermic only works in Windows so you have to",
    "start": "2993140",
    "end": "3000430"
  },
  {
    "text": "think about that second of which is it maintained go into the Gaeta page see",
    "start": "3000430",
    "end": "3005619"
  },
  {
    "text": "when was the last commit check whether or not it has documentation documentation usually a good way to",
    "start": "3005619",
    "end": "3011380"
  },
  {
    "text": "check whether or not the project is maintained or not if it has like an extensive documentation says someone",
    "start": "3011380",
    "end": "3016539"
  },
  {
    "text": "really cares about it ease of use how is it for me to write tests how is it to",
    "start": "3016539",
    "end": "3022960"
  },
  {
    "text": "use the unit testing framework deployment twice and execution-wise how can you survive just this test what",
    "start": "3022960",
    "end": "3031119"
  },
  {
    "text": "happens when the tests fail Co test fail and see if the error message makes any sense for you and the",
    "start": "3031119",
    "end": "3036880"
  },
  {
    "text": "integration point in your environment development and your build system are very important and also between your",
    "start": "3036880",
    "end": "3043690"
  },
  {
    "text": "mocking the framework and your unit testing framework as well and finally your personal taste because we are",
    "start": "3043690",
    "end": "3051369"
  },
  {
    "text": "different I like H but doesn't that doesn't matter because you might like something completely different you might",
    "start": "3051369",
    "end": "3057279"
  },
  {
    "text": "like metal for example because it makes everybody look at you differently because I haven't showered in time",
    "start": "3057279",
    "end": "3063730"
  },
  {
    "text": "because I didn't have a lot of time but just a quick glance you'll understand what I'm talking about",
    "start": "3063730",
    "end": "3071069"
  },
  {
    "text": "Google the metal this is test with metal",
    "start": "3071070",
    "end": "3076280"
  },
  {
    "text": "okay okay some people actually like the",
    "start": "3076280",
    "end": "3081990"
  },
  {
    "text": "syntax some don't and that's fine if you like lambdas you might like it better",
    "start": "3081990",
    "end": "3088010"
  },
  {
    "text": "it's up to you and you might like extremely plus plus because you come in",
    "start": "3088010",
    "end": "3093300"
  },
  {
    "text": "from that metal Java and it looks exactly the same again your choice just make sure it's maintained and finally",
    "start": "3093300",
    "end": "3102450"
  },
  {
    "text": "for those of you not writing any unit s you have two options in the middle of the night trying to tackle a bug in the",
    "start": "3102450",
    "end": "3108570"
  },
  {
    "text": "West yet you have to option being frustrated cause the language be really annoyed with whoever wrote the code or",
    "start": "3108570",
    "end": "3114090"
  },
  {
    "text": "start writing unit tests and it's essentially your choice yeah always like",
    "start": "3114090",
    "end": "3119250"
  },
  {
    "text": "to leave people with some current some quote I miss poor miss right vote from a",
    "start": "3119250",
    "end": "3125700"
  },
  {
    "text": "movie so thank you very much the examples are there under my user in",
    "start": "3125700",
    "end": "3131520"
  },
  {
    "text": "github and you feel free to college me in Twitter on my blog and if you have",
    "start": "3131520",
    "end": "3138120"
  },
  {
    "text": "any question I'll be here at least until the afternoon you can come in ask me be",
    "start": "3138120",
    "end": "3143460"
  },
  {
    "text": "happy to answer thank you for listening it's been a while [Applause]",
    "start": "3143460",
    "end": "3154538"
  }
]