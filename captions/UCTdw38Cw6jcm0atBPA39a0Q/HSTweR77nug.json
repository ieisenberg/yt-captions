[
  {
    "text": "right well hello and welcome to this talk about point free programming in",
    "start": "8960",
    "end": "16460"
  },
  {
    "text": "JavaScript my name is Damian and I'll be entertaining you in the next hour with",
    "start": "16460",
    "end": "22259"
  },
  {
    "text": "this mini mini workshop on point free programming a little bit about me I run",
    "start": "22259",
    "end": "31110"
  },
  {
    "text": "a small london-based consultancy that helps people build better software by",
    "start": "31110",
    "end": "36600"
  },
  {
    "text": "providing training and consulting services and we mostly focus around web",
    "start": "36600",
    "end": "42149"
  },
  {
    "text": "technologies so I'd like to start with a",
    "start": "42149",
    "end": "47579"
  },
  {
    "text": "little bit of history because today is the year 2019 and it is a hundred year",
    "start": "47579",
    "end": "55620"
  },
  {
    "text": "anniversary of a foundation of Bauhaus",
    "start": "55620",
    "end": "61429"
  },
  {
    "text": "which was founded by this fella this guy Walter Gropius",
    "start": "61429",
    "end": "66450"
  },
  {
    "text": "in Germany in 1919 so it was just after",
    "start": "66450",
    "end": "71640"
  },
  {
    "text": "the World War one and it's really interesting how it all came to be",
    "start": "71640",
    "end": "78390"
  },
  {
    "text": "because it all started when he asked himself a question is it possible to",
    "start": "78390",
    "end": "83730"
  },
  {
    "text": "build beautiful things without ornaments can you make things intrinsically",
    "start": "83730",
    "end": "90660"
  },
  {
    "text": "beautiful without actually having beauty as the ADI on something that you just slap on later and this is also similar",
    "start": "90660",
    "end": "103740"
  },
  {
    "text": "with this other movement called new objectivity where the idea was to try and build nice things for as many people",
    "start": "103740",
    "end": "110910"
  },
  {
    "text": "as possible and they realized that basically the only way to do that is to",
    "start": "110910",
    "end": "118290"
  },
  {
    "text": "have reusable parts like lots of lots of reusable parts and then you can scale this thing and and build a lot of things",
    "start": "118290",
    "end": "127140"
  },
  {
    "text": "and make a lot of people happy and will actually come back to this idea of reusable parts or molecules and and how",
    "start": "127140",
    "end": "134310"
  },
  {
    "text": "we build things from smaller from smaller things so this is an important idea",
    "start": "134310",
    "end": "140230"
  },
  {
    "text": "and I'll also give you another example",
    "start": "140230",
    "end": "145450"
  },
  {
    "text": "of this approach where you basically put certain limitation in place and then",
    "start": "145450",
    "end": "150890"
  },
  {
    "text": "that forces you to find new ways of doing things and new explore new ways of of thinking it's a it's about a jazz",
    "start": "150890",
    "end": "158930"
  },
  {
    "text": "concert by kids to that and it's called the cold cup concert or cologne as they",
    "start": "158930",
    "end": "164090"
  },
  {
    "text": "would say in English and what's really interesting about this concert is that",
    "start": "164090",
    "end": "169840"
  },
  {
    "text": "there was a little bit of misunderstanding between the concert on gras organizers and and and Keith and",
    "start": "169840",
    "end": "175450"
  },
  {
    "text": "basically what happens is they ordered the wrong piano and the piano that was",
    "start": "175450",
    "end": "180590"
  },
  {
    "text": "delivered to the concert hall was out of tune and much smaller than a proper John piano and they spent hours and I was",
    "start": "180590",
    "end": "187700"
  },
  {
    "text": "trying to kind of tune it and make it work but to no avail and he nearly",
    "start": "187700",
    "end": "194739"
  },
  {
    "text": "rejected to perform but a German lady who was a concert organised I managed to",
    "start": "194739",
    "end": "200510"
  },
  {
    "text": "convince him that he should actually actually do it and the problem with piano was that it was only the sort of middle register that was working",
    "start": "200510",
    "end": "206810"
  },
  {
    "text": "correctly the the highs were pretty much non-existent and the lows were also very",
    "start": "206810",
    "end": "211850"
  },
  {
    "text": "very weak so basically he could only play with half half the piano she's a",
    "start": "211850",
    "end": "216950"
  },
  {
    "text": "massive massive limitation what happened is this became the most sold piano",
    "start": "216950",
    "end": "223700"
  },
  {
    "text": "concert record in the history of music and also the most sold jazz album in history music because he had to",
    "start": "223700",
    "end": "230239"
  },
  {
    "text": "improvise and improvise in such a way that basically the hide the deficiency of the instrument and he was he was",
    "start": "230239",
    "end": "235459"
  },
  {
    "text": "playing and this is a really interesting idea of how you can discover new things",
    "start": "235459",
    "end": "244519"
  },
  {
    "text": "you basically put a certain limitation in place and then try and do things in",
    "start": "244519",
    "end": "249560"
  },
  {
    "text": "different ways and see what do you what do you uncover sometimes that useful sometimes sometimes it's not but it's",
    "start": "249560",
    "end": "255859"
  },
  {
    "text": "actually the process of discovery that makes the whole thing interesting so we",
    "start": "255859",
    "end": "264410"
  },
  {
    "text": "can try and do the same thing with any sort of programming language including",
    "start": "264410",
    "end": "270860"
  },
  {
    "text": "JavaScript so one of the things we could try we could go the same way as Keith did and say",
    "start": "270860",
    "end": "276830"
  },
  {
    "text": "well can I actually write programs with a broken keyboard which is not very",
    "start": "276830",
    "end": "283760"
  },
  {
    "text": "useful enterprise unless you obviously use one of the new kettle laptops which are so prone to breaking breaking case",
    "start": "283760",
    "end": "292540"
  },
  {
    "text": "and it turns out that this is actually possible again this might not be the most useful useful thing but it is",
    "start": "292540",
    "end": "298910"
  },
  {
    "text": "actually possible it turns out you can write any JavaScript program by only",
    "start": "298910",
    "end": "304370"
  },
  {
    "text": "using six different characters okay and all the only characters you need are",
    "start": "304370",
    "end": "309530"
  },
  {
    "text": "open and closed bracket open and closed square bracket the plus symbol and the exclamation mark and any kind of",
    "start": "309530",
    "end": "315500"
  },
  {
    "text": "JavaScript Algrim can be built by only using these six six characters are actually going to show you a beauty",
    "start": "315500",
    "end": "323930"
  },
  {
    "text": "anyone has an idea what this JavaScript program does well it's a bit hard to",
    "start": "323930",
    "end": "329840"
  },
  {
    "text": "tell from from this but let's let's try and run it in the chrome dev tools and see see what happens so I'm just gonna",
    "start": "329840",
    "end": "335960"
  },
  {
    "text": "make this a little bit bigger and paste that thing in and then when you run it",
    "start": "335960",
    "end": "344990"
  },
  {
    "text": "you actually get a perfectly working implementation of the fizzbuzz yeah",
    "start": "344990",
    "end": "351940"
  },
  {
    "text": "which is amazing so basically next time when you interviewing and someone asks",
    "start": "351940",
    "end": "358100"
  },
  {
    "text": "you you know what are your biggest strengths you know don't go I can",
    "start": "358100",
    "end": "364130"
  },
  {
    "text": "perform under pressure or Bohemian Rhapsody or whatever you can say I can",
    "start": "364130",
    "end": "369770"
  },
  {
    "text": "write any JavaScript program by only using six characters yeah it's instant",
    "start": "369770",
    "end": "375560"
  },
  {
    "text": "hire hundred percent hundred percent so that's that's one one thing we might try",
    "start": "375560",
    "end": "382780"
  },
  {
    "text": "I'll give you some other some other ideas so another thing we could possibly",
    "start": "382780",
    "end": "390200"
  },
  {
    "text": "tries to build programs any kind of programs by only using anonymous",
    "start": "390200",
    "end": "396889"
  },
  {
    "text": "functions so basically don't use numbers don't use boolean's don't use for loops",
    "start": "396889",
    "end": "402650"
  },
  {
    "text": "if statement switch statements nothing you're only allowed to use an functions and see what do you sort of",
    "start": "402650",
    "end": "409039"
  },
  {
    "text": "uncover Oh or discover in in the process and if you leave really kind of lucky or smart you've discovered something called",
    "start": "409039",
    "end": "416179"
  },
  {
    "text": "lambda lambda calculus so it is possible to write any program by only using",
    "start": "416179",
    "end": "421909"
  },
  {
    "text": "anonymous anonymous functions or you can ask yourself how do I build programs",
    "start": "421909",
    "end": "427489"
  },
  {
    "text": "without null checks how do I program without nulls or how can I build stuff by not having any side effects in my in",
    "start": "427489",
    "end": "437029"
  },
  {
    "text": "my code obviously some of these things are not possible because you in order to do anything useful you have to have side",
    "start": "437029",
    "end": "442039"
  },
  {
    "text": "effects but you can then say well that's fine but how about if I minimize the",
    "start": "442039",
    "end": "447979"
  },
  {
    "text": "amount of code that is performing side-effects and try and do as much as possible by having code that has no",
    "start": "447979",
    "end": "454369"
  },
  {
    "text": "visible nor visible side effects and then if you are lucky you might discover",
    "start": "454369",
    "end": "459679"
  },
  {
    "text": "something called Monat or or category theory or algebra but today we'll try a",
    "start": "459679",
    "end": "470389"
  },
  {
    "text": "different idea we'll try a different thing so the question is the question",
    "start": "470389",
    "end": "475939"
  },
  {
    "text": "that we would like to ask is what would programming in JavaScript look like if",
    "start": "475939",
    "end": "481610"
  },
  {
    "text": "you were not allowed to use the function keyword so basically you're not allowed to ever use either the function keyword",
    "start": "481610",
    "end": "489110"
  },
  {
    "text": "or use the fat arrow which is basically just the way of cheating and having functions with without having the",
    "start": "489110",
    "end": "495079"
  },
  {
    "text": "function keyword and that's exactly what a point free style programming is so",
    "start": "495079",
    "end": "501769"
  },
  {
    "text": "instead it's a little bit of fancy name because mathematicians call things in a different way so point is actually the",
    "start": "501769",
    "end": "509240"
  },
  {
    "text": "argument so basically point three means without naming the argument functions without without arguments so the idea is",
    "start": "509240",
    "end": "516078"
  },
  {
    "text": "can we build functions by only applying other functions and then combining some",
    "start": "516079",
    "end": "523250"
  },
  {
    "text": "existing existing functions so for example this these two functions which",
    "start": "523250",
    "end": "529550"
  },
  {
    "text": "both do the same thing one is built using normal functions the other one is using fat arrows they are not point free",
    "start": "529550",
    "end": "536930"
  },
  {
    "text": "because they both have two points so this function here has one",
    "start": "536930",
    "end": "542720"
  },
  {
    "text": "point called people and this function here has one point called person so this",
    "start": "542720",
    "end": "548750"
  },
  {
    "text": "is not what what we're after but we would like to be able to build this same program or algorithm but without ever",
    "start": "548750",
    "end": "556580"
  },
  {
    "text": "using the function the function keyword and the same happens here so the only difference is we're not using the",
    "start": "556580",
    "end": "562430"
  },
  {
    "text": "function keyword about we use the fat arrows and we have one point called PS which is people and we have another",
    "start": "562430",
    "end": "570290"
  },
  {
    "text": "point called P poor parameter or argument in this inner inner function",
    "start": "570290",
    "end": "576620"
  },
  {
    "text": "here so this is not what we're after what we're after is something like this",
    "start": "576620",
    "end": "581780"
  },
  {
    "text": "so basically if you inspect this bit of code you'll notice that at no point in",
    "start": "581780",
    "end": "586970"
  },
  {
    "text": "time we either have a function keyboard or a fat fat error so to start with this",
    "start": "586970",
    "end": "597400"
  },
  {
    "text": "let's let's create like a concrete problem that we want to solve and the",
    "start": "597400",
    "end": "603710"
  },
  {
    "text": "problem is given an array of people that",
    "start": "603710",
    "end": "609380"
  },
  {
    "text": "have names and ages and accounts with balances we would like to find the total",
    "start": "609380",
    "end": "614390"
  },
  {
    "text": "amount that is owed by all the adults in this array which in this concrete",
    "start": "614390",
    "end": "622340"
  },
  {
    "text": "example should be 6 because it's the only adults that owe money are Bob and",
    "start": "622340",
    "end": "627890"
  },
  {
    "text": "done and they owe 6 of something together all right so we can obviously",
    "start": "627890",
    "end": "635480"
  },
  {
    "text": "solve this in a point full way with points and one way to do this would be",
    "start": "635480",
    "end": "641390"
  },
  {
    "text": "to have this function that takes one parameter or point people and then it",
    "start": "641390",
    "end": "646700"
  },
  {
    "text": "starts with zero as a result and iterates through this array and if the person is over 18 and isn't that then we",
    "start": "646700",
    "end": "653300"
  },
  {
    "text": "subtract the balance from the result and finally return return the result and this would indeed give us number 6 as a",
    "start": "653300",
    "end": "660410"
  },
  {
    "text": "result or if you kind of more functionally inclined you can do this by",
    "start": "660410",
    "end": "666740"
  },
  {
    "text": "first filtering out the people that are adults",
    "start": "666740",
    "end": "672939"
  },
  {
    "text": "by using the filter method on the array and then filtering the ones that are in debt and then mapping and finding their",
    "start": "672939",
    "end": "680679"
  },
  {
    "text": "balances and then reducing this to a number by subtracting the debt from from",
    "start": "680679",
    "end": "687069"
  },
  {
    "text": "this from this accumulator so either of these two works the first one has one point people where is this program here",
    "start": "687069",
    "end": "695799"
  },
  {
    "text": "has actually four or five different points we'll have one called person another one called person and another",
    "start": "695799",
    "end": "701499"
  },
  {
    "text": "one called person actually we have the people as well and we have the account",
    "start": "701499",
    "end": "706629"
  },
  {
    "text": "and the balance so this one is even worse in terms of how many points how many points it has right so this is what",
    "start": "706629",
    "end": "714309"
  },
  {
    "text": "we are aiming for we'll try and we implement these functions but without ever using the function keyword right so",
    "start": "714309",
    "end": "721600"
  },
  {
    "text": "how do we do this how do we solve this problem well it's a really big problem to solve",
    "start": "721600",
    "end": "729309"
  },
  {
    "text": "and generally you have to have some sort of strategy as to how you solve problems",
    "start": "729309",
    "end": "734739"
  },
  {
    "text": "and my favorite one is when you have a big problem to solve which you don't know how to solve then you make a much",
    "start": "734739",
    "end": "740169"
  },
  {
    "text": "smaller problem that kind of resembles the original one but it's it's simpler and smaller so maybe when you solve the",
    "start": "740169",
    "end": "746110"
  },
  {
    "text": "simple one you learn from that and then go on and do bigger bigger things so the",
    "start": "746110",
    "end": "752439"
  },
  {
    "text": "simple problem that will solve is how to implement a function like this 1.3",
    "start": "752439",
    "end": "758769"
  },
  {
    "text": "there's a really really simple problem we were given a person and you want to find out what his ages and you have this",
    "start": "758769",
    "end": "765429"
  },
  {
    "text": "fat arrow function that just received achieve the property called age and we want to do this point 3 and the way",
    "start": "765429",
    "end": "773649"
  },
  {
    "text": "we'll do this is by blatantly cheating ok which is also another good strategy",
    "start": "773649",
    "end": "778959"
  },
  {
    "text": "like when you don't know how to solve the problem you cheat yeah so we'll",
    "start": "778959",
    "end": "785589"
  },
  {
    "text": "create this point free collection of",
    "start": "785589",
    "end": "790889"
  },
  {
    "text": "molecules these reusable or bits and pieces and component because obviously we don't know how to how to do this but",
    "start": "790889",
    "end": "797169"
  },
  {
    "text": "then we'll reframe the problem and say well I can't do it but without using any functions but maybe I can create",
    "start": "797169",
    "end": "805240"
  },
  {
    "text": "some functions and have a collection of reusable functions that are not point free because javascript is a language is",
    "start": "805240",
    "end": "811870"
  },
  {
    "text": "not designed to be as such but then when I create this set of molecules then from",
    "start": "811870",
    "end": "817630"
  },
  {
    "text": "that point on I'll be able to implement everything point three and this is what we do so we created this free point",
    "start": "817630",
    "end": "824970"
  },
  {
    "text": "collection of functions and at the get edge function here because we don't know how can we do it and then we implement",
    "start": "824970",
    "end": "833740"
  },
  {
    "text": "our get age original get age function by saying I take the person and do F P dot",
    "start": "833740",
    "end": "839260"
  },
  {
    "text": "H and pass the person and that would give me the property called age of this",
    "start": "839260",
    "end": "845670"
  },
  {
    "text": "person and every time you build a",
    "start": "845670",
    "end": "851200"
  },
  {
    "text": "function like this one a kitten dies it's a scientifically proven fact yeah",
    "start": "851200",
    "end": "857950"
  },
  {
    "text": "so every time you build a function like that a kitten dies why well because",
    "start": "857950",
    "end": "864630"
  },
  {
    "text": "let's look at what this function here does let's try and decipher what's going",
    "start": "864630",
    "end": "870100"
  },
  {
    "text": "on here so it's a function it takes one parameter called person and it then",
    "start": "870100",
    "end": "877000"
  },
  {
    "text": "applies another function called F P dot get age by passing that person as a",
    "start": "877000",
    "end": "882310"
  },
  {
    "text": "parameter capturing the result and then returning exactly the same value as F P dot get age returns and that's a really",
    "start": "882310",
    "end": "892540"
  },
  {
    "text": "really pointless thing because our get age function would always return exactly the same result if we pass the same",
    "start": "892540",
    "end": "898930"
  },
  {
    "text": "parameter as the function called F P dot H which means that we can reduce this to",
    "start": "898930",
    "end": "904660"
  },
  {
    "text": "just this we can say get age is equal to F P dot H we can get rid of the person",
    "start": "904660",
    "end": "910450"
  },
  {
    "text": "and the arrow and this person here because these these two functions are indistinguishable from one from one",
    "start": "910450",
    "end": "916390"
  },
  {
    "text": "another when you call them with same parameters you would always get the same the same result and this is our first",
    "start": "916390",
    "end": "925209"
  },
  {
    "text": "discover your first rule that we've uncovered it's it's it's a way of eliminating the pointless code basically",
    "start": "925209",
    "end": "931029"
  },
  {
    "text": "removing the functions that do nothing so here we have a function called F that",
    "start": "931029",
    "end": "936430"
  },
  {
    "text": "takes X and does some come tation and then we have a function called G that takes X and just",
    "start": "936430",
    "end": "943130"
  },
  {
    "text": "invokes F with an X and returns the same result and again another kitten dies because this function G is equal to the",
    "start": "943130",
    "end": "950930"
  },
  {
    "text": "function f for all intents and purposes they two are exactly the same exactly",
    "start": "950930",
    "end": "956900"
  },
  {
    "text": "the same function right so the rule we",
    "start": "956900",
    "end": "963740"
  },
  {
    "text": "came up with is that this expression here X arrow F applied onto X can always",
    "start": "963740",
    "end": "972560"
  },
  {
    "text": "mechanically be replaced by just F and it's a really really important rule yeah",
    "start": "972560",
    "end": "979640"
  },
  {
    "text": "is it it's it's trivially simple the rule but it's really really an important one so this is sort of one way how we",
    "start": "979640",
    "end": "985760"
  },
  {
    "text": "can remove arrows from our functions or our function keywords but basically just use other other functions and this is",
    "start": "985760",
    "end": "992090"
  },
  {
    "text": "called etta after conversion if you know lambda calculus this is one of the",
    "start": "992090",
    "end": "998990"
  },
  {
    "text": "transformations inside the the lambda but you can do it inside the lambda lambda calculus there are actually",
    "start": "998990",
    "end": "1006490"
  },
  {
    "text": "examples when you want to do the other way around but that's a topic for a completely different different talk",
    "start": "1006490",
    "end": "1011740"
  },
  {
    "text": "anyway and what's really surprising about this",
    "start": "1011740",
    "end": "1017340"
  },
  {
    "text": "occurrence is that it actually happens a lot like if you were to go around and",
    "start": "1017760",
    "end": "1023380"
  },
  {
    "text": "check the code and github like randomly open source files and on github this happens a lot like this this kind of",
    "start": "1023380",
    "end": "1030640"
  },
  {
    "text": "problem so I'll give you one example I found this bit of code when I was playing with some hooks library it's got",
    "start": "1030640",
    "end": "1038860"
  },
  {
    "text": "a new fashionable thing in the react community and now lots of reusable hooks",
    "start": "1038860",
    "end": "1045760"
  },
  {
    "text": "libraries are popping up and one of them has this hook or a function called use mount which is implemented like like",
    "start": "1045760",
    "end": "1052930"
  },
  {
    "text": "this I simplify things a little bit by only removing import and export the stuff that we don't care about but this",
    "start": "1052930",
    "end": "1058780"
  },
  {
    "text": "is basically what the use multi function does and how it's how its implemented",
    "start": "1058780",
    "end": "1064240"
  },
  {
    "text": "then when we look at this we can now search for these reductions that we can",
    "start": "1064240",
    "end": "1071680"
  },
  {
    "text": "perform mechanic and we need look no further than here",
    "start": "1071680",
    "end": "1077220"
  },
  {
    "text": "because this is exactly the same scenario that we have on a previous slide we have a function that in this",
    "start": "1077220",
    "end": "1082480"
  },
  {
    "text": "case takes no parameters and then invokes another function and also passes no parameters and returns the same",
    "start": "1082480",
    "end": "1088170"
  },
  {
    "text": "result which means that we can reduce this to just that so use mount FN and",
    "start": "1088170",
    "end": "1094780"
  },
  {
    "text": "then use effect FN but we don't stop here so now we look into this we can",
    "start": "1094780",
    "end": "1099940"
  },
  {
    "text": "perform another reduction because this expression here is exactly the same",
    "start": "1099940",
    "end": "1105340"
  },
  {
    "text": "thing we take its a function that takes a parameter and then invokes another function by passing that same parameter",
    "start": "1105340",
    "end": "1112870"
  },
  {
    "text": "and returning the same result which means that we can simplify this even further to just that which then begs the",
    "start": "1112870",
    "end": "1118929"
  },
  {
    "text": "question well do we actually need these two hooks because they do always exactly the same things just a different name for the same for the same thing and once",
    "start": "1118929",
    "end": "1127720"
  },
  {
    "text": "you internalize this out idea you just gonna start seeing this a lot everywhere",
    "start": "1127720",
    "end": "1133780"
  },
  {
    "text": "so you know save the kittens don't do that do the Etta at the conversion okay so",
    "start": "1133780",
    "end": "1140500"
  },
  {
    "text": "now we can go back to our problem and we can say well age is fine what if I want",
    "start": "1140500",
    "end": "1148780"
  },
  {
    "text": "to retrieve a property called balance well I also don't know how to do that so I'm gonna add that function to my point",
    "start": "1148780",
    "end": "1156340"
  },
  {
    "text": "three three point library but this then becomes a little bit nasty because this",
    "start": "1156340",
    "end": "1161830"
  },
  {
    "text": "means that we're just gonna carry on cheating and keep adding new functions every time we want to retrieve a",
    "start": "1161830",
    "end": "1167500"
  },
  {
    "text": "different property but what we developers are really good at we're",
    "start": "1167500",
    "end": "1172630"
  },
  {
    "text": "really good at spotting patterns and automating Thanks so what we can do here is we can say well how about we create a",
    "start": "1172630",
    "end": "1179830"
  },
  {
    "text": "function that can automatically create exactly these type of functions that",
    "start": "1179830",
    "end": "1186010"
  },
  {
    "text": "that we need like a factory so so I don't have to add a new one every time I",
    "start": "1186010",
    "end": "1192220"
  },
  {
    "text": "actually have a means of creating new ones every time I need one and that's exactly what happens here we create this",
    "start": "1192220",
    "end": "1198700"
  },
  {
    "text": "function called pick that takes the name of the property that we want to retrieve",
    "start": "1198700",
    "end": "1204550"
  },
  {
    "text": "and then returns a function that would always return the value of the property",
    "start": "1204550",
    "end": "1209710"
  },
  {
    "text": "with that name for whichever object you pass in as a as a parameter and then we can say get a G's FP pick",
    "start": "1209710",
    "end": "1216610"
  },
  {
    "text": "age and get Balances FP pick balance which is a lot better because now we have only one molecule called pick and",
    "start": "1216610",
    "end": "1224559"
  },
  {
    "text": "by using that monic molecule we're just applying it we can create a function that can retrieve any property from any",
    "start": "1224559",
    "end": "1230940"
  },
  {
    "text": "object we want so that's a that's a progress that's good and now just one",
    "start": "1230940",
    "end": "1241570"
  },
  {
    "text": "more time don't use F P dot pick like this because the kitten dies perform the",
    "start": "1241570",
    "end": "1250450"
  },
  {
    "text": "etta production when you do it you're just gonna get back to this exact previous previous solution so the idea",
    "start": "1250450",
    "end": "1257620"
  },
  {
    "text": "here is that this whole thing here is a function so if you abstract away how",
    "start": "1257620",
    "end": "1262750"
  },
  {
    "text": "that function is implemented what it does it's exactly the same shape of that reduction rule that we have seen seen",
    "start": "1262750",
    "end": "1269380"
  },
  {
    "text": "before right so we can now just change",
    "start": "1269380",
    "end": "1277630"
  },
  {
    "text": "this slightly because first of all it's silly to call this person or account because this can really be anything this",
    "start": "1277630",
    "end": "1283510"
  },
  {
    "text": "was only during this refactoring step and we can also just use path arrows we don't have to use functions it's a",
    "start": "1283510",
    "end": "1289390"
  },
  {
    "text": "slightly more idiomatic way of doing things so now we have this pick function",
    "start": "1289390",
    "end": "1296409"
  },
  {
    "text": "which has two of these arrows here first it gets a property name then it gets the",
    "start": "1296409",
    "end": "1302470"
  },
  {
    "text": "object and then you get the value of the property with that name from that object and then we can create get H and get",
    "start": "1302470",
    "end": "1310809"
  },
  {
    "text": "balance and this is our first discovery we literally just now discovered something called curried functions",
    "start": "1310809",
    "end": "1317260"
  },
  {
    "text": "basically functions that always take one parameter at a time and this was really",
    "start": "1317260",
    "end": "1324340"
  },
  {
    "text": "a necessary discovery because without this we won't be able to have a single",
    "start": "1324340",
    "end": "1329470"
  },
  {
    "text": "function that would allow us to retrieve any property from any any given object in a point free in a point",
    "start": "1329470",
    "end": "1335100"
  },
  {
    "text": "restart so if we want to get name we do pick name and then pass the person and",
    "start": "1335100",
    "end": "1341220"
  },
  {
    "text": "we indeed would get the name of that of that person and this is really",
    "start": "1341220",
    "end": "1346559"
  },
  {
    "text": "interesting if you kind of look at this sort of philosophically because how do",
    "start": "1346559",
    "end": "1351660"
  },
  {
    "text": "you do this in object-oriented program Glenn you release a person and then you say dot and then you say name and because it's object-oriented is the",
    "start": "1351660",
    "end": "1359039"
  },
  {
    "text": "object that comes first whenever you want to do something you know you always have to start with the object object",
    "start": "1359039",
    "end": "1365700"
  },
  {
    "text": "comes first and then dot and then the method then the behavior whereas with this style everything is other way",
    "start": "1365700",
    "end": "1373169"
  },
  {
    "text": "around we say well I'm gonna pass the object",
    "start": "1373169",
    "end": "1378840"
  },
  {
    "text": "last because the object is the least important one what is more important is the behavior behavior comes first and",
    "start": "1378840",
    "end": "1384900"
  },
  {
    "text": "then the object comes comes after that and this is really interesting in",
    "start": "1384900",
    "end": "1394110"
  },
  {
    "text": "another for another reason because you actually have done this if you do any",
    "start": "1394110",
    "end": "1401870"
  },
  {
    "text": "programming with a classical object-oriented language like in Java or even if you use classes in JavaScript",
    "start": "1401870",
    "end": "1407309"
  },
  {
    "text": "this is something that you are actually done all the time but just in a slightly different in a slightly different way so",
    "start": "1407309",
    "end": "1413880"
  },
  {
    "text": "here we have a class called auth service which has a constructor which receives an endpoint so we can do some HTTP HTTP",
    "start": "1413880",
    "end": "1421500"
  },
  {
    "text": "request and then it has a method called login it takes username and and password and does the fetch request returns the",
    "start": "1421500",
    "end": "1427890"
  },
  {
    "text": "promise doesn't really matter and this is exactly the same idea it's just sort",
    "start": "1427890",
    "end": "1434520"
  },
  {
    "text": "of repackaged in a slightly different way because logically here you also have two functions you have the constructor",
    "start": "1434520",
    "end": "1440909"
  },
  {
    "text": "function which you call first and then pass one bit of information which is the",
    "start": "1440909",
    "end": "1446460"
  },
  {
    "text": "end point and then sometime in the future when you have more information",
    "start": "1446460",
    "end": "1452039"
  },
  {
    "text": "you pass the username and and the password so that's really interesting",
    "start": "1452039",
    "end": "1460650"
  },
  {
    "text": "because same kind of idea the same kind of",
    "start": "1460650",
    "end": "1466310"
  },
  {
    "text": "principle but it kind of feels really really clumsy because first here you don't limit it you only have two significant points the time of",
    "start": "1466310",
    "end": "1472670"
  },
  {
    "text": "construction and the time of method invocation in ANOVA P languages whereas if you use college functions you can",
    "start": "1472670",
    "end": "1478130"
  },
  {
    "text": "have as many as you like and just keep on adding arrows and that's I think because object-oriented programming was",
    "start": "1478130",
    "end": "1487610"
  },
  {
    "text": "not discovered it was invented I think that I think that's a big difference between something being invented and",
    "start": "1487610",
    "end": "1494330"
  },
  {
    "text": "something being discovered but you know Facebook and Twitter they're not invented they they sorry they're not",
    "start": "1494330",
    "end": "1500480"
  },
  {
    "text": "discovered they are invented we as a human race have invented Facebook and we",
    "start": "1500480",
    "end": "1506120"
  },
  {
    "text": "also invented object-oriented programming but I think carrying and",
    "start": "1506120",
    "end": "1511730"
  },
  {
    "text": "encourage func a curried functions that is something that we discover that's something that sort of exists is it's a",
    "start": "1511730",
    "end": "1517460"
  },
  {
    "text": "fact of nature and it exists and that's a--that's a much nicer thing about this",
    "start": "1517460",
    "end": "1522800"
  },
  {
    "text": "and this is how we would do the same thing but just with curried curried functions we have a one function called logging which is a curried function",
    "start": "1522800",
    "end": "1529070"
  },
  {
    "text": "first it takes the endpoint and then it takes the username and end the password",
    "start": "1529070",
    "end": "1536080"
  },
  {
    "text": "right so let's have a look at few more examples of this how we can use these",
    "start": "1536500",
    "end": "1544730"
  },
  {
    "text": "curried functions so here we can either implement a function called add we can add this add function to our list of",
    "start": "1544730",
    "end": "1551810"
  },
  {
    "text": "molecules and add functions takes an A and then takes a B and then computes a",
    "start": "1551810",
    "end": "1556820"
  },
  {
    "text": "plus B but in this sort of curried way it first takes an A and then it takes a B it is really useful because then we",
    "start": "1556820",
    "end": "1563780"
  },
  {
    "text": "can get a function that increments number by one by only applying the add function onto number one because FP dot",
    "start": "1563780",
    "end": "1572120"
  },
  {
    "text": "add one would as a result produce exactly this function here the increment function itself and we can do the same",
    "start": "1572120",
    "end": "1579350"
  },
  {
    "text": "thing for less than so FP dot LT or less than is a curried function that takes a",
    "start": "1579350",
    "end": "1584360"
  },
  {
    "text": "and B and returns through if B smaller smaller than a so if we want a function that checks whether a number is negative",
    "start": "1584360",
    "end": "1590540"
  },
  {
    "text": "we just say F P dot LT zero and we get a function that checks for negative numbers",
    "start": "1590540",
    "end": "1597670"
  },
  {
    "text": "we can push this idea even further and see what happens when we try and do the same thing with collections so how do we",
    "start": "1598370",
    "end": "1606810"
  },
  {
    "text": "make this thing point free well first thing is this is a solved problem if we",
    "start": "1606810",
    "end": "1612540"
  },
  {
    "text": "have just done this so we can we can get rid of this function or a fat arrow by replacing this with FP pick H so we're",
    "start": "1612540",
    "end": "1620820"
  },
  {
    "text": "now down to to one point from from the two points and then we need to",
    "start": "1620820",
    "end": "1627360"
  },
  {
    "text": "understand here that there is a little bit of tension going on between the",
    "start": "1627360",
    "end": "1632690"
  },
  {
    "text": "object-oriented programming style and this point through your functional style",
    "start": "1632690",
    "end": "1638520"
  },
  {
    "text": "because if you look at this object-oriented code it's the object that comes first likely to do anything",
    "start": "1638520",
    "end": "1645810"
  },
  {
    "text": "useful you have to start with the object but if you think about the point free stuff object is the thing that comes",
    "start": "1645810",
    "end": "1651960"
  },
  {
    "text": "last because we initially know what do we want to pick we want to pick the age",
    "start": "1651960",
    "end": "1657270"
  },
  {
    "text": "this is the first thing that we know I know that I want to retrieve a property",
    "start": "1657270",
    "end": "1662550"
  },
  {
    "text": "called age but I don't know from which collection so we can then just implement",
    "start": "1662550",
    "end": "1669570"
  },
  {
    "text": "another molecule called map whose only purpose is to kind of swap the order of of things so rather than taking the",
    "start": "1669570",
    "end": "1675780"
  },
  {
    "text": "object first and then the function that we use to do the mapping we take the function first we want the behavior",
    "start": "1675780",
    "end": "1682230"
  },
  {
    "text": "first and object last then we take the object and then you just kind of repackage X's dot map F okay so now that",
    "start": "1682230",
    "end": "1692250"
  },
  {
    "text": "we have this molecule then get ages can just be applied by implemented by",
    "start": "1692250",
    "end": "1698430"
  },
  {
    "text": "applying FP dot map on FP pick age and these people or persons which again",
    "start": "1698430",
    "end": "1705360"
  },
  {
    "text": "kills another cat but we know what to do we can just perform the etter reduction and get the point free version",
    "start": "1705360",
    "end": "1710580"
  },
  {
    "text": "of gets ages so now we can do these manipulations with collections by only",
    "start": "1710580",
    "end": "1718700"
  },
  {
    "text": "applying two functions and this is a really interesting idea because what",
    "start": "1718700",
    "end": "1727440"
  },
  {
    "text": "happens here is we have two general-purpose functions like pic",
    "start": "1727440",
    "end": "1732600"
  },
  {
    "text": "and map and then we managed to create a completely new function which is",
    "start": "1732600",
    "end": "1739309"
  },
  {
    "text": "specifically tailored for our use case by only applying these functions on to",
    "start": "1739309",
    "end": "1744840"
  },
  {
    "text": "one another so we first applied the pic on a string H take the result of that",
    "start": "1744840",
    "end": "1750750"
  },
  {
    "text": "and then apply FP dot map on the result and we magically we just obtained another function from from nothing",
    "start": "1750750",
    "end": "1758250"
  },
  {
    "text": "without using any function keywords or any or anything else how can we",
    "start": "1758250",
    "end": "1764400"
  },
  {
    "text": "implement a function that gives us an array of names of all the people in the collection well we just do FP dot map FP",
    "start": "1764400",
    "end": "1770700"
  },
  {
    "text": "does pick name we can do the same thing with which filter so for example how",
    "start": "1770700",
    "end": "1777900"
  },
  {
    "text": "could we find all the negative numbers in an array well the first bit is easy",
    "start": "1777900",
    "end": "1784860"
  },
  {
    "text": "this is easy we've already solved this problem so we can say find the negative",
    "start": "1784860",
    "end": "1790140"
  },
  {
    "text": "is is n s dot filter FP LT 0 because this predicate here would only return",
    "start": "1790140",
    "end": "1797190"
  },
  {
    "text": "true if the number is a negative number and then we are left with this fat arrow",
    "start": "1797190",
    "end": "1804000"
  },
  {
    "text": "here what can we do what exactly the same thing we add the filter molecule to",
    "start": "1804000",
    "end": "1810600"
  },
  {
    "text": "our collection of of utilities because we need to reorder things and make sure that the behavior comes first then the",
    "start": "1810600",
    "end": "1816210"
  },
  {
    "text": "object and then we compute the result and then we apply filter on the FPL T 0",
    "start": "1816210",
    "end": "1822750"
  },
  {
    "text": "and the collection that we want to filter again another kitten dies we do",
    "start": "1822750",
    "end": "1828330"
  },
  {
    "text": "the etiquette reduction and get this as a result which is a point free version of this function up",
    "start": "1828330",
    "end": "1837679"
  },
  {
    "text": "we can do the same thing with reduce so reduce is another method that's commonly",
    "start": "1840100",
    "end": "1845990"
  },
  {
    "text": "used on on arrays so for example if we want to compute the sum of all the",
    "start": "1845990",
    "end": "1852139"
  },
  {
    "text": "elements inside inside an array we can call reduce and add pass this did use the function that just adds two numbers",
    "start": "1852139",
    "end": "1858440"
  },
  {
    "text": "together and start with number zero and this would give us the sum of all the elements in in an array how do we do",
    "start": "1858440",
    "end": "1865669"
  },
  {
    "text": "this point three well we first create the molecule F P dot reduce because we",
    "start": "1865669",
    "end": "1871639"
  },
  {
    "text": "want to be able to reduce this to do to reuse this the interesting thing about this one is is this bit of code here",
    "start": "1871639",
    "end": "1880299"
  },
  {
    "text": "because we've noticed that most of the functions that we've implemented are",
    "start": "1880299",
    "end": "1886899"
  },
  {
    "text": "curried functions so rather than calling this function f that the reducer",
    "start": "1886899",
    "end": "1894169"
  },
  {
    "text": "function in a normal way we would expect now that the reducer function itself is a curried is a curried function because",
    "start": "1894169",
    "end": "1901279"
  },
  {
    "text": "again most of our functions are going to be curried curried anyway so reduce method now expects a curried functions",
    "start": "1901279",
    "end": "1908299"
  },
  {
    "text": "which means that the sum of all the numbers can now be computed like this we just say F period use F P add 0 we start",
    "start": "1908299",
    "end": "1916039"
  },
  {
    "text": "with 0 we keep adding numbers together and we will get their sum again all all",
    "start": "1916039",
    "end": "1925039"
  },
  {
    "text": "point three and then we can do many other other things using exactly the same idea if you want to find the",
    "start": "1925039",
    "end": "1932179"
  },
  {
    "text": "product of all the elements of the array the only thing that we have to change is start with a different value we need to",
    "start": "1932179",
    "end": "1937970"
  },
  {
    "text": "start with number one and we need to call F P dot multiply which just",
    "start": "1937970",
    "end": "1943909"
  },
  {
    "text": "multiplies the two numbers together if we want to find if all the elements in",
    "start": "1943909",
    "end": "1951159"
  },
  {
    "text": "sorry if at least one of the elements in an array of boolean s-- is it true we",
    "start": "1951159",
    "end": "1956960"
  },
  {
    "text": "can do that by calling F P dot reduce F P or false we start with the false because that's the neutral value for the",
    "start": "1956960",
    "end": "1963019"
  },
  {
    "text": "logical or and use F P dot or as a as a reducer same for all same for men and",
    "start": "1963019",
    "end": "1969259"
  },
  {
    "text": "same for max the only difference is the function that we pass and the initial value that we start with and",
    "start": "1969259",
    "end": "1977179"
  },
  {
    "text": "this is also another interesting thing it's a kind of a side discovery because",
    "start": "1977179",
    "end": "1982760"
  },
  {
    "text": "we we nearly discovered something called semi groups or mano-a-mano it's so if",
    "start": "1982760",
    "end": "1989799"
  },
  {
    "text": "your curves are so inclined as I suggest you look you look into this because it",
    "start": "1989799",
    "end": "1995630"
  },
  {
    "text": "seems that like it's some pattern here is easy emerging we have a function and then we have a neutral value for that",
    "start": "1995630",
    "end": "2002700"
  },
  {
    "text": "operation and then when we combine that using the reduce then we can apply that function onto all the elements in a in a",
    "start": "2002700",
    "end": "2009340"
  },
  {
    "text": "collection right so this was good we",
    "start": "2009340",
    "end": "2019570"
  },
  {
    "text": "managed to solve a lot of problems and the problems are getting more and more complex but now we have a new kind of",
    "start": "2019570",
    "end": "2027790"
  },
  {
    "text": "problem so this is this is really a a a tough one we we cannot actually solve",
    "start": "2027790",
    "end": "2036040"
  },
  {
    "text": "this with the arsenal' functions that we have built so far what we're trying to",
    "start": "2036040",
    "end": "2042130"
  },
  {
    "text": "do is implement a function that given a person will give us back its balance",
    "start": "2042130",
    "end": "2048128"
  },
  {
    "text": "but the problem is balance is contained in another property of a person called account so let's see how we can attack",
    "start": "2048129",
    "end": "2057520"
  },
  {
    "text": "this problem so first we're gonna make it more complicated in order to make it simpler so I'm gonna split this into two",
    "start": "2057520",
    "end": "2062770"
  },
  {
    "text": "things I'm gonna split this into an invocation of the get account function",
    "start": "2062770",
    "end": "2068350"
  },
  {
    "text": "which we know how we can implement point three that's that's an easy thing let's just pick pick account and I will use",
    "start": "2068350",
    "end": "2077800"
  },
  {
    "text": "the get balanced function which I also know how to implement in a point free start let's just pick pick balance and",
    "start": "2077800",
    "end": "2086530"
  },
  {
    "text": "then we notice here that we can actually implement this like that so basically",
    "start": "2086530",
    "end": "2094480"
  },
  {
    "text": "what happens here is you give it a person and then we first apply the get",
    "start": "2094480",
    "end": "2099520"
  },
  {
    "text": "account function on the person capture the result and then pass that result as a parameter to the get",
    "start": "2099520",
    "end": "2105830"
  },
  {
    "text": "balanced get balanced function then whatever that function returns as a result that's what to get account",
    "start": "2105830",
    "end": "2111320"
  },
  {
    "text": "balance returns as well and then we can",
    "start": "2111320",
    "end": "2116680"
  },
  {
    "text": "perform another weird-looking refactoring step so this this might look",
    "start": "2116680",
    "end": "2124340"
  },
  {
    "text": "a little bit esoteric if you ever did immediately invoke anonymous functions",
    "start": "2124340",
    "end": "2130190"
  },
  {
    "text": "that used to be all the rage because there was the only way how you could have modules now you have the bundler that the do all that hard work for you",
    "start": "2130190",
    "end": "2135740"
  },
  {
    "text": "but this was the kind of thing that you had to do yourself before we can now extract this idea of applying a function",
    "start": "2135740",
    "end": "2145430"
  },
  {
    "text": "onto a parameter and then applying another function on the result of that in this sort of expression here we just",
    "start": "2145430",
    "end": "2152990"
  },
  {
    "text": "sort of parameterize this get balance and get account by applying them on to",
    "start": "2152990",
    "end": "2158630"
  },
  {
    "text": "this this function here so basically you give it two functions F and G and as a result you'll get a function that",
    "start": "2158630",
    "end": "2165280"
  },
  {
    "text": "applies G on P and then F on G and P and returns that as a as a result which then",
    "start": "2165280",
    "end": "2171320"
  },
  {
    "text": "means we can just take this bit and put it in the our list of of molecules so",
    "start": "2171320",
    "end": "2176630"
  },
  {
    "text": "now we have an abstraction that can help us solve this particular problem when we",
    "start": "2176630",
    "end": "2183740"
  },
  {
    "text": "have functions applying being applied on the results of the previous functions",
    "start": "2183740",
    "end": "2188960"
  },
  {
    "text": "being being applied and we call this thing compose so compose is another",
    "start": "2188960",
    "end": "2194540"
  },
  {
    "text": "function that takes two functions as parameters and returns a third function",
    "start": "2194540",
    "end": "2200090"
  },
  {
    "text": "as a result that applies the first one",
    "start": "2200090",
    "end": "2206600"
  },
  {
    "text": "on the result of the second one and this is again really interesting because this",
    "start": "2206600",
    "end": "2211760"
  },
  {
    "text": "is another thing that we have discovered so this is not something we've invented",
    "start": "2211760",
    "end": "2217070"
  },
  {
    "text": "this is a fact of life you know if you ever met an alien that they probably",
    "start": "2217070",
    "end": "2224720"
  },
  {
    "text": "would not know what Facebook is and and and how you build classes in C++ because",
    "start": "2224720",
    "end": "2231740"
  },
  {
    "text": "those those things are invented but I'm hundred percent sure that they would",
    "start": "2231740",
    "end": "2236880"
  },
  {
    "text": "know what numbers are they would know how to count maybe not in the same way as us but they would have some sort of obstruction for numbers and they would",
    "start": "2236880",
    "end": "2243900"
  },
  {
    "text": "have functional composition they would have functions they would have mappings big because that's that's a fact of",
    "start": "2243900",
    "end": "2251400"
  },
  {
    "text": "nature it's not something that we not something that we invented and this sort",
    "start": "2251400",
    "end": "2259650"
  },
  {
    "text": "of discovery of a functional composition is a really really important one because",
    "start": "2259650",
    "end": "2265830"
  },
  {
    "text": "what this allows you to do is to transform any sort of sequential problem",
    "start": "2265830",
    "end": "2272100"
  },
  {
    "text": "where you take a parameter apply one function on it capture the result pass",
    "start": "2272100",
    "end": "2278760"
  },
  {
    "text": "that on to another function capture the result pass that on to another function and so on which is kind of similar to",
    "start": "2278760",
    "end": "2284810"
  },
  {
    "text": "99% of the programs that you you write so you you were doing this all the time",
    "start": "2284810",
    "end": "2290220"
  },
  {
    "text": "you just did not spot and internalize the idea of a functional composition because that's exactly how you mostly",
    "start": "2290220",
    "end": "2296070"
  },
  {
    "text": "program you just keep passing results of the previous computations onto the next ones which can also be represented like",
    "start": "2296070",
    "end": "2303570"
  },
  {
    "text": "like this or it can be done by just saying F P dot compose F 4 F 3 F 2 F f 1",
    "start": "2303570",
    "end": "2311940"
  },
  {
    "text": "in the point 3 in a point 3 star ok so now we have another useful molecule to",
    "start": "2311940",
    "end": "2319110"
  },
  {
    "text": "solve different class of problems and I'm just quickly going to recap this because um you can get confused by by",
    "start": "2319110",
    "end": "2326700"
  },
  {
    "text": "these brackets in in JavaScript so if we have function f5 that does this notice",
    "start": "2326700",
    "end": "2334350"
  },
  {
    "text": "how this X is sandwiched in in the middle like it's inside all these all",
    "start": "2334350",
    "end": "2339870"
  },
  {
    "text": "these brackets then we can replace this mechanically with F P dot compose F 4 F",
    "start": "2339870",
    "end": "2345450"
  },
  {
    "text": "3 F 2 F 1 ok but if you have a situation",
    "start": "2345450",
    "end": "2352800"
  },
  {
    "text": "like this one so if you have X arrow and then these brackets are not nested with",
    "start": "2352800",
    "end": "2359220"
  },
  {
    "text": "one another they are just one after another with X being at the end we know that this kills kittens and we know that",
    "start": "2359220",
    "end": "2366750"
  },
  {
    "text": "this can be reduced you in the earth reduction to just to just that so these two transformations that",
    "start": "2366750",
    "end": "2372780"
  },
  {
    "text": "they look similar but they completely different because of how the brackets how the brackets go but we have these",
    "start": "2372780",
    "end": "2378390"
  },
  {
    "text": "two rules to sort of work with and now we can pretty much do the whole thing so",
    "start": "2378390",
    "end": "2386250"
  },
  {
    "text": "now it's just a matter of combining curried functions and functional",
    "start": "2386250",
    "end": "2391290"
  },
  {
    "text": "composition to implement the solution of the original problem so how can we",
    "start": "2391290",
    "end": "2398250"
  },
  {
    "text": "implement a function that tells us whether a person is an adult well we",
    "start": "2398250",
    "end": "2405410"
  },
  {
    "text": "have to replace all these operators with",
    "start": "2405410",
    "end": "2412680"
  },
  {
    "text": "functions first so we can say is adults takes person and does FP not of FP dot",
    "start": "2412680",
    "end": "2418290"
  },
  {
    "text": "LT 18 applied on to FP the peak age of person and then if you kind of squint and replace all these FP not FP l dfp",
    "start": "2418290",
    "end": "2425700"
  },
  {
    "text": "pick with f1 f2 and f3 you'll notice that this is exactly the functional",
    "start": "2425700",
    "end": "2431040"
  },
  {
    "text": "composition we pass the result of the previous function application as a parameter to the next to the next",
    "start": "2431040",
    "end": "2437609"
  },
  {
    "text": "function so mechanically we can replace this with F P dot compose F P naught FP",
    "start": "2437609",
    "end": "2443849"
  },
  {
    "text": "LT and FP p h cool how do we find out if",
    "start": "2443849",
    "end": "2450450"
  },
  {
    "text": "the person is in debt like if they owe money well that's also easy because all we have to do is compose these three",
    "start": "2450450",
    "end": "2458760"
  },
  {
    "text": "functions together so we first pick the account be careful you have to read this right to left",
    "start": "2458760",
    "end": "2463800"
  },
  {
    "text": "that's the order of our application so the one on the Left would be applied last the one on the right would be",
    "start": "2463800",
    "end": "2469920"
  },
  {
    "text": "applied first so we first pick the property called account of the person then we'd pick the property called balance of that account",
    "start": "2469920",
    "end": "2478020"
  },
  {
    "text": "and then we check if it is less less than zero",
    "start": "2478020",
    "end": "2484250"
  },
  {
    "text": "okay so how can we then get an array of balances for all the people inside the",
    "start": "2485800",
    "end": "2492310"
  },
  {
    "text": "collection so this is now combining what we've done before with the function of composition well it's also easy because",
    "start": "2492310",
    "end": "2498580"
  },
  {
    "text": "all we have to do is you just have to pass FP compose FP peak balance and FP",
    "start": "2498580",
    "end": "2503680"
  },
  {
    "text": "pick account and it cost around here - FP dot dot map and this would give us",
    "start": "2503680",
    "end": "2511690"
  },
  {
    "text": "exactly this function this function here so we managed to kill both of these fat arrows we managed to kill both of these",
    "start": "2511690",
    "end": "2518080"
  },
  {
    "text": "points by applying FP dot map on the result of F P dot composed of these",
    "start": "2518080",
    "end": "2523470"
  },
  {
    "text": "these two functions here how do we find all the adults in in the array well",
    "start": "2523470",
    "end": "2531820"
  },
  {
    "text": "again that's also easy we do F P dot filter that's that's a filtering and what is the filter function we'll it's",
    "start": "2531820",
    "end": "2537790"
  },
  {
    "text": "FD composed of FP not FP LT 18 and FP pick age so we first retrieve the property called",
    "start": "2537790",
    "end": "2544780"
  },
  {
    "text": "age then we check if it's less than 18 and then we need to invert inverse that",
    "start": "2544780",
    "end": "2551290"
  },
  {
    "text": "behavior right which now brings us to",
    "start": "2551290",
    "end": "2559420"
  },
  {
    "text": "kind of putting all of this together and checking out the final result so this",
    "start": "2559420",
    "end": "2567310"
  },
  {
    "text": "was the point full version of this",
    "start": "2567310",
    "end": "2572370"
  },
  {
    "text": "little program and the point free version would look like this so it's one",
    "start": "2572370",
    "end": "2578650"
  },
  {
    "text": "big composed and then let's read it bottom to top or right to left so we",
    "start": "2578650",
    "end": "2584350"
  },
  {
    "text": "first filter people that are adults then",
    "start": "2584350",
    "end": "2591310"
  },
  {
    "text": "we filter out the ones that are in in that from all that list of adults then",
    "start": "2591310",
    "end": "2598930"
  },
  {
    "text": "we get the balances or account balances and then we reduce that by using",
    "start": "2598930",
    "end": "2607020"
  },
  {
    "text": "subtraction as the reducer function and starting with the value with the value",
    "start": "2607020",
    "end": "2612370"
  },
  {
    "text": "of zero okay and you can actually see that this",
    "start": "2612370",
    "end": "2619530"
  },
  {
    "text": "would give you the same same results so here we have this array of people",
    "start": "2620160",
    "end": "2625540"
  },
  {
    "text": "persons one two person five and the adults oh six and we can see that not",
    "start": "2625540",
    "end": "2633820"
  },
  {
    "text": "sure whether you can see the six here yeah you can [Music] so the point free version produces",
    "start": "2633820",
    "end": "2643300"
  },
  {
    "text": "exactly the same result as the as the point full as the point four one we have",
    "start": "2643300",
    "end": "2652960"
  },
  {
    "text": "some time some time left so might be worth playing with this and exploring",
    "start": "2652960",
    "end": "2658300"
  },
  {
    "text": "some other some other ideas so what potentially might not be the nicest",
    "start": "2658300",
    "end": "2666340"
  },
  {
    "text": "thing about this solution is that we filter twice we create this intermediate",
    "start": "2666340",
    "end": "2671770"
  },
  {
    "text": "array of filtered values where we could actually perform this filtering all all",
    "start": "2671770",
    "end": "2677830"
  },
  {
    "text": "at once and the way we can do this is we",
    "start": "2677830",
    "end": "2684430"
  },
  {
    "text": "can use this molecule called both so both is a function that takes two functions as parameters and gives you",
    "start": "2684430",
    "end": "2691270"
  },
  {
    "text": "back another function that would only return through if both of these two functions return return true so now we",
    "start": "2691270",
    "end": "2697630"
  },
  {
    "text": "can change this and replace it with F P",
    "start": "2697630",
    "end": "2703120"
  },
  {
    "text": "dot filter and then we do FP dot both",
    "start": "2703120",
    "end": "2710760"
  },
  {
    "text": "and give it these two filter functions",
    "start": "2710760",
    "end": "2718920"
  },
  {
    "text": "not and if I got the brackets together we still get the number the number six",
    "start": "2723349",
    "end": "2730500"
  },
  {
    "text": "as a result and this was like a really simple example of something that should",
    "start": "2730500",
    "end": "2737579"
  },
  {
    "text": "look and feel very familiar we sort of",
    "start": "2737579",
    "end": "2743809"
  },
  {
    "text": "manipulated our program the same way we manipulate expressions or equations so",
    "start": "2743809",
    "end": "2751770"
  },
  {
    "text": "remember when you were child and you were taught maths and when you say X plus 7 equals 17 and they then teach you",
    "start": "2751770",
    "end": "2757349"
  },
  {
    "text": "the rule that says well if you have seven on the left hand side you can subtract it from both sides and then get",
    "start": "2757349",
    "end": "2763170"
  },
  {
    "text": "that x equals 17 minus 7 which means that X is equal to 10 you have a certain",
    "start": "2763170",
    "end": "2769020"
  },
  {
    "text": "rules that allow you to transform equations while preserving the kind of",
    "start": "2769020",
    "end": "2776910"
  },
  {
    "text": "meaning of them and and and their and their semantics and that's exactly what what we we can do we can do here as well",
    "start": "2776910",
    "end": "2783780"
  },
  {
    "text": "we can have some rules that allow us to swap code for one another and be certain",
    "start": "2783780",
    "end": "2790109"
  },
  {
    "text": "that we're not changing the behavior or of our of our code another useful thing",
    "start": "2790109",
    "end": "2796410"
  },
  {
    "text": "we might we might try is something like this because it can be quite tricky to",
    "start": "2796410",
    "end": "2802079"
  },
  {
    "text": "understand what's going on inside all these point free functions and it might be hard to to debug them so we may",
    "start": "2802079",
    "end": "2809700"
  },
  {
    "text": "introduce another molecule and let's call it log and lock works like like",
    "start": "2809700",
    "end": "2816750"
  },
  {
    "text": "this it takes an X it then logs it",
    "start": "2816750",
    "end": "2823490"
  },
  {
    "text": "and then returns acts as a as a result and let's do string if I hear because",
    "start": "2823920",
    "end": "2832520"
  },
  {
    "text": "it'd be easier to to see and then also",
    "start": "2832520",
    "end": "2839070"
  },
  {
    "text": "let's add name let's make it a curried function and put name here and then what",
    "start": "2839070",
    "end": "2848760"
  },
  {
    "text": "we can do with this we can then say well I'm going to log F P dot log after",
    "start": "2848760",
    "end": "2856680"
  },
  {
    "text": "filter okay and here I can say F P dot log after map",
    "start": "2856680",
    "end": "2865130"
  },
  {
    "text": "and then I'll have to run this in a chrome dev tools and then we can see all",
    "start": "2870880",
    "end": "2877420"
  },
  {
    "text": "these intermediate results as they they flow through this compositional pipeline",
    "start": "2877420",
    "end": "2884170"
  },
  {
    "text": "we can see that when we invoked our function this was the state of the result after the the filter was applied",
    "start": "2884170",
    "end": "2890890"
  },
  {
    "text": "and then this was the state after the map was applied we have minus 2 and",
    "start": "2890890",
    "end": "2896500"
  },
  {
    "text": "minus 4 and this is the final result which is which is minus 6 if we were to",
    "start": "2896500",
    "end": "2901750"
  },
  {
    "text": "try and do the same thing with with this implementation that would be much much",
    "start": "2901750",
    "end": "2907630"
  },
  {
    "text": "trickier because this is implemented in this sort of mix between over P and and",
    "start": "2907630",
    "end": "2913990"
  },
  {
    "text": "the functional style so we would have to do something like this if you would want to insert something non invasively in in",
    "start": "2913990",
    "end": "2920890"
  },
  {
    "text": "this computation would have to say array dot prototype dot log and that's a",
    "start": "2920890",
    "end": "2926920"
  },
  {
    "text": "function that takes let's say a name and then it locks the name and this and then",
    "start": "2926920",
    "end": "2941260"
  },
  {
    "text": "returns this and then we can here say log after filter one and then log after",
    "start": "2941260",
    "end": "2953800"
  },
  {
    "text": "filter two and log after map let's see",
    "start": "2953800",
    "end": "2962920"
  },
  {
    "text": "if that works ok it does and we get we get the same",
    "start": "2962920",
    "end": "2968740"
  },
  {
    "text": "the same thing so we get minus 2 - 4 - 4 after map then we get this after filter",
    "start": "2968740",
    "end": "2974890"
  },
  {
    "text": "2 which is the same as as here because we managed to join these two together in a point free implementation and then",
    "start": "2974890",
    "end": "2980680"
  },
  {
    "text": "after the first filter we only got the ones that were under that that were",
    "start": "2980680",
    "end": "2986020"
  },
  {
    "text": "adults but this is not very nice because we are mutating this global array dot",
    "start": "2986020",
    "end": "2992020"
  },
  {
    "text": "prototype which we shouldn't be doing but that was pretty much the only way how we could non-invasively",
    "start": "2992020",
    "end": "2997470"
  },
  {
    "text": "non-invasively added this little bit of login and inspect these intermediate results which was much nicer and",
    "start": "2997470",
    "end": "3005780"
  },
  {
    "text": "and easier to do with the point free with a point free version we didn't have to mutate any global objects or or",
    "start": "3005780",
    "end": "3012840"
  },
  {
    "text": "introduce any any functions anywhere else",
    "start": "3012840",
    "end": "3017210"
  },
  {
    "text": "right so to recap what did we discover while",
    "start": "3018050",
    "end": "3029730"
  },
  {
    "text": "while we did all this like on this",
    "start": "3029730",
    "end": "3035730"
  },
  {
    "text": "journey to time implement as much of our program without having name parameters",
    "start": "3035730",
    "end": "3042630"
  },
  {
    "text": "and the function keyword well first we discovered the production area we discovered one means of removing",
    "start": "3042630",
    "end": "3050820"
  },
  {
    "text": "one of the means of removing the point was code basically removing unnecessary indirection in in your code and making",
    "start": "3050820",
    "end": "3057330"
  },
  {
    "text": "the call code much simpler and making the code communicate what was actually happening in a much in a much nicer way",
    "start": "3057330",
    "end": "3064260"
  },
  {
    "text": "so there was one thing that we discovered the other thing that we discovered was curried functions we",
    "start": "3064260",
    "end": "3071040"
  },
  {
    "text": "discovered that you can implement everything by only using functions that",
    "start": "3071040",
    "end": "3077220"
  },
  {
    "text": "take one parameter at a time and we've seen that these functions actually do",
    "start": "3077220",
    "end": "3083820"
  },
  {
    "text": "something that you as developers do all the time they allow you to take something that's more complex and more",
    "start": "3083820",
    "end": "3090000"
  },
  {
    "text": "flexible for example a function that adds two numbers together and then",
    "start": "3090000",
    "end": "3095300"
  },
  {
    "text": "automatically for free from that get something that's simpler basically a function that adds 1 to any number that",
    "start": "3095300",
    "end": "3103050"
  },
  {
    "text": "you pass in as a parameter a function that increments number by by one so it's it's a means of going from something",
    "start": "3103050",
    "end": "3109230"
  },
  {
    "text": "that's more complex to something that's more more simple and finally we",
    "start": "3109230",
    "end": "3114930"
  },
  {
    "text": "discovered the functional composition which is one of the means of creating",
    "start": "3114930",
    "end": "3121950"
  },
  {
    "text": "new functions from existing functions and this is sort of the other way around",
    "start": "3121950",
    "end": "3129750"
  },
  {
    "text": "so this is going in the other direction you start with few things that are simpler but then you combine them and",
    "start": "3129750",
    "end": "3137310"
  },
  {
    "text": "create something that's more or something that's more complex then the part that you constructed it right",
    "start": "3137310",
    "end": "3147620"
  },
  {
    "text": "well I hope this gave you some ideas for some of your own investigation and some",
    "start": "3147620",
    "end": "3154200"
  },
  {
    "text": "of the things to try to try on your own in terms of you know practical",
    "start": "3154200",
    "end": "3160430"
  },
  {
    "text": "practicalities and when when when would you do this there are plenty of existing libraries that use and rely on this this",
    "start": "3160430",
    "end": "3167520"
  },
  {
    "text": "style of code if you ever used Ram de",
    "start": "3167520",
    "end": "3172370"
  },
  {
    "text": "all-rounder almost of the RAM the functions will be curried functions and you can track this point freestyle by by",
    "start": "3172610",
    "end": "3179730"
  },
  {
    "text": "using lambda also new version or latest version of rxjs so if you use angular or or or do any reactive programming with",
    "start": "3179730",
    "end": "3187260"
  },
  {
    "text": "rxjs is starting to favor functional composition rather than this",
    "start": "3187260",
    "end": "3195120"
  },
  {
    "text": "object-oriented style where all these methods are defined as the methods on the observable object we now just have a",
    "start": "3195120",
    "end": "3200430"
  },
  {
    "text": "few functions that operate on on observables so it seemed like a really",
    "start": "3200430",
    "end": "3205710"
  },
  {
    "text": "really sort of weird way of doing things but we discovered some really cool facts",
    "start": "3205710",
    "end": "3211800"
  },
  {
    "text": "and cool things on the journey what we tried to solve a very very concrete",
    "start": "3211800",
    "end": "3217590"
  },
  {
    "text": "problem so thanks a lot for coming and I wish you all the best [Applause]",
    "start": "3217590",
    "end": "3229729"
  }
]