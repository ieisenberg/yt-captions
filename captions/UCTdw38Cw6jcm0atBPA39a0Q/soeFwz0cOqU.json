[
  {
    "start": "0",
    "end": "113000"
  },
  {
    "text": "a coder I admire in named Dora keeps using compiler Explorer",
    "start": "3460",
    "end": "9010"
  },
  {
    "text": "she's much cooler than me but I think I can be quite as cool if I just learn",
    "start": "9010",
    "end": "15119"
  },
  {
    "text": "assembler so whose assembly knowledge is as bad as that's Limerick or worse okay",
    "start": "15119",
    "end": "24929"
  },
  {
    "text": "most of you good my assembly knowledge is about at that level but that's fine",
    "start": "24929",
    "end": "31259"
  },
  {
    "text": "in order to use compiler Explorer you don't need to be an assembly expert so",
    "start": "31259",
    "end": "38680"
  },
  {
    "text": "my name is onyx Newton and welcome to just enough assembly for compiler Explorer this is very much of absolute",
    "start": "38680",
    "end": "46870"
  },
  {
    "text": "beginners introduction to assembly and x86 64 : convention so if you know a bit",
    "start": "46870",
    "end": "54400"
  },
  {
    "text": "of assembly from before there's probably not much new so there's still time to escape who has used compiler Explorer",
    "start": "54400",
    "end": "63160"
  },
  {
    "text": "before also known as got both after its creator Matt yeah quite a few who has",
    "start": "63160",
    "end": "68800"
  },
  {
    "text": "seen it used in conference talks or like your new Tube videos or stuff like that quite a few of you as well so I saw on",
    "start": "68800",
    "end": "78160"
  },
  {
    "text": "Twitter a few weeks ago that Jason Turner have a little Twitter poll saying are you planning to use compiler",
    "start": "78160",
    "end": "84460"
  },
  {
    "text": "Explorer in your upcoming C purpose related presentation or did you use it recently in a presentation and the",
    "start": "84460",
    "end": "91210"
  },
  {
    "text": "options were no yes not presenting or just show results and you can see all the people who are presenting more than",
    "start": "91210",
    "end": "97870"
  },
  {
    "text": "half say they're going to use compiler Explorer so this is not very unscientific right it's very prone to",
    "start": "97870",
    "end": "104350"
  },
  {
    "text": "selection bias is tagging compiler story there but it shows that there is quite a lot of interest in compiler story these",
    "start": "104350",
    "end": "110560"
  },
  {
    "text": "days so what's good about compiler",
    "start": "110560",
    "end": "115630"
  },
  {
    "start": "113000",
    "end": "274000"
  },
  {
    "text": "Explorer you can take your C simple plus or rust or some other languages as well",
    "start": "115630",
    "end": "120820"
  },
  {
    "text": "paste it on the website and you can see the assembly outputs from the compiler",
    "start": "120820",
    "end": "127019"
  },
  {
    "text": "now why is that interesting it's",
    "start": "127019",
    "end": "132040"
  },
  {
    "text": "interesting because you write your C and C++ code or other languages as well for all",
    "start": "132040",
    "end": "137170"
  },
  {
    "text": "humans to read and then the compiler translated to the cpu and it turns out",
    "start": "137170",
    "end": "142780"
  },
  {
    "text": "that the CPU instructions that the compiler will give the CPU they correspond to assembly instructions so",
    "start": "142780",
    "end": "149170"
  },
  {
    "text": "if you can see assembly instructions you know what the compiler did your code what is it going to feed the CPU what's",
    "start": "149170",
    "end": "157660"
  },
  {
    "text": "also nice is that you don't only see one compiler you can have several compiler so you can compare clang to GCC to MSV C",
    "start": "157660",
    "end": "164860"
  },
  {
    "text": "and you can put in different options so you can say ok what happens on a one on",
    "start": "164860",
    "end": "169989"
  },
  {
    "text": "oh oh oh three etc so it's really quite flexible so let's just start with having",
    "start": "169989",
    "end": "176769"
  },
  {
    "text": "a look here and that's probably way too small so yeah here's just a bunch of",
    "start": "176769",
    "end": "185230"
  },
  {
    "text": "assembly code and some C code and I'm not going to read through it right now what's what's interesting is here you",
    "start": "185230",
    "end": "194500"
  },
  {
    "text": "can paste your code and then you see the assembly output and you can see that's okay so here's a function called",
    "start": "194500",
    "end": "199600"
  },
  {
    "text": "computer well here is the assembly code from that function and if I scroll down",
    "start": "199600",
    "end": "205810"
  },
  {
    "text": "I can see here's the assembly code for the caller function Silicon tokens and you can see also if I hover it will",
    "start": "205810",
    "end": "212859"
  },
  {
    "text": "highlight the lines of code that the assembly came from and the other way around and it's color coded it and it's",
    "start": "212859",
    "end": "219970"
  },
  {
    "text": "trying to be really helpful to allow you to correlate your code with the assembly output there's a lot of stuff here on",
    "start": "219970",
    "end": "228640"
  },
  {
    "text": "the right but in 50 minutes you can are going to understand every line to the",
    "start": "228640",
    "end": "235450"
  },
  {
    "text": "right here and I'm actually not going to go fast either so still going to go quite slowly but still you'll be able to",
    "start": "235450",
    "end": "241810"
  },
  {
    "text": "understand why it's doing all of these things so let's not read through all of",
    "start": "241810",
    "end": "247359"
  },
  {
    "text": "it but let's look at okay there are some things that seem to be going on a lot so this D word patters seem to be important",
    "start": "247359",
    "end": "254260"
  },
  {
    "text": "and you can see EDI and ESI is used here both in computer and down in color and",
    "start": "254260",
    "end": "261160"
  },
  {
    "text": "it's pushing and popping rbp yeah so lots of stuff going on and let's",
    "start": "261160",
    "end": "270330"
  },
  {
    "text": "let's learn what all of this is about so for today's talk it's mostly going to be",
    "start": "271570",
    "end": "278500"
  },
  {
    "start": "274000",
    "end": "479000"
  },
  {
    "text": "stepping through assembly in a toy debugger in a like a toy slide where",
    "start": "278500",
    "end": "283880"
  },
  {
    "text": "emulator so before I start if there are any questions please ask the questions",
    "start": "283880",
    "end": "290750"
  },
  {
    "text": "while the code is up here so don't wait until the end it's better to because we're gonna have a lot of code on the slides so ask while the code is there so",
    "start": "290750",
    "end": "298610"
  },
  {
    "text": "in my little toy assembly x86 emulator in the middle of the screen is the CPU",
    "start": "298610",
    "end": "304610"
  },
  {
    "text": "and the CPU has a bunch of registers we are we have some special registers some",
    "start": "304610",
    "end": "311750"
  },
  {
    "text": "general-purpose that we can use for whatever we want and in order for the computer to do anything interesting with",
    "start": "311750",
    "end": "317960"
  },
  {
    "text": "data it needs to get data into those registers so that's going to be our main focus and we're only for each example",
    "start": "317960",
    "end": "324950"
  },
  {
    "text": "going to show the relevant register so if you have an example using only these are the I and our si registers well only",
    "start": "324950",
    "end": "331850"
  },
  {
    "text": "going to show those do not just blow the slides and we're going to initialize",
    "start": "331850",
    "end": "337370"
  },
  {
    "text": "them to 0 for each example that doesn't happen in reality it just makes the examples easier to follow and show",
    "start": "337370",
    "end": "343220"
  },
  {
    "text": "everything in hex so let's get some",
    "start": "343220",
    "end": "348680"
  },
  {
    "text": "assembly code up so here's our first assembly program for today it has three",
    "start": "348680",
    "end": "354740"
  },
  {
    "text": "lines of code and each line has an instruction to the left and 0 or more",
    "start": "354740",
    "end": "361610"
  },
  {
    "text": "operands to the right and I put a little indicator what's this doing No thank you",
    "start": "361610",
    "end": "367970"
  },
  {
    "text": "ok put a little indicator so we can step debug through the code like this right just like in a normal normal debugger",
    "start": "367970",
    "end": "374690"
  },
  {
    "text": "and yeah so let's start with the first",
    "start": "374690",
    "end": "379910"
  },
  {
    "text": "instruction it's a move instruction and just like in C++ move doesn't move in",
    "start": "379910",
    "end": "386480"
  },
  {
    "text": "assembly it means copy so it's going to copy one of these operands into the other one and in this case it's actually",
    "start": "386480",
    "end": "395000"
  },
  {
    "text": "going to copy the second operand into the first and that's because we're using into assembly syntax to our other",
    "start": "395000",
    "end": "401690"
  },
  {
    "text": "syntaxes for assembly in tow maybe feels a bit backwards because it says move RTI - that means",
    "start": "401690",
    "end": "407990"
  },
  {
    "text": "move - into RDI there are other syntaxes that are the other way around but I think Intel is the most readable one in",
    "start": "407990",
    "end": "415070"
  },
  {
    "text": "other respects it's the default one on compiler Explorer and I think it's the one that people tend to prefer prefer",
    "start": "415070",
    "end": "420830"
  },
  {
    "text": "these days so the first instruction is a move instruction it's asks us to move to",
    "start": "420830",
    "end": "426260"
  },
  {
    "text": "into our DOI and when we execute that we can see we got the value - into the",
    "start": "426260",
    "end": "432170"
  },
  {
    "text": "register called RDI then we move for",
    "start": "432170",
    "end": "437450"
  },
  {
    "text": "into RSI and then there's the add the",
    "start": "437450",
    "end": "442910"
  },
  {
    "text": "instruction I guess you can guess what the add instruction does it adds its",
    "start": "442910",
    "end": "450320"
  },
  {
    "text": "operands together and we are used to in our high-level languages saying like",
    "start": "450320",
    "end": "455420"
  },
  {
    "text": "results or int result equal a plus B in",
    "start": "455420",
    "end": "460970"
  },
  {
    "text": "assembly the result goes in the first operand so it's more like RTI plus",
    "start": "460970",
    "end": "467060"
  },
  {
    "text": "equals RSI so if we execute that line it will add together the 204 and put 6 the",
    "start": "467060",
    "end": "474380"
  },
  {
    "text": "result in first operand RDI I don't know",
    "start": "474380",
    "end": "487640"
  },
  {
    "start": "479000",
    "end": "729000"
  },
  {
    "text": "about those names like many of the registers have some meaningful names",
    "start": "487640",
    "end": "492550"
  },
  {
    "text": "yeah they have some very common usages this day but I'm not sure actually about",
    "start": "495640",
    "end": "503290"
  },
  {
    "text": "their names remember I'm not very much better than the limericks oh no that's",
    "start": "503290",
    "end": "508610"
  },
  {
    "text": "not too tricky questions okay so that",
    "start": "508610",
    "end": "514159"
  },
  {
    "text": "was registers we also need to use memory right we have 16 general-purpose 64-bit registers not much you can do",
    "start": "514160",
    "end": "520760"
  },
  {
    "text": "with that so we need some memory as well so I put some memory on the right-hand",
    "start": "520760",
    "end": "526580"
  },
  {
    "text": "side here as well so these are memory addresses they're actually 64 bit long",
    "start": "526580",
    "end": "531800"
  },
  {
    "text": "but I don't want to blow the slides so let's just show the last two bytes and here's the value at that address in",
    "start": "531800",
    "end": "540010"
  },
  {
    "text": "memory and today we're going to focus mainly on the stack but everything about",
    "start": "540010",
    "end": "546400"
  },
  {
    "text": "addressing memory on the stack that I show today is going to be exactly the same if you want to address some other memory it's the same things but we use",
    "start": "546400",
    "end": "553900"
  },
  {
    "text": "the stack mostly today so on this architecture the stack grows downwards",
    "start": "553900",
    "end": "560500"
  },
  {
    "text": "so our stack is like coming from up here and it's growing down here and there's a",
    "start": "560500",
    "end": "565630"
  },
  {
    "text": "new register RSP that's the stack pointer that has a very good name I",
    "start": "565630",
    "end": "572200"
  },
  {
    "text": "guess so we have a RS piece it's like pointer it happens to currently point to be zero in memory so I put a little",
    "start": "572200",
    "end": "578680"
  },
  {
    "text": "pointer here as well RSP is pointing here so this is top the top of the stack but that's the stack is growing",
    "start": "578680",
    "end": "584920"
  },
  {
    "text": "downwards the top of the stack when you push stuff on the tach stack the top is going to go down like this so it's a bit",
    "start": "584920",
    "end": "593340"
  },
  {
    "text": "that's a might be a bit confusing so",
    "start": "593340",
    "end": "598050"
  },
  {
    "text": "yeah let's first put value in our register so let's just put this little",
    "start": "601050",
    "end": "606940"
  },
  {
    "text": "value here and immediate value or put it into our di and I just picked this",
    "start": "606940",
    "end": "612970"
  },
  {
    "text": "number because it's very easy to see the difference bytes and see where they end up at the end now then we're going to",
    "start": "612970",
    "end": "619990"
  },
  {
    "text": "push what are we going to push we're going to push our di on the stack so",
    "start": "619990",
    "end": "625480"
  },
  {
    "text": "when we push a register we're going to copy the contents of the register onto the stack and then bump the stack",
    "start": "625480",
    "end": "631150"
  },
  {
    "text": "pointer so we're on x86 64 64-bit",
    "start": "631150",
    "end": "636700"
  },
  {
    "text": "registers so how many bytes are we going to push on the stack and increments a counter with eight bytes eight bytes 64",
    "start": "636700",
    "end": "645490"
  },
  {
    "text": "bits and the second question is okay where are we going to end up RSP is up",
    "start": "645490",
    "end": "651010"
  },
  {
    "text": "here and we're gonna subtract actually since it grows downwards subtract eight we get get down to a eight and what's",
    "start": "651010",
    "end": "659560"
  },
  {
    "text": "the value of that byte going to be there's one correct answer and there's one wrong but closeable answer and the",
    "start": "659560",
    "end": "667240"
  },
  {
    "text": "rest are just plain wrong",
    "start": "667240",
    "end": "670350"
  },
  {
    "text": "yeah so those are both yeah so the eight 8086 has a little endian architecture so",
    "start": "672700",
    "end": "680120"
  },
  {
    "text": "that means when you design a CPU you have to like decide on which parts go where so a little endian architecture",
    "start": "680120",
    "end": "686150"
  },
  {
    "text": "means the least significant particles on the lowest memory address so if we",
    "start": "686150",
    "end": "691210"
  },
  {
    "text": "execute this line you can see it bumped our HP down here and put the number in on other architectures there on the",
    "start": "691210",
    "end": "699200"
  },
  {
    "text": "answer could be f e because there's no reason why it has to be in a certain order in memory but that's how our",
    "start": "699200",
    "end": "706040"
  },
  {
    "text": "architecture is yeah then we can pop so",
    "start": "706040",
    "end": "715610"
  },
  {
    "text": "I skipped ahead a little bit away we can also pop we pushed our D I so now I have these bytes in here and then we can pop",
    "start": "715610",
    "end": "721790"
  },
  {
    "text": "them into another register so now we have problems of the second so if you",
    "start": "721790",
    "end": "730940"
  },
  {
    "start": "729000",
    "end": "876000"
  },
  {
    "text": "want to implement a little stack machine or something that's all well and good to push and pop values but we have random",
    "start": "730940",
    "end": "737570"
  },
  {
    "text": "access memory we want to be able to randomly or at least arbitrarily access our memory so let's see how you can",
    "start": "737570",
    "end": "744650"
  },
  {
    "text": "address specific memory addresses as well let's just put some 64 bits the",
    "start": "744650",
    "end": "751520"
  },
  {
    "text": "values into our si on our di and then we see the move instruction again so move",
    "start": "751520",
    "end": "757040"
  },
  {
    "text": "instructions can be used for both memory and for registers and if you see here it",
    "start": "757040",
    "end": "763010"
  },
  {
    "text": "has the second operand is our si so it's going to copy from our si and all of",
    "start": "763010",
    "end": "768890"
  },
  {
    "text": "this is the first operand so it's going to move into whatever that means and",
    "start": "768890",
    "end": "774770"
  },
  {
    "text": "what does it mean it says Q word puto that means a quad",
    "start": "774770",
    "end": "779810"
  },
  {
    "text": "word pointer so a byte 8 bits is a byte 16 bits is a word 32 bits is a double",
    "start": "779810",
    "end": "786200"
  },
  {
    "text": "word and 64 bits is a quad word so Q word Peter means this is a pointer to",
    "start": "786200",
    "end": "792500"
  },
  {
    "text": "the 64 bits something and where is it pointing it's",
    "start": "792500",
    "end": "797720"
  },
  {
    "text": "pointing to our SP minus 8 so if you go over here our SP subtract 8",
    "start": "797720",
    "end": "803180"
  },
  {
    "text": "you get down here so this is saying this is the address of our SP minus 8 so 8 so",
    "start": "803180",
    "end": "811670"
  },
  {
    "text": "we're going to move the contents of our si onto that memory address so it looks",
    "start": "811670",
    "end": "818360"
  },
  {
    "text": "exactly like when we pushed the thing but we now explicitly put it at exactly that address so we could have put it at",
    "start": "818360",
    "end": "825830"
  },
  {
    "text": "any address really the add instruction also supports having one of the operands",
    "start": "825830",
    "end": "831950"
  },
  {
    "text": "be a memory address so it's exactly the same expression as we saw here for a",
    "start": "831950",
    "end": "837830"
  },
  {
    "text": "pointer to a 64-bit value at this location take that add it to our dua and as we saw before and we'll just store it",
    "start": "837830",
    "end": "845029"
  },
  {
    "text": "in the first operand so our di is 2 2 2 2 2 3 3 3 3 from here add it together",
    "start": "845029",
    "end": "850970"
  },
  {
    "text": "and put five five five five five five five five five in our di so if we we're",
    "start": "850970",
    "end": "858260"
  },
  {
    "text": "in c or c plus this is how a local variable on the stack looks like so this",
    "start": "858260",
    "end": "863839"
  },
  {
    "text": "is how it would look like exactly if you had a long l equals 3 3 3 3 3 in your",
    "start": "863839",
    "end": "868940"
  },
  {
    "text": "syllabus or whatever then this is how it would look like so before we continue I",
    "start": "868940",
    "end": "878779"
  },
  {
    "start": "876000",
    "end": "1003000"
  },
  {
    "text": "want to say a few things about register sizes so when the original 8086 came out",
    "start": "878779",
    "end": "884270"
  },
  {
    "text": "that was a 16-bit architecture with ax BX CX etc registers they also gave us",
    "start": "884270",
    "end": "891830"
  },
  {
    "text": "the option to only address the lower half with a low and a H for the high part of ax so if you put something into",
    "start": "891830",
    "end": "901339"
  },
  {
    "text": "Al that's actually the same as ax just it's just using the lower half and a H is using the high half of it so it's",
    "start": "901339",
    "end": "907790"
  },
  {
    "text": "actually the same physical register in there just different ways of addressing parts of it then the 386 came along with",
    "start": "907790",
    "end": "915020"
  },
  {
    "text": "32 bits EAX you can still use the smaller ones and finally AMD came along",
    "start": "915020",
    "end": "921320"
  },
  {
    "text": "with the 64 one a 6-4 bit one and then we got our ax etc but you can still put",
    "start": "921320",
    "end": "927260"
  },
  {
    "text": "things in the lower parts here so those",
    "start": "927260",
    "end": "933440"
  },
  {
    "text": "of you who know me know I like CP post quizzes I have a site see poppy quit org so here's today",
    "start": "933440",
    "end": "939579"
  },
  {
    "text": "today's simple post quiz how big is an int that's the correct answer yes it is",
    "start": "939579",
    "end": "948170"
  },
  {
    "text": "it has a slice that's that's correct for one number so it turns out the only",
    "start": "948170",
    "end": "954470"
  },
  {
    "text": "requirement in the standard of CNC boss is it has to be 16 bits or more I used",
    "start": "954470",
    "end": "961519"
  },
  {
    "text": "to think it had to be 7 but it turns out it has to be at least 16 it has int has to be at least as big as char and char",
    "start": "961519",
    "end": "966670"
  },
  {
    "text": "has to be 16 yeah oh the short chasm in",
    "start": "966670",
    "end": "974420"
  },
  {
    "text": "the a short story yeah it has to be at least as big as short and actually I",
    "start": "974420",
    "end": "980660"
  },
  {
    "text": "think I think actually in a short has to be 16 doesn't it yeah anyway um on my computer what's what's",
    "start": "980660",
    "end": "988730"
  },
  {
    "text": "int to be on on or or nor normal x86 64 machine how big is an int um my machine",
    "start": "988730",
    "end": "995649"
  },
  {
    "text": "yeah 32 bits so when they went from 32 to 64 bits I didn't want to change the size of int so it's still 32 bits so",
    "start": "995649",
    "end": "1004449"
  },
  {
    "start": "1003000",
    "end": "1019000"
  },
  {
    "text": "this 64 bit thing corresponds to a signed or unsigned long and you can put",
    "start": "1004449",
    "end": "1009490"
  },
  {
    "text": "a signed or unsigned int here so in the round so in short in here and a signed or unsigned or just plain char in these",
    "start": "1009490",
    "end": "1016540"
  },
  {
    "text": "ones so let's do a skip back this",
    "start": "1016540",
    "end": "1024579"
  },
  {
    "start": "1019000",
    "end": "1116000"
  },
  {
    "text": "example we just did let's do exactly the same example but with smaller register",
    "start": "1024579",
    "end": "1029650"
  },
  {
    "text": "sizes so let's use the 32 bit variants so we have we're still is playing the fool RSI and RDI but let's use the 32",
    "start": "1029650",
    "end": "1037390"
  },
  {
    "text": "bit ones so ESI and EDI and those you see a lot because in this kind of our",
    "start": "1037390",
    "end": "1043030"
  },
  {
    "text": "default go to data type so you see ESI on EDI a lot so let's see what happens",
    "start": "1043030",
    "end": "1048548"
  },
  {
    "text": "when you use those well we move three three three into our ESI which is the",
    "start": "1048549",
    "end": "1054309"
  },
  {
    "text": "lower half of our si 2 2 2 2 into EDI the lower half of our di and then we're",
    "start": "1054309",
    "end": "1060970"
  },
  {
    "text": "gonna put one our registers into memory and now we're using D word Twitter",
    "start": "1060970",
    "end": "1066460"
  },
  {
    "text": "double word pointer not a quad word pointer because it's now it's only 32 bits register so this is a 32-bit register so",
    "start": "1066460",
    "end": "1073820"
  },
  {
    "text": "let's use a 32-bit address RSP - 4 so it goes in here so we only needed four",
    "start": "1073820",
    "end": "1081980"
  },
  {
    "text": "bytes for the int so we saved off the memory and then we can add it just like before we can add whatever is on this",
    "start": "1081980",
    "end": "1089299"
  },
  {
    "text": "address to EDI so we end up with five five five five five yeah",
    "start": "1089299",
    "end": "1098648"
  },
  {
    "text": "yes they should yeah thank you so that's referring to these",
    "start": "1099519",
    "end": "1106399"
  },
  {
    "text": "here should be three three three instead so now we can read and writes both lungs",
    "start": "1106399",
    "end": "1112370"
  },
  {
    "text": "and int to memory but that's not enough",
    "start": "1112370",
    "end": "1118399"
  },
  {
    "start": "1116000",
    "end": "1392000"
  },
  {
    "text": "we also want to have more data we want to erase and erase are nice also because",
    "start": "1118399",
    "end": "1124850"
  },
  {
    "text": "we get to see a bit more advanced memory addressing it's a good motivating example for that so let's just put some",
    "start": "1124850",
    "end": "1131480"
  },
  {
    "text": "values in memory so RSP - 8 gets 1 1 1 1",
    "start": "1131480",
    "end": "1136820"
  },
  {
    "text": "then RSP - 2 6 - 4 - 2 so now we have",
    "start": "1136820",
    "end": "1142370"
  },
  {
    "text": "some bytes in memory assembly doesn't have any time yeah I use the word here",
    "start": "1142370",
    "end": "1148580"
  },
  {
    "text": "now so just because I don't want the memory to grow too big I'm using shorts so word is 16 bits so then we save some",
    "start": "1148580",
    "end": "1156320"
  },
  {
    "text": "space on the slides and see some other register sizes but assembly doesn't have",
    "start": "1156320",
    "end": "1162230"
  },
  {
    "text": "types these are just bytes in memory so assembly doesn't remember that I put a 16-bit value there is just bytes in",
    "start": "1162230",
    "end": "1168289"
  },
  {
    "text": "memory they could be anything so these could be 8 bytes they could be probably",
    "start": "1168289",
    "end": "1174409"
  },
  {
    "text": "what we want to use them for for short they could be one long they could be some part of a string or a network",
    "start": "1174409",
    "end": "1180710"
  },
  {
    "text": "packet or a class or a structure really they can be anything but we're going to treat them as an array of four shorts",
    "start": "1180710",
    "end": "1187340"
  },
  {
    "text": "and array arrays are like they're almost pointers right so if you want to do",
    "start": "1187340",
    "end": "1193159"
  },
  {
    "text": "something with an array you want a pointer to the first element so let's say it would be useful to put a pointer",
    "start": "1193159",
    "end": "1199309"
  },
  {
    "text": "to the beginning of the array in our register so let's say we want to put it in RDI so how do we find that address well",
    "start": "1199309",
    "end": "1208759"
  },
  {
    "text": "we already saw the square bracket operation thing we could do RSP minus 8 so our space here this the stack pointer",
    "start": "1208759",
    "end": "1215679"
  },
  {
    "text": "here's our value or a first value in the array then you can use the le.a",
    "start": "1215679",
    "end": "1221989"
  },
  {
    "text": "instruction which is the load effective address instruction very handy thing it",
    "start": "1221989",
    "end": "1227419"
  },
  {
    "text": "will compute the address just like we saw it was doing here but instead of dereferencing the value it will just",
    "start": "1227419",
    "end": "1233779"
  },
  {
    "text": "give you the address and put that into RDI so now we have a pointer to the",
    "start": "1233779",
    "end": "1240529"
  },
  {
    "text": "beginning of the array and we can start using it for something so let's say we want okay yeah",
    "start": "1240529",
    "end": "1249309"
  },
  {
    "text": "I don't I think you have to put the square brackets for this index to be correct yeah yes so say we want to get",
    "start": "1257010",
    "end": "1268350"
  },
  {
    "text": "at the fourth element in the array what you do you have a pointer to the beginning you have to skip past the",
    "start": "1268350",
    "end": "1273390"
  },
  {
    "text": "element one two and three they're both both two bytes long they're shorts so we take 3 times 2 is 6 so we",
    "start": "1273390",
    "end": "1280320"
  },
  {
    "text": "can get to our di plus 6 and get the fourth element in the array then we can",
    "start": "1280320",
    "end": "1286830"
  },
  {
    "text": "move it into for instance a X just to show some different sizes again a X is the lower 16 bits of re X but we don't",
    "start": "1286830",
    "end": "1296400"
  },
  {
    "text": "want to hard-code the array index in our assembly code we want to be able to",
    "start": "1296400",
    "end": "1301610"
  },
  {
    "text": "maybe change where we're pointing to him maybe we want to be able to iterate through the array so it would be really",
    "start": "1301610",
    "end": "1307409"
  },
  {
    "text": "useful to have the array index in another register so let's use RSI as the",
    "start": "1307409",
    "end": "1314220"
  },
  {
    "text": "index register and say we want the first element of the array so the first element is index 0",
    "start": "1314220",
    "end": "1320610"
  },
  {
    "text": "let's put 0 into RSI and now we can see a bit more advanced addressing here so",
    "start": "1320610",
    "end": "1327150"
  },
  {
    "text": "Rd is still the base pointer then you have the index and slice off short",
    "start": "1327150",
    "end": "1332760"
  },
  {
    "text": "basically so if you want to get at the RSI element you have to multiply it by",
    "start": "1332760",
    "end": "1338220"
  },
  {
    "text": "to the size of charge to compute the address so 0 times 2 is 0 so we're",
    "start": "1338220",
    "end": "1343470"
  },
  {
    "text": "getting the element at index 0 we're getting 1 1 1 1 1 but now we have",
    "start": "1343470",
    "end": "1350580"
  },
  {
    "text": "parameterised 8 right this this exact line can now take the index from a register so let's increment our index or",
    "start": "1350580",
    "end": "1357690"
  },
  {
    "text": "index was zero we increment it with the increment instruction now it's 1 then we",
    "start": "1357690",
    "end": "1363570"
  },
  {
    "text": "can use exactly the same instruction to do base pointer plus index times so I",
    "start": "1363570",
    "end": "1369570"
  },
  {
    "text": "saw the element and then we can move that into a X so now we get to instead",
    "start": "1369570",
    "end": "1377270"
  },
  {
    "text": "and now we have generalized table way to access memory right up by the base",
    "start": "1377270",
    "end": "1382799"
  },
  {
    "text": "pointer and the index and that's kind of begging for being used with like conditionals or loops or something like",
    "start": "1382799",
    "end": "1388620"
  },
  {
    "text": "that so let's look at conditionals we want to",
    "start": "1388620",
    "end": "1397559"
  },
  {
    "start": "1392000",
    "end": "1548000"
  },
  {
    "text": "have we want to write an if statement which takes two numbers checks if the first one is greater in that case it",
    "start": "1397559",
    "end": "1403949"
  },
  {
    "text": "stores true if the first one is not greater it source false quite simple but",
    "start": "1403949",
    "end": "1409619"
  },
  {
    "text": "in assembly we don't have if or switch or else or anything like nice like that",
    "start": "1409619",
    "end": "1414749"
  },
  {
    "text": "we have comparisons and go to basically but gotas are considered great so let's",
    "start": "1414749",
    "end": "1422699"
  },
  {
    "text": "see what we can do with go to let's move some values into registers are the INRs",
    "start": "1422699",
    "end": "1430619"
  },
  {
    "text": "Ayano 3 and 2 then we can compare them and nothing happens when I execute to",
    "start": "1430619",
    "end": "1438449"
  },
  {
    "text": "the compare it just compares it doesn't return you anything it just checks various properties of comparing these",
    "start": "1438449",
    "end": "1444629"
  },
  {
    "text": "numbers and just stores it away in some flags in a Flags register on the next",
    "start": "1444629",
    "end": "1449939"
  },
  {
    "text": "line I can do a conditional jump so I can do jump if greater in jg is for jump",
    "start": "1449939",
    "end": "1455429"
  },
  {
    "text": "if greater so it will check those flags that were set on the previous line and and see well was it greater are di was",
    "start": "1455429",
    "end": "1463319"
  },
  {
    "text": "greater than 3 greater than 2 so yes I jump where do I jump to a label and this",
    "start": "1463319",
    "end": "1469049"
  },
  {
    "text": "is how labels look so I jump to the label and we want to store it true",
    "start": "1469049",
    "end": "1475169"
  },
  {
    "text": "because the first number was greater so let's move 1 for true into our ax and",
    "start": "1475169",
    "end": "1480389"
  },
  {
    "text": "now our a X contains crew if it was the",
    "start": "1480389",
    "end": "1486839"
  },
  {
    "text": "other way around if we had to in our di and 3 quickly stopped working yeah go to",
    "start": "1486839",
    "end": "1498929"
  },
  {
    "text": "in our di 3 and RSI compare them nothing happens jump if greater was our di",
    "start": "1498929",
    "end": "1505009"
  },
  {
    "text": "larger than 3 it was not so we don't jump we just fall through we fall",
    "start": "1505009",
    "end": "1510899"
  },
  {
    "text": "through into here the next line we store false in our ax but now we have to be",
    "start": "1510899",
    "end": "1517289"
  },
  {
    "text": "careful so we don't fall through down here right the labels aren't protecting this in any way so we have to do an",
    "start": "1517289",
    "end": "1524010"
  },
  {
    "text": "additional jump to get out of the if to avoid the other condition and you might",
    "start": "1524010",
    "end": "1532830"
  },
  {
    "text": "notice here that like this was kind of our else block a false thing and this",
    "start": "1532830",
    "end": "1538560"
  },
  {
    "text": "was our if block the true thing so often you'll see that the else block is above",
    "start": "1538560",
    "end": "1544310"
  },
  {
    "text": "if block there's a bunch of comparison",
    "start": "1544310",
    "end": "1551520"
  },
  {
    "start": "1548000",
    "end": "1645000"
  },
  {
    "text": "operators all right there's one comparison operators operator and there's a bunch of jump conditional",
    "start": "1551520",
    "end": "1557100"
  },
  {
    "text": "jumps so compare up one up two we'll compare these two and then all of these",
    "start": "1557100",
    "end": "1564360"
  },
  {
    "text": "will check the results so if they were equal you can jump equal you can jump not equal you can jump less less equal",
    "start": "1564360",
    "end": "1571830"
  },
  {
    "text": "jump greater and jump greater or equal and I said assembly doesn't have types so it doesn't care what the type of a",
    "start": "1571830",
    "end": "1579510"
  },
  {
    "text": "byte is in memory or in a register or whatever but comparisons are different",
    "start": "1579510",
    "end": "1585060"
  },
  {
    "text": "right you have a bit pattern that can either be a positive number or if it's a sign type it can be a negative number so",
    "start": "1585060",
    "end": "1591300"
  },
  {
    "text": "the inter you have to choose do you want a signed or unsigned comparison so we",
    "start": "1591300",
    "end": "1596370"
  },
  {
    "text": "have some unsigned comparison operators as well and well greater and less we're",
    "start": "1596370",
    "end": "1601560"
  },
  {
    "text": "taking so let's use below and above instead so here are the corresponding ones for unsigned and the way the",
    "start": "1601560",
    "end": "1610320"
  },
  {
    "text": "comparison works is it just subtracts the second operand from the first that's basically all it does if there was if",
    "start": "1610320",
    "end": "1617730"
  },
  {
    "text": "they were equal the result is zero it doesn't store the result anamur but it stores the fact that it was zero it sets",
    "start": "1617730",
    "end": "1623640"
  },
  {
    "text": "the zero flag if this was greater than this well then it gets the subtraction",
    "start": "1623640",
    "end": "1630720"
  },
  {
    "text": "result results in a negative number and then it sets the sign flag so what these",
    "start": "1630720",
    "end": "1635970"
  },
  {
    "text": "two are just checking the flags that's the comparison left in the flags",
    "start": "1635970",
    "end": "1641700"
  },
  {
    "text": "register okay now we have variables erase memory",
    "start": "1641700",
    "end": "1649060"
  },
  {
    "start": "1645000",
    "end": "1774000"
  },
  {
    "text": "addressing conditionals we also want loops and assembly doesn't have if a",
    "start": "1649060",
    "end": "1654730"
  },
  {
    "text": "Nelson anything like that of course it doesn't have while or for or do or anything like that either",
    "start": "1654730",
    "end": "1659860"
  },
  {
    "text": "we still have comparisons and our go-to is though so we can implement a for using that so let's say we want to",
    "start": "1659860",
    "end": "1668350"
  },
  {
    "text": "iterate over over over a value we want to iterate from one so let's use our CX",
    "start": "1668350",
    "end": "1674230"
  },
  {
    "text": "as our loop index set a to one and we",
    "start": "1674230",
    "end": "1679780"
  },
  {
    "text": "want to accumulate a value in our a X so let's initialize that to zero then",
    "start": "1679780",
    "end": "1686320"
  },
  {
    "text": "there's a label and then we compare our CX two three so this is our loop",
    "start": "1686320",
    "end": "1692080"
  },
  {
    "text": "termination Jackie is it three it's not three so jump equal will not jump it was",
    "start": "1692080",
    "end": "1698500"
  },
  {
    "text": "not equal it doesn't jump it just falls falls through and it increments our",
    "start": "1698500",
    "end": "1704410"
  },
  {
    "text": "results just to have something to do let's just add the loop counter to our a X then we can increment the counter so",
    "start": "1704410",
    "end": "1713650"
  },
  {
    "text": "now that's two and we unconditionally jump to the beginning of the for loop are we three yet",
    "start": "1713650",
    "end": "1720430"
  },
  {
    "text": "we're not free yet so we do not jump equal keep adding our CX to our ax",
    "start": "1720430",
    "end": "1726360"
  },
  {
    "text": "increment our CX to for the next round jump to the beginning are we three yet",
    "start": "1726360",
    "end": "1732580"
  },
  {
    "text": "yes we're three so we jump to the end of the for loop that's how we do a for loop and",
    "start": "1732580",
    "end": "1738060"
  },
  {
    "text": "can anyone translate this for loop in to see yeah let's see so here's the C code",
    "start": "1738060",
    "end": "1751090"
  },
  {
    "text": "so we say int our ax equals zero for our z x equals 1 or C X not equal to three",
    "start": "1751090",
    "end": "1760030"
  },
  {
    "text": "and then we have the plus plus RZ x then we can go our ax plus equals r CX so",
    "start": "1760030",
    "end": "1769720"
  },
  {
    "text": "that's how you can do a for loop so let's look at a real example not this",
    "start": "1769720",
    "end": "1778610"
  },
  {
    "start": "1774000",
    "end": "1809000"
  },
  {
    "text": "one it's too large let's look at a smaller one simple sum function simplest",
    "start": "1778610",
    "end": "1785450"
  },
  {
    "text": "function I could think of really sum function takes two integers a and B",
    "start": "1785450",
    "end": "1790840"
  },
  {
    "text": "something together and returns the result sum of a plus B just return a",
    "start": "1790840",
    "end": "1796970"
  },
  {
    "text": "plus B let's just bring all of that code on the right-hand side it's it's a bit",
    "start": "1796970",
    "end": "1803150"
  },
  {
    "text": "it's not too long let's bring it into our little slide where emulator so",
    "start": "1803150",
    "end": "1810110"
  },
  {
    "start": "1809000",
    "end": "2081000"
  },
  {
    "text": "here's all of our assembly code that we got from I happen to use GCC 9.1 but I",
    "start": "1810110",
    "end": "1816950"
  },
  {
    "text": "can't imagine this would change very much with other versions so the first",
    "start": "1816950",
    "end": "1824600"
  },
  {
    "text": "thing to think about with a function is how do you get the arguments into the function that's the first thing you have",
    "start": "1824600",
    "end": "1830630"
  },
  {
    "text": "to do so it turns out there's a thing called a calling convention I'm on a Mac I wrote the presentation on my Linux",
    "start": "1830630",
    "end": "1837650"
  },
  {
    "text": "computer both of those use the system v amd64 calling convention the calling",
    "start": "1837650",
    "end": "1843890"
  },
  {
    "text": "convention will specify among other things how do you get stuff in and out of functions and Microsoft has their own",
    "start": "1843890",
    "end": "1850910"
  },
  {
    "text": "calling convention it's very similar to the system v1 and it says the first",
    "start": "1850910",
    "end": "1857360"
  },
  {
    "text": "couple of integers you can just stick them in some registers that we agree on so it says the two first integers",
    "start": "1857360",
    "end": "1863990"
  },
  {
    "text": "integers to go should go in RDI and RSI so whoever called the sum function would",
    "start": "1863990",
    "end": "1869690"
  },
  {
    "text": "first put the arguments 2 and 3 that it wants to sum into those registers then call us because then we can just go and",
    "start": "1869690",
    "end": "1876350"
  },
  {
    "text": "pick them up from there then we start our function the first thing we do is to",
    "start": "1876350",
    "end": "1883610"
  },
  {
    "text": "push a register on to the stack we're pushing our BP and the reason for that",
    "start": "1883610",
    "end": "1888950"
  },
  {
    "text": "is and you can see we push it here and then we pop it at the end and that's because it's our obligation by the",
    "start": "1888950",
    "end": "1895970"
  },
  {
    "text": "calling convention to not destroy our BP so whoever called us we're probably using our BP for something so let's make",
    "start": "1895970",
    "end": "1903410"
  },
  {
    "text": "sure if we overwrite it we have restore it and we are going to overwrite it on the next line so let's push that",
    "start": "1903410",
    "end": "1909379"
  },
  {
    "text": "first then we move our sp remember the",
    "start": "1909379",
    "end": "1915619"
  },
  {
    "text": "stack pointer we move our SP into our VP the reason we do that this you're gonna",
    "start": "1915619",
    "end": "1921499"
  },
  {
    "text": "see in all functions when you look at them and compiler explorer it always does this it puts a copy of RSP into RB",
    "start": "1921499",
    "end": "1928580"
  },
  {
    "text": "P and that's because in many many cases we are going to start messing about with the stack pointer we might be pushing",
    "start": "1928580",
    "end": "1934669"
  },
  {
    "text": "and popping stuff we might call other functions we might need to change our SP so it's very nice if we in the beginning",
    "start": "1934669",
    "end": "1940759"
  },
  {
    "text": "of the function we just make a copy here this is called the base pointer then we have a base pointer that points to the",
    "start": "1940759",
    "end": "1946609"
  },
  {
    "text": "beginning of our part of the stack this is our stack frame our stuff and then we can do all this relative addressing here",
    "start": "1946609",
    "end": "1954279"
  },
  {
    "text": "relative to our VP instead of our RSP in case that changes in this function we",
    "start": "1954279",
    "end": "1961369"
  },
  {
    "text": "don't mess about with our SP it doesn't change but it seems that most compilers will always do this anyway so what does",
    "start": "1961369",
    "end": "1972529"
  },
  {
    "text": "GCC do okay first a disclaimer I didn't write this code GCC wrote this code so",
    "start": "1972529",
    "end": "1978499"
  },
  {
    "text": "if you have any issues with it take it up with the GCC what's what is doing well we got the two arguments here in",
    "start": "1978499",
    "end": "1984799"
  },
  {
    "text": "our do an RSI it wants to move those into memory for some reason so it moved",
    "start": "1984799",
    "end": "1994009"
  },
  {
    "text": "them into RB p -4 and 8 so we got them copied in here and here and this is",
    "start": "1994009",
    "end": "2002649"
  },
  {
    "text": "actually good because these are our function arguments there are L values we they now have an address we can take the",
    "start": "2002649",
    "end": "2008889"
  },
  {
    "text": "red dress we can inspect them in a debugger they are actual variables in memory rather than just paying some values in registers so if you're doing a",
    "start": "2008889",
    "end": "2017259"
  },
  {
    "text": "debug buildin I guess this is fine then Jesus he wants to copy them back into",
    "start": "2017259",
    "end": "2024789"
  },
  {
    "text": "registers so it uses EDX and EAX to copy them back into and we add edx to EAX so",
    "start": "2024789",
    "end": "2034059"
  },
  {
    "text": "3 plus 2 equals 5",
    "start": "2034059",
    "end": "2039090"
  },
  {
    "text": "and then we have to pop our appear remember not to step on our callers toes",
    "start": "2039090",
    "end": "2044830"
  },
  {
    "text": "so we pop that and we return and return just sets the instruction pointer back to whoever called us the missing piece",
    "start": "2044830",
    "end": "2054129"
  },
  {
    "text": "of the puzzle is how do we get the return value out of our function and up to our caller and again this is the",
    "start": "2054130",
    "end": "2060760"
  },
  {
    "text": "calling convention telling us that if you're returning a single int I just put it in our ax and then the caller will",
    "start": "2060760",
    "end": "2068320"
  },
  {
    "text": "after getting return back and just look in re X and expect you to have left the package in our ax and then finally we",
    "start": "2068320",
    "end": "2077800"
  },
  {
    "text": "return so if anyone thought that that",
    "start": "2077800",
    "end": "2083710"
  },
  {
    "start": "2081000",
    "end": "2248000"
  },
  {
    "text": "was a quite cumbersome way to add two values I think both me and GCC agree",
    "start": "2083710",
    "end": "2090570"
  },
  {
    "text": "with you so we can put in some compiler options so let's try all - let's try a",
    "start": "2090570",
    "end": "2099070"
  },
  {
    "text": "one so on even on our one it decides to do this optimization so it's now a",
    "start": "2099070",
    "end": "2107080"
  },
  {
    "text": "one-liner that we just do a one-liner and return remember le a load effective",
    "start": "2107080",
    "end": "2113890"
  },
  {
    "text": "address so this is a instruction used for loading effective addresses so what we are not loading any addresses why are",
    "start": "2113890",
    "end": "2119770"
  },
  {
    "text": "we using le a well it turns out that this is something you do a lot so this",
    "start": "2119770",
    "end": "2124960"
  },
  {
    "text": "is very very fast to do arithmetic you can do simple arithmetic in here and again assembly has no type so if you",
    "start": "2124960",
    "end": "2132340"
  },
  {
    "text": "just give it some values we can just pretend one of them is an address that doesn't matter right so we just we just",
    "start": "2132340",
    "end": "2138070"
  },
  {
    "text": "kind of hijack le a to do the addition and the nice thing as unlike the normal",
    "start": "2138070",
    "end": "2146290"
  },
  {
    "text": "add instruction which adds the result in one of the operands we can choose where to get the result so we can add already",
    "start": "2146290",
    "end": "2153880"
  },
  {
    "text": "IRS ID that two registers that the calling convention gave us the values in and put them directly into the register",
    "start": "2153880",
    "end": "2160540"
  },
  {
    "text": "where we supposed to put the result by the calling dimension so that's a nice little optimization that you will see a",
    "start": "2160540",
    "end": "2166510"
  },
  {
    "text": "lot so now we don't need to move anything into memory or back again",
    "start": "2166510",
    "end": "2171940"
  },
  {
    "text": "so optimisations argued then we've seen",
    "start": "2171940",
    "end": "2180180"
  },
  {
    "text": "variables memory erase memory addressing control flow if and for even started",
    "start": "2180180",
    "end": "2186309"
  },
  {
    "text": "looking at functions then we can move on to the holy grail of programming",
    "start": "2186309",
    "end": "2192309"
  },
  {
    "text": "paradigms which is structured programming okay let's see what happens",
    "start": "2192309",
    "end": "2199260"
  },
  {
    "text": "in a full function so here we have our",
    "start": "2199260",
    "end": "2205390"
  },
  {
    "text": "little sum function again it's almost the same as before takes two integers a and B sum sum together but multiplies",
    "start": "2205390",
    "end": "2214000"
  },
  {
    "text": "them by two before returning so times to function just takes its argument returns",
    "start": "2214000",
    "end": "2219490"
  },
  {
    "text": "its multiplied by two so we have our function a plus B pass it through times",
    "start": "2219490",
    "end": "2225970"
  },
  {
    "text": "two and then return yeah I'm cool I'll",
    "start": "2225970",
    "end": "2237190"
  },
  {
    "text": "copy all of that all of this assembly code it's now starting to look a bit big but most of it we've actually seen",
    "start": "2237190",
    "end": "2243190"
  },
  {
    "text": "before so it's not going to be so bad we'll put all that into our slide where emulator again and we're going to need a",
    "start": "2243190",
    "end": "2249910"
  },
  {
    "start": "2248000",
    "end": "2501000"
  },
  {
    "text": "bit more memory because we're going to call some functions and stuff so I just added another column of memory it's",
    "start": "2249910",
    "end": "2256210"
  },
  {
    "text": "still just sequential memory just going down here a zero and then continuing again 9f oops and continuing down here",
    "start": "2256210",
    "end": "2264369"
  },
  {
    "text": "so it's just to make it all fit on the flights so first we push our BP we've",
    "start": "2264369",
    "end": "2271990"
  },
  {
    "text": "seen this before then we move our SP into our BP again to have like a stable",
    "start": "2271990",
    "end": "2277000"
  },
  {
    "text": "base pointer to do our addressing relative to this time we need it this",
    "start": "2277000",
    "end": "2282970"
  },
  {
    "text": "time we're going to change our SP so we had to make this copy of our SP because",
    "start": "2282970",
    "end": "2288339"
  },
  {
    "text": "we're going to mess about with it and why are we going to change the top of",
    "start": "2288339",
    "end": "2295240"
  },
  {
    "text": "the stack well the sometimes to function is going to call this other function and",
    "start": "2295240",
    "end": "2304029"
  },
  {
    "text": "when we call that function that function is going to start using the stack pointer and saying okay everything from the stack pointer on I",
    "start": "2304029",
    "end": "2309910"
  },
  {
    "text": "can use so we have to make sure we first bump that out of the way so that we have",
    "start": "2309910",
    "end": "2315130"
  },
  {
    "text": "our own part of memory that we can write you and not get overwritten by by",
    "start": "2315130",
    "end": "2322210"
  },
  {
    "text": "whoever we call so then we can see RSP got bumped all the way down here to this",
    "start": "2322210",
    "end": "2328990"
  },
  {
    "text": "place and now everything is as exactly",
    "start": "2328990",
    "end": "2334300"
  },
  {
    "text": "like it was in our first time function we got the two arguments by the colon convention in our di and our si GCC",
    "start": "2334300",
    "end": "2340510"
  },
  {
    "text": "wants to put them in memory and then put them back again and then it was the",
    "start": "2340510",
    "end": "2347470"
  },
  {
    "text": "addition the ex edx and that in EAX exactly like in our previous some function so EA x is 3 and we add edx so",
    "start": "2347470",
    "end": "2359290"
  },
  {
    "text": "it's 5 now it's our turn to call a",
    "start": "2359290",
    "end": "2364990"
  },
  {
    "text": "function so now it's our turn to think about the calling end of the calling convention so we have to make sure the",
    "start": "2364990",
    "end": "2372010"
  },
  {
    "text": "single integer argument that we're going to pass to the x 2 function has to be in EDI so we have our result a plus B is an",
    "start": "2372010",
    "end": "2380920"
  },
  {
    "text": "ax we need to get that into EDI before calling our function and then we call we",
    "start": "2380920",
    "end": "2388720"
  },
  {
    "text": "just transfer control down here and again push our BP move our BP our SP we've seen those now many times we also",
    "start": "2388720",
    "end": "2398590"
  },
  {
    "text": "see in this we take the EDI the argument we got put it into memory so we have a proper local variable and put it back",
    "start": "2398590",
    "end": "2406660"
  },
  {
    "text": "into a register and even here on o0 GCC figured let's not do",
    "start": "2406660",
    "end": "2414100"
  },
  {
    "text": "that's what x - let's just add it to itself instead because that's faster so",
    "start": "2414100",
    "end": "2419140"
  },
  {
    "text": "we add the ax to a ax so 5 plus 5 equals a then we pop our BP as we always do and",
    "start": "2419140",
    "end": "2428920"
  },
  {
    "text": "we return so now we're",
    "start": "2428920",
    "end": "2434250"
  },
  {
    "text": "about to leave the outer function and we have to make sure the result is in EAX",
    "start": "2434250",
    "end": "2440370"
  },
  {
    "text": "because that's what the : Convention tells us to do well it turns out we are just returning whatever we got from The",
    "start": "2440370",
    "end": "2449010"
  },
  {
    "text": "Times to function so here we're just returning that and that's that value",
    "start": "2449010",
    "end": "2454020"
  },
  {
    "text": "happens to already be in EAX so we don't have to do anything we can",
    "start": "2454020",
    "end": "2459990"
  },
  {
    "text": "just leave and the live instruction is a new one we haven't seen before like we're used to if you're returning from a",
    "start": "2459990",
    "end": "2465900"
  },
  {
    "text": "function so far we've been used to popping our BP and returning this time",
    "start": "2465900",
    "end": "2471360"
  },
  {
    "text": "however we have messed about with the stack pointer so the leave instruction will first restore the stack pointer if",
    "start": "2471360",
    "end": "2480810"
  },
  {
    "text": "I click on the right screen it will yeah it will restore the stack pointer by",
    "start": "2480810",
    "end": "2487980"
  },
  {
    "text": "copying our BP back into it and then it will do the proper BP that we've seen all the times so far and we return from",
    "start": "2487980",
    "end": "2495210"
  },
  {
    "text": "the function so again that seemed like a",
    "start": "2495210",
    "end": "2504210"
  },
  {
    "start": "2501000",
    "end": "2974000"
  },
  {
    "text": "lot of work what happens if we add some",
    "start": "2504210",
    "end": "2509220"
  },
  {
    "text": "optimization here turns out a 1 is enough doesn't help to put one more so",
    "start": "2509220",
    "end": "2518480"
  },
  {
    "text": "let's first look at x 2 it's supposed to multiply its arguments so it did that",
    "start": "2518480",
    "end": "2524400"
  },
  {
    "text": "very quickly by just doing ad r di r di or EDI EDI it turns out that we can also",
    "start": "2524400",
    "end": "2531650"
  },
  {
    "text": "use the load effective address here just to take this sum and stick it in the",
    "start": "2531650",
    "end": "2537120"
  },
  {
    "text": "other register in one operation so we don't have to first do the addition and move it into our ax or anything like that so what about this sometimes to",
    "start": "2537120",
    "end": "2548640"
  },
  {
    "text": "function it gets it or its arguments in EDI and ESI so let's add those together",
    "start": "2548640",
    "end": "2556260"
  },
  {
    "text": "into EDI so now a plus B is in EDI and now it's actually in lines all of the",
    "start": "2556260",
    "end": "2562230"
  },
  {
    "text": "times to function in here so just basically copy/paste the implementation of this one in here so adjust the times",
    "start": "2562230",
    "end": "2568020"
  },
  {
    "text": "to think directly here without having a function call and then we return",
    "start": "2568020",
    "end": "2573920"
  },
  {
    "text": "so again optimizations to help so if we",
    "start": "2573920",
    "end": "2585720"
  },
  {
    "text": "go back to our first example yeah sure",
    "start": "2585720",
    "end": "2593119"
  },
  {
    "text": "probably because then it wouldn't be visible outside the compilation units oh",
    "start": "2597470",
    "end": "2604640"
  },
  {
    "text": "yeah sure Thanks yeah yeah so the reason",
    "start": "2604640",
    "end": "2612300"
  },
  {
    "text": "it keeps it is because if you compile this compilation unit and you link it to",
    "start": "2612300",
    "end": "2617730"
  },
  {
    "text": "someone else then even if you inline the times to this signature still needs to",
    "start": "2617730",
    "end": "2624420"
  },
  {
    "text": "be here in the object file so that you can link to it and call it from some other compilation unit but if you make",
    "start": "2624420",
    "end": "2631290"
  },
  {
    "text": "it static it doesn't have external linkage you can't link to it so we can just remove it",
    "start": "2631290",
    "end": "2637579"
  },
  {
    "text": "was that a question or a statement okay yeah so the comet is like why is it",
    "start": "2646320",
    "end": "2653500"
  },
  {
    "text": "using our di plus or di and not EDI plus e SI e EDI plus ESI and the hypothesis",
    "start": "2653500",
    "end": "2661360"
  },
  {
    "text": "is that it might because be because le I needs a 4-bit address that sounds",
    "start": "2661360",
    "end": "2666550"
  },
  {
    "text": "possible I'm not sure does anyone know oh it doesn't matter because if you if",
    "start": "2666550",
    "end": "2675070"
  },
  {
    "text": "you write to e si it's going to zero out the upper part so if it didn't zero out",
    "start": "2675070",
    "end": "2681460"
  },
  {
    "text": "it could be that's that there would be something else in the top but well we",
    "start": "2681460",
    "end": "2687220"
  },
  {
    "text": "only store it in EAX anyway so yeah sounds like a possible theory yeah so",
    "start": "2687220",
    "end": "2698550"
  },
  {
    "text": "back to the original I promised you that at the end of the talk we were going to",
    "start": "2698550",
    "end": "2706510"
  },
  {
    "text": "understand all of this assembly code it's not the most advanced program I've",
    "start": "2706510",
    "end": "2712030"
  },
  {
    "text": "seen but it does have functions for loops assignments returning stuff",
    "start": "2712030",
    "end": "2719140"
  },
  {
    "text": "calling other functions if statements it has like all the programming basics and",
    "start": "2719140",
    "end": "2724330"
  },
  {
    "text": "that's kind of the goal of this talk is to cover the basics to give you like a fundamental understanding that's that",
    "start": "2724330",
    "end": "2729910"
  },
  {
    "text": "you can build on so let's see I'm not going to go through everything in detail",
    "start": "2729910",
    "end": "2736920"
  },
  {
    "text": "but if you look at this code after the talk sit down and you will recognize everything from us we talked about so",
    "start": "2736920",
    "end": "2743860"
  },
  {
    "text": "let's look at the computer function push our BP move our BP RSP we've seen that that's the usual preamble don't destroy",
    "start": "2743860",
    "end": "2751240"
  },
  {
    "text": "our BP take a backup the stay off the stack pointer in the back in the base pointer so we can do addressing relative",
    "start": "2751240",
    "end": "2757180"
  },
  {
    "text": "to that keyword footer means this is the 32 bits thing we're addressing in memory",
    "start": "2757180",
    "end": "2764940"
  },
  {
    "text": "EDI on ESI why those registers because those were the parameters they go into",
    "start": "2764940",
    "end": "2770860"
  },
  {
    "text": "those registers by the calling convention and then we have a for loop",
    "start": "2770860",
    "end": "2777850"
  },
  {
    "text": "so in our for loop were just decrementing be until and as long as it's larger than zero so B has been",
    "start": "2777850",
    "end": "2785710"
  },
  {
    "text": "moved from here into here so we can compare that to zero if it was equal the for loop is done so then we can jump",
    "start": "2785710",
    "end": "2792460"
  },
  {
    "text": "down a bit so this is our end for down",
    "start": "2792460",
    "end": "2799390"
  },
  {
    "text": "here if it wasn't the equal we'll do the body of the function so we'll move a and",
    "start": "2799390",
    "end": "2805300"
  },
  {
    "text": "B into these registers add B to a and move the result back into memory and",
    "start": "2805300",
    "end": "2813900"
  },
  {
    "text": "subtract one from B so this is the minus minus B in the for loop and then we jump",
    "start": "2813900",
    "end": "2819040"
  },
  {
    "text": "to the beginning of the for loop again so this is things we've already seen and",
    "start": "2819040",
    "end": "2825640"
  },
  {
    "text": "then it finally moves the result into EAX why does it move it into EAX because",
    "start": "2825640",
    "end": "2831820"
  },
  {
    "text": "that's where the calling convention tells us results should be we pop our BP to restore it and return call her again",
    "start": "2831820",
    "end": "2842020"
  },
  {
    "text": "the preambles going to go through that setting aside some space on the stack so whenever you see sub RSP something it",
    "start": "2842020",
    "end": "2848800"
  },
  {
    "text": "means let's let's reserve some space on the stack for ourselves and again with",
    "start": "2848800",
    "end": "2855070"
  },
  {
    "text": "the ESI EDI so we have this literal values 1 & 3 so let's put those as the arguments let's call the function on the",
    "start": "2855070",
    "end": "2862990"
  },
  {
    "text": "function returns the result will be in EAX let's put that into a local variable so this will now be our I over here then",
    "start": "2862990",
    "end": "2873790"
  },
  {
    "text": "we compare it to 9 because we're going to check if it's less than 10 so we decided to do that with a compared to 9",
    "start": "2873790",
    "end": "2879340"
  },
  {
    "text": "and jump greater and then it will move the results in here if it was less than",
    "start": "2879340",
    "end": "2887350"
  },
  {
    "text": "10 then we return I and otherwise we just go down to the end and return 10",
    "start": "2887350",
    "end": "2896850"
  },
  {
    "text": "you see here then we do the leave we need to leave now because we did we did",
    "start": "2896850",
    "end": "2906160"
  },
  {
    "text": "mess about with the stack pointer so we'll leave will restore the stack pointer and pop our BP and then return",
    "start": "2906160",
    "end": "2911910"
  },
  {
    "text": "will we turn us back to our recorder so now we",
    "start": "2911910",
    "end": "2917650"
  },
  {
    "text": "have everything we need to understand all of that code so the goal here was to",
    "start": "2917650",
    "end": "2928380"
  },
  {
    "text": "mainly like if you can have very simple code you can actually understand the output the other goal is to have a",
    "start": "2928800",
    "end": "2935320"
  },
  {
    "text": "fundamental understanding of how these things work so when you paste your code you're going to have some instructions here that you don't understand good",
    "start": "2935320",
    "end": "2943510"
  },
  {
    "text": "thing here to do then is just hover over it and then you get a short description",
    "start": "2943510",
    "end": "2951430"
  },
  {
    "text": "of what that instruction is doing and you can go and search for it online and find more information but hopefully",
    "start": "2951430",
    "end": "2958570"
  },
  {
    "text": "after this talk then you have at least some framework to help you understand those results so some tips if you want",
    "start": "2958570",
    "end": "2968020"
  },
  {
    "text": "to use compiler Explorer for your own code is to actually show the slides",
    "start": "2968020",
    "end": "2974520"
  },
  {
    "start": "2974000",
    "end": "3068000"
  },
  {
    "text": "hover the instruction to see a description then google it and make a",
    "start": "2974520",
    "end": "2982839"
  },
  {
    "text": "local standalone reproduction first so if you have codes that which includes lots of other stuff and calls function",
    "start": "2982839",
    "end": "2988540"
  },
  {
    "text": "try to get everything into one CPP file that doesn't include any non-standard stuff maybe I have some refactoring",
    "start": "2988540",
    "end": "2995859"
  },
  {
    "text": "tools that can help you or than else copy paste is good just try to mash everything into one CPP file and remove",
    "start": "2995859",
    "end": "3002430"
  },
  {
    "text": "everything you don't need and then paste it and it's easier to read sometimes you",
    "start": "3002430",
    "end": "3010109"
  },
  {
    "text": "want to look at a specific feature of the purpose it's often helpful to use",
    "start": "3010109",
    "end": "3015150"
  },
  {
    "text": "instead of complicated types so in many cases it's a lot easier to see if you",
    "start": "3015150",
    "end": "3020580"
  },
  {
    "text": "just use an int and set of like some really complicated stuff unless it has of course side-effects that are",
    "start": "3020580",
    "end": "3026849"
  },
  {
    "text": "important to you and don't try it out on your full project right",
    "start": "3026849",
    "end": "3032339"
  },
  {
    "text": "don't inline your entire thing and place it it's mostly useful to look at very",
    "start": "3032339",
    "end": "3038670"
  },
  {
    "text": "like specific things that you want robot and yeah I also also wanted to ask if",
    "start": "3038670",
    "end": "3045780"
  },
  {
    "text": "there are any other tips from the audience for use in compiler Explorer Jason Turner might know something about this yeah yeah",
    "start": "3045780",
    "end": "3058770"
  },
  {
    "text": "that's that's that's a good thing yeah put it on Twitter or Stack Overflow or something that's also also possible yeah",
    "start": "3058770",
    "end": "3068340"
  },
  {
    "start": "3068000",
    "end": "3094000"
  },
  {
    "text": "you didn't have many questions during the talk so there's some time left for questions so any other questions yeah",
    "start": "3068340",
    "end": "3081920"
  },
  {
    "text": "yes that was I was trying not to complicate stuff but yeah so beyond",
    "start": "3085369",
    "end": "3091680"
  },
  {
    "text": "caught me cheating a bit especially in this example so when I just step back if",
    "start": "3091680",
    "end": "3101640"
  },
  {
    "start": "3094000",
    "end": "3201000"
  },
  {
    "text": "you yeah so when I call here and then later I return down here so how how does",
    "start": "3101640",
    "end": "3107550"
  },
  {
    "text": "it know where to return to so what it does it will actually push the",
    "start": "3107550",
    "end": "3113000"
  },
  {
    "text": "instruction pointer on to the stack when it calls and when you return it will get",
    "start": "3113000",
    "end": "3118260"
  },
  {
    "text": "that value back to know where it's going to and in that way I can you can call as many functions as you will until the",
    "start": "3118260",
    "end": "3124170"
  },
  {
    "text": "stack is full so yeah leave we'll do the",
    "start": "3124170",
    "end": "3132720"
  },
  {
    "text": "pop rbp thing that we've been doing all the time but in addition it's gonna",
    "start": "3132720",
    "end": "3138320"
  },
  {
    "text": "restore the stack pointer because we we subtract 16 from the decide pointer here",
    "start": "3138320",
    "end": "3143760"
  },
  {
    "text": "and then we have to make sure we add 16 back before we go out so the way it restores it is to take well we we did",
    "start": "3143760",
    "end": "3151980"
  },
  {
    "text": "take a backup of RSP into RB P here right so it's gonna copy our BP back into RSP and then pop our VP so if we go",
    "start": "3151980",
    "end": "3162060"
  },
  {
    "text": "down yeah here yeah so the first thing",
    "start": "3162060",
    "end": "3168510"
  },
  {
    "text": "it does copy our BP into our SP so our SP is now back where it was and then pop",
    "start": "3168510",
    "end": "3174240"
  },
  {
    "text": "our BP and there should have been an instruction pointer at at least on the",
    "start": "3174240",
    "end": "3180820"
  },
  {
    "text": "stack in between here but then I would have to add yet another column of memory and my slide would be even more",
    "start": "3180820",
    "end": "3186940"
  },
  {
    "text": "unreadable so I skipped that one any",
    "start": "3186940",
    "end": "3192190"
  },
  {
    "text": "other questions question let's optimize",
    "start": "3192190",
    "end": "3203590"
  },
  {
    "start": "3201000",
    "end": "3319000"
  },
  {
    "text": "it yep",
    "start": "3203590",
    "end": "3209020"
  },
  {
    "text": "it does change quite a lot so what does it do it takes the first arguments of a",
    "start": "3209020",
    "end": "3218470"
  },
  {
    "text": "puts it right into the result thing and then it tests if B is equal to itself so",
    "start": "3218470",
    "end": "3228010"
  },
  {
    "text": "this computes a bit radical and yeah so this is kind of like compare I don't",
    "start": "3228010",
    "end": "3236140"
  },
  {
    "text": "know what just us yeah so test for 0 if",
    "start": "3236140",
    "end": "3242440"
  },
  {
    "text": "it was 0 we jump to the end of the for loop and then we can just return because we already have the results in here a is",
    "start": "3242440",
    "end": "3249640"
  },
  {
    "text": "AE ax is whatever a was if not then",
    "start": "3249640",
    "end": "3255880"
  },
  {
    "text": "we're going to keep adding ESI which is be keeping adding it onto a pour it out",
    "start": "3255880",
    "end": "3261340"
  },
  {
    "text": "onto the result and do B - - and yeah",
    "start": "3261340",
    "end": "3267100"
  },
  {
    "text": "here's another thing I said that compare is basically a subtract which doesn't store the results so here's an actual",
    "start": "3267100",
    "end": "3274060"
  },
  {
    "text": "subtract and this is quite nice because then you don't have to first subtract and then then do a comparison after you",
    "start": "3274060",
    "end": "3281950"
  },
  {
    "text": "can just jump if not equal so subtract 1 from you so I if it reached 0 it will set the zero flag so we can just test",
    "start": "3281950",
    "end": "3288460"
  },
  {
    "text": "that that down here instead of doing and doing an actual extra compared and Coler",
    "start": "3288460",
    "end": "3296230"
  },
  {
    "text": "ah that's nice movie x7 that's everything so it will do some constant",
    "start": "3296230",
    "end": "3303370"
  },
  {
    "text": "propagation and inlining and stuff and just yeah return seven",
    "start": "3303370",
    "end": "3308380"
  },
  {
    "text": "and again if we would make the computer function static so we can't reach it",
    "start": "3308380",
    "end": "3315249"
  },
  {
    "text": "from other compression units this entire thing yes pretty nice so yeah yeah any",
    "start": "3315249",
    "end": "3326619"
  },
  {
    "text": "other questions yeah do the better thing",
    "start": "3326619",
    "end": "3342970"
  },
  {
    "text": "to measure because it's like this is what the compiler says to the CPU like",
    "start": "3342970",
    "end": "3348190"
  },
  {
    "text": "here's CPU do these things and the CPU is going to say yeah yeah sure and then it's gonna go do something completely",
    "start": "3348190",
    "end": "3353289"
  },
  {
    "text": "different right it's gonna reorder stuff the branch prediction and you get like",
    "start": "3353289",
    "end": "3358569"
  },
  {
    "text": "cache things so you can't really see okay are we trashing the cache or not like all of those things are very important and the algorithmic complexity",
    "start": "3358569",
    "end": "3365739"
  },
  {
    "text": "so I would at least not like use this as",
    "start": "3365739",
    "end": "3371140"
  },
  {
    "text": "the truth for performance but you can very often be useful to get some more",
    "start": "3371140",
    "end": "3376660"
  },
  {
    "text": "knowledge about things so I think Matt's got balls he said his his motivation for creating",
    "start": "3376660",
    "end": "3383799"
  },
  {
    "text": "compiler Explorer when it was just a local command-line tool we had was he wanted to check when they introduced",
    "start": "3383799",
    "end": "3389410"
  },
  {
    "text": "range based for loops so are they gonna do are they gonna be more expensive than just for I equals 0 etc and then you",
    "start": "3389410",
    "end": "3399219"
  },
  {
    "text": "could do both versions in here and you can see the assembly acts exactly the same and then you can quickly check different compilers and in that case you",
    "start": "3399219",
    "end": "3405460"
  },
  {
    "text": "can trust well ok the range base for loop is fine he could use it in his high frequency trading or whatever he was",
    "start": "3405460",
    "end": "3411339"
  },
  {
    "text": "doing at the time so for those things it's nice and for other things it's just",
    "start": "3411339",
    "end": "3416430"
  },
  {
    "text": "handy or you're curious I did put out a tweet some a month or two ago saying",
    "start": "3416430",
    "end": "3423900"
  },
  {
    "text": "what are some cool things you learn on compadres program and I got no replies",
    "start": "3423900",
    "end": "3429039"
  },
  {
    "text": "and then then Matt got ball treated tweeted it from the compadre store accounts and then all of the yet more",
    "start": "3429039",
    "end": "3437289"
  },
  {
    "text": "zero replies came in but hopefully you can actually use it for something useful so I use it at work a little",
    "start": "3437289",
    "end": "3444589"
  },
  {
    "text": "while ago I was trying an approach where instead of using enums and switches I",
    "start": "3444589",
    "end": "3450710"
  },
  {
    "text": "was I wanted to use bronze so I would Lisa variants instead of an enum value I",
    "start": "3450710",
    "end": "3456980"
  },
  {
    "text": "would have several varieties and see like how is that gonna work is it going to be enlightened as well as enums and",
    "start": "3456980",
    "end": "3463309"
  },
  {
    "text": "switches and it turned out that even with all - it was doing function calls to state visit and I don't know how its",
    "start": "3463309",
    "end": "3471440"
  },
  {
    "text": "implemented or anything but like well the elements which case was just like move some stuff in here and return the",
    "start": "3471440",
    "end": "3476660"
  },
  {
    "text": "other one was doing function calls and everything and I thought well maybe that's not the best approach even the",
    "start": "3476660",
    "end": "3481759"
  },
  {
    "text": "white I thought that was really clever so whether you can do stuff like that",
    "start": "3481759",
    "end": "3487009"
  },
  {
    "text": "okay I found it useful to test if",
    "start": "3487009",
    "end": "3501859"
  },
  {
    "text": "something is worth going through with for example I have an ID that I think the compiler will be able to inline and",
    "start": "3501859",
    "end": "3509180"
  },
  {
    "text": "I can run it in company do we think up I'll explore test my ID see yeah it's plausible so I make the effort in the",
    "start": "3509180",
    "end": "3515900"
  },
  {
    "text": "program then it's really nice if you see",
    "start": "3515900",
    "end": "3521930"
  },
  {
    "text": "that like you can open another tab one minute left so I'll do that ad not here",
    "start": "3521930",
    "end": "3528470"
  },
  {
    "text": "we go add new compiler so here we can compare to GCC 9.2 or we can like see if we can",
    "start": "3528470",
    "end": "3535579"
  },
  {
    "text": "find clang I think it's somewhere at the top see what clank-clank drunk to us and",
    "start": "3535579",
    "end": "3541730"
  },
  {
    "text": "let's see give it the same options yeah so then then you can compare so like if",
    "start": "3541730",
    "end": "3547250"
  },
  {
    "text": "they've done beyond ancestor all the way all the compilers he is interested in do the same thing then that's a good sign",
    "start": "3547250",
    "end": "3554680"
  },
  {
    "text": "it isn't",
    "start": "3554680",
    "end": "3557980"
  },
  {
    "text": "yeah yeah yeah so it's it's a good way",
    "start": "3560760",
    "end": "3574180"
  },
  {
    "text": "to test if it's possible let's be honest and then you can can measure okay",
    "start": "3574180",
    "end": "3579940"
  },
  {
    "text": "that's times up so thank you [Applause]",
    "start": "3579940",
    "end": "3590190"
  }
]