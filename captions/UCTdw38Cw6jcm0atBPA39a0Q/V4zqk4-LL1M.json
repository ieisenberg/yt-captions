[
  {
    "text": "hi thanks for coming uh my name is mark rendall you may remember me from stupidity last night",
    "start": "4000",
    "end": "11920"
  },
  {
    "text": "uh there may be more stupidity in the last talk of the day which we back in here um",
    "start": "11920",
    "end": "19359"
  },
  {
    "text": "where we talk about some really really bad mistakes that people have made in programming but this",
    "start": "19359",
    "end": "25199"
  },
  {
    "text": "is my sensible talk they make me do a sensible talk as well so this is about writing code that",
    "start": "25199",
    "end": "31039"
  },
  {
    "text": "writes code with roslyn and uh we'll look at how roslyn works",
    "start": "31039",
    "end": "37600"
  },
  {
    "text": "what the different bits of it are and then at the end i'll show you how to do something actually useful with it and",
    "start": "37600",
    "end": "42640"
  },
  {
    "text": "create an analyzer and code fix that works inside visual studio",
    "start": "42640",
    "end": "49200"
  },
  {
    "text": "so roslyn basically it's where those red squiggles and green squiggles under your code come",
    "start": "49200",
    "end": "55199"
  },
  {
    "text": "from it's a lot more than that it's it's the thing that compiles c sharp code into msil and then that gets passed on",
    "start": "55199",
    "end": "63199"
  },
  {
    "text": "to the jit that turns it into native code but when microsoft rewrote the c-sharp compiler for c-sharp six before",
    "start": "63199",
    "end": "70960"
  },
  {
    "text": "that it had been written in c plus and one of the sort of key milestones for",
    "start": "70960",
    "end": "76720"
  },
  {
    "text": "any programming language is that the compiler for the language should be written in the language and so with",
    "start": "76720",
    "end": "83520"
  },
  {
    "text": "c-sharp 6 microsoft said we're going to rewrite the c-sharp compiler in c-sharp",
    "start": "83520",
    "end": "89600"
  },
  {
    "text": "and the vb.net team said we're going to rewrite the vb.net compiler in vb.net",
    "start": "89600",
    "end": "95040"
  },
  {
    "text": "which serves them right um",
    "start": "95040",
    "end": "101840"
  },
  {
    "text": "so yes but they didn't just make a compiler they made a compiler as a",
    "start": "102159",
    "end": "107520"
  },
  {
    "text": "service they made a compiler where all the parts of it are open and public and you can use them in your own code",
    "start": "107520",
    "end": "114399"
  },
  {
    "text": "and it's brilliant and around the time of net's 3.net call 3.1",
    "start": "114399",
    "end": "120799"
  },
  {
    "text": "microsoft said we're not supporting wcf in net core or web forms or a couple of other things",
    "start": "120799",
    "end": "128399"
  },
  {
    "text": "uh if it's not in now it's not coming at all and wcf people went hang on what are we supposed to do and microsoft said",
    "start": "128399",
    "end": "135200"
  },
  {
    "text": "rewrite it to grpc and the wca that's that sounds really",
    "start": "135200",
    "end": "140319"
  },
  {
    "text": "complicated and i thought well hang on you've got in wcf you've got service contracts and you've got data contracts",
    "start": "140319",
    "end": "146480"
  },
  {
    "text": "and you've got operation contracts and those map pretty clearly to grpc",
    "start": "146480",
    "end": "152480"
  },
  {
    "text": "services and rpc methods and messages and so if you analyze the c-sharp code",
    "start": "152480",
    "end": "159519"
  },
  {
    "text": "which has got the wcf attributes on it you should be able to generate the grpc assets that you need",
    "start": "159519",
    "end": "166560"
  },
  {
    "text": "and if roslyn hadn't existed and if step one of that had been right ac sharp",
    "start": "166560",
    "end": "172239"
  },
  {
    "text": "passer i would have gone but that sounds really complicated but roslyn existed and i went that sounds like the kind of",
    "start": "172239",
    "end": "178159"
  },
  {
    "text": "thing that roslyn's good for so that's why i picked it up and learned it it's",
    "start": "178159",
    "end": "183440"
  },
  {
    "text": "difficult to learn the documentation is not great hence this talk",
    "start": "183440",
    "end": "190480"
  },
  {
    "text": "so how to roslyn a bunch of nuget packages",
    "start": "190480",
    "end": "196319"
  },
  {
    "text": "all under microsoft code analysis so you've got microsoft.codeanalysis.csharp.workspaces",
    "start": "196319",
    "end": "203000"
  },
  {
    "text": "and a workspace lets you load a solution and then you can work with the code we also have",
    "start": "203599",
    "end": "210120"
  },
  {
    "text": "microsoft.codanalysis.workspaces.ms build and that works at a at the project level and gives you",
    "start": "210120",
    "end": "216080"
  },
  {
    "text": "solutions and everything else there's a weird little package called microsoft.build.locator",
    "start": "216080",
    "end": "222280"
  },
  {
    "text": "i really don't understand what it does i just know it exposes one method and you",
    "start": "222319",
    "end": "228159"
  },
  {
    "text": "need to call that method first and then there's also nuget.project",
    "start": "228159",
    "end": "234319"
  },
  {
    "text": "model which is useful for analyzing package references and that sort of thing so workspaces this is the top",
    "start": "234319",
    "end": "240480"
  },
  {
    "text": "level thing and we have uh an ad hoc workspace so you can create this in memory and then",
    "start": "240480",
    "end": "247120"
  },
  {
    "text": "you can create a solution add that to it create projects add them to the solution it's really good for unit tests and",
    "start": "247120",
    "end": "254239"
  },
  {
    "text": "mucking about and just trying ideas out then you have the ms build workspace which is the useful one",
    "start": "254239",
    "end": "262240"
  },
  {
    "text": "and you can actually call build on it and it will generate dlls and all that sort of thing and then specifically when you're",
    "start": "262240",
    "end": "268160"
  },
  {
    "text": "creating visual studio extensions you have visual studio workspace which has got a bunch of extra stuff that lets you",
    "start": "268160",
    "end": "274639"
  },
  {
    "text": "interact with visual studio itself and the workspace looks like this so you",
    "start": "274639",
    "end": "280800"
  },
  {
    "text": "have a workspace and you can load a solution into the workspace and you have one active",
    "start": "280800",
    "end": "285919"
  },
  {
    "text": "solution at a time and then a solution has projects and the projects have documents so your c-sharp files are",
    "start": "285919",
    "end": "293120"
  },
  {
    "text": "documents and so are your xaml files and your appsettings.json files and everything else",
    "start": "293120",
    "end": "300080"
  },
  {
    "text": "and so i'm going to switch over to code which involves putting my glasses on because i",
    "start": "300639",
    "end": "307360"
  },
  {
    "text": "am old and i can no longer i got lasik and now i can actually see uh where the apollo",
    "start": "307360",
    "end": "314880"
  },
  {
    "text": "stuff was left on the moon um but i can't read my screen",
    "start": "314880",
    "end": "320400"
  },
  {
    "text": "it's it's a good trade-off it's improved my tennis",
    "start": "320400",
    "end": "326800"
  },
  {
    "text": "and you know i'm not good at tennis but i'm better than i was before i got lasik",
    "start": "328000",
    "end": "334160"
  },
  {
    "text": "and that's what i tell my wife when she complains about me spending four thousand pounds on lasers",
    "start": "334160",
    "end": "339199"
  },
  {
    "text": "um so yes here we go this is this is my demo program and this is this is the thing you get",
    "start": "339199",
    "end": "345440"
  },
  {
    "text": "from that um ms that build locator and you do this first you do ms build",
    "start": "345440",
    "end": "351039"
  },
  {
    "text": "locator dot register defaults because your machine has got all kinds of ms builds all over the place the dotnet sdk",
    "start": "351039",
    "end": "357280"
  },
  {
    "text": "has one visual studio has one all the other visual studios have one so this somehow finds the right one i don't know",
    "start": "357280",
    "end": "365680"
  },
  {
    "text": "how it does it it's magic okay so then we create a workspace we call ms",
    "start": "365680",
    "end": "371039"
  },
  {
    "text": "build workspace.create and we set a boolean to say load the metadata for",
    "start": "371039",
    "end": "377120"
  },
  {
    "text": "referenced projects so we get all the new get packages and all those sorts of",
    "start": "377120",
    "end": "382960"
  },
  {
    "text": "things we get metadata loaded for them we had an event handler to workspace",
    "start": "382960",
    "end": "388160"
  },
  {
    "text": "failed so when it loads the solution it will actually build it and any build errors will go out uh to this event",
    "start": "388160",
    "end": "395039"
  },
  {
    "text": "handler and a lot of the time uh like if you have a net six project and you're",
    "start": "395039",
    "end": "402000"
  },
  {
    "text": "doing this sort of stuff and you try and load a net framework 4.7 project it",
    "start": "402000",
    "end": "407840"
  },
  {
    "text": "won't work um because it can't run some of the target dlls that are used by the",
    "start": "407840",
    "end": "414160"
  },
  {
    "text": "main ms build it's very frustrating but that's the way it is and then we just open a solution we say",
    "start": "414160",
    "end": "420080"
  },
  {
    "text": "workspace open solution async args zero so now we have a solution loaded into",
    "start": "420080",
    "end": "427599"
  },
  {
    "text": "our workspace and we can go back to the slides and we do that out do this is all just there",
    "start": "427599",
    "end": "433759"
  },
  {
    "text": "for people to go can we have the slides so actually getting into the c-sharp code",
    "start": "433759",
    "end": "440080"
  },
  {
    "text": "we use syntax trees so uh when the c-sharp compiler runs it tokenizes the",
    "start": "440080",
    "end": "446080"
  },
  {
    "text": "the text and everything becomes a token so a semicolon is a token and an open brace",
    "start": "446080",
    "end": "451199"
  },
  {
    "text": "is a token and a string literal is a token and then it turns that into an abstract syntax tree and a syntax tree",
    "start": "451199",
    "end": "459919"
  },
  {
    "text": "has syntax nodes in it and so every bit of your code is represented by",
    "start": "459919",
    "end": "467039"
  },
  {
    "text": "a syntax node and that syntax node has lots of syntax nodes underneath it and",
    "start": "467039",
    "end": "472560"
  },
  {
    "text": "so on and so on and the entire thing is represented so you can sort of think of it like a like a dom or an xml document",
    "start": "472560",
    "end": "480960"
  },
  {
    "text": "but instead of elements it's actually c sharp code and you can dig into all of that and then the tokens are things like",
    "start": "480960",
    "end": "487520"
  },
  {
    "text": "identifiers variable names uh semicolons white space everything uh is a syntax",
    "start": "487520",
    "end": "494400"
  },
  {
    "text": "token within that tree um oh no hang on white space is not a token it's trivia so trivia is stuff",
    "start": "494400",
    "end": "501520"
  },
  {
    "text": "that is there it's important but in terms of layout and all that kind of",
    "start": "501520",
    "end": "507039"
  },
  {
    "text": "thing but the compiler doesn't care about it the compiler is going to ignore it",
    "start": "507039",
    "end": "513279"
  },
  {
    "text": "and it's really kind of difficult at first to get your head",
    "start": "513279",
    "end": "518719"
  },
  {
    "text": "around how that syntax tree relates to actual code and what the syntax type",
    "start": "518719",
    "end": "526640"
  },
  {
    "text": "for like a method call is or a property declaration is and so there's a super useful thing",
    "start": "526640",
    "end": "533360"
  },
  {
    "text": "built into visual studio if you've installed the code analysis tools as part of your setup",
    "start": "533360",
    "end": "541040"
  },
  {
    "text": "you can go to other windows and syntax visualizer and this shows you on the right hand",
    "start": "541040",
    "end": "547120"
  },
  {
    "text": "side a syntax tree eventually there we go",
    "start": "547120",
    "end": "552720"
  },
  {
    "text": "and so this is your entire this is everything in this file so you see we've got a using directive here that's that",
    "start": "552720",
    "end": "558959"
  },
  {
    "text": "using directive that's an identifier token we've got the using keyword which is a token then an identifier named node",
    "start": "558959",
    "end": "566080"
  },
  {
    "text": "and that's got an identifier token in it and so if you want to find out what a particular",
    "start": "566080",
    "end": "571760"
  },
  {
    "text": "thing is then you can just click on it in your actual code and see what it's",
    "start": "571760",
    "end": "576959"
  },
  {
    "text": "represented as in the syntax tree this is how i learned how to use rosslyn",
    "start": "576959",
    "end": "582080"
  },
  {
    "text": "syntax trees was clicking through wcf code on the left hand side and just seeing what it was on",
    "start": "582080",
    "end": "589200"
  },
  {
    "text": "the right hand side so go away don't need you",
    "start": "589200",
    "end": "594880"
  },
  {
    "text": "so how do we navigate through syntax well there are two ways to do this and",
    "start": "595120",
    "end": "600959"
  },
  {
    "text": "the first one is or the simplest one uh for most c-sharp programmers is the",
    "start": "600959",
    "end": "607360"
  },
  {
    "text": "link api uh so in the same ways you can use link to go through an",
    "start": "607360",
    "end": "612399"
  },
  {
    "text": "x document or x element and you've got dot elements and dot attributes and all those sorts of",
    "start": "612399",
    "end": "618640"
  },
  {
    "text": "things you have exactly the same kind of thing in roslyn and so we can say node",
    "start": "618640",
    "end": "623760"
  },
  {
    "text": "dot descendant nodes which will get all the nodes below that not child nodes child nodes just gets the next level",
    "start": "623760",
    "end": "629680"
  },
  {
    "text": "down descendant nodes gets everything below that in the tree and then if we want to find say class declarations then",
    "start": "629680",
    "end": "637200"
  },
  {
    "text": "we can say of type class declaration syntax and we get back an i innumerable of all the syntax nodes which are",
    "start": "637200",
    "end": "643120"
  },
  {
    "text": "declaring a class if we want to go back up the syntax tree",
    "start": "643120",
    "end": "648160"
  },
  {
    "text": "then we can use first ancestor or self so if i want to find what namespace this",
    "start": "648160",
    "end": "653680"
  },
  {
    "text": "class is in i can say first ancestor or self namespace declaration syntax and",
    "start": "653680",
    "end": "658800"
  },
  {
    "text": "it'll navigate up the tree until it finds a syntax of that type and it's super",
    "start": "658800",
    "end": "664720"
  },
  {
    "text": "easy so i'll show you how that looks in here we have a syntax querydemo.listasync",
    "start": "664720",
    "end": "671120"
  },
  {
    "text": "so if i navigate to that we've got our solution here",
    "start": "671120",
    "end": "676160"
  },
  {
    "text": "and we say for each document in solution dot projects dot select many p documents",
    "start": "676160",
    "end": "681519"
  },
  {
    "text": "uh get the syntax root from the document if root is null that means it's not a",
    "start": "681519",
    "end": "688800"
  },
  {
    "text": "syntax document so it might be appsettings.json or uh or just a static",
    "start": "688800",
    "end": "694000"
  },
  {
    "text": "image or whatever it is so we'll get that null if there's no c-sharp for us",
    "start": "694000",
    "end": "700160"
  },
  {
    "text": "to read or vb and then",
    "start": "700160",
    "end": "705360"
  },
  {
    "text": "really nice thing is that it gives you back the same stuff regardless of whether it's c-sharp or vb code and very",
    "start": "705360",
    "end": "711279"
  },
  {
    "text": "early on one of the demos was i'm going to copy this chunk of vb code and then",
    "start": "711279",
    "end": "716880"
  },
  {
    "text": "using roslyn i'm going to paste it over here as c sharp code and i really don't understand why everybody in the world",
    "start": "716880",
    "end": "723360"
  },
  {
    "text": "hasn't done that already i'm going to write a trojan that infects people's computers",
    "start": "723360",
    "end": "730000"
  },
  {
    "text": "and anytime it signs vb.net code it's going to rewrite it as c-sharp and then",
    "start": "730000",
    "end": "735839"
  },
  {
    "text": "charge them a bitcoin ransom to turn it back i either pay me 5 000 in bitcoin or just",
    "start": "735839",
    "end": "743519"
  },
  {
    "text": "learn c sharp and get on with it",
    "start": "743519",
    "end": "747120"
  },
  {
    "text": "i didn't say it was going to be completely serious you know it's it's it's still me i'm still stupid",
    "start": "749200",
    "end": "754880"
  },
  {
    "text": "um so yes but no we can go through here and uh you know class declaration syntax",
    "start": "754880",
    "end": "760320"
  },
  {
    "text": "and interface declaration syntax they have a base type which is a base type declaration syntax and so we can say",
    "start": "760320",
    "end": "766160"
  },
  {
    "text": "find uh in all the nodes in this document find type declaration syntaxes",
    "start": "766160",
    "end": "772399"
  },
  {
    "text": "and then we can get the namespace by doing this first ancestor or self and then we can put those two things",
    "start": "772399",
    "end": "777920"
  },
  {
    "text": "together and we can just write out the namespace and the type name and so if i",
    "start": "777920",
    "end": "783040"
  },
  {
    "text": "run this and hope it can find the solution it's looking for",
    "start": "783040",
    "end": "789360"
  },
  {
    "text": "are you finding it there we go it took it a while but it got there so this this solution contains a class",
    "start": "798000",
    "end": "804560"
  },
  {
    "text": "called program sample.program and there's a library project which contains a class called sample.library.greeta",
    "start": "804560",
    "end": "811360"
  },
  {
    "text": "that was exciting wasn't it okay so you can go through all your code and",
    "start": "811360",
    "end": "817519"
  },
  {
    "text": "just write these queries these link queries um and actually that's that's a very useful way of like searching",
    "start": "817519",
    "end": "824639"
  },
  {
    "text": "through an entire solution looking for interesting things",
    "start": "824639",
    "end": "829680"
  },
  {
    "text": "but if you actually have a node you actually have a document and you're looking for specific things in that",
    "start": "829680",
    "end": "836399"
  },
  {
    "text": "document say method declarations and you want to make sure that all the method declarations have got",
    "start": "836399",
    "end": "842399"
  },
  {
    "text": "a public or a private or an internal or protected you know nobody's just gone void main",
    "start": "842399",
    "end": "848880"
  },
  {
    "text": "then you can use an alternative approach which is called the syntax walker",
    "start": "848880",
    "end": "854639"
  },
  {
    "text": "and there's an important thing that you have to remember here that i forgot a",
    "start": "854639",
    "end": "860399"
  },
  {
    "text": "couple of times uh early on in my roslyn journey there is a c-sharp syntax",
    "start": "860399",
    "end": "866720"
  },
  {
    "text": "visitor and there is a c-sharp syntax walker the c-sharp syntax visitor",
    "start": "866720",
    "end": "874079"
  },
  {
    "text": "will get a thing and then it will stop so if you've got a say a method declaration if you've got a class",
    "start": "874079",
    "end": "879839"
  },
  {
    "text": "declaration and it's got another class declaration inside it then the c-sharp syntax visitor won't find that nested",
    "start": "879839",
    "end": "887120"
  },
  {
    "text": "declaration it does it it's kind of like the difference between child nodes and descendant nodes c-sharp syntax walker",
    "start": "887120",
    "end": "893920"
  },
  {
    "text": "will just go right through the entire tree and find all the types you're looking for and so you inherit from this",
    "start": "893920",
    "end": "901120"
  },
  {
    "text": "c-sharp syntax walker class and you just override the method for things you are",
    "start": "901120",
    "end": "906720"
  },
  {
    "text": "interested in so if i'm looking for a class declaration syntax i just override visit class declaration",
    "start": "906720",
    "end": "913920"
  },
  {
    "text": "so we go back to my demo and we comment that out and we uncomment",
    "start": "913920",
    "end": "919360"
  },
  {
    "text": "that and head over to that definition we have this list types walker here and we can",
    "start": "919360",
    "end": "926720"
  },
  {
    "text": "just say walker dot visit and pass in our syntax tree and that types walker",
    "start": "926720",
    "end": "932880"
  },
  {
    "text": "just overrides visit class declaration and visit interface declaration because",
    "start": "932880",
    "end": "938240"
  },
  {
    "text": "i don't care about structs and enums and records apparently but those are in there as well",
    "start": "938240",
    "end": "943680"
  },
  {
    "text": "um and then i can just write that out uh the same as before so this is a different",
    "start": "943680",
    "end": "949279"
  },
  {
    "text": "application but it's going to do exactly the same thing",
    "start": "949279",
    "end": "954920"
  },
  {
    "text": "and it's going to put it down there for some reason and i don't know why but it did so yes we still get the same output out",
    "start": "957920",
    "end": "964320"
  },
  {
    "text": "of that so we've now got we've got the syntax and",
    "start": "964320",
    "end": "970399"
  },
  {
    "text": "we've got the identifiers and we can get the tokens out and so um if i see uh",
    "start": "970399",
    "end": "975519"
  },
  {
    "text": "like a call to logger.log information um i can sort of go okay so underscore",
    "start": "975519",
    "end": "982000"
  },
  {
    "text": "logger is usually but how do i know what type underscore logger is and so i could",
    "start": "982000",
    "end": "987839"
  },
  {
    "text": "write code to go and find where underscore logger is defined and where everywhere else where it's referenced",
    "start": "987839",
    "end": "994160"
  },
  {
    "text": "and then see if it's passed in as a parameter to the constructor or is it being created with a new or or something",
    "start": "994160",
    "end": "1001360"
  },
  {
    "text": "like that which is just nobody wants to have to do all of that and so this is",
    "start": "1001360",
    "end": "1006800"
  },
  {
    "text": "where roslyn gets really cool it has this idea of semantic models so you can say okay i've got my syntax tree",
    "start": "1006800",
    "end": "1013839"
  },
  {
    "text": "give me what it means give me a model that tells me what everything in that syntax tree",
    "start": "1013839",
    "end": "1019759"
  },
  {
    "text": "means and that gives us something that looks a lot like doing reflection at",
    "start": "1019759",
    "end": "1024959"
  },
  {
    "text": "runtime so if you've got a type and you're doing you do object.gettype then you can do get",
    "start": "1024959",
    "end": "1032000"
  },
  {
    "text": "methods and get properties and get fields and the semantic model gives you the same kind of functionality but it's",
    "start": "1032000",
    "end": "1038400"
  },
  {
    "text": "doing it with code that's not running it's doing it at design time",
    "start": "1038400",
    "end": "1044000"
  },
  {
    "text": "and so we can say await project.getcompilation async and then",
    "start": "1044000",
    "end": "1049760"
  },
  {
    "text": "from the compilation we can pass in the syntax tree that we're using and we can say give me the semantic model for this",
    "start": "1049760",
    "end": "1057280"
  },
  {
    "text": "and tell me what all of it means and then within that we get symbols so",
    "start": "1057280",
    "end": "1062480"
  },
  {
    "text": "we had syntax nodes in the syntax tree in the semantic model we have symbols",
    "start": "1062480",
    "end": "1068080"
  },
  {
    "text": "and there's a there's a method symbol and a named type symbol and these look like uh",
    "start": "1068080",
    "end": "1075760"
  },
  {
    "text": "a lot like method info and type info and those things that we get from reflection",
    "start": "1075760",
    "end": "1082400"
  },
  {
    "text": "so back here again and let's close everything else",
    "start": "1082400",
    "end": "1089280"
  },
  {
    "text": "and we'll take that out and we'll go and look at list async so",
    "start": "1089919",
    "end": "1095840"
  },
  {
    "text": "for each project in solution.projects get the compilation now the project",
    "start": "1095840",
    "end": "1101120"
  },
  {
    "text": "might not be a compilable project the project might be one of those weird random projects that",
    "start": "1101120",
    "end": "1106720"
  },
  {
    "text": "doesn't have any c sharp code in it and if that's the case then get compilation async will return null",
    "start": "1106720",
    "end": "1113039"
  },
  {
    "text": "and then we can say go through the documents get the syntax tree for the document and then we can say get",
    "start": "1113039",
    "end": "1118799"
  },
  {
    "text": "semantic model for that tree so that gives us the semantic model for that entire file",
    "start": "1118799",
    "end": "1124480"
  },
  {
    "text": "and then we can go looping through our syntax with our descendant nodes of type base",
    "start": "1124480",
    "end": "1131360"
  },
  {
    "text": "declaration syntax and then we can go to the model and say give me the declared symbol",
    "start": "1131360",
    "end": "1137280"
  },
  {
    "text": "for this type declaration syntax and it will pass it back as an i named",
    "start": "1137280",
    "end": "1143679"
  },
  {
    "text": "type symbol and i named type symbol has got",
    "start": "1143679",
    "end": "1150440"
  },
  {
    "text": "uh a whole bunch of properties uh so we've got member names and",
    "start": "1152960",
    "end": "1158640"
  },
  {
    "text": "static constructors and tuple elements and all these sorts of things and containing namespace and",
    "start": "1158640",
    "end": "1166480"
  },
  {
    "text": "attributes everything related to that um is available",
    "start": "1166480",
    "end": "1172640"
  },
  {
    "text": "on this uh named type symbol as immutable arrays a lot there's a lot",
    "start": "1172640",
    "end": "1178080"
  },
  {
    "text": "of immutability in roslyn and we'll talk more about that later on",
    "start": "1178080",
    "end": "1183440"
  },
  {
    "text": "so if it's a named type symbol then we can just say what type it is which will be interface or class or struct or",
    "start": "1183440",
    "end": "1189679"
  },
  {
    "text": "whatever and then we can put system dot containing namespace and symbol.name",
    "start": "1189679",
    "end": "1195600"
  },
  {
    "text": "and so this allows us to go right i've got i logger and that will give me back a symbol",
    "start": "1195600",
    "end": "1201679"
  },
  {
    "text": "and i can say that symbol is a reference to something and i can say give me the",
    "start": "1201679",
    "end": "1207280"
  },
  {
    "text": "type information for that symbol and it'll come back and say that type is i logger of something or just i logger",
    "start": "1207280",
    "end": "1214960"
  },
  {
    "text": "or something that implements i logger and so once i'm in there i can say uh i've got",
    "start": "1214960",
    "end": "1222799"
  },
  {
    "text": "my type kind and my containing namespace but now i can say give me all the members of that symbol of type method",
    "start": "1222799",
    "end": "1230400"
  },
  {
    "text": "symbol so give me the declared methods in that symbol and the method symbol has a thing",
    "start": "1230400",
    "end": "1235679"
  },
  {
    "text": "on there that says is it implicitly declared because by the time we get here",
    "start": "1235679",
    "end": "1240960"
  },
  {
    "text": "a lot of the c-sharp compilation process is already run so if you've got a property the c-sharp compiler generates",
    "start": "1240960",
    "end": "1247200"
  },
  {
    "text": "get and set methods and hides them but they will show up here",
    "start": "1247200",
    "end": "1252480"
  },
  {
    "text": "if you don't have an explicit constructor it generates a default constructor for you and that will show",
    "start": "1252480",
    "end": "1258799"
  },
  {
    "text": "up here so i don't i don't want to see anything that's implicitly declared and i can just write",
    "start": "1258799",
    "end": "1264080"
  },
  {
    "text": "method symbol.name out here and so if we run that and it'll stay at",
    "start": "1264080",
    "end": "1269840"
  },
  {
    "text": "the front this time see now i've got a class which is sample",
    "start": "1269840",
    "end": "1275039"
  },
  {
    "text": "program and it's got a method main and a method ask name and i've got a class which is sample library greeter which",
    "start": "1275039",
    "end": "1282480"
  },
  {
    "text": "has got a constructor which just has that special name dot c tour so it doesn't",
    "start": "1282480",
    "end": "1289679"
  },
  {
    "text": "doesn't give you the the sort of greeter name for it and we have a greet method",
    "start": "1289679",
    "end": "1295679"
  },
  {
    "text": "um i should probably actually",
    "start": "1295679",
    "end": "1301360"
  },
  {
    "text": "let's uh oh for goodness sake",
    "start": "1302840",
    "end": "1309679"
  },
  {
    "text": "show more options yes windows 11 two clicks are definitely better than one thanks for that",
    "start": "1311840",
    "end": "1320559"
  },
  {
    "text": "no i don't trust the authors i'm an idiot so yes you can see here we've got sample",
    "start": "1321520",
    "end": "1326720"
  },
  {
    "text": "here's program here's my main method here's my ask name method and you can see in sample library we",
    "start": "1326720",
    "end": "1333840"
  },
  {
    "text": "have greeter and that it's not an implicit constructor so it wasn't implicitly declared and i have my",
    "start": "1333840",
    "end": "1340159"
  },
  {
    "text": "greet method here and the really great thing is roslyn by the time i get to these symbols i don't care whether you",
    "start": "1340159",
    "end": "1346400"
  },
  {
    "text": "use the lambda syntax for a method or any of that sort of stuff i know what it's doing i know what type",
    "start": "1346400",
    "end": "1353440"
  },
  {
    "text": "it's returning i know all that sort of good stuff okay",
    "start": "1353440",
    "end": "1360840"
  },
  {
    "text": "so you can do a lot of quite powerful things with these symbols and syntax",
    "start": "1361280",
    "end": "1367760"
  },
  {
    "text": "trees and all this sort of stuff and there's quite a lot of stuff built into roslyn that would be difficult to",
    "start": "1367760",
    "end": "1375120"
  },
  {
    "text": "implement but they've they've done it for you so for example there is a dot rename method",
    "start": "1375120",
    "end": "1382000"
  },
  {
    "text": "in there and if you want to rename a type and then have that reflected all through the solution you can just call",
    "start": "1382000",
    "end": "1388720"
  },
  {
    "text": "dot rename and pass in the new name that you want to give it and it will actually give you back a new solution where that",
    "start": "1388720",
    "end": "1395280"
  },
  {
    "text": "symbol has been renamed and all references to it have been renamed as well so it's like having code access to",
    "start": "1395280",
    "end": "1401280"
  },
  {
    "text": "those cool refactorings that you have in visual studio itself and so one of the things we can do is",
    "start": "1401280",
    "end": "1407840"
  },
  {
    "text": "find references to types or all the types that are used by",
    "start": "1407840",
    "end": "1414840"
  },
  {
    "text": "a a class and so if we uh",
    "start": "1414840",
    "end": "1420480"
  },
  {
    "text": "there's a symbol visitor but i'm not going to show it to you because um",
    "start": "1420480",
    "end": "1426320"
  },
  {
    "text": "it takes a lot of time and personally i've never i don't use it for anything i always with symbols i just do",
    "start": "1426320",
    "end": "1432400"
  },
  {
    "text": "get members and and this and that and the other um but the code for this is on github uh and",
    "start": "1432400",
    "end": "1439360"
  },
  {
    "text": "there's a link at the end um and you can check out what the symbol visitor does it's",
    "start": "1439360",
    "end": "1444640"
  },
  {
    "text": "similar to syntax visitor but it it works with symbols rather than syntax",
    "start": "1444640",
    "end": "1451919"
  },
  {
    "text": "trees the other reason is the last time i did this talk it took an extra 15 minutes um",
    "start": "1451919",
    "end": "1458880"
  },
  {
    "text": "so i've set a thing on my watch to go buzz so we're just going to go straight to",
    "start": "1458880",
    "end": "1464799"
  },
  {
    "text": "dependencies demo and list all used types so we have a hash set of string because we",
    "start": "1464799",
    "end": "1472320"
  },
  {
    "text": "only want to list each type once and we say for each project in this solution get the compilation",
    "start": "1472320",
    "end": "1479760"
  },
  {
    "text": "for each document in project.documents and then this is a fun one uh if you're running",
    "start": "1479760",
    "end": "1487120"
  },
  {
    "text": "over um let's say a wpf solution",
    "start": "1487120",
    "end": "1492720"
  },
  {
    "text": "you have xaml files in your wpf solution but somewhere hiding in the obj folder",
    "start": "1492720",
    "end": "1499679"
  },
  {
    "text": "is if you've got a user control called my flashy button",
    "start": "1499679",
    "end": "1505440"
  },
  {
    "text": "then you've got a myflashybutton.xml somewhere hiding in your project there's a myflashybutton.xml.g",
    "start": "1505440",
    "end": "1513480"
  },
  {
    "text": "which is the c sharp code that's been generated from that xaml same thing with razer",
    "start": "1515200",
    "end": "1520960"
  },
  {
    "text": "pages in blazer projects and things like that there's some hidden code being generated and now particularly we've got",
    "start": "1520960",
    "end": "1528159"
  },
  {
    "text": "source generators doing stuff you've got to deal with this idea because we don't want to be refactoring or rewriting or",
    "start": "1528159",
    "end": "1535520"
  },
  {
    "text": "raising alerts because code that's been generated by visual studio or something has done weird",
    "start": "1535520",
    "end": "1542080"
  },
  {
    "text": "things so this does its very best",
    "start": "1542080",
    "end": "1547279"
  },
  {
    "text": "to work out if the file is auto generated so we get the file name without the extension the last extension",
    "start": "1547279",
    "end": "1553039"
  },
  {
    "text": "because we're assuming that's going to be cs and then these are the patterns that",
    "start": "1553039",
    "end": "1558880"
  },
  {
    "text": "i have found we've got temporary generated file dot designer",
    "start": "1558880",
    "end": "1564080"
  },
  {
    "text": "that will hide any windows forms sort of automatically",
    "start": "1564080",
    "end": "1569520"
  },
  {
    "text": "maintain files dot generated gets in there a lot dot",
    "start": "1569520",
    "end": "1575600"
  },
  {
    "text": "g hides all your xaml cs files dot gi i can't remember but i must have found",
    "start": "1575600",
    "end": "1582000"
  },
  {
    "text": "it because it's in there and then we also have begins with auto-generated comment and this shows",
    "start": "1582000",
    "end": "1589760"
  },
  {
    "text": "actually doing some some code intelligence stuff so we can say uh get the leading trivia",
    "start": "1589760",
    "end": "1598080"
  },
  {
    "text": "for this document so get everything before uh an actual c-sharp syntax uh token",
    "start": "1598080",
    "end": "1605760"
  },
  {
    "text": "which is usually using or possibly namespace so the leading trivia if there's comments at the top of the code",
    "start": "1605760",
    "end": "1612320"
  },
  {
    "text": "it will pick all of those up and we can say where's",
    "start": "1612320",
    "end": "1617360"
  },
  {
    "text": "the kind is multi-line comment trivia or single line comment trivia",
    "start": "1617360",
    "end": "1623440"
  },
  {
    "text": "and then we can go through those and we can say get the text of that",
    "start": "1623440",
    "end": "1628559"
  },
  {
    "text": "comment whatever it might be and then just look to see if it contains the word auto generated either hyphened",
    "start": "1628559",
    "end": "1636240"
  },
  {
    "text": "or not hyphened because there's no standard for this",
    "start": "1636240",
    "end": "1641520"
  },
  {
    "text": "uh and yeah and it doesn't pick up some things because quite a lot of the time the",
    "start": "1641520",
    "end": "1647200"
  },
  {
    "text": "comment says this code was generated by a tool um which to be fair would also be true",
    "start": "1647200",
    "end": "1653279"
  },
  {
    "text": "of code that some people i've worked with have written",
    "start": "1653279",
    "end": "1658480"
  },
  {
    "text": "okay so if it's auto-generated ignore it otherwise get the syntax tree so notice",
    "start": "1661200",
    "end": "1667120"
  },
  {
    "text": "that auto generated just worked on the file name so we're trying to be as efficient as possible here because then",
    "start": "1667120",
    "end": "1672720"
  },
  {
    "text": "if it's if we think it's not auto generated but it still might be we have to get the syntax tree which takes like",
    "start": "1672720",
    "end": "1678960"
  },
  {
    "text": "a few milliseconds um if that's null then we just carry on otherwise we get the semantic model",
    "start": "1678960",
    "end": "1685760"
  },
  {
    "text": "uh we get the syntax node those should probably be in the other order",
    "start": "1685760",
    "end": "1692159"
  },
  {
    "text": "that's that's unnecessary so yeah there we go get the get the",
    "start": "1692159",
    "end": "1698559"
  },
  {
    "text": "syntax root of the document that get root async returns the top level syntax",
    "start": "1698559",
    "end": "1704799"
  },
  {
    "text": "uh node and then we can say does it begin with an auto generated comment and if it does then we'll just continue round",
    "start": "1704799",
    "end": "1711200"
  },
  {
    "text": "otherwise we'll just say get the semantic model and then we have this get types",
    "start": "1711200",
    "end": "1717440"
  },
  {
    "text": "item here and we pass in our syntax node and our semantic model",
    "start": "1717440",
    "end": "1722880"
  },
  {
    "text": "and so we say named types we're going to go through and we're going to look for identifier name syntax",
    "start": "1722880",
    "end": "1729200"
  },
  {
    "text": "which is going to be variables fields properties that sort of thing and we can look for expressions as well",
    "start": "1729200",
    "end": "1736159"
  },
  {
    "text": "because in c sharp all expressions have a type um and so like uh x equals x plus one",
    "start": "1736159",
    "end": "1744720"
  },
  {
    "text": "if x is an integer that whole expression has a type of integer and so we can say",
    "start": "1744720",
    "end": "1750080"
  },
  {
    "text": "or if you're calling a method then that has a return type and so that expression has a type there as well",
    "start": "1750080",
    "end": "1757440"
  },
  {
    "text": "even if that return type is void or system.void as it's actually called",
    "start": "1757440",
    "end": "1764080"
  },
  {
    "text": "and so in here we can say get the named types and find the uh named type symbols for",
    "start": "1764080",
    "end": "1770640"
  },
  {
    "text": "those get for the identifiers and do the same thing with the expressions uh find all the things which are a named",
    "start": "1770640",
    "end": "1778000"
  },
  {
    "text": "type because some of these things are not a named type some of them might be an error type because the compiler",
    "start": "1778000",
    "end": "1783520"
  },
  {
    "text": "doesn't actually know what they are at the moment but the syntax tree still has to work even if your code's broken",
    "start": "1783520",
    "end": "1791679"
  },
  {
    "text": "and there's also just other i-type symbol implementations that are things that are not named types they're they're",
    "start": "1791679",
    "end": "1798080"
  },
  {
    "text": "sort of magic and they're hidden and don't touch them and then we can just concatenate those together",
    "start": "1798080",
    "end": "1805200"
  },
  {
    "text": "and i should be using symbol equality comparer when comparing symbols that's incredibly meta that's the roslin",
    "start": "1805200",
    "end": "1812000"
  },
  {
    "text": "analyzer analyzer telling me that i've written my roslin analyzer wrong",
    "start": "1812000",
    "end": "1818559"
  },
  {
    "text": "and probably offering me a coat there you go introduce per no i'm not going to do that",
    "start": "1818559",
    "end": "1825520"
  },
  {
    "text": "but yes and then i can push that back up there and then we get typeset dot order by",
    "start": "1825600",
    "end": "1833279"
  },
  {
    "text": "so we do for each name type symbol and then we just add the uh containing",
    "start": "1833279",
    "end": "1839039"
  },
  {
    "text": "namespace and name type symbol.name um interesting point about containing",
    "start": "1839039",
    "end": "1844880"
  },
  {
    "text": "namespace uh if you there it has a dot name property on it",
    "start": "1844880",
    "end": "1851840"
  },
  {
    "text": "so if you are in say system.link then symbol.containingnamespace.name",
    "start": "1852720",
    "end": "1859360"
  },
  {
    "text": "will be link and it will have a containing namespace which is system and then that will have",
    "start": "1859360",
    "end": "1864880"
  },
  {
    "text": "a containing namespace which is the global namespace but if you call to string on containing",
    "start": "1864880",
    "end": "1870720"
  },
  {
    "text": "mainspace it turns it into system.link so which is essentially what we're doing here with string interpolation",
    "start": "1870720",
    "end": "1878320"
  },
  {
    "text": "so if i run this",
    "start": "1878320",
    "end": "1882080"
  },
  {
    "text": "we can see that these are all the types that are used by anything in this program so it uses my type obviously",
    "start": "1886960",
    "end": "1893200"
  },
  {
    "text": "sample.library.greater it's not actually using program anywhere",
    "start": "1893200",
    "end": "1899360"
  },
  {
    "text": "there's no references to program in any expressions or identifiers so it doesn't show that one up but we are using",
    "start": "1899360",
    "end": "1906000"
  },
  {
    "text": "boolean and char and console in 32 and string and void system.void which is not",
    "start": "1906000",
    "end": "1912480"
  },
  {
    "text": "available to us as a type it is available to f sharp programmers because they have unit which is",
    "start": "1912480",
    "end": "1918399"
  },
  {
    "text": "basically the same thing but everything has a type even if that type is void",
    "start": "1918399",
    "end": "1925600"
  },
  {
    "text": "okay then it gets really fun so this is the point where it's actually starting to do",
    "start": "1927760",
    "end": "1933440"
  },
  {
    "text": "something useful is when you can rewrite the code and",
    "start": "1933440",
    "end": "1939279"
  },
  {
    "text": "it is incredibly straightforward once you get your head around all of this and you've learned what the different syntax",
    "start": "1939279",
    "end": "1945600"
  },
  {
    "text": "node types are called and the different symbols are called and you've got used to this idea of spelunking through your",
    "start": "1945600",
    "end": "1951919"
  },
  {
    "text": "code in a console application then you can start to rewrite that code",
    "start": "1951919",
    "end": "1957760"
  },
  {
    "text": "you can start to make tweaks to it but remember i said all those things in",
    "start": "1957760",
    "end": "1964480"
  },
  {
    "text": "syntax nodes and and symbols they're all immutable arrays so there is a system.collections.immutable",
    "start": "1964480",
    "end": "1972159"
  },
  {
    "text": "nuget package which was basically created i've got mads torgeson in the room by the way so i'm teaching you",
    "start": "1972159",
    "end": "1978960"
  },
  {
    "text": "about roslyn and the guy is yeah it's it's a little bit unnerving",
    "start": "1978960",
    "end": "1985200"
  },
  {
    "text": "oh cool okay i'm just waiting for him to be looking at me",
    "start": "1985519",
    "end": "1991600"
  },
  {
    "text": "but yeah i think we're doing all right so um system.collections.immutable was",
    "start": "1991600",
    "end": "1997039"
  },
  {
    "text": "actually created for the roslyn project because the thing is you've got your your model of your program in memory and",
    "start": "1997039",
    "end": "2004399"
  },
  {
    "text": "if two things change that at the same time that's bad but what you don't want is a crapload of",
    "start": "2004399",
    "end": "2011840"
  },
  {
    "text": "locks or semaphores all over the place to stop two things because a",
    "start": "2011840",
    "end": "2017360"
  },
  {
    "text": "that's going to slow things down and b if you say you should lock something",
    "start": "2017360",
    "end": "2023519"
  },
  {
    "text": "before you modify it you're relying on programmers to actually do that",
    "start": "2023519",
    "end": "2030240"
  },
  {
    "text": "and yeah just know so everything's immutable um",
    "start": "2030240",
    "end": "2036399"
  },
  {
    "text": "what things in roslyn are immutable well everything solutions are immutable projects are",
    "start": "2036399",
    "end": "2043519"
  },
  {
    "text": "immutable documents syntax nodes everything from top to bottom the only thing that is not immutable is workspace",
    "start": "2043519",
    "end": "2051760"
  },
  {
    "text": "okay so if you add one letter to one line in one syntax node in one document",
    "start": "2051760",
    "end": "2060079"
  },
  {
    "text": "in one project what you get is a new solution",
    "start": "2060079",
    "end": "2065839"
  },
  {
    "text": "because it's immutable and then that becomes the active solution so every time you change something it's rebuilt",
    "start": "2065839",
    "end": "2072800"
  },
  {
    "text": "and obviously you know there's a lot of reuse going in there not literally recreating the entire tree every time",
    "start": "2072800",
    "end": "2079520"
  },
  {
    "text": "you do something but making a change to a syntax node",
    "start": "2079520",
    "end": "2085280"
  },
  {
    "text": "affects the solution at the top level and then you go back to the workspace and you say apply the changes from this",
    "start": "2085280",
    "end": "2091599"
  },
  {
    "text": "solution and then that becomes the current solution and that makes it really difficult",
    "start": "2091599",
    "end": "2098560"
  },
  {
    "text": "because if you think about it okay let's say i just want to",
    "start": "2098560",
    "end": "2104480"
  },
  {
    "text": "call to upper on any string literals anywhere in my application",
    "start": "2104480",
    "end": "2110160"
  },
  {
    "text": "that's fun we can do that so i get my i go to my document and i say",
    "start": "2110160",
    "end": "2117040"
  },
  {
    "text": "hey document give me all the string literals in your syntax tree and it says okay here you go and so i change the",
    "start": "2117040",
    "end": "2124240"
  },
  {
    "text": "first one and i add two upper to it and now the whole of the rest of the tree that",
    "start": "2124240",
    "end": "2129520"
  },
  {
    "text": "that node is contained in has become invalidated the document is invalidated",
    "start": "2129520",
    "end": "2134960"
  },
  {
    "text": "because i made a change and so i need to kind of go and i do it and then i apply that",
    "start": "2134960",
    "end": "2141440"
  },
  {
    "text": "and then i start for reaching through again and remember which ones i've already done and then add the next one",
    "start": "2141440",
    "end": "2147200"
  },
  {
    "text": "it would be horrible and so there is a c-sharp syntax rewriter which looks just",
    "start": "2147200",
    "end": "2152880"
  },
  {
    "text": "like the c-sharp syntax walker or visitor except instead of void every",
    "start": "2152880",
    "end": "2158240"
  },
  {
    "text": "method returns a syntax node and so that looks like",
    "start": "2158240",
    "end": "2166000"
  },
  {
    "text": "this so up shift all strings we go through we",
    "start": "2166000",
    "end": "2173359"
  },
  {
    "text": "ignore auto-generated comments um we also ignore um",
    "start": "2173359",
    "end": "2180480"
  },
  {
    "text": "so one of the auto-generated files is in.net",
    "start": "2180480",
    "end": "2185839"
  },
  {
    "text": "6 projects is assemblyinfo.cs because we don't put that in anymore it's auto-generated for us from the cs",
    "start": "2185839",
    "end": "2193359"
  },
  {
    "text": "proj file and assembly info doesn't like it if you up shift your assembly",
    "start": "2193359",
    "end": "2198480"
  },
  {
    "text": "description or assembly company name so that's why we keep those out like that",
    "start": "2198480",
    "end": "2203760"
  },
  {
    "text": "and then we have our model we get our semantic model for this document",
    "start": "2203760",
    "end": "2209760"
  },
  {
    "text": "some reason we're not checking to see whether that's null but never mind and then we just create a string literal up",
    "start": "2209760",
    "end": "2215839"
  },
  {
    "text": "shifter and we pass in our semantic model and then we say visit and pass in our",
    "start": "2215839",
    "end": "2222720"
  },
  {
    "text": "syntax root here and then",
    "start": "2222720",
    "end": "2227760"
  },
  {
    "text": "if we go and look in here we can see we just override visit literal expression",
    "start": "2227760",
    "end": "2234720"
  },
  {
    "text": "and so any literal expression syntax that we get in here uh will be will",
    "start": "2234720",
    "end": "2240400"
  },
  {
    "text": "trigger this method and we can say is it an i named type symbol and if the",
    "start": "2240400",
    "end": "2246320"
  },
  {
    "text": "type is string and then we could say",
    "start": "2246320",
    "end": "2251599"
  },
  {
    "text": "uh is it system.string and assume that it's got uh two upper invariant but actually",
    "start": "2251599",
    "end": "2259280"
  },
  {
    "text": "it's just as much fun to say look at its members and see if it's got a two upper",
    "start": "2259280",
    "end": "2264560"
  },
  {
    "text": "invariant member on it and then we'll just call that anyway because if some idiots come along and created their own",
    "start": "2264560",
    "end": "2270720"
  },
  {
    "text": "string because microsoft string is rubbish and they know how to string better than microsoft",
    "start": "2270720",
    "end": "2276880"
  },
  {
    "text": "i'm literally working on code written by somebody who thought that about himself it's everything is is wrapped in his",
    "start": "2276880",
    "end": "2284720"
  },
  {
    "text": "weird variants and so i go this is a string it has a two upper invariant method and so i'm",
    "start": "2284720",
    "end": "2290800"
  },
  {
    "text": "going to add a call to dot to upper invariant to this string here",
    "start": "2290800",
    "end": "2296640"
  },
  {
    "text": "um and so i need to return a new syntax node here",
    "start": "2296640",
    "end": "2304320"
  },
  {
    "text": "and so i can return syntax factory so when you want to generate code you use syntax factory that allows you to create",
    "start": "2304320",
    "end": "2312160"
  },
  {
    "text": "any kind of c-sharp syntax the other thing you can do is just pass it a string and say syntax factory.pass",
    "start": "2312160",
    "end": "2318800"
  },
  {
    "text": "which is often a lot more straightforward believe me but i'm going to create an invocation",
    "start": "2318800",
    "end": "2324079"
  },
  {
    "text": "expression which is going to use a member access expression",
    "start": "2324079",
    "end": "2329119"
  },
  {
    "text": "of this node here so this literal we're going to access a member on that literal",
    "start": "2329119",
    "end": "2335040"
  },
  {
    "text": "and we're going to pass in the identifier name of string.two upper invariant so we're going to create a",
    "start": "2335040",
    "end": "2341520"
  },
  {
    "text": "member access expression that accesses a member to upper invariant on that node",
    "start": "2341520",
    "end": "2347839"
  },
  {
    "text": "and we just return that back out so when this finishes",
    "start": "2347839",
    "end": "2355040"
  },
  {
    "text": "the top level syntax node that we've passed in to visit will have had any",
    "start": "2355040",
    "end": "2360400"
  },
  {
    "text": "string literals they'll have had the two upper invariant appended onto them",
    "start": "2360400",
    "end": "2366160"
  },
  {
    "text": "if uh we don't match any of these things here then we return base dot visit",
    "start": "2366160",
    "end": "2372160"
  },
  {
    "text": "literal expression it's always a good idea with these roslin things to call the base method a lot of the time if you",
    "start": "2372160",
    "end": "2378400"
  },
  {
    "text": "don't call the base method it will stop walking and uh you can have strings",
    "start": "2378400",
    "end": "2383760"
  },
  {
    "text": "inside strings now thanks to string interpolation you can have a string which is an interpolation string and",
    "start": "2383760",
    "end": "2389760"
  },
  {
    "text": "then inside that you can have a string literal it's quite often you have sort of a boolean and you say if this then",
    "start": "2389760",
    "end": "2396160"
  },
  {
    "text": "that string otherwise that string or something so you need to dig down into uh string literals to see if there are",
    "start": "2396160",
    "end": "2402640"
  },
  {
    "text": "any more string literals hiding inside them this is one of those things we i kind of",
    "start": "2402640",
    "end": "2408400"
  },
  {
    "text": "go that's complicated imagine having to write that imagine to write this i cannot",
    "start": "2408400",
    "end": "2415119"
  },
  {
    "text": "begin to imagine um how you go about writing one of these things super clever people at work",
    "start": "2415119",
    "end": "2422640"
  },
  {
    "text": "okay so then that comes back to here um and we say visit and we get a new",
    "start": "2422640",
    "end": "2429839"
  },
  {
    "text": "route out of that so that's the top level syntax node with any of those",
    "start": "2429839",
    "end": "2434880"
  },
  {
    "text": "rewrites those changes made all the way through it and we just have a new top level node",
    "start": "2434880",
    "end": "2441440"
  },
  {
    "text": "now and then we can call is equivalent to and so we say new root dot is equivalent",
    "start": "2441440",
    "end": "2447920"
  },
  {
    "text": "to root is it the same document you could strip all",
    "start": "2447920",
    "end": "2454000"
  },
  {
    "text": "the white space out and it would be semantically the same document",
    "start": "2454000",
    "end": "2459200"
  },
  {
    "text": "so we use this is equivalent to to say have we actually changed anything and if we have",
    "start": "2459200",
    "end": "2465599"
  },
  {
    "text": "let's count how many things we've changed and we'll say solution equals new solution",
    "start": "2465599",
    "end": "2471440"
  },
  {
    "text": "with document syntax root so every document every project every solution has an id which is actually a",
    "start": "2471440",
    "end": "2478880"
  },
  {
    "text": "good but it's wrapped in a document id struct and we say so create a new solution and",
    "start": "2478880",
    "end": "2485599"
  },
  {
    "text": "this document should now have this syntax route so it automatically handles the thing",
    "start": "2485599",
    "end": "2491359"
  },
  {
    "text": "about the project so it creates a new document with that syntax route and a new project with that document and a new",
    "start": "2491359",
    "end": "2497119"
  },
  {
    "text": "solution with that project that's been changed and it throws away the old ones because they're immutable",
    "start": "2497119",
    "end": "2503839"
  },
  {
    "text": "and then we store that in here and we keep going through and we keep going through",
    "start": "2503839",
    "end": "2509599"
  },
  {
    "text": "and then down at the end here we just say uh if new solution and workspace dot",
    "start": "2509599",
    "end": "2515200"
  },
  {
    "text": "current solution are not the same then workspace dot try apply changes i'm not",
    "start": "2515200",
    "end": "2521520"
  },
  {
    "text": "doing anything with the return of that but try apply changes returns boolean and so if your",
    "start": "2521520",
    "end": "2527920"
  },
  {
    "text": "new solution contains changes but somebody else has changed current solution in the meantime",
    "start": "2527920",
    "end": "2536079"
  },
  {
    "text": "this is like doing a git merge it's like a conflict thing so something else has changed workspace.current solution in",
    "start": "2536079",
    "end": "2543280"
  },
  {
    "text": "the meantime then no you can't do this start again with current solution and go",
    "start": "2543280",
    "end": "2549280"
  },
  {
    "text": "back and try again so i could put something like if not workspace dot try apply changes",
    "start": "2549280",
    "end": "2554720"
  },
  {
    "text": "go to here and i'm not afraid of go to's",
    "start": "2554720",
    "end": "2561960"
  },
  {
    "text": "there you go there's a label and we can say if not workspace",
    "start": "2565280",
    "end": "2574119"
  },
  {
    "text": "screw you dykstra i love goto",
    "start": "2580880",
    "end": "2586800"
  },
  {
    "text": "um i go to is is much maligned and and i don't appreciate it",
    "start": "2586800",
    "end": "2593599"
  },
  {
    "text": "i write quite a lot of methods which are try and they return boolean and they have an out parameter",
    "start": "2593599",
    "end": "2599200"
  },
  {
    "text": "um and you try three or four things along the way to doing it you're going can i do",
    "start": "2599200",
    "end": "2604560"
  },
  {
    "text": "this okay i did that and if at any point any of those fail you have to set that parameter default and return false so",
    "start": "2604560",
    "end": "2611680"
  },
  {
    "text": "you've got two operations and so you can either say if i can't do this thing equals default return false if i can't",
    "start": "2611680",
    "end": "2617760"
  },
  {
    "text": "do this thing equals default return false or you can nest your riffs and go if this if that if that if that",
    "start": "2617760",
    "end": "2624000"
  },
  {
    "text": "value equals this return true and then do or you can put thing equals default return false down at the bottom",
    "start": "2624000",
    "end": "2630720"
  },
  {
    "text": "with an abort label and then in all your ifs you just do go to abort go to a port go to a ball so yeah i like go to",
    "start": "2630720",
    "end": "2640318"
  },
  {
    "text": "also i'm just contrary so",
    "start": "2641280",
    "end": "2647040"
  },
  {
    "text": "we've got our sample here we've got a string literal in here says hello name",
    "start": "2647359",
    "end": "2652640"
  },
  {
    "text": "um if we've got a string literal in here we've got what's oh hang on we'll take that two upper invariant off there",
    "start": "2652640",
    "end": "2660000"
  },
  {
    "text": "so that is now back to where it should be and if we run this",
    "start": "2660000",
    "end": "2667599"
  },
  {
    "text": "one change is applied and then if i go back to code here it's",
    "start": "2671440",
    "end": "2676720"
  },
  {
    "text": "not in there because it's probably what's my debug set to",
    "start": "2676720",
    "end": "2681760"
  },
  {
    "text": "solution explorer properties",
    "start": "2681760",
    "end": "2688920"
  },
  {
    "text": "debug oh good lord they changed everything oh okay there we",
    "start": "2690880",
    "end": "2696880"
  },
  {
    "text": "go copenhagen",
    "start": "2696880",
    "end": "2701039"
  },
  {
    "text": "all right cool",
    "start": "2703520",
    "end": "2706400"
  },
  {
    "text": "yes right 15 minutes and we're just about to move to the analyzer which is the really good bit so let's run this",
    "start": "2708800",
    "end": "2714319"
  },
  {
    "text": "again against the right code",
    "start": "2714319",
    "end": "2719000"
  },
  {
    "text": "and we see one change is applied and if we go back to here to upper invariant",
    "start": "2719920",
    "end": "2726079"
  },
  {
    "text": "has magically appeared on there what you will notice is that it has not appeared on here because this",
    "start": "2726079",
    "end": "2733440"
  },
  {
    "text": "is not a string literal it is an interpolated string expression and it's",
    "start": "2733440",
    "end": "2739280"
  },
  {
    "text": "a different thing and so if i wanted to catch that i would have to add an override for that in my syntax rewriter",
    "start": "2739280",
    "end": "2746560"
  },
  {
    "text": "as well so yes you can do syntax node.replace node and",
    "start": "2746560",
    "end": "2753920"
  },
  {
    "text": "for very quick fixes and we will actually see this in a moment that is a valid way of doing things but",
    "start": "2753920",
    "end": "2761040"
  },
  {
    "text": "if you think you're going to do multiple replacements on a single node then c-sharp syntax rewriter is your friend",
    "start": "2761040",
    "end": "2768240"
  },
  {
    "text": "remember to call base syntax factory for generating code just",
    "start": "2768240",
    "end": "2774319"
  },
  {
    "text": "type syntax factory dot and marvel at the many different kinds of syntax that",
    "start": "2774319",
    "end": "2779440"
  },
  {
    "text": "there are and then use pass and just pass in some code in a string and then solution.with document syntax",
    "start": "2779440",
    "end": "2786560"
  },
  {
    "text": "root creates a new copy of the solution and then workspace workspace dot try apply changes and if that returns false",
    "start": "2786560",
    "end": "2794480"
  },
  {
    "text": "you have to use a go to no not not allowed to do anything else you have to use a go to",
    "start": "2794480",
    "end": "2801520"
  },
  {
    "text": "okay so the point at which this actually becomes useful for most people is analyzers rosalind analyzers are",
    "start": "2801520",
    "end": "2808400"
  },
  {
    "text": "fantastic and there are uh two things that i really really like about them",
    "start": "2808400",
    "end": "2816200"
  },
  {
    "text": "and one is that uh they do a lot of the hard work for",
    "start": "2817200",
    "end": "2822319"
  },
  {
    "text": "you and you just tell the analyzer what kind of things you're interested in and then",
    "start": "2822319",
    "end": "2827440"
  },
  {
    "text": "it just calls you and says hey i've got one of these is it okay and you can say yes it is or you can return some",
    "start": "2827440",
    "end": "2833920"
  },
  {
    "text": "diagnostics and say there's a problem with it but you can also create a code fix for it that magically fixes whatever",
    "start": "2833920",
    "end": "2840559"
  },
  {
    "text": "it is and the other thing i really like about them is the deployment model so you can",
    "start": "2840559",
    "end": "2845760"
  },
  {
    "text": "create a visual studio extension uh with your analyzer or analyzers in it",
    "start": "2845760",
    "end": "2851040"
  },
  {
    "text": "and then people can download that from the visual studio marketplace and so you know these days code rush",
    "start": "2851040",
    "end": "2856559"
  },
  {
    "text": "from devexpress that's pretty much what that is it's a bunch of roslin analyzers resharpers still use their code engine",
    "start": "2856559",
    "end": "2863359"
  },
  {
    "text": "of their own because you know they've got it and why not carry on using it",
    "start": "2863359",
    "end": "2869200"
  },
  {
    "text": "the other place you can put it is in the nuget package and so if you put out a nuget package an x unit is a good",
    "start": "2869200",
    "end": "2874720"
  },
  {
    "text": "example of this so when you install x unit it brings some analyzers with it",
    "start": "2874720",
    "end": "2880480"
  },
  {
    "text": "and then if you do uh if you create a test method and you put theory attribute on it",
    "start": "2880480",
    "end": "2888240"
  },
  {
    "text": "and you put an inline data attribute on it and your method takes two parameters",
    "start": "2888240",
    "end": "2894079"
  },
  {
    "text": "but your inline data attribute doesn't have two parameters you'll get squiggles saying that's not going to work your",
    "start": "2894079",
    "end": "2900160"
  },
  {
    "text": "inline data doesn't match your theory and this is distributed so you don't have to install an extension in visual",
    "start": "2900160",
    "end": "2905839"
  },
  {
    "text": "studio to do this you can just ship it with your nuget package and it has the fix in there if",
    "start": "2905839",
    "end": "2912319"
  },
  {
    "text": "it's possible to to intelligently fix it so we're just going to create a very simple",
    "start": "2912319",
    "end": "2919599"
  },
  {
    "text": "logger usage analyzer ilogger so everybody uses ilogger in your.net",
    "start": "2919599",
    "end": "2925119"
  },
  {
    "text": "core mvc applications all that sort of thing and you just go underscore logger dot log",
    "start": "2925119",
    "end": "2930400"
  },
  {
    "text": "information bar which shouldn't that's not right that's bad what you should do",
    "start": "2930400",
    "end": "2936559"
  },
  {
    "text": "is if underscore logger dot is enabled log level information then underscore",
    "start": "2936559",
    "end": "2941680"
  },
  {
    "text": "logger.log information bar but programmers",
    "start": "2941680",
    "end": "2946960"
  },
  {
    "text": "are lazy and so we don't and so we just make that log information call and then inside",
    "start": "2946960",
    "end": "2954079"
  },
  {
    "text": "there it says yeah i just don't do that and all this sort of stuff and quite a lot of the time in that log",
    "start": "2954079",
    "end": "2960880"
  },
  {
    "text": "thing we might be calling another method we might be accessing a property we're doing things it's a non-zero effort to",
    "start": "2960880",
    "end": "2967680"
  },
  {
    "text": "call that logger and particularly if you've got like underscore logger dot log debug",
    "start": "2967680",
    "end": "2973119"
  },
  {
    "text": "that's almost certainly not turned on in production but it's still taking up cpu cycles",
    "start": "2973119",
    "end": "2978160"
  },
  {
    "text": "so if you look at code inside kestrel for example where they're",
    "start": "2978160",
    "end": "2983200"
  },
  {
    "text": "trying to squeeze every last request per second all the loggers calls",
    "start": "2983200",
    "end": "2988720"
  },
  {
    "text": "are guarded with if underscore logger dot is enabled what would be really nice is if we could find",
    "start": "2988720",
    "end": "2995200"
  },
  {
    "text": "this and automatically replace it with this so",
    "start": "2995200",
    "end": "3001359"
  },
  {
    "text": "10 minutes to go i'm not going to write it live but i was saying to mads at lunch time",
    "start": "3001359",
    "end": "3010079"
  },
  {
    "text": "the version last time i did this was for visual studio 2019 now on 2022 it",
    "start": "3010079",
    "end": "3016160"
  },
  {
    "text": "doesn't work and so i thought i'll i'll just write it again from scratch in 2022. it took me one hour to write this",
    "start": "3016160",
    "end": "3023359"
  },
  {
    "text": "and obviously you know i know roslyn and i've done a lot of stuff with it but",
    "start": "3023359",
    "end": "3029440"
  },
  {
    "text": "so we create um in the visual studio project templates",
    "start": "3029440",
    "end": "3035280"
  },
  {
    "text": "you will find analyzer with code fix and that will generate you um",
    "start": "3035280",
    "end": "3040640"
  },
  {
    "text": "essentially a bunch of projects and in that project you will have your logger",
    "start": "3040640",
    "end": "3045920"
  },
  {
    "text": "fix and your loggerfix.codefixes logofix is the name i gave the project",
    "start": "3045920",
    "end": "3051680"
  },
  {
    "text": "we have a package here which is when you want to bundle it as a nuget package and distribute it",
    "start": "3051680",
    "end": "3057760"
  },
  {
    "text": "it generates tests for us which i haven't done anything with and we have a vsix if you want to bundle it up and",
    "start": "3057760",
    "end": "3064880"
  },
  {
    "text": "package it and ship it to the visual studio marketplace or if you want to write a joke extension",
    "start": "3064880",
    "end": "3071040"
  },
  {
    "text": "and then when your friend goes away and leaves his machine unlocked you sneak on and you copy the vsix package on and",
    "start": "3071040",
    "end": "3076880"
  },
  {
    "text": "then weird things start happening in his code and he doesn't know why just little red squiggles under every",
    "start": "3076880",
    "end": "3083359"
  },
  {
    "text": "third line of code going you're just a bad person",
    "start": "3083359",
    "end": "3088480"
  },
  {
    "text": "[Laughter] words just come out of my mouth",
    "start": "3089980",
    "end": "3097760"
  },
  {
    "text": "anyway so we have a diagnostic analyzer based class that's how we implement our analyzer and we're going to override",
    "start": "3097760",
    "end": "3104079"
  },
  {
    "text": "things on there so we give ourselves a diagnostic id we're just going to call ourselves logger",
    "start": "3104079",
    "end": "3109839"
  },
  {
    "text": "we have some localizable strings because we want to tell our friend he's a bad person in all the languages in the world",
    "start": "3109839",
    "end": "3117359"
  },
  {
    "text": "using google translate so we have our resources file so we can localize our",
    "start": "3117359",
    "end": "3123040"
  },
  {
    "text": "messages and uh menu items and things so we have a title and a message format and",
    "start": "3123040",
    "end": "3128319"
  },
  {
    "text": "a description uh the category shouldn't be naming the category should be",
    "start": "3128319",
    "end": "3134079"
  },
  {
    "text": "writing proper code",
    "start": "3134079",
    "end": "3139079"
  },
  {
    "text": "so yeah we have a override supported diagnostics and we're",
    "start": "3139359",
    "end": "3144400"
  },
  {
    "text": "going to return an immutable array of rule here so our diagnostic descriptor",
    "start": "3144400",
    "end": "3149760"
  },
  {
    "text": "this is our rule that our analyzer is checking for which has got our id and our title and message format and our",
    "start": "3149760",
    "end": "3156319"
  },
  {
    "text": "category if i was actually doing this i would try and figure out what the category should",
    "start": "3156319",
    "end": "3161839"
  },
  {
    "text": "be because there are some pre-named ones so that's our supported diagnostic so we",
    "start": "3161839",
    "end": "3168000"
  },
  {
    "text": "can basically say if you have anything that matches this diagnostic then call us we have this initialize which",
    "start": "3168000",
    "end": "3174960"
  },
  {
    "text": "gives us the analysis context and that allows us to register our operation in",
    "start": "3174960",
    "end": "3181520"
  },
  {
    "text": "there we're going to register analyze operation here and the things that we are operating on is invocations because",
    "start": "3181520",
    "end": "3189440"
  },
  {
    "text": "underscore logger dot log something is a method invocation and then we have our analyze",
    "start": "3189440",
    "end": "3195359"
  },
  {
    "text": "operation here and we go okay so this is passing in",
    "start": "3195359",
    "end": "3200720"
  },
  {
    "text": "essentially semantic model things at this point and so we have our context operation that's just i operation we",
    "start": "3200720",
    "end": "3207920"
  },
  {
    "text": "want to say is it an invocation operation is it are we invoking a method and if we are then we can say okay is",
    "start": "3207920",
    "end": "3215119"
  },
  {
    "text": "the target method a log method and so we can say here um",
    "start": "3215119",
    "end": "3220160"
  },
  {
    "text": "log methods dot contains so log methods is up here log critical debug error",
    "start": "3220160",
    "end": "3225520"
  },
  {
    "text": "information trace and warning i'm not dealing with the dot log open brackets log level",
    "start": "3225520",
    "end": "3232319"
  },
  {
    "text": "information because a it's really complicated and b who uses that",
    "start": "3232319",
    "end": "3238640"
  },
  {
    "text": "hands up who uses that good thank you",
    "start": "3238640",
    "end": "3244720"
  },
  {
    "text": "so yeah is log just goes does log methods contain that name",
    "start": "3244720",
    "end": "3251359"
  },
  {
    "text": "and then is it ilogger and then down here so we pass in the type that the method is",
    "start": "3251359",
    "end": "3258400"
  },
  {
    "text": "being invoked on and it's either going to be ilogger but actually it's not it's an extension method",
    "start": "3258400",
    "end": "3264400"
  },
  {
    "text": "it's uh in a type called logging extensions",
    "start": "3264400",
    "end": "3269839"
  },
  {
    "text": "um and so we have logger extensions sorry here and then we say is it microsoft.extensions.logging",
    "start": "3269839",
    "end": "3277359"
  },
  {
    "text": "and we go okay so is the namespace logging and is that contained in the extensions namespace and is that",
    "start": "3277359",
    "end": "3282880"
  },
  {
    "text": "contained in the microsoft namespace and is that in the global namespace if all that is true then this is definitely",
    "start": "3282880",
    "end": "3289280"
  },
  {
    "text": "microsoft's log information or log debug method",
    "start": "3289280",
    "end": "3294880"
  },
  {
    "text": "and then we can say is it guarded we can go looking to say is this invocation guarded",
    "start": "3294880",
    "end": "3301760"
  },
  {
    "text": "so we say go oh this is a fun for loop if you've never written a for loop that",
    "start": "3301760",
    "end": "3308160"
  },
  {
    "text": "wasn't just for i equals thing i is less than thing welcome to",
    "start": "3308160",
    "end": "3314319"
  },
  {
    "text": "possibly hell i don't know so for this is how you loop back up things in a tree",
    "start": "3314319",
    "end": "3320960"
  },
  {
    "text": "you say for var parent and then you say it's not a method or property declaration if we get to a",
    "start": "3320960",
    "end": "3326640"
  },
  {
    "text": "method or property declaration there aren't going to be any if statements outside of that so we don't care",
    "start": "3326640",
    "end": "3332720"
  },
  {
    "text": "and then at the end here we can say parent equals parent or parent um i get in so much trouble at work for",
    "start": "3332720",
    "end": "3339359"
  },
  {
    "text": "writing for loops like that it's perfectly legitimate then i do go to's to jump out of them",
    "start": "3339359",
    "end": "3349000"
  },
  {
    "text": "okay so we're at the parent of our log method now and we go is it an if statement if",
    "start": "3349119",
    "end": "3356480"
  },
  {
    "text": "it isn't an if statement then it's definitely not an if logger dot is enabled so we can just carry on and then",
    "start": "3356480",
    "end": "3362880"
  },
  {
    "text": "we can go back into this parent here and we can find invocation",
    "start": "3362880",
    "end": "3368480"
  },
  {
    "text": "expression syntax this isn't quite right there would be a little bit more to it than this",
    "start": "3368480",
    "end": "3373920"
  },
  {
    "text": "and we can say uh get the operation here which is an invocation and then we",
    "start": "3373920",
    "end": "3380640"
  },
  {
    "text": "can say target method name is enabled return true so",
    "start": "3380640",
    "end": "3385920"
  },
  {
    "text": "actually what i would also need to do here is check that that's being called on the logger type and all this sort of",
    "start": "3385920",
    "end": "3391040"
  },
  {
    "text": "thing like i say it only took me an hour",
    "start": "3391040",
    "end": "3395359"
  },
  {
    "text": "and so yeah then if it is already guarded we can just",
    "start": "3396400",
    "end": "3402400"
  },
  {
    "text": "return early otherwise we create a diagnostic we tell it where we're talking about saying there's a problem",
    "start": "3402400",
    "end": "3409359"
  },
  {
    "text": "we tell it the rule that it's broken and we pass in the invocation target method dot name and that will be used to format",
    "start": "3409359",
    "end": "3417040"
  },
  {
    "text": "a message and then we can report this diagnostic and so if i run this now it'll spin up a",
    "start": "3417040",
    "end": "3423839"
  },
  {
    "text": "new visual studio instance with this analyzer active",
    "start": "3423839",
    "end": "3429280"
  },
  {
    "text": "and we can open up worker sample here",
    "start": "3431520",
    "end": "3435520"
  },
  {
    "text": "this does take a minute because it's a laptop i need a big ass workstation with like",
    "start": "3441520",
    "end": "3447200"
  },
  {
    "text": "64 calls or something because i am also running slack so you know",
    "start": "3447200",
    "end": "3452720"
  },
  {
    "text": "it gets such a bad rap and it totally deserves it right",
    "start": "3452880",
    "end": "3458720"
  },
  {
    "text": "so here we have an unguarded call give visual studio a minute to catch up and actually generate the model in",
    "start": "3458720",
    "end": "3464720"
  },
  {
    "text": "memory and pass the syntax and all this sort of stuff and",
    "start": "3464720",
    "end": "3470319"
  },
  {
    "text": "eventually we should get some squiggles that appear under here",
    "start": "3470319",
    "end": "3477119"
  },
  {
    "text": "so you can sort of tell it's getting there there we go we have a green squiggle underscore logger dot log",
    "start": "3477359",
    "end": "3482480"
  },
  {
    "text": "information and if i mouse over that logger fix log call log information is",
    "start": "3482480",
    "end": "3488000"
  },
  {
    "text": "not guarded with is enabled and it also shows up as a warning in my project compilation down here and it would also",
    "start": "3488000",
    "end": "3494960"
  },
  {
    "text": "show up as a warning so if this was a nuget package included in the project it would then also show",
    "start": "3494960",
    "end": "3501119"
  },
  {
    "text": "up as a warning in the ci builds which is another reason for doing it in",
    "start": "3501119",
    "end": "3506240"
  },
  {
    "text": "nougat packages and so the other thing that we have in the",
    "start": "3506240",
    "end": "3512000"
  },
  {
    "text": "analyzer i'm not going to stop the other thing running is we have a codefix provider",
    "start": "3512000",
    "end": "3517920"
  },
  {
    "text": "and so go away go away and so in here this is the thing that",
    "start": "3517920",
    "end": "3525359"
  },
  {
    "text": "fixes the problem and we have this register code fixes async",
    "start": "3525359",
    "end": "3531200"
  },
  {
    "text": "and we say we work with",
    "start": "3531200",
    "end": "3536559"
  },
  {
    "text": "um declarations of expression statement syntax so what we want is the whole",
    "start": "3536559",
    "end": "3542480"
  },
  {
    "text": "underscore loggered the invocation syntax isn't the whole line the whole line is underscore logger dot log",
    "start": "3542480",
    "end": "3549040"
  },
  {
    "text": "information whatever the arguments are semicolon we want all of that so we're",
    "start": "3549040",
    "end": "3554160"
  },
  {
    "text": "going to register a code fix for that and we say here is our create changed",
    "start": "3554160",
    "end": "3559520"
  },
  {
    "text": "solution and you can see here and every time you press ctrl dot or alt enter and apply a",
    "start": "3559520",
    "end": "3565520"
  },
  {
    "text": "code fix in visual studio the method that is being called returns a new solution and then visual studio sets",
    "start": "3565520",
    "end": "3572559"
  },
  {
    "text": "that as the current solution every time and so we do this add is enabled guard",
    "start": "3572559",
    "end": "3578000"
  },
  {
    "text": "async and we return a whole new solution down here so we say document get semantic model",
    "start": "3578000",
    "end": "3584640"
  },
  {
    "text": "async the level well the operation target method is log whatever and so the",
    "start": "3584640",
    "end": "3590720"
  },
  {
    "text": "level is the substring of that starting at the fourth character so third when you're zero based",
    "start": "3590720",
    "end": "3598240"
  },
  {
    "text": "then we find the member access expression so that is the um",
    "start": "3598240",
    "end": "3604079"
  },
  {
    "text": "the is the underscore log level that's that's",
    "start": "3604559",
    "end": "3610480"
  },
  {
    "text": "the um invocation thing there the member access expression it's the syntax node equivalent of our operation that we've",
    "start": "3610480",
    "end": "3617119"
  },
  {
    "text": "got up here so that's the semantic model this is the syntax node and then we can get the leading trivia",
    "start": "3617119",
    "end": "3624079"
  },
  {
    "text": "off there and we can create a new is enabled syntax and remember i said pass",
    "start": "3624079",
    "end": "3630319"
  },
  {
    "text": "expression so yeah we just syntax factory.pass expression source dot is enabled log",
    "start": "3630319",
    "end": "3636559"
  },
  {
    "text": "level level um and then we use syntax factory to wrap that in an if statement",
    "start": "3636559",
    "end": "3644400"
  },
  {
    "text": "and that is constructed by passing in an if keyword and an open paren token and",
    "start": "3644400",
    "end": "3649680"
  },
  {
    "text": "then our is enabled expression here and then a close paren token with trailing",
    "start": "3649680",
    "end": "3655119"
  },
  {
    "text": "trivia and then we'll put a new line in there that's white space then we add the original expression and we put four",
    "start": "3655119",
    "end": "3661280"
  },
  {
    "text": "spaces on the start of it because i don't care what your indentation standards are i'm putting in four spaces",
    "start": "3661280",
    "end": "3666960"
  },
  {
    "text": "deal with it um and then uh we don't have an else because we could have",
    "start": "3666960",
    "end": "3672720"
  },
  {
    "text": "an else there as well and we put back the leading trivia that we got from the",
    "start": "3672720",
    "end": "3677760"
  },
  {
    "text": "original expression okay easy um",
    "start": "3677760",
    "end": "3683119"
  },
  {
    "text": "now we do original solution is document.project.solution we get the syntax root from our document",
    "start": "3683119",
    "end": "3690000"
  },
  {
    "text": "we do syntax root.replacenode and we replace our expression node here so we don't need a visitor in this case we're",
    "start": "3690000",
    "end": "3697040"
  },
  {
    "text": "just replacing one node and we replace that with our if statement and then we return",
    "start": "3697040",
    "end": "3702160"
  },
  {
    "text": "the original solution with this new document syntax root and that is our code fix and so if in here i press",
    "start": "3702160",
    "end": "3709920"
  },
  {
    "text": "control dot it and say add is enabled guard",
    "start": "3709920",
    "end": "3715839"
  },
  {
    "text": "then i get my is enabled goes in there and the code is indented and the squiggle",
    "start": "3715839",
    "end": "3723839"
  },
  {
    "text": "has gone away because now things are being done properly and that is how you write a roslin analyzer see easy",
    "start": "3723839",
    "end": "3733359"
  },
  {
    "text": "it is it is it's easy it's honestly um the first one will take you like a few",
    "start": "3733680",
    "end": "3739039"
  },
  {
    "text": "hours and then the second one you'll copy and paste most of the code from the first one",
    "start": "3739039",
    "end": "3744240"
  },
  {
    "text": "and it will it'll go much quicker once you get past that kind of initial i need",
    "start": "3744240",
    "end": "3749280"
  },
  {
    "text": "to get my head around this and i hope i've helped you with that to a certain extent and certainly shown you how easy",
    "start": "3749280",
    "end": "3755760"
  },
  {
    "text": "it is and if you're sitting here thinking it's really complicated like i say imagine actually writing a c sharp passer from",
    "start": "3755760",
    "end": "3763039"
  },
  {
    "text": "scratch so you know diagnostic analyzer which makes the squiggles and your code fix",
    "start": "3763039",
    "end": "3768559"
  },
  {
    "text": "provider that fixes the squiggles it takes care of all the loading the solution and all that sort of stuff for",
    "start": "3768559",
    "end": "3773760"
  },
  {
    "text": "you here are some useful resources so josh varti when i was",
    "start": "3773760",
    "end": "3780160"
  },
  {
    "text": "learning this stuff originally he wrote a series of blog posts they are fantastic um they're slightly out of",
    "start": "3780160",
    "end": "3786319"
  },
  {
    "text": "date they don't have all the latest c-sharp stuff but it's the fundamentals it's the basics",
    "start": "3786319",
    "end": "3791520"
  },
  {
    "text": "and it's still pretty valid on github.com.net analyzers it's an",
    "start": "3791520",
    "end": "3796559"
  },
  {
    "text": "organization and there's a bunch of real world examples on there that you can steal from",
    "start": "3796559",
    "end": "3802559"
  },
  {
    "text": "and if you're interested in a thing that automatically migrates wcf to grpc then check out visual recode",
    "start": "3802559",
    "end": "3809359"
  },
  {
    "text": "because that's what it tries to do that's it thank you very much couple minutes over",
    "start": "3809359",
    "end": "3814720"
  },
  {
    "text": "but cheers",
    "start": "3814720",
    "end": "3818119"
  },
  {
    "text": "you",
    "start": "3831119",
    "end": "3833200"
  }
]