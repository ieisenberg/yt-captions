[
  {
    "text": "hello hello good afternoon I can see people are still",
    "start": "8040",
    "end": "13440"
  },
  {
    "text": "coming in that's okay we can start so welcome and thank you for joining me",
    "start": "13440",
    "end": "20039"
  },
  {
    "text": "here um my session today is about Azure container apps and how we say goodbye to",
    "start": "20039",
    "end": "25599"
  },
  {
    "text": "Azure kubernetes Services um very quickly Who Am I my name is Johnny um I",
    "start": "25599",
    "end": "31840"
  },
  {
    "text": "am from Belgium I work as a software developer software consultant mostly um",
    "start": "31840",
    "end": "37879"
  },
  {
    "text": "uh focusing on net uh fullstack development and Azure cloud cloud native",
    "start": "37879",
    "end": "43719"
  },
  {
    "text": "development um the reason I'm showing you this slide for such a long time now",
    "start": "43719",
    "end": "49520"
  },
  {
    "text": "is because all of the things that I will show you today they're already available on my GitHub so I have a very specific",
    "start": "49520",
    "end": "55120"
  },
  {
    "text": "repository in my GitHub for today um it has the examples it also has a of my",
    "start": "55120",
    "end": "60440"
  },
  {
    "text": "PowerPoint slide so you can already download that um so if you just scan the QR code or you follow the link in the",
    "start": "60440",
    "end": "67119"
  },
  {
    "text": "bottom of each slide you will get all of the information already so I I can just",
    "start": "67119",
    "end": "72320"
  },
  {
    "text": "get drunk tonight and I don't have to worry about things everything is already up there if there's any questions you",
    "start": "72320",
    "end": "77799"
  },
  {
    "text": "can ask uh me after the session I will also be here for the rest of the uh evening uh and if you have even more",
    "start": "77799",
    "end": "83880"
  },
  {
    "text": "questions afterwards you can contact me find me on LinkedIn um or send me an email and uh we will see how how we can",
    "start": "83880",
    "end": "90320"
  },
  {
    "text": "solve that so today I want to talk to you about Azure container apps obviously",
    "start": "90320",
    "end": "95840"
  },
  {
    "text": "that was the title of my session um and I'm I'm not really a religious kind of guy um but if there is one religion that",
    "start": "95840",
    "end": "102240"
  },
  {
    "text": "I need to that I want to follow it's containers I'm really a fan of containers um and the reason I'm a fan",
    "start": "102240",
    "end": "108280"
  },
  {
    "text": "of containers is because it gives us as developers a lot of flexibility in how we deploy our",
    "start": "108280",
    "end": "113840"
  },
  {
    "text": "applications and of course the concept of software containers comes from the real life containers if you look at this",
    "start": "113840",
    "end": "120759"
  },
  {
    "text": "picture this is basically a ship uh couple of hundreds of years ago and the",
    "start": "120759",
    "end": "126119"
  },
  {
    "text": "way we needed to load cargo into the ship was quite difficult um because we had all different kinds of cargo we had",
    "start": "126119",
    "end": "133959"
  },
  {
    "text": "boxes we had chests we had barrels we had sacks all different kinds of cargo",
    "start": "133959",
    "end": "140080"
  },
  {
    "text": "and we need a lot of manual manpower to load this onto the ship and it wasn't really a perfect match because of course",
    "start": "140080",
    "end": "147040"
  },
  {
    "text": "barrels and sacks don't match up they leave a lot of space in between so it's hard to fill a ship very uh nicely with",
    "start": "147040",
    "end": "154440"
  },
  {
    "text": "all of these different kinds of materials so in real life we found a solution for that and that solution was",
    "start": "154440",
    "end": "161360"
  },
  {
    "text": "containers so we basically put stuff in containers and then each container has a very specific size it's a standardized",
    "start": "161360",
    "end": "168159"
  },
  {
    "text": "size and the people that need to work with the cargo with the containers they don't need to worry about what is inside",
    "start": "168159",
    "end": "174280"
  },
  {
    "text": "of the container unless it's cocaine of course but um they just care care about",
    "start": "174280",
    "end": "180440"
  },
  {
    "text": "this is a container this is the size of the container and I can stack my containers I can put the containers on a",
    "start": "180440",
    "end": "185680"
  },
  {
    "text": "ship I can put them on a truck I can put them on a train it will all work because we have something standardized and in",
    "start": "185680",
    "end": "192120"
  },
  {
    "text": "software development we want to do the same thing basically we or you as developers um you build your software",
    "start": "192120",
    "end": "199200"
  },
  {
    "text": "you put your software into a container and the people that need to deploy the software and put it on the cloud or on",
    "start": "199200",
    "end": "205680"
  },
  {
    "text": "premise it doesn't really matter they don't really need to know about your software or the dependencies from your software they only need to know this is",
    "start": "205680",
    "end": "212439"
  },
  {
    "text": "the standardized container that you are using and we are going to deploy that in a standardized way and you as a",
    "start": "212439",
    "end": "218159"
  },
  {
    "text": "developer only need to worry about this is my software it needs to work and these are my dependencies and my",
    "start": "218159",
    "end": "223599"
  },
  {
    "text": "configuration and that also has to work deploying shouldn't be an issue now I",
    "start": "223599",
    "end": "228920"
  },
  {
    "text": "will show you a lot of examples today and this is not really me normally I would do like real life examples but in",
    "start": "228920",
    "end": "234760"
  },
  {
    "text": "this case unfortunately I only have these small demos to show you specific Concepts from from Azure container apps",
    "start": "234760",
    "end": "241120"
  },
  {
    "text": "so basically the container applications that I'm going to write today look a little bit more like this so it's very simple not Enterprise scale just a",
    "start": "241120",
    "end": "248480"
  },
  {
    "text": "couple of containers we'll link them together um and make something work for distributed uh applications now what am",
    "start": "248480",
    "end": "256639"
  },
  {
    "text": "I going to talk about Azure and containers now in Azure we have multiple different kinds of services already",
    "start": "256639",
    "end": "263280"
  },
  {
    "text": "available that can host our containers our standardized containers we have web apps we've been using web apps already",
    "start": "263280",
    "end": "269880"
  },
  {
    "text": "for years um and these web apps you know you can just deploy them from visual studio if you want you can deploy them",
    "start": "269880",
    "end": "276360"
  },
  {
    "text": "using a pipeline but you can also deploy them using a container image um web apps can perfectly fine work with a container",
    "start": "276360",
    "end": "283800"
  },
  {
    "text": "image and run that container for us it's the same with function apps again we can deploy function apps from Visual Studio",
    "start": "283800",
    "end": "289919"
  },
  {
    "text": "we can deploy them from a pipeline but we can also put our code inside of a container and run that container inside",
    "start": "289919",
    "end": "295840"
  },
  {
    "text": "of a function app then more specifically targeting targeting to only containers we have",
    "start": "295840",
    "end": "301680"
  },
  {
    "text": "container instances a very simple service you have one container you want to run that container very easily one",
    "start": "301680",
    "end": "307960"
  },
  {
    "text": "replica let's say it runs it is available you can use it very simple and then of course if I skip container apps",
    "start": "307960",
    "end": "314440"
  },
  {
    "text": "for now we have Azure kubernetes service which is a managed service that basically has kubernetes ready for us to",
    "start": "314440",
    "end": "321840"
  },
  {
    "text": "use and kubernetes is all this the other side of the of the room it's like you can do whatever you want there's so much",
    "start": "321840",
    "end": "328560"
  },
  {
    "text": "things you can do there's so much flexibility but of course we need to work with that we need to make sure that",
    "start": "328560",
    "end": "335759"
  },
  {
    "text": "our kubernetes cluster is up up to date we need to manage all the nodes we need to manage the virtual machines that lie",
    "start": "335759",
    "end": "341520"
  },
  {
    "text": "underneath so that's a lot of work and that's why I'm very happy that a couple of years ago uh Azure came out with the",
    "start": "341520",
    "end": "347639"
  },
  {
    "text": "Azure container apps service because with Azure container apps you have some of the power of azure kubernetes service",
    "start": "347639",
    "end": "354120"
  },
  {
    "text": "but it's it's abstracted away from us so we can focus on delivering our software",
    "start": "354120",
    "end": "360440"
  },
  {
    "text": "and not really worry about the infrastructure or not worry about the infrastructure too much we always need to worry a little bit about",
    "start": "360440",
    "end": "366960"
  },
  {
    "text": "infrastructure but of course not too much so today I'm going to spend most of my time on uh container apps now this",
    "start": "366960",
    "end": "374280"
  },
  {
    "text": "talk is not a kubernetes versus container apps those two are still",
    "start": "374280",
    "end": "379479"
  },
  {
    "text": "perfectly fine side by side but you don't need kubernetes for everything you can sometimes use container apps for",
    "start": "379479",
    "end": "387800"
  },
  {
    "text": "your applications that are a little bit more simple if you really want to do a crazy Enterprise uh um distributed",
    "start": "387800",
    "end": "394599"
  },
  {
    "text": "application and you need all of the flexibility and all of the little toys um to to figure out then you can still",
    "start": "394599",
    "end": "401199"
  },
  {
    "text": "use kubernetes but if your application is a little less complicated you can perfectly fine uh you you perfectly fine",
    "start": "401199",
    "end": "407599"
  },
  {
    "text": "uh can go with uh Azure container apps now what is azure container apps well",
    "start": "407599",
    "end": "413000"
  },
  {
    "text": "it's a service that makes you allows you to run your distributed uh applications",
    "start": "413000",
    "end": "418840"
  },
  {
    "text": "um or micros services for me it's the same thing distributed application multiple components that work together that communicate and make up the whole",
    "start": "418840",
    "end": "425520"
  },
  {
    "text": "of your distributed application in Azure container apps which is not something",
    "start": "425520",
    "end": "430680"
  },
  {
    "text": "that exists in kubernetes you can even go serverless you can basically tell Azure um aure container apps I'm going",
    "start": "430680",
    "end": "437199"
  },
  {
    "text": "to use the the serverless consumption model which I will show you in just a few minutes uh which means that you can",
    "start": "437199",
    "end": "442800"
  },
  {
    "text": "scale down to zero which means that if your application is not used you can scale down to zero and you're not using",
    "start": "442800",
    "end": "448759"
  },
  {
    "text": "any uh resources uh only when your application gets uh first time used for",
    "start": "448759",
    "end": "454199"
  },
  {
    "text": "example you can spin up one instance or multiple instances and actually really make use of this uh serverless offering",
    "start": "454199",
    "end": "462160"
  },
  {
    "text": "um it is also built on existing open- Source components components that we are also using in kubernetes for example",
    "start": "462160",
    "end": "469199"
  },
  {
    "text": "there's a couple of logos in the bottom um I didn't yet uh tell you specifically but Azure container apps is actually",
    "start": "469199",
    "end": "475280"
  },
  {
    "text": "built on top of kubernetes or Azure kubernetes service so it's a service it's a layer of abstraction on top of",
    "start": "475280",
    "end": "481319"
  },
  {
    "text": "azure kubernetes service and again we don't need to worry about that we are using Azure container apps and all the",
    "start": "481319",
    "end": "487599"
  },
  {
    "text": "managed kubernetes Services underneath are managed for us by the cloud platform Azure um some other of these open source",
    "start": "487599",
    "end": "495680"
  },
  {
    "text": "components are k for example K which is the um kubernetes event Driven Auto scaler again an extension you can use",
    "start": "495680",
    "end": "503080"
  },
  {
    "text": "within Azure kubernetes service it's by default it's available and installed in your Azure container apps so you can use",
    "start": "503080",
    "end": "509560"
  },
  {
    "text": "that for your Dynamic um scaling based on events uh then you can see Dapper um",
    "start": "509560",
    "end": "516039"
  },
  {
    "text": "the distributed application run time this is also something that again you can use in your applications you can use",
    "start": "516039",
    "end": "521680"
  },
  {
    "text": "them within Azure kubernetes service but again they are pre-installed um in your Azure um",
    "start": "521680",
    "end": "528440"
  },
  {
    "text": "container apps service so you can use them if you want you don't need to but you it it's there and it's very simple",
    "start": "528440",
    "end": "534839"
  },
  {
    "text": "for you uh to use that and then finally we have Envoy for your uh proxy and your load balancing um which is also",
    "start": "534839",
    "end": "541720"
  },
  {
    "text": "pre-installed in that service again for you to use um to again take away a lot",
    "start": "541720",
    "end": "548079"
  },
  {
    "text": "of that infrastructure infrastructure worry from you so now you can just use that out of the box um of course what",
    "start": "548079",
    "end": "556320"
  },
  {
    "text": "kind of applications can you build in container apps I just told you containers are a way to put our software",
    "start": "556320",
    "end": "561440"
  },
  {
    "text": "inside of a container and we can actually put everything inside of a container so you're you're very flexible",
    "start": "561440",
    "end": "566640"
  },
  {
    "text": "in what you want to run on container apps um doesn't really need to be net or C can",
    "start": "566640",
    "end": "573240"
  },
  {
    "text": "be whatever um whatever platform or whatever programming language you want to use you put it inside of a container",
    "start": "573240",
    "end": "578920"
  },
  {
    "text": "you can run it uh in Azure container apps um for example it can be web applications distributed application",
    "start": "578920",
    "end": "584640"
  },
  {
    "text": "microservices application background processing applications all different kinds of of of fun stuff now if you look",
    "start": "584640",
    "end": "591360"
  },
  {
    "text": "at kubernetes itself it's quite complicated in kubernetes uh when you want to uh configure your kubernetes",
    "start": "591360",
    "end": "596399"
  },
  {
    "text": "cluster you basically need to specify what your nodes are your nodes are virtual machines so you need to specify",
    "start": "596399",
    "end": "601880"
  },
  {
    "text": "the size of your virtual virtual machines are all of your nodes the same size do you have different size nodes uh",
    "start": "601880",
    "end": "607959"
  },
  {
    "text": "which is your worker note which which is your control Noe stuff like that um",
    "start": "607959",
    "end": "613360"
  },
  {
    "text": "again this isn't always you shouldn't always need to worry about that",
    "start": "613360",
    "end": "619480"
  },
  {
    "text": "sometimes you just want to keep things simple so in Azure container apps um we step away from that and we go to a much",
    "start": "619480",
    "end": "625680"
  },
  {
    "text": "more simple architecture so in this architecture for container apps we have different layers and I'm going to explain those layers to you and then I",
    "start": "625680",
    "end": "632079"
  },
  {
    "text": "will show you in the Azure portal so on the outside layer we have what is called the Azure container app environment and",
    "start": "632079",
    "end": "639720"
  },
  {
    "text": "this you can uh kind of compare it to a namespace in Azure kubernetes service um",
    "start": "639720",
    "end": "645160"
  },
  {
    "text": "so this is your environment and your environment is basically your virtual Network and within this virtual Network",
    "start": "645160",
    "end": "651000"
  },
  {
    "text": "you can have one or multiple applications that are able to talk to each other because they live in the same",
    "start": "651000",
    "end": "657120"
  },
  {
    "text": "environment they live in the same virtual Network So within that environment if you created an environment you can actually",
    "start": "657120",
    "end": "663680"
  },
  {
    "text": "create multiple of these container apps so you put all of your components from your distributed application or",
    "start": "663680",
    "end": "668720"
  },
  {
    "text": "microservice application into different container apps and you put them all in the same container environment so they",
    "start": "668720",
    "end": "674480"
  },
  {
    "text": "can talk to each other um so in the in the um level of container apps uh A and",
    "start": "674480",
    "end": "682120"
  },
  {
    "text": "B on on this slide you now have still have a couple of things you you can do um you have something that is called",
    "start": "682120",
    "end": "688600"
  },
  {
    "text": "revisions so when you deploy your application when you deploy your container image to a container app you",
    "start": "688600",
    "end": "695079"
  },
  {
    "text": "basically create your first revision and this runs your application within that revision now if you want to um deploy a",
    "start": "695079",
    "end": "702760"
  },
  {
    "text": "second version of your application you're basically or at least Azure container apps creates a second revision",
    "start": "702760",
    "end": "709600"
  },
  {
    "text": "and it will basically spin up this revision so it will spin up the containers and when the containers are running it will switch over from your",
    "start": "709600",
    "end": "716200"
  },
  {
    "text": "previous uh revision to your new revision and to make things a little bit more flexible you can even have multiple",
    "start": "716200",
    "end": "722839"
  },
  {
    "text": "revisions at the same time again I will show you in a couple of minutes but you can do something like AB testing you can",
    "start": "722839",
    "end": "728399"
  },
  {
    "text": "have most of your users running on revision one which is your current release for your software and you can",
    "start": "728399",
    "end": "734199"
  },
  {
    "text": "have some of your users get redirected to a second revision which contains the newer version and maybe there's still",
    "start": "734199",
    "end": "740560"
  },
  {
    "text": "some bugs in your newer version and you want to look at the uh at the logging and at at the Telemetry to see if",
    "start": "740560",
    "end": "746519"
  },
  {
    "text": "everything is fine and when you see a couple of bugs you can switch over again you can fix your bugs you can release a",
    "start": "746519",
    "end": "752000"
  },
  {
    "text": "new version and when everything is fine you can make the complete switch to your new revision which is very very cool um",
    "start": "752000",
    "end": "758279"
  },
  {
    "text": "and then inside of each revision we have the replica concept which we also have in Azure kubernetes service you can",
    "start": "758279",
    "end": "764279"
  },
  {
    "text": "basically horizontally scale each of your services the way you want um so if you have a web API for example and you",
    "start": "764279",
    "end": "770680"
  },
  {
    "text": "have a lot of requests coming in you can use the Keta autoscaler based on HTTP",
    "start": "770680",
    "end": "775800"
  },
  {
    "text": "request you can basically tell it please scale my application for from 0 to 100 for example so zero means no traffic uh",
    "start": "775800",
    "end": "783480"
  },
  {
    "text": "one when there's a little of little bit of traffic and this scales automatically based on the parallel requests that come",
    "start": "783480",
    "end": "789279"
  },
  {
    "text": "in up until the maximum that you specify for example uh 100 so these are the different layers within container apps",
    "start": "789279",
    "end": "796560"
  },
  {
    "text": "so if I go to the Azure portal um and I show you the Nam space",
    "start": "796560",
    "end": "803199"
  },
  {
    "text": "that I've prepared I've already deployed some of these container apps um so I'm going to",
    "start": "803199",
    "end": "808920"
  },
  {
    "text": "show show you the first one uh the first example API so this is just a regular",
    "start": "808920",
    "end": "814800"
  },
  {
    "text": "net uh API that is deployed as a single container app within a container app",
    "start": "814800",
    "end": "821120"
  },
  {
    "text": "environment now this container app has a couple of properties here it of course has its container so which container is",
    "start": "821120",
    "end": "827040"
  },
  {
    "text": "it running and inside of that container you have your environment variables your volume mounts and and and bindings you",
    "start": "827040",
    "end": "832839"
  },
  {
    "text": "can add to talk to other uh Azure Services um if you want so I did a I I",
    "start": "832839",
    "end": "838040"
  },
  {
    "text": "created one small environment VAR variable called version and this is version Alpha now because this is deployed I",
    "start": "838040",
    "end": "845519"
  },
  {
    "text": "also have in this specific case this application URL so this is the URL that gets automatically created for you and I",
    "start": "845519",
    "end": "852839"
  },
  {
    "text": "can go to the status endpoint which is the only one that exists for this specific example um and it just returns",
    "start": "852839",
    "end": "860079"
  },
  {
    "text": "in hello uh hello world based on the version the name please go",
    "start": "860079",
    "end": "865680"
  },
  {
    "text": "away or not um the name of the container and the current date and time so that's",
    "start": "865680",
    "end": "872040"
  },
  {
    "text": "a very stupid example here but you can also look at scale and in scale as I",
    "start": "872040",
    "end": "878320"
  },
  {
    "text": "told you you can specify your minimum amount of replicas and your maximum amount of replicas so this scales from 0",
    "start": "878320",
    "end": "883759"
  },
  {
    "text": "to 10 so if there's no requests coming in for a period of time it will scale down to zero this is using the",
    "start": "883759",
    "end": "889680"
  },
  {
    "text": "consumption workload which means I'm using the serverless um offering for Azure container apps and I don't have to",
    "start": "889680",
    "end": "895720"
  },
  {
    "text": "pay um for that when a request comes in will will basically wake up one of the replicas um and if more requests come in",
    "start": "895720",
    "end": "903759"
  },
  {
    "text": "or a lot of requests come in it will scale up dynamically based on the amount of parallel requests so there's a scale",
    "start": "903759",
    "end": "909240"
  },
  {
    "text": "rule in the bottom so you can add scale rules if you want to customize those specific uh scaling rules you can",
    "start": "909240",
    "end": "915600"
  },
  {
    "text": "customize of course on uh on HTTP requests that come in but you can also scale on messages that you have on a",
    "start": "915600",
    "end": "921320"
  },
  {
    "text": "queue or every basically everything you want because you can also create plugins um to do custom scaling for example if",
    "start": "921320",
    "end": "928199"
  },
  {
    "text": "you have an actor based framework like Orleans or AKA you can basically also scale on number of actors within your",
    "start": "928199",
    "end": "934040"
  },
  {
    "text": "system if that is necessary to you um then we have the revisions and",
    "start": "934040",
    "end": "939440"
  },
  {
    "text": "replicas um so here now I have my deployed uh container app I'm in single",
    "start": "939440",
    "end": "945399"
  },
  {
    "text": "revision mode which you can see here um which means that when I deploy a new",
    "start": "945399",
    "end": "951519"
  },
  {
    "text": "version of my application it basically gets spun up and when it's running it will switch over from the old revision",
    "start": "951519",
    "end": "957639"
  },
  {
    "text": "to the new revision so I only have one revision active um I will show you multiple uh revisions in in just a",
    "start": "957639",
    "end": "964279"
  },
  {
    "text": "moment so basically I've created two um two container apps the API and the",
    "start": "964279",
    "end": "970399"
  },
  {
    "text": "worker so the API just has the status endpoint and the worker is a background",
    "start": "970399",
    "end": "975720"
  },
  {
    "text": "worker and the background worker is going to call into the API and that's actually very easy um they live in the",
    "start": "975720",
    "end": "983160"
  },
  {
    "text": "same container app environment so the same virtual Network so they can find each other um I have an additional um uh",
    "start": "983160",
    "end": "991600"
  },
  {
    "text": "environment variable here status endpoint which has the fully qualified domain name for my API Azure container",
    "start": "991600",
    "end": "999319"
  },
  {
    "text": "app and if I look at the output the Lo stream for this container I can see that",
    "start": "999319",
    "end": "1006160"
  },
  {
    "text": "it's actually every second calling that status endpoint and returning that message and showing that message in the",
    "start": "1006160",
    "end": "1011680"
  },
  {
    "text": "console so again very stupid application but it shows you that now I have two container apps talking to each other",
    "start": "1011680",
    "end": "1017240"
  },
  {
    "text": "very very simple um the code for this isn't very complicated this is my API",
    "start": "1017240",
    "end": "1023880"
  },
  {
    "text": "only has one status endpoint this is my worker service and it's using an HTTP",
    "start": "1023880",
    "end": "1029199"
  },
  {
    "text": "client um to get a string from that HTTP endpoint defined by that environment",
    "start": "1029199",
    "end": "1035160"
  },
  {
    "text": "variable again very very simple um you don't have to specify um the",
    "start": "1035160",
    "end": "1042319"
  },
  {
    "text": "fully qualified domain name so if I go back to containers and environment variables um in this case this is the",
    "start": "1042319",
    "end": "1048360"
  },
  {
    "text": "fully qu domain name you can also just use the name of your container app so if I go back uh if I go to the second",
    "start": "1048360",
    "end": "1057120"
  },
  {
    "text": "example and the environment variables here you can also do HTTP and then just the name of your container app because",
    "start": "1057880",
    "end": "1063360"
  },
  {
    "text": "they live in the same container environment their name is automatically um known uh within the DNS within your",
    "start": "1063360",
    "end": "1069360"
  },
  {
    "text": "virtual Network so you can connect uh that way but only HTTP so this is very simple",
    "start": "1069360",
    "end": "1079880"
  },
  {
    "text": "I can show you the how the scaling works so I have a a third",
    "start": "1080520",
    "end": "1086679"
  },
  {
    "text": "example again my API um is now scaled to three instances always so the minimum is",
    "start": "1086679",
    "end": "1093000"
  },
  {
    "text": "three the maximum is three um so basically I always want three replicas of the same application running and if",
    "start": "1093000",
    "end": "1099320"
  },
  {
    "text": "you hit that end point um the load balancing is done for you automatically so it's just a round robbing or a random",
    "start": "1099320",
    "end": "1106400"
  },
  {
    "text": "load balancing there um so every time you hit the endpoint you will hit one of those three um replicas now if we again",
    "start": "1106400",
    "end": "1114880"
  },
  {
    "text": "do the same thing we use the url url go to the status",
    "start": "1114880",
    "end": "1120200"
  },
  {
    "text": "endpoint you will you should see the uh name of the container um changing with",
    "start": "1120200",
    "end": "1127039"
  },
  {
    "text": "every refresh so the the the end 8m will change every time I do a request so it's",
    "start": "1127039",
    "end": "1134400"
  },
  {
    "text": "random so it should be 33.33% in all cases when you you do this an infinite amount of",
    "start": "1134400",
    "end": "1142200"
  },
  {
    "text": "times so if you want to change that you just um go to scale change the numbers",
    "start": "1142679",
    "end": "1148440"
  },
  {
    "text": "and save into a new revision and Azure container apps will automatically create a new revision for you when that's up it",
    "start": "1148440",
    "end": "1153600"
  },
  {
    "text": "will switch over from the old revision uh and now your application is scaled the way you want of course as I said",
    "start": "1153600",
    "end": "1159120"
  },
  {
    "text": "before if you change those numbers from zero to whatever or from five to whatever the scaling is done",
    "start": "1159120",
    "end": "1164880"
  },
  {
    "text": "automatically for you based on your scaling rules um in the B botom now for um revisions and replicas",
    "start": "1164880",
    "end": "1173320"
  },
  {
    "text": "if you choose your revision mode and change your revision mode to multiple you can have multiple revisions running",
    "start": "1173320",
    "end": "1179039"
  },
  {
    "text": "at the same time so I did that for the fourth",
    "start": "1179039",
    "end": "1183880"
  },
  {
    "text": "example and in this case I deployed my container app Twice first with the um",
    "start": "1187120",
    "end": "1194360"
  },
  {
    "text": "version Alpha and the second one with the version beta which is that environment variable so if you go to",
    "start": "1194360",
    "end": "1200840"
  },
  {
    "text": "Containers you can actually change your revision here so based on revision my one revision and my other revision if",
    "start": "1200840",
    "end": "1207679"
  },
  {
    "text": "you look at the environment variables this is Alpha and the other one is beta so right now I have two active",
    "start": "1207679",
    "end": "1215039"
  },
  {
    "text": "revisions for your scale of course you can change the scale for each revision",
    "start": "1215039",
    "end": "1220320"
  },
  {
    "text": "uh independently and if you go to revisions itself you can change the traffic split",
    "start": "1220320",
    "end": "1226840"
  },
  {
    "text": "between your revisions so you can do 50 50 or you can do 595 if you really want to test your newer version for only a",
    "start": "1226840",
    "end": "1233840"
  },
  {
    "text": "select amount of people uh you put that on one or 5% or 10% or whatever you",
    "start": "1233840",
    "end": "1239240"
  },
  {
    "text": "think is appropriate um and then you can increase that number if everything keeps going fine up until you reach 100 and",
    "start": "1239240",
    "end": "1246440"
  },
  {
    "text": "then you can basically um scrap the um older revisions revisions are not scrapped if you look at inactive",
    "start": "1246440",
    "end": "1252840"
  },
  {
    "text": "revisions it will basically keep track of all of your older revisions so if you really screw up you can always go back",
    "start": "1252840",
    "end": "1258960"
  },
  {
    "text": "to an older revision uh and deploy that again as your active um revision um if",
    "start": "1258960",
    "end": "1264200"
  },
  {
    "text": "that is necessary um again when you create this",
    "start": "1264200",
    "end": "1269520"
  },
  {
    "text": "in uh the portal I'm I'm showing you in the portal because this is very visual I think this is very easy to comprehend",
    "start": "1269520",
    "end": "1275360"
  },
  {
    "text": "but of course when you're creating Enterprise applications you want you don't want to do this in the portal you can do everything that I'm showing you",
    "start": "1275360",
    "end": "1281720"
  },
  {
    "text": "from the Azure CLI or by using arm templates or bicep templates to basically deploy automatically um of",
    "start": "1281720",
    "end": "1288240"
  },
  {
    "text": "course that is the way you want to do it but all of this is also available of course um in these CLI and",
    "start": "1288240",
    "end": "1296039"
  },
  {
    "text": "templates um one thing that I haven't shown you is if you look at the container environment",
    "start": "1296480",
    "end": "1302480"
  },
  {
    "text": "itself so this one this is the uh container environment um it also has a",
    "start": "1302480",
    "end": "1308200"
  },
  {
    "text": "list of all the applications that are running within this the same environment all the container applications that are",
    "start": "1308200",
    "end": "1313520"
  },
  {
    "text": "running here but you also have a concept of workload profiles so when you create",
    "start": "1313520",
    "end": "1318679"
  },
  {
    "text": "your um container environment it will ask you do you want to use consumption workload or do you want to use custom",
    "start": "1318679",
    "end": "1324960"
  },
  {
    "text": "workloads uh and here if you here you basically get the flexibility of maybe",
    "start": "1324960",
    "end": "1330440"
  },
  {
    "text": "not always to go for the the consumption based model the consumption based model means you can scale down to zero it's a",
    "start": "1330440",
    "end": "1337360"
  },
  {
    "text": "serverless offering um you can very easily specify how much uh CPU and how",
    "start": "1337360",
    "end": "1343400"
  },
  {
    "text": "much memory you need for for specific um replicas um but you can add multiple",
    "start": "1343400",
    "end": "1349559"
  },
  {
    "text": "custom workload profiles by choosing a size of a virtual machine so you have",
    "start": "1349559",
    "end": "1355480"
  },
  {
    "text": "very specific uh machines that you can actually use as nodes and then we are getting closer to kubernetes again maybe",
    "start": "1355480",
    "end": "1361200"
  },
  {
    "text": "you want your application is business critical or some components in your application are business critical so you",
    "start": "1361200",
    "end": "1366600"
  },
  {
    "text": "want them to run always and you want them to run in a very specific way then you can add a workload to your profiles",
    "start": "1366600",
    "end": "1373640"
  },
  {
    "text": "very specific workload these are all um CPU based uh workloads but you can also",
    "start": "1373640",
    "end": "1379440"
  },
  {
    "text": "have um GPU based workloads if you want you can add them you can configure them",
    "start": "1379440",
    "end": "1384640"
  },
  {
    "text": "um so I can select uh whichever and you can also Define your auto scaling for",
    "start": "1384640",
    "end": "1390080"
  },
  {
    "text": "your node sizes so I have this this size of node I want at minimum three and at",
    "start": "1390080",
    "end": "1395360"
  },
  {
    "text": "maximum for example five uh and this will then be scaled for you in the background uh based on how many",
    "start": "1395360",
    "end": "1401240"
  },
  {
    "text": "resources your replicas are actually using um so if you add a profile like",
    "start": "1401240",
    "end": "1407000"
  },
  {
    "text": "this which is the name here um and you create or deploy a new container app so",
    "start": "1407000",
    "end": "1414640"
  },
  {
    "text": "if I go here and I do create container",
    "start": "1414640",
    "end": "1421320"
  },
  {
    "text": "app you basically select your container app environment and then in a later step",
    "start": "1429080",
    "end": "1434400"
  },
  {
    "text": "you select on which uh workload you want to run this you can again choose the consumption because that's available in",
    "start": "1434400",
    "end": "1440640"
  },
  {
    "text": "your environment or you can use one of those custom profiles that you created and some of your applications or",
    "start": "1440640",
    "end": "1445760"
  },
  {
    "text": "container apps can run on one workload other of your container apps within the same environment can run on a different",
    "start": "1445760",
    "end": "1451039"
  },
  {
    "text": "kind of workload so now you have the flexibility for different kinds of application to use different kinds of workloads basically if you have a lot of",
    "start": "1451039",
    "end": "1457600"
  },
  {
    "text": "CPU processing uh Power necessary for one specific service you use a a very",
    "start": "1457600",
    "end": "1462760"
  },
  {
    "text": "high CPU based virtual machine as a node or workload in this case um if you have",
    "start": "1462760",
    "end": "1467880"
  },
  {
    "text": "something different like memory needs or GPU needs you can specify that",
    "start": "1467880",
    "end": "1474120"
  },
  {
    "text": "also now container apps are cool they are flexible we have a lot of uh a lot",
    "start": "1474240",
    "end": "1481760"
  },
  {
    "text": "of the functionality abstracted away from us and we can very easily make that work which is something that I think um",
    "start": "1481760",
    "end": "1488320"
  },
  {
    "text": "is the case and of course we have the added benefits of all the open source components that are installed there so I",
    "start": "1488320",
    "end": "1494080"
  },
  {
    "text": "also want to show you some of these other things um this is not an Aspire talk but I want to show you net Aspire",
    "start": "1494080",
    "end": "1500880"
  },
  {
    "text": "um as part of azure container apps so a net Aspire specifically for net of course is a distributed application",
    "start": "1500880",
    "end": "1507039"
  },
  {
    "text": "orchestrator so if you want to very easily create distributed applications and you want to um deploy them to the",
    "start": "1507039",
    "end": "1514000"
  },
  {
    "text": "cloud but you also want to run them locally in a very easy way net Aspire can really help you um it basically",
    "start": "1514000",
    "end": "1521480"
  },
  {
    "text": "allows you to create an application composition and does automatic service Discovery so you don't need to configure",
    "start": "1521480",
    "end": "1527960"
  },
  {
    "text": "where all all of your application components live it will do that a little bit for you automatically and it also",
    "start": "1527960",
    "end": "1533480"
  },
  {
    "text": "supports components to talk to external Services um so if you want to talk to external uh services like a cache or or",
    "start": "1533480",
    "end": "1540880"
  },
  {
    "text": "a data store you can actually have use components for that to make your life a little bit easier and again to focus on",
    "start": "1540880",
    "end": "1546960"
  },
  {
    "text": "development and not so much on infrastructure or configuration for that infrastructure there is tooling support",
    "start": "1546960",
    "end": "1552640"
  },
  {
    "text": "for visual studio and the Azure CLI um so let me just show you um what that",
    "start": "1552640",
    "end": "1558039"
  },
  {
    "text": "looks like so this is the default Aspire demo um because I don't want to go too",
    "start": "1558039",
    "end": "1563399"
  },
  {
    "text": "deep into Aspire but basically I've created the same kind of thing there's an API service and there's a web",
    "start": "1563399",
    "end": "1568720"
  },
  {
    "text": "application so the API service has an endpoint that we can call to get uh weather data which is the default",
    "start": "1568720",
    "end": "1575159"
  },
  {
    "text": "template for visual studio and we have a Blazer web application that gets that weather data from uh from um from its",
    "start": "1575159",
    "end": "1582679"
  },
  {
    "text": "front end using that API now if you use Aspire you can create a new asp project",
    "start": "1582679",
    "end": "1589000"
  },
  {
    "text": "and it will it will do all of this automatically for you but you can also convert your current applications into",
    "start": "1589000",
    "end": "1594440"
  },
  {
    "text": "the Aspire model by adding aspire to existing Solutions which also works and",
    "start": "1594440",
    "end": "1599640"
  },
  {
    "text": "what it does it creates a separate project called the apphost and the apphost is actually the project that",
    "start": "1599640",
    "end": "1605760"
  },
  {
    "text": "gets run and ties all of your services together does the service Discovery for you um and it will do that just by",
    "start": "1605760",
    "end": "1613919"
  },
  {
    "text": "writing some C so you don't need to know about yaml or any other um weird configuration languages you just write a",
    "start": "1613919",
    "end": "1620279"
  },
  {
    "text": "little bit of C that basically tells you that you have a distributed application you're going to build a distributed",
    "start": "1620279",
    "end": "1626360"
  },
  {
    "text": "application um and you're going to add to that um distributed application builder for example a redish cache this",
    "start": "1626360",
    "end": "1633240"
  },
  {
    "text": "is an external service I didn't create the cache myself I'm going to use the external redis cache so I'm going to add",
    "start": "1633240",
    "end": "1639200"
  },
  {
    "text": "this to my distributed application and the name for this cache is called cache whatever um then I have a project within",
    "start": "1639200",
    "end": "1647200"
  },
  {
    "text": "my current solution and this uses uh a little bit of code generation so basically when you compile Your solution",
    "start": "1647200",
    "end": "1652799"
  },
  {
    "text": "it generates a little bit of code using Source generators so that you can easily uh configure which uh projects need to",
    "start": "1652799",
    "end": "1659520"
  },
  {
    "text": "tie together so I have an API service project which has this project name Aspire example API service which is this",
    "start": "1659520",
    "end": "1667519"
  },
  {
    "text": "one top one and I'm going to add that as a project then I also adding I'm also",
    "start": "1667519",
    "end": "1674159"
  },
  {
    "text": "adding the web front end project which is that this Blazer web application here um also adding it but I'm adding it",
    "start": "1674159",
    "end": "1681120"
  },
  {
    "text": "adding it with some external HTTP endpoints which means it's going to call external HTTP endpoints with a reference",
    "start": "1681120",
    "end": "1687880"
  },
  {
    "text": "to our uh redish cache and with a reference to our API service and now we just told it we have dependencies our",
    "start": "1687880",
    "end": "1694679"
  },
  {
    "text": "web application has a dependency for the ready scash it has a dependency for our API service and the service Discovery",
    "start": "1694679",
    "end": "1701200"
  },
  {
    "text": "will be done automatically I don't need to worry about domain names or IP or Port names it will all do that for me",
    "start": "1701200",
    "end": "1708320"
  },
  {
    "text": "automatically now if you run this um apphost application it will run all of the",
    "start": "1708320",
    "end": "1715519"
  },
  {
    "text": "components separately and as a added bonus you get a little um dashboard with",
    "start": "1715519",
    "end": "1722200"
  },
  {
    "text": "that so I think this is very powerful for local development so if you are if",
    "start": "1722200",
    "end": "1728399"
  },
  {
    "text": "you working in a team or multiple teams that and you're working on a distributed application and you're using Aspire you",
    "start": "1728399",
    "end": "1734960"
  },
  {
    "text": "basically make it very easy for your new Developers for example to get their environment up and running very quickly",
    "start": "1734960",
    "end": "1740720"
  },
  {
    "text": "because you have for example one solution some of the projects are within that solution and you can just just run",
    "start": "1740720",
    "end": "1745799"
  },
  {
    "text": "them locally other projects are external dependencies like redis cache or even",
    "start": "1745799",
    "end": "1751360"
  },
  {
    "text": "external applications within your same um uh company but you can also pull them",
    "start": "1751360",
    "end": "1756600"
  },
  {
    "text": "in by using their container images so in this case the cache is a container image",
    "start": "1756600",
    "end": "1762519"
  },
  {
    "text": "that's being pulled automatically by Aspire so it will pull it from the registry and it will run that using in",
    "start": "1762519",
    "end": "1767799"
  },
  {
    "text": "my case Docker desktop um then we have the API service and the web front end which are both locally run projects um",
    "start": "1767799",
    "end": "1775159"
  },
  {
    "text": "you can see all of the end points that are configured for you you can click those links to visit um whatever service",
    "start": "1775159",
    "end": "1781840"
  },
  {
    "text": "is behind there this is the Blazer application and if I click weather this weather data will be fetched from the",
    "start": "1781840",
    "end": "1788720"
  },
  {
    "text": "API now if I keep refreshing this you can see it changes now it stays the same for 5 seconds or 10 seconds whatever and",
    "start": "1788720",
    "end": "1796399"
  },
  {
    "text": "then it changes again so this is using that redish cache now when doing this",
    "start": "1796399",
    "end": "1801919"
  },
  {
    "text": "you can use the dashboard for console output for each of your projects so like what is my API service um console log",
    "start": "1801919",
    "end": "1808760"
  },
  {
    "text": "what is my caches uh console loog uh you also have uh traces so you can see",
    "start": "1808760",
    "end": "1815440"
  },
  {
    "text": "whenever I refreshed the uh uh uh page the the weather page you can see what",
    "start": "1815440",
    "end": "1820840"
  },
  {
    "text": "actually happens and if I scroll back a little bit here for example you have a trace that actually shows you that I'm",
    "start": "1820840",
    "end": "1827399"
  },
  {
    "text": "doing a get on the weather page in my blazer application um then it goes to",
    "start": "1827399",
    "end": "1832679"
  },
  {
    "text": "the cache the the redis um cache it doesn't have the information in the",
    "start": "1832679",
    "end": "1837760"
  },
  {
    "text": "cache yet so then it does a get to the API service it and it stores the result",
    "start": "1837760",
    "end": "1842880"
  },
  {
    "text": "from that API service in the Rish cash so now you can see nicely um what",
    "start": "1842880",
    "end": "1848200"
  },
  {
    "text": "component is talking to what component when and how much time um it takes uh very cool now of course my again my",
    "start": "1848200",
    "end": "1856840"
  },
  {
    "text": "perspective on this is is that Aspire is great for for local development so if you if you want to very quickly load up",
    "start": "1856840",
    "end": "1863320"
  },
  {
    "text": "all of the components that you need in order to test something um this is very powerful but you can also deploy this to",
    "start": "1863320",
    "end": "1870159"
  },
  {
    "text": "Azure container apps if you want and it's actually quite easy um you can do something like uh let's",
    "start": "1870159",
    "end": "1877720"
  },
  {
    "text": "see if I go to my example five which is",
    "start": "1877720",
    "end": "1883240"
  },
  {
    "text": "my Aspire example again it's on uh it's on GitHub you can use the new a which is",
    "start": "1883240",
    "end": "1889960"
  },
  {
    "text": "the Azure developer CLI so it's not the Azure CLI it's the Azure developer C CLI",
    "start": "1889960",
    "end": "1895360"
  },
  {
    "text": "and this can actually help you to um work with Aspire and deploy your aspire applications to the cloud so I can do",
    "start": "1895360",
    "end": "1901679"
  },
  {
    "text": "something like a in it and this will initialize your current project or",
    "start": "1901679",
    "end": "1907360"
  },
  {
    "text": "solution um as an an a Deployable Aspire application so it will ask me do you",
    "start": "1907360",
    "end": "1914320"
  },
  {
    "text": "want to select a template of different kinds of things that I can deploy or do you want to um automatically look at",
    "start": "1914320",
    "end": "1920320"
  },
  {
    "text": "your code and and specify that way what you are using so I'm going to say use the code in the current directory it's",
    "start": "1920320",
    "end": "1926120"
  },
  {
    "text": "going to scan that code and it's smart enough to see that this is going to be an Aspire application",
    "start": "1926120",
    "end": "1932320"
  },
  {
    "text": "um smart enough I said a little",
    "start": "1932320",
    "end": "1936638"
  },
  {
    "text": "slow let's give it some more time",
    "start": "1938679",
    "end": "1943518"
  },
  {
    "text": "there we go so it says detected services. net Aspire and then it says it will generate the files necessary to",
    "start": "1949080",
    "end": "1955399"
  },
  {
    "text": "host your application on Azure so I can confirm and continue to initialize my",
    "start": "1955399",
    "end": "1960840"
  },
  {
    "text": "app um it also asks for an environment name so if I want to deploy to Azure I'm going to specify an environment",
    "start": "1960840",
    "end": "1967440"
  },
  {
    "text": "environment name so it will basically create new resources based on this environment name so I don't know what",
    "start": "1967440",
    "end": "1973399"
  },
  {
    "text": "what what I don't know what what I already have on my Azure so let's take something like that and now it generates",
    "start": "1973399",
    "end": "1979240"
  },
  {
    "text": "some files that basically describe I'm I'm I want to deploy an Azure uh um sorry a net Aspire application to Azure",
    "start": "1979240",
    "end": "1987080"
  },
  {
    "text": "um it creates some metadata and then it tells me you can do something like azd",
    "start": "1987080",
    "end": "1992320"
  },
  {
    "text": "up um to basically create all of those resources so again it goes to analyze",
    "start": "1992320",
    "end": "1998760"
  },
  {
    "text": "and what actually happens is it will create all of the bicep templates bicep scripts to do the actual deployment so",
    "start": "1998760",
    "end": "2005679"
  },
  {
    "text": "that's also easy for you as a developer you can actually um use those biceps and you can uh change those biceps to to",
    "start": "2005679",
    "end": "2012399"
  },
  {
    "text": "help you to basically deploy your application to Azure but it can also do that automatically for you um so in my",
    "start": "2012399",
    "end": "2018399"
  },
  {
    "text": "case I'm uh it it asks me which of my Azure sub subscriptions are you do you",
    "start": "2018399",
    "end": "2023799"
  },
  {
    "text": "want to use I'm going to pick the first one it asks me what region do I want to deploy to so West Europe for example and",
    "start": "2023799",
    "end": "2031519"
  },
  {
    "text": "then it starts creating those bicep by default it only does that in memory uh so it creates those biceps in memory it",
    "start": "2031519",
    "end": "2037919"
  },
  {
    "text": "will use them and it will basically discard them afterwards but you have some optional parameters you can use um",
    "start": "2037919",
    "end": "2044200"
  },
  {
    "text": "to basically store those bicep templates as part of your project and then you can reuse and change them uh afterwards if",
    "start": "2044200",
    "end": "2050760"
  },
  {
    "text": "that is necessary now it gets gives me an error I'm not going to look into that",
    "start": "2050760",
    "end": "2055919"
  },
  {
    "text": "but I already deployed it uh beforehand so let's see if I go to",
    "start": "2055919",
    "end": "2063919"
  },
  {
    "text": "Resource groups this one is the one that I already uh prepared beforehand so it",
    "start": "2063919",
    "end": "2070280"
  },
  {
    "text": "created for me a container app environment it created my API service and my redis cache and my web front end",
    "start": "2070280",
    "end": "2077960"
  },
  {
    "text": "then some log analytics a managed identity and a container registry so all",
    "start": "2077960",
    "end": "2083240"
  },
  {
    "text": "of these are the components you basically need to create your container images put your container images on the",
    "start": "2083240",
    "end": "2088638"
  },
  {
    "text": "registry create those Azure container apps they will pull those images from that registry they will spin them up um",
    "start": "2088639",
    "end": "2095320"
  },
  {
    "text": "and all of the configuration with that is done by net Aspire again service Discovery and the cool thing about uh",
    "start": "2095320",
    "end": "2102800"
  },
  {
    "text": "this is that you can also use the net Aspire dashboard live on Azure so this",
    "start": "2102800",
    "end": "2109320"
  },
  {
    "text": "one is now hosted on Azure it automatically sees again all of your uh resources now they are not project",
    "start": "2109320",
    "end": "2114920"
  },
  {
    "text": "resources but they they are all containers they are container apps um and all of the information uh in the",
    "start": "2114920",
    "end": "2121320"
  },
  {
    "text": "structured and console uh layouts and the traces and the metrics they are all",
    "start": "2121320",
    "end": "2126359"
  },
  {
    "text": "um fetched from your loog analytics workspace um so the information is stored in the loog analytics workspace",
    "start": "2126359",
    "end": "2132359"
  },
  {
    "text": "and the dashboard basically shows them to you um right here so this is um what",
    "start": "2132359",
    "end": "2137720"
  },
  {
    "text": "uh Aspire can can help you with and again very easy to deploy that to um Azure container apps would I do",
    "start": "2137720",
    "end": "2145520"
  },
  {
    "text": "this um for demos yes for little things that I'm playing around with yes uh for",
    "start": "2145520",
    "end": "2150800"
  },
  {
    "text": "Enterprise applications probably not I will probably still write my own uh bicep scripts and use pipelines to do",
    "start": "2150800",
    "end": "2157359"
  },
  {
    "text": "the deployment for me um but again it's a it's a nice way to start it's a nice way to learn about it it's a nice way to",
    "start": "2157359",
    "end": "2163760"
  },
  {
    "text": "deploy uh your smaller applications um actually I'm not going to talk more about Aspire there's a talk tomorrow on",
    "start": "2163760",
    "end": "2170520"
  },
  {
    "text": "Aspire um specifically on Aspire and Azure container app so if you want more information about that I would suggest",
    "start": "2170520",
    "end": "2177000"
  },
  {
    "text": "you to look at that one um the final thing I want to talk about is Dapper um",
    "start": "2177000",
    "end": "2182160"
  },
  {
    "text": "I told you that Azure container apps is built on top of a couple of Open Source components and Dapper is is one of them",
    "start": "2182160",
    "end": "2189599"
  },
  {
    "text": "so what is Dapper um Dapper is the distributed application runtime which actually means um you can use that to",
    "start": "2189599",
    "end": "2197880"
  },
  {
    "text": "more easily create microservices or distributed applications again and you can use any language of or framework now",
    "start": "2197880",
    "end": "2205160"
  },
  {
    "text": "again what does that mean basically when you create your application components or your microservices they need to",
    "start": "2205160",
    "end": "2211440"
  },
  {
    "text": "communicate with each other and there's a lot of things that can go wrong um it's easy when you have net Services",
    "start": "2211440",
    "end": "2217160"
  },
  {
    "text": "talking to to other net services but maybe within your company or with your exter external dependencies that you",
    "start": "2217160",
    "end": "2222920"
  },
  {
    "text": "have you need to talk to uh other platforms you need to talk from an net",
    "start": "2222920",
    "end": "2227960"
  },
  {
    "text": "application to a Java application um or some something you don't even know um",
    "start": "2227960",
    "end": "2233240"
  },
  {
    "text": "that will make it a little bit harder and what deer tries to do is it tries to abstract away all of that you basically",
    "start": "2233240",
    "end": "2239839"
  },
  {
    "text": "focus on your application and when you need to communicate with an external service or with another uh service",
    "start": "2239839",
    "end": "2245560"
  },
  {
    "text": "within your microservices uh application you use depper and Dapper will do that for you the benefit of this is again you",
    "start": "2245560",
    "end": "2253240"
  },
  {
    "text": "don't you also don't have to worry about things like resiliency for example uh resiliency when something goes wrong in",
    "start": "2253240",
    "end": "2259319"
  },
  {
    "text": "your network communication what do you do are you going to retry are you going to drop it what are you going to do",
    "start": "2259319",
    "end": "2265040"
  },
  {
    "text": "again deer can solve these issues for you by just doing a little bit of uh configuration uh I stated it before you",
    "start": "2265040",
    "end": "2273160"
  },
  {
    "text": "focus on your application code on your logic and depper will basically focus on",
    "start": "2273160",
    "end": "2278800"
  },
  {
    "text": "how to tie everything together how to do uh inter service communication uh and",
    "start": "2278800",
    "end": "2284079"
  },
  {
    "text": "outer ser and communication with external dependencies and services uh just like Aspire Dapper also",
    "start": "2284079",
    "end": "2291520"
  },
  {
    "text": "has the concept of components so you can use uh read readily available components to talk to Ser well-known Services if",
    "start": "2291520",
    "end": "2298160"
  },
  {
    "text": "you again if you want to talk to Red cache there's a component for that in Deer and you can use that to talk to a",
    "start": "2298160",
    "end": "2303599"
  },
  {
    "text": "Red's uh cache the architecture uh for deer is very uh cool uh when you use it",
    "start": "2303599",
    "end": "2309560"
  },
  {
    "text": "in Azure container apps for example each container app as I showed you contains",
    "start": "2309560",
    "end": "2315160"
  },
  {
    "text": "your container that is running but for depper it will actually run a second container next to your container so you",
    "start": "2315160",
    "end": "2321200"
  },
  {
    "text": "now have two containers running running in one single container app which is something you can also do yourself but",
    "start": "2321200",
    "end": "2326720"
  },
  {
    "text": "deer does this also uh and in Deer we call this a sidecar container um now",
    "start": "2326720",
    "end": "2332599"
  },
  {
    "text": "when you want to do something with the rest of your application you want to call into another service for examp example service on the left hand side",
    "start": "2332599",
    "end": "2339160"
  },
  {
    "text": "wants to talk to the service on the right hand side you're not going to directly talk to the service but you're going to talk to the deer side car and",
    "start": "2339160",
    "end": "2346160"
  },
  {
    "text": "then the deer side car is going to talk to the deer side car from the other service and then that one is going to",
    "start": "2346160",
    "end": "2351720"
  },
  {
    "text": "talk to the service itself so you of course you have a little bit of a a detour there but uh the added benefit is",
    "start": "2351720",
    "end": "2357960"
  },
  {
    "text": "you don't need to worry about the communication itself Dapper will do that for you you don't need to worry about resiliency depper will do that for you",
    "start": "2357960",
    "end": "2364800"
  },
  {
    "text": "depper will do the retries for you based on your configuration and inside of your code you're just doing an HTTP request",
    "start": "2364800",
    "end": "2372240"
  },
  {
    "text": "um and when something goes wrong it's out of your uh uh responsibility um so",
    "start": "2372240",
    "end": "2377400"
  },
  {
    "text": "Dapper will will fix that for you uh and again you can also call to an external service using a component within Dapper",
    "start": "2377400",
    "end": "2384240"
  },
  {
    "text": "to be able to do that now you can also see the arrow between the Dapper side car and your own Services uh basically",
    "start": "2384240",
    "end": "2391400"
  },
  {
    "text": "you have two options to do communication between those two you can directly call into the Dapper http points by just",
    "start": "2391400",
    "end": "2398520"
  },
  {
    "text": "using your HTTP clients um that is one option but deer also has sdks that they",
    "start": "2398520",
    "end": "2404040"
  },
  {
    "text": "provide as packages for whatever platform you're working on so for net specifically there's a nougat package",
    "start": "2404040",
    "end": "2409280"
  },
  {
    "text": "that contains all the functionality for depper so you can use that nougat package to talk to your side car and",
    "start": "2409280",
    "end": "2414599"
  },
  {
    "text": "then talk to another service um afterwards so the daer components that you can use to talk to uh your own",
    "start": "2414599",
    "end": "2421119"
  },
  {
    "text": "services or external services are basically split up in different kinds of uh components we have the uh input and",
    "start": "2421119",
    "end": "2428119"
  },
  {
    "text": "output bindings basically to uh specify how your incoming and outgoing communication is going to be handled you",
    "start": "2428119",
    "end": "2434560"
  },
  {
    "text": "have something called State stores for storing data for storing cache for retrieving data retrieving cache there's",
    "start": "2434560",
    "end": "2440960"
  },
  {
    "text": "also secret stores for configuration secrets for example if you want to talk to Azure key Vault you can do that from",
    "start": "2440960",
    "end": "2446720"
  },
  {
    "text": "depper using a secret uh store component uh there's configuration stores for",
    "start": "2446720",
    "end": "2452000"
  },
  {
    "text": "other kinds of conf configuration there's pup up uh if you want to do qes or P publish subscribe um kind of",
    "start": "2452000",
    "end": "2459160"
  },
  {
    "text": "scenarios and there's middlewares if you want to tweak uh whatever is going on within the pipeline uh for for your",
    "start": "2459160",
    "end": "2465800"
  },
  {
    "text": "communication uh with Dapper so let me show you how this",
    "start": "2465800",
    "end": "2471440"
  },
  {
    "text": "works if I can find it so I've created a a small uh sample",
    "start": "2471839",
    "end": "2478440"
  },
  {
    "text": "depper application hopefully this is the correct one nope",
    "start": "2478440",
    "end": "2486720"
  },
  {
    "text": "it's this one so things change a little bit of course because you're not talking uh",
    "start": "2487760",
    "end": "2493760"
  },
  {
    "text": "between your services directly so you're going to use Dapper so in my case uh my",
    "start": "2493760",
    "end": "2500760"
  },
  {
    "text": "worker um is actually going to add the package depper asp.net core in order to",
    "start": "2500920",
    "end": "2506480"
  },
  {
    "text": "communicate with the um depper side core it's going to be the same for the uh",
    "start": "2506480",
    "end": "2512480"
  },
  {
    "text": "API now again my API is going to use the the redish cache but I'm not using the",
    "start": "2512480",
    "end": "2520000"
  },
  {
    "text": "reddish SDK directly I'm using the Dapper SDK and in the Dapper SDK you",
    "start": "2520000",
    "end": "2525800"
  },
  {
    "text": "basically add a depper client to your dependency injection container uh and the depper client will do everything for",
    "start": "2525800",
    "end": "2531480"
  },
  {
    "text": "you so the deer client is the one that talks to the Deer sidec uh and if you added this to your dependency injection",
    "start": "2531480",
    "end": "2537400"
  },
  {
    "text": "container you can basically inject the depper client wherever you want",
    "start": "2537400",
    "end": "2543160"
  },
  {
    "text": "um and then you can use the deer client to do all kinds of uh Things based on",
    "start": "2543160",
    "end": "2548680"
  },
  {
    "text": "all of those different kinds of components that you have so in this case I can for example do get State async and",
    "start": "2548680",
    "end": "2554960"
  },
  {
    "text": "get State async um in this case uses something that is named redish so you",
    "start": "2554960",
    "end": "2561680"
  },
  {
    "text": "basically specify which service you talking to the name of that service which is redis and then you use the key",
    "start": "2561680",
    "end": "2568839"
  },
  {
    "text": "to get the redis key value pair back uh and then this goes to the side card the",
    "start": "2568839",
    "end": "2574119"
  },
  {
    "text": "side card talks to the external uh Reddit service tries to fetch that for you maybe it will retry if something",
    "start": "2574119",
    "end": "2580119"
  },
  {
    "text": "fails and then when it gets a result it will return that to you this case when we have a c cached message we return",
    "start": "2580119",
    "end": "2587079"
  },
  {
    "text": "this otherwise we generate the message um and we save that new message as um as",
    "start": "2587079",
    "end": "2594520"
  },
  {
    "text": "that cached uh message so next time we call this endpoint it will get it from the cache instead of from um from um uh",
    "start": "2594520",
    "end": "2603440"
  },
  {
    "text": "instead of generating generating it I'm sorry now again the cool thing about this I don't",
    "start": "2603440",
    "end": "2609359"
  },
  {
    "text": "need to worry about uh configuration in my code there is no connection string to a redis cache there is no nothing the",
    "start": "2609359",
    "end": "2616920"
  },
  {
    "text": "only thing that is here is my red depper client of course we create a hardcoded",
    "start": "2616920",
    "end": "2622440"
  },
  {
    "text": "like hard CED uh dependency on Dapper in this way but you can also abstract that out yourself if you want you can create",
    "start": "2622440",
    "end": "2629040"
  },
  {
    "text": "like you can put your depper client like somewhere to the side and then use dependency injection to make an abstraction on top of that but in this",
    "start": "2629040",
    "end": "2635559"
  },
  {
    "text": "case the only thing you have here is your depper client and all of the rest for configuration wise um is is nothing",
    "start": "2635559",
    "end": "2641599"
  },
  {
    "text": "for you to worry about um it's going to be the same thing for the worker service",
    "start": "2641599",
    "end": "2647079"
  },
  {
    "text": "so if you remember the worker service it's going to call my API um but I'm not directly calling my API again I'm using",
    "start": "2647079",
    "end": "2653680"
  },
  {
    "text": "the deer client um in this worker service also so I'm adding the deer",
    "start": "2653680",
    "end": "2658720"
  },
  {
    "text": "client to my uh dependency injection container and within my worker um I'm injecting the deer client and I'm using",
    "start": "2658720",
    "end": "2665040"
  },
  {
    "text": "the deer client to invoke an http method so now I'm not getting a state I'm",
    "start": "2665040",
    "end": "2670160"
  },
  {
    "text": "invoking a method which is different kind of component uh in Dapper and I'm invoking an HTTP get method to a",
    "start": "2670160",
    "end": "2677920"
  },
  {
    "text": "component with this name and this is the name of my endpoint or basically",
    "start": "2677920",
    "end": "2683720"
  },
  {
    "text": "something you put put behind of your root um your root uh endpoint so SL",
    "start": "2683720",
    "end": "2690240"
  },
  {
    "text": "status and this is what it returns to me in this case it's just a a result can",
    "start": "2690240",
    "end": "2695559"
  },
  {
    "text": "also of course be um a Json der serialized object or dto um if you want",
    "start": "2695559",
    "end": "2701640"
  },
  {
    "text": "this now this is your Dapper of course when you run this locally you need to uh configure Dapper locally so you have to",
    "start": "2701640",
    "end": "2708200"
  },
  {
    "text": "add some folders to your uh to your project and have have some configuration files there but if you deploy this to um",
    "start": "2708200",
    "end": "2715119"
  },
  {
    "text": "container apps that is something you do within container apps itself so if I go",
    "start": "2715119",
    "end": "2720160"
  },
  {
    "text": "to my um example for",
    "start": "2720160",
    "end": "2725200"
  },
  {
    "text": "depper um for example my uh let's see my",
    "start": "2725760",
    "end": "2731599"
  },
  {
    "text": "API you have a small uh menu item on the left hand side called",
    "start": "2731599",
    "end": "2737160"
  },
  {
    "text": "Dapper and you can enable or disable so by default it's disabled I told you Dapper is pre-installed with container",
    "start": "2737160",
    "end": "2743359"
  },
  {
    "text": "apps you you can use it but you need to enable it before you can use it and when you enable it you specify your app ID",
    "start": "2743359",
    "end": "2751119"
  },
  {
    "text": "which in my case is example 6 API so this is that ID that I'm using in code so in code when I'm doing the invoke",
    "start": "2751119",
    "end": "2758160"
  },
  {
    "text": "method async I tell it this is the ID of the app that you need to call to this is",
    "start": "2758160",
    "end": "2763960"
  },
  {
    "text": "the same ID here so I specify on this container app which is my API that this is the Dapper app ID and this is the",
    "start": "2763960",
    "end": "2771319"
  },
  {
    "text": "port that my API is lising on um so this is basically information for that Dapper",
    "start": "2771319",
    "end": "2776599"
  },
  {
    "text": "side car to know within that uh container app so the side car knows that the the the container that lives next to",
    "start": "2776599",
    "end": "2783079"
  },
  {
    "text": "it is the example 6 API and that it needs to talk to that um API using port",
    "start": "2783079",
    "end": "2789440"
  },
  {
    "text": "8080 the protocol you can change between HTTP and grpc um which is basically the",
    "start": "2789440",
    "end": "2796359"
  },
  {
    "text": "the inter um sidecar communication so it can go over HTTP or grpc um which you",
    "start": "2796359",
    "end": "2802720"
  },
  {
    "text": "can choose if necessary some other um configuration values if you want to see",
    "start": "2802720",
    "end": "2808160"
  },
  {
    "text": "the Dapper logging within your API loging so if you look at the Lock stream for example and you enable this all the",
    "start": "2808160",
    "end": "2814280"
  },
  {
    "text": "Deer uh logging information will also be there if you want to learn something from that uh for example and then in the",
    "start": "2814280",
    "end": "2821599"
  },
  {
    "text": "bottom you have a list of all the Dapper components that you are using if you want to talk to external services for",
    "start": "2821599",
    "end": "2827839"
  },
  {
    "text": "example in this case the API itself does not does not use a cache um I didn't",
    "start": "2827839",
    "end": "2833359"
  },
  {
    "text": "show you but I'm not using the cache for the API I'm using actually the cache for the uh Blazer application",
    "start": "2833359",
    "end": "2840400"
  },
  {
    "text": "um I'm sorry this is the wrong example whatever",
    "start": "2840400",
    "end": "2847640"
  },
  {
    "text": "um but if you go to your um container app environment because it says in order",
    "start": "2847640",
    "end": "2853800"
  },
  {
    "text": "for your app to use a specific Dapper component it must be added to your container app environment so you specify",
    "start": "2853800",
    "end": "2859480"
  },
  {
    "text": "on top of your environment which Dapper components you want to use and where you want to apply those components and then",
    "start": "2859480",
    "end": "2864760"
  },
  {
    "text": "they become available for your um Azure container apps so if I look at Dapper",
    "start": "2864760",
    "end": "2870240"
  },
  {
    "text": "components I have added redis and you can add whatever components so you can use generic components for deat self or",
    "start": "2870240",
    "end": "2877640"
  },
  {
    "text": "you can integrate with other Azure uh Services by using an Azure component which is still in preview but if I click",
    "start": "2877640",
    "end": "2884359"
  },
  {
    "text": "this um and have some patience again I can",
    "start": "2884359",
    "end": "2889520"
  },
  {
    "text": "specify the component name so this one is redis but I can do whatever name um I",
    "start": "2889520",
    "end": "2894720"
  },
  {
    "text": "specify a building block is it a binding a configuration pop up Secret store so those are those uh different kinds of um",
    "start": "2894720",
    "end": "2901960"
  },
  {
    "text": "Dapper components so for example uh redis will be a state store and then it",
    "start": "2901960",
    "end": "2907920"
  },
  {
    "text": "will list for you um what kind of state stores are um available within the Azure",
    "start": "2907920",
    "end": "2914480"
  },
  {
    "text": "ecosystem so I can do cach for reddis and then it will load all of your reddis",
    "start": "2914480",
    "end": "2919520"
  },
  {
    "text": "cache uh services within your subscription and then you can choose it from here uh for",
    "start": "2919520",
    "end": "2925480"
  },
  {
    "text": "example and if you add this now you have a component that is um that is",
    "start": "2925480",
    "end": "2931200"
  },
  {
    "text": "configured to talk to an external service and you can use that component within your uh um application within",
    "start": "2931200",
    "end": "2938720"
  },
  {
    "text": "your Dapper application so if I open this one to show you the",
    "start": "2938720",
    "end": "2944920"
  },
  {
    "text": "details you can see it basically adds metadata to make that work the Redd is",
    "start": "2944920",
    "end": "2949960"
  },
  {
    "text": "Host this is the this is the the endpoint to talk to reddis the DB is the",
    "start": "2949960",
    "end": "2955280"
  },
  {
    "text": "one with index zero the password and if you want to enable uh TLS so this will be added for you automatically but you",
    "start": "2955280",
    "end": "2961520"
  },
  {
    "text": "can also add uh other uh metadata that is supported so for example I added time",
    "start": "2961520",
    "end": "2966760"
  },
  {
    "text": "to live in seconds 5 Seconds which means if I want to add something to the cache the time to live for that uh value is 5",
    "start": "2966760",
    "end": "2973160"
  },
  {
    "text": "Seconds and after five 5 Seconds it disappears from the cache so your configuration is happening here and not",
    "start": "2973160",
    "end": "2978920"
  },
  {
    "text": "in your code if I go back to my um worker",
    "start": "2978920",
    "end": "2984480"
  },
  {
    "text": "service then and I also enable depper in my worker",
    "start": "2984480",
    "end": "2990319"
  },
  {
    "text": "service it should actually show me the Dapper component here in the bottom but it doesn't",
    "start": "2991000",
    "end": "2998160"
  },
  {
    "text": "so that's going to be for another time then normally uh when you add components",
    "start": "2998160",
    "end": "3004160"
  },
  {
    "text": "to a specific um to a specific uh service that you're using you basically",
    "start": "3004160",
    "end": "3009280"
  },
  {
    "text": "add it as a scope so so I say I'm going to use R cach from this uh uh from this",
    "start": "3009280",
    "end": "3014760"
  },
  {
    "text": "application you add a scope to your um component and that component will only be available for the container apps",
    "start": "3014760",
    "end": "3020880"
  },
  {
    "text": "within the same scope um so it will show up here I don't really know why it doesn't work right now I probably made a",
    "start": "3020880",
    "end": "3026440"
  },
  {
    "text": "mistake take uh on my end so yeah this is um again a very",
    "start": "3026440",
    "end": "3032000"
  },
  {
    "text": "quick introduction in what Dapper can uh do for you within Azure container apps it's all integrated uh you conf figure",
    "start": "3032000",
    "end": "3037640"
  },
  {
    "text": "it there again or in the portal or using uh whatever um infrastructure as code",
    "start": "3037640",
    "end": "3043440"
  },
  {
    "text": "that you're used to um but again you don't need to worry about it from your code you it just works um if you",
    "start": "3043440",
    "end": "3049760"
  },
  {
    "text": "configure it correctly um obviously now there's one more thing that I want to show you um it works in Dapper but it",
    "start": "3049760",
    "end": "3057240"
  },
  {
    "text": "also works um in container apps which is resiliency so I have created an",
    "start": "3057240",
    "end": "3064920"
  },
  {
    "text": "application this one with a status endpoint that basically generates a",
    "start": "3064920",
    "end": "3071079"
  },
  {
    "text": "random number one or zero and when it's zero it throws a random exception so if",
    "start": "3071079",
    "end": "3076799"
  },
  {
    "text": "I uh if I hit this end point sometimes it's going to give me an HTTP 500",
    "start": "3076799",
    "end": "3082240"
  },
  {
    "text": "sometimes it's going to give me a result so that's not a very reliable service",
    "start": "3082240",
    "end": "3088480"
  },
  {
    "text": "within Azure container apps you now also have the opportunity to enable resiliency so if",
    "start": "3088880",
    "end": "3096119"
  },
  {
    "text": "you scroll down you can find resiliency preview and you can actually enable",
    "start": "3096119",
    "end": "3101640"
  },
  {
    "text": "resiliency for uh different kinds of topics um for example HTTP retries and I",
    "start": "3101640",
    "end": "3109040"
  },
  {
    "text": "can for example react to 500 kinds of Errors so everything in the 500 range uh",
    "start": "3109040",
    "end": "3115480"
  },
  {
    "text": "I will uh react to and I basically will do a th retries for example with an",
    "start": "3115480",
    "end": "3120839"
  },
  {
    "text": "initial delay uh of 100 and it will do a progressive back off um until a maximum",
    "start": "3120839",
    "end": "3126359"
  },
  {
    "text": "of uh 2 seconds um this is just random numbers that I've chosen of course you need to think very carefully on how you",
    "start": "3126359",
    "end": "3132760"
  },
  {
    "text": "want to configure this uh maybe you want to retry quicker or slower depending on what kind of um resilien resiliency you",
    "start": "3132760",
    "end": "3139440"
  },
  {
    "text": "want to build so if I disable this and I apply",
    "start": "3139440",
    "end": "3146599"
  },
  {
    "text": "and I open this URL and the status",
    "start": "3148240",
    "end": "3153559"
  },
  {
    "text": "endpoint now it doesn't work it gives me an HTTP 500 and I just keep on refreshing sometimes it works sometimes",
    "start": "3153559",
    "end": "3161000"
  },
  {
    "text": "it doesn't so you can see it's random now if I go back to",
    "start": "3161000",
    "end": "3166200"
  },
  {
    "text": "resiliency I enable HTTP retries 100 whatever let's say initial 5",
    "start": "3166200",
    "end": "3173000"
  },
  {
    "text": "Seconds just to make it very clear and I saved this for the 500",
    "start": "3173000",
    "end": "3181440"
  },
  {
    "text": "range and I try this again now you can see the page is loading and it's",
    "start": "3181920",
    "end": "3187280"
  },
  {
    "text": "probably going to take 5 seconds or if things go wrong longer because it's now retrying in the background automatically",
    "start": "3187280",
    "end": "3193839"
  },
  {
    "text": "based on the resiliency settings you have there um so now it it uh went uh",
    "start": "3193839",
    "end": "3199000"
  },
  {
    "text": "immediately again now it takes uh it was pretty",
    "start": "3199000",
    "end": "3205119"
  },
  {
    "text": "immediate again now it's taking 5 seconds again so now",
    "start": "3205119",
    "end": "3210880"
  },
  {
    "text": "it's retrying in the background waiting 5 seconds and then retrying and succeeding so again also something you",
    "start": "3210880",
    "end": "3216799"
  },
  {
    "text": "don't have to worry about in code you can configure using Azure container apps um and all of your services that are",
    "start": "3216799",
    "end": "3222920"
  },
  {
    "text": "calling this service they benefit from that because they don't have uh HTTP errors because basically they are",
    "start": "3222920",
    "end": "3228880"
  },
  {
    "text": "retried automatically of course when retrying helps some very in in some cases retrying will not help it will",
    "start": "3228880",
    "end": "3235520"
  },
  {
    "text": "always throw an exception so you also need to worry about that of course um but that's",
    "start": "3235520",
    "end": "3241760"
  },
  {
    "text": "it so I've shown you um Azure container apps uh very quickly I've showed you",
    "start": "3241760",
    "end": "3248480"
  },
  {
    "text": "what you could do with that um I've shown you Aspire and I've shown you uh Dapper and with that I'm at the end of",
    "start": "3248480",
    "end": "3255200"
  },
  {
    "text": "my presentation uh so again everything is on my GitHub if there's any questions I would love to hear them uh and",
    "start": "3255200",
    "end": "3261359"
  },
  {
    "text": "otherwise have fun with the rest of NDC Oslo [Applause]",
    "start": "3261359",
    "end": "3273680"
  },
  {
    "text": "if there's question",
    "start": "3273680",
    "end": "3276680"
  }
]