[
  {
    "text": "hi everyone and welcome to NDC Oslo I hope you had a great a great session",
    "start": "0",
    "end": "6540"
  },
  {
    "text": "today that you have seen a lot of good talks and you uh some of you who are",
    "start": "6540",
    "end": "11760"
  },
  {
    "text": "presenters ready for the uh NDC uh board dinner which is a cruise dinner which is",
    "start": "11760",
    "end": "18119"
  },
  {
    "text": "going to be really really good so I'm the last talk so hope that you'll have a",
    "start": "18119",
    "end": "24359"
  },
  {
    "text": "really good night tonight all right so what I'm going to talk about today is the common mistakes in EF",
    "start": "24359",
    "end": "31439"
  },
  {
    "text": "core and interestingly enough I started this talk kind of a few years ago",
    "start": "31439",
    "end": "36960"
  },
  {
    "text": "because I was a little bit annoyed of fixing the same things over and over",
    "start": "36960",
    "end": "42059"
  },
  {
    "text": "but later I really realized the reason why I was so annoyed is because most of",
    "start": "42059",
    "end": "48719"
  },
  {
    "text": "these issues you know they don't have much problems they're just you know a little bit annoyance a little bit of",
    "start": "48719",
    "end": "54840"
  },
  {
    "text": "performance issues or maybe a couple of bucks but some of these issues cause people to",
    "start": "54840",
    "end": "63059"
  },
  {
    "text": "work over weekends scores projects to fail on day one how many of you have",
    "start": "63059",
    "end": "69000"
  },
  {
    "text": "heard about government websites going live and then going offline because it didn't load uh didn't",
    "start": "69000",
    "end": "77340"
  },
  {
    "text": "handle the load so some of the things that might have",
    "start": "77340",
    "end": "83520"
  },
  {
    "text": "happened that day are in here so yeah you might want one I want to",
    "start": "83520",
    "end": "90180"
  },
  {
    "text": "remember some of them and that's basically the motivation for it is so that you don't get those",
    "start": "90180",
    "end": "97740"
  },
  {
    "text": "moments where it's like it work in production it work in staging it worked",
    "start": "97740",
    "end": "103200"
  },
  {
    "text": "sorry not production it worked actually did work in production it just once people come in and start to use your",
    "start": "103200",
    "end": "110579"
  },
  {
    "text": "system and start adding data to your database feels a thing starts to fall",
    "start": "110579",
    "end": "116399"
  },
  {
    "text": "over because it wasn't developed with high volume data",
    "start": "116399",
    "end": "121680"
  },
  {
    "text": "all right that out of the way I am Jane Kafka but",
    "start": "121680",
    "end": "126719"
  },
  {
    "text": "you can just call me JK I'm actually originally from Slovenia quite close from here but I live now in Australia so",
    "start": "126719",
    "end": "136319"
  },
  {
    "text": "in spite of being close by uh natively a very long trip",
    "start": "136319",
    "end": "142920"
  },
  {
    "text": "you have lots of Socials I'm on Twitter GitHub my blog then also LinkedIn I",
    "start": "142920",
    "end": "151379"
  },
  {
    "text": "organize quite a few events in Australia and if you're interested about AI I also",
    "start": "151379",
    "end": "157319"
  },
  {
    "text": "am one of the hosts on the global AI the podcast we actually just covered the",
    "start": "157319",
    "end": "164099"
  },
  {
    "text": "open AI team and it got dropped like two three hours ago so you can learn more",
    "start": "164099",
    "end": "171840"
  },
  {
    "text": "about Open AI and I am a dotnet core developer mostly",
    "start": "171840",
    "end": "178739"
  },
  {
    "text": "specialized in efco and I'm also an AI MVP that works a lot with changept",
    "start": "178739",
    "end": "187260"
  },
  {
    "text": "ml.net and things like that and this is something my company makes me do is you can scan the QA code to get",
    "start": "187260",
    "end": "195959"
  },
  {
    "text": "this app and at the end when you scan another QA code you can win some rewards",
    "start": "195959",
    "end": "202440"
  },
  {
    "text": "which I hear are pretty good I can give you Q code at the end if you",
    "start": "202440",
    "end": "208200"
  },
  {
    "text": "want all right so intro so I kind of explained a little bit the motivation",
    "start": "208200",
    "end": "214099"
  },
  {
    "text": "behind of what I'm doing this talk um but at the beginning I'm going to",
    "start": "214099",
    "end": "220980"
  },
  {
    "text": "show you things that will allow you to replicate what I'm doing so I'm going to",
    "start": "220980",
    "end": "226379"
  },
  {
    "text": "show you some links I'm going to show you what my machine is and all of that stuff so you can just take the GitHub",
    "start": "226379",
    "end": "232640"
  },
  {
    "text": "code and try it for yourself so you can see how different changes have impacts",
    "start": "232640",
    "end": "241980"
  },
  {
    "text": "then I'm going to move to seven deadly sins those are the seven most deadliest",
    "start": "241980",
    "end": "247379"
  },
  {
    "text": "thing I have seen in EF core that happened too frequently",
    "start": "247379",
    "end": "252780"
  },
  {
    "text": "and at the end I'll do a couple of mini best practices",
    "start": "252780",
    "end": "258620"
  },
  {
    "text": "all right so how many of you know more than four or",
    "start": "259139",
    "end": "264900"
  },
  {
    "text": "five different databases all right just a few uh free hands but",
    "start": "264900",
    "end": "272699"
  },
  {
    "text": "you know the longer you work in the industry you're starting to see that there's a lot of databases popping up",
    "start": "272699",
    "end": "279300"
  },
  {
    "text": "SQL Server Cosmos DB progress SQL and MySQL right",
    "start": "279300",
    "end": "285060"
  },
  {
    "text": "and we have lots of bunch of orems as a result to handle all of these databases",
    "start": "285060",
    "end": "291540"
  },
  {
    "text": "so for instance you want to go uh SQL server and then it's like ah no I want",
    "start": "291540",
    "end": "296880"
  },
  {
    "text": "to go to post postgres you can either choose to write uh SDK specific code for",
    "start": "296880",
    "end": "303780"
  },
  {
    "text": "each of the databases and then you have lots of issues migrating now in practice",
    "start": "303780",
    "end": "309840"
  },
  {
    "text": "as much as a lot of people say that you move between databases it doesn't happen frequently but when it",
    "start": "309840",
    "end": "317100"
  },
  {
    "text": "does having oriums is really good because they handle the abstraction between all",
    "start": "317100",
    "end": "324120"
  },
  {
    "text": "of these databases and now databases are just popping up all the time uh so one",
    "start": "324120",
    "end": "331500"
  },
  {
    "text": "day your boss comes in and says hey Cosmos DB is really cool let's go on this and you're just like",
    "start": "331500",
    "end": "338820"
  },
  {
    "text": "okay so this is why efco is great because it",
    "start": "338820",
    "end": "345060"
  },
  {
    "text": "kind of gives you the best balance between features flexibility and performance",
    "start": "345060",
    "end": "350840"
  },
  {
    "text": "and it's really good relational database and it has built-in migrations database",
    "start": "350840",
    "end": "359160"
  },
  {
    "text": "scaffolding and other tools now if anyone is doing immigration from database first on.net framework might",
    "start": "359160",
    "end": "367919"
  },
  {
    "text": "know how useful is to have database scaffolding because take the database and then convert it in",
    "start": "367919",
    "end": "375060"
  },
  {
    "text": "code first and then just continue on with the built-in migrations it's awesome",
    "start": "375060",
    "end": "382940"
  },
  {
    "text": "and the thing here is efco basically allows you to also switch databases",
    "start": "382940",
    "end": "388919"
  },
  {
    "text": "which is really cool it still requires work to achieve that but your business logic can remain the",
    "start": "388919",
    "end": "396300"
  },
  {
    "text": "same and the part of this presentation is",
    "start": "396300",
    "end": "401580"
  },
  {
    "text": "basically how can we resolve some of the issues with ef core now all of the stuff",
    "start": "401580",
    "end": "407699"
  },
  {
    "text": "that I have told you now is the reasons why you want to go to EF core",
    "start": "407699",
    "end": "413340"
  },
  {
    "text": "but the next parts are going to be the issues that people find and say why did",
    "start": "413340",
    "end": "418500"
  },
  {
    "text": "we go to EF cool there's so many issues and stuff like that and then you just look at the code and you're like you",
    "start": "418500",
    "end": "426000"
  },
  {
    "text": "know what the issue is not really if core it's how you structured your query",
    "start": "426000",
    "end": "432180"
  },
  {
    "text": "so I want to show that and when I'm going to show you all of that I want to show you that you can",
    "start": "432180",
    "end": "438539"
  },
  {
    "text": "actually also simplify your code by doing best practices and I'm going to give you benchmarks for",
    "start": "438539",
    "end": "446400"
  },
  {
    "text": "the code that's written and some with the tests and I'm going to show you a few horror",
    "start": "446400",
    "end": "453780"
  },
  {
    "text": "stories without mentioning any names or give any scenarios that could link to them",
    "start": "453780",
    "end": "460819"
  },
  {
    "text": "all right so this one really quick The Benchmark tools so the first couple of",
    "start": "461039",
    "end": "467460"
  },
  {
    "text": "tests are going to be via benchmark.net this is to show you the impact on memory",
    "start": "467460",
    "end": "474180"
  },
  {
    "text": "consumption and time for a single execution the first two make sense to do",
    "start": "474180",
    "end": "481139"
  },
  {
    "text": "then for the rest of them there's not really that much of a difference so I just skip them and then the bombandia is the the tool",
    "start": "481139",
    "end": "490440"
  },
  {
    "text": "that I used for all all of them and what this one does it allows me to use a",
    "start": "490440",
    "end": "496020"
  },
  {
    "text": "simple command line to hit for instance an API 20 Frets",
    "start": "496020",
    "end": "502099"
  },
  {
    "text": "consistently for say 60 seconds and then I can see how many requests have I",
    "start": "502099",
    "end": "507900"
  },
  {
    "text": "handled now this is not technically load test it's just you know gently loading",
    "start": "507900",
    "end": "513599"
  },
  {
    "text": "up requests it doesn't try to overwhelm the service uh but it gives you an idea how your",
    "start": "513599",
    "end": "521700"
  },
  {
    "text": "website will work how that endpoint will work when you start getting more loads",
    "start": "521700",
    "end": "527880"
  },
  {
    "text": "because in one example you're seeing ah it's only 3.5 times slower",
    "start": "527880",
    "end": "533220"
  },
  {
    "text": "and then in another test you'll say oh wait this is a lot more than just 3.5 times uh slower",
    "start": "533220",
    "end": "540300"
  },
  {
    "text": "I'll get to that one and just in case you want to verify my",
    "start": "540300",
    "end": "545940"
  },
  {
    "text": "timings uh dot Net 7 with ef core 7 and ryzen 9.",
    "start": "545940",
    "end": "552600"
  },
  {
    "text": "with 32 gigs of RAM and just putting this there in case somebody wants to play this over this around at home",
    "start": "552600",
    "end": "560279"
  },
  {
    "text": "the test data is 7 million uh sales it's very simple database we have 500",
    "start": "560279",
    "end": "568380"
  },
  {
    "text": "products 20 employees and 20 000 customers I intentionally picked a very",
    "start": "568380",
    "end": "574620"
  },
  {
    "text": "simple database because this kind of database shouldn't give you much performance issue or much issue at all",
    "start": "574620",
    "end": "582959"
  },
  {
    "text": "but you can get to big troubles if you",
    "start": "582959",
    "end": "588000"
  },
  {
    "text": "write really terrible SQL statements oh sorry link statements",
    "start": "588000",
    "end": "594860"
  },
  {
    "text": "all right not to the fun part seven deadly sins so the first one uh some of you may know",
    "start": "595380",
    "end": "603300"
  },
  {
    "text": "what happened here if you have I variable and you cast it to I enumerable",
    "start": "603300",
    "end": "610080"
  },
  {
    "text": "then we have S Note tracking explicit joins",
    "start": "610080",
    "end": "616200"
  },
  {
    "text": "getting all the columns from the database and we have no paginations",
    "start": "616200",
    "end": "624140"
  },
  {
    "text": "uh non-cancedable queries and inefficient updates or deletes",
    "start": "624140",
    "end": "632000"
  },
  {
    "text": "and when you hit all of their seven how many of you uh have asked yourself in",
    "start": "632459",
    "end": "637740"
  },
  {
    "text": "your mind how bad can it be one advice never ask that question",
    "start": "637740",
    "end": "644220"
  },
  {
    "text": "there's no good answer to it so let's go with iclarable to I",
    "start": "644220",
    "end": "650519"
  },
  {
    "text": "enormable so we have this one we have two list dot count right",
    "start": "650519",
    "end": "656880"
  },
  {
    "text": "um and then we have this one we are taking",
    "start": "656880",
    "end": "662220"
  },
  {
    "text": "the sales we're putting into I I numerable uh variable and then we count",
    "start": "662220",
    "end": "669000"
  },
  {
    "text": "it and then we have a method that returns a",
    "start": "669000",
    "end": "674459"
  },
  {
    "text": "ineurable list and then basically we count this",
    "start": "674459",
    "end": "681200"
  },
  {
    "text": "does anyone think these things are different",
    "start": "681240",
    "end": "686120"
  },
  {
    "text": "well they're all the same and they're all the same because if you",
    "start": "686339",
    "end": "691920"
  },
  {
    "text": "do to list you get all the entire database if you cast it into I",
    "start": "691920",
    "end": "699000"
  },
  {
    "text": "enumerable that's almost like you're doing two lists you're getting all of the data all",
    "start": "699000",
    "end": "705180"
  },
  {
    "text": "of the sales from the database and what is the most common issue that I see is",
    "start": "705180",
    "end": "712380"
  },
  {
    "text": "that developers want to be good they want to be abstract and then they say you know",
    "start": "712380",
    "end": "720300"
  },
  {
    "text": "what I'm not going to do the the type that's uh say the DB set that the sales return",
    "start": "720300",
    "end": "728640"
  },
  {
    "text": "or I crab I'll do I innumerable because you know it's the highest one that you",
    "start": "728640",
    "end": "734279"
  },
  {
    "text": "can do is the highest one uh in terms of type compatibility right they're trying",
    "start": "734279",
    "end": "739920"
  },
  {
    "text": "to be a good developer but in this particular case this is really bad",
    "start": "739920",
    "end": "746519"
  },
  {
    "text": "in all of the other cases I enormous actually good",
    "start": "746519",
    "end": "751560"
  },
  {
    "text": "so what happens here is we're making an HTTP request uh here we have done below uh the EIN",
    "start": "751560",
    "end": "759779"
  },
  {
    "text": "number ball sales DB context dot sales",
    "start": "759779",
    "end": "764940"
  },
  {
    "text": "and what happens is when we are trying to evaluate uh the query the",
    "start": "764940",
    "end": "773040"
  },
  {
    "text": "um the efco query it will only evaluate to the point where",
    "start": "773040",
    "end": "779459"
  },
  {
    "text": "we hit the casting to I enumerable well we do two lists so what we end up with",
    "start": "779459",
    "end": "785100"
  },
  {
    "text": "is is Select stuff from sales and that means that it literally don't",
    "start": "785100",
    "end": "791519"
  },
  {
    "text": "launch the entire database and then as you've seen in the code we just count them so it just the looks at",
    "start": "791519",
    "end": "799139"
  },
  {
    "text": "the number how big the list is and then dumps all of the results",
    "start": "799139",
    "end": "805980"
  },
  {
    "text": "into garbage collector we never used any of the data that we received from SQL",
    "start": "805980",
    "end": "812760"
  },
  {
    "text": "Server so here The Simple Solution is to use I variable",
    "start": "812760",
    "end": "821160"
  },
  {
    "text": "when you return in methods now this is the simple part let's go to",
    "start": "821160",
    "end": "826200"
  },
  {
    "text": "the fun part of ah so here if you use icon variable uh you",
    "start": "826200",
    "end": "833100"
  },
  {
    "text": "basically the entire statements gets translated and then you have select count stuff",
    "start": "833100",
    "end": "841260"
  },
  {
    "text": "but you know it's not interesting to just see uh okay just avoid I innumerable I was just like you know I",
    "start": "841260",
    "end": "848639"
  },
  {
    "text": "really want to burn that in everyone's mind so what I'm going to do is I'm",
    "start": "848639",
    "end": "853980"
  },
  {
    "text": "going to ask myself how bad can it be if you don't do that",
    "start": "853980",
    "end": "859800"
  },
  {
    "text": "ah and yeah remember this slide I credible is in EF",
    "start": "859800",
    "end": "866220"
  },
  {
    "text": "core is not the same as I innovable",
    "start": "866220",
    "end": "871160"
  },
  {
    "text": "so why is this bad and how bad it can be how about two gigabytes memory",
    "start": "871500",
    "end": "877139"
  },
  {
    "text": "consumption does that sound bad enough",
    "start": "877139",
    "end": "882920"
  },
  {
    "text": "then okay it's 64 times faster actually 64. there's two ah so this one ratio",
    "start": "883680",
    "end": "892079"
  },
  {
    "text": "this one is uh average whereas this one is mean so basically it means that most of the",
    "start": "892079",
    "end": "900839"
  },
  {
    "text": "queries were somewhat fast um but you know at some point it just",
    "start": "900839",
    "end": "907500"
  },
  {
    "text": "tipped over and everything was slow but that's not the fun part what if we",
    "start": "907500",
    "end": "912959"
  },
  {
    "text": "load test this you know here we have 3.5 times faster in here 64 times faster these are just",
    "start": "912959",
    "end": "919860"
  },
  {
    "text": "numbers right what if we have lots of users using with this feature well what",
    "start": "919860",
    "end": "925680"
  },
  {
    "text": "happens is that the average response is 33 seconds just to get count of sales",
    "start": "925680",
    "end": "934220"
  },
  {
    "text": "yeah imagine that it takes 128 milliseconds if you just do",
    "start": "934560",
    "end": "942060"
  },
  {
    "text": "the right query so now this is 260 times faster",
    "start": "942060",
    "end": "947160"
  },
  {
    "text": "big numbers since he see here how much impact and",
    "start": "947160",
    "end": "953279"
  },
  {
    "text": "I'm innumerable in the wrong place can uh can make so this is if you remember anything remember this you'll make my",
    "start": "953279",
    "end": "960720"
  },
  {
    "text": "life easier all right so the next one is astronaut",
    "start": "960720",
    "end": "965940"
  },
  {
    "text": "tracking and this one what does is it allows a query",
    "start": "965940",
    "end": "971339"
  },
  {
    "text": "which is by default uh trackable that means that if you change it and you do",
    "start": "971339",
    "end": "976740"
  },
  {
    "text": "save changes uh it basically will know okay this entity has changed this property so in",
    "start": "976740",
    "end": "984360"
  },
  {
    "text": "the database we need to change this round for this column and you know if you need that that's",
    "start": "984360",
    "end": "991860"
  },
  {
    "text": "awesome and you should use it but when you don't um what you can do is use dot as not",
    "start": "991860",
    "end": "998579"
  },
  {
    "text": "tracking now I'm putting here warnings because some people warn me",
    "start": "998579",
    "end": "1004220"
  },
  {
    "text": "don't tell them because then they will use it and then no changes will happen in a database",
    "start": "1004220",
    "end": "1010880"
  },
  {
    "text": "so here I am saying for the third time no changes will be made in the database",
    "start": "1010880",
    "end": "1015920"
  },
  {
    "text": "if you use S Note tracking all right so what happens behind the",
    "start": "1015920",
    "end": "1021860"
  },
  {
    "text": "scenes uh so when we generate uh queries um we send the query uh on efco we send",
    "start": "1021860",
    "end": "1029600"
  },
  {
    "text": "the query the SQL Server we get back the data we pass the data and map this is",
    "start": "1029600",
    "end": "1036438"
  },
  {
    "text": "all done behind the scenes but there's an extra step to it we are doing uh EF",
    "start": "1036439",
    "end": "1042558"
  },
  {
    "text": "core uh tracking behind the scenes basically it hides some data that you",
    "start": "1042559",
    "end": "1048438"
  },
  {
    "text": "cannot see directly in your code to know how your entities are being changed and",
    "start": "1048439",
    "end": "1055280"
  },
  {
    "text": "then you get back results in the code where you can use it so here",
    "start": "1055280",
    "end": "1061780"
  },
  {
    "text": "any changes that you do against the entities that you get back this way will",
    "start": "1061780",
    "end": "1068179"
  },
  {
    "text": "be captured by save changes by DDP context save changes",
    "start": "1068179",
    "end": "1073640"
  },
  {
    "text": "now if you do asthma tracking this step is skipped",
    "start": "1073640",
    "end": "1079039"
  },
  {
    "text": "now why this is important it's not just because it's one it won't be tracked the",
    "start": "1079039",
    "end": "1084440"
  },
  {
    "text": "other thing is it can use significantly less memory in my test it happens that",
    "start": "1084440",
    "end": "1091039"
  },
  {
    "text": "it you used four times less memory what they realized is this a very",
    "start": "1091039",
    "end": "1098320"
  },
  {
    "text": "wide range of performance gains or memory consumption gains depending on",
    "start": "1098320",
    "end": "1105559"
  },
  {
    "text": "the query uh so Yuma us can",
    "start": "1105559",
    "end": "1110980"
  },
  {
    "text": "um sorry you might get different results uh also it's faster",
    "start": "1111799",
    "end": "1119179"
  },
  {
    "text": "now the thing here to um keep in mind is uh you might does",
    "start": "1119179",
    "end": "1125000"
  },
  {
    "text": "anyone know Nick chapsis all right you might have seen his video",
    "start": "1125000",
    "end": "1130340"
  },
  {
    "text": "about um efco performance and he says well don't",
    "start": "1130340",
    "end": "1137539"
  },
  {
    "text": "use uh astronaut tracking because it doesn't give you any benefits what I realized is that they might actually be",
    "start": "1137539",
    "end": "1145700"
  },
  {
    "text": "differences between the database providers so in his test he actually didn't get any major differences when he",
    "start": "1145700",
    "end": "1153799"
  },
  {
    "text": "used as not tracking but on SQL Server I got pretty major differences so keep",
    "start": "1153799",
    "end": "1160340"
  },
  {
    "text": "that in mind as well so if you use this for performance reasons make performance",
    "start": "1160340",
    "end": "1165799"
  },
  {
    "text": "measurements before you're like yeah just use it everywhere um yeah",
    "start": "1165799",
    "end": "1173440"
  },
  {
    "text": "so timings wise we have a full times high speed when we",
    "start": "1173840",
    "end": "1180140"
  },
  {
    "text": "Lo when we test on the load so basically um the reason why I'm focusing so much",
    "start": "1180140",
    "end": "1187760"
  },
  {
    "text": "on the speed here is I'm dealing with applications that needs the process a lot of data",
    "start": "1187760",
    "end": "1195860"
  },
  {
    "text": "they need to also process a lot of requests and the longer you take to",
    "start": "1195860",
    "end": "1201919"
  },
  {
    "text": "process things for Unnecessary reasons uh the fewer requests you can process",
    "start": "1201919",
    "end": "1207320"
  },
  {
    "text": "the more likelihood is that your service that's to get overloaded and toppled and",
    "start": "1207320",
    "end": "1213919"
  },
  {
    "text": "Asthma tracking is a like a very easy thing to add especially if we know that",
    "start": "1213919",
    "end": "1219500"
  },
  {
    "text": "the dot is not going to change with it gives you a little bit more buffer between you know your server working",
    "start": "1219500",
    "end": "1227600"
  },
  {
    "text": "fine and yes a server just exploding because it just getting too many requests to process",
    "start": "1227600",
    "end": "1234919"
  },
  {
    "text": "and also very important this mostly impacts the botnet side so if your.net",
    "start": "1234919",
    "end": "1240799"
  },
  {
    "text": "site is running really hot you can alleviate a little bit on the.net side",
    "start": "1240799",
    "end": "1246080"
  },
  {
    "text": "it doesn't have any impact on the SQL server side another really uh",
    "start": "1246080",
    "end": "1252580"
  },
  {
    "text": "annoying thing for me is but include the reason for it is a lot of people like to",
    "start": "1252580",
    "end": "1259640"
  },
  {
    "text": "dot include and then they forget to remove them and no longer need it and they're thinking",
    "start": "1259640",
    "end": "1266240"
  },
  {
    "text": "oh yeah if it's no longer needed it's not going to cry by uh by that doctor right it's just not going to include",
    "start": "1266240",
    "end": "1272840"
  },
  {
    "text": "join well it turns out even if you do dot select to map your data",
    "start": "1272840",
    "end": "1279440"
  },
  {
    "text": "it will still do the dot include even if you use it nowhere",
    "start": "1279440",
    "end": "1286100"
  },
  {
    "text": "so it will do the joins and if you know SQL server or SQL in general joins are",
    "start": "1286100",
    "end": "1291980"
  },
  {
    "text": "one of the more expensive operations you can do so the way the way to go around that is",
    "start": "1291980",
    "end": "1300080"
  },
  {
    "text": "actually using implicit joins so what you can do is instead of doing",
    "start": "1300080",
    "end": "1305900"
  },
  {
    "text": "uh like here where I have a DOT include and I'm including the sales person you",
    "start": "1305900",
    "end": "1312799"
  },
  {
    "text": "can instead just make a select statement where we directly use those tables as",
    "start": "1312799",
    "end": "1321620"
  },
  {
    "text": "properties what happens here is it will implicitly include whatever we're adding into",
    "start": "1321620",
    "end": "1328820"
  },
  {
    "text": "select therefore if we remove these two lines there won't be any join statement",
    "start": "1328820",
    "end": "1336020"
  },
  {
    "text": "and this basically alleviates you from every uh from checking every time if",
    "start": "1336020",
    "end": "1341960"
  },
  {
    "text": "somebody forgot to remove the included statement and I'm not sure how how many code",
    "start": "1341960",
    "end": "1350840"
  },
  {
    "text": "accounts you have seen we have one master method where it has literally a",
    "start": "1350840",
    "end": "1358039"
  },
  {
    "text": "hundred lines of includes and I'm just like why",
    "start": "1358039",
    "end": "1363500"
  },
  {
    "text": "I I understand why would you want to do that if you",
    "start": "1363500",
    "end": "1368780"
  },
  {
    "text": "don't have any performance and you know if that doesn't literally cause your database just panicking saying wait I",
    "start": "1368780",
    "end": "1376700"
  },
  {
    "text": "need to connect everything with everything um but still",
    "start": "1376700",
    "end": "1382400"
  },
  {
    "text": "why and to show you the impact here",
    "start": "1382400",
    "end": "1390500"
  },
  {
    "text": "it's 2.5 times faster and in the end of the day you're getting exactly the same result",
    "start": "1390500",
    "end": "1399140"
  },
  {
    "text": "and if you look back in the code you're actually more clearer what you want",
    "start": "1399140",
    "end": "1406039"
  },
  {
    "text": "now you might hide this code in you know a mapping Library so it might not be as",
    "start": "1406039",
    "end": "1412900"
  },
  {
    "text": "abundantly clear you might need to jump to the mapping code but still it's very clear this is the",
    "start": "1412900",
    "end": "1420679"
  },
  {
    "text": "dot I want just get me that and you're getting a free performance",
    "start": "1420679",
    "end": "1427520"
  },
  {
    "text": "out of that and talking about mapping and fetching",
    "start": "1427520",
    "end": "1434360"
  },
  {
    "text": "data pagination is one of really major problems that they have seen especially",
    "start": "1434360",
    "end": "1440179"
  },
  {
    "text": "on projects where you have developers that are not used to deal with really",
    "start": "1440179",
    "end": "1447919"
  },
  {
    "text": "large data like if you're dealing with systems that deals with licensing you",
    "start": "1447919",
    "end": "1455480"
  },
  {
    "text": "have like you could potentially have thousands of licenses per product",
    "start": "1455480",
    "end": "1460640"
  },
  {
    "text": "and all of the sudden when you try to load those licenses up",
    "start": "1460640",
    "end": "1465980"
  },
  {
    "text": "um you know it quickly comes from oh yeah on production for two weeks it",
    "start": "1465980",
    "end": "1472700"
  },
  {
    "text": "worked everything fine then people start purchasing one product and when you try to click that product it just the whole",
    "start": "1472700",
    "end": "1480200"
  },
  {
    "text": "system freezes up um that actually happened it's like I clicked that product",
    "start": "1480200",
    "end": "1487700"
  },
  {
    "text": "everything looks fine click that product it's a little bit slow but everything you're fine I click that product and all",
    "start": "1487700",
    "end": "1494600"
  },
  {
    "text": "of the sudden nobody can access the website anymore it's like it feels like almost that that",
    "start": "1494600",
    "end": "1501260"
  },
  {
    "text": "product is cursed but what end up happening is almost the same mistake as",
    "start": "1501260",
    "end": "1507320"
  },
  {
    "text": "at the beginning where we had um essentially dot count on the entire table download the entire table and Dot",
    "start": "1507320",
    "end": "1515299"
  },
  {
    "text": "count a little bit less bad but still similar and what the most common code that I",
    "start": "1515299",
    "end": "1523280"
  },
  {
    "text": "have seen on how they're trying to do pagination is this so one they do is",
    "start": "1523280",
    "end": "1529340"
  },
  {
    "text": "they actually they're doing correctly at the beginning you know you do the uh way close you're trying to add whatever you",
    "start": "1529340",
    "end": "1536840"
  },
  {
    "text": "need in the query but then they're getting all of the results and I was like why are they",
    "start": "1536840",
    "end": "1543140"
  },
  {
    "text": "trying to get all of the results before they do pagination all of that stuff it turns out they don't know how to get",
    "start": "1543140",
    "end": "1549679"
  },
  {
    "text": "the count from the database for the filter so they first get all of",
    "start": "1549679",
    "end": "1556460"
  },
  {
    "text": "the data then they get the count and then in memory they filter it down and what",
    "start": "1556460",
    "end": "1564080"
  },
  {
    "text": "usually happens is like well it's good enough you know if you try to fix this",
    "start": "1564080",
    "end": "1570020"
  },
  {
    "text": "is you know there's no performance issues as far as we can tell",
    "start": "1570020",
    "end": "1576380"
  },
  {
    "text": "um but then the data starting to increase and all of the sudden there are",
    "start": "1576380",
    "end": "1581659"
  },
  {
    "text": "issues oh yeah here's the in-memory uh pigeonation",
    "start": "1581659",
    "end": "1587779"
  },
  {
    "text": "so what you should really do is essentially use Ike variables so you can reuse the",
    "start": "1587779",
    "end": "1594620"
  },
  {
    "text": "query more than once do whatever you need to do and then on that query on that I",
    "start": "1594620",
    "end": "1601940"
  },
  {
    "text": "credible he did a DOT count and later on that same query you apply",
    "start": "1601940",
    "end": "1610520"
  },
  {
    "text": "take a Skip and take so that will do the pagination and then you get all of the",
    "start": "1610520",
    "end": "1616700"
  },
  {
    "text": "data now you'll be saying hey Janke you're now doing two requests isn't that slower than one",
    "start": "1616700",
    "end": "1622520"
  },
  {
    "text": "well you would think so but the thing is this dot count in SQL Server is surprisingly fast",
    "start": "1622520",
    "end": "1630980"
  },
  {
    "text": "a lot faster usually than getting more than one page of data",
    "start": "1630980",
    "end": "1636919"
  },
  {
    "text": "so that's that's the performance hit I'm more than happy to take because that's like a few milliseconds",
    "start": "1636919",
    "end": "1643760"
  },
  {
    "text": "um because if this thing goes wrong we're talking about seconds or even minutes of performance penalties",
    "start": "1643760",
    "end": "1652400"
  },
  {
    "text": "so yeah this is a lot faster I'll we're just a little bit and seeing",
    "start": "1652400",
    "end": "1659120"
  },
  {
    "text": "some people are taking a picture all right so",
    "start": "1659120",
    "end": "1664279"
  },
  {
    "text": "what's the damage here well we have 1.3 seconds that doesn't tell us a lot",
    "start": "1664279",
    "end": "1672140"
  },
  {
    "text": "um 7 75 milliseconds if you do per generation which is 18 times faster and",
    "start": "1672140",
    "end": "1679340"
  },
  {
    "text": "just keep in mind in all of these cases we're returning exactly the same thing",
    "start": "1679340",
    "end": "1685220"
  },
  {
    "text": "to the client there's no changes we we only change how we execute the query",
    "start": "1685220",
    "end": "1693380"
  },
  {
    "text": "and regaining insane amount of performance gain also one thing that I",
    "start": "1693380",
    "end": "1699320"
  },
  {
    "text": "forgot to mention at at the beginning and uh here is",
    "start": "1699320",
    "end": "1705500"
  },
  {
    "text": "from the first first case onwards I stopped querying 7 million databases",
    "start": "1705500",
    "end": "1711559"
  },
  {
    "text": "because when I did the bad cases on seven million cases my machine was unresponsive for 10 minutes and then I",
    "start": "1711559",
    "end": "1719000"
  },
  {
    "text": "was just like cool I have really awesome numbers to show and comparison",
    "start": "1719000",
    "end": "1725419"
  },
  {
    "text": "but then I also realized that I won't be able to reuse my machine for 10 minutes so all of the data that all of the tests",
    "start": "1725419",
    "end": "1733159"
  },
  {
    "text": "that I'm showing you have reduced data set I think it's uh 700 000 hours a",
    "start": "1733159",
    "end": "1739940"
  },
  {
    "text": "million just to give you a perspective of how bad things can get I literally",
    "start": "1739940",
    "end": "1746120"
  },
  {
    "text": "had to reduce the number of set otherwise my computer was unusable but in all of the good cases there was",
    "start": "1746120",
    "end": "1752960"
  },
  {
    "text": "no at no time more than five seconds that my computer was unresponsive",
    "start": "1752960",
    "end": "1759919"
  },
  {
    "text": "so that's how major of a difference can make from you know",
    "start": "1759919",
    "end": "1765740"
  },
  {
    "text": "doing a very horrible thing and very good thing in EF core",
    "start": "1765740",
    "end": "1771020"
  },
  {
    "text": "all right talking about horrible things and things uh not stopping",
    "start": "1771020",
    "end": "1776620"
  },
  {
    "text": "non-cancelablequarius it's almost like I knew this this light is coming",
    "start": "1776620",
    "end": "1782000"
  },
  {
    "text": "um so this is a very interesting topic for anyone who don't know what the",
    "start": "1782000",
    "end": "1788419"
  },
  {
    "text": "cancellation token is how many of you oh actually let me reverse the question how many of you",
    "start": "1788419",
    "end": "1794720"
  },
  {
    "text": "know cancellation token okay we have a pretty a good number of",
    "start": "1794720",
    "end": "1800299"
  },
  {
    "text": "people um about three quarters so how many of you are using cancellation tokens",
    "start": "1800299",
    "end": "1807500"
  },
  {
    "text": "on efco queries okay maybe a quarter for the room",
    "start": "1807500",
    "end": "1813860"
  },
  {
    "text": "uh okay so this this one might come as a surprise for some",
    "start": "1813860",
    "end": "1819500"
  },
  {
    "text": "so let's say you don't use cancellation token on queries what's the problem",
    "start": "1819500",
    "end": "1827360"
  },
  {
    "text": "well let's start simple let's start with HTTP request uh doing some things then",
    "start": "1827360",
    "end": "1833240"
  },
  {
    "text": "you make an EF core query and you know how you have some of those queries that are very complicated but you can't do",
    "start": "1833240",
    "end": "1840260"
  },
  {
    "text": "anything about it it's you know if it's going to take 30 seconds it's going to take 50 seconds it's just not much you",
    "start": "1840260",
    "end": "1846500"
  },
  {
    "text": "can do about it and you know it might be a use case with that's fine the user can",
    "start": "1846500",
    "end": "1852020"
  },
  {
    "text": "wait but what happens if the user canceled that request that HTTP request",
    "start": "1852020",
    "end": "1860059"
  },
  {
    "text": "well if you don't have a cancellation token that thing still runs for 30 seconds",
    "start": "1860059",
    "end": "1866779"
  },
  {
    "text": "now what happens if somebody starts to spam F5",
    "start": "1866779",
    "end": "1873039"
  },
  {
    "text": "yeah you might guess that nothing good",
    "start": "1873559",
    "end": "1878679"
  },
  {
    "text": "so this is why you want to use cancellation token and I'll get to Juicy numbers shortly",
    "start": "1878840",
    "end": "1885500"
  },
  {
    "text": "basically what you want to do is when you're using web API and if anyone is",
    "start": "1885500",
    "end": "1890659"
  },
  {
    "text": "trapped with.net framework you can do that as well I know that unfortunately",
    "start": "1890659",
    "end": "1897860"
  },
  {
    "text": "so when you're doing cancellation token you can apply to to list async and that",
    "start": "1897860",
    "end": "1904159"
  },
  {
    "text": "will hook up to the cancellation token that is for that HTTP request so when",
    "start": "1904159",
    "end": "1909500"
  },
  {
    "text": "then HTTP request gets canceled it will also get canceled on the EF core",
    "start": "1909500",
    "end": "1915380"
  },
  {
    "text": "but there is a little bit more magic to it because if we look back to the same example we have the HTTP request he of",
    "start": "1915380",
    "end": "1923419"
  },
  {
    "text": "course sends the SQL to SQL server and SQL servers that's the process that request",
    "start": "1923419",
    "end": "1929960"
  },
  {
    "text": "when we do cancellation requests it's not just that dotnet star assess ah okay",
    "start": "1929960",
    "end": "1936980"
  },
  {
    "text": "I don't need to process this thing what also happens is that request gets pushed",
    "start": "1936980",
    "end": "1942919"
  },
  {
    "text": "to SQL server and SQL Server is like oh you don't need that anymore fine I'll stop",
    "start": "1942919",
    "end": "1949039"
  },
  {
    "text": "so what happens is they both stop say if somebody is spamming uh F5 now",
    "start": "1949039",
    "end": "1956360"
  },
  {
    "text": "this is going to be a bit of overhead but generally speaking things stop and you won't overload the system",
    "start": "1956360",
    "end": "1963200"
  },
  {
    "text": "because of that so what happens is here I intentionally",
    "start": "1963200",
    "end": "1969340"
  },
  {
    "text": "picked a query that will basically took longer than the timeout that that I put",
    "start": "1969340",
    "end": "1976159"
  },
  {
    "text": "so I put a timeout in one second and I basically did a query that literally",
    "start": "1976159",
    "end": "1981559"
  },
  {
    "text": "downloaded 7 million actually I think I did reduce the 2 million because I",
    "start": "1981559",
    "end": "1986779"
  },
  {
    "text": "actually wanted to use my computer anyways the point is um",
    "start": "1986779",
    "end": "1992480"
  },
  {
    "text": "I used a query that takes about two seconds and what happened is this so at the end",
    "start": "1992480",
    "end": "2002260"
  },
  {
    "text": "the latency ended up being 10 seconds per request on average which is pretty bad",
    "start": "2002260",
    "end": "2008399"
  },
  {
    "text": "uh and that's without cancellation tokens when I use cancellation tokens in",
    "start": "2008399",
    "end": "2014559"
  },
  {
    "text": "only half the five seconds so it wasn't like it was you know just two seconds or",
    "start": "2014559",
    "end": "2019840"
  },
  {
    "text": "just one seconds the system get got overloaded and with overloading it means that the",
    "start": "2019840",
    "end": "2028539"
  },
  {
    "text": "code actually starts to slow down in terms of execution and that also meant",
    "start": "2028539",
    "end": "2034360"
  },
  {
    "text": "that cancellation token didn't quite came as fast as they should go to",
    "start": "2034360",
    "end": "2040059"
  },
  {
    "text": "the.net part as well as SQL Server now here what we're talking about is trying",
    "start": "2040059",
    "end": "2046019"
  },
  {
    "text": "intentionally overloading the system to test how well this works",
    "start": "2046019",
    "end": "2052658"
  },
  {
    "text": "but all despite all of that it got two times faster",
    "start": "2052659",
    "end": "2058419"
  },
  {
    "text": "and the thing about this is this the cancellation one with the consension",
    "start": "2058419",
    "end": "2064000"
  },
  {
    "text": "token it took about 40 seconds to get back responsive and this is by me trying",
    "start": "2064000",
    "end": "2071020"
  },
  {
    "text": "to overload the machine when uh when I didn't have cancellation",
    "start": "2071020",
    "end": "2076419"
  },
  {
    "text": "token I couldn't move the mouse for 10 minutes",
    "start": "2076419",
    "end": "2082720"
  },
  {
    "text": "it was keep churning and churning and churning and I had to wait for every",
    "start": "2082720",
    "end": "2087878"
  },
  {
    "text": "single thing to be protest until the machine is even ready for me to move the mouse",
    "start": "2087879",
    "end": "2093878"
  },
  {
    "text": "so that's how bad it got and yes this is why I want to have cancellation tokens",
    "start": "2093879",
    "end": "2099839"
  },
  {
    "text": "and this is the easiest way if you don't Implement cancellation tokens how you",
    "start": "2099839",
    "end": "2104920"
  },
  {
    "text": "can DDOS a machine in fact you wouldn't even need to DDOS them if this stage is",
    "start": "2104920",
    "end": "2109960"
  },
  {
    "text": "just the denial service just you know you just Hammer F5 really quickly",
    "start": "2109960",
    "end": "2115780"
  },
  {
    "text": "that that would be the uh denial of service for this kind of uh endpoint",
    "start": "2115780",
    "end": "2121599"
  },
  {
    "text": "just hitting F5 all right now the last sin is the",
    "start": "2121599",
    "end": "2128500"
  },
  {
    "text": "inefficient update uh Slash delete now before EF course seven",
    "start": "2128500",
    "end": "2134619"
  },
  {
    "text": "this one was a bit harder to fix but with ef core 7 this one is now a lot",
    "start": "2134619",
    "end": "2141400"
  },
  {
    "text": "easier to fix so the problem with updating in EF core some of you may know is",
    "start": "2141400",
    "end": "2149619"
  },
  {
    "text": "you need to get data as tracking and then you need to do the changes",
    "start": "2149619",
    "end": "2155800"
  },
  {
    "text": "basically it means that you always have to make a select statement a select SQL statement and then update uh the thing",
    "start": "2155800",
    "end": "2163599"
  },
  {
    "text": "or delete them right so it's quite inefficient especially if you need to update 7 million records",
    "start": "2163599",
    "end": "2169660"
  },
  {
    "text": "that can take a long time remember that to list dot count about that amount of",
    "start": "2169660",
    "end": "2176920"
  },
  {
    "text": "time so instead now here I just did for fun",
    "start": "2176920",
    "end": "2182800"
  },
  {
    "text": "uh changing first name to last name um just for fun here we have a simple uh process of",
    "start": "2182800",
    "end": "2191320"
  },
  {
    "text": "changing first name and last name and what we have to do is get all of the people then we go to for each Loop and",
    "start": "2191320",
    "end": "2200380"
  },
  {
    "text": "then what we do is swap those properties around you can do whatever else you want to do",
    "start": "2200380",
    "end": "2207400"
  },
  {
    "text": "uh one common uh thing that's happening when we're talking about really large",
    "start": "2207400",
    "end": "2213099"
  },
  {
    "text": "data is basically just flipping a zero to a one feature talk link for instance",
    "start": "2213099",
    "end": "2218680"
  },
  {
    "text": "for all of the users you want to enable a feature or for instance your",
    "start": "2218680",
    "end": "2223960"
  },
  {
    "text": "processing data and then you say I processed all of the data up to that point and historically EF core didn't",
    "start": "2223960",
    "end": "2233020"
  },
  {
    "text": "have a good way of dealing with that problem uh you end up using raw SQL",
    "start": "2233020",
    "end": "2238839"
  },
  {
    "text": "instead if you um if you had to deal with big data because any other way it",
    "start": "2238839",
    "end": "2245500"
  },
  {
    "text": "just wasn't acceptable um but also you have here SQL statement as",
    "start": "2245500",
    "end": "2252579"
  },
  {
    "text": "well for each of the um each of the",
    "start": "2252579",
    "end": "2258099"
  },
  {
    "text": "employees we change there's a separate SQL statement so if you have 7 million",
    "start": "2258099",
    "end": "2264460"
  },
  {
    "text": "of records that means you'll have 7 million update statements and that thing",
    "start": "2264460",
    "end": "2271180"
  },
  {
    "text": "can grow really really big so instead what you can do is you can",
    "start": "2271180",
    "end": "2277599"
  },
  {
    "text": "actually just execute updates directly on SQL Server so what I'm doing here is",
    "start": "2277599",
    "end": "2284079"
  },
  {
    "text": "I'm just saying um for the uh for the employees uh table",
    "start": "2284079",
    "end": "2291119"
  },
  {
    "text": "uh execute this update and let me see I",
    "start": "2291119",
    "end": "2297640"
  },
  {
    "text": "and sap the property first default so first name to be last name now here",
    "start": "2297640",
    "end": "2304660"
  },
  {
    "text": "instead of this loss B dot last name you can just use a concrete number or",
    "start": "2304660",
    "end": "2311619"
  },
  {
    "text": "concrete string or whatever you want to set this property by but I'm showing this example",
    "start": "2311619",
    "end": "2319839"
  },
  {
    "text": "as setting an actual column because that's the common thing that happens in those",
    "start": "2319839",
    "end": "2326740"
  },
  {
    "text": "bulk updates is you want to update the existing column to be updated say you add an",
    "start": "2326740",
    "end": "2335380"
  },
  {
    "text": "additional thing or you want to add a number or swap say",
    "start": "2335380",
    "end": "2345300"
  },
  {
    "text": "um if it's true you want to put it that falls or fall if it's false you're trying to put into true and for that",
    "start": "2345460",
    "end": "2352720"
  },
  {
    "text": "those kind of Logics in EF core you need to get the data from the database you couldn't just uh do this simply and now",
    "start": "2352720",
    "end": "2361420"
  },
  {
    "text": "you have all of the tools to do that whether it's a fixed data you get",
    "start": "2361420",
    "end": "2367599"
  },
  {
    "text": "or if you need to reuse the data that the column supplies you",
    "start": "2367599",
    "end": "2374760"
  },
  {
    "text": "ah and also the SQL upnet is like really thin",
    "start": "2375339",
    "end": "2380859"
  },
  {
    "text": "like you have only one statement which is awesome so what happens here",
    "start": "2380859",
    "end": "2387460"
  },
  {
    "text": "is of course we're getting better performance which is great but one thing that is uh",
    "start": "2387460",
    "end": "2394780"
  },
  {
    "text": "very important here is um if you want to use astronaut tracking",
    "start": "2394780",
    "end": "2402339"
  },
  {
    "text": "for instance you don't want to um you don't want to have trackable",
    "start": "2402339",
    "end": "2407859"
  },
  {
    "text": "entities you want to be in control when and how the dot is updated in the",
    "start": "2407859",
    "end": "2414460"
  },
  {
    "text": "database this gives you not the tools to do this so basically what you can do is",
    "start": "2414460",
    "end": "2420040"
  },
  {
    "text": "you can choose that all of the currency do are non-trackable they're all of the",
    "start": "2420040",
    "end": "2425619"
  },
  {
    "text": "currency do don't impact safe changes because you want to be in control",
    "start": "2425619",
    "end": "2432400"
  },
  {
    "text": "and then if you have a very complicated case where you need to you know very",
    "start": "2432400",
    "end": "2439660"
  },
  {
    "text": "complicated catered uh relational structure then you choose to have it",
    "start": "2439660",
    "end": "2444700"
  },
  {
    "text": "tracking because one of the things that I'm looking into is",
    "start": "2444700",
    "end": "2450640"
  },
  {
    "text": "can we fully control of what goes from the SQL server not the mesh and what",
    "start": "2450640",
    "end": "2457720"
  },
  {
    "text": "goes into SQL Server database and this is for the first time this",
    "start": "2457720",
    "end": "2464500"
  },
  {
    "text": "actually gives us that control now if if you um just thinking about",
    "start": "2464500",
    "end": "2470320"
  },
  {
    "text": "okay how do I use this I'm I haven't been doing a lot of design patents and",
    "start": "2470320",
    "end": "2475660"
  },
  {
    "text": "stuff like that the important thing here to note is just you can just say update me this record",
    "start": "2475660",
    "end": "2481720"
  },
  {
    "text": "and update this property to that property without worrying about anything",
    "start": "2481720",
    "end": "2487200"
  },
  {
    "text": "all right mini best practices seven deadly sins those are one of the",
    "start": "2487660",
    "end": "2495339"
  },
  {
    "text": "worst things that I've seen in uh in production now there's some honorable mentions",
    "start": "2495339",
    "end": "2502780"
  },
  {
    "text": "first so first off have anyone seen uh a developer trying",
    "start": "2502780",
    "end": "2509680"
  },
  {
    "text": "to download the entire database just to see if there's any data",
    "start": "2509680",
    "end": "2515520"
  },
  {
    "text": "I've seen this more times than um I'm willing to admit",
    "start": "2515980",
    "end": "2521619"
  },
  {
    "text": "just use dot any please I don't want to see this anymore",
    "start": "2521619",
    "end": "2526720"
  },
  {
    "text": "you have literally here I actually looked at this code for one hour and I was just like",
    "start": "2526720",
    "end": "2533940"
  },
  {
    "text": "I was trying to get into that mindset and I was just like they probably just don't know what they did here it's all",
    "start": "2534640",
    "end": "2541119"
  },
  {
    "text": "good let's move on then what we have here is this one is",
    "start": "2541119",
    "end": "2548680"
  },
  {
    "text": "something that I'm just like okay I totally get uh where uh with the issues",
    "start": "2548680",
    "end": "2555579"
  },
  {
    "text": "here so what happens here is we're trying to apply a conditional",
    "start": "2555579",
    "end": "2563380"
  },
  {
    "text": "filter and what's with a lot of developers happens is either they're trying to do",
    "start": "2563380",
    "end": "2570880"
  },
  {
    "text": "over complicated weight loss because they don't know they can just store the",
    "start": "2570880",
    "end": "2575980"
  },
  {
    "text": "query into variable and then just you know do just multiple break clauses and",
    "start": "2575980",
    "end": "2582400"
  },
  {
    "text": "modified the query over time so they're trying to make that one big bang query",
    "start": "2582400",
    "end": "2589900"
  },
  {
    "text": "and get all of the data and everything that they couldn't fit in they're trying",
    "start": "2589900",
    "end": "2595060"
  },
  {
    "text": "to just process it later in memory so instead of doing that",
    "start": "2595060",
    "end": "2600339"
  },
  {
    "text": "you can just store your query into an i query ball and process as you go see for",
    "start": "2600339",
    "end": "2608619"
  },
  {
    "text": "instance over here we have cell ID if it's not null we add an additional",
    "start": "2608619",
    "end": "2615940"
  },
  {
    "text": "weight loss if it's not that's fine we skip it and",
    "start": "2615940",
    "end": "2621220"
  },
  {
    "text": "then at the end we do two lists so this is one thing that a lot of people didn't know is",
    "start": "2621220",
    "end": "2627880"
  },
  {
    "text": "you can do that and a really nice site effect of this is",
    "start": "2627880",
    "end": "2634180"
  },
  {
    "text": "that if sales sell ID is null um basically the SQL Server is",
    "start": "2634180",
    "end": "2641440"
  },
  {
    "text": "non-divisive it's not that weird thing where you dot where and then is if Cell",
    "start": "2641440",
    "end": "2647440"
  },
  {
    "text": "ID is not now then filtered by ID otherwise just",
    "start": "2647440",
    "end": "2655119"
  },
  {
    "text": "ignore this um and then if you have multiple optional statements like this the whole",
    "start": "2655119",
    "end": "2662800"
  },
  {
    "text": "query becomes so unreadable because then you need to think about okay uh why is",
    "start": "2662800",
    "end": "2668560"
  },
  {
    "text": "this ah okay this is optional what about this one this line uh okay this one doesn't look it's option ah no it is",
    "start": "2668560",
    "end": "2674920"
  },
  {
    "text": "optional here at the very end it just becomes really hard to read this and this is very easy to read I mean it",
    "start": "2674920",
    "end": "2682599"
  },
  {
    "text": "does expand a little bit in verticality but this is very simple code to read so",
    "start": "2682599",
    "end": "2688720"
  },
  {
    "text": "please don't over complicate their Clauses you can just you know string them slowly",
    "start": "2688720",
    "end": "2695880"
  },
  {
    "text": "now next one how many of you know about DB context Paul",
    "start": "2695920",
    "end": "2702280"
  },
  {
    "text": "very few hands Maybe seven okay",
    "start": "2702280",
    "end": "2707859"
  },
  {
    "text": "uh so DB context pool",
    "start": "2707859",
    "end": "2713079"
  },
  {
    "text": "good thing that I added so what DB context pool allows you to do is how",
    "start": "2713079",
    "end": "2719619"
  },
  {
    "text": "many of you actually know about hdb context poll also very few hands okay we need to talk",
    "start": "2719619",
    "end": "2726700"
  },
  {
    "text": "about that um okay so uh let me just explain the",
    "start": "2726700",
    "end": "2733260"
  },
  {
    "text": "xyzpool in.net if it comes from the Microsoft team that means that whatever",
    "start": "2733260",
    "end": "2739180"
  },
  {
    "text": "that thing is it's going to be reused if used correctly",
    "start": "2739180",
    "end": "2745119"
  },
  {
    "text": "what that means in this particular case is when you're trying to get the big context",
    "start": "2745119",
    "end": "2751359"
  },
  {
    "text": "and you add DB context pool it will try to recycle an existing one and the way",
    "start": "2751359",
    "end": "2758200"
  },
  {
    "text": "it's going to recycle is it will keep the connection to the SQL Server so it's",
    "start": "2758200",
    "end": "2763300"
  },
  {
    "text": "not going to be constantly closing and opening the database connection which if",
    "start": "2763300",
    "end": "2769540"
  },
  {
    "text": "some some of the SQL Server expert might know that connection can linger for a",
    "start": "2769540",
    "end": "2776380"
  },
  {
    "text": "little bit it can take a bit time to close down if you overwhelm the SQL Server all of",
    "start": "2776380",
    "end": "2782859"
  },
  {
    "text": "the sudden you can come to situations especially if you're not the only application using next signal server",
    "start": "2782859",
    "end": "2788680"
  },
  {
    "text": "that all of the sudden there's no connections to that SQL Server all of the sudden SQL",
    "start": "2788680",
    "end": "2794079"
  },
  {
    "text": "Server says hey I have already too many connections open and then you look at",
    "start": "2794079",
    "end": "2799240"
  },
  {
    "text": "how many connections are used you realize actually not many and that's because they're still closing",
    "start": "2799240",
    "end": "2805720"
  },
  {
    "text": "down so that improves that thing and as a",
    "start": "2805720",
    "end": "2811599"
  },
  {
    "text": "side effect you also have better performance and memory uh usage because it doesn't have to constantly initialize",
    "start": "2811599",
    "end": "2818560"
  },
  {
    "text": "and Destroy DB context a pool but the important reason why I'm adding",
    "start": "2818560",
    "end": "2824440"
  },
  {
    "text": "this is because of resiliency so if somebody is spamming F5",
    "start": "2824440",
    "end": "2830740"
  },
  {
    "text": "just this adding pool at the end of DB context in the um in the dependence",
    "start": "2830740",
    "end": "2838300"
  },
  {
    "text": "injection will improve your chance of your of your application being responsive",
    "start": "2838300",
    "end": "2843880"
  },
  {
    "text": "it will allow your application to more gracefully handle that load just adding",
    "start": "2843880",
    "end": "2849819"
  },
  {
    "text": "these four letters there's a little catch here all there",
    "start": "2849819",
    "end": "2856420"
  },
  {
    "text": "if you're using um depends injections on the DB context",
    "start": "2856420",
    "end": "2861579"
  },
  {
    "text": "well-being DB context pool you will have to rethink a little bit",
    "start": "2861579",
    "end": "2866800"
  },
  {
    "text": "how you add that dependency because the DB context pool is recycled",
    "start": "2866800",
    "end": "2872980"
  },
  {
    "text": "one easy way to do this is to just use an interface in your Di and then just manually inject",
    "start": "2872980",
    "end": "2881680"
  },
  {
    "text": "your dependencies when you instantiate the DB context that's the easiest way to do it but just",
    "start": "2881680",
    "end": "2888520"
  },
  {
    "text": "keep in mind your DB context is no longer",
    "start": "2888520",
    "end": "2893920"
  },
  {
    "text": "um your DB contest has to be stateless because it's going to be reused",
    "start": "2893920",
    "end": "2901599"
  },
  {
    "text": "another really cool thing tag width so what time grid does and you",
    "start": "2901599",
    "end": "2907180"
  },
  {
    "text": "should append it to as many queries as you can is it adds a comment to the SQL commands",
    "start": "2907180",
    "end": "2914020"
  },
  {
    "text": "that gets generated and the reason why this is really cool is if you have a query that is unusually bad",
    "start": "2914020",
    "end": "2922300"
  },
  {
    "text": "and all you see is that huge jumble of SQL and you're like okay uh we use this",
    "start": "2922300",
    "end": "2929619"
  },
  {
    "text": "table in that that thing and that and that column is like okay that could be",
    "start": "2929619",
    "end": "2936400"
  },
  {
    "text": "any of these queries over here we don't know which one this SQL statement uh",
    "start": "2936400",
    "end": "2942520"
  },
  {
    "text": "reflects to but if you use stag width you can just look at the uh the SQL",
    "start": "2942520",
    "end": "2948220"
  },
  {
    "text": "statement and it says Ah Yeah on the top we have the common you can just copy that Ctrl shift F and find exactly with",
    "start": "2948220",
    "end": "2955839"
  },
  {
    "text": "that link statement is now in before EF core 3.1 uh you had problems with",
    "start": "2955839",
    "end": "2963960"
  },
  {
    "text": "queries was split it uh so you wouldn't sometimes multiple",
    "start": "2963960",
    "end": "2969520"
  },
  {
    "text": "queries actually originated from the same link statement and in fact you can still do that but it's explicit you can",
    "start": "2969520",
    "end": "2976720"
  },
  {
    "text": "do a split uh query this tag width is included for both of",
    "start": "2976720",
    "end": "2983619"
  },
  {
    "text": "the both of the SQL generated code so when you try to copy it and you see",
    "start": "2983619",
    "end": "2990280"
  },
  {
    "text": "uh okay I have two queries with the same tag but in the code just only one you",
    "start": "2990280",
    "end": "2995380"
  },
  {
    "text": "now know that that's a link statement has been split into two queries",
    "start": "2995380",
    "end": "3002040"
  },
  {
    "text": "and that saves a lot of debugging trust me",
    "start": "3002040",
    "end": "3007260"
  },
  {
    "text": "and last bearness facts GPT so if you want to use chant GPT to",
    "start": "3007260",
    "end": "3015260"
  },
  {
    "text": "basically help you generate your queries or try to explain your queries and",
    "start": "3015260",
    "end": "3023160"
  },
  {
    "text": "things like that you can just say you on efco Expert and write whatever think you",
    "start": "3023160",
    "end": "3029579"
  },
  {
    "text": "want you can do DB context you can just paste the code if it's too long just",
    "start": "3029579",
    "end": "3035940"
  },
  {
    "text": "remove some lines you can just paste the entities there if it's too many just remove the ones",
    "start": "3035940",
    "end": "3042900"
  },
  {
    "text": "that are not used and even return types if you want to return something specific",
    "start": "3042900",
    "end": "3049500"
  },
  {
    "text": "now you might notice that the also set and clean code developer uh because what",
    "start": "3049500",
    "end": "3055800"
  },
  {
    "text": "I notice is if we don't do that some of the code that you get bad about back is",
    "start": "3055800",
    "end": "3062700"
  },
  {
    "text": "pretty terrible it works but it's terrible",
    "start": "3062700",
    "end": "3067800"
  },
  {
    "text": "so that's why this is the secret sauce clink uh clean code developer",
    "start": "3067800",
    "end": "3073400"
  },
  {
    "text": "now I have a very a lot better querying so if anyone is interested I can share",
    "start": "3073400",
    "end": "3078720"
  },
  {
    "text": "that one for you but it's a lot bigger and I also have one where you describe",
    "start": "3078720",
    "end": "3084180"
  },
  {
    "text": "code AS mantras and somehow is better than doing strict rules",
    "start": "3084180",
    "end": "3091319"
  },
  {
    "text": "but yeah he's a result result of one of the",
    "start": "3091319",
    "end": "3096599"
  },
  {
    "text": "queries so we have the UR efco expert and clean",
    "start": "3096599",
    "end": "3101819"
  },
  {
    "text": "code developer get all employee details for each get statistics on how many",
    "start": "3101819",
    "end": "3107339"
  },
  {
    "text": "products they sold how much they earned and list of sales they did all paginated",
    "start": "3107339",
    "end": "3116819"
  },
  {
    "text": "now with all of the stuff that you have seen today you probably will be able to",
    "start": "3116819",
    "end": "3122460"
  },
  {
    "text": "do a pretty good query on your first maybe second try",
    "start": "3122460",
    "end": "3127740"
  },
  {
    "text": "but JJ fatigue gun is pretty good on its first try and just took a few seconds to",
    "start": "3127740",
    "end": "3134280"
  },
  {
    "text": "do it um so yeah this this is actually pretty good uh query",
    "start": "3134280",
    "end": "3140339"
  },
  {
    "text": "um if I would send this in a pull request I'll probably just say yeah looks good",
    "start": "3140339",
    "end": "3146819"
  },
  {
    "text": "maybe add attack width um there is no s tracking here so maybe",
    "start": "3146819",
    "end": "3153359"
  },
  {
    "text": "add that considering we're just returning all of the data and probably not changing you probably won't do updates on a",
    "start": "3153359",
    "end": "3161119"
  },
  {
    "text": "tracked on a paginated query",
    "start": "3161119",
    "end": "3168900"
  },
  {
    "text": "so this is pretty good not that I remembered",
    "start": "3169619",
    "end": "3175380"
  },
  {
    "text": "how many of you know that when you do select statement that query is no longer",
    "start": "3175380",
    "end": "3180720"
  },
  {
    "text": "has no tracking we have one hand amazing",
    "start": "3180720",
    "end": "3186900"
  },
  {
    "text": "so yes technically speaking sorry yeah you can ask a question",
    "start": "3186900",
    "end": "3195260"
  },
  {
    "text": "ah yes uh so one of the good points is that if",
    "start": "3206040",
    "end": "3212819"
  },
  {
    "text": "um but one of the good points is that we can get",
    "start": "3212819",
    "end": "3218000"
  },
  {
    "text": "exactly as much data as we need now another the reason why I personally",
    "start": "3218000",
    "end": "3225000"
  },
  {
    "text": "still use S Note tracking even though the technically slack does that for me",
    "start": "3225000",
    "end": "3230579"
  },
  {
    "text": "is if instance here we have product name and we add an additional line where we",
    "start": "3230579",
    "end": "3236880"
  },
  {
    "text": "say product equal s dot product so we're taking the whole property of",
    "start": "3236880",
    "end": "3243359"
  },
  {
    "text": "product that property is technically tracked",
    "start": "3243359",
    "end": "3249000"
  },
  {
    "text": "so you have now introduced a property that's",
    "start": "3249000",
    "end": "3256079"
  },
  {
    "text": "like a lot of developers didn't know that that actually is tracked that is not tracked and if we",
    "start": "3256079",
    "end": "3262800"
  },
  {
    "text": "accidentally change that because you think oh yeah it's just a copy from the database it's as not tracking because of",
    "start": "3262800",
    "end": "3270000"
  },
  {
    "text": "the select and then you do save changes you might have inadvertently changed a data just because you thought that was",
    "start": "3270000",
    "end": "3276599"
  },
  {
    "text": "not tracking and if you add at the beginning as not tracking um I would need to double check that but",
    "start": "3276599",
    "end": "3283500"
  },
  {
    "text": "I think everything you access from it uh everything you do in the select",
    "start": "3283500",
    "end": "3288839"
  },
  {
    "text": "statement is not tracked this is why I do that despite select statement or",
    "start": "3288839",
    "end": "3295619"
  },
  {
    "text": "editing that a quick question then and then we'll continue",
    "start": "3295619",
    "end": "3300319"
  },
  {
    "text": "the client oh okay um uh sorry about that yeah",
    "start": "3311040",
    "end": "3316619"
  },
  {
    "text": "so what you were saying is if there's anything in the select statement that",
    "start": "3316619",
    "end": "3321780"
  },
  {
    "text": "cannot be recognized in",
    "start": "3321780",
    "end": "3327059"
  },
  {
    "text": "EF chord 2.2 backwards and I think still in 3.1 it",
    "start": "3327059",
    "end": "3334440"
  },
  {
    "text": "did get you all of the data I as far as I checked the last time e of course",
    "start": "3334440",
    "end": "3339660"
  },
  {
    "text": "seven it fills the query because it cannot be evaluated",
    "start": "3339660",
    "end": "3345859"
  },
  {
    "text": "uh on the SQL server or it is successful",
    "start": "3345859",
    "end": "3350940"
  },
  {
    "text": "provide that that it can only fetch that specific data but I think there is one",
    "start": "3350940",
    "end": "3357119"
  },
  {
    "text": "uh catch to this that there is one use case where it actually downloads the uh",
    "start": "3357119",
    "end": "3363119"
  },
  {
    "text": "the entire one row but I don't think it tries to download the entire database but this is",
    "start": "3363119",
    "end": "3370200"
  },
  {
    "text": "very uh very specific use case but uh thanks for that",
    "start": "3370200",
    "end": "3375900"
  },
  {
    "text": "um yes as no tracking can be sometimes very complicated and what you put in select statements especially if you're",
    "start": "3375900",
    "end": "3383160"
  },
  {
    "text": "trying to use something that is not supported on SQL Server can give you some unexpected results",
    "start": "3383160",
    "end": "3389420"
  },
  {
    "text": "but from ef ef Core 5 they try to minimize those impacts instead of uh you",
    "start": "3389420",
    "end": "3398400"
  },
  {
    "text": "know having very unexpected results your performance going down the toilet",
    "start": "3398400",
    "end": "3406140"
  },
  {
    "text": "um it basically just tells you hey I cannot execute that on SQL Server",
    "start": "3406140",
    "end": "3413119"
  },
  {
    "text": "all right I promise this at the last two slides with content",
    "start": "3413339",
    "end": "3418380"
  },
  {
    "text": "so then we can go for a nice dinner before we end",
    "start": "3418380",
    "end": "3423839"
  },
  {
    "text": "I want to just touch really quickly on how many people know what premature",
    "start": "3423839",
    "end": "3429960"
  },
  {
    "text": "optimization is we have a few hands okay",
    "start": "3429960",
    "end": "3435720"
  },
  {
    "text": "um so one important thing to know about this is essentially",
    "start": "3435720",
    "end": "3441839"
  },
  {
    "text": "if you worry about some of these things being premature optimization with spending too much time or fixing up this",
    "start": "3441839",
    "end": "3449640"
  },
  {
    "text": "kind of things generally speaking if he following good practices for the given scenarios",
    "start": "3449640",
    "end": "3456180"
  },
  {
    "text": "that's not premature optimization you should likely do that and when you have a method say an",
    "start": "3456180",
    "end": "3465420"
  },
  {
    "text": "endpoint for instance that is expected to have high load and you don't have time to do",
    "start": "3465420",
    "end": "3472440"
  },
  {
    "text": "performance improvements you should talk to your product owner and say hey we",
    "start": "3472440",
    "end": "3477540"
  },
  {
    "text": "either add this to acceptance criteria or we add the new PBI this is a high load endpoint it has to be dealt with it",
    "start": "3477540",
    "end": "3485520"
  },
  {
    "text": "has to be fast and lastly from uh from that section is",
    "start": "3485520",
    "end": "3492059"
  },
  {
    "text": "um when you know that something already causes a performance issues uh either it",
    "start": "3492059",
    "end": "3497819"
  },
  {
    "text": "could be Memory it could be time or it could be anything else to try to make a technical debt out of",
    "start": "3497819",
    "end": "3505079"
  },
  {
    "text": "it create a PBI or issue or task in your",
    "start": "3505079",
    "end": "3510359"
  },
  {
    "text": "systems put them into backlog make sure that you address them before you make a",
    "start": "3510359",
    "end": "3516420"
  },
  {
    "text": "major deployment and write that in the code make a",
    "start": "3516420",
    "end": "3523200"
  },
  {
    "text": "comment linking back to that issue and this is very important because this",
    "start": "3523200",
    "end": "3529559"
  },
  {
    "text": "is how you're getting those production issues where everyone is up awake on",
    "start": "3529559",
    "end": "3535200"
  },
  {
    "text": "Saturday night trying to figure out what's wrong and lastly what you should not do",
    "start": "3535200",
    "end": "3542460"
  },
  {
    "text": "we'll fix it later with no actions then just say fix it later as I said",
    "start": "3542460",
    "end": "3549839"
  },
  {
    "text": "before create the technical that put it on backlog and mark the code with a",
    "start": "3549839",
    "end": "3555960"
  },
  {
    "text": "comment we'll fix this later here's the issue link it to that issue",
    "start": "3555960",
    "end": "3563400"
  },
  {
    "text": "the reason for it is if things go bad on on the day that you release and everyone",
    "start": "3563400",
    "end": "3569880"
  },
  {
    "text": "is like we have no idea what's going on this is the first place you should look",
    "start": "3569880",
    "end": "3575000"
  },
  {
    "text": "if it's performance issue if your service just not responding and see what",
    "start": "3575000",
    "end": "3581160"
  },
  {
    "text": "you have missed because there's a good chance there's something you have forgotten about it and now you know",
    "start": "3581160",
    "end": "3587280"
  },
  {
    "text": "where it is and another thing a lot of developers",
    "start": "3587280",
    "end": "3592859"
  },
  {
    "text": "tell me ah if I fix this it's premature optimization and now look at the code",
    "start": "3592859",
    "end": "3598079"
  },
  {
    "text": "it's like mate this is bad code don't use premature optimization as a",
    "start": "3598079",
    "end": "3604380"
  },
  {
    "text": "bad excuse for bad God in worst case scenario you create a",
    "start": "3604380",
    "end": "3609960"
  },
  {
    "text": "tactical dad but you know you probably shouldn't want to leave Matt code in your codes so yeah please don't use that as an",
    "start": "3609960",
    "end": "3616619"
  },
  {
    "text": "excuse all right so here are the resources the",
    "start": "3616619",
    "end": "3622440"
  },
  {
    "text": "first thing is where you can try out all of the examples I did it did you can do",
    "start": "3622440",
    "end": "3627839"
  },
  {
    "text": "the benchmarks yourself the second one is Microsoft resources for EF core now",
    "start": "3627839",
    "end": "3635579"
  },
  {
    "text": "there is a section for performance when I started this talk most of the the",
    "start": "3635579",
    "end": "3642180"
  },
  {
    "text": "stuff that I was talking about today were not in it today most of the stuff",
    "start": "3642180",
    "end": "3647400"
  },
  {
    "text": "is in it and I'm super proud of Microsoft to add that the problem is nobody read those",
    "start": "3647400",
    "end": "3654180"
  },
  {
    "text": "so if you want to learn more go to that page it's awesome",
    "start": "3654180",
    "end": "3660740"
  },
  {
    "text": "also as ssw we have ssw rules so you can check our page about rules for Entity",
    "start": "3661020",
    "end": "3667799"
  },
  {
    "text": "framework and Link only to do some updates on it and also Nick chapsis has",
    "start": "3667799",
    "end": "3674640"
  },
  {
    "text": "a pretty good uh videos on EF core and you know lots of different things",
    "start": "3674640",
    "end": "3680819"
  },
  {
    "text": "actually got a bit of inspiration from him to do this Benchmark things to actually show you the impact that the",
    "start": "3680819",
    "end": "3688200"
  },
  {
    "text": "code does because I think that just hits harder and basically you're thinking",
    "start": "3688200",
    "end": "3693720"
  },
  {
    "text": "twice before you're leaving a bad Coating in your Repository",
    "start": "3693720",
    "end": "3699240"
  },
  {
    "text": "just leave for five more seconds",
    "start": "3699240",
    "end": "3703819"
  },
  {
    "text": "so how many of you have learned something new today a lot that's like 90 percent",
    "start": "3709020",
    "end": "3716880"
  },
  {
    "text": "almost the entire room awesome it's a key takeaways are only uh I have",
    "start": "3716880",
    "end": "3724440"
  },
  {
    "text": "limited myself to only free so that you can remember them I memorable is very very dangerous",
    "start": "3724440",
    "end": "3734160"
  },
  {
    "text": "you might see something in the EF code Microsoft documentation where it shows you something in normal use it only if",
    "start": "3734160",
    "end": "3741599"
  },
  {
    "text": "you understand why it's fast otherwise don't use I need",
    "start": "3741599",
    "end": "3747859"
  },
  {
    "text": "and Asthma tracking can give you a really good performance improvements for",
    "start": "3749059",
    "end": "3754920"
  },
  {
    "text": "almost no impact but make sure that you understand that anything that you'll do",
    "start": "3754920",
    "end": "3760500"
  },
  {
    "text": "with that data will not be modified in the database",
    "start": "3760500",
    "end": "3765720"
  },
  {
    "text": "and the last one I hope you've seen that we got from one",
    "start": "3765720",
    "end": "3770880"
  },
  {
    "text": "code that you know fetches some thought and then counts and then another code that just includes a table and you don't",
    "start": "3770880",
    "end": "3777420"
  },
  {
    "text": "know why it included that table to a code that actually tells you what's",
    "start": "3777420",
    "end": "3782579"
  },
  {
    "text": "going on and become more performant it was simpler to read and it did exactly what",
    "start": "3782579",
    "end": "3789359"
  },
  {
    "text": "you wanted see sometimes you can have the cake and eat it you just need to know how",
    "start": "3789359",
    "end": "3797420"
  },
  {
    "text": "and last part if you want I'll keep this slide at the end you can come to me and",
    "start": "3798420",
    "end": "3804359"
  },
  {
    "text": "scan it you can win some good prizes",
    "start": "3804359",
    "end": "3809359"
  },
  {
    "text": "you can find the presentation of the net I can give you the link later",
    "start": "3810240",
    "end": "3815940"
  },
  {
    "text": "thanks [Applause]",
    "start": "3815940",
    "end": "3824069"
  }
]