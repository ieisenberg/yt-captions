[
  {
    "text": "okay i think i will start my presentation",
    "start": "8080",
    "end": "13599"
  },
  {
    "text": "hopefully you can hear and see me and you can also see my",
    "start": "13599",
    "end": "18640"
  },
  {
    "text": "see my presentation as well if not please say something",
    "start": "18640",
    "end": "24880"
  },
  {
    "text": "hello everyone my name is matata mao i am a developer advocate at google",
    "start": "24880",
    "end": "30400"
  },
  {
    "text": "i'm actually based in london uh and it's right now it's um right after midnight in london so if",
    "start": "30400",
    "end": "37280"
  },
  {
    "text": "i sound a little bit sleepy uh it's because it's usually like past my bedtime but i'm happy to be",
    "start": "37280",
    "end": "43600"
  },
  {
    "text": "presenting here tonight um and today i will be talking to you about even",
    "start": "43600",
    "end": "48879"
  },
  {
    "text": "driven serverless architectures with kaneto and cloud run but uh before i start my talk",
    "start": "48879",
    "end": "55600"
  },
  {
    "text": "i tweet about this um clan native k-native uh kind of topics on my twitter",
    "start": "55600",
    "end": "62960"
  },
  {
    "text": "i also maintain a blog at amanda dev where i talk about kne2 quite a lot",
    "start": "62960",
    "end": "68640"
  },
  {
    "text": "and the presentation itself it's already on speaker deck so feel free to get it from there as well",
    "start": "68640",
    "end": "74799"
  },
  {
    "text": "in terms of questions i think we have plenty of time this talk is usually 40 minutes or so but we have one hour so",
    "start": "74799",
    "end": "81920"
  },
  {
    "text": "feel free to stop me and ask questions i will also check check the slack um",
    "start": "81920",
    "end": "89439"
  },
  {
    "text": "as we go along and see if there are any questions there but feel free to also if you can like",
    "start": "89439",
    "end": "95280"
  },
  {
    "text": "stop me and ask questions live as well that's fine with me as well all right",
    "start": "95280",
    "end": "100640"
  },
  {
    "text": "so let's get started um well we are since we are talking about k native and",
    "start": "100640",
    "end": "106560"
  },
  {
    "text": "cloud run which is a serverless way of running containers let's first do a",
    "start": "106560",
    "end": "112159"
  },
  {
    "text": "little definition of serverless and and containers and then we'll get into k native um",
    "start": "112159",
    "end": "117920"
  },
  {
    "text": "what i'm going to do is i will there are two parts okay native uh k native serving and kinetic eventing",
    "start": "117920",
    "end": "124000"
  },
  {
    "text": "um the point the the main point of the talk is kinetic eventing but before we can",
    "start": "124000",
    "end": "130399"
  },
  {
    "text": "get to kinetic eventing we need to understand k native itself a little bit so i'm going to be talking about k",
    "start": "130399",
    "end": "136239"
  },
  {
    "text": "native at the high level and i'm going to be talking about canada serving a little bit and show you a couple of",
    "start": "136239",
    "end": "142319"
  },
  {
    "text": "demos of kinetic serving so that you understand what it came into service is and then we'll get into kinetic eventing",
    "start": "142319",
    "end": "148560"
  },
  {
    "text": "and then i will show you what kinetic eventing provides in terms of event driven architectures",
    "start": "148560",
    "end": "154879"
  },
  {
    "text": "now for in terms of serverless when we think about serverless there's two ways of thinking about it um",
    "start": "154879",
    "end": "162160"
  },
  {
    "text": "first is the operational model um you know how do you actually run code in",
    "start": "162160",
    "end": "167840"
  },
  {
    "text": "a serverless way and in the operational model when you when we say serverless we",
    "start": "167840",
    "end": "174160"
  },
  {
    "text": "usually mean no infrastructure management meaning there's no",
    "start": "174160",
    "end": "179440"
  },
  {
    "text": "you know machines or servers to manage for our code to run we usually take",
    "start": "179440",
    "end": "186000"
  },
  {
    "text": "security granted at least at base level security so we don't have to worry about",
    "start": "186000",
    "end": "191840"
  },
  {
    "text": "you know blocking parts or you know worrying about um",
    "start": "191840",
    "end": "197200"
  },
  {
    "text": "if whether we have the latest operating system patches stuff like that um and then the best thing for",
    "start": "197200",
    "end": "203599"
  },
  {
    "text": "serverless for me in terms of my operational model is it's the payment model right",
    "start": "203599",
    "end": "209040"
  },
  {
    "text": "and in serverless you usually only pay for what you use you know usually these",
    "start": "209040",
    "end": "214799"
  },
  {
    "text": "serverless services they scale up as people use them but if no one uses them they scale down and when they don't run",
    "start": "214799",
    "end": "222400"
  },
  {
    "text": "you don't pay anything which is great now on the other hand in terms of the programming model when we are talking",
    "start": "222400",
    "end": "228799"
  },
  {
    "text": "about serverless we mean services um so it's service based",
    "start": "228799",
    "end": "235360"
  },
  {
    "text": "that are triggered by certain events so they're event driven um either this",
    "start": "235360",
    "end": "241200"
  },
  {
    "text": "event could be an http call or a pops up message or a storage kind of event but",
    "start": "241200",
    "end": "248159"
  },
  {
    "text": "either way that some event triggers your code and usually your code is stateless um",
    "start": "248159",
    "end": "255280"
  },
  {
    "text": "and the reason for this is that you know the serverless frameworks they",
    "start": "255280",
    "end": "260320"
  },
  {
    "text": "you they're usually elastic they scale up your service or container and they scale it down",
    "start": "260320",
    "end": "266160"
  },
  {
    "text": "and to be able to do that in in a quick way it's much better if this state",
    "start": "266160",
    "end": "271840"
  },
  {
    "text": "is external um so state is usually not in your in your code but it's",
    "start": "271840",
    "end": "277280"
  },
  {
    "text": "externalized that way you can scale up and down pretty quickly and then get",
    "start": "277280",
    "end": "282400"
  },
  {
    "text": "this state as you need it so that's roughly what i what we mean by serverless nowadays",
    "start": "282400",
    "end": "288800"
  },
  {
    "text": "on the other hand we have these other things called containers and what containers provide for us",
    "start": "288800",
    "end": "295600"
  },
  {
    "text": "is basically a context that we can replicate anywhere we want",
    "start": "295600",
    "end": "301759"
  },
  {
    "text": "this context it's what a container images",
    "start": "301759",
    "end": "306800"
  },
  {
    "text": "it basically includes your application it includes your application's dependencies and it includes",
    "start": "306800",
    "end": "313120"
  },
  {
    "text": "the environment that your application needs like the report um or any kind and other kind of",
    "start": "313120",
    "end": "319280"
  },
  {
    "text": "environment that you need and you put that in a docker file so you define a container image and then when you run",
    "start": "319280",
    "end": "325199"
  },
  {
    "text": "your container you can rely on this context so whether your container runs locally",
    "start": "325199",
    "end": "332880"
  },
  {
    "text": "in your machine or whether it runs you know in the cloud",
    "start": "332880",
    "end": "339039"
  },
  {
    "text": "it it has the exact same con the context and that's a great thing because with",
    "start": "339039",
    "end": "344560"
  },
  {
    "text": "that context uh consistent context you get reliability uh for your code",
    "start": "344560",
    "end": "350720"
  },
  {
    "text": "another great thing about containers is that you can use pretty much any language you want any library library",
    "start": "350720",
    "end": "356160"
  },
  {
    "text": "you want and there's a rich ecosystem around containers um for example there's",
    "start": "356160",
    "end": "361199"
  },
  {
    "text": "kubernetes to run containers there's istio to manage the traffic to your containers there's k-net that we'll talk",
    "start": "361199",
    "end": "368319"
  },
  {
    "text": "about to run containers in a serverless way right so when you think about it",
    "start": "368319",
    "end": "376000"
  },
  {
    "text": "when you start a project you had to make a choice at the beginning of your project",
    "start": "376000",
    "end": "381280"
  },
  {
    "text": "you either go with serverless and with serverless you get a lot of velocity um",
    "start": "381280",
    "end": "386800"
  },
  {
    "text": "because serverless abstracts a lot of things for you and with that you can you",
    "start": "386800",
    "end": "392720"
  },
  {
    "text": "can focus on your code and with that you can iterate fast so that's what i mean by velocity",
    "start": "392720",
    "end": "398160"
  },
  {
    "text": "but then there are certain times where serverless doesn't work for you you know",
    "start": "398160",
    "end": "403440"
  },
  {
    "text": "maybe you want to use a certain language and that language is not supported in the serverless runtime that you are",
    "start": "403440",
    "end": "409360"
  },
  {
    "text": "trying to run on um or you know maybe there's a use case that",
    "start": "409360",
    "end": "415599"
  },
  {
    "text": "you want to support but service framework doesn't allow you to do that for example there's usually some kind of timeouts",
    "start": "415599",
    "end": "421680"
  },
  {
    "text": "in serverless frameworks so if you need to run something long-running maybe you cannot do it in a serverless way so what",
    "start": "421680",
    "end": "427680"
  },
  {
    "text": "do you do when that happens you usually fall back to containers because you know you don't want to run your code on",
    "start": "427680",
    "end": "434240"
  },
  {
    "text": "physical machines or virtual machines anymore so the next best thing is put it in a container and try to run it in a",
    "start": "434240",
    "end": "440560"
  },
  {
    "text": "container you probably use something like kubernetes to manage a container um",
    "start": "440560",
    "end": "445919"
  },
  {
    "text": "so you get the flexibility with the containers but then you lose the",
    "start": "445919",
    "end": "450960"
  },
  {
    "text": "benefits of serverless and that and that's a shame because you know the serverless um it gives a lot of things",
    "start": "450960",
    "end": "457599"
  },
  {
    "text": "and it's a shame that you have to lose that with containers but thankfully um",
    "start": "457599",
    "end": "463520"
  },
  {
    "text": "the projects like k native and cloud run they try to solve this problem so they try to give",
    "start": "463520",
    "end": "469440"
  },
  {
    "text": "you tools so that you don't have to make this choice between servers and containers um k native it's an open source project",
    "start": "469440",
    "end": "477919"
  },
  {
    "text": "it was started by google but now a number of companies like red hat ibm and others they're contributing to the",
    "start": "477919",
    "end": "484639"
  },
  {
    "text": "native um and the whole premise okay native is to turn kubernetes into a serverless",
    "start": "484639",
    "end": "491440"
  },
  {
    "text": "framework so it provides a number of components that you you install onto whole kubernetes",
    "start": "491440",
    "end": "497680"
  },
  {
    "text": "and it it makes it so that you can deploy containers in a serverless way onto what",
    "start": "497680",
    "end": "503199"
  },
  {
    "text": "kubernetes and we'll look at what this means as we go along now k native is open source it runs",
    "start": "503199",
    "end": "510160"
  },
  {
    "text": "everywhere you can run kubernetes which means it can run on-prem it can run on",
    "start": "510160",
    "end": "515440"
  },
  {
    "text": "google cloud aws azure anywhere you can run kubernetes basically",
    "start": "515440",
    "end": "520560"
  },
  {
    "text": "but if you are running in google cloud there's two versions okay native called cloud run and cloud run on office uh",
    "start": "520560",
    "end": "527680"
  },
  {
    "text": "these are managed versions of k native uh cloud run it's a fully managed",
    "start": "527680",
    "end": "533200"
  },
  {
    "text": "version and the cloud runner on those is the version that runs on google kubernetes engine it's the one",
    "start": "533200",
    "end": "540320"
  },
  {
    "text": "um where you know people people if people want to stay in kubernetes ecosystem but they want to",
    "start": "540320",
    "end": "546720"
  },
  {
    "text": "run on google cloud they would choose cloud running outposts today's talk is mostly about k-nato open source",
    "start": "546720",
    "end": "553440"
  },
  {
    "text": "but everything i show you about k native they also work with cloud run",
    "start": "553440",
    "end": "558560"
  },
  {
    "text": "in an easier way because in cloud run you don't have to worry about clusters and managing things about the cluster",
    "start": "558560",
    "end": "566240"
  },
  {
    "text": "so i the point i want to make here is basically k native ecosystem is it's a",
    "start": "566240",
    "end": "571440"
  },
  {
    "text": "spectrum right you have the open source version that you can run anywhere but you have the managed versions as well so",
    "start": "571440",
    "end": "577920"
  },
  {
    "text": "they are more like services um and it's up to you basically where you want to be in the spectrum",
    "start": "577920",
    "end": "585040"
  },
  {
    "text": "the canadian stack looks like this um at the bottom layer you have kubernetes",
    "start": "585040",
    "end": "590320"
  },
  {
    "text": "on top you need to install a gateway because k native it doesn't try to solve",
    "start": "590320",
    "end": "596720"
  },
  {
    "text": "networking problems it doesn't try to figure out how to get traffic to your container",
    "start": "596720",
    "end": "602720"
  },
  {
    "text": "from the outside world to your container instead it relies on a gateway like steel or other gateways that you can",
    "start": "602720",
    "end": "608880"
  },
  {
    "text": "install um typically i've seen people use istio because that's the most fully fledged",
    "start": "608880",
    "end": "614640"
  },
  {
    "text": "gateway that works pretty well with kubernetes but you have choice here once you have kubernetes and the gateway",
    "start": "614640",
    "end": "620959"
  },
  {
    "text": "installed you install k-nato components decay native serving and kinetic eventing",
    "start": "620959",
    "end": "626560"
  },
  {
    "text": "um you don't have to install both if you need just canadian serving we can",
    "start": "626560",
    "end": "631760"
  },
  {
    "text": "just use that uh but if you want candy to eventing serving is the prerequisite so you need",
    "start": "631760",
    "end": "637040"
  },
  {
    "text": "to install serving and then event think you want to use eventing we'll look at both um so i'll look at serving briefly",
    "start": "637040",
    "end": "643680"
  },
  {
    "text": "and then we'll get into eventing after that which is the main point of talk uh and then as i mentioned",
    "start": "643680",
    "end": "649920"
  },
  {
    "text": "on top of k native itself there's other products that are being built like cloud run but um",
    "start": "649920",
    "end": "656320"
  },
  {
    "text": "other club providers they also have other products built on top okay native so if you are running in other clouds",
    "start": "656320",
    "end": "662800"
  },
  {
    "text": "make sure you check out what k-net implementations they have you probably want to use",
    "start": "662800",
    "end": "668000"
  },
  {
    "text": "the product that's been built on top of k-nato because k-native itself it's kind of like a platform but you know on top",
    "start": "668000",
    "end": "675680"
  },
  {
    "text": "of that you typically need a product um to be able to use k native in an easier",
    "start": "675680",
    "end": "681200"
  },
  {
    "text": "way and on google cloud this is collab run but as i mentioned in other clouds there's other implementations okay",
    "start": "681200",
    "end": "688959"
  },
  {
    "text": "all right so let's look at canada's serving first um one second",
    "start": "688959",
    "end": "694480"
  },
  {
    "text": "it's okay native serving what is it um in a nutshell canada serving allows you",
    "start": "695200",
    "end": "701120"
  },
  {
    "text": "to deploy containers in a serverless way and what i mean by serverless is that",
    "start": "701120",
    "end": "707519"
  },
  {
    "text": "you know in canada serving you say here's my container here's a configuration on my container",
    "start": "707519",
    "end": "713839"
  },
  {
    "text": "and then just deploy this container and then k-nato serving does all the underlying work for the",
    "start": "713839",
    "end": "720480"
  },
  {
    "text": "container to to work as a service uh so what it does is that it creates a",
    "start": "720480",
    "end": "726480"
  },
  {
    "text": "pot for the container then it configures the traffic so it configures istio traffic to get to the container",
    "start": "726480",
    "end": "733920"
  },
  {
    "text": "then once the containers up is up and running and the traffic the outside traffic can get to the container it sets",
    "start": "733920",
    "end": "740240"
  },
  {
    "text": "up automatic scaling so by default your container runs on a single pod but it can scale up to n and it can and it will",
    "start": "740240",
    "end": "748160"
  },
  {
    "text": "scale down to zero no one uses it after 60 seconds that's the default case so it sets up automatic scaling",
    "start": "748160",
    "end": "755040"
  },
  {
    "text": "every time you want to make a change to your container you can change the configuration and you",
    "start": "755040",
    "end": "761839"
  },
  {
    "text": "can deploy again and with that you get a new revision so there's revision management",
    "start": "761839",
    "end": "767680"
  },
  {
    "text": "you can have multiple revisions of your k native service and then once you have multiple revisions you can do traffic splitting",
    "start": "767680",
    "end": "774639"
  },
  {
    "text": "among those revisions right so this is what k native serving is in a nutshell it basically allows you to",
    "start": "774639",
    "end": "780959"
  },
  {
    "text": "deploy a container get traffic to it get it also auto scaled and get a basic configuration revision management and",
    "start": "780959",
    "end": "788079"
  },
  {
    "text": "traffic splitting um yes so the",
    "start": "788079",
    "end": "793839"
  },
  {
    "text": "k native serving building blocks i already kind of covered these but just to recap at the top layer you have a",
    "start": "793839",
    "end": "800560"
  },
  {
    "text": "native service um keep in mind that this is not kubernetes service in kubernetes there's no there's",
    "start": "800560",
    "end": "807839"
  },
  {
    "text": "also the notion of services but kubernetes services are kind of lower level than kinetic",
    "start": "807839",
    "end": "813600"
  },
  {
    "text": "services scanning to service is something it's a higher level api so you have your keynote service you have a",
    "start": "813600",
    "end": "820720"
  },
  {
    "text": "configuration of the service where you point to your container image your environment variables things like",
    "start": "820720",
    "end": "827440"
  },
  {
    "text": "that uh you deploy your service and configuration and you get a revision a snapshot of",
    "start": "827440",
    "end": "833839"
  },
  {
    "text": "that service and configuration and this revision will be pointed pointed from a route so route",
    "start": "833839",
    "end": "841680"
  },
  {
    "text": "defines how the traffic goes to which revision so by default every time you deploy a revision it gets all the",
    "start": "841680",
    "end": "848320"
  },
  {
    "text": "traffic now every time you change anything about the configuration you deploy again and you get a new",
    "start": "848320",
    "end": "854800"
  },
  {
    "text": "revision and the route will be updated to that revision right this is the default case but of course",
    "start": "854800",
    "end": "861279"
  },
  {
    "text": "um once you have multiple revisions you can change your route yourself here and you can",
    "start": "861279",
    "end": "866959"
  },
  {
    "text": "set rules yourself so you can say things like for example revision one gets fifty",
    "start": "866959",
    "end": "872079"
  },
  {
    "text": "percent of the traffic and revision two gets the other fifty percent okay so this is kennedy's serving so",
    "start": "872079",
    "end": "878560"
  },
  {
    "text": "let's just look at some examples of canada serving and then we'll get into canadian eventing after that",
    "start": "878560",
    "end": "883760"
  },
  {
    "text": "first of all i should mention that i have this k nature tutorial on github um i will share the link of this",
    "start": "883760",
    "end": "890079"
  },
  {
    "text": "tutorial at the end of the presentation as well and in this tutorial i show you how to set k native so how to install k",
    "start": "890079",
    "end": "896560"
  },
  {
    "text": "native and i have a setup script to set up k native on",
    "start": "896560",
    "end": "902639"
  },
  {
    "text": "google kubernetes engine i actually tested this tutorial with the latest version okay native as of today which is",
    "start": "902639",
    "end": "909120"
  },
  {
    "text": "0.18 and once you have canadian installed you",
    "start": "909120",
    "end": "914480"
  },
  {
    "text": "can check that it works by checking the pods okay native so let's actually do that and this is my google cloud console",
    "start": "914480",
    "end": "921920"
  },
  {
    "text": "and i'm looking i created a kubernetes engine on google cloud i installed istio",
    "start": "921920",
    "end": "927440"
  },
  {
    "text": "on top of the kubernetes engine already because it's still a gateway is also a prerequisite for canadian then i",
    "start": "927440",
    "end": "934399"
  },
  {
    "text": "installed k native latest version on top of that i'm using my tutorial scripts so",
    "start": "934399",
    "end": "940079"
  },
  {
    "text": "i have the i have this set up already let's just make sure that my pods are running so let's so here i am in my",
    "start": "940079",
    "end": "946399"
  },
  {
    "text": "console so what i'm going to do is i'm i'll just say quick city i'll get pots and then look at k native",
    "start": "946399",
    "end": "953040"
  },
  {
    "text": "serving uh namespace this is where k native serving gets installed i just want to make sure the pods they are",
    "start": "953040",
    "end": "959440"
  },
  {
    "text": "running and you can see that the pods are running so as you can see k native is just another application running on top of kubernetes and if you do knit",
    "start": "959440",
    "end": "967680"
  },
  {
    "text": "we see the kinetic event pods are running as well which is great okay so now k native is installed",
    "start": "967680",
    "end": "974079"
  },
  {
    "text": "and i want to deploy my container on k native what i need to do now first of all",
    "start": "974079",
    "end": "980480"
  },
  {
    "text": "i need to create my code uh in this case um i have a hello world example so let's",
    "start": "980480",
    "end": "986079"
  },
  {
    "text": "just quickly take a look at the code it's very simple um you can see that it's a there's a docker file because it's a container and",
    "start": "986079",
    "end": "992560"
  },
  {
    "text": "we're gonna deploy a container you can also see that the this is by the way this is c sharp but i also have a",
    "start": "992560",
    "end": "999519"
  },
  {
    "text": "python version uh you can use anything you want really any language you want as long as it's a container um",
    "start": "999519",
    "end": "1005519"
  },
  {
    "text": "in this code what i'm doing is that i am looking at the port environment variable and if it's there i will use that",
    "start": "1005519",
    "end": "1012720"
  },
  {
    "text": "um if not then i will bind to port 8080 this is a requirement okay native you",
    "start": "1012720",
    "end": "1019040"
  },
  {
    "text": "you need to bind zero zero zero zero and then you need to bind to port environment variable if it exists",
    "start": "1019040",
    "end": "1026160"
  },
  {
    "text": "um usually this points to 8080 but if not uh you can",
    "start": "1026160",
    "end": "1031438"
  },
  {
    "text": "also point other other things so that's why you need to read it and bind to that so that's one of the requirements okay negative so that's what i'm doing here",
    "start": "1031439",
    "end": "1037918"
  },
  {
    "text": "then in startup where i actually handle the requests um what i'm doing here is that um",
    "start": "1037919",
    "end": "1045038"
  },
  {
    "text": "sorry",
    "start": "1045039",
    "end": "1047360"
  },
  {
    "text": "what i'm doing here is that i am handling a get request i am reading an environment variable called target and if i see that target i",
    "start": "1050960",
    "end": "1058720"
  },
  {
    "text": "will just reply back saying hello tiget um if someone has a have a question",
    "start": "1058720",
    "end": "1066480"
  },
  {
    "text": "no okay i will continue so basically in here i get a get request and then i check the target environment variable",
    "start": "1066480",
    "end": "1073360"
  },
  {
    "text": "and then i'll just say hello that target environment variable so hello v1 v2 so this is my code it's",
    "start": "1073360",
    "end": "1079520"
  },
  {
    "text": "something very simple then to define a k-native service i define a service called yaml file now in",
    "start": "1079520",
    "end": "1087520"
  },
  {
    "text": "this service.yaml file first what you'll you'll realize is that",
    "start": "1087520",
    "end": "1092640"
  },
  {
    "text": "i'm using the k-native api so this is the kinetico api the kind is a service this is the name of my service hello",
    "start": "1092640",
    "end": "1098720"
  },
  {
    "text": "world this is the namespace so this is where this is the namespace that this service will be installed in this case",
    "start": "1098720",
    "end": "1105039"
  },
  {
    "text": "to the default namespace then i this is the configuration of my um candidate service the configuration",
    "start": "1105039",
    "end": "1112320"
  },
  {
    "text": "has an image that so this is the image that we are deploying hello world version one and",
    "start": "1112320",
    "end": "1118080"
  },
  {
    "text": "then the value um i'm also passing in an environment variable called target and the value is v1 so we're going to read",
    "start": "1118080",
    "end": "1124640"
  },
  {
    "text": "this target and we're going to print it out right so this is the definition of our canadian service and that's how you",
    "start": "1124640",
    "end": "1130240"
  },
  {
    "text": "deploy containers with 1080p so let's actually deploy this and see how how it works before i deploy it i'm going to watch",
    "start": "1130240",
    "end": "1137120"
  },
  {
    "text": "some things so i'm watching kubernetes spots candidate service configuration",
    "start": "1137120",
    "end": "1142559"
  },
  {
    "text": "revision and route so right now there's nothing installed yet so we don't have anything here",
    "start": "1142559",
    "end": "1148559"
  },
  {
    "text": "and then here let me make this smaller i want to deploy the first version of",
    "start": "1148559",
    "end": "1153760"
  },
  {
    "text": "service so we are deploying the first version our service as soon as we do this you",
    "start": "1153760",
    "end": "1160720"
  },
  {
    "text": "can see that k native realized that there's a new service that's been deployed so it created the service",
    "start": "1160720",
    "end": "1167840"
  },
  {
    "text": "um it created a configuration for the service it created a revision of the service and",
    "start": "1167840",
    "end": "1173440"
  },
  {
    "text": "this revision is generation one so it's the first revision it created the route",
    "start": "1173440",
    "end": "1179039"
  },
  {
    "text": "for my service and the route points to this url i set up zip.io which is a dummy domain service",
    "start": "1179039",
    "end": "1186160"
  },
  {
    "text": "for my service so i don't have to set up a real domain but that's what riot is pointing to and then it also created the",
    "start": "1186160",
    "end": "1192640"
  },
  {
    "text": "pod for my service so the port is also as you can see it's running so all the things that we talked about they can",
    "start": "1192640",
    "end": "1198000"
  },
  {
    "text": "into service configuration route um revision they're all created and the pod is also created and if i do a curl",
    "start": "1198000",
    "end": "1205440"
  },
  {
    "text": "to this url",
    "start": "1205440",
    "end": "1208480"
  },
  {
    "text": "you'll see that it's a television one so service um so the container is already getting traffic",
    "start": "1211120",
    "end": "1216559"
  },
  {
    "text": "from the outside world um if you ever did any kind of kubernetes deployment",
    "start": "1216559",
    "end": "1221760"
  },
  {
    "text": "and if you ever use istio you will realize that this is much easier than",
    "start": "1221760",
    "end": "1227200"
  },
  {
    "text": "using kubernetes and history directly you know normally if you want to use kubernetes and steer yourself you have",
    "start": "1227200",
    "end": "1232960"
  },
  {
    "text": "to create the pods yourself you have to create a deployment then in istio you have to create a gateway to",
    "start": "1232960",
    "end": "1238799"
  },
  {
    "text": "enable http and port 80 then from from the gateway you need to create a virtual",
    "start": "1238799",
    "end": "1244720"
  },
  {
    "text": "service to connect the virtual service to your kubernetes service so there's a lot of things you need to set up to get",
    "start": "1244720",
    "end": "1250320"
  },
  {
    "text": "things working whereas in k native you create a high level k native service and you point to your container and then the",
    "start": "1250320",
    "end": "1257360"
  },
  {
    "text": "rest is done for you basically now if i want to change anything about my service so let's look at service v2",
    "start": "1257360",
    "end": "1264480"
  },
  {
    "text": "in here what i'm doing is that i'm changing my environment variable and i'm changing the value of target from",
    "start": "1264480",
    "end": "1270480"
  },
  {
    "text": "version one to version two so i'm doing a configuration change so we can do that change and i'll play the change and see",
    "start": "1270480",
    "end": "1275919"
  },
  {
    "text": "what happens and then in service v3 we are changing the image so this image",
    "start": "1275919",
    "end": "1281919"
  },
  {
    "text": "now instead of pointing to version one or hello world it's pointing to version three of hello world so we are doing",
    "start": "1281919",
    "end": "1288000"
  },
  {
    "text": "code change here and the code basically what it does in version three is instead of saying hello it will say bye right so",
    "start": "1288000",
    "end": "1295840"
  },
  {
    "text": "that's the change that i'm doing uh so let's see how we can apply these changes so let's just apply service v2 first so",
    "start": "1295840",
    "end": "1304400"
  },
  {
    "text": "we are doing a configuration change one thing you'll realize is that first of all this co this pod is terminating this",
    "start": "1304400",
    "end": "1311360"
  },
  {
    "text": "is version one it's terminating because we haven't used version one for 60",
    "start": "1311360",
    "end": "1316720"
  },
  {
    "text": "seconds so it's scaling down to zero so as i mentioned k native has auto scaling by default so it's scaling down to zero",
    "start": "1316720",
    "end": "1323200"
  },
  {
    "text": "but at the same time we created a second revision our service so it's the second revision and you can see it's generation",
    "start": "1323200",
    "end": "1330000"
  },
  {
    "text": "two and then we have pods running for the second revision right now if i do a curl to the url you'll see that it says",
    "start": "1330000",
    "end": "1336960"
  },
  {
    "text": "hello v2 so we did a configuration change and we applied it and it's already up and running now if i want to",
    "start": "1336960",
    "end": "1342480"
  },
  {
    "text": "do a code change i will change the container image and we point to version",
    "start": "1342480",
    "end": "1349600"
  },
  {
    "text": "three or our service where it points to the new container and again you will see that a nav revision has been created",
    "start": "1349600",
    "end": "1356080"
  },
  {
    "text": "this is generation three and then the pod has also been created so if we do curl again now it says by v3 right so we",
    "start": "1356080",
    "end": "1364559"
  },
  {
    "text": "did a code change of course in the real world you don't change code like this",
    "start": "1364559",
    "end": "1369840"
  },
  {
    "text": "uh what you need to do is you need to you need to do do your code change then you need to deploy your service in a",
    "start": "1369840",
    "end": "1377039"
  },
  {
    "text": "separate url and then test out that service make sure that that the new version works and then gradually send",
    "start": "1377039",
    "end": "1383679"
  },
  {
    "text": "traffic to it um so maybe at some point you you want to do 50 percent of traffic",
    "start": "1383679",
    "end": "1389440"
  },
  {
    "text": "splitting between the new version and older version and then once you're happy with the new version you would send all",
    "start": "1389440",
    "end": "1394960"
  },
  {
    "text": "the traffic to it right so you will gradually send traffic to the new version uh canada makes this really easy",
    "start": "1394960",
    "end": "1400640"
  },
  {
    "text": "actually so first of all in canada there's something called named revisions uh one thing that you'll",
    "start": "1400640",
    "end": "1408240"
  },
  {
    "text": "realize here is that we have three revisions and they all have uh random names it's hello world dash some random",
    "start": "1408240",
    "end": "1415200"
  },
  {
    "text": "number you can actually give these proper names and by giving them proper revision names",
    "start": "1415200",
    "end": "1421360"
  },
  {
    "text": "you can split traffic in an easier way so let's see how we do that so in the service we won",
    "start": "1421360",
    "end": "1427679"
  },
  {
    "text": "pinned i i go back to version one of my service so i'm going back to version one but i",
    "start": "1427679",
    "end": "1434080"
  },
  {
    "text": "am also giving my service revision a name i call it hello world b1 this is",
    "start": "1434080",
    "end": "1439760"
  },
  {
    "text": "the name of my revision that i am naming myself and i'm also",
    "start": "1439760",
    "end": "1444880"
  },
  {
    "text": "specifying a traffic rule in this traffic rule i'm saying that 100 of the traffic",
    "start": "1444880",
    "end": "1450880"
  },
  {
    "text": "should go to this revision which is the region that i just defined here and anything else i deploy after this it",
    "start": "1450880",
    "end": "1457600"
  },
  {
    "text": "should not get any traffic right so that's what i'm defining here so let's apply this and see what happens",
    "start": "1457600",
    "end": "1465919"
  },
  {
    "text": "so now we are going back to revision one then you will see that the",
    "start": "1465919",
    "end": "1473039"
  },
  {
    "text": "difference in this case is that this revision has a proper name now hello world b1 right it has a proper name",
    "start": "1473039",
    "end": "1480159"
  },
  {
    "text": "um it's creating we are creating the pod for it as well and then if we do a curl back to the url we are back to version",
    "start": "1480159",
    "end": "1487679"
  },
  {
    "text": "one so all we did is we deployed version one but with a proper name now let's say",
    "start": "1487679",
    "end": "1492799"
  },
  {
    "text": "i have a new version called version four in this version four",
    "start": "1492799",
    "end": "1498159"
  },
  {
    "text": "i just change my variable from version 1 to version 4. i also give this revision name",
    "start": "1498159",
    "end": "1504960"
  },
  {
    "text": "the appropriate name hello world patch version 4 but then in the traffic rules i haven't",
    "start": "1504960",
    "end": "1510320"
  },
  {
    "text": "changed anything so hello world v1 still gets all the traffic and everything else",
    "start": "1510320",
    "end": "1516480"
  },
  {
    "text": "which is version 1 version 4 in this case is not giving any traffic still right so if you deploy",
    "start": "1516480",
    "end": "1522400"
  },
  {
    "text": "this what you will see is that service v4",
    "start": "1522400",
    "end": "1529360"
  },
  {
    "text": "what you will see is that we created version 4 so this is the newest version",
    "start": "1529360",
    "end": "1534480"
  },
  {
    "text": "there's also pods running for version 4. so everything is deployed but if i do a curl again",
    "start": "1534480",
    "end": "1540400"
  },
  {
    "text": "we are still at version one that hasn't changed but version four is deployed because if",
    "start": "1540400",
    "end": "1545679"
  },
  {
    "text": "i go to this url and at latest dash at the beginning",
    "start": "1545679",
    "end": "1550880"
  },
  {
    "text": "i can see that version four is running right so we did a silent deploy of version 4 and then we can go to this url and test",
    "start": "1550880",
    "end": "1557840"
  },
  {
    "text": "this url and make sure that everything works um but then the main url is still",
    "start": "1557840",
    "end": "1562960"
  },
  {
    "text": "pointing to version one right now at some point you'll you'll you will want to send traffic to version four and to",
    "start": "1562960",
    "end": "1569760"
  },
  {
    "text": "do that you just go to your service definition and then what you say is that you just",
    "start": "1569760",
    "end": "1574799"
  },
  {
    "text": "update your traffic rules and you say you know fifty percent of the time i want version one to get traffic and the",
    "start": "1574799",
    "end": "1580480"
  },
  {
    "text": "other fifty percent i will merging four to get traffic right so we are doing traffic splitting um and then if we",
    "start": "1580480",
    "end": "1586559"
  },
  {
    "text": "apply this late latest change service we want the four split",
    "start": "1586559",
    "end": "1593120"
  },
  {
    "text": "now nothing new is being created here because we already have version one and version four we already have the pods on",
    "start": "1593120",
    "end": "1598880"
  },
  {
    "text": "version one and version four but the only thing that's changed in this case is the route the rat is updated to point",
    "start": "1598880",
    "end": "1604799"
  },
  {
    "text": "to version one and version four fifty percent so if you do a curl again you",
    "start": "1604799",
    "end": "1609919"
  },
  {
    "text": "see that it says hello v4 electoral says hello v1 so roughly 50 of the time we'll",
    "start": "1609919",
    "end": "1615279"
  },
  {
    "text": "be going between version one and version four and then at some point if you are done with the service you can just say",
    "start": "1615279",
    "end": "1621039"
  },
  {
    "text": "hello um keep ctl bleed kubernetes service uh sorry you can enter service and hello world",
    "start": "1621039",
    "end": "1628320"
  },
  {
    "text": "and then this will delete the service and this will get rid of all the parts all the revisions and everything and we'll be back to where we were um",
    "start": "1628320",
    "end": "1635679"
  },
  {
    "text": "at the beginning of the talk right so the deposit terminating as well and that's it",
    "start": "1635679",
    "end": "1640799"
  },
  {
    "text": "all right so that's kind of the serving so hopefully this clarified what k native is and what candida serving",
    "start": "1640799",
    "end": "1647919"
  },
  {
    "text": "enables you to do now the second part okay native is canadian eventing and canadian eventing",
    "start": "1647919",
    "end": "1656880"
  },
  {
    "text": "it's basically it provides you building blocks to connect different event sources to",
    "start": "1656880",
    "end": "1663600"
  },
  {
    "text": "different event consumers using some kind of event flow in the middle right so it",
    "start": "1663600",
    "end": "1670559"
  },
  {
    "text": "gives you building blocks for that um these event sources they can be many different things and we'll talk about",
    "start": "1670559",
    "end": "1676320"
  },
  {
    "text": "that these event consumers they're either k native services or or they could be also",
    "start": "1676320",
    "end": "1682320"
  },
  {
    "text": "kubernetes services as well these event types um again they depend on what the event sources are but they",
    "start": "1682320",
    "end": "1688880"
  },
  {
    "text": "eventually get converted into something called cloud events and we'll talk about that and the delivery methods uh there's",
    "start": "1688880",
    "end": "1694960"
  },
  {
    "text": "basically a few different ways of getting events to your consumers and we'll go through those as well",
    "start": "1694960",
    "end": "1701600"
  },
  {
    "text": "so the terminology of cognitive eventing uh is basically you need to know about cloud events you need to know about",
    "start": "1701840",
    "end": "1708080"
  },
  {
    "text": "event sources uh there's brokers and triggers uh where that sets up how the events are",
    "start": "1708080",
    "end": "1714720"
  },
  {
    "text": "delivered there's services these are the consumers of the events and finally there's channels and",
    "start": "1714720",
    "end": "1720960"
  },
  {
    "text": "subscriptions um as you've seen channels and subscriptions i didn't highlight",
    "start": "1720960",
    "end": "1726080"
  },
  {
    "text": "them because they are typically not things that you should worry about they are usually set once or they're created under the covers",
    "start": "1726080",
    "end": "1733760"
  },
  {
    "text": "and you don't usually set them yourself so usually you need to worry about event sources brokers triggers and services",
    "start": "1733760",
    "end": "1741679"
  },
  {
    "text": "but in some cases you might need to think about channels and subscriptions as well so that's why i'm going to mention them as well but typically you",
    "start": "1741679",
    "end": "1748399"
  },
  {
    "text": "don't need to worry about them too much so let's go through these uh in this",
    "start": "1748399",
    "end": "1753440"
  },
  {
    "text": "order and then my plan is to go through them explain them out there and then",
    "start": "1753440",
    "end": "1758799"
  },
  {
    "text": "talk about delivery methods and then in the end i want to show you an event-driven demo where we'll bring",
    "start": "1758799",
    "end": "1765039"
  },
  {
    "text": "everything together and and i will show you somewhat of a real world uh application",
    "start": "1765039",
    "end": "1770799"
  },
  {
    "text": "where i use all these constructs to build an event-driven application so first of all the events going through",
    "start": "1770799",
    "end": "1777840"
  },
  {
    "text": "k native there are cloud events uh cloud event it's an open source uh eventing",
    "start": "1777840",
    "end": "1783279"
  },
  {
    "text": "definition from cncf so you can go to cloudevent.io to check it out",
    "start": "1783279",
    "end": "1788320"
  },
  {
    "text": "um in k native uh well first of all cloud event format is it's very simple um a",
    "start": "1788320",
    "end": "1794080"
  },
  {
    "text": "cloud event has basically is a small metadata part where you have the type of the",
    "start": "1794080",
    "end": "1800799"
  },
  {
    "text": "event the source of the event the id timestamp so typical things you expect",
    "start": "1800799",
    "end": "1806000"
  },
  {
    "text": "from an event that's what cloud event has and then the data field or client event has the actual payload for example",
    "start": "1806000",
    "end": "1813120"
  },
  {
    "text": "in this case you can see that we are reading different kinds of events into our cluster but then they get converted",
    "start": "1813120",
    "end": "1818320"
  },
  {
    "text": "into cloud events and data field in this case the github event will be in the",
    "start": "1818320",
    "end": "1823600"
  },
  {
    "text": "data field so once the event gets to the broker which is the entry point to to",
    "start": "1823600",
    "end": "1828799"
  },
  {
    "text": "native um the the event will be cloud event and that's nice because",
    "start": "1828799",
    "end": "1834080"
  },
  {
    "text": "it's a common format that we can rely on by the way cloud events they also have their sdks um so you can use this sdks",
    "start": "1834080",
    "end": "1842399"
  },
  {
    "text": "to read the actual cloud events but it's also very easy to construct a cloud event yourself so it's just an http call",
    "start": "1842399",
    "end": "1848240"
  },
  {
    "text": "with some headers you can set yourself and you can do it that way as well",
    "start": "1848240",
    "end": "1853520"
  },
  {
    "text": "so that's the format of the event um what kind of event you can what kind of events you can read into",
    "start": "1853520",
    "end": "1858799"
  },
  {
    "text": "your cluster well first of all you can produce events yourself within the cluster",
    "start": "1858799",
    "end": "1864640"
  },
  {
    "text": "so as i mentioned these cloud events you can construct them yourself either using the sdk or you or just using plain http",
    "start": "1864640",
    "end": "1871840"
  },
  {
    "text": "so you can have a pod that creates these events and sends these events to the broker so that's one",
    "start": "1871840",
    "end": "1877679"
  },
  {
    "text": "way of creating events but then the other way and the more kind of common way of getting events into",
    "start": "1877679",
    "end": "1884559"
  },
  {
    "text": "your cluster is using event sources and these event sources they're basically",
    "start": "1884559",
    "end": "1891279"
  },
  {
    "text": "things that pull external events into your cluster and then they convert these external",
    "start": "1891279",
    "end": "1896399"
  },
  {
    "text": "events into cloud events for you um the vendors go such as google cloud aws",
    "start": "1896399",
    "end": "1903120"
  },
  {
    "text": "they have these event sources that you install into your cluster and with these events you can read external",
    "start": "1903120",
    "end": "1909360"
  },
  {
    "text": "events such as aws events or google cloud events",
    "start": "1909360",
    "end": "1915200"
  },
  {
    "text": "this is not the full list by the way this is just a sample of what the events are you can go to this link and you can see all of the events",
    "start": "1915600",
    "end": "1922799"
  },
  {
    "text": "you can also write your own event sources so if you have something custom that you want to read into your cluster",
    "start": "1922799",
    "end": "1927919"
  },
  {
    "text": "you can write your own event source and pass it into your cluster okay so once you have your events in the",
    "start": "1927919",
    "end": "1934720"
  },
  {
    "text": "cluster you need to send them to to your services but before you do that you need",
    "start": "1934720",
    "end": "1941840"
  },
  {
    "text": "to send them to the namespace all the services and the entry point to the namespace is",
    "start": "1941840",
    "end": "1948080"
  },
  {
    "text": "called broker broker it's it gets injected into the namespace so",
    "start": "1948080",
    "end": "1954320"
  },
  {
    "text": "you label your namespace with this k native namespace injected label and once",
    "start": "1954320",
    "end": "1960000"
  },
  {
    "text": "you do that broker gets injected into your namespace and it will be waiting to receive messages so event sources will",
    "start": "1960000",
    "end": "1965840"
  },
  {
    "text": "basically pass the messages to the broker and broker also has a default url that's",
    "start": "1965840",
    "end": "1971279"
  },
  {
    "text": "accessible within the cluster so if you have something in the cluster that needs to send messages",
    "start": "1971279",
    "end": "1976399"
  },
  {
    "text": "it can use this url and get to the broker to send messages right so the events get to your names through",
    "start": "1976399",
    "end": "1983120"
  },
  {
    "text": "the broker then from the broker you want to send them to um",
    "start": "1983120",
    "end": "1988159"
  },
  {
    "text": "kubernetes okay native services and to do that you need to create a trigger uh a trigger",
    "start": "1988159",
    "end": "1994159"
  },
  {
    "text": "if it's the connection between the broker and the service um you typically create a filter because you don't want",
    "start": "1994159",
    "end": "2000960"
  },
  {
    "text": "your every service to receive every kind of message uh so what you do is you create a free filter and you tell what",
    "start": "2000960",
    "end": "2009039"
  },
  {
    "text": "type of messages you want to receive so in this case we are saying that we want to filter",
    "start": "2009039",
    "end": "2014240"
  },
  {
    "text": "messages with type google cloud storage object finalize so these are google cloud storage events",
    "start": "2014240",
    "end": "2020080"
  },
  {
    "text": "so we are basically looking at the cloud event and we are looking at the type field and we are making sure that the type is matching this one right but type",
    "start": "2020080",
    "end": "2027679"
  },
  {
    "text": "is not the only thing that you can filter you can filter with all the cloud event headers basically so once you filter",
    "start": "2027679",
    "end": "2034480"
  },
  {
    "text": "this event you will send to a subscriber and the subscriber it's a k native service called filter so we are sending",
    "start": "2034480",
    "end": "2041039"
  },
  {
    "text": "cloud storage events to uh service filter service okay so that's what this trigger does",
    "start": "2041039",
    "end": "2048158"
  },
  {
    "text": "and in the service it's either a k-native service so in trigger use credits you",
    "start": "2048159",
    "end": "2053919"
  },
  {
    "text": "mentioned a subscriber and this is either a k-native service typically it's a kind of service but it can be pure",
    "start": "2053919",
    "end": "2060240"
  },
  {
    "text": "kubernetes service as well so if you change the api revision from k native api to kubernetes api",
    "start": "2060240",
    "end": "2066638"
  },
  {
    "text": "it can be equivalent to service as well and then i mentioned this before but",
    "start": "2066639",
    "end": "2072960"
  },
  {
    "text": "channels um you don't necessarily need to worry about them all the time but",
    "start": "2072960",
    "end": "2078398"
  },
  {
    "text": "channels they define how the messages are persisted in your system uh by default you have an",
    "start": "2078399",
    "end": "2084560"
  },
  {
    "text": "in-memory channel meaning everything is in memory uh this is good for demos uh",
    "start": "2084560",
    "end": "2089599"
  },
  {
    "text": "but then if your broker goes down or if your services goes down um there's nothing persisted",
    "start": "2089599",
    "end": "2095599"
  },
  {
    "text": "so what you typically do in production is that you create a more persistent channel like kafka channel or pops",
    "start": "2095599",
    "end": "2100880"
  },
  {
    "text": "popsup channel and then you set this channel to the broker so that broker has an underlying persistence layer in case",
    "start": "2100880",
    "end": "2108320"
  },
  {
    "text": "something goes wrong right and then finally there's subscriptions",
    "start": "2108320",
    "end": "2113839"
  },
  {
    "text": "so for example here when we say subscriber in trigger is under the coverage creates a subscription and that",
    "start": "2113839",
    "end": "2120079"
  },
  {
    "text": "subscription sends the messages to the to the actual service so that's what subscription is really um and",
    "start": "2120079",
    "end": "2126480"
  },
  {
    "text": "satisfaction also makes a connection between between the channel and the actual subscriber uh but this happens",
    "start": "2126480",
    "end": "2132960"
  },
  {
    "text": "under the covers uh you don't typically create subscriptions yourself you just specify your service and it gets created",
    "start": "2132960",
    "end": "2139680"
  },
  {
    "text": "for you but i just want to mention it in case you want to you in case you see them and you're",
    "start": "2139680",
    "end": "2145280"
  },
  {
    "text": "going from what they are all right so these are the main building blocks for canadian eventing",
    "start": "2145280",
    "end": "2151680"
  },
  {
    "text": "now i want to talk about the different ways or the different ways you can send messages",
    "start": "2151680",
    "end": "2158000"
  },
  {
    "text": "within k native um and then we'll look at an example where we use some of these constructs",
    "start": "2158000",
    "end": "2165119"
  },
  {
    "text": "uh there's a few different ways in k native well on how you can send messages",
    "start": "2165119",
    "end": "2170880"
  },
  {
    "text": "one is called one is what i call simple delivery the other one is complex delivery and the",
    "start": "2170880",
    "end": "2176720"
  },
  {
    "text": "other one is broker and trigger delivery typically broker and trigger is the one",
    "start": "2176720",
    "end": "2182079"
  },
  {
    "text": "that you should care about because it does everything then others do as well but there are certain use cases where",
    "start": "2182079",
    "end": "2188480"
  },
  {
    "text": "the other two might be useful so that's why i'm mentioning them here but i'm going to be",
    "start": "2188480",
    "end": "2193520"
  },
  {
    "text": "showing you broker trigger delivery later in my demo but that's the one that you should really care about",
    "start": "2193520",
    "end": "2199520"
  },
  {
    "text": "so in simple delivery you connect an event source to a service directly with",
    "start": "2199520",
    "end": "2205440"
  },
  {
    "text": "nothing in the middle i call it simple because it's simple there's source and service and nothing else but it's also",
    "start": "2205440",
    "end": "2211200"
  },
  {
    "text": "very limited yeah in this case you can have only one source and one service",
    "start": "2211200",
    "end": "2216640"
  },
  {
    "text": "uh so you cannot do fan out and then there's no persistence either right so if source goes down or if the",
    "start": "2216640",
    "end": "2224079"
  },
  {
    "text": "service goes down the message gets lost there's no channel or anything like that in the middle to keep track of the",
    "start": "2224079",
    "end": "2230000"
  },
  {
    "text": "messages but for certain use cases this is this might be all you need for example in k native there's a",
    "start": "2230000",
    "end": "2238480"
  },
  {
    "text": "source called pin source and this ping source um basically just sends a message to it to the sync in",
    "start": "2238480",
    "end": "2246240"
  },
  {
    "text": "this case a service using a schedule right in that case you don't really care about if your message",
    "start": "2246240",
    "end": "2252880"
  },
  {
    "text": "is lost once in a while so maybe this this is useful and actually let me show you the code for this for example if you",
    "start": "2252880",
    "end": "2258240"
  },
  {
    "text": "want to do a direct connection from sync to source um",
    "start": "2258240",
    "end": "2264960"
  },
  {
    "text": "i have this in my tutorial so if you look at eventing um and under simple",
    "start": "2264960",
    "end": "2272160"
  },
  {
    "text": "you can see that i have a k native service and this k native service is just it's an event display so it just displays",
    "start": "2272160",
    "end": "2279200"
  },
  {
    "text": "um the received cloud events and the source is a ping source um",
    "start": "2279200",
    "end": "2286720"
  },
  {
    "text": "it's kind of like a cron that pings um the sync that you define this schedule",
    "start": "2286720",
    "end": "2293280"
  },
  {
    "text": "is like this which is a chrome schedule i think it means every minute and then you can also set up adjacent data so",
    "start": "2293280",
    "end": "2300000"
  },
  {
    "text": "what ping source does is that every minute it will send a cloud event with",
    "start": "2300000",
    "end": "2305040"
  },
  {
    "text": "this message in the body as the json data and the sync is",
    "start": "2305040",
    "end": "2310160"
  },
  {
    "text": "a canadian service right so this is a simple delivery model ping source to",
    "start": "2310160",
    "end": "2315599"
  },
  {
    "text": "uh give a candidate to service right and in this case maybe this is all you",
    "start": "2315599",
    "end": "2320880"
  },
  {
    "text": "need and you don't need to do anything more complicated so that's simple delivery uh in complex",
    "start": "2320880",
    "end": "2327760"
  },
  {
    "text": "server you can do fan out so what you do is you connect a source to a channel",
    "start": "2327760",
    "end": "2332960"
  },
  {
    "text": "like an in-memory channel or kafka channel or something like that and then you from the channel you create subscriptions and then you connect those",
    "start": "2332960",
    "end": "2339520"
  },
  {
    "text": "subscriptions to services and what this enables you to do is that when you send a message",
    "start": "2339520",
    "end": "2345839"
  },
  {
    "text": "that message is sent out to two services right so this enables fan out basically",
    "start": "2345839",
    "end": "2351280"
  },
  {
    "text": "and then there's also this notion of event revising k native so in this case for example we send we are sending a",
    "start": "2351280",
    "end": "2358000"
  },
  {
    "text": "message it gets fend out to two services and service two",
    "start": "2358000",
    "end": "2363839"
  },
  {
    "text": "when it receives a message it can reply back to that message and that reply can be",
    "start": "2363839",
    "end": "2370079"
  },
  {
    "text": "routed to other subscription other subscriptions and other channels so in this case we are routing it back",
    "start": "2370079",
    "end": "2376560"
  },
  {
    "text": "to subscription too that goes to another channel and the channel can have more other subscriptions and other services",
    "start": "2376560",
    "end": "2382240"
  },
  {
    "text": "attached to it so this way you can do more complicated things where one message triggers two services and then from savers too you",
    "start": "2382240",
    "end": "2388400"
  },
  {
    "text": "can trigger other services as well but one problem in this case is that",
    "start": "2388400",
    "end": "2393440"
  },
  {
    "text": "this is already getting too complicated right we have one source and three services",
    "start": "2393440",
    "end": "2399440"
  },
  {
    "text": "and then to connect everything together we need to create three subscriptions and two channels and we need to hook",
    "start": "2399440",
    "end": "2404960"
  },
  {
    "text": "them up together and i actually show you this if you go to my tutorial i show you how",
    "start": "2404960",
    "end": "2410480"
  },
  {
    "text": "to set this up in complex television reply",
    "start": "2410480",
    "end": "2416160"
  },
  {
    "text": "um i actually set this and you can see i create two channels and then i create a source",
    "start": "2416160",
    "end": "2422960"
  },
  {
    "text": "and then i create three two services then i need to create the subscriptions",
    "start": "2422960",
    "end": "2428960"
  },
  {
    "text": "and connect to those services then i need to create the third subscription and the service so you can see that it's",
    "start": "2428960",
    "end": "2434800"
  },
  {
    "text": "quite complicated to set things up properly and that's why we have this simple model",
    "start": "2434800",
    "end": "2439920"
  },
  {
    "text": "called broker and trigger delivery and in this model what you do is that",
    "start": "2439920",
    "end": "2445040"
  },
  {
    "text": "you send messages from source to a broker and broker is something that gets",
    "start": "2445040",
    "end": "2450800"
  },
  {
    "text": "injected into a namespace you just label your namespace a broker gets injected in",
    "start": "2450800",
    "end": "2456319"
  },
  {
    "text": "the namespace and then your services when they are interested",
    "start": "2456319",
    "end": "2461359"
  },
  {
    "text": "in certain types of messages all they need to do is they need to create triggers so in this case for",
    "start": "2461359",
    "end": "2466800"
  },
  {
    "text": "example service one creates a trigger and filters on this kind of messages same with service too and then each",
    "start": "2466800",
    "end": "2472800"
  },
  {
    "text": "service can also reply back just like here service stories are playing back and because we have triggers with",
    "start": "2472800",
    "end": "2478560"
  },
  {
    "text": "filters only service three will receive this second message right so when you look at this model and",
    "start": "2478560",
    "end": "2484960"
  },
  {
    "text": "and sorry and this model they are the same use case they are doing exactly the same thing",
    "start": "2484960",
    "end": "2490960"
  },
  {
    "text": "except in this case what you just what you need to do is much simply you just need to create",
    "start": "2490960",
    "end": "2497119"
  },
  {
    "text": "triggers with the right filters and everything else uh is done for you so that's why i suggest that broker and",
    "start": "2497119",
    "end": "2502560"
  },
  {
    "text": "trigger deliveries is better way of dealing with um setting up eventing",
    "start": "2502560",
    "end": "2508560"
  },
  {
    "text": "all right so let's knit the eventing delivery models and the last thing i want to mention is k-nated gcp project",
    "start": "2508560",
    "end": "2516800"
  },
  {
    "text": "so this is another open source project from google it's related to k native but",
    "start": "2516800",
    "end": "2521920"
  },
  {
    "text": "it's not part okay native um kennedy gcp uh it's",
    "start": "2521920",
    "end": "2527359"
  },
  {
    "text": "basically a repo that contains event sources from google cloud so if you want to read google cloud events into k",
    "start": "2527359",
    "end": "2534240"
  },
  {
    "text": "native you can you can install these event sources and they will pull the google cloud events for you",
    "start": "2534240",
    "end": "2540720"
  },
  {
    "text": "for example if you want to read google cloud pops up messages you can install cloud pops up source or you can if you",
    "start": "2540720",
    "end": "2546800"
  },
  {
    "text": "want to read storage events you can install cloud storage stores so on and so forth so i will mention this because",
    "start": "2546800",
    "end": "2553200"
  },
  {
    "text": "my demo uses these and they're useful if you in case you want to read google cloud events",
    "start": "2553200",
    "end": "2559760"
  },
  {
    "text": "all right so finally let's bring this all together so what i want to do here is that i want",
    "start": "2559760",
    "end": "2564880"
  },
  {
    "text": "to show you an app that i wrote over the lockdown where and this was back in",
    "start": "2564880",
    "end": "2571200"
  },
  {
    "text": "march and april when i'm i told you i am based in london and we had a lockdown",
    "start": "2571200",
    "end": "2578560"
  },
  {
    "text": "back in march and april and during the lockdown i found myself um",
    "start": "2578560",
    "end": "2584319"
  },
  {
    "text": "checking the corvette 19 cases in in uk quite often every day at 4 pm they would",
    "start": "2584319",
    "end": "2590800"
  },
  {
    "text": "publish numbers about coping cases for the for the day so i would go to this website and check the numbers when they",
    "start": "2590800",
    "end": "2597520"
  },
  {
    "text": "are published and then what i would do is that i would get the data for the day then i would combine it with the data",
    "start": "2597520",
    "end": "2602640"
  },
  {
    "text": "that i had for the month then i would create a chart uh to display the data so",
    "start": "2602640",
    "end": "2607920"
  },
  {
    "text": "i can see how the things are progressing if they're if if the rates are increasing or not",
    "start": "2607920",
    "end": "2613040"
  },
  {
    "text": "and and just look at the the chart that way and i would do the same thing next day um so after like a week or two i i said",
    "start": "2613040",
    "end": "2620000"
  },
  {
    "text": "to myself you know i'm doing this every single day so i might as well just try to automate like",
    "start": "2620000",
    "end": "2625839"
  },
  {
    "text": "every software engineer that tries to do automate things uh and then i decided to use k native because it's it is like a",
    "start": "2625839",
    "end": "2633119"
  },
  {
    "text": "schedule driven kind of thing like every day at a certain time i do i do a certain thing and there's distinct parts",
    "start": "2633119",
    "end": "2639040"
  },
  {
    "text": "too right you know i'm reading data i'm creating a chart and i'm looking at the chart",
    "start": "2639040",
    "end": "2644960"
  },
  {
    "text": "so what i did in this case is that i said okay let me just create some k native services to do this for me",
    "start": "2644960",
    "end": "2652000"
  },
  {
    "text": "so in this processing pipeline what i have is that first i set up class",
    "start": "2652000",
    "end": "2657440"
  },
  {
    "text": "scheduler which is class scheduler it's a scheduling service from google cloud",
    "start": "2657440",
    "end": "2663119"
  },
  {
    "text": "it's kind of like con on linux except it runs in the cloud i set up class scheduler to",
    "start": "2663119",
    "end": "2670480"
  },
  {
    "text": "send a message to my service in this case query runner",
    "start": "2670480",
    "end": "2675520"
  },
  {
    "text": "every day at 4 p.m with my with with a country data in this case the country data will be united",
    "start": "2675520",
    "end": "2681359"
  },
  {
    "text": "kingdom and query runner will take this data from cloud scheduler every day and",
    "start": "2681359",
    "end": "2686640"
  },
  {
    "text": "it will go and ask bigquery um about some data bigquery it's an it's a data",
    "start": "2686640",
    "end": "2693839"
  },
  {
    "text": "warehousing solution from google cloud where you can read your own data and run queries against that but the good thing",
    "start": "2693839",
    "end": "2700000"
  },
  {
    "text": "about bigquery is that it also has public data sets that you can you can ask things from",
    "start": "2700000",
    "end": "2706640"
  },
  {
    "text": "those public data sets their data sets about github about um",
    "start": "2706640",
    "end": "2711839"
  },
  {
    "text": "stack overflow things like that but it also has data sets for copy cases from",
    "start": "2711839",
    "end": "2717040"
  },
  {
    "text": "different countries so what i do here is that query runner runs um",
    "start": "2717040",
    "end": "2722079"
  },
  {
    "text": "this as bigquery runs the bigquery job and gets the data for you for the country",
    "start": "2722079",
    "end": "2727280"
  },
  {
    "text": "that's been passed in like united kingdom and then once it gets the data it says it's data into a temporary table",
    "start": "2727280",
    "end": "2733119"
  },
  {
    "text": "in bigquery that's that's what i do here and once it says the data it sends a custom cloud event back to the broker so",
    "start": "2733119",
    "end": "2740079"
  },
  {
    "text": "it sends a notification an event to broker and it says query completed meaning you know i run a query and i get",
    "start": "2740079",
    "end": "2747200"
  },
  {
    "text": "a table ready now this message gets read by another service called chart creator check creator it's",
    "start": "2747200",
    "end": "2754079"
  },
  {
    "text": "a python service that will receive this message and say okay there's new data it will go to bigquery and it will read the",
    "start": "2754079",
    "end": "2760880"
  },
  {
    "text": "data and it will generate a chart from the data using mathpotlib",
    "start": "2760880",
    "end": "2767440"
  },
  {
    "text": "library or python and once it generates this chart it will save into cloud",
    "start": "2767440",
    "end": "2774000"
  },
  {
    "text": "storage um cloud storage it's a object storage service from woocloud",
    "start": "2774000",
    "end": "2780000"
  },
  {
    "text": "so it will save that image there then you can set k native so that",
    "start": "2780000",
    "end": "2785040"
  },
  {
    "text": "whenever a file is saved into a bucket it can send and a cloud event to another",
    "start": "2785040",
    "end": "2791599"
  },
  {
    "text": "service now this third service will get this notification from the bucket",
    "start": "2791599",
    "end": "2796640"
  },
  {
    "text": "and it will use sendgrid which is an online um service to send emails so it will get",
    "start": "2796640",
    "end": "2804720"
  },
  {
    "text": "the notification there is a new chart and it will um use sengrit to send me an email right so",
    "start": "2804720",
    "end": "2811200"
  },
  {
    "text": "what will happen is that basically every day 4 pm i will get look at the data i would generate the charts and i'll get",
    "start": "2811200",
    "end": "2816880"
  },
  {
    "text": "an email with that chart right that's what this pipeline does and the beauty of this is that this whole",
    "start": "2816880",
    "end": "2823680"
  },
  {
    "text": "chain is uh event driven right it's driven by cloud scheduler but all",
    "start": "2823680",
    "end": "2829040"
  },
  {
    "text": "these services they're they're connecting via events they're async they don't really know about each other they",
    "start": "2829040",
    "end": "2834240"
  },
  {
    "text": "don't really care about each other they're totally disconnected now to set this up um",
    "start": "2834240",
    "end": "2840559"
  },
  {
    "text": "um let's see if if we can actually make this run",
    "start": "2840559",
    "end": "2845760"
  },
  {
    "text": "first let me go to eventing processing pipelines bigquery",
    "start": "2845760",
    "end": "2853359"
  },
  {
    "text": "by the way all of this is on github so in case you're interested you can take a look",
    "start": "2853359",
    "end": "2859599"
  },
  {
    "text": "so first i need to set my scheduler source so if you look at this scheduler source",
    "start": "2859599",
    "end": "2865359"
  },
  {
    "text": "uk you see that i'm using class schedules so i'm using the event source from",
    "start": "2865359",
    "end": "2871839"
  },
  {
    "text": "google cloud and then i'm deploying that to europe west and my",
    "start": "2871839",
    "end": "2876880"
  },
  {
    "text": "data is united kingdom so the message that this will send will have united kingdom is in its body the schedule is",
    "start": "2876880",
    "end": "2883040"
  },
  {
    "text": "16 so it's 4 pm every day it will send the message united kingdom in it and",
    "start": "2883040",
    "end": "2888559"
  },
  {
    "text": "where is it going to send it it's going to send to sync and this thing is a broker it's it's the broker in my name",
    "start": "2888559",
    "end": "2894079"
  },
  {
    "text": "space right so that's what this does let me create that scheduler uk",
    "start": "2894079",
    "end": "2902558"
  },
  {
    "text": "and then i also want to create an event source for storage events so if you look at the",
    "start": "2902960",
    "end": "2909760"
  },
  {
    "text": "storage charts this is using cloud storage source and other events from google cloud and then it's",
    "start": "2909760",
    "end": "2916640"
  },
  {
    "text": "looking at this bucket that i already created and then whenever there's a file that's saved into into this bucket it",
    "start": "2916640",
    "end": "2922319"
  },
  {
    "text": "will also send it to the broker right so let's create that as well",
    "start": "2922319",
    "end": "2929838"
  },
  {
    "text": "and then oh sorry then we have three services the query",
    "start": "2931280",
    "end": "2937839"
  },
  {
    "text": "runner the chart creator and notifier um i don't think we have time to go through",
    "start": "2937839",
    "end": "2942960"
  },
  {
    "text": "the code for these um but maybe i'll just show you one of them",
    "start": "2942960",
    "end": "2948400"
  },
  {
    "text": "so if you look at the coin runner um so if we go to eventing and um",
    "start": "2948400",
    "end": "2956359"
  },
  {
    "text": "processing pipeline bigquery and then under the query runner",
    "start": "2958640",
    "end": "2964319"
  },
  {
    "text": "it's c sharp code and then if you look at startup you will see that um",
    "start": "2964319",
    "end": "2971520"
  },
  {
    "text": "it receives a post request and then it creates a bigquery client",
    "start": "2971520",
    "end": "2977200"
  },
  {
    "text": "then it reads the client event it receives a client event it extracts the country from the cloud",
    "start": "2977200",
    "end": "2983040"
  },
  {
    "text": "event then i create i get i create from the country i create a table id then i",
    "start": "2983040",
    "end": "2989119"
  },
  {
    "text": "run the bigquery and then once i'm done i send a reply back",
    "start": "2989119",
    "end": "2995520"
  },
  {
    "text": "um so this is a this is a cloud event as well with the data set id and table id so i'm basically sending a cloud event",
    "start": "2995520",
    "end": "3002480"
  },
  {
    "text": "with the table id so that the next service in the chain knows where to look for the table so this is the kind of",
    "start": "3002480",
    "end": "3008240"
  },
  {
    "text": "code that you need to write to get things working um so let's look at code runner so the a",
    "start": "3008240",
    "end": "3015359"
  },
  {
    "text": "native service um it just corey around there pointing to it's pointing to the image of the query",
    "start": "3015359",
    "end": "3021359"
  },
  {
    "text": "runner and then if you look at the trigger",
    "start": "3021359",
    "end": "3026200"
  },
  {
    "text": "the trigger uh is filtering on scheduling events so it only cares about",
    "start": "3026960",
    "end": "3032960"
  },
  {
    "text": "scheduling events right and when once we see a scheduling event we send it to core manager service right so let's",
    "start": "3032960",
    "end": "3040400"
  },
  {
    "text": "create the service and the trigger then let's go to",
    "start": "3040400",
    "end": "3046319"
  },
  {
    "text": "chat creator it also has something similar the trigger and the",
    "start": "3046319",
    "end": "3052240"
  },
  {
    "text": "service um if you look at the trigger of the chat creator the only difference is that chat",
    "start": "3052240",
    "end": "3057839"
  },
  {
    "text": "creator is looking at this these messages the type of k-native samples query completed this is the",
    "start": "3057839",
    "end": "3063280"
  },
  {
    "text": "custom events i'm sending from current runner and this is what the chat creator gets right so that's what i'm tilting",
    "start": "3063280",
    "end": "3069119"
  },
  {
    "text": "here and then the third um one is the send grid one",
    "start": "3069119",
    "end": "3075280"
  },
  {
    "text": "so if i do keep still apply create the service and trigger",
    "start": "3075280",
    "end": "3081599"
  },
  {
    "text": "and if you look at the trigger again this is only um caring about the google cloud storage",
    "start": "3081599",
    "end": "3087280"
  },
  {
    "text": "events coming from the bucket and actually let's look at the pods now",
    "start": "3087280",
    "end": "3095640"
  },
  {
    "text": "let's look at the position like this you can see that i have some pods running already if i look at kubernetes uh k native services we have",
    "start": "3097599",
    "end": "3104880"
  },
  {
    "text": "the services and if you look at triggers they are ready as well now i can wait till 4pm to trigger this event but i can",
    "start": "3104880",
    "end": "3112880"
  },
  {
    "text": "also trigger the event manually if i do um gcloud",
    "start": "3112880",
    "end": "3118960"
  },
  {
    "text": "scheduler jobs list i can see that there's already a job that's been um",
    "start": "3118960",
    "end": "3127760"
  },
  {
    "text": "there's there's a job that's been scheduled um let me actually make sure i'm in the",
    "start": "3127760",
    "end": "3133200"
  },
  {
    "text": "right project and i'm in the right project and then i can trigger this job by saying scheduler",
    "start": "3133200",
    "end": "3140559"
  },
  {
    "text": "jobs run and passing the id",
    "start": "3140559",
    "end": "3145200"
  },
  {
    "text": "now the job is being triggered manually and we should also see",
    "start": "3147119",
    "end": "3152720"
  },
  {
    "text": "the pods are being created so you can see samples are terminated because we haven't used them for 60 seconds but",
    "start": "3152720",
    "end": "3158720"
  },
  {
    "text": "there is a pod that's been running so if you look at the coil runner port for example",
    "start": "3158720",
    "end": "3165640"
  },
  {
    "text": "we'll see that the coil runner um it received this cloud event which is",
    "start": "3168960",
    "end": "3174079"
  },
  {
    "text": "the scheduling event that has the custom data which has the country code basically where encoded and",
    "start": "3174079",
    "end": "3180880"
  },
  {
    "text": "then it extracts the country united kingdom and then it's running this bigquery",
    "start": "3180880",
    "end": "3186240"
  },
  {
    "text": "job and then once it's done it's replying back with this cloud event and then the",
    "start": "3186240",
    "end": "3192640"
  },
  {
    "text": "data is a is the data set id and table id right so it seems like it's working",
    "start": "3192640",
    "end": "3198319"
  },
  {
    "text": "and then if you look at the other parts they are also running uh you won't have to look at the logs of your own services",
    "start": "3198319",
    "end": "3205680"
  },
  {
    "text": "but if everything is working i should receive an email so let me just check my personal email",
    "start": "3205680",
    "end": "3213280"
  },
  {
    "text": "yes i already received one sec",
    "start": "3216240",
    "end": "3222359"
  },
  {
    "text": "so let me move this to the main page uh let's go here",
    "start": "3222559",
    "end": "3228400"
  },
  {
    "text": "so this is my email and hopefully you can see this",
    "start": "3228400",
    "end": "3233760"
  },
  {
    "text": "but basically i got a new email it says a new chat is available for you to view",
    "start": "3233760",
    "end": "3238800"
  },
  {
    "text": "and it points to the storage uh and then you can see the chat that's been created as well um",
    "start": "3238800",
    "end": "3244559"
  },
  {
    "text": "and and you can see that unfortunately we have more cases coming nowadays so that's why it's becoming steep in in the",
    "start": "3244559",
    "end": "3251119"
  },
  {
    "text": "uk all right so i think that's all i have for today",
    "start": "3251119",
    "end": "3256319"
  },
  {
    "text": "so as i mentioned if you want to get the slides it's already on speaker deck if you want to look at all the demos i",
    "start": "3256319",
    "end": "3262319"
  },
  {
    "text": "want to show they are on this github page with kenny tutorial and as i mentioned if you want to run",
    "start": "3262319",
    "end": "3267760"
  },
  {
    "text": "this on google you probably want to use cloud run and i have a separate cloud",
    "start": "3267760",
    "end": "3273200"
  },
  {
    "text": "tutorial for that as well thanks for listening and i will just pause here um",
    "start": "3273200",
    "end": "3278799"
  },
  {
    "text": "and see if anyone has any questions i will also check slack",
    "start": "3278799",
    "end": "3285240"
  }
]