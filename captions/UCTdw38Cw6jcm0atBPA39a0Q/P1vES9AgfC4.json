[
  {
    "text": "so um I'm Scott velan uh I have a website called f fund profit which is about F most examples in this talk will",
    "start": "6879",
    "end": "14440"
  },
  {
    "text": "actually be C because I don't want to put you off too much um I will post the",
    "start": "14440",
    "end": "19680"
  },
  {
    "text": "slides and the code I'm using on my website at iio edges it's not there yet",
    "start": "19680",
    "end": "25359"
  },
  {
    "text": "um but in the next week or so it should be posted up there so okay I'm going to talk about two things things first of",
    "start": "25359",
    "end": "30519"
  },
  {
    "text": "all I'm going to talk about how to avoid IO in your core domain uh and this is often called",
    "start": "30519",
    "end": "36920"
  },
  {
    "text": "functional core imperative shell and then um for the last few",
    "start": "36920",
    "end": "42480"
  },
  {
    "text": "minutes I'll talk about other ways of working with the io in terms of managing dependencies there's more ways to manage",
    "start": "42480",
    "end": "48559"
  },
  {
    "text": "them than using sort of dependency injection there are some couple other ways so I'll just quickly take you through those as well if you don't like",
    "start": "48559",
    "end": "54520"
  },
  {
    "text": "the main way of doing it five different ways in fact okay so why IO why am I",
    "start": "54520",
    "end": "61199"
  },
  {
    "text": "talking about IO so much um if you care about modeling your domain nicely if",
    "start": "61199",
    "end": "68240"
  },
  {
    "text": "you're doing domain with design or you're doing anything where you want your code to look nice IO is not part of that you know whether you save something",
    "start": "68240",
    "end": "75080"
  },
  {
    "text": "to a database or a file system or a cloud storage whatever that's not part of your business logic right it some",
    "start": "75080",
    "end": "82280"
  },
  {
    "text": "maybe sometimes is but almost always it isn't it's not not part of your domain so if you mix your IO in with your",
    "start": "82280",
    "end": "87920"
  },
  {
    "text": "domain logic it's harder to understand what's going on you just intermingled so it's not good um iio is",
    "start": "87920",
    "end": "94960"
  },
  {
    "text": "non-deterministic right that means every time you call an IO thing you might get",
    "start": "94960",
    "end": "100720"
  },
  {
    "text": "different results you read a record from a database who knows what you're going to get back you read something from the network you read something from file",
    "start": "100720",
    "end": "106799"
  },
  {
    "text": "system is very unpredictable so it's very hard to test and also IO can",
    "start": "106799",
    "end": "113079"
  },
  {
    "text": "fail right I mean it might crash you might throw an exception so if you're going to have IO in your code you you",
    "start": "113079",
    "end": "120000"
  },
  {
    "text": "have to handle exceptions to you know to have it production ready uh code so that's annoying so since IO is so bad my",
    "start": "120000",
    "end": "128599"
  },
  {
    "text": "recommendation is actually to avoid all IO in your code whatsoever so that's that would be a",
    "start": "128599",
    "end": "134400"
  },
  {
    "text": "really good design guideline um of course you know it's not actually possible to do this because at some",
    "start": "134400",
    "end": "139840"
  },
  {
    "text": "point you need to write to the database or whatever so you can't actually do it but if you pretend that you can if you",
    "start": "139840",
    "end": "146640"
  },
  {
    "text": "try and do it as much as possible I think that's a good design principle so rather than saying avoid all IO I'm",
    "start": "146640",
    "end": "153360"
  },
  {
    "text": "just going to say keep the I IO separate from the domain logic keep it away from the domain logic and that is possible",
    "start": "153360",
    "end": "160599"
  },
  {
    "text": "and I'll show you how to do that now if you look at a additional",
    "start": "160599",
    "end": "165640"
  },
  {
    "text": "enter layered architecture that was very common up until a few years ago um you",
    "start": "165640",
    "end": "172080"
  },
  {
    "text": "had this kind of layered thing and you start with the API the presentation layer and then it goes to the services or the application and then the domain",
    "start": "172080",
    "end": "178640"
  },
  {
    "text": "the business logic and you always have the database layer at the bottom right so the io is at the bottom it's the most",
    "start": "178640",
    "end": "185599"
  },
  {
    "text": "important thing because back in the day databases were the absolute most important thing so this this style is",
    "start": "185599",
    "end": "193519"
  },
  {
    "text": "kind of going out of fashion and one thing that's replacing it is vertical slices and one of the reasons is that in",
    "start": "193519",
    "end": "200680"
  },
  {
    "text": "this model every time you change something you have to change something in four places if you add a new field to",
    "start": "200680",
    "end": "206159"
  },
  {
    "text": "your customer you have to change the Json and you have to change the database and you have to change them you know",
    "start": "206159",
    "end": "211280"
  },
  {
    "text": "it's very complicated and and one of the rules is one of the good guidelines is code that changes together should be you",
    "start": "211280",
    "end": "218000"
  },
  {
    "text": "know live together right code that lives together should change together and vice versa so if you put them in slices like",
    "start": "218000",
    "end": "223360"
  },
  {
    "text": "this that's much better because if you change one thing you're not affecting all the other things so this is good and",
    "start": "223360",
    "end": "229319"
  },
  {
    "text": "I think there was a talk on this earlier today actually but from my point of view you still have IO at the bottom now if",
    "start": "229319",
    "end": "236480"
  },
  {
    "text": "you kind of disentangle this thing if you stretch it out horizontally you end up with something looking like this",
    "start": "236480",
    "end": "242920"
  },
  {
    "text": "where something some data comes in and it goes through the API or the presentation layer whatever and in the",
    "start": "242920",
    "end": "248959"
  },
  {
    "text": "middle is the database still so this is a database Centric",
    "start": "248959",
    "end": "254439"
  },
  {
    "text": "architecture right so I'm going to say that I prefer not to do that I like",
    "start": "254439",
    "end": "259560"
  },
  {
    "text": "domain driven design and I like putting the domain at the middle of my code and",
    "start": "259560",
    "end": "265040"
  },
  {
    "text": "not the database so let's not do this let's do this instead so this is what a domain",
    "start": "265040",
    "end": "270600"
  },
  {
    "text": "Centric architecture looks like you have your core domain all your business logic and all your rules and everything you",
    "start": "270600",
    "end": "277440"
  },
  {
    "text": "need to do to actually the logic of what you're doing and then on the outside is all the infrastructure the databases the",
    "start": "277440",
    "end": "284560"
  },
  {
    "text": "network the file system all that stuff is around the outside so if you have a particular",
    "start": "284560",
    "end": "290720"
  },
  {
    "text": "workflow or a story or a use case I'm going to use workflow to mean story use",
    "start": "290720",
    "end": "295880"
  },
  {
    "text": "case something like that so you have a particular workflow and it goes it cuts kind of cuts through it comes in from the",
    "start": "295880",
    "end": "301800"
  },
  {
    "text": "outside uh through the infrastructure layer and then it goes into the the core domain logic then it comes out the other",
    "start": "301800",
    "end": "308560"
  },
  {
    "text": "side so if you take that workflow and you look at it it's going to look like this right so all the io is at the edges",
    "start": "308560",
    "end": "316960"
  },
  {
    "text": "so again in this model iio is at the edges that's good we take one slice and",
    "start": "316960",
    "end": "322039"
  },
  {
    "text": "we have something that looks like this you do some IO then you do your business logic and then you do some more io on",
    "start": "322039",
    "end": "328120"
  },
  {
    "text": "the way out so that's that's exactly the point of this talk all the iio is at the edges so",
    "start": "328120",
    "end": "334840"
  },
  {
    "text": "this is great this is exactly what we want to do and typically I would say that most",
    "start": "334840",
    "end": "341680"
  },
  {
    "text": "business applications certainly have a very standard pattern you load some data up at the beginning of the workflow you",
    "start": "341680",
    "end": "347840"
  },
  {
    "text": "process it you make some decisions you decide what to do and then you save some data back at the end I mean I would say",
    "start": "347840",
    "end": "353840"
  },
  {
    "text": "I mean not always like this but I say most business applications like this this is kind of the classic crud style",
    "start": "353840",
    "end": "360000"
  },
  {
    "text": "thing and it it's fine so you know this will fit for most things you're",
    "start": "360000",
    "end": "366039"
  },
  {
    "text": "doing right so there we go now so okay that's the plan that's the theory how do",
    "start": "366039",
    "end": "371199"
  },
  {
    "text": "you actually do it in practice so before we do that before we get some guidelines for what's good and",
    "start": "371199",
    "end": "377680"
  },
  {
    "text": "bad design um I'm actually going to look at some good and bad design and you can come up with the guidelines yourself so",
    "start": "377680",
    "end": "384080"
  },
  {
    "text": "here is a function which adds two numbers right it's called addition and there are two input and one",
    "start": "384080",
    "end": "391840"
  },
  {
    "text": "output so my first question is it understandable how to use this function",
    "start": "391840",
    "end": "397639"
  },
  {
    "text": "without actually looking inside the Black Box given that I call it addition",
    "start": "397639",
    "end": "402720"
  },
  {
    "text": "and it's got two inputs and one output I mean you could probably guess how you know you put in two numbers and you get another number out right so I would I",
    "start": "402720",
    "end": "408599"
  },
  {
    "text": "would it's pretty understandable comprehensible just by looking at the inputs and outputs you can kind of get a",
    "start": "408599",
    "end": "414120"
  },
  {
    "text": "good idea of what's going on and is it testable I wanted to I wanted to test this piece of code how would I test it",
    "start": "414120",
    "end": "420520"
  },
  {
    "text": "well you know I pass it you know two and three and I hope to get five out the other end right that would be a very",
    "start": "420520",
    "end": "427280"
  },
  {
    "text": "easy way of testing this so you know you give the inputs and you expect the right output very testable that's very good so",
    "start": "427280",
    "end": "434080"
  },
  {
    "text": "I think this is a good design this is the kind of design that we want let's look at this one okay this is",
    "start": "434080",
    "end": "440759"
  },
  {
    "text": "another function called addition and there's no input and there's no",
    "start": "440759",
    "end": "446840"
  },
  {
    "text": "output I mean it's like okay so how would you even call this",
    "start": "446840",
    "end": "452120"
  },
  {
    "text": "function how would you even use it and it's like well I don't know cuz like where it's it's adding numbers where",
    "start": "452120",
    "end": "458360"
  },
  {
    "text": "these numbers coming from and is it testable how would you test a function like this there's no input there's no",
    "start": "458360",
    "end": "463960"
  },
  {
    "text": "output how can you even set expect you know it's like no you can't even test it",
    "start": "463960",
    "end": "469199"
  },
  {
    "text": "so this is what I would call a bad design okay there's no input and no output that's really",
    "start": "469199",
    "end": "475879"
  },
  {
    "text": "bad so and you think well who would even write a function with no input and no output and the answer is we all do and",
    "start": "475879",
    "end": "483000"
  },
  {
    "text": "I'm going to show you an example very shortly of a function I've written which looks just like this so you know when",
    "start": "483000",
    "end": "488919"
  },
  {
    "text": "you see the magic inputs are coming they're like magically appearing out of nowhere it's kind of fun but it's really",
    "start": "488919",
    "end": "495039"
  },
  {
    "text": "hard to understand what's going on so this I think this is anything like this is bad bad",
    "start": "495039",
    "end": "500440"
  },
  {
    "text": "design okay here's another mystery code function and there's an input which is",
    "start": "500440",
    "end": "505960"
  },
  {
    "text": "good but there's no output right so how how would you test this how would you how do you use this",
    "start": "505960",
    "end": "512159"
  },
  {
    "text": "again it's not really clear what it's doing I mean how can how can you do something and there's no output what",
    "start": "512159",
    "end": "517440"
  },
  {
    "text": "does that even mean so it looks like it's not doing anything it's really hard to test because there's no output to",
    "start": "517440",
    "end": "523120"
  },
  {
    "text": "check the results of so this is a bad design as well okay and and lastly let's",
    "start": "523120",
    "end": "529600"
  },
  {
    "text": "look at the other way around where you do have an output but there's no input so where is the output coming from it's",
    "start": "529600",
    "end": "535880"
  },
  {
    "text": "just like making stuff up so again I don't even know know what it's doing I don't know how to work with",
    "start": "535880",
    "end": "541600"
  },
  {
    "text": "it I don't know how to test it because I can't control the input it just give me in output that I don't even know where",
    "start": "541600",
    "end": "547320"
  },
  {
    "text": "it's coming from so this is a bad design too so we've got one good design and",
    "start": "547320",
    "end": "552760"
  },
  {
    "text": "three bad designs and the good design is the one we want to do and so let's look",
    "start": "552760",
    "end": "558200"
  },
  {
    "text": "at the guidelines for a good design so to make it",
    "start": "558200",
    "end": "564160"
  },
  {
    "text": "comprehensible we want everything to be explicit right we want all the inputs to be explicit and the output to be",
    "start": "564160",
    "end": "570360"
  },
  {
    "text": "explicit we don't want any magic numbers coming from somewhere we don't even know where they're coming from we we want to",
    "start": "570360",
    "end": "576839"
  },
  {
    "text": "have input parameters where it's like okay I pass in this and I pass in this and I get this output it just doesn't",
    "start": "576839",
    "end": "582000"
  },
  {
    "text": "you know that it just doesn't disappear right so that's good we also wanted to be deterministic meaning if I give you",
    "start": "582000",
    "end": "589200"
  },
  {
    "text": "you know two and three I expect to get five no if I always give you the same inputs I always expect to get the same",
    "start": "589200",
    "end": "595480"
  },
  {
    "text": "outputs I mean that's kind of common sense but you know you don't want to random number generator in there like",
    "start": "595480",
    "end": "601160"
  },
  {
    "text": "generating random numbers right that's not good so deterministic is good and also having no side effects is good",
    "start": "601160",
    "end": "607440"
  },
  {
    "text": "meaning it only does that one thing it adds two numbers together it doesn't launch missiles it doesn't delete the",
    "start": "607440",
    "end": "612760"
  },
  {
    "text": "database all that stuff right it just does that one thing really well so those last two things being deterministic and",
    "start": "612760",
    "end": "619320"
  },
  {
    "text": "not having side effects is what functional programs call Pure code so I'm going to use that word from now on",
    "start": "619320",
    "end": "625680"
  },
  {
    "text": "pure and um basically I'm going to use pure to mean all of these things where all the inputs are provided uh and it's",
    "start": "625680",
    "end": "632480"
  },
  {
    "text": "deterministic and it just does what it says on the tin it doesn't do anything else so this is what we want to have",
    "start": "632480",
    "end": "637760"
  },
  {
    "text": "happen right this is good if we follow this we should get good code now here's the problem IO does not meet these",
    "start": "637760",
    "end": "646680"
  },
  {
    "text": "guidelines so we talked about functions that have an input but the output there's no output right well you know",
    "start": "646680",
    "end": "653399"
  },
  {
    "text": "writing to the file or writing to the database updating a database I mean yeah they might have the number of Byes",
    "start": "653399",
    "end": "659360"
  },
  {
    "text": "written or something it's not very useful output you know basically when you write something to the file or to a",
    "start": "659360",
    "end": "665279"
  },
  {
    "text": "database you basically get no useful stuff back it just kind of disappears right so these are are bad",
    "start": "665279",
    "end": "672000"
  },
  {
    "text": "design they don't follow our guidelines so from my point of view these are bad things to have in your code now again",
    "start": "672000",
    "end": "677720"
  },
  {
    "text": "you have to have them in your code at some point but don't put them in your main code your domain code because you",
    "start": "677720",
    "end": "684160"
  },
  {
    "text": "won't be able to test them and what about codes uh what about functions that have an output but no",
    "start": "684160",
    "end": "690399"
  },
  {
    "text": "input we said that was a bad design because where's where's the stuff coming from well reading anything from a file",
    "start": "690399",
    "end": "696959"
  },
  {
    "text": "system reading something from the database generating a random number getting the current time these are all",
    "start": "696959",
    "end": "702240"
  },
  {
    "text": "things where data is kind of made up out of thin air and given back to you so",
    "start": "702240",
    "end": "707639"
  },
  {
    "text": "these are all unpredictable they're non-deterministic it's really hard to test them because there they got no",
    "start": "707639",
    "end": "713079"
  },
  {
    "text": "input right so these things are all bad things to have in your code so so hopefully I've persuaded you",
    "start": "713079",
    "end": "720639"
  },
  {
    "text": "that IO is a bad thing so the the the phrase functional",
    "start": "720639",
    "end": "726079"
  },
  {
    "text": "core imperative shell was used to to way of saying this that you want pure code you want",
    "start": "726079",
    "end": "733360"
  },
  {
    "text": "deterministic code in the middle and that's yes you have to have IO but you're going to keep the io around the edges and that that phrase by the way is",
    "start": "733360",
    "end": "740360"
  },
  {
    "text": "created by Bar Gary burnhard and he has a whole talk about it as well um so",
    "start": "740360",
    "end": "745519"
  },
  {
    "text": "that's the that's the vision right so now that we've have those guidelines about having all the explicit inputs and",
    "start": "745519",
    "end": "751199"
  },
  {
    "text": "having an output and having everything be predictable and deterministic let's actually refactor some",
    "start": "751199",
    "end": "758760"
  },
  {
    "text": "codes so again deterministic business logic non-deterministic IO so the",
    "start": "758760",
    "end": "765639"
  },
  {
    "text": "business logic another way you think about business logic is you're making decisions like given this data and this data and this data what should I do",
    "start": "765639",
    "end": "771560"
  },
  {
    "text": "should I save this thing should I send this message you know that's the logic you're doing right so let's look at the",
    "start": "771560",
    "end": "776959"
  },
  {
    "text": "first one this is a bad design and we're going to fix",
    "start": "776959",
    "end": "782079"
  },
  {
    "text": "it right so this is a function that compares two strings i' I've really trying to keep it as simple as possible",
    "start": "782079",
    "end": "788279"
  },
  {
    "text": "okay so what it does is it reads the first string from the console reads the second string from the",
    "start": "788279",
    "end": "794199"
  },
  {
    "text": "console it Compares them and if the first one's bigger it writes bigger and",
    "start": "794199",
    "end": "799399"
  },
  {
    "text": "if the first one's smaller it writes smaller and otherwise it writes equal right so this is a very simple",
    "start": "799399",
    "end": "804480"
  },
  {
    "text": "function now what's wrong with this design well",
    "start": "804480",
    "end": "810519"
  },
  {
    "text": "it fails our guidelines completely because if you look at the input there is no",
    "start": "810519",
    "end": "815720"
  },
  {
    "text": "input right it's it's got no input and if you look at the output there is no output it's a void returns void so how",
    "start": "815720",
    "end": "823440"
  },
  {
    "text": "can you even test this function right this is a really badly designed function I mean it's easy to write but from our",
    "start": "823440",
    "end": "829519"
  },
  {
    "text": "point of view it's really badly designed right it was exactly what I said that you shouldn't do what idiot would write",
    "start": "829519",
    "end": "835000"
  },
  {
    "text": "a function with no input and no output well we just did you know it's it's very easy to to do right so it's not",
    "start": "835000",
    "end": "841160"
  },
  {
    "text": "understandable if I give you this code it's not understandable how to use it because you don't even know where the strings are coming from they're they're",
    "start": "841160",
    "end": "846519"
  },
  {
    "text": "magic and can you test it no you can't test it right because you know there's no inputs and",
    "start": "846519",
    "end": "852720"
  },
  {
    "text": "no outputs so this is a really bad design so yeah we it's very easy to I",
    "start": "852720",
    "end": "858040"
  },
  {
    "text": "mean I'm making fun of designs that have no input and no output but it's actually really easy to write stuff like this if",
    "start": "858040",
    "end": "863240"
  },
  {
    "text": "you every time you have a thing that returns void if you have any methods that return void or any methods that have no inputs you've written code like",
    "start": "863240",
    "end": "870360"
  },
  {
    "text": "this right so right now let's see if we can fix it well first of all let's just",
    "start": "870360",
    "end": "876279"
  },
  {
    "text": "analyze this a little more here's all the code that does IO all the stuff in",
    "start": "876279",
    "end": "881360"
  },
  {
    "text": "yellow is doing IO right and then all the code in green",
    "start": "881360",
    "end": "887519"
  },
  {
    "text": "this is the code that's making decisions it's the logic part and you can see that",
    "start": "887519",
    "end": "893959"
  },
  {
    "text": "the logic and the decisions are mixed up with the the io side they",
    "start": "893959",
    "end": "899759"
  },
  {
    "text": "interleaved and it just makes the whole thing hard to understand I mean a lot of this code has nothing to do with the business it's all about how do I get the",
    "start": "899759",
    "end": "905720"
  },
  {
    "text": "strings you know how do I read the strings I don't care how you read the strings whether you read them from the database in the file I don't care the",
    "start": "905720",
    "end": "911600"
  },
  {
    "text": "logic is how do I compare two strings that's what I'm actually trying to get at so the first four lines are just a",
    "start": "911600",
    "end": "917160"
  },
  {
    "text": "waste of space so we've got this interleaved code and let's fix it by",
    "start": "917160",
    "end": "924160"
  },
  {
    "text": "separating the decisions from the io that's the way to fix this thing so",
    "start": "924160",
    "end": "929279"
  },
  {
    "text": "first thing I'm going to do is I'm going to create a special data type to represent the",
    "start": "929279",
    "end": "934800"
  },
  {
    "text": "decision in this case this is a very easy decision is actually I can just use an enum right so I've got an enum that",
    "start": "934800",
    "end": "940839"
  },
  {
    "text": "represents the three decisions I've made bigger smaller or equal and then I write my I take",
    "start": "940839",
    "end": "947759"
  },
  {
    "text": "basically the same code but I'm passing in the two strings I'm not getting them",
    "start": "947759",
    "end": "954240"
  },
  {
    "text": "from the console I'm actually passing them in as parameters and then in ter of writing to",
    "start": "954240",
    "end": "960160"
  },
  {
    "text": "the console when I've made my decision I'm not actually doing any IO I'm actually returning the",
    "start": "960160",
    "end": "967720"
  },
  {
    "text": "decision right so you can see I've got explicit inputs I've got two inputs right and I've got an explicit",
    "start": "967720",
    "end": "974720"
  },
  {
    "text": "decision being returned so this function has two inputs",
    "start": "974720",
    "end": "980199"
  },
  {
    "text": "and one output this is a very this this totally matches the guidelines that we want right it's very explicit inputs",
    "start": "980199",
    "end": "986560"
  },
  {
    "text": "there's no magic happening it's completely deterministic if I if I pass the same two strings in every time I'm always going to get the same answer",
    "start": "986560",
    "end": "993040"
  },
  {
    "text": "right so it's very easy to understand it's very easy to test so this is what it looks like using this diagram there's",
    "start": "993040",
    "end": "998720"
  },
  {
    "text": "two inputs and one output so this is really easy to test I mean I can literally write a test like this I can call this thing pass into two strings",
    "start": "998720",
    "end": "1005519"
  },
  {
    "text": "and I would expect to get back one of the enums right and I can literally just write",
    "start": "1005519",
    "end": "1011360"
  },
  {
    "text": "code so we've turned a function which is impossible to test into something which is easy to",
    "start": "1011360",
    "end": "1017360"
  },
  {
    "text": "test right and and and it's also much more explicit it's more it's more understandable because the enum actually",
    "start": "1017360",
    "end": "1023279"
  },
  {
    "text": "represents what the decision is it's actually telling me kind of in English what I'm actually doing rather than kind of hidden in the",
    "start": "1023279",
    "end": "1030600"
  },
  {
    "text": "io now of course we still need to get the data from the console so that's what I'm",
    "start": "1030600",
    "end": "1037520"
  },
  {
    "text": "calling the Shell Code so we've now got two pieces one is the kind of pure business logic right and now we're going",
    "start": "1037520",
    "end": "1043480"
  },
  {
    "text": "to write the shell which is the imperative part which actually does do the I/O so there's the same IO code we",
    "start": "1043480",
    "end": "1049080"
  },
  {
    "text": "had before we're getting the two strings but now I am calling this business",
    "start": "1049080",
    "end": "1054840"
  },
  {
    "text": "logic and I'm actually getting a result back and that's the enom I'm getting back with the three choices in it so now",
    "start": "1054840",
    "end": "1061559"
  },
  {
    "text": "my IO after I've got the result back from the business logic I can just do a switch on that enum and it's like if",
    "start": "1061559",
    "end": "1067520"
  },
  {
    "text": "it's bigger then I do the writing out and if it's smaller I write out something else and if it's equal I write something so the io is now separate from",
    "start": "1067520",
    "end": "1075320"
  },
  {
    "text": "the business logic and if we do this thing of coloring them in you can see that all this is all",
    "start": "1075320",
    "end": "1081640"
  },
  {
    "text": "IO this is all business logic and this is all IO so we actually have exactly",
    "start": "1081640",
    "end": "1087240"
  },
  {
    "text": "the pattern we wanted where there's IO business logic iio we've got that kind of sandwich right so this is a good",
    "start": "1087240",
    "end": "1094720"
  },
  {
    "text": "design so if you like little uh diagram I had there down at the bottom this",
    "start": "1094720",
    "end": "1100200"
  },
  {
    "text": "matches that diagram perfectly so this is good right so I'm not saying get rid of IO right I'm mean",
    "start": "1100200",
    "end": "1106720"
  },
  {
    "text": "saying you still have to do the io but the io is now separate from the business",
    "start": "1106720",
    "end": "1111960"
  },
  {
    "text": "logic now one of the nice things about doing this is that it makes it much more",
    "start": "1111960",
    "end": "1117039"
  },
  {
    "text": "flexible in terms of where do you get these things from so if you for example",
    "start": "1117039",
    "end": "1122240"
  },
  {
    "text": "you know the first one we get it from the console but maybe you want to get it from a database right so I don't know why you want to get it from database but",
    "start": "1122240",
    "end": "1128159"
  },
  {
    "text": "there you go so we have two different versions of this code and we have two",
    "start": "1128159",
    "end": "1133480"
  },
  {
    "text": "different sources of data or two and syncs for data now you say well how can i e switch between these two different",
    "start": "1133480",
    "end": "1141760"
  },
  {
    "text": "uh sources and if you're an object ored programmer you might say well let me",
    "start": "1141760",
    "end": "1146880"
  },
  {
    "text": "abstract out the differences right I'm going to abstract the way the differences I'm going to create an I'm",
    "start": "1146880",
    "end": "1152000"
  },
  {
    "text": "going to use inheritance I'm going to have some sort of interface some base class or an interface and I'm going to create a subass for the different data",
    "start": "1152000",
    "end": "1159400"
  },
  {
    "text": "sources I'm going to have one for reading from the console want I have another one from Reading from the database and because I want to mock this",
    "start": "1159400",
    "end": "1166120"
  },
  {
    "text": "maybe I'll have a mock one that you know or something I can play with for testing so I think this is actually too",
    "start": "1166120",
    "end": "1173559"
  },
  {
    "text": "complicated you don't have to make it so complicated you don't have to create an interface and all this stuff if you do",
    "start": "1173559",
    "end": "1179640"
  },
  {
    "text": "it this way if you do it my way with the the the business logic separate you don't need all this stuff if you do it",
    "start": "1179640",
    "end": "1186080"
  },
  {
    "text": "with the the the business logic in the middle pure business logic you can literally write the workflow the console",
    "start": "1186080",
    "end": "1192760"
  },
  {
    "text": "one you know reads from the thing and then does the business logic and writes the thing and then the database one",
    "start": "1192760",
    "end": "1198720"
  },
  {
    "text": "reads from the database and you know does the business logic and writes the database so you just write two different",
    "start": "1198720",
    "end": "1203840"
  },
  {
    "text": "implementations you don't need to have some generic abstract interface to share stuff so this is what people call",
    "start": "1203840",
    "end": "1211000"
  },
  {
    "text": "composition over inheritance right you're just building things from smaller pieces you don't have to have interance",
    "start": "1211000",
    "end": "1216960"
  },
  {
    "text": "and interfaces it just makes things complicated just like write it very straightforwardly and notice that we don't need any mock thing right the",
    "start": "1216960",
    "end": "1223919"
  },
  {
    "text": "business logic is unchanged we don't need interfaces and if we want to test it we can literally just call business",
    "start": "1223919",
    "end": "1228960"
  },
  {
    "text": "logic we don't need any special mock interface in order to call this stuff L you just call it I wrote the test",
    "start": "1228960",
    "end": "1235200"
  },
  {
    "text": "already right you don't need anything fancy for doing the tests so this is what I think is a much",
    "start": "1235200",
    "end": "1241039"
  },
  {
    "text": "much better way of doing this kind of stuff um here is here's the actual",
    "start": "1241039",
    "end": "1246440"
  },
  {
    "text": "example of the shell so the the changes between the console version and the database version would just be in the",
    "start": "1246440",
    "end": "1252240"
  },
  {
    "text": "Shell right the business logic does not change so here's the shell using the console with the with a right line and",
    "start": "1252240",
    "end": "1259760"
  },
  {
    "text": "so on right and then here's the same shell but different version of the shell",
    "start": "1259760",
    "end": "1265600"
  },
  {
    "text": "using database so whether I'm using a database or a console I just write two different implementations of the same",
    "start": "1265600",
    "end": "1271720"
  },
  {
    "text": "thing but the Core Business logic is unchanged chances are you're not ever",
    "start": "1271720",
    "end": "1277840"
  },
  {
    "text": "really going to need all these different things I mean again people leap to interfaces chances are you just rewrite",
    "start": "1277840",
    "end": "1283360"
  },
  {
    "text": "the whole thing if you need to switch from a console you're probably not going to need multiple different data source you might just want to change the code",
    "start": "1283360",
    "end": "1289480"
  },
  {
    "text": "to use a new data source but having two or three of them up and running at the same time is probably you know not so common really anyway so this is the nice",
    "start": "1289480",
    "end": "1296679"
  },
  {
    "text": "advantage of this the the business hasn't changed at all I don't care where you get the data from I don't care where",
    "start": "1296679",
    "end": "1302080"
  },
  {
    "text": "you put the data the business doesn't care because the business logic does not do iio at",
    "start": "1302080",
    "end": "1307760"
  },
  {
    "text": "all okay now let's do that's a very kind of fake um example let's do a better",
    "start": "1307760",
    "end": "1312960"
  },
  {
    "text": "example this is another example of an IO heavy code and in this case um",
    "start": "1312960",
    "end": "1319200"
  },
  {
    "text": "let's say that you uh are a member of a website and you're updating your profile",
    "start": "1319200",
    "end": "1324720"
  },
  {
    "text": "your customer profile on your website and it's your name and your email right so you fill in the form and you post it",
    "start": "1324720",
    "end": "1332240"
  },
  {
    "text": "to the website and you've got a new name and a new email what is the website going to do with that the back end well",
    "start": "1332240",
    "end": "1340000"
  },
  {
    "text": "um the first thing it's going to do is retrieve the existing data for you and the reason for that is like if nothing's",
    "start": "1340000",
    "end": "1346919"
  },
  {
    "text": "changed right if it compared sh's the new and old data if nothing's changed there's no point updating the database",
    "start": "1346919",
    "end": "1352440"
  },
  {
    "text": "maybe you double click the button or something there's no point updating the database twice if you if nothing's",
    "start": "1352440",
    "end": "1358600"
  },
  {
    "text": "changed now if the name and email has changed then yes we do need to update the",
    "start": "1358600",
    "end": "1364360"
  },
  {
    "text": "database and finally if you've changed your email we probably want to send you one of those verification messages",
    "start": "1364360",
    "end": "1370000"
  },
  {
    "text": "saying you know do prove that you own this email by clicking on the link right so we've got three choices of things we",
    "start": "1370000",
    "end": "1376760"
  },
  {
    "text": "need to do either do nothing just update the database or update the database and",
    "start": "1376760",
    "end": "1382120"
  },
  {
    "text": "send an email right so this is a little bit more realistic obviously to fit into a slide it's going to be you know less",
    "start": "1382120",
    "end": "1388919"
  },
  {
    "text": "complicated than the we one but you get the basic idea here so what I'm going to do is actually go to real code",
    "start": "1388919",
    "end": "1395480"
  },
  {
    "text": "now so this is my implementation of this right so here I have my update",
    "start": "1395480",
    "end": "1403000"
  },
  {
    "text": "customer and I'm passing in one parameter the customer and notice this is an a",
    "start": "1403000",
    "end": "1408960"
  },
  {
    "text": "method because this whole thing is this customer database is everything is async so I get the existing customer and I'm",
    "start": "1408960",
    "end": "1416520"
  },
  {
    "text": "checking is anything changed and if something's changed then I update the customer and if the email has changed as",
    "start": "1416520",
    "end": "1422919"
  },
  {
    "text": "well I also create a new email message so here I'm constructing an email message with the with the subject line",
    "start": "1422919",
    "end": "1430360"
  },
  {
    "text": "everything I want to send and then I just call the email server and send the message right so this is my impure",
    "start": "1430360",
    "end": "1438000"
  },
  {
    "text": "version where the uh iio is mixed in with the business",
    "start": "1438000",
    "end": "1443679"
  },
  {
    "text": "logic and again if you look at this it turns void I mean there is one",
    "start": "1443679",
    "end": "1448840"
  },
  {
    "text": "input but you know it's not clear that there's any any other inputs needed for",
    "start": "1448840",
    "end": "1454000"
  },
  {
    "text": "this thing so there's one input and it's also ret turning void so I can't really test this this is I mean how would I",
    "start": "1454000",
    "end": "1459240"
  },
  {
    "text": "even test this piece of code right so let's refactor it to not do",
    "start": "1459240",
    "end": "1465200"
  },
  {
    "text": "that so what I'm going to do here is I'm going to do the same thing I did before",
    "start": "1465200",
    "end": "1470240"
  },
  {
    "text": "I'm going to start off by creating a decision a special data structure to hold a decision and here I've got three",
    "start": "1470240",
    "end": "1477000"
  },
  {
    "text": "choices again I've got an enum right either do nothing or update the customer or do both and in this case there some extra",
    "start": "1477000",
    "end": "1484679"
  },
  {
    "text": "data for each decision I might need some extra data so in the case of updating the customer I need to know what",
    "start": "1484679",
    "end": "1491080"
  },
  {
    "text": "customer update and if I'm sending email I also need to know what the email to send is so I'm creating a little record",
    "start": "1491080",
    "end": "1498080"
  },
  {
    "text": "here so it's got the enum here but it's also got the customer data",
    "start": "1498080",
    "end": "1503880"
  },
  {
    "text": "to send and the email message to send now these are nullable because they're not applicable in every situation you",
    "start": "1503880",
    "end": "1509399"
  },
  {
    "text": "could implement this using subclasses if you wanted to be a bit better but um I'm just being kind of lazy here but you",
    "start": "1509399",
    "end": "1515080"
  },
  {
    "text": "know you get the idea i' I've just gone to I've just made a a very simple data structure to represent the decision that",
    "start": "1515080",
    "end": "1520200"
  },
  {
    "text": "I'm taking so now if I look at the this new",
    "start": "1520200",
    "end": "1526320"
  },
  {
    "text": "version both customers are part passed in right I'm the fact that the second",
    "start": "1526320",
    "end": "1531440"
  },
  {
    "text": "customer has been loaded uh from the database that I'm not doing that here I'm doing it outside and",
    "start": "1531440",
    "end": "1538080"
  },
  {
    "text": "passing in both customers right so this this does not have to hit the database and then",
    "start": "1538080",
    "end": "1543840"
  },
  {
    "text": "secondly after I've done all the logic I'm not actually hitting the database all I'm doing is returning this result",
    "start": "1543840",
    "end": "1551480"
  },
  {
    "text": "type so you know the F the default I do nothing and then if uh the things if the",
    "start": "1551480",
    "end": "1557480"
  },
  {
    "text": "name address have Chang changed I change I Chang the decision to um update the",
    "start": "1557480",
    "end": "1562559"
  },
  {
    "text": "customer only and then if the email has changed as well I have a new decision which is the uh update the",
    "start": "1562559",
    "end": "1568799"
  },
  {
    "text": "customer and send the email both right so this is completely pure this is a",
    "start": "1568799",
    "end": "1574320"
  },
  {
    "text": "deterministic pure piece of code right if I if I give you the same inputs I always get the same",
    "start": "1574320",
    "end": "1581080"
  },
  {
    "text": "outputs right and and because there's an explicit input and explicit output it's really easy to test so this extra little",
    "start": "1581080",
    "end": "1587399"
  },
  {
    "text": "effort yeah I Hadad of write um yeah I had to write some extra code to implement this decision thing but I",
    "start": "1587399",
    "end": "1594559"
  },
  {
    "text": "actually think this is good because it actually documents this is kind of documentation of what's going on here",
    "start": "1594559",
    "end": "1599720"
  },
  {
    "text": "right the previous one I could write documentation in the comments but this is actually code documentation that",
    "start": "1599720",
    "end": "1605000"
  },
  {
    "text": "doesn't go out a date right if I got four choices I have to add another Unum so um this is this is much better I",
    "start": "1605000",
    "end": "1611720"
  },
  {
    "text": "think this is actual real real documentation that lives with the code so how would I test this well",
    "start": "1611720",
    "end": "1619480"
  },
  {
    "text": "really simple right I just create a customer here that's a version one of the",
    "start": "1619480",
    "end": "1625559"
  },
  {
    "text": "customer and then version two of the customer I've changed the name of the customer but I've got the same email and",
    "start": "1625559",
    "end": "1631080"
  },
  {
    "text": "version three of the customer I've got a new name and I've also got version two of the email so I I",
    "start": "1631080",
    "end": "1638559"
  },
  {
    "text": "just literally call this code and I call it with the same customer and I would expect to get",
    "start": "1638559",
    "end": "1643760"
  },
  {
    "text": "nothing and I call it with the second customer where it's just the name changed and I would expect to get this",
    "start": "1643760",
    "end": "1649440"
  },
  {
    "text": "result and I call it with a third customer and I expect to get the send mail",
    "start": "1649440",
    "end": "1655279"
  },
  {
    "text": "result so there you go so with a little bit of refactoring I've made this code",
    "start": "1655279",
    "end": "1660440"
  },
  {
    "text": "much more easy to test and actually I think more self-documenting now the shell um is exactly what it was before",
    "start": "1660440",
    "end": "1668120"
  },
  {
    "text": "I'm I am reading the custom from the database right this is the io code up here but now I have the pure code in the",
    "start": "1668120",
    "end": "1675120"
  },
  {
    "text": "middle it's the sandwich right io on either sides pel code in the middle and",
    "start": "1675120",
    "end": "1680159"
  },
  {
    "text": "then this is giving me a result again is and I just look at the enum and based on",
    "start": "1680159",
    "end": "1685720"
  },
  {
    "text": "what the decision was I do different things so if the decision was do nothing I do nothing and if the decision was",
    "start": "1685720",
    "end": "1692799"
  },
  {
    "text": "update then I actually write the customer to the database and if the decision was do both then I update the",
    "start": "1692799",
    "end": "1698519"
  },
  {
    "text": "customer and send the email so I just think this is a much nicer way of doing it and just to prove",
    "start": "1698519",
    "end": "1705600"
  },
  {
    "text": "that um you can actually see this for yourself I can actually I'm going to switch to F now I'm going to show you",
    "start": "1705600",
    "end": "1711240"
  },
  {
    "text": "some interactive F which is kind of nice so one of the nice things that F does that makes us even easier is that you",
    "start": "1711240",
    "end": "1718039"
  },
  {
    "text": "can mix uh data in with your enum so in the C you have your enum and if you want",
    "start": "1718039",
    "end": "1724159"
  },
  {
    "text": "to have extra data associated with one of those choices you have to like put it in somewhere else I you could have a",
    "start": "1724159",
    "end": "1729360"
  },
  {
    "text": "subass but it's a lot easier that way uh in fop these things called discriminated unions and um basically it's an enum",
    "start": "1729360",
    "end": "1737440"
  },
  {
    "text": "it's an enum on steroids you can have choices and then for each choice you can have extra data for that choice so it's",
    "start": "1737440",
    "end": "1743720"
  },
  {
    "text": "really really useful for domain modeling I highly recommend uh learning about discriminated unions and then you'll be",
    "start": "1743720",
    "end": "1750200"
  },
  {
    "text": "upset that they're not in cop so this is my um this is my you know",
    "start": "1750200",
    "end": "1756320"
  },
  {
    "text": "decision right and then here's my pure code right given the two Customs it looks very similar to the C- code right",
    "start": "1756320",
    "end": "1764000"
  },
  {
    "text": "I'm basically returning uh no change or I'm update the customer only and so on so let me just I",
    "start": "1764000",
    "end": "1770600"
  },
  {
    "text": "can literally just highlight this code and run it it's nice that it's",
    "start": "1770600",
    "end": "1775880"
  },
  {
    "text": "interactive so there you go so it's kind of what I like about f is it feels like python you can play with it um but it's",
    "start": "1775880",
    "end": "1783440"
  },
  {
    "text": "also compiled like sh you can do both very nice right now let's uh do some",
    "start": "1783440",
    "end": "1790039"
  },
  {
    "text": "testing so there's my",
    "start": "1790039",
    "end": "1795519"
  },
  {
    "text": "customers right so let's test this first one I'm passing the same customer twice and I would expect to get no change and",
    "start": "1795519",
    "end": "1801919"
  },
  {
    "text": "Loan a hold I do get no change so I'm pretty sure my codee's working and if I pass in a name but no uh email then I",
    "start": "1801919",
    "end": "1810080"
  },
  {
    "text": "get this new change update the customer only that's good now if I pass in the last one uh where the email has changed as",
    "start": "1810080",
    "end": "1817440"
  },
  {
    "text": "well I get this email you see I got this little email thing you need to verify address and there is the enum that was",
    "start": "1817440",
    "end": "1824600"
  },
  {
    "text": "returned update customer and send email so this is this is working really nicely so hopefully you can see how this works",
    "start": "1824600",
    "end": "1831440"
  },
  {
    "text": "um I mean you know that's really in the ti point of this talk is create a special type to represent the decision",
    "start": "1831440",
    "end": "1838799"
  },
  {
    "text": "separate your code into the pure code that Returns the decision and the impure",
    "start": "1838799",
    "end": "1844519"
  },
  {
    "text": "code that's the shell um let's just uh review some of",
    "start": "1844519",
    "end": "1851799"
  },
  {
    "text": "this first of all the pure code as I said it has explicit inputs and outputs where there's no magic going on I could",
    "start": "1851799",
    "end": "1858679"
  },
  {
    "text": "I could see customers going in I can see a decision coming out that's exactly what you want um the P code was easier to test",
    "start": "1858679",
    "end": "1866200"
  },
  {
    "text": "because again I can just pass in the inputs and I always get the same output and it's really easy to write a little test that checks all the different",
    "start": "1866200",
    "end": "1871760"
  },
  {
    "text": "inputs and test the right out that's what it is notice that the pure code wasn't async because there was no IO I",
    "start": "1871760",
    "end": "1880840"
  },
  {
    "text": "didn't have to worry about doing async because I mean in pure code you wouldn't have any async going because you're not",
    "start": "1880840",
    "end": "1885880"
  },
  {
    "text": "talking to the outside world so so you don't have to worry about all this Ayn of weight stuff because it's not going",
    "start": "1885880",
    "end": "1891120"
  },
  {
    "text": "to be there U another thing is that the pure code didn't have any exception Handles in it now when you're dealing with the",
    "start": "1891120",
    "end": "1897919"
  },
  {
    "text": "outside world you need to do exception handling because you know what happens if the database isn't there so let me",
    "start": "1897919",
    "end": "1903679"
  },
  {
    "text": "actually show you what that looks like I actually do have the exception version",
    "start": "1903679",
    "end": "1909480"
  },
  {
    "text": "here right so here's the my bad version which returns void and inside",
    "start": "1909480",
    "end": "1916240"
  },
  {
    "text": "here I have to put a big I put a whole all the business logic is in this try catch block so I have to try doing",
    "start": "1916240",
    "end": "1923080"
  },
  {
    "text": "various things and then at the bottom I have to catch maybe the database record doesn't exist maybe there's some other",
    "start": "1923080",
    "end": "1929760"
  },
  {
    "text": "database exception maybe I couldn't talk to the email server I have to catch all these things otherwise it's not really",
    "start": "1929760",
    "end": "1934799"
  },
  {
    "text": "production ready code but this is my business logic containing all this exception handling now if I go to the",
    "start": "1934799",
    "end": "1941720"
  },
  {
    "text": "pure version notice that there's no uh",
    "start": "1941720",
    "end": "1947639"
  },
  {
    "text": "there's no exception handling in this code right there's because there isn't",
    "start": "1947639",
    "end": "1952919"
  },
  {
    "text": "there's nothing to there's nothing database stuff now the exception handling you do need the exception handling but it's going to be in the",
    "start": "1952919",
    "end": "1958120"
  },
  {
    "text": "Shell so you might have a a version of the Shell Code which has the exception handling in it absolutely so here's my",
    "start": "1958120",
    "end": "1964600"
  },
  {
    "text": "shell handling code with exceptions right but it has the same pattern I mean",
    "start": "1964600",
    "end": "1969679"
  },
  {
    "text": "everything's wrapped in a tri catch but even within this there's the io stuff then there's the pure stuff and then",
    "start": "1969679",
    "end": "1976080"
  },
  {
    "text": "there's the more more IO stuff and the very bottom there's all the exception handling but it doesn't contaminate my",
    "start": "1976080",
    "end": "1982320"
  },
  {
    "text": "business logic right now let's look at some",
    "start": "1982320",
    "end": "1988880"
  },
  {
    "text": "common questions that people have what about unit testing what about integration testing and well I mean you",
    "start": "1988880",
    "end": "1995679"
  },
  {
    "text": "saw how to do unit testing you literally just pass in the data and get the result",
    "start": "1995679",
    "end": "2001000"
  },
  {
    "text": "you a test that you get the right result integration testing uh is like well how do you do integration testing if you",
    "start": "2001000",
    "end": "2007120"
  },
  {
    "text": "don't have any IO and the answer is that's not where you do the integration testing this is how you do the",
    "start": "2007120",
    "end": "2012480"
  },
  {
    "text": "integration testing you do your business logic is your unit test and your integration test is the entire pipeline",
    "start": "2012480",
    "end": "2019760"
  },
  {
    "text": "including all the io so if if people always worry well where should I put when what counts as an integration test",
    "start": "2019760",
    "end": "2025080"
  },
  {
    "text": "what counts as a unit test and you know where the boundaries between which and which is like if you do it this way the",
    "start": "2025080",
    "end": "2031080"
  },
  {
    "text": "boundaries are really really obvious right the middle bit is the unit test and the whole thing is the integration",
    "start": "2031080",
    "end": "2036960"
  },
  {
    "text": "test right so that put it'll put pay to any arguments there now of course",
    "start": "2036960",
    "end": "2042960"
  },
  {
    "text": "sometimes you might want a fake iio you want to might mock the io um you never",
    "start": "2042960",
    "end": "2048118"
  },
  {
    "text": "need to mock pure codes right you only need to mock something where it's non-deterministic where you can't",
    "start": "2048119",
    "end": "2053280"
  },
  {
    "text": "actually do it like a database you really shouldn't be mocking real classes that are pure because there's no point I",
    "start": "2053280",
    "end": "2059320"
  },
  {
    "text": "mean just use them right so if you do need to mock something again you you can",
    "start": "2059320",
    "end": "2064520"
  },
  {
    "text": "mock the Io if for some reason you want to but um you should never be doing mocking in the middle",
    "start": "2064520",
    "end": "2070280"
  },
  {
    "text": "bit it's not it shouldn't be needed right now let's just review some",
    "start": "2070280",
    "end": "2076079"
  },
  {
    "text": "important testing Concepts because I think people sometimes get sidetracked by classes and unit tests and all stuff",
    "start": "2076079",
    "end": "2081599"
  },
  {
    "text": "I'm just going to say some things to emphasize some things about testing testing should be about testing business",
    "start": "2081599",
    "end": "2089040"
  },
  {
    "text": "value right it should be testing stories testing use cases scenarios whatever you",
    "start": "2089040",
    "end": "2094158"
  },
  {
    "text": "want to call them it should not be about testing classes there's no point in testing a class",
    "start": "2094159",
    "end": "2100359"
  },
  {
    "text": "you've probably all seen the little joke things where there's two unit tests and the failed integration test where the",
    "start": "2100359",
    "end": "2106079"
  },
  {
    "text": "door latch doesn't fit I mean there's various you know gifs going around but yeah the unit test should be the whole",
    "start": "2106079",
    "end": "2112079"
  },
  {
    "text": "thing you shouldn't test individual classes because that doesn't make any sense and then also you should test the boundaries there's no point testing the",
    "start": "2112079",
    "end": "2118280"
  },
  {
    "text": "internals and also people say well how do I test something when the methods are private or something right well the answer is don't test it you test the",
    "start": "2118280",
    "end": "2124599"
  },
  {
    "text": "entire thing why are you testing something where the methods are private and you can't even call them anyway right so don't test internals test from",
    "start": "2124599",
    "end": "2132000"
  },
  {
    "text": "end to end in the whole system right do the test at the workflow level and all",
    "start": "2132000",
    "end": "2137640"
  },
  {
    "text": "the unit test means is it's an isolated unit it doesn't mean a class it means something that can be isolated and run",
    "start": "2137640",
    "end": "2143680"
  },
  {
    "text": "separately from all the other tests right so if you don't have any side effects you're not write in the database these business logic things are",
    "start": "2143680",
    "end": "2150800"
  },
  {
    "text": "completely the definition of units that you can test they're completely isolated you could run them all in parallel",
    "start": "2150800",
    "end": "2156680"
  },
  {
    "text": "they're all really fast cuz they're not doing any IO that's exactly what the kind of thing you want to be testing right so a unit is not a Class A unit is",
    "start": "2156680",
    "end": "2163760"
  },
  {
    "text": "a unit of functionality just want to reemphasize that because people forget sometimes right so here we go here's our",
    "start": "2163760",
    "end": "2170400"
  },
  {
    "text": "workflows kind of slicing through our our kind of donut architecture here and",
    "start": "2170400",
    "end": "2176400"
  },
  {
    "text": "these are the things you want to be testing right you want you don't want to be testing individual classes test the workflows because sometimes they you",
    "start": "2176400",
    "end": "2182680"
  },
  {
    "text": "know things interact the pieces can work but the whole thing might not work properly okay another question people",
    "start": "2182680",
    "end": "2188520"
  },
  {
    "text": "have is where does validation fit in well here's where it fits in it",
    "start": "2188520",
    "end": "2194319"
  },
  {
    "text": "doesn't it doesn't belong in your business logic validation happens after",
    "start": "2194319",
    "end": "2199560"
  },
  {
    "text": "you've loaded the stuff or you you know you've read the Json from the network and you've loaded the file from the database whatever you need to validate",
    "start": "2199560",
    "end": "2205960"
  },
  {
    "text": "that the data is good but you do that before you send it to the business logic right by the time",
    "start": "2205960",
    "end": "2212920"
  },
  {
    "text": "you get to the business logic it should be 100% validated you should never worry you should never be doing defensive stuff like well maybe this isn't right",
    "start": "2212920",
    "end": "2219599"
  },
  {
    "text": "that should all be done on the outside not on the inside right so you do validation of the edges not not in the",
    "start": "2219599",
    "end": "2226920"
  },
  {
    "text": "middle right and if you do it right you really shouldn't be doing null checking in the middle of your domain I mean you",
    "start": "2226920",
    "end": "2232680"
  },
  {
    "text": "should a lot of people have like very defensive programming like what happens if this is bad it's like if you do your",
    "start": "2232680",
    "end": "2237760"
  },
  {
    "text": "validation properly um your business do should be free from defensive programming which is",
    "start": "2237760",
    "end": "2243960"
  },
  {
    "text": "nice and if fation fails just skip right you load something up and it's actually",
    "start": "2243960",
    "end": "2249359"
  },
  {
    "text": "not valid the email doesn't have at sign whatever there's something wrong the string is too long to put in the database whatever some reason it doesn't",
    "start": "2249359",
    "end": "2256160"
  },
  {
    "text": "it doesn't work now you can just skip the entire business logic and spit out some sort of error at the back end right",
    "start": "2256160",
    "end": "2262560"
  },
  {
    "text": "so again again it fits really nicely if you have validation mixed up with your business logic it's really hard to know",
    "start": "2262560",
    "end": "2268119"
  },
  {
    "text": "you know what to do okay ORS like Entity framework and",
    "start": "2268119",
    "end": "2274000"
  },
  {
    "text": "hibernate and so on unit of work people ask about this I personally don't think that ORS",
    "start": "2274000",
    "end": "2280599"
  },
  {
    "text": "especially heavy arms um don't really fit with this because I mean I'll give",
    "start": "2280599",
    "end": "2285760"
  },
  {
    "text": "you some code this is kind of typical uh or kind of code you create something and you save it to the database uh you do",
    "start": "2285760",
    "end": "2293200"
  },
  {
    "text": "something else and you send it you notice this save look at that save method there's no input no",
    "start": "2293200",
    "end": "2298640"
  },
  {
    "text": "output that's bad I just I just got through saying anything where there's no input and no output is is badly designed",
    "start": "2298640",
    "end": "2305160"
  },
  {
    "text": "and and the save method is badly designed right so don't do that it's right in the",
    "start": "2305160",
    "end": "2311160"
  },
  {
    "text": "middle of your domain logic here so I mean that's very convenient I mean",
    "start": "2311160",
    "end": "2317400"
  },
  {
    "text": "certainly is convenient to do it this way but it's very hard to test and it's very brittle if things change now some",
    "start": "2317400",
    "end": "2324560"
  },
  {
    "text": "Frameworks you know um Jango Ruby on Rails that stuff they they do this all the time and for basic website you know",
    "start": "2324560",
    "end": "2331720"
  },
  {
    "text": "fine not a problem but if you're trying to do like a a domain where things the rules business rules might change and",
    "start": "2331720",
    "end": "2337000"
  },
  {
    "text": "you want to have have a nicely documented code I personally don't think this is that",
    "start": "2337000",
    "end": "2342119"
  },
  {
    "text": "good so yeah don't put I/O in the middle of your logic and it's really easy to do with an or that's the problem because it",
    "start": "2342119",
    "end": "2347800"
  },
  {
    "text": "generates all these methods for you half the time so don't do that now there's something else called unit of work which",
    "start": "2347800",
    "end": "2353400"
  },
  {
    "text": "is a slightly more sophisticated version and the idea here is you don't actually write to the database you collect all",
    "start": "2353400",
    "end": "2360000"
  },
  {
    "text": "the things that you're going to be doing and at the very end you write everything into the database right so we're not",
    "start": "2360000",
    "end": "2365880"
  },
  {
    "text": "actually saving it to the database adding it to the context we're adding something more to the context at the",
    "start": "2365880",
    "end": "2370960"
  },
  {
    "text": "very end we save all the changes I still think this is bad first of all it's very database Centric because I can't really",
    "start": "2370960",
    "end": "2378839"
  },
  {
    "text": "send an email here I mean I can do database stuff but if I'm trying to send an email in the middle of this I can't",
    "start": "2378839",
    "end": "2384200"
  },
  {
    "text": "add the email to the database as well you so it only works for like database stuff and it's really still the same",
    "start": "2384200",
    "end": "2389240"
  },
  {
    "text": "thing it's still kind of hard to test I mean if you want to see what's actually going on I personally think having",
    "start": "2389240",
    "end": "2395680"
  },
  {
    "text": "explicit um result type that you divine that represents the decision is a much nicer",
    "start": "2395680",
    "end": "2402240"
  },
  {
    "text": "way of doing everything so yeah personally I wouldn't do this so I think that if you do if you",
    "start": "2402240",
    "end": "2409480"
  },
  {
    "text": "follow this design where you have a pure um core and you have the imperative shell you actually don't need a heavy",
    "start": "2409480",
    "end": "2415560"
  },
  {
    "text": "arm at all in fact I I haven't used ntity framework for years if I need to write something into the Ws I would use",
    "start": "2415560",
    "end": "2421640"
  },
  {
    "text": "something like Dapper something very simple something very explicit where you can actually write the SQL code yourself",
    "start": "2421640",
    "end": "2426760"
  },
  {
    "text": "and or you you know whatever it is that you're doing um it just it's a lot easier and it's much more transparent so",
    "start": "2426760",
    "end": "2433119"
  },
  {
    "text": "that's what I recommend now people always say what if I really really really need to do IO in the middle of my",
    "start": "2433119",
    "end": "2439079"
  },
  {
    "text": "workflow please please I need to do this well yes of course sometimes you need to load something up you make a decision",
    "start": "2439079",
    "end": "2445119"
  },
  {
    "text": "you need to load a pick record from the database and then based on that you make another decision and then you know save something and make that's a legitimate",
    "start": "2445119",
    "end": "2452440"
  },
  {
    "text": "workflow sometimes I think it's less common than people think but yeah it's legitimate you answer is you just break",
    "start": "2452440",
    "end": "2458160"
  },
  {
    "text": "it into pieces the same way right you you break it into little pieces and each piece is either Pure or",
    "start": "2458160",
    "end": "2464640"
  },
  {
    "text": "it's IO but not both right so each of the little pieces are testable right and each little piece can be unit tested now",
    "start": "2464640",
    "end": "2471880"
  },
  {
    "text": "the other thing about unit the iio doesn't normally need to unit test I mean writing a record to the database",
    "start": "2471880",
    "end": "2477520"
  },
  {
    "text": "you don't really need to unit test that hopefully your code works right and I mean if you've made a mistake in the SQL",
    "start": "2477520",
    "end": "2484440"
  },
  {
    "text": "code or something you'll C hopefully you'll catch the integ testing we don't really need to write a unit test to",
    "start": "2484440",
    "end": "2489680"
  },
  {
    "text": "check that the record was successfully successfully stored in the database that's like a waste of work really so save your time for testing the business",
    "start": "2489680",
    "end": "2498319"
  },
  {
    "text": "logic right so here's if you're doing a code review and you want to know and",
    "start": "2498319",
    "end": "2503800"
  },
  {
    "text": "you're looking at your domain code and you're saying is my domain code following these good design principles",
    "start": "2503800",
    "end": "2510160"
  },
  {
    "text": "here we go do you have any async anywhere if you do you're doing IO",
    "start": "2510160",
    "end": "2515480"
  },
  {
    "text": "somewhere that's bad are you catching exceptions in your domain code if you are probably you're doing I maybe maybe",
    "start": "2515480",
    "end": "2523240"
  },
  {
    "text": "not but chances are you are are you throwing exceptions why will you be throwing exceptions in your domain logic",
    "start": "2523240",
    "end": "2531480"
  },
  {
    "text": "like well you know I need to do a choice of this or this like just return a proper return value here I got one of",
    "start": "2531480",
    "end": "2538040"
  },
  {
    "text": "these enums if I want to say this or this or this rather than throwing some sort of exception I'll just literally",
    "start": "2538040",
    "end": "2543200"
  },
  {
    "text": "have a proper return value which represents the three choices the three decisions right don't use exceptions for",
    "start": "2543200",
    "end": "2548319"
  },
  {
    "text": "control flow so if you see these things in your pure domain code that's it clue that",
    "start": "2548319",
    "end": "2554440"
  },
  {
    "text": "it's time to refactor your code so keep your iio at a distance okay it's can be",
    "start": "2554440",
    "end": "2559559"
  },
  {
    "text": "really dangerous put up one of those electrified fences around your core domain and keep your eye",
    "start": "2559559",
    "end": "2567400"
  },
  {
    "text": "outside right now a lot of these talks people always say my solution is the",
    "start": "2567880",
    "end": "2574160"
  },
  {
    "text": "perfect solution and everyone should go ahead and do my solution because it's perfect perf and I'm never I'm not that",
    "start": "2574160",
    "end": "2579240"
  },
  {
    "text": "kind of person I would never ever say that there is never a silver bullet and there's no approach that fits every",
    "start": "2579240",
    "end": "2585319"
  },
  {
    "text": "solution so I'm just recommending this as an approach that you try out but I'm not saying that it's a perfect approach",
    "start": "2585319",
    "end": "2591359"
  },
  {
    "text": "you know so anyone who says my way is the best uh I always I never trust that",
    "start": "2591359",
    "end": "2596640"
  },
  {
    "text": "because it's the real answer as you know as as the classic senior developer answer is it depends right if someone",
    "start": "2596640",
    "end": "2603440"
  },
  {
    "text": "doesn't say it depends then they're not senior enough so okay so let's just I mean I pretty",
    "start": "2603440",
    "end": "2611040"
  },
  {
    "text": "much finished with the keeping the eye of the edges but let's just look at some other ways of doing dependencies if for",
    "start": "2611040",
    "end": "2616319"
  },
  {
    "text": "some reason you really hate this approach by the way this approach that I've talked about is the best approach and you should all do it all the time",
    "start": "2616319",
    "end": "2623599"
  },
  {
    "text": "but if you don't think it's the best approach let's look at some other ways so um now I'm talking about IO",
    "start": "2623599",
    "end": "2629640"
  },
  {
    "text": "dependencies I mean dependency can mean all sorts of things why you have dependencies on binaries and dependencies and this when I mean",
    "start": "2629640",
    "end": "2636200"
  },
  {
    "text": "dependency I mean something that introduces non-determinism into your code something that gives different",
    "start": "2636200",
    "end": "2642319"
  },
  {
    "text": "answers every time you run it so that includes iio that includes random numbers that includes getting the current time um it could also include",
    "start": "2642319",
    "end": "2649280"
  },
  {
    "text": "things like the strategy pattern if you really are doing interfaces and injecting things in then you really don't know what's happening um I",
    "start": "2649280",
    "end": "2656520"
  },
  {
    "text": "honestly I hardly ever use the strategy pattern because I use composition just like I showed you where you build things some smaller things but anyway right um",
    "start": "2656520",
    "end": "2664200"
  },
  {
    "text": "anything else which is not which is deterministic pure code cod in your domain is not a dependency it doesn't",
    "start": "2664200",
    "end": "2669839"
  },
  {
    "text": "need to be managed you don't need to mock it just call it all right just if",
    "start": "2669839",
    "end": "2674920"
  },
  {
    "text": "it's there and it's pure and it's not having any side effects just use the real class don't have an interface for",
    "start": "2674920",
    "end": "2680280"
  },
  {
    "text": "it and don't mock it so what of the strategies you can use for managing dependencies well here's five first one",
    "start": "2680280",
    "end": "2688280"
  },
  {
    "text": "is dependency rejection not dependency injection but dependency",
    "start": "2688280",
    "end": "2693839"
  },
  {
    "text": "rejection just like keeping the T-Rex away from the rest of the people here so the the dependency question is you don't",
    "start": "2693839",
    "end": "2699960"
  },
  {
    "text": "have any dependencies right you keep them away from your pure code now the second thing",
    "start": "2699960",
    "end": "2706359"
  },
  {
    "text": "is I'm going to call it dependency retention you keep your dependencies in fact you don't worry about them at all",
    "start": "2706359",
    "end": "2713119"
  },
  {
    "text": "you just let them all hang out and do their thing that's fine and then there's dependency injection which you all",
    "start": "2713119",
    "end": "2719800"
  },
  {
    "text": "familiar with hopefully and that's where you pass the dependencies explicitly into the class probably through a class",
    "start": "2719800",
    "end": "2725319"
  },
  {
    "text": "Constructor and then there's what I'm calling parameterization which is slightly different because you're in",
    "start": "2725319",
    "end": "2730880"
  },
  {
    "text": "this one you're actually passing as parameters into the code rather than through the class Constructor you're passing directly into the methods and",
    "start": "2730880",
    "end": "2738200"
  },
  {
    "text": "then finally there's dependency interpretation where you actually build a custom language for your domain and",
    "start": "2738200",
    "end": "2746040"
  },
  {
    "text": "then you interpret it separately now that's a lot of work I'll I'll quickly go over that but that's not something",
    "start": "2746040",
    "end": "2751440"
  },
  {
    "text": "you probably want to do okay let's look at dependency rejection this phrase by the way is coined by Mark Seaman who",
    "start": "2751440",
    "end": "2758359"
  },
  {
    "text": "literally wrote the book on dependency injection and so he knows what he's talking about um and so he wrote he came",
    "start": "2758359",
    "end": "2765160"
  },
  {
    "text": "up with this phrase and I've come up with other ones kind of copying him so dependency rejection owes that to Mark",
    "start": "2765160",
    "end": "2770599"
  },
  {
    "text": "and that's what exactly what we just talked about earlier it's like no dependencies on your core business logic so that's definitely my recommended",
    "start": "2770599",
    "end": "2777359"
  },
  {
    "text": "approach it's easy to it makes your code much more comprehensible there's a there's a report I just saw on someone on Twitter say um that we spend 80% of",
    "start": "2777359",
    "end": "2785319"
  },
  {
    "text": "our time trying to understand code we don't spend you know 10% 15% is actually",
    "start": "2785319",
    "end": "2791200"
  },
  {
    "text": "writing code most of our time is spent trying to understand code anything we can do to make our code more",
    "start": "2791200",
    "end": "2796480"
  },
  {
    "text": "understandable is a good thing so by having an explicit result like I did with the three choices that makes the",
    "start": "2796480",
    "end": "2801760"
  },
  {
    "text": "code a lot easier to understand what's going on so it's easy to comprehend easy to test it is a bit of extra work to",
    "start": "2801760",
    "end": "2808720"
  },
  {
    "text": "document these decisions with a special type but it's not that much work I mean it's like you know a few lines of code",
    "start": "2808720",
    "end": "2814359"
  },
  {
    "text": "it wasn't that big deal and I think it makes the code easy to understand so definitely this is a good thing so dependency retention is where you just",
    "start": "2814359",
    "end": "2820920"
  },
  {
    "text": "don't care about your dependencies you just hardcode all the file access you hardcode all the database access you",
    "start": "2820920",
    "end": "2826280"
  },
  {
    "text": "don't care now like I say Ruby and Wales and Jango sort of does this uh which",
    "start": "2826280",
    "end": "2831480"
  },
  {
    "text": "doesn't make testing slightly interesting because they typically do like inmemory SQL databases or something",
    "start": "2831480",
    "end": "2838119"
  },
  {
    "text": "but I mean it's just appropriate for when you're doing like ETL data transformation data science where you",
    "start": "2838119",
    "end": "2843760"
  },
  {
    "text": "just like reading files and writing files and all sorts of weird stuff there's no point creating special interfaces and special decisions for all",
    "start": "2843760",
    "end": "2850119"
  },
  {
    "text": "this stuff just like you've got a python script you know you're just running your python script fine you don't need to go to all this work so that's very",
    "start": "2850119",
    "end": "2856680"
  },
  {
    "text": "appropriate you're doing kind of any exploratory coding when you're testing things you don't need to create special",
    "start": "2856680",
    "end": "2862640"
  },
  {
    "text": "decisions and interfaces all too much work any kind of throw away scripts like you know if I'm just like loading some",
    "start": "2862640",
    "end": "2868599"
  },
  {
    "text": "stuff into the database no I little script to do that I don't need to like separate the database code out right it's not worth it so you know this is",
    "start": "2868599",
    "end": "2875559"
  },
  {
    "text": "perfectly valid for many situations I'm not so you know I'm quite happy to do this so you don't always have to have",
    "start": "2875559",
    "end": "2882079"
  },
  {
    "text": "the fancy way of doing things now injection and",
    "start": "2882079",
    "end": "2888079"
  },
  {
    "text": "parameterization so in injection we're passing all the dependencies to the class as a whole and in",
    "start": "2888079",
    "end": "2895839"
  },
  {
    "text": "parameterization we're passing only the dependencies needed for a particular",
    "start": "2895839",
    "end": "2901680"
  },
  {
    "text": "function right so that's the difference one's a parameter and one's class Constructor basically",
    "start": "2901680",
    "end": "2907280"
  },
  {
    "text": "so let me actually explain what I mean by this let's go to the injection one first of",
    "start": "2907280",
    "end": "2912960"
  },
  {
    "text": "all right so here is the same code again and now I'm what I've got here is",
    "start": "2912960",
    "end": "2919119"
  },
  {
    "text": "I've got an interface that represents all my database stuff so I got an inter I got a a method to read the customer",
    "start": "2919119",
    "end": "2924880"
  },
  {
    "text": "and I got a method to update the customer oh and I have a method to update the delete customer and update",
    "start": "2924880",
    "end": "2929960"
  },
  {
    "text": "the password and also maybe get some customers so all these things are in this interface okay and then I have another",
    "start": "2929960",
    "end": "2936400"
  },
  {
    "text": "interface to represent the email service and um I you know this classic",
    "start": "2936400",
    "end": "2942599"
  },
  {
    "text": "thing I have my local Fields I inject it into the Constructor now here's my code",
    "start": "2942599",
    "end": "2948200"
  },
  {
    "text": "so here I am in in instead in this case I'm getting it from the the injected",
    "start": "2948200",
    "end": "2953440"
  },
  {
    "text": "interface I'm doing the code that way other than that the code is exactly the same now from my point of view this code",
    "start": "2953440",
    "end": "2959599"
  },
  {
    "text": "is still equally bad because again it returns nothing it's hard to test you know you could test that it's reading and writing mean you could test you can",
    "start": "2959599",
    "end": "2965880"
  },
  {
    "text": "mock up the interface and test that it's reading and writing to the database but that's just testing and",
    "start": "2965880",
    "end": "2970960"
  },
  {
    "text": "Reading Writing logic if I have the if I return the actual decision I wouldn't have to do any of that test I could",
    "start": "2970960",
    "end": "2976079"
  },
  {
    "text": "literally just check the decision so mocking up an interface and then trying to see did it actually write to the mock",
    "start": "2976079",
    "end": "2982280"
  },
  {
    "text": "at the right time and the right things like just return the decision then it's a lot easier so anyway but this is how you would do it this is the classic um",
    "start": "2982280",
    "end": "2991000"
  },
  {
    "text": "uh you know a Constructor injection and you might say well you know why do I",
    "start": "2991000",
    "end": "2996319"
  },
  {
    "text": "have the password in here well the answer is because I have another method down here which updates the password and",
    "start": "2996319",
    "end": "3004000"
  },
  {
    "text": "again there's a pure part to calculate the hash and and then I also have another method here which gets the",
    "start": "3004000",
    "end": "3009520"
  },
  {
    "text": "customers by city so I need all these things so I have to pass all these things in I have to create the interface",
    "start": "3009520",
    "end": "3015000"
  },
  {
    "text": "which has all these things now it also has delete customer and nobody's using delete customer um so probably at some point I",
    "start": "3015000",
    "end": "3021880"
  },
  {
    "text": "had a method which did it and now I'm not having that method anymore but it's still in the interface because once things get into an interface it's really",
    "start": "3021880",
    "end": "3029079"
  },
  {
    "text": "hard it's kind of scary to take them out because you might break something so it's very easy to have",
    "start": "3029079",
    "end": "3034119"
  },
  {
    "text": "interface creep right interfaces get bigger and bigger you keep adding things to them and you're kind of because",
    "start": "3034119",
    "end": "3039440"
  },
  {
    "text": "you're already injecting them rather than going to create a new interface you might just add it to the existing interface and the interfaces kind of get",
    "start": "3039440",
    "end": "3045319"
  },
  {
    "text": "bigger and bigger and more and more gnarly um so this is an example and we",
    "start": "3045319",
    "end": "3050680"
  },
  {
    "text": "also have things where I'm not you know why am I passing in the password thing where this method doesn't need the",
    "start": "3050680",
    "end": "3056079"
  },
  {
    "text": "password so if we compare this with a parameterized version in the parameterized",
    "start": "3056079",
    "end": "3061200"
  },
  {
    "text": "implementation I do not have an interface right I Define three these are the three things that",
    "start": "3061200",
    "end": "3067920"
  },
  {
    "text": "this function needs it needs to read a customer it needs to update a customer and it needs to send email message those are the three things it needs and I'm",
    "start": "3067920",
    "end": "3073960"
  },
  {
    "text": "going to pass them in as parameters to the method so rather than just passing in",
    "start": "3073960",
    "end": "3080720"
  },
  {
    "text": "the customer here I've actually got three other parameters so this is",
    "start": "3080720",
    "end": "3085799"
  },
  {
    "text": "everything this method needs nothing I don't need to pass in delete a customer because it doesn't need it I don't need",
    "start": "3085799",
    "end": "3091799"
  },
  {
    "text": "to pass in how to update a password because it doesn't need it right the only things that I need to pass in are",
    "start": "3091799",
    "end": "3097079"
  },
  {
    "text": "the things which explicitly that I'm using now if I pass in something which I'm not using anymore I'll get an unused",
    "start": "3097079",
    "end": "3102760"
  },
  {
    "text": "variable error and so that will tell me if if I'm not using anything more so it's very clean and you there's a lot of",
    "start": "3102760",
    "end": "3108319"
  },
  {
    "text": "pressure to keep these small right you're not going to have 10,000 parameters here it's it puts pressure on",
    "start": "3108319",
    "end": "3114160"
  },
  {
    "text": "you to have small methods that do one thing if you start having you know hundreds of parameters obviously your methods are too big and they're doing",
    "start": "3114160",
    "end": "3120200"
  },
  {
    "text": "too many things and then again here's the updating the",
    "start": "3120200",
    "end": "3125680"
  },
  {
    "text": "password and all I need to do is this one method that updates passwords I don't I mean this one database access",
    "start": "3125680",
    "end": "3131559"
  },
  {
    "text": "that updates password I don't need to get a customer read a customer you know query the database so I just pass in",
    "start": "3131559",
    "end": "3137240"
  },
  {
    "text": "this one thing so this is much more self-documenting I can see at a glance these are the",
    "start": "3137240",
    "end": "3142640"
  },
  {
    "text": "inputs that I need to do my job and I'm never going to have a delete customer Customer because none of these things",
    "start": "3142640",
    "end": "3147720"
  },
  {
    "text": "need a leite customer so I think the the parameter by passing a parameters is much better than",
    "start": "3147720",
    "end": "3154040"
  },
  {
    "text": "passing an interfaces if you can get away with it even better is not is not doing any of this stuff but if you have to do it I think parameters are better",
    "start": "3154040",
    "end": "3160680"
  },
  {
    "text": "because here's an example of interface creep again right so I start with insert delete commit changes query maybe",
    "start": "3160680",
    "end": "3167119"
  },
  {
    "text": "another query maybe another query maybe another query and then maybe some of the contains and then I optimize that and",
    "start": "3167119",
    "end": "3173119"
  },
  {
    "text": "then maybe I need a new kind of summary return and maybe a version to this and maybe here's my change password oh a new",
    "start": "3173119",
    "end": "3179680"
  },
  {
    "text": "version with an extra hash or something oh and I by the way for testing I want to delete all the rows in the database",
    "start": "3179680",
    "end": "3186000"
  },
  {
    "text": "just you know for testing only but it's in this interface are you going to guarantee that nobody else none",
    "start": "3186000",
    "end": "3192480"
  },
  {
    "text": "these other methods accidentally ever call this method by mistake it's kind of dangerous how about launching missiles",
    "start": "3192480",
    "end": "3197880"
  },
  {
    "text": "what is that doing here what about launch missiles version two so why is launch M because I was too lazy to",
    "start": "3197880",
    "end": "3204559"
  },
  {
    "text": "create a new interface I like I've already got this interface I'm already injecting it in let me just add another",
    "start": "3204559",
    "end": "3209599"
  },
  {
    "text": "method to the interface even though it's got nothing to do with anything else right so it's very easy to do I mean",
    "start": "3209599",
    "end": "3215559"
  },
  {
    "text": "that's the problem is we've all done it I've done it I'm not saying I'm just saying it's very easy to have this kind of interface creep and and because this",
    "start": "3215559",
    "end": "3222200"
  },
  {
    "text": "is so bad there's even a thing inter face segregation principle which is like don't do this but the natural tendency",
    "start": "3222200",
    "end": "3229200"
  },
  {
    "text": "the kind of inertia if you're lazy you're going to do it the lazy thing is to add more stuff onto your",
    "start": "3229200",
    "end": "3235000"
  },
  {
    "text": "interface right and that goes against human nature it we kind have to force our we're going against our own nature",
    "start": "3235000",
    "end": "3241280"
  },
  {
    "text": "to not keep adding things so the advantage of doing injection is yeah we everyone",
    "start": "3241280",
    "end": "3247119"
  },
  {
    "text": "understands how it works Frameworks already have ioc libraries and all this stuff very nice but we do have this",
    "start": "3247119",
    "end": "3253680"
  },
  {
    "text": "interface creep thing and if you do if you're lazy it's easy to do the wrong thing and",
    "start": "3253680",
    "end": "3259799"
  },
  {
    "text": "I think that's a bad design a good design that should force you to do the right thing the lazier you are the more",
    "start": "3259799",
    "end": "3266440"
  },
  {
    "text": "the right thing you should do right a design where if you're lazy you do the bad thing is a bad design and like you",
    "start": "3266440",
    "end": "3273760"
  },
  {
    "text": "see you get these interfaces with you know hundreds of methods on them and most of them are not in need at half the time and someone might accidentally call",
    "start": "3273760",
    "end": "3279680"
  },
  {
    "text": "launch missiles or delete all the those just because it's in the interface and they have a typo you know all this stuff so they're not so good now",
    "start": "3279680",
    "end": "3286040"
  },
  {
    "text": "parameterization I think is better because you do have these explicit dependencies and you're passing in",
    "start": "3286040",
    "end": "3291520"
  },
  {
    "text": "individual focused functions that do one thing rather than whole interfaces and",
    "start": "3291520",
    "end": "3296960"
  },
  {
    "text": "it avoids uh interface creep because the exact opposite the lazier you are the less stuff you're going to pass in right",
    "start": "3296960",
    "end": "3304079"
  },
  {
    "text": "so you have a natural tendency to create smaller things with less dependencies so being lazy is going to encourage you to",
    "start": "3304079",
    "end": "3309200"
  },
  {
    "text": "do the right thing now unfortunately it's kind of hard to work with when you have deeply nested code because the",
    "start": "3309200",
    "end": "3315400"
  },
  {
    "text": "Frameworks don't really support dependency injection for for these kinds of functions I mean there are ways of doing it but you know the Constructor",
    "start": "3315400",
    "end": "3322640"
  },
  {
    "text": "injection is the standard way of doing it so it's kind of hard to work with and it still doesn't really really help because in terms of you know we still",
    "start": "3322640",
    "end": "3328559"
  },
  {
    "text": "have these void right I mean I'm passing in all the database stuff but even better would be not passing any datab",
    "start": "3328559",
    "end": "3334599"
  },
  {
    "text": "best stuff at all and just literally pass in the things I need and return the decision so I mean this is kind of easy",
    "start": "3334599",
    "end": "3340640"
  },
  {
    "text": "you know people feel comfortable with it but I still don't think it's the right thing to do and the last thing is what I'm",
    "start": "3340640",
    "end": "3347000"
  },
  {
    "text": "calling dependency interpretation so what you do here is every call to a dependency is actually",
    "start": "3347000",
    "end": "3354319"
  },
  {
    "text": "you write it as an instruction uh This Is The Interpreter pattern if you go to the the gang of four pattern",
    "start": "3354319",
    "end": "3360200"
  },
  {
    "text": "book it's called The Interpreter pattern and if you're a functional programmer you call it freeone ads um but what you",
    "start": "3360200",
    "end": "3366400"
  },
  {
    "text": "do is you create uh instructions that you call which you interpret later on so",
    "start": "3366400",
    "end": "3372160"
  },
  {
    "text": "you're actually kind of writing kind of B code for your program you're not actually doing any IO in your code and",
    "start": "3372160",
    "end": "3377880"
  },
  {
    "text": "then you have a separate interpreter that interprets the bik code",
    "start": "3377880",
    "end": "3383039"
  },
  {
    "text": "that you've written obviously it's not B code it's just regular data structure but it's you basically create this data structure in memory that you interpret",
    "start": "3383039",
    "end": "3390240"
  },
  {
    "text": "saying every time I see this instruction I need to write the database every time I see this instruction I need to read from the database you know so it's a lot",
    "start": "3390240",
    "end": "3397000"
  },
  {
    "text": "of work to do but is super super powerful because well let me just show you how it works right so you got an instruction that goes into The",
    "start": "3397000",
    "end": "3403640"
  },
  {
    "text": "Interpreter The Interpreter gives you an output and then you based on the output you build another instruction and so on",
    "start": "3403640",
    "end": "3409359"
  },
  {
    "text": "so forth so it's it is a classic interpreted thing but it's done you know in in writing kind of interpreted in in",
    "start": "3409359",
    "end": "3416640"
  },
  {
    "text": "uh code rather than you know somewhere else I don't I could easily write a whole talk on this and maybe I will one",
    "start": "3416640",
    "end": "3422799"
  },
  {
    "text": "day but it's a lot of work however it does have some pros over all these other ones the first thing is you get a",
    "start": "3422799",
    "end": "3429160"
  },
  {
    "text": "completely domain oriented API which is specific to your domain if you're doing something very specific uh I mean a good",
    "start": "3429160",
    "end": "3436440"
  },
  {
    "text": "example is Twitter where to construct a tweet they have to go over here and get your profile then have to go here and",
    "start": "3436440",
    "end": "3442640"
  },
  {
    "text": "get the the hashtags and go over here and get your followers and go over and you so they have all these microservices",
    "start": "3442640",
    "end": "3447880"
  },
  {
    "text": "and they were going out and getting all this stuff it's the same thing as they have you know 20 microservices they have",
    "start": "3447880",
    "end": "3453480"
  },
  {
    "text": "to go and get to to get a tweet going so they have a specific API that they defined and they could actually write a",
    "start": "3453480",
    "end": "3459960"
  },
  {
    "text": "special um instructions for doing that no IO at all right the io happens later",
    "start": "3459960",
    "end": "3467200"
  },
  {
    "text": "when you actually interpret it now what's nice about this is is that your instructions this is doain this is",
    "start": "3467200",
    "end": "3472640"
  },
  {
    "text": "basically a domain specific language so the actual database calls",
    "start": "3472640",
    "end": "3478359"
  },
  {
    "text": "whatever you don't actually care how they're done right there completely separate so if they change their API for",
    "start": "3478359",
    "end": "3483799"
  },
  {
    "text": "how you talk to the database or here you talk to the file system or how you talk to CF or whatever you don't care not",
    "start": "3483799",
    "end": "3488920"
  },
  {
    "text": "your problem now this is where it's really this is where people like Twitter and Facebook are into it because uh",
    "start": "3488920",
    "end": "3494920"
  },
  {
    "text": "let's say that your database charged you every time you didn't update maybe or may performance-wise you",
    "start": "3494920",
    "end": "3502240"
  },
  {
    "text": "do millions of updates a second or whatever you just can't handle it what you can do because it's a data structure",
    "start": "3502240",
    "end": "3507359"
  },
  {
    "text": "you can merge the data structures so you can merge all the database updates into one batch update and you can merge all",
    "start": "3507359",
    "end": "3514000"
  },
  {
    "text": "the reads into a single read so if you're doing microservices you know you take 100 operations you merge all the",
    "start": "3514000",
    "end": "3521319"
  },
  {
    "text": "oper all the instructions into one batch you set them all over as a batch and then you bring them back again so you",
    "start": "3521319",
    "end": "3526799"
  },
  {
    "text": "you've replaced 100 API calls with one single API call so it's more efficient and like I say if you if if you got an",
    "start": "3526799",
    "end": "3533280"
  },
  {
    "text": "API that charges you money that'll save you money so optimization is one of the big reasons for doing this and of course",
    "start": "3533280",
    "end": "3539119"
  },
  {
    "text": "you can do different interpretations of the same thing you can have a test interpretation and you have a real",
    "start": "3539119",
    "end": "3544319"
  },
  {
    "text": "interpretation that hits databases and so on so really really complex and it's",
    "start": "3544319",
    "end": "3549920"
  },
  {
    "text": "not not a very general purpose tool but um if you're in interested there Twitter has a whole talk on their Stitch Library",
    "start": "3549920",
    "end": "3556440"
  },
  {
    "text": "they called it Stitch Facebook kind of Library called haxel and they've I think they've done talks and blog posts about it so go and",
    "start": "3556440",
    "end": "3563319"
  },
  {
    "text": "check them out if you're interested in this approach and I have talked about it a little bit some of my other talks but not today right so let's finish up avoid",
    "start": "3563319",
    "end": "3571559"
  },
  {
    "text": "pure code avoid non-pure code in your core domain that's the main takeaway",
    "start": "3571559",
    "end": "3577319"
  },
  {
    "text": "from this talk okay if you do that uh if you do have impure code it's going to be really hard to test and really",
    "start": "3577319",
    "end": "3583799"
  },
  {
    "text": "unpredictable so instead the first thing you should do is push the I/O to the edges using dependency rejection which",
    "start": "3583799",
    "end": "3589960"
  },
  {
    "text": "is what I talked about most if you really can't do that or your colleagues",
    "start": "3589960",
    "end": "3595119"
  },
  {
    "text": "can't stand doing that or whatever then try using you know dependency injection or parameterization and if you really",
    "start": "3595119",
    "end": "3601119"
  },
  {
    "text": "are Twitter or Facebook and you need some really complex thing do look at The Interpreter pattern uh it's kind of interesting but it's probably overkill",
    "start": "3601119",
    "end": "3607520"
  },
  {
    "text": "for most people so that's the end of my talk I'm going to put the slides and videos again on my website if you like",
    "start": "3607520",
    "end": "3615319"
  },
  {
    "text": "this one I have lots of other talks on my website um I have one on composition which is functional programming and I",
    "start": "3615319",
    "end": "3620359"
  },
  {
    "text": "have one on Pipeline we programming which is kind of fun and then of course I have my book which people seem to like",
    "start": "3620359",
    "end": "3626039"
  },
  {
    "text": "so um yeah thanks very much [Applause]",
    "start": "3626039",
    "end": "3634940"
  }
]