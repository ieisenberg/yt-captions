[
  {
    "text": "and we're live okay uh so I put up this warning",
    "start": "560",
    "end": "5600"
  },
  {
    "text": "slide so I just want to before you get too comfortable um I'm going to to basically",
    "start": "5600",
    "end": "12519"
  },
  {
    "text": "go through assembly for at least 45 minutes of this presentation okay I will not be offended",
    "start": "12519",
    "end": "19600"
  },
  {
    "text": "if you get up and leave now H but I will be offended if after 40 like 45 minutes",
    "start": "19600",
    "end": "25359"
  },
  {
    "text": "of assembly you decide that what the hell was I just a part of and give me a red card so so this is a deal here you",
    "start": "25359",
    "end": "32160"
  },
  {
    "text": "can give me a red card for a lot of things but you can't be because I exposed you to assembly for 45",
    "start": "32160",
    "end": "37640"
  },
  {
    "text": "minutes okay we're good all right so you haven't worked with assembly then you",
    "start": "37640",
    "end": "43480"
  },
  {
    "text": "have no hope of understanding hopefully you will understand we'll",
    "start": "43480",
    "end": "50399"
  },
  {
    "text": "see we'll see you tell me okay okay um so the question was will I understand",
    "start": "50399",
    "end": "55760"
  },
  {
    "text": "well well that that that's the experiment this is the first time I do the talk of well hm we'll have we we'll",
    "start": "55760",
    "end": "60879"
  },
  {
    "text": "see all right so uh the talk is called uh return oriented programming and",
    "start": "60879",
    "end": "66640"
  },
  {
    "text": "introduction uh but to give you an introduction to return oriented programming we have to do a lot of",
    "start": "66640",
    "end": "72360"
  },
  {
    "text": "assembly um so I'm not going to spend too much time on my bio I'm a C++",
    "start": "72360",
    "end": "78920"
  },
  {
    "text": "programmer I've worked places I have a masters in computer science and my pronouns are she there she they okay so",
    "start": "78920",
    "end": "87840"
  },
  {
    "text": "what we're going to do today is what I affectionally call Semi Artis artisanal",
    "start": "87840",
    "end": "93240"
  },
  {
    "text": "R uh which means that we're going to use some tools to generate some some stuff and then we're just going to stitch it",
    "start": "93240",
    "end": "99200"
  },
  {
    "text": "together ourselves and and and it's basically to give you a feel for the workflow okay so uh our our vulnerable",
    "start": "99200",
    "end": "108799"
  },
  {
    "text": "uh application is a tiny application uh that who's right here uh wrote the uh",
    "start": "108799",
    "end": "116320"
  },
  {
    "text": "the the original version of it has only three functions we don't really care much about this uh application it has a",
    "start": "116320",
    "end": "123680"
  },
  {
    "text": "main function that calls authenticate and launch which is in the middle here authenticate launch here is going to",
    "start": "123680",
    "end": "129599"
  },
  {
    "text": "call possibly launch missiles on top there based on whether or not you give it the right password and this is",
    "start": "129599",
    "end": "137319"
  },
  {
    "text": "Loosely inspired by the movie War games which you might have seen if you are old",
    "start": "137319",
    "end": "144760"
  },
  {
    "text": "and and if if you are young you should see it and it's retro cool um anyway so",
    "start": "144760",
    "end": "150840"
  },
  {
    "text": "this is the application we won't care too much about it but I'll give you like the idea of it is that it will print a",
    "start": "150840",
    "end": "156560"
  },
  {
    "text": "prompt saying that you should tell it like the secret uh you if you tell it a wrong secret so for example David it",
    "start": "156560",
    "end": "163640"
  },
  {
    "text": "will say access denied and then operation complete and it will exit if you tell it the right secret which is",
    "start": "163640",
    "end": "170200"
  },
  {
    "text": "Joshua which makes sense if you saw the movie that you probably didn't see and then it will say launching missiles and",
    "start": "170200",
    "end": "177519"
  },
  {
    "text": "then operation complete so that is the basic basic functionality of this and this is how the the the programmer when",
    "start": "177519",
    "end": "183360"
  },
  {
    "text": "they wrote the the the program this is how they intended it to work um unfortunately it has a",
    "start": "183360",
    "end": "189519"
  },
  {
    "text": "vulnerability um so we have a stack allocated buffer right here and so when",
    "start": "189519",
    "end": "194879"
  },
  {
    "text": "we uh read in uh whatever the user said we are using C in and C in will",
    "start": "194879",
    "end": "202040"
  },
  {
    "text": "happily write over the end of the buffer and go on as long as you like um so we",
    "start": "202040",
    "end": "208159"
  },
  {
    "text": "have a stack uh buffer over potentially here now for to to make this fit on the",
    "start": "208159",
    "end": "214319"
  },
  {
    "text": "slide imagine that the buffer is is small um and so this is what the programmer",
    "start": "214319",
    "end": "220480"
  },
  {
    "text": "intended and uh and what if we write Global thermal nuclear war yet again",
    "start": "220480",
    "end": "226040"
  },
  {
    "text": "something that would make sense if you saw the movie um and then we end up in something that that um that has been",
    "start": "226040",
    "end": "232480"
  },
  {
    "text": "described as a as a weird State and this is a whole Theory and I'm not going to go into it but if you want to to to look",
    "start": "232480",
    "end": "239200"
  },
  {
    "text": "into that uh it's a it's a it's a model for for thinking about exploitation and it's called Uh the weird machine but",
    "start": "239200",
    "end": "246560"
  },
  {
    "text": "anyway so the weird State here is basically we're going to crash right uh because we did a buffer overflow and",
    "start": "246560",
    "end": "252640"
  },
  {
    "text": "it's probably corrupted things on the stock good chance we're going to crash at this point uh",
    "start": "252640",
    "end": "258919"
  },
  {
    "text": "okay I'm not going to explain anything more about that application we Pro we don't actually care about that",
    "start": "258919",
    "end": "264000"
  },
  {
    "text": "application from this point on um uh we will care about the binary itself",
    "start": "264000",
    "end": "270560"
  },
  {
    "text": "okay so in this presentation we're going to do a 32bit mostly because it's",
    "start": "270560",
    "end": "275840"
  },
  {
    "text": "smaller fits better on a slide uh and things like that uh also because uh",
    "start": "275840",
    "end": "281520"
  },
  {
    "text": "because the pointers are smaller we we don't have a lot of null bytes in our",
    "start": "281520",
    "end": "286639"
  },
  {
    "text": "exploit and it helps because we're reading a string doesn't really matter it's it would be similar in 64-bit uh",
    "start": "286639",
    "end": "293560"
  },
  {
    "text": "for another application okay so Intel 32-bit",
    "start": "293560",
    "end": "300160"
  },
  {
    "text": "and we're going to go through uh how we would design the the Shell Code which is the the exploit that we want to run and",
    "start": "300160",
    "end": "307720"
  },
  {
    "text": "then we will go from that to doing the same thing in R okay so again a warning",
    "start": "307720",
    "end": "314840"
  },
  {
    "text": "this whole thing is about exploitation if that's not your",
    "start": "314840",
    "end": "320440"
  },
  {
    "text": "jam the door is there go run run",
    "start": "320440",
    "end": "325840"
  },
  {
    "text": "okay um okay so Shell Code and shell code is a piece of code typically a",
    "start": "325840",
    "end": "331759"
  },
  {
    "text": "machine code so think this these are bites right just regular bites uh and",
    "start": "331759",
    "end": "338080"
  },
  {
    "text": "that are delivered and executed as a part of an exploit so we are going to to try to run code malicious code in some",
    "start": "338080",
    "end": "346319"
  },
  {
    "text": "way um the reason why it's called shell code is the traditional uh traditional",
    "start": "346319",
    "end": "352600"
  },
  {
    "text": "use was uh to start a shell so this was this was I think the term was coined in",
    "start": "352600",
    "end": "357680"
  },
  {
    "text": "the '90s uh and uh and so and it was based on Linux Unix like systems right",
    "start": "357680",
    "end": "364919"
  },
  {
    "text": "so the idea was to start like something like SL bin slsh which is what we will do today um in real exploits it will",
    "start": "364919",
    "end": "373360"
  },
  {
    "text": "generally do something more advanced uh like downloading something from the Internet or connecting to a",
    "start": "373360",
    "end": "380319"
  },
  {
    "text": "server to be ready to execute a command or something you know more but um for",
    "start": "380319",
    "end": "388000"
  },
  {
    "text": "this example we will just start /bin/sh which is probably Dash It's a",
    "start": "388000",
    "end": "394400"
  },
  {
    "text": "Sim link to Dash um so uh very very light introduction uh to to to Linux and",
    "start": "394400",
    "end": "402759"
  },
  {
    "text": "programs H so in in Linux for the purposes of this presentation it is",
    "start": "402759",
    "end": "408240"
  },
  {
    "text": "useful to think that we have a process and inside of that process there is a",
    "start": "408240",
    "end": "413440"
  },
  {
    "text": "program so these two things think of them as separate things so we have a process it has virtual address space it",
    "start": "413440",
    "end": "420840"
  },
  {
    "text": "has stuff in it and a part of the things uh that are in this address space is the",
    "start": "420840",
    "end": "426800"
  },
  {
    "text": "program that we are currently running in this case our vulnerable program our uh",
    "start": "426800",
    "end": "433440"
  },
  {
    "text": "War Games program uh if at some point uh we manage to execute uh our Shell Code",
    "start": "433440",
    "end": "441599"
  },
  {
    "text": "our Shell Code has uh its only goal is to try to run execve which is a system",
    "start": "441599",
    "end": "446840"
  },
  {
    "text": "call on on Linux and and and here we want to start",
    "start": "446840",
    "end": "453720"
  },
  {
    "text": "/bin/sh if we execute if we manage to do that inside of the vulnerable program",
    "start": "453720",
    "end": "460759"
  },
  {
    "text": "the whole functionality of xve is to blow away our vulnerable program and replace it with",
    "start": "460759",
    "end": "467479"
  },
  {
    "text": "/bin/sh but note it is the same process okay that's the whole goal so",
    "start": "467479",
    "end": "474759"
  },
  {
    "text": "our process our program will turn into a shell that has a prompt where you can",
    "start": "474759",
    "end": "480319"
  },
  {
    "text": "write LS okay",
    "start": "480319",
    "end": "485919"
  },
  {
    "text": "yes all right so the plan so this this is the plan for the entire presentation",
    "start": "485919",
    "end": "492960"
  },
  {
    "text": "we will start by writing the C code for the Shell Code that we want to do uh then we're going to test it to make sure",
    "start": "492960",
    "end": "498919"
  },
  {
    "text": "it actually does what we intended it to do I recommend you do this at any stage",
    "start": "498919",
    "end": "504080"
  },
  {
    "text": "throughout this process because it's very easy to break something um then we are going to now that we know what we",
    "start": "504080",
    "end": "510599"
  },
  {
    "text": "want to do we're going to write in line assembly uh that does what we want it to do and that's again we want to test that",
    "start": "510599",
    "end": "518320"
  },
  {
    "text": "to make sure it still does what we wanted it to do and then we will go from that stage to creating a Rob chain and",
    "start": "518320",
    "end": "525959"
  },
  {
    "text": "I'll show you what I'll tell you what a Rob chain is at that point that does the same thing as we have done already and",
    "start": "525959",
    "end": "533080"
  },
  {
    "text": "then we're going to test that that still does what we wanted to do that is the entire plan of the entire hour all right",
    "start": "533080",
    "end": "540240"
  },
  {
    "text": "okay so we start with writing the C code um so so all code in this",
    "start": "540240",
    "end": "547519"
  },
  {
    "text": "presentation is bad code um so the C code that we want is going to look like",
    "start": "547519",
    "end": "553360"
  },
  {
    "text": "this and I've split it into multiple lines and and uh and variables for for clarity as we go so the first part here",
    "start": "553360",
    "end": "560839"
  },
  {
    "text": "is we're going to want to close a file descriptor so this is uh file descript is zero exactly why we have to do this I",
    "start": "560839",
    "end": "567160"
  },
  {
    "text": "don't have time to explain um but but I understand it now because",
    "start": "567160",
    "end": "572839"
  },
  {
    "text": "because Michael explained it to me yesterday um so and and and so the second part",
    "start": "572839",
    "end": "578839"
  },
  {
    "text": "here is we're going to call another system called called open uh both of these we're doing uh to make sure that",
    "start": "578839",
    "end": "584760"
  },
  {
    "text": "that uh we are now uh reading a standard in from the terminal but it doesn't really matter the point is we have two",
    "start": "584760",
    "end": "590640"
  },
  {
    "text": "system calls and then we have our exv so we we have three calls we need to make",
    "start": "590640",
    "end": "597920"
  },
  {
    "text": "right okay so uh we will test it by uh compiling it",
    "start": "597920",
    "end": "603320"
  },
  {
    "text": "and even to compile it without warning we actually have to pass a flag to turn off some warning and that's how bad it",
    "start": "603320",
    "end": "608760"
  },
  {
    "text": "is right um but that's fine we don't care we're going to rent it and it gives us a shell prompt so here we could have",
    "start": "608760",
    "end": "615920"
  },
  {
    "text": "written like LS or something right uh so this is the whole goal of this program",
    "start": "615920",
    "end": "621920"
  },
  {
    "text": "the program that we compiled was the one that you saw which had the code with the close open and XXV but when you run it",
    "start": "621920",
    "end": "628959"
  },
  {
    "text": "it g gives us a show yeah all right so we now know what we want to do",
    "start": "628959",
    "end": "637600"
  },
  {
    "text": "um but how are we going to do this in assembly so on uh x86 um 32bit the the",
    "start": "637600",
    "end": "645920"
  },
  {
    "text": "calling convention for for CIS calls uh is like this so basically calling",
    "start": "645920",
    "end": "651639"
  },
  {
    "text": "convention in this case is what does the colonel where does the colonel expect to find the arguments to the CIS call and",
    "start": "651639",
    "end": "658079"
  },
  {
    "text": "how does it know what CIS call you want to do okay so that means we're going to be dealing with",
    "start": "658079",
    "end": "664639"
  },
  {
    "text": "registers uh so the first register we're going to care about is eax uh this is",
    "start": "664639",
    "end": "670800"
  },
  {
    "text": "Intel is a wonderful platform because it is backwards compatible which uh",
    "start": "670800",
    "end": "675959"
  },
  {
    "text": "basically means it's kind of super mega complicated um so eax is is a register",
    "start": "675959",
    "end": "685040"
  },
  {
    "text": "uh it is a 32-bit register uh but once upon a time in was a 16bit uh platform",
    "start": "685040",
    "end": "691399"
  },
  {
    "text": "so it also has a part of it that you can use the 16bit names for and then you can",
    "start": "691399",
    "end": "696560"
  },
  {
    "text": "even use uh 8 bit names for for the first bite and then the second bite so a",
    "start": "696560",
    "end": "702360"
  },
  {
    "text": "l and ah uh we're not going to worry too much about that I just want you to to know",
    "start": "702360",
    "end": "708279"
  },
  {
    "text": "that it is the same register we can just have different names for parts of it ebx",
    "start": "708279",
    "end": "713519"
  },
  {
    "text": "has the same system and ECX and edx so the CIS call number is",
    "start": "713519",
    "end": "721880"
  },
  {
    "text": "where we're going to put to say to the colonel we want to do this CIS call uh our first argument we have to pass an",
    "start": "721880",
    "end": "728399"
  },
  {
    "text": "ebx the second in in ECX and then the third in edx okay so this is the plan this is",
    "start": "728399",
    "end": "734839"
  },
  {
    "text": "what we're going to spend all our time on okay all right so this was the C code",
    "start": "734839",
    "end": "742240"
  },
  {
    "text": "for our Shell Code let's look at the first two lines okay so close we want to do this",
    "start": "742240",
    "end": "748920"
  },
  {
    "text": "we want to to uh to close file descript is zero all right so so looking at the",
    "start": "748920",
    "end": "754680"
  },
  {
    "text": "calling convention for close it says that the CIS call number for that is is uh",
    "start": "754680",
    "end": "760680"
  },
  {
    "text": "hex6 and um which is six because you know even in hexadecimal um uh but and",
    "start": "760680",
    "end": "768959"
  },
  {
    "text": "the the only argument that it needs is passed in ebx and that's an unsigned int",
    "start": "768959",
    "end": "774680"
  },
  {
    "text": "and in our case Zero which makes this relatively easy and the the other two uh",
    "start": "774680",
    "end": "780279"
  },
  {
    "text": "registers are not in use for a close Okay so we have our variable here",
    "start": "780279",
    "end": "785519"
  },
  {
    "text": "and we want to pass it and it's zero so the the assembly for this is is",
    "start": "785519",
    "end": "793079"
  },
  {
    "text": "uh relatively short I I try to limit the number of assembly instructions that I have so the first two lines uh we start",
    "start": "793079",
    "end": "800360"
  },
  {
    "text": "on the line one uh where we are doing an exor and this is a way to set a register",
    "start": "800360",
    "end": "805639"
  },
  {
    "text": "to zero so after we've done the exor of eax it will be zero on line two uh we",
    "start": "805639",
    "end": "814120"
  },
  {
    "text": "are um moving uh the number let's see if I can do this number six into eax so",
    "start": "814120",
    "end": "822240"
  },
  {
    "text": "that means that after we've executed these two instructions eax will have uh",
    "start": "822240",
    "end": "827639"
  },
  {
    "text": "the value six I'll show you more on the next slide and then we do an xor of ebx because that's where we had to have the",
    "start": "827639",
    "end": "834040"
  },
  {
    "text": "file descriptor and now that's also zero and then oh no wait a second and then we",
    "start": "834040",
    "end": "839160"
  },
  {
    "text": "do the final line line four where we do int 80 um hex 80 and that's how you uh",
    "start": "839160",
    "end": "846120"
  },
  {
    "text": "invoke AIS so when we do that the colonel will go and pick in the eax register see oh we're doing CIS call",
    "start": "846120",
    "end": "852959"
  },
  {
    "text": "close Okay where is the file descriptor it's an ebx and it will take it and you know and it will do the thing all right",
    "start": "852959",
    "end": "860440"
  },
  {
    "text": "uh so I will try to step you through assembly by using uh slides I'm very",
    "start": "860440",
    "end": "865759"
  },
  {
    "text": "ambitious um so we have we're going to fill our first register that is the eax",
    "start": "865759",
    "end": "871959"
  },
  {
    "text": "register so we start by by uh doing xer of eax so now the state of the register",
    "start": "871959",
    "end": "878279"
  },
  {
    "text": "on the far right there is is what it is currently right so we've done an exor",
    "start": "878279",
    "end": "883360"
  },
  {
    "text": "it's now zero uh then we move uh uh hex 6 into",
    "start": "883360",
    "end": "888920"
  },
  {
    "text": "eax and now it is hex 6 and then we do uh for for the",
    "start": "888920",
    "end": "895120"
  },
  {
    "text": "file descriptor which is an ebx we will exort it and it's zero then we do int 0",
    "start": "895120",
    "end": "900440"
  },
  {
    "text": "and it will do the thing all right that was your soft introduction to",
    "start": "900440",
    "end": "908920"
  },
  {
    "text": "assembly okay it's only downhill from here all right um okay so then we are going to do open and and immediately you",
    "start": "908920",
    "end": "916160"
  },
  {
    "text": "can see that this is going to be worse uh because we have a pointer and a string um so uh so we have uh this is",
    "start": "916160",
    "end": "925800"
  },
  {
    "text": "the code we're going to try to do uh how looking at the calling convention for open it's going to expect the CIS call",
    "start": "925800",
    "end": "932519"
  },
  {
    "text": "in eax and then the pointer to the file name so that means the address of where",
    "start": "932519",
    "end": "937839"
  },
  {
    "text": "the string begins it's going to be expecting it in ebx and then uh in ECX",
    "start": "937839",
    "end": "944279"
  },
  {
    "text": "it wants Flags which is an INT which is probably fine because we've done an INT already so we're all right and then in",
    "start": "944279",
    "end": "951240"
  },
  {
    "text": "edx it's going to look for umot which is an in you know in Disguise and so that's",
    "start": "951240",
    "end": "957040"
  },
  {
    "text": "probably going to be fine too so what is going to be a problem for us here that we don't know how to do is is how do we",
    "start": "957040",
    "end": "962680"
  },
  {
    "text": "get the pointer in ebx and where is the string right all",
    "start": "962680",
    "end": "968720"
  },
  {
    "text": "right so a little more introduction to to",
    "start": "968720",
    "end": "974160"
  },
  {
    "text": "assembly okay so there is another register I haven't told you about uh which is the stock pointer register uh",
    "start": "974160",
    "end": "980920"
  },
  {
    "text": "into stock pointer register is just going to say this is currently the top of the stack uh whenever you do a push",
    "start": "980920",
    "end": "987319"
  },
  {
    "text": "or a pop as normal normal stack usage this will be updated so when you push it",
    "start": "987319",
    "end": "992519"
  },
  {
    "text": "will you know point to new location and pop it will point to the new location I am",
    "start": "992519",
    "end": "999319"
  },
  {
    "text": "using that language because on x86 the stack is super weird and it grows",
    "start": "999319",
    "end": "1004600"
  },
  {
    "text": "towards lower addresses and so so when it so when you push it goes",
    "start": "1004600",
    "end": "1012120"
  },
  {
    "text": "up and when you pop it goes down and it's just very confusing so I've just",
    "start": "1012120",
    "end": "1017720"
  },
  {
    "text": "eliminated that from the entire presentation and we don't care okay but the stack poter register will hold the",
    "start": "1017720",
    "end": "1023959"
  },
  {
    "text": "address of the thing that is on top of the stack so okay um yes so as we do it",
    "start": "1023959",
    "end": "1030640"
  },
  {
    "text": "it will get updated magically behind the scenes as the CPU is executing our our",
    "start": "1030640",
    "end": "1036959"
  },
  {
    "text": "instructions uh it also of course why not has uh the same kind of uh wonderful",
    "start": "1036959",
    "end": "1044480"
  },
  {
    "text": "uh names so for example on on X uh 64 or on x86 64 bit it will it's called Uh RSP",
    "start": "1044480",
    "end": "1053400"
  },
  {
    "text": "because uh I don't know uh I think the es became like",
    "start": "1053400",
    "end": "1059200"
  },
  {
    "text": "extended and then I don't know what happened with the r anybody know no we don't care um okay so this is",
    "start": "1059200",
    "end": "1067640"
  },
  {
    "text": "going to be the assembly all right we'll we'll step to through it like I did before but the",
    "start": "1067640",
    "end": "1073080"
  },
  {
    "text": "point is the first two lines are going to fill in eax uh then this all of this",
    "start": "1073080",
    "end": "1078440"
  },
  {
    "text": "is going to to fix the whole file name issue and then we're just going to use xor to zero out ECX and edx and then in",
    "start": "1078440",
    "end": "1087360"
  },
  {
    "text": "80 for the CIS call okay so now the diagram got a little bit more complicated so we're going to start with",
    "start": "1087360",
    "end": "1094200"
  },
  {
    "text": "filling out eax uh so we start by xoring it so we know it's zero it's just you probably",
    "start": "1094200",
    "end": "1101480"
  },
  {
    "text": "don't have to do this but I just tend to do this all the time um so then we move",
    "start": "1101480",
    "end": "1107679"
  },
  {
    "text": "uh five into e X and now we're done with the ax cuz that's all it needed we needed to put the CIS call number in",
    "start": "1107679",
    "end": "1113039"
  },
  {
    "text": "there and it's in there so we're done so then we move over to ebx which is where",
    "start": "1113039",
    "end": "1118919"
  },
  {
    "text": "all the fun happens um so the first thing is we're going to zero out ebx",
    "start": "1118919",
    "end": "1124440"
  },
  {
    "text": "because we're going to be using it for uh for working in uh and we're going to",
    "start": "1124440",
    "end": "1130440"
  },
  {
    "text": "push it and the reason for that is later this is where our string is",
    "start": "1130440",
    "end": "1136400"
  },
  {
    "text": "going to be so it's going to be on the stack here and this first zero that we just pushed",
    "start": "1136400",
    "end": "1142039"
  },
  {
    "text": "is going to be our null Terminator because you know it's fun all",
    "start": "1142039",
    "end": "1147960"
  },
  {
    "text": "right and so what we're going to do is we're going to put this magic value into ebx um but this magic value isn't that",
    "start": "1147960",
    "end": "1154000"
  },
  {
    "text": "magic uh because what it actually is is a part of a string uh the ASI characters",
    "start": "1154000",
    "end": "1160280"
  },
  {
    "text": "for that string so it's backwards so this is slash so 2f is slash then 74 is",
    "start": "1160280",
    "end": "1168200"
  },
  {
    "text": "T and and then 74 is T and then 79 is is slash or Y oh God this slash",
    "start": "1168200",
    "end": "1177039"
  },
  {
    "text": "t t y That's the Way okay sorry I'm dyslectic so me fix mixing up letters is",
    "start": "1177039",
    "end": "1183679"
  },
  {
    "text": "totally in character um no fine um okay so so we have slash tt2 y",
    "start": "1183679",
    "end": "1192720"
  },
  {
    "text": "here and then we're going to take the rest of the string and do the same same trick so we we put it we put part the",
    "start": "1192720",
    "end": "1199880"
  },
  {
    "text": "asky codes for some of the letters into our register we can only do four at a time because it's a 32bit platform which",
    "start": "1199880",
    "end": "1207120"
  },
  {
    "text": "which uh divided by by eight gives us four characters on 64 bit you can do",
    "start": "1207120",
    "end": "1212880"
  },
  {
    "text": "eight characters in one register um okay so now we have the string it's on the stack it's even null",
    "start": "1212880",
    "end": "1219840"
  },
  {
    "text": "terminated um so and we and I told you before that when you push and you pop the the stack pointer is updated which",
    "start": "1219840",
    "end": "1227120"
  },
  {
    "text": "means the stack pointer is right now now pointing to the top of the stack which is the beginning of our string which is",
    "start": "1227120",
    "end": "1233400"
  },
  {
    "text": "what we needed so then we take the stack pointer we put it into ebx and now we have a pointer to the",
    "start": "1233400",
    "end": "1239720"
  },
  {
    "text": "string in ebx all right the rest of it you you know already because everybody's paying",
    "start": "1239720",
    "end": "1245480"
  },
  {
    "text": "attention and so we just zero out these two registers uh so that is ECX and edx",
    "start": "1245480",
    "end": "1252679"
  },
  {
    "text": "and we're done and that means we're going to do int 80 to actually invoke this s call",
    "start": "1252679",
    "end": "1259200"
  },
  {
    "text": "all right all right brings us to the last one now the fun",
    "start": "1259200",
    "end": "1265880"
  },
  {
    "text": "thing when we get here is we have other trouble here but some of the things here we know already uh so we know how to do",
    "start": "1265880",
    "end": "1271960"
  },
  {
    "text": "the string we have a plan for that uh now we have these uh pointers to pointers thing uh but we're just going",
    "start": "1271960",
    "end": "1278840"
  },
  {
    "text": "to set everything to null so we're hoping that's fine and then we're going to do the execve call but we know that",
    "start": "1278840",
    "end": "1285559"
  },
  {
    "text": "if we just look up the CIS call we can figure out the CIS call number so this is what we're going to do",
    "start": "1285559",
    "end": "1292039"
  },
  {
    "text": "now so uh we look up the calling convention for XXV and it wants zero B in eax so that's fine uh then we want",
    "start": "1292039",
    "end": "1300120"
  },
  {
    "text": "the pointer to the name which is the /bin/sh in evx and then um so that's the",
    "start": "1300120",
    "end": "1307440"
  },
  {
    "text": "first parameter to XXV uh then it wants an argv and if we were good to Citizens we would give it",
    "start": "1307440",
    "end": "1313799"
  },
  {
    "text": "to it but we're not so we're not going to so it's just going to get null and then in",
    "start": "1313799",
    "end": "1319840"
  },
  {
    "text": "edx uh we're going to do the same so just no so keeping it simple for ourselves here so if we look at the",
    "start": "1319840",
    "end": "1326840"
  },
  {
    "text": "assembly um it's also long uh first one is going to set the the the cisal number",
    "start": "1326840",
    "end": "1332480"
  },
  {
    "text": "in eax put the the file name in evx and then uh we're going to zero out both uh",
    "start": "1332480",
    "end": "1339840"
  },
  {
    "text": "ECX and edx and then we're going to do uh invoke theis call",
    "start": "1339840",
    "end": "1345039"
  },
  {
    "text": "so you know where this is going it's going to be very similar to what we did before so we're just going to put this",
    "start": "1345039",
    "end": "1351480"
  },
  {
    "text": "is call number in eax we're going to uh build the string on the",
    "start": "1351480",
    "end": "1357360"
  },
  {
    "text": "stack and then we are going to put the the in ebx we're going to put uh where",
    "start": "1357360",
    "end": "1363039"
  },
  {
    "text": "the stack pointer is now into ebx so that is the pointer and for people who never understood C pointers before",
    "start": "1363039",
    "end": "1370279"
  },
  {
    "text": "you're welcome um okay and then uh in arv we're just",
    "start": "1370279",
    "end": "1377640"
  },
  {
    "text": "going to zero out the these two right so we're done and we're going to do our our uh",
    "start": "1377640",
    "end": "1383080"
  },
  {
    "text": "CIS so far so good you're halfway okay so we're going to just uh test that",
    "start": "1383080",
    "end": "1389960"
  },
  {
    "text": "to make sure it actually works because Patricia says a lot of things and so here is our code we have our close we",
    "start": "1389960",
    "end": "1395679"
  },
  {
    "text": "have our open and we have our XXV so if we uh then uh build that and",
    "start": "1395679",
    "end": "1403240"
  },
  {
    "text": "run it it gives us a shell prompt all right so now we have we have reproduced",
    "start": "1403240",
    "end": "1409120"
  },
  {
    "text": "what we did in C code now we did it in Intel syntax assembly and now we move",
    "start": "1409120",
    "end": "1416039"
  },
  {
    "text": "into um the hard part all right so the topic of this",
    "start": "1416039",
    "end": "1422240"
  },
  {
    "text": "presentation was not uh how do we write Shell Code it is creating uh uh r or",
    "start": "1422240",
    "end": "1429360"
  },
  {
    "text": "teaching R oriented or return oriented programming uh so returner to programming is an exploitation technique",
    "start": "1429360",
    "end": "1437360"
  },
  {
    "text": "uh that was designed specifically uh to to get around the problem of the stack",
    "start": "1437360",
    "end": "1443279"
  },
  {
    "text": "no longer being executable and that means that if you wrote Shell Code and put it on the stack which you know in",
    "start": "1443279",
    "end": "1449559"
  },
  {
    "text": "the good old days was how you did things uh then we couldn't actually execute",
    "start": "1449559",
    "end": "1454919"
  },
  {
    "text": "that code because it was marked as not executable and so this became you know a sad thing uh so when your stack is not",
    "start": "1454919",
    "end": "1463720"
  },
  {
    "text": "executable what do you do okay because we have our we have our",
    "start": "1463720",
    "end": "1469320"
  },
  {
    "text": "Shell Code this is what we want to achieve but if we actually take the bytes that that represents this assembly",
    "start": "1469320",
    "end": "1475480"
  },
  {
    "text": "and we put it on to the stack we cannot execute them so the foundational idea of uh of r",
    "start": "1475480",
    "end": "1484159"
  },
  {
    "text": "or maybe kind of two ideas uh so the first one is that that there there is an",
    "start": "1484159",
    "end": "1489640"
  },
  {
    "text": "instruction called Rett and that is the instruction uh that uh is executed when",
    "start": "1489640",
    "end": "1494760"
  },
  {
    "text": "you return from a function uh it has a a a friend called called",
    "start": "1494760",
    "end": "1502520"
  },
  {
    "text": "call and and and when you call uh when you when you invoke call the call",
    "start": "1502520",
    "end": "1508919"
  },
  {
    "text": "instruction uh it will put the address of the next instruction on on the stack",
    "start": "1508919",
    "end": "1515120"
  },
  {
    "text": "and when you do R it will pop that address off the stack and put it in the instruction pointer yet another thing I",
    "start": "1515120",
    "end": "1521640"
  },
  {
    "text": "haven't told you about but I'll tell you about so so the idea here is that a r",
    "start": "1521640",
    "end": "1527960"
  },
  {
    "text": "will cause you to jump back to where you were called from and continue executing",
    "start": "1527960",
    "end": "1533120"
  },
  {
    "text": "where you were called from after the function is done hopefully after we've",
    "start": "1533120",
    "end": "1538360"
  },
  {
    "text": "done this like 50 times this will make sense um so just as a visual we are",
    "start": "1538360",
    "end": "1547320"
  },
  {
    "text": "looking at a r instruction being executed so R it's right there on the",
    "start": "1547320",
    "end": "1555159"
  },
  {
    "text": "bottom it just says red if you can't see it it doesn't matter and okay so imagine this is a very small stack it has just",
    "start": "1555159",
    "end": "1562360"
  },
  {
    "text": "two addresses on it that's all that's there um the stack pointer is pointing at the top of the stack and so a r is",
    "start": "1562360",
    "end": "1571760"
  },
  {
    "text": "being executed and so what happens that means that whatever is on top of the",
    "start": "1571760",
    "end": "1578720"
  },
  {
    "text": "stack is going to be copied into the instruction pointer we did a pop so that means the stack pointer has to go down",
    "start": "1578720",
    "end": "1586159"
  },
  {
    "text": "so this is the state but when we when the instructions are",
    "start": "1586159",
    "end": "1591200"
  },
  {
    "text": "continuously running right so when we put a different address in the instruction pointer it has to go there and start executing code uh and this",
    "start": "1591200",
    "end": "1598200"
  },
  {
    "text": "address is somewhere in executable memory so somewhere there's an address and the",
    "start": "1598200",
    "end": "1604760"
  },
  {
    "text": "instruction pointer will jump there and start executing stuff in this case stuff is xor",
    "start": "1604760",
    "end": "1612799"
  },
  {
    "text": "eax uh so we're going to start by doing that so the first part here is xor eax",
    "start": "1612799",
    "end": "1618799"
  },
  {
    "text": "and we know that that's going to set eax to zero so far so good then it's",
    "start": "1618799",
    "end": "1624000"
  },
  {
    "text": "followed by a which means we would go back to the stack pick address two and",
    "start": "1624000",
    "end": "1630880"
  },
  {
    "text": "so on but we're not going to do that because now I'm going to take it and make it",
    "start": "1630880",
    "end": "1637000"
  },
  {
    "text": "worse so imagine that we did this a lot right so this is we have done a stack",
    "start": "1637000",
    "end": "1643320"
  },
  {
    "text": "buffer overflow and so imagine that you know the the the right hand side here here is the stack so uh so here you have",
    "start": "1643320",
    "end": "1651960"
  },
  {
    "text": "uh the stack allocated buffer uh and then we have the return",
    "start": "1651960",
    "end": "1657799"
  },
  {
    "text": "address so the stack allocated buffer is in a function right somebody it's it has a function and in there there's a stack",
    "start": "1657799",
    "end": "1664000"
  },
  {
    "text": "allocated buffer when we oh no I'm losing my my mic there we go all right and uh",
    "start": "1664000",
    "end": "1673159"
  },
  {
    "text": "once we have an overflow it's going to continue overflowing down the stack uh and and one of the things is",
    "start": "1673159",
    "end": "1679159"
  },
  {
    "text": "going to overwrite is this return address on the stack which was the the intention was that we were going to",
    "start": "1679159",
    "end": "1684760"
  },
  {
    "text": "return from to where we were called and but we're malicious and so we don't care",
    "start": "1684760",
    "end": "1690440"
  },
  {
    "text": "what we do know is at some point in in this vulnerable application there is a r",
    "start": "1690440",
    "end": "1695679"
  },
  {
    "text": "and it will go and grab whatever we put in this location and it's going to put it into the instruction pointer and jump",
    "start": "1695679",
    "end": "1703600"
  },
  {
    "text": "there all right so under here we have what I call the rest of the prop chain we will get to it the point is that we",
    "start": "1703600",
    "end": "1711519"
  },
  {
    "text": "don't really care about the Overflow in the beginning we care about the first first one here so we're going to",
    "start": "1711519",
    "end": "1719399"
  },
  {
    "text": "put an address on the return address and that is the address of the first what is called a r Gadget now the structure of a",
    "start": "1719399",
    "end": "1727480"
  },
  {
    "text": "r Gadget is basically that you have one or a few instructions and then it's followed by a",
    "start": "1727480",
    "end": "1734760"
  },
  {
    "text": "r all of the gadgets will have this structure so right after we have Gadget number two",
    "start": "1734760",
    "end": "1742919"
  },
  {
    "text": "so if we think about what we did before when this address the gadget number one",
    "start": "1742919",
    "end": "1748640"
  },
  {
    "text": "address is copied into the the instruction pointer execution will jump",
    "start": "1748640",
    "end": "1753760"
  },
  {
    "text": "over here it will execute these instructions and then when it's done it's going to do a r which will means",
    "start": "1753760",
    "end": "1761120"
  },
  {
    "text": "that it will go down here pop this one into the instruction pointer now it will go over here do the",
    "start": "1761120",
    "end": "1768159"
  },
  {
    "text": "these instructions oh it's followed by R oh surprise oh there's another one okay so",
    "start": "1768159",
    "end": "1774799"
  },
  {
    "text": "we'll go over here and do that and so on and so forth and that's how they're chained",
    "start": "1774799",
    "end": "1780240"
  },
  {
    "text": "together so by just here on the stack all we have are addresses right just a",
    "start": "1780240",
    "end": "1786120"
  },
  {
    "text": "bunch of addresses oh pointing is really hard um okay so we just have a bunch of addresses here the instructions are",
    "start": "1786120",
    "end": "1793200"
  },
  {
    "text": "actually somewhere else in memory and the reason for that is we are",
    "start": "1793200",
    "end": "1799000"
  },
  {
    "text": "in we are in a process and it has a program probably has a bunch of",
    "start": "1799000",
    "end": "1804440"
  },
  {
    "text": "libraries too and all of these the program code and the library code and",
    "start": "1804440",
    "end": "1809640"
  },
  {
    "text": "all of that has to be in memory and that the the pages that they're on has to be executable so instead of actually",
    "start": "1809640",
    "end": "1816880"
  },
  {
    "text": "putting code in here we are just using the code that is already in memory and so we can jump around in",
    "start": "1816880",
    "end": "1824519"
  },
  {
    "text": "memory from place to place all we have to know is where they are and as long as it has the structure of instructions",
    "start": "1824519",
    "end": "1830720"
  },
  {
    "text": "followed by R we can just chain them together in our exploit and that gives",
    "start": "1830720",
    "end": "1837559"
  },
  {
    "text": "us this and this is called a r chain it's a chain of of addresses to Gadgets",
    "start": "1837559",
    "end": "1844000"
  },
  {
    "text": "in memory all right I'm surprised nobody has running away yet",
    "start": "1844000",
    "end": "1850279"
  },
  {
    "text": "okay so to to put all of this together we we have to put it into an exploit and",
    "start": "1850279",
    "end": "1855799"
  },
  {
    "text": "so in the beginning we're going to have this padding cuz we don't care uh and the first and so this is our rub chain",
    "start": "1855799",
    "end": "1861559"
  },
  {
    "text": "and the first Gadget is going to hit the return address on the stack and then after that this whole mechanism will",
    "start": "1861559",
    "end": "1867080"
  },
  {
    "text": "just drive itself because you jump to that Gadget it has a r it will go to the next Gadget it has a r it will go to the",
    "start": "1867080",
    "end": "1873799"
  },
  {
    "text": "next Gadget and so on okay is this all right yes okay",
    "start": "1873799",
    "end": "1880559"
  },
  {
    "text": "awesome all right um so you can script this uh to make this string uh so so you",
    "start": "1880559",
    "end": "1886039"
  },
  {
    "text": "will have something like this uh so this is a our padding then we have our R chain in the middle and then we just",
    "start": "1886039",
    "end": "1892080"
  },
  {
    "text": "print out the string and you can print it and write it to a file or something all",
    "start": "1892080",
    "end": "1899080"
  },
  {
    "text": "right okay but the cool thing is how do you find all of these gadgets right we",
    "start": "1899080",
    "end": "1906159"
  },
  {
    "text": "have a binary but how do we know where in where these things are and the thing",
    "start": "1906159",
    "end": "1911519"
  },
  {
    "text": "is this is actually something that that lends itself to automation so there are lots and lots of",
    "start": "1911519",
    "end": "1918559"
  },
  {
    "text": "tools to try to find Gadgets in binaries and we're I'm just going to show you one which is called dropper but there are",
    "start": "1918559",
    "end": "1924639"
  },
  {
    "text": "many more and people also many people also make them themselves for fun uh so",
    "start": "1924639",
    "end": "1930919"
  },
  {
    "text": "the so if you uh if you run ropper on our binaries our binary is called Target because it's",
    "start": "1930919",
    "end": "1937360"
  },
  {
    "text": "a great name uh and then we can even say I want I want a r chain that does an exx",
    "start": "1937360",
    "end": "1944600"
  },
  {
    "text": "the and I can even say that these are bad bites I don't want these bites to",
    "start": "1944600",
    "end": "1949679"
  },
  {
    "text": "occur because you know here's we have a z 0 and that's going to be a null Terminator for our string that's not",
    "start": "1949679",
    "end": "1955399"
  },
  {
    "text": "going to be good uh then 09 I think is a space and 0 B might be a tab no 20 is a",
    "start": "1955399",
    "end": "1964360"
  },
  {
    "text": "space but yeah but there are different kinds of characters that will do badly in our exploit so we say okay we don't",
    "start": "1964360",
    "end": "1969399"
  },
  {
    "text": "want those uh so can you create a full Rock chain it's a tab there we",
    "start": "1969399",
    "end": "1976519"
  },
  {
    "text": "go some someone who is making a code editor would know that yes or an editor",
    "start": "1976519",
    "end": "1982440"
  },
  {
    "text": "um yes so basically these are the things that we don't want H and when we run that on our file it loads gadgets",
    "start": "1982440",
    "end": "1989600"
  },
  {
    "text": "because I've run it already and it will say Okay I I can make a rockchain for",
    "start": "1989600",
    "end": "1995880"
  },
  {
    "text": "the CIS call XXV and it's processing and it got all of",
    "start": "1995880",
    "end": "2002799"
  },
  {
    "text": "the gadgets it needs and at the bottom it says CIS call Gadget found and",
    "start": "2002799",
    "end": "2009600"
  },
  {
    "text": "what it ends up making is something that I'll just cut off some of it in the middle here so it's it's a python script",
    "start": "2009600",
    "end": "2016679"
  },
  {
    "text": "right like I showed you earlier it includes a little bit that I'm not going to go through too much here it's",
    "start": "2016679",
    "end": "2022519"
  },
  {
    "text": "basically so that uh the addresses you can rebase them to different kinds of",
    "start": "2022519",
    "end": "2027559"
  },
  {
    "text": "Base addresses uh if you if but it doesn't really matter so don't don't",
    "start": "2027559",
    "end": "2032679"
  },
  {
    "text": "care about it uh the basic idea is what we want to look at is the r chain inside",
    "start": "2032679",
    "end": "2037880"
  },
  {
    "text": "right so this pink section here in the middle all right so this is what it",
    "start": "2037880",
    "end": "2045840"
  },
  {
    "text": "looks like um it looks kind of intimidating uh but we will go through",
    "start": "2045840",
    "end": "2051240"
  },
  {
    "text": "it many times um so the basic idea here is that we have these addresses and these are the addresses of the gadget so",
    "start": "2051240",
    "end": "2057520"
  },
  {
    "text": "this is the first address if I go back and forward you can see it occurs occurs",
    "start": "2057520",
    "end": "2062720"
  },
  {
    "text": "three times so we have it's here and here and then down there at the bottom",
    "start": "2062720",
    "end": "2068079"
  },
  {
    "text": "and it has helpfully given us what the instructions is next to it so this is a",
    "start": "2068079",
    "end": "2073599"
  },
  {
    "text": "pop eax R Pop eax will then take whatever is on top of the stack and put",
    "start": "2073599",
    "end": "2078839"
  },
  {
    "text": "it into eax and then the r will well it will do what R does and so here we have",
    "start": "2078839",
    "end": "2086560"
  },
  {
    "text": "uh the the second Gadget and it does lots of different pops and then the third one it's going to actually uh",
    "start": "2086560",
    "end": "2093158"
  },
  {
    "text": "write something to memory we'll get to it and then it's an exor",
    "start": "2093159",
    "end": "2098240"
  },
  {
    "text": "e uh a pop into ebx ECX and then a bunch of more Pops and an",
    "start": "2098240",
    "end": "2105520"
  },
  {
    "text": "exor and down here we have a negation of eax I'll get to that and the final one",
    "start": "2105520",
    "end": "2110839"
  },
  {
    "text": "is that is might be hard to see in the back is just int 80 R where you don't",
    "start": "2110839",
    "end": "2116440"
  },
  {
    "text": "really you know yeah so so that's going to invoke the CIS call so these are the",
    "start": "2116440",
    "end": "2121480"
  },
  {
    "text": "nine gadgets uh or we can put them up here these are the nine uh Snippets of",
    "start": "2121480",
    "end": "2129160"
  },
  {
    "text": "code that I found and it uses some of them several times uh to to ex to to",
    "start": "2129160",
    "end": "2136040"
  },
  {
    "text": "chain together the what it wants to do and remember what we want to do is we want to fill these four registers with",
    "start": "2136040",
    "end": "2143520"
  },
  {
    "text": "what we need right eax ebx ECX and edx and and that's all we need to do",
    "start": "2143520",
    "end": "2150960"
  },
  {
    "text": "before we do the int 80 which is going to execute the system call and these are the instruction that it uses in the",
    "start": "2150960",
    "end": "2156960"
  },
  {
    "text": "generated uh uh payload",
    "start": "2156960",
    "end": "2162119"
  },
  {
    "text": "so ready okay so this is the stack this is where we're going to have our rchain",
    "start": "2162119",
    "end": "2168839"
  },
  {
    "text": "these are are the registers that are going to be in use uh this is uh where we going to have the three first uh um",
    "start": "2168839",
    "end": "2177319"
  },
  {
    "text": "the three three first gadgets at the bottom um uh this is a memory where we're going",
    "start": "2177319",
    "end": "2184560"
  },
  {
    "text": "to be writing to and here is the instruction pointer",
    "start": "2184560",
    "end": "2189680"
  },
  {
    "text": "all right this is the beginning of our R chain all right so our stack pointers",
    "start": "2189680",
    "end": "2195800"
  },
  {
    "text": "here and for this section I'm not going to move the stack pointer for every time we do a pop we're just going to move it",
    "start": "2195800",
    "end": "2201800"
  },
  {
    "text": "for every Gadget because if not it's going to be very messy uh so just imagine it moves kind",
    "start": "2201800",
    "end": "2207680"
  },
  {
    "text": "of down as we go all right so the first thing is this is going to go into our instruction pointer because a r is being",
    "start": "2207680",
    "end": "2216079"
  },
  {
    "text": "executed uh so that goes into the instruction pointer the instruction will jump down here and it will execute a pop",
    "start": "2216079",
    "end": "2224480"
  },
  {
    "text": "eax now because it's doing a pop eax and you have imagined because you're helpful",
    "start": "2224480",
    "end": "2230480"
  },
  {
    "text": "audience that this stack pointer is moved down here it will pop this value that's here on the stack let's do it",
    "start": "2230480",
    "end": "2237680"
  },
  {
    "text": "like this that is here on the stack which is this string I have helpfully translated the aski for",
    "start": "2237680",
    "end": "2244400"
  },
  {
    "text": "you okay excellent and so we will then move that value into e all",
    "start": "2244400",
    "end": "2252079"
  },
  {
    "text": "right next one uh this uh Gadget well the address of the gadget will be put",
    "start": "2252079",
    "end": "2258680"
  },
  {
    "text": "into the instruction pointer the instruction pointer will jump down here and this one actually has a lot of things we don't care about we actually",
    "start": "2258680",
    "end": "2265680"
  },
  {
    "text": "only care about uh the pop edx but it does pop edx ebx ESI EDI EBP lots of",
    "start": "2265680",
    "end": "2273640"
  },
  {
    "text": "stuff we don't care about uh so what we're going to do it does the pop d x and first and so we have helpfully",
    "start": "2273640",
    "end": "2283680"
  },
  {
    "text": "provided here uh the value that we want uh to put into edx and so we're",
    "start": "2283680",
    "end": "2291400"
  },
  {
    "text": "going to pop so edx is the first pop then pop ebx and we're just going to put trash there ECI trash EDI trash EBP",
    "start": "2291400",
    "end": "2301160"
  },
  {
    "text": "trash we don't care we got the edx and the important thing to notice here is",
    "start": "2301160",
    "end": "2306520"
  },
  {
    "text": "that we have a gadget that does more than we want but we can just kind of",
    "start": "2306520",
    "end": "2312680"
  },
  {
    "text": "provide trash for those um exactly what trash means tends",
    "start": "2312680",
    "end": "2318839"
  },
  {
    "text": "to to uh to uh differ from different types of tools in in roer it's dead beef",
    "start": "2318839",
    "end": "2324760"
  },
  {
    "text": "uh but in lots of them they're just A's or something okay the stack pointer is down",
    "start": "2324760",
    "end": "2331200"
  },
  {
    "text": "here and that will then because we have a r remember this is I'm just going to",
    "start": "2331200",
    "end": "2337440"
  },
  {
    "text": "kind of remind you down here in the corner there's a r and so when this R happens it will go and pick up the next",
    "start": "2337440",
    "end": "2344760"
  },
  {
    "text": "address uh put it in the instruction pointer and this I'm not going to go",
    "start": "2344760",
    "end": "2350480"
  },
  {
    "text": "through too much in detail here but but the the this instruction is going to take uh the pointer that is in",
    "start": "2350480",
    "end": "2358319"
  },
  {
    "text": "edx which is this pointer here and if you see is 1 CA 060 which is the same as",
    "start": "2358319",
    "end": "2366000"
  },
  {
    "text": "as this thing over here um and it's going to put there the value",
    "start": "2366000",
    "end": "2371599"
  },
  {
    "text": "that is in eax which is this little string right so this is what it does it",
    "start": "2371599",
    "end": "2377440"
  },
  {
    "text": "writes what is an eax here all right so we'll leave that because we want that",
    "start": "2377440",
    "end": "2383119"
  },
  {
    "text": "and we do the rest of our rck chain and so let's do this how are we doing on",
    "start": "2383119",
    "end": "2389880"
  },
  {
    "text": "time just so I know okay we're good all right",
    "start": "2389880",
    "end": "2395240"
  },
  {
    "text": "um so we do the first Gadget put put it in the instruction pointer jump to where",
    "start": "2395240",
    "end": "2400400"
  },
  {
    "text": "it is and it's a pop eax so that's great so we put that in eax then we go to the",
    "start": "2400400",
    "end": "2405599"
  },
  {
    "text": "next one and it is the same one we had before uh so here it's going to do a pop",
    "start": "2405599",
    "end": "2412200"
  },
  {
    "text": "into edx uh this value that we helpfully",
    "start": "2412200",
    "end": "2417359"
  },
  {
    "text": "provided on the stack and that is also an address note if we look at the",
    "start": "2417359",
    "end": "2422560"
  },
  {
    "text": "address it matches this address here and so if you if uh for for people who are",
    "start": "2422560",
    "end": "2428079"
  },
  {
    "text": "sitting and doing math in the audience you can see that this is four bytes after this one",
    "start": "2428079",
    "end": "2434599"
  },
  {
    "text": "um and then we just do dead be for everything else and then we move to the",
    "start": "2434599",
    "end": "2439680"
  },
  {
    "text": "last Gadget which is going to to write the value in eax to the",
    "start": "2439680",
    "end": "2445240"
  },
  {
    "text": "address in edx all right so now we're here see this",
    "start": "2445240",
    "end": "2451599"
  },
  {
    "text": "this we still need a null pointer people uh okay and null Terminator Okay so",
    "start": "2451599",
    "end": "2458800"
  },
  {
    "text": "we're going to do it again very similarly I'll do it faster this time uh so we have zero and eax uh we need the",
    "start": "2458800",
    "end": "2465760"
  },
  {
    "text": "pointer to where we're going to write it in edx and then we are going to write there and so we are writing zero over",
    "start": "2465760",
    "end": "2473040"
  },
  {
    "text": "there now we have a string in memory thank goodness all",
    "start": "2473040",
    "end": "2478640"
  },
  {
    "text": "right okay so that brings us to to the registers because we still haven't done the registers we have the string in",
    "start": "2478640",
    "end": "2484800"
  },
  {
    "text": "memory but we don't have we haven't done the registers yet but that's faster so uh the first Gadget is just going to pop",
    "start": "2484800",
    "end": "2493040"
  },
  {
    "text": "uh whatever's on top of the SC stack into ebx and we have the address there uh the next one is going to do uh the",
    "start": "2493040",
    "end": "2499160"
  },
  {
    "text": "same thing for ECX in with the values and then we have",
    "start": "2499160",
    "end": "2504319"
  },
  {
    "text": "uh that we need to do it for edx which has the very convoluted weird one which",
    "start": "2504319",
    "end": "2510079"
  },
  {
    "text": "writes dead beef everywhere um no it's a different one that also has rice step beef and then the here here we are going",
    "start": "2510079",
    "end": "2518040"
  },
  {
    "text": "to pop into eax uh because we need the CIS call number but in this case because",
    "start": "2518040",
    "end": "2523560"
  },
  {
    "text": "we had these bad bites and things it does a little trick which is kind of uh fun if you like um choose complement",
    "start": "2523560",
    "end": "2531319"
  },
  {
    "text": "math um which if you don't you don't care so um so it writes a totally",
    "start": "2531319",
    "end": "2537240"
  },
  {
    "text": "different value than we want and then it does a different instruction which is a",
    "start": "2537240",
    "end": "2542720"
  },
  {
    "text": "negation of the value that's in eax which will Magic transform into the",
    "start": "2542720",
    "end": "2548240"
  },
  {
    "text": "value we want so that's fun all right so this is the",
    "start": "2548240",
    "end": "2555240"
  },
  {
    "text": "this is the state we have managed to fill in all of the registers we have a string it's in memory uh we have the",
    "start": "2555240",
    "end": "2562040"
  },
  {
    "text": "address to that string in in ebx like we were supposed to and so let's having a",
    "start": "2562040",
    "end": "2567640"
  },
  {
    "text": "little bit uh so the last instruction we're going to do is is uh invoking the",
    "start": "2567640",
    "end": "2573520"
  },
  {
    "text": "CIS call and that's it right so if we look at what we needed we needed the CIS",
    "start": "2573520",
    "end": "2579280"
  },
  {
    "text": "call number in eax and we have it we need the string uh the pointer to the string in ebx and we have it and then",
    "start": "2579280",
    "end": "2586920"
  },
  {
    "text": "we're just going to actually pass uh pointers to null in edx and and",
    "start": "2586920",
    "end": "2594319"
  },
  {
    "text": "ECX um and then we invoke the CIS call and Magic",
    "start": "2594319",
    "end": "2601280"
  },
  {
    "text": "happens yes just a quick question so I I got lost at some point when you inv roer",
    "start": "2601280",
    "end": "2608240"
  },
  {
    "text": "orer you just gave it the ex argument as far as I could see but somehow yeah okay",
    "start": "2608240",
    "end": "2614800"
  },
  {
    "text": "let's let's so the question is uh how did the the the rer bit go so I'll let's",
    "start": "2614800",
    "end": "2620640"
  },
  {
    "text": "just have another look because I split it over several slides there we go so",
    "start": "2620640",
    "end": "2625720"
  },
  {
    "text": "the the actual call uh is this okay so here uh the",
    "start": "2625720",
    "end": "2632480"
  },
  {
    "text": "first parameter is is file Target so Target is the name of the binary and it's in current directory and that's the",
    "start": "2632480",
    "end": "2637960"
  },
  {
    "text": "war games binary yes that is the war games binary uh and and then chain XXV",
    "start": "2637960",
    "end": "2643640"
  },
  {
    "text": "just because it can make different types of chains some for Windows and and stuff so you have to indicate which one you",
    "start": "2643640",
    "end": "2649240"
  },
  {
    "text": "want and there is I think some some indication that they want to in the future be able to support many different",
    "start": "2649240",
    "end": "2655760"
  },
  {
    "text": "system calls but I don't think they actually fully support them uh and then the the the last argument is the bad",
    "start": "2655760",
    "end": "2661920"
  },
  {
    "text": "bites and those are the ones that we don't want and if for people who were were wondering about the negation notice",
    "start": "2661920",
    "end": "2669200"
  },
  {
    "text": "that one of our bad bites is 0 B which is the CIS call number which is",
    "start": "2669200",
    "end": "2676040"
  },
  {
    "text": "unfortunate so with the negation we can still have it because it's uh it's there",
    "start": "2676040",
    "end": "2682119"
  },
  {
    "text": "soer just assumes that you want to go to that you want to start a show so so yes",
    "start": "2682119",
    "end": "2689400"
  },
  {
    "text": "the traditional so this what I've shown you the XXV of/ bsh is like the traditional thing so",
    "start": "2689400",
    "end": "2698200"
  },
  {
    "text": "this is like what so so one of the things that you will see when people do exploitation for example on Windows uh",
    "start": "2698200",
    "end": "2704400"
  },
  {
    "text": "on Windows they will often start the calculator and that's just to prove that I have I have code execution I manag to",
    "start": "2704400",
    "end": "2711640"
  },
  {
    "text": "start the calculator is also looks better on a video like you might have seen that I made like the shell prompt",
    "start": "2711640",
    "end": "2717599"
  },
  {
    "text": "really big that's to make it impressive but but on Windows they pop",
    "start": "2717599",
    "end": "2723599"
  },
  {
    "text": "they they they start the calculator and they actually call it pop Cal and make",
    "start": "2723599",
    "end": "2728680"
  },
  {
    "text": "it sound cool um okay so um yeah let's",
    "start": "2728680",
    "end": "2733839"
  },
  {
    "text": "yeah but it was a very very uh it's it's better to go back all right so this is",
    "start": "2733839",
    "end": "2739520"
  },
  {
    "text": "where we were we filled in all of our registers life is good okay but for people who um are",
    "start": "2739520",
    "end": "2747760"
  },
  {
    "text": "following along we didn't only want to do xcv we had other stuff we wanted to",
    "start": "2747760",
    "end": "2754119"
  },
  {
    "text": "do yeah so it will it created a r chain for us that did the XXV but we actually",
    "start": "2754119",
    "end": "2760440"
  },
  {
    "text": "wanted to do the close and the open first and so that it doesn't we don't have a rock chain for",
    "start": "2760440",
    "end": "2767800"
  },
  {
    "text": "that so if we look at close uh we have some things that we need we need to to",
    "start": "2767800",
    "end": "2774040"
  },
  {
    "text": "put our cisal number in eax and we need to put a zero in ebx and we can use some of the existing",
    "start": "2774040",
    "end": "2781920"
  },
  {
    "text": "gadgets that we found earlier pop eax is going to be nice uh neg ating of eax is",
    "start": "2781920",
    "end": "2787839"
  },
  {
    "text": "going to be nice so we can in this case put the CIS number in eax with",
    "start": "2787839",
    "end": "2793599"
  },
  {
    "text": "these and we need the CIS call instruction which is the int80 but we",
    "start": "2793599",
    "end": "2798760"
  },
  {
    "text": "are missing uh the xor of ebx that was not one of the things that was created",
    "start": "2798760",
    "end": "2805280"
  },
  {
    "text": "by rupper all right if we look at open we can use almost all of the gadgets",
    "start": "2805280",
    "end": "2811839"
  },
  {
    "text": "because it was very similar right we have the string and all of those things we just put in a different string",
    "start": "2811839",
    "end": "2817599"
  },
  {
    "text": "uh so most of it we can use uh but we are missing the zeroing out of ECX and",
    "start": "2817599",
    "end": "2825520"
  },
  {
    "text": "the zeroing out of edx so if we look at XXV of course it",
    "start": "2825520",
    "end": "2831640"
  },
  {
    "text": "has all of the gadgets because that's what the what roer generated so it has so it can do XX so what we are missing",
    "start": "2831640",
    "end": "2839000"
  },
  {
    "text": "is three gadgets uh so XR of ebx XR of ECX and XR",
    "start": "2839000",
    "end": "2845599"
  },
  {
    "text": "of edx thankfully though rer has another API",
    "start": "2845599",
    "end": "2850640"
  },
  {
    "text": "and that is that you can search for Specific Instructions that you want so here we do uh what we want is an exer of",
    "start": "2850640",
    "end": "2856800"
  },
  {
    "text": "ebx and when we do that it will search for gadgets that do that but maybe do",
    "start": "2856800",
    "end": "2862920"
  },
  {
    "text": "other things as well and so you will and so it will search for many different things and some of these might be fine",
    "start": "2862920",
    "end": "2868319"
  },
  {
    "text": "you might be able to fiddle them to do what you want but it would be nice if you get one that is exactly what you",
    "start": "2868319",
    "end": "2874880"
  },
  {
    "text": "want uh so down here we have at the bottom XR ebx ebx R which is exactly",
    "start": "2874880",
    "end": "2881440"
  },
  {
    "text": "what we want and so all three of these are actually",
    "start": "2881440",
    "end": "2886920"
  },
  {
    "text": "present in the binary when we search for them so now we have uh have those addresses and we can use them in our",
    "start": "2886920",
    "end": "2894720"
  },
  {
    "text": "exploitation so we're going to put all of those together in this long string I'm not",
    "start": "2894720",
    "end": "2901640"
  },
  {
    "text": "going to show you that uh so that when it is executed it will do the close and",
    "start": "2901640",
    "end": "2907000"
  },
  {
    "text": "it will do the open and then it will do uh do the",
    "start": "2907000",
    "end": "2912800"
  },
  {
    "text": "XXV and uh in this case here in the script it's going to write all of this",
    "start": "2913200",
    "end": "2919040"
  },
  {
    "text": "out to a file so this is the long string little padding and then the whole R chain and it's going to put that into a",
    "start": "2919040",
    "end": "2926000"
  },
  {
    "text": "file then we start our our our Target application in GDB because we want to to",
    "start": "2926000",
    "end": "2931839"
  },
  {
    "text": "see what happens because you know H like 99% of the time when you're doing exploit development the target",
    "start": "2931839",
    "end": "2939520"
  },
  {
    "text": "crashes um and that's kind of like most of the job is trying to make it stop",
    "start": "2939520",
    "end": "2946920"
  },
  {
    "text": "um so so then we're going to say that we want the target to read from our rchain",
    "start": "2946920",
    "end": "2952400"
  },
  {
    "text": "file uh instead of standard in and uh so we oh I forgot to change",
    "start": "2952400",
    "end": "2958480"
  },
  {
    "text": "the name here it was called Advanced R Prof anyway and uh it starts uh the",
    "start": "2958480",
    "end": "2964599"
  },
  {
    "text": "application it says access Grant because apparently we managed to do that much when we overrode uh the stack launching",
    "start": "2964599",
    "end": "2972000"
  },
  {
    "text": "a negative number of missiles I'm not exactly sure how that works but that would be really nice um and then it says access denied",
    "start": "2972000",
    "end": "2981440"
  },
  {
    "text": "because everything is broken at this point and then it suddenly GDB says oh",
    "start": "2981440",
    "end": "2988040"
  },
  {
    "text": "wait this process is now running a different program it's no longer running you know",
    "start": "2988040",
    "end": "2994160"
  },
  {
    "text": "the war games program it is currently running SL user bin Dash and that's",
    "start": "2994160",
    "end": "2999799"
  },
  {
    "text": "because on on this machine /bin/sh is a Sim link to to dash which",
    "start": "2999799",
    "end": "3005720"
  },
  {
    "text": "in this case is in user bin Dash and",
    "start": "3005720",
    "end": "3010960"
  },
  {
    "text": "then we get a shell prompt which is down here for people in the back thank",
    "start": "3010960",
    "end": "3017920"
  },
  {
    "text": "you so hopefully uh hopefully uh I I managed",
    "start": "3018079",
    "end": "3025799"
  },
  {
    "text": "to to show you how how return oriented programming works and",
    "start": "3025799",
    "end": "3032559"
  },
  {
    "text": "um because we got shell yay okay an Applause for the sh thank",
    "start": "3032559",
    "end": "3040519"
  },
  {
    "text": "you and that is the whole talk so now we have a good 10 minutes for questions or",
    "start": "3042760",
    "end": "3048880"
  },
  {
    "text": "nine minutes okay yes I just want to confirm a piece of understand you talked about gges yes and what you mean by G",
    "start": "3048880",
    "end": "3056680"
  },
  {
    "text": "was really just a piece of existing code in the executable that you HED down it was a piece of code that did something",
    "start": "3056680",
    "end": "3062839"
  },
  {
    "text": "to you want yes okay so the question is what is a gadget or so this is let's see this is a gadget",
    "start": "3062839",
    "end": "3072000"
  },
  {
    "text": "so somewhere in the binary somewhere is a sequence of bytes that when",
    "start": "3072000",
    "end": "3077480"
  },
  {
    "text": "interpreted as uh instructions would be interpreted as exor of ebx followed by R the",
    "start": "3077480",
    "end": "3085640"
  },
  {
    "text": "interesting thing about xad uh well the Intel platform is that it has variable",
    "start": "3085640",
    "end": "3090880"
  },
  {
    "text": "length instructions H so that means that this instruction doesn't necessarily have to",
    "start": "3090880",
    "end": "3096960"
  },
  {
    "text": "be in the binary but the sequence of bytes we're looking for has to be",
    "start": "3096960",
    "end": "3102559"
  },
  {
    "text": "somewhere on one of these executable Pages which means that this could actually be a substring of a totally different instruction um which is is one",
    "start": "3102559",
    "end": "3110960"
  },
  {
    "text": "of the fun things about about the Intel platform yes and the comment is that uh",
    "start": "3110960",
    "end": "3118720"
  },
  {
    "text": "the bigger the binary the easier it is to find the gadget yes so you are kind",
    "start": "3118720",
    "end": "3126359"
  },
  {
    "text": "of okay so he's saying saying okay so so the the the thing the the question is",
    "start": "3130480",
    "end": "3135520"
  },
  {
    "text": "you need to be able to find all of these uh gadgets and that means the more binary the better and uh uh so you have",
    "start": "3135520",
    "end": "3143760"
  },
  {
    "text": "more to look at right to find exactly what you want and hopefully something that fits well um uh and that means you",
    "start": "3143760",
    "end": "3150319"
  },
  {
    "text": "need a bigger binary and and we have a you know a very small program and he says that I'm cheating because I'm using",
    "start": "3150319",
    "end": "3156000"
  },
  {
    "text": "C++ which is going to bloat the binary which is",
    "start": "3156000",
    "end": "3161760"
  },
  {
    "text": "rude but but yes that is an issue uh yeah so what do you do when you can't find the gadget you need okay so then",
    "start": "3163119",
    "end": "3169920"
  },
  {
    "text": "okay what do you do when you can't find the gget you need uh so in real life binaries are quite big so it's not an",
    "start": "3169920",
    "end": "3175000"
  },
  {
    "text": "issue uh most of the time I I I think people have done research on it says that they are man they can find a",
    "start": "3175000",
    "end": "3180960"
  },
  {
    "text": "touring complete set of Gadgets in almost all binaries um yes uh so but for me that if",
    "start": "3180960",
    "end": "3188640"
  },
  {
    "text": "you have a very small program uh then then for for for for educational purposes that might be an issue and so",
    "start": "3188640",
    "end": "3195000"
  },
  {
    "text": "what I do sometimes is I cheat and I I put uh the the instructions that I want",
    "start": "3195000",
    "end": "3200119"
  },
  {
    "text": "in in a C file as inline assembly and I call it a gadget form and then I just compile it with my other thing and then",
    "start": "3200119",
    "end": "3207640"
  },
  {
    "text": "I find them by Magic",
    "start": "3207640",
    "end": "3212359"
  },
  {
    "text": "yes well okay would would a statically linked program be less secure than a dynamically linked program",
    "start": "3214359",
    "end": "3220799"
  },
  {
    "text": "um it would be bigger uh because when you have a statically linked program basically you're taking all of the",
    "start": "3220799",
    "end": "3226680"
  },
  {
    "text": "libraries and just putting it into your binary so there's more code right uh but",
    "start": "3226680",
    "end": "3232000"
  },
  {
    "text": "at the same time uh with the statically program you all of your binaries all of your libraries are inside of you which",
    "start": "3232000",
    "end": "3238040"
  },
  {
    "text": "gives you other types of security issues like for example what if you have a vulnerability in your open SSL library",
    "start": "3238040",
    "end": "3243960"
  },
  {
    "text": "that you have now statically linked into this binary right uh if it was on the system then somebody might update it to",
    "start": "3243960",
    "end": "3250160"
  },
  {
    "text": "a new version and then you might be so it's all technical questions I have one answer and that is it",
    "start": "3250160",
    "end": "3257960"
  },
  {
    "text": "depends yes um could you other than it",
    "start": "3257960",
    "end": "3264720"
  },
  {
    "text": "depends we're going after a memory exploitation or a buffer overflow like across across a network where you might",
    "start": "3265359",
    "end": "3272760"
  },
  {
    "text": "not have access to the binary itself what's the process there to",
    "start": "3272760",
    "end": "3278799"
  },
  {
    "text": "develop a rock chain okay so so if you're going to develop a rock chain for a binary that is long running on a",
    "start": "3278799",
    "end": "3285720"
  },
  {
    "text": "remote system yeah yes uh how do you do that okay so the the most common way to do that is to reproduce the system uh so",
    "start": "3285720",
    "end": "3293359"
  },
  {
    "text": "if you can and you can do that often times by by by by looking at the services running there will leak enough",
    "start": "3293359",
    "end": "3299280"
  },
  {
    "text": "information about the the version and things like that so you might be be able to to uh figure out the versions of the",
    "start": "3299280",
    "end": "3306119"
  },
  {
    "text": "things that you need to to attack then you set up a local system that is the same uh and and and that's kind of how",
    "start": "3306119",
    "end": "3313880"
  },
  {
    "text": "you would work it it makes things harder but then you basically you do all your development and and debugging locally uh",
    "start": "3313880",
    "end": "3321480"
  },
  {
    "text": "and then and then you try to do it remotely but still with the VMS until until you have nailed out all of your",
    "start": "3321480",
    "end": "3328480"
  },
  {
    "text": "issues yeah any yeah so are there any",
    "start": "3328480",
    "end": "3334680"
  },
  {
    "text": "mechanisms to protect against this I mean besides not having likeus or something something you",
    "start": "3334680",
    "end": "3343000"
  },
  {
    "text": "can do okay is there something you can do yeah uh to to mitigate against this yes uh there there was uh specifically",
    "start": "3343000",
    "end": "3349880"
  },
  {
    "text": "uh one uh uh one thing that has been been uh was developed by by Microsoft ad",
    "start": "3349880",
    "end": "3356400"
  },
  {
    "text": "called control flow guard and in control flow guard you basically are recording when you compile all of the the the",
    "start": "3356400",
    "end": "3362880"
  },
  {
    "text": "things that you are allowed to jump to so so remember we have addresses we're just jumping randomly uh and clol for",
    "start": "3362880",
    "end": "3370119"
  },
  {
    "text": "guard it just makes a table of all the things that you're allowed to jump to uh to so that you can't do this random",
    "start": "3370119",
    "end": "3376640"
  },
  {
    "text": "jumping everywhere of course then somebody had to figure out a way to to do it anyway and a new technique was",
    "start": "3376640",
    "end": "3383880"
  },
  {
    "text": "developed and was called block oriented programming where it use it takes the table from control Flor guard creates a",
    "start": "3383880",
    "end": "3391000"
  },
  {
    "text": "graph tries to figure out again like I want to do this instruction and this instruction and then finds a path",
    "start": "3391000",
    "end": "3397000"
  },
  {
    "text": "through the graph that's that manages to fill the registers with the things that you want because you know we're",
    "start": "3397000",
    "end": "3403520"
  },
  {
    "text": "programmers and that's how we do things yes any more",
    "start": "3403520",
    "end": "3409760"
  },
  {
    "text": "questions okay thank you thank you so much for coming",
    "start": "3409760",
    "end": "3415200"
  }
]