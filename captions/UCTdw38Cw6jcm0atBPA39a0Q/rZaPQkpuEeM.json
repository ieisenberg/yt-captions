[
  {
    "text": "sleeping uh that's good okay welcome to the two memory models my name is anes I",
    "start": "5279",
    "end": "12160"
  },
  {
    "text": "work at asium down in Oslo here in Norway and we're working on a new and more performant CPU design uh which I",
    "start": "12160",
    "end": "19240"
  },
  {
    "text": "think is a really fun work and uh personally I mainly work on the",
    "start": "19240",
    "end": "24880"
  },
  {
    "text": "performance simulator so I basically write a bunch of C++ to simulate the stuff the microarchitecture and I'm also",
    "start": "24880",
    "end": "32599"
  },
  {
    "text": "uh modeling the the memory system and a bit involved in uh in the the memory system design as",
    "start": "32599",
    "end": "38879"
  },
  {
    "text": "well um I also have this uh C++ uh website a quiz website that some of you",
    "start": "38879",
    "end": "46000"
  },
  {
    "text": "might have seen and uh there will be a quiz at the party tonight as well as some other cool party talks so if you're",
    "start": "46000",
    "end": "53039"
  },
  {
    "text": "into quizzes then join that and otherwise please also come to the party and just skip the quiz you don't have to",
    "start": "53039",
    "end": "58680"
  },
  {
    "text": "to participate and then of course you have to always plug your book right when you have a book and I recently released this C++",
    "start": "58680",
    "end": "65640"
  },
  {
    "text": "brain teasers book so uh if you're into like learning how stuff works under the hood and like what's actually going on",
    "start": "65640",
    "end": "71560"
  },
  {
    "text": "here I think there are lots of cool details and there's a discount code for you uh here if you want that for the",
    "start": "71560",
    "end": "77640"
  },
  {
    "text": "ebook I did bring some physical copies but they all sold out at the Meetup last night but you can get them in any",
    "start": "77640",
    "end": "83560"
  },
  {
    "text": "bookstore as well right the two memory",
    "start": "83560",
    "end": "88600"
  },
  {
    "text": "models why so why did I make this talk and why do I tell myself it's okay that",
    "start": "88600",
    "end": "94759"
  },
  {
    "text": "so many of you are in this room now to listen to me talk about this uh and what",
    "start": "94759",
    "end": "100799"
  },
  {
    "text": "I I'm trying to communicate is like a theoretical background for for thinking about memory models and giving you some",
    "start": "100799",
    "end": "108399"
  },
  {
    "text": "sort of Intuition or like a framework for thinking about these kinds of things so there won't be a lot of practical",
    "start": "108399",
    "end": "113759"
  },
  {
    "text": "advice here but then when you start reading about how do I do this stuff then like you'll hopefully have some",
    "start": "113759",
    "end": "119439"
  },
  {
    "text": "like frame M to oh this is how I can think about it in in a in a way and as",
    "start": "119439",
    "end": "125280"
  },
  {
    "text": "always with most of my talks it's just like I wonder how this works and like I I really like figuring out how stuff",
    "start": "125280",
    "end": "130879"
  },
  {
    "text": "works and uh yeah this is me basically doing this about memory models and if",
    "start": "130879",
    "end": "136720"
  },
  {
    "text": "you actually want some practical advice that you can go back and actually use uh then stay in this room because Y muta is",
    "start": "136720",
    "end": "142760"
  },
  {
    "text": "going to talk right after me and she will actually be giving you like practical um advice that you can",
    "start": "142760",
    "end": "147879"
  },
  {
    "text": "actually use for something so yes uh which two memory models like you",
    "start": "147879",
    "end": "154760"
  },
  {
    "text": "probably heard about the memory model in your language so if you use C+ plus you know that well it has a memory model and",
    "start": "154760",
    "end": "161000"
  },
  {
    "text": "uh other languages have similar ones I don't really know C but I assume it's similar to C++ and rust they basically",
    "start": "161000",
    "end": "168560"
  },
  {
    "text": "just stole ours um because they love all the stuff that we do and they just copy it um so uh yeah that that one is very",
    "start": "168560",
    "end": "176800"
  },
  {
    "text": "very similar and um that's that high level one and when you're programming that's the one you have to think about",
    "start": "176800",
    "end": "182879"
  },
  {
    "text": "when you write concurrent code or anything you need to think about this because it's a contract between you and",
    "start": "182879",
    "end": "188879"
  },
  {
    "text": "the language so if you if you code in a certain way the language promises you then everything will be",
    "start": "188879",
    "end": "194799"
  },
  {
    "text": "okay the other memory model is the one that your CPU or your architecture uh",
    "start": "194799",
    "end": "200239"
  },
  {
    "text": "has and you don't really need this one this is what the architecture Promises",
    "start": "200239",
    "end": "205519"
  },
  {
    "text": "to the language so if if I'm a C++ compiler I say well I promise this stuff",
    "start": "205519",
    "end": "210920"
  },
  {
    "text": "to the people that use C++ and then I compile that code for a certain architecture like x86 and then uh as a",
    "start": "210920",
    "end": "218879"
  },
  {
    "text": "compiler I will then look at a memory model and generate assembly code that can like uphold the things I promised to",
    "start": "218879",
    "end": "225280"
  },
  {
    "text": "my my user um so that's a contract between the architecture and the compiler or runtime libraries or people",
    "start": "225280",
    "end": "232159"
  },
  {
    "text": "that write assembly and stuff um and for high level models I",
    "start": "232159",
    "end": "237480"
  },
  {
    "text": "will use C++ as an example because it's the one I know the best and I assume",
    "start": "237480",
    "end": "242760"
  },
  {
    "text": "that's the most widespread language between people in in this room as well so okay what what is the C++ memory",
    "start": "242760",
    "end": "250159"
  },
  {
    "text": "model let's look in the standard that's all of it that's the entire memory model section in the",
    "start": "250159",
    "end": "256440"
  },
  {
    "text": "standard so I blurred it out so you don't start reading it the point is that this is way too little information right",
    "start": "256440",
    "end": "263040"
  },
  {
    "text": "that's not the full story the only thing that the memory model section says is what's meant by a memory location so",
    "start": "263040",
    "end": "269080"
  },
  {
    "text": "basically an int or a float but not that struct or an array and then it says that two or more",
    "start": "269080",
    "end": "275360"
  },
  {
    "text": "threads can access separate memory locations without interfering with each other so one thread working on some data",
    "start": "275360",
    "end": "281360"
  },
  {
    "text": "here one thread working on some data here um they can just do that and it works and that kind of makes sense right",
    "start": "281360",
    "end": "289199"
  },
  {
    "text": "so if you actually want to know all the things that people tend to talk about when they say memory model then some",
    "start": "289199",
    "end": "295080"
  },
  {
    "text": "other places to read um sequential execution multi-threaded executions and data es Atomic operations library and",
    "start": "295080",
    "end": "301880"
  },
  {
    "text": "thread support Library so if you look in these places you will gather the whole",
    "start": "301880",
    "end": "307240"
  },
  {
    "text": "picture and then yeah how can the compiler promise all of this stuff to me it uses that um the the memory model on",
    "start": "307240",
    "end": "314720"
  },
  {
    "text": "the on the of the architecture it's compiling for so x86 has one arm has one",
    "start": "314720",
    "end": "319840"
  },
  {
    "text": "risk 5 has one Aptos that's our CPU we have one so everyone has a memory model for the",
    "start": "319840",
    "end": "325720"
  },
  {
    "text": "CPU and you'll find that described in the architecture manual if you're okay um yeah I'll use risk 5 as an",
    "start": "325720",
    "end": "333319"
  },
  {
    "text": "example uh quite a lot here because it's open source and it's well documented so uh it's a nice one to to use I'll also",
    "start": "333319",
    "end": "340400"
  },
  {
    "text": "use x86 risk five says what is a memory model or a memory consistency model it's",
    "start": "340400",
    "end": "346360"
  },
  {
    "text": "kind of you can use those interchangeably it says it's a set of rules specifying the values that can can",
    "start": "346360",
    "end": "351919"
  },
  {
    "text": "be returned by loads of memory so that's kind of a nice description but also it's",
    "start": "351919",
    "end": "357280"
  },
  {
    "text": "like it doesn't really tell you that much but what what they're trying to say here is that if you have a load and",
    "start": "357280",
    "end": "362960"
  },
  {
    "text": "there have been other stores in the program in this thread and other threads like which of these stores should be",
    "start": "362960",
    "end": "369520"
  },
  {
    "text": "seen by this load basically so so that's how they Define the the CPU memory model",
    "start": "369520",
    "end": "375080"
  },
  {
    "text": "so we have the high level C++ one and the the low level CPU one um and we this",
    "start": "375080",
    "end": "381000"
  },
  {
    "text": "is just a overview and we'll go go into details later but uh for the CPU memory model it's very simple if you have one",
    "start": "381000",
    "end": "388240"
  },
  {
    "text": "threat basically the only thing you need to think about is if you read some memory",
    "start": "388240",
    "end": "394919"
  },
  {
    "text": "and then you write some memory the read has to return the memory before the write right you can't reorder and",
    "start": "394919",
    "end": "401000"
  },
  {
    "text": "suddenly you read some memory and then you write to it and suddenly the read actually observed the like reorder and",
    "start": "401000",
    "end": "406840"
  },
  {
    "text": "observe the right that like things have to happen in sequence and it's quite easy to Define",
    "start": "406840",
    "end": "413880"
  },
  {
    "text": "as well because if you have a program and some input State there is and there's no U or there's only one output",
    "start": "413880",
    "end": "420720"
  },
  {
    "text": "state every time you run the program with the same input you will always get the same output if if you don't have any",
    "start": "420720",
    "end": "427120"
  },
  {
    "text": "races or anything um well oh this is single thread so yeah that that should always",
    "start": "427120",
    "end": "432879"
  },
  {
    "text": "happen unless you have bugs program Plus in input State equals output state if you have many threads it's more",
    "start": "432879",
    "end": "440240"
  },
  {
    "text": "complicated because you can have any valid number of inters of the threads so if you have two threads that write to",
    "start": "440240",
    "end": "446800"
  },
  {
    "text": "variable and a third one that prints it well it depends on which order did the threads run in so you have a program",
    "start": "446800",
    "end": "454080"
  },
  {
    "text": "some input States and you have many possible output States depending on the order of the threads but you have also a",
    "start": "454080",
    "end": "460120"
  },
  {
    "text": "lot of invalid output States so what the memory model says is like which of these uh possible output states are actually",
    "start": "460120",
    "end": "466560"
  },
  {
    "text": "okay according to uh the memory model right so what has the memory model",
    "start": "466560",
    "end": "473960"
  },
  {
    "text": "ever done for me like someone spent a lot of time writing these models but how how do they help me and that's what",
    "start": "473960",
    "end": "479960"
  },
  {
    "text": "we'll cover in in this uh in this talk really starting with the C++ memory model with some single threaded examples",
    "start": "479960",
    "end": "486680"
  },
  {
    "text": "a multi- threaded example um and then more formal looking at memory ordering",
    "start": "486680",
    "end": "492319"
  },
  {
    "text": "and then we look at the CPU memory models uh several variations including x86 and risk",
    "start": "492319",
    "end": "498319"
  },
  {
    "text": "5 right so we will start with just looking at some single threaded code uh",
    "start": "498319",
    "end": "503840"
  },
  {
    "text": "to get uh start get start getting thing get get getting getting us thinking",
    "start": "503840",
    "end": "509599"
  },
  {
    "text": "about ordering of things so we start with a single threaded example a silly function that",
    "start": "509599",
    "end": "516719"
  },
  {
    "text": "is very useless but it demonstrates enough things um it takes into integer",
    "start": "516719",
    "end": "523640"
  },
  {
    "text": "pointers it checks what a is pointing to stores it in result adds one to that",
    "start": "523640",
    "end": "529920"
  },
  {
    "text": "then checks what B is pointing to and adds that to the result and then it just Returns the sum of whatever A and B are",
    "start": "529920",
    "end": "536600"
  },
  {
    "text": "pointing to plus one so a simple and silly function",
    "start": "536600",
    "end": "542440"
  },
  {
    "text": "and I've added some pseudo assembly here so basically this is not a particular",
    "start": "542440",
    "end": "548880"
  },
  {
    "text": "Assembly Language just like pseudo stuff so we load whatever a is pointing to",
    "start": "548880",
    "end": "554000"
  },
  {
    "text": "into some register reg zero then we add together one and reg",
    "start": "554000",
    "end": "559240"
  },
  {
    "text": "zero store that in reg zero then we take whatever B is pointing to store that in another register and",
    "start": "559240",
    "end": "566120"
  },
  {
    "text": "then we add those registers together and return okay so that's some simple pseudo",
    "start": "566120",
    "end": "571800"
  },
  {
    "text": "assembly to do this function here but then we can observe that loads",
    "start": "571800",
    "end": "577480"
  },
  {
    "text": "take a lot of time right the load might have to go to cach that's a few Cycles or it might have to go to like real",
    "start": "577480",
    "end": "583279"
  },
  {
    "text": "memory that's going to take forever so maybe we could get started on the load a little bit earlier so if you start the",
    "start": "583279",
    "end": "589920"
  },
  {
    "text": "load a bit earlier like one cycle earlier maybe the entire function could actually finish a cycle earlier if you",
    "start": "589920",
    "end": "594959"
  },
  {
    "text": "just get a head start on the load so the question then is could we reorder these",
    "start": "594959",
    "end": "601000"
  },
  {
    "text": "two lines so we start the load before we do the addition of one so is it okay to",
    "start": "601000",
    "end": "607560"
  },
  {
    "text": "reorder these two lines and yeah that's fine like no",
    "start": "607560",
    "end": "614279"
  },
  {
    "text": "matter which order you do this it it can't make an observable difference right you just start loading and you add",
    "start": "614279",
    "end": "620800"
  },
  {
    "text": "something to a completely unrelated register they're not going to step on each other toes so that's that's",
    "start": "620800",
    "end": "627720"
  },
  {
    "text": "fine uh um yeah so we we have these two lines and um the thing that says that you uh",
    "start": "628200",
    "end": "636360"
  },
  {
    "text": "what you what the order should be here is the concept of sequenc before in C++",
    "start": "636360",
    "end": "642880"
  },
  {
    "text": "so very many things that you do in C++ is supposed to be sequenced before a different another thing so for instance",
    "start": "642880",
    "end": "649920"
  },
  {
    "text": "it says that every value computation and side effect associated with a full expression is sequence before every",
    "start": "649920",
    "end": "655360"
  },
  {
    "text": "value computation and side effect associated with the next full expression to be evaluated and here you can just like think of",
    "start": "655360",
    "end": "661680"
  },
  {
    "text": "everything before the semicolon is a full expression so everything on line four all side effects and computation",
    "start": "661680",
    "end": "668279"
  },
  {
    "text": "value computations are sequenced before this one so so maybe we can't reorder this",
    "start": "668279",
    "end": "674040"
  },
  {
    "text": "because C++ says that all the stuff has to happen before the next uh thing but",
    "start": "674040",
    "end": "679320"
  },
  {
    "text": "the standard doesn't say how you should Implement C++ the standard says here's",
    "start": "679320",
    "end": "684560"
  },
  {
    "text": "an abstract machine that I describe and if you run your program on this",
    "start": "684560",
    "end": "690040"
  },
  {
    "text": "conceptual abstract machine that the standard describes um this is the behavior and any conforming",
    "start": "690040",
    "end": "695720"
  },
  {
    "text": "implementation of C Po and has to provide the same output as an abstract machine so so we only need to emulate",
    "start": "695720",
    "end": "703639"
  },
  {
    "text": "the observable observable Behavior so when you actually do the computations",
    "start": "703639",
    "end": "709120"
  },
  {
    "text": "that's not really anything you can observe so so it's not telling you the order that things have to happen it just",
    "start": "709120",
    "end": "714880"
  },
  {
    "text": "has to appear as if that is the case and observable that that's any input output",
    "start": "714880",
    "end": "721440"
  },
  {
    "text": "files volatiles and implementations can Define more if they want but like as long as iio files or volatile accesses",
    "start": "721440",
    "end": "729279"
  },
  {
    "text": "are not affected you can reorder whatever you want in any way so so yeah we can we can actually reorder these two",
    "start": "729279",
    "end": "736480"
  },
  {
    "text": "two lines so if you look at the assembly here to the left we have the original",
    "start": "736480",
    "end": "743320"
  },
  {
    "text": "and then to the right we have the reordered one so the compiler went a let's start the load a cycle earlier so",
    "start": "743320",
    "end": "749240"
  },
  {
    "text": "that we can finish this whole thing a bit quicker or even if the compiler doesn't",
    "start": "749240",
    "end": "755240"
  },
  {
    "text": "do it the CPU can do that on the fly so all modern CPUs basically maybe some of",
    "start": "755240",
    "end": "761600"
  },
  {
    "text": "you are working on some very tiny stuff that doesn't do this but like all normal CPUs for desktop stuff and mobile phones",
    "start": "761600",
    "end": "768199"
  },
  {
    "text": "and whatever they are out of order so that means they will reorder your instructions as the program is running",
    "start": "768199",
    "end": "774600"
  },
  {
    "text": "after it's been compiled um but then there's another",
    "start": "774600",
    "end": "780160"
  },
  {
    "text": "question could we could we swap the order of the loads it's not really going to help probably it doesn't really",
    "start": "780160",
    "end": "785959"
  },
  {
    "text": "matter which one you start first you need to do both but but could we reorder the loads so we we",
    "start": "785959",
    "end": "791920"
  },
  {
    "text": "have this is loaded into this register this one is loaded into this can we",
    "start": "791920",
    "end": "797639"
  },
  {
    "text": "reorder those as well and yeah in this example here like",
    "start": "797639",
    "end": "804120"
  },
  {
    "text": "no matter which value you load first it doesn't matter like the result will be the same in a single red the program",
    "start": "804120",
    "end": "809720"
  },
  {
    "text": "like this there's no way that anything will have changed like it it doesn't",
    "start": "809720",
    "end": "815440"
  },
  {
    "text": "matter uh yeah and uh yeah if you want to know more about out of order CPUs",
    "start": "815440",
    "end": "820560"
  },
  {
    "text": "there was a talk last year by my colleague Patrick so you can check that on on YouTube if you want to know more",
    "start": "820560",
    "end": "825959"
  },
  {
    "text": "about that stuff so what happens in practice let's compare this with uh the latest uh",
    "start": "825959",
    "end": "832680"
  },
  {
    "text": "stable GCC on 03 and then we can see that it did indeed start on the two Lads",
    "start": "832680",
    "end": "838600"
  },
  {
    "text": "so this things are are memory loads so it does the two loads first and then it just does the entire",
    "start": "838600",
    "end": "845959"
  },
  {
    "text": "addition in one cool instruction um so yeah U the compiler",
    "start": "845959",
    "end": "851120"
  },
  {
    "text": "decided to actually uh do the loads before the other stuff so so this is fine this is these are things you can",
    "start": "851120",
    "end": "857360"
  },
  {
    "text": "can reorder to speed up your program a withit so not you but the compiler or",
    "start": "857360",
    "end": "863320"
  },
  {
    "text": "your CPU could do this to speed up your program without you even ever noticing",
    "start": "863320",
    "end": "869720"
  },
  {
    "text": "here's a second and last single threaded example another Cel function it takes into int",
    "start": "870600",
    "end": "876639"
  },
  {
    "text": "pointers it calls some function defined somewhere that just gets a value assigns it to the to the result increments the",
    "start": "876639",
    "end": "885000"
  },
  {
    "text": "result assigns two to wherever a is pointing and then assigns the result to wherever B is",
    "start": "885000",
    "end": "891600"
  },
  {
    "text": "pointing and here's some pseudo assembly uh this is like super pseudo assembly",
    "start": "891600",
    "end": "896680"
  },
  {
    "text": "like this one instruction call a function of put it into register uh but it doesn't really matter the point is",
    "start": "896680",
    "end": "902079"
  },
  {
    "text": "that it represents all the instructions that are required to to call get value and put it into reg zero and then you",
    "start": "902079",
    "end": "908279"
  },
  {
    "text": "add one to that then you do the store of two and then you do the store uh of the of the",
    "start": "908279",
    "end": "915399"
  },
  {
    "text": "result and then we can observe that well stores also take a long time can we start the store to a a bit",
    "start": "915480",
    "end": "924360"
  },
  {
    "text": "earlier yes there are some some yeses and some no so if you have this assembly here um can",
    "start": "926480",
    "end": "934839"
  },
  {
    "text": "we to be more specific can we reorder these two yes so the compiler or the CPU can",
    "start": "934839",
    "end": "942600"
  },
  {
    "text": "reorder those so we can do the store first and then the ad because like there's no dependency between these two",
    "start": "942600",
    "end": "948120"
  },
  {
    "text": "so it doesn't matter which order you actually do those um could do you start the store before",
    "start": "948120",
    "end": "954759"
  },
  {
    "text": "you call get value some yeses and some NOS uh you canot do that because what if get",
    "start": "954759",
    "end": "962000"
  },
  {
    "text": "value reads whatever a is pointing to now you have stored to to get to that",
    "start": "962000",
    "end": "968160"
  },
  {
    "text": "value before get value is called so suddenly you affect get value so then you might affect the output of the",
    "start": "968160",
    "end": "973399"
  },
  {
    "text": "program so you you shouldn't without knowing what's inside of get value you can't assume that it's safe to get",
    "start": "973399",
    "end": "978880"
  },
  {
    "text": "started on the store uh earlier what about the two stores if you",
    "start": "978880",
    "end": "986519"
  },
  {
    "text": "somehow figure out that it's more beneficial to do do them in the opposite order could we swap the order of the",
    "start": "986519",
    "end": "993600"
  },
  {
    "text": "stores some knows and some uh they are both in the original program they they're pointers of the same type yeah",
    "start": "995199",
    "end": "1002519"
  },
  {
    "text": "so it could be that both of those are actually P pointing to the same place right you got pointers A and B but who",
    "start": "1002519",
    "end": "1008800"
  },
  {
    "text": "knows like they could actually be pointing to the same place so if you store two first and then rig zero then",
    "start": "1008800",
    "end": "1014560"
  },
  {
    "text": "that memory location is going to be rig zero if you do the other way around then that memory location is going to be to",
    "start": "1014560",
    "end": "1019880"
  },
  {
    "text": "so if you swap the order of the stores and they happen to point to the same place you just uh broke the the code so",
    "start": "1019880",
    "end": "1027558"
  },
  {
    "text": "you cannot um swap those yeah and when I say you I mean",
    "start": "1027559",
    "end": "1033438"
  },
  {
    "text": "like the compiler can't swap the order and also the CPU has to be careful about not executing those two out of orders",
    "start": "1033439",
    "end": "1040400"
  },
  {
    "text": "out of order so the compiler went ahead and",
    "start": "1040400",
    "end": "1045798"
  },
  {
    "text": "said well let's get started on the this St uh bit early but then these have to come later and then the compiler is",
    "start": "1045799",
    "end": "1052480"
  },
  {
    "text": "compiling for some architecture and it has to make sure that the CPU doesn't do this so it has to kind of say hey CPU uh",
    "start": "1052480",
    "end": "1058799"
  },
  {
    "text": "it's actually important here that you don't store to a before you call get value oh and don't reorder the stores by",
    "start": "1058799",
    "end": "1064520"
  },
  {
    "text": "the way and how how do we express that to the CPU right the compiler has to be",
    "start": "1064520",
    "end": "1070080"
  },
  {
    "text": "sure that this doesn't happen so how does it do that well let's see what GCC",
    "start": "1070080",
    "end": "1076000"
  },
  {
    "text": "does I just compile this again with GCC 14.1 one on O3 and there's nothing",
    "start": "1076000",
    "end": "1082400"
  },
  {
    "text": "special here just a function call and a couple of moves so there's there's no C++ telling the CPU anything about what",
    "start": "1082400",
    "end": "1089799"
  },
  {
    "text": "it cares about about ordering uh C++ can in fact just assume that this will be",
    "start": "1089799",
    "end": "1096000"
  },
  {
    "text": "fine because the compiler knows the memory model of x86 um and x86 will never reorder two",
    "start": "1096000",
    "end": "1104600"
  },
  {
    "text": "stores so if you if the compiler emits two stores they will never be reordered on the f as same with two loads it will never be",
    "start": "1104600",
    "end": "1111039"
  },
  {
    "text": "reordered on the Fly stuff like that so so the compiler knows that it's fine to just put this stuff out you don't need",
    "start": "1111039",
    "end": "1116440"
  },
  {
    "text": "any fences or barriers or like stuff other architectures like Risk five",
    "start": "1116440",
    "end": "1124120"
  },
  {
    "text": "can actually reorder stores on the fly so on risk 5 this could actually be",
    "start": "1124120",
    "end": "1130600"
  },
  {
    "text": "reordered but risk 5 is a bit smart about this so it only reorders stores if they're to different addresses or if the",
    "start": "1130600",
    "end": "1136600"
  },
  {
    "text": "addresses don't overlap okay okay so X6 says two stores I have to do do them in",
    "start": "1136600",
    "end": "1141679"
  },
  {
    "text": "order risk 5 goes well if they're not overlapping they're going to different places sure then we can uh in fact",
    "start": "1141679",
    "end": "1149559"
  },
  {
    "text": "reorder uh and when I say the CPU reorders uh that can include like",
    "start": "1149559",
    "end": "1155000"
  },
  {
    "text": "effects from the from the pipeline from caches store buffers all sorts of stuff",
    "start": "1155000",
    "end": "1160600"
  },
  {
    "text": "inside the CPU that they often don't even tell you about like they just have to maintain this the the apparent order",
    "start": "1160600",
    "end": "1167640"
  },
  {
    "text": "of these things um yes yeah so even if I compile this",
    "start": "1167640",
    "end": "1174080"
  },
  {
    "text": "for risk five uh I wouldn't need any special fences or anything in here because it it checks if they are",
    "start": "1174080",
    "end": "1180400"
  },
  {
    "text": "overlapping and in that case um it it doesn't",
    "start": "1180400",
    "end": "1185200"
  },
  {
    "text": "reorder yeah I guess most people that come to a memory model talk they are interested in multi-threaded stuff so",
    "start": "1185799",
    "end": "1191159"
  },
  {
    "text": "here's our multi-threaded uh example um this will be a very typical",
    "start": "1191159",
    "end": "1197240"
  },
  {
    "text": "pattern for free code is like the canonical example I think for L free",
    "start": "1197240",
    "end": "1202480"
  },
  {
    "text": "algorithms uh and it looks like this you have some global data somewhere of some",
    "start": "1202480",
    "end": "1209440"
  },
  {
    "text": "type that we don't care about and then it has a ready flag so the idea is that uh the producer will initialize all of",
    "start": "1209440",
    "end": "1216159"
  },
  {
    "text": "that data that can take a long time it can be a big thing you have to compute and when all the data is ready we set",
    "start": "1216159",
    "end": "1222919"
  },
  {
    "text": "ready to true so that others know that the data is ready and uh the cons",
    "start": "1222919",
    "end": "1229240"
  },
  {
    "text": "can then just while not ready just infinite Loop until ready becomes true",
    "start": "1229240",
    "end": "1234480"
  },
  {
    "text": "and then I know oh when ready has become true the data must be ready so I can use the data so this seems reasonable right uh",
    "start": "1234480",
    "end": "1243159"
  },
  {
    "text": "and each of these threads are kind of fine at least yeah for now you can like yeah since this we have the sequence",
    "start": "1243159",
    "end": "1250000"
  },
  {
    "text": "before right so initialized data is going to happen before ready equals through so you have the the the thing we",
    "start": "1250000",
    "end": "1256720"
  },
  {
    "text": "talked about so if you look at the assembly uh for the producer what does it do it calls initialized data and only",
    "start": "1256720",
    "end": "1264280"
  },
  {
    "text": "then does it write one to whatever ready is so this is fine and there's nothing",
    "start": "1264280",
    "end": "1270039"
  },
  {
    "text": "special here it just calls the function as set a ready flag and since the architecture doesn't reorder stores well",
    "start": "1270039",
    "end": "1275960"
  },
  {
    "text": "that's that's fine it's going to all of the stores will have finished before we we set ready and in the consumer we just",
    "start": "1275960",
    "end": "1282640"
  },
  {
    "text": "loop on where's the loop so the loop just",
    "start": "1282640",
    "end": "1288240"
  },
  {
    "text": "went away there's no Loop it just uses the data it doesn't even check the ready flag it doesn't Loop like what's going",
    "start": "1288240",
    "end": "1293559"
  },
  {
    "text": "on here um and you can think about this in two ways like why why is the loop",
    "start": "1293559",
    "end": "1299960"
  },
  {
    "text": "gone why why don't we need this Loop and the informal way is to think about like what what could actually happen here in",
    "start": "1299960",
    "end": "1306480"
  },
  {
    "text": "practice so one thing that could be happen could happen when you run the consumer thread is that ready was",
    "start": "1306480",
    "end": "1311799"
  },
  {
    "text": "already true so it's always true you don't need the while loop because it's always true then you if that was the",
    "start": "1311799",
    "end": "1317480"
  },
  {
    "text": "case you don't need the while loop maybe ready is always false it never",
    "start": "1317480",
    "end": "1322600"
  },
  {
    "text": "changes to true and then this is actually an an infinite Loop and that's",
    "start": "1322600",
    "end": "1327640"
  },
  {
    "text": "undefined Behavior so let's throw it out or what the programmer intended here is",
    "start": "1327640",
    "end": "1333720"
  },
  {
    "text": "ready is false and at some point it changes to true and then you need the loop but then you have a data race",
    "start": "1333720",
    "end": "1341120"
  },
  {
    "text": "because someone else is writing to the same variable that you're reading from without any protection and that's",
    "start": "1341120",
    "end": "1347000"
  },
  {
    "text": "undefined Behavior so then you can also throw out the W Loop so that's like the informal way like if you go into like a",
    "start": "1347000",
    "end": "1352559"
  },
  {
    "text": "pub argument with a compiler compiler can say hey I got this right uh the formal way to think about it is with uh",
    "start": "1352559",
    "end": "1359799"
  },
  {
    "text": "something called uh forward progress so the implementation can assume that every thread eventually will take uh oh yeah",
    "start": "1359799",
    "end": "1367279"
  },
  {
    "text": "here's the informal it's one of those cases for Progress the implementation",
    "start": "1367279",
    "end": "1373240"
  },
  {
    "text": "can assume that all threads will eventually take a step and do one of these things so the thre will either",
    "start": "1373240",
    "end": "1379200"
  },
  {
    "text": "terminate do some IO actess a volatile or do some sort of synchronization or",
    "start": "1379200",
    "end": "1385600"
  },
  {
    "text": "Atomic kind of stuff so this thread here is not doing iio volatile or any sync or",
    "start": "1385600",
    "end": "1392200"
  },
  {
    "text": "Atomic and it's never going to terminate if this is true so if this doesn't change so uh it",
    "start": "1392200",
    "end": "1400200"
  },
  {
    "text": "violates the the forward progress uh assumption so uh so that's why it's also",
    "start": "1400200",
    "end": "1405760"
  },
  {
    "text": "undefined behavior and can you you can remove it there's some sort of proposal to be a bit stricter about the forward",
    "start": "1405760",
    "end": "1413000"
  },
  {
    "text": "progress thing I haven't read it and I'm not sure if this like applies in this case but uh yeah two ways to think about",
    "start": "1413000",
    "end": "1419640"
  },
  {
    "text": "why is it actually okay to remove the while",
    "start": "1419640",
    "end": "1424159"
  },
  {
    "text": "loop so how do we fix it how do we make this non non undefined Behavior what's the smallest change you can think of to",
    "start": "1426600",
    "end": "1432520"
  },
  {
    "text": "make it non UB not volatile",
    "start": "1432520",
    "end": "1439120"
  },
  {
    "text": "uh like what do we want to make Atomic yeah we only make the bull Atomic",
    "start": "1439120",
    "end": "1446120"
  },
  {
    "text": "and that's the that's the interesting thing here so the data is not Atomic",
    "start": "1446120",
    "end": "1451919"
  },
  {
    "text": "it's only the r flag that is atomic but still we avoid the DAT any data race so",
    "start": "1451919",
    "end": "1457840"
  },
  {
    "text": "you you fix the data race that we talked about with ready but you have actually also fixed the data race with uh with",
    "start": "1457840",
    "end": "1464240"
  },
  {
    "text": "data itself um and we we're going to explain why it is like",
    "start": "1464240",
    "end": "1470360"
  },
  {
    "text": "that um yeah so that's a change we made and if we now look at the",
    "start": "1470360",
    "end": "1476520"
  },
  {
    "text": "assembly we can see that uh the store of the ready flag is now using anatomic",
    "start": "1476520",
    "end": "1482600"
  },
  {
    "text": "operation thing here is using Exchange to do that and we're not going to talk",
    "start": "1482600",
    "end": "1488520"
  },
  {
    "text": "more about that and in the consumer we're actually just using a normal move with zero extension so it's",
    "start": "1488520",
    "end": "1495200"
  },
  {
    "text": "just like a regular move and then test is basically the spaceship operator for assembly it checks whether it's uh it's",
    "start": "1495200",
    "end": "1502360"
  },
  {
    "text": "zero and Loops then it like jumps back to the to the label and it so the while loop is back U there's no Atomic stuff",
    "start": "1502360",
    "end": "1508799"
  },
  {
    "text": "here there's some Atomic stuff in the in the producer function so okay we probably fixed the",
    "start": "1508799",
    "end": "1515159"
  },
  {
    "text": "ready Thing by by this stuff but how does this fix uh data isn't there still a data race for data itself when we",
    "start": "1515159",
    "end": "1522760"
  },
  {
    "text": "don't protect the data with any mutexes or atomics or anything so you can have questions like",
    "start": "1522760",
    "end": "1529640"
  },
  {
    "text": "has the data been initialized has it propagated to all other cores is it stuck in some cache somewhere or like uh",
    "start": "1529640",
    "end": "1537120"
  },
  {
    "text": "what could go on here is there no data rase um so you have all these questions",
    "start": "1537120",
    "end": "1543279"
  },
  {
    "text": "and like even microarchitectural details we don't even know about like could affect this and we don't want to think",
    "start": "1543279",
    "end": "1550000"
  },
  {
    "text": "about all that stuff right when we write C++ we don't want to think about microarchitecture or architecture or",
    "start": "1550000",
    "end": "1556279"
  },
  {
    "text": "anything like that we just want to write the code and it should work everywhere so we want a model to think about these",
    "start": "1556279",
    "end": "1563399"
  },
  {
    "text": "things so that we can reason about this just using C++ and like no other",
    "start": "1563399",
    "end": "1568880"
  },
  {
    "text": "uh no other questions and well what we're interested in we have this global data and the global",
    "start": "1568880",
    "end": "1576640"
  },
  {
    "text": "ready flag and then we have like here's thread one it's initializing data and setting ready to True here's thread",
    "start": "1576640",
    "end": "1583320"
  },
  {
    "text": "two while looping around here and then using data and then we can just wonder",
    "start": "1583320",
    "end": "1588360"
  },
  {
    "text": "like is initialized data happening before used data so um like the inter thread",
    "start": "1588360",
    "end": "1595640"
  },
  {
    "text": "relationship is there something that says well yes this actually did happen before the other",
    "start": "1595640",
    "end": "1602600"
  },
  {
    "text": "thing or yeah and if not is there a data",
    "start": "1602600",
    "end": "1608200"
  },
  {
    "text": "Race So what's a data race um first we have to uh see this thing so it says two",
    "start": "1608200",
    "end": "1615679"
  },
  {
    "text": "expression evaluations conflict if one of of them modifies a memory location and the other one reads or modifies the",
    "start": "1615679",
    "end": "1622240"
  },
  {
    "text": "same memory location so if you have a read and a right to variable those conflict and",
    "start": "1622240",
    "end": "1629399"
  },
  {
    "text": "this is fine this happens all the time it like conflict sounds like bad but it just mean like they they are trying to",
    "start": "1629399",
    "end": "1635760"
  },
  {
    "text": "work on the same thing and and that can be just fine there's only a data race if the",
    "start": "1635760",
    "end": "1642679"
  },
  {
    "text": "execution of a program contains uh it says it contains a data rase if it contains two potentially concurrent",
    "start": "1642679",
    "end": "1647720"
  },
  {
    "text": "conflicting actions so if you have a write and a read and they can happen concurrently now you're in dangerous",
    "start": "1647720",
    "end": "1654600"
  },
  {
    "text": "territory at least one of which is not Atomic okay so if you have a writer and",
    "start": "1654600",
    "end": "1659679"
  },
  {
    "text": "a reader and one of them is not Atomic and neither happens before the other okay so there are like uh several",
    "start": "1659679",
    "end": "1667360"
  },
  {
    "text": "ways to get out of a data rase uh either make sure they don't happen concurrently so they on the same thread or make them",
    "start": "1667360",
    "end": "1675399"
  },
  {
    "text": "all Atomic like we did with the ready flag or make sure that one happens before the other so data is not Atomic and it's",
    "start": "1675399",
    "end": "1683360"
  },
  {
    "text": "there's conflicting um operations on different threads and concurrent threads",
    "start": "1683360",
    "end": "1688640"
  },
  {
    "text": "so it must happen before that's the only way that the data access it safe is if it happens before the",
    "start": "1688640",
    "end": "1695880"
  },
  {
    "text": "other uh yeah and any such data race results in uny Behavior does the data",
    "start": "1695880",
    "end": "1701240"
  },
  {
    "text": "right happen before the read and that's the kinds of questions you have to ask yourself all the time when you actually",
    "start": "1701240",
    "end": "1707240"
  },
  {
    "text": "write uh concurrent code and you'll get some tips in the next talk about",
    "start": "1707240",
    "end": "1713159"
  },
  {
    "text": "this um but now we want to understand how how do we know whether it happens",
    "start": "1713159",
    "end": "1719559"
  },
  {
    "text": "before so does initialized data happen before use data is there a happens before relationship between these these",
    "start": "1719559",
    "end": "1726519"
  },
  {
    "text": "two uh expression evaluations and this this is the sequence that we",
    "start": "1726519",
    "end": "1733360"
  },
  {
    "text": "hope for right we initialize the data we set the ready flag we spin until it's true and then we use the data so we hope",
    "start": "1733360",
    "end": "1739919"
  },
  {
    "text": "to get this like inter thread happens before a thing going that's that's what we're hoping",
    "start": "1739919",
    "end": "1745480"
  },
  {
    "text": "for and inside of each thread it's simple we saw the sequence before rule",
    "start": "1745480",
    "end": "1750640"
  },
  {
    "text": "earlier so anything that goes like stuff semicolon more stuff semicolon it has to",
    "start": "1750640",
    "end": "1756080"
  },
  {
    "text": "be as if if that's the order of things so so these two arrows are green because like this happened before this and this",
    "start": "1756080",
    "end": "1763760"
  },
  {
    "text": "happened before this and if we can get a green arrow here then we're good right then we have this transitive",
    "start": "1763760",
    "end": "1770679"
  },
  {
    "text": "thing so for this example where already is not Atomic the arrow is red there is",
    "start": "1770679",
    "end": "1776679"
  },
  {
    "text": "nothing saying and that's like the default stuff just happens there's no happens before relationship unless you",
    "start": "1776679",
    "end": "1783679"
  },
  {
    "text": "can point to somewhere saying well this one is actually imposing some of sort of order otherwise order between thread",
    "start": "1783679",
    "end": "1790159"
  },
  {
    "text": "it's like I don't know so in this case there is no no uh happens before um and then you have a dat race",
    "start": "1790159",
    "end": "1798440"
  },
  {
    "text": "right you have uh this both between these two because this could write and",
    "start": "1798440",
    "end": "1803720"
  },
  {
    "text": "this could read and they're potentially concurrent and there's no Atomic or stuff but the same with data potentially",
    "start": "1803720",
    "end": "1811399"
  },
  {
    "text": "concurrent access to data one is a right and there's no Atomic stuff and no happens before relationship so data",
    "start": "1811399",
    "end": "1817880"
  },
  {
    "text": "could also then have a data race and then we fixed it or I claimed",
    "start": "1817880",
    "end": "1823960"
  },
  {
    "text": "we fixed it by putting uh St Atomic around uh the pool",
    "start": "1823960",
    "end": "1829039"
  },
  {
    "text": "and that does fix it somehow this Arrow now turned green so this does in fact",
    "start": "1829039",
    "end": "1836480"
  },
  {
    "text": "inter thread happen before this and then we have this transitive thing so ready",
    "start": "1836480",
    "end": "1842480"
  },
  {
    "text": "has been fixed but also data because transitively through the all the green arrows the data data race for data is",
    "start": "1842480",
    "end": "1849600"
  },
  {
    "text": "also gone",
    "start": "1849600",
    "end": "1853919"
  },
  {
    "text": "um but but why did the arrow turn green is it because it's",
    "start": "1855840",
    "end": "1861919"
  },
  {
    "text": "Atomic so what does atomic mean the minimum thing that Atomic gives",
    "start": "1861919",
    "end": "1867519"
  },
  {
    "text": "you is that it guarantees no half written values so if I write a 64-bit",
    "start": "1867519",
    "end": "1873519"
  },
  {
    "text": "word uh I'm sure that no other thread can observe like half of that bright if",
    "start": "1873519",
    "end": "1878880"
  },
  {
    "text": "it's Atomic it if if it's not Atomic it could be that well on my architecture I have to write 32 bits first and then I",
    "start": "1878880",
    "end": "1885320"
  },
  {
    "text": "write the other 32 bits and in the meantime some someone read the half-written thing but if it's Atomic there are no half written",
    "start": "1885320",
    "end": "1892600"
  },
  {
    "text": "values and it also says there is a total order to modifications of each individual Atomic so no matter what kind",
    "start": "1892600",
    "end": "1899799"
  },
  {
    "text": "of atomic you use if I if one PR sees one order of modifications all the other",
    "start": "1899799",
    "end": "1905240"
  },
  {
    "text": "Trends have to see the same so if I have like an an atomic counter that I go Plus+ it goes one two 3 4 then all",
    "start": "1905240",
    "end": "1913120"
  },
  {
    "text": "threads will also see 1 2 3 4 it can't see like 1 3 2 4 but that's just for the",
    "start": "1913120",
    "end": "1918760"
  },
  {
    "text": "for one specific Atomic so if I if I make so these two things I can always",
    "start": "1918760",
    "end": "1924600"
  },
  {
    "text": "rely on for the ready flag no half written values and it will all modifications to it will be seen in the",
    "start": "1924600",
    "end": "1930320"
  },
  {
    "text": "same order but it doesn't say anything about the order uh with respect to other things that happened so otherwise it",
    "start": "1930320",
    "end": "1938720"
  },
  {
    "text": "depends and it's that's what we're going to look at now how like the depends part here what what more can you get from Atomic except for protecting this this",
    "start": "1938720",
    "end": "1945880"
  },
  {
    "text": "single little thing that you're looking at",
    "start": "1945880",
    "end": "1949840"
  },
  {
    "text": "so here's the same example again the only thing we did was to change this uh this ready to be an atomical Bol instead",
    "start": "1951360",
    "end": "1957760"
  },
  {
    "text": "of just a bu and this is nice and convenient and",
    "start": "1957760",
    "end": "1963200"
  },
  {
    "text": "everything you you don't change anything in the code it just happens correctly and but what's actually going on",
    "start": "1963200",
    "end": "1968840"
  },
  {
    "text": "here is uh this so equals true what it",
    "start": "1968840",
    "end": "1973880"
  },
  {
    "text": "means is ready do store true with memory order sequence qual consistent which",
    "start": "1973880",
    "end": "1979320"
  },
  {
    "text": "we'll get back to and then while not ready it's actually while not ready load",
    "start": "1979320",
    "end": "1984519"
  },
  {
    "text": "the memory order sequential consistent so there's a memory order you can give to your stores and loads and if you",
    "start": "1984519",
    "end": "1989919"
  },
  {
    "text": "don't specify anything sequentially consistent is the type of ordering that you get and there are others that we",
    "start": "1989919",
    "end": "1996279"
  },
  {
    "text": "will also look into um yeah so sequentially consistent is kind of the",
    "start": "1996279",
    "end": "2002480"
  },
  {
    "text": "the strictest safest so that's the default you get um but you don't always need it so you can uh select others if",
    "start": "2002480",
    "end": "2009480"
  },
  {
    "text": "you want sequentially consistent solves a few things it establishes and happens",
    "start": "2009480",
    "end": "2016519"
  },
  {
    "text": "before across thread so this is the thing that helps us this is what turns the arrow uh green because if you choose",
    "start": "2016519",
    "end": "2024320"
  },
  {
    "text": "the sequentially consistent memory uh order then there is a happens before relationship between the bright and the",
    "start": "2024320",
    "end": "2030559"
  },
  {
    "text": "read of ready and since we had the other two green arrows now we have you're on the other so this way uh",
    "start": "2030559",
    "end": "2039080"
  },
  {
    "text": "yeah now we have the whole chain so everything is fine even the data is protected by this but it also imposes a single order",
    "start": "2039080",
    "end": "2047279"
  },
  {
    "text": "to all sequentially consistent operations so if you have a few threads working on this data that we saw here",
    "start": "2047279",
    "end": "2053679"
  },
  {
    "text": "and over here some other threads working on some completely unrelated stuff all of those have to kind of sync up now",
    "start": "2053679",
    "end": "2059878"
  },
  {
    "text": "because there's one total order to everything that happens to memory uh which uses the sequential consistent",
    "start": "2059879",
    "end": "2067280"
  },
  {
    "text": "memory order order and well usually you don't need",
    "start": "2067280",
    "end": "2072639"
  },
  {
    "text": "that on the other end of the spectrum for memory orders is the relaxed memory order and that says there is no happens",
    "start": "2073000",
    "end": "2079398"
  },
  {
    "text": "before relationship so if I change uh to relaxed memory order the arrow is now",
    "start": "2079399",
    "end": "2086398"
  },
  {
    "text": "red again you still get the one total order for every Atomic and like no half",
    "start": "2086399",
    "end": "2091839"
  },
  {
    "text": "written wres apply to to both of them but sequentially consistent imposes a total order to every everything going on",
    "start": "2091839",
    "end": "2098240"
  },
  {
    "text": "with memory in your entire program at least for all the operations that's used sequentially consistent relaxed",
    "start": "2098240",
    "end": "2104079"
  },
  {
    "text": "basically just means avoid half written Val half written values and and that stuff but you don't have the happens before thing so that would not work in",
    "start": "2104079",
    "end": "2111520"
  },
  {
    "text": "our example but for sequentially consistent we now have like previously it said",
    "start": "2111520",
    "end": "2119000"
  },
  {
    "text": "ready equals true and while not ready now we have what that actually like expands into with atomics saying",
    "start": "2119000",
    "end": "2125480"
  },
  {
    "text": "sequentially consistent store and itially consistent load and then the arrow uh is green I just check",
    "start": "2125480",
    "end": "2133910"
  },
  {
    "text": "[Music] something um yes and if we have if you put relaxed here there's no longer this",
    "start": "2133910",
    "end": "2142160"
  },
  {
    "text": "U happens before relationship so the thing that makes the arrow green is the memory order not the fact that it is",
    "start": "2142160",
    "end": "2148359"
  },
  {
    "text": "atomic but the memory order that we specify for the atomic operations so",
    "start": "2148359",
    "end": "2153680"
  },
  {
    "text": "then um relaxed doesn't work sequentially consistent uh does work",
    "start": "2153680",
    "end": "2160160"
  },
  {
    "text": "but I said that we we don't necessarily need everything to be ordered like we can look at some things over here some",
    "start": "2160160",
    "end": "2166040"
  },
  {
    "text": "things over here reason about those and it doesn't have to all be ordered so what we want here is yet",
    "start": "2166040",
    "end": "2174359"
  },
  {
    "text": "another memory order which is acquire and release so it says if an acquire",
    "start": "2174359",
    "end": "2180960"
  },
  {
    "text": "load observes the value of a release door the release door happens before the acquire",
    "start": "2180960",
    "end": "2186200"
  },
  {
    "text": "load so if this uh acquire load observes the right",
    "start": "2186200",
    "end": "2194839"
  },
  {
    "text": "from this release door the arrow is now green so yeah",
    "start": "2194839",
    "end": "2202760"
  },
  {
    "text": "um yeah if the acquir load observes the value of a release door the release door happens before the acquir load Al so if",
    "start": "2202760",
    "end": "2209520"
  },
  {
    "text": "it observes that means that well this is going to Loop a million times first and not observe the the store and when the",
    "start": "2209520",
    "end": "2215400"
  },
  {
    "text": "store happens and I observe it here then I know that this happened before",
    "start": "2215400",
    "end": "2221119"
  },
  {
    "text": "this um so then",
    "start": "2221119",
    "end": "2225760"
  },
  {
    "text": "um yeah so then we have the store happens we have the happens before relationship but because the load",
    "start": "2226640",
    "end": "2233079"
  },
  {
    "text": "acquire load observed a value from the release store so then we know that stores happen before load",
    "start": "2233079",
    "end": "2239520"
  },
  {
    "text": "and um yeah so the release and acquir words probably make you think mutex",
    "start": "2239520",
    "end": "2246359"
  },
  {
    "text": "right and it's the same word words because they they're kind of analogous to what you would do with a mutex you would initialize the data and then",
    "start": "2246359",
    "end": "2252839"
  },
  {
    "text": "release the mutex and you would acquire the mutex before working on the data so this isn't a mutex it's just like an",
    "start": "2252839",
    "end": "2259640"
  },
  {
    "text": "atomic but it kind of represents a similar idea so that can be like one way",
    "start": "2259640",
    "end": "2264920"
  },
  {
    "text": "to remember what the release and acquire memory orders mean because they mean kind of the same thing as the mutex",
    "start": "2264920",
    "end": "2272000"
  },
  {
    "text": "operations so how how does it work then like okay so the C++ standards says this",
    "start": "2272000",
    "end": "2277560"
  },
  {
    "text": "happens before that but like how how does it happen before that so what it says is that if you have",
    "start": "2277560",
    "end": "2285680"
  },
  {
    "text": "a release door you cannot take any of the stuff of the memory operations here",
    "start": "2285680",
    "end": "2290920"
  },
  {
    "text": "and do them later so by the time you do this you must have flushed out all the stuff up here to memory you can't delay",
    "start": "2290920",
    "end": "2298920"
  },
  {
    "text": "like the compiler can't reorder anything the CPU can't reorder anything by the time you do this everything must have",
    "start": "2298920",
    "end": "2305119"
  },
  {
    "text": "happened here and conversely uh this has to happen before",
    "start": "2305119",
    "end": "2312599"
  },
  {
    "text": "this so by the time you have done their acquire load then you can start on this",
    "start": "2312599",
    "end": "2317920"
  },
  {
    "text": "stuff but no memory operations from down here can pass up here and that's how it",
    "start": "2317920",
    "end": "2324280"
  },
  {
    "text": "actually works in practice so like the standard says there's a green arrow um but in practice what it does is the compiler and the CPU both have to be",
    "start": "2324280",
    "end": "2330839"
  },
  {
    "text": "careful to not order anything below the release or before the acquire so then",
    "start": "2330839",
    "end": "2336160"
  },
  {
    "text": "all the data has been stored before ready is stored and uh ready has been loaded before any of the data is",
    "start": "2336160",
    "end": "2343319"
  },
  {
    "text": "loaded um but the opposite is okay so if I have some stuff down here I can",
    "start": "2343319",
    "end": "2349079"
  },
  {
    "text": "actually get started on it a bit earlier if there's some unrelated stuff so it's like a oneway barrier thing it make sure",
    "start": "2349079",
    "end": "2354800"
  },
  {
    "text": "everything is done otherwise I don't really care and here make sure you do this before any of this stuff but if you",
    "start": "2354800",
    "end": "2361400"
  },
  {
    "text": "have some old stuff here that you still want to do then well fine that doesn't affect anything with with the releas and",
    "start": "2361400",
    "end": "2366520"
  },
  {
    "text": "acquire order and uh yeah I said both the compiler and the CPU has to then um",
    "start": "2366520",
    "end": "2372680"
  },
  {
    "text": "conform to this so here's the way I would actually fix it I would use store with memory",
    "start": "2372680",
    "end": "2379720"
  },
  {
    "text": "Order release and load with memory order acquire because now as soon as this load",
    "start": "2379720",
    "end": "2385280"
  },
  {
    "text": "observes the store there's a happens before so then everything is ordered and there's no data",
    "start": "2385280",
    "end": "2391280"
  },
  {
    "text": "rase um right so what does this look like let's compile it with the GCC again for",
    "start": "2391280",
    "end": "2398480"
  },
  {
    "text": "x86 and we see that now we're actually back to regular",
    "start": "2398480",
    "end": "2404720"
  },
  {
    "text": "moves so the exchange operation is gone it's only just moving one into memory",
    "start": "2404720",
    "end": "2410200"
  },
  {
    "text": "here and then it's moving the ready flag into a register here so there's no Atomic operations",
    "start": "2410200",
    "end": "2416640"
  },
  {
    "text": "here so with even with the release and acquire where we guaranteed that this",
    "start": "2416640",
    "end": "2422119"
  },
  {
    "text": "must happen before this there's no traces of anything Atomic or like fences or anything it's just like regular code",
    "start": "2422119",
    "end": "2432040"
  },
  {
    "text": "um and um if I were to use relaxed remember",
    "start": "2432040",
    "end": "2437680"
  },
  {
    "text": "I said if I use relaxed here then stuff breaks there's no longer happens before so if I were to use relaxed look at the",
    "start": "2437680",
    "end": "2444079"
  },
  {
    "text": "assembly code identical identical uh assembly code for the UB program and the",
    "start": "2444079",
    "end": "2450200"
  },
  {
    "text": "nonu program um so that can be a bit scary the reason it works is x86 is",
    "start": "2450200",
    "end": "2456240"
  },
  {
    "text": "super strict about re ordering stuff so the compiler knows that x86 is never",
    "start": "2456240",
    "end": "2461560"
  },
  {
    "text": "going to reorder memory operations anyway or at least not stores and loads so like I don't need to put anything",
    "start": "2461560",
    "end": "2467400"
  },
  {
    "text": "here says the compiler but if you as a programmer you do this and like let's",
    "start": "2467400",
    "end": "2472599"
  },
  {
    "text": "try relax on godbolt and see what happens oh it's the same I'll just use relaxed now you actually have u in your",
    "start": "2472599",
    "end": "2478200"
  },
  {
    "text": "program so that's like one important lesson if you're doing stuff don't just look at the assembly and and see well",
    "start": "2478200",
    "end": "2484400"
  },
  {
    "text": "it's the same so it must be the same uh it's not because now we have UB you could have a future compiler upgrade or",
    "start": "2484400",
    "end": "2491520"
  },
  {
    "text": "something that suddenly starts causes this to break not for this example but in the general",
    "start": "2491520",
    "end": "2496880"
  },
  {
    "text": "case and this is why a lot of people have had a hard time U porting their",
    "start": "2496880",
    "end": "2502880"
  },
  {
    "text": "code from x86 to like arm or risk five and stuff because they're used to just I",
    "start": "2502880",
    "end": "2508079"
  },
  {
    "text": "don't care about this because stuff isn't reordered anyway on x86 and then",
    "start": "2508079",
    "end": "2513119"
  },
  {
    "text": "you compile it on a different architecture and everything is green in CI and a couple of months later you have an angry customer at some Factory that",
    "start": "2513119",
    "end": "2519920"
  },
  {
    "text": "isn't connected to the internet saying your your machine breaks down every second week because it's actually UB and when",
    "start": "2519920",
    "end": "2527200"
  },
  {
    "text": "you compile it to a different platform it doesn't work anymore so if I use release and acquire and compile this to",
    "start": "2527200",
    "end": "2533720"
  },
  {
    "text": "for instance risk 5 I will see some fences in here which is the compiler telling the CPU that be careful about",
    "start": "2533720",
    "end": "2540240"
  },
  {
    "text": "these particular things they I care about the order um yeah there are some other",
    "start": "2540240",
    "end": "2546480"
  },
  {
    "text": "memory orders as well that's uh I'll just skip PA I",
    "start": "2546480",
    "end": "2551559"
  },
  {
    "text": "think and uh",
    "start": "2551559",
    "end": "2555680"
  },
  {
    "text": "yeah yeah so how does the compiler know what is safe and what is not like how did it know that it didn't need any",
    "start": "2559960",
    "end": "2565839"
  },
  {
    "text": "fences here on x86 for instance or or and know special Atomic operations or",
    "start": "2565839",
    "end": "2571319"
  },
  {
    "text": "anything and that's because of the CPU memory model so now we kind of leave the",
    "start": "2571319",
    "end": "2577200"
  },
  {
    "text": "here is how to thinking how to think about the C++ way of thinking about memory and the",
    "start": "2577200",
    "end": "2583400"
  },
  {
    "text": "things that you I give you a framework to think about these things when you actually want to write concurrent code and move into here's how it happens to",
    "start": "2583400",
    "end": "2590680"
  },
  {
    "text": "work on CPUs and I think it's pretty cool but you don't need to know this really but I always like to like if I",
    "start": "2590680",
    "end": "2596599"
  },
  {
    "text": "want to learn something if you learn the thing that like one layer below it's easier to understand uh the thing from",
    "start": "2596599",
    "end": "2603119"
  },
  {
    "text": "Level above does that make sense I think yeah I I like that at Le so I I like to figure out okay so what's what else is",
    "start": "2603119",
    "end": "2610160"
  },
  {
    "text": "going on so this is what the compiler needs in order to support the C memory",
    "start": "2610160",
    "end": "2617160"
  },
  {
    "text": "model so when we talk about reordering it could be out of order instruction",
    "start": "2617160",
    "end": "2623400"
  },
  {
    "text": "execution it could be like micro operations that are get reordered like one instruction turns into many that get",
    "start": "2623400",
    "end": "2628720"
  },
  {
    "text": "reordered internally pipeline could do stuff store buffers um store and load",
    "start": "2628720",
    "end": "2633839"
  },
  {
    "text": "coal easing memory system caches all sorts of things that again even as a",
    "start": "2633839",
    "end": "2639599"
  },
  {
    "text": "compiler I don't want to think about this I just want to think about the memory model and for C++ when you think about",
    "start": "2639599",
    "end": "2648440"
  },
  {
    "text": "memory order you have to think about this expression evaluation and this expression evaluation did this one",
    "start": "2648440",
    "end": "2654160"
  },
  {
    "text": "happen before that and then you can like reason about every like you can zoom in on a little part of your application and",
    "start": "2654160",
    "end": "2660280"
  },
  {
    "text": "that's kind of the framework to think about memory order uh CPU memory models or also",
    "start": "2660280",
    "end": "2666520"
  },
  {
    "text": "called memory consistency models they have a different way of thinking about things so they typically say imagine",
    "start": "2666520",
    "end": "2673359"
  },
  {
    "text": "that there's a single Global total order of all memory operations like",
    "start": "2673359",
    "end": "2679240"
  },
  {
    "text": "always what are the allowed orders so I stole from this book here I stole this",
    "start": "2679240",
    "end": "2686200"
  },
  {
    "text": "um illustration so imagine you have a bunch of cores and imagine you have a memory and there's a single bus to the",
    "start": "2686200",
    "end": "2693119"
  },
  {
    "text": "memory so every core has to take turns so the memory bus will say now it's your turn now it's your turn so there's no",
    "start": "2693119",
    "end": "2698960"
  },
  {
    "text": "concurrency there's no caches nothing it's just like the memory and it has one port and it all the course take turn",
    "start": "2698960",
    "end": "2706400"
  },
  {
    "text": "take turns and then like after they' have taken all their turns like that those turns will have happened in a",
    "start": "2706400",
    "end": "2711640"
  },
  {
    "text": "certain order and the CPU memory model then says what are allowed orders how",
    "start": "2711640",
    "end": "2718720"
  },
  {
    "text": "how can I put the memory instructions into this total Order of",
    "start": "2718720",
    "end": "2724280"
  },
  {
    "text": "Things uh and then I don't have to think about caches and like all sorts of",
    "start": "2724280",
    "end": "2729720"
  },
  {
    "text": "stuff so here's the data and ready example that we've been using um this",
    "start": "2729720",
    "end": "2734760"
  },
  {
    "text": "time the data is just like a like an INT or something so we store 40 we put 42",
    "start": "2734760",
    "end": "2740640"
  },
  {
    "text": "into R zero store that as data and then one here is true so we start true to",
    "start": "2740640",
    "end": "2745880"
  },
  {
    "text": "ready and in the consumer thread we have this weight label we load ready and if",
    "start": "2745880",
    "end": "2751119"
  },
  {
    "text": "it's zero we just like jump around here until it becomes true and then we load the data and we use the data so when you",
    "start": "2751119",
    "end": "2758640"
  },
  {
    "text": "want to think about memory order you can just ignore everything except memory operations so just ignore the other",
    "start": "2758640",
    "end": "2764440"
  },
  {
    "text": "stuff what is the order that the memory operations happened so we have this",
    "start": "2764440",
    "end": "2769480"
  },
  {
    "text": "producer and this consumer and we have to order all of this like these have to have like we have to be able to pretend",
    "start": "2769480",
    "end": "2776839"
  },
  {
    "text": "as if they happen in a single order we have to sort all of these and what is then a valid",
    "start": "2776839",
    "end": "2783480"
  },
  {
    "text": "order yeah so I think I said already in the imaginary global total memory order imagine that each thread takes turns and",
    "start": "2783480",
    "end": "2790240"
  },
  {
    "text": "then you have like this as if rule like they don't actually do this right you have all sorts of caches and fancy stuff",
    "start": "2790240",
    "end": "2795480"
  },
  {
    "text": "but it has to be as if this happens and then how much of the program order is preserved into that total",
    "start": "2795480",
    "end": "2804160"
  },
  {
    "text": "order um so but this is just theoretical model right the architecture promises",
    "start": "2804160",
    "end": "2809359"
  },
  {
    "text": "this to the compiler writer or whatever so here here is a possible",
    "start": "2809359",
    "end": "2815079"
  },
  {
    "text": "order like here's one way to order these four blocks so if if uh the producer",
    "start": "2815079",
    "end": "2820280"
  },
  {
    "text": "thread runs entirely before the consumer thread we will have store data store ready load ready it's true so then we",
    "start": "2820280",
    "end": "2827319"
  },
  {
    "text": "load the data so this is nice like you produce everything you consume everything it",
    "start": "2827319",
    "end": "2835000"
  },
  {
    "text": "works this could also happen we store data then the consumer thread starts",
    "start": "2835359",
    "end": "2840640"
  },
  {
    "text": "running load ready it's false load ready it's false store ready load ready now",
    "start": "2840640",
    "end": "2846960"
  },
  {
    "text": "it's true so now I can load the data so this could also happen and this is also fine right all the um the consumer",
    "start": "2846960",
    "end": "2853640"
  },
  {
    "text": "thread doesn't try to load the data before it has actually been stored here's another way I can just",
    "start": "2853640",
    "end": "2860839"
  },
  {
    "text": "order these boxes if I want is ready ready is false ready is",
    "start": "2860839",
    "end": "2866079"
  },
  {
    "text": "false store ready equals true ready is now true use the data store the data so",
    "start": "2866079",
    "end": "2872240"
  },
  {
    "text": "this is not what we want right but this is also a way to order memory operations uh uh and then what the memory model",
    "start": "2872240",
    "end": "2879359"
  },
  {
    "text": "says is that could this happen or not right the memory model will tell you is this actually an allowed order of things",
    "start": "2879359",
    "end": "2885559"
  },
  {
    "text": "in the imaginary Global uh total order of things so if you have sequential",
    "start": "2885559",
    "end": "2892280"
  },
  {
    "text": "consistency so this is the same um we talked about with C++ they use this word and on the CPU also there's a SE",
    "start": "2892280",
    "end": "2898880"
  },
  {
    "text": "sequential consistency which means everything happens in order kind of uh then all of program order so this is the",
    "start": "2898880",
    "end": "2906800"
  },
  {
    "text": "program order and this is the orange program order and everything in memory order has to follow the the program",
    "start": "2906800",
    "end": "2913559"
  },
  {
    "text": "order okay so if I have store data store ready they must appear in that order in the total order and in the consumer I do",
    "start": "2913559",
    "end": "2920960"
  },
  {
    "text": "load ready load data then all the load readies have to happen before the load data in this in the memory order so all",
    "start": "2920960",
    "end": "2929000"
  },
  {
    "text": "of program order is preserved it's very easy to reason about things because nothing is reordered everything has to",
    "start": "2929000",
    "end": "2935480"
  },
  {
    "text": "go in order so it's nice to order about to to to reason about this but you can't",
    "start": "2935480",
    "end": "2940960"
  },
  {
    "text": "really optimize a lot so no one basically does this or maybe again there",
    "start": "2940960",
    "end": "2946520"
  },
  {
    "text": "are probably some embedded people here who work on some tiny stuff that I don't understand but like in your phone or",
    "start": "2946520",
    "end": "2952079"
  },
  {
    "text": "your server or laptop like no one does this you have to be able to optimize a",
    "start": "2952079",
    "end": "2957960"
  },
  {
    "text": "bit because sequential consistency if you have a load before a load preserved",
    "start": "2957960",
    "end": "2963400"
  },
  {
    "text": "store before a store load before a store or uh store before for a load like all of these program orders must be",
    "start": "2963400",
    "end": "2969000"
  },
  {
    "text": "preserved in the memory order nothing can be reordered so a better way to do things",
    "start": "2969000",
    "end": "2975640"
  },
  {
    "text": "is total store ordering and that's some that's probably what x86 does uh they",
    "start": "2975640",
    "end": "2980920"
  },
  {
    "text": "don't um document it so academics assume that x86 is total sord order and you can",
    "start": "2980920",
    "end": "2987599"
  },
  {
    "text": "just treat it as that but it's actually never like formally written down anywhere but but the idea that uh x86",
    "start": "2987599",
    "end": "2995040"
  },
  {
    "text": "does and other uh older architectures is they say it makes sense like you preserve all",
    "start": "2995040",
    "end": "3002400"
  },
  {
    "text": "of these orders but um but I actually I I want to be able to delay the stores a",
    "start": "3002400",
    "end": "3007640"
  },
  {
    "text": "bit and and why do they want that they want to have a store buffer so if the core does a does a",
    "start": "3007640",
    "end": "3015000"
  },
  {
    "text": "store and it has more instructions it can just put the store into the store buffer on the core and just keep running",
    "start": "3015000",
    "end": "3021520"
  },
  {
    "text": "it doesn't have to wait for this store to go all the way to memory you like I put it in the buffer and like send it to",
    "start": "3021520",
    "end": "3027040"
  },
  {
    "text": "the cash a bit later I'll just keep running so this is a very nice optimization that you can do that x86",
    "start": "3027040",
    "end": "3032599"
  },
  {
    "text": "does um so all the stores are buffered inside of the core before even hitting",
    "start": "3032599",
    "end": "3037760"
  },
  {
    "text": "L1 and then you can just like store okay put it here keep running and then if you have if you have",
    "start": "3037760",
    "end": "3045440"
  },
  {
    "text": "a load to the same address I I store to address 42 and then I load from address 42 I have to just check the store buffer",
    "start": "3045440",
    "end": "3052040"
  },
  {
    "text": "first before I go ask the cach because it could be that it's still in my local buffer it hasn't G don't to cach yet so",
    "start": "3052040",
    "end": "3058839"
  },
  {
    "text": "um a later load might then take its value before the buffer is drain to the cach and then we have to actually check",
    "start": "3058839",
    "end": "3064240"
  },
  {
    "text": "the store buffer so there a little bit of uh like wires to do this but but this",
    "start": "3064240",
    "end": "3069280"
  },
  {
    "text": "can speed up your program quite a bit and this is the canonical example",
    "start": "3069280",
    "end": "3076559"
  },
  {
    "text": "for for for TSO imagine you have two threads one is storing X loading y the",
    "start": "3076559",
    "end": "3082880"
  },
  {
    "text": "other is storing Y and loading X so assuming that both X and Y are zero when we",
    "start": "3082880",
    "end": "3088799"
  },
  {
    "text": "start could we see Zero on both sides",
    "start": "3088799",
    "end": "3094640"
  },
  {
    "text": "and I'll just tell you because I I took quite a long time to to figure out how",
    "start": "3094640",
    "end": "3099920"
  },
  {
    "text": "to think about it but so imagine why uh load zero then X must have been stored",
    "start": "3099920",
    "end": "3106520"
  },
  {
    "text": "right this happens before this so if this load zero X must be Zero by",
    "start": "3106520",
    "end": "3112240"
  },
  {
    "text": "now uh and if this load zero then it means that this store cannot happened yet so that means that this happens",
    "start": "3112240",
    "end": "3119240"
  },
  {
    "text": "after this so then by the time this will also happen after this which happens after this so then X must be one so you",
    "start": "3119240",
    "end": "3126520"
  },
  {
    "text": "can't with sequential consistency there is no way for both X and Y to be zero and that's often called like a limus",
    "start": "3126520",
    "end": "3132799"
  },
  {
    "text": "test so like you say for my memory order they can't both uh be",
    "start": "3132799",
    "end": "3139799"
  },
  {
    "text": "zero but on on TSO that can actually happen because on TSO total store order",
    "start": "3140400",
    "end": "3146960"
  },
  {
    "text": "stores can be reordered after a load so in the memory order like on the core",
    "start": "3146960",
    "end": "3153440"
  },
  {
    "text": "this is what happens but the store went into a store buffer and it didn't hit the memory until a bit later so we can",
    "start": "3153440",
    "end": "3158640"
  },
  {
    "text": "actually load zero for y store one and then thread two loads zero for x and",
    "start": "3158640",
    "end": "3164359"
  },
  {
    "text": "only then do we actually see the store so the store can be delayed in memory order as opposed to program order so you",
    "start": "3164359",
    "end": "3170359"
  },
  {
    "text": "can have x equals z and y equals z but on on TSO because the store can go after",
    "start": "3170359",
    "end": "3176760"
  },
  {
    "text": "but on sequential consistency this is not allowed and then here's the hard part",
    "start": "3176760",
    "end": "3183160"
  },
  {
    "text": "that confuses everyone I've talk talked to about this which includes me and one other person uh but that's about that's",
    "start": "3183160",
    "end": "3189960"
  },
  {
    "text": "my data set uh we were both confused what if we both store and load",
    "start": "3189960",
    "end": "3195520"
  },
  {
    "text": "to the same address and then we say that in the memory order on TSO the",
    "start": "3195520",
    "end": "3201920"
  },
  {
    "text": "store can be ordered after load in the memory order so you can TSO says you can do",
    "start": "3201920",
    "end": "3207760"
  },
  {
    "text": "this but then you're like I load it suddenly I load it before I store it so now what's the value of x of the load",
    "start": "3207760",
    "end": "3214680"
  },
  {
    "text": "here and then the the thing with TSO is that memory order describes basically",
    "start": "3214680",
    "end": "3221680"
  },
  {
    "text": "the imagin re order that things hit the caches and like the memory system as like a one big thing it doesn't dictate",
    "start": "3221680",
    "end": "3229000"
  },
  {
    "text": "the value so when I do a load I have to first check the program order on my own",
    "start": "3229000",
    "end": "3234160"
  },
  {
    "text": "core so if it's actually a store to the same address the value of the X here is from program order and not from memory",
    "start": "3234160",
    "end": "3241799"
  },
  {
    "text": "order that might be a bit confusing so but like remember I said it and then you can think about it later and then it",
    "start": "3241799",
    "end": "3246839"
  },
  {
    "text": "makes sense but yeah so so memory order is only about this thing where imagine",
    "start": "3246839",
    "end": "3253119"
  },
  {
    "text": "the memory is a single thing that everyone has to talk to which order do things go to that memory thing it",
    "start": "3253119",
    "end": "3258760"
  },
  {
    "text": "doesn't say necessarily the value of the things inside of the core yeah so the",
    "start": "3258760",
    "end": "3264280"
  },
  {
    "text": "value of load follows program order otherwise memory order and yeah it's just a model so load X",
    "start": "3264280",
    "end": "3269319"
  },
  {
    "text": "will then just pick the one from the store buffer on on thread one or in core core",
    "start": "3269319",
    "end": "3275000"
  },
  {
    "text": "one so then if you bring up the assembly again that we saw earlier now we",
    "start": "3275000",
    "end": "3280119"
  },
  {
    "text": "understand why why this actually works because on x86 we saw it will never reorder stores so no stores from up here",
    "start": "3280119",
    "end": "3287680"
  },
  {
    "text": "will go below here and no loads from use data will go up here so so all store to",
    "start": "3287680",
    "end": "3294240"
  },
  {
    "text": "store ordering is maintained load to load ordering maintained so on TSO X6",
    "start": "3294240",
    "end": "3299319"
  },
  {
    "text": "nothing special is needed um",
    "start": "3299319",
    "end": "3305280"
  },
  {
    "text": "yes then um we have relaxed memory models so arm and risk 5 and others they",
    "start": "3305280",
    "end": "3312640"
  },
  {
    "text": "then say well do you really need to order all the stores and like all the loads and all loads before stores what",
    "start": "3312640",
    "end": "3321559"
  },
  {
    "text": "if you want a non5 store buffer for some reason what if you want to Coal the stores and loads so two stores to the",
    "start": "3321559",
    "end": "3327559"
  },
  {
    "text": "same address can just be sent out as one operation you save an operation maybe you want some fancy",
    "start": "3327559",
    "end": "3333280"
  },
  {
    "text": "speculation and prediction and optimizations in the memory system and cash that like maybe we can relax this a",
    "start": "3333280",
    "end": "3339119"
  },
  {
    "text": "bit more so for instance if data is not one",
    "start": "3339119",
    "end": "3345000"
  },
  {
    "text": "word but two words so we storing data zero and data one what they had to happen before ready but we don't care",
    "start": "3345000",
    "end": "3351240"
  },
  {
    "text": "about the order between these two like if I store half of the data first later I don't care so in the memory memory",
    "start": "3351240",
    "end": "3358680"
  },
  {
    "text": "order it's fine to like for me as a programmer as an assembly programmer here I don't care about the order of the",
    "start": "3358680",
    "end": "3364000"
  },
  {
    "text": "data stores I just need both of them to happen before ready and the same with the",
    "start": "3364000",
    "end": "3369559"
  },
  {
    "text": "loads so in relaxed memory models we say actually I want the as a programmer with",
    "start": "3369559",
    "end": "3376520"
  },
  {
    "text": "in with an interest in performance I want to give the architecture a lot of freedom to optimize only uh like I I",
    "start": "3376520",
    "end": "3384240"
  },
  {
    "text": "want to tell I these memory operations I care about the rest of theu I I actually don't care about this so if you find a clever way",
    "start": "3384240",
    "end": "3390440"
  },
  {
    "text": "to do something go ahead and then I want some save defaults that so that it's not",
    "start": "3390440",
    "end": "3395760"
  },
  {
    "text": "impossible to program this thing and then that's why you need a memory",
    "start": "3395760",
    "end": "3401039"
  },
  {
    "text": "model so some of the safe defaults on risk five for instance is that if you",
    "start": "3401039",
    "end": "3406760"
  },
  {
    "text": "have a same address stored to store or they stored like of overlapping stores",
    "start": "3406760",
    "end": "3411920"
  },
  {
    "text": "then you do actually uh pre preserve those in memory order because if I store",
    "start": "3411920",
    "end": "3417680"
  },
  {
    "text": "data zero and I store it again it has to like the final value of this thing has to be r one if this was allowed to be",
    "start": "3417680",
    "end": "3424280"
  },
  {
    "text": "rig zero I it would be just I had to put penses basically on every other line that would be impossible to program so",
    "start": "3424280",
    "end": "3430000"
  },
  {
    "text": "if you do two stores to the same address they won't reorder but if they're a different order uh then they can",
    "start": "3430000",
    "end": "3436319"
  },
  {
    "text": "reorder and also if you have a a data dependency so in this example uh the producer thread loads some",
    "start": "3436319",
    "end": "3443640"
  },
  {
    "text": "data and then it stores that data so somewhere else so it's it's take take some data load it and put it over here",
    "start": "3443640",
    "end": "3450640"
  },
  {
    "text": "then there's a dependency between these two instructions if I were to do the store before I do the load now I will",
    "start": "3450640",
    "end": "3456839"
  },
  {
    "text": "have stored some garbage that was in the register I won't have stored the data I just loaded so risk 5 says actually I",
    "start": "3456839",
    "end": "3463720"
  },
  {
    "text": "can just figure out there's a dependency so I won't reorder those because then everything would be messed up um yeah 3 minutes I'll do one more so",
    "start": "3463720",
    "end": "3472680"
  },
  {
    "text": "we can have an address dependency so if you load a pointer to to figure out where to store something so I load the",
    "start": "3472680",
    "end": "3479280"
  },
  {
    "text": "pointer into rig zero and then I figure out where where's the pointer pointing to I want to store to to whatever the to",
    "start": "3479280",
    "end": "3485520"
  },
  {
    "text": "wherever the pointer is pointing I I can't do the store of two until I have I know where I I have to",
    "start": "3485520",
    "end": "3492400"
  },
  {
    "text": "load the pointer first so I know where to store it so here's an address dependency uh so that will also not be a",
    "start": "3492400",
    "end": "3498119"
  },
  {
    "text": "reorder so there are some some safe defaults like this and you have other things if you need more then you have to",
    "start": "3498119",
    "end": "3506160"
  },
  {
    "text": "put in fences so what you do is that like here I don't care about the",
    "start": "3506160",
    "end": "3511839"
  },
  {
    "text": "order between these two but here's a right fence and then I I store ready so now the CPU knows that there's a right",
    "start": "3511839",
    "end": "3518799"
  },
  {
    "text": "fence I can't reorder any stores across this fence and on the other side there's a read fence so I can't reorder loads",
    "start": "3518799",
    "end": "3524920"
  },
  {
    "text": "around this so now I told the CPU that I care about this ready flag but then I",
    "start": "3524920",
    "end": "3530280"
  },
  {
    "text": "can do like thousand stores up here that can do whatever but then make sure",
    "start": "3530280",
    "end": "3535680"
  },
  {
    "text": "everything is done and now do the the sort of ready",
    "start": "3535680",
    "end": "3541839"
  },
  {
    "text": "um yeah so risk five like you so TSO sequential consistency the simple one",
    "start": "3541839",
    "end": "3547680"
  },
  {
    "text": "preserves everything TSO says preserve everything except you can delay stores",
    "start": "3547680",
    "end": "3553720"
  },
  {
    "text": "risk five says you can reorder whatever everything is by default allowed except",
    "start": "3553720",
    "end": "3559240"
  },
  {
    "text": "13 specific rules so it has don't store don't reorder across an overlapping uh",
    "start": "3559240",
    "end": "3566640"
  },
  {
    "text": "don't reorder overlapping stores uh the dependency stuff fences like it",
    "start": "3566640",
    "end": "3572240"
  },
  {
    "text": "has uh yeah just check the manual it has 13 rules so like these few specific things save as kind of like the default",
    "start": "3572240",
    "end": "3579359"
  },
  {
    "text": "thing and then you have to put fences for the rest so in summary you as a programmer",
    "start": "3579359",
    "end": "3586280"
  },
  {
    "text": "you care about like the first part of the talk mainly you you think about the C++ memory model and you write your",
    "start": "3586280",
    "end": "3592880"
  },
  {
    "text": "programs and they will just work everywhere and then uh the compiler and the people",
    "start": "3592880",
    "end": "3599480"
  },
  {
    "text": "who write runtime libraries and stuff they have to rely on the architecture memory model that they're compiling for",
    "start": "3599480",
    "end": "3604640"
  },
  {
    "text": "in order to provide the language memory model to you so the CPU and architecture provides the their memory model to the",
    "start": "3604640",
    "end": "3610599"
  },
  {
    "text": "compiler which provides the language memory model on top and the architecture memory model is",
    "start": "3610599",
    "end": "3616000"
  },
  {
    "text": "an implemented thanks to how the marro architecture works like pipelines and store buffers and whatnot and cache",
    "start": "3616000",
    "end": "3622079"
  },
  {
    "text": "coherence so that's like the the actual things that go in your CPU that make it possible to offer the architecture",
    "start": "3622079",
    "end": "3627160"
  },
  {
    "text": "memory mode so if you have two things here to remember when you think about C++ you",
    "start": "3627160",
    "end": "3635359"
  },
  {
    "text": "have to ask yourself does did this expression happen before this one and when you think about CPU memory",
    "start": "3635359",
    "end": "3641039"
  },
  {
    "text": "models just try to remember this figure here which decides what is allowed like",
    "start": "3641039",
    "end": "3647240"
  },
  {
    "text": "there's a single Global total order and what are the allowed orderings in there",
    "start": "3647240",
    "end": "3652799"
  },
  {
    "text": "and a bonus thing don't look at the assembly and think that you don't don't have bugs because thebly looks similar I",
    "start": "3652799",
    "end": "3658520"
  },
  {
    "text": "guess so yeah that was my",
    "start": "3658520",
    "end": "3663440"
  },
  {
    "text": "talk yeah so we're actually right on time so I'm not sure if I'm can they can take like one or two questions otherwise",
    "start": "3668160",
    "end": "3674400"
  },
  {
    "text": "I'll be hanging around and if you want to use this in practice just stay in this room because there will be actual practical",
    "start": "3674400",
    "end": "3681240"
  },
  {
    "text": "advice yeah just feel free to leave and then yeah you can just",
    "start": "3681240",
    "end": "3687480"
  },
  {
    "text": "uh a fence has to make sure that the the local stuff if doesn't hit the cach yet",
    "start": "3692480",
    "end": "3700119"
  },
  {
    "text": "or so or if you have a sore buffer and then you have like a like a read right fence then you",
    "start": "3700119",
    "end": "3707039"
  },
  {
    "text": "can't uh yeah then you have to make sure that well it only has to",
    "start": "3707039",
    "end": "3716880"
  }
]