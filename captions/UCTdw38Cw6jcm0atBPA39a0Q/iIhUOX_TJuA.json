[
  {
    "text": "welcome everyone how is everyone feeling about the world's best developer",
    "start": "3790",
    "end": "8990"
  },
  {
    "text": "conference so far great yeah I think we should give them all our big applaud",
    "start": "8990",
    "end": "15849"
  },
  {
    "text": "excellent I love this conference I love coming here it's not too far I'm from Gothenburg so",
    "start": "16900",
    "end": "22310"
  },
  {
    "text": "it's not gonna afford to travel so did anyone come here to listen about VB that's good I have a few things to say",
    "start": "22310",
    "end": "30230"
  },
  {
    "text": "about VB but let's keep that for later we're going to talk a little bit a little bit about the state of C sharp so",
    "start": "30230",
    "end": "36829"
  },
  {
    "text": "C sharp has changed a lot over the past few years over the past ten years so",
    "start": "36829",
    "end": "43100"
  },
  {
    "text": "we're gonna cover a lot of the features that you've missed we're gonna talk about things that might be coming in the",
    "start": "43100",
    "end": "48559"
  },
  {
    "text": "next versions things that Microsoft have been talking about adding to the language for a long time that they",
    "start": "48559",
    "end": "53829"
  },
  {
    "text": "didn't so we'll talk a little bit about why they might not have added that all",
    "start": "53829",
    "end": "59780"
  },
  {
    "text": "right so is everyone in here a c-sharp developer if you're not raise your hand ha gotcha all right so my name is",
    "start": "59780",
    "end": "67610"
  },
  {
    "text": "Phillip Ekberg I'm a Microsoft MVP it means that I talk about Microsoft stuff but I'm not really employed by Microsoft",
    "start": "67610",
    "end": "73730"
  },
  {
    "text": "so I kind of free free marketing so I wrote a book called c-sharp smorgasbord that's available for free on my blog so",
    "start": "73730",
    "end": "80180"
  },
  {
    "text": "just head over to my blog and download that if you want it's been out for a few years I cover a few language features",
    "start": "80180",
    "end": "86360"
  },
  {
    "text": "like async and dynamic and how to write good code all right so enough about me",
    "start": "86360",
    "end": "91700"
  },
  {
    "text": "and about my book we're gonna talk about the best language in the world which is C sharp so C sharp is kind of this mix",
    "start": "91700",
    "end": "100730"
  },
  {
    "text": "of all the different paradigms out there we have declarative programming languages imperative programming languages and functional programming",
    "start": "100730",
    "end": "107090"
  },
  {
    "text": "languages and c-sharp tries to steal all features from all of them or borrow I",
    "start": "107090",
    "end": "114050"
  },
  {
    "text": "don't know whichever makes you feel good so they take things from F sharp and they take things from Coughlin's and",
    "start": "114050",
    "end": "119870"
  },
  {
    "text": "Swift and Java and and all those different other languages out there and kind of make that as a part of the",
    "start": "119870",
    "end": "125930"
  },
  {
    "text": "c-sharp experience and I think that's what makes c-sharp one of the best languages out there and if we just go",
    "start": "125930",
    "end": "133249"
  },
  {
    "text": "back over the years I want to quickly recap some of the things was added to c-sharp after the first",
    "start": "133249",
    "end": "140120"
  },
  {
    "text": "version so c-sharp one you know we got if statements and switches and for loops and whatever all the other normal",
    "start": "140120",
    "end": "147470"
  },
  {
    "text": "programming languages at that time had right so but after that release we kind of got c-sharp 2.0 which added generics",
    "start": "147470",
    "end": "154880"
  },
  {
    "text": "and partial types in anonymous methods iterators and nullable types and so forth so this was kind of heaven for",
    "start": "154880",
    "end": "160820"
  },
  {
    "text": "developers because I came from a Java background and having worked in Java coming to C sharp and do generic",
    "start": "160820",
    "end": "167870"
  },
  {
    "text": "programming was really great was one of the the things that kind of made me stick to c-sharp alright so this was a",
    "start": "167870",
    "end": "176270"
  },
  {
    "text": "great addition to the language but the next addition to c-sharp which was c-sharp 3 we got implicitly typed local",
    "start": "176270",
    "end": "183710"
  },
  {
    "text": "variables and a funny story here is that when they introduced this in the language I've had this discussion so",
    "start": "183710",
    "end": "191270"
  },
  {
    "text": "many times with developers over the years they thought that just because you didn't add the type at the start c-sharp",
    "start": "191270",
    "end": "198050"
  },
  {
    "text": "was now a dynamic programming language which is not kind of the thing right so just being able to write bar X is equal",
    "start": "198050",
    "end": "204770"
  },
  {
    "text": "to 10 doesn't mean that it's dynamically typed so it took a few years before well maybe a few months before few people got",
    "start": "204770",
    "end": "211190"
  },
  {
    "text": "that after c-sharp 3 was released and then we got auto property initializer synonymous message extension methods and",
    "start": "211190",
    "end": "217610"
  },
  {
    "text": "query expressions and so forth things that kind of led up to us being in this more functional environment we can now",
    "start": "217610",
    "end": "224510"
  },
  {
    "text": "write linked expressions and we can do all types of craziness that kind of builds up this language into being even",
    "start": "224510",
    "end": "230960"
  },
  {
    "text": "more expressive than it was before things like generics in c-sharp 2 came",
    "start": "230960",
    "end": "236420"
  },
  {
    "text": "from research at Microsoft when they did that for f-sharp so they took those bits",
    "start": "236420",
    "end": "241580"
  },
  {
    "text": "and added that into c-sharp and kind of the same goes for the features that they had in c-sharp 3 which they kind of took",
    "start": "241580",
    "end": "248120"
  },
  {
    "text": "from other places as well so they all kind of take these different ideas from each other and now those two the languages we're gonna spend too much",
    "start": "248120",
    "end": "254480"
  },
  {
    "text": "time talking about the old versions because everyone in here probably knows a little bit about all these different",
    "start": "254480",
    "end": "259609"
  },
  {
    "text": "features now something interesting happened with c-sharp 4 we only got a",
    "start": "259609",
    "end": "264980"
  },
  {
    "text": "handful of nice features now not trying to say that the team didn't work well on adding things to find",
    "start": "264980",
    "end": "270940"
  },
  {
    "text": "which but I mean come on what three features I want this huge list of things",
    "start": "270940",
    "end": "276040"
  },
  {
    "text": "added to the programming language that's why choose c-sharp so we've got dynamic binding so finally we were able to write",
    "start": "276040",
    "end": "281860"
  },
  {
    "text": "dynamic programming in C sharp which meant that we could now do things like iron Python and iron Jas and we could",
    "start": "281860",
    "end": "288340"
  },
  {
    "text": "write things in a more dynamic manner we could write scripting in our applications and have that evaluated at",
    "start": "288340",
    "end": "293950"
  },
  {
    "text": "runtime that's pretty cool and then we got C sharp 5 with only pretty much one",
    "start": "293950",
    "end": "299860"
  },
  {
    "text": "feature I love async is one of those things that being keep keeping me",
    "start": "299860",
    "end": "305230"
  },
  {
    "text": "employed for the past few years because everyone gets it wrong and I need to go in and help them understand asynchronous",
    "start": "305230",
    "end": "311260"
  },
  {
    "text": "programming so I think it's great that they add asynchronous methods to c-sharp but they've made it so easy for",
    "start": "311260",
    "end": "317200"
  },
  {
    "text": "developers to add async code that they kind of forgot about how hard it is to write his interest programming so if we",
    "start": "317200",
    "end": "324490"
  },
  {
    "text": "look at these different iterations of the programming language the second iteration we got a lot of features the third we got a lot of features then we",
    "start": "324490",
    "end": "330280"
  },
  {
    "text": "got less and then we got less you'd expect that c-sharp 6 added just like a handful of features the problem here is",
    "start": "330280",
    "end": "338560"
  },
  {
    "text": "that by this time the compiler was probably what 8 10 12 years old 13 years",
    "start": "338560",
    "end": "346840"
  },
  {
    "text": "old and written in C++ I don't know if anyone in here has worked on a 10 plus",
    "start": "346840",
    "end": "354310"
  },
  {
    "text": "year old project written in C++ can't really be one awesome Oh actually a lot",
    "start": "354310",
    "end": "361300"
  },
  {
    "text": "that's awesome so you probably know that it's hard to maintain those apps and adding new things to those that kind of",
    "start": "361300",
    "end": "367780"
  },
  {
    "text": "fundamentally changed behavior they need to do a lot of things in the compiler to make a symptoms methods work right so",
    "start": "367780",
    "end": "374530"
  },
  {
    "text": "that kind of makes it difficult so at this point they had already announced that they were rewriting all the",
    "start": "374530",
    "end": "380080"
  },
  {
    "text": "compilers so does anyone not know what rosslyn is a few you don't know what",
    "start": "380080",
    "end": "386560"
  },
  {
    "text": "trust me so Roslyn is this project that Microsoft called it it's really the the",
    "start": "386560",
    "end": "392260"
  },
  {
    "text": "microsoft.net compiler platform so what they did was they they took the",
    "start": "392260",
    "end": "397870"
  },
  {
    "text": "compilers they looked at it and felt like we need to rewrite this in something better than C++ so they",
    "start": "397870",
    "end": "403660"
  },
  {
    "text": "rewrote the c-sharp come hollering c-sharp which is pretty cool so they used the old compiler to compile",
    "start": "403660",
    "end": "408969"
  },
  {
    "text": "the new compiler now what do you do with bugs in the old compiler do you bring",
    "start": "408969",
    "end": "415449"
  },
  {
    "text": "them across to the new compiler as well you probably have to because it needs to be able to compile no lapse and if you",
    "start": "415449",
    "end": "422020"
  },
  {
    "text": "break old apps that means that the compiler is not really that good right so they had to re-implement all the bugs",
    "start": "422020",
    "end": "428020"
  },
  {
    "text": "in the old compiler which probably feels horrible to a developer no knowingly adding blocks to your code but that's",
    "start": "428020",
    "end": "435099"
  },
  {
    "text": "what they had to do so they started rebuilding the compilers which is rosslyn the idea here is that they can",
    "start": "435099",
    "end": "440590"
  },
  {
    "text": "now add more language features a lot more easily so how do we make it even",
    "start": "440590",
    "end": "446229"
  },
  {
    "text": "more easier for us to add features to the language one of the problems that",
    "start": "446229",
    "end": "451599"
  },
  {
    "text": "Java had over the years is that they had this language design team that was sitting in a cave somewhere talking",
    "start": "451599",
    "end": "458650"
  },
  {
    "text": "about features they want to add to the language ten years in the future they didn't talk to anyone else until they",
    "start": "458650",
    "end": "464979"
  },
  {
    "text": "released that version of Java that's kind of problematic you're not very agile right so what Microsoft did was",
    "start": "464979",
    "end": "470770"
  },
  {
    "text": "that they released the compilers as an open source project so if you go to github you go to dotnet slash rosslyn",
    "start": "470770",
    "end": "478830"
  },
  {
    "text": "you can see here that there's 35,000 or 36,000 commits to the the.net compilers",
    "start": "478830",
    "end": "485770"
  },
  {
    "text": "or they rosslyn compiler so this compiles both c-sharp and VB it does all the code analysis so what you can do",
    "start": "485770",
    "end": "493150"
  },
  {
    "text": "with this is that you can bring that into your application and you can point to a c-sharp file and have that compiled",
    "start": "493150",
    "end": "498610"
  },
  {
    "text": "by your app this means that you can get scripting with c-sharp and you can do all kinds of crazy things with the",
    "start": "498610",
    "end": "505330"
  },
  {
    "text": "compiler now they've done 91 releases you know there's not 91 releases of",
    "start": "505330",
    "end": "511419"
  },
  {
    "text": "Visual Studio that would be crazy right but what you can do is that you can go into the releases here you can download",
    "start": "511419",
    "end": "516789"
  },
  {
    "text": "a version of the compiler and just bring that into Visual Studio or you start as a nougat package in your app and write",
    "start": "516789",
    "end": "524320"
  },
  {
    "text": "your own IDE for instance I think that's pretty cool and working in an open-source environment means that we",
    "start": "524320",
    "end": "530949"
  },
  {
    "text": "don't only want the code out there so I think Apple has done kind of open source for a long time but the way they do it",
    "start": "530949",
    "end": "537970"
  },
  {
    "text": "is that develop everything internally and then just publish the code which is kind of the wrong approach as well so you'll see",
    "start": "537970",
    "end": "545140"
  },
  {
    "text": "here there's 4700 issues I wouldn't want to be the PM that has to arrange all",
    "start": "545140",
    "end": "551230"
  },
  {
    "text": "those different issues and prioritize but a lot of people spend time adding issues to the compiler or adding feature",
    "start": "551230",
    "end": "557650"
  },
  {
    "text": "requests I think bugs to reporting bugs here which is great so this kind of opens up",
    "start": "557650",
    "end": "563290"
  },
  {
    "text": "for this dialogue with other developers all right so they have a lot of pull",
    "start": "563290",
    "end": "568750"
  },
  {
    "text": "requests I've actually gonna pull a request to the compiler github repositories my face is in there I",
    "start": "568750",
    "end": "575290"
  },
  {
    "text": "updated a spelling mistake in a document so yeah for that I didn't get anything",
    "start": "575290",
    "end": "582640"
  },
  {
    "text": "though so oh well what they also do is that they post all their c-sharp design",
    "start": "582640",
    "end": "587680"
  },
  {
    "text": "guidelines or their their c-sharp design notes so match that the keynote this morning he's posting a lot of the",
    "start": "587680",
    "end": "594490"
  },
  {
    "text": "internal discussions they have here so when they're at Microsoft they talk about the language features and they add",
    "start": "594490",
    "end": "599770"
  },
  {
    "text": "their meeting notes to github people can pitch in and talk about ideas on features that they want added to the",
    "start": "599770",
    "end": "604900"
  },
  {
    "text": "programming language and I think this is a great way for the language to evolve",
    "start": "604900",
    "end": "609940"
  },
  {
    "text": "but it also means that there's so much noise from the community about features that we we might want to have in the",
    "start": "609940",
    "end": "616000"
  },
  {
    "text": "programming language here's an example so we can see sharp 7 we've got tuples",
    "start": "616000",
    "end": "621910"
  },
  {
    "text": "or better tuples language support for samples rather and this proposal was up",
    "start": "621910",
    "end": "627720"
  },
  {
    "text": "already in 2015 and they're just added that a few releases to go ago to to the",
    "start": "627720",
    "end": "633310"
  },
  {
    "text": "c-sharp compilers so they talked about why they want to add this to have a lot of mathematical information about how to",
    "start": "633310",
    "end": "640810"
  },
  {
    "text": "implement this in the implications to the programming language and know people spend so much time talking about the",
    "start": "640810",
    "end": "646540"
  },
  {
    "text": "language features which is great because it helps us as developers we don't have to worry too much about that so",
    "start": "646540",
    "end": "652710"
  },
  {
    "text": "introducing Rosling opening up for other people to write things in the compiler and for Microsoft work with is openly",
    "start": "652710",
    "end": "659640"
  },
  {
    "text": "means that they can now add features to all the different programming languages a lot quicker this means that we want to",
    "start": "659640",
    "end": "667300"
  },
  {
    "text": "add features to a language that most people kind of leverage which is C sharp",
    "start": "667300",
    "end": "672700"
  },
  {
    "text": "so that means there's no more language parody previously what happened was that",
    "start": "672700",
    "end": "678400"
  },
  {
    "text": "we have a feature in c-sharp and it's also available most of the times in VB if it's in V beats probably in c-sharp",
    "start": "678400",
    "end": "685710"
  },
  {
    "text": "there's very few things in VB that I would like to have in c-sharp except the XML literals but they've always been the",
    "start": "685710",
    "end": "692980"
  },
  {
    "text": "parody between these languages but that's not the case anymore so what happens now is that they might add",
    "start": "692980",
    "end": "698500"
  },
  {
    "text": "things like pattern matching to C sharp which is not available in VB yet but there's still a ton of VB developers out",
    "start": "698500",
    "end": "705190"
  },
  {
    "text": "there so they will probably add that who knows in the future so now we've kind of",
    "start": "705190",
    "end": "712480"
  },
  {
    "text": "come to the point where we're gonna talk about pretty much the current state it's",
    "start": "712480",
    "end": "717790"
  },
  {
    "text": "anyone in here not not familiar with c-sharp six most of you are familiar",
    "start": "717790",
    "end": "723070"
  },
  {
    "text": "with c-sharp six it's it was released a while ago so we'll quickly grow through these",
    "start": "723070",
    "end": "728590"
  },
  {
    "text": "different language features and just have a look at the different ones I'll just I have features listed for all the",
    "start": "728590",
    "end": "735160"
  },
  {
    "text": "different c-sharp iterations and we'll jump into Visual Studio and have a look at them and talk through these different features and if you have any questions",
    "start": "735160",
    "end": "742060"
  },
  {
    "text": "just throw something at me not your laptop cuz that hurts so we got using",
    "start": "742060",
    "end": "749170"
  },
  {
    "text": "statements for static members which means that we can now be a little bit we can use less characters when we use a",
    "start": "749170",
    "end": "756040"
  },
  {
    "text": "lot of static types we've got Auto property initializers the idea here is",
    "start": "756040",
    "end": "761860"
  },
  {
    "text": "that we can now use proper read-only auto properties previously it was really hard for us to introduce our auto",
    "start": "761860",
    "end": "768040"
  },
  {
    "text": "property that you only set once during your application all right we can do",
    "start": "768040",
    "end": "775720"
  },
  {
    "text": "have weights inside catch him finally blocks we got the null conditional operator that's probably one of the best features in c-sharp six string",
    "start": "775720",
    "end": "782530"
  },
  {
    "text": "interpolation that's really handy we no longer have to do string dot format just dust that underneath for us Dictionary",
    "start": "782530",
    "end": "790420"
  },
  {
    "text": "initializers we got expression buried body mass of members and exception filters and as well as the name of",
    "start": "790420",
    "end": "796960"
  },
  {
    "text": "operator like this list here that's why as you see sharp right because they add all these different language features",
    "start": "796960",
    "end": "802480"
  },
  {
    "text": "that helped me save characters so does everyone in here knows Scott",
    "start": "802480",
    "end": "808630"
  },
  {
    "text": "Hanselman is he did a joke once I don't know if he was a joke but he said that we only have a certain amount of",
    "start": "808630",
    "end": "813910"
  },
  {
    "text": "keystrokes in our lives and I think that the c-sharp team they can spend as many keystrokes as they want as long as I",
    "start": "813910",
    "end": "820660"
  },
  {
    "text": "don't have to spend them right so if I can save up a few characters when I write my c-sharp code that's really",
    "start": "820660",
    "end": "826630"
  },
  {
    "text": "great so we have this solution here I have language features from all",
    "start": "826630",
    "end": "832330"
  },
  {
    "text": "different versions of c-sharp and we go through all of them so the first one is using stated statements for static",
    "start": "832330",
    "end": "838150"
  },
  {
    "text": "members it's super simple we'll go through them quickly what we do here is that I no longer have to say console dot",
    "start": "838150",
    "end": "844150"
  },
  {
    "text": "write line at the top here I can say well I want to use all the static members from this class I could do the",
    "start": "844150",
    "end": "850120"
  },
  {
    "text": "same thing for for math for instance our case a using static system dot math and",
    "start": "850120",
    "end": "857350"
  },
  {
    "text": "I would then be able to say PI instead of doing math dot pi and of course if I",
    "start": "857350",
    "end": "864580"
  },
  {
    "text": "introduce a method in here in this context called write line that takes the same parameter that one wins",
    "start": "864580",
    "end": "870820"
  },
  {
    "text": "instead of console dot write line which makes sense so it's saying the same resolution as I've done before and we",
    "start": "870820",
    "end": "878500"
  },
  {
    "text": "also see the name of operator here which is kind of a great addition what they do",
    "start": "878500",
    "end": "883960"
  },
  {
    "text": "here is that they simply allow us to say well you have this type here I want you to get the name of that type and why is",
    "start": "883960",
    "end": "889960"
  },
  {
    "text": "that important because for too often in error messages you've forgotten to refactor the name inside the error",
    "start": "889960",
    "end": "896410"
  },
  {
    "text": "message of the type that was a problem so this here will allow us to when we refactor program to something else",
    "start": "896410",
    "end": "903400"
  },
  {
    "text": "you'll just reflect on all the different places and we're also seeing that we're doing string interpolation here so",
    "start": "903400",
    "end": "909730"
  },
  {
    "text": "previously we've been able to do an @ sign here to allow us to to do certain",
    "start": "909730",
    "end": "914860"
  },
  {
    "text": "things inside the string but now we can do this dollar sign which is allowing us to say well inside these curly braces",
    "start": "914860",
    "end": "921760"
  },
  {
    "text": "here I'm gonna have something that evaluates as a code block so we could say ten year for instance or we could",
    "start": "921760",
    "end": "927520"
  },
  {
    "text": "say var X is equal to ten and we could say X in here all right super simple",
    "start": "927520",
    "end": "935930"
  },
  {
    "text": "so we no longer have to worry about that straightened out format and the order of things when we do me string that format",
    "start": "935930",
    "end": "942250"
  },
  {
    "text": "all right so the auto property initializers which is the next cool feature in this case here I've got this",
    "start": "942250",
    "end": "949090"
  },
  {
    "text": "string property called name here and I'm setting that to the initial value of Phillip so this here is a true reading",
    "start": "949090",
    "end": "957410"
  },
  {
    "text": "all the auto property if I try to set that down here it'll tell us that this",
    "start": "957410",
    "end": "962990"
  },
  {
    "text": "here is actually read-only so he can't do that so that's kind of a nice",
    "start": "962990",
    "end": "968900"
  },
  {
    "text": "addition now one of the things I really",
    "start": "968900",
    "end": "974600"
  },
  {
    "text": "love about c-sharp is how easy it is for us to do a synchronous code but one of the problems prior to c-sharp 6 was that",
    "start": "974600",
    "end": "980420"
  },
  {
    "text": "we couldn't do awaits in slide caches and finally blocks so very often you want to clean up after yourself or add",
    "start": "980420",
    "end": "986150"
  },
  {
    "text": "something to a database and do that as synchronously and you couldn't do that before so in this case here I have this",
    "start": "986150",
    "end": "992660"
  },
  {
    "text": "run a sync block here it catches on exception and then inside the exception when I clean up and then I maybe I want",
    "start": "992660",
    "end": "998300"
  },
  {
    "text": "to dispatch a message somewhere and so forth right but of course then what",
    "start": "998300",
    "end": "1004450"
  },
  {
    "text": "happens is well if this throws here you would probably have to have that as an inside a catch block as well and you",
    "start": "1004450",
    "end": "1010630"
  },
  {
    "text": "would just end up in this mess but it's nice that it's there now",
    "start": "1010630",
    "end": "1016510"
  },
  {
    "text": "probably one of the best features added to c-sharp six is the new conditional operators so one of the things that",
    "start": "1016510",
    "end": "1024670"
  },
  {
    "text": "working heavily on both in c-sharp 6 and C sharp 7 & 8 and probably 9 and 10 as well is that they want to avoid as",
    "start": "1024670",
    "end": "1031720"
  },
  {
    "text": "having no reference exceptions now adding null to a language is probably one of the worst design decisions ever",
    "start": "1031720",
    "end": "1038319"
  },
  {
    "text": "because I don't know everyone in the air probably got a little reference exception sometime languages like",
    "start": "1038320",
    "end": "1045819"
  },
  {
    "text": "Coughlin's and swift everything is not nullable not know by default which means",
    "start": "1045820",
    "end": "1051340"
  },
  {
    "text": "that you have to be very explicit when something can be null which means that it's really hard for the application to",
    "start": "1051340",
    "end": "1056860"
  },
  {
    "text": "just suddenly throw an old reference exception those languages do other weird",
    "start": "1056860",
    "end": "1062260"
  },
  {
    "text": "things about anyways so what we can do here is that I have this array off person here it's null because it's not",
    "start": "1062260",
    "end": "1069400"
  },
  {
    "text": "initialise we can just imagine that it's retrieved from somewhere I can say here",
    "start": "1069400",
    "end": "1074680"
  },
  {
    "text": "well I want to grab other people and if this arrays not no I want you to give me",
    "start": "1074680",
    "end": "1080500"
  },
  {
    "text": "the the first item in the list of people if that's not no I want you to give me",
    "start": "1080500",
    "end": "1086950"
  },
  {
    "text": "the name of that person what happens here is that if one of these things are",
    "start": "1086950",
    "end": "1092080"
  },
  {
    "text": "no when we're doing this no conditional operator this entire block here evaluates to no itself so then we can",
    "start": "1092080",
    "end": "1098260"
  },
  {
    "text": "use this thing here to say well if any of these are null we'll just default to this value which is kind of nice right",
    "start": "1098260",
    "end": "1107290"
  },
  {
    "text": "and you'll see here the same at the bottom here we say well if person is not null give me the name if the if any of",
    "start": "1107290",
    "end": "1113560"
  },
  {
    "text": "that is no just say unknown if the person is it's not now give me the address if the address is not null give",
    "start": "1113560",
    "end": "1119590"
  },
  {
    "text": "in the street it's pretty simple now in",
    "start": "1119590",
    "end": "1124990"
  },
  {
    "text": "reality your code now looks like it's question marks everywhere and that you don't know what you want so it's a",
    "start": "1124990",
    "end": "1132100"
  },
  {
    "text": "trade-off right so expression bodied members it's one of those additions that",
    "start": "1132100",
    "end": "1140460"
  },
  {
    "text": "kind of didn't make sense to me from the start but the more I use it the more I like it in this case here at the bottom",
    "start": "1140460",
    "end": "1147280"
  },
  {
    "text": "I'm overriding to string and I'm simply saying well I want to return something so instead of me having to write a lot",
    "start": "1147280",
    "end": "1154780"
  },
  {
    "text": "of code to to do that whoops so instead of me having to write the",
    "start": "1154780",
    "end": "1161140"
  },
  {
    "text": "method body here which would be return name right I can just do that expression",
    "start": "1161140",
    "end": "1169000"
  },
  {
    "text": "body member less characters that's all that matters right looks pretty nice",
    "start": "1169000",
    "end": "1178710"
  },
  {
    "text": "super simple addition and then finally the language feature I want to talk",
    "start": "1178710",
    "end": "1184720"
  },
  {
    "text": "about is its exception filters so with exceptions you know when you want to",
    "start": "1184720",
    "end": "1190000"
  },
  {
    "text": "catch an exception you want to say well I will catch the network operation timed",
    "start": "1190000",
    "end": "1195610"
  },
  {
    "text": "out exception only when the status code or whatever I'm looking at is something",
    "start": "1195610",
    "end": "1201390"
  },
  {
    "text": "what you had to do previously was to say well I want to catch that exception and then have an if",
    "start": "1201390",
    "end": "1206470"
  },
  {
    "text": "block inside that which kind of ended up being a little bit nasty so now we can",
    "start": "1206470",
    "end": "1212590"
  },
  {
    "text": "say well I want to create a new HTTP client I want to do this call to Google",
    "start": "1212590",
    "end": "1217960"
  },
  {
    "text": "comm when I get a web exception and the the web exception state is is timeout",
    "start": "1217960",
    "end": "1223150"
  },
  {
    "text": "I'm gonna retry but if the name resolution fails well that means that I",
    "start": "1223150",
    "end": "1229060"
  },
  {
    "text": "don't have internet connection for instance means that I can't do a DNS check right so this is kind of nice and",
    "start": "1229060",
    "end": "1236610"
  },
  {
    "text": "you'll see later that they've reused the one keyword in other places all right so",
    "start": "1236610",
    "end": "1243130"
  },
  {
    "text": "let's just head back to and talk a little bit about c-sharp seven so c-sharp 6 added a lot of nice features",
    "start": "1243130",
    "end": "1249790"
  },
  {
    "text": "and that's kind of one of the powers off Ross Lee and they had really easy it was released for them to add features to the",
    "start": "1249790",
    "end": "1256180"
  },
  {
    "text": "language especially now that the compilers were rewritten so what is",
    "start": "1256180",
    "end": "1261340"
  },
  {
    "text": "there in c-sharp that's missing a lot of things for instance tuples and",
    "start": "1261340",
    "end": "1266740"
  },
  {
    "text": "deconstruction I don't know if anyone in here has worked in other programming languages where tuples is kind of a first-class citizen it's one of those",
    "start": "1266740",
    "end": "1273490"
  },
  {
    "text": "things that just makes sense when you have it in your code it makes things like pattern matching a lot easier and",
    "start": "1273490",
    "end": "1279280"
  },
  {
    "text": "it makes the code look a lot more beautiful which is kind of what we want so they also added pattern matching or a",
    "start": "1279280",
    "end": "1284560"
  },
  {
    "text": "first attempt to pattern matching there's a heap of improvements coming to the pattern pattern matching stuff but",
    "start": "1284560",
    "end": "1291100"
  },
  {
    "text": "at least it's in their digit separators in binary literals local functions",
    "start": "1291100",
    "end": "1296290"
  },
  {
    "text": "that's pretty cool as well riff returns that is some improvements to the out",
    "start": "1296290",
    "end": "1301570"
  },
  {
    "text": "parameter so these aren't kind of a heap of features but things like topples and",
    "start": "1301570",
    "end": "1308080"
  },
  {
    "text": "pattern matching that's no easy thing to solve so it probably took a long time to add that to the language so let's look",
    "start": "1308080",
    "end": "1315880"
  },
  {
    "text": "at the code for this so we're past the",
    "start": "1315880",
    "end": "1320920"
  },
  {
    "text": "sharp six we're going to look at tuples this is a tuple pretty much multiple",
    "start": "1320920",
    "end": "1326290"
  },
  {
    "text": "return types or a way for us to express ourselves and say well I have this thing",
    "start": "1326290",
    "end": "1331540"
  },
  {
    "text": "here just create the type for me so we have these two things to integers that I want to return for my",
    "start": "1331540",
    "end": "1338570"
  },
  {
    "text": "get point here and I return hundred and two hundred that's automatically injected into the X into the Y okay",
    "start": "1338570",
    "end": "1345890"
  },
  {
    "text": "that's pretty cool so when I use that I can I can kind of deconstruct that in",
    "start": "1345890",
    "end": "1350990"
  },
  {
    "text": "different ways as well so I can say I want to get the point I want to map the",
    "start": "1350990",
    "end": "1356420"
  },
  {
    "text": "tupple that we got from from get point here into these two different local parameters but I could also say well I",
    "start": "1356420",
    "end": "1365150"
  },
  {
    "text": "want you to map those just automatically and see that the code here still works doesn't show up anything because what",
    "start": "1365150",
    "end": "1371510"
  },
  {
    "text": "happens is that we can say points point",
    "start": "1371510",
    "end": "1378200"
  },
  {
    "text": "dot X and point out why and of course if we just undo that I could say point X",
    "start": "1378200",
    "end": "1387140"
  },
  {
    "text": "and point Y and now the application doesn't work anymore because I've deconstructed that into two different",
    "start": "1387140",
    "end": "1394370"
  },
  {
    "text": "local parameters with two different names as you see at the bottom as well",
    "start": "1394370",
    "end": "1400930"
  },
  {
    "text": "so this kind of helps us when it comes to pattern matching and you only see why",
    "start": "1400930",
    "end": "1406070"
  },
  {
    "text": "when we talk a little bit more about c-sharp eight so this is kind of one of those things that they add to the",
    "start": "1406070",
    "end": "1411170"
  },
  {
    "text": "language because it's gonna be nice along the way it's something that they need to have in the language in order",
    "start": "1411170",
    "end": "1416270"
  },
  {
    "text": "for him to add more cool things all right so that's tuples super simple",
    "start": "1416270",
    "end": "1422300"
  },
  {
    "text": "really what they do is that they map to I think you can cast that to a to a",
    "start": "1422300",
    "end": "1427970"
  },
  {
    "text": "tuple as well and this here will allow you to do item 1 and item 2 was well under the hood so they do a bit of magic",
    "start": "1427970",
    "end": "1434660"
  },
  {
    "text": "there as well if you worked with your old tuples that is alright so pattern",
    "start": "1434660",
    "end": "1440570"
  },
  {
    "text": "matching is one of those things that's kind of hard sometimes to give you a head around the idea is that in this",
    "start": "1440570",
    "end": "1445640"
  },
  {
    "text": "case here I have an abstract class called shape I have a triangle and a rectangle and I know that inside my",
    "start": "1445640",
    "end": "1451790"
  },
  {
    "text": "program somewhere I get this thing called the shape I don't know which shape it is I don't know if it's a path",
    "start": "1451790",
    "end": "1456980"
  },
  {
    "text": "it's a rectangle a circle or a triangle so I want to say well depending on the",
    "start": "1456980",
    "end": "1462890"
  },
  {
    "text": "type give me the correct type and give me that as a local parameter without me having to cast anything anywhere",
    "start": "1462890",
    "end": "1469480"
  },
  {
    "text": "so what we do is that well I'm gonna create a new shape here you see that I'm this is a strong it's the type shape",
    "start": "1469480",
    "end": "1476019"
  },
  {
    "text": "I used to switch block and say well when this is say triangle give me that as a local variable T here",
    "start": "1476019",
    "end": "1482260"
  },
  {
    "text": "so that means in this context in here I can use all the properties that I have on my tranq triangle and down here at",
    "start": "1482260",
    "end": "1489159"
  },
  {
    "text": "the rectangle if it's a rectangle I'll get that as well all right so that's pretty neat and one of the the places we",
    "start": "1489159",
    "end": "1500110"
  },
  {
    "text": "use this in other languages so I'm doing a bit of coughing at the moment and they do pattern matching everywhere one of",
    "start": "1500110",
    "end": "1506049"
  },
  {
    "text": "the ways that we can do this is by saying well I do a call to our web server and the the result is then",
    "start": "1506049",
    "end": "1512700"
  },
  {
    "text": "transformed into the correct object or into an error so I can say well if it's either the error or if it's the correct",
    "start": "1512700",
    "end": "1518889"
  },
  {
    "text": "data container I know what to do in my app so you can do pattern matching to",
    "start": "1518889",
    "end": "1524049"
  },
  {
    "text": "find out kind of where to go in your app as well I think it's super powerful",
    "start": "1524049",
    "end": "1530370"
  },
  {
    "text": "local functions and binary literals I don't know if I remember if we're gonna",
    "start": "1530370",
    "end": "1535990"
  },
  {
    "text": "use this so the digit separators allows us to just add a lot of underscores everywhere",
    "start": "1535990",
    "end": "1541570"
  },
  {
    "text": "I don't know why I would do that I don't really write numbers like this if I want to write the number 16 I just do this so",
    "start": "1541570",
    "end": "1548919"
  },
  {
    "text": "I mean I guess if you're a game developer or you want to impress on",
    "start": "1548919",
    "end": "1555220"
  },
  {
    "text": "someone I know alright so local functions I have this function called calculate down here",
    "start": "1555220",
    "end": "1560889"
  },
  {
    "text": "which is an internal or local function called fibonacci so this returns to Fibonacci of X and this is kind of nice",
    "start": "1560889",
    "end": "1566830"
  },
  {
    "text": "if you want to have a you don't want to leak something out to an outer method or",
    "start": "1566830",
    "end": "1572200"
  },
  {
    "text": "if you just want to decompress something or you want to do something very specific in that context I think it's",
    "start": "1572200",
    "end": "1577840"
  },
  {
    "text": "pretty cool I haven't really used to get though again if you're a game developer",
    "start": "1577840",
    "end": "1583600"
  },
  {
    "text": "you probably do a lot of refs and an out parameters and you want to optimize all",
    "start": "1583600",
    "end": "1590289"
  },
  {
    "text": "the different types and references and passing objects and values and reference types and and so forth everywhere in",
    "start": "1590289",
    "end": "1595960"
  },
  {
    "text": "your app in this case here I have this local function called element at it takes",
    "start": "1595960",
    "end": "1601620"
  },
  {
    "text": "this array that a cola source take the position and then it returns a reference to a certain position in this right so",
    "start": "1601620",
    "end": "1610680"
  },
  {
    "text": "what happens down here is that I'm saying well I want to give the give me the the reference to the element at the",
    "start": "1610680",
    "end": "1617880"
  },
  {
    "text": "first index which is kind of the same way of saying this here right it's kind",
    "start": "1617880",
    "end": "1624750"
  },
  {
    "text": "of odd looking at this code here and that it's not that it's compiling and that it's all good right because it",
    "start": "1624750",
    "end": "1630840"
  },
  {
    "text": "looks kind of weird and it is weird I wouldn't want to see this in production but this here kind of illustrates that",
    "start": "1630840",
    "end": "1637830"
  },
  {
    "text": "what I'm doing here is that I'm saying well just give me the reference to that integer it doesn't matter where it is it doesn't matter if it's on the stack or",
    "start": "1637830",
    "end": "1644040"
  },
  {
    "text": "the heap or wherever it is just give me a reference to that and I can then set the value myself right it's great if you",
    "start": "1644040",
    "end": "1652380"
  },
  {
    "text": "don't want to pass the reference this or copy values and so forth",
    "start": "1652380",
    "end": "1657320"
  },
  {
    "text": "again if you're a kind of game developer and you have all these or if you work a lot with in Rob's you have out",
    "start": "1657470",
    "end": "1663540"
  },
  {
    "text": "parameters everywhere they've done a lot of improvements or one improvement that's really great so you no longer",
    "start": "1663540",
    "end": "1669510"
  },
  {
    "text": "have to say you no longer have to do this no longer have to write this now",
    "start": "1669510",
    "end": "1679710"
  },
  {
    "text": "what you can do say well I want you to create the variable yourself if the",
    "start": "1679710",
    "end": "1684830"
  },
  {
    "text": "variable will set yeah so that's pretty",
    "start": "1684830",
    "end": "1690510"
  },
  {
    "text": "cool so you can do that in one line I had a chat with a developer maybe a long time ago maybe eight years ago and he",
    "start": "1690510",
    "end": "1696720"
  },
  {
    "text": "said well why is there no way for you to do this like it makes so much sense we don't have everything on one line and it",
    "start": "1696720",
    "end": "1702210"
  },
  {
    "text": "took 10 years for them to add this through the compiler so I mean most have been a really hard feature to implement I don't know all right",
    "start": "1702210",
    "end": "1710490"
  },
  {
    "text": "so c-sharp 7.1 this is the first time",
    "start": "1710490",
    "end": "1716280"
  },
  {
    "text": "that Microsoft did point releases so 7.1 was one of those things that well why",
    "start": "1716280",
    "end": "1721470"
  },
  {
    "text": "don't we call it eight well maybe because there's no substantial features we just want to add a little sugar to",
    "start": "1721470",
    "end": "1727350"
  },
  {
    "text": "the language and that's one of the things they can do with the power of ralston right they can just when they",
    "start": "1727350",
    "end": "1733170"
  },
  {
    "text": "ship an update to visual studio they can also add some language features that no one really maybe knows about so c-sharp 7.1",
    "start": "1733170",
    "end": "1741989"
  },
  {
    "text": "we finally got a way for us to say that we have an asynchronous main method this",
    "start": "1741989",
    "end": "1747779"
  },
  {
    "text": "means that if you write console apps that consume things that are in a database or on the web you don't have to",
    "start": "1747779",
    "end": "1754229"
  },
  {
    "text": "wrap it in a task start run and then do not wait because that's just horrible and if anyone's looking at that code",
    "start": "1754229",
    "end": "1759659"
  },
  {
    "text": "they will be like wow this is gonna deadlock cuz all that don't really deadlock but they probably would say",
    "start": "1759659",
    "end": "1765359"
  },
  {
    "text": "that with a default expression which is another way for us to just save a few characters we can infer the tupple names",
    "start": "1765359",
    "end": "1772799"
  },
  {
    "text": "pattern matching with generics ref assemblies and just let's just look at",
    "start": "1772799",
    "end": "1778679"
  },
  {
    "text": "two of them they've got 7.1 minor release didn't add too many cool things",
    "start": "1778679",
    "end": "1785190"
  },
  {
    "text": "so what we have here is we have this main method here I've marked that as an async method and it's returning a task",
    "start": "1785190",
    "end": "1790979"
  },
  {
    "text": "and it just works as a normal console app so if I run this it'll delay the the",
    "start": "1790979",
    "end": "1797459"
  },
  {
    "text": "console for Capone it'll delay for one second and then say wow and then it's",
    "start": "1797459",
    "end": "1803789"
  },
  {
    "text": "done so don't eat any weird things in here just works out of the box if we turn on 7.1 which would probably be",
    "start": "1803789",
    "end": "1812279"
  },
  {
    "text": "default now and this here is the new default keyword previously you had to say well I want the default of shape",
    "start": "1812279",
    "end": "1818129"
  },
  {
    "text": "which would be returning null right but now kind of that's redundant to say well",
    "start": "1818129",
    "end": "1823709"
  },
  {
    "text": "I have the type here just give me the default of that type they can just infer that instead kind of makes sense all",
    "start": "1823709",
    "end": "1830940"
  },
  {
    "text": "right and then of course we can infer the table names we talked about this",
    "start": "1830940",
    "end": "1837389"
  },
  {
    "text": "before I kind of sneak sneak peek into this in in the previous demo because I",
    "start": "1837389",
    "end": "1843809"
  },
  {
    "text": "had a bumped up the language version so you can actually go into the project and",
    "start": "1843809",
    "end": "1849839"
  },
  {
    "text": "doing to the ciaz project and change the language version that you want to support so let me see if I can and just",
    "start": "1849839",
    "end": "1856079"
  },
  {
    "text": "show you that",
    "start": "1856079",
    "end": "1858709"
  },
  {
    "text": "so you can say here well I want to use language version 27.2 or the latest and",
    "start": "1861670",
    "end": "1867200"
  },
  {
    "text": "that'll just use the latest you have installed which is kind of nice but one of the things that they're doing with",
    "start": "1867200",
    "end": "1873020"
  },
  {
    "text": "the compilers is right there they're changing behavior to things that compile and maybe there's a breaking change and",
    "start": "1873020",
    "end": "1878030"
  },
  {
    "text": "you're not ready to jump on to the next version of c-sharp so let's just we",
    "start": "1878030",
    "end": "1886550"
  },
  {
    "text": "don't need to jump into the PowerPoint let's just jump into Visual Studio we'll look at the the additions 27.2 because",
    "start": "1886550",
    "end": "1897380"
  },
  {
    "text": "there's not a lot so another point release they added ref read-only in in",
    "start": "1897380",
    "end": "1904430"
  },
  {
    "text": "parameters so again this is one of those things that if you work with high performance applications or games or or",
    "start": "1904430",
    "end": "1911750"
  },
  {
    "text": "a lot of Interop you might want to do this so what we're doing here is that we",
    "start": "1911750",
    "end": "1917660"
  },
  {
    "text": "are saying that well I want to return a read-only reference so you get a reference to that particular object",
    "start": "1917660",
    "end": "1923750"
  },
  {
    "text": "which is super quick to return from that method but you can't change it",
    "start": "1923750",
    "end": "1928760"
  },
  {
    "text": "references have always been able to be modified in the past but now we can say well I I want to return a read-only",
    "start": "1928760",
    "end": "1934100"
  },
  {
    "text": "reference and together with that we get this thing called the in parameter which",
    "start": "1934100",
    "end": "1939880"
  },
  {
    "text": "kind of restrict us to what we can do with that it's kind of the same thing as a read-only reference so what happens",
    "start": "1939880",
    "end": "1946520"
  },
  {
    "text": "here is that well I want to get a parameter passed into this method as a reference and you're not able to change",
    "start": "1946520",
    "end": "1955520"
  },
  {
    "text": "it so if I try to set Y to something here it'll just break and say well you're not really supposed to do that",
    "start": "1955520",
    "end": "1961910"
  },
  {
    "text": "it'll tell us that you can't reassign that because if we don't we okay",
    "start": "1961910",
    "end": "1967450"
  },
  {
    "text": "and the in herre if you're calling this method the the in keyword is kind of",
    "start": "1967450",
    "end": "1974540"
  },
  {
    "text": "redundant you still need to pass it as a reference if you do ref x here but when you're",
    "start": "1974540",
    "end": "1980930"
  },
  {
    "text": "juicing using the in keyword it's kind of redundant to say well this is a read-only thing you can just trust them here it's kind of makes more sense for",
    "start": "1980930",
    "end": "1987380"
  },
  {
    "text": "you pass it as a reference because then you were saying well anyone can change this value",
    "start": "1987380",
    "end": "1992539"
  },
  {
    "text": "which is kind of dangerous in some cases one of the other changes they did in 7.2",
    "start": "1992539",
    "end": "1998329"
  },
  {
    "text": "is that they now allow us to do non trailing named arguments which just get",
    "start": "1998329",
    "end": "2004119"
  },
  {
    "text": "rid of this here you'll see that I have X : ref X here right and previously you'd have to have to say well Y is",
    "start": "2004119",
    "end": "2010929"
  },
  {
    "text": "equal to 210 for instance but now you don't have to do that if you follow",
    "start": "2010929",
    "end": "2016629"
  },
  {
    "text": "those parameters after the first one right kind of nice another thing they",
    "start": "2016629",
    "end": "2026919"
  },
  {
    "text": "introduced in R in 7.2 and in.net Cora",
    "start": "2026919",
    "end": "2032079"
  },
  {
    "text": "bleah 2.1 is the ability to spans so everyone know what's spanis or does",
    "start": "2032079",
    "end": "2037659"
  },
  {
    "text": "anyone know what the span is oh not a lot that's awesome so span allows us to look at a set of",
    "start": "2037659",
    "end": "2044169"
  },
  {
    "text": "memory think of it as just saying well just allowing me to look at this thing",
    "start": "2044169",
    "end": "2049779"
  },
  {
    "text": "here on the stack or the heap so in this case here I'm saying well I have a an",
    "start": "2049779",
    "end": "2055299"
  },
  {
    "text": "array of integers that I initialize on my stack so this is also an introduced",
    "start": "2055299",
    "end": "2062319"
  },
  {
    "text": "introduction in 7.2 where they say well you can now use stack a lock without marking this as unsafe so previously you",
    "start": "2062319",
    "end": "2068470"
  },
  {
    "text": "had to mark your code as unsafe when you did this but here I'm saying well I want to allocate an array of 100 integers on",
    "start": "2068470",
    "end": "2074500"
  },
  {
    "text": "my stack and the span here allows me to look at that piece of the memory and",
    "start": "2074500",
    "end": "2080679"
  },
  {
    "text": "then I can do operations on that which is super quick I can say well tickets",
    "start": "2080679",
    "end": "2086589"
  },
  {
    "text": "here I want to I want to slice that from",
    "start": "2086589",
    "end": "2092829"
  },
  {
    "text": "the from the middle and just to the end",
    "start": "2092829",
    "end": "2097950"
  },
  {
    "text": "and this gives me a new span that's yeah",
    "start": "2097950",
    "end": "2105400"
  },
  {
    "text": "I do in the bottom as well but it doesn't actually cut up the array so you know when you do",
    "start": "2105400",
    "end": "2110559"
  },
  {
    "text": "array dot take while or when you do a substring it just copies all the values in this case here you just get a",
    "start": "2110559",
    "end": "2117039"
  },
  {
    "text": "reference to that particular part of memory so it doesn't actually initialize",
    "start": "2117039",
    "end": "2122099"
  },
  {
    "text": "anything more than this object here that points to that particular set memory which allows you to do really",
    "start": "2122099",
    "end": "2128720"
  },
  {
    "text": "crazy things in high performing operations alright I don't know if you've seen things added",
    "start": "2128720",
    "end": "2136670"
  },
  {
    "text": "to dotnet core into asp.net core but I know that the asp.net team is heavily using this to optimize memory usage and",
    "start": "2136670",
    "end": "2144050"
  },
  {
    "text": "doing all kinds of crazy things in the transport and and all the different",
    "start": "2144050",
    "end": "2149680"
  },
  {
    "text": "memory operations okay so this is kind",
    "start": "2149680",
    "end": "2157910"
  },
  {
    "text": "of the current state we were at 7.3 now but what's next of c-sharp like what one",
    "start": "2157910",
    "end": "2164210"
  },
  {
    "text": "of the these things they're all pretty cool there there have been added to the language over the past year or two but",
    "start": "2164210",
    "end": "2171230"
  },
  {
    "text": "there's still a long way to go to kind of get features from Kathleen and Swift",
    "start": "2171230",
    "end": "2176240"
  },
  {
    "text": "and and I don't know if javis caught up with generics yet but I know Causton has generics which is great but there's so",
    "start": "2176240",
    "end": "2182330"
  },
  {
    "text": "many good things in other programming languages that we want to bring into c-sharp as well so again if we head over",
    "start": "2182330",
    "end": "2189290"
  },
  {
    "text": "to github there's this language features Status page where they list all the",
    "start": "2189290",
    "end": "2194960"
  },
  {
    "text": "different statuses and that's actually my face that's due my contribution to the c-sharp compiler so they have this",
    "start": "2194960",
    "end": "2203330"
  },
  {
    "text": "page here where they're lists all the different language features and the status of them you can read all the documentation about well how do we",
    "start": "2203330",
    "end": "2210950"
  },
  {
    "text": "implement this what's the problems if we do it different ways they have this c-sharp 8",
    "start": "2210950",
    "end": "2218960"
  },
  {
    "text": "or 8.0 candidate where you see that there's it's only 3% completed there's a",
    "start": "2218960",
    "end": "2225710"
  },
  {
    "text": "lot of open issues 28 open issues that's all the features they want added to the language right I don't expect all of",
    "start": "2225710",
    "end": "2233330"
  },
  {
    "text": "these different things being added to to c-sharp a but if we look at it like we",
    "start": "2233330",
    "end": "2238760"
  },
  {
    "text": "have C sharp 8 and 9 and we will probably have eight point one eight point two eight point three and we'll",
    "start": "2238760",
    "end": "2245030"
  },
  {
    "text": "probably have more seven pointers as well it would be cool if they call it c-sharp X it's because everyone else",
    "start": "2245030",
    "end": "2252050"
  },
  {
    "text": "seems to call things X when it's 10 one of these days they're gonna add ranges",
    "start": "2252050",
    "end": "2258050"
  },
  {
    "text": "which is another way for us to kind of talk about a subset of data or or or grab things out of princess's span here",
    "start": "2258050",
    "end": "2265610"
  },
  {
    "text": "we can say well I want to grab a certain range and I want a pattern that I can express this with we're gonna get a sing",
    "start": "2265610",
    "end": "2272690"
  },
  {
    "text": "stream scent and I'm number voles which is another way for us to work with asynchronous code in our apps I'm gonna",
    "start": "2272690",
    "end": "2279710"
  },
  {
    "text": "get record types a record types is one of those things they've talked about since c-sharp 7 I love the idea of",
    "start": "2279710",
    "end": "2286280"
  },
  {
    "text": "adding record types and we'll look at what this will look like if they do add it but they've kind of scratched it",
    "start": "2286280",
    "end": "2291710"
  },
  {
    "text": "every time they release a new version of the language and it's right now I feel like they're never gonna add record",
    "start": "2291710",
    "end": "2297080"
  },
  {
    "text": "types but we'll see you know a default method in a default interface methods",
    "start": "2297080",
    "end": "2302650"
  },
  {
    "text": "nullable reference types no listing assignment recursive patterns and pattern matching improvements negated",
    "start": "2302650",
    "end": "2308480"
  },
  {
    "text": "condition if statements no conditional weight and a lot more so this list here is kind of comprehensive right and",
    "start": "2308480",
    "end": "2314510"
  },
  {
    "text": "there's 28 more things that you can read on github about what's coming to C sharp 8 right but some of the things that",
    "start": "2314510",
    "end": "2321860"
  },
  {
    "text": "they're adding to the language they do as previews so we can have a look at did",
    "start": "2321860",
    "end": "2331160"
  },
  {
    "text": "I miss talked about 7 points freeze or about that skip too many slides so",
    "start": "2331160",
    "end": "2337820"
  },
  {
    "text": "Before we jump into eight point zero I'm gonna jump back here this is a few really quick features they've at the top",
    "start": "2337820",
    "end": "2344540"
  },
  {
    "text": "of the quality which now allow us to say well I'm getting a topple out of here which is X & Y and we can now compare",
    "start": "2344540",
    "end": "2350720"
  },
  {
    "text": "that to two different values so I can say well I have this thing here it's not really the same topple it's not the same",
    "start": "2350720",
    "end": "2357200"
  },
  {
    "text": "reference it just matches the values in the topples itself which is kind of nice",
    "start": "2357200",
    "end": "2362960"
  },
  {
    "text": "to have okay I'm not sure I would ever use this but",
    "start": "2362960",
    "end": "2369620"
  },
  {
    "text": "they they've kind of made constraints on generics less restrictive so in this",
    "start": "2369620",
    "end": "2375740"
  },
  {
    "text": "case here I can say well I want to have a generic constraint that's an enum or you can have a delegate or we can have",
    "start": "2375740",
    "end": "2382430"
  },
  {
    "text": "whatever you want in here and those constraints were not possible before there's probably a lot of cases where",
    "start": "2382430",
    "end": "2389660"
  },
  {
    "text": "you would use this generic types itself is really really great and then of course they've added this",
    "start": "2389660",
    "end": "2396010"
  },
  {
    "text": "stack stack outlook initializer because I have initialized switch for everything else so stock outlook it's just a way",
    "start": "2396010",
    "end": "2402580"
  },
  {
    "text": "for us to just allocate things on the stack super handy all right so enough about the old stuff let's talk about",
    "start": "2402580",
    "end": "2410020"
  },
  {
    "text": "c-sharp aid one of the things that they were gonna add is ranges ranges is this",
    "start": "2410020",
    "end": "2415180"
  },
  {
    "text": "way of for us to kind of describe that I want a subset of data so you'll see here",
    "start": "2415180",
    "end": "2421540"
  },
  {
    "text": "that I'm saying I'm allocating these numbers on my stack and then I represent",
    "start": "2421540",
    "end": "2428589"
  },
  {
    "text": "this as a span so I just get a reference to that memory stream or that part of",
    "start": "2428589",
    "end": "2433900"
  },
  {
    "text": "the memory and then I say well I want to give give me a slice of that memory I",
    "start": "2433900",
    "end": "2439599"
  },
  {
    "text": "want you to start at number element number five and then just give me",
    "start": "2439599",
    "end": "2444760"
  },
  {
    "text": "everything else okay so if I run that",
    "start": "2444760",
    "end": "2450960"
  },
  {
    "text": "well if I don't close it first let's run that again I run this",
    "start": "2450960",
    "end": "2459569"
  },
  {
    "text": "let's see if it's the right project",
    "start": "2461560",
    "end": "2465730"
  },
  {
    "text": "let's run that it'll say six seven eight nine ten all right",
    "start": "2466600",
    "end": "2471980"
  },
  {
    "text": "so it started over here element number five and then went to the end now this",
    "start": "2471980",
    "end": "2481130"
  },
  {
    "text": "expression here can be interesting so I can say well just give me five to six or",
    "start": "2481130",
    "end": "2487220"
  },
  {
    "text": "five to seven I'll run that again and of course that should just work gives me",
    "start": "2487220",
    "end": "2493490"
  },
  {
    "text": "two numbers or I can say well I want you to give me everything from the end and",
    "start": "2493490",
    "end": "2500930"
  },
  {
    "text": "then minus one all right let's give me",
    "start": "2500930",
    "end": "2506930"
  },
  {
    "text": "six to nine so that's pretty handy especially if you're working with large",
    "start": "2506930",
    "end": "2512420"
  },
  {
    "text": "subsets of data if you have this large collection of things anyone say well I want to give give me the subset of the",
    "start": "2512420",
    "end": "2517760"
  },
  {
    "text": "thing in the middle this is one of the things that have been missing from Python for instance it's one of those things that I use a lot you could even",
    "start": "2517760",
    "end": "2526340"
  },
  {
    "text": "use it for when you initialize an array for instance say well I want you to or when you grab data you say well I want",
    "start": "2526340",
    "end": "2532940"
  },
  {
    "text": "from the start to the end ish and this here allows us to say that and you can",
    "start": "2532940",
    "end": "2540050"
  },
  {
    "text": "even start at the end where you could say like that kind of just looks like an",
    "start": "2540050",
    "end": "2546620"
  },
  {
    "text": "emoji but it just works all right that's pretty cool since this kind of this is a",
    "start": "2546620",
    "end": "2553130"
  },
  {
    "text": "preview thing I had to install a new version of the rosslyn compiler and had to bring in this thing that implements a",
    "start": "2553130",
    "end": "2559400"
  },
  {
    "text": "lot of weird stuff that implements all of range stuff but we're not gonna look at that just want to mention that this",
    "start": "2559400",
    "end": "2566960"
  },
  {
    "text": "is not a visual studio yet so this is just a preview thing that they might be adding hopefully soon because I think this is good all right so the ranges is",
    "start": "2566960",
    "end": "2575450"
  },
  {
    "text": "great that's a great addition to the language now let's see if we're all",
    "start": "2575450",
    "end": "2580970"
  },
  {
    "text": "still awake we're gonna talk a little bit more about pattern matching pattern matching is great and it's something",
    "start": "2580970",
    "end": "2586970"
  },
  {
    "text": "that well it can improve a little bit so this case here this kind of doesn't look",
    "start": "2586970",
    "end": "2594170"
  },
  {
    "text": "like any c-sharp that I've ever written before so what i'm doing here saying well i'm gonna return a string from this method here",
    "start": "2594170",
    "end": "2601140"
  },
  {
    "text": "i'm gonna return something based on this",
    "start": "2601140",
    "end": "2606250"
  },
  {
    "text": "shape it's gonna run a switch statement it's gonna switch on the shape if the",
    "start": "2606250",
    "end": "2613300"
  },
  {
    "text": "shape is a triangle only when T a and B",
    "start": "2613300",
    "end": "2620650"
  },
  {
    "text": "is not equal it's gonna give that actually this will match when NB is not",
    "start": "2620650",
    "end": "2626920"
  },
  {
    "text": "equal and then they've introduced this thing called recursive patterns which is",
    "start": "2626920",
    "end": "2633790"
  },
  {
    "text": "this thing here which is kind of a mess to explain so",
    "start": "2633790",
    "end": "2640030"
  },
  {
    "text": "what happens here is that triangle if you look at the type itself triangle is",
    "start": "2640030",
    "end": "2646660"
  },
  {
    "text": "a shape has a B and C a shape has a point all of these different types have",
    "start": "2646660",
    "end": "2654100"
  },
  {
    "text": "specified something called a deconstruct which is one of the things that they've made improvements to you when they",
    "start": "2654100",
    "end": "2660490"
  },
  {
    "text": "introduce tuples so you can deconstruct objects what we were simply saying here is that when you call the deconstruct it",
    "start": "2660490",
    "end": "2666730"
  },
  {
    "text": "just outs a B and C in point that allows you to get a copy right sort of so what",
    "start": "2666730",
    "end": "2674680"
  },
  {
    "text": "I'm doing here is I'm saying well give me a triangle I want to map the values",
    "start": "2674680",
    "end": "2679870"
  },
  {
    "text": "from a deconstruct to a b c and then i want to map the point because the point",
    "start": "2679870",
    "end": "2686890"
  },
  {
    "text": "is the the last parameter in my deconstruct i want to map the point but",
    "start": "2686890",
    "end": "2694330"
  },
  {
    "text": "i don't care about the first value and i want you to introduce a local variable Y for the Y position ok did I just lose",
    "start": "2694330",
    "end": "2702760"
  },
  {
    "text": "everyone all right so that's kind of a mouthful right and then I can just match",
    "start": "2702760",
    "end": "2707980"
  },
  {
    "text": "a rectangle whenever it's a rectangle that's probably the simplest simplest one so if I run this here I have a",
    "start": "2707980",
    "end": "2714700"
  },
  {
    "text": "triangle without a point which means that it'll match to this default thing",
    "start": "2714700",
    "end": "2722590"
  },
  {
    "text": "down here at the bottom because what happens here is that there's no point so it can't really match that because it's",
    "start": "2722590",
    "end": "2728200"
  },
  {
    "text": "an old right so deconstruct that so it'll find out that well you didn't set the point on the",
    "start": "2728200",
    "end": "2733630"
  },
  {
    "text": "object so if I run this it'll say well there's no point in running this code unless you say that the the triangle has",
    "start": "2733630",
    "end": "2743169"
  },
  {
    "text": "a point as well now what happens now",
    "start": "2743169",
    "end": "2748410"
  },
  {
    "text": "what happens is that it'll match to this thing down here which is triangle a B C",
    "start": "2748769",
    "end": "2754719"
  },
  {
    "text": "and where there's a point so if I run this again here it'll hopefully print out those values so that's pretty cool",
    "start": "2754719",
    "end": "2763289"
  },
  {
    "text": "now what happens if I say well a and B are equal which isn't really that great",
    "start": "2763289",
    "end": "2770549"
  },
  {
    "text": "because it should have they should be equal sorry if I do that we'll see what",
    "start": "2770549",
    "end": "2777759"
  },
  {
    "text": "happens this is ace not equal to B so our triangle needs to have two sides",
    "start": "2777759",
    "end": "2783369"
  },
  {
    "text": "that are are equally long so if I change that back to 10 it will then match this second one here",
    "start": "2783369",
    "end": "2789569"
  },
  {
    "text": "okay so of course is matches in order as well now the final one here so they have",
    "start": "2789569",
    "end": "2800859"
  },
  {
    "text": "these preview compilers that you can download but what's funny with them is",
    "start": "2800859",
    "end": "2806829"
  },
  {
    "text": "that they don't have all the features in in all the different versions of these new compilers so if you want to try",
    "start": "2806829",
    "end": "2812679"
  },
  {
    "text": "ranges and recursive patterns who download one version and if you want to try these nullable references you have",
    "start": "2812679",
    "end": "2817959"
  },
  {
    "text": "to download another one which kind of makes it demoing these really hard so let's just imagine that we have this",
    "start": "2817959",
    "end": "2826659"
  },
  {
    "text": "person here I'm initializing that to a new person I'm saying print P here and",
    "start": "2826659",
    "end": "2833589"
  },
  {
    "text": "then what happens is that well in this case here it's gonna say P dot name dot",
    "start": "2833589",
    "end": "2838659"
  },
  {
    "text": "length but I haven't set name to anything so that's gonna be an old string right it'll throw an old reference exception if we look at the",
    "start": "2838659",
    "end": "2845349"
  },
  {
    "text": "person implementation here I'm saying well this class here is nullable so this",
    "start": "2845349",
    "end": "2850989"
  },
  {
    "text": "this thing here is something they want to introduce in in c-sharp eight where you say well this everything is by",
    "start": "2850989",
    "end": "2857049"
  },
  {
    "text": "default non nullable but now we're saying well this string is knowable which in",
    "start": "2857049",
    "end": "2862870"
  },
  {
    "text": "I D then would say well P dot name here can be can be null so you should probably do this so you'll get some",
    "start": "2862870",
    "end": "2869790"
  },
  {
    "text": "information when you run the app so they're trying to think about well how do these improvements affect people that",
    "start": "2869790",
    "end": "2877600"
  },
  {
    "text": "work with these language features every day if you just upgrade the compiler and you have squiggly things everywhere",
    "start": "2877600",
    "end": "2883110"
  },
  {
    "text": "people are gonna be pretty upset so what I want to do that and we don't want to",
    "start": "2883110",
    "end": "2888910"
  },
  {
    "text": "do what they do in Kotlin which is that do this for everything which is kind of a waste of keystrokes to do to scream",
    "start": "2888910",
    "end": "2896050"
  },
  {
    "text": "things so I can run this code here because I don't have that compiler installed but pretty much the only",
    "start": "2896050",
    "end": "2902620"
  },
  {
    "text": "addition is to have this nullable for reference types as well or a little ability so if you remove that it's not",
    "start": "2902620",
    "end": "2909940"
  },
  {
    "text": "null and if you haven't said it the it will be very it'll complain that it's not setting in",
    "start": "2909940",
    "end": "2916420"
  },
  {
    "text": "the constructor so if we had this and ran this with a new new compiler it would tell me that well you need to say",
    "start": "2916420",
    "end": "2922540"
  },
  {
    "text": "in the constructor that the name is is set as well otherwise it won't compile",
    "start": "2922540",
    "end": "2927880"
  },
  {
    "text": "or you can probably turn those features on and off alright so pretty much what",
    "start": "2927880",
    "end": "2935770"
  },
  {
    "text": "they're doing is that they're making up for past mistakes so adding Knowle to",
    "start": "2935770",
    "end": "2941140"
  },
  {
    "text": "the language is probably a mistake depending on who you talk to but I think it's it's one of those things that have",
    "start": "2941140",
    "end": "2946420"
  },
  {
    "text": "broken a lot of applications out there and cost a lot of people a lot of money so there are a few more things that",
    "start": "2946420",
    "end": "2954010"
  },
  {
    "text": "they're going to try not to the language we talked about this null reference type here which means that if we try to set",
    "start": "2954010",
    "end": "2960610"
  },
  {
    "text": "the point in this case to null it'll just blow up the application because it's not knowable so you wouldn't be",
    "start": "2960610",
    "end": "2966820"
  },
  {
    "text": "able to do that one of the features we didn't look at its record types now record types it's just a way for us to",
    "start": "2966820",
    "end": "2973150"
  },
  {
    "text": "kind of express ourselves in a more simple manner so in this case here we",
    "start": "2973150",
    "end": "2978250"
  },
  {
    "text": "have this triangle which is a shape what if I can just say well this triangle requires a B and C to exist and if we do",
    "start": "2978250",
    "end": "2987850"
  },
  {
    "text": "that we can get a lot of cool things generated for us so if we introduce a",
    "start": "2987850",
    "end": "2993400"
  },
  {
    "text": "record type imagine that we got this entire class generated for us it would generate the constructor",
    "start": "2993400",
    "end": "2999910"
  },
  {
    "text": "it would generate equality checks it will generate the hash code it would",
    "start": "2999910",
    "end": "3005130"
  },
  {
    "text": "generate the D constructor as well as this thing called with method the idea",
    "start": "3005130",
    "end": "3011729"
  },
  {
    "text": "with with is that you have immunity in each ability in your applications so you",
    "start": "3011729",
    "end": "3016739"
  },
  {
    "text": "can't change any objects so instead you say well give me this object with X is",
    "start": "3016739",
    "end": "3021900"
  },
  {
    "text": "equal to 10 and that keeps you a new reference so you don't impact any current state that makes sense",
    "start": "3021900",
    "end": "3029279"
  },
  {
    "text": "I think that's pretty good but they still have a long way to work to get",
    "start": "3029279",
    "end": "3034289"
  },
  {
    "text": "this to work in the there's a lot of things in the studio that needs to be up-to-date as well now I'm a little I",
    "start": "3034289",
    "end": "3041749"
  },
  {
    "text": "don't know weird out weirded out but this thing the default interface interface methods do we have any library",
    "start": "3041749",
    "end": "3048869"
  },
  {
    "text": "authors in here that do you like you get packages just a few yep so you've",
    "start": "3048869",
    "end": "3054450"
  },
  {
    "text": "probably experienced that well you want to update an interface and you add a method to that interface and you kind of",
    "start": "3054450",
    "end": "3060539"
  },
  {
    "text": "upset everyone that's using your package so what if we can say well I'm gonna introduce this method which in my",
    "start": "3060539",
    "end": "3068880"
  },
  {
    "text": "interface and it has a default implementation that means that you don't have to implement that member in your",
    "start": "3068880",
    "end": "3075390"
  },
  {
    "text": "classes that implement the interface now do you know why I don't like this",
    "start": "3075390",
    "end": "3082170"
  },
  {
    "text": "because it's kind of like doing multiple inheritance all of a sudden you can have",
    "start": "3082170",
    "end": "3087749"
  },
  {
    "text": "all these different interfaces that have all these different implementations for things and you don't know where they",
    "start": "3087749",
    "end": "3093089"
  },
  {
    "text": "were coming from so I don't know I'm torn between liking this and not and of",
    "start": "3093089",
    "end": "3098789"
  },
  {
    "text": "course you could say well I want to get an ID and you could call get point on that so I don't know it's it's probably",
    "start": "3098789",
    "end": "3107489"
  },
  {
    "text": "a great addition especially for library authors because what I've seen happening as well is that they create new packages",
    "start": "3107489",
    "end": "3112799"
  },
  {
    "text": "instead with the new interfaces and people have to re-implement that as well which is also headache but it's a nice",
    "start": "3112799",
    "end": "3119460"
  },
  {
    "text": "addition and then we're getting an old co-listing assignment so we're getting",
    "start": "3119460",
    "end": "3127109"
  },
  {
    "text": "some improvements so instead of having to write that we can say well just initialize X if y if it's no right",
    "start": "3127109",
    "end": "3135710"
  },
  {
    "text": "so don't do the assignment unless it's null which is kind of nice but again I",
    "start": "3135710",
    "end": "3142609"
  },
  {
    "text": "think they could could have just used one question mark and then we might be",
    "start": "3142609",
    "end": "3148940"
  },
  {
    "text": "getting negated condition if statement so these features that I'm talking about now they've been on the kind of the",
    "start": "3148940",
    "end": "3154369"
  },
  {
    "text": "champions list for a long time and talked they've talked about these features for a long time before but I've",
    "start": "3154369",
    "end": "3159830"
  },
  {
    "text": "seen them come off and on the the approved features to the language but I don't trust them to to add these",
    "start": "3159830",
    "end": "3166220"
  },
  {
    "text": "features until I see them in Visual Studio so negated condition if statements allows us to more simply",
    "start": "3166220",
    "end": "3172099"
  },
  {
    "text": "write this code here for instance we could say well if shape is not triangle or if if not shape is triangle or on",
    "start": "3172099",
    "end": "3179960"
  },
  {
    "text": "less shape is triangle so this is kind of something that they're they're playing with I don't know which one I'm",
    "start": "3179960",
    "end": "3185750"
  },
  {
    "text": "liking best I think that the last one is pretty nice does anyone agree with me that the last one is the best everyone",
    "start": "3185750",
    "end": "3194240"
  },
  {
    "text": "no I'm just kidding again they're adding",
    "start": "3194240",
    "end": "3199280"
  },
  {
    "text": "things to allow us to write less null reference exceptions right so in this",
    "start": "3199280",
    "end": "3207109"
  },
  {
    "text": "case here we can say well if task is not null we want to wait the task which",
    "start": "3207109",
    "end": "3212780"
  },
  {
    "text": "returns that otherwise it returns null but what if we can just say well a wait exclamation mark task and that just",
    "start": "3212780",
    "end": "3219680"
  },
  {
    "text": "solves that entire thing for us because if you try to await on something that's",
    "start": "3219680",
    "end": "3224780"
  },
  {
    "text": "null it doesn't really it's not really happy when you do that so kind of wrap",
    "start": "3224780",
    "end": "3231140"
  },
  {
    "text": "this up these different language features especially ones that I've",
    "start": "3231140",
    "end": "3236690"
  },
  {
    "text": "talked about in c-sharp a I can't promise that they're all coming except the ones that will looked at in Visual",
    "start": "3236690",
    "end": "3243109"
  },
  {
    "text": "Studio that would probably add the pattern matching improvement and the Topol improvements and the ones that we",
    "start": "3243109",
    "end": "3248210"
  },
  {
    "text": "have for seven point one two and three they're already out there so you can play around with them as well already",
    "start": "3248210",
    "end": "3253640"
  },
  {
    "text": "and I think that the idea of them rewriting the entire compiler and doing that Rosling project has proven to be",
    "start": "3253640",
    "end": "3260359"
  },
  {
    "text": "pretty a pretty good idea but you know the compiler is just one part of the entire thing in the entire C",
    "start": "3260359",
    "end": "3267000"
  },
  {
    "text": "sharp and VP and F sharp ecosystem we also have the runtime and so forth and if you rewrite the runtime or out things",
    "start": "3267000",
    "end": "3273720"
  },
  {
    "text": "to the runtime you have even more options what you can do with the compilers but these are some of the",
    "start": "3273720",
    "end": "3279750"
  },
  {
    "text": "features that you might have missed in c-sharp and I hope you've enjoyed this and on your way out please do leave a",
    "start": "3279750",
    "end": "3285570"
  },
  {
    "text": "vote and if you have any questions I'm available here afterwards if you want to talk thank you so much",
    "start": "3285570",
    "end": "3292369"
  }
]