[
  {
    "start": "0",
    "end": "73000"
  },
  {
    "text": "my name is Eric enge Haim I work at a company called Rockstar which is located",
    "start": "2360",
    "end": "9530"
  },
  {
    "text": "here in Oslo and I'm going to talk about a Google go which is a programming",
    "start": "9530",
    "end": "15959"
  },
  {
    "text": "language from Google it started as one of these 20% projects that you can the",
    "start": "15959",
    "end": "23430"
  },
  {
    "text": "employees of Google can have and it was basically to try to deal with the",
    "start": "23430",
    "end": "29490"
  },
  {
    "text": "problem that they do a large-scale software development at Google and while languages like Python that",
    "start": "29490",
    "end": "36809"
  },
  {
    "text": "they use are quite easy to use it doesn't have quite the same opportunities for optimizing performance",
    "start": "36809",
    "end": "43429"
  },
  {
    "text": "and they use C++ of course which is much more complex language to work with so go",
    "start": "43429",
    "end": "49140"
  },
  {
    "text": "was I think intended at the kind of sweet spot between the two of them so",
    "start": "49140",
    "end": "54719"
  },
  {
    "text": "what I'm going to talk about here is not really a tutorial of the language the",
    "start": "54719",
    "end": "60449"
  },
  {
    "text": "more going through the kind of design choices that was made in the language and and the features and why that might",
    "start": "60449",
    "end": "67410"
  },
  {
    "text": "be make it an interesting language for you to explore in the future so the two",
    "start": "67410",
    "end": "74960"
  },
  {
    "start": "73000",
    "end": "73000"
  },
  {
    "text": "the two main topics that I want to focus on is software complexity and",
    "start": "74960",
    "end": "80780"
  },
  {
    "text": "performance so why did I choose these well if you look online for",
    "start": "80780",
    "end": "88010"
  },
  {
    "text": "introductions to go it's very common that they talk about concurrency because this is really one of the main selling",
    "start": "88010",
    "end": "93750"
  },
  {
    "text": "points for go they have very nice concurrency primitives that for people I",
    "start": "93750",
    "end": "101160"
  },
  {
    "text": "want to utilize all the course and their CPU go is a nice language but I wanted",
    "start": "101160",
    "end": "107520"
  },
  {
    "text": "to do something different that something's more relevant for me because this wasn't the reason why I got",
    "start": "107520",
    "end": "113130"
  },
  {
    "text": "interested in go regionally I was because of the at my company we create a",
    "start": "113130",
    "end": "118920"
  },
  {
    "text": "C++ a desktop application for visualizing the subsurface so I don't",
    "start": "118920",
    "end": "124260"
  },
  {
    "text": "really work with web technologies and and concurrency isn't as important for what I do but this is software that",
    "start": "124260",
    "end": "132020"
  },
  {
    "text": "started back in the early 1990s written in C++ so with a very",
    "start": "132020",
    "end": "138180"
  },
  {
    "text": "diverse team we have physicists geologists not magicians computer",
    "start": "138180",
    "end": "144030"
  },
  {
    "text": "scientists so it's a very mixed kind of team and so there's a lot of complexity in dealing with the stocker development",
    "start": "144030",
    "end": "150329"
  },
  {
    "text": "so I think that go was an interesting program Lang's to look at how you could approach some of the problems that very",
    "start": "150329",
    "end": "157200"
  },
  {
    "text": "often come up when you're working with a complex language like C++ as for",
    "start": "157200",
    "end": "163769"
  },
  {
    "text": "performance you can see I mentioned Moore's law here so it's been I'll talk",
    "start": "163769",
    "end": "169590"
  },
  {
    "text": "about the end of Moore's Law the the over the last years what that usually",
    "start": "169590",
    "end": "177870"
  },
  {
    "text": "refer to is the fact that the the clock frequency of the CPU hasn't really been going up instead it we've been adding",
    "start": "177870",
    "end": "184579"
  },
  {
    "text": "extra course of the CPU and there's one",
    "start": "184579",
    "end": "190049"
  },
  {
    "text": "way that to dealing without with go which is using the concurrency primitives but there are many languages",
    "start": "190049",
    "end": "197310"
  },
  {
    "text": "today that have added ways of dealing with that you see that whether it's a",
    "start": "197310",
    "end": "203689"
  },
  {
    "text": "closure or a scala or c-sharp you have ways of doing that",
    "start": "203689",
    "end": "209430"
  },
  {
    "text": "but I think one thing that's interesting that I want to talk about from perspective ago is how to deal with",
    "start": "209430",
    "end": "214500"
  },
  {
    "text": "things that have to do with the fact that we are getting a wider divide between the performance of the CPU and",
    "start": "214500",
    "end": "219989"
  },
  {
    "text": "main memory so the CPU is increasingly waiting for data from memory to do its",
    "start": "219989",
    "end": "227069"
  },
  {
    "text": "job I think it was one of the yesterday I was in one of the talks talking about",
    "start": "227069",
    "end": "233310"
  },
  {
    "text": "C++ optimization I was mentioned that the CPU spent some like 89 percent of",
    "start": "233310",
    "end": "239040"
  },
  {
    "text": "its time just waiting for data from memory so laying out your memory so that",
    "start": "239040",
    "end": "244379"
  },
  {
    "text": "the cache can be effectively utilized it's quite important for performance and it's not something that's really been",
    "start": "244379",
    "end": "251419"
  },
  {
    "text": "handled very well by the kind of mainstream languages that we have they don't really have methods to control",
    "start": "251419",
    "end": "259349"
  },
  {
    "text": "your memory layout and access patterns",
    "start": "259349",
    "end": "263659"
  },
  {
    "text": "so one of the central things I think for go with respect to dealing with the",
    "start": "264760",
    "end": "269870"
  },
  {
    "start": "266000",
    "end": "266000"
  },
  {
    "text": "complexity of software development is that they really put simplicity at the",
    "start": "269870",
    "end": "275360"
  },
  {
    "text": "core of its philosophy and by that I mean in many aspects in terms of the",
    "start": "275360",
    "end": "281810"
  },
  {
    "text": "semantics and the grammar of the language but also the kind of tools that surround the languages just if you look",
    "start": "281810",
    "end": "287960"
  },
  {
    "text": "at build tools or formatting dealing",
    "start": "287960",
    "end": "293060"
  },
  {
    "text": "with external libraries and so on it's very simple usually and I put up this",
    "start": "293060",
    "end": "301670"
  },
  {
    "text": "easy and simple here because I want to illustrate that these two terms easy and",
    "start": "301670",
    "end": "306830"
  },
  {
    "text": "simple are often conflated but they're quite different so if we use this",
    "start": "306830",
    "end": "314330"
  },
  {
    "text": "analogy with a circle saw and a handheld saw you could say that it's a lot easier",
    "start": "314330",
    "end": "320240"
  },
  {
    "text": "to cut wood with the circle saw but it's a lot more complex you have to have an",
    "start": "320240",
    "end": "325790"
  },
  {
    "text": "electric sockets to to get current to drive it there's probably a motor in there that might break down and you have",
    "start": "325790",
    "end": "331880"
  },
  {
    "text": "to service so there's many more moving parts and things that can go wrong that",
    "start": "331880",
    "end": "337040"
  },
  {
    "text": "you have to understand whereas a handheld saw anyone can sort of figure out how that works and if something",
    "start": "337040",
    "end": "343910"
  },
  {
    "text": "doesn't work you can kind of easily reason about it it's all in there in the open and I think it's a good analogy for",
    "start": "343910",
    "end": "350870"
  },
  {
    "text": "what go is like it's not the most if you're writing code you're not going to get these sort of dense very expressive",
    "start": "350870",
    "end": "357890"
  },
  {
    "text": "things would go that you would get from some of the other modern languages like Scala which is very expressive that",
    "start": "357890",
    "end": "364940"
  },
  {
    "text": "allows you to do a lot in a few lines of code the problem with a language like",
    "start": "364940",
    "end": "371660"
  },
  {
    "text": "Scala I think is that it's a lot more complex I remember one of the languages",
    "start": "371660",
    "end": "377240"
  },
  {
    "text": "that I was trying to teach myself last was with Haskell which is you know very",
    "start": "377240",
    "end": "384340"
  },
  {
    "text": "expressive and powerful language but it takes quite a long time to just understand the type system where it's",
    "start": "384340",
    "end": "390800"
  },
  {
    "text": "the appeal I think for go is that it's a language you can pick up in a couple of days and start doing things so if you're",
    "start": "390800",
    "end": "396980"
  },
  {
    "text": "dealing with large teams and especially companies that have to hire lots of people from different",
    "start": "396980",
    "end": "402080"
  },
  {
    "text": "backgrounds you can get them up to speed with go very quickly now it doesn't mean",
    "start": "402080",
    "end": "409730"
  },
  {
    "text": "that go is extremely verbose or anything I think that Java is much more verbose",
    "start": "409730",
    "end": "415220"
  },
  {
    "text": "language so they have tried to keep it simple but also remove the kind of unnecessary complexity in language so",
    "start": "415220",
    "end": "425470"
  },
  {
    "start": "427000",
    "end": "427000"
  },
  {
    "text": "one area that this is the simplicity is some a benefit is that go is an easy",
    "start": "427360",
    "end": "435320"
  },
  {
    "text": "language to parse now why does that matter well it matters because it makes",
    "start": "435320",
    "end": "441860"
  },
  {
    "text": "it a lot easier to build different kinds of tools like for method completion refactoring code analysis code",
    "start": "441860",
    "end": "448940"
  },
  {
    "text": "navigation and for me as a professional C++ developer for most my career it's I",
    "start": "448940",
    "end": "454870"
  },
  {
    "text": "think it's a very relevant thing I think I program C+ buffers on my 15 years now",
    "start": "454870",
    "end": "460040"
  },
  {
    "text": "and I think most of those years I never really had any good tools for doing refactoring and even when I had things",
    "start": "460040",
    "end": "467480"
  },
  {
    "text": "like code navigation would frequently break down or not work so I think this",
    "start": "467480",
    "end": "472550"
  },
  {
    "text": "is something that is important for a language to think about so just to illustrate this with a practical example",
    "start": "472550",
    "end": "480880"
  },
  {
    "text": "so this shows a definition of a function and the variable in C++ and if you look",
    "start": "481210",
    "end": "487550"
  },
  {
    "text": "at this there's if you're going to if you imagine that your compiler and you're reading each token as you go it's",
    "start": "487550",
    "end": "493850"
  },
  {
    "text": "not until you get to the parentheses that you know that you can distinguish whether this is defining a variable or a",
    "start": "493850",
    "end": "500240"
  },
  {
    "text": "function and if I was going to write a regular expression to search for",
    "start": "500240",
    "end": "505540"
  },
  {
    "text": "function definitions it's not trivial because just searching for something with the parentheses that could be also",
    "start": "505540",
    "end": "511100"
  },
  {
    "text": "a method call and not a method or a function call and not necessarily a function definition if you contrast this",
    "start": "511100",
    "end": "519409"
  },
  {
    "text": "would go if it's a lot easier to read for the both for us and for the computer",
    "start": "519410",
    "end": "526280"
  },
  {
    "text": "because the very first keyword that you see in a statement tells you what kind of statement",
    "start": "526280",
    "end": "531380"
  },
  {
    "text": "is so you start a function with the funky word you start a variable definition with var and you would be",
    "start": "531380",
    "end": "537920"
  },
  {
    "text": "from defining a typo we start that with type and so on now they do try to keep go syntax to",
    "start": "537920",
    "end": "544100"
  },
  {
    "text": "look a lot like the sort of C++ Java kind of syntax that were used to curly",
    "start": "544100",
    "end": "550460"
  },
  {
    "text": "braces but they do change a little bit you can see here they put the type information in the back and it might",
    "start": "550460",
    "end": "558260"
  },
  {
    "text": "seem like an unnecessary change to make but I believe this makes a lot of things",
    "start": "558260",
    "end": "566000"
  },
  {
    "text": "a bit easier from a reading perspective so if we look at an example of a AC structure it's a little bit annoying and",
    "start": "566000",
    "end": "574220"
  },
  {
    "text": "C you have to write this struct in front here so what typically C developers do",
    "start": "574220",
    "end": "579590"
  },
  {
    "text": "to compensate for that is to use the type def and the problem now is that you have the identify you're creating comes",
    "start": "579590",
    "end": "587630"
  },
  {
    "text": "at the end where you get all this complexity first that you have to read before you can see the name of the point",
    "start": "587630",
    "end": "593530"
  },
  {
    "text": "in goal because the type information comes at the end you can see that first",
    "start": "593530",
    "end": "599210"
  },
  {
    "text": "we start with type this is what kind of statement are we doing and then then you get the identifier immediately after and",
    "start": "599210",
    "end": "605870"
  },
  {
    "text": "then the complexity is put at the end so the last line there that's defining an",
    "start": "605870",
    "end": "612410"
  },
  {
    "text": "instance of a point and you can also do",
    "start": "612410",
    "end": "617570"
  },
  {
    "text": "that with type inference uses Colin equals so that DV is a little bit from this idea that you start with a keyword",
    "start": "617570",
    "end": "624410"
  },
  {
    "text": "that identifies where it is another example I think which is frillies for c",
    "start": "624410",
    "end": "630560"
  },
  {
    "text": "programming and c++ that shows the benefit of this way of placing the type",
    "start": "630560",
    "end": "637280"
  },
  {
    "text": "information is with higher order functions so I'm not sure how many know what the higher order function is yeah",
    "start": "637280",
    "end": "644900"
  },
  {
    "text": "so okay so it's not as known as I thought it was so basically the higher",
    "start": "644900",
    "end": "650210"
  },
  {
    "text": "order function he comes from functional programming would and basically means is",
    "start": "650210",
    "end": "655700"
  },
  {
    "text": "a function that takes another function as an argument or it could return other functions so in C++",
    "start": "655700",
    "end": "664200"
  },
  {
    "text": "well we have when the sink is that but back in the day we would use function pointers and if you look at this",
    "start": "664200",
    "end": "670980"
  },
  {
    "text": "function area takes a function pointer as an argument unless sure if you look",
    "start": "670980",
    "end": "676770"
  },
  {
    "text": "at this if you can glance and see what exactly the name of the argument here",
    "start": "676770",
    "end": "682370"
  },
  {
    "text": "and imagine if we have more arguments it's not very easy to read this so the",
    "start": "682370",
    "end": "689040"
  },
  {
    "text": "argument here is called foo now if you contrast this would go you can see that",
    "start": "689040",
    "end": "694320"
  },
  {
    "text": "and go the identifier always comes first and the type information laughs so you can see that right away even though you",
    "start": "694320",
    "end": "700350"
  },
  {
    "text": "have this complexity of the function definition so that's here so if you want",
    "start": "700350",
    "end": "706830"
  },
  {
    "text": "to use this here's the definition of an increment function we're just passing that to bar so that's the bar is our",
    "start": "706830",
    "end": "714330"
  },
  {
    "text": "higher-order function it will look quite similar and go doing this so because",
    "start": "714330",
    "end": "720240"
  },
  {
    "text": "this part of here looks is awful to read what we usually do when you're",
    "start": "720240",
    "end": "725730"
  },
  {
    "text": "programming whether it's C C++ or even Objective C I'm actually program more",
    "start": "725730",
    "end": "732180"
  },
  {
    "text": "Objective C the last years you would typically use a type def to give it a",
    "start": "732180",
    "end": "738270"
  },
  {
    "text": "name but even that is a bit awkward I found myself having to look this up because the the name of the type theft",
    "start": "738270",
    "end": "746520"
  },
  {
    "text": "is located right in the middle here so that's that's not very nice to read resin and go this is quite",
    "start": "746520",
    "end": "752730"
  },
  {
    "text": "straightforward right you get you start with the keywords saying what statement is and then you get the identifier in",
    "start": "752730",
    "end": "758400"
  },
  {
    "text": "the complexity type at the end some",
    "start": "758400",
    "end": "764040"
  },
  {
    "text": "thing I want to talk about is types and go so there's a lot of different kinds of types and go that you're used to",
    "start": "764040",
    "end": "769560"
  },
  {
    "text": "strings integers floating point I don't want to talk about all these so just",
    "start": "769560",
    "end": "774660"
  },
  {
    "text": "going to talk about the things that are interesting because they're different from what you're used to so the first",
    "start": "774660",
    "end": "780300"
  },
  {
    "text": "one is arrays so that's different with arrays and go is that there are value",
    "start": "780300",
    "end": "787140"
  },
  {
    "text": "types and what does that mean well it means that if you're trying to assign from one variable to another you're",
    "start": "787140",
    "end": "793830"
  },
  {
    "text": "actually copying the whole array over you're not just having another reference",
    "start": "793830",
    "end": "799290"
  },
  {
    "text": "or another pointer to that array another interesting is that the length of the",
    "start": "799290",
    "end": "805770"
  },
  {
    "text": "array is actually part of the type so if you think about this you can mention",
    "start": "805770",
    "end": "811050"
  },
  {
    "text": "that causes that would cause some problems right because if I try to pass if I try to define a function say a sort",
    "start": "811050",
    "end": "818730"
  },
  {
    "text": "and I have to specify the length of the array then that wouldn't be very generic function you know I don't want to write",
    "start": "818730",
    "end": "825000"
  },
  {
    "text": "a different source function for every possible length of an array so how you",
    "start": "825000",
    "end": "830339"
  },
  {
    "text": "deal with that well go have something called slices so that just it's a very",
    "start": "830339",
    "end": "839160"
  },
  {
    "text": "lightweight data structure that just points to some underlying array and defines as a starting point and an end",
    "start": "839160",
    "end": "845160"
  },
  {
    "text": "point so the way you would create a slice is just using the colon operators",
    "start": "845160",
    "end": "851070"
  },
  {
    "text": "to define the start and the end point for this slice and you can see in the orange bracket here that we don't",
    "start": "851070",
    "end": "857850"
  },
  {
    "text": "specify any length so length is not part of the type of a slice so this is kind",
    "start": "857850",
    "end": "863430"
  },
  {
    "text": "of how you deal with general functions in an go if I want to do a sort function",
    "start": "863430",
    "end": "869790"
  },
  {
    "text": "or a find function then I will typically have it accept some some slice a very",
    "start": "869790",
    "end": "878730"
  },
  {
    "start": "878000",
    "end": "878000"
  },
  {
    "text": "common thing then would be to create empty slices so a lot of time when you're programming go you're not really creating arrays directly but you're",
    "start": "878730",
    "end": "885089"
  },
  {
    "text": "you're creating slices but it'll be a little bit cumbersome to first creates",
    "start": "885089",
    "end": "890430"
  },
  {
    "text": "the array and then take an empty slice from that so we have a built-in function",
    "start": "890430",
    "end": "897210"
  },
  {
    "text": "calls make that will let you do that so the green is is the number of",
    "start": "897210",
    "end": "903839"
  },
  {
    "text": "elements you get and then in orange we have the capacity of the underlying array now this might make you think that",
    "start": "903839",
    "end": "912380"
  },
  {
    "text": "why should arrays be value types in the first place and that the type the length",
    "start": "912380",
    "end": "917430"
  },
  {
    "text": "should be part of the type well there are advantages to it so I'm going to try to show you that with this example so",
    "start": "917430",
    "end": "922470"
  },
  {
    "text": "imagine that we have one way of dealing with say array vectors that could",
    "start": "922470",
    "end": "927959"
  },
  {
    "text": "represent say points in space or a velocity in one particular direction you could do it like this with",
    "start": "927959",
    "end": "934859"
  },
  {
    "text": "a structure so it has an x and a y number and then we could set the",
    "start": "934859",
    "end": "941639"
  },
  {
    "text": "individual elements like this we're creating a V vector and a u vector here",
    "start": "941639",
    "end": "946649"
  },
  {
    "text": "in different ways and what we might want to be able to do operations like adding two vectors together now might be nice",
    "start": "946649",
    "end": "955229"
  },
  {
    "text": "to actually be able to iterate over these the components say it is X Y Z and so on and you want to be iterate over",
    "start": "955229",
    "end": "960809"
  },
  {
    "text": "them you can't really do that with a structure so there are some advantages to using an array for this so then we",
    "start": "960809",
    "end": "974759"
  },
  {
    "text": "would define the VN u like this you see is that the number of elements in the",
    "start": "974759",
    "end": "980549"
  },
  {
    "text": "array comes before the the element types and then we want to be able to do the",
    "start": "980549",
    "end": "986069"
  },
  {
    "text": "same thing as I showed you earlier so this is how we would implement that so now this will just be copied you can see",
    "start": "986069",
    "end": "994799"
  },
  {
    "text": "there there's some simplification and go where you the arguments have the same type you don't have to put it on the",
    "start": "994799",
    "end": "1001309"
  },
  {
    "text": "back behind each so that can save you some typing so the benefit of having the",
    "start": "1001309",
    "end": "1013459"
  },
  {
    "text": "lengthening prototype is if that I put the wrong index air for instance for then I would get a compilation error",
    "start": "1013459",
    "end": "1019609"
  },
  {
    "text": "because the compiler knows that there is nothing at the fifth element in this",
    "start": "1019609",
    "end": "1025279"
  },
  {
    "text": "array okay let's look at defining new",
    "start": "1025279",
    "end": "1033259"
  },
  {
    "start": "1031000",
    "end": "1031000"
  },
  {
    "text": "types so this probably look if you're familiar with C or C++ this looks",
    "start": "1033259",
    "end": "1039288"
  },
  {
    "text": "probably a little bit like a type def you're creating a Celsius and a Fahrenheit type based on a 64 bit",
    "start": "1039289",
    "end": "1045769"
  },
  {
    "text": "floating points that we typically double in in c-sharp or Java",
    "start": "1045769",
    "end": "1051669"
  },
  {
    "text": "now we assign some values to these in C",
    "start": "1051669",
    "end": "1056690"
  },
  {
    "text": "or C++ you could just add these together that we find but in go you will get a",
    "start": "1056690",
    "end": "1062419"
  },
  {
    "text": "compilation error though is very explicit with everything you don't have sort of automatic",
    "start": "1062419",
    "end": "1068220"
  },
  {
    "text": "conversion from one type to the other so if I'm adding a floating-point value and",
    "start": "1068220",
    "end": "1073830"
  },
  {
    "text": "an integer I'm not going to get a conversion I'm going to get a completion error and I have to explicitly do the",
    "start": "1073830",
    "end": "1078990"
  },
  {
    "text": "conversion so what we typically want to",
    "start": "1078990",
    "end": "1084570"
  },
  {
    "text": "happen is I want to be able to define say some Celsius degrees and then be",
    "start": "1084570",
    "end": "1092490"
  },
  {
    "text": "able to convert that to Fahrenheit when I need to so see here that I'm putting a",
    "start": "1092490",
    "end": "1097670"
  },
  {
    "text": "method on my body temperature variable and that's a cool thing in go you can",
    "start": "1097670",
    "end": "1104430"
  },
  {
    "text": "add methods to the primitive types so way you would do that is like this so",
    "start": "1104430",
    "end": "1112620"
  },
  {
    "text": "the way you can see that this is not just a regular function a free function but a method is this first the first",
    "start": "1112620",
    "end": "1122160"
  },
  {
    "text": "part here so we don't you have to be explicit about what we would normally",
    "start": "1122160",
    "end": "1128310"
  },
  {
    "text": "call it this or a self pointer in other languages so now you see methods I think",
    "start": "1128310",
    "end": "1136470"
  },
  {
    "text": "it's it's good to talk about object-oriented programming because that's quite different in go the",
    "start": "1136470",
    "end": "1144600"
  },
  {
    "text": "background for ghost take on object-oriented programming is that",
    "start": "1144600",
    "end": "1151040"
  },
  {
    "start": "1149000",
    "end": "1149000"
  },
  {
    "text": "inheritance hierarchies are problematic and I seen that a lot in the work that I",
    "start": "1151430",
    "end": "1157200"
  },
  {
    "text": "do with C++ it's the application I work on started back in the early 90s and I",
    "start": "1157200",
    "end": "1164190"
  },
  {
    "text": "think for a lot of applications back then they people thought that obviously oriented programming was a kind of",
    "start": "1164190",
    "end": "1169320"
  },
  {
    "text": "silver bullet so they tended to overuse it so what we see is often we have these",
    "start": "1169320",
    "end": "1175700"
  },
  {
    "text": "ten level deep inheritance hierarchies not very nice to try to make a modification in there or understand what",
    "start": "1175700",
    "end": "1184410"
  },
  {
    "text": "these different classes are and then",
    "start": "1184410",
    "end": "1190740"
  },
  {
    "text": "there's other minor annoyances like you override a function or a method and you",
    "start": "1190740",
    "end": "1196740"
  },
  {
    "text": "wonder am I chose to call super in here or so the Supra dot and the method right",
    "start": "1196740",
    "end": "1203430"
  },
  {
    "text": "and then you might wonder should I call in the beginning or the end and then",
    "start": "1203430",
    "end": "1209550"
  },
  {
    "text": "there's other things that I guess don't Papa's often but sometimes it happened to me which is when I change some member",
    "start": "1209550",
    "end": "1216590"
  },
  {
    "text": "function that's being called by another method which we call another method",
    "start": "1216590",
    "end": "1223350"
  },
  {
    "text": "initially is called by the constructor so I change that to a virtual method and",
    "start": "1223350",
    "end": "1229100"
  },
  {
    "text": "then it would blow up when you're running the constructor because you can't call a virtual method from a",
    "start": "1229100",
    "end": "1236550"
  },
  {
    "text": "constructor not even indirectly and you don't necessarily get a very nice error message from that another thing is I'm",
    "start": "1236550",
    "end": "1245310"
  },
  {
    "text": "not sure any of you heard about the fragile base class problem one person -",
    "start": "1245310",
    "end": "1253220"
  },
  {
    "text": "okay so the price a base class problem is two kind of theoretical criticism I",
    "start": "1253220",
    "end": "1260280"
  },
  {
    "text": "guess you could say about inheritance which is the ID and observing programming right we have these silos",
    "start": "1260280",
    "end": "1265950"
  },
  {
    "text": "you you can just work separately with your class and do whatever changes you",
    "start": "1265950",
    "end": "1271530"
  },
  {
    "text": "like and as long as you maintain the interface everything is supposed to be fine you can nothing's going to change",
    "start": "1271530",
    "end": "1276810"
  },
  {
    "text": "in how you interact with everybody else but when you're doing inheritance that kind of encapsulation or separation kind",
    "start": "1276810",
    "end": "1283530"
  },
  {
    "text": "of breaks down and I'm going to show you this example how that works let's",
    "start": "1283530",
    "end": "1289440"
  },
  {
    "start": "1287000",
    "end": "1287000"
  },
  {
    "text": "imagine that we have a bag class where we're just holding up a number of",
    "start": "1289440",
    "end": "1295110"
  },
  {
    "text": "integers so this is this is some Java code here and we're able to add another",
    "start": "1295110",
    "end": "1303210"
  },
  {
    "text": "integer check how many integers we added to the bag and a convenience function allows it to add all the integers in another bag now",
    "start": "1303210",
    "end": "1313140"
  },
  {
    "text": "this is of course a bit contrived example just to show you so we're creating this counting bag which is supposed to be a kind of optimization of",
    "start": "1313140",
    "end": "1320130"
  },
  {
    "text": "course a little bit pointless where every time we calling add were incrementing this n variable that is",
    "start": "1320130",
    "end": "1327360"
  },
  {
    "text": "supposed to optimize count because you can just return n and checking the the items of course",
    "start": "1327360",
    "end": "1333220"
  },
  {
    "text": "this will only matter if you're using prisons a linked list or something like that where you have to use linear time",
    "start": "1333220",
    "end": "1339160"
  },
  {
    "text": "to count the number of elements anyway we're going to focus on the add all",
    "start": "1339160",
    "end": "1346260"
  },
  {
    "text": "method so imagine there is a develop that comes along and he figures out oh it's very poor performance a call adds",
    "start": "1346260",
    "end": "1354450"
  },
  {
    "text": "indirectly on all these elements it's much higher performance for some reason",
    "start": "1354450",
    "end": "1359920"
  },
  {
    "text": "to just call add directly on the items",
    "start": "1359920",
    "end": "1365010"
  },
  {
    "text": "now what's going to happen you could do this change what happens is that you no",
    "start": "1365010",
    "end": "1371920"
  },
  {
    "text": "longer call the add that has been overridden in counting bag which means the N never gets updated so the counting",
    "start": "1371920",
    "end": "1380380"
  },
  {
    "text": "bank doesn't work anymore and that's not supposed to happen because if you consider bag the developed there has not",
    "start": "1380380",
    "end": "1387040"
  },
  {
    "text": "changed any of the external behavior if you ran this in a unit test all the external behavior would still be the same and the person that's created the",
    "start": "1387040",
    "end": "1394690"
  },
  {
    "text": "counting bag class did that occur didn't do anything",
    "start": "1394690",
    "end": "1401260"
  },
  {
    "text": "wrong with an involving the interface so these are kind of problems can happen",
    "start": "1401260",
    "end": "1406440"
  },
  {
    "text": "that kind of is not supposed to so it's",
    "start": "1406440",
    "end": "1412420"
  },
  {
    "text": "not with our reason that object-oriented programming people have sort of realized that there",
    "start": "1412420",
    "end": "1417880"
  },
  {
    "text": "are some problems with how we do it today so there was this um I read there",
    "start": "1417880",
    "end": "1424000"
  },
  {
    "text": "was this Q&A session with James Gosling so the creator of Java and they asked him if you could do Java over again what",
    "start": "1424000",
    "end": "1432100"
  },
  {
    "text": "would you change and it said I'll leave out classes so I'm not sure people took",
    "start": "1432100",
    "end": "1440140"
  },
  {
    "text": "baths entirely is serious but that's that's exactly what they have done in go",
    "start": "1440140",
    "end": "1445930"
  },
  {
    "text": "so there's no classes and there is no inheritance in go instead go focuses on",
    "start": "1445930",
    "end": "1452800"
  },
  {
    "text": "compositions or maybe what we call a mixin if you're using for instance Ruby",
    "start": "1452800",
    "end": "1459090"
  },
  {
    "text": "now you can do composition in pretty much any language of course the difference is that",
    "start": "1459090",
    "end": "1464410"
  },
  {
    "text": "go when it's added specific features to accommodate it more now you might wonder",
    "start": "1464410",
    "end": "1471130"
  },
  {
    "text": "well how are you going to do polymorphism if you don't have inheritance well you can define",
    "start": "1471130",
    "end": "1477700"
  },
  {
    "text": "interfaces that types can adhere to so that's still possible but they work a",
    "start": "1477700",
    "end": "1484690"
  },
  {
    "text": "little bit more like duck typing unless you're Rui familiar with the term duck typing yeah it's something that's",
    "start": "1484690",
    "end": "1493140"
  },
  {
    "text": "common for dynamic languages like Python and Ruby and basically idea is that you",
    "start": "1493140",
    "end": "1502390"
  },
  {
    "text": "don't care necessarily what you say the type is but more about what's the",
    "start": "1502390",
    "end": "1508600"
  },
  {
    "text": "behavior if it's if it quacks like a dock it walks like a duck then it's a duck is kind of the idea",
    "start": "1508600",
    "end": "1514320"
  },
  {
    "text": "so what go has is sort of like the static type checking version of this is which is called structural typing I'm",
    "start": "1514320",
    "end": "1521890"
  },
  {
    "text": "going to show you that in a moment how it works so let's just look at this example imagine maybe this is some",
    "start": "1521890",
    "end": "1531000"
  },
  {
    "text": "application for drawing application you",
    "start": "1531000",
    "end": "1536290"
  },
  {
    "text": "can draw different shapes and you want to check whether point is inside a shape so depending on what shape you're",
    "start": "1536290",
    "end": "1543220"
  },
  {
    "text": "checking there's going to be a different algorithm for checking whether a point is inside a circle compared to a rectangle so that's why we need some",
    "start": "1543220",
    "end": "1551440"
  },
  {
    "text": "kind of polymorphism to deal with this to pick the right algorithm at runtime so what we basically want to model is",
    "start": "1551440",
    "end": "1557410"
  },
  {
    "text": "some interface that I have here in yellow a shape that you can ask is this",
    "start": "1557410",
    "end": "1563680"
  },
  {
    "text": "point inside the shape and maybe some optimization opportunities like checking",
    "start": "1563680",
    "end": "1569320"
  },
  {
    "text": "for a bounding box so you can quickly look through all the shapes and in gray",
    "start": "1569320",
    "end": "1577210"
  },
  {
    "text": "we have some concrete cases a circle rectangle might have a polygon and so on",
    "start": "1577210",
    "end": "1582280"
  },
  {
    "text": "that would implement concrete algorithms for for checking inside on those particular shapes so if you are doing",
    "start": "1582280",
    "end": "1590200"
  },
  {
    "text": "this and say C sharp we probably do something like this to find an interface shape then",
    "start": "1590200",
    "end": "1597590"
  },
  {
    "start": "1591000",
    "end": "1591000"
  },
  {
    "text": "then we would inherit that and implement",
    "start": "1597590",
    "end": "1603169"
  },
  {
    "text": "the inside and bounding box and likewise",
    "start": "1603169",
    "end": "1608659"
  },
  {
    "text": "for a circle let's look at what they look like in and go so again we start",
    "start": "1608659",
    "end": "1614029"
  },
  {
    "text": "with with we type in the beginning and then instead of putting struct in the",
    "start": "1614029",
    "end": "1620299"
  },
  {
    "text": "end we're writing interface so we have to list up the methods that have to be",
    "start": "1620299",
    "end": "1627950"
  },
  {
    "text": "in this interface so this is a definition of the the rect structure so",
    "start": "1627950",
    "end": "1635750"
  },
  {
    "text": "you can notice one thing that I quite like about goal is that you don't put the methods inside the tight so I'm not",
    "start": "1635750",
    "end": "1643250"
  },
  {
    "text": "sure if you think about it what's the benefit of doing that well the benefit is that you can put your methods in",
    "start": "1643250",
    "end": "1650240"
  },
  {
    "text": "different files so if instead of putting a lot of code in one file you could spread it out and if you look at this",
    "start": "1650240",
    "end": "1659960"
  },
  {
    "text": "you might notice if you look at type that there's something that's miss seemingly missing and same if you look",
    "start": "1659960",
    "end": "1668059"
  },
  {
    "text": "at the circle you can see there's no mention of shape anywhere there and",
    "start": "1668059",
    "end": "1675950"
  },
  {
    "text": "that's what I talked about the duck typing or the the structure of the structural typing which is that in in go",
    "start": "1675950",
    "end": "1683510"
  },
  {
    "text": "you don't have to say that you're implementing an interface it's enough",
    "start": "1683510",
    "end": "1689929"
  },
  {
    "text": "that we have inside and bounding box which is the finance interface so if I was add some function that took a shape",
    "start": "1689929",
    "end": "1698210"
  },
  {
    "start": "1695000",
    "end": "1695000"
  },
  {
    "text": "as an arguments and check whether a point is inside then I could just create",
    "start": "1698210",
    "end": "1704240"
  },
  {
    "text": "a rectangle and I could pass that rectangle to this function mouse click and go within in codes check if this at",
    "start": "1704240",
    "end": "1714230"
  },
  {
    "text": "compile time check whether this type matches the interface defined on shape",
    "start": "1714230",
    "end": "1723520"
  },
  {
    "text": "so what's really nice about this is that you can you can get a third-party",
    "start": "1723520",
    "end": "1729080"
  },
  {
    "text": "library from someone that say you can't make changes to and maybe they haven't",
    "start": "1729080",
    "end": "1734630"
  },
  {
    "text": "thought about after interfaces for those types that could be useful to have but you can just define those after the",
    "start": "1734630",
    "end": "1740540"
  },
  {
    "text": "facts and go because you don't have to say that something implements interface so I can just add interfaces so if you",
    "start": "1740540",
    "end": "1748070"
  },
  {
    "text": "can gain me some code I can just add interfaces in a way to that code data",
    "start": "1748070",
    "end": "1754370"
  },
  {
    "start": "1754000",
    "end": "1754000"
  },
  {
    "text": "structures and go I think is quite versatility you can define this you just",
    "start": "1754370",
    "end": "1759650"
  },
  {
    "text": "saw a rectangle like this so you don't really use normally constructors and go",
    "start": "1759650",
    "end": "1765740"
  },
  {
    "text": "there actually there aren't any constructors in go and you can also use",
    "start": "1765740",
    "end": "1770990"
  },
  {
    "text": "a more verbose way of doing this where you're writing out all the members",
    "start": "1770990",
    "end": "1777940"
  },
  {
    "text": "I might wonder well that's the benefit of that well here's a cool thing if you",
    "start": "1778460",
    "end": "1783950"
  },
  {
    "text": "look at the JavaScript dictionary usage this is very similar so you can just like in JavaScript you can create some",
    "start": "1783950",
    "end": "1790640"
  },
  {
    "text": "very complex structure with a lot of sub structures in it and we can initialize",
    "start": "1790640",
    "end": "1797600"
  },
  {
    "text": "in very much the same way and you can change to order things and you could",
    "start": "1797600",
    "end": "1803330"
  },
  {
    "text": "have excluded say for instance the Y and go would have initialized that as 0 so",
    "start": "1803330",
    "end": "1810170"
  },
  {
    "text": "you get kind of the benefits of a dictionary in JavaScript but it's it's a",
    "start": "1810170",
    "end": "1816890"
  },
  {
    "text": "statically typed so I couldn't add elements that don't actually exist there",
    "start": "1816890",
    "end": "1822340"
  },
  {
    "text": "let's look at this alternative and go to inheritance so we're doing composition",
    "start": "1822340",
    "end": "1829790"
  },
  {
    "text": "in go when we kind of want to mimic what you often do with inheritance we use something called embedding so to show",
    "start": "1829790",
    "end": "1837620"
  },
  {
    "text": "you that I'm going to I'm going to do a slightly different rectangle than in",
    "start": "1837620",
    "end": "1842840"
  },
  {
    "text": "there earlier so say we have this point and size type and then we define a",
    "start": "1842840",
    "end": "1851030"
  },
  {
    "text": "rectangle like this so you can see a difference is that I didn't put any",
    "start": "1851030",
    "end": "1856070"
  },
  {
    "text": "variable name in front here I just put the type straight in there",
    "start": "1856070",
    "end": "1861450"
  },
  {
    "text": "and this is what's called embedding and what that allows me to do is if I create a rectangle like this then we just as",
    "start": "1861450",
    "end": "1872820"
  },
  {
    "text": "name of the variable you will just use the type name so it will be like this but the cool thing is that I can do like",
    "start": "1872820",
    "end": "1879840"
  },
  {
    "text": "this so basically the X and and the width in all these they become available",
    "start": "1879840",
    "end": "1885840"
  },
  {
    "text": "at the top level so it's kind of the same that you would I do if I was",
    "start": "1885840",
    "end": "1891080"
  },
  {
    "text": "inheriting size and point in a rectangle",
    "start": "1891080",
    "end": "1896870"
  },
  {
    "text": "so let me show you how the the bag example would work with embedding and",
    "start": "1896870",
    "end": "1902870"
  },
  {
    "start": "1899000",
    "end": "1899000"
  },
  {
    "text": "why you won't get into the fragile based class problem so we're defining the bag",
    "start": "1902870",
    "end": "1910019"
  },
  {
    "text": "has a slice of integer items and since go doesn't have constructors we have to",
    "start": "1910019",
    "end": "1916740"
  },
  {
    "text": "just create a regular function you can see that it returns a star bag so for if",
    "start": "1916740",
    "end": "1924630"
  },
  {
    "text": "you're not used to see your C++ programming that's returns a pointer to",
    "start": "1924630",
    "end": "1930059"
  },
  {
    "text": "a bag object so go does have pointers but it's not it's not in the bad way if",
    "start": "1930059",
    "end": "1935159"
  },
  {
    "text": "you will that it wasn't simple to us you can't do pointer arithmetic so you can't just point to arbitrary places in memory",
    "start": "1935159",
    "end": "1941630"
  },
  {
    "text": "and the the ampersand symbol that you",
    "start": "1941630",
    "end": "1947039"
  },
  {
    "text": "see in front here that takes the address of the object so that's what gives you a pointer yeah yeah yeah exactly so",
    "start": "1947039",
    "end": "1961889"
  },
  {
    "text": "imagine in this case we want to treat this as a kind of reference type I guess",
    "start": "1961889",
    "end": "1969500"
  },
  {
    "text": "now when when interesting thing airs you normally wouldn't necessarily relax a with the rectangle I didn't define any",
    "start": "1970039",
    "end": "1976019"
  },
  {
    "text": "special function for doing this but you can imagine is that you have a number of members in your struct that you have",
    "start": "1976019",
    "end": "1984000"
  },
  {
    "text": "some invariants that you want to maintain so that you don't want people to just arbitrarily set values there you",
    "start": "1984000",
    "end": "1989760"
  },
  {
    "text": "want to have something that creates it then what you do is when",
    "start": "1989760",
    "end": "1994980"
  },
  {
    "text": "in Ingo if something has a lowercase letter in the beginning its privates for that package so means if I use this from",
    "start": "1994980",
    "end": "2002330"
  },
  {
    "text": "another package I couldn't create an instance of it because it has elements which are",
    "start": "2002330",
    "end": "2010039"
  },
  {
    "text": "private so I would have to use a function that it's public so something that starts is capitalized like a new",
    "start": "2010039",
    "end": "2016580"
  },
  {
    "text": "bag to actually created so it's a kind of way you can also get the same benefits that a constructor has and then",
    "start": "2016580",
    "end": "2024380"
  },
  {
    "text": "we have add item we're using a built-in function called append that allows us to increase the size of a slice and there's",
    "start": "2024380",
    "end": "2034159"
  },
  {
    "text": "a built-in function Len that gives you the number of elements in a slice or in an array then we have this at all a",
    "start": "2034159",
    "end": "2043389"
  },
  {
    "text": "convenience function so in an go we can we can write a regular for loop that",
    "start": "2043389",
    "end": "2051349"
  },
  {
    "text": "you've probably seen in most of these c-like languages but we can also use the kind of Python ish thing where you set a",
    "start": "2051349",
    "end": "2057079"
  },
  {
    "text": "range and that gives you each element in that successively so let's say we create",
    "start": "2057079",
    "end": "2064849"
  },
  {
    "text": "the counting bag what we do is we embed a bag inside it and then we do I'm not",
    "start": "2064849",
    "end": "2073579"
  },
  {
    "text": "sure what the exact terminology would be I would call this is basically a shadowing of the add method because what",
    "start": "2073579",
    "end": "2079638"
  },
  {
    "text": "happens because we're doing embedding all the methods that exist on bag would be available at the top level but you",
    "start": "2079639",
    "end": "2086148"
  },
  {
    "text": "might want to change them so we can do this kind of shadowing it's not quite the same as overriding so we call add on",
    "start": "2086149",
    "end": "2097010"
  },
  {
    "text": "on bag you can see the first line there and then we update the end now we have our counting bag that or optimization",
    "start": "2097010",
    "end": "2106240"
  },
  {
    "text": "now if we look at the case where you do the optimization the problem is that no",
    "start": "2106930",
    "end": "2112700"
  },
  {
    "text": "one would ever do it that way and go because they would know that this at all",
    "start": "2112700",
    "end": "2122089"
  },
  {
    "text": "here can never call counting bags out because it's not an override",
    "start": "2122089",
    "end": "2128630"
  },
  {
    "text": "shadowing so the counting back can't change anything in the behavior in the",
    "start": "2128630",
    "end": "2134870"
  },
  {
    "text": "bag so anyone who would implement this would also shadow the a doll so you",
    "start": "2134870",
    "end": "2140720"
  },
  {
    "text": "never will put yourself in a situation where you can just randomly change something and break it I talked about",
    "start": "2140720",
    "end": "2151940"
  },
  {
    "text": "that go is good for large-scale software development one of the reasons for that is its compiled spouse so when talk",
    "start": "2151940",
    "end": "2161120"
  },
  {
    "text": "about why that is there's nothing that's been on my mind because the software I",
    "start": "2161120",
    "end": "2167120"
  },
  {
    "text": "work in has something like one hour compensation time and that's really bad for productivity of course we've gotten",
    "start": "2167120",
    "end": "2173780"
  },
  {
    "text": "better now so we can do more incremental bills but it's still something like it can be five minutes or so so go has been",
    "start": "2173780",
    "end": "2182780"
  },
  {
    "text": "designed specifically to to run saps and it seems like it's not necessarily always given with modeling's today to be",
    "start": "2182780",
    "end": "2189380"
  },
  {
    "text": "that from what I understand Scala is has ignore this is actually quite slow and I",
    "start": "2189380",
    "end": "2197290"
  },
  {
    "text": "guess for a C++ developers perspective I you know no one should ever forget that",
    "start": "2197290",
    "end": "2204430"
  },
  {
    "text": "another thing I I dislike with a lot of modern software developments I've been",
    "start": "2204730",
    "end": "2211640"
  },
  {
    "text": "an iOS developer for some years and also did some Android development and one of the things I noticed area is just to",
    "start": "2211640",
    "end": "2216740"
  },
  {
    "text": "build systems that go slow for C++ but also in the Java side of things can be",
    "start": "2216740",
    "end": "2222770"
  },
  {
    "text": "very complex you know I thought when I looked at the Java even thought am I",
    "start": "2222770",
    "end": "2228980"
  },
  {
    "text": "actually an XML programmer and it's quite a lot of XML that you have to deal",
    "start": "2228980",
    "end": "2234140"
  },
  {
    "text": "with goal is pretty neat in that you actually have no configuration files",
    "start": "2234140",
    "end": "2240310"
  },
  {
    "text": "goal just fetches your dependencies and and builds so you might wonder well",
    "start": "2240310",
    "end": "2247250"
  },
  {
    "text": "how's that possible whether they went done is that they thought about it in the language itself",
    "start": "2247250",
    "end": "2253570"
  },
  {
    "text": "so when you write in the source code import you write actually where it's located on the internet so because it's",
    "start": "2253570",
    "end": "2260480"
  },
  {
    "text": "built in a time where people were used to how living code on github bitbucket and so",
    "start": "2260480",
    "end": "2265730"
  },
  {
    "text": "on so you can just write the location in your source code to refer directly to",
    "start": "2265730",
    "end": "2271910"
  },
  {
    "text": "your repository now that gives us a problem with dealing with versioning so one of the ways that",
    "start": "2271910",
    "end": "2278840"
  },
  {
    "text": "they deal with that is kind of like I guess with the rest api so you put in the URL so you put say a v1 air to refer",
    "start": "2278840",
    "end": "2286250"
  },
  {
    "text": "to version one I know this isn't the perfect solution I haven't built big enough systems and go-to to really",
    "start": "2286250",
    "end": "2295400"
  },
  {
    "text": "encounter this as a problem for me but I know that it's something that some people complain a bit about so when you",
    "start": "2295400",
    "end": "2303290"
  },
  {
    "text": "want to build a go project just right go get and that will pull down it will look through the source code and pull down",
    "start": "2303290",
    "end": "2308630"
  },
  {
    "text": "all the dependencies and then just write go build and you're done so you know make files or ant or whatever to do this",
    "start": "2308630",
    "end": "2317590"
  },
  {
    "text": "another important thing for being able to build fast is dependency analysis so",
    "start": "2317590",
    "end": "2325910"
  },
  {
    "start": "2320000",
    "end": "2320000"
  },
  {
    "text": "in go if if we imagine see here is a package and go so that a package could",
    "start": "2325910",
    "end": "2332420"
  },
  {
    "text": "be a number of files that have in the beginning you write some a package name",
    "start": "2332420",
    "end": "2338770"
  },
  {
    "text": "if we compile this we would get a bunch of code in the binary file and then in",
    "start": "2338770",
    "end": "2345230"
  },
  {
    "text": "the header you would have the the exported types foo and bar because they",
    "start": "2345230",
    "end": "2350600"
  },
  {
    "text": "are capitalized they are public so they're going to be exported now imagine",
    "start": "2350600",
    "end": "2356690"
  },
  {
    "text": "that B depends on this so we have a new type spam that's using the foo and the",
    "start": "2356690",
    "end": "2364250"
  },
  {
    "text": "bar type if we compile this it's only",
    "start": "2364250",
    "end": "2369290"
  },
  {
    "text": "going to export spam and bar that's because well spam was defining B and bar",
    "start": "2369290",
    "end": "2377450"
  },
  {
    "text": "is the only type that's actually visible from spam because you can see the the",
    "start": "2377450",
    "end": "2382820"
  },
  {
    "text": "food type here that has an instance variable of ham that is private because",
    "start": "2382820",
    "end": "2387950"
  },
  {
    "text": "it's a lowercase letter in the beginning",
    "start": "2387950",
    "end": "2392079"
  },
  {
    "text": "so then when you're compiling a you don't have to know about this so if",
    "start": "2393460",
    "end": "2400630"
  },
  {
    "text": "you're compiling in C++ the problem there is if you're importing these headers say I'm compiling some a dot CPP",
    "start": "2400630",
    "end": "2409390"
  },
  {
    "text": "file and if I'm importing B then I'm",
    "start": "2409390",
    "end": "2414430"
  },
  {
    "text": "also end up importing the headers for C as well so you're importing the same files over and over and over again so",
    "start": "2414430",
    "end": "2421000"
  },
  {
    "text": "this is one of the reasons while C++ is very slow to compile is of course a lot",
    "start": "2421000",
    "end": "2427510"
  },
  {
    "text": "better in Java and I guess also in c-sharp but because you can have circular dependencies there you have to keep a lot of files in memory and that's",
    "start": "2427510",
    "end": "2434230"
  },
  {
    "text": "something that's illegal to do in and go you will actually get a compilation",
    "start": "2434230",
    "end": "2442150"
  },
  {
    "text": "error if you had a circular dependency something was it yeah you'll get an",
    "start": "2442150",
    "end": "2450160"
  },
  {
    "text": "error mrs. s import cycle not allowed and will tell you where the cycle is so",
    "start": "2450160",
    "end": "2458380"
  },
  {
    "text": "let's go to the next main topic which is performance so when I start with saying",
    "start": "2458380",
    "end": "2467290"
  },
  {
    "start": "2466000",
    "end": "2466000"
  },
  {
    "text": "why memory layout matters there was a project I'm not sure if that's still",
    "start": "2467290",
    "end": "2474760"
  },
  {
    "text": "around but it's called Jake it's which is implementing it in Java and what's",
    "start": "2474760",
    "end": "2480579"
  },
  {
    "text": "the develop when a developer Sara called Sean O'Hair's comment was that Jay gets",
    "start": "2480579",
    "end": "2487480"
  },
  {
    "text": "really struggled with performance because I didn't have an efficient way",
    "start": "2487480",
    "end": "2492970"
  },
  {
    "text": "of representing the sha-1 hash values these are just structs in NC that",
    "start": "2492970",
    "end": "2498369"
  },
  {
    "text": "contain a 20-byte character array and",
    "start": "2498369",
    "end": "2503520"
  },
  {
    "text": "this could just be made into one contiguous block of memory and see whereas in Java if you do that because",
    "start": "2503520",
    "end": "2509890"
  },
  {
    "text": "it's everything's references in Java you would have like pointing some different location in memory I'm going to show you",
    "start": "2509890",
    "end": "2516190"
  },
  {
    "text": "what we mean by that so this is the",
    "start": "2516190",
    "end": "2521920"
  },
  {
    "start": "2519000",
    "end": "2519000"
  },
  {
    "text": "overheads that's imposed by classes if I define this type points in Java",
    "start": "2521920",
    "end": "2528890"
  },
  {
    "text": "with an x and a y so you see the green is what you actually is interested in",
    "start": "2528890",
    "end": "2534050"
  },
  {
    "text": "the X and the y so that's we got four bytes for each of these and then on the",
    "start": "2534050",
    "end": "2540860"
  },
  {
    "text": "top here we have mark which is used by the garbage collector and classism where it's storing what the",
    "start": "2540860",
    "end": "2549760"
  },
  {
    "text": "the type information about points and then we have this four bytes or ages",
    "start": "2549760",
    "end": "2555950"
  },
  {
    "text": "wasted to gets alignment in memory if",
    "start": "2555950",
    "end": "2561980"
  },
  {
    "text": "you contrast this would go go only has going to use only eight bytes of memory where Java is going to use 20 bytes",
    "start": "2561980",
    "end": "2568580"
  },
  {
    "text": "member in this case because in go you can't have any inheritance that means",
    "start": "2568580",
    "end": "2574250"
  },
  {
    "text": "there is no point in keeping track of what the type is you know what the type",
    "start": "2574250",
    "end": "2580190"
  },
  {
    "text": "is and yeah this gets worse if you get",
    "start": "2580190",
    "end": "2591800"
  },
  {
    "text": "more complex structures so if I define a rectangle that contains two points you",
    "start": "2591800",
    "end": "2597710"
  },
  {
    "text": "will end up with this situation Java so you're getting this leaves area three",
    "start": "2597710",
    "end": "2603710"
  },
  {
    "text": "times over whereas ingo you will just get one",
    "start": "2603710",
    "end": "2609470"
  },
  {
    "text": "contiguous block of memory this gets even worse if you're looking at a race",
    "start": "2609470",
    "end": "2617710"
  },
  {
    "text": "so we have an array of the three three",
    "start": "2617710",
    "end": "2622790"
  },
  {
    "text": "elements here three points and then each one will just point to different places in memory right so going to be spread",
    "start": "2622790",
    "end": "2629780"
  },
  {
    "text": "out whereas in go if you create three",
    "start": "2629780",
    "end": "2637310"
  },
  {
    "text": "points it's just going to be a contiguous memory like that why does that matter well we can look at what",
    "start": "2637310",
    "end": "2643760"
  },
  {
    "start": "2643000",
    "end": "2643000"
  },
  {
    "text": "happens with the CPU and the cache if we're having fragmented memories so on the top here we got five elements that",
    "start": "2643760",
    "end": "2651890"
  },
  {
    "text": "we want to read and then I just simplify this a little bit like a toy caste we",
    "start": "2651890",
    "end": "2657440"
  },
  {
    "text": "have these various slots in the - and not sure if you know how the CPU",
    "start": "2657440",
    "end": "2663980"
  },
  {
    "text": "works but when you're reading an individual bytes of memory you want to get a bytes you never actually read just",
    "start": "2663980",
    "end": "2669980"
  },
  {
    "text": "the one byte you're always reading a whole cache line that can be something like 64 bytes at a time and that's what",
    "start": "2669980",
    "end": "2676160"
  },
  {
    "text": "goes into one of the slots in the cache so if we if we're trying to read these",
    "start": "2676160",
    "end": "2681950"
  },
  {
    "text": "five elements and then we do we get one cache miss to get these first two elements and another cache miss to get",
    "start": "2681950",
    "end": "2690410"
  },
  {
    "text": "the third one then we continue like this - so we get three cache misses sorry you",
    "start": "2690410",
    "end": "2700190"
  },
  {
    "text": "get four cache misses whereas when we got contiguous memory we get one and two",
    "start": "2700190",
    "end": "2706520"
  },
  {
    "text": "cache misses now this matters a lot because memory is so slow that in the period we get a",
    "start": "2706520",
    "end": "2713810"
  },
  {
    "text": "cache miss we could execute something like a thousand instructions so there's",
    "start": "2713810",
    "end": "2722060"
  },
  {
    "text": "not much point in you know optimizing your your algorithms or multi-core or",
    "start": "2722060",
    "end": "2727849"
  },
  {
    "text": "whatever if your memory access pattern is awful there's going to be slow anyway so just",
    "start": "2727849",
    "end": "2736130"
  },
  {
    "text": "in short really what this means is that data should be aligned with the cache",
    "start": "2736130",
    "end": "2741560"
  },
  {
    "text": "lines because if it's not aligned right you would have to read to two cache",
    "start": "2741560",
    "end": "2747260"
  },
  {
    "text": "lines and you should avoid getting fragmented memory and I didn't really",
    "start": "2747260",
    "end": "2754820"
  },
  {
    "text": "touch upon that but generally speaking you should have memory that's used together it should be our data is used",
    "start": "2754820",
    "end": "2761030"
  },
  {
    "text": "together should be close in memory so for instance if I have rectangle you don't want the lower the point to find",
    "start": "2761030",
    "end": "2769040"
  },
  {
    "text": "lower corner in some area of memory and the one and the upper corner another memory because you're typically going to use both of these at the same time now",
    "start": "2769040",
    "end": "2779270"
  },
  {
    "text": "you see that you could embed stuff in in go so might wonder ooh and I saw that I had a pointers you might wonder well why",
    "start": "2779270",
    "end": "2785540"
  },
  {
    "text": "do we need pointers at all if it's so great to just create these contiguous blocks of memory",
    "start": "2785540",
    "end": "2791560"
  },
  {
    "text": "so the obvious need is for recursive data structures like a tree or a linked",
    "start": "2791560",
    "end": "2799030"
  },
  {
    "text": "list so the way we would define these in an NGO is like this we have a we have",
    "start": "2799030",
    "end": "2809230"
  },
  {
    "text": "the the value and then we have left and right and then we put the star there",
    "start": "2809230",
    "end": "2814870"
  },
  {
    "text": "that indicates that this is a pointer and likewise with a linked list so this",
    "start": "2814870",
    "end": "2823090"
  },
  {
    "text": "is how pointers work the star is used for what we call dereferencing so usable",
    "start": "2823090",
    "end": "2829030"
  },
  {
    "text": "that indicates something is a pointer but when we're using it in encode we are",
    "start": "2829030",
    "end": "2834510"
  },
  {
    "text": "using a presenter called dereferencing and the ampersand is used for taking the address of an object so let's just look",
    "start": "2834510",
    "end": "2841390"
  },
  {
    "text": "at how that works Sarah I'm putting a number in V and I",
    "start": "2841390",
    "end": "2850780"
  },
  {
    "text": "want p2 to point to this V so I'm using",
    "start": "2850780",
    "end": "2859810"
  },
  {
    "text": "the the start to say that P is a pointer and then I'll use the ampersand to get",
    "start": "2859810",
    "end": "2868060"
  },
  {
    "text": "the address and then put that into the pointer so if I want to change the the",
    "start": "2868060",
    "end": "2873820"
  },
  {
    "text": "thing that's being pointed to by P we have to put a star because otherwise we just change the address so this is it's",
    "start": "2873820",
    "end": "2879940"
  },
  {
    "text": "going to change the value of v2 to so a",
    "start": "2879940",
    "end": "2885940"
  },
  {
    "text": "bit more practical example here if we have a linked list and we want to link together all the elements in the linked",
    "start": "2885940",
    "end": "2891400"
  },
  {
    "text": "list then we can define the elements and then we just to take the next pointer to",
    "start": "2891400",
    "end": "2899230"
  },
  {
    "text": "a we take the address of B and then the address of C to put that on on B's next",
    "start": "2899230",
    "end": "2907590"
  },
  {
    "text": "so one thing that's nice with the ability to use pointers and and the fine",
    "start": "2909650",
    "end": "2918710"
  },
  {
    "text": "structures in memory and control the memory layouts that you can do in go is",
    "start": "2918710",
    "end": "2924890"
  },
  {
    "text": "that we can create what we call secondary memory alligators so even though go is a garbage-collected",
    "start": "2924890",
    "end": "2931539"
  },
  {
    "text": "language just like java unlike Java in house you have the ability to create",
    "start": "2931539",
    "end": "2937309"
  },
  {
    "text": "alligators that are a little bit like what you could accomplish in C and C++ so I'm going to show you something",
    "start": "2937309",
    "end": "2943369"
  },
  {
    "text": "that's called an arena alligator that could be useful for say binary tree",
    "start": "2943369",
    "end": "2949460"
  },
  {
    "start": "2946000",
    "end": "2946000"
  },
  {
    "text": "where you know that every element is of the same size it could be useful because for a binary tree you could create a lot",
    "start": "2949460",
    "end": "2957259"
  },
  {
    "text": "of elements and they get scattered around a memory you might want to control where they're located in memory and you want to do the since you know",
    "start": "2957259",
    "end": "2964039"
  },
  {
    "text": "that they're all the same size and potentially you could do the allocation very fast",
    "start": "2964039",
    "end": "2970568"
  },
  {
    "text": "so here's an example how that would work you would start by allocating some chunk of memory and then you would take that",
    "start": "2971470",
    "end": "2978859"
  },
  {
    "text": "chunk and have each elements point to the next you create what we call a free list which is what we're using when",
    "start": "2978859",
    "end": "2984680"
  },
  {
    "text": "we're figuring out which element can we take from our memory allocator and use when we're building up our tree so we'll",
    "start": "2984680",
    "end": "2993140"
  },
  {
    "text": "just always the way it works is you take from the top you take in elements so we allocate their roots node then we take",
    "start": "2993140",
    "end": "3000489"
  },
  {
    "text": "the next element from the top so we just",
    "start": "3000489",
    "end": "3007390"
  },
  {
    "text": "continue like this",
    "start": "3007390",
    "end": "3010018"
  },
  {
    "text": "now with none we used up all the memory so then the arena alligator would have to get a new chunk of memory now we can",
    "start": "3015550",
    "end": "3024760"
  },
  {
    "text": "start and we have to create the new free list and we can start pulling off that free lists I might want to wonder what",
    "start": "3024760",
    "end": "3031960"
  },
  {
    "text": "happens if we remove an element so I'll say we remove the three well then that will go back into the free list again so",
    "start": "3031960",
    "end": "3039430"
  },
  {
    "text": "on next allocation that will be the one that's pulled off so the way we would",
    "start": "3039430",
    "end": "3048610"
  },
  {
    "text": "implement this we start with a function definition undefined here some values to",
    "start": "3048610",
    "end": "3056800"
  },
  {
    "text": "initialize a note and then so this is",
    "start": "3056800",
    "end": "3062830"
  },
  {
    "text": "the the arena that were allocating from and then we're getting a tree node returned defined here the how the type",
    "start": "3062830",
    "end": "3072040"
  },
  {
    "text": "looks so we have the head which defines the the head of our free list so when we",
    "start": "3072040",
    "end": "3079330"
  },
  {
    "text": "go into this function the first thing with check is is the head empty is it nil it is empty well we have to",
    "start": "3079330",
    "end": "3085540"
  },
  {
    "text": "allocate a chunk of memory I said so weezing make to create a slice with the",
    "start": "3085540",
    "end": "3093010"
  },
  {
    "text": "underline array of three elements and then we iterate through this array and",
    "start": "3093010",
    "end": "3102460"
  },
  {
    "text": "set the next pointers so we get our free",
    "start": "3102460",
    "end": "3109180"
  },
  {
    "text": "list so you can see there you see the ampersand so you I get the address of",
    "start": "3109180",
    "end": "3115000"
  },
  {
    "text": "this one becomes it set on the left and then when we're done I'm done with that",
    "start": "3115000",
    "end": "3121270"
  },
  {
    "text": "we set the first note to be the head node so regardless whether you have to",
    "start": "3121270",
    "end": "3129520"
  },
  {
    "text": "whether head there's nil or not the next thing you would do is we just take the element from the top right from the top",
    "start": "3129520",
    "end": "3136270"
  },
  {
    "text": "of the free list and then you would set",
    "start": "3136270",
    "end": "3142170"
  },
  {
    "text": "you would set this this head to point to the the next number to here so we're",
    "start": "3142170",
    "end": "3148570"
  },
  {
    "text": "doing there and then finally would initialize our node so let me summarize what we gone",
    "start": "3148570",
    "end": "3159800"
  },
  {
    "text": "through the whole idea of go is we're choosing simple over easy so we're not",
    "start": "3159800",
    "end": "3166760"
  },
  {
    "text": "necessarily making the most compact expressive language but we're trying to make it very explicit and and simple to",
    "start": "3166760",
    "end": "3173300"
  },
  {
    "text": "use so people can learn it quickly and you don't have a lot of gotchas or magic that can trick you over I really noticed",
    "start": "3173300",
    "end": "3180470"
  },
  {
    "text": "this I was on a Ruby on Rails project and it's I knew from before that it's",
    "start": "3180470",
    "end": "3186680"
  },
  {
    "text": "really fun to write Ruby on Rails it's so fast to write Ruby code but I noticed I didn't try being on the other side and",
    "start": "3186680",
    "end": "3194000"
  },
  {
    "text": "jumping into a project I don't noticed that all this magic going on in Ruby was pretty awful for reading the code and",
    "start": "3194000",
    "end": "3200390"
  },
  {
    "text": "that really made me appreciate that and go it's it's very explicit so the ghost",
    "start": "3200390",
    "end": "3209990"
  },
  {
    "text": "standard library I think is some of the easiest code that I encountered to just read through so even though when I did",
    "start": "3209990",
    "end": "3215839"
  },
  {
    "text": "iOS development and I wanted to find out how for instance something of HTTP",
    "start": "3215839",
    "end": "3221180"
  },
  {
    "text": "protocol worked I would typically prefer to look at the go code action the standard library to see how it work",
    "start": "3221180",
    "end": "3227089"
  },
  {
    "text": "because I thought that was easy to read and another thing is that a language",
    "start": "3227089",
    "end": "3236060"
  },
  {
    "text": "like Java has a lot more efficient garbage collector than go so they kind",
    "start": "3236060",
    "end": "3241849"
  },
  {
    "text": "of just chosen a sort of middle ground between manual memory management and garbage collection but they have a less",
    "start": "3241849",
    "end": "3247670"
  },
  {
    "text": "efficient garbage collector but they give you a lot more ability to control",
    "start": "3247670",
    "end": "3252920"
  },
  {
    "text": "your memory access patterns and potentially make your own secondary alligator's okay so do any of you have",
    "start": "3252920",
    "end": "3265609"
  },
  {
    "text": "any questions I'm not sure if this are there anything you want to revisit that wasn't clear about how go works yeah",
    "start": "3265609",
    "end": "3277540"
  },
  {
    "text": "to work in this one you don't have generic yes so my experience is it's",
    "start": "3279579",
    "end": "3284799"
  },
  {
    "text": "something that's typically brought up by people who don't program go it's a very common complaint about go and I think",
    "start": "3284799",
    "end": "3292749"
  },
  {
    "text": "that it definitely is a - I mean I I",
    "start": "3292749",
    "end": "3298589"
  },
  {
    "text": "think generics is quite nice - how often it's but I don't think it's nearly as bad as people make it out to because I",
    "start": "3298589",
    "end": "3306009"
  },
  {
    "text": "think you will see that when you use go that the way the language works makes it",
    "start": "3306009",
    "end": "3311380"
  },
  {
    "text": "much less of a problem there are some example code that people show how you can create kind of generic things and",
    "start": "3311380",
    "end": "3317759"
  },
  {
    "text": "the language features make is a little bit easier to avoid the same amount of",
    "start": "3317759",
    "end": "3323170"
  },
  {
    "text": "boilerplate that I would get say if I was doing the same thing in C programming language for instance so",
    "start": "3323170",
    "end": "3330339"
  },
  {
    "text": "although it sounds like it's going to be a lot of repetitive coding and annoying I I must say that in a lot of ways I",
    "start": "3330339",
    "end": "3336430"
  },
  {
    "text": "found go programming more fun than say Swift coding which I quite liked Swift",
    "start": "3336430",
    "end": "3344019"
  },
  {
    "text": "but even though Swift has all those features that go was supposed to have kind of you know it doesn't have nil",
    "start": "3344019",
    "end": "3349089"
  },
  {
    "text": "pointers have generics a lot of much more kind of meta programming it's also",
    "start": "3349089",
    "end": "3354640"
  },
  {
    "text": "feels a lot more constrained and strict ago it's very very pragmatic language I think yeah any other questions is",
    "start": "3354640",
    "end": "3370180"
  },
  {
    "text": "anything he wants me to revisit that",
    "start": "3370180",
    "end": "3374009"
  },
  {
    "text": "yeah so that could be one issue so as I showed see if I can go back to as you",
    "start": "3379140",
    "end": "3395559"
  },
  {
    "start": "3391000",
    "end": "3391000"
  },
  {
    "text": "see",
    "start": "3395559",
    "end": "3397829"
  },
  {
    "text": "you see they here the one weighs just creating I guess a different repository",
    "start": "3402670",
    "end": "3407980"
  },
  {
    "text": "and just put the version number there in a way so you just have that as maintain",
    "start": "3407980",
    "end": "3413350"
  },
  {
    "text": "that at a different version I know that it's something people complain about and",
    "start": "3413350",
    "end": "3420640"
  },
  {
    "text": "go but it's it's possible to do it yeah",
    "start": "3420640",
    "end": "3428609"
  },
  {
    "text": "to download one specific version yeah",
    "start": "3434130",
    "end": "3442210"
  },
  {
    "text": "you could you could set up everything kind of manual I mean there's nothing really that prevents you from say",
    "start": "3442210",
    "end": "3447280"
  },
  {
    "text": "creating a make file and just specify where you should get everything so you",
    "start": "3447280",
    "end": "3454330"
  },
  {
    "text": "could yeah I mean I could this path could be somewhere locally on the file system so it's kind of up to you if you",
    "start": "3454330",
    "end": "3461980"
  },
  {
    "text": "want to do it in a different way yeah",
    "start": "3461980",
    "end": "3470910"
  },
  {
    "text": "so this is kind of outside of my era expertise I think that maybe when you I",
    "start": "3487490",
    "end": "3496350"
  },
  {
    "text": "think if I remember correctly when you're building you might specify something some information about that in",
    "start": "3496350",
    "end": "3502080"
  },
  {
    "text": "flags but I know for instance if I",
    "start": "3502080",
    "end": "3508320"
  },
  {
    "text": "compare it to to objective-c or iOS development where you can rely more on",
    "start": "3508320",
    "end": "3514260"
  },
  {
    "text": "some scheduling in the kernel I don't believe you can do anything like that",
    "start": "3514260",
    "end": "3519960"
  },
  {
    "text": "and go the jack you would have to look",
    "start": "3519960",
    "end": "3524970"
  },
  {
    "text": "that up it's not really something I know that much about yeah anything else",
    "start": "3524970",
    "end": "3535490"
  },
  {
    "text": "yeah so one thing that I thought was really cool I haven't tried it a lot is a kind of very generic refactoring tool",
    "start": "3546040",
    "end": "3555500"
  },
  {
    "text": "so you know how you can specify regular expressions so this is kind of lets you",
    "start": "3555500",
    "end": "3562880"
  },
  {
    "text": "specify kind of grammar and go and then a replacement pattern so you can have",
    "start": "3562880",
    "end": "3569240"
  },
  {
    "text": "kind of like a command line tool that you can do a kind of primitive refactoring woods they also have yeah",
    "start": "3569240",
    "end": "3579500"
  },
  {
    "text": "you want you wondered about generics there there are some opportunities and",
    "start": "3579500",
    "end": "3586280"
  },
  {
    "text": "go some tools and some integration would go where you can generate you can",
    "start": "3586280",
    "end": "3593270"
  },
  {
    "text": "generate code so you could have a kind of a code template if you wanted to mimic something like generics yeah oh",
    "start": "3593270",
    "end": "3605080"
  },
  {
    "text": "I'm I'm one of the holdouts on on Mac on textmate but you know it is not so",
    "start": "3609670",
    "end": "3620090"
  },
  {
    "text": "updated now so the last thing I tried was Adam which I think was that's quite good tool sir so you gets well both in",
    "start": "3620090",
    "end": "3628820"
  },
  {
    "text": "text mates and an Adam you can install things that gives you command completion but then Adam you had more things you",
    "start": "3628820",
    "end": "3635720"
  },
  {
    "text": "can jump to a definition as you're typing you can see the arguments that",
    "start": "3635720",
    "end": "3641150"
  },
  {
    "text": "you need and so on",
    "start": "3641150",
    "end": "3644079"
  },
  {
    "text": "I think I try that way back but I think",
    "start": "3648730",
    "end": "3654099"
  },
  {
    "text": "that's probably a lot better than any of those a few I'm a little bit anti IDs I guess you know when I kind of likely",
    "start": "3654099",
    "end": "3661030"
  },
  {
    "text": "would go that I didn't have to use it otherwise I'm usually stuck with an ID if I'm doing iOS development is no way",
    "start": "3661030",
    "end": "3666820"
  },
  {
    "text": "of doing that without an ID yeah anybody",
    "start": "3666820",
    "end": "3676750"
  },
  {
    "text": "else okay well thanks for coming",
    "start": "3676750",
    "end": "3686710"
  },
  {
    "text": "[Applause]",
    "start": "3686710",
    "end": "3692139"
  }
]