[
  {
    "text": "my name is Nikolai Azotus I want to talk about sea path of 17 on reason I talk",
    "start": "1160",
    "end": "7729"
  },
  {
    "text": "about it oh I think it's a little bit of a feedback loop if you lower the audio a",
    "start": "7729",
    "end": "14240"
  },
  {
    "text": "little bit just to be here thank you so",
    "start": "14240",
    "end": "20140"
  },
  {
    "text": "that's before we start I'm curious who thinks he under he/she on the ETA and",
    "start": "20140",
    "end": "28369"
  },
  {
    "text": "he's the underworld hi out there who thinks that you have understand",
    "start": "28369",
    "end": "37300"
  },
  {
    "text": "understood everything in C++ nobody okay",
    "start": "37300",
    "end": "43420"
  },
  {
    "text": "who has a recent clue about C++ okay let",
    "start": "43420",
    "end": "48859"
  },
  {
    "text": "me do it phrase of question differently whose programming in C++ oh they they",
    "start": "48859",
    "end": "54229"
  },
  {
    "text": "raise all the hands so that it okay that says something and I'm in the same",
    "start": "54229",
    "end": "60799"
  },
  {
    "text": "position the only advantage I have I'm standardizing see that's what I'm hoping",
    "start": "60799",
    "end": "66530"
  },
  {
    "text": "to standard I see pass us for 20 years now and I think I have you might have",
    "start": "66530",
    "end": "73039"
  },
  {
    "text": "seen my books can you reduce it a little bit I think it's long enough okay thank",
    "start": "73039",
    "end": "79549"
  },
  {
    "text": "you so you might have seen my books and what else should I say about me I'm",
    "start": "79549",
    "end": "85159"
  },
  {
    "text": "self-employed and maybe I'm one of the few application developers in the",
    "start": "85159",
    "end": "91579"
  },
  {
    "text": "community but that's probably not a fair statement but to some extent our problem",
    "start": "91579",
    "end": "98270"
  },
  {
    "text": "we have right now is that we are far too many experts experienced C++ programmers",
    "start": "98270",
    "end": "105140"
  },
  {
    "text": "and sometimes we we are surprised how people use our stuff and how a few",
    "start": "105140",
    "end": "112700"
  },
  {
    "text": "things they know and so I want to try to present you C++ 17 here and we start",
    "start": "112700",
    "end": "121700"
  },
  {
    "text": "with its to talks the first talk is about the language features and then after the the lunch arm there will be a",
    "start": "121700",
    "end": "128810"
  },
  {
    "text": "talk about the library features and I will focus not on the details but on the ideas",
    "start": "128810",
    "end": "135069"
  },
  {
    "text": "and how to use the idea so application programmers view that's it okay let me",
    "start": "135069",
    "end": "141280"
  },
  {
    "text": "tell you a little bit about C++ as a general version and simples of 17 as a",
    "start": "141280",
    "end": "148239"
  },
  {
    "text": "general version after C++ 11 we went to a three-year schedule so every three",
    "start": "148239",
    "end": "154719"
  },
  {
    "text": "years we want to have a new standard out and it's a time box approach that means",
    "start": "154719",
    "end": "160930"
  },
  {
    "text": "whatever fits in see before 17 is ready to be delivered we ship it which by the",
    "start": "160930",
    "end": "169510"
  },
  {
    "text": "way cost some reaction because a lot of things were expected in C++ 17 that",
    "start": "169510",
    "end": "175750"
  },
  {
    "text": "didn't make it so I think so some people",
    "start": "175750",
    "end": "181209"
  },
  {
    "text": "are really asking is certainly the sequel for 17 worth it but as you will",
    "start": "181209",
    "end": "187000"
  },
  {
    "text": "see I would I would say this is a medium",
    "start": "187000",
    "end": "192010"
  },
  {
    "text": "new release and the medium means that we got a lot of lot of minor features which",
    "start": "192010",
    "end": "199689"
  },
  {
    "text": "you have problems to talk about in a whole day and so this is definitely more",
    "start": "199689",
    "end": "205000"
  },
  {
    "text": "than three buses 14 and as I said I would cover the most important things of",
    "start": "205000",
    "end": "211030"
  },
  {
    "text": "it so first of all let me also talk about support the good news is that C++",
    "start": "211030",
    "end": "218319"
  },
  {
    "text": "17 will be supported or is supported already in major compilers so GCC C / AG",
    "start": "218319",
    "end": "226209"
  },
  {
    "text": "+ + 7.1 is released four weeks ago I think they support all",
    "start": "226209",
    "end": "231489"
  },
  {
    "text": "core features and many of the library features we have claimed for which",
    "start": "231489",
    "end": "236560"
  },
  {
    "text": "supports most of the core features are even earlier version support some of",
    "start": "236560",
    "end": "242079"
  },
  {
    "text": "them and Visual Studio 17 also supports",
    "start": "242079",
    "end": "247239"
  },
  {
    "text": "some of the language features but they will have updates this year supporting most of all of the features so at the",
    "start": "247239",
    "end": "254739"
  },
  {
    "text": "end of people 417 I think three major compilers will more less support signals",
    "start": "254739",
    "end": "259900"
  },
  {
    "text": "are 17 completely and that's good news so that you can use it um yeah let me skip that so let's start",
    "start": "259900",
    "end": "270460"
  },
  {
    "text": "with the language features in one feature of the other the first feature I",
    "start": "270460",
    "end": "277719"
  },
  {
    "text": "want to introduce is structural bindings you see here an example the idea is that",
    "start": "277719",
    "end": "283569"
  },
  {
    "text": "instead of in initializing one object which has multiple elements you can",
    "start": "283569",
    "end": "291539"
  },
  {
    "text": "initialize multiple objects which",
    "start": "291539",
    "end": "296669"
  },
  {
    "text": "represent the elements so you see here that I have a structure taking an",
    "start": "296669",
    "end": "302949"
  },
  {
    "text": "integer and a double and if I assign this structure to an auto u v then use",
    "start": "302949",
    "end": "310419"
  },
  {
    "text": "and V we are representing the members of Destruction what is behind the scenes",
    "start": "310419",
    "end": "318210"
  },
  {
    "text": "here the reality is that this declaration creates a new object so you",
    "start": "318210",
    "end": "324159"
  },
  {
    "text": "copy ms2 a new object and U and V are just names for I and B so the elements in the",
    "start": "324159",
    "end": "332259"
  },
  {
    "text": "new object so and all routes follow from them that so there's a hidden object but",
    "start": "332259",
    "end": "338379"
  },
  {
    "text": "you can't access directly but you can access all the elements in this object",
    "start": "338379",
    "end": "345310"
  },
  {
    "text": "and that works for structures so especially if functional returns of",
    "start": "345310",
    "end": "352990"
  },
  {
    "text": "structure you can directly assign these return to members of the structure to",
    "start": "352990",
    "end": "359439"
  },
  {
    "text": "different names and it's an error if the number of elements or members doesn't fit you can return an array and can",
    "start": "359439",
    "end": "367810"
  },
  {
    "text": "assign the array elements to names to a new object which is a name with a name",
    "start": "367810",
    "end": "374080"
  },
  {
    "text": "and then you can also use it for any object that has a get interface which",
    "start": "374080",
    "end": "379810"
  },
  {
    "text": "this was introduced with tupple and which for example also applies to STD array so if you have an LCD array of",
    "start": "379810",
    "end": "387039"
  },
  {
    "text": "forints returned by a function you can directly assign it to the names ijk and L which",
    "start": "387039",
    "end": "396430"
  },
  {
    "text": "is you return you area it's a copy and then ijk and L",
    "start": "396430",
    "end": "401979"
  },
  {
    "text": "are names for the four elements in the array you can also use this with tuples",
    "start": "401979",
    "end": "408279"
  },
  {
    "text": "so then you even have an heterogeneous result heterogeneous assigning to a B",
    "start": "408279",
    "end": "414550"
  },
  {
    "text": "and C a character flow than an SC D string that helps in a in a surprising",
    "start": "414550",
    "end": "422379"
  },
  {
    "text": "amount of of code here's a simple example if you have a map of string and double and you want to iterate over it",
    "start": "422379",
    "end": "429999"
  },
  {
    "text": "as you probably know if you iterate you iterate over a pair and the element of",
    "start": "429999",
    "end": "436180"
  },
  {
    "text": "the pair are named first and second but this way here you can do things",
    "start": "436180",
    "end": "441699"
  },
  {
    "text": "differently you can declare a cons out arrest this time so that we don't create",
    "start": "441699",
    "end": "447699"
  },
  {
    "text": "a new copy but that we just have a new object with this which is a reference of the element and then directly say that",
    "start": "447699",
    "end": "455020"
  },
  {
    "text": "key and well represent the two elements in the pair so instead of using first",
    "start": "455020",
    "end": "460419"
  },
  {
    "text": "and second you can directly use key and value value which makes the code far",
    "start": "460419",
    "end": "466330"
  },
  {
    "text": "more readable and the same is of course tool if you want to for example iterate over the elements and modify the values",
    "start": "466330",
    "end": "472930"
  },
  {
    "text": "in the map so next feature we were so",
    "start": "472930",
    "end": "480819"
  },
  {
    "text": "surprisingly happy with the new for loop the range base for loop that we decided",
    "start": "480819",
    "end": "486669"
  },
  {
    "text": "to extend the other control structures we have so now we have initializations",
    "start": "486669",
    "end": "493419"
  },
  {
    "text": "for s and switch so if in switch no longer only take a condition they",
    "start": "493419",
    "end": "498699"
  },
  {
    "text": "optionally take taken initialization and here you see some examples that work",
    "start": "498699",
    "end": "505240"
  },
  {
    "text": "with that if you have a track like s is as successful or not you can directly",
    "start": "505240",
    "end": "512529"
  },
  {
    "text": "transfer this to one struct one statement by saying if status s equals",
    "start": "512529",
    "end": "518469"
  },
  {
    "text": "check and s not equal success and the S you initialize here is available until",
    "start": "518469",
    "end": "526390"
  },
  {
    "text": "the end of an optional s statement on which you can for example",
    "start": "526390",
    "end": "532700"
  },
  {
    "text": "use if you have a lock guard so if you initialize a lock guard and do some",
    "start": "532700",
    "end": "538279"
  },
  {
    "text": "checks you can do that now in one statement and you don't need additional curly braces because at the end of this",
    "start": "538279",
    "end": "545540"
  },
  {
    "text": "statement the lock is gone by the way don't forget to give this lock got a",
    "start": "545540",
    "end": "552110"
  },
  {
    "text": "name if you don't give it a name it's a temporary object and the temporary",
    "start": "552110",
    "end": "557690"
  },
  {
    "text": "objects goes away after initialization so that's not what you want so don't",
    "start": "557690",
    "end": "563630"
  },
  {
    "text": "forget this name again and the same is available for switch statements so one",
    "start": "563630",
    "end": "574820"
  },
  {
    "text": "of the things I'm trying to check is how what happens if we combine different features I introduced here so here's a",
    "start": "574820",
    "end": "582070"
  },
  {
    "text": "example if we combine the new feature of the new if statement and the structured",
    "start": "582070",
    "end": "590029"
  },
  {
    "text": "bindings you can improve code like this a lot",
    "start": "590029",
    "end": "595160"
  },
  {
    "text": "so guess you want to insert the new element in a map the element has a string in the value then you might know",
    "start": "595160",
    "end": "602690"
  },
  {
    "text": "that the return value is a pair where the second part signals whether it's",
    "start": "602690",
    "end": "609529"
  },
  {
    "text": "successful and the first part is then explaining why it wasn't successful so",
    "start": "609529",
    "end": "615200"
  },
  {
    "text": "getting you get the details of an element that was already there so this",
    "start": "615200",
    "end": "620959"
  },
  {
    "text": "is the code usually were right then or you might even worse like something like",
    "start": "620959",
    "end": "626410"
  },
  {
    "text": "using red dot first arrow first and nobody connects understand that at least",
    "start": "626410",
    "end": "633230"
  },
  {
    "text": "naively and not knowing the exact details of the interface that way we can",
    "start": "633230",
    "end": "639680"
  },
  {
    "text": "do it easily we can say well let's first initialize our a structured binding of",
    "start": "639680",
    "end": "645709"
  },
  {
    "text": "toss and Dany by the return value of insert and in the same if statement",
    "start": "645709",
    "end": "651440"
  },
  {
    "text": "check whether done was successful whether it was done and if not let's initialize a temporary element with the",
    "start": "651440",
    "end": "660050"
  },
  {
    "text": "first element there with a position so that we have key and value and then we print out key and",
    "start": "660050",
    "end": "665730"
  },
  {
    "text": "again this reads a lot more a lot better than before new feature in line if you",
    "start": "665730",
    "end": "677460"
  },
  {
    "text": "program in C++ and a lot of times you are wondering why why I have to use just",
    "start": "677460",
    "end": "686760"
  },
  {
    "text": "the CPP file to define a global object",
    "start": "686760",
    "end": "692000"
  },
  {
    "text": "anything else can could be in a header file and but the rule is if you have a",
    "start": "692000",
    "end": "698340"
  },
  {
    "text": "global or static object to initialize it it has to be initialized in just one",
    "start": "698340",
    "end": "703680"
  },
  {
    "text": "translation unit and therefore you need one additional CPP file that's gone you",
    "start": "703680",
    "end": "710340"
  },
  {
    "text": "can now completely specify libraries in header files including all the global",
    "start": "710340",
    "end": "718920"
  },
  {
    "text": "and Static objects in of the library and the key the trick is to use the keyword",
    "start": "718920",
    "end": "725220"
  },
  {
    "text": "in line so here's an example if you have defined your own monitor class and you",
    "start": "725220",
    "end": "731790"
  },
  {
    "text": "want to declare a global monitor object-- just you can do everything in",
    "start": "731790",
    "end": "737250"
  },
  {
    "text": "the header just declare the object object to be inline and then all the",
    "start": "737250",
    "end": "742290"
  },
  {
    "text": "different translation units can include this header file and that's it and if they use proc monitor of the global",
    "start": "742290",
    "end": "749370"
  },
  {
    "text": "object it's the same object in each and every translation unit so that's that",
    "start": "749370",
    "end": "755790"
  },
  {
    "text": "William that will help to write libraries just as edified a lot",
    "start": "755790",
    "end": "761720"
  },
  {
    "text": "next thing we extended the idea what is an aggregate and C++ 17 so now we have",
    "start": "761720",
    "end": "770340"
  },
  {
    "text": "the ability that aggregates can have public based classes which initially I",
    "start": "770340",
    "end": "776700"
  },
  {
    "text": "think was driven by the idea that for example you might have a C++ class",
    "start": "776700",
    "end": "783560"
  },
  {
    "text": "extending a see structure and that's a typical application where you have that",
    "start": "783560",
    "end": "788760"
  },
  {
    "text": "here you have another example you you declare a structure be deriving from string and compare",
    "start": "788760",
    "end": "794610"
  },
  {
    "text": "oh well this was possible before but the new thing is that this is an aggregate",
    "start": "794610",
    "end": "801240"
  },
  {
    "text": "and that means you can use aggregate initialization here so you can have list",
    "start": "801240",
    "end": "808279"
  },
  {
    "text": "initialization with the curly braces and you can have nice that list",
    "start": "808279",
    "end": "813320"
  },
  {
    "text": "initialization for the members for the classes where you derive from so we",
    "start": "813320",
    "end": "818970"
  },
  {
    "text": "initialize here the string of the base class we derived ephraim and pass the",
    "start": "818970",
    "end": "826980"
  },
  {
    "text": "second in the second initially initialization as we pass two elements to the complex which by the way is still",
    "start": "826980",
    "end": "834029"
  },
  {
    "text": "template ID and then the third element is the initialization of the members so",
    "start": "834029",
    "end": "840120"
  },
  {
    "text": "you can then use the usual way there's nothing new to deal with it aggregate and we have a new type trait checking",
    "start": "840120",
    "end": "847410"
  },
  {
    "text": "whether something is an aggregate not only for those reasons but all but also for some other reasons because there are",
    "start": "847410",
    "end": "853620"
  },
  {
    "text": "sometimes special rules for aggregates and if you want to write generic code if",
    "start": "853620",
    "end": "858870"
  },
  {
    "text": "aggregate is helpful next thing we have",
    "start": "858870",
    "end": "864529"
  },
  {
    "text": "now mandatory return value optimization and copy elation if you have a PR value",
    "start": "864529",
    "end": "874019"
  },
  {
    "text": "which small s can be translated if you have temporary so that has an",
    "start": "874019",
    "end": "880050"
  },
  {
    "text": "interesting consequence you now can create a class that's not allowed to get",
    "start": "880050",
    "end": "886860"
  },
  {
    "text": "copied and not to move so it you can't do anything with it",
    "start": "886860",
    "end": "892980"
  },
  {
    "text": "after you create an object you can't pass its value to another object by copying or moving it but this is no",
    "start": "892980",
    "end": "901050"
  },
  {
    "text": "longer true you can now still return it",
    "start": "901050",
    "end": "906060"
  },
  {
    "text": "as a temporary object or if your function creates an object of this class",
    "start": "906060",
    "end": "912079"
  },
  {
    "text": "because now return value optimization is mandatory now no copy and no move",
    "start": "912079",
    "end": "919980"
  },
  {
    "text": "constructor is needed and so this works and the same applies to assignments so",
    "start": "919980",
    "end": "925170"
  },
  {
    "text": "if I then assign this return value to another object this build works so we",
    "start": "925170",
    "end": "931740"
  },
  {
    "text": "now require this that this optimization happens and therefore we no longer require in these scenarios to have any",
    "start": "931740",
    "end": "939300"
  },
  {
    "text": "copy or moose support at all and the same is true if you pass an object as a",
    "start": "939300",
    "end": "946110"
  },
  {
    "text": "parameter from a temporary so if I create a new object or I return it from",
    "start": "946110",
    "end": "952830"
  },
  {
    "text": "fool which we define the bus I can directly pass it to another function and that's still allowed although no copying",
    "start": "952830",
    "end": "959850"
  },
  {
    "text": "is possible of course it's not possible if you have an L values own object already and it should be copied that no",
    "start": "959850",
    "end": "967110"
  },
  {
    "text": "longer 2 s it's not possible to pass an SD d move of X here of course we",
    "start": "967110",
    "end": "978780"
  },
  {
    "text": "extended the users of context per everywhere and one example is lambda",
    "start": "978780",
    "end": "984360"
  },
  {
    "text": "lambda are now implicitly cons expert if they can so here's a lambda taking",
    "start": "984360",
    "end": "991740"
  },
  {
    "text": "square taking the square of a value it's a generic lambda so taking any type and",
    "start": "991740",
    "end": "998390"
  },
  {
    "text": "returning its square and you can do the following now you can say I want to",
    "start": "998390",
    "end": "1004130"
  },
  {
    "text": "initialize an array of pins with the crew squared where your 5 and what 5 can",
    "start": "1004130",
    "end": "1009230"
  },
  {
    "text": "come from anywhere where you compute the value at compile time because this lambda by definition",
    "start": "1009230",
    "end": "1016310"
  },
  {
    "text": "implicitly is not now comes exponent can be used in context by expression which means it can be used by the compiler at",
    "start": "1016310",
    "end": "1023810"
  },
  {
    "text": "compile time you can signal that you want to have this at compile time to",
    "start": "1023810",
    "end": "1031220"
  },
  {
    "text": "double check whether it's possible to use it at compile time so if you there place context press the compiler will",
    "start": "1031220",
    "end": "1037819"
  },
  {
    "text": "complain if you do something that's not possible at compile time for example if I have a static object inside squared",
    "start": "1037820",
    "end": "1045800"
  },
  {
    "text": "then this is not allowed to be of this is not available at compile time and so",
    "start": "1045800",
    "end": "1051140"
  },
  {
    "text": "this is not allowed to be used in compile time context so this will be a",
    "start": "1051140",
    "end": "1056720"
  },
  {
    "text": "compile time error then just the Declaration of the lambda will compile-time error we have some small",
    "start": "1056720",
    "end": "1066840"
  },
  {
    "text": "things are new new attributes and new route for attribute a for example no",
    "start": "1066840",
    "end": "1073650"
  },
  {
    "text": "discards and maybe unused and fall through some of the things some people",
    "start": "1073650",
    "end": "1079020"
  },
  {
    "text": "already had at lint for example fall through work case for skate case",
    "start": "1079020",
    "end": "1084420"
  },
  {
    "text": "statements without the break and notice card may warn if you if you are not",
    "start": "1084420",
    "end": "1089550"
  },
  {
    "text": "using the return value and this is a well at least strange well I should say",
    "start": "1089550",
    "end": "1096090"
  },
  {
    "text": "it's more than just range it's usually programming error so usually notice card",
    "start": "1096090",
    "end": "1101340"
  },
  {
    "text": "we would place where a function returns the value you explicitly have to free",
    "start": "1101340",
    "end": "1106440"
  },
  {
    "text": "and then no discard is now in requirement that the compiler complaints",
    "start": "1106440",
    "end": "1112410"
  },
  {
    "text": "if you don't use the to return value we have new places where we now can use",
    "start": "1112410",
    "end": "1118370"
  },
  {
    "text": "attributes for example we can for individual values of enumeration says",
    "start": "1118370",
    "end": "1124380"
  },
  {
    "text": "these are deprecated and we have also a using declaration which is in general",
    "start": "1124380",
    "end": "1131700"
  },
  {
    "text": "allows that attributes can have a general statement so that you don't have",
    "start": "1131700",
    "end": "1138030"
  },
  {
    "text": "to qualify all the things you want to use in in an attribute butcher's there's",
    "start": "1138030",
    "end": "1143550"
  },
  {
    "text": "no nothing useful for that in under standard attribute but if you have your",
    "start": "1143550",
    "end": "1149760"
  },
  {
    "text": "own define attribute this might be helpful and another small fix if you",
    "start": "1149760",
    "end": "1156210"
  },
  {
    "text": "have snippet namespace you can now write them as one statement everybody who does",
    "start": "1156210",
    "end": "1162810"
  },
  {
    "text": "that knows that this is some improvement",
    "start": "1162810",
    "end": "1167240"
  },
  {
    "text": "we introduced with C path of 14 we introduced the ability for 10 or 11 I'm",
    "start": "1168290",
    "end": "1174420"
  },
  {
    "text": "not sure actually we introduced the ability to align data I think it was 11",
    "start": "1174420",
    "end": "1182030"
  },
  {
    "text": "so you could say a lime as and that means that in for example in a structure",
    "start": "1182030",
    "end": "1188730"
  },
  {
    "text": "you can ensure that your integer in the structure is aligned on a on a for bite",
    "start": "1188730",
    "end": "1194440"
  },
  {
    "text": "a dress for battle and a dress also this was used and respected if you created",
    "start": "1194440",
    "end": "1202240"
  },
  {
    "text": "objects on the stack but not on the heat and this is a solution now for the heap",
    "start": "1202240",
    "end": "1208509"
  },
  {
    "text": "so with the problem was that this means that we need new new new operators",
    "start": "1208509",
    "end": "1216009"
  },
  {
    "text": "because now as you can implement new yourself you have my might have in the",
    "start": "1216009",
    "end": "1222700"
  },
  {
    "text": "digital argument telling you the requirement regarding alignment of this object so this is will extend the",
    "start": "1222700",
    "end": "1230259"
  },
  {
    "text": "existing new interface if only one of them provided it will be used by default",
    "start": "1230259",
    "end": "1235419"
  },
  {
    "text": "in all cases so there your code is still backward compatible and finally as a",
    "start": "1235419",
    "end": "1242529"
  },
  {
    "text": "feature arm has include so we have in practice this problem that in a",
    "start": "1242529",
    "end": "1249789"
  },
  {
    "text": "preprocessor we want to include something but we don't know whether it's available and so we can now program to",
    "start": "1249789",
    "end": "1258129"
  },
  {
    "text": "try out by the program different header files here you see the example if we",
    "start": "1258129",
    "end": "1263830"
  },
  {
    "text": "have any optional then we include optional otherwise if we have experimental optional then we include",
    "start": "1263830",
    "end": "1270250"
  },
  {
    "text": "experimental optional otherwise we do something else which might help to deal",
    "start": "1270250",
    "end": "1275409"
  },
  {
    "text": "with the fact that environments have different states of new features or",
    "start": "1275409",
    "end": "1281409"
  },
  {
    "text": "libraries of versions ok so far for the",
    "start": "1281409",
    "end": "1286539"
  },
  {
    "text": "for the coffee church without templates oh no two others I have sorry I come",
    "start": "1286539",
    "end": "1292509"
  },
  {
    "text": "back two more and what just wanted to say so we have now utf-8 character little booth you can define them but",
    "start": "1292509",
    "end": "1299529"
  },
  {
    "text": "it's not a trick to extend C++ code to support fully utf-8 code characters it's",
    "start": "1299529",
    "end": "1309850"
  },
  {
    "text": "just supported for those characters who are representable with the single code",
    "start": "1309850",
    "end": "1315519"
  },
  {
    "text": "unit and we have hex hex also now",
    "start": "1315519",
    "end": "1321059"
  },
  {
    "text": "supported as a prefix for floating-point literals so you can do",
    "start": "1321059",
    "end": "1327850"
  },
  {
    "text": "the things you see here in red with some roots behind that if you know that it's",
    "start": "1327850",
    "end": "1333730"
  },
  {
    "text": "already supported as output by the sed hex load armed money for later and it's",
    "start": "1333730",
    "end": "1341020"
  },
  {
    "text": "also coming from c99 so this is now possible if you're in the science area",
    "start": "1341020",
    "end": "1347590"
  },
  {
    "text": "you might meet that so as promised that",
    "start": "1347590",
    "end": "1352780"
  },
  {
    "text": "were the language features without templates now we come to template and as we all know there's a hidden hidden",
    "start": "1352780",
    "end": "1361230"
  },
  {
    "text": "statement that C++ is the generic language I think in when you look in the",
    "start": "1361230",
    "end": "1366309"
  },
  {
    "text": "standard probably 99% of the standard features are templates and so we support",
    "start": "1366309",
    "end": "1374799"
  },
  {
    "text": "a lot of things and of course this support growth now with C++ 17 in a",
    "start": "1374799",
    "end": "1381429"
  },
  {
    "text": "couple of interesting directions so let's talk about them in the second half of this talk the first thing is we have",
    "start": "1381429",
    "end": "1390220"
  },
  {
    "text": "a compile time is now that means at",
    "start": "1390220",
    "end": "1396909"
  },
  {
    "text": "compile time we can say whether we want to have this compile or not and whether",
    "start": "1396909",
    "end": "1404020"
  },
  {
    "text": "only the first half of the second half of the then part of the else part is some used in your program and whether",
    "start": "1404020",
    "end": "1412090"
  },
  {
    "text": "that corresponding code is generated that doesn't mean that the non generated",
    "start": "1412090",
    "end": "1418480"
  },
  {
    "text": "code the so-called discarded statement is not checked in anyway the roots apply",
    "start": "1418480",
    "end": "1425440"
  },
  {
    "text": "as was templates in general so in general if a template is not used still",
    "start": "1425440",
    "end": "1431500"
  },
  {
    "text": "some checks are done with that so we call this the definition face-to-face",
    "start": "1431500",
    "end": "1437799"
  },
  {
    "text": "checks of dealing with templates instead of the instantiation phase where we know",
    "start": "1437799",
    "end": "1442840"
  },
  {
    "text": "how to how the template parameters are substituted by concrete types so the",
    "start": "1442840",
    "end": "1449620"
  },
  {
    "text": "first phase also applies here so that means some if we have code here that",
    "start": "1449620",
    "end": "1454960"
  },
  {
    "text": "checks FS CD integral if a party is an integral type",
    "start": "1454960",
    "end": "1461770"
  },
  {
    "text": "then we recursively call ourselves up with one less or so so then the else",
    "start": "1461770",
    "end": "1469300"
  },
  {
    "text": "part even if P is interval is still considered and then it depends on the",
    "start": "1469300",
    "end": "1476140"
  },
  {
    "text": "usual template root so as here dig undeclared is depending on the template",
    "start": "1476140",
    "end": "1482590"
  },
  {
    "text": "parameter it will not check whether undeclared is available because it",
    "start": "1482590",
    "end": "1490060"
  },
  {
    "text": "depends on the template parameter but if you have a declaration that's not dependent on the template",
    "start": "1490060",
    "end": "1497050"
  },
  {
    "text": "parameter then you will get an error if this is a problem by the way I should",
    "start": "1497050",
    "end": "1503920"
  },
  {
    "text": "say that this to face compilation or two-phase translation transformation of",
    "start": "1503920",
    "end": "1510030"
  },
  {
    "text": "templates it's not supported in all compiler which lets to do doesn't support it yet or they now support it",
    "start": "1510030",
    "end": "1517360"
  },
  {
    "text": "with the next update of Visual Studio 17 and a couple of code might break because",
    "start": "1517360",
    "end": "1523900"
  },
  {
    "text": "of that because suddenly the else part is not just declared or in in old",
    "start": "1523900",
    "end": "1530170"
  },
  {
    "text": "template the template is not ignored code is not ignored no longer ignored",
    "start": "1530170",
    "end": "1535210"
  },
  {
    "text": "some checks are done especially for everything that's not depending on the",
    "start": "1535210",
    "end": "1540850"
  },
  {
    "text": "template so that will change with Luther Studio 17 it's already in the other compilers and that also applies here so",
    "start": "1540850",
    "end": "1549130"
  },
  {
    "text": "everything is checked except the things that depend on the template parameter so",
    "start": "1549130",
    "end": "1556870"
  },
  {
    "text": "a common error and surprise will be if you have a static assertion saying now",
    "start": "1556870",
    "end": "1562660"
  },
  {
    "text": "when I come to here I signal assert false so compile compilation will",
    "start": "1562660",
    "end": "1568330"
  },
  {
    "text": "build fail was a message like no integral this will always assert always",
    "start": "1568330",
    "end": "1574780"
  },
  {
    "text": "independent from whether T is an integral value or not that's by the way",
    "start": "1574780",
    "end": "1580000"
  },
  {
    "text": "we also happen now if if you recompile code with the new bridge we'll see does the 17 feature because in general in",
    "start": "1580000",
    "end": "1587170"
  },
  {
    "text": "template this is a rule and so if you use the static I surf you",
    "start": "1587170",
    "end": "1593470"
  },
  {
    "text": "have to reform make a template dependent again so you have to reformulate the",
    "start": "1593470",
    "end": "1598870"
  },
  {
    "text": "assertion that to check whether it's not integral and then it will work as expected okay",
    "start": "1598870",
    "end": "1607320"
  },
  {
    "text": "you can even use its context per in",
    "start": "1607320",
    "end": "1612390"
  },
  {
    "text": "functions that are non templates then all the rules apply which I just",
    "start": "1612390",
    "end": "1618789"
  },
  {
    "text": "introduced except those were code depends on template types so it just",
    "start": "1618789",
    "end": "1624010"
  },
  {
    "text": "means that we have the checks for whether the code is valid whether it has",
    "start": "1624010",
    "end": "1629380"
  },
  {
    "text": "a correct syntax and for each and every function called it's it's it's checked",
    "start": "1629380",
    "end": "1634840"
  },
  {
    "text": "whether it's available even if it's part of the discarded statement so even if numeric limits on your platform are not",
    "start": "1634840",
    "end": "1643150"
  },
  {
    "text": "signed if you haven't declared undeclared this will fair and again if",
    "start": "1643150",
    "end": "1650919"
  },
  {
    "text": "you have an assertion with false this will always assert so it follows the",
    "start": "1650919",
    "end": "1656590"
  },
  {
    "text": "same rules as before but we don't have any template depending parameter so",
    "start": "1656590",
    "end": "1666159"
  },
  {
    "text": "having said that these were just from borning so this is incredible helpful feature it will it will resolve a couple",
    "start": "1666159",
    "end": "1674500"
  },
  {
    "text": "of places where we just overloaded different template functions audit class template partial ization special partial",
    "start": "1674500",
    "end": "1682120"
  },
  {
    "text": "ization plus because of reward is having to have different code compiled and now",
    "start": "1682120",
    "end": "1687490"
  },
  {
    "text": "we can do it in inner function internally if it doesn't affect the outer interface of the function you can",
    "start": "1687490",
    "end": "1696549"
  },
  {
    "text": "do for example this this is old C++ so it was a very attic template saying I",
    "start": "1696549",
    "end": "1703510"
  },
  {
    "text": "want to print the element C passed element and it could be one or more element so I pass the first argument and",
    "start": "1703510",
    "end": "1710320"
  },
  {
    "text": "then an unlimited number of very attic number of additional arguments the trick",
    "start": "1710320",
    "end": "1715929"
  },
  {
    "text": "was I printed out the first argument and then I called myself again for the remaining argument so what I called me",
    "start": "1715929",
    "end": "1723340"
  },
  {
    "text": "recklessly myself always printing the first and then calling myself for the",
    "start": "1723340",
    "end": "1729610"
  },
  {
    "text": "remaining elements and if you try that with Justin if because you can check for",
    "start": "1729610",
    "end": "1736240"
  },
  {
    "text": "the number of remaining elements this didn't work because there was this was",
    "start": "1736240",
    "end": "1742179"
  },
  {
    "text": "not a compile time if this was a run time it and so the code the compiler try",
    "start": "1742179",
    "end": "1747309"
  },
  {
    "text": "to compile here was to say well even if I have no remaining arguments so if the",
    "start": "1747309",
    "end": "1753010"
  },
  {
    "text": "if statement here results or yells false I still generate code that print without",
    "start": "1753010",
    "end": "1759970"
  },
  {
    "text": "any argument should be called and it says no print that ends this recursion it this couldn't work or the compiler",
    "start": "1759970",
    "end": "1766510"
  },
  {
    "text": "rejected to compile it so this for example now can be changed into if cons extra and now things work as expected by",
    "start": "1766510",
    "end": "1777520"
  },
  {
    "text": "the way there's a funny story behind that the feature is called Express but it's written is context well it has some",
    "start": "1777520",
    "end": "1786640"
  },
  {
    "text": "historic reasons and there's also the idea of explaining it some by saying well this is the context perversion of",
    "start": "1786640",
    "end": "1794350"
  },
  {
    "text": "the if statement you can read it that way but you if you write it the other way around so we have some confusion but",
    "start": "1794350",
    "end": "1800530"
  },
  {
    "text": "it's not the first time we have confusion in C++ and C so if you have if",
    "start": "1800530",
    "end": "1807580"
  },
  {
    "text": "you want to recursively deal with some arguments very attic arguments there's even more there's a so called fault",
    "start": "1807580",
    "end": "1814690"
  },
  {
    "text": "expression and the fold expression is an implicit recursion just in one statement",
    "start": "1814690",
    "end": "1820710"
  },
  {
    "text": "so if you have a very otic number of values of type T and you want to add all",
    "start": "1820710",
    "end": "1828370"
  },
  {
    "text": "these arguments instead of doing the trick I just choke you so recursively",
    "start": "1828370",
    "end": "1834960"
  },
  {
    "text": "adding just the next element and then call myself again I can use the full",
    "start": "1834960",
    "end": "1840460"
  },
  {
    "text": "expression and it's parentheses dot dot dot and operator then a parameter pick",
    "start": "1840460",
    "end": "1847030"
  },
  {
    "text": "and then parentheses so this is a host the whole expression you you have to use the parentheses here and this expands to",
    "start": "1847030",
    "end": "1855000"
  },
  {
    "text": "to apply the sum operator to all the elements or if you have some",
    "start": "1855000",
    "end": "1860310"
  },
  {
    "text": "additional initialization like in the second example this applies that that",
    "start": "1860310",
    "end": "1866550"
  },
  {
    "text": "you add all these elements to zero and that way you can do a lot of incredible",
    "start": "1866550",
    "end": "1874020"
  },
  {
    "text": "things and simplify your very attic template handling",
    "start": "1874020",
    "end": "1879750"
  },
  {
    "text": "yeah as you will see so here's one example we can use the fault expression",
    "start": "1879750",
    "end": "1886620"
  },
  {
    "text": "for almost each and every binary operator so a for example this is a this",
    "start": "1886620",
    "end": "1893460"
  },
  {
    "text": "is using this for the member pointer so for the member pointer operator so guess",
    "start": "1893460",
    "end": "1900960"
  },
  {
    "text": "you have a node type and inside the node so it's four three eight four binary tree and the elements in the node refer",
    "start": "1900960",
    "end": "1908370"
  },
  {
    "text": "to the left and right child of a tree and there are convenience names like",
    "start": "1908370",
    "end": "1916350"
  },
  {
    "text": "left and right which represent these left and right data members and then on",
    "start": "1916350",
    "end": "1922530"
  },
  {
    "text": "the bottom you initialize your root with a new node and then you assign to the",
    "start": "1922530",
    "end": "1928920"
  },
  {
    "text": "left at the left side of the root and you note and then to the right side of",
    "start": "1928920",
    "end": "1934590"
  },
  {
    "text": "the left side of your root and you note then you can call traverse and well it's",
    "start": "1934590",
    "end": "1940500"
  },
  {
    "text": "easily readable to traverse from root left/right and return the corresponding",
    "start": "1940500",
    "end": "1946200"
  },
  {
    "text": "element and the trick is that traverse now is not no longer a recursive",
    "start": "1946200",
    "end": "1951420"
  },
  {
    "text": "statement it's just the fold expression following all the paths with the arrow",
    "start": "1951420",
    "end": "1957540"
  },
  {
    "text": "star operator so some cool things are possible here and fold expressions also",
    "start": "1957540",
    "end": "1966870"
  },
  {
    "text": "work for types or for expressions that use pipes so here's a very condensed way",
    "start": "1966870",
    "end": "1974130"
  },
  {
    "text": "to check whether all my elements in this template are homogeneous there are other",
    "start": "1974130",
    "end": "1980130"
  },
  {
    "text": "ways to do that but this is just one way to do it and that means if I pass an L",
    "start": "1980130",
    "end": "1986190"
  },
  {
    "text": "and an element of type t1 and then additional element of type TN with",
    "start": "1986190",
    "end": "1992190"
  },
  {
    "text": "different types this return statement checks whether this type t1 is the same as all the",
    "start": "1992190",
    "end": "1999719"
  },
  {
    "text": "other types and how is it work because if I pass 43 so an integer and then",
    "start": "1999719",
    "end": "2006109"
  },
  {
    "text": "minus one another integer and then a string constant and then another pointer then this expanse to it calling is same",
    "start": "2006109",
    "end": "2014840"
  },
  {
    "text": "for the first elements of 43 with all the type of the 43 with all the other",
    "start": "2014840",
    "end": "2021200"
  },
  {
    "text": "elements so that way we can are yeah we can very condensed check whether things",
    "start": "2021200",
    "end": "2027229"
  },
  {
    "text": "have the same time I think you've got an idea of this feature how can we use it",
    "start": "2027229",
    "end": "2033379"
  },
  {
    "text": "our print examples we just introduced where I told you compile time if can be",
    "start": "2033379",
    "end": "2041330"
  },
  {
    "text": "now even be better improved you can say I want to print all the arguments I no",
    "start": "2041330",
    "end": "2047239"
  },
  {
    "text": "longer need recursion I just use a fold expression so saying when I want to",
    "start": "2047239",
    "end": "2053388"
  },
  {
    "text": "print 7.5 hello and an STD string wealth I use a fold operator to write out all",
    "start": "2053389",
    "end": "2061490"
  },
  {
    "text": "these elements one after the other to see out I can do that the only problem",
    "start": "2061490",
    "end": "2067700"
  },
  {
    "text": "is no spaces are between so I need some tricks so I need an ad space a playa",
    "start": "2067700",
    "end": "2074599"
  },
  {
    "text": "here which can be part of the fold expression so if I have a helper template taking just taking an object",
    "start": "2074599",
    "end": "2082789"
  },
  {
    "text": "and and introducing the output operator for it with an additional space I can",
    "start": "2082789",
    "end": "2090470"
  },
  {
    "text": "now use this at space argument or helper template to use it in a fold expression",
    "start": "2090470",
    "end": "2096829"
  },
  {
    "text": "to print out all the paths elements with the space edit and of course you can't",
    "start": "2096829",
    "end": "2102529"
  },
  {
    "text": "emphasize what you want to add there after the argument so you can could use",
    "start": "2102529",
    "end": "2108039"
  },
  {
    "text": "something different or a parameter for that look please look at the read ad space",
    "start": "2108039",
    "end": "2115190"
  },
  {
    "text": "statement look very carefully because we can all go to the next statement arm which is it's not necessarily anymore",
    "start": "2115190",
    "end": "2125329"
  },
  {
    "text": "required to pass tempted to define template parameters when you create an object of",
    "start": "2125329",
    "end": "2133760"
  },
  {
    "text": "a template class we call this class template argument deduction so whenever",
    "start": "2133760",
    "end": "2141260"
  },
  {
    "text": "we have functions template parameters are derived from the passed arguments so",
    "start": "2141260",
    "end": "2147800"
  },
  {
    "text": "the question was why can't this work for class template and the answer is it can",
    "start": "2147800",
    "end": "2152930"
  },
  {
    "text": "now so in the past when we created a complex of integers which is not always",
    "start": "2152930",
    "end": "2161210"
  },
  {
    "text": "supported by the way but which is in principle possible then you had to write",
    "start": "2161210",
    "end": "2167680"
  },
  {
    "text": "complex of in and then we with the various for initialization but now we",
    "start": "2167680",
    "end": "2173690"
  },
  {
    "text": "can skip the end with c++ 17 because the fact that this complex is instantiated",
    "start": "2173690",
    "end": "2181420"
  },
  {
    "text": "for in is derived from the fact that we pass two ends here and if we pass two",
    "start": "2181420",
    "end": "2187490"
  },
  {
    "text": "doubles or floating-point values this will be a complex of double of course and that works with both with it with",
    "start": "2187490",
    "end": "2194540"
  },
  {
    "text": "the old initialization way with with parentheses and with a new way using the",
    "start": "2194540",
    "end": "2200600"
  },
  {
    "text": "curly braces complex is defined as taking one argument T so you see it on",
    "start": "2200600",
    "end": "2208190"
  },
  {
    "text": "top template type name T so the compiler has to be able to deduce this T and if",
    "start": "2208190",
    "end": "2214700"
  },
  {
    "text": "there is contradicting information it says if there would be a type ii type",
    "start": "2214700",
    "end": "2221630"
  },
  {
    "text": "conversion required this will not work as it would not work for functions so if you pass v as an integer and 3.3 as a",
    "start": "2221630",
    "end": "2230950"
  },
  {
    "text": "floating point value this will not compile and here's another example also",
    "start": "2230950",
    "end": "2236900"
  },
  {
    "text": "very helpful if you have used lock guards already it was always nasty because if you had a",
    "start": "2236900",
    "end": "2242990"
  },
  {
    "text": "mutex and to initialize the locker because luck guard was a class you again",
    "start": "2242990",
    "end": "2248480"
  },
  {
    "text": "had to write lock guard of STD mutex which is now using this feature no",
    "start": "2248480",
    "end": "2254540"
  },
  {
    "text": "longer necessary this is not a very trivial language",
    "start": "2254540",
    "end": "2260740"
  },
  {
    "text": "features we have a couple of interesting things to discuss here the first and folks the first thing is sometimes some",
    "start": "2260740",
    "end": "2268540"
  },
  {
    "text": "deductions are not possible or do strange things excuse me and one feature we have for",
    "start": "2268540",
    "end": "2280480"
  },
  {
    "text": "this is we can we can formulate deduction guides so that we say instead",
    "start": "2280480",
    "end": "2289150"
  },
  {
    "text": "of the compiler here is our guide how to derive the class template parameters",
    "start": "2289150",
    "end": "2295119"
  },
  {
    "text": "from the initial values so here's an example I could I could if I if I'm",
    "start": "2295119",
    "end": "2302050"
  },
  {
    "text": "allowed to or if we would do that in the library I could formulate to say if I",
    "start": "2302050",
    "end": "2307420"
  },
  {
    "text": "initialize a complex of two different types for example an integer and",
    "start": "2307420",
    "end": "2313840"
  },
  {
    "text": "floating-point literal then here's a rule please initialize a complex of the",
    "start": "2313840",
    "end": "2320770"
  },
  {
    "text": "common type of t1 and t2 common type is a type trait we have in the library",
    "start": "2320770",
    "end": "2326170"
  },
  {
    "text": "which automatically finds the common type of two types according to language rules or you can also provide some rules",
    "start": "2326170",
    "end": "2333400"
  },
  {
    "text": "yourself so the ad from a language rule there if you for example add an integer",
    "start": "2333400",
    "end": "2339010"
  },
  {
    "text": "with a double the resulting type is a double so the common type of these two types is a double so we will initialize",
    "start": "2339010",
    "end": "2345910"
  },
  {
    "text": "here a complex of double and it will suddenly work unfortunately we have we",
    "start": "2345910",
    "end": "2351730"
  },
  {
    "text": "don't have that in the library so that's not supported and you are not allowed to support that because user-defined",
    "start": "2351730",
    "end": "2358750"
  },
  {
    "text": "deduction guides must be defined in the same context as the original class so",
    "start": "2358750",
    "end": "2365830"
  },
  {
    "text": "it's the classes defined in namespace STD also the deduction guys has to be",
    "start": "2365830",
    "end": "2370930"
  },
  {
    "text": "defined there which they are not allowed to do but it works I didn't tell you that so okay but we have some deduction",
    "start": "2370930",
    "end": "2379450"
  },
  {
    "text": "guides in the library some simple some interesting here's a first simple",
    "start": "2379450",
    "end": "2386050"
  },
  {
    "text": "example if we introduce a container like a vector",
    "start": "2386050",
    "end": "2391089"
  },
  {
    "text": "to inter inter iterators so what should be the element type of the vector we can",
    "start": "2391089",
    "end": "2398559"
  },
  {
    "text": "derive it from the iterator it's a type it's a value type of the iterator trait",
    "start": "2398559",
    "end": "2404170"
  },
  {
    "text": "of this iterator so we're there we can find the element type so that and that's the",
    "start": "2404170",
    "end": "2411099"
  },
  {
    "text": "corresponding deduction guy we say when we initialize a vector by a type named",
    "start": "2411099",
    "end": "2416950"
  },
  {
    "text": "iterator because that's a semantic we have here then we try to for this type",
    "start": "2416950",
    "end": "2422619"
  },
  {
    "text": "to find the iterator trades and having them the Vario type and that's the type",
    "start": "2422619",
    "end": "2427839"
  },
  {
    "text": "the vector code would should get so that means if I have a set of flows and I",
    "start": "2427839",
    "end": "2433779"
  },
  {
    "text": "initialize my vector with begin and end of this set then you no longer have to",
    "start": "2433779",
    "end": "2440440"
  },
  {
    "text": "write vector of flow because according to this deduction guide this will be",
    "start": "2440440",
    "end": "2446499"
  },
  {
    "text": "deduced automatically by the compiler and this is inbuilt in the our library",
    "start": "2446499",
    "end": "2454349"
  },
  {
    "text": "here's another inbuilt deduction guide it brings together a couple of features",
    "start": "2454349",
    "end": "2459369"
  },
  {
    "text": "are introduced already this will look at the at the bottom first maybe this will",
    "start": "2459369",
    "end": "2465460"
  },
  {
    "text": "be used that if you initialize an STD array a by three integers that the array",
    "start": "2465460",
    "end": "2473710"
  },
  {
    "text": "is an array of three integers so it will deduce two things type integer and the",
    "start": "2473710",
    "end": "2480549"
  },
  {
    "text": "value 3 because in STD error is a fixed size array and how does it work see the",
    "start": "2480549",
    "end": "2488170"
  },
  {
    "text": "code there we have a deduction guide taking one type and additional types and",
    "start": "2488170",
    "end": "2495719"
  },
  {
    "text": "then we say by a trick which is used in the library a lot that we only support",
    "start": "2495719",
    "end": "2503349"
  },
  {
    "text": "this deduction guide if type T is the same as a type u and all the other type",
    "start": "2503349",
    "end": "2512349"
  },
  {
    "text": "u we have because this is a fold expression we use there this fold expression again like is homogeneous we",
    "start": "2512349",
    "end": "2520150"
  },
  {
    "text": "had before checks whether all the types are homogeneous and enable if says if this is not the",
    "start": "2520150",
    "end": "2527380"
  },
  {
    "text": "case this whole deduction guide is not available and can't eat to any trouble",
    "start": "2527380",
    "end": "2532719"
  },
  {
    "text": "and so if the types are the same then we",
    "start": "2532719",
    "end": "2539229"
  },
  {
    "text": "initialize the element the array by the type T enable if T then if it's valid",
    "start": "2539229",
    "end": "2546759"
  },
  {
    "text": "yes to type T and then the second argument of the error is one plus the",
    "start": "2546759",
    "end": "2552309"
  },
  {
    "text": "remaining argument because the first argument for for the teeth the remaining arguments number is U so in this case",
    "start": "2552309",
    "end": "2560289"
  },
  {
    "text": "size of dot of U is 2 and 1 plus 2 is 3 so this deduction guide works this is",
    "start": "2560289",
    "end": "2567999"
  },
  {
    "text": "also inbuilt in the library yeah",
    "start": "2567999",
    "end": "2573849"
  },
  {
    "text": "deduction cards don't have to be template ID as you had it here it's also definitely possible to say I have a",
    "start": "2573849",
    "end": "2582160"
  },
  {
    "text": "guide that if for typed as a template",
    "start": "2582160",
    "end": "2588130"
  },
  {
    "text": "type as if I pass a string literal please did use s to be instantiated for",
    "start": "2588130",
    "end": "2596829"
  },
  {
    "text": "FC D string so now if I create an S without",
    "start": "2596829",
    "end": "2602339"
  },
  {
    "text": "declaring the argument of the template parameter in any case S will be a CD",
    "start": "2602339",
    "end": "2611440"
  },
  {
    "text": "string will be deduce if I pass and string literal and that also helps if",
    "start": "2611440",
    "end": "2618309"
  },
  {
    "text": "you deal with aggregates for example if you have an aggregate like like here there are a couple of language rules",
    "start": "2618309",
    "end": "2624940"
  },
  {
    "text": "that allow more or less only one the initialization which is the second one here but I can say I have a deducting",
    "start": "2624940",
    "end": "2632410"
  },
  {
    "text": "guide and now I have more implicit waste even to a tool to define or deduce the",
    "start": "2632410",
    "end": "2639519"
  },
  {
    "text": "type of an aggregate without specifying it so here it is now possible to pass a",
    "start": "2639519",
    "end": "2648390"
  },
  {
    "text": "string directly and to use that for this string i want to instantiate this",
    "start": "2648390",
    "end": "2654099"
  },
  {
    "text": "aggregate that the type T is STD string I skipped the other examples here okay",
    "start": "2654099",
    "end": "2664680"
  },
  {
    "text": "one more I'm using declarations can now combine multiple elements so instead of",
    "start": "2664680",
    "end": "2672550"
  },
  {
    "text": "having three statements in using days a base B and base e we can now have that",
    "start": "2672550",
    "end": "2678160"
  },
  {
    "text": "in one statement and this was a side effect of the fact that we wanted to be",
    "start": "2678160",
    "end": "2685359"
  },
  {
    "text": "able also to apply very attic templates here so we want to have very addict",
    "start": "2685359",
    "end": "2691990"
  },
  {
    "text": "template support in using declarations this is a complete example maybe let me look at the time well maybe we have a",
    "start": "2691990",
    "end": "2698500"
  },
  {
    "text": "little bit time fix turned on there I explain it I have here customer type and I have two functional objects one",
    "start": "2698500",
    "end": "2707940"
  },
  {
    "text": "creating an equality operation for the of the customer and the other creating a hash function for the customer and if I",
    "start": "2707940",
    "end": "2715180"
  },
  {
    "text": "want to create a combined function object having both the operator to",
    "start": "2715180",
    "end": "2721510"
  },
  {
    "text": "create a hash function and the equal function I can derive from both phases",
    "start": "2721510",
    "end": "2727000"
  },
  {
    "text": "look there over loader is the rice from a very a big number of base classes and",
    "start": "2727000",
    "end": "2734200"
  },
  {
    "text": "for each and every base class we use so we we derive the upper the function call",
    "start": "2734200",
    "end": "2742210"
  },
  {
    "text": "operator so that we have it available there but this is a if you use that you",
    "start": "2742210",
    "end": "2748359"
  },
  {
    "text": "are probably already in the in the world of the of the tricky template programming gurus but it's possible",
    "start": "2748359",
    "end": "2757170"
  },
  {
    "text": "finally for template we can declare now a template an on type template to take",
    "start": "2757170",
    "end": "2763240"
  },
  {
    "text": "out all the way even deco type also as possible which has some strange it",
    "start": "2763240",
    "end": "2769140"
  },
  {
    "text": "consequences so that template also saying I'm not declaring what the non",
    "start": "2769140",
    "end": "2774880"
  },
  {
    "text": "type parameter n is it can be an integer it can be a character depending on what",
    "start": "2774880",
    "end": "2780970"
  },
  {
    "text": "I pass here and this can't be used to extend the the ability of templates",
    "start": "2780970",
    "end": "2788170"
  },
  {
    "text": "though so you still can't pass a double here because it's not allowed to instantiate a",
    "start": "2788170",
    "end": "2793410"
  },
  {
    "text": "template not site template parameter by a double type yeah but it works skip",
    "start": "2793410",
    "end": "2801150"
  },
  {
    "text": "that so we have another thing we",
    "start": "2801150",
    "end": "2806220"
  },
  {
    "text": "improved over all the different super-sized versions the support to write templates for springleaf roads",
    "start": "2806220",
    "end": "2813350"
  },
  {
    "text": "when we introduced C++ Oh 3 or 98 the",
    "start": "2813350",
    "end": "2818550"
  },
  {
    "text": "first version we standardized there was only possible by a trick to say it was",
    "start": "2818550",
    "end": "2823980"
  },
  {
    "text": "only possible to say I want to instantiate a template by a string",
    "start": "2823980",
    "end": "2829080"
  },
  {
    "text": "literal so because if string little now becomes part of the of the template",
    "start": "2829080",
    "end": "2836040"
  },
  {
    "text": "class and the trick was you needed an external string with external linkage so",
    "start": "2836040",
    "end": "2842190"
  },
  {
    "text": "which is globally visible throughout the programs therefore you had to declare an",
    "start": "2842190",
    "end": "2847200"
  },
  {
    "text": "expand Khan's character hello and then you could use it as parameter",
    "start": "2847200",
    "end": "2854090"
  },
  {
    "text": "constrictor arkasha constant what character style is the general way to write it in a",
    "start": "2854090",
    "end": "2861000"
  },
  {
    "text": "template with C++ 11 we we reduce this feature and we said it's also possible",
    "start": "2861000",
    "end": "2867900"
  },
  {
    "text": "if you have internal linkage internal linkage means it's not globally available but it's available in my",
    "start": "2867900",
    "end": "2874710"
  },
  {
    "text": "translation unit so without the x10 but it still had to be global now our static",
    "start": "2874710",
    "end": "2882330"
  },
  {
    "text": "to some extent so now by definition business has internal language and now",
    "start": "2882330",
    "end": "2889080"
  },
  {
    "text": "with C++ 17 we have no requirement for",
    "start": "2889080",
    "end": "2894450"
  },
  {
    "text": "any linkage at all so that means that you now can declare a local static",
    "start": "2894450",
    "end": "2900600"
  },
  {
    "text": "string and pass it to a template so that helps a lot because now you can directly",
    "start": "2900600",
    "end": "2906330"
  },
  {
    "text": "see that this template is template fide for the string hello world directly in",
    "start": "2906330",
    "end": "2912750"
  },
  {
    "text": "these two places them and remember we",
    "start": "2912750",
    "end": "2918990"
  },
  {
    "text": "have Auto now we can do that with Auto so I can now declare",
    "start": "2918990",
    "end": "2925050"
  },
  {
    "text": "template taking at an object of type T which can be an integer can be a",
    "start": "2925050",
    "end": "2932220"
  },
  {
    "text": "character but can also be a spring literal if I pass a static constant",
    "start": "2932220",
    "end": "2937770"
  },
  {
    "text": "declared directly before which might also help or serve some meat often",
    "start": "2937770",
    "end": "2943950"
  },
  {
    "text": "needed is this thing for example if you have some logging and you want to initialize the template by some",
    "start": "2943950",
    "end": "2949460"
  },
  {
    "text": "information spring representing the area you are logging here so one at time ten",
    "start": "2949460",
    "end": "2957630"
  },
  {
    "text": "minutes left so now we come on the very attic part of this talk the next thing",
    "start": "2957630",
    "end": "2964530"
  },
  {
    "text": "is just a few core fixes and improvements we improved a lot we fixed a lot here's the first thing that I",
    "start": "2964530",
    "end": "2971940"
  },
  {
    "text": "think the most important thing look at this statement we have a string and I",
    "start": "2971940",
    "end": "2977580"
  },
  {
    "text": "want to replace some things in the string I want to read I want to remove the first four characters then I want to",
    "start": "2977580",
    "end": "2985050"
  },
  {
    "text": "remove the characters even and I want to remove the characters don't all know",
    "start": "2985050",
    "end": "2991170"
  },
  {
    "text": "even is replaced by only this is by the way an example be honest - so peasant",
    "start": "2991170",
    "end": "2998310"
  },
  {
    "text": "C++ programming languages see there and and it turned out it's wrong it's undefined behavior because the order of",
    "start": "2998310",
    "end": "3009140"
  },
  {
    "text": "evaluation is undefined here what might happen is the following we first find",
    "start": "3009140",
    "end": "3016610"
  },
  {
    "text": "the index of even and the index of don't then we remove we remove the first four",
    "start": "3016610",
    "end": "3025990"
  },
  {
    "text": "characters and then we apply to replace the index of the previous position of",
    "start": "3025990",
    "end": "3032660"
  },
  {
    "text": "even by the by only which of course then replaces different characters by",
    "start": "3032660",
    "end": "3039620"
  },
  {
    "text": "language rules this could happen this was undefined behavior so we fix that",
    "start": "3039620",
    "end": "3045650"
  },
  {
    "text": "and by the way another example that typically typically people make wrong if",
    "start": "3045650",
    "end": "3050690"
  },
  {
    "text": "I print out the result of a function f G and H people usually assume that F is",
    "start": "3050690",
    "end": "3057470"
  },
  {
    "text": "called before G that's not correct it might happen that G is called before s so if there are",
    "start": "3057470",
    "end": "3065420"
  },
  {
    "text": "some side effects between s and G this is also undefined behavior and we fix",
    "start": "3065420",
    "end": "3071270"
  },
  {
    "text": "that it's by the way because it does more or less the same thing as the example above calling the dot operator",
    "start": "3071270",
    "end": "3078079"
  },
  {
    "text": "and the order of in the if you pass something to the dot operator the order",
    "start": "3078079",
    "end": "3083390"
  },
  {
    "text": "is not defined so we have now a defined evaluation order for some operands so",
    "start": "3083390",
    "end": "3090230"
  },
  {
    "text": "dot arrow then all the ampersand equal operators that plus equals 9s ego's star",
    "start": "3090230",
    "end": "3098300"
  },
  {
    "text": "equals etc the index operator and the output the i/o operators and the order",
    "start": "3098300",
    "end": "3103940"
  },
  {
    "text": "when we have an order of a function call we don't specify an order now that the",
    "start": "3103940",
    "end": "3109730"
  },
  {
    "text": "for the arguments a B and C they are evaluated in that order but we specify",
    "start": "3109730",
    "end": "3115730"
  },
  {
    "text": "that F so the part before the argument is evaluated before we evaluate the",
    "start": "3115730",
    "end": "3122089"
  },
  {
    "text": "arguments so that's specified now and that solves the problem of us and",
    "start": "3122089",
    "end": "3128410"
  },
  {
    "text": "finally we had also had a very strange rule in the language look at this code",
    "start": "3128410",
    "end": "3133760"
  },
  {
    "text": "and look at the statement the the second",
    "start": "3133760",
    "end": "3139130"
  },
  {
    "text": "and the third statement a bass and ended in the top area a2 and a3 I think almost",
    "start": "3139130",
    "end": "3146839"
  },
  {
    "text": "everybody of you would sing without having deeper knowledge that a 2 has",
    "start": "3146839",
    "end": "3152119"
  },
  {
    "text": "type int but that's not correct according to the language rules we have",
    "start": "3152119",
    "end": "3158390"
  },
  {
    "text": "in C verses 11 and 14 this a 2 was initialized as an initializer list of it",
    "start": "3158390",
    "end": "3165829"
  },
  {
    "text": "and the second took two ends so we fix",
    "start": "3165829",
    "end": "3171470"
  },
  {
    "text": "that because it did definitely violate the expectation of programmers and now",
    "start": "3171470",
    "end": "3177230"
  },
  {
    "text": "with C / 417 this will be an inter x2 on the bottom is definitely an int now and",
    "start": "3177230",
    "end": "3184280"
  },
  {
    "text": "if you pass multiple elements there then this is an error now only if you use an",
    "start": "3184280",
    "end": "3192380"
  },
  {
    "text": "equal sign so if you use copy initialization you still have the old behavior this by the way again means",
    "start": "3192380",
    "end": "3199849"
  },
  {
    "text": "that we have different behavior depending on whether we use copy initialization for the equal sign or not",
    "start": "3199849",
    "end": "3206079"
  },
  {
    "text": "so there are direct initialization which doesn't use the equal sign so there might be a fundamental difference here",
    "start": "3206079",
    "end": "3212710"
  },
  {
    "text": "yeah but it's definitely an improvement and finally for static assert it's no",
    "start": "3212710",
    "end": "3220730"
  },
  {
    "text": "longer required we have a second argument then providing the string that should be printed so the compiler has to",
    "start": "3220730",
    "end": "3227390"
  },
  {
    "text": "find out or how to print in the corresponding error message in the language of the compiler we have 30",
    "start": "3227390",
    "end": "3235280"
  },
  {
    "text": "minutes left so let's talk about why utility just for the experts who are",
    "start": "3235280",
    "end": "3240680"
  },
  {
    "text": "here we have changed a feature called uncor expected and we have replaced it",
    "start": "3240680",
    "end": "3246589"
  },
  {
    "text": "by uncaught excuse me uncaught exception and we have replaced by uncaught exception floor and instead",
    "start": "3246589",
    "end": "3256130"
  },
  {
    "text": "of saying we are now dealing with an exception you can check this use this to",
    "start": "3256130",
    "end": "3261470"
  },
  {
    "text": "find out how many nasty exceptions do we have right now are we are we in I don't",
    "start": "3261470",
    "end": "3268250"
  },
  {
    "text": "know in them in a nested third level of a throw statement also and here you see",
    "start": "3268250",
    "end": "3274700"
  },
  {
    "text": "which problem this solved guess you have",
    "start": "3274700",
    "end": "3279800"
  },
  {
    "text": "a Class C so the class here which bonus if everything is fine commit something",
    "start": "3279800",
    "end": "3286220"
  },
  {
    "text": "and if not roll back so transaction safe class and now you",
    "start": "3286220",
    "end": "3293240"
  },
  {
    "text": "also have a class D and the following problem happens you create a C and D and",
    "start": "3293240",
    "end": "3300099"
  },
  {
    "text": "then you throw well then the destructor gets caught of D the destructor of D",
    "start": "3300099",
    "end": "3308720"
  },
  {
    "text": "cleans up and for cleaning up there use again an object of type C so there has",
    "start": "3308720",
    "end": "3315200"
  },
  {
    "text": "the interesting behavior if you ask them that are we and are we in an environment",
    "start": "3315200",
    "end": "3320750"
  },
  {
    "text": "of uncaught exceptions yes because we are we are implementing behavior in a",
    "start": "3320750",
    "end": "3326150"
  },
  {
    "text": "destructor and but still using C is fine and so we do the following code you see",
    "start": "3326150",
    "end": "3334940"
  },
  {
    "text": "here we create a C and even another C in a try-catch block and then we throw again which is possible but we catch",
    "start": "3334940",
    "end": "3341810"
  },
  {
    "text": "that because of this practice should never throw and that means that we now",
    "start": "3341810",
    "end": "3348920"
  },
  {
    "text": "can find out that C 2 should roll back",
    "start": "3348920",
    "end": "3354770"
  },
  {
    "text": "why C 1 should commit and that that helps with the uncaught exceptions",
    "start": "3354770",
    "end": "3361400"
  },
  {
    "text": "counter within the destructor you can find out that the number of uncaught exceptions has raised after the",
    "start": "3361400",
    "end": "3367730"
  },
  {
    "text": "constructor and that you can use to find out whether you should roll back or commit okay so what was not voted in C++",
    "start": "3367730",
    "end": "3380990"
  },
  {
    "text": "a lot and a lot of really new new core",
    "start": "3380990",
    "end": "3386030"
  },
  {
    "text": "features I will I will tell a little bit about that in the next talk in the afternoon when I talk about the library",
    "start": "3386030",
    "end": "3392680"
  },
  {
    "text": "but as you see here modules concept rates curves in reflection was not part",
    "start": "3392680",
    "end": "3400850"
  },
  {
    "text": "of of C+ or 17s these were the big things we were expecting and also some",
    "start": "3400850",
    "end": "3406910"
  },
  {
    "text": "small things we were expecting we are not adopted so nevertheless I think you",
    "start": "3406910",
    "end": "3414290"
  },
  {
    "text": "saw already a couple of new features that help to deal with a day to day",
    "start": "3414290",
    "end": "3420050"
  },
  {
    "text": "programming and we have the same in the library which I will explain after lunch",
    "start": "3420050",
    "end": "3426890"
  },
  {
    "text": "so tell you about the new library features so I would say that C++ 17 is a",
    "start": "3426890",
    "end": "3434420"
  },
  {
    "text": "significant improvement it's not a revolution the revolution would probably",
    "start": "3434420",
    "end": "3439790"
  },
  {
    "text": "be c plus 20 let's cross singer nothing let's cross fingers here no not cross",
    "start": "3439790",
    "end": "3446360"
  },
  {
    "text": "what is the English word for it fingers crossed so okay I think it's fingers",
    "start": "3446360",
    "end": "3452630"
  },
  {
    "text": "crosses when you lie no that's something different Duffman you know what I mean so let's",
    "start": "3452630",
    "end": "3458750"
  },
  {
    "text": "hope that in C++ 20 we will have this revolution and then a lot of things will",
    "start": "3458750",
    "end": "3463820"
  },
  {
    "text": "change but we have a lot of fixes that will help in day to day programming the",
    "start": "3463820",
    "end": "3470240"
  },
  {
    "text": "good news is compiler support is there try out GCC or G + +7 their online",
    "start": "3470240",
    "end": "3477620"
  },
  {
    "text": "compilers you can try to even out online and clang 4 or Visual Studio 17 with the",
    "start": "3477620",
    "end": "3484850"
  },
  {
    "text": "updates that are coming this year so they're also already pre candidates that",
    "start": "3484850",
    "end": "3491450"
  },
  {
    "text": "they do a lot of it and I can also announce here as an advertisement there",
    "start": "3491450",
    "end": "3498680"
  },
  {
    "text": "will be books covering this issue I'm involved into two books the first one is",
    "start": "3498680",
    "end": "3505280"
  },
  {
    "text": "I plan to write - a book about programming with c++ 17 there's a",
    "start": "3505280",
    "end": "3510620"
  },
  {
    "text": "website you can find details and that's not exactly sure whether it will make it",
    "start": "3510620",
    "end": "3515630"
  },
  {
    "text": "but what we definitely can promise is there will be a C++ template 2nd edition",
    "start": "3515630",
    "end": "3522430"
  },
  {
    "text": "so after all these years I think after 15 years having C++ templates first",
    "start": "3522430",
    "end": "3529460"
  },
  {
    "text": "edition we now will have a second edition and it will cover C++ 11 14 and",
    "start": "3529460",
    "end": "3535400"
  },
  {
    "text": "17 and by the way the book will have 800 pages just describing tempted features",
    "start": "3535400",
    "end": "3542570"
  },
  {
    "text": "in C++ and it's necessary to have them so this will be out in September when",
    "start": "3542570",
    "end": "3549530"
  },
  {
    "text": "CCPD Kong in the US will happen and we",
    "start": "3549530",
    "end": "3554540"
  },
  {
    "text": "are still looking forward seeds for seekers was 20 that's it thank you very",
    "start": "3554540",
    "end": "3559820"
  },
  {
    "text": "much I hope this was interesting and I think we have time for one question",
    "start": "3559820",
    "end": "3566410"
  },
  {
    "text": "anybody want to question something I want to ask something",
    "start": "3566830",
    "end": "3573340"
  },
  {
    "text": "okay then enjoy I'm I'm around here and what I can say is at 140 there's a",
    "start": "3574850",
    "end": "3582950"
  },
  {
    "text": "second part of this talk talking about the library features than you in C++ 17",
    "start": "3582950",
    "end": "3588200"
  },
  {
    "text": "thank you very much and enjoy the conference",
    "start": "3588200",
    "end": "3592300"
  }
]