[
  {
    "text": "all right well it's go time um welcome everyone if you don't know who i am i am steve",
    "start": "960",
    "end": "7359"
  },
  {
    "text": "lorello and i am a developer advocate at redis um and for those of you who are here i",
    "start": "7359",
    "end": "13759"
  },
  {
    "text": "really appreciate it because we are the last slot of the day and for posterity we just had a minor",
    "start": "13759",
    "end": "20880"
  },
  {
    "text": "evacuation that lasted about an hour of the venue so i really appreciate everyone who came back to come to this talk",
    "start": "20880",
    "end": "26880"
  },
  {
    "text": "and today i'm going to be talking about indexing searching and aggregation in redis using redissearch and net",
    "start": "26880",
    "end": "34480"
  },
  {
    "text": "so before i start any talk i usually like to go over just a little bit of an agenda of what i'm going to be talking about that day",
    "start": "34480",
    "end": "41280"
  },
  {
    "text": "we're going to start off with an introduction to what redis is then we're going to talk a little bit",
    "start": "41280",
    "end": "46480"
  },
  {
    "text": "about the different data structures that make up redis then we'll talk about just broadly",
    "start": "46480",
    "end": "51600"
  },
  {
    "text": "secondary indexing and then we're going to look at two modes of secondary indexing in redis",
    "start": "51600",
    "end": "57120"
  },
  {
    "text": "with any redis and with redis search then we'll be talking about writing queries with red red a search and then",
    "start": "57120",
    "end": "64158"
  },
  {
    "text": "writing aggregations with redis search and at the end i'm going to do a little demo of",
    "start": "64159",
    "end": "70880"
  },
  {
    "text": "with basically uh from from an empty console empty uh empty file and i'm just going to show",
    "start": "70880",
    "end": "76560"
  },
  {
    "text": "you all how to sort of get up and running with a new library for redis search that i wrote called redisome.net",
    "start": "76560",
    "end": "82720"
  },
  {
    "text": "so what is redis well you know what i'll i'll just stop right here who in this room has heard of who has heard of redis",
    "start": "82720",
    "end": "89360"
  },
  {
    "text": "before so everyone is here has heard of redis um who in here has used redis for anything",
    "start": "89360",
    "end": "96240"
  },
  {
    "text": "but a cash okay so one person one person and",
    "start": "96240",
    "end": "101680"
  },
  {
    "text": "uh full disclosure the one person who raises their hand i am a co-worker of so one person has used it as anything but a",
    "start": "101680",
    "end": "107759"
  },
  {
    "text": "cache well really what it is it's a nosql database it's a nosql database that's stored",
    "start": "107759",
    "end": "114640"
  },
  {
    "text": "completely in memory so like the entire database is stored in memory um there's durability things that go along with it",
    "start": "114640",
    "end": "120399"
  },
  {
    "text": "where you can offload the data to a disk so there's a disaster you can recover it but in",
    "start": "120399",
    "end": "125439"
  },
  {
    "text": "general it's in memory fundamentally what it is is a key value store but it's also multimodal and we'll get",
    "start": "125439",
    "end": "131520"
  },
  {
    "text": "over the different modals of redis when we talk about the data structures a little bit later",
    "start": "131520",
    "end": "137120"
  },
  {
    "text": "and the two things that really stand out about redis to me at least is that it's",
    "start": "137120",
    "end": "142160"
  },
  {
    "text": "fast and that it's really simple and because of those last two those last two things",
    "start": "142160",
    "end": "148080"
  },
  {
    "text": "it's actually extremely popular and i mean everyone here has heard of radiss and i think a fair number of you have",
    "start": "148080",
    "end": "153519"
  },
  {
    "text": "used it and um it's actually the most beloved uh",
    "start": "153519",
    "end": "158800"
  },
  {
    "text": "database by developers according to the stack overflow survey and i think it's been like that for a few years running now",
    "start": "158800",
    "end": "164959"
  },
  {
    "text": "so redis is a composition of different data structures uh there's five that are",
    "start": "164959",
    "end": "170239"
  },
  {
    "text": "really important to talk about in context of this talk there's strings sets",
    "start": "170239",
    "end": "175360"
  },
  {
    "text": "sorted sets hashes and json and there's more than this but these are the five that are really important in context for",
    "start": "175360",
    "end": "181519"
  },
  {
    "text": "us so strings they are a very simple data structure they're a",
    "start": "181519",
    "end": "187360"
  },
  {
    "text": "single key that retrieves a single value in redis and that value can be further encoded to",
    "start": "187360",
    "end": "194800"
  },
  {
    "text": "numerics or strings and it's the most basic data type in redis so who here has used redis",
    "start": "194800",
    "end": "201760"
  },
  {
    "text": "so of the four people who've used redis one of them has used it uh used probably anything beyond a string",
    "start": "201760",
    "end": "208959"
  },
  {
    "text": "they're the simple and simplest and most commonly used data type and redis and so many users really never get",
    "start": "209360",
    "end": "215519"
  },
  {
    "text": "beyond this data type so basically to use the string in redis you just have to",
    "start": "215519",
    "end": "221040"
  },
  {
    "text": "set it like set foo bar you can get it you can get foo and that'll uh that'll retrieve it from you actually",
    "start": "221040",
    "end": "227200"
  },
  {
    "text": "while we're doing this i'll open up a terminal and i'm going to increase the size of",
    "start": "227200",
    "end": "232720"
  },
  {
    "text": "that so people can actually see it and do i have redis running",
    "start": "232720",
    "end": "238319"
  },
  {
    "text": "i do so if i want to set a string in redis i just do a set",
    "start": "238319",
    "end": "243840"
  },
  {
    "text": "foo bar and then i can just get that string it just stores a simple string at a",
    "start": "243840",
    "end": "249360"
  },
  {
    "text": "particular uh value at a particular key in redis you could do things like appending to foo",
    "start": "249360",
    "end": "256160"
  },
  {
    "text": "uh baz and get foo now returns barbaz",
    "start": "256160",
    "end": "261600"
  },
  {
    "text": "barbaz so those are strings you're really the simplest data data type in redis",
    "start": "261919",
    "end": "269840"
  },
  {
    "text": "sets are like a mathematical set of strings it's",
    "start": "270400",
    "end": "275520"
  },
  {
    "text": "just a set of unordered strings with no duplication allowed and set operations allow you to uh",
    "start": "275520",
    "end": "283280"
  },
  {
    "text": "combine sets together to do different things so in here this example right here we have sad person called the name",
    "start": "283280",
    "end": "289840"
  },
  {
    "text": "coleslaw steve and i'm inserting person colon one and so like",
    "start": "289840",
    "end": "295040"
  },
  {
    "text": "with sets i can do um sad person call a name colin steve",
    "start": "295040",
    "end": "302720"
  },
  {
    "text": "uh person one and i can do sad",
    "start": "302720",
    "end": "308240"
  },
  {
    "text": "person colon name colon guy and do person two and then i can do something like it",
    "start": "308240",
    "end": "314479"
  },
  {
    "text": "s s union person colon name colon steve",
    "start": "314479",
    "end": "320560"
  },
  {
    "text": "person call a name called guy and that's actually going to return to me the um union of those two sets which",
    "start": "320560",
    "end": "328639"
  },
  {
    "text": "are is person colon one and person colon two and you can use these different set",
    "start": "328639",
    "end": "334080"
  },
  {
    "text": "operations to do this then the supported set operations are in",
    "start": "334080",
    "end": "339360"
  },
  {
    "text": "intersections differences in unions sorted sets are kind of like",
    "start": "339360",
    "end": "344800"
  },
  {
    "text": "uh your sets except they're actually ordered so you provide a score for every",
    "start": "344800",
    "end": "349919"
  },
  {
    "text": "member of the set that you're inserting so the example i give here is z range uh",
    "start": "349919",
    "end": "355520"
  },
  {
    "text": "or z range is an age sorted set so i could do a z add",
    "start": "355520",
    "end": "360720"
  },
  {
    "text": "person colon age 32 and then add person colon one and then 45 for person two",
    "start": "360720",
    "end": "368240"
  },
  {
    "text": "and this allows you to not still not duplicate members so you could and you can update them",
    "start": "368240",
    "end": "373520"
  },
  {
    "text": "and you can order them either by score by uh rank or lexographically",
    "start": "373520",
    "end": "378840"
  },
  {
    "text": "so if i went into redis and i did a z ad",
    "start": "378840",
    "end": "384800"
  },
  {
    "text": "person colon age and i had 32 person colon 1 and 45 person",
    "start": "384800",
    "end": "392880"
  },
  {
    "text": "35 45 person colon 2.",
    "start": "392880",
    "end": "398000"
  },
  {
    "text": "make that a little bit bigger i can then do a z range",
    "start": "398000",
    "end": "404319"
  },
  {
    "text": "a person calling age and if i go from zero to negative one i'm going to get",
    "start": "404319",
    "end": "410000"
  },
  {
    "text": "both people if i go from if i do buy score",
    "start": "410000",
    "end": "415360"
  },
  {
    "text": "or sorry so if i do 30 to 35 and i say by score",
    "start": "415360",
    "end": "421120"
  },
  {
    "text": "that's just going to give me person colon 1 whose age is 32 and i can do that with",
    "start": "421120",
    "end": "427280"
  },
  {
    "text": "scores and it'll provide me the uh the score for",
    "start": "427280",
    "end": "432319"
  },
  {
    "text": "that person so it'll give me their their id and their age back",
    "start": "432319",
    "end": "438479"
  },
  {
    "text": "then we have redis hashes and what redis hashes are they're basically a dictionary they're a",
    "start": "440639",
    "end": "446000"
  },
  {
    "text": "dictionary of strings and basically they're a set of field values that you store in this redis hash object",
    "start": "446000",
    "end": "452960"
  },
  {
    "text": "and they're great for if you want to map basically very flat objects in redis so",
    "start": "452960",
    "end": "459599"
  },
  {
    "text": "in this case we're storing a person in here person colon 1 whose age is 32 and",
    "start": "459599",
    "end": "464720"
  },
  {
    "text": "their first name is steve and you can do all sorts of neat things with",
    "start": "464720",
    "end": "469759"
  },
  {
    "text": "these now so i can do each set person colon one first name",
    "start": "469759",
    "end": "474960"
  },
  {
    "text": "or name is steve age is 32 and i can do an each get",
    "start": "474960",
    "end": "483120"
  },
  {
    "text": "person colon one uh name i could just get their",
    "start": "483120",
    "end": "488479"
  },
  {
    "text": "name back which is steve or i can do that with age or if i want to get the entirety of",
    "start": "488479",
    "end": "494639"
  },
  {
    "text": "person colon one back i just do an each get all and i get",
    "start": "494639",
    "end": "500240"
  },
  {
    "text": "the fields and their uh and their values back so this is interesting because it allows us to",
    "start": "500240",
    "end": "506080"
  },
  {
    "text": "actually start um storing objects in redis",
    "start": "506080",
    "end": "511120"
  },
  {
    "text": "then we get to json which is a lot like which is similar conceptually to a hash but you're storing json objects in redis",
    "start": "513440",
    "end": "521599"
  },
  {
    "text": "and the nice the really nice thing about storing json and redis is that you can access the things within",
    "start": "521599",
    "end": "527519"
  },
  {
    "text": "it and you can update the things within it via json path so for example right here i'm doing",
    "start": "527519",
    "end": "533360"
  },
  {
    "text": "jason jason.set person colon1 and i'm passing in this json object which is",
    "start": "533360",
    "end": "539440"
  },
  {
    "text": "you know just me first name steve h32 and you can actually update and query",
    "start": "539440",
    "end": "545680"
  },
  {
    "text": "this by a path the only trick with this is that you have to use a redis module which is an",
    "start": "545680",
    "end": "552160"
  },
  {
    "text": "extension of redis and actually the company i work for redis produces a",
    "start": "552160",
    "end": "557200"
  },
  {
    "text": "bunch of these and they're available under a source available license that you can use them in your applications basically",
    "start": "557200",
    "end": "563279"
  },
  {
    "text": "if you want to use them in your app if you wanted to manage your uh manage your own servers and stuff with that you're free to use it",
    "start": "563279",
    "end": "568880"
  },
  {
    "text": "otherwise you basically have to get it from us but yeah so just to give you a quick demo what this looks like",
    "start": "568880",
    "end": "575440"
  },
  {
    "text": "i'm just going to flush the database and i'll do a json.set",
    "start": "575440",
    "end": "581200"
  },
  {
    "text": "person colon1 this time with name is steve",
    "start": "581200",
    "end": "588560"
  },
  {
    "text": "and ages 32",
    "start": "589360",
    "end": "594880"
  },
  {
    "text": "oh i need to uh pass the path in which can for the base it's either a dollar sign or a period",
    "start": "594880",
    "end": "601440"
  },
  {
    "text": "and then i can just do adjacent get person colon one and i can get",
    "start": "601440",
    "end": "608480"
  },
  {
    "text": "whatever i'm looking for so name",
    "start": "608480",
    "end": "613079"
  },
  {
    "text": "whoops i could get name would just steve or i can get age which is 32.",
    "start": "619360",
    "end": "624959"
  },
  {
    "text": "and this allows you to build much richer objects that your you can add to redis now",
    "start": "624959",
    "end": "630720"
  },
  {
    "text": "and that actually brings us to really what the crux this talk is meant to be and that's finding things in redis",
    "start": "630720",
    "end": "637120"
  },
  {
    "text": "so the trick with redis is because it's a it's a key value database fundamentally you can't just search for things",
    "start": "637120",
    "end": "643760"
  },
  {
    "text": "sort of out of the box with redis you gotta you can't just do like a select star from people where the first name is",
    "start": "643760",
    "end": "648959"
  },
  {
    "text": "steve you can't do a select start from people where age is less than 35. it just isn't set up to work like that",
    "start": "648959",
    "end": "655360"
  },
  {
    "text": "the most efficient queries you can make are on the primary key which",
    "start": "655360",
    "end": "660720"
  },
  {
    "text": "in the example i've been showing you so far has been person colon one right so if i want to find person colon",
    "start": "660720",
    "end": "667120"
  },
  {
    "text": "one if i want to find anything in it i can do it jason dot search or not",
    "start": "667120",
    "end": "672160"
  },
  {
    "text": "json.search houston.get person colon1",
    "start": "672160",
    "end": "677279"
  },
  {
    "text": "and pass in the uh pass in the root path which is a period or a dollar sign and i can get the whole object",
    "start": "677279",
    "end": "684079"
  },
  {
    "text": "but i can't just look for all the people named steve right out of the box here so if i wanted to do this i need to",
    "start": "684079",
    "end": "690320"
  },
  {
    "text": "build a secondary index which is just an efficient way to declare things within the primary index",
    "start": "690320",
    "end": "696560"
  },
  {
    "text": "and like i said the primary index in redis are its keys right so person colon one is the key",
    "start": "696560",
    "end": "703839"
  },
  {
    "text": "and the big difference between the secondary index and the primary index is that it has to be explicitly declared",
    "start": "703839",
    "end": "708880"
  },
  {
    "text": "and you have to separately maintain and update it now",
    "start": "708880",
    "end": "714079"
  },
  {
    "text": "this is what kind of secondary indices look like in any vanilla redis instance",
    "start": "714079",
    "end": "720079"
  },
  {
    "text": "that you might be working with um basically exact matches are",
    "start": "720079",
    "end": "725519"
  },
  {
    "text": "either sorted or unsorted sets if you want to do exact text matches exact",
    "start": "725519",
    "end": "730800"
  },
  {
    "text": "numeric matches you can also do in sets but if you want to sort things or if you",
    "start": "730800",
    "end": "736000"
  },
  {
    "text": "want to have any kind of order for things you have to use sorted sets",
    "start": "736000",
    "end": "741040"
  },
  {
    "text": "and full text you also build off of using sorted sets so these examples here are",
    "start": "741040",
    "end": "748160"
  },
  {
    "text": "basically a sorted set on the right here or just an unordered set on the left",
    "start": "748160",
    "end": "753680"
  },
  {
    "text": "here and as i was showing you before you can basically add the things to that you can add",
    "start": "753680",
    "end": "759519"
  },
  {
    "text": "things to them to actually build your index out so you can store your data in a hash in any form of redis so",
    "start": "759519",
    "end": "768399"
  },
  {
    "text": "and i'll just retrieve that each set command i said i said before",
    "start": "769600",
    "end": "774880"
  },
  {
    "text": "so i can store the data in a hash and then for each",
    "start": "775680",
    "end": "782240"
  },
  {
    "text": "basically whatever you want you want your index name to be field and value you can create a set",
    "start": "782399",
    "end": "787600"
  },
  {
    "text": "so if i want to find all the people named steve i can do a sad",
    "start": "787600",
    "end": "792880"
  },
  {
    "text": "person which is my index name now colons are",
    "start": "792880",
    "end": "798959"
  },
  {
    "text": "the the convention in radis is that you use colons to separate uh things in your name space so person call and name colon",
    "start": "798959",
    "end": "806000"
  },
  {
    "text": "steve i can add person colon one",
    "start": "806000",
    "end": "811200"
  },
  {
    "text": "which when i want to find when i find i want to find all the people named steve i can do it s members",
    "start": "811600",
    "end": "820480"
  },
  {
    "text": "person calling want name colin steve and i can get all the people named steve",
    "start": "820480",
    "end": "827040"
  },
  {
    "text": "back and then i can use that key to do an each get all a person colon one",
    "start": "827040",
    "end": "833440"
  },
  {
    "text": "oh i think i spelled that wrong yeah each get all",
    "start": "837279",
    "end": "842560"
  },
  {
    "text": "person colon1 and that'll get me that that person back so i can use these sets and you can also",
    "start": "842560",
    "end": "849839"
  },
  {
    "text": "use sorted sets to do this to get these and if you want to do more complex queries use a different set",
    "start": "849839",
    "end": "855600"
  },
  {
    "text": "combination operation that we were talking about before with s unions and s intersections and s",
    "start": "855600",
    "end": "860800"
  },
  {
    "text": "differences and you can get you can basically build a conglomeration of different sets that you can combine",
    "start": "860800",
    "end": "867199"
  },
  {
    "text": "together to get the data that you want for numerix you just store the sorted set um you store",
    "start": "867199",
    "end": "873360"
  },
  {
    "text": "an assorted set of just the fields name for the index that you're building and you can basically store the scores",
    "start": "873360",
    "end": "880160"
  },
  {
    "text": "for a particular field and then you just use range queries like i showed you before defined all the",
    "start": "880160",
    "end": "885519"
  },
  {
    "text": "relevant documents to whatever you're looking for and you do the same thing we just basically doing each get all to pull all",
    "start": "885519",
    "end": "891600"
  },
  {
    "text": "the data out of it now the pros of using this type of this type of indexing",
    "start": "891600",
    "end": "898480"
  },
  {
    "text": "redis is that it can be done on any redis database you don't need any special modules or anything that you build out from it to you uh to do this",
    "start": "898480",
    "end": "905440"
  },
  {
    "text": "and allows you to have total control over what you index and what you don't and i kind of facetiously said in here",
    "start": "905440",
    "end": "910959"
  },
  {
    "text": "it's really good for job security because these when you're doing anything particularly complex these get very difficult to maintain",
    "start": "910959",
    "end": "917120"
  },
  {
    "text": "and yeah so any sort of data modeling becomes very complicated and the biggest",
    "start": "917120",
    "end": "922240"
  },
  {
    "text": "problem at least in my opinion is the fact that you can't really horizontally scale your database out",
    "start": "922240",
    "end": "927920"
  },
  {
    "text": "after you build one of these indexes because essentially in redis cluster which is",
    "start": "927920",
    "end": "934160"
  },
  {
    "text": "the horizontally scaled out version of redis you can't operate on different keys",
    "start": "934160",
    "end": "939440"
  },
  {
    "text": "atomically with each other because if one key is on one chart and another key is on another so say your index is on one shard and your actual object's on",
    "start": "939440",
    "end": "945600"
  },
  {
    "text": "another when the object gets updated you can't atomically go over to the database where your index is maintained",
    "start": "945600",
    "end": "952160"
  },
  {
    "text": "and update the index you have to do them separately and this means that you have to make regular consistency updates",
    "start": "952160",
    "end": "958240"
  },
  {
    "text": "throughout your cluster which is real pain-about to use or we can use write a search",
    "start": "958240",
    "end": "964240"
  },
  {
    "text": "which is the topic of this talk so what is redis search well reddit search is a module of redis that's",
    "start": "964240",
    "end": "970959"
  },
  {
    "text": "maintained by us redis it allows you to define a schema of an index and then have redis basically take",
    "start": "970959",
    "end": "977839"
  },
  {
    "text": "care of the indexing for you you can basically automatically use insert your data and redis will",
    "start": "977839",
    "end": "984079"
  },
  {
    "text": "automatically index your data for you and it provides full text search capabilities you can do geofiltering um",
    "start": "984079",
    "end": "991440"
  },
  {
    "text": "you can do you can index automatically across shards",
    "start": "991440",
    "end": "996959"
  },
  {
    "text": "and this is also available under that same source available license that i mentioned earlier so",
    "start": "996959",
    "end": "1002720"
  },
  {
    "text": "to speed up a instance of redis search you want to use the redistac",
    "start": "1002720",
    "end": "1008639"
  },
  {
    "text": "docker image so basically you just run docker run hyphen p six three seven nine colon six",
    "start": "1008639",
    "end": "1014800"
  },
  {
    "text": "three seven nine red is slash redis stack which is what i have running right now",
    "start": "1014800",
    "end": "1020800"
  },
  {
    "text": "now to create an index you can create an index for either of those data types that i refer to earlier",
    "start": "1020800",
    "end": "1026558"
  },
  {
    "text": "a hash or json and the indices may be declared on a particular prefix",
    "start": "1026559",
    "end": "1032480"
  },
  {
    "text": "so for example if you just want to index people you can index them by saying oh",
    "start": "1032480",
    "end": "1038000"
  },
  {
    "text": "the prefix i want to use person colon and that'll create the index for you on just those uh people",
    "start": "1038000",
    "end": "1044000"
  },
  {
    "text": "and indices contain a schema mapping fields to different types within the index and",
    "start": "1044000",
    "end": "1050000"
  },
  {
    "text": "there's four different index types tags which are basically exact matches or",
    "start": "1050000",
    "end": "1055360"
  },
  {
    "text": "faceted matches text which allows you to do full text search numerics which",
    "start": "1055360",
    "end": "1061280"
  },
  {
    "text": "you know index numbers and geo which allows you to index different",
    "start": "1061280",
    "end": "1066559"
  },
  {
    "text": "places for querying things in redis",
    "start": "1066559",
    "end": "1072559"
  },
  {
    "text": "with redis search you use the ft search command and the query syntax varies by data type",
    "start": "1072559",
    "end": "1078799"
  },
  {
    "text": "tags you can do a field name colon the with braces the search data that you're",
    "start": "1078799",
    "end": "1084080"
  },
  {
    "text": "looking for for text you could do field name colon search state uh whatever the source data is for geo you can use a geo filter",
    "start": "1084080",
    "end": "1091440"
  },
  {
    "text": "there's also a new way to actually add the geo to your query and for numerics you basically use square braces",
    "start": "1091440",
    "end": "1098559"
  },
  {
    "text": "to go from a lower to upper bound so i'll just show you that real quick",
    "start": "1098559",
    "end": "1107080"
  },
  {
    "text": "so if i do an h set on add person colon one",
    "start": "1110640",
    "end": "1116640"
  },
  {
    "text": "name is steve age is 32 i can now do a ft.crete which will create the index for",
    "start": "1116640",
    "end": "1123360"
  },
  {
    "text": "me i'll call it person idx",
    "start": "1123360",
    "end": "1128400"
  },
  {
    "text": "and i will say that the schema for this well first i'll say",
    "start": "1128400",
    "end": "1133760"
  },
  {
    "text": "prefix one person colon and i'll say that the schema for this",
    "start": "1133760",
    "end": "1141280"
  },
  {
    "text": "is name tag age numeric",
    "start": "1141280",
    "end": "1147039"
  },
  {
    "text": "and when i want to go do it ft.search person idx i can do a",
    "start": "1147760",
    "end": "1155200"
  },
  {
    "text": "basically a query that says like name is",
    "start": "1155200",
    "end": "1161960"
  },
  {
    "text": "steve and it'll find me all the people named steve and it'll return the whole document for me",
    "start": "1164480",
    "end": "1170640"
  },
  {
    "text": "if i sorry if i flush the database again and i do a json.set",
    "start": "1170640",
    "end": "1177760"
  },
  {
    "text": "person colon 1",
    "start": "1177760",
    "end": "1182159"
  },
  {
    "text": "name steve",
    "start": "1185120",
    "end": "1188240"
  },
  {
    "text": "and i do that same ft.caree command but instead of",
    "start": "1191440",
    "end": "1197280"
  },
  {
    "text": "but declare that it's going to go specifically on json",
    "start": "1197280",
    "end": "1203120"
  },
  {
    "text": "i can still do that same ft search command",
    "start": "1204400",
    "end": "1208480"
  },
  {
    "text": "oh hold on",
    "start": "1209520",
    "end": "1212559"
  },
  {
    "text": "i had to make a slight modification to the schema basically i have to say what the path to",
    "start": "1218480",
    "end": "1224240"
  },
  {
    "text": "the thing i'm indexing is so dollar sign dot name as name",
    "start": "1224240",
    "end": "1231280"
  },
  {
    "text": "and then i can do that kind of search and it'll return to me that the actual document the whole json document in here",
    "start": "1231280",
    "end": "1237919"
  },
  {
    "text": "or in this case it's going to be the same but i can do a return one name",
    "start": "1237919",
    "end": "1243360"
  },
  {
    "text": "and it'll just return the name for me so it basically lets me like search for things and you can do all",
    "start": "1243360",
    "end": "1249360"
  },
  {
    "text": "sorts of different all sorts of neat things with this",
    "start": "1249360",
    "end": "1253280"
  },
  {
    "text": "so that brings us to aggregations which are a different feat another",
    "start": "1255679",
    "end": "1261440"
  },
  {
    "text": "feature of redis search which allows you to query yours your data using that same",
    "start": "1261440",
    "end": "1266880"
  },
  {
    "text": "syntax but then you can actually build pipelines within your data to transform the data that you've received from redis",
    "start": "1266880",
    "end": "1273679"
  },
  {
    "text": "and do things like calculate sums or calculate averages or standard deviations",
    "start": "1273679",
    "end": "1280080"
  },
  {
    "text": "you can do sort all sorts of like string manipulations you can change time stamps although all",
    "start": "1280080",
    "end": "1286240"
  },
  {
    "text": "a bunch of neat things it also allows you to basically filter results based off of the results of your",
    "start": "1286240",
    "end": "1293039"
  },
  {
    "text": "aggregations the first type of thing that you can do in a",
    "start": "1293039",
    "end": "1298400"
  },
  {
    "text": "aggregation is you can you run apply functions so you can apply a function to your data so for example if you have an",
    "start": "1298400",
    "end": "1304799"
  },
  {
    "text": "employee object that you have sales for maybe like a sales adjustment",
    "start": "1304799",
    "end": "1310400"
  },
  {
    "text": "for a region you can just take those two values within redis and combine them together",
    "start": "1310400",
    "end": "1315760"
  },
  {
    "text": "in this pipeline and create a new sales adjusted result for you to access later down the",
    "start": "1315760",
    "end": "1321679"
  },
  {
    "text": "pipeline or when you actually materialize your results you could do a variety of different",
    "start": "1321679",
    "end": "1326720"
  },
  {
    "text": "mathematical and string and time stem functions on the data that you have stored in reddit's using apply functions and you can store the results of an",
    "start": "1326720",
    "end": "1332799"
  },
  {
    "text": "apply function in the pipeline and then you can use them further down the pipeline for things so if i wanted to",
    "start": "1332799",
    "end": "1338000"
  },
  {
    "text": "if i had a bunch of departments and i wanted to combine them all together",
    "start": "1338000",
    "end": "1343120"
  },
  {
    "text": "or combine all the sales of all my representatives together but this sales adjustment thing and i wanted to order",
    "start": "1343120",
    "end": "1348799"
  },
  {
    "text": "my departments by the amount of sales that they had i can do that using research and aggregations",
    "start": "1348799",
    "end": "1356399"
  },
  {
    "text": "group buys and reductions are sort of what you think they are um records with like fields are grouped together and",
    "start": "1356640",
    "end": "1363280"
  },
  {
    "text": "then those group records can run different reduction functions to combine them so for example sums or standard",
    "start": "1363280",
    "end": "1368880"
  },
  {
    "text": "deviations and then group records can also be passed further down the pipeline",
    "start": "1368880",
    "end": "1374480"
  },
  {
    "text": "and that brings us to the actual code demo portion of this talk and that's using redis own so redis",
    "start": "1374480",
    "end": "1380880"
  },
  {
    "text": "own specifically the.net version is a library that i wrote for doing object mapping and creating these searches for",
    "start": "1380880",
    "end": "1387840"
  },
  {
    "text": "you so you don't have to learn all this messy read a search syntax basically you can declare your index on",
    "start": "1387840",
    "end": "1394960"
  },
  {
    "text": "objects uh you can use a fluent api that's based in link to perform searches and aggregations for them and you can do",
    "start": "1394960",
    "end": "1401600"
  },
  {
    "text": "object mapping and other stuff using uh using retisom and there are other iterations of",
    "start": "1401600",
    "end": "1408320"
  },
  {
    "text": "retizone for node python and javascript",
    "start": "1408320",
    "end": "1415039"
  },
  {
    "text": "so uh clear",
    "start": "1415039",
    "end": "1421840"
  },
  {
    "text": "cd projekt shredders so i'm just going to go kind of from jump here and do a net new dash n",
    "start": "1421840",
    "end": "1428559"
  },
  {
    "text": "test redis ohm oh i probably would help if i specify what",
    "start": "1428559",
    "end": "1435360"
  },
  {
    "text": "type new console dash n test redison cd into test",
    "start": "1435360",
    "end": "1442400"
  },
  {
    "text": "redis ohm and open this and i'm going to open it up in ryder",
    "start": "1442400",
    "end": "1449919"
  },
  {
    "text": "well that's opening oh now this is opening that's fine",
    "start": "1454159",
    "end": "1459840"
  },
  {
    "text": "so now this is open i'm just going to run a dot net add",
    "start": "1468559",
    "end": "1473360"
  },
  {
    "text": "package redis.ohm and that's going to install the redis own package",
    "start": "1473600",
    "end": "1480000"
  },
  {
    "text": "locally here and i'm just going to create that you know what i think i'm going to create",
    "start": "1480000",
    "end": "1486080"
  },
  {
    "text": "that employee class i was talking about earlier so i'll do a add cluster interface",
    "start": "1486080",
    "end": "1492480"
  },
  {
    "text": "employee now",
    "start": "1492480",
    "end": "1497679"
  },
  {
    "text": "in employee let's let's give it some fields i'll give it",
    "start": "1497679",
    "end": "1502399"
  },
  {
    "text": "a name i'll give them the our employees names i'll do a",
    "start": "1503360",
    "end": "1509760"
  },
  {
    "text": "prop let's do string department",
    "start": "1509760",
    "end": "1515840"
  },
  {
    "text": "let's do a prop double sales and a prop",
    "start": "1516000",
    "end": "1521600"
  },
  {
    "text": "double sales adjustment",
    "start": "1521600",
    "end": "1525960"
  },
  {
    "text": "and now with redis ohm the things i need to do to basically um",
    "start": "1528159",
    "end": "1534320"
  },
  {
    "text": "declare what i want to index in here is i have to do an indexed i have to add",
    "start": "1534320",
    "end": "1539840"
  },
  {
    "text": "an indexed attribute above my fields and i realized that probably some",
    "start": "1539840",
    "end": "1545840"
  },
  {
    "text": "people might not be able to see this so i'm going to zoom in a little bit so i just have to give this index",
    "start": "1545840",
    "end": "1551440"
  },
  {
    "text": "attribute up here and i can make things in here sortable or aggregateable",
    "start": "1551440",
    "end": "1556640"
  },
  {
    "text": "by just setting them in here so i'm going to make",
    "start": "1556640",
    "end": "1563360"
  },
  {
    "text": "my names indexed i'll make departments indexed",
    "start": "1563360",
    "end": "1569799"
  },
  {
    "text": "i'll make my sales indexed notice we can make everything indexed actually",
    "start": "1574960",
    "end": "1581519"
  },
  {
    "text": "and i spelled adjustment wrong didn't i and for",
    "start": "1583039",
    "end": "1589200"
  },
  {
    "text": "my sales and sales adjustment i think i'm going to want to make perform aggregations on these later so i'm going to make them both aggregateable",
    "start": "1589200",
    "end": "1596840"
  },
  {
    "text": "so aggregatable is true that readable is true",
    "start": "1599440",
    "end": "1604799"
  },
  {
    "text": "i'll use my departments too set those as that readable",
    "start": "1608240",
    "end": "1613600"
  },
  {
    "text": "in this whole employee class i now want to basically declare that this employee class is going to be",
    "start": "1613600",
    "end": "1620159"
  },
  {
    "text": "a quote unquote document in redis and i'm going to give it an index name equals",
    "start": "1620159",
    "end": "1626400"
  },
  {
    "text": "employee idx and",
    "start": "1626400",
    "end": "1632320"
  },
  {
    "text": "the prefix that i'm going to use for all my employees",
    "start": "1632320",
    "end": "1636919"
  },
  {
    "text": "um it's just going to be employee that's just going to be the prefix that it's going to use when it's creating these documents",
    "start": "1643120",
    "end": "1649679"
  },
  {
    "text": "and i can even give them ids so i'll say that this prop string",
    "start": "1649679",
    "end": "1656720"
  },
  {
    "text": "id is a redis id field",
    "start": "1659360",
    "end": "1665519"
  },
  {
    "text": "now when i go into program.cs i basically i'm just going to have to",
    "start": "1665600",
    "end": "1671360"
  },
  {
    "text": "initialize a redisconnection provider so i'll call",
    "start": "1671360",
    "end": "1676480"
  },
  {
    "text": "this provider a new redis connection provider",
    "start": "1676480",
    "end": "1683440"
  },
  {
    "text": "and there's two different ways i could really initialize this i could either initialize this with a connection multiplexer which is the",
    "start": "1683440",
    "end": "1690799"
  },
  {
    "text": "the thing that most people use when they're using redis is they use the stack exchange.redis",
    "start": "1690799",
    "end": "1696159"
  },
  {
    "text": "library and you can either initialize that yourself and pass it into here so you can reuse the same one throughout your",
    "start": "1696159",
    "end": "1702080"
  },
  {
    "text": "app or in this case i'm just going to pass it a connection string",
    "start": "1702080",
    "end": "1707760"
  },
  {
    "text": "which is redis colon or slash forward slash six three seven nine or cold and",
    "start": "1707919",
    "end": "1713120"
  },
  {
    "text": "six three seven nine and this connection string",
    "start": "1713120",
    "end": "1718320"
  },
  {
    "text": "redison knows how to parse it and turn it into a connection for you um and it'll just basically use a connection",
    "start": "1718320",
    "end": "1724240"
  },
  {
    "text": "multiplexer under the hood in case anybody was wondering what a library this is running on top of",
    "start": "1724240",
    "end": "1730559"
  },
  {
    "text": "and then if i want to create my person index all i have to do is say provider.connection.createindex",
    "start": "1730559",
    "end": "1737080"
  },
  {
    "text": "and i can pass in my type which is type of person or it's not a person is it",
    "start": "1737360",
    "end": "1744240"
  },
  {
    "text": "employee and then i have i now now that i've",
    "start": "1744240",
    "end": "1750559"
  },
  {
    "text": "created the index so if i run this and i run",
    "start": "1750559",
    "end": "1756559"
  },
  {
    "text": "the monitor back here if i do a net run you'll see it actually creates the index",
    "start": "1757919",
    "end": "1764559"
  },
  {
    "text": "nicely for me assuming that it didn't just completely error out which it didn't it actually created a an index for me",
    "start": "1764559",
    "end": "1771520"
  },
  {
    "text": "because i um i'm setting this because i didn't specify that a json index is creating on",
    "start": "1771520",
    "end": "1778320"
  },
  {
    "text": "a hash and it's creating this index with employee and the different fields in",
    "start": "1778320",
    "end": "1784320"
  },
  {
    "text": "here that i declared for it to create create it for now to actually start executing some",
    "start": "1784320",
    "end": "1790559"
  },
  {
    "text": "queries on this i need to pull a reddit's collection out of out of this provider so i'll save our",
    "start": "1790559",
    "end": "1797679"
  },
  {
    "text": "collection equals provider dot",
    "start": "1797679",
    "end": "1802960"
  },
  {
    "text": "redis collection and i'll pass in that i'll use the employee object as is generic for this",
    "start": "1802960",
    "end": "1808799"
  },
  {
    "text": "and now this collection i can do a collection. insert async",
    "start": "1808799",
    "end": "1815600"
  },
  {
    "text": "and i can start inserting people into this so new employee",
    "start": "1815600",
    "end": "1820880"
  },
  {
    "text": "and i'll pass steve and",
    "start": "1820880",
    "end": "1827360"
  },
  {
    "text": "see name equals steve my",
    "start": "1827760",
    "end": "1834559"
  },
  {
    "text": "department equals i'll say emea sales or something even though i",
    "start": "1834559",
    "end": "1840240"
  },
  {
    "text": "don't live in europe i'll call say it's limia sales my",
    "start": "1840240",
    "end": "1845519"
  },
  {
    "text": "sales for the year for the sake of argument let's say i had a good year this year and i sold",
    "start": "1846000",
    "end": "1851279"
  },
  {
    "text": "10 million dollars worth of stuff",
    "start": "1851279",
    "end": "1854640"
  },
  {
    "text": "i think that's 10 million that's about 10 million close enough and i'll give myself a sales adjustment",
    "start": "1856720",
    "end": "1862880"
  },
  {
    "text": "of maybe 0.8 maybe it's a regional sales adjustment and we just assume that the european market has more money and we're",
    "start": "1862880",
    "end": "1869360"
  },
  {
    "text": "going to that's how we're going to evaluate our employees and i can just await this it'll insert",
    "start": "1869360",
    "end": "1874399"
  },
  {
    "text": "it into redis for me so if i do a net run",
    "start": "1874399",
    "end": "1879840"
  },
  {
    "text": "you'll see that it created the uh well created the index last time but this time it said that each set method message or",
    "start": "1885519",
    "end": "1894000"
  },
  {
    "text": "method with um the employee and employees the prefix and then i have",
    "start": "1894000",
    "end": "1901519"
  },
  {
    "text": "this ulid right here which is basically an orable uh it's the id that we chose to use it",
    "start": "1901519",
    "end": "1908399"
  },
  {
    "text": "binds that same um or ulid to the id field in here",
    "start": "1908399",
    "end": "1915760"
  },
  {
    "text": "and i pass in it passes in the name of steve department of media sales blah blah blah so it passes all this in for",
    "start": "1915760",
    "end": "1921679"
  },
  {
    "text": "me but the neat thing is now if i just wanted to find all the steves and redis",
    "start": "1921679",
    "end": "1928159"
  },
  {
    "text": "um this is interesting hold on i think ryder is bugging out of me a little bit",
    "start": "1929519",
    "end": "1935840"
  },
  {
    "text": "that's really weird because i put the new liner and it just like gave me a tab okay",
    "start": "1943200",
    "end": "1948720"
  },
  {
    "text": "so now if i want to find all the people named steven here i could do a 4-h",
    "start": "1948720",
    "end": "1954559"
  },
  {
    "text": "of our employees employee where",
    "start": "1954559",
    "end": "1962200"
  },
  {
    "text": "in collection dot where name is equal to",
    "start": "1963679",
    "end": "1970480"
  },
  {
    "text": "steve and i can even await that because that's actually an async asynchronous",
    "start": "1970480",
    "end": "1975679"
  },
  {
    "text": "collection um there's an async interval so i can do this and it'll wait and do i can do a",
    "start": "1975679",
    "end": "1981679"
  },
  {
    "text": "console dot write line and pass in the employee dot",
    "start": "1981679",
    "end": "1990200"
  },
  {
    "text": "name and now if i do a net run in here",
    "start": "1990399",
    "end": "1998320"
  },
  {
    "text": "you'll see that well there's two steves in here now because i inserted a second steve but if i came out of here",
    "start": "2001039",
    "end": "2007840"
  },
  {
    "text": "did a redis cli flush db and i ran this i would exact get exactly",
    "start": "2007840",
    "end": "2013760"
  },
  {
    "text": "one steven here",
    "start": "2013760",
    "end": "2017320"
  },
  {
    "text": "so you can do the same thing for other employees say",
    "start": "2021120",
    "end": "2027039"
  },
  {
    "text": "pass in guy guy royce i'll just say guy",
    "start": "2029440",
    "end": "2035600"
  },
  {
    "text": "do simon and we'll put",
    "start": "2035600",
    "end": "2040960"
  },
  {
    "text": "say guy in to american uh um n a sales and",
    "start": "2040960",
    "end": "2047519"
  },
  {
    "text": "simon apac sales and we start adding other people",
    "start": "2047519",
    "end": "2052879"
  },
  {
    "text": "maybe like this is really how do you know",
    "start": "2054800",
    "end": "2062480"
  },
  {
    "text": "uh let's say bob alice",
    "start": "2064800",
    "end": "2070358"
  },
  {
    "text": "say apac sales and mia sales again",
    "start": "2074240",
    "end": "2079359"
  },
  {
    "text": "and we'll just give them some other sales sales figures so like maybe 500k or 5 million or something like that",
    "start": "2082560",
    "end": "2089838"
  },
  {
    "text": "we'll do something like this and then i can find everybody who in here so like i can do other things too",
    "start": "2106160",
    "end": "2111440"
  },
  {
    "text": "so like if i want to find all the places all the employees whose sales were more than 5",
    "start": "2111440",
    "end": "2117520"
  },
  {
    "text": "million or something x dot sales was greater than",
    "start": "2117520",
    "end": "2126040"
  },
  {
    "text": "do that basically just say x dot sales is greater than that done at run",
    "start": "2130160",
    "end": "2136560"
  },
  {
    "text": "it'll print out all the people in here whose sales are greater than 5 million um i can also do greater than or equal to",
    "start": "2137920",
    "end": "2145838"
  },
  {
    "text": "you can combine different operator uh you can combine different things together too hold on",
    "start": "2148880",
    "end": "2156160"
  },
  {
    "text": "you know what i'm going to do actually at the end here i'm going to do what you should never do with a redis database and i'm just going to call um",
    "start": "2157040",
    "end": "2164000"
  },
  {
    "text": "flushtv never put this in your app",
    "start": "2164000",
    "end": "2169599"
  },
  {
    "text": "never put this in your app i mean if you if you don't care about your as long as you care about your don't care about your data you can put this in your app",
    "start": "2169599",
    "end": "2174800"
  },
  {
    "text": "but if you care about your data keep flash db out of your app but that basically all that's going to do is just every time it's going to flush the",
    "start": "2174800",
    "end": "2179920"
  },
  {
    "text": "database for me at the end so now i won't have duplicates this time",
    "start": "2179920",
    "end": "2186760"
  },
  {
    "text": "so like you can do this with numerics you can combine different queries together",
    "start": "2188160",
    "end": "2195119"
  },
  {
    "text": "so if i want to find all the people who are have sales greater than 5 million",
    "start": "2195119",
    "end": "2200480"
  },
  {
    "text": "or whose name is bob i could do x dot name",
    "start": "2200480",
    "end": "2206800"
  },
  {
    "text": "equals bob for some reason you do that too",
    "start": "2206800",
    "end": "2214160"
  },
  {
    "text": "oh that's an and sorry if i want to do an or and's not going to return anything",
    "start": "2214160",
    "end": "2219200"
  },
  {
    "text": "because there are no bobs who have sales greater than 5 million i can do that",
    "start": "2219200",
    "end": "2224720"
  },
  {
    "text": "and so like redis home allows you to basically use this nice link interface to interact natively with",
    "start": "2224720",
    "end": "2231359"
  },
  {
    "text": "redis search the way you would think you would if you're a net developer um",
    "start": "2231359",
    "end": "2236640"
  },
  {
    "text": "yeah so but then if i wanted to put something like geodata in here i could do that as well",
    "start": "2236640",
    "end": "2241760"
  },
  {
    "text": "so like geolocation data so let's just find some sensible",
    "start": "2241760",
    "end": "2247680"
  },
  {
    "text": "place on google maps",
    "start": "2247680",
    "end": "2251599"
  },
  {
    "text": "well where are we now so if i just drop the pin",
    "start": "2254480",
    "end": "2259359"
  },
  {
    "text": "what's our geo location",
    "start": "2259680",
    "end": "2262800"
  },
  {
    "text": "all right so so i'll do text edit",
    "start": "2264880",
    "end": "2270800"
  },
  {
    "text": "and then i'll just put a bunch of points in here",
    "start": "2270800",
    "end": "2275599"
  },
  {
    "text": "um this does not allow me to zoom in zoom in all right",
    "start": "2277040",
    "end": "2283200"
  },
  {
    "text": "there we go so if i just want to open up a bunch of random places and i want to say like",
    "start": "2283520",
    "end": "2288640"
  },
  {
    "text": "maybe mess with a couple of numbers here and there so 65 and",
    "start": "2288640",
    "end": "2294000"
  },
  {
    "text": "32 and 81 82 or maybe this person is at 54",
    "start": "2294000",
    "end": "2299839"
  },
  {
    "text": "and of course we're in the uk so everything is longitudinally very close",
    "start": "2299839",
    "end": "2305040"
  },
  {
    "text": "um 0.135 so maybe i'll put someone at 1 and 2 and",
    "start": "2305040",
    "end": "2311440"
  },
  {
    "text": "three and four and five and just gradually shoot ourselves i think i think that's going west that's going",
    "start": "2311440",
    "end": "2317119"
  },
  {
    "text": "west right now i can basically declare this geotype in here so i could do",
    "start": "2317119",
    "end": "2323920"
  },
  {
    "text": "um geolock and i won't call this home because that's a",
    "start": "2323920",
    "end": "2329839"
  },
  {
    "text": "little that's a little weird to put in the thing but i'll say i'll say location",
    "start": "2329839",
    "end": "2335040"
  },
  {
    "text": "and then to index that all i need to do is declare this as an index object in here",
    "start": "2335040",
    "end": "2340400"
  },
  {
    "text": "and then i can go into my program file and i can just start adding these",
    "start": "2340400",
    "end": "2346800"
  },
  {
    "text": "locations",
    "start": "2346800",
    "end": "2349440"
  },
  {
    "text": "so uh location equals new geo lock and",
    "start": "2352240",
    "end": "2358240"
  },
  {
    "text": "i actually need to put these in a different order because it expects expected longitude latitude",
    "start": "2358240",
    "end": "2364720"
  },
  {
    "text": "and that is a that is the thing about redis is that when you when you deal with geode coordinates and redis there's a there's",
    "start": "2364720",
    "end": "2370640"
  },
  {
    "text": "a basically a geodata structure too which is one of the data structures i didn't get to but if you're when you're dealing",
    "start": "2370640",
    "end": "2375760"
  },
  {
    "text": "with geo data and redis is one of the quirky things is that they want you to put everything in",
    "start": "2375760",
    "end": "2381040"
  },
  {
    "text": "launches you can latitude even though if you're used to google maps you're probably used to latitude longitude that's a little backwards but it's okay",
    "start": "2381040",
    "end": "2389599"
  },
  {
    "text": "so new geo lock",
    "start": "2394800",
    "end": "2400480"
  },
  {
    "text": "reverse these",
    "start": "2400480",
    "end": "2403960"
  },
  {
    "text": "that's gonna be good enough for us so we're gonna that's all we're gonna do so",
    "start": "2413440",
    "end": "2418480"
  },
  {
    "text": "if i wanted to now start filtering things by their geolocation i can start filtering employees by their geolocation",
    "start": "2418480",
    "end": "2425280"
  },
  {
    "text": "i can start doing that too actually so in here if i said instead of where",
    "start": "2425280",
    "end": "2431520"
  },
  {
    "text": "if i said geofilter i can pass in the",
    "start": "2431520",
    "end": "2438720"
  },
  {
    "text": "part of the object that i want a geofilter so x dot location so it has to really",
    "start": "2438720",
    "end": "2444800"
  },
  {
    "text": "that has to be a geolock and i pass in the longitude and latitude so",
    "start": "2444800",
    "end": "2451280"
  },
  {
    "text": "let's say the lat longitude is this number",
    "start": "2451280",
    "end": "2456720"
  },
  {
    "text": "and the latitude is this number",
    "start": "2456720",
    "end": "2462400"
  },
  {
    "text": "i could then put in a radius from um a radius from the center of that center",
    "start": "2464960",
    "end": "2470960"
  },
  {
    "text": "point that i want to measure out from so let me say 10 and i could give it the unit two which",
    "start": "2470960",
    "end": "2476400"
  },
  {
    "text": "i'll say is miles then i can do a um",
    "start": "2476400",
    "end": "2483280"
  },
  {
    "text": "a.net run in here i think it's just return to be the one",
    "start": "2483280",
    "end": "2488400"
  },
  {
    "text": "record so the only person that's within striking distance is guy",
    "start": "2488400",
    "end": "2494200"
  },
  {
    "text": "guys up here which is why the why the joke is funny and it's a colleague of mine so if i've expanded it out to 50 miles",
    "start": "2496319",
    "end": "2503839"
  },
  {
    "text": "i get both of us like we're both within 50 miles of that point so you can basically build these nice little geo",
    "start": "2503839",
    "end": "2509680"
  },
  {
    "text": "filters on top of everything else and of course i can also add where clauses in here too so i can say",
    "start": "2509680",
    "end": "2515359"
  },
  {
    "text": "x dot first name or x dot name is equal to steve",
    "start": "2515359",
    "end": "2522079"
  },
  {
    "text": "so just find all the steves because we don't care about the guys",
    "start": "2522079",
    "end": "2526480"
  },
  {
    "text": "it'll allow me to filter down on that too now",
    "start": "2528960",
    "end": "2535400"
  },
  {
    "text": "with these queries as well we can we can just like order things by",
    "start": "2537119",
    "end": "2543440"
  },
  {
    "text": "um different things that we've basically marked as sortable or aggregatable so collection dot order by",
    "start": "2543440",
    "end": "2552160"
  },
  {
    "text": "x dot sales",
    "start": "2552160",
    "end": "2555759"
  },
  {
    "text": "that might actually not actually have a um yeah because that doesn't actually return an asynchroidable so if i did that",
    "start": "2562800",
    "end": "2569040"
  },
  {
    "text": "and i employ i print it out let me just do uh",
    "start": "2569040",
    "end": "2573680"
  },
  {
    "text": "some string interpolation here",
    "start": "2576720",
    "end": "2579838"
  },
  {
    "text": "it'll print out an ascending order basically the different sales that everyone had i can also do that order by",
    "start": "2589280",
    "end": "2595359"
  },
  {
    "text": "descending it'll allow you to do that too",
    "start": "2595359",
    "end": "2601680"
  },
  {
    "text": "and the thing is is that like this isn't happening in your um in your app",
    "start": "2601680",
    "end": "2607119"
  },
  {
    "text": "so basically everything that happens before the 4h starts to enumerate is executed on redis so if i went back",
    "start": "2607119",
    "end": "2614319"
  },
  {
    "text": "in here and i ran the redis cli monitor",
    "start": "2614319",
    "end": "2619280"
  },
  {
    "text": "i did a net run basically it's going to create this query for me that's going to actually",
    "start": "2619520",
    "end": "2625839"
  },
  {
    "text": "sort it descending uh in a descending fashion or um if i change this to just order by",
    "start": "2625839",
    "end": "2634760"
  },
  {
    "text": "it'll sort it ascending you'll see that that changed the sending",
    "start": "2636079",
    "end": "2642079"
  },
  {
    "text": "so the nice thing here is that like this really removes a lot of the instructions for you it provides you your objects",
    "start": "2642079",
    "end": "2647839"
  },
  {
    "text": "that you pass into redis in the format that you expect them in which is your domain objects and it allows you to use",
    "start": "2647839",
    "end": "2653440"
  },
  {
    "text": "uh use them kind of nicely and cleanly and the last thing i really kind of want to show off here about this library",
    "start": "2653440",
    "end": "2661200"
  },
  {
    "text": "is the way that you can do aggregations with it so if i want to do those aggregations that",
    "start": "2661200",
    "end": "2666640"
  },
  {
    "text": "i refer to earlier i can basically just pull out um",
    "start": "2666640",
    "end": "2672079"
  },
  {
    "text": "that was that was not a freudian slip that was um because the d and the v are relatively close to each other on the keyboard activation set",
    "start": "2675599",
    "end": "2682640"
  },
  {
    "text": "equals uh provider dot aggregation set employee",
    "start": "2682640",
    "end": "2689800"
  },
  {
    "text": "i'm pretty sure i spelt aggregation wrong there we go",
    "start": "2691920",
    "end": "2697599"
  },
  {
    "text": "and now i can do i can build these pipelines in my app using just the aggregation set so",
    "start": "2697599",
    "end": "2704640"
  },
  {
    "text": "i can take this aggregation set and i can again iterate over it",
    "start": "2704640",
    "end": "2709760"
  },
  {
    "text": "so aggregation set dot i don't have to pass on a where clause",
    "start": "2709760",
    "end": "2715839"
  },
  {
    "text": "here because i'm just going to do an apply and the function that i'm going to apply",
    "start": "2715839",
    "end": "2721200"
  },
  {
    "text": "here apply in here is the function i was talking about before so say i want to take someone",
    "start": "2721200",
    "end": "2726800"
  },
  {
    "text": "all the employees sales i would take the record shell",
    "start": "2726800",
    "end": "2733200"
  },
  {
    "text": "and the funny thing about aggregations and redis is they don't they don't return the objects to you they return whatever the thing in the pipeline is to",
    "start": "2733200",
    "end": "2739440"
  },
  {
    "text": "you so the trick here is that we want to use this record shell here because we this",
    "start": "2739440",
    "end": "2745359"
  },
  {
    "text": "in this record shell is just a null instance of the object that the aggregation set is using to uh",
    "start": "2745359",
    "end": "2751440"
  },
  {
    "text": "basically sub in for the type for you so you know what's actually loaded in the pipeline and so i can do a record shell",
    "start": "2751440",
    "end": "2758240"
  },
  {
    "text": "dot sales times x dot record shell dot sales adjustment",
    "start": "2758240",
    "end": "2767119"
  },
  {
    "text": "and then i just have to pass in the name of the alias that i want to use",
    "start": "2767119",
    "end": "2772400"
  },
  {
    "text": "in the output object so i pass in adjusted sales",
    "start": "2772400",
    "end": "2779039"
  },
  {
    "text": "and now with that done basically all i need to do is",
    "start": "2783520",
    "end": "2788880"
  },
  {
    "text": "change this to adjusted sales",
    "start": "2788880",
    "end": "2792960"
  },
  {
    "text": "adjusted sales and i mean i guess we probably shouldn't call this an employee anymore but it's really just",
    "start": "2796560",
    "end": "2803760"
  },
  {
    "text": "an it's just really just an aggregation result but i'm going to take the employee",
    "start": "2803760",
    "end": "2810400"
  },
  {
    "text": "and i'll pull out this adjusted sales",
    "start": "2811440",
    "end": "2817400"
  },
  {
    "text": "result from here and basically all you need to do to access that is access it through a dictionary",
    "start": "2818560",
    "end": "2823920"
  },
  {
    "text": "like and you use the employee like it's you use this aggregation result as a dictionary and you just do it.net run",
    "start": "2823920",
    "end": "2830720"
  },
  {
    "text": "and that'll actually compute the adjusted sales for all of our employees so um this first employee",
    "start": "2830720",
    "end": "2837760"
  },
  {
    "text": "i guess i could probably do that like a little bit nicer but this first employee here is me with 10 million dollars in sales but i have a",
    "start": "2837760",
    "end": "2844400"
  },
  {
    "text": "i have a sales adjustment of 0.8 so my sales get adjusted down by a factor of 0.8 and it produces this nice little 8",
    "start": "2844400",
    "end": "2851280"
  },
  {
    "text": "million result result for me and you can do that with the rest uh rest of your objects too",
    "start": "2851280",
    "end": "2857680"
  },
  {
    "text": "and not only that if i wanted to apply",
    "start": "2857680",
    "end": "2863440"
  },
  {
    "text": "this sales adjustment here let me put this on a new line so it's a little bit easier to see",
    "start": "2863440",
    "end": "2870720"
  },
  {
    "text": "and i want to take this sales adjustment and i want to do something with it further down the pipeline",
    "start": "2870720",
    "end": "2878400"
  },
  {
    "text": "i can do that too by basically um",
    "start": "2878480",
    "end": "2884240"
  },
  {
    "text": "i mean i can use a sales adjustment and other apply functions or i could do something useful like grouping all of my",
    "start": "2884240",
    "end": "2890000"
  },
  {
    "text": "records together by their department for example so group by",
    "start": "2890000",
    "end": "2895520"
  },
  {
    "text": "um",
    "start": "2895520",
    "end": "2898520"
  },
  {
    "text": "x.recordshell.department and then i can take those departments",
    "start": "2901839",
    "end": "2907920"
  },
  {
    "text": "and i can compute the average sales for them",
    "start": "2907920",
    "end": "2912920"
  },
  {
    "text": "by saying by taking that again and passing in the adjusted sales here",
    "start": "2922400",
    "end": "2929440"
  },
  {
    "text": "as a thing that i want to actually perform the uh this reduction on",
    "start": "2929440",
    "end": "2935920"
  },
  {
    "text": "so i could take all of my uh all of my all of my employees i can group them by the departments i could",
    "start": "2935920",
    "end": "2941920"
  },
  {
    "text": "then average their sales and then i can order my departments",
    "start": "2941920",
    "end": "2948160"
  },
  {
    "text": "by this average",
    "start": "2953760",
    "end": "2957319"
  },
  {
    "text": "then i think i should be able to just say",
    "start": "2961920",
    "end": "2966760"
  },
  {
    "text": "and then",
    "start": "2983200",
    "end": "2985838"
  },
  {
    "text": "i think that should do the trick and basically what this did now is it took all of my sale it took all of my",
    "start": "2995119",
    "end": "3000480"
  },
  {
    "text": "employees sales it averaged it averaged uh all of my different department sales then it",
    "start": "3000480",
    "end": "3005839"
  },
  {
    "text": "ordered them descendingly so you can now make the you could take your these objects that you've inserted into redis",
    "start": "3005839",
    "end": "3012000"
  },
  {
    "text": "which is just a key value store right everyone thinks of get redis is just a key value store",
    "start": "3012000",
    "end": "3017119"
  },
  {
    "text": "i can i can query things now i can index them and i could do all sorts of all sorts of",
    "start": "3017119",
    "end": "3023280"
  },
  {
    "text": "neat things with them like like this right here where basically we're just computing this this",
    "start": "3023280",
    "end": "3029119"
  },
  {
    "text": "random fact about uh the documents that i have stored in redis something you never would have thought you'd be able to do before",
    "start": "3029119",
    "end": "3034559"
  },
  {
    "text": "you're just able to do with uh redisome and reddit search so",
    "start": "3034559",
    "end": "3040960"
  },
  {
    "text": "i guess we're towards the end of our time and i want to leave time for some questions if anybody has any but before",
    "start": "3040960",
    "end": "3046720"
  },
  {
    "text": "i go i just want to tell you a little bit more about me i'm steve again um i'm a developer advocate at radis you can follow me on",
    "start": "3046720",
    "end": "3053520"
  },
  {
    "text": "twitter or github or you could find my website estrella.com um some resources for this talk",
    "start": "3053520",
    "end": "3060640"
  },
  {
    "text": "redis io basically redis.io is basically the hub now for all of the",
    "start": "3060640",
    "end": "3065839"
  },
  {
    "text": "all things redis including reddit search is a there's a part of redis dot io that has some registered stuff in it",
    "start": "3065839",
    "end": "3072319"
  },
  {
    "text": "the redis search docker image is available on hub.docker.com slash redis lab slash read a search",
    "start": "3072319",
    "end": "3078640"
  },
  {
    "text": "redisome is the library that i built is available at github.comredishome.net",
    "start": "3078640",
    "end": "3085400"
  },
  {
    "text": "and the slides are also up in slideshare and if anybody wants to learn more about",
    "start": "3085520",
    "end": "3090960"
  },
  {
    "text": "redis we have this great website called university.reddit.com where we basically offer free classes for anybody who wants",
    "start": "3090960",
    "end": "3096800"
  },
  {
    "text": "to learn more about redis or you could find us all in discord discord dot gg slash redis",
    "start": "3096800",
    "end": "3102400"
  },
  {
    "text": "and really if you have any erratic questions at all you pop in there and just ask us so that's about it does anybody have any",
    "start": "3102400",
    "end": "3108880"
  },
  {
    "text": "questions uh for the",
    "start": "3108880",
    "end": "3115040"
  },
  {
    "text": "searching you were doing you were just searching for steve or guy but what if",
    "start": "3115040",
    "end": "3120160"
  },
  {
    "text": "i never know exactly what i'm searching for and what if i just search for stuff so there's actually",
    "start": "3120160",
    "end": "3126640"
  },
  {
    "text": "so partials wild cards yeah so things i might need a full text search engine yeah so if you if you want",
    "start": "3126640",
    "end": "3133599"
  },
  {
    "text": "to do full text search and read us uh with redis search and that's actually something",
    "start": "3133599",
    "end": "3138720"
  },
  {
    "text": "you know what i don't know why i didn't i don't know why i didn't uh do it but i can declare an object",
    "start": "3138720",
    "end": "3144000"
  },
  {
    "text": "i could declare a field in redis that's searchable",
    "start": "3144000",
    "end": "3148640"
  },
  {
    "text": "and i'll just say like um a personal statement something like that",
    "start": "3149119",
    "end": "3154960"
  },
  {
    "text": "and i think i misspelled statement",
    "start": "3155599",
    "end": "3161040"
  },
  {
    "text": "but i'll just say that my my personal statement is that i uh",
    "start": "3161040",
    "end": "3167440"
  },
  {
    "text": "developer advocate at redis",
    "start": "3167440",
    "end": "3172720"
  },
  {
    "text": "and then all i would need to do is try to match that",
    "start": "3172800",
    "end": "3178319"
  },
  {
    "text": "so far employee in collection dot where",
    "start": "3178319",
    "end": "3184400"
  },
  {
    "text": "x dot x dot personal statement equals",
    "start": "3186240",
    "end": "3192839"
  },
  {
    "text": "redis then i can just print out",
    "start": "3192839",
    "end": "3197040"
  },
  {
    "text": "employee.first.name",
    "start": "3201280",
    "end": "3204280"
  },
  {
    "text": "and you'll see that it printed that printed out for me and so like uh there's basically two types of",
    "start": "3209760",
    "end": "3214880"
  },
  {
    "text": "indexes that you could build and i can't believe i didn't say that earlier but there's indexed and searchable and searchable basically enables full text",
    "start": "3214880",
    "end": "3221359"
  },
  {
    "text": "search for you and read a search for index that creates the more exact type matches and numerics and geo",
    "start": "3221359",
    "end": "3230000"
  },
  {
    "text": "answer it yes awesome",
    "start": "3230000",
    "end": "3234078"
  },
  {
    "text": "anybody else",
    "start": "3235119",
    "end": "3237838"
  },
  {
    "text": "all right well thank you very much um thank you for coming thank you for coming back",
    "start": "3240240",
    "end": "3245359"
  },
  {
    "text": "from the pub or wherever you were after the evacuation before because i really appreciate you all coming out",
    "start": "3245359",
    "end": "3251880"
  },
  {
    "text": "[Applause]",
    "start": "3251880",
    "end": "3255058"
  }
]