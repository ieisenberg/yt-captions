[
  {
    "start": "0",
    "end": "171000"
  },
  {
    "text": "so there we go right so get to grips with asyo or",
    "start": "10040",
    "end": "15119"
  },
  {
    "text": "asinko as I will now call it forever in Python 3 okay so you may be",
    "start": "15119",
    "end": "23359"
  },
  {
    "text": "interested to know that one of the reasons the lights in London stay on these days is because some of some async",
    "start": "23359",
    "end": "29080"
  },
  {
    "text": "IO code that uh I wrote about this time last year which is currently deployed onto",
    "start": "29080",
    "end": "36200"
  },
  {
    "text": "hundreds of single board computers running in industrial facilities around London monitoring power in industrial",
    "start": "36200",
    "end": "42960"
  },
  {
    "text": "facilities and turning those things on and off as the electricity price goes up",
    "start": "42960",
    "end": "48079"
  },
  {
    "text": "and down so what I'm going to talk about today is founded on real world uh",
    "start": "48079",
    "end": "53320"
  },
  {
    "text": "experience of using this library and I'm essentially going to replay the journey of learning that I",
    "start": "53320",
    "end": "61239"
  },
  {
    "text": "went through when I was first getting to grips with this library in order to understand it of course if the lights go",
    "start": "61239",
    "end": "66840"
  },
  {
    "text": "out and the power goes out in the middle of this talk we now know exactly who to",
    "start": "66840",
    "end": "72560"
  },
  {
    "text": "blame those of you who are new to python or learning python you might be interested in uh our books only the",
    "start": "73439",
    "end": "80439"
  },
  {
    "text": "first one is published at the moment python Apprentice It's targeted at people who can program but not",
    "start": "80439",
    "end": "86799"
  },
  {
    "text": "necessarily in Python uh my co-author Austin Bingham is sitting here in the front row and we have a discount code",
    "start": "86799",
    "end": "94399"
  },
  {
    "text": "just for you that URL at the bottom there so the structure of the talk today",
    "start": "94399",
    "end": "100399"
  },
  {
    "text": "I you know what is asyn Kyo why do we care about it why do we need it why is it a",
    "start": "100399",
    "end": "106200"
  },
  {
    "text": "thing I'll start with that then we'll move on to explaining co- routines and",
    "start": "106200",
    "end": "113320"
  },
  {
    "text": "understanding what co- routines are they are at the foundation of how async iio works and I'm actually going to",
    "start": "113320",
    "end": "119479"
  },
  {
    "text": "introduce produce them without ASN Kyo and in fact we are going to build something that is largely equivalent to ASN Kyo without using Ayn Kyo as a way",
    "start": "119479",
    "end": "127320"
  },
  {
    "text": "of understanding how it works from first principles I'm a big believer in the idea that although abstractions are",
    "start": "127320",
    "end": "134400"
  },
  {
    "text": "great and what allow us to to build fantastic systems with much less effort",
    "start": "134400",
    "end": "139480"
  },
  {
    "text": "you should at least understand how things are actually working one abstraction level down from where you're",
    "start": "139480",
    "end": "145760"
  },
  {
    "text": "working dayto day because then when things don't work quite as you expect you have some well-founded intuition",
    "start": "145760",
    "end": "152280"
  },
  {
    "text": "about why they are working the way they are then we are going to actually introduce async IO itself and move on",
    "start": "152280",
    "end": "160200"
  },
  {
    "text": "and see some of the things that async iio layers on top of that very basic implementation but not until the very",
    "start": "160200",
    "end": "166000"
  },
  {
    "text": "Ender we're going to actually begin talking about IO in the context of ACN",
    "start": "166000",
    "end": "171080"
  },
  {
    "start": "171000",
    "end": "171000"
  },
  {
    "text": "Kyo so why do we need ACN Kyo well IO is high latency I'm sure you're all aware",
    "start": "171080",
    "end": "177080"
  },
  {
    "text": "that your computer can do a gazillion things while it's waiting for the next bite from well even from Ram these days",
    "start": "177080",
    "end": "184879"
  },
  {
    "text": "um sequential programs waste resources waiting on iO operations and the traditional solutions",
    "start": "184879",
    "end": "192040"
  },
  {
    "text": "to these of multi-threading or multi-processing carry large resource overheads every thread on Linux is at",
    "start": "192040",
    "end": "198480"
  },
  {
    "text": "least 8 megabytes of virtual memory stack space um and large cognitive overheads",
    "start": "198480",
    "end": "205519"
  },
  {
    "text": "it's hard to reason about these things when there are multiple things happening at the same in time and then we get go",
    "start": "205519",
    "end": "211959"
  },
  {
    "text": "down the rabbit hole of locking and all these difficulties that arise and ultimately the python",
    "start": "211959",
    "end": "218560"
  },
  {
    "text": "interpreter itself is shared mutable State protected by this famous Global",
    "start": "218560",
    "end": "224159"
  },
  {
    "text": "interpreter lock so if we use threads in Python we are throttled by what kevn",
    "start": "224159",
    "end": "229680"
  },
  {
    "text": "Henny would have us call the global interpreter bottleneck so let's just establish a few",
    "start": "229680",
    "end": "236840"
  },
  {
    "start": "235000",
    "end": "235000"
  },
  {
    "text": "definitions to make sure everyone's on the same page here concurrency is about tasks which overlap",
    "start": "236840",
    "end": "243840"
  },
  {
    "text": "in time but in terms of the the start and end times overlap although we're not",
    "start": "243840",
    "end": "249799"
  },
  {
    "text": "necessarily progressing each task at any given or all tasks at any given instant",
    "start": "249799",
    "end": "256239"
  },
  {
    "text": "whereas parallelism is about actually doing things at the same time so this is",
    "start": "256239",
    "end": "262360"
  },
  {
    "text": "dealing with multiple things at once versus doing multiple things at once okay so it's important to understand the",
    "start": "262360",
    "end": "269080"
  },
  {
    "text": "distinction here here so ASN coo is about concurrency whereas threads and",
    "start": "269080",
    "end": "275919"
  },
  {
    "text": "multi-processes for True parallelism require at least more than one core in your",
    "start": "275919",
    "end": "281440"
  },
  {
    "text": "computer so asynchronous versus sequential or versus",
    "start": "281440",
    "end": "286639"
  },
  {
    "text": "synchronous so asynchronous means that we don't need to wait before proceeding we can get on with something else while",
    "start": "286639",
    "end": "292400"
  },
  {
    "text": "wait waiting for a task to complete where synchronous or sequential means that we must complete a unit of work",
    "start": "292400",
    "end": "299199"
  },
  {
    "text": "before we can move on to the next thing okay so of course the overall duration",
    "start": "299199",
    "end": "304240"
  },
  {
    "text": "of work in the sequential situation tends to be longer it's interesting that",
    "start": "304240",
    "end": "310759"
  },
  {
    "text": "I find it interesting that the word synchronous in this use is completely contradictory to the word synchronous in",
    "start": "310759",
    "end": "316919"
  },
  {
    "text": "everyday language use if something is synchronous in the rest of the world that means at the same time and we use",
    "start": "316919",
    "end": "322479"
  },
  {
    "text": "it with the opposite sense here asynchronous versus non-blocking",
    "start": "322479",
    "end": "329759"
  },
  {
    "text": "this is not really an official definition if you like but I it's a useful distinction to make so",
    "start": "329759",
    "end": "335919"
  },
  {
    "text": "asynchronous tasks return immediately often with a promise of some later",
    "start": "335919",
    "end": "341080"
  },
  {
    "text": "result called the future we'll come on to those later whereas non-blocking functions",
    "start": "341080",
    "end": "347720"
  },
  {
    "text": "return immediately but they may come back with no result a partial result or all the result yeah so the styles of",
    "start": "347720",
    "end": "354400"
  },
  {
    "text": "programming you tend to work within these situations are different so with asynchronous programming we we generally",
    "start": "354400",
    "end": "360400"
  },
  {
    "text": "get a call back or a future with non-blocking we generally have to pull something until we actually get all of",
    "start": "360400",
    "end": "367639"
  },
  {
    "text": "what we want okay so this is an important distinction and then down at the kind of",
    "start": "367639",
    "end": "373800"
  },
  {
    "text": "operating system level we can think of different ways of arranging for things to happen we have preemptive",
    "start": "373800",
    "end": "380000"
  },
  {
    "text": "multitasking where the scheduler interrupts tasks this requires that the schedule is running continuously so you",
    "start": "380000",
    "end": "386919"
  },
  {
    "text": "need real Hardware level parallelism for this to work the way operating systems do it is by using Hardware timers in the",
    "start": "386919",
    "end": "393160"
  },
  {
    "text": "CPU to trigger interrupts well there's Cooperative multitasking where now the tasks are in",
    "start": "393160",
    "end": "400080"
  },
  {
    "text": "control and they must yield control back to the scheduler but if they don't yield control back to the scheduler the entire",
    "start": "400080",
    "end": "406440"
  },
  {
    "text": "system hangs okay so important distinctions so asyn Kyo is about",
    "start": "406440",
    "end": "412599"
  },
  {
    "text": "Cooperative multitasking yeah so as Kyo is allows us",
    "start": "412599",
    "end": "420639"
  },
  {
    "text": "to write asynchronous concurrent Cooperative tasks but the great thing about it is it allows us to do it in a",
    "start": "420639",
    "end": "427120"
  },
  {
    "text": "sequential style we don't have to think too much about the fact that multiple things are happening concurrently it",
    "start": "427120",
    "end": "433840"
  },
  {
    "text": "allows us to to quite neatly sidestep all the problems that are usually associated with",
    "start": "433840",
    "end": "441280"
  },
  {
    "text": "concurrency okay so in the next part of the talk we are are going to introduce co- routines I'll explain what co-",
    "start": "446560",
    "end": "452400"
  },
  {
    "text": "routines are I'll explain demonstrate how they work with python from now on we've had no code so far from now on",
    "start": "452400",
    "end": "458520"
  },
  {
    "text": "pretty much everything is going to be code okay I'll show how co- routines are",
    "start": "458520",
    "end": "464280"
  },
  {
    "text": "implemented in Python uh and we're going to build something very similar to acing Kyo without using Asing Kyo and that",
    "start": "464280",
    "end": "471400"
  },
  {
    "text": "will reveal to you that there is no magic and it really is very",
    "start": "471400",
    "end": "476879"
  },
  {
    "text": "straightforward so to do this we need to have some computations we can",
    "start": "477879",
    "end": "485280"
  },
  {
    "start": "478000",
    "end": "478000"
  },
  {
    "text": "do it's forbidden for me to use the fword in any of the presentations I give",
    "start": "485879",
    "end": "492240"
  },
  {
    "text": "otherwise someone will sound the Fibonacci claxon on Twitter so I prefer to use the Lucas sequence which is",
    "start": "492240",
    "end": "499000"
  },
  {
    "text": "closely related to the Fibonacci sequence so here we have a simple generator function Lucas which generates",
    "start": "499000",
    "end": "506319"
  },
  {
    "text": "the Lucas sequence and here I'm just using iter tools is slice to pull off",
    "start": "506319",
    "end": "511400"
  },
  {
    "text": "the first 10 numbers in the Lucas sequence okay we need to use I slice",
    "start": "511400",
    "end": "517200"
  },
  {
    "text": "because the Lucas sequence is infinite and this thing will happily Loop forever as you can see by the while",
    "start": "517200",
    "end": "523320"
  },
  {
    "text": "true in here it will never never exit so we slice off the first 10 so you're going to see me use Lucas calls to Lucas",
    "start": "523320",
    "end": "531040"
  },
  {
    "text": "throughout a big chunk of this talk as a way of just having some computation to do",
    "start": "531040",
    "end": "538160"
  },
  {
    "start": "537000",
    "end": "537000"
  },
  {
    "text": "now we're going to introduce a simple linear search function this is pretty much as simple as python gets we have a",
    "start": "540160",
    "end": "546160"
  },
  {
    "text": "search function which takes an iterable and some predicate function for every item in the iterable we test the",
    "start": "546160",
    "end": "552600"
  },
  {
    "text": "predicate against the item and return the item if we get to the end of the itable without having found something",
    "start": "552600",
    "end": "557880"
  },
  {
    "text": "that matches the predicate we raise a value error with not found everybody with me ises everybody here programming",
    "start": "557880",
    "end": "564720"
  },
  {
    "text": "python or is anyone here new to python okay so it's me taking the effort to",
    "start": "564720",
    "end": "570480"
  },
  {
    "text": "explain some of the Python here so we can call search on the Lucas",
    "start": "570480",
    "end": "575560"
  },
  {
    "text": "sequence uh and we can pass our predicate which basically says give me the first number in the Lucas sequence",
    "start": "575560",
    "end": "581680"
  },
  {
    "text": "which has six or more digits right we take the number convert it to a string measure the length of the string it's a",
    "start": "581680",
    "end": "588839"
  },
  {
    "text": "cheap way so search is just a regular function right there's no no concurrency",
    "start": "588839",
    "end": "595160"
  },
  {
    "text": "happening here if we call search it either directly Returns the result or raises an",
    "start": "595160",
    "end": "601800"
  },
  {
    "start": "600000",
    "end": "600000"
  },
  {
    "text": "exception let's take search and make it into a Cooperative linear search rather than a",
    "start": "601800",
    "end": "608240"
  },
  {
    "text": "blocking search so we'd like to search to periodically yield control to a",
    "start": "608240",
    "end": "615360"
  },
  {
    "text": "scheduler which you will see soon this is very easy all we need to do",
    "start": "615360",
    "end": "621440"
  },
  {
    "text": "is insert the word yield here we're not going to yield any particular result",
    "start": "621440",
    "end": "627079"
  },
  {
    "text": "we're just going to yield okay Now search is not a regular function I'm",
    "start": "627079",
    "end": "634160"
  },
  {
    "text": "also going to rename it to async search to remind us that it's now quite a different",
    "start": "634160",
    "end": "641040"
  },
  {
    "text": "animal so let's import async search and Lucas and we will invoke async search",
    "start": "641480",
    "end": "648160"
  },
  {
    "text": "just as we did previously I'm using a slightly different predicate here so we don't",
    "start": "648160",
    "end": "653200"
  },
  {
    "text": "have to run it for gazillions of iterations we just run it for a few so what is g",
    "start": "653200",
    "end": "659959"
  },
  {
    "text": "right G is not the thing we're looking for with the search right G is a generator object right it is an",
    "start": "659959",
    "end": "668079"
  },
  {
    "text": "object which encapsulates that function and the running state of that function we haven't yet",
    "start": "668079",
    "end": "674120"
  },
  {
    "text": "started iterating that thing but it the generator encapsulates the code and the",
    "start": "674120",
    "end": "681240"
  },
  {
    "text": "state of that particular",
    "start": "681240",
    "end": "686079"
  },
  {
    "text": "invocation so this is called now called the generator function and to make it run up until the first yield we need to",
    "start": "686519",
    "end": "694160"
  },
  {
    "text": "iterate it and the way we iterate in Python is by using the buil-in next function so we do next G and nothing",
    "start": "694160",
    "end": "700399"
  },
  {
    "text": "happen we don't get anything back what's happened is this function has now run up to the yield yielded",
    "start": "700399",
    "end": "706079"
  },
  {
    "text": "nothing and we get nothing back here okay so we've just we've just made it run one iteration of that function okay",
    "start": "706079",
    "end": "712959"
  },
  {
    "text": "now we can make it run the next iteration of that function so each time we call next we're iterate doing one one",
    "start": "712959",
    "end": "719639"
  },
  {
    "text": "more loop on that search Loop yeah the what's interesting and notable",
    "start": "719639",
    "end": "727000"
  },
  {
    "text": "about this is that while we're progressing this function over here we can do other stuff at the same time",
    "start": "727000",
    "end": "733720"
  },
  {
    "text": "right I can print hello world now while that function is running then I can go back to running",
    "start": "733720",
    "end": "741839"
  },
  {
    "text": "advancing my search with next next next",
    "start": "741839",
    "end": "747040"
  },
  {
    "text": "and eventually we fall off the end of the Fall sorry",
    "start": "747040",
    "end": "754480"
  },
  {
    "text": "eventually we get to return item we find the item now normally in generator functions",
    "start": "754480",
    "end": "760279"
  },
  {
    "text": "in Python we have yield some value and return nothing right we flip that around",
    "start": "760279",
    "end": "766600"
  },
  {
    "text": "here we're yielding nothing and we're returning an item and when you return a value from a generator",
    "start": "766600",
    "end": "773120"
  },
  {
    "text": "function well generate functions that return raise what's called a stop iteration exception and if you return a",
    "start": "773120",
    "end": "778800"
  },
  {
    "text": "value python packages up the return value in the payload of that stop iteration",
    "start": "778800",
    "end": "784480"
  },
  {
    "text": "exception object which is kind of unexpected and weird and very rarely used in Python but",
    "start": "784480",
    "end": "792639"
  },
  {
    "text": "we've just used it to actually quite good AFF to make a concurrent",
    "start": "792639",
    "end": "797800"
  },
  {
    "text": "search well as you can see this is this is pretty awkward to work with isn't it this is quite",
    "start": "798360",
    "end": "803920"
  },
  {
    "text": "messy but in theory we have or in practice we have a concurrent search",
    "start": "803920",
    "end": "809760"
  },
  {
    "text": "so async search is a generator function calling async search always returns a generator object we progress the search",
    "start": "809760",
    "end": "816959"
  },
  {
    "text": "by invoking next on the generator object and the final result is quote is is",
    "start": "816959",
    "end": "823480"
  },
  {
    "text": "returned and I use the scare quotes for real here is returned as an exception",
    "start": "823480",
    "end": "830079"
  },
  {
    "text": "payload everybody with me okay because if you're lost at this",
    "start": "830480",
    "end": "835519"
  },
  {
    "text": "point right the rest of the talk is really going to be a waste of your your time okay",
    "start": "835519",
    "end": "843320"
  },
  {
    "text": "so because that's quite horrid to work with let's wrap it up a bit into a",
    "start": "843320",
    "end": "849279"
  },
  {
    "text": "task so a task is a very this is the entirety of the code for task right it",
    "start": "849279",
    "end": "854759"
  },
  {
    "text": "is an a class with an initializer which accepts a routine like the generator",
    "start": "854759",
    "end": "859920"
  },
  {
    "text": "function we just had we pass the co routine to it and it has an ID and we",
    "start": "859920",
    "end": "866079"
  },
  {
    "text": "the I we have a we keep a class ID here which we increment each time and we just",
    "start": "866079",
    "end": "871600"
  },
  {
    "text": "assign the next ID to each task so we get task zero task one task two it's",
    "start": "871600",
    "end": "878199"
  },
  {
    "text": "just a very thin wrapper around the routine now we need a scheduler to run",
    "start": "878199",
    "end": "885680"
  },
  {
    "text": "this routine for us because doing all this next stop iteration stuff by hand is is quite",
    "start": "885680",
    "end": "891360"
  },
  {
    "text": "fiddly so our schedule alert is very simple the schedu alert contains a q",
    "start": "891360",
    "end": "899680"
  },
  {
    "text": "of runable tasks and it contains two dictionaries which contain results from completed",
    "start": "899680",
    "end": "905880"
  },
  {
    "text": "tasks or exceptions which have been raised by tasks which have",
    "start": "905880",
    "end": "911600"
  },
  {
    "text": "failed we have a function add for a routine which is essentially a",
    "start": "911600",
    "end": "917519"
  },
  {
    "text": "wrapper actually wraps the routine in a task and adds the task to the que and",
    "start": "917519",
    "end": "924440"
  },
  {
    "text": "Returns the task ID yeah extremely simple and then we have this function",
    "start": "924440",
    "end": "930279"
  },
  {
    "text": "here run to completion which actually is going to run the tasks this",
    "start": "930279",
    "end": "938040"
  },
  {
    "text": "is kind of simple and it has a certain Elegance to it I think while there are",
    "start": "938040",
    "end": "943279"
  },
  {
    "text": "tasks to run in the queue take the first task off the front",
    "start": "943279",
    "end": "949680"
  },
  {
    "text": "of the queue print a message that we're about to run the task with that ID try",
    "start": "949680",
    "end": "955360"
  },
  {
    "text": "to run it by iterating it with next capture the result that comes back from",
    "start": "955360",
    "end": "961120"
  },
  {
    "text": "next that should be nonone okay if passing it to next raised the stop iteration with the task is finished it",
    "start": "961120",
    "end": "967959"
  },
  {
    "text": "has returned the result which we need to capture from the except so the exception",
    "start": "967959",
    "end": "973000"
  },
  {
    "text": "is captured as stopped we capture the value payload from the exception and stick that into the dictionary",
    "start": "973000",
    "end": "980519"
  },
  {
    "text": "of results for finished tasks if we get another exception that isn't a stop",
    "start": "980519",
    "end": "986800"
  },
  {
    "text": "iteration something else has gone wrong and we basically do the same again except we stick the exception object",
    "start": "986800",
    "end": "992199"
  },
  {
    "text": "into the dictionary failed tasks okay else blocks on Tri blocks are",
    "start": "992199",
    "end": "999199"
  },
  {
    "text": "something that's particular to python and a bit curious you end up in an else you end up in a triy else if the try was",
    "start": "999199",
    "end": "1007360"
  },
  {
    "text": "successful this is the least intuitive thing in the whole language and I just",
    "start": "1007360",
    "end": "1012519"
  },
  {
    "text": "have to tell you that so we're going to come here if we successfully iterated and it didn't return we assert that",
    "start": "1012519",
    "end": "1019720"
  },
  {
    "text": "yielded is nonone because if we someone's yielding something else they're not playing by the rules we expect them to play by we print a",
    "start": "1019720",
    "end": "1027000"
  },
  {
    "text": "message and we take the task and we stick it back on the back of the",
    "start": "1027000",
    "end": "1033160"
  },
  {
    "text": "queue so it will go around again yeah so we always pop the task off the front and if it needs to be iterated again we",
    "start": "1033160",
    "end": "1039480"
  },
  {
    "text": "stick it back on the other end it's quite has a certain Elegance to it I think so that is the entirety of the",
    "start": "1039480",
    "end": "1046880"
  },
  {
    "text": "scheduler for co- routines",
    "start": "1046880",
    "end": "1050840"
  },
  {
    "text": "everyone okay with that let's go so let's try it let's import our Schuler and",
    "start": "1052280",
    "end": "1059520"
  },
  {
    "text": "instantiate one and we will add our async search task for the on the Lucas",
    "start": "1059520",
    "end": "1065559"
  },
  {
    "text": "sequence with this predicate the first number with six or more digits and",
    "start": "1065559",
    "end": "1071120"
  },
  {
    "text": "called run to completion and we only have one task so it's just going to spin around that while loop running task zero",
    "start": "1071120",
    "end": "1078120"
  },
  {
    "text": "next next next next next next and eventually it will raise the exception",
    "start": "1078120",
    "end": "1083480"
  },
  {
    "text": "and we'll capture the result here and then we can go in and pop the result out",
    "start": "1083480",
    "end": "1088760"
  },
  {
    "text": "of that dictionary so this is for task zero which is the only task we created",
    "start": "1088760",
    "end": "1094120"
  },
  {
    "text": "so we have a schedule that can run one task",
    "start": "1094120",
    "end": "1099799"
  },
  {
    "text": "woo but of course we can run more than one task so using the same schedular",
    "start": "1101280",
    "end": "1106320"
  },
  {
    "text": "instance We'll add another task we'll just do two searches one for Sev digigit Lucas numbers and one for nine-digit",
    "start": "1106320",
    "end": "1112640"
  },
  {
    "text": "Lucas numbers now when we run to completion we alternately run task one",
    "start": "1112640",
    "end": "1118919"
  },
  {
    "text": "two one two one two task one completes first we get the",
    "start": "1118919",
    "end": "1124360"
  },
  {
    "text": "result task two takes a bit longer then we get the second result here okay nice",
    "start": "1124360",
    "end": "1130919"
  },
  {
    "text": "huh really simple concurrent execution using co-",
    "start": "1130919",
    "end": "1137720"
  },
  {
    "text": "routines mented using python generators so you could do this in",
    "start": "1137720",
    "end": "1143720"
  },
  {
    "text": "versions of python going back to like 2 four or three or something yeah long way",
    "start": "1143720",
    "end": "1150440"
  },
  {
    "start": "1149000",
    "end": "1149000"
  },
  {
    "text": "back okay so Lucas numbers is fine but we need to really demonstrate this we",
    "start": "1150440",
    "end": "1155880"
  },
  {
    "text": "need some slightly heavier computation so and also to demonstrate some problems",
    "start": "1155880",
    "end": "1161240"
  },
  {
    "text": "you run into with concurrent programming we need some heavier computation so here's my ndy is prime is prime",
    "start": "1161240",
    "end": "1169080"
  },
  {
    "text": "primality testing function don't use this for real it's",
    "start": "1169080",
    "end": "1174400"
  },
  {
    "text": "horribly inefficient but that actually helps in this case um and of course it",
    "start": "1174400",
    "end": "1179799"
  },
  {
    "text": "works as you would expect we can test primality of numbers the point about this is because it's horribly",
    "start": "1179799",
    "end": "1185520"
  },
  {
    "text": "inefficient although I can test the primality of that in like half a second testing the primality of that takes half",
    "start": "1185520",
    "end": "1192600"
  },
  {
    "text": "a week right it takes a long time right I have to maybe not half a week but I have to run through 1.5 billion",
    "start": "1192600",
    "end": "1199720"
  },
  {
    "text": "numbers to for this to return true which takes a while python is not a",
    "start": "1199720",
    "end": "1206200"
  },
  {
    "text": "fast language okay here's another co- routine",
    "start": "1206200",
    "end": "1212120"
  },
  {
    "start": "1207000",
    "end": "1207000"
  },
  {
    "text": "this is very similar to the search Co routine except it prints all the matching results okay so we're just",
    "start": "1212120",
    "end": "1218120"
  },
  {
    "text": "looping around anything that matches we print that we found an item and we yield to the schuer yeah so we're just going",
    "start": "1218120",
    "end": "1224640"
  },
  {
    "text": "to Loop through a sequence so here we go",
    "start": "1224640",
    "end": "1230640"
  },
  {
    "text": "we import async print matches is Prime and Lucas we set up the schedule we add",
    "start": "1231559",
    "end": "1237640"
  },
  {
    "text": "a task so print all the numbers from the Lucas sequence which are",
    "start": "1237640",
    "end": "1243520"
  },
  {
    "text": "prime okay off we go we get two four is not prime three Etc we get prime",
    "start": "1243520",
    "end": "1253080"
  },
  {
    "text": "numbers with of course increasing gaps as we go up the sequence okay okay so",
    "start": "1253280",
    "end": "1260120"
  },
  {
    "text": "that was one this is one task running just task zero there now we want another",
    "start": "1260120",
    "end": "1266840"
  },
  {
    "start": "1265000",
    "end": "1265000"
  },
  {
    "text": "message another task to run so I've cooked up this task here called repetitive message and all it does is it",
    "start": "1266840",
    "end": "1273440"
  },
  {
    "text": "prints a string at some time interval",
    "start": "1273440",
    "end": "1278840"
  },
  {
    "text": "yeah so infinite Loop this task never completes just runs forever prints the",
    "start": "1278840",
    "end": "1285000"
  },
  {
    "text": "message and then this is basically a sleep right right we just",
    "start": "1285000",
    "end": "1292919"
  },
  {
    "text": "wait until the duration expires then we break out of the inner while loop and go",
    "start": "1292919",
    "end": "1298720"
  },
  {
    "text": "around again and print the message again very straightforward to make this Cooperative",
    "start": "1298720",
    "end": "1305320"
  },
  {
    "text": "we just need to add the yield in in a loop",
    "start": "1305320",
    "end": "1310520"
  },
  {
    "text": "okay and being good citizens we'll rename it as async repetitive message",
    "start": "1311919",
    "end": "1319400"
  },
  {
    "text": "there's a subtle bug here if the interval is a very small",
    "start": "1319400",
    "end": "1325400"
  },
  {
    "text": "number like zero right this will never yield right because you'll come in here",
    "start": "1325400",
    "end": "1332440"
  },
  {
    "text": "break go back here come back to here break and you'll never get to this yield you have to be really quite careful",
    "start": "1332440",
    "end": "1337720"
  },
  {
    "text": "about where you yield",
    "start": "1337720",
    "end": "1341080"
  },
  {
    "text": "control you need to yield control there you need to ensure that all your co- routin",
    "start": "1343200",
    "end": "1350360"
  },
  {
    "text": "and even though I'm not writing asyn Kyo code this rule applies to asyn Kyo you need to ensure that all your",
    "start": "1350360",
    "end": "1357000"
  },
  {
    "text": "coroin yield well either return a result immediately or",
    "start": "1357000",
    "end": "1362520"
  },
  {
    "text": "yield yeah so you need to be quite careful about the control flow here and make sure you're yielding at least",
    "start": "1362520",
    "end": "1369120"
  },
  {
    "text": "once otherwise you'll hang the whole system so we need to get this yield in",
    "start": "1369120",
    "end": "1374200"
  },
  {
    "text": "the right place which is there",
    "start": "1374200",
    "end": "1378960"
  },
  {
    "text": "so let's see this running so we'll import the stuff we",
    "start": "1385559",
    "end": "1390640"
  },
  {
    "text": "need instantiate a scheduler schedule a",
    "start": "1390640",
    "end": "1396039"
  },
  {
    "text": "task I spend a lot of time in",
    "start": "1396039",
    "end": "1399960"
  },
  {
    "text": "airports if I'd recently been through skip holders would say mind your step",
    "start": "1401120",
    "end": "1407840"
  },
  {
    "text": "Okay so we've set up a unattended baggage will be destroyed every two and a half seconds and we're going to",
    "start": "1410720",
    "end": "1417240"
  },
  {
    "text": "calculate Primes from the Lucas sequence concurrently run to completion let's",
    "start": "1417240",
    "end": "1424559"
  },
  {
    "text": "go we get our message after two and a half seconds there was one at the beginning as",
    "start": "1424559",
    "end": "1430600"
  },
  {
    "text": "well but now we've stop getting our messages right we should be getting",
    "start": "1430600",
    "end": "1436760"
  },
  {
    "text": "unattended baggage will be destroyed every two and a half seconds but we haven't we're stalled on task zero",
    "start": "1436760",
    "end": "1443520"
  },
  {
    "text": "here what's going on now eventually we get one after a very large prime number right that's",
    "start": "1443520",
    "end": "1450600"
  },
  {
    "text": "because determining the primality of large numbers takes a long time and even",
    "start": "1450600",
    "end": "1455720"
  },
  {
    "text": "though our search function is concurrent our primality testing function is not",
    "start": "1455720",
    "end": "1461679"
  },
  {
    "text": "it's blocking right so we've committed a great sin here in concurrent programming",
    "start": "1461679",
    "end": "1467000"
  },
  {
    "text": "of invoking a blocking function right and the whole system has to wait for that to",
    "start": "1467000",
    "end": "1474000"
  },
  {
    "text": "complete so there we are async print matches is non-blocking but is prime",
    "start": "1474000",
    "end": "1480000"
  },
  {
    "text": "blocks on large numbers stalling the whole system so we need to fix",
    "start": "1480000",
    "end": "1486120"
  },
  {
    "text": "that so we've just discovered a rule really which is that everything you call transitively from a co- routine should",
    "start": "1486120",
    "end": "1492880"
  },
  {
    "text": "be non-blocking okay everything cuz if you call anything blocking the entire call",
    "start": "1492880",
    "end": "1499279"
  },
  {
    "text": "stack you're going to hang the whole system so co-routines are contagious to Calles is one way of looking that",
    "start": "1499279",
    "end": "1506720"
  },
  {
    "text": "looking at that right okay so let's fix our is prime",
    "start": "1506720",
    "end": "1514039"
  },
  {
    "text": "function so here's the original is Prime on the left and calling this returns a bull true or false here's async is prime",
    "start": "1514039",
    "end": "1522039"
  },
  {
    "text": "which is exactly the same thing except now we have a yield in this Loop right and calling this of course returns a",
    "start": "1522039",
    "end": "1527760"
  },
  {
    "text": "generator of object so we need to iterate it with next and it will work with our",
    "start": "1527760",
    "end": "1533080"
  },
  {
    "start": "1533000",
    "end": "1533000"
  },
  {
    "text": "schuer we also need to fix the every call site of is prime because calling it",
    "start": "1533279",
    "end": "1539679"
  },
  {
    "text": "returns a generator we cannot just call it we have",
    "start": "1539679",
    "end": "1545279"
  },
  {
    "text": "to iterate it and the way we call nested generators from generators is with yield",
    "start": "1545279",
    "end": "1552600"
  },
  {
    "text": "from which if my memory serves me correctly is Python 3 only",
    "start": "1552600",
    "end": "1559120"
  },
  {
    "text": "yeah if you did this in Python 2 you'd have to write an explicit for Loop here to iterate that thing okay so this",
    "start": "1559600",
    "end": "1566320"
  },
  {
    "text": "avoids having to us having to put an extra for Loop in",
    "start": "1566320",
    "end": "1572159"
  },
  {
    "text": "here so now we're using yield from because we're using yield from",
    "start": "1572159",
    "end": "1577520"
  },
  {
    "text": "which eventually right is going to our async predicate in this case is async is prime because we have this yield form",
    "start": "1577520",
    "end": "1584640"
  },
  {
    "text": "and this yield here we no longer need this yield here",
    "start": "1584640",
    "end": "1590240"
  },
  {
    "text": "so this is a term I've invented bare yield right you don't need it in this",
    "start": "1591159",
    "end": "1596960"
  },
  {
    "text": "case as long as you are yielding to another co- routine that you're",
    "start": "1596960",
    "end": "1602320"
  },
  {
    "text": "delegating to okay so we can get rid of the bare yield I'll come back to this term bare yield in a minute so this is",
    "start": "1602320",
    "end": "1609520"
  },
  {
    "text": "the second rule which is that everything that calls transitively your co- routine",
    "start": "1609520",
    "end": "1614720"
  },
  {
    "text": "must iterate the generator so not only are co- routines contain to call E they",
    "start": "1614720",
    "end": "1620240"
  },
  {
    "text": "are contagious to call SS and of course you don't have to think about this very hard to realize that very soon your",
    "start": "1620240",
    "end": "1627000"
  },
  {
    "text": "entire program needs to be asynchronous except for the main function right that",
    "start": "1627000",
    "end": "1632120"
  },
  {
    "text": "is logically where you end up yeah or at least if not asynchronous at least",
    "start": "1632120",
    "end": "1637799"
  },
  {
    "text": "non-blocking right so it's very hard to take an",
    "start": "1637799",
    "end": "1643320"
  },
  {
    "text": "existing system which is not written in this style and turn it into a system system written in this style this is a",
    "start": "1643320",
    "end": "1650399"
  },
  {
    "text": "good thing to adopt at the beginning right but you're going to have a pretty hard time refracturing your way from",
    "start": "1650399",
    "end": "1655840"
  },
  {
    "text": "whatever you have to something that works like this because of this contagious viral",
    "start": "1655840",
    "end": "1661960"
  },
  {
    "text": "property of asynchronous",
    "start": "1661960",
    "end": "1667440"
  },
  {
    "start": "1668000",
    "end": "1668000"
  },
  {
    "text": "programming so here's another case where this this contagious thing crops up so",
    "start": "1669480",
    "end": "1675120"
  },
  {
    "text": "we had async repetitive message here which basically printed a message and then had a sleep so this thing here is",
    "start": "1675120",
    "end": "1683000"
  },
  {
    "text": "sleep effectively right so let's do a a nice refactoring and extract an async",
    "start": "1683000",
    "end": "1688919"
  },
  {
    "text": "sleep function or extract generator refactoring so here we've extracted that",
    "start": "1688919",
    "end": "1695840"
  },
  {
    "text": "all the code except the print into async sleep which is here this now has the",
    "start": "1695840",
    "end": "1701279"
  },
  {
    "text": "bare yield and we can yield from async sleep here okay so that's just a",
    "start": "1701279",
    "end": "1707120"
  },
  {
    "text": "straightforward extract function or extract method refactoring done with generators okay so rather than a call we",
    "start": "1707120",
    "end": "1714080"
  },
  {
    "text": "have to use yield from",
    "start": "1714080",
    "end": "1717320"
  },
  {
    "text": "here make sense following",
    "start": "1719320",
    "end": "1724518"
  },
  {
    "text": "good so this sleep thing turns out to be significant so async sleep always yields",
    "start": "1724840",
    "end": "1732399"
  },
  {
    "text": "at least once because that's one of the guidelines they gave you right we come in here and you always get to that yield",
    "start": "1732399",
    "end": "1738519"
  },
  {
    "text": "at least once asyn sleep zero yields exactly",
    "start": "1738519",
    "end": "1744720"
  },
  {
    "text": "once right which is nice a useful",
    "start": "1744720",
    "end": "1751440"
  },
  {
    "text": "property so any because of this any occurrences of bare yield anywhere else",
    "start": "1751440",
    "end": "1756760"
  },
  {
    "text": "in our system can be replaced with yield from async sleep zero and that means the",
    "start": "1756760",
    "end": "1762960"
  },
  {
    "text": "only bare yield we need in the entire system can live inside the sleep function",
    "start": "1762960",
    "end": "1768919"
  },
  {
    "text": "all right which further means that if the",
    "start": "1768919",
    "end": "1774080"
  },
  {
    "text": "async sleep function is provided to you by theu you don't need any bare yields anywhere in your system right so the",
    "start": "1774080",
    "end": "1781360"
  },
  {
    "text": "only bare yield then lives in can live inside the schu",
    "start": "1781360",
    "end": "1786240"
  },
  {
    "text": "itself so by applying this replacement of bare",
    "start": "1787200",
    "end": "1793039"
  },
  {
    "text": "yield with async sleep we can take all the other code we've written so far we can find all the bare yields as one one",
    "start": "1793039",
    "end": "1798240"
  },
  {
    "text": "here and one here and we can replace them with yield from async sleep zero now you just think well okay I've just",
    "start": "1798240",
    "end": "1804480"
  },
  {
    "text": "added some code to no effect well actually that's going to turn out to be important in a refactoring that's coming",
    "start": "1804480",
    "end": "1812159"
  },
  {
    "text": "soon just to prove to you that it was actually a refactoring and we haven't changed the behavior of the system one",
    "start": "1818840",
    "end": "1824679"
  },
  {
    "text": "iota we will run it again",
    "start": "1824679",
    "end": "1829398"
  },
  {
    "text": "we'll set up our repetitive message remember now we have async is prime rather than is",
    "start": "1832200",
    "end": "1839000"
  },
  {
    "text": "prime rter completion we get our prime numbers and",
    "start": "1839000",
    "end": "1844240"
  },
  {
    "text": "we should keep getting our repetitive message now because is prime is no longer blocking yeah so this will keep",
    "start": "1844240",
    "end": "1851799"
  },
  {
    "text": "going and I think for the next one we have to wait like half an hour so I'm",
    "start": "1851799",
    "end": "1858360"
  },
  {
    "text": "not going to do that you do have to wait a",
    "start": "1858360",
    "end": "1863399"
  },
  {
    "text": "while okay so we're about halfway through I",
    "start": "1864720",
    "end": "1870880"
  },
  {
    "text": "guess yes exactly halfway through which is great so we've got this far without",
    "start": "1870880",
    "end": "1876840"
  },
  {
    "text": "mentioning ACN Kyo but I've actually built something that does exactly what AC and Kyo does I just haven't used all",
    "start": "1876840",
    "end": "1883159"
  },
  {
    "text": "the new fancy keywords that we get in Python 3.5 and 3.6 in fact what I've shown you is very close to how asyn coo",
    "start": "1883159",
    "end": "1891440"
  },
  {
    "text": "is used in Python 3.4 before they introduce the await and",
    "start": "1891440",
    "end": "1896600"
  },
  {
    "text": "async keywords okay so knowing what I've just shown you you could uh any Python",
    "start": "1896600",
    "end": "1902840"
  },
  {
    "text": "3.4 code will look very",
    "start": "1902840",
    "end": "1906840"
  },
  {
    "text": "familiar and in fact what I have shown you is so closely equivalent to async",
    "start": "1909519",
    "end": "1915639"
  },
  {
    "text": "iio I can actually programmatically refact what I've written into the real asyn Kyo code or mechanically refactor",
    "start": "1915639",
    "end": "1922919"
  },
  {
    "text": "so let's do that so there's all the code we've I've shown you so",
    "start": "1922919",
    "end": "1928000"
  },
  {
    "text": "far on the right here I'll show you the refactoring steps so the first thing we do is we're going to take anytime I've",
    "start": "1928000",
    "end": "1934639"
  },
  {
    "text": "written def asyncore Fu and we're going to refactor that to",
    "start": "1934639",
    "end": "1940320"
  },
  {
    "text": "async Def Fu which is a new keyword in Python okay so now we have async def this is a",
    "start": "1940320",
    "end": "1947919"
  },
  {
    "text": "way of declaring a co- routine in Python 3.5 and onwards next thing is of course I'm",
    "start": "1947919",
    "end": "1954360"
  },
  {
    "text": "going to import async iio up there there it",
    "start": "1954360",
    "end": "1959000"
  },
  {
    "text": "is now I'm going to replace my calls to async sleep my own sleep function with",
    "start": "1959399",
    "end": "1965960"
  },
  {
    "text": "calls to asyn iio do sleep which is the library provided function so we do the",
    "start": "1965960",
    "end": "1971240"
  },
  {
    "text": "that refactoring now because I'm calling the library sleep I don't need my sleep",
    "start": "1971240",
    "end": "1976960"
  },
  {
    "text": "anymore we can get rid of of that that's gone finally we can replace any",
    "start": "1976960",
    "end": "1983279"
  },
  {
    "text": "occurrence of yield from with await which is a new",
    "start": "1983279",
    "end": "1989039"
  },
  {
    "text": "keyword in Python 3.5 and onwards and behind the scenes python is working",
    "start": "1989039",
    "end": "1995519"
  },
  {
    "text": "exactly the same way with iterators and generators and all these things right so that's all the async",
    "start": "1995519",
    "end": "2001760"
  },
  {
    "text": "and await are doing the only thing they do over and above that is they actually",
    "start": "2001760",
    "end": "2007120"
  },
  {
    "text": "give the functions slightly different types so python knows they are await",
    "start": "2007120",
    "end": "2013200"
  },
  {
    "text": "bles so that is now legitimate python 3.5 or 3.6",
    "start": "2013200",
    "end": "2020159"
  },
  {
    "text": "code so let's run it in Python 3.5",
    "start": "2023240",
    "end": "2028399"
  },
  {
    "text": "slight differences here I have to have to get the ACN Kyo event Loop now rather",
    "start": "2040760",
    "end": "2046320"
  },
  {
    "text": "than creating my own scheduler I don't need my own scheduler anymore the asyn Kyo event Loop is python scheduler",
    "start": "2046320",
    "end": "2053118"
  },
  {
    "text": "instead of using schedule. add I now do create task I'm going to come back to tasks in a bit and explain what an asyn",
    "start": "2053119",
    "end": "2059679"
  },
  {
    "text": "Kyo task is so we create two tasks that actually adds them to the scheduler it doesn't just create the task object it",
    "start": "2059679",
    "end": "2065960"
  },
  {
    "text": "actually schedules it with the schuer slightly confusing naming then we're going to run our schuer",
    "start": "2065960",
    "end": "2072280"
  },
  {
    "text": "forever and we get the same result just like we had with our own",
    "start": "2072280",
    "end": "2080960"
  },
  {
    "text": "code I'm not going to make make you wait for the the next large Prime okay so let's get into the some",
    "start": "2081760",
    "end": "2089638"
  },
  {
    "text": "more details of what AC Kyo um some of",
    "start": "2089639",
    "end": "2095000"
  },
  {
    "text": "the things we've established about Asing Kyo by building a fake AC coo so",
    "start": "2095000",
    "end": "2100440"
  },
  {
    "text": "co-routines Implement tasks co-routines await other co- routines the event Loop schedules",
    "start": "2100440",
    "end": "2108680"
  },
  {
    "text": "concurrent tasks tasks must not block if you task blocks everything",
    "start": "2108680",
    "end": "2115720"
  },
  {
    "text": "blocks by awaiting another C routine you facilitate a context switch every time",
    "start": "2116560",
    "end": "2122320"
  },
  {
    "text": "you do that every time you use a weight that is an opportunity for the schedule",
    "start": "2122320",
    "end": "2128680"
  },
  {
    "text": "to run another task they might decide to run your task again especially if it's the only task but that is the",
    "start": "2128680",
    "end": "2135960"
  },
  {
    "text": "opportunity for a for the scheduler the event Loop to",
    "start": "2135960",
    "end": "2142200"
  },
  {
    "text": "intervene and if you want to yield control without needing a result from the thing you're yielding from the way",
    "start": "2142200",
    "end": "2148680"
  },
  {
    "text": "to do that is Asing Kyo sleep zero okay that is that just says I want to yield",
    "start": "2148680",
    "end": "2155119"
  },
  {
    "text": "control let somebody else have a go and another the task have",
    "start": "2155119",
    "end": "2160280"
  },
  {
    "start": "2159000",
    "end": "2159000"
  },
  {
    "text": "AO a word on terminology this is gets a bit confusing",
    "start": "2161319",
    "end": "2166960"
  },
  {
    "text": "uh this is a co- routine it's the code it's it's made of code and it's callable",
    "start": "2166960",
    "end": "2173760"
  },
  {
    "text": "right we can call this the thing we get back when we invoke the co-routine is a co-routine",
    "start": "2173760",
    "end": "2180440"
  },
  {
    "text": "object right you might not like this terminology but it's the terminology that python has settled on in the",
    "start": "2180440",
    "end": "2188000"
  },
  {
    "text": "documentation so this is the code and it's callable this is the running code and it's its execution State and it's",
    "start": "2188000",
    "end": "2194560"
  },
  {
    "text": "awaitable this is a new word in Python",
    "start": "2194560",
    "end": "2199839"
  },
  {
    "text": "terminology so the co- routine object is",
    "start": "2199839",
    "end": "2204200"
  },
  {
    "text": "awaitable so very often we want to monitor a running task the tasks we've seen so far you can't monitor them in",
    "start": "2207359",
    "end": "2213240"
  },
  {
    "text": "any way you just have to run them and wait until they are complete sometimes we want dependencies between tasks we",
    "start": "2213240",
    "end": "2219280"
  },
  {
    "text": "want one task to report on the progress of another task or we want a task to",
    "start": "2219280",
    "end": "2224480"
  },
  {
    "text": "wait for another task to complete so the most basic way we have to do that is uh",
    "start": "2224480",
    "end": "2229720"
  },
  {
    "text": "a think called a future so let's look at the code we have",
    "start": "2229720",
    "end": "2235760"
  },
  {
    "text": "here I have I've just taken our search function and I've modified it to accept a future",
    "start": "2235760",
    "end": "2243599"
  },
  {
    "text": "object we'll come on to what that is in a moment",
    "start": "2243599",
    "end": "2248160"
  },
  {
    "text": "and all my monitored search does is delegate to this regular search function we had earlier this regular search co-",
    "start": "2248839",
    "end": "2255280"
  },
  {
    "text": "routine we had earlier with a weight so we try this if the search",
    "start": "2255280",
    "end": "2260760"
  },
  {
    "text": "fails we set we call a method on the future called set exception with the exception value else the trial succeeded",
    "start": "2260760",
    "end": "2269760"
  },
  {
    "text": "we set the result the found item in the future okay so the future is an object",
    "start": "2269760",
    "end": "2277160"
  },
  {
    "text": "which encapsulates the idea of a potential future result an",
    "start": "2277160",
    "end": "2284000"
  },
  {
    "text": "IOU if you like and then we have another task here",
    "start": "2284000",
    "end": "2291319"
  },
  {
    "text": "monitor future into which we can pass the same future and we're just going to loop around reporting on whether that",
    "start": "2291319",
    "end": "2297319"
  },
  {
    "text": "future is done yet every few seconds okay so in the main code here we get the",
    "start": "2297319",
    "end": "2303520"
  },
  {
    "text": "event Loop we create a future using this Factory function on",
    "start": "2303520",
    "end": "2308760"
  },
  {
    "text": "the event loop I set up my monitored search",
    "start": "2308760",
    "end": "2313920"
  },
  {
    "text": "looking for the first 13 digit prime that takes a while uh and add the co- routine object",
    "start": "2313920",
    "end": "2320599"
  },
  {
    "text": "that comes back from that invocation to the event loop as a task here I create another task using",
    "start": "2320599",
    "end": "2327319"
  },
  {
    "text": "monitor future and I pass the same future instance here so I'm creating the future here I pass the same future into",
    "start": "2327319",
    "end": "2333560"
  },
  {
    "text": "the monitored search and into this monitor future task okay and then I run",
    "start": "2333560",
    "end": "2340079"
  },
  {
    "text": "until complete off we go and we get waiting waiting waiting waiting reported from the monitor future",
    "start": "2340079",
    "end": "2347440"
  },
  {
    "text": "task until the monitored search returns its result okay we then get a warning",
    "start": "2347440",
    "end": "2353560"
  },
  {
    "text": "from uh Asing Kyo event Loop saying hang on you've terminated the event Loop here",
    "start": "2353560",
    "end": "2359119"
  },
  {
    "text": "with Loop close but there are still running tasks you probably don't intend to do that okay so even though amm",
    "start": "2359119",
    "end": "2365839"
  },
  {
    "text": "monitor future says our future not done and should wind itself up when the future is done it never gets",
    "start": "2365839",
    "end": "2373400"
  },
  {
    "text": "opportunity to wind itself up right it because because we exit as soon as the",
    "start": "2373400",
    "end": "2379119"
  },
  {
    "text": "future is complete okay so this final iteration of this Loop never gets to happen so we'll",
    "start": "2379119",
    "end": "2385680"
  },
  {
    "text": "come back to fixing this error in a bit we just leave it there for now future there is a class called",
    "start": "2385680",
    "end": "2392599"
  },
  {
    "text": "future in asy coo you should avoid calling the future constructed directly you should always go via the uh create",
    "start": "2392599",
    "end": "2401839"
  },
  {
    "text": "future Factory function on the event Loop you're using the reason for that is that different event Loops will",
    "start": "2401839",
    "end": "2408599"
  },
  {
    "text": "specialize the future implementation okay so at the very least windows and",
    "start": "2408599",
    "end": "2415200"
  },
  {
    "text": "Unix do use different event Loop implementations right so you should you should always uh go via the factory",
    "start": "2415200",
    "end": "2422680"
  },
  {
    "text": "function so now we're going to have",
    "start": "2422680",
    "end": "2430720"
  },
  {
    "text": "a task and a task",
    "start": "2430720",
    "end": "2436160"
  },
  {
    "text": "in Python I icoo is obviously it's very",
    "start": "2436160",
    "end": "2441200"
  },
  {
    "text": "fundamental thing we use them all over the place I've been creating tasks already I think the documentation for",
    "start": "2441200",
    "end": "2446240"
  },
  {
    "text": "what a task actually is is awful it's Dreadful uh so I mean the documentation",
    "start": "2446240",
    "end": "2452560"
  },
  {
    "text": "says something like a task wraps a co- routine in a future",
    "start": "2452560",
    "end": "2458319"
  },
  {
    "text": "and that's just very ambiguous to me so this is a picture of what a task actually is it's a subass a future so it",
    "start": "2458319",
    "end": "2467119"
  },
  {
    "text": "literally is a future and it has a reference to a co- routine this is a",
    "start": "2467119",
    "end": "2472599"
  },
  {
    "text": "really terrible use of inheritance in the design of the language it never makes sense to call set result or set",
    "start": "2472599",
    "end": "2479240"
  },
  {
    "text": "exception on a task right it just that should not be available to anyone who",
    "start": "2479240",
    "end": "2485839"
  },
  {
    "text": "has a handle on the task set theuer so I think it's really not good",
    "start": "2485839",
    "end": "2492280"
  },
  {
    "text": "design but that's how it is and we have to live with it I think it's a well-known fact that the people who",
    "start": "2492280",
    "end": "2498400"
  },
  {
    "text": "design python don't really understand objectoriented programming in some sense anyway so perhaps no surprise",
    "start": "2498400",
    "end": "2506359"
  },
  {
    "text": "yeah it well it's in the python standard Library so it is I mean",
    "start": "2508640",
    "end": "2517520"
  },
  {
    "text": "well this could contain this could contain a future rather than being a future right yeah",
    "start": "2526680",
    "end": "2534760"
  },
  {
    "text": "so well the future could be a implementation detail hidden as far as",
    "start": "2538440",
    "end": "2544960"
  },
  {
    "text": "we can hide things in Python right so I mean nothing's private right this is python we're all grown-ups here",
    "start": "2544960",
    "end": "2553680"
  },
  {
    "text": "so so because the task is a future we can monitor the search task directly now",
    "start": "2555920",
    "end": "2562240"
  },
  {
    "text": "rather than having to create our own future object separately okay so and when we do that we get",
    "start": "2562240",
    "end": "2568680"
  },
  {
    "text": "exactly the same result as before but we still haven't solved this problem of the task being destroyed the monitor future",
    "start": "2568680",
    "end": "2574760"
  },
  {
    "text": "task being destroyed prematurely",
    "start": "2574760",
    "end": "2578640"
  },
  {
    "start": "2576000",
    "end": "2576000"
  },
  {
    "text": "another very confusing naming thing in the library is how you should create",
    "start": "2580440",
    "end": "2586440"
  },
  {
    "text": "tasks for the same reasons as Futures you shouldn't call the task Constructor",
    "start": "2586440",
    "end": "2592359"
  },
  {
    "text": "directly you should prefer to call the create task Factory on the event",
    "start": "2592359",
    "end": "2597920"
  },
  {
    "text": "Loop that allows the event Loop implementation to specialize the task even better though you should call",
    "start": "2597920",
    "end": "2605079"
  },
  {
    "text": "ensure future in instead Ure future actually calls",
    "start": "2605079",
    "end": "2610720"
  },
  {
    "text": "this and I find this name very confusing it's more General it doesn't just accept",
    "start": "2610720",
    "end": "2616079"
  },
  {
    "text": "co-routine objects it accepts any awaitable object which is a New Concept in Python and you pass the you must pass",
    "start": "2616079",
    "end": "2622559"
  },
  {
    "text": "the event Loop to it it's also item potent so you can pass the same thing to it several times and you just it will",
    "start": "2622559",
    "end": "2628599"
  },
  {
    "text": "only wrap it up once in a task so this is the preferred way to create a task in",
    "start": "2628599",
    "end": "2634040"
  },
  {
    "text": "Python Ure future",
    "start": "2634040",
    "end": "2638559"
  },
  {
    "text": "yeah in spite of its confusing name it does return a task so there we are we create the tasks",
    "start": "2640440",
    "end": "2647440"
  },
  {
    "text": "so we still haven't dealt with the fact we're not cleaning up one of our tasks",
    "start": "2647440",
    "end": "2653319"
  },
  {
    "text": "gracefully so to do that we can wait on more than one task so we use an asyn Kyo",
    "start": "2653319",
    "end": "2659359"
  },
  {
    "start": "2654000",
    "end": "2654000"
  },
  {
    "text": "function called gather which takes a any number of await tables so here and this",
    "start": "2659359",
    "end": "2665440"
  },
  {
    "text": "returns a future so here Gathering these two tasks and getting a future back here",
    "start": "2665440",
    "end": "2670960"
  },
  {
    "text": "so now I'm saying run until complete this future this",
    "start": "2670960",
    "end": "2676280"
  },
  {
    "text": "future is uh is done when both of the tasks I've gathered are",
    "start": "2676280",
    "end": "2681599"
  },
  {
    "text": "done okay so that will fix that that",
    "start": "2681599",
    "end": "2686800"
  },
  {
    "start": "2684000",
    "end": "2684000"
  },
  {
    "text": "problem okay let's come on to the event Loop itself which we've been using uh",
    "start": "2686800",
    "end": "2692040"
  },
  {
    "text": "We've called a few functions on it like create task and create future but the the API of the event Loop",
    "start": "2692040",
    "end": "2699640"
  },
  {
    "text": "is huge I mean it it really is a kind of God class really it just does everything",
    "start": "2699640",
    "end": "2706920"
  },
  {
    "text": "so these are the kinds of things you can find in the event Loop interface starting and stopping the event",
    "start": "2706920",
    "end": "2713520"
  },
  {
    "text": "Loop scheduling callbacks these are not co-routines these are just regular callback functions we can arrange for",
    "start": "2713520",
    "end": "2719280"
  },
  {
    "text": "them to be called at some point in the future factories that I've just told you",
    "start": "2719280",
    "end": "2725160"
  },
  {
    "text": "you shouldn't be using because there are better Alternatives configuration things you",
    "start": "2725160",
    "end": "2730720"
  },
  {
    "text": "rarely need there's more there's a bunch of stuff for configuring our exception handling works",
    "start": "2730720",
    "end": "2737079"
  },
  {
    "text": "there's some methods for configuring Diagnostics debugging modes there are methods for",
    "start": "2737079",
    "end": "2743680"
  },
  {
    "text": "dealing with other asynchronous things like signals sent from the operating",
    "start": "2743680",
    "end": "2749240"
  },
  {
    "text": "system sometimes you I'm I'm not going to go into these in detail today I don't have time but sometimes you do need to",
    "start": "2749240",
    "end": "2754839"
  },
  {
    "text": "call blocking code from your ASN code so what do you do you can use a thing called executor so you can take some",
    "start": "2754839",
    "end": "2761599"
  },
  {
    "text": "blocking callable and you can you run it in the event event Loop using runin",
    "start": "2761599",
    "end": "2766800"
  },
  {
    "text": "executor and there are different executors you can pass here there's a threadpool executor and a process pool",
    "start": "2766800",
    "end": "2773000"
  },
  {
    "text": "executor so you can arrange for that function to be run elsewhere in such a",
    "start": "2773000",
    "end": "2778079"
  },
  {
    "text": "way that your blocking function becomes non-blocking by being in another thread and you can set the default",
    "start": "2778079",
    "end": "2785800"
  },
  {
    "text": "executor there's a bunch of low-level socket level stuff which we're",
    "start": "2785920",
    "end": "2791680"
  },
  {
    "text": "not going to bother ourselves with today and then there's this much higher level protocol level stuff create connection",
    "start": "2791680",
    "end": "2798839"
  },
  {
    "text": "create datagram endpoint create Unix connection we have some functions for",
    "start": "2798839",
    "end": "2804280"
  },
  {
    "text": "watching file descriptors adding readers removing readers adding writers to file",
    "start": "2804280",
    "end": "2809440"
  },
  {
    "text": "descriptors and also we can deal with pipes so what is all this IO stuff doing",
    "start": "2809440",
    "end": "2818079"
  },
  {
    "text": "in the event Loop right why do we need it in there well okay it is called async",
    "start": "2818079",
    "end": "2823440"
  },
  {
    "text": "IO which is the hint but why does it need to be in the event Loop so let's in",
    "start": "2823440",
    "end": "2829119"
  },
  {
    "text": "the last 10 minutes here just put some IO into asyn",
    "start": "2829119",
    "end": "2834280"
  },
  {
    "text": "iio so I earlier built a very simple round robin scheduler that just ran each",
    "start": "2834280",
    "end": "2839839"
  },
  {
    "start": "2835000",
    "end": "2835000"
  },
  {
    "text": "task in turn Okay the secret Source in ASN Kyo is that it can schedule tasks on",
    "start": "2839839",
    "end": "2847800"
  },
  {
    "text": "the basis of the availability or Readiness of IO right so the io aware",
    "start": "2847800",
    "end": "2855119"
  },
  {
    "text": "scheduler used in asy Kyo is a bit smarter so as we clock around the tasks",
    "start": "2855119",
    "end": "2860200"
  },
  {
    "text": "run each one in turn if we get to a task that the scheduler knows is waiting for Io we don't need to run it we can skip",
    "start": "2860200",
    "end": "2866680"
  },
  {
    "text": "it we keep going around if that IO then becomes ready we can go back and run",
    "start": "2866680",
    "end": "2872520"
  },
  {
    "text": "that task immediately as the next task we run so we don't have to wait very long and then we can carry on round",
    "start": "2872520",
    "end": "2878160"
  },
  {
    "text": "maybe rerun that task it blocks on iO the scheduler knows that it that IO",
    "start": "2878160",
    "end": "2885040"
  },
  {
    "text": "Channel becomes available the data is there we can go back and get it immediately so that's why all this IO",
    "start": "2885040",
    "end": "2891480"
  },
  {
    "text": "socket level stuff pipe level stuff is in the event Loop in the Schuler it's so",
    "start": "2891480",
    "end": "2897160"
  },
  {
    "text": "that the Schuler can be aware and wait on iO events using EO or select or",
    "start": "2897160",
    "end": "2905280"
  },
  {
    "text": "whatever operating system feat fees you have for wait for async iio at that lower level",
    "start": "2905280",
    "end": "2914480"
  },
  {
    "text": "Okay click through these so it would take me all day to go",
    "start": "2914480",
    "end": "2920920"
  },
  {
    "start": "2916000",
    "end": "2916000"
  },
  {
    "text": "through all of this stuff in detail so I'm not going to I'll just show you this picture of the the stack of abstractions",
    "start": "2920920",
    "end": "2927000"
  },
  {
    "text": "that ACN Kyo provides and so we have",
    "start": "2927000",
    "end": "2933920"
  },
  {
    "text": "seen uh s suspendable and resum able functions basically concurrent functions",
    "start": "2933920",
    "end": "2939559"
  },
  {
    "text": "implemented called Co routines and implemented in terms of generators python generators we've seen the event Loop",
    "start": "2939559",
    "end": "2946520"
  },
  {
    "text": "which and tasks which layers the notion of a task on top of that and Futures so",
    "start": "2946520",
    "end": "2951839"
  },
  {
    "text": "that we can wait for co- routines and get some sense of when theyve finished",
    "start": "2951839",
    "end": "2957280"
  },
  {
    "text": "and also the event Loops adds the ability to await sockets file descriptors pipes Etc on top of that",
    "start": "2957280",
    "end": "2963640"
  },
  {
    "text": "there's a we layer a thing called transports which are Prov provided by ASN Kyo and these basically encapsulate",
    "start": "2963640",
    "end": "2970760"
  },
  {
    "text": "the notion of a communication Channel which supports read and write okay I'm",
    "start": "2970760",
    "end": "2976160"
  },
  {
    "text": "not going to show you transports in detail I'll show you them being used but I won't show you how they work on top of",
    "start": "2976160",
    "end": "2982520"
  },
  {
    "text": "transports ASN Kyo allows us to implement the thing called protocols which are don't use co-",
    "start": "2982520",
    "end": "2989480"
  },
  {
    "text": "routines at all they're entirely callback based approach to programming I'll show you that in a",
    "start": "2989480",
    "end": "2995079"
  },
  {
    "text": "moment so that allows us to deal with callbacks that tell us when connections have been made or lost or data has been",
    "start": "2995079",
    "end": "3001359"
  },
  {
    "text": "received and we can respond to those events and then on top of protocols ASN",
    "start": "3001359",
    "end": "3007040"
  },
  {
    "text": "Kyo layers A Thing Called streams which allows us to begin working with co- routines again so if we don't like",
    "start": "3007040",
    "end": "3012880"
  },
  {
    "text": "working in a callback style we can go back to working in a co-routine style so we have this huge stack which is founded",
    "start": "3012880",
    "end": "3019559"
  },
  {
    "text": "on co-routines and all these higher level abstractions and eventually we get back to working in co- routines but at",
    "start": "3019559",
    "end": "3025760"
  },
  {
    "text": "the top level working at a much higher level of abstraction the kind of behaviors we need to to handle in our",
    "start": "3025760",
    "end": "3034319"
  },
  {
    "text": "code so I'm going to show you we have 10 minutes nine minutes left so I'm going to show you a quick example",
    "start": "3034319",
    "end": "3043720"
  },
  {
    "text": "here of a chat server right simple thing so",
    "start": "3043720",
    "end": "3050319"
  },
  {
    "text": "here's a chat room class we initialize it with an event Loop and we give it a port and we give the chat room a name",
    "start": "3050319",
    "end": "3058200"
  },
  {
    "text": "and this is important thing here we're going to manage a mapping a dictionary for usernames people in the chat room to",
    "start": "3058200",
    "end": "3065160"
  },
  {
    "text": "transports and you're going to see these transport objects they are things that we can read and write to okay read from",
    "start": "3065160",
    "end": "3072079"
  },
  {
    "text": "and write to when we run the chat room it's going",
    "start": "3072079",
    "end": "3079079"
  },
  {
    "text": "to call this method on the event Loop called create server and create server will invoke this callable this Factory",
    "start": "3079079",
    "end": "3087319"
  },
  {
    "text": "function for each new connection to the chat room okay so each time a connection comes in it will invoke this thing and",
    "start": "3087319",
    "end": "3093720"
  },
  {
    "text": "it will create a thing called the protocol which you'll see in a minute with a reference back to the chat room",
    "start": "3093720",
    "end": "3100880"
  },
  {
    "text": "okay what else does the chat room have well we have a way to deal with users arriving register",
    "start": "3100880",
    "end": "3107160"
  },
  {
    "text": "user so we can only register the same user once in the dictionary if it's a new user we against",
    "start": "3107160",
    "end": "3114000"
  },
  {
    "text": "their username we keep a reference to their transport which is how we can communicate with that user by writing to",
    "start": "3114000",
    "end": "3120000"
  },
  {
    "text": "that transport and we' broadcast to the trat room user arrived we can deregister",
    "start": "3120000",
    "end": "3125760"
  },
  {
    "text": "a user when they leave we can get a list of users by iterating through the keys of that",
    "start": "3125760",
    "end": "3132720"
  },
  {
    "text": "dictionary when a message arrives from a user we can broadcast that to all of the",
    "start": "3132799",
    "end": "3140319"
  },
  {
    "text": "users prefixed with their username so we know who it's from and here's the broadcast when we",
    "start": "3140319",
    "end": "3147200"
  },
  {
    "text": "want to broadcast a message we just iterate over all the transports and send the",
    "start": "3147200",
    "end": "3153000"
  },
  {
    "text": "message with the correct line ending for tnet which is what we're going to use",
    "start": "3153000",
    "end": "3159960"
  },
  {
    "text": "here so I said that every time a new connection is created AC cyio will instantiate one of",
    "start": "3159960",
    "end": "3168480"
  },
  {
    "text": "our protocol objects so here's the protocol object so the server will",
    "start": "3168480",
    "end": "3173599"
  },
  {
    "text": "instantiate this for each once for each connection with a reference back to the chat",
    "start": "3173599",
    "end": "3179440"
  },
  {
    "text": "room and it's extremely simple there's basically this state machine right it's going to call connection made exactly",
    "start": "3181280",
    "end": "3188319"
  },
  {
    "text": "once it's going to call data received as many times as necessary and it's going to call connection lost exactly once",
    "start": "3188319",
    "end": "3195200"
  },
  {
    "text": "it's very simple so these three methods are really all you need to implement to implement a asyn Kyo protocol it's very",
    "start": "3195200",
    "end": "3202920"
  },
  {
    "text": "straightforward so when a connection's made I get reference to the transport from asyn Kio I write hello welcome to",
    "start": "3202920",
    "end": "3212079"
  },
  {
    "text": "the chat room name and I ask them to enter the username when I get data received I have",
    "start": "3212079",
    "end": "3218799"
  },
  {
    "text": "to decode that into a string and then I push it into this accumulated lines",
    "start": "3218799",
    "end": "3224119"
  },
  {
    "text": "thing which because I just get bits of data right they're not logical lines I",
    "start": "3224119",
    "end": "3229319"
  },
  {
    "text": "have to look for the line endings in that data as it arrives so I iterate",
    "start": "3229319",
    "end": "3234599"
  },
  {
    "text": "this function which you'll see in a moment just extracts lines of text from whatever data I'm getting and then when I get a",
    "start": "3234599",
    "end": "3241720"
  },
  {
    "text": "complete line I pass it to this handle line and when the user leaves the connection is lost I just deregister the",
    "start": "3241720",
    "end": "3247480"
  },
  {
    "text": "user okay you don't need to understand the detail here this is just looking for",
    "start": "3247480",
    "end": "3253640"
  },
  {
    "text": "lines of text in the data that comes in and the very first thing I expect a",
    "start": "3253640",
    "end": "3261119"
  },
  {
    "text": "user to enter is their username because that's the first thing we asked them for so if username is Norm the first text",
    "start": "3261119",
    "end": "3266599"
  },
  {
    "text": "they give us is going to be their username otherwise we send a message from that user what's interesting here as of",
    "start": "3266599",
    "end": "3273280"
  },
  {
    "text": "course we might have a thousand users in this room and this simple code would handle thousands of users no problem we",
    "start": "3273280",
    "end": "3280640"
  },
  {
    "text": "have shared mutable State here right but we don't have to worry about",
    "start": "3280640",
    "end": "3286240"
  },
  {
    "text": "locking or any of that because we know that only one of our co- routines is executing at any instant right so we've",
    "start": "3286240",
    "end": "3292960"
  },
  {
    "text": "completely Sid stepped the problem of the share mutable resource in a concurrent system all the code I'm",
    "start": "3292960",
    "end": "3299640"
  },
  {
    "text": "showing you here looks completely sequential it is completely sequential right it's the fact that we",
    "start": "3299640",
    "end": "3305240"
  },
  {
    "text": "can suspend execution and you can just assume that you have access to this so",
    "start": "3305240",
    "end": "3311000"
  },
  {
    "text": "as long as you're careful about when you're yielding control to the Schuler with your awaits you can assume that you",
    "start": "3311000",
    "end": "3318119"
  },
  {
    "text": "have exclusive access to any shared resource between those await statements what you can't do is have an await in",
    "start": "3318119",
    "end": "3324640"
  },
  {
    "text": "the middle of something where you have essentially kind of transactional behavior which either must complete",
    "start": "3324640",
    "end": "3331480"
  },
  {
    "text": "completely or not at all so there we go register user",
    "start": "3331480",
    "end": "3337520"
  },
  {
    "text": "deregister user we there's a command to list users and then we just write text to the",
    "start": "3337520",
    "end": "3344280"
  },
  {
    "text": "transports to get things to show up so that is that and I'm just going to",
    "start": "3344280",
    "end": "3349359"
  },
  {
    "text": "finish by showing you so here is the the chat",
    "start": "3349359",
    "end": "3355680"
  },
  {
    "text": "server here's the chat room code you can see it's quite",
    "start": "3355680",
    "end": "3360839"
  },
  {
    "text": "concise here's the asyn COO protocol which inherits from the the base class",
    "start": "3360839",
    "end": "3366039"
  },
  {
    "text": "in the library with the the three methods I just showed you connection made data received connection lost okay",
    "start": "3366039",
    "end": "3375000"
  },
  {
    "text": "so we can run this that server is now running and then I've got a couple of",
    "start": "3375000",
    "end": "3381400"
  },
  {
    "text": "terminals here I know you shouldn't use tell",
    "start": "3381400",
    "end": "3386880"
  },
  {
    "text": "but it's convenient there're no security people here aren",
    "start": "3386880",
    "end": "3393520"
  },
  {
    "text": "there so I'm going to tell that uh into my computer on Port 1 two 3 4 and you",
    "start": "3393520",
    "end": "3398960"
  },
  {
    "text": "see welcome to chat box enter your username uh I am",
    "start": "3398960",
    "end": "3404799"
  },
  {
    "text": "Sheila okay user Sheila has arrived in another session over",
    "start": "3404799",
    "end": "3412480"
  },
  {
    "text": "here welcome to chat box Jim and you see we get Jim has arrived and",
    "start": "3413280",
    "end": "3421200"
  },
  {
    "text": "then we can say hi",
    "start": "3421200",
    "end": "3426960"
  },
  {
    "text": "Sheila there we go very simple right so nice concurrent Behavior multiple",
    "start": "3432599",
    "end": "3439319"
  },
  {
    "text": "connections no parallelism whatsoever an efficient IO so I haven't tested it but",
    "start": "3439319",
    "end": "3445960"
  },
  {
    "text": "I would expect this to scale to thousands of concurrent connections without any",
    "start": "3445960",
    "end": "3452640"
  },
  {
    "text": "difficulty whatsoever and that ladies and gentlemen is it thank you very much",
    "start": "3452640",
    "end": "3458160"
  },
  {
    "text": "and I'm I think I'm out of time but I will take questions if you",
    "start": "3458160",
    "end": "3463400"
  },
  {
    "text": "want yeah",
    "start": "3465319",
    "end": "3469319"
  },
  {
    "text": "yeah um is it possible that some uh operation tasks are striving during your",
    "start": "3477760",
    "end": "3485000"
  },
  {
    "text": "schuling if your e task is constantly",
    "start": "3485000",
    "end": "3491119"
  },
  {
    "text": "became uh not wait so it was waiting and now not waiting yeah theer will return to",
    "start": "3491119",
    "end": "3498000"
  },
  {
    "text": "the task right it will return to the task my understanding well it depends on the event Loop implementation right so",
    "start": "3498000",
    "end": "3504720"
  },
  {
    "text": "you can you can write your own event Loop based upon the stuff that's in AC Kyo and ACN Kyo comes with different",
    "start": "3504720",
    "end": "3511200"
  },
  {
    "text": "event Loops there's a reactor event Loop and there's a proactor event Loop and you have to choose the event Loop",
    "start": "3511200",
    "end": "3518160"
  },
  {
    "text": "implementation you use depending on the scheduling qualities you want right so",
    "start": "3518160",
    "end": "3523359"
  },
  {
    "text": "you actually have in theory complete control over what's going on because you could write your own scheduler but in",
    "start": "3523359",
    "end": "3529760"
  },
  {
    "text": "terms of the details of how it does that scheduling uh I haven't looked very",
    "start": "3529760",
    "end": "3535039"
  },
  {
    "text": "deeply into the rules I mean I honestly I've never needed to use anything but the default scheduler on the that python",
    "start": "3535039",
    "end": "3541880"
  },
  {
    "text": "gives me on the operating system I'm using but underneath it's just using calls to select or EO to wait on file",
    "start": "3541880",
    "end": "3549960"
  },
  {
    "text": "descriptors or sockets",
    "start": "3549960",
    "end": "3556359"
  },
  {
    "text": "okay I believe it's lunchtime or something okay thank you very much",
    "start": "3556359",
    "end": "3564480"
  }
]