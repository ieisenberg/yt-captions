[
  {
    "text": "all right let's start welcome everyone good morning",
    "start": "1580",
    "end": "6660"
  },
  {
    "text": "I hope you have your coffee with you this is this is going to be a pretty technical presentation my name is and this session",
    "start": "6660",
    "end": "15599"
  },
  {
    "text": "is about git hidden gems now before we start I'd like to ask a",
    "start": "15599",
    "end": "22619"
  },
  {
    "text": "few questions so number one who here is uh new to git maybe you use",
    "start": "22619",
    "end": "30660"
  },
  {
    "text": "it but you haven't been using it for a long time just raise your hand",
    "start": "30660",
    "end": "35820"
  },
  {
    "text": "okay okay a couple of you how many here are let's say I've been using it for a few",
    "start": "35820",
    "end": "43800"
  },
  {
    "text": "years and I feel like they are proficient but they they don't they haven't looked into the advanced stuff",
    "start": "43800",
    "end": "49500"
  },
  {
    "text": "okay that's like most of you and how many here are git Gods git",
    "start": "49500",
    "end": "56280"
  },
  {
    "text": "Masters okay couple of you so my goal here today is for there to be",
    "start": "56280",
    "end": "64860"
  },
  {
    "text": "at least one new thing that you didn't know about git so when you leave this",
    "start": "64860",
    "end": "70020"
  },
  {
    "text": "session you should have learned at least one new thing and if you already knew",
    "start": "70020",
    "end": "75060"
  },
  {
    "text": "everything I'm telling you about then look me up afterwards because we might have a hobby in common",
    "start": "75060",
    "end": "83280"
  },
  {
    "text": "okay so let's get started what gems you might wonder is it isn't it like a",
    "start": "83280",
    "end": "89159"
  },
  {
    "text": "regular version control system well yes and no you see git is a bit like a swift",
    "start": "89159",
    "end": "97079"
  },
  {
    "text": "Swiss army knife uh it's a tool that you all recognize I mean it has an obvious",
    "start": "97079",
    "end": "103320"
  },
  {
    "text": "purpose uh but it's all it's also more than that it has a few tools hidden away",
    "start": "103320",
    "end": "109939"
  },
  {
    "text": "that you might not even know what you're for but they're there",
    "start": "109939",
    "end": "114960"
  },
  {
    "text": "so yeah so git is the Swift Swiss army knife of Version Control Systems and yes",
    "start": "114960",
    "end": "121320"
  },
  {
    "text": "I'm quoting myself so my goal today is to show you the",
    "start": "121320",
    "end": "127079"
  },
  {
    "text": "tools that are hidden inside this you know tool everyday tool in order to",
    "start": "127079",
    "end": "133200"
  },
  {
    "text": "improve your daily workflow but first let's address the elephant in",
    "start": "133200",
    "end": "139080"
  },
  {
    "text": "the room shall we what with this ASCII art well git is a tool that was designed to",
    "start": "139080",
    "end": "149760"
  },
  {
    "text": "be used from the terminal from the command line and that's always going to be that way",
    "start": "149760",
    "end": "155400"
  },
  {
    "text": "even though there are a very good graphical guise built on top of it",
    "start": "155400",
    "end": "160920"
  },
  {
    "text": "uh some good some bad you know but you know they do the job but if you really want to take advantage of git's full",
    "start": "160920",
    "end": "166800"
  },
  {
    "text": "potential you need to be using it from the command line so yes welcome to the terminal this",
    "start": "166800",
    "end": "173160"
  },
  {
    "text": "entire presentation is going to be from the command line and yes that includes even the slides",
    "start": "173160",
    "end": "180360"
  },
  {
    "text": "and you wouldn't believe how long it took me to draw that",
    "start": "180360",
    "end": "187319"
  },
  {
    "text": "so let's keep it up a few more seconds big and there you go so what's the game plan",
    "start": "187319",
    "end": "193620"
  },
  {
    "text": "we have a screen we divide it into two parts on the rights well my left",
    "start": "193620",
    "end": "203159"
  },
  {
    "text": "you're right yes or the other way around one side",
    "start": "203159",
    "end": "209700"
  },
  {
    "text": "we're going to have the terminal on the right or left the other side",
    "start": "209700",
    "end": "215040"
  },
  {
    "text": "we're going to have some text that explains what's going on with some more",
    "start": "215040",
    "end": "221340"
  },
  {
    "text": "ASCII graphics okay so that's the game plan because you're going to need some kind of",
    "start": "221340",
    "end": "227580"
  },
  {
    "text": "project to work on so the project is a a calculator of course but it doesn't",
    "start": "227580",
    "end": "234120"
  },
  {
    "text": "really matter we're not going to look at much of the code but it's a calculator it's written in node because why not and",
    "start": "234120",
    "end": "241560"
  },
  {
    "text": "typescript just to give you an idea what what's the source code gonna be like",
    "start": "241560",
    "end": "247019"
  },
  {
    "text": "so let's get started with the first gem which I call pretty logs",
    "start": "247019",
    "end": "255599"
  },
  {
    "text": "now you guys already know about git log now it shows you the history of our",
    "start": "255599",
    "end": "261419"
  },
  {
    "text": "commits now this view is fine but we can do better than that because it turns out",
    "start": "261419",
    "end": "268680"
  },
  {
    "text": "that git head git log has an option called pretty and if you use that option you can",
    "start": "268680",
    "end": "274680"
  },
  {
    "text": "customize the output of git log so for example we can say git log pretty",
    "start": "274680",
    "end": "282919"
  },
  {
    "text": "and the parameter is a bunch of placeholders for the different pieces of",
    "start": "282919",
    "end": "288900"
  },
  {
    "text": "metadata that are part of a commit so for example if we just wanted to print the summary that is the first line of a",
    "start": "288900",
    "end": "297419"
  },
  {
    "text": "commit message we will say percent s and then we just look at the message",
    "start": "297419",
    "end": "304020"
  },
  {
    "text": "now of course you can do much more than this so let's do something more interesting",
    "start": "304020",
    "end": "309780"
  },
  {
    "text": "where we say pretty and then we change the color to red",
    "start": "309780",
    "end": "315540"
  },
  {
    "text": "then we want to print out the hash code but not the long one you know the one the one that you see everywhere we just",
    "start": "315540",
    "end": "322199"
  },
  {
    "text": "want the abbreviated hash code which is usually the sixth first six seven uh",
    "start": "322199",
    "end": "328320"
  },
  {
    "text": "character so it's lowercase h then let's reset the color",
    "start": "328320",
    "end": "333900"
  },
  {
    "text": "now let's change the color again to Yellow and now I want to print the branch",
    "start": "333900",
    "end": "339720"
  },
  {
    "text": "references that are point or that or the tags whatever references are pointing to that commit",
    "start": "339720",
    "end": "345660"
  },
  {
    "text": "now if you had to guess what the placeholder for the references is what will you say",
    "start": "345660",
    "end": "352320"
  },
  {
    "text": "r but unfortunately it's D",
    "start": "352320",
    "end": "357258"
  },
  {
    "text": "because you know it's git so let's reset the color again",
    "start": "357419",
    "end": "364199"
  },
  {
    "text": "then let's have a space and then now we print the familiar summary which is the",
    "start": "364199",
    "end": "369600"
  },
  {
    "text": "first line in the commit message now let's change the color again and let's make cyan and now we open up parenthesis",
    "start": "369600",
    "end": "376259"
  },
  {
    "text": "and now we want to print the commit date or or the auth or the date however we",
    "start": "376259",
    "end": "383520"
  },
  {
    "text": "want to print the date relative to now so we say AR",
    "start": "383520",
    "end": "388800"
  },
  {
    "text": "and then we reset the color again and this is what you get okay",
    "start": "388800",
    "end": "394800"
  },
  {
    "text": "so this is much much better you know it's uh more succinct can you",
    "start": "394800",
    "end": "400680"
  },
  {
    "text": "still read the font if I do like that yeah cool so um",
    "start": "400680",
    "end": "406259"
  },
  {
    "text": "of course I mean all you need to do to take advantage of this is just you just type this every time",
    "start": "406259",
    "end": "411419"
  },
  {
    "text": "Emma you get fast after a while now obviously not there are there is",
    "start": "411419",
    "end": "417360"
  },
  {
    "text": "another feature which you may or may not know about in in git which is called aliases",
    "start": "417360",
    "end": "422699"
  },
  {
    "text": "now an alias is a word that you associate to a command plus a bunch of",
    "start": "422699",
    "end": "427919"
  },
  {
    "text": "options you can even have a shell function Associated to an alias which takes parameters so you can take it as",
    "start": "427919",
    "end": "433919"
  },
  {
    "text": "far as you want so let's write an Alia so instead of typing this every time",
    "start": "433919",
    "end": "440520"
  },
  {
    "text": "let's just copy that that string",
    "start": "440520",
    "end": "446220"
  },
  {
    "text": "so we go like this and we copy that",
    "start": "446220",
    "end": "451800"
  },
  {
    "text": "and then we say git log no git config Global because aliases are part of the",
    "start": "451800",
    "end": "458580"
  },
  {
    "text": "configuration and then you say Alias Dot and then the name of your area so in this case let's",
    "start": "458580",
    "end": "463740"
  },
  {
    "text": "call it LG of course it has to be something that doesn't already exist and then you say what command so log and",
    "start": "463740",
    "end": "471660"
  },
  {
    "text": "then pretty and then you just paste in the string that we are that we had so",
    "start": "471660",
    "end": "478800"
  },
  {
    "text": "now I can say guitar G of course and then you can have your own customized view of the log",
    "start": "478800",
    "end": "485280"
  },
  {
    "text": "pretty useful stuff did you guys know about this how many here are new",
    "start": "485280",
    "end": "490860"
  },
  {
    "text": "okay maybe 20 percent okay so let's move on to the second gem",
    "start": "490860",
    "end": "497699"
  },
  {
    "text": "which is stays on the theme of pretty things because if you're gonna be on the terminal all day like I am it might as",
    "start": "497699",
    "end": "503699"
  },
  {
    "text": "well look good so pretty divs now uh if you do",
    "start": "503699",
    "end": "511680"
  },
  {
    "text": "a gitif for example let's compare the previous commit from the with the latest",
    "start": "511680",
    "end": "516839"
  },
  {
    "text": "one you get this which is of course I mean the default way of looking at diffs",
    "start": "516839",
    "end": "523320"
  },
  {
    "text": "however you might not know that everything that's been piped to the to the terminal",
    "start": "523320",
    "end": "529019"
  },
  {
    "text": "is passed to through a program called a pager Now the default pager for git is",
    "start": "529019",
    "end": "537240"
  },
  {
    "text": "less which is which is what gives you the ability to scroll up and down with",
    "start": "537240",
    "end": "542399"
  },
  {
    "text": "the with the arrows or KNG however that's not fixed it's a setting",
    "start": "542399",
    "end": "547800"
  },
  {
    "text": "you can change and there are a bunch of programs out there that do pretty things with the diff output",
    "start": "547800",
    "end": "554519"
  },
  {
    "text": "they improve upon it and one of them is called Delta Now Delta",
    "start": "554519",
    "end": "560459"
  },
  {
    "text": "is written in Rust so that tells you already there that it's a cool tool",
    "start": "560459",
    "end": "566880"
  },
  {
    "text": "so that so what you can do is that you can just set the core.pager option to",
    "start": "566880",
    "end": "574560"
  },
  {
    "text": "Delta and now that is going to take care of all the diffs for you so of course",
    "start": "574560",
    "end": "580260"
  },
  {
    "text": "you need to install it first which I already did but you say git config global",
    "start": "580260",
    "end": "586040"
  },
  {
    "text": "core.pager and then you say Delta and now if you do the same div it looks",
    "start": "586040",
    "end": "592680"
  },
  {
    "text": "like this and now not only do you get a you know",
    "start": "592680",
    "end": "598680"
  },
  {
    "text": "the plus and minuses are gone the headers are prettier but also you get",
    "start": "598680",
    "end": "603959"
  },
  {
    "text": "syntax highlighting now this is typescript so you get synthesis lighting for your code and it",
    "start": "603959",
    "end": "610620"
  },
  {
    "text": "supports a bunch of different languages so Delta is something that I would",
    "start": "610620",
    "end": "616380"
  },
  {
    "text": "recommend you add to your configuration now let's move on to start changing",
    "start": "616380",
    "end": "624540"
  },
  {
    "text": "files let's talk about staging so when you work with Git it's always a",
    "start": "624540",
    "end": "632820"
  },
  {
    "text": "good idea to make your commits semantically consistent what does that mean it means that if you're making a",
    "start": "632820",
    "end": "640320"
  },
  {
    "text": "every commit should contain one logical change so if for example if you are making a refactoring that should be one",
    "start": "640320",
    "end": "645899"
  },
  {
    "text": "commit if you are fixing a bug that should be a separate commit separate from the refactoring",
    "start": "645899",
    "end": "651980"
  },
  {
    "text": "however that's hard to do because once you are in the code you are going to find Opportunities to do stuff and",
    "start": "651980",
    "end": "659100"
  },
  {
    "text": "you're gonna do it right there right so my maybe you do the refactoring and you fix a bug so how do you then split those",
    "start": "659100",
    "end": "666899"
  },
  {
    "text": "into separate commits of course with previous Version Control Systems was",
    "start": "666899",
    "end": "672779"
  },
  {
    "text": "pretty hard if not impossible to do unless you were really disciplined so",
    "start": "672779",
    "end": "678120"
  },
  {
    "text": "but in git you have the freedom to work as you want and still have the possibility to keep a clean history",
    "start": "678120",
    "end": "684420"
  },
  {
    "text": "now what we will use in this case is the",
    "start": "684420",
    "end": "689459"
  },
  {
    "text": "patch option of git ad you know git add is the command that allows you to Stage",
    "start": "689459",
    "end": "694620"
  },
  {
    "text": "your changes for the next commit now what patch allows you to do it",
    "start": "694620",
    "end": "699899"
  },
  {
    "text": "allows you to split and just stage a portion of a file instead of the entire",
    "start": "699899",
    "end": "705000"
  },
  {
    "text": "file so how does that look like let's say that so where I have a file called",
    "start": "705000",
    "end": "710100"
  },
  {
    "text": "index.ts and let's open it with the",
    "start": "710100",
    "end": "715680"
  },
  {
    "text": "the only editor that you ever need text editor which is",
    "start": "715680",
    "end": "722779"
  },
  {
    "text": "thanks I was afraid of someone was gonna say emacs or Nano",
    "start": "723000",
    "end": "730019"
  },
  {
    "text": "so VM of course so now this is you know simple",
    "start": "730019",
    "end": "735480"
  },
  {
    "text": "typescript file which is the entry point of this calculator program now there are some opportunities for",
    "start": "735480",
    "end": "741300"
  },
  {
    "text": "improvement so here for example here I spot a typo because",
    "start": "741300",
    "end": "747440"
  },
  {
    "text": "embarrassingly enough the embarrassing word board has two r",
    "start": "747440",
    "end": "752640"
  },
  {
    "text": "so so let's fix the type for shall we so we say we add another R so it's embarrassingly",
    "start": "752640",
    "end": "761519"
  },
  {
    "text": "so so and we made one change now we go down here",
    "start": "761519",
    "end": "766740"
  },
  {
    "text": "and we say that for example here I like to be this calculator to be really",
    "start": "766740",
    "end": "772320"
  },
  {
    "text": "academic so I don't want to say the numbers to add instead I want to say the",
    "start": "772320",
    "end": "777959"
  },
  {
    "text": "add-ins so I kind of improved on the user feedback of the program so now I made",
    "start": "777959",
    "end": "784680"
  },
  {
    "text": "two changes right I made one change over here",
    "start": "784680",
    "end": "790019"
  },
  {
    "text": "which is a fixing a typo and then I made another change over here",
    "start": "790019",
    "end": "796399"
  },
  {
    "text": "which is kind of improving on the US it's kind of a feature you could say",
    "start": "796399",
    "end": "802620"
  },
  {
    "text": "so how do I keep those two separate well this is the scenario we have with the",
    "start": "802620",
    "end": "808680"
  },
  {
    "text": "git patch I can choose to say just stage that portion",
    "start": "808680",
    "end": "814139"
  },
  {
    "text": "and leave this in my local directory for a later commit okay",
    "start": "814139",
    "end": "819839"
  },
  {
    "text": "so how do we do that first of course we need to save this and",
    "start": "819839",
    "end": "824940"
  },
  {
    "text": "close and then I can say git add patch",
    "start": "824940",
    "end": "830700"
  },
  {
    "text": "now git is going to ask me do you want to Stage this hunk now the word hunk",
    "start": "830700",
    "end": "836100"
  },
  {
    "text": "doesn't mean what you think it means in this case the word hunk means it's",
    "start": "836100",
    "end": "841560"
  },
  {
    "text": "just the the word for for um in the unified D format which believe it or not",
    "start": "841560",
    "end": "847440"
  },
  {
    "text": "is a standard there is the word for a portion of a patch which is called a hunk now do you",
    "start": "847440",
    "end": "853680"
  },
  {
    "text": "want to Stage this hunk and then you get a bunch of options which are all pretty self-explanatory",
    "start": "853680",
    "end": "861959"
  },
  {
    "text": "now but of course you can use the question mark to say hey what what does all those letters mean but believe me",
    "start": "861959",
    "end": "868620"
  },
  {
    "text": "when I say in this case we want to split this into smaller chunks so we say",
    "start": "868620",
    "end": "877139"
  },
  {
    "text": "s so let's split and now I get the same question however you see this time it's",
    "start": "877139",
    "end": "883560"
  },
  {
    "text": "one of two hunks and then it's the same question do you want to Stage this song and then I say",
    "start": "883560",
    "end": "889139"
  },
  {
    "text": "yes that's the first change we want to Stage this hunk no",
    "start": "889139",
    "end": "894300"
  },
  {
    "text": "now if I do a good status you see the file is simultaneously staged and",
    "start": "894300",
    "end": "899940"
  },
  {
    "text": "unstaged now you might wonder how do I look at what's about to be committed",
    "start": "899940",
    "end": "906600"
  },
  {
    "text": "well I say gitif staged how do I look at what's left in my",
    "start": "906600",
    "end": "911639"
  },
  {
    "text": "working directory I can just say gitif okay",
    "start": "911639",
    "end": "917160"
  },
  {
    "text": "cool stuff now bonus tip the parts also work works for",
    "start": "917160",
    "end": "925220"
  },
  {
    "text": "undoing things so for example",
    "start": "925220",
    "end": "930720"
  },
  {
    "text": "let's open it up again and let's let's make a couple of more changes for example here",
    "start": "930720",
    "end": "936660"
  },
  {
    "text": "I'm gonna add this is documentation and then down here I'm going to say this",
    "start": "936660",
    "end": "945000"
  },
  {
    "text": "is a comment just make two two different changes now let's say that I regret one of those",
    "start": "945000",
    "end": "951720"
  },
  {
    "text": "I want to remove it from my local changes then I can say git restore",
    "start": "951720",
    "end": "958450"
  },
  {
    "text": "[Music] and then I get the same question however this time is do you want to discard this",
    "start": "958450",
    "end": "965339"
  },
  {
    "text": "hunk from the work tree and then it's the same kind of options right so I can say yeah split this do",
    "start": "965339",
    "end": "972540"
  },
  {
    "text": "you want to discard this and I say no do you want to discard this and I say yes",
    "start": "972540",
    "end": "978360"
  },
  {
    "text": "and then it's there are other change of course and I don't want to discard that so now if I say get if I got rid of",
    "start": "978360",
    "end": "985980"
  },
  {
    "text": "the comment cool stuff did you guys know about this",
    "start": "985980",
    "end": "991440"
  },
  {
    "text": "how many years knew about this also the restore okay W yeah",
    "start": "991440",
    "end": "998820"
  },
  {
    "text": "all right let's move on with more staging stuff now once you",
    "start": "998820",
    "end": "1007040"
  },
  {
    "text": "start splitting commits the next question becomes well",
    "start": "1007040",
    "end": "1012860"
  },
  {
    "text": "every commit should be consistent it should not break the build it should not fail the test I should be confident",
    "start": "1012860",
    "end": "1020060"
  },
  {
    "text": "enough that if I P cherry pick a commit from another Branch or if I you know merge something",
    "start": "1020060",
    "end": "1026000"
  },
  {
    "text": "I should not worry about the the build being broken so how do I ensure now that I'm",
    "start": "1026000",
    "end": "1032720"
  },
  {
    "text": "splitting commits and I have changes in my local directory and I have changes that are staged how do I ensure that",
    "start": "1032720",
    "end": "1039438"
  },
  {
    "text": "what staged by itself doesn't break anything so you need to kind of isolate that in",
    "start": "1039439",
    "end": "1045860"
  },
  {
    "text": "order to maybe run the test locally well it turns out that a good way to do",
    "start": "1045860",
    "end": "1051080"
  },
  {
    "text": "that is to use stash now stash is the command that takes away stuff from the working directory and you know",
    "start": "1051080",
    "end": "1058160"
  },
  {
    "text": "stashes it away however stash has a nice option called",
    "start": "1058160",
    "end": "1063380"
  },
  {
    "text": "keep index which allows you basically to remove everything from your working directory",
    "start": "1063380",
    "end": "1069080"
  },
  {
    "text": "stash it away but keep whatever was already staged so in this case I can say git stash save",
    "start": "1069080",
    "end": "1077480"
  },
  {
    "text": "but keep the index and now if I say get Thief I don't have any changes left in my working directory",
    "start": "1077480",
    "end": "1084520"
  },
  {
    "text": "however if I look at what staged that's still there",
    "start": "1084520",
    "end": "1089720"
  },
  {
    "text": "okay so now I can maybe run the tests and verify that what I'm about to commit",
    "start": "1089720",
    "end": "1096380"
  },
  {
    "text": "by itself with no other changes it works which of course it does because it's just a fixing a typo but you get the",
    "start": "1096380",
    "end": "1102799"
  },
  {
    "text": "point and now at this point I can commit and I say fixes a typo",
    "start": "1102799",
    "end": "1109760"
  },
  {
    "text": "and now once I'm done of course I can get back whatever I had stash with Git",
    "start": "1109760",
    "end": "1114860"
  },
  {
    "text": "stash pop and now I have my changes back okay cool",
    "start": "1114860",
    "end": "1121940"
  },
  {
    "text": "does anyone here use this technique couple of you okay cool",
    "start": "1121940",
    "end": "1129220"
  },
  {
    "text": "so let's move on with two more gems searching",
    "start": "1129260",
    "end": "1135200"
  },
  {
    "text": "get us some really powerful searching facilities it's allow you to allow you to search",
    "start": "1135200",
    "end": "1140960"
  },
  {
    "text": "for commits that modified lines it's more than just blame",
    "start": "1140960",
    "end": "1146419"
  },
  {
    "text": "so for example one of the most powerful features for",
    "start": "1146419",
    "end": "1152960"
  },
  {
    "text": "searching is called pickaxe because you go spelunking you know in the history with your pickaxe",
    "start": "1152960",
    "end": "1160520"
  },
  {
    "text": "and there is one so for in pickaxe what to do is that you look for commits that",
    "start": "1160520",
    "end": "1167660"
  },
  {
    "text": "either add or remove a line that matches your",
    "start": "1167660",
    "end": "1173679"
  },
  {
    "text": "search pattern so it could be something that contains wildcard or it could also be a regular expression",
    "start": "1173679",
    "end": "1182140"
  },
  {
    "text": "um but the simple one is with just wild cards so for example in this case I would like to know what's the commit",
    "start": "1182360",
    "end": "1189080"
  },
  {
    "text": "that originally introduced the typo that we just fixed so right at the command line I can and",
    "start": "1189080",
    "end": "1196160"
  },
  {
    "text": "of course I can use my Alias so I can say LG and then I say s and then in bar Russian",
    "start": "1196160",
    "end": "1204440"
  },
  {
    "text": "with one r and I get two two commits back of course I get the commit that we just",
    "start": "1204440",
    "end": "1210860"
  },
  {
    "text": "made because we modified a line we removed a line that contained the typo",
    "start": "1210860",
    "end": "1216620"
  },
  {
    "text": "and then we have another commit which is the commit that originally introduced that line",
    "start": "1216620",
    "end": "1222080"
  },
  {
    "text": "so let's take a look at it briefly and indeed this was the commit that",
    "start": "1222080",
    "end": "1229960"
  },
  {
    "text": "introduced the line okay pretty cool searching stuff",
    "start": "1229960",
    "end": "1235820"
  },
  {
    "text": "through the code bonus tip",
    "start": "1235820",
    "end": "1241460"
  },
  {
    "text": "and this is gonna I hope this is gonna blow your mind because it blew mine you",
    "start": "1241460",
    "end": "1246620"
  },
  {
    "text": "can search by function name what's the function name well it's whatever it's a method in C sharp it's a",
    "start": "1246620",
    "end": "1254360"
  },
  {
    "text": "function in JavaScript whatever has curly braces and it looks like a c style function basically",
    "start": "1254360",
    "end": "1261080"
  },
  {
    "text": "so for example I know that in this code base I have a file called calculator",
    "start": "1261080",
    "end": "1267980"
  },
  {
    "text": "which has a function called add now I want to get a list of all the",
    "start": "1267980",
    "end": "1273860"
  },
  {
    "text": "commits that somehow modify that function regardless of the line regardless of the",
    "start": "1273860",
    "end": "1281480"
  },
  {
    "text": "line number whatever so I can do I use the L option so I can say",
    "start": "1281480",
    "end": "1288440"
  },
  {
    "text": "git log l colon then the name of the function which is ADD and then the path",
    "start": "1288440",
    "end": "1293900"
  },
  {
    "text": "to the file that contains it so calculate calculator.ts",
    "start": "1293900",
    "end": "1299840"
  },
  {
    "text": "bam I get the commit that introduced the function now there are no more commissions that modify it but you know",
    "start": "1299840",
    "end": "1306260"
  },
  {
    "text": "they will also appear right there did you know about this",
    "start": "1306260",
    "end": "1311780"
  },
  {
    "text": "okay one two okay cool do you like it do you think it's useful",
    "start": "1311780",
    "end": "1318140"
  },
  {
    "text": "yeah so remember this works for any c style languages so in case of C sharp",
    "start": "1318140",
    "end": "1323659"
  },
  {
    "text": "that would be a method or Java or uh in the JavaScript which is the",
    "start": "1323659",
    "end": "1329840"
  },
  {
    "text": "script version of java uh yours it works with function",
    "start": "1329840",
    "end": "1335059"
  },
  {
    "text": "so let's move on",
    "start": "1335059",
    "end": "1340280"
  },
  {
    "text": "to automation well spoiler I have nine gems so we are",
    "start": "1340280",
    "end": "1345380"
  },
  {
    "text": "about halfway through and another spoiler is that we the gems",
    "start": "1345380",
    "end": "1351020"
  },
  {
    "text": "that we already seen it a little bit these gems kind of build upon each other so we're going to be using previous",
    "start": "1351020",
    "end": "1357140"
  },
  {
    "text": "stuff to do more stuff so we already be using the LG Alias for example and we're",
    "start": "1357140",
    "end": "1362539"
  },
  {
    "text": "going to be using more of the other stuff as well so automation",
    "start": "1362539",
    "end": "1368000"
  },
  {
    "text": "now when you work you off more often than not find out that",
    "start": "1368000",
    "end": "1373760"
  },
  {
    "text": "you there is a change that you wish you would have made earlier so for example",
    "start": "1373760",
    "end": "1380419"
  },
  {
    "text": "um I don't know you are you are about to change the file that you know it should have been part of a previous commit",
    "start": "1380419",
    "end": "1387500"
  },
  {
    "text": "so what do you do well usually if you want to keep your history clean which you should",
    "start": "1387500",
    "end": "1393500"
  },
  {
    "text": "you make a new commit and then you go back and do an interactive rebase and squash the commit into a previous one so",
    "start": "1393500",
    "end": "1401419"
  },
  {
    "text": "that it looks like the change was already made from the beginning right now this kind of workflow is so popular",
    "start": "1401419",
    "end": "1408320"
  },
  {
    "text": "that there are features in git to automate it to speed it up one such feature is called",
    "start": "1408320",
    "end": "1417080"
  },
  {
    "text": "Auto squash and you might wonder why is this not on by default well it's not so you need to",
    "start": "1417080",
    "end": "1424100"
  },
  {
    "text": "enable it first so you say git config Global rebase dot Auto squash",
    "start": "1424100",
    "end": "1433460"
  },
  {
    "text": "true now what this does is it allows you to",
    "start": "1433460",
    "end": "1439039"
  },
  {
    "text": "speed up this workflow that I talked about of amending previous commit so",
    "start": "1439039",
    "end": "1445100"
  },
  {
    "text": "now what do we have we have a change this addent",
    "start": "1445100",
    "end": "1452900"
  },
  {
    "text": "let's say that we want to make this change part of the commit that originally introduced this line okay so",
    "start": "1452900",
    "end": "1460640"
  },
  {
    "text": "we want to amend that earlier commit but we don't know which which one that is",
    "start": "1460640",
    "end": "1466360"
  },
  {
    "text": "and also we have two changes we don't know we don't want to commit this change we just want to commit that one and",
    "start": "1466820",
    "end": "1474140"
  },
  {
    "text": "squash it into a previous commit so let's use all the stuff that we've been looking at today right so far",
    "start": "1474140",
    "end": "1480620"
  },
  {
    "text": "so first we need to do a patch commit right so we said you want to Stage this no do",
    "start": "1480620",
    "end": "1486740"
  },
  {
    "text": "you want to Stage this yes perfect so now we have just changed that change now let's find the commit that originally",
    "start": "1486740",
    "end": "1494120"
  },
  {
    "text": "introduced that line of course we use the pickaxe with our together with our LG alias so we say s",
    "start": "1494120",
    "end": "1501640"
  },
  {
    "text": "and then the num this was called numbers to add what was the commit to introduce",
    "start": "1501640",
    "end": "1508220"
  },
  {
    "text": "that well it's this one perfect let's grab the kumitash",
    "start": "1508220",
    "end": "1514340"
  },
  {
    "text": "now what we do is that instead of Simply committing our change",
    "start": "1514340",
    "end": "1520520"
  },
  {
    "text": "we say commit and then dash dash fix up and then we give it the hash of the",
    "start": "1520520",
    "end": "1526700"
  },
  {
    "text": "commit that we want this to be squashed into later are you with me yeah",
    "start": "1526700",
    "end": "1534440"
  },
  {
    "text": "and what happens next is that of course you get a regular commit however the commit message contains the word fix up",
    "start": "1534440",
    "end": "1541159"
  },
  {
    "text": "with an exclamation mark so you can think in your head like fix up",
    "start": "1541159",
    "end": "1546919"
  },
  {
    "text": "and then you get it you get the basically the same",
    "start": "1546919",
    "end": "1552260"
  },
  {
    "text": "a commit message of the previous commit",
    "start": "1552260",
    "end": "1557440"
  },
  {
    "text": "now once you have a bunch of those of course you can and now at this point you can keep going with your workflow you",
    "start": "1558020",
    "end": "1564020"
  },
  {
    "text": "can do more changes and if you realize that you have a change that should have been made earlier you do the same thing",
    "start": "1564020",
    "end": "1569659"
  },
  {
    "text": "you do a fixed up commit and then you keep going so you end up with a bunch of no proper real commits and a bunch of",
    "start": "1569659",
    "end": "1575539"
  },
  {
    "text": "fixed up commits all mixed together now once you are done in the end you do",
    "start": "1575539",
    "end": "1581480"
  },
  {
    "text": "one interactive rebase so you say gitree bay is interactive",
    "start": "1581480",
    "end": "1586760"
  },
  {
    "text": "probably the C Dash I and in my case I'm going to do it for",
    "start": "1586760",
    "end": "1591860"
  },
  {
    "text": "the whole history so I'm gonna say start from the root you know but you're probably going to say from the branching",
    "start": "1591860",
    "end": "1597500"
  },
  {
    "text": "point and oh has this ever happened to you you want",
    "start": "1597500",
    "end": "1603860"
  },
  {
    "text": "to do a rebase but you have modified files in a working directory",
    "start": "1603860",
    "end": "1609380"
  },
  {
    "text": "so you need to stash them well this this is a so common problem that there is a feature for it called",
    "start": "1609380",
    "end": "1616039"
  },
  {
    "text": "Auto stash with capital S it's important that the budget doesn't work",
    "start": "1616039",
    "end": "1622100"
  },
  {
    "text": "so without the stash of course it's also something you need to enable",
    "start": "1622100",
    "end": "1627679"
  },
  {
    "text": "so you say git config global rebase dot Auto stash remember the",
    "start": "1627679",
    "end": "1635240"
  },
  {
    "text": "capital s true and now I think you can guess what it",
    "start": "1635240",
    "end": "1640340"
  },
  {
    "text": "does right so once you do an Interactive rebase",
    "start": "1640340",
    "end": "1646419"
  },
  {
    "text": "you didn't see it we're gonna see it later but it allowed us to do to do the rebase so you see what happens here the fix up",
    "start": "1646460",
    "end": "1653480"
  },
  {
    "text": "commit has been moved into the right spot just below the commit you want to squash it",
    "start": "1653480",
    "end": "1660620"
  },
  {
    "text": "into and the action has been changed into fix up so as I told you before you can have a whole bunch of this",
    "start": "1660620",
    "end": "1667580"
  },
  {
    "text": "that you make and they are going to be moved into the right spot",
    "start": "1667580",
    "end": "1672679"
  },
  {
    "text": "and the action already changed so all you have to do here you just have to quit and Save",
    "start": "1672679",
    "end": "1678620"
  },
  {
    "text": "and the rebase is done and you see what happened here created the auto stash",
    "start": "1678620",
    "end": "1684200"
  },
  {
    "text": "it allowed us to use to do the rebase and then it reapplied the auto stash so",
    "start": "1684200",
    "end": "1689779"
  },
  {
    "text": "the changes in my working directory are back and of course I have nothing in the stash",
    "start": "1689779",
    "end": "1697059"
  },
  {
    "text": "so that's really useful and also if you look at the history",
    "start": "1697159",
    "end": "1702679"
  },
  {
    "text": "we see that our fix up commit is gone it was the latest one now it's been",
    "start": "1702679",
    "end": "1708620"
  },
  {
    "text": "incorporated into this so let's take a look at how this looks like and you see that it says the add-ins so",
    "start": "1708620",
    "end": "1716059"
  },
  {
    "text": "it looks like I wrote that from the beginning okay",
    "start": "1716059",
    "end": "1722500"
  },
  {
    "text": "lots of automation stuff let's keep going with something visual",
    "start": "1723799",
    "end": "1733100"
  },
  {
    "text": "the dot notation does anyone know about the dot mutation what about the dot dot notation",
    "start": "1733100",
    "end": "1741820"
  },
  {
    "text": "okay one what about the dot dot dot notation",
    "start": "1742220",
    "end": "1747559"
  },
  {
    "text": "no one it is a real thing so it's two dots or three dots we're",
    "start": "1747559",
    "end": "1752960"
  },
  {
    "text": "going to look at the two dots today so um what does it do well usually",
    "start": "1752960",
    "end": "1761299"
  },
  {
    "text": "you are going to always let me just get rid of that change you are always going to be asking the",
    "start": "1761299",
    "end": "1767179"
  },
  {
    "text": "question what commits are in this branch that are not in that Branch usually you are in a topic Branch or in a pull",
    "start": "1767179",
    "end": "1772940"
  },
  {
    "text": "request Branch you want to say you want to know what commits are here that are not in the main branch",
    "start": "1772940",
    "end": "1778840"
  },
  {
    "text": "uh a quick way to do that is to use git log together with the dot dot notation",
    "start": "1778840",
    "end": "1785000"
  },
  {
    "text": "so for example let's say that you have this situation you have a topic branch and a main",
    "start": "1785000",
    "end": "1790580"
  },
  {
    "text": "branch now what you want to know is what",
    "start": "1790580",
    "end": "1796159"
  },
  {
    "text": "commits are in the topic branch that are not in the main branch",
    "start": "1796159",
    "end": "1804440"
  },
  {
    "text": "okay so in order to do that you say",
    "start": "1804440",
    "end": "1810799"
  },
  {
    "text": "git log main dot dot topic this means",
    "start": "1810799",
    "end": "1815899"
  },
  {
    "text": "show me the commits that are not here",
    "start": "1815899",
    "end": "1821299"
  },
  {
    "text": "but that are here so the first reference is always the negative so not here but there",
    "start": "1821299",
    "end": "1828200"
  },
  {
    "text": "okay so in this case let's switch to a topic Branch so I have a feature ADD",
    "start": "1828200",
    "end": "1835399"
  },
  {
    "text": "test script that's a topic Branch what commits are here that are not in main so I can say git LG main dot dot",
    "start": "1835399",
    "end": "1844159"
  },
  {
    "text": "feature at test script and I get this list",
    "start": "1844159",
    "end": "1849200"
  },
  {
    "text": "now of course the opposite is very easy if I want to ask the question what",
    "start": "1849200",
    "end": "1855620"
  },
  {
    "text": "commits are in Main that are not in topic",
    "start": "1855620",
    "end": "1864440"
  },
  {
    "text": "all right I just reverse it to the two the two references so I can say top not",
    "start": "1864440",
    "end": "1870500"
  },
  {
    "text": "in topic dot dot but in Main so in this case I can say guitar G",
    "start": "1870500",
    "end": "1877520"
  },
  {
    "text": "not here but that are in Main and I get that",
    "start": "1877520",
    "end": "1883940"
  },
  {
    "text": "okay of course instead of saying the name of the branch you can say head because head is always the branch you",
    "start": "1883940",
    "end": "1889100"
  },
  {
    "text": "are currently having a working tree",
    "start": "1889100",
    "end": "1894039"
  },
  {
    "text": "now combine this with a the aliases feature",
    "start": "1894380",
    "end": "1901279"
  },
  {
    "text": "and we can start we can start doing some interesting things for example let's say that we have a",
    "start": "1901279",
    "end": "1908960"
  },
  {
    "text": "lilies called new that shows you what commits are new in my branch that are not in the main branch",
    "start": "1908960",
    "end": "1915620"
  },
  {
    "text": "so how do you do that you can say git config global",
    "start": "1915620",
    "end": "1921020"
  },
  {
    "text": "Global then you say Alias dot new and then you can you can reference",
    "start": "1921020",
    "end": "1927500"
  },
  {
    "text": "you can reference aliases from other aliases you could not do that in the beginning",
    "start": "1927500",
    "end": "1932960"
  },
  {
    "text": "so that inversion I think they added in 1.8 something like that but before that you",
    "start": "1932960",
    "end": "1940100"
  },
  {
    "text": "cannot do that you can reference aliases so you can say LG",
    "start": "1940100",
    "end": "1945200"
  },
  {
    "text": "and then you can say what's not in main or master or whatever you or default or whatever you call your",
    "start": "1945200",
    "end": "1951500"
  },
  {
    "text": "no long running main branch dot dot head which is the branch you're",
    "start": "1951500",
    "end": "1957620"
  },
  {
    "text": "currently standing on now what about the opposite",
    "start": "1957620",
    "end": "1963260"
  },
  {
    "text": "I can have an alias called missing so I can say git global Alias dot missing and then I just",
    "start": "1963260",
    "end": "1969799"
  },
  {
    "text": "reverse the two things not here but in Main",
    "start": "1969799",
    "end": "1974840"
  },
  {
    "text": "now when I'm in a topic Branch I can say get new this is the new stuff what am I",
    "start": "1974840",
    "end": "1981679"
  },
  {
    "text": "missing this is the stuff I'm missing I use this all the time it's like automatic get new get missing",
    "start": "1981679",
    "end": "1991580"
  },
  {
    "text": "cool aliases to to have in your git config",
    "start": "1991580",
    "end": "1996820"
  },
  {
    "text": "okay let's go into the advanced stuff rebase onto",
    "start": "1997460",
    "end": "2006580"
  },
  {
    "text": "have you heard about rebase onto a couple of you okay do you use it every",
    "start": "2006580",
    "end": "2011740"
  },
  {
    "text": "day one that's impressive okay what does",
    "start": "2011740",
    "end": "2017340"
  },
  {
    "text": "rebase you already know what it does you know changes it changes the base of your",
    "start": "2017340",
    "end": "2023919"
  },
  {
    "text": "branch into another base what does we base on to do well rebase",
    "start": "2023919",
    "end": "2029860"
  },
  {
    "text": "onto allows you to take a chunk of a branch a portion of a branch so it",
    "start": "2029860",
    "end": "2035500"
  },
  {
    "text": "doesn't start from the branching point you can say whatever range of commits within a branch and you transferred it",
    "start": "2035500",
    "end": "2041980"
  },
  {
    "text": "to another base you can do you could say Branch surgery",
    "start": "2041980",
    "end": "2047080"
  },
  {
    "text": "so rebase onto how is this useful well let's say that",
    "start": "2047080",
    "end": "2052540"
  },
  {
    "text": "you have a situation like this which is the one we have and we have this commit over here",
    "start": "2052540",
    "end": "2061560"
  },
  {
    "text": "that we have now amended we made a fix up if you remember we so we changed it",
    "start": "2062320",
    "end": "2070060"
  },
  {
    "text": "it means that the whatever topic Branch was based on top of that now contains",
    "start": "2070060",
    "end": "2076480"
  },
  {
    "text": "the old version of that commit right while the main branch now has the new",
    "start": "2076480",
    "end": "2084398"
  },
  {
    "text": "version which is exactly what we have if you look",
    "start": "2084399",
    "end": "2091480"
  },
  {
    "text": "let me see here if I can do git new get missing do you guys spot something",
    "start": "2091480",
    "end": "2098080"
  },
  {
    "text": "interesting in these two we give you a hint",
    "start": "2098080",
    "end": "2104680"
  },
  {
    "text": "so what's new in our branch",
    "start": "2104680",
    "end": "2109839"
  },
  {
    "text": "is actually the old commit",
    "start": "2109839",
    "end": "2116020"
  },
  {
    "text": "and what's in main it's the new amended commit",
    "start": "2116020",
    "end": "2122460"
  },
  {
    "text": "right so now how can we get rid of this situation",
    "start": "2122500",
    "end": "2128320"
  },
  {
    "text": "we want to be what we want to do basically is we want to take these two commits",
    "start": "2128320",
    "end": "2134140"
  },
  {
    "text": "over here and we want to move them so that they become based off of Main",
    "start": "2134140",
    "end": "2140560"
  },
  {
    "text": "thus removing this commit tool together so this is what we want to do take those",
    "start": "2140560",
    "end": "2146020"
  },
  {
    "text": "two move them on top of Main and get rid of that old B",
    "start": "2146020",
    "end": "2152040"
  },
  {
    "text": "so you can do that by using um rebase onto",
    "start": "2152680",
    "end": "2158260"
  },
  {
    "text": "so how does the syntax look like well it's very simple you say gitree",
    "start": "2158260",
    "end": "2163720"
  },
  {
    "text": "base onto and then you say new base",
    "start": "2163720",
    "end": "2169500"
  },
  {
    "text": "and then you say what was the old base and you give it as a second parameter so",
    "start": "2170859",
    "end": "2176260"
  },
  {
    "text": "in in our case it's going to look like this rebase on to main the new base what was",
    "start": "2176260",
    "end": "2183280"
  },
  {
    "text": "the old base it was the old B which is going to be excluded",
    "start": "2183280",
    "end": "2190619"
  },
  {
    "text": "so in our topic Branch we say rebase well first we we need to find the main",
    "start": "2190660",
    "end": "2196420"
  },
  {
    "text": "the old B which is this one",
    "start": "2196420",
    "end": "2202060"
  },
  {
    "text": "so let's grab the committash you can also say origin Main in this case because there is a branch reference",
    "start": "2202060",
    "end": "2207640"
  },
  {
    "text": "sorry based on to main what was the old base it was B",
    "start": "2207640",
    "end": "2213160"
  },
  {
    "text": "and now it's just one operation I have no longer B here",
    "start": "2213160",
    "end": "2220300"
  },
  {
    "text": "I just have the new commits so what I did once again I took those two commits and I moved them up",
    "start": "2220300",
    "end": "2228040"
  },
  {
    "text": "so that they're based off of Main and this way I got rid of the old base which is B",
    "start": "2228040",
    "end": "2234760"
  },
  {
    "text": "so that's rebase onto and it's a very quick way to also delete commits in a",
    "start": "2234760",
    "end": "2240880"
  },
  {
    "text": "branch like let's say that you have 10 commits and there are two in the middle that you want to remove you just say",
    "start": "2240880",
    "end": "2246760"
  },
  {
    "text": "replace onto what was the old com the first of the old commits we want to remove and what is the new base you want",
    "start": "2246760",
    "end": "2253060"
  },
  {
    "text": "to use and you basically remove commits that are in the middle of a branch",
    "start": "2253060",
    "end": "2259500"
  },
  {
    "text": "I know it takes some getting used to once well now you know about rebase onto so you can explore it further and",
    "start": "2260500",
    "end": "2266619"
  },
  {
    "text": "because there is another uh another variant of it based onto with three",
    "start": "2266619",
    "end": "2272200"
  },
  {
    "text": "arguments where you take a just a chunk in the in the middle of a branch and then move it somewhere else",
    "start": "2272200",
    "end": "2278980"
  },
  {
    "text": "so I encourage you to look it up and start adding it into your your toolbox",
    "start": "2278980",
    "end": "2284140"
  },
  {
    "text": "because it's very useful",
    "start": "2284140",
    "end": "2287338"
  },
  {
    "text": "of course in the end we end up with a linear history like this which is what we have",
    "start": "2289420",
    "end": "2297240"
  },
  {
    "text": "so we are actually really ahead of schedule",
    "start": "2298480",
    "end": "2305099"
  },
  {
    "text": "so let's talk about gem number eight which is the reflog how many of you here",
    "start": "2305140",
    "end": "2310540"
  },
  {
    "text": "know about reflog okay a couple of you so what is the ref Vlog well",
    "start": "2310540",
    "end": "2319980"
  },
  {
    "text": "git doesn't only keep track of your file files is also keeps track of it its own",
    "start": "2320260",
    "end": "2327400"
  },
  {
    "text": "files and the git's own files are the references the branches or the tags",
    "start": "2327400",
    "end": "2333579"
  },
  {
    "text": "now every time a branch changes so you make a new commit or you rebase",
    "start": "2333579",
    "end": "2339760"
  },
  {
    "text": "or you reset git remembers what commit was that",
    "start": "2339760",
    "end": "2344980"
  },
  {
    "text": "Branch pointing to before this operation okay and that list of changes is called a",
    "start": "2344980",
    "end": "2351940"
  },
  {
    "text": "reflog now every branch has its own reflog which you can get to by saying",
    "start": "2351940",
    "end": "2359260"
  },
  {
    "text": "git reflog and then the branch name so for example featured at this",
    "start": "2359260",
    "end": "2365079"
  },
  {
    "text": "test script and you get the ref log for that",
    "start": "2365079",
    "end": "2371260"
  },
  {
    "text": "particular branch now you might actually let's look at",
    "start": "2371260",
    "end": "2376359"
  },
  {
    "text": "Main sort of log which is a little bit easier so in the main this is its ref log what",
    "start": "2376359",
    "end": "2383500"
  },
  {
    "text": "you see is that every entry has the name of the branch then the at and then a number which increases",
    "start": "2383500",
    "end": "2390339"
  },
  {
    "text": "now this is the higher the number the older the entries so the latest one is",
    "start": "2390339",
    "end": "2395500"
  },
  {
    "text": "always zero that's where we are at now and the oldest ones not are the higher numbers",
    "start": "2395500",
    "end": "2402400"
  },
  {
    "text": "and you see what kind of changes is it you see the fixed subcommit we made the other commit",
    "start": "2402400",
    "end": "2408420"
  },
  {
    "text": "resetting rebasing so these are the commits that that Branch was pointing to before those",
    "start": "2408420",
    "end": "2416200"
  },
  {
    "text": "operations so how can we use and another thing to know",
    "start": "2416200",
    "end": "2423400"
  },
  {
    "text": "is that head which is the reference that points to the the branch you are currently have",
    "start": "2423400",
    "end": "2429099"
  },
  {
    "text": "checked out head also has its own reflog which you get to by saying just get reflog",
    "start": "2429099",
    "end": "2436540"
  },
  {
    "text": "and this basically contains the same thing however it's had instead of the branch name and another thing that reflog for head",
    "start": "2436540",
    "end": "2443920"
  },
  {
    "text": "contains is every time you move a branch so every time you do a checkout or a",
    "start": "2443920",
    "end": "2449920"
  },
  {
    "text": "switch the left log for head remembers what branch did you have checked out before",
    "start": "2449920",
    "end": "2457240"
  },
  {
    "text": "which is something that you can use and I'm gonna show you but first let's look at how can you use",
    "start": "2457240",
    "end": "2463660"
  },
  {
    "text": "the ref log well let's say the day of situation like this which is the usual situation",
    "start": "2463660",
    "end": "2470920"
  },
  {
    "text": "now we did a rebase so now we the history looks like this",
    "start": "2470920",
    "end": "2476500"
  },
  {
    "text": "but what if we change our mind now the rebase is complete it's finished but now we want to go back to where",
    "start": "2476500",
    "end": "2483579"
  },
  {
    "text": "things were before the rebase well how do you do that I mean the old",
    "start": "2483579",
    "end": "2489099"
  },
  {
    "text": "commit is no longer visible in the history if you do git log",
    "start": "2489099",
    "end": "2494140"
  },
  {
    "text": "however it's still there somewhere and what's pointing to the old in our",
    "start": "2494140",
    "end": "2501640"
  },
  {
    "text": "case D before a rebase what's pointing to it is of course the",
    "start": "2501640",
    "end": "2508780"
  },
  {
    "text": "ref log for that for that branch and if that was the last operation we did",
    "start": "2508780",
    "end": "2515440"
  },
  {
    "text": "it's going to be number one because zero is where we are right now and the previous",
    "start": "2515440",
    "end": "2520960"
  },
  {
    "text": "reference the previous commit that Branch was pointing to was is number one",
    "start": "2520960",
    "end": "2526119"
  },
  {
    "text": "so now that we have a way to get to that commit it becomes pretty trivial to undo",
    "start": "2526119",
    "end": "2531220"
  },
  {
    "text": "things because now we made a rebase I can just say reset",
    "start": "2531220",
    "end": "2536260"
  },
  {
    "text": "which is how you change the branch reference to something else",
    "start": "2536260",
    "end": "2541480"
  },
  {
    "text": "in this case you say hard because you really mean it no you say hard because you also want to",
    "start": "2541480",
    "end": "2548500"
  },
  {
    "text": "change your working directory and the head reference so that everything is synchronized",
    "start": "2548500",
    "end": "2554680"
  },
  {
    "text": "what do you reset it to well you reset it to feature ADD test script at one",
    "start": "2554680",
    "end": "2562240"
  },
  {
    "text": "and now if I say get new I get the old B back the one who I got",
    "start": "2562240",
    "end": "2567640"
  },
  {
    "text": "ridden off before so rare life log is basically gits",
    "start": "2567640",
    "end": "2573099"
  },
  {
    "text": "Universal undo machine now you might wonder how long are these",
    "start": "2573099",
    "end": "2578619"
  },
  {
    "text": "things being kept around in the reflog well usually is 30 days",
    "start": "2578619",
    "end": "2586000"
  },
  {
    "text": "so entries older than 30 days are going to be dropped out of the ref log now",
    "start": "2586000",
    "end": "2592780"
  },
  {
    "text": "actually scratch that I think it's 90 days entries older than 90 days are going to",
    "start": "2592780",
    "end": "2597880"
  },
  {
    "text": "be no all this one that just get removed from the left log and of course it's a setting that you",
    "start": "2597880",
    "end": "2603819"
  },
  {
    "text": "can change now keep in mind that git has its own garbage collection",
    "start": "2603819",
    "end": "2608980"
  },
  {
    "text": "so commits that are not being referenced by anything like in this case once we",
    "start": "2608980",
    "end": "2614020"
  },
  {
    "text": "did the rebase there was nothing pointing to the old B apart from the ref log",
    "start": "2614020",
    "end": "2620079"
  },
  {
    "text": "so once it also drops out of the ref log then there is really nothing pointing to",
    "start": "2620079",
    "end": "2625240"
  },
  {
    "text": "the old commit and the garbage collection is going to remove it together with the whole files Associated",
    "start": "2625240",
    "end": "2630880"
  },
  {
    "text": "to it right the blobs and stuff so that's good to know the reflog stays",
    "start": "2630880",
    "end": "2636940"
  },
  {
    "text": "there for uh for a few months so you can always go back and bonus Tip since we have a bit of",
    "start": "2636940",
    "end": "2643660"
  },
  {
    "text": "extra time what if you don't know what entry something is in the ref log",
    "start": "2643660",
    "end": "2650800"
  },
  {
    "text": "now we can combine all that we already know for example remember the pickaxe",
    "start": "2650800",
    "end": "2657640"
  },
  {
    "text": "well you can say git LG s and then some word",
    "start": "2657640",
    "end": "2662740"
  },
  {
    "text": "that was in the files so for example I don't know the audience",
    "start": "2662740",
    "end": "2669760"
  },
  {
    "text": "and then if you add walk ref logs this tells git L log to not only look at",
    "start": "2669760",
    "end": "2677079"
  },
  {
    "text": "the history with that pickaxe but also look at the ref log",
    "start": "2677079",
    "end": "2683619"
  },
  {
    "text": "and now I don't get anything because there is nothing there but always add ref log another way you",
    "start": "2683619",
    "end": "2689440"
  },
  {
    "text": "another thing you can do is that what if I remember the commit message I don't remember the change but I remembered",
    "start": "2689440",
    "end": "2695560"
  },
  {
    "text": "some word in the commit message then you can say git LG grep",
    "start": "2695560",
    "end": "2701980"
  },
  {
    "text": "and then you can say what was in the commit message a word for example you can say I don't know add",
    "start": "2701980",
    "end": "2709300"
  },
  {
    "text": "and then you say Walker F logs and now you get all the commits that",
    "start": "2709300",
    "end": "2714640"
  },
  {
    "text": "contain the word add however you get them from the the ref log",
    "start": "2714640",
    "end": "2721500"
  },
  {
    "text": "all right and that's what we do right now right we",
    "start": "2725380",
    "end": "2731260"
  },
  {
    "text": "reseted the topic Branch to the entry in the in the um in the ref log and now",
    "start": "2731260",
    "end": "2737260"
  },
  {
    "text": "we're back to that situation again we're doing really good on time",
    "start": "2737260",
    "end": "2744460"
  },
  {
    "text": "so let's look at our last",
    "start": "2744460",
    "end": "2750420"
  },
  {
    "text": "um last but not least gem which is my personal favorite",
    "start": "2750460",
    "end": "2757680"
  },
  {
    "text": "does anyone you know about Rivera no",
    "start": "2760680",
    "end": "2766359"
  },
  {
    "text": "oh no okay so then it means that someone here knew",
    "start": "2766359",
    "end": "2772180"
  },
  {
    "text": "about everything okay look me up afterwards what is that what on Earth is errored",
    "start": "2772180",
    "end": "2780520"
  },
  {
    "text": "well it stands for re reuse recorded resolution",
    "start": "2780520",
    "end": "2786579"
  },
  {
    "text": "now we all know merge conflicts are a fact of life and they are they happen more often than",
    "start": "2786579",
    "end": "2792220"
  },
  {
    "text": "not and have you ever been in a situation where you have to resolve the same conflict multiple times",
    "start": "2792220",
    "end": "2798040"
  },
  {
    "text": "yeah it happens now there is one part there are many",
    "start": "2798040",
    "end": "2803859"
  },
  {
    "text": "reasons why you might have to do that but one particular reason that comes to mind is there is a no very common",
    "start": "2803859",
    "end": "2810940"
  },
  {
    "text": "workflow that is being used in the Linux development Linux kernel development",
    "start": "2810940",
    "end": "2816640"
  },
  {
    "text": "which is called the test merge workflow so let's say that you have a topic branch which is kind of long running so",
    "start": "2816640",
    "end": "2823599"
  },
  {
    "text": "you're you keep it around for a longest time however your main branch is also going",
    "start": "2823599",
    "end": "2829480"
  },
  {
    "text": "to move ahead what you want to do is that you want to make sure that what you are doing",
    "start": "2829480",
    "end": "2836140"
  },
  {
    "text": "doesn't conflict with whatever is happening in the main branch so what do you do you regularly do merges",
    "start": "2836140",
    "end": "2844720"
  },
  {
    "text": "from the main branch into your own topic branch however you don't keep all of those",
    "start": "2844720",
    "end": "2851260"
  },
  {
    "text": "merge commits around because they will clutter the history what you do is that you do a merge and",
    "start": "2851260",
    "end": "2858880"
  },
  {
    "text": "then you don't commit it so you basically do a merge but not con do",
    "start": "2858880",
    "end": "2864220"
  },
  {
    "text": "you do not continue until the merge commit actually is created you just interrupted before",
    "start": "2864220",
    "end": "2870760"
  },
  {
    "text": "well what gives you the opportunity to do is to see if there are any conflicts right you just do a merge are there any",
    "start": "2870760",
    "end": "2878680"
  },
  {
    "text": "conflicts yes if you have a rarely enabled you can",
    "start": "2878680",
    "end": "2883720"
  },
  {
    "text": "resolve those conflicts the resolution is going to be recorded",
    "start": "2883720",
    "end": "2889359"
  },
  {
    "text": "and then you can get rid of the merge commit but the resolution is still recorded for later",
    "start": "2889359",
    "end": "2896020"
  },
  {
    "text": "and if you keep doing this regularly you're going to be solving the conflicts you know at regular intervals then at",
    "start": "2896020",
    "end": "2903579"
  },
  {
    "text": "the end once you are ready to merge you're going to have of course the same conflict because you deleted the merge",
    "start": "2903579",
    "end": "2909940"
  },
  {
    "text": "commits however all the resolutions are going to be reapplied okay",
    "start": "2909940",
    "end": "2915940"
  },
  {
    "text": "so the test merge workflow is pretty pretty useful to do if you have a long running topic branch",
    "start": "2915940",
    "end": "2922900"
  },
  {
    "text": "and a fast moving main branch okay so how do you do it of course you need",
    "start": "2922900",
    "end": "2929440"
  },
  {
    "text": "to enable it first so config Global enabled",
    "start": "2929440",
    "end": "2936520"
  },
  {
    "text": "true yeah it's always funny every time and remember that nothing is recorded",
    "start": "2937000",
    "end": "2942579"
  },
  {
    "text": "until you enable it so previous merge conflict that you resolved those are not",
    "start": "2942579",
    "end": "2947680"
  },
  {
    "text": "going to be recorded however there is a python script that tries to recreate",
    "start": "2947680",
    "end": "2953800"
  },
  {
    "text": "to go to look at the merge commits and trying to you know record the resolution but you know it's hit and miss",
    "start": "2953800",
    "end": "2961359"
  },
  {
    "text": "so from the point when you enable it then it starts recording and how does it",
    "start": "2961359",
    "end": "2966819"
  },
  {
    "text": "look like well we are in our feature branch",
    "start": "2966819",
    "end": "2973200"
  },
  {
    "text": "let's say that we want to re merge it into main okay",
    "start": "2973359",
    "end": "2978520"
  },
  {
    "text": "so we switch to Main and then we say merge feature",
    "start": "2978520",
    "end": "2984940"
  },
  {
    "text": "ADD test script now we have a conflict",
    "start": "2984940",
    "end": "2990819"
  },
  {
    "text": "but notice in the output it says recorded pre-image for the file",
    "start": "2990819",
    "end": "2998020"
  },
  {
    "text": "that has the conflict now this is Rarity that's printing that out",
    "start": "2998020",
    "end": "3004560"
  },
  {
    "text": "now of course we can take a look at the div and you see how Delta formats the",
    "start": "3004560",
    "end": "3010380"
  },
  {
    "text": "emerge conflict in a pretty way makes it really easy to see what's what of course the line that's",
    "start": "3010380",
    "end": "3017520"
  },
  {
    "text": "conflicting is this the add-ons in our topic Branch it says still the",
    "start": "3017520",
    "end": "3023819"
  },
  {
    "text": "old one this is B conflicting it's this is the old B conflicting with the Newbie right",
    "start": "3023819",
    "end": "3029660"
  },
  {
    "text": "so the numbers to add and the add-ins which one do we want of course we want",
    "start": "3029660",
    "end": "3035099"
  },
  {
    "text": "the new one the one that's in head which is the target of the merge",
    "start": "3035099",
    "end": "3041760"
  },
  {
    "text": "so there is a quick way to resolve this conflict we just say ReStore hours we",
    "start": "3041760",
    "end": "3048660"
  },
  {
    "text": "want our version of the file not theirs which is the topic branch",
    "start": "3048660",
    "end": "3054359"
  },
  {
    "text": "and then we say index perfect now we have resolved the conflict you",
    "start": "3054359",
    "end": "3060240"
  },
  {
    "text": "need to tell that this is the resolution and how do you do that you do it by staging",
    "start": "3060240",
    "end": "3066980"
  },
  {
    "text": "the um the file with the resolution and then you can just say merge continue",
    "start": "3066980",
    "end": "3075440"
  },
  {
    "text": "of course you got the message and then you save and notice here recorder resolution for that file",
    "start": "3076140",
    "end": "3084599"
  },
  {
    "text": "okay now let's say that we change our mind we want to remove the merge commit",
    "start": "3084599",
    "end": "3092640"
  },
  {
    "text": "which is what we will do in the test merge flow and you say git reset hard go back to",
    "start": "3092640",
    "end": "3100920"
  },
  {
    "text": "the parent of our latest commit that's little character there the carrot",
    "start": "3100920",
    "end": "3107280"
  },
  {
    "text": "sign means the parent of the previous commit of head so let's reset now now we have no no",
    "start": "3107280",
    "end": "3113579"
  },
  {
    "text": "longer a merge commit we are back to this situation over here and let's say that now we want to",
    "start": "3113579",
    "end": "3120200"
  },
  {
    "text": "instead we want to rebase so that we get a linear history instead",
    "start": "3120200",
    "end": "3125520"
  },
  {
    "text": "now remember every base is still emerge it's just that every commit is being",
    "start": "3125520",
    "end": "3131220"
  },
  {
    "text": "applied one at a time instead of merging two commits so if we switch back to our feature",
    "start": "3131220",
    "end": "3139079"
  },
  {
    "text": "brand and we do a rebase to Main",
    "start": "3139079",
    "end": "3144480"
  },
  {
    "text": "we're going to get the same conflict again however this time we get hey it",
    "start": "3144480",
    "end": "3150359"
  },
  {
    "text": "was resolved using a previous resolution now remember git is very conservative it",
    "start": "3150359",
    "end": "3156480"
  },
  {
    "text": "doesn't really it doesn't just reapply a previous resolution and go ahead and continue and no complete done because of",
    "start": "3156480",
    "end": "3164460"
  },
  {
    "text": "course things change in a previous resolution might be obsolete now",
    "start": "3164460",
    "end": "3169559"
  },
  {
    "text": "so it always stops and gives you the chance to check does the resolution still apply",
    "start": "3169559",
    "end": "3176520"
  },
  {
    "text": "so you can take a look at the file",
    "start": "3176520",
    "end": "3182000"
  },
  {
    "text": "SRC index you see that it reapplied the add-ons like we have done previously so this",
    "start": "3182780",
    "end": "3190980"
  },
  {
    "text": "looks good let's confirm that it does by adding it to the index and then we say rebase",
    "start": "3190980",
    "end": "3196980"
  },
  {
    "text": "continue and now we're done okay and this of course works well other",
    "start": "3196980",
    "end": "3203940"
  },
  {
    "text": "ones I have I can show you one thing more that is then what do you do if the",
    "start": "3203940",
    "end": "3210180"
  },
  {
    "text": "resolution is obsolete how do you remove a previously recorded resolution",
    "start": "3210180",
    "end": "3216960"
  },
  {
    "text": "well once again now we're going to use what we already",
    "start": "3216960",
    "end": "3222720"
  },
  {
    "text": "learned now we have rebased how do we get back",
    "start": "3222720",
    "end": "3228180"
  },
  {
    "text": "to before the rebase what do we use the ref log right",
    "start": "3228180",
    "end": "3234839"
  },
  {
    "text": "so we can just reset hard feature at the script at one because this is the last",
    "start": "3234839",
    "end": "3241920"
  },
  {
    "text": "thing we just did and now we're back to before the rebase",
    "start": "3241920",
    "end": "3250319"
  },
  {
    "text": "now let's do the rebase again of course we run into the same conflict",
    "start": "3250319",
    "end": "3255420"
  },
  {
    "text": "however this time the resolution doesn't apply anymore so what do we do we say git red forget",
    "start": "3255420",
    "end": "3264119"
  },
  {
    "text": "SRC index and he says",
    "start": "3264119",
    "end": "3270000"
  },
  {
    "text": "I forgot the previous resolution and now you need to of course resolve it again and do the same thing again right",
    "start": "3270000",
    "end": "3277020"
  },
  {
    "text": "which is gonna which is going to record the new resolution afterwards",
    "start": "3277020",
    "end": "3282800"
  },
  {
    "text": "now you might wonder where are those recorded Solutions well of course they are in the git directory there is a",
    "start": "3283260",
    "end": "3290640"
  },
  {
    "text": "directory called RR cache why not RR cash",
    "start": "3290640",
    "end": "3298020"
  },
  {
    "text": "I don't know you tell me but that is where they are and there is a directory",
    "start": "3298020",
    "end": "3304380"
  },
  {
    "text": "of course into into that there is a directory for every um and now we are",
    "start": "3304380",
    "end": "3311099"
  },
  {
    "text": "now we forgot about it so there are no files so let's continue and look at how it",
    "start": "3311099",
    "end": "3316380"
  },
  {
    "text": "looks like once you resolve the resolution",
    "start": "3316380",
    "end": "3321740"
  },
  {
    "text": "yeah the file is already being changed so now in theory we will apply a different resolution but in this case",
    "start": "3321780",
    "end": "3327180"
  },
  {
    "text": "we're gonna keep it the same and then you say rebase continue",
    "start": "3327180",
    "end": "3334220"
  },
  {
    "text": "and it was uh and it was rebased",
    "start": "3334740",
    "end": "3339440"
  },
  {
    "text": "and now hopefully it has recorded no because I actually did not never mind",
    "start": "3341160",
    "end": "3350700"
  },
  {
    "text": "what happens is that in that directory there are going to be three files one with the one side of the conflict one",
    "start": "3350700",
    "end": "3357119"
  },
  {
    "text": "with the other side of the conflict and one with the final resolution and that's how git recognizes that the same",
    "start": "3357119",
    "end": "3363240"
  },
  {
    "text": "conflict appears again if each side is the same and it reapplies the third file",
    "start": "3363240",
    "end": "3368700"
  },
  {
    "text": "which was the resolution all right let's sum this up",
    "start": "3368700",
    "end": "3376140"
  },
  {
    "text": "we have looked at nine gems first one was pretty logs",
    "start": "3376140",
    "end": "3382440"
  },
  {
    "text": "use the pretty option of git log to customize the way you look at history then we looked at pretty divs highly",
    "start": "3382440",
    "end": "3389520"
  },
  {
    "text": "encourage you to add Delta to Azure pager makes life really easier when you",
    "start": "3389520",
    "end": "3395280"
  },
  {
    "text": "look at diffs staging with the partial partial staging",
    "start": "3395280",
    "end": "3400859"
  },
  {
    "text": "with the git add patch and restore paths to individually remove changes from your",
    "start": "3400859",
    "end": "3407880"
  },
  {
    "text": "working directory then we have the searching facilities with pickaxe look at commits that either",
    "start": "3407880",
    "end": "3415140"
  },
  {
    "text": "add or remove a line that matches some text or some while irregular expression",
    "start": "3415140",
    "end": "3422599"
  },
  {
    "text": "automation remember about Auto squash and auto stash to speed up the workflow",
    "start": "3422660",
    "end": "3430380"
  },
  {
    "text": "where you go back and amend previous commits",
    "start": "3430380",
    "end": "3435318"
  },
  {
    "text": "the dot notation allows you to compare branches what's in this Branch that's not in another branch",
    "start": "3435480",
    "end": "3442319"
  },
  {
    "text": "and then you can associate those two aliases to create the new and missing aliases to",
    "start": "3442319",
    "end": "3449220"
  },
  {
    "text": "quickly determine what's new and what's missing in your topic brands then we looked at rebase onto which is",
    "start": "3449220",
    "end": "3456119"
  },
  {
    "text": "the advanced version of the base where you take portions of a branch and move",
    "start": "3456119",
    "end": "3462780"
  },
  {
    "text": "them into a new base which is a good way to get rid of",
    "start": "3462780",
    "end": "3469200"
  },
  {
    "text": "commits that you no longer want in a branch then we looked at the gits universal",
    "start": "3469200",
    "end": "3475020"
  },
  {
    "text": "undo machine which is the ref vlog keeps track of every Branch what commits they",
    "start": "3475020",
    "end": "3480900"
  },
  {
    "text": "were pointing to and you can use that together with reset to go back to previous States",
    "start": "3480900",
    "end": "3487559"
  },
  {
    "text": "and you can use the warcraft logs option to to do searches like we did with",
    "start": "3487559",
    "end": "3493859"
  },
  {
    "text": "pickaxe but you can search in the ref log as well Warcraft logs",
    "start": "3493859",
    "end": "3499319"
  },
  {
    "text": "and finally a red data which is a reuse recorder resolution git remembers how you solve conflicts",
    "start": "3499319",
    "end": "3506700"
  },
  {
    "text": "and automatically reapplies the same solution once it sees that the conflict is the same on both sides",
    "start": "3506700",
    "end": "3514200"
  },
  {
    "text": "now there are many more features like that in git you can imagine",
    "start": "3514200",
    "end": "3520980"
  },
  {
    "text": "of course I cannot show you everything so I have a course out on plural site",
    "start": "3520980",
    "end": "3526020"
  },
  {
    "text": "called Advanced get tips and tricks that covers some of this stuff and stuff",
    "start": "3526020",
    "end": "3533040"
  },
  {
    "text": "that I wouldn't I wouldn't have time to show you today so if you have plural site I highly encourage you to check that out",
    "start": "3533040",
    "end": "3540119"
  },
  {
    "text": "and with that I'd like to thank you for your attention",
    "start": "3540119",
    "end": "3545779"
  },
  {
    "text": "foreign",
    "start": "3548040",
    "end": "3550640"
  }
]