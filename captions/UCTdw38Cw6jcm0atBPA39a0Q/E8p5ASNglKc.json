[
  {
    "text": "okay I guess uh We've starting uh thanks for coming hear me",
    "start": "1760",
    "end": "6919"
  },
  {
    "text": "talk again um I uh I I I submitted a",
    "start": "6919",
    "end": "12120"
  },
  {
    "text": "topic of course and then I start working on my slides and as I worked on the slides I start to change the",
    "start": "12120",
    "end": "18800"
  },
  {
    "text": "topic so uh hopefully what I talk about today seems uh familiar to the abstract",
    "start": "18800",
    "end": "27480"
  },
  {
    "text": "so you're not too uh you know too misled but uh my uh my cooworker Han is",
    "start": "27480",
    "end": "34840"
  },
  {
    "text": "upstairs talking about Conex for data structures she's a great speaker you know you could still have time to catch",
    "start": "34840",
    "end": "41440"
  },
  {
    "text": "her if [Laughter] you um so uh my final topic today is",
    "start": "41440",
    "end": "48840"
  },
  {
    "text": "interor portability and safety related systems I you know initially planned to just mostly complain about Miser but as",
    "start": "48840",
    "end": "55480"
  },
  {
    "text": "I as I started working on the slides and sort of exploring um some of the",
    "start": "55480",
    "end": "61079"
  },
  {
    "text": "portability issues I I started to realize um you know uh just just really",
    "start": "61079",
    "end": "67960"
  },
  {
    "text": "how problematic uh portability is in CN C++ so I went into that a little bit more detail but but these topics of",
    "start": "67960",
    "end": "74880"
  },
  {
    "text": "integers portability safety they're all uh you know will'll all be covered here",
    "start": "74880",
    "end": "80960"
  },
  {
    "text": "uh so just to start with kind of the definitions um I I've done security for",
    "start": "80960",
    "end": "86920"
  },
  {
    "text": "some years uh 2003 I start working in ERT at SEI um and um a few years ago I joined",
    "start": "86920",
    "end": "94600"
  },
  {
    "text": "woven by Toyota and and uh my focus shifted a bit to safety and uh you know",
    "start": "94600",
    "end": "100439"
  },
  {
    "text": "started finally to understand a little bit more what what functional safety meant uh and it's not it's not you know",
    "start": "100439",
    "end": "108799"
  },
  {
    "text": "exactly what I thought it was before going to woven and and and thinking about safety uh so so functional safety",
    "start": "108799",
    "end": "114799"
  },
  {
    "text": "is the systematic process used to ensure that failures don't occur uh and so",
    "start": "114799",
    "end": "120680"
  },
  {
    "text": "um so you can have faults in code uh you know passive flaws and uh maybe maybe",
    "start": "120680",
    "end": "126000"
  },
  {
    "text": "the fault is never executed and that's the end of it um you know the fault could execute and cause an error to",
    "start": "126000",
    "end": "132720"
  },
  {
    "text": "occur uh and faults are you know they're not great things errors are not great things uh but in safety critical systems",
    "start": "132720",
    "end": "141680"
  },
  {
    "text": "uh they they are tolerated and um they're accounted for right so probably",
    "start": "141680",
    "end": "149920"
  },
  {
    "text": "if you don't consider them and account for them you probably don't have a safe system uh you just can't kind of go with",
    "start": "149920",
    "end": "157280"
  },
  {
    "text": "the assumption that yes it's all it's all correct so so the thing that's that's not acceptable is failure right",
    "start": "157280",
    "end": "164040"
  },
  {
    "text": "and so uh you have to make sure that if you have a functional",
    "start": "164040",
    "end": "169080"
  },
  {
    "text": "unit uh that it's able to Performance function you know and and the obvious examples are uh hey we have a braking",
    "start": "169080",
    "end": "175920"
  },
  {
    "text": "system right and um there might be an error in the breaking system but that",
    "start": "175920",
    "end": "181319"
  },
  {
    "text": "error cannot lead to a failure right because a failure could lead to uh you",
    "start": "181319",
    "end": "186440"
  },
  {
    "text": "know injury or harm coming to to uh to to people you know or or",
    "start": "186440",
    "end": "193200"
  },
  {
    "text": "property um so that's a kind of overview of um functional safety",
    "start": "193200",
    "end": "200640"
  },
  {
    "text": "portability i' you know I've I've I've said for years that um the word portability is ambiguous and",
    "start": "200640",
    "end": "209120"
  },
  {
    "text": "so I tried to um nail it down a little bit more I",
    "start": "209120",
    "end": "215000"
  },
  {
    "text": "originally thought I would have more kinds of portability than I ended up with uh but I really here I have two",
    "start": "215000",
    "end": "221239"
  },
  {
    "text": "maybe three uh so so software and these are these are my own definitions I didn't steal this from anywhere but",
    "start": "221239",
    "end": "227840"
  },
  {
    "text": "software portability I I've described as a a design objective for source code to",
    "start": "227840",
    "end": "233280"
  },
  {
    "text": "be easily made to run on different platforms so that's the the broad concept right you want uh God to quote",
    "start": "233280",
    "end": "240599"
  },
  {
    "text": "from java you know write once run it everywhere um so I've broken that into",
    "start": "240599",
    "end": "245879"
  },
  {
    "text": "two separate things though build time portability which is uh does the code I'm writing use only uh features of the",
    "start": "245879",
    "end": "253360"
  },
  {
    "text": "language and library that uh are guaranteed to exist and have the same behavior on the target platform so so",
    "start": "253360",
    "end": "259959"
  },
  {
    "text": "very simply is this code going to uh compile and Link and um yeah uh",
    "start": "259959",
    "end": "267040"
  },
  {
    "text": "sometimes the code not compiling and linking is is better than than uh the other",
    "start": "267040",
    "end": "273919"
  },
  {
    "text": "alternative so so the the the separate aspect of this is runtime portability",
    "start": "273919",
    "end": "279320"
  },
  {
    "text": "which is uh you know does the language compiler or Library function have the same behavior on the target platform you",
    "start": "279320",
    "end": "285320"
  },
  {
    "text": "know will it have the same runtime Behavior so so that's probably definitions for code that you're writing there",
    "start": "285320",
    "end": "292080"
  },
  {
    "text": "there's other flavors of portability like the other in in class the other day I see some of my students in the audience um I was talking about C being",
    "start": "292080",
    "end": "299919"
  },
  {
    "text": "a more portable language than C++ and and what I meant by that type of portability is that you know there's",
    "start": "299919",
    "end": "306120"
  },
  {
    "text": "more compilers and more types of Hardware that run C then run C++ so if",
    "start": "306120",
    "end": "311479"
  },
  {
    "text": "you have a c program theoretically you can you can move that further uh uh you",
    "start": "311479",
    "end": "316759"
  },
  {
    "text": "know to more different types of systems so that's that's a third type of portability that I'm not uh focused on",
    "start": "316759",
    "end": "322919"
  },
  {
    "text": "here right now but the word portability is um yeah it's it's a it's un",
    "start": "322919",
    "end": "330520"
  },
  {
    "text": "it's sort of unfortunate because you you say portability people think they know what you mean by that term but there's a",
    "start": "330520",
    "end": "336479"
  },
  {
    "text": "chance they thinking something else it's not a very uh precise term so in terms of the C standard um",
    "start": "336479",
    "end": "345080"
  },
  {
    "text": "you know talks about implementations uh and there there's a concept of um conforming programs and",
    "start": "345080",
    "end": "353199"
  },
  {
    "text": "strictly conforming programs and so conforming programs can depend on non-portable features of a conforming",
    "start": "353199",
    "end": "359680"
  },
  {
    "text": "you know compiler implementation uh so that that's mostly say implementation defined Behavior",
    "start": "359680",
    "end": "365840"
  },
  {
    "text": "things like different implementations having different uh sized integers uh",
    "start": "365840",
    "end": "371120"
  },
  {
    "text": "and there's a concept of strictly conforming uh which is um which is a",
    "start": "371120",
    "end": "376280"
  },
  {
    "text": "program that only uses features of the language and library that are specified by the international standard uh that",
    "start": "376280",
    "end": "383080"
  },
  {
    "text": "are then maximally portable among uh conforming uh you know compiler",
    "start": "383080",
    "end": "388400"
  },
  {
    "text": "implementations and and don't for example depend on implementation Define behavior and the reason that the C",
    "start": "388400",
    "end": "395080"
  },
  {
    "text": "standard defines this term strictly conforming is to sort of uh you know to",
    "start": "395080",
    "end": "400199"
  },
  {
    "text": "to better Define what conforming means and and to kind of uh make the point",
    "start": "400199",
    "end": "405560"
  },
  {
    "text": "that this is not what anyone is trying to achieve right so this is kind of a",
    "start": "405560",
    "end": "411280"
  },
  {
    "text": "carve out right um uh people are not meant to try to write strictly",
    "start": "411280",
    "end": "417160"
  },
  {
    "text": "conforming programs right so uh so so so no real world programs are strictly",
    "start": "417160",
    "end": "423720"
  },
  {
    "text": "conforming um it shouldn't be your goal to try to write a strictly conforming",
    "start": "423720",
    "end": "429520"
  },
  {
    "text": "program uh and you know strictly conforming program is worse not better",
    "start": "429520",
    "end": "436280"
  },
  {
    "text": "than a conforming program right and and and so the problem is there's quite a lot of latitude in the C standard you",
    "start": "436280",
    "end": "443879"
  },
  {
    "text": "know uh just to keep on the topic of integers right uh the constraints are uh",
    "start": "443879",
    "end": "449639"
  },
  {
    "text": "minimum ranges for various types and that smaller types are not larger than larger types right so a conforming",
    "start": "449639",
    "end": "456800"
  },
  {
    "text": "implementation could be that Char short int uh long long long are all 64 bits",
    "start": "456800",
    "end": "464240"
  },
  {
    "text": "completely conforming implementation so now you uh on such an implementation you have sort of interesting characteristics",
    "start": "464240",
    "end": "470520"
  },
  {
    "text": "like um you can't uh convert an unsigned chart to sign long long without testing",
    "start": "470520",
    "end": "477199"
  },
  {
    "text": "the range right because it's possibility that unsigned chart won't be representable as signs long long so in a",
    "start": "477199",
    "end": "483080"
  },
  {
    "text": "strictly conforming program you would have to add extra test before doing that right but that's idiotic there is no",
    "start": "483080",
    "end": "490240"
  },
  {
    "text": "implementation now or ever that will make those choices right so uh so you",
    "start": "490240",
    "end": "497400"
  },
  {
    "text": "know really writing strictly conforming program is a non-starter yeah I mean the",
    "start": "497400",
    "end": "503199"
  },
  {
    "text": "the joke is right um people have always said c is a portable assembly right and",
    "start": "503199",
    "end": "508400"
  },
  {
    "text": "and that's wrong really both counts so so you know a uh it's not portable and and B it does have um",
    "start": "508400",
    "end": "517760"
  },
  {
    "text": "semantics and increasingly it has semantics and the semantics um tend to",
    "start": "517760",
    "end": "524120"
  },
  {
    "text": "throw people off because they they like to think of it as have you know just generating uh instructions and and and",
    "start": "524120",
    "end": "530279"
  },
  {
    "text": "the hardware will do whatever it does with the instructions but but you know um increasingly because of uh uh you",
    "start": "530279",
    "end": "538480"
  },
  {
    "text": "know trying to improve optimizations things like Alias",
    "start": "538480",
    "end": "543839"
  },
  {
    "text": "analysis um you know pointer Providence you know increasingly there's an",
    "start": "543839",
    "end": "549320"
  },
  {
    "text": "abstract model and and the you know conceptualizing it using a hardware",
    "start": "549320",
    "end": "554720"
  },
  {
    "text": "model is is more and more problematic okay I'm on slide three or",
    "start": "554720",
    "end": "560880"
  },
  {
    "text": "something uh so so portability is not safety um so if you have um code um",
    "start": "560880",
    "end": "570200"
  },
  {
    "text": "which doesn't build um then it's it's safe but not portable right so the the",
    "start": "570200",
    "end": "577079"
  },
  {
    "text": "most secure code you can ever write uh you put the code on the machine you turn the machine off you put it in the bag",
    "start": "577079",
    "end": "583320"
  },
  {
    "text": "with some rocks you Chuck it in the lake okay that software is not going to harm anyone I mean maybe someone will catch",
    "start": "583320",
    "end": "590320"
  },
  {
    "text": "their anchor on it but that's a hardware issue um so in this case doesn't build",
    "start": "590320",
    "end": "597640"
  },
  {
    "text": "uh there there's no runtime Behavior to consider um so if it builds and has the",
    "start": "597640",
    "end": "603680"
  },
  {
    "text": "same runtime behavior that could be considered safe and portable right you've you've tested this code you've",
    "start": "603680",
    "end": "609680"
  },
  {
    "text": "established the safety of it if it has the same behavior on another platform uh it should also be safe uh maybe the most",
    "start": "609680",
    "end": "617160"
  },
  {
    "text": "dangerous Square here is that it does build but it has different runtime Behavior right so Z code is portable but",
    "start": "617160",
    "end": "625240"
  },
  {
    "text": "uh but unsafe and um you know probably the the best example of that is a set",
    "start": "625240",
    "end": "630839"
  },
  {
    "text": "uid function uh in posix you know the set uid function is available for all",
    "start": "630839",
    "end": "636440"
  },
  {
    "text": "flavors of Unix and Linux uh but because it's been around the longest but on",
    "start": "636440",
    "end": "641600"
  },
  {
    "text": "every platform it behaves quite differently and so uh if you just Port",
    "start": "641600",
    "end": "647160"
  },
  {
    "text": "that code over it'll look fine uh but there's a good chance that you've messed up your uh permission model and and any",
    "start": "647160",
    "end": "654480"
  },
  {
    "text": "flow on the permission model is is immediately a vulnerability right you don't need to even combine that with any",
    "start": "654480",
    "end": "659800"
  },
  {
    "text": "other uh you know input validation error or anything uh so let's talk about misin",
    "start": "659800",
    "end": "665920"
  },
  {
    "text": "Auto our standards uh I'm I'm a member now of both the misra C committee uh and",
    "start": "665920",
    "end": "673399"
  },
  {
    "text": "the misra sorry Mis C working group and The Miser C++ working group and um I",
    "start": "673399",
    "end": "679920"
  },
  {
    "text": "think I announced this one year ago at this meeting but I'm also the convenor of the C standards committee um and",
    "start": "679920",
    "end": "688079"
  },
  {
    "text": "so uh uh yeah it's kind of kind of interesting being involved in in these",
    "start": "688079",
    "end": "693399"
  },
  {
    "text": "various activities um so misra C and I've list at 2023 here CU because this",
    "start": "693399",
    "end": "699760"
  },
  {
    "text": "is this this is how it looks in uh 2023 but this has been there since uh when",
    "start": "699760",
    "end": "705800"
  },
  {
    "text": "did misra begin 2004 2012 it's been there through all the versions um",
    "start": "705800",
    "end": "711200"
  },
  {
    "text": "there's a directive uh that says type deps indicate sign and sign itness",
    "start": "711200",
    "end": "716399"
  },
  {
    "text": "should be used in place of basic numerical types uh Char short in long long long",
    "start": "716399",
    "end": "722959"
  },
  {
    "text": "float double long double should not be used so you're not allowed to have these these kind of words these type names",
    "start": "722959",
    "end": "729040"
  },
  {
    "text": "appear in your code uh so you have to use type defs right so uh the misra C",
    "start": "729040",
    "end": "735440"
  },
  {
    "text": "2023 just newly minted version of misra uh gives examples like oh you",
    "start": "735440",
    "end": "742360"
  },
  {
    "text": "should you should have a type dep for short which is in 16t or a type dep for",
    "start": "742360",
    "end": "747760"
  },
  {
    "text": "INT which is in 32t right and and um you know so that's all good and fine but",
    "start": "747760",
    "end": "753880"
  },
  {
    "text": "what about U 16bit integers right if you're on a 16bit integer and you're you're using this in 32 T type in in Li",
    "start": "753880",
    "end": "761360"
  },
  {
    "text": "of int uh now you have mismatches with anything that's based on int um you know",
    "start": "761360",
    "end": "768839"
  },
  {
    "text": "same thing with um long right it's very common for implementation models to to",
    "start": "768839",
    "end": "775760"
  },
  {
    "text": "to have a 32bit long not a 64-bit long perfect Allowed by the the standard um",
    "start": "775760",
    "end": "782440"
  },
  {
    "text": "long has to be at least uh 32 bits uh int has to be at least 16 bits uh CES",
    "start": "782440",
    "end": "789120"
  },
  {
    "text": "you know has a long tooth right it was around when 16bit processors were uh were the norm so uh so this is um you",
    "start": "789120",
    "end": "798079"
  },
  {
    "text": "know this is this is sad this is this is you know I I mean I I I I I keep feeling",
    "start": "798079",
    "end": "805639"
  },
  {
    "text": "like this is something that uh you know kind of engineer out of a a third rate",
    "start": "805639",
    "end": "811560"
  },
  {
    "text": "College in the UK you know uh did on his first job and then",
    "start": "811560",
    "end": "817560"
  },
  {
    "text": "thought it was very clever and put it into the Mis standard you know five or 10 years later without really thinking",
    "start": "817560",
    "end": "823880"
  },
  {
    "text": "about it again and how uh you know how harmful it it really was uh and because",
    "start": "823880",
    "end": "830600"
  },
  {
    "text": "this started out in misra SE it sort of propagate it through all the misra standards so now Mis C does highlight",
    "start": "830600",
    "end": "837959"
  },
  {
    "text": "the issue that it might not be desirable to apply this guideline when interfacing with standard Library code right and so",
    "start": "837959",
    "end": "845000"
  },
  {
    "text": "there the issue is quite clear you have a function that takes an INT you pass an INT",
    "start": "845000",
    "end": "850680"
  },
  {
    "text": "32t uh well okay maybe it's the same size maybe it's not if if you're on a",
    "start": "850680",
    "end": "856079"
  },
  {
    "text": "16-bit implementation that's a different size uh so now you're passing too large of a value that can truncate so suddenly",
    "start": "856079",
    "end": "862839"
  },
  {
    "text": "in all your API calls you have to inject uh range test",
    "start": "862839",
    "end": "869639"
  },
  {
    "text": "but not in a portable way so so they're forcing you by the by these rules to",
    "start": "869639",
    "end": "876320"
  },
  {
    "text": "write really code um uh misra C++",
    "start": "876320",
    "end": "881440"
  },
  {
    "text": "2008 adopted this rule but made it advisory and not required so that's nice",
    "start": "881440",
    "end": "886759"
  },
  {
    "text": "because the first thing you do is you disapply it and you never think about it again and I would I would I recommend",
    "start": "886759",
    "end": "893120"
  },
  {
    "text": "that at the end but I'll recommend it now as well um yeah and and and you know",
    "start": "893120",
    "end": "898320"
  },
  {
    "text": "these Miser working groups um there's some very strong conceits there right I mean the the initial sort of conceit is",
    "start": "898320",
    "end": "906560"
  },
  {
    "text": "um we're smarter than the C++ and C committees right those committees have",
    "start": "906560",
    "end": "912000"
  },
  {
    "text": "made all these mistakes we're going to clean it up right and the fact is that they're not they're not smarter than the",
    "start": "912000",
    "end": "918800"
  },
  {
    "text": "the members of the committee by a long way um and then the second concede is uh",
    "start": "918800",
    "end": "924880"
  },
  {
    "text": "let's invent a new rule from Whole cloth let's make it required",
    "start": "924880",
    "end": "930360"
  },
  {
    "text": "okay uh no right make it advisory collect some user data right",
    "start": "930360",
    "end": "937160"
  },
  {
    "text": "and then determine if it's been you know if it's been successful or it's been a failure right and if it's been",
    "start": "937160",
    "end": "943720"
  },
  {
    "text": "successful then think about making it required right but don't don't start",
    "start": "943720",
    "end": "949000"
  },
  {
    "text": "with it like that don't inflict well it's in the name don't inflict that misery on everyone uh without you know",
    "start": "949000",
    "end": "956880"
  },
  {
    "text": "validating it with the community um we're not taping this",
    "start": "956880",
    "end": "964560"
  },
  {
    "text": "right so uh so misra C++ 2008 gave way to",
    "start": "965040",
    "end": "970279"
  },
  {
    "text": "autosar um autosar made uh the unfortunate leap to",
    "start": "970279",
    "end": "977880"
  },
  {
    "text": "make this required right so uh so my organization We are following autosar",
    "start": "977880",
    "end": "983199"
  },
  {
    "text": "we're using C++ 14 uh we have to follow this uh so it's quite unfortunate",
    "start": "983199",
    "end": "989800"
  },
  {
    "text": "um so here uh again it's basically same rule CH in short long should not be used",
    "start": "989800",
    "end": "996680"
  },
  {
    "text": "um I assume they meant to include long long there as well they didn't specify",
    "start": "996680",
    "end": "1002360"
  },
  {
    "text": "that type but it raises interesting questions right so did they fail to specify that um because they forgot uh",
    "start": "1002360",
    "end": "1011920"
  },
  {
    "text": "you know they forgot to say that they meant to or you know and so you have to",
    "start": "1011920",
    "end": "1017360"
  },
  {
    "text": "decide you know because because the whole rule is dumb right and so you have to decide um you know do they want it to",
    "start": "1017360",
    "end": "1026678"
  },
  {
    "text": "be more dumb should I should I be even dumber with this than they've specifically said right so it's a hard",
    "start": "1026679",
    "end": "1033199"
  },
  {
    "text": "call right or do you do you very follow very precisely whatever they've said",
    "start": "1033199",
    "end": "1038480"
  },
  {
    "text": "here which in this case long Long's okay apparently which strange and then then",
    "start": "1038480",
    "end": "1044640"
  },
  {
    "text": "there's this kind of fun joke right because what what a lot of developers do when they first uh try to convert their",
    "start": "1044640",
    "end": "1051520"
  },
  {
    "text": "code to misra is they'll they'll do a global change of int to in 32t and so we",
    "start": "1051520",
    "end": "1057160"
  },
  {
    "text": "have this example of you know reinterpret cast turning into in32",
    "start": "1057160",
    "end": "1062440"
  },
  {
    "text": "interpret cast right uh so so that's just just kind of common Fallout from",
    "start": "1062440",
    "end": "1068960"
  },
  {
    "text": "this sort of uh these sort of requirements uh Mis C++ 2023 very",
    "start": "1068960",
    "end": "1075240"
  },
  {
    "text": "freshly minted uh again the same rule this is is an advisory rule so step one",
    "start": "1075240",
    "end": "1081280"
  },
  {
    "text": "disapply it don't look at it again um so this rule applies a names uh uh again",
    "start": "1081280",
    "end": "1088120"
  },
  {
    "text": "Char short long signed unsigned um so here it says the keywords",
    "start": "1088120",
    "end": "1093440"
  },
  {
    "text": "right so that would disallow long long um you know kind of interesting",
    "start": "1093440",
    "end": "1099559"
  },
  {
    "text": "here is how float and double fell off the list right which it it was there in",
    "start": "1099559",
    "end": "1105080"
  },
  {
    "text": "misra C so you know if this made sense you would think the rules in C and C++",
    "start": "1105080",
    "end": "1112640"
  },
  {
    "text": "would be the same you know but they're not right and and also as you go through the documents you see the rationale for",
    "start": "1112640",
    "end": "1118600"
  },
  {
    "text": "these rules just moves all over the place right they can't they can't really",
    "start": "1118600",
    "end": "1123880"
  },
  {
    "text": "you know and I I've been in meetings where I've attacked this and and just listen to them go from one reason this",
    "start": "1123880",
    "end": "1129559"
  },
  {
    "text": "rule exists to another looking for you know some something that'll stick to the wall and never never finding",
    "start": "1129559",
    "end": "1136919"
  },
  {
    "text": "it um so they want you to use exact with",
    "start": "1136919",
    "end": "1142159"
  },
  {
    "text": "integer types they don't they don't know that that's what they're called but they are called exact withd integer types uh",
    "start": "1142159",
    "end": "1149640"
  },
  {
    "text": "int n under barti uh is assigned inte type with n and no padding bits so for",
    "start": "1149640",
    "end": "1154760"
  },
  {
    "text": "example in 8 denotes a signed inter type with an exact width of uh eight bits um the unsigned are the same except",
    "start": "1154760",
    "end": "1163600"
  },
  {
    "text": "with the the U before it uh so U and 24t would designate an unsign type with a",
    "start": "1163600",
    "end": "1169520"
  },
  {
    "text": "width of exactly 24 bits and and from a portability",
    "start": "1169520",
    "end": "1174559"
  },
  {
    "text": "perspective you know these types are are not great you know I mean for starters",
    "start": "1174559",
    "end": "1179640"
  },
  {
    "text": "they're optional right so if you're on a uh on a on a platform that doesn't have",
    "start": "1179640",
    "end": "1185640"
  },
  {
    "text": "a a 24-bit register then you don't have a a 24-bit type right so it's hard to",
    "start": "1185640",
    "end": "1191760"
  },
  {
    "text": "require it if it doesn't uh if it's not there",
    "start": "1191760",
    "end": "1197400"
  },
  {
    "text": "um but if an implementation does have that size then it is required to define",
    "start": "1197400",
    "end": "1203159"
  },
  {
    "text": "the um the Alias the type Alias um we have also minimum width integer",
    "start": "1203159",
    "end": "1211120"
  },
  {
    "text": "types so int least NT is a sign integer type with a W width of at least n uh so",
    "start": "1211120",
    "end": "1217200"
  },
  {
    "text": "there's no sign in type with lesser size that has that specified uh width uh in",
    "start": "1217200",
    "end": "1223200"
  },
  {
    "text": "least 32t would be uh sign in type with a width of at least 32 bits same for",
    "start": "1223200",
    "end": "1228960"
  },
  {
    "text": "unsigned um there's no unsigned type with a width less than the specified",
    "start": "1228960",
    "end": "1235880"
  },
  {
    "text": "width um so so if you have a type like U Le",
    "start": "1235880",
    "end": "1242200"
  },
  {
    "text": "16t it's really indistinct from unsigned short right they they're both just the",
    "start": "1242200",
    "end": "1247919"
  },
  {
    "text": "same they're both saying we're guaranteeing a minimum width of 16 bits",
    "start": "1247919",
    "end": "1253720"
  },
  {
    "text": "but we're not saying it's 16 bits so it's 16 bits or larger uh so short and",
    "start": "1253720",
    "end": "1259280"
  },
  {
    "text": "you and Lee 16t are the same types um you know a big question you can ask is",
    "start": "1259280",
    "end": "1266159"
  },
  {
    "text": "does misra allow the use of these type defs and uh you have to give that some",
    "start": "1266159",
    "end": "1274080"
  },
  {
    "text": "thought it's sort of up to interpretation right um I guess it",
    "start": "1274080",
    "end": "1279640"
  },
  {
    "text": "probably the three standards you might interpret different what it says um you",
    "start": "1279640",
    "end": "1284960"
  },
  {
    "text": "know the the the misra C standard says really it all it says is you have to",
    "start": "1284960",
    "end": "1290200"
  },
  {
    "text": "have an alias and it has to have a number really in the the name of the",
    "start": "1290200",
    "end": "1295440"
  },
  {
    "text": "Alias right so these would qualify under misra C uh but when you get up to misra",
    "start": "1295440",
    "end": "1301159"
  },
  {
    "text": "C++ where they're talking about the rationale being knowing the size the exact size of the object Now you kind of",
    "start": "1301159",
    "end": "1308520"
  },
  {
    "text": "Wonder because with these types you don't know the exact size right they're at least that size they could be larger",
    "start": "1308520",
    "end": "1315679"
  },
  {
    "text": "yeah they mention anything things like size",
    "start": "1315679",
    "end": "1321559"
  },
  {
    "text": "no I have a slide on that um",
    "start": "1321559",
    "end": "1327559"
  },
  {
    "text": "exact types but maybe this is for your session tomorrow on Rust do you happen",
    "start": "1327559",
    "end": "1335000"
  },
  {
    "text": "to make that connection with how integer types are defined in R because they lean",
    "start": "1335000",
    "end": "1340520"
  },
  {
    "text": "on the exact wi oh I I I didn't um yeah",
    "start": "1340520",
    "end": "1346400"
  },
  {
    "text": "I'm not I'm not a strong rust programmer so if if you're coming to my my session later on and you're you're looking for",
    "start": "1346400",
    "end": "1353120"
  },
  {
    "text": "strong defensive rust you're probably not going to get one um I mean you know",
    "start": "1353120",
    "end": "1358360"
  },
  {
    "text": "yeah I'm not trying to attack rust but I'm I'm not a strong rust programmer so",
    "start": "1358360",
    "end": "1363520"
  },
  {
    "text": "I I probably can't offer a strong defense of the language um but yeah I'll get more to",
    "start": "1363520",
    "end": "1368760"
  },
  {
    "text": "the pointer diff T stuff and and size te um and then finally there's fastest",
    "start": "1368760",
    "end": "1373880"
  },
  {
    "text": "minimum width which is the fastest integer with uh with a width of at least so so again you don't exactly know what",
    "start": "1373880",
    "end": "1380720"
  },
  {
    "text": "the size of these are uh and um you know it it is common for uh you know if you",
    "start": "1380720",
    "end": "1388039"
  },
  {
    "text": "have infast 16t it would be common for that to be a 32bit integer for example not be the the size that you",
    "start": "1388039",
    "end": "1395520"
  },
  {
    "text": "see okay so um so this is the this one",
    "start": "1395520",
    "end": "1401799"
  },
  {
    "text": "slide is the main problem I have with requiring the use of exact width types and not standard types so in",
    "start": "1401799",
    "end": "1409120"
  },
  {
    "text": "um int is sort of a Lynch pin type for C and C++ uh it's a natural width suggested by",
    "start": "1409120",
    "end": "1415840"
  },
  {
    "text": "the architecture so you know on a 16-bit architecture it's 16 bits on a 32-bit architecture it's 32bits on the 64-bit",
    "start": "1415840",
    "end": "1422880"
  },
  {
    "text": "architecture it's still 32 bits for some reason um so so small types are promoted",
    "start": "1422880",
    "end": "1429600"
  },
  {
    "text": "to int as part of the integer promotions right so the type int shows up in the",
    "start": "1429600",
    "end": "1436080"
  },
  {
    "text": "definition of the language right I mean outside just saying here's a type that you can use uh there's Behavior Uh you",
    "start": "1436080",
    "end": "1443640"
  },
  {
    "text": "know integer promotions which uh forces objects into this size type uh so the",
    "start": "1443640",
    "end": "1451880"
  },
  {
    "text": "standard in types have minimum ranges uh so each type provides at least as much storage as those preceding it and so if",
    "start": "1451880",
    "end": "1459080"
  },
  {
    "text": "you're if you're sticking with um the standard types you know the",
    "start": "1459080",
    "end": "1465240"
  },
  {
    "text": "relationships of these types you know that short is always at least as large as Char and int is always at least as",
    "start": "1465240",
    "end": "1471840"
  },
  {
    "text": "large as short so you know that you can uh safely convert a Char to a short you can safely convert a short to an INT you",
    "start": "1471840",
    "end": "1479640"
  },
  {
    "text": "can always convert uh any integer to a larger uh uh a large a wider type of the",
    "start": "1479640",
    "end": "1489480"
  },
  {
    "text": "same sin inness that is always a safe conversion you don't need to be concerned about looking at the the value",
    "start": "1489480",
    "end": "1495399"
  },
  {
    "text": "range but um but what we've establish up here right is that you are going to",
    "start": "1495399",
    "end": "1501480"
  },
  {
    "text": "produce inss in your code right you're also going to yeah so uh so so you're",
    "start": "1501480",
    "end": "1508679"
  },
  {
    "text": "going to have Expressions which are going to be an INT and then the question is uh let's say um let's say you can't",
    "start": "1508679",
    "end": "1517760"
  },
  {
    "text": "write your code you're following misery you can't write your code to use the word int anywhere so you have to pick a",
    "start": "1517760",
    "end": "1523039"
  },
  {
    "text": "type and most people pick in 32t and so now the question is is that in32 T the",
    "start": "1523039",
    "end": "1528840"
  },
  {
    "text": "same size as the int on your system and the answer is you don't know maybe it's the same size maybe it's",
    "start": "1528840",
    "end": "1535799"
  },
  {
    "text": "larger okay say you have an INT 24t where does that fit in it could be",
    "start": "1535799",
    "end": "1542679"
  },
  {
    "text": "larger than an INT it could be smaller than an INT right so you don't even know uh you know can it be converted to",
    "start": "1542679",
    "end": "1549640"
  },
  {
    "text": "int without possible loss of data uh you're Now sort of making everything",
    "start": "1549640",
    "end": "1555039"
  },
  {
    "text": "more vague and less well defined and this is not in the interest of safety or security um so requiring use of these",
    "start": "1555039",
    "end": "1563679"
  },
  {
    "text": "exact width types and and I I mean I'll just go a step further right if your normal C your C++ programmer and you",
    "start": "1563679",
    "end": "1569919"
  },
  {
    "text": "look at some Miser code the first thing you think is what the is with all these exact with types right because uh",
    "start": "1569919",
    "end": "1577399"
  },
  {
    "text": "they're not they're not used the way any normal C program would use it's instantly looks very strange and it's",
    "start": "1577399",
    "end": "1584559"
  },
  {
    "text": "because um it is strange it's it's an absurd way to use these types and uh",
    "start": "1584559",
    "end": "1591679"
  },
  {
    "text": "there's now safety critical systems all over the world which have sort of been forced to adopt this and and the reason",
    "start": "1591679",
    "end": "1599240"
  },
  {
    "text": "people do adopt this is is there it's it's easier to give in to the will of",
    "start": "1599240",
    "end": "1605159"
  },
  {
    "text": "Miser than it is to to to fight this especially autosar where it's a required Rule and you can't simply disapply",
    "start": "1605159",
    "end": "1612120"
  },
  {
    "text": "it um so I'm trying to remember why I have",
    "start": "1612120",
    "end": "1617919"
  },
  {
    "text": "this slide here it's a fun slide I guess I'll talk about it and",
    "start": "1617919",
    "end": "1624240"
  },
  {
    "text": "then maybe I'll remember why I included it here um so we have an interesting",
    "start": "1624240",
    "end": "1630679"
  },
  {
    "text": "example uh with un 16t uh where",
    "start": "1630679",
    "end": "1637399"
  },
  {
    "text": "we um where we def we assigned a maximum",
    "start": "1637399",
    "end": "1642600"
  },
  {
    "text": "value uh and then we go ahead and say uh multiply a * B and so what happens here",
    "start": "1642600",
    "end": "1650279"
  },
  {
    "text": "um let's say we have a uh a 30 an architecture where int is 32 bits um so",
    "start": "1650279",
    "end": "1657919"
  },
  {
    "text": "this 16bit type is under go undergo integer promotion so it's going to be converted to signed in uh so both A and",
    "start": "1657919",
    "end": "1664960"
  },
  {
    "text": "B will be converted to sign and by zero extending these unsigned values uh and",
    "start": "1664960",
    "end": "1670080"
  },
  {
    "text": "when we do the multiply it turns out this case where you've got the uh the",
    "start": "1670080",
    "end": "1675120"
  },
  {
    "text": "largest possible value multiply itself will overflow the signed int uh and set",
    "start": "1675120",
    "end": "1681600"
  },
  {
    "text": "the sign bit it's only this one Edge case uh but it allows for the possibility of uh producing a negative",
    "start": "1681600",
    "end": "1690320"
  },
  {
    "text": "value with undefined Behavior so on GCC um if you multiply a * B you get a",
    "start": "1690320",
    "end": "1697279"
  },
  {
    "text": "negative number that's not horribly shocking but then also um this test here",
    "start": "1697279",
    "end": "1703159"
  },
  {
    "text": "will tell you that that number is not negative right which that looks exactly",
    "start": "1703159",
    "end": "1708679"
  },
  {
    "text": "like UB like really sort of odd statements on clang um it'll produce the",
    "start": "1708679",
    "end": "1714720"
  },
  {
    "text": "same result but it would tell you it's positive right so now different compilers give you different results",
    "start": "1714720",
    "end": "1720039"
  },
  {
    "text": "which again is uh sort of indicative of uh",
    "start": "1720039",
    "end": "1725320"
  },
  {
    "text": "UB um okay so here's where it gets",
    "start": "1726399",
    "end": "1731640"
  },
  {
    "text": "um kind of kind of highlights again the problem with these exact width types so",
    "start": "1731640",
    "end": "1737000"
  },
  {
    "text": "we have um int 16t we have two values J and K and we",
    "start": "1737000",
    "end": "1743000"
  },
  {
    "text": "have int 32t and and integer L and here this is misra compliant code right I'm",
    "start": "1743000",
    "end": "1749320"
  },
  {
    "text": "not using short or int or long I'm trying to write code that uh you know my",
    "start": "1749320",
    "end": "1754960"
  },
  {
    "text": "tools aren't going to complain about and so the question here um is the leftand side does the",
    "start": "1754960",
    "end": "1763320"
  },
  {
    "text": "left left hand side of this uh equality operation have the same type as the right hand side so raise your hand if",
    "start": "1763320",
    "end": "1771559"
  },
  {
    "text": "you think the left and right hand side have the same type one two three four five six six",
    "start": "1771559",
    "end": "1781279"
  },
  {
    "text": "okay how many people think they have different types okay more on the different type",
    "start": "1781279",
    "end": "1787880"
  },
  {
    "text": "maybe maybe the people who don't want to commit or the the majority um so uh I think the answer",
    "start": "1787880",
    "end": "1795960"
  },
  {
    "text": "here is is uh it depend penss um so",
    "start": "1795960",
    "end": "1801760"
  },
  {
    "text": "let's first look at a uh a 16bit implementation we we have 16bit int so",
    "start": "1801760",
    "end": "1808399"
  },
  {
    "text": "here um you know these two values undergo integer promotions right but on",
    "start": "1808399",
    "end": "1814720"
  },
  {
    "text": "this platform um 16t is is uh basically an alias it will be an alias for INT right",
    "start": "1814720",
    "end": "1822039"
  },
  {
    "text": "it'll say type def in 16 so so this addition takes place as a 16 bit",
    "start": "1822039",
    "end": "1829159"
  },
  {
    "text": "operation um afterwards uh it's going to be compared to L which is a 32-bit value",
    "start": "1829159",
    "end": "1835480"
  },
  {
    "text": "right so now we have to apply the usual arithmetic conversions to balance this to a common type which is going to be um",
    "start": "1835480",
    "end": "1842960"
  },
  {
    "text": "you know in 32 or uh on this platform probably a long type right so the answer",
    "start": "1842960",
    "end": "1850200"
  },
  {
    "text": "on 16bit implementations is no we do not have the same type on either side of",
    "start": "1850200",
    "end": "1855279"
  },
  {
    "text": "that um inequality operator um now on a 32-bit",
    "start": "1855279",
    "end": "1862039"
  },
  {
    "text": "implementation if we look at this uh we're going to um we're going to use",
    "start": "1862039",
    "end": "1868159"
  },
  {
    "text": "this int6 T type as a r value and because it's smaller than an INT on this",
    "start": "1868159",
    "end": "1874399"
  },
  {
    "text": "platform it's got to undergo integer promotions so this is going to be promoted to uh 32 bits K is going to be",
    "start": "1874399",
    "end": "1881200"
  },
  {
    "text": "promoted to 32 bits this addition is going to take place as a 32-bit value",
    "start": "1881200",
    "end": "1886679"
  },
  {
    "text": "afterwards it's going to be compared to what's already a 32-bit value on the other side right so so here you have a",
    "start": "1886679",
    "end": "1894159"
  },
  {
    "text": "you know a real difference in Behavior Uh from a 16-bit architecture to a",
    "start": "1894159",
    "end": "1900200"
  },
  {
    "text": "32-bit architecture and and and many of you know the reasoning varies but but",
    "start": "1900200",
    "end": "1905840"
  },
  {
    "text": "frequently the reasoning in The Miser standards is you know we want to know what type size things are we want the",
    "start": "1905840",
    "end": "1911559"
  },
  {
    "text": "code to be portable right uh this has become much less portable code uh by",
    "start": "1911559",
    "end": "1917240"
  },
  {
    "text": "forcing the use of exact width types right so if I were to write this um uh",
    "start": "1917240",
    "end": "1924519"
  },
  {
    "text": "in violation of the Mis standard and just use the standard types so here I have short uh and in the end L um you",
    "start": "1924519",
    "end": "1932960"
  },
  {
    "text": "know that short is going to be promoted to int right it's quite clear on any architecture it's going to be promoted",
    "start": "1932960",
    "end": "1939080"
  },
  {
    "text": "even if it has the same representation um so uh J and K are",
    "start": "1939080",
    "end": "1944399"
  },
  {
    "text": "promote to the size of int uh and this comparison um you know the type of the objects on",
    "start": "1944399",
    "end": "1951880"
  },
  {
    "text": "either side of this comparison are always the same right so so we we know more about this code than we knew about",
    "start": "1951880",
    "end": "1958360"
  },
  {
    "text": "the other code uh so so to me this is clear better code and you know it's",
    "start": "1958360",
    "end": "1963519"
  },
  {
    "text": "still unfortunately still not portable right which which kind of starts to go",
    "start": "1963519",
    "end": "1969120"
  },
  {
    "text": "to the rest of my slides which is um you know should portability be a goal it's",
    "start": "1969120",
    "end": "1977360"
  },
  {
    "text": "it's it's you know strict conforming programs are sort of uh you know fantasy",
    "start": "1977360",
    "end": "1983279"
  },
  {
    "text": "but I'll I'll kind of keep going from here um so uh so something we could do",
    "start": "1983279",
    "end": "1990000"
  },
  {
    "text": "is make things all the same type uh so so this is good in in good General this",
    "start": "1990000",
    "end": "1995720"
  },
  {
    "text": "is a good rule of thumb right uh try try not have mixed types in a single expression try to have all the same type",
    "start": "1995720",
    "end": "2002159"
  },
  {
    "text": "now you don't have to worry as much about conversions so here uh some in comparison both 30 two bit operations",
    "start": "2002159",
    "end": "2009279"
  },
  {
    "text": "unless int happens to be wider uh which is allowed for by the standard but I",
    "start": "2009279",
    "end": "2014360"
  },
  {
    "text": "don't know of any implementations that have a int wider than 32 bits so it's not it's not very common uh so this code",
    "start": "2014360",
    "end": "2021880"
  },
  {
    "text": "is you know um not too bad",
    "start": "2021880",
    "end": "2027159"
  },
  {
    "text": "um the um you can use the greatest wi integers so so greatest with integers",
    "start": "2027159",
    "end": "2034360"
  },
  {
    "text": "have had a lot of problems lately right um they uh you know originally they were",
    "start": "2034360",
    "end": "2040480"
  },
  {
    "text": "meant to be the greatest width of the standard types and the extended types but because uh some mistakes were made",
    "start": "2040480",
    "end": "2049720"
  },
  {
    "text": "and uh these types were used in apis right suddenly became an issue that well",
    "start": "2049720",
    "end": "2055320"
  },
  {
    "text": "hey if I introduce a 128bit extended type now uh now my int Max size has to",
    "start": "2055320",
    "end": "2062638"
  },
  {
    "text": "increase which means now I've broken my ABI on all those function calls right so so what compilers did in response to",
    "start": "2062639",
    "end": "2069280"
  },
  {
    "text": "this was did not introduce extended types at all ever right and so just the",
    "start": "2069280",
    "end": "2076158"
  },
  {
    "text": "existence of this type broke up you know a basic language mechanism uh for",
    "start": "2076159",
    "end": "2081480"
  },
  {
    "text": "extending uh you know the use of inte types in the language so in c23 we fix",
    "start": "2081480",
    "end": "2088398"
  },
  {
    "text": "that by saying it's the largest type of the standard types so uh extended types",
    "start": "2088399",
    "end": "2094520"
  },
  {
    "text": "can be larger um bit precise types can be Lar larger uh and the um you know so",
    "start": "2094520",
    "end": "2101880"
  },
  {
    "text": "this is okay the only thing wrong with int Max T now is is that the name is a lie right it is quite certainly not the",
    "start": "2101880",
    "end": "2108720"
  },
  {
    "text": "largest integer uh type you can uh allocate on your create on your",
    "start": "2108720",
    "end": "2114320"
  },
  {
    "text": "system um so so this is you know this is sort of portable it's not completely",
    "start": "2114320",
    "end": "2120480"
  },
  {
    "text": "portable right because in maxt can have different sizes on different platforms meaning you'll wrap around or overflow",
    "start": "2120480",
    "end": "2125880"
  },
  {
    "text": "at different points right so it's not same runtime behavior um and of course using the",
    "start": "2125880",
    "end": "2131520"
  },
  {
    "text": "grace with integer types for everything can be uh inefficient so not not really",
    "start": "2131520",
    "end": "2137119"
  },
  {
    "text": "an approach I think anyone would recommend uh doing it like this so uh so really as we looked at",
    "start": "2137119",
    "end": "2144240"
  },
  {
    "text": "each of those Solutions none of them were entirely portable um so the value",
    "start": "2144240",
    "end": "2149280"
  },
  {
    "text": "at which addition overflows uh which is undefined behavior is always implementation defined uh so I so I you",
    "start": "2149280",
    "end": "2156680"
  },
  {
    "text": "know came up with this quote that runtime portability is the infantile fantasy of Miser working groups and software neop fites um and I I I asked",
    "start": "2156680",
    "end": "2165640"
  },
  {
    "text": "you know my I asked people if that was too harsh of a statement and they said no leave it in it's funny uh so I put",
    "start": "2165640",
    "end": "2172200"
  },
  {
    "text": "you know Groucho marks if you find it hard to laugh at yourself I'll be happy to do it for",
    "start": "2172200",
    "end": "2178720"
  },
  {
    "text": "you um okay so let's let's try to again",
    "start": "2178720",
    "end": "2184240"
  },
  {
    "text": "keep making this code portable just three lines you know pretty common stuff",
    "start": "2184240",
    "end": "2190040"
  },
  {
    "text": "right you're going to have a thousand kind of cases like this throughout your code base um so here I used again uh I",
    "start": "2190040",
    "end": "2198800"
  },
  {
    "text": "wrote some this is Miser compliant code right I don't use Char in short any Stander in type I say",
    "start": "2198800",
    "end": "2206240"
  },
  {
    "text": "u6t uh and and you know u6t we know exactly we know the exact width so we",
    "start": "2206240",
    "end": "2212119"
  },
  {
    "text": "know the exact range and so quite purposely here I didn't use a constant",
    "start": "2212119",
    "end": "2217760"
  },
  {
    "text": "from limits. h i used uh um you know integer literal and and here we're just",
    "start": "2217760",
    "end": "2224359"
  },
  {
    "text": "making sure that the the operation's not going to wrap around if it does we treat it as an error condition and and so this",
    "start": "2224359",
    "end": "2231520"
  },
  {
    "text": "is um so what we've done here is we've assumed that our int is 16bit for",
    "start": "2231520",
    "end": "2236760"
  },
  {
    "text": "maximum portability right and and this is kind of how you get portability right",
    "start": "2236760",
    "end": "2241960"
  },
  {
    "text": "is is you you look for the lowest common denominator across all the implementation you might support and you",
    "start": "2241960",
    "end": "2248920"
  },
  {
    "text": "limit yourself to that uh so I I use example of strict FP in Java which is",
    "start": "2248920",
    "end": "2254240"
  },
  {
    "text": "sort of the same thing right if you want consistent floating Point Behavior the way you get it is you say give me the",
    "start": "2254240",
    "end": "2260319"
  },
  {
    "text": "worst possible floating Point behavior and then it's consistent right so you get you either get the best behavior or",
    "start": "2260319",
    "end": "2267800"
  },
  {
    "text": "you get consistent portable Behavior right it's an either or type of choice so this this example is going for the",
    "start": "2267800",
    "end": "2274560"
  },
  {
    "text": "consistent behavior um you know at the cost of uh",
    "start": "2274560",
    "end": "2280160"
  },
  {
    "text": "having not as good you know uh having overflow occur much easier you know having uh",
    "start": "2280160",
    "end": "2287640"
  },
  {
    "text": "having code need to fail when really it could succeed right um which is not",
    "start": "2287640",
    "end": "2295960"
  },
  {
    "text": "ideal um so strictly conforming code uh I kind of said this in the beginning is",
    "start": "2295960",
    "end": "2301160"
  },
  {
    "text": "it's defined it's a defined by C standard to identify an unachievable and undesirable state so so the typical",
    "start": "2301160",
    "end": "2309079"
  },
  {
    "text": "discipline in C and you know C++ guys might not admit to this but it's the",
    "start": "2309079",
    "end": "2315560"
  },
  {
    "text": "same it's you know I mean as far as integers are concerned they're they're the same language there's not you know",
    "start": "2315560",
    "end": "2322040"
  },
  {
    "text": "there's not any any significant difference here um and so in C the usual",
    "start": "2322040",
    "end": "2327760"
  },
  {
    "text": "discipline is you build your code to a reference platform you say we're going to run on this platform and you make sure it works and then what I like to do",
    "start": "2327760",
    "end": "2335200"
  },
  {
    "text": "uh is anytime I have a dependency on implementation defined behavior for example I'm assuming I've got a 32-bit",
    "start": "2335200",
    "end": "2342520"
  },
  {
    "text": "int so I can represent the full range of values uh I'll write a static assertion and I'll say you know the the width of",
    "start": "2342520",
    "end": "2349960"
  },
  {
    "text": "int is at least 32 bits and now if someone down the road tries to Port that to a 16-bit processor to save 8 cents",
    "start": "2349960",
    "end": "2356720"
  },
  {
    "text": "per unit um you know they'll get a uh they'll get a fatal diagnostic to",
    "start": "2356720",
    "end": "2363000"
  },
  {
    "text": "prevent the compilation they can look at the code and now they can think about the you know the per unit cost of the",
    "start": "2363000",
    "end": "2369040"
  },
  {
    "text": "processor versus the cost of porting the software and frequently people make the decision to Port the software it's more",
    "start": "2369040",
    "end": "2375880"
  },
  {
    "text": "cost effective than you know paying you know if you got a million units right that 8 cense adds",
    "start": "2375880",
    "end": "2382520"
  },
  {
    "text": "up um so so it's important to document these",
    "start": "2382520",
    "end": "2388640"
  },
  {
    "text": "assumptions document the use of um implementation defined behaviors uh so I I I I started working",
    "start": "2388640",
    "end": "2397440"
  },
  {
    "text": "on a rule for us to follow to support this type of portability where um you",
    "start": "2397440",
    "end": "2403440"
  },
  {
    "text": "could place a static assertion either before or after the statement that assumes a non-portable integer width or",
    "start": "2403440",
    "end": "2410599"
  },
  {
    "text": "uh at the Declaration of that integer just just to cut down maybe on the number of locations it this is a weird",
    "start": "2410599",
    "end": "2417400"
  },
  {
    "text": "tradeoff right you want you want the static assertion to be in proximity to the issue so if the thing triggers the",
    "start": "2417400",
    "end": "2424000"
  },
  {
    "text": "developer can see what the problem is uh but you don't want to you don't want to have like a billion of these static",
    "start": "2424000",
    "end": "2429680"
  },
  {
    "text": "assertions right I I I mean at one extreme you you would put all your static assertions in a header file that",
    "start": "2429680",
    "end": "2436359"
  },
  {
    "text": "you would include everywhere and that would be a kind of a configuration file right that defines all the assumptions",
    "start": "2436359",
    "end": "2442359"
  },
  {
    "text": "you've made throughout your code base uh in one place but then it's hard to find",
    "start": "2442359",
    "end": "2447520"
  },
  {
    "text": "where where those things have been violated or where those assumptions have been made so you know just a quick",
    "start": "2447520",
    "end": "2452839"
  },
  {
    "text": "example down here uh we're adding this base value which is a large number",
    "start": "2452839",
    "end": "2460280"
  },
  {
    "text": "252 uh on a 32bit on an implementation with 32-bit integers no problem um on a",
    "start": "2460280",
    "end": "2467400"
  },
  {
    "text": "16bit integer this will overflow right so you can introduce a static assertion here that says uh you know if if um you",
    "start": "2467400",
    "end": "2476160"
  },
  {
    "text": "know put the math in here to see whether uh wraparound is possible because this is unsigned case uh so this this is fine",
    "start": "2476160",
    "end": "2483200"
  },
  {
    "text": "this will work or the other way you can do this is just document your assump about the size of the types right so",
    "start": "2483200",
    "end": "2489800"
  },
  {
    "text": "either of these will trigger um a compilation failure on a uh 16bit",
    "start": "2489800",
    "end": "2500119"
  },
  {
    "text": "platform okay so integer type selection um when you're programming and you've",
    "start": "2500400",
    "end": "2505880"
  },
  {
    "text": "got to pick an in type it's largely driven by the need to match apis right the first thing I look at is I've got to",
    "start": "2505880",
    "end": "2512040"
  },
  {
    "text": "call this API what sort of types of arguments uh am I going to pass to that and then I try to do things in that type",
    "start": "2512040",
    "end": "2520680"
  },
  {
    "text": "uh so that I don't have to worry about you know the conversion uh to you know",
    "start": "2520680",
    "end": "2525720"
  },
  {
    "text": "when I I call the function and so there's a I think I have this here but there's a uh you know there's a Cory to",
    "start": "2525720",
    "end": "2534520"
  },
  {
    "text": "this which is you know API design is really important right because if you",
    "start": "2534520",
    "end": "2539720"
  },
  {
    "text": "get the wrong type in your API uh here I'll I'll make a bunch of other people",
    "start": "2539720",
    "end": "2546000"
  },
  {
    "text": "mad let's say for example you use an si- size T type right which is an Abomination uh that is going to destroy",
    "start": "2546000",
    "end": "2553000"
  },
  {
    "text": "the rest of your code right because now everywhere else you have to think do I use the correct size T type to represent",
    "start": "2553000",
    "end": "2558520"
  },
  {
    "text": "a size or do I use this abomination of a Type S size T to represent a",
    "start": "2558520",
    "end": "2564960"
  },
  {
    "text": "size um so if the API excepts an in parameter and you pass an",
    "start": "2565280",
    "end": "2570520"
  },
  {
    "text": "in32 uh you know how your Cod behave that inch is implemented uh uh is not",
    "start": "2570520",
    "end": "2575800"
  },
  {
    "text": "defined to be 32 bits for example it's it's small or 16bit type so having this different type now",
    "start": "2575800",
    "end": "2584119"
  },
  {
    "text": "means you have to add add these tests if the value is out of range and if it's out of range okay how do you handle that",
    "start": "2584119",
    "end": "2590680"
  },
  {
    "text": "is it going to trigger a failure uh so it's quite it's quite messy and it's",
    "start": "2590680",
    "end": "2596839"
  },
  {
    "text": "it's for no reason it's for poor reasons uh converting between um yeah",
    "start": "2596839",
    "end": "2602400"
  },
  {
    "text": "implementation Define types and exact with types is difficult and error prun and there's my my Cory about the API",
    "start": "2602400",
    "end": "2610040"
  },
  {
    "text": "design um so matching apis is somewhat feasible for user toine code right your",
    "start": "2610040",
    "end": "2615559"
  },
  {
    "text": "library calls can all take in 32t and your you know your application code can pass it um that it's more problematic of",
    "start": "2615559",
    "end": "2623240"
  },
  {
    "text": "course when interacting with standard Library code where you know they did the just the normal thing",
    "start": "2623240",
    "end": "2630119"
  },
  {
    "text": "of using standard types and not this absurd thing of specifying everything using exact width types uh which again",
    "start": "2630119",
    "end": "2637160"
  },
  {
    "text": "would would create ABI issues right if the types change per",
    "start": "2637160",
    "end": "2643119"
  },
  {
    "text": "platform um so okay so matching API so say you want to use Stir comp and ster",
    "start": "2643119",
    "end": "2649640"
  },
  {
    "text": "comp returns an INT okay so you might write this code in I equals stir comp and then you um it gets flagged by the",
    "start": "2649640",
    "end": "2657680"
  },
  {
    "text": "tool because you use the int type you know the Forbidden standard integer type",
    "start": "2657680",
    "end": "2664119"
  },
  {
    "text": "it's it seems silly right but it's it's it's it's reality so so what developers do is they'll say",
    "start": "2664119",
    "end": "2670520"
  },
  {
    "text": "oh I'll I'll use Auto here right and uh so so",
    "start": "2670520",
    "end": "2677119"
  },
  {
    "text": "now you know catching an in return value from a function with an auto variable TP",
    "start": "2677119",
    "end": "2682800"
  },
  {
    "text": "you know frequently doesn't trigger violation for the static analysis tools so it's a good way to avoid to violate",
    "start": "2682800",
    "end": "2689240"
  },
  {
    "text": "the rule without getting caught so so what are we doing now we're writing bad code to violate a bad rule to avoid",
    "start": "2689240",
    "end": "2696640"
  },
  {
    "text": "detection right that's really happening and you know so so how is this rule",
    "start": "2696640",
    "end": "2701839"
  },
  {
    "text": "helping us again uh they've sent us down this this uh you know this is how you wind up in",
    "start": "2701839",
    "end": "2709599"
  },
  {
    "text": "hell you know you start following these good intentions there's a quote there",
    "start": "2709599",
    "end": "2716040"
  },
  {
    "text": "right it's Auto from autar yeah Auto for autosar thank",
    "start": "2716040",
    "end": "2721680"
  },
  {
    "text": "you um okay so so so how how do you use typ I mean you all know I mean that's",
    "start": "2721680",
    "end": "2728680"
  },
  {
    "text": "that's what makes this whole thing silly um exact what types are used when representing uh fixed with registers or",
    "start": "2728680",
    "end": "2735800"
  },
  {
    "text": "say fields and a network protocol or file formats when say you just want to read into a struct and you want",
    "start": "2735800",
    "end": "2742079"
  },
  {
    "text": "everything to to show up in the right place uh that's how we use these types we don't use them for Loop",
    "start": "2742079",
    "end": "2748920"
  },
  {
    "text": "counters um minimum within types can be portably used to ensure you get the smallest uh type of some size fastest uh",
    "start": "2748920",
    "end": "2757480"
  },
  {
    "text": "minimum width types can be uh guarantee a minimum range but optimized for performance over storage and then you",
    "start": "2757480",
    "end": "2763839"
  },
  {
    "text": "know your question size T and pointer diff T really all these misre guidelines are s completely silent on these types",
    "start": "2763839",
    "end": "2771240"
  },
  {
    "text": "um so okay if you think about misra C",
    "start": "2771240",
    "end": "2776680"
  },
  {
    "text": "probably no you can't use these why not they don't have numbers in the names",
    "start": "2776680",
    "end": "2781760"
  },
  {
    "text": "that's like the misy requirement you have to have an alias with a number in it so these don't and then you look at",
    "start": "2781760",
    "end": "2787559"
  },
  {
    "text": "misra C++ and auto are they talk about you know knowing what the size is right",
    "start": "2787559",
    "end": "2794480"
  },
  {
    "text": "and if you use these types you don't know what the size is size T is 32-bit",
    "start": "2794480",
    "end": "2800440"
  },
  {
    "text": "unsigned or 64-bit unsigned poter d t is 32bit signed or 64bit signed now now",
    "start": "2800440",
    "end": "2808319"
  },
  {
    "text": "what happens in practice is analyzer vendors take Liberties right they're",
    "start": "2808319",
    "end": "2813400"
  },
  {
    "text": "like if there's a little bit of vagueness in the in the misra standards",
    "start": "2813400",
    "end": "2819440"
  },
  {
    "text": "they try to make it sensible right and so what most analyzer vendors would do",
    "start": "2819440",
    "end": "2825240"
  },
  {
    "text": "is not diagnose these right so if they strictly follow the rules they probably would but they they kind of take a",
    "start": "2825240",
    "end": "2832240"
  },
  {
    "text": "little bit of leeway to take the edge off the stupidity right and thank you",
    "start": "2832240",
    "end": "2837760"
  },
  {
    "text": "analyzer vendors for doing that for us um so you could you know I had",
    "start": "2837760",
    "end": "2844640"
  },
  {
    "text": "someone say well hey you could reproduce this uh by you know creating an alias type",
    "start": "2844640",
    "end": "2850880"
  },
  {
    "text": "which depends on right uh so so now again this is this is pretty bad right",
    "start": "2850880",
    "end": "2857800"
  },
  {
    "text": "you're you're sort of Reinventing a mechanism uh just to you know comply",
    "start": "2857800",
    "end": "2863240"
  },
  {
    "text": "with this this rule when when uh it's it's better and safer just to use the uh",
    "start": "2863240",
    "end": "2869559"
  },
  {
    "text": "the existing mechanism so I'm going pretty fast here",
    "start": "2869559",
    "end": "2875599"
  },
  {
    "text": "actually uh so road map and recommendations uh in in Mis C++",
    "start": "2875599",
    "end": "2881599"
  },
  {
    "text": "2023 uh this rule has been downgraded to advisory so um the first thing I did was",
    "start": "2881599",
    "end": "2888599"
  },
  {
    "text": "disapply it um the second thing I I did was went to the Mis committee and said you know you need to get rid of this um",
    "start": "2888599",
    "end": "2897960"
  },
  {
    "text": "it it's um so so the the the the the C++ committee is open to the idea right",
    "start": "2897960",
    "end": "2905280"
  },
  {
    "text": "because they've already recognize the issues with this when they went from",
    "start": "2905280",
    "end": "2910319"
  },
  {
    "text": "moved it from required to advisory uh they want me to provide them with the replacement rule that that captures",
    "start": "2910319",
    "end": "2917920"
  },
  {
    "text": "places where you should use exact with types and don't and then they they'll be open to uh eliminating this so you know",
    "start": "2917920",
    "end": "2924680"
  },
  {
    "text": "hopefully I'll I'll find the time to do that uh the misra C committee um noted",
    "start": "2924680",
    "end": "2930240"
  },
  {
    "text": "my objection to the rule right which is how you say off in British as far as I can tell",
    "start": "2930240",
    "end": "2938640"
  },
  {
    "text": "um so um yeah so that's kind of the status here if you can disapply this",
    "start": "2938760",
    "end": "2945119"
  },
  {
    "text": "rule you know disapply it with prejudice um if you have to use it I don't know I",
    "start": "2945119",
    "end": "2951040"
  },
  {
    "text": "mean we we we follow this because we're using autosar we it's a required rule uh so yeah disapply this rule",
    "start": "2951040",
    "end": "2958640"
  },
  {
    "text": "similar rules try to use static assertions to ensure inter sizes meet",
    "start": "2958640",
    "end": "2963720"
  },
  {
    "text": "your um your minimum requirements um and you know use exact width types",
    "start": "2963720",
    "end": "2970160"
  },
  {
    "text": "for the kind of things they're they're they're meant to use um yeah and this is",
    "start": "2970160",
    "end": "2975680"
  },
  {
    "text": "all you know since I've since I've 10 minutes left uh the basis for this kind",
    "start": "2975680",
    "end": "2982160"
  },
  {
    "text": "of stuff is when you sit in misra you think about sea developers and you think do I",
    "start": "2982160",
    "end": "2990119"
  },
  {
    "text": "think a c developer will know this or do I think a SE developer might not know this right and so if you think a SE",
    "start": "2990119",
    "end": "2996359"
  },
  {
    "text": "develop ER might not know this you'll you create a rule to say you can't do that but now you've created a burden",
    "start": "2996359",
    "end": "3003160"
  },
  {
    "text": "that the C developer needs to know about the rule and how to apply the rule and all that extra stuff um and so so what",
    "start": "3003160",
    "end": "3011440"
  },
  {
    "text": "they're getting at here is that we don't you know I I I think the",
    "start": "3011440",
    "end": "3018319"
  },
  {
    "text": "very specific cases we don't think C programmers know that in might be 16 bits on some",
    "start": "3018319",
    "end": "3025599"
  },
  {
    "text": "architectures right but to me it's easier to teach them that",
    "start": "3025599",
    "end": "3031799"
  },
  {
    "text": "and could be 16 bits than it is to explain the rules explain the integer promotions explain all the complications",
    "start": "3031799",
    "end": "3038880"
  },
  {
    "text": "that might come about by mixing exact with types in with uh you know uh",
    "start": "3038880",
    "end": "3045640"
  },
  {
    "text": "smaller in types which promote to int so um you know this this this trying to",
    "start": "3045640",
    "end": "3054200"
  },
  {
    "text": "think about what developers know and don't know um is sort of problematic and it's",
    "start": "3054200",
    "end": "3060000"
  },
  {
    "text": "especially problematic because it's it's it's it's not databased you know it's",
    "start": "3060000",
    "end": "3066720"
  },
  {
    "text": "just people making stuff up you know their their feelings about uh what people might know so anyway um time for",
    "start": "3066720",
    "end": "3074760"
  },
  {
    "text": "some I have time for some questions yeah thank",
    "start": "3074760",
    "end": "3081078"
  },
  {
    "text": "you so it's sort of a t I suppose but would it be practical to just throw the",
    "start": "3083920",
    "end": "3090880"
  },
  {
    "text": "entire rule book out and ignore it and still the this is in order to comply with",
    "start": "3090880",
    "end": "3096359"
  },
  {
    "text": "regulation right a shortcut regulation yeah I I would say that it's it's it's",
    "start": "3096359",
    "end": "3103359"
  },
  {
    "text": "about liability right and and so what's happened say um you",
    "start": "3103359",
    "end": "3109359"
  },
  {
    "text": "know there there's been you know accidents and people have",
    "start": "3109359",
    "end": "3115280"
  },
  {
    "text": "gone to court and they've said you know we've followed misra and misra is the",
    "start": "3115280",
    "end": "3122040"
  },
  {
    "text": "best practice and uh those organizations were not found liable for you know",
    "start": "3122040",
    "end": "3128040"
  },
  {
    "text": "accidents that have occurred and so people I think follow Mis because um",
    "start": "3128040",
    "end": "3134079"
  },
  {
    "text": "it's been successfully used in court cases to avoid liability right so I think that's the top driver um back when",
    "start": "3134079",
    "end": "3141720"
  },
  {
    "text": "I worked for NCC group um I had proposed giving a talk",
    "start": "3141720",
    "end": "3147200"
  },
  {
    "text": "called um you know misy why why aren't more people dead and and and they were",
    "start": "3147200",
    "end": "3153079"
  },
  {
    "text": "really into that because that's their business model right they they want to sell uh you know code inspections and",
    "start": "3153079",
    "end": "3159119"
  },
  {
    "text": "all that type of stuff um and and I mean I if to answer my own question I think",
    "start": "3159119",
    "end": "3165119"
  },
  {
    "text": "it's because the diligence of Engineers who make misra work I I don't think misra is helping them uh in you know",
    "start": "3165119",
    "end": "3171200"
  },
  {
    "text": "some ways maybe it is but in a lot of ways it's it it needs significant Improvement",
    "start": "3171200",
    "end": "3177440"
  },
  {
    "text": "um any other questions no okay yeah",
    "start": "3177440",
    "end": "3184000"
  },
  {
    "text": "sir I have a question not necessar misra we got some time",
    "start": "3184000",
    "end": "3189160"
  },
  {
    "text": "yeah so I'm more specifically interested in the portability angle and how you",
    "start": "3189160",
    "end": "3196240"
  },
  {
    "text": "started sort of presenting challenges and misconception around portability",
    "start": "3196240",
    "end": "3202839"
  },
  {
    "text": "uh aren't we maybe too concerned with and I I I keep when you were talking",
    "start": "3202839",
    "end": "3211000"
  },
  {
    "text": "about this I keep remembering some of the ideas that Mike act will push out I",
    "start": "3211000",
    "end": "3218319"
  },
  {
    "text": "think years ago at cpb gone on we should focus on knowing your target",
    "start": "3218319",
    "end": "3225000"
  },
  {
    "text": "architecture and not trying to get common denominator Solutions right and find sort of generic things that work",
    "start": "3225000",
    "end": "3232079"
  },
  {
    "text": "across the board of course he framed it in the context of performance not safety",
    "start": "3232079",
    "end": "3237160"
  },
  {
    "text": "uh but the idea of portability usually gets you to CP your code rather than you",
    "start": "3237160",
    "end": "3242799"
  },
  {
    "text": "knowing your exact target platform and knowing the details of that architecture",
    "start": "3242799",
    "end": "3248359"
  },
  {
    "text": "and writing the actual codes that is suited for that Target platform yeah I I think that's true so maybe this",
    "start": "3248359",
    "end": "3254880"
  },
  {
    "text": "obsession with portability leads us to bad places right so so security and",
    "start": "3254880",
    "end": "3260119"
  },
  {
    "text": "safety are are independent um Quality attributes from portability right and so",
    "start": "3260119",
    "end": "3266559"
  },
  {
    "text": "so uh Safety and Security need to be certified per you know uh implementation",
    "start": "3266559",
    "end": "3275079"
  },
  {
    "text": "for specific set of Hardware so you know I I I it's nice to have some level of",
    "start": "3275079",
    "end": "3283440"
  },
  {
    "text": "portability you don't want to unnecessarily introduce code that's not portable right and so like I would I",
    "start": "3283440",
    "end": "3292119"
  },
  {
    "text": "would be very hesitant to um assume pointers can be stored in int right I I",
    "start": "3292119",
    "end": "3299200"
  },
  {
    "text": "mean that runs on a bunch of 32-bit systems but we all know what happens when you get 64-bit systems with that so",
    "start": "3299200",
    "end": "3304359"
  },
  {
    "text": "I would avoid that kind of thing uh something I advise people in my class",
    "start": "3304359",
    "end": "3309559"
  },
  {
    "text": "is um don't use small types for just oneoff variable so don't don't have a",
    "start": "3309559",
    "end": "3316319"
  },
  {
    "text": "short use in you know as the smallest type in or unsigned int and by using int",
    "start": "3316319",
    "end": "3321839"
  },
  {
    "text": "or unsign int uh you eliminate uh integer promotion which has",
    "start": "3321839",
    "end": "3327319"
  },
  {
    "text": "implementation defined Behavior right it'll convert to either signed or unsigned int depending on the the the",
    "start": "3327319",
    "end": "3334480"
  },
  {
    "text": "the sizes of the integers so um now on the other hand if you're if you have an",
    "start": "3334480",
    "end": "3340960"
  },
  {
    "text": "array of 10,000 elements of value 0 to 255 yeah use an unsigned chart because",
    "start": "3340960",
    "end": "3346880"
  },
  {
    "text": "there's a significant memory cost there uh and then you know you have to be a little more careful in in how you code",
    "start": "3346880",
    "end": "3352680"
  },
  {
    "text": "that to make sure that's it's going to work on uh whatever platforms you you",
    "start": "3352680",
    "end": "3358480"
  },
  {
    "text": "port that to or Define your you know constraints your your uh your",
    "start": "3358480",
    "end": "3363839"
  },
  {
    "text": "implementations about what implementation defined Behavior you have so yeah I think it's too driven by",
    "start": "3363839",
    "end": "3370160"
  },
  {
    "text": "portability and I I I definitely think uh portability and and security",
    "start": "3370160",
    "end": "3376160"
  },
  {
    "text": "are independent concerns",
    "start": "3376160",
    "end": "3380920"
  },
  {
    "text": "yeah that",
    "start": "3381520",
    "end": "3385520"
  },
  {
    "text": "stand is if you know your tget platform you should definitely not over constrain",
    "start": "3386599",
    "end": "3392119"
  },
  {
    "text": "the size your yeah I wasn't yeah yeah I think we",
    "start": "3392119",
    "end": "3399559"
  },
  {
    "text": "were all all in agreement any any other questions yes",
    "start": "3399559",
    "end": "3404760"
  },
  {
    "text": "sir oh um well this was all kind of the same",
    "start": "3404760",
    "end": "3409960"
  },
  {
    "text": "question and it was basically do we um",
    "start": "3409960",
    "end": "3415280"
  },
  {
    "text": "you know do we over emphasize um you know portability at the at the at the",
    "start": "3415280",
    "end": "3420559"
  },
  {
    "text": "loss of sort of other quality attributes like performance and and I I I think you",
    "start": "3420559",
    "end": "3426039"
  },
  {
    "text": "know frequently we do uh yeah so you heard my answer okay any other",
    "start": "3426039",
    "end": "3433119"
  },
  {
    "text": "questions I feel bad for this guy just showed up he's not going to get too",
    "start": "3433119",
    "end": "3439200"
  },
  {
    "text": "much um anything if not we can end a couple minutes early and you can enjoy a",
    "start": "3439200",
    "end": "3446400"
  },
  {
    "text": "hot beverage in the other room okay thank you everyone",
    "start": "3446400",
    "end": "3452319"
  }
]