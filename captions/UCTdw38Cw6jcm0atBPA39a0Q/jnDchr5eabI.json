[
  {
    "text": "hello Oslo super happy to be here again my name is Oscar dudich and we'll try to",
    "start": "2159",
    "end": "9540"
  },
  {
    "text": "have some fun with event sourcing today so let's meet our friends the actors of",
    "start": "9540",
    "end": "17160"
  },
  {
    "text": "today's talk so it's Maurice Kate and Roy because we will be telling the story",
    "start": "17160",
    "end": "23880"
  },
  {
    "text": "about the support team and of course users unfortunately we have users in our",
    "start": "23880",
    "end": "30180"
  },
  {
    "text": "applications and I could probably finish this story with this slide because that's how it's",
    "start": "30180",
    "end": "36960"
  },
  {
    "text": "usually ending up but but we will try to do a bit more so let's try to discuss like the",
    "start": "36960",
    "end": "43739"
  },
  {
    "text": "classical flow that we could see in the support ticket on or in like",
    "start": "43739",
    "end": "49200"
  },
  {
    "text": "professional terminology incident so the first thing that should happen is",
    "start": "49200",
    "end": "55079"
  },
  {
    "text": "of course that customer registered and after that immediately that person tries",
    "start": "55079",
    "end": "60960"
  },
  {
    "text": "to to lock the insane end like you know something is not working or they believe",
    "start": "60960",
    "end": "66900"
  },
  {
    "text": "that it's not working doesn't matter because we need to still fix it the next step is like to select like in Immortal",
    "start": "66900",
    "end": "74220"
  },
  {
    "text": "combat Maurice or Roy um to handle the ticket so that's",
    "start": "74220",
    "end": "80040"
  },
  {
    "text": "usually the person that is responsible for investigating that Stuff Etc",
    "start": "80040",
    "end": "85560"
  },
  {
    "text": "then incident has to be prioritized and categorized so it's quite important at",
    "start": "85560",
    "end": "92220"
  },
  {
    "text": "least for the user to see that we are doing something with the ticket but",
    "start": "92220",
    "end": "97380"
  },
  {
    "text": "Jokes Aside the prioritization is usually connected directly to SLA and",
    "start": "97380",
    "end": "102479"
  },
  {
    "text": "SLO so this is really important because from now on when we do it then the time",
    "start": "102479",
    "end": "109020"
  },
  {
    "text": "is ticking tick tick tick tick tick right so then agent responds to the uh to the",
    "start": "109020",
    "end": "116700"
  },
  {
    "text": "customer usually it's of course have you tried to turn it off and on again and",
    "start": "116700",
    "end": "122399"
  },
  {
    "text": "then hope that that will resolve the issue but usually it's not so then the",
    "start": "122399",
    "end": "128700"
  },
  {
    "text": "customer is trying to answer us and this discussion usually is going for quite",
    "start": "128700",
    "end": "133920"
  },
  {
    "text": "long there is quite long exchange of the conversation those other events like the",
    "start": "133920",
    "end": "140640"
  },
  {
    "text": "might also happen so for example at first of course client tells that this",
    "start": "140640",
    "end": "145860"
  },
  {
    "text": "is super critical then it might appear that just the color has changed so we might prioritize that ticket or",
    "start": "145860",
    "end": "153980"
  },
  {
    "text": "initially it was looking like a small bug but it appeared that it's much",
    "start": "153980",
    "end": "159900"
  },
  {
    "text": "more severe so we know all the history it's not fully linear but that's the",
    "start": "159900",
    "end": "165599"
  },
  {
    "text": "happy path and then once we find the issue and we believe that it's resolved",
    "start": "165599",
    "end": "171840"
  },
  {
    "text": "and we should tell the user and pass that information Mark the ticket as resolved and after that the of course",
    "start": "171840",
    "end": "179400"
  },
  {
    "text": "user should acknowledge the resolution because it's not like that that we can say it's working for us I mean we can",
    "start": "179400",
    "end": "186300"
  },
  {
    "text": "say that but it doesn't matter much so after the client is agreeing on our",
    "start": "186300",
    "end": "192000"
  },
  {
    "text": "resolution then we can finally close the issue and if we have a look on this story and",
    "start": "192000",
    "end": "201300"
  },
  {
    "text": "all those um orange sticky notes then those are",
    "start": "201300",
    "end": "206459"
  },
  {
    "text": "events so those are facts that happened in our system so they can build some",
    "start": "206459",
    "end": "213500"
  },
  {
    "text": "storytelling because events by their nature are immutable because what has",
    "start": "213500",
    "end": "219840"
  },
  {
    "text": "seen cannot be unseen what has happened has happened they gather a specific",
    "start": "219840",
    "end": "225659"
  },
  {
    "text": "business information because as you see the events even they are touching the single specific incident they are",
    "start": "225659",
    "end": "232980"
  },
  {
    "text": "gathering a specific fact that occurred so of course we could do like events",
    "start": "232980",
    "end": "238440"
  },
  {
    "text": "like incident updated incident deleted but then we will be doing crowd sourcing",
    "start": "238440",
    "end": "243599"
  },
  {
    "text": "which might be a good idea for a talk but not today so events usually are ordered in a",
    "start": "243599",
    "end": "251220"
  },
  {
    "text": "sequence of appearance because this is like a more a model",
    "start": "251220",
    "end": "256519"
  },
  {
    "text": "and like a design so how all of the events that could happen in our system",
    "start": "256519",
    "end": "262820"
  },
  {
    "text": "but usually the things are happening in the specific",
    "start": "262820",
    "end": "268020"
  },
  {
    "text": "sequence so once we found out that for example incident locked then we assigned",
    "start": "268020",
    "end": "273419"
  },
  {
    "text": "agent then agent respondent and after that prioritized the ticket and we might",
    "start": "273419",
    "end": "281220"
  },
  {
    "text": "have much much more incidents and each of them will have its own even stream",
    "start": "281220",
    "end": "287280"
  },
  {
    "text": "because we can think about even stream as a history of specific object specific",
    "start": "287280",
    "end": "293220"
  },
  {
    "text": "thing so if we make a parallel to our classical approach then even stream",
    "start": "293220",
    "end": "299580"
  },
  {
    "text": "would be like a record in the relational database but instead of just keeping the",
    "start": "299580",
    "end": "305940"
  },
  {
    "text": "current state we are keeping the whole history so even stream in other words is",
    "start": "305940",
    "end": "312419"
  },
  {
    "text": "a ID of our entity plus everything that has happened",
    "start": "312419",
    "end": "319259"
  },
  {
    "text": "and because of that as I mentioned this is quite powerful because we have a",
    "start": "319259",
    "end": "325320"
  },
  {
    "text": "granular information and precise information about what has happened to in our system and if you ask your",
    "start": "325320",
    "end": "331800"
  },
  {
    "text": "business how much data would they need then they will force to tell you",
    "start": "331800",
    "end": "336900"
  },
  {
    "text": "everything so even sourcing for them it's an easy buy-in if we explain it",
    "start": "336900",
    "end": "342900"
  },
  {
    "text": "like that and for us even sourcing means that we have much",
    "start": "342900",
    "end": "348900"
  },
  {
    "text": "better Diagnostic and much better understanding of what's going on in theory we could just take this specific",
    "start": "348900",
    "end": "356100"
  },
  {
    "text": "even stream from our test environment or maybe even from production and debug it",
    "start": "356100",
    "end": "361139"
  },
  {
    "text": "and see precisely where something was broken and how then make the decision to fix it",
    "start": "361139",
    "end": "369000"
  },
  {
    "text": "so it's giving us the tools for us as detectives on finding out what was wrong",
    "start": "369000",
    "end": "376880"
  },
  {
    "text": "and that's how we are coming to event sourcing because event sourcing is uh we could",
    "start": "376880",
    "end": "384660"
  },
  {
    "text": "say about even sourcing that it's a simple storage pattern so we could compare that to document approach or",
    "start": "384660",
    "end": "391500"
  },
  {
    "text": "relational approach but in our case events are our state this is the name",
    "start": "391500",
    "end": "398400"
  },
  {
    "text": "even sourcing because events are our source of true and surprisingly even",
    "start": "398400",
    "end": "404280"
  },
  {
    "text": "sourcing is not so revolutionary as it may seem so we still need to get some specific",
    "start": "404280",
    "end": "411660"
  },
  {
    "text": "requests for example from the API like here resolve incident the only difference from like a cradish",
    "start": "411660",
    "end": "419280"
  },
  {
    "text": "approach is that this request only in other words command needs to have a",
    "start": "419280",
    "end": "426300"
  },
  {
    "text": "specific business intention because if we don't know the specific business intention so the operation that we will",
    "start": "426300",
    "end": "432600"
  },
  {
    "text": "be doing then how can we register a proper business event",
    "start": "432600",
    "end": "438319"
  },
  {
    "text": "and then that's the first part that is different from the classical approach",
    "start": "438440",
    "end": "444539"
  },
  {
    "text": "because we are still getting the state from from event store but here we are",
    "start": "444539",
    "end": "449880"
  },
  {
    "text": "getting all the events that had happened for the specific object so instead of just getting a single row",
    "start": "449880",
    "end": "457259"
  },
  {
    "text": "then we are getting all the events and after that we need to build the current",
    "start": "457259",
    "end": "462720"
  },
  {
    "text": "representation of our state because it's not like in even sourcing we don't need",
    "start": "462720",
    "end": "468419"
  },
  {
    "text": "to try to understand what's the current state in even sourcing terminology it's",
    "start": "468419",
    "end": "473699"
  },
  {
    "text": "to be precise State at the certain point in time so what we are doing we are just",
    "start": "473699",
    "end": "479460"
  },
  {
    "text": "usually building a default object it might be default Constructor and then applying each event after one another",
    "start": "479460",
    "end": "487680"
  },
  {
    "text": "and getting the current state so see when we are logging the incident then the status is pending we don't know",
    "start": "487680",
    "end": "494759"
  },
  {
    "text": "who's assigned and whether there was a response and when we assigned I agent",
    "start": "494759",
    "end": "501000"
  },
  {
    "text": "then we are only updating information about this agent because events are granular",
    "start": "501000",
    "end": "506639"
  },
  {
    "text": "and even after event is like a for each statement",
    "start": "506639",
    "end": "512700"
  },
  {
    "text": "we are getting the current state and here no difference no difference from the regular approach we still need to do",
    "start": "512700",
    "end": "520080"
  },
  {
    "text": "all the validation we still need to do the business Logic on our current state",
    "start": "520080",
    "end": "525180"
  },
  {
    "text": "so this part is precisely the same as you would do in your classical approach",
    "start": "525180",
    "end": "530300"
  },
  {
    "text": "and this is the second thing the second difference is that instead of",
    "start": "530300",
    "end": "536339"
  },
  {
    "text": "overriding our whole state we're just appending new information new fact of",
    "start": "536339",
    "end": "541860"
  },
  {
    "text": "what has happened the result of our business operation and it's ending up as in the end of our",
    "start": "541860",
    "end": "549060"
  },
  {
    "text": "event stream because as I mentioned it's the ordered sequence of events because we need to know what was the spec how",
    "start": "549060",
    "end": "556380"
  },
  {
    "text": "how those events occurred and now I already mentioned I think once",
    "start": "556380",
    "end": "563100"
  },
  {
    "text": "or twice even store so let's maybe briefly discuss how to store those",
    "start": "563100",
    "end": "568620"
  },
  {
    "text": "events are there any people that were a year ago on my talk how to build event",
    "start": "568620",
    "end": "575100"
  },
  {
    "text": "store yeah I see at least five",
    "start": "575100",
    "end": "580339"
  },
  {
    "text": "so you probably know that already so this is like a happening because the",
    "start": "580339",
    "end": "585360"
  },
  {
    "text": "year ago I was showing how to build even store and then I concluded that you can do it for fun but you should not be",
    "start": "585360",
    "end": "592500"
  },
  {
    "text": "doing that on production and today I will show you some maybe system so",
    "start": "592500",
    "end": "598260"
  },
  {
    "text": "Martin that will allows you to use it on production and this few words about me together",
    "start": "598260",
    "end": "606660"
  },
  {
    "text": "with Jeremy we are creating Martin and so-called Critter stack so we have",
    "start": "606660",
    "end": "612540"
  },
  {
    "text": "Wolverine we have weasel so everything that helps you to build uh",
    "start": "612540",
    "end": "620160"
  },
  {
    "text": "application without much boilerplate and focus on what on the business",
    "start": "620160",
    "end": "625560"
  },
  {
    "text": "Etc and Martin which is the example of the event store is using postgres as a",
    "start": "625560",
    "end": "633300"
  },
  {
    "text": "event store and Martin also allows to use postgres as a document database and my",
    "start": "633300",
    "end": "641040"
  },
  {
    "text": "experience is also quite broad because I was also working at even store DB so I",
    "start": "641040",
    "end": "648240"
  },
  {
    "text": "know most of the popular approach in a nutshell that that's enough about me let's see how even store",
    "start": "648240",
    "end": "656100"
  },
  {
    "text": "is working internally so surprisingly and from what is usually explained in",
    "start": "656100",
    "end": "663959"
  },
  {
    "text": "the Articles of course if someone is telling you that Kafka is an investor it's not so let's make it clear and move",
    "start": "663959",
    "end": "672120"
  },
  {
    "text": "on so because logically even stores are key",
    "start": "672120",
    "end": "677880"
  },
  {
    "text": "value databases you can think about them logically like a key value stores where",
    "start": "677880",
    "end": "684720"
  },
  {
    "text": "key as I mentioned is the ID of the record and value",
    "start": "684720",
    "end": "689760"
  },
  {
    "text": "is the sequence of event and once we realize that then many",
    "start": "689760",
    "end": "695459"
  },
  {
    "text": "things will start to become much simpler because when I'm discussing with people then I'm usually getting answer",
    "start": "695459",
    "end": "702060"
  },
  {
    "text": "questions like okay but what if the stream will be extremely wrong then the",
    "start": "702060",
    "end": "707640"
  },
  {
    "text": "answer I can say is another question like if you are using mongodb and you put huge collection inside your document",
    "start": "707640",
    "end": "715620"
  },
  {
    "text": "then will it be fast no it won't but the answer is just don't do that just model",
    "start": "715620",
    "end": "721800"
  },
  {
    "text": "stuff differently and that's the same answer for even sourcing then another",
    "start": "721800",
    "end": "727980"
  },
  {
    "text": "answer another question is it are there any performance issues I mean if even",
    "start": "727980",
    "end": "734459"
  },
  {
    "text": "stores are databases then obviously databases might may have the performance",
    "start": "734459",
    "end": "739560"
  },
  {
    "text": "issues that's undeniable but the answer to",
    "start": "739560",
    "end": "745019"
  },
  {
    "text": "have the good performance is to properly model and land the learn the details and",
    "start": "745019",
    "end": "751260"
  },
  {
    "text": "about how to model stuff in this specific Paradigm so in even sourcing the most important is to keep streams",
    "start": "751260",
    "end": "758399"
  },
  {
    "text": "long short leaving so to not have a lot of streams but in other words if we",
    "start": "758399",
    "end": "764100"
  },
  {
    "text": "think that it's just a key value store then I think that it's it's much easier but",
    "start": "764100",
    "end": "771600"
  },
  {
    "text": "technically and it's also for relational databases because in relational databases actually",
    "start": "771600",
    "end": "778920"
  },
  {
    "text": "in internally are also happened only stores where the up and Only store is",
    "start": "778920",
    "end": "784560"
  },
  {
    "text": "the transaction log or write a headlock and even stores is for example Martin is",
    "start": "784560",
    "end": "791220"
  },
  {
    "text": "like a really long story long table with a lot of events so we have currently a",
    "start": "791220",
    "end": "798240"
  },
  {
    "text": "single table with with all the events which might sound scary but to be true",
    "start": "798240",
    "end": "805440"
  },
  {
    "text": "databases are pretty good in indexing and if we keep stream ID as a index and",
    "start": "805440",
    "end": "812700"
  },
  {
    "text": "as a reference then searching even for millions of Records is super easy but",
    "start": "812700",
    "end": "819660"
  },
  {
    "text": "Martin has also other capabilities so we have like a multi-tenancy per database",
    "start": "819660",
    "end": "825420"
  },
  {
    "text": "so we can share the data postgres allows to add more stuff like",
    "start": "825420",
    "end": "831060"
  },
  {
    "text": "built-in partitioning so there is a lot of things that we can improve because even stores are",
    "start": "831060",
    "end": "838139"
  },
  {
    "text": "really simple databases because they have they should have only two operations like by their nature so at",
    "start": "838139",
    "end": "846540"
  },
  {
    "text": "opens new events at the end of a stream and read all events from stream",
    "start": "846540",
    "end": "852540"
  },
  {
    "text": "and this Simplicity allows optimization and of course there are other even other",
    "start": "852540",
    "end": "860339"
  },
  {
    "text": "stores not all stores are using some other database underneath for example",
    "start": "860339",
    "end": "865500"
  },
  {
    "text": "even store DB is a database that was natively built for events so it's just",
    "start": "865500",
    "end": "871139"
  },
  {
    "text": "storing files on disk like database right but we will focus today on Martin but",
    "start": "871139",
    "end": "878459"
  },
  {
    "text": "most of the staff and most of the code that you will see soon will be also",
    "start": "878459",
    "end": "884279"
  },
  {
    "text": "applicable for other event stores so this is the table that I mentioned or",
    "start": "884279",
    "end": "890339"
  },
  {
    "text": "actually a bit simplified version of it because what's the most important is",
    "start": "890339",
    "end": "895800"
  },
  {
    "text": "that what we may notice is that data so our events are built from two types of",
    "start": "895800",
    "end": "901800"
  },
  {
    "text": "data one is the metadata and metadata are those all of those fields that are",
    "start": "901800",
    "end": "908760"
  },
  {
    "text": "that we could find that are the same for all the events so for example all the",
    "start": "908760",
    "end": "914459"
  },
  {
    "text": "events should have ID all the events should be linked to specific stream those the stream ID all the events",
    "start": "914459",
    "end": "921660"
  },
  {
    "text": "should have the version so the sequence in which they were appended to stream they should have the type so what do",
    "start": "921660",
    "end": "928500"
  },
  {
    "text": "they represent and they should also have data and this is also the place why we",
    "start": "928500",
    "end": "935220"
  },
  {
    "text": "selected postgres or actually Jeremy selected at that time because postgres has great",
    "start": "935220",
    "end": "941760"
  },
  {
    "text": "Json capabilities it's uh I know that there are lies bigger lies and",
    "start": "941760",
    "end": "947760"
  },
  {
    "text": "benchmarks but I saw benchmarks that were even showing that Mark postgres is",
    "start": "947760",
    "end": "953040"
  },
  {
    "text": "even faster in Json processing than for example mongodb",
    "start": "953040",
    "end": "958699"
  },
  {
    "text": "so why postgres I already said few things but in general postgres is cool",
    "start": "959339",
    "end": "965160"
  },
  {
    "text": "it's a rock solid database and it's also becoming the fact of Standards like a",
    "start": "965160",
    "end": "971040"
  },
  {
    "text": "lingua Franca of all the databases like for example cockroach Aurora DB Azure",
    "start": "971040",
    "end": "978779"
  },
  {
    "text": "Cosmos for postgres all of them are adding dialect and using their engine to",
    "start": "978779",
    "end": "985199"
  },
  {
    "text": "build other types of databases and also based on my research it's not confirmed",
    "start": "985199",
    "end": "990540"
  },
  {
    "text": "but what I saw like for example AWS document the bdb is built on top of it's",
    "start": "990540",
    "end": "996240"
  },
  {
    "text": "just a syntactic sugar on top of postgres and postgres gives us strong consistency",
    "start": "996240",
    "end": "1003680"
  },
  {
    "text": "which is quite important and this is the thing that most of the even stores don't",
    "start": "1003680",
    "end": "1009320"
  },
  {
    "text": "have at least on the root model side on the right side most of them have that",
    "start": "1009320",
    "end": "1014839"
  },
  {
    "text": "and of course great power gives comes with the great responsibility so",
    "start": "1014839",
    "end": "1023000"
  },
  {
    "text": "just because we are giving you option to use like a unit of work up and events to multiple streams at the same time and",
    "start": "1023000",
    "end": "1030260"
  },
  {
    "text": "build projections in the same transaction it doesn't mean that you have to do it right this is just an",
    "start": "1030260",
    "end": "1036140"
  },
  {
    "text": "option because in Martin we have two rules one is the we take pull requests",
    "start": "1036140",
    "end": "1044000"
  },
  {
    "text": "and the other rule is that we won't tell you how to live so we are trying to not get if you were",
    "start": "1044000",
    "end": "1051559"
  },
  {
    "text": "yesterday on Jeremy talk then we are really against having the lowest common denominator so if we decided and believe",
    "start": "1051559",
    "end": "1059900"
  },
  {
    "text": "that postgres is a good option to to use as even store then we are not going to",
    "start": "1059900",
    "end": "1066140"
  },
  {
    "text": "just cut the features because we are too opinionated if if we thought that for example we",
    "start": "1066140",
    "end": "1074179"
  },
  {
    "text": "should not allow strong consistency for it models then we could use other database or build other and that would",
    "start": "1074179",
    "end": "1081380"
  },
  {
    "text": "be fine but yeah in general we are trying to be pragmatic and I think that if I'm not mistaken",
    "start": "1081380",
    "end": "1089419"
  },
  {
    "text": "then this is a dotnet conference then it would be nice to see some code not only",
    "start": "1089419",
    "end": "1095960"
  },
  {
    "text": "hearing my uh talking so let's have a look how we could how we",
    "start": "1095960",
    "end": "1103039"
  },
  {
    "text": "could Define events in our system so the story of",
    "start": "1103039",
    "end": "1108820"
  },
  {
    "text": "Maurice and Roy so um events",
    "start": "1108820",
    "end": "1116059"
  },
  {
    "text": "as I mentioned they all contain a specific information that is characteristic for them so for example",
    "start": "1116059",
    "end": "1122840"
  },
  {
    "text": "when we are logging incident then we have all the information about the customer about the description",
    "start": "1122840",
    "end": "1130700"
  },
  {
    "text": "Etc but then if we are categorizing or prioritizing uh the incident then we",
    "start": "1130700",
    "end": "1137419"
  },
  {
    "text": "don't need to repeat ourselves because we already logged that and remember because we will be getting all the",
    "start": "1137419",
    "end": "1143840"
  },
  {
    "text": "events then we will have all the information that we need so they should be really focused about",
    "start": "1143840",
    "end": "1150740"
  },
  {
    "text": "the information that we are storing the thing that careful viewer could see is that",
    "start": "1150740",
    "end": "1159200"
  },
  {
    "text": "all of them have the incident ID an incident ID is also the our stream ID so",
    "start": "1159200",
    "end": "1166700"
  },
  {
    "text": "that's also showing that all the events are correlated by that so this is the",
    "start": "1166700",
    "end": "1172520"
  },
  {
    "text": "thing that we could repeat but in general I'm just using records because they are immutable and it's also the the",
    "start": "1172520",
    "end": "1181220"
  },
  {
    "text": "events are also a nice way to build a business representation in our code",
    "start": "1181220",
    "end": "1187400"
  },
  {
    "text": "because if we are using such concise syntax then this is also something that",
    "start": "1187400",
    "end": "1192620"
  },
  {
    "text": "we could show even to our business of course not without our explanation but",
    "start": "1192620",
    "end": "1197900"
  },
  {
    "text": "we can use it as a node and just showing them this is what we have and they should understand that",
    "start": "1197900",
    "end": "1203660"
  },
  {
    "text": "what's more if we are discussing with business then it will be also easier for",
    "start": "1203660",
    "end": "1209480"
  },
  {
    "text": "us to move it and understand back and forth an interesting thing is that business",
    "start": "1209480",
    "end": "1214760"
  },
  {
    "text": "understand even better than us because we usually think about events like Mouse",
    "start": "1214760",
    "end": "1220460"
  },
  {
    "text": "button click Etc when my product owner that was totally not technical person",
    "start": "1220460",
    "end": "1227500"
  },
  {
    "text": "after working like month with us he was telling that like hey then let's",
    "start": "1227500",
    "end": "1234860"
  },
  {
    "text": "just add this event and publish that and they will get this event and listen and",
    "start": "1234860",
    "end": "1239900"
  },
  {
    "text": "go forward so yeah we say like Camille you probably spent too much time with us",
    "start": "1239900",
    "end": "1245120"
  },
  {
    "text": "but yeah um nevertheless let's move on so we have",
    "start": "1245120",
    "end": "1251480"
  },
  {
    "text": "our events which are records so immutable State Etc and I also added",
    "start": "1251480",
    "end": "1257840"
  },
  {
    "text": "some some uh that I will use also for to Define our",
    "start": "1257840",
    "end": "1266960"
  },
  {
    "text": "current state because our current state so the incident",
    "start": "1266960",
    "end": "1272660"
  },
  {
    "text": "it's just an interpretation of of our events and we should still have it and",
    "start": "1272660",
    "end": "1279400"
  },
  {
    "text": "the really great part about the about even sourcing is that we can keep our",
    "start": "1279400",
    "end": "1286880"
  },
  {
    "text": "business logic you will see that in a moment really uh tiny because",
    "start": "1286880",
    "end": "1294140"
  },
  {
    "text": "in traditional approach we have right model what we write is what we read then",
    "start": "1294140",
    "end": "1300500"
  },
  {
    "text": "we we need to keep all of the information like notes like description",
    "start": "1300500",
    "end": "1306200"
  },
  {
    "text": "Etc even though we don't need that actually for our business logic we are not making any ifs about the description",
    "start": "1306200",
    "end": "1313400"
  },
  {
    "text": "we are not checking notes Etc if our only rule is that we can",
    "start": "1313400",
    "end": "1321080"
  },
  {
    "text": "um for example um resolve ticket only if we have all of",
    "start": "1321080",
    "end": "1327320"
  },
  {
    "text": "the questions from the customer when answered then maybe we could just keep this billion flag and maybe some status",
    "start": "1327320",
    "end": "1335360"
  },
  {
    "text": "just to double check our logic you will see that in a minute so it's not that we",
    "start": "1335360",
    "end": "1342080"
  },
  {
    "text": "all of the information see there is quite a lot that we are logging it's not",
    "start": "1342080",
    "end": "1347299"
  },
  {
    "text": "that we need to repeat everything in in our current state",
    "start": "1347299",
    "end": "1352760"
  },
  {
    "text": "so to note just make it uh talking let's let me show you that",
    "start": "1352760",
    "end": "1362220"
  },
  {
    "text": "[Music] um so let's add some commands and comments",
    "start": "1362220",
    "end": "1369500"
  },
  {
    "text": "usually are in most cases one to one two events that's not always that this is",
    "start": "1369500",
    "end": "1375020"
  },
  {
    "text": "not a hard rule more like a fun rule so if we need to capture those business",
    "start": "1375020",
    "end": "1380780"
  },
  {
    "text": "logic and the business facts then we also need to have the business comments like lock incident categorize incident",
    "start": "1380780",
    "end": "1387860"
  },
  {
    "text": "and the main difference is that command is an intention to do something it doesn't mean that it will be it will",
    "start": "1387860",
    "end": "1395360"
  },
  {
    "text": "happen because it it should be validated it should be the business logic needs to be run Etc and even is something that is",
    "start": "1395360",
    "end": "1403340"
  },
  {
    "text": "that has already happened and that's also why we should embrace that in our",
    "start": "1403340",
    "end": "1408919"
  },
  {
    "text": "naming so events should be named in a past tense and comments in the in the",
    "start": "1408919",
    "end": "1415039"
  },
  {
    "text": "regular so this those are our commands and let's",
    "start": "1415039",
    "end": "1420559"
  },
  {
    "text": "have a look how our business logic could look like",
    "start": "1420559",
    "end": "1426020"
  },
  {
    "text": "so let's build a simple service and the simple service",
    "start": "1426020",
    "end": "1432500"
  },
  {
    "text": "has the static methods nothing injected no repositories Jeremy would kill me if",
    "start": "1432500",
    "end": "1438740"
  },
  {
    "text": "I added them so this is a really",
    "start": "1438740",
    "end": "1444679"
  },
  {
    "text": "someone may say that this is a functional programming but in my opinion it's just a simple code so what we have",
    "start": "1444679",
    "end": "1450740"
  },
  {
    "text": "here is that for the first Common log incident there is no state so we just",
    "start": "1450740",
    "end": "1456020"
  },
  {
    "text": "have command and we are producing new event if we are wanting to categorize event",
    "start": "1456020",
    "end": "1462679"
  },
  {
    "text": "then we need to ensure that this incident wasn't close already and then",
    "start": "1462679",
    "end": "1468140"
  },
  {
    "text": "we are just setting up the new event and the same pattern happens for all the",
    "start": "1468140",
    "end": "1473720"
  },
  {
    "text": "cases there is nothing fancy I think the most the fences is this resolution so we",
    "start": "1473720",
    "end": "1480080"
  },
  {
    "text": "are just making sure that this incident wasn't resolved already and that all the",
    "start": "1480080",
    "end": "1485539"
  },
  {
    "text": "questions were answered and this is also really powerful because many people is telling me that even",
    "start": "1485539",
    "end": "1493340"
  },
  {
    "text": "sourcing is hard to test like what can be easier to test than just pure function that just takes common state",
    "start": "1493340",
    "end": "1500179"
  },
  {
    "text": "and get event it's super predictable and really easy to maintain so even though",
    "start": "1500179",
    "end": "1506480"
  },
  {
    "text": "even sourcing is really connected with the DDD Community then it's not that you",
    "start": "1506480",
    "end": "1512240"
  },
  {
    "text": "need to use the all the Tactical patterns if you don't want to like aggregate maybe it's not needed if you",
    "start": "1512240",
    "end": "1518720"
  },
  {
    "text": "have just a simple logic I'm not sure if I can even name it business logic but if",
    "start": "1518720",
    "end": "1524900"
  },
  {
    "text": "you have something like that then why to try to make stuff harder and I'm also",
    "start": "1524900",
    "end": "1530299"
  },
  {
    "text": "showing you that to prove that even sourcing is not that scary and not that hard to implement because many people",
    "start": "1530299",
    "end": "1537740"
  },
  {
    "text": "are claiming that yeah it's super hard but it's not it's uh there there is a",
    "start": "1537740",
    "end": "1544400"
  },
  {
    "text": "lot of things that you can find on internet that are terribly wrong but",
    "start": "1544400",
    "end": "1550640"
  },
  {
    "text": "this is uh I mean surprise but this is this is even sourcing in a",
    "start": "1550640",
    "end": "1557299"
  },
  {
    "text": "nutshell but okay I show you events I will show you how to run the business logic",
    "start": "1557299",
    "end": "1564740"
  },
  {
    "text": "how to return events from the business logic let's have a look",
    "start": "1564740",
    "end": "1570559"
  },
  {
    "text": "on the part that is one of the most important so how to build our current",
    "start": "1570559",
    "end": "1576679"
  },
  {
    "text": "state from those events and",
    "start": "1576679",
    "end": "1582200"
  },
  {
    "text": "let me let me add again",
    "start": "1582200",
    "end": "1588320"
  },
  {
    "text": "I mean I promise you live coding and it's live copy and pasting sorry for that",
    "start": "1588320",
    "end": "1595240"
  },
  {
    "text": "I'm a such a liar yeah at least on even sourcing I'm not",
    "start": "1595520",
    "end": "1601220"
  },
  {
    "text": "lying of course um so yeah so I just extended our entity",
    "start": "1601220",
    "end": "1606320"
  },
  {
    "text": "with the information on how we should update our current state based on based",
    "start": "1606320",
    "end": "1614059"
  },
  {
    "text": "on events that we are receiving so those are functions that will be run in like a",
    "start": "1614059",
    "end": "1619820"
  },
  {
    "text": "for each statement and what you see here it's Martin convention so you might have",
    "start": "1619820",
    "end": "1625880"
  },
  {
    "text": "create method which will take the event because that assumes that this is the first event from the stream and it",
    "start": "1625880",
    "end": "1633200"
  },
  {
    "text": "should return the new state and apply our methods that are taking the the",
    "start": "1633200",
    "end": "1638480"
  },
  {
    "text": "event and are acting on the current state so this I'm using the records the",
    "start": "1638480",
    "end": "1645740"
  },
  {
    "text": "record syntax that allows us to say like what has changed so for example if agent",
    "start": "1645740",
    "end": "1651440"
  },
  {
    "text": "result responded to incident then we are marking that he answered all the",
    "start": "1651440",
    "end": "1656600"
  },
  {
    "text": "questions optimistically if customer responded then we are marking that node there is something to",
    "start": "1656600",
    "end": "1664220"
  },
  {
    "text": "answer and for the events like even incidents resolved resolution acknowledge incident close then we are",
    "start": "1664220",
    "end": "1671480"
  },
  {
    "text": "just updating the current status so this is simple stuff and if we run",
    "start": "1671480",
    "end": "1676700"
  },
  {
    "text": "all of those methods on the sequence of events that we are getting from our event store then we can just build the",
    "start": "1676700",
    "end": "1684140"
  },
  {
    "text": "current state and we are doing that everything in memory so if our stream is",
    "start": "1684140",
    "end": "1691279"
  },
  {
    "text": "not too long then it will take like a milliseconds of course you don't need to use records Martin also allows to just",
    "start": "1691279",
    "end": "1698240"
  },
  {
    "text": "use regular classes structures whatever you want",
    "start": "1698240",
    "end": "1704360"
  },
  {
    "text": "um this is just the thing that I really like because if you look on this code",
    "start": "1704360",
    "end": "1709640"
  },
  {
    "text": "then it's also a documentation so that's something that we don't want to write and if we use event sourcing then we",
    "start": "1709640",
    "end": "1716720"
  },
  {
    "text": "don't need to write it but we still accidentally will have it which is I think a big benefit of that",
    "start": "1716720",
    "end": "1725360"
  },
  {
    "text": "so okay we have our events we know how to build",
    "start": "1725360",
    "end": "1730820"
  },
  {
    "text": "the state from them we have our so-called business logic",
    "start": "1730820",
    "end": "1736700"
  },
  {
    "text": "but let's go further because this could be",
    "start": "1736700",
    "end": "1742100"
  },
  {
    "text": "good for a conference talk maybe but let's make it a bit more",
    "start": "1742100",
    "end": "1748220"
  },
  {
    "text": "production ready as I promised so let's add some new class again no",
    "start": "1748220",
    "end": "1756440"
  },
  {
    "text": "repository Jeremy",
    "start": "1756440",
    "end": "1760000"
  },
  {
    "text": "so let's think how having our aggregate entity whatever we call it how to store",
    "start": "1761799",
    "end": "1769520"
  },
  {
    "text": "the information in in our event store so",
    "start": "1769520",
    "end": "1775039"
  },
  {
    "text": "Martin has the main class like you can think like DB context we have document",
    "start": "1775039",
    "end": "1781580"
  },
  {
    "text": "session and document session have uh events property on which you you will be",
    "start": "1781580",
    "end": "1790580"
  },
  {
    "text": "acting when interacting with the event store part so the basic method for",
    "start": "1790580",
    "end": "1795860"
  },
  {
    "text": "creating news team is not surprisingly start stream and what we are providing",
    "start": "1795860",
    "end": "1801020"
  },
  {
    "text": "there is an event and ID of our stream and this is really",
    "start": "1801020",
    "end": "1806720"
  },
  {
    "text": "important because as I said in Martin we are not telling you how to live that's",
    "start": "1806720",
    "end": "1812299"
  },
  {
    "text": "quite one of the rare things most of Event Source do not allow to to happen",
    "start": "1812299",
    "end": "1817760"
  },
  {
    "text": "to more than one stream which is probably good idea to not to restrict that because people",
    "start": "1817760",
    "end": "1824960"
  },
  {
    "text": "are doing crazy stuff surprise but we allowed that so this is like our",
    "start": "1824960",
    "end": "1831080"
  },
  {
    "text": "unit of work so you can update more than that and that will be really important when we get to the second part of the",
    "start": "1831080",
    "end": "1837740"
  },
  {
    "text": "talk and then we can also Define a really simple method on updating our state so",
    "start": "1837740",
    "end": "1845779"
  },
  {
    "text": "it looks a bit scary because it has five parameters but it's not that",
    "start": "1845779",
    "end": "1851720"
  },
  {
    "text": "so the first thing that we will be doing is calling aggregate stream async an",
    "start": "1851720",
    "end": "1858740"
  },
  {
    "text": "aggregate stream async is a Martin method that what it does we are providing them a stream ID Martin will",
    "start": "1858740",
    "end": "1866419"
  },
  {
    "text": "load all the events from the stream then it will run internally for each and call",
    "start": "1866419",
    "end": "1873380"
  },
  {
    "text": "by convention store methods either create or apply and return to you the",
    "start": "1873380",
    "end": "1879080"
  },
  {
    "text": "current state if the um if the stream didn't exist then of",
    "start": "1879080",
    "end": "1885740"
  },
  {
    "text": "course it will return null so that's why we need to verify that and we can provide a function and function will be",
    "start": "1885740",
    "end": "1893840"
  },
  {
    "text": "our business logic so those methods that you already saw we can provide here and",
    "start": "1893840",
    "end": "1900080"
  },
  {
    "text": "after we will be getting event and Martin also allows you to use the",
    "start": "1900080",
    "end": "1906919"
  },
  {
    "text": "optimistic concurrency to get the full certainty that you are making decisions",
    "start": "1906919",
    "end": "1913159"
  },
  {
    "text": "uh based on the current state so save changes internally when it called it",
    "start": "1913159",
    "end": "1919700"
  },
  {
    "text": "opens the new transaction and either all the changes will be applied the event will be appended and as you see further",
    "start": "1919700",
    "end": "1927620"
  },
  {
    "text": "on the read models will be updated or none so",
    "start": "1927620",
    "end": "1935299"
  },
  {
    "text": "that's that's really important thing here um so if we just to make sure that",
    "start": "1935299",
    "end": "1943399"
  },
  {
    "text": "everyone is aligned with the optimistic concurrency so it's not a specific for",
    "start": "1943399",
    "end": "1948860"
  },
  {
    "text": "even sourcing so if you don't plan to use event sourcing and just sitting because you are kind a person to not go",
    "start": "1948860",
    "end": "1956539"
  },
  {
    "text": "out then this is the stuff that you can take to your project so optimistic concurrency is a thing that help you to",
    "start": "1956539",
    "end": "1963260"
  },
  {
    "text": "ensure that you no one updated your state in the meantime so then the first",
    "start": "1963260",
    "end": "1971360"
  },
  {
    "text": "thing that we are doing when getting the data is we also getting the current",
    "start": "1971360",
    "end": "1977539"
  },
  {
    "text": "version of the state so in even sourcing that will be probably equal to the number of events in the Stream",
    "start": "1977539",
    "end": "1984500"
  },
  {
    "text": "then when we are making some decision really important decision",
    "start": "1984500",
    "end": "1989899"
  },
  {
    "text": "then we can pass this version so this version that we are saying that based on",
    "start": "1989899",
    "end": "1995840"
  },
  {
    "text": "my knowledge you should have like three events in the Stream and if database see that yeah okay I",
    "start": "1995840",
    "end": "2004000"
  },
  {
    "text": "have three events you you are fine to go then it it will take the event write it",
    "start": "2004000",
    "end": "2010539"
  },
  {
    "text": "and then the other person that reads the events from the database and also have",
    "start": "2010539",
    "end": "2017679"
  },
  {
    "text": "the free events then if it provides also the same version that they got then",
    "start": "2017679",
    "end": "2024880"
  },
  {
    "text": "database will say nope so this is really important because",
    "start": "2024880",
    "end": "2030179"
  },
  {
    "text": "transaction plus business logic plus optimistic concurrency give us full",
    "start": "2030179",
    "end": "2036760"
  },
  {
    "text": "certainty that we are really have the strong consistency and no one in the",
    "start": "2036760",
    "end": "2042220"
  },
  {
    "text": "meantime change anything so in the internet you can find a lot of resources claiming that even sourcing uh is you",
    "start": "2042220",
    "end": "2051638"
  },
  {
    "text": "will have always eventual consistency that's not correct all of the major even",
    "start": "2051639",
    "end": "2057280"
  },
  {
    "text": "stores that I know so Martin even store DB axon Etc all of them on the right side have",
    "start": "2057280",
    "end": "2064000"
  },
  {
    "text": "strong consistency they support either transactions like Martin or atomicity as",
    "start": "2064000",
    "end": "2070300"
  },
  {
    "text": "even store DB so this is really important because that's just a myth because people are",
    "start": "2070300",
    "end": "2076419"
  },
  {
    "text": "using messaging queues as even stores and then they are thinking that well I don't have strong consistency okay you",
    "start": "2076419",
    "end": "2084040"
  },
  {
    "text": "don't that's correct um so",
    "start": "2084040",
    "end": "2089618"
  },
  {
    "text": "just to show you because this is Method this is almost fine because it at least",
    "start": "2089619",
    "end": "2095679"
  },
  {
    "text": "shows us what's happening but Martin also gave us a shortened version of that",
    "start": "2095679",
    "end": "2102119"
  },
  {
    "text": "as I said we are trying to reduce the boilerplate and allow you to focus on the business",
    "start": "2102119",
    "end": "2108220"
  },
  {
    "text": "so we also have the method maybe the name is not great but it's how it is",
    "start": "2108220",
    "end": "2113980"
  },
  {
    "text": "naming is hard so right to aggregate what it does we provide the ID the",
    "start": "2113980",
    "end": "2119800"
  },
  {
    "text": "version and if it notices during the reading that the version is already not",
    "start": "2119800",
    "end": "2124900"
  },
  {
    "text": "the same as the version from the stream then it will fail fast so you",
    "start": "2124900",
    "end": "2130540"
  },
  {
    "text": "it's like a mechanical sympathy and then we have more option around the",
    "start": "2130540",
    "end": "2136540"
  },
  {
    "text": "stream so we can get the aggregate which is our current state and we can for",
    "start": "2136540",
    "end": "2142420"
  },
  {
    "text": "example up into one event happen more than one event so this will just encapsulate this whole logic so",
    "start": "2142420",
    "end": "2150339"
  },
  {
    "text": "just a synthetic sugar on top of what I show you but still I think it's quite nice",
    "start": "2150339",
    "end": "2157260"
  },
  {
    "text": "um so maybe as we have some time then let's try to",
    "start": "2157480",
    "end": "2163180"
  },
  {
    "text": "make a really simple application I'm always joking probably some of you",
    "start": "2163180",
    "end": "2168640"
  },
  {
    "text": "already heard that that in front end world the single page application were",
    "start": "2168640",
    "end": "2174940"
  },
  {
    "text": "fashionable and still are and in.net nowadays we can build a single file application",
    "start": "2174940",
    "end": "2182380"
  },
  {
    "text": "so that's almost what we will be doing so Martin also give a help to in this",
    "start": "2182380",
    "end": "2189579"
  },
  {
    "text": "super pattern which is a single file application and Martin provides also",
    "start": "2189579",
    "end": "2196020"
  },
  {
    "text": "capabilities to help you to set up so you won't need to do yours bring your",
    "start": "2196020",
    "end": "2201280"
  },
  {
    "text": "own dependency injection and write everything from scratch so we have some",
    "start": "2201280",
    "end": "2208540"
  },
  {
    "text": "extension methods like the add Martin is the main one which allows you to for example configure options like the",
    "start": "2208540",
    "end": "2215260"
  },
  {
    "text": "schemas of the database the connection string obviously we are also supporting",
    "start": "2215260",
    "end": "2220900"
  },
  {
    "text": "because we are using Json and we provide by default Newton soft because system",
    "start": "2220900",
    "end": "2226599"
  },
  {
    "text": "takes Json is not fully in full parity with the Newton soft but",
    "start": "2226599",
    "end": "2232900"
  },
  {
    "text": "you can also use it like here and we also have some option this we",
    "start": "2232900",
    "end": "2238000"
  },
  {
    "text": "will discuss later on and just maybe add some",
    "start": "2238000",
    "end": "2245640"
  },
  {
    "text": "yeah okay and then let's have a look how our endpoint could look like",
    "start": "2246099",
    "end": "2252520"
  },
  {
    "text": "so our single page application we could use the latest greatest syntax",
    "start": "2252520",
    "end": "2259060"
  },
  {
    "text": "from the dot net word so for example if we are logging new",
    "start": "2259060",
    "end": "2265420"
  },
  {
    "text": "incident then we are taking request and we are calling this extension method",
    "start": "2265420",
    "end": "2272740"
  },
  {
    "text": "that we just defined the at method which will just",
    "start": "2272740",
    "end": "2278079"
  },
  {
    "text": "take the result of the handle method and handle method is what you already know",
    "start": "2278079",
    "end": "2283480"
  },
  {
    "text": "so this simple service method so like a Simple Pure function",
    "start": "2283480",
    "end": "2290260"
  },
  {
    "text": "and the same pattern goes further on so if we want to use optimistic concurrency",
    "start": "2290260",
    "end": "2296619"
  },
  {
    "text": "and you want then for example we can take the expected version from etac",
    "start": "2296619",
    "end": "2303280"
  },
  {
    "text": "and we can provide that to our get an update parameter and we need to provide",
    "start": "2303280",
    "end": "2309040"
  },
  {
    "text": "some function we will have the state and we can run on this state our handle",
    "start": "2309040",
    "end": "2314140"
  },
  {
    "text": "method which is again the method that we just defined so simple stuff no need for hundreds of",
    "start": "2314140",
    "end": "2322300"
  },
  {
    "text": "layers Etc it's almost like a serverless approach",
    "start": "2322300",
    "end": "2330040"
  },
  {
    "text": "So speaking about serverless I was working in a node.js project when",
    "start": "2330820",
    "end": "2336760"
  },
  {
    "text": "we were building a serverless on AWS and I counted seven layers just to get",
    "start": "2336760",
    "end": "2344619"
  },
  {
    "text": "to the business logic so that's not something that you would",
    "start": "2344619",
    "end": "2349900"
  },
  {
    "text": "necessarily would like to that's something that I would really",
    "start": "2349900",
    "end": "2355480"
  },
  {
    "text": "discourage if you have a simple application and if you don't need to",
    "start": "2355480",
    "end": "2360520"
  },
  {
    "text": "have so many abstractions start simple then add abstractions when you need them",
    "start": "2360520",
    "end": "2365680"
  },
  {
    "text": "and that's also something that we enable of course if you like clean architecture",
    "start": "2365680",
    "end": "2371500"
  },
  {
    "text": "if you'd like controllers Etc that's totally fine as as I",
    "start": "2371500",
    "end": "2379780"
  },
  {
    "text": "mentioned we are we won't tell you how to leave Martin can be used like that but I'm just showing potentially simpler",
    "start": "2379780",
    "end": "2386859"
  },
  {
    "text": "way so does anyone know web page there I fix it",
    "start": "2386859",
    "end": "2395800"
  },
  {
    "text": "it's surprisingly it's still open and people are still sending such photos",
    "start": "2395800",
    "end": "2401079"
  },
  {
    "text": "there I was really digging that page in my high school I just checked and those",
    "start": "2401079",
    "end": "2407560"
  },
  {
    "text": "are quite recent photos from there and these photos are showing uh like how",
    "start": "2407560",
    "end": "2414099"
  },
  {
    "text": "people are interpreting word all right see for that guy this is perfectly",
    "start": "2414099",
    "end": "2419920"
  },
  {
    "text": "solved you can for this guy the same and this",
    "start": "2419920",
    "end": "2425980"
  },
  {
    "text": "is even better right because you don't you not only have the buy cycle but you",
    "start": "2425980",
    "end": "2431079"
  },
  {
    "text": "can also do the barbecue sounds good and um why am i showing that to you not only",
    "start": "2431079",
    "end": "2438700"
  },
  {
    "text": "just to tell that this is how we are fixing our stuff also if someone took a",
    "start": "2438700",
    "end": "2444400"
  },
  {
    "text": "picture then it would be more or less like that but Jokes Aside",
    "start": "2444400",
    "end": "2449760"
  },
  {
    "text": "I want to tell you about the projections because projections is one of the even",
    "start": "2450280",
    "end": "2456160"
  },
  {
    "text": "sourcing secret source and projections are just a different interpretation of",
    "start": "2456160",
    "end": "2462640"
  },
  {
    "text": "the same thing so for those guys everything works as it should it's great",
    "start": "2462640",
    "end": "2468280"
  },
  {
    "text": "for most of you hearing your laughs I assume that probably not luckily",
    "start": "2468280",
    "end": "2475200"
  },
  {
    "text": "I mean don't take that home as a",
    "start": "2475200",
    "end": "2480540"
  },
  {
    "text": "as a lesson from the from this talk and not try to do barbecue like that but",
    "start": "2480700",
    "end": "2487000"
  },
  {
    "text": "projection are just inter different interpretation of the same thing so for",
    "start": "2487000",
    "end": "2492280"
  },
  {
    "text": "example if we have the incident resolve or incident closed it's quite often when we are telling user works for me or",
    "start": "2492280",
    "end": "2500500"
  },
  {
    "text": "cannot reproduce that and for us this case close we are happy and the same",
    "start": "2500500",
    "end": "2506079"
  },
  {
    "text": "fact for the business is like nope that's not true and I'm also showing",
    "start": "2506079",
    "end": "2512920"
  },
  {
    "text": "another example like a football match or soccer for Jeremy",
    "start": "2512920",
    "end": "2518560"
  },
  {
    "text": "when you have two teams and one team win and the other lose then this is a fact",
    "start": "2518560",
    "end": "2525040"
  },
  {
    "text": "right this is a fact that just happened but for the fans of the one team this",
    "start": "2525040",
    "end": "2530440"
  },
  {
    "text": "will be totally sad experience and for other extremely happy so",
    "start": "2530440",
    "end": "2536200"
  },
  {
    "text": "why am i showing you this meta information because that's also",
    "start": "2536200",
    "end": "2541300"
  },
  {
    "text": "something that we can use in event sourcing and in general in an even driven world because if we take a",
    "start": "2541300",
    "end": "2548260"
  },
  {
    "text": "sequence of events the specific sequence of event then each of us will be interpreting that differently and what's",
    "start": "2548260",
    "end": "2555339"
  },
  {
    "text": "more we can fine tune that interpretation for our needs so for example for the purely technical",
    "start": "2555339",
    "end": "2561220"
  },
  {
    "text": "diagnostic we can interpret that totally different than for the business and for",
    "start": "2561220",
    "end": "2566320"
  },
  {
    "text": "the users like for example even this incident usually we have those in",
    "start": "2566320",
    "end": "2571359"
  },
  {
    "text": "internal nodes like when we are just bashing our users and then hoping that",
    "start": "2571359",
    "end": "2578319"
  },
  {
    "text": "we selected properly that it should be internal right and projections because",
    "start": "2578319",
    "end": "2585819"
  },
  {
    "text": "that was one of the hardest part for me when I was learning even sourcing because I understood pretty well the",
    "start": "2585819",
    "end": "2593560"
  },
  {
    "text": "right concept yeah we are getting events building the state running business logic storing new events and that's fine",
    "start": "2593560",
    "end": "2600160"
  },
  {
    "text": "because most of our business uh objects don't have a lot of operations",
    "start": "2600160",
    "end": "2606040"
  },
  {
    "text": "so they won't have a lot of events but I thought like okay but how do we get the",
    "start": "2606040",
    "end": "2611680"
  },
  {
    "text": "list of for example all incidents then should we load all events that wouldn't",
    "start": "2611680",
    "end": "2617800"
  },
  {
    "text": "be performant for sure because whatever I claim that it's okay",
    "start": "2617800",
    "end": "2623500"
  },
  {
    "text": "to load more events than reading one row will be always faster than reading three",
    "start": "2623500",
    "end": "2629619"
  },
  {
    "text": "rows so in even sourcing in even driven architecture projections can be used to",
    "start": "2629619",
    "end": "2637359"
  },
  {
    "text": "create the read models and we can take the database like a database table and",
    "start": "2637359",
    "end": "2645280"
  },
  {
    "text": "take our events for example incident locked and apply them one by one updating the specific row",
    "start": "2645280",
    "end": "2652960"
  },
  {
    "text": "one after another so if we have incident lock then we can add new row into our",
    "start": "2652960",
    "end": "2658480"
  },
  {
    "text": "database when we have agent responded to incident then we are updating for",
    "start": "2658480",
    "end": "2663760"
  },
  {
    "text": "example nodes count and when we have the incident resolve then then we are changing the Status and",
    "start": "2663760",
    "end": "2670839"
  },
  {
    "text": "that may look a bit redundant but if you notice then we are just",
    "start": "2670839",
    "end": "2675880"
  },
  {
    "text": "updating the subset of the data so knowing this business information and",
    "start": "2675880",
    "end": "2681940"
  },
  {
    "text": "what has happened give us also possibility to make the performance optimization because we can just update",
    "start": "2681940",
    "end": "2688540"
  },
  {
    "text": "what we need for example if we are not using postgres but we we would like to",
    "start": "2688540",
    "end": "2693640"
  },
  {
    "text": "build a read model to mongodb then mongodb has this great Atomic operations",
    "start": "2693640",
    "end": "2698680"
  },
  {
    "text": "that we can update just a subset of records and that's what we can do here",
    "start": "2698680",
    "end": "2704319"
  },
  {
    "text": "and really powerful thing is that a single event so for example agent was",
    "start": "2704319",
    "end": "2709420"
  },
  {
    "text": "assigned to incident will potentially update multiple read models so for",
    "start": "2709420",
    "end": "2715300"
  },
  {
    "text": "example agent assignment incidents some incident dashboard maybe it will also",
    "start": "2715300",
    "end": "2721359"
  },
  {
    "text": "send some notification and this is only a various interpretations and various",
    "start": "2721359",
    "end": "2727240"
  },
  {
    "text": "operations that will happen after this specific fact was observed",
    "start": "2727240",
    "end": "2732400"
  },
  {
    "text": "so this is really powerful because it also cuts the cognitive load as you saw",
    "start": "2732400",
    "end": "2738460"
  },
  {
    "text": "the business logic if we removed all the fluffiness of all the descriptions all the data that we don't need for business",
    "start": "2738460",
    "end": "2744460"
  },
  {
    "text": "logic is quite simple and then in even sourcing we can focus first how to",
    "start": "2744460",
    "end": "2751420"
  },
  {
    "text": "capture our events so the business facts the best and then we can think how to use them so for example in the",
    "start": "2751420",
    "end": "2758140"
  },
  {
    "text": "projections and as I mentioned we can also have the",
    "start": "2758140",
    "end": "2764500"
  },
  {
    "text": "strong consistency on right side on read side that's what Martin allows you to",
    "start": "2764500",
    "end": "2770680"
  },
  {
    "text": "have so we can have the unit of work and when we are pending events then we can grab",
    "start": "2770680",
    "end": "2776380"
  },
  {
    "text": "all the projections that can handle this event and just store it in the same",
    "start": "2776380",
    "end": "2783040"
  },
  {
    "text": "transaction because why not I mean of course there is a performance",
    "start": "2783040",
    "end": "2788260"
  },
  {
    "text": "potentially degradation because one event May update like potentially 5 10",
    "start": "2788260",
    "end": "2793420"
  },
  {
    "text": "or how how many read models we create so we need to be extremely careful on that if we are fine with the eventual",
    "start": "2793420",
    "end": "2800500"
  },
  {
    "text": "consistency then it's probably better to use async projections which we also have",
    "start": "2800500",
    "end": "2806380"
  },
  {
    "text": "in our case it's called async demon it sounds seriously like a really serious",
    "start": "2806380",
    "end": "2812020"
  },
  {
    "text": "and uh feature but yeah as you said it's like also what",
    "start": "2812020",
    "end": "2819940"
  },
  {
    "text": "Aaron told on yesterday talk it's about optionality so giving us more option",
    "start": "2819940",
    "end": "2825099"
  },
  {
    "text": "more more stuff that we can do and fine-tune to our use case",
    "start": "2825099",
    "end": "2830740"
  },
  {
    "text": "so let's see how the projections could look like in Martin",
    "start": "2830740",
    "end": "2836200"
  },
  {
    "text": "and let's go and Define the incident details maybe let's have a look first on",
    "start": "2836200",
    "end": "2843040"
  },
  {
    "text": "our incident just to show you see this is our interpretation and it's",
    "start": "2843040",
    "end": "2850900"
  },
  {
    "text": "also projection but projection made in memory um so this is really simple only",
    "start": "2850900",
    "end": "2857260"
  },
  {
    "text": "information that we need for our business logic but for our read models",
    "start": "2857260",
    "end": "2862540"
  },
  {
    "text": "definitely we will need more because we would like to for example show users",
    "start": "2862540",
    "end": "2869800"
  },
  {
    "text": "see I'm made that simple to copy and paste and I cannot even do that properly",
    "start": "2869800",
    "end": "2877079"
  },
  {
    "text": "so incident details is showing all of the stuff that has happened for for the",
    "start": "2877079",
    "end": "2884020"
  },
  {
    "text": "specific incident so we have all the information that we logged in the events",
    "start": "2884020",
    "end": "2889060"
  },
  {
    "text": "so when we categorize event and the category the priority the all the nodes",
    "start": "2889060",
    "end": "2895300"
  },
  {
    "text": "so all the discussions that were happening in our case of course the status customer ID agent ID and so on",
    "start": "2895300",
    "end": "2903339"
  },
  {
    "text": "and so forth so this is the interpretation of the same set of events so as we did for the",
    "start": "2903339",
    "end": "2911740"
  },
  {
    "text": "incident and Martin also gave you the possibility to cut the boilerplate code",
    "start": "2911740",
    "end": "2918220"
  },
  {
    "text": "and we have a set of Base classes for um for creating grid models so for",
    "start": "2918220",
    "end": "2926200"
  },
  {
    "text": "example single stream projection what it does is that we it will assume that the ID of the",
    "start": "2926200",
    "end": "2934000"
  },
  {
    "text": "read model is the same as ID of the Stream and",
    "start": "2934000",
    "end": "2939099"
  },
  {
    "text": "even after event when the event was appended so we called append and we",
    "start": "2939099",
    "end": "2945040"
  },
  {
    "text": "called save changes then Martin will try to find do I have a projection that is",
    "start": "2945040",
    "end": "2950740"
  },
  {
    "text": "registered as inline so to be run in the same transaction that can handle this",
    "start": "2950740",
    "end": "2957099"
  },
  {
    "text": "specific event and in I think version 4 we simplify the",
    "start": "2957099",
    "end": "2963160"
  },
  {
    "text": "registration so we you can also use the same conventions that you have for the",
    "start": "2963160",
    "end": "2968920"
  },
  {
    "text": "right model so you also have the create and apply methods the only difference is",
    "start": "2968920",
    "end": "2974140"
  },
  {
    "text": "that they are taking the current state as a parameter instead of using this but",
    "start": "2974140",
    "end": "2980920"
  },
  {
    "text": "it's the same stuff so you are just defining that hey for this specific",
    "start": "2980920",
    "end": "2986859"
  },
  {
    "text": "event I would like to update this specific grid model and this is how you should do",
    "start": "2986859",
    "end": "2993520"
  },
  {
    "text": "it so simple as that and Martin as the second part of Martin or actually the",
    "start": "2993520",
    "end": "2999700"
  },
  {
    "text": "first chronologically is the document part so you we can use postgres as a",
    "start": "2999700",
    "end": "3006599"
  },
  {
    "text": "document database where key is the primary key of the table and the value",
    "start": "3006599",
    "end": "3011940"
  },
  {
    "text": "is the Json B because we are also using so think about like building a",
    "start": "3011940",
    "end": "3018200"
  },
  {
    "text": " on postgres but with the strong consistency Etc so we are benefiting",
    "start": "3018200",
    "end": "3024119"
  },
  {
    "text": "actually from that so you know this is just adding some",
    "start": "3024119",
    "end": "3030540"
  },
  {
    "text": "notes applying events and here you can also you don't need to use records in",
    "start": "3030540",
    "end": "3035940"
  },
  {
    "text": "mutable data you can mutate it's totally fine because in the end what will it do",
    "start": "3035940",
    "end": "3043260"
  },
  {
    "text": "it it will at first load the current state pass it to the method update it",
    "start": "3043260",
    "end": "3048540"
  },
  {
    "text": "and do the Absurd so maybe let's have a look on other",
    "start": "3048540",
    "end": "3054970"
  },
  {
    "text": "[Music] on other [Music] um projection so other interpretation of",
    "start": "3054970",
    "end": "3062640"
  },
  {
    "text": "the same set of events so we can Define also the incident short info because we",
    "start": "3062640",
    "end": "3067980"
  },
  {
    "text": "usually have this combination like details and list View and this is like a simpler version we don't have all the",
    "start": "3067980",
    "end": "3074280"
  },
  {
    "text": "nodes we just have the notes count and some smaller amount of data and we",
    "start": "3074280",
    "end": "3081059"
  },
  {
    "text": "also can register it like that so we can have a single stream projection and",
    "start": "3081059",
    "end": "3086520"
  },
  {
    "text": "Define all the apply methods that will just take the events as they go apply them and store",
    "start": "3086520",
    "end": "3093000"
  },
  {
    "text": "and then what you can do with that if we get back to the program file so our",
    "start": "3093000",
    "end": "3100740"
  },
  {
    "text": "single page a single file application then Martin also gives you possibility",
    "start": "3100740",
    "end": "3106200"
  },
  {
    "text": "to run link queries so just like in Entity framework so we can tell that for",
    "start": "3106200",
    "end": "3114420"
  },
  {
    "text": "example we would like to get all the short info filter it by the customer ID",
    "start": "3114420",
    "end": "3120420"
  },
  {
    "text": "and even page it for getting the incident the details",
    "start": "3120420",
    "end": "3127619"
  },
  {
    "text": "then we can get it by ID and Martin has also really a cool feature so if we",
    "start": "3127619",
    "end": "3136619"
  },
  {
    "text": "because getting data the serializing Json then",
    "start": "3136619",
    "end": "3143540"
  },
  {
    "text": "serializing it back to just return to through ASP it's just potentially too",
    "start": "3143540",
    "end": "3149880"
  },
  {
    "text": "much allocation that's just redundant so what we can do is that this method write",
    "start": "3149880",
    "end": "3156000"
  },
  {
    "text": "by ID and also write RI that allows you to just stream",
    "start": "3156000",
    "end": "3162599"
  },
  {
    "text": "directly Json from the postgres so that cannot be more faster and that's one of",
    "start": "3162599",
    "end": "3168240"
  },
  {
    "text": "the powerful stuff about the event sourcing and cqrs that because you know",
    "start": "3168240",
    "end": "3173280"
  },
  {
    "text": "the usage patterns you know the business intentions and you know that this won't",
    "start": "3173280",
    "end": "3179520"
  },
  {
    "text": "be ever modified because you you just want to return the data then nothing can",
    "start": "3179520",
    "end": "3185339"
  },
  {
    "text": "be faster than just pure streaming as it is and you can still use the link if",
    "start": "3185339",
    "end": "3190800"
  },
  {
    "text": "you'd like to um so if you want more",
    "start": "3190800",
    "end": "3196020"
  },
  {
    "text": "then I will there is more stuff that we can go like for example",
    "start": "3196020",
    "end": "3203339"
  },
  {
    "text": "incident history so if we'd like to Define some human",
    "start": "3203339",
    "end": "3208859"
  },
  {
    "text": "readable history like an audit log of our operation sure we can also do that",
    "start": "3208859",
    "end": "3214859"
  },
  {
    "text": "we have also another Base Class which is event projection not the greatest name",
    "start": "3214859",
    "end": "3220380"
  },
  {
    "text": "again but what it does it just do whatever you want with the events so",
    "start": "3220380",
    "end": "3225960"
  },
  {
    "text": "bring your own stuff so for example we are getting events together with the metadata and for each event we are",
    "start": "3225960",
    "end": "3233280"
  },
  {
    "text": "adding new documents so new entry and building a human readable history",
    "start": "3233280",
    "end": "3238920"
  },
  {
    "text": "and we also can have the multi-stream projection of course but the last thing",
    "start": "3238920",
    "end": "3245160"
  },
  {
    "text": "that I would like to show you is that for example we could also build based on that",
    "start": "3245160",
    "end": "3252960"
  },
  {
    "text": "we can build as ultimate custom projection",
    "start": "3252960",
    "end": "3258059"
  },
  {
    "text": "that will allow you to for example push the info push the events to for example",
    "start": "3258059",
    "end": "3264740"
  },
  {
    "text": "signalr and notify your front-end about it this is you need to just Implement",
    "start": "3264740",
    "end": "3270720"
  },
  {
    "text": "eye projection and all of our projections are also internally implementing this interface and here you",
    "start": "3270720",
    "end": "3277800"
  },
  {
    "text": "have a bit more stuff but um",
    "start": "3277800",
    "end": "3282960"
  },
  {
    "text": "it's quite simple so you are taking all the events and then you might decide to for example push it to signalr",
    "start": "3282960",
    "end": "3291000"
  },
  {
    "text": "and a Kafka users nope",
    "start": "3291000",
    "end": "3297599"
  },
  {
    "text": "that's cool actually but see if you are Kafka user and you",
    "start": "3297599",
    "end": "3305880"
  },
  {
    "text": "are not luckily but for example service bus or rabbit then you can also do the",
    "start": "3305880",
    "end": "3312300"
  },
  {
    "text": "same and implement this pattern the same way if you'd like to forward your events so you can write a custom projection",
    "start": "3312300",
    "end": "3318599"
  },
  {
    "text": "that will be just listening for events and then calling some specific messaging",
    "start": "3318599",
    "end": "3324300"
  },
  {
    "text": "system or streaming system so there are plenty of options that you might have and just to show you the",
    "start": "3324300",
    "end": "3332880"
  },
  {
    "text": "finally how the registrations of this projection looks like and then let's get back to our",
    "start": "3332880",
    "end": "3341040"
  },
  {
    "text": "program and add Martin so for that",
    "start": "3341040",
    "end": "3347940"
  },
  {
    "text": "you can have like registration of your projection where you are passing the information about",
    "start": "3347940",
    "end": "3355260"
  },
  {
    "text": "um about your projection and then you define whether it should be run in the",
    "start": "3355260",
    "end": "3361559"
  },
  {
    "text": "same transaction so inline or asynchronously and this is the line that is running the hosted service that will",
    "start": "3361559",
    "end": "3368220"
  },
  {
    "text": "be processing that but in general this is how Martin is",
    "start": "3368220",
    "end": "3373559"
  },
  {
    "text": "doing this is quite the projection stuff is really unique for Martin I don't know",
    "start": "3373559",
    "end": "3379380"
  },
  {
    "text": "other event stores that probably have that built in",
    "start": "3379380",
    "end": "3387078"
  },
  {
    "text": "like that but all of those patterns you can also build on your own like using",
    "start": "3387359",
    "end": "3392880"
  },
  {
    "text": "given store DB other event stores Etc so my intention wasn't just to",
    "start": "3392880",
    "end": "3398720"
  },
  {
    "text": "show how cool Martin is I mean not only but the same logic see the the same",
    "start": "3398720",
    "end": "3405780"
  },
  {
    "text": "simple transformation you could apply and write on your own for any other messaging system or even store",
    "start": "3405780",
    "end": "3414599"
  },
  {
    "text": "so summing up I hope that I managed to show you that even sourcing",
    "start": "3414599",
    "end": "3421200"
  },
  {
    "text": "is not so scary that it's actually useful that you might consider using it",
    "start": "3421200",
    "end": "3426359"
  },
  {
    "text": "in your system so if you see now blog posts or some",
    "start": "3426359",
    "end": "3431880"
  },
  {
    "text": "friend will send you the blog post that has such an image of the even sourcing or such one then I hope that you will",
    "start": "3431880",
    "end": "3439920"
  },
  {
    "text": "tell your friend that no no no this is not event sourcing because even sourcing",
    "start": "3439920",
    "end": "3445500"
  },
  {
    "text": "is a in a nutshell it's a simple storage pattern where you are treating events as",
    "start": "3445500",
    "end": "3451260"
  },
  {
    "text": "your source of true as your state and each operation starts with loading all",
    "start": "3451260",
    "end": "3456839"
  },
  {
    "text": "events building the state making decision and storing them as facts because events are business facts and",
    "start": "3456839",
    "end": "3464040"
  },
  {
    "text": "that's really important because that enables multiple options for your business if you discuss that with your",
    "start": "3464040",
    "end": "3470880"
  },
  {
    "text": "business for sure you will see the blinking guys and that will also help us because it's",
    "start": "3470880",
    "end": "3477480"
  },
  {
    "text": "really enhanced diagnostic if we have some back to track Etc then that will make our life much much easier",
    "start": "3477480",
    "end": "3485280"
  },
  {
    "text": "and even stores are not messaging systems even store logically are a key",
    "start": "3485280",
    "end": "3491640"
  },
  {
    "text": "value stores where key is the record ID and the value is the sequence of events so the history of this object",
    "start": "3491640",
    "end": "3498740"
  },
  {
    "text": "and physically usually they are implemented like a huge up and Only log which give us not only the ordering",
    "start": "3498740",
    "end": "3506400"
  },
  {
    "text": "guarantee on the stream level but also Global level and Martin is a quite unique in this",
    "start": "3506400",
    "end": "3514079"
  },
  {
    "text": "area because we bring a lot of stuff like strong consistency if you need that",
    "start": "3514079",
    "end": "3520339"
  },
  {
    "text": "and we also bringing the projections so different interpretations of the same",
    "start": "3520339",
    "end": "3526559"
  },
  {
    "text": "data and this is really a secret source of even sourcing and",
    "start": "3526559",
    "end": "3532619"
  },
  {
    "text": "I really encourage you to try it yourself it's really fun to build it and if I",
    "start": "3532619",
    "end": "3540540"
  },
  {
    "text": "didn't manage to persuade you then maybe those sweet Martens will do it",
    "start": "3540540",
    "end": "3546180"
  },
  {
    "text": "so thank you a lot it was a pleasure I will be here the whole day also tomorrow",
    "start": "3546180",
    "end": "3553140"
  },
  {
    "text": "just catch me if you even see that I'm talking with someone else and you would like to come and ask me just feel free",
    "start": "3553140",
    "end": "3558900"
  },
  {
    "text": "to interrupt me um really open on discussing that all of that with you so thank you",
    "start": "3558900",
    "end": "3567000"
  },
  {
    "text": "foreign [Applause]",
    "start": "3567000",
    "end": "3573739"
  }
]