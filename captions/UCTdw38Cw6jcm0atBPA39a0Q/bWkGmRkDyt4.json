[
  {
    "text": "all right well I guess it's about time to get started on a minute late this this talk may run a little bit over I",
    "start": "2120",
    "end": "8400"
  },
  {
    "text": "won't be offended if people want to get up at the end basically I'm gonna go through a bunch of things and the last",
    "start": "8400",
    "end": "13469"
  },
  {
    "text": "thing I'm going to talk about our people people's concerns I put it in quotes because the concerns are really not",
    "start": "13469",
    "end": "21060"
  },
  {
    "text": "something you need to be concerned about so we should get through everything but the concerns in time and if you're not",
    "start": "21060",
    "end": "26699"
  },
  {
    "text": "concerned then you don't have to worry about it so we'll we'll go in that order anyway",
    "start": "26699",
    "end": "31710"
  },
  {
    "text": "my name is John Leykis I work at Bloomberg and my mission in life seems is to convince people that was that",
    "start": "31710",
    "end": "40050"
  },
  {
    "text": "allocators are useful things and I think that in 2017 I made the rounds and I",
    "start": "40050",
    "end": "45750"
  },
  {
    "text": "think I made a compelling argument that performance alone is enough for people to at least take them seriously and the",
    "start": "45750",
    "end": "52590"
  },
  {
    "text": "purpose of this talk is to ask the very reasonable question ok allocators do provide value in many",
    "start": "52590",
    "end": "59489"
  },
  {
    "text": "ways but do they give you enough value to justify the cost of having an",
    "start": "59489",
    "end": "64978"
  },
  {
    "text": "alligator or where infrastructure because make no mistake there is a cost associated with having everybody be",
    "start": "64979",
    "end": "73409"
  },
  {
    "text": "aware of alligators kind of the same way there is with Const right if you have some people who use Const and some",
    "start": "73409",
    "end": "78990"
  },
  {
    "text": "people who don't it's not very useful you kind of have to at some level say",
    "start": "78990",
    "end": "84229"
  },
  {
    "text": "this library is constant because if it's not it's not useful and alligators are",
    "start": "84229",
    "end": "90329"
  },
  {
    "text": "kind of like that in fact Matt Austin back many many years ago who has a distinct distaste for alligators because",
    "start": "90329",
    "end": "97770"
  },
  {
    "text": "of the way they were sort of jammed into C++ 98 and I don't blame him after reading I was rereading his book to",
    "start": "97770",
    "end": "104100"
  },
  {
    "text": "properly reference him in my upcoming book and you know he makes I can see why",
    "start": "104100",
    "end": "109590"
  },
  {
    "text": "he's a little bitter but we'll get to that so here's the copyright notice",
    "start": "109590",
    "end": "116630"
  },
  {
    "text": "here's the abstract but you're here so don't worry about this this is for the people viewing at home and the privacy",
    "start": "116630",
    "end": "122460"
  },
  {
    "text": "of their own house or work so the current state of affairs we're going to",
    "start": "122460",
    "end": "127799"
  },
  {
    "text": "talk about you know local alligators do give you good performance we know this",
    "start": "127799",
    "end": "133580"
  },
  {
    "text": "lake owes CPP now 17 we know this from in fact a really good talk to look at is",
    "start": "133580",
    "end": "141330"
  },
  {
    "text": "the MTG C++ talk it's two hours and it provides a really good view of what's",
    "start": "141330",
    "end": "148140"
  },
  {
    "text": "going on so even even better than than that not not even CPP I mean CPP now is",
    "start": "148140",
    "end": "156300"
  },
  {
    "text": "fine but I think as I said even better is meeting C++ there are real-world costs and there are also some collateral",
    "start": "156300",
    "end": "164370"
  },
  {
    "text": "benefits and just because we have performance doesn't mean we should forget about all the other good things",
    "start": "164370",
    "end": "169530"
  },
  {
    "text": "that having an alligator aware software infrastructure give us and then there",
    "start": "169530",
    "end": "175110"
  },
  {
    "text": "are some concerns also known as Fudd and we want to deal with those because it's",
    "start": "175110",
    "end": "181980"
  },
  {
    "text": "not that I mean people do have concerns but then they need to be addressed it's not totally unreasonable to have",
    "start": "181980",
    "end": "187470"
  },
  {
    "text": "concerns even if they're not really real ok so what are we going to do today",
    "start": "187470",
    "end": "195120"
  },
  {
    "text": "present for alligator aware software styles we're going to separate real from",
    "start": "195120",
    "end": "201329"
  },
  {
    "text": "imagined costs discuss some important collateral benefits of alligator awareness and address some common",
    "start": "201329",
    "end": "207299"
  },
  {
    "text": "concerns surrounding alligator awareness advocate for supporting alligator aware",
    "start": "207299",
    "end": "213450"
  },
  {
    "text": "software infrastructure today and then we're going to make we're also going to",
    "start": "213450",
    "end": "219150"
  },
  {
    "text": "make a business case using a detailed analogy but then we're going to look at something that might maybe address the",
    "start": "219150",
    "end": "227639"
  },
  {
    "text": "costs and keep all the benefits and if we could do that then just becomes more",
    "start": "227639",
    "end": "233489"
  },
  {
    "text": "like a no-brainer but today we're going to talk about the real cost benefit of what you're doing stuff is today so",
    "start": "233489",
    "end": "240000"
  },
  {
    "text": "let's do that so there's the introduction so dynamic memory",
    "start": "240000",
    "end": "245130"
  },
  {
    "text": "allocation is important right new delete is usually adequate but custom",
    "start": "245130",
    "end": "250530"
  },
  {
    "text": "allocation is sometimes advantageous and sometimes it's absolutely necessary",
    "start": "250530",
    "end": "255560"
  },
  {
    "text": "implementing custom allocation is costly and so we're motivated now to address",
    "start": "255560",
    "end": "262650"
  },
  {
    "text": "the costs of creating custom memory allocation today and soon we'd like to find a way",
    "start": "262650",
    "end": "271710"
  },
  {
    "text": "where we can do much better so there are two approaches to custom memory allocation one is just write the data",
    "start": "271710",
    "end": "280770"
  },
  {
    "text": "structure yourself every time just do it okay we know how to do that that doesn't",
    "start": "280770",
    "end": "286770"
  },
  {
    "text": "scale that just is and whenever you do that there's an Associated maintenance burden and you get the best possible",
    "start": "286770",
    "end": "294569"
  },
  {
    "text": "performance because you're doing exactly what you need and there's a high development maintenance cost we know",
    "start": "294569",
    "end": "299849"
  },
  {
    "text": "this and the other possibility is to do a whole lot of work creating a software",
    "start": "299849",
    "end": "305940"
  },
  {
    "text": "infrastructure that has allocator awareness built into it there's a huge",
    "start": "305940",
    "end": "311460"
  },
  {
    "text": "cost to that but the reason we have software infrastructure departments is to factor out the cost of software that",
    "start": "311460",
    "end": "319500"
  },
  {
    "text": "is reused so that applications can go faster and be more reliable that is what",
    "start": "319500",
    "end": "325590"
  },
  {
    "text": "software infrastructure does so yes there's a cost but but there's a reason",
    "start": "325590",
    "end": "330900"
  },
  {
    "text": "for that it gives you nearly the best possible performance in almost every case there are some outliers where a",
    "start": "330900",
    "end": "338310"
  },
  {
    "text": "full custom data structure will will still be the right answer but they become extremely rare and worthwhile as",
    "start": "338310",
    "end": "347849"
  },
  {
    "text": "opposed to whenever I need some additional performance my only choice is to go for full custom ok the cost of",
    "start": "347849",
    "end": "355080"
  },
  {
    "text": "using allocator aware components for the application developer is much much much",
    "start": "355080",
    "end": "361409"
  },
  {
    "text": "much cheaper there is a cost for creating the infrastructure but when you're an application developer the",
    "start": "361409",
    "end": "367349"
  },
  {
    "text": "incremental cost of using an aligator aware infrastructure is almost zero",
    "start": "367349",
    "end": "374550"
  },
  {
    "text": "there's some collateral benefits that we're going to talk about so here's my airline analogy and this is really an",
    "start": "374550",
    "end": "381300"
  },
  {
    "text": "economics talk I mean it's not really a technical it is but it isn't but this is an economics talk because I want people",
    "start": "381300",
    "end": "387419"
  },
  {
    "text": "to understand that that there is a trade-off and there is price",
    "start": "387419",
    "end": "394469"
  },
  {
    "text": "discrimination going on here we're getting we're getting something almost for nothing and we want to see what",
    "start": "394469",
    "end": "400380"
  },
  {
    "text": "we're getting so imagine an airline you have first-class best possible service and you have",
    "start": "400380",
    "end": "405899"
  },
  {
    "text": "economy cheapest possible flight right those are two ends now that's the way it",
    "start": "405899",
    "end": "412769"
  },
  {
    "text": "was in the beginning and from a client perspective this is what you got think",
    "start": "412769",
    "end": "418979"
  },
  {
    "text": "about as a plane right there's the front small first-class and there's the rest of the plane coach but people are not",
    "start": "418979",
    "end": "428580"
  },
  {
    "text": "binary right there are people in the middle there there's there's some need for some variation beyond I'm gonna pay",
    "start": "428580",
    "end": "436639"
  },
  {
    "text": "$200 for a ticket or I'm gonna pay $5,000 for a ticket right there's something in between please so Airlines",
    "start": "436639",
    "end": "444899"
  },
  {
    "text": "wisely said look there's this there's this curve there's this utility curve so",
    "start": "444899",
    "end": "450149"
  },
  {
    "text": "if you imagine if you take the population of people and you sort them with how much they value service on an",
    "start": "450149",
    "end": "457949"
  },
  {
    "text": "airline wider seats better food whatever whatever first-class means if you sort",
    "start": "457949",
    "end": "465029"
  },
  {
    "text": "the people based on how much they value this you'll get a curve that looks something like this some people really",
    "start": "465029",
    "end": "472199"
  },
  {
    "text": "really really really value it and some people don't the other thing is you have to take an",
    "start": "472199",
    "end": "477269"
  },
  {
    "text": "out some people have infinite money and the people that have infinite money will go first class because they can't but if",
    "start": "477269",
    "end": "482339"
  },
  {
    "text": "you if you take that off the table there is a range similarly if you look at it this way magic people who are developing",
    "start": "482339",
    "end": "490319"
  },
  {
    "text": "software some people will value performance or other things more and",
    "start": "490319",
    "end": "496499"
  },
  {
    "text": "more and more some people could care less and some people really care about it that same curve exists at one end of",
    "start": "496499",
    "end": "503249"
  },
  {
    "text": "the spectrum somebody doesn't care about performance at all at the other end of the spectrum I have to have it or I",
    "start": "503249",
    "end": "509129"
  },
  {
    "text": "can't do my job and again there's a curve we all agree there's some sort of curve and this is standing in for that",
    "start": "509129",
    "end": "515008"
  },
  {
    "text": "curve okay so now with that analogy in mind there is this point let's call it",
    "start": "515009",
    "end": "520110"
  },
  {
    "text": "alpha okay so this alpha point below which we're going to go economy we're",
    "start": "520110",
    "end": "526230"
  },
  {
    "text": "going to use what we got and above which we're gonna go first-class we're gonna write our own does that make sense have",
    "start": "526230",
    "end": "534059"
  },
  {
    "text": "I said any that you could possibly argue with so far probably not because I haven't said anything okay now here we have this cost",
    "start": "534059",
    "end": "542730"
  },
  {
    "text": "thing the cost of writing your own is",
    "start": "542730",
    "end": "547770"
  },
  {
    "text": "expensive see that that's the cost of",
    "start": "547770",
    "end": "553770"
  },
  {
    "text": "writing your own it's go from zero to oh my goodness right at some point alpha",
    "start": "553770",
    "end": "559920"
  },
  {
    "text": "you're willing to pay that cost and that cost is the same pretty much no matter how much benefit you get from it once",
    "start": "559920",
    "end": "566730"
  },
  {
    "text": "you exceed the threshold where you would want to write your own the fact that you really want to write your own err you",
    "start": "566730",
    "end": "572610"
  },
  {
    "text": "really really want to write your own doesn't matter you've chosen to write your own does that make sense it's a",
    "start": "572610",
    "end": "578010"
  },
  {
    "text": "binary function okay so now this is the",
    "start": "578010",
    "end": "583830"
  },
  {
    "text": "potential incremental benefit the people that didn't write their own get nothing the people that write their own get the",
    "start": "583830",
    "end": "590820"
  },
  {
    "text": "area under the green curve do you see what I'm saying that's the value they get out of spending the money okay so",
    "start": "590820",
    "end": "598470"
  },
  {
    "text": "now that is goodness green is good okay",
    "start": "598470",
    "end": "603930"
  },
  {
    "text": "now business class and premium economy what's that there are people that are",
    "start": "603930",
    "end": "609240"
  },
  {
    "text": "willing to pay a little bit more for a little bit better seat and a free drink they'll pay a little bit more like",
    "start": "609240",
    "end": "615990"
  },
  {
    "text": "twenty nine dollars okay I'll pay $29 that's fine I'm not gonna pay 5,000 but",
    "start": "615990",
    "end": "622230"
  },
  {
    "text": "I'll pay twenty nine then there are people that I ain't gonna pay 5,000 my company's budget is $1,500 or my",
    "start": "622230",
    "end": "629370"
  },
  {
    "text": "company's budget is $900 I can pay 900 not two hundred nine hundred okay so",
    "start": "629370",
    "end": "635700"
  },
  {
    "text": "there's that so now we have a new grade of service and we'll call it business class for premium economy what does that",
    "start": "635700",
    "end": "642810"
  },
  {
    "text": "look like well let's say that the point at which someone's willing to spend twenty nine dollars is here we'll call",
    "start": "642810",
    "end": "648750"
  },
  {
    "text": "it alpha - and then there's a point that says I don't care what you do I'm gonna",
    "start": "648750",
    "end": "656100"
  },
  {
    "text": "spend the five thousand because I need the best nothing you give me short of",
    "start": "656100",
    "end": "661170"
  },
  {
    "text": "the best will do and we'll call that alpha plus and now I've segmented my cabin in",
    "start": "661170",
    "end": "667010"
  },
  {
    "text": "four sections so see how it looks now I have first class which has gotten smaller because and if you ever look at",
    "start": "667010",
    "end": "673550"
  },
  {
    "text": "by the way these planes they're like six seats in first class then there's there's business class which I fly which",
    "start": "673550",
    "end": "680330"
  },
  {
    "text": "of course which is which is much bigger and is much cheaper than first class but",
    "start": "680330",
    "end": "686000"
  },
  {
    "text": "it's still more expensive than economy right then there's premium economy which is much better than economy and it's only a",
    "start": "686000",
    "end": "693680"
  },
  {
    "text": "little more expensive but thank goodness Mike because I have to fly like 10 hours on the stupid plane and I want to sleep",
    "start": "693680",
    "end": "698960"
  },
  {
    "text": "they I actually get a reclining bed so that's good I really needed it this time I don't always if I'm not sleeping I can",
    "start": "698960",
    "end": "704750"
  },
  {
    "text": "do fine in Premium Economy but anyway so we still have this curve and now we have a bigger chunk of this curve to benefit",
    "start": "704750",
    "end": "710960"
  },
  {
    "text": "from because the cost the cost of premium economy and business class here",
    "start": "710960",
    "end": "716930"
  },
  {
    "text": "is the same cost it's using an alligator aware infrastructure that incremental",
    "start": "716930",
    "end": "723050"
  },
  {
    "text": "cost is very small compared to not using it it's not zero but it's something",
    "start": "723050",
    "end": "728330"
  },
  {
    "text": "sohere's premium economy here's business class here's the cost the cost of if you don't care at all if you could care less",
    "start": "728330",
    "end": "734810"
  },
  {
    "text": "then there's no incremental cost at all if you care a little bit then you start",
    "start": "734810",
    "end": "740900"
  },
  {
    "text": "using this alligator where because you care a little bit it's like yeah yeah it's there I'll use it and then oh I",
    "start": "740900",
    "end": "747890"
  },
  {
    "text": "care a lot I would have yeah I would have rolled my oh look at although I'm definitely using it I don't I mean come",
    "start": "747890",
    "end": "753530"
  },
  {
    "text": "on for that last 3% do I really need no and then there are those crazy people that are gonna spend the money anyway so",
    "start": "753530",
    "end": "759920"
  },
  {
    "text": "now you see we have segmented this into three not two this is price discrimination big time and so now the",
    "start": "759920",
    "end": "767780"
  },
  {
    "text": "people that we're going to roll their own they still get all their benefit they're rolling their own and there's a",
    "start": "767780",
    "end": "773030"
  },
  {
    "text": "cost associated with it and then the people that didn't have to roll their",
    "start": "773030",
    "end": "778730"
  },
  {
    "text": "own still get the benefit because they're getting their utility because essentially everything they wanted they're getting and then the really cool",
    "start": "778730",
    "end": "785900"
  },
  {
    "text": "thing is that there are people that would not have done it they wouldn't have taken advantage because it was a",
    "start": "785900",
    "end": "791240"
  },
  {
    "text": "good idea I really want but I didn't have time I had would have had to do 10 I just couldn't do it",
    "start": "791240",
    "end": "796450"
  },
  {
    "text": "but because it was almost for free they got it they did it they chose to do it",
    "start": "796450",
    "end": "802990"
  },
  {
    "text": "and then they're people that still don't care so this is the this is the model",
    "start": "802990",
    "end": "808540"
  },
  {
    "text": "now this is the model when you have an alligator or we're infrastructure and so for application developers it's great",
    "start": "808540",
    "end": "815580"
  },
  {
    "text": "because you get it's like it's like you get almost everything for almost nothing who could complain the trouble is is",
    "start": "815580",
    "end": "822520"
  },
  {
    "text": "that the companies that that do this they have the infrastructure group that they have to pay for and the",
    "start": "822520",
    "end": "829000"
  },
  {
    "text": "infrastructure group it's a lot more it's a lot harder to write this stuff than to not write it and when I say a",
    "start": "829000",
    "end": "835630"
  },
  {
    "text": "lot harder I'm exaggerating it's not that much harder but it's harder you have to you have to write it you have to",
    "start": "835630",
    "end": "841120"
  },
  {
    "text": "test it you have to document it it's it's more effort for infrastructure people that's it but for users it's not",
    "start": "841120",
    "end": "850029"
  },
  {
    "text": "that hard look at all the savings we get this is money saved this is time saved by application developers they got the",
    "start": "850029",
    "end": "856930"
  },
  {
    "text": "benefit they didn't need to write their own if they had enough time to write two of their own data structures now they",
    "start": "856930",
    "end": "864250"
  },
  {
    "text": "can write 20 because they'll write one that they really needed to and then the",
    "start": "864250",
    "end": "869350"
  },
  {
    "text": "rest they could get almost all the benefit for all these others so the utility that they get out of their",
    "start": "869350",
    "end": "875050"
  },
  {
    "text": "development time is enormous now I don't think people properly understand that's why I'm here talking",
    "start": "875050",
    "end": "880720"
  },
  {
    "text": "how huge that is I think the problem also is is that because alligators have",
    "start": "880720",
    "end": "886510"
  },
  {
    "text": "been so difficult to use up until now we haven't really seen the benefit of them",
    "start": "886510",
    "end": "891700"
  },
  {
    "text": "but things are changing so that's one of the good good things but anyway so this is the incremental cost savings and",
    "start": "891700",
    "end": "898990"
  },
  {
    "text": "that's really important now what about this this thing here you see these these points here on the curve where the cost",
    "start": "898990",
    "end": "905589"
  },
  {
    "text": "function touches the incremental value so here's something interesting these",
    "start": "905589",
    "end": "911260"
  },
  {
    "text": "are different axes and those crossing points mean absolutely nothing nothing",
    "start": "911260",
    "end": "916720"
  },
  {
    "text": "at all so forget about them they mean nothing what we're saying here what's interesting is is that there are these",
    "start": "916720",
    "end": "922630"
  },
  {
    "text": "regions and what we care about is that in this region you're getting the area under the curve",
    "start": "922630",
    "end": "929910"
  },
  {
    "text": "the utility curve that you didn't get before in the case of the light green and in the case of the dark green you",
    "start": "929910",
    "end": "937540"
  },
  {
    "text": "are going to get that utility anyway but you're saving that cost so you're either getting more utility out of your",
    "start": "937540",
    "end": "943960"
  },
  {
    "text": "developers or you're getting less cost out of your developers either way you look at it there's a cost-benefit",
    "start": "943960",
    "end": "950610"
  },
  {
    "text": "equation to be considered here okay all right so which airline do you think I",
    "start": "950610",
    "end": "959560"
  },
  {
    "text": "fly by the way I'm just curious why United American Airlines AAA and I use",
    "start": "959560",
    "end": "972730"
  },
  {
    "text": "my American advantage card and you can consider this an a a meeting just want",
    "start": "972730",
    "end": "978400"
  },
  {
    "text": "you to have a mnemonic all right okay so there's another picture this is",
    "start": "978400",
    "end": "985390"
  },
  {
    "text": "one of the pictures in the paper that I'm working on and just to give you an idea when it when it's sort of in shades",
    "start": "985390",
    "end": "991330"
  },
  {
    "text": "with it's not all colored but all right any discussion of this by the way this is really the important part of the talk",
    "start": "991330",
    "end": "996580"
  },
  {
    "text": "is the economics of it and the rest of it I'll just sort of fly through as I say we might go over by a little bit but",
    "start": "996580",
    "end": "1001740"
  },
  {
    "text": "I want to make sure you guys understand any thoughts discussion okay so there",
    "start": "1001740",
    "end": "1010230"
  },
  {
    "text": "could be a bunch of questions but I haven't thought of them yet so I'll leave them out for now we'll go on to the next one so styles of allocators",
    "start": "1010230",
    "end": "1016850"
  },
  {
    "text": "let's talk about the three models so the first one was the C++ 11 the second one",
    "start": "1016850",
    "end": "1025589"
  },
  {
    "text": "is PMR also known as C++ 17 and then there is the one that I'm going to sort",
    "start": "1025589",
    "end": "1031020"
  },
  {
    "text": "of allude to but is actually going to be talked about by Alistair and Pablo at CPP Con in it really that's in like two",
    "start": "1031020",
    "end": "1038459"
  },
  {
    "text": "weeks so cool stuff but what we have today are the sleepless eleven model in",
    "start": "1038459",
    "end": "1044220"
  },
  {
    "text": "the C++ 17 model there for interface styles there's the superfluous 11 style",
    "start": "1044220",
    "end": "1049680"
  },
  {
    "text": "there's the BDE which is our internal one and C++ 17",
    "start": "1049680",
    "end": "1055980"
  },
  {
    "text": "style which are p.m. are based a polymorphic memory resource and then",
    "start": "1055980",
    "end": "1061200"
  },
  {
    "text": "there's this third one which is again is its own thing and it to internally would be PMR based so there are as I said",
    "start": "1061200",
    "end": "1069060"
  },
  {
    "text": "they're sort of three models we're going to talk about them the the pros of the first one the C++ 11 one it is compile",
    "start": "1069060",
    "end": "1075600"
  },
  {
    "text": "time centric the biggest problem with it well the best best thing about it is it",
    "start": "1075600",
    "end": "1081090"
  },
  {
    "text": "has absolutely no overhead and it's the most flexible so you can use it for whatever you want if you want to use it",
    "start": "1081090",
    "end": "1087270"
  },
  {
    "text": "for for shared memory for anything at all life is great the trouble is it affects the type of",
    "start": "1087270",
    "end": "1093600"
  },
  {
    "text": "the object and you don't have a handle that you can grab on to and pull something out so if I have for example",
    "start": "1093600",
    "end": "1098940"
  },
  {
    "text": "an alligator and I want to be able to say what alligator do you use the C++ 11",
    "start": "1098940",
    "end": "1105750"
  },
  {
    "text": "model requires you to be a template it's it's ugly it's not friendly it's very",
    "start": "1105750",
    "end": "1112170"
  },
  {
    "text": "very hard to write and basically no one will use it so it was a necessary first step to get people warmed up the second",
    "start": "1112170",
    "end": "1118980"
  },
  {
    "text": "one which is moderate cost is the polymorphic memory resource in this one you the pros the great news is you don't",
    "start": "1118980",
    "end": "1127290"
  },
  {
    "text": "have to change the type of the object basically what you're doing is you're passing in a base class an abstract",
    "start": "1127290",
    "end": "1133740"
  },
  {
    "text": "interface and-and-and-and-and that the actual type of the allocator is the",
    "start": "1133740",
    "end": "1140400"
  },
  {
    "text": "derived type and this works extremely well because it doesn't affect the type of the object it doesn't invade it so a",
    "start": "1140400",
    "end": "1146340"
  },
  {
    "text": "vector of mana alligator and a vector of your alligator are the same C++ type and that's a great thing the cons it's not",
    "start": "1146340",
    "end": "1157080"
  },
  {
    "text": "zero runtime and spacial overhead but for all practical purposes it might as",
    "start": "1157080",
    "end": "1163770"
  },
  {
    "text": "well be we'll talk about that the bigger one is that for an infrastructure group there's significant development right",
    "start": "1163770",
    "end": "1170940"
  },
  {
    "text": "now to plumb the the the alligators so",
    "start": "1170940",
    "end": "1176820"
  },
  {
    "text": "that when you for example if we implement our own container class we need to make sure that the the alligator",
    "start": "1176820",
    "end": "1183090"
  },
  {
    "text": "is propagated to the contained elements and that requires writing code that requires figuring out whether the",
    "start": "1183090",
    "end": "1188940"
  },
  {
    "text": "contained element needs an alligator and where it goes and so on and so forth and so can it be done absolutely do we",
    "start": "1188940",
    "end": "1195250"
  },
  {
    "text": "do it all the time sure but you need to do it it's more work turns out it's not",
    "start": "1195250",
    "end": "1200320"
  },
  {
    "text": "that much more work and for most cases it's pretty routine but you need to do it so that's the con then the PMR style",
    "start": "1200320",
    "end": "1210250"
  },
  {
    "text": "the Sol I just described is one that's been around for 20 years the PM our style of seedless 117 is the same model",
    "start": "1210250",
    "end": "1216700"
  },
  {
    "text": "it just wraps that pointer that base glass pointer in a class so it looks a",
    "start": "1216700",
    "end": "1222519"
  },
  {
    "text": "little bit more like C++ looks where you have an allocator object but really the",
    "start": "1222519",
    "end": "1227649"
  },
  {
    "text": "object is nothing but a pointer there's a small syntactic difference it doesn't really matter and we expect to",
    "start": "1227649",
    "end": "1236110"
  },
  {
    "text": "adopt the the C++ 17 model because we want to be interoperable with the world",
    "start": "1236110",
    "end": "1242500"
  },
  {
    "text": "and we want the world to adopt the C++ 17 polymorphic model by default because",
    "start": "1242500",
    "end": "1247929"
  },
  {
    "text": "we want them to be compatible with us so I hope that's not asking too much if everybody could please plan on",
    "start": "1247929",
    "end": "1253990"
  },
  {
    "text": "converting to PMR containers instead of the default ones if that's not too much",
    "start": "1253990",
    "end": "1259149"
  },
  {
    "text": "to ask it would be really nice because that will save us some time when we get to the final model which we'll talk",
    "start": "1259149",
    "end": "1265360"
  },
  {
    "text": "about where we're going to relieve you of the responsibility of having to do work and we'll just do it for you but",
    "start": "1265360",
    "end": "1270610"
  },
  {
    "text": "that's later all right so language support for P and more style allocators this is something that we're",
    "start": "1270610",
    "end": "1277659"
  },
  {
    "text": "thinking of doing and we're going to talk about it's at CPP Con this year and we're gonna keep talking about it which",
    "start": "1277659",
    "end": "1283299"
  },
  {
    "text": "is language support for allocator awareness where instead of you're having",
    "start": "1283299",
    "end": "1288759"
  },
  {
    "text": "to write it as part of library code you can simply tell the compiler make this",
    "start": "1288759",
    "end": "1293769"
  },
  {
    "text": "allocator aware and that's it so that's it that'd be nice",
    "start": "1293769",
    "end": "1299350"
  },
  {
    "text": "more on that later it means that we're would be very little if any plumbing",
    "start": "1299350",
    "end": "1304860"
  },
  {
    "text": "compiler generated constructors would be taking care of all of the syntactic",
    "start": "1304860",
    "end": "1310570"
  },
  {
    "text": "anomalies that happen because you have to write your own stuff would be addressed so basically all of the",
    "start": "1310570",
    "end": "1316539"
  },
  {
    "text": "annoyance would be gone it's a lot like virtual function tables right you have a",
    "start": "1316539",
    "end": "1323139"
  },
  {
    "text": "virtual function pointer and your object that's it so what do you care you said",
    "start": "1323139",
    "end": "1328520"
  },
  {
    "text": "something's virtual you got a pointer alright and it's good to be about like that because there's a lot of similarity",
    "start": "1328520",
    "end": "1335150"
  },
  {
    "text": "between the runtime type of an object as determined by its virtual pointer and the runtime type of an object as",
    "start": "1335150",
    "end": "1342020"
  },
  {
    "text": "determined by its memory allocator because both of them are inherent to the object and once you create an object",
    "start": "1342020",
    "end": "1347810"
  },
  {
    "text": "with its v tab and its allocator that doesn't change for the life of the object which is something people may not",
    "start": "1347810",
    "end": "1354740"
  },
  {
    "text": "know but they need to know an object never changes its allocator and it never changes it to be table okay so any a",
    "start": "1354740",
    "end": "1365240"
  },
  {
    "text": "style that we use is going to have the same performance implications so it doesn't really matter so discussion on",
    "start": "1365240",
    "end": "1370520"
  },
  {
    "text": "that okay so I still didn't have any",
    "start": "1370520",
    "end": "1377900"
  },
  {
    "text": "questions onward so the next thing is performance benefits well we talked about",
    "start": "1377900",
    "end": "1384170"
  },
  {
    "text": "performance benefits in the in the C++ meeting C++ and CPP Khan 2017 and in",
    "start": "1384170",
    "end": "1391820"
  },
  {
    "text": "fact somebody came back in 2018 at ACC you had seen my talk there had went to",
    "start": "1391820",
    "end": "1397100"
  },
  {
    "text": "their company and actually started using allocators the way we discussed and did",
    "start": "1397100",
    "end": "1402890"
  },
  {
    "text": "a little lightening talk saying that they had improved their overall performance by 20% over their entire",
    "start": "1402890",
    "end": "1407960"
  },
  {
    "text": "product line and so that was their lightening talk and I was like nice made me feel good so there really are",
    "start": "1407960",
    "end": "1414320"
  },
  {
    "text": "benefits for performance and we know it internally at Bloomberg Paul you're gonna vouch for it right falls back",
    "start": "1414320",
    "end": "1420260"
  },
  {
    "text": "there he's a he's a happy client of allocators since what 2005 so the kind",
    "start": "1420260",
    "end": "1425450"
  },
  {
    "text": "that anyway so we have we have people who are very happy to use memory allocators and once you start using them",
    "start": "1425450",
    "end": "1432530"
  },
  {
    "text": "you would be loathe to give them up because they really do give you the kind of advantage that you want so anyway",
    "start": "1432530",
    "end": "1440480"
  },
  {
    "text": "they're there there are lots of performance gains to be had and and we",
    "start": "1440480",
    "end": "1446060"
  },
  {
    "text": "know that and the question is which is you know is it is it more important to",
    "start": "1446060",
    "end": "1452150"
  },
  {
    "text": "speed up the the allocation and de-allocation of memory or is it more",
    "start": "1452150",
    "end": "1457580"
  },
  {
    "text": "important to allocate memory that's Cole okay today that it works faster during long periods of time so which do",
    "start": "1457580",
    "end": "1465810"
  },
  {
    "text": "you think intuitively is the more important one I mean they're both important but one of them has orders of",
    "start": "1465810",
    "end": "1472890"
  },
  {
    "text": "magnitude order of magnitude speed differences whereas the other one has multiplicative factor which do you think",
    "start": "1472890",
    "end": "1480180"
  },
  {
    "text": "is the one that's orders of magnitude or order of magnitude the second one so locality if you have a system where",
    "start": "1480180",
    "end": "1487050"
  },
  {
    "text": "memory is allowed to diffuse over your entire virtual memory and you run the system long enough that has anybody ever",
    "start": "1487050",
    "end": "1492570"
  },
  {
    "text": "seen this where systems slow down over time and you have to sort of reboot them that is memory diffusion and allocators",
    "start": "1492570",
    "end": "1501810"
  },
  {
    "text": "local allocators abate that they they attenuate that because they don't allow the memory to flow outside of their",
    "start": "1501810",
    "end": "1508290"
  },
  {
    "text": "local pools if you do things right you can retain the newness the freshness of the system and it doesn't sort of",
    "start": "1508290",
    "end": "1514950"
  },
  {
    "text": "degrade over time through diffusion do not confuse diffusion with fragmentation fragmentation has to do with allocators",
    "start": "1514950",
    "end": "1521580"
  },
  {
    "text": "that that that are coalescing and and all of that kind of stuff and there's plenty of memory but it's just not in",
    "start": "1521580",
    "end": "1527220"
  },
  {
    "text": "the right place diffusion is something that happens where the memory spreads out over the system and so when you go",
    "start": "1527220",
    "end": "1534450"
  },
  {
    "text": "to access something repeatedly the data is spread across many many many pages",
    "start": "1534450",
    "end": "1539580"
  },
  {
    "text": "and you can't fit all of the pages into what into resident memory or you can't fit all of the data items into cache",
    "start": "1539580",
    "end": "1546950"
  },
  {
    "text": "there are two different things having to do with like that there's sort of two different levels of this so we want to",
    "start": "1546950",
    "end": "1553650"
  },
  {
    "text": "take advantage of keeping things close together and there are all sorts of ways where that manifests all right so short",
    "start": "1553650",
    "end": "1560760"
  },
  {
    "text": "running programs we want faster allocations long running programs we want to improve memory access so common",
    "start": "1560760",
    "end": "1569760"
  },
  {
    "text": "usage pattern is to build up a data structure with fewer no deletes access it briefly and tear it down and we use a",
    "start": "1569760",
    "end": "1575790"
  },
  {
    "text": "monotonic allocator for that that's an allocated that basically allocates very quickly never gives back any memory when",
    "start": "1575790",
    "end": "1582690"
  },
  {
    "text": "you destroy the allocator everything goes away if we're repeating it the allocating and deallocating a few",
    "start": "1582690",
    "end": "1588030"
  },
  {
    "text": "distinct size blocks we have a multi pool allocator for that it's perfect for that because it just goes and comes and goes as",
    "start": "1588030",
    "end": "1595170"
  },
  {
    "text": "quickly as you could imagine and this is a great thing for that if you know that that's going on if you need to destroy a",
    "start": "1595170",
    "end": "1602520"
  },
  {
    "text": "whole bunch of objects at once both a monotonic and a memory allocator or managed alligators so you can create a",
    "start": "1602520",
    "end": "1609150"
  },
  {
    "text": "whole bunch of objects then instead of destroying them individually you can just pull the plug and make them go away",
    "start": "1609150",
    "end": "1615690"
  },
  {
    "text": "without destroying any of them and as long as they don't manage another resource that's no problem so this is",
    "start": "1615690",
    "end": "1621600"
  },
  {
    "text": "stuff that you can do and obviously this is not the first thing you learn when",
    "start": "1621600",
    "end": "1627330"
  },
  {
    "text": "you're working on C++ but when you become a professional and you're doing",
    "start": "1627330",
    "end": "1632340"
  },
  {
    "text": "things in an infrastructure environment and you do want to spend enough time to make it as fast as possible these are",
    "start": "1632340",
    "end": "1638580"
  },
  {
    "text": "the kinds of things that you can do and so we would want to do these kinds of things and we want to package this up so",
    "start": "1638580",
    "end": "1644100"
  },
  {
    "text": "that people could try to use these kinds of things so anyway this is this is a",
    "start": "1644100",
    "end": "1649980"
  },
  {
    "text": "bunch of other things I mean caching is one of the issue long-running programs I talked about diffusion loss and locality",
    "start": "1649980",
    "end": "1656910"
  },
  {
    "text": "is typically the dominant factor for long-running programs and local",
    "start": "1656910",
    "end": "1662370"
  },
  {
    "text": "allocators also as I said attenuate diffusion okay local alligators are also awesome for",
    "start": "1662370",
    "end": "1669180"
  },
  {
    "text": "threading and each distinct thread could have its own alligator that's certainly",
    "start": "1669180",
    "end": "1674640"
  },
  {
    "text": "one way of doing things but another way of doing things is saying each subsystem has its own alligator now you can have a",
    "start": "1674640",
    "end": "1682260"
  },
  {
    "text": "thread pool and doesn't matter what thread is running the functionality the",
    "start": "1682260",
    "end": "1688170"
  },
  {
    "text": "memory used by the thread is local to the subsystem not local to the thread",
    "start": "1688170",
    "end": "1693270"
  },
  {
    "text": "and so that's another way we can get benefits we don't we can use we can take better advantage of thread pools that",
    "start": "1693270",
    "end": "1699270"
  },
  {
    "text": "way and we don't have to worry about funny things like destructive interference or fault sharing because we",
    "start": "1699270",
    "end": "1706890"
  },
  {
    "text": "can ensure that a single thread or a single a single thing not not this",
    "start": "1706890",
    "end": "1712950"
  },
  {
    "text": "particular thread but whatever thread is active is working on this cluster of data and all of this data will be",
    "start": "1712950",
    "end": "1719010"
  },
  {
    "text": "accessed by only one thread at one time and so we get that for free it's one of those well we",
    "start": "1719010",
    "end": "1725190"
  },
  {
    "text": "could do it by padding but padding makes things bigger and making things bigger means I can fit fewer things in cash and",
    "start": "1725190",
    "end": "1731310"
  },
  {
    "text": "so on or we can be smart about it keep them small and make sure that the right things are in cash and that's strictly",
    "start": "1731310",
    "end": "1737160"
  },
  {
    "text": "better so achieving Maxim Maxim performance is something that requires",
    "start": "1737160",
    "end": "1743220"
  },
  {
    "text": "global knowledge something that we need to know about we can't just sort of hope you have to we have to know how our",
    "start": "1743220",
    "end": "1749640"
  },
  {
    "text": "system is going to work and then we can do really smart things about our memory allocation having this solid",
    "start": "1749640",
    "end": "1755220"
  },
  {
    "text": "understanding of what the different alligator characteristics are is also critical so quick discussion about that",
    "start": "1755220",
    "end": "1761520"
  },
  {
    "text": "anybody want to comment okay questions",
    "start": "1761520",
    "end": "1766830"
  },
  {
    "text": "for questions on word costs so to be fair it doesn't cost users much but it",
    "start": "1766830",
    "end": "1776790"
  },
  {
    "text": "does cost a lot for an organization to create an alligator aware software",
    "start": "1776790",
    "end": "1782190"
  },
  {
    "text": "infrastructure now we have to start with the standard libraries we have PMR so we know that the standard feels it's",
    "start": "1782190",
    "end": "1788700"
  },
  {
    "text": "important now the next level up is our low level corporate libraries do we want",
    "start": "1788700",
    "end": "1794010"
  },
  {
    "text": "to make them allocator aware or not if we don't then we're kind of selling our",
    "start": "1794010",
    "end": "1800100"
  },
  {
    "text": "clients well your if you use any of our stuff it's like saying well the libraries contact but our stuff isn't so",
    "start": "1800100",
    "end": "1806640"
  },
  {
    "text": "if you use our stuff it's going to be awkward because our stuff doesn't take allocators and if you try and mix that with the standard so now you get this",
    "start": "1806640",
    "end": "1813180"
  },
  {
    "text": "tension this mismatch whatever so in our company the infrastructure all",
    "start": "1813180",
    "end": "1820200"
  },
  {
    "text": "of it is allocator aware and there are people that you know like it and don't",
    "start": "1820200",
    "end": "1825780"
  },
  {
    "text": "like in this and that whatever the people that are complaining the most of course are the people that are at that middle level where some of their clients",
    "start": "1825780",
    "end": "1834270"
  },
  {
    "text": "need it but not really but maybe but they were told by management they have to do it because maybe John thinks it's a good idea and but that's where it gets",
    "start": "1834270",
    "end": "1841740"
  },
  {
    "text": "to be tentative the only reason they're really complaining number one it takes",
    "start": "1841740",
    "end": "1846840"
  },
  {
    "text": "time and number two their clients get it wrong when their clients get it wrong they're the first line of defense and",
    "start": "1846840",
    "end": "1852780"
  },
  {
    "text": "that's a real cost people misusing allocators because like anything else",
    "start": "1852780",
    "end": "1858270"
  },
  {
    "text": "any power it can happen so there's enough front cost of creating this stuff and the",
    "start": "1858270",
    "end": "1864720"
  },
  {
    "text": "plumbing and all that we talked about that it's borne mostly by the library and infrastructure developers the",
    "start": "1864720",
    "end": "1870390"
  },
  {
    "text": "incremental cost of accost exploiting or ignoring or ignoring it that's pretty",
    "start": "1870390",
    "end": "1876450"
  },
  {
    "text": "small because really the only burden that you have is there's going to be some extra documentation in the function",
    "start": "1876450",
    "end": "1882240"
  },
  {
    "text": "that explains what the extra parameter is and so on and all you really have to do is ignore it if you want to use this",
    "start": "1882240",
    "end": "1890460"
  },
  {
    "text": "library and you don't care about allocators don't worry about it it's it's an opt-in kind of thing so",
    "start": "1890460",
    "end": "1897120"
  },
  {
    "text": "converting an allocator unaware class to a a4 typical classes is pretty",
    "start": "1897120",
    "end": "1903090"
  },
  {
    "text": "straightforward it involves effects the Constructors only you got to go in and make sure that all your data members are",
    "start": "1903090",
    "end": "1909480"
  },
  {
    "text": "set up once you've done that unless you're a particular kind of class that it's like a container or something",
    "start": "1909480",
    "end": "1915330"
  },
  {
    "text": "you're probably all good you have to worry about affording the arguments and stuff like that sure you might denote it",
    "start": "1915330",
    "end": "1923760"
  },
  {
    "text": "as being an alligator aware thing with a trait I mean it's not it's not rocket science non-typical classes are more challenging",
    "start": "1923760",
    "end": "1930750"
  },
  {
    "text": "like like containers for example and so STD complex you know you have to inter",
    "start": "1930750",
    "end": "1935940"
  },
  {
    "text": "interact with the anus of the element okay that's starting to get interesting vector well vector we have an append and",
    "start": "1935940",
    "end": "1942809"
  },
  {
    "text": "when we append something now we have to worry about a method that's not a constructor still if dealing with",
    "start": "1942809",
    "end": "1948480"
  },
  {
    "text": "allocation and so that's where it starts to get a little more interesting and you",
    "start": "1948480",
    "end": "1953520"
  },
  {
    "text": "need to learn a little more about what you need to do to make that work but again it's not rocket science yet and",
    "start": "1953520",
    "end": "1958710"
  },
  {
    "text": "then there are things like pear and pear is a bear because pear doesn't care",
    "start": "1958710",
    "end": "1964470"
  },
  {
    "text": "about allocators at all and yet it has to deal with alligators so if you're writing a class that it looks and smells",
    "start": "1964470",
    "end": "1971670"
  },
  {
    "text": "like pear or tupple and you try to do that in C++ 11 it's it's really annoying",
    "start": "1971670",
    "end": "1978330"
  },
  {
    "text": "fortunately we have pair and tupple in the standard and hopefully you don't have to write your own pair or tupple or",
    "start": "1978330",
    "end": "1985559"
  },
  {
    "text": "god forbid unordered container we have Alistair Meredith works Lumbergh who was testing our",
    "start": "1985559",
    "end": "1992060"
  },
  {
    "text": "implementation of unordered container for a year the thing is I mean it's extremely intricate with all of its",
    "start": "1992060",
    "end": "1999680"
  },
  {
    "text": "template policies and it's a very hard thing to make sure that it works and we",
    "start": "1999680",
    "end": "2006400"
  },
  {
    "text": "like to get things pretty right Alistair in particular so the load factor like most people would say you know okay if",
    "start": "2006400",
    "end": "2012940"
  },
  {
    "text": "the load factor is somewhere between I don't know a half and four we're good but he wants to know what happens when",
    "start": "2012940",
    "end": "2018730"
  },
  {
    "text": "the load factors like ten to the minus ninth and I'm like what are you doing but it's who knows so anyway we have to",
    "start": "2018730",
    "end": "2025000"
  },
  {
    "text": "check all of these things and it's it's just one of those very expensive things to do so hopefully you won't have to implement unordered container leave that",
    "start": "2025000",
    "end": "2032020"
  },
  {
    "text": "to the standard so for normal people doing normal things writing these things is is somewhat painful but it's not the",
    "start": "2032020",
    "end": "2039430"
  },
  {
    "text": "end of the world then you get to share pointer and shared pointer you really need to know what you're doing and I",
    "start": "2039430",
    "end": "2045520"
  },
  {
    "text": "wouldn't even go there in fact share pointer might be something that's outside of the scope of what can be",
    "start": "2045520",
    "end": "2050800"
  },
  {
    "text": "automated and you might just have some things that have to be hand written but this is the true outlier these things",
    "start": "2050800",
    "end": "2057490"
  },
  {
    "text": "that are not in a class category that are just their own beasts so maintenance",
    "start": "2057490",
    "end": "2063460"
  },
  {
    "text": "burden well there's more source code and we know that the amount of source code can range to let's say under 20% more",
    "start": "2063460",
    "end": "2070570"
  },
  {
    "text": "and that source code is boilerplate so it's the kind of thing that lends itself well to automation mostly it's kind of",
    "start": "2070570",
    "end": "2078340"
  },
  {
    "text": "like most things can be done automatically and we do most things automatically so that's good this is a",
    "start": "2078340",
    "end": "2083590"
  },
  {
    "text": "2017 statistic on our code base by the way requires more training because we",
    "start": "2083590",
    "end": "2088960"
  },
  {
    "text": "have to teach people how to do this there's an opportunity cost when Alastair is writing one of these things",
    "start": "2088960",
    "end": "2094360"
  },
  {
    "text": "he's not writing something else so if you're if you're writing an alligator or",
    "start": "2094360",
    "end": "2099580"
  },
  {
    "text": "we're really hard thing then you're not making money for the company in some other way so that's a real cost opportunity cost",
    "start": "2099580",
    "end": "2105880"
  },
  {
    "text": "exists other projects might be delayed so mitigating factors it lends itself to",
    "start": "2105880",
    "end": "2112120"
  },
  {
    "text": "automation we have a tool called BT verify we are looking into really",
    "start": "2112120",
    "end": "2118000"
  },
  {
    "text": "automating this with a language feature which means that you would not have to write this in library code it",
    "start": "2118000",
    "end": "2125930"
  },
  {
    "text": "would be done for you and that's an exciting project that we're working on yeah there is a substantial upfront cost",
    "start": "2125930",
    "end": "2133310"
  },
  {
    "text": "to developing a language feature that makes software allocator aware needless",
    "start": "2133310",
    "end": "2138830"
  },
  {
    "text": "to say and if you think about it the same is true for self-driving cars and companies like Google are spending and",
    "start": "2138830",
    "end": "2146770"
  },
  {
    "text": "uber they're spending a lot of money for the technology why because once you have",
    "start": "2146770",
    "end": "2155510"
  },
  {
    "text": "that technology think about it other things become much much cheaper so",
    "start": "2155510",
    "end": "2160750"
  },
  {
    "text": "there's enough front cost but there's a benefit so the long-term benefit and we",
    "start": "2160750",
    "end": "2167210"
  },
  {
    "text": "look we're long-term greedy at Bloomberg we like we like things to be cheap in the long run to be solid and dependable",
    "start": "2167210",
    "end": "2172580"
  },
  {
    "text": "in the long run and so that's why we invest a lot of money upfront to make",
    "start": "2172580",
    "end": "2178160"
  },
  {
    "text": "sure that we'll still be in business 50 years from now ok so anyway the cost of",
    "start": "2178160",
    "end": "2185780"
  },
  {
    "text": "using allocate aware software infrastructure is really pretty small it's much faster and easier than rolling",
    "start": "2185780",
    "end": "2191630"
  },
  {
    "text": "your own clearly if somebody said here you have a container choose your allocator put the two together you're done that's that's",
    "start": "2191630",
    "end": "2197690"
  },
  {
    "text": "minutes instead of weeks or months if you're doing something reusable it's",
    "start": "2197690",
    "end": "2204440"
  },
  {
    "text": "easy to supply it requires additional testing ok if you don't need it you",
    "start": "2204440",
    "end": "2210290"
  },
  {
    "text": "don't need it if you just just go ahead and ignore it and test it the way you always did because it's purely opt-in",
    "start": "2210290",
    "end": "2216410"
  },
  {
    "text": "again I want to say if you don't care about this stuff your biggest chore is ignoring it just don't worry about it",
    "start": "2216410",
    "end": "2223490"
  },
  {
    "text": "don't think about it all right so there's an additional cognitive burden users will still see the aid features",
    "start": "2223490",
    "end": "2229940"
  },
  {
    "text": "there's a larger programming interface until we have the language support there will be that extra parameter there'll be",
    "start": "2229940",
    "end": "2237070"
  },
  {
    "text": "documentation in English that says optionally supply an allocator use you",
    "start": "2237070",
    "end": "2242750"
  },
  {
    "text": "know for memory if no allocator is specified they're currently stalled the fault allocator will be used there's a",
    "start": "2242750",
    "end": "2249050"
  },
  {
    "text": "boilerplate pair of sentences for every function that you have to ignore it's in the same place every time you can just",
    "start": "2249050",
    "end": "2254780"
  },
  {
    "text": "ignore it okay so I've got that there so the net benefit for people who use",
    "start": "2254780",
    "end": "2263839"
  },
  {
    "text": "allocators who care this is a clear win for people who don't",
    "start": "2263839",
    "end": "2269490"
  },
  {
    "text": "today care about alligators it's not a clear win at least not as clear there's",
    "start": "2269490",
    "end": "2275730"
  },
  {
    "text": "additional opportunity for misuse if an object were to outlive its alligator",
    "start": "2275730",
    "end": "2281849"
  },
  {
    "text": "people get scared they say well what if what happens if my alligator goes out of scope before my object goes out of scope",
    "start": "2281849",
    "end": "2287760"
  },
  {
    "text": "what's going to happen and the answer is well don't do that but it's much better than that because if you create an",
    "start": "2287760",
    "end": "2293880"
  },
  {
    "text": "alligator and then you create an object in the same scope and you pass the address of the alligator into the object",
    "start": "2293880",
    "end": "2300270"
  },
  {
    "text": "here's object a allocator object be a was created before B B will be destroyed",
    "start": "2300270",
    "end": "2307410"
  },
  {
    "text": "before a done there's no way around that the only way you can screw this up is to",
    "start": "2307410",
    "end": "2313050"
  },
  {
    "text": "return the object and have it hold on to some alligator somewhere else that would",
    "start": "2313050",
    "end": "2320579"
  },
  {
    "text": "be bad but don't do that don't return a dangling pointer don't don't do that right I mean anyway so",
    "start": "2320579",
    "end": "2328619"
  },
  {
    "text": "that's a really rare kind of bug that's not the kind of bug we're worried about we're much more concerned that somebody",
    "start": "2328619",
    "end": "2333750"
  },
  {
    "text": "will use the wrong alligator they'll use a special-purpose alligator when they needed a general purpose alligator I",
    "start": "2333750",
    "end": "2340500"
  },
  {
    "text": "mean can you imagine you have an alligator and this alligator never deletes ever it just allocates because",
    "start": "2340500",
    "end": "2347520"
  },
  {
    "text": "that's really fast then you put that in a loop and you go a million times or a billion times eventually you will leak",
    "start": "2347520",
    "end": "2355440"
  },
  {
    "text": "all of your virtual memory all of your memory that you can use and you will die that will happen so the secret is don't",
    "start": "2355440",
    "end": "2362430"
  },
  {
    "text": "do that but you can do that but don't do that and so we need to educate people",
    "start": "2362430",
    "end": "2368579"
  },
  {
    "text": "not to do that so that's an example of misuse of alligators now again there's",
    "start": "2368579",
    "end": "2376109"
  },
  {
    "text": "million ways a million there's a none there's a countable infinity I think of",
    "start": "2376109",
    "end": "2381660"
  },
  {
    "text": "ways that you can screw up in C++ right clearly accountable infinity right",
    "start": "2381660",
    "end": "2387510"
  },
  {
    "text": "because there are all C++ programs can put into one-to-one correspondence with the integers right Andre there we",
    "start": "2387510",
    "end": "2394110"
  },
  {
    "text": "go so therefore there are a lot of them and this is just another way to screw up",
    "start": "2394110",
    "end": "2400650"
  },
  {
    "text": "but that doesn't mean we should we should disenfranchise people who actually care about what they do and",
    "start": "2400650",
    "end": "2405990"
  },
  {
    "text": "want to make things run like nobody's business so anyway if you misuse the",
    "start": "2405990",
    "end": "2414600"
  },
  {
    "text": "thing either it can be a disaster or it can just be waste of your time but it's",
    "start": "2414600",
    "end": "2419700"
  },
  {
    "text": "still costly so it's incompatible with some modern C++ features it trivial",
    "start": "2419700",
    "end": "2427380"
  },
  {
    "text": "constructors no good you got to write everything yourself so you can't rely on compiler generated stuff and that's",
    "start": "2427380",
    "end": "2433200"
  },
  {
    "text": "really unfortunate and there are other things that don't work really well like aggregate initialization and so all of",
    "start": "2433200",
    "end": "2439320"
  },
  {
    "text": "these things are annoyances that get in the way and then just imagine if we had language support that took all of that",
    "start": "2439320",
    "end": "2445500"
  },
  {
    "text": "off the table and said no it's all good it's just like virtual function it's all covered we got it all taken care of",
    "start": "2445500",
    "end": "2450630"
  },
  {
    "text": "well if we had it all taken care of then this would be a different conversation but we don't have it all taken care of yet so not there anyway there's also the",
    "start": "2450630",
    "end": "2461160"
  },
  {
    "text": "assertion that allocators somehow get in the way of writing modern interfaces or",
    "start": "2461160",
    "end": "2468030"
  },
  {
    "text": "doing something with moves or whatever and that is false and it's so",
    "start": "2468030",
    "end": "2477140"
  },
  {
    "text": "infuriating Lee false that I had to save it for later so I can actually like let",
    "start": "2477140",
    "end": "2482160"
  },
  {
    "text": "my hair down and what is and and rant and rave about it but I don't want to get into it now because I'll lose my",
    "start": "2482160",
    "end": "2487200"
  },
  {
    "text": "composure so I'm gonna stay focused okay okay",
    "start": "2487200",
    "end": "2492420"
  },
  {
    "text": "lifetime management issues okay the productive lifetime an object must not exceed that of it salivate allocator and",
    "start": "2492420",
    "end": "2498030"
  },
  {
    "text": "requires additional care you know all of that good stuff certain standard facilities limits what",
    "start": "2498030",
    "end": "2505470"
  },
  {
    "text": "they can do so shared pointer and weak pointer you have to pay more attention to what you're doing if you're doing",
    "start": "2505470",
    "end": "2510840"
  },
  {
    "text": "dealing with alligators you can't just go whatever if you start to use alligators with shared pointer then you",
    "start": "2510840",
    "end": "2517290"
  },
  {
    "text": "have to pay attention that's okay you do have to pay attention but but if you do",
    "start": "2517290",
    "end": "2522450"
  },
  {
    "text": "it or you could say you know what I don't want to learn that today next year I'm going to learn about alligators and share pointers I'm not going to do that now",
    "start": "2522450",
    "end": "2529049"
  },
  {
    "text": "okay so that's fine so requires education tools governance administration people have to be trained",
    "start": "2529049",
    "end": "2535829"
  },
  {
    "text": "there have to be code reviews by people who have been trained to do code reviews they need to be developed and facing",
    "start": "2535829",
    "end": "2542609"
  },
  {
    "text": "static analysis tools we have that company-wide policies and when and when not to use alligators it's not a typical",
    "start": "2542609",
    "end": "2550530"
  },
  {
    "text": "of other powerful paradigms like multi-threading unit testing and C++ itself when do you use multiple",
    "start": "2550530",
    "end": "2557460"
  },
  {
    "text": "inheritance is it never know it's don't use it and unless you have a good reason",
    "start": "2557460",
    "end": "2563309"
  },
  {
    "text": "to use it then use it just like anything else don't use it just because it's there use it for a reason we have",
    "start": "2563309",
    "end": "2569940"
  },
  {
    "text": "template so everything has to be depth no no it doesn't become all right bottom",
    "start": "2569940",
    "end": "2576210"
  },
  {
    "text": "line so real substantial costs exists substantial upfront library development",
    "start": "2576210",
    "end": "2581579"
  },
  {
    "text": "cost modest incremental application developer costs it's a credible value",
    "start": "2581579",
    "end": "2586650"
  },
  {
    "text": "proposition though it's at least there's something to discuss here and if we",
    "start": "2586650",
    "end": "2593220"
  },
  {
    "text": "don't have a higher art hierarchically reusable allocator aware software infrastructure then some applications",
    "start": "2593220",
    "end": "2600270"
  },
  {
    "text": "will roll their own they will not be reusable in any way they will incur a",
    "start": "2600270",
    "end": "2605819"
  },
  {
    "text": "maintenance burden for the application developers when the application developers leave somebody else will",
    "start": "2605819",
    "end": "2611040"
  },
  {
    "text": "inherit that maintenance burden and life will go on as is typical in many companies everybody else who can't",
    "start": "2611040",
    "end": "2617849"
  },
  {
    "text": "afford to write that will have to do without and we will lose the area under the curve for all those people that",
    "start": "2617849",
    "end": "2623760"
  },
  {
    "text": "wanted in but couldn't afford didn't have time to write it themselves discussion so I covered the cost right",
    "start": "2623760",
    "end": "2632430"
  },
  {
    "text": "there are costs their benefits their cost well there are more that a lot of",
    "start": "2632430",
    "end": "2637710"
  },
  {
    "text": "questions but I don't know what they are okay what is the percent of code that benefits from allocators somebody asked",
    "start": "2637710",
    "end": "2644490"
  },
  {
    "text": "that one so do we know I don't know it",
    "start": "2644490",
    "end": "2651720"
  },
  {
    "text": "really depends if allocators were really free I would suspect that",
    "start": "2651720",
    "end": "2657060"
  },
  {
    "text": "a large amount of code would benefit a little bit if they were really free if they're the way they are right now I",
    "start": "2657060",
    "end": "2663900"
  },
  {
    "text": "would suspect a percentage is it ten percent maybe No maybe it's five percent",
    "start": "2663900",
    "end": "2670200"
  },
  {
    "text": "maybe it's three percent but I'll tell you this the three percent that benefits oh my goodness the three percent that",
    "start": "2670200",
    "end": "2676860"
  },
  {
    "text": "benefits will save you you know millions of dollars billions of dollars in in",
    "start": "2676860",
    "end": "2682380"
  },
  {
    "text": "compute cost or in heat dissipation or whatever it's those cases where you",
    "start": "2682380",
    "end": "2687870"
  },
  {
    "text": "needed that drive the business the rest of the stuff is glue logic who cares but",
    "start": "2687870",
    "end": "2693300"
  },
  {
    "text": "those really things like evaluating a portfolio in a brokerage house where you've got to go through this loop of",
    "start": "2693300",
    "end": "2698760"
  },
  {
    "text": "horizon and scenario and edit it at a time you're trying to be things as fast as possible those are the places where",
    "start": "2698760",
    "end": "2704700"
  },
  {
    "text": "performance really matters and if you're trying to do some you know high performance multi-threaded system those",
    "start": "2704700",
    "end": "2711300"
  },
  {
    "text": "are the places where it matters so it's not really the percentage of cut but anyway there's a question somebody asked",
    "start": "2711300",
    "end": "2716790"
  },
  {
    "text": "anybody thinks of another question please let me know all right so there are collateral benefits the collateral",
    "start": "2716790",
    "end": "2722790"
  },
  {
    "text": "benefits not just performance but apart from performance there's also rapid",
    "start": "2722790",
    "end": "2730020"
  },
  {
    "text": "prototyping modularity hierarchical reuse testing instrumentation and object",
    "start": "2730020",
    "end": "2735510"
  },
  {
    "text": "placement so these are all things that you get with this infrastructure for free along with the performance so you",
    "start": "2735510",
    "end": "2743460"
  },
  {
    "text": "have the ability to tune for performance and monitor and measure and place do all kinds of good things so you wouldn't get",
    "start": "2743460",
    "end": "2755430"
  },
  {
    "text": "the rapid prototyping in the one-off in other words in some ways it's kind of like in business class by the way I",
    "start": "2755430",
    "end": "2761550"
  },
  {
    "text": "don't know if you know this but first class is actually up near the pilot there's no door there so in the event of",
    "start": "2761550",
    "end": "2767310"
  },
  {
    "text": "an emergency the first class passengers have to walk past the business class passengers to get off the plane whereas",
    "start": "2767310",
    "end": "2773820"
  },
  {
    "text": "the business class passengers sit right next to the exit the exit is right there",
    "start": "2773820",
    "end": "2779010"
  },
  {
    "text": "and so you can think of in some ways business class has it a little better because they're faster so if unlike a",
    "start": "2779010",
    "end": "2787230"
  },
  {
    "text": "full custom solution that might take months to I can try my business class solution",
    "start": "2787230",
    "end": "2794019"
  },
  {
    "text": "right now and it might be good enough or it might not help at all and if it doesn't help at all I just saved myself",
    "start": "2794019",
    "end": "2800199"
  },
  {
    "text": "a whole bunch of time but if it helps enough I'm done and if it doesn't help enough but it helps a lot I can I can",
    "start": "2800199",
    "end": "2807249"
  },
  {
    "text": "make my clients happier today knowing that I have two months from now a full custom solution on the way that's a bit",
    "start": "2807249",
    "end": "2813729"
  },
  {
    "text": "better but at least you got something now today that's 80% of the way or 60% of the way so there's that so there are",
    "start": "2813729",
    "end": "2821349"
  },
  {
    "text": "some advantages to this and performance being one of them those are collateral benefits it's low low costs low risk so",
    "start": "2821349",
    "end": "2829199"
  },
  {
    "text": "that's wonderful you've got these plugin components you can measure you know -",
    "start": "2829199",
    "end": "2837209"
  },
  {
    "text": "you can repeat as needed you can deploy immediately so again this is this whole",
    "start": "2837209",
    "end": "2842859"
  },
  {
    "text": "thing as I just said you go through this cycle where you try it first and if it looks good you ship it now and then you",
    "start": "2842859",
    "end": "2851380"
  },
  {
    "text": "ship it again later and if it looks bad you try something else and you don't waste the months of development so rapid",
    "start": "2851380",
    "end": "2857199"
  },
  {
    "text": "prototyping is a benefit that you get that you don't get with the other I just want to be clear you get that for free",
    "start": "2857199",
    "end": "2862619"
  },
  {
    "text": "all right there chainable one of the things that's nice is Andres talked",
    "start": "2862619",
    "end": "2868660"
  },
  {
    "text": "about trees of allocators and whatever I'm simple I like the linear thing because I can handle that and so being",
    "start": "2868660",
    "end": "2874599"
  },
  {
    "text": "able to chain together something that allocates little things that falls back to something that does big things",
    "start": "2874599",
    "end": "2879729"
  },
  {
    "text": "possibly to something that measures things you can chain them together and you get this this composition it's",
    "start": "2879729",
    "end": "2886479"
  },
  {
    "text": "simple but for my purposes it gets my job done so I'm really happy and it's",
    "start": "2886479",
    "end": "2892420"
  },
  {
    "text": "and and it's easy to explain and whatever so these kinds of alligators are good I don't think it's impossible",
    "start": "2892420",
    "end": "2897609"
  },
  {
    "text": "to have more elaborate alligators but it's not part of what I'm selling it",
    "start": "2897609",
    "end": "2903880"
  },
  {
    "text": "would be something on top of what I'm selling and certainly doable there are other things that can be done small",
    "start": "2903880",
    "end": "2909910"
  },
  {
    "text": "block alligators falls back on a large one as I said memories needed suppose one alligators spot supplies some",
    "start": "2909910",
    "end": "2916660"
  },
  {
    "text": "feature metrics this is something that we actually do there's a great example where one of them is test allocator will",
    "start": "2916660",
    "end": "2923549"
  },
  {
    "text": "we start to measure things how much memory is used by this object now there",
    "start": "2923549",
    "end": "2928799"
  },
  {
    "text": "are tools that you can use to memory to measure the amount of memory used by a",
    "start": "2928799",
    "end": "2934470"
  },
  {
    "text": "type or the amount of memory used in this region or whatever but when it comes down to object systems and you",
    "start": "2934470",
    "end": "2940500"
  },
  {
    "text": "want to say I have 10 systems that are headed by my system object and there 10",
    "start": "2940500",
    "end": "2946619"
  },
  {
    "text": "of them I want to know how much is system the Nate the object name system 1 how much memory is it using how much is",
    "start": "2946619",
    "end": "2954059"
  },
  {
    "text": "system memory 2 using there are tools to do that in the same way that there are tools to look at regions of code so",
    "start": "2954059",
    "end": "2961770"
  },
  {
    "text": "what's nice about these kinds of things the test allocator checks for leaking memory it can log allocate calls it can",
    "start": "2961770",
    "end": "2969119"
  },
  {
    "text": "match allocations with the allocations it can be used for testing exceptions safety in the classical way it we can do",
    "start": "2969119",
    "end": "2977160"
  },
  {
    "text": "memory range over overrides with signals it's non-invasive and what's really cool",
    "start": "2977160",
    "end": "2983609"
  },
  {
    "text": "is it scales arbitrarily large and it can be coexist in running production",
    "start": "2983609",
    "end": "2988920"
  },
  {
    "text": "systems and this is stuff that really happens so there's this wonderful thing",
    "start": "2988920",
    "end": "2994440"
  },
  {
    "text": "that someone developed at bloomberg his name is Brock Peabody and it's something",
    "start": "2994440",
    "end": "2999930"
  },
  {
    "text": "that's used today in data layer and it's awesome because what you can do is you",
    "start": "2999930",
    "end": "3005150"
  },
  {
    "text": "can using the allocator interface that's that's ubiquitous you can have an object that is both an alligator and a monitor",
    "start": "3005150",
    "end": "3012140"
  },
  {
    "text": "and so this interface this thing here also has another interface over here",
    "start": "3012140",
    "end": "3018200"
  },
  {
    "text": "that you can't see that's called monitor or some such thing and there's an object that is both an alligator and a monitor",
    "start": "3018200",
    "end": "3023359"
  },
  {
    "text": "and for those subsystems that want to participate they can do a runtime dynamic cast and say do you participate",
    "start": "3023359",
    "end": "3030230"
  },
  {
    "text": "in monitoring and if the answer is yes it can give the information to the monitor so we're using this vehicle this",
    "start": "3030230",
    "end": "3037970"
  },
  {
    "text": "Trojan horse if you will to allow us to monitor willing subsystems it's an opt-in thing but it's something that's",
    "start": "3037970",
    "end": "3044359"
  },
  {
    "text": "been done and it's used in production and you couldn't do it could not do it",
    "start": "3044359",
    "end": "3050119"
  },
  {
    "text": "without having an alligator aware software infrastructure so anyway",
    "start": "3050119",
    "end": "3055690"
  },
  {
    "text": "I said all that now I'm gonna put it out on the slide because that's what the",
    "start": "3055690",
    "end": "3060820"
  },
  {
    "text": "slide is for but I got ahead of myself so air is on the slide but I just said",
    "start": "3060820",
    "end": "3067289"
  },
  {
    "text": "all right so we can put objects in memory we have placement new and delete",
    "start": "3069780",
    "end": "3075790"
  },
  {
    "text": "those are wonderful things but they're not good enough if you want to put the whole object in memory in one place what",
    "start": "3075790",
    "end": "3082810"
  },
  {
    "text": "if I have a memory mapped i/o device and I want to put my whole vector of strings",
    "start": "3082810",
    "end": "3087970"
  },
  {
    "text": "all of it in this thing and then put it out on disk and then bring it back and",
    "start": "3087970",
    "end": "3093970"
  },
  {
    "text": "then use it we do this we do this at Bloomberg and we can do it because we can place the entire object in an arena",
    "start": "3093970",
    "end": "3100330"
  },
  {
    "text": "you can't do that with placement no so that's just another thing that doesn't happen so I said all that again I'm",
    "start": "3100330",
    "end": "3109360"
  },
  {
    "text": "getting ahead of myself this is what Bloomberg does so do malloc is the",
    "start": "3109360",
    "end": "3118210"
  },
  {
    "text": "function that does exactly that we have we have I own mapped memory all right",
    "start": "3118210",
    "end": "3125080"
  },
  {
    "text": "there's another interesting thing we can use allocators for something that's not just performance or monitoring we can",
    "start": "3125080",
    "end": "3130360"
  },
  {
    "text": "actually architectural --use allocators we can say that I'm going to create this graph and if you think about how",
    "start": "3130360",
    "end": "3136630"
  },
  {
    "text": "expensive it would be to create a graph of shared pointers and have each one",
    "start": "3136630",
    "end": "3141640"
  },
  {
    "text": "worry about itself and what happens if you have a cycle and whatever or you can",
    "start": "3141640",
    "end": "3147670"
  },
  {
    "text": "forget about that you can create your data structure with plain old raw pointers which is not the end of the",
    "start": "3147670",
    "end": "3152860"
  },
  {
    "text": "world and then at the end of the day when you're done with it instead of having to go around and destroy all of",
    "start": "3152860",
    "end": "3158890"
  },
  {
    "text": "these objects you can just simply release all of that memory and you don't",
    "start": "3158890",
    "end": "3163960"
  },
  {
    "text": "have to worry about cycles or owners you're bringing did you say I'm done with the graph and you pulled the plug and that is your garbage collector it's",
    "start": "3163960",
    "end": "3170860"
  },
  {
    "text": "all collected and it is absolutely faster than anything you could possibly",
    "start": "3170860",
    "end": "3176200"
  },
  {
    "text": "do the old-fashioned way using modern C++ okay so anyway again that's what I",
    "start": "3176200",
    "end": "3185650"
  },
  {
    "text": "just said I just told you what's on the slide it's an interesting lecturing style",
    "start": "3185650",
    "end": "3190930"
  },
  {
    "text": "right first tell you what I'm gonna say then put it on the slide so you can read it and then I think I'm just tired sorry",
    "start": "3190930",
    "end": "3196900"
  },
  {
    "text": "okay so it's an open-ended value proposition",
    "start": "3196900",
    "end": "3203680"
  },
  {
    "text": "there's so much you can do with an alligator aware software infrastructure and that makes sense that that gives the",
    "start": "3203680",
    "end": "3210580"
  },
  {
    "text": "firm advantages that there's just just it's hard to not appreciate that there is a value proposition to be had but",
    "start": "3210580",
    "end": "3221170"
  },
  {
    "text": "anyway so I'll put this up and if",
    "start": "3221170",
    "end": "3227800"
  },
  {
    "text": "without the idea is we just have these benefits went out the soft without",
    "start": "3227800",
    "end": "3233260"
  },
  {
    "text": "without planning for it sort of it's like you do it wholesale you either you either do it for everybody or it's rare",
    "start": "3233260",
    "end": "3242500"
  },
  {
    "text": "and it happens occasionally and it's not a thing or you make it available it's like healthcare for all in some sense I",
    "start": "3242500",
    "end": "3249400"
  },
  {
    "text": "guess I'm not supposed to use that because that's a contentious thing you know do we want public healthcare hi",
    "start": "3249400",
    "end": "3255060"
  },
  {
    "text": "anyway all right so",
    "start": "3255060",
    "end": "3259680"
  },
  {
    "text": "all right so there's concerns does anybody happen we have five minutes left this is the part that I was trying to",
    "start": "3262930",
    "end": "3268310"
  },
  {
    "text": "get to so that people said okay I believe you I don't need to hear any more but it's true alligators have not",
    "start": "3268310",
    "end": "3280460"
  },
  {
    "text": "been treated well in the past and people have a bad taste in their mouths and C++",
    "start": "3280460",
    "end": "3286010"
  },
  {
    "text": "98 was useless and C++ o3 was all but useless and C++ 11 is not much better",
    "start": "3286010",
    "end": "3293020"
  },
  {
    "text": "and C++ 17 is much better but still people have a bad taste in their mouths",
    "start": "3293020",
    "end": "3298520"
  },
  {
    "text": "and I understand that and a lot of people who are otherwise very gung-ho on performance and being able to do",
    "start": "3298520",
    "end": "3305030"
  },
  {
    "text": "articulate things will tell you we don't need alligators I don't know what to do",
    "start": "3305030",
    "end": "3311720"
  },
  {
    "text": "with that not everybody needs alligators but the people that need alligators need alligators and so people invent reasons",
    "start": "3311720",
    "end": "3318830"
  },
  {
    "text": "for not liking them and here are some of the reasons that people invent these are invented reasons state-of-the-art",
    "start": "3318830",
    "end": "3325100"
  },
  {
    "text": "alligators global alligators are good or better now",
    "start": "3325100",
    "end": "3330200"
  },
  {
    "text": "just oh I'll replace global my global new and delete with a better alligator",
    "start": "3330200",
    "end": "3335600"
  },
  {
    "text": "yeah that'll that'll solve it like why didn't we already do that what's wrong if you do that",
    "start": "3335600",
    "end": "3340880"
  },
  {
    "text": "now that you've done that now let's talk let's let's do the same exercise again because now our starting point is the",
    "start": "3340880",
    "end": "3347300"
  },
  {
    "text": "best global alligator you have and our starting point from there is now let's make it four times or an order of",
    "start": "3347300",
    "end": "3353330"
  },
  {
    "text": "magnitude faster than whatever that starting point is so that argument doesn't exist and and we know because we",
    "start": "3353330",
    "end": "3359360"
  },
  {
    "text": "did the measurements we know that the best alligators that can be are there we can't do better than those and now we",
    "start": "3359360",
    "end": "3365990"
  },
  {
    "text": "can do either a factor of four or a factor of ten or a factor of sixteen better by doing what we do so that's not",
    "start": "3365990",
    "end": "3372770"
  },
  {
    "text": "even a question the next one is the p.m. our bio violates zero overhead principle",
    "start": "3372770",
    "end": "3377930"
  },
  {
    "text": "another one is generally poor runtime performance trade-off meaning that well if everybody has an alligator pointer",
    "start": "3377930",
    "end": "3384590"
  },
  {
    "text": "then the thing will run slower in general and that's a bad idea non sense absolute nonsense all right",
    "start": "3384590",
    "end": "3392420"
  },
  {
    "text": "it's an unmanageable amount of verification and testing complexity again if you believe that",
    "start": "3392420",
    "end": "3398250"
  },
  {
    "text": "then don't use it understood you're not there but if you are there don't",
    "start": "3398250",
    "end": "3403440"
  },
  {
    "text": "disenfranchise those people who are there who need it because you're not there grossing compatibility with modern",
    "start": "3403440",
    "end": "3411840"
  },
  {
    "text": "C++ style this is absolutely absolutely false there is nothing about allocators",
    "start": "3411840",
    "end": "3417870"
  },
  {
    "text": "and nothing I tell you that that in any way discourages modern C++ style there",
    "start": "3417870",
    "end": "3422940"
  },
  {
    "text": "are other things that discourage modern C++ style but they aren't alligators just want to be clear if you take",
    "start": "3422940",
    "end": "3428910"
  },
  {
    "text": "alligators off the table there are things that discourage modern C++ style when it comes to performance we'll get",
    "start": "3428910",
    "end": "3434160"
  },
  {
    "text": "to that they don't play nice with modern C++ moves semantics again nonsense and",
    "start": "3434160",
    "end": "3439290"
  },
  {
    "text": "that's just a myth that has is being propagated and there's there's zero",
    "start": "3439290",
    "end": "3444390"
  },
  {
    "text": "truth to that and object pools and factories are as good or better and again this is something that people say",
    "start": "3444390",
    "end": "3450660"
  },
  {
    "text": "because it feels good but it makes absolutely no sense when you think about it so if you think that all of these",
    "start": "3450660",
    "end": "3456420"
  },
  {
    "text": "things here are fun and you know for a fact that there's no truth to them then",
    "start": "3456420",
    "end": "3461730"
  },
  {
    "text": "there's nothing else to hear because all I'm going to do is go through them one by one and tell you why they're not true so that's the rest of the talk pretty",
    "start": "3461730",
    "end": "3469320"
  },
  {
    "text": "much so I'm just saying if anybody feels like they are done for today I can understand that but I'm probably gonna",
    "start": "3469320",
    "end": "3475530"
  },
  {
    "text": "go for another five or six or seven or eight minutes okay well here I go so",
    "start": "3475530",
    "end": "3481230"
  },
  {
    "text": "state-of-the-art global alligators I'll say it quickly here it is on the screen this is the concern basis of global memory",
    "start": "3481230",
    "end": "3487980"
  },
  {
    "text": "allocators have led to dynamic performance improvements especially with respect to real-world multi-threading",
    "start": "3487980",
    "end": "3493380"
  },
  {
    "text": "applications wouldn't replace the compiler supplied global memory allocator with a newer state-of-the-art one achieve most if not all of the real",
    "start": "3493380",
    "end": "3500430"
  },
  {
    "text": "benefits derived from a situational use of local alligators designed into a program okay",
    "start": "3500430",
    "end": "3506100"
  },
  {
    "text": "no no general-purpose global alligators are ignorant of application specific",
    "start": "3506100",
    "end": "3512790"
  },
  {
    "text": "details they can unachieved the locality that local allocation can one of the",
    "start": "3512790",
    "end": "3518190"
  },
  {
    "text": "things they benefit is from is knowing which thread is doing what and thread local pools but if you design your",
    "start": "3518190",
    "end": "3525180"
  },
  {
    "text": "systems so that you have thread pools then the affinity isn't there and there's nothing to go allocator can do to recover from that so",
    "start": "3525180",
    "end": "3532190"
  },
  {
    "text": "the local alligator builds into the design what it is that's local and it",
    "start": "3532190",
    "end": "3537410"
  },
  {
    "text": "keeps it there and so that's how that works period and that's how you avoid",
    "start": "3537410",
    "end": "3543319"
  },
  {
    "text": "the fall sharing that's how you avoid those kinds of things they don't provide",
    "start": "3543319",
    "end": "3548930"
  },
  {
    "text": "the collateral benefits in any event no matter what you say you can't go on an object by object basis and place it or",
    "start": "3548930",
    "end": "3555289"
  },
  {
    "text": "measure it or do anything with it right that doesn't exist and they certainly",
    "start": "3555289",
    "end": "3561589"
  },
  {
    "text": "don't do anything for rapid prototyping so if you just stop that's not a panacea",
    "start": "3561589",
    "end": "3566960"
  },
  {
    "text": "for anything okay zero ever in principle so everyone but the C++ 11 alligator",
    "start": "3566960",
    "end": "3574039"
  },
  {
    "text": "model you have to store a pointer somewhere in your object to the",
    "start": "3574039",
    "end": "3579739"
  },
  {
    "text": "alligator you don't have to store it in the footprint but we choose to store in",
    "start": "3579739",
    "end": "3585079"
  },
  {
    "text": "the footprint because after measurement storing it anywhere else like in the allocated memory which we could do and",
    "start": "3585079",
    "end": "3591440"
  },
  {
    "text": "by the way people go wait a minute vector has three pointers if we add alligators it's going to have four pointers get a myth a vector does not",
    "start": "3591440",
    "end": "3598339"
  },
  {
    "text": "have three pointers a vector could have two pointers a vector could on some platforms have one pointer or vector",
    "start": "3598339",
    "end": "3605119"
  },
  {
    "text": "could have 16 size of 16 pointers because of the short vector optimization it's all about whatever your usage",
    "start": "3605119",
    "end": "3612140"
  },
  {
    "text": "pattern says is best our experience is that having the alligator in the footprint is faster than not because",
    "start": "3612140",
    "end": "3620720"
  },
  {
    "text": "because we've measured all of them but that's a measurement that could change the point is is that it is an",
    "start": "3620720",
    "end": "3626839"
  },
  {
    "text": "implementation choice to use the fastest way but I will tell you if you're worried about space storing the",
    "start": "3626839",
    "end": "3633559"
  },
  {
    "text": "alligator pointer only wants you've allocated memory is a viable option and",
    "start": "3633559",
    "end": "3638599"
  },
  {
    "text": "at that point once you've allocated memory the memory that you've allocated having the pointer with that memory is",
    "start": "3638599",
    "end": "3645730"
  },
  {
    "text": "exponentially literally with geometric growth an exponentially negligible so it's not it's not it's one of those",
    "start": "3645730",
    "end": "3652819"
  },
  {
    "text": "things that you could even measure the cost because we've tried there is no cost so any conjecture that there's cost",
    "start": "3652819",
    "end": "3659509"
  },
  {
    "text": "is without any okay so I'm just saying basically",
    "start": "3659509",
    "end": "3666890"
  },
  {
    "text": "basically that the zero overhead principle is not in spirit violated by having allocators in the polymorphic",
    "start": "3666890",
    "end": "3672650"
  },
  {
    "text": "sense the virtual function dispatch is also a myth that's a wonderful one for",
    "start": "3672650",
    "end": "3679430"
  },
  {
    "text": "the most important case where you have an alligator created on the program",
    "start": "3679430",
    "end": "3684740"
  },
  {
    "text": "stack and then you have a data structure and you pass the address of the alligator into the data structure the",
    "start": "3684740",
    "end": "3689960"
  },
  {
    "text": "alligators virtual function will be in line and the compiler will see that in line function along with the template",
    "start": "3689960",
    "end": "3696080"
  },
  {
    "text": "that it's going into typically a vector or whatever and candy virtualize it with",
    "start": "3696080",
    "end": "3701510"
  },
  {
    "text": "no effort whatsoever so that the code looks just as if it had been invasive so it has all of those wonderful properties",
    "start": "3701510",
    "end": "3708410"
  },
  {
    "text": "of performance that you want for the stack alligators for every other notion",
    "start": "3708410",
    "end": "3714680"
  },
  {
    "text": "of allocation it is completely meaningless because of the benefit the true benefit comes from the locality",
    "start": "3714680",
    "end": "3719840"
  },
  {
    "text": "that you get and not from the cost of allocation and de-allocation I cannot say this more strongly",
    "start": "3719840",
    "end": "3725330"
  },
  {
    "text": "there is no cost there's no cost that we need to worry about when it comes to",
    "start": "3725330",
    "end": "3730460"
  },
  {
    "text": "that what we're getting the benefit is enormous think of it this way if you don't care about performance don't worry",
    "start": "3730460",
    "end": "3736400"
  },
  {
    "text": "about alligators the overhead will be not measurable if you do care about performance the overhead is irrelevant",
    "start": "3736400",
    "end": "3744020"
  },
  {
    "text": "compared to the tremendous gains that you'll achieve and so the net benefit is like I'm spending a penny and I'm",
    "start": "3744020",
    "end": "3750710"
  },
  {
    "text": "getting a million dollars what is the discussion so that's where that is the next one zero one four principle is",
    "start": "3750710",
    "end": "3759160"
  },
  {
    "text": "almost unfair we're making design trade-offs one design trade-off we do is we take things that that there's a",
    "start": "3759160",
    "end": "3766580"
  },
  {
    "text": "there's a negligible cost to everybody but we really improve performance you know on average that's one another one",
    "start": "3766580",
    "end": "3774110"
  },
  {
    "text": "is there's a solid benefit for a few but there's a slight cost to everybody and",
    "start": "3774110",
    "end": "3781040"
  },
  {
    "text": "then there's one that's a large benefit for some people but or there's a benefit",
    "start": "3781040",
    "end": "3787400"
  },
  {
    "text": "for some people but a significant cost for others the third case is the one that we try to stay away from you never",
    "start": "3787400",
    "end": "3793880"
  },
  {
    "text": "want to make change from an existing system where before people were happy and then there",
    "start": "3793880",
    "end": "3799500"
  },
  {
    "text": "are some people that are unhappy and I'm saying that the kind of change that allocators would do no one would become",
    "start": "3799500",
    "end": "3805650"
  },
  {
    "text": "unhappy because no one would notice anything there would be no change for them but for the people that would",
    "start": "3805650",
    "end": "3811170"
  },
  {
    "text": "notice a change the pay the change would be huge so all these three trade-offs we don't do three it's a combination of one",
    "start": "3811170",
    "end": "3818430"
  },
  {
    "text": "and two that's the kind of trade-off that having an alligator aware infrastructure gives you that's my argument it's like the alligator tax",
    "start": "3818430",
    "end": "3826579"
  },
  {
    "text": "everyone must buy auto insurance everyone accidents are unusual but not",
    "start": "3826579",
    "end": "3832859"
  },
  {
    "text": "rare so if everybody is paying for auto insurance and you happen to be one of those unfortunate people that need an",
    "start": "3832859",
    "end": "3839339"
  },
  {
    "text": "alligator you got one it's an insurance policy okay so if everything take verification",
    "start": "3839339",
    "end": "3846059"
  },
  {
    "text": "and testing this basically failure to properly annotate types or propagate allergies can undermine the",
    "start": "3846059",
    "end": "3851130"
  },
  {
    "text": "effectiveness of allocation strategy and can lead to memory leaks especially when waking out memory which is one of the",
    "start": "3851130",
    "end": "3856980"
  },
  {
    "text": "things you can do I aren't the extensive variation testing and peer review required to avoid such errors",
    "start": "3856980",
    "end": "3862170"
  },
  {
    "text": "impracticable one of my great words can we not put it into practice I think we can it does require effort it requires",
    "start": "3862170",
    "end": "3868500"
  },
  {
    "text": "people who are going to use this to be smart almost every new library feature will need some training yes there are",
    "start": "3868500",
    "end": "3875519"
  },
  {
    "text": "there special-purpose alligators that you shouldn't use and winking out is clearly for experts only ix purtz only I mean somebody who has",
    "start": "3875519",
    "end": "3882390"
  },
  {
    "text": "actually listened to the talk you know has actually went to the lecture and go oh I understand what that's for instead",
    "start": "3882390",
    "end": "3888750"
  },
  {
    "text": "of just going let me try this thing and cluelessly puts two things together and has no idea whether they even belong",
    "start": "3888750",
    "end": "3893759"
  },
  {
    "text": "together that's the kind of thing that's just nuts the test alligator is a great thing",
    "start": "3893759",
    "end": "3899609"
  },
  {
    "text": "and if we had this this 20v thing that would be awesome as well so compatibility with modern C++ style I",
    "start": "3899609",
    "end": "3906119"
  },
  {
    "text": "have to read this Cephas plus 11 encourages a style of program where objects are more often passed and returned by value sometimes relying on",
    "start": "3906119",
    "end": "3912240"
  },
  {
    "text": "our value references to move these objects if efficiently whereas BD style",
    "start": "3912240",
    "end": "3919170"
  },
  {
    "text": "relies on passing a objects by address as arguments to achieve optimal",
    "start": "3919170",
    "end": "3924180"
  },
  {
    "text": "efficiency and control over the allocator employed isn't this old and style unjustifiably restricted so",
    "start": "3924180",
    "end": "3931290"
  },
  {
    "text": "one of the crazy things about this is it has nothing to do with alligators whatsoever returning my value is",
    "start": "3931290",
    "end": "3938400"
  },
  {
    "text": "inherently inefficient whether you have control over the alligator or not and",
    "start": "3938400",
    "end": "3943590"
  },
  {
    "text": "that is because the returned object must be constructed in order to return it and",
    "start": "3943590",
    "end": "3948840"
  },
  {
    "text": "once it's returned it must be destroyed it cannot be pulled because it cannot be",
    "start": "3948840",
    "end": "3955500"
  },
  {
    "text": "pulled it is a bad idea period if it could be pulled then we could reuse the",
    "start": "3955500",
    "end": "3962010"
  },
  {
    "text": "object then it wouldn't matter how we got it and the way you do that is to pass it in has an argument",
    "start": "3962010",
    "end": "3968160"
  },
  {
    "text": "let me not believer that supplying an alligator doesn't help the idea that you would supply an alligator on that",
    "start": "3968160",
    "end": "3974430"
  },
  {
    "text": "function line doesn't matter what you need to do is create the object with what alligator you want whatever that is pass it in and reuse the object and that",
    "start": "3974430",
    "end": "3982290"
  },
  {
    "text": "and you could get it from a pool you could get it from wherever you want but you need to pass it in ok returning an",
    "start": "3982290",
    "end": "3987330"
  },
  {
    "text": "object by argument is just straight-up faster and you could reuse the object I already talked about that this is the",
    "start": "3987330",
    "end": "3993360"
  },
  {
    "text": "accumulate pattern I learned from my last talk and you have full control over the alligator if you want it but even if",
    "start": "3993360",
    "end": "4000080"
  },
  {
    "text": "you don't it's still faster you can build on the return style if you really",
    "start": "4000080",
    "end": "4005480"
  },
  {
    "text": "want to have an object returned by value you can you can build that on top of as",
    "start": "4005480",
    "end": "4010850"
  },
  {
    "text": "a layer on top of these other things you can't go the other way around so this is just the way it has to be done when two",
    "start": "4010850",
    "end": "4017480"
  },
  {
    "text": "objects use different alligators move assignment D generates to copy an operation and swap becomes undefined doesn't this imply that local alligators",
    "start": "4017480",
    "end": "4024410"
  },
  {
    "text": "should be avoided too to enable such operations so here's the crazy thing if you have if you're going",
    "start": "4024410",
    "end": "4030530"
  },
  {
    "text": "across a memory pool and and doing so would cause a huge degradation in performance",
    "start": "4030530",
    "end": "4035540"
  },
  {
    "text": "you could either hide your head in the sand and let that degradation occur or you could just admit that a copy is",
    "start": "4035540",
    "end": "4040850"
  },
  {
    "text": "faster and if you just admit that then you've got a good design by by not allowing alligators you're just",
    "start": "4040850",
    "end": "4047060"
  },
  {
    "text": "basically not looking at the data and so that's a ridiculous argument move versus",
    "start": "4047060",
    "end": "4052070"
  },
  {
    "text": "allocate move assignment is is often not as efficient as copy and again this is the crazy thing copying is often",
    "start": "4052070",
    "end": "4061480"
  },
  {
    "text": "when the cost of moving results in diffusion across your region so really",
    "start": "4061480",
    "end": "4067060"
  },
  {
    "text": "depends on what's going on clearly if you're inside if you're inside one object moving is not as bad there",
    "start": "4067060",
    "end": "4073540"
  },
  {
    "text": "they're details that we can get into but moves have nothing to do with return by value all of that is handled by our vo",
    "start": "4073540",
    "end": "4079599"
  },
  {
    "text": "and NMR vo and all moving does is muck around with with the memory there are four aspects I'll put them out here now",
    "start": "4079599",
    "end": "4086220"
  },
  {
    "text": "locality is the big one construction or constructive",
    "start": "4086220",
    "end": "4091930"
  },
  {
    "text": "interference or or true sharing is what I'm saying is another good one that you get from from having these local",
    "start": "4091930",
    "end": "4097568"
  },
  {
    "text": "allocators prefetching and optimal n way cache memory bank access is another and",
    "start": "4097569",
    "end": "4103000"
  },
  {
    "text": "if you do moves within the same memory pool it's not so bad like if you want to",
    "start": "4103000",
    "end": "4108969"
  },
  {
    "text": "shift the elements up in a vector okay do a move because you know that's gonna be the same alligator it doesn't it does",
    "start": "4108969",
    "end": "4114730"
  },
  {
    "text": "that will preserve one and two it may not preserve three and four and that may be okay but if you're writing code where",
    "start": "4114730",
    "end": "4120880"
  },
  {
    "text": "you really care about the particular cache of your system like the size and",
    "start": "4120880",
    "end": "4126040"
  },
  {
    "text": "the way it's you know I think then you need to become more of an electrical engineer and not a computer program and",
    "start": "4126040",
    "end": "4132068"
  },
  {
    "text": "then that's fine but you should be aware of it in other words you should be aware of these things so object pools in fact we serve to",
    "start": "4132069",
    "end": "4137980"
  },
  {
    "text": "reduce overhead caused by allocating memories so why aren't these approaches as good if not better alternatives to",
    "start": "4137980",
    "end": "4144670"
  },
  {
    "text": "alligators so the crazy thing is is that memory allocation is is needed by object",
    "start": "4144670",
    "end": "4150609"
  },
  {
    "text": "rules you have to create the pools in the first place and it's like do moving vans eliminate the need for furniture",
    "start": "4150609",
    "end": "4156910"
  },
  {
    "text": "companies no object pools are a higher level abstraction we absolutely want object pools we want to implement them",
    "start": "4156910",
    "end": "4163960"
  },
  {
    "text": "in terms of allocators we want to gain the benefits of all the benefits of",
    "start": "4163960",
    "end": "4169150"
  },
  {
    "text": "allocator aware Architecture from them and so that's basically what this this",
    "start": "4169150",
    "end": "4174338"
  },
  {
    "text": "slide is you have memory alligators memory pools object pools and there's a",
    "start": "4174339",
    "end": "4180700"
  },
  {
    "text": "hierarchy and you use it at whatever level makes sense to you if you're an application developer an object pool might be the right answer but you build",
    "start": "4180700",
    "end": "4186818"
  },
  {
    "text": "the object pool out of the memory pool and the memory pool is allocator aware and the obligate object-- pull should be",
    "start": "4186819",
    "end": "4192969"
  },
  {
    "text": "allocate or aware and then it can enjoy all of those benefits and that's what I'm about to say here",
    "start": "4192969",
    "end": "4198030"
  },
  {
    "text": "discussion Wow all right questions so anyway just to",
    "start": "4198030",
    "end": "4204010"
  },
  {
    "text": "wrap up allocator aware software performance instrumentation object",
    "start": "4204010",
    "end": "4209440"
  },
  {
    "text": "placement these are all good things historically we've had to write bespoke data structures and they don't give us",
    "start": "4209440",
    "end": "4215410"
  },
  {
    "text": "these values these benefits allocator aware software structure has real costs",
    "start": "4215410",
    "end": "4221290"
  },
  {
    "text": "and here are some of the examples there's resistance based on how badly we",
    "start": "4221290",
    "end": "4226719"
  },
  {
    "text": "did with C++ 11 and I'm sorry about that but it was just one of those necessary things it's not that we didn't know it's",
    "start": "4226719",
    "end": "4233469"
  },
  {
    "text": "that we couldn't convince the Standards Committee to take the big step to go to polymorphic because they were scared to death of virtual functions really the",
    "start": "4233469",
    "end": "4239890"
  },
  {
    "text": "truth so there are all these wonderful benefits there's we talked about there's",
    "start": "4239890",
    "end": "4245830"
  },
  {
    "text": "the cost there's the collateral benefits there's some FUD and do the benefits outweigh the cost",
    "start": "4245830",
    "end": "4251199"
  },
  {
    "text": "and then finally suppose wait suppose we",
    "start": "4251199",
    "end": "4257199"
  },
  {
    "text": "actually could remove all the costs all of the annoyance associated with",
    "start": "4257199",
    "end": "4262600"
  },
  {
    "text": "allocator where software infrastructure so that you got it for free there was no allocated parameter there's no extra",
    "start": "4262600",
    "end": "4269170"
  },
  {
    "text": "documentation there's nothing it literally is the same as saying virtual like just say AAA done and that's all",
    "start": "4269170",
    "end": "4277780"
  },
  {
    "text": "you had to do and if that were all you had to do and then when you came to a class you say inject this you don't even",
    "start": "4277780",
    "end": "4284380"
  },
  {
    "text": "pass it in far as part of the constructor there's not even part of that if you could do all of that then",
    "start": "4284380",
    "end": "4289780"
  },
  {
    "text": "what would you say should we invest in this because if you think about self-driving cars if you have a",
    "start": "4289780",
    "end": "4296739"
  },
  {
    "text": "self-driving car the cost of making if you have the technology to cost of develop of having a self-driving car",
    "start": "4296739",
    "end": "4303160"
  },
  {
    "text": "versus a regular car they cost the same because the only difference is the software and a few sensors so it's",
    "start": "4303160",
    "end": "4310360"
  },
  {
    "text": "really the same price it's the upfront cost that's amortized over the rest of all humanity so we",
    "start": "4310360",
    "end": "4316780"
  },
  {
    "text": "think it's worth it so we're doing it we're we're the you know the uber if you will because we use alligators and we",
    "start": "4316780",
    "end": "4323260"
  },
  {
    "text": "want to save the benefit you know the cost ourselves so weird",
    "start": "4323260",
    "end": "4328330"
  },
  {
    "text": "go ahead and do this we are doing this and this is what we're you know this is this is our contribution and it's going",
    "start": "4328330",
    "end": "4335200"
  },
  {
    "text": "to be a hard sell because people still aren't convinced of the cost-benefit trade-off but it's really hard for me to",
    "start": "4335200",
    "end": "4341440"
  },
  {
    "text": "imagine that if there were no cost that you'd really have a problem with this and that is the end of the talk and",
    "start": "4341440",
    "end": "4347440"
  },
  {
    "text": "thank you for staying a little late I'm sorry I did it as fast as I could [Applause]",
    "start": "4347440",
    "end": "4360090"
  }
]