[
  {
    "text": "anyway uh hi I am Hana and I am having to look my favorite data structures kind",
    "start": "5279",
    "end": "10599"
  },
  {
    "text": "of because uh when I uh when I was asked for this like abstract I actually didn't",
    "start": "10599",
    "end": "16240"
  },
  {
    "text": "know what I'm going to talk about and I drift significantly so I'm Ana I uh work for",
    "start": "16240",
    "end": "25240"
  },
  {
    "text": "women by Toyota uh and chair of reflection and",
    "start": "25240",
    "end": "31160"
  },
  {
    "text": "compile time study group inas committee and co-chair of evolution",
    "start": "31160",
    "end": "36399"
  },
  {
    "text": "working group where all fun and shouting is happening and in in past you probably",
    "start": "36399",
    "end": "43480"
  },
  {
    "text": "saw my talk about C at least one I also did last year talk about cural which is",
    "start": "43480",
    "end": "50079"
  },
  {
    "text": "like cortin reer over coral and there is also liary CT HH to",
    "start": "50079",
    "end": "55680"
  },
  {
    "text": "calculate various hashes in a compile time and also create some encoding like",
    "start": "55680",
    "end": "61960"
  },
  {
    "text": "base 64 basic 32 so but recently I'm hecking",
    "start": "61960",
    "end": "70320"
  },
  {
    "text": "Clank because I want to fix things which bothers me hi",
    "start": "71040",
    "end": "77880"
  },
  {
    "text": "Chandler also I want to learn how things are implemented because I didn't know I was kind of surprised and",
    "start": "79720",
    "end": "85840"
  },
  {
    "text": "scared and also to implement some changes in the language or prototype them because why",
    "start": "85840",
    "end": "92119"
  },
  {
    "text": "not so Contex per is my favorite topic I think everyone here is for con",
    "start": "92119",
    "end": "100119"
  },
  {
    "text": "expert so in Clank there is part called expert constant which is Clank C++ interpreter",
    "start": "100119",
    "end": "107960"
  },
  {
    "text": "so you can actually interpret C++ con exper are you raising hand Jason",
    "start": "107960",
    "end": "115280"
  },
  {
    "text": "already okay it's in one big file and I",
    "start": "115280",
    "end": "120479"
  },
  {
    "text": "not going to say any like B about it but it's one file it's 17 177,000 lines of",
    "start": "120479",
    "end": "127360"
  },
  {
    "text": "code and it's complete C++ for context implemented in one",
    "start": "127360",
    "end": "132920"
  },
  {
    "text": "file I hate it CH H it",
    "start": "132920",
    "end": "138480"
  },
  {
    "text": "too and it's independent of UTP architecture so it will work same on",
    "start": "138480",
    "end": "143599"
  },
  {
    "text": "architecture and also it can uh emulate different uh if you like targeting for different architecture it uh float",
    "start": "143599",
    "end": "150120"
  },
  {
    "text": "operation will match your float operations on your machine and imp it's Implement uh C++",
    "start": "150120",
    "end": "157720"
  },
  {
    "text": "abstract machine that's important because for the rest of the talk and it follows expert. constant part of the",
    "start": "157720",
    "end": "164120"
  },
  {
    "text": "standard where like actually very is list which it cannot uh do like you",
    "start": "164120",
    "end": "169480"
  },
  {
    "text": "cannot do reer protocast so context Pro is defined by",
    "start": "169480",
    "end": "174879"
  },
  {
    "text": "uh removing things from standard everything else is allowed so actually writing a paper to",
    "start": "174879",
    "end": "181440"
  },
  {
    "text": "improve Contex Pro is actually like removing one line for one feature another line for another",
    "start": "181440",
    "end": "187560"
  },
  {
    "text": "feature and convince other people to actually vote for it so everything is in",
    "start": "187560",
    "end": "194560"
  },
  {
    "text": "context Pro it's symbolic execution forget about your CPU",
    "start": "194560",
    "end": "199840"
  },
  {
    "text": "architecture especially you patri uh forget everything you know",
    "start": "199840",
    "end": "205080"
  },
  {
    "text": "about pointers pointers is not address and and forget everything about",
    "start": "205080",
    "end": "211239"
  },
  {
    "text": "values and memory because like what's the size of",
    "start": "211239",
    "end": "216879"
  },
  {
    "text": "number it's a symbolic it doesn't make sense so what's the value in inside of",
    "start": "216879",
    "end": "223560"
  },
  {
    "text": "Clank and symbolic interpreter it's AP value and I didn't know what the AP",
    "start": "223560",
    "end": "228599"
  },
  {
    "text": "means I need to ask Eric uh and Eric told me uh I don't know I think",
    "start": "228599",
    "end": "234360"
  },
  {
    "text": "arbitrary precision and he is Clank developer for a long time",
    "start": "234360",
    "end": "239920"
  },
  {
    "text": "yeah yeah Cher says right and it's kind of like variant so it can have multiple",
    "start": "239920",
    "end": "245120"
  },
  {
    "text": "types inside like type of values so by default it's initialized it's none then",
    "start": "245120",
    "end": "251319"
  },
  {
    "text": "it can be integer and it can be integer of any Precision on bit size not just 64",
    "start": "251319",
    "end": "257239"
  },
  {
    "text": "but like 256 if you want it will make it work for you you don't need to care",
    "start": "257239",
    "end": "263160"
  },
  {
    "text": "about it it's just number it can be float of arbitrary Precision it can be fixed float",
    "start": "263160",
    "end": "270479"
  },
  {
    "text": "it can be array of other values it can be structure of other",
    "start": "270479",
    "end": "277160"
  },
  {
    "text": "values it can be Union of other values and it can be L value which is",
    "start": "277160",
    "end": "283360"
  },
  {
    "text": "pointer or reference pointing at something some other like something so what's an array in",
    "start": "283360",
    "end": "293600"
  },
  {
    "text": "Clank it's a uh structure of three items size",
    "start": "293600",
    "end": "299320"
  },
  {
    "text": "capacity and data and array of actual",
    "start": "299320",
    "end": "306360"
  },
  {
    "text": "values it can be partially initialized it can be it can contain different",
    "start": "306360",
    "end": "311479"
  },
  {
    "text": "values because AP value each of them can have different value so you can initialize it like this and that is size",
    "start": "311479",
    "end": "319000"
  },
  {
    "text": "and capacity and it's growing but it's fixed",
    "start": "319000",
    "end": "323319"
  },
  {
    "text": "size what's the union and actually I didn't know what",
    "start": "324520",
    "end": "330080"
  },
  {
    "text": "time okay uh Union is another structure of field and",
    "start": "330080",
    "end": "338120"
  },
  {
    "text": "value by default it's empty initialize but if you want to put in you need to have Union in your",
    "start": "338120",
    "end": "344720"
  },
  {
    "text": "DS and uh first field will point at the EST element of the field integer in ID",
    "start": "344720",
    "end": "353080"
  },
  {
    "text": "if you want to put float it will point at other like field in the as or any",
    "start": "353080",
    "end": "359039"
  },
  {
    "text": "object and then you will put the object inside this is not pointer it's like uh",
    "start": "359039",
    "end": "364240"
  },
  {
    "text": "it's inside my animation engine cannot do things inside",
    "start": "364240",
    "end": "370240"
  },
  {
    "text": "yet so structure is similar it's",
    "start": "370240",
    "end": "375440"
  },
  {
    "text": "a uh structure of three items structure is structure uh number of bases number",
    "start": "375440",
    "end": "381120"
  },
  {
    "text": "of members and data so in this case we have structure position float X float Epsilon and",
    "start": "381120",
    "end": "388560"
  },
  {
    "text": "structure C Circ which is inting from position it has radius and color so",
    "start": "388560",
    "end": "395599"
  },
  {
    "text": "first item is the uh structure of position as the base Bas always",
    "start": "395599",
    "end": "402680"
  },
  {
    "text": "starts and uh then it's the float of the radius and there is the another structure with the color which is",
    "start": "402680",
    "end": "409720"
  },
  {
    "text": "something we don't don't need to know and no value has a size what size of",
    "start": "409720",
    "end": "418080"
  },
  {
    "text": "color you don't know I don't know because I didn't put on a slide but it doesn't",
    "start": "418080",
    "end": "425120"
  },
  {
    "text": "matter so what's the pointer P what this",
    "start": "425120",
    "end": "432840"
  },
  {
    "text": "pointer exactly there is no pointer but we can point on",
    "start": "433199",
    "end": "438639"
  },
  {
    "text": "something how address do you think it's good idea to",
    "start": "438639",
    "end": "443840"
  },
  {
    "text": "put uh raw memory address into pointer in symbolic uh interpreter",
    "start": "443840",
    "end": "450759"
  },
  {
    "text": "what will happen if you uh point out something and then you destroy it later or",
    "start": "450759",
    "end": "457080"
  },
  {
    "text": "unallocate it will dangle and you don't want to dangle poter because it will crash your interpreter you want to",
    "start": "457080",
    "end": "462599"
  },
  {
    "text": "detect it so it's it's some sort of",
    "start": "462599",
    "end": "470440"
  },
  {
    "text": "identifier yeah okay so what you can what can be pointed by a",
    "start": "471080",
    "end": "477479"
  },
  {
    "text": "pointer can you point a value value doesn't have any like position in",
    "start": "477479",
    "end": "485319"
  },
  {
    "text": "or anything it's just a value so you need to point it can be obviously",
    "start": "485319",
    "end": "490800"
  },
  {
    "text": "nothing but you can point only on object on something which has a name or some",
    "start": "490800",
    "end": "496879"
  },
  {
    "text": "meaning it can be initialized it doesn't need to be initialized you can point an initialized object and it's fine you can",
    "start": "496879",
    "end": "502759"
  },
  {
    "text": "point at normal object which is initialized or you can point on array or",
    "start": "502759",
    "end": "507960"
  },
  {
    "text": "its member like this okay you can point behind object",
    "start": "507960",
    "end": "515919"
  },
  {
    "text": "initialized or behind array and it's special type of pointer",
    "start": "515919",
    "end": "521159"
  },
  {
    "text": "it doesn't Point anywhere but it's it has semantic meaning it's behind something it's uh in in this case it's",
    "start": "521159",
    "end": "527519"
  },
  {
    "text": "array of object called C so it's C behind the doar like regular",
    "start": "527519",
    "end": "532560"
  },
  {
    "text": "expression before it was like behind object B behind object",
    "start": "532560",
    "end": "538120"
  },
  {
    "text": "a so also because everything is a symbol there is no ordering you cannot order",
    "start": "538120",
    "end": "546160"
  },
  {
    "text": "pointers so if we like how we sort this what's what's the first",
    "start": "546200",
    "end": "551399"
  },
  {
    "text": "item or first object Sorry by by its value by its position in",
    "start": "551399",
    "end": "557920"
  },
  {
    "text": "space maybe it's just one d space we can order it but maybe it's Tod space or I don't know it doesn't have",
    "start": "557920",
    "end": "565560"
  },
  {
    "text": "any value we can sort",
    "start": "565560",
    "end": "569320"
  },
  {
    "text": "okay so uh that is a thing you can compare pointers if they are in same",
    "start": "571040",
    "end": "579000"
  },
  {
    "text": "provenant how many of you heard about think pointer provenance 1 2 3 4 five CH Chandler are",
    "start": "579000",
    "end": "588040"
  },
  {
    "text": "you raising hand or not I want to on the record okay yes Chandler is Raising",
    "start": "588040",
    "end": "594439"
  },
  {
    "text": "hand okay uh so let's have structure structure of item which is like thre",
    "start": "594760",
    "end": "599839"
  },
  {
    "text": "dimensional position of three members and we can represent it as object with",
    "start": "599839",
    "end": "605320"
  },
  {
    "text": "first me zero member first and second so it's inside one object and",
    "start": "605320",
    "end": "612839"
  },
  {
    "text": "there are three sub objects sorry it's like low because I need to put everything on top so I hope",
    "start": "612839",
    "end": "619519"
  },
  {
    "text": "you can see it then we have another structure items which contains up uh",
    "start": "619519",
    "end": "625880"
  },
  {
    "text": "eight uh items and uh also count of them",
    "start": "625880",
    "end": "631320"
  },
  {
    "text": "and you can represent it like this is everything okay with this have like",
    "start": "631800",
    "end": "636880"
  },
  {
    "text": "array 0 1 2 seven and count patri is this",
    "start": "636880",
    "end": "644839"
  },
  {
    "text": "right ptia doesn't know you can point at behind uh array",
    "start": "644839",
    "end": "652440"
  },
  {
    "text": "and also count in your world it's same address in my world it's",
    "start": "652440",
    "end": "657800"
  },
  {
    "text": "not in my world these two pointers are completely different my world is",
    "start": "657800",
    "end": "664839"
  },
  {
    "text": "secure so uh no this is not right so actually items is uh one object of data",
    "start": "665880",
    "end": "673800"
  },
  {
    "text": "and count and inside of data is array of eight uh",
    "start": "673800",
    "end": "679760"
  },
  {
    "text": "items so and there is another type Universe which contains only items just",
    "start": "679760",
    "end": "685160"
  },
  {
    "text": "I needed something on top of it it's structure of one",
    "start": "685160",
    "end": "690399"
  },
  {
    "text": "member so if I have object allocated or named a",
    "start": "690399",
    "end": "696720"
  },
  {
    "text": "variable a un of type Universe the name points at the object",
    "start": "696720",
    "end": "702720"
  },
  {
    "text": "itself but uh if I want to look at the sub object I can uh have pointer on the",
    "start": "702720",
    "end": "710279"
  },
  {
    "text": "items and I I mark it a do Zer and from the provence I can go only",
    "start": "710279",
    "end": "717120"
  },
  {
    "text": "down so if I have pointer at the items inside",
    "start": "717120",
    "end": "723279"
  },
  {
    "text": "I cannot go to any other member I can go only down I can also point at the end behind",
    "start": "723279",
    "end": "730880"
  },
  {
    "text": "the universe if I want to have like a range and so it's useful but let's go into items so I can point at count in",
    "start": "730880",
    "end": "739120"
  },
  {
    "text": "inside inside of items it's a. 0.1 and I have pointer on on in count",
    "start": "739120",
    "end": "746839"
  },
  {
    "text": "and nothing else I cannot go to the left to right right but if I look at the data",
    "start": "746839",
    "end": "752040"
  },
  {
    "text": "I can look at uh at the members of the array from the provant so I can go down and I from",
    "start": "752040",
    "end": "759040"
  },
  {
    "text": "there I can go to item T like this I can go also behind item T",
    "start": "759040",
    "end": "764600"
  },
  {
    "text": "but I'm still not going to uh second member I'm still at zero",
    "start": "764600",
    "end": "770760"
  },
  {
    "text": "member what's happening",
    "start": "770760",
    "end": "776160"
  },
  {
    "text": "huh uh I can go back by not like uh from the pointer I need to go back and then I",
    "start": "776160",
    "end": "783800"
  },
  {
    "text": "can point like this and always the prominence is only",
    "start": "783800",
    "end": "789199"
  },
  {
    "text": "like can take me down and if I'm inside of array I can go also to other",
    "start": "789199",
    "end": "796399"
  },
  {
    "text": "members and also I can go behind the array because I want if I want to pointer starting from first element to",
    "start": "796880",
    "end": "802959"
  },
  {
    "text": "the last element I need to point behind the last element I can point at the items T",
    "start": "802959",
    "end": "810399"
  },
  {
    "text": "behind and is different Provence than this one okay what's the difference between L",
    "start": "810399",
    "end": "818360"
  },
  {
    "text": "value and L value from Clank Point like Clank",
    "start": "818360",
    "end": "823880"
  },
  {
    "text": "interpreter point of view one is on left and one is on",
    "start": "823880",
    "end": "829199"
  },
  {
    "text": "right from The Interpreter point of view uh it doesn't there is no difference",
    "start": "830240",
    "end": "835759"
  },
  {
    "text": "it's a part of the code uh only difference from our perspective",
    "start": "835759",
    "end": "842000"
  },
  {
    "text": "for r value is just it's different uh pointer or reference but it uh it's can",
    "start": "842000",
    "end": "847920"
  },
  {
    "text": "it's marked as temporary it will be soon destroyed and you can safely take something from it and uh in C++ there is",
    "start": "847920",
    "end": "855120"
  },
  {
    "text": "no thing like moving something you're always doing copy and it can be cheap or",
    "start": "855120",
    "end": "860839"
  },
  {
    "text": "expensive copy usually means expensive copy and move mean cheap copy like stealing",
    "start": "860839",
    "end": "866720"
  },
  {
    "text": "pointer so lifetime because if something is temporary we need to talk about",
    "start": "866720",
    "end": "872000"
  },
  {
    "text": "lifetime so we have Global variables it's a pyramid Global variables and constant",
    "start": "872000",
    "end": "878759"
  },
  {
    "text": "and from the left to the right is like lifetime of your program kind of on top you can you can scope based variables",
    "start": "878759",
    "end": "887000"
  },
  {
    "text": "which is uh variables in your function in your blocks then you have Temporaries",
    "start": "887000",
    "end": "894079"
  },
  {
    "text": "which are parts of your Expressions compiler will create them to evaluate your expressions and it will destroy",
    "start": "894079",
    "end": "899600"
  },
  {
    "text": "them at the end of the expression and you can have custom allocations inside of the expression you",
    "start": "899600",
    "end": "906240"
  },
  {
    "text": "will allocate something and because it's custom you can do whatever you want so it will maybe",
    "start": "906240",
    "end": "912639"
  },
  {
    "text": "leak also Temporaries can can be extended if comp sees that this temporary is use point that uh somehow",
    "start": "912720",
    "end": "920680"
  },
  {
    "text": "rules and I'm not sure about them because they are hard so it can be like",
    "start": "920680",
    "end": "927360"
  },
  {
    "text": "that okay so identifier or what you are pointing at it's its",
    "start": "927360",
    "end": "933440"
  },
  {
    "text": "location Global variables are identified by its name as node local variables identified by as",
    "start": "933440",
    "end": "941519"
  },
  {
    "text": "node and version so if you go again to same variable it's diff uh comp can",
    "start": "941519",
    "end": "947519"
  },
  {
    "text": "actually detect it's different value there than you expect and can detect error I don't know actually how to like",
    "start": "947519",
    "end": "954880"
  },
  {
    "text": "uh trigger it but that's how I see it I'm right Cher",
    "start": "954880",
    "end": "960399"
  },
  {
    "text": "yeah I mean all this can be totally wrong because I uh like did archology in",
    "start": "960399",
    "end": "966480"
  },
  {
    "text": "Clank and try to understand the code from reading the code so take with gr of salt and allocated values are identified",
    "start": "966480",
    "end": "974040"
  },
  {
    "text": "by unique key you you get uh with allocation it actually counter a few",
    "start": "974040",
    "end": "980720"
  },
  {
    "text": "number of allocations so let's have value of two",
    "start": "980720",
    "end": "986240"
  },
  {
    "text": "two integers a pair and we want to point from",
    "start": "986240",
    "end": "991920"
  },
  {
    "text": "somewhere we need in pointer we need two things we need ID of the",
    "start": "991920",
    "end": "998399"
  },
  {
    "text": "thing if it's stock based Global based or allocated so in",
    "start": "998399",
    "end": "1004639"
  },
  {
    "text": "this case it's local variable inside a function it just points at the as node",
    "start": "1004639",
    "end": "1011680"
  },
  {
    "text": "because compile has the ASD of H C++ program and there is somewhere variable",
    "start": "1011680",
    "end": "1017600"
  },
  {
    "text": "in it and prence in this case we are pointing at first member so prence is",
    "start": "1017600",
    "end": "1024679"
  },
  {
    "text": "zero and if it's allocated we can put their allocation ID and it's different",
    "start": "1024880",
    "end": "1030240"
  },
  {
    "text": "type of pointer to allocate that thing and The Interpreter will find it for",
    "start": "1030240",
    "end": "1036438"
  },
  {
    "text": "you so consult evaluator just works ASD in Clank at least it's not nothing",
    "start": "1036439",
    "end": "1042880"
  },
  {
    "text": "fancy you have as3 and it just going into into it as you would imagine and it",
    "start": "1042880",
    "end": "1048600"
  },
  {
    "text": "there is operation uh plus it will look on left operant evaluate it on right operant evaluate it put them together",
    "start": "1048600",
    "end": "1054760"
  },
  {
    "text": "and return return the result it's the most sa approach you can do and it",
    "start": "1054760",
    "end": "1061720"
  },
  {
    "text": "works and this is all implemented in C++ and uh it has like funny",
    "start": "1061720",
    "end": "1068240"
  },
  {
    "text": "consequences because if you want to implement some feature usually the best thing to",
    "start": "1068240",
    "end": "1073880"
  },
  {
    "text": "implement a feature is the feature itself so do you want to implement exceptions in in context per exceptions",
    "start": "1073880",
    "end": "1081080"
  },
  {
    "text": "would work best you want to implement coroutines in context per you need coroutines",
    "start": "1081080",
    "end": "1087840"
  },
  {
    "text": "probably it's confusing you don't you don't you don't",
    "start": "1087840",
    "end": "1093159"
  },
  {
    "text": "want to put something into integer because that's like what my heart says just put it in integer but you need to",
    "start": "1093159",
    "end": "1099559"
  },
  {
    "text": "put it into AP value so my starts in Clank were kind of really",
    "start": "1099559",
    "end": "1105360"
  },
  {
    "text": "confusing but it helped me understand abstract C++ machine much",
    "start": "1105360",
    "end": "1110600"
  },
  {
    "text": "better because uh Contex per interpreter is just like kind of extreme",
    "start": "1110600",
    "end": "1116559"
  },
  {
    "text": "interpretation of the abstract machine which is almost one to one",
    "start": "1116559",
    "end": "1122760"
  },
  {
    "text": "mapping so uh it can detect an evolation of the abstract machine and uh an evalation is usually",
    "start": "1122760",
    "end": "1131280"
  },
  {
    "text": "uh in your land again security issue so if you can write your code as a cons",
    "start": "1131280",
    "end": "1137360"
  },
  {
    "text": "expert and test it for all the possible inputs in Conex per or the at least like",
    "start": "1137360",
    "end": "1142840"
  },
  {
    "text": "uh border like uh conditions and uh compiler won't tell you anything that anything bad then your",
    "start": "1142840",
    "end": "1150000"
  },
  {
    "text": "code should be safe and CH is everything I",
    "start": "1150000",
    "end": "1156039"
  },
  {
    "text": "bro that is the uh star",
    "start": "1156039",
    "end": "1160600"
  },
  {
    "text": "there so most of the standard Library should be Conant available do you agree with me I mean it's a standard library",
    "start": "1161760",
    "end": "1168440"
  },
  {
    "text": "and it should be used in every C++ variation there is so it should be also",
    "start": "1168440",
    "end": "1173919"
  },
  {
    "text": "usable in Contex per I want to use string in Conex per I want to use uh arrays in Conex I want to use",
    "start": "1173919",
    "end": "1180640"
  },
  {
    "text": "mathematical operation I don't want to implement them because they said that standard library is supposed to be uh",
    "start": "1180640",
    "end": "1189039"
  },
  {
    "text": "things which are hard to implement and easy to make it wrong so they should be",
    "start": "1189039",
    "end": "1194480"
  },
  {
    "text": "there for you usable also in conser I know some people don't see a value on",
    "start": "1194480",
    "end": "1201320"
  },
  {
    "text": "writing context per quote I do because you can precalculate",
    "start": "1201320",
    "end": "1206960"
  },
  {
    "text": "anything uh and uh if you can write everything in Contex you don't need to",
    "start": "1206960",
    "end": "1212200"
  },
  {
    "text": "uh have like two implementations uh of same thing in your program one is Con exper one is not and doing like if cons",
    "start": "1212200",
    "end": "1219760"
  },
  {
    "text": "expert and if conal and do something like else because language rules won't",
    "start": "1219760",
    "end": "1226200"
  },
  {
    "text": "allow you so but most of the library is not and it makes me sad and you should",
    "start": "1226200",
    "end": "1234760"
  },
  {
    "text": "do so uh let's talk about containers in standard",
    "start": "1234760",
    "end": "1240159"
  },
  {
    "text": "library and it's a quiz time so I expect you interaction is array that array uh",
    "start": "1240159",
    "end": "1248440"
  },
  {
    "text": "Contex per mostly what do you mean with",
    "start": "1248440",
    "end": "1255760"
  },
  {
    "text": "mostly is Conex yes good that was easy it's Conex C++",
    "start": "1256640",
    "end": "1264880"
  },
  {
    "text": "11 deck you are",
    "start": "1264880",
    "end": "1272000"
  },
  {
    "text": "right how many of you you are using deck uh deck uh intentionally or via uh",
    "start": "1272000",
    "end": "1281120"
  },
  {
    "text": "ad container adapter because if you st a stack or St",
    "start": "1281120",
    "end": "1286559"
  },
  {
    "text": "a que you are using deck yeah some people",
    "start": "1286559",
    "end": "1293760"
  },
  {
    "text": "do flat map it's a new thing in",
    "start": "1293760",
    "end": "1299039"
  },
  {
    "text": "standard there is one voice saying yes Conex uh someone in behind",
    "start": "1301760",
    "end": "1309200"
  },
  {
    "text": "is showing like this Jason",
    "start": "1309200",
    "end": "1313600"
  },
  {
    "text": "Turner it's not it's a new thing and it's still not Conex",
    "start": "1314400",
    "end": "1320799"
  },
  {
    "text": "per flat set same thing forward list the",
    "start": "1320799",
    "end": "1327039"
  },
  {
    "text": "most easiest structure you can",
    "start": "1327039",
    "end": "1331360"
  },
  {
    "text": "Implement I expect you answers because I'm not going to forward okay you are right and it's",
    "start": "1333640",
    "end": "1341960"
  },
  {
    "text": "said in place vector and new think we added just recently",
    "start": "1341960",
    "end": "1349039"
  },
  {
    "text": "yes with star for cons exper types uh it needs to",
    "start": "1349279",
    "end": "1354440"
  },
  {
    "text": "be uh default initializable because it's using under",
    "start": "1354440",
    "end": "1359640"
  },
  {
    "text": "link array and array needs to be allocated if it's on",
    "start": "1359640",
    "end": "1365520"
  },
  {
    "text": "stack hi it's going to be in",
    "start": "1365960",
    "end": "1371278"
  },
  {
    "text": "standard it's already in library so it should be in 26 hi is data structure",
    "start": "1373039",
    "end": "1378080"
  },
  {
    "text": "which uh gives you pointer stability your item will never move and also give you",
    "start": "1378080",
    "end": "1385919"
  },
  {
    "text": "uh like kind mostly the stability it's useful for Network programming and game",
    "start": "1385919",
    "end": "1394520"
  },
  {
    "text": "development and in the paper it's I think rision 28 or something the author",
    "start": "1394520",
    "end": "1400080"
  },
  {
    "text": "uh says uh yes I can make a Conex but it will be much harder so I'm not trying",
    "start": "1400080",
    "end": "1407278"
  },
  {
    "text": "list this should be cons I'm so disappointed",
    "start": "1412480",
    "end": "1419159"
  },
  {
    "text": "map no set obviously no it's same container basic",
    "start": "1419159",
    "end": "1426960"
  },
  {
    "text": "string yes it's Cons exper with",
    "start": "1426960",
    "end": "1431880"
  },
  {
    "text": "caveat uh under the map no under the set of obviously also know",
    "start": "1432360",
    "end": "1440039"
  },
  {
    "text": "while array Jason Turner things I mean uh uh",
    "start": "1440039",
    "end": "1445919"
  },
  {
    "text": "it's uh it's uh mom we want simed no we have simed at home wall",
    "start": "1445919",
    "end": "1451840"
  },
  {
    "text": "array uh yeah it's not Vector yes at least",
    "start": "1451840",
    "end": "1460720"
  },
  {
    "text": "something we need to look at some details in the con in containers set array is Contex it's just",
    "start": "1460720",
    "end": "1468440"
  },
  {
    "text": "array wrapped into type and in template it's Conex per Vector it's just three",
    "start": "1468440",
    "end": "1474480"
  },
  {
    "text": "pointers you allocate a storage you have back and capacity you can add something into",
    "start": "1474480",
    "end": "1481679"
  },
  {
    "text": "it and when it's full it will allocate new storage move uh items from",
    "start": "1482120",
    "end": "1488440"
  },
  {
    "text": "it and then uh deallocate it and you you you have some space to put new things",
    "start": "1488440",
    "end": "1496080"
  },
  {
    "text": "again and it goes like this it will never shrink unless you ask it",
    "start": "1496080",
    "end": "1504640"
  },
  {
    "text": "to St list that list is not Conex per for some",
    "start": "1504679",
    "end": "1509960"
  },
  {
    "text": "reason but Vector is and list is just allocating node you have front back you",
    "start": "1509960",
    "end": "1515720"
  },
  {
    "text": "can insert behind it you can insert behind it or you caner in front of it it with o one",
    "start": "1515720",
    "end": "1523240"
  },
  {
    "text": "complexity and it's not Contex per do you have any idea why Chandler it's it's you will still",
    "start": "1525039",
    "end": "1532600"
  },
  {
    "text": "there in the committee do you have any idea why yeah you can erase items",
    "start": "1532600",
    "end": "1541120"
  },
  {
    "text": "also it's easy and it's super easy algorithm everyone here in a room I",
    "start": "1543000",
    "end": "1548320"
  },
  {
    "text": "believe can implement it as context okay in place Vector it's using",
    "start": "1548320",
    "end": "1556640"
  },
  {
    "text": "array and it's not expert because you cannot have an initialized element in",
    "start": "1556640",
    "end": "1561679"
  },
  {
    "text": "the array and we are still trying to find how to bend rules to allow it",
    "start": "1561679",
    "end": "1567240"
  },
  {
    "text": "somehow like Mark it set initialized or with some attribute or using some Union",
    "start": "1567240",
    "end": "1573039"
  },
  {
    "text": "tricks but if you put Union into uh uh into array stly pointer at the item in",
    "start": "1573039",
    "end": "1580039"
  },
  {
    "text": "the union because prence is not able to jump to next item in in the a so it's",
    "start": "1580039",
    "end": "1586320"
  },
  {
    "text": "not continuous storage suddenly and I think in place Vector should be contiguous at least people would expect",
    "start": "1586320",
    "end": "1592720"
  },
  {
    "text": "that under this name so do you want contiguous or do you",
    "start": "1592720",
    "end": "1598559"
  },
  {
    "text": "want uh Contex context per for",
    "start": "1598559",
    "end": "1603320"
  },
  {
    "text": "everything I can put stuff like this so it's not context per",
    "start": "1604360",
    "end": "1610840"
  },
  {
    "text": "deck this one is not animated uh sorry uh on the left you have prefix on the",
    "start": "1610840",
    "end": "1616520"
  },
  {
    "text": "top and uh suffix on the right and there is index structure which is just a vector of pointers at uh leaves and",
    "start": "1616520",
    "end": "1623960"
  },
  {
    "text": "leaves are always fix size and you put on on front on right by",
    "start": "1623960",
    "end": "1631120"
  },
  {
    "text": "one and yeah that's all like is simple L structure just by diagram it should be",
    "start": "1631120",
    "end": "1639360"
  },
  {
    "text": "Contex and it's not so these are all seems Implement",
    "start": "1639360",
    "end": "1644799"
  },
  {
    "text": "implementable and I see Bry so we can blame br he was chair of Library Evolution",
    "start": "1644799",
    "end": "1651640"
  },
  {
    "text": "so so why is only vector and string Contex",
    "start": "1651640",
    "end": "1656799"
  },
  {
    "text": "per because these are uh like important for",
    "start": "1662559",
    "end": "1668039"
  },
  {
    "text": "someone and uh it cost me chocolate to put it into the last possible slot in library Waring group to",
    "start": "1668039",
    "end": "1676159"
  },
  {
    "text": "20 but long is improving with every C++ version uh and in past some of these",
    "start": "1676720",
    "end": "1682799"
  },
  {
    "text": "features like allocation were not a available in Contex so it kind of makes sense but library is lagging so sorry",
    "start": "1682799",
    "end": "1692080"
  },
  {
    "text": "Bryce and so context limitations another quiz time",
    "start": "1692080",
    "end": "1698799"
  },
  {
    "text": "oh Atomic operations can you use them in Contex per",
    "start": "1698799",
    "end": "1705518"
  },
  {
    "text": "someone is like noting like this someone's like noing like this uh not yet",
    "start": "1711320",
    "end": "1718039"
  },
  {
    "text": "no changing AC member of Union yeah that's a new feature of 20 20",
    "start": "1718039",
    "end": "1725840"
  },
  {
    "text": "I think 20 yeah yeah 20 my slides know better counterflow with if for and",
    "start": "1725840",
    "end": "1733279"
  },
  {
    "text": "while it's 10 year old thing C++ 14",
    "start": "1733279",
    "end": "1739320"
  },
  {
    "text": "so t++ 11 didn't have control flow operation everything everything was able to done via conditional operator which",
    "start": "1739320",
    "end": "1746279"
  },
  {
    "text": "work I think it was like like people Overlook it when specify it but it worked and that was",
    "start": "1746279",
    "end": "1753519"
  },
  {
    "text": "the reason why we got if for a while later exception",
    "start": "1753519",
    "end": "1759120"
  },
  {
    "text": "throwing no I think uh I need to ask how many of",
    "start": "1759120",
    "end": "1765559"
  },
  {
    "text": "you like exception I I also like them by the way good I",
    "start": "1765559",
    "end": "1772600"
  },
  {
    "text": "like it too lambdas plus",
    "start": "1772600",
    "end": "1780158"
  },
  {
    "text": "17 triv default initial initial sorry so you cannot uh you don't need to",
    "start": "1781240",
    "end": "1788080"
  },
  {
    "text": "initialize every context variable inside context per because it will beiz for",
    "start": "1788080",
    "end": "1794759"
  },
  {
    "text": "you 20",
    "start": "1795799",
    "end": "1799799"
  },
  {
    "text": "20 four years ago try",
    "start": "1801360",
    "end": "1807120"
  },
  {
    "text": "catch I see some throning some not like uh I'm not going to like look at you",
    "start": "1810480",
    "end": "1817880"
  },
  {
    "text": "because you know about uh",
    "start": "1817880",
    "end": "1821840"
  },
  {
    "text": "yeah yes but uh you you will never go into catch Handler you will just uh",
    "start": "1823000",
    "end": "1830240"
  },
  {
    "text": "enter try Handler and uh if you uh run into any exception it will stop the",
    "start": "1830240",
    "end": "1835679"
  },
  {
    "text": "consult evaluation at all like totally so yes unevaluated inline",
    "start": "1835679",
    "end": "1843919"
  },
  {
    "text": "assembly Pat patri is shrugging uh",
    "start": "1852120",
    "end": "1858880"
  },
  {
    "text": "20 if it's not unevaluated it can be there there there",
    "start": "1858880",
    "end": "1864440"
  },
  {
    "text": "was a shift in Conex I think uh in past uh it was supposed to be always constant available for everything you can put in",
    "start": "1864440",
    "end": "1870600"
  },
  {
    "text": "it and uh we slowly drift",
    "start": "1870600",
    "end": "1875600"
  },
  {
    "text": "into it can be constant abated for some inputs and for some",
    "start": "1875679",
    "end": "1880799"
  },
  {
    "text": "part so I think the like requirement for Contex is like weakening with every",
    "start": "1880799",
    "end": "1886080"
  },
  {
    "text": "standard and hopefully maybe in future maybe it will go away and everything will be available if it's visible I",
    "start": "1886080",
    "end": "1893240"
  },
  {
    "text": "don't know that's my wish I had paper and it burned quite",
    "start": "1893240",
    "end": "1899039"
  },
  {
    "text": "well usage of variables in TI of Contex per",
    "start": "1899200",
    "end": "1905880"
  },
  {
    "text": "I'm it's obvious that yes but in which",
    "start": "1905880",
    "end": "1911080"
  },
  {
    "text": "version so uh no Jason that is no",
    "start": "1913200",
    "end": "1919120"
  },
  {
    "text": "16 ah yeah 14 yes using bite array as object",
    "start": "1919120",
    "end": "1926279"
  },
  {
    "text": "storage trick useful for like St function and other like uh polymorphic",
    "start": "1926279",
    "end": "1936559"
  },
  {
    "text": "type what do you think Sean what do you",
    "start": "1937600",
    "end": "1942960"
  },
  {
    "text": "think yeah no I want it but it's hard and IAL with",
    "start": "1943799",
    "end": "1950320"
  },
  {
    "text": "actually with with Richard Chandler how to make it work somehow magically by",
    "start": "1950320",
    "end": "1956559"
  },
  {
    "text": "stealing the first AP value put it there and make make all the AP values like no there is nothing to look for and I have",
    "start": "1956559",
    "end": "1963880"
  },
  {
    "text": "magical function which will allow you to access the new value",
    "start": "1963880",
    "end": "1970240"
  },
  {
    "text": "like Val interpret class there are some use cases for interpret Cass which are valid by",
    "start": "1970519",
    "end": "1976679"
  },
  {
    "text": "standard and and like you can take pointer to char and convert it into",
    "start": "1976679",
    "end": "1983760"
  },
  {
    "text": "object because it's B array maybe or you can uh R cast uh if you have trial type",
    "start": "1983760",
    "end": "1991600"
  },
  {
    "text": "and you have poter at first member that is specification that you can actually go to its parent type like to its owning",
    "start": "1991600",
    "end": "1999159"
  },
  {
    "text": "type inside and it's actually use in senders and receivers there is like Union with bite",
    "start": "1999159",
    "end": "2006760"
  },
  {
    "text": "array and there is an object and from the object they are taking pointer to",
    "start": "2006760",
    "end": "2012279"
  },
  {
    "text": "the union and from the union because it's first and it's trial because it's bite array it's not type they are going to",
    "start": "2012279",
    "end": "2018399"
  },
  {
    "text": "their parent object and because the parent object is uh parent like uh in class for child they up casting to the",
    "start": "2018399",
    "end": "2027360"
  },
  {
    "text": "child yes yes yeah yeah I that was my exactly like uh",
    "start": "2027360",
    "end": "2034840"
  },
  {
    "text": "like I'm trying to make everything context and when L told me about this I was like",
    "start": "2034840",
    "end": "2042559"
  },
  {
    "text": "no no I'm sorry and virtual bases you can have uh",
    "start": "2042559",
    "end": "2049720"
  },
  {
    "text": "virtual bases chender says yes and",
    "start": "2049720",
    "end": "2057200"
  },
  {
    "text": "no we can have virtual functions but on",
    "start": "2057200",
    "end": "2061919"
  },
  {
    "text": "basis because someone didn't specify it or someone didn't scratch the one",
    "start": "2063079",
    "end": "2068520"
  },
  {
    "text": "paragraph saying you cannot have virtual basis and someone didn't implement it",
    "start": "2068520",
    "end": "2075320"
  },
  {
    "text": "then so yeah in future context",
    "start": "2075320",
    "end": "2081520"
  },
  {
    "text": "Improvement I have few papers when I was supposed to working on these slides I was procrastinating a lot so I wrote a",
    "start": "2081520",
    "end": "2088720"
  },
  {
    "text": "few papers for example all exception throwing in Conant",
    "start": "2088720",
    "end": "2094480"
  },
  {
    "text": "evaluation it's already in core and Library tion Library wording group and",
    "start": "2094480",
    "end": "2100359"
  },
  {
    "text": "uh you can throw exceptions in uh exper and it's actually nice to give you nice",
    "start": "2100359",
    "end": "2105680"
  },
  {
    "text": "error message outside of con exp evaluation without bothering you with long stock trades if you are just user",
    "start": "2105680",
    "end": "2112040"
  },
  {
    "text": "of the library for example in C I will be able to give you a nice error message you provide uh expression with wrong",
    "start": "2112040",
    "end": "2120119"
  },
  {
    "text": "syntax you don't need to know from where the exception was",
    "start": "2120119",
    "end": "2125200"
  },
  {
    "text": "thrown but tagging because pointer is just data structure and in Patria world",
    "start": "2126480",
    "end": "2132560"
  },
  {
    "text": "it's just B and address and not all bites are useful and used so you can use",
    "start": "2132560",
    "end": "2139000"
  },
  {
    "text": "them to store other value and it's use technique uh even in Clank",
    "start": "2139000",
    "end": "2144880"
  },
  {
    "text": "itself there is thing called uh in pointer or pointer in pair and uh so you",
    "start": "2144880",
    "end": "2152359"
  },
  {
    "text": "can have pointer on something and two two bits from alignment which are always zero are used used to say what the thing",
    "start": "2152359",
    "end": "2159200"
  },
  {
    "text": "is and there is a cast so you can have like pointer at something or something and it just 8 bytes or four B and it",
    "start": "2159200",
    "end": "2168280"
  },
  {
    "text": "saves some space and it's useful technique but I want to make it also in Contex per but in expert no address so",
    "start": "2168280",
    "end": "2177000"
  },
  {
    "text": "actually the bits uh to store the information is just uh some sort of metadata inside of a",
    "start": "2177000",
    "end": "2184680"
  },
  {
    "text": "pointer Contex atomics and r i mean no one will write in for future",
    "start": "2185440",
    "end": "2193480"
  },
  {
    "text": "any multi code in context per but uh you should be able to use",
    "start": "2193480",
    "end": "2200280"
  },
  {
    "text": "same code some algorithm which takes like give me one item from some que or",
    "start": "2200280",
    "end": "2206599"
  },
  {
    "text": "some like array to process so Atomic should work in Conex per because Conex per is just an implementation of",
    "start": "2206599",
    "end": "2214400"
  },
  {
    "text": "abstract machine single threaded and atomic work in second environment so it",
    "start": "2214400",
    "end": "2220160"
  },
  {
    "text": "should work it's just a normal operation but uh you don't need to write if con all and",
    "start": "2220160",
    "end": "2228119"
  },
  {
    "text": "just to work for you so magically containers and adapters every",
    "start": "2228119",
    "end": "2234280"
  },
  {
    "text": "container and adapter should be context per I have paper for that and I run into some",
    "start": "2234280",
    "end": "2242119"
  },
  {
    "text": "issues for example you cannot compare pointers obviously as I showed you with a prominant",
    "start": "2242119",
    "end": "2248800"
  },
  {
    "text": "so uh you cannot put as a key into map pointer you need to put something else",
    "start": "2248800",
    "end": "2255400"
  },
  {
    "text": "into it also you cannot hash pointers based on current rules you",
    "start": "2255400",
    "end": "2260920"
  },
  {
    "text": "cannot have stood hash of pointer because hash inside context per is a",
    "start": "2260920",
    "end": "2266359"
  },
  {
    "text": "symbolic uh like pointer symbolic address and uh in R time it will be",
    "start": "2266359",
    "end": "2272079"
  },
  {
    "text": "different even if it's like same object because it's subjected to Linker or optimization so you never know and uh",
    "start": "2272079",
    "end": "2279280"
  },
  {
    "text": "the hash will be different so you can also hash adapters so under that map for",
    "start": "2279280",
    "end": "2284599"
  },
  {
    "text": "Keys uh with pointers won't work but for everything else will",
    "start": "2284599",
    "end": "2289960"
  },
  {
    "text": "work Conex for all the exception things Jason I was",
    "start": "2289960",
    "end": "2295960"
  },
  {
    "text": "like inspired and uh it's just making all the Conex objects uh EXs cons xer it's just",
    "start": "2295960",
    "end": "2303720"
  },
  {
    "text": "marking all the Dov members cons xer and they usually just return string leral so",
    "start": "2303720",
    "end": "2309800"
  },
  {
    "text": "there's nothing controversial but it's house cleaning Contex",
    "start": "2309800",
    "end": "2317119"
  },
  {
    "text": "routines I have them partially work and it's",
    "start": "2318720",
    "end": "2323640"
  },
  {
    "text": "beautiful you can write St generator in context plan use it to fill some uh",
    "start": "2325040",
    "end": "2330720"
  },
  {
    "text": "structure or and it should work because it's obvious it's just like the wording",
    "start": "2330720",
    "end": "2336800"
  },
  {
    "text": "itself is actually scratching two sentences in full standard and everything should magically",
    "start": "2336800",
    "end": "2344560"
  },
  {
    "text": "work because nothing is specified in a way it shouldn't so only these two sentences",
    "start": "2344560",
    "end": "2351720"
  },
  {
    "text": "are actually forbidding us like to have",
    "start": "2351720",
    "end": "2357040"
  },
  {
    "text": "it so what's my favorite structure uh it's also my motivation for",
    "start": "2357040",
    "end": "2363560"
  },
  {
    "text": "all this because I found recently it's VI go data structure which I really like",
    "start": "2363560",
    "end": "2370000"
  },
  {
    "text": "and I want to be able to write it G exper and there is a few things which",
    "start": "2370000",
    "end": "2375720"
  },
  {
    "text": "blocks me and I I need to fix them first you need like the light bulb",
    "start": "2375720",
    "end": "2381640"
  },
  {
    "text": "broken so I need to fix uh something or something it's called HMT HH array",
    "start": "2381640",
    "end": "2388319"
  },
  {
    "text": "mapped three and it's all cool things in",
    "start": "2388319",
    "end": "2394800"
  },
  {
    "text": "one so what Happening Here something is broken in my presentation",
    "start": "2394800",
    "end": "2403440"
  },
  {
    "text": "oh what's happening here no it worked just",
    "start": "2403839",
    "end": "2410318"
  },
  {
    "text": "before okay um I'm sorry I was finishing this present this",
    "start": "2410359",
    "end": "2416960"
  },
  {
    "text": "this this slide just before I went here and uh technically uh when you have a",
    "start": "2416960",
    "end": "2424318"
  },
  {
    "text": "three uh like set map uh you compare them against ordering and uh it's always",
    "start": "2424359",
    "end": "2431520"
  },
  {
    "text": "all lock and operation if you have under map it's all one at Best operation but",
    "start": "2431520",
    "end": "2437920"
  },
  {
    "text": "uh map grows linearly and under the map uh grows like uh you need to uh reash",
    "start": "2437920",
    "end": "2445079"
  },
  {
    "text": "everything and grow it so it's growing like every time when you it grows it's linear operation",
    "start": "2445079",
    "end": "2451520"
  },
  {
    "text": "so H map 3A is data structure which",
    "start": "2451520",
    "end": "2456640"
  },
  {
    "text": "grows as St map or as three but also it's uh uh giving you o1 operations for",
    "start": "2456640",
    "end": "2465280"
  },
  {
    "text": "searching inserting updating",
    "start": "2465280",
    "end": "2471359"
  },
  {
    "text": "removing and it works like uh this uh you have uh a value and you hash it with a hash",
    "start": "2471599",
    "end": "2480119"
  },
  {
    "text": "of 32 bites uh bit sorry uh size and you take",
    "start": "2480119",
    "end": "2486720"
  },
  {
    "text": "each eight four depends on configuration and",
    "start": "2486720",
    "end": "2491880"
  },
  {
    "text": "so let's say uh you take first eight bits and it's position in first level",
    "start": "2491880",
    "end": "2499640"
  },
  {
    "text": "node so if like first uh level node it's 16 items 16 is yeah power of n eight uh",
    "start": "2499640",
    "end": "2509119"
  },
  {
    "text": "so have like 16 items on the first level and uh first four bits or",
    "start": "2509119",
    "end": "2515200"
  },
  {
    "text": "first yeah first four bits of the the hash is let's say three so you will look",
    "start": "2515200",
    "end": "2521599"
  },
  {
    "text": "at element number three so it's o1 operation and then uh",
    "start": "2521599",
    "end": "2528040"
  },
  {
    "text": "you look on next eight bits and you will uh do some part of the HH and you go",
    "start": "2528040",
    "end": "2534520"
  },
  {
    "text": "like this and uh you will always do uh number of operation which depends on",
    "start": "2534520",
    "end": "2540200"
  },
  {
    "text": "size of the HH and a size of the HH is constant that's kind of cool but you can",
    "start": "2540200",
    "end": "2548000"
  },
  {
    "text": "better if you uh uh use pointer tagging for the",
    "start": "2548000",
    "end": "2553200"
  },
  {
    "text": "pointers inside of the uh note you can actually say uh if it's note or uh",
    "start": "2553200",
    "end": "2560760"
  },
  {
    "text": "leaf and if it's a leaf you if there is only one leaf in your sub tree you can",
    "start": "2560760",
    "end": "2566440"
  },
  {
    "text": "just skip it and just put Leaf there so it's o1 and or o",
    "start": "2566440",
    "end": "2574520"
  },
  {
    "text": "one better o one and yeah and you can do even better",
    "start": "2574839",
    "end": "2580880"
  },
  {
    "text": "because nodes are like 16 pointers which kind of large array you can put uh bit",
    "start": "2580880",
    "end": "2588440"
  },
  {
    "text": "map in front of the uh node and uh use only like have the notes of size of",
    "start": "2588440",
    "end": "2596200"
  },
  {
    "text": "actually only nend noes you you need and bit map will tell you which Noe is",
    "start": "2596200",
    "end": "2601520"
  },
  {
    "text": "enabled so if you have like four bits in the bit map enabled in your note there",
    "start": "2601520",
    "end": "2606559"
  },
  {
    "text": "will be only four items and the size of the whole note will be smaller and I have anim I had",
    "start": "2606559",
    "end": "2612920"
  },
  {
    "text": "animation wait a sec I will try to open it Safari because I'm using some feature in",
    "start": "2612920",
    "end": "2620119"
  },
  {
    "text": "the presentation which is uh supposed to be in Chrome release today but not",
    "start": "2620119",
    "end": "2626200"
  },
  {
    "text": "yet so yeah yeah yeah okay so we have root and we have some uh uh item I'm",
    "start": "2626240",
    "end": "2632800"
  },
  {
    "text": "using only 16 bit uh hash because it's so I can put it in slide so I have like item on the top with some hash and uh we",
    "start": "2632800",
    "end": "2640559"
  },
  {
    "text": "have uh top level Noe and inside of it there is a poter or position",
    "start": "2640559",
    "end": "2647240"
  },
  {
    "text": "four 0 0 1 2 3 4 then on next layer there is a position",
    "start": "2647240",
    "end": "2654240"
  },
  {
    "text": "on E which is 15 on next layer it's on position eight and on next layer it's on",
    "start": "2654240",
    "end": "2662559"
  },
  {
    "text": "position F it's just like you go just go like this",
    "start": "2662559",
    "end": "2667920"
  },
  {
    "text": "but you can do better we can have compressed noes with",
    "start": "2667920",
    "end": "2673240"
  },
  {
    "text": "bit map and uh only points to other items",
    "start": "2673240",
    "end": "2678880"
  },
  {
    "text": "somewhere else I don't care about it there's maybe only one there's like four and that is only one and there is the",
    "start": "2678880",
    "end": "2684960"
  },
  {
    "text": "value so you need to do pop count and uh convert the uh all the low bits which uh are not",
    "start": "2684960",
    "end": "2692839"
  },
  {
    "text": "yours to POS actual position in the node and you will select the right uh subnote and just go like this it's beautiful",
    "start": "2692839",
    "end": "2700599"
  },
  {
    "text": "data structure it grows like map and it",
    "start": "2700599",
    "end": "2706440"
  },
  {
    "text": "shrinks if you remove something and also uh it behaves as a hash",
    "start": "2706440",
    "end": "2712680"
  },
  {
    "text": "table you will never need to reash it CH do you like it I know you your hash",
    "start": "2712680",
    "end": "2718760"
  },
  {
    "text": "table is much faster than everything else and why do why don't you like",
    "start": "2718760",
    "end": "2725280"
  },
  {
    "text": "it okay you can like yeah I like",
    "start": "2725280",
    "end": "2733160"
  },
  {
    "text": "this and I don't like you and uh that is even better uh if you",
    "start": "2733160",
    "end": "2740680"
  },
  {
    "text": "uh added into note I don't have animation for that if you add into note also ref",
    "start": "2740680",
    "end": "2746160"
  },
  {
    "text": "count it can you can make this dat persistent so you can have multiple version of it sharing all Le common data",
    "start": "2746160",
    "end": "2754200"
  },
  {
    "text": "noes so you need actually a context per atomic operations for that",
    "start": "2754200",
    "end": "2759680"
  },
  {
    "text": "too so uh requirement for the language I want uh to support this is pointer tag",
    "start": "2759960",
    "end": "2765839"
  },
  {
    "text": "in so you can actually compress the uh like depth of the",
    "start": "2765839",
    "end": "2773160"
  },
  {
    "text": "tree uh variable size object so I can have variable size it can be done with",
    "start": "2773160",
    "end": "2778440"
  },
  {
    "text": "allocation uh so you can actually allocate like array and there are some tricks for some cost",
    "start": "2778440",
    "end": "2785680"
  },
  {
    "text": "but it can be done by but somehow we should also allow this Atomic operations",
    "start": "2785680",
    "end": "2791640"
  },
  {
    "text": "if you want to make it persistent so you can actually have ref count how many other like nodes are like pointing at my",
    "start": "2791640",
    "end": "2799800"
  },
  {
    "text": "notes so you can graph count and if some three is destroyed it will destroy only the noes which are not",
    "start": "2799800",
    "end": "2807160"
  },
  {
    "text": "there oh what happened and by storage for objects which is other approach for",
    "start": "2807160",
    "end": "2813400"
  },
  {
    "text": "dividable sized objects but also there that is the thing you don't need",
    "start": "2813400",
    "end": "2818839"
  },
  {
    "text": "pointers Cher you can actually write all this into a flat storage into by by",
    "start": "2818839",
    "end": "2825760"
  },
  {
    "text": "array and always upend only only you will always on every VAR will upend and",
    "start": "2825760",
    "end": "2831040"
  },
  {
    "text": "instead of pointers you will use offset they can be",
    "start": "2831040",
    "end": "2836440"
  },
  {
    "text": "shorter and suddenly you you have transac transaction log with data structure so you will always upend and",
    "start": "2836440",
    "end": "2843319"
  },
  {
    "text": "if you have also ref count there uh the root is always at the end so you",
    "start": "2843319",
    "end": "2848720"
  },
  {
    "text": "can have like if you have subspan or view to the array you have one version and then you have another version based",
    "start": "2848720",
    "end": "2855640"
  },
  {
    "text": "of theze of the subspan so you can actually write it into bait array so you don't have any",
    "start": "2855640",
    "end": "2862040"
  },
  {
    "text": "pointers at all Chandler is that okay for you still",
    "start": "2862040",
    "end": "2868119"
  },
  {
    "text": "no what can I do okay it's my favorite data structures",
    "start": "2868119",
    "end": "2876200"
  },
  {
    "text": "thank you",
    "start": "2876200",
    "end": "2878838"
  },
  {
    "text": "if you uh if you have any questions uh you are shy you can approach me if you are norian you can approach me too uh",
    "start": "2883000",
    "end": "2889760"
  },
  {
    "text": "because you are shy obviously and uh the audience get better every",
    "start": "2889760",
    "end": "2897720"
  },
  {
    "text": "year okay if you have question approach me if you want to ask here we can do",
    "start": "2897720",
    "end": "2905119"
  },
  {
    "text": "but for",
    "start": "2905760",
    "end": "2909760"
  }
]