[
  {
    "start": "0",
    "end": "141000"
  },
  {
    "text": "well welcome to converting a monolithic application to a more domain driven design my name is bill penberthien",
    "start": "8960",
    "end": "16400"
  },
  {
    "text": "i'm a dot-net developer advocate with aws that means my job focus is really on working with",
    "start": "16400",
    "end": "22320"
  },
  {
    "text": "net developers and helping them understand how to best take advantage of aws services",
    "start": "22320",
    "end": "28160"
  },
  {
    "text": "we then kind of take the interaction and the feedback that we get from that we take it back to our internal service",
    "start": "28160",
    "end": "33360"
  },
  {
    "text": "teams and we work with them to help them make sure that our net developer experience gets better",
    "start": "33360",
    "end": "39200"
  },
  {
    "text": "so also there were some uh earlier sessions from yesterday where there's some overlap with the talk that i'm",
    "start": "39200",
    "end": "44239"
  },
  {
    "text": "getting today and i think if you look at all three of those together they they make an interesting story",
    "start": "44239",
    "end": "50480"
  },
  {
    "text": "ann and sarah for example did one on common quandaries implementing your first event driven",
    "start": "50480",
    "end": "56600"
  },
  {
    "text": "architecture and hassam did one on practical domain driven design with ef core and i think both of those give",
    "start": "56600",
    "end": "62559"
  },
  {
    "text": "additional insight into this subject so if you missed them yesterday i strongly suggest that you uh",
    "start": "62559",
    "end": "67600"
  },
  {
    "text": "you watch the recordings when they become available so here's the agenda for the day um",
    "start": "67600",
    "end": "74400"
  },
  {
    "text": "we're going to first spend a little bit of time defining domain-driven design uh just to ensure that we're all on the",
    "start": "74400",
    "end": "79840"
  },
  {
    "text": "same page we'll then talk about some different technical approaches to doing the refactor",
    "start": "79840",
    "end": "84880"
  },
  {
    "text": "basically refactoring design patterns after that we're going to set the stage by talking about our",
    "start": "84880",
    "end": "90560"
  },
  {
    "text": "fictional demo company and kind of describe the application that we're going to talk about converting then we'll go over how to plan and how",
    "start": "90560",
    "end": "96960"
  },
  {
    "text": "to process through that refactoring so we have a lot to do so i'm going to just kind of jump right in there",
    "start": "96960",
    "end": "102960"
  },
  {
    "text": "i'm also just want to let you know the way that i have everything set up right now i don't see the actual",
    "start": "102960",
    "end": "108880"
  },
  {
    "text": "chat window for uh for slack so i probably won't be all that quick at",
    "start": "108880",
    "end": "114320"
  },
  {
    "text": "responding to any questions",
    "start": "114320",
    "end": "117520"
  },
  {
    "text": "so what is domain driven design um they have whole conferences on it and they've got organizations based to it so",
    "start": "120079",
    "end": "126399"
  },
  {
    "text": "so it's actually a pretty complex subject and i'm going to rip through it in about six minutes",
    "start": "126399",
    "end": "131520"
  },
  {
    "text": "so i'll probably end up creating more questions and i'll answer but i at least want to get some some of the language established that",
    "start": "131520",
    "end": "137680"
  },
  {
    "text": "we're going to be using as we move forward so what is domain driven design um",
    "start": "137680",
    "end": "144000"
  },
  {
    "start": "141000",
    "end": "141000"
  },
  {
    "text": "i've seen it referred to as a system design approach which is basically the first bullet there it's also referred to as a as a way of",
    "start": "144000",
    "end": "151280"
  },
  {
    "text": "helping to understand priority because of its emphasis on building out the most important",
    "start": "151280",
    "end": "157040"
  },
  {
    "text": "core areas first lastly you know it's also considered a",
    "start": "157040",
    "end": "162319"
  },
  {
    "text": "set of patterns for building enterprise applications in my mind it's kind of all three it's a",
    "start": "162319",
    "end": "168000"
  },
  {
    "text": "it's a design paradigm that requires an as complete as possible understanding of the business",
    "start": "168000",
    "end": "174640"
  },
  {
    "text": "its life cycle and how that applies to the system that we're managing",
    "start": "174640",
    "end": "180480"
  },
  {
    "start": "180000",
    "end": "180000"
  },
  {
    "text": "so there's four concepts that we're going to go over first the domain the model the context and the business",
    "start": "180480",
    "end": "186480"
  },
  {
    "text": "and ubiquitous language so the first is domain the domain is the",
    "start": "186480",
    "end": "192640"
  },
  {
    "start": "189000",
    "end": "189000"
  },
  {
    "text": "sphere of influence or activity the subject area that drives the creation or refactoring",
    "start": "192640",
    "end": "198159"
  },
  {
    "text": "of any applications that are that the business needs um simply put the the domain is",
    "start": "198159",
    "end": "204480"
  },
  {
    "text": "everything that your company does this also means that no matter how similar different companies in the same",
    "start": "204480",
    "end": "211040"
  },
  {
    "text": "industry may be their domains may be slightly different",
    "start": "211040",
    "end": "216319"
  },
  {
    "start": "216000",
    "end": "216000"
  },
  {
    "text": "the next core concept is a model i mean this is a pretty simple definition a model is the set of concepts that will",
    "start": "217040",
    "end": "222720"
  },
  {
    "text": "be implemented in the software the domain model then would be a set of concepts that",
    "start": "222720",
    "end": "228480"
  },
  {
    "text": "that define the domain that will be implemented in the software but this is really different from how",
    "start": "228480",
    "end": "235680"
  },
  {
    "text": "model often ends up being defined which is basically as a class um this is especially prevalent when you think",
    "start": "235680",
    "end": "241439"
  },
  {
    "text": "about frameworks like mvc or mvvm where m equals model and is",
    "start": "241439",
    "end": "246480"
  },
  {
    "text": "just kind of represented by a single class that you pass to a view this model is much higher level instead",
    "start": "246480",
    "end": "253040"
  },
  {
    "text": "these class files interfaces and other code constructs all basically work together to define",
    "start": "253040",
    "end": "258720"
  },
  {
    "text": "the model the set of concepts that we're trying to implement the next is context so there's two",
    "start": "258720",
    "end": "265199"
  },
  {
    "text": "levels of context the first simply context is the setting around which terminology",
    "start": "265199",
    "end": "272000"
  },
  {
    "text": "is defined in this case it's our domain every domain model lives in precisely",
    "start": "272000",
    "end": "277840"
  },
  {
    "text": "one context and a context contains precisely one domain model",
    "start": "277840",
    "end": "284160"
  },
  {
    "text": "the next level of context is a bounded context the context becomes bounded when it's defined to the level of providing",
    "start": "284240",
    "end": "290720"
  },
  {
    "text": "explicit boundaries around a set of models sometimes called subdomain models a lot",
    "start": "290720",
    "end": "296720"
  },
  {
    "text": "of words a lot of use of the word model there isn't there there can be multiple bounded contexts",
    "start": "296720",
    "end": "301840"
  },
  {
    "text": "within a single context just as there could be multiple sub domain models that exist within an overall domain model",
    "start": "301840",
    "end": "308960"
  },
  {
    "text": "so let's consider a retail sales company uh one bounded context could be",
    "start": "308960",
    "end": "314720"
  },
  {
    "text": "the consumer sales that they're doing another bounded context could be the system that manages the product",
    "start": "314720",
    "end": "322880"
  },
  {
    "text": "inventory a third could be the system that manages their orders and invoicing",
    "start": "322880",
    "end": "328880"
  },
  {
    "text": "all of these are sets of explicit boundaries around a set of specific sub-domain models and they",
    "start": "328880",
    "end": "335120"
  },
  {
    "text": "identify and define the rules to which each of those subdomain models must adhere",
    "start": "335120",
    "end": "341039"
  },
  {
    "text": "these different bounded contexts then may need to communicate with each other so the e-commerce system needs to get",
    "start": "341039",
    "end": "348080"
  },
  {
    "text": "order information to the sales and order processing and the inventory system must know about",
    "start": "348080",
    "end": "353120"
  },
  {
    "text": "that as well because you want to update the availability of the product this whole relationship is within the",
    "start": "353120",
    "end": "358240"
  },
  {
    "text": "context so we need to make sure that we use the same terminology across these bounded",
    "start": "358240",
    "end": "364840"
  },
  {
    "text": "contexts and that same terminology is the business or ubiquitous language",
    "start": "364840",
    "end": "370880"
  },
  {
    "start": "366000",
    "end": "366000"
  },
  {
    "text": "so when working in domain driven design we want to build a domain model that captures the problem domain of the uh",
    "start": "370880",
    "end": "376880"
  },
  {
    "text": "of the systems being built we're going to express that understanding in code and other software",
    "start": "376880",
    "end": "382160"
  },
  {
    "text": "artifacts to help us do that it's important that the",
    "start": "382160",
    "end": "387280"
  },
  {
    "text": "that the domain experts and developers really consciously communicate using the concepts within the models",
    "start": "387280",
    "end": "393280"
  },
  {
    "text": "so this means that the domain experts don't really describe a new user story in terms of a",
    "start": "393280",
    "end": "399120"
  },
  {
    "text": "of a field on a screen or a menu item they instead talk about the underlying",
    "start": "399120",
    "end": "405360"
  },
  {
    "text": "property or behavior that's required on a domain object similarly the developers don't talk",
    "start": "405360",
    "end": "411120"
  },
  {
    "text": "about new instance variables of a class or columns in a database table they instead use this ubiquitous",
    "start": "411120",
    "end": "416720"
  },
  {
    "text": "language and this is critical because if an idea can't easily be expressed",
    "start": "416720",
    "end": "422080"
  },
  {
    "text": "using the ubiquitous language then it indicates a concept that's missing in the domain model",
    "start": "422080",
    "end": "427759"
  },
  {
    "text": "this means the team needs to work together to figure out what that missing concept is once this has been established then the",
    "start": "427759",
    "end": "434080"
  },
  {
    "text": "new field on the screen or the column in the database table follows on from that it becomes clear what that should look",
    "start": "434080",
    "end": "439680"
  },
  {
    "text": "like the ubiquitous language already describes that relationship",
    "start": "439680",
    "end": "445360"
  },
  {
    "start": "445000",
    "end": "445000"
  },
  {
    "text": "so let's take a look at how some of these relationships work out on the left you have a team i i work at",
    "start": "445599",
    "end": "451599"
  },
  {
    "text": "amazon so we would call that a two pizza team the team is made up of both domain experts for the business",
    "start": "451599",
    "end": "458479"
  },
  {
    "text": "and the delivery team which would be developers dbas qa you know pms and whatever roles you",
    "start": "458479",
    "end": "464400"
  },
  {
    "text": "have for your organization so this team works to create the shared language",
    "start": "464400",
    "end": "470000"
  },
  {
    "text": "while working through their domain knowledge the domain knowledge is distilled into the bounded contexts",
    "start": "470000",
    "end": "476479"
  },
  {
    "text": "and described in terms of the ubiquitous language each of the each of the bounded contexts",
    "start": "476479",
    "end": "482879"
  },
  {
    "text": "has relationships with other bounded contexts which are defined around the various subdomains that were identified",
    "start": "482879",
    "end": "488879"
  },
  {
    "text": "through the ubiquitous language",
    "start": "488879",
    "end": "493840"
  },
  {
    "text": "so now that you know some of the words let's look at some of the common implementation approaches that",
    "start": "494160",
    "end": "499919"
  },
  {
    "text": "are recommended as part of domain driven design so these are some of the implementation",
    "start": "499919",
    "end": "506960"
  },
  {
    "start": "504000",
    "end": "504000"
  },
  {
    "text": "recommendations that we're going to go over each of these you'll pretty much have heard as being common in domain driven",
    "start": "506960",
    "end": "512399"
  },
  {
    "text": "design microservices messaging eventual consistency",
    "start": "512399",
    "end": "517760"
  },
  {
    "text": "command query responsibility segregation or cqrs and event sourcing",
    "start": "517760",
    "end": "524560"
  },
  {
    "start": "525000",
    "end": "525000"
  },
  {
    "text": "so microservices you know there's there's really no single definition for",
    "start": "525760",
    "end": "531200"
  },
  {
    "text": "microservices that i found there are instead a set of defining characteristics some of which i've listed on this slide",
    "start": "531200",
    "end": "538399"
  },
  {
    "text": "um like a microservice processes communications over a network using an agnostic protocol such as http",
    "start": "538399",
    "end": "546320"
  },
  {
    "text": "uh microservices are generally organized around business capabilities",
    "start": "546320",
    "end": "551680"
  },
  {
    "text": "other descriptions of them is that they tend to be smaller and more limited in scope message enabled part of a bounded",
    "start": "551680",
    "end": "558800"
  },
  {
    "text": "context independently deployed and responsible for its own data",
    "start": "558800",
    "end": "565120"
  },
  {
    "text": "so i saw some definitions for microservice that that i felt were a little bit",
    "start": "565200",
    "end": "570640"
  },
  {
    "text": "confusing so i wanted to point out that a microservice is not a layer within a monolithic application",
    "start": "570640",
    "end": "576720"
  },
  {
    "text": "for example a web controller or the backend for front end rather it's a it's a self-contained",
    "start": "576720",
    "end": "582560"
  },
  {
    "text": "piece of business functionality with clear interfaces and may you know through its own",
    "start": "582560",
    "end": "588160"
  },
  {
    "text": "internal components implement its own layered architecture but it's important to remember that domain driven",
    "start": "588160",
    "end": "594080"
  },
  {
    "text": "design does not require microservices you can build an application that can be called monolithic through the use",
    "start": "594080",
    "end": "600480"
  },
  {
    "text": "of domain driven design practices however microservices provide a relatively easy",
    "start": "600480",
    "end": "606480"
  },
  {
    "text": "way to ensure that the bounded contexts stay distinct crossing those boundaries when using microservices requires a much",
    "start": "606480",
    "end": "613600"
  },
  {
    "text": "greater intent than would be necessary if it was simply a monolith using an in-process namespace",
    "start": "613600",
    "end": "619839"
  },
  {
    "text": "difference and i want to go into a little bit more detail about the responsible for its own",
    "start": "619839",
    "end": "625760"
  },
  {
    "text": "data because this is one of the areas that i had the most difficult truly buying into",
    "start": "625760",
    "end": "631040"
  },
  {
    "text": "um i was a sql server guy normalization to me serves a purpose",
    "start": "631040",
    "end": "637279"
  },
  {
    "text": "allowing a microservice to be responsible for the data that it cares about was okay that made sense",
    "start": "637279",
    "end": "642480"
  },
  {
    "text": "until you realize that some other bounded context also cared about some of that data",
    "start": "642480",
    "end": "649040"
  },
  {
    "text": "and that they might be they may both be storing that data separately and perhaps with different data designs",
    "start": "649040",
    "end": "655680"
  },
  {
    "text": "because they care about different parts of that data and even in different databases and and",
    "start": "655680",
    "end": "660880"
  },
  {
    "text": "not just different databases like like what you can do in sql server but perhaps one of them is storing it in a",
    "start": "660880",
    "end": "666959"
  },
  {
    "text": "nosql system while the other one is storing it in a relational database",
    "start": "666959",
    "end": "672320"
  },
  {
    "text": "but i came around and and we'll talk about this a bit more when we get to eventual consistency",
    "start": "672320",
    "end": "679120"
  },
  {
    "start": "679000",
    "end": "679000"
  },
  {
    "text": "so the next subject we're going to talk about is messaging messaging is a system and architectural",
    "start": "679519",
    "end": "685200"
  },
  {
    "text": "approach that allows for communications between multiple interested parties",
    "start": "685200",
    "end": "690240"
  },
  {
    "text": "there are many different examples of messaging platforms including rabbitmq apache kafka",
    "start": "690240",
    "end": "697040"
  },
  {
    "text": "and some of our various aws products there are different behavioral approaches such as pub sub or message",
    "start": "697040",
    "end": "703839"
  },
  {
    "text": "queues but what they provide to domain driven design cannot be overstated",
    "start": "703839",
    "end": "709760"
  },
  {
    "text": "first a a messaging system decouples providers from consumers this means that a consumer does not have",
    "start": "709760",
    "end": "716240"
  },
  {
    "text": "to know where they uh where to go to find information that they care about they just need to be able to recognize that information",
    "start": "716240",
    "end": "722800"
  },
  {
    "text": "kind of as it goes by so they can pull it out and act on it the second is that the use of messaging",
    "start": "722800",
    "end": "728720"
  },
  {
    "text": "provides simple horizontal scaling if the machines that are handling messages are being overworked you can",
    "start": "728720",
    "end": "734720"
  },
  {
    "text": "simply add more the next is platform and language integration",
    "start": "734720",
    "end": "740959"
  },
  {
    "text": "there's no need for the message sender and the message receiver to be written in the same language or running on the same operating system",
    "start": "740959",
    "end": "747279"
  },
  {
    "text": "or using the same framework they can be completely discreet and different operations",
    "start": "747279",
    "end": "753600"
  },
  {
    "text": "a messaging queue also provides reliable communications because it typically takes a a a store and forward approach",
    "start": "753600",
    "end": "761680"
  },
  {
    "text": "where the message is stored in the queue and then forwarded to all of the subscribed listeners so messaging is an ideal approach when",
    "start": "761680",
    "end": "769760"
  },
  {
    "text": "needing to work with disconnected systems especially that may not always have",
    "start": "769760",
    "end": "774880"
  },
  {
    "text": "communications using a store and forward approach means that regardless of",
    "start": "774880",
    "end": "780399"
  },
  {
    "text": "when the system connects to the network they're able to catch up on all of the messages that they may have missed",
    "start": "780399",
    "end": "786959"
  },
  {
    "text": "and the last is that a messaging system automatically acts as a mediator",
    "start": "786959",
    "end": "792240"
  },
  {
    "text": "so with the mediator pattern communication between bounded context is encapsulated within a mediator object",
    "start": "792240",
    "end": "799440"
  },
  {
    "text": "those subdomains no longer communicate directly with each other but instead communicate through the",
    "start": "799440",
    "end": "805040"
  },
  {
    "text": "mediator this reduces the dependencies between communicating systems and thereby reducing coupling",
    "start": "805040",
    "end": "811440"
  },
  {
    "text": "with this if an application becomes disconnected from the others that need only to",
    "start": "811440",
    "end": "817040"
  },
  {
    "text": "reconnect to the messaging system not all of the other messaging applications and i've seen",
    "start": "817040",
    "end": "822399"
  },
  {
    "text": "instances where a consumer could be listening to messages from from a couple different",
    "start": "822399",
    "end": "829040"
  },
  {
    "text": "systems imagine what it'd be like trying to connect to those each individually",
    "start": "829040",
    "end": "834959"
  },
  {
    "text": "so the next important concept when considering the implementation of domain driven design is reliance on eventual consistency",
    "start": "835519",
    "end": "841839"
  },
  {
    "text": "instead of strong consistency not every bounded context has to know everything about the models within the",
    "start": "841839",
    "end": "848399"
  },
  {
    "text": "other bounded context at all times instead they may simply need to know",
    "start": "848399",
    "end": "855120"
  },
  {
    "text": "some of the things if you look at the time graph on the slide the column of green dots demonstrates",
    "start": "855120",
    "end": "861199"
  },
  {
    "text": "strong consistency so a system with a single shared database would have",
    "start": "861199",
    "end": "866240"
  },
  {
    "text": "all the data is stored in a single place and so it becomes available to every other consumer of data at the same time",
    "start": "866240",
    "end": "873040"
  },
  {
    "text": "once the save is committed everyone knows about it the only real lack of consistency",
    "start": "873040",
    "end": "878160"
  },
  {
    "text": "between the customer and the product record would be the milliseconds of that database transaction eventual consistency is",
    "start": "878160",
    "end": "885199"
  },
  {
    "text": "different this is the staggered orange dots it means the data will be consistent",
    "start": "885199",
    "end": "890800"
  },
  {
    "text": "eventually there will be some time before all of the other systems understand that data",
    "start": "890800",
    "end": "896240"
  },
  {
    "text": "and that meaning of eventually is something that you consider when you architect out your systems",
    "start": "896240",
    "end": "902240"
  },
  {
    "start": "902000",
    "end": "902000"
  },
  {
    "text": "so eventual consistency is important for not only domain driven design but in in my mind in any effort that expects",
    "start": "902880",
    "end": "909199"
  },
  {
    "text": "decoupling it's because it provides the service the most control over itself",
    "start": "909199",
    "end": "914399"
  },
  {
    "text": "the first print bullet here pretty much tells the main story if strong consistency was required a",
    "start": "914399",
    "end": "921519"
  },
  {
    "text": "two-bounded context needed to know the same information at",
    "start": "921519",
    "end": "926720"
  },
  {
    "text": "the same time that means that either one of the bounded contexts has to know enough",
    "start": "926720",
    "end": "931839"
  },
  {
    "text": "knowledge about the other so they can go get that information from it or",
    "start": "931839",
    "end": "936880"
  },
  {
    "text": "they both access the same data store kind of like what we talked about earlier doing that means that changes in one",
    "start": "936880",
    "end": "943199"
  },
  {
    "text": "domain such as to that table or to the service that one that the one microservice may have been",
    "start": "943199",
    "end": "948880"
  },
  {
    "text": "calling to another those all could impact the domain",
    "start": "948880",
    "end": "955440"
  },
  {
    "start": "953000",
    "end": "953000"
  },
  {
    "text": "so the next item is command query responsibility segregation so this came around because of two",
    "start": "955440",
    "end": "961199"
  },
  {
    "text": "driving forces collaboration and stillness collaboration refers to those",
    "start": "961199",
    "end": "967240"
  },
  {
    "text": "circumstances where multiple users will be using and modifying the same set of data",
    "start": "967240",
    "end": "973920"
  },
  {
    "text": "and that's that's whether or not the actual intention is that the users collaborate with each other",
    "start": "973920",
    "end": "979120"
  },
  {
    "text": "it's just the fact that they're sharing that same data pretty much at the same time",
    "start": "979120",
    "end": "984399"
  },
  {
    "text": "so there are often rules which indicate which user could perform which kind of modification",
    "start": "984399",
    "end": "989920"
  },
  {
    "text": "and modifications that may be acceptable in one case may not be acceptable in another that's all collaboration",
    "start": "989920",
    "end": "998000"
  },
  {
    "text": "stillness refers to the fact that in that collaborative environment",
    "start": "998000",
    "end": "1003120"
  },
  {
    "text": "once data has been shown to a user that same data may have been changed by another actor so by",
    "start": "1003120",
    "end": "1009600"
  },
  {
    "text": "default it's stale almost any system which makes use of a cache for example is serving stale data",
    "start": "1009600",
    "end": "1015839"
  },
  {
    "text": "even though they're doing it for performance reasons if the data we're going to be showing",
    "start": "1015839",
    "end": "1021199"
  },
  {
    "text": "users a stale anyway is it really necessary to go to the master database and get it from there",
    "start": "1021199",
    "end": "1027760"
  },
  {
    "text": "it seems like you know since you'd be pulling it in you'd be pulling out you'd probably be mapping the domain object to a to a dto object and then",
    "start": "1027760",
    "end": "1035438"
  },
  {
    "text": "mapping it to a to a view model object seems like we're doing an unnecessary amount of work",
    "start": "1035439",
    "end": "1041120"
  },
  {
    "text": "based on the assumption that reusing code that's already been written",
    "start": "1041120",
    "end": "1046160"
  },
  {
    "text": "is easier than just solving the problem at hand instead let's try a different approach",
    "start": "1046160",
    "end": "1051600"
  },
  {
    "text": "how about we create an additional data store whose data is a bit out of sync with the master repository",
    "start": "1051600",
    "end": "1057280"
  },
  {
    "text": "i mean the data we're showing the user is stale anyway so why not reflect that in the data",
    "start": "1057280",
    "end": "1062960"
  },
  {
    "text": "store itself so with that kind of a concept command is an action taken",
    "start": "1062960",
    "end": "1068960"
  },
  {
    "text": "that adds edits or deletes data from the primary data store a query on the other hand pulls out a",
    "start": "1068960",
    "end": "1076400"
  },
  {
    "text": "read-only snapshot of the data in either a primary or a second their uh secondary data store",
    "start": "1076400",
    "end": "1082880"
  },
  {
    "text": "and so in cqrs basically you split the uh the definition about what you're doing",
    "start": "1082880",
    "end": "1088960"
  },
  {
    "text": "with that model into either a command i'm gonna add edit or delete it or i",
    "start": "1088960",
    "end": "1094160"
  },
  {
    "text": "just want to look at it the query",
    "start": "1094160",
    "end": "1097840"
  },
  {
    "text": "so there's some benefits to using cqrs these benefits include independent",
    "start": "1099360",
    "end": "1105760"
  },
  {
    "text": "scaling optimized data schema separation of concern and simpler queries by separating these two you",
    "start": "1105760",
    "end": "1112080"
  },
  {
    "text": "allow them to be managed differently you can scale each differently or use different schemas",
    "start": "1112080",
    "end": "1117840"
  },
  {
    "text": "such as more normalized data for reads and that will tend to lead to simpler",
    "start": "1117840",
    "end": "1123679"
  },
  {
    "text": "queries because if that's the approach you're taking you're not going to have to do to worry about joins when you're doing your",
    "start": "1123679",
    "end": "1128960"
  },
  {
    "text": "queries so segregating the read and write sides can also result in models that are more maintainable and flexible",
    "start": "1128960",
    "end": "1136799"
  },
  {
    "text": "know for example generally most of the complex business logic goes into the right model the read model can be relatively simple",
    "start": "1136799",
    "end": "1144480"
  },
  {
    "text": "but there's also some real challenges to cqrs the first is it's complex",
    "start": "1144480",
    "end": "1150799"
  },
  {
    "text": "it may not be necessary um it's a lot of work to do cqrs and many",
    "start": "1150799",
    "end": "1158080"
  },
  {
    "text": "times it just may be overkill adding to that it's important to remember that's",
    "start": "1158080",
    "end": "1163360"
  },
  {
    "text": "to define cqrs at a bounded context level rather than as a domain-wide",
    "start": "1163360",
    "end": "1168720"
  },
  {
    "text": "implementation pattern not every bounded context will need cqrs",
    "start": "1168720",
    "end": "1174160"
  },
  {
    "text": "so allowing each bounded context to manage its own data read write rules",
    "start": "1174160",
    "end": "1180000"
  },
  {
    "text": "will provide the most flexibility going forward another challenge is updating schemas",
    "start": "1180000",
    "end": "1185600"
  },
  {
    "text": "and data during a release especially when the read and write are significantly different imagine you're doing a release",
    "start": "1185600",
    "end": "1192320"
  },
  {
    "text": "and one of the things that you have to do is update the value of a status field what does that mean in this kind of an",
    "start": "1192320",
    "end": "1197600"
  },
  {
    "text": "approach so all of these are worth evaluating if you're considering cqrs for a project",
    "start": "1197600",
    "end": "1206799"
  },
  {
    "text": "so event sourcing according to martin fowler the fundamental idea of event sourcing",
    "start": "1206799",
    "end": "1212400"
  },
  {
    "text": "is that of um let me read it here ensuring every change to the state of an",
    "start": "1212400",
    "end": "1217440"
  },
  {
    "text": "application is captured in an event object in that these event objects are themselves stored in the",
    "start": "1217440",
    "end": "1222559"
  },
  {
    "text": "sequence they were applied for the same lifetime as the application state itself",
    "start": "1222559",
    "end": "1228000"
  },
  {
    "text": "so basically event sourcing is a process where all changes to application state are stored",
    "start": "1228000",
    "end": "1234080"
  },
  {
    "text": "as a sequence of events this could really sound like a stinker because a typical application has a lot",
    "start": "1234080",
    "end": "1240400"
  },
  {
    "text": "going on with it however you think about the other concepts that we've already talked about such as",
    "start": "1240400",
    "end": "1245600"
  },
  {
    "text": "messaging eventual consistency in cqrs you'll see that there's the likelihood",
    "start": "1245600",
    "end": "1250720"
  },
  {
    "text": "that many of these events are already being created for each bounded",
    "start": "1250720",
    "end": "1255760"
  },
  {
    "text": "context so implementation of storing these events is",
    "start": "1255760",
    "end": "1261200"
  },
  {
    "text": "is almost trivial because you're already doing it event sourcing provides several layers of information",
    "start": "1261200",
    "end": "1268880"
  },
  {
    "text": "the first is to really be able to identify at any point in time the state of any piece of data the second is that you",
    "start": "1269200",
    "end": "1276080"
  },
  {
    "text": "have recovery built in restoring an old well-known database and then re-running all of the messages that",
    "start": "1276080",
    "end": "1282640"
  },
  {
    "text": "were played will put that data in that database into the proper stage",
    "start": "1282640",
    "end": "1288400"
  },
  {
    "text": "and since it's replaying it you actually if you design your eventing properly have the ability to",
    "start": "1288400",
    "end": "1294960"
  },
  {
    "text": "retroactively fix errors so think about that for a moment you know",
    "start": "1294960",
    "end": "1301679"
  },
  {
    "text": "with the current design say of a single monolithic database managing it an error in business logic somewhere can",
    "start": "1301679",
    "end": "1308559"
  },
  {
    "text": "lead to bad data say that we made a change in a in a product service where the request",
    "start": "1308559",
    "end": "1314799"
  },
  {
    "text": "to change the product inventory because of the sale resulted in the inventory count being",
    "start": "1314799",
    "end": "1319840"
  },
  {
    "text": "increased rather than decreased that would be difficult to fix with event sourcing after you fix the",
    "start": "1319840",
    "end": "1326799"
  },
  {
    "text": "business logic you can restore the older database and rerun all of the events for that data",
    "start": "1326799",
    "end": "1332400"
  },
  {
    "text": "since the budget the the business logic is fixed the values will all be updated correctly",
    "start": "1332400",
    "end": "1338480"
  },
  {
    "text": "so your data's been repaired you know yes if there's a lot of events it may take a while to do that process",
    "start": "1338480",
    "end": "1344559"
  },
  {
    "text": "but i can almost guarantee you that'll be faster and more likely to be correct than trying to understand and fix those",
    "start": "1344559",
    "end": "1350320"
  },
  {
    "text": "area those errors in some other way",
    "start": "1350320",
    "end": "1354480"
  },
  {
    "start": "1356000",
    "end": "1356000"
  },
  {
    "text": "so there are some requirements that event sourcing does a good job of fulfilling the first is if you want to capture the",
    "start": "1356799",
    "end": "1362880"
  },
  {
    "text": "intent of the data an example of this would be say changes to a customer entity that are",
    "start": "1362880",
    "end": "1370320"
  },
  {
    "text": "captured as a series of specific events such as a moved home or closed account",
    "start": "1370320",
    "end": "1376240"
  },
  {
    "text": "or something like that that kind of intent can also be captured along with all of the data changes",
    "start": "1376240",
    "end": "1383280"
  },
  {
    "text": "another reason to use event sourcing is if you need to minimize the occurrence of conflicting updates",
    "start": "1383440",
    "end": "1389200"
  },
  {
    "text": "event sourcing can help prevent concurrent updates from causing conflicts because it avoids the requirements to",
    "start": "1389200",
    "end": "1395840"
  },
  {
    "text": "directly update objects in the data store however the domain model really must",
    "start": "1395840",
    "end": "1402320"
  },
  {
    "text": "still be designed so that it can protect itself from the requests that might result in an inconsistent state",
    "start": "1402320",
    "end": "1409440"
  },
  {
    "text": "the next reason and one i think i actually mentioned last slide is that if you're already using events",
    "start": "1409440",
    "end": "1415120"
  },
  {
    "text": "within your system you're already mostly there you may need to tweak some of the events",
    "start": "1415120",
    "end": "1420720"
  },
  {
    "text": "as well as add some additional events that you may not have been managing but if the infrastructure is already",
    "start": "1420720",
    "end": "1425919"
  },
  {
    "text": "there and being used then your implementation path is already much simpler and the last item i tossed on the list",
    "start": "1425919",
    "end": "1432240"
  },
  {
    "text": "was if you want the flexibility to change data format changing the messaging",
    "start": "1432240",
    "end": "1437279"
  },
  {
    "text": "schema is pretty simple and interpreting the changes can be easier as well",
    "start": "1437279",
    "end": "1442960"
  },
  {
    "text": "now if none of these items are a concern for you then using event sourcing is likely to add complexity for no game",
    "start": "1442960",
    "end": "1449679"
  },
  {
    "text": "um that's one of the problems that i've seen when people that are looking to take a domain driven design approach to",
    "start": "1449679",
    "end": "1455840"
  },
  {
    "text": "building software is that they feel since they're doing that they have to use all of the",
    "start": "1455840",
    "end": "1461360"
  },
  {
    "text": "buzzwords that go along with it they have to use c qrs they have to use event sourcing",
    "start": "1461360",
    "end": "1467120"
  },
  {
    "text": "and that's not always true many times what i've seen is by separating the",
    "start": "1467120",
    "end": "1472960"
  },
  {
    "text": "bounded context and setting up eventual consistency you find that a lot of the complexity",
    "start": "1472960",
    "end": "1478400"
  },
  {
    "text": "that the original system had is no longer necessary because it was caused by poor boundaries between the concepts",
    "start": "1478400",
    "end": "1484880"
  },
  {
    "text": "that means that letting each microservice basically manage its own data through a crudley approach is fine and cqrs is",
    "start": "1484880",
    "end": "1493039"
  },
  {
    "text": "not necessary or may only be necessary in one or two highly used and highly complex bounded",
    "start": "1493039",
    "end": "1499200"
  },
  {
    "text": "context and not across the board",
    "start": "1499200",
    "end": "1502880"
  },
  {
    "text": "so we talked a little bit about ddd is let's take a look at some of the refactor patterns that i've used when refactoring",
    "start": "1504320",
    "end": "1510720"
  },
  {
    "text": "applications these strategies or refactor design patterns or different ways in which you",
    "start": "1510720",
    "end": "1516559"
  },
  {
    "start": "1513000",
    "end": "1513000"
  },
  {
    "text": "can change your system in your effort to build a domain driven design they're certainly not a complete",
    "start": "1516559",
    "end": "1521919"
  },
  {
    "text": "list but they offer different approaches for refactoring systems these patterns are also not exclusive",
    "start": "1521919",
    "end": "1528640"
  },
  {
    "text": "you'll find that as you work through the changes that you'll use many of these if not all sometimes together",
    "start": "1528640",
    "end": "1534799"
  },
  {
    "text": "so these patterns that i'm sure that you've heard of some of these if not all are strangler fig branched by abstraction and parallel run",
    "start": "1534799",
    "end": "1542799"
  },
  {
    "start": "1542000",
    "end": "1542000"
  },
  {
    "text": "the most well known of these refactor patterns is the strangler fig implementing this approach means that",
    "start": "1542799",
    "end": "1548159"
  },
  {
    "text": "you will create a new system running parallel with your existing system over time",
    "start": "1548159",
    "end": "1554240"
  },
  {
    "text": "you end up moving responsibility and functionality from the current system over to the new system",
    "start": "1554240",
    "end": "1559279"
  },
  {
    "text": "the primary differentiator in the strangler fig is that it depends upon a call from the outside of the system that",
    "start": "1559279",
    "end": "1564960"
  },
  {
    "text": "will eventually go to the new system so the idea with the strangler fig is that you'll replace the old monolithic",
    "start": "1564960",
    "end": "1571600"
  },
  {
    "text": "system with the new system one piece at a time just as kind of shown as by the image on the screen",
    "start": "1571600",
    "end": "1578559"
  },
  {
    "text": "as you can see however there's one very big requirement for the strangler fig pattern to be successful that's that you have to have the ability",
    "start": "1578559",
    "end": "1585120"
  },
  {
    "text": "to clearly map the inbound functionality that you want to refactor if your code being migrated is deeper",
    "start": "1585120",
    "end": "1591760"
  },
  {
    "text": "or there are existing calls coming to it from both inside and outside of your application",
    "start": "1591760",
    "end": "1597120"
  },
  {
    "text": "then the strangler fig is probably not your best approach instead evaluate the branch by",
    "start": "1597120",
    "end": "1603120"
  },
  {
    "start": "1602000",
    "end": "1602000"
  },
  {
    "text": "abstraction pattern this is very similar to the strangler fig pattern however the strangler fig",
    "start": "1603120",
    "end": "1609279"
  },
  {
    "text": "pattern depends upon external calls coming into the system while the branch by abstraction approach works completely within your system",
    "start": "1609279",
    "end": "1616400"
  },
  {
    "text": "and does not require any changes to the systems outside the application being refactored",
    "start": "1616400",
    "end": "1622080"
  },
  {
    "text": "you know i've seen where a lot of people kind of combine both of these patterns",
    "start": "1622080",
    "end": "1627840"
  },
  {
    "text": "and architectural approaches and call it the strangler pattern or sometimes the strangler fig pattern",
    "start": "1627840",
    "end": "1633360"
  },
  {
    "text": "but they're really uniquely different approaches to solving complex refactorings and i think it's important to delineate",
    "start": "1633360",
    "end": "1640080"
  },
  {
    "text": "between the two because of the different implications they have as to how you're going to implement them",
    "start": "1640080",
    "end": "1646320"
  },
  {
    "text": "in the branch by abstraction you determine what functionality is going to be removed and then build an abstraction for it you",
    "start": "1646320",
    "end": "1653120"
  },
  {
    "text": "slide that abstraction into the code and ensure that all your consuming code is is is basically calling that abstraction",
    "start": "1653120",
    "end": "1661120"
  },
  {
    "text": "you know once you've made sure that all of that code is calling the abstraction you can start",
    "start": "1661120",
    "end": "1667120"
  },
  {
    "text": "replacing that initial implementation with the new one so i've seen this approach used multiple times",
    "start": "1667120",
    "end": "1674000"
  },
  {
    "text": "most commonly when implementing a repository for data persistence so by abstracting out all the credly",
    "start": "1674000",
    "end": "1679200"
  },
  {
    "text": "calls you can switch in and out databases or even uh persist through rest services",
    "start": "1679200",
    "end": "1684399"
  },
  {
    "text": "instead so the next pattern is parallel run so",
    "start": "1684399",
    "end": "1690000"
  },
  {
    "start": "1687000",
    "end": "1687000"
  },
  {
    "text": "strangler fig and branch by abstraction basically allow old and new code to",
    "start": "1690000",
    "end": "1695039"
  },
  {
    "text": "coexist in production at the same time however you generally only run one path",
    "start": "1695039",
    "end": "1700320"
  },
  {
    "text": "at a time generally there'd be a switch somewhere say in the configuration or even in the database",
    "start": "1700320",
    "end": "1707760"
  },
  {
    "text": "that tells the system to use either the newer old branches of the code if the new",
    "start": "1707760",
    "end": "1713279"
  },
  {
    "text": "branch breaks you switch back to the old one and everything should just be running like it was before",
    "start": "1713279",
    "end": "1719600"
  },
  {
    "text": "parallel run takes this a bit different in that it runs through both the old and the new code at the same time and",
    "start": "1719600",
    "end": "1726000"
  },
  {
    "text": "then compares the results i mean it sounds a little crazy but consider the situation",
    "start": "1726000",
    "end": "1732640"
  },
  {
    "text": "where your current state is a big old monolith and you want to move to microservices",
    "start": "1732640",
    "end": "1737760"
  },
  {
    "text": "and in traditional domain driven design you want each microservice or bounded context",
    "start": "1737760",
    "end": "1742799"
  },
  {
    "text": "to be responsible for its own data management this means that you'll be implementing both new business logic as well as",
    "start": "1742799",
    "end": "1749200"
  },
  {
    "text": "database design implementing new database systems",
    "start": "1749200",
    "end": "1754559"
  },
  {
    "text": "parallel run would be a really good way to test the system let the system you know works do the",
    "start": "1754559",
    "end": "1760320"
  },
  {
    "text": "heavy lifting but completely exercise the new system as if it's also doing the work and then compare the results your",
    "start": "1760320",
    "end": "1767360"
  },
  {
    "text": "comparison engine could be as simple as a sql script to compare data or it could be as complex as a fully",
    "start": "1767360",
    "end": "1773840"
  },
  {
    "text": "running service that's listening to database calls and event queues and comparing them to what the expected results are whatever makes the most",
    "start": "1773840",
    "end": "1780799"
  },
  {
    "text": "sense based off of the changes you've made your internal systems and the kind of architectural approaches that you're",
    "start": "1780799",
    "end": "1786000"
  },
  {
    "text": "taking you know the last time i used this approach we were able to find a whole",
    "start": "1786000",
    "end": "1791360"
  },
  {
    "text": "lot of edge cases that were missing when building the application some of those edge cases we missed by",
    "start": "1791360",
    "end": "1797120"
  },
  {
    "text": "design but there were a lot more that we had missed coincidentally that no one had ever thought about the details involved",
    "start": "1797120",
    "end": "1803200"
  },
  {
    "text": "in that edge case also you know we found several instances where the current system",
    "start": "1803200",
    "end": "1809360"
  },
  {
    "text": "or the previously running system was actually doing work incorrectly it's just that no one had noticed it yet",
    "start": "1809360",
    "end": "1817039"
  },
  {
    "start": "1818000",
    "end": "1818000"
  },
  {
    "text": "so there are three additional design patterns that i tend to go over in the full day session of this but",
    "start": "1818640",
    "end": "1823760"
  },
  {
    "text": "simply don't have the time now um the first is ui composition this is an implementation approach that takes",
    "start": "1823760",
    "end": "1830240"
  },
  {
    "text": "advantage of the various ui implementation patterns such as mvp mvc mvvm so that new functionality is added",
    "start": "1830240",
    "end": "1838159"
  },
  {
    "text": "or replaced by by splitting the calls at the ui level and splicing the results back into the",
    "start": "1838159",
    "end": "1843200"
  },
  {
    "text": "data being presented in the ui basically you split out the data from the new service that's being deployed",
    "start": "1843200",
    "end": "1849120"
  },
  {
    "text": "and in your management framework such as the controller and mvc you call the new service and stitch that",
    "start": "1849120",
    "end": "1855039"
  },
  {
    "text": "data back into the data being presented back to the ui this can happen with new information",
    "start": "1855039",
    "end": "1861360"
  },
  {
    "text": "using a new design driven or a domain driven design service or existing information that's being",
    "start": "1861360",
    "end": "1867279"
  },
  {
    "text": "refactored somehow into a different area the next pattern is the change data capture approach",
    "start": "1867279",
    "end": "1874559"
  },
  {
    "text": "in which we listen to and react to changes in the data you know this is generally a transitive",
    "start": "1874559",
    "end": "1880000"
  },
  {
    "text": "pattern it's something that you kind of implement for a while during your conversion but it can also become part of your",
    "start": "1880000",
    "end": "1886159"
  },
  {
    "text": "strategic move to a more domain driven design approach especially in in systems where there are",
    "start": "1886159",
    "end": "1893120"
  },
  {
    "text": "more than one application that listens to various data tables and some of those may be ones that you",
    "start": "1893120",
    "end": "1898240"
  },
  {
    "text": "don't have any control over like installed apps",
    "start": "1898240",
    "end": "1902799"
  },
  {
    "text": "so many database systems give you the ability to be notified when a data table is changed",
    "start": "1903360",
    "end": "1908880"
  },
  {
    "text": "you use this notification to perform additional work for example in one system i worked on we",
    "start": "1908880",
    "end": "1914720"
  },
  {
    "text": "used sql server to notify a process that would then take",
    "start": "1914720",
    "end": "1920000"
  },
  {
    "text": "the data that had changed and cue up a message in the messaging system that we were using",
    "start": "1920000",
    "end": "1926000"
  },
  {
    "text": "the last design pattern is the decorating collaborator approach this approach uses the decorator design",
    "start": "1926559",
    "end": "1931760"
  },
  {
    "text": "pattern to take advantage of the results of the code so if any of you've written an http handler for iis",
    "start": "1931760",
    "end": "1938799"
  },
  {
    "text": "then you've implemented a type of decorating collaborator especially if you've done it on the http result rather than the http request",
    "start": "1938799",
    "end": "1946480"
  },
  {
    "text": "if you're not running iis then this would normally be done by creating a proxy between the caller and the code",
    "start": "1946480",
    "end": "1952480"
  },
  {
    "text": "then that proxy would be responsible for calling the collaborator with the results from the response",
    "start": "1952480",
    "end": "1963200"
  },
  {
    "text": "so we've talked a little bit about ddd and some of the patterns to think about as you're doing refactor",
    "start": "1963200",
    "end": "1968799"
  },
  {
    "text": "let's kind of set the stage for the demo app that we're going to walk through um this is important because you need to",
    "start": "1968799",
    "end": "1974000"
  },
  {
    "text": "get some of that ubiquitous language for these conversations so our company is an e-commerce company",
    "start": "1974000",
    "end": "1979200"
  },
  {
    "text": "that sells widgets these widgets can come in different sizes colors it can be provided by",
    "start": "1979200",
    "end": "1984559"
  },
  {
    "text": "multiple manufacturers there are several different sales approaches taken by the business",
    "start": "1984559",
    "end": "1990000"
  },
  {
    "text": "for example the business sells directly to consumers through the forward-facing section of the website the company also sells",
    "start": "1990000",
    "end": "1997200"
  },
  {
    "text": "through joint marketplaces like amazon and a couple other through apis that are managed within",
    "start": "1997200",
    "end": "2002480"
  },
  {
    "text": "the inventory module of the system the company also acts as a distributor to other retailers where we provide",
    "start": "2002480",
    "end": "2009600"
  },
  {
    "text": "quantities of product at discounted prices through uh through a b2b marketplace basically you know",
    "start": "2009600",
    "end": "2014720"
  },
  {
    "text": "case quantities on wholesale discount there are multiple other modules there's",
    "start": "2014720",
    "end": "2020640"
  },
  {
    "text": "a purchasing module that the purchasing and receiving department uses to manage purchase orders to find the inventory that's received",
    "start": "2020640",
    "end": "2027200"
  },
  {
    "text": "and account for incoming product there's a module built for order fulfillment that",
    "start": "2027200",
    "end": "2032240"
  },
  {
    "text": "handles things like pick lists and the capture of the shipping information",
    "start": "2032240",
    "end": "2038480"
  },
  {
    "text": "there's a module that's only used three to four times a year by the by the warehouse staff to audit",
    "start": "2038480",
    "end": "2044000"
  },
  {
    "text": "inventory there's even a module for the customer service staff that they use to manage customer interactions",
    "start": "2044000",
    "end": "2050560"
  },
  {
    "text": "you know whether they're purchases returns billing issues problems anything like that",
    "start": "2050560",
    "end": "2056320"
  },
  {
    "text": "now this may seem like a lot of things going on because we've pretty much talked at least seven different business areas so far",
    "start": "2056320",
    "end": "2063200"
  },
  {
    "text": "however it's pretty normal um you know you'll see this kind of",
    "start": "2063200",
    "end": "2068560"
  },
  {
    "text": "evolution through systems as companies grow they'll start off with a smaller system they'll add in a new",
    "start": "2068560",
    "end": "2074560"
  },
  {
    "text": "module they'll add in another module that's kind of how you get these monolithic approaches over time",
    "start": "2074560",
    "end": "2082480"
  },
  {
    "text": "another similar approach to this is where rather than building multiple modules within a single monolithic",
    "start": "2083200",
    "end": "2088480"
  },
  {
    "text": "application so in this case one big website uh companies can take approaches where they build different systems for each",
    "start": "2088480",
    "end": "2094960"
  },
  {
    "text": "so rather than having one big system you have a whole bunch of medium sized systems",
    "start": "2094960",
    "end": "2100560"
  },
  {
    "text": "we're not going to talk about that because that tends to take a slightly different approach to refactoring because of just the way that you have to manage",
    "start": "2100560",
    "end": "2106160"
  },
  {
    "text": "prioritization so with what we talked about a really a",
    "start": "2106160",
    "end": "2111920"
  },
  {
    "start": "2109000",
    "end": "2109000"
  },
  {
    "text": "rough system diagram kind of looks like this there's a centralized data store that stores all of the transactional",
    "start": "2111920",
    "end": "2117760"
  },
  {
    "text": "data across all of these systems there's a layer of web services that handle all of the work necessary",
    "start": "2117760",
    "end": "2123839"
  },
  {
    "text": "within that area and note i didn't say domain though i may have in a more",
    "start": "2123839",
    "end": "2128960"
  },
  {
    "text": "casual conversation that's just because i'm trying to reserve that word for for this whole conference this whole",
    "start": "2128960",
    "end": "2134560"
  },
  {
    "text": "thing that we're going through right now um and there's also a lot more services than these of course this is just some",
    "start": "2134560",
    "end": "2140000"
  },
  {
    "text": "of the more obvious ones on the right hand side is a bunch of",
    "start": "2140000",
    "end": "2146079"
  },
  {
    "text": "servers which kind of represents the load balance big old web app and if we look at some of the",
    "start": "2146079",
    "end": "2151440"
  },
  {
    "text": "communications that are going on within within these services it starts to look like this so yes the",
    "start": "2151440",
    "end": "2157839"
  },
  {
    "text": "big old web app calls a lot of these different services but there's also a large amount of service to service calling going on as",
    "start": "2157839",
    "end": "2163680"
  },
  {
    "text": "well so imagine how scary it could be to try to figure out how to add some uh",
    "start": "2163680",
    "end": "2169119"
  },
  {
    "text": "new functionality into the purchasing module in the big old web app how do you wedge that in amongst some of",
    "start": "2169119",
    "end": "2175280"
  },
  {
    "text": "the other rules with the current design approach anything you do for one module can potentially affect other modules",
    "start": "2175280",
    "end": "2182880"
  },
  {
    "text": "what this diagram also shows is how business rules tend to get scattered amongst different areas of the system in this",
    "start": "2182880",
    "end": "2189920"
  },
  {
    "text": "case there's some orchestration going on in the big old web app as it as it determines what services to call",
    "start": "2189920",
    "end": "2195680"
  },
  {
    "text": "when and with what information as well as all of the inner communications going on within the",
    "start": "2195680",
    "end": "2201280"
  },
  {
    "text": "services you know there's more likes there there's more likely decisions being made",
    "start": "2201280",
    "end": "2206880"
  },
  {
    "text": "in the big old web app around processing the order and if the orchestration or management",
    "start": "2206880",
    "end": "2212160"
  },
  {
    "text": "is not done in the big old web app then it's most likely done in some other service which counts for all of this",
    "start": "2212160",
    "end": "2217920"
  },
  {
    "text": "other communication that's going on in our service so is that the best way to do this",
    "start": "2217920",
    "end": "2224000"
  },
  {
    "text": "probably not so let's continue and let's take a quick look at the database design",
    "start": "2224000",
    "end": "2230079"
  },
  {
    "start": "2226000",
    "end": "2226000"
  },
  {
    "text": "the slide shows a list of uh some of the tables on well on the on the left sorry i'm so",
    "start": "2230079",
    "end": "2235920"
  },
  {
    "text": "used to standing in front of the presentation it kind of threw me off there so a list of some of the tables on the",
    "start": "2235920",
    "end": "2242079"
  },
  {
    "text": "left and a partial rendition of the database diagram on the right what does this show well first that",
    "start": "2242079",
    "end": "2249440"
  },
  {
    "text": "there's a single database that contains all of the information for the company second",
    "start": "2249440",
    "end": "2254960"
  },
  {
    "text": "i'd like to say that there's at least some separation of concern because at least there's different schemas like orders",
    "start": "2254960",
    "end": "2260480"
  },
  {
    "text": "purchasing products and website see that little yellow box there that's",
    "start": "2260480",
    "end": "2267119"
  },
  {
    "text": "the most used table in the system the users table it has lots of foreign",
    "start": "2267119",
    "end": "2272800"
  },
  {
    "text": "key references to it because of the created by column that is present in a lot of the tables but not all of them",
    "start": "2272800",
    "end": "2279119"
  },
  {
    "text": "however there's also some relationships that don't have foreign key definitions let's look closer at the orders and",
    "start": "2279119",
    "end": "2285119"
  },
  {
    "text": "order details area that the three tables that are in the green there the order details only has one foreign",
    "start": "2285119",
    "end": "2291920"
  },
  {
    "text": "key in it and that's to the orders table there are no foreign keys to the product table or the size",
    "start": "2291920",
    "end": "2297839"
  },
  {
    "text": "table or the color table or any of the other tables where you may expect to have relationships",
    "start": "2297839",
    "end": "2303920"
  },
  {
    "text": "the reasons for this decision is lost in time but it probably had something to do with",
    "start": "2303920",
    "end": "2309040"
  },
  {
    "text": "some refactor or redesign somewhere along the way which meant that historical orders would not be able to",
    "start": "2309040",
    "end": "2314480"
  },
  {
    "text": "support the foreign key relationship so it just simply wasn't added",
    "start": "2314480",
    "end": "2320000"
  },
  {
    "text": "and there's all sorts of these little code smells throughout the application and to be honest probably in every",
    "start": "2320320",
    "end": "2326880"
  },
  {
    "text": "long-standing application that i've ever worked on so so we should judge this one too harshly",
    "start": "2326880",
    "end": "2333119"
  },
  {
    "text": "so there are really two serial processes going on this slide shows the order in which they",
    "start": "2333599",
    "end": "2339760"
  },
  {
    "start": "2334000",
    "end": "2334000"
  },
  {
    "text": "go and and what service has the responsibility of running them",
    "start": "2339760",
    "end": "2344800"
  },
  {
    "text": "the first is on the website as it builds out the required information namely the user customer and payment then sends",
    "start": "2344800",
    "end": "2351520"
  },
  {
    "text": "that to the order service the website then empties out the shopping cart",
    "start": "2351520",
    "end": "2356640"
  },
  {
    "text": "once the call gets to the order service it turns around and calls the product service to update the inventory",
    "start": "2356640",
    "end": "2362800"
  },
  {
    "text": "calls the communication service to send order confirmation email and somewhere along the way it's doing its own processing as well",
    "start": "2362800",
    "end": "2370720"
  },
  {
    "start": "2372000",
    "end": "2372000"
  },
  {
    "text": "so to support those seven steps in the order float the communication flow looks something like this",
    "start": "2372000",
    "end": "2378079"
  },
  {
    "text": "other business flows are very similar everything that's going on in the big web application",
    "start": "2378079",
    "end": "2383839"
  },
  {
    "text": "talks to other services and then those services talk amongst themselves as they try to",
    "start": "2383839",
    "end": "2389599"
  },
  {
    "text": "get the appropriate information that they need to build out their own requirements you know in some of them the website",
    "start": "2389599",
    "end": "2396000"
  },
  {
    "text": "does some orchestration and then hands it off to the service the service persists it somehow and then",
    "start": "2396000",
    "end": "2402160"
  },
  {
    "text": "performs additional processing based off of whatever additional business rules were defined for that service",
    "start": "2402160",
    "end": "2407920"
  },
  {
    "text": "so this is all we're going to refactor",
    "start": "2407920",
    "end": "2411838"
  },
  {
    "text": "so how do we even start to fix this first let's find the rules that we're going to",
    "start": "2413680",
    "end": "2419680"
  },
  {
    "start": "2414000",
    "end": "2414000"
  },
  {
    "text": "work under the first and this rule should be very obvious is to take a very incremental",
    "start": "2419680",
    "end": "2425359"
  },
  {
    "text": "approach do not try and deliver everything at",
    "start": "2425359",
    "end": "2430960"
  },
  {
    "text": "once in fact incrementing both horizontally and vertically is okay the most important consideration is that",
    "start": "2430960",
    "end": "2437359"
  },
  {
    "text": "you make continuous progress the next rule and probably even more",
    "start": "2437359",
    "end": "2443599"
  },
  {
    "text": "obvious in the last is that you must continue to support the old ways of doing things since there's so much interaction",
    "start": "2443599",
    "end": "2449520"
  },
  {
    "text": "between services it's likely that there will be uh other things going on that are either missed unknown or you just haven't had a",
    "start": "2449520",
    "end": "2455520"
  },
  {
    "text": "chance to get to yet next is to make smart technology decisions as you go through the process",
    "start": "2455520",
    "end": "2463359"
  },
  {
    "text": "i know some of you are kind of looking at me about that but i've seen a tendency to look small",
    "start": "2463359",
    "end": "2468640"
  },
  {
    "text": "when looking at these technology decisions votes like um",
    "start": "2468640",
    "end": "2475040"
  },
  {
    "text": "just enough to get by or i'll add that later they end up leaving you with as much tech debt as you already have now",
    "start": "2475040",
    "end": "2481920"
  },
  {
    "text": "remember to plan for tomorrow's work next quarter's work and next year's work and make the best",
    "start": "2481920",
    "end": "2487920"
  },
  {
    "text": "technology decision as possible this doesn't mean that all of these decisions have to be implemented now",
    "start": "2487920",
    "end": "2494160"
  },
  {
    "text": "however what this means is they need to be accounted and planned for it's perfectly okay to say i want to",
    "start": "2494160",
    "end": "2501200"
  },
  {
    "text": "move this order service away from sql server to a nosql database because i figure",
    "start": "2501200",
    "end": "2506480"
  },
  {
    "text": "that'll more easily support the future changes that the business sees and not do that work until you want to",
    "start": "2506480",
    "end": "2512000"
  },
  {
    "text": "make those future changes but make the decision as early as possible and make your design and",
    "start": "2512000",
    "end": "2517359"
  },
  {
    "text": "architectural decisions around that end goal and how you plan to get there that's going to help you understand",
    "start": "2517359",
    "end": "2522800"
  },
  {
    "text": "which of those domain driven design patterns that we talked about uh cqrs or all that",
    "start": "2522800",
    "end": "2530079"
  },
  {
    "text": "how they're going to fit in with your overall system the next is don't be afraid to change",
    "start": "2530079",
    "end": "2536079"
  },
  {
    "text": "the way things are done uh that you historically perhaps did all",
    "start": "2536079",
    "end": "2541119"
  },
  {
    "text": "of your data access through stored procedures doesn't mean that you have to do that moving forward instead take the time to evaluate your",
    "start": "2541119",
    "end": "2547280"
  },
  {
    "text": "current implementation approach against your end goal some of what you have done could just be",
    "start": "2547280",
    "end": "2552400"
  },
  {
    "text": "picked up and moved other existing approaches may simply need to be scrapped and",
    "start": "2552400",
    "end": "2557440"
  },
  {
    "text": "redone you should never put yourself into a place where that's how we have always done it",
    "start": "2557440",
    "end": "2563280"
  },
  {
    "text": "becomes an acceptable answer lastly and i'm harping on it again but",
    "start": "2563280",
    "end": "2569359"
  },
  {
    "text": "build that ubiquitous language cooperatively across all of the teams agree on the language and stick to it",
    "start": "2569359",
    "end": "2577440"
  },
  {
    "text": "change the language as needed but do it together even if everything else turns into a",
    "start": "2577440",
    "end": "2582800"
  },
  {
    "text": "into a big old smelly bag and nope having the language in itself will make the whole effort seem more worthwhile",
    "start": "2582800",
    "end": "2589680"
  },
  {
    "text": "even if the only time that you're using it is to yell at each other in the in the retrospective meetings at least",
    "start": "2589680",
    "end": "2594720"
  },
  {
    "text": "you'll be speaking the same language so i would keep these rules in the back",
    "start": "2594720",
    "end": "2600160"
  },
  {
    "text": "of your mind as you start determine strategies for your refactor so one of the easiest ways to start",
    "start": "2600160",
    "end": "2606480"
  },
  {
    "start": "2605000",
    "end": "2605000"
  },
  {
    "text": "building your ubiquitous language is to build your context in bounded contexts in this case we're going to define the",
    "start": "2606480",
    "end": "2612240"
  },
  {
    "text": "context as the website and it's supporting functionality so for this company",
    "start": "2612240",
    "end": "2618839"
  },
  {
    "text": "everything um the boundary contexts then become the different business areas or domains",
    "start": "2618839",
    "end": "2625119"
  },
  {
    "text": "or subdomains um many of you probably have considered the phrase domains and subdivisions before",
    "start": "2625119",
    "end": "2631680"
  },
  {
    "text": "so remember that a that a bounded context is the same as a subdomain in this case we have listed product",
    "start": "2631680",
    "end": "2638640"
  },
  {
    "text": "customer purchasing order and geography well there are many many others",
    "start": "2638640",
    "end": "2644160"
  },
  {
    "text": "when you evaluate your own context i would recommend you stay away from reinforcing the constructs that you",
    "start": "2644160",
    "end": "2650880"
  },
  {
    "text": "that your system already has built into it step back and actually evaluate what's going on",
    "start": "2650880",
    "end": "2656800"
  },
  {
    "text": "within the in the domain in the context remember one of the key points for this",
    "start": "2656800",
    "end": "2662560"
  },
  {
    "text": "is building your ubiquitous language define and describe what needs to go on to support the business",
    "start": "2662560",
    "end": "2668880"
  },
  {
    "text": "and don't be afraid redefine terminology as you go through it in many ways this may make it easier",
    "start": "2668880",
    "end": "2674400"
  },
  {
    "text": "let's say you currently have a a quote service that performs a series of actions",
    "start": "2674400",
    "end": "2679520"
  },
  {
    "text": "if you determine that the things that that service cares about is correct then perhaps you can call it a quote in",
    "start": "2679520",
    "end": "2684560"
  },
  {
    "text": "the new system because it implies the same responsibilities if however you need to change the",
    "start": "2684560",
    "end": "2691040"
  },
  {
    "text": "behavior i recommend that you rename your ubiquitous language to something new",
    "start": "2691040",
    "end": "2696240"
  },
  {
    "text": "maybe estimate or something else that describes the new set of behaviors and responsibilities",
    "start": "2696240",
    "end": "2702960"
  },
  {
    "text": "you know this is especially important because almost by definition a monolithic",
    "start": "2702960",
    "end": "2708079"
  },
  {
    "text": "application has had some domain creep uh you know an example say your quote knows",
    "start": "2708079",
    "end": "2714160"
  },
  {
    "text": "what order number that it that it was used for now is your time to fix this",
    "start": "2714160",
    "end": "2720880"
  },
  {
    "text": "you'll see that even visualizing using a uh using a bounded context approach is a different way to look at your business",
    "start": "2721040",
    "end": "2727359"
  },
  {
    "text": "it seems less rigid it also makes you look at the responsibilities of the bounded context as a whole",
    "start": "2727359",
    "end": "2733200"
  },
  {
    "text": "and not necessarily as part of a distributed system",
    "start": "2733200",
    "end": "2737838"
  },
  {
    "start": "2738000",
    "end": "2738000"
  },
  {
    "text": "once you have some ideas around your bounded contexts the next thing is to define the",
    "start": "2738800",
    "end": "2744640"
  },
  {
    "text": "communication between the different bounded contexts with the subset shown on the slide",
    "start": "2744640",
    "end": "2750560"
  },
  {
    "text": "we know the purchasing bounding context has to get information from the product bounded context",
    "start": "2750560",
    "end": "2755839"
  },
  {
    "text": "and i gotta stop saying bounded context because it's just killing me so the customer gets information from",
    "start": "2755839",
    "end": "2761119"
  },
  {
    "text": "the order and geography order gets information from customer and product",
    "start": "2761119",
    "end": "2767119"
  },
  {
    "text": "why because it makes sense uh they have a relationship between them what does purchasing do",
    "start": "2767119",
    "end": "2772720"
  },
  {
    "text": "if it doesn't relate to products or what is what are orders without products so as you build out these communication",
    "start": "2772720",
    "end": "2779440"
  },
  {
    "text": "streams pay attention to the three important details about the communications what each of the context needs to know",
    "start": "2779440",
    "end": "2786000"
  },
  {
    "text": "why they need to know it and when they need to know it because understanding those key bits will help",
    "start": "2786000",
    "end": "2791119"
  },
  {
    "text": "us design our system so i pulled out the communications",
    "start": "2791119",
    "end": "2796319"
  },
  {
    "start": "2795000",
    "end": "2795000"
  },
  {
    "text": "between product and purchasing i use this is the example because of how it shows how domains could be different",
    "start": "2796319",
    "end": "2802480"
  },
  {
    "text": "uh for different companies the way that this company defined um their business is that the product is",
    "start": "2802480",
    "end": "2809920"
  },
  {
    "text": "the most important thing and then they will find out the best place to buy the product",
    "start": "2809920",
    "end": "2815040"
  },
  {
    "text": "to purchase it many other companies that i've worked with have a different approach",
    "start": "2815040",
    "end": "2820400"
  },
  {
    "text": "where the purchasing domain actually provides the the product to the products domain so the purchasing domain is actually",
    "start": "2820400",
    "end": "2826720"
  },
  {
    "text": "responsible for creating the product and then providing that to the product domain this one is different it takes",
    "start": "2826720",
    "end": "2832640"
  },
  {
    "text": "the other approach the product bounded context is responsible for creating the product",
    "start": "2832640",
    "end": "2837760"
  },
  {
    "text": "and then allowing that to be sold through the purchasing bound context",
    "start": "2837760",
    "end": "2844480"
  },
  {
    "text": "so in this particular case the product bounded context kind of um just lets the purchase bounding",
    "start": "2844480",
    "end": "2850800"
  },
  {
    "text": "context by sending this pieces of information in the message",
    "start": "2850800",
    "end": "2856160"
  },
  {
    "text": "so here's how this relationship in the current system is currently defined in the database uh",
    "start": "2856400",
    "end": "2862160"
  },
  {
    "text": "the half with the with the color is the purchasing schema the right side is the product schema",
    "start": "2862160",
    "end": "2867839"
  },
  {
    "text": "there's just a single foreign key relationship from the purchase order details table in the purchasing schema",
    "start": "2867839",
    "end": "2872960"
  },
  {
    "text": "to the product table in the product schema if you take a look at the product table",
    "start": "2872960",
    "end": "2878000"
  },
  {
    "text": "you'll see that it has three tables directly related to it with a couple of those related to other tables",
    "start": "2878000",
    "end": "2883440"
  },
  {
    "text": "this means that a fully instantiated object graph of a product is going to be pretty gnarly and it's hard to imagine that the",
    "start": "2883440",
    "end": "2889599"
  },
  {
    "text": "purchasing systems needs all of that information and it doesn't so while it needs a few",
    "start": "2889599",
    "end": "2895280"
  },
  {
    "text": "more pieces of information that we showed here it's only a small fraction of the overall object graph",
    "start": "2895280",
    "end": "2901760"
  },
  {
    "text": "basically so that the purchasing agent can fill out the purchasing order but it's been identified that's what the",
    "start": "2901760",
    "end": "2908160"
  },
  {
    "text": "context needs and that's why it needs it the last question is when in this case",
    "start": "2908160",
    "end": "2914400"
  },
  {
    "text": "does a purchasing context need strong consistency or does eventual consistency work",
    "start": "2914400",
    "end": "2919520"
  },
  {
    "text": "what kind of lag can your system tolerate between when the product context knows about",
    "start": "2919520",
    "end": "2925280"
  },
  {
    "text": "when a newer change product happens and when the purchasing context knows about it",
    "start": "2925280",
    "end": "2930720"
  },
  {
    "text": "the more tolerance you have the more eventually consistency the more eventual consistency is",
    "start": "2930720",
    "end": "2936160"
  },
  {
    "text": "appropriate so back to how to plan your refactor",
    "start": "2936160",
    "end": "2943119"
  },
  {
    "start": "2939000",
    "end": "2939000"
  },
  {
    "text": "so we talked about describing context and defining communications what why and when the next step is determining the most",
    "start": "2943119",
    "end": "2949520"
  },
  {
    "text": "critical core area of your application and to find it in detail",
    "start": "2949520",
    "end": "2954559"
  },
  {
    "text": "if you remember back to the earlier slide on ddd it used the phrase a way of focusing on",
    "start": "2954559",
    "end": "2959920"
  },
  {
    "text": "core areas for design consideration and emphasis that's what we do now",
    "start": "2959920",
    "end": "2965040"
  },
  {
    "text": "determine those core areas some of this will be at the infrastructure level such as",
    "start": "2965040",
    "end": "2971119"
  },
  {
    "text": "defining sending and receiving messages others will be more domain level",
    "start": "2971119",
    "end": "2978400"
  },
  {
    "start": "2978000",
    "end": "2978000"
  },
  {
    "text": "as you go into your refactor there are a couple of items you have to do as you as part of your planning process",
    "start": "2978720",
    "end": "2985838"
  },
  {
    "text": "the first and most important is to define your critical area um this most likely will include several",
    "start": "2986880",
    "end": "2992960"
  },
  {
    "text": "bounded contexts this could also be spread across multiple systems and once you've",
    "start": "2992960",
    "end": "2998400"
  },
  {
    "text": "identified those critical areas define the communications between each part and then start breaking that chain of",
    "start": "2998400",
    "end": "3005119"
  },
  {
    "text": "dependencies remember this process",
    "start": "3005119",
    "end": "3010240"
  },
  {
    "text": "and the communication schema that looked like this would an approach like this make more",
    "start": "3010559",
    "end": "3016640"
  },
  {
    "start": "3015000",
    "end": "3015000"
  },
  {
    "text": "sense assuming that eventual consistency is okay with the business need this could mean solving this problem the",
    "start": "3016640",
    "end": "3023760"
  },
  {
    "text": "user website places an order the website bounded context says relevant information about that order",
    "start": "3023760",
    "end": "3029760"
  },
  {
    "text": "it then sends an order placed message orders and products are both listening for order place messages",
    "start": "3029760",
    "end": "3035040"
  },
  {
    "text": "the order takes that message saves all of the information locally and does whatever other business activities need to happen",
    "start": "3035040",
    "end": "3041599"
  },
  {
    "text": "the product also takes that message but since all it really cares about is the product id and quantity that was ordered",
    "start": "3041599",
    "end": "3047119"
  },
  {
    "text": "it just takes those pieces of information and decrements the quantity of available product",
    "start": "3047119",
    "end": "3053599"
  },
  {
    "text": "and if evolution of the business means that some other domain is identified and added to the ubiquitous language that",
    "start": "3053599",
    "end": "3060160"
  },
  {
    "text": "cares about an order being placed then you just add that in as well and",
    "start": "3060160",
    "end": "3065599"
  },
  {
    "text": "you don't affect any of the already existing code none of that has to be changed so rolling in that new functionality",
    "start": "3065599",
    "end": "3071599"
  },
  {
    "text": "is pretty much as low risk as you can get unlike what you would have to do if",
    "start": "3071599",
    "end": "3077520"
  },
  {
    "text": "you're going to make that change in the current version say adding in a new step into the process that the web has to perform",
    "start": "3077520",
    "end": "3084400"
  },
  {
    "text": "and since the change is happening on the website it has the potential of affecting all of the other steps of the process",
    "start": "3084400",
    "end": "3089839"
  },
  {
    "text": "that are happening on the website so the risk of that change is much higher than using the new design",
    "start": "3089839",
    "end": "3096000"
  },
  {
    "text": "we know that the website calls multiple services as part of its processing such as the order user and payment so",
    "start": "3096000",
    "end": "3103040"
  },
  {
    "text": "let's talk about those two highlighted systems and how they should change",
    "start": "3103040",
    "end": "3108240"
  },
  {
    "start": "3108000",
    "end": "3108000"
  },
  {
    "text": "so this is what our goal system looks like the website will pass information along to the website service",
    "start": "3108559",
    "end": "3113920"
  },
  {
    "text": "the website service will persist that information that the website thinks is irrelevant and then queue up a message containing",
    "start": "3113920",
    "end": "3119520"
  },
  {
    "text": "that data the order service rather than being directly called by the big old web app",
    "start": "3119520",
    "end": "3124960"
  },
  {
    "text": "is now listening to the message queue for messages that fit the appropriate criteria",
    "start": "3124960",
    "end": "3130079"
  },
  {
    "text": "so we're adding two new constructs here the website service and it's attached storage in this case",
    "start": "3130079",
    "end": "3135760"
  },
  {
    "text": "amazon aurora and the message queue we're changing the big old web application by removing all of the",
    "start": "3135760",
    "end": "3142079"
  },
  {
    "text": "business process that it was doing and moving that into the processing into the website service",
    "start": "3142079",
    "end": "3147680"
  },
  {
    "text": "we're changing the order service so that it listens to the message queue for order created messages",
    "start": "3147680",
    "end": "3154079"
  },
  {
    "text": "so the work that needs to be done refactor the website to remove business process create the new website service to do",
    "start": "3154079",
    "end": "3159839"
  },
  {
    "start": "3155000",
    "end": "3155000"
  },
  {
    "text": "website domain work and refactor order service uh to listen to message queue",
    "start": "3159839",
    "end": "3166880"
  },
  {
    "text": "so this is pretty much what the website looks now there's a a bunch of client-side logic in that hippie language javascript there's a controller",
    "start": "3166880",
    "end": "3173839"
  },
  {
    "text": "layer that accepts the user input it returns the ui elements and there's a",
    "start": "3173839",
    "end": "3178960"
  },
  {
    "text": "business logic layer that does all of the processing and orchestration that's what we're going to move so",
    "start": "3178960",
    "end": "3185359"
  },
  {
    "text": "ideally a lot of this would be easy to move because we already have an abstraction layer between the controller and the",
    "start": "3185359",
    "end": "3190880"
  },
  {
    "text": "business logic i don't know if i would necessarily call it a repository but other some kind of interface layer a service layer or",
    "start": "3190880",
    "end": "3196960"
  },
  {
    "text": "something like that if you do then it's pretty easy to replace the current implementation with a layer that calls the website",
    "start": "3196960",
    "end": "3203200"
  },
  {
    "text": "where this business logic will move to if there isn't however we did go over a refactor pattern that would help with",
    "start": "3203200",
    "end": "3209119"
  },
  {
    "text": "that the branch by abstraction in this case",
    "start": "3209119",
    "end": "3214240"
  },
  {
    "start": "3211000",
    "end": "3211000"
  },
  {
    "text": "you would add the abstraction layer between the controllers and the business logic assuming that it's not already there",
    "start": "3214240",
    "end": "3219680"
  },
  {
    "text": "once you get that done and can verify that all of the communications between the controller and the business logic",
    "start": "3219680",
    "end": "3225520"
  },
  {
    "text": "are passing through that abstraction layer you can then refactor the previous",
    "start": "3225520",
    "end": "3231040"
  },
  {
    "text": "business layer to instead call the new website service so right about now you may be questioning my decision to create a new",
    "start": "3231040",
    "end": "3237760"
  },
  {
    "text": "website service so this is one of the most common decisions that people make and",
    "start": "3237760",
    "end": "3243359"
  },
  {
    "text": "and i would argue incorrectly is to perform any kind of business logic in the website system itself",
    "start": "3243359",
    "end": "3250160"
  },
  {
    "text": "instead add a new layer of abstraction to the whole kit and caboodle um and use that to",
    "start": "3250160",
    "end": "3258079"
  },
  {
    "text": "as your as your first step for this reprocessing and refactoring and then especially because this",
    "start": "3258079",
    "end": "3264000"
  },
  {
    "text": "provides scaling um if business logic processing is expensive and the ui rendering is not",
    "start": "3264000",
    "end": "3269280"
  },
  {
    "text": "then you can scale them differently you're already starting to get some gains for your for your separation and it'll also",
    "start": "3269280",
    "end": "3275680"
  },
  {
    "text": "decrease your uh your risk of changes to the system as you move forward by decoupling the",
    "start": "3275680",
    "end": "3280880"
  },
  {
    "text": "presentation the business logic even further than you would in a traditional mvc approach",
    "start": "3280880",
    "end": "3285920"
  },
  {
    "text": "each can grow and be managed on their own so this is a higher level view of the",
    "start": "3285920",
    "end": "3292160"
  },
  {
    "start": "3289000",
    "end": "3289000"
  },
  {
    "text": "current order service it's pretty straightforward there's the defined api that includes the endpoints",
    "start": "3292160",
    "end": "3297760"
  },
  {
    "text": "called from the website the business logic and the persistence layer when you consider this design what kind",
    "start": "3297760",
    "end": "3304559"
  },
  {
    "text": "of changes do you envision that would have to make for it so let's take a look at one approach that you could do to make that work",
    "start": "3304559",
    "end": "3312160"
  },
  {
    "text": "so this is what an idea of what the order service would need to look like afterwards",
    "start": "3312160",
    "end": "3317760"
  },
  {
    "text": "first we need to add a message handler so this is going to pay attention to the message queue and react to the order created messages",
    "start": "3317760",
    "end": "3324000"
  },
  {
    "text": "that come through and whatever other messages we end up caring about conceptually you wouldn't have to change",
    "start": "3324000",
    "end": "3329839"
  },
  {
    "text": "the api at all that the endpoints for creating the order still exist or okay you know especially if there's",
    "start": "3329839",
    "end": "3336240"
  },
  {
    "text": "other systems that maybe call that endpoint that's not something that's happening in our case here because of the big monolithic app",
    "start": "3336240",
    "end": "3342640"
  },
  {
    "text": "but in one of those systems where there may be multiple applications that are doing it you could just keep that api there until",
    "start": "3342640",
    "end": "3348319"
  },
  {
    "text": "you've had a chance to refactor those other systems we'll also need to add a messaging layer",
    "start": "3348319",
    "end": "3353599"
  },
  {
    "text": "to process any outbound messages if we're going to be setting anything um and then we would need to refactor",
    "start": "3353599",
    "end": "3359839"
  },
  {
    "text": "the business logic layer so if we remember this approach you'll",
    "start": "3359839",
    "end": "3365440"
  },
  {
    "text": "see that the order service did the processing to update the product inventory and to send the order",
    "start": "3365440",
    "end": "3371359"
  },
  {
    "text": "confirmation email but it doesn't have to do that um",
    "start": "3371359",
    "end": "3377040"
  },
  {
    "text": "because those services will already know about them because they're smart that way because you made the same types of changes to",
    "start": "3377040",
    "end": "3383839"
  },
  {
    "text": "them this work seems intimidating there's a lot of changes to go through",
    "start": "3383839",
    "end": "3389040"
  },
  {
    "text": "it'll be frustrating it'll take you way longer than you expect however it's doable i've done this",
    "start": "3389040",
    "end": "3395200"
  },
  {
    "text": "several times myself and as long as you concentrate on understanding your domain",
    "start": "3395200",
    "end": "3400240"
  },
  {
    "text": "building your ubiquitous language differentiating your bounded context become clear",
    "start": "3400240",
    "end": "3405359"
  },
  {
    "text": "and in my mind that's the hardest part finding the communication between these",
    "start": "3405359",
    "end": "3410480"
  },
  {
    "text": "bounded contexts as well as the business rules you know within the bounded context",
    "start": "3410480",
    "end": "3415839"
  },
  {
    "text": "helps you understand the appropriateness of specific implementation approaches such as",
    "start": "3415839",
    "end": "3420880"
  },
  {
    "text": "cqrs messaging and eventual consistency within each individual bounded constant or",
    "start": "3420880",
    "end": "3426799"
  },
  {
    "text": "context after understanding all of that",
    "start": "3426799",
    "end": "3434240"
  },
  {
    "text": "it really seems that writing the code is simply an implementation detail",
    "start": "3434240",
    "end": "3440960"
  },
  {
    "text": "i know we try to cover a lot of things in a short period i appreciate you sticking with me",
    "start": "3443440",
    "end": "3448640"
  },
  {
    "text": "especially since we couldn't get as deep into the weeds as i imagined some of you were hoping some of those earlier talks that i",
    "start": "3448640",
    "end": "3454799"
  },
  {
    "text": "mentioned to did go a little bit deeper so once again i say i recommend go take a look at those so",
    "start": "3454799",
    "end": "3461040"
  },
  {
    "text": "thank you uh and don't forget to come over to the aws booth and if you haven't already registered for the drawing for",
    "start": "3461040",
    "end": "3467359"
  },
  {
    "text": "star wars lego come and do it",
    "start": "3467359",
    "end": "3474079"
  },
  {
    "text": "thank you",
    "start": "3474079",
    "end": "3489680"
  }
]