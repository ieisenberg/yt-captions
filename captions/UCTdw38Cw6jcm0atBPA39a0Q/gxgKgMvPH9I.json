[
  {
    "text": "hello everyone I said hello everyone",
    "start": "3060",
    "end": "8720"
  },
  {
    "text": "all right thanks for coming here uh this afternoon my name is Jimmy Bogard um you can find me on Twitter at J Bogard and",
    "start": "9540",
    "end": "17100"
  },
  {
    "text": "this presentation is on my GitHub at github.com there's a presentations repository so all the code you see there",
    "start": "17100",
    "end": "22740"
  },
  {
    "text": "from this and all my other presentations will be there and I blog about this and all that other stuff on my blog at",
    "start": "22740",
    "end": "27900"
  },
  {
    "text": "jimmyboguard.com all right um so this is a this is a fun talk I like to do because",
    "start": "27900",
    "end": "34020"
  },
  {
    "text": "a lot of teams I talk to meet that are kind of new to domain-driven design they think that you know because they have an",
    "start": "34020",
    "end": "40079"
  },
  {
    "text": "existing system or like existing code base that they can't possibly apply these domain different design principles",
    "start": "40079",
    "end": "45960"
  },
  {
    "text": "to the code they already have um they think they need like a fresh clean slate Greenfield application and",
    "start": "45960",
    "end": "52500"
  },
  {
    "text": "only then can they apply this kind of drone Wayne driven design principles but that's absolutely not the case and",
    "start": "52500",
    "end": "58020"
  },
  {
    "text": "so this talk is really about taking a set of taking a code base that is not",
    "start": "58020",
    "end": "63439"
  },
  {
    "text": "using domain driven design and using refactoring techniques to slowly",
    "start": "63439",
    "end": "68640"
  },
  {
    "text": "refactor it towards an actual domain model but first let's talk about what is uh",
    "start": "68640",
    "end": "74580"
  },
  {
    "text": "domain driven design um so the funny thing is that there's not actually a concise definition in the",
    "start": "74580",
    "end": "80580"
  },
  {
    "text": "original book so I had a kind of glean one from it um but it's a architectural design strategy in which we selectively distill",
    "start": "80580",
    "end": "87619"
  },
  {
    "text": "organize and Abstract the body of knowledge from the users to the software",
    "start": "87619",
    "end": "93000"
  },
  {
    "text": "users could be you know the product owners it could be the other like domain experts or the actual users themselves",
    "start": "93000",
    "end": "99420"
  },
  {
    "text": "there's three kind of important parts of that this is the distillation so we're taking the complexities of the real",
    "start": "99420",
    "end": "105479"
  },
  {
    "text": "world and we're not trying to map the exact like down to the atom things that happen in the real world or if there's",
    "start": "105479",
    "end": "111360"
  },
  {
    "text": "like processes and stuff we're not trying to capture every single step so we're we're being selective about",
    "start": "111360",
    "end": "116520"
  },
  {
    "text": "picking this part and this part in this part and then um explicitly modeling those Concepts in",
    "start": "116520",
    "end": "122040"
  },
  {
    "text": "the software that we build and so a lot of domain driven design revolves around this idea of an object",
    "start": "122040",
    "end": "129300"
  },
  {
    "text": "model of the domain and that's what a domain model is this term actually predates the blue book The Big Blue Book",
    "start": "129300",
    "end": "136200"
  },
  {
    "text": "of domain different design um it uh the one of the previous definitions came from Fowler's book the",
    "start": "136200",
    "end": "142020"
  },
  {
    "text": "patterns of Enterprise application architecture and he described it as an object model of the domain that",
    "start": "142020",
    "end": "148200"
  },
  {
    "text": "incorporates both behavior and data and those those two parts are important",
    "start": "148200",
    "end": "154680"
  },
  {
    "text": "if it only had data then it's just a data model if it only had Behavior then it's just functions and so the dummy",
    "start": "154680",
    "end": "161280"
  },
  {
    "text": "model in an object-orienting language needs to incorporate both things in order to be considered a quote domain",
    "start": "161280",
    "end": "166860"
  },
  {
    "text": "model yes but my existing code it sucks so how",
    "start": "166860",
    "end": "172019"
  },
  {
    "text": "do we take the code that exists today and then try to represent our this domain model uh idea interactional code",
    "start": "172019",
    "end": "178319"
  },
  {
    "text": "base well one great way of doing this would be to use test terminal design that has",
    "start": "178319",
    "end": "185459"
  },
  {
    "text": "these three steps of red green refactor um or most Legacy code bases that I see",
    "start": "185459",
    "end": "190680"
  },
  {
    "text": "with like little to no actual automated tests it's more just like well we'll run",
    "start": "190680",
    "end": "195780"
  },
  {
    "text": "it in production and then we'll get it's working okay but we'll have we'll just refactor right there",
    "start": "195780",
    "end": "202159"
  },
  {
    "text": "so looking at an existing code base um just figuring out how to refactor this safely and effectively and also",
    "start": "202800",
    "end": "209099"
  },
  {
    "text": "trying to understand you know what are we what's our end goal what are we refacting towards there's a lot of great",
    "start": "209099",
    "end": "214860"
  },
  {
    "text": "literature out there on how to perform these refactoring since also a lot of great tooling as well so we'll be",
    "start": "214860",
    "end": "220500"
  },
  {
    "text": "standing on the shoulders of other Giants of these different refactoring techniques that I did not make up that are just already named out there and",
    "start": "220500",
    "end": "226560"
  },
  {
    "text": "actually have nothing to do with the domain driven design and a few of the books that I really like um to to refer back to for these kind of",
    "start": "226560",
    "end": "234840"
  },
  {
    "text": "refactoring techniques the first one is Michael feather's great book working effectively with Legacy code",
    "start": "234840",
    "end": "240720"
  },
  {
    "text": "um that's just like how do I make exist how can I refactor existing Legacy code safely and add and make it testable as",
    "start": "240720",
    "end": "247860"
  },
  {
    "text": "well of course there's Martin Fowler's book which has the second edition now which covers a lot of refactoring techniques",
    "start": "247860",
    "end": "253980"
  },
  {
    "text": "and then my favorite patterns book is Joshua karovsky's refactoring to patterns so all of these look at all",
    "start": "253980",
    "end": "260759"
  },
  {
    "text": "these kind of revolver on the same concept of I have some existing code that exhibits some kind of design or",
    "start": "260759",
    "end": "266699"
  },
  {
    "text": "code smells and here are some potential refactoring techniques to address those different code smells",
    "start": "266699",
    "end": "273240"
  },
  {
    "text": "Well what we'll be doing is using these techniques to refactor an existing kind",
    "start": "273240",
    "end": "278280"
  },
  {
    "text": "of procedural set of code towards an actual domain model but first let's look at the existing",
    "start": "278280",
    "end": "283919"
  },
  {
    "text": "states of the code as it is today so I've got here the class diagram of",
    "start": "283919",
    "end": "289320"
  },
  {
    "text": "our our current quote model so one thing that is nice right now is that the names",
    "start": "289320",
    "end": "294479"
  },
  {
    "text": "of these things do match the names the like the users use and the business experts use and the product owners use",
    "start": "294479",
    "end": "299639"
  },
  {
    "text": "so that's one good thing um I would say if you are in your existing systems and applications the",
    "start": "299639",
    "end": "305220"
  },
  {
    "text": "names don't match what the business uses and the names don't match what the users use that is something to kind of try to",
    "start": "305220",
    "end": "312600"
  },
  {
    "text": "address uh earlier than later to say can we at least agree upon the names of things and then make sure the names are",
    "start": "312600",
    "end": "318300"
  },
  {
    "text": "the things in our code also match the names of things in the real world so this code base is meant to Model A",
    "start": "318300",
    "end": "325800"
  },
  {
    "text": "loyalty reward system and so in this loyalty reward system um you have people in the real world",
    "start": "325800",
    "end": "331680"
  },
  {
    "text": "that can become a member of this loyalty reward system so right away we've got a class called member so that's one good",
    "start": "331680",
    "end": "338280"
  },
  {
    "text": "thing so far it's not called person it's not called human it's not called um it's it's called member because it's",
    "start": "338280",
    "end": "345720"
  },
  {
    "text": "not not every single person in the in the world is is considered a member of this loyalty reward system so this is",
    "start": "345720",
    "end": "352440"
  },
  {
    "text": "already like a being selective about uh who uh we represent in the system",
    "start": "352440",
    "end": "358919"
  },
  {
    "text": "the attributes as part of that class correspond to the things that the business cares about so the email and",
    "start": "358919",
    "end": "364620"
  },
  {
    "text": "their name and then it has a relationship over to this offer class",
    "start": "364620",
    "end": "369960"
  },
  {
    "text": "and an offer that represents an individual uh like coupon or discount applied to a a specific member so an",
    "start": "369960",
    "end": "378660"
  },
  {
    "text": "offer is tied directly to a single member so if I am assigned a a coupon or",
    "start": "378660",
    "end": "384419"
  },
  {
    "text": "an offer and I get it scanned then it's used and I can't no one else can use it because it's specific to me",
    "start": "384419",
    "end": "392360"
  },
  {
    "text": "finally we have some administration of these different kinds of offers and so we have this offer type class that has",
    "start": "392699",
    "end": "398639"
  },
  {
    "text": "some kind of metadata information about the different kinds of offers I can assign",
    "start": "398639",
    "end": "403860"
  },
  {
    "text": "now if I look at the the arrows between these things um they even represent the the real relationships between these",
    "start": "403860",
    "end": "410160"
  },
  {
    "text": "different kinds of uh objects so member doesn't just have an offers property it has an assigned offers property the",
    "start": "410160",
    "end": "417000"
  },
  {
    "text": "offer cost itself doesn't have just a member property it has the member signs so the name of it reflects the",
    "start": "417000",
    "end": "422039"
  },
  {
    "text": "relationship between these two uh between those two entities",
    "start": "422039",
    "end": "426918"
  },
  {
    "text": "so looking at this though um there's something missing which is the behavior these classes only",
    "start": "427319",
    "end": "433979"
  },
  {
    "text": "have properties and have no methods I mean they have I guess like the equals method but like that doesn't really",
    "start": "433979",
    "end": "439380"
  },
  {
    "text": "count um it has no it has no domain Behavior associated with these with with these different objects",
    "start": "439380",
    "end": "445620"
  },
  {
    "text": "um so where is the behavior the behavior does exist somewhere in the system but",
    "start": "445620",
    "end": "450720"
  },
  {
    "text": "where does it exist well like it could be in the controller action it could be in the click Handler",
    "start": "450720",
    "end": "457199"
  },
  {
    "text": "it can be in like helper methods or helper classes or manager classes so there's probably like a member manager",
    "start": "457199",
    "end": "463199"
  },
  {
    "text": "an offer manager an offer helper so this thing the behavior does exist in the system but it's not uh it's not",
    "start": "463199",
    "end": "470520"
  },
  {
    "text": "reflected in those different domain objects so in this case I've got a Services folder that contains all the different",
    "start": "470520",
    "end": "477300"
  },
  {
    "text": "kinds of uh services that represents the different actions the user can perform uh related to these different uh related",
    "start": "477300",
    "end": "484800"
  },
  {
    "text": "to these different entities all right so let's switch over to the code so I'll stop sharing here",
    "start": "484800",
    "end": "491879"
  },
  {
    "text": "and go over to visual studio all right so",
    "start": "491879",
    "end": "498900"
  },
  {
    "text": "from here on out we'll be just in Visual Studio using again the standard refactoring techniques to refactor this",
    "start": "498900",
    "end": "504900"
  },
  {
    "text": "existing non-behavioral application to an actual you know real real domain",
    "start": "504900",
    "end": "510360"
  },
  {
    "text": "model um now one thing you don't see here is a tests project that was intentional",
    "start": "510360",
    "end": "517680"
  },
  {
    "text": "because I was lazy and I didn't want to write tests but in in actuality we should be writing tests along the way to",
    "start": "517680",
    "end": "524399"
  },
  {
    "text": "make sure that the behaviors we're adding um reflect the the behaviors we're intending",
    "start": "524399",
    "end": "530940"
  },
  {
    "text": "but nothing like that for now okay so I see down over here in the services folder there's a few classes",
    "start": "530940",
    "end": "537480"
  },
  {
    "text": "over here and these represent the different actions the user can perform I've got an assigned offer Handler so",
    "start": "537480",
    "end": "543240"
  },
  {
    "text": "that represents all the logic associated with assigning an offer to a member and the next one I have is the expire offer",
    "start": "543240",
    "end": "549240"
  },
  {
    "text": "Handler so that's the the action that represents the uh the expiration or expiring an offer for an individual",
    "start": "549240",
    "end": "555899"
  },
  {
    "text": "member and so if I look at these I'll just pop them the assign offer Handler",
    "start": "555899",
    "end": "563660"
  },
  {
    "text": "um so the first thing I'll do when I look at any kind of class or uh any file to see like what is this class doing one",
    "start": "564899",
    "end": "571440"
  },
  {
    "text": "of the first things I look at is just what are the different uh using statements we have here and so right",
    "start": "571440",
    "end": "577560"
  },
  {
    "text": "away I can see that we've got it's using the services namespace here so that's where the kind of DB context comes comes",
    "start": "577560",
    "end": "583920"
  },
  {
    "text": "into play it's got Json stuff so Json and HTTP so there must be some API web",
    "start": "583920",
    "end": "591120"
  },
  {
    "text": "AP web API calls being made here it's got threading because we are everything's async these days so that's",
    "start": "591120",
    "end": "597480"
  },
  {
    "text": "always going to be there and it's also using mediator this is that about that library but the uh it's also using that",
    "start": "597480",
    "end": "604200"
  },
  {
    "text": "to represent an individual action now this class takes a couple",
    "start": "604200",
    "end": "609959"
  },
  {
    "text": "dependencies so we can already see that it's using dependency injection and inside its uh Constructor dependencies",
    "start": "609959",
    "end": "615540"
  },
  {
    "text": "we can see that it takes an app DB context so it must be doing some Entity framework junk and it takes an HTTP",
    "start": "615540",
    "end": "621540"
  },
  {
    "text": "client so it must be calling out to these web some web API web apis",
    "start": "621540",
    "end": "627800"
  },
  {
    "text": "all right so let's look Lex at the uh the handle method",
    "start": "627839",
    "end": "632779"
  },
  {
    "text": "okay so um it looks like the very first thing it does is it loads some data out of the database from from any framework",
    "start": "633000",
    "end": "639620"
  },
  {
    "text": "that's like most of the actions in an application the first thing that happens is loading up some data and then I see",
    "start": "639620",
    "end": "646440"
  },
  {
    "text": "some code comments so it looks like right away someone thought this code was too complex so let's add some code code",
    "start": "646440",
    "end": "652320"
  },
  {
    "text": "comments to make it less complex right so it looks like the first step is then",
    "start": "652320",
    "end": "658680"
  },
  {
    "text": "to calculate the offer value and it looks like it's using a uh a web API to",
    "start": "658680",
    "end": "663720"
  },
  {
    "text": "do so so make some API call to calculate offer value passing in the member's email and the offer type so those two",
    "start": "663720",
    "end": "670860"
  },
  {
    "text": "things like maybe there's some maybe there's some like calculations behind the scenes to say oh if you're a good member then you get a higher discount or",
    "start": "670860",
    "end": "677820"
  },
  {
    "text": "maybe it's like uh maybe if you if you um you have more points or something you can get a bigger discount as well",
    "start": "677820",
    "end": "684959"
  },
  {
    "text": "so it makes the API call make sure I got a successful status code and then gets the value of right after doing this",
    "start": "684959",
    "end": "692100"
  },
  {
    "text": "deserialization all right next up we have is calculating",
    "start": "692100",
    "end": "697320"
  },
  {
    "text": "the expiration date so it looks like just a switch statement that's saying uh depending on the offer expiration type",
    "start": "697320",
    "end": "703260"
  },
  {
    "text": "we're going to calculate the expiration date based on either if it's an assignment type it'll add days to today",
    "start": "703260",
    "end": "710240"
  },
  {
    "text": "to say this is to give it an expiration date so it'll look at the days valid so",
    "start": "710240",
    "end": "716100"
  },
  {
    "text": "if it's valid for 10 days or 15 days it'll just add 10 days from today and that's the that's the date it expires",
    "start": "716100",
    "end": "722700"
  },
  {
    "text": "and the effects type will just say adding days to the begin date so the",
    "start": "722700",
    "end": "728279"
  },
  {
    "text": "offer begins like maybe it begins on May 1st and it's good for the entire month of May so that it ends on May 30th",
    "start": "728279",
    "end": "735899"
  },
  {
    "text": "30 days May yes and the final component is is the actual you know kind of real work being done in",
    "start": "735899",
    "end": "742320"
  },
  {
    "text": "this method is to assign an offer to a method all right sign an offer to a member so it creates the offer object",
    "start": "742320",
    "end": "749940"
  },
  {
    "text": "and then adds the offer to the assigned offers list on the member object and",
    "start": "749940",
    "end": "756120"
  },
  {
    "text": "then looks like here there are some calculated fields in this application maybe there's like a little summary",
    "start": "756120",
    "end": "761459"
  },
  {
    "text": "widget at the top of the page or maybe they do some reporting to sum up the number of active offers so it looks like",
    "start": "761459",
    "end": "766740"
  },
  {
    "text": "it's pre-calculating this this number of active offers based on whenever someone modifies the assigned offers",
    "start": "766740",
    "end": "774000"
  },
  {
    "text": "finally it will add the offer to the offers DB sets so",
    "start": "774000",
    "end": "779940"
  },
  {
    "text": "Entity framework junk and then finally save changes now looking at this method it's not like",
    "start": "779940",
    "end": "786720"
  },
  {
    "text": "terrible if some of my team wrote this I would probably you know be okay with the",
    "start": "786720",
    "end": "792300"
  },
  {
    "text": "pull request but uh that would be like a very short presentation so I think we can do better so let's look and see what",
    "start": "792300",
    "end": "799440"
  },
  {
    "text": "different ways we can uh what different techniques we can use to refactor this code",
    "start": "799440",
    "end": "805820"
  },
  {
    "text": "um so the first thing I'm looking at is I've got code comments describing sections of code so one of the first things we can do is to Simply extract",
    "start": "806339",
    "end": "813000"
  },
  {
    "text": "methods for each one of those blocks of things happening so that I have a better idea of like what that block of code is",
    "start": "813000",
    "end": "818880"
  },
  {
    "text": "doing what are the different parameters it's using what data is it using uh what date does it read and what data does it",
    "start": "818880",
    "end": "824459"
  },
  {
    "text": "write so I'll just go here and say extract method yes",
    "start": "824459",
    "end": "831500"
  },
  {
    "text": "and the name of the method uh let's see well the code comment said calculate offer value so that seems like a pretty",
    "start": "831660",
    "end": "838740"
  },
  {
    "text": "good name for method so calculate offer value it's telling me that it takes two",
    "start": "838740",
    "end": "843899"
  },
  {
    "text": "parameters the member in the offer type those seem okay to me and so I will give it a name of",
    "start": "843899",
    "end": "849139"
  },
  {
    "text": "calculate offer value",
    "start": "849139",
    "end": "853759"
  },
  {
    "text": "all right we'll do the same thing for the next uh set of code here that's been",
    "start": "855480",
    "end": "860519"
  },
  {
    "text": "commented out so extraction method here and say calculate expiration dates extract method calculate",
    "start": "860519",
    "end": "868639"
  },
  {
    "text": "expiration date and then finally assign offer",
    "start": "868639",
    "end": "877639"
  },
  {
    "text": "uh sign offer",
    "start": "881699",
    "end": "886519"
  },
  {
    "text": "all right so that looks a little bit better now it reads more like a story I guess I've got the initial part that's",
    "start": "889920",
    "end": "896100"
  },
  {
    "text": "loading the data I've got the first method that calculates the offer value I've got this next method to calculates the expiration dates and finally the the",
    "start": "896100",
    "end": "902579"
  },
  {
    "text": "last method that we'll assign the offer to the member so this refactoring that I just did Here",
    "start": "902579",
    "end": "907920"
  },
  {
    "text": "is known as the compose method refactoring the composed method retap refactoring takes a long method and",
    "start": "907920",
    "end": "913920"
  },
  {
    "text": "breaks it up into a series of smaller methods in which each of those smaller methods has the same level of complexity",
    "start": "913920",
    "end": "920100"
  },
  {
    "text": "or the same level of granularity so I don't have like one method that's broken into like 16 methods I just have like",
    "start": "920100",
    "end": "926820"
  },
  {
    "text": "one method for kind of each of the main major steps that happen in this in this code",
    "start": "926820",
    "end": "932420"
  },
  {
    "text": "um and this this met this overall handle method right now um is actually using uh another pattern",
    "start": "933540",
    "end": "940019"
  },
  {
    "text": "from the Fowler book for patterns of Enterprise application architecture this is known as the transaction script pattern transaction script pattern is",
    "start": "940019",
    "end": "946920"
  },
  {
    "text": "just this idea that I have individual actions for the different things that are happening in my application and each",
    "start": "946920",
    "end": "951959"
  },
  {
    "text": "of those different actions is represented by a single method that does all the work that is uh that is then",
    "start": "951959",
    "end": "957480"
  },
  {
    "text": "wrapped in a transaction so this is wrapped into transaction I've got the save changes and the like the implicit",
    "start": "957480",
    "end": "963660"
  },
  {
    "text": "uh transaction of Entity Framework and then it just contains all the logic",
    "start": "963660",
    "end": "968820"
  },
  {
    "text": "and a sort of procedural way right here now again um if I saw this in a pull request I",
    "start": "968820",
    "end": "976680"
  },
  {
    "text": "still might accept it and say well that's clean enough for me I can read the different steps in each of these and I want to see and if I want to see the",
    "start": "976680",
    "end": "983100"
  },
  {
    "text": "details behind them I can go to the individual methods and look for the details there but again that would be a very short",
    "start": "983100",
    "end": "988740"
  },
  {
    "text": "presentation and not very fun so let's keep going",
    "start": "988740",
    "end": "993500"
  },
  {
    "text": "so the next thing I'll do is look at each of these individual methods look at what logic is inside of",
    "start": "994079",
    "end": "1002240"
  },
  {
    "text": "there and try to figure out should that logic belong somewhere else",
    "start": "1002240",
    "end": "1007720"
  },
  {
    "text": "so let's get the first one calculate offer value all right so this method",
    "start": "1008360",
    "end": "1015440"
  },
  {
    "text": "the first thing I see is that it's not static it's an instance method and",
    "start": "1015440",
    "end": "1023779"
  },
  {
    "text": "that what what that Clues me into is that because the services or the dependencies of this class are also",
    "start": "1023779",
    "end": "1030558"
  },
  {
    "text": "instance Fields because it did not refactor into a static method that means",
    "start": "1030559",
    "end": "1035600"
  },
  {
    "text": "that it's using those dependencies in some way and sure enough we see right here it is using this HTTP client",
    "start": "1035600",
    "end": "1041780"
  },
  {
    "text": "dependency now looking at this right here if I wanted to add a test to test out this",
    "start": "1041780",
    "end": "1049160"
  },
  {
    "text": "logic and behavior well this is going to be a problem right it's calling out to some web service and as the code exists",
    "start": "1049160",
    "end": "1055640"
  },
  {
    "text": "right now it is more difficult to sort of mock or fake that fake that call out",
    "start": "1055640",
    "end": "1062860"
  },
  {
    "text": "so what I'd like to do instead is refactor this method and extract it into a separate class",
    "start": "1062900",
    "end": "1069140"
  },
  {
    "text": "and by the way I am using resharper here and that's uh I I don't get any like kickbacks from them or anything like",
    "start": "1069140",
    "end": "1075260"
  },
  {
    "text": "that I've just been using vershopper for like ever so it's just a bit easier for me to use those tools and the other",
    "start": "1075260",
    "end": "1082520"
  },
  {
    "text": "thing that is a bit different for me sharper there are going to be some refactoring techniques I'll show you that don't exist in any other like free",
    "start": "1082520",
    "end": "1090380"
  },
  {
    "text": "tool that you could use whether it's rosin extensions or anything like that and I'll highlight those when I get to them but those are the ones that I",
    "start": "1090380",
    "end": "1098419"
  },
  {
    "text": "leverage a more powerful tool in order to be able to do those more interesting refactorings so",
    "start": "1098419",
    "end": "1104900"
  },
  {
    "text": "let's then extract this and I'm going to and extract a class",
    "start": "1104900",
    "end": "1111160"
  },
  {
    "text": "and so we're going to extract a class and first we have to give it to first we have to give it a name and this one says",
    "start": "1111860",
    "end": "1118400"
  },
  {
    "text": "uh it's it's it's the method name is calculate offer value and so if I want",
    "start": "1118400",
    "end": "1124820"
  },
  {
    "text": "to turn that into kind of a name of something that uh or the name of the responsibility of this I could call it",
    "start": "1124820",
    "end": "1129980"
  },
  {
    "text": "the offer value calculator let's call it that offer value calculator",
    "start": "1129980",
    "end": "1137480"
  },
  {
    "text": "it has a little red here and says uh and it needs to figure out how to get this",
    "start": "1139820",
    "end": "1144919"
  },
  {
    "text": "HTTP client dependency and so I'm going to tell it to do is uh let's see I can",
    "start": "1144919",
    "end": "1152679"
  },
  {
    "text": "give it that uh object as its own dependency so I've moved that field from",
    "start": "1153679",
    "end": "1161600"
  },
  {
    "text": "The Source class to the target class the next thing it says is uh I need to",
    "start": "1161600",
    "end": "1167299"
  },
  {
    "text": "make this method public because it's private right now so let's go ahead and do that",
    "start": "1167299",
    "end": "1172419"
  },
  {
    "text": "I'll click next leave it in the same file and let's see what happened so we see that method just disappeared",
    "start": "1172640",
    "end": "1179059"
  },
  {
    "text": "here it's gone and where put it is over here at the top of this file",
    "start": "1179059",
    "end": "1185380"
  },
  {
    "text": "so here we have now an offer value calculator with a dependency on an HTTP",
    "start": "1185539",
    "end": "1191000"
  },
  {
    "text": "client and then the behavior of this is the exact Behavior we saw before so it does the VAR response that goes blah blah",
    "start": "1191000",
    "end": "1197360"
  },
  {
    "text": "blah call the API uh DCR is the read the content deserialize the content and then",
    "start": "1197360",
    "end": "1204380"
  },
  {
    "text": "return the value so exact same thing it did before just bloop extract it into a class and put it in the same file here",
    "start": "1204380",
    "end": "1211580"
  },
  {
    "text": "foreign my my uh my initial class we can see",
    "start": "1211580",
    "end": "1218240"
  },
  {
    "text": "that uh this um is instantiating now the offer value calculator directly inside of this",
    "start": "1218240",
    "end": "1224780"
  },
  {
    "text": "Constructor here so we're still not at our testable States so if we want to get to a",
    "start": "1224780",
    "end": "1230419"
  },
  {
    "text": "testable State we'll have to have an interface for this in order to be able to mock it out in our unit tests",
    "start": "1230419",
    "end": "1237559"
  },
  {
    "text": "the unit tests that don't exist so again I'm going to put my little",
    "start": "1237559",
    "end": "1242960"
  },
  {
    "text": "carrot on top of this calculate offer Value method I'm going to say extract interface",
    "start": "1242960",
    "end": "1250779"
  },
  {
    "text": "and now it's going to offer an it's going to tell me a name it's going to give it a name of I offer value",
    "start": "1251720",
    "end": "1257000"
  },
  {
    "text": "calculator that seems that seems reasonable and it's going to ask which members and want to extract and so just",
    "start": "1257000",
    "end": "1263659"
  },
  {
    "text": "that one sounds good hit next and now we have an I offer value",
    "start": "1263659",
    "end": "1268820"
  },
  {
    "text": "calculator interface with this single implementation of the offer value calculator",
    "start": "1268820",
    "end": "1275059"
  },
  {
    "text": "now I don't like the name of that class I don't like implementations of an interface that just dropped the I that",
    "start": "1275059",
    "end": "1281059"
  },
  {
    "text": "doesn't give me any hint or clue about how this class implements that interface or what it's doing behind the scenes so",
    "start": "1281059",
    "end": "1287720"
  },
  {
    "text": "we're going to rename this class to web service offer value calculator",
    "start": "1287720",
    "end": "1295580"
  },
  {
    "text": "we won't rename the related symbols because who cares and there we go",
    "start": "1295580",
    "end": "1301299"
  },
  {
    "text": "all right so now we have a web service offer value calculator that implements this interface now because I've got uh",
    "start": "1302960",
    "end": "1309980"
  },
  {
    "text": "oh we'll get there in a second here okay so back over here I still don't have a a",
    "start": "1309980",
    "end": "1317059"
  },
  {
    "text": "testable interface here so I will put my little carrot over here and said uh",
    "start": "1317059",
    "end": "1322760"
  },
  {
    "text": "refactor this and down here there's a use base type where possible",
    "start": "1322760",
    "end": "1327980"
  },
  {
    "text": "so what this is doing is saying I'm using a more derived type if I look at all the usages of this type can I use",
    "start": "1327980",
    "end": "1334820"
  },
  {
    "text": "the base type instead and so what I wanted to do is to examine all those use cases and say am I using the the class",
    "start": "1334820",
    "end": "1341600"
  },
  {
    "text": "methods or am I using the interface methods and this is a safe way for us to then perform that refactoring",
    "start": "1341600",
    "end": "1347840"
  },
  {
    "text": "so use base type where possible and then not system.object that would be silly the interface",
    "start": "1347840",
    "end": "1355700"
  },
  {
    "text": "and then there we go it just changed that into an interface versus the type now I could have done that myself right",
    "start": "1355700",
    "end": "1361940"
  },
  {
    "text": "I could have just hit backspace backspace backspace backspace and then I and then see if it",
    "start": "1361940",
    "end": "1367940"
  },
  {
    "text": "compiled but by using the tool it's a little bit a little bit a little bit smarter and and more intelligent about analyzing the usages of it and so it's a",
    "start": "1367940",
    "end": "1374780"
  },
  {
    "text": "safer uh it's a safer change versus just kind of manually editing the code",
    "start": "1374780",
    "end": "1381158"
  },
  {
    "text": "all right the last thing I want to do is it's still not unattestable because it just directly puts in this HTTP client",
    "start": "1382340",
    "end": "1387799"
  },
  {
    "text": "so I'm going to say I want to refactor this and I want to introduce a parameter",
    "start": "1387799",
    "end": "1393559"
  },
  {
    "text": "for this thing that is the I offer value calculator and it also tells me this parameter can be",
    "start": "1393559",
    "end": "1399679"
  },
  {
    "text": "safely removed so let's do that remove the HTTP client parameter and now I just have the offer value calculator",
    "start": "1399679",
    "end": "1406159"
  },
  {
    "text": "next okay now this is a warning because we're using dependency injection and there are",
    "start": "1406159",
    "end": "1412159"
  },
  {
    "text": "no unit tests that it says there are no usages of this new Constructor that",
    "start": "1412159",
    "end": "1417200"
  },
  {
    "text": "you're telling me to do and so you'll probably have to go fix that somehow so just giving me a little warning here",
    "start": "1417200",
    "end": "1423919"
  },
  {
    "text": "I hit next and then oops it did not do that right initialize",
    "start": "1423919",
    "end": "1429860"
  },
  {
    "text": "field there we go it was not exactly perfect all the time so we have to fix up a little things no",
    "start": "1429860",
    "end": "1436640"
  },
  {
    "text": "big deal okay so we introduced this interface we well first we extracted the method into",
    "start": "1436640",
    "end": "1442820"
  },
  {
    "text": "its own class so that is the uh extract it's the extract method into class",
    "start": "1442820",
    "end": "1448279"
  },
  {
    "text": "refactoring um we introduced an inter we introduced an interface for that one method we",
    "start": "1448279",
    "end": "1455659"
  },
  {
    "text": "modified all of our usages in this class to use the interface instead of the instance instead of the derived type and",
    "start": "1455659",
    "end": "1461419"
  },
  {
    "text": "the very last thing we need to do is fix up the dependency injection junk because something has to inject this dependency",
    "start": "1461419",
    "end": "1467659"
  },
  {
    "text": "that is going to be the DI container so over here on let's see start up",
    "start": "1467659",
    "end": "1474200"
  },
  {
    "text": "services dot add HTTP clients it'll be the I",
    "start": "1474200",
    "end": "1481840"
  },
  {
    "text": "offer offer value calculator and the drive type is going to be the web",
    "start": "1481840",
    "end": "1488659"
  },
  {
    "text": "service offer value calculator and then the",
    "start": "1488659",
    "end": "1494659"
  },
  {
    "text": "I would then inside of here need to give it the uh the the URL to wherever that",
    "start": "1494659",
    "end": "1499760"
  },
  {
    "text": "is but we this is all made up and make believe so there's no URL there",
    "start": "1499760",
    "end": "1505720"
  },
  {
    "text": "okay so what we've introduced here though is a domain service so this service does",
    "start": "1505940",
    "end": "1513799"
  },
  {
    "text": "some domain calculation and it's interacting with our with our domain model in order to perform this",
    "start": "1513799",
    "end": "1518960"
  },
  {
    "text": "calculation but if I looked at that method to understand like where should this logic belong",
    "start": "1518960",
    "end": "1525440"
  },
  {
    "text": "the way I'll determine that is to look at this method and say what are the primary objects that it's interacting",
    "start": "1525440",
    "end": "1531320"
  },
  {
    "text": "with and so if I look at this method I'll first look at the first parameter say what is using this",
    "start": "1531320",
    "end": "1539559"
  },
  {
    "text": "and I just see that well it's really just the pulling out the email property here",
    "start": "1539900",
    "end": "1545900"
  },
  {
    "text": "but that's about it it's not interacting with anything else on that member object what about offer type",
    "start": "1545900",
    "end": "1552559"
  },
  {
    "text": "it's only this offer type dot name property that it's accessing over here",
    "start": "1552559",
    "end": "1557779"
  },
  {
    "text": "so if I'm looking at this method and trying to figure out where should this logic and behavior go it could either go",
    "start": "1557779",
    "end": "1563299"
  },
  {
    "text": "in the member object the offer type object probably not the cancellation token",
    "start": "1563299",
    "end": "1569419"
  },
  {
    "text": "again that's that's silly or just some other class and because this method is not primarily dealing with just one of",
    "start": "1569419",
    "end": "1575480"
  },
  {
    "text": "these objects it's just like it's dealing with both of them equally then neither of those are a good candidate for where this logic should belong and",
    "start": "1575480",
    "end": "1582200"
  },
  {
    "text": "also it's like it's primarily just calling a web service so because it doesn't doesn't",
    "start": "1582200",
    "end": "1587320"
  },
  {
    "text": "primarily deal with any of those um either the domain objects those entities then extracting this out into its own",
    "start": "1587320",
    "end": "1593779"
  },
  {
    "text": "class is the next best thing okay",
    "start": "1593779",
    "end": "1599000"
  },
  {
    "text": "so so far we have we haven't really refactored anything into a domain model although domain services are part of the",
    "start": "1599000",
    "end": "1605720"
  },
  {
    "text": "model so that's not exactly true um but so I mean it's not it's still not exactly that interesting",
    "start": "1605720",
    "end": "1612080"
  },
  {
    "text": "so looking at these next two methods um at this point I'm like I I don't know",
    "start": "1612080",
    "end": "1617960"
  },
  {
    "text": "where all this logic should belong so maybe let's apply some defactoring to put the logic back into this method so",
    "start": "1617960",
    "end": "1624140"
  },
  {
    "text": "we can see it see the bigger picture now I do this all the time I don't just",
    "start": "1624140",
    "end": "1629419"
  },
  {
    "text": "refactor my code I also defactor my code so if I'm even trying to understand a new code base for the first time and",
    "start": "1629419",
    "end": "1635539"
  },
  {
    "text": "it's it's very heavily very heavily factored one of the first things I'll do",
    "start": "1635539",
    "end": "1640700"
  },
  {
    "text": "is defactor that to put all the logic back into one place to see what's going on and then I'll hit uh you know git",
    "start": "1640700",
    "end": "1647299"
  },
  {
    "text": "reset and then put it back to where it was before so let's do that here um let's defactor these two methods so",
    "start": "1647299",
    "end": "1653779"
  },
  {
    "text": "I'll go to this one and I'll say uh inline this method",
    "start": "1653779",
    "end": "1659260"
  },
  {
    "text": "inline all usages yes um it didn't understand how to do the",
    "start": "1659480",
    "end": "1666860"
  },
  {
    "text": "state expiring thing so I'm going to just inline that as well let's see let's refactor this",
    "start": "1666860",
    "end": "1673700"
  },
  {
    "text": "and say let's inline that variable",
    "start": "1673700",
    "end": "1679460"
  },
  {
    "text": "and then rename this to date expiring the way it was before",
    "start": "1679460",
    "end": "1685159"
  },
  {
    "text": "okay so I defactored that method let's defactor the second method Ctrl alt n to inline the method and get",
    "start": "1685159",
    "end": "1692720"
  },
  {
    "text": "it back to it was before same kind of issue we saw earlier and",
    "start": "1692720",
    "end": "1698360"
  },
  {
    "text": "that it has uh it is it is uh preserve that variable reference for whatever",
    "start": "1698360",
    "end": "1703880"
  },
  {
    "text": "reason and so I'm going to inline this again",
    "start": "1703880",
    "end": "1708580"
  },
  {
    "text": "I could ask the jet brings people why it does this but again I'm lazy about things like that all right so now we've",
    "start": "1710659",
    "end": "1716419"
  },
  {
    "text": "kind of kind of got things back to where they were before of all the logic except for this external dependency is now back",
    "start": "1716419",
    "end": "1722360"
  },
  {
    "text": "in this one single method and I used I like to use this technique a lot just to like kind of take a step back and say okay what is this what is all this stuff",
    "start": "1722360",
    "end": "1729320"
  },
  {
    "text": "doing um to try to see kind of the uh the force for the trees that is",
    "start": "1729320",
    "end": "1735100"
  },
  {
    "text": "well one of the first things that I can see here is that it's got a little like a little green line under there telling",
    "start": "1735140",
    "end": "1740299"
  },
  {
    "text": "me that it can simplify the switch statement and so I'm on a newer version of C sharp and so it can actually uh",
    "start": "1740299",
    "end": "1746960"
  },
  {
    "text": "change that to a switch expression so that already looks a bit better",
    "start": "1746960",
    "end": "1752659"
  },
  {
    "text": "um and so now I've got uh this calculating the expiration dates and the signing of the offer",
    "start": "1752659",
    "end": "1760299"
  },
  {
    "text": "so looking at each of these this uh this expiration one first",
    "start": "1763820",
    "end": "1771100"
  },
  {
    "text": "if I'm looking at that set of code I'm looking at where uh where is a good place for this kind of logic to belong",
    "start": "1771799",
    "end": "1778340"
  },
  {
    "text": "and looking at this logic I can extract that method again just to",
    "start": "1778340",
    "end": "1784580"
  },
  {
    "text": "see what it looks like and I can see that it is just taking the",
    "start": "1784580",
    "end": "1790039"
  },
  {
    "text": "offer type as an input and having the date expiration as an output and the method itself is static which means",
    "start": "1790039",
    "end": "1796399"
  },
  {
    "text": "there are no dependencies so that could tell me that a good place for this logic could be on this offer type object",
    "start": "1796399",
    "end": "1802940"
  },
  {
    "text": "itself so let's do that I'm going to refactor this method first let's change the name",
    "start": "1802940",
    "end": "1809480"
  },
  {
    "text": "calculate expiration expiration date",
    "start": "1809480",
    "end": "1816880"
  },
  {
    "text": "and we Factor this to move this to another type now I'm going to cheat here though",
    "start": "1817580",
    "end": "1823039"
  },
  {
    "text": "because there's an even more powerful refactoring technique than this one way down here there's another refactoring",
    "start": "1823039",
    "end": "1829059"
  },
  {
    "text": "refactoring option here to say make this method non-static now that's refactoring we'll look and",
    "start": "1829059",
    "end": "1836059"
  },
  {
    "text": "see that this method is static and so if I want to make the method non-static then that method needs to belong to some",
    "start": "1836059",
    "end": "1842059"
  },
  {
    "text": "instance and so when I do this method refactoring it's going to ask me okay if I'm going to make it non-static what instance",
    "start": "1842059",
    "end": "1848720"
  },
  {
    "text": "parameter do you want to move this method to and the input is the offer type object",
    "start": "1848720",
    "end": "1854419"
  },
  {
    "text": "and so I'm going to go ahead and say Yes make that method non-static and move it over to the offer type object itself",
    "start": "1854419",
    "end": "1861919"
  },
  {
    "text": "so now over here I've got a calculate expiration date method but notice it no",
    "start": "1861919",
    "end": "1867620"
  },
  {
    "text": "longer uses the like it doesn't go offer type dot expiration expiration type instead what it's doing is it converted",
    "start": "1867620",
    "end": "1874940"
  },
  {
    "text": "all those usages of calling into the object's properties and instead replaces",
    "start": "1874940",
    "end": "1880100"
  },
  {
    "text": "them with the instance properties so that is pretty neat",
    "start": "1880100",
    "end": "1885980"
  },
  {
    "text": "I'm actually going to inline that and make this an expression bodied statements because why not",
    "start": "1885980",
    "end": "1892898"
  },
  {
    "text": "now if I looked at this as well and saying well where else could this logic possibly belong I could say well",
    "start": "1893600",
    "end": "1900260"
  },
  {
    "text": "it's kind of equally dealing with the offer type objects and the expiration type object however expiration type",
    "start": "1900260",
    "end": "1907519"
  },
  {
    "text": "is an enum and enums are just fancy ants they don't get behavior and so sometimes",
    "start": "1907519",
    "end": "1914299"
  },
  {
    "text": "what I'll do is create a class around this enumeration and like Java has these",
    "start": "1914299",
    "end": "1920299"
  },
  {
    "text": "they have a new enum classes but that can be a bit of a pain for like persistence uh scenarios and things like",
    "start": "1920299",
    "end": "1927080"
  },
  {
    "text": "that so I'm just going to leave it alone and say you know even though this that set of logic may be better in here and",
    "start": "1927080",
    "end": "1934279"
  },
  {
    "text": "and the expiration type enum because it's not a class I can't move that behavior over there",
    "start": "1934279",
    "end": "1941440"
  },
  {
    "text": "all right so let's go back over to the assign offer Handler and so I've got this date expiring",
    "start": "1943519",
    "end": "1950240"
  },
  {
    "text": "and then I have the assigning the offer so I'm going to do the same thing again I'm going to extract",
    "start": "1950240",
    "end": "1957080"
  },
  {
    "text": "this into a method with the intent of seeing what are the inputs and what are",
    "start": "1957080",
    "end": "1962240"
  },
  {
    "text": "the outputs so extract a method call it assign offer",
    "start": "1962240",
    "end": "1969018"
  },
  {
    "text": "and again we see wait a second this method is static so it means that this method is not using any dependencies in",
    "start": "1970460",
    "end": "1977539"
  },
  {
    "text": "this uh this Handler class that's a good thing that means that I can move it somewhere else without worrying about having the dependencies having to come",
    "start": "1977539",
    "end": "1984320"
  },
  {
    "text": "along for the ride so I'll do the same thing we did with",
    "start": "1984320",
    "end": "1989360"
  },
  {
    "text": "the last one which is to look at the usages of each of these values and try to figure out is there a good are one of",
    "start": "1989360",
    "end": "1996740"
  },
  {
    "text": "these a good candidate to move this method into so let's go one by one I've got the",
    "start": "1996740",
    "end": "2002080"
  },
  {
    "text": "member parameter so looking at usages looks like I got one two three usages of",
    "start": "2002080",
    "end": "2008440"
  },
  {
    "text": "member looking at offer type just one usage down here which is",
    "start": "2008440",
    "end": "2014200"
  },
  {
    "text": "sending the property and then finally int value I mean we don't own that type we're probably not",
    "start": "2014200",
    "end": "2019840"
  },
  {
    "text": "going to move Behavior into the in class even though they might let us do that with their new c-sharp 11 stuff",
    "start": "2019840",
    "end": "2025779"
  },
  {
    "text": "um but you know that's not a very good candidate so we're just going to leave that alone and then the same thing about date expiring it's just that by itself",
    "start": "2025779",
    "end": "2033580"
  },
  {
    "text": "so I'm going to refactor this and making making this method non-static",
    "start": "2033580",
    "end": "2038799"
  },
  {
    "text": "because member seemed like had the most stuff going on uh let's go ahead and extract this method and move it into the",
    "start": "2038799",
    "end": "2045640"
  },
  {
    "text": "member um into the member object so what's going to happen though is everywhere you see member",
    "start": "2045640",
    "end": "2052480"
  },
  {
    "text": "it's going to either put this or just take it off so right here it'll be replaced with this and then these two",
    "start": "2052480",
    "end": "2059320"
  },
  {
    "text": "usages down here it will just remove them so I'll go next",
    "start": "2059320",
    "end": "2065378"
  },
  {
    "text": "away goes the method and then over on our member object now we see",
    "start": "2065379",
    "end": "2072099"
  },
  {
    "text": "here's our sign offer method taking in the offer type taking in the value and taking in the date expiring",
    "start": "2072099",
    "end": "2080040"
  },
  {
    "text": "now going back to my Handler class I kind of thought it was a bit strange that this calculate expiration date was",
    "start": "2080980",
    "end": "2088480"
  },
  {
    "text": "outside of the assign offer method and the other thing that's kind of weird is that this date expiring is derived from",
    "start": "2088480",
    "end": "2094060"
  },
  {
    "text": "the offer type so right now this assign offer method it's parameters say give me an offer",
    "start": "2094060",
    "end": "2099940"
  },
  {
    "text": "type give me the value and also give me the data it expires so this could be like date time dot max value could be",
    "start": "2099940",
    "end": "2106660"
  },
  {
    "text": "daytime.min value it could be yesterday so it's not kind of fully encapsulating the logic of how should it calculate the",
    "start": "2106660",
    "end": "2113619"
  },
  {
    "text": "expiration date does that belong to the member object to know for itself like I I know how to uh I know how to calculate",
    "start": "2113619",
    "end": "2121420"
  },
  {
    "text": "the expiration date or who to rely on I don't want you to just give me any expiration date that's my responsibility",
    "start": "2121420",
    "end": "2128578"
  },
  {
    "text": "so undo put the date expiring back",
    "start": "2128980",
    "end": "2134680"
  },
  {
    "text": "all right so what we're going to do is in this assign offer method I'm going to inline this parameter and inlining the",
    "start": "2134680",
    "end": "2141880"
  },
  {
    "text": "parameter we'll look for all the usages of someone calling into that method and then offer those as potential candidates",
    "start": "2141880",
    "end": "2148060"
  },
  {
    "text": "for using that as a value instead now this had like a thousand usages I",
    "start": "2148060",
    "end": "2153339"
  },
  {
    "text": "may be like oh that's that's too many maybe this this class doesn't have that responsibility because there's too much",
    "start": "2153339",
    "end": "2158380"
  },
  {
    "text": "variability but if I look for usages of this because we have no unit tests um there's just this one single usage in",
    "start": "2158380",
    "end": "2164619"
  },
  {
    "text": "my application so I'm going to refactor this parameter I'm going to say inline this parameter",
    "start": "2164619",
    "end": "2172720"
  },
  {
    "text": "it's going to use this date time from date expiring",
    "start": "2172720",
    "end": "2179680"
  },
  {
    "text": "and it's going to get rid of this date expiring now hit next",
    "start": "2179680",
    "end": "2185200"
  },
  {
    "text": "and here we go oops that didn't do what I wanted control alt and inline that CS parameter",
    "start": "2185200",
    "end": "2194079"
  },
  {
    "text": "removed don't add that parameter there we go okay and so this one now instead of",
    "start": "2194079",
    "end": "2201099"
  },
  {
    "text": "being date expiring instead that should be offer type dot calculate expiration date",
    "start": "2201099",
    "end": "2207220"
  },
  {
    "text": "it's a note over my usage of the offer Handler I no longer need this calculate expiration date so I can go ahead and",
    "start": "2207220",
    "end": "2214060"
  },
  {
    "text": "get rid of that now there's another way of doing this if I go back over to member and I could",
    "start": "2214060",
    "end": "2219520"
  },
  {
    "text": "undo and put this back on there um I can go back over to my object over",
    "start": "2219520",
    "end": "2227140"
  },
  {
    "text": "here and I can say let's go ahead and inline this parameter and so just passes that in right there",
    "start": "2227140",
    "end": "2232420"
  },
  {
    "text": "and now when I go ahead and inline this parameter here",
    "start": "2232420",
    "end": "2237760"
  },
  {
    "text": "inline parameter",
    "start": "2237760",
    "end": "2240780"
  },
  {
    "text": "there we go that's a that's what I wanted to do the first time but I forgot to inline the first the first one over there okay so",
    "start": "2243040",
    "end": "2249220"
  },
  {
    "text": "it saw that the one usage I had in here was me passing through that value and so it says okay I'll go ahead and use that",
    "start": "2249220",
    "end": "2255339"
  },
  {
    "text": "value as or use that expression as the thing I'm going to use to calculate the expiration date",
    "start": "2255339",
    "end": "2261599"
  },
  {
    "text": "so I think I can actually get rid of some code comments now because they're not",
    "start": "2262180",
    "end": "2267520"
  },
  {
    "text": "really not really adding anything of value here so let's go to that and get rid of that",
    "start": "2267520",
    "end": "2274078"
  },
  {
    "text": "okay so now what I have is a single call out to that interface to calculate the",
    "start": "2274119",
    "end": "2280000"
  },
  {
    "text": "offer value and then a single call over to my domain object to then actually assign the offer to the menu to the",
    "start": "2280000",
    "end": "2286839"
  },
  {
    "text": "member based on that value that I calculated earlier so this I think is pretty good right now",
    "start": "2286839",
    "end": "2292480"
  },
  {
    "text": "because it's got most of the behavior of assigning the offer inside the actual",
    "start": "2292480",
    "end": "2298300"
  },
  {
    "text": "domain object itself and it's it's fully encapsulated that entire operation",
    "start": "2298300",
    "end": "2306119"
  },
  {
    "text": "now one thing we could do and I'll try it and I think about half of you will hate it so uh that's fine it's been",
    "start": "2306520",
    "end": "2313000"
  },
  {
    "text": "perfectly fine is um if I look at this member object now it's still being it's still being able",
    "start": "2313000",
    "end": "2319119"
  },
  {
    "text": "to get any kind of value being passed in and so it's still not telling the caller",
    "start": "2319119",
    "end": "2325119"
  },
  {
    "text": "of this that you know you can't just pass me any value you need you need to give me an offer value calculator",
    "start": "2325119",
    "end": "2330280"
  },
  {
    "text": "because that is really the thing I need to use in order to calculate this offer value I don't want you to just be able to do whatever you want",
    "start": "2330280",
    "end": "2337960"
  },
  {
    "text": "so if you want to do that refactoring I will inline this value",
    "start": "2337960",
    "end": "2344760"
  },
  {
    "text": "now it has a weight calculate offer value in there and if I go to the assign offer method I can also then inline this",
    "start": "2344980",
    "end": "2352359"
  },
  {
    "text": "value as well it will add these two parameters the",
    "start": "2352359",
    "end": "2357820"
  },
  {
    "text": "offer value calculator and a cancellation token and now this needs to be an async task",
    "start": "2357820",
    "end": "2365560"
  },
  {
    "text": "of offer",
    "start": "2365560",
    "end": "2368700"
  },
  {
    "text": "because it has to await the calculation of that offer value",
    "start": "2370599",
    "end": "2375780"
  },
  {
    "text": "so now we've got VAR offer equals member to sign offer but I actually need to await this over here as well so I'll say",
    "start": "2376000",
    "end": "2382660"
  },
  {
    "text": "await member data sign offer and now instead of us passing through just any old value what it's doing is saying you",
    "start": "2382660",
    "end": "2388420"
  },
  {
    "text": "need to give me an offer value calculator and that's the thing I need to use in order to calculate the offer",
    "start": "2388420",
    "end": "2393760"
  },
  {
    "text": "value not just any value that you want to pass in through there",
    "start": "2393760",
    "end": "2399060"
  },
  {
    "text": "and so now that's it's made this uh it's made that dependency explicit saying uh",
    "start": "2399700",
    "end": "2405579"
  },
  {
    "text": "me as a domain object I rely on this other domain service in order to perform my work but because we don't have",
    "start": "2405579",
    "end": "2411040"
  },
  {
    "text": "dependency injection that's okay we'll just pass in the dependency as a as a method parameter and so this code is",
    "start": "2411040",
    "end": "2417520"
  },
  {
    "text": "still unit testable it still doesn't have any code dependencies on external external uh Services because it's that",
    "start": "2417520",
    "end": "2424900"
  },
  {
    "text": "interface the only wonky thing about this is that it's got async and a domain model and",
    "start": "2424900",
    "end": "2431020"
  },
  {
    "text": "that's usually where like half the people will kind of like feel sick and want to throw up because like async and a domain model that seems kind of odd",
    "start": "2431020",
    "end": "2437740"
  },
  {
    "text": "um but in any case this pattern is known as the double dispatch pattern the double dispatch pattern is often used in",
    "start": "2437740",
    "end": "2443440"
  },
  {
    "text": "domain models where perhaps the logic of Performing this business logic is pretty complex and so I want to I want to put",
    "start": "2443440",
    "end": "2450280"
  },
  {
    "text": "that business logic inside of the domain model but there's just like one or two little Parts what has to reach out into some are external service and then",
    "start": "2450280",
    "end": "2457000"
  },
  {
    "text": "perhaps there's some interplay between the business logic and calling things whatever and so this provides a nice way",
    "start": "2457000",
    "end": "2463300"
  },
  {
    "text": "of still preserving this encapsulated domain model but being able to pass through dependencies",
    "start": "2463300",
    "end": "2468760"
  },
  {
    "text": "um still look behind the interface as method parameters",
    "start": "2468760",
    "end": "2473579"
  },
  {
    "text": "um are you getting like half my teams like this about half the teams absolutely hate it um so I just want to throw it up there",
    "start": "2474220",
    "end": "2479380"
  },
  {
    "text": "as like it's a possibility but if your team doesn't like it that's fine just passing the value like we did earlier no big deal",
    "start": "2479380",
    "end": "2486660"
  },
  {
    "text": "all right so at this point it is like fully refactored from a transaction",
    "start": "2488560",
    "end": "2495819"
  },
  {
    "text": "script put and I've now pushed all of my behavior down into this domain object",
    "start": "2495819",
    "end": "2501700"
  },
  {
    "text": "however much you may not like that one part we're not done yet",
    "start": "2501700",
    "end": "2508660"
  },
  {
    "text": "I've been looking at my domain model it lets people do a lot more things than it should allow so if I wanted to do",
    "start": "2508660",
    "end": "2515380"
  },
  {
    "text": "something like member.assignedoffers.clear that would give the product owners a",
    "start": "2515380",
    "end": "2522880"
  },
  {
    "text": "conniption fit that would freak out because we're like you can't just clear out someone's offers because some of",
    "start": "2522880",
    "end": "2528220"
  },
  {
    "text": "them are still good and they'll complain and you know they'll go try to use some coupon and it says offer not valid",
    "start": "2528220",
    "end": "2533920"
  },
  {
    "text": "anymore but nothing in our domain model makes That explicit or clear that you can't you shouldn't be able to do this",
    "start": "2533920",
    "end": "2539800"
  },
  {
    "text": "but the API does let us do this we can also do things like VAR member",
    "start": "2539800",
    "end": "2546400"
  },
  {
    "text": "two equals new member and then we just don't have to give it anything",
    "start": "2546400",
    "end": "2552359"
  },
  {
    "text": "so if I went to the business and said okay um so I got this member object it's got these three these four parameters",
    "start": "2553540",
    "end": "2560140"
  },
  {
    "text": "um but those those parameters those properties don't have any values is that okay again they would not be okay with",
    "start": "2560140",
    "end": "2565300"
  },
  {
    "text": "that because like for them there are some critical pieces of information that make this object a quote member versus",
    "start": "2565300",
    "end": "2572560"
  },
  {
    "text": "just like any any other objects or any other person walking off the street so I go up to them and ask them like",
    "start": "2572560",
    "end": "2579339"
  },
  {
    "text": "what are the things that if you took any one of these things away it would no longer be that thing and you kind of",
    "start": "2579339",
    "end": "2584920"
  },
  {
    "text": "think it's like um what makes a zebra a zebra if you take the stripes away from a zebra is it still a zebra",
    "start": "2584920",
    "end": "2591520"
  },
  {
    "text": "I guess if there's stripless zebras maybe I don't know um but it would be like a horse I guess",
    "start": "2591520",
    "end": "2596560"
  },
  {
    "text": "um I suppose the same kind of thing that I look at each of these properties and say which of these properties are absolutely required for this to be a",
    "start": "2596560",
    "end": "2602140"
  },
  {
    "text": "thing and if I took any one of those away it would no longer be that thing and those are known as invariants and variants are the things that if I took",
    "start": "2602140",
    "end": "2608380"
  },
  {
    "text": "anything away it would no longer be that thing it's also known as like these business",
    "start": "2608380",
    "end": "2614560"
  },
  {
    "text": "rules that are always held to be true and so we need we need we need to preserve them so they go over to the member object",
    "start": "2614560",
    "end": "2621579"
  },
  {
    "text": "so the problem is that it's just got a public nowhere Constructor generated by the um generated by the compiler and",
    "start": "2621579",
    "end": "2627520"
  },
  {
    "text": "lets anyone create anything and set absolutely anything anytime they want so let's fix that",
    "start": "2627520",
    "end": "2632560"
  },
  {
    "text": "let's create a Constructor then it comes that includes those invariants which are the first name the",
    "start": "2632560",
    "end": "2638740"
  },
  {
    "text": "last name and the email uh finish and now it has set those individual",
    "start": "2638740",
    "end": "2646240"
  },
  {
    "text": "properties now there's some other problems with",
    "start": "2646240",
    "end": "2651819"
  },
  {
    "text": "this code because if I go over to the member object let's not do that I can still do something like member.firstname",
    "start": "2651819",
    "end": "2657520"
  },
  {
    "text": "equals null and that again is not something the business probably wants us to do and so",
    "start": "2657520",
    "end": "2663220"
  },
  {
    "text": "I'd want to go through those different operations and say okay what are the use cases that we have for changing this",
    "start": "2663220",
    "end": "2668859"
  },
  {
    "text": "information and then let's make those use cases explicit as individual methods",
    "start": "2668859",
    "end": "2674200"
  },
  {
    "text": "so what I'd like to do instead is say you know private sets don't let anyone access this private sets",
    "start": "2674200",
    "end": "2680500"
  },
  {
    "text": "private sets um we asked the business is it okay for them to change this information and they",
    "start": "2680500",
    "end": "2685660"
  },
  {
    "text": "say yes they can change their first name they can change their last name but they can't change their email I just made that up let's just pretend that's the",
    "start": "2685660",
    "end": "2691480"
  },
  {
    "text": "case so now what I want to do is create a method that allows someone to to change",
    "start": "2691480",
    "end": "2697300"
  },
  {
    "text": "their first name and last name so I'm going to create a method that says public void change name and they can pass in",
    "start": "2697300",
    "end": "2705760"
  },
  {
    "text": "the first name first name and last name",
    "start": "2705760",
    "end": "2712740"
  },
  {
    "text": "and as part of that we're going to set the first name and last name property nope I thought I'd just do it",
    "start": "2713020",
    "end": "2719319"
  },
  {
    "text": "automatically for me that would have been nice first name equals first name and then last name",
    "start": "2719319",
    "end": "2725740"
  },
  {
    "text": "equals last name and then if we were on the very new newest version of C sharp we could do",
    "start": "2725740",
    "end": "2731200"
  },
  {
    "text": "something like a bang bang operator I think and it would do the argument null exception thing we're not yet so or if",
    "start": "2731200",
    "end": "2737920"
  },
  {
    "text": "that even is going to make it in the in the feature or in the next version of C sharp so what I want to do here is is check to see if these are no more empty",
    "start": "2737920",
    "end": "2744160"
  },
  {
    "text": "oh look at that tab if strings are null are empty throw oh look at that",
    "start": "2744160",
    "end": "2749380"
  },
  {
    "text": "very smart tab yes",
    "start": "2749380",
    "end": "2754900"
  },
  {
    "text": "yes okay by the way that is the Microsoft code",
    "start": "2754900",
    "end": "2761319"
  },
  {
    "text": "assist the AI service that will like do that magic for you it's kind of like the GitHub the GitHub thing as well",
    "start": "2761319",
    "end": "2767859"
  },
  {
    "text": "um no I'm not playing but I just saw that it came up like oh that's that's exactly what I want thank you",
    "start": "2767859",
    "end": "2773760"
  },
  {
    "text": "now I have encapsulated the operation of changing the this uh changing the name of this member and it's now enforcing",
    "start": "2773800",
    "end": "2781000"
  },
  {
    "text": "those invariants and saying if you don't if you give me blank or null names I'm not going to allow them I'm going to",
    "start": "2781000",
    "end": "2786760"
  },
  {
    "text": "throw an exception now there probably is a screen behind this that allows a member to change",
    "start": "2786760",
    "end": "2791980"
  },
  {
    "text": "their name so I still expect that screen to have that sort of validation and so this is just kind of the last resort that says I'm going to protect my uh my",
    "start": "2791980",
    "end": "2799900"
  },
  {
    "text": "Aggregates and variants by making sure that those invariants are always enforced",
    "start": "2799900",
    "end": "2806400"
  },
  {
    "text": "okay um let's go let's go over here and the other thing we were looking at was the member could just clear off the the list",
    "start": "2808359",
    "end": "2814300"
  },
  {
    "text": "of offers and so we don't want anyone to just be able to do anything to that list so what I'd like to do instead is",
    "start": "2814300",
    "end": "2820240"
  },
  {
    "text": "encapsulate those collections so instead of having this like public list of assigned offers",
    "start": "2820240",
    "end": "2826780"
  },
  {
    "text": "instead what I like to do is say I will only expose out the operations that I I",
    "start": "2826780",
    "end": "2832720"
  },
  {
    "text": "I will allow you to perform and nothing else so look at this",
    "start": "2832720",
    "end": "2839859"
  },
  {
    "text": "Target type new there we go okay so the way we can we can examine",
    "start": "2839859",
    "end": "2845440"
  },
  {
    "text": "this is I can just I can refactor on the list type and say use base type where possible and I'm going to want it to I",
    "start": "2845440",
    "end": "2852280"
  },
  {
    "text": "want to select the most protected kind of bass type and for me that could either be a read-only collection maybe",
    "start": "2852280",
    "end": "2858819"
  },
  {
    "text": "there's some stuff there or just I enumerable um let's go with maybe read-only list or",
    "start": "2858819",
    "end": "2865000"
  },
  {
    "text": "inumerable maybe just iron numerable let's just do that",
    "start": "2865000",
    "end": "2869760"
  },
  {
    "text": "um however nothing happened that's because it couldn't perform that refactoring something else is still using that list so if I go over here and",
    "start": "2871839",
    "end": "2878859"
  },
  {
    "text": "say let's go ahead and make this let's cheat I innumerable of offer okay and now this needs to be go back to what it",
    "start": "2878859",
    "end": "2885400"
  },
  {
    "text": "was before a new list of offer and the next thing we want to do though is we want to uh we want to let's see over",
    "start": "2885400",
    "end": "2892180"
  },
  {
    "text": "here two property with backing field get assigned offers set assign offers",
    "start": "2892180",
    "end": "2898720"
  },
  {
    "text": "and probably make this a private set because we don't want people just do whatever they want",
    "start": "2898720",
    "end": "2904480"
  },
  {
    "text": "okay so by making that's a private field it means that down here I can't just go",
    "start": "2904480",
    "end": "2909579"
  },
  {
    "text": "off the list of assigned the public property anymore I gotta go to the private field and now",
    "start": "2909579",
    "end": "2916240"
  },
  {
    "text": "this should be a list of offer there we go",
    "start": "2916240",
    "end": "2924059"
  },
  {
    "text": "and this right here I think we just want to get rid of this we don't want to",
    "start": "2925500",
    "end": "2930640"
  },
  {
    "text": "allow anyone to set it so just be a get only proper a get only property",
    "start": "2930640",
    "end": "2935818"
  },
  {
    "text": "now depending on your orm of choice this may not be possible I'm pretty sure EF",
    "start": "2937720",
    "end": "2944380"
  },
  {
    "text": "core allows you to do this of having a backing field with a uh with a with the actual type it needs to be in this case",
    "start": "2944380",
    "end": "2950500"
  },
  {
    "text": "a list but it's something you want to check to see is that is that possible and you may have to kind of mold or",
    "start": "2950500",
    "end": "2957160"
  },
  {
    "text": "shape how this is getting encapsulated based on what is actually possible and your orm of choice if this thing if this",
    "start": "2957160",
    "end": "2963280"
  },
  {
    "text": "object is is what gets persisted directly with your RM okay so we cheated",
    "start": "2963280",
    "end": "2969579"
  },
  {
    "text": "this code compiles and if I compile the whole colbase",
    "start": "2969579",
    "end": "2975119"
  },
  {
    "text": "I did not put on the turbo button to make this go fast oh build succeeded wait a second that's not that's not",
    "start": "2977680",
    "end": "2982839"
  },
  {
    "text": "correct because if I go over to my other Handler here",
    "start": "2982839",
    "end": "2988359"
  },
  {
    "text": "laptop members assigned offers a single default oh I forgot the other one yes okay",
    "start": "2988359",
    "end": "2994420"
  },
  {
    "text": "there's another one I wanted to uh to fix here which was over my signed offer Handler I could do something like",
    "start": "2994420",
    "end": "3001559"
  },
  {
    "text": "member dot assign number of active offers equals in.max value you get all",
    "start": "3001559",
    "end": "3008160"
  },
  {
    "text": "the offers all of them but that doesn't make a lot of sense notice neither does having a negative",
    "start": "3008160",
    "end": "3014940"
  },
  {
    "text": "value there either so the problem is I'm still allowing anyone to be able to change this value uh so what I'd like to",
    "start": "3014940",
    "end": "3020940"
  },
  {
    "text": "do is go over to the number of active offers property",
    "start": "3020940",
    "end": "3026540"
  },
  {
    "text": "and make this Setter private I've made the other Setters private but I haven't fixed this one so let's go ahead and fix",
    "start": "3027119",
    "end": "3033359"
  },
  {
    "text": "this one so I can put a little private there this code",
    "start": "3033359",
    "end": "3039660"
  },
  {
    "text": "still succeeds now if I compile oh there we go that's what I was looking for",
    "start": "3039660",
    "end": "3045079"
  },
  {
    "text": "the property or indexer of number of active offers cannot be used in this context because the setter is",
    "start": "3045079",
    "end": "3050400"
  },
  {
    "text": "inaccessible so sad trombone",
    "start": "3050400",
    "end": "3055579"
  },
  {
    "text": "okay that's not something we uh that's that's not insurmountable so what I'd like to do is do the same refactoring to",
    "start": "3055800",
    "end": "3062760"
  },
  {
    "text": "this method that we just previously did on the last method which is to extract",
    "start": "3062760",
    "end": "3068640"
  },
  {
    "text": "first look at this class and see what is it doing it looks like it's also using that transaction script pattern so it's it's",
    "start": "3068640",
    "end": "3075059"
  },
  {
    "text": "loading up some data performing some operations on that data and then saving the data all in one single method",
    "start": "3075059",
    "end": "3082940"
  },
  {
    "text": "so I probably won't extract methods for the getting of the data and the saving of the data that's not very interesting",
    "start": "3083280",
    "end": "3088559"
  },
  {
    "text": "this is the actual interesting part the middle so if I extract that method",
    "start": "3088559",
    "end": "3094980"
  },
  {
    "text": "and let's see what is this doing this is expire offer Handler so this is probably going to be expire offer",
    "start": "3094980",
    "end": "3104300"
  },
  {
    "text": "next all right so it's still not compiling but that's okay we're going to put this in the right place to make sure",
    "start": "3105660",
    "end": "3112079"
  },
  {
    "text": "that it can't actually access that property um one other thing here it's it's it's using this request object",
    "start": "3112079",
    "end": "3119579"
  },
  {
    "text": "um I don't necessarily want to uh use that as a candidate for",
    "start": "3119579",
    "end": "3125940"
  },
  {
    "text": "um where this Behavior should lie so if I'm looking at each of these objects it says um each of the parameter inputs has got",
    "start": "3125940",
    "end": "3132720"
  },
  {
    "text": "this request object and remember but that request object is kind of throwing me off here so let's actually go over to",
    "start": "3132720",
    "end": "3139200"
  },
  {
    "text": "uh this request offer ID I'm going to introduce a parameter for that",
    "start": "3139200",
    "end": "3145760"
  },
  {
    "text": "replace two occurrences with offer ID and it's also telling me",
    "start": "3146099",
    "end": "3152040"
  },
  {
    "text": "that it can safely remove this request object as a parameter because that is just not using it anymore so click next",
    "start": "3152040",
    "end": "3158520"
  },
  {
    "text": "and now if I go back up I can see what's being passed in is passing in the request.offer ID and then down here it's",
    "start": "3158520",
    "end": "3164339"
  },
  {
    "text": "now just a guide so again let's look to see which one of these objects should I now pass the or",
    "start": "3164339",
    "end": "3172380"
  },
  {
    "text": "now extract this logic into should it go into one of the input parameters one of the other objects",
    "start": "3172380",
    "end": "3178619"
  },
  {
    "text": "that's being used in here or another class entirely so if you look at the usages of each of these parameters",
    "start": "3178619",
    "end": "3185579"
  },
  {
    "text": "I see three usages of the member object",
    "start": "3185579",
    "end": "3190339"
  },
  {
    "text": "I see one usage of offer ID but again that's a that's a that's a one of our",
    "start": "3190920",
    "end": "3197099"
  },
  {
    "text": "primitive types so that's not a candidate for us to move that logic to but another valid one we could look at is this offer object down here",
    "start": "3197099",
    "end": "3204599"
  },
  {
    "text": "I see two usages of that so three of the member I think",
    "start": "3204599",
    "end": "3211380"
  },
  {
    "text": "oh nope just two so two the offer to the member but it looks like it's using Member First it uses member to go and",
    "start": "3211380",
    "end": "3217920"
  },
  {
    "text": "find the offer it's interested in so let's go ahead and extract or",
    "start": "3217920",
    "end": "3223559"
  },
  {
    "text": "move make this method non-static and move it to the member method that was a mouthful",
    "start": "3223559",
    "end": "3229559"
  },
  {
    "text": "sorry Factor Make method non-static select the instance parameter member",
    "start": "3229559",
    "end": "3235740"
  },
  {
    "text": "next aha so now this this this transaction",
    "start": "3235740",
    "end": "3240960"
  },
  {
    "text": "script method is now nice and clean load the data delegate to The Domain model",
    "start": "3240960",
    "end": "3246000"
  },
  {
    "text": "and then save the data now if I go look at my expire offer",
    "start": "3246000",
    "end": "3251579"
  },
  {
    "text": "method uh it's compiling again because now it can actually uh now I could actually",
    "start": "3251579",
    "end": "3256619"
  },
  {
    "text": "mutate the number of active offers because it's a private Setter and I can access it private Setter from this",
    "start": "3256619",
    "end": "3262079"
  },
  {
    "text": "instance method",
    "start": "3262079",
    "end": "3264800"
  },
  {
    "text": "all right nope we don't want that hahaha all right so where do we uh where are we",
    "start": "3269339",
    "end": "3276660"
  },
  {
    "text": "going up here so we get this assign offer method that takes um it takes the offer value calculator and the offer type oh but here's another",
    "start": "3276660",
    "end": "3283079"
  },
  {
    "text": "one of those problems where it's got just a bunch of things that are publicly sets and I can't um I won't be able to",
    "start": "3283079",
    "end": "3288660"
  },
  {
    "text": "actually use those uh so this would be another candidate for us to look at how can we encapsulate the creation of this",
    "start": "3288660",
    "end": "3295380"
  },
  {
    "text": "offer object and again it's just got a bunch of Public public Setters so what I'd like",
    "start": "3295380",
    "end": "3302280"
  },
  {
    "text": "to do is talk to the business and ask them okay um which one of these can I take away and it would no longer be an offer",
    "start": "3302280",
    "end": "3309420"
  },
  {
    "text": "and looking at these they need all four of those properties if they took away the member an offer is not uh an offer",
    "start": "3309420",
    "end": "3314819"
  },
  {
    "text": "unless it's assigned to a member that's that's kind of a requirement for the system I do need to know what the type of the offer is in order to have other",
    "start": "3314819",
    "end": "3321119"
  },
  {
    "text": "logic Associated I have to have an expiration date we don't have offers that can expire at the heat death of the",
    "start": "3321119",
    "end": "3327480"
  },
  {
    "text": "universe and there has to be a value for that offer as well so all of these things so let's create a Constructor",
    "start": "3327480",
    "end": "3334260"
  },
  {
    "text": "that includes all of those different values oh check parameters for null sure",
    "start": "3334260",
    "end": "3343099"
  },
  {
    "text": "all right and now we can make all of these Setters private private",
    "start": "3343200",
    "end": "3348960"
  },
  {
    "text": "private",
    "start": "3348960",
    "end": "3351559"
  },
  {
    "text": "two privates two private",
    "start": "3355079",
    "end": "3360480"
  },
  {
    "text": "I can also make those and it only and it only properties there are some issues with that so I'm just going to leave it",
    "start": "3360480",
    "end": "3366420"
  },
  {
    "text": "alone I still prefer private Setters for domain models now I do also ask the business can you",
    "start": "3366420",
    "end": "3373140"
  },
  {
    "text": "change any of these values once an offer has been assigned and they say no you cannot change anything I cannot reassign",
    "start": "3373140",
    "end": "3378720"
  },
  {
    "text": "offers I cannot change the type of the offer I cannot change the expiration date I can only create new offers that have a new expiration date I can't do",
    "start": "3378720",
    "end": "3384900"
  },
  {
    "text": "anything with the old ones actually that's not true I can expire",
    "start": "3384900",
    "end": "3391020"
  },
  {
    "text": "hey guys let's go back over to okay so this code no longer compiles and",
    "start": "3391020",
    "end": "3396660"
  },
  {
    "text": "so I'm going to need to call that Constructor with all the different values so I've got members",
    "start": "3396660",
    "end": "3402420"
  },
  {
    "text": "signed is now this right there offer type and then the await thing I'm now",
    "start": "3402420",
    "end": "3408240"
  },
  {
    "text": "regretting that our value there we go",
    "start": "3408240",
    "end": "3415338"
  },
  {
    "text": "that was the expiration date so that's the offer type dot calculate expiration dates",
    "start": "3417299",
    "end": "3423000"
  },
  {
    "text": "and then finally the value",
    "start": "3423000",
    "end": "3427040"
  },
  {
    "text": "all right and now I can get rid of all of that",
    "start": "3428040",
    "end": "3432440"
  },
  {
    "text": "all right so I passed in the parameter for this offer type offer type that calculation calculate expiration date",
    "start": "3434579",
    "end": "3440400"
  },
  {
    "text": "that looks a bit odd it's passing the offer type and then also kind of calling another method immediately so let's fix",
    "start": "3440400",
    "end": "3445559"
  },
  {
    "text": "that I'll go over here and I'm going to inline that parameter",
    "start": "3445559",
    "end": "3450900"
  },
  {
    "text": "the date expiring and then next and now let's replace that usage with",
    "start": "3450900",
    "end": "3455940"
  },
  {
    "text": "the one place that found calling it type that calculate expiration dates I will leave the value alone because you can't",
    "start": "3455940",
    "end": "3462059"
  },
  {
    "text": "have async Constructors and it would be too painful to like try to push that down so let's just not do that and so",
    "start": "3462059",
    "end": "3467880"
  },
  {
    "text": "now over here I've got get the calculate the offer value and same to the offer",
    "start": "3467880",
    "end": "3473400"
  },
  {
    "text": "with those different values and then then it's done so now at this point my invariants are now enforced on the offer",
    "start": "3473400",
    "end": "3480059"
  },
  {
    "text": "object itself that it's not allowing you to change any of these after the object has been created",
    "start": "3480059",
    "end": "3485940"
  },
  {
    "text": "oh but there's some red down here oh you can change the expiration date so yeah that was another feature that the",
    "start": "3485940",
    "end": "3491400"
  },
  {
    "text": "business needed is that if they accidentally assigned too many offers to people or someone did like some fraudulent thing they would expire the",
    "start": "3491400",
    "end": "3498240"
  },
  {
    "text": "offer which just would set the expiration date today date today so you couldn't use it anymore",
    "start": "3498240",
    "end": "3503700"
  },
  {
    "text": "so we actually need to um extract a method",
    "start": "3503700",
    "end": "3511519"
  },
  {
    "text": "expire and this should not be a questiony one",
    "start": "3511680",
    "end": "3518760"
  },
  {
    "text": "that should be uh just regular one there we go",
    "start": "3518760",
    "end": "3525020"
  },
  {
    "text": "and then what we'll do is refactor this to make this method non-static moving it",
    "start": "3526280",
    "end": "3532559"
  },
  {
    "text": "over to the offer object and now it just says offer dot expire so at this point my domain model the",
    "start": "3532559",
    "end": "3541200"
  },
  {
    "text": "offer entity now fully encapsulates any Behavior associated with the date expiring",
    "start": "3541200",
    "end": "3548779"
  },
  {
    "text": "so our initial transaction script methods",
    "start": "3549780",
    "end": "3554880"
  },
  {
    "text": "had all the logic associated with the domain inside of that single method and",
    "start": "3554880",
    "end": "3561119"
  },
  {
    "text": "what we've done is use these standard code smells and standard refractoring techniques to refactor this code but",
    "start": "3561119",
    "end": "3567119"
  },
  {
    "text": "with a with a with a goal with a direction in mind we're trying to refactor this towards a domain model and",
    "start": "3567119",
    "end": "3573180"
  },
  {
    "text": "so what I'm doing is preferring moving these methods into the domain models itself as opposed to other helper",
    "start": "3573180",
    "end": "3579359"
  },
  {
    "text": "manager whatever classes and really that's that's kind of the big",
    "start": "3579359",
    "end": "3584819"
  },
  {
    "text": "difference between like um like object oriented code that is still like not using domain models that",
    "start": "3584819",
    "end": "3590520"
  },
  {
    "text": "behavior exists in your application somewhere but it's just not inside of those objects and and domain driven",
    "start": "3590520",
    "end": "3596040"
  },
  {
    "text": "design is is about uh having those behavioral models that enforce their own invariance they enforce their own",
    "start": "3596040",
    "end": "3602040"
  },
  {
    "text": "business rules as by having those domain models and force on their own business rules we ensure that these domain models",
    "start": "3602040",
    "end": "3608040"
  },
  {
    "text": "don't get quote invalid at any point in time",
    "start": "3608040",
    "end": "3612500"
  },
  {
    "text": "all right I think I feel pretty good about this do y'all feel okay about this maybe minus this right there",
    "start": "3614280",
    "end": "3622260"
  },
  {
    "text": "yeah that's fine all right um so that was going back to my",
    "start": "3622260",
    "end": "3628619"
  },
  {
    "text": "presentation that was domain driven refactoring we pushed our Behavior into our domain",
    "start": "3628619",
    "end": "3635099"
  },
  {
    "text": "model using the standard refactoring techniques that have been well documented well before um you know like long many many years",
    "start": "3635099",
    "end": "3642540"
  },
  {
    "text": "ago even decades ago now uh and so if you have a code base",
    "start": "3642540",
    "end": "3648059"
  },
  {
    "text": "that it has maybe all the names of things aren't quite there um but your behavior scattered across",
    "start": "3648059",
    "end": "3653760"
  },
  {
    "text": "your whole application these techniques can help you build a domain model uh by",
    "start": "3653760",
    "end": "3659880"
  },
  {
    "text": "just using these kind of regular standard refactoring techniques so thank you very much if you have any questions about this I'll be hanging",
    "start": "3659880",
    "end": "3665819"
  },
  {
    "text": "around afterwards or you can find me on slack otherwise have a great rest of the conference and uh yeah thanks",
    "start": "3665819",
    "end": "3671310"
  },
  {
    "text": "[Applause]",
    "start": "3671310",
    "end": "3680150"
  }
]