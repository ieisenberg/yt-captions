[
  {
    "text": "all right so I want to welcome you guys to NDC second day it's fantastic",
    "start": "5350",
    "end": "12190"
  },
  {
    "text": "competing with a lot of really great talks but I think every speaker in every track can say that so I really want to",
    "start": "12190",
    "end": "18650"
  },
  {
    "text": "thank you for coming to this talk like I said we're gonna be talking about building scalable and maintainable apps",
    "start": "18650",
    "end": "25160"
  },
  {
    "text": "using typescript and react so my name is",
    "start": "25160",
    "end": "30560"
  },
  {
    "text": "Camryn I work at Target downtown on the side in addition to my full-time job I",
    "start": "30560",
    "end": "36800"
  },
  {
    "text": "do some Pluralsight courses I have one on Raven dB one of the sponsors here at NDC I also contribute to a game engine",
    "start": "36800",
    "end": "43820"
  },
  {
    "text": "called Excalibur jeaious it's written in typescript that's sort of where I got started writing typescript and I also",
    "start": "43820",
    "end": "49580"
  },
  {
    "text": "have an application called keep track of my games which is a game organization app it also lets you track upcoming",
    "start": "49580",
    "end": "55910"
  },
  {
    "text": "releases sends you notifications and that's served as the inspiration for this talk which I'll get into at home I",
    "start": "55910",
    "end": "62780"
  },
  {
    "text": "have a wife and son and dog but she's black and white not brown and white on",
    "start": "62780",
    "end": "68359"
  },
  {
    "text": "the on the side there in the picture my wife and I spent six months in Europe on a sabbatical and we visited Morocco so",
    "start": "68359",
    "end": "75409"
  },
  {
    "text": "that's a monkey from Morocco I also enjoyed doing tabletop RPGs board games",
    "start": "75409",
    "end": "81829"
  },
  {
    "text": "some video games programming on the side as you can probably tell listening to",
    "start": "81829",
    "end": "86869"
  },
  {
    "text": "audio books and I own two guitars that I don't play so those are my hobbies you",
    "start": "86869",
    "end": "93409"
  },
  {
    "text": "can see that gaming sort of runs through the line of stuff that I do and that's one of my passions so why am I here",
    "start": "93409",
    "end": "100670"
  },
  {
    "text": "today and why are you guys listening to this talk so I just want to sort of go",
    "start": "100670",
    "end": "105829"
  },
  {
    "text": "over my motivations for this talk what do I want to achieve when I'm writing and working on my applications so one of",
    "start": "105829",
    "end": "114469"
  },
  {
    "text": "my goals is to make my apps easier to maintain and one of my goals is to make them easier to scale but what does that",
    "start": "114469",
    "end": "120859"
  },
  {
    "text": "actually mean I want to make sure that we set the baseline for what I'm going to be talking about so when we are talking",
    "start": "120859",
    "end": "128420"
  },
  {
    "text": "about scalable code are we talking about something like this where you want to",
    "start": "128420",
    "end": "135290"
  },
  {
    "text": "support 99 levels of navigations therefore you create 99 jQuery selectors this by the way actual production code",
    "start": "135290",
    "end": "142260"
  },
  {
    "text": "that we found in one of our code bases I mean how else would you support 99",
    "start": "142260",
    "end": "147510"
  },
  {
    "text": "levels of navigation right because recursion is not a thing and CSS selectors don't support nesting so we",
    "start": "147510",
    "end": "154370"
  },
  {
    "text": "are not talking about this kind of scalable what we're talking about is",
    "start": "154370",
    "end": "160310"
  },
  {
    "text": "making our code easier to extend and by that I mean adding new features usually",
    "start": "160310",
    "end": "166440"
  },
  {
    "text": "you hear this term MVP we're working on an MVP right so our Minimum Viable Product but then we want to add features",
    "start": "166440",
    "end": "173400"
  },
  {
    "text": "down the road so how do we plan for that and make sure that our code base can scale we also want to make it easy to",
    "start": "173400",
    "end": "179400"
  },
  {
    "text": "collaborate on I work on a team of five other developers at work and we want to",
    "start": "179400",
    "end": "184680"
  },
  {
    "text": "make sure that we all have work to do we don't conflict with each other we're working in the same code base and we",
    "start": "184680",
    "end": "190170"
  },
  {
    "text": "also want to make it easy to reuse code and update code that also means for",
    "start": "190170",
    "end": "195300"
  },
  {
    "text": "maintainability we want it to be easy to refactor and this is where typescript comes into play we also want to make it",
    "start": "195300",
    "end": "201450"
  },
  {
    "text": "easier to understand and by that I mean coming into a new code base as I'm sure",
    "start": "201450",
    "end": "207030"
  },
  {
    "text": "we all have come into new code bases just try to measure the time how long does it take you to like fully grok an",
    "start": "207030",
    "end": "213720"
  },
  {
    "text": "entire code base and usually it's like six months until you've like fully understand everything that's involved",
    "start": "213720",
    "end": "219840"
  },
  {
    "text": "what typescript allows us to do is describe the stuff in our application a little bit more precisely so it's easier",
    "start": "219840",
    "end": "225930"
  },
  {
    "text": "to get on board it and you'll see what I mean when I talk about typescript we also want it to be easier to test we",
    "start": "225930",
    "end": "233130"
  },
  {
    "text": "write tests we aim for about 85% code coverage not that that really matters what we want to do is we want to write",
    "start": "233130",
    "end": "239459"
  },
  {
    "text": "tests that are valuable not just write tests for the sake of writing tests and typescript allows us to write more",
    "start": "239459",
    "end": "245160"
  },
  {
    "text": "robust tests because they are also type checked so that's what I mean when I say",
    "start": "245160",
    "end": "250830"
  },
  {
    "text": "scalable maintainable typescript if you are new to typescript and you're not familiar with it it is a compile to",
    "start": "250830",
    "end": "258269"
  },
  {
    "text": "JavaScript language it's transpiled it offers static type checking this is one",
    "start": "258270",
    "end": "264120"
  },
  {
    "text": "of its most powerful abilities that's why it's called type type script if you're coming from c-sharp or java then",
    "start": "264120",
    "end": "270479"
  },
  {
    "text": "you're probably used to static type but if you're coming just from pure javascript javascript is a dynamically",
    "start": "270479",
    "end": "276180"
  },
  {
    "text": "typed language not a statically typed language but typescript sort of brings the best of both of those worlds where",
    "start": "276180",
    "end": "281430"
  },
  {
    "text": "you can mix both dynamic typing and static typing it has really really good",
    "start": "281430",
    "end": "287460"
  },
  {
    "text": "editor tooling and I'm on my laptop and so I'm going to be showing you all these code snippets in the context of visual",
    "start": "287460",
    "end": "293190"
  },
  {
    "text": "studio code which is the editor that I use and you're gonna see what I mean when I say fantastic tooling it also",
    "start": "293190",
    "end": "299250"
  },
  {
    "text": "helps you provide more refactor friendly code because the typescript compiler is",
    "start": "299250",
    "end": "304610"
  },
  {
    "text": "understanding your code base as you write it that also means that it can find all your references it can keep",
    "start": "304610",
    "end": "310740"
  },
  {
    "text": "track of where things are in the codebase and so you can usually hit a hotkey to let go to where things are defined or find all the references to",
    "start": "310740",
    "end": "317430"
  },
  {
    "text": "something when I came into my current team at Target we're just doing a pure",
    "start": "317430",
    "end": "323280"
  },
  {
    "text": "JavaScript code base and the way that people find references in a pure JavaScript code base is by doing command",
    "start": "323280",
    "end": "329790"
  },
  {
    "text": "F across the file system right so you don't do that with typescript it knows where everything is react is a component",
    "start": "329790",
    "end": "339420"
  },
  {
    "text": "based presentation library I wouldn't call it a framework it has a very small",
    "start": "339420",
    "end": "345060"
  },
  {
    "text": "surface area the API is pretty small you basically have components and then those",
    "start": "345060",
    "end": "350610"
  },
  {
    "text": "components can have some methods on them but it allows you to compose your app as",
    "start": "350610",
    "end": "357360"
  },
  {
    "text": "small reusable units of components so react has a more functional mindset than",
    "start": "357360",
    "end": "364500"
  },
  {
    "text": "say angular where you're creating components and decorating them with es6 decorators and stuff like that",
    "start": "364500",
    "end": "372240"
  },
  {
    "text": "so react is what I like to say is just a little bit closer to the metal appear a pure JavaScript fan you're probably",
    "start": "372240",
    "end": "379110"
  },
  {
    "text": "going to be a bigger fan of react and you would be of angular but they both have pros and cons the reason that I",
    "start": "379110",
    "end": "387090"
  },
  {
    "text": "chose react for my application was that it has really good performance because it's based on the virtual Dom it's able",
    "start": "387090",
    "end": "393000"
  },
  {
    "text": "to have a representation of your DOM and it's able to detect differences so it",
    "start": "393000",
    "end": "398460"
  },
  {
    "text": "doesn't have to rely on the browser api's which are a lot slower so it has very fast performance",
    "start": "398460",
    "end": "404759"
  },
  {
    "text": "so this is a code sample of using typescript with react I have these cool",
    "start": "404759",
    "end": "410729"
  },
  {
    "text": "buttons right here if I click on them they're going to bring me into Visual Studio code into the file so this is an",
    "start": "410729",
    "end": "418349"
  },
  {
    "text": "example of using react here I have a functional component a stateless",
    "start": "418349",
    "end": "423689"
  },
  {
    "text": "functional component and really it's not that different from just regular JavaScript this is just a function using",
    "start": "423689",
    "end": "430919"
  },
  {
    "text": "arrow syntax and it has a single property called props and it's rendering",
    "start": "430919",
    "end": "436529"
  },
  {
    "text": "and h1 text and this is JSX so if you're not familiar with this syntax this is like HTML and JavaScript well you can",
    "start": "436529",
    "end": "444360"
  },
  {
    "text": "also see that I have this funky syntax here this is from typescript so this syntax is a what's called a type",
    "start": "444360",
    "end": "450330"
  },
  {
    "text": "annotation and what it is is it's describing what these props are and the",
    "start": "450330",
    "end": "455580"
  },
  {
    "text": "way that you can read this is similar to how you would read regular JavaScript syntax this is an object that has a text",
    "start": "455580",
    "end": "462719"
  },
  {
    "text": "property and that text property is a type string here's another example of an",
    "start": "462719",
    "end": "469409"
  },
  {
    "text": "es6 class component this has an even funkier syntax here called generic",
    "start": "469409",
    "end": "474810"
  },
  {
    "text": "generic syntax so the way that you can read this these two generic parameters",
    "start": "474810",
    "end": "480509"
  },
  {
    "text": "one the first one represents props the second one represents the state of my component so the way that I would read",
    "start": "480509",
    "end": "486209"
  },
  {
    "text": "this is I would say class app extends react component of empty props because",
    "start": "486209",
    "end": "492479"
  },
  {
    "text": "it's an empty object and state props that have a hello property that are type",
    "start": "492479",
    "end": "498959"
  },
  {
    "text": "string and you can even see here that I'm initializing my state to hello",
    "start": "498959",
    "end": "504209"
  },
  {
    "text": "camera so what is the benefit of this well with typescript if I for example",
    "start": "504209",
    "end": "509399"
  },
  {
    "text": "change this to a boolean suddenly I'm going to get some red squiggly lines and the squiggly lines are gonna yell at me",
    "start": "509399",
    "end": "515339"
  },
  {
    "text": "and they're gonna say type boolean is not assignable to type string so this is one of the primary benefits that you get",
    "start": "515339",
    "end": "521969"
  },
  {
    "text": "with static type checking it's saying that I can't convert a boolean to a string that's not what you told me it is",
    "start": "521969",
    "end": "527100"
  },
  {
    "text": "however if you go ahead and change that to boolean then suddenly you're okay but",
    "start": "527100",
    "end": "532769"
  },
  {
    "text": "if you check check out down here I'm referencing my other state list component I have my text prop and I'm trying to",
    "start": "532769",
    "end": "541250"
  },
  {
    "text": "pass in the current value for this dot state dot hello well this dot state hello as you can",
    "start": "541250",
    "end": "547940"
  },
  {
    "text": "sort of see here at the very bottom is of type boolean well boolean and text",
    "start": "547940",
    "end": "553610"
  },
  {
    "text": "boolean and string don't jibe together so typescript is also gonna throw an error here because I'm using this",
    "start": "553610",
    "end": "559100"
  },
  {
    "text": "component wrong so one of the reasons that I chose to use react or static type checking with react is that I get full",
    "start": "559100",
    "end": "566150"
  },
  {
    "text": "type checking all the way down into the JSX which i think is really powerful so let's undo that there fantastic now the",
    "start": "566150",
    "end": "576230"
  },
  {
    "text": "inspiration for this talk came from an application that I run it's non-commercial it's totally free it's",
    "start": "576230",
    "end": "582140"
  },
  {
    "text": "called keep tracking my games what it allows you to do like I said is sort of organize your game collection but",
    "start": "582140",
    "end": "587660"
  },
  {
    "text": "initially I'd created it to track upcoming games and so context around",
    "start": "587660",
    "end": "593300"
  },
  {
    "text": "this this was built in net so historically have been a.net developer and it's also a hybrid app which means",
    "start": "593300",
    "end": "599990"
  },
  {
    "text": "that it has server-side rendered pages and then inside of those pages there are pieces of JavaScript that enhance it",
    "start": "599990",
    "end": "605780"
  },
  {
    "text": "that make it more like a single page app experience and originally I had written",
    "start": "605780",
    "end": "611000"
  },
  {
    "text": "this in jQuery and knockout j/s so what I've been doing over the past year is migrating that to typescript and react",
    "start": "611000",
    "end": "617780"
  },
  {
    "text": "and that sort of served as the genesis for this talk so a lot of the patterns that I'm going to talk about have come",
    "start": "617780",
    "end": "623680"
  },
  {
    "text": "experience from that as well as projects that I work on at work where we do typescript redux and react",
    "start": "623680",
    "end": "629980"
  },
  {
    "text": "I chose react because it's a heavily interactive UI so this is an example of",
    "start": "629980",
    "end": "635090"
  },
  {
    "text": "sorting your game collection and this is the react version so I'm using some fancy animations but you can see that",
    "start": "635090",
    "end": "641510"
  },
  {
    "text": "people can pick whether whether or not they want to prioritize certain games in their backlog but then when they switch",
    "start": "641510",
    "end": "647690"
  },
  {
    "text": "it to a different sort then the icons change and a lot of props and rendering",
    "start": "647690",
    "end": "653060"
  },
  {
    "text": "changes so I was running into performance issues with this because this is supposed to support thousands of",
    "start": "653060",
    "end": "658190"
  },
  {
    "text": "games in your game collection and react is allowing me to do this type of thing and that's that's live right so react is",
    "start": "658190",
    "end": "665570"
  },
  {
    "text": "super powerful for that this talk is based on a true story and what I mean by that is that I'm going to",
    "start": "665570",
    "end": "672120"
  },
  {
    "text": "show you patterns and practices that I've come to think are useful and we've",
    "start": "672120",
    "end": "677670"
  },
  {
    "text": "implemented a lot of them on the projects that I'm on but I'm also showing you ideal pattern state so my",
    "start": "677670",
    "end": "683730"
  },
  {
    "text": "entire code base isn't necessarily migrated to all these patterns yet but I think they're going to be useful so the",
    "start": "683730",
    "end": "691620"
  },
  {
    "text": "concepts that I will mention include the Redux store so if you've used redux",
    "start": "691620",
    "end": "696840"
  },
  {
    "text": "before that is a state container for your application it allows you to manage global State and that is supposed to be",
    "start": "696840",
    "end": "702390"
  },
  {
    "text": "your single source of truth for your application and it can be pretty heavy for a small application but if you're",
    "start": "702390",
    "end": "708930"
  },
  {
    "text": "working on a big production app where you have to support lots of people across the world like at my project it's",
    "start": "708930",
    "end": "715440"
  },
  {
    "text": "really useful because you can ship that state and debug logs and stuff like that to be able to reproduce people's airs if",
    "start": "715440",
    "end": "721920"
  },
  {
    "text": "they run into any state is the data representing your app at a point in time one of the benefits of Redux is that",
    "start": "721920",
    "end": "728400"
  },
  {
    "text": "because it's tracking state over time you can go back in time you can step through your state changes and it's",
    "start": "728400",
    "end": "734640"
  },
  {
    "text": "keeping track of all of that actions in redux are just a fancy word for a JSON",
    "start": "734640",
    "end": "740880"
  },
  {
    "text": "object with a type property and that type property can be anything in my examples they're going to be strings but",
    "start": "740880",
    "end": "747360"
  },
  {
    "text": "with a certain twist with typescript to make them strongly-typed action creators is just another fancy",
    "start": "747360",
    "end": "754080"
  },
  {
    "text": "word for a function that returns an action that's all it does so it takes some parameters then it outputs a plain",
    "start": "754080",
    "end": "760440"
  },
  {
    "text": "old JSON object the reason that we have action creators is so that we are consistently creating actions across our",
    "start": "760440",
    "end": "766710"
  },
  {
    "text": "codebase and reducers are another term that was really confusing at first but",
    "start": "766710",
    "end": "772470"
  },
  {
    "text": "what they do is they take those actions and then they return a new updated state based on those actions so let's say that",
    "start": "772470",
    "end": "779550"
  },
  {
    "text": "I want to fetch a game from my server which is one of the examples we'll see it will take that game response from the",
    "start": "779550",
    "end": "787589"
  },
  {
    "text": "server and it will shove it into the Redux State and that's a new mutation of the state therefore it's a new",
    "start": "787589",
    "end": "792750"
  },
  {
    "text": "representation of our state great so what we're going to talk about today",
    "start": "792750",
    "end": "798530"
  },
  {
    "text": "we're going to take a look at some patterns about folder layout and structure State and",
    "start": "798530",
    "end": "804369"
  },
  {
    "text": "reducers in terms of redux actions and redux action creators and redux and",
    "start": "804369",
    "end": "809470"
  },
  {
    "text": "finally we're going to talk about plain old react components and how to manage their state so for folder layout this is",
    "start": "809470",
    "end": "816850"
  },
  {
    "text": "a common layout that you'll see if you're starting out learning react which is the generic folder layout and by that",
    "start": "816850",
    "end": "822939"
  },
  {
    "text": "I mean that there are generic folders like actions components reducers selectors which are just ways to get",
    "start": "822939",
    "end": "829569"
  },
  {
    "text": "information from state and just regular generic services well this works okay",
    "start": "829569",
    "end": "835029"
  },
  {
    "text": "for a small application but the issue with this is that files are going to be spread out the components folder isn't",
    "start": "835029",
    "end": "840850"
  },
  {
    "text": "gonna scale very well because these folders are start to get gonna start to get pretty deep and if your app starts",
    "start": "840850",
    "end": "846759"
  },
  {
    "text": "to grow there's gonna be a lot more folders in addition like I said it's fine for a small site but what we really",
    "start": "846759",
    "end": "852850"
  },
  {
    "text": "need is something that scales a little bit better and this layout is inspired by Ryan Florence and he proposed this",
    "start": "852850",
    "end": "861970"
  },
  {
    "text": "way to organize a react application by screens so you can sort of see here that",
    "start": "861970",
    "end": "868870"
  },
  {
    "text": "we have a screens folder inside of our screens folder we have an app folder that represents our shell for the",
    "start": "868870",
    "end": "875199"
  },
  {
    "text": "application and all we're doing is we're just having a convention where each screen folder can have a components",
    "start": "875199",
    "end": "882399"
  },
  {
    "text": "folder which is your components that are used in that screen and then we have a shared folder which is going to be a",
    "start": "882399",
    "end": "888819"
  },
  {
    "text": "little special this is a way to share components between that screen and any sub screens in your app so what this",
    "start": "888819",
    "end": "896980"
  },
  {
    "text": "allows us to do is achieve a scalable nesting layout so let's jump into the",
    "start": "896980",
    "end": "902290"
  },
  {
    "text": "code base quick here so here is my screens folder my components folder for",
    "start": "902290",
    "end": "909610"
  },
  {
    "text": "my app I have sub screens so my app is my shell now I want to maybe show a game",
    "start": "909610",
    "end": "916059"
  },
  {
    "text": "details screen well that's its own screen down here or maybe I want to show the list organize",
    "start": "916059",
    "end": "922269"
  },
  {
    "text": "screen and that has its own components that are being used there in my shared",
    "start": "922269",
    "end": "928839"
  },
  {
    "text": "app state or a shared app folder I have like an icon that I might want to share across my applique",
    "start": "928839",
    "end": "934170"
  },
  {
    "text": "and icons probably good a good thing to share across your app so how do I actually reference those share",
    "start": "934170",
    "end": "940680"
  },
  {
    "text": "components this achieves better",
    "start": "940680",
    "end": "948089"
  },
  {
    "text": "collaboration co-locating related files closer importance I'll go over those again this is how you would normally",
    "start": "948089",
    "end": "955399"
  },
  {
    "text": "refer to a shared component you'd use this dot dot slash dot slash well we're",
    "start": "955399",
    "end": "961649"
  },
  {
    "text": "just we're talking about scalable nesting right so I can have lots of different sub screens this dot dot slash",
    "start": "961649",
    "end": "966899"
  },
  {
    "text": "is gonna be repeated a whole lot of times as soon as you get two three four five levels deep that's that's not cool",
    "start": "966899",
    "end": "973800"
  },
  {
    "text": "so what we're gonna do is we're going to do a cool thing and we're going to fix",
    "start": "973800",
    "end": "979649"
  },
  {
    "text": "typescript to actually resolve modules using a convention where we just say shared slash and what that's going to do",
    "start": "979649",
    "end": "986459"
  },
  {
    "text": "is going to emulate how node resolves modules and that it looks in the current directory and then just keeps going one",
    "start": "986459",
    "end": "992790"
  },
  {
    "text": "directory up and tries to match that module name so you can see that because I'm using typescript and I've configured",
    "start": "992790",
    "end": "999329"
  },
  {
    "text": "it correctly it is finding the exact location for that module which means",
    "start": "999329",
    "end": "1004519"
  },
  {
    "text": "what I can do is I can hit f12 and I can just go to the definition of that module",
    "start": "1004519",
    "end": "1009709"
  },
  {
    "text": "there's no hunting and pecking around trying to figure out where these modules are it's able to resolve that how",
    "start": "1009709",
    "end": "1016070"
  },
  {
    "text": "exactly does that work through this magic right here in our TS config JSON",
    "start": "1016070",
    "end": "1021350"
  },
  {
    "text": "so there's two properties base URL and paths and what I'm doing here is I'm",
    "start": "1021350",
    "end": "1026750"
  },
  {
    "text": "sitting up aliases so I'm saying anything that starts with tilde slash you're just gonna map it to the source",
    "start": "1026750",
    "end": "1032808"
  },
  {
    "text": "directory anything after that with the star is gonna be substituted in addition",
    "start": "1032809",
    "end": "1038150"
  },
  {
    "text": "I'm also gonna do shared slash star and you can see that I've mapped screens app",
    "start": "1038150",
    "end": "1044030"
  },
  {
    "text": "shared anything after that is going to be mapped there now you might be pointing out or thinking to yourself",
    "start": "1044030",
    "end": "1050270"
  },
  {
    "text": "that this is neat but what isn't so great is that I have to define all these",
    "start": "1050270",
    "end": "1055460"
  },
  {
    "text": "shared folders statically there is an open issue for this in the typescript repository they're hopefully going to",
    "start": "1055460",
    "end": "1061549"
  },
  {
    "text": "address it but honestly as soon as you start adding screens you're probably",
    "start": "1061549",
    "end": "1067370"
  },
  {
    "text": "going to initial batch of screens and then as you work on your application over time this file is not going to change that much I",
    "start": "1067370",
    "end": "1073640"
  },
  {
    "text": "don't find it to be a huge deal if you really want to go the extra mile what",
    "start": "1073640",
    "end": "1078980"
  },
  {
    "text": "you can do I have a code sample right here you could take that TS config and you can mutate it and you could go ahead",
    "start": "1078980",
    "end": "1086030"
  },
  {
    "text": "and search for all the shared folders and just add them to that paths property",
    "start": "1086030",
    "end": "1091820"
  },
  {
    "text": "and then generate a new TS config and you could add this to your web pack config or you could add it to your npm",
    "start": "1091820",
    "end": "1097820"
  },
  {
    "text": "scripts i'm not going to show that but this is the code sample that that does that alright so what do we achieve by",
    "start": "1097820",
    "end": "1108170"
  },
  {
    "text": "doing this folder layout we have a scalable folder structure we have shorter import paths we have shared",
    "start": "1108170",
    "end": "1114920"
  },
  {
    "text": "component resolution and it supports the typescript go to definition",
    "start": "1114920",
    "end": "1120110"
  },
  {
    "text": "functionality and even you saw in vs code it was able to support vs code",
    "start": "1120110",
    "end": "1126460"
  },
  {
    "text": "what's not so great of course is that you are currently forced to provide shared paths ok redux State this is",
    "start": "1126700",
    "end": "1136160"
  },
  {
    "text": "interesting because when you start out using typescript and redux what I had",
    "start": "1136160",
    "end": "1141500"
  },
  {
    "text": "initially done is I had tried to describe my entire redux state as one",
    "start": "1141500",
    "end": "1147350"
  },
  {
    "text": "single typescript interface an interface is just a description or a contract for",
    "start": "1147350",
    "end": "1152750"
  },
  {
    "text": "the shape of an object so what I was doing is I was just saying here's my entire application state and here's one",
    "start": "1152750",
    "end": "1159230"
  },
  {
    "text": "file that has it and it didn't really scale very well what I'm going to show",
    "start": "1159230",
    "end": "1165140"
  },
  {
    "text": "you right now is something that we can just call bottom-up state so bottom-up meaning it goes from the",
    "start": "1165140",
    "end": "1170930"
  },
  {
    "text": "farthest screen down and then bubbles up to a final exposure of our state in a",
    "start": "1170930",
    "end": "1177830"
  },
  {
    "text": "single type property so how does that work this is the root of our state we",
    "start": "1177830",
    "end": "1185300"
  },
  {
    "text": "have our source / state that's the indexed es that we're in right now and",
    "start": "1185300",
    "end": "1191540"
  },
  {
    "text": "all I'm doing here is I'm importing our app state that's our first screen remember it's our shell so app is going",
    "start": "1191540",
    "end": "1198620"
  },
  {
    "text": "to have its own state and what we're just going to do is we're going to port that state and we're gonna expose",
    "start": "1198620",
    "end": "1203660"
  },
  {
    "text": "it and what we're going to use is this keyword here called type of and what",
    "start": "1203660",
    "end": "1208760"
  },
  {
    "text": "does that do so what type of does is it actually in typescript just gets the",
    "start": "1208760",
    "end": "1215120"
  },
  {
    "text": "definition of that type and exposes it as its own type that's a little bit meta so what it does is it's actually just",
    "start": "1215120",
    "end": "1222500"
  },
  {
    "text": "describing what that shape is going to look like when it's finally done so that",
    "start": "1222500",
    "end": "1227600"
  },
  {
    "text": "we don't have to declare it upfront so I'm going to use go to definition I'm going to find out what does this state",
    "start": "1227600",
    "end": "1233360"
  },
  {
    "text": "look like so this is our app state I have a game property on it that's from my sub screen game you could imagine",
    "start": "1233360",
    "end": "1240200"
  },
  {
    "text": "here that I have multiple sub screens like my list organized page my list edit page my list create page they're all",
    "start": "1240200",
    "end": "1246290"
  },
  {
    "text": "going to have their own state and I'm going to export them right here let's go farther down so now we've",
    "start": "1246290",
    "end": "1252950"
  },
  {
    "text": "reached the bottom and the bottom actually is the one that has the interface so this is my game screen",
    "start": "1252950",
    "end": "1259520"
  },
  {
    "text": "state and my game screen state has a details property that details property",
    "start": "1259520",
    "end": "1265070"
  },
  {
    "text": "has an ID that's a number you can also have a game that could be null or an object and I would actually have an",
    "start": "1265070",
    "end": "1271160"
  },
  {
    "text": "actual class here this was a real application but then I'm defining my initial state and I'm just saying that",
    "start": "1271160",
    "end": "1277610"
  },
  {
    "text": "it's going to match this shape why do I do that why couldn't I just do this and just",
    "start": "1277610",
    "end": "1283880"
  },
  {
    "text": "export this well if I do that let's say that I add a new property what's gonna",
    "start": "1283880",
    "end": "1289910"
  },
  {
    "text": "happen is that type scripts gonna be okay this is just a lint err type scripts gonna be okay with this but",
    "start": "1289910",
    "end": "1296210"
  },
  {
    "text": "that's not what I want what I want to do is I want to enforce that this object matches my game state and now I'll get a",
    "start": "1296210",
    "end": "1304070"
  },
  {
    "text": "typescript err and when you scroll all the way down says object literal can only specify own properties and I don't",
    "start": "1304070",
    "end": "1311450"
  },
  {
    "text": "know about foo you didn't tell me about foo who is not up here therefore there's an error so that's gonna help us make sure",
    "start": "1311450",
    "end": "1319520"
  },
  {
    "text": "that our state is consistent throughout the application we're not passing extra properties that we don't know about",
    "start": "1319520",
    "end": "1326140"
  },
  {
    "text": "and just went through this that's bottom up state what about reducers can we do the same thing with",
    "start": "1329600",
    "end": "1336029"
  },
  {
    "text": "reducers yes we can so we're gonna do bottom-up reducers this is let me just",
    "start": "1336029",
    "end": "1341039"
  },
  {
    "text": "close these these are the this is the root reducer this is the final reducer that gets created gets put into our",
    "start": "1341039",
    "end": "1347909"
  },
  {
    "text": "store I'm going to hit f12 on here this is my a producer this should look a",
    "start": "1347909",
    "end": "1355049"
  },
  {
    "text": "little familiar I'm using the combined reducers function from redux but I'm",
    "start": "1355049",
    "end": "1360750"
  },
  {
    "text": "also passing an extra parameter here what's that for so the generic syntax",
    "start": "1360750",
    "end": "1365789"
  },
  {
    "text": "right here for state what I'm doing is I'm just passing in that exported type from earlier state so as a reminder",
    "start": "1365789",
    "end": "1374549"
  },
  {
    "text": "that's what I'm putting as what my reducers should look like so then I'm",
    "start": "1374549",
    "end": "1387029"
  },
  {
    "text": "importing my game reducer that's from my sub screen so I'm gonna go to my game reducer and I'm gonna do the same thing",
    "start": "1387029",
    "end": "1395220"
  },
  {
    "text": "I'm just gonna combine reducers from all the parts of my state that are part of my game screen in this case details and",
    "start": "1395220",
    "end": "1403940"
  },
  {
    "text": "we're just gonna go to the short version of details and this should also look",
    "start": "1403940",
    "end": "1410159"
  },
  {
    "text": "familiar because this is what you would typically do in a Redux application for a reducer you would just have a function",
    "start": "1410159",
    "end": "1416610"
  },
  {
    "text": "that takes some state i'm fault i'm just sending it to our initial state what's",
    "start": "1416610",
    "end": "1422130"
  },
  {
    "text": "initial state initial state is that constant that i created that I exported so that's our initial state and then I'm",
    "start": "1422130",
    "end": "1431190"
  },
  {
    "text": "taking an action and for now action can be anything but we're gonna fix that next so now I've created bottom-up",
    "start": "1431190",
    "end": "1440100"
  },
  {
    "text": "reducers so I don't have to define what my reducers all are going to look like I don't have to import them all at the",
    "start": "1440100",
    "end": "1446159"
  },
  {
    "text": "root of my project they're all defined in their screens and they're exported and then they just sort of get composed",
    "start": "1446159",
    "end": "1451289"
  },
  {
    "text": "together so what is that bias we",
    "start": "1451289",
    "end": "1456419"
  },
  {
    "text": "maximize type inference from typescript so what I mean by that as I'm saying I'm not describing",
    "start": "1456419",
    "end": "1463020"
  },
  {
    "text": "my entire state up front I'm allowing it to be composed from all my sub screens",
    "start": "1463020",
    "end": "1468770"
  },
  {
    "text": "that's bottom up composable state so screens manage their own state they're encapsulated so each screen has its own",
    "start": "1468770",
    "end": "1475290"
  },
  {
    "text": "representation of state and then it just gets exported and then I just consume it and using that shared folder you can",
    "start": "1475290",
    "end": "1482280"
  },
  {
    "text": "imagine that I could actually just create shared state so in my shared folder if I created a stores folder I",
    "start": "1482280",
    "end": "1488250"
  },
  {
    "text": "could potentially create multiple Redux stores if I want to and they could be shared between screens or sub screens",
    "start": "1488250",
    "end": "1496280"
  },
  {
    "text": "okay what about actions reducers handle actions we need a way to represent those",
    "start": "1496280",
    "end": "1503070"
  },
  {
    "text": "actions in a way that we can make sure they stay consistent so this is what my",
    "start": "1503070",
    "end": "1511830"
  },
  {
    "text": "actions look like we have load game that should be familiar and Redux usually",
    "start": "1511830",
    "end": "1518070"
  },
  {
    "text": "actions are constant strings so we have my load game is one of my actions that I",
    "start": "1518070",
    "end": "1523080"
  },
  {
    "text": "have and then I have this interface this typescript interface that describes what",
    "start": "1523080",
    "end": "1528690"
  },
  {
    "text": "that action has it has an ID it has a game object and it's extending this",
    "start": "1528690",
    "end": "1534120"
  },
  {
    "text": "thing called action but I'll get into that next why is it's significant that",
    "start": "1534120",
    "end": "1539940"
  },
  {
    "text": "I'm exporting a Const load game besides being a typical thing that you would do in a JavaScript app is if it doesn't",
    "start": "1539940",
    "end": "1546150"
  },
  {
    "text": "change your be Const but Const has a connotation in typescript what it will do is it will give it the",
    "start": "1546150",
    "end": "1553590"
  },
  {
    "text": "type of the literal string that you're giving it so the type of this load game",
    "start": "1553590",
    "end": "1559290"
  },
  {
    "text": "variable this constant is the literal string game slash load okay what do I",
    "start": "1559290",
    "end": "1565590"
  },
  {
    "text": "mean by that if I change this to a var then the type of load game is a string",
    "start": "1565590",
    "end": "1572390"
  },
  {
    "text": "so typescript doesn't understand that it's a very specific string because it's",
    "start": "1572390",
    "end": "1577710"
  },
  {
    "text": "a variable it could be you could assign a different string to this so it's not a",
    "start": "1577710",
    "end": "1582750"
  },
  {
    "text": "literal type but because I'm using constant the literal type of this is game load and you'll see the",
    "start": "1582750",
    "end": "1588840"
  },
  {
    "text": "significance of that in a second now this helper that I've created is",
    "start": "1588840",
    "end": "1594700"
  },
  {
    "text": "really simple so pay attention to this code right here all I'm doing is I'm",
    "start": "1594700",
    "end": "1600700"
  },
  {
    "text": "describing an interface a typescript interface that takes a generic argument the type of my action and I'm just by",
    "start": "1600700",
    "end": "1607810"
  },
  {
    "text": "default I'm setting it to string generic defaults are really cool and I wish",
    "start": "1607810",
    "end": "1613030"
  },
  {
    "text": "c-sharp had them but in typescript you can set the default of a generic argument and I'm setting it to string so",
    "start": "1613030",
    "end": "1619060"
  },
  {
    "text": "it really could be anything any type of string but what I'm doing here is I'm",
    "start": "1619060",
    "end": "1624250"
  },
  {
    "text": "saying I'm using that special type of operator again where I'm saying I'm",
    "start": "1624250",
    "end": "1629350"
  },
  {
    "text": "creating an action of this literal string right here game load and that is",
    "start": "1629350",
    "end": "1635500"
  },
  {
    "text": "going to be substituted in this type property so actions all have a type",
    "start": "1635500",
    "end": "1640780"
  },
  {
    "text": "property that was one of the things that Redux enforces and now I'm describing",
    "start": "1640780",
    "end": "1645970"
  },
  {
    "text": "that type and my load game action has ID and game all right so what does that get",
    "start": "1645970",
    "end": "1658780"
  },
  {
    "text": "us exactly well this is back to my reducer now my reducer has a little bit more code we still have our initial",
    "start": "1658780",
    "end": "1666310"
  },
  {
    "text": "state that stayed the same and what I showed you but now rather than typing action as any we're typing it as this",
    "start": "1666310",
    "end": "1673330"
  },
  {
    "text": "thing called game action so remember that I'm in my game screen my game",
    "start": "1673330",
    "end": "1679180"
  },
  {
    "text": "screen is going to have several different types of actions how can I tell typescript that my actions could be",
    "start": "1679180",
    "end": "1684760"
  },
  {
    "text": "one or more of these these actions these types of actions so I can do that using",
    "start": "1684760",
    "end": "1690040"
  },
  {
    "text": "something called a type Union and typescript this is just saying game action can be load game action or save",
    "start": "1690040",
    "end": "1697720"
  },
  {
    "text": "game action so it can be 1 or 1 or either of these and as you can imagine I",
    "start": "1697720",
    "end": "1702850"
  },
  {
    "text": "could add more so I just use the pipe operator separate other types of actions that this could be okay that's",
    "start": "1702850",
    "end": "1710350"
  },
  {
    "text": "interesting but why do I need to do that why should I do that well remember that",
    "start": "1710350",
    "end": "1715660"
  },
  {
    "text": "we typed action action type in our helper and we substituted that literal",
    "start": "1715660",
    "end": "1721810"
  },
  {
    "text": "constant value as what the type property should be well if I hover over this you can see",
    "start": "1721810",
    "end": "1727679"
  },
  {
    "text": "the typescript has inferred that the two types that it could be is game load and",
    "start": "1727679",
    "end": "1733529"
  },
  {
    "text": "game safe this is what's called a discriminated union this is significant",
    "start": "1733529",
    "end": "1739649"
  },
  {
    "text": "because what this means is that I can take advantage of type scripts type guard functionality where I can say hey",
    "start": "1739649",
    "end": "1746639"
  },
  {
    "text": "when I handle the load game action type then I'm gonna get intellisense and type",
    "start": "1746639",
    "end": "1753960"
  },
  {
    "text": "checking for everything on that specific action type so game and ID are both",
    "start": "1753960",
    "end": "1759929"
  },
  {
    "text": "properties of our load game action but if I come back down here and I've created another action I didn't show you",
    "start": "1759929",
    "end": "1766320"
  },
  {
    "text": "called save game save game does not have a game property if I go here and I hit",
    "start": "1766320",
    "end": "1774509"
  },
  {
    "text": "f12 we can see that save game only has",
    "start": "1774509",
    "end": "1779850"
  },
  {
    "text": "an ID number so it only has one property it does not have a game property so type",
    "start": "1779850",
    "end": "1786239"
  },
  {
    "text": "script is checking for us and making sure that I'm referencing the right",
    "start": "1786239",
    "end": "1792419"
  },
  {
    "text": "properties so now I can do save game I can return my ID back so that's pretty",
    "start": "1792419",
    "end": "1799619"
  },
  {
    "text": "cool I think this is like one of the most powerful features and one of the best things I like about using",
    "start": "1799619",
    "end": "1805619"
  },
  {
    "text": "typescript with react doing this sort of discriminated union is really powerful because it makes sure that my actions",
    "start": "1805619",
    "end": "1812549"
  },
  {
    "text": "are going to be consistent and if I update my actions my reducers are gonna",
    "start": "1812549",
    "end": "1818100"
  },
  {
    "text": "throw compiler errors so I can make sure I fixed them before I get too far if you",
    "start": "1818100",
    "end": "1828600"
  },
  {
    "text": "don't want to do a switch statement you could do something called an action map this is another way in redux to do",
    "start": "1828600",
    "end": "1835580"
  },
  {
    "text": "handling for reducers instead of defining a switch statement what you can do is just define a dictionary so what",
    "start": "1835580",
    "end": "1843749"
  },
  {
    "text": "this dictionary looks like is something like this I'm creating in actions constant and it's a JavaScript JSON",
    "start": "1843749",
    "end": "1851759"
  },
  {
    "text": "object and the keys of that JSON object are my constants so I'm just using",
    "start": "1851759",
    "end": "1859410"
  },
  {
    "text": "computed properties syntax there and then I'm referencing these individual smaller functions down below so if you",
    "start": "1859410",
    "end": "1866010"
  },
  {
    "text": "don't want to have a big switch statement full of stuff you can do it this way and the way that I'm typing this is very similar I still have my",
    "start": "1866010",
    "end": "1873090"
  },
  {
    "text": "type game app option our game action and I still have my type of initial state",
    "start": "1873090",
    "end": "1878970"
  },
  {
    "text": "details but what I've done here is I'm just using a type alias just to shorten that up so type aliases are super nice you can",
    "start": "1878970",
    "end": "1885660"
  },
  {
    "text": "just shorten long type names up so now this is just state so I can say I have",
    "start": "1885660",
    "end": "1891000"
  },
  {
    "text": "my reducer actions that are have my type state game action and what's cool about",
    "start": "1891000",
    "end": "1896730"
  },
  {
    "text": "this is that I can change this to be for example save game action and I still get",
    "start": "1896730",
    "end": "1904530"
  },
  {
    "text": "the same type checking so game does not exist on type action so this is another",
    "start": "1904530",
    "end": "1913230"
  },
  {
    "text": "way to do it what do these helpers look like again",
    "start": "1913230",
    "end": "1919380"
  },
  {
    "text": "this is getting into more crazier typescript syntax but the premise is",
    "start": "1919380",
    "end": "1924750"
  },
  {
    "text": "still simple so I'm creating an interface this is my contract for my object and I'm using this syntax right",
    "start": "1924750",
    "end": "1931410"
  },
  {
    "text": "here these square brackets mean this is an object that I can index into and that",
    "start": "1931410",
    "end": "1936560"
  },
  {
    "text": "property key is of type string and the value of that key the value of that",
    "start": "1936560",
    "end": "1942030"
  },
  {
    "text": "property is going to be a function that takes state in action and returns state this definition right here is the Redux",
    "start": "1942030",
    "end": "1950220"
  },
  {
    "text": "convention for reducers right so I take my state I take my action and I just",
    "start": "1950220",
    "end": "1955500"
  },
  {
    "text": "return the new representation of state now what we can do is we can just create a helper function that just sort of",
    "start": "1955500",
    "end": "1961920"
  },
  {
    "text": "takes care of that boilerplate of checking to make sure that my action is handled I handled my action if it's",
    "start": "1961920",
    "end": "1967950"
  },
  {
    "text": "available otherwise I just returned my regular state and this is all type checked if you don't like this larger",
    "start": "1967950",
    "end": "1981030"
  },
  {
    "text": "syntax or this more this more verbose syntax what you could do is you could do",
    "start": "1981030",
    "end": "1986730"
  },
  {
    "text": "a more compact syntax right here so this is the same exact thing but now instead",
    "start": "1986730",
    "end": "1992040"
  },
  {
    "text": "of breaking these out into for it functions where I have to create a separate actions map and all that what",
    "start": "1992040",
    "end": "1998039"
  },
  {
    "text": "I can just do is just do it all here in line so that's even a shorter way to do it and this is still all type checked if",
    "start": "1998039",
    "end": "2004519"
  },
  {
    "text": "I hover over state you can see that state is what I expected to be has my ID",
    "start": "2004519",
    "end": "2010909"
  },
  {
    "text": "my game because that's my details state and that's coming from right here type",
    "start": "2010909",
    "end": "2016009"
  },
  {
    "text": "of initial state details so that's an even shorter way to do that okay so",
    "start": "2016009",
    "end": "2026889"
  },
  {
    "text": "review what did we just do we created strongly typed actions so if our actions",
    "start": "2026889",
    "end": "2032809"
  },
  {
    "text": "change across our code base then our reducers can update they throw errors",
    "start": "2032809",
    "end": "2038479"
  },
  {
    "text": "and if our state changes actions will also throw errors so we're making sure",
    "start": "2038479",
    "end": "2043489"
  },
  {
    "text": "that it's just consistent across the codebase therefore when other members of our team are working on actions are",
    "start": "2043489",
    "end": "2048618"
  },
  {
    "text": "working on state if they update it and I update it and we make sure that we're all in sync reducer action handlers are",
    "start": "2048619",
    "end": "2057079"
  },
  {
    "text": "typed so they're statically typed and they're checked so my reducers make sure that we're handling the right actions",
    "start": "2057079",
    "end": "2063289"
  },
  {
    "text": "I'm looking for the right properties on my actions we also have reusable type utilities now that we can use and if",
    "start": "2063289",
    "end": "2071029"
  },
  {
    "text": "actions or state change reducers break action creators these are those little",
    "start": "2071029",
    "end": "2077358"
  },
  {
    "text": "functions that return new actions so let's take a look at what those look",
    "start": "2077359",
    "end": "2083658"
  },
  {
    "text": "like so what I've done here is I've created a function called load game and",
    "start": "2083659",
    "end": "2089599"
  },
  {
    "text": "it's using this helper that I've made called action creator what is that what is that bi'ness and what does that look",
    "start": "2089599",
    "end": "2095509"
  },
  {
    "text": "like well this is their typical action creator if you're learning Redux you'll see this pattern a lot you just",
    "start": "2095509",
    "end": "2101390"
  },
  {
    "text": "exporting a function I just prefixed it with underscore to not conflict with this one and I'm",
    "start": "2101390",
    "end": "2107450"
  },
  {
    "text": "taking my payload what is a payload actions have a type property but then",
    "start": "2107450",
    "end": "2112579"
  },
  {
    "text": "they can have any number of other properties that's represents what's on your action and I'm just saying that",
    "start": "2112579",
    "end": "2118220"
  },
  {
    "text": "that's what a payload is called it's everything but the type property and I've created another helper for that",
    "start": "2118220",
    "end": "2125180"
  },
  {
    "text": "called action payload but regardless I'm just spreading those properties over in my action so you",
    "start": "2125180",
    "end": "2130770"
  },
  {
    "text": "passed me whatever you want and I'm going to make sure that I passed the right type for my action so how can we",
    "start": "2130770",
    "end": "2138120"
  },
  {
    "text": "get that to play nice with typescript so we have our action payload type here",
    "start": "2138120",
    "end": "2145130"
  },
  {
    "text": "this is a type alias and we're saying t action extends actually here's my action",
    "start": "2145130",
    "end": "2152430"
  },
  {
    "text": "up here I'm just saying that whatever you pass me as a generic argument has to be related to an action has to be like",
    "start": "2152430",
    "end": "2159450"
  },
  {
    "text": "extended from action which means that it must have a type property well if I",
    "start": "2159450",
    "end": "2165330"
  },
  {
    "text": "would just want to take all the properties except type how could I describe that in typescript and I'm",
    "start": "2165330",
    "end": "2172020"
  },
  {
    "text": "using a utility called home it this is not built into typescript but I got it",
    "start": "2172020",
    "end": "2177300"
  },
  {
    "text": "from a really simple nice little blog post that sort of had some other nice type script type helpers but what this",
    "start": "2177300",
    "end": "2183540"
  },
  {
    "text": "does is that you give it your type that you want and then you give it a list of properties you want to emit so if I",
    "start": "2183540",
    "end": "2190830"
  },
  {
    "text": "wanted to I could say emit type emit game or emit ID and so I'm gonna get an",
    "start": "2190830",
    "end": "2198870"
  },
  {
    "text": "object back in typescript so the compiler understands that I'm returning",
    "start": "2198870",
    "end": "2204120"
  },
  {
    "text": "an object without these properties on it you could also do pick pick is the",
    "start": "2204120",
    "end": "2211830"
  },
  {
    "text": "opposite of emit and pick is built in typescript but this is the opposite this is just give me these properties but I",
    "start": "2211830",
    "end": "2218070"
  },
  {
    "text": "don't want to do that I just want to take all the properties except type that's what omit lets us do what about",
    "start": "2218070",
    "end": "2224280"
  },
  {
    "text": "this action creator function this looks a little bit funky we are doing the same thing",
    "start": "2224280",
    "end": "2229800"
  },
  {
    "text": "so we're saying create an action creator for this action and I'm gonna pass it",
    "start": "2229800",
    "end": "2235140"
  },
  {
    "text": "the type the constant the type that I want to pass in and all this is doing is",
    "start": "2235140",
    "end": "2240240"
  },
  {
    "text": "it's just doing the same thing that I was doing before it's taking this little boilerplate and genera sizing it so",
    "start": "2240240",
    "end": "2248430"
  },
  {
    "text": "here's my function that takes my payload I am casting it as object because if I",
    "start": "2248430",
    "end": "2254280"
  },
  {
    "text": "didn't do that petracles going to complain because payload has that type property",
    "start": "2254280",
    "end": "2260550"
  },
  {
    "text": "so it's getting confused I'm just gonna tell typescript no worries bud treated as just a regular plain object",
    "start": "2260550",
    "end": "2266700"
  },
  {
    "text": "spread the properties and then pass in the type that I'm giving that type type type type and force it to be a tea",
    "start": "2266700",
    "end": "2274710"
  },
  {
    "text": "action it's just telling typescript whatever word gets returned from this function is a tea action so now I can do",
    "start": "2274710",
    "end": "2284250"
  },
  {
    "text": "this I can just use this little action creator utility and I get all the",
    "start": "2284250",
    "end": "2290190"
  },
  {
    "text": "strongly typed benefits of this so now I don't have to have I don't have to have",
    "start": "2290190",
    "end": "2295380"
  },
  {
    "text": "this code anymore and get rid of it and now load game load game the definition",
    "start": "2295380",
    "end": "2300990"
  },
  {
    "text": "of low game is a function that takes payload guess what it even tells me what properties are gonna be their ID and",
    "start": "2300990",
    "end": "2306660"
  },
  {
    "text": "game and it's gonna return a load game action load game action is right there has an ID and it came it's all",
    "start": "2306660",
    "end": "2314250"
  },
  {
    "text": "statically typed fantastic now we need",
    "start": "2314250",
    "end": "2321930"
  },
  {
    "text": "to dispatch an action let me show what that looks like so I've created a",
    "start": "2321930",
    "end": "2329970"
  },
  {
    "text": "function down here this is not like a redux action what this is doing I'm using a library called redux thunk it's",
    "start": "2329970",
    "end": "2337080"
  },
  {
    "text": "like the simplest way to sort of take promises for actions and I'm using async",
    "start": "2337080",
    "end": "2342960"
  },
  {
    "text": "in a wait what I'm doing is I'm just creating a function that returns another function and that function has a",
    "start": "2342960",
    "end": "2349140"
  },
  {
    "text": "dispatch so dispatch is part of redux it's a way that you send actions out for",
    "start": "2349140",
    "end": "2354210"
  },
  {
    "text": "people to know about so I'm being passed a dispatch handler right here I'm just",
    "start": "2354210",
    "end": "2359700"
  },
  {
    "text": "going to xkcd I'm grabbing some JSON I'm awaiting for it and then I call dispatch",
    "start": "2359700",
    "end": "2365300"
  },
  {
    "text": "and dispatch you can see it here that I'm not I'm not doing anything typescript e right here there's no",
    "start": "2365300",
    "end": "2371730"
  },
  {
    "text": "there's no typescript really in any of this I am typing it right here this is a",
    "start": "2371730",
    "end": "2377130"
  },
  {
    "text": "built-in type declaration that's part of redux but it's all still strongly typed",
    "start": "2377130",
    "end": "2383220"
  },
  {
    "text": "so I have my load game I have my dispatch and once the fetch result is",
    "start": "2383220",
    "end": "2388860"
  },
  {
    "text": "done I am dispatching my action so I can mutate my state",
    "start": "2388860",
    "end": "2393950"
  },
  {
    "text": "what does that look like in a component well here I have an example of a game details component I'm doing the same",
    "start": "2393950",
    "end": "2401160"
  },
  {
    "text": "thing where it is dispatch coming from I'm just using connect so connect should",
    "start": "2401160",
    "end": "2406650"
  },
  {
    "text": "look familiar if you're using Redux and react I'm just connecting it by by connecting it I'm getting that dispatch",
    "start": "2406650",
    "end": "2413510"
  },
  {
    "text": "function again and I'm just doing the same thing I'm calling dispatch with fetch game so that's all I need to do",
    "start": "2413510",
    "end": "2420869"
  },
  {
    "text": "there's no extra stuff I have to do with typescript because I've already done the hard work of making sure that my action",
    "start": "2420869",
    "end": "2427230"
  },
  {
    "text": "is strongly typed and redux thunk comes with its own type definition that handles these promises so let me hover",
    "start": "2427230",
    "end": "2434369"
  },
  {
    "text": "over that again you can see here that we have an async action this is coming from redux thunk this is my game state and",
    "start": "2434369",
    "end": "2442079"
  },
  {
    "text": "then it's returning a promise which means what I can do is this is all just strongly typed because it's a promise",
    "start": "2442079",
    "end": "2448190"
  },
  {
    "text": "you then result and then whatever I want to do console.log result and this is all",
    "start": "2448190",
    "end": "2457460"
  },
  {
    "text": "strongly typed so that's pretty cool so",
    "start": "2457460",
    "end": "2466079"
  },
  {
    "text": "like I just showed it's all typed safe with intellisense so again what did that by us we have some utilities now that we",
    "start": "2466079",
    "end": "2473609"
  },
  {
    "text": "can get rid of some of this boilerplate for creating actions dispatch is strongly typed I don't have to do",
    "start": "2473609",
    "end": "2479760"
  },
  {
    "text": "anything extra with typescript to just get it to work because I've done all the heavy lifting and my actions",
    "start": "2479760",
    "end": "2485930"
  },
  {
    "text": "dispatches all just passing the types through so it's all about trying to maximize or minimize the number of like",
    "start": "2485930",
    "end": "2493740"
  },
  {
    "text": "type annotations that I have to have around my code and we also ensure that actions are invoked with the correct",
    "start": "2493740",
    "end": "2499950"
  },
  {
    "text": "arguments I should sort of show this but if I try to pass in something else type",
    "start": "2499950",
    "end": "2506460"
  },
  {
    "text": "so it's going to throw an error right because fetch game is a function that only has a single argument called ID",
    "start": "2506460",
    "end": "2514260"
  },
  {
    "text": "which is a type number so now if people if someone goes ahead if another team member goes ahead and changes this",
    "start": "2514260",
    "end": "2520589"
  },
  {
    "text": "action that's why we have an action creator that's going to type scripts gonna understand that any reference to",
    "start": "2520589",
    "end": "2526290"
  },
  {
    "text": "this function needs to be updated a compiler one thing that's not so great",
    "start": "2526290",
    "end": "2533280"
  },
  {
    "text": "about this is that you have to expose dispatch on props so u s-- may be sort of caught that I wasn't using something",
    "start": "2533280",
    "end": "2539730"
  },
  {
    "text": "like bind action creators or map dispatch to props that's because you've got to do like more boilerplate type",
    "start": "2539730",
    "end": "2547140"
  },
  {
    "text": "script stuff and it's a lot easier just to expose dispatch so you could be evil",
    "start": "2547140",
    "end": "2553320"
  },
  {
    "text": "and you could just do a global dispatch and I wouldn't fault you for it because it would be easier to mock if you're",
    "start": "2553320",
    "end": "2558510"
  },
  {
    "text": "using jest you just do jest up mock store and you just pass in your dispatch mock so that's another option finally",
    "start": "2558510",
    "end": "2567450"
  },
  {
    "text": "the last set of patterns props and state just for regular components this if you",
    "start": "2567450",
    "end": "2575130"
  },
  {
    "text": "have used typescript with react this shouldn't be a surprise this is just the",
    "start": "2575130",
    "end": "2580910"
  },
  {
    "text": "most basic stuff that you could do with typescript and react so remember that I",
    "start": "2580910",
    "end": "2585960"
  },
  {
    "text": "mentioned before that we have these types from react pure component so when",
    "start": "2585960",
    "end": "2591780"
  },
  {
    "text": "you do regular JavaScript without typescript you're still going to do this you're gonna do classic stands react up",
    "start": "2591780",
    "end": "2597450"
  },
  {
    "text": "pure component typescript adds these extra definitions these generic arguments so the first one like I said",
    "start": "2597450",
    "end": "2604590"
  },
  {
    "text": "before is props the second one estate these are just two interfaces that make sure that our stuff is strongly typed by",
    "start": "2604590",
    "end": "2611610"
  },
  {
    "text": "doing this we get the type checking for JSX we get the type checking inside of our state all cool stateless is even",
    "start": "2611610",
    "end": "2620850"
  },
  {
    "text": "simpler you got your function it takes props your props are these that's it there's nothing extra that you have to",
    "start": "2620850",
    "end": "2627240"
  },
  {
    "text": "do for that where it gets interesting is and more complex patterns this is the",
    "start": "2627240",
    "end": "2632370"
  },
  {
    "text": "render props pattern let's go into this the render props pattern if you haven't",
    "start": "2632370",
    "end": "2638520"
  },
  {
    "text": "used it before what it does is we define a prop on our component and the",
    "start": "2638520",
    "end": "2644820"
  },
  {
    "text": "convention typically is to use children children is a built in property that gets sent to all react components that's",
    "start": "2644820",
    "end": "2652440"
  },
  {
    "text": "what's inside the tags the JSX tags whatever is inside inside there gets assigned it to children and what we're",
    "start": "2652440",
    "end": "2659700"
  },
  {
    "text": "doing is we're just typing that explicitly as a function so the render prop pattern what you do here",
    "start": "2659700",
    "end": "2667080"
  },
  {
    "text": "is you take your JSX tag and then inside of it you use the JavaScript escape",
    "start": "2667080",
    "end": "2673800"
  },
  {
    "text": "syntax the curly braces and we say props dot children I'm going to call you I'm",
    "start": "2673800",
    "end": "2678840"
  },
  {
    "text": "gonna invoke you because you're a function and I can just pass you some new props because presumably this",
    "start": "2678840",
    "end": "2684690"
  },
  {
    "text": "component is a little bit more involved in just this this is my game image component right there game image",
    "start": "2684690",
    "end": "2691800"
  },
  {
    "text": "component it might take some you know different URLs for box art for a game",
    "start": "2691800",
    "end": "2697380"
  },
  {
    "text": "and depending on screen resolution my return you know a different sized image what I want to do is I want to",
    "start": "2697380",
    "end": "2703380"
  },
  {
    "text": "encapsulate that and anything inside of it just gets passed with the raw name the image URL is so we can just do alt",
    "start": "2703380",
    "end": "2710880"
  },
  {
    "text": "source title so then we can just render our image so that's an example of the",
    "start": "2710880",
    "end": "2716070"
  },
  {
    "text": "render prop pattern but what I don't want to do is I don't want to just do this all over the place so it'd be kind",
    "start": "2716070",
    "end": "2721650"
  },
  {
    "text": "of nice if I could clean that up a little and we can all we all we really have to do is just pull it into type",
    "start": "2721650",
    "end": "2728370"
  },
  {
    "text": "alias so type alias is like I said are awesome for just shortening stuff that you're going to be typing all the time",
    "start": "2728370",
    "end": "2734250"
  },
  {
    "text": "so rather than having to put this function type definition all over the",
    "start": "2734250",
    "end": "2739860"
  },
  {
    "text": "place now I've just created a render prop generic type that just takes whatever props you want to pass down so",
    "start": "2739860",
    "end": "2746580"
  },
  {
    "text": "render props are what's going to be passed to the children so that's a nice pattern to do for that what about",
    "start": "2746580",
    "end": "2754200"
  },
  {
    "text": "connecting your components to redux there's a little bit more involved and this is something this is an approach",
    "start": "2754200",
    "end": "2761190"
  },
  {
    "text": "that i found works pretty well and it tries to minimize the amount of like boilerplate type annotations that you",
    "start": "2761190",
    "end": "2768360"
  },
  {
    "text": "got to do remember that like taking typescript into your application is not",
    "start": "2768360",
    "end": "2775110"
  },
  {
    "text": "like a small chore and it's also something that your whole team has to agree with as you can probably see it's",
    "start": "2775110",
    "end": "2781740"
  },
  {
    "text": "not gonna be the simplest thing in the world but you get a lot of really great benefits especially if your teams can scale so when I'm saying like trying to",
    "start": "2781740",
    "end": "2789750"
  },
  {
    "text": "minimize the amount of type annotations I just want to take advantage of typescript inference as much as possible",
    "start": "2789750",
    "end": "2795089"
  },
  {
    "text": "so that my team doesn't have to update spend time updating type annotations all of it all over the place so in this case",
    "start": "2795089",
    "end": "2802589"
  },
  {
    "text": "we still have our props I've just renamed it to own props own props if you",
    "start": "2802589",
    "end": "2809249"
  },
  {
    "text": "haven't heard the term before is really just the properties on my component that",
    "start": "2809249",
    "end": "2814380"
  },
  {
    "text": "do not come from Redux State props are what I'm calling props that I get from",
    "start": "2814380",
    "end": "2819869"
  },
  {
    "text": "redux where are those coming from those are coming from Mapp state two props this is",
    "start": "2819869",
    "end": "2825569"
  },
  {
    "text": "something you've probably seen in just regular normal vanilla redux this is the first argument that you can pass to",
    "start": "2825569",
    "end": "2830819"
  },
  {
    "text": "connect map state to props takes in your state optionally it can take in some own",
    "start": "2830819",
    "end": "2836130"
  },
  {
    "text": "props and then it returns state props so all I'm doing here I'm just hard-coding",
    "start": "2836130",
    "end": "2842729"
  },
  {
    "text": "this I'm returning my image name and selected image name and selected is part of my state props definition but I'm",
    "start": "2842729",
    "end": "2849900"
  },
  {
    "text": "also passing these own props that are coming so this component specifically is",
    "start": "2849900",
    "end": "2855420"
  },
  {
    "text": "the game list item and this is something I actually do in my app because people",
    "start": "2855420",
    "end": "2860519"
  },
  {
    "text": "can reorder games like that's not coming from redux because if you're in the middle of a drag operation it's not",
    "start": "2860519",
    "end": "2866579"
  },
  {
    "text": "updating state we need to pass that in as an own prop so how can we tell",
    "start": "2866579",
    "end": "2872249"
  },
  {
    "text": "typescript that we expect all of this stuff when we finally get down to game",
    "start": "2872249",
    "end": "2877859"
  },
  {
    "text": "list item how can we tell typescript that all these properties should be available to us so again I'm using the",
    "start": "2877859",
    "end": "2885119"
  },
  {
    "text": "type alias and you can maybe see where this is going and creating a type alias",
    "start": "2885119",
    "end": "2890640"
  },
  {
    "text": "of all these three things I am using something called a type intersection so",
    "start": "2890640",
    "end": "2895799"
  },
  {
    "text": "this is different than the type Union a union is or so they can be this type or this type and does what it says it",
    "start": "2895799",
    "end": "2903299"
  },
  {
    "text": "combines the definitions of multiple types together and it does it from left to right so I'm saying take own props",
    "start": "2903299",
    "end": "2910200"
  },
  {
    "text": "add stuff from state props also add a dispatch prop and dispatch prop is",
    "start": "2910200",
    "end": "2916170"
  },
  {
    "text": "coming from there we react Redux type definitions but again I don't want to",
    "start": "2916170",
    "end": "2922440"
  },
  {
    "text": "type this all the time so what I'm going to do is I'm just going to like take",
    "start": "2922440",
    "end": "2927479"
  },
  {
    "text": "this dispatch and separate redux state props and I'm gonna pull it into a utility and we're",
    "start": "2927479",
    "end": "2932960"
  },
  {
    "text": "going to call it sr c sr c stands for stateless react component that's what we",
    "start": "2932960",
    "end": "2941000"
  },
  {
    "text": "want to call it and in regular react you can do react dot SFC i don't know if you",
    "start": "2941000",
    "end": "2949010"
  },
  {
    "text": "use that before sorry let's actually get some type check in react SFC react at the SFC is just a type",
    "start": "2949010",
    "end": "2958280"
  },
  {
    "text": "alias for react out stateless component so you don't have to type in stateless component all the time so in our case we",
    "start": "2958280",
    "end": "2964580"
  },
  {
    "text": "don't want to type in you know stateless Redux component all the time where you can just type in SRC what SRC does is it",
    "start": "2964580",
    "end": "2973700"
  },
  {
    "text": "encapsulate that little type alias that i had before so we are taking our state props in our own props and guess what",
    "start": "2973700",
    "end": "2981110"
  },
  {
    "text": "because we can set defaults we can also just make it optional maybe it doesn't take own props maybe there's just props",
    "start": "2981110",
    "end": "2987500"
  },
  {
    "text": "from redux in this case we do have some own props so I'm gonna head it back in okay that's",
    "start": "2987500",
    "end": "2993440"
  },
  {
    "text": "cool what does that look like man there's a lot of stuff on here on the first one we have something called Redux",
    "start": "2993440",
    "end": "3000190"
  },
  {
    "text": "props Redux props are just our regular type alias that you saw before this guy",
    "start": "3000190",
    "end": "3007470"
  },
  {
    "text": "own props state props required blah blah blah what we're doing here is we're just",
    "start": "3007470",
    "end": "3012850"
  },
  {
    "text": "being able to set a default and then we're just doing that same type intersection so this T state props",
    "start": "3012850",
    "end": "3019960"
  },
  {
    "text": "generic parameters you can just give them a name if you want to this could just be T foo and then we have we have a",
    "start": "3019960",
    "end": "3027310"
  },
  {
    "text": "type error but again with the power of type script I can just call this T foo renames it so we have t foods or which",
    "start": "3027310",
    "end": "3035590"
  },
  {
    "text": "are our state props own props cetera so",
    "start": "3035590",
    "end": "3040960"
  },
  {
    "text": "that's just that's just a shorter way to do that and then we encapsulate the",
    "start": "3040960",
    "end": "3047500"
  },
  {
    "text": "react out stateless component and you're gonna make fun of me because what I should have done is I should have done",
    "start": "3047500",
    "end": "3052630"
  },
  {
    "text": "SFC right so now we have stateless functional component and the props that",
    "start": "3052630",
    "end": "3057910"
  },
  {
    "text": "we're going to pass it are our redux props and what cool thing about that is that we can then re is that also for es6 classes so this is",
    "start": "3057910",
    "end": "3065500"
  },
  {
    "text": "extending reactor component that's just the default react component and again the first generic parameter is my props",
    "start": "3065500",
    "end": "3072609"
  },
  {
    "text": "so it's a type redux props and then t-state and you can see that i'm just",
    "start": "3072609",
    "end": "3078369"
  },
  {
    "text": "setting these all to default objects so that at the bare minimum I can just say",
    "start": "3078369",
    "end": "3083859"
  },
  {
    "text": "extends Redux component without passing in any extra generic parameters",
    "start": "3083859",
    "end": "3090450"
  },
  {
    "text": "fantastic so what did that bias we have",
    "start": "3094619",
    "end": "3100359"
  },
  {
    "text": "a way now to model splitting that own props and state props so now they can be",
    "start": "3100359",
    "end": "3107770"
  },
  {
    "text": "separate interfaces I've shown you how to substitute those inside of your own type utilities we can reduce a lot of",
    "start": "3107770",
    "end": "3115599"
  },
  {
    "text": "like excessive type intersections to get that dispatch on to our props we've",
    "start": "3115599",
    "end": "3122260"
  },
  {
    "text": "created some reusable type utilities now we can use throughout the codebase so other team members can take advantage of",
    "start": "3122260",
    "end": "3127720"
  },
  {
    "text": "them I also showed you how to do render prop pattern typing so that you have a",
    "start": "3127720",
    "end": "3133000"
  },
  {
    "text": "consistent way to describe render props and you can go down the rabbit hole for that one if you have different types of",
    "start": "3133000",
    "end": "3138849"
  },
  {
    "text": "render props that you want to do so altogether now if you have been",
    "start": "3138849",
    "end": "3144520"
  },
  {
    "text": "following along you may have seen that there is a github repository with all these patterns so all this code that I'm",
    "start": "3144520",
    "end": "3151300"
  },
  {
    "text": "showing you right now is all available for you to play with peruse submit PRS",
    "start": "3151300",
    "end": "3156400"
  },
  {
    "text": "tell me I'm wrong that kind of thing fantastic I just want to say before I",
    "start": "3156400",
    "end": "3162790"
  },
  {
    "text": "end that there's always room for improvement this I've given this presentation this is a third time and I",
    "start": "3162790",
    "end": "3168730"
  },
  {
    "text": "totally revamped it for NDC because there were so many new patterns that I've been learning and there's always",
    "start": "3168730",
    "end": "3174040"
  },
  {
    "text": "room for improvement and I'm sure some of you in this room who have used touch scripting react might have your own",
    "start": "3174040",
    "end": "3179170"
  },
  {
    "text": "patterns and I want to know about them so open up an issue on the repo or send me an email or tweet at me",
    "start": "3179170",
    "end": "3185680"
  },
  {
    "text": "send me your some of your patterns I'm super interested I'm still learning react I'm fairly new myself so I hope",
    "start": "3185680",
    "end": "3193980"
  },
  {
    "text": "if you have been using reactor you knew to react and you want to try to use typescript I've given you some patterns",
    "start": "3193980",
    "end": "3200010"
  },
  {
    "text": "and practices to help you create a little bit more maintainable reusable code so with that thanks for listening",
    "start": "3200010",
    "end": "3207650"
  },
  {
    "text": "we have some time for questions if there are any before I finally end yes sir yes",
    "start": "3207650",
    "end": "3220940"
  },
  {
    "text": "there it is any other questions yeah",
    "start": "3220940",
    "end": "3234020"
  },
  {
    "text": "[Music]",
    "start": "3234080",
    "end": "3237150"
  },
  {
    "text": "sure so your question was about the bottom-up state and how is that maintained between like if I'm using",
    "start": "3241579",
    "end": "3249359"
  },
  {
    "text": "react router or something like that so if we go to the very root of my state so",
    "start": "3249359",
    "end": "3258319"
  },
  {
    "text": "all we're doing we're still doing all the normal stuff that you would do with Redux where we're just creating our",
    "start": "3258319",
    "end": "3264329"
  },
  {
    "text": "default state so that's going to be our full object that describes our application and this is just using",
    "start": "3264329",
    "end": "3271170"
  },
  {
    "text": "imports to compose all of our sub screens together so at the end of the",
    "start": "3271170",
    "end": "3276540"
  },
  {
    "text": "day you're still going to have final state in fact we have a little bit of",
    "start": "3276540",
    "end": "3282000"
  },
  {
    "text": "time what I'm gonna do we have like a minute or two I'm just gonna start this application there shouldn't be any",
    "start": "3282000",
    "end": "3288990"
  },
  {
    "text": "errors and we're going to have a little",
    "start": "3288990",
    "end": "3294410"
  },
  {
    "text": "that's fine let me just undo these so I'm using",
    "start": "3294410",
    "end": "3302549"
  },
  {
    "text": "create react app for the sample I don't have the dev tools on here I don't have",
    "start": "3302549",
    "end": "3315960"
  },
  {
    "text": "the dev tools open but what you would see is you would just see the whole entire application state composed as one",
    "start": "3315960",
    "end": "3322230"
  },
  {
    "text": "so you could use this if you want to with like code splitting for web pack so maybe each of your screens are",
    "start": "3322230",
    "end": "3328950"
  },
  {
    "text": "probably going to be routes right and so then when you you can do dynamic imports to compose your state together and so",
    "start": "3328950",
    "end": "3337140"
  },
  {
    "text": "you could still do type checking and all that if you do dynamic imports does that",
    "start": "3337140",
    "end": "3343200"
  },
  {
    "text": "help cool any other questions otherwise let's get back to the final",
    "start": "3343200",
    "end": "3352170"
  },
  {
    "text": "slide thanks for listening you can follow me on Twitter or find me online at hamurana kiss comm if all this",
    "start": "3352170",
    "end": "3358650"
  },
  {
    "text": "typescript stuff kind of went over your head I have an eight hour course that is gonna take you from zero to hero so in",
    "start": "3358650",
    "end": "3365070"
  },
  {
    "text": "that in that course we actually migrated three different JavaScript code bases to",
    "start": "3365070",
    "end": "3370080"
  },
  {
    "text": "typescript and I go through all the stuff that I just talked about in more detail if you're interested there is a",
    "start": "3370080",
    "end": "3375990"
  },
  {
    "text": "Midwest jazz version of this talk that goes into some more performance type stuff but that was so much that was so",
    "start": "3375990",
    "end": "3382170"
  },
  {
    "text": "much content that it just needs to be a whole separate talk but with that thank you all so much",
    "start": "3382170",
    "end": "3387180"
  },
  {
    "text": "have it have a great rest of your conference [Applause]",
    "start": "3387180",
    "end": "3396400"
  }
]