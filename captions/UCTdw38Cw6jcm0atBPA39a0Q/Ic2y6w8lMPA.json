[
  {
    "start": "0",
    "end": "190000"
  },
  {
    "text": "um it's my first time in Norway so I'm having a fun time and I'm gonna talk to",
    "start": "1970",
    "end": "7460"
  },
  {
    "text": "you about simplicity which is an insanely overloaded word right everybody says your code should be simple everyone",
    "start": "7460",
    "end": "13940"
  },
  {
    "text": "has a different idea of what they mean by simple and I want to clarify what I mean by simple and especially what I",
    "start": "13940",
    "end": "20359"
  },
  {
    "text": "don't mean by simple so I teach C++ in a lot of different contexts and I teach little pieces of",
    "start": "20359",
    "end": "26179"
  },
  {
    "text": "C++ like one on one to someone that doesn't know something and I'm like let me show you and when you're doing that",
    "start": "26179",
    "end": "32300"
  },
  {
    "text": "kind of teaching you very deliberately use sort of a beginner simplicity right",
    "start": "32300",
    "end": "38240"
  },
  {
    "text": "so we say I'm not going to include any error checking or any handling error handling in this example I'm I'm gonna",
    "start": "38240",
    "end": "44840"
  },
  {
    "text": "show you how to I don't know figure out if numbers are prime or whatever the example is but I'm gonna just assume",
    "start": "44840",
    "end": "51620"
  },
  {
    "text": "that I got good input and especially that I didn't get malicious input right because I'm there to teach somebody like",
    "start": "51620",
    "end": "57800"
  },
  {
    "text": "what the modulo operator is and I don't really have a lot of time for like sometimes there are bad people on the",
    "start": "57800",
    "end": "63230"
  },
  {
    "text": "internet who want to break your computer if there's a two ways to do something",
    "start": "63230",
    "end": "68659"
  },
  {
    "text": "like here's what you do if the target element is after the source element in the collection bla bla it won't show the",
    "start": "68659",
    "end": "75560"
  },
  {
    "text": "other direction those are those are kinds of keeping it simple for beginners that we all do when we're teaching and",
    "start": "75560",
    "end": "81880"
  },
  {
    "text": "we do this for a very good reason we're trying to focus on you know what's a vector or what's the modulo operator or",
    "start": "81880",
    "end": "88880"
  },
  {
    "text": "what is our ai ai or whatever we're trying to teach and that person who's trying to learn is only trying to learn",
    "start": "88880",
    "end": "94700"
  },
  {
    "text": "one thing so they don't need their head filled up when you know the realities of the Canadian retail sales tax system or",
    "start": "94700",
    "end": "101170"
  },
  {
    "text": "the fact that there are bad people on the internet and want to hurt your computer right we're trying to lower",
    "start": "101170",
    "end": "106490"
  },
  {
    "text": "their cognitive burden and we also have a distinct case of the medium being the",
    "start": "106490",
    "end": "112070"
  },
  {
    "text": "message which is that we are also trying to fit our slide on one screen okay so I",
    "start": "112070",
    "end": "117170"
  },
  {
    "text": "can't show you forward and backwards because then the font would be too small and that's a real thing and probably",
    "start": "117170",
    "end": "124520"
  },
  {
    "text": "most importantly when we make up examples of like here's how to do something with a vector we have zero",
    "start": "124520",
    "end": "129979"
  },
  {
    "text": "context it's not a real problem we don't actually have a bunch of people who need",
    "start": "129979",
    "end": "135260"
  },
  {
    "text": "their paycheck or whatever we just have a vector so we give it the brilliant name of V because names actually come from context and we",
    "start": "135260",
    "end": "141440"
  },
  {
    "text": "don't have any because it's just a sample okay that's how we start at the",
    "start": "141440",
    "end": "147890"
  },
  {
    "text": "very very beginning as beginners but real life is not like that real life is complicated in real life you have to",
    "start": "147890",
    "end": "155240"
  },
  {
    "text": "check your input both that it's legitimate and that it's non malicious you have to handle errors you have to",
    "start": "155240",
    "end": "161560"
  },
  {
    "text": "live in a world where people want to hurt your computer and you have to do",
    "start": "161560",
    "end": "167300"
  },
  {
    "text": "both directions and this makes the code get bigger people start adding ifs",
    "start": "167300",
    "end": "172670"
  },
  {
    "text": "beforehand to check this that in the other and they start adding loops and they start adding this and they start adding that and that naturally means",
    "start": "172670",
    "end": "180440"
  },
  {
    "text": "that that code is more complicated than the beginner Plato version that you started with I don't have a problem with",
    "start": "180440",
    "end": "188000"
  },
  {
    "text": "that but what I've noticed is what happens to us as we go through our",
    "start": "188000",
    "end": "195890"
  },
  {
    "start": "190000",
    "end": "190000"
  },
  {
    "text": "growth as programmers we say while simple is for beginners real life is",
    "start": "195890",
    "end": "201890"
  },
  {
    "text": "complicated so sure this code is you",
    "start": "201890",
    "end": "206930"
  },
  {
    "text": "know hard to write so it's hard to read and we get kind of proud of producing a",
    "start": "206930",
    "end": "213709"
  },
  {
    "text": "thing like this I don't know how many months of work this was for somebody to carve out of wood but you know it's in a",
    "start": "213709",
    "end": "218989"
  },
  {
    "text": "glass case and one of the reasons is in a glass case right is it super fragile right you don't want to want to break",
    "start": "218989",
    "end": "224450"
  },
  {
    "text": "off one of those little figures that someone took so long carving if it was easy we say anyone could do it",
    "start": "224450",
    "end": "230209"
  },
  {
    "text": "I want to advocate today for a kind of",
    "start": "230209",
    "end": "236030"
  },
  {
    "start": "233000",
    "end": "233000"
  },
  {
    "text": "simplicity that has nothing to do with leaving out vital error checking or only",
    "start": "236030",
    "end": "241190"
  },
  {
    "text": "handling forward or whatever I'm defining simple code as being code that is expressive when you read it you know",
    "start": "241190",
    "end": "247940"
  },
  {
    "text": "what it does it's readable you read it you understand it and it doesn't",
    "start": "247940",
    "end": "253790"
  },
  {
    "text": "surprise you I mean we've all read code where you're like oh right fun is that",
    "start": "253790",
    "end": "261919"
  },
  {
    "text": "ol moment is it's actually more fun not to need it it's more fun to just get it from the very beginning",
    "start": "261919",
    "end": "268620"
  },
  {
    "text": "code that explains itself has no opaque aspect at all that's what I'm kind of",
    "start": "268620",
    "end": "273720"
  },
  {
    "text": "going for and I believe that code can be reassuring right it can tell you a story",
    "start": "273720",
    "end": "279380"
  },
  {
    "text": "first we open this then we initialize that there's a loop in which we process everything we clean up and those are the",
    "start": "279380",
    "end": "286350"
  },
  {
    "text": "words on the screen right you see words like open and clean up and I don't know",
    "start": "286350",
    "end": "291960"
  },
  {
    "text": "allocate or whatever it is you're trying to do that code can tell you a story and",
    "start": "291960",
    "end": "297300"
  },
  {
    "text": "lead you on a story through what it is that it does so this isn't about simpler means that it's shorter sometimes",
    "start": "297300",
    "end": "303990"
  },
  {
    "text": "simpler code is longer the citizen about simpler means that it's made out of smaller things I mean we could all just",
    "start": "303990",
    "end": "309449"
  },
  {
    "text": "write in ones and zeros if we wanted to make it out of smaller things right you know arranged for is more expressive",
    "start": "309449",
    "end": "314970"
  },
  {
    "text": "than a random old-school for loop specifically because it says I'm",
    "start": "314970",
    "end": "320729"
  },
  {
    "text": "touching every element in the collection exactly once doesn't take long to read an ordinary loop to know that but",
    "start": "320729",
    "end": "326550"
  },
  {
    "text": "doesn't take any time to read arranged for to know that because that's what arranged for does for a living when you",
    "start": "326550",
    "end": "332039"
  },
  {
    "text": "call something from the algorithm header some standard library function like sort that's simpler than a raw loop because",
    "start": "332039",
    "end": "338250"
  },
  {
    "text": "the letters s o R T are a super powerful clue as to what the function is going to do compared to reading the loop and guy",
    "start": "338250",
    "end": "344940"
  },
  {
    "text": "as if it's less it moves it earlier oh I get it it's sorting in ten simple lines",
    "start": "344940",
    "end": "351210"
  },
  {
    "text": "anyone can follow simpler than one line that relies on a trick that people may",
    "start": "351210",
    "end": "357030"
  },
  {
    "text": "or may not know I want to convince you",
    "start": "357030",
    "end": "362039"
  },
  {
    "start": "359000",
    "end": "359000"
  },
  {
    "text": "that simpler is better but in addition to defining simpler you've got a define better it could mean that you can",
    "start": "362039",
    "end": "371310"
  },
  {
    "text": "produce more lines of code per day week month here it could mean that there are less bugs in it that it's higher",
    "start": "371310",
    "end": "378180"
  },
  {
    "text": "performant that it's more readable or that it's more modifiable which are different or and I think a lot of people",
    "start": "378180",
    "end": "385440"
  },
  {
    "text": "leave this last bullet out that it's more fun hands up if you think it's ok",
    "start": "385440",
    "end": "391650"
  },
  {
    "text": "for work to be fun just check it because I think work should be fun I don't like doing things",
    "start": "391650",
    "end": "397389"
  },
  {
    "text": "I don't enjoy and some of the code I have to read I don't enjoy and some of the code when",
    "start": "397389",
    "end": "403449"
  },
  {
    "text": "I read it over again I'm like man this was good I like this you know and why not we should write that so let's start",
    "start": "403449",
    "end": "411400"
  },
  {
    "start": "409000",
    "end": "409000"
  },
  {
    "text": "with the bad news I don't think it's going to be faster to write simpler code this is a much simpler piece of wood",
    "start": "411400",
    "end": "417999"
  },
  {
    "text": "carving but I'm sure there was still an awful lot of hours went into it in the designing and in the executing write",
    "start": "417999",
    "end": "424379"
  },
  {
    "text": "polishing your code to be complete and yet obvious is more work than slamming",
    "start": "424379",
    "end": "431740"
  },
  {
    "text": "something together that probably has enough ifs in it right there's this quote I'm sorry that this is so long but",
    "start": "431740",
    "end": "439749"
  },
  {
    "text": "I didn't have time to write you a short one when I was prepping the talk I just see who wrote this who should I cite",
    "start": "439749",
    "end": "447009"
  },
  {
    "text": "well Americans mostly feel it was Mark Twain and Europeans seem to feel it was",
    "start": "447009",
    "end": "452860"
  },
  {
    "text": "either Blaise Pascal or Samuel Johnson so as a Canadian I think I should say it was Margaret Atwood I think that's my my",
    "start": "452860",
    "end": "458919"
  },
  {
    "text": "rule whoever it was they didn't have time to write a shorter letter and that's what I want you to do is to",
    "start": "458919",
    "end": "464289"
  },
  {
    "text": "develop these new habits to write that shorter letter so you have to look at",
    "start": "464289",
    "end": "470139"
  },
  {
    "text": "code differently and you have to relook at code so I wrote it and it works but",
    "start": "470139",
    "end": "476680"
  },
  {
    "text": "is it what I want to leave am I done or is there something I can do and",
    "start": "476680",
    "end": "481899"
  },
  {
    "text": "something I can refactor something I can rename something I can reorganize so that this code tells a story as well as",
    "start": "481899",
    "end": "487719"
  },
  {
    "text": "just plain working the good news is yes",
    "start": "487719",
    "end": "493809"
  },
  {
    "start": "490000",
    "end": "490000"
  },
  {
    "text": "I believe simpler code is more correct I get brought in when people have code",
    "start": "493809",
    "end": "500740"
  },
  {
    "text": "that they have painstakingly acquired over decades and they no longer really",
    "start": "500740",
    "end": "506770"
  },
  {
    "text": "own it because they cannot change it because the last person who understood it left",
    "start": "506770",
    "end": "513748"
  },
  {
    "text": "and usually they tell me their number one pain point is they have something",
    "start": "514260",
    "end": "519479"
  },
  {
    "text": "very specific they need to do to this code and they need me to help them do it but oh yeah by the way we do have a lot",
    "start": "519480",
    "end": "526050"
  },
  {
    "text": "of intermittent bugs that none of us understand when I make that code simpler",
    "start": "526050",
    "end": "531980"
  },
  {
    "text": "magically the bugs go away our a III",
    "start": "531980",
    "end": "537560"
  },
  {
    "text": "that is simpler I I came into something which had printed it out and I don't",
    "start": "537560",
    "end": "543960"
  },
  {
    "text": "normally print out code but it was seven pages for a loop was the main engine loop of the app and there were oh I have",
    "start": "543960",
    "end": "553500"
  },
  {
    "text": "miraculously forgotten exactly how many catch statements there were that's that's good that means I'm growing uh",
    "start": "553500",
    "end": "559080"
  },
  {
    "text": "let's say seven okay it was more than three less than 100 and and these catch",
    "start": "559080",
    "end": "565320"
  },
  {
    "text": "statements had go twos in them and there were several different labels that were gone too and it was a series of wiles that were",
    "start": "565320",
    "end": "571770"
  },
  {
    "text": "all wild true the only way to get out was through an exception being thrown and then depending on what kind of",
    "start": "571770",
    "end": "578190"
  },
  {
    "text": "exception it was you either went to go to retry from the catch block or go to exit from the catch block and all of the",
    "start": "578190",
    "end": "585090"
  },
  {
    "text": "catch blocks consisted of if some boolean or another has been set and then it would do a bunch of cleaning up so it",
    "start": "585090",
    "end": "590640"
  },
  {
    "text": "was like if I got the mutex clean up the mutex if I opened a file close the file if I this if I that and I taught these",
    "start": "590640",
    "end": "597570"
  },
  {
    "text": "people are AII and they moved all their clean up into destructors and the catch",
    "start": "597570",
    "end": "604080"
  },
  {
    "text": "blocks all went away they didn't need them so that was that was miracle number one miracle number two was that the what",
    "start": "604080",
    "end": "609870"
  },
  {
    "text": "else statements actually got to have proper conditions in them like while user has not pressed cancel right and",
    "start": "609870",
    "end": "616950"
  },
  {
    "text": "while still connected but the beautiful miracle was when they told me later",
    "start": "616950",
    "end": "622590"
  },
  {
    "text": "about the intermittent bug that was now gone because sometimes under certain",
    "start": "622590",
    "end": "628320"
  },
  {
    "text": "combinations something didn't get cleaned up and like the file got left open or whatever because they were hand rolling all their clean up and they then",
    "start": "628320",
    "end": "634920"
  },
  {
    "text": "they messed up in one of the catch blocks you should also close the file and they didn't so you got code that was",
    "start": "634920",
    "end": "641820"
  },
  {
    "text": "readable understandable maintainable and more correct and that happens to me every time I touch",
    "start": "641820",
    "end": "647730"
  },
  {
    "text": "basse okay because doing it all yourself by hand in the complicated way gives you places to forget relying on structural",
    "start": "647730",
    "end": "655859"
  },
  {
    "text": "support like destructors going off you cannot forget therefore it will be more",
    "start": "655859",
    "end": "661649"
  },
  {
    "text": "correct so it's it's not like you have to trade off like well sure I'd like to be able to read and understand this code",
    "start": "661649",
    "end": "667079"
  },
  {
    "text": "but it's kind of important that it works no no they go together when you can read and understand that it's also more",
    "start": "667079",
    "end": "672869"
  },
  {
    "text": "likely to completely work the other thing that happens over decades is that",
    "start": "672869",
    "end": "679529"
  },
  {
    "text": "code gets inconsistent there's 50 places you're supposed to make a change and you",
    "start": "679529",
    "end": "685290"
  },
  {
    "text": "make it in 48 of them that works for any two values of n there could be two places you're supposed to make a change",
    "start": "685290",
    "end": "690929"
  },
  {
    "text": "and you make it in one of them we're just humans and we forget things so if you have one function that takes three",
    "start": "690929",
    "end": "698879"
  },
  {
    "text": "parameters but the third parameter has a default value that's more consistent than if you have two functions one that",
    "start": "698879",
    "end": "704999"
  },
  {
    "text": "takes two and one that takes three because then in the future you got to remember to change both functions if you",
    "start": "704999",
    "end": "711119"
  },
  {
    "text": "have a function at all you are ahead over the copy paste edit cycle of the",
    "start": "711119",
    "end": "716609"
  },
  {
    "text": "world I was doing code review on something and I said to someone this is a really strange variable name this",
    "start": "716609",
    "end": "724439"
  },
  {
    "text": "offense sanitize it you're calling it candidate name but it's about an employee not a candidate and they said",
    "start": "724439",
    "end": "730199"
  },
  {
    "text": "oh yeah that I don't want to change it though because I copied it from the candidate code and I understand it with that name so I don't want to change it",
    "start": "730199",
    "end": "736889"
  },
  {
    "text": "to employee here because then I won't remember what it does okay so maybe",
    "start": "736889",
    "end": "744689"
  },
  {
    "text": "writing a function right and being able to pass different parameters into that function is better than copying and",
    "start": "744689",
    "end": "750089"
  },
  {
    "text": "pasting the 50 lines of code and changing some of the hard kind the 50 lines of code and again in the future",
    "start": "750089",
    "end": "755129"
  },
  {
    "text": "you only have to change one place so it's simpler if you have a number of",
    "start": "755129",
    "end": "760679"
  },
  {
    "text": "functions that are very similar maybe take a big breath and write a template again now in the future you only have to",
    "start": "760679",
    "end": "767069"
  },
  {
    "text": "change the template rather than successfully changing nine of the ten functions",
    "start": "767069",
    "end": "772668"
  },
  {
    "text": "when I move complexity into abstractions sometimes that's all I'm doing is moving",
    "start": "774390",
    "end": "780070"
  },
  {
    "text": "it okay so if you call sort instead of writing your own loop to sort you",
    "start": "780070",
    "end": "785620"
  },
  {
    "text": "haven't made sort faster unless your own loop was like really bad like you did a bubble sort or something you've just",
    "start": "785620",
    "end": "792100"
  },
  {
    "text": "moved it and that has its own value but sometimes it disappears and I find that",
    "start": "792100",
    "end": "798700"
  },
  {
    "text": "especially true of clean up the hole do I have a valid object that I now need to",
    "start": "798700",
    "end": "803740"
  },
  {
    "text": "clean up problem becomes the compilers problem not yours and it goes away it's",
    "start": "803740",
    "end": "809800"
  },
  {
    "text": "completely invisible so very often as you make your code simpler and more obvious you actually have a net gain",
    "start": "809800",
    "end": "817090"
  },
  {
    "text": "forever it's not just that you moved it it actually went the complexity went away another thing I advocated making",
    "start": "817090",
    "end": "825490"
  },
  {
    "text": "code simpler is to call other people's code this is a challenge for most of us because we don't like other people's",
    "start": "825490",
    "end": "831820"
  },
  {
    "text": "code because it's not our code I get that really do but if you can bring",
    "start": "831820",
    "end": "837340"
  },
  {
    "text": "yourself to use other people's code not only has it been tested but they have thought of all the weirdo edge cases",
    "start": "837340",
    "end": "843040"
  },
  {
    "text": "about people copying things to themselves and all of that stuff that we forget to do or that was left out for",
    "start": "843040",
    "end": "849190"
  },
  {
    "text": "simplicity back when we were in our Plato phase and nobody told us you know I see an awful lot of operator equals",
    "start": "849190",
    "end": "855520"
  },
  {
    "text": "that aren't checking for self assignments and gleefully distract themselves and then have nothing to reconstruct themselves from that kind of",
    "start": "855520",
    "end": "861160"
  },
  {
    "text": "thing in that same spirit whenever you can use a library function someone's",
    "start": "861160",
    "end": "866230"
  },
  {
    "text": "thought of that and you don't have to think about will your code be faster I",
    "start": "866230",
    "end": "874140"
  },
  {
    "start": "870000",
    "end": "870000"
  },
  {
    "text": "wish I could say yes but probably not I take a look at these two ranged force",
    "start": "874140",
    "end": "880620"
  },
  {
    "text": "assuming that people is a collection of person objects and then a person object is of a reasonable size the first one",
    "start": "880620",
    "end": "888070"
  },
  {
    "text": "right is going to be making a new temporary P for each time through which",
    "start": "888070",
    "end": "894370"
  },
  {
    "text": "the reference we're going to spare a copy you can't get faster code from the",
    "start": "894370",
    "end": "901900"
  },
  {
    "text": "faster code ferry by wishing right you have to know something about the",
    "start": "901900",
    "end": "906910"
  },
  {
    "text": "language now it's not always as simple as I want to avoid a copy it may actually be as simple as I go I'd like to use copy",
    "start": "906910",
    "end": "913060"
  },
  {
    "text": "elision here and count on the return value optimization because you know nothing at all is even faster than a",
    "start": "913060",
    "end": "918910"
  },
  {
    "text": "move but you have to know your language to get absolutely peak performance the",
    "start": "918910",
    "end": "924280"
  },
  {
    "text": "good news is you don't always have to live like that okay don't choose simplicity over",
    "start": "924280",
    "end": "931450"
  },
  {
    "text": "performance if the performance hit is real and exists but that's the if that's",
    "start": "931450",
    "end": "938680"
  },
  {
    "text": "the big if Ehlers and optimizers are better than",
    "start": "938680",
    "end": "944320"
  },
  {
    "text": "you and if you don't believe me you can use compiler Explorer and see for yourself",
    "start": "944320",
    "end": "949750"
  },
  {
    "text": "right optimizers do some very very cool things and Matt go bolt had a talk at",
    "start": "949750",
    "end": "955930"
  },
  {
    "text": "CPP con last year where he kept trying to write efficient code and getting",
    "start": "955930",
    "end": "961420"
  },
  {
    "text": "exactly same assembly right didn't matter no matter how much he tried to hand unroll things the optimizer was",
    "start": "961420",
    "end": "967780"
  },
  {
    "text": "miles ahead of him so if you can write code that people can understand the",
    "start": "967780",
    "end": "972880"
  },
  {
    "text": "optimizer can make it fast that's better than you writing code that no one can understand and it's probably correct but ends up no faster because",
    "start": "972880",
    "end": "980470"
  },
  {
    "text": "the optimizer can't do those things to it okay so if you haven't measured you don't know anything especially true now",
    "start": "980470",
    "end": "987550"
  },
  {
    "text": "in our universe we may have all developed some intuition over the past little while but a lot of that intuition",
    "start": "987550",
    "end": "993760"
  },
  {
    "text": "has been completely upended you know they say if you want high-performance passed by value people don't wait what",
    "start": "993760",
    "end": "999460"
  },
  {
    "text": "no yeah so we have new sets of intuitions if you're not measuring you don't know it also may not matter",
    "start": "999460",
    "end": "1006540"
  },
  {
    "text": "I've gotten a big argument with someone about using string stream because it's so slow to parse command-line parameters",
    "start": "1006540",
    "end": "1012780"
  },
  {
    "text": "on a server that starts every few weeks I'd rather we got the command-line",
    "start": "1012780",
    "end": "1019710"
  },
  {
    "text": "parameters correctly parsed and again library code other people's code could",
    "start": "1019710",
    "end": "1025980"
  },
  {
    "text": "be faster than what you would write especially if the implementer has some inside knowledge right about the",
    "start": "1025980",
    "end": "1031740"
  },
  {
    "text": "structures they're working on",
    "start": "1031740",
    "end": "1034760"
  },
  {
    "start": "1034000",
    "end": "1034000"
  },
  {
    "text": "the first thing I do after I write code is I read it the second thing I do after",
    "start": "1037100",
    "end": "1043500"
  },
  {
    "text": "I write code and I read it as I start to debug it if you have a habit of writing in a",
    "start": "1043500",
    "end": "1049710"
  },
  {
    "text": "clear and open and transparent way you get to read nicer code the minute you",
    "start": "1049710",
    "end": "1054780"
  },
  {
    "text": "lift your fingers up off the keyboard right that's a that's a pleasantness compared to reading yucky code simple as",
    "start": "1054780",
    "end": "1060660"
  },
  {
    "text": "that you ma let me also spend less time debugging it that's a pleasantness for you right now the rest of the goodness",
    "start": "1060660",
    "end": "1069210"
  },
  {
    "text": "is about you know gift to the future but remember that the future may be yourself so it's a gift to you tomorrow or a gift",
    "start": "1069210",
    "end": "1075930"
  },
  {
    "text": "to you in a year or a gift to you in ten years when you don't want the phone call or the email from the person who's",
    "start": "1075930",
    "end": "1081000"
  },
  {
    "text": "maintaining it now and it's asking you a few quick things the less it surprises",
    "start": "1081000",
    "end": "1087780"
  },
  {
    "text": "anybody the easier it is to maintain and the more fun it is to work with and this",
    "start": "1087780",
    "end": "1093750"
  },
  {
    "text": "is really a hard lesson for us all but other people's code reform I don't just",
    "start": "1093750",
    "end": "1100890"
  },
  {
    "text": "mean yeah because you didn't have to write it so that makes up for its other people's nests you didn't it's already",
    "start": "1100890",
    "end": "1107700"
  },
  {
    "text": "tested so that compensates for the whole not by me I just actually mean this is a",
    "start": "1107700",
    "end": "1113010"
  },
  {
    "text": "fact like I write code that's beautiful and hands up if you've ever written code this beautiful how can that be when",
    "start": "1113010",
    "end": "1120030"
  },
  {
    "text": "you're not me and I'm not you my canoe",
    "start": "1120030",
    "end": "1127260"
  },
  {
    "text": "is beautiful and it's simple in the way that I'm talking about here it literally has no moving parts it is incredibly",
    "start": "1127260",
    "end": "1134310"
  },
  {
    "text": "expressive of what it does which it floats in very little water and takes me to places I couldn't otherwise go and my",
    "start": "1134310",
    "end": "1139980"
  },
  {
    "text": "husband and I made it out of pieces of wood and fiberglass cloth and resin as",
    "start": "1139980",
    "end": "1145080"
  },
  {
    "text": "C++ programmers said to me did you cut the wood into the strips no also did not",
    "start": "1145080",
    "end": "1151080"
  },
  {
    "text": "cut down the tree or plant the tree okay let other people's code be your pieces",
    "start": "1151080",
    "end": "1156630"
  },
  {
    "text": "of wood you can build gorgeous canoes out of them so I told you I come in and",
    "start": "1156630",
    "end": "1164250"
  },
  {
    "text": "I try to make people's code better which usually makes people's teams that are actually how I do it I I do",
    "start": "1164250",
    "end": "1172380"
  },
  {
    "text": "change code but I also try to change people and I've learned that if you want what I'm gonna call a polished",
    "start": "1172380",
    "end": "1179130"
  },
  {
    "text": "simplicity or a complete simplicity which is not blobs of play-doh right",
    "start": "1179130",
    "end": "1184650"
  },
  {
    "text": "it's really hard work it's easy to leave out the error checking it's hard to make",
    "start": "1184650",
    "end": "1192600"
  },
  {
    "text": "sure that even if someone forgets to call clean up things will get cleaned up okay that one's not really hard you can",
    "start": "1192600",
    "end": "1198630"
  },
  {
    "text": "have that as a free consultant tip use REI but in general writing code that's",
    "start": "1198630",
    "end": "1204450"
  },
  {
    "text": "complete that takes care of everything yet is not obscuring what it does is really open about what it does and",
    "start": "1204450",
    "end": "1211380"
  },
  {
    "text": "really it leads people through how it works is hard you have to know what you're",
    "start": "1211380",
    "end": "1218340"
  },
  {
    "text": "working with you have to know the language which is a moving target so the things that you might memorized in 1998",
    "start": "1218340",
    "end": "1225540"
  },
  {
    "text": "or 2005 are not necessarily the current things you have to know the library I",
    "start": "1225540",
    "end": "1230900"
  },
  {
    "text": "was in the same room for the previous session I think a lot of you were too so you know what's optional how does it",
    "start": "1230900",
    "end": "1236520"
  },
  {
    "text": "work what's variant what's that for you have to know because these things may be elegant and simple solutions of",
    "start": "1236520",
    "end": "1243960"
  },
  {
    "text": "ways of representing something that's kind of gross in your code right now I especially like optional and variant for",
    "start": "1243960",
    "end": "1250650"
  },
  {
    "text": "the get away from pointers right but why would you want to get away from pointers",
    "start": "1250650",
    "end": "1256110"
  },
  {
    "text": "so you have to know about things like how CPUs have changed in the last say three decades you also have to know the",
    "start": "1256110",
    "end": "1264530"
  },
  {
    "text": "C++ way of doing things as someone who's had to maintain you know Fortran",
    "start": "1264530",
    "end": "1270360"
  },
  {
    "text": "compiled with the C++ compiler basically things that are written in a C++ way",
    "start": "1270360",
    "end": "1276780"
  },
  {
    "text": "communicate to other C++ developers you need to know what those idioms are so",
    "start": "1276780",
    "end": "1285390"
  },
  {
    "text": "this is a totally different kind of simplicity right this isn't I left that out to keep it simple this is I left",
    "start": "1285390",
    "end": "1293100"
  },
  {
    "text": "nothing out and yet what is here is very very simple like this little polished metal ball doesn't have any pits in the",
    "start": "1293100",
    "end": "1300930"
  },
  {
    "text": "surface or cracks or fissures or weirdness and that was hard work compared to it just being a rough blob of metal yeah",
    "start": "1300930",
    "end": "1310500"
  },
  {
    "text": "people say okay so give me the rules well there are no simple rules to write",
    "start": "1310500",
    "end": "1316470"
  },
  {
    "text": "simple code which is just how it is but I will give you some things that help and I'll start easy and work my way up",
    "start": "1316470",
    "end": "1325190"
  },
  {
    "start": "1321000",
    "end": "1321000"
  },
  {
    "text": "the easiest thing to do is to be able to recognize simple I think people are",
    "start": "1325190",
    "end": "1331560"
  },
  {
    "text": "familiar with Lego this actually isn't Lego this is LEGO DUPLO Interop right and that's important that's an important",
    "start": "1331560",
    "end": "1337980"
  },
  {
    "text": "part of the design of Lego and DUPLO that they have they're simple but very consistent simplicity throughout so if",
    "start": "1337980",
    "end": "1346230"
  },
  {
    "text": "you know what makes your code simple you try to write it the simplest way at that moment when your fingers are paused over",
    "start": "1346230",
    "end": "1351660"
  },
  {
    "text": "the keyboard but when it turns into like this big cascade of ifs and twists and",
    "start": "1351660",
    "end": "1357240"
  },
  {
    "text": "things calling each other and whatever back up and say what can I do to make this simpler if I have a pattern of",
    "start": "1357240",
    "end": "1364890"
  },
  {
    "text": "functions member functions in a class that are constantly checking some",
    "start": "1364890",
    "end": "1369990"
  },
  {
    "text": "particular member variable maybe switching on it and then doing really entirely different things",
    "start": "1369990",
    "end": "1375180"
  },
  {
    "text": "maybe this is actually some kind of a polymorphic hierarchy right rather than saying if type equals regular and if",
    "start": "1375180",
    "end": "1382140"
  },
  {
    "text": "type equals special maybe I should have you know classes that implement the function entirely differently for",
    "start": "1382140",
    "end": "1388260"
  },
  {
    "text": "regulars and for specials maybe that would make things simpler for other people to understand do something to",
    "start": "1388260",
    "end": "1394620"
  },
  {
    "text": "make it simpler and take away those opportunities to be inconsistent where",
    "start": "1394620",
    "end": "1400080"
  },
  {
    "text": "you can big thing here is giving good names they say that a consultant is",
    "start": "1400080",
    "end": "1409890"
  },
  {
    "start": "1403000",
    "end": "1403000"
  },
  {
    "text": "someone who will borrow your watch to tell you what time it is my theory is if you're walking around with a watch on",
    "start": "1409890",
    "end": "1415500"
  },
  {
    "text": "and you don't know what time it is you need my help this is the sort of code I see in the world maybe maybe not quite",
    "start": "1415500",
    "end": "1424860"
  },
  {
    "text": "this short but this concept you have a comment telling you what's going on immediately followed by a variable with",
    "start": "1424860",
    "end": "1430740"
  },
  {
    "text": "a terrible name I for integer and then you have a loop",
    "start": "1430740",
    "end": "1436410"
  },
  {
    "text": "well let's start with this then right there's the name in the comment already I can't tell you it's it's kind of",
    "start": "1436410",
    "end": "1443460"
  },
  {
    "text": "embarrassing sometimes to charge a lot of money to say things like well it says annual revenue right here in the comment",
    "start": "1443460",
    "end": "1449010"
  },
  {
    "text": "how about we call the variable annual revenue and then it'll be more obvious and everyone goes like wow she's great",
    "start": "1449010",
    "end": "1456140"
  },
  {
    "text": "but I can do better I can also get rid of the loop because we have accumulate I",
    "start": "1457100",
    "end": "1462900"
  },
  {
    "text": "want accumulate to be an algorithm so bad but it's actually technically in numeric that's emotionally it's an",
    "start": "1462900",
    "end": "1469530"
  },
  {
    "text": "algorithm right so accumulate adds up all the things in the not necessarily in the whole collection but I'm passing",
    "start": "1469530",
    "end": "1474810"
  },
  {
    "text": "beginning it so now assuming that the people in your team either recognize accumulate or are able to go to CPP",
    "start": "1474810",
    "end": "1481530"
  },
  {
    "text": "reference comm and look it up now we don't need the comment at all the code just tells you what it does and that's",
    "start": "1481530",
    "end": "1487620"
  },
  {
    "text": "simpler in this case it happens to be shorter but that's really not the point",
    "start": "1487620",
    "end": "1493190"
  },
  {
    "text": "especially code that was originally in C or that was written by humans who were originally in C you get into the top of",
    "start": "1495920",
    "end": "1502800"
  },
  {
    "start": "1501000",
    "end": "1501000"
  },
  {
    "text": "some you know 5,000 line function and the first two or three screens is just declaring things and it's like double D",
    "start": "1502800",
    "end": "1509760"
  },
  {
    "text": "1 D 2 D 3 D 45 maybe before there was",
    "start": "1509760",
    "end": "1517290"
  },
  {
    "text": "autocomplete it mattered that your variable names were short now it does",
    "start": "1517290",
    "end": "1522870"
  },
  {
    "text": "not using long variable names is free call your variables annual revenue right",
    "start": "1522870",
    "end": "1528240"
  },
  {
    "text": "quarterly increase new employee whatever in fact refactoring into functions the",
    "start": "1528240",
    "end": "1535080"
  },
  {
    "text": "most important reason I think for calling a function is because the function has a name and a name from",
    "start": "1535080",
    "end": "1541350"
  },
  {
    "text": "algorithm is a known thing if I see accumulate if I see sort if I see find if I don't have to go read that function",
    "start": "1541350",
    "end": "1548100"
  },
  {
    "text": "to find out what it does I can look it up on cpp reference or I can just know what it does and I'm done that means",
    "start": "1548100",
    "end": "1554760"
  },
  {
    "text": "that people can read the story of the code without having to go in and see what it does",
    "start": "1554760",
    "end": "1560060"
  },
  {
    "text": "constants can get names in the form of putting them in in neumes or by using Const or context / giving things names",
    "start": "1560150",
    "end": "1567120"
  },
  {
    "text": "like maximum daily limit a good thing to do especially I think I",
    "start": "1567120",
    "end": "1573030"
  },
  {
    "text": "have to blame the Babylonians for this but I don't care who it is we have 60 seconds in a minute and 60 second it's",
    "start": "1573030",
    "end": "1578250"
  },
  {
    "text": "in an hour and when I just see 60 in the code I don't know what you're doing right but if you if you call it seconds",
    "start": "1578250",
    "end": "1583680"
  },
  {
    "text": "per hour and minutes a second seconds per minute and minutes per hour even though they both have the same numerical value I know what's happening of course",
    "start": "1583680",
    "end": "1590340"
  },
  {
    "text": "you probably just used to condone it that's not a game and I want your",
    "start": "1590340",
    "end": "1595590"
  },
  {
    "start": "1593000",
    "end": "1593000"
  },
  {
    "text": "functions to be short not so you can print them we don't print anymore right",
    "start": "1595590",
    "end": "1603500"
  },
  {
    "text": "not so they can fit on one screen and be seen all at once don't care about that either the reason I want your function",
    "start": "1603500",
    "end": "1609510"
  },
  {
    "text": "to be short is so they can have one name so they do one thing a 5,000 line",
    "start": "1609510",
    "end": "1615930"
  },
  {
    "text": "function doesn't do one thing it's possible that you have two functions",
    "start": "1615930",
    "end": "1623210"
  },
  {
    "text": "lurking together it's possible you have one function that needs to be split up",
    "start": "1623210",
    "end": "1628740"
  },
  {
    "text": "into the first part and the second part of what have you and functions you didn't are again emotionally short and I",
    "start": "1628740",
    "end": "1637320"
  },
  {
    "text": "think I've done variants of this talk before and I always have a library maintainer in the front row and I say",
    "start": "1637320",
    "end": "1642480"
  },
  {
    "text": "things like I don't know how long standard akima is and Marshall tells me I think I'm maintainer free today I",
    "start": "1642480",
    "end": "1648390"
  },
  {
    "text": "still don't know how many lines long accumulate is and I don't care right because it's not my problem and in big",
    "start": "1648390",
    "end": "1655920"
  },
  {
    "text": "software code bases there's other functions like that that are part of the system they're not part of the standard library but again",
    "start": "1655920",
    "end": "1662340"
  },
  {
    "text": "you don't care I work on a 20 plus year old product that has a function called update database that reads some files",
    "start": "1662340",
    "end": "1668340"
  },
  {
    "text": "off the hard drive and loads images giant array of doubles and everything else works from the giant array of doubles and there are certain places",
    "start": "1668340",
    "end": "1673830"
  },
  {
    "text": "where like some magic talisman you say update database before you do anything to make sure that the doubles are up-to-date no one ever has to go in and",
    "start": "1673830",
    "end": "1681090"
  },
  {
    "text": "step through it and read it and know how it works and whatever it was written in a 1402 and hasn't changed since so",
    "start": "1681090",
    "end": "1687990"
  },
  {
    "text": "nobody cares about the length of that function it's fine things that change a lot those are the ones where keep them",
    "start": "1687990",
    "end": "1694740"
  },
  {
    "text": "short so that people can read them and know what they do",
    "start": "1694740",
    "end": "1698690"
  },
  {
    "start": "1699000",
    "end": "1699000"
  },
  {
    "text": "parameter lists you know functions that take 27 parameters are hard to get right",
    "start": "1700170",
    "end": "1706660"
  },
  {
    "text": "a lot of different ways especially when they all they're all the same type you know there's eleven intz and then there's a handful of pools and and then",
    "start": "1706660",
    "end": "1713080"
  },
  {
    "text": "there's three doubles and nobody can remember what order they are and here you just about abstraction why pass for",
    "start": "1713080",
    "end": "1719890"
  },
  {
    "text": "integers when you could pass two points or one rectangle why pass a float a date",
    "start": "1719890",
    "end": "1726420"
  },
  {
    "text": "string dadada when that's actually a person or an order or an employee and",
    "start": "1726420",
    "end": "1731910"
  },
  {
    "text": "even if you never put any member functions in these abstractions just inventing the abstraction alone is going",
    "start": "1731910",
    "end": "1736960"
  },
  {
    "text": "to make that signature much easier to get right sometimes I find functions",
    "start": "1736960",
    "end": "1742270"
  },
  {
    "text": "take ten parameters because they're really three functions so break it out into the three functions now now your",
    "start": "1742270",
    "end": "1748240"
  },
  {
    "text": "rules are fighting each other because if I break it out into three functions maybe I have an opportunity to be inconsistent where someone somewhere",
    "start": "1748240",
    "end": "1754030"
  },
  {
    "text": "else only calls two of the three so there's always a balance and very often",
    "start": "1754030",
    "end": "1760830"
  },
  {
    "text": "taking the function and moving it in as a member function even though the cool kids these days only use free functions",
    "start": "1760830",
    "end": "1766390"
  },
  {
    "text": "if you move it in as a member function it doesn't need half of its parameters because there just remember variables",
    "start": "1766390",
    "end": "1771669"
  },
  {
    "text": "and they're just there so be aware that also I don't expect you to actually be",
    "start": "1771669",
    "end": "1778179"
  },
  {
    "text": "able to read the code okay I will show you a better version of it later in a bigger font but this is arrow code you",
    "start": "1778179",
    "end": "1784270"
  },
  {
    "text": "can see the shape right it's going out getting nested and nested and nested and then it's coming back in and the",
    "start": "1784270",
    "end": "1789940"
  },
  {
    "text": "important thing of what this code actually does is here way off to the side and really hard to spot even when",
    "start": "1789940",
    "end": "1797410"
  },
  {
    "text": "in a bigger font and we're checking various things and we're only going to proceed if these conditions are met and",
    "start": "1797410",
    "end": "1803740"
  },
  {
    "text": "so in the heart of all the loops there's the thing we're really trying to do now imagine that you were a brand new intern",
    "start": "1803740",
    "end": "1810429"
  },
  {
    "text": "and it is your job to add a fourth condition if you do it first if you do",
    "start": "1810429",
    "end": "1816340"
  },
  {
    "text": "it before the x1 and even I'm having trouble reading this if you do it before if X is less than limit then you know",
    "start": "1816340",
    "end": "1821710"
  },
  {
    "text": "you can put the else down at the very bottom and you'll probably get that right but if you try to put it anywhere else you're probably going to be unhappy",
    "start": "1821710",
    "end": "1829080"
  },
  {
    "text": "this the same coat the only thing I did was I",
    "start": "1829559",
    "end": "1834900"
  },
  {
    "text": "flipped the conditions old code started if X is less than limit we'll proceed and this code starts if X is greater",
    "start": "1834900",
    "end": "1842100"
  },
  {
    "text": "than or equal to limit and then I moved up the error handling and you can argue about the error handling and say that I",
    "start": "1842100",
    "end": "1848100"
  },
  {
    "text": "shouldn't we return in a bool I should return some more complex type and you could be right but this change right",
    "start": "1848100",
    "end": "1854190"
  },
  {
    "text": "here is internal to the function it has no impact on calling code at all okay so it's just very very localized refactoring now the errors are with",
    "start": "1854190",
    "end": "1862080"
  },
  {
    "text": "their problem if I go back you know the error message about X being too large is",
    "start": "1862080",
    "end": "1867390"
  },
  {
    "text": "the last thing on the slide right and and the error for the second test is the second last thing and so on",
    "start": "1867390",
    "end": "1873780"
  },
  {
    "text": "now here each error is with its own check so it's very easy to make sure that you're doing that part right and of",
    "start": "1873780",
    "end": "1879120"
  },
  {
    "text": "course it's really simple to put another test in either first second last whatever it doesn't matter you're not",
    "start": "1879120",
    "end": "1885630"
  },
  {
    "text": "going to mess it up and the good stuff stands out it's at the margin instead of",
    "start": "1885630",
    "end": "1892020"
  },
  {
    "text": "being indented at 20 spaces or so across the screen so that's a very common",
    "start": "1892020",
    "end": "1900720"
  },
  {
    "text": "pattern the function did something and then you're like oh we should only do it if whatever so you add the F and then",
    "start": "1900720",
    "end": "1907320"
  },
  {
    "text": "you add another if and then you add another if and you're good stuff was moving and moving and moving and simply flipping the conditions around and",
    "start": "1907320",
    "end": "1913559"
  },
  {
    "text": "saying we don't need an else because we would have returned if we if we had gone into that if I have a bigger font to",
    "start": "1913559",
    "end": "1920700"
  },
  {
    "text": "have a shorter function I have a better story if I want to I can take all those ifs and stuff them into something called",
    "start": "1920700",
    "end": "1926820"
  },
  {
    "text": "check preconditions and and even more tell a story and be obvious this is this",
    "start": "1926820",
    "end": "1935549"
  },
  {
    "start": "1933000",
    "end": "1933000"
  },
  {
    "text": "is a trick I learned from James McNellis constant all the things so we're not just talking about being constant and",
    "start": "1935549",
    "end": "1942150"
  },
  {
    "text": "useful thing to do but we're talking about just slamming Const on everything and then building and see if you get",
    "start": "1942150",
    "end": "1947760"
  },
  {
    "text": "compiled errors okay you've got you got a header file that that's got a bunch of member functions they're all constant member functions yep even the one called",
    "start": "1947760",
    "end": "1954240"
  },
  {
    "text": "update total just kant's them all and then go in the implementation file put the content build Oh update total",
    "start": "1954240",
    "end": "1960450"
  },
  {
    "text": "change the total no problem take it off but you leave it behind right on the places where it could go",
    "start": "1960450",
    "end": "1966390"
  },
  {
    "text": "and local member variables that's some int x equals 472 try in context equals",
    "start": "1966390",
    "end": "1973830"
  },
  {
    "text": "472 see if it actually changes further down the file and it just reduces the moving parts now I know that although",
    "start": "1973830",
    "end": "1982290"
  },
  {
    "text": "there are 10 variables in this block of code only two of them you know vary and the others are really more like",
    "start": "1982290",
    "end": "1988110"
  },
  {
    "text": "constants than like variables and that means as I'm reading the code there's less things I have to keep in my head to watch out for leave them behind if you",
    "start": "1988110",
    "end": "1995580"
  },
  {
    "text": "want they'll be that same kind of marker for the person after you now it doesn't",
    "start": "1995580",
    "end": "2000740"
  },
  {
    "text": "work well without params or maybe it works great without params you see when you try to reason instead of just",
    "start": "2000740",
    "end": "2007520"
  },
  {
    "text": "slamming Const on everything and trying to build it you see some foo at a comma",
    "start": "2007520",
    "end": "2013010"
  },
  {
    "text": "B comma C you don't know if a or B or C are left unchanged by that call you have",
    "start": "2013010",
    "end": "2019820"
  },
  {
    "text": "to go look at foo and see if it takes the parameters by ref right but if you constant and it won't compile then",
    "start": "2019820",
    "end": "2027200"
  },
  {
    "text": "you're like oh that's being taken by non-contrast learned something so that's good and you may learn that you don't",
    "start": "2027200",
    "end": "2033590"
  },
  {
    "text": "like out params because they're not expressive because you don't realize that it was changing its parameters and you may decide to go change that",
    "start": "2033590",
    "end": "2039440"
  },
  {
    "text": "function so that it returns something better like a struct that you wrote yourself abstraction is always your",
    "start": "2039440",
    "end": "2045110"
  },
  {
    "text": "friend I mentioned our standard is a",
    "start": "2045110",
    "end": "2051350"
  },
  {
    "start": "2048000",
    "end": "2048000"
  },
  {
    "text": "moving target and you know I've been getting paid to program since 1979 I don't remember the exact moment I",
    "start": "2051350",
    "end": "2057800"
  },
  {
    "text": "started suppose but I decided it was 1987 so I'm past the 30 year mark now and I've been through the the standard",
    "start": "2057800",
    "end": "2065840"
  },
  {
    "text": "doesn't move face and now we're in the standard move phase and this is better okay do not wish for the standard",
    "start": "2065840",
    "end": "2072050"
  },
  {
    "text": "doesn't move this is better but you have to keep up with it I I did a guidelines",
    "start": "2072050",
    "end": "2078740"
  },
  {
    "text": "talk at cpp comm where I talked about why you shouldn't do a Const cast and how you could mark your member variables",
    "start": "2078740",
    "end": "2084050"
  },
  {
    "text": "mutable and the number one response on Twitter I got it from multiple people was like that mutable thing kind of interesting I should check that",
    "start": "2084050",
    "end": "2090089"
  },
  {
    "text": "out is that like a C++ 14 did that show up people I have a child who lives 12",
    "start": "2090089",
    "end": "2096628"
  },
  {
    "text": "time zones away from me because he's doing a PhD because he's an adult and he is younger than mutable he gots to know",
    "start": "2096629",
    "end": "2107130"
  },
  {
    "text": "your standard rate range force more expressive than regular force deleted",
    "start": "2107130",
    "end": "2114300"
  },
  {
    "text": "constructors instead of private constructors because it expresses your intent to the people who are reading",
    "start": "2114300",
    "end": "2119670"
  },
  {
    "text": "your code right these are things that we have gained this century it would be good to use them non-static remember",
    "start": "2119670",
    "end": "2126540"
  },
  {
    "text": "initializers which I started accidentally using because I have a c-sharp experience as well and I my fingers typed it and then it worked and",
    "start": "2126540",
    "end": "2132839"
  },
  {
    "text": "I'm like wait what but they're fantastic because you don't worry that different constructors will initialize differently",
    "start": "2132839",
    "end": "2138950"
  },
  {
    "text": "and the standard library people don't",
    "start": "2138950",
    "end": "2144839"
  },
  {
    "text": "like using the standard library hands up if you love it see that is a very that's",
    "start": "2144839",
    "end": "2151290"
  },
  {
    "text": "what a quarter I love it what's not to love about free tested working code that someone else",
    "start": "2151290",
    "end": "2157020"
  },
  {
    "text": "documented I know it's got templates in it we're doing a lot of work around",
    "start": "2157020",
    "end": "2165599"
  },
  {
    "text": "making template e things look less template e like class template are good deduction and things like that so you don't ever have to type an angle bracket",
    "start": "2165599",
    "end": "2171869"
  },
  {
    "text": "in order to successfully use a template was a big deal and adding lambdas was what unlocked the library for me okay",
    "start": "2171869",
    "end": "2179190"
  },
  {
    "text": "because I didn't like function pointers I just found you on function pointers and I'm happy with the lambda but the",
    "start": "2179190",
    "end": "2184319"
  },
  {
    "text": "library is there and when you start looking at what it has you're going to",
    "start": "2184319",
    "end": "2189329"
  },
  {
    "text": "be amazed okay it's got amazing things in it some of them have been there like mutable for decades",
    "start": "2189329",
    "end": "2195569"
  },
  {
    "text": "all you got to do is know about them see here's deal when you're writing code you",
    "start": "2195569",
    "end": "2204030"
  },
  {
    "text": "are communicating with humans it doesn't feel that way because you type into the",
    "start": "2204030",
    "end": "2210240"
  },
  {
    "text": "compiler and you're calling the compiler some names while you're doing it but you're really communicating with future",
    "start": "2210240",
    "end": "2216690"
  },
  {
    "text": "you current teammates future takes over from you",
    "start": "2216690",
    "end": "2222130"
  },
  {
    "text": "and communicating in a lot of ways not just when they're debugging your code but maybe when they're copying your code used as a starting point for their code",
    "start": "2222130",
    "end": "2228430"
  },
  {
    "text": "it's all communication and you're leaving behind code that has something to say and I want you to setup this is a",
    "start": "2228430",
    "end": "2235990"
  },
  {
    "start": "2233000",
    "end": "2233000"
  },
  {
    "text": "phrase I learned from Rico Mariani the pit of success the pit of success is the",
    "start": "2235990",
    "end": "2242109"
  },
  {
    "text": "idea that if somebody does the most obvious easy no effort not even trying",
    "start": "2242109",
    "end": "2248349"
  },
  {
    "text": "thing they will succeed you set it up for them that way they will do well as",
    "start": "2248349",
    "end": "2255519"
  },
  {
    "text": "you can imagine it's not a beginner technique to leave behind a pit of success but if you can do it you are a",
    "start": "2255519",
    "end": "2261069"
  },
  {
    "text": "good person and you control the defaults that you leave for the people after you",
    "start": "2261069",
    "end": "2267819"
  },
  {
    "text": "or literally by your side as you're typing if you leave behind a place where",
    "start": "2267819",
    "end": "2273640"
  },
  {
    "text": "there's these three things and you have to remember to change all three of them in the future that's crummy if you leave behind a",
    "start": "2273640",
    "end": "2279880"
  },
  {
    "text": "single place that only needs to be changed in one place you've left behind a pit of success they're not going to get it wrong they're going to change it",
    "start": "2279880",
    "end": "2285640"
  },
  {
    "text": "and it is going to be changed and we're all gonna live happily ever after if you",
    "start": "2285640",
    "end": "2291099"
  },
  {
    "text": "write good RI are aii sensible destructors that clean up nicely then",
    "start": "2291099",
    "end": "2297819"
  },
  {
    "text": "whether the people are using exceptions now or not they're not going to have misery when they start to they don't",
    "start": "2297819",
    "end": "2304089"
  },
  {
    "text": "have to remember to clean up they're not going to get the weird intermittent bug because they forgot to clean up some paths if your constant",
    "start": "2304089",
    "end": "2311730"
  },
  {
    "text": "anyone like playing chase the Const no one right so just be cons correct today",
    "start": "2311730",
    "end": "2318460"
  },
  {
    "text": "whoever calls you will thank you later and give everything good names and keep",
    "start": "2318460",
    "end": "2324130"
  },
  {
    "text": "your functions short because this is a matter of setting those defaults for how the people after you are going to behave",
    "start": "2324130",
    "end": "2329319"
  },
  {
    "text": "I know the rules fight each other I know",
    "start": "2329319",
    "end": "2336190"
  },
  {
    "start": "2331000",
    "end": "2331000"
  },
  {
    "text": "that everything you do to make code simple can also make it more complicated right abstraction is your friend until",
    "start": "2336190",
    "end": "2341559"
  },
  {
    "text": "you're over abstracted until you're over in directed until what you really do is",
    "start": "2341559",
    "end": "2346690"
  },
  {
    "text": "completely hidden because it's six layers deep to get to the actual work that's while holes are fake that's why",
    "start": "2346690",
    "end": "2354430"
  },
  {
    "text": "the rules say a lot or not many or usually and this isn't something weird about C++ or about",
    "start": "2354430",
    "end": "2361759"
  },
  {
    "text": "software development this is a law about everything have you ever taught someone",
    "start": "2361759",
    "end": "2367279"
  },
  {
    "text": "to drive how fast should you drive one simple question what's the answer right",
    "start": "2367279",
    "end": "2375319"
  },
  {
    "text": "there's no answer I mean even you can you can start with simple engines like the speed limit or like oh there's a car",
    "start": "2375319",
    "end": "2380480"
  },
  {
    "text": "in front of you driving ten less than the speed limit you just ran into the back of it oh okay the speed limit or the traffic and you whichever is less Oh",
    "start": "2380480",
    "end": "2386450"
  },
  {
    "text": "a dog just ran out on the road right okay yes well okay putting the thing about braking for hazards okay now we",
    "start": "2386450",
    "end": "2392240"
  },
  {
    "text": "just went around a 90-degree corner only you only went around 70 or so degrees of it you know what speed should you drive",
    "start": "2392240",
    "end": "2400430"
  },
  {
    "text": "no simple answer what lane should you be in no simple answer I'm a new grandparent the baby's crying what do",
    "start": "2400430",
    "end": "2405920"
  },
  {
    "text": "you do about that no simple answer and this is true for C++ questions should you use exceptions",
    "start": "2405920",
    "end": "2413900"
  },
  {
    "text": "how long should a function be our overloads confusing it's just no simple",
    "start": "2413900",
    "end": "2422450"
  },
  {
    "text": "answers you have to use your judgment you have to say if I do it this way",
    "start": "2422450",
    "end": "2427549"
  },
  {
    "text": "versus that way which is more expressive which tells the story which explains itself to the people who come after me",
    "start": "2427549",
    "end": "2433910"
  },
  {
    "text": "you're not arbitrarily enforcing rules no function shall be more than 25 lines",
    "start": "2433910",
    "end": "2439249"
  },
  {
    "text": "long terrible rule and you have to know",
    "start": "2439249",
    "end": "2445039"
  },
  {
    "start": "2442000",
    "end": "2442000"
  },
  {
    "text": "what we all have to draw on you have to be able to recognize and say hmm this",
    "start": "2445039",
    "end": "2452660"
  },
  {
    "text": "loop starts at the beginning goes to the end and only ever increments one element",
    "start": "2452660",
    "end": "2457910"
  },
  {
    "text": "at a time I recognize that we have a thing for that it's called arranged for",
    "start": "2457910",
    "end": "2463210"
  },
  {
    "text": "or it's called find if or it's called accumulate right you can fail to",
    "start": "2463210",
    "end": "2469640"
  },
  {
    "text": "recognize those things Shawn parent did a talk in 2013 which was a life-changing talk for me but which concluded the",
    "start": "2469640",
    "end": "2475970"
  },
  {
    "text": "hilarious line he's got like an entire page of code on the screen the loop",
    "start": "2475970",
    "end": "2481400"
  },
  {
    "text": "he's been explaining something about how Photoshop works and then he says well this is obviously a rotate",
    "start": "2481400",
    "end": "2489130"
  },
  {
    "text": "like what I thought rotate was the most useless function in the whole of accumulate until he showed me that if",
    "start": "2489200",
    "end": "2495450"
  },
  {
    "text": "you don't go from begin to end rotate is actually insanely useful and exactly what you want in a huge variety of cases",
    "start": "2495450",
    "end": "2501150"
  },
  {
    "text": "so if you learn what a rotate is and you can play that this is obviously a rotate game people will be impressed right you",
    "start": "2501150",
    "end": "2510570"
  },
  {
    "text": "can say I'm worried that we're gonna forget to call clean up shouldn't a destructor be doing this I'm pretty sure",
    "start": "2510570",
    "end": "2517050"
  },
  {
    "text": "we're not the first people to ever need a stack or a jsonparser hands up if someone on your team has",
    "start": "2517050",
    "end": "2522660"
  },
  {
    "text": "gone off for the weekend to write a jsonparser look at the hands right oh my lord or",
    "start": "2522660",
    "end": "2528180"
  },
  {
    "text": "logging or getting stuff over HTTP or whatever like yes you're the first people who ever needed to log anything",
    "start": "2528180",
    "end": "2534480"
  },
  {
    "text": "in your application you should totally write the library for that but it gets",
    "start": "2534480",
    "end": "2540180"
  },
  {
    "start": "2539000",
    "end": "2539000"
  },
  {
    "text": "harder okay what does everybody know you know what accumulate is or what rotate",
    "start": "2540180",
    "end": "2547740"
  },
  {
    "text": "is but will your team when they're reading this code have you made it more readable or do they not know so you want",
    "start": "2547740",
    "end": "2556830"
  },
  {
    "text": "to replace your complicated things yes with idioms but they have to be familiar it eum's they have to be well-known",
    "start": "2556830",
    "end": "2563240"
  },
  {
    "text": "library things they have to be appropriate abstractions you can't leave",
    "start": "2563240",
    "end": "2568980"
  },
  {
    "text": "out needed capabilities this isn't about let's leave off the error checking to keep it simpler right you can't hide",
    "start": "2568980",
    "end": "2575970"
  },
  {
    "text": "what this thing does I loved when the 7 pages main engine loop collapse down to less",
    "start": "2575970",
    "end": "2581730"
  },
  {
    "text": "than a page because it showed what it did it now became obvious what that loop was whereas before it had been there in",
    "start": "2581730",
    "end": "2588750"
  },
  {
    "text": "housekeeping but don't go too far the other way and bury your intent in layers of factories and injectors and adapters",
    "start": "2588750",
    "end": "2595500"
  },
  {
    "text": "and all that you know and don't slam in the simple change now that makes future",
    "start": "2595500",
    "end": "2601800"
  },
  {
    "text": "changes much harder there's a border on",
    "start": "2601800",
    "end": "2607650"
  },
  {
    "start": "2604000",
    "end": "2604000"
  },
  {
    "text": "the one side of the border is I skipped a bunch of stuff to keep it simple and",
    "start": "2607650",
    "end": "2612830"
  },
  {
    "text": "on the other side is what I'm advocating for this genuinely elegant simplicity so",
    "start": "2612830",
    "end": "2619980"
  },
  {
    "text": "then you have to not only be sure that you're on the good side of the border but you have to be brave enough to stand",
    "start": "2619980",
    "end": "2625770"
  },
  {
    "text": "up for it because I'll tell you the first time somebody outside the team saw",
    "start": "2625770",
    "end": "2630900"
  },
  {
    "text": "that much shorter engine loop they said is that all you did it's like what like",
    "start": "2630900",
    "end": "2637680"
  },
  {
    "text": "you finally understand your own loop and you think I didn't do much right if you have a lines of code per day mentality",
    "start": "2637680",
    "end": "2644000"
  },
  {
    "text": "there may be people out there who just want to keep typing a lot of lines of code and who want to create that baroque",
    "start": "2644000",
    "end": "2649860"
  },
  {
    "text": "wooden sculpture and say look how smart I am so being able to stand up for something that a five-year-old could",
    "start": "2649860",
    "end": "2656460"
  },
  {
    "text": "read is actually harder than you might think of course you want your code to be",
    "start": "2656460",
    "end": "2663420"
  },
  {
    "text": "as simple as possible but no simpler you know I learned from Phil Nash that Einstein didn't say that he actually",
    "start": "2663420",
    "end": "2668460"
  },
  {
    "text": "said something much more long and complicated and someone else simplified it but it's easy to stick a 42 or a 60",
    "start": "2668460",
    "end": "2680100"
  },
  {
    "text": "or a 100 into your simple right but it's not right because in the future nobody",
    "start": "2680100",
    "end": "2686130"
  },
  {
    "text": "knows what the heck that is so setting up some constable adding in a new MIFF there's a bunch of them switching to",
    "start": "2686130",
    "end": "2692520"
  },
  {
    "text": "chrono if it's about minutes and seconds that's more work now but in terms of leaving behind expressive transparent",
    "start": "2692520",
    "end": "2699330"
  },
  {
    "text": "readable goodness it's actually the right way throwing it into a global because you don't want to deal with the",
    "start": "2699330",
    "end": "2706050"
  },
  {
    "text": "chain of calls all the way to where it's needed simpler now not true simplicity",
    "start": "2706050",
    "end": "2711270"
  },
  {
    "text": "right watch out for people who say I just usually the word just in a sentence",
    "start": "2711270",
    "end": "2719100"
  },
  {
    "text": "tells you that it's the I left it out to keep it simple kind of simplicity so I",
    "start": "2719100",
    "end": "2724680"
  },
  {
    "text": "want you to take the time to write that shorter letter and I want you to be able",
    "start": "2724680",
    "end": "2730470"
  },
  {
    "start": "2729000",
    "end": "2729000"
  },
  {
    "text": "to be brave about yep it's not simple didn't think it through it's simple brilliant and I'm proud of",
    "start": "2730470",
    "end": "2736140"
  },
  {
    "text": "it I know my way around what C++ is too and I'm confident that everybody else",
    "start": "2736140",
    "end": "2741990"
  },
  {
    "text": "involved will to people sometimes worry if anybody can read my code what role do",
    "start": "2741990",
    "end": "2748590"
  },
  {
    "text": "I have are you kidding your role is to keep writing code like that all over this company for the rest of your life",
    "start": "2748590",
    "end": "2754920"
  },
  {
    "text": "and never leave okay don't ever worry that if your code is understandable that you don't have job security want your",
    "start": "2754920",
    "end": "2762450"
  },
  {
    "text": "code to represent you when you're not there and to reflect just how far you",
    "start": "2762450",
    "end": "2767940"
  },
  {
    "text": "have come from being a beginner so to be specific you need to learn which means",
    "start": "2767940",
    "end": "2775350"
  },
  {
    "start": "2771000",
    "end": "2771000"
  },
  {
    "text": "you're in the right place right what's happening in the language what's happening in the library what idioms are people use who's heard of I I sometimes",
    "start": "2775350",
    "end": "2783120"
  },
  {
    "text": "another eye and then either L or II l or Fe immediately invoked initializing",
    "start": "2783120",
    "end": "2788580"
  },
  {
    "text": "lambda or function expressions I know so weird it's weird enough Algar out if you",
    "start": "2788580",
    "end": "2793860"
  },
  {
    "text": "don't give the variance on it like for people this is where you have a variable you'd like to make Const but you need",
    "start": "2793860",
    "end": "2799830"
  },
  {
    "text": "some complicated initialization bunch of ifs bunch of loops blah blah blah so you can call a function called like init X",
    "start": "2799830",
    "end": "2806130"
  },
  {
    "text": "and then you can say int Const X equals in it acts at whatever people resist",
    "start": "2806130",
    "end": "2812790"
  },
  {
    "text": "that partly because they don't know what parameters to pass to an it X there's subtle bug introductions where like oh",
    "start": "2812790",
    "end": "2818700"
  },
  {
    "text": "I'm passing that by reference but I should have passed it by value or who knows what so if you stick it into a lambda with a capture you can preserve",
    "start": "2818700",
    "end": "2826410"
  },
  {
    "text": "the old behavior completely as long as you immediately invoke the lambda by putting a pair of parentheses after the",
    "start": "2826410",
    "end": "2831840"
  },
  {
    "text": "final brace bracket very missable pair of parentheses but if you do this you",
    "start": "2831840",
    "end": "2837090"
  },
  {
    "text": "can then leave X Const after this tricky initialization this is a really new",
    "start": "2837090",
    "end": "2842640"
  },
  {
    "text": "idiom I started hearing about it maybe a year ago I might be late to the party",
    "start": "2842640",
    "end": "2848820"
  },
  {
    "text": "but the point is has your team heard of it well your team spot those parentheses on the end of the line will this line of",
    "start": "2848820",
    "end": "2855510"
  },
  {
    "text": "code be truly expressive and the answer may be different today than in five",
    "start": "2855510",
    "end": "2861570"
  },
  {
    "text": "years right so you have to stay on top of what's going on you have to read other people's code because that's the",
    "start": "2861570",
    "end": "2867180"
  },
  {
    "text": "only way you're going to learn what makes code readable and not readable read lots of bad examples too and you",
    "start": "2867180",
    "end": "2872880"
  },
  {
    "text": "have to care that the code you read leaving behind is setting up that pit of success for",
    "start": "2872880",
    "end": "2879190"
  },
  {
    "text": "everyone else and tried testing things if you think two things have a performance difference prove it to me",
    "start": "2879190",
    "end": "2885820"
  },
  {
    "text": "would the optimizer on right if you think that one particular way of writing",
    "start": "2885820",
    "end": "2891460"
  },
  {
    "text": "something is more readable than another try showing it two sets of people and asking them what they think it does don't rely on assumptions or just even",
    "start": "2891460",
    "end": "2898090"
  },
  {
    "text": "randomly something I told you or someone else and finally remember that writing code is communicating but that you can",
    "start": "2898090",
    "end": "2904359"
  },
  {
    "text": "also communicate above and beyond the code so you can tell somebody say in a code review",
    "start": "2904359",
    "end": "2909790"
  },
  {
    "text": "I think arranged for would be a better choice here because and then give your reasons okay or I don't think you should",
    "start": "2909790",
    "end": "2916690"
  },
  {
    "text": "be using the immediately invoked initializing lambda expression because it's too easy to miss those parentheses",
    "start": "2916690",
    "end": "2922510"
  },
  {
    "text": "at the end and I think I'd rather see you call a function called init X here but communicate and if you do those",
    "start": "2922510",
    "end": "2927700"
  },
  {
    "text": "things your code will get simpler your code will get better you will get happier which is a good thing",
    "start": "2927700",
    "end": "2934600"
  },
  {
    "text": "it's very definitely not just for beginners but I want you to aspire to that and to work towards that thank you",
    "start": "2934600",
    "end": "2940359"
  },
  {
    "text": "I don't know if I have time for",
    "start": "2940359",
    "end": "2951460"
  },
  {
    "text": "questions because I started late we're going to the into the break but you're welcome to come up to talk to me one-on-one and I'll answer anything you",
    "start": "2951460",
    "end": "2957550"
  },
  {
    "text": "have",
    "start": "2957550",
    "end": "2959700"
  },
  {
    "text": "Africa",
    "start": "2963920",
    "end": "2966880"
  }
]