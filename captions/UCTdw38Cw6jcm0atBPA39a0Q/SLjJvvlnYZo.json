[
  {
    "start": "0",
    "end": "77000"
  },
  {
    "text": "cool so thank you for joining me this is",
    "start": "4529",
    "end": "8889"
  },
  {
    "text": "gonna be quite a scary talk but I think",
    "start": "8889",
    "end": "12100"
  },
  {
    "text": "if you want to come a bit closer",
    "start": "12100",
    "end": "13300"
  },
  {
    "text": "it'sit's gonna have the same effect I",
    "start": "13300",
    "end": "15340"
  },
  {
    "text": "promise you so we're gonna take a fun",
    "start": "15340",
    "end": "19420"
  },
  {
    "text": "trip into the darker regions of C++ my",
    "start": "19420",
    "end": "24640"
  },
  {
    "text": "day job is doing a computer vision",
    "start": "24640",
    "end": "26589"
  },
  {
    "text": "machine learning working on autonomous",
    "start": "26589",
    "end": "28630"
  },
  {
    "text": "driving systems but my debt my at night",
    "start": "28630",
    "end": "32140"
  },
  {
    "text": "I work as a guide into the dungeons of",
    "start": "32140",
    "end": "34450"
  },
  {
    "text": "C++ now C++ is well known as a beginner",
    "start": "34450",
    "end": "38230"
  },
  {
    "text": "friendly language as I'm sure most of",
    "start": "38230",
    "end": "40690"
  },
  {
    "text": "you are aware but still we do we still",
    "start": "40690",
    "end": "43120"
  },
  {
    "text": "have a few sharp corners and a few very",
    "start": "43120",
    "end": "45880"
  },
  {
    "text": "very deep sellers and in this talk about",
    "start": "45880",
    "end": "49150"
  },
  {
    "text": "it I had to shorten it for the 45",
    "start": "49150",
    "end": "51430"
  },
  {
    "text": "minutes but we're going to meet some of",
    "start": "51430",
    "end": "53650"
  },
  {
    "text": "the the creatures that live inside the",
    "start": "53650",
    "end": "57010"
  },
  {
    "text": "C++ is sellers so I hope you guys are",
    "start": "57010",
    "end": "60160"
  },
  {
    "text": "brave enough to join me if not well it's",
    "start": "60160",
    "end": "62590"
  },
  {
    "text": "still not too late to go listen to some",
    "start": "62590",
    "end": "64299"
  },
  {
    "text": "of the other fine talks here right so",
    "start": "64299",
    "end": "68159"
  },
  {
    "text": "it's going to be more or less from an A",
    "start": "68159",
    "end": "71859"
  },
  {
    "text": "to Z list of eclectic creatures so",
    "start": "71859",
    "end": "74770"
  },
  {
    "text": "obviously we're going to start with a",
    "start": "74770",
    "end": "76539"
  },
  {
    "text": "right so the first strange creature that",
    "start": "76539",
    "end": "81039"
  },
  {
    "start": "77000",
    "end": "77000"
  },
  {
    "text": "we meet in C++ in the tsipras's",
    "start": "81039",
    "end": "83289"
  },
  {
    "text": "type system are called abominable",
    "start": "83289",
    "end": "85509"
  },
  {
    "text": "abominable function types now an",
    "start": "85509",
    "end": "88509"
  },
  {
    "text": "abominable function type is a type that",
    "start": "88509",
    "end": "91450"
  },
  {
    "text": "that it is a function type that's",
    "start": "91450",
    "end": "93850"
  },
  {
    "text": "decorated with a severe F qualifier as",
    "start": "93850",
    "end": "97270"
  },
  {
    "text": "we can see in the example we defining",
    "start": "97270",
    "end": "99639"
  },
  {
    "text": "abominable as a function that doesn't",
    "start": "99639",
    "end": "102429"
  },
  {
    "text": "take any arguments returns void and it's",
    "start": "102429",
    "end": "105069"
  },
  {
    "text": "consulate I'll reference now this type",
    "start": "105069",
    "end": "110889"
  },
  {
    "text": "of function cannot exist there is no way",
    "start": "110889",
    "end": "113590"
  },
  {
    "text": "to actually write a function with this",
    "start": "113590",
    "end": "115270"
  },
  {
    "text": "signature inside C++ that's not it there",
    "start": "115270",
    "end": "118899"
  },
  {
    "text": "is no function that can be with a civvy",
    "start": "118899",
    "end": "121990"
  },
  {
    "text": "qualified or a reference function and",
    "start": "121990",
    "end": "123969"
  },
  {
    "text": "because it's not a reference type it's",
    "start": "123969",
    "end": "126039"
  },
  {
    "text": "not constant it's definitely not",
    "start": "126039",
    "end": "127630"
  },
  {
    "text": "volatile so why does the simplified type",
    "start": "127630",
    "end": "132190"
  },
  {
    "text": "system allow us to declare such a type",
    "start": "132190",
    "end": "135400"
  },
  {
    "text": "when there is no such",
    "start": "135400",
    "end": "137170"
  },
  {
    "text": "type inside the simplest type system and",
    "start": "137170",
    "end": "139480"
  },
  {
    "text": "I know there are some people are trying",
    "start": "139480",
    "end": "141489"
  },
  {
    "text": "to get rid of this abomination but in",
    "start": "141489",
    "end": "145120"
  },
  {
    "text": "fact it's not that easy because this is",
    "start": "145120",
    "end": "148770"
  },
  {
    "text": "potentially usable inside class method",
    "start": "148770",
    "end": "153280"
  },
  {
    "text": "declaration so I have here the",
    "start": "153280",
    "end": "157209"
  },
  {
    "text": "proverbial rectangle struct and I'm a",
    "start": "157209",
    "end": "161380"
  },
  {
    "text": "very lazy developer so and my boss said",
    "start": "161380",
    "end": "164680"
  },
  {
    "text": "I need to define these six methods",
    "start": "164680",
    "end": "166150"
  },
  {
    "text": "called top left bottom right width and",
    "start": "166150",
    "end": "168340"
  },
  {
    "text": "height which we turn obviously the",
    "start": "168340",
    "end": "170140"
  },
  {
    "text": "coordinates of the rectangle but I don't",
    "start": "170140",
    "end": "174190"
  },
  {
    "text": "like typing out the function signatures",
    "start": "174190",
    "end": "176230"
  },
  {
    "text": "so I can use the abominable function",
    "start": "176230",
    "end": "178510"
  },
  {
    "text": "type using Interop early it's a function",
    "start": "178510",
    "end": "180880"
  },
  {
    "text": "a method really",
    "start": "180880",
    "end": "182410"
  },
  {
    "text": "that's cons qualified and it returns an",
    "start": "182410",
    "end": "184540"
  },
  {
    "text": "integer coordinate of each of these",
    "start": "184540",
    "end": "186549"
  },
  {
    "text": "functions right and then I just declare",
    "start": "186549",
    "end": "188319"
  },
  {
    "text": "all of the these property methods using",
    "start": "188319",
    "end": "191470"
  },
  {
    "text": "that signature so I really really hope",
    "start": "191470",
    "end": "194860"
  },
  {
    "text": "that your code review system is going to",
    "start": "194860",
    "end": "197319"
  },
  {
    "text": "kick the this out of the repository",
    "start": "197319",
    "end": "200440"
  },
  {
    "text": "right so don't ever write this don't say",
    "start": "200440",
    "end": "203380"
  },
  {
    "text": "I told you I just told you what not to",
    "start": "203380",
    "end": "205090"
  },
  {
    "text": "do right okay so these are abominable",
    "start": "205090",
    "end": "208090"
  },
  {
    "text": "function types they're very strange very",
    "start": "208090",
    "end": "209590"
  },
  {
    "text": "esoteric but it's it's not it's fun it",
    "start": "209590",
    "end": "211989"
  },
  {
    "text": "fun to learn now maybe the most famous",
    "start": "211989",
    "end": "215609"
  },
  {
    "start": "215000",
    "end": "215000"
  },
  {
    "text": "and scary creature that we have inside",
    "start": "215609",
    "end": "219070"
  },
  {
    "text": "in C++ is of course the nasal demon or",
    "start": "219070",
    "end": "224290"
  },
  {
    "text": "the undefined behavior demons of of the",
    "start": "224290",
    "end": "227739"
  },
  {
    "text": "language we fondly call them UB because",
    "start": "227739",
    "end": "230109"
  },
  {
    "text": "we like talking about the undefined",
    "start": "230109",
    "end": "232510"
  },
  {
    "text": "behavior I think most C++ discussions on",
    "start": "232510",
    "end": "235150"
  },
  {
    "text": "Twitter always evolve towards undefined",
    "start": "235150",
    "end": "237670"
  },
  {
    "text": "behavior it has its origins a very",
    "start": "237670",
    "end": "240910"
  },
  {
    "text": "archaic very ancient creature it has its",
    "start": "240910",
    "end": "243430"
  },
  {
    "text": "roots back in the in the C type system",
    "start": "243430",
    "end": "247180"
  },
  {
    "text": "and the main problem with the undefined",
    "start": "247180",
    "end": "251890"
  },
  {
    "text": "behavior is that it's enough to have a",
    "start": "251890",
    "end": "254620"
  },
  {
    "text": "single case of undefined behavior to",
    "start": "254620",
    "end": "257169"
  },
  {
    "text": "render the whole program totally invalid",
    "start": "257169",
    "end": "259510"
  },
  {
    "text": "and meaningless so that means the quote",
    "start": "259510",
    "end": "262690"
  },
  {
    "text": "from the comp",
    "start": "262690",
    "end": "264610"
  },
  {
    "text": "sddc discussion from 1992 was",
    "start": "264610",
    "end": "270520"
  },
  {
    "text": "miserable undefined behavior ranges from",
    "start": "270520",
    "end": "272199"
  },
  {
    "text": "ignoring the situation completely with",
    "start": "272199",
    "end": "274300"
  },
  {
    "text": "unpredictable results to having demons",
    "start": "274300",
    "end": "276370"
  },
  {
    "text": "fly out of your nose",
    "start": "276370",
    "end": "277780"
  },
  {
    "text": "so this but this was in 1992 and one of",
    "start": "277780",
    "end": "282940"
  },
  {
    "text": "the scariest things about undefined",
    "start": "282940",
    "end": "284889"
  },
  {
    "text": "behavior is that the compiler actively",
    "start": "284889",
    "end": "287319"
  },
  {
    "text": "assumes that you be never happened so",
    "start": "287319",
    "end": "290039"
  },
  {
    "text": "whenever your compiler encounters a UB",
    "start": "290039",
    "end": "295060"
  },
  {
    "text": "situation there is an axiom which is",
    "start": "295060",
    "end": "298539"
  },
  {
    "text": "implicitly embedded into the the way the",
    "start": "298539",
    "end": "301240"
  },
  {
    "text": "compiler works that this situation can",
    "start": "301240",
    "end": "303069"
  },
  {
    "text": "never happen and when it's encountered",
    "start": "303069",
    "end": "305889"
  },
  {
    "text": "basically the compiler tries to reverse",
    "start": "305889",
    "end": "308289"
  },
  {
    "text": "engineer the logic so that because",
    "start": "308289",
    "end": "310509"
  },
  {
    "text": "obviously that's not undefined behavior",
    "start": "310509",
    "end": "312039"
  },
  {
    "text": "because undefined behavior cannot happen",
    "start": "312039",
    "end": "313960"
  },
  {
    "text": "ever happen and the whole program logic",
    "start": "313960",
    "end": "316599"
  },
  {
    "text": "can change to make that situation not",
    "start": "316599",
    "end": "319240"
  },
  {
    "text": "undefined and that that's how compilers",
    "start": "319240",
    "end": "322150"
  },
  {
    "text": "can really mess up your program and",
    "start": "322150",
    "end": "323740"
  },
  {
    "text": "completely turn your logic upside down",
    "start": "323740",
    "end": "326470"
  },
  {
    "text": "and last year there was this six line",
    "start": "326470",
    "end": "332259"
  },
  {
    "text": "function making the rounds on Twitter",
    "start": "332259",
    "end": "334180"
  },
  {
    "text": "and reddit where it's it looks very",
    "start": "334180",
    "end": "337150"
  },
  {
    "text": "Nakia Scout where we're including some",
    "start": "337150",
    "end": "339840"
  },
  {
    "text": "standard header we're defining function",
    "start": "339840",
    "end": "342969"
  },
  {
    "text": "as a function pointer that takes no",
    "start": "342969",
    "end": "344740"
  },
  {
    "text": "arguments and returns an integer we have",
    "start": "344740",
    "end": "347909"
  },
  {
    "text": "do on the third line is going to be such",
    "start": "347909",
    "end": "351370"
  },
  {
    "text": "a function pointer declared in global",
    "start": "351370",
    "end": "353139"
  },
  {
    "text": "scope and it's not even initialized",
    "start": "353139",
    "end": "356860"
  },
  {
    "text": "because but since its static in global",
    "start": "356860",
    "end": "359319"
  },
  {
    "text": "scope it's going to be initialized to",
    "start": "359319",
    "end": "360639"
  },
  {
    "text": "not right",
    "start": "360639",
    "end": "361389"
  },
  {
    "text": "so nothing wrong here with everything is",
    "start": "361389",
    "end": "364539"
  },
  {
    "text": "alright and we're defining another",
    "start": "364539",
    "end": "366419"
  },
  {
    "text": "function called erase all erase all is",
    "start": "366419",
    "end": "369400"
  },
  {
    "text": "going to return a system call which is",
    "start": "369400",
    "end": "372039"
  },
  {
    "text": "going to erase your hard drive all right",
    "start": "372039",
    "end": "374050"
  },
  {
    "text": "so yeah it's just that it's going to",
    "start": "374050",
    "end": "377229"
  },
  {
    "text": "rescue hard drives but again when",
    "start": "377229",
    "end": "379139"
  },
  {
    "text": "hopefully nobody's going to call that",
    "start": "379139",
    "end": "381039"
  },
  {
    "text": "function and no harm is going to be done",
    "start": "381039",
    "end": "384039"
  },
  {
    "text": "then we have the function never called",
    "start": "384039",
    "end": "386169"
  },
  {
    "text": "which sets do this global function",
    "start": "386169",
    "end": "389560"
  },
  {
    "text": "pointer to erase all but again this is",
    "start": "389560",
    "end": "392710"
  },
  {
    "text": "only going to happen once we actually",
    "start": "392710",
    "end": "395289"
  },
  {
    "text": "call the function never call them we're",
    "start": "395289",
    "end": "396849"
  },
  {
    "text": "never going to call it obviously it's",
    "start": "396849",
    "end": "398139"
  },
  {
    "text": "called never called Y and our main",
    "start": "398139",
    "end": "400330"
  },
  {
    "text": "function is as simple as can be imagined",
    "start": "400330",
    "end": "402219"
  },
  {
    "text": "it just returns the return",
    "start": "402219",
    "end": "403930"
  },
  {
    "text": "you do so this is the entry point to our",
    "start": "403930",
    "end": "408100"
  },
  {
    "text": "program we calling doo doo was",
    "start": "408100",
    "end": "410590"
  },
  {
    "text": "initialized remember to to now because",
    "start": "410590",
    "end": "412810"
  },
  {
    "text": "it's a global function pointer and its",
    "start": "412810",
    "end": "415630"
  },
  {
    "text": "default initialized",
    "start": "415630",
    "end": "416800"
  },
  {
    "text": "however calling of a null pointer as a",
    "start": "416800",
    "end": "421630"
  },
  {
    "text": "function called that undefined behavior",
    "start": "421630",
    "end": "422979"
  },
  {
    "text": "and at least at the time that this was",
    "start": "422979",
    "end": "425350"
  },
  {
    "text": "written with a but with GCC with a",
    "start": "425350",
    "end": "428139"
  },
  {
    "text": "certain combination of flags it produces",
    "start": "428139",
    "end": "430930"
  },
  {
    "text": "this output now you don't really have to",
    "start": "430930",
    "end": "433060"
  },
  {
    "text": "understand this we line assembly here",
    "start": "433060",
    "end": "435190"
  },
  {
    "text": "but basically it would erase your hard",
    "start": "435190",
    "end": "437080"
  },
  {
    "text": "drive ok so that's what I'm defined",
    "start": "437080",
    "end": "439509"
  },
  {
    "text": "behavior that's how it can launch",
    "start": "439509",
    "end": "441460"
  },
  {
    "text": "missiles out of your nose right so so",
    "start": "441460",
    "end": "443949"
  },
  {
    "text": "that's undefined we ever of course the",
    "start": "443949",
    "end": "446800"
  },
  {
    "text": "general recommendation is make sure you",
    "start": "446800",
    "end": "448630"
  },
  {
    "text": "run things like you'll be sanitizer to",
    "start": "448630",
    "end": "450940"
  },
  {
    "text": "find an case of undefined behavior in",
    "start": "450940",
    "end": "453039"
  },
  {
    "text": "code because we don't this is of course",
    "start": "453039",
    "end": "455470"
  },
  {
    "text": "an extreme case but it's it's important",
    "start": "455470",
    "end": "457990"
  },
  {
    "text": "it's an important lesson I'm sure many",
    "start": "457990",
    "end": "464590"
  },
  {
    "start": "462000",
    "end": "462000"
  },
  {
    "text": "of you have heard about duck typing duck",
    "start": "464590",
    "end": "467800"
  },
  {
    "text": "typing is it come it the term comes from",
    "start": "467800",
    "end": "471789"
  },
  {
    "text": "the logic concept of abductive reasoning",
    "start": "471789",
    "end": "475830"
  },
  {
    "text": "which is colloquially known with with",
    "start": "475830",
    "end": "479229"
  },
  {
    "text": "this little poem if it looks like a duck",
    "start": "479229",
    "end": "482409"
  },
  {
    "text": "swims like a duck and quacks like a duck",
    "start": "482409",
    "end": "484030"
  },
  {
    "text": "then it's probably a duck and in its",
    "start": "484030",
    "end": "487780"
  },
  {
    "text": "classical form duck typing comes from",
    "start": "487780",
    "end": "490389"
  },
  {
    "text": "dynamically from dynamically typed",
    "start": "490389",
    "end": "492909"
  },
  {
    "text": "languages such as JavaScript for example",
    "start": "492909",
    "end": "495789"
  },
  {
    "text": "where when the interpreter encounters a",
    "start": "495789",
    "end": "499479"
  },
  {
    "text": "call to a function or accessing a member",
    "start": "499479",
    "end": "501580"
  },
  {
    "text": "of an object only then does it actually",
    "start": "501580",
    "end": "504159"
  },
  {
    "text": "access the object and check whether that",
    "start": "504159",
    "end": "506139"
  },
  {
    "text": "function is in its tables or whether",
    "start": "506139",
    "end": "508210"
  },
  {
    "text": "some member exists now C++ is a",
    "start": "508210",
    "end": "511060"
  },
  {
    "text": "statically typed language so that cannot",
    "start": "511060",
    "end": "514930"
  },
  {
    "text": "actually happen at runtime",
    "start": "514930",
    "end": "516310"
  },
  {
    "text": "however templates at least as they are",
    "start": "516310",
    "end": "519039"
  },
  {
    "text": "defined today have a form of static duck",
    "start": "519039",
    "end": "524440"
  },
  {
    "text": "typing so whenever we instantiate a",
    "start": "524440",
    "end": "526899"
  },
  {
    "text": "template only then once we know at the",
    "start": "526899",
    "end": "529870"
  },
  {
    "text": "point of instantiation only then do we",
    "start": "529870",
    "end": "532329"
  },
  {
    "text": "does the compiler actually check whether",
    "start": "532329",
    "end": "534790"
  },
  {
    "text": "the instantiated parameterised type",
    "start": "534790",
    "end": "537730"
  },
  {
    "text": "supports the particular API that we're",
    "start": "537730",
    "end": "539800"
  },
  {
    "text": "trying to use and so duck typing",
    "start": "539800",
    "end": "541899"
  },
  {
    "text": "although it originates from dynamic",
    "start": "541899",
    "end": "543820"
  },
  {
    "text": "languages it actually exists inside",
    "start": "543820",
    "end": "546240"
  },
  {
    "text": "inside C++ and one of the things that",
    "start": "546240",
    "end": "549459"
  },
  {
    "text": "C++ concepts are trying to eradicate or",
    "start": "549459",
    "end": "553480"
  },
  {
    "text": "at least reduce the effect is by having",
    "start": "553480",
    "end": "557430"
  },
  {
    "text": "template type specific specification so",
    "start": "557430",
    "end": "560800"
  },
  {
    "text": "that we can get these warnings at the",
    "start": "560800",
    "end": "563560"
  },
  {
    "text": "point of template definition and not at",
    "start": "563560",
    "end": "565990"
  },
  {
    "text": "the point of incidence iation so we're",
    "start": "565990",
    "end": "567760"
  },
  {
    "text": "not going to wait for the instantiation",
    "start": "567760",
    "end": "570399"
  },
  {
    "text": "and the duck typing but we're going to",
    "start": "570399",
    "end": "572709"
  },
  {
    "text": "do it at the level of the specific the",
    "start": "572709",
    "end": "574959"
  },
  {
    "text": "specification right so one of the less",
    "start": "574959",
    "end": "579670"
  },
  {
    "text": "scarier and actually very welcome",
    "start": "579670",
    "end": "583889"
  },
  {
    "start": "580000",
    "end": "580000"
  },
  {
    "text": "creatures that were things that we're",
    "start": "583889",
    "end": "586630"
  },
  {
    "text": "going to meet today are flying saucers",
    "start": "586630",
    "end": "588670"
  },
  {
    "text": "or what's known as the spaceship",
    "start": "588670",
    "end": "590589"
  },
  {
    "text": "operator how many of you have heard",
    "start": "590589",
    "end": "592269"
  },
  {
    "text": "about the spaceship operator",
    "start": "592269",
    "end": "593529"
  },
  {
    "text": "okay that's most of you so it's coming",
    "start": "593529",
    "end": "596980"
  },
  {
    "text": "to simplices 20 it gives us three-way",
    "start": "596980",
    "end": "599680"
  },
  {
    "text": "comparisons automatically generates all",
    "start": "599680",
    "end": "602079"
  },
  {
    "text": "the comparison operators it gives a very",
    "start": "602079",
    "end": "605500"
  },
  {
    "text": "consistent interface I think Simon brand",
    "start": "605500",
    "end": "607329"
  },
  {
    "text": "had a beautiful blog post about it last",
    "start": "607329",
    "end": "609430"
  },
  {
    "text": "week so I go go and read that for more",
    "start": "609430",
    "end": "612519"
  },
  {
    "text": "and it supports a more general concepts",
    "start": "612519",
    "end": "616180"
  },
  {
    "text": "that are not generally thought of when",
    "start": "616180",
    "end": "618610"
  },
  {
    "text": "you're first writing comparison operator",
    "start": "618610",
    "end": "620920"
  },
  {
    "text": "with like partial ordering and weak",
    "start": "620920",
    "end": "622240"
  },
  {
    "text": "ordering and that kind of thing and I",
    "start": "622240",
    "end": "624430"
  },
  {
    "text": "think one of the coolest things about it",
    "start": "624430",
    "end": "626260"
  },
  {
    "text": "is that if we define a struct",
    "start": "626260",
    "end": "628600"
  },
  {
    "text": "like the proverbial point here which is",
    "start": "628600",
    "end": "631000"
  },
  {
    "text": "like one of the most trivial types all",
    "start": "631000",
    "end": "635440"
  },
  {
    "text": "we need to do to get all of these",
    "start": "635440",
    "end": "637319"
  },
  {
    "text": "comparison operator is just differ",
    "start": "637319",
    "end": "639850"
  },
  {
    "text": "define the default comparison operator",
    "start": "639850",
    "end": "642699"
  },
  {
    "text": "default we were difficult space",
    "start": "642699",
    "end": "644529"
  },
  {
    "text": "spaceship operator and the compiler will",
    "start": "644529",
    "end": "647260"
  },
  {
    "text": "automatically not only generate those",
    "start": "647260",
    "end": "649389"
  },
  {
    "text": "six comparison operator but it will do a",
    "start": "649389",
    "end": "652329"
  },
  {
    "text": "totally ordered member wise comparison",
    "start": "652329",
    "end": "654130"
  },
  {
    "text": "which is what we would expect basically",
    "start": "654130",
    "end": "655720"
  },
  {
    "text": "a lexicographical comparison of each of",
    "start": "655720",
    "end": "658089"
  },
  {
    "text": "the members in order so I think this is",
    "start": "658089",
    "end": "660519"
  },
  {
    "text": "beautiful this this really makes it",
    "start": "660519",
    "end": "662199"
  },
  {
    "text": "awesome and very easy to suddenly a",
    "start": "662199",
    "end": "664899"
  },
  {
    "text": "bunch of code for all of these basic",
    "start": "664899",
    "end": "667120"
  },
  {
    "text": "value types gets shrunk down to a single",
    "start": "667120",
    "end": "669640"
  },
  {
    "text": "line where we didn't",
    "start": "669640",
    "end": "670690"
  },
  {
    "text": "and I have to implement it ourselves so",
    "start": "670690",
    "end": "673840"
  },
  {
    "text": "I think that's beautiful and I'm really",
    "start": "673840",
    "end": "675460"
  },
  {
    "text": "looking forward to seeing it now how",
    "start": "675460",
    "end": "680020"
  },
  {
    "text": "many of you are aware at least those of",
    "start": "680020",
    "end": "682930"
  },
  {
    "text": "you who aren't at Twitter on the past",
    "start": "682930",
    "end": "684730"
  },
  {
    "text": "couple of weeks that we have My Little",
    "start": "684730",
    "end": "688570"
  },
  {
    "text": "Ponies inside the C++ standard so it",
    "start": "688570",
    "end": "692530"
  },
  {
    "text": "turns out that when working on the",
    "start": "692530",
    "end": "694360"
  },
  {
    "text": "suppressor 20 standard there are some",
    "start": "694360",
    "end": "696460"
  },
  {
    "text": "atomic comparing exchange operators",
    "start": "696460",
    "end": "698470"
  },
  {
    "text": "anyone who's been to one of Tony's talks",
    "start": "698470",
    "end": "700920"
  },
  {
    "text": "yesterday spoke about the caste operator",
    "start": "700920",
    "end": "703450"
  },
  {
    "text": "so in certain cases when the our object",
    "start": "703450",
    "end": "708760"
  },
  {
    "text": "is padded then sometimes these class",
    "start": "708760",
    "end": "711070"
  },
  {
    "text": "operations which compared to values can",
    "start": "711070",
    "end": "713350"
  },
  {
    "text": "know will always are never guaranteed to",
    "start": "713350",
    "end": "715960"
  },
  {
    "text": "succeed so in the example this is copied",
    "start": "715960",
    "end": "718840"
  },
  {
    "text": "from the standard so I didn't write this",
    "start": "718840",
    "end": "721450"
  },
  {
    "text": "example myself we have a union called",
    "start": "721450",
    "end": "723970"
  },
  {
    "text": "Pony which has two two members well",
    "start": "723970",
    "end": "729100"
  },
  {
    "text": "they're not members there are two",
    "start": "729100",
    "end": "730240"
  },
  {
    "text": "parallel members inside the Union one is",
    "start": "730240",
    "end": "732550"
  },
  {
    "text": "a double and one is short and of course",
    "start": "732550",
    "end": "734740"
  },
  {
    "text": "the short is shorter than the double so",
    "start": "734740",
    "end": "737500"
  },
  {
    "text": "we have some extra bits inside which are",
    "start": "737500",
    "end": "739870"
  },
  {
    "text": "padded and when whenever we instantiate",
    "start": "739870",
    "end": "743020"
  },
  {
    "text": "a variable of type pony and try to run",
    "start": "743020",
    "end": "745930"
  },
  {
    "text": "compare exchange over this type then",
    "start": "745930",
    "end": "748870"
  },
  {
    "text": "this might actually never succeed so",
    "start": "748870",
    "end": "752910"
  },
  {
    "text": "it's quite funny when we see Celestia",
    "start": "752910",
    "end": "755800"
  },
  {
    "text": "and Luna whoever has the girls here our",
    "start": "755800",
    "end": "758890"
  },
  {
    "text": "daughters who like my little pony like",
    "start": "758890",
    "end": "760540"
  },
  {
    "text": "my daughters and it's really funny but",
    "start": "760540",
    "end": "762400"
  },
  {
    "text": "it's actually a very important aspect to",
    "start": "762400",
    "end": "764350"
  },
  {
    "text": "be aware of if you're doing lock free if",
    "start": "764350",
    "end": "766300"
  },
  {
    "text": "you're doing concurrency it's important",
    "start": "766300",
    "end": "768760"
  },
  {
    "text": "to be aware that some types are not",
    "start": "768760",
    "end": "771390"
  },
  {
    "text": "naturally amenable to using these",
    "start": "771390",
    "end": "775060"
  },
  {
    "text": "operations so then there was a tweet",
    "start": "775060",
    "end": "778450"
  },
  {
    "text": "about it I think a couple weeks ago",
    "start": "778450",
    "end": "780630"
  },
  {
    "text": "right so next terminators how my foot",
    "start": "780630",
    "end": "784960"
  },
  {
    "start": "783000",
    "end": "783000"
  },
  {
    "text": "time I'm good okay there are many many",
    "start": "784960",
    "end": "790480"
  },
  {
    "text": "many ways for your program to die in C++",
    "start": "790480",
    "end": "793630"
  },
  {
    "text": "I know it's sad occurrence and it's",
    "start": "793630",
    "end": "797350"
  },
  {
    "text": "sometimes very painful but in fact there",
    "start": "797350",
    "end": "800320"
  },
  {
    "text": "are many ways to do it and some and most",
    "start": "800320",
    "end": "803290"
  },
  {
    "text": "of them are this",
    "start": "803290",
    "end": "804050"
  },
  {
    "text": "from each other and it's one of the",
    "start": "804050",
    "end": "806120"
  },
  {
    "text": "things that's really important to be",
    "start": "806120",
    "end": "807950"
  },
  {
    "text": "aware of and to know and to know how to",
    "start": "807950",
    "end": "812930"
  },
  {
    "text": "handle these some of these are",
    "start": "812930",
    "end": "814870"
  },
  {
    "text": "potentially recoverable some of them you",
    "start": "814870",
    "end": "817190"
  },
  {
    "text": "can intercept and at least do some maybe",
    "start": "817190",
    "end": "820160"
  },
  {
    "text": "do some logging or try to recover some",
    "start": "820160",
    "end": "823029"
  },
  {
    "text": "somehow and some of them here there's a",
    "start": "823029",
    "end": "828079"
  },
  {
    "text": "short list of several such functions",
    "start": "828079",
    "end": "831680"
  },
  {
    "text": "like STD Exodus t the abort terminate",
    "start": "831680",
    "end": "833690"
  },
  {
    "text": "signal and race and these are only the",
    "start": "833690",
    "end": "835700"
  },
  {
    "text": "C++ versions there are also the C",
    "start": "835700",
    "end": "838160"
  },
  {
    "text": "versions and there are some platform",
    "start": "838160",
    "end": "840800"
  },
  {
    "text": "specific ones as well I actually tried",
    "start": "840800",
    "end": "844339"
  },
  {
    "text": "understanding that a couple of years ago",
    "start": "844339",
    "end": "846649"
  },
  {
    "text": "and I drew this diagram the font is too",
    "start": "846649",
    "end": "850760"
  },
  {
    "text": "small even for me to it here because I",
    "start": "850760",
    "end": "852980"
  },
  {
    "text": "don't actually intend for you to go into",
    "start": "852980",
    "end": "855470"
  },
  {
    "text": "the details you can see the orange the",
    "start": "855470",
    "end": "857899"
  },
  {
    "text": "yellow line here that's normal program",
    "start": "857899",
    "end": "859730"
  },
  {
    "text": "termination so basically when you say",
    "start": "859730",
    "end": "862040"
  },
  {
    "text": "return from main this is what happens so",
    "start": "862040",
    "end": "864380"
  },
  {
    "text": "even that's not as trivial as it might",
    "start": "864380",
    "end": "866570"
  },
  {
    "text": "appear but there are many many other",
    "start": "866570",
    "end": "868880"
  },
  {
    "text": "ways to end the program some of them use",
    "start": "868880",
    "end": "872649"
  },
  {
    "text": "terminate might call a board and there",
    "start": "872649",
    "end": "875180"
  },
  {
    "text": "you can set different types of handlers",
    "start": "875180",
    "end": "877250"
  },
  {
    "text": "and what happens when exceptions aren't",
    "start": "877250",
    "end": "879440"
  },
  {
    "text": "caught and there are many many different",
    "start": "879440",
    "end": "881029"
  },
  {
    "text": "ways and again this is really important",
    "start": "881029",
    "end": "883190"
  },
  {
    "text": "if you're writing robust code if you're",
    "start": "883190",
    "end": "886610"
  },
  {
    "text": "writing systems that should fail in",
    "start": "886610",
    "end": "889250"
  },
  {
    "text": "history in deterministic ways and you",
    "start": "889250",
    "end": "891170"
  },
  {
    "text": "need to identify conditions were",
    "start": "891170",
    "end": "895390"
  },
  {
    "text": "unexpected terminations then there are",
    "start": "895390",
    "end": "898420"
  },
  {
    "text": "multiple ways that you can try at least",
    "start": "898420",
    "end": "900620"
  },
  {
    "text": "to intercept these calls and maybe",
    "start": "900620",
    "end": "903709"
  },
  {
    "text": "extract some information for your",
    "start": "903709",
    "end": "906290"
  },
  {
    "text": "logging systems for debugging so again",
    "start": "906290",
    "end": "910130"
  },
  {
    "text": "it's fun to think about the terminator",
    "start": "910130",
    "end": "912860"
  },
  {
    "text": "but again these are things that when",
    "start": "912860",
    "end": "914810"
  },
  {
    "text": "you're writing robust code you have to",
    "start": "914810",
    "end": "917270"
  },
  {
    "text": "be aware that these things can help",
    "start": "917270",
    "end": "920770"
  },
  {
    "text": "okay this is a bit tongue-in-cheek the",
    "start": "921960",
    "end": "924120"
  },
  {
    "start": "923000",
    "end": "923000"
  },
  {
    "text": "the unicorns there was a proposal called",
    "start": "924120",
    "end": "926850"
  },
  {
    "text": "the unified call syntax proposal which",
    "start": "926850",
    "end": "930750"
  },
  {
    "text": "as at least as of now it wasn't accepted",
    "start": "930750",
    "end": "934770"
  },
  {
    "text": "into C++ but I think it's a very against",
    "start": "934770",
    "end": "936839"
  },
  {
    "text": "it it's an interesting proposal and it",
    "start": "936839",
    "end": "938610"
  },
  {
    "text": "has some interesting reasoning and",
    "start": "938610",
    "end": "940860"
  },
  {
    "text": "rationale behind it and basically what",
    "start": "940860",
    "end": "943380"
  },
  {
    "text": "it means is that when we're calling a",
    "start": "943380",
    "end": "944730"
  },
  {
    "text": "function f with two arguments x and y if",
    "start": "944730",
    "end": "948750"
  },
  {
    "text": "there is no such function found by the",
    "start": "948750",
    "end": "952370"
  },
  {
    "text": "function lookup it's it might actually",
    "start": "952370",
    "end": "955560"
  },
  {
    "text": "try to find on the first object X a",
    "start": "955560",
    "end": "959640"
  },
  {
    "text": "method called F taking the second",
    "start": "959640",
    "end": "962310"
  },
  {
    "text": "argument as its in this case that first",
    "start": "962310",
    "end": "964890"
  },
  {
    "text": "argument so I knew you might think okay",
    "start": "964890",
    "end": "967560"
  },
  {
    "text": "that's weird why would you do that but",
    "start": "967560",
    "end": "970860"
  },
  {
    "text": "in fact member functions are just sort",
    "start": "970860",
    "end": "974160"
  },
  {
    "text": "of syntactic wrappers for a global",
    "start": "974160",
    "end": "977160"
  },
  {
    "text": "function call with its first argument as",
    "start": "977160",
    "end": "979560"
  },
  {
    "text": "this as this is the first type so you",
    "start": "979560",
    "end": "982529"
  },
  {
    "text": "could think about it as a generalization",
    "start": "982529",
    "end": "984060"
  },
  {
    "text": "of the method call and the English",
    "start": "984060",
    "end": "986790"
  },
  {
    "text": "transformation does not was not proposed",
    "start": "986790",
    "end": "989220"
  },
  {
    "text": "so if I call a method it's not going to",
    "start": "989220",
    "end": "991440"
  },
  {
    "text": "look for some global free function and",
    "start": "991440",
    "end": "993330"
  },
  {
    "text": "passed the object in that way and what",
    "start": "993330",
    "end": "996860"
  },
  {
    "text": "again it seems a bit far-fetched but now",
    "start": "996860",
    "end": "999510"
  },
  {
    "text": "I'm going to give you two examples you",
    "start": "999510",
    "end": "1000680"
  },
  {
    "text": "see that you're actually using this",
    "start": "1000680",
    "end": "1002029"
  },
  {
    "text": "every day and you may might not have",
    "start": "1002029",
    "end": "1004040"
  },
  {
    "text": "noticed is that for example vector has",
    "start": "1004040",
    "end": "1006980"
  },
  {
    "text": "both the dot begin method and there is",
    "start": "1006980",
    "end": "1009320"
  },
  {
    "text": "the global STD begin which knows how to",
    "start": "1009320",
    "end": "1011180"
  },
  {
    "text": "call the container begin or swap has",
    "start": "1011180",
    "end": "1014750"
  },
  {
    "text": "often has two implementations one for as",
    "start": "1014750",
    "end": "1018529"
  },
  {
    "text": "a global function and one is a method so",
    "start": "1018529",
    "end": "1021580"
  },
  {
    "text": "the idea behind this proposal was to",
    "start": "1021580",
    "end": "1025308"
  },
  {
    "text": "reduce the burden of writing special",
    "start": "1025309",
    "end": "1028100"
  },
  {
    "text": "code for methods and for as global free",
    "start": "1028100",
    "end": "1030860"
  },
  {
    "text": "functions but again it was relatively",
    "start": "1030860",
    "end": "1033620"
  },
  {
    "text": "controversial because some people",
    "start": "1033620",
    "end": "1035209"
  },
  {
    "text": "believe that it might break some legacy",
    "start": "1035209",
    "end": "1037130"
  },
  {
    "text": "code I don't want to go into that",
    "start": "1037130",
    "end": "1039010"
  },
  {
    "text": "argument but again at the moment it",
    "start": "1039010",
    "end": "1042319"
  },
  {
    "text": "hasn't been adopted however I did",
    "start": "1042319",
    "end": "1044480"
  },
  {
    "text": "promise you unicorns and I can offer you",
    "start": "1044480",
    "end": "1047750"
  },
  {
    "start": "1046000",
    "end": "1046000"
  },
  {
    "text": "this piece of code of the unicorn called",
    "start": "1047750",
    "end": "1049790"
  },
  {
    "text": "sinter I'll give you a three-second a",
    "start": "1049790",
    "end": "1052220"
  },
  {
    "text": "couple seconds to read it",
    "start": "1052220",
    "end": "1056020"
  },
  {
    "text": "and I will say that the Unicode",
    "start": "1056020",
    "end": "1058909"
  },
  {
    "text": "character this is unicode characters and",
    "start": "1058909",
    "end": "1061460"
  },
  {
    "text": "our many Unicode characters are valid",
    "start": "1061460",
    "end": "1064700"
  },
  {
    "text": "C++ identifiers so this calls this code",
    "start": "1064700",
    "end": "1067429"
  },
  {
    "text": "actually compiles and run as expected I",
    "start": "1067429",
    "end": "1070010"
  },
  {
    "text": "don't know what you expect but it runs",
    "start": "1070010",
    "end": "1072320"
  },
  {
    "text": "as expected as it yeah so we have a",
    "start": "1072320",
    "end": "1075200"
  },
  {
    "text": "struct called however you pronounce the",
    "start": "1075200",
    "end": "1080480"
  },
  {
    "text": "Unicorn and you can construct it from",
    "start": "1080480",
    "end": "1082640"
  },
  {
    "text": "integer it can convert to an integer",
    "start": "1082640",
    "end": "1084110"
  },
  {
    "text": "there is a user-defined literal of a",
    "start": "1084110",
    "end": "1087980"
  },
  {
    "text": "unicorn and of course we can define for",
    "start": "1087980",
    "end": "1090140"
  },
  {
    "text": "the two line return for the tooth from a",
    "start": "1090140",
    "end": "1091640"
  },
  {
    "text": "right so this is fun little example our",
    "start": "1091640",
    "end": "1099529"
  },
  {
    "start": "1099000",
    "end": "1099000"
  },
  {
    "text": "next friend our Voldemort types who here",
    "start": "1099529",
    "end": "1103309"
  },
  {
    "text": "has ever heard of Voldemort types okay I",
    "start": "1103309",
    "end": "1106850"
  },
  {
    "text": "thought I thought most of you learn",
    "start": "1106850",
    "end": "1108620"
  },
  {
    "text": "something",
    "start": "1108620",
    "end": "1109190"
  },
  {
    "text": "okay so Voldemort app is the concept",
    "start": "1109190",
    "end": "1110929"
  },
  {
    "text": "that comes from D actually I think it",
    "start": "1110929",
    "end": "1112820"
  },
  {
    "text": "was the name was given by Walter bright",
    "start": "1112820",
    "end": "1116450"
  },
  {
    "text": "one of these creators and basically it's",
    "start": "1116450",
    "end": "1119960"
  },
  {
    "text": "a type that cannot be named outside the",
    "start": "1119960",
    "end": "1121730"
  },
  {
    "text": "scope of its that it's declared in but",
    "start": "1121730",
    "end": "1123799"
  },
  {
    "text": "it can actually be used outside just as",
    "start": "1123799",
    "end": "1126740"
  },
  {
    "text": "if you did declare it so if you look at",
    "start": "1126740",
    "end": "1129080"
  },
  {
    "text": "this simple example we have a lambda",
    "start": "1129080",
    "end": "1131750"
  },
  {
    "text": "functions create Voldemort type and I'm",
    "start": "1131750",
    "end": "1134029"
  },
  {
    "text": "declaring the type Voldemort as a struct",
    "start": "1134029",
    "end": "1136669"
  },
  {
    "text": "inside the lambda write it Jenny just",
    "start": "1136669",
    "end": "1139100"
  },
  {
    "text": "has a certain method and I'm returning",
    "start": "1139100",
    "end": "1141830"
  },
  {
    "text": "an object right here I'm returning an",
    "start": "1141830",
    "end": "1144860"
  },
  {
    "text": "object of Voldemort of the Voldemort",
    "start": "1144860",
    "end": "1148010"
  },
  {
    "text": "type now inside our main function there",
    "start": "1148010",
    "end": "1150529"
  },
  {
    "text": "is no way that the type system doesn't",
    "start": "1150529",
    "end": "1154250"
  },
  {
    "text": "give us a way to access the name of this",
    "start": "1154250",
    "end": "1156590"
  },
  {
    "text": "class because this is a type defined",
    "start": "1156590",
    "end": "1160460"
  },
  {
    "text": "inside the scope of a lambda and there",
    "start": "1160460",
    "end": "1162590"
  },
  {
    "text": "is no way to get into into the scope the",
    "start": "1162590",
    "end": "1164750"
  },
  {
    "text": "name of this lambda however if we use",
    "start": "1164750",
    "end": "1169580"
  },
  {
    "text": "the auto keyword and we just said Auto I",
    "start": "1169580",
    "end": "1172010"
  },
  {
    "text": "name about create Voldemort type then we",
    "start": "1172010",
    "end": "1175429"
  },
  {
    "text": "can deckle type on that and create a new",
    "start": "1175429",
    "end": "1177320"
  },
  {
    "text": "one we can call its methods and",
    "start": "1177320",
    "end": "1178940"
  },
  {
    "text": "everything works as we expect so it's an",
    "start": "1178940",
    "end": "1182149"
  },
  {
    "text": "interesting it's an interesting quirk of",
    "start": "1182149",
    "end": "1185570"
  },
  {
    "text": "the language",
    "start": "1185570",
    "end": "1187770"
  },
  {
    "text": "some object-oriented languages like Java",
    "start": "1187770",
    "end": "1190080"
  },
  {
    "text": "when you're reading about design",
    "start": "1190080",
    "end": "1192810"
  },
  {
    "text": "patterns that kind of thing it's very",
    "start": "1192810",
    "end": "1194550"
  },
  {
    "text": "common to have abstract functions which",
    "start": "1194550",
    "end": "1196950"
  },
  {
    "text": "we turn concrete types I didn't wanna",
    "start": "1196950",
    "end": "1199260"
  },
  {
    "text": "add a layer of inheritance and",
    "start": "1199260",
    "end": "1202590"
  },
  {
    "text": "interfaces here but that's definitely",
    "start": "1202590",
    "end": "1203850"
  },
  {
    "text": "one of the main usages so you can",
    "start": "1203850",
    "end": "1206370"
  },
  {
    "text": "generate a concrete derived type from",
    "start": "1206370",
    "end": "1209670"
  },
  {
    "text": "some known interface and then you have",
    "start": "1209670",
    "end": "1212160"
  },
  {
    "text": "this complete separation in terms of",
    "start": "1212160",
    "end": "1215100"
  },
  {
    "text": "type so nobody can actually for example",
    "start": "1215100",
    "end": "1217320"
  },
  {
    "text": "dynamic cast it down into the type",
    "start": "1217320",
    "end": "1219270"
  },
  {
    "text": "because there's no way to name this type",
    "start": "1219270",
    "end": "1221280"
  },
  {
    "text": "so it gives like a very strong",
    "start": "1221280",
    "end": "1223490"
  },
  {
    "text": "decoupling of types so again it's a fun",
    "start": "1223490",
    "end": "1226890"
  },
  {
    "text": "name but it it might actually be useful",
    "start": "1226890",
    "end": "1228900"
  },
  {
    "text": "in certain contexts right so we're down",
    "start": "1228900",
    "end": "1235860"
  },
  {
    "text": "to Z okay cool",
    "start": "1235860",
    "end": "1237240"
  },
  {
    "start": "1236000",
    "end": "1236000"
  },
  {
    "text": "so zombies what happens to an object in",
    "start": "1237240",
    "end": "1243050"
  },
  {
    "text": "scope after it's been moved from but",
    "start": "1243050",
    "end": "1247350"
  },
  {
    "text": "this might seem like a philosophical",
    "start": "1247350",
    "end": "1249450"
  },
  {
    "text": "question but it's actually a very",
    "start": "1249450",
    "end": "1250920"
  },
  {
    "text": "serious question and there is no I",
    "start": "1250920",
    "end": "1255110"
  },
  {
    "text": "should I say there is no answer that's",
    "start": "1255110",
    "end": "1259140"
  },
  {
    "text": "completely agreed upon so some people",
    "start": "1259140",
    "end": "1261660"
  },
  {
    "text": "believe the standard says that it should",
    "start": "1261660",
    "end": "1264450"
  },
  {
    "text": "be valid but unspecified yeah the first",
    "start": "1264450",
    "end": "1272730"
  },
  {
    "text": "one valid one but unspecified that's",
    "start": "1272730",
    "end": "1274680"
  },
  {
    "text": "standard library types exactly that's",
    "start": "1274680",
    "end": "1276960"
  },
  {
    "text": "what I did although it's not always even",
    "start": "1276960",
    "end": "1280530"
  },
  {
    "text": "clear what that means I think basically",
    "start": "1280530",
    "end": "1281880"
  },
  {
    "text": "it means that you can call methods that",
    "start": "1281880",
    "end": "1284310"
  },
  {
    "text": "don't access any of the members",
    "start": "1284310",
    "end": "1287180"
  },
  {
    "text": "something like that right yep",
    "start": "1287180",
    "end": "1293540"
  },
  {
    "text": "yes exactly so there's not the in the",
    "start": "1311059",
    "end": "1314099"
  },
  {
    "text": "library it's considered I think the okay",
    "start": "1314099",
    "end": "1346489"
  },
  {
    "text": "yeah but that's what I mean that there",
    "start": "1349999",
    "end": "1352469"
  },
  {
    "text": "is no single answer because you're",
    "start": "1352469",
    "end": "1354509"
  },
  {
    "text": "basically it's the typical surpluses",
    "start": "1354509",
    "end": "1356159"
  },
  {
    "text": "under you we trust you you do what you",
    "start": "1356159",
    "end": "1358289"
  },
  {
    "text": "think is right in your context like we",
    "start": "1358289",
    "end": "1360089"
  },
  {
    "text": "don't we're not going to limit you but",
    "start": "1360089",
    "end": "1361919"
  },
  {
    "text": "again it is a type of zombie and it is",
    "start": "1361919",
    "end": "1363599"
  },
  {
    "text": "an aspect that whenever you're writing",
    "start": "1363599",
    "end": "1365669"
  },
  {
    "text": "move operations it's something you need",
    "start": "1365669",
    "end": "1368399"
  },
  {
    "text": "to consider and somehow you don't see a",
    "start": "1368399",
    "end": "1371189"
  },
  {
    "text": "lot of discussions about what happens to",
    "start": "1371189",
    "end": "1372899"
  },
  {
    "text": "these husks of objects and sometimes",
    "start": "1372899",
    "end": "1375449"
  },
  {
    "text": "they do make sense sometimes they don't",
    "start": "1375449",
    "end": "1377399"
  },
  {
    "text": "I know there was some discussion with",
    "start": "1377399",
    "end": "1379859"
  },
  {
    "text": "Eric nibbler about an ancient parent",
    "start": "1379859",
    "end": "1383369"
  },
  {
    "text": "about destructive move again these are",
    "start": "1383369",
    "end": "1385199"
  },
  {
    "text": "like future things that might sometimes",
    "start": "1385199",
    "end": "1387919"
  },
  {
    "text": "be considered at the moment it's just",
    "start": "1387919",
    "end": "1393499"
  },
  {
    "text": "something that you need to consider when",
    "start": "1393499",
    "end": "1395579"
  },
  {
    "text": "you're writing these types which have",
    "start": "1395579",
    "end": "1396989"
  },
  {
    "text": "explicit move semantics of course",
    "start": "1396989",
    "end": "1400609"
  },
  {
    "text": "zombies are although it might appear so",
    "start": "1400609",
    "end": "1403499"
  },
  {
    "text": "they're unrelated to STD decay so you",
    "start": "1403499",
    "end": "1406529"
  },
  {
    "text": "know it appears to be related but it's",
    "start": "1406529",
    "end": "1408899"
  },
  {
    "text": "not however these are not the only",
    "start": "1408899",
    "end": "1413699"
  },
  {
    "text": "zombies in the language because C++ is a",
    "start": "1413699",
    "end": "1416129"
  },
  {
    "text": "very rich language and I told you the",
    "start": "1416129",
    "end": "1418169"
  },
  {
    "text": "salaries are extremely deep so these are",
    "start": "1418169",
    "end": "1420449"
  },
  {
    "text": "not only some B's and in fact we have a",
    "start": "1420449",
    "end": "1423659"
  },
  {
    "start": "1422000",
    "end": "1422000"
  },
  {
    "text": "brain-eating zombies in in the standard",
    "start": "1423659",
    "end": "1426299"
  },
  {
    "text": "this",
    "start": "1426299",
    "end": "1426989"
  },
  {
    "text": "taken verbatim from the standard so go",
    "start": "1426989",
    "end": "1430409"
  },
  {
    "text": "open your your standard I'm sure it's on",
    "start": "1430409",
    "end": "1432450"
  },
  {
    "text": "your bedside table right who has the",
    "start": "1432450",
    "end": "1435479"
  },
  {
    "text": "standard done is a bit set ever in your",
    "start": "1435479",
    "end": "1437639"
  },
  {
    "text": "phone okay at least two people so you go",
    "start": "1437639",
    "end": "1442739"
  },
  {
    "text": "to the index and you see brains named",
    "start": "1442739",
    "end": "1444299"
  },
  {
    "text": "names that want to eat your right so",
    "start": "1444299",
    "end": "1447989"
  },
  {
    "text": "it's actually under standard that this",
    "start": "1447989",
    "end": "1449849"
  },
  {
    "text": "is an international standard that you",
    "start": "1449849",
    "end": "1451349"
  },
  {
    "text": "pay 60 euros to read and living-dead",
    "start": "1451349",
    "end": "1454049"
  },
  {
    "text": "name of zombie names and in fact this",
    "start": "1454049",
    "end": "1457229"
  },
  {
    "text": "refers to what I say it's the standard",
    "start": "1457229",
    "end": "1459389"
  },
  {
    "text": "script it's where and names from the",
    "start": "1459389",
    "end": "1462929"
  },
  {
    "text": "standard go to die or go to be buried",
    "start": "1462929",
    "end": "1465389"
  },
  {
    "text": "but they're actually zombies because if",
    "start": "1465389",
    "end": "1467220"
  },
  {
    "text": "you're maintaining legacy code then I",
    "start": "1467220",
    "end": "1471239"
  },
  {
    "text": "pity you but you still have to handle",
    "start": "1471239",
    "end": "1474570"
  },
  {
    "text": "Auto pointer maybe and the binary",
    "start": "1474570",
    "end": "1476729"
  },
  {
    "text": "function by a bind first I just put a",
    "start": "1476729",
    "end": "1478590"
  },
  {
    "text": "small list of some of these things that",
    "start": "1478590",
    "end": "1480690"
  },
  {
    "text": "you you'll find there but I think that's",
    "start": "1480690",
    "end": "1483840"
  },
  {
    "text": "really cool that people are under",
    "start": "1483840",
    "end": "1487619"
  },
  {
    "text": "committee that they have kind of humor",
    "start": "1487619",
    "end": "1490559"
  },
  {
    "text": "ride home humor I guess and and these",
    "start": "1490559",
    "end": "1494039"
  },
  {
    "text": "are the zombies with brains and actually",
    "start": "1494039",
    "end": "1497700"
  },
  {
    "text": "I took up I took out some slides because",
    "start": "1497700",
    "end": "1499529"
  },
  {
    "text": "I wasn't sure about the timing it really",
    "start": "1499529",
    "end": "1501210"
  },
  {
    "text": "depends on the crowd and how so this is",
    "start": "1501210",
    "end": "1504149"
  },
  {
    "text": "my last slide and then I have two more",
    "start": "1504149",
    "end": "1505529"
  },
  {
    "text": "because this is the off by two problem",
    "start": "1505529",
    "end": "1507840"
  },
  {
    "text": "here so you know there are only a be",
    "start": "1507840",
    "end": "1510419"
  },
  {
    "text": "honest said that there are only two",
    "start": "1510419",
    "end": "1511559"
  },
  {
    "text": "kinds of languages the ones people",
    "start": "1511559",
    "end": "1512789"
  },
  {
    "text": "complain about and the ones nobody uses",
    "start": "1512789",
    "end": "1514950"
  },
  {
    "text": "and I think this is like the perfect way",
    "start": "1514950",
    "end": "1516840"
  },
  {
    "text": "to end this talk because you know",
    "start": "1516840",
    "end": "1519539"
  },
  {
    "text": "everybody here loves C++ and we all know",
    "start": "1519539",
    "end": "1521639"
  },
  {
    "text": "that the dark corners but it's always",
    "start": "1521639",
    "end": "1523109"
  },
  {
    "text": "good to see them and learn about them so",
    "start": "1523109",
    "end": "1525779"
  },
  {
    "text": "yeah that's it and I still have a few",
    "start": "1525779",
    "end": "1528090"
  },
  {
    "text": "more minutes so I go to the other two so",
    "start": "1528090",
    "end": "1531509"
  },
  {
    "text": "we have a shadow variables again this",
    "start": "1531509",
    "end": "1534299"
  },
  {
    "text": "something goes way back to many other",
    "start": "1534299",
    "end": "1536399"
  },
  {
    "text": "languages but I think especially for",
    "start": "1536399",
    "end": "1539909"
  },
  {
    "text": "beginners it might be confusing and if",
    "start": "1539909",
    "end": "1542369"
  },
  {
    "text": "you're not a beginner you should avoid",
    "start": "1542369",
    "end": "1543840"
  },
  {
    "text": "writing this type of code I think most",
    "start": "1543840",
    "end": "1545669"
  },
  {
    "text": "compilers will omit warnings about this",
    "start": "1545669",
    "end": "1549289"
  },
  {
    "text": "and I just I made a really contrived",
    "start": "1549289",
    "end": "1553349"
  },
  {
    "text": "example here where at the beginning X is",
    "start": "1553349",
    "end": "1557519"
  },
  {
    "text": "some kind of",
    "start": "1557519",
    "end": "1558970"
  },
  {
    "text": "it's a billion in the outer scope and",
    "start": "1558970",
    "end": "1561129"
  },
  {
    "text": "then inside the function it's the name",
    "start": "1561129",
    "end": "1564099"
  },
  {
    "text": "of the it's a floating type",
    "start": "1564099",
    "end": "1565690"
  },
  {
    "text": "floating-point argument and then inside",
    "start": "1565690",
    "end": "1569049"
  },
  {
    "text": "before it becomes an integer and then",
    "start": "1569049",
    "end": "1570669"
  },
  {
    "text": "inside the capture actually it's it",
    "start": "1570669",
    "end": "1573279"
  },
  {
    "text": "captures some STD string and inside the",
    "start": "1573279",
    "end": "1577299"
  },
  {
    "text": "lambda it becomes the vehicle that",
    "start": "1577299",
    "end": "1581580"
  },
  {
    "text": "destructuring structured binding thank",
    "start": "1581580",
    "end": "1585759"
  },
  {
    "text": "you yeah and and in that case it becomes",
    "start": "1585759",
    "end": "1587769"
  },
  {
    "text": "an unsigned long so in every scope it",
    "start": "1587769",
    "end": "1591369"
  },
  {
    "text": "actually has X refers to a totally",
    "start": "1591369",
    "end": "1593619"
  },
  {
    "text": "different variable with a totally",
    "start": "1593619",
    "end": "1595210"
  },
  {
    "text": "different type and the compiler doesn't",
    "start": "1595210",
    "end": "1597460"
  },
  {
    "text": "really care but you should care and",
    "start": "1597460",
    "end": "1599139"
  },
  {
    "text": "again this shouldn't pass code with you",
    "start": "1599139",
    "end": "1600909"
  },
  {
    "text": "and most compilers will omit warnings",
    "start": "1600909",
    "end": "1603039"
  },
  {
    "text": "about this but I think it's it's",
    "start": "1603039",
    "end": "1606759"
  },
  {
    "text": "interesting that it doesn't confuse the",
    "start": "1606759",
    "end": "1608889"
  },
  {
    "text": "type system but it will confuse your",
    "start": "1608889",
    "end": "1610389"
  },
  {
    "text": "peers so I hope that's not your goal",
    "start": "1610389",
    "end": "1612759"
  },
  {
    "text": "when you're writing code in my last",
    "start": "1612759",
    "end": "1615789"
  },
  {
    "text": "example are transparent objects so a",
    "start": "1615789",
    "end": "1620139"
  },
  {
    "text": "transparent function object accepts",
    "start": "1620139",
    "end": "1621879"
  },
  {
    "text": "argument of arbitrary types and uses",
    "start": "1621879",
    "end": "1623470"
  },
  {
    "text": "perfect forwarding basically it allows",
    "start": "1623470",
    "end": "1627580"
  },
  {
    "text": "us to to create function for example I",
    "start": "1627580",
    "end": "1630700"
  },
  {
    "text": "think that the best example is for set",
    "start": "1630700",
    "end": "1635080"
  },
  {
    "text": "find let's say we our lower bound so",
    "start": "1635080",
    "end": "1638320"
  },
  {
    "text": "they're comparison operators which at",
    "start": "1638320",
    "end": "1641229"
  },
  {
    "text": "least before we add forward perfect",
    "start": "1641229",
    "end": "1644440"
  },
  {
    "text": "forwarding with only we could only look",
    "start": "1644440",
    "end": "1646570"
  },
  {
    "text": "for and find objects of the same types",
    "start": "1646570",
    "end": "1648609"
  },
  {
    "text": "that the set was parameterize done so",
    "start": "1648609",
    "end": "1651460"
  },
  {
    "text": "the comparison operator would be",
    "start": "1651460",
    "end": "1652840"
  },
  {
    "text": "symmetric with regards to the same type",
    "start": "1652840",
    "end": "1655200"
  },
  {
    "text": "when we got perfect forwarding we can",
    "start": "1655200",
    "end": "1657759"
  },
  {
    "text": "have two what's called the transparent",
    "start": "1657759",
    "end": "1659379"
  },
  {
    "text": "object which allows us for example to",
    "start": "1659379",
    "end": "1661059"
  },
  {
    "text": "compare an employee to an age or in some",
    "start": "1661059",
    "end": "1665440"
  },
  {
    "text": "integer if as long as we do have a",
    "start": "1665440",
    "end": "1667479"
  },
  {
    "text": "comparison operator inside the scope",
    "start": "1667479",
    "end": "1669190"
  },
  {
    "text": "that can be found by the idea so it's a",
    "start": "1669190",
    "end": "1674200"
  },
  {
    "text": "funny name but it's actually very common",
    "start": "1674200",
    "end": "1676210"
  },
  {
    "text": "and and it's the kind of fixes to the",
    "start": "1676210",
    "end": "1679330"
  },
  {
    "text": "language that make our code much more",
    "start": "1679330",
    "end": "1682029"
  },
  {
    "text": "much easier to write and much more",
    "start": "1682029",
    "end": "1683499"
  },
  {
    "text": "expressive and the big",
    "start": "1683499",
    "end": "1684920"
  },
  {
    "text": "they will just write the code and it",
    "start": "1684920",
    "end": "1686600"
  },
  {
    "text": "will just work and there is no cost",
    "start": "1686600",
    "end": "1688880"
  },
  {
    "text": "penalty because for perfect forwarding",
    "start": "1688880",
    "end": "1691490"
  },
  {
    "text": "it's going to be as efficient as it can",
    "start": "1691490",
    "end": "1693410"
  },
  {
    "text": "be and it's going to do the right thing",
    "start": "1693410",
    "end": "1695620"
  },
  {
    "text": "but again it's important to know that it",
    "start": "1695620",
    "end": "1698300"
  },
  {
    "text": "actually happens in the background",
    "start": "1698300",
    "end": "1699650"
  },
  {
    "text": "because otherwise in certain cases",
    "start": "1699650",
    "end": "1702170"
  },
  {
    "text": "you'll get some strange behavior and not",
    "start": "1702170",
    "end": "1704270"
  },
  {
    "text": "understand why that happens so I think",
    "start": "1704270",
    "end": "1708170"
  },
  {
    "text": "that's my list for today in CPP CO and I",
    "start": "1708170",
    "end": "1710540"
  },
  {
    "text": "actually have a totally different",
    "start": "1710540",
    "end": "1712000"
  },
  {
    "text": "version of the stock with a totally",
    "start": "1712000",
    "end": "1714260"
  },
  {
    "text": "other set of creatures so if you're",
    "start": "1714260",
    "end": "1717800"
  },
  {
    "text": "there you're welcome to comment and",
    "start": "1717800",
    "end": "1719150"
  },
  {
    "text": "watch it and thank you very much and",
    "start": "1719150",
    "end": "1720920"
  },
  {
    "text": "questions",
    "start": "1720920",
    "end": "1723060"
  },
  {
    "text": "[Applause]",
    "start": "1723060",
    "end": "1729069"
  }
]