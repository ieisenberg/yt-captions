[
  {
    "text": "all right thank you we are good ah thank you everyone for getting out of",
    "start": "2639",
    "end": "7980"
  },
  {
    "text": "bed after the party um there's always a slight worry about being the first one on at 9 00 a.m after",
    "start": "7980",
    "end": "13440"
  },
  {
    "text": "the conference party but we made it so today I'm going to talk about something",
    "start": "13440",
    "end": "19440"
  },
  {
    "text": "called a bloom filter and this is kind of a story of two halves so the first half is uh kind of how we ended up with",
    "start": "19440",
    "end": "27000"
  },
  {
    "text": "these just crazy amounts of data that we had to process and the second half is my",
    "start": "27000",
    "end": "32578"
  },
  {
    "text": "kind of Investigations into a way to deal with it and that leading me to bloom filters",
    "start": "32579",
    "end": "38340"
  },
  {
    "text": "so the quick history first of all uh quite a few years ago I built a little side project I launched I started",
    "start": "38340",
    "end": "43800"
  },
  {
    "text": "working on this around 2013 and published it and opened it up for everybody to use in 2015 and it is a",
    "start": "43800",
    "end": "51420"
  },
  {
    "text": "um a product for Gathering security Telemetry from web browsers so all modern web browsers now for many many",
    "start": "51420",
    "end": "57780"
  },
  {
    "text": "years have the ability to have the security policies and security features configured by the",
    "start": "57780",
    "end": "64440"
  },
  {
    "text": "website that they're loading so you have a website you define a security policy you send it as a response header to the",
    "start": "64440",
    "end": "70260"
  },
  {
    "text": "browser with the page and then the browser will enforce that security policy and you can control things like what is the page allowed to do what is",
    "start": "70260",
    "end": "76260"
  },
  {
    "text": "it allowed to load where can it send data and if something happens that's in",
    "start": "76260",
    "end": "81780"
  },
  {
    "text": "breach of that policy or in violation of that policy as we call it you can ask the browser to send you a piece of",
    "start": "81780",
    "end": "87119"
  },
  {
    "text": "telemetry back a violation report so the idea being most people want to",
    "start": "87119",
    "end": "92220"
  },
  {
    "text": "use content security policy as it's called to control JavaScript it's a very powerful resource and one of the things that you can control is where where do",
    "start": "92220",
    "end": "100079"
  },
  {
    "text": "we load JavaScript from right like every page you'll have an expected set of resources that you want to load and",
    "start": "100079",
    "end": "106680"
  },
  {
    "text": "sometimes you might find your page loading a resource that you didn't expect to load now we call this",
    "start": "106680",
    "end": "112799"
  },
  {
    "text": "cross-site scripting where an attacker will somehow find a way to get script into the page that shouldn't be there",
    "start": "112799",
    "end": "119040"
  },
  {
    "text": "now this could be you know maybe it's an e-commerce site and you have a review section so somebody writes a review and",
    "start": "119040",
    "end": "124439"
  },
  {
    "text": "in the review they put this script tag and then you load the review on the page on subsequent page loads and if you",
    "start": "124439",
    "end": "130979"
  },
  {
    "text": "aren't properly sanitizing and doing your output encoding you will end up with presumably a key logger looking at",
    "start": "130979",
    "end": "137520"
  },
  {
    "text": "the source attribute now in this particular scenario we've observed since around about 2014 a",
    "start": "137520",
    "end": "143640"
  },
  {
    "text": "really particularly nasty Collective of attackers that we refer to as Mage cars people suspect they're Russian we don't",
    "start": "143640",
    "end": "150300"
  },
  {
    "text": "actually know and their specialty is finding ways to deposit this keylogger onto your site and they normally Target",
    "start": "150300",
    "end": "157099"
  },
  {
    "text": "e-commerce applications because when you get to the payment page you type in your full card number your security code and",
    "start": "157099",
    "end": "164280"
  },
  {
    "text": "all of your details and this tiny little keylogger some of these are shorts four lines this tiny little keylogger he's just",
    "start": "164280",
    "end": "170819"
  },
  {
    "text": "listening to the key presses and firing the key presses out of the back to a server control by the attackers and",
    "start": "170819",
    "end": "177180"
  },
  {
    "text": "they're just logging the key presses now there's been some really notable organizations hit by this attack and",
    "start": "177180",
    "end": "184260"
  },
  {
    "text": "alongside fines of millions and millions of dollars from data Regulators because things like my name and address are",
    "start": "184260",
    "end": "189780"
  },
  {
    "text": "generally stolen as well they also then get fined by the credit card companies or the payment card industry",
    "start": "189780",
    "end": "196200"
  },
  {
    "text": "and all from having a single script tag placed into the application now we all",
    "start": "196200",
    "end": "201599"
  },
  {
    "text": "know this shouldn't be here does anyone can look at this script tag and does anybody want this script tag on their",
    "start": "201599",
    "end": "207300"
  },
  {
    "text": "page right like everybody looks at this like oh evil.com keylogger.js like let's go so but the browser doesn't have that",
    "start": "207300",
    "end": "214680"
  },
  {
    "text": "context that we have right like the browser looks at this and it's like well it's syntactically valid my job is to",
    "start": "214680",
    "end": "220560"
  },
  {
    "text": "load it that's what I'm supposed to do now another kind of particularly interesting group that we've seen more",
    "start": "220560",
    "end": "226440"
  },
  {
    "text": "recently but they've now kind of closed down and no longer exist was called coin hive and what coin Hive did was they",
    "start": "226440",
    "end": "233580"
  },
  {
    "text": "they had like a legitimate idea and I'm Equity uh legitimate idea where you go",
    "start": "233580",
    "end": "239459"
  },
  {
    "text": "to a website they want to make Revenue they load adverts right and we all hate adverts they're you know privacy invasive and they bloat the page make it",
    "start": "239459",
    "end": "246420"
  },
  {
    "text": "heavy lots of people don't like adverts so kind Hive is like hey we have this JavaScript library that binds",
    "start": "246420",
    "end": "252060"
  },
  {
    "text": "cryptocurrency so instead of having like all of these horrible adverts all over your page what you do is you just put a",
    "start": "252060",
    "end": "257220"
  },
  {
    "text": "library on the page and then we'll just mine a little bit of cryptocurrency we'll borrow the CPU of your visitor",
    "start": "257220",
    "end": "263280"
  },
  {
    "text": "and they can you know pay a few cents in cryptocurrency whilst they're on your",
    "start": "263280",
    "end": "268500"
  },
  {
    "text": "site now I mean first of all even if that ended up being what actually happened I'm not",
    "start": "268500",
    "end": "274560"
  },
  {
    "text": "entirely sure how much I agree with that but that's also not what actually happened because what attackers realized was it's like hey if I take the kind",
    "start": "274560",
    "end": "280979"
  },
  {
    "text": "Hive library and I put it on your site all of your visitors will mine currency and send it to me so it ended up being",
    "start": "280979",
    "end": "288419"
  },
  {
    "text": "like a really particularly bad type of attack called crypto jacking where attackers would try",
    "start": "288419",
    "end": "294660"
  },
  {
    "text": "and put the library on your site and steal the CPU of all of your visitors to mine currency for themselves and again",
    "start": "294660",
    "end": "300180"
  },
  {
    "text": "there's some really notable coin Hive attacks including one I published the research on a few years back where we",
    "start": "300180",
    "end": "306960"
  },
  {
    "text": "found over 5000 government websites across the UK America Australia and New Zealand where the government sites had",
    "start": "306960",
    "end": "312960"
  },
  {
    "text": "been infected with coin Hive the exact Library here and all of the citizens of those countries when visiting government",
    "start": "312960",
    "end": "318780"
  },
  {
    "text": "websites were Mining cryptocurrency and sending it to some unknown attackers with an anonymous wallet so it happens",
    "start": "318780",
    "end": "326160"
  },
  {
    "text": "and you know the attackers are like well what's their overhead right they just find a way to put a script tag on your",
    "start": "326160",
    "end": "331740"
  },
  {
    "text": "site and then just watch their wallet and and now they're making money and alongside conehive magecar is the",
    "start": "331740",
    "end": "337860"
  },
  {
    "text": "most definitely still even today still ongoing since around about 2014 until",
    "start": "337860",
    "end": "343440"
  },
  {
    "text": "present day more recently if you followed the news you'll have seen organizations like British Airways got hit with Mage cart they got fined",
    "start": "343440",
    "end": "350340"
  },
  {
    "text": "millions of dollars for like just from the British data regulator for losing all of that data and then other data",
    "start": "350340",
    "end": "356699"
  },
  {
    "text": "Regulators around the world all because they ended up with a simple script tag on their page that shouldn't have been there",
    "start": "356699",
    "end": "362940"
  },
  {
    "text": "now the feature that I talk about a lot if you've ever seen me on Twitter or kind of followed me online I talk a lot",
    "start": "362940",
    "end": "368100"
  },
  {
    "text": "about content security policy because content security policy is the solution to this problem and the idea of a",
    "start": "368100",
    "end": "374820"
  },
  {
    "text": "Content security policy is is kind of simple it's a little bit tricky to deploy in practice sometimes but conceptually this",
    "start": "374820",
    "end": "381720"
  },
  {
    "text": "is very very simple so you have your HTTP response headers on your application and there's many there that",
    "start": "381720",
    "end": "387720"
  },
  {
    "text": "we'll all be familiar with and you add a new content security policy header and inside the header you",
    "start": "387720",
    "end": "394199"
  },
  {
    "text": "just write the policy the security policy of what should happen on your application so this is how you deliver",
    "start": "394199",
    "end": "400080"
  },
  {
    "text": "it to the client and this is what most people want to do they want to control",
    "start": "400080",
    "end": "405180"
  },
  {
    "text": "JavaScript so you would write a Content security policy we have a whole bunch of directives that allow you to control",
    "start": "405180",
    "end": "411300"
  },
  {
    "text": "different types of content so you can control like images fonts Styles you name it most people are kind of most",
    "start": "411300",
    "end": "417360"
  },
  {
    "text": "concerned with script because it's obviously the most powerful is the largest opportunity for things to go wrong and you would simply say here",
    "start": "417360",
    "end": "424800"
  },
  {
    "text": "what this policy says is self means I'm happy to load JavaScript from myself so if you're you know loading from",
    "start": "424800",
    "end": "432020"
  },
  {
    "text": "ndccconferences.com self would mean you're allowed to load JavaScript from ndccorferences.com",
    "start": "432020",
    "end": "437220"
  },
  {
    "text": "and also maybe you're loading jQuery from the jQuery CDM now the browser knows what is supposed",
    "start": "437220",
    "end": "443880"
  },
  {
    "text": "to happen on this page if we load JavaScript we're supposed to load it from these two locations",
    "start": "443880",
    "end": "449039"
  },
  {
    "text": "and it's that simple the browser now knows what should happen and like I say you can control",
    "start": "449039",
    "end": "454319"
  },
  {
    "text": "everything right like you can you can go wild and control all the types of content that you want",
    "start": "454319",
    "end": "461759"
  },
  {
    "text": "now this is really good because if we delivered the policy that we just looked at to the claim and we ended up with the",
    "start": "461759",
    "end": "467699"
  },
  {
    "text": "script tag that we looked at just a moment ago from evil.com the browser would look at the script tag",
    "start": "467699",
    "end": "472800"
  },
  {
    "text": "and be like okay right we've got a Content security policy The Source attribute says evil.com let's check",
    "start": "472800",
    "end": "478080"
  },
  {
    "text": "evil.com against the policy evil.com is not allowed the script tag would be blocked it would not load",
    "start": "478080",
    "end": "485520"
  },
  {
    "text": "and like crypto jacking is gone coin Hive is like completely dead magecard is dead everything is is stopped in its",
    "start": "485520",
    "end": "492180"
  },
  {
    "text": "tracks and that's really really powerful except you don't know it happened as a",
    "start": "492180",
    "end": "498479"
  },
  {
    "text": "site operator you sent the policy to the client all of these things happened in the client and the client has blocked",
    "start": "498479",
    "end": "503699"
  },
  {
    "text": "the evil JavaScript but I kind of need to know that that's happened because that's a really bad",
    "start": "503699",
    "end": "509220"
  },
  {
    "text": "indicator so one of the again more powerful features of content security policy is it has this report URI",
    "start": "509220",
    "end": "515760"
  },
  {
    "text": "directive and this is how you specify when something goes wrong I want you to",
    "start": "515760",
    "end": "521159"
  },
  {
    "text": "send a violation report here I want you to call back and tell me like hey you said this should happen but actually",
    "start": "521159",
    "end": "527040"
  },
  {
    "text": "this happened and I need to know about that because I need to go fix the underlying problem",
    "start": "527040",
    "end": "533519"
  },
  {
    "text": "so this is reporturi.com is the project the site that I created all of those years ago and I'm really bad at naming",
    "start": "533519",
    "end": "540000"
  },
  {
    "text": "things so I just borrowed the name of the feature in CSP that's why it's called report URI and you can see",
    "start": "540000",
    "end": "545820"
  },
  {
    "text": "you can specify any URL here where you want to send these violation reports to",
    "start": "545820",
    "end": "550980"
  },
  {
    "text": "and this is native functionality in the browser you don't have to deploy any code or an agent or a library to do this",
    "start": "550980",
    "end": "556800"
  },
  {
    "text": "this is native functionality in all mainstream browsers and all it will do now is dispatch a HTTP post request with",
    "start": "556800",
    "end": "564060"
  },
  {
    "text": "a Json payload to the location that you specified and it's like okay cool we went to this",
    "start": "564060",
    "end": "569220"
  },
  {
    "text": "website here and something happening that violated the script Source directive and this is what we blocked",
    "start": "569220",
    "end": "577140"
  },
  {
    "text": "now if I was to receive this I would basically start what I was doing and immediately go look at that page and",
    "start": "577140",
    "end": "582779"
  },
  {
    "text": "think why do I have this evil script tag on the page how did it get there how do I get rid of it and let's go and",
    "start": "582779",
    "end": "588420"
  },
  {
    "text": "immediately solve the problem but without reporting I wouldn't have known that now all those years ago I built the",
    "start": "588420",
    "end": "594540"
  },
  {
    "text": "service because I couldn't find a service that ingested these reports and would give me alerts and I was like well I'll build one because this sounds",
    "start": "594540",
    "end": "600899"
  },
  {
    "text": "really cool so this is this the type of data that we started ingesting at report URI and when",
    "start": "600899",
    "end": "608100"
  },
  {
    "text": "I built it I used it for about a year just for myself and I was like oh this is kind of useful I'll just you know I'll build a front end and I'll stick it",
    "start": "608100",
    "end": "614700"
  },
  {
    "text": "on the internet and I'm like hey free tools to do security stuff this will be awesome and we didn't process much data in the",
    "start": "614700",
    "end": "621420"
  },
  {
    "text": "first year after I kind of opened this up we were doing like 1 million Json payloads a",
    "start": "621420",
    "end": "627120"
  },
  {
    "text": "month I'm like okay you know this is kind of easy to process spread that out over the course of a month it's not so bad",
    "start": "627120",
    "end": "632700"
  },
  {
    "text": "and then more people agreed and were like hey that's a cool idea like I'll do it too and as time went by we started",
    "start": "632700",
    "end": "638640"
  },
  {
    "text": "processing more and more of these little Json payloads and then more and then",
    "start": "638640",
    "end": "644579"
  },
  {
    "text": "more and you know like for a very long time there the solution was just add more",
    "start": "644579",
    "end": "651060"
  },
  {
    "text": "Cloud right it's like oh we got more data we can just add more cloud like and we can just keep adding more Cloud to solve the problem but eventually like",
    "start": "651060",
    "end": "657180"
  },
  {
    "text": "adding more Cloud just gets really expensive and I was like we need to be a bit smarter about this there's only so",
    "start": "657180",
    "end": "662579"
  },
  {
    "text": "far that my kind of you know my coffee budget was being hammered by adding cloud",
    "start": "662579",
    "end": "667740"
  },
  {
    "text": "so I was like look we need to become more efficient we need to become smarter about how we're processing all this and",
    "start": "667740",
    "end": "674399"
  },
  {
    "text": "I tried loads of different things along the way so you know those Json payloads when they",
    "start": "674399",
    "end": "679740"
  },
  {
    "text": "come in whilst there is a defined standard for them every browser kind of has their own little interpretation on",
    "start": "679740",
    "end": "685620"
  },
  {
    "text": "how they should format them in the names of fields so we did some really heavy normalization on those Json payloads on",
    "start": "685620",
    "end": "691620"
  },
  {
    "text": "the way in we observed how people were using the UI to run queries over their data and we",
    "start": "691620",
    "end": "697380"
  },
  {
    "text": "saw like the most common patterns for time-based queries so we now bucket our data based on the most common query",
    "start": "697380",
    "end": "702779"
  },
  {
    "text": "patterns deduplication of similar reports again web browsers will add their own slight",
    "start": "702779",
    "end": "709320"
  },
  {
    "text": "little nuances to the Json payloads and we quickly learned that we could flatten a lot of those together to save",
    "start": "709320",
    "end": "714779"
  },
  {
    "text": "ourselves lots of database activity unfortunately browser extensions are not",
    "start": "714779",
    "end": "720660"
  },
  {
    "text": "our friends here so if you have a browser extension to let's say change the font on the page the browser",
    "start": "720660",
    "end": "726600"
  },
  {
    "text": "extension might inject a new font tag into the page and there is an API for them to allow that in content security",
    "start": "726600",
    "end": "732120"
  },
  {
    "text": "policy none of them do it so they inject the font tag into the page the font tag trips the CSP and causes a violation so",
    "start": "732120",
    "end": "739079"
  },
  {
    "text": "we've identified ways to filter all of these kinds of reports out because they're almost meaningless",
    "start": "739079",
    "end": "744420"
  },
  {
    "text": "and then we finally implemented a 90-day retention policy because we were I mean",
    "start": "744420",
    "end": "749519"
  },
  {
    "text": "even now with our 90-day retention policy we we generally have several hundred gigabytes of Json in the",
    "start": "749519",
    "end": "754920"
  },
  {
    "text": "database for our customers at present so we have a huge amount of data to work",
    "start": "754920",
    "end": "760200"
  },
  {
    "text": "with and it was this last one it was the 90-day retention policy that actually started to cause us some difficult to",
    "start": "760200",
    "end": "766680"
  },
  {
    "text": "solve problems because when a report comes in the report is telling you about",
    "start": "766680",
    "end": "772200"
  },
  {
    "text": "something on the page that has happened that should not happen according to the site operator this should not happen and",
    "start": "772200",
    "end": "778320"
  },
  {
    "text": "the number one question that we want to answer is this have we seen this report before",
    "start": "778320",
    "end": "784740"
  },
  {
    "text": "right it's like is this the first time that this thing has happened because if it is it's like a brand new",
    "start": "784740",
    "end": "790019"
  },
  {
    "text": "thing and we want to send an alert to the site operator and be like hey like this is the first time this has happened this is a new thing you should go look",
    "start": "790019",
    "end": "796260"
  },
  {
    "text": "at it now querying over the entire data set for every single report that's coming in",
    "start": "796260",
    "end": "803639"
  },
  {
    "text": "and bearing in mind now on average we do about 64 000 Json payloads a second in production right now like querying over",
    "start": "803639",
    "end": "809700"
  },
  {
    "text": "the entire data set every time one report comes in to say have we seen this report before it was virtually",
    "start": "809700",
    "end": "815220"
  },
  {
    "text": "impossible and then we have to remember we have a 90-day retention policy so we can't even",
    "start": "815220",
    "end": "821399"
  },
  {
    "text": "actually answer this question all we can really say is have we seen this report before in the last 90 days because prior",
    "start": "821399",
    "end": "827040"
  },
  {
    "text": "to that all of the data's gone but it's still the most commonly asked question that people wanted us to answer",
    "start": "827040",
    "end": "833339"
  },
  {
    "text": "is like we need to know if we get a report is this a brand new thing that we need to look at or is this a repeat of",
    "start": "833339",
    "end": "839700"
  },
  {
    "text": "something that has already been and this is the problem that I set out to solve how do we how do we do this how",
    "start": "839700",
    "end": "846779"
  },
  {
    "text": "do we take thousands and tens of thousands of these things a second and answer the question have we ever seen this before and can we solve the problem",
    "start": "846779",
    "end": "853740"
  },
  {
    "text": "of the retention policy how do we ask if we've seen something before if we've",
    "start": "853740",
    "end": "858779"
  },
  {
    "text": "deleted it and we don't have it now the answer that I came across after",
    "start": "858779",
    "end": "863940"
  },
  {
    "text": "a lot of research was a bloom filter now a bloom filter is a probabilistic",
    "start": "863940",
    "end": "869339"
  },
  {
    "text": "data structure and they allow you to process efficiently and in memory",
    "start": "869339",
    "end": "874700"
  },
  {
    "text": "enormous quantities of data now I've created a filter here for demonstration purposes and this is much much smaller",
    "start": "874700",
    "end": "881160"
  },
  {
    "text": "than you would expect to use but just for the purposes of the demo we've gone for what we refer to as the width of the",
    "start": "881160",
    "end": "886800"
  },
  {
    "text": "filter as 10 bits and you initialize the filter by setting all of the bits to zero",
    "start": "886800",
    "end": "892620"
  },
  {
    "text": "and then when we insert items into the filter we set the bits at a particular index using a hash function referred to",
    "start": "892620",
    "end": "899639"
  },
  {
    "text": "as K and in this example we're going to use two hash functions to insert items into the filter",
    "start": "899639",
    "end": "906420"
  },
  {
    "text": "so we have here k equals two so we have hash function one hash function two the",
    "start": "906420",
    "end": "912180"
  },
  {
    "text": "only requirement for these hash functions you want them to be as fast as possible because you want the minimal overhead for the insertion operation but",
    "start": "912180",
    "end": "918959"
  },
  {
    "text": "the only other thing that matters is that they are pairwise independent which means if you take these hash functions and hash an item they will always",
    "start": "918959",
    "end": "925740"
  },
  {
    "text": "generate independent indexes in the filter they will never generate the same index and that's all pairwise",
    "start": "925740",
    "end": "931320"
  },
  {
    "text": "independence means so we have an item a report that arrives we're going to refer to it as item a so",
    "start": "931320",
    "end": "937620"
  },
  {
    "text": "this report comes in it's a Json payload and we're going to insert it into our filter so that we can store the fact we",
    "start": "937620",
    "end": "943560"
  },
  {
    "text": "have seen this thing before we're going to record that in the filter so you take the first hash function",
    "start": "943560",
    "end": "949500"
  },
  {
    "text": "and then you hash item a so hash function number one we hash item a and then we simply modulus it with the width",
    "start": "949500",
    "end": "955980"
  },
  {
    "text": "so it just wraps it back around which gives us an index in the range of our wave now in this case we can see it's",
    "start": "955980",
    "end": "962820"
  },
  {
    "text": "giving us index two and then we hash it with the second hash function and that's giving us index four so all we do now is",
    "start": "962820",
    "end": "970019"
  },
  {
    "text": "simply set the two bits in the filter so we have now inserted item a into the",
    "start": "970019",
    "end": "976980"
  },
  {
    "text": "filter this filter is now storing the fact that we have previously observed item a and we continue Item B comes in right",
    "start": "976980",
    "end": "983940"
  },
  {
    "text": "the next report comes in so we take the first hash function and we hash Item B modulus it with the width to give us",
    "start": "983940",
    "end": "990480"
  },
  {
    "text": "index six and then we take the second hash function and we get index nine and all we do now",
    "start": "990480",
    "end": "995760"
  },
  {
    "text": "is we set bit six and we set bit nine in the filter this now represents that we",
    "start": "995760",
    "end": "1000980"
  },
  {
    "text": "have seen Item B so our Bloom filter now looks like this with the two items stored in the filter",
    "start": "1000980",
    "end": "1007820"
  },
  {
    "text": "but let's say another report comes in the next report comes in item C and we actually want to query the filter",
    "start": "1007820",
    "end": "1014300"
  },
  {
    "text": "to say have we seen this thing before have we seen this report whatever it might be before so in order to query the",
    "start": "1014300",
    "end": "1021740"
  },
  {
    "text": "filter what we do is exactly the same process we take the first hash function we hash item C and mod it with the width",
    "start": "1021740",
    "end": "1028040"
  },
  {
    "text": "to give us index four so we look up the bit at four and then we take the second hash",
    "start": "1028040",
    "end": "1033380"
  },
  {
    "text": "function hash function2 again we hash it mod it with a width it gives us index seven now index seven",
    "start": "1033380",
    "end": "1040459"
  },
  {
    "text": "the bit is not set so we can now say definitively we have not seen this item before because if we",
    "start": "1040459",
    "end": "1047418"
  },
  {
    "text": "had seen this item before and we had inserted it into the filter then bit 7 would have been set",
    "start": "1047419",
    "end": "1053900"
  },
  {
    "text": "so without querying the database and remembering that the filter is stored purely in memory we have now said well",
    "start": "1053900",
    "end": "1059360"
  },
  {
    "text": "we don't need to go look over the data set we don't need to query over those hundreds of gigabytes of data I can tell",
    "start": "1059360",
    "end": "1065720"
  },
  {
    "text": "you right now that we have not seen this item before because if we had the bit at",
    "start": "1065720",
    "end": "1071240"
  },
  {
    "text": "location 7 would have been set so this saved us enormous quantities of",
    "start": "1071240",
    "end": "1078980"
  },
  {
    "text": "activity against our database and this is a really simple way to say definitively like we can say with 100",
    "start": "1078980",
    "end": "1084760"
  },
  {
    "text": "certainty we have not seen this thing before if we come and get a duplicate report",
    "start": "1084760",
    "end": "1090380"
  },
  {
    "text": "let's say we get a duplicate of item a comes back later right we get the report of the same thing that's already",
    "start": "1090380",
    "end": "1096080"
  },
  {
    "text": "happened let's go through the process of querying the filter we take the hash function one hash it gives us index two",
    "start": "1096080",
    "end": "1102200"
  },
  {
    "text": "take hash function two and it gives us index four we look at index two we look at index four both of",
    "start": "1102200",
    "end": "1108500"
  },
  {
    "text": "the bits are set and then we can say we have seen this thing before",
    "start": "1108500",
    "end": "1114260"
  },
  {
    "text": "because the bits at the appropriate indexes have been set or can we",
    "start": "1114260",
    "end": "1121539"
  },
  {
    "text": "let's take a look at item D another new report that's just come in right we've never seen this report",
    "start": "1121880",
    "end": "1127640"
  },
  {
    "text": "before we're going to query against the filter if we hash item D with hash Function One it tells us to look up",
    "start": "1127640",
    "end": "1133400"
  },
  {
    "text": "index 4. and if we hash it with hash function number two it tells us to look up index",
    "start": "1133400",
    "end": "1138679"
  },
  {
    "text": "9. now in a very short demonstration that I've just given you we've never spoken before about item D we inserted A and B",
    "start": "1138679",
    "end": "1146360"
  },
  {
    "text": "and we queried C and now we're querying D we've never inserted D and we've never before seen d",
    "start": "1146360",
    "end": "1153440"
  },
  {
    "text": "but now the boom filter is telling me that we've seen item D before and actually what a bloom filter can't",
    "start": "1153440",
    "end": "1159980"
  },
  {
    "text": "tell you is that you have definitely seen it before a bloom filter can tell you that you",
    "start": "1159980",
    "end": "1166340"
  },
  {
    "text": "have definitely not seen it if one of those bits is not set that is 100 accurate",
    "start": "1166340",
    "end": "1172580"
  },
  {
    "text": "but if a bloom filter tells you that you have seen it before it can only tell you that you have",
    "start": "1172580",
    "end": "1178100"
  },
  {
    "text": "probably seen it before and this is why bloomfielders are referred to as probabilistic data structures they can",
    "start": "1178100",
    "end": "1185059"
  },
  {
    "text": "only give you a definitive on the negative and they can give you a probability on the positive as a",
    "start": "1185059",
    "end": "1192020"
  },
  {
    "text": "probabilistic data structure when you ask it the question is this item in the original data set it can tell you",
    "start": "1192020",
    "end": "1198559"
  },
  {
    "text": "definitely no with 100 accuracy or it can tell you yes with a probability that",
    "start": "1198559",
    "end": "1205520"
  },
  {
    "text": "this is a false positive now you can control FP as we refer to it the false positive",
    "start": "1205520",
    "end": "1211700"
  },
  {
    "text": "probability you can control that and you can Define what it is so you have to be sure that Bloomfield",
    "start": "1211700",
    "end": "1217880"
  },
  {
    "text": "has another similar probabilistic data structures that we'll look at are suitable for your use case our use case",
    "start": "1217880",
    "end": "1223580"
  },
  {
    "text": "was we need to know like if if this filter says you have definitely not seen this before and that is 100 accurate",
    "start": "1223580",
    "end": "1229340"
  },
  {
    "text": "that is perfectly suited for our requirements the filter will tell us you've definitely never seen this thing",
    "start": "1229340",
    "end": "1234440"
  },
  {
    "text": "and we can kick off alerts and start doing stuff without querying the database now you control the probability of false",
    "start": "1234440",
    "end": "1241460"
  },
  {
    "text": "positive when you set up the filter there's just a few parameters that you have some input on",
    "start": "1241460",
    "end": "1246799"
  },
  {
    "text": "as I said the width of the array I went for width 10 for demonstration purposes to keep it simple the width of your",
    "start": "1246799",
    "end": "1252980"
  },
  {
    "text": "array is going to be much much larger than this you also need to have some rough estimate of the number of items",
    "start": "1252980",
    "end": "1259039"
  },
  {
    "text": "that you plan to insert into the filter this can be a very rough estimate but it needs to be you know at least in the",
    "start": "1259039",
    "end": "1265039"
  },
  {
    "text": "ballpark you need to know how many items are we going to insert you then control the number of hash functions that are",
    "start": "1265039",
    "end": "1270860"
  },
  {
    "text": "used to insert an item so basically for each item we insert how many bits in the array are we going to set and for each",
    "start": "1270860",
    "end": "1276440"
  },
  {
    "text": "item we query how many bits are we going to check and then you also get to control the probability of false",
    "start": "1276440",
    "end": "1282500"
  },
  {
    "text": "positive so if the filter tells you you've seen this thing before and it says yes you have probably seen",
    "start": "1282500",
    "end": "1287600"
  },
  {
    "text": "this before you also get to control the false positive ratio now when you're setting the filter when",
    "start": "1287600",
    "end": "1294620"
  },
  {
    "text": "you're configuring it essentially you get to pick two of these items and then the other two are calculated for you so",
    "start": "1294620",
    "end": "1299900"
  },
  {
    "text": "you can pick the two things that you want to control if you have memory constraints you might have a maximum width limit you you hopefully you will",
    "start": "1299900",
    "end": "1307340"
  },
  {
    "text": "know approximately the number of items that are going to be in the filter or maybe you have very strict requirements around the probability for false",
    "start": "1307340",
    "end": "1313580"
  },
  {
    "text": "positive and you need to keep it exceptionally low but either way you pick the things that you can control that you want to control and then you",
    "start": "1313580",
    "end": "1320240"
  },
  {
    "text": "calculate the remaining values so depending on which items you want to control",
    "start": "1320240",
    "end": "1325340"
  },
  {
    "text": "these are the processes for calculating the other values it looks really scary but those Bloom filter calculators on",
    "start": "1325340",
    "end": "1330559"
  },
  {
    "text": "the internet and you can just go there and type in the numbers and they will give you the value so this is really really easy but you can see for example",
    "start": "1330559",
    "end": "1338059"
  },
  {
    "text": "if you don't set w w is controlled by the width of the array and your desired probability of false positive obviously",
    "start": "1338059",
    "end": "1344960"
  },
  {
    "text": "the more items you're going to set in the filter you can see that that will drive up the width of the filter because",
    "start": "1344960",
    "end": "1350059"
  },
  {
    "text": "obviously the filter needs to contain more items as you decide that you want a lower and lower false positive",
    "start": "1350059",
    "end": "1355460"
  },
  {
    "text": "probability again you have to increase the width of the filter so each of these things controls the",
    "start": "1355460",
    "end": "1361400"
  },
  {
    "text": "other when you create it now this kind of faces a bit of a problem",
    "start": "1361400",
    "end": "1367940"
  },
  {
    "text": "with us because I was like well you know within reason we don't really have any",
    "start": "1367940",
    "end": "1373039"
  },
  {
    "text": "kind of real memory constraints you know we're running this in a redis cache we can come across you know a VM with huge",
    "start": "1373039",
    "end": "1378980"
  },
  {
    "text": "amounts of RAM for very little money I was like okay so we don't really care so much about the width and like the number of items going in there and I'm like",
    "start": "1378980",
    "end": "1385640"
  },
  {
    "text": "well we have like an ever increasing amount of reports coming in over and over and",
    "start": "1385640",
    "end": "1390740"
  },
  {
    "text": "over time like it's just going up and up and up and up I was like so we need to come up with a number that's kind of future proof but also not too ridiculous",
    "start": "1390740",
    "end": "1397520"
  },
  {
    "text": "in the short term okay we didn't really care about because the hash Junctions are so cheap I was",
    "start": "1397520",
    "end": "1403280"
  },
  {
    "text": "like look let's let that be controlled by the algorithms like whatever it requires but then I did have some",
    "start": "1403280",
    "end": "1408500"
  },
  {
    "text": "requirements around the probability of false positive I wanted this to be pretty accurate so we calculated W based",
    "start": "1408500",
    "end": "1415340"
  },
  {
    "text": "on the fact that I wanted to insert over time approximately 7 billion items into this filter this was a number that I",
    "start": "1415340",
    "end": "1422659"
  },
  {
    "text": "just totally made up right like we don't know we know that yes whilst we're processing at the minute we average around 64 000 Json payloads a second",
    "start": "1422659",
    "end": "1429679"
  },
  {
    "text": "there is huge levels of duplication and our normalization as well we can de-duplicate that down to much smaller",
    "start": "1429679",
    "end": "1436039"
  },
  {
    "text": "numbers so I took that number projected it forwards over a few years and I came",
    "start": "1436039",
    "end": "1441799"
  },
  {
    "text": "up with seven billion so this was just my best guess for the filter so given that we now have the number of",
    "start": "1441799",
    "end": "1447500"
  },
  {
    "text": "items going in and the fact that I wanted a really small probability of false positive",
    "start": "1447500",
    "end": "1453020"
  },
  {
    "text": "we can now calculate the remaining value so you simply plug them in to the equations and then we come up with the",
    "start": "1453020",
    "end": "1460039"
  },
  {
    "text": "size of the filter now it's kind of big but also I was like",
    "start": "1460039",
    "end": "1466580"
  },
  {
    "text": "well we can spin up a reddish cache with like you know 64 gigs of RAM and it costs like 80 a month and I was like so",
    "start": "1466580",
    "end": "1473419"
  },
  {
    "text": "you know for what it's going to save us and what it's going to do I was like that's actually not so bad and I was like okay we'll spin up a reddish cache",
    "start": "1473419",
    "end": "1479360"
  },
  {
    "text": "and in the end I went for about 16 gigs of RAM on the machine and we now have a reddish cache running this Bloom filter",
    "start": "1479360",
    "end": "1485000"
  },
  {
    "text": "for I'm pretty sure it's 50 a month so it's cheap enough that it's not a huge concern it's not a huge blocker for us",
    "start": "1485000",
    "end": "1491900"
  },
  {
    "text": "so we've now managed to calculate W and that also leaves K which needs to be calculated how many bits are we going to",
    "start": "1491900",
    "end": "1497780"
  },
  {
    "text": "set in the filter for each incoming report and how many bits are we going to query well we know W and we know n so",
    "start": "1497780",
    "end": "1504080"
  },
  {
    "text": "it's now just a case of Simply calculating the value 4K which was seven so we are going to set",
    "start": "1504080",
    "end": "1510500"
  },
  {
    "text": "seven bits in the filter for each item that comes in and likewise when we query we're going to query those seven bits",
    "start": "1510500",
    "end": "1517220"
  },
  {
    "text": "and I deployed it I built it and I deployed it now if you don't want to calculate all of these things like I",
    "start": "1517220",
    "end": "1522620"
  },
  {
    "text": "said there are multiple multiple examples of Bloom filter calculators out there and you can simply go punch in",
    "start": "1522620",
    "end": "1528320"
  },
  {
    "text": "your values and you can do this with relative ease",
    "start": "1528320",
    "end": "1533360"
  },
  {
    "text": "now we deployed this and we currently use this and this Bloom filter does work with a",
    "start": "1533360",
    "end": "1539960"
  },
  {
    "text": "high degree of accuracy our probability of false positive is really really small and you can drive this down",
    "start": "1539960",
    "end": "1546860"
  },
  {
    "text": "even lower if you wish if you drive down your probability of false positive what it will do is it will drive up the width",
    "start": "1546860",
    "end": "1553039"
  },
  {
    "text": "and it will drive up the number of hash functions now the redis implementation of Bloom filters uses murmur hash which",
    "start": "1553039",
    "end": "1558980"
  },
  {
    "text": "is essentially free in CPU like the cost of doing this is minimal and we can and",
    "start": "1558980",
    "end": "1564740"
  },
  {
    "text": "do run queries in the region of tens of thousands of queries a second against this filter",
    "start": "1564740",
    "end": "1571299"
  },
  {
    "text": "over the entire lifespan of the filter yes so you would divide that down over a",
    "start": "1578059",
    "end": "1583159"
  },
  {
    "text": "significant period of time the goal for the filter is number one",
    "start": "1583159",
    "end": "1589279"
  },
  {
    "text": "if we get that definitive note we've not seen this before then we can immediately start to take action without having to",
    "start": "1589279",
    "end": "1595400"
  },
  {
    "text": "go query over the entire data set number two if it gives us the false positive and we've we've since tweaked and played",
    "start": "1595400",
    "end": "1601279"
  },
  {
    "text": "around with this you can then decide essentially what are we going to do do we you know for 100 or",
    "start": "1601279",
    "end": "1608600"
  },
  {
    "text": "one in a thousand or whatever it is do you accept that probability of false positive or not the biggest thing for us",
    "start": "1608600",
    "end": "1614120"
  },
  {
    "text": "was solving the 90-day data retention policy because if we have seen a report before and then",
    "start": "1614120",
    "end": "1621799"
  },
  {
    "text": "it falls off the back of the 90 days we have completely lost any reference to that so for us that was the bit for me",
    "start": "1621799",
    "end": "1627559"
  },
  {
    "text": "that was the biggest attraction was the ability to go beyond our 90-day data retention policy if you saw something 91",
    "start": "1627559",
    "end": "1633559"
  },
  {
    "text": "days ago you know it's like do you not want to have an alert or do we want to miss it and probabilistic data structures are",
    "start": "1633559",
    "end": "1640039"
  },
  {
    "text": "not perfect like that's kind of in the name you know they're not perfect but they can save you enormous",
    "start": "1640039",
    "end": "1645980"
  },
  {
    "text": "quantities of work and solve problems for you that would be impractical for",
    "start": "1645980",
    "end": "1651020"
  },
  {
    "text": "you to solve otherwise so I do you know we do you have to acknowledge the shortcomings of the bloom filter",
    "start": "1651020",
    "end": "1656659"
  },
  {
    "text": "so I thought I would come up with some other real world examples of these maybe this use case is not perfectly suitable",
    "start": "1656659",
    "end": "1662600"
  },
  {
    "text": "yeah yes",
    "start": "1662600",
    "end": "1668080"
  },
  {
    "text": "so good question does the does the probability of false positive change over time and",
    "start": "1670659",
    "end": "1677840"
  },
  {
    "text": "the answer is kind of yes and no and I'll give you both answers so when you",
    "start": "1677840",
    "end": "1682880"
  },
  {
    "text": "initially create the filter obviously like all of the bits in the filter is zero and as you populate the filter up",
    "start": "1682880",
    "end": "1689360"
  },
  {
    "text": "towards the value of its capacity at capacity that",
    "start": "1689360",
    "end": "1694640"
  },
  {
    "text": "is the probability at every Point lower than the capacity your probability is actually better than that so basically",
    "start": "1694640",
    "end": "1700700"
  },
  {
    "text": "once you get to population do you know now what the probability is so it's actually significantly better than this",
    "start": "1700700",
    "end": "1707059"
  },
  {
    "text": "whilst you're filling the filter the problem is if you ever go beyond the",
    "start": "1707059",
    "end": "1712520"
  },
  {
    "text": "stated population of the filter your probability of false positive increases at an exponential rate because",
    "start": "1712520",
    "end": "1718580"
  },
  {
    "text": "once you overpopulate the filter you know if we just go back to my kind of super basic 10 item filter here meow",
    "start": "1718580",
    "end": "1726200"
  },
  {
    "text": "imagine if we overpopulate this filter at width 10 very quickly it's going to become saturated once we've set almost",
    "start": "1726200",
    "end": "1732860"
  },
  {
    "text": "all of the bits in this filter or once we get to having set all of the bits in this filter all of the answers will be",
    "start": "1732860",
    "end": "1738080"
  },
  {
    "text": "yes so overpopulation of a filter even by small amounts because of the",
    "start": "1738080",
    "end": "1743720"
  },
  {
    "text": "exponentially increasing rate of the false positive is bad so you have to make sure that like I say you're in the",
    "start": "1743720",
    "end": "1749419"
  },
  {
    "text": "ballpark for the number of items you're going to set so like yes it's kind of much much",
    "start": "1749419",
    "end": "1756440"
  },
  {
    "text": "better as you're filling it towards capacity but if you roll over capacity and overpopulate then you know you very",
    "start": "1756440",
    "end": "1763220"
  },
  {
    "text": "quickly approach complete false positives so it's yeah again like it you know it's",
    "start": "1763220",
    "end": "1771020"
  },
  {
    "text": "these are the limitations of them and you have to kind of look at the the limitations of the filter and say is it",
    "start": "1771020",
    "end": "1777380"
  },
  {
    "text": "useful in our use case they're not a universally suitable solution however for us it allowed us to as I said like",
    "start": "1777380",
    "end": "1784039"
  },
  {
    "text": "the biggest problem that we wanted to get past was that 90-day retention how do we know if we've seen something before if we don't have it anymore and",
    "start": "1784039",
    "end": "1790940"
  },
  {
    "text": "we can't just keep storing ever increasing volumes of data on disk and you know for like what an eight gig",
    "start": "1790940",
    "end": "1797059"
  },
  {
    "text": "Bloom filter we're probably gonna be able to carry on doing this for another few years so to look at some other examples to try",
    "start": "1797059",
    "end": "1805159"
  },
  {
    "text": "and maybe relate this to something more specific to each of you I went out and did some research and one",
    "start": "1805159",
    "end": "1810860"
  },
  {
    "text": "of the first things that I came across was something from a company called Akama now Akamai are a huge CDM provider",
    "start": "1810860",
    "end": "1816620"
  },
  {
    "text": "and they sit in front of millions and millions of websites around the world and one of the things that CDN providers",
    "start": "1816620",
    "end": "1821779"
  },
  {
    "text": "do is they cache the response to requests that come in and the CDN provider can serve it from cash instead",
    "start": "1821779",
    "end": "1827299"
  },
  {
    "text": "of hitting your origin server now what Arkham I found was the caches at all of their Edge nodes were filling up and",
    "start": "1827299",
    "end": "1833419"
  },
  {
    "text": "filling up and they had ever increasing quantities of data in the cache that they were trying to serve out and then they looked at the request rate",
    "start": "1833419",
    "end": "1840500"
  },
  {
    "text": "for the items in the cache and they were like right well how you know we have all of these things in cash like how frequently are they being requested and",
    "start": "1840500",
    "end": "1847340"
  },
  {
    "text": "they found that the vast majority of the items in their Edge node caches were what we call one hit wonders",
    "start": "1847340",
    "end": "1853700"
  },
  {
    "text": "they were requested once the one time that they were requested and cached and",
    "start": "1853700",
    "end": "1858860"
  },
  {
    "text": "then they were never requested again so those items will set in the cash so however long the cash time is 30 days and then eventually they'll fall out of",
    "start": "1858860",
    "end": "1865100"
  },
  {
    "text": "the cash and they were never requested again so they signed the cash taking up space for 30 days and did nothing",
    "start": "1865100",
    "end": "1871100"
  },
  {
    "text": "so they implemented a bloom filter now the bloom filter allows them to ask",
    "start": "1871100",
    "end": "1876440"
  },
  {
    "text": "the question have we seen this item before so whenever request comes through their CDN if they are not caching the file in",
    "start": "1876440",
    "end": "1882620"
  },
  {
    "text": "their Edge cache they can query the filter and say you know we've never seen this item before",
    "start": "1882620",
    "end": "1888080"
  },
  {
    "text": "they will take the file from the origin server serve it to the client but not cache it",
    "start": "1888080",
    "end": "1894260"
  },
  {
    "text": "and then they'll set the item in the filter now if there is a second request for that item they can query the filter and",
    "start": "1894260",
    "end": "1901340"
  },
  {
    "text": "the filter will say yes we've seen this item before they'll request it from the origin server and they'll cache it only",
    "start": "1901340",
    "end": "1906919"
  },
  {
    "text": "on the second request and then it will sit in the cache and then for the next 30 days however",
    "start": "1906919",
    "end": "1912740"
  },
  {
    "text": "many times it's requested it will be served but by removing just the one hit wonders the items that are requested",
    "start": "1912740",
    "end": "1917960"
  },
  {
    "text": "only once and then never again they reduce the number of items in their Edge caches by 74 percent",
    "start": "1917960",
    "end": "1923600"
  },
  {
    "text": "because all of these items would just sit there and do nothing for 30 days or whatever and then just fall out of the cash they put a bloom filter on the",
    "start": "1923600",
    "end": "1930320"
  },
  {
    "text": "front end quick instant query into memory pretty much have we seen this item before yes no",
    "start": "1930320",
    "end": "1935659"
  },
  {
    "text": "and off we go now another really good example of Bloom filters that I found was Google safe browsing",
    "start": "1935659",
    "end": "1941659"
  },
  {
    "text": "now if you're not familiar with safe browsing what it does is you know if I'm sorry I've got my laptop I'm going to go",
    "start": "1941659",
    "end": "1947480"
  },
  {
    "text": "to a website Google safe browsing is a list of all of the URLs that",
    "start": "1947480",
    "end": "1953000"
  },
  {
    "text": "they've come across and that they've identified as malicious in some way so they could be like malware or you know",
    "start": "1953000",
    "end": "1958460"
  },
  {
    "text": "some hostile kind of JavaScript on the page whatever it is Google safe browsing has flagged that page as malicious and",
    "start": "1958460",
    "end": "1965000"
  },
  {
    "text": "they have their database of all of these urls now if I was to open a page",
    "start": "1965000",
    "end": "1971659"
  },
  {
    "text": "on my machine and my browser was like to take the URL and then fire it off to some Google API",
    "start": "1971659",
    "end": "1978440"
  },
  {
    "text": "and say hey is this URL malicious I'd have a bit of a concern right because that sounds like a really bad",
    "start": "1978440",
    "end": "1984140"
  },
  {
    "text": "privacy invasive mechanism so they're like okay well we can't just take every URL that people go to and fire it off to",
    "start": "1984140",
    "end": "1990020"
  },
  {
    "text": "some external source so what they do is they take the safe browsing list and they load it into a bloom filter",
    "start": "1990020",
    "end": "1996200"
  },
  {
    "text": "and then the bloom filter is downloaded onto your device if you're using a chromium-based browser you're already doing this so on the device is a bloom",
    "start": "1996200",
    "end": "2003279"
  },
  {
    "text": "filter that contains all of the URLs set in the filter so when you go to a URL when you go to",
    "start": "2003279",
    "end": "2009340"
  },
  {
    "text": "visit a page it will hash it with the appropriate amount of items of hashes and check it against your local filter",
    "start": "2009340",
    "end": "2016500"
  },
  {
    "text": "to say is this URL malicious or not is it in the original data set now if it comes",
    "start": "2016500",
    "end": "2023080"
  },
  {
    "text": "back and says no which is kind of like what you hope for most of the time you're not visiting malicious sites very",
    "start": "2023080",
    "end": "2028120"
  },
  {
    "text": "frequently if the filter comes back and says no it's definitely no it's saying like this is definitely not known to be",
    "start": "2028120",
    "end": "2034419"
  },
  {
    "text": "malicious so you can instantly go there and that's of course what happens the vast majority of the time but there is",
    "start": "2034419",
    "end": "2040480"
  },
  {
    "text": "then this Edge case where you are visiting a malicious URL now if you query against the filter",
    "start": "2040480",
    "end": "2045640"
  },
  {
    "text": "remember what we said about the nature of these probabilistic data structures if you query against a filter and it says yes it's in there it's only",
    "start": "2045640",
    "end": "2052658"
  },
  {
    "text": "probably and then that presents a bit of a tricky situation like what do we do now it's",
    "start": "2052659",
    "end": "2058060"
  },
  {
    "text": "like okay well it's probably malicious like do I let them go there do I stop them from going there and in those",
    "start": "2058060",
    "end": "2064419"
  },
  {
    "text": "circumstances your machine will then query out to the API and say okay look like we've said",
    "start": "2064419",
    "end": "2070179"
  },
  {
    "text": "this is probably malicious let's get a definitive answer",
    "start": "2070179",
    "end": "2075220"
  },
  {
    "text": "now in like the 99.9 of scenarios when it's not malicious you're not hitting the API so you've just cut like 99.9 of",
    "start": "2075220",
    "end": "2082060"
  },
  {
    "text": "traffic against the API straight away in the scenarios where you do query it they query it using something called K",
    "start": "2082060",
    "end": "2088839"
  },
  {
    "text": "anonymity and you can Google it in the hover read it's actually quite interesting but basically don't worry",
    "start": "2088839",
    "end": "2094480"
  },
  {
    "text": "about your privacy here you're not actually sending like the full URL out to the API there is a way to query the",
    "start": "2094480",
    "end": "2100060"
  },
  {
    "text": "API without disclosing the URL to the API called K anonymity but the point is they were able to reduce",
    "start": "2100060",
    "end": "2106680"
  },
  {
    "text": "almost all traffic to this external API by using a bloom filter locally on the",
    "start": "2106680",
    "end": "2112359"
  },
  {
    "text": "client so again it's a scenario where you can save huge quantities of work by",
    "start": "2112359",
    "end": "2118599"
  },
  {
    "text": "using just the small amount of memory and querying a local filter I found another example and this one was",
    "start": "2118599",
    "end": "2125619"
  },
  {
    "text": "kind of interesting so if you ever go to a News website and they're like hey here are some articles that you've not read",
    "start": "2125619",
    "end": "2131560"
  },
  {
    "text": "and they're new to you and it's like okay well how you know how are they tracking the ones that I've read and the ones that I've not read and",
    "start": "2131560",
    "end": "2138400"
  },
  {
    "text": "it turns out that on medium they use a bloom filter so when you visit an article they set the article in the filter and",
    "start": "2138400",
    "end": "2145180"
  },
  {
    "text": "they set it in the bloom filter for articles you've read so then when they get the new stream of Articles and they're like well has this person read",
    "start": "2145180",
    "end": "2151359"
  },
  {
    "text": "them they query them against the bloom filter and say okay yes you've read these three so take them out here's the",
    "start": "2151359",
    "end": "2157119"
  },
  {
    "text": "list of new ones minus the ones that you've already read according to the bloom filter I thought that was pretty like I don't",
    "start": "2157119",
    "end": "2164140"
  },
  {
    "text": "know a little bit Overkill maybe but I thought that was a good idea so there's lots of different ways that you can use these things and of course",
    "start": "2164140",
    "end": "2170500"
  },
  {
    "text": "we use a bloom filter at report URI as I've explained",
    "start": "2170500",
    "end": "2175900"
  },
  {
    "text": "now a bloom filter is not perfect there are limitations so you have to accept",
    "start": "2175900",
    "end": "2181300"
  },
  {
    "text": "its usability for you based on its limitations but the bloom filter is also the base data structure for other",
    "start": "2181300",
    "end": "2188380"
  },
  {
    "text": "probabilistic data structures as well because the bloom filter might not do quite what you want and we have been",
    "start": "2188380",
    "end": "2194560"
  },
  {
    "text": "playing around with other probabilistic data structures too because there are counting Bloom filters you might not",
    "start": "2194560",
    "end": "2201700"
  },
  {
    "text": "want to know simply have I seen this thing before or not you might want to know how many times have I seen this",
    "start": "2201700",
    "end": "2207460"
  },
  {
    "text": "thing before and accounting Bloom filter is essentially the same structure that we've looked at but it also allows you",
    "start": "2207460",
    "end": "2213400"
  },
  {
    "text": "to keep track of the count now it's still a probabilistic data structure so you have a possibility of the item",
    "start": "2213400",
    "end": "2220960"
  },
  {
    "text": "being equal to or greater than the number it provides you cannot give you an exact count but within that small margin of error",
    "start": "2220960",
    "end": "2228820"
  },
  {
    "text": "for example you could get a really good feeling of have we seen it 500 times or 5 million times and that might give you",
    "start": "2228820",
    "end": "2234579"
  },
  {
    "text": "enough of a distinction that you need so you can say that you've definitely not seen it less than the amount of",
    "start": "2234579",
    "end": "2241540"
  },
  {
    "text": "times that the filter gives back to you and basically all the Bloomfield is doing rather than just setting the bit it increments the count in the bit so",
    "start": "2241540",
    "end": "2247839"
  },
  {
    "text": "when you query the item you pull out multiple accounts and look at the lowest count very very simple very minimal change to",
    "start": "2247839",
    "end": "2255160"
  },
  {
    "text": "the filter structure itself the other problem that we've got though is if you add an item to a bloom filter",
    "start": "2255160",
    "end": "2260579"
  },
  {
    "text": "you can never delete it because if you delete the bits for that item based on collisions you might be",
    "start": "2260579",
    "end": "2267040"
  },
  {
    "text": "deleting the bits or other items as well now if you want to be able to delete things from a bloom filter you have to",
    "start": "2267040",
    "end": "2272140"
  },
  {
    "text": "use a cuckoo filter instead cookie filters support deletion of items from the filter again slightly different data",
    "start": "2272140",
    "end": "2277480"
  },
  {
    "text": "structure pretty much similar but it allows you to delete items from the filter now we didn't need this right",
    "start": "2277480",
    "end": "2282760"
  },
  {
    "text": "like once we've seen something we've seen it we're never going to unsee something so we didn't need to go for a",
    "start": "2282760",
    "end": "2287800"
  },
  {
    "text": "cookie filter but they are available you can delete things from these filters if you need to",
    "start": "2287800",
    "end": "2293500"
  },
  {
    "text": "I also wrote a post recently about something called accountment sketch now this is very interesting we're not",
    "start": "2293500",
    "end": "2299980"
  },
  {
    "text": "actually using this for anything production-wise yet but it's basically just a two-dimensional Bloom filter so it's obviously the one we showed earlier",
    "start": "2299980",
    "end": "2306339"
  },
  {
    "text": "was only a single dimension on the array now we're looking at a two-dimensional filter which we call a sketch instead of",
    "start": "2306339",
    "end": "2312099"
  },
  {
    "text": "a filter and it allows frequency analysis on events but very accurate frequency",
    "start": "2312099",
    "end": "2318160"
  },
  {
    "text": "analysis on events it's still a probabilistic data structure it cannot",
    "start": "2318160",
    "end": "2323200"
  },
  {
    "text": "do exact counting it allows over counting within a very very small margin but never under counting it can never",
    "start": "2323200",
    "end": "2330880"
  },
  {
    "text": "undercount an item but it can only over count by a very small margin so again if",
    "start": "2330880",
    "end": "2336460"
  },
  {
    "text": "we wanted to take you know tens and tens of thousands of events per second and do",
    "start": "2336460",
    "end": "2341740"
  },
  {
    "text": "frequency analysis on them this is actually working quite well we don't use it for anything we still do traditional accounts by incrementing the account in",
    "start": "2341740",
    "end": "2349119"
  },
  {
    "text": "the database but I am playing around with this and so far the tolerance is very very good",
    "start": "2349119",
    "end": "2354700"
  },
  {
    "text": "we then have a top k now we do actually use a top K in production we are now using this so what",
    "start": "2354700",
    "end": "2360339"
  },
  {
    "text": "top K does is it's again a two-dimensional filter it's a sketch but it also runs a binary Min Heap on the",
    "start": "2360339",
    "end": "2366280"
  },
  {
    "text": "side of the sketch and what this allows us to do is to find the top most",
    "start": "2366280",
    "end": "2371380"
  },
  {
    "text": "frequent items in a stream of data so you take a stream of data you run it",
    "start": "2371380",
    "end": "2376420"
  },
  {
    "text": "through the top case sketch and at any point you can query the top K like we do the top 100 the top 100 items from the",
    "start": "2376420",
    "end": "2384760"
  },
  {
    "text": "data stream without having to store the data stream or maintain separate counts anywhere else you just take the data",
    "start": "2384760",
    "end": "2389980"
  },
  {
    "text": "stream you run it through the top K and at any point we can say what are the top 100 most frequent items right now",
    "start": "2389980",
    "end": "2396820"
  },
  {
    "text": "and we are currently using this in production again so we're running tens of thousands of these Json payloads",
    "start": "2396820",
    "end": "2402640"
  },
  {
    "text": "through a top K to to show us like what are our top 100 reports like what are the top 100 most frequent events",
    "start": "2402640",
    "end": "2409720"
  },
  {
    "text": "and this works and again there is an undercount tolerance because it is still a probabilistic data structure but",
    "start": "2409720",
    "end": "2416380"
  },
  {
    "text": "within a very very small margin of error it can tell us the top 100 most common items in that data stream",
    "start": "2416380",
    "end": "2424359"
  },
  {
    "text": "now the final one to take a look at is something called The hyperlog Log and Hyper log logs allow you to do the same",
    "start": "2424359",
    "end": "2431500"
  },
  {
    "text": "thing they count the distinct items in a stream in a probabilistic way so if you",
    "start": "2431500",
    "end": "2439060"
  },
  {
    "text": "take our stream of reports tens of thousands of reports a second and we feed them through the hyperlog log the",
    "start": "2439060",
    "end": "2444400"
  },
  {
    "text": "hyperlog log will track how many individual distinct items have we seen in there now I use this early on",
    "start": "2444400",
    "end": "2451240"
  },
  {
    "text": "to try and get a rough feel for how many items we needed to be able to set in our Bloom filter because when we're doing",
    "start": "2451240",
    "end": "2456520"
  },
  {
    "text": "those tens of thousands of reports a second I didn't know how many what percentage of those were duplicates so",
    "start": "2456520",
    "end": "2462339"
  },
  {
    "text": "if you take a stream of data like that and run it through a hyperlog log over time you can track how many distinct items have you seen over that period",
    "start": "2462339",
    "end": "2470200"
  },
  {
    "text": "so you could I mean we did run billions and billions of reports through this thing and it will tell you what we refer",
    "start": "2470200",
    "end": "2476020"
  },
  {
    "text": "to as the cardinality of the data set how many distinct unique items were actually in there",
    "start": "2476020",
    "end": "2481780"
  },
  {
    "text": "so super low time complexity you can live stream the data through this in our processing Pipeline and it had almost no",
    "start": "2481780",
    "end": "2489040"
  },
  {
    "text": "overhead so there are a whole bunch of these",
    "start": "2489040",
    "end": "2494079"
  },
  {
    "text": "probabilistic data structures that you can use and I've used like the high plug log we don't run anymore but we did use",
    "start": "2494079",
    "end": "2500079"
  },
  {
    "text": "together some really crucial information we currently run top K in production and we currently run our Bloom filter for",
    "start": "2500079",
    "end": "2507040"
  },
  {
    "text": "analysis of have we seen this report before in production they work and as",
    "start": "2507040",
    "end": "2512200"
  },
  {
    "text": "long as you can accept the probabilistic nature of their operation and that falls within your kind of acceptable use then",
    "start": "2512200",
    "end": "2519940"
  },
  {
    "text": "they do work now what I wanted to do was leave plenty of time in this for questions and we've",
    "start": "2519940",
    "end": "2527020"
  },
  {
    "text": "already had a couple I appreciate that but I like to leave about 15 minutes in this four questions so I want to open it",
    "start": "2527020",
    "end": "2533440"
  },
  {
    "text": "up to the floor and we can go back and take a look at some um you know some more details or does",
    "start": "2533440",
    "end": "2540099"
  },
  {
    "text": "anyone want to start me off with the questioning hi",
    "start": "2540099",
    "end": "2544380"
  },
  {
    "text": "so do I have a plan for what we're going to do when we hit the 7 billion limit um so it was always kind of designed that",
    "start": "2547420",
    "end": "2553960"
  },
  {
    "text": "we can take the bloom filter away and our traditional processing pipeline will still do everything that is required so",
    "start": "2553960",
    "end": "2560260"
  },
  {
    "text": "right now the bloom filter is just kind of used to Short Circuit that process and kick off alerts more immediately so",
    "start": "2560260",
    "end": "2565540"
  },
  {
    "text": "if we ever do and it looks like I slightly overestimated on the 7 billion distinct reports and that's the kicker",
    "start": "2565540",
    "end": "2571839"
  },
  {
    "text": "we're also doing tens of thousands a second the amount of duplication if you have a popular website with a problem",
    "start": "2571839",
    "end": "2577060"
  },
  {
    "text": "and they have a million visitors like so many of those reports are duplicates so it does look like I slightly overestimated and it probably won't be a",
    "start": "2577060",
    "end": "2583839"
  },
  {
    "text": "problem but you are right in the future you know inevitably if you keep doing this or long enough that filter is going",
    "start": "2583839",
    "end": "2589480"
  },
  {
    "text": "to reach population um I don't know like I've not I've not made",
    "start": "2589480",
    "end": "2595000"
  },
  {
    "text": "the plans for that um I kind of built this skeptically thinking maybe it will work maybe it",
    "start": "2595000",
    "end": "2600160"
  },
  {
    "text": "won't and it just worked so well I was like well you know if it works for five years I'll just run it for five years and save all of those overheads in in",
    "start": "2600160",
    "end": "2606160"
  },
  {
    "text": "the meantime um that's the problem for future Scott not now Scott",
    "start": "2606160",
    "end": "2612540"
  },
  {
    "text": "so that kind of still Falls you could also ask that same question about traditional processing pipeline right",
    "start": "2624960",
    "end": "2631599"
  },
  {
    "text": "like if we you know if we just saw this in a traditional database maybe you know maybe we should add some kind of",
    "start": "2631599",
    "end": "2638260"
  },
  {
    "text": "um some kind of you know time logic where we can say when this was stored but because of the 90-day retention I don't",
    "start": "2638260",
    "end": "2645400"
  },
  {
    "text": "know how we would do that anyway right like we'd have to store the knowledge of that report to know that it was a report",
    "start": "2645400",
    "end": "2651040"
  },
  {
    "text": "from one year ago so we would kind of have the same problem both ways and this is the thing that we depend on if we kind",
    "start": "2651040",
    "end": "2656859"
  },
  {
    "text": "of just scroll back is that the reports are kind of unique even on like a per page basis and per",
    "start": "2656859",
    "end": "2663400"
  },
  {
    "text": "path so if we look at like a traditional Json payload there because of things like the document URI including the path",
    "start": "2663400",
    "end": "2670300"
  },
  {
    "text": "and then a query string parameters you know have we seen it before is very very",
    "start": "2670300",
    "end": "2675460"
  },
  {
    "text": "specific you know literally to like the path and the the blocked URI so",
    "start": "2675460",
    "end": "2681040"
  },
  {
    "text": "yeah it's like you know theoretically you could still see like the exact same thing one year later on the same page if",
    "start": "2681040",
    "end": "2687160"
  },
  {
    "text": "exactly the same script had came back so you know again it's it's a tricky one and I think that we",
    "start": "2687160",
    "end": "2693220"
  },
  {
    "text": "would still have that problem Bloom filter or not",
    "start": "2693220",
    "end": "2697200"
  },
  {
    "text": "so the question now is are you not rebuilding the bloom filter from time to time um you can't because in order to rebuild",
    "start": "2699400",
    "end": "2705099"
  },
  {
    "text": "the filter to its same state you need all of the data and after 90 days we've lost it so we can never actually rebuild",
    "start": "2705099",
    "end": "2711099"
  },
  {
    "text": "the bloom filter we could only ever rebuild it from the data that we currently have if we were to start again so that's one of the things that you",
    "start": "2711099",
    "end": "2717760"
  },
  {
    "text": "have to kind of Bear in mind and again this was something that was acceptable for our use cases like we could never",
    "start": "2717760",
    "end": "2722920"
  },
  {
    "text": "rebuild this filter and I was like right but you know we'd never have the data anyway so obviously",
    "start": "2722920",
    "end": "2728680"
  },
  {
    "text": "we could never do anything with it so it's suitable for us within our limitations because they already existed",
    "start": "2728680",
    "end": "2734319"
  },
  {
    "text": "we could never go back more than 90 days anyway so it doesn't concern me",
    "start": "2734319",
    "end": "2741420"
  },
  {
    "text": "yep so good question there and basically can't like you know how granular can you go on the bloom filters would you run",
    "start": "2757720",
    "end": "2763660"
  },
  {
    "text": "you know one balloon filter per domain or one bloom filter per site or one bloom filter per customer which would",
    "start": "2763660",
    "end": "2769359"
  },
  {
    "text": "include all of theirs or you could run one bloom filter for like the whole service and",
    "start": "2769359",
    "end": "2774760"
  },
  {
    "text": "you can do something referred to as cascading Bloom filters so you could have like a universal service filter and",
    "start": "2774760",
    "end": "2779980"
  },
  {
    "text": "you could query against that and then Cascade down to like a specific customer Bloom filter which would obviously be",
    "start": "2779980",
    "end": "2785079"
  },
  {
    "text": "considerably smaller and have less data in and you could also really increase um you know the strength of the false",
    "start": "2785079",
    "end": "2791140"
  },
  {
    "text": "positive probability as well what we do right now what we're running is a universal service filter so we're",
    "start": "2791140",
    "end": "2797079"
  },
  {
    "text": "running this through a bloom filter that is literally sat at the front end of our ingestion pipeline so it's service wide",
    "start": "2797079",
    "end": "2803079"
  },
  {
    "text": "like have we ever seen this whole thing before as a service but you could go much more specific like medium for the",
    "start": "2803079",
    "end": "2810040"
  },
  {
    "text": "news articles they're obviously running a bloom filter per customer right in order to answer that question has this",
    "start": "2810040",
    "end": "2815980"
  },
  {
    "text": "person read this article and they're minuscule when you do them at that kind of granularity the filter itself is Tiny",
    "start": "2815980",
    "end": "2821920"
  },
  {
    "text": "so yeah that would be a valid approach",
    "start": "2821920",
    "end": "2825660"
  },
  {
    "text": "um",
    "start": "2828880",
    "end": "2830880"
  },
  {
    "text": "so the question there was I said the filter was in memory which you're corrected is like what happens if the",
    "start": "2835359",
    "end": "2840700"
  },
  {
    "text": "server gets nuked or you know something terrible happens basically so because we're not 100 dependent on",
    "start": "2840700",
    "end": "2847599"
  },
  {
    "text": "the filter and as I mentioned earlier we just use it to kind of like short circuit our current alerting and detection logic you know arguably if the",
    "start": "2847599",
    "end": "2854500"
  },
  {
    "text": "filter just kind of went kapoof we just go back to what we did before the redis implementation which is what we use",
    "start": "2854500",
    "end": "2861339"
  },
  {
    "text": "um you know for things like graceful shutdowns and migrations and fallbacks to the backup redis cache we have the",
    "start": "2861339",
    "end": "2867220"
  },
  {
    "text": "persistence on disk option takes you know a couple of seconds to dump several gigabytes to disk but it's not too bad",
    "start": "2867220",
    "end": "2873339"
  },
  {
    "text": "on um nvme drives but yeah like you know if you had some kind of catastrophic",
    "start": "2873339",
    "end": "2878920"
  },
  {
    "text": "failure you could theoretically lose the filter which is why we only use it to short circuit our current logic it's",
    "start": "2878920",
    "end": "2885940"
  },
  {
    "text": "it's just like a hyper efficient option that we have but we can always go back to before",
    "start": "2885940",
    "end": "2891460"
  },
  {
    "text": "it's kind of like um you know a similar scenario and the Akamai one here they're not going to",
    "start": "2891460",
    "end": "2896560"
  },
  {
    "text": "stop caching files and serving them if the bloom filter goes kablamo like they'll keep doing what they did before but whilst the filter's there and",
    "start": "2896560",
    "end": "2902740"
  },
  {
    "text": "working it's saving you significant amounts of work same for safe browsing right like the goal of the filter is not",
    "start": "2902740",
    "end": "2908619"
  },
  {
    "text": "to be the definitive source of truth and the data storage mechanism it's just a",
    "start": "2908619",
    "end": "2913780"
  },
  {
    "text": "massive efficiency thing and whilst it's there and working we'll take all of those savings",
    "start": "2913780",
    "end": "2920460"
  },
  {
    "text": "so it would affect so the questionnaire was like do we actually know if the bloom filter was to go away could we",
    "start": "2929640",
    "end": "2935140"
  },
  {
    "text": "actually tolerate the load um it would all it really does like because every now and again we we take",
    "start": "2935140",
    "end": "2940960"
  },
  {
    "text": "the the redis cash out of commission um it massively increases our reporting",
    "start": "2940960",
    "end": "2946599"
  },
  {
    "text": "time so if we query the filter we can get the answer almost instantly but if we drop the task into the queue and wait",
    "start": "2946599",
    "end": "2952119"
  },
  {
    "text": "for one of our consumers to answer the question you know we can go from alerting in seconds to alerting in minutes instead so again it's kind of",
    "start": "2952119",
    "end": "2959619"
  },
  {
    "text": "one of those things where it's like well like that's how it was before and it was okay and while the filters are working",
    "start": "2959619",
    "end": "2965260"
  },
  {
    "text": "and we're making all these efficiency savings like we'll take it but if it goes away all that happens is we just go",
    "start": "2965260",
    "end": "2970420"
  },
  {
    "text": "back to where we were before and where we were before was was okay so we're just using it as an efficiency saving",
    "start": "2970420",
    "end": "2977920"
  },
  {
    "text": "it's not a hard dependency",
    "start": "2977920",
    "end": "2981660"
  },
  {
    "text": "any more questions so oh yeah sorry",
    "start": "2983020",
    "end": "2990420"
  },
  {
    "text": "okay so I'll repeat the question and also make sure I understood it so you're saying",
    "start": "3009900",
    "end": "3015420"
  },
  {
    "text": "instead of so if we had like some other table when the reports come in we would hash them and simply store the hash and",
    "start": "3015420",
    "end": "3022319"
  },
  {
    "text": "then we would insert the hash into the filter rather than the hash of like the actual Json payload so we would essentially like hash the hash to set",
    "start": "3022319",
    "end": "3029940"
  },
  {
    "text": "the bits and then we would be able to go back to that table and recreate the",
    "start": "3029940",
    "end": "3035040"
  },
  {
    "text": "bloom filter in the future because we're only storing the hashes so like yeah you could do that at first",
    "start": "3035040",
    "end": "3040800"
  },
  {
    "text": "kind of thought that sounds like a reasonable approach you're still going to have to store a really significant",
    "start": "3040800",
    "end": "3046260"
  },
  {
    "text": "number of hashes of the payloads um but yeah I guess like the hash is",
    "start": "3046260",
    "end": "3051660"
  },
  {
    "text": "going to be significantly smaller and I've obviously I've shown like a relatively small Json payload here",
    "start": "3051660",
    "end": "3056940"
  },
  {
    "text": "um with a minimal set of fields like the the Json pillars are actually a tiny bit larger than this you can see I put like",
    "start": "3056940",
    "end": "3062099"
  },
  {
    "text": "you know dot dot dot at the bottom so yeah like the actual Json payload can be pretty big especially if like there's",
    "start": "3062099",
    "end": "3067980"
  },
  {
    "text": "you know long URLs with query string parameters and and things like this or if it's a data URI it puts like the",
    "start": "3067980",
    "end": "3073980"
  },
  {
    "text": "base64 encoded asset in there so if it's an image you get like the image um but yeah like At first thought it",
    "start": "3073980",
    "end": "3081180"
  },
  {
    "text": "sounds like it you know I can't see anything immediately wrong with that approach um if you wanted to repopulate the",
    "start": "3081180",
    "end": "3087420"
  },
  {
    "text": "filter I guess you'd have to balance you know the value of you repopulating",
    "start": "3087420",
    "end": "3093300"
  },
  {
    "text": "the filter in the future versus storing all of the hashes of the data set but",
    "start": "3093300",
    "end": "3099140"
  },
  {
    "text": "hmm yeah that would also work so we could essentially build like time series filters and then query against those for",
    "start": "3105480",
    "end": "3111540"
  },
  {
    "text": "particular like months so we can say have we seen this fill this report in the filter in this month yeah that would",
    "start": "3111540",
    "end": "3116700"
  },
  {
    "text": "also work we do um like there are other things that you can do with filters as well for example if",
    "start": "3116700",
    "end": "3122819"
  },
  {
    "text": "you have multiple ingestion endpoints if you have filters with the same settings and same dimensions on like multiple",
    "start": "3122819",
    "end": "3127980"
  },
  {
    "text": "ingestion endpoints you could then sync all of the filters and merge them to create like one centralized filter as",
    "start": "3127980",
    "end": "3133079"
  },
  {
    "text": "well so you might have like Geographic filters and then if you wanted to create a global filter as long as they were all",
    "start": "3133079",
    "end": "3139079"
  },
  {
    "text": "set with the correct Dimensions the same dimensions you can then just merge those filters together and have like a super",
    "start": "3139079",
    "end": "3144300"
  },
  {
    "text": "filter um I mentioned cascading filters earlier which is where is like you go down to filters of higher resolution and smaller",
    "start": "3144300",
    "end": "3151020"
  },
  {
    "text": "size as well we actually use cascading Bloom filters um so Firefox browsers started using",
    "start": "3151020",
    "end": "3157140"
  },
  {
    "text": "cascading Bloom filters for um some of its security features so if you visit websites and their TLS",
    "start": "3157140",
    "end": "3163800"
  },
  {
    "text": "certificate has been revoked or marked as not trusted or compromised in some way Firefox is actually using cascading",
    "start": "3163800",
    "end": "3170640"
  },
  {
    "text": "Bloom filters to do that so it queries like a large low resolution filter and if you get that definite no you're like",
    "start": "3170640",
    "end": "3176040"
  },
  {
    "text": "we're good to go we can visit the site it's safe but if it says probably yes like we have an issue here it will then",
    "start": "3176040",
    "end": "3181859"
  },
  {
    "text": "query a second higher resolution filter to see if it can give you that definitive answer and it literally keeps",
    "start": "3181859",
    "end": "3187559"
  },
  {
    "text": "querying through higher and higher resolution filters until you get to the point of definite no or definite yes",
    "start": "3187559",
    "end": "3193619"
  },
  {
    "text": "so you can also do that um that's um it's kind of an intro there's a",
    "start": "3193619",
    "end": "3199140"
  },
  {
    "text": "really interesting white paper on that actually if anybody wanted to read that one but you can get to very minuscule",
    "start": "3199140",
    "end": "3204960"
  },
  {
    "text": "probabilities of false positives with cascading filters",
    "start": "3204960",
    "end": "3210019"
  },
  {
    "text": "any more questions",
    "start": "3211140",
    "end": "3214220"
  },
  {
    "text": "yep so why did we pick redis to do this um it was because we already used redis",
    "start": "3219599",
    "end": "3224760"
  },
  {
    "text": "as our session cache for the application so I already had you know some experience and news release and can configure it and things like that so",
    "start": "3224760",
    "end": "3231839"
  },
  {
    "text": "um it there was no particular reason it was more just like stick with what I know like I know how it works and I know what to do with it so",
    "start": "3231839",
    "end": "3237960"
  },
  {
    "text": "um it was just the easy option for us you know it's essentially if you think about this you I mean it's really not",
    "start": "3237960",
    "end": "3243059"
  },
  {
    "text": "even going to be too hard to kind of roll your own right it's just like a a one-dimensional array and some hash",
    "start": "3243059",
    "end": "3248880"
  },
  {
    "text": "functions but yep redis has like a native data type for this so I was just like well that's easy we'll do that",
    "start": "3248880",
    "end": "3256040"
  },
  {
    "text": "any more questions all right well we'll wrap it up there I'm around for the rest of the day so if",
    "start": "3256740",
    "end": "3262859"
  },
  {
    "text": "you think of something later uh feel free to come and find me and thank you for joining me",
    "start": "3262859",
    "end": "3268800"
  },
  {
    "text": "foreign",
    "start": "3268800",
    "end": "3271640"
  }
]