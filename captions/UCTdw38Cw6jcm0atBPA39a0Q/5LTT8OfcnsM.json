[
  {
    "text": "hello everyone i do realize that i'm standing between",
    "start": "8000",
    "end": "13840"
  },
  {
    "text": "you and your party so i really do appreciate you spending this hour with",
    "start": "13840",
    "end": "18960"
  },
  {
    "text": "me and i'm hoping to to make it worth your while",
    "start": "18960",
    "end": "24160"
  },
  {
    "text": "and maybe make it as light as i can even though it",
    "start": "24160",
    "end": "29359"
  },
  {
    "text": "is a quite deep topic i would say so we're going to talk about debugging",
    "start": "29359",
    "end": "36680"
  },
  {
    "text": "um.net applications and i'm tess i used to work in asp.net",
    "start": "36680",
    "end": "42840"
  },
  {
    "text": "support debugging things for a living for both developers outside of microsoft",
    "start": "42840",
    "end": "48160"
  },
  {
    "text": "and also the product teams within microsoft so i'm a developer at microsoft right now in and at the moment i'm",
    "start": "48160",
    "end": "55280"
  },
  {
    "text": "mostly debugging things for myself sometimes for internal teams but",
    "start": "55280",
    "end": "60320"
  },
  {
    "text": "um i'm going to talk to you about how to debug like these",
    "start": "60320",
    "end": "65840"
  },
  {
    "text": "uh issues that are maybe a little bit um out of the mainstream",
    "start": "65840",
    "end": "72400"
  },
  {
    "text": "and that's a little bit harder to debug than the newest and step-by-step debugging so we're",
    "start": "72400",
    "end": "78479"
  },
  {
    "text": "going to talk about high memory usage how do you tackle that bad performance crashes and exceptions",
    "start": "78479",
    "end": "85680"
  },
  {
    "text": "what i'm going to talk about is applicable not only to net core but also to.net framework if",
    "start": "85680",
    "end": "91439"
  },
  {
    "text": "you um if you use that but some tools will be net core specific",
    "start": "91439",
    "end": "97520"
  },
  {
    "text": "so we're going to be debugging dumps i hope you're ready for this um",
    "start": "97520",
    "end": "103280"
  },
  {
    "text": "and i do hope to make it as understandable as i can",
    "start": "103280",
    "end": "109840"
  },
  {
    "text": "the reason why we're using memory dumps to debug these kind of issues is because they are typically very very hard to",
    "start": "109840",
    "end": "116640"
  },
  {
    "text": "f5 debug so you can't really step um through them they're also very often",
    "start": "116640",
    "end": "122240"
  },
  {
    "text": "intermittent and they happen on someone else's machine maybe on someone else's like on an operating system that's not",
    "start": "122240",
    "end": "128959"
  },
  {
    "text": "your own um and sometimes they happen in in azure or in the cloud somewhere",
    "start": "128959",
    "end": "135040"
  },
  {
    "text": "and then you have to have a way to to troubleshoot it even if you can't reproduce it locally",
    "start": "135040",
    "end": "142239"
  },
  {
    "text": "and then apart from me is talking about how to debug that i'm going to try to sprinkle in some dot-net internals but if you do",
    "start": "142239",
    "end": "148080"
  },
  {
    "text": "have any questions along the way feel free to shout it out i know i'm asking that of a norwegian crowd and i'm",
    "start": "148080",
    "end": "154400"
  },
  {
    "text": "swedish myself so i know that i'm not type to do that but do feel free to do that if you want to",
    "start": "154400",
    "end": "160640"
  },
  {
    "text": "um this is going to be a very demo intensive session so from now on i literally",
    "start": "160640",
    "end": "166239"
  },
  {
    "text": "almost have no slides except for some some things just to keep the in the story going but from here on we're going",
    "start": "166239",
    "end": "172400"
  },
  {
    "text": "to just look at demos of how to troubleshoot this and we're going to start off with high",
    "start": "172400",
    "end": "177760"
  },
  {
    "text": "memory usage and with high memory usage the only thing that we really need to",
    "start": "177760",
    "end": "183280"
  },
  {
    "text": "to figure out when we're debugging one of these things is who's using up the memory",
    "start": "183280",
    "end": "188959"
  },
  {
    "text": "and why is it not being returned why is it not going away so so what's the",
    "start": "188959",
    "end": "194080"
  },
  {
    "text": "reason that we're using of the memory we're going to start off with a high memory usage um demo in linux",
    "start": "194080",
    "end": "202959"
  },
  {
    "text": "and i i'm doing this in linux and you can just as well do it on when like in a windows session but i'm doing it on",
    "start": "202959",
    "end": "209280"
  },
  {
    "text": "linux js to show you that the tools are very much the same and you can use the same ones whether it's linux or",
    "start": "209280",
    "end": "216799"
  },
  {
    "text": "windows so i have extremely simple",
    "start": "216799",
    "end": "222720"
  },
  {
    "text": "memory leak and i know people usually say that but i'm going to show you",
    "start": "222720",
    "end": "228239"
  },
  {
    "text": "how simple it is because the point here that i'm trying to make is not necessarily for us to to delve deep into",
    "start": "228239",
    "end": "235439"
  },
  {
    "text": "like these very odd things but to to kind of get to know the tools first so what we have here is is just a console",
    "start": "235439",
    "end": "243040"
  },
  {
    "text": "application where we loop through um you know 10 000",
    "start": "243040",
    "end": "249840"
  },
  {
    "text": "times and add on a product to a list of products so this is not necessarily a leak this",
    "start": "249840",
    "end": "256400"
  },
  {
    "text": "is just high memory usage we're going to keep using more and more of these products and the reason why it's not",
    "start": "256400",
    "end": "261919"
  },
  {
    "text": "going away is because we have them in a static place and as long as they're rooted in that static list like",
    "start": "261919",
    "end": "268880"
  },
  {
    "text": "the garbage collector can't reclaim it and then if we want to do it once more",
    "start": "268880",
    "end": "274960"
  },
  {
    "text": "we'll leak leak at 20 000 more objects so now that you know what's going to go on",
    "start": "274960",
    "end": "281360"
  },
  {
    "text": "and what we're going to be looking for let's see how this works by the way like a little raise of hand",
    "start": "281360",
    "end": "288560"
  },
  {
    "text": "um who's used to dump before or who's who's debugged with okay so quite a few",
    "start": "288560",
    "end": "295840"
  },
  {
    "text": "uh hopefully i'll still be able to teach you something new here um so we're going to run",
    "start": "295840",
    "end": "302160"
  },
  {
    "text": "that in that one console app that i showed you so dotnet to run",
    "start": "302160",
    "end": "309638"
  },
  {
    "text": "let's wait for that to happen so the first tool that i want to show you is a tool that comes with",
    "start": "310400",
    "end": "316400"
  },
  {
    "text": "net core or that you can install with dot net core it's called net counters",
    "start": "316400",
    "end": "322479"
  },
  {
    "text": "and dotnet counters is um a tool that shows you performance counters so in the old days we used to",
    "start": "322479",
    "end": "329360"
  },
  {
    "text": "have like perfmon for viewing performance counters in this case we're gonna show",
    "start": "329360",
    "end": "334560"
  },
  {
    "text": "um so i'll show you what what it shows the first thing i need to do is um is just list the processes that i can",
    "start": "334560",
    "end": "341199"
  },
  {
    "text": "monitor and in this case our simple memory leak is um has the process id 6931",
    "start": "341199",
    "end": "349039"
  },
  {
    "text": "and so what we're going to do is we're going to do net counters monitor",
    "start": "349039",
    "end": "354800"
  },
  {
    "text": "and dash p 6931",
    "start": "354800",
    "end": "359319"
  },
  {
    "text": "[Music] this is going to show us some some counters for the process so some",
    "start": "360420",
    "end": "368800"
  },
  {
    "text": "um some tracing or whatever you want to call it as an example it will show us",
    "start": "368800",
    "end": "374400"
  },
  {
    "text": "how much memory we're using in megabytes so we're using around 200 megabytes for these products the reason",
    "start": "374400",
    "end": "380960"
  },
  {
    "text": "why we're using so much is because i've inflated it by adding a character array that's",
    "start": "380960",
    "end": "386560"
  },
  {
    "text": "by default very big to each of these products so this tool",
    "start": "386560",
    "end": "392319"
  },
  {
    "text": "net counters which you can install with net install um helps us a little bit uh to tell us if",
    "start": "392319",
    "end": "399840"
  },
  {
    "text": "we're leaking a net code or is there a net object or if we're leaking for example native",
    "start": "399840",
    "end": "406160"
  },
  {
    "text": "objects and by native i mean something that's like not.net or maybe we're",
    "start": "406160",
    "end": "411440"
  },
  {
    "text": "leaking um dlls like assemblies so",
    "start": "411440",
    "end": "416479"
  },
  {
    "text": "this would also be shown for example in the number of assemblies it in here as long as we see",
    "start": "416479",
    "end": "423919"
  },
  {
    "text": "um the gc heap size which is dot net heap growing it means that we're going",
    "start": "423919",
    "end": "429199"
  },
  {
    "text": "to be looking for a problem um among net objects so we're going to go ahead and leak a",
    "start": "429199",
    "end": "434880"
  },
  {
    "text": "little bit more and see that the heap size goes up by 200 more so now we know for sure that",
    "start": "434880",
    "end": "443440"
  },
  {
    "text": "we're going to be looking for a growth in net object memory the next thing so that's just sort of",
    "start": "443440",
    "end": "450160"
  },
  {
    "text": "like to to give us a little bit of an idea of where we stand and what we're trying to look at",
    "start": "450160",
    "end": "455360"
  },
  {
    "text": "the next tool i'm going to show you is a tool that you can also install with net install that's called net",
    "start": "455360",
    "end": "463199"
  },
  {
    "text": "gc dump so gc dump um [Music] what it is",
    "start": "463199",
    "end": "468560"
  },
  {
    "text": "is a tool that allows you to use collect statistics of the net objects that are",
    "start": "468560",
    "end": "473840"
  },
  {
    "text": "in the process so we can do dotnet gcdm collect actually i need to",
    "start": "473840",
    "end": "478960"
  },
  {
    "text": "i can't remember what the paid was um i said it was 69 31.",
    "start": "478960",
    "end": "484319"
  },
  {
    "text": "um so dot net gc dump collect dash p",
    "start": "484319",
    "end": "489360"
  },
  {
    "text": "6931 so this will just",
    "start": "489360",
    "end": "494800"
  },
  {
    "text": "essentially collect statistics about all the.net objects that are on there",
    "start": "494800",
    "end": "500240"
  },
  {
    "text": "and we can go ahead and open that in visual studio",
    "start": "500240",
    "end": "505360"
  },
  {
    "text": "um and this what you what you get here is the same thing that you would get",
    "start": "505360",
    "end": "512240"
  },
  {
    "text": "if you were to debug your process inside visual studio and you know there is like the diagnostic tools",
    "start": "512240",
    "end": "519120"
  },
  {
    "text": "window and visual studio you can take a snapshot this is that snapshot",
    "start": "519120",
    "end": "525519"
  },
  {
    "text": "um not sure how well you can see this but this gives us a list of all the dotnet",
    "start": "525519",
    "end": "532880"
  },
  {
    "text": "objects that are in the process and the first thing if we if we go ahead and sort by",
    "start": "532880",
    "end": "539440"
  },
  {
    "text": "count is we see our product so this is um and the product object we have 20 000 of",
    "start": "539440",
    "end": "547200"
  },
  {
    "text": "them and they by themselves including the objects that they hold on to like the characters arrays and everything",
    "start": "547200",
    "end": "554480"
  },
  {
    "text": "take up 402 megabytes so that's the sizeable amount of the 420 like the",
    "start": "554480",
    "end": "560720"
  },
  {
    "text": "other is like a little bit naturally so if we were to",
    "start": "560720",
    "end": "565839"
  },
  {
    "text": "to look at this process and try to figure out what's going on we could just do a gc dump look and in this case it's",
    "start": "565839",
    "end": "572160"
  },
  {
    "text": "very very um like i would say in this case it's it's",
    "start": "572160",
    "end": "577440"
  },
  {
    "text": "clear that this is the problem it might not always be like that because obviously in a real process you would be",
    "start": "577440",
    "end": "584240"
  },
  {
    "text": "also allocating a lot of other things so you might have to look a little bit deeper before you see the culprit it's",
    "start": "584240",
    "end": "590320"
  },
  {
    "text": "not going to be this obvious but it will often actually be this easy to to determine",
    "start": "590320",
    "end": "597440"
  },
  {
    "text": "which type of objects you might be leaking and if we click on this we get um",
    "start": "597440",
    "end": "604240"
  },
  {
    "text": "[Music] we get a little thing down here which is the routine so i'm",
    "start": "604240",
    "end": "609839"
  },
  {
    "text": "i'm gonna go and go over in powerpoint and show you this zoomed in in a moment but if you go through and click on these",
    "start": "609839",
    "end": "616800"
  },
  {
    "text": "they will show you the root chain for for each of them so what do i mean by root chain i mean that",
    "start": "616800",
    "end": "624480"
  },
  {
    "text": "um for each one of these it tells you um in this case 19 09",
    "start": "624480",
    "end": "633200"
  },
  {
    "text": "of the 20 000 are in fact rooted in a list of products so the reason why",
    "start": "633200",
    "end": "640240"
  },
  {
    "text": "they're sticking around the reason why they can't be collected is because they are actually contained in a list of",
    "start": "640240",
    "end": "645680"
  },
  {
    "text": "products and unless you remove them from the list they will not go away so",
    "start": "645680",
    "end": "651519"
  },
  {
    "text": "this is how simple it can be to troubleshoot a memory leak now again like i said if",
    "start": "651519",
    "end": "657760"
  },
  {
    "text": "this was a bigger process you might have to look a little bit deeper before you get to the products but",
    "start": "657760",
    "end": "664240"
  },
  {
    "text": "it's not going to be terribly much more than this to debug a memory leak",
    "start": "664240",
    "end": "671279"
  },
  {
    "text": "we could if we wanted to also go one step further and um",
    "start": "671279",
    "end": "677120"
  },
  {
    "text": "and debug this as a memory dump so let's see let's go back to um",
    "start": "677120",
    "end": "683279"
  },
  {
    "text": "this and instead of dotnet gcdump we would do net dump",
    "start": "683279",
    "end": "689279"
  },
  {
    "text": "this is another tool and that you can download and install from.net and this now instead of just",
    "start": "689279",
    "end": "696240"
  },
  {
    "text": "giving us the statistics of the objects it gives us a full memory dump so this is a snapshot of the process as it was",
    "start": "696240",
    "end": "704079"
  },
  {
    "text": "when we captured the dump and i'm going to close down a few of these to give us some more",
    "start": "704079",
    "end": "710240"
  },
  {
    "text": "space to look at what this means so",
    "start": "710240",
    "end": "717240"
  },
  {
    "text": "so this is typically what you would pull up in windy bg so this is is one way to",
    "start": "718639",
    "end": "723920"
  },
  {
    "text": "capture a memory dump that you can open up in one dpg but you can also open it up inside.net dom so we can do",
    "start": "723920",
    "end": "731160"
  },
  {
    "text": "[Music] here dotnet dump analyze",
    "start": "731160",
    "end": "736720"
  },
  {
    "text": "and it's usually called core something on linux or it's called something dump on",
    "start": "736720",
    "end": "742880"
  },
  {
    "text": "on windows let me gonna silence",
    "start": "742880",
    "end": "748160"
  },
  {
    "text": "my team um yeah so i've opened up the memory dump and now i",
    "start": "748160",
    "end": "754320"
  },
  {
    "text": "can run a few commands and i'm going to be running commands and you're going to be going like okay how",
    "start": "754320",
    "end": "759839"
  },
  {
    "text": "am i going to remember that don't don't worry about having to remember it i'll show you some links that will show you",
    "start": "759839",
    "end": "766160"
  },
  {
    "text": "and that will give you enough information to to remember all the commands and once you open up the",
    "start": "766160",
    "end": "772560"
  },
  {
    "text": "memory dump you can though write help or you can write blah or you can write anything that is not a command",
    "start": "772560",
    "end": "779040"
  },
  {
    "text": "and it will show you all the commands that you can use in this process one of these commands is called e",
    "start": "779040",
    "end": "785760"
  },
  {
    "text": "version so ee in this case stands for execution engine which is the whole",
    "start": "785760",
    "end": "791360"
  },
  {
    "text": "clr like the whole dotnet frame like dot net runtime an ee version",
    "start": "791360",
    "end": "796959"
  },
  {
    "text": "is used to command that we can run to understand sort of like what what the net framework version is a couple of",
    "start": "796959",
    "end": "803279"
  },
  {
    "text": "things like for example in this case we're running something called workstation mode which is one version of",
    "start": "803279",
    "end": "809200"
  },
  {
    "text": "the garbage collector that you will run in command line um or anything that's",
    "start": "809200",
    "end": "814639"
  },
  {
    "text": "not a server anything that's not bombarded by requests we usually run the workstation version and then there is a",
    "start": "814639",
    "end": "821440"
  },
  {
    "text": "server version which is geared towards web applications for example that get",
    "start": "821440",
    "end": "827279"
  },
  {
    "text": "bombarded with a request where each one of the processors on your machine",
    "start": "827279",
    "end": "833040"
  },
  {
    "text": "can garbage collect at the same time you don't necessarily have to worry about this a whole lot but this is the",
    "start": "833040",
    "end": "838959"
  },
  {
    "text": "information you get here the next thing we can do is we can run a command called e-heap",
    "start": "838959",
    "end": "844800"
  },
  {
    "text": "so execution engine heap and what this will show us is how much memory we're",
    "start": "844800",
    "end": "850240"
  },
  {
    "text": "using in the like how much memory we're using in the process and specifically how much memory goes to dotnet objects",
    "start": "850240",
    "end": "857680"
  },
  {
    "text": "and we'll see in here that it's a total of 406 which was the same thing we saw with the counters",
    "start": "857680",
    "end": "864480"
  },
  {
    "text": "it also gives us some information about the the segment",
    "start": "864480",
    "end": "869600"
  },
  {
    "text": "and i'll get to what the segments and everything are in just a second but for right now i want to show you",
    "start": "869600",
    "end": "876399"
  },
  {
    "text": "how how you would no and how you would troubleshoot the memory leak which is you would do you",
    "start": "876399",
    "end": "882000"
  },
  {
    "text": "would run a command called dump stat which shows all the even like the.net",
    "start": "882000",
    "end": "887600"
  },
  {
    "text": "heap in statistical format so this is exactly what you saw in",
    "start": "887600",
    "end": "893199"
  },
  {
    "text": "in the visual studio case with gc dump which lists all the object and the statistics for them and you can see for",
    "start": "893199",
    "end": "899920"
  },
  {
    "text": "example here too that we have 20 000 product objects okay so typically when you have a memory",
    "start": "899920",
    "end": "907279"
  },
  {
    "text": "leak or a memory you can't really necessarily leak.net memory you can just use it and forget why you used it but",
    "start": "907279",
    "end": "914079"
  },
  {
    "text": "you cannot like it's not like c plus where you can allocate something and then never be",
    "start": "914079",
    "end": "919519"
  },
  {
    "text": "able to de-allocate it again when you look at a list like this and it",
    "start": "919519",
    "end": "925440"
  },
  {
    "text": "gives you the statistics there are a couple of things that you need to think about when you try to",
    "start": "925440",
    "end": "931440"
  },
  {
    "text": "figure out which things should i look at and which things shouldn't i look at so you'll see at the bottom for example",
    "start": "931440",
    "end": "938160"
  },
  {
    "text": "that we have a lot of strings and a lot of character arrays and these take up a lot of memory",
    "start": "938160",
    "end": "945199"
  },
  {
    "text": "trying to debug all the different strings and why they stay around",
    "start": "945199",
    "end": "950560"
  },
  {
    "text": "that's a futile mission like you will never get there because",
    "start": "950560",
    "end": "955680"
  },
  {
    "text": "the process is always going to use a lot of strings and a lot of arrays and in fact the way it works in.net if i",
    "start": "955680",
    "end": "962880"
  },
  {
    "text": "go ahead and run a command called um dumpheep empty which is dump dump",
    "start": "962880",
    "end": "970000"
  },
  {
    "text": "everything with a certain method table a method table is an identifier for your",
    "start": "970000",
    "end": "975040"
  },
  {
    "text": "object so it dumps out all these product objects you'll see that all of",
    "start": "975040",
    "end": "980800"
  },
  {
    "text": "them are 40 bytes so",
    "start": "980800",
    "end": "986160"
  },
  {
    "text": "any object like for example like a class like this",
    "start": "986160",
    "end": "992079"
  },
  {
    "text": "product is never going to be very big because the only space it takes up",
    "start": "992079",
    "end": "999440"
  },
  {
    "text": "is the you know like the pointers to its member variables",
    "start": "999440",
    "end": "1005279"
  },
  {
    "text": "but it can never be for example 1k even if whatever it points to is 1k",
    "start": "1005279",
    "end": "1012000"
  },
  {
    "text": "however things like strings like the string takes up whatever size",
    "start": "1012000",
    "end": "1017839"
  },
  {
    "text": "the string is the array takes up whatever size the array is so strings and an erase they",
    "start": "1017839",
    "end": "1024880"
  },
  {
    "text": "will always end up at the bottom so you can clearly you can ignore them and instead go",
    "start": "1024880",
    "end": "1030720"
  },
  {
    "text": "straight for like look a little bit further up in the list and think okay so what do i see there that's maybe mine",
    "start": "1030720",
    "end": "1037520"
  },
  {
    "text": "this may be custom that looks out of place for example is it realistic for this process to use",
    "start": "1037520",
    "end": "1044319"
  },
  {
    "text": "up 20 000 products and once you've done that and you you dump out like products like",
    "start": "1044319",
    "end": "1051440"
  },
  {
    "text": "this you can then go in and pick one of them um",
    "start": "1051440",
    "end": "1056559"
  },
  {
    "text": "and and run gc root so gc root will do exactly what",
    "start": "1056559",
    "end": "1062880"
  },
  {
    "text": "um what the other what the other tool like woodwisher studio was doing showing you",
    "start": "1062880",
    "end": "1070799"
  },
  {
    "text": "i need to make them shut up like why why is my team working at",
    "start": "1070799",
    "end": "1077760"
  },
  {
    "text": "this hour [Music] so gc root will show you what was at the",
    "start": "1077760",
    "end": "1084240"
  },
  {
    "text": "bottom of the visual studio output for for the gc dump like it will essentially in this case say",
    "start": "1084240",
    "end": "1090480"
  },
  {
    "text": "that this particular product is enclosed in a product array which is",
    "start": "1090480",
    "end": "1095840"
  },
  {
    "text": "the implementation for for a product list and this particular",
    "start": "1095840",
    "end": "1102799"
  },
  {
    "text": "product list is then in use on a thread so this is why it's sticking around and",
    "start": "1102799",
    "end": "1108480"
  },
  {
    "text": "this is the a little bit the end of the road for this investigation we've already sort of determined why",
    "start": "1108480",
    "end": "1115440"
  },
  {
    "text": "uh what the problem is okay so um",
    "start": "1115440",
    "end": "1123320"
  },
  {
    "text": "so we've used.net counters we'll use dot net dump with used.net gcdump and these",
    "start": "1126559",
    "end": "1131760"
  },
  {
    "text": "are all tools that are are easy to install both locally and and if you're running on",
    "start": "1131760",
    "end": "1137679"
  },
  {
    "text": "on a server somewhere if you want to understand sort of like if you",
    "start": "1137679",
    "end": "1143280"
  },
  {
    "text": "want to do this at home um you can go in on on my blog which is www",
    "start": "1143280",
    "end": "1148480"
  },
  {
    "text": "www.testfriendlist.com there is like a lot yeah i'll get to you",
    "start": "1148480",
    "end": "1153840"
  },
  {
    "text": "and there's a lot of labs a lot of what i'm talking about here is in lab so you can actually run them and",
    "start": "1153840",
    "end": "1161200"
  },
  {
    "text": "and try out all these commands and also understand what all these commands mean",
    "start": "1161200",
    "end": "1167440"
  },
  {
    "text": "and what the output means and all that stuff yes",
    "start": "1167440",
    "end": "1172240"
  },
  {
    "text": "uh you mean for example like to um to take one snapshot and then another one yes",
    "start": "1177200",
    "end": "1182720"
  },
  {
    "text": "so um with the memory dump the one you took with",
    "start": "1182720",
    "end": "1188240"
  },
  {
    "text": "net dump um then you have to compare it manually then you would have to open one",
    "start": "1188240",
    "end": "1193440"
  },
  {
    "text": "and then another but um in visual studio there is an option to",
    "start": "1193440",
    "end": "1199600"
  },
  {
    "text": "to do compare with and then you can browse for just another snapshot so you can do gc dump twice you know",
    "start": "1199600",
    "end": "1207200"
  },
  {
    "text": "and making whatever it takes for you to reproduce it in between and it will then show you",
    "start": "1207200",
    "end": "1213039"
  },
  {
    "text": "like which ones the diff that was um that was biggest so to speak so you",
    "start": "1213039",
    "end": "1218720"
  },
  {
    "text": "can sort it by diff in that case so good question",
    "start": "1218720",
    "end": "1224720"
  },
  {
    "text": "um [Music] yes so um",
    "start": "1224720",
    "end": "1230640"
  },
  {
    "text": "let's have a look at the memory layout and like how how things looked in in the memory dom",
    "start": "1230640",
    "end": "1236880"
  },
  {
    "text": "so if we look at this e heap dash gc um we can then go ahead and dump out for",
    "start": "1236880",
    "end": "1243440"
  },
  {
    "text": "example one segment so i'll get to the segment in just a second don't peep",
    "start": "1243440",
    "end": "1251279"
  },
  {
    "text": "so at least dump it out from one address uh to another and",
    "start": "1251840",
    "end": "1257679"
  },
  {
    "text": "we'll see that in.net the way it works instead of like in c plus plus and and",
    "start": "1257679",
    "end": "1263919"
  },
  {
    "text": "this is actually true not only for net but also for python or for any generally anything that has a garbage",
    "start": "1263919",
    "end": "1270400"
  },
  {
    "text": "collector will work fairly similarly so instead of you allocating",
    "start": "1270400",
    "end": "1276320"
  },
  {
    "text": "ist the memory needed for your specific object the garbage collector allocates a",
    "start": "1276320",
    "end": "1281360"
  },
  {
    "text": "big chunk of memory called a segment and in this segment it then places your",
    "start": "1281360",
    "end": "1286480"
  },
  {
    "text": "object one after another like tightly first one object next and then next and",
    "start": "1286480",
    "end": "1292320"
  },
  {
    "text": "then the next and sometimes in between you'll have like these free objects",
    "start": "1292320",
    "end": "1298880"
  },
  {
    "text": "just to align them a little bit to to nice addresses so in this case we have",
    "start": "1298880",
    "end": "1305600"
  },
  {
    "text": "our product and this 44 one is probably a string and the in this 200",
    "start": "1305600",
    "end": "1312960"
  },
  {
    "text": "or 20 k1 is probably the character array i happen to know this because i know how",
    "start": "1312960",
    "end": "1318799"
  },
  {
    "text": "big they are but you could for example dump out this object to understand what it was",
    "start": "1318799",
    "end": "1325360"
  },
  {
    "text": "so the nice thing about that is laid out like this is that it allows us to then",
    "start": "1326400",
    "end": "1331440"
  },
  {
    "text": "enumerate and give get these statistics and things like that so what we're seeing here with dumpy stat and",
    "start": "1331440",
    "end": "1338080"
  },
  {
    "text": "everything that we can run here is a result of um when i used to work in asp.net",
    "start": "1338080",
    "end": "1343760"
  },
  {
    "text": "support we does anyone know how to how to silence",
    "start": "1343760",
    "end": "1350080"
  },
  {
    "text": "this i should know this working where i work this one",
    "start": "1350080",
    "end": "1356080"
  },
  {
    "text": "is quit i guess yes um you don't need to see this",
    "start": "1356080",
    "end": "1362640"
  },
  {
    "text": "okay cool um so when i worked in asp.net support then um",
    "start": "1362640",
    "end": "1368400"
  },
  {
    "text": "we needed to troubleshoot these kind of things and and the product team for for.net back then had this",
    "start": "1368400",
    "end": "1376000"
  },
  {
    "text": "a nice tool but very rudimentary that was called strike so back in the day",
    "start": "1376000",
    "end": "1381520"
  },
  {
    "text": "net had two um two parts it was dna and lightning which was essentially the",
    "start": "1381520",
    "end": "1387840"
  },
  {
    "text": "common language runtime and then the base class libraries and in order to debug this they had this",
    "start": "1387840",
    "end": "1393760"
  },
  {
    "text": "tool called strike this extension called strike because of strike the light",
    "start": "1393760",
    "end": "1399280"
  },
  {
    "text": "so what we did in support together with the with the espnet product team was we generally we created",
    "start": "1399280",
    "end": "1405360"
  },
  {
    "text": "a tool called sos and you might have tried this if you worked with memory dumps",
    "start": "1405360",
    "end": "1410960"
  },
  {
    "text": "um and you might think that this sos stands for save our souls and it sure has saved",
    "start": "1410960",
    "end": "1417360"
  },
  {
    "text": "my soul maybe one once or twice but it's um it actually stands for son of strike so son",
    "start": "1417360",
    "end": "1423679"
  },
  {
    "text": "of strike then we generated like where we created all these commands like dumpheep and everything to to be able to",
    "start": "1423679",
    "end": "1429600"
  },
  {
    "text": "enumerate them but and and that's also what's made it into to this",
    "start": "1429600",
    "end": "1435200"
  },
  {
    "text": "um [Music] but this is sort of like the reason why we could do this and and this is also",
    "start": "1435200",
    "end": "1442159"
  },
  {
    "text": "um something that could be done for example in other managed languages",
    "start": "1442159",
    "end": "1447600"
  },
  {
    "text": "if we look at this again um",
    "start": "1447600",
    "end": "1451679"
  },
  {
    "text": "um [Music] we'll see that these are sort of like a fixed size and",
    "start": "1454240",
    "end": "1459360"
  },
  {
    "text": "when you run out of them you get more and more of them and we have something called the large objective where we",
    "start": "1459360",
    "end": "1464559"
  },
  {
    "text": "store very large object but i'll get to that in a second too if you want to know more about like how",
    "start": "1464559",
    "end": "1471760"
  },
  {
    "text": "this allocation works and and sort of like go deeper into performance issues with allocation and things like that",
    "start": "1471760",
    "end": "1478799"
  },
  {
    "text": "and this is a good uh place to to look so this is my only who's the architect of the",
    "start": "1478799",
    "end": "1485039"
  },
  {
    "text": "the garbage collector and it's her little brain dump of of what's going on",
    "start": "1485039",
    "end": "1492080"
  },
  {
    "text": "and also on my blog i have plenty of information about how the garbage collector works and things like that",
    "start": "1492080",
    "end": "1499840"
  },
  {
    "text": "the reason why we would have a memorylean.net or or why we would use up a lot of memory",
    "start": "1499840",
    "end": "1506480"
  },
  {
    "text": "because we can't leak things it means that they must be rooted and we've seen a couple of routes we've seen sort of",
    "start": "1506480",
    "end": "1513279"
  },
  {
    "text": "like the the list that was on the thread in this case it was actually also a static list",
    "start": "1513279",
    "end": "1519760"
  },
  {
    "text": "so static objects they stay around um cache which is used a subset of",
    "start": "1519760",
    "end": "1526000"
  },
  {
    "text": "statics or pinned objects if you pin something then it won't be garbage collected until it's",
    "start": "1526000",
    "end": "1532880"
  },
  {
    "text": "unpinned and finally something called the finalizer cue",
    "start": "1532880",
    "end": "1538480"
  },
  {
    "text": "so let's have a look at another memory leak",
    "start": "1538480",
    "end": "1543600"
  },
  {
    "text": "and how to troubleshoot it that happens to be rooted in something slightly different",
    "start": "1543600",
    "end": "1549440"
  },
  {
    "text": "so in this case i've captured a memory dump and i'm going to be using",
    "start": "1549440",
    "end": "1554640"
  },
  {
    "text": "windowpg instead so windup g is native debugger that you can download from the windows store or you can also download",
    "start": "1554640",
    "end": "1560880"
  },
  {
    "text": "it separately if you want to and this is a tool that you can also debug not gc",
    "start": "1560880",
    "end": "1566960"
  },
  {
    "text": "dump but dump full dumps so let's see open up",
    "start": "1566960",
    "end": "1574080"
  },
  {
    "text": "um here so dotnet dump is one way to create a",
    "start": "1576480",
    "end": "1583200"
  },
  {
    "text": "memory dump you can also generate memory dumps by right clicking in task manager create",
    "start": "1583200",
    "end": "1589919"
  },
  {
    "text": "dump or you can and do it with for example with proc dump or there's a lot a lot of different",
    "start": "1589919",
    "end": "1596320"
  },
  {
    "text": "tools that you can use to capture doms so in this case we're going to go",
    "start": "1596320",
    "end": "1601360"
  },
  {
    "text": "through the exact same things but in this case in windows so in this case we're going to actually use the sos dot",
    "start": "1601360",
    "end": "1607520"
  },
  {
    "text": "yellow and the only difference between this and the other one is well there are a couple of differences in this one you",
    "start": "1607520",
    "end": "1613760"
  },
  {
    "text": "can run a few more commands that you can't in the other one you can run commands like native commands that show",
    "start": "1613760",
    "end": "1618960"
  },
  {
    "text": "the the call stack and things like that and um you have to you have to use exclamation",
    "start": "1618960",
    "end": "1625919"
  },
  {
    "text": "mark before because we're using a dll so we can still run a version",
    "start": "1625919",
    "end": "1630960"
  },
  {
    "text": "in this case we see that it's instead server mode because this is taken from a web server",
    "start": "1630960",
    "end": "1636880"
  },
  {
    "text": "and with two gc heaps so one heap per per processor on the machine",
    "start": "1636880",
    "end": "1644559"
  },
  {
    "text": "and we can run ee heap gc",
    "start": "1644559",
    "end": "1650000"
  },
  {
    "text": "and we'll see now that instead of one we get two heaps and and the total",
    "start": "1650000",
    "end": "1656240"
  },
  {
    "text": "um total use is around 340 megs in this case so we want to understand why we're",
    "start": "1656240",
    "end": "1662559"
  },
  {
    "text": "using up this much memory and just like in the other one we can then run dump",
    "start": "1662559",
    "end": "1669278"
  },
  {
    "text": "stat to get to statistics and you'll see that you get this um sort",
    "start": "1669679",
    "end": "1676799"
  },
  {
    "text": "of like blue link underneath it so this is something called debugger markup language which",
    "start": "1676799",
    "end": "1681919"
  },
  {
    "text": "makes your life a little bit easier because instead of having to run the commands you can just click on the links",
    "start": "1681919",
    "end": "1687440"
  },
  {
    "text": "and it will run the commands for you so in this case again if we go from the bottom we'll see that okay so we have",
    "start": "1687440",
    "end": "1693840"
  },
  {
    "text": "some character arrays we have some bite arrays we have some string arrays and some other arrays and",
    "start": "1693840",
    "end": "1700880"
  },
  {
    "text": "string builders and we remember from the old from the other one that these are",
    "start": "1700880",
    "end": "1706320"
  },
  {
    "text": "things that naturally show up at the very bottom because they are actually able to take up more space than",
    "start": "1706320",
    "end": "1713440"
  },
  {
    "text": "than the classes that you create that only take up the space for for the links or for the pointers that",
    "start": "1713440",
    "end": "1719440"
  },
  {
    "text": "the classes have so what we do see here though is that this",
    "start": "1719440",
    "end": "1724640"
  },
  {
    "text": "maybe looks a little bit fishy like we have this link object we have 15 000 of",
    "start": "1724640",
    "end": "1729840"
  },
  {
    "text": "them and they seem to be ending up very low on the stack so we can then go ahead and and dump a few",
    "start": "1729840",
    "end": "1736720"
  },
  {
    "text": "of them out and go in and dump a single one of them out",
    "start": "1736720",
    "end": "1743279"
  },
  {
    "text": "and grab the address and do gc route so this is the whole chain it's",
    "start": "1743279",
    "end": "1749120"
  },
  {
    "text": "the same sort of chain that we saw in the last one run the statistics dump out some",
    "start": "1749120",
    "end": "1754399"
  },
  {
    "text": "specific objects root them understand why they are sticking around and in this case we see",
    "start": "1754399",
    "end": "1759919"
  },
  {
    "text": "that this one is sticking around because it's rooted by something called the finalizer queue",
    "start": "1759919",
    "end": "1765520"
  },
  {
    "text": "so the finalizer queue is a special cue for objectstead to have finalizers",
    "start": "1765520",
    "end": "1771520"
  },
  {
    "text": "so that have destructors typically an object will have a destructor if if the object",
    "start": "1771520",
    "end": "1777919"
  },
  {
    "text": "needs to release some kind of native something native so maybe a database",
    "start": "1777919",
    "end": "1783520"
  },
  {
    "text": "connection or something like that but every time it does it means that when you collect the object",
    "start": "1783520",
    "end": "1790480"
  },
  {
    "text": "it first gets collected and then it gets put on this queue to get finalized so we",
    "start": "1790480",
    "end": "1795919"
  },
  {
    "text": "need to run this finalizer and the finalizer is one thread so all",
    "start": "1795919",
    "end": "1801279"
  },
  {
    "text": "everything that needs to be finalized needs to go through this one thread so if we look at",
    "start": "1801279",
    "end": "1806720"
  },
  {
    "text": "the threads in the process i'll zoom in like that um",
    "start": "1806720",
    "end": "1811840"
  },
  {
    "text": "we'll see that there is exactly one one thread that's called a finalizer so it means that anything that needs to be",
    "start": "1811840",
    "end": "1817679"
  },
  {
    "text": "finalizable is now single threaded it needs to go through this one thing",
    "start": "1817679",
    "end": "1822960"
  },
  {
    "text": "um [Music] if for some reason this takes a long time or if",
    "start": "1822960",
    "end": "1828320"
  },
  {
    "text": "like if for some reason this is blocked or this is uh gets messed up somehow",
    "start": "1828320",
    "end": "1833360"
  },
  {
    "text": "then you might run into an issue where you're leaking or you're using up a whole lot of memory for objects that",
    "start": "1833360",
    "end": "1840159"
  },
  {
    "text": "could be garbage collected but are still but are just waiting for finalization",
    "start": "1840159",
    "end": "1845760"
  },
  {
    "text": "in fact if you run threads and you see something like this where you have a lot of these x's that means that these are threads that",
    "start": "1845760",
    "end": "1854320"
  },
  {
    "text": "um where the thread object exists but they are not actually attached to a thread anymore so they are probably also",
    "start": "1854320",
    "end": "1860960"
  },
  {
    "text": "waiting for finalization so this is a very big clue that your finalizer is blocked somehow",
    "start": "1860960",
    "end": "1867679"
  },
  {
    "text": "and if we go in now and look at the thread that was the finalizer and we",
    "start": "1867679",
    "end": "1872880"
  },
  {
    "text": "can run something called clr stack this is the equivalent of you looking at",
    "start": "1872880",
    "end": "1878320"
  },
  {
    "text": "a stack in visual studio right so we have",
    "start": "1878320",
    "end": "1883440"
  },
  {
    "text": "the finalizer is calling the destructor off in this",
    "start": "1883440",
    "end": "1888559"
  },
  {
    "text": "case the link object and it happens to go into sleep obviously i've artificially created the sleep in here",
    "start": "1888559",
    "end": "1895039"
  },
  {
    "text": "but you can imagine that this is actually sort of like a problem where it takes a lot of time for it to clean up",
    "start": "1895039",
    "end": "1902000"
  },
  {
    "text": "some native resources but now this is making everything else that should be garbage collected blocked",
    "start": "1902000",
    "end": "1909360"
  },
  {
    "text": "now one thing that's a little bit funky about this is that",
    "start": "1909360",
    "end": "1915600"
  },
  {
    "text": "if you have a class like this so you do have a destructor but the destructor is",
    "start": "1915600",
    "end": "1920960"
  },
  {
    "text": "empty and you still have to go through the finalizer as soon as you put a destructor on your",
    "start": "1920960",
    "end": "1927519"
  },
  {
    "text": "object you will need to go through the finalizer which means that your object will at least survive one collection",
    "start": "1927519",
    "end": "1934960"
  },
  {
    "text": "so that's a bad thing if you don't have anything that needs to be sort of cleaned up",
    "start": "1934960",
    "end": "1940880"
  },
  {
    "text": "don't do this but again we went through what's using up the memory we looked at the",
    "start": "1940880",
    "end": "1946720"
  },
  {
    "text": "statistics we looked at why it's not going away and then from there it's obviously a matter of trying to resolve",
    "start": "1946720",
    "end": "1952960"
  },
  {
    "text": "and make sure that the finalizer gets unlocked uh so we used wind bg",
    "start": "1952960",
    "end": "1959120"
  },
  {
    "text": "and we used sos so sms can also be installated.net install sos but it also",
    "start": "1959120",
    "end": "1965440"
  },
  {
    "text": "comes with the window achieved version that's in the store and sometimes you'll also need symbols",
    "start": "1965440",
    "end": "1971519"
  },
  {
    "text": "if you need to know if you need to look at sort of like the native stacks and everything and in that case you might want to install.net symbols as well",
    "start": "1971519",
    "end": "1980320"
  },
  {
    "text": "now with the garbage collector i'm not going to sort of like going super super deep on on the garbage collector and how it",
    "start": "1980320",
    "end": "1986480"
  },
  {
    "text": "works but the garbage collector uses something called generations and this is in order to speed up garbage collection",
    "start": "1986480",
    "end": "1994000"
  },
  {
    "text": "so we can think about generations like this generation zero is",
    "start": "1994000",
    "end": "1999440"
  },
  {
    "text": "very tran transient data so very temporary data that's local variables or",
    "start": "1999440",
    "end": "2006000"
  },
  {
    "text": "or things that are only a la alive or like the function or the request or",
    "start": "2006000",
    "end": "2012080"
  },
  {
    "text": "or whatever it might be and then as soon as that goes out of scope it's ready to be collected so for the garbage",
    "start": "2012080",
    "end": "2018720"
  },
  {
    "text": "collector because the garbage collector uses generations it can say that um",
    "start": "2018720",
    "end": "2023980"
  },
  {
    "text": "[Music] so it can sort of like do this thing where",
    "start": "2023980",
    "end": "2029360"
  },
  {
    "text": "um if we've allocated enough memory that we can't fit in the l2 cache which",
    "start": "2029360",
    "end": "2036320"
  },
  {
    "text": "is like the the cpu cache anymore then we should garbage collect and if you garbage",
    "start": "2036320",
    "end": "2041440"
  },
  {
    "text": "collect these newly created objects there is a very big chance that you'll actually",
    "start": "2041440",
    "end": "2047200"
  },
  {
    "text": "be able to garbage collect a lot of that memory um so then once you've garbage collected that if",
    "start": "2047200",
    "end": "2054320"
  },
  {
    "text": "for some reason it is rooted like in this case like if you write a lot of post-it notes and and",
    "start": "2054320",
    "end": "2061679"
  },
  {
    "text": "and your table where you can put the post-it notes is done then",
    "start": "2061679",
    "end": "2067440"
  },
  {
    "text": "if something is still in use then it will then move into generation",
    "start": "2067440",
    "end": "2072480"
  },
  {
    "text": "one and eventually we'll have a generation one collection when the",
    "start": "2072480",
    "end": "2078240"
  },
  {
    "text": "segment is full or when when the budget for generation one happens",
    "start": "2078240",
    "end": "2083520"
  },
  {
    "text": "and then whatever is still in use then will go into generation two and hopefully generation two we won't have",
    "start": "2083520",
    "end": "2089679"
  },
  {
    "text": "to garbage collect that often because these are long-lived things like cash or or statics or things that are",
    "start": "2089679",
    "end": "2097118"
  },
  {
    "text": "meant to be there maybe for the entirety of the process and we don't want to worry about like having to garbage",
    "start": "2097119",
    "end": "2102640"
  },
  {
    "text": "collect them all the time so by doing this we can speed up the garbage collection quite a bit",
    "start": "2102640",
    "end": "2109520"
  },
  {
    "text": "apart from the generations we also have sort of like the elephant in the room which is a large objective so larger big",
    "start": "2109520",
    "end": "2116400"
  },
  {
    "text": "tip is a special generation which actually turns out to be sort of generation three",
    "start": "2116400",
    "end": "2122640"
  },
  {
    "text": "where all the large objects are large objects being anything that's over 85 000 bytes in size so strings arrays",
    "start": "2122640",
    "end": "2130880"
  },
  {
    "text": "things like that it happened to be very big now the reason why we put them in a separate one is because they are very",
    "start": "2130880",
    "end": "2137599"
  },
  {
    "text": "expensive to move around like moving around in a very large array",
    "start": "2137599",
    "end": "2142640"
  },
  {
    "text": "is a lot of shirt for for the garbage collector so we want to keep that separate but there are issues that you can run",
    "start": "2142640",
    "end": "2149599"
  },
  {
    "text": "into where you over exhaust the large objective so you use you allocate a lot of large objects",
    "start": "2149599",
    "end": "2157359"
  },
  {
    "text": "because every time a large object segment is full we have to do a full generation like a full garbage",
    "start": "2157359",
    "end": "2162720"
  },
  {
    "text": "collection large objects generation two generation one generation zero everything so you",
    "start": "2162720",
    "end": "2169040"
  },
  {
    "text": "don't want to end up in that situation which brings us to bad performance",
    "start": "2169040",
    "end": "2175520"
  },
  {
    "text": "so we're going to look at the situation where we have very high cpu and garbage collection",
    "start": "2175520",
    "end": "2181280"
  },
  {
    "text": "when we look at performance issues we also have very two very simple questions",
    "start": "2181280",
    "end": "2186720"
  },
  {
    "text": "to answer one is what is it that we're doing and why is it taking so long",
    "start": "2186720",
    "end": "2193280"
  },
  {
    "text": "like essentially how can we reduce the amount of time that or the amount of",
    "start": "2193280",
    "end": "2199119"
  },
  {
    "text": "of energy we're spending on or whatever we're doing so we're going to have a look at one",
    "start": "2199119",
    "end": "2204960"
  },
  {
    "text": "which is a high cpu and garbage collection running on azure",
    "start": "2204960",
    "end": "2210640"
  },
  {
    "text": "so in this case um we can't really use net dump or anything because this is a web",
    "start": "2210800",
    "end": "2217119"
  },
  {
    "text": "application running on azure but one thing we can do though um in web apps is",
    "start": "2217119",
    "end": "2222560"
  },
  {
    "text": "we go and go into this diagnose and solve problems a bit in azure i don't know how many people",
    "start": "2222560",
    "end": "2228800"
  },
  {
    "text": "run web apps in azure like quite a few okay so hopefully you're a little bit familiar with it so",
    "start": "2228800",
    "end": "2235599"
  },
  {
    "text": "um if you have either a memory issue or a crash or something like that",
    "start": "2235599",
    "end": "2240960"
  },
  {
    "text": "um in your application running on azure you can run this tool and specifically the diagnostic tools",
    "start": "2240960",
    "end": "2248640"
  },
  {
    "text": "so in the diagnostic tools you're allowed to like you can get traces or you can collect memory dumps",
    "start": "2248640",
    "end": "2254720"
  },
  {
    "text": "you can monitor for crashes and ask it to get to create memory dumps on a crash or",
    "start": "2254720",
    "end": "2260160"
  },
  {
    "text": "or on a certain performance issue or something we're actually going to go in and choose",
    "start": "2260160",
    "end": "2265359"
  },
  {
    "text": "collect memory dump what this does under the hood is it uses this tool which is called debug diag so",
    "start": "2265359",
    "end": "2272400"
  },
  {
    "text": "you can download this tool also locally for your own machine if you want to troubleshoot issues on your own",
    "start": "2272400",
    "end": "2278480"
  },
  {
    "text": "machine and this is a tool that we created also when i worked back in support in order to be able to capture",
    "start": "2278480",
    "end": "2284480"
  },
  {
    "text": "memory dumps for very specific things so here you can set up rules for example so that when it crashes it will create a",
    "start": "2284480",
    "end": "2290640"
  },
  {
    "text": "dump or when you're throwing a specific.net exception you can create a dump or when you um",
    "start": "2290640",
    "end": "2297119"
  },
  {
    "text": "if you if you're over a certain cpu threshold or whatnot",
    "start": "2297119",
    "end": "2302480"
  },
  {
    "text": "and once you've captured the dump you can also run the other part of debug diag which is",
    "start": "2302480",
    "end": "2307760"
  },
  {
    "text": "the analysis bit so the analysis bit in this case will run through a specific set of",
    "start": "2307760",
    "end": "2314079"
  },
  {
    "text": "commands and things that we we saw ourselves sort of like doing over and over and over again so we created",
    "start": "2314079",
    "end": "2320400"
  },
  {
    "text": "scripts for them so this will run a set of commands that will hopefully identify",
    "start": "2320400",
    "end": "2327280"
  },
  {
    "text": "sort of like the most the 80 most common issues so you don't actually have to learn all the commands to to",
    "start": "2327280",
    "end": "2333680"
  },
  {
    "text": "troubleshoot these kind of things so in order to do this then in azure you",
    "start": "2333680",
    "end": "2339200"
  },
  {
    "text": "would then either collect data which is collector memory dom or collect and analyze data which",
    "start": "2339200",
    "end": "2344720"
  },
  {
    "text": "will also run the analysis part i'm not going to do this because it takes",
    "start": "2344720",
    "end": "2350560"
  },
  {
    "text": "quite a while so instead i'm going to go ahead and just open up an analysis from",
    "start": "2350560",
    "end": "2356480"
  },
  {
    "text": "that i took earlier and it looks like this",
    "start": "2356480",
    "end": "2361359"
  },
  {
    "text": "so once you run the analysis you will get sort of like this summary of what",
    "start": "2363359",
    "end": "2369280"
  },
  {
    "text": "the script thought it um the problem or what what problems you were running into so",
    "start": "2369280",
    "end": "2375599"
  },
  {
    "text": "in this case it thinks that um well it says",
    "start": "2375599",
    "end": "2380640"
  },
  {
    "text": "all of these threads in the process are trying to concatenate strings",
    "start": "2380640",
    "end": "2386400"
  },
  {
    "text": "and this in turn is a common issue that we see that is um",
    "start": "2386400",
    "end": "2393040"
  },
  {
    "text": "then discussed in in these blogs or these blog posts and these blog",
    "start": "2393040",
    "end": "2398079"
  },
  {
    "text": "posts actually go back to my blog and to to some of the",
    "start": "2398079",
    "end": "2404800"
  },
  {
    "text": "some of the posts in there to explain exactly how to troubleshoot them it also gives some",
    "start": "2404800",
    "end": "2411040"
  },
  {
    "text": "other things like how much cpu usage and things like that and then you can also go in and",
    "start": "2411040",
    "end": "2417040"
  },
  {
    "text": "scroll down and look at what the stacks are and things like that so without even opening up windows g you can already",
    "start": "2417040",
    "end": "2423119"
  },
  {
    "text": "sort of like go in and and troubleshoot these issues straight off and start off the processor straight off",
    "start": "2423119",
    "end": "2429839"
  },
  {
    "text": "azure so what this particular case is about",
    "start": "2429839",
    "end": "2435920"
  },
  {
    "text": "um is about um concatenating very large strings so let's have a look at um",
    "start": "2435920",
    "end": "2445520"
  },
  {
    "text": "here um how string creation works so let's say we have a",
    "start": "2446240",
    "end": "2452079"
  },
  {
    "text": "string hello and these are this is a segment where the red parts are objects that are",
    "start": "2452079",
    "end": "2458079"
  },
  {
    "text": "already on the heap now we create a new string hello that gets on the heap",
    "start": "2458079",
    "end": "2463839"
  },
  {
    "text": "now we go in and some someone else allocate to something else and then we add on world to to this string",
    "start": "2463839",
    "end": "2471359"
  },
  {
    "text": "so mentally we might think that we're just going to expand the string but",
    "start": "2471359",
    "end": "2477119"
  },
  {
    "text": "unfortunately um strings in in.net are immutable and",
    "start": "2477119",
    "end": "2482400"
  },
  {
    "text": "the reason for this is exactly what you see on the screen because we can't necessarily expand the",
    "start": "2482400",
    "end": "2488400"
  },
  {
    "text": "object on on the heap because there might already be something else after it so instead",
    "start": "2488400",
    "end": "2494400"
  },
  {
    "text": "you now have to create a new string that contains both hello and world right",
    "start": "2494400",
    "end": "2500560"
  },
  {
    "text": "so we've created two strings and if we were to create if we were to tack on just one character",
    "start": "2500560",
    "end": "2507760"
  },
  {
    "text": "we would have to create an entirely new string so we allocate a lot if we go through",
    "start": "2507760",
    "end": "2513200"
  },
  {
    "text": "for example a loop and add used one or two characters each time",
    "start": "2513200",
    "end": "2519280"
  },
  {
    "text": "and if this string happens to be a large string so something that's over 85 000",
    "start": "2519280",
    "end": "2524560"
  },
  {
    "text": "bytes let's say you're building up a full web page for example like the the html",
    "start": "2524560",
    "end": "2530240"
  },
  {
    "text": "for for complete web page then you might run into a situation where you tightly create",
    "start": "2530240",
    "end": "2536800"
  },
  {
    "text": "a lot of large objects and when you create these large objects you then exhaust the large object",
    "start": "2536800",
    "end": "2542800"
  },
  {
    "text": "segments and create this constant garbage collection where your garden where your garbage collect the",
    "start": "2542800",
    "end": "2549760"
  },
  {
    "text": "full net heap and you end up with super high cpu in in",
    "start": "2549760",
    "end": "2554880"
  },
  {
    "text": "a garbage collection so this is a very common problem for if you see high cpu in gc",
    "start": "2554880",
    "end": "2561599"
  },
  {
    "text": "the solution to this and and i'm sure a lot of you have run into this and a lot of you have seen",
    "start": "2561599",
    "end": "2567520"
  },
  {
    "text": "sort of like this problem in this uh solution but the solution to this is to use something like a string builder that",
    "start": "2567520",
    "end": "2574640"
  },
  {
    "text": "will allocate um sort of a buffer for you that you can fill in because then",
    "start": "2574640",
    "end": "2580560"
  },
  {
    "text": "um well first it will allocate a small buffer and then it will gradually double in size so you don't have to constantly",
    "start": "2580560",
    "end": "2587280"
  },
  {
    "text": "create a new one you can just fill up the buffer that you've already allocated",
    "start": "2587280",
    "end": "2592319"
  },
  {
    "text": "so that's a little bit debugging with a debug diag or um azure diagnostics which is",
    "start": "2592319",
    "end": "2599200"
  },
  {
    "text": "essentially the same thing it just happens to be that that tool is running on the in the cloud",
    "start": "2599200",
    "end": "2605760"
  },
  {
    "text": "let's have a look though of another way of troubleshooting something like a performance issue so in",
    "start": "2605760",
    "end": "2611920"
  },
  {
    "text": "this case it doesn't really matter if the memory dump is gathered from azure or from locally or wherever",
    "start": "2611920",
    "end": "2618000"
  },
  {
    "text": "you gather it but in this case i'm going to grab a memory dump that i created earlier and i'm going to",
    "start": "2618000",
    "end": "2623839"
  },
  {
    "text": "open it up in in visual studio so um let's see",
    "start": "2623839",
    "end": "2631920"
  },
  {
    "text": "because visual studio can also understand net memory dumps",
    "start": "2632960",
    "end": "2638880"
  },
  {
    "text": "and when you open up a memory dump in visual studio and i'm sorry this is a little bit small but it will tell you",
    "start": "2641920",
    "end": "2648800"
  },
  {
    "text": "pretty much the same thing that you can see from eu version like what version of the framework you're running",
    "start": "2648800",
    "end": "2655440"
  },
  {
    "text": "like what bitness a couple of things like that and you can then go in and choose to either debug",
    "start": "2655440",
    "end": "2661440"
  },
  {
    "text": "only the.net part which is debug with managed only or mixed or native only in",
    "start": "2661440",
    "end": "2667920"
  },
  {
    "text": "this case we're just going to go ahead and debug with managed and now",
    "start": "2667920",
    "end": "2673440"
  },
  {
    "text": "because this is a snapshot we can't move forward so we can't step by step debug but we can at least see what was going",
    "start": "2673440",
    "end": "2680480"
  },
  {
    "text": "on in the process at the time that that we captured the dump so we're going to go in and",
    "start": "2680480",
    "end": "2686720"
  },
  {
    "text": "choose a view parallel stacks so view parallel stacks is a tool that you can use also",
    "start": "2686720",
    "end": "2692800"
  },
  {
    "text": "when you're f5 debugging and which will show you the the stacks in the process",
    "start": "2692800",
    "end": "2699839"
  },
  {
    "text": "and all of the threads at the same time so not only the thread like the active thread that you're debugging so",
    "start": "2699839",
    "end": "2706560"
  },
  {
    "text": "this is totally usable also like for a step-by-step debugging in this case",
    "start": "2706560",
    "end": "2712400"
  },
  {
    "text": "it tells us that we have well if i zoom out a little bit um i have two sort of like console",
    "start": "2712400",
    "end": "2719520"
  },
  {
    "text": "logger and something else but then i have 10 threads that are all in the same",
    "start": "2719520",
    "end": "2726800"
  },
  {
    "text": "stack which is this product controller featured function and then goes in and calls this data",
    "start": "2726800",
    "end": "2733760"
  },
  {
    "text": "layer get featured products nine of these are waiting on a lock",
    "start": "2733760",
    "end": "2740079"
  },
  {
    "text": "and one of them is in a thread sleep if we go through so by the way if you",
    "start": "2740079",
    "end": "2746240"
  },
  {
    "text": "don't have symbols or anything already here this should tell you a little bit like",
    "start": "2746240",
    "end": "2751760"
  },
  {
    "text": "this should give you enough information to go in and look at your code and say okay so what the heck is going on here",
    "start": "2751760",
    "end": "2758079"
  },
  {
    "text": "why is this thread sleeping or why is this thing taking so long or what not",
    "start": "2758079",
    "end": "2763760"
  },
  {
    "text": "but if you do have symbols and if you do have the code for this you can also go in",
    "start": "2763760",
    "end": "2769680"
  },
  {
    "text": "and click on it and it will take you straight to the",
    "start": "2769680",
    "end": "2774960"
  },
  {
    "text": "to the actual code for the problem so it will tell you and tell you exactly",
    "start": "2774960",
    "end": "2780400"
  },
  {
    "text": "sort of what's going on so this is a quite nice debugging experience i think going from memory dumps without having",
    "start": "2780400",
    "end": "2787280"
  },
  {
    "text": "to know all these uh you know clr stack and whatever all these commands are instead",
    "start": "2787280",
    "end": "2793520"
  },
  {
    "text": "instead debugging it in in visual studio so i like this quite a bit um but this",
    "start": "2793520",
    "end": "2799440"
  },
  {
    "text": "works best if you have if you have the code lined up um if you",
    "start": "2799440",
    "end": "2804560"
  },
  {
    "text": "don't have the code you can still go in and look at the call stack and obviously this will be the call stack similarly to",
    "start": "2804560",
    "end": "2810319"
  },
  {
    "text": "to what you would see when you when you step by step debug and you can go in and look at locals and you can look at",
    "start": "2810319",
    "end": "2816720"
  },
  {
    "text": "all sorts of things here so this was just opening up",
    "start": "2816720",
    "end": "2821839"
  },
  {
    "text": "hello so this was just opening up the memory dump inside visual studio and using",
    "start": "2821839",
    "end": "2827200"
  },
  {
    "text": "parallel stacks right",
    "start": "2827200",
    "end": "2833599"
  },
  {
    "text": "um i put prague dump in here and because at one point i thought i was going to do the demo with program",
    "start": "2834640",
    "end": "2841200"
  },
  {
    "text": "progdamp is another tool from sysinternals that also allows you to capture memory dumps",
    "start": "2841200",
    "end": "2846880"
  },
  {
    "text": "and so go ahead and look that up too and that's a command line tool if you're doing",
    "start": "2846880",
    "end": "2853599"
  },
  {
    "text": "net framework and you don't so you don't have the option of doing a dot net dump you can then use proctom for example to",
    "start": "2853599",
    "end": "2860000"
  },
  {
    "text": "capture memory dumps i'm going to end off with crashes and exceptions and i just have a",
    "start": "2860000",
    "end": "2867359"
  },
  {
    "text": "very quick demo of how to troubleshoot such tool but one thing about crashes is that",
    "start": "2867359",
    "end": "2874240"
  },
  {
    "text": "crashes are a little bit different than for example both memory leaks and performance",
    "start": "2874240",
    "end": "2880240"
  },
  {
    "text": "problems where normally when you create and when you have a memory leak or a performance problem you will capture a",
    "start": "2880240",
    "end": "2886480"
  },
  {
    "text": "dump exactly now so you will type for example.net.collect and capture it",
    "start": "2886480",
    "end": "2891839"
  },
  {
    "text": "exactly now but in the case of a crash you don't want to do that you want to wait for",
    "start": "2891839",
    "end": "2897359"
  },
  {
    "text": "the exception or for the crash to happen and then capture the dump so it's just a little bit different in",
    "start": "2897359",
    "end": "2904319"
  },
  {
    "text": "the way you capture the memory dump and the thing you want to answer is of",
    "start": "2904319",
    "end": "2909599"
  },
  {
    "text": "course what the heck is happening so one way that you can capture the dump",
    "start": "2909599",
    "end": "2915280"
  },
  {
    "text": "at the time it crashes and this works both for um for a crash that happens after some",
    "start": "2915280",
    "end": "2922160"
  },
  {
    "text": "while or a crash that happens on startup for a project is you can use this windows error reporting where windows",
    "start": "2922160",
    "end": "2929440"
  },
  {
    "text": "error reporting will then capture dumps for you of all the processes when they crash",
    "start": "2929440",
    "end": "2934720"
  },
  {
    "text": "and you save them away you can also go through and for example with debug diag or",
    "start": "2934720",
    "end": "2940319"
  },
  {
    "text": "or with progdam set up different conditions for when you capture the dump",
    "start": "2940319",
    "end": "2945760"
  },
  {
    "text": "um so i want to show you how a dump debug of a crash would look instead so let's",
    "start": "2945760",
    "end": "2953119"
  },
  {
    "text": "go ahead and close this and in this case i've captured a memory dump with",
    "start": "2953119",
    "end": "2960079"
  },
  {
    "text": "when a crash happened",
    "start": "2960079",
    "end": "2963040"
  },
  {
    "text": "and we're going to do the same thing we're going to do debug with managed only",
    "start": "2967839",
    "end": "2973359"
  },
  {
    "text": "and the difference is because it was captured exactly when the problem occurs we're taking straight into the action we",
    "start": "2973359",
    "end": "2979920"
  },
  {
    "text": "don't have to look at the parallel stacks instead we're sort of like brought right into",
    "start": "2979920",
    "end": "2986240"
  },
  {
    "text": "your code if it's lined up or call stack if it's not lined up you can still use the call stack and in this case we can",
    "start": "2986240",
    "end": "2992319"
  },
  {
    "text": "see that the reason why why this process crashed was",
    "start": "2992319",
    "end": "2997520"
  },
  {
    "text": "because of a null reference exception so even though you can't step by step debug",
    "start": "2997520",
    "end": "3003920"
  },
  {
    "text": "you can still sort of like get nice cozy experience that you're used to in",
    "start": "3003920",
    "end": "3009040"
  },
  {
    "text": "in visual studio from from doing step by step debugging so",
    "start": "3009040",
    "end": "3014079"
  },
  {
    "text": "hopefully if you get nothing else from this east opening up memory dumps in visual studio",
    "start": "3014079",
    "end": "3019839"
  },
  {
    "text": "should be fairly comfortable for you",
    "start": "3019839",
    "end": "3024280"
  },
  {
    "text": "so all of this and more and labs and and everything you can want is is on my",
    "start": "3026240",
    "end": "3032559"
  },
  {
    "text": "blog and i'm on twitter if you want to contact me it's tess ferran is there too",
    "start": "3032559",
    "end": "3038880"
  },
  {
    "text": "um but with that i am i don't have any more content but i'm i have a few",
    "start": "3038880",
    "end": "3044720"
  },
  {
    "text": "minutes for questions if you have any yes",
    "start": "3044720",
    "end": "3051800"
  },
  {
    "text": "so the question is is there any distinct advantages of using.net in gc dump for",
    "start": "3061680",
    "end": "3067119"
  },
  {
    "text": "example versus jetbrains and yet brains memory tools and things like",
    "start": "3067119",
    "end": "3074000"
  },
  {
    "text": "that i would say not much it's more what you're comfortable with if you're comfortable with jeff brains",
    "start": "3074000",
    "end": "3079839"
  },
  {
    "text": "then by all means use jetbrains because that's they are very good tools for for these",
    "start": "3079839",
    "end": "3084880"
  },
  {
    "text": "kind of things too yes",
    "start": "3084880",
    "end": "3092359"
  },
  {
    "text": "and so another tool that's mentioned is perfume and based on atw yeah it should it will still work in",
    "start": "3105920",
    "end": "3113119"
  },
  {
    "text": "in.net core i just didn't find necessarily a use for it here that's more sort of like when you",
    "start": "3113119",
    "end": "3119599"
  },
  {
    "text": "when you want to see a couple of events that have happened and you want to trace sort of like",
    "start": "3119599",
    "end": "3124880"
  },
  {
    "text": "maybe time travel debugging or maybe going back sort of like to to what has happened in",
    "start": "3124880",
    "end": "3130559"
  },
  {
    "text": "the past to lead up to the problem so that is certainly also a tool that that is very usable for these kind of things",
    "start": "3130559",
    "end": "3136559"
  },
  {
    "text": "maybe more for for the perf cases than maybe the memory ones but yeah",
    "start": "3136559",
    "end": "3142400"
  },
  {
    "text": "i just didn't have a use case for it here but okay yes",
    "start": "3142400",
    "end": "3149920"
  },
  {
    "text": "sorry i need to listen more because they do these tools work with webassembly um",
    "start": "3151119",
    "end": "3159680"
  },
  {
    "text": "good question um",
    "start": "3159680",
    "end": "3163680"
  },
  {
    "text": "i am not entirely sure but let's talk with steve sanderson and ask because um",
    "start": "3164800",
    "end": "3172160"
  },
  {
    "text": "i think they might but i'm not entirely sure sorry i can answer",
    "start": "3172160",
    "end": "3179480"
  },
  {
    "text": "okay well i'll be here for a while so thank you so much for for uh indulging me and staying with me for",
    "start": "3180720",
    "end": "3187920"
  },
  {
    "text": "this last hour and go out and have have a good party so thank you",
    "start": "3187920",
    "end": "3194680"
  },
  {
    "text": "you",
    "start": "3205119",
    "end": "3207200"
  }
]