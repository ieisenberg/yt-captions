[
  {
    "text": "how's everyone enjoying the first NDC in the States it's pretty good fun I've had",
    "start": "4240",
    "end": "10280"
  },
  {
    "text": "a good time only managed to make a couple of talks I saw the progressive web app by Nick Molnar yesterday a lot",
    "start": "10280",
    "end": "17900"
  },
  {
    "text": "of that code were being made great by typescript also Dave Neal's was an",
    "start": "17900",
    "end": "23180"
  },
  {
    "text": "awesome talk and leadership yeah it's sounds like there's been really good reviews so I'm here to talk",
    "start": "23180",
    "end": "31310"
  },
  {
    "text": "to you about typescript I've done a couple of talks on typescript this one I really want to focus on what's been",
    "start": "31310",
    "end": "38120"
  },
  {
    "text": "going on after typescript who got released so quite a lot of people have",
    "start": "38120",
    "end": "44180"
  },
  {
    "text": "talked to me and said are typescript has these problems typescript is evolving so quickly and the things that I've noticed",
    "start": "44180",
    "end": "51620"
  },
  {
    "text": "over the last couple of years is hopefully they'll come back sorry if it",
    "start": "51620",
    "end": "59870"
  },
  {
    "text": "keeps doing that if you're coming from sort of a JavaScript background going",
    "start": "59870",
    "end": "65689"
  },
  {
    "text": "into typescript was a little bit annoying if you're coming from sort of a dotnet background a lot of the patterns",
    "start": "65689",
    "end": "71869"
  },
  {
    "text": "that you could originally do were fine so a lot of the features that I'm going",
    "start": "71869",
    "end": "77179"
  },
  {
    "text": "to be focusing on to through the second half of the talk are all kind of the features that allow you to be really",
    "start": "77179",
    "end": "83689"
  },
  {
    "text": "expressive with typescript to sort of match the latest patterns that are available my name is Jake Ginn 'van I'm",
    "start": "83689",
    "end": "91909"
  },
  {
    "text": "from Perth in Western Australia so it's a fair way to come it's been pretty good",
    "start": "91909",
    "end": "97280"
  },
  {
    "text": "trip so far I work for a company called seven West media and specifically it is",
    "start": "97280",
    "end": "103969"
  },
  {
    "text": "an umbrella and there's three main companies that are under it West Australian news who I work for channel 7",
    "start": "103969",
    "end": "111079"
  },
  {
    "text": "who is the biggest TV station in Australia and Pacific magazines which promote and write a lot of magazines so",
    "start": "111079",
    "end": "120289"
  },
  {
    "text": "what the West Australian is actually quite an old company we printed our first paper in 1833 so from a Australian",
    "start": "120289",
    "end": "127909"
  },
  {
    "text": "standpoint it's really quite an old company we didn't start out using",
    "start": "127909",
    "end": "135080"
  },
  {
    "text": "typescript our team is actually quite young that two years ago all of our website",
    "start": "135080",
    "end": "140989"
  },
  {
    "text": "was out sourced Yahoo was actually hosting our news site and we decided",
    "start": "140989",
    "end": "147469"
  },
  {
    "text": "that as a company will take control of our digital strategy because at the end",
    "start": "147469",
    "end": "152659"
  },
  {
    "text": "of the day printing the news on dead trees is only going to take us so far so",
    "start": "152659",
    "end": "158719"
  },
  {
    "text": "what our stack looks like is we're using react and server-side rendered putting",
    "start": "158719",
    "end": "164510"
  },
  {
    "text": "it all together with web pack note on the back end so we're JavaScript everywhere we started out with Babel and",
    "start": "164510",
    "end": "170720"
  },
  {
    "text": "es6 and we converted to typescript after we launched the choice to not use",
    "start": "170720",
    "end": "179689"
  },
  {
    "text": "typescript straight away was an interesting one because coming from a dotnet background moving across to",
    "start": "179689",
    "end": "185900"
  },
  {
    "text": "everything's written in JavaScript was pretty interesting for me but at the",
    "start": "185900",
    "end": "192049"
  },
  {
    "text": "time web pack the loaders around it were just pretty immature before typescript",
    "start": "192049",
    "end": "199069"
  },
  {
    "text": "1.8 there's really pretty poor support the nodejs is a module system commonjs",
    "start": "199069",
    "end": "206260"
  },
  {
    "text": "can I just get a bit of an idea who's sort of a JavaScript using NPM node that",
    "start": "206260",
    "end": "212540"
  },
  {
    "text": "side of things what about dotnet cool what I was",
    "start": "212540",
    "end": "217939"
  },
  {
    "text": "guessing so the node community has a package manager similar to new get",
    "start": "217939",
    "end": "224090"
  },
  {
    "text": "called NPM and predominantly in the JavaScript space there's two competing",
    "start": "224090",
    "end": "230000"
  },
  {
    "text": "module systems AMD which things like the",
    "start": "230000",
    "end": "236359"
  },
  {
    "text": "module the package manager Bauer uses and requirejs kind of as a module loader",
    "start": "236359",
    "end": "242780"
  },
  {
    "text": "for that and then you have the node side which tools like browserify and web pack allow you to use the node module system",
    "start": "242780",
    "end": "249620"
  },
  {
    "text": "on your front-end client websites and yet before typescript 1.8 not very good",
    "start": "249620",
    "end": "257030"
  },
  {
    "text": "support so if you're using Bower everything's global we had a pretty good",
    "start": "257030",
    "end": "262070"
  },
  {
    "text": "time if you're trying to use new module systems not so much we wanted to use",
    "start": "262070",
    "end": "267800"
  },
  {
    "text": "because we're react and redux you come we want to take advantage of patterns",
    "start": "267800",
    "end": "273560"
  },
  {
    "text": "like rest and spread any reduces those language features were not available nor",
    "start": "273560",
    "end": "280130"
  },
  {
    "text": "with JSX so those were kind of showstoppers and we launched the website",
    "start": "280130",
    "end": "285979"
  },
  {
    "text": "four months later as a pretty short build and so we were under a pretty big",
    "start": "285979",
    "end": "292039"
  },
  {
    "text": "weight lot of pressure to deliver and we got it out there JavaScript great for",
    "start": "292039",
    "end": "297680"
  },
  {
    "text": "getting stuff done but later on we moved across the typescript for a number of reasons I and also just what I was",
    "start": "297680",
    "end": "307520"
  },
  {
    "text": "talking about if you're coming from a dotnet background easier but if you're coming from the JavaScript land there's",
    "start": "307520",
    "end": "313490"
  },
  {
    "text": "a lot of idioms and sort of patterns that the JavaScript community use which you just couldn't express in typescript",
    "start": "313490",
    "end": "320750"
  },
  {
    "text": "because the type system was not powerful enough it's pretty interesting when we",
    "start": "320750",
    "end": "326810"
  },
  {
    "text": "dive into sort of what types brings the typescript brings to the table",
    "start": "326810",
    "end": "331910"
  },
  {
    "text": "a couple of things I want to cover what it is I'll go into that a little bit deep of detail and why it will actually",
    "start": "331910",
    "end": "338599"
  },
  {
    "text": "help you also introduction what it is who here is to",
    "start": "338599",
    "end": "343699"
  },
  {
    "text": "use typescript quite a few awesome we'll go through that bit quickly then but those that haven't the important and",
    "start": "343699",
    "end": "351320"
  },
  {
    "text": "then finally get into the features which is probably what you're all interested in so what is typescript it's a superset",
    "start": "351320",
    "end": "358520"
  },
  {
    "text": "of JavaScript that adds a static type system on top of JavaScript so",
    "start": "358520",
    "end": "364400"
  },
  {
    "text": "javascript is a pretty loose language you can it's object orientated so functions or objects but there's only",
    "start": "364400",
    "end": "370610"
  },
  {
    "text": "really a couple of primitives you've got numbers strings objects and not much",
    "start": "370610",
    "end": "376310"
  },
  {
    "text": "else what typescript does is allows you to add an entire layer on top of JavaScript",
    "start": "376310",
    "end": "383770"
  },
  {
    "text": "giving information about the shape of these objects what you can do with them",
    "start": "383770",
    "end": "389330"
  },
  {
    "text": "if they're null all of these sort of things that that you want to express so",
    "start": "389330",
    "end": "395270"
  },
  {
    "text": "if using say react there's all of these helpers so you can define prop types but they're all runtime errors what we want",
    "start": "395270",
    "end": "403849"
  },
  {
    "text": "to do is move all all of those errors to compile time so we can so we can actually make our lives",
    "start": "403849",
    "end": "411259"
  },
  {
    "text": "a lot easier the interesting thing about typescript is unlike other languages",
    "start": "411259",
    "end": "416660"
  },
  {
    "text": "they dissipate a conscious decision that they would support JavaScript as a base",
    "start": "416660",
    "end": "422270"
  },
  {
    "text": "level so you can start out with JavaScript and that's valid typescript and then you can just slowly add more",
    "start": "422270",
    "end": "428630"
  },
  {
    "text": "type information over time to sort of get the benefits of it the other interesting thing that trips a",
    "start": "428630",
    "end": "435680"
  },
  {
    "text": "lot of people up when you first start is typescript essentially removes itself when it compiles so in dotnet space we",
    "start": "435680",
    "end": "444080"
  },
  {
    "text": "used to run time type checking and being able to interpolate interrogate types at",
    "start": "444080",
    "end": "450380"
  },
  {
    "text": "runtime we can't do that in typescript we can only write JavaScript that gets",
    "start": "450380",
    "end": "456770"
  },
  {
    "text": "checked at compilation stage so having having to separate that in your mind can",
    "start": "456770",
    "end": "463039"
  },
  {
    "text": "be a little bit difficult to start with so for me there's a number of reasons you want to get started with typescript",
    "start": "463039",
    "end": "469300"
  },
  {
    "text": "there was a a conference a while ago called next Lane in 2012 I think it was",
    "start": "469300",
    "end": "475010"
  },
  {
    "text": "and that a panel of people who are experts in languages so those area",
    "start": "475010",
    "end": "480979"
  },
  {
    "text": "Kamiya hat and as Helzberg and a couple of others and and as in my Eric we're",
    "start": "480979",
    "end": "487880"
  },
  {
    "text": "talking and Eric asked him so you saying that you can't actually write large",
    "start": "487880",
    "end": "493580"
  },
  {
    "text": "programs in JavaScript and andis response no can write large programs in",
    "start": "493580",
    "end": "499190"
  },
  {
    "text": "JavaScript you just can't maintain them and so Anders has a lot of language",
    "start": "499190",
    "end": "504830"
  },
  {
    "text": "experience he's the guy behind c-sharp Delfy and typescript so his experience",
    "start": "504830",
    "end": "513919"
  },
  {
    "text": "around this was there's a team at Microsoft that built the editor behind BS code it's called Monaco when they got",
    "start": "513919",
    "end": "522080"
  },
  {
    "text": "to sort of around two hundred thousand lines of code they were just really struggling to continue adding features",
    "start": "522080",
    "end": "528950"
  },
  {
    "text": "they're only spending about five percent of their time writing new features the rest of it was just reading code and",
    "start": "528950",
    "end": "536630"
  },
  {
    "text": "fixing it which they're not often introduced new issues so they just found they were",
    "start": "536630",
    "end": "542140"
  },
  {
    "text": "slowing down over time so they adopted typescript gradually to help them",
    "start": "542140",
    "end": "547570"
  },
  {
    "text": "actually start moving at pace again and spend more of their time implementing features if you're interested that",
    "start": "547570",
    "end": "555600"
  },
  {
    "text": "panel's quite interesting there's a guy that does talks a lot about data based",
    "start": "555600",
    "end": "560890"
  },
  {
    "text": "languages and a few others but there was a couple of problems that type scripts",
    "start": "560890",
    "end": "566020"
  },
  {
    "text": "trying to solve first one is down level compilation so you are writing in ES",
    "start": "566020",
    "end": "571630"
  },
  {
    "text": "twenty sixteen seventeen eighteen nineteen all these new language features but we're going to have to support I",
    "start": "571630",
    "end": "577900"
  },
  {
    "text": "eleven for ages and that'll only run es5 so the first job is bridging that gap",
    "start": "577900",
    "end": "585250"
  },
  {
    "text": "allowing us to write new language features that compile down second one is type checking remove all of those",
    "start": "585250",
    "end": "592120"
  },
  {
    "text": "runtime errors move them all to compilation failures and then improve it",
    "start": "592120",
    "end": "597940"
  },
  {
    "text": "development speed by types mean the development tools have a lot more",
    "start": "597940",
    "end": "603520"
  },
  {
    "text": "context so they can help you out give you a lot of useful features so they're",
    "start": "603520",
    "end": "609220"
  },
  {
    "text": "kind of the main problems that typescript was trying to solve the first one I'll just touch on a little bit a",
    "start": "609220",
    "end": "615610"
  },
  {
    "text": "little bit small better you've got the different versions of JavaScript that's this current state of the web we have",
    "start": "615610",
    "end": "622480"
  },
  {
    "text": "the state of server JavaScript depending on what version of node and then that's what we want to use so our gap that it's",
    "start": "622480",
    "end": "631000"
  },
  {
    "text": "bridging is between one of those the more interesting one is the next two so",
    "start": "631000",
    "end": "637240"
  },
  {
    "text": "I'm going to give you a little bit of a run-through of what typescript gives you there we go there we go so working for a",
    "start": "637240",
    "end": "647500"
  },
  {
    "text": "newspaper whoa as they Fr we can fix that doesn't like",
    "start": "647500",
    "end": "659370"
  },
  {
    "text": "virtual desktops clearly it'll come back",
    "start": "659370",
    "end": "670100"
  },
  {
    "text": "okay cool good can everyone read that up the back",
    "start": "670100",
    "end": "676670"
  },
  {
    "text": "suite okay so working for a newspaper we write articles we've got a type that is",
    "start": "676670",
    "end": "685199"
  },
  {
    "text": "something like this it's got a heading and a bunch of other things and then we've got the individual content blocks",
    "start": "685199",
    "end": "691649"
  },
  {
    "text": "that can have different types so we have a stand first which is kind of the first important paragraph some text a",
    "start": "691649",
    "end": "699209"
  },
  {
    "text": "blockquote and also some text with some formatting in it",
    "start": "699209",
    "end": "704279"
  },
  {
    "text": "so quickly going to just write some types around this so the way we describe",
    "start": "704279",
    "end": "709649"
  },
  {
    "text": "shapes in typescript is with interfaces so I have an interface and call it an article I can",
    "start": "709649",
    "end": "717720"
  },
  {
    "text": "then define what the keys are on that so I've got heading and it's a type string",
    "start": "717720",
    "end": "722730"
  },
  {
    "text": "so we're telling typescript what values are valid for that particular key I can",
    "start": "722730",
    "end": "731370"
  },
  {
    "text": "then say contents and I'm going to say it is a well it's all of the values have",
    "start": "731370",
    "end": "740310"
  },
  {
    "text": "to be locks so this is where the intellisense and the tooling comes in",
    "start": "740310",
    "end": "745410"
  },
  {
    "text": "I've got a type that exists in another module typescript knows about all the types in my project so I can actually",
    "start": "745410",
    "end": "752730"
  },
  {
    "text": "just import this from that module and typescript will add the reference being",
    "start": "752730",
    "end": "759540"
  },
  {
    "text": "from net this seems pretty trivial but it is a lifesaver when you've got a",
    "start": "759540",
    "end": "765120"
  },
  {
    "text": "really big project and you're actually working around JavaScript",
    "start": "765120",
    "end": "770790"
  },
  {
    "text": "so that is our basic interface one",
    "start": "770790",
    "end": "776700"
  },
  {
    "text": "another thing about major difference between say c-sharp and typescript typescript is what's called as a",
    "start": "776700",
    "end": "782790"
  },
  {
    "text": "structurally typed language and what that means is if I have another",
    "start": "782790",
    "end": "787950"
  },
  {
    "text": "interface called article 2 that looks exactly the same I can actually assign",
    "start": "787950",
    "end": "793740"
  },
  {
    "text": "those variables to each other so as long as when you're doing variable like",
    "start": "793740",
    "end": "799820"
  },
  {
    "text": "assignment as long as what you're assigning has everything and meets that",
    "start": "799820",
    "end": "805050"
  },
  {
    "text": "contract it can be assigned so that's also known as duck typing but type",
    "start": "805050",
    "end": "811590"
  },
  {
    "text": "scripts are structurally typed language we're using react I wouldn't worry so",
    "start": "811590",
    "end": "818700"
  },
  {
    "text": "much not going into react but we just have a simple function here that takes a",
    "start": "818700",
    "end": "824460"
  },
  {
    "text": "number of properties and then returns some markup so this is a similar pattern",
    "start": "824460",
    "end": "829620"
  },
  {
    "text": "in view angular kind of not really but we can now continue so it's a function I",
    "start": "829620",
    "end": "837660"
  },
  {
    "text": "want to type this function first thing I want to do is declare an interface which",
    "start": "837660",
    "end": "845520"
  },
  {
    "text": "is the props like that first argument of the function so it's just article component props it has one property on",
    "start": "845520",
    "end": "854730"
  },
  {
    "text": "it which is article and it is of type particle",
    "start": "854730",
    "end": "860000"
  },
  {
    "text": "I can then start typing my function by saying this is an article component",
    "start": "861059",
    "end": "868019"
  },
  {
    "text": "props pretty easy it's picked up an error which is I don't have a property",
    "start": "868019",
    "end": "874949"
  },
  {
    "text": "called content and that's because it's actually contents its guessed that that's probably what I mean quick fixes",
    "start": "874949",
    "end": "881189"
  },
  {
    "text": "this is the tooling thing coming in pretty handy but this is not as far as",
    "start": "881189",
    "end": "890609"
  },
  {
    "text": "we want to take it so there's a feature that is going to be built on in the rest",
    "start": "890609",
    "end": "895949"
  },
  {
    "text": "of this talk called generics who's familiar with what generics are and how they work cool got a bit of it",
    "start": "895949",
    "end": "902309"
  },
  {
    "text": "understanding so I'm going to make this a generic type typescript allows you to",
    "start": "902309",
    "end": "908189"
  },
  {
    "text": "define not only interfaces but type aliases so I'm going to call this a",
    "start": "908189",
    "end": "914119"
  },
  {
    "text": "render function and the render function has some props and it returns a JSX",
    "start": "914119",
    "end": "921209"
  },
  {
    "text": "element and now I want to type props but",
    "start": "921209",
    "end": "926309"
  },
  {
    "text": "I want this render function to work with any component so I can introduce a generic type here and all the generic",
    "start": "926309",
    "end": "933389"
  },
  {
    "text": "type is is an argument to that type same as functions have different parameters",
    "start": "933389",
    "end": "939739"
  },
  {
    "text": "generic types are arguments for a type so I can now reference that type",
    "start": "939739",
    "end": "947689"
  },
  {
    "text": "anywhere in my type definition you could also do the same thing with interfaces",
    "start": "947689",
    "end": "953339"
  },
  {
    "text": "you could make that generic and then I could say options is a T sort of thing",
    "start": "953339",
    "end": "962299"
  },
  {
    "text": "does that make sense to everyone got what generics are it's gonna be built on",
    "start": "962310",
    "end": "967420"
  },
  {
    "text": "the lot so if anyone's got any questions just throw your hand up we'll answer them as we go so now I can make this a",
    "start": "967420",
    "end": "975149"
  },
  {
    "text": "render of article component props and I",
    "start": "975149",
    "end": "982180"
  },
  {
    "text": "can get rid of my type definition there and they're really the basic building",
    "start": "982180",
    "end": "988990"
  },
  {
    "text": "blocks of typescript we've kind of saying that we've got a number of primitives we can define types pretty",
    "start": "988990",
    "end": "995860"
  },
  {
    "text": "easily and it just I didn't have to rewrite my coat I just added extra",
    "start": "995860",
    "end": "1001290"
  },
  {
    "text": "syntax so that's kind of the goal any questions around that yes",
    "start": "1001290",
    "end": "1008329"
  },
  {
    "text": "yeah so for those that don't know what JSX is JSX allows us to write basically",
    "start": "1011720",
    "end": "1020940"
  },
  {
    "text": "HTML inside our JavaScript and what happens behind the scenes is the",
    "start": "1020940",
    "end": "1026790"
  },
  {
    "text": "compiler just turns it into a function call so if you're using react it'll turn it into a react got create element of",
    "start": "1026790",
    "end": "1035428"
  },
  {
    "text": "type div if you're using view or another thing it might change it into an H",
    "start": "1035429",
    "end": "1042569"
  },
  {
    "text": "function but that's all JSX is so when I use JSX the those function",
    "start": "1042569",
    "end": "1051179"
  },
  {
    "text": "calls return a type which is JSX element so Jess X is a namespace in typescript",
    "start": "1051179",
    "end": "1057840"
  },
  {
    "text": "and element is an interface inside that namespace and answer the question ah no",
    "start": "1057840",
    "end": "1069720"
  },
  {
    "text": "it's oh it isn't yes so the question is what is the type here it is article",
    "start": "1069720",
    "end": "1076500"
  },
  {
    "text": "component is a variable that is a function so this is our assignment",
    "start": "1076500",
    "end": "1083910"
  },
  {
    "text": "operator and this is our function the JavaScript and the type is render which",
    "start": "1083910",
    "end": "1089010"
  },
  {
    "text": "is a function that returns Jersey it is a function exactly and the way we",
    "start": "1089010",
    "end": "1095269"
  },
  {
    "text": "declare a function is the lambda arrow function syntax so not using the",
    "start": "1095269",
    "end": "1100850"
  },
  {
    "text": "function keyword but I could write this as make it a little bit clearer so I'm",
    "start": "1100850",
    "end": "1111379"
  },
  {
    "text": "assigning a function to that particular variable make sense so if I hover over",
    "start": "1111379",
    "end": "1122269"
  },
  {
    "text": "here it will tell me that that is a function so render of article component",
    "start": "1122269",
    "end": "1129620"
  },
  {
    "text": "props is an alias of Sun like the actual function so you can compose types",
    "start": "1129620",
    "end": "1136309"
  },
  {
    "text": "together and simplify them by using type aliases make sense awesome",
    "start": "1136309",
    "end": "1143629"
  },
  {
    "text": "any other questions cool jump on so intro to typescript gone over",
    "start": "1143629",
    "end": "1151159"
  },
  {
    "text": "a few of the basics I really want to get into modern typescript and kind of what",
    "start": "1151159",
    "end": "1157129"
  },
  {
    "text": "what's come after 2.0 because the language just keeps going from strength to strength even when we started with",
    "start": "1157129",
    "end": "1165379"
  },
  {
    "text": "around typescript 1.9 we had a few things that we had to make extra",
    "start": "1165379",
    "end": "1172490"
  },
  {
    "text": "complicated there's a language wouldn't allow us to express what we wanted so",
    "start": "1172490",
    "end": "1178360"
  },
  {
    "text": "the first amazing feature that came with typescript 2.0 this was kind of the",
    "start": "1178360",
    "end": "1185360"
  },
  {
    "text": "game-changer that has allowed every other new feature to come out and it's something called control flow analysis",
    "start": "1185360",
    "end": "1191980"
  },
  {
    "text": "so what control flow analysis allows us to do is we have a function a type alias",
    "start": "1191980",
    "end": "1198500"
  },
  {
    "text": "called get log message which is a function that returns a string right",
    "start": "1198500",
    "end": "1203629"
  },
  {
    "text": "it's a get log message function returns a string we're then declaring a log function so this is allows us to write",
    "start": "1203629",
    "end": "1211610"
  },
  {
    "text": "to the console and it takes something called a Union type it's got one parameter called message and it has a",
    "start": "1211610",
    "end": "1218389"
  },
  {
    "text": "Union type which is string or give their get log message function so",
    "start": "1218389",
    "end": "1224360"
  },
  {
    "text": "can be either of those this is pretty common in in JavaScript you can pass",
    "start": "1224360",
    "end": "1232130"
  },
  {
    "text": "like a string or an object's options object or something like that we can",
    "start": "1232130",
    "end": "1238250"
  },
  {
    "text": "then check right JavaScript to check the runtime type of that type so if typeof",
    "start": "1238250",
    "end": "1245000"
  },
  {
    "text": "message is a function we know it's a function inside that block I can call",
    "start": "1245000",
    "end": "1250010"
  },
  {
    "text": "the function and pass that to console.log what is the type of the",
    "start": "1250010",
    "end": "1255830"
  },
  {
    "text": "message variable on this line anyone",
    "start": "1255830",
    "end": "1261370"
  },
  {
    "text": "sorry string it is at runtime so before",
    "start": "1261430",
    "end": "1267350"
  },
  {
    "text": "this is where control flow analysis is really cool before typescript 2.0",
    "start": "1267350",
    "end": "1273130"
  },
  {
    "text": "typescript would think the type is string or get log message we know it's",
    "start": "1273130",
    "end": "1278270"
  },
  {
    "text": "not because the function returned inside the if block there's no way I can get to that line and it's still a function but",
    "start": "1278270",
    "end": "1287360"
  },
  {
    "text": "typescript type guides which is what we've got in there checking if it's a function they only worked within the",
    "start": "1287360",
    "end": "1296270"
  },
  {
    "text": "block I could fix this by adding an else keyword and putting that in in the else",
    "start": "1296270",
    "end": "1301640"
  },
  {
    "text": "block but that's really not idiomatic JavaScript so after it as soon as we",
    "start": "1301640",
    "end": "1308660"
  },
  {
    "text": "return typescript we'll remove the Union with that function type from narrows the type",
    "start": "1308660",
    "end": "1316430"
  },
  {
    "text": "down so it's only a string for the rest of that function it's kind of an important building block does that make",
    "start": "1316430",
    "end": "1323240"
  },
  {
    "text": "sense to everyone excellent so that allows you to write code that just works it's amazing how",
    "start": "1323240",
    "end": "1331430"
  },
  {
    "text": "much more intuitive this makes life because you don't have to keep fighting the type system the next feature I want",
    "start": "1331430",
    "end": "1343580"
  },
  {
    "text": "to talk about is kind of inspired from this quote software developer Tony Hoare had in",
    "start": "1343580",
    "end": "1353190"
  },
  {
    "text": "1965 invented the null reference because it was easy to do he calls it it's billion dollar mistake",
    "start": "1353190",
    "end": "1359340"
  },
  {
    "text": "and it's led to heap of crashes bugs and just issues over the years and he",
    "start": "1359340",
    "end": "1364679"
  },
  {
    "text": "reckons it's caused about a billion dollars worth of damage in JavaScript you could say we have a two billion",
    "start": "1364679",
    "end": "1370739"
  },
  {
    "text": "dollar mistake because they introduced both null and undefined for some reason and this is probably the most common",
    "start": "1370739",
    "end": "1377369"
  },
  {
    "text": "error which quite usefully there was a tweet by Samil hey hey this guy sort of",
    "start": "1377369",
    "end": "1387299"
  },
  {
    "text": "introduced glamour and kind of started the CSS in j/s movement but he tweeted",
    "start": "1387299",
    "end": "1392729"
  },
  {
    "text": "out what are the most common sorts of bugs and then quoted it saying you'll",
    "start": "1392729",
    "end": "1398129"
  },
  {
    "text": "need a type system but the biggest 710 votes about 50% of them undefined",
    "start": "1398129",
    "end": "1404879"
  },
  {
    "text": "I was only tweeted yesterday or something so quite timely ah this is the",
    "start": "1404879",
    "end": "1411629"
  },
  {
    "text": "most frustrating error because at some point a variable has become undefined or",
    "start": "1411629",
    "end": "1416729"
  },
  {
    "text": "it's not defined and your program just crashes this is a great gift so over the",
    "start": "1416729",
    "end": "1423929"
  },
  {
    "text": "top so what they've done is introduced a feature called strict null checks to fix",
    "start": "1423929",
    "end": "1430169"
  },
  {
    "text": "this problem it is amazing if there's any reason for you to switch and start",
    "start": "1430169",
    "end": "1435629"
  },
  {
    "text": "using typescript it's this so in typescript one all types could be",
    "start": "1435629",
    "end": "1443639"
  },
  {
    "text": "undefined so I've got I'm declaring a variable X and its type is number in",
    "start": "1443639",
    "end": "1449609"
  },
  {
    "text": "typescript one I could have assigned undefined to a number all types are",
    "start": "1449609",
    "end": "1455599"
  },
  {
    "text": "undefined and whatever type that is 2.0",
    "start": "1455599",
    "end": "1461070"
  },
  {
    "text": "they introduced this strict null check flag so it's a flag config variable that",
    "start": "1461070",
    "end": "1466529"
  },
  {
    "text": "you turn on in the compiler what that does is it removes undefined from all",
    "start": "1466529",
    "end": "1472289"
  },
  {
    "text": "types so they're just the type they introduced a new feature as well called",
    "start": "1472289",
    "end": "1478470"
  },
  {
    "text": "unary types so unary type is a type that can only have one value so the typeof",
    "start": "1478470",
    "end": "1486960"
  },
  {
    "text": "null can only have the value null same",
    "start": "1486960",
    "end": "1492029"
  },
  {
    "text": "with undefined there's a few other unary types that you can now introduce pretty useful we'll go into that a bit later",
    "start": "1492029",
    "end": "1497609"
  },
  {
    "text": "ah so now if I try and declare or assign undefined to number or that variable",
    "start": "1497609",
    "end": "1505230"
  },
  {
    "text": "doesn't have a assignment within the scope but compiler can't see that it",
    "start": "1505230",
    "end": "1510869"
  },
  {
    "text": "could be undefined you'll get an error so now if we want to do it we can use",
    "start": "1510869",
    "end": "1516330"
  },
  {
    "text": "Union types and say X is now a number or undefined and that's how we can introduce nulls and undefined back into",
    "start": "1516330",
    "end": "1523739"
  },
  {
    "text": "our code but we're in control of what can be similar idea to optionals or",
    "start": "1523739",
    "end": "1529919"
  },
  {
    "text": "nullable types in dotnet but it works for interfaces as well so how does that",
    "start": "1529919",
    "end": "1536460"
  },
  {
    "text": "work well using that and control for our analysis we have an logger here with an",
    "start": "1536460",
    "end": "1541980"
  },
  {
    "text": "options object the question mark there makes it an optional prop function",
    "start": "1541980",
    "end": "1547909"
  },
  {
    "text": "parameter rather and it is a type an object with one key pretty with which is",
    "start": "1547909",
    "end": "1556200"
  },
  {
    "text": "optional and that's a type bool so because it's optional it's or undefined",
    "start": "1556200",
    "end": "1561919"
  },
  {
    "text": "but something ah this is where like",
    "start": "1561919",
    "end": "1567989"
  },
  {
    "text": "really weird JavaScript idioms that and short so the syntax around not options and the second",
    "start": "1567989",
    "end": "1577169"
  },
  {
    "text": "statement will only evaluate if the first one is true and for some reason",
    "start": "1577169",
    "end": "1583139"
  },
  {
    "text": "JavaScript developers love doing stuff like this because it's completely unreadable and but anyway before it",
    "start": "1583139",
    "end": "1592499"
  },
  {
    "text": "wouldn't matter if we did this typescript would still go ah options is under possibly undefined so here you",
    "start": "1592499",
    "end": "1601559"
  },
  {
    "text": "wouldn't know if pretty like if you could access pretty safely but now",
    "start": "1601559",
    "end": "1607100"
  },
  {
    "text": "with it turned on by comment out line to typescript will give me a error saying",
    "start": "1607100",
    "end": "1613090"
  },
  {
    "text": "options might be undefined and won't compile comment that uncomment it it",
    "start": "1613090",
    "end": "1619340"
  },
  {
    "text": "knows that I cannot get to line 3 without options being defined and then",
    "start": "1619340",
    "end": "1625669"
  },
  {
    "text": "did the same thing but put the pretty value and I am him safe to go is pretty",
    "start": "1625669",
    "end": "1632360"
  },
  {
    "text": "is a boolean which options stop pretty at that point it's now an object with a",
    "start": "1632360",
    "end": "1640159"
  },
  {
    "text": "key that is a boolean because Titan narrowing has removed the optionality",
    "start": "1640159",
    "end": "1646460"
  },
  {
    "text": "and the undefined from the parameter so really really handy after doing this I",
    "start": "1646460",
    "end": "1655100"
  },
  {
    "text": "can refactor a bunch of stuff and it just works one of the things though",
    "start": "1655100",
    "end": "1660769"
  },
  {
    "text": "you've got to be really careful about is never lying to the typescript type system so if you say a variable cannot",
    "start": "1660769",
    "end": "1669320"
  },
  {
    "text": "be undefined you better make sure that your code doesn't accidentally make it",
    "start": "1669320",
    "end": "1674360"
  },
  {
    "text": "undefined the compiler can only do like it can only work with the information",
    "start": "1674360",
    "end": "1679850"
  },
  {
    "text": "you give it so let's say you make an API call and the type says something is",
    "start": "1679850",
    "end": "1685879"
  },
  {
    "text": "going to be not undefined like it's a required value but the API returns",
    "start": "1685879",
    "end": "1692600"
  },
  {
    "text": "that's missing you're now lying to the type system because you haven't validated the runtime object matches",
    "start": "1692600",
    "end": "1700309"
  },
  {
    "text": "what the type definition is so anytime you're getting external data into your program make sure that it matches the",
    "start": "1700309",
    "end": "1709009"
  },
  {
    "text": "runtime like the runtime will match the compilation time really big one next",
    "start": "1709009",
    "end": "1717500"
  },
  {
    "text": "really cool feature anyone have any questions so far cool",
    "start": "1717500",
    "end": "1723429"
  },
  {
    "text": "next feature which is really handy is tagged unions so we saw the Union types",
    "start": "1724970",
    "end": "1730440"
  },
  {
    "text": "before what allows us to do this or this tagged unions allow us to take that a",
    "start": "1730440",
    "end": "1735600"
  },
  {
    "text": "little bit further and write even cleaner code so I've got a bunch of types for my blocks I've got the text",
    "start": "1735600",
    "end": "1742380"
  },
  {
    "text": "block stand first block and block quote each of them get a kind property added",
    "start": "1742380",
    "end": "1750690"
  },
  {
    "text": "to it with the unary type of text which is a string literal so the value of kind",
    "start": "1750690",
    "end": "1757920"
  },
  {
    "text": "for that interface can only be text this string text before we could do string",
    "start": "1757920",
    "end": "1764820"
  },
  {
    "text": "literals I would have to say that's a string and it could accept any string",
    "start": "1764820",
    "end": "1769970"
  },
  {
    "text": "this is important because I can now do a union type as we saw before so I've got",
    "start": "1769970",
    "end": "1776280"
  },
  {
    "text": "my blocks and it's one of those three you can also get at the type which is a",
    "start": "1776280",
    "end": "1783240"
  },
  {
    "text": "property on that type by using the array index ax so I can actually grab that the",
    "start": "1783240",
    "end": "1789510"
  },
  {
    "text": "three values and you can see the value down the bottom and assign that to the",
    "start": "1789510",
    "end": "1795059"
  },
  {
    "text": "type block types does that make sense so the type lock types is equal to all of",
    "start": "1795059",
    "end": "1802770"
  },
  {
    "text": "the possible values of kind from that Union type makes sense it's quite a few",
    "start": "1802770",
    "end": "1812550"
  },
  {
    "text": "steps but what it allows us to do and once we see this hopefully to make a",
    "start": "1812550",
    "end": "1817980"
  },
  {
    "text": "little bit more sense I can switch on block kind so I've got a blocks variable",
    "start": "1817980",
    "end": "1824130"
  },
  {
    "text": "that's come in I can just switch on block kind the compiler knows that I can",
    "start": "1824130",
    "end": "1829320"
  },
  {
    "text": "only have three potential values text then inside that case statement I get",
    "start": "1829320",
    "end": "1837030"
  },
  {
    "text": "full type safety this is what tag unions are doing so because typescript knows",
    "start": "1837030",
    "end": "1842520"
  },
  {
    "text": "that block kind is equal to text and",
    "start": "1842520",
    "end": "1847870"
  },
  {
    "text": "those were one of the three union types it can type narrow it - that is a text",
    "start": "1847870",
    "end": "1853810"
  },
  {
    "text": "block because the other - that kind property has a different value so that",
    "start": "1853810",
    "end": "1860560"
  },
  {
    "text": "makes sense so block kind equals text typescript knows that so inside that",
    "start": "1860560",
    "end": "1867220"
  },
  {
    "text": "block it narrows it down so I get full type safety around formatting inside the",
    "start": "1867220",
    "end": "1874210"
  },
  {
    "text": "block quote quote and sight are also available through until he cents but for",
    "start": "1874210",
    "end": "1880810"
  },
  {
    "text": "instance inside the block quote block here if I tried to access dot text or",
    "start": "1880810",
    "end": "1887020"
  },
  {
    "text": "formatting I did a compilation error because it knows the type make sure that",
    "start": "1887020",
    "end": "1892360"
  },
  {
    "text": "we can't access things that aren't there so it makes sense yeah I'm not so I was",
    "start": "1892360",
    "end": "1907990"
  },
  {
    "text": "just showing yeah so good question on line 17 I defined a very they type alias",
    "start": "1907990",
    "end": "1913690"
  },
  {
    "text": "called block types and I'm not using that anywhere that's correct I just put that in to sort of show that",
    "start": "1913690",
    "end": "1921580"
  },
  {
    "text": "we can access the three different kinds of blocks just kind of totally yeah",
    "start": "1921580",
    "end": "1939810"
  },
  {
    "text": "exactly yeah it's just an extra bit of context",
    "start": "1939810",
    "end": "1946690"
  },
  {
    "text": "finally you can do exhaustive checks so typescript has another special type",
    "start": "1946690",
    "end": "1952570"
  },
  {
    "text": "called never write and never as soon as the compiler sees that it can get an",
    "start": "1952570",
    "end": "1959710"
  },
  {
    "text": "ever type in execution it won't compile so what this is doing is it's returning",
    "start": "1959710",
    "end": "1967090"
  },
  {
    "text": "never and that means this method will never return because it throws",
    "start": "1967090",
    "end": "1972960"
  },
  {
    "text": "so if I add another block type and I'm missing the case statement typescript",
    "start": "1972960",
    "end": "1978600"
  },
  {
    "text": "will be able to get to that default case because it's been added so then it'll fail to compile saying they added",
    "start": "1978600",
    "end": "1986190"
  },
  {
    "text": "something like a a video player or an",
    "start": "1986190",
    "end": "1991530"
  },
  {
    "text": "image or something like that as soon as I added that I would have an error",
    "start": "1991530",
    "end": "1996600"
  },
  {
    "text": "saying image can't be assigned to never or something similar to that really",
    "start": "1996600",
    "end": "2002150"
  },
  {
    "text": "handy I said earlier that typescript is",
    "start": "2002150",
    "end": "2007280"
  },
  {
    "text": "a structurally typed language this is kind of the closest thing that gives us nominal types it's not quite and nominal",
    "start": "2007280",
    "end": "2015320"
  },
  {
    "text": "types are the ones that even if all the properties match they can't be tied like",
    "start": "2015320",
    "end": "2020360"
  },
  {
    "text": "assigned to each other because say you've got a flight and a car trip and",
    "start": "2020360",
    "end": "2025970"
  },
  {
    "text": "they've got the same properties on it a flight isn't a car trip in dotnet you",
    "start": "2025970",
    "end": "2031610"
  },
  {
    "text": "can't assign them in typescript you can but this just means when you have lists",
    "start": "2031610",
    "end": "2038030"
  },
  {
    "text": "of different things like these block types way way nicer any follow-up",
    "start": "2038030",
    "end": "2046010"
  },
  {
    "text": "questions from that cool next one is",
    "start": "2046010",
    "end": "2051909"
  },
  {
    "text": "indexed and map types so these came a lot later like 2.4 2.5 really handy type",
    "start": "2051910",
    "end": "2061120"
  },
  {
    "text": "so the scenario I'm going to use is feature toggling and this is something",
    "start": "2061120",
    "end": "2066350"
  },
  {
    "text": "we have in fact we actually use launch Darkly as our feature toggling service",
    "start": "2066350",
    "end": "2071840"
  },
  {
    "text": "so I can define a feature has two properties on it enabled and can the",
    "start": "2071840",
    "end": "2077300"
  },
  {
    "text": "user toggle it because I've got a you can go to a toggle page and users can actually turn on experimental features",
    "start": "2077300",
    "end": "2084139"
  },
  {
    "text": "when we want to allow them to do that what indexed features allow us to do is",
    "start": "2084140",
    "end": "2091220"
  },
  {
    "text": "say I don't care what the keys are on that object but all values on any key",
    "start": "2091220",
    "end": "2098900"
  },
  {
    "text": "must be the same so feature name is a string so the key is a string",
    "start": "2098900",
    "end": "2105859"
  },
  {
    "text": "but the value must be a feature what does that actually look like I can",
    "start": "2105859",
    "end": "2110960"
  },
  {
    "text": "define my features as an object which have two keys autoplay video name of the",
    "start": "2110960",
    "end": "2117499"
  },
  {
    "text": "feature or new article page once again name of the feature so the first one is",
    "start": "2117499",
    "end": "2123140"
  },
  {
    "text": "just a feature toggle I don't want to expose that to the user so can use a",
    "start": "2123140",
    "end": "2128329"
  },
  {
    "text": "toggle as false but it's turned on love when players do that's super annoying",
    "start": "2128329",
    "end": "2135519"
  },
  {
    "text": "but I also want to expose our new article page to users so if they go to",
    "start": "2135519",
    "end": "2140839"
  },
  {
    "text": "like slash features they can switch that on but I don't want it turned on by default we're just starting to play with",
    "start": "2140839",
    "end": "2147470"
  },
  {
    "text": "it so I can add any key but the value must conform to my interface this is map",
    "start": "2147470",
    "end": "2154789"
  },
  {
    "text": "types index type sorry an extension to",
    "start": "2154789",
    "end": "2160069"
  },
  {
    "text": "mapped index types is mapped types so",
    "start": "2160069",
    "end": "2165140"
  },
  {
    "text": "here I've got a Union which is autoplay video or article new article page these",
    "start": "2165140",
    "end": "2171289"
  },
  {
    "text": "are my two features instead of making",
    "start": "2171289",
    "end": "2176869"
  },
  {
    "text": "the key type string I can say all the keys in the features Union are the keys",
    "start": "2176869",
    "end": "2186009"
  },
  {
    "text": "with the value of feature what does that actually look like well so if you look",
    "start": "2186009",
    "end": "2194599"
  },
  {
    "text": "down here the type feature state is actually the same as what we had before except I'm enforcing it so if I add",
    "start": "2194599",
    "end": "2202400"
  },
  {
    "text": "another feature to my features Union this line will fail to the pile saying",
    "start": "2202400",
    "end": "2208489"
  },
  {
    "text": "you need to define key whatever that feature is you can also get the keys of",
    "start": "2208489",
    "end": "2216769"
  },
  {
    "text": "any type using the key of function so I can go feature in key of feature state",
    "start": "2216769",
    "end": "2223279"
  },
  {
    "text": "and then put that in feature description so this allows you to you've got an",
    "start": "2223279",
    "end": "2228680"
  },
  {
    "text": "object with a bunch of keys and you want to transform the type of all of the",
    "start": "2228680",
    "end": "2234319"
  },
  {
    "text": "values you can do that with map types while these are sometimes a little bit",
    "start": "2234319",
    "end": "2240359"
  },
  {
    "text": "complicated these features you've got to remember where type script is coming from and what it's trying to do so the",
    "start": "2240359",
    "end": "2247680"
  },
  {
    "text": "goal of typescript is to allow us to type the JavaScript ecosystem one of the things that we need then is if we pull",
    "start": "2247680",
    "end": "2255900"
  },
  {
    "text": "down low - or react or any module on NPM it's just JavaScript it's missing all of",
    "start": "2255900",
    "end": "2263339"
  },
  {
    "text": "these types and there is a huge ecosystem out there with all of these",
    "start": "2263339",
    "end": "2268349"
  },
  {
    "text": "different libraries that have different patterns different api's all these complex and different ways of doing",
    "start": "2268349",
    "end": "2275250"
  },
  {
    "text": "things these features you might actually never use them unless you have to write",
    "start": "2275250",
    "end": "2282000"
  },
  {
    "text": "a type definition for one of these NPM modules so there's a repository called",
    "start": "2282000",
    "end": "2288990"
  },
  {
    "text": "definitely typed and it contains type definitions for all of these modules so",
    "start": "2288990",
    "end": "2294000"
  },
  {
    "text": "when you install a package of NPM you can then install the type definitions of NPM as well and then that gives",
    "start": "2294000",
    "end": "2300869"
  },
  {
    "text": "typescript the the information on how to type check that particular library not",
    "start": "2300869",
    "end": "2308490"
  },
  {
    "text": "every library is covered so we've probably had to implement half a dozen a dozen different libraries so yeah these",
    "start": "2308490",
    "end": "2317190"
  },
  {
    "text": "this is where these sort of features become super handy there's a number of built-in map types so I've got an",
    "start": "2317190",
    "end": "2325500"
  },
  {
    "text": "article here which has heading which is a string an optional byline key and a",
    "start": "2325500",
    "end": "2331170"
  },
  {
    "text": "the content blocks they have partial make all of the properties optional",
    "start": "2331170",
    "end": "2337940"
  },
  {
    "text": "read-only make all of the properties read-only finally you've a pick which",
    "start": "2337940",
    "end": "2343890"
  },
  {
    "text": "says pass in article and then pass in a union type of all the keys I'm",
    "start": "2343890",
    "end": "2349820"
  },
  {
    "text": "interested in so that'll create a new type which only has heading and byline",
    "start": "2349820",
    "end": "2355260"
  },
  {
    "text": "but it'll take the value types and bring them across",
    "start": "2355260",
    "end": "2360559"
  },
  {
    "text": "this is really handy we use this these features all the time to simplify it",
    "start": "2361900",
    "end": "2367210"
  },
  {
    "text": "often you if you ever use like object keys you probably are going to be using",
    "start": "2367210",
    "end": "2373309"
  },
  {
    "text": "this feature to make sure the types are correct this brings a problem so we have",
    "start": "2373309",
    "end": "2383420"
  },
  {
    "text": "a look at take this a little bit further we have a style guide or a design system",
    "start": "2383420",
    "end": "2388760"
  },
  {
    "text": "for all of our react components so we want to document all of the properties",
    "start": "2388760",
    "end": "2395150"
  },
  {
    "text": "that have been passed so anyone can just go to our style guide they get an information on all the props and the",
    "start": "2395150",
    "end": "2401299"
  },
  {
    "text": "docs on it so we do this with by creating a type which is describe some",
    "start": "2401299",
    "end": "2406670"
  },
  {
    "text": "interface which is an object we then have a map type which is key in all the",
    "start": "2406670",
    "end": "2412520"
  },
  {
    "text": "keys of that type so key of T and then map that to a string described article",
    "start": "2412520",
    "end": "2421220"
  },
  {
    "text": "looks something like this it's a heading with a string it's an optional byline and contents this is problematic because",
    "start": "2421220",
    "end": "2429700"
  },
  {
    "text": "when we when we actually use that I don't get in a compilation error my",
    "start": "2429700",
    "end": "2436099"
  },
  {
    "text": "optional field isn't documented because the optionality comes across so we can",
    "start": "2436099",
    "end": "2441799"
  },
  {
    "text": "do that one better using type modifiers I can actually go - question mark and as",
    "start": "2441799",
    "end": "2447260"
  },
  {
    "text": "it's doing the mapping if any of those keys are optional it will remove that type model or that key modifier make",
    "start": "2447260",
    "end": "2454549"
  },
  {
    "text": "sense cool before that the number of",
    "start": "2454549",
    "end": "2460609"
  },
  {
    "text": "hacky workarounds to remove type modifiers was awful those are huge",
    "start": "2460609",
    "end": "2467240"
  },
  {
    "text": "github thread and you end up trying to find it and copying these three interfaces which do awful things with",
    "start": "2467240",
    "end": "2474140"
  },
  {
    "text": "generics to do exactly the same thing the last big feature that I really want",
    "start": "2474140",
    "end": "2480529"
  },
  {
    "text": "to talk about is conditional types so this is something that came in 2.8 I'm",
    "start": "2480529",
    "end": "2488119"
  },
  {
    "text": "going to take this a little bit further I have my article summary which",
    "start": "2488119",
    "end": "2494170"
  },
  {
    "text": "it's up missing a state the top interface it has byline which is an",
    "start": "2494170",
    "end": "2500380"
  },
  {
    "text": "object so it's not just a flat object anymore previously my documentation for this",
    "start": "2500380",
    "end": "2506410"
  },
  {
    "text": "would just be heading which is a string and byline which is a string because they're the keys I want to make it deep",
    "start": "2506410",
    "end": "2512829"
  },
  {
    "text": "so now my types can have Turner E's in",
    "start": "2512829",
    "end": "2517930"
  },
  {
    "text": "them so if the value for a key on type T",
    "start": "2517930",
    "end": "2525039"
  },
  {
    "text": "is an object so that again because it's a little bit quite wordy so I've it'll",
    "start": "2525039",
    "end": "2534609"
  },
  {
    "text": "come back hopefully timing sleep so if",
    "start": "2534609",
    "end": "2542079"
  },
  {
    "text": "the value so I can access I'm going through each key in that object type of",
    "start": "2542079",
    "end": "2548109"
  },
  {
    "text": "T I can get the type of the value by using the array index ax and then",
    "start": "2548109",
    "end": "2555400"
  },
  {
    "text": "checking to see if it's an object and if it is I recursively use the same type so",
    "start": "2555400",
    "end": "2561549"
  },
  {
    "text": "now I have a deep describe interface so",
    "start": "2561549",
    "end": "2567009"
  },
  {
    "text": "if it's not an object just fall back to strength so that'll be the arrays and and numbers and such so now my article",
    "start": "2567009",
    "end": "2576220"
  },
  {
    "text": "summary description will look something like this heading of string by line as",
    "start": "2576220",
    "end": "2582490"
  },
  {
    "text": "an object which has two keys on it and then finally contents so that's kind of",
    "start": "2582490",
    "end": "2589809"
  },
  {
    "text": "what you you get they're super handy feature there's a bunch of applications",
    "start": "2589809",
    "end": "2595480"
  },
  {
    "text": "for this so we saw the read-only interface before well that only is the",
    "start": "2595480",
    "end": "2600910"
  },
  {
    "text": "top level so if you access that the next level now won't be read-only using this",
    "start": "2600910",
    "end": "2607630"
  },
  {
    "text": "we can make an entire object structure recursively read-only",
    "start": "2607630",
    "end": "2613079"
  },
  {
    "text": "so there are so many possibilities the amount code that I got to delete with this feature was great discover what",
    "start": "2615330",
    "end": "2624780"
  },
  {
    "text": "I've gone over control flow analysis makes JavaScript really natural or types",
    "start": "2624780",
    "end": "2631230"
  },
  {
    "text": "but really natural types are what you know they are at runtime you don't have to do that mapping in your head",
    "start": "2631230",
    "end": "2638520"
  },
  {
    "text": "strict null checks being able to turn that on undefined there's another function goes away it's amazing",
    "start": "2638520",
    "end": "2644190"
  },
  {
    "text": "tagged unions if you have a list that have different types in it this feature",
    "start": "2644190",
    "end": "2651060"
  },
  {
    "text": "makes your life so much easier it was awful before similar they're like dotnet 1.1 when you didn't have generics",
    "start": "2651060",
    "end": "2659220"
  },
  {
    "text": "you just had this lob of array lists and they had to try and figure things out manually indexed and map types being",
    "start": "2659220",
    "end": "2667410"
  },
  {
    "text": "able to transform a type of an object to another one type modifiers just making",
    "start": "2667410",
    "end": "2674430"
  },
  {
    "text": "it easy to remove the things that are coming across and finally conditional",
    "start": "2674430",
    "end": "2680010"
  },
  {
    "text": "types so there are not that many features there they all sort of build on",
    "start": "2680010",
    "end": "2685740"
  },
  {
    "text": "generics and a bunch of the other stuff but I think in typescript 2.8 they had well over ten new features just in that",
    "start": "2685740",
    "end": "2692820"
  },
  {
    "text": "one release since typescript 2 the feature list is huge a bit of a recap",
    "start": "2692820",
    "end": "2700020"
  },
  {
    "text": "when it comes up we went over what is typescript why you'd be interested in it",
    "start": "2700020",
    "end": "2706650"
  },
  {
    "text": "a bit of an introduction basic features and a whole heap of awesome stuff that's come since 2.0 got launched that was",
    "start": "2706650",
    "end": "2714300"
  },
  {
    "text": "modern typescript is awesome hopefully it gave you some insights into if you're not using typescript why you should be",
    "start": "2714300",
    "end": "2721200"
  },
  {
    "text": "using it and if you are there's been so much released since 1.0 and early 2.0",
    "start": "2721200",
    "end": "2728280"
  },
  {
    "text": "days just have a look start exploring you might find a bunch of better ways to write code than you are now any",
    "start": "2728280",
    "end": "2735960"
  },
  {
    "text": "questions",
    "start": "2735960",
    "end": "2738410"
  },
  {
    "text": "the question is a lot of packages on NPM at either bundling the types directly",
    "start": "2754390",
    "end": "2759519"
  },
  {
    "text": "but at least you are installing from app types slash the name of that module and",
    "start": "2759519",
    "end": "2767200"
  },
  {
    "text": "do you think definitely typed is going to go away so the whole app types",
    "start": "2767200",
    "end": "2772410"
  },
  {
    "text": "namespace in NPM is pushed from definitely typed as an automated process",
    "start": "2772410",
    "end": "2779500"
  },
  {
    "text": "so if you submit a pull request they will automatically compile those types",
    "start": "2779500",
    "end": "2785829"
  },
  {
    "text": "and then push them into a package on NPM there's advantages to definitely tight",
    "start": "2785829",
    "end": "2793829"
  },
  {
    "text": "so the biggest one is you have a problem with the ecosystem around if the type",
    "start": "2793829",
    "end": "2800349"
  },
  {
    "text": "definitions fall out of sync with the library once again you're lying to the",
    "start": "2800349",
    "end": "2805359"
  },
  {
    "text": "compiler so there's a few things to consider ideally if you put the",
    "start": "2805359",
    "end": "2811119"
  },
  {
    "text": "typescript definitions inside like submit a pull request to that library that's great but if they're maintained",
    "start": "2811119",
    "end": "2817900"
  },
  {
    "text": "errs don't keep that up to date you have to continually submit pull requests to",
    "start": "2817900",
    "end": "2823900"
  },
  {
    "text": "that library and that might take a little while for them to merge it so if you think the library author or that",
    "start": "2823900",
    "end": "2831130"
  },
  {
    "text": "open source project will be reactive and maintain those types put them in there but if you put them in definitely typed",
    "start": "2831130",
    "end": "2837759"
  },
  {
    "text": "it means you can submit typescript like pull requests to the typescript team they will review it publish those",
    "start": "2837759",
    "end": "2844630"
  },
  {
    "text": "changes so you get up normally a lot faster turnaround so it totally depends",
    "start": "2844630",
    "end": "2850480"
  },
  {
    "text": "or if the package is old and you're not going to get a pull request in the path published then yeah totally just put it",
    "start": "2850480",
    "end": "2857740"
  },
  {
    "text": "on definitely cut",
    "start": "2857740",
    "end": "2860519"
  },
  {
    "text": "so the question is if there's bugs in the typescript definition and it's in that library and it's in a feature",
    "start": "2879290",
    "end": "2886400"
  },
  {
    "text": "branch but not published yet can you override it so typescript has a thing called",
    "start": "2886400",
    "end": "2891730"
  },
  {
    "text": "declaration merging so it really depends on what the issue is but essentially",
    "start": "2891730",
    "end": "2898000"
  },
  {
    "text": "declaration merging allows you to define the module types within your within your",
    "start": "2898000",
    "end": "2905720"
  },
  {
    "text": "code you could then ignore them and use yours instead or you can supplement it",
    "start": "2905720",
    "end": "2911240"
  },
  {
    "text": "so if there's two module like different type definitions that have each have",
    "start": "2911240",
    "end": "2918170"
  },
  {
    "text": "like different things what gets exposed to the compiler is both of those doesn't",
    "start": "2918170",
    "end": "2923510"
  },
  {
    "text": "overwrite it sort of augments so you can you can kind of use declaration merging",
    "start": "2923510",
    "end": "2928940"
  },
  {
    "text": "to get around a lot of that if the merge changes are incompatible then you'll",
    "start": "2928940",
    "end": "2935270"
  },
  {
    "text": "have to ignore those type definitions and then provide your own yeah so you",
    "start": "2935270",
    "end": "2947000"
  },
  {
    "text": "can actually in the typescript compiler options exclude files so you could try",
    "start": "2947000",
    "end": "2952610"
  },
  {
    "text": "and do that no one else cool thanks",
    "start": "2952610",
    "end": "2960320"
  },
  {
    "text": "everyone [Applause]",
    "start": "2960320",
    "end": "2967079"
  }
]