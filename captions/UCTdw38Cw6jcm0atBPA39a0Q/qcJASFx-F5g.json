[
  {
    "text": "all right in his bestselling 2014 book Yuval Noah Harari discusses a brief",
    "start": "5879",
    "end": "14000"
  },
  {
    "text": "history of humankind and one of the core ideas from this book is the importance",
    "start": "14000",
    "end": "19400"
  },
  {
    "text": "of Stories the words and stories we use as humans is the master key to our",
    "start": "19400",
    "end": "26199"
  },
  {
    "text": "success as a species our ability to get our El together behind an idea whether",
    "start": "26199",
    "end": "31759"
  },
  {
    "text": "that be a religion the nationality you are or the country the company you work for and the values that company has our",
    "start": "31759",
    "end": "39840"
  },
  {
    "text": "ability to get ourselves behind an idea at scale is what differentiates us from",
    "start": "39840",
    "end": "45079"
  },
  {
    "text": "other species now some of you might be really confused at this point thinking that you're at NDC London why are we learning",
    "start": "45079",
    "end": "51000"
  },
  {
    "text": "about a history of humankind and that's okay if you're furiously checking your agenda you are in the right place this",
    "start": "51000",
    "end": "56320"
  },
  {
    "text": "is going to be a talk about event of an architecture the reason start there is",
    "start": "56320",
    "end": "61719"
  },
  {
    "text": "because event Ren architecture is fundamentally a communication pattern a",
    "start": "61719",
    "end": "67400"
  },
  {
    "text": "way of modeling the integration between two systems and that's what you're here to",
    "start": "67400",
    "end": "73320"
  },
  {
    "text": "learn about today we're going to talk about some of the Practical implementations of ative in architecture",
    "start": "73320",
    "end": "78439"
  },
  {
    "text": "we're going to start from some of the beginner Concepts and work through some more intermediate",
    "start": "78439",
    "end": "84400"
  },
  {
    "text": "patterns I'm James East I'm a senior Cloud architect at AWS and for all of you non AWS people people in the in the",
    "start": "84400",
    "end": "90479"
  },
  {
    "text": "room don't worry this is not going to be death by ABB service icon in fact this is just a really simple talk really",
    "start": "90479",
    "end": "96960"
  },
  {
    "text": "simply about boxes and lines and I want to start today by being really really honest with you all I've",
    "start": "96960",
    "end": "103840"
  },
  {
    "text": "built systems in the past and I've got them terribly terribly wrong lots and",
    "start": "103840",
    "end": "109360"
  },
  {
    "text": "lots of times and that might make you think this is a really odd way of starting a talk admitting that I've really badly built event and systems how",
    "start": "109360",
    "end": "115840"
  },
  {
    "text": "many people here have built something that's failed at some point you can be honest this is a safe space yeah everybody okay good and how much did you",
    "start": "115840",
    "end": "122719"
  },
  {
    "text": "learn from that failure one of my old mentors always said to me you learn so much more in",
    "start": "122719",
    "end": "128520"
  },
  {
    "text": "Failure than you do in success we literally used to walk into pre-sales meetings with customers and say we will",
    "start": "128520",
    "end": "134160"
  },
  {
    "text": "do this well because we've gotten this wrong so many more times than you have so that's what we're going to talk",
    "start": "134160",
    "end": "139760"
  },
  {
    "text": "about today I'm going to try and show you some of these challenges some of these things you might hit as you start to adopt event of an",
    "start": "139760",
    "end": "145959"
  },
  {
    "text": "architecture and for the rest of this talk I want you all to put on your imagination hats cuz the something I love talking about almost as much as",
    "start": "145959",
    "end": "152080"
  },
  {
    "text": "event of architecture and serverless and that is pizza who else loves pizza for anybody who's still got their",
    "start": "152080",
    "end": "158720"
  },
  {
    "text": "hand down really for the rest of this talk you are now all Developers for a completely",
    "start": "158720",
    "end": "165280"
  },
  {
    "text": "fictional pizza company called plant-based Pizza you've already adopted microservices these microservices are",
    "start": "165280",
    "end": "171360"
  },
  {
    "text": "communicating right now over HTTP request response style communication this works well it's",
    "start": "171360",
    "end": "178159"
  },
  {
    "text": "functional but it's giving you an awful lot of challenges that's because you've got this order processing service that's",
    "start": "178159",
    "end": "183480"
  },
  {
    "text": "the core domain this is fundamental to your application if people can't place their pizza orders then really what is",
    "start": "183480",
    "end": "189159"
  },
  {
    "text": "the point of a pizza delivery company and this order processing service has a dependency on all these other services",
    "start": "189159",
    "end": "194920"
  },
  {
    "text": "on the pickup service the delivery service the kitchen and you also need to add a new loyalty Point service to allow",
    "start": "194920",
    "end": "201959"
  },
  {
    "text": "people to build up loyalty points it would be amazing if pizza places did this because I'd have so much free pizza by",
    "start": "201959",
    "end": "207319"
  },
  {
    "text": "now then this really is a problem of coupling that you've got here all these services are really tightly coupled",
    "start": "207319",
    "end": "213640"
  },
  {
    "text": "together over HTTP and I'm sure you've all heard the adage in software before that you should",
    "start": "213640",
    "end": "219400"
  },
  {
    "text": "aim for high cohesion and low coupling and cohesion you've kind of",
    "start": "219400",
    "end": "224560"
  },
  {
    "text": "already solved a little bit cohesion is the idea that things that things that change together should live together and",
    "start": "224560",
    "end": "230480"
  },
  {
    "text": "you've got microservices you've broken your system down into these small independently Deployable pieces so you've kind of solved that coupling",
    "start": "230480",
    "end": "237319"
  },
  {
    "text": "however is a slightly more nuanced problem and that's because there's lots of different types of",
    "start": "237319",
    "end": "243560"
  },
  {
    "text": "coupling you've got location and runtime coupling that's primarily what you're dealing with with request response style",
    "start": "243560",
    "end": "249959"
  },
  {
    "text": "communication at the time you need to make a request you need to understand the location of a specific service",
    "start": "249959",
    "end": "255400"
  },
  {
    "text": "whether that's the IP address the domain name but you've also got other types of coupling you've got semantic coupling",
    "start": "255400",
    "end": "260919"
  },
  {
    "text": "data format coupling are you using binary data protuff Json how do you",
    "start": "260919",
    "end": "266639"
  },
  {
    "text": "handle null values ins strings what casing are you using in yourj on is it camel case are you using",
    "start": "266639",
    "end": "272840"
  },
  {
    "text": "high and is it some weird combination of underscores that only makes sense to you in your business these are all different",
    "start": "272840",
    "end": "278680"
  },
  {
    "text": "types of coupling that you need to work with and of course you need some coupling without coupling it will be really hard to make these microservices",
    "start": "278680",
    "end": "285080"
  },
  {
    "text": "actually do anything and there's an appropriate level of coupling to aim for and I really love this quote from Gregor",
    "start": "285080",
    "end": "290880"
  },
  {
    "text": "Hy an appropriate level of coupling depends on the amount of control you",
    "start": "290880",
    "end": "296039"
  },
  {
    "text": "have over the endpoints and what I think Greg means by that is that if you are working on a",
    "start": "296039",
    "end": "301360"
  },
  {
    "text": "team that maybe manages two or three different microservices coupling them Services",
    "start": "301360",
    "end": "306479"
  },
  {
    "text": "together more tightly isn't necessarily a bad thing because you control the release cycle you control the SLA you",
    "start": "306479",
    "end": "313919"
  },
  {
    "text": "control the schema of these systems but once you start integrating with a system outside of your control you want to try",
    "start": "313919",
    "end": "320759"
  },
  {
    "text": "and reduce this coupling as much as possible whether that be a third party SAS product that exposes an API or",
    "start": "320759",
    "end": "327360"
  },
  {
    "text": "another system inside your organization so if it's coupling that's",
    "start": "327360",
    "end": "332680"
  },
  {
    "text": "the problem and there's an appropriate level of coupling to aim for why does it help to be event driven starting with",
    "start": "332680",
    "end": "339800"
  },
  {
    "text": "why is always a really important thing to do in software Lea talked about that in her keynote yesterday so let's come back to this use",
    "start": "339800",
    "end": "345840"
  },
  {
    "text": "case that you need to implement now you need to add this loyalty Point service to your system so you build the Loyalty Point service microservices you deploy",
    "start": "345840",
    "end": "352400"
  },
  {
    "text": "it independently excellent but now you need to go and make a change to your order processing service to actually",
    "start": "352400",
    "end": "358520"
  },
  {
    "text": "tell the AUD processing service to make the call to the Lo Point service to add the Lo points and when you think about that is",
    "start": "358520",
    "end": "365160"
  },
  {
    "text": "that really logically the right thing to do should the order processing service care about the fact that people are",
    "start": "365160",
    "end": "372160"
  },
  {
    "text": "collecting loyalty points probably possibly not and you can make that same argument for other parts",
    "start": "372160",
    "end": "377759"
  },
  {
    "text": "of the system as well the kitchen service the pickup service should the order processing service actually C that all these things need to happen in some",
    "start": "377759",
    "end": "384360"
  },
  {
    "text": "cases yes absolutely but in not all cases there's another problem here if",
    "start": "384360",
    "end": "390080"
  },
  {
    "text": "you run this communication over HTTP request response you've got that runtime coupling the Loyalty Point service needs",
    "start": "390080",
    "end": "395360"
  },
  {
    "text": "to exist at the time the order processing service is doing its work what happens if this happens the Lo",
    "start": "395360",
    "end": "401720"
  },
  {
    "text": "Point service goes offline now you've got a service that's not in the core domain it's not the core",
    "start": "401720",
    "end": "407560"
  },
  {
    "text": "part of the the order processing floww but it has the potential to take your order processing service",
    "start": "407560",
    "end": "413880"
  },
  {
    "text": "offline now I realize I'm massively oversimplifying that it is possible to build microservices in this way that are",
    "start": "413880",
    "end": "419560"
  },
  {
    "text": "resilient you can use things like circuit breakers and back off so that is possible but event of an architecture",
    "start": "419560",
    "end": "425759"
  },
  {
    "text": "can help you minimize that so before we get into some of the technical patterns let's just take a",
    "start": "425759",
    "end": "431599"
  },
  {
    "text": "step back for a second just talked about the importance of language and words so let's ensure we have the same shared",
    "start": "431599",
    "end": "436759"
  },
  {
    "text": "definition of what all these things mean what does it actually mean to be event driven sounds a little bit",
    "start": "436759",
    "end": "443599"
  },
  {
    "text": "buzzworthy right event we're all talking about event architecture nowadays the most succinct way I found",
    "start": "443599",
    "end": "449120"
  },
  {
    "text": "of putting this is something I've taken from one of Martin Fowler's talks on the topic and its core event of an",
    "start": "449120",
    "end": "454680"
  },
  {
    "text": "architecture is about reversing dependencies reversing the lines of",
    "start": "454680",
    "end": "460360"
  },
  {
    "text": "integration so now instead of the order processing service needing to know where all these services are all these",
    "start": "460360",
    "end": "466319"
  },
  {
    "text": "Downstream services are now reacting to events that the order processing service is",
    "start": "466319",
    "end": "472120"
  },
  {
    "text": "publishing so that's what it means to be event Ren it's about reversing dependencies to take a step back even",
    "start": "472120",
    "end": "477919"
  },
  {
    "text": "further what actually is an event what is an event in my opinion an event is an",
    "start": "477919",
    "end": "484440"
  },
  {
    "text": "immutable fact it's something that's happened in the past it cannot be",
    "start": "484440",
    "end": "490199"
  },
  {
    "text": "changed the example I like to use here is that of a light switch it's February",
    "start": "490199",
    "end": "495360"
  },
  {
    "text": "we're in London it's dark it's horrible you get back to your hotel room at night and it's pitch black and you need to get some light in the room so you can see",
    "start": "495360",
    "end": "501319"
  },
  {
    "text": "what you're doing so you hit the light switch and that race is a light switched on",
    "start": "501319",
    "end": "507599"
  },
  {
    "text": "event you can't un switched on a light what you need to do to take the light",
    "start": "507599",
    "end": "512800"
  },
  {
    "text": "out of the room is to hit the light switch again and that will give you a light Switched Off event the light will leave the room light switched on light",
    "start": "512800",
    "end": "519399"
  },
  {
    "text": "switched off they're irrefutable they can't be changed they have happened so if that's the definition of",
    "start": "519399",
    "end": "524839"
  },
  {
    "text": "an event what does it mean to be event",
    "start": "524839",
    "end": "529519"
  },
  {
    "text": "driven and I think there's Sometimes some confusion here between event driven",
    "start": "529920",
    "end": "535080"
  },
  {
    "text": "systems and event based systems and that might sound like semantics but I think",
    "start": "535080",
    "end": "540200"
  },
  {
    "text": "there's a key distinction and the event driven system is where your system functionality is driven by business",
    "start": "540200",
    "end": "547399"
  },
  {
    "text": "events and that's important because we've been building event based systems for years and years I started in",
    "start": "547399",
    "end": "553800"
  },
  {
    "text": "software building with Windows forums who remembers Windows forms who's still managing Windows forms who's still building a Windows forms some people",
    "start": "553800",
    "end": "559800"
  },
  {
    "text": "amazing wow and event Windows forms you triggered functionality using things like button clicked Mouse hovered window",
    "start": "559800",
    "end": "566480"
  },
  {
    "text": "resized and then something happened after that some functionality executed and even Building Systems in",
    "start": "566480",
    "end": "572760"
  },
  {
    "text": "more modern ways you can do the same thing if you drop a file into an Amazon S3 bucket there's that first service",
    "start": "572760",
    "end": "578000"
  },
  {
    "text": "name that will raise an S3 object created event and you can trigger",
    "start": "578000",
    "end": "583200"
  },
  {
    "text": "functionality off these events but that doesn't make it event driven an event driven system uses",
    "start": "583200",
    "end": "588399"
  },
  {
    "text": "events like these order confirmed Pizza boxed staff member clocked in these are",
    "start": "588399",
    "end": "595880"
  },
  {
    "text": "events that are unique to your business you could look at two identical businesses in the exact same",
    "start": "595880",
    "end": "601440"
  },
  {
    "text": "domain and whilst they might both be triggering functionality like of things like S3 object created they will have a",
    "start": "601440",
    "end": "606920"
  },
  {
    "text": "fundamentally different set of business events that are unique to your",
    "start": "606920",
    "end": "612760"
  },
  {
    "text": "business you're letting the language the story of your business Drive its",
    "start": "612760",
    "end": "618399"
  },
  {
    "text": "technical implementation and that's what event liven architecture can give you this share",
    "start": "618399",
    "end": "624720"
  },
  {
    "text": "language the other thing you might hear when you learn about event of Architecture is that events are first class citizens",
    "start": "624720",
    "end": "629839"
  },
  {
    "text": "that sounds like another buzzword right what does that actually mean for an event to be a first class citizen in a",
    "start": "629839",
    "end": "636160"
  },
  {
    "text": "system how many of you have heard of the idea of API first design yeah some people have some people",
    "start": "636160",
    "end": "642360"
  },
  {
    "text": "haven't API first design is this idea of when you start building a system the first thing you do is design the API you",
    "start": "642360",
    "end": "649680"
  },
  {
    "text": "design the point of interaction the integration so when you want to glue systems together you have this agreed",
    "start": "649680",
    "end": "655880"
  },
  {
    "text": "contract so with Event Systems events being first class cens means that you default to event first",
    "start": "655880",
    "end": "663480"
  },
  {
    "text": "design the first thing you want to do is actually design your events because they are the point of integration they are",
    "start": "663480",
    "end": "670480"
  },
  {
    "text": "the point of coupling that you have in your system and it's not as simple as just adopting events there are lots of",
    "start": "670480",
    "end": "677240"
  },
  {
    "text": "different types of events you'll likely see in your",
    "start": "677240",
    "end": "681639"
  },
  {
    "text": "systems the first of those is a notification event or what can be known",
    "start": "682600",
    "end": "687639"
  },
  {
    "text": "as a sport event this is a really small really simple packet of data that simply notifies",
    "start": "687639",
    "end": "694160"
  },
  {
    "text": "other systems that something has happened they typically quite lightweight and this is where you start",
    "start": "694160",
    "end": "699880"
  },
  {
    "text": "building out this event system for plant-based Pizza you introduced invents for the integration between the order",
    "start": "699880",
    "end": "705959"
  },
  {
    "text": "processing service and the kitchen service and you publish an order confirmed event so somebody places an order",
    "start": "705959",
    "end": "712320"
  },
  {
    "text": "they're waiting for the pizza the kitchen receives this order confirmed event it has an order ID and the kitchen goes fantastic what do I actually need",
    "start": "712320",
    "end": "719639"
  },
  {
    "text": "to cook what's actually on this order so then the kitchen service calls",
    "start": "719639",
    "end": "724839"
  },
  {
    "text": "back to the order processing service says excuse me Mr order processing service what's actually on this order what do I actually need to cook and the",
    "start": "724839",
    "end": "730800"
  },
  {
    "text": "order processing service responds and everyone's happy right and this is a system I've actually built before I've",
    "start": "730800",
    "end": "736880"
  },
  {
    "text": "done this exact same integration before in the past and it works really well functionally because you receive the",
    "start": "736880",
    "end": "742639"
  },
  {
    "text": "event it's nice and small it's lightweight and you call back and get some more information and then you add another set Downstream service and then",
    "start": "742639",
    "end": "749360"
  },
  {
    "text": "you add some more Downstream services and some more Downstream services and some more Downstream services and",
    "start": "749360",
    "end": "754680"
  },
  {
    "text": "eventually all of a sudden this happens everything falls over because now you've got this potentially infinite number of",
    "start": "754680",
    "end": "760360"
  },
  {
    "text": "Downstream services that are all making calls back to get more information about",
    "start": "760360",
    "end": "765600"
  },
  {
    "text": "that specific order yeah a core principle of event an architecture is that Services producing",
    "start": "765600",
    "end": "771399"
  },
  {
    "text": "these events should be completely unaware of their Downstream consumers but yet if every single one of these",
    "start": "771399",
    "end": "777120"
  },
  {
    "text": "Downstream consumers needs to call back they are kind of aware",
    "start": "777120",
    "end": "782399"
  },
  {
    "text": "right so is there an alternate approach you can take here and there is and this comes back to this idea of different",
    "start": "782399",
    "end": "787440"
  },
  {
    "text": "types of events another type of event you will see is event carried State transfer or a more fat event as it can",
    "start": "787440",
    "end": "794600"
  },
  {
    "text": "be commonly known so this is an example of a spar event or a notification event you've just got an order ID so order confirmed",
    "start": "794600",
    "end": "801639"
  },
  {
    "text": "just an order ID with event carried State transfer are fatter events that event will look a little something like",
    "start": "801639",
    "end": "808199"
  },
  {
    "text": "this so you see you've got a lot more information here now you've got more information that the downstream",
    "start": "808199",
    "end": "813839"
  },
  {
    "text": "consumers can use to actually perform some functionality without needing that",
    "start": "813839",
    "end": "819160"
  },
  {
    "text": "call back so the kitchen can consume this event it's got the list of items on the order so now it knows what it needs",
    "start": "819160",
    "end": "825399"
  },
  {
    "text": "to cook perfect Happy Days right so which one of these is the right one to choose",
    "start": "825399",
    "end": "831399"
  },
  {
    "text": "do you use fat events do you use spice events hold that thought we'll come back to that in just a second stay with the",
    "start": "831399",
    "end": "836959"
  },
  {
    "text": "theoretical just for a minute at its core an event of an architecture is made up of three parts you have a producer a",
    "start": "836959",
    "end": "843519"
  },
  {
    "text": "consumer and some kind of event broker in the middle that might be an event bus",
    "start": "843519",
    "end": "849040"
  },
  {
    "text": "equally you might see a queue or a stream or a topic there's just some kind of broker in the middle that's in charge",
    "start": "849040",
    "end": "854560"
  },
  {
    "text": "of rooting these events from one place to another and the first thing you'll notice is that the producer and the consumer here have no idea each other",
    "start": "854560",
    "end": "862560"
  },
  {
    "text": "exists the communication is managed by the broker the core integration pattern at",
    "start": "862560",
    "end": "868279"
  },
  {
    "text": "work here is the publish subscribe pattern you have a publisher producing events and you've got n number of",
    "start": "868279",
    "end": "873920"
  },
  {
    "text": "Downstream consumers that are all consuming these events and as a producer in an event",
    "start": "873920",
    "end": "880440"
  },
  {
    "text": "system as a publisher of these events your real responsibility is to make sure you stick to that design you agreed with",
    "start": "880440",
    "end": "887839"
  },
  {
    "text": "because the schema of your event the format of that event is the the biggest part of coupling that you will see in",
    "start": "887839",
    "end": "893000"
  },
  {
    "text": "the event of an architecture so although you've removed that runtime coupling because now producers and consumers don't know each other exist you still",
    "start": "893000",
    "end": "899880"
  },
  {
    "text": "have semantic coupling the format of that event is really really important so as a producer it's your responsibility",
    "start": "899880",
    "end": "906320"
  },
  {
    "text": "to try and minimize breaking changes and to stick to that contract that you agreed on there's some things you're not",
    "start": "906320",
    "end": "912839"
  },
  {
    "text": "responsible for anymore though and this is where it gets really interesting you're not responsible for how your events are used your responsibility is",
    "start": "912839",
    "end": "920120"
  },
  {
    "text": "simply to publish the event and what Downstream people choose to do with that is not your",
    "start": "920120",
    "end": "925399"
  },
  {
    "text": "problem and the other thing that's not your responsibility when you compare it with with hdtp is the constraints of",
    "start": "925399",
    "end": "932120"
  },
  {
    "text": "your Downstream consumers so if you think about when you're making a hdtp request you need to",
    "start": "932120",
    "end": "937519"
  },
  {
    "text": "understand what kind of throughput that Downstream system can support what rate limits does it have you need to",
    "start": "937519",
    "end": "942720"
  },
  {
    "text": "understand the format of the API that that API has that's now your responsibility but then you're",
    "start": "942720",
    "end": "948040"
  },
  {
    "text": "responsible for the constraints of a system outside of your control and with a event of an",
    "start": "948040",
    "end": "953160"
  },
  {
    "text": "architecture that constraint that understanding of constraint switches to the subscriber responsibility and this",
    "start": "953160",
    "end": "959360"
  },
  {
    "text": "makes more logical sense if you think about it I should own the constraints of my own system so as a subscriber to",
    "start": "959360",
    "end": "965199"
  },
  {
    "text": "events you need to control your own ingestion rate you need to control the load on your",
    "start": "965199",
    "end": "971759"
  },
  {
    "text": "system and another place where you can get into trouble here is hooking your event your your systems directly up to",
    "start": "971759",
    "end": "977560"
  },
  {
    "text": "the event bus because remember now producers don't care about how their events are being used they're just going to publish",
    "start": "977560",
    "end": "983279"
  },
  {
    "text": "events as and when they come in as fast as they can and if you're not careful as a subscriber to an event you can really",
    "start": "983279",
    "end": "989440"
  },
  {
    "text": "easily overload your own system so what I always recommend when talking about ventive an architecture as",
    "start": "989440",
    "end": "994639"
  },
  {
    "text": "a subscriber is protect yourself against this kind of floor as opposed to hooking a piece of compute your application",
    "start": "994639",
    "end": "1001040"
  },
  {
    "text": "directly up to the event bus Which then couples you to a system completely out of your",
    "start": "1001040",
    "end": "1007040"
  },
  {
    "text": "control instead introduce some kind of cue some kind of dunable storage that you understand so when the event hits",
    "start": "1007040",
    "end": "1013360"
  },
  {
    "text": "the event bus it comes down to your micros service and it hits some kind of queue it's stored there durably and then",
    "start": "1013360",
    "end": "1020480"
  },
  {
    "text": "you can do some work off the back of that que and if you in some increased Lord everything just builds up in the queue and you can simply process that at",
    "start": "1020480",
    "end": "1027400"
  },
  {
    "text": "a time that suits you another more subtle benefit of rent",
    "start": "1027400",
    "end": "1033038"
  },
  {
    "text": "of an architecture and I promise we'll get out the theoretical in just a moment another subtle benefit of event of an architecture is around",
    "start": "1033039",
    "end": "1039400"
  },
  {
    "text": "communication obviously this is a technical pattern technical communication between systems but it",
    "start": "1039400",
    "end": "1044880"
  },
  {
    "text": "also really helps at a human level how many of you sat in a room with the non-technical person and just send their",
    "start": "1044880",
    "end": "1050679"
  },
  {
    "text": "eyes like glaze over a little bit as you start talking about microservices or rest apis yeah I kind of just go like",
    "start": "1050679",
    "end": "1056160"
  },
  {
    "text": "this a little bit like what what are they talking about when you when you start using a event different architecture it's it eases this",
    "start": "1056160",
    "end": "1061520"
  },
  {
    "text": "communication because you can walk into a room now and say what should happen after an order is",
    "start": "1061520",
    "end": "1066640"
  },
  {
    "text": "cancelled how should we deal with an order completed event you can have these kinds of conversations it makes this",
    "start": "1066640",
    "end": "1073160"
  },
  {
    "text": "communication easier and that's because to come back to this quote from earlier Eda is fundamentally a communic a",
    "start": "1073160",
    "end": "1079200"
  },
  {
    "text": "pattern a way of modeling the integration between your systems so let's actually get a bit more",
    "start": "1079200",
    "end": "1085880"
  },
  {
    "text": "practical now let's start to model this integration in event implant-based pizza and to do that let's start with how",
    "start": "1085880",
    "end": "1091760"
  },
  {
    "text": "things are working today so right now a request comes into your order processing service that makes a call to the kitchen",
    "start": "1091760",
    "end": "1099000"
  },
  {
    "text": "say hey can you please go and cook this order please the kitchen responds after that order has been created and says y this order is now finished at which",
    "start": "1099000",
    "end": "1105240"
  },
  {
    "text": "point the order processing service will make a HTTP request to the delivery service delivery service response call to the",
    "start": "1105240",
    "end": "1111240"
  },
  {
    "text": "brand new loyalty Point service loyalty Point service response and you look at this right now",
    "start": "1111240",
    "end": "1116559"
  },
  {
    "text": "and even in this simple example there's quite a lot of coupling here there's quite a lot of runtime dependency and",
    "start": "1116559",
    "end": "1121919"
  },
  {
    "text": "this is what we're going to work to remove as you start to adopt event of an architecture and the first question that",
    "start": "1121919",
    "end": "1128480"
  },
  {
    "text": "might be in all of your minds now is how do I actually understand the events in my system if every single business has",
    "start": "1128480",
    "end": "1136120"
  },
  {
    "text": "its own unique set of events how do I understand what them events are and I want to come back to the same image from",
    "start": "1136120",
    "end": "1142200"
  },
  {
    "text": "earlier because there's something in this image that's really quite useful when it comes to event",
    "start": "1142200",
    "end": "1147480"
  },
  {
    "text": "architecture and that's the idea of event storming who's heard of event storming who has done event storming",
    "start": "1147480",
    "end": "1153840"
  },
  {
    "text": "actually been through and done an event storming Workshop okay some of you have some you haven't really coincidentally there's actually a thing on the wall",
    "start": "1153840",
    "end": "1159080"
  },
  {
    "text": "over there which is actually a really good example of event storming that wasn't planted there that's just happens to be there event storming is an idea",
    "start": "1159080",
    "end": "1165480"
  },
  {
    "text": "that was populated by Alberto brandolini and and quoting directly from the website it's a fantastic way to",
    "start": "1165480",
    "end": "1172640"
  },
  {
    "text": "increase collaboration across Sil Lord boundaries sounds fantastic",
    "start": "1172640",
    "end": "1178159"
  },
  {
    "text": "right and one of the things you can do with event storming again quoting from the website is that it can be used to",
    "start": "1178159",
    "end": "1183480"
  },
  {
    "text": "design clean and maintainable event driven software to support rapidly evolving businesses and I'm sure many of",
    "start": "1183480",
    "end": "1190360"
  },
  {
    "text": "you are dealing with change in your systems things that change over time so",
    "start": "1190360",
    "end": "1195520"
  },
  {
    "text": "this isn't going to be a deep dive into event storing that's a whole talking itself let's just quickly touch on what",
    "start": "1195520",
    "end": "1200960"
  },
  {
    "text": "event storming is so you run event storming Workshop style you get every single possible stakeholder into a room",
    "start": "1200960",
    "end": "1206880"
  },
  {
    "text": "together business people technical people everyone's there together everyone has a pack of potic notes and",
    "start": "1206880",
    "end": "1212240"
  },
  {
    "text": "they're all sticking potic notes on the wall the sticking postate notes to understand what the events are in a",
    "start": "1212240",
    "end": "1218320"
  },
  {
    "text": "system things like order created payment processed order delivered the sticking",
    "start": "1218320",
    "end": "1223600"
  },
  {
    "text": "poits on for the commands the things that trigger these events to happen and Post-it notes for the queries this",
    "start": "1223600",
    "end": "1230159"
  },
  {
    "text": "importantly is a conversation focused on the business if you catch two developers and there always will be two developers",
    "start": "1230159",
    "end": "1235520"
  },
  {
    "text": "satting a corner talking about how they could build this on kubernetes and how complex that would be and I tell me it",
    "start": "1235520",
    "end": "1241159"
  },
  {
    "text": "will be complex if it's kubernetes um bring them back into the room bring them",
    "start": "1241159",
    "end": "1246240"
  },
  {
    "text": "back to the business conversation because that's what it's all about the core thing that you get out of an event",
    "start": "1246240",
    "end": "1251480"
  },
  {
    "text": "storming session is aured language that you're going to use across the entire",
    "start": "1251480",
    "end": "1256840"
  },
  {
    "text": "business both in the technical and the non-technical that's the core",
    "start": "1256840",
    "end": "1263200"
  },
  {
    "text": "thing so the other thing you'll commonly hear when you hear about event of an architecture is this idea of evolvability",
    "start": "1263200",
    "end": "1269279"
  },
  {
    "text": "if you've got this stream of events that are just flying around everywhere you've got this Central event BS and producers",
    "start": "1269279",
    "end": "1275080"
  },
  {
    "text": "and consumers don't know about each other doesn't that make your system incredibly evolvable because you could",
    "start": "1275080",
    "end": "1280520"
  },
  {
    "text": "just add a new service hook into that event stream and now you've got this new service and it's event Ren and",
    "start": "1280520",
    "end": "1285559"
  },
  {
    "text": "everything's magical not always that's simp simple of course nothing's ever that simple so",
    "start": "1285559",
    "end": "1290960"
  },
  {
    "text": "let's come back to this fat event this event Carri State transfer you're publishing this already confirmed event",
    "start": "1290960",
    "end": "1296480"
  },
  {
    "text": "and actually because your pizza restaurant is so so popular you've now gone Global you've gone multinational so",
    "start": "1296480",
    "end": "1302760"
  },
  {
    "text": "now you need to start adding the currency to this already confirmed event so what you do is you take that order",
    "start": "1302760",
    "end": "1308799"
  },
  {
    "text": "value property and you change that to be an object so instead of just publishing the value as a",
    "start": "1308799",
    "end": "1314559"
  },
  {
    "text": "decimal you're now publishing a object that has the value the currency of that",
    "start": "1314559",
    "end": "1319760"
  },
  {
    "text": "value who can see a potential problem with this yeah every because what you've done",
    "start": "1319760",
    "end": "1326159"
  },
  {
    "text": "now is you've broken the contract of your event you've changed the schema of event and you might think well when we",
    "start": "1326159",
    "end": "1331559"
  },
  {
    "text": "did that event storming session it's only the kitchen that's really interested in this event and they don't care about the value they only cared",
    "start": "1331559",
    "end": "1337039"
  },
  {
    "text": "about the items on the order and then you realize that a downstream service had been added to",
    "start": "1337039",
    "end": "1343799"
  },
  {
    "text": "support analytics to support reporting and you didn't know about it remember producers are in aw of their YouTubers",
    "start": "1343799",
    "end": "1349880"
  },
  {
    "text": "and now you've just broken a system completely that you didn't know about you've just taken it",
    "start": "1349880",
    "end": "1355480"
  },
  {
    "text": "offline so what do you do now how do you handle this and I'm going to put a really dirty",
    "start": "1355480",
    "end": "1361559"
  },
  {
    "text": "word on the on the screen now and I'm sorry you're all going to get shivers down you spy and I really really apologize for it it won't be there for",
    "start": "1361559",
    "end": "1367039"
  },
  {
    "text": "long I promise and that word is governance everyone's favorite word is a",
    "start": "1367039",
    "end": "1372360"
  },
  {
    "text": "developer tingles of bureaucracy you love it and governance is really",
    "start": "1372360",
    "end": "1377400"
  },
  {
    "text": "important with event of arch because you've got these systems that just don't care about each other you need a way to govern these events and this doesn't",
    "start": "1377400",
    "end": "1384080"
  },
  {
    "text": "have to be bureaucratic this can use a process that you're all probably familiar with as",
    "start": "1384080",
    "end": "1389320"
  },
  {
    "text": "developers and that's the idea of an RFC a request for comment so when you're thinking about",
    "start": "1389320",
    "end": "1396000"
  },
  {
    "text": "changing an event instead of just changing the event without tell anybody make it",
    "start": "1396000",
    "end": "1401840"
  },
  {
    "text": "collaborative raise some kind of RFC let people comment on the change that you're",
    "start": "1401840",
    "end": "1407039"
  },
  {
    "text": "thinking of making to your event relatively simple but it's a really powerful way and it's not really that",
    "start": "1407039",
    "end": "1413520"
  },
  {
    "text": "bureaucratic hopefully you've all recovered from that word being on screen now the other thing you can do at a more",
    "start": "1413520",
    "end": "1418960"
  },
  {
    "text": "technical level is to think about the schema of the event that you publish rather than just publishing an event",
    "start": "1418960",
    "end": "1424360"
  },
  {
    "text": "that is just the order confirmed event introduce this metadata data",
    "start": "1424360",
    "end": "1430000"
  },
  {
    "text": "pattern again schema the scheme of your event is the tightest form of coupling in event of architecture so at a top",
    "start": "1430000",
    "end": "1436320"
  },
  {
    "text": "level splitting your event down into a metad data section and the data section helps you to stay",
    "start": "1436320",
    "end": "1442960"
  },
  {
    "text": "evolvable so the data property here is the actual event payload this is the bit of the event that's unique to the event",
    "start": "1442960",
    "end": "1449480"
  },
  {
    "text": "you're publishing for every single type of event in your system this data property will be completely",
    "start": "1449480",
    "end": "1455000"
  },
  {
    "text": "different it's the metadata property where things get really interesting because this metadata property is going",
    "start": "1455000",
    "end": "1461039"
  },
  {
    "text": "to have the exact same schemer across every single event in your entire organization they're all going to have",
    "start": "1461039",
    "end": "1467039"
  },
  {
    "text": "this metadata property and they're all going to have the same properties inside this metadata property one of those will",
    "start": "1467039",
    "end": "1472720"
  },
  {
    "text": "be the event type what type of event is this that's being published in this case it's in order created event an event ID the event ID is a",
    "start": "1472720",
    "end": "1480720"
  },
  {
    "text": "uniquely generated identifier generated at the point of publish and this allows any Downstream",
    "start": "1480720",
    "end": "1487399"
  },
  {
    "text": "consumers to more easily Implement things like ID and potency you can look at this event and be like have I seen",
    "start": "1487399",
    "end": "1492440"
  },
  {
    "text": "this event before yes I have I can just ignore it the event date and the event time this can help you to understand",
    "start": "1492440",
    "end": "1498919"
  },
  {
    "text": "ordering of events if that's something that's important to you and finally with this conversation around evolvability is",
    "start": "1498919",
    "end": "1505520"
  },
  {
    "text": "the version number you see you've got version and V1 here including a version number as part",
    "start": "1505520",
    "end": "1512520"
  },
  {
    "text": "of your event more easily allows you to introduce breaking changes so let's come back to that same example where we need",
    "start": "1512520",
    "end": "1518279"
  },
  {
    "text": "to change the value from a decimal to be a object that has the value and the currency so right now the order",
    "start": "1518279",
    "end": "1525159"
  },
  {
    "text": "processing service is publishing version one of that order confirmed event and the kitchen service is consuming that all your Downstream consumers are",
    "start": "1525159",
    "end": "1532000"
  },
  {
    "text": "consuming order confirmed version one and then what you can do is also",
    "start": "1532000",
    "end": "1537080"
  },
  {
    "text": "start publishing version two of your event and nobody might be interested in this event right now you're just",
    "start": "1537080",
    "end": "1543080"
  },
  {
    "text": "publishing it and it's going to be really sad because nobody cares about it but it's going to be there ready and",
    "start": "1543080",
    "end": "1548159"
  },
  {
    "text": "then you can put out a notification to the rest of your company saying hey we've now got version two of this event can you please all switch over to",
    "start": "1548159",
    "end": "1553919"
  },
  {
    "text": "version two we're going to depreciate version one on day x and over time all",
    "start": "1553919",
    "end": "1559720"
  },
  {
    "text": "of your consumers can switch over start consuming version two and eventually over time you can stop publishing",
    "start": "1559720",
    "end": "1566000"
  },
  {
    "text": "version one of the event so as much as possible of course try and avoid breaking changes but if",
    "start": "1566000",
    "end": "1572559"
  },
  {
    "text": "you think you're never going to make a breaking change I can tell you now you're going to be wrong you will eventually over time need to make a",
    "start": "1572559",
    "end": "1578559"
  },
  {
    "text": "breaking change to an event so that leads us back to this question fat versus sparse events what's the right",
    "start": "1578559",
    "end": "1585720"
  },
  {
    "text": "one to choose unfortunately I'm not going to give you a definite answer on this because as always it depends feels",
    "start": "1585720",
    "end": "1593559"
  },
  {
    "text": "like a cop out I know but it genuinely does um so fat events obviously reduce",
    "start": "1593559",
    "end": "1599520"
  },
  {
    "text": "that need for a call back they reduce the need for systems because all the information a downstream system could",
    "start": "1599520",
    "end": "1604760"
  },
  {
    "text": "possibly need is in that event that gets sent the downside of that is that you",
    "start": "1604760",
    "end": "1610480"
  },
  {
    "text": "get more coupling at the schema level it becomes more challenging to make changes to that event over time because you",
    "start": "1610480",
    "end": "1616600"
  },
  {
    "text": "don't know which bits of that event different systems are interested in So based on that argument that might lead",
    "start": "1616600",
    "end": "1622240"
  },
  {
    "text": "you to say well long live the spice event let's just publish spice events everywhere but as was described when you",
    "start": "1622240",
    "end": "1627919"
  },
  {
    "text": "do this it can become challenging if you take this to the the absolute extreme and you only ever publish spice",
    "start": "1627919",
    "end": "1634200"
  },
  {
    "text": "events and to stop this risk of call back you just don't allow systems to make a call",
    "start": "1634200",
    "end": "1639320"
  },
  {
    "text": "back this would work it would give you spice events it would reduce that coupling but actually this isn't really",
    "start": "1639320",
    "end": "1644399"
  },
  {
    "text": "that practical in the real world because then how would the delivery service here know what needs to deliver it just",
    "start": "1644399",
    "end": "1650919"
  },
  {
    "text": "wouldn't so the other option you have here is to use more sparse events but instead of just publishing a single",
    "start": "1650919",
    "end": "1656279"
  },
  {
    "text": "identifier include multiple different identifiers and when you think about the logical flow of this here as you order a",
    "start": "1656279",
    "end": "1662760"
  },
  {
    "text": "pizza you're on your app you're hungry you're ordering your pizza and the first thing you'll likely do is add a delivery",
    "start": "1662760",
    "end": "1668360"
  },
  {
    "text": "address and that delivery address is going to go to the delivery microservice remember microservices own their own",
    "start": "1668360",
    "end": "1673679"
  },
  {
    "text": "data they have one responsibility so here the delivery service should own all the delivery addresses and the order service should own all the orders so you",
    "start": "1673679",
    "end": "1681760"
  },
  {
    "text": "add your delivery address and that will go into the delivery service and that will get stored with some kind of unique identifier and then after that you'll",
    "start": "1681760",
    "end": "1688039"
  },
  {
    "text": "you'll do the submit order you'll create your order and when that create order request goes in that will include the identifier",
    "start": "1688039",
    "end": "1696120"
  },
  {
    "text": "of the delivery address that needs to be used so that when that order confirmed event gets published you can include the",
    "start": "1696120",
    "end": "1702240"
  },
  {
    "text": "order ID but you can also include the delivery ID so when the delivery service consumes this information you can be",
    "start": "1702240",
    "end": "1707559"
  },
  {
    "text": "like I know what that delivery ID is go and get that and it can set the right delivery address so you can still keep",
    "start": "1707559",
    "end": "1713559"
  },
  {
    "text": "sparse events but you don't need to really really minimize that down you can include other identifiers as",
    "start": "1713559",
    "end": "1719799"
  },
  {
    "text": "well the other option you've got here is a pattern called the enricher pattern and the enricher pattern allows you to",
    "start": "1719799",
    "end": "1726159"
  },
  {
    "text": "enrich event information as it moves through the system so as a producer you",
    "start": "1726159",
    "end": "1733279"
  },
  {
    "text": "might still publish a sparse event and the vast majority of Downstream consumers might only be interested in",
    "start": "1733279",
    "end": "1739159"
  },
  {
    "text": "that spice event and they're happy with that some Services might need that additional",
    "start": "1739159",
    "end": "1745159"
  },
  {
    "text": "information so you might at the point of publish maybe put that information in a shared location that might be another",
    "start": "1745159",
    "end": "1751399"
  },
  {
    "text": "API that's exposed specifically for these callbacks to protect your main system it could equally be a shared",
    "start": "1751399",
    "end": "1758279"
  },
  {
    "text": "service like Amazon S3 there's the second AWS service name S3 is really good because it's it's scalable it's",
    "start": "1758279",
    "end": "1764279"
  },
  {
    "text": "durable it's available and it's really easy to share information across different accounts different systems so",
    "start": "1764279",
    "end": "1771320"
  },
  {
    "text": "you could potentially drop some data into Amazon S3 put a pointer in your event payload so when a consumer",
    "start": "1771320",
    "end": "1776760"
  },
  {
    "text": "consumes that event they can actually reach out and grab that additional information if they need it but you're protecting your main order processing",
    "start": "1776760",
    "end": "1786080"
  },
  {
    "text": "microservice whichever type of event you choose fat or Spar and you likely have a combination of both at least if you're",
    "start": "1786080",
    "end": "1792360"
  },
  {
    "text": "doing this at scale Embrace that metadata data patch and include a way to have this additional metadata as part of",
    "start": "1792360",
    "end": "1799200"
  },
  {
    "text": "your event so the other word you likely hear a lot as you talk about event of oration",
    "start": "1799200",
    "end": "1804840"
  },
  {
    "text": "I've said it a few times already is the word asynchronous what does it mean to be",
    "start": "1804840",
    "end": "1810760"
  },
  {
    "text": "asynchronous now if you're a developer today who's used to making a method call or a HTTP request this can be a little",
    "start": "1810760",
    "end": "1817960"
  },
  {
    "text": "bit of a paradigm shift I know when I first started building event and systems this took me a little while to get used",
    "start": "1817960",
    "end": "1823600"
  },
  {
    "text": "to because now you're in a place where instead of everything happening in process you're now publishing an event",
    "start": "1823600",
    "end": "1829399"
  },
  {
    "text": "so you might publish your order confirmed event and at some point hopefully potentially maybe later an",
    "start": "1829399",
    "end": "1835679"
  },
  {
    "text": "order cooked event will come back from your kitchen service but you've actually got no way to ever guarantee that the",
    "start": "1835679",
    "end": "1841159"
  },
  {
    "text": "order confirmed event ever makes it to the kitchen service it's not something that's your responsibility you don't need to Cur but",
    "start": "1841159",
    "end": "1847240"
  },
  {
    "text": "obviously the business cures the person who's ordered the pizza cures about that and this is the problem here with",
    "start": "1847240",
    "end": "1854919"
  },
  {
    "text": "consistency and with consistency you've got two types of consisten you've got strong consistency and eventual",
    "start": "1854919",
    "end": "1861919"
  },
  {
    "text": "consistency and I want to try and explain the difference between the both using the pizza restaurant so you only",
    "start": "1861919",
    "end": "1867399"
  },
  {
    "text": "put them imagination hats on again imagine you've placed your order and you're going down to the pizza restaurant to pick it up you're going to",
    "start": "1867399",
    "end": "1873039"
  },
  {
    "text": "collect this order you walk in walk into the pizza restaurant the smell hits you in the face Pizza is amazing you can",
    "start": "1873039",
    "end": "1879519"
  },
  {
    "text": "almost taste it you can see the pizza's being made sometimes I give this example just before lunch and people like",
    "start": "1879519",
    "end": "1884639"
  },
  {
    "text": "literally zone out at this point a pizza so you're there you're waiting to pick your pizza up you're hungry and you what",
    "start": "1884639",
    "end": "1891440"
  },
  {
    "text": "you need to do first you need to pay for that order right and you've got two options when you come to paying for your",
    "start": "1891440",
    "end": "1897399"
  },
  {
    "text": "order one slightly more common than the other nowadays the first option you have is to pay with cash you can take out",
    "start": "1897399",
    "end": "1902600"
  },
  {
    "text": "your purse or your wallet you can take the cash out cash out hand it over to the cashier they'll take that money put",
    "start": "1902600",
    "end": "1908279"
  },
  {
    "text": "it in the tail you get your pizzas and you go anywh and that's an example of a strongly consistent transaction because",
    "start": "1908279",
    "end": "1914399"
  },
  {
    "text": "at that point you can absolutely guarantee that that money has changed hands because the money is sat in the",
    "start": "1914399",
    "end": "1920200"
  },
  {
    "text": "till and if that was to fail for whatever reason let's say you're here in London and you try and play pay with I",
    "start": "1920200",
    "end": "1925519"
  },
  {
    "text": "don't know dollars you're likely going to get that money back and you have to retry you'll have to go again this is",
    "start": "1925519",
    "end": "1930840"
  },
  {
    "text": "what you used to if you're doing request response style communication the other option you have when you pay is to pay with your",
    "start": "1930840",
    "end": "1939279"
  },
  {
    "text": "card and when you make a card transaction all you're doing is making a theoretical guarantee that at some point",
    "start": "1939279",
    "end": "1945360"
  },
  {
    "text": "in the future that money is going to move from your bank account to their bank account I'm sure you've all been",
    "start": "1945360",
    "end": "1951200"
  },
  {
    "text": "there where you've paid for something you paid for your pizza you've got your phone out onto your bank statement and the money is not actually shown up yet",
    "start": "1951200",
    "end": "1956840"
  },
  {
    "text": "and you walk out thinking yes free pizza look at that amazing and eventually some point sometime later that money will",
    "start": "1956840",
    "end": "1963159"
  },
  {
    "text": "eventually move over to the the pizza restaurant's account now that is an eventually consistent thing that's",
    "start": "1963159",
    "end": "1969679"
  },
  {
    "text": "happening eventually that money is going to change happen but it isn't and I don't know if you caught Sam Newman's talk yesterday but I actually like a",
    "start": "1969679",
    "end": "1975399"
  },
  {
    "text": "phrase he used which was eventual convergence instead of eventual con consistency",
    "start": "1975399",
    "end": "1980720"
  },
  {
    "text": "eventually over time these systems will Converge on the same view of the world providing people stop publishing",
    "start": "1980720",
    "end": "1987600"
  },
  {
    "text": "events and one thing you'll need to do with event different architecture is just to embrace eventual consistency",
    "start": "1987600",
    "end": "1992760"
  },
  {
    "text": "this is one of the tradeoffs you have to make when you're building event and systems is you need to embrace this",
    "start": "1992760",
    "end": "1998279"
  },
  {
    "text": "eventually consistent way of looking at the world so now everything's fantastic",
    "start": "1998279",
    "end": "2003799"
  },
  {
    "text": "you've implemented an event of an architecture at the pizza restaurant events of flying around everything's",
    "start": "2003799",
    "end": "2008960"
  },
  {
    "text": "Loosely coupled things are wonderful until of course something changes because it always changes and what",
    "start": "2008960",
    "end": "2015919"
  },
  {
    "text": "actually happens now is your Business Leaders come along and they say you know that loyalty Point service that you spent so much time building you put all",
    "start": "2015919",
    "end": "2022320"
  },
  {
    "text": "that Blood Sweat and Tears into we want to get rid of that now we're going to replace it with a SAS product get rid of",
    "start": "2022320",
    "end": "2027360"
  },
  {
    "text": "that we don't need that we don't want to build this custom we want to use something that somebody else has built and this causes your event driven",
    "start": "2027360",
    "end": "2034279"
  },
  {
    "text": "way of building a problem because this third party SAS product isn't event driven it exposes a HTTP API and that's",
    "start": "2034279",
    "end": "2042240"
  },
  {
    "text": "what you kind of wanted to get get away from right so how do you handle this kind of HTTP Communication in an event",
    "start": "2042240",
    "end": "2048919"
  },
  {
    "text": "driven world because you're likely going to see that somewhere whether that be a third party API or another system inside",
    "start": "2048919",
    "end": "2055280"
  },
  {
    "text": "your organization and the way I like to think about this is that you would still have an event driven microservice managing",
    "start": "2055280",
    "end": "2062040"
  },
  {
    "text": "this communication you would still have a loyalty Point service and the team building that loyalty Point service is",
    "start": "2062040",
    "end": "2068520"
  },
  {
    "text": "in charge of managing that integration right what that might look like is",
    "start": "2068520",
    "end": "2074000"
  },
  {
    "text": "something like this so you've still got your event bus you've still got your order completed event hitting the event",
    "start": "2074000",
    "end": "2079440"
  },
  {
    "text": "bus and then you've got a service that's only job is to take that event and translate that into something that the",
    "start": "2079440",
    "end": "2085679"
  },
  {
    "text": "loyal Point service can understand that third party API make the call to the third party API the response comes back",
    "start": "2085679",
    "end": "2091599"
  },
  {
    "text": "and then you might publish another event a loyalty points added event now you'll notice here that I've put a Que in the",
    "start": "2091599",
    "end": "2097720"
  },
  {
    "text": "middle here and this is important if you think back to Gregor's quote from the start the appropriate amount of coupling",
    "start": "2097720",
    "end": "2104200"
  },
  {
    "text": "depend on the level of control you have and you now have no control over this third party API you don't control the up",
    "start": "2104200",
    "end": "2110040"
  },
  {
    "text": "time you don't control the slas the throughput the rate limits so introducing this queensu as",
    "start": "2110040",
    "end": "2116520"
  },
  {
    "text": "you can keep this amount of durability the event the order completed event can hit the event bus come through into a",
    "start": "2116520",
    "end": "2121920"
  },
  {
    "text": "queue and you can work off that queue and process to the third party API as of",
    "start": "2121920",
    "end": "2127000"
  },
  {
    "text": "when you need to another really useful place for this pattern is as you have teams in your",
    "start": "2127000",
    "end": "2133240"
  },
  {
    "text": "organization who are starting to adopt event of an architecture they're kind of interested they want to start doing it",
    "start": "2133240",
    "end": "2138599"
  },
  {
    "text": "but they're not quite ready to get rid of their ASP net web API is running on containers they just love them so much",
    "start": "2138599",
    "end": "2144400"
  },
  {
    "text": "so what you can do is you can still have that web application that exposes a hdtpm point but you can allow teams to take",
    "start": "2144400",
    "end": "2151520"
  },
  {
    "text": "these small baby steps into the event Ren world to start building a pattern like this they can get used to reac into",
    "start": "2151520",
    "end": "2158599"
  },
  {
    "text": "events but yet the core bit of their system is still hat TTP based and they can just pass that event on it's really",
    "start": "2158599",
    "end": "2164560"
  },
  {
    "text": "nice step into the system so this gives us now a way to",
    "start": "2164560",
    "end": "2170240"
  },
  {
    "text": "integrate with things that aren't necessarily A venten we can integrate with these HTP based",
    "start": "2170240",
    "end": "2175680"
  },
  {
    "text": "systems what happens in Advent of architecture when things go wrong who's ever had a system break for a reason",
    "start": "2175680",
    "end": "2182400"
  },
  {
    "text": "that they didn't even know was possible yeah hopefully every single hand they haven't I want to speak to you",
    "start": "2182400",
    "end": "2188760"
  },
  {
    "text": "afterwards because I want to know how you found out what crystal ball do you have and this is where observability is",
    "start": "2188760",
    "end": "2193839"
  },
  {
    "text": "really important and obviously observability is really important in every single type of system that you build you need to understand what's",
    "start": "2193839",
    "end": "2200319"
  },
  {
    "text": "going on inside your system but with an event driven system it gets really",
    "start": "2200319",
    "end": "2205680"
  },
  {
    "text": "tricky to understand cause and effect because when you've got request response style Communication Service a",
    "start": "2205680",
    "end": "2211560"
  },
  {
    "text": "calls service B and service B responds you can kind of see that that's happening but in an event system you're just publishing an event and at some",
    "start": "2211560",
    "end": "2218240"
  },
  {
    "text": "point someone might maybe be interested in consuming that event so you want to",
    "start": "2218240",
    "end": "2223440"
  },
  {
    "text": "keep your system observable you want to be able to understand this cause and effect and a really simple way to ensure",
    "start": "2223440",
    "end": "2229720"
  },
  {
    "text": "you can do that is just to revisit that metadata data pattern from earlier and we'll just make a small change to it",
    "start": "2229720",
    "end": "2236760"
  },
  {
    "text": "we're going to add two additional properties a trace parent and a parent span this assumes the use of open",
    "start": "2236760",
    "end": "2242960"
  },
  {
    "text": "Telemetry here if you aren't using open Telemetry then you this could equally just be a correlation ID some common",
    "start": "2242960",
    "end": "2249160"
  },
  {
    "text": "identifier that always gets passed as part of the event payLo and what this allows you to do is",
    "start": "2249160",
    "end": "2256200"
  },
  {
    "text": "it allows you to continue this Trace allows you to link these traces together allows you to understand cause and",
    "start": "2256200",
    "end": "2262760"
  },
  {
    "text": "effect more easily of course in your consumers you still need to handle all this fact you need to handle the fact that maybe that Trace doesn't exist",
    "start": "2262760",
    "end": "2269119"
  },
  {
    "text": "anymore potentially but at least it allows you to give the possibility to",
    "start": "2269119",
    "end": "2274480"
  },
  {
    "text": "determine cause and effect so again just here's another example of being really intentional with",
    "start": "2274480",
    "end": "2280400"
  },
  {
    "text": "how you design the schemas of your events if there's one takeway from this talk that is it be intentional about the",
    "start": "2280400",
    "end": "2286000"
  },
  {
    "text": "way you design your events so let's talk about boundaries now what happens at the edges of a",
    "start": "2286000",
    "end": "2291960"
  },
  {
    "text": "system because surely at some point in any event Ren system you're going to need a request response somewhere right",
    "start": "2291960",
    "end": "2297160"
  },
  {
    "text": "that might be a mobile client that might be a web browser so how can you actually manage",
    "start": "2297160",
    "end": "2303480"
  },
  {
    "text": "that how can you manage these calls from external systems that might not be event driven in an event different way and I'm",
    "start": "2303480",
    "end": "2309480"
  },
  {
    "text": "a really big fan of having these really thin actual synchronous API layers at the boundaries of a system so you might",
    "start": "2309480",
    "end": "2315760"
  },
  {
    "text": "have a really thin order API that takes that request in the create order request does a little bit of validation stores",
    "start": "2315760",
    "end": "2322839"
  },
  {
    "text": "that request in a database of some kind and then goes on and publishes the event to the event bus and then you have your Downstream",
    "start": "2322839",
    "end": "2330119"
  },
  {
    "text": "consumers who then reacting to that event and all of the functionality is happening asynchronously your business",
    "start": "2330119",
    "end": "2336560"
  },
  {
    "text": "your events are driving your business functionality remember now what happens here for your get order request though because if all",
    "start": "2336560",
    "end": "2343880"
  },
  {
    "text": "this stuff is happening asynchronously in the background and then somebody wants to check the status of the order",
    "start": "2343880",
    "end": "2348920"
  },
  {
    "text": "I'm sat at home really impatiently refreshing the screen trying and work out where my pizza is how do I",
    "start": "2348920",
    "end": "2354119"
  },
  {
    "text": "understand the latest state of the world because everything's happening gay synchron to member and this is where we need to make",
    "start": "2354119",
    "end": "2360400"
  },
  {
    "text": "a distinction between commands events and queries the three different things you are likely to see in any system and",
    "start": "2360400",
    "end": "2367680"
  },
  {
    "text": "commands and events are kind of similar really they're both going to cause something to happen the difference is",
    "start": "2367680",
    "end": "2374960"
  },
  {
    "text": "really mostly just a statement of intent with a command I'm telling you can you do this thing for me please whereas with",
    "start": "2374960",
    "end": "2381440"
  },
  {
    "text": "an event I'm just reacting to something that has happened and then a query is me asking",
    "start": "2381440",
    "end": "2388079"
  },
  {
    "text": "for a specific piece of data a specific view of the world can you tell me the status of this order please order",
    "start": "2388079",
    "end": "2394839"
  },
  {
    "text": "processing API so to you visit the same example again the command comes in to create the",
    "start": "2394839",
    "end": "2400280"
  },
  {
    "text": "order that's the web client or the mobile client saying can you create this order for me please the event gets",
    "start": "2400280",
    "end": "2406280"
  },
  {
    "text": "published to the event BS the downstream functionality starts happening and then eventually your Downstream systems will",
    "start": "2406280",
    "end": "2411560"
  },
  {
    "text": "publish an event when they're finished with their work so the kitchen will publish an order prepared",
    "start": "2411560",
    "end": "2416800"
  },
  {
    "text": "event and all you need to do to make sure you can update your view of the world is just to add some kind of",
    "start": "2416800",
    "end": "2422119"
  },
  {
    "text": "service inside your AUD processing service that's interested in these events that Downstream systems are",
    "start": "2422119",
    "end": "2427720"
  },
  {
    "text": "publishing so you hook into that order prepared event and although you're not going to trigger any functionality off",
    "start": "2427720",
    "end": "2433520"
  },
  {
    "text": "the back of that you're still interested in it because then you can just update the status of the order in your",
    "start": "2433520",
    "end": "2439920"
  },
  {
    "text": "database and this allows you to keep this common view of the world as events are happening in the background",
    "start": "2439920",
    "end": "2447520"
  },
  {
    "text": "asynchronously I want to quickly discuss the idea of asynchronous commands so although event driven",
    "start": "2447520",
    "end": "2453520"
  },
  {
    "text": "systems typically everything is an event and this might offend some of the event driven purists in the world but",
    "start": "2453520",
    "end": "2459040"
  },
  {
    "text": "sometimes you might also want to process a command asynchronously so let's imagine the",
    "start": "2459040",
    "end": "2464440"
  },
  {
    "text": "scenario where your order processing service needs to send an email send an email saying hey here's your order details or the receipt of",
    "start": "2464440",
    "end": "2470839"
  },
  {
    "text": "your order whatever that might be and you could build that in a HTTP based request response style communication so",
    "start": "2470839",
    "end": "2476720"
  },
  {
    "text": "the order processing service makes a call to the email notification service can you send this email please and a response comes",
    "start": "2476720",
    "end": "2482760"
  },
  {
    "text": "back but actually is this really what you want to do should the order",
    "start": "2482760",
    "end": "2488319"
  },
  {
    "text": "processing service be blocked whilst an email is being sent probably not so you probably want this",
    "start": "2488319",
    "end": "2494319"
  },
  {
    "text": "to be non-blocking communication but actually you still want to say I want to send an email you",
    "start": "2494319",
    "end": "2499760"
  },
  {
    "text": "could equally implement this in a completely event way so the AUD processing service publishes an already confirmed event the email notification",
    "start": "2499760",
    "end": "2506599"
  },
  {
    "text": "service is interested in that event and it uses that to then go and send an email but actually is this responsibility right because now the",
    "start": "2506599",
    "end": "2514319"
  },
  {
    "text": "email service needs to understand and what should go into that email what's the",
    "start": "2514319",
    "end": "2519920"
  },
  {
    "text": "subject what's the body and is that is that right is that responsibility right should it not be the order processing",
    "start": "2519920",
    "end": "2525640"
  },
  {
    "text": "Services responsibility to determine what actually goes in that email and the email service is just there to send",
    "start": "2525640",
    "end": "2531680"
  },
  {
    "text": "emails out however it does that so you kind of want this to be a command you want this to be I want you to send an",
    "start": "2531680",
    "end": "2537760"
  },
  {
    "text": "email but you might not necessarily want it to be completely request response you might not want it to be blocking so you",
    "start": "2537760",
    "end": "2544319"
  },
  {
    "text": "can do this in a similar way your your email service can still export was an endo of some kind but as opposed to that",
    "start": "2544319",
    "end": "2550960"
  },
  {
    "text": "being a HTTP based endpoint that could just be a message Channel this might be",
    "start": "2550960",
    "end": "2556079"
  },
  {
    "text": "a topic this might be a Quee doesn't really matter but it's asynchronous so the order processing",
    "start": "2556079",
    "end": "2562000"
  },
  {
    "text": "service can still send a send email command I want you to send an email for me please and in the payload of that",
    "start": "2562000",
    "end": "2567720"
  },
  {
    "text": "event it will include the two the from the subject the body that kind of common things you will see in an email you'll",
    "start": "2567720",
    "end": "2574160"
  },
  {
    "text": "notice interestingly in the metadata property if you can see that I've also got a response Channel I've",
    "start": "2574160",
    "end": "2579599"
  },
  {
    "text": "got one more additional property in that metadata section and that response channel is what allows you to build this",
    "start": "2579599",
    "end": "2586720"
  },
  {
    "text": "request response Communication in an asynchronous way because now your email service can process that request send",
    "start": "2586720",
    "end": "2593599"
  },
  {
    "text": "the email and after it sent the email it knows where to send a response back to and it can send a response back to that",
    "start": "2593599",
    "end": "2599160"
  },
  {
    "text": "response Channel within the AUD processing service now in the case of an email you might not necessarily want to",
    "start": "2599160",
    "end": "2605040"
  },
  {
    "text": "do that you might not C about a response but this is a way you can start to do request response in a way that isn't necessarily",
    "start": "2605040",
    "end": "2612839"
  },
  {
    "text": "blocking now of course in some cases you probably will want blocking communication if you're taking a payment",
    "start": "2612839",
    "end": "2619760"
  },
  {
    "text": "for example you're going to want to know that that payment has happened before you send somebody a pizza but in a lot",
    "start": "2619760",
    "end": "2625880"
  },
  {
    "text": "of cases it might not necessarily need to be",
    "start": "2625880",
    "end": "2631079"
  },
  {
    "text": "synchronous so we've introduced commands events queries we' introduced some of",
    "start": "2631079",
    "end": "2636400"
  },
  {
    "text": "these different ideas and there's one more pattern I want to introduce you to now that plays really nicely with event",
    "start": "2636400",
    "end": "2642200"
  },
  {
    "text": "of architecture and to be absolutely clear before I put it on screen this is not a prerequisite of building event of",
    "start": "2642200",
    "end": "2647839"
  },
  {
    "text": "architectures you don't do not need to be using this pattern to build with Eda and that pattern is command query",
    "start": "2647839",
    "end": "2654760"
  },
  {
    "text": "responsibility segregation or cqrs who is familiar with cqrs who use",
    "start": "2654760",
    "end": "2660480"
  },
  {
    "text": "cqrs hands everywhere awesome I can fly through this and we can all go and get a coffee then um so in cqrs you split your",
    "start": "2660480",
    "end": "2667160"
  },
  {
    "text": "your system into two completely independent Services one for processing",
    "start": "2667160",
    "end": "2673119"
  },
  {
    "text": "commands one for handling queries so the create order request will come in to your order API that will do a little bit",
    "start": "2673119",
    "end": "2679880"
  },
  {
    "text": "of validation maybe store that in an orders database and Publishing an event to an event bus all your Downstream",
    "start": "2679880",
    "end": "2686359"
  },
  {
    "text": "consumers are interested in that event and your query system will also be interested in these events that are",
    "start": "2686359",
    "end": "2693040"
  },
  {
    "text": "happening and it will use that to update its view of the world so here is this",
    "start": "2693040",
    "end": "2698599"
  },
  {
    "text": "specific view that people can then query so let's start to bring all of this together now bring together this",
    "start": "2698599",
    "end": "2704760"
  },
  {
    "text": "entire order processing floww so the create order request comes into the order processing command service I've",
    "start": "2704760",
    "end": "2711400"
  },
  {
    "text": "not yet thought of a better name for that but that's what it's going to be for now and that service will publish an order confirmed event that order",
    "start": "2711400",
    "end": "2717960"
  },
  {
    "text": "confirmed event your kitchen service is interested in that because it's you know needs to know what needs to when that",
    "start": "2717960",
    "end": "2723599"
  },
  {
    "text": "happens it needs to know it needs to place the order or create the order but actually your quivy system is also",
    "start": "2723599",
    "end": "2729160"
  },
  {
    "text": "interested in that order confirmed event and it uses that to update the status of the order in the quy database once the",
    "start": "2729160",
    "end": "2735160"
  },
  {
    "text": "order's been created the order prepared event gets published the delivery service is now interested in that order",
    "start": "2735160",
    "end": "2740319"
  },
  {
    "text": "prepared event because it can now go and deliver the order and again your query service is also interested in that order",
    "start": "2740319",
    "end": "2747359"
  },
  {
    "text": "prepared event because it then updates its view of the world and it can tell me furiously refreshing my phone that this",
    "start": "2747359",
    "end": "2753400"
  },
  {
    "text": "order is now out for delivery then the get request comes in to actually get the status of the order",
    "start": "2753400",
    "end": "2759400"
  },
  {
    "text": "that's me refreshing my phone and I get the view of where that order is up to and I want to zoom in on this bit of",
    "start": "2759400",
    "end": "2765480"
  },
  {
    "text": "this interaction just for a second so the command comes in it gets validated",
    "start": "2765480",
    "end": "2771319"
  },
  {
    "text": "and the the order data gets stored in the database and then the event gets published after that what happens if that event fails to",
    "start": "2771319",
    "end": "2779680"
  },
  {
    "text": "publish what do you do because now you've got this order in the database but the event fails to publish which",
    "start": "2779680",
    "end": "2785480"
  },
  {
    "text": "means the kitchen's never going to start creating it and you could at this point return an",
    "start": "2785480",
    "end": "2790520"
  },
  {
    "text": "error code to the caller and get the person to try submitting the order again but is that really the right experience for your user is that really the best",
    "start": "2790520",
    "end": "2796559"
  },
  {
    "text": "thing to do and you might have seen an example of this if you've ever tried to pay for an",
    "start": "2796559",
    "end": "2801599"
  },
  {
    "text": "order on Amazon with a card that's expired so you place the order and on",
    "start": "2801599",
    "end": "2806640"
  },
  {
    "text": "the website you get the order number you get an order confirmed page and then a few minutes later you'll get an email",
    "start": "2806640",
    "end": "2812440"
  },
  {
    "text": "that says payment failed please go and update your payment details that is an example of this",
    "start": "2812440",
    "end": "2817920"
  },
  {
    "text": "happening that the request is always received into the system and then at some point later after this Downstream",
    "start": "2817920",
    "end": "2823640"
  },
  {
    "text": "functionality has happened a caller comes back so this is something that you need to work with you need to handle this fact that a request can come in but",
    "start": "2823640",
    "end": "2830240"
  },
  {
    "text": "the event might not necessarily be published and there's a couple of ways you can handle that the first is using",
    "start": "2830240",
    "end": "2836319"
  },
  {
    "text": "the outbox pattern a transactional outbox pattern so with an outbox pattern",
    "start": "2836319",
    "end": "2841839"
  },
  {
    "text": "at the point you write the data to the main database you write the order data you all o write the data to a secondary",
    "start": "2841839",
    "end": "2848640"
  },
  {
    "text": "table could be called outbox something like that and you wrap that whole thing in a transaction so that if one fails",
    "start": "2848640",
    "end": "2855440"
  },
  {
    "text": "the other one won't happen either then you can have a SE separate piece of functionality working off the",
    "start": "2855440",
    "end": "2861640"
  },
  {
    "text": "back of that outbox table that's picking up all the data that hasn't yet been published all the events that haven't yet been published and then Distributing",
    "start": "2861640",
    "end": "2868880"
  },
  {
    "text": "them out to the event bus this works really well but it",
    "start": "2868880",
    "end": "2874520"
  },
  {
    "text": "doesn't mean that you need to manage two separate tables which you've now got your main table and you've got an outbox table and you'll need to manage that",
    "start": "2874520",
    "end": "2880000"
  },
  {
    "text": "outbox table because it will just grow and grow and grow and grow you need to be clearing it down so an alternate",
    "start": "2880000",
    "end": "2885720"
  },
  {
    "text": "option that I found works really well is to use change data capture providing you use a database that supports change data",
    "start": "2885720",
    "end": "2893160"
  },
  {
    "text": "capture and what change data capture allows you to do is to react to the stream of changes that are coming out of",
    "start": "2893160",
    "end": "2898559"
  },
  {
    "text": "your database so as a record is written to the database you can stream that you can react to that and you can publish Events off the",
    "start": "2898559",
    "end": "2905680"
  },
  {
    "text": "back of that if you're using a service like Amazon Dynamo DB third AWS service name then you could turn on Dynamo DB",
    "start": "2905680",
    "end": "2913280"
  },
  {
    "text": "streams and just react to that stream of changes in your database and you can use that to publish",
    "start": "2913280",
    "end": "2920760"
  },
  {
    "text": "events so to kind of stitch this all all together now with cqrs so you've got the request coming in the command coming",
    "start": "2920760",
    "end": "2926599"
  },
  {
    "text": "into your order processing service that's a random Arrow you've then got that being stored in your main order",
    "start": "2926599",
    "end": "2932359"
  },
  {
    "text": "database you're using a transactional outbox pattern or change data capture to stream out to some kind of publisher",
    "start": "2932359",
    "end": "2937920"
  },
  {
    "text": "that's then publishing the event to the event bus your query service is hooked up to that event bus creating its own",
    "start": "2937920",
    "end": "2945720"
  },
  {
    "text": "view of the world a specific view for a specific use case so when the get request comes in it can do something",
    "start": "2945720",
    "end": "2951720"
  },
  {
    "text": "specific with that and where this gets really powerful is that it's the command",
    "start": "2951720",
    "end": "2956839"
  },
  {
    "text": "database the database on the left there that's the source of Truth for your system that's the real that's the real",
    "start": "2956839",
    "end": "2963640"
  },
  {
    "text": "database the query service is just a view a project ction and this allows you to get some really nice optimizations",
    "start": "2963640",
    "end": "2969160"
  },
  {
    "text": "because you can then optimize the format of that data that data structure in a way that suits that specific get request",
    "start": "2969160",
    "end": "2977119"
  },
  {
    "text": "so you'll see here that that table on the right only has the status the value and the item count because that's what",
    "start": "2977119",
    "end": "2982680"
  },
  {
    "text": "the viewing the UI needs it only needs that information so let's store it in that way and equally you could also use a",
    "start": "2982680",
    "end": "2990040"
  },
  {
    "text": "data provider like reddis you could use a cache to store this data because remember it's the command database",
    "start": "2990040",
    "end": "2996960"
  },
  {
    "text": "that's the source of Truth and that can allow you to get really performant reads if you take this to the absolute",
    "start": "2996960",
    "end": "3003359"
  },
  {
    "text": "extreme you could store that query view in memory in your application to give",
    "start": "3003359",
    "end": "3008880"
  },
  {
    "text": "you incredibly performant read now of course there's some whole other challenges that you need to deal with there come and talk to me about them",
    "start": "3008880",
    "end": "3014359"
  },
  {
    "text": "afterwards if you want to do that but let's start to wrap this up a little bit now if you're listening to this talk and",
    "start": "3014359",
    "end": "3020680"
  },
  {
    "text": "you're sat there thinking this sounds amazing James but I'm so far away from potentially building event of an",
    "start": "3020680",
    "end": "3026160"
  },
  {
    "text": "architecture where exactly do I start and my recommendation there would",
    "start": "3026160",
    "end": "3031440"
  },
  {
    "text": "just be to start small don't try and rewrite your entire",
    "start": "3031440",
    "end": "3036480"
  },
  {
    "text": "system immediately to use event driven architecture pick a small part of it and then start to build that out in a more",
    "start": "3036480",
    "end": "3042200"
  },
  {
    "text": "event driven way and you can even if you're building a monolith if you're building something more monolithic today you can still talk to use messaging",
    "start": "3042200",
    "end": "3049240"
  },
  {
    "text": "inside a monolithic application if you're building a modular monolith you could have the communication between your modules use messages and then when",
    "start": "3049240",
    "end": "3056319"
  },
  {
    "text": "you start to break this apart you have that messaging communication event based communication already",
    "start": "3056319",
    "end": "3063160"
  },
  {
    "text": "happening because remember introducing events into your system is really powerful because event driven",
    "start": "3063160",
    "end": "3068319"
  },
  {
    "text": "architecture is fundamentally a communication pattern a way of modeling integration between",
    "start": "3068319",
    "end": "3074480"
  },
  {
    "text": "systems and that's both the technical integration the technical communication between services but also the human",
    "start": "3074480",
    "end": "3082280"
  },
  {
    "text": "communication about your services one of the hardest things in soft development is communication the language that you",
    "start": "3082280",
    "end": "3089799"
  },
  {
    "text": "use to talk about a system between Technical and business people and remember it's language and words that",
    "start": "3089799",
    "end": "3095000"
  },
  {
    "text": "sets us apart as humans and whilst at least for the moment software development is still a",
    "start": "3095000",
    "end": "3101079"
  },
  {
    "text": "human endeavor using the right words and languages to talk about and build your",
    "start": "3101079",
    "end": "3106160"
  },
  {
    "text": "system is incredibly incredibly powerful if you want to have any",
    "start": "3106160",
    "end": "3112160"
  },
  {
    "text": "questions and you want to continue this conversation I will hang around here for a little bit afterwards I'll also down on the Booth down in the main conference",
    "start": "3112160",
    "end": "3118200"
  },
  {
    "text": "Hall please reach out on social media if you want to chat I'd love to hear your feedback this is actually my first time doing this specific talk so I'd love to",
    "start": "3118200",
    "end": "3124880"
  },
  {
    "text": "hear your feedback on that I do have a YouTube channel where I publish a lot of content there and the final thing I'll",
    "start": "3124880",
    "end": "3130400"
  },
  {
    "text": "say is that ndc's in a fantastic conference and there's a lots and lots of amazing speakers here so I am genuinely grateful that you've all come",
    "start": "3130400",
    "end": "3137240"
  },
  {
    "text": "to listen to me talk this morning thank you all for listening",
    "start": "3137240",
    "end": "3143920"
  }
]