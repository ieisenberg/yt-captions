[
  {
    "start": "0",
    "end": "235000"
  },
  {
    "text": "are we good to go alright hello everybody I'm a beyond fella I'm here to",
    "start": "3100",
    "end": "10690"
  },
  {
    "text": "talk to you about higher-order functions for ordinary C++ developers a little bit",
    "start": "10690",
    "end": "16510"
  },
  {
    "text": "of background I live and work in Stockholm in Sweden spent most of my",
    "start": "16510",
    "end": "22240"
  },
  {
    "text": "career developing embedded software for communications devices of various kinds",
    "start": "22240",
    "end": "28770"
  },
  {
    "text": "I wanted to do a talk about higher-order functions for some time because they",
    "start": "28770",
    "end": "36190"
  },
  {
    "text": "aren't used by simplifies developers much that they there's really good historical reasons for that it's not",
    "start": "36190",
    "end": "42460"
  },
  {
    "text": "been convenient to do so for a long time before I get going that I I just have to",
    "start": "42460",
    "end": "50550"
  },
  {
    "text": "tell you a short story about my trip here that's pertaining to my choice of",
    "start": "50550",
    "end": "55870"
  },
  {
    "text": "t-shirt today as was onboard the plane",
    "start": "55870",
    "end": "61179"
  },
  {
    "text": "from from Stockholm we were pushed out from from the gate and started taxiing after a few minutes of taxiing the plane",
    "start": "61179",
    "end": "68320"
  },
  {
    "text": "stopped and we stood still for several minutes the captain announced that yeah",
    "start": "68320",
    "end": "74860"
  },
  {
    "text": "we have some malfunction indication here but we we've been communicating with the technicians that they say it should",
    "start": "74860",
    "end": "81520"
  },
  {
    "text": "probably be okay if we reboot the system and after another five minutes or so the",
    "start": "81520",
    "end": "89439"
  },
  {
    "text": "captain announced yeah it's all green now so we're good to go so that feels great but it wasn't more than 10-15",
    "start": "89439",
    "end": "97990"
  },
  {
    "text": "minutes late here to Oslo so everything worked out so yeah trust me I'm a",
    "start": "97990",
    "end": "103299"
  },
  {
    "text": "programmer a higher-order functions what",
    "start": "103299",
    "end": "109689"
  },
  {
    "text": "is higher-order functions this is a little bit of what I'm going to talk about today",
    "start": "109689",
    "end": "115710"
  },
  {
    "text": "very very very brief introduction and then I'm going to sort of explaining by",
    "start": "115710",
    "end": "122799"
  },
  {
    "text": "doing gradually expanding an example and by the way I do want you to interrupt me",
    "start": "122799",
    "end": "128800"
  },
  {
    "text": "ask questions come with reflections throw things maybe not several things but whatever",
    "start": "128800",
    "end": "134950"
  },
  {
    "text": "so we can get a communication going",
    "start": "134950",
    "end": "139560"
  },
  {
    "text": "after this expanding example I'm going to introduce you to optional which is a",
    "start": "140340",
    "end": "149319"
  },
  {
    "text": "cool thing and an extension of it that makes it even cooler and then working",
    "start": "149319",
    "end": "154390"
  },
  {
    "text": "with overloads which can actually be a little bit tricky in C++ so without",
    "start": "154390",
    "end": "161950"
  },
  {
    "text": "further ado a higher-order function this is the definition you can find it in",
    "start": "161950",
    "end": "167350"
  },
  {
    "text": "many places a higher order function is a function that takes other functions as",
    "start": "167350",
    "end": "172720"
  },
  {
    "text": "arguments or returns a function as a result a copied and pasted this from the",
    "start": "172720",
    "end": "181360"
  },
  {
    "text": "husk of documentation so it's should have some homeopathic memory of extra truth to it so let's let that sink in",
    "start": "181360",
    "end": "187750"
  },
  {
    "text": "for a while and then of you used",
    "start": "187750",
    "end": "193600"
  },
  {
    "text": "higher-order functions from this definition yeah okay most of you not everybody have you've written them a few go don't",
    "start": "193600",
    "end": "205120"
  },
  {
    "text": "come up and do the top for me instead",
    "start": "205120",
    "end": "208319"
  },
  {
    "text": "for the purpose of the context of this talk we're not when I say a function I",
    "start": "211410",
    "end": "217180"
  },
  {
    "text": "mean anything that can be called it doesn't have to be a function in the C sense of a function it can be alarmed",
    "start": "217180",
    "end": "222880"
  },
  {
    "text": "that can be an object with a function call operator defined or it can be a",
    "start": "222880",
    "end": "231100"
  },
  {
    "text": "static member function or what have you some things that can be called so here's",
    "start": "231100",
    "end": "237310"
  },
  {
    "start": "235000",
    "end": "745000"
  },
  {
    "text": "an example stood none of one of many higher-order functions in the standard",
    "start": "237310",
    "end": "243670"
  },
  {
    "text": "library so we say if none of the values in in in the vector V are equal to zero",
    "start": "243670",
    "end": "252280"
  },
  {
    "text": "then something so we call none of with the lambda that is a function so none of",
    "start": "252280",
    "end": "259390"
  },
  {
    "text": "this higher-order function it takes a function as an argument",
    "start": "259390",
    "end": "264390"
  },
  {
    "text": "those of you who haven't written any higher order functions before ever",
    "start": "265070",
    "end": "270530"
  },
  {
    "text": "here's the typical implementation normally that it makes very little sense",
    "start": "270530",
    "end": "275550"
  },
  {
    "text": "to implement non-optical system library does it but if you were to implement it this is how you do ET they're often very",
    "start": "275550",
    "end": "284580"
  },
  {
    "text": "often templates so this one is attempted that takes it read the title and a",
    "start": "284580",
    "end": "289620"
  },
  {
    "text": "predicate and you have the classic loop over the range and if the predicate is",
    "start": "289620",
    "end": "297510"
  },
  {
    "text": "true then obviously at least one of the values in the range is trivet so none of these false will return false in that",
    "start": "297510",
    "end": "303990"
  },
  {
    "text": "case and if we exhaust the entire range without the predicate triggering then it",
    "start": "303990",
    "end": "310770"
  },
  {
    "text": "is true none of them were true so that is really how you write it",
    "start": "310770",
    "end": "316470"
  },
  {
    "text": "you you can be extremely fancy if you want to if you really want to show how",
    "start": "316470",
    "end": "322430"
  },
  {
    "text": "enormously good your with veenai trickery and whatever but the standard",
    "start": "322430",
    "end": "328590"
  },
  {
    "text": "library doesn't so generally speaking don't bother so it's not really very",
    "start": "328590",
    "end": "337320"
  },
  {
    "text": "complicated so we can use is so we have",
    "start": "337320",
    "end": "343260"
  },
  {
    "text": "some other the the program expands we call another higher-order functions did",
    "start": "343260",
    "end": "349890"
  },
  {
    "text": "any off so while any of the values in the range equals num then go on keep",
    "start": "349890",
    "end": "356940"
  },
  {
    "text": "looping and I find this code extremely",
    "start": "356940",
    "end": "363330"
  },
  {
    "text": "annoying any idea what is so annoying",
    "start": "363330",
    "end": "368730"
  },
  {
    "text": "with this code it's in boldface",
    "start": "368730",
    "end": "374990"
  },
  {
    "text": "the two lambda the same more or less it's the same lambda again twice I hate",
    "start": "376960",
    "end": "385669"
  },
  {
    "text": "that also even though this is not these are not very complicated lambdas you",
    "start": "385669",
    "end": "392030"
  },
  {
    "text": "understand what these means but but you have to read them to understand what they do so I want to do something about",
    "start": "392030",
    "end": "399560"
  },
  {
    "text": "that so let's remove the acceptor what can we do to to give this a name instead",
    "start": "399560",
    "end": "405259"
  },
  {
    "text": "to express intent I can make it a",
    "start": "405259",
    "end": "411289"
  },
  {
    "text": "function C plus 14 gave us the auto",
    "start": "411289",
    "end": "418310"
  },
  {
    "text": "return type which makes it easy to return lambdas and by doing that we we",
    "start": "418310",
    "end": "429560"
  },
  {
    "text": "can capture the intent in something that we say we call this function equals with a number we return a lambda using the",
    "start": "429560",
    "end": "438110"
  },
  {
    "text": "auto return type that captures this this number that we gave and returns true if",
    "start": "438110",
    "end": "443240"
  },
  {
    "text": "when called the value equals the number we get and at this point someone usually",
    "start": "443240",
    "end": "450319"
  },
  {
    "text": "asks what about stead function can't we do that and yeah we we can there are",
    "start": "450319",
    "end": "461479"
  },
  {
    "text": "problems with function at this level is",
    "start": "461479",
    "end": "467539"
  },
  {
    "text": "not really problematic unless you're really really really fine",
    "start": "467539",
    "end": "475580"
  },
  {
    "text": "performers to be important to you because that function has quite some overhead but there is a conceptual",
    "start": "475580",
    "end": "482719"
  },
  {
    "text": "problem also that we'll get to very very soon because obviously you don't want your of higher-order function in this",
    "start": "482719",
    "end": "489380"
  },
  {
    "text": "case to be specialized for inseong it you want to be able to match anything so",
    "start": "489380",
    "end": "496880"
  },
  {
    "text": "I want to say equals whatever something that can be",
    "start": "496880",
    "end": "504010"
  },
  {
    "text": "quality compared and simple 4:14 also",
    "start": "504010",
    "end": "510710"
  },
  {
    "text": "gave us the author in the parameter list for lambdas so the generalized lambdas",
    "start": "510710",
    "end": "517880"
  },
  {
    "text": "so now it's not even important that the value we gave as an argument to two",
    "start": "517880",
    "end": "524420"
  },
  {
    "text": "equals which is a T is the value that the lambda is then called with what's the important is that they are equality",
    "start": "524420",
    "end": "530570"
  },
  {
    "text": "comparable so say for example that we call it with us good string the lambda",
    "start": "530570",
    "end": "536870"
  },
  {
    "text": "can be called with a choice door and sure I can sort of do that with good",
    "start": "536870",
    "end": "544910"
  },
  {
    "text": "function but this is not exactly the same is it because now we say the this",
    "start": "544910",
    "end": "551840"
  },
  {
    "text": "the function that is returned must be called with the same type for example as",
    "start": "551840",
    "end": "557660"
  },
  {
    "text": "did string so in the case I called equals with the string and call called",
    "start": "557660",
    "end": "564200"
  },
  {
    "text": "the lambda with the concho store I get a temporary created and destroyed for",
    "start": "564200",
    "end": "570170"
  },
  {
    "text": "every call that is expensive alternative of another way the other way around are",
    "start": "570170",
    "end": "576020"
  },
  {
    "text": "called equals with a console store and want to call it where this dead string then it doesn't compile because a",
    "start": "576020",
    "end": "582820"
  },
  {
    "text": "constant string cannot be implicitly converted to a college or store so we",
    "start": "582820",
    "end": "589190"
  },
  {
    "text": "get an error so these are not equal is some of the same things so the function",
    "start": "589190",
    "end": "595190"
  },
  {
    "text": "is good for many things but there is a cost to it is there are limitations to",
    "start": "595190",
    "end": "601370"
  },
  {
    "text": "it so these are not the same thing with the the one below that uses our auto",
    "start": "601370",
    "end": "609590"
  },
  {
    "text": "return type is more generic",
    "start": "609590",
    "end": "613990"
  },
  {
    "text": "yeah so that we have exactly what I just said so back to this and now we can",
    "start": "616440",
    "end": "625170"
  },
  {
    "text": "write the code like like this in cells so say if none of the values in the",
    "start": "625170",
    "end": "630779"
  },
  {
    "text": "vector equals zero them and while any of the values equals naama then this is",
    "start": "630779",
    "end": "639480"
  },
  {
    "text": "more expressive code it communicates in temped it's people often I say this but",
    "start": "639480",
    "end": "646110"
  },
  {
    "text": "this enables us to have an argument over names that is actually a good thing",
    "start": "646110",
    "end": "652009"
  },
  {
    "text": "because when we are having an argument over the name of something you're actually building a mental model of what",
    "start": "652009",
    "end": "659939"
  },
  {
    "text": "is actually the problem what is the intent what do we want to do I could have called this food but it would have",
    "start": "659939",
    "end": "668129"
  },
  {
    "text": "been meaningless if wouldn't have helped us understand what the code means but by giving it a name that conveys intent we",
    "start": "668129",
    "end": "676949"
  },
  {
    "text": "can we can read the code and get the idea of what it is meant to be and if",
    "start": "676949",
    "end": "683220"
  },
  {
    "text": "there is a bug in here we can argue quite easily if is that the intent that",
    "start": "683220",
    "end": "690149"
  },
  {
    "text": "is wrong shouldn't it be equal should it be something else or is it actually a bug in equals implementation if it says",
    "start": "690149",
    "end": "697079"
  },
  {
    "text": "it does equality but it doesn't so by giving it a descriptive name we can",
    "start": "697079",
    "end": "703850"
  },
  {
    "text": "pinpoint where the problem is instead of just reading the lambda that says what",
    "start": "703850",
    "end": "711689"
  },
  {
    "text": "it does but it doesn't say what is it meant to do",
    "start": "711689",
    "end": "716720"
  },
  {
    "text": "when it comes to naming of higher-order functions I prefer you will see this a lot prefer to give them names that read",
    "start": "725290",
    "end": "734209"
  },
  {
    "text": "well in the context they are used I think this is reasonably successful",
    "start": "734209",
    "end": "741380"
  },
  {
    "text": "anyway I'm familiar with not God bells",
    "start": "741380",
    "end": "750019"
  },
  {
    "start": "745000",
    "end": "1230000"
  },
  {
    "text": "compiler Explorer it's not you should be absolutely should be let's have a look",
    "start": "750019",
    "end": "757519"
  },
  {
    "text": "people especially from my background in in the embedded world think oh no we",
    "start": "757519",
    "end": "765200"
  },
  {
    "text": "cannot do this the overhead of this abstraction this is too expensive so",
    "start": "765200",
    "end": "770690"
  },
  {
    "text": "let's have a look you recognize this code we have yeah I",
    "start": "770690",
    "end": "778880"
  },
  {
    "text": "wrote any of her not the other one but regardless we have an equals prepared it",
    "start": "778880",
    "end": "786620"
  },
  {
    "text": "for stood function and the simple one and some function that just checks for",
    "start": "786620",
    "end": "794120"
  },
  {
    "text": "us format so what do we see here we get",
    "start": "794120",
    "end": "802329"
  },
  {
    "text": "our ax and our CX r obviously the begin and end iterators to compare them for equality if they are equal with done",
    "start": "803110",
    "end": "811160"
  },
  {
    "text": "return false otherwise we compare",
    "start": "811160",
    "end": "818529"
  },
  {
    "text": "whatever the the iterator points to with a value given the int here if they are",
    "start": "818529",
    "end": "828350"
  },
  {
    "text": "equal we jump here where we return true all right cool otherwise for because",
    "start": "828350",
    "end": "837800"
  },
  {
    "text": "that is a the size of an integer on this platform to the iterator and go another",
    "start": "837800",
    "end": "845000"
  },
  {
    "text": "revolution i would claim that this is about us efficient does it get there's",
    "start": "845000",
    "end": "851149"
  },
  {
    "text": "no overhead in here we can make an experiment let's not call",
    "start": "851149",
    "end": "859250"
  },
  {
    "text": "my any of let's call stood any other Wow look at all this code maybe maybe my",
    "start": "859250",
    "end": "868460"
  },
  {
    "text": "colleagues are right there is a tremendous overhead in this why what are we seeing here any ideas why does still",
    "start": "868460",
    "end": "879950"
  },
  {
    "text": "any of generates so much code when this trivial one doesn't fun",
    "start": "879950",
    "end": "888190"
  },
  {
    "text": "no not debugging I have no debugging on using - level 3 here I can can lower",
    "start": "888190",
    "end": "895310"
  },
  {
    "text": "that a bit but that is not the case no",
    "start": "895310",
    "end": "901930"
  },
  {
    "text": "it actually does a partial loop and roll so the the implementation of stood any",
    "start": "903640",
    "end": "911360"
  },
  {
    "text": "of does compile time reflection and sees wait a minute we are looping over in the",
    "start": "911360",
    "end": "916730"
  },
  {
    "text": "over a vector where where all elements are adjacent in memory I can do a",
    "start": "916730",
    "end": "922730"
  },
  {
    "text": "partial loop and roll so it actually does for comparisons per revolution which makes it execute a lot faster",
    "start": "922730",
    "end": "930470"
  },
  {
    "text": "because we have fewer browsers there are better locality of reference so that's why we",
    "start": "930470",
    "end": "938660"
  },
  {
    "text": "got a code size bloat but will get better performance so maybe if you're",
    "start": "938660",
    "end": "944900"
  },
  {
    "text": "writing code for a microcontroller where you have like 128 bytes of program",
    "start": "944900",
    "end": "950150"
  },
  {
    "text": "memory you may want to use this naive own implementation instead of the",
    "start": "950150",
    "end": "955460"
  },
  {
    "text": "standard one but but if the space for",
    "start": "955460",
    "end": "961580"
  },
  {
    "text": "your binary isn't important than absolutely use the standard version",
    "start": "961580",
    "end": "967580"
  },
  {
    "text": "instead of writing your own because why write something that is already given to you and it's well documented and is weld",
    "start": "967580",
    "end": "974180"
  },
  {
    "text": "about but for the sake of completeness let's have a look at using state",
    "start": "974180",
    "end": "979940"
  },
  {
    "text": "function instead wait a minute before we do that a quick",
    "start": "979940",
    "end": "986580"
  },
  {
    "text": "count 19 instructions all in all",
    "start": "986580",
    "end": "990950"
  },
  {
    "text": "stood function it's meant to be usable",
    "start": "1004360",
    "end": "1010730"
  },
  {
    "text": "across a binary interface it's a an ABI who sort of say Europe in an API to a",
    "start": "1010730",
    "end": "1017449"
  },
  {
    "text": "shared library where you then you cannot just pass a something that is compiled",
    "start": "1017449",
    "end": "1025188"
  },
  {
    "text": "time information everything needs to be known explicitly exactly as it is so the",
    "start": "1025189",
    "end": "1034400"
  },
  {
    "text": "function is well defined exactly how it is laid out in memory and all of the",
    "start": "1034400",
    "end": "1041750"
  },
  {
    "text": "interesting bits are or anonymized RT you cannot see them but but this also",
    "start": "1041750",
    "end": "1047058"
  },
  {
    "text": "means that there is an overhead the compiler cannot see through it when we just returned the lambda the compiler",
    "start": "1047059",
    "end": "1052460"
  },
  {
    "text": "sees through everything and sees what it can remove so still function is great",
    "start": "1052460",
    "end": "1059390"
  },
  {
    "text": "for what it's meant to be used for but it can be expensive yeah we can we can",
    "start": "1059390",
    "end": "1073399"
  },
  {
    "text": "do that",
    "start": "1073399",
    "end": "1075640"
  },
  {
    "text": "not a whole lot better we can also do",
    "start": "1081770",
    "end": "1086320"
  },
  {
    "text": "okay",
    "start": "1091480",
    "end": "1094480"
  },
  {
    "text": "and they got a little bit better - but but but still not yes the if you didn't",
    "start": "1098840",
    "end": "1107690"
  },
  {
    "text": "tell it's a type of Asia that causes the cost but of course if you're if you need",
    "start": "1107690",
    "end": "1116870"
  },
  {
    "text": "to pass a function into a dll that then still function is the way to go",
    "start": "1116870",
    "end": "1122350"
  },
  {
    "text": "obviously but just just understand that",
    "start": "1122350",
    "end": "1127570"
  },
  {
    "text": "state function is great but it has a cost and sometimes the cost doesn't matter so why bother but sometimes it",
    "start": "1127570",
    "end": "1133670"
  },
  {
    "text": "doesn't matter right questions so far",
    "start": "1133670",
    "end": "1139070"
  },
  {
    "text": "before I go on yes",
    "start": "1139070",
    "end": "1143169"
  },
  {
    "text": "know the code size is not big event when you use the standard library functions",
    "start": "1157789",
    "end": "1163320"
  },
  {
    "text": "now yeah yeah when you're when you're rolling your own forward loop you get",
    "start": "1163320",
    "end": "1169499"
  },
  {
    "text": "the same code but with more bugs yeah did I mean seriously look can you",
    "start": "1169499",
    "end": "1177299"
  },
  {
    "text": "do better with a handwritten loop than this can you know you can't yeah yes the",
    "start": "1177299",
    "end": "1192869"
  },
  {
    "text": "observation was a lot of template code generates code bloat and that is true but - from that draw the conclusion that",
    "start": "1192869",
    "end": "1202200"
  },
  {
    "text": "all template code generates code note is false yeah so here no this type of use",
    "start": "1202200",
    "end": "1209099"
  },
  {
    "text": "is for free there is a cost in compile time it's not tremendous but but is it",
    "start": "1209099",
    "end": "1215070"
  },
  {
    "text": "but it is measurable but in your generated binary no it's not there",
    "start": "1215070",
    "end": "1222589"
  },
  {
    "text": "all right so we got through this",
    "start": "1225370",
    "end": "1232220"
  },
  {
    "start": "1230000",
    "end": "1240000"
  },
  {
    "text": "extremely brief example so let's expand",
    "start": "1232220",
    "end": "1237710"
  },
  {
    "text": "let's do things like I said I work for a net insight we make networking equipment",
    "start": "1237710",
    "end": "1244220"
  },
  {
    "start": "1240000",
    "end": "1364000"
  },
  {
    "text": "I write software for said networking equipment in networking equipment we deal with IP addresses so I write a",
    "start": "1244220",
    "end": "1250550"
  },
  {
    "text": "closed IP address we can create it from four bytes because it makes test code",
    "start": "1250550",
    "end": "1257750"
  },
  {
    "text": "easier and we can create it from just a 32-bit number we have equality",
    "start": "1257750",
    "end": "1263020"
  },
  {
    "text": "comparison operation if you're wondering why I have an address type instead of",
    "start": "1263020",
    "end": "1269930"
  },
  {
    "text": "just using 32-bit integers come to my talk to more about type safety we need a",
    "start": "1269930",
    "end": "1278900"
  },
  {
    "text": "net mask that makes sense and that Marx is sort of an IP address and I want to",
    "start": "1278900",
    "end": "1284600"
  },
  {
    "text": "be able to do well masking of IP addresses and that masks together a master address and with this I'm",
    "start": "1284600",
    "end": "1293980"
  },
  {
    "text": "absolutely obvious how your order function is IP matches a function that I",
    "start": "1293980",
    "end": "1301700"
  },
  {
    "text": "gave an IP address that I want to look for and a mask and are using the auto",
    "start": "1301700",
    "end": "1307340"
  },
  {
    "text": "return type to return a lambda that captures the thing I'm looking for in",
    "start": "1307340",
    "end": "1314210"
  },
  {
    "text": "the mask and it's callable with an IP address and we check if the mask desired",
    "start": "1314210",
    "end": "1319400"
  },
  {
    "text": "IP address is the same as the masked just called with and if there's only one",
    "start": "1319400",
    "end": "1327440"
  },
  {
    "text": "thing I want you to remember from this entire session it's this use auto return",
    "start": "1327440",
    "end": "1332720"
  },
  {
    "text": "type to return down this if you don't remember anything else of what I'm talking about this entire hour then I'm",
    "start": "1332720",
    "end": "1339800"
  },
  {
    "text": "happy if you're if you do remember this one so with this higher-order function we can write for example remove if if we",
    "start": "1339800",
    "end": "1348680"
  },
  {
    "text": "have this vector of IP addresses remove if V dot begin via an IP mattress 100",
    "start": "1348680",
    "end": "1355120"
  },
  {
    "text": "9268 sub Network this is cool this is readable code and",
    "start": "1355120",
    "end": "1364340"
  },
  {
    "start": "1364000",
    "end": "1418000"
  },
  {
    "text": "of course in networking equipment we also use IP interfaces and then IP",
    "start": "1364340",
    "end": "1372529"
  },
  {
    "text": "interface has a state which can be on or off this is obviously simplified beyond",
    "start": "1372529",
    "end": "1378320"
  },
  {
    "text": "reason but better than me making the example completely realistic does not",
    "start": "1378320",
    "end": "1385190"
  },
  {
    "text": "make for better slides so we can set the state which involves talking to the IP",
    "start": "1385190",
    "end": "1393590"
  },
  {
    "text": "stack may be talking to hardware we can clear the state which can be done in line because we can just cash it as a",
    "start": "1393590",
    "end": "1401269"
  },
  {
    "text": "member of a member variable and then we have other functions also to get its",
    "start": "1401269",
    "end": "1406820"
  },
  {
    "text": "address get its netmask at this default gateway and a bunch of other interesting",
    "start": "1406820",
    "end": "1412490"
  },
  {
    "text": "were not interesting stuff and now comes the question if I want to say search for",
    "start": "1412490",
    "end": "1422809"
  },
  {
    "start": "1418000",
    "end": "1445000"
  },
  {
    "text": "an IP interface that has a certain address how can I do that I want to use",
    "start": "1422809",
    "end": "1428299"
  },
  {
    "text": "this IP matress predicate that you saw on the previous slides with an IP interface so I need some way to extract",
    "start": "1428299",
    "end": "1437179"
  },
  {
    "text": "the address from the interface and feed that into the IP matches pretty good so",
    "start": "1437179",
    "end": "1444500"
  },
  {
    "text": "I would like something like if I have a function f one that takes Y and returns",
    "start": "1444500",
    "end": "1450049"
  },
  {
    "start": "1445000",
    "end": "1525000"
  },
  {
    "text": "that and have a function f2 that takes an X in return so Y then I want to be able to compose them as one function",
    "start": "1450049",
    "end": "1456409"
  },
  {
    "text": "that takes an X and returns is earlier by calling f1 with the result of calling",
    "start": "1456409",
    "end": "1462260"
  },
  {
    "text": "f2 with that so for example if I have F to being a",
    "start": "1462260",
    "end": "1468490"
  },
  {
    "text": "select address function that takes an IP interface and returns an address and I",
    "start": "1468490",
    "end": "1475159"
  },
  {
    "text": "have the IP matches higher function that you saw earlier then we can see that the",
    "start": "1475159",
    "end": "1483280"
  },
  {
    "text": "result on composing those would be something that is cold with an IP interface called select address gives",
    "start": "1483280",
    "end": "1489340"
  },
  {
    "text": "gives us an IP address called since that IP address into idea matches which gives us a bill so how can we write such a",
    "start": "1489340",
    "end": "1496360"
  },
  {
    "text": "composition and it's surprisingly easy",
    "start": "1496360",
    "end": "1502559"
  },
  {
    "text": "I'll just write a function template that takes two functions f1 and f2 use the",
    "start": "1503190",
    "end": "1510520"
  },
  {
    "text": "auto return time return a lambda that when called with some something X it",
    "start": "1510520",
    "end": "1517480"
  },
  {
    "text": "returns her it's a result of calling f1 with the result of f2 of X and we're",
    "start": "1517480",
    "end": "1522820"
  },
  {
    "text": "done so then I can use this say with the",
    "start": "1522820",
    "end": "1529210"
  },
  {
    "start": "1525000",
    "end": "1602000"
  },
  {
    "text": "vector of IP interface it's fine if interfaces of the game interfaces of them the composition of IP mattress",
    "start": "1529210",
    "end": "1535600"
  },
  {
    "text": "hundred 9268 1.1 and select address but",
    "start": "1535600",
    "end": "1543580"
  },
  {
    "text": "of course yeah select address is an obvious function just perfectly ordinary",
    "start": "1543580",
    "end": "1550420"
  },
  {
    "text": "free styling function but of course this composition can maybe",
    "start": "1550420",
    "end": "1557630"
  },
  {
    "text": "be used in several places so why not moving it out write a new function",
    "start": "1557630",
    "end": "1563180"
  },
  {
    "text": "address matches the takes takes in the IP address and netmask and returns this",
    "start": "1563180",
    "end": "1569660"
  },
  {
    "text": "composition using the auto return type and then we can use this address matches function instead find if interfaces",
    "start": "1569660",
    "end": "1579770"
  },
  {
    "text": "begin interfaces and address mattress on a 9268 one one cool I think and then of",
    "start": "1579770",
    "end": "1593030"
  },
  {
    "text": "course we add the other necessary functions select gateway select state",
    "start": "1593030",
    "end": "1598750"
  },
  {
    "text": "select mask or what have you so I'm now sort of venturing into the",
    "start": "1598750",
    "end": "1610310"
  },
  {
    "start": "1602000",
    "end": "1647000"
  },
  {
    "text": "realm of insanity here bear with me there is a purpose for it the code will become a little bit crazy",
    "start": "1610310",
    "end": "1620830"
  },
  {
    "text": "so ok fine if this is not too insane I think finally if with when all so we",
    "start": "1620830",
    "end": "1631160"
  },
  {
    "text": "want to match several predicates here address mattress 190 268 sub Network and",
    "start": "1631160",
    "end": "1636500"
  },
  {
    "text": "the state is off so how do we do this",
    "start": "1636500",
    "end": "1642160"
  },
  {
    "text": "another higher-order function here I'm using sequels are seventeen are you used",
    "start": "1645370",
    "end": "1652070"
  },
  {
    "start": "1647000",
    "end": "1790000"
  },
  {
    "text": "to super plus seventeen fold expressions three hands two and a half okay",
    "start": "1652070",
    "end": "1660050"
  },
  {
    "text": "I'll walk you through it what this folds",
    "start": "1660050",
    "end": "1667070"
  },
  {
    "text": "expression here means is that piece of",
    "start": "1667070",
    "end": "1672380"
  },
  {
    "text": "the predicate is it just sort of introduces the beginning of something so we say I want this expression to be",
    "start": "1672380",
    "end": "1679070"
  },
  {
    "text": "piece of X expanded over all the peas in this case with logical and",
    "start": "1679070",
    "end": "1685250"
  },
  {
    "text": "so in this case this call piece will be",
    "start": "1685250",
    "end": "1690680"
  },
  {
    "text": "both address matches and state is and it will expand to first called piece of X",
    "start": "1690680",
    "end": "1696950"
  },
  {
    "text": "or a piece of X will be address matches 100 268 subnetwork logical and with the",
    "start": "1696950",
    "end": "1705830"
  },
  {
    "text": "rest of the state is of and if I had called with even more predicates they",
    "start": "1705830",
    "end": "1711500"
  },
  {
    "text": "would be just more logical and zuv the application of each of them",
    "start": "1711500",
    "end": "1716630"
  },
  {
    "text": "and you get the normal logic short-circuiting so if the first predicate is false then the the rest of",
    "start": "1716630",
    "end": "1722390"
  },
  {
    "text": "the month called even you can't do this in C++ 14 - with a hairy recursion you",
    "start": "1722390",
    "end": "1735350"
  },
  {
    "text": "really don't want to go there but but you can where you just call you have one",
    "start": "1735350",
    "end": "1746810"
  },
  {
    "text": "where you have at least one predicate and you return the application of the first one logical and with the rest of",
    "start": "1746810",
    "end": "1754610"
  },
  {
    "text": "them and then you have the base case where you have nothing then it's true so",
    "start": "1754610",
    "end": "1762710"
  },
  {
    "text": "this works but it's a bit unpleasant and if you're if you're an experienced",
    "start": "1762710",
    "end": "1768410"
  },
  {
    "text": "template library writer you know about it even more horrible shortcuts to to",
    "start": "1768410",
    "end": "1773900"
  },
  {
    "text": "make it look more like the whole expression version but I'm not going to show you that because that's a whole",
    "start": "1773900",
    "end": "1779990"
  },
  {
    "text": "different kind of talk that would actually be a whole talk on its own",
    "start": "1779990",
    "end": "1786460"
  },
  {
    "text": "alright so add as much as you you saw",
    "start": "1788160",
    "end": "1793570"
  },
  {
    "start": "1790000",
    "end": "1827000"
  },
  {
    "text": "before state is is of course another composition compose of equals of the",
    "start": "1793570",
    "end": "1799480"
  },
  {
    "text": "desired state with the function select state so there is a recurring theme here",
    "start": "1799480",
    "end": "1809380"
  },
  {
    "text": "isn't it you you use the order to return type to return compositions or or naked",
    "start": "1809380",
    "end": "1817750"
  },
  {
    "text": "lambdas and you just build things from the just combining more and more stuff",
    "start": "1817750",
    "end": "1825690"
  },
  {
    "start": "1827000",
    "end": "1853000"
  },
  {
    "text": "so now we're going full-blown crazy so we're walking through all elements",
    "start": "1828210",
    "end": "1834700"
  },
  {
    "text": "overall IP interfaces and we say if all",
    "start": "1834700",
    "end": "1840970"
  },
  {
    "text": "of this matters in status of it's true then set the state on so how is an",
    "start": "1840970",
    "end": "1848560"
  },
  {
    "text": "if-then implemented I think you can write it again a template that takes a",
    "start": "1848560",
    "end": "1857080"
  },
  {
    "start": "1853000",
    "end": "1875000"
  },
  {
    "text": "predicate and an action if the predicate is history called the action in this case I've decided more or less",
    "start": "1857080",
    "end": "1863560"
  },
  {
    "text": "whimsically to do a perfect forwarding on the action because why not",
    "start": "1863560",
    "end": "1870420"
  },
  {
    "text": "you get the idea it's the same and set state is of course also again use auto",
    "start": "1872040",
    "end": "1880240"
  },
  {
    "start": "1875000",
    "end": "2096000"
  },
  {
    "text": "return type return lambda that captures the the state we want to set and when",
    "start": "1880240",
    "end": "1885400"
  },
  {
    "text": "called with an IP interface we call the member function sub state so nothing",
    "start": "1885400",
    "end": "1892420"
  },
  {
    "text": "weird you understand this code cool so",
    "start": "1892420",
    "end": "1898620"
  },
  {
    "text": "time for some live demo again how expensive is this",
    "start": "1898620",
    "end": "1904680"
  },
  {
    "text": "okay so you'll recognize this code we have our equals we have an IP address netmask oh yeah I did a renaming our God",
    "start": "1913310",
    "end": "1924170"
  },
  {
    "text": "okay sorry that is IP matches we have the IP",
    "start": "1924170",
    "end": "1929660"
  },
  {
    "text": "interface select address compose select state set state just matches",
    "start": "1929660",
    "end": "1937040"
  },
  {
    "text": "conversation state is composition when all rock andreas I remember to to",
    "start": "1937040",
    "end": "1944630"
  },
  {
    "text": "change it to simpler seventeen thank you for that I hand written for each because",
    "start": "1944630",
    "end": "1955850"
  },
  {
    "text": "I want don't want to deal with this partial loop unrolling making the result more difficult to to read and we have a",
    "start": "1955850",
    "end": "1963230"
  },
  {
    "text": "function that does it all so this code is obviously bigger we need",
    "start": "1963230",
    "end": "1970850"
  },
  {
    "text": "to save State on the stack we don't have",
    "start": "1970850",
    "end": "1976730"
  },
  {
    "text": "enough registers but we can check we get",
    "start": "1976730",
    "end": "1983780"
  },
  {
    "text": "our B action or B P to be our begin and",
    "start": "1983780",
    "end": "1989480"
  },
  {
    "text": "end check if they are equal then we're done jump to five here we just leave if",
    "start": "1989480",
    "end": "1996320"
  },
  {
    "text": "they're not equal we get a value from",
    "start": "1996320",
    "end": "2002160"
  },
  {
    "text": "offset zero in the IP interface which happens to be the address XOR with the",
    "start": "2002160",
    "end": "2010270"
  },
  {
    "text": "others were looking for and mask off the lower bits if it's zero then it was much if wasn't we go on but if it wasn't",
    "start": "2010270",
    "end": "2018670"
  },
  {
    "text": "match than we check off set twelve which happens to be the mirror of the state so",
    "start": "2018670",
    "end": "2025660"
  },
  {
    "text": "we check if it's zero if it is we call",
    "start": "2025660",
    "end": "2031840"
  },
  {
    "text": "that state with one otherwise 16 because that is a state the size of the IP",
    "start": "2031840",
    "end": "2040390"
  },
  {
    "text": "interface see if we have reached the end if not another revolution",
    "start": "2040390",
    "end": "2046770"
  },
  {
    "text": "there's absolutely no overhead in here a door everything disappeared the",
    "start": "2046770",
    "end": "2054190"
  },
  {
    "text": "compilers today are magic absolutely magical actually I believe it became",
    "start": "2054190",
    "end": "2062409"
  },
  {
    "text": "even smaller if I use - OS yeah a little bit tiny little bit smaller I haven't",
    "start": "2062410",
    "end": "2069639"
  },
  {
    "text": "benchmarked into comparative any of them are faster but yeah so don't be afraid",
    "start": "2069640",
    "end": "2078040"
  },
  {
    "text": "to use these constructions because of a fear of cost at least not in terms of",
    "start": "2078040",
    "end": "2085030"
  },
  {
    "text": "the generated code it's not expensive",
    "start": "2085030",
    "end": "2090210"
  },
  {
    "text": "questions you're stumped completely all",
    "start": "2090240",
    "end": "2097900"
  },
  {
    "start": "2096000",
    "end": "2256000"
  },
  {
    "text": "right so you're asking too few questions",
    "start": "2097900",
    "end": "2103960"
  },
  {
    "text": "I'm gonna finish early so we see in this",
    "start": "2103960",
    "end": "2110980"
  },
  {
    "text": "brief intro and the gradually expanding example I'm not going to expand on that much more optional T optional T is kind",
    "start": "2110980",
    "end": "2122980"
  },
  {
    "text": "of cool I was familiar with optional T it's a part of simple per standard",
    "start": "2122980",
    "end": "2128530"
  },
  {
    "text": "simpler seventeen standard library the",
    "start": "2128530",
    "end": "2133810"
  },
  {
    "text": "intention of optional T is to say that an instance of optional T is something",
    "start": "2133810",
    "end": "2140530"
  },
  {
    "text": "that may have a T whatever it is or it may have nothing like I said it's in the",
    "start": "2140530",
    "end": "2149020"
  },
  {
    "text": "standard library of simpler seventeen it is available in a number of open-source",
    "start": "2149020",
    "end": "2154030"
  },
  {
    "text": "libraries for at least C purpose 11 I don't know maybe older but definitely",
    "start": "2154030",
    "end": "2159610"
  },
  {
    "text": "from Sigma 11 it's extremely useful in lookup functions to say for example in a",
    "start": "2159610",
    "end": "2168160"
  },
  {
    "text": "row route lookup give me give me the Gateway node for for this IP address and",
    "start": "2168160",
    "end": "2174400"
  },
  {
    "text": "it says yeah you should go to this address or say I don't know never seen this I have no idea where you",
    "start": "2174400",
    "end": "2179720"
  },
  {
    "text": "should go or some other lookup function so it's a way of saying here is the",
    "start": "2179720",
    "end": "2186080"
  },
  {
    "text": "value or sorry I could not give you a value it's super useful in the standard",
    "start": "2186080",
    "end": "2193850"
  },
  {
    "text": "library T must not be a reference type which is not a big problem but it's a",
    "start": "2193850",
    "end": "2200780"
  },
  {
    "text": "bit annoying the reason for for reference types not being allowed is",
    "start": "2200780",
    "end": "2207560"
  },
  {
    "text": "that it's not obvious what assignment means if you have an optional T",
    "start": "2207560",
    "end": "2214130"
  },
  {
    "text": "reference that does refer to something and I assigned to it what does that mean",
    "start": "2214130",
    "end": "2222500"
  },
  {
    "text": "doesn't mean I'm assigning to the thing that my optional refers to or do I mean",
    "start": "2222500",
    "end": "2228050"
  },
  {
    "text": "that I'm rebinding the reference to something else to err on the safe side",
    "start": "2228050",
    "end": "2235160"
  },
  {
    "text": "the standardization committee decided to say that that's not supportive there is",
    "start": "2235160",
    "end": "2241490"
  },
  {
    "text": "this other thing called the reference wrapper that you can use instead it's",
    "start": "2241490",
    "end": "2250010"
  },
  {
    "text": "not that big of a problem a little bit annoying but so we can do this",
    "start": "2250010",
    "end": "2262780"
  },
  {
    "start": "2256000",
    "end": "2339000"
  },
  {
    "text": "I can use a lookup function a higher",
    "start": "2263490",
    "end": "2269190"
  },
  {
    "text": "order function that takes a predicate and surgeries for IP interfaces to search for the first one actually it",
    "start": "2269190",
    "end": "2277110"
  },
  {
    "text": "should be look up first or fine first or something that matches a predicate so",
    "start": "2277110",
    "end": "2287160"
  },
  {
    "text": "the way to use is the use I prefer at least is to I start by creating an",
    "start": "2287160",
    "end": "2295260"
  },
  {
    "text": "instance of the optional that is default constructed that is it doesn't refer to",
    "start": "2295260",
    "end": "2300540"
  },
  {
    "text": "anything so this is the false state and then if I can give it a value I give it",
    "start": "2300540",
    "end": "2306180"
  },
  {
    "text": "one this is very friendly for return",
    "start": "2306180",
    "end": "2311790"
  },
  {
    "text": "value optimization if you're into if you finally performance to be important and",
    "start": "2311790",
    "end": "2319860"
  },
  {
    "text": "it means you're not forgetting any cases so in this case you still find if and if",
    "start": "2319860",
    "end": "2326970"
  },
  {
    "text": "it's not the end iterator then I give a value to my return value that is my",
    "start": "2326970",
    "end": "2333330"
  },
  {
    "text": "stood optional becomes now defined to have a value and returned so a use case",
    "start": "2333330",
    "end": "2340170"
  },
  {
    "start": "2339000",
    "end": "2366000"
  },
  {
    "text": "can be something like this I look up and I be interface with some predicate and",
    "start": "2340170",
    "end": "2347130"
  },
  {
    "text": "if it is found then I can do stuff with it so this is kind of neat but not very",
    "start": "2347130",
    "end": "2357420"
  },
  {
    "text": "much in the style of higher-order functions with which I think I sort of meant to talk about now so enter this",
    "start": "2357420",
    "end": "2366600"
  },
  {
    "text": "fella summing brands tort and Lamar on various social networks around nice guy",
    "start": "2366600",
    "end": "2373460"
  },
  {
    "text": "he's written his own optional that is",
    "start": "2373460",
    "end": "2378870"
  },
  {
    "text": "available on this github link it's a it",
    "start": "2378870",
    "end": "2383880"
  },
  {
    "text": "worked for a simple plus 11 and up and it does support using references",
    "start": "2383880",
    "end": "2392400"
  },
  {
    "text": "but more importantly it does have some functional style extensions that I'm",
    "start": "2392400",
    "end": "2397500"
  },
  {
    "text": "going to just briefly introduce you to and if you're curious there is a",
    "start": "2397500",
    "end": "2405660"
  },
  {
    "text": "standards proposal for using this I think this was or at least was intended",
    "start": "2405660",
    "end": "2411329"
  },
  {
    "text": "to be discussed that the standardization meeting in rapperswil in Switzerland last week but I don't",
    "start": "2411329",
    "end": "2417539"
  },
  {
    "text": "know if it actually was what this thing",
    "start": "2417539",
    "end": "2424200"
  },
  {
    "text": "does is it's under the TL directly TL",
    "start": "2424200",
    "end": "2431670"
  },
  {
    "text": "optional TL for a total Lama if you ask him why top and Lam I hate justice he",
    "start": "2431670",
    "end": "2437609"
  },
  {
    "text": "was once a teenager and that's it so I create an optional V that a default",
    "start": "2437609",
    "end": "2446069"
  },
  {
    "text": "constructor so it doesn't have anything then I assign to it so now the refers to I and if I say the dot value equals",
    "start": "2446069",
    "end": "2455130"
  },
  {
    "text": "something that I'm actually assigning to the thing that the refers to but if I",
    "start": "2455130",
    "end": "2462779"
  },
  {
    "text": "have a new variable J and I say V equals J then I'm rebinding the optional to",
    "start": "2462779",
    "end": "2469410"
  },
  {
    "text": "refer to to J instead of 2i so I continues to be for this is not super",
    "start": "2469410",
    "end": "2476970"
  },
  {
    "text": "exciting now comes the exciting bit it has continuations so you can say and",
    "start": "2476970",
    "end": "2486410"
  },
  {
    "text": "then and then it's only callable when v",
    "start": "2486410",
    "end": "2491640"
  },
  {
    "text": "has a value if we doesn't have value when you call and them then it does nothing nothing at all whatever and then",
    "start": "2491640",
    "end": "2502500"
  },
  {
    "text": "is called with must return also an optional so you can change them more and more and more you also have dot or else",
    "start": "2502500",
    "end": "2510359"
  },
  {
    "text": "or else it's only called if the doesn't have a value and or else can be avoided",
    "start": "2510359",
    "end": "2516500"
  },
  {
    "text": "which means it continues to be uninitialized but it can also return an",
    "start": "2516500",
    "end": "2523380"
  },
  {
    "text": "optimal so we can for examples I use a look up",
    "start": "2523380",
    "end": "2529420"
  },
  {
    "text": "and say or else create that is cool and",
    "start": "2529420",
    "end": "2538920"
  },
  {
    "text": "more than that you can also just concatenate them change them as member",
    "start": "2538920",
    "end": "2548140"
  },
  {
    "text": "function calls one after another so this is neat and now we can write code in a",
    "start": "2548140",
    "end": "2555519"
  },
  {
    "text": "much more pleasant style so instead of doing this where I'm having this if",
    "start": "2555519",
    "end": "2565390"
  },
  {
    "text": "statement to decide whether I want to do something or not I can say look up this",
    "start": "2565390",
    "end": "2570460"
  },
  {
    "text": "and then do stuff the disadvantage is that the do stuff must now return an",
    "start": "2570460",
    "end": "2579039"
  },
  {
    "text": "optional but that is a very small price to pay for this convenience so for",
    "start": "2579039",
    "end": "2586089"
  },
  {
    "text": "example I can say look up this address and then set the state or I could use a",
    "start": "2586089",
    "end": "2593499"
  },
  {
    "text": "lookup or create or I can change them",
    "start": "2593499",
    "end": "2599079"
  },
  {
    "text": "and just say look look at this up and then set the state or else just say that it failed and this or else will be",
    "start": "2599079",
    "end": "2606369"
  },
  {
    "text": "called if lookup fails or if lookup was successful and set state failed this",
    "start": "2606369",
    "end": "2614710"
  },
  {
    "text": "need I want to see this in one form or",
    "start": "2614710",
    "end": "2620589"
  },
  {
    "text": "another standardized I forgot to say that a Simon's implementation that I",
    "start": "2620589",
    "end": "2626079"
  },
  {
    "text": "gave the you the github link to is explicitly placed on the public domain so no strings attached",
    "start": "2626079",
    "end": "2635219"
  },
  {
    "text": "so let's have a look how expensive is it",
    "start": "2639160",
    "end": "2644480"
  },
  {
    "text": "to use this we have all this stuff again",
    "start": "2644480",
    "end": "2651020"
  },
  {
    "text": "using TL optional here you have all this",
    "start": "2651020",
    "end": "2657950"
  },
  {
    "text": "stuff ya exchanged as you see here's the",
    "start": "2657950",
    "end": "2664730"
  },
  {
    "text": "set state member function now calls now returns another optional so that it can",
    "start": "2664730",
    "end": "2670339"
  },
  {
    "text": "say that it returns a reference to itself if it is successful or it returns",
    "start": "2670339",
    "end": "2676250"
  },
  {
    "text": "a an option that does not own a value if it failed so you can use the Institute",
    "start": "2676250",
    "end": "2682040"
  },
  {
    "text": "to chain them so I have my lookup",
    "start": "2682040",
    "end": "2689960"
  },
  {
    "text": "function as earlier and then we can see lookup interfaces address mattress and",
    "start": "2689960",
    "end": "2698480"
  },
  {
    "text": "then call set state or else just print an error message in this case this is",
    "start": "2698480",
    "end": "2706580"
  },
  {
    "text": "not super difficult again the iterators see if we're done",
    "start": "2706580",
    "end": "2715900"
  },
  {
    "text": "yeah the compiler is clever this is the IP address loop until we find something",
    "start": "2715900",
    "end": "2725720"
  },
  {
    "text": "check if we have a value if not go to",
    "start": "2725720",
    "end": "2733180"
  },
  {
    "text": "print the error message otherwise call",
    "start": "2733420",
    "end": "2739369"
  },
  {
    "text": "this set state check the return value if",
    "start": "2739369",
    "end": "2745390"
  },
  {
    "text": "if it was now false go to print an error",
    "start": "2745390",
    "end": "2750470"
  },
  {
    "text": "message otherwise we're done no overhead",
    "start": "2750470",
    "end": "2755710"
  },
  {
    "text": "this is so cool well actually there is one byte overhead because the in terms of storage because",
    "start": "2755710",
    "end": "2763359"
  },
  {
    "text": "the optional type has a boolean that says if it contains a value or not but",
    "start": "2763359",
    "end": "2771450"
  },
  {
    "text": "you trust me you can pay that overhead",
    "start": "2771450",
    "end": "2776369"
  },
  {
    "start": "2776000",
    "end": "2801000"
  },
  {
    "text": "and now we get to the facepalm part of this talk working with overloads because",
    "start": "2779700",
    "end": "2786970"
  },
  {
    "text": "overloads are great and they are a pain in C++",
    "start": "2786970",
    "end": "2792160"
  },
  {
    "text": "at least in this context so if I have an",
    "start": "2792160",
    "end": "2797410"
  },
  {
    "text": "IP interface this before and I have this function select address and I have something that works with it everything",
    "start": "2797410",
    "end": "2806589"
  },
  {
    "start": "2801000",
    "end": "2819000"
  },
  {
    "text": "is fine no problem but then somewhere in my program I also have a customer that",
    "start": "2806589",
    "end": "2813400"
  },
  {
    "text": "has street address that I want to be able to query so I have a function select address that takes a customer and",
    "start": "2813400",
    "end": "2821069"
  },
  {
    "start": "2819000",
    "end": "2850000"
  },
  {
    "text": "this is what M is VCE says if you try to call it it's the transform no marching",
    "start": "2821069",
    "end": "2826960"
  },
  {
    "text": "over load function found could not deduce tempered argument for fn1 it's",
    "start": "2826960",
    "end": "2837250"
  },
  {
    "text": "it's not very friendly actually at least it's not a spew of page of the page of",
    "start": "2837250",
    "end": "2842500"
  },
  {
    "text": "problems but but it's not very friendly everybody knows clang is the king of",
    "start": "2842500",
    "end": "2848049"
  },
  {
    "text": "good compiler error messages or not in",
    "start": "2848049",
    "end": "2853839"
  },
  {
    "start": "2850000",
    "end": "2857000"
  },
  {
    "text": "this case it's not very friendly the the reason this is a problem is that we're",
    "start": "2853839",
    "end": "2859450"
  },
  {
    "start": "2857000",
    "end": "2894000"
  },
  {
    "text": "saying call transform in select address but there are two select addresses and overload resolution doesn't take take",
    "start": "2859450",
    "end": "2866200"
  },
  {
    "text": "place until inside the body of the transform when it is called with whatever the iterators refer to and then",
    "start": "2866200",
    "end": "2874450"
  },
  {
    "text": "it's too late so at this call site choose the transforms as transform to",
    "start": "2874450",
    "end": "2881069"
  },
  {
    "text": "which select address exactly I cannot I cannot no sorry",
    "start": "2881069",
    "end": "2888120"
  },
  {
    "text": "and it's not very good at saying what the problem is unfortunately so how do",
    "start": "2888120",
    "end": "2893340"
  },
  {
    "text": "we deal with this I have two and a half",
    "start": "2893340",
    "end": "2901560"
  },
  {
    "text": "solutions roughly depending on how is it",
    "start": "2901560",
    "end": "2906980"
  },
  {
    "text": "so solution number one I prepared for some really really really hairy you see cluster stuff why bother",
    "start": "2906980",
    "end": "2916290"
  },
  {
    "start": "2913000",
    "end": "2931000"
  },
  {
    "text": "I can honestly say that I have not had this problem in my code ever I had to",
    "start": "2916290",
    "end": "2922980"
  },
  {
    "text": "construct an example just to be able to show it to you so why bother",
    "start": "2922980",
    "end": "2931970"
  },
  {
    "start": "2931000",
    "end": "2960000"
  },
  {
    "text": "arrange your code such that I mean in this case where you have a customer with",
    "start": "2931970",
    "end": "2937560"
  },
  {
    "text": "street address and you have IP interfaces with IP addresses these are completely different domains of your code this is only a problem if you have",
    "start": "2937560",
    "end": "2945230"
  },
  {
    "text": "one source file that needs to see both at the same time and that probably won't",
    "start": "2945230",
    "end": "2951300"
  },
  {
    "text": "happen so it's rarely a problem but if",
    "start": "2951300",
    "end": "2958800"
  },
  {
    "text": "you actually do need it they can go to solution number two : throw a lambda",
    "start": "2958800",
    "end": "2967640"
  },
  {
    "start": "2960000",
    "end": "2996000"
  },
  {
    "text": "because the lambda is one thing that is callable in this case I'm using the auto",
    "start": "2967640",
    "end": "2975170"
  },
  {
    "text": "auto function parameter so it's callable with anything and then inside that call",
    "start": "2975170",
    "end": "2981920"
  },
  {
    "text": "it knows which of the Select addresses have to call and that is okay because",
    "start": "2981920",
    "end": "2988470"
  },
  {
    "text": "the lambda is one thing that that one thing is sent in to transform so it",
    "start": "2988470",
    "end": "2994350"
  },
  {
    "text": "works so I think this is okay occasionally it becomes cumbersome if",
    "start": "2994350",
    "end": "3001040"
  },
  {
    "start": "2996000",
    "end": "3006000"
  },
  {
    "text": "you need it often because you need to read this lambda",
    "start": "3001040",
    "end": "3005440"
  },
  {
    "start": "3006000",
    "end": "3017000"
  },
  {
    "text": "so you have the to be solution this is the one where purists need to look away",
    "start": "3006700",
    "end": "3016740"
  },
  {
    "text": "sorry we enter the dreadful macro to",
    "start": "3016740",
    "end": "3023350"
  },
  {
    "start": "3017000",
    "end": "3097000"
  },
  {
    "text": "have a macro lift that takes a function and that's just the same thing that you",
    "start": "3023350",
    "end": "3029440"
  },
  {
    "text": "saw earlier but now the on the site of the call you just see the transform",
    "start": "3029440",
    "end": "3037120"
  },
  {
    "text": "begin and back insert or lift selectable it's easy to read of course if you're if",
    "start": "3037120",
    "end": "3046360"
  },
  {
    "text": "you want to do lift the right way you need to do that humbly",
    "start": "3046360",
    "end": "3051780"
  },
  {
    "text": "have you seen Victoria Romeo's short talk you must type it three times that",
    "start": "3051780",
    "end": "3058660"
  },
  {
    "text": "was that is horrible but that's the way it is but on the other hand by by",
    "start": "3058660",
    "end": "3065260"
  },
  {
    "text": "putting that stuff in a macro you you write it once and you use it many times and really that's it of course macros",
    "start": "3065260",
    "end": "3078310"
  },
  {
    "text": "are you they are what you do",
    "start": "3078310",
    "end": "3084210"
  },
  {
    "text": "let's hope for us some evolution in the language that makes us able to express",
    "start": "3084210",
    "end": "3091360"
  },
  {
    "text": "such things without lambdas but when without macros but we're not there yet",
    "start": "3091360",
    "end": "3097350"
  },
  {
    "start": "3097000",
    "end": "3240000"
  },
  {
    "text": "okay just briefly show you that this is",
    "start": "3097350",
    "end": "3105100"
  },
  {
    "text": "really nothing so we have a compilation error here the reason is that I'm",
    "start": "3105100",
    "end": "3113710"
  },
  {
    "text": "actually using this example when I where I set the state but I changed things",
    "start": "3113710",
    "end": "3123340"
  },
  {
    "text": "such as I added a customer with its select address which means that this compose fails because it doesn't know",
    "start": "3123340",
    "end": "3129820"
  },
  {
    "text": "which select address to call",
    "start": "3129820",
    "end": "3133290"
  },
  {
    "text": "so let's do that",
    "start": "3135260",
    "end": "3139780"
  },
  {
    "text": "and the result is the same code as we saw before so it's not expensive to do",
    "start": "3143290",
    "end": "3149080"
  },
  {
    "text": "this right yes namespaces and macros",
    "start": "3149080",
    "end": "3161070"
  },
  {
    "text": "yeah like I said macros are evil they're problematic yeah then I would say you",
    "start": "3161070",
    "end": "3170620"
  },
  {
    "text": "return to handwrite your lambda there",
    "start": "3170620",
    "end": "3175840"
  },
  {
    "text": "are other techniques are more elaborate but I don't want to go there yeah",
    "start": "3175840",
    "end": "3180480"
  },
  {
    "text": "yeah it's difficult to do when one of the template parameter types is a lambda",
    "start": "3194450",
    "end": "3200250"
  },
  {
    "text": "type because what is that you can yeah I",
    "start": "3200250",
    "end": "3205290"
  },
  {
    "text": "guess it didn't here he he the suggestion was or the question was what",
    "start": "3205290",
    "end": "3211230"
  },
  {
    "text": "if I explicitly extension a thing the the lambda with the types of need and",
    "start": "3211230",
    "end": "3217230"
  },
  {
    "text": "that becomes difficult if the type you need is the type of lambda you can do it with the deco type about it it's not a",
    "start": "3217230",
    "end": "3224310"
  },
  {
    "text": "lot better I think you know other",
    "start": "3224310",
    "end": "3230190"
  },
  {
    "text": "questions no all right so that was",
    "start": "3230190",
    "end": "3236970"
  },
  {
    "text": "pretty much it so let's just summarize a little bit here when I wrote an earlier",
    "start": "3236970",
    "end": "3243840"
  },
  {
    "start": "3240000",
    "end": "3296000"
  },
  {
    "text": "version of this presentation I discovered I had actually not thought about this but I discovered that these",
    "start": "3243840",
    "end": "3251160"
  },
  {
    "text": "functions sort of belong in different categories so we have a domain specific ones on the right the the IP matches",
    "start": "3251160",
    "end": "3259620"
  },
  {
    "text": "select addresses etc and we have the domain specific composed functions like",
    "start": "3259620",
    "end": "3266580"
  },
  {
    "text": "status and address matches but then we have a bunch of functions that are",
    "start": "3266580",
    "end": "3271850"
  },
  {
    "text": "completely generic they they have nothing to do with our problem domain so",
    "start": "3271850",
    "end": "3276900"
  },
  {
    "text": "they really belong in a library so I",
    "start": "3276900",
    "end": "3282030"
  },
  {
    "text": "scouted the internet briefly I didn't make a very strong effort but briefly to",
    "start": "3282030",
    "end": "3290130"
  },
  {
    "text": "search for some cool libraries to use and to my surprise I actually didn't find him so I wrote on all there you're",
    "start": "3290130",
    "end": "3301680"
  },
  {
    "start": "3296000",
    "end": "3368000"
  },
  {
    "text": "free to use this if you want to it's it's on the boost license although I",
    "start": "3301680",
    "end": "3308460"
  },
  {
    "text": "went a little bit crazy there with C+ 17",
    "start": "3308460",
    "end": "3313650"
  },
  {
    "text": "through and through and it's fully cons to explore it's fully CNI friendly is",
    "start": "3313650",
    "end": "3319020"
  },
  {
    "text": "perfect forwarding everywhere and it compiler bug magnet I filed for compiler",
    "start": "3319020",
    "end": "3325460"
  },
  {
    "text": "bug reports so far on compose alone and that's only because I haven't even tried",
    "start": "3325460",
    "end": "3332330"
  },
  {
    "text": "it with Microsoft compilers so feel free",
    "start": "3332330",
    "end": "3339980"
  },
  {
    "text": "to use it if you want to but you have been one but it is more generically you",
    "start": "3339980",
    "end": "3346580"
  },
  {
    "text": "can you can call it all functions with any number of arguments etcetera so yeah",
    "start": "3346580",
    "end": "3353840"
  },
  {
    "text": "and I try to give good compilation error messages with static asserts and such",
    "start": "3353840",
    "end": "3362980"
  },
  {
    "text": "but that was them when I wrote this two months ago almost to the day boost one",
    "start": "3362980",
    "end": "3372140"
  },
  {
    "start": "3368000",
    "end": "3435000"
  },
  {
    "text": "point sixty seven point zero was released and it has boost of higher-order functions I haven't used it",
    "start": "3372140",
    "end": "3381580"
  },
  {
    "text": "because I actually only learned about this last week I haven't even written a",
    "start": "3381580",
    "end": "3388730"
  },
  {
    "text": "hello world with it but I've briefly glanced through the documentation and to",
    "start": "3388730",
    "end": "3394130"
  },
  {
    "text": "my surprise there is very little overlap between this is library and the boost",
    "start": "3394130",
    "end": "3400280"
  },
  {
    "text": "higher-order function boost higher-order functions has a lot of really sophisticated stuff for helping you with",
    "start": "3400280",
    "end": "3406010"
  },
  {
    "text": "doing a fancy functional stuff like covering and what-have-you but but these bread-and-butter things are suspiciously",
    "start": "3406010",
    "end": "3413420"
  },
  {
    "text": "missing except for compose it's their basic time now I haven't but then like I",
    "start": "3413420",
    "end": "3426290"
  },
  {
    "text": "said I only heard about boost off last week so I haven't had time to digest the idea yet",
    "start": "3426290",
    "end": "3433690"
  },
  {
    "start": "3435000",
    "end": "3502000"
  },
  {
    "text": "so takeaway message before we're done as",
    "start": "3435430",
    "end": "3442370"
  },
  {
    "text": "I said so many times write functions that use the auto return type to return",
    "start": "3442370",
    "end": "3447500"
  },
  {
    "text": "lambdas where the lambdas capture the the function parameters and does stuff and write functions that accesses or",
    "start": "3447500",
    "end": "3456810"
  },
  {
    "text": "modifies your state there is a talk",
    "start": "3456810",
    "end": "3462440"
  },
  {
    "text": "available in various forms on YouTube by a guy named Klaus Eagleburger the name",
    "start": "3462440",
    "end": "3470460"
  },
  {
    "text": "of the talk is something along the lines of free your functions or something such",
    "start": "3470460",
    "end": "3475650"
  },
  {
    "text": "watch it it it matches it is actually not at all about the things I have",
    "start": "3475650",
    "end": "3481710"
  },
  {
    "text": "talked about today but it matches perfectly with what I've talked about today it's a the power of freestyle",
    "start": "3481710",
    "end": "3488190"
  },
  {
    "text": "functions and you can use the functions to communicate with your object and call",
    "start": "3488190",
    "end": "3493200"
  },
  {
    "text": "remember functions so watch clouds Egan burgers talk about for your functions or",
    "start": "3493200",
    "end": "3498510"
  },
  {
    "text": "something such I don't remember the exact title and compose functions and",
    "start": "3498510",
    "end": "3505230"
  },
  {
    "start": "3502000",
    "end": "3516000"
  },
  {
    "text": "give the composition names that means things that you can argue with their",
    "start": "3505230",
    "end": "3510329"
  },
  {
    "text": "colleagues about because that is good that raises your understanding of your problem and use functional if you can",
    "start": "3510329",
    "end": "3519089"
  },
  {
    "start": "3516000",
    "end": "3600000"
  },
  {
    "text": "from functional extensions to optional to you that is so cool I forgot to mention there is another thing the Simon",
    "start": "3519089",
    "end": "3526050"
  },
  {
    "text": "brand also has is an expected T and e optional is sort of expecting to avoid",
    "start": "3526050",
    "end": "3533210"
  },
  {
    "text": "so expected T and e says it all either whole city or at hope it holds an e",
    "start": "3533210",
    "end": "3540150"
  },
  {
    "text": "where e is considered to be some kind of error information not just I could not",
    "start": "3540150",
    "end": "3545400"
  },
  {
    "text": "provide your T sorry it says I could not provide you a T because E and then the",
    "start": "3545400",
    "end": "3552180"
  },
  {
    "text": "or elles function is called with the with the e so you can take different actions depending on what the e is so",
    "start": "3552180",
    "end": "3559260"
  },
  {
    "text": "that is cool and like I mentioned overloads can be a",
    "start": "3559260",
    "end": "3569620"
  },
  {
    "text": "little bit of a pain point but they are solved by adding another level of",
    "start": "3569620",
    "end": "3575440"
  },
  {
    "text": "interaction and with that I'm done thank",
    "start": "3575440",
    "end": "3582430"
  },
  {
    "text": "you very much for your attention Victor",
    "start": "3582430",
    "end": "3594660"
  },
  {
    "text": "seeing that using kinetic extensions like optional if-then-else so the",
    "start": "3596749",
    "end": "3620069"
  },
  {
    "text": "question was a in my experience using these functional extensions like and then and or else that there are others",
    "start": "3620069",
    "end": "3627239"
  },
  {
    "text": "also I just gave a very brief entry does this reduce the need for obtaining the",
    "start": "3627239",
    "end": "3632429"
  },
  {
    "text": "value because the optional is kind of awkward in that and my answer is yes",
    "start": "3632429",
    "end": "3637619"
  },
  {
    "text": "absolutely you saw it in in my very small example using them I didn't call",
    "start": "3637619",
    "end": "3644429"
  },
  {
    "text": "that value or operator star I didn't have to because I sent the positive",
    "start": "3644429",
    "end": "3649709"
  },
  {
    "text": "value on in my and them more questions",
    "start": "3649709",
    "end": "3657049"
  },
  {
    "text": "do I mean that you should should use naked structs and have free functions",
    "start": "3673890",
    "end": "3679060"
  },
  {
    "text": "that access them instead no that is not what I mean I guess you can't do that a bit that is",
    "start": "3679060",
    "end": "3686830"
  },
  {
    "text": "pretty much what you do in pure functional programming languages but I",
    "start": "3686830",
    "end": "3692200"
  },
  {
    "text": "like the idea of information hiding in object and have a member factors but it's a very good idea to in addition",
    "start": "3692200",
    "end": "3698850"
  },
  {
    "text": "write access functions that does things with your object that is my take on it",
    "start": "3698850",
    "end": "3707170"
  },
  {
    "text": "anyway no other questions no all right",
    "start": "3707170",
    "end": "3712600"
  },
  {
    "text": "thank you very much",
    "start": "3712600",
    "end": "3715200"
  }
]