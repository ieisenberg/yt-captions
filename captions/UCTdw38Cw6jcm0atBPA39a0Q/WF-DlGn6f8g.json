[
  {
    "text": "hi everybody thank you for being here we're here hopefully with a a talk",
    "start": "2480",
    "end": "7640"
  },
  {
    "text": "that's going to actually help you be a better developer tomorrow right and so we're going to talk about the react",
    "start": "7640",
    "end": "13679"
  },
  {
    "text": "framework react in my opinion is one of the best Frameworks for user interface",
    "start": "13679",
    "end": "19160"
  },
  {
    "text": "development if you look at different Google Trends it's one of the most popular ones now the other popular",
    "start": "19160",
    "end": "25519"
  },
  {
    "text": "Frameworks like angular I give angular a lot of credit it does much better better security and um and a lot of the later",
    "start": "25519",
    "end": "34120"
  },
  {
    "text": "designs of angular are actually very decent but if anyone here has anyone here ever used angular one before once",
    "start": "34120",
    "end": "42000"
  },
  {
    "text": "how what did you think of angular one exactly the maintenance cost of",
    "start": "42000",
    "end": "49559"
  },
  {
    "text": "angular one was so expensive I bailed on it and even though they they fixed those problems I'm very Sicilian I will never",
    "start": "49559",
    "end": "57480"
  },
  {
    "text": "forgive angular for the sins of angular one it's dead to me now it's so now I do",
    "start": "57480",
    "end": "62519"
  },
  {
    "text": "all react and I think from a usability point of view react is amazing but the",
    "start": "62519",
    "end": "68880"
  },
  {
    "text": "security properties of react are not as are not as good as other Frameworks so",
    "start": "68880",
    "end": "74360"
  },
  {
    "text": "unfortunately with react we have to do security engineering especially as you",
    "start": "74360",
    "end": "80200"
  },
  {
    "text": "get deeper and deeper into react and use some of the more nitty-gritty features",
    "start": "80200",
    "end": "85560"
  },
  {
    "text": "you have to understand security engineering and that's a shame and they there's a chance to fix these things in",
    "start": "85560",
    "end": "91880"
  },
  {
    "text": "react but they simply haven't done it we're we're at what like 18.3 right now",
    "start": "91880",
    "end": "97159"
  },
  {
    "text": "and these holes all still exist in the current versions of of react so we're going to look at like what is react",
    "start": "97159",
    "end": "104399"
  },
  {
    "text": "right we're going to look at like what are the top security domains for this framework and we're going to look at for",
    "start": "104399",
    "end": "109600"
  },
  {
    "text": "each one of the react uh security domains we'll look at Key Concepts some challenges we'll look at some examples",
    "start": "109600",
    "end": "116200"
  },
  {
    "text": "of good and bad code and we'll come up with a clear protection strategy from a",
    "start": "116200",
    "end": "121920"
  },
  {
    "text": "software engineering view so you can build bulletproof react applications from a security point of view my name is",
    "start": "121920",
    "end": "128640"
  },
  {
    "text": "Jim manaco I'm a former board member of oasp I've been a developer for almost 30 years now I'm an author in the security",
    "start": "128640",
    "end": "134879"
  },
  {
    "text": "space and I'm a project leader for a couple OAS projects but I'm primarily an educator now I now travel the world and",
    "start": "134879",
    "end": "142599"
  },
  {
    "text": "teach developers how to write secure code and I love my job I feel very grateful that I get to do what I do in",
    "start": "142599",
    "end": "149400"
  },
  {
    "text": "the world love teaching um my great-grandfather was a professor my grandfather was a history Professor my",
    "start": "149400",
    "end": "155720"
  },
  {
    "text": "father teaches accounting boring but he's a funny professor and so I'm following the lineage of my family four",
    "start": "155720",
    "end": "161440"
  },
  {
    "text": "generations later I love what I do so we know what react is it's a JavaScript uh",
    "start": "161440",
    "end": "166480"
  },
  {
    "text": "Library that's primarily used on the client for user interface development",
    "start": "166480",
    "end": "172080"
  },
  {
    "text": "there's also server side rendering of react and I don't want to offend anyone",
    "start": "172080",
    "end": "177959"
  },
  {
    "text": "but I found something out recently yeah he's like yeah I know yeah you're going to try to offend me now I it's kind of",
    "start": "177959",
    "end": "183799"
  },
  {
    "text": "hard to believe but some people actually use JavaScript as a server side language",
    "start": "183799",
    "end": "189879"
  },
  {
    "text": "oh that hurts me to even say those words yeah I know I know so there is some server side rendering of react with node",
    "start": "189879",
    "end": "196920"
  },
  {
    "text": "oh node offends me all right so's let's just move on so here's the biggest attack against",
    "start": "196920",
    "end": "202480"
  },
  {
    "text": "react few Source what should I never see",
    "start": "202480",
    "end": "208080"
  },
  {
    "text": "in your client side react code this is the first question to start with what",
    "start": "208080",
    "end": "213920"
  },
  {
    "text": "should I never see in your client side react code and there's a there's a lot",
    "start": "213920",
    "end": "219519"
  },
  {
    "text": "of things number one I should never see any kind of hardcoded Secrets like API",
    "start": "219519",
    "end": "224760"
  },
  {
    "text": "keys I should never see any kind of Access Control let me ask you this when",
    "start": "224760",
    "end": "229840"
  },
  {
    "text": "you're doing client side react how much Access Control logic should be in your",
    "start": "229840",
    "end": "235799"
  },
  {
    "text": "code anybody have an idea how much zero zero guess how often I see that",
    "start": "235799",
    "end": "242159"
  },
  {
    "text": "principle actually followed in the real world almost never if you're an admin",
    "start": "242159",
    "end": "247760"
  },
  {
    "text": "show the admin link if you're not an admin don't and I see this in almost every react app I see hardcoded Secrets",
    "start": "247760",
    "end": "254400"
  },
  {
    "text": "I see well they well you can't attack us we have API protection but you are my",
    "start": "254400",
    "end": "260120"
  },
  {
    "text": "favorite and you are my favorite the amount of Access Control that should be",
    "start": "260120",
    "end": "265600"
  },
  {
    "text": "in your client side react code is zero it should p surely be a view layer why",
    "start": "265600",
    "end": "272520"
  },
  {
    "text": "is this because I can look at all your source code and if you hide stuff from me there's nothing that you can do to",
    "start": "272520",
    "end": "279320"
  },
  {
    "text": "stop me from seeing that access control logic exposed links exposed forms I got",
    "start": "279320",
    "end": "285479"
  },
  {
    "text": "called on the carpet for this idea recently I was looking at a react app there's a cookie I see in the cookie uh",
    "start": "285479",
    "end": "292759"
  },
  {
    "text": "access equals user really so I flip it to admin and refresh and I get the",
    "start": "292759",
    "end": "298160"
  },
  {
    "text": "entire navigation pane right this is a gambling company in Europe a big one too",
    "start": "298160",
    "end": "303560"
  },
  {
    "text": "and I'm like oh this is a critical v i I analyze it a bit this is a critical vulnerability and they're like no it's not several people have pointed this out",
    "start": "303560",
    "end": "310280"
  },
  {
    "text": "to us it's not critical I'm like I know it's critical I'll bet you they're like bet so here's the deal Jim they said if",
    "start": "310280",
    "end": "317759"
  },
  {
    "text": "you're right and we agree it's critical we'll double your pay for this week and if it's not critical then you're free",
    "start": "317759",
    "end": "324759"
  },
  {
    "text": "this week and I'm like you have a deal give me a contract to show me this and they did and I'm like it's on so I",
    "start": "324759",
    "end": "330520"
  },
  {
    "text": "present in front of the CEO CTO the CFO and their security officer and a few lead developers and I'm like it's it's",
    "start": "330520",
    "end": "337919"
  },
  {
    "text": "it's manico time it's game time so I open up their app register a new user go",
    "start": "337919",
    "end": "344160"
  },
  {
    "text": "to the cookie editor flip it to admin and see the admin console they're like well prove it to us so I go to every",
    "start": "344160",
    "end": "350440"
  },
  {
    "text": "single admin feature and try to do an admin action and the API blocks me and they're like see we told you and I'm",
    "start": "350440",
    "end": "356120"
  },
  {
    "text": "like so you don't think this is critical they're like nope it's not I'm like deal so I opened up a live Google Docs",
    "start": "356120",
    "end": "362000"
  },
  {
    "text": "document I'm about to steal some of your data since it's not a critical issue and I just registered a new account I could be anyone in the world I go to one of",
    "start": "362000",
    "end": "368720"
  },
  {
    "text": "their admin features edit customer so edit customer was an Enterprise feature",
    "start": "368720",
    "end": "374720"
  },
  {
    "text": "to let some uh employees bet on football games otherwise known as soccer in",
    "start": "374720",
    "end": "380400"
  },
  {
    "text": "America right so this is an Enterprise feature they have and I'm like hey take a look what's on your edit customer page",
    "start": "380400",
    "end": "388000"
  },
  {
    "text": "a drop-down list of every single one of their Enterprise customers and a an amount in Euro of how much money they're",
    "start": "388000",
    "end": "394800"
  },
  {
    "text": "spending and I'm like holy cow you're entire Enterprise customer list is there",
    "start": "394800",
    "end": "401319"
  },
  {
    "text": "for any user and since this isn't critical I'm going to go grab a copy of this so I cut and paste their entire",
    "start": "401319",
    "end": "408080"
  },
  {
    "text": "like Enterprise customer list like you know several hundred companies and I'm live in the Google docket I'm like the",
    "start": "408080",
    "end": "413720"
  },
  {
    "text": "moment I hit paste it's my list so what do you think CA Lev staff is this a critical vulnerability or not because if",
    "start": "413720",
    "end": "420199"
  },
  {
    "text": "you say no I'm going to paste and take this data away from you since it's not critical and they're and the se's are",
    "start": "420199",
    "end": "425280"
  },
  {
    "text": "look at each other like pay them all right Jim like boom they were very they still they",
    "start": "425280",
    "end": "431479"
  },
  {
    "text": "didn't throw me out of the building they still let me work for them they they they were impressed with the with my",
    "start": "431479",
    "end": "437240"
  },
  {
    "text": "little show but that's the problem when you start exposing admin logic you're you're going to expose admin metadata",
    "start": "437240",
    "end": "444560"
  },
  {
    "text": "that's severely problematic at least right and uh also un safe react life",
    "start": "444560",
    "end": "450360"
  },
  {
    "text": "cycle methods I don't see this that much um direct Dom manipulation all right react developers what is wrong stop",
    "start": "450360",
    "end": "456879"
  },
  {
    "text": "using refs enough with the ref to edit the Dom directly we have react to do",
    "start": "456879",
    "end": "462639"
  },
  {
    "text": "this there's never a good need to actually edit the Dom with the raw ref that's direct Dom manipulation and you",
    "start": "462639",
    "end": "469520"
  },
  {
    "text": "skip all of react security or inline scripting in the eval function this is not a necessary programming technique at",
    "start": "469520",
    "end": "476280"
  },
  {
    "text": "all or using props or types from untrusted data without doing proper data",
    "start": "476280",
    "end": "481560"
  },
  {
    "text": "validation or sanitization or storing sensitive data and client side storage",
    "start": "481560",
    "end": "486840"
  },
  {
    "text": "like local storage there should be no where is a good place in a client side",
    "start": "486840",
    "end": "492240"
  },
  {
    "text": "web application to store sensitive data long term come on you want to go for two",
    "start": "492240",
    "end": "497759"
  },
  {
    "text": "where is a good place in a web browser to store sensitive data long",
    "start": "497759",
    "end": "503360"
  },
  {
    "text": "term nowhere same answer so putting sensitive data into things like local",
    "start": "503360",
    "end": "508800"
  },
  {
    "text": "storage is a critical anti-pattern or using deprecated third-party react",
    "start": "508800",
    "end": "513959"
  },
  {
    "text": "plugins I think react is a good framework but the the ecosystem of",
    "start": "513959",
    "end": "519200"
  },
  {
    "text": "third-party react plugins who uses those a lot in development who they here's my",
    "start": "519200",
    "end": "524760"
  },
  {
    "text": "opinion of that ecosystem it's a morass of insecure filth that no one should use",
    "start": "524760",
    "end": "531560"
  },
  {
    "text": "that's the majority of it right so do a little code review before you use someone's crappy thirdparty library",
    "start": "531560",
    "end": "536880"
  },
  {
    "text": "right or misusing a thirdparty library using it unsafely or one of the biggest",
    "start": "536880",
    "end": "543680"
  },
  {
    "text": "vulnerabilities not validating a user-driven URL when when a user URL is",
    "start": "543680",
    "end": "549600"
  },
  {
    "text": "a parameter that you're going to render this is one of the biggest holes in react Google research tells me that",
    "start": "549600",
    "end": "556720"
  },
  {
    "text": "untrusted URL parameters is over onethird of active attacks against their",
    "start": "556720",
    "end": "562600"
  },
  {
    "text": "properties and this is when you're using again you're rendering a URL that might be valid but you're not validating a",
    "start": "562600",
    "end": "569399"
  },
  {
    "text": "properly so we're going to look at in this presentation cross fite scripting",
    "start": "569399",
    "end": "574480"
  },
  {
    "text": "we'll look at dangerous URLs rendering HTML securing Json dangerous Styles",
    "start": "574480",
    "end": "580680"
  },
  {
    "text": "insecure native Dom access Access Control failures vulnerable dependencies open redirects and insecure server side",
    "start": "580680",
    "end": "588519"
  },
  {
    "text": "rendering and by the way hang out with me for a little less than an hour I'll show you how to be a user interface",
    "start": "588519",
    "end": "594440"
  },
  {
    "text": "Champion when it comes to react these techniques if you know react well this is not that difficult ult right it's",
    "start": "594440",
    "end": "600079"
  },
  {
    "text": "just esoteric it's a lot stuff that a lot of react developers don't think about and I ask you to spread the word",
    "start": "600079",
    "end": "606440"
  },
  {
    "text": "to your team in the world of API developers we talk about what we're doing with each other I see a lot of",
    "start": "606440",
    "end": "612959"
  },
  {
    "text": "react folks get in their little world designing stuff there's not much as much cross chatter so please talk to your",
    "start": "612959",
    "end": "619519"
  },
  {
    "text": "team and show them this presentation and spread the word right so number one",
    "start": "619519",
    "end": "624920"
  },
  {
    "text": "let's look at real xss so cross- site scripting a lot of people don't take it seriously but here's some incidents that",
    "start": "624920",
    "end": "631959"
  },
  {
    "text": "I I remember very vividly British Airways somebody was able to modify a JavaScript library that led to 380,000",
    "start": "631959",
    "end": "639000"
  },
  {
    "text": "credit cards being skimmed and a big gdpr violation fortnite which which has a lot of kids playing this game had xss",
    "start": "639000",
    "end": "646399"
  },
  {
    "text": "on a retired page that exposed sensitive data for 200 million users many of them",
    "start": "646399",
    "end": "651880"
  },
  {
    "text": "children and eBay classic they had a URL parameter something we're going to focus",
    "start": "651880",
    "end": "657160"
  },
  {
    "text": "on here right that allowed it hackers to inject malicious codee into a page",
    "start": "657160",
    "end": "662639"
  },
  {
    "text": "giving them full access to seller accounts manipulate listings and steal payment cards and eBay tried to fix this",
    "start": "662639",
    "end": "670079"
  },
  {
    "text": "over and over and over again and failed to do it properly so this major",
    "start": "670079",
    "end": "675279"
  },
  {
    "text": "vulnerability was actively attacked for actually several years before they fixed it properly again dealing with URLs as a",
    "start": "675279",
    "end": "683040"
  },
  {
    "text": "parameter is a lot more difficult than it should be so let's look at some xss",
    "start": "683040",
    "end": "688839"
  },
  {
    "text": "now what can do is if you ever have a a get query parameter that's rendered",
    "start": "688839",
    "end": "695839"
  },
  {
    "text": "directly into a user interface first of all I don't recommend this but I see it a lot I can modify the parameter send",
    "start": "695839",
    "end": "703440"
  },
  {
    "text": "that to another user in a variety of different ways they click on that link and that that that attack payload will",
    "start": "703440",
    "end": "710040"
  },
  {
    "text": "land in the user interface in that user and I can steal tokens I can sometimes",
    "start": "710040",
    "end": "715120"
  },
  {
    "text": "steal cookies I can steal any sensitive data off that page and many many many more evil things with malicious",
    "start": "715120",
    "end": "721760"
  },
  {
    "text": "JavaScript what I see more often is stored xss this is where I'm imp",
    "start": "721760",
    "end": "727279"
  },
  {
    "text": "planting sensitive data into your database that has an attack payload and you're using a react function like",
    "start": "727279",
    "end": "734639"
  },
  {
    "text": "dangerously set in HTML if you're using the function dangerously set in HTML on",
    "start": "734639",
    "end": "741639"
  },
  {
    "text": "untrusted data with no protection then what kind of life are you living you're",
    "start": "741639",
    "end": "747519"
  },
  {
    "text": "living dangerously thank you for yeah you're living dangerously sorry sorry",
    "start": "747519",
    "end": "752560"
  },
  {
    "text": "nobody laughed at my joke I thought it was hilarious all right let's move on with store xss I implant the data in the",
    "start": "752560",
    "end": "758399"
  },
  {
    "text": "database in some way another user visits a user interface page that renders that",
    "start": "758399",
    "end": "765000"
  },
  {
    "text": "data raw or insecure in some way now let me show you some real world attack",
    "start": "765000",
    "end": "770120"
  },
  {
    "text": "payloads I've had students go to jail using these payloads don't be one of them so please use caution when using",
    "start": "770120",
    "end": "777680"
  },
  {
    "text": "these real world attack payloads without permission it's illegal in almost every jurisdiction in the world first of all",
    "start": "777680",
    "end": "785079"
  },
  {
    "text": "when we're testing for and that's the other risk in react view source to look at Secrets or injecting JavaScript into",
    "start": "785079",
    "end": "794040"
  },
  {
    "text": "an app that another user is going to look at right so I inject sensitive data",
    "start": "794040",
    "end": "799360"
  },
  {
    "text": "into an app another user looks at that data it has evil JavaScript I own the",
    "start": "799360",
    "end": "805360"
  },
  {
    "text": "browser at that point and so when I want to test for cross-site scripting I want to see if as an attacker I can get",
    "start": "805360",
    "end": "812320"
  },
  {
    "text": "special characters to render in a user interface unescaped can I get JavaScript",
    "start": "812320",
    "end": "818959"
  },
  {
    "text": "HTML CSS or any other markup to render in another user's web page that the",
    "start": "818959",
    "end": "825600"
  },
  {
    "text": "developer did not expect me to do one of the common ways to test for this is to use an alert script alert one now this",
    "start": "825600",
    "end": "832839"
  },
  {
    "text": "is not dangerous but if I can get an alert to pop in another users's web page I have proven there cross-site scripting",
    "start": "832839",
    "end": "840720"
  },
  {
    "text": "and so this is what it means to test for cross-site scripting most scanning tools you use in development will do these",
    "start": "840720",
    "end": "847839"
  },
  {
    "text": "kind of tests and similar right there's another website this is the xss filter",
    "start": "847839",
    "end": "853399"
  },
  {
    "text": "evasion cheat sheet that's many years old that will give you lots of payloads",
    "start": "853399",
    "end": "858959"
  },
  {
    "text": "to test for cross-site scripting that are purposely made to evade input",
    "start": "858959",
    "end": "864279"
  },
  {
    "text": "validation and evade web application firewall filtering so all of these",
    "start": "864279",
    "end": "869600"
  },
  {
    "text": "compensating controls validating data in most cases or using a firewall of some",
    "start": "869600",
    "end": "875360"
  },
  {
    "text": "kind these are not um absolute defenses and what I want to show you are absolute",
    "start": "875360",
    "end": "881800"
  },
  {
    "text": "defenses here's an example of one of the original attacks to steal a cookie this",
    "start": "881800",
    "end": "887120"
  },
  {
    "text": "is a a script I can inject into a web page and if another user hits this page",
    "start": "887120",
    "end": "892600"
  },
  {
    "text": "I build a URL that I control as the as the attacker I grab a copy of the cookie",
    "start": "892600",
    "end": "898440"
  },
  {
    "text": "and I use an image object to send that cookie to my attacker server it's one of the original attacks from the late 90s",
    "start": "898440",
    "end": "905800"
  },
  {
    "text": "it's trivial you want your cookie to be HTTP only so JavaScript can't read it if",
    "start": "905800",
    "end": "912000"
  },
  {
    "text": "it's a session cookie and the attack will still fire HTTP only cookies",
    "start": "912000",
    "end": "917360"
  },
  {
    "text": "shouldn't be necessary if you build react securely right here's another one like if you have any kind of sensitive",
    "start": "917360",
    "end": "924199"
  },
  {
    "text": "data on a page like a credit card that you're embedding on a page which frankly you shouldn't never do then I can use",
    "start": "924199",
    "end": "929920"
  },
  {
    "text": "the same attack to build a URL extract the credit card and send it off to my",
    "start": "929920",
    "end": "935440"
  },
  {
    "text": "evil collection server this is how we use evil script to steal data out of react right and HTTP only is not going",
    "start": "935440",
    "end": "943480"
  },
  {
    "text": "to help you here anything other than a cookie I can extract out of a web application typically also a lot of you",
    "start": "943480",
    "end": "950199"
  },
  {
    "text": "developers are we developers are using local storage or session storage to",
    "start": "950199",
    "end": "956360"
  },
  {
    "text": "store sensitive data this is a terrible idea one malicious script and I could extract",
    "start": "956360",
    "end": "962839"
  },
  {
    "text": "all data out of local or session storage and here's an example of this using a",
    "start": "962839",
    "end": "967920"
  },
  {
    "text": "fetch command to my evil attacker collection server it's a trivial attack and I can Minify this to a really small",
    "start": "967920",
    "end": "974800"
  },
  {
    "text": "size to have more places the attack is possible so again where's a good place",
    "start": "974800",
    "end": "980920"
  },
  {
    "text": "to store sensitive data in a web application that be nowhere you render",
    "start": "980920",
    "end": "986199"
  },
  {
    "text": "data and flush it from the cache and be done with it right for sensitive secure applications I can also Force",
    "start": "986199",
    "end": "993440"
  },
  {
    "text": "react I can also force force react to make any request I want right this is",
    "start": "993440",
    "end": "999639"
  },
  {
    "text": "the real Attack that will do damage this is same site request forgery where I load a script I create an image object",
    "start": "999639",
    "end": "1006880"
  },
  {
    "text": "and I force a get request from that page where the user is already logged in the",
    "start": "1006880",
    "end": "1012399"
  },
  {
    "text": "cookie goes with the request and I'm able to force the user to make any request that I want one I can get evil",
    "start": "1012399",
    "end": "1020160"
  },
  {
    "text": "JavaScript into your web page I own that page so I can also do a keystroke logger",
    "start": "1020160",
    "end": "1026280"
  },
  {
    "text": "with evil JavaScript I'm trapping the from character I'm I'm trapping the key down event and using fetched to ship it",
    "start": "1026280",
    "end": "1032918"
  },
  {
    "text": "off to my collection server and will the user even notice this is happening no these are quiet silent attacks that",
    "start": "1032919",
    "end": "1040798"
  },
  {
    "text": "steal data from the user um in the United States we have American football",
    "start": "1040799",
    "end": "1046000"
  },
  {
    "text": "this is to make fun of the Patriots and uh so the point of this slide is look at",
    "start": "1046000",
    "end": "1051400"
  },
  {
    "text": "document body in HTML in JavaScript I can use that to override the entire body",
    "start": "1051400",
    "end": "1057880"
  },
  {
    "text": "of a web page right and make fun of my least favorite sports team whatever now the problem with JavaScript it is evil",
    "start": "1057880",
    "end": "1065760"
  },
  {
    "text": "JavaScript is insane if you gave me the gift of being able to go back in time",
    "start": "1065760",
    "end": "1071520"
  },
  {
    "text": "once to fix history right that if I had that power here's what I would do I'd go",
    "start": "1071520",
    "end": "1076559"
  },
  {
    "text": "to the birth of Brandon Ike who wrote the JavaScript the original creator of JavaScript as a I take him as a baby oh",
    "start": "1076559",
    "end": "1083080"
  },
  {
    "text": "Brandon Reich and beat him against a rock oh sorry whoa whoa whoa sorry sorry that's not funny that's terrible that's",
    "start": "1083080",
    "end": "1088799"
  },
  {
    "text": "a terrible joke you should never hurt babies like that unless they're Brandon Ike he wrote JavaScript and it leads us",
    "start": "1088799",
    "end": "1095120"
  },
  {
    "text": "to the pain that we feel today now this is Ja the point I'm trying to make is this is Javascript no letters or numbers",
    "start": "1095120",
    "end": "1102120"
  },
  {
    "text": "it's an alert did I just beat Brandon Ike as a baby against a rock did I actually do that on stage no I didn't do",
    "start": "1102120",
    "end": "1107679"
  },
  {
    "text": "that right that's terrible start Brandon I'm only kidding I would never actually do that yes I would I wouldn't do that",
    "start": "1107679",
    "end": "1113120"
  },
  {
    "text": "so okay no letters or numbers the point I'm trying to make is this is an alert",
    "start": "1113120",
    "end": "1118280"
  },
  {
    "text": "in JavaScript I can mess with JavaScript in so many ways to evade a filter or I",
    "start": "1118280",
    "end": "1123520"
  },
  {
    "text": "can build a URL that's a URL that's starting an HTML tag with an onload or",
    "start": "1123520",
    "end": "1130520"
  },
  {
    "text": "Mouse over event and this will bypass many of the very expensive web",
    "start": "1130520",
    "end": "1135720"
  },
  {
    "text": "application firewalls out there or I can fetch a login page and override the",
    "start": "1135720",
    "end": "1142039"
  },
  {
    "text": "action so I'm popping your actual login page but the password will be sent to an",
    "start": "1142039",
    "end": "1147760"
  },
  {
    "text": "evil collection server from the attacker these are examples of realworld cross",
    "start": "1147760",
    "end": "1153240"
  },
  {
    "text": "site scripting that we need to avoid when building react applications so let's talk defense react",
    "start": "1153240",
    "end": "1161120"
  },
  {
    "text": "uses jsx so does View and a few others right and it does Auto escaping this is",
    "start": "1161120",
    "end": "1167640"
  },
  {
    "text": "excellent any modern framework for user interface in the web should autoescape and react does this but Auto escaping",
    "start": "1167640",
    "end": "1175400"
  },
  {
    "text": "will not protect you completely I'm going to show you one way that even when",
    "start": "1175400",
    "end": "1180600"
  },
  {
    "text": "you're Auto escaping a parameter I can still inject JavaScript through the auto",
    "start": "1180600",
    "end": "1186520"
  },
  {
    "text": "escaping of react there's a relatively big hole but what what this does is at the top I have my attack payload being",
    "start": "1186520",
    "end": "1194200"
  },
  {
    "text": "rendered raw to steal a cookie or other data from your web page",
    "start": "1194200",
    "end": "1199360"
  },
  {
    "text": "on the bottom that's what happens when data is sent through your mustaches it",
    "start": "1199360",
    "end": "1204760"
  },
  {
    "text": "gets Auto escaped right the difference is the payload at the top rendered raw",
    "start": "1204760",
    "end": "1210480"
  },
  {
    "text": "will execute and be invisible the payload at the bottom that's been escaped by react the code will be",
    "start": "1210480",
    "end": "1218000"
  },
  {
    "text": "displayed on the page but the payload will not execute it will just display",
    "start": "1218000",
    "end": "1223159"
  },
  {
    "text": "the code that's the power of Auto escaping it will display data exactly",
    "start": "1223159",
    "end": "1228880"
  },
  {
    "text": "like the user typed it in without actually executing that code angular",
    "start": "1228880",
    "end": "1234320"
  },
  {
    "text": "react spelt view all of them they do this by the way if you're a JavaScript",
    "start": "1234320",
    "end": "1239880"
  },
  {
    "text": "developer and you're thinking you know what I could build my own user interface Tech and you want to build a brand new",
    "start": "1239880",
    "end": "1247320"
  },
  {
    "text": "JavaScript user interface template language or user interface framework I think you should be banned from",
    "start": "1247320",
    "end": "1253280"
  },
  {
    "text": "development from three years okay so next so here let let's look at Auto taping with react it all goes down to",
    "start": "1253280",
    "end": "1259600"
  },
  {
    "text": "the component right so I have create element the first argument is a tag a type the second are your attributes a",
    "start": "1259600",
    "end": "1266360"
  },
  {
    "text": "prop the third is the actual data now the third piece of data it will get",
    "start": "1266360",
    "end": "1271640"
  },
  {
    "text": "escaped and in most cases will provide security but the first argument a tag",
    "start": "1271640",
    "end": "1277320"
  },
  {
    "text": "type that gets rendered raw in react and you should never use",
    "start": "1277320",
    "end": "1282520"
  },
  {
    "text": "untrusted un strictly validated data for your first argument that's a common misuse of react crate element the second",
    "start": "1282520",
    "end": "1289840"
  },
  {
    "text": "argument is an attribute it depends on the attribute some attributes are relatively safe like uh like an ID for",
    "start": "1289840",
    "end": "1298279"
  },
  {
    "text": "the that's a bad example some some attributes are safe like uh um like a",
    "start": "1298279",
    "end": "1303880"
  },
  {
    "text": "WID can't you can't really attack through a width but some attributes are dangerous like Source href onclick on",
    "start": "1303880",
    "end": "1312200"
  },
  {
    "text": "blur any kind of event handler so if you're putting untrusted data into a",
    "start": "1312200",
    "end": "1317279"
  },
  {
    "text": "safe attribute good with the type if you're putting untrusted data into a a",
    "start": "1317279",
    "end": "1322600"
  },
  {
    "text": "prop that goes into a dangerous attribute now you have xss and crate element and so here's an example of a",
    "start": "1322600",
    "end": "1329600"
  },
  {
    "text": "component going wrong right I have some props I build a function I'm putting it",
    "start": "1329600",
    "end": "1334799"
  },
  {
    "text": "directly in an onclick attribute that will whatever code whatever data lands",
    "start": "1334799",
    "end": "1341640"
  },
  {
    "text": "to handle click will be executed when that button is pressed here's an example of xss I saw in an app relatively",
    "start": "1341640",
    "end": "1348760"
  },
  {
    "text": "recently when I think of safe attributes I'm thinking of things like class ID now",
    "start": "1348760",
    "end": "1353840"
  },
  {
    "text": "with ID I can do ID clobbering rarely that's a problem it's mostly sta",
    "start": "1353840",
    "end": "1359919"
  },
  {
    "text": "draggable context menu care set tab index most of these attributes are",
    "start": "1359919",
    "end": "1365320"
  },
  {
    "text": "relatively safe to use as a prop with untrusted data but and these are almost",
    "start": "1365320",
    "end": "1370640"
  },
  {
    "text": "safe right the problem with these is they're URL loaders so if your url is",
    "start": "1370640",
    "end": "1376200"
  },
  {
    "text": "untrusted and not valid it strictly and you put it into an href like a",
    "start": "1376200",
    "end": "1381919"
  },
  {
    "text": "JavaScript URL I'm back to xss these are only safe if you're doing strict",
    "start": "1381919",
    "end": "1387480"
  },
  {
    "text": "validation so let's look at some other dangerous react patterns create element",
    "start": "1387480",
    "end": "1392799"
  },
  {
    "text": "dangerously set in HTML JavaScript URLs untrusted data being dumped into a",
    "start": "1392799",
    "end": "1399600"
  },
  {
    "text": "styled component embedding Json as a performance pattern in securely and",
    "start": "1399600",
    "end": "1404919"
  },
  {
    "text": "building react templates with server side data in a variety of different ways",
    "start": "1404919",
    "end": "1410159"
  },
  {
    "text": "as a developer so here the intro is done let's get into it now as a developer",
    "start": "1410159",
    "end": "1415919"
  },
  {
    "text": "doing react especially when you're doing complicated react you need to master the art of three forms of security",
    "start": "1415919",
    "end": "1422320"
  },
  {
    "text": "validation sanitization and encoding and these are all different things validation is when I have a rule that",
    "start": "1422320",
    "end": "1429840"
  },
  {
    "text": "defines what good data is and if that data doesn't follow that rule we're",
    "start": "1429840",
    "end": "1435000"
  },
  {
    "text": "going to fully reject that data that's good validation sanitization which you should almost",
    "start": "1435000",
    "end": "1440640"
  },
  {
    "text": "never use is going to take bad data and clean it up and then render it this is",
    "start": "1440640",
    "end": "1446480"
  },
  {
    "text": "dangerous in most cases but in react we need to use it for one specific use case",
    "start": "1446480",
    "end": "1451960"
  },
  {
    "text": "encoding which is built into react through jsx will convert data to an",
    "start": "1451960",
    "end": "1457320"
  },
  {
    "text": "equivalent form that's safe to render and so let's take a look at this when it",
    "start": "1457320",
    "end": "1463000"
  },
  {
    "text": "comes to validation if you give me a URL that's a parameter of some kind you got",
    "start": "1463000",
    "end": "1468120"
  },
  {
    "text": "to validate that strictly sanitization if you're giving me HTML as a user that",
    "start": "1468120",
    "end": "1473799"
  },
  {
    "text": "I need to render through a wizzywig editor or similar I want to use HTML sanitizers and when I'm when I want to",
    "start": "1473799",
    "end": "1481440"
  },
  {
    "text": "render data exactly like the user typed it in I want to you like for a CSS",
    "start": "1481440",
    "end": "1486799"
  },
  {
    "text": "variable or embedding Json or putting it through my mustaches that's what escaping is all about so um let's look",
    "start": "1486799",
    "end": "1495000"
  },
  {
    "text": "at dangerous URLs this is the big one right this is the way like about a third of successful attacks work in the real",
    "start": "1495000",
    "end": "1502080"
  },
  {
    "text": "world so I got to validate these URLs strictly so here's the use case or here's the situation suppose you're",
    "start": "1502080",
    "end": "1508760"
  },
  {
    "text": "doing social media and you're asking me to enter my homepage and then when you",
    "start": "1508760",
    "end": "1513880"
  },
  {
    "text": "look at my profile you're going to show my homepage as a link as an anchor tag",
    "start": "1513880",
    "end": "1519399"
  },
  {
    "text": "right this is a common use case in social media or for user profiles the",
    "start": "1519399",
    "end": "1524480"
  },
  {
    "text": "problem is that you the user homepage will get escaped but an escaped",
    "start": "1524480",
    "end": "1530720"
  },
  {
    "text": "attribute is still going to work and execute as a URL so what I can do here",
    "start": "1530720",
    "end": "1536760"
  },
  {
    "text": "is if your only logic is to check if that data is if that's a valid URL",
    "start": "1536760",
    "end": "1544000"
  },
  {
    "text": "that's a valid URL JavaScript document body in HTML dogs are awesome right and",
    "start": "1544000",
    "end": "1550240"
  },
  {
    "text": "so that URL will literally deface the entire page and now even through jsx",
    "start": "1550240",
    "end": "1557720"
  },
  {
    "text": "Auto escaping I just executed evil script because the URL which you",
    "start": "1557720",
    "end": "1563640"
  },
  {
    "text": "validated to be valid is using the JavaScript protocol to execute that",
    "start": "1563640",
    "end": "1569240"
  },
  {
    "text": "payload again onethird of all successful attacks are using this methodology and",
    "start": "1569240",
    "end": "1575559"
  },
  {
    "text": "so here's another example of this here I have untrusted data as a payload I have a button with a form action is that",
    "start": "1575559",
    "end": "1582960"
  },
  {
    "text": "payload the payload gets escaped but the URL still works and the URL has not been",
    "start": "1582960",
    "end": "1589679"
  },
  {
    "text": "validated properly there's another example of xss through jsx encoding and",
    "start": "1589679",
    "end": "1597480"
  },
  {
    "text": "so I'll come back to that so in fact react knows this is a problem react has",
    "start": "1597480",
    "end": "1604520"
  },
  {
    "text": "had console warnings in react by default since react 16 and so hey uh a future",
    "start": "1604520",
    "end": "1612600"
  },
  {
    "text": "version of react will block JavaScript URLs as a precaution this is not default",
    "start": "1612600",
    "end": "1617760"
  },
  {
    "text": "even in 18.3 yet so use event handlers instead if you need to generate unsafe",
    "start": "1617760",
    "end": "1623880"
  },
  {
    "text": "HTML um try using dangerously set in HTML instead H this is a bad error in the",
    "start": "1623880",
    "end": "1632200"
  },
  {
    "text": "first place this is this is not a good idea so not only are they not blocking the air console message is not so not",
    "start": "1632200",
    "end": "1639159"
  },
  {
    "text": "very safe either so H we can't read that code but here's the actual code where they're applying this defense it's a big",
    "start": "1639159",
    "end": "1646000"
  },
  {
    "text": "ugly regular expression so this is the number one way I can pop",
    "start": "1646000",
    "end": "1651120"
  },
  {
    "text": "react with malicious JavaScript what's the solution I I my goal is for react to",
    "start": "1651120",
    "end": "1659679"
  },
  {
    "text": "defend itself I never want to depend on an API giving me safe data so I can do",
    "start": "1659679",
    "end": "1667679"
  },
  {
    "text": "server side validation of a URL but I'm going to follow the path of angular I",
    "start": "1667679",
    "end": "1673159"
  },
  {
    "text": "want react to take an untrusted URL and do the validation in react itself so I",
    "start": "1673159",
    "end": "1680240"
  },
  {
    "text": "do something like this I have this untrusted URL that I want to add into an",
    "start": "1680240",
    "end": "1685320"
  },
  {
    "text": "anchor tag or similar so I'm going to grab the URL and I'm going to check if it's a valid URL in line three I'm going",
    "start": "1685320",
    "end": "1691840"
  },
  {
    "text": "to make sure the protocol is only https those are my rules it must be a valid",
    "start": "1691840",
    "end": "1698240"
  },
  {
    "text": "URL and it can't be JavaScript it can't be data it shouldn't be HTTP or FTP so",
    "start": "1698240",
    "end": "1705720"
  },
  {
    "text": "my strict rule here is that you are L may only be https and I do this in react",
    "start": "1705720",
    "end": "1713440"
  },
  {
    "text": "before I render it so even if an API developer makes a mistake and gives me",
    "start": "1713440",
    "end": "1718799"
  },
  {
    "text": "unvalid data that untrusted URL will only render if it's safe and so my full",
    "start": "1718799",
    "end": "1726720"
  },
  {
    "text": "way of I make I make a little component that says the sanitized URLs and the href target is underscore blank and I",
    "start": "1726720",
    "end": "1734159"
  },
  {
    "text": "say no opener and no referer it's a bit redundant this is a safe way to render",
    "start": "1734159",
    "end": "1740000"
  },
  {
    "text": "an untrusted URL from a user in an anchor tag what else do we have here um",
    "start": "1740000",
    "end": "1746600"
  },
  {
    "text": "there same function there's spelt let's look at rendering HTML so we're pretty clear on handling untrusted URLs in",
    "start": "1746600",
    "end": "1754679"
  },
  {
    "text": "react you validate make sure it's legal and make sure it's only a safe protocol",
    "start": "1754679",
    "end": "1760760"
  },
  {
    "text": "there's a and I recommend you make a component for rendering an anchor tag for that URL if that's what you need so",
    "start": "1760760",
    "end": "1767399"
  },
  {
    "text": "it's automat atic when other developers are doing this type of type of programming next let's look at HTML this",
    "start": "1767399",
    "end": "1774080"
  },
  {
    "text": "for sanitization in the world of the web we have good old tiny MCE It's A wizzy",
    "start": "1774080",
    "end": "1779799"
  },
  {
    "text": "Wig editor as a library um there's many others out there like frola and the CK",
    "start": "1779799",
    "end": "1785600"
  },
  {
    "text": "editor this get this get lets me do Rich Text editing when I hit submit it",
    "start": "1785600",
    "end": "1790760"
  },
  {
    "text": "submits a chunk of HTML to the server and then I want to grab the HTML and",
    "start": "1790760",
    "end": "1795799"
  },
  {
    "text": "render it in react so the problem though when you render data in react in your",
    "start": "1795799",
    "end": "1802360"
  },
  {
    "text": "mustaches Auto escaped raw HTML looks just like the HTML on the screen so then",
    "start": "1802360",
    "end": "1809720"
  },
  {
    "text": "I then I go Google how do I turn off escaping and the first result is ah just",
    "start": "1809720",
    "end": "1815120"
  },
  {
    "text": "use dangerously set in HTML with no security guidance I'm like really and if",
    "start": "1815120",
    "end": "1820360"
  },
  {
    "text": "you look at that um stack Overflow hit you'll see me in there as Mana code ranting and raving that this is a bad",
    "start": "1820360",
    "end": "1828080"
  },
  {
    "text": "bad suggestion right anyways so they're going to tell you use dangerously set",
    "start": "1828080",
    "end": "1833519"
  },
  {
    "text": "inner HTML this turns off the auto escaping so if you're my rule is if I'm",
    "start": "1833519",
    "end": "1840080"
  },
  {
    "text": "going to use dangerously set in HTML then I'm going to disable the auto if",
    "start": "1840080",
    "end": "1846399"
  },
  {
    "text": "I'm going to use dangerously set in HTML then I'm going to use a sanitizer the main sanitizer in react is a library",
    "start": "1846399",
    "end": "1854919"
  },
  {
    "text": "called Dom purify like any third party Library if you're going to use Dom purify keep it up to dat on the server",
    "start": "1854919",
    "end": "1864240"
  },
  {
    "text": "doing server side coding keeping libraries up to date is difficult on the",
    "start": "1864240",
    "end": "1869440"
  },
  {
    "text": "client doing massive JavaScript work keeping libraries up to date is nearly",
    "start": "1869440",
    "end": "1875080"
  },
  {
    "text": "impossible of a task I get interrupted three times a day with some Library being up to date this is why I minimize",
    "start": "1875080",
    "end": "1882760"
  },
  {
    "text": "my use of thirdparty react plugins and similar to ease the third party l Bary",
    "start": "1882760",
    "end": "1888320"
  },
  {
    "text": "update burden it's part of our duty these days even though it's awful so Dom purify has one function right sanitize",
    "start": "1888320",
    "end": "1896159"
  },
  {
    "text": "it takes a big chunk of HTML and very accurately strips out the JavaScript and",
    "start": "1896159",
    "end": "1901600"
  },
  {
    "text": "other malicious code so you can render it safely and there's a lot of ways that you can configure Dom purify for example",
    "start": "1901600",
    "end": "1909919"
  },
  {
    "text": "um it allows image tags I can't execute script to an image tag easily right and",
    "start": "1909919",
    "end": "1915279"
  },
  {
    "text": "so what it does is it lets me specify which domains are legal for my image",
    "start": "1915279",
    "end": "1920799"
  },
  {
    "text": "tags and will sanitize out any URL that's not in my allow list do by",
    "start": "1920799",
    "end": "1927080"
  },
  {
    "text": "default Dom purify lets you embed an image from anywhere right and so I can",
    "start": "1927080",
    "end": "1932880"
  },
  {
    "text": "also do even more in-depth configuration of Dom purify to limit like to limit",
    "start": "1932880",
    "end": "1939440"
  },
  {
    "text": "where those URLs are allowed to land honestly for the most part you could just use Dom purify raw and just and",
    "start": "1939440",
    "end": "1948080"
  },
  {
    "text": "just allow it to render allow it to clean any HTML and render it and you're",
    "start": "1948080",
    "end": "1953320"
  },
  {
    "text": "going to be safe from JavaScript execution that's the main goal of that Library it does a really good job but",
    "start": "1953320",
    "end": "1960120"
  },
  {
    "text": "again like any Library especially a security Library keep it up to date so",
    "start": "1960120",
    "end": "1967039"
  },
  {
    "text": "using dangerously set in HTML anywhere in your code on Raw data is a",
    "start": "1967039",
    "end": "1973480"
  },
  {
    "text": "vulnerability and what you want to do is go do a search go look for any use of d angly set in HTML take that content run",
    "start": "1973480",
    "end": "1980799"
  },
  {
    "text": "it through Dom purify do sanitize and that fixes the problem in most cases right what else do we have here let's",
    "start": "1980799",
    "end": "1988440"
  },
  {
    "text": "talk about Json so one of the performance patterns from the early Redux documentation from the very",
    "start": "1988440",
    "end": "1996159"
  },
  {
    "text": "beginning of react is I want to save a round trip even on a mobile network even on 5G there's a lot of latency even",
    "start": "1996159",
    "end": "2003440"
  },
  {
    "text": "though it's fast what what I mean by that is I make a request I wait I wait",
    "start": "2003440",
    "end": "2008679"
  },
  {
    "text": "and I get the data back fast that latency if you're doing like e-commerce and certain applications a fraction of a",
    "start": "2008679",
    "end": "2015760"
  },
  {
    "text": "second matters in some applications so what I can do is I can embed the initial",
    "start": "2015760",
    "end": "2022320"
  },
  {
    "text": "Json at the top of the page and then render it immediately to save a round",
    "start": "2022320",
    "end": "2027559"
  },
  {
    "text": "trip to the server this is a common for those of you who are really trying to",
    "start": "2027559",
    "end": "2032919"
  },
  {
    "text": "squeeze out page rendering performance you run across this technique embed your",
    "start": "2032919",
    "end": "2038799"
  },
  {
    "text": "initial Json to save a round trip right and so I'll put Json in a nit state or",
    "start": "2038799",
    "end": "2045399"
  },
  {
    "text": "pre-loaded state and the original Redux docs told us just use Json stringify",
    "start": "2045399",
    "end": "2052358"
  },
  {
    "text": "your initial Json and embed that at the top of the page unfortunately this is",
    "start": "2052359",
    "end": "2057638"
  },
  {
    "text": "very bad advice that rippled through the community right and so I can set my",
    "start": "2057639",
    "end": "2062839"
  },
  {
    "text": "address to end the script end that uh Json bracket open up a new script with",
    "start": "2062839",
    "end": "2068240"
  },
  {
    "text": "an attack payload and bypass stringify stringify does not encode it renders",
    "start": "2068240",
    "end": "2073800"
  },
  {
    "text": "Json raw and that's a problem so if you want to render Json embed it on a page",
    "start": "2073800",
    "end": "2082599"
  },
  {
    "text": "safely the what you want to do is basically encode that Json if you're",
    "start": "2082599",
    "end": "2087638"
  },
  {
    "text": "doing node did I tell you that some people do JavaScript on the server on purpose I know it it it hurts me but I'm",
    "start": "2087639",
    "end": "2094200"
  },
  {
    "text": "only kidding node folks but I can either serialize it I can use it Json encoder I",
    "start": "2094200",
    "end": "2099240"
  },
  {
    "text": "can just use a straight up uh JavaScript encoder I want to make sure that Json is within quotes a quoted string and this",
    "start": "2099240",
    "end": "2106560"
  },
  {
    "text": "problem goes away it's typically pretty easy to fix and it is a nice performance",
    "start": "2106560",
    "end": "2111640"
  },
  {
    "text": "pattern this matters in e-commerce in certain applications to speed things up so I serialize my Json or I encode my",
    "start": "2111640",
    "end": "2119240"
  },
  {
    "text": "Json or I just encode for JavaScript use JavaScript hex en coding when I'm",
    "start": "2119240",
    "end": "2124599"
  },
  {
    "text": "embedding Jason on a page I put it in a JavaScript variable of some kind and I make sure that Json is in a quoted",
    "start": "2124599",
    "end": "2132000"
  },
  {
    "text": "string and this problem goes away next dangerous Styles right so take so take a",
    "start": "2132000",
    "end": "2140400"
  },
  {
    "text": "guess why so many um styled components in react have this CSS injection",
    "start": "2140400",
    "end": "2146640"
  },
  {
    "text": "vulnerability when I say CSS injection here's examples of me injecting can I",
    "start": "2146640",
    "end": "2153520"
  },
  {
    "text": "ask the the folks a favor please can someone grab me some water I'm dying up here here it's my mistake can I beg the",
    "start": "2153520",
    "end": "2160240"
  },
  {
    "text": "conference for a glass of water or JY water is preferred okay so background",
    "start": "2160240",
    "end": "2167400"
  },
  {
    "text": "image background PHP Echo get background I can now modify the whole background",
    "start": "2167400",
    "end": "2173680"
  },
  {
    "text": "image and and inject code or I have a color where I'm just dumping in the user profile selected color I can modify that",
    "start": "2173680",
    "end": "2181000"
  },
  {
    "text": "whole CSS block and so when you give me attacker controlled CSS here's a legacy",
    "start": "2181000",
    "end": "2187680"
  },
  {
    "text": "attack it doesn't work so much but it gives you an idea of what these problems are if I put an input type password when",
    "start": "2187680",
    "end": "2195200"
  },
  {
    "text": "the value is a I can oh thank you so much you're awesome I'm very grateful Ser I can say if it's a password field",
    "start": "2195200",
    "end": "2203720"
  },
  {
    "text": "and the letter is a then send a request to any endpoint with the letter a in it",
    "start": "2203720",
    "end": "2208839"
  },
  {
    "text": "this is a keystroke logger in pure CSS again it doesn't work so much anymore",
    "start": "2208839",
    "end": "2214680"
  },
  {
    "text": "but this is the kind of problems you'll run across if you let a user author",
    "start": "2214680",
    "end": "2220119"
  },
  {
    "text": "their own CSS and you render it raw I love water there we go and",
    "start": "2220119",
    "end": "2227960"
  },
  {
    "text": "so here's how you know I'm not really Danish you ready I prefer water over",
    "start": "2227960",
    "end": "2234520"
  },
  {
    "text": "alcohol wait for slight okay so default back I thought my German friends could",
    "start": "2234520",
    "end": "2240119"
  },
  {
    "text": "drink until I got to Denmark holy cow you folks can drink all right anyways default background URL we have a UR URL",
    "start": "2240119",
    "end": "2248280"
  },
  {
    "text": "cookie plus document.cookie here's another cookie theft or Data Theft",
    "start": "2248280",
    "end": "2253319"
  },
  {
    "text": "attack in pure CSS and so the answer is to use the raw JavaScript function CSS",
    "start": "2253319",
    "end": "2260079"
  },
  {
    "text": "escape and this problem goes away when you have like a a CSS value that's",
    "start": "2260079",
    "end": "2265200"
  },
  {
    "text": "untrusted from a user you run it through css. Escape but why do so many react",
    "start": "2265200",
    "end": "2270760"
  },
  {
    "text": "component Builders not use this and the answer is painful because this function",
    "start": "2270760",
    "end": "2275839"
  },
  {
    "text": "does not work in ie11 and fails the ie11 test Case ie11",
    "start": "2275839",
    "end": "2283359"
  },
  {
    "text": "is dead is anyone developing any code on ie11 anymore in this room I'll give you",
    "start": "2283359",
    "end": "2291240"
  },
  {
    "text": "free therapy if you are no so i1's dead but we still have a lot of test case",
    "start": "2291240",
    "end": "2297800"
  },
  {
    "text": "failing because of it because this function doesn't work in ie11 I digress here's CSS Escape in",
    "start": "2297800",
    "end": "2303680"
  },
  {
    "text": "action where I have like a set property here um with my variable I'm just CSS escaping",
    "start": "2303680",
    "end": "2310200"
  },
  {
    "text": "the value this is a native JavaScript function to allow you to put untrusted",
    "start": "2310200",
    "end": "2315800"
  },
  {
    "text": "data into a CSS value all right let me rant for a bit please don't edit the Dom",
    "start": "2315800",
    "end": "2322280"
  },
  {
    "text": "with the ref what are you doing react is elegant there's many ways to render data",
    "start": "2322280",
    "end": "2328200"
  },
  {
    "text": "you never ever need to use a ref to edit the Dom directly now if you're doing",
    "start": "2328200",
    "end": "2333680"
  },
  {
    "text": "programmatic Focus scrolling or a clickaway Handler I use refs for that I if I want to use fine Dom node or a ref",
    "start": "2333680",
    "end": "2340599"
  },
  {
    "text": "for readon Access eh that's okay but actually editing the Dom you circumvent",
    "start": "2340599",
    "end": "2346680"
  },
  {
    "text": "all of react security let's do this let's take a moment together and do",
    "start": "2346680",
    "end": "2352160"
  },
  {
    "text": "security confessions this is a chance for Redemption and healing anybody who",
    "start": "2352160",
    "end": "2357839"
  },
  {
    "text": "who here wants to admit that theyve youed a ref edit the Dom directly come on admit to it do you want healing do",
    "start": "2357839",
    "end": "2365119"
  },
  {
    "text": "you want to be do you promise and Comm MIT moving forward you will stop using ref toit the Dom",
    "start": "2365119",
    "end": "2371839"
  },
  {
    "text": "directly you are you are redeemed of your past sins let's move on so now",
    "start": "2371839",
    "end": "2377960"
  },
  {
    "text": "here's the thing though if you suppose you're like yeah I'm not going to do it and you're crossing your fingers and you're like Jim I can't stop I won't",
    "start": "2377960",
    "end": "2385160"
  },
  {
    "text": "stop I love my refs and you can't stop me you PowerPoint jockey that's a fair comment so let me show you how to use",
    "start": "2385160",
    "end": "2392160"
  },
  {
    "text": "refs properly if you're gonna ref to modify content here's how you do it text",
    "start": "2392160",
    "end": "2397920"
  },
  {
    "text": "content insert adjacent text use set attribute with one of the safe attributes only create text node create",
    "start": "2397920",
    "end": "2405680"
  },
  {
    "text": "element these are all safe from JavaScript injection and if you've been listening if you're using in HTML on Raw",
    "start": "2405680",
    "end": "2413200"
  },
  {
    "text": "data that's a major vulnerability how can I put untrusted data into inner HTML",
    "start": "2413200",
    "end": "2419880"
  },
  {
    "text": "safely to avoid JavaScript injection how can I put data into in",
    "start": "2419880",
    "end": "2426079"
  },
  {
    "text": "HTML safely what library do I need to use to clean up the mess Dom purify so",
    "start": "2426079",
    "end": "2432760"
  },
  {
    "text": "if you're going to use inter HTML in your ref crazy world then use Dom purify",
    "start": "2432760",
    "end": "2439240"
  },
  {
    "text": "to sanitize I was looking at a legacy react app with many bugs all that we did",
    "start": "2439240",
    "end": "2444839"
  },
  {
    "text": "was we took down purify and ran it against every variable entering the app",
    "start": "2444839",
    "end": "2449920"
  },
  {
    "text": "and it fixed the problem we were live again in a relatively short amount of time this is a great library to help you",
    "start": "2449920",
    "end": "2456680"
  },
  {
    "text": "remediate some Legacy insecure code and remember there's our safe attribute list",
    "start": "2456680",
    "end": "2462000"
  },
  {
    "text": "these are attributes that don't execute JavaScript or don't load untrusted URLs",
    "start": "2462000",
    "end": "2468240"
  },
  {
    "text": "these URL handlers are safe if you strictly validate the URL domain",
    "start": "2468240",
    "end": "2475240"
  },
  {
    "text": "protocol and make sure it's legal let's talk Access Control one more time right",
    "start": "2475240",
    "end": "2480920"
  },
  {
    "text": "avoid any access control and client side react and this is again it is rare when",
    "start": "2480920",
    "end": "2488319"
  },
  {
    "text": "I see developers follow this but keep in mind again I got view Source I see all",
    "start": "2488319",
    "end": "2493520"
  },
  {
    "text": "your forms all your links all your data I saw this one app recently by a really",
    "start": "2493520",
    "end": "2498640"
  },
  {
    "text": "smart team that delivered Json to the browser with all kinds of sensitive data",
    "start": "2498640",
    "end": "2504920"
  },
  {
    "text": "that the user did not have access to and then use JavaScript to limit what they",
    "start": "2504920",
    "end": "2510319"
  },
  {
    "text": "couldn't could not see this is not going to work I can view Source or just intercept the response so you want to",
    "start": "2510319",
    "end": "2517240"
  },
  {
    "text": "follow the principle of lease privilege incredibly strictly only give me data",
    "start": "2517240",
    "end": "2523560"
  },
  {
    "text": "code links everything that I have access to only and so this is why I typically",
    "start": "2523560",
    "end": "2530400"
  },
  {
    "text": "build one app for my normal users another app for my admins and I have completely separate apps for privileged",
    "start": "2530400",
    "end": "2538000"
  },
  {
    "text": "users I have no choice if I care about security and this is the the early",
    "start": "2538000",
    "end": "2543680"
  },
  {
    "text": "principle of lease privilege from Jerome salzer from like",
    "start": "2543680",
    "end": "2549040"
  },
  {
    "text": "1976 I think where every Mo so every module must be able to only access",
    "start": "2549040",
    "end": "2555240"
  },
  {
    "text": "information resources that it requires and no more this is a very big and",
    "start": "2555240",
    "end": "2561119"
  },
  {
    "text": "common design flaw in the react development world and so what if you",
    "start": "2561119",
    "end": "2566880"
  },
  {
    "text": "really want to combine um applications if you really want to make a user",
    "start": "2566880",
    "end": "2572000"
  },
  {
    "text": "interface that has a variety of different access control levels of access one thing I have seen some",
    "start": "2572000",
    "end": "2578640"
  },
  {
    "text": "developers do is called lazy loading this does not expose any code to the client it will dynamically load what it",
    "start": "2578640",
    "end": "2586559"
  },
  {
    "text": "needs only then I do strict Access Control at the API level so I can't feed",
    "start": "2586559",
    "end": "2592760"
  },
  {
    "text": "anything to react that that user doesn't have access to but typically I'm building a separate app for admins a",
    "start": "2592760",
    "end": "2600200"
  },
  {
    "text": "separate app for normal users because if I merge those together it leads to all kinds of exposure in the access control",
    "start": "2600200",
    "end": "2606760"
  },
  {
    "text": "world that that should not happen hey how much time do I have left how am I",
    "start": "2606760",
    "end": "2612000"
  },
  {
    "text": "doing can I get a Time hey NDC five minutes 15 minutes 25 minutes",
    "start": "2612000",
    "end": "2622079"
  },
  {
    "text": "15 okay great so let's look at third party libraries right in the world of",
    "start": "2622079",
    "end": "2627200"
  },
  {
    "text": "react um all apps should try to use the latest version of react right we saw a",
    "start": "2627200",
    "end": "2633040"
  },
  {
    "text": "flaw back in 0.14 I still see people people using that version of react in the Legacy",
    "start": "2633040",
    "end": "2640119"
  },
  {
    "text": "world and so again and the also the other problem here is that we see like a",
    "start": "2640119",
    "end": "2645800"
  },
  {
    "text": "variety of different JavaScript modules added on a daily basis what's the JavaScript module ecosystem remember",
    "start": "2645800",
    "end": "2652720"
  },
  {
    "text": "what I said a morass of insecure filth that's the majority of it I'm not it's",
    "start": "2652720",
    "end": "2658760"
  },
  {
    "text": "just the truth right so you got to be really careful about what you're using in the world of JavaScript these",
    "start": "2658760",
    "end": "2664200"
  },
  {
    "text": "thirdparty components they have no security G guarantee always do a security audit of your third party",
    "start": "2664200",
    "end": "2670839"
  },
  {
    "text": "component before you use it I'll show you a few things to look for and just because a component is popular or has a",
    "start": "2670839",
    "end": "2677720"
  },
  {
    "text": "lot of stars on GitHub woohoo it doesn't mean anyone did a security audit you want to use Automation and scanners and",
    "start": "2677720",
    "end": "2685000"
  },
  {
    "text": "similar to make sure these components are up to dat and not vulnerable so when I review so again these thirdparty",
    "start": "2685000",
    "end": "2691839"
  },
  {
    "text": "libraries have issues check your dependencies when I'm reviewing a thirdparty library module in the react",
    "start": "2691839",
    "end": "2698400"
  },
  {
    "text": "World I first looked for the use of dangerously set in HTML on Raw data if",
    "start": "2698400",
    "end": "2703480"
  },
  {
    "text": "they're doing that they're out if they're using in HTML on Raw data they're out if they're taking URLs at a",
    "start": "2703480",
    "end": "2710520"
  },
  {
    "text": "parameter from a user and rening them with no good validation they're out or any other unsafe patterns we talked",
    "start": "2710520",
    "end": "2715880"
  },
  {
    "text": "about in this presentation also avoid libraries if you can that insert HTML",
    "start": "2715880",
    "end": "2723119"
  },
  {
    "text": "directly into the Dom I still do that because it's my habit but there are better libraries like react markdown",
    "start": "2723119",
    "end": "2729599"
  },
  {
    "text": "that use the react API to construct elements rather than dangerously set in",
    "start": "2729599",
    "end": "2735000"
  },
  {
    "text": "HTML so markdown still has problems but I go from markdown I go I I use a wiiz",
    "start": "2735000",
    "end": "2741240"
  },
  {
    "text": "editor HTML to markdown markdown to react API function calls and the",
    "start": "2741240",
    "end": "2748119"
  },
  {
    "text": "performance is actually better and less chance of security problems so that's my preferred pattern I don't I don't use it",
    "start": "2748119",
    "end": "2754400"
  },
  {
    "text": "myself but I at least look at Li liaries that do this and they're out there and",
    "start": "2754400",
    "end": "2760359"
  },
  {
    "text": "so there's some tools you can use there's a great uh erlin ofall from from Norway wrote retire. JS which will let",
    "start": "2760359",
    "end": "2768839"
  },
  {
    "text": "you as a browser plugin detect every you're using insecure libraries we also see just straight up mpm audit will",
    "start": "2768839",
    "end": "2775920"
  },
  {
    "text": "force update your whole JavaScript stack and Es lint is amazing I code with",
    "start": "2775920",
    "end": "2782599"
  },
  {
    "text": "eslint with some of the security plugins turned on and it radically helps me build better",
    "start": "2782599",
    "end": "2790000"
  },
  {
    "text": "code one sec here there we one more issue I I got thank you so",
    "start": "2790280",
    "end": "2797280"
  },
  {
    "text": "much open redirects is also a problem in react so what's the problem here right I",
    "start": "2797280",
    "end": "2803160"
  },
  {
    "text": "have a URL parameter that we're going to redirect to after the user is done",
    "start": "2803160",
    "end": "2809160"
  },
  {
    "text": "logging in this is a common pattern and a login mechanism right I I have a",
    "start": "2809160",
    "end": "2814359"
  },
  {
    "text": "bookmark I hit the bookmark I'm not logged in you redirect me to the login page you take the previous URL and put",
    "start": "2814359",
    "end": "2821160"
  },
  {
    "text": "it as a parameter I log in you redirect me back but the problem is I can just modify that and make it an evil URL and",
    "start": "2821160",
    "end": "2829520"
  },
  {
    "text": "I'll give you this URL you log in when you're done you go to my evil website",
    "start": "2829520",
    "end": "2835119"
  },
  {
    "text": "that has an exact copy of your login page and says login failed you log in again I got your password I redirect you",
    "start": "2835119",
    "end": "2842000"
  },
  {
    "text": "back to your homepage and you're logged in because of this bad parameter that",
    "start": "2842000",
    "end": "2847240"
  },
  {
    "text": "you're not validating and so um redirects are used to establish a user a",
    "start": "2847240",
    "end": "2854480"
  },
  {
    "text": "user friendly flow here right and here's this here's this pattern I was talking about I have a a a URL that has an evil",
    "start": "2854480",
    "end": "2863240"
  },
  {
    "text": "redirect parameter for login in step two they load the page that's your login page they log into",
    "start": "2863240",
    "end": "2870280"
  },
  {
    "text": "your login page successfully but then redirects to my fake login page because I can manipulate",
    "start": "2870280",
    "end": "2876680"
  },
  {
    "text": "the redirect parameter it's it's the exact copy of your login page I collect your password I redirect you back to the",
    "start": "2876680",
    "end": "2885359"
  },
  {
    "text": "original site which says you're logged in successfully and without even realizing what happened as the attacker",
    "start": "2885359",
    "end": "2892440"
  },
  {
    "text": "I just got your password because of that one unvalidated URL now how do I",
    "start": "2892440",
    "end": "2897839"
  },
  {
    "text": "validate a URL it's not easy I can do something like this if the URL contains",
    "start": "2897839",
    "end": "2903480"
  },
  {
    "text": "a domain but that domain could be oh kinds of things could be a get parameter",
    "start": "2903480",
    "end": "2910000"
  },
  {
    "text": "a subdomain dealing with URLs that are untrusted is a much more difficult",
    "start": "2910000",
    "end": "2917160"
  },
  {
    "text": "problem than anyone would have thought it's such a big problem that The Oaf 2",
    "start": "2917160",
    "end": "2922440"
  },
  {
    "text": "standard body said stop validating URLs stop it just use a basic just use basic",
    "start": "2922440",
    "end": "2930240"
  },
  {
    "text": "string matching and use an allow list of valid URLs if you have a wildcard",
    "start": "2930240",
    "end": "2936079"
  },
  {
    "text": "subdomain I can put a whole different domain in there and similar problems have showed",
    "start": "2936079",
    "end": "2941799"
  },
  {
    "text": "up that are extremely brutal so when I want to secure a redirect I use a basic",
    "start": "2941799",
    "end": "2947760"
  },
  {
    "text": "allow list of valid URLs if you don't match that I ignore it is usually the",
    "start": "2947760",
    "end": "2953000"
  },
  {
    "text": "best path so here's an example of a secure redirect list I'm only allowing",
    "start": "2953000",
    "end": "2958400"
  },
  {
    "text": "redirect to those three endpoints if you're in the list I'm going to redirect you if not I'm going to either take you",
    "start": "2958400",
    "end": "2965359"
  },
  {
    "text": "to the homepage or just air you out so unfortunately doing things that are very",
    "start": "2965359",
    "end": "2971440"
  },
  {
    "text": "Dynamic with redirection usually leads to security problems and I try to avoid it coming to the end here insecure",
    "start": "2971440",
    "end": "2979200"
  },
  {
    "text": "server side rendering right when it comes to SSR now we're in the world of",
    "start": "2979200",
    "end": "2984359"
  },
  {
    "text": "node where they write JavaScript on the server on purpose yeah",
    "start": "2984359",
    "end": "2990200"
  },
  {
    "text": "exactly so serers side rendering um this is all about using re and it's this is a",
    "start": "2990200",
    "end": "2995880"
  },
  {
    "text": "awesome blade aming fast performance pattern right I'm going to use all the render two functions to assemble HTML on",
    "start": "2995880",
    "end": "3002640"
  },
  {
    "text": "the server and send assembled HTML to the client and let my server side big",
    "start": "3002640",
    "end": "3008520"
  },
  {
    "text": "engine take care of all the work this is an interesting pattern I I've been playing with it lately I like it but the",
    "start": "3008520",
    "end": "3014880"
  },
  {
    "text": "issue is you you can't mix the render two functions with the raw variable that",
    "start": "3014880",
    "end": "3021040"
  },
  {
    "text": "that's the problem you cannot mix the render two functions with the raw",
    "start": "3021040",
    "end": "3026280"
  },
  {
    "text": "variable and I see this a lot so it's actually easy to avoid this problem but",
    "start": "3026280",
    "end": "3031400"
  },
  {
    "text": "I I again I see a lot of this in server side code the the other deal is all the",
    "start": "3031400",
    "end": "3037280"
  },
  {
    "text": "other security best practices that we talked about you need to apply those",
    "start": "3037280",
    "end": "3042359"
  },
  {
    "text": "when doing SSR like any other react code one more thing here is a lot of",
    "start": "3042359",
    "end": "3051520"
  },
  {
    "text": "folks in the job like the old school world of doing server side templates they now want to migrate to react and",
    "start": "3051520",
    "end": "3058599"
  },
  {
    "text": "when I'm seeing that kind of like Java server page active server page PHP template migration to react I see this a",
    "start": "3058599",
    "end": "3065640"
  },
  {
    "text": "lot they're grabbing a parameter from the user and they're using it in the middle of a template and that's a",
    "start": "3065640",
    "end": "3072839"
  },
  {
    "text": "problem react templates are not meant to be rendered dynamically on the server",
    "start": "3072839",
    "end": "3078640"
  },
  {
    "text": "they should be relatively static sent to the client do a round trip Json and then",
    "start": "3078640",
    "end": "3084160"
  },
  {
    "text": "populate so this name parameter that should have be delivered over Json",
    "start": "3084160",
    "end": "3089559"
  },
  {
    "text": "to the client but this developer is migrating a Java server page to react and now I can inject any JavaScript I",
    "start": "3089559",
    "end": "3097359"
  },
  {
    "text": "want into the name and mess up the template and inject evil JavaScript so",
    "start": "3097359",
    "end": "3102960"
  },
  {
    "text": "please avoid dynamically creating react templates with user data so last but not",
    "start": "3102960",
    "end": "3109880"
  },
  {
    "text": "least client side logging I've been doing a lot of logging in react and the only note I want to make here is if",
    "start": "3109880",
    "end": "3116799"
  },
  {
    "text": "you're going to do react logging make sure the API endpoint that's collecting your logs um is not going to be a",
    "start": "3116799",
    "end": "3124280"
  },
  {
    "text": "performance bottleneck so in react when I kick off a log I don't use a blocking",
    "start": "3124280",
    "end": "3129400"
  },
  {
    "text": "function I kick it off asynchronously so if the log endpoint is being throttled",
    "start": "3129400",
    "end": "3134880"
  },
  {
    "text": "that it doesn't affect the react app I also make sure that on the server only",
    "start": "3134880",
    "end": "3140559"
  },
  {
    "text": "authenticated users can hit my logging endpoint public logging endpoints are",
    "start": "3140559",
    "end": "3145680"
  },
  {
    "text": "asking for trouble anything else we want to talk about here I think we're near in the we're",
    "start": "3145680",
    "end": "3152640"
  },
  {
    "text": "near in the end of this presentation a few final notes right um",
    "start": "3152640",
    "end": "3158480"
  },
  {
    "text": "I highly recommend what do we talk about we looked at all of these different categories right we we looked at basic",
    "start": "3158480",
    "end": "3165359"
  },
  {
    "text": "crossy scripting dangerous URLs rendering HTML securing Json Styles",
    "start": "3165359",
    "end": "3170640"
  },
  {
    "text": "insecure native Dom Access Control failures vulnerable dependencies open redirects in secure server side",
    "start": "3170640",
    "end": "3177880"
  },
  {
    "text": "rendering these are the categories we talked about from a defensive point of view I have a few minutes does anybody",
    "start": "3177880",
    "end": "3184480"
  },
  {
    "text": "have any questions about anything we talked about today any questions at all",
    "start": "3184480",
    "end": "3191160"
  },
  {
    "text": "yes sir",
    "start": "3191160",
    "end": "3198720"
  },
  {
    "text": "awesome I would use a non spaced policy and avoid allow listing allow listing",
    "start": "3200240",
    "end": "3207160"
  },
  {
    "text": "Google research showed me that 94% of content security policy allow",
    "start": "3207160",
    "end": "3213640"
  },
  {
    "text": "lists were bypassable in some way that's csp1 csp2 allowed to use a not so in the",
    "start": "3213640",
    "end": "3221160"
  },
  {
    "text": "header you'll have a non value drop the allow list and for every script block and script loader drop the nons in",
    "start": "3221160",
    "end": "3228160"
  },
  {
    "text": "that's going to be a much more robust way and frankly easier way to roll out",
    "start": "3228160",
    "end": "3233200"
  },
  {
    "text": "CSP the only trouble is if you not a lot Library it's not going to pick up all",
    "start": "3233200",
    "end": "3238839"
  },
  {
    "text": "the dependencies so you want to use a modern Library not the library and then",
    "start": "3238839",
    "end": "3244760"
  },
  {
    "text": "use the csp3 call strict Dynamic that assumes you're keeping your libraries up",
    "start": "3244760",
    "end": "3251079"
  },
  {
    "text": "to date and if you not one Library it will automatically let all the dependencies load so this is known as",
    "start": "3251079",
    "end": "3257880"
  },
  {
    "text": "very strict CSP from Google research CS use non drop the allow list it's basic",
    "start": "3257880",
    "end": "3265359"
  },
  {
    "text": "overall recommendation right there's always exceptions use an allow list sorry avoid the allow list use a Nots",
    "start": "3265359",
    "end": "3273359"
  },
  {
    "text": "and if you have libraries with many dependencies then use strict Dynamic",
    "start": "3273359",
    "end": "3278920"
  },
  {
    "text": "from csp3 even better use prime libraries with very few dependencies",
    "start": "3278920",
    "end": "3285359"
  },
  {
    "text": "drop strict Dynamic and announce all the libraries you need is going to be the",
    "start": "3285359",
    "end": "3291200"
  },
  {
    "text": "strictest form of CSP and many of these JavaScript problems even if they exec",
    "start": "3291200",
    "end": "3296400"
  },
  {
    "text": "Ute CSP will stop these problems but still write secure react CSP is a",
    "start": "3296400",
    "end": "3303319"
  },
  {
    "text": "compensating control any other questions good question by the way I hope this",
    "start": "3303319",
    "end": "3309440"
  },
  {
    "text": "presentation was of use to you a few last notes use eslint I use eslint with",
    "start": "3309440",
    "end": "3315680"
  },
  {
    "text": "the eslint security plugin and the react plug-in and for free it will pick up a",
    "start": "3315680",
    "end": "3321880"
  },
  {
    "text": "lot of these issues and flag it during development that I'm making making this mistake the earlier you find these",
    "start": "3321880",
    "end": "3329640"
  },
  {
    "text": "problems the better by far and so again use a linter to check your code I think",
    "start": "3329640",
    "end": "3335440"
  },
  {
    "text": "eslint is the best if you have questions for me Beyond today you can reach me at",
    "start": "3335440",
    "end": "3340960"
  },
  {
    "text": "Jim manac code.com I'm a local resident here in Copenhagen now I'm really happy",
    "start": "3340960",
    "end": "3346720"
  },
  {
    "text": "to be here thank you so much for listening to my presentation and hey enjoy the rest of the conference go",
    "start": "3346720",
    "end": "3352200"
  },
  {
    "text": "forth and write secure code everybody thank you so very much",
    "start": "3352200",
    "end": "3358200"
  }
]