[
  {
    "start": "0",
    "end": "129000"
  },
  {
    "text": "okay by my watch I make it time so thank you very much for coming along I know",
    "start": "199",
    "end": "6150"
  },
  {
    "text": "it's the last talk of the day so I suspect everyone is now quite tired seen quite a lot of talks quite a lot",
    "start": "6150",
    "end": "11820"
  },
  {
    "text": "technical content and have probably just hanging around because there's beer later but thank you very much for coming",
    "start": "11820",
    "end": "19260"
  },
  {
    "text": "whatever your reasons my name is Steve I'm a senior developer for a company called magics so we're",
    "start": "19260",
    "end": "26189"
  },
  {
    "text": "based down in Brighton and we do suffer as a service recruitment products primarily so products to engage",
    "start": "26189",
    "end": "32180"
  },
  {
    "text": "recruiters and employers with the right professional audiences I'm also a",
    "start": "32180",
    "end": "37350"
  },
  {
    "text": "Microsoft MVP and I run a small meetup group down in Brighton called net southeast which we we host out of the",
    "start": "37350",
    "end": "43469"
  },
  {
    "text": "magics offices I also have a blog so if you want to find out any more",
    "start": "43469",
    "end": "48719"
  },
  {
    "text": "information about some of the stuff I'm going to cover I have blogged quite extensively about I hate to be client factory and some of",
    "start": "48719",
    "end": "54120"
  },
  {
    "text": "the features there so if there's anything that you sort of you think I go over too quickly you can find full code",
    "start": "54120",
    "end": "59489"
  },
  {
    "text": "samples of a lot of the the things I will show you there and if you ever have questions and in the future please do",
    "start": "59489",
    "end": "65610"
  },
  {
    "text": "reach out to me on Twitter that's DJ Gordon so oh and one of the thing to",
    "start": "65610",
    "end": "70770"
  },
  {
    "text": "point out I have put the link there to the slide so a lot a lot of people take pictures of slides and go through the talk but you don't have to they're all",
    "start": "70770",
    "end": "76740"
  },
  {
    "text": "online already so just make sure you've got a picture of this slide and then you're good to go for the rest so the",
    "start": "76740",
    "end": "82979"
  },
  {
    "text": "topic of this talk is kind of HTTP making HTTP requests in dotnet core and",
    "start": "82979",
    "end": "88470"
  },
  {
    "text": "the reason that I feel this is a really interesting time to start talking about this stuff is that more and more of us",
    "start": "88470",
    "end": "94350"
  },
  {
    "text": "are building micro services and smaller services that are communicating with one another and quite often there are some",
    "start": "94350",
    "end": "101460"
  },
  {
    "text": "real-time needs so we're going to use HTTP to make those requests and so because we're now doing this more often",
    "start": "101460",
    "end": "108149"
  },
  {
    "text": "this is quite a vital part of our application code to make sure that we're doing it in the most correct way that we",
    "start": "108149",
    "end": "113490"
  },
  {
    "text": "can to get the best performance that we can and to make sure that we're not going to stumble into any roadblocks so",
    "start": "113490",
    "end": "119549"
  },
  {
    "text": "basically in this talk we're going to take some code and we're going to refactor it through the rest of the hour to subtly improve it as we go the RHIB",
    "start": "119549",
    "end": "129869"
  },
  {
    "start": "129000",
    "end": "477000"
  },
  {
    "text": "app let's talk HTTP so just to set the scene just to make sure everyone's expectations are kind of",
    "start": "129869",
    "end": "135540"
  },
  {
    "text": "correct as to what we're going to cover in this talk we're going to talk about IHT client factory which is a new",
    "start": "135540",
    "end": "140640"
  },
  {
    "text": "feature that came out in dotnet core 2.1 we're going to talk about why we need that to begin with so what are the some",
    "start": "140640",
    "end": "147660"
  },
  {
    "text": "potential pitfalls that you may run into before using I HTTP client factory and therefore what why has it been",
    "start": "147660",
    "end": "154200"
  },
  {
    "text": "introduced in the first place we'll talk about how to use it we'll look at simple examples to begin with or just kind of",
    "start": "154200",
    "end": "160110"
  },
  {
    "text": "converting existing code in the simplest way we can and then we will slowly add",
    "start": "160110",
    "end": "165420"
  },
  {
    "text": "more and more features and layers in from the IH to be for factory Klein set we're going to talk a little bit about",
    "start": "165420",
    "end": "171780"
  },
  {
    "text": "this concept of outgoing middleware how many people in this room is p.net core developers already ok good number so",
    "start": "171780",
    "end": "179640"
  },
  {
    "text": "you'll be familiar with the concept of middleware to bring your request into your application in asp.net core and",
    "start": "179640",
    "end": "186239"
  },
  {
    "text": "it's kind of how we have all cross-cutting concerns and requirements in in those applications just as we can",
    "start": "186239",
    "end": "192239"
  },
  {
    "text": "have incoming middleware for requests that come into the application we can have this same kind of concept with",
    "start": "192239",
    "end": "197549"
  },
  {
    "text": "requests that we're making from our applications and this is a good place to do kind of cross-cutting concerns if you",
    "start": "197549",
    "end": "203489"
  },
  {
    "text": "have logging requirements or you want to do any kind of metrics and monitoring of your requests using this concept of",
    "start": "203489",
    "end": "208980"
  },
  {
    "text": "essentially middleware is a great way to do that we're also going to talk a little bit about a library called poly",
    "start": "208980",
    "end": "214980"
  },
  {
    "text": "and how this can be linked with our HTTP current factory to help us make our requests more resilient and to make our",
    "start": "214980",
    "end": "221370"
  },
  {
    "text": "code better unable to handle transient type problems how many people were in",
    "start": "221370",
    "end": "226739"
  },
  {
    "text": "Brian's talk before this one on poly ok about half so we will kind of skim over",
    "start": "226739",
    "end": "233310"
  },
  {
    "text": "poly but if you want any more information about it I recommend you check out the recording of Brian's talk as well where he can go into much more",
    "start": "233310",
    "end": "239910"
  },
  {
    "text": "detail on these things we'll talk a little bit about patterns and some recommendations I have to work them I",
    "start": "239910",
    "end": "245850"
  },
  {
    "text": "hate to be client and then just generally some other improvements in dotnet core 2.1 that are worth noting I",
    "start": "245850",
    "end": "252299"
  },
  {
    "text": "am generally speaking about dotnet core today there were some differences between what's available in dotnet core and dotnet framework I'm generally",
    "start": "252299",
    "end": "258870"
  },
  {
    "text": "speaking about dotnet core so we're going to start with this piece of code spoiler alert there are some issues",
    "start": "258870",
    "end": "265790"
  },
  {
    "text": "this cave but we're going to start with this because this sort of represents what you may see in in traditional",
    "start": "265790",
    "end": "271340"
  },
  {
    "text": "applications today so this is just a controller and we've got an action method on here and in there what we're",
    "start": "271340",
    "end": "278060"
  },
  {
    "text": "going to do is we're going to make a call to the github API because we want to get some data that we're going to shape into our own object model and then",
    "start": "278060",
    "end": "284630"
  },
  {
    "text": "we're going to return it now before I move on how many people have kind of got code like this in their code bases today",
    "start": "284630",
    "end": "290180"
  },
  {
    "text": "or a single code like this and I sort of vaguely familiar with this okay cool so we're going to look at some issues with",
    "start": "290180",
    "end": "297020"
  },
  {
    "text": "this code we're going to look at some potential pitfalls and hopefully start to factor those out the first piece of",
    "start": "297020",
    "end": "302600"
  },
  {
    "text": "wants to start with is this using statement here so we've got a using statement over there HTTP client because",
    "start": "302600",
    "end": "308930"
  },
  {
    "text": "htb fine implements eye disposable that seems perfectly reasonable because we've",
    "start": "308930",
    "end": "314390"
  },
  {
    "text": "kind of all habit drummed into us that if you're working with something that is a disposable you should dispose of it when you're done and we are done with it",
    "start": "314390",
    "end": "320750"
  },
  {
    "text": "as far as we're concerned at the end of this request but there are some risks",
    "start": "320750",
    "end": "325760"
  },
  {
    "text": "and issues with this when we create a h-2b client we get a HTTP message handler chain and this is the handler",
    "start": "325760",
    "end": "331790"
  },
  {
    "text": "chain that's ultimately going to be responsible for at some point establishing a connection to an endpoint somewhere that we're making this request",
    "start": "331790",
    "end": "338210"
  },
  {
    "text": "to when we dispose of the HTTP client we dispose of that underlying handler chain",
    "start": "338210",
    "end": "343460"
  },
  {
    "text": "and then we dispose or we would release the connection that we we were using that might be okay if we were running",
    "start": "343460",
    "end": "351410"
  },
  {
    "text": "this once maybe just as a start up for our application but here we've got it on an action method and this could be",
    "start": "351410",
    "end": "356510"
  },
  {
    "text": "called 10 20 times a minute a second depending on the load on our own website",
    "start": "356510",
    "end": "361640"
  },
  {
    "text": "and so this piece of code could be also scattered across many other actions and so what we're doing in this scenario is",
    "start": "361640",
    "end": "367520"
  },
  {
    "text": "we're creating many HTTP clients many HTTP handler chains underneath there and",
    "start": "367520",
    "end": "372860"
  },
  {
    "text": "any connection pools that are going to be opened and closed very rapidly the",
    "start": "372860",
    "end": "378020"
  },
  {
    "text": "risk of this is that we can run into a situation where we run out of sockets on the machine because the way the TCP spec",
    "start": "378020",
    "end": "385130"
  },
  {
    "text": "is defined is that when we actively close the connection it doesn't immediately release the port so that",
    "start": "385130",
    "end": "391160"
  },
  {
    "text": "it's available again for the OS to allocate to other processes it will go into what's called a time weight State",
    "start": "391160",
    "end": "396940"
  },
  {
    "text": "typically on Windows that's about two 40 seconds and during that time wait state that port is basically just",
    "start": "396940",
    "end": "403889"
  },
  {
    "text": "sitting there it sits there because it's not gonna be allocated to other processes that may need to make our own connections just in case there's any",
    "start": "403889",
    "end": "410520"
  },
  {
    "text": "latent packets that are still working their way across the network because of this that port is tied up for four",
    "start": "410520",
    "end": "416370"
  },
  {
    "text": "minutes and we have a situation where if we do this frequently we're just going to sit with many many ports sitting in",
    "start": "416370",
    "end": "423540"
  },
  {
    "text": "this time weight state unnecessarily this is kind of what that looks like so",
    "start": "423540",
    "end": "428550"
  },
  {
    "text": "I took that piece of code and just chuck it it chucked it into a loop and ran it 20 times to my blog so on the left-hand",
    "start": "428550",
    "end": "434700"
  },
  {
    "text": "side here you can see I've got 20 different ports that ended up getting used on my local machine all talking to",
    "start": "434700",
    "end": "439919"
  },
  {
    "text": "my website all sat in this time weight state and they're just basically wasted at this point and the situation that we",
    "start": "439919",
    "end": "446460"
  },
  {
    "text": "can run into is if we do this enough and we exhaust all of the sockets then our application cannot make any outgoing",
    "start": "446460",
    "end": "451950"
  },
  {
    "text": "connections at this point and the server that we're running Ison it's affecting all other applications on that server as",
    "start": "451950",
    "end": "458370"
  },
  {
    "text": "well there are no spare ephemeral ports to use there's around 16,000 ephemeral ports roughly on Windows give or take",
    "start": "458370",
    "end": "465000"
  },
  {
    "text": "but if you've got enough of that code that's just kind of dropping in these connections very often you can exhaust",
    "start": "465000",
    "end": "471120"
  },
  {
    "text": "that pretty quickly you will see that as a socket exhausting exception in your application so what's the solution to",
    "start": "471120",
    "end": "478289"
  },
  {
    "start": "477000",
    "end": "605000"
  },
  {
    "text": "that well the recommendation up to the release of dotnet core 2.1 and asp.net core 2.1 was to try and avoid",
    "start": "478289",
    "end": "486950"
  },
  {
    "text": "continually creating and disposing of HTTP client that was the simplest solution because it means we create the",
    "start": "486950",
    "end": "493440"
  },
  {
    "text": "HTTP client and then we keep it around for a period of time and then we use the same connections that we've already",
    "start": "493440",
    "end": "499020"
  },
  {
    "text": "established this is some benefits because there's a small performance hit from establishing connections and doing",
    "start": "499020",
    "end": "504570"
  },
  {
    "text": "TLS handshakes that we don't have to kind of keep taking the hit on as well and ultimately that's going to improve",
    "start": "504570",
    "end": "512550"
  },
  {
    "text": "our application right so what we can do to achieve that there's various ways you might want to do it you might want to",
    "start": "512550",
    "end": "518880"
  },
  {
    "text": "make this kind of a static HTML and on some of your classes or you may want to make it a singleton typically what I",
    "start": "518880",
    "end": "525510"
  },
  {
    "text": "would have done is just register this in DI so this is my startup class I've got a configure services method in",
    "start": "525510",
    "end": "531610"
  },
  {
    "text": "I can set up my dependency injection container and I would just register a HTTP client instance in there as a",
    "start": "531610",
    "end": "537820"
  },
  {
    "text": "singleton and this means that I can inject it where I need to and I will get the same instance time and time again so",
    "start": "537820",
    "end": "543780"
  },
  {
    "text": "if I were to update my controller now to take advantage of this first I would add a constructor here accepting my H to be",
    "start": "543780",
    "end": "551170"
  },
  {
    "text": "client from the dependency injection container and then I could update my code little I don't need to create my",
    "start": "551170",
    "end": "556330"
  },
  {
    "text": "own client anymore I'm going to use that singleton instance that's going to be created once for the lifetime of the",
    "start": "556330",
    "end": "561580"
  },
  {
    "text": "application so I can go into my using statement now one thing I was doing in the previous code was I was setting some",
    "start": "561580",
    "end": "568030"
  },
  {
    "text": "default headers on the client so that all requests through that client in this case just one request would have these",
    "start": "568030",
    "end": "573940"
  },
  {
    "text": "default headers applied with the singleton HTTP client approach there's a bit of a risk to this it is Fredd safe",
    "start": "573940",
    "end": "579700"
  },
  {
    "text": "but there are some properties along like that width there aren't the default headers and the base address there are",
    "start": "579700",
    "end": "585550"
  },
  {
    "text": "some examples of that changing these could have have effect on other components that are using this shared",
    "start": "585550",
    "end": "591160"
  },
  {
    "text": "HTTP client instance that's an easy fix for now I'll just move those to the request and set them on the request per",
    "start": "591160",
    "end": "597790"
  },
  {
    "text": "request basis and then finally I open up my to update my code to use that singleton HTTP client instance but",
    "start": "597790",
    "end": "605860"
  },
  {
    "text": "unfortunately software often has a butt and there is a butt to this with this approach we've created that single h-2b",
    "start": "605860",
    "end": "612970"
  },
  {
    "text": "client and we're sharing it for the life of the application and this means that any connections we establish will try",
    "start": "612970",
    "end": "617980"
  },
  {
    "text": "and live for the lifetime of the application as well the issue with that is that when we first establish a",
    "start": "617980",
    "end": "623380"
  },
  {
    "text": "connection to API github.com for example we're going to do a DNS lookup to get an IP address of a server to speak to and",
    "start": "623380",
    "end": "629710"
  },
  {
    "text": "once we've got that we can establish the connection but that that IP address may not exist there forever",
    "start": "629710",
    "end": "636070"
  },
  {
    "text": "particularly in cloud environments things come and go and typically DNS is now used as a way of switching around",
    "start": "636070",
    "end": "642040"
  },
  {
    "text": "those services the biggest problem would come from an example of maybe using a Bluegreen deployment so if you're",
    "start": "642040",
    "end": "647650"
  },
  {
    "text": "talking to a service that uses that approach maybe like as your web slots you might have a production and staging",
    "start": "647650",
    "end": "652840"
  },
  {
    "text": "slot live at the same time and it's just DNS which is directing traffic to the correct production instance but if we've",
    "start": "652840",
    "end": "659020"
  },
  {
    "text": "established that connection to production and then someone does a deployment and the DNS is used to switch what is considered the",
    "start": "659020",
    "end": "664930"
  },
  {
    "text": "reduction live copy we may be now talking to the wrong instance so having these connections open permanently is",
    "start": "664930",
    "end": "671050"
  },
  {
    "text": "kind of better from the exotic exhaustion point of view but not great from the point of view that we're now not honoring DNS in any way and that's",
    "start": "671050",
    "end": "679480"
  },
  {
    "text": "kind of where httpclient factory comes to the rescue it was designed with various things in",
    "start": "679480",
    "end": "685089"
  },
  {
    "text": "mind but one of the main things that is going to offer us is that it's going to manage the lifetime at those HTTP message handler chains and it's",
    "start": "685089",
    "end": "691330"
  },
  {
    "text": "ultimately than those that are hanging on to the connection so it does that by",
    "start": "691330",
    "end": "696550"
  },
  {
    "text": "basically holding on to a pool of these connections and it will keep them alive by default for two minutes and so all",
    "start": "696550",
    "end": "702580"
  },
  {
    "text": "the while it's handing out HTTP client instances it will use the same handler chain in the same connection as long as",
    "start": "702580",
    "end": "708370"
  },
  {
    "text": "those haven't expired at the time that two minute runs out it kind of just puts it into an expired pool and means that",
    "start": "708370",
    "end": "713529"
  },
  {
    "text": "it won't be issued to any new HTTP client instances so this kind of gives us the best of both we're holding on to",
    "start": "713529",
    "end": "718750"
  },
  {
    "text": "connections for long enough that we're not going to continually create ports and open ports that are then going to",
    "start": "718750",
    "end": "724930"
  },
  {
    "text": "sit in this time light state but we're refreshing periodically to ensure that we do pick up changes that might occur",
    "start": "724930",
    "end": "730180"
  },
  {
    "text": "by closing and reopening those connections and that that two minutes is configurable so if you know that the",
    "start": "730180",
    "end": "735520"
  },
  {
    "text": "downstream system might change more often than you could shorten that life or you can make it longer if you want to",
    "start": "735520",
    "end": "740980"
  },
  {
    "text": "the other things it does is it provides a central location for configuring kind",
    "start": "740980",
    "end": "746140"
  },
  {
    "text": "of logical HTTP client instances so we can set up different configurations HTTP",
    "start": "746140",
    "end": "751600"
  },
  {
    "text": "clients that we may need in our application for dealing with different services and endpoints and then we can",
    "start": "751600",
    "end": "756670"
  },
  {
    "text": "use those at will and we'll see examples of two ways of doing that it also codifies the concept of that",
    "start": "756670",
    "end": "763390"
  },
  {
    "text": "outgoing middleware idea that I talked about so we could always achieve outgoing middleware or the concept of it",
    "start": "763390",
    "end": "769089"
  },
  {
    "text": "using delegating handlers these have been around with HTTP client forever but to set those up and then to pass them",
    "start": "769089",
    "end": "775480"
  },
  {
    "text": "into the HP client took a little bit of manual work with HTTP client factory a lot of that can be moved away now and we",
    "start": "775480",
    "end": "781600"
  },
  {
    "text": "can just use some fluent configuration methods to start applying cross-cutting concerns using these handlers in our",
    "start": "781600",
    "end": "788079"
  },
  {
    "text": "code and it also integrates with poly as I said earlier so this gives us the possibility of very easily wrapping our",
    "start": "788079",
    "end": "795459"
  },
  {
    "text": "cause in policies that will handle transient situations for us so we can try and make",
    "start": "795459",
    "end": "800980"
  },
  {
    "text": "our application resilient to failures downstream to services that are coming and going particularly cloud environments where",
    "start": "800980",
    "end": "807580"
  },
  {
    "text": "you know things are being deployed very often and there may be short switchovers between services it makes sense to try",
    "start": "807580",
    "end": "813520"
  },
  {
    "text": "and handle those situations and not just fail immediately if something's not around for the first time we try to talk",
    "start": "813520",
    "end": "818860"
  },
  {
    "text": "to it and it offers initially some basic diagnostics and logging and it does this",
    "start": "818860",
    "end": "824080"
  },
  {
    "text": "using the asp.net core logging feature and you can turn this on if you want to",
    "start": "824080",
    "end": "829090"
  },
  {
    "text": "see all of the requests that are being made through anything managed by HTTP client factory you can even get timings",
    "start": "829090",
    "end": "834940"
  },
  {
    "text": "and details about the headers that were being sent out on this request if you need to so let's start with converting",
    "start": "834940",
    "end": "842440"
  },
  {
    "text": "that code that we had so that we can move over to HTTP client factory and what we're going to do here is we're",
    "start": "842440",
    "end": "848290"
  },
  {
    "text": "going to do this in the simplest way possible so this isn't taking advantage of necessarily all the features of HTTP",
    "start": "848290",
    "end": "853960"
  },
  {
    "text": "client factory to begin with but this is to kind of demonstrate that the least work that you could do to take an",
    "start": "853960",
    "end": "859690"
  },
  {
    "text": "existing application that where you were managing your own lifetime hated should be client yourself and actually do that",
    "start": "859690",
    "end": "865900"
  },
  {
    "text": "through HTTP client factory so in my startup class I've got this ad singleton",
    "start": "865900",
    "end": "871330"
  },
  {
    "text": "HP client that we'd been using a minute ago I'm gonna get rid of this now and instead I'm going to use the add heat to",
    "start": "871330",
    "end": "876700"
  },
  {
    "text": "decline extension method on the I service collection so this is just provided by the library this will be",
    "start": "876700",
    "end": "883540"
  },
  {
    "text": "available to you if you're using asp.net core 2.1 or above it's included in the all the asp.net core app Venessa package",
    "start": "883540",
    "end": "891070"
  },
  {
    "text": "if you're using just dotnet core 2.1 and you want to bring this in you can bring",
    "start": "891070",
    "end": "896680"
  },
  {
    "text": "in the microsoft or extension so HTTP package and then you can start using this in kind of like generic host kind",
    "start": "896680",
    "end": "902380"
  },
  {
    "text": "of situations as well so this will register the services we need and that will do for now so we'll move over to",
    "start": "902380",
    "end": "909670"
  },
  {
    "text": "the convertor controller again and the first change is to adjust the constructor we're not going to inject HTTP client now we're going to inject",
    "start": "909670",
    "end": "916630"
  },
  {
    "text": "the HTTP client factory so now this will give us a factory that can give us the HTTP client we want to use then we can",
    "start": "916630",
    "end": "923710"
  },
  {
    "text": "make a change down here so we're taking advantage of that and we're just going to use the factory to create",
    "start": "923710",
    "end": "929800"
  },
  {
    "text": "a client so we'll call create client behind the scenes the factory will create a brand new HTTP client every",
    "start": "929800",
    "end": "935260"
  },
  {
    "text": "time so we can guarantee it's a unique instance for us but what it will do is reuse that existing handler chain if one",
    "start": "935260",
    "end": "941380"
  },
  {
    "text": "already exists that hasn't yet expired otherwise it will just create a new handler chain and pass it in to us so",
    "start": "941380",
    "end": "947140"
  },
  {
    "text": "this means that we don't have to worry about the the connection lifetime there and now we can just use that local",
    "start": "947140",
    "end": "952810"
  },
  {
    "text": "instance so that's kind of the bare-bones and there's very minimal work there to go through an existing",
    "start": "952810",
    "end": "958000"
  },
  {
    "start": "953000",
    "end": "1092000"
  },
  {
    "text": "application and just start swapping out instances where maybe you were registering htb client in DI or doing",
    "start": "958000",
    "end": "963130"
  },
  {
    "text": "some other mechanism to create it and that will kind of give you initially without very little work the the",
    "start": "963130",
    "end": "969700"
  },
  {
    "text": "lifetime management feature so that you're now getting that connection management but where HP client factory",
    "start": "969700",
    "end": "975250"
  },
  {
    "text": "starts to get more powerful is we is if we start to take advantage of things like named clients and later type typed",
    "start": "975250",
    "end": "981100"
  },
  {
    "text": "clients will start with names because they're a little bit simpler to understand and named clients is one of",
    "start": "981100",
    "end": "986920"
  },
  {
    "text": "the first ways that we can create this kind of logical configuration for a client so instead of just calling add",
    "start": "986920",
    "end": "992710"
  },
  {
    "text": "h-2b client here I'm now going to call this additional overload that lets me specify a named client now this is one",
    "start": "992710",
    "end": "998920"
  },
  {
    "text": "logical configuration I could register many of these one after the other to create different configurations for",
    "start": "998920",
    "end": "1004260"
  },
  {
    "text": "different services I'm talking to in this case I've named this one github because it deals with the the github API",
    "start": "1004260",
    "end": "1010560"
  },
  {
    "text": "and then I can pass in this action if I want to that will allow me to configure the client so when the factory creates",
    "start": "1010560",
    "end": "1016710"
  },
  {
    "text": "the new client before it hands it back to us it will run this this delegate and this allows us to set things like the",
    "start": "1016710",
    "end": "1023220"
  },
  {
    "text": "base address and default headers in one place because we're getting a new instance every time we ask for one we",
    "start": "1023220",
    "end": "1028650"
  },
  {
    "text": "can be assured that we're not going to have to worry about sharing this across thread because we should just be using the client and then forgetting about it",
    "start": "1028650",
    "end": "1035370"
  },
  {
    "text": "the reason it's nice is set them here is I'm setting these once so anything that uses this named client it's now going to",
    "start": "1035370",
    "end": "1041220"
  },
  {
    "text": "apply this base address and default headers if these change I have one place to change them and that's that's kind of",
    "start": "1041220",
    "end": "1047370"
  },
  {
    "text": "nice so what date our code we're going to make a few changes now in this controller so the URL I was previously",
    "start": "1047370",
    "end": "1053670"
  },
  {
    "text": "using I can shorten just to the path because again we're using that base address so if that does change hopefully",
    "start": "1053670",
    "end": "1060299"
  },
  {
    "text": "if the path stays the same we're okay this doesn't have to adjust and this request headers that I was now adding and I would have to remember to",
    "start": "1060299",
    "end": "1067110"
  },
  {
    "text": "do this in every place I was making the request I can get rid of because now that's going to be given to me on the",
    "start": "1067110",
    "end": "1072630"
  },
  {
    "text": "client I'm going to ask for from the factory and then finally when I'm using the factory I can just pass in the name",
    "start": "1072630",
    "end": "1077909"
  },
  {
    "text": "of the client I want in this case the guitar client to get that particular configured client back so that's a nice",
    "start": "1077909",
    "end": "1084419"
  },
  {
    "text": "way to kind of get started with those illogical configurations and already it starts to kind of layer in a little bit",
    "start": "1084419",
    "end": "1090120"
  },
  {
    "text": "of additional value the next step and this is kind of the preferred approach from Microsoft and probably be my",
    "start": "1090120",
    "end": "1097440"
  },
  {
    "start": "1092000",
    "end": "1298000"
  },
  {
    "text": "recommendation as well is to look at using tight clients this gives us kind of nice typed way to basically",
    "start": "1097440",
    "end": "1103260"
  },
  {
    "text": "encapsulate the logic for dealing with a service into its own kind of class and that's quite nice because then we can",
    "start": "1103260",
    "end": "1109409"
  },
  {
    "text": "move all of the code required for dealing with that service to kind of a single place and we can kind of be honoring single responsibilities and",
    "start": "1109409",
    "end": "1116700"
  },
  {
    "text": "also this then can be registered into di and accepted where we need it so I'm going to first create a typed",
    "start": "1116700",
    "end": "1123840"
  },
  {
    "text": "coin and a type coin is just a class I've named my github client it doesn't have to implement any particular",
    "start": "1123840",
    "end": "1129990"
  },
  {
    "text": "interface as though requirements for it to do anything there I've created my own interface for this because when I later",
    "start": "1129990",
    "end": "1136080"
  },
  {
    "text": "inject it I want to be injecting that the interface so that I can easily mock this out if I want to in testing the",
    "start": "1136080",
    "end": "1142919"
  },
  {
    "text": "only thing that we have to do specifically on a type client is accept HTTP client in its constructor and this",
    "start": "1142919",
    "end": "1149039"
  },
  {
    "text": "is different than what we're doing earlier where we were getting a singleton client this will be set up for us by the client factory so this is",
    "start": "1149039",
    "end": "1154830"
  },
  {
    "text": "going to be a new unique client instance with or without an existing handler chain existing connections depending if",
    "start": "1154830",
    "end": "1160530"
  },
  {
    "text": "those have expired or not and here I'm choosing to configure the client in my constructor we can configure type client",
    "start": "1160530",
    "end": "1167070"
  },
  {
    "text": "in the exact same way as we did with the named client where we passed that action into the the setup but I don't kind of",
    "start": "1167070",
    "end": "1173820"
  },
  {
    "text": "like all of that code sitting in my configure services method and this feels like a good place for it in my opinion this is the this class is responsible",
    "start": "1173820",
    "end": "1181169"
  },
  {
    "text": "for dealing with github so this is where I kind of keep my configuration for it as well but it has the basic same effect",
    "start": "1181169",
    "end": "1186419"
  },
  {
    "text": "that we're now going to have a client with in this class and this is going to be a transient class in di so we're always going to get a new one of these as well",
    "start": "1186419",
    "end": "1192740"
  },
  {
    "text": "and then I can start creating methods this is a method that basically does what we were doing in the controller",
    "start": "1192740",
    "end": "1198630"
  },
  {
    "text": "previously I can give it a bit more of a descriptive name now I can kind of describe that this is calling for the",
    "start": "1198630",
    "end": "1203790"
  },
  {
    "text": "the repositories from the asp.net organization and now all of the code",
    "start": "1203790",
    "end": "1209070"
  },
  {
    "text": "that was in my controller sits in here and I feel again this is a better place for that kind of logic controllers in my",
    "start": "1209070",
    "end": "1214590"
  },
  {
    "text": "opinion and not the place to be making HTTP requests and trying to parse the result the responses and deserialize",
    "start": "1214590",
    "end": "1221040"
  },
  {
    "text": "them this is kind of a nice place we're dealing with github in here and we've kind of encapsulated that logic and we",
    "start": "1221040",
    "end": "1226350"
  },
  {
    "text": "have one place to change this if we need to in the future so now that I've done that we're going to register this into",
    "start": "1226350",
    "end": "1232410"
  },
  {
    "text": "DI so I'm gonna get rid of the names client for now and we'll just replace it with one of the options for type 2",
    "start": "1232410",
    "end": "1238020"
  },
  {
    "text": "client so in this case because I've chosen to have an interface I've got I've given it a service type for my di",
    "start": "1238020",
    "end": "1243600"
  },
  {
    "text": "registration which is the the I get hub client and then the implementation type is our typed client that we want to",
    "start": "1243600",
    "end": "1250110"
  },
  {
    "text": "return and and that will get us going if you wanted to do all the configuration there you could still use the",
    "start": "1250110",
    "end": "1256050"
  },
  {
    "text": "configuration delegate in there to set up the client the base address and default headers so that's registered",
    "start": "1256050",
    "end": "1263010"
  },
  {
    "text": "into di so I'm now going to update my controller yet again and this time I'm going to accept my github client so this has really made",
    "start": "1263010",
    "end": "1269550"
  },
  {
    "text": "the controller a little bit more descriptive we know kind of what services we're accepting here we know we're going to be dealing with github",
    "start": "1269550",
    "end": "1275370"
  },
  {
    "text": "somewhere within this controller hopefully and now I can update my action and reduce that quite considerably and",
    "start": "1275370",
    "end": "1281460"
  },
  {
    "text": "move away all of that code that isn't really the concern of a controller and just call the the tied client now and so",
    "start": "1281460",
    "end": "1288090"
  },
  {
    "text": "we've we've improved the controller we've moved the code and the logic for dealing with github it into its own class and that's all bound up and",
    "start": "1288090",
    "end": "1294090"
  },
  {
    "text": "handled for us in DI with the lifetime management that we need from Haiti to be client factory so I'll move on briefly",
    "start": "1294090",
    "end": "1301110"
  },
  {
    "start": "1298000",
    "end": "1438000"
  },
  {
    "text": "to outgoing middleware so I described earlier that we kind of get this same concept as the incoming middleware so",
    "start": "1301110",
    "end": "1307770"
  },
  {
    "text": "from an abstract point of view your application calls htb client it makes a request at some point over to an",
    "start": "1307770",
    "end": "1313920"
  },
  {
    "text": "endpoint and we get our response message back but there's some stuff happening under the HTTP client there's kind of",
    "start": "1313920",
    "end": "1319950"
  },
  {
    "text": "hidden away from us and it's that handler chain that I keep referring to so I haven't described the",
    "start": "1319950",
    "end": "1325230"
  },
  {
    "text": "full handler train here there's many howlers that might be used and it depends on things like whether you're trying to use proxies in the requests",
    "start": "1325230",
    "end": "1331080"
  },
  {
    "text": "and things like that but at the kind of bare-bones we have the HP client handler that's it typically sits at this end and",
    "start": "1331080",
    "end": "1338820"
  },
  {
    "text": "the HTTP client will call in to that and it's a bit like a it's a chain of handlers but it's a bit like a Russian",
    "start": "1338820",
    "end": "1344280"
  },
  {
    "text": "doll model so the h-2b client handler is the kind of outer Russian doll and then it passes the request once it's looked",
    "start": "1344280",
    "end": "1350970"
  },
  {
    "text": "at the request it might do something with it if it needs to but then it can pass it into the next Russian doll inside and continues down through the",
    "start": "1350970",
    "end": "1358110"
  },
  {
    "text": "entire handler chain until you're at the center that's the sockets HDB hammer this is the one that's actually responsible for",
    "start": "1358110",
    "end": "1363810"
  },
  {
    "text": "sending packets out on the wire so this will then issue the request and then the response comes back in and it flows back",
    "start": "1363810",
    "end": "1369780"
  },
  {
    "text": "into that socket h2 behind that and then back through the layers of the Russian doll model so you get kind of two",
    "start": "1369780",
    "end": "1375810"
  },
  {
    "text": "chances to look at these requests and responses and you can inspect them in handlers they could potentially modify",
    "start": "1375810",
    "end": "1381390"
  },
  {
    "text": "those requests they might do nothing at all but because we have this handler",
    "start": "1381390",
    "end": "1386580"
  },
  {
    "text": "chain we can take advantage of that by adding our own handlers into the mix and then we can do whatever we want here any",
    "start": "1386580",
    "end": "1391980"
  },
  {
    "text": "kind of cross-cutting concerns for dealing with requests we can put into a handler and that might be things like",
    "start": "1391980",
    "end": "1397170"
  },
  {
    "text": "checking for some default headers so particularly endpoint requires headers on every request you could do some",
    "start": "1397170",
    "end": "1402510"
  },
  {
    "text": "validation here and you could short-circuit this flow and decide to actually just return an immediate response that's a failure because you",
    "start": "1402510",
    "end": "1409350"
  },
  {
    "text": "don't even need to send it over the network in that scenario you might be some kind of inspection or bearer tokens",
    "start": "1409350",
    "end": "1415290"
  },
  {
    "text": "and applying new bearer tokens and authorization if that's required you might do some kind of metrics and",
    "start": "1415290",
    "end": "1420540"
  },
  {
    "text": "monitoring around your requests and basically once you've added these in you're just stacking additional raus Russian dolls around the the kind of",
    "start": "1420540",
    "end": "1427560"
  },
  {
    "text": "system hammers to do your own work and so with this flow we can start to think about applying those cross-cutting",
    "start": "1427560",
    "end": "1433290"
  },
  {
    "text": "concerns and hopefully simplifying our applications where we need to do stuff",
    "start": "1433290",
    "end": "1438360"
  },
  {
    "start": "1438000",
    "end": "1571000"
  },
  {
    "text": "on every request the way we implement this is using the delegating handlers as I mentioned earlier these have existed",
    "start": "1438360",
    "end": "1444450"
  },
  {
    "text": "for some time as long as HTTP client but with the delegating handlers you'd have to create a handler chain and put the",
    "start": "1444450",
    "end": "1451380"
  },
  {
    "text": "handlers in the right order and then you have to hand them off to Haiti to be kind to make use of them and that was",
    "start": "1451380",
    "end": "1456570"
  },
  {
    "text": "that was not too bad but it could be better and with HTTP client has been improved so what I've got here is a",
    "start": "1456570",
    "end": "1462600"
  },
  {
    "text": "handler the only thing that I need to do is implement will derive from the delegating handler base class the",
    "start": "1462600",
    "end": "1468809"
  },
  {
    "text": "abstract class and then I can start to apply the logic that I want to so this is a really basic one I'm going to",
    "start": "1468809",
    "end": "1474780"
  },
  {
    "text": "inject a monitoring service into here you can inject services and use them and then I can override the send async",
    "start": "1474780",
    "end": "1480660"
  },
  {
    "text": "method which takes a request message and a cancellation token the key line in",
    "start": "1480660",
    "end": "1485700"
  },
  {
    "text": "here is this call to await base send async so this is the client the line that will call the next handler in the",
    "start": "1485700",
    "end": "1491730"
  },
  {
    "text": "chain and because we've called it there we could have done some work here before we've passed it along in this case this",
    "start": "1491730",
    "end": "1498510"
  },
  {
    "text": "particular one looks to maybe send the status codes that I'm getting from this external service out to some kind of",
    "start": "1498510",
    "end": "1504059"
  },
  {
    "text": "monitoring service I'm pretending I have here and so with this simple delegating handler I can apply this on all requests",
    "start": "1504059",
    "end": "1510630"
  },
  {
    "text": "if I wire it up so I'm going to come into here and I'm going to add this to my type client definition so when we",
    "start": "1510630",
    "end": "1516809"
  },
  {
    "text": "create a named or type client what we get back is a HIV client builder and this allows us to chain together some",
    "start": "1516809",
    "end": "1522780"
  },
  {
    "text": "additional configuration and logic that we want to apply when we're using that name door tight client so in this case I",
    "start": "1522780",
    "end": "1528480"
  },
  {
    "text": "can tweet my code slightly and I'm now going to make this call to the HTTP client builder to add a HTTP message",
    "start": "1528480",
    "end": "1534660"
  },
  {
    "text": "handler I can just pass it through the type of the handler that I want to have so without any real ceremony I've added a",
    "start": "1534660",
    "end": "1541260"
  },
  {
    "text": "hammer and I could have many handlers here I could layer them and stack them this will be the first handler that we",
    "start": "1541260",
    "end": "1546870"
  },
  {
    "text": "get hit and then it will call through to any of our handlers that I decide to add a home to this typed client the other important thing that you have",
    "start": "1546870",
    "end": "1553260"
  },
  {
    "text": "to do is you have to make sure you register your handler into di as a transient service so that it can be picked up and by HTTP client factory and",
    "start": "1553260",
    "end": "1560370"
  },
  {
    "text": "applied in the right place but with that we've added that logic to anything that goes through this typed client so we're",
    "start": "1560370",
    "end": "1566190"
  },
  {
    "text": "going to get all of those metrics recorded for us we haven't got to record that at the point of making every request so I'm going to now talk a",
    "start": "1566190",
    "end": "1573600"
  },
  {
    "start": "1571000",
    "end": "1810000"
  },
  {
    "text": "little bit about poly as I say I'm not going to sort of go into depth into anything you could easily talk for an",
    "start": "1573600",
    "end": "1579960"
  },
  {
    "text": "hour about this I know Brian just has so like I say check out the recording if you want to see the details of this",
    "start": "1579960",
    "end": "1585730"
  },
  {
    "text": "but at its heart poly is a dotnet resilience library and it allows us to",
    "start": "1585730",
    "end": "1591309"
  },
  {
    "text": "be tolerant to transient type failures in our code it's not just for use with",
    "start": "1591309",
    "end": "1596950"
  },
  {
    "text": "HTTP client and requests you could use it in anywhere in your application that you want to apply these kind of policies",
    "start": "1596950",
    "end": "1603070"
  },
  {
    "text": "but HTTP request is a really good candidate because they can have kind of",
    "start": "1603070",
    "end": "1608260"
  },
  {
    "text": "transient issues and it would be nice if our code could deal with those in a really simple way the poly team have",
    "start": "1608260",
    "end": "1613720"
  },
  {
    "text": "worked with the Microsoft team to integrate this with HTTP client factoring so there's a really nice",
    "start": "1613720",
    "end": "1618970"
  },
  {
    "text": "pattern for using this without too much setup and basically the idea of poly is",
    "start": "1618970",
    "end": "1624190"
  },
  {
    "text": "it gives you a policy and the policy is configured to handle some criteria so",
    "start": "1624190",
    "end": "1629620"
  },
  {
    "text": "for HTTP requests example we might handle non-successful status codes or",
    "start": "1629620",
    "end": "1635429"
  },
  {
    "text": "HTTP requests exceptions for example and once we've told the policy what it handles we then apply a particular",
    "start": "1635429",
    "end": "1641440"
  },
  {
    "text": "action a particular policy that takes effect in that scenario and there's lots",
    "start": "1641440",
    "end": "1646539"
  },
  {
    "text": "of different types the most simple and the most regularly used is retry and retry basically just takes a piece of",
    "start": "1646539",
    "end": "1653049"
  },
  {
    "text": "code that you want to run and execute it multiple times if any of those conditions occur so if you get a failure",
    "start": "1653049",
    "end": "1658600"
  },
  {
    "text": "response it can retry the request for you and you just wrap the piece of code that you want to run inside the policy",
    "start": "1658600",
    "end": "1665289"
  },
  {
    "text": "and it will execute with HTTP client factory we can set these up and attach them to all requests really easily we",
    "start": "1665289",
    "end": "1670630"
  },
  {
    "text": "don't even have to worry about modifying the place we're making the request so retry is common there are others",
    "start": "1670630",
    "end": "1676929"
  },
  {
    "text": "circuit breaker is another potentially quite useful one and it allows us to monitor for multiple failures of a",
    "start": "1676929",
    "end": "1684070"
  },
  {
    "text": "particular action so we might want to put this across all requests to a particular service and then we can say",
    "start": "1684070",
    "end": "1689440"
  },
  {
    "text": "if this service fails like 20 times repeatedly there might be a bigger issue",
    "start": "1689440",
    "end": "1694480"
  },
  {
    "text": "and if we just keep hitting that with retries and and blindly hoping that it will come back alive we're probably just",
    "start": "1694480",
    "end": "1700570"
  },
  {
    "text": "making the problem worse so circuit breaker lets us set that limit and once the limits reached it",
    "start": "1700570",
    "end": "1705700"
  },
  {
    "text": "just pops open the circuit and essentially it means that it won't let any more requests through at that point",
    "start": "1705700",
    "end": "1711070"
  },
  {
    "text": "it basically sits open for a period of time whatever it's configured to wait for and then it will go to a half closed",
    "start": "1711070",
    "end": "1716769"
  },
  {
    "text": "state at the half Oh state it will let a test message go through and if it succeeds then it can close the circuit and everything's",
    "start": "1716769",
    "end": "1723120"
  },
  {
    "text": "working again so it allows us to essentially back off from that downstream system that may be struggling",
    "start": "1723120",
    "end": "1728130"
  },
  {
    "text": "the roller things like we can apply additional time outs to execution in a code bulkhead isolation is quite an",
    "start": "1728130",
    "end": "1734700"
  },
  {
    "text": "interesting one and slightly harder to explain but the basic idea is to try and reduce the possibility of a cascading",
    "start": "1734700",
    "end": "1740670"
  },
  {
    "text": "failure situation so if you're talking to a struggling downstream system and it's either backing up requests or it's",
    "start": "1740670",
    "end": "1746850"
  },
  {
    "text": "continually failing and we're continuing continually retrying creep the debt will add more loads to your service it's",
    "start": "1746850",
    "end": "1753570"
  },
  {
    "text": "going to have to make more requests it's going to have to handle more exceptions and that can have a resource issue on",
    "start": "1753570",
    "end": "1759420"
  },
  {
    "text": "your system that may actually bring your application code down as well so bulkhead basically lets you put a limit",
    "start": "1759420",
    "end": "1764520"
  },
  {
    "text": "on a concurrent activity so you could say for talking to a particular set of services you might put them into this",
    "start": "1764520",
    "end": "1770130"
  },
  {
    "text": "bulkhead that means a certain number of requests can be handled at once and if the limits reached and it also has a",
    "start": "1770130",
    "end": "1775680"
  },
  {
    "text": "queue which could be reached then it would just stop accepting things so it lets you stop using all of your",
    "start": "1775680",
    "end": "1781170"
  },
  {
    "text": "resources to talk to a particular downstream system and hopefully stops a cascading failure effect",
    "start": "1781170",
    "end": "1786390"
  },
  {
    "text": "there's caching policies that you can apply this for backed which you can take effect if all other attempts have failed",
    "start": "1786390",
    "end": "1792510"
  },
  {
    "text": "maybe you just want to return some kind of default and we can combine these together with the idea of a policy wrap",
    "start": "1792510",
    "end": "1798540"
  },
  {
    "text": "and typically we would at least combine like retries and circuit breakers and maybe fall backs to give us a policy",
    "start": "1798540",
    "end": "1804840"
  },
  {
    "text": "that overall will handle all of the situations we might expect from making HTTP requests so this is quite briefly",
    "start": "1804840",
    "end": "1812700"
  },
  {
    "start": "1810000",
    "end": "1889000"
  },
  {
    "text": "what the retry looks like and this is our application at the top there's a downstream service it's on fire they're",
    "start": "1812700",
    "end": "1817920"
  },
  {
    "text": "not having a great day we make the request message and we get back a 503 which is probably quite optimistic if",
    "start": "1817920",
    "end": "1823380"
  },
  {
    "text": "there's a fire but still we've got a 503 and what are we going to do in this situation we can we can fail and we can",
    "start": "1823380",
    "end": "1830670"
  },
  {
    "text": "we can just return a bad request to our caller maybe we have some of our own",
    "start": "1830670",
    "end": "1836610"
  },
  {
    "text": "retry logic that we have to implement and that's code that we have to write that makes a retry attempt of its own",
    "start": "1836610",
    "end": "1841980"
  },
  {
    "text": "with poly we just create the policy up front that says okay if I get 500 phrase I'm going to retry and you can retry up",
    "start": "1841980",
    "end": "1848010"
  },
  {
    "text": "to two times so the first request occurs comes back as a 503 poly kicks in and",
    "start": "1848010",
    "end": "1853500"
  },
  {
    "text": "goes yeah I can handle favor free I'm gonna react to keep that request for you comes in it's still failing and between",
    "start": "1853500",
    "end": "1859560"
  },
  {
    "text": "the first and second requests someone puts out the fire pretty good job poly",
    "start": "1859560",
    "end": "1864750"
  },
  {
    "text": "kicks in we get a retry and this time we get the 200 so in this situation although we may have delayed slightly",
    "start": "1864750",
    "end": "1870630"
  },
  {
    "text": "the response to our caller we've been able to handle the fact that that service was temporarily unavailable the",
    "start": "1870630",
    "end": "1876000"
  },
  {
    "text": "fire is a bit of a joke example but typically you know services are failing over in cloud environments or if you're running services and containers they may",
    "start": "1876000",
    "end": "1882540"
  },
  {
    "text": "momentarily not be available in low balance may not send traffic to them this kind of situation may recover that",
    "start": "1882540",
    "end": "1888270"
  },
  {
    "text": "kind of situation so how can we do this with poly and HTTP client Factory so",
    "start": "1888270",
    "end": "1895680"
  },
  {
    "text": "with the HP comment builder we can apply additional extension method in here now this is not available by default with",
    "start": "1895680",
    "end": "1902430"
  },
  {
    "text": "the asp.net core app package what you have to do is bring in the Microsoft extension store HTTP door poly package",
    "start": "1902430",
    "end": "1909450"
  },
  {
    "text": "so Microsoft don't include by default any third-party dependencies where they can avoid it you have to explicitly add",
    "start": "1909450",
    "end": "1915570"
  },
  {
    "text": "that package fine you get just through that you can start using the poly integration piece of this and that gives",
    "start": "1915570",
    "end": "1921060"
  },
  {
    "text": "us access to methods like as transient HTTP error policy and in this an example",
    "start": "1921060",
    "end": "1926100"
  },
  {
    "text": "what it's going to do is it's going to preset us up a policy builder instance and on that policy builder we're going",
    "start": "1926100",
    "end": "1932580"
  },
  {
    "text": "to get back a pre-configured policy that's going to handle potential transient type issues so 500 accept",
    "start": "1932580",
    "end": "1939270"
  },
  {
    "text": "requests codes for r8 timeout or HTTP request exceptions any of those",
    "start": "1939270",
    "end": "1944520"
  },
  {
    "text": "scenarios it will consider itself active and therefore it will implement the policy that you define so once you've",
    "start": "1944520",
    "end": "1950370"
  },
  {
    "text": "got the builder you can then use it to set up the policy you want to apply in this scenario I'm going to use a weight and a retry so just doing a retry",
    "start": "1950370",
    "end": "1957540"
  },
  {
    "text": "immediately is kind of pointless in most situations giving it a millisecond or two will probably not mean the",
    "start": "1957540",
    "end": "1963000"
  },
  {
    "text": "downstream system is recovered so it's good to kind of give it a little bit of a wait time before you do it in this",
    "start": "1963000",
    "end": "1968130"
  },
  {
    "text": "scenario I'm saying well rate to three retries up to three retries if you need and in here I can use this kind of code",
    "start": "1968130",
    "end": "1974730"
  },
  {
    "text": "to apply an exponential back-off so this runs at the time that it's doing the retry and we have the retry count so we",
    "start": "1974730",
    "end": "1980759"
  },
  {
    "text": "can use it to calculate and a longer back off period because the more retries you do the least likelihood that the",
    "start": "1980759",
    "end": "1987029"
  },
  {
    "text": "downstream system is going to recover quickly and so giving it that little bit of extra time might just get you over that problem so that's added it in and",
    "start": "1987029",
    "end": "1995519"
  },
  {
    "start": "1993000",
    "end": "2144000"
  },
  {
    "text": "that's what we have to do any requests that now go through that typed client they're going to apply that policy automatically and that means that we've",
    "start": "1995519",
    "end": "2002539"
  },
  {
    "text": "kind of just get the benefit without having to adjust any of our request code at all now we can also do things like",
    "start": "2002539",
    "end": "2008779"
  },
  {
    "text": "dynamically apply policies the reason we might want to do this will become evident in a moment but what I'm going",
    "start": "2008779",
    "end": "2014330"
  },
  {
    "text": "to do is to find two policies just using the poly api's and I'm not really going to go into these in detail but the first is a no op policy so this just looks",
    "start": "2014330",
    "end": "2021529"
  },
  {
    "text": "like a policy act like a policy but does nothing so it executes the code once and that's it the retry is just the same as",
    "start": "2021529",
    "end": "2028100"
  },
  {
    "text": "what we did before but this time I'm manually creating this using the poly extensions and so now I have two",
    "start": "2028100",
    "end": "2033799"
  },
  {
    "text": "policies available to me and then in this code I can use the add policy Handler over extension method with an",
    "start": "2033799",
    "end": "2041149"
  },
  {
    "text": "overload that lets me inspect the request message so the way poly integrations work is it basically creates a delegating handler does that",
    "start": "2041149",
    "end": "2048050"
  },
  {
    "text": "suffice to do cross-cutting concerns and then it wraps the the call to the base don't send async in the policy but",
    "start": "2048050",
    "end": "2054829"
  },
  {
    "text": "before it wraps it we have the possibility of looking the requests message and inspecting things on it so",
    "start": "2054829",
    "end": "2059929"
  },
  {
    "text": "in this case I'm doing a conditional policy by saying if it's a get then retry it if it's any other action type",
    "start": "2059929",
    "end": "2067940"
  },
  {
    "text": "HTTP method type sorry then apply the no op now the reason we might want to do",
    "start": "2067940",
    "end": "2072980"
  },
  {
    "text": "this is because if we're talking to a downstream system retrying again should be safe it should have no side-effects",
    "start": "2072980",
    "end": "2079158"
  },
  {
    "text": "it should be an idempotent operation and so we can we can do that fairly safely but if we're talking to a downstream",
    "start": "2079159",
    "end": "2085040"
  },
  {
    "text": "system with a pert supposed a patch of delete those typically could have some side-effects and what we don't know is",
    "start": "2085040",
    "end": "2092358"
  },
  {
    "text": "that our original request didn't get to the to the endpoint we're talking to so in that scenario we could send say in",
    "start": "2092359",
    "end": "2098270"
  },
  {
    "text": "order to an order entry system it might receive it it might store it and then the response that it sends to us may",
    "start": "2098270",
    "end": "2103410"
  },
  {
    "text": "just not reach us for some reason some kind of transient network issue and so therefore we all timeout in that",
    "start": "2103410",
    "end": "2109560"
  },
  {
    "text": "scenario if I haven't got a conditional policy it would just apply a retry there what happens if I send out over twice if",
    "start": "2109560",
    "end": "2115320"
  },
  {
    "text": "we control the system it might be okay but if it's a third party service maybe they duplicate the order maybe they just",
    "start": "2115320",
    "end": "2121380"
  },
  {
    "text": "accept it and realize that it's a duplicate and ignore that who knows so this kind of thing can allow us to do",
    "start": "2121380",
    "end": "2127500"
  },
  {
    "text": "inspection before we apply the policies you can inspect anything on that request message you could apply this conditionally to different paths maybe",
    "start": "2127500",
    "end": "2134640"
  },
  {
    "text": "you want to use headers as a way of turning this on and off so you could maybe have a no retry header that you send through on certain requests and it",
    "start": "2134640",
    "end": "2140850"
  },
  {
    "text": "will automatically avoid putting that policy on to your request for you the final piece I want to show with poly is",
    "start": "2140850",
    "end": "2146760"
  },
  {
    "start": "2144000",
    "end": "2217000"
  },
  {
    "text": "the poly registry this was a feature that I kind of helped request because I was using the policy registry and I",
    "start": "2146760",
    "end": "2152670"
  },
  {
    "text": "wanted to find out how we would kind of interface the two and so the simplest example of this is I'm going to create",
    "start": "2152670",
    "end": "2158280"
  },
  {
    "text": "two timeout policies I did those just because they're really short so I've got to timeout policies of different lengths",
    "start": "2158280",
    "end": "2164430"
  },
  {
    "text": "and then I want to use a policy registry and this is just a store for policies it's basically a dictionary under the",
    "start": "2164430",
    "end": "2169920"
  },
  {
    "text": "hood but it allows us to create those policies once and then reuse them across the application and that's how policies",
    "start": "2169920",
    "end": "2175350"
  },
  {
    "text": "are sort of intended to be used the thread safe and reusing the means we've allocated that that policy once some",
    "start": "2175350",
    "end": "2182580"
  },
  {
    "text": "policies like circuit breaker expect to be shared so with a registry this is one place that we can register them upfront",
    "start": "2182580",
    "end": "2188850"
  },
  {
    "text": "and then whenever we need them we can just access them from the registry so I'm going to call this add policy registry method what that's going to do",
    "start": "2188850",
    "end": "2195060"
  },
  {
    "text": "is register the registry into di and then it gives us back a reference so that I can continue setting this up so",
    "start": "2195060",
    "end": "2200880"
  },
  {
    "text": "now I can just add my my two policies in there giving them a name and now when I set up my type client what I could do is",
    "start": "2200880",
    "end": "2207570"
  },
  {
    "text": "say add policy handler from registry and has passed the name so if I've got lots of tight clients for lots of different",
    "start": "2207570",
    "end": "2212700"
  },
  {
    "text": "endpoints this is a shorter way for me to define those once and start reusing them and are the final thing on HP",
    "start": "2212700",
    "end": "2220590"
  },
  {
    "start": "2217000",
    "end": "2264000"
  },
  {
    "text": "client factory that I've included this because a lot of people ask a question about this is what about situations",
    "start": "2220590",
    "end": "2226260"
  },
  {
    "text": "where you were traditionally setting up a handler I hate to be client handler with things like certificates or proxy",
    "start": "2226260",
    "end": "2231780"
  },
  {
    "text": "configurations and things like you can do it with httpclient factory you just need to tell it how to",
    "start": "2231780",
    "end": "2236990"
  },
  {
    "text": "configure that primary hammer so in here we have the full responsibility for creating the top-level h-2b client",
    "start": "2236990",
    "end": "2242780"
  },
  {
    "text": "handler that would be used in this scenario this is still under lifetime management so the typed client we're",
    "start": "2242780",
    "end": "2248059"
  },
  {
    "text": "using here will still keep that for two minutes and then use a different one but",
    "start": "2248059",
    "end": "2253099"
  },
  {
    "text": "it uses this an actual piece of code to kind of set up the handler and attach it so that HTTP client is going to give you where I go too deep into that code but",
    "start": "2253099",
    "end": "2259940"
  },
  {
    "text": "just be aware that that's there if you have those more advanced configuration needs so want to move on from HTTP",
    "start": "2259940",
    "end": "2267050"
  },
  {
    "text": "client factory and just try and group together some other HTTP tips from sort of various sources that i've i've bend",
    "start": "2267050",
    "end": "2272869"
  },
  {
    "text": "from reading lots of information talking to various people at the Microsoft teams and watching other talks and things the",
    "start": "2272869",
    "end": "2280160"
  },
  {
    "start": "2279000",
    "end": "2405000"
  },
  {
    "text": "first one is to take care when you handle response content so what do I mean by that so in our method here I've",
    "start": "2280160",
    "end": "2287150"
  },
  {
    "text": "got these two lines at the bottom which are dealing with reading the content and",
    "start": "2287150",
    "end": "2292190"
  },
  {
    "text": "then basically passing it into Jason net so we can deserialize the JSON and string the problem with this piece of",
    "start": "2292190",
    "end": "2298369"
  },
  {
    "text": "code is this first line we're basically reading the entire content into a string and allocating a string for that content",
    "start": "2298369",
    "end": "2304430"
  },
  {
    "text": "and then we pass it into Jason's on that now the problem with that is we're going to have a lot of allocations of strings",
    "start": "2304430",
    "end": "2309890"
  },
  {
    "text": "here and if the response content big which it could be if it's a big array of JSON data if that was big enough it",
    "start": "2309890",
    "end": "2316760"
  },
  {
    "text": "could push it into the large object heap even and so we're gonna have a lot of allocations that could have a",
    "start": "2316760",
    "end": "2321770"
  },
  {
    "text": "performance impact in our code because that's all going to be managed by the garbage collector and if it goes into",
    "start": "2321770",
    "end": "2326869"
  },
  {
    "text": "the large object heap you have a whole other set of issues around the potential for compaction there so basically this",
    "start": "2326869",
    "end": "2332390"
  },
  {
    "text": "string is redundant because all we're doing is is passing interjections on there but Jason's Ornette supports",
    "start": "2332390",
    "end": "2337549"
  },
  {
    "text": "deserializing from streams natively so we should probably use a stream for this now I could write all of that code",
    "start": "2337549",
    "end": "2343579"
  },
  {
    "text": "manually it's not a huge amount of code but the much simpler option is to use the read out string async method this",
    "start": "2343579",
    "end": "2350780"
  },
  {
    "text": "isn't part of h-2b kind of a default but there's a Microsoft package in the Web API doc client package but and that",
    "start": "2350780",
    "end": "2358099"
  },
  {
    "text": "gives us access to these additional extension methods and this one just takes the type that we expect to deserialize into and under the hood it",
    "start": "2358099",
    "end": "2364670"
  },
  {
    "text": "will use the JSON nets features so that we can actually avoid that additional allocation there was a",
    "start": "2364670",
    "end": "2370680"
  },
  {
    "text": "small issue with this in terms of like debugging experience because some people want to be able to debug here and inspect the string kind of just have to",
    "start": "2370680",
    "end": "2376800"
  },
  {
    "text": "deal with that you could include it temporarily and try and remember to take it out or you could if debug it or whatever but this is a much better",
    "start": "2376800",
    "end": "2383610"
  },
  {
    "text": "option for avoiding a potential of attack vector as well so if the client the service that we're talking to was",
    "start": "2383610",
    "end": "2390090"
  },
  {
    "text": "kind of taken over they could just return for fun a 10 gig string of data in that content and we just tried to",
    "start": "2390090",
    "end": "2396360"
  },
  {
    "text": "read that into a string so that's an attack vector we want to try and avoid and at least pausing it over the stream we realize it's not what we're looking",
    "start": "2396360",
    "end": "2402720"
  },
  {
    "text": "for and hopefully it will allocate a little less next up is handling errors",
    "start": "2402720",
    "end": "2408090"
  },
  {
    "start": "2405000",
    "end": "2473000"
  },
  {
    "text": "so we talked about poly in terms of handling transient HTTP network errors",
    "start": "2408090",
    "end": "2413850"
  },
  {
    "text": "server errors but the other kind of error is obviously that we may get the response back but it might signify an",
    "start": "2413850",
    "end": "2418980"
  },
  {
    "text": "hour 400 or 404 I'm not handling that here I'm just trying to deserialize the",
    "start": "2418980",
    "end": "2424350"
  },
  {
    "text": "content that may not even be there into this this on your github repo so we",
    "start": "2424350",
    "end": "2429540"
  },
  {
    "text": "should always handle that here I'm just going to use the response to ensure success status code so this will just",
    "start": "2429540",
    "end": "2435090"
  },
  {
    "text": "run through the code check if it's a 200 range status code and if it is continue otherwise it throws an exception so in",
    "start": "2435090",
    "end": "2441960"
  },
  {
    "text": "this case the corner of this method has to handle that exception and be ready for it another option probably my preferred option is to try",
    "start": "2441960",
    "end": "2448800"
  },
  {
    "text": "and not for exceptions there so instead I'm just going to check is the success status code property on there if it is",
    "start": "2448800",
    "end": "2456420"
  },
  {
    "text": "then I do get my deserialization otherwise I return because some kind of default it's up to you what's kind of",
    "start": "2456420",
    "end": "2462270"
  },
  {
    "text": "correct for the context you're working in here and what you might want to do but do make sure you're in some form checking for that before you just pass",
    "start": "2462270",
    "end": "2468960"
  },
  {
    "text": "the code on I have some things blow up just purely because they're trying to read content that isn't there the next",
    "start": "2468960",
    "end": "2474869"
  },
  {
    "start": "2473000",
    "end": "2554000"
  },
  {
    "text": "tip is is handling cancellation so avoid doing work you don't need to do so",
    "start": "2474869",
    "end": "2480060"
  },
  {
    "text": "someone starts an activity and then kind of gives up on you you don't want to continue doing a bunch of work for them and that could include",
    "start": "2480060",
    "end": "2485970"
  },
  {
    "text": "things like making HTTP requests that could be expensive operations so the way we're going to do this in our type",
    "start": "2485970",
    "end": "2492780"
  },
  {
    "text": "client is first I'm going to accept I canceled a touken into my method this is just a standard way with async/await of dealing",
    "start": "2492780",
    "end": "2498599"
  },
  {
    "text": "with cancellation to cancellation scenarios so I've got my cancellation token so I can do a few things",
    "start": "2498599",
    "end": "2503730"
  },
  {
    "text": "potentially what I could do is quickly fail if they quickly cancel this before we've even started making the request",
    "start": "2503730",
    "end": "2509400"
  },
  {
    "text": "let's get out for an exception and move on but we can also pass it through to any of the async methods like send a",
    "start": "2509400",
    "end": "2515789"
  },
  {
    "text": "seeing readers async so that they will cancel their activity as well if it's signaled the problem we're going to have",
    "start": "2515789",
    "end": "2521640"
  },
  {
    "text": "though is how we pass that in we're calling this from a controller something that quite a lot of people don't seem to",
    "start": "2521640",
    "end": "2527309"
  },
  {
    "text": "be aware of because it's not necessarily pushed that heavily is that controllers can accept a cancellation token and the",
    "start": "2527309",
    "end": "2533309"
  },
  {
    "text": "framework will give you this automatically so when it activates the controller and it activates the method it will just attach a cancellation token",
    "start": "2533309",
    "end": "2539190"
  },
  {
    "text": "that's tied to the current request that it's dealing with and that means that if someone closes the browser or gives up",
    "start": "2539190",
    "end": "2545609"
  },
  {
    "text": "on a request they've made to you you'll get signified that that's happened and then we can pass that through so now we",
    "start": "2545609",
    "end": "2551039"
  },
  {
    "text": "can avoid doing additional work if people have stopped calling us the next tip is caching this is another thing",
    "start": "2551039",
    "end": "2558329"
  },
  {
    "start": "2554000",
    "end": "2726000"
  },
  {
    "text": "that could be easily is its own talk its own hour I'm going to kind of give you the general view of it and a couple of",
    "start": "2558329",
    "end": "2565619"
  },
  {
    "text": "pointers but there's a lot more to this that you'll have to consider given different situations you'll be running into but let's say I want to use caching",
    "start": "2565619",
    "end": "2573329"
  },
  {
    "text": "in this application so the easy option for me here is just use the asp.net core memory cache as a simple option this",
    "start": "2573329",
    "end": "2580799"
  },
  {
    "text": "would work in a kind of single instance application if you were doing something that's kind of real and you've got",
    "start": "2580799",
    "end": "2585869"
  },
  {
    "text": "multiple containers running this service you probably want to use distributed caching but memory cache was a little",
    "start": "2585869",
    "end": "2591029"
  },
  {
    "text": "easier to show so I've added that in I've got that service available in this application I can inject now the eye",
    "start": "2591029",
    "end": "2597029"
  },
  {
    "text": "memory cache into the tight client to start taking advantage your weapon and then I'm going to update my methods",
    "start": "2597029",
    "end": "2603240"
  },
  {
    "text": "slightly there's a couple of kind of key changes here so the first that might not look immediately familiar is the bottom",
    "start": "2603240",
    "end": "2609150"
  },
  {
    "text": "part if you haven't seen this is c-sharp seven probably oh but I'm not sure but",
    "start": "2609150",
    "end": "2614520"
  },
  {
    "text": "it's local functions it's local methods and it's basically a way to put a method inside a method where it's contextually",
    "start": "2614520",
    "end": "2620220"
  },
  {
    "text": "sensible to do so so traditionally I would have used maybe a private method on the class for this but in this case it's really tied to",
    "start": "2620220",
    "end": "2626849"
  },
  {
    "text": "this first method anyway and I don't other people within the class calling it from other other methods in this class",
    "start": "2626849",
    "end": "2632280"
  },
  {
    "text": "so this way are basically kind of hidden it inside the first method and it looks like a normal method I can call it in",
    "start": "2632280",
    "end": "2638250"
  },
  {
    "text": "the right way that can be defined anywhere in this piece this method but I've just put it towards the bottom",
    "start": "2638250",
    "end": "2643950"
  },
  {
    "text": "which is my preference and then I'm using the memory cache I'm calling the get or create a sync method on there I need to pass a cache",
    "start": "2643950",
    "end": "2649980"
  },
  {
    "text": "key something to identify this by and then what it's going to do is if the",
    "start": "2649980",
    "end": "2655079"
  },
  {
    "text": "cache item is there it just returns it and that's the end of the day we haven't made any HTTP requests we've avoided",
    "start": "2655079",
    "end": "2660480"
  },
  {
    "text": "work we've avoided load on our system and the downstream system if not it will",
    "start": "2660480",
    "end": "2666420"
  },
  {
    "text": "set up an entry with a five-minute timeout and then just run that that local function to make the requests that",
    "start": "2666420",
    "end": "2672210"
  },
  {
    "text": "we were doing before there's so many ways you could apply caching poly has its own caching policy I've never found",
    "start": "2672210",
    "end": "2678390"
  },
  {
    "text": "that one of the most trendy to use and there are some gotchas you want to potentially apply that maybe on your",
    "start": "2678390",
    "end": "2685109"
  },
  {
    "text": "tight client and in that case what you'd actually be caching is for all HTTP request messages you'd be cashing their",
    "start": "2685109",
    "end": "2691109"
  },
  {
    "text": "actual HTTP response message for that particular message there are some read once or certainly you have to rewind",
    "start": "2691109",
    "end": "2697559"
  },
  {
    "text": "them streams on the content you get back on the response message so sticking that thing into the cache could have problems",
    "start": "2697559",
    "end": "2703859"
  },
  {
    "text": "for the second person that actually gets it out of the cache there's also work to do with that response we have to check",
    "start": "2703859",
    "end": "2709890"
  },
  {
    "text": "if this a success code and deserialize it there's not much point doing that time and time again so I prefer to kind",
    "start": "2709890",
    "end": "2715020"
  },
  {
    "text": "of cache a little bit higher up here at the point of making the request but you could just as easily use any other technique here you could apply a caching",
    "start": "2715020",
    "end": "2721859"
  },
  {
    "text": "policy from poly to do this slightly differently if you wanted to so kind of",
    "start": "2721859",
    "end": "2728339"
  },
  {
    "start": "2726000",
    "end": "2830000"
  },
  {
    "text": "coming towards the end but I'm going to start just talking about a few bonus tips so the first is this concept that I",
    "start": "2728339",
    "end": "2736500"
  },
  {
    "text": "read on dummy buyers post on his blog that at least privileged he credits it",
    "start": "2736500",
    "end": "2741569"
  },
  {
    "text": "back to at random Ponte there's probably like a chain of people that have mentioned it but it's the idea of using",
    "start": "2741569",
    "end": "2746790"
  },
  {
    "text": "extension methods so as a library author you want to write some kind of SDK that allows people to communicate with your",
    "start": "2746790",
    "end": "2753420"
  },
  {
    "text": "API and you want to kind of do that in a really nice way how do you know how they're going to handle HTTP client you",
    "start": "2753420",
    "end": "2759540"
  },
  {
    "text": "don't necessarily want handle httpclient yourself because you haven't necessarily got a good system for doing that particular if you're a",
    "start": "2759540",
    "end": "2764800"
  },
  {
    "text": "dotnet standard library you don't know if you're running on dotnet core that PHP client Factory might not be available if it is you don't want to",
    "start": "2764800",
    "end": "2770530"
  },
  {
    "text": "force it on them so one option that Dominic buyer was looking at for the kind of the identity service stuff was",
    "start": "2770530",
    "end": "2776920"
  },
  {
    "text": "maybe just create extension methods to what you need to do this I liked the idea and I've used it in a couple of",
    "start": "2776920",
    "end": "2782110"
  },
  {
    "text": "places so I'm going to create some extensions I've got an extension method this is basically doing what we've been",
    "start": "2782110",
    "end": "2787420"
  },
  {
    "text": "doing before in the actual type decline I've made it a little bit more general now so I can accept the organisation",
    "start": "2787420",
    "end": "2793660"
  },
  {
    "text": "name into this method and then the rest of the code is basically the same as before and now I'm just going to make",
    "start": "2793660",
    "end": "2799750"
  },
  {
    "text": "the appropriate crash using that particular all name but imagine now this isn't a library I'm going to bring that",
    "start": "2799750",
    "end": "2806140"
  },
  {
    "text": "library into my application so instead of writing this code myself I'm just going to use this library that I've been",
    "start": "2806140",
    "end": "2811510"
  },
  {
    "text": "given so I would just call the the get repos async extension method on the HTTP",
    "start": "2811510",
    "end": "2816520"
  },
  {
    "text": "client and I've controlled the creation of the client I've used typed client and HTTP client Factory but the method could",
    "start": "2816520",
    "end": "2823240"
  },
  {
    "text": "be provided to me but in a very generalized way by someone else that's just quite a nice thing that I saw when reading through some stuff that I",
    "start": "2823240",
    "end": "2829270"
  },
  {
    "text": "thought it was worth sharing the second bonus tip is around using correlation IDs this is less about like good HTTP",
    "start": "2829270",
    "end": "2836980"
  },
  {
    "start": "2830000",
    "end": "3096000"
  },
  {
    "text": "requests practice and more about avoiding a world of pain with distributed systems we've built a bunch",
    "start": "2836980",
    "end": "2842620"
  },
  {
    "text": "of micro services and magics and they're all talking to one another some of its async and we're doing stuff over queues",
    "start": "2842620",
    "end": "2848710"
  },
  {
    "text": "and events but certain times we're making HTTP requests cause we need data immediately and if something fails down",
    "start": "2848710",
    "end": "2855190"
  },
  {
    "text": "the stream it's quite useful to be able to tie that all together and so using a correlation ID from the very first entry",
    "start": "2855190",
    "end": "2861310"
  },
  {
    "text": "point into an activity stream in your context of your kind of application or distributed app apply a unique ID",
    "start": "2861310",
    "end": "2868660"
  },
  {
    "text": "to it somehow and then make sure you pass that through using correlation IDs",
    "start": "2868660",
    "end": "2873940"
  },
  {
    "text": "I don't have code examples of this but I've got a small library up on nuget which basically allows you to do this",
    "start": "2873940",
    "end": "2880840"
  },
  {
    "text": "and what it will do in an asp.net core application you can add this in it will add some middleware that will inspect the headers it will look for a",
    "start": "2880840",
    "end": "2888010"
  },
  {
    "text": "particular correlation ID header and that's configurable of course and once it gets that header it can have",
    "start": "2888010",
    "end": "2893590"
  },
  {
    "text": "combatant Lee give us a context that we can flow through the rest of that request and then we could pass that on",
    "start": "2893590",
    "end": "2899140"
  },
  {
    "text": "on to any outgoing requests that we're making with the HTTP client and the way I've tended to do that in the past is to",
    "start": "2899140",
    "end": "2905140"
  },
  {
    "text": "use a delegating howler to do that it's a cross-cutting concern on all requests so just have the delegating hand I have",
    "start": "2905140",
    "end": "2910150"
  },
  {
    "text": "access to that context that's got the correlation ID and make sure it attaches the appropriate headers because we can",
    "start": "2910150",
    "end": "2915190"
  },
  {
    "text": "modify those requests in the outgoing process of those delegating handler chains so that's just worth kind of",
    "start": "2915190",
    "end": "2921700"
  },
  {
    "text": "keeping in mind the libraries there if you want to use it the asp.net team have been working on various solutions kind",
    "start": "2921700",
    "end": "2926920"
  },
  {
    "text": "of tracing and things as well so I think they have their own activity IDs and things you can look at using but I wrote",
    "start": "2926920",
    "end": "2932050"
  },
  {
    "text": "this kind of before that was all available so the final kind of area that",
    "start": "2932050",
    "end": "2937450"
  },
  {
    "text": "I want to look at is just some other well this other improvement that was available in dotnet core 2.1 that it's",
    "start": "2937450",
    "end": "2943660"
  },
  {
    "text": "worth knowing is available and kind of in place so before 2.1 the way the kind of the",
    "start": "2943660",
    "end": "2949540"
  },
  {
    "text": "end of that handler chain would work is when you got to the end of the handler it would use os-level api's for making",
    "start": "2949540",
    "end": "2956590"
  },
  {
    "text": "HTTP requests so basically there was a split path where you had over a kind of Windows approach or a Linux Mac approach",
    "start": "2956590",
    "end": "2963610"
  },
  {
    "text": "and on the windows side if it was running on a Windows platform it would use a handler that called down to the",
    "start": "2963610",
    "end": "2969490"
  },
  {
    "text": "win HTTP API is to actually issue the HTTP requests it was using a lip curl on",
    "start": "2969490",
    "end": "2974530"
  },
  {
    "text": "Linux and the main problem that the team had with this was that actually there was a big performance drift in the tulip",
    "start": "2974530",
    "end": "2981490"
  },
  {
    "text": "Cole and the integration there was not anywhere near as close in terms of frupa and a lot of us now if we're building",
    "start": "2981490",
    "end": "2988840"
  },
  {
    "text": "kind of micro services we're deploying them into docker we're deploying them on Linux containers and so this has a",
    "start": "2988840",
    "end": "2994420"
  },
  {
    "text": "performance implication for applications so what the team decided to do is to kind of rethink things and they've",
    "start": "2994420",
    "end": "3000900"
  },
  {
    "text": "rewritten all of the logic and the actual code for making HTTP requests as managed c-sharp code and they've used",
    "start": "3000900",
    "end": "3009240"
  },
  {
    "text": "the sockets API to actually kind of just create a raw socket onto the OS to actually send the data over the wire so",
    "start": "3009240",
    "end": "3015720"
  },
  {
    "text": "they fought in all of the kind of HTTP piece of that into manage code so this is good because now they have a kind of",
    "start": "3015720",
    "end": "3021960"
  },
  {
    "text": "consistent code base they have control later how that works and it's something the team are continuing to",
    "start": "3021960",
    "end": "3028290"
  },
  {
    "text": "work on in terms of them performance but when they did this they got much closer to parity between Windows and Linux in",
    "start": "3028290",
    "end": "3034350"
  },
  {
    "text": "terms of making those requests and that's that was a free gain just by upgrading to 2.1 if you were making lots",
    "start": "3034350",
    "end": "3041310"
  },
  {
    "text": "of outgoing requests you've got that performance boost by default because it switched on in 2.1 by default if you",
    "start": "3041310",
    "end": "3047700"
  },
  {
    "text": "can't use it and there are a few reasons why you won't one is if you need to use HTTP to on those outgoing requests",
    "start": "3047700",
    "end": "3053460"
  },
  {
    "text": "because they haven't built that piece yet then you would have to switch it off and you just do that with an environment variable but unless you have a specific",
    "start": "3053460",
    "end": "3060390"
  },
  {
    "text": "need to do so don't turn it off because you're just slowing your app down for no reason and the team have continued to",
    "start": "3060390",
    "end": "3066090"
  },
  {
    "text": "work on this feature as well so in the 2.2 release I think they reported another 60 percent",
    "start": "3066090",
    "end": "3071760"
  },
  {
    "text": "performance increase are doubling the kind of improve improvement on requests on linux and i think it was 20% on",
    "start": "3071760",
    "end": "3078750"
  },
  {
    "text": "Windows so there's much sort of gain to be got there and that's from some of the other performance improvement work with",
    "start": "3078750",
    "end": "3085590"
  },
  {
    "text": "span and things like that that the team are doing and I'm sure there will be continued investment to getting this as quick as possible because it's a common",
    "start": "3085590",
    "end": "3092460"
  },
  {
    "text": "story that people are using this feature set so we're kind of coming towards the",
    "start": "3092460",
    "end": "3098580"
  },
  {
    "start": "3096000",
    "end": "3248000"
  },
  {
    "text": "end and I'm just going to summarize and just try and let the information sink in that final time before everyone runs for",
    "start": "3098580",
    "end": "3105240"
  },
  {
    "text": "beers we if you're using net core to put one specifically very of asp.net core",
    "start": "3105240",
    "end": "3111810"
  },
  {
    "text": "2.1 then do use the HTTP client factory feature it's there for a reason it makes",
    "start": "3111810",
    "end": "3117360"
  },
  {
    "text": "life easier and the key thing is that lifetime management if you don't want to worry about ty clients and name clients",
    "start": "3117360",
    "end": "3123930"
  },
  {
    "text": "and figuring all that stuff out then you don't have to from day one just convert your existing app make sure it's",
    "start": "3123930",
    "end": "3129480"
  },
  {
    "text": "registered as a service and then switch over to using the HP client factory to give you your client instances but once",
    "start": "3129480",
    "end": "3136050"
  },
  {
    "text": "you've got that going it's roll of time looking at factoring stuff into typed baiance in my opinion that's the kind of",
    "start": "3136050",
    "end": "3142350"
  },
  {
    "text": "recommended story from the team it's going to make your testing easier because you're generally in places where you're consuming those things you're now",
    "start": "3142350",
    "end": "3148590"
  },
  {
    "text": "just testing a typed client interface that you might have and you can just test that type client once if you need",
    "start": "3148590",
    "end": "3154800"
  },
  {
    "text": "to so just switch that one if you Anette call 2.10 if you want to use it you still can you just have to bring in",
    "start": "3154800",
    "end": "3160950"
  },
  {
    "text": "that Microsoft or extensions HTTP package if you're using doing any kind",
    "start": "3160950",
    "end": "3168180"
  },
  {
    "text": "of kind of work that could fail then I recommend bringing in poly it's great for other situations as well you might",
    "start": "3168180",
    "end": "3174390"
  },
  {
    "text": "want to use it for talking to database services or other internal services but it really works well with HTTP",
    "start": "3174390",
    "end": "3180180"
  },
  {
    "text": "situations and particularly well with HTTP client Factory in the mix really do",
    "start": "3180180",
    "end": "3185700"
  },
  {
    "text": "be aware of that read a string async getstring async unnecessary allocations expecting handle errors from the",
    "start": "3185700",
    "end": "3193079"
  },
  {
    "text": "services you're talking to 400s 404 is that kind of thing make sure you're dealing with those appropriately do you",
    "start": "3193079",
    "end": "3199710"
  },
  {
    "text": "try and look at parsing translation tokens through any asynchronous work and particularly in this scenario to avoid maybe making requests that you don't",
    "start": "3199710",
    "end": "3206130"
  },
  {
    "text": "need to counseling them when the activity has been cancelled in advance cache wisely you know think about what",
    "start": "3206130",
    "end": "3212609"
  },
  {
    "text": "your caching think about how long your caching it for and you know the caching",
    "start": "3212609",
    "end": "3217799"
  },
  {
    "text": "technology of the right is the right choice you know you could just still fill up the memory on your local machine if you just use a memory cache like you",
    "start": "3217799",
    "end": "3223710"
  },
  {
    "text": "know quickly appropriate limits in place I think Damon and David sort of cooled out just kind of unbounded caches as",
    "start": "3223710",
    "end": "3229680"
  },
  {
    "text": "being a kind of risk for asp net core applications in their talk pass correlation ids through your your",
    "start": "3229680",
    "end": "3236039"
  },
  {
    "text": "services easy way to do that with HTTP client is just to do it on headers between requests and then just pick them",
    "start": "3236039",
    "end": "3242130"
  },
  {
    "text": "up on the other end but ultimately just kind of go and enjoy doing some HTTP hopefully these tips have been useful",
    "start": "3242130",
    "end": "3248420"
  },
  {
    "start": "3248000",
    "end": "3531000"
  },
  {
    "text": "thank you very much for listening please do leave feedback on your way out it really does help me understand if this is kind of hit the mark if you're",
    "start": "3248420",
    "end": "3255359"
  },
  {
    "text": "putting yellows and reds in and you're not too scared to come and talk to me and tell me why you put a yellow in a reading that would be really useful",
    "start": "3255359",
    "end": "3260430"
  },
  {
    "text": "because I can make this better for the next time I do it if you want to sort of reach out at Steve J Gordon on Twitter",
    "start": "3260430",
    "end": "3266849"
  },
  {
    "text": "my blog which has gone as soon as I say a lot of articles on HTTP client factory I've got another one coming on how to",
    "start": "3266849",
    "end": "3273029"
  },
  {
    "text": "test in that scenario as well and some resources for use we kind of take away",
    "start": "3273029",
    "end": "3278490"
  },
  {
    "text": "another these are included in the slide deck but if you want to have them now do you take a shot so the slide deck itself",
    "start": "3278490",
    "end": "3284220"
  },
  {
    "text": "is on that link another plug for the blog and check that out the asp.net monsters post is kind of one of the",
    "start": "3284220",
    "end": "3290700"
  },
  {
    "text": "first blog post that talks about the kind of socket exhaustion issue the eye sore at least so if you want a bit more",
    "start": "3290700",
    "end": "3297030"
  },
  {
    "text": "detail on that story you can go check out their postings here it's kind of couple years olds this hasn't this has",
    "start": "3297030",
    "end": "3302609"
  },
  {
    "text": "kind of been around as long as kind of dominate cause been around as a potential issue the official documentation I think it's quite good",
    "start": "3302609",
    "end": "3308820"
  },
  {
    "text": "that I wrote it so I'm biased but check it out see if that helps answer the",
    "start": "3308820",
    "end": "3314430"
  },
  {
    "text": "questions and then check out my blog for some deeper examples poly you can go check out this like they've got a really",
    "start": "3314430",
    "end": "3320820"
  },
  {
    "text": "great wiki so if you're trying to integrate Pauline you're trying to work out how to build the various policies the wikis were really really good and",
    "start": "3320820",
    "end": "3328020"
  },
  {
    "text": "then that post by and Dominic bio that I mentioned as well so I'll leave those up I kind of got five minutes if people",
    "start": "3328020",
    "end": "3333869"
  },
  {
    "text": "have any questions they want to yell out otherwise I'll hang around and I'll be down kind of near somewhere with beer",
    "start": "3333869",
    "end": "3339630"
  },
  {
    "text": "after this haha I had this conversation",
    "start": "3339630",
    "end": "3348900"
  },
  {
    "text": "today so I wasn't entirely short so the question is if the HP request is an HTTP",
    "start": "3348900",
    "end": "3356550"
  },
  {
    "text": "response message implement I disposable and the reason they do that is if you're you're using streams on the content the",
    "start": "3356550",
    "end": "3364410"
  },
  {
    "text": "answer I've been given by Ryan I'm not sure if Ryan's in here but Ryan Nowak from the Microsoft team",
    "start": "3364410",
    "end": "3370109"
  },
  {
    "text": "did HP client factory I was trying to kind of get a definitive on this it kind of depends but if you create the stream",
    "start": "3370109",
    "end": "3376020"
  },
  {
    "text": "that's reading off of there then you're responsible for kind of clearing that stuff up so you could use the user put a",
    "start": "3376020",
    "end": "3381990"
  },
  {
    "text": "using statement around your response or request there I think of you using the Microsoft kind of reader string async",
    "start": "3381990",
    "end": "3387329"
  },
  {
    "text": "you're kind of okay because they deal with the streams lower down but if you're not sure you could put it on I",
    "start": "3387329",
    "end": "3393089"
  },
  {
    "text": "did have some slides anywhere I showed doing it and I've taken them out on the on the basis that I think it's probably not necessarily always required so the",
    "start": "3393089",
    "end": "3405750"
  },
  {
    "text": "team so the question is any anything else coming in dotnet called free oh I've kind of vaguely followed it the key",
    "start": "3405750",
    "end": "3413550"
  },
  {
    "text": "things that the team were looking at do with HTTP client factory is some additional work on trying to integrate with the poly metrics and monitoring if",
    "start": "3413550",
    "end": "3421260"
  },
  {
    "text": "they can so as and when that's ready in the poly library myself when we apply these policies we",
    "start": "3421260",
    "end": "3426299"
  },
  {
    "text": "can find out like how many times things have retried and get some way of getting that information back out and so once",
    "start": "3426299",
    "end": "3432660"
  },
  {
    "text": "that's ready from Poli then hopefully the team will find a nice solution for integrating that into what we're doing",
    "start": "3432660",
    "end": "3438119"
  },
  {
    "text": "as well I haven't seen any other major changes I suspect some more performance gains hopefully as a sort of a con going",
    "start": "3438119",
    "end": "3444599"
  },
  {
    "text": "effort that they're making there yeah",
    "start": "3444599",
    "end": "3449660"
  },
  {
    "text": "all right yeah I can potentially",
    "start": "3452400",
    "end": "3457349"
  },
  {
    "text": "[Music]",
    "start": "3458790",
    "end": "3461920"
  },
  {
    "text": "yeah I did yeah I didn't there's some recommendation about not applying it where you don't need to so that you",
    "start": "3465420",
    "end": "3470880"
  },
  {
    "text": "don't it's not there by default so you'd have to actually ask for that service to be registered in to do I if you want to",
    "start": "3470880",
    "end": "3476849"
  },
  {
    "text": "get it into places where it's not naturally available so I kind of just avoided using it for that reason that I didn't want to force someone's have to",
    "start": "3476849",
    "end": "3483150"
  },
  {
    "text": "have that correlation context so I've",
    "start": "3483150",
    "end": "3492119"
  },
  {
    "text": "used a sinc local to create my own correlation context but it's much more lightweight because it's only just kind of carrying a couple of things around so",
    "start": "3492119",
    "end": "3498410"
  },
  {
    "text": "yeah I'm gonna tell you sure if it's the right choice at the time but it felt like a good way of avoiding people",
    "start": "3498410",
    "end": "3503549"
  },
  {
    "text": "having that additional dependency anyone else yes so the question is is there a",
    "start": "3503549",
    "end": "3513959"
  },
  {
    "text": "plan to bring FTP client or something similar and my ultras I have no idea I'm afraid no okay thank you very much",
    "start": "3513959",
    "end": "3524450"
  },
  {
    "text": "[Applause]",
    "start": "3524450",
    "end": "3531130"
  }
]