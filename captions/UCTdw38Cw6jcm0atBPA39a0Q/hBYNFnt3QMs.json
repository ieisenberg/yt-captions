[
  {
    "text": "a stre you need to make a structural breaking change to that event well if you needed to do that with",
    "start": "11519",
    "end": "17520"
  },
  {
    "text": "this exact architecture you'd probably need to update the kitchen service at the exact same time or in some element",
    "start": "17520",
    "end": "23119"
  },
  {
    "text": "of lock step you're going to be dependent on the kitchen service handling that new change before you can push it out otherwise you're going to",
    "start": "23119",
    "end": "30320"
  },
  {
    "text": "break the system doesn't sound particularly evolvable does it it doesn't sound particularly Loosely",
    "start": "30320",
    "end": "36640"
  },
  {
    "text": "coupled it's important to remember when you're building an event system that the events you publish are the API of your",
    "start": "36640",
    "end": "46640"
  },
  {
    "text": "system so you should treat the events you publish in the same way you might",
    "start": "46640",
    "end": "51879"
  },
  {
    "text": "treat a more typical API a synchronous API and a really good way to evolve and",
    "start": "51879",
    "end": "58039"
  },
  {
    "text": "change synchronous apis is version having a way to version your API to add",
    "start": "58039",
    "end": "63160"
  },
  {
    "text": "version one version two version three gives you the flexibility as a developer to change that API when you need",
    "start": "63160",
    "end": "70040"
  },
  {
    "text": "to so why can't you version events and version events is actually a really good thing to do and as a really",
    "start": "70040",
    "end": "77040"
  },
  {
    "text": "simple way to get started doing this instead of publishing that order confirmed event onto a topic called",
    "start": "77040",
    "end": "82240"
  },
  {
    "text": "order confirmed publish it onto a topic called order confirmed",
    "start": "82240",
    "end": "88360"
  },
  {
    "text": "V1 so now an infrastructure level you're being really explicit about exactly what it is that Downstream systems are",
    "start": "88360",
    "end": "95399"
  },
  {
    "text": "consuming they're consuming version one of the order confirmed event and when you need to make that breaking change",
    "start": "95399",
    "end": "100920"
  },
  {
    "text": "now you can start to put separation in at an infrastructure level you make the breaking change you need to publish an",
    "start": "100920",
    "end": "106360"
  },
  {
    "text": "event of a different structure publish that to a different Channel and keep publishing that first",
    "start": "106360",
    "end": "112159"
  },
  {
    "text": "version as well which means the downstream systems can evolve as and when they need to over time Services can",
    "start": "112159",
    "end": "118960"
  },
  {
    "text": "switch over and start publishing the second version consuming the second version now one thing to be really aware",
    "start": "118960",
    "end": "125439"
  },
  {
    "text": "of if you're doing this you start adding versioning you start inversing things at an infrastructure level you start inversing your topics is to be really",
    "start": "125439",
    "end": "131840"
  },
  {
    "text": "careful not to end up in a situation like this where you keep adding a new version",
    "start": "131840",
    "end": "136920"
  },
  {
    "text": "you keep adding a new version you keep adding a new version you're still supporting all them old versions because all the subscribers are still cons",
    "start": "136920",
    "end": "142280"
  },
  {
    "text": "consuming all them old versions so whenever you do this whenever you start versioning your",
    "start": "142280",
    "end": "147400"
  },
  {
    "text": "events make sure you set a appreciation date set a date you're going to stop",
    "start": "147400",
    "end": "152840"
  },
  {
    "text": "publishing that version of the event and honestly stick to it because once you start letting that laps once you start",
    "start": "152840",
    "end": "158800"
  },
  {
    "text": "letting that go back and back and back you're going to end up in a situ situation like this where you're supporting lots and lots of versions of",
    "start": "158800",
    "end": "165239"
  },
  {
    "text": "the same event so this is one way to do things to get really explicit to separate things",
    "start": "165239",
    "end": "170879"
  },
  {
    "text": "out at an infrastructure level but what if you don't have the capability to do that you're using topics maybe for a",
    "start": "170879",
    "end": "177080"
  },
  {
    "text": "whole range of different message system to system communication but in some cases you might be using a more typical event bus an event bus",
    "start": "177080",
    "end": "184640"
  },
  {
    "text": "where all of the events just go into this same Big Bus and subscribers can",
    "start": "184640",
    "end": "189879"
  },
  {
    "text": "subscribe to events from that bus at this point you don't have that ability to start to separate your events out at",
    "start": "189879",
    "end": "196120"
  },
  {
    "text": "an infrastructure level so if there's one thing you take away from this talk there's one single",
    "start": "196120",
    "end": "203280"
  },
  {
    "text": "thing you going do after you've done this is to adopt some kind of defined specification for the events that you",
    "start": "203280",
    "end": "210080"
  },
  {
    "text": "publish some kind of defined structure something like the cloud events",
    "start": "210080",
    "end": "216480"
  },
  {
    "text": "specification is anyone using the cloud event specification today actually has anyone heard of it okay a few hands cool",
    "start": "216480",
    "end": "223560"
  },
  {
    "text": "so this is the only way to do this there's lots of different ways the thing to takeway is to have some kind of common defined structure for all of the",
    "start": "223560",
    "end": "230439"
  },
  {
    "text": "events that you publish and the cloud events specification defines a set of properties the first of those being the",
    "start": "230439",
    "end": "236040"
  },
  {
    "text": "data property the data property is the actual event payload this is where the order confirmed event that you published",
    "start": "236040",
    "end": "241640"
  },
  {
    "text": "earlier is going to go it's going to go inside this data property you've then got the data content type this tells a",
    "start": "241640",
    "end": "248040"
  },
  {
    "text": "subscriber what type of data is inside that data property here it's Json it could be XML it could be binary could be",
    "start": "248040",
    "end": "255120"
  },
  {
    "text": "some internal proprietary data format that someone wants developed that nobody really understands you've got the time this is",
    "start": "255120",
    "end": "262440"
  },
  {
    "text": "the time the event was published according to the producer now you could use this to kind of get an idea of",
    "start": "262440",
    "end": "268479"
  },
  {
    "text": "ordering but of course time and clocks and computers aren't that good going together so you wouldn't trust it but",
    "start": "268479",
    "end": "274639"
  },
  {
    "text": "it's good to know some element of when things happen before and after each other you've got an ID you've got an ID",
    "start": "274639",
    "end": "282000"
  },
  {
    "text": "this is a uniquely generated identifier again generated at the point of publish",
    "start": "282000",
    "end": "287080"
  },
  {
    "text": "by the producer this allows subscribers to implement things like em poy to receive an event and say have I seen",
    "start": "287080",
    "end": "292800"
  },
  {
    "text": "this event before yes I have I'm going to drop that I don't need to process it again and then around this conversation",
    "start": "292800",
    "end": "298479"
  },
  {
    "text": "of evolvability have been able to change the data structures in your system you've got the source and the type the source of this",
    "start": "298479",
    "end": "306039"
  },
  {
    "text": "event is the production order system and this is an order created event importantly it's version one of the",
    "start": "306039",
    "end": "313479"
  },
  {
    "text": "order created event so now as a subscriber no matter how you receive this event whether you",
    "start": "313479",
    "end": "318880"
  },
  {
    "text": "receive it from a queue a topic a bus a stream you pop it in a folder on a file system and pick it up again you've got",
    "start": "318880",
    "end": "325520"
  },
  {
    "text": "this ability to understand what this event is this is very one great we know",
    "start": "325520",
    "end": "330759"
  },
  {
    "text": "how to publish version one process version one this is version 10 what happened to 2 3 4 5 6 7 8 9 you've got",
    "start": "330759",
    "end": "336919"
  },
  {
    "text": "this ability to understand what to expect in that payload and then one other field I just",
    "start": "336919",
    "end": "342080"
  },
  {
    "text": "wanted to point out at this point is this Trace parent property this is what'll allow you to do tracing or",
    "start": "342080",
    "end": "348400"
  },
  {
    "text": "understand cause and effect inside your system and we'll talk about observability a little bit more later on just know that you can include this",
    "start": "348400",
    "end": "353960"
  },
  {
    "text": "Trace parent this here is a w3c trace context this could equally just be a correlation ID some kind of Comm an",
    "start": "353960",
    "end": "359919"
  },
  {
    "text": "identifier you pass from system to system to understand how things relate",
    "start": "359919",
    "end": "365319"
  },
  {
    "text": "together so once you've got this in place once you've got this ability to version your events how does this",
    "start": "365319",
    "end": "370440"
  },
  {
    "text": "actually work in practice so today you're publishing version one of the order confirmed",
    "start": "370440",
    "end": "376639"
  },
  {
    "text": "event and then actually you're going to start publishing version two of the event and for a period of time you're",
    "start": "376639",
    "end": "383319"
  },
  {
    "text": "going to be publishing two versions of the same event and at the minute version two sad",
    "start": "383319",
    "end": "389720"
  },
  {
    "text": "upset because it's just being published and like disappearing Into The Ether of the cloud nobody really cares about it but over",
    "start": "389720",
    "end": "395440"
  },
  {
    "text": "time because you set that depreciation date you say on the 1st of March 2025",
    "start": "395440",
    "end": "400680"
  },
  {
    "text": "we're going to stop publishing version one and inevitably on the 28th of February 2025 everyone's going to panic",
    "start": "400680",
    "end": "406759"
  },
  {
    "text": "and eventually move over to version two but stick to that depreciation date remember",
    "start": "406759",
    "end": "412280"
  },
  {
    "text": "that and remember that the events you publish are the API of your system so",
    "start": "412280",
    "end": "419759"
  },
  {
    "text": "treat the events you publish with the same respect and love and care that you would treat a synchronous API that",
    "start": "419759",
    "end": "426039"
  },
  {
    "text": "you're exposing to the public to another internal system so congratulations you've got",
    "start": "426039",
    "end": "431240"
  },
  {
    "text": "this ability now to start to evolve your data structures you've given you as a producer as a publisher the ability to",
    "start": "431240",
    "end": "438160"
  },
  {
    "text": "deal with breaking changes you can make a breaking change if you need to you can publish that in a separate way you can add that version to your events and",
    "start": "438160",
    "end": "444960"
  },
  {
    "text": "you've also given Downstream systems more of an ability to evolve independ dependently as well you don't completely",
    "start": "444960",
    "end": "451639"
  },
  {
    "text": "get rid of that but you do get rid of it a little bit you give them their opportunity to do things at their own",
    "start": "451639",
    "end": "457479"
  },
  {
    "text": "pace so that covers things you can do at the code level how you can think about the code you write the data structures",
    "start": "457479",
    "end": "463520"
  },
  {
    "text": "you have and how you evolve them over time and practices you can use to do that easier but when it does come to",
    "start": "463520",
    "end": "469479"
  },
  {
    "text": "changing your system of course whenever you make a change to a system you're going to want to test",
    "start": "469479",
    "end": "476199"
  },
  {
    "text": "it and I realize testing is obviously an incredibly contentious",
    "start": "476199",
    "end": "481680"
  },
  {
    "text": "Topic in software and actually one of the most common questions I used to get right when I was working at AWS talking",
    "start": "481680",
    "end": "486960"
  },
  {
    "text": "about serverless and event different systems I get people coming to me and saying well this all sounds magic but how do I how do I know it",
    "start": "486960",
    "end": "492800"
  },
  {
    "text": "works how do you test an asynchronous system how do you test a system that is dealing in the currency of events and",
    "start": "492800",
    "end": "499319"
  },
  {
    "text": "that naturally led to the question what type of tests should I write should I write unit test should I re integration",
    "start": "499319",
    "end": "504560"
  },
  {
    "text": "test should I chaos test what should I do and actually for the purpose of this talk I don't want get caught up in the",
    "start": "504560",
    "end": "510319"
  },
  {
    "text": "semantics of if something is a unit test or if something is an integration test what I want you to focus on is exactly",
    "start": "510319",
    "end": "515360"
  },
  {
    "text": "what it is that you're testing not if it is a unit or if it is an integration what exactly is it that you're trying to",
    "start": "515360",
    "end": "522120"
  },
  {
    "text": "test which naturally leads to the question why do we test",
    "start": "522120",
    "end": "528399"
  },
  {
    "text": "software why do we test the things we build whose favorite part of their job",
    "start": "528399",
    "end": "534080"
  },
  {
    "text": "is writing tests just that of Interest yes one hand I love it yes fantastic",
    "start": "534080",
    "end": "540360"
  },
  {
    "text": "and actually a more fundamental question to ask at this point and I actually want you all to think about this question just for a few seconds why exactly is it",
    "start": "540360",
    "end": "547160"
  },
  {
    "text": "that you're all right in software why is it that you're doing the job that you're doing just think about that for a couple of",
    "start": "547160",
    "end": "554079"
  },
  {
    "text": "seconds and I've tried to come up with my own opinions on why I do this why",
    "start": "554920",
    "end": "560640"
  },
  {
    "text": "people do this the first is to be a little bit more like Scrooge McDuck software is a well-paying job right it",
    "start": "560640",
    "end": "567040"
  },
  {
    "text": "pays well it's good Cold Hard Cash that's fine that's okay okay the second reason is because we all",
    "start": "567040",
    "end": "573920"
  },
  {
    "text": "love building really complex stuff don't we we love building cool stuff we love building complex stuff it's fantastic",
    "start": "573920",
    "end": "580040"
  },
  {
    "text": "isn't it it's great when you build something that's really complicated and it works this diagram actually really likes",
    "start": "580040",
    "end": "585279"
  },
  {
    "text": "me really makes me laugh whenever I see it because the first part of my career I was actually working with SQL Server integration Services building",
    "start": "585279",
    "end": "591000"
  },
  {
    "text": "integration packages integration packages that used to look at all these distributed systems and all these databases and pull all the data together",
    "start": "591000",
    "end": "597360"
  },
  {
    "text": "to make it behave like a coherent like I was the guy doing the midnight heroics",
    "start": "597360",
    "end": "602760"
  },
  {
    "text": "and I did all of that and I still ended up being the guy building cool databases and event buses because they were cool",
    "start": "602760",
    "end": "608640"
  },
  {
    "text": "because they were complicated so we all suffer from this this this Magpie effect of seeing a new and shiny thing and just",
    "start": "608640",
    "end": "614440"
  },
  {
    "text": "wanting to build it okay those first two are a little bit tongue and cheek if you didn't gather",
    "start": "614440",
    "end": "619480"
  },
  {
    "text": "that already more often than not when I think about why I build software when I talk to people about why they build",
    "start": "619480",
    "end": "624920"
  },
  {
    "text": "software it's because you want to help people you want to do something that makes",
    "start": "624920",
    "end": "631240"
  },
  {
    "text": "somebody else's life easier and regardless if you're working with a 20y old monolith running NET Framework one",
    "start": "631240",
    "end": "636920"
  },
  {
    "text": "on a Windows server or you've got a distributed set of thousands of microservices on a kubernetes cluster",
    "start": "636920",
    "end": "642480"
  },
  {
    "text": "that nobody really understands fundamentally the thing you're doing is helping making someone's life easier",
    "start": "642480",
    "end": "648200"
  },
  {
    "text": "more efficient better and frankly if your software doesn't do the thing it's supposed to do",
    "start": "648200",
    "end": "656120"
  },
  {
    "text": "then genuinely what's the point why are we doing it if it doesn't do the thing it's supposed to do so when it comes to testing I think",
    "start": "656120",
    "end": "663320"
  },
  {
    "text": "this is a really interesting way of looking at things does the system do the thing it's supposed to do and Martin thetes who was just on stage here he",
    "start": "663320",
    "end": "670639"
  },
  {
    "text": "talked about this in a talk from qon London last year and I'd really recommend actually going to check out this talk it's a really fantastic talk",
    "start": "670639",
    "end": "676160"
  },
  {
    "text": "on develop development software development testing and if I try and distill down Martin's thoughts in this",
    "start": "676160",
    "end": "683720"
  },
  {
    "text": "talk and if you are here Martin Come and Shout at me afterwards if I absolutely butcher this but the thing I took away",
    "start": "683720",
    "end": "689399"
  },
  {
    "text": "from this talk is that it doesn't matter if you write thousands and thousands of unit tests unit tests that test every",
    "start": "689399",
    "end": "695839"
  },
  {
    "text": "single getter and Setter on every single property testing every single method on every single class if your system",
    "start": "695839",
    "end": "702760"
  },
  {
    "text": "doesn't meet the requirement that it has if your system doesn't do the thing it's supposed to do and I took away this idea",
    "start": "702760",
    "end": "710480"
  },
  {
    "text": "of requirements driven testing so thinking about the requirements a system has a system as a whole an individual",
    "start": "710480",
    "end": "716839"
  },
  {
    "text": "microservice an individual module and testing to make sure that the thing does the thing it's supposed to do that it",
    "start": "716839",
    "end": "722360"
  },
  {
    "text": "meets the requirement that it has and when you think about the order service inside plant-based Pizza the",
    "start": "722360",
    "end": "728720"
  },
  {
    "text": "requirement of the order service is that a user can come along a user can create an order and then the user can retrieve",
    "start": "728720",
    "end": "735639"
  },
  {
    "text": "the status of the order they've just created and when you think about this synchronous part of the of the service",
    "start": "735639",
    "end": "741880"
  },
  {
    "text": "you can probably already all picture the type of test that you would write you probably almost see the code you're going to spin up an instance of your",
    "start": "741880",
    "end": "747399"
  },
  {
    "text": "service you're going to create h TP client you're going to make a post request you're going to make a get request and you're going to assert on",
    "start": "747399",
    "end": "753040"
  },
  {
    "text": "the results of that get request something like that is probably what you're going to do to test this but this isn't the only requirement",
    "start": "753040",
    "end": "761399"
  },
  {
    "text": "of the order service the order service also needs to notify other systems that an order has",
    "start": "761399",
    "end": "769519"
  },
  {
    "text": "been created that's a requirement of the service remember you're building an event rriv system and this last requirement this",
    "start": "769519",
    "end": "777600"
  },
  {
    "text": "thing that you're going to generate an order created event well that order created event might be being generated",
    "start": "777600",
    "end": "782720"
  },
  {
    "text": "to Kafka to a service bus to sqs to SNS to whatever it might be so now you've",
    "start": "782720",
    "end": "788800"
  },
  {
    "text": "just got this event that's inside this message Channel and you've got stuff that's happening asynchronously how do you assert on that how do you assert on",
    "start": "788800",
    "end": "796279"
  },
  {
    "text": "that thing that's happening and this can get even more tricky when you're dealing with systems",
    "start": "796279",
    "end": "801839"
  },
  {
    "text": "that are may be completely asynchronous in nature the payment service inside plant-based feater exposes a queue a",
    "start": "801839",
    "end": "808639"
  },
  {
    "text": "queue that only the order service is allowed to send messages to and when a payment needs to be taken the order service is going to send a take payment",
    "start": "808639",
    "end": "815120"
  },
  {
    "text": "message onto that queue the payment service is going to pick that message up it's going to process the payments and hopefully at some point going to publish",
    "start": "815120",
    "end": "821920"
  },
  {
    "text": "a payment successful event if the payment doesn't happen then it will publish a payment failed event here",
    "start": "821920",
    "end": "828079"
  },
  {
    "text": "you've got an event coming in an event going out and actually no real way you",
    "start": "828079",
    "end": "833320"
  },
  {
    "text": "can't hit an API endpoint to check that the payments happened because that just doesn't exist everything is happening asynchronously",
    "start": "833320",
    "end": "840320"
  },
  {
    "text": "things are starting to sound a little bit trickier now aren't they little bit harder maybe you're all now thinking you know what I'm going to go to a different",
    "start": "840320",
    "end": "845680"
  },
  {
    "text": "talk I'm just going to build a monolith I'm going to go and see Glenn's talk from yesterday on YouTube build a monolith build a modular",
    "start": "845680",
    "end": "852240"
  },
  {
    "text": "monolith okay so you want to learn about vender systems so there are some patterns that can help you here some",
    "start": "852360",
    "end": "857639"
  },
  {
    "text": "patterns that I found that have really helped the testing asynchronous systems and let's come back to this first use case first if you're running these kinds",
    "start": "857639",
    "end": "865040"
  },
  {
    "text": "of tests where you want to test your system does the thing it's going to do you're probably going to want run your system in a really isolated way whether",
    "start": "865040",
    "end": "871800"
  },
  {
    "text": "you're going to spin that up with dock compose or Aspire you're going to deploy it to a staging environment but you're going to want some element of control",
    "start": "871800",
    "end": "878399"
  },
  {
    "text": "over the environment that's under test the system that's under test so as well as spinning up your service in some way",
    "start": "878399",
    "end": "884839"
  },
  {
    "text": "you probably going to also spin up some kind of database you're probably also going to spin up some kind of event bus",
    "start": "884839",
    "end": "891480"
  },
  {
    "text": "you're going to spin up all this other infrastructure that you need to actually test the system under test and you probably also if you're in",
    "start": "891480",
    "end": "897959"
  },
  {
    "text": "this situation where you're storing state in a database and you're publishing an",
    "start": "897959",
    "end": "903160"
  },
  {
    "text": "event you're probably going to be using the outbox pattern who's familiar with the outbox pattern by the way I've heard",
    "start": "903160",
    "end": "909240"
  },
  {
    "text": "it mentioned a few times this week okay cool most of you are for those of you that aren't the outbox pattern simply is when you write some state to your",
    "start": "909240",
    "end": "916279"
  },
  {
    "text": "database you update the state you also write any events that you want to publish to a separate table in the",
    "start": "916279",
    "end": "922399"
  },
  {
    "text": "database and you wrap both of them things in a transaction so that if one",
    "start": "922399",
    "end": "927440"
  },
  {
    "text": "happens one doesn't happen the other doesn't happen either this avoids being in a situation where the state gets",
    "start": "927440",
    "end": "932480"
  },
  {
    "text": "updated but the event doesn't get published are the much more trickier the event gets published but the status",
    "start": "932480",
    "end": "937800"
  },
  {
    "text": "doesn't get updated so because at this point you're in a situation where your State's been updated and a record has been written to",
    "start": "937800",
    "end": "943720"
  },
  {
    "text": "a database table so at a really simplistic level one thing you could do to test this is to check the outbox",
    "start": "943720",
    "end": "950720"
  },
  {
    "text": "table in the database to make sure that the record has made it to the database because then some separate",
    "start": "950720",
    "end": "956759"
  },
  {
    "text": "process is going to come along later it's going to pick up that event and publish that event so surely if the record gets written to the outbox table",
    "start": "956759",
    "end": "963160"
  },
  {
    "text": "that categorically means that that event is going to be published I'm sure you can all imagine",
    "start": "963160",
    "end": "968560"
  },
  {
    "text": "ways where this would be tricky but if this is the place where you're at today you've got a database you've got an outbox you can't think of another way to",
    "start": "968560",
    "end": "973959"
  },
  {
    "text": "test it this is one such way you could do it you could simply query the database and check a record has made it to the outbox",
    "start": "973959",
    "end": "980800"
  },
  {
    "text": "table but if you think about the requirements of the order service the requirement that you have to build into",
    "start": "980800",
    "end": "986560"
  },
  {
    "text": "the order service is not that a record gets written to a table in the outbox the outbox is an implementation detail",
    "start": "986560",
    "end": "993600"
  },
  {
    "text": "inside the order service the requirement of the service is that an order gets created the order created event gets",
    "start": "993600",
    "end": "999519"
  },
  {
    "text": "published other systems are notified that there's a new order so this is a good interim option I think there's a",
    "start": "999519",
    "end": "1005639"
  },
  {
    "text": "better one so when you set up that service for testing you're going to spin up your service you're going to start up the database you're going to start up",
    "start": "1005639",
    "end": "1011800"
  },
  {
    "text": "some kind of message Channel and actually you've got an opportunity here you've got an opportunity to start doing",
    "start": "1011800",
    "end": "1017959"
  },
  {
    "text": "a kind of mocking is anyone here familiar with Wick actually a service called Wick okay some",
    "start": "1017959",
    "end": "1024240"
  },
  {
    "text": "of you are so Wick is a really cool service that you can use to mock synchronous apis so if you're testing service to service communication it's a",
    "start": "1024240",
    "end": "1029918"
  },
  {
    "text": "really cool way to do that and you can take that same thinking of actually I'm going to mock a synchronous API that I want to",
    "start": "1029919",
    "end": "1035959"
  },
  {
    "text": "communicate with and I'm going to mock a subscriber so I don't know of any tools",
    "start": "1035959",
    "end": "1042438"
  },
  {
    "text": "that actually do this so this will require a little bit of building yourself but you can build a system that when you spin up your service for",
    "start": "1042439",
    "end": "1047918"
  },
  {
    "text": "testing you're also going to spin up a service that simulates how a subscriber is going to behave that's going to",
    "start": "1047919",
    "end": "1052960"
  },
  {
    "text": "subscribe to all of the events that you are publishing that's the requirement that your system has remember to make",
    "start": "1052960",
    "end": "1058400"
  },
  {
    "text": "sure that order created event gets published when you when you work through actually writing that test now so you",
    "start": "1058400",
    "end": "1063960"
  },
  {
    "text": "want to test that when a create order request is received that an event gets published that's the requirement of your",
    "start": "1063960",
    "end": "1069000"
  },
  {
    "text": "system so you're going to spin up all this infrastructure you're going to spin up your services and you're going to start in the same way you're going to make that post request that synchronous",
    "start": "1069000",
    "end": "1075320"
  },
  {
    "text": "API request to the order service the order service is going to come back say that was AIO 1 2 3 4 5 6 it's going to",
    "start": "1075320",
    "end": "1081960"
  },
  {
    "text": "give you some kind of unique identifier events going to go into the outbox table it's going to be picked up from the outbox published to the event",
    "start": "1081960",
    "end": "1088720"
  },
  {
    "text": "bus and then your test harness this additional thing that you spin up can subscribe to them events and hopefully",
    "start": "1088720",
    "end": "1095640"
  },
  {
    "text": "receive that order created event that you've just published now you're are actually testing that the event that you",
    "start": "1095640",
    "end": "1101039"
  },
  {
    "text": "said you're publishing to the you're publishing that event to the channel that you said you would with the right name you're testing that the event",
    "start": "1101039",
    "end": "1107799"
  },
  {
    "text": "actually makes it then with this test harness you can start to expose a synchronous API endpoint an endpoint",
    "start": "1107799",
    "end": "1114320"
  },
  {
    "text": "that allows you to retrieve all of the events that have been received which allows you in your test to assert on the",
    "start": "1114320",
    "end": "1121520"
  },
  {
    "text": "fact that an order created event has been received for order 4356 or 1 2 3",
    "start": "1121520",
    "end": "1129120"
  },
  {
    "text": "46 so this is one such way to do it and you can build these test harnesses in a way that are reasonably generic and",
    "start": "1129120",
    "end": "1134440"
  },
  {
    "text": "there's a GitHub repo in here somewhere that actually has an example of how to do this with Pizza um and if you take the same way of",
    "start": "1134440",
    "end": "1142000"
  },
  {
    "text": "doing things this have this ability to like mock out a subscriber you're mocking to make sure that the event gets delivered to the place that you think it",
    "start": "1142000",
    "end": "1147880"
  },
  {
    "text": "should and then if you think about your fully asynchronous use case where you've got an event coming in an event going out you can apply this exact same",
    "start": "1147880",
    "end": "1154840"
  },
  {
    "text": "pattern you've got this practice in place now of just spinning up a test harness so you can start up your payment service you can start up the queue that",
    "start": "1154840",
    "end": "1161280"
  },
  {
    "text": "the payment service is hooked up to and you can inject that take payment command the payment service is going to",
    "start": "1161280",
    "end": "1167520"
  },
  {
    "text": "go off and do its work it's GNA take the payment then it's going to publish hopefully a payment successful event if",
    "start": "1167520",
    "end": "1172760"
  },
  {
    "text": "that's the thing you're testing for it may even publish a payment failed event the test harness consumes that and then",
    "start": "1172760",
    "end": "1178280"
  },
  {
    "text": "you can start to assert on the fact that the test harness has received the event you expected it",
    "start": "1178280",
    "end": "1185440"
  },
  {
    "text": "to so up to now you're testing the happy paths you're testing that the service",
    "start": "1185440",
    "end": "1190960"
  },
  {
    "text": "does the thing it's supposed to do which is a fantastic place to start who's here written a system that has never ever",
    "start": "1190960",
    "end": "1197640"
  },
  {
    "text": "failed okay it's good you're all in a safe space you're all okay admitting failure",
    "start": "1197640",
    "end": "1203559"
  },
  {
    "text": "it's good it's nice because sad paths happen as well don't they things go wrong probably more than they go right",
    "start": "1203559",
    "end": "1209559"
  },
  {
    "text": "in some cases at least with software I'm writing so you want to test the S sad paths as well and there's a lot of sad",
    "start": "1209559",
    "end": "1214840"
  },
  {
    "text": "paths that can happen in event different architectures maybe an upstream system publishes an event with a different",
    "start": "1214840",
    "end": "1220679"
  },
  {
    "text": "format they make a breaking change and they decide not to tell you how does your system handle",
    "start": "1220679",
    "end": "1226200"
  },
  {
    "text": "that maybe you need to implement item potency maybe you need to check that if",
    "start": "1226200",
    "end": "1232039"
  },
  {
    "text": "you receive the same event twice that you don't process it twice and if you think about a requirement of the payment",
    "start": "1232039",
    "end": "1238600"
  },
  {
    "text": "service if you were to order a pizza and get charged for that pizza twice three four times unless you were going to",
    "start": "1238600",
    "end": "1244280"
  },
  {
    "text": "receive four pizzas then you probably wouldn't want that to happen would you so there's a set of things that you can",
    "start": "1244280",
    "end": "1249640"
  },
  {
    "text": "actually test for you can test for the sad paths and once you've got this ability to behave like a subscriber to have this test harness you can start to",
    "start": "1249640",
    "end": "1255720"
  },
  {
    "text": "test these things quite easy you want you can test that in your payment service if you if the same if a",
    "start": "1255720",
    "end": "1263159"
  },
  {
    "text": "message is received twice for the same order that you don't process that payment twice you can inject a take",
    "start": "1263159",
    "end": "1268640"
  },
  {
    "text": "payment message into the service and then you can immediately inject another take payment message for that exact same",
    "start": "1268640",
    "end": "1275120"
  },
  {
    "text": "order and what you're going to expect the requirement of your system is that one payment successful event comes out",
    "start": "1275120",
    "end": "1281200"
  },
  {
    "text": "the other end which allows you to write a test code that looks a little bit something like this you can spin up your",
    "start": "1281200",
    "end": "1286240"
  },
  {
    "text": "infrastructure you can start up your service and then you can inject two instances of that same take payment",
    "start": "1286240",
    "end": "1292240"
  },
  {
    "text": "message you're going to generate an order identifier for the order that's under test and you're going to inject",
    "start": "1292240",
    "end": "1297320"
  },
  {
    "text": "one take payment message and then you're going to immediately inject another take payment message with the exact same",
    "start": "1297320",
    "end": "1303360"
  },
  {
    "text": "order and then because you've got this test harness in place you've got this ability to understand what comes out the",
    "start": "1303360",
    "end": "1308520"
  },
  {
    "text": "other end does the system do the thing it's supposed to do you can then assert that you only receive one payment",
    "start": "1308520",
    "end": "1315559"
  },
  {
    "text": "successful event so now you're starting to the requirements that your system",
    "start": "1315559",
    "end": "1321799"
  },
  {
    "text": "has now if some of you may already be thinking that there's a there's a problem with this approach there's",
    "start": "1321799",
    "end": "1326880"
  },
  {
    "text": "something that can go quite easily wrong with this approach something that's really frustrating and that's flaky",
    "start": "1326880",
    "end": "1333279"
  },
  {
    "text": "tests tests that sometimes work sometimes don't sometimes they work sometimes they don't and that's well",
    "start": "1333279",
    "end": "1338559"
  },
  {
    "text": "because these things are happening asynchronously your test is taking an action and then maybe sometime later an",
    "start": "1338559",
    "end": "1345039"
  },
  {
    "text": "event is going to come out the other end but you don't know how long that's going to take when you run that locally it could be milliseconds when you run it in",
    "start": "1345039",
    "end": "1351120"
  },
  {
    "text": "aure or AWS that could be hundreds of milliseconds which means whenever you're",
    "start": "1351120",
    "end": "1356480"
  },
  {
    "text": "writing these kinds of tests you're always going to need the ability to retry to check to see if an event has",
    "start": "1356480",
    "end": "1363880"
  },
  {
    "text": "been received to a certain event has been received and if it hasn't wait and try again and wait and try again and of",
    "start": "1363880",
    "end": "1372320"
  },
  {
    "text": "course you're probably not thinking do you just do this adverum for infinity and you just have an impossibly long running GitHub action that's all always",
    "start": "1372320",
    "end": "1378760"
  },
  {
    "text": "waiting for that payment successful event to come back and of course you're not going to want to do that you're going to want to",
    "start": "1378760",
    "end": "1384000"
  },
  {
    "text": "have some kind of cut off you're only going to want to retry a max number of times which then naturally leads to the",
    "start": "1384000",
    "end": "1389679"
  },
  {
    "text": "question how long do you wait how long do you wait for that",
    "start": "1389679",
    "end": "1395400"
  },
  {
    "text": "success or failure event to come back and actually a really nice way of",
    "start": "1395400",
    "end": "1400440"
  },
  {
    "text": "doing this is to think about again the requirements that your system has if you",
    "start": "1400440",
    "end": "1405559"
  },
  {
    "text": "need to process payments inside 200 milliseconds 100 milliseconds use that",
    "start": "1405559",
    "end": "1411400"
  },
  {
    "text": "requirement that your service has for latency to judge how long you're going to wait for the event to come back",
    "start": "1411400",
    "end": "1416600"
  },
  {
    "text": "because then you are both testing that your service meets the SLO that it has whil also testing that the event gets",
    "start": "1416600",
    "end": "1423000"
  },
  {
    "text": "published as you expect it to so maybe that's 200 milliseconds for the payment service you might check once wait 100",
    "start": "1423000",
    "end": "1429679"
  },
  {
    "text": "milliseconds check once wait 100 milliseconds maybe you give it another 100 milliseconds and then you fail then",
    "start": "1429679",
    "end": "1434960"
  },
  {
    "text": "you drop out and that's obviously going to change based on what exactly the require ments of your system",
    "start": "1434960",
    "end": "1440600"
  },
  {
    "text": "are so up to this point we've talked a lot about flaw events flowing around",
    "start": "1440600",
    "end": "1446000"
  },
  {
    "text": "checking that a system publishes an event sends a notification to the place that you expect it to but if you think",
    "start": "1446000",
    "end": "1452799"
  },
  {
    "text": "back to that issue I had right at the start of the talk that wasn't an issue of flaw that was an issue of structure",
    "start": "1452799",
    "end": "1458279"
  },
  {
    "text": "how events are structured and you can test for this as a subscriber you can test for the fact",
    "start": "1458279",
    "end": "1465600"
  },
  {
    "text": "that an upstream system might make a breaking change to an event publishes and breaks your system but that test is",
    "start": "1465600",
    "end": "1471360"
  },
  {
    "text": "probably going to go as far as I receive an event I don't have a clue what any of this is I'm just going to store it in a dead lq that's probably the extent of",
    "start": "1471360",
    "end": "1478120"
  },
  {
    "text": "how you can test your system you can test breaking changes of Upstream systems but is there not an opportunity",
    "start": "1478120",
    "end": "1484159"
  },
  {
    "text": "here to shift some of this testing into the responsibility of a producer and",
    "start": "1484159",
    "end": "1490200"
  },
  {
    "text": "actually one of your responsibilities as a producer in the invent system is to not make breaking changes and if you're",
    "start": "1490200",
    "end": "1496000"
  },
  {
    "text": "going to make breaking changes do it in a way that's evolvable that's controlled so one of the things you can",
    "start": "1496000",
    "end": "1502080"
  },
  {
    "text": "do in a producer is you can actually start to test the structure of the events that you",
    "start": "1502080",
    "end": "1507799"
  },
  {
    "text": "publish you go off and you start writing a test for your order service you write",
    "start": "1507799",
    "end": "1513120"
  },
  {
    "text": "a test that's actually going to run a piece of business logic and check that the event that gets generated matches the structure that you were expected to",
    "start": "1513120",
    "end": "1519960"
  },
  {
    "text": "so you're going to run this order. create method and the way all the Eventing Works inside this application",
    "start": "1519960",
    "end": "1525000"
  },
  {
    "text": "is that whenever anything happens against an order or any entity the events get collected up in an in-memory",
    "start": "1525000",
    "end": "1531279"
  },
  {
    "text": "list and then when that record is written to the database when the state is updated you going to open a",
    "start": "1531279",
    "end": "1536720"
  },
  {
    "text": "transaction update the state in the database iterate through all them events that the object's got in memory write",
    "start": "1536720",
    "end": "1541760"
  },
  {
    "text": "them to the outbox commit the transaction so when you run this piece of business logic order.",
    "start": "1541760",
    "end": "1547600"
  },
  {
    "text": "create the first thing you're going to do is check that there's an event in that list of events on the object that",
    "start": "1547600",
    "end": "1553720"
  },
  {
    "text": "is an order created event so if you imagine a new developer comes along they make a change to this they add a new",
    "start": "1553720",
    "end": "1559000"
  },
  {
    "text": "order create method they forget to generate the event into a memory this test would at this point fail so you're",
    "start": "1559000",
    "end": "1565240"
  },
  {
    "text": "testing that the business logic is generating the event that you expect it to but you can take that one step",
    "start": "1565240",
    "end": "1570760"
  },
  {
    "text": "further you can take that event that get is being held in memory and you can serialize that to a string and then you",
    "start": "1570760",
    "end": "1576679"
  },
  {
    "text": "can use a really wonderful new get package called njs schema and I don't actually know if system text Json does",
    "start": "1576679",
    "end": "1582200"
  },
  {
    "text": "this actually maybe it does now but you can use njs schema to load up a Json schema",
    "start": "1582200",
    "end": "1588440"
  },
  {
    "text": "and then you can validate that Json schema against an actual Json",
    "start": "1588440",
    "end": "1593840"
  },
  {
    "text": "string and Json schema is going to give you back a list of validation results and then you can assert that the count",
    "start": "1593840",
    "end": "1599600"
  },
  {
    "text": "of the validation results is zero which means the string that's been generated the Json string matches the schema that",
    "start": "1599600",
    "end": "1605600"
  },
  {
    "text": "you've given it so if you were to come along now and think W that order identify your property I want to change",
    "start": "1605600",
    "end": "1611240"
  },
  {
    "text": "that to order ID because it's shorter shorter that would then break this test",
    "start": "1611240",
    "end": "1616720"
  },
  {
    "text": "the first bit would still pass but the second bit where you're testing the schema would fail so now you're starting to test this",
    "start": "1616720",
    "end": "1622960"
  },
  {
    "text": "as a producer level as you as a producer are making changes to your system you're writing tests to make sure that this the",
    "start": "1622960",
    "end": "1628760"
  },
  {
    "text": "event you generate matches the schema that you expect it to so you're in a good place now good",
    "start": "1628760",
    "end": "1636960"
  },
  {
    "text": "job everyone you've got this ability to evolve your code you've thought about versioning your events you've thought about how you're going to evolve your",
    "start": "1636960",
    "end": "1642480"
  },
  {
    "text": "data structure you've got the cloud event specification you've written tests to tests how events flow around to test",
    "start": "1642480",
    "end": "1648399"
  },
  {
    "text": "that you areen making breaking changes to your events and then you deploy all of this and everything still",
    "start": "1648399",
    "end": "1655840"
  },
  {
    "text": "fails everything is still going to go wrong one of the second most guaranteed things in software as well as change",
    "start": "1655840",
    "end": "1661679"
  },
  {
    "text": "being number one is failure systems always fail which brings us to probably the",
    "start": "1661679",
    "end": "1668399"
  },
  {
    "text": "most important part of modern distributed systems development frankly any software development and that is",
    "start": "1668399",
    "end": "1675720"
  },
  {
    "text": "observability being able to observe your system distributed systems are being",
    "start": "1675720",
    "end": "1681200"
  },
  {
    "text": "changed frequently by different teams of people with different release Cycles different slas different levels of",
    "start": "1681200",
    "end": "1686919"
  },
  {
    "text": "experience different technology Stacks there is no possible way you could predict every single way your system",
    "start": "1686919",
    "end": "1694039"
  },
  {
    "text": "could possibly go wrong in production so what do I mean by observability how do I think about",
    "start": "1694039",
    "end": "1701039"
  },
  {
    "text": "observability I think about it as the ability to ask questions of your system",
    "start": "1701039",
    "end": "1706399"
  },
  {
    "text": "questions that you didn't know you needed to ask from a location that is outside of your",
    "start": "1706399",
    "end": "1712720"
  },
  {
    "text": "system questions you didn't know you needed to ask it's got a strange way of putting it isn't it how can I ask a",
    "start": "1712720",
    "end": "1718080"
  },
  {
    "text": "question I didn't know I needed to ask and if you think about the",
    "start": "1718080",
    "end": "1724240"
  },
  {
    "text": "components of plant-based pizza and imagine you're a developer on the AUD service and you have an outage in the",
    "start": "1724240",
    "end": "1729720"
  },
  {
    "text": "AUD service and that outage is caused by the database going offline maybe the database server run out of dis space for",
    "start": "1729720",
    "end": "1736399"
  },
  {
    "text": "example so you're going to go as a developer you're going to hopefully increase the dis space of that database",
    "start": "1736399",
    "end": "1742240"
  },
  {
    "text": "server thankfully you're running on the cloud so you can just give it more dis space and that's relatively easy database comes back online maybe I'm",
    "start": "1742240",
    "end": "1748480"
  },
  {
    "text": "oversimplifying that hopefully after you've done that you're going to have some kind of retrospective you're going to look at why did this happen how did",
    "start": "1748480",
    "end": "1754519"
  },
  {
    "text": "we let this happen and you're probably going to put some kind of monitoring in place you're going to monitor the disk",
    "start": "1754519",
    "end": "1759880"
  },
  {
    "text": "space of that database server and then if the dis space gets above 80% you're going to tell somebody about it so they",
    "start": "1759880",
    "end": "1765000"
  },
  {
    "text": "can preemptively go and resize that database server the problem with this is that the",
    "start": "1765000",
    "end": "1770960"
  },
  {
    "text": "chances of this exact same issue happening again in the exact same way is now dramatically reduced because you've",
    "start": "1770960",
    "end": "1778880"
  },
  {
    "text": "got a thing monitoring it but because you've got all these different teams of people changing",
    "start": "1778880",
    "end": "1784519"
  },
  {
    "text": "systems at their own frequency at their own rate you are dealing with unknown unknowns there is no possible way you",
    "start": "1784519",
    "end": "1791440"
  },
  {
    "text": "could predict every single way your system could possibly go wrong there's no way you could test for every single possible way that your system could go",
    "start": "1791440",
    "end": "1797679"
  },
  {
    "text": "wrong and this gets even more difficult when you're building event driven",
    "start": "1797679",
    "end": "1803840"
  },
  {
    "text": "systems because not only now have you got systems that are being frequently Changed by different teams of people",
    "start": "1803840",
    "end": "1808880"
  },
  {
    "text": "with different priorities different release Cycles these systems are also now communicating completely",
    "start": "1808880",
    "end": "1814440"
  },
  {
    "text": "asynchronously which makes cause and effect incredibly difficult to",
    "start": "1814440",
    "end": "1820080"
  },
  {
    "text": "understand how would you understand the systems that are Upstream of you systems that you're dependent",
    "start": "1820080",
    "end": "1825320"
  },
  {
    "text": "on and equally possibly even more important important how would you understand the systems that are Downstream of you that you're going to",
    "start": "1825320",
    "end": "1833399"
  },
  {
    "text": "impact and when you compare this to a synchronous system imagine you were back in the days where you had synchronous API calls here calls and effect is",
    "start": "1833399",
    "end": "1840159"
  },
  {
    "text": "relatively easy to understand the order service is going to make a call to the kitchen service on kitchen. plantbased",
    "start": "1840159",
    "end": "1845519"
  },
  {
    "text": "pizza.de whatever it's going to block it's going to wait until there's a response the response is going to come",
    "start": "1845519",
    "end": "1850799"
  },
  {
    "text": "back at some point that might be a 200 that might be a 500 it might be a timeout even but the order service is",
    "start": "1850799",
    "end": "1856159"
  },
  {
    "text": "waiting for the kitchen service to do something here you can reasonably easily infer cause and effect you can infer that the",
    "start": "1856159",
    "end": "1862159"
  },
  {
    "text": "order service is affecting the kitchen service but when you think about your event driv system well here producers",
    "start": "1862159",
    "end": "1869399"
  },
  {
    "text": "are just producing events they're sending the events out getting on with their day subscribers are subscribing to events hoping praying that an upstream",
    "start": "1869399",
    "end": "1876200"
  },
  {
    "text": "system doesn't make a breaking change it's much more difficult to understand cause and",
    "start": "1876200",
    "end": "1883039"
  },
  {
    "text": "effect which makes tracing or distributed tracing probably the most",
    "start": "1883039",
    "end": "1888559"
  },
  {
    "text": "important thing to think about in asynchronous systems and just a level set to make sure that we're all on the same page in terms of terminology at the",
    "start": "1888559",
    "end": "1894919"
  },
  {
    "text": "very top level here you've got trace or a root span the trace is the overall endtoend flaw of a",
    "start": "1894919",
    "end": "1900919"
  },
  {
    "text": "request a trace can be made up of lots and lots of different spans these spans",
    "start": "1900919",
    "end": "1906039"
  },
  {
    "text": "can span multiple different backend systems multiple different Services now to add a little bit of",
    "start": "1906039",
    "end": "1912200"
  },
  {
    "text": "nuance to what I've just said I've just said that tracing is the most important thing you need to think about to cave",
    "start": "1912200",
    "end": "1917679"
  },
  {
    "text": "out though that's tracing with context you can add tags to these spans",
    "start": "1917679",
    "end": "1924080"
  },
  {
    "text": "you can add attributes to these spans and it's this context that allows you to ask the",
    "start": "1924080",
    "end": "1929679"
  },
  {
    "text": "questions of your system that you didn't know you needed to ask context is the key part of modern observability whether",
    "start": "1929679",
    "end": "1936159"
  },
  {
    "text": "you're using traces whether you're doing structured logging context is",
    "start": "1936159",
    "end": "1941360"
  },
  {
    "text": "key and I like to think about context in two different ways two different parts to context the first is technical",
    "start": "1941360",
    "end": "1949760"
  },
  {
    "text": "context context that's going to be the same across every single system that all of you are building what was the htttp",
    "start": "1949760",
    "end": "1955000"
  },
  {
    "text": "route what was the method what was the status code an open Telemetry actually",
    "start": "1955000",
    "end": "1960399"
  },
  {
    "text": "publish a set of semantic conventions for messaging which is best practices between you and me and these best",
    "start": "1960399",
    "end": "1967120"
  },
  {
    "text": "practices Define a set of tags a set of attributes that all spans related to messaging should",
    "start": "1967120",
    "end": "1973200"
  },
  {
    "text": "have that covers things like the operation name are you you sending a",
    "start": "1973200",
    "end": "1978320"
  },
  {
    "text": "message are you receiving a message are you processing a message that's includes the messaging",
    "start": "1978320",
    "end": "1984320"
  },
  {
    "text": "system are you using SS are you using Kafka are you using SNS event grid and",
    "start": "1984320",
    "end": "1989679"
  },
  {
    "text": "what is the actual thing that you're sending to what is the name of the queue the topic the stream and there's a whole",
    "start": "1989679",
    "end": "1995279"
  },
  {
    "text": "bunch more semantic conventions and that QR code will take you to the page I didn't want to put them all on the screen because it' get very very busy",
    "start": "1995279",
    "end": "2001679"
  },
  {
    "text": "now these two at the bottom here at least last time I checked these two at the bottom here aren't in the semantic conventions for messaging but these are",
    "start": "2001679",
    "end": "2008279"
  },
  {
    "text": "two I always like to include myself what is the version of the message that I've just consumed or I've published and what",
    "start": "2008279",
    "end": "2014919"
  },
  {
    "text": "is the type of message that I've just consumed or I've just published and once you've got this",
    "start": "2014919",
    "end": "2021039"
  },
  {
    "text": "technical context you've got this common set of attributes that all spans in your system related to messaging have you can",
    "start": "2021039",
    "end": "2027840"
  },
  {
    "text": "start to then infer and aggregate your Trace information to give you some really nice high level information about",
    "start": "2027840",
    "end": "2033760"
  },
  {
    "text": "your service how many messages am I publishing how many messages have I consumed what kind of throughput does my",
    "start": "2033760",
    "end": "2040360"
  },
  {
    "text": "system have what's the age of the last message that I process what's the average size of the message that I'm",
    "start": "2040360",
    "end": "2045840"
  },
  {
    "text": "processing so once you've got this common set of technical context on your spans on your Telemetry you can then",
    "start": "2045840",
    "end": "2051599"
  },
  {
    "text": "start to infer really useful information about your system but this is only one part to",
    "start": "2051599",
    "end": "2057919"
  },
  {
    "text": "context this is technical context this is context that all of you will have in all of your systems that you're building",
    "start": "2057919",
    "end": "2063000"
  },
  {
    "text": "the more important half to context is your context",
    "start": "2063000",
    "end": "2068280"
  },
  {
    "text": "the specific context that your system has things like the user ID the order ID",
    "start": "2068280",
    "end": "2077440"
  },
  {
    "text": "the number of items on an order you want to add as much context as possible to",
    "start": "2077440",
    "end": "2083118"
  },
  {
    "text": "your Telemetry because it's that context that's going to allow you to ask questions of your system to ask the",
    "start": "2083119",
    "end": "2090000"
  },
  {
    "text": "questions you didn't know you needed to ask ahead of time imagine your support team comes to",
    "start": "2090000",
    "end": "2095320"
  },
  {
    "text": "you and they say someone's just rung up they ordered a pizza and the pizza never got to them now that would be an",
    "start": "2095320",
    "end": "2101320"
  },
  {
    "text": "incredibly sad place to be as someone who's just ordered a pizza but you're going to have to figure that out now as a",
    "start": "2101320",
    "end": "2106720"
  },
  {
    "text": "developer and I'm sure you've been there where you've been in that situation where the sport team comes you and say hey we've got this issue and you just go",
    "start": "2106720",
    "end": "2113359"
  },
  {
    "text": "that's a good one I don't have a clue having this context allows you to start to ask these questions where was",
    "start": "2113359",
    "end": "2119960"
  },
  {
    "text": "the last place I saw some Telemetry for this customer for this order maybe it seems like actually when",
    "start": "2119960",
    "end": "2127760"
  },
  {
    "text": "order has more than 15 items things start to go to wrong can I aggregate my data to look at that you can start to",
    "start": "2127760",
    "end": "2133520"
  },
  {
    "text": "ask these questions of your system a company I used to work for we used to have this question in the poll",
    "start": "2133520",
    "end": "2139680"
  },
  {
    "text": "request template whenever you made a PR you wanted to ship something to production you had to answer this question how will you know that this",
    "start": "2139680",
    "end": "2146079"
  },
  {
    "text": "specific piece of code you've just written has reached production more often than not this was",
    "start": "2146079",
    "end": "2152160"
  },
  {
    "text": "implemented using spam tags you would add a tag to the currently active span",
    "start": "2152160",
    "end": "2157960"
  },
  {
    "text": "that code reaches production you can then run a query in your observability back end to see well is this code in production yes it is because this tag",
    "start": "2157960",
    "end": "2164720"
  },
  {
    "text": "I've added has made it to production one thing I've always like to",
    "start": "2164720",
    "end": "2169880"
  },
  {
    "text": "point out at this point when you're adding contextual information to your Telemetry back end",
    "start": "2169880",
    "end": "2176440"
  },
  {
    "text": "please don't add any sensitive information to your observability back end what I really don't want is all of",
    "start": "2176440",
    "end": "2183440"
  },
  {
    "text": "your security teams ringing me up in a month's time saying well one of our developers saw you speak NDC London and",
    "start": "2183440",
    "end": "2188480"
  },
  {
    "text": "use data add lad of context and now we've got credit card information all over our observability backend please",
    "start": "2188480",
    "end": "2194160"
  },
  {
    "text": "people don't do that don't send credit card information to your observability provider that's not good thing to do so",
    "start": "2194160",
    "end": "2201720"
  },
  {
    "text": "tracing seems like it's a little bit of a silver bullet right it gives you this ability to understand cause and effect",
    "start": "2201720",
    "end": "2207720"
  },
  {
    "text": "to understand how one system impacts another and you look at these Trace graphs you get these lovely Trace graphs",
    "start": "2207720",
    "end": "2213319"
  },
  {
    "text": "that say Hey well look at all these backend systems that are involved look at this Trace information being propag ated from service to service to service",
    "start": "2213319",
    "end": "2219960"
  },
  {
    "text": "it looks great I mean it looks pretty it's colorful and you can even start to zoom into this information you can zoom",
    "start": "2219960",
    "end": "2225240"
  },
  {
    "text": "in and say actually show me exactly what is happening in my system this specific instance of",
    "start": "2225240",
    "end": "2231040"
  },
  {
    "text": "plant-based pizza was deployed to AWS and you can see that this message spent 294 milliseconds inside an event bus",
    "start": "2231040",
    "end": "2238400"
  },
  {
    "text": "inside Amazon eventbridge it then spent 170 milliseconds inside an sqsq before",
    "start": "2238400",
    "end": "2244720"
  },
  {
    "text": "it was eventually picked up by a Lambda function and you can see wow this looks really useful right I can see all this contextual",
    "start": "2244720",
    "end": "2250560"
  },
  {
    "text": "information and to get this level of contextual information you're probably going to have to do a little bit of work",
    "start": "2250560",
    "end": "2256079"
  },
  {
    "text": "yourself so sqs as an example when you receive a message from Amazon sqs in the attributes you will get a header that",
    "start": "2256079",
    "end": "2262560"
  },
  {
    "text": "tells you when was the time sqs first received this message and then as Martin started to",
    "start": "2262560",
    "end": "2268560"
  },
  {
    "text": "show you earlier you can generate a span that gives you that length of time how long is it since sqs received the",
    "start": "2268560",
    "end": "2274400"
  },
  {
    "text": "message what time is it now here's how long this message spent in fly and some observability prietors will actually",
    "start": "2274400",
    "end": "2280280"
  },
  {
    "text": "allow you to automatically generate this level of context but looking at this screenshot",
    "start": "2280280",
    "end": "2285640"
  },
  {
    "text": "again there's something else in the screenshot that's kind of confusing you've got all this colorful stuff you've got this bit at the start and",
    "start": "2285640",
    "end": "2291560"
  },
  {
    "text": "then you've got this really long purple bit this really long purple bit that takes a disproportionate amount of time",
    "start": "2291560",
    "end": "2298200"
  },
  {
    "text": "relative to the rest of the request and in this instance this is a third party API call that your system",
    "start": "2298200",
    "end": "2304720"
  },
  {
    "text": "needs to make and this third party API can take a little bit of time to respond sometimes and many of you will have",
    "start": "2304720",
    "end": "2310800"
  },
  {
    "text": "situations like this you'll have situations where an event gets generated that event starts some kind of long",
    "start": "2310800",
    "end": "2316720"
  },
  {
    "text": "running business process that might take minutes it might take days it might take months",
    "start": "2316720",
    "end": "2323240"
  },
  {
    "text": "even and you've got a slightly different instance of this inside plant-based pizza every day you run a daily job that",
    "start": "2323240",
    "end": "2330839"
  },
  {
    "text": "daily job is going to take all the orders that were confirmed that day and run some kind of analysis on that um on",
    "start": "2330839",
    "end": "2336920"
  },
  {
    "text": "that set of orders and if you were to simply just propagate the trace you were just to propagate the",
    "start": "2336920",
    "end": "2342000"
  },
  {
    "text": "trace so you could see it in that big long flame graph when you came along to debug the daily job to understand what",
    "start": "2342000",
    "end": "2348800"
  },
  {
    "text": "was happening in the daily job well all those individual spans are going to appear in the Upstream service traces",
    "start": "2348800",
    "end": "2355200"
  },
  {
    "text": "which isn't particularly useful for you as a developer trying to debug the daily job this also gets really confusing in",
    "start": "2355200",
    "end": "2362319"
  },
  {
    "text": "the other direction though cuz imagine someone had placed an order for a pizza at 9:00 in the morning pizza for",
    "start": "2362319",
    "end": "2368000"
  },
  {
    "text": "breakfast that should happen more often if you ask me but someone ordered a pizza at 9:00 in the morning this daily",
    "start": "2368000",
    "end": "2373400"
  },
  {
    "text": "job runs at midnight and that then gives you what is in effect a 15h hour Trace",
    "start": "2373400",
    "end": "2379920"
  },
  {
    "text": "don't ask me about if that mass is right so as you a developer looking at the order service now you're going to see",
    "start": "2379920",
    "end": "2385319"
  },
  {
    "text": "this Trace that started at 9:00 in the morning then 15 hours later there was a lot of white space and then the daily job",
    "start": "2385319",
    "end": "2390520"
  },
  {
    "text": "Ram so it's not actually helpful to always propagate Trace information to",
    "start": "2390520",
    "end": "2395720"
  },
  {
    "text": "always just continue the trace through every backend system but thankfully there's another",
    "start": "2395720",
    "end": "2401640"
  },
  {
    "text": "thing you can do there's an alternative approach called span linking in Span linking you can keep",
    "start": "2401640",
    "end": "2408640"
  },
  {
    "text": "things independent you can keep independent traces that are Rel relevant to your system your debugging",
    "start": "2408640",
    "end": "2414920"
  },
  {
    "text": "context and you can say this Span in this Trace links to this Span in this",
    "start": "2414920",
    "end": "2420240"
  },
  {
    "text": "Trace which allows you to keep things independent it allows you to keep independent traces for independent",
    "start": "2420240",
    "end": "2426040"
  },
  {
    "text": "services to add context text that's useful to you whilst still understanding",
    "start": "2426040",
    "end": "2431480"
  },
  {
    "text": "cause and effect to understanding how systems are impacting each other which will probably lead to some",
    "start": "2431480",
    "end": "2437440"
  },
  {
    "text": "of you asking the question which is the right one to choose do I propagate traces do I link",
    "start": "2437440",
    "end": "2444359"
  },
  {
    "text": "spans and one general rule of thumb I tend to use for this and of course nothing is absolute in software but this",
    "start": "2444359",
    "end": "2451000"
  },
  {
    "text": "one rule of Thum I like to use is that inside a given service boundary inside a service that you own propagate Trace",
    "start": "2451000",
    "end": "2458480"
  },
  {
    "text": "information think about that outbox pattern a request comes in you're going to write it to the outbox table something else is going to pick up and",
    "start": "2458480",
    "end": "2464400"
  },
  {
    "text": "process that message from the outbox and then publish it propagating the trace having one continuous Trace through the",
    "start": "2464400",
    "end": "2470599"
  },
  {
    "text": "outbox and out to the event bus is probably a useful things for you as a developer but then when it comes to",
    "start": "2470599",
    "end": "2476680"
  },
  {
    "text": "inter service communication you've got the order service now publishing that event that the kitchen service is consuming a lot of times it can be",
    "start": "2476680",
    "end": "2483119"
  },
  {
    "text": "useful to link at that point so as a general rule of thumb linking between Services propagating inside a service",
    "start": "2483119",
    "end": "2491079"
  },
  {
    "text": "can be a really good way of thinking about it but of course these things aren't absolute and whichever way you do",
    "start": "2491079",
    "end": "2496720"
  },
  {
    "text": "it whichever way you're building an event system pick one or the other because when you pick one or the other it allows you to start to understand",
    "start": "2496720",
    "end": "2502960"
  },
  {
    "text": "your dependencies it allows you to look at the product service inside plant-based pizza and understand that",
    "start": "2502960",
    "end": "2508400"
  },
  {
    "text": "the pricing service is an upstream dependency of the product service and it also allows you to",
    "start": "2508400",
    "end": "2514720"
  },
  {
    "text": "understand that you've got this whole range of other services that are Downstream dependencies of the product",
    "start": "2514720",
    "end": "2520079"
  },
  {
    "text": "service you can understand cause and effect observability adds the required",
    "start": "2520079",
    "end": "2525319"
  },
  {
    "text": "Nuance to this statement and I think this is a really dangerous statement sometimes in Event Systems that services are unaware of the downstream consumers",
    "start": "2525319",
    "end": "2532880"
  },
  {
    "text": "of their events and whilst technically this is true technically systems are unaware of",
    "start": "2532880",
    "end": "2538599"
  },
  {
    "text": "the downstream systems of their events you probably should care about who is dependent on you and who you are",
    "start": "2538599",
    "end": "2545040"
  },
  {
    "text": "dependent on so to start to bring all this together now how many of you are familiar with",
    "start": "2545040",
    "end": "2550760"
  },
  {
    "text": "the idea of API first design okay a couple of hands the idea of API first design is that imagine",
    "start": "2550760",
    "end": "2557480"
  },
  {
    "text": "you're building a a system you've got a front end team and a back end team the first thing you're going to do before you write a single line of code is",
    "start": "2557480",
    "end": "2562880"
  },
  {
    "text": "design the API design the contract that way teams can go off and work completely",
    "start": "2562880",
    "end": "2568000"
  },
  {
    "text": "independently and then when it comes to integrating the the thing together theoretically things just join together",
    "start": "2568000",
    "end": "2574000"
  },
  {
    "text": "again theoretically which means when you're building an event of system given that the contract of your events the scheme",
    "start": "2574000",
    "end": "2580839"
  },
  {
    "text": "of your events is the tightest form of coupling you will have in your system is that really you should practice event",
    "start": "2580839",
    "end": "2586319"
  },
  {
    "text": "first design be really intentional about the structure of the events that you",
    "start": "2586319",
    "end": "2592240"
  },
  {
    "text": "publish because that is the tightest form of",
    "start": "2592240",
    "end": "2597319"
  },
  {
    "text": "coupling and as you've learned in this talk there's techniques you can have where you can evolve these event structures using things like the cloud",
    "start": "2597319",
    "end": "2603240"
  },
  {
    "text": "event specification using versioning and you can test for this as well but you might also start thinking if the",
    "start": "2603240",
    "end": "2609800"
  },
  {
    "text": "contract of my event is the structure of my event is the tightest form of coupling wouldn't it be great if we",
    "start": "2609800",
    "end": "2616119"
  },
  {
    "text": "could just add the contents of an event to our Telemetry you think why don't we just",
    "start": "2616119",
    "end": "2622400"
  },
  {
    "text": "start logging all of our inbound messages or adding them as attributes to traces adding this our entire event",
    "start": "2622400",
    "end": "2628040"
  },
  {
    "text": "payload to the structure in our Telemetry back end and if you do this every time",
    "start": "2628040",
    "end": "2635000"
  },
  {
    "text": "somebody does this a security person somewhere in the world has a heart attack because you're now just blindly",
    "start": "2635000",
    "end": "2642200"
  },
  {
    "text": "storing information about an event inside your Telemetry back end and this comes back to the point I made earlier",
    "start": "2642200",
    "end": "2647839"
  },
  {
    "text": "be really careful about what You' send to your observability backend you don't want to be putting sensitive information",
    "start": "2647839",
    "end": "2653520"
  },
  {
    "text": "inside another system outside of your system unless of course you've got permissions to for whatever reason but I",
    "start": "2653520",
    "end": "2659760"
  },
  {
    "text": "do think there's something here if the contract of the event is the tightest form of coupling and of course you can",
    "start": "2659760",
    "end": "2666200"
  },
  {
    "text": "document event you can write documentation documentation gets out of date as you all well know so why can't you take that event",
    "start": "2666200",
    "end": "2673200"
  },
  {
    "text": "you receive and you've already seen how you can take a Json string and generate a Json schema off that the N Json schema",
    "start": "2673200",
    "end": "2680240"
  },
  {
    "text": "Library allows you to take a Json string and generate the schema of that piece of",
    "start": "2680240",
    "end": "2687319"
  },
  {
    "text": "Json so what you can do is instead of adding to your Telemetry the actual event contents",
    "start": "2687319",
    "end": "2693920"
  },
  {
    "text": "which in a lot of cases is something you probably don't want to do you can add the structure of your events to your",
    "start": "2693920",
    "end": "2700480"
  },
  {
    "text": "Telemetry back end this allows you to start to play",
    "start": "2700480",
    "end": "2705839"
  },
  {
    "text": "detective to start to ask the questions of your system that you didn't know you",
    "start": "2705839",
    "end": "2711079"
  },
  {
    "text": "needed to ask you can ask your system well we've got this success that this event that this this event that was",
    "start": "2711079",
    "end": "2717040"
  },
  {
    "text": "successful this event that's failed let's have a look at the diff of the schemas okay we know it's not somebody making a breaking change there's",
    "start": "2717040",
    "end": "2722800"
  },
  {
    "text": "something else going on you can ask the questions of your system",
    "start": "2722800",
    "end": "2728200"
  },
  {
    "text": "so at a cord level now you've built in the ability to evolve your systems to allow you as a producer to evolve your",
    "start": "2728200",
    "end": "2734640"
  },
  {
    "text": "events to deal with changing requirements but you've also given your subscribers the downstream systems of yours the ability to evolve",
    "start": "2734640",
    "end": "2740800"
  },
  {
    "text": "independently as well by using versioning in your events and you've written tests that allow you to test",
    "start": "2740800",
    "end": "2746440"
  },
  {
    "text": "both the event floor how events are moving around but also the structure of these events that they meet the",
    "start": "2746440",
    "end": "2751800"
  },
  {
    "text": "requirements that you said that it would have and finally you've learned that obser ility is incredibly important",
    "start": "2751800",
    "end": "2758280"
  },
  {
    "text": "adding context to all of the Telemetry inside plant-based Pizza is a really useful thing to",
    "start": "2758280",
    "end": "2763520"
  },
  {
    "text": "do now I know what you are all thinking I'm not actually a developer of plant-based Pizza raama as much as it'd",
    "start": "2763520",
    "end": "2769520"
  },
  {
    "text": "be great to work on a pizza restaurant that probably gives you free pizza hopefully you've all got your own Jeter backlogs you've all got your own issues",
    "start": "2769520",
    "end": "2775680"
  },
  {
    "text": "you've all got your own product managers what does this actually mean for you as you walk out with this talk today",
    "start": "2775680",
    "end": "2781720"
  },
  {
    "text": "what are the things that you should actually take away and do and the first is to adopt some kind of specification",
    "start": "2781720",
    "end": "2788599"
  },
  {
    "text": "for your event structures give yourself this ability to be really intentional about how you",
    "start": "2788599",
    "end": "2794480"
  },
  {
    "text": "structure your events include these properties include the ability to version events and including it in the",
    "start": "2794480",
    "end": "2800359"
  },
  {
    "text": "actual payload itself protects you from a situation where maybe you're using a messaging technology where you can't",
    "start": "2800359",
    "end": "2805400"
  },
  {
    "text": "start to separate things at an infrastructure level remember that context is King it's",
    "start": "2805400",
    "end": "2812800"
  },
  {
    "text": "context that gives you that ability to ask questions of your system to",
    "start": "2812800",
    "end": "2818000"
  },
  {
    "text": "understand exactly how your system is working in production and finally think about",
    "start": "2818000",
    "end": "2823359"
  },
  {
    "text": "things both at the micro level at an individual request level obviously it's incredibly useful to be able to track an individual request as it ping pongs and",
    "start": "2823359",
    "end": "2830119"
  },
  {
    "text": "bounces through all these different services but don't forget about the bigger picture don't forget about aggregating",
    "start": "2830119",
    "end": "2837520"
  },
  {
    "text": "this information and looking at a high level look at your system and how your system is",
    "start": "2837520",
    "end": "2843920"
  },
  {
    "text": "performing event different systems are an incredibly good way to build modern",
    "start": "2843920",
    "end": "2849839"
  },
  {
    "text": "distributed systems if you're adopting microservices if you're breaking your systems down event of an architect event",
    "start": "2849839",
    "end": "2855079"
  },
  {
    "text": "different architecture gives you that ability to have Loosely coupled communication to let systems communicate in an asynchronous way but it isn't",
    "start": "2855079",
    "end": "2862880"
  },
  {
    "text": "without its tradeoffs event architecture can lull you into a false sense of security make",
    "start": "2862880",
    "end": "2868480"
  },
  {
    "text": "you think that you're as more evolvable than you actually are make you think that your coupling is loose looser than",
    "start": "2868480",
    "end": "2873680"
  },
  {
    "text": "it actually is it can give you a a false sense of security about the the fact that you can",
    "start": "2873680",
    "end": "2880200"
  },
  {
    "text": "just make changes to your system you can just change an event and you don't really need to care about these other systems you can just make a breaking",
    "start": "2880200",
    "end": "2885800"
  },
  {
    "text": "change and once you've made a breaking change and broken A system that you didn't even know existed honestly it's",
    "start": "2885800",
    "end": "2892000"
  },
  {
    "text": "not very good for business and genuinely it's not actually a really good way to make",
    "start": "2892000",
    "end": "2897240"
  },
  {
    "text": "friends if you found this talk interesting I have a course on dorm train that goes through endtoend",
    "start": "2897240",
    "end": "2904200"
  },
  {
    "text": "building the vent system in net I've also got a whole lot of content on my YouTube channel if you're interested",
    "start": "2904200",
    "end": "2910520"
  },
  {
    "text": "in invent and architectures there's a whole lot of free content there about building vent and systems building vent systems in net plant-based Pizza is a",
    "start": "2910520",
    "end": "2916880"
  },
  {
    "text": "real application I used to give this talk and it wasn't actually a thing and then I built it so there's an implementation on that GitHub repo in",
    "start": "2916880",
    "end": "2923240"
  },
  {
    "text": "AWS so you can deploy it to AWS you can deploy it to a youer you can run it into a monolith there's a whole load of",
    "start": "2923240",
    "end": "2928440"
  },
  {
    "text": "different implementations in that QR code and finally I know it's late on a Friday so I do genuinely appreciate you",
    "start": "2928440",
    "end": "2935000"
  },
  {
    "text": "all sticking around listening to me ramble for an hour if you've got any questions I'm going to head out to the particular booth just to get out of the",
    "start": "2935000",
    "end": "2940640"
  },
  {
    "text": "way so that rendle can come in for the keynote so if you've got any questions Come and catch me over there and thank you all very much for listening",
    "start": "2940640",
    "end": "2949720"
  }
]