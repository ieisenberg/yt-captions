[
  {
    "text": "I think we're good to go it's excited to hear about the state of VB at least a",
    "start": "5770",
    "end": "13330"
  },
  {
    "text": "few mieux so we're going to talk about the state of c-sharp and what you might have missed so we're gonna talk about features from pretty much all the",
    "start": "13330",
    "end": "19600"
  },
  {
    "text": "versions of c-sharp after the first one I'll go just quickly run through the early versions of c-sharp a little bit",
    "start": "19600",
    "end": "25419"
  },
  {
    "text": "of history how the language has changed and kind of the things that made it what it is today and then we'll dig into",
    "start": "25419",
    "end": "31210"
  },
  {
    "text": "features and look at some coding Michelle studio and then if we have time at the end we'll look at some of the newer features that might come and might",
    "start": "31210",
    "end": "37900"
  },
  {
    "text": "not come and things that we've hopefully have wanted to get for a long time but",
    "start": "37900",
    "end": "43000"
  },
  {
    "text": "might not ever get so there's a lot of things they're gonna cover here so I hope you had a little bit of snack before getting in here because this is",
    "start": "43000",
    "end": "48940"
  },
  {
    "text": "gonna go fast so my name is Phillip Ekberg I love coming back here it's a great conference and if you have any",
    "start": "48940",
    "end": "55600"
  },
  {
    "text": "questions afterwards just ping me on Twitter send me an email or just come up afterwards all right so c-sharp we're gonna talk",
    "start": "55600",
    "end": "62770"
  },
  {
    "text": "about one of the best programming languages out there at least in my opinion and I guess that since you're rolling here you also like c-sharp",
    "start": "62770",
    "end": "68860"
  },
  {
    "text": "c-sharp is one of those languages that incorporates features from a lot of different paradigms we look at financial",
    "start": "68860",
    "end": "75579"
  },
  {
    "text": "programming languages or declarative programming languages to the imperative programming languages look at things like f-sharp Haskell C++ JavaScript Java",
    "start": "75579",
    "end": "85450"
  },
  {
    "text": "all of those different languages bring features into c-sharp right so the language teams look at all of those and",
    "start": "85450",
    "end": "91179"
  },
  {
    "text": "they take features and incorporate those into a a way that that c-sharp developer would build applications so there's a",
    "start": "91179",
    "end": "98829"
  },
  {
    "text": "lot of different things coming out of different languages that are really great but then they take all these features and make them kind of familiar",
    "start": "98829",
    "end": "104859"
  },
  {
    "text": "to c-sharp developers things like generics pattern matching and all those different cool features that make our",
    "start": "104859",
    "end": "110649"
  },
  {
    "text": "applications a lot better so in the early days c-sharp when c-sharp came out",
    "start": "110649",
    "end": "116859"
  },
  {
    "text": "it was kind of due to the fact that we got Java I was a Java developer back in",
    "start": "116859",
    "end": "122259"
  },
  {
    "text": "the day and I love working in Java I was one of those great languages because I didn't really want to work in C++",
    "start": "122259",
    "end": "127740"
  },
  {
    "text": "so when c-sharp came out being a Microsoft fanboy I just jumped on the train right away and then when the first",
    "start": "127740",
    "end": "133780"
  },
  {
    "text": "iteration of c-sharp came out we got c-sharp 2.0 which introduced generics",
    "start": "133780",
    "end": "138970"
  },
  {
    "text": "I know there's a lot of languages out there that still don't have generics it's been a while since I did Java I'd still don't know if Java has a generics",
    "start": "138970",
    "end": "145270"
  },
  {
    "text": "but it's one of those language features that make your applications a lot better to be able were a lot easier to read and",
    "start": "145270",
    "end": "152020"
  },
  {
    "text": "less error-prone right and what's interesting with generics is that it's one of those language features that came",
    "start": "152020",
    "end": "157090"
  },
  {
    "text": "out of the research team at Microsoft the same team that worked on f-sharp and features for the functional programming",
    "start": "157090",
    "end": "163600"
  },
  {
    "text": "languages let me get things like partial types anonymous methods iterators knowable types etc right so all of all of these",
    "start": "163600",
    "end": "171040"
  },
  {
    "text": "amazing features came into a programming language that people were already starting to adopt and then we got even",
    "start": "171040",
    "end": "178240"
  },
  {
    "text": "more features in the third version of c-sharp we've got things like the implicitly typed local variables which",
    "start": "178240",
    "end": "183700"
  },
  {
    "text": "is a very long way of saying in the VAR keyword right I remember having an interesting conversation with a co-worker on this",
    "start": "183700",
    "end": "189160"
  },
  {
    "text": "one he tried to convince me that just because he used the VAR keyword you're now writing dynamic programming so ICD",
    "start": "189160",
    "end": "196330"
  },
  {
    "text": "you I just D compile the code and prove that that's not what happens just send over the il and you kind of prove that",
    "start": "196330",
    "end": "202650"
  },
  {
    "text": "it's not dynamic programming because dynamic programming in c-sharp didn't come until the next version and then we",
    "start": "202650",
    "end": "208540"
  },
  {
    "text": "got a whole lot of other features like auto properties and nonnamous types extension methods lambda expressions",
    "start": "208540",
    "end": "214000"
  },
  {
    "text": "expression trees all those things build up the availability of doing language",
    "start": "214000",
    "end": "219400"
  },
  {
    "text": "integrated queries in c-sharp as well as building things that make our",
    "start": "219400",
    "end": "224500"
  },
  {
    "text": "applications a lot easier to work with sets of data we got linked to sequel which was kind of groundbreaking at the",
    "start": "224500",
    "end": "230709"
  },
  {
    "text": "time which then kind of transformed into link to energy framework and so forth so we can see here that the two first",
    "start": "230709",
    "end": "236980"
  },
  {
    "text": "iterations of c-sharp introduced a lot of interesting features but then something interesting happened when the",
    "start": "236980",
    "end": "243250"
  },
  {
    "text": "fourth version of c-sharp came out we kind of just got I don't want to say like minor features because adding",
    "start": "243250",
    "end": "249640"
  },
  {
    "text": "dynamic binding to the language was probably not a minor task to do but",
    "start": "249640",
    "end": "255209"
  },
  {
    "text": "adding these things here you can see that there's just a few features added to the language and adding the dynamic",
    "start": "255209",
    "end": "260290"
  },
  {
    "text": "binding meant that we could do things like JavaScript and Python and Ruby programming in runtime in our c-sharp",
    "start": "260290",
    "end": "267250"
  },
  {
    "text": "applications not convinced why you would do that but you could if you want to it's a way for us to",
    "start": "267250",
    "end": "274660"
  },
  {
    "text": "bring over scripting into our applications so if you have a game written in C C sharp you could for",
    "start": "274660",
    "end": "280780"
  },
  {
    "text": "instance have a scripting engine that allows you to run JavaScript or Python in your application but then when we got",
    "start": "280780",
    "end": "287110"
  },
  {
    "text": "the fifth version of c-sharp we got even less features what's interesting is that back in 2012 when I started writing my",
    "start": "287110",
    "end": "293770"
  },
  {
    "text": "book on on c-sharp I I was working in the the CTP of the async and avoid",
    "start": "293770",
    "end": "299020"
  },
  {
    "text": "keywords so this is a long time ago c-sharp I was added to her roles a long",
    "start": "299020",
    "end": "306370"
  },
  {
    "text": "time ago on adding just a synchron's methods to a code base that's probably by then a decade only snow no small",
    "start": "306370",
    "end": "312880"
  },
  {
    "text": "feature right so at this time the c plus the the c-sharp compiler was written in c++ and having a 10 year old code base",
    "start": "312880",
    "end": "321100"
  },
  {
    "text": "in c++ is probably not the best thing to work with because c++ is really hard as",
    "start": "321100",
    "end": "326710"
  },
  {
    "text": "it is but i do imagine that the engineers of microsoft are pretty smart so they probably just may be easier to",
    "start": "326710",
    "end": "332050"
  },
  {
    "text": "work with right but we can see here that the testament that we're getting less features in each iteration of c-sharp",
    "start": "332050",
    "end": "337419"
  },
  {
    "text": "and that's getting the synchronous methods is some small tasks tied to the language so what do you do with a code",
    "start": "337419",
    "end": "344200"
  },
  {
    "text": "base that's really hard to work with in that feature - well I know that whenever I have a problem with my code base I",
    "start": "344200",
    "end": "350500"
  },
  {
    "text": "simply just throw it away and rewrite the application that's da people tell me that it's a bad idea but it's keeping me",
    "start": "350500",
    "end": "357580"
  },
  {
    "text": "employed so I don't hear so they introduced a project called Ross Wayne has everyone in here heard about Roslyn",
    "start": "357580",
    "end": "364110"
  },
  {
    "text": "pretty much everyone I started about Rosling it's also known as the darknet compiler platform it's what kind of",
    "start": "364110",
    "end": "370810"
  },
  {
    "text": "compiles the it is what compiles the c-sharp and VB code right now and what's",
    "start": "370810",
    "end": "376750"
  },
  {
    "text": "interesting with the rosslyn the project is that they're building the c-sharp compiler with c-sharp so they're",
    "start": "376750",
    "end": "383530"
  },
  {
    "text": "compiling this new compiler which which is written in C sharp with the old c-sharp compiler and nowadays the new",
    "start": "383530",
    "end": "390639"
  },
  {
    "text": "c-sharp compiler is built on the new C's are profiler on it's it's a it's a it's",
    "start": "390639",
    "end": "395710"
  },
  {
    "text": "interesting but it's it's hard to explain right what's even more interesting with the the Rosten compiler",
    "start": "395710",
    "end": "400930"
  },
  {
    "text": "is that it's open source so I remember a few years ago Matt Anders at the the c-sharp team was up on",
    "start": "400930",
    "end": "407569"
  },
  {
    "text": "stage and build I believe and he pushed a button to release this as an open-source project what that means it's",
    "start": "407569",
    "end": "413239"
  },
  {
    "text": "not like Apple does open-source not bashing an apple but they do a lot of open source as well but they do all the",
    "start": "413239",
    "end": "419749"
  },
  {
    "text": "development internally and then just throw the code in a zip file and their repository I don't believe that's what",
    "start": "419749",
    "end": "424999"
  },
  {
    "text": "true open source is so what they do here is that with the Roslin compiler and a lot of other Microsoft projects there",
    "start": "424999",
    "end": "431809"
  },
  {
    "text": "they are doing all the commits openly you can follow along with all the changes to the language you can see here",
    "start": "431809",
    "end": "437689"
  },
  {
    "text": "that there's 91 releases of the compilers but there's not really 91 releases of Visual Studio right so what",
    "start": "437689",
    "end": "443929"
  },
  {
    "text": "you can do is actually bring down the code and compile this compiler yourself using Visual Studio and you can you",
    "start": "443929",
    "end": "449269"
  },
  {
    "text": "replace the compiler that you just built using the compiler in your environment if you want to do that if you want to",
    "start": "449269",
    "end": "456289"
  },
  {
    "text": "mess around the new features I wouldn't really recommend doing that if you're liking a large team and you want to work with new features just don't commit the",
    "start": "456289",
    "end": "462799"
  },
  {
    "text": "code that you wrote with the new features because that's gonna break everything and of course we can see here",
    "start": "462799",
    "end": "468229"
  },
  {
    "text": "that the community contributes with issues as well so you can go in and you can add your proposals to the language you can go ahead and talk about features",
    "start": "468229",
    "end": "474829"
  },
  {
    "text": "in the language that you like or dislike or things that doesn't worry for you and",
    "start": "474829",
    "end": "480349"
  },
  {
    "text": "of course you can send pull requests if you want to do that I've seen a lot of people actually helping out with the language and improving c-sharp and VB by",
    "start": "480349",
    "end": "488029"
  },
  {
    "text": "helping out and build these features for them so it's a great way for for people",
    "start": "488029",
    "end": "494449"
  },
  {
    "text": "to be involved and what's interesting is that the they have internal design",
    "start": "494449",
    "end": "501229"
  },
  {
    "text": "meetings at Microsoft now I don't work for Microsoft I just know that they have control design meetings because they add",
    "start": "501229",
    "end": "506329"
  },
  {
    "text": "the design notes for this on github after these meetings so they talk about all the features that they want to add",
    "start": "506329",
    "end": "512508"
  },
  {
    "text": "they have meanings about how they want to approach the features and what when I'm not getting to the language and then they add lis design notes to github so",
    "start": "512509",
    "end": "518779"
  },
  {
    "text": "people can contribute and look at all these different interesting ideas they might have around language so these two",
    "start": "518779",
    "end": "525649"
  },
  {
    "text": "in particular are about tuples and pattern matching which are two great additions to to c-sharp c-sharp 7 and",
    "start": "525649",
    "end": "533139"
  },
  {
    "text": "they're kind of changed the way that we build applications especially if you're coming from a wrong with Swift development or Kotlin",
    "start": "533139",
    "end": "539890"
  },
  {
    "text": "you'll be very familiar with pattern matching all right so what are the",
    "start": "539890",
    "end": "546640"
  },
  {
    "text": "proposals that they add was this four tuples here we can see that they add all the information about the background for the future they want to add and anyone",
    "start": "546640",
    "end": "553480"
  },
  {
    "text": "can add one of these proposals so I've seen the community contribute with proposals for the language but this also",
    "start": "553480",
    "end": "560170"
  },
  {
    "text": "means that if you can contribute with features that you want to add to for instance see sharp that means that there's no more no more language parody",
    "start": "560170",
    "end": "566770"
  },
  {
    "text": "so if you really love DB for instance you might not get the features in DB",
    "start": "566770",
    "end": "572290"
  },
  {
    "text": "that you do get in c-sharp so I don't believe VB still doesn't have pattern matching for instance it will probably",
    "start": "572290",
    "end": "578200"
  },
  {
    "text": "come in the future but right now they don't have any language parody anymore so that was one of the things that was",
    "start": "578200",
    "end": "584140"
  },
  {
    "text": "really important back in the day when they had the old compilers when they introduced the feature introduced something they pretty much did it for",
    "start": "584140",
    "end": "589960"
  },
  {
    "text": "both of the languages alright so enough just talking about these features let's look at some of the",
    "start": "589960",
    "end": "596260"
  },
  {
    "text": "particular features that were introduced as they rewrote the the Rosslyn the",
    "start": "596260",
    "end": "601810"
  },
  {
    "text": "project so the first version of c-sharp coming out with this new compiler meant that they could introduce a lot of cool",
    "start": "601810",
    "end": "608110"
  },
  {
    "text": "features in the language and I remember at the time they wanted to have this huge amount of features but they had to",
    "start": "608110",
    "end": "614050"
  },
  {
    "text": "cut it down a little bit and add a few few features of the language but by no means is this a small amount of features",
    "start": "614050",
    "end": "620650"
  },
  {
    "text": "to add to the language so they started off fighting using statements for static members auto property initializers await",
    "start": "620650",
    "end": "626770"
  },
  {
    "text": "inside the catch and final blocks having done a lot of asynchronous programming this is kind of a really nice addition",
    "start": "626770",
    "end": "633460"
  },
  {
    "text": "to it and then we got the null conditional operators and you'll see later on as well that one of the the",
    "start": "633460",
    "end": "639490"
  },
  {
    "text": "common things that they want to fix in the language is the mistake of adding nulls in the first place so we have all",
    "start": "639490",
    "end": "645490"
  },
  {
    "text": "of these ways to work around the fact that you can do do novel types inside c-sharp i've got string interpolation",
    "start": "645490",
    "end": "652260"
  },
  {
    "text": "dictionary initializers expression body members exception filters and the name",
    "start": "652260",
    "end": "657430"
  },
  {
    "text": "of operator so let's have a look at these features it's kind of a lot of features to add to a programming",
    "start": "657430",
    "end": "662980"
  },
  {
    "text": "language especially given the fact that in c-sharp five we pretty much only got",
    "start": "662980",
    "end": "668080"
  },
  {
    "text": "the a' sequence methods so i have samples from c-sharp 6 onwards to",
    "start": "668080",
    "end": "673480"
  },
  {
    "text": "c-sharp 8 9 10 and we're gonna cover as many as possible so this here illustrates a few features attitude the",
    "start": "673480",
    "end": "679450"
  },
  {
    "text": "programming language I'll just increase the font size a little bit here the",
    "start": "679450",
    "end": "686260"
  },
  {
    "text": "first one is here at the top right so we're saying using static system but console that means that we're bringing everything in from system console that's",
    "start": "686260",
    "end": "693070"
  },
  {
    "text": "static so we kind of find that inside our scope here which is inside our class so we can do things like we could say",
    "start": "693070",
    "end": "701050"
  },
  {
    "text": "write line here instead of having to say console dot write line this is a way for us to save characters and Scott",
    "start": "701050",
    "end": "707320"
  },
  {
    "text": "Hanselman said something really smart ones usually says a lot of smart things but this thing in particular stuck with",
    "start": "707320",
    "end": "713830"
  },
  {
    "text": "me and it said we only have a certain amount of keystrokes in our lives so we need to make sure that we don't write too many keystrokes so with a lot of the",
    "start": "713830",
    "end": "721420"
  },
  {
    "text": "features added to the programming language we save keystrokes so someone else make sure that they write the",
    "start": "721420",
    "end": "726640"
  },
  {
    "text": "keystrokes for us I think that's pretty good so we can call things like write write line and read line and we get",
    "start": "726640",
    "end": "732850"
  },
  {
    "text": "everything from from system console in here which is pretty great and of course if we were to add a method in here",
    "start": "732850",
    "end": "738220"
  },
  {
    "text": "called write line it would use that instead because that's the closest one it would find super smart and then we",
    "start": "738220",
    "end": "744250"
  },
  {
    "text": "also have this thing called string interpolation which is this little dollar sign here at the start of the",
    "start": "744250",
    "end": "750760"
  },
  {
    "text": "string instead of having to write string dot format I can now use string interpolation to say whenever you find",
    "start": "750760",
    "end": "755890"
  },
  {
    "text": "these curly braces this here is gonna be a code block where you can evaluate that thing and get the string representation",
    "start": "755890",
    "end": "761680"
  },
  {
    "text": "out of that alright so I can do I can do whatever I want in here I could call a",
    "start": "761680",
    "end": "767260"
  },
  {
    "text": "method I could have a variable in here and that would give the the spring representation for that variable and I'm",
    "start": "767260",
    "end": "773230"
  },
  {
    "text": "using the name of operator here which is simple way for us to say I want to get the name for the program so this here",
    "start": "773230",
    "end": "778570"
  },
  {
    "text": "would compile down to two looking like this here the reason that we want to use the name of operator is because if you",
    "start": "778570",
    "end": "783760"
  },
  {
    "text": "refactor the application now it wouldn't find the the usage of the program inside my string here so if you work with",
    "start": "783760",
    "end": "789970"
  },
  {
    "text": "logging and you have all of that inside your application which you should have then this here's a really nice feature",
    "start": "789970",
    "end": "795610"
  },
  {
    "text": "tab so the next feature we briefly I talked about what's the outer properties",
    "start": "795610",
    "end": "801190"
  },
  {
    "text": "and now with the c-sharp c-sharp six you can do auto property initializers which means",
    "start": "801190",
    "end": "807670"
  },
  {
    "text": "that we can do through read-only auto properties so this here is say property where I initialize the value of name to",
    "start": "807670",
    "end": "813880"
  },
  {
    "text": "Philip and then inside a constructor I could change this value but if I try to do that in my main method down here it's",
    "start": "813880",
    "end": "820030"
  },
  {
    "text": "gonna give me a compilation error saying that role this is in fact a read-only auto property or a read-only property so",
    "start": "820030",
    "end": "826720"
  },
  {
    "text": "you can't really change that there's a nice enough feature to have and then we",
    "start": "826720",
    "end": "834160"
  },
  {
    "text": "have their weights inside catch and finally blocks imagine that you have an asynchronous operation you call a",
    "start": "834160",
    "end": "839740"
  },
  {
    "text": "website or you talk to your database or you write something to disk and then",
    "start": "839740",
    "end": "845020"
  },
  {
    "text": "that fails then you catch that exception and you might want to clean up after yourself and then you can do that inside",
    "start": "845020",
    "end": "850390"
  },
  {
    "text": "the catch block and then in the final block you might want to dispatch the message message onto a queue and they",
    "start": "850390",
    "end": "855730"
  },
  {
    "text": "say that the operation is completed or that it failed and then we got an old",
    "start": "855730",
    "end": "865270"
  },
  {
    "text": "conditional operators this is where it becomes a little bit more interesting so",
    "start": "865270",
    "end": "870760"
  },
  {
    "text": "this classical person here the person has an address an address has a street a simple simple enough example if we",
    "start": "870760",
    "end": "877690"
  },
  {
    "text": "scrolled up here to the top initialize an array of people and then with the first one initialized as just with a",
    "start": "877690",
    "end": "884350"
  },
  {
    "text": "name Philip and then the second person is not initialized at all and then I call his method which is called process",
    "start": "884350",
    "end": "890500"
  },
  {
    "text": "people which doesn't know about my collection right so this here is a simple for loop for each loop it's going",
    "start": "890500",
    "end": "897010"
  },
  {
    "text": "to go through all my my people and you'll see here what it's doing instead of saying well I want you to give me the",
    "start": "897010",
    "end": "904420"
  },
  {
    "text": "name of the person but then I have this little question mark here saying well if person is null this entire expression",
    "start": "904420",
    "end": "910600"
  },
  {
    "text": "will be evaluated to no so it doesn't go ahead and get give us a no reference exception if we remove this question",
    "start": "910600",
    "end": "917410"
  },
  {
    "text": "mark here this would cause a no reference exception and then we could say that these defaults to unknown and",
    "start": "917410",
    "end": "923950"
  },
  {
    "text": "then of course we do the same thing with the address we say well if person is not no going to give me the address if the",
    "start": "923950",
    "end": "929440"
  },
  {
    "text": "address is not no they give me the street and if any of those things inside this this expression here is null then",
    "start": "929440",
    "end": "934960"
  },
  {
    "text": "just give me no idea as a default message and this works for pretty much anything right so this works for a race",
    "start": "934960",
    "end": "941290"
  },
  {
    "text": "as well so I'm initializing an array here called other people it's null from the start and then I can say well if the",
    "start": "941290",
    "end": "947140"
  },
  {
    "text": "other people are array is not no go ahead and give me the first index and if",
    "start": "947140",
    "end": "953800"
  },
  {
    "text": "that is not no good and give me the name so that's pretty nifty this is all due",
    "start": "953800",
    "end": "960790"
  },
  {
    "text": "to the fact that they did a mistake of adding nulls in the first place imagine",
    "start": "960790",
    "end": "966520"
  },
  {
    "text": "a world without Knowles that would be great so I think someone calculated how much no reference exception has cost the",
    "start": "966520",
    "end": "972370"
  },
  {
    "text": "world I don't know how you do that but yeah so the next feature is expression",
    "start": "972370",
    "end": "978040"
  },
  {
    "text": "body members again this is to save characters so we have this two string here at the bottom normally when you do",
    "start": "978040",
    "end": "984700"
  },
  {
    "text": "a a two string you would say return whatever you want to returning here but",
    "start": "984700",
    "end": "989740"
  },
  {
    "text": "now with the expression body members instead I can replace this here so I can save actually they say it's the same",
    "start": "989740",
    "end": "994810"
  },
  {
    "text": "amount of characters so in this case it's actually useless right so instead",
    "start": "994810",
    "end": "1001950"
  },
  {
    "text": "of having two about two curly braces I do in the error say actually I do now don't brought the return keyword here so",
    "start": "1001950",
    "end": "1007710"
  },
  {
    "text": "to save a bit of keywords keystrokes so this here you can do with anything you can say you can call a method here you",
    "start": "1007710",
    "end": "1014370"
  },
  {
    "text": "can use string interpolation you can do whatever crazy things you want to hear and I think this is really nice I do this a lot if I override them if they",
    "start": "1014370",
    "end": "1021060"
  },
  {
    "text": "override something from an interface or an absolute class and I just need to introduce from some simple implementation for it the last feature",
    "start": "1021060",
    "end": "1029130"
  },
  {
    "text": "added to c-sharp six is exception filters exception filters is one of those great things that we kind of wish",
    "start": "1029130",
    "end": "1036240"
  },
  {
    "text": "that we had for a long time so imagine in this case here I'm going to call a website I'm gonna call google.com and",
    "start": "1036240",
    "end": "1041550"
  },
  {
    "text": "I'm on a slow Network when I used to live in Australia could joke that I just",
    "start": "1041550",
    "end": "1047069"
  },
  {
    "text": "use a syllable network because it's crap there but since we're in Europe everything works pretty flawlessly here",
    "start": "1047069",
    "end": "1052080"
  },
  {
    "text": "we're for G so this will probably never happen but in the case of a timeout we",
    "start": "1052080",
    "end": "1057090"
  },
  {
    "text": "were on a really slow gsm network we're gonna timeout so we're saying here catch the web exception only when the status",
    "start": "1057090",
    "end": "1064200"
  },
  {
    "text": "off that exception is timeout so I can access the this variable inside my my",
    "start": "1064200",
    "end": "1070440"
  },
  {
    "text": "one Clause here so what happens is that it doesn't in fact go into this here unless this",
    "start": "1070440",
    "end": "1075670"
  },
  {
    "text": "pattern matches the exception and the same goes for this other one here I'm",
    "start": "1075670",
    "end": "1080950"
  },
  {
    "text": "saying well if we have flight mode turn on if this race running on a phone inside a stammering application for instance we can say well when they're",
    "start": "1080950",
    "end": "1087280"
  },
  {
    "text": "the web exception is in fact a name or solution failed we want to catch this here previously what you had to do is",
    "start": "1087280",
    "end": "1094660"
  },
  {
    "text": "that you have to catch the web exception and then do an if block inside the catch right but that would catch all the",
    "start": "1094660",
    "end": "1100540"
  },
  {
    "text": "different web exceptions if the exception that we get inside our try block does not match these two it's going to be the weave wreath row and",
    "start": "1100540",
    "end": "1106690"
  },
  {
    "text": "back to the caller so that's pretty good so that's all of the features that were",
    "start": "1106690",
    "end": "1113470"
  },
  {
    "text": "added to c-sharp six kind of a lot of features added to a language just right",
    "start": "1113470",
    "end": "1119710"
  },
  {
    "text": "after they introduced the rosslyn compilers but that kind of shows the the power and the the importance of",
    "start": "1119710",
    "end": "1126130"
  },
  {
    "text": "rewriting the compiler and sometimes it is better to just throw out your old code and rewrite everything so the next",
    "start": "1126130",
    "end": "1133780"
  },
  {
    "text": "version that they released on the rosslyn compilers is the c-sharp 7.0 language version and they talked for a",
    "start": "1133780",
    "end": "1141130"
  },
  {
    "text": "long time about doing things with with tuples and deconstruction and pattern matching and all of these interesting",
    "start": "1141130",
    "end": "1147220"
  },
  {
    "text": "features that that are rounding out all of your other programming languages but they haven't been available to do with",
    "start": "1147220",
    "end": "1154270"
  },
  {
    "text": "the old compiler because it was really hard to add feature to that so now in c-sharp 7 we get tuples and deconstruction and we'll talk about the",
    "start": "1154270",
    "end": "1161320"
  },
  {
    "text": "way that they're differ from the original tuples that you can use in the framework we've got pattern matching",
    "start": "1161320",
    "end": "1167530"
  },
  {
    "text": "which is a really nice addition is anyone in here doing coughlin or swift just one excellent so we'll have a look",
    "start": "1167530",
    "end": "1174310"
  },
  {
    "text": "at pattern matching it's one of those kind of groundbreaking things that when you start to use that in your applications and when you understand",
    "start": "1174310",
    "end": "1180070"
  },
  {
    "text": "like why you want to use it it's really making your code a lot more readable and then they got some smaller features as",
    "start": "1180070",
    "end": "1185920"
  },
  {
    "text": "well like digit separators and binary literals that I don't think I would ever use local functions is interesting and referee turns and out improvements so",
    "start": "1185920",
    "end": "1193780"
  },
  {
    "text": "let's have a look at those features as well so in c-sharp 7 the first have to",
    "start": "1193780",
    "end": "1201670"
  },
  {
    "text": "talk about the the fact that we've got tuples so tuples",
    "start": "1201670",
    "end": "1206999"
  },
  {
    "text": "can be seen as a way for us to pretty much return multiple types without",
    "start": "1206999",
    "end": "1212009"
  },
  {
    "text": "creating an type for that or create a local variable that holds more than more",
    "start": "1212009",
    "end": "1218070"
  },
  {
    "text": "than one variable without having to create a class for struct for it so this here we could for instance say well I",
    "start": "1218070",
    "end": "1223139"
  },
  {
    "text": "want to get the point this point here returns two variables and this here represents the topple that's good that's",
    "start": "1223139",
    "end": "1230190"
  },
  {
    "text": "going to be created for us I could of course add more things that could add inset here as well and int a int B but",
    "start": "1230190",
    "end": "1238799"
  },
  {
    "text": "this is starting to get ridiculous so it would probably create type instead but for from less primers I would probably",
    "start": "1238799",
    "end": "1246659"
  },
  {
    "text": "like that so now get point here returns this topple that I'd like constructor at the bottom so this here will take the",
    "start": "1246659",
    "end": "1253799"
  },
  {
    "text": "100 and match that into the variable X and then take 200 match that into the variable Y and then when we use this if",
    "start": "1253799",
    "end": "1261600"
  },
  {
    "text": "we go down to our main method down here there's a lot of different ways that we can use this but let's just call point",
    "start": "1261600",
    "end": "1267029"
  },
  {
    "text": "first to see what we get we do bar piece equal to get point and now you'll see",
    "start": "1267029",
    "end": "1273600"
  },
  {
    "text": "here that I can do p dot and we get x and y there at the bottom so this here",
    "start": "1273600",
    "end": "1279419"
  },
  {
    "text": "gives us a strong the type way of saying well give me these two these two properties or these two fields and then",
    "start": "1279419",
    "end": "1288269"
  },
  {
    "text": "we can introduce something called deconstruction so now that we have the tupple we want different ways for us to",
    "start": "1288269",
    "end": "1294710"
  },
  {
    "text": "put that into different boxes so we can say one way of deconstructing the topple",
    "start": "1294710",
    "end": "1300210"
  },
  {
    "text": "is to say well I want to put these values into the new X&Y variable that",
    "start": "1300210",
    "end": "1306840"
  },
  {
    "text": "have hearings inside my my scope in here what's really interesting is what it's doing is that it's not matching based on",
    "start": "1306840",
    "end": "1313499"
  },
  {
    "text": "the naming it's matching based on where it is inside the topple so if you want",
    "start": "1313499",
    "end": "1318509"
  },
  {
    "text": "to be a really nasty developer you do this right and then you have a problem",
    "start": "1318509",
    "end": "1324899"
  },
  {
    "text": "and I really interesting bogging our application now what happens here is",
    "start": "1324899",
    "end": "1330989"
  },
  {
    "text": "that I can say points again point X and point of y and I can even do point to",
    "start": "1330989",
    "end": "1337049"
  },
  {
    "text": "topple and this converts it back to an traditional top pole where we get would get the item one in item two which we've",
    "start": "1337049",
    "end": "1343859"
  },
  {
    "text": "been able to use back in the day as well so most of these features are just purely compiler magic they don't rely on",
    "start": "1343859",
    "end": "1349529"
  },
  {
    "text": "any runtime changes at all so that's great and then another way to",
    "start": "1349529",
    "end": "1355169"
  },
  {
    "text": "deconstruct this is to say well I want to get the point into these two new local variables called x 1 and x and y 2",
    "start": "1355169",
    "end": "1361200"
  },
  {
    "text": "and then another way is to say I want to cut down the characters and don't have to say which type it is twice so you can",
    "start": "1361200",
    "end": "1366749"
  },
  {
    "text": "say var X 2 + vara Y - all right so that's tuples and then we have pattern",
    "start": "1366749",
    "end": "1374820"
  },
  {
    "text": "matching now pattern matching is a way for us to to match on it on a particular",
    "start": "1374820",
    "end": "1380519"
  },
  {
    "text": "pattern which could be a class it could be a way that a class is represented but",
    "start": "1380519",
    "end": "1386489"
  },
  {
    "text": "that's a feature that we will talk more about in C sharp 8 when we talk about how they improve pattern matching but",
    "start": "1386489",
    "end": "1392249"
  },
  {
    "text": "now the basic pattern matching that was introduced in c-sharp 7 we can look at",
    "start": "1392249",
    "end": "1397379"
  },
  {
    "text": "this this class here for triangle and the rectangle which both inherits from shape they have some different",
    "start": "1397379",
    "end": "1403229"
  },
  {
    "text": "properties of course and then we'll scroll up here to the top and we'll see",
    "start": "1403229",
    "end": "1408779"
  },
  {
    "text": "that I'm introducing this shape here in this case it's a triangle I'm doing a switch switch case here on my shape and",
    "start": "1408779",
    "end": "1415320"
  },
  {
    "text": "in the case of this being a triangle so this is the pattern right so it's it's matching that's against that the type is",
    "start": "1415320",
    "end": "1421799"
  },
  {
    "text": "a triangle and then it's capturing the triangle as a local variable of T which is then available inside just this block",
    "start": "1421799",
    "end": "1427710"
  },
  {
    "text": "here so I don't have to do any type casting myself it just grabs this here when it's the correct type and the same",
    "start": "1427710",
    "end": "1434249"
  },
  {
    "text": "goes for my rectangle so I would be able to use all the the properties and types on my my class here right so I would be",
    "start": "1434249",
    "end": "1440700"
  },
  {
    "text": "able to ABC so this is kind of the",
    "start": "1440700",
    "end": "1446729"
  },
  {
    "text": "basics off pattern matching but this is the first version that they added in c-sharp 7 it's getting more interesting",
    "start": "1446729",
    "end": "1452460"
  },
  {
    "text": "in c-sharp 8 as well as a little bit more confusing and then local functions",
    "start": "1452460",
    "end": "1457649"
  },
  {
    "text": "I've seen a few examples of that being used but I don't know if I would ever use it myself first here at the top",
    "start": "1457649",
    "end": "1464340"
  },
  {
    "text": "you'll see using the binary literals so someone probably thought that well since we're saving keystrokes somewhere else",
    "start": "1464340",
    "end": "1470849"
  },
  {
    "text": "let's introduce like by our literals so instead of having to just write the the number 16 we can now",
    "start": "1470849",
    "end": "1477419"
  },
  {
    "text": "do this is a binary literal instead I don't know if you do bit shifting this",
    "start": "1477419",
    "end": "1482760"
  },
  {
    "text": "is probably a really nifty and then you have the digit separators as well lookey underscores just don't do it when it's",
    "start": "1482760",
    "end": "1489150"
  },
  {
    "text": "really confusing like I did here and then I have the local functions here at the bottom where I say well I want to calculate this thing here of X and then",
    "start": "1489150",
    "end": "1496679"
  },
  {
    "text": "we don't know what the internal things doing here it's actually a Fibonacci calculation error in internal internally",
    "start": "1496679",
    "end": "1503880"
  },
  {
    "text": "as a local function some minor feature",
    "start": "1503880",
    "end": "1510210"
  },
  {
    "text": "said it's new language but they still pretty interesting so if you're doing a lot of high-performance memory",
    "start": "1510210",
    "end": "1515240"
  },
  {
    "text": "programming which you will probably not do in c-sharp I guess but if you want to",
    "start": "1515240",
    "end": "1520590"
  },
  {
    "text": "do that if you do any games or or such in c-sharp you might like that they are doing some improvements to a references",
    "start": "1520590",
    "end": "1527160"
  },
  {
    "text": "and and memory memory things with the",
    "start": "1527160",
    "end": "1533910"
  },
  {
    "text": "language so in this case here I have this local method which returns a reference and this is a reference to a",
    "start": "1533910",
    "end": "1542580"
  },
  {
    "text": "value type now what's interesting here is I'm saying well this thing here",
    "start": "1542580",
    "end": "1547799"
  },
  {
    "text": "allows me to grab the element is at a particular position inside my array so I'm passing both the array and then the",
    "start": "1547799",
    "end": "1554040"
  },
  {
    "text": "position it simply returns a reference to that position in the array it's",
    "start": "1554040",
    "end": "1559410"
  },
  {
    "text": "really just a nasty way of doing what I'm doing here in the comment right but anyway so what this is doing here is",
    "start": "1559410",
    "end": "1564570"
  },
  {
    "text": "it's just giving me a reference to this which means that when I get the reference which I'm doing here I'm",
    "start": "1564570",
    "end": "1571020"
  },
  {
    "text": "saying well give me the the second index right so the the first the first item",
    "start": "1571020",
    "end": "1577730"
  },
  {
    "text": "then I can change the value of that since it's a reference so this is",
    "start": "1577730",
    "end": "1583580"
  },
  {
    "text": "exactly the same as doing this which is",
    "start": "1583580",
    "end": "1589290"
  },
  {
    "text": "a bit confusing but if you run this here it should actually change the value so the first one is 2 and then it changed that to 10 so improvements either to the",
    "start": "1589290",
    "end": "1599610"
  },
  {
    "text": "ref returns it's really interesting if you didn't high-performance applications and then the the last feature added",
    "start": "1599610",
    "end": "1606809"
  },
  {
    "text": "seven it's a way that they improve the out keyword if you're doing a lot of interrupts with older api's in Windows",
    "start": "1606809",
    "end": "1613080"
  },
  {
    "text": "for instance this is probably a god-sent I've used a few api's where you require",
    "start": "1613080",
    "end": "1618179"
  },
  {
    "text": "to you out out parameter and I've always disliked the fact that you have to whenever there is using out you have to",
    "start": "1618179",
    "end": "1624809"
  },
  {
    "text": "specify everything at the the line above and then send that into the method like",
    "start": "1624809",
    "end": "1630690"
  },
  {
    "text": "this here now with c-sharp seven they can simply say out VAR X and that just",
    "start": "1630690",
    "end": "1635850"
  },
  {
    "text": "creates that variable for you whatever it's neither right makes sense so not as",
    "start": "1635850",
    "end": "1642869"
  },
  {
    "text": "much as cutting down the characters but making your code more readable and understandable so that's all the",
    "start": "1642869",
    "end": "1649740"
  },
  {
    "text": "features added to c-sharp seven now since they released the compilers it's",
    "start": "1649740",
    "end": "1655830"
  },
  {
    "text": "an open source project and they since they're doing a lot of rapid development and they don't want to wait for Visual Studio to be released what they can do",
    "start": "1655830",
    "end": "1662279"
  },
  {
    "text": "now is introduce point releases which means that they can introduce c-sharp 7.1 or they can do c-sharp seven point",
    "start": "1662279",
    "end": "1669809"
  },
  {
    "text": "two three four or five and how many point releases they want right they can release this a say and then update with",
    "start": "1669809",
    "end": "1676889"
  },
  {
    "text": "a the visual studio update without having to worry about jumping on the train of a major release official studio",
    "start": "1676889",
    "end": "1683119"
  },
  {
    "text": "so the first point release that they ever did was seven point one and that introduced things like the async main",
    "start": "1683119",
    "end": "1688950"
  },
  {
    "text": "method so if you're doing a console application or if you're you have something that's running as a scheduled task in Windows you can now leverage",
    "start": "1688950",
    "end": "1695570"
  },
  {
    "text": "asynchronous operations inside your main method of the application without having to do nasty things like wrapping it a",
    "start": "1695570",
    "end": "1701369"
  },
  {
    "text": "tasket run and then forcing it to block and then we have the default expression",
    "start": "1701369",
    "end": "1706980"
  },
  {
    "text": "which is a way for us to save some characters again it's gonna infer the topple names with pattern matching with",
    "start": "1706980",
    "end": "1712830"
  },
  {
    "text": "generics just starting to improve the pattern matching and then represent please let's have a look at a few of",
    "start": "1712830",
    "end": "1718559"
  },
  {
    "text": "these features now the biggest one here is probably the",
    "start": "1718559",
    "end": "1725000"
  },
  {
    "text": "the fact that we can do a sink main methods maybe not a lot of people right",
    "start": "1725000",
    "end": "1730700"
  },
  {
    "text": "console applications but if you're doing scheduled tasks in Windows doing it with console apps it's really nice so don't have to do a service for instance so you",
    "start": "1730700",
    "end": "1738590"
  },
  {
    "text": "can see her that I'm marking my main method as async and instead of being a static void it's now async task of main",
    "start": "1738590",
    "end": "1746410"
  },
  {
    "text": "and we can stay awake you were just like we could in another it seems like a synchronous application and then you",
    "start": "1746410",
    "end": "1752750"
  },
  {
    "text": "also see the default keyword here at the bottom instead of having to write",
    "start": "1752750",
    "end": "1758180"
  },
  {
    "text": "default off shape so traditionally you would write write it like this right so",
    "start": "1758180",
    "end": "1765410"
  },
  {
    "text": "now instead of having to to write shape here at the end you can now move it over",
    "start": "1765410",
    "end": "1770780"
  },
  {
    "text": "to the the start of the expression instead becomes nice when you do this",
    "start": "1770780",
    "end": "1777500"
  },
  {
    "text": "with the construction as well because you don't have to specify the type over and over again all right so then the",
    "start": "1777500",
    "end": "1785840"
  },
  {
    "text": "other one that I want to talk about is just infer topple names it's an improvement to tuples so in this case here I'm creating a",
    "start": "1785840",
    "end": "1792920"
  },
  {
    "text": "temple like we saw earlier so I've got this this new point here which creates a",
    "start": "1792920",
    "end": "1798110"
  },
  {
    "text": "class called point which has an x and y property and then I'm creating a couple",
    "start": "1798110",
    "end": "1803870"
  },
  {
    "text": "out of those two values so normally what happens here is that you would get",
    "start": "1803870",
    "end": "1809570"
  },
  {
    "text": "something like this here you would get toppled item 1 in toppled on item 2 but with C sharp 7.1 it's now inferring",
    "start": "1809570",
    "end": "1817220"
  },
  {
    "text": "the names based off on those properties or fields so we can do tupple dot X and",
    "start": "1817220",
    "end": "1824060"
  },
  {
    "text": "toppled are why it's a nice addition it",
    "start": "1824060",
    "end": "1829070"
  },
  {
    "text": "could of course had I've said like this right just to be totally confusing let",
    "start": "1829070",
    "end": "1838220"
  },
  {
    "text": "me get rid of that otherwise I'll have a bug later on okay so that's seven point one not a lot of features added to seven",
    "start": "1838220",
    "end": "1846590"
  },
  {
    "text": "point run right so but still a few of those additions just to prove that they can do a point release so we're all seen",
    "start": "1846590",
    "end": "1851810"
  },
  {
    "text": "we they can do a lot of crazy things like just adding features as they like now in 7.2 they probably felt a little",
    "start": "1851810",
    "end": "1857429"
  },
  {
    "text": "warm warmer in their clothes so what they did was that introduced a lot of more interesting features again",
    "start": "1857429",
    "end": "1863009"
  },
  {
    "text": "something that's only interesting for someone that's - maybe high-performance applications were working with Interop",
    "start": "1863009",
    "end": "1869909"
  },
  {
    "text": "with older API so you can do read-only ref reps and in parameters which is a read-only way for you to passing",
    "start": "1869909",
    "end": "1876779"
  },
  {
    "text": "something to a as a reference non trailing named arguments stack Alec with",
    "start": "1876779",
    "end": "1882330"
  },
  {
    "text": "span of T that's an interesting feature that we're gonna look at private protected for the people that don't know if they want a",
    "start": "1882330",
    "end": "1887759"
  },
  {
    "text": "private or protected you can now use both of them at the same time I don't",
    "start": "1887759",
    "end": "1894419"
  },
  {
    "text": "know why but yep someone once is a feature and I guess it's easy to add it to language and then",
    "start": "1894419",
    "end": "1899519"
  },
  {
    "text": "we have the conditional conditional ref operator and the digit separator after",
    "start": "1899519",
    "end": "1906600"
  },
  {
    "text": "the basic specifier so I don't know like it seems like people are using those digit separators because they did an improvement for it",
    "start": "1906600",
    "end": "1912119"
  },
  {
    "text": "so just because I don't use the features doesn't mean that no one else does so",
    "start": "1912119",
    "end": "1917820"
  },
  {
    "text": "the first one is the ref read-only and in parameters so we have this method",
    "start": "1917820",
    "end": "1924299"
  },
  {
    "text": "here at the top what's interesting here is that it's specifying that it takes a",
    "start": "1924299",
    "end": "1930330"
  },
  {
    "text": "reference of an integer as the first parameter and then we have this in parameter which is really a reference",
    "start": "1930330",
    "end": "1936179"
  },
  {
    "text": "but it's a read-only reference so if I try to change this here it wouldn't work",
    "start": "1936179",
    "end": "1941700"
  },
  {
    "text": "so why would you use a reference because it's faster you don't have to copy the value and then here at the the return",
    "start": "1941700",
    "end": "1950879"
  },
  {
    "text": "type it's a reference but it's a real only reference because it wouldn't really make any sense right to say in",
    "start": "1950879",
    "end": "1956340"
  },
  {
    "text": "here that would be really weird and since the out keyword is already used I",
    "start": "1956340",
    "end": "1963659"
  },
  {
    "text": "couldn't use that either right so somebody read-only wrap or refereed only makes sense and then here we can see",
    "start": "1963659",
    "end": "1971340"
  },
  {
    "text": "that how it's being used i initialize two local variables and then I have a call compute here which I",
    "start": "1971340",
    "end": "1978929"
  },
  {
    "text": "know returns our reference and then the crazy things here is that I have to say",
    "start": "1978929",
    "end": "1984419"
  },
  {
    "text": "that this is a referee don't leave or upset because what happens if I do this",
    "start": "1984419",
    "end": "1990320"
  },
  {
    "text": "if I do this it's still gonna work but now it's gonna copy the value into a new variable locally so that's totally",
    "start": "1990320",
    "end": "1998130"
  },
  {
    "text": "confusing when I set up the dam I'm like oh this is gonna work and then I try to run it with changing the value at the",
    "start": "1998130",
    "end": "2004760"
  },
  {
    "text": "bottom I'm like what so that's how you have to do it and then we have an",
    "start": "2004760",
    "end": "2010460"
  },
  {
    "text": "example here of non trailing name arguments so imagine that you have 50 or",
    "start": "2010460",
    "end": "2016549"
  },
  {
    "text": "something input parameters and you use the first ones and then you want to have named one of them and then the use of",
    "start": "2016549",
    "end": "2021950"
  },
  {
    "text": "rest which is for that override you just have to use the naming ones you don't have to specify the naming for all of",
    "start": "2021950",
    "end": "2027770"
  },
  {
    "text": "them so that's pretty nifty so in this case here I just have to actually specify the first one which is X is",
    "start": "2027770",
    "end": "2032870"
  },
  {
    "text": "called : or FX and then I don't have to set it for the second one and in this case here in is actually redundant you",
    "start": "2032870",
    "end": "2040250"
  },
  {
    "text": "can't specify in here but you don't have to because it's gonna infer that for you some super nifty all right so does",
    "start": "2040250",
    "end": "2050750"
  },
  {
    "text": "anyone heard of the span so if you heard of span so span is a way for us to",
    "start": "2050750",
    "end": "2056330"
  },
  {
    "text": "represent a chunk of memory and in this case here I'm just allocating an integer",
    "start": "2056330",
    "end": "2061669"
  },
  {
    "text": "an array of integer on the stack by using stack a lock so this is one of the language features that I was introducing",
    "start": "2061669",
    "end": "2067580"
  },
  {
    "text": "c-sharp 7.2 now I'm using the span of of",
    "start": "2067580",
    "end": "2074260"
  },
  {
    "text": "interior's been of t to say well I want to to represent this chunk of memory",
    "start": "2074260",
    "end": "2079550"
  },
  {
    "text": "some way without having to copy the array every time I work with it so what I can do here is I can say well I want",
    "start": "2079550",
    "end": "2085190"
  },
  {
    "text": "to get a slice of this array here so we're gonna get a slice from the item 52 and then we're gonna get 10 items and",
    "start": "2085190",
    "end": "2093020"
  },
  {
    "text": "this year we'll give us a chunk of that memory just like two pointers but it's a",
    "start": "2093020",
    "end": "2098090"
  },
  {
    "text": "nicer representation so it doesn't copy the array for you so it's a truly high performant way of just grabbing a copy",
    "start": "2098090",
    "end": "2104420"
  },
  {
    "text": "of that chunk of data or grabbing a reference to that chunk of data okay so",
    "start": "2104420",
    "end": "2114650"
  },
  {
    "text": "seven-point-three was one of those versions that introduced Apple equality",
    "start": "2114650",
    "end": "2121579"
  },
  {
    "text": "stack alec initializers improved generic just improve generic constraints so a",
    "start": "2121579",
    "end": "2127130"
  },
  {
    "text": "point release would not a lot of features but still they won't probably want to release something before they",
    "start": "2127130",
    "end": "2132829"
  },
  {
    "text": "just do a big bang release with c-sharp eight which is going to introduce a whole lot of interesting features so",
    "start": "2132829",
    "end": "2140839"
  },
  {
    "text": "again let's have a quick look at the code here and the reason I don't live",
    "start": "2140839",
    "end": "2146779"
  },
  {
    "text": "code is because it's going to take forever so in this case here we're just doing topple equality and what's interesting with this is just as we",
    "start": "2146779",
    "end": "2153650"
  },
  {
    "text": "talked about earlier it's comparing based off the where it is in the topple",
    "start": "2153650",
    "end": "2158930"
  },
  {
    "text": "so we have a hundred and two hundred with those positions and then we can compare that to a new topple here at the",
    "start": "2158930",
    "end": "2166130"
  },
  {
    "text": "bottom which is not the same one that we returned right so it's going to compare the values and tuples so if we run this",
    "start": "2166130",
    "end": "2171200"
  },
  {
    "text": "here it's gonna say true hopefully because the the tuples are equal and",
    "start": "2171200",
    "end": "2181579"
  },
  {
    "text": "then we got the generic constraints if you're working a lot with generic programming this is really nice so you",
    "start": "2181579",
    "end": "2187460"
  },
  {
    "text": "can see here that this class called ticket here has two generic parameters the t data and t type and i can say well",
    "start": "2187460",
    "end": "2195680"
  },
  {
    "text": "I want the the T data which is the first one to be my I ticket data of the type I",
    "start": "2195680",
    "end": "2201559"
  },
  {
    "text": "ticket data and then I want the T type to be an enum and then when I initialize this here I can say where all I want the ticket to be a ticket data and valid",
    "start": "2201559",
    "end": "2208819"
  },
  {
    "text": "ticket types and that just just works so if you're doing a lot of generic programming this is really nice and then",
    "start": "2208819",
    "end": "2220549"
  },
  {
    "text": "another just improvement to stack allocation you can do that with object initialization as well so if you do a",
    "start": "2220549",
    "end": "2227150"
  },
  {
    "text": "lot of high performance apps and you want everything on the stack and then you can do this as well right so that's",
    "start": "2227150",
    "end": "2233390"
  },
  {
    "text": "pretty much everything up until the point of where we are now so that's all",
    "start": "2233390",
    "end": "2239869"
  },
  {
    "text": "of the language features added from c-sharp pretty much one to seven three that's a lot of features attitude",
    "start": "2239869",
    "end": "2246750"
  },
  {
    "text": "the programming language so you probably think that well c-sharp feels like it's one of those languages that's that's now complete but since a lot of other",
    "start": "2246750",
    "end": "2253170"
  },
  {
    "text": "programming languages keep living on as well and you get new new ways of building apps and you want to build more",
    "start": "2253170",
    "end": "2259020"
  },
  {
    "text": "for mobility or you have IOT we want in our language that kind of adapts to different situations so what's happening",
    "start": "2259020",
    "end": "2267000"
  },
  {
    "text": "with c-sharp now is that they're still doing everything in github and you can go ahead and go to there's this language",
    "start": "2267000",
    "end": "2272220"
  },
  {
    "text": "features status patient github and I'm really proud because my face is up there it's a great contribution to the year to",
    "start": "2272220",
    "end": "2279119"
  },
  {
    "text": "the platform I just fixed a spelling mistake",
    "start": "2279119",
    "end": "2283790"
  },
  {
    "text": "well everything counts right so this here just illustrates all the different",
    "start": "2284150",
    "end": "2289200"
  },
  {
    "text": "features that they want to add into the to the language and then you can go to another place which is the the c-sharp",
    "start": "2289200",
    "end": "2295710"
  },
  {
    "text": "lang repository and get up and this illustrates all the the c-sharp eight candidates so these are all the",
    "start": "2295710",
    "end": "2302280"
  },
  {
    "text": "champions that they want to add to the language you have everything in here from parents of span of T to read-only",
    "start": "2302280",
    "end": "2308310"
  },
  {
    "text": "members and structs and a lot of interesting things that they want to add to the language everything like record",
    "start": "2308310",
    "end": "2313500"
  },
  {
    "text": "types and so forth and we'll have a look at a few of these features in just a moment but well it's interesting is that",
    "start": "2313500",
    "end": "2319380"
  },
  {
    "text": "they're they just add all these features and you can see even here I don't know if you in the back and see that but like",
    "start": "2319380",
    "end": "2324569"
  },
  {
    "text": "there's a lot of comments on all of these different suggestions and issues on github because there's a lot of",
    "start": "2324569",
    "end": "2330540"
  },
  {
    "text": "people that are involved in making this easier programming language better and one of the commonalities between these",
    "start": "2330540",
    "end": "2336450"
  },
  {
    "text": "different versions of c-sharp and what they try to add to the language is the fact that we want to avoid no reference",
    "start": "2336450",
    "end": "2342750"
  },
  {
    "text": "exceptions so again they want to fix the mistake Bob that they did by adding notes in the language but how do we do",
    "start": "2342750",
    "end": "2350099"
  },
  {
    "text": "that well maybe by the point of c-sharp 10 I bet that's gonna be the next",
    "start": "2350099",
    "end": "2355589"
  },
  {
    "text": "version after 8 because they seem to be skipping 9 for her things I don't know I",
    "start": "2355589",
    "end": "2360680"
  },
  {
    "text": "recognize you call it X and not 10 that would be a better name for it and then maybe XS an X or",
    "start": "2360680",
    "end": "2367850"
  },
  {
    "text": "maybe not maybe maybe not so these are",
    "start": "2367850",
    "end": "2373730"
  },
  {
    "text": "all the features that they were going to add to to the next version of c-sharp which could be C sharp 8 HR 9 10 11 so",
    "start": "2373730",
    "end": "2381110"
  },
  {
    "text": "forth it's gonna be a lot so getting ranges that's probably coming in c-sharp a acing screams and",
    "start": "2381110",
    "end": "2387140"
  },
  {
    "text": "enumerables record types target typing expressions sorry type new expressions probably",
    "start": "2387140",
    "end": "2393320"
  },
  {
    "text": "require a runtime change so most of the features added to c-sharp up until now I",
    "start": "2393320",
    "end": "2399260"
  },
  {
    "text": "haven't really required a runtime change except things like the the dynamic",
    "start": "2399260",
    "end": "2405050"
  },
  {
    "text": "bindings the default and deconstruction generic attributes caller expression",
    "start": "2405050",
    "end": "2410330"
  },
  {
    "text": "attributes and hands using so they're doing like a pattern based thing so imagine that you can look at a class and",
    "start": "2410330",
    "end": "2418400"
  },
  {
    "text": "you just know the purpose so instead of having to implement eye disposable as long as you have to dispose method on",
    "start": "2418400",
    "end": "2424370"
  },
  {
    "text": "your class you can use it in the using block that would be right so I hope they do that for more things I would like to",
    "start": "2424370",
    "end": "2431870"
  },
  {
    "text": "see this so if your class implements an interface without explicitly implementing the interface I would like",
    "start": "2431870",
    "end": "2437840"
  },
  {
    "text": "to be able to see that class being passed into a method that requires that interface does that make sense I think",
    "start": "2437840",
    "end": "2443360"
  },
  {
    "text": "go allows you to do that and I think that's a great thing but I'm not sure they're going that way all right so",
    "start": "2443360",
    "end": "2448670"
  },
  {
    "text": "they're doing default interface methods this means that we can now introduce default methods on interfaces so you",
    "start": "2448670",
    "end": "2454430"
  },
  {
    "text": "don't have to require the the person that pulls down your interface to implement the method you can provide it",
    "start": "2454430",
    "end": "2460580"
  },
  {
    "text": "with a default implementation inside the interface and I'll talk more about why",
    "start": "2460580",
    "end": "2465800"
  },
  {
    "text": "that's nasty later on Noble reference type so we can now say that my",
    "start": "2465800",
    "end": "2471200"
  },
  {
    "text": "application does not allow you to do the nulls anymore and no policy assignment",
    "start": "2471200",
    "end": "2476660"
  },
  {
    "text": "switch expressions declaration expressions dictionary literals type classes and then is equal and or it's",
    "start": "2476660",
    "end": "2482630"
  },
  {
    "text": "equal say that ten times fast assignment operators static local functions parents",
    "start": "2482630",
    "end": "2488150"
  },
  {
    "text": "of span of T we don't with struct members negated condition your statements no condition or weight and more we're not gonna have time to look",
    "start": "2488150",
    "end": "2496130"
  },
  {
    "text": "at all of these but we'll have a look at a few of them but this just proves that there's so many features being added to the line",
    "start": "2496130",
    "end": "2501410"
  },
  {
    "text": "even though that we have everything from generics to link to pattern matching to",
    "start": "2501410",
    "end": "2506479"
  },
  {
    "text": "all the ways that we work with asynchronous operations there's still a whole lot of things that we want to add to the language right so there's still a",
    "start": "2506479",
    "end": "2513019"
  },
  {
    "text": "lot of things that we could add to the language so when do we reckon that c-sharp and it's gonna be out well",
    "start": "2513019",
    "end": "2518599"
  },
  {
    "text": "according to github it's two percent complete and it's January 1st 2080 so",
    "start": "2518599",
    "end": "2525670"
  },
  {
    "text": "this is a way for them to secure their jobs I reckon so now joking aside this is probably to be",
    "start": "2525670",
    "end": "2533059"
  },
  {
    "text": "a part of not all of those features but c-sharp 8 is gonna be a part of Visual Studio 2019 which is what I've been using here when doing my demos and let's",
    "start": "2533059",
    "end": "2541039"
  },
  {
    "text": "jump into looking at some of the the features of c-sharp 8 so I don't have",
    "start": "2541039",
    "end": "2548479"
  },
  {
    "text": "all of them but I have a few features here for c-sharp 8 the first one I want",
    "start": "2548479",
    "end": "2554690"
  },
  {
    "text": "to look at is ranges now ranges is one of those interesting features that you",
    "start": "2554690",
    "end": "2560119"
  },
  {
    "text": "could potentially do a lot of cool things with again especially to work with large collections of data so what",
    "start": "2560119",
    "end": "2567440"
  },
  {
    "text": "you can do here and what I'm doing here is that I'm setting up this span of T that we talked about earlier I'm just",
    "start": "2567440",
    "end": "2573349"
  },
  {
    "text": "going to increase this a little bit I'm setting up this span of interior using",
    "start": "2573349",
    "end": "2579499"
  },
  {
    "text": "the stack outlook I'm just using the objects and this is initialization for that allocation of my stack and then I'm",
    "start": "2579499",
    "end": "2585440"
  },
  {
    "text": "using data duct slice to say I want a part of this data how about you start",
    "start": "2585440",
    "end": "2591529"
  },
  {
    "text": "from from the index 5 and then you give me everything until the the next-to-the-last right so if we run this",
    "start": "2591529",
    "end": "2601369"
  },
  {
    "text": "it should give me 6 to 9 right 6 7 8 9 yeah it says it all right so we can do a",
    "start": "2601369",
    "end": "2608269"
  },
  {
    "text": "lot of cool things here we could we could use different patterns with the ranges I don't know all of them by hand",
    "start": "2608269",
    "end": "2615979"
  },
  {
    "text": "but you can say that you want everything from from the last one until they start and you could do a lot of cool things",
    "start": "2615979",
    "end": "2622420"
  },
  {
    "text": "using this pattern here and again this here doesn't create a new version off",
    "start": "2622420",
    "end": "2628400"
  },
  {
    "text": "the it doesn't copy the array when a view data duct slice here just gives me a representation off that so it's kind",
    "start": "2628400",
    "end": "2634940"
  },
  {
    "text": "of two point right so it doesn't copy all the data over so this is a super fast it's like it's super fast",
    "start": "2634940",
    "end": "2643210"
  },
  {
    "text": "I guess super fast it depends on what kind of thing you compared to but in",
    "start": "2643339",
    "end": "2651770"
  },
  {
    "text": "this case here we have some recursive patterns for for changes in the pattern",
    "start": "2651770",
    "end": "2658160"
  },
  {
    "text": "matching if we scroll down to the bottom let's scroll down even more you see here",
    "start": "2658160",
    "end": "2665660"
  },
  {
    "text": "that I have a point here at the bottom and I've introduced something called a deconstruct that's a way to deconstruct",
    "start": "2665660",
    "end": "2671900"
  },
  {
    "text": "the object so we can say that when this is deconstructed it creates the the x",
    "start": "2671900",
    "end": "2678650"
  },
  {
    "text": "and y fields and the same goes for the rectangle of introduced that here as",
    "start": "2678650",
    "end": "2685010"
  },
  {
    "text": "well and this is kind of just to help me with the the pattern matcher which will look at at what in one second and then",
    "start": "2685010",
    "end": "2691880"
  },
  {
    "text": "we have the same four four triangle and then have the shape which has a point now the recursive patterns it's a way",
    "start": "2691880",
    "end": "2700220"
  },
  {
    "text": "for us to do a few things first of all",
    "start": "2700220",
    "end": "2705230"
  },
  {
    "text": "we can say well when it's a triangle I also want to check something else so when it's this type then recursively",
    "start": "2705230",
    "end": "2712220"
  },
  {
    "text": "check another thing you can check another thing and you can check another thing right so using the new switch",
    "start": "2712220",
    "end": "2717890"
  },
  {
    "text": "expression here as well which is also a new language feature so I'm saying return a string which does a up here so",
    "start": "2717890",
    "end": "2725809"
  },
  {
    "text": "return based off the shape run this switch statement when it's a triangle capture that as a local variable of T",
    "start": "2725809",
    "end": "2732530"
  },
  {
    "text": "and when the sides are not equal where all I want to return that string and I'm using this expression here and",
    "start": "2732530",
    "end": "2738260"
  },
  {
    "text": "then I'm accusing and then I can use the deconstruction to say well what inside triangle and we have this side a B and C",
    "start": "2738260",
    "end": "2746359"
  },
  {
    "text": "and when there's a point but I don't care if the point X is set so this is a",
    "start": "2746359",
    "end": "2754069"
  },
  {
    "text": "bit confusing but that just shows you what you can do with these recursive patterns so you can first check the type for instance and you can check whatever",
    "start": "2754069",
    "end": "2760369"
  },
  {
    "text": "the deconstruction gives you so if these were reference types for instance we could check if their null and this underscoring means that I don't care",
    "start": "2760369",
    "end": "2767150"
  },
  {
    "text": "about the value okay and then I can have this default expression here at the bottom so when",
    "start": "2767150",
    "end": "2772260"
  },
  {
    "text": "there's no when doesn't match is either the triangle rectangle it just returns whatever right so we like T the",
    "start": "2772260",
    "end": "2781319"
  },
  {
    "text": "improvements with the pattern matching now know the reference types look at",
    "start": "2781319",
    "end": "2788339"
  },
  {
    "text": "that we have the the question mark again the famous question mark shows up and here we're saying well I want a string",
    "start": "2788339",
    "end": "2794910"
  },
  {
    "text": "here where this is in fact allowed to be null so if I remove this question mark",
    "start": "2794910",
    "end": "2801390"
  },
  {
    "text": "here now I've set up in my my project here so this is a c-sharp a feature I've",
    "start": "2801390",
    "end": "2807839"
  },
  {
    "text": "gone in here and I've said knowable context option enabled that means that I",
    "start": "2807839",
    "end": "2813569"
  },
  {
    "text": "cannot have nulls in my application well I can't have no if I really want to but",
    "start": "2813569",
    "end": "2818910"
  },
  {
    "text": "I'll see you later so in this case here it's now it's going to say yes quickly here to say well you",
    "start": "2818910",
    "end": "2825270"
  },
  {
    "text": "have a null nullable property called name which is undefined so they want you to set this into constructor so now it's it's nice to not be in c-sharp eight",
    "start": "2825270",
    "end": "2831930"
  },
  {
    "text": "that it's telling you that you should probably initialize the value hopefully in c-sharp time it's gonna just slap you",
    "start": "2831930",
    "end": "2838650"
  },
  {
    "text": "in the fingers and give you a compiler error but you can set it up set that up yourself now what we can do here is that",
    "start": "2838650",
    "end": "2845790"
  },
  {
    "text": "we'll leave that as a knowable one and then you see here that I have this method called print' here which takes a",
    "start": "2845790",
    "end": "2851309"
  },
  {
    "text": "person and it knows that well person here could potentially be no no right",
    "start": "2851309",
    "end": "2857849"
  },
  {
    "text": "because it's a reference so how do we fix that sorry well we can promise that",
    "start": "2857849",
    "end": "2867900"
  },
  {
    "text": "person is not going to be null or we could say that that if it's null it's",
    "start": "2867900",
    "end": "2874650"
  },
  {
    "text": "not going to do anything but then it's going to say well that's not good still gonna say that we have a problem right",
    "start": "2874650",
    "end": "2880880"
  },
  {
    "text": "possible dereference of no reference what you can also do is say that well",
    "start": "2880880",
    "end": "2888150"
  },
  {
    "text": "this person here is allowed to be null see this get rid of it gets rid of the",
    "start": "2888150",
    "end": "2894750"
  },
  {
    "text": "errors there we go so now we're saying well personally or could be null if it's",
    "start": "2894750",
    "end": "2900930"
  },
  {
    "text": "if it's not know going even it's not they'll go ahead and give me the length so now we don't have these errors anymore but you can also do all",
    "start": "2900930",
    "end": "2909310"
  },
  {
    "text": "you can do all sorts of crazy things in here you could for instance say that well let's do this I could say that you",
    "start": "2909310",
    "end": "2920080"
  },
  {
    "text": "promised that person is not going to be null in this case right so that's and",
    "start": "2920080",
    "end": "2925240"
  },
  {
    "text": "you could even do that for if we do this I promise that this person isn't gonna",
    "start": "2925240",
    "end": "2938260"
  },
  {
    "text": "be novel well don't do that so you have",
    "start": "2938260",
    "end": "2943480"
  },
  {
    "text": "the bang here to say that well I promise that this valleys not going to be null so if you introduce these features in your language like you're not gonna have",
    "start": "2943480",
    "end": "2949630"
  },
  {
    "text": "a problem right it's just there to help you find the null reference exceptions and I believe that John skeet an example",
    "start": "2949630",
    "end": "2956380"
  },
  {
    "text": "of how he introduced this in in no time where he showed how he found some some potential bugs or just introduced two",
    "start": "2956380",
    "end": "2963250"
  },
  {
    "text": "features to help him reduce the problems all right so before we end let's just go",
    "start": "2963250",
    "end": "2969400"
  },
  {
    "text": "through a few of the other interesting features that they might be adding to the language I'll share these slides",
    "start": "2969400",
    "end": "2974740"
  },
  {
    "text": "later on but you have the links at the bottom to the proposal so you can go ahead and read them on your own later on",
    "start": "2974740",
    "end": "2979960"
  },
  {
    "text": "so this is all available in github as well so they won't to add async streams which is a way for us to use the away",
    "start": "2979960",
    "end": "2986380"
  },
  {
    "text": "keyword with the for each loop so imagine that you want to a synchronously get each item in this for each loop well",
    "start": "2986380",
    "end": "2993250"
  },
  {
    "text": "you can do that you can now do that and this is then decompiled down to just a simple way for us to saying well while",
    "start": "2993250",
    "end": "2999460"
  },
  {
    "text": "we await the move next async method here just go ahead and do whatever you want on your UI thread right so you could",
    "start": "2999460",
    "end": "3007770"
  },
  {
    "text": "have written this code yourself but it's nice to get first-class citizens in the language to help us with this and then I",
    "start": "3007770",
    "end": "3014130"
  },
  {
    "text": "talked to just briefly about the default interface method so imagine in this case here we have this interface called I authenticate async now I was I said I",
    "start": "3014130",
    "end": "3021660"
  },
  {
    "text": "authenticate async sorry has this in the first version we have this user versus a",
    "start": "3021660",
    "end": "3027960"
  },
  {
    "text": "user and then allows us to authenticate we implement this interface and then someone releases a second version but in",
    "start": "3027960",
    "end": "3035430"
  },
  {
    "text": "this case here we introduced default implementation and I'm using the the expression body member here to do",
    "start": "3035430",
    "end": "3042990"
  },
  {
    "text": "that now what happens is that we can even call this inside our method and it would use in our application and we",
    "start": "3042990",
    "end": "3049260"
  },
  {
    "text": "would use that implementation what's interesting with this is that the first thing that I thought of is that well",
    "start": "3049260",
    "end": "3055320"
  },
  {
    "text": "this introduces multiple inheritance it's kind of the same thing right except that we don't have the access to",
    "start": "3055320",
    "end": "3064470"
  },
  {
    "text": "variable society we don't have the instance of a class right that's the only difference so you don't have two",
    "start": "3064470",
    "end": "3069720"
  },
  {
    "text": "classes that inherit from each other but in this case here working at implementations from different places so",
    "start": "3069720",
    "end": "3076650"
  },
  {
    "text": "it's interesting it helps people that builds these API sand interfaces so you",
    "start": "3076650",
    "end": "3083490"
  },
  {
    "text": "don't have a problem each time you operate a package from you get it's a nice addition then who knows Ricker",
    "start": "3083490",
    "end": "3089370"
  },
  {
    "text": "types might show up in c-sharp ten or eleven it's one of those features that they talked about adding in c-sharp six",
    "start": "3089370",
    "end": "3094530"
  },
  {
    "text": "but for some reason it's really hard to implement and you'll see why in a second",
    "start": "3094530",
    "end": "3100200"
  },
  {
    "text": "so imagine in this case here we have this triangle of shape it has all these different sides and a constructor that",
    "start": "3100200",
    "end": "3105270"
  },
  {
    "text": "requires it to set these these values then with with record types we could",
    "start": "3105270",
    "end": "3110580"
  },
  {
    "text": "simply say well I want this triangle it requires have the side a B and C and even here some shape and what happens",
    "start": "3110580",
    "end": "3117000"
  },
  {
    "text": "with the compilers and it generates all this interesting code here so for",
    "start": "3117000",
    "end": "3122910"
  },
  {
    "text": "instance it implements the I credible it sets the values in the constructor it",
    "start": "3122910",
    "end": "3128370"
  },
  {
    "text": "introduces two equals which checks the values and out the references it gives",
    "start": "3128370",
    "end": "3133500"
  },
  {
    "text": "us this with things so the idea is that it's immutable so you have to get a new triangle in order for you to change",
    "start": "3133500",
    "end": "3141000"
  },
  {
    "text": "about leaves and then the D constructor at the bottom now where it gets tricky",
    "start": "3141000",
    "end": "3146100"
  },
  {
    "text": "is with inheritance so if you have one record type inheriting from another record it would be really hard to",
    "start": "3146100",
    "end": "3153330"
  },
  {
    "text": "construct this code here my solution would be just to don't allow inheritance but maybe we will get something really",
    "start": "3153330",
    "end": "3160410"
  },
  {
    "text": "smart in the next version of c-sharp and then we might be getting something",
    "start": "3160410",
    "end": "3166200"
  },
  {
    "text": "called negated conditions if statements and they've talked about this for a long time as well I believe this showed up way back as",
    "start": "3166200",
    "end": "3172320"
  },
  {
    "text": "well when c-sharp 7 came out so we can do this now all right so we can say well if not shape is a triangle but that's",
    "start": "3172320",
    "end": "3178800"
  },
  {
    "text": "kind of nasty way of saying the the negative negated condition right so we",
    "start": "3178800",
    "end": "3184110"
  },
  {
    "text": "could say well if shape is not a triangle we could say if not or we could",
    "start": "3184110",
    "end": "3189840"
  },
  {
    "text": "say unless the shape is a triangle so these are all the different options I reckon I like the last one but I still",
    "start": "3189840",
    "end": "3197040"
  },
  {
    "text": "don't like the the fact that they introduced a new keyword I really don't like the second one maybe if shape is",
    "start": "3197040",
    "end": "3203280"
  },
  {
    "text": "not a triangle is the best one to notice and then they're doing improvements to",
    "start": "3203280",
    "end": "3209100"
  },
  {
    "text": "declaration expressions as well so I ran into this recently where I had to write",
    "start": "3209100",
    "end": "3214350"
  },
  {
    "text": "some code like this and actually tried to do this here at the bottom but it didn't work so I have to put the the",
    "start": "3214350",
    "end": "3219500"
  },
  {
    "text": "initialization of your variable or the declaration of the variable before you set the value in the while loop in check",
    "start": "3219500",
    "end": "3225960"
  },
  {
    "text": "in so this is going to be a nice addition as well so I reckoned that like",
    "start": "3225960",
    "end": "3231090"
  },
  {
    "text": "all of the features that came in c-sharp one two seven as well as the features from you know c-sharp aid and onwards",
    "start": "3231090",
    "end": "3237300"
  },
  {
    "text": "are things that make the programming language really powerful one the idea is that all these features not only make",
    "start": "3237300",
    "end": "3243720"
  },
  {
    "text": "our applications like more that were less error-prone but you know they also make it easier for us to build",
    "start": "3243720",
    "end": "3249690"
  },
  {
    "text": "applications and maintain them some people tend to say that well adding more features to the language means that you",
    "start": "3249690",
    "end": "3255780"
  },
  {
    "text": "you might get applications that look totally different but I think they've made a pretty good job that to make it",
    "start": "3255780",
    "end": "3260910"
  },
  {
    "text": "so that when a c-sharp developer builds an application it looks like a c-sharp application doesn't look like a PHP or",
    "start": "3260910",
    "end": "3267180"
  },
  {
    "text": "Java or costing application I think that's really a great way to to build on",
    "start": "3267180",
    "end": "3274170"
  },
  {
    "text": "top of this language so just to wrap this up I think that with these additions to c-sharp I think it's",
    "start": "3274170",
    "end": "3279690"
  },
  {
    "text": "becoming I need a better programming language and we'll see improvements to pattern matching in all the ways that you can avoid nulls in the future and",
    "start": "3279690",
    "end": "3285900"
  },
  {
    "text": "even with all the older features in c-sharp even if you haven't used the async and up with keywords I think that",
    "start": "3285900",
    "end": "3292500"
  },
  {
    "text": "having these features available is a really great addition to the language and just makes it easier for us to build better",
    "start": "3292500",
    "end": "3297600"
  },
  {
    "text": "applications right thank you so much we're coming don't forget to vote on your way out and I hope to see you next",
    "start": "3297600",
    "end": "3302730"
  },
  {
    "text": "year as well",
    "start": "3302730",
    "end": "3305480"
  }
]