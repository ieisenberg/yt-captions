[
  {
    "start": "0",
    "end": "130000"
  },
  {
    "text": "hello everyone can start the talk on Azure spindles the art of effectively",
    "start": "11080",
    "end": "18170"
  },
  {
    "text": "managing your Azure costs so by now most of us might have a friend or a colleague",
    "start": "18170",
    "end": "23270"
  },
  {
    "text": "that you know they had some Horror Story with Asia where the spine up of Cosmos database and you know month later they",
    "start": "23270",
    "end": "29599"
  },
  {
    "text": "spend 20 grand by accident so today's talking to focus on the cases where this",
    "start": "29599",
    "end": "34850"
  },
  {
    "text": "occurs how to manage that or even prevent it so my name is William Leoben Berg I'm a Solutions Architect",
    "start": "34850",
    "end": "41600"
  },
  {
    "text": "SSW means I go around the country trying to reduce software developer risks for",
    "start": "41600",
    "end": "48050"
  },
  {
    "text": "my clients mentor their teams just working some really cool projects you can find me on Twitter and I've also got",
    "start": "48050",
    "end": "54620"
  },
  {
    "text": "a blog site at as you Jem's and today's code and the presentation I'll put it on my github but before we get into the",
    "start": "54620",
    "end": "62330"
  },
  {
    "text": "talk we've got a treasure hunt happening here at NBC if you scan that QR code you",
    "start": "62330",
    "end": "68869"
  },
  {
    "text": "can get our app and at the end of the talk I'll show you another QR code to give you some cool points and if you're",
    "start": "68869",
    "end": "75229"
  },
  {
    "text": "getting enough points you actually going click the few prizes downstairs right upstairs cool so you all got that some one more",
    "start": "75229",
    "end": "83840"
  },
  {
    "text": "yeah here we go so the agenda is let's start with cosmos DB what it is why you",
    "start": "83840",
    "end": "90950"
  },
  {
    "text": "want to use it and how to use it they won't move on to why cosmos DB actually loves your wallet so much and why you",
    "start": "90950",
    "end": "97460"
  },
  {
    "text": "need spend ops then we'll turn that relationship around and see why what we can do to make our wallets love cosmos",
    "start": "97460",
    "end": "103819"
  },
  {
    "text": "DB it's actually implementing spin Docs and there's some automation ideas and then just a future of spindles so cosmos",
    "start": "103819",
    "end": "112159"
  },
  {
    "text": "DB is pretty cool you know it's a globally distributed database it's fast it's always available and it's so",
    "start": "112159",
    "end": "117439"
  },
  {
    "text": "flexible I can just start writing an app and get out of the door pretty quick but",
    "start": "117439",
    "end": "122600"
  },
  {
    "text": "it's not very cool because I've been burnt a few times just accidentally spent too much money and I don't really",
    "start": "122600",
    "end": "127880"
  },
  {
    "text": "know why now cosmos like I said is a globally",
    "start": "127880",
    "end": "133340"
  },
  {
    "start": "130000",
    "end": "130000"
  },
  {
    "text": "distributed database some people say planet-scale database as horizontally scalable it's a bit different to your",
    "start": "133340",
    "end": "139400"
  },
  {
    "text": "normal sequel server where you can scale out your read nodes and you only have a",
    "start": "139400",
    "end": "145340"
  },
  {
    "text": "single write mode it's a bit hard to do that cosmos is very easy but you also get like multi master right so you're",
    "start": "145340",
    "end": "151370"
  },
  {
    "text": "right operations are as close to your coins as possible that it really is good for performance the throughput is",
    "start": "151370",
    "end": "157280"
  },
  {
    "text": "elastic so you can easily dial it up or dial it down depend on how much you want to spend the microsoft's got some really",
    "start": "157280",
    "end": "163130"
  },
  {
    "text": "comprehensive SLA is for throughput and latency and availability so i think is like a sub ten millisecond latency in",
    "start": "163130",
    "end": "170240"
  },
  {
    "text": "asia and they stand by that and one feature of cosmos DB is multi Morel what",
    "start": "170240",
    "end": "177350"
  },
  {
    "text": "that means is we actually deal with different ways or different types of data in cosmos so the most familiar ones",
    "start": "177350",
    "end": "184070"
  },
  {
    "text": "is the course equal or MongoDB that uses document model so you've basically take",
    "start": "184070",
    "end": "189470"
  },
  {
    "text": "the JSON object slam it into cosmos and read it it's easy the other formats are",
    "start": "189470",
    "end": "195020"
  },
  {
    "text": "cassandra gray blue and table so as a table storage key value you can pack",
    "start": "195020",
    "end": "200210"
  },
  {
    "text": "that with cosmos DB as well get all the benefits of the global global",
    "start": "200210",
    "end": "205670"
  },
  {
    "text": "distribution and high availability so what is a cosmos sequel query look like",
    "start": "205670",
    "end": "212959"
  },
  {
    "text": "well it's very similar to what a real sequel crate looks like but it was a bit of a twist so you can see that but of",
    "start": "212959",
    "end": "220190"
  },
  {
    "text": "Jason notation in there where we were sort of querying a body type in the price of a vehicle and you know the from",
    "start": "220190",
    "end": "226430"
  },
  {
    "text": "the where clauses it's pretty much the same as what we're used to and the data that we get back again in JSON format so",
    "start": "226430",
    "end": "232730"
  },
  {
    "text": "it's very easy to consume this data so my journey was cosmos is you know",
    "start": "232730",
    "end": "239090"
  },
  {
    "start": "236000",
    "end": "236000"
  },
  {
    "text": "usually Microsoft sequel that's my default that's what I use I'm very used to it migrating to quadrants was quite easy",
    "start": "239090",
    "end": "245240"
  },
  {
    "text": "you know there's some tools that you can use with a bulk import tool I can take an existing sequel database and just",
    "start": "245240",
    "end": "251780"
  },
  {
    "text": "copy it to see cosmos DB syntax the new syntax is to learn is a few quotes that",
    "start": "251780",
    "end": "258320"
  },
  {
    "text": "you have to get used to it's a bit different but it's good deployment doc you mentioned earlier it's very easy if",
    "start": "258320",
    "end": "263390"
  },
  {
    "text": "I want to spin up another instance of my database in Germany for instance there's literally just a click away",
    "start": "263390",
    "end": "268990"
  },
  {
    "text": "but again pricing is the one that concerns me and you know I dial it up I know it's going faster but I don't know",
    "start": "268990",
    "end": "275300"
  },
  {
    "text": "why I have to pay so much and what I learned out of this journey is that I don't need database",
    "start": "275300",
    "end": "281120"
  },
  {
    "text": "administrators anymore cosmos is actually so easy I can do it all myself my app itself can actually manage his",
    "start": "281120",
    "end": "287360"
  },
  {
    "text": "own performance and yeah it's always available and cosmos is growing in",
    "start": "287360",
    "end": "293570"
  },
  {
    "text": "popularity everyone wants to use it in fact last year cosmos one of the",
    "start": "293570",
    "end": "300380"
  },
  {
    "text": "technology of the Year award so in the top 50 tech categories in the world",
    "start": "300380",
    "end": "305840"
  },
  {
    "text": "that's a big deal it's a lot of people getting involved using it and liking it so pretty cool now how do we code",
    "start": "305840",
    "end": "313100"
  },
  {
    "text": "because was DB well there's the dotnet SDK version 3 and compared to the",
    "start": "313100",
    "end": "323750"
  },
  {
    "text": "previous version it's a much simpler API and better naming so cosmos used to be",
    "start": "323750",
    "end": "329780"
  },
  {
    "text": "called document DB and the version 2 SDK everything was named document DB even",
    "start": "329780",
    "end": "335030"
  },
  {
    "text": "though as you're already branded it as cosmos DB so a little bit of confusion but now it's better one really cool",
    "start": "335030",
    "end": "341480"
  },
  {
    "text": "thing about the new SDK is middleware extensibility so we're able to intercept",
    "start": "341480",
    "end": "347390"
  },
  {
    "text": "all the requests that go out to cosmos and when it comes back again so we can do some multiplication we can scrape for",
    "start": "347390",
    "end": "353750"
  },
  {
    "text": "sensitive data going in or out they're useful and it's better performant so",
    "start": "353750",
    "end": "360230"
  },
  {
    "text": "they've done a bit of work to reduce the overhead of making the queries and getting our data back from cosmos and",
    "start": "360230",
    "end": "367970"
  },
  {
    "text": "not only for net we can use nodejs Java Python or even just a REST API and build literally any kind of app with",
    "start": "367970",
    "end": "375470"
  },
  {
    "text": "cosmos now to get started with cosmos",
    "start": "375470",
    "end": "381380"
  },
  {
    "text": "there's a few differences like us in between your transactional sequel and the cosmos core SQL and we just need to",
    "start": "381380",
    "end": "388520"
  },
  {
    "text": "know this not actually real relationships in cosmos only rules no application can enforce those rules so",
    "start": "388520",
    "end": "397040"
  },
  {
    "text": "to make it easy there's a cheat sheet that Microsoft provides it shows you all",
    "start": "397040",
    "end": "402260"
  },
  {
    "text": "all the operations and things you can do little queries and how to write them and yeah quite handy this helped me a lot",
    "start": "402260",
    "end": "408950"
  },
  {
    "text": "when I started",
    "start": "408950",
    "end": "411550"
  },
  {
    "start": "410000",
    "end": "410000"
  },
  {
    "text": "right so for those of us who love using ORM frameworks we have options and one",
    "start": "414430",
    "end": "421010"
  },
  {
    "text": "of them is cosmonaut so project on github and it's a pretty nice RM the",
    "start": "421010",
    "end": "426500"
  },
  {
    "text": "users are there from nice fluent syntax it's very easy to write absence that the",
    "start": "426500",
    "end": "434840"
  },
  {
    "text": "other one very popular is a of core so it has a cosmos dv4 provider and if you",
    "start": "434840",
    "end": "442550"
  },
  {
    "text": "want to know how to get started with cosmos DB and EF core you check out my friend tiago's post and in fact he also",
    "start": "442550",
    "end": "449660"
  },
  {
    "text": "doing a talk next door I think about the same thing so yeah check it out pretty",
    "start": "449660",
    "end": "455419"
  },
  {
    "text": "cool now we can get some free testing with cosmos DB we don't actually have to spend any money because they provide us",
    "start": "455419",
    "end": "461960"
  },
  {
    "text": "with an emulator so you can stall it locally or we can run it as a docker image and it mimics a real cosmos DB",
    "start": "461960",
    "end": "469280"
  },
  {
    "text": "instance and we can also use it in Azure develops just locally but we can write",
    "start": "469280",
    "end": "475010"
  },
  {
    "text": "into the cloud and test out code as we build it so he's just a screen of the",
    "start": "475010",
    "end": "482710"
  },
  {
    "text": "emulator running on my local machine and to get it in devops you just have to go",
    "start": "482710",
    "end": "489500"
  },
  {
    "text": "to the marketplace it's free you install it and it's just a task in your build past to write it hmm excuse me cool so",
    "start": "489500",
    "end": "501770"
  },
  {
    "text": "now we know why costomers DB what a cosmos DBS and why we want to use it now",
    "start": "501770",
    "end": "508539"
  },
  {
    "text": "see now we're gonna see how customers actually loves out why is it so expensive and I found this tweet by",
    "start": "508539",
    "end": "515450"
  },
  {
    "text": "Thomas Weiss that if you do the math one cosmos DB requesting it cost zero point",
    "start": "515450",
    "end": "521870"
  },
  {
    "text": "zero zero zero zero to a few more zeros two US dollars if you can do some more",
    "start": "521870",
    "end": "528380"
  },
  {
    "text": "maths I means you have to have 50 million request units to spend one u.s.",
    "start": "528380",
    "end": "534410"
  },
  {
    "text": "cent so it sounds like a lot of operations for a very small cost but",
    "start": "534410",
    "end": "539720"
  },
  {
    "text": "again it doesn't quite line up with these horror stories we keep hearing about cosmos so what is a request unit so it's a",
    "start": "539720",
    "end": "548520"
  },
  {
    "start": "544000",
    "end": "544000"
  },
  {
    "text": "measurement of how much compute went into resolving our cosmos query so the",
    "start": "548520",
    "end": "554040"
  },
  {
    "text": "queries are we write in the Select statement if we have very complicated queries but a CPU power goes into the",
    "start": "554040",
    "end": "559260"
  },
  {
    "text": "resolving that query and then reading the writing data from a physical disk and then communicating that over the",
    "start": "559260",
    "end": "565500"
  },
  {
    "text": "wire and everything that we do in cosmos reading writing updating deleting or",
    "start": "565500",
    "end": "572730"
  },
  {
    "text": "stored procedures they all consume how use real Chris units in our throughput",
    "start": "572730",
    "end": "578160"
  },
  {
    "text": "is measured in I use per second so it's a matter of work that we do per second and what do we actually pay for so these",
    "start": "578160",
    "end": "585090"
  },
  {
    "text": "three things is the throughput that we would reserve it's always available whether we actually not use it or not",
    "start": "585090",
    "end": "591440"
  },
  {
    "text": "the amount of storage we have in our database the size of our data and then how much we're sending across the wire",
    "start": "591440",
    "end": "597420"
  },
  {
    "text": "so those are three main things that we pay for now just do a little bit more Matz we don't get the minimum I use that",
    "start": "597420",
    "end": "605370"
  },
  {
    "text": "were allowed to provision for a container mm-hmm and at current sort of",
    "start": "605370",
    "end": "611670"
  },
  {
    "text": "storage costs and throughput costs we're going to pay about thirty seven dollars a month and yeah so that's 400 IU's",
    "start": "611670",
    "end": "621360"
  },
  {
    "text": "minimum but how much do I actually need so there's a capacity planner website that we can use and you can sort of",
    "start": "621360",
    "end": "628500"
  },
  {
    "text": "tweak a few numbers there to say how much data you want to use and so the",
    "start": "628500",
    "end": "635070"
  },
  {
    "text": "number of read and write operations that we'll be doing per region works and we",
    "start": "635070",
    "end": "648570"
  },
  {
    "text": "get so this works out to be the same as our manual calculation before us about",
    "start": "648570",
    "end": "653640"
  },
  {
    "text": "37 dollars a month at minimum requirements so this start designing my",
    "start": "653640",
    "end": "659970"
  },
  {
    "text": "little web application I'm gonna write a new blog engine you know I'm a sequel guy so I think you know I need a table",
    "start": "659970",
    "end": "665310"
  },
  {
    "text": "for authors the table for blogs and the posts so if I think about the 400 IU's",
    "start": "665310",
    "end": "671700"
  },
  {
    "text": "per container at 37 dollars a month I'm gonna pay thirty seven dollars for author's blog post",
    "start": "671700",
    "end": "677820"
  },
  {
    "text": "they're also what is a very expensive application it's a very simple data",
    "start": "677820",
    "end": "683010"
  },
  {
    "text": "model but it is super expensive so we're looking our cosmos DB and my head spinning and all I can see is this it's",
    "start": "683010",
    "end": "690690"
  },
  {
    "text": "very expensive you change the logo I didn't bet you one better actually changed the name as well",
    "start": "690690",
    "end": "695730"
  },
  {
    "text": "because it's called cost poster DB I've never worked with something this expensive this is really where I want to",
    "start": "695730",
    "end": "702510"
  },
  {
    "text": "introduce spin Doc's as a developer yeah the onus is I'm asked to really",
    "start": "702510",
    "end": "708240"
  },
  {
    "text": "understand the tech that we use and you know not to make mistakes because we",
    "start": "708240",
    "end": "713339"
  },
  {
    "text": "have a direct impact in Turku the cost of each stage of the DevOps lifecycle so",
    "start": "713339",
    "end": "719190"
  },
  {
    "text": "if you have bad plans or bad designs for our applications or even just write bad code in flaky tests you know if it fails",
    "start": "719190",
    "end": "726660"
  },
  {
    "text": "on a Wednesday and only Wednesday we can never find out why there's a whole day of productivity wasted you know that's",
    "start": "726660",
    "end": "733500"
  },
  {
    "text": "the cost that we want to avoid as well as new applications not over consuming",
    "start": "733500",
    "end": "739320"
  },
  {
    "text": "resources so it's been ups we want to be",
    "start": "739320",
    "end": "747089"
  },
  {
    "text": "able to monitor our spend it also want to be able to change how much we spend so if last month sales were good",
    "start": "747089",
    "end": "753000"
  },
  {
    "text": "maybe this month we can spend a little bit more makes it a perform a bit better or if they weren't so good spend a bit",
    "start": "753000",
    "end": "759329"
  },
  {
    "text": "less but hopefully not affect the customer experience just to recover some of those costs but we also won't be able",
    "start": "759329",
    "end": "765839"
  },
  {
    "text": "to serve if we make a code change today I don't know how much is that going to cost me and I'll project that forward",
    "start": "765839",
    "end": "771779"
  },
  {
    "text": "for another month so I can actually come up with a budget now be aware of what's happening so now what we want to do is",
    "start": "771779",
    "end": "781589"
  },
  {
    "text": "to see what we can do by implementing spend ops to make our wallets love cosmos DB and one thing that we can do",
    "start": "781589",
    "end": "789420"
  },
  {
    "text": "the example from before and three containers for each entity type but what",
    "start": "789420",
    "end": "796140"
  },
  {
    "text": "we can do is to use colocation so those three entity types can all live in a single container and what be able to",
    "start": "796140",
    "end": "803010"
  },
  {
    "text": "have to do is just give everything the same ID and added this discriminative property in a real code this is what it",
    "start": "803010",
    "end": "810959"
  },
  {
    "text": "might look like so we were using the.net full full name for",
    "start": "810959",
    "end": "817110"
  },
  {
    "text": "that type as the item type property and our other entities in the database",
    "start": "817110",
    "end": "822929"
  },
  {
    "text": "inherit from this base entity and we have to then take that into account when",
    "start": "822929",
    "end": "828869"
  },
  {
    "start": "825000",
    "end": "825000"
  },
  {
    "text": "we write our queries now because I'm going to put all these entities in the",
    "start": "828869",
    "end": "834269"
  },
  {
    "text": "same container there are really different types of entities and because it's a flexible schema not no schema or",
    "start": "834269",
    "end": "842730"
  },
  {
    "text": "no sequel there's a very flexible schema we have to taken to account the entity type in white so this is a generic",
    "start": "842730",
    "end": "850199"
  },
  {
    "text": "method so if I want or Thurs the type of tea full name would result to authors so",
    "start": "850199",
    "end": "857309"
  },
  {
    "text": "never filter out everything else that's not an author so this is what it will",
    "start": "857309",
    "end": "862949"
  },
  {
    "text": "look like once you've added a few items to our database that for instance this item type is a blog the next one is a",
    "start": "862949",
    "end": "869699"
  },
  {
    "text": "user the last one is a post so cool so",
    "start": "869699",
    "end": "874739"
  },
  {
    "text": "now we reduce that cost of paying you know thirty seven dollars three times to only once but since a while ago",
    "start": "874739",
    "end": "883679"
  },
  {
    "text": "what else we can also do is to provision our throughput for the entire database not just a single container so that",
    "start": "883679",
    "end": "891240"
  },
  {
    "text": "previously that wasn't possible but now it is now fortunately if you have an",
    "start": "891240",
    "end": "896699"
  },
  {
    "text": "existing database you can't go back and turn that feature on you have to start again so either you migrate your database over",
    "start": "896699",
    "end": "903449"
  },
  {
    "text": "or you just delete it and start again it's just a checkbox like so when you go and provision your database make sure",
    "start": "903449",
    "end": "909959"
  },
  {
    "text": "you tick that box will save you a lot of money so and again you can just you know tune your performance requirements there",
    "start": "909959",
    "end": "916529"
  },
  {
    "text": "it's very easy now the other thing to take into account for balancing their",
    "start": "916529",
    "end": "922740"
  },
  {
    "text": "cost versus performance is looking at how we optimize our queries they're riding good queries and partition design",
    "start": "922740",
    "end": "930679"
  },
  {
    "text": "so I'll start with query or query performance and a couple things that",
    "start": "930679",
    "end": "936929"
  },
  {
    "start": "933000",
    "end": "933000"
  },
  {
    "text": "affect them so yeah so fairly simple the number of",
    "start": "936929",
    "end": "945689"
  },
  {
    "text": "items and the size of the items as we get back from the database is gonna affect the performance of our query so",
    "start": "945689",
    "end": "951959"
  },
  {
    "text": "if you select staff from every container in the database of course you only need a little bit of that you're gonna waste",
    "start": "951959",
    "end": "957869"
  },
  {
    "text": "a lot of compute or network a lot of disk i/o so the key is to focus down",
    "start": "957869",
    "end": "964019"
  },
  {
    "text": "just what you need and also not write overly complicated queries no it's a very simple statement it's not always possible but do your best to write",
    "start": "964019",
    "end": "970769"
  },
  {
    "text": "simple queries they compile quicker execute cook quicker and when you make a",
    "start": "970769",
    "end": "977309"
  },
  {
    "text": "query to the database you always get back the query metrics and Kosmos will",
    "start": "977309",
    "end": "982649"
  },
  {
    "text": "tell you how well that query ran against your index so if your index utilization",
    "start": "982649",
    "end": "988529"
  },
  {
    "text": "is 100% great it's 50% or lower you probably want to go and look at your",
    "start": "988529",
    "end": "994439"
  },
  {
    "text": "query or the partition design you'll get to next but also you have the right",
    "start": "994439",
    "end": "1000259"
  },
  {
    "text": "information in your application you know the partition key and the ID to get an item or an object from the database it's",
    "start": "1000259",
    "end": "1007129"
  },
  {
    "text": "super easy and it's a super cheap so it'll cost you one request unit for every kilobyte of data that comes back",
    "start": "1007129",
    "end": "1014679"
  },
  {
    "text": "and just as an example it's very easy a little call to cosmos and yeah we make",
    "start": "1014679",
    "end": "1020959"
  },
  {
    "text": "sure we provide partition key and the ID now just to be aware of updates and",
    "start": "1020959",
    "end": "1028069"
  },
  {
    "text": "deletes are very expensive compared to creating an item so to update an item",
    "start": "1028069",
    "end": "1033500"
  },
  {
    "text": "there's a lot of comparisons you know which fields or update you know and checking so a lot goes into it and same",
    "start": "1033500",
    "end": "1040159"
  },
  {
    "text": "with delete but you can actually make deletes a little bit cheaper cut making",
    "start": "1040159",
    "end": "1045889"
  },
  {
    "text": "feel free but you can use a feature called softer lick so I just like to discriminate a property that we used",
    "start": "1045889",
    "end": "1051230"
  },
  {
    "text": "earlier we can have an ease deleted feel and just mark that as true and include",
    "start": "1051230",
    "end": "1056360"
  },
  {
    "text": "that in our query to filter out the things that we think are deleted then",
    "start": "1056360",
    "end": "1061490"
  },
  {
    "text": "there's another trick you can use so you can set a time to live property on each item in the database so cosmas will",
    "start": "1061490",
    "end": "1068090"
  },
  {
    "text": "actually expire that data for you free so you can use both of these or combination these",
    "start": "1068090",
    "end": "1074390"
  },
  {
    "text": "make the leader updates will actually just delete the cheaper all right so now",
    "start": "1074390",
    "end": "1081320"
  },
  {
    "text": "we need look at partition design so there's two flavors of partitions physical and logical the physical",
    "start": "1081320",
    "end": "1089780"
  },
  {
    "text": "partitions is really how the cosmos engine decides which the amount of power",
    "start": "1089780",
    "end": "1096470"
  },
  {
    "text": "to put behind a logical partition so that's the server the compact the compute power of their server and",
    "start": "1096470",
    "end": "1103600"
  },
  {
    "text": "networking capabilities so I'm going to look at the structure of a cosmos database there's one or more databases",
    "start": "1103600",
    "end": "1111050"
  },
  {
    "text": "in how to count with one or more containers in each container them can be",
    "start": "1111050",
    "end": "1116600"
  },
  {
    "text": "back by the number of physical partitions so when we dial it up now we want more performance we'll get more",
    "start": "1116600",
    "end": "1122570"
  },
  {
    "text": "service backing this container and then the logical partitions this is where the",
    "start": "1122570",
    "end": "1128480"
  },
  {
    "text": "cost engine decides which bits of data live on which physical partition so they",
    "start": "1128480",
    "end": "1134240"
  },
  {
    "text": "use a lot of cool internal metrics to figure this out we don't have to do anything apart from choosing a good",
    "start": "1134240",
    "end": "1140390"
  },
  {
    "text": "partition key and then after that this is where Jason documents live all right",
    "start": "1140390",
    "end": "1149780"
  },
  {
    "text": "so as I said in one container you can have multiple or many logical partitions",
    "start": "1149780",
    "end": "1155000"
  },
  {
    "text": "the logical partitions are backed by the physical ones and this is really what enables that horizontal scalability",
    "start": "1155000",
    "end": "1160940"
  },
  {
    "text": "feature so if we need more performance",
    "start": "1160940",
    "end": "1166300"
  },
  {
    "text": "Kosmos can definitely provide that pretty easily and a good partition key is what distributes our throughput",
    "start": "1166300",
    "end": "1173210"
  },
  {
    "text": "evenly so funny thing at this example let's say we're writing a sort of car",
    "start": "1173210",
    "end": "1179660"
  },
  {
    "text": "sales type website and if we choose body type as application key it might be a bad choice because if you look at the",
    "start": "1179660",
    "end": "1186890"
  },
  {
    "text": "balance of data there's a lot more sedans than every other body type now",
    "start": "1186890",
    "end": "1192440"
  },
  {
    "text": "when our app gets a bit busy but a load goes onto that this sedan position can't",
    "start": "1192440",
    "end": "1200480"
  },
  {
    "text": "be split up and be back by more physical machines because there's no way for the data to be split up and shared across",
    "start": "1200480",
    "end": "1206720"
  },
  {
    "text": "more partitions so we end up with a problem called height partitioning so eventually the",
    "start": "1206720",
    "end": "1212140"
  },
  {
    "text": "poor server that's backing this run out of puff will have time outs and some some pubs just no response so if we",
    "start": "1212140",
    "end": "1220390"
  },
  {
    "text": "didn't look at a good choice or a better choice or partition key let's say we choose brand you can see now that we've",
    "start": "1220390",
    "end": "1227710"
  },
  {
    "text": "got more partitions the diners are spread out more evenly and we'll have more performance or just a better",
    "start": "1227710",
    "end": "1234250"
  },
  {
    "text": "end-user experience so the key for",
    "start": "1234250",
    "end": "1240360"
  },
  {
    "start": "1236000",
    "end": "1236000"
  },
  {
    "text": "choosing a good partition key is to choose something that's got high cardinality so a wide range of values",
    "start": "1240360",
    "end": "1248220"
  },
  {
    "text": "and good way to find this is if you go and design your app and you write your redesign your queries up front you can",
    "start": "1248580",
    "end": "1255909"
  },
  {
    "text": "pick one that's quite frequently filtered on so we're always filtering on brand that's probably gonna be a good",
    "start": "1255909",
    "end": "1261580"
  },
  {
    "text": "candidate for a partition key but",
    "start": "1261580",
    "end": "1266950"
  },
  {
    "text": "sometimes not be enough the same with how we're using brain before instead of",
    "start": "1266950",
    "end": "1272649"
  },
  {
    "text": "body type if there for instance becomes you know too many Volvo is being sold yeah that partition might also suffer",
    "start": "1272649",
    "end": "1279429"
  },
  {
    "text": "becoming a hot partition so we can create synthetic partition keys and by",
    "start": "1279429",
    "end": "1285130"
  },
  {
    "text": "combining two fields together so this would give us again the ability for cosmos to split up their partitions and",
    "start": "1285130",
    "end": "1291820"
  },
  {
    "text": "deliver more performance cool so now what we can look at is how to automate",
    "start": "1291820",
    "end": "1299649"
  },
  {
    "text": "house pen docks so we've worked out how cosmos works and how to sort of make it",
    "start": "1299649",
    "end": "1304899"
  },
  {
    "text": "sort of be efficient at not you're recording too many resources and for us to then have adequate performance so by",
    "start": "1304899",
    "end": "1313330"
  },
  {
    "text": "now hopefully we've all got some automated CI CD pipelines we can take advantage of that yeah we're running",
    "start": "1313330",
    "end": "1320500"
  },
  {
    "text": "some automated tests and this is where we can focus a lot of our efforts so we can instrument our tests and our",
    "start": "1320500",
    "end": "1327399"
  },
  {
    "text": "pipelines to click them some spend up to information and then we can make some better decisions",
    "start": "1327399",
    "end": "1332789"
  },
  {
    "text": "so our regular tests continue to spend tests the only sort of challenge we have",
    "start": "1332789",
    "end": "1339669"
  },
  {
    "text": "is nothing has built in spend lakhs but something that we have to write ourselves and traditionally a test is",
    "start": "1339669",
    "end": "1346330"
  },
  {
    "text": "just considering as a pass or a fail and the amount of code that was covered it",
    "start": "1346330",
    "end": "1351940"
  },
  {
    "text": "doesn't take into account how expensive this code was to run in the real life and it's also in how basically yeah",
    "start": "1351940",
    "end": "1359800"
  },
  {
    "text": "bring your own spin ups you have to build it all yourself so the benefits of",
    "start": "1359800",
    "end": "1366430"
  },
  {
    "text": "having all this automation is that if we click the right information we can protect the information on to our",
    "start": "1366430",
    "end": "1373240"
  },
  {
    "text": "production usage and this will let us prepare a budget and avoid the dreaded bill shock so for now how much things",
    "start": "1373240",
    "end": "1379480"
  },
  {
    "text": "are gonna cost yeah we won't have any surprises we'll make some intelligent decisions and this will allow us again",
    "start": "1379480",
    "end": "1385240"
  },
  {
    "text": "once we know how expensive the feature is do not under provision and get throttled by the hot partitioning",
    "start": "1385240",
    "end": "1390660"
  },
  {
    "text": "problem or over partitioning sorry over-provisioning so which is wasting",
    "start": "1390660",
    "end": "1396940"
  },
  {
    "text": "money for no reason we just dial it up make it go faster but we're not using all that performance so we want to stay",
    "start": "1396940",
    "end": "1403330"
  },
  {
    "text": "in this sort of Goldilocks zone now the solution for spend ops is with enough",
    "start": "1403330",
    "end": "1409270"
  },
  {
    "text": "instrumentation we can collect the right amount of data the right types of data we can persist it anyway as long as we",
    "start": "1409270",
    "end": "1416320"
  },
  {
    "text": "can query it and then feed back that information into our DevOps life cycle now cosmos makes this very easy at least",
    "start": "1416320",
    "end": "1424360"
  },
  {
    "start": "1421000",
    "end": "1421000"
  },
  {
    "text": "the Cosmo SDK makes it very easy each response back from cosmos will give you back a request charge and I can mention",
    "start": "1424360",
    "end": "1431410"
  },
  {
    "text": "earlier the query metrics so we can start collecting this information and start building things into our",
    "start": "1431410",
    "end": "1436840"
  },
  {
    "text": "application to tag our requests to cosmos so it could be very easy it was just an operation ID or you know some",
    "start": "1436840",
    "end": "1444190"
  },
  {
    "start": "1440000",
    "end": "1440000"
  },
  {
    "text": "sort of feature name or we can make use",
    "start": "1444190",
    "end": "1453340"
  },
  {
    "text": "of the request handler that middleware extensibility from the cosmos database so we can intercept every request we can",
    "start": "1453340",
    "end": "1460600"
  },
  {
    "text": "sort of know which collection and the entity that it's dealing with and click the request charges from there but my",
    "start": "1460600",
    "end": "1468970"
  },
  {
    "text": "favorite is to just use the CRS pattern and sort of aggregate all the requests",
    "start": "1468970",
    "end": "1474130"
  },
  {
    "text": "for a particular command or query then even higher than that this is an overall feature so multiple commands and",
    "start": "1474130",
    "end": "1481580"
  },
  {
    "text": "queries that happen in that feature well aggregate together I don't know how much that feature would cost me as a",
    "start": "1481580",
    "end": "1486799"
  },
  {
    "text": "whole so yeah you can come up with different different strategies yourself but I like to use these these for now",
    "start": "1486799",
    "end": "1495350"
  },
  {
    "text": "just to describe the whole process you know we start here but the visual studio we write some code we want to push our",
    "start": "1495350",
    "end": "1502760"
  },
  {
    "text": "changes to as a mega pull request and it start building the code and that will",
    "start": "1502760",
    "end": "1509150"
  },
  {
    "text": "start running tests so we can use a real or emulated instance of Cosmos DB in",
    "start": "1509150",
    "end": "1516049"
  },
  {
    "text": "devops that around the requests and get back the responses and click all the",
    "start": "1516049",
    "end": "1523040"
  },
  {
    "text": "different metrics that were after then we can persist that you put back into cosmos if you wanted to or I need a",
    "start": "1523040",
    "end": "1528710"
  },
  {
    "text": "table storage sequel happy insight got a few choices and then what we can do is",
    "start": "1528710",
    "end": "1536630"
  },
  {
    "text": "to visualize that it's always nice to show dashboard showing charts of how things have been tracking and you know",
    "start": "1536630",
    "end": "1543559"
  },
  {
    "text": "from that we can make some cool decisions when it comes to releasing our software we can use a release gate and",
    "start": "1543559",
    "end": "1551500"
  },
  {
    "text": "because we have a build a number and you know bits of information we can query the consumption reports and make a",
    "start": "1551500",
    "end": "1558169"
  },
  {
    "text": "decision so the challenge that Liam made did it save us money cool and we can",
    "start": "1558169",
    "end": "1563780"
  },
  {
    "text": "release the software no problem or another change that Jacob made it's a",
    "start": "1563780",
    "end": "1569270"
  },
  {
    "text": "bit expensive so we don't let this go through so if we set some sort of logic you know release gate we don't allow our",
    "start": "1569270",
    "end": "1576169"
  },
  {
    "text": "cost increases more than 10% yeah we'll turn that into a spin bug then",
    "start": "1576169",
    "end": "1581360"
  },
  {
    "text": "what we do we put that back into the backlog make a plan change the code and",
    "start": "1581360",
    "end": "1586400"
  },
  {
    "text": "the cycle continues so that's cool that's part of the whole David part of",
    "start": "1586400",
    "end": "1591620"
  },
  {
    "text": "DevOps okay leave that for you take a photo all",
    "start": "1591620",
    "end": "1597620"
  },
  {
    "text": "right so now there's a quick demo how",
    "start": "1597620",
    "end": "1602900"
  },
  {
    "text": "some of that works let's go back here alright can you guys",
    "start": "1602900",
    "end": "1613230"
  },
  {
    "text": "see that all right so what I have here is just a very simple query in just a",
    "start": "1613230",
    "end": "1621720"
  },
  {
    "text": "demo app and you can see here's some raw",
    "start": "1621720",
    "end": "1626970"
  },
  {
    "text": "seagull mm queries and I've just got a bit of instrumentation around my Cosmos",
    "start": "1626970",
    "end": "1633050"
  },
  {
    "text": "client that allows me to add a bit of extra context so not only do I have the",
    "start": "1633050",
    "end": "1639390"
  },
  {
    "text": "feature or the query name here get all vehicles by color but also know which",
    "start": "1639390",
    "end": "1644940"
  },
  {
    "text": "query inside of this well which cosmos",
    "start": "1644940",
    "end": "1651570"
  },
  {
    "text": "query inside of the CRS query is performing which operation so we don't",
    "start": "1651570",
    "end": "1657300"
  },
  {
    "text": "run this I'll show what happens so I'm",
    "start": "1657300",
    "end": "1667230"
  },
  {
    "text": "just running some my normal unit tests and as they run let's refresh that okay",
    "start": "1667230",
    "end": "1683420"
  },
  {
    "text": "let's do that again",
    "start": "1683420",
    "end": "1686750"
  },
  {
    "text": "okay so normal test run are there all the tests I have available they've ran",
    "start": "1688460",
    "end": "1695160"
  },
  {
    "text": "and turn that on all right",
    "start": "1695160",
    "end": "1700350"
  },
  {
    "text": "so what we see here is the outputs from my test I haven't shown you how I've instrumented that yet but this is the",
    "start": "1700350",
    "end": "1705930"
  },
  {
    "text": "result of each test being ran so I've got a whole bunch of fields of information here one of them is the",
    "start": "1705930",
    "end": "1711690"
  },
  {
    "text": "charge I know which feature of my application this test was related to yeah you can include other information",
    "start": "1711690",
    "end": "1718200"
  },
  {
    "text": "like the latency etc and some information about which test this",
    "start": "1718200",
    "end": "1724170"
  },
  {
    "text": "request originated from so we can actually assist all this data for instance into table storage or any other",
    "start": "1724170",
    "end": "1732240"
  },
  {
    "text": "sort of mechanism you want and",
    "start": "1732240",
    "end": "1735620"
  },
  {
    "text": "once you've run this and we persisted the data we've created dashboard we can end up with something like this so",
    "start": "1737350",
    "end": "1744960"
  },
  {
    "text": "aggregated all the charges against a feature or an operation and as you can see that one feature suddenly got a bit",
    "start": "1744960",
    "end": "1752200"
  },
  {
    "text": "more expensive and then someone went in to fix it so restore the the cost there but here's another green one here that",
    "start": "1752200",
    "end": "1758490"
  },
  {
    "text": "skyrocketed so this should raise alarm bells now there's a very simple example",
    "start": "1758490",
    "end": "1764350"
  },
  {
    "text": "but I use power bi to make this up from the simple data set but you know for a",
    "start": "1764350",
    "end": "1769450"
  },
  {
    "text": "real production application be a lot more lines a lot more features but it will tell you definitely a good story",
    "start": "1769450",
    "end": "1776610"
  },
  {
    "start": "1776000",
    "end": "1776000"
  },
  {
    "text": "now for production the production side of things there are a few ideas we can",
    "start": "1777090",
    "end": "1783520"
  },
  {
    "text": "track all are you consumption with the same bits of code as have instrumentation for our tests and put",
    "start": "1783520",
    "end": "1790960"
  },
  {
    "text": "that into abeyance fights for instance it's got a very large query engine so whenever we need information we can pull it down and just chart that and put that",
    "start": "1790960",
    "end": "1798460"
  },
  {
    "text": "in our dev ops for instance so we always got a view in production what's happening and we can go a little bit",
    "start": "1798460",
    "end": "1805000"
  },
  {
    "text": "further once you have all this information of how much consumption we're using and when it's we're using it you can use some machine learning to may",
    "start": "1805000",
    "end": "1812170"
  },
  {
    "text": "be predict our demand of what's coming up you can order scale our cosmos DB instance to all stay in that Goldilocks",
    "start": "1812170",
    "end": "1819130"
  },
  {
    "text": "zone of not over provisioning or under provisioning so this brings me to the",
    "start": "1819130",
    "end": "1826660"
  },
  {
    "text": "future of spin docks soon I think spend ups would be built into all our",
    "start": "1826660",
    "end": "1832990"
  },
  {
    "text": "dev tools and yeah it's super useful and we weren't having more surprises because",
    "start": "1832990",
    "end": "1838810"
  },
  {
    "text": "we're going to be directly in control of our spent and we'll be able to spend our",
    "start": "1838810",
    "end": "1844930"
  },
  {
    "text": "money far more effectively and also a lot more consumption based services are",
    "start": "1844930",
    "end": "1850270"
  },
  {
    "text": "coming you can already apply this to not just cosmos but I as your functions ml",
    "start": "1850270",
    "end": "1856420"
  },
  {
    "text": "Ned yeah few more services and definitely take control of how much you spin there but also I think spin tests",
    "start": "1856420",
    "end": "1864850"
  },
  {
    "text": "will become as part of our definition of done so we can't release any software until we've tested",
    "start": "1864850",
    "end": "1871030"
  },
  {
    "text": "how much it's going to cost and eventually I think winner was something as spin-doctor as a service",
    "start": "1871030",
    "end": "1877210"
  },
  {
    "text": "we've got DevOps as a service why not spend UPS thank you very much all right",
    "start": "1877210",
    "end": "1887850"
  },
  {
    "text": "as promised here's the QR code for today's talk I should score you a few",
    "start": "1887850",
    "end": "1894490"
  },
  {
    "text": "points and while you guys take a photo that any questions so in production yes",
    "start": "1894490",
    "end": "1912300"
  },
  {
    "text": "so the first version of this running in production was with a pin sites since I",
    "start": "1917700",
    "end": "1923350"
  },
  {
    "text": "haven't moved it to any anything else yet but certainly possible because you get that same query engine to pull the",
    "start": "1923350",
    "end": "1929230"
  },
  {
    "text": "data back yeah yeah yes",
    "start": "1929230",
    "end": "1946570"
  },
  {
    "text": "so there's yeah cheers there is a little bit of a chicken and egg problem you",
    "start": "1946570",
    "end": "1952180"
  },
  {
    "text": "know when you build your app the first time you don't have real production information so there's not much to",
    "start": "1952180",
    "end": "1958150"
  },
  {
    "text": "predict ulis so you have to be a little bit pragmatic and when you start you know not try to over-provision or",
    "start": "1958150",
    "end": "1963610"
  },
  {
    "text": "anything but I think with a lot of these tools when you have them it'll make that first part of getting app into",
    "start": "1963610",
    "end": "1970030"
  },
  {
    "text": "production a lot easier yeah Steve oh oh yeah I hadn't known that so",
    "start": "1970030",
    "end": "1982110"
  },
  {
    "text": "few of my friends so for instance let's",
    "start": "1982110",
    "end": "1988450"
  },
  {
    "text": "say you've got a sea of core you've got a sequel application it's very easy to",
    "start": "1988450",
    "end": "1994540"
  },
  {
    "text": "swap over to use cosmos now what happens is Kosovar try and create a lot of",
    "start": "1994540",
    "end": "1999670"
  },
  {
    "text": "containers like it would tables now if you have a lot of data into these you can create a",
    "start": "1999670",
    "end": "2004890"
  },
  {
    "text": "a lot of containers and like I said earlier 37 dollars a month each",
    "start": "2004890",
    "end": "2010110"
  },
  {
    "text": "so you didn't realize this very quickly you just rack up a huge bill then that's happened a few times I've known a few of",
    "start": "2010110",
    "end": "2016800"
  },
  {
    "text": "my friends they had that issue and myself I've started playing with cosmos well as your credits disappear very",
    "start": "2016800",
    "end": "2023070"
  },
  {
    "text": "quickly but so far for a customer after doing all of this and we've never had an",
    "start": "2023070",
    "end": "2028920"
  },
  {
    "text": "issue it's saved my life and it definitely kind happy mmm yes sir in the",
    "start": "2028920",
    "end": "2043430"
  },
  {
    "text": "sort of this pipeline here you can run",
    "start": "2043430",
    "end": "2049500"
  },
  {
    "text": "either so like I showed earlier in the in the talk you can spin up the emulator",
    "start": "2049500",
    "end": "2055200"
  },
  {
    "text": "or you even use a real one there is a little bit of difference definitely the performance is different they're reelin",
    "start": "2055200",
    "end": "2062550"
  },
  {
    "text": "is faster but the emulator one gives you back pretty much the same request unit charge so the metrics are the same it's",
    "start": "2062550",
    "end": "2069510"
  },
  {
    "text": "just that yeah it feels different yeah anyone else definitely yes so I am",
    "start": "2069510",
    "end": "2082500"
  },
  {
    "text": "my blog is ready to go just need to make a few tweaks since the Kosmos sdk we're GA so the",
    "start": "2082500",
    "end": "2091350"
  },
  {
    "text": "first version was built with the preview here's the occasion so just got a few minor tweaks to take care of it is working just about to clean it up and",
    "start": "2091350",
    "end": "2097740"
  },
  {
    "text": "I'll put it on github thank you",
    "start": "2097740",
    "end": "2103640"
  },
  {
    "text": "[Applause]",
    "start": "2103640",
    "end": "2108460"
  }
]