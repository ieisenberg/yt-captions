[
  {
    "text": "very nice to see you so this talk is going to be about type utilities and advanced type utilities you could also",
    "start": "9300",
    "end": "15299"
  },
  {
    "text": "think of it as a talk on Advanced typescript if you want to know more about me you could pretty much Google my name I've known a lot of things like",
    "start": "15299",
    "end": "21420"
  },
  {
    "text": "books and a lot of platforms unless the platforms compete on Google where you will find me",
    "start": "21420",
    "end": "26699"
  },
  {
    "text": "but the one that I'm mostly working on nowadays is a YouTube channel so that's the logo for that that's why I put it up there",
    "start": "26699",
    "end": "32419"
  },
  {
    "text": "this so my objective with this talk is if you've actually used typescript at",
    "start": "32420",
    "end": "37500"
  },
  {
    "text": "any point in your life which will be after 2012 because that's when it came out uh if there's any knowledge gaps",
    "start": "37500",
    "end": "44760"
  },
  {
    "text": "when you see some Advanced typescript that people have started to use in the code bases this should fill up those gaps so you should be able to understand",
    "start": "44760",
    "end": "51260"
  },
  {
    "text": "the weird things that are happening with typescript nowadays raise your hand if you've done JavaScript development",
    "start": "51260",
    "end": "58980"
  },
  {
    "text": "ah perfect this is this talk is for you raise your hand if you've done typescript development",
    "start": "58980",
    "end": "64140"
  },
  {
    "text": "you have found the right room um so it's going to be a lot of demos",
    "start": "64140",
    "end": "69960"
  },
  {
    "text": "and with the demos I want people to ask questions whenever you have one so there will be someone who will bring the mic",
    "start": "69960",
    "end": "75000"
  },
  {
    "text": "over to you whenever you have a question raise your hand I will open up for like this demo is done do you want a question",
    "start": "75000",
    "end": "80939"
  },
  {
    "text": "on this particular thing does something not make sense to find the gaps that you might have and are really based on the",
    "start": "80939",
    "end": "86520"
  },
  {
    "text": "audience that we have I really want everyone to take as much from this talk as possible this is the last slide it is",
    "start": "86520",
    "end": "94640"
  },
  {
    "text": "that was a bad joke okay so let's talk about the very Basics edit score",
    "start": "94640",
    "end": "103079"
  },
  {
    "text": "we have type annotations this code that you are seeing right now and I'll bump it up",
    "start": "103079",
    "end": "109020"
  },
  {
    "text": "is pure JavaScript except for these things there are type annotations",
    "start": "109020",
    "end": "115380"
  },
  {
    "text": "this is what typescript provides and of course the objective is that it ensures that X will always be a number if you",
    "start": "115380",
    "end": "120960"
  },
  {
    "text": "don't have it as a number it's going to give a compile time error ah the first concept that I want to talk",
    "start": "120960",
    "end": "126540"
  },
  {
    "text": "about with typescript is type analysis so you can take any type annotation that you have and actually can be even over",
    "start": "126540",
    "end": "132300"
  },
  {
    "text": "here and press command dot this is vs code that I'm using and this gives you the option to extract this into a type",
    "start": "132300",
    "end": "137520"
  },
  {
    "text": "Alias so for example for this type that I was using for this origin that has X and Y I could give it the name point",
    "start": "137520",
    "end": "144660"
  },
  {
    "text": "and now we have a type point that can be reused for multiple like",
    "start": "144660",
    "end": "151680"
  },
  {
    "text": "points essentially and and you can do that with any type that you are using in a type annotation so for example here we",
    "start": "151680",
    "end": "157620"
  },
  {
    "text": "have type annotation for a number primitive which like you wouldn't want to type a",
    "start": "157620",
    "end": "164040"
  },
  {
    "text": "list for this but type aliases are truly that powerful that you can give it move",
    "start": "164040",
    "end": "169379"
  },
  {
    "text": "it into a name and then instead of using numbers in your code you could say num whenever you want to uh please don't do",
    "start": "169379",
    "end": "175980"
  },
  {
    "text": "this please use number but that I wanted to demonstrate the power of type laces",
    "start": "175980",
    "end": "182040"
  },
  {
    "text": "before we look at more and more advanced type Concepts typescript Concepts yes",
    "start": "182040",
    "end": "188120"
  },
  {
    "text": "so the question is how is an alias difference from an interface I have there are a number of differences but",
    "start": "188120",
    "end": "194099"
  },
  {
    "text": "the key one for me is that you cannot use advanced concepts with interfaces that you can with aliases as an example",
    "start": "194099",
    "end": "199860"
  },
  {
    "text": "if you want to say that this thing is going to be a number or a string",
    "start": "199860",
    "end": "205379"
  },
  {
    "text": "you cannot do this is this is called a union type and you cannot do this with the an interface",
    "start": "205379",
    "end": "211440"
  },
  {
    "text": "so a lot of the type function that you will see that I will code as well as you will find within the standard typescript",
    "start": "211440",
    "end": "216599"
  },
  {
    "text": "type definitions would be using type aliases another thing that I want to point out is that I'm going to be using GitHub",
    "start": "216599",
    "end": "223920"
  },
  {
    "text": "copilot so sometimes it might be good sometimes it might be bad but that's a journey that you're going to be on with",
    "start": "223920",
    "end": "229560"
  },
  {
    "text": "me for this talk it's also going to demonstrate that even if you are not an expert in typescript",
    "start": "229560",
    "end": "236959"
  },
  {
    "text": "it sort of helps you write a lot of the complicated code that you would need to write if you wanted to go really really",
    "start": "236959",
    "end": "243180"
  },
  {
    "text": "deep into typescript like what's the Syntax for a map type you could write a comment",
    "start": "243180",
    "end": "248340"
  },
  {
    "text": "create a math type bad comment extremely there for me and",
    "start": "248340",
    "end": "255060"
  },
  {
    "text": "it's doing something clearly and it's not a map type but",
    "start": "255060",
    "end": "260299"
  },
  {
    "text": "hopefully these comments will get better and we'll get better suggestions for future things now the next thing that I",
    "start": "260299",
    "end": "266580"
  },
  {
    "text": "want to talk about is genetics if you've done any form of type programming other",
    "start": "266580",
    "end": "271800"
  },
  {
    "text": "than perhaps go which doesn't have genetics you would be familiar with that like most developers here are from the",
    "start": "271800",
    "end": "278880"
  },
  {
    "text": "Microsoft ecosystem so.net kind of things sometimes you would have interacted with genetics for a big deal when they were first introduced to.net",
    "start": "278880",
    "end": "285479"
  },
  {
    "text": "which was ages ago raise your hand if you were there when.net I think.net do got generics",
    "start": "285479",
    "end": "291720"
  },
  {
    "text": "yeah cool this is before typescript was even a thing uh",
    "start": "291720",
    "end": "297180"
  },
  {
    "text": "okay so generics exists to provide",
    "start": "297180",
    "end": "302240"
  },
  {
    "text": "consistency contracts between different fields that you might have as an example here I have a simple queue data",
    "start": "302240",
    "end": "308400"
  },
  {
    "text": "structure where you can push items into a queue and then you can pop them out so this is the first in first out simple",
    "start": "308400",
    "end": "313440"
  },
  {
    "text": "collection it's basically just an abstraction over the JavaScript array so this is I've created a data array and",
    "start": "313440",
    "end": "318720"
  },
  {
    "text": "then I'm pushing stuff into it and then I'm on a pop-up I'm using the JavaScript shift method which basically removes the first element from the array and takes",
    "start": "318720",
    "end": "324900"
  },
  {
    "text": "it out but right now it's not strict in the sense of you can push",
    "start": "324900",
    "end": "331440"
  },
  {
    "text": "whatever you want into it and you can pop whatever we want from it so when I get for example result from this skew",
    "start": "331440",
    "end": "337979"
  },
  {
    "text": "that I've pushed some stuff into as you can see GitHub was copilot was",
    "start": "337979",
    "end": "345419"
  },
  {
    "text": "quite it really wants me to order complete something over here anyways but the the output that we're getting from this pop operation we don't know if it's",
    "start": "345419",
    "end": "352259"
  },
  {
    "text": "going to be a number or a string because you're actually allowed to push whatever you want and allow to block whatever you want so it would be good if you could",
    "start": "352259",
    "end": "358740"
  },
  {
    "text": "specify that I only accept numbers and when you pop something from it it is only going to be a number and that's why",
    "start": "358740",
    "end": "364440"
  },
  {
    "text": "genetics exist within typescript so the way you do that is that you add a generic parameter to whatever thing you",
    "start": "364440",
    "end": "370139"
  },
  {
    "text": "want to enforce the contract on here I'm enforcing a contract on a class you could also do it for example on a",
    "start": "370139",
    "end": "375600"
  },
  {
    "text": "function where you would want the inputs of the function and outputs to have a certain contract that they match but",
    "start": "375600",
    "end": "381479"
  },
  {
    "text": "here this class has a generic argument and this is going to enforce that data is going to be of this type the items",
    "start": "381479",
    "end": "387660"
  },
  {
    "text": "that you are going to push are going to be of this type and for the pop it's actually automatically going to figure that out because data is now typed to",
    "start": "387660",
    "end": "395400"
  },
  {
    "text": "type T So pop knows that hey what you're going to get from data.shift is going to",
    "start": "395400",
    "end": "400500"
  },
  {
    "text": "be of that type t as well so with that if I was for example to say that hey this is only a queue of numbers",
    "start": "400500",
    "end": "407460"
  },
  {
    "text": "we only are allowed to add numbers in here and these turn into errors",
    "start": "407460",
    "end": "412560"
  },
  {
    "text": "any questions about generics cool let's jump into the next one",
    "start": "412560",
    "end": "419580"
  },
  {
    "text": "uh generics can be used with aliases as well and that's sort of where a lot of the power of the types as types that we",
    "start": "419580",
    "end": "426840"
  },
  {
    "text": "will talk about a bit more in in a bit comes from you can use",
    "start": "426840",
    "end": "432180"
  },
  {
    "text": "generic arguments in types and then you these these type aliases are essentially functions for example I can create a",
    "start": "432180",
    "end": "439860"
  },
  {
    "text": "type for what a queue for a number would look like by saying that hey",
    "start": "439860",
    "end": "444960"
  },
  {
    "text": "create me a queue type of type number and now I've essentially created a new type that has item as type number and the Bob",
    "start": "444960",
    "end": "453599"
  },
  {
    "text": "method is returning a number as well any questions about type analysis or",
    "start": "453599",
    "end": "460740"
  },
  {
    "text": "type aliases and generics excellent perfect let's jump to the next",
    "start": "460740",
    "end": "467099"
  },
  {
    "text": "thing we sort of looked at this already we've looked at generic type functions and we have seen this this generic type",
    "start": "467099",
    "end": "473340"
  },
  {
    "text": "function that we've created that can take anything and give back what a structure for a like a queue for a",
    "start": "473340",
    "end": "479160"
  },
  {
    "text": "number would look like let's take it a step back and talk about the basics of type",
    "start": "479160",
    "end": "484259"
  },
  {
    "text": "functions like if for example if you have identity type",
    "start": "484259",
    "end": "490199"
  },
  {
    "text": "let's see if it can complete that for me it did complete that for me although I would actually like to write it like this now the syntaxes are the same but",
    "start": "490199",
    "end": "497280"
  },
  {
    "text": "this is what we're going with we take the generic argument as a part of the type and then we in the definition of the",
    "start": "497280",
    "end": "504300"
  },
  {
    "text": "type just like we've done over here we use T to define the structure of what we want actually I don't want a function",
    "start": "504300",
    "end": "509879"
  },
  {
    "text": "over here I just want the type T to be output so right now what I've done is",
    "start": "509879",
    "end": "515580"
  },
  {
    "text": "I've created a generic function generic type function is what I'm calling it you can also call it generic",
    "start": "515580",
    "end": "520800"
  },
  {
    "text": "type utility and this is going to take a type T and it's",
    "start": "520800",
    "end": "526080"
  },
  {
    "text": "going to give back an identity type T which means that if for example I were to Define like number you could Define",
    "start": "526080",
    "end": "532380"
  },
  {
    "text": "it like this right that's how what we did before you can actually invoke this identity function as well",
    "start": "532380",
    "end": "538680"
  },
  {
    "text": "and give it number and this would be the same this is",
    "start": "538680",
    "end": "545420"
  },
  {
    "text": "going through the identity type function to give me back exactly what it says so",
    "start": "545420",
    "end": "550920"
  },
  {
    "text": "this is an identity type so that's why it's whatever you pass in is what you get out so for number you get it",
    "start": "550920",
    "end": "555959"
  },
  {
    "text": "something else oops if I were to do for example Str and pass in string then the type of Str would be",
    "start": "555959",
    "end": "563040"
  },
  {
    "text": "anybody want to take a guess string yes",
    "start": "563040",
    "end": "568620"
  },
  {
    "text": "cool so that's that's your first type function that you've ever written and",
    "start": "568620",
    "end": "574500"
  },
  {
    "text": "why this is useful will become more and more obvious as we do more and more demos any questions about this",
    "start": "574500",
    "end": "581300"
  },
  {
    "text": "cool let's jump into the next one so intersection type so",
    "start": "581339",
    "end": "587100"
  },
  {
    "text": "now why what's the use of these type functions let's talk about another feature of typescript called",
    "start": "587100",
    "end": "592140"
  },
  {
    "text": "intersection types here I have a type representing a person message which has a kind and an N once and followed by a",
    "start": "592140",
    "end": "598140"
  },
  {
    "text": "first name year of birth and then a car message and these are as you can tell excellent abstract",
    "start": "598140",
    "end": "603980"
  },
  {
    "text": "really real world examples uh that sarcasm but uh the the thing that I want to",
    "start": "603980",
    "end": "611399"
  },
  {
    "text": "point out over here is that there is a common structure between these two message types there's a kind and there's",
    "start": "611399",
    "end": "616680"
  },
  {
    "text": "an n1's so wouldn't it be great if you could Define them once and reuse that knowledge between these two messages and",
    "start": "616680",
    "end": "622920"
  },
  {
    "text": "that's where the intersection types come in with typescript so I can actually create a type message over here which is",
    "start": "622920",
    "end": "630060"
  },
  {
    "text": "going to be the same things that is common between the two and then I can say that the person message",
    "start": "630060",
    "end": "635519"
  },
  {
    "text": "is going to be instead of having this duplicated is going to be a message",
    "start": "635519",
    "end": "641160"
  },
  {
    "text": "and is also going to contain these things so now person message is essentially something that's going to have what it",
    "start": "641160",
    "end": "647459"
  },
  {
    "text": "had before which was kind in and once followed by the other fields and then we could do the same thing for",
    "start": "647459",
    "end": "654920"
  },
  {
    "text": "this as well cool any questions about intersection types",
    "start": "655500",
    "end": "662040"
  },
  {
    "text": "perfect uh so yes so the question is could we use",
    "start": "662040",
    "end": "667740"
  },
  {
    "text": "an interface instead of a type playlist for this no so that's exactly one of the the advantages of using a type Alias you",
    "start": "667740",
    "end": "674760"
  },
  {
    "text": "can use intersection types now interfaces do provide a similar feature called extends implements uh which would",
    "start": "674760",
    "end": "682079"
  },
  {
    "text": "achieve the same thing but of course you wouldn't be able to do that with unions you could replace intersections with interface extensions but not unions but",
    "start": "682079",
    "end": "690899"
  },
  {
    "text": "let's just stick with typinglicious as you'll see there are more and more features that are offered by typing",
    "start": "690899",
    "end": "696360"
  },
  {
    "text": "lists that don't exist within interfaces so that's that's good we've created",
    "start": "696360",
    "end": "702120"
  },
  {
    "text": "reuse using typescript intersection types but we're not seeing any type function over here now you're actually",
    "start": "702120",
    "end": "707880"
  },
  {
    "text": "sort of leaving the thought of hey you're going to use an intersection type on a particular type and that's going to",
    "start": "707880",
    "end": "714480"
  },
  {
    "text": "give you the properties of a message what if you could instead give your fellow developers a function that they",
    "start": "714480",
    "end": "722279"
  },
  {
    "text": "could use on a type and that would automatically add the properties of message to that type and that's quite",
    "start": "722279",
    "end": "729180"
  },
  {
    "text": "easy to do we could actually say that message is something that is now going to take a type argument",
    "start": "729180",
    "end": "734279"
  },
  {
    "text": "and it's going to return that type and also add to it these things",
    "start": "734279",
    "end": "742640"
  },
  {
    "text": "so instead of now having to remember that hey I need to do an intersection for this particular thing you could say",
    "start": "742740",
    "end": "748079"
  },
  {
    "text": "that hey create me a message that contains also a first name and year of",
    "start": "748079",
    "end": "753480"
  },
  {
    "text": "birth and this is exactly the same this is going to be having those fields as well as the fields that you define",
    "start": "753480",
    "end": "759120"
  },
  {
    "text": "within the message you're sort of starting to see",
    "start": "759120",
    "end": "764820"
  },
  {
    "text": "the power of using type utilities and type functions instead of that so this is just a simple intersection I wouldn't",
    "start": "764820",
    "end": "770700"
  },
  {
    "text": "do this I would just use an intersection most likely but you will probably have other fields over here as well",
    "start": "770700",
    "end": "776600"
  },
  {
    "text": "that you might want to use to make it worthwhile for it to be a type function",
    "start": "776600",
    "end": "784200"
  },
  {
    "text": "yes excellent yes the question is what will happen if",
    "start": "784200",
    "end": "790800"
  },
  {
    "text": "there is a kind also present within the person message and in that particular case it will be uh most likely a union",
    "start": "790800",
    "end": "798300"
  },
  {
    "text": "of sorry this is also string let's just make it a Boolean why not this will most likely be a",
    "start": "798300",
    "end": "805800"
  },
  {
    "text": "like a Boolean or a string would have satisfied this particular constraint",
    "start": "805800",
    "end": "811700"
  },
  {
    "text": "oh sorry yes that was my fault yep so it's it would not uh that is actually an",
    "start": "812940",
    "end": "819720"
  },
  {
    "text": "error because uh sorry so there's this type within never what's happening over",
    "start": "819720",
    "end": "825420"
  },
  {
    "text": "here is if something can never be true then typescript actually gives it the",
    "start": "825420",
    "end": "830940"
  },
  {
    "text": "type never so exactly for this particular case it's realized that it can never be true that a kind can be a",
    "start": "830940",
    "end": "836880"
  },
  {
    "text": "string or a Boolean the other alternative that I was mentioning that it could have figured out that it could be a union but in this particular case",
    "start": "836880",
    "end": "842459"
  },
  {
    "text": "it said that there is no overlap between string and Boolean and therefore it must be never this is never going to happen",
    "start": "842459",
    "end": "849740"
  },
  {
    "text": "something that could have like will resolve I think is if I have a specific",
    "start": "849740",
    "end": "855300"
  },
  {
    "text": "string over here for example let's just call it not and then there's something common between the literal North as well",
    "start": "855300",
    "end": "861300"
  },
  {
    "text": "as string and in this particular case I think it will resolve to what is the common thing between those two which is",
    "start": "861300",
    "end": "866639"
  },
  {
    "text": "north we will look at this specific example of using what is this thing that I've used over here called a literal in",
    "start": "866639",
    "end": "872820"
  },
  {
    "text": "a bit as well and then we will look at this unions that result in never as well in a bit",
    "start": "872820",
    "end": "878839"
  },
  {
    "text": "all right let's jump into the next one there's a concept within typescript called lookup types here I have some",
    "start": "879120",
    "end": "886380"
  },
  {
    "text": "code that I used ages ago about seven years ago at Australia Post uh we were",
    "start": "886380",
    "end": "891839"
  },
  {
    "text": "doing what is known as if you ever given a hopefully probably none of us not not",
    "start": "891839",
    "end": "897300"
  },
  {
    "text": "after we became software developers uh Uber then you would have actually had to",
    "start": "897300",
    "end": "903060"
  },
  {
    "text": "go through this thing called known as commercial passenger vehicle",
    "start": "903060",
    "end": "908339"
  },
  {
    "text": "accreditation you might have seen the sticker on your on the Ubers that you hire and for that we basically collected",
    "start": "908339",
    "end": "915300"
  },
  {
    "text": "a bunch of information and this is sort of simplified version of that kind of information um now we also collected payment when you",
    "start": "915300",
    "end": "922079"
  },
  {
    "text": "were doing this application and those that are familiar with Payment Systems you normally tokenize the credit card into something I've put in junk over",
    "start": "922079",
    "end": "928620"
  },
  {
    "text": "here but there's a contract over here between the payload that we want the user to send and what this function",
    "start": "928620",
    "end": "935339"
  },
  {
    "text": "should collect and return so we want this to be strongly typed as an example to have like a credit card token basically this",
    "start": "935339",
    "end": "942779"
  },
  {
    "text": "thing over here it should have this exact type over here but copy pasting is not a good idea so",
    "start": "942779",
    "end": "950100"
  },
  {
    "text": "what would you do you could of course move this into a type alias type payment request",
    "start": "950100",
    "end": "957720"
  },
  {
    "text": "is equal to that thing but then",
    "start": "957720",
    "end": "963240"
  },
  {
    "text": "you don't have access to this common Library this this common library that we're seeing over here is actually existing within an npm package that we",
    "start": "963240",
    "end": "969480"
  },
  {
    "text": "installed the back-end team was maintaining so would it be possible to get that type",
    "start": "969480",
    "end": "974940"
  },
  {
    "text": "from this type that they have created without asking them hey can you break down your types into give them more name",
    "start": "974940",
    "end": "980639"
  },
  {
    "text": "create more type noise so that's why lookup types exist we can actually say that hey payment request is going to be",
    "start": "980639",
    "end": "986579"
  },
  {
    "text": "from the type submit request and you can see that that GitHub copilot sort of figured this out",
    "start": "986579",
    "end": "992220"
  },
  {
    "text": "for us from the submit request get me the payment field so if I were to for",
    "start": "992220",
    "end": "997740"
  },
  {
    "text": "example type over here as well it will actually auto complete all the fields that exist within this as well so these are the members that exist within that",
    "start": "997740",
    "end": "1003860"
  },
  {
    "text": "particular type and I want the payment request over here so this is exactly going to be whatever is written away so if the",
    "start": "1003860",
    "end": "1010699"
  },
  {
    "text": "backend team decides to call it tokens this will now from now on have tokens in",
    "start": "1010699",
    "end": "1016160"
  },
  {
    "text": "it and then if I were using the payment request return annotation over here then this would start complaining that hey",
    "start": "1016160",
    "end": "1022220"
  },
  {
    "text": "you're not returning tokens you're returning token other than the typo any question about lookup types",
    "start": "1022220",
    "end": "1029620"
  },
  {
    "text": "cool let's jump into the next demo so this is a literal Union so we've not",
    "start": "1030740",
    "end": "1035900"
  },
  {
    "text": "talked about letters before but we I sort of gave a demo of that here I am declaring a type Direction called just",
    "start": "1035900",
    "end": "1041959"
  },
  {
    "text": "the literal North raise your hand if you've heard of little types",
    "start": "1041959",
    "end": "1047660"
  },
  {
    "text": "who some people have this is like instead of having a string you're just saying that only this",
    "start": "1047660",
    "end": "1053960"
  },
  {
    "text": "particular string is allowed so if I for example assign it North that's perfectly fine but if I assign like a typo of the",
    "start": "1053960",
    "end": "1059900"
  },
  {
    "text": "string North that's not fine so only the literal string North is",
    "start": "1059900",
    "end": "1065120"
  },
  {
    "text": "allowed with this particular little type now I can turn it into a union as well for example I can say it can be either",
    "start": "1065120",
    "end": "1071179"
  },
  {
    "text": "the string North or it can be the string South and then the only things that are allowed are North or South anything else",
    "start": "1071179",
    "end": "1078799"
  },
  {
    "text": "is going to be an error who it sort of finds the closest match",
    "start": "1078799",
    "end": "1083840"
  },
  {
    "text": "as well typescript and it's like saying that hey did you misspell not that's something that they added record like that",
    "start": "1083840",
    "end": "1089840"
  },
  {
    "text": "any questions about little types and literal unions",
    "start": "1089840",
    "end": "1096340"
  },
  {
    "text": "cool let's jump into the next thing here we have a type",
    "start": "1097520",
    "end": "1103280"
  },
  {
    "text": "called person that takes a name of type string in an age of type number we have",
    "start": "1103280",
    "end": "1108380"
  },
  {
    "text": "two people Jack and Jill that went up the hill and then we have this function",
    "start": "1108380",
    "end": "1113419"
  },
  {
    "text": "called log get and this is designed to take a person which can be of course Jack or Jill or any other person that",
    "start": "1113419",
    "end": "1119840"
  },
  {
    "text": "has those properties and then return the value by lookup using JavaScript lookup for",
    "start": "1119840",
    "end": "1127520"
  },
  {
    "text": "that key so for example if I were to pass in Jack and H to it this particular expression would return Jack 20 so it",
    "start": "1127520",
    "end": "1134840"
  },
  {
    "text": "would return 20. but it also does a log in addition to that this is just some form of a you",
    "start": "1134840",
    "end": "1142100"
  },
  {
    "text": "could for example use it to add default values you could use it for logging purposes which is in the name",
    "start": "1142100",
    "end": "1148000"
  },
  {
    "text": "but the Restriction over here is that you want the key to be the same as the keys that are offered by Jack so",
    "start": "1148000",
    "end": "1155360"
  },
  {
    "text": "the person properties only accepts name and age so you can explicitly list them over here but then of course it becomes",
    "start": "1155360",
    "end": "1161419"
  },
  {
    "text": "a bit weird for example if this gets place and it's a string then you have to",
    "start": "1161419",
    "end": "1167059"
  },
  {
    "text": "of course add that over here and it's it creates this dependency and you'd rather be able to figure out what the keys are",
    "start": "1167059",
    "end": "1174380"
  },
  {
    "text": "for a person without having to explicitly list them every single time so that's why the typescript key of operator comes in so here I am saying",
    "start": "1174380",
    "end": "1181220"
  },
  {
    "text": "that the key is going to be whatever the keys exist within the person type so right now it exists name and age and we",
    "start": "1181220",
    "end": "1187400"
  },
  {
    "text": "can see that the key is actually going to be the same if for example if I were to make a type over here it's going to complain that the edges this is not a",
    "start": "1187400",
    "end": "1194419"
  },
  {
    "text": "key that exists within person we can combine it with another feature that we saw previously called the",
    "start": "1194419",
    "end": "1200240"
  },
  {
    "text": "generic so this log get is right now person specific what if I could just",
    "start": "1200240",
    "end": "1205640"
  },
  {
    "text": "take a type t and then I could say that hey this person whatever input you have let's",
    "start": "1205640",
    "end": "1211280"
  },
  {
    "text": "just call it input of type T then the key must be the keys within type t",
    "start": "1211280",
    "end": "1218419"
  },
  {
    "text": "so few features in there but the key thing",
    "start": "1218419",
    "end": "1224179"
  },
  {
    "text": "for this particular thing is that you have the key of operator to get the key names as a literal Union which is why we",
    "start": "1224179",
    "end": "1230299"
  },
  {
    "text": "covered literals which is why we covered literal unions uh to get the keys for a particular type",
    "start": "1230299",
    "end": "1236240"
  },
  {
    "text": "of course this will turn into an error any questions for this particular thing the key of operator",
    "start": "1236240",
    "end": "1242240"
  },
  {
    "text": "cool excellent let's jump into the next thing go ahead",
    "start": "1242240",
    "end": "1247840"
  },
  {
    "text": "yes so the question is why is doing a type over here turn into an error that's because when we pass in Jill",
    "start": "1249799",
    "end": "1257660"
  },
  {
    "text": "yep so yeah so it's figured out that hey Jill is of type person so this must be",
    "start": "1257660",
    "end": "1263059"
  },
  {
    "text": "keys that exist within person uh that's the constraint that we put over here okay",
    "start": "1263059",
    "end": "1268240"
  },
  {
    "text": "let's jump to the next one which is generic constraint",
    "start": "1268240",
    "end": "1275299"
  },
  {
    "text": "you want to create this function that adds a full name property to any object that provides a first name",
    "start": "1275299",
    "end": "1282620"
  },
  {
    "text": "and a last name property so for example if I try to do that right now even though it's a generic function and I",
    "start": "1282620",
    "end": "1288740"
  },
  {
    "text": "want to add the full name property to it it's going to complain it's going to say that hey I don't know if object is going to contain first name or not I don't",
    "start": "1288740",
    "end": "1295159"
  },
  {
    "text": "know if object is going to contain last name or not it does in these particular cases and I'm calling it over here but",
    "start": "1295159",
    "end": "1300260"
  },
  {
    "text": "as far as the function is concerned it is not constrained by anything there",
    "start": "1300260",
    "end": "1306380"
  },
  {
    "text": "is no constraint on it you want to be able to specify in order to read properties from a generic to specify",
    "start": "1306380",
    "end": "1312200"
  },
  {
    "text": "that hey it must these properties will always exist and the way to do that within typescript is to use extends",
    "start": "1312200",
    "end": "1318020"
  },
  {
    "text": "for the generic argument followed by what it must contain so for in our case it must contain first name String and it",
    "start": "1318020",
    "end": "1323120"
  },
  {
    "text": "must contain a last name string cool and now if",
    "start": "1323120",
    "end": "1329780"
  },
  {
    "text": "of course we don't provide it it's complaining over here instead of in there and within that it knows that because this type T is constrained to",
    "start": "1329780",
    "end": "1336620"
  },
  {
    "text": "have these members on it that first name is going to be of type string and last name is going to be of type string",
    "start": "1336620",
    "end": "1341980"
  },
  {
    "text": "so that's generic constraints any questions about that go ahead",
    "start": "1341980",
    "end": "1349120"
  },
  {
    "text": "yes excellent could you put this in a type yes so let's talk about ah",
    "start": "1349159",
    "end": "1356260"
  },
  {
    "text": "why we're going to start talking about we've been looking at JavaScript and typescript in parallel and I'm going to",
    "start": "1357039",
    "end": "1363500"
  },
  {
    "text": "try and move into just type level thinking and not worrying about the JavaScript because the advantages you",
    "start": "1363500",
    "end": "1368900"
  },
  {
    "text": "get from that is you can think of types as proofs so over here yes we we have mangled in this",
    "start": "1368900",
    "end": "1376100"
  },
  {
    "text": "constraint as well as this the JavaScript code into a single function",
    "start": "1376100",
    "end": "1381860"
  },
  {
    "text": "what you could do is you could say export type",
    "start": "1381860",
    "end": "1386440"
  },
  {
    "text": "um add full name and specify the add phone name is going to be something that takes a type T which of course is going",
    "start": "1386900",
    "end": "1393140"
  },
  {
    "text": "to follow this constraint and then it is going to return to you",
    "start": "1393140",
    "end": "1399080"
  },
  {
    "text": "something which is going to contain t as well as the full name property",
    "start": "1399080",
    "end": "1405080"
  },
  {
    "text": "so this this is just thinking about the type without having to think about what the JavaScript implementation for this",
    "start": "1405080",
    "end": "1410539"
  },
  {
    "text": "would look like and then you could use this as the proof for this particular function so you could say that I am going to have a",
    "start": "1410539",
    "end": "1417320"
  },
  {
    "text": "function called full name at full name which is going to conform to this add full name type ah",
    "start": "1417320",
    "end": "1425799"
  },
  {
    "text": "sorry that that so so the type is ADD full name is going to be something which is going to be generic which is going to",
    "start": "1430640",
    "end": "1438380"
  },
  {
    "text": "return unexpected uh this is yes of course",
    "start": "1438380",
    "end": "1445880"
  },
  {
    "text": "takes an object of type T and then it's going to return this thing which is",
    "start": "1445880",
    "end": "1451039"
  },
  {
    "text": "going to have t as well as full name and then now this is this is this proof is actually being enforced on this and if I",
    "start": "1451039",
    "end": "1456140"
  },
  {
    "text": "forget for example to add a full name property because of that type that we reasoned about in isolation",
    "start": "1456140",
    "end": "1462080"
  },
  {
    "text": "this thing no longer is the proof for that so this is sort of writing a unit test you've written a unit test for what",
    "start": "1462080",
    "end": "1469039"
  },
  {
    "text": "this function must do by just using typescript it's also going to of course enforce",
    "start": "1469039",
    "end": "1474799"
  },
  {
    "text": "that you always provide something that has a last name that's again being enforced by this type annotation",
    "start": "1474799",
    "end": "1481179"
  },
  {
    "text": "cool there is one more operator that I want to discuss called the type of operator we have two types of hey we have two",
    "start": "1482059",
    "end": "1488480"
  },
  {
    "text": "variables over this is there is no type annotation right now we have origin and unit and we want to enforce that the",
    "start": "1488480",
    "end": "1494120"
  },
  {
    "text": "structure for these two will always be the same of course you could do that by creating that point type that we created but if you don't want to you can",
    "start": "1494120",
    "end": "1500659"
  },
  {
    "text": "actually create a link between two variables as well of course for that you'd first need the",
    "start": "1500659",
    "end": "1506179"
  },
  {
    "text": "type of the variable so how do you go from JavaScript into typescript you can do that with the type of operator I can",
    "start": "1506179",
    "end": "1511700"
  },
  {
    "text": "say the type of for example origin I've created a new type called origin and this is going to be whatever is",
    "start": "1511700",
    "end": "1517880"
  },
  {
    "text": "inferred for this JavaScript variable so for this JavaScript variable we know that this is person for when you hover",
    "start": "1517880",
    "end": "1523880"
  },
  {
    "text": "over it and that's exactly what the type is going to be for origin so that's the typescript type of",
    "start": "1523880",
    "end": "1529880"
  },
  {
    "text": "operator and of course if you don't want to create a type and you just want to create a link between two you could do this over here as well just like I can",
    "start": "1529880",
    "end": "1537320"
  },
  {
    "text": "always take this and move this into a type Alias you can always take something that you have on the right hand side of",
    "start": "1537320",
    "end": "1542900"
  },
  {
    "text": "a type Alias and use that or a type annotation true any questions about the type of",
    "start": "1542900",
    "end": "1549679"
  },
  {
    "text": "operator okay so we talked about these types",
    "start": "1549679",
    "end": "1555320"
  },
  {
    "text": "being used as proof which is a reason why we think want to think start thinking about Types on their own without being mangled",
    "start": "1555320",
    "end": "1562340"
  },
  {
    "text": "with the JavaScript implementation another reason why I want to do that is because the advanced types that we are",
    "start": "1562340",
    "end": "1567380"
  },
  {
    "text": "looking at they're often used with JavaScript code that is quite hard to reason about here I have an object wrapper which",
    "start": "1567380",
    "end": "1574100"
  },
  {
    "text": "takes an object that like this this type is very well defined it's going to take an object as this argument and then whenever you",
    "start": "1574100",
    "end": "1581539"
  },
  {
    "text": "ask for it it's going to create a shallow clone so that you're not allowed to mutate it this is you could call this an immutable object crapper a shallow",
    "start": "1581539",
    "end": "1587840"
  },
  {
    "text": "immutable object wrapper for those that are considered that want to think that at that level but yeah so we always need",
    "start": "1587840",
    "end": "1592940"
  },
  {
    "text": "to create a copy so you cannot mutate the original object when you try to get a property we are going to look it up for you we're not going to just give you",
    "start": "1592940",
    "end": "1599600"
  },
  {
    "text": "the object that you can look it up from it um and you can see some of the things that",
    "start": "1599600",
    "end": "1604820"
  },
  {
    "text": "we talked about like you can see the key of operator over here as well and then we have a class sorry array wrapper this",
    "start": "1604820",
    "end": "1611179"
  },
  {
    "text": "is again Java's complementation when you take an array and when you ask for an array we create a shallow clone for it",
    "start": "1611179",
    "end": "1616340"
  },
  {
    "text": "and return that for you if you want a particular index we return from that array at that particular index",
    "start": "1616340",
    "end": "1622340"
  },
  {
    "text": "so you can see sort of there's a difference between like the methods right object has get OBS array has get",
    "start": "1622340",
    "end": "1627500"
  },
  {
    "text": "array object has get property array has get index and then we have this wrap function and this is common for like",
    "start": "1627500",
    "end": "1633740"
  },
  {
    "text": "libraries that you might be using if you use JavaScript proxies you might be using Library like if you use mobx that might be doing something like this if",
    "start": "1633740",
    "end": "1640159"
  },
  {
    "text": "you're using welshield that might be doing something like this if you've looked at there are other libraries that",
    "start": "1640159",
    "end": "1645860"
  },
  {
    "text": "we look at as well that sort of do this wrapping of existing things and sort of give you modified versions of those",
    "start": "1645860",
    "end": "1651679"
  },
  {
    "text": "things but typescript cannot infer this this function is doing something very weird it's creating a dummy objects with a",
    "start": "1651679",
    "end": "1659000"
  },
  {
    "text": "null prototype and then it's going through the keys of the object that you pass in is checking if it's an array if it is it's going to put the result for",
    "start": "1659000",
    "end": "1666200"
  },
  {
    "text": "that key into an array wrapper otherwise it's going to put it put that an object wrapper and like typescript loses",
    "start": "1666200",
    "end": "1671900"
  },
  {
    "text": "context about what the hell pretty much at the start of when as soon as you create result it's like you're creating",
    "start": "1671900",
    "end": "1678260"
  },
  {
    "text": "an object and you're not telling you what's going to exist within this object so it's in any and since you return that result that's what that's what's coming",
    "start": "1678260",
    "end": "1684559"
  },
  {
    "text": "out of it so would be great if when you used functions like this like the strap",
    "start": "1684559",
    "end": "1689840"
  },
  {
    "text": "function the rat result the wrapped result would not be any ah so you would get type safety for",
    "start": "1689840",
    "end": "1695900"
  },
  {
    "text": "example over here if you try to access property that doesn't exist on this particular person which is has the",
    "start": "1695900",
    "end": "1701779"
  },
  {
    "text": "name so names is not a property that exists on this thing uh it would be great if you could figure out that items is of type array like right now get",
    "start": "1701779",
    "end": "1709100"
  },
  {
    "text": "index is any and we will look at Advanced types that will actually sort of make that possible",
    "start": "1709100",
    "end": "1714260"
  },
  {
    "text": "for us in that Journey the first type that I want to talk about is conditional types",
    "start": "1714260",
    "end": "1720020"
  },
  {
    "text": "any questions about why we're starting to think about types in isolation",
    "start": "1720020",
    "end": "1727179"
  },
  {
    "text": "I knew that they were not going to do questions I needed a water break okay",
    "start": "1727179",
    "end": "1732440"
  },
  {
    "text": "let's talk about conditional types I'm going against my advice and looking back at JavaScript implementation of a",
    "start": "1732440",
    "end": "1738679"
  },
  {
    "text": "function and this function is designed to take anything and it's designed to return if it is going to be a null it's",
    "start": "1738679",
    "end": "1744860"
  },
  {
    "text": "going to return the literal string now if it's not going to be in all it's going to turn the literal string not null so we can see this code and we know",
    "start": "1744860",
    "end": "1752240"
  },
  {
    "text": "that if you pass in a null this funnel will actually be this just this string but as far as typescript is",
    "start": "1752240",
    "end": "1758960"
  },
  {
    "text": "concerned it's not it's not figured that out this is an example of again inference failing at a very simple level",
    "start": "1758960",
    "end": "1764720"
  },
  {
    "text": "and this is where conditional types come in you can actually think about what the type nature of this",
    "start": "1764720",
    "end": "1771380"
  },
  {
    "text": "function is and say that hey it's going to be type for this type name thing is going to be something that takes a type",
    "start": "1771380",
    "end": "1778640"
  },
  {
    "text": "t and then if T is something that conforms to num and you can see that they're like",
    "start": "1778640",
    "end": "1784820"
  },
  {
    "text": "GitHub copilot automatically completed this for us so this is just me trying to say that",
    "start": "1784820",
    "end": "1791179"
  },
  {
    "text": "even though these things might be hard to write you have support out there to write these kind of things for you okay",
    "start": "1791179",
    "end": "1797960"
  },
  {
    "text": "so we want to say that hey if it is something that is going to extend a null we this",
    "start": "1797960",
    "end": "1804440"
  },
  {
    "text": "this type is actually going to resolve to the literal type now if otherwise it's going to resolve to the digital",
    "start": "1804440",
    "end": "1809539"
  },
  {
    "text": "type not now then we can use this type name results as a return type annotation and of",
    "start": "1809539",
    "end": "1816380"
  },
  {
    "text": "course we don't have a generic right now so we have to make the function generic and then we have to tie this generic to",
    "start": "1816380",
    "end": "1821960"
  },
  {
    "text": "the object that is being passed in and you can see an error happening over here that's because typescript didn't",
    "start": "1821960",
    "end": "1827120"
  },
  {
    "text": "understand before and it still doesn't understand what magic is happening in this simple conditional block so you",
    "start": "1827120",
    "end": "1834080"
  },
  {
    "text": "have to use it what is known as a type assertion to say trust me okay not tracing chest trust me I know",
    "start": "1834080",
    "end": "1842720"
  },
  {
    "text": "better this result is going to conform to what I'm saying is going to conform to which is going to be the type name",
    "start": "1842720",
    "end": "1848840"
  },
  {
    "text": "result for the input type t Okay so for type name for null now it's going to",
    "start": "1848840",
    "end": "1856520"
  },
  {
    "text": "actually infer hey is going to be the literal now previously it was saying it could be null or not null and for",
    "start": "1856520",
    "end": "1861679"
  },
  {
    "text": "anything else it's actually going to infer correctly that it's not known this is a fine example of if uh",
    "start": "1861679",
    "end": "1869480"
  },
  {
    "text": "tree falls in a forest does it make a sound well if it does if you look inside of it but if you're not there it doesn't",
    "start": "1869480",
    "end": "1876260"
  },
  {
    "text": "so for the outside world this function is safe cool question",
    "start": "1876260",
    "end": "1883778"
  },
  {
    "text": "yep so the question is what is the difference between unknown and any um the simplest difference is that you",
    "start": "1885320",
    "end": "1891500"
  },
  {
    "text": "cannot use an unknown without saying what it is first without checking for what it is so let me create a simple",
    "start": "1891500",
    "end": "1897080"
  },
  {
    "text": "example export const example which is unknown",
    "start": "1897080",
    "end": "1904299"
  },
  {
    "text": "so I make it let you can assign anything to it like hello",
    "start": "1906020",
    "end": "1913480"
  },
  {
    "text": "if I can type it properly my hands are cold excuse me like a",
    "start": "1915980",
    "end": "1921080"
  },
  {
    "text": "number or a string or whatever but if you try to read it for example within a function you have a",
    "start": "1921080",
    "end": "1928880"
  },
  {
    "text": "value unknown and you try to say that",
    "start": "1928880",
    "end": "1934360"
  },
  {
    "text": "ah like value dot to string even like",
    "start": "1935720",
    "end": "1941120"
  },
  {
    "text": "anything is going to complain that hey value is unknown you haven't",
    "start": "1941120",
    "end": "1946399"
  },
  {
    "text": "you can put anything you want in it but I won't let you read it because as far as I'm concerned it's unknown so it's a",
    "start": "1946399",
    "end": "1951679"
  },
  {
    "text": "safer version of any uh with this you actually have to put an explicit check if it is a string then you're allowed to",
    "start": "1951679",
    "end": "1958820"
  },
  {
    "text": "read this value so without this check it's going to be unknown but with this check this unknown",
    "start": "1958820",
    "end": "1964159"
  },
  {
    "text": "is going to narrow down to what you checked which is it is a string",
    "start": "1964159",
    "end": "1969460"
  },
  {
    "text": "let's jump into the next demo in first so we've looked at conditional types so conditional types can be like we're",
    "start": "1970159",
    "end": "1976100"
  },
  {
    "text": "starting to think about types as functions there are lots of things that we do within JavaScript functions you can sort of do those things within type",
    "start": "1976100",
    "end": "1982399"
  },
  {
    "text": "functions as well and one of those is you want to be able to create a variable how do you do that within a type",
    "start": "1982399",
    "end": "1988159"
  },
  {
    "text": "function here's an example why you would want to create a variable within the type function for example we have",
    "start": "1988159",
    "end": "1994279"
  },
  {
    "text": "is array type function which checks if T is going to be of type something some form of an array and if",
    "start": "1994279",
    "end": "2001299"
  },
  {
    "text": "it is it's going to turn the literal array otherwise it's going to be saying that hey it's some other thing and this",
    "start": "2001299",
    "end": "2006340"
  },
  {
    "text": "works fine you give it an array of strings it's going to say hey it's an array you give it a number it's going to say hey it's other it's not a string",
    "start": "2006340",
    "end": "2013779"
  },
  {
    "text": "it's not an array but what if if we want to be able to figure out what the types exist within",
    "start": "2013779",
    "end": "2019539"
  },
  {
    "text": "that array you would need to create a variable within this conditional type to identify what the type is for that",
    "start": "2019539",
    "end": "2027760"
  },
  {
    "text": "array and then store it into a new type that you can use in other portions of this type function",
    "start": "2027760",
    "end": "2033399"
  },
  {
    "text": "um so for for right now for an array it is returning in any for",
    "start": "2033399",
    "end": "2039580"
  },
  {
    "text": "anything else is returning T so if you pass it a string it's going to say hey this is a string but if you pass it in",
    "start": "2039580",
    "end": "2045159"
  },
  {
    "text": "an array of anything it's right now saying that it's n e because that's what we have over here and for a number of",
    "start": "2045159",
    "end": "2051339"
  },
  {
    "text": "array again of course it's going to be this any so you want to be able to figure out hey",
    "start": "2051339",
    "end": "2057520"
  },
  {
    "text": "when you've identify a typescript that it's an array of something can you just know what type is into something and",
    "start": "2057520",
    "end": "2063760"
  },
  {
    "text": "that's where the infer keyword comes in so you want to say that hey it's perhaps not not the best named or type operator",
    "start": "2063760",
    "end": "2071378"
  },
  {
    "text": "but what you want to say is that put this into a variables put this into a new type infer that and put this into a",
    "start": "2071379",
    "end": "2077378"
  },
  {
    "text": "typical let's just create a new type member and then you can use that type anywhere in the remaining body of your",
    "start": "2077379",
    "end": "2083138"
  },
  {
    "text": "type function for example in our particular case we want that to be a if it's an array of",
    "start": "2083139",
    "end": "2088358"
  },
  {
    "text": "anything store that and a member and return that type as result so for a string array now",
    "start": "2088359",
    "end": "2094419"
  },
  {
    "text": "it will actually return member which is string and for a number array it's going",
    "start": "2094419",
    "end": "2099460"
  },
  {
    "text": "to return the member which is going to be inferred for number array type number",
    "start": "2099460",
    "end": "2105820"
  },
  {
    "text": "any questions on the info keyword so you can see that there's no JavaScript in this we're really thinking about types",
    "start": "2105820",
    "end": "2111400"
  },
  {
    "text": "as type code let's let's go to the next thing which",
    "start": "2111400",
    "end": "2116920"
  },
  {
    "text": "is mapped types so if you have conditions you have if conditions you have functions what what",
    "start": "2116920",
    "end": "2122859"
  },
  {
    "text": "other programming languages features that we use we have loops can we do loops and that's where match type comes",
    "start": "2122859",
    "end": "2128440"
  },
  {
    "text": "in array.map this is a version of that it is type Maps types okay so we have a",
    "start": "2128440",
    "end": "2135820"
  },
  {
    "text": "type point and we want to create some form of a type that",
    "start": "2135820",
    "end": "2141480"
  },
  {
    "text": "once assigned you cannot modify it we can do this with another typescript feature called read only so I could for",
    "start": "2141480",
    "end": "2147820"
  },
  {
    "text": "example create another type over here and call it a read-only point and then for each of these I could",
    "start": "2147820",
    "end": "2154300"
  },
  {
    "text": "assign read only to this and then if I instead of saying it's a",
    "start": "2154300",
    "end": "2159880"
  },
  {
    "text": "point it's a read-only point that because I have",
    "start": "2159880",
    "end": "2166240"
  },
  {
    "text": "added an annotation that this member is going to be read only once it's been created you're not allowed to modify it",
    "start": "2166240",
    "end": "2172119"
  },
  {
    "text": "so you'll see an error hey cannot assign to X because it is read only but wouldn't it be great if you could generate this type",
    "start": "2172119",
    "end": "2178839"
  },
  {
    "text": "like have a cake and eat it too like have this punch type but be able to generate a read-only version of the",
    "start": "2178839",
    "end": "2185020"
  },
  {
    "text": "point type without having to explicit all the members again and again and that's where one of the features of",
    "start": "2185020",
    "end": "2190300"
  },
  {
    "text": "map types let's first create a basic copy of this let's see if if copilot can",
    "start": "2190300",
    "end": "2197380"
  },
  {
    "text": "figure out what nope it's asking me to list the members again and again instead",
    "start": "2197380",
    "end": "2202420"
  },
  {
    "text": "of doing that let's use a map to figure out what the members are going to be so we want to say that for hey for each of",
    "start": "2202420",
    "end": "2208300"
  },
  {
    "text": "the keys we saw the key of operator that exists within point",
    "start": "2208300",
    "end": "2213400"
  },
  {
    "text": "put them into let's just call it key key in key of point this is the like I'm in",
    "start": "2213400",
    "end": "2220000"
  },
  {
    "text": "pipeline here I'm not writing JavaScript here but the four in is something that you might have used within JavaScript",
    "start": "2220000",
    "end": "2225220"
  },
  {
    "text": "this is math sort of using the same syntax so it's saying hey create a key called key",
    "start": "2225220",
    "end": "2231040"
  },
  {
    "text": "from the keys that exist within key of Point what are the things that exist within this we know it's the literal",
    "start": "2231040",
    "end": "2236140"
  },
  {
    "text": "Union of X Y and Z and then for each of these map them out to be the looked up result for that key",
    "start": "2236140",
    "end": "2243880"
  },
  {
    "text": "from point so we've looked at lookup types so this is actually going to be a loop this is going to say first hey key",
    "start": "2243880",
    "end": "2249579"
  },
  {
    "text": "is going to be the literal X and then it's going to say from point look up the little X we know that that is going to",
    "start": "2249579",
    "end": "2255460"
  },
  {
    "text": "be of course number same for y and same for Z so this is actually just a copy of that so you can see we passed in x y z",
    "start": "2255460",
    "end": "2262000"
  },
  {
    "text": "of number we're getting back on the output result x y z of type number but of course that's not what we want",
    "start": "2262000",
    "end": "2268300"
  },
  {
    "text": "you to do we wanted to be able to modify these when they go through the map as well and we can do that with map type",
    "start": "2268300",
    "end": "2273400"
  },
  {
    "text": "modifiers and one of those is read only so this is saying that take all of those properties",
    "start": "2273400",
    "end": "2278859"
  },
  {
    "text": "and while you're mapping them add this nature of read only to them and so now",
    "start": "2278859",
    "end": "2284980"
  },
  {
    "text": "this is actually a read-only point that we were looking for and as soon as you add like remove a",
    "start": "2284980",
    "end": "2291099"
  },
  {
    "text": "member that's going to go away automatically from the read-only point and once it passes through you can see",
    "start": "2291099",
    "end": "2296440"
  },
  {
    "text": "that on the other side they're coming out as read only so go ahead",
    "start": "2296440",
    "end": "2304380"
  },
  {
    "text": "yes so the question is can you conditionally make some of them read only the answer is yes and you would use conditional types for that",
    "start": "2304780",
    "end": "2311920"
  },
  {
    "text": "um I'm not going to try and code that right now but yes so you can combine the features",
    "start": "2311920",
    "end": "2317740"
  },
  {
    "text": "that we've been talking about to do Advanced things like that let's jump into the so we've looked at",
    "start": "2317740",
    "end": "2322839"
  },
  {
    "text": "one map type modifier read only what other map type modifiers exist so here's some type that I've created again a real",
    "start": "2322839",
    "end": "2328540"
  },
  {
    "text": "world example this is not a real world example where members are read only they are not optional as well and",
    "start": "2328540",
    "end": "2335260"
  },
  {
    "text": "non-optional members as well so those are the kind of two Natures that exist within properties they are either read-only or not read only they are",
    "start": "2335260",
    "end": "2341619"
  },
  {
    "text": "optional or not optional so when we are mapping this to the output we can actually for example we've seen that we",
    "start": "2341619",
    "end": "2346839"
  },
  {
    "text": "can mark them as read-only and now example result is going to have all of those members as read-only there",
    "start": "2346839",
    "end": "2354040"
  },
  {
    "text": "is also like a minus read only which is actually going to remove the read only nature from any of the members so we",
    "start": "2354040",
    "end": "2360339"
  },
  {
    "text": "have a read-only name in the input but in the output it's no longer going to be read only because read only is going to",
    "start": "2360339",
    "end": "2365380"
  },
  {
    "text": "get removed now if you're going to add a plus operator people are going to say you have should have a plus some minus operating people are going to say you",
    "start": "2365380",
    "end": "2371140"
  },
  {
    "text": "have a plus operator as well this is exactly the same as that but hey it exists to make people happy",
    "start": "2371140",
    "end": "2377940"
  },
  {
    "text": "and then similarly there's the other side of this that we talked about which is optional so we have a question mark",
    "start": "2377940",
    "end": "2383380"
  },
  {
    "text": "over here so you could say that hey make them all as optional as well let's just look at them in isolation so all of the",
    "start": "2383380",
    "end": "2390040"
  },
  {
    "text": "properties on the output are now going to be optional and you can see that they're all become they've all got that question mark The Riddler",
    "start": "2390040",
    "end": "2397119"
  },
  {
    "text": "and you can also put a minus question mark because you could remove optionality and now put phone was",
    "start": "2397119",
    "end": "2402460"
  },
  {
    "text": "optional in the input but it is not in the output cool of course if you're going to have a minus you're going to have a plus as",
    "start": "2402460",
    "end": "2408280"
  },
  {
    "text": "well which is the same thing as not having it but that supported any questions about map type modifiers",
    "start": "2408280",
    "end": "2416560"
  },
  {
    "text": "okay now we're really going into the deep end um",
    "start": "2416560",
    "end": "2421599"
  },
  {
    "text": "let's talk about the never type that came up before as well so there is a special circumstance that happens within",
    "start": "2421599",
    "end": "2427240"
  },
  {
    "text": "code that means that it can never happen for",
    "start": "2427240",
    "end": "2432280"
  },
  {
    "text": "example this particular function can never return so if the only annotation that you could have over here is never",
    "start": "2432280",
    "end": "2438700"
  },
  {
    "text": "this is the typescript's problem to this because it wants to encode what's happening in your JavaScript code into",
    "start": "2438700",
    "end": "2443980"
  },
  {
    "text": "types so this is the solution the typescript team has this is never um and interestingly you can assign a",
    "start": "2443980",
    "end": "2450460"
  },
  {
    "text": "never to anything so for example you can assign it to a string because as far as typescript",
    "start": "2450460",
    "end": "2455980"
  },
  {
    "text": "knows it's never going to return so this thing is never going to be anything other than a string in fact it's never",
    "start": "2455980",
    "end": "2461920"
  },
  {
    "text": "going to be anything but if you want to say it's going to be a string I'll let you do that and this is actually useful right because this function is not yet",
    "start": "2461920",
    "end": "2468460"
  },
  {
    "text": "implemented right now you don't want the rest of your code to start throwing errors like looking red it's up to you",
    "start": "2468460",
    "end": "2473920"
  },
  {
    "text": "to say that hey this is in progress this is coming soon so it allows you to assign never to",
    "start": "2473920",
    "end": "2481240"
  },
  {
    "text": "anything which means that it's actually a part of any type so you if when I say there is going to be a string you could",
    "start": "2481240",
    "end": "2486520"
  },
  {
    "text": "actually say it's going to be either a string or an error and this typescript will actually smart enough to know that",
    "start": "2486520",
    "end": "2492220"
  },
  {
    "text": "if you're doing a union with never it's essentially the same as not having that Union so in the inferred result for",
    "start": "2492220",
    "end": "2498099"
  },
  {
    "text": "verbose it's actually figured out there's just going to be a string and that means that if you you see this",
    "start": "2498099",
    "end": "2506440"
  },
  {
    "text": "quite commonly a lot of the map types A lot of the conditional types this use of never to essentially remove types from the",
    "start": "2506440",
    "end": "2513040"
  },
  {
    "text": "type system here I have a generic function generic type utility function that takes a type T and then sees hey if",
    "start": "2513040",
    "end": "2521980"
  },
  {
    "text": "it's going to be a null infer the result to be the type null otherwise infer it to be the type never",
    "start": "2521980",
    "end": "2529960"
  },
  {
    "text": "and when you pass in for example multiple into this thing for example you say pass in the type null or string it's",
    "start": "2529960",
    "end": "2536260"
  },
  {
    "text": "going to Loop through all of them so even though conditional types aren't Loops when you pass in a union you're using them as a loop so it's going to do",
    "start": "2536260",
    "end": "2542260"
  },
  {
    "text": "condition condition Union Union so it's going to say that hey null comes in null comes out string comes in never comes",
    "start": "2542260",
    "end": "2549220"
  },
  {
    "text": "out so the result is actually going to be null or never and we know that anything or never is the same as the",
    "start": "2549220",
    "end": "2555040"
  },
  {
    "text": "base type so this is actually going to be just nulls so we've just created a type function that only gives us null from any given input type",
    "start": "2555040",
    "end": "2563338"
  },
  {
    "text": "any questions I am scared [Laughter] because because if you're thinking that",
    "start": "2563800",
    "end": "2570339"
  },
  {
    "text": "at this level then you've got really complicated okay let's talk about uh the built-in",
    "start": "2570339",
    "end": "2577660"
  },
  {
    "text": "yes go ahead what the question is what's the",
    "start": "2577660",
    "end": "2582760"
  },
  {
    "text": "difference between never end void yes the question is what is the difference between never and void void",
    "start": "2582760",
    "end": "2587920"
  },
  {
    "text": "is this function does return but it doesn't return a value never is this",
    "start": "2587920",
    "end": "2592960"
  },
  {
    "text": "function never returns okay ah let's jump into the next thing so we've",
    "start": "2592960",
    "end": "2600220"
  },
  {
    "text": "looked at read-only type there's actually this type is actually built into typescript so we didn't actually",
    "start": "2600220",
    "end": "2605859"
  },
  {
    "text": "need to create this there's this Maps type utility exists within typescript that's why the talk is called type utilities uh",
    "start": "2605859",
    "end": "2613240"
  },
  {
    "text": "so you just use that and that's exactly as you can see the structure is exactly what we wrote and hand code and understand ourselves now",
    "start": "2613240",
    "end": "2619359"
  },
  {
    "text": "there is another one called uh sorry sorry we looked at read only read only exist but there's no actually",
    "start": "2619359",
    "end": "2625420"
  },
  {
    "text": "opposite of read only so you'd have to pretty much if you want a mutable version you'd have to do this you'd have to do this create a new type over here",
    "start": "2625420",
    "end": "2632079"
  },
  {
    "text": "call it mutable F2 mutable the capital M and then basically the move read only",
    "start": "2632079",
    "end": "2638200"
  },
  {
    "text": "and this will actually take a read-only point if there was one and turn it into a non read only point but other types exist for the other map",
    "start": "2638200",
    "end": "2646240"
  },
  {
    "text": "type modifiers that we saw like partial is an example so we want to make all of the things optional why is this use case",
    "start": "2646240",
    "end": "2651819"
  },
  {
    "text": "exist in the real world well here's an update to do uh you want to take it to do and you want to take a fields to",
    "start": "2651819",
    "end": "2657040"
  },
  {
    "text": "update but you don't want the user to be able to provide all to have to provide all the fields for example you just want to be able to say hey update the to do",
    "start": "2657040",
    "end": "2664240"
  },
  {
    "text": "and just change the done property to true and this is like quite common with like Redux style code with set state",
    "start": "2664240",
    "end": "2669579"
  },
  {
    "text": "within react you want to pass pass in a portion of the object members that you want to change so what would be a great",
    "start": "2669579",
    "end": "2676480"
  },
  {
    "text": "type annotation over here we know we could create a map types with putting a question mark on everything but this",
    "start": "2676480",
    "end": "2682359"
  },
  {
    "text": "exists within typescript this is a type utility that actually provides and you can see that the structure for partial is the same as what we saw it basically",
    "start": "2682359",
    "end": "2689079"
  },
  {
    "text": "adds a question mark to all of the things and with this of course now this is this",
    "start": "2689079",
    "end": "2695200"
  },
  {
    "text": "is going to be fine um don't have to and you get nice autocomplete over here it's going to tell you what what are the partial",
    "start": "2695200",
    "end": "2701020"
  },
  {
    "text": "members that you could mutate if you wanted to any questions on the personal type",
    "start": "2701020",
    "end": "2706180"
  },
  {
    "text": "utility cool let's jump to that there's required",
    "start": "2706180",
    "end": "2713920"
  },
  {
    "text": "as well which uh is so you you take an optional config",
    "start": "2713920",
    "end": "2721000"
  },
  {
    "text": "but you make sure internally in your private config that all those members are present you give them default values",
    "start": "2721000",
    "end": "2726760"
  },
  {
    "text": "using the null collection this is Javascript question mark question mark or listing uh to make sure that hey if",
    "start": "2726760",
    "end": "2732400"
  },
  {
    "text": "color is not provided it's going to be green if radius is not provided it's going to be zero you could do this in other ways as well you could take them as arguments you should probably take",
    "start": "2732400",
    "end": "2738339"
  },
  {
    "text": "them as arguments but uh when you have this fact that you are",
    "start": "2738339",
    "end": "2743380"
  },
  {
    "text": "always going to provide them with members how do you ensure that when you try to",
    "start": "2743380",
    "end": "2748839"
  },
  {
    "text": "read them like you want to read color you know that it's not going to be optional because you've modified the config to always have these numbers",
    "start": "2748839",
    "end": "2754240"
  },
  {
    "text": "wouldn't be great if you could specify that this particular config that you're going to take is always going to have all of these members from an optional",
    "start": "2754240",
    "end": "2760480"
  },
  {
    "text": "type and this that's where required comes in that's the opposite of partial we are saying that this is always going",
    "start": "2760480",
    "end": "2767800"
  },
  {
    "text": "to be present so this is going to take that server config then has optional members and then you can see in the",
    "start": "2767800",
    "end": "2773500"
  },
  {
    "text": "structure it's minus question mark remove the optionality from the members you could have written this yourself as well but you don't need to it's built into typescript it's called required",
    "start": "2773500",
    "end": "2780460"
  },
  {
    "text": "uh let's look at the next one which is pick okay",
    "start": "2780460",
    "end": "2787480"
  },
  {
    "text": "so we have a point 3D that has numbers X and Y and Z this is like reverse",
    "start": "2787480",
    "end": "2792880"
  },
  {
    "text": "inheritance you want to remove the members the member Z from this you only want to get the member X and Y from this",
    "start": "2792880",
    "end": "2798520"
  },
  {
    "text": "you could of course write that type yourself but wouldn't it be great if you could just use type magic to figure that out uh and that's where this comes in so",
    "start": "2798520",
    "end": "2805960"
  },
  {
    "text": "this is this is the correct answer I think yes pick this this is uh copilot doing his job it's saying",
    "start": "2805960",
    "end": "2813400"
  },
  {
    "text": "that hey take from how would you implement something like this I'll do just the mental thought",
    "start": "2813400",
    "end": "2820119"
  },
  {
    "text": "experiment you could say that hey give me all of the keys from x y and from point 3D which I'm taking as generic and",
    "start": "2820119",
    "end": "2827740"
  },
  {
    "text": "then only in fact if just those keys actually just only Loop through these keys that I'm",
    "start": "2827740",
    "end": "2832900"
  },
  {
    "text": "going to take as a second argument and for these Keys only in the result give me whatever was in point 3D and that's",
    "start": "2832900",
    "end": "2839500"
  },
  {
    "text": "what pick is going to be so you can see sort of over here uh it's saying that only Loop through",
    "start": "2839500",
    "end": "2845160"
  },
  {
    "text": "properties in case so normally we would do properties in whatever is the first type T we are saying no no take another",
    "start": "2845160",
    "end": "2851740"
  },
  {
    "text": "type for the keys and look only through that and then map them to the output and",
    "start": "2851740",
    "end": "2858220"
  },
  {
    "text": "there's also a generic constraint over here saying that the keys that I'm going to accept as the second argument they",
    "start": "2858220",
    "end": "2863260"
  },
  {
    "text": "must be the ones that exist within the first type so the only things that exist in this particular type that I'm passing in point three D is x y z so if I were",
    "start": "2863260",
    "end": "2869859"
  },
  {
    "text": "to for example pass in h over here it's going to be an error that's the pick type built in again you",
    "start": "2869859",
    "end": "2876819"
  },
  {
    "text": "could write this yourself now but you don't need to explain the type system",
    "start": "2876819",
    "end": "2881920"
  },
  {
    "text": "let's talk about exclude okay any questions about pick",
    "start": "2881920",
    "end": "2889780"
  },
  {
    "text": "sorry forgot to ask cool let's talk about exclude now the opposite of pick would be like omit",
    "start": "2889780",
    "end": "2896980"
  },
  {
    "text": "you want to just remove Z right but that's a bit hard before we talk about that I want to talk about another thing",
    "start": "2896980",
    "end": "2902680"
  },
  {
    "text": "called exclude exclude works with Union so there are actually two types and if you look at the type definition the",
    "start": "2902680",
    "end": "2908680"
  },
  {
    "text": "typescript docs it actually says exclude takes a type T Union it's designed to work with unions and more specifically",
    "start": "2908680",
    "end": "2915640"
  },
  {
    "text": "perhaps even unions of just literals we want to we have all the keys from point",
    "start": "2915640",
    "end": "2922060"
  },
  {
    "text": "TD and all is going to be the literal X Y and Z that's what the key of operator is going to do and we want to only get",
    "start": "2922060",
    "end": "2929560"
  },
  {
    "text": "X and Y and not Z so we want to exclude the key Z from the literal that exists",
    "start": "2929560",
    "end": "2935500"
  },
  {
    "text": "the little types that exist within all and that's why this type exists so exclude",
    "start": "2935500",
    "end": "2941260"
  },
  {
    "text": "from all just the member Z",
    "start": "2941260",
    "end": "2947619"
  },
  {
    "text": "now what's the what's the how does it do it it uses that never trick that we",
    "start": "2947619",
    "end": "2952720"
  },
  {
    "text": "talked about it's saying that hey take a type T and then if it is also",
    "start": "2952720",
    "end": "2959140"
  },
  {
    "text": "present in you then just remove it move it to never so it's going to go hey X so so for all X is going to come",
    "start": "2959140",
    "end": "2967480"
  },
  {
    "text": "in X is going to go does X is this within Z nope it's never um",
    "start": "2967480",
    "end": "2973780"
  },
  {
    "text": "sorry sorry X sorry so if it doesn't exist it's going to go into the else box which is actually T So X is actually",
    "start": "2973780",
    "end": "2978880"
  },
  {
    "text": "going to come in and it's going to go to t uh Y is going to come in and it's going to go to T So Y is going to be",
    "start": "2978880",
    "end": "2984220"
  },
  {
    "text": "mapped to my y but when Z is going to come and it's going to be like hey Z is extending Z so therefore it's going to",
    "start": "2984220",
    "end": "2990099"
  },
  {
    "text": "be mapped to never so therefore Z is going to get deleted in the output and we will only get X and Y so this is the exclude type as you can",
    "start": "2990099",
    "end": "2998140"
  },
  {
    "text": "see like it is programming but it's programming within syntax and it's so hard to come up with the programming",
    "start": "2998140",
    "end": "3003660"
  },
  {
    "text": "language that has these features built into the type system and they've done it over like",
    "start": "3003660",
    "end": "3010140"
  },
  {
    "text": "10 years or something to to realize that lookup types was added like seven years",
    "start": "3010140",
    "end": "3015240"
  },
  {
    "text": "ago and conditional types maybe three years ago it's like hey we have lookup types we could use",
    "start": "3015240",
    "end": "3021000"
  },
  {
    "text": "them for mapping the output and that's map types kind of things but yeah so",
    "start": "3021000",
    "end": "3028740"
  },
  {
    "text": "this is that and now that we have this we could actually write the thing that we were looking for we could write this",
    "start": "3028740",
    "end": "3035040"
  },
  {
    "text": "we wrote this with a pick right this um make a point to D by removing Z but",
    "start": "3035040",
    "end": "3040980"
  },
  {
    "text": "we're actually just picking X and Y what we could do is we could say hey pick everything except",
    "start": "3040980",
    "end": "3048599"
  },
  {
    "text": "Z from the key of that exists in point three D",
    "start": "3048599",
    "end": "3055619"
  },
  {
    "text": "but exclude the member Z from it and this would this would be fine this",
    "start": "3055619",
    "end": "3061260"
  },
  {
    "text": "is this is going to give us X and Y this is removing Z but of course you don't need to do this because this is what",
    "start": "3061260",
    "end": "3067680"
  },
  {
    "text": "omit does already so let me actually comment this out so you can sort of see that you could write this yourself but",
    "start": "3067680",
    "end": "3074099"
  },
  {
    "text": "you don't need to because you could say hey omit from point 3D",
    "start": "3074099",
    "end": "3079680"
  },
  {
    "text": "the member Z and if you look at the type definition format it's going to be what I sort of",
    "start": "3079680",
    "end": "3087420"
  },
  {
    "text": "wrote which is um yeah so pick from tea but exclude the",
    "start": "3087420",
    "end": "3093480"
  },
  {
    "text": "things that exist also within the other thing kind of thing this weird thing that we wrote but you don't need to write this umit is your friend but you",
    "start": "3093480",
    "end": "3099839"
  },
  {
    "text": "understand how this works now uh any questions about this",
    "start": "3099839",
    "end": "3105119"
  },
  {
    "text": "okay so we have nine more minutes let's talk about non nullable",
    "start": "3105119",
    "end": "3111180"
  },
  {
    "text": "uh honestly this is going to be a weird one so we have string or null or undefined",
    "start": "3111180",
    "end": "3118020"
  },
  {
    "text": "we have yeah that's literally what's on the other side of this and we could",
    "start": "3118020",
    "end": "3123300"
  },
  {
    "text": "definitely exclude null or undefined so that's the objective with non-renewable you want to remove things that are knowledgeable honestly I wish they",
    "start": "3123300",
    "end": "3128760"
  },
  {
    "text": "called it non-nullish knowledge like knowledge coalescing is an operator knowledge is the term that JavaScript",
    "start": "3128760",
    "end": "3134300"
  },
  {
    "text": "has formalized it means null or undefined so non-nullable nullable is",
    "start": "3134300",
    "end": "3140160"
  },
  {
    "text": "essentially nullish within JavaScript they really roll off the tongue don't they understand people get but yeah so",
    "start": "3140160",
    "end": "3148380"
  },
  {
    "text": "non-allible remove null or undefined we can write this we can take an input type we can remove null and undefined from",
    "start": "3148380",
    "end": "3154619"
  },
  {
    "text": "this and this would for this thing that has string or null or undefined we only get string but the type definition for non-nulliver",
    "start": "3154619",
    "end": "3161700"
  },
  {
    "text": "is a bit different you saw that for a second I'm going to hide it again let but it's the way it works is an",
    "start": "3161700",
    "end": "3167940"
  },
  {
    "text": "interesting dive into typescript itself as well uh we have a union here of things that have four of type number and",
    "start": "3167940",
    "end": "3174540"
  },
  {
    "text": "bar of type number and we can of course intersect the union but when you intersect a union with something else",
    "start": "3174540",
    "end": "3180240"
  },
  {
    "text": "what you're actually going to get is another loop so you're going to get Foo of type number that also has Bears of",
    "start": "3180240",
    "end": "3187079"
  },
  {
    "text": "type number and then bar of type number that also has Bears of type number so this is going to actually expand into",
    "start": "3187079",
    "end": "3193559"
  },
  {
    "text": "the all the things that might combine with this Union with this single type so of course there's two in the union and",
    "start": "3193559",
    "end": "3199500"
  },
  {
    "text": "one over here so it's going to be two types 21. so you can see that over here that",
    "start": "3199500",
    "end": "3204540"
  },
  {
    "text": "like here's an example of this email intersection you have four unpairs if you for example miss something is going to be error over here",
    "start": "3204540",
    "end": "3210780"
  },
  {
    "text": "so that's how the and operator the intersection works when you intersect with the Union",
    "start": "3210780",
    "end": "3217559"
  },
  {
    "text": "now there's something encoded into the typescript's brain that when you intersect with certain types it does",
    "start": "3217559",
    "end": "3222660"
  },
  {
    "text": "certain things what you saw over there with the string and a little was actually an example of that as well it's",
    "start": "3222660",
    "end": "3228000"
  },
  {
    "text": "it's encoded that when you do a string and a literal it's going to resolve to the literal because that's the thing",
    "start": "3228000",
    "end": "3233640"
  },
  {
    "text": "that's common between them rather than the expansion like combine the properties intersection version that",
    "start": "3233640",
    "end": "3239400"
  },
  {
    "text": "we've been looking at so for a null Union with an object this is actually encoded in typescript's main as the base",
    "start": "3239400",
    "end": "3246660"
  },
  {
    "text": "type of all things that are all not null and undefined so for a null with an object it actually",
    "start": "3246660",
    "end": "3254460"
  },
  {
    "text": "returns never this is encoded in typescript mean that hey if you end with",
    "start": "3254460",
    "end": "3259980"
  },
  {
    "text": "an object and now I'm going to give you never if you end with an object in undefined I'm going to give you never",
    "start": "3259980",
    "end": "3266280"
  },
  {
    "text": "and therefore if you end with an object a null or undefined what's going to happen is going to be null or object so",
    "start": "3266280",
    "end": "3273540"
  },
  {
    "text": "null and object followed by or null and object the first null and",
    "start": "3273540",
    "end": "3279359"
  },
  {
    "text": "object is going to resolve to never so never or undefined an object never so",
    "start": "3279359",
    "end": "3284760"
  },
  {
    "text": "it's never or never so never so that's that's the output and if you",
    "start": "3284760",
    "end": "3289920"
  },
  {
    "text": "have for example a value that is going to be nice over here as well it's going to be never or never or",
    "start": "3289920",
    "end": "3296400"
  },
  {
    "text": "string because string an object is actually again encoded with the type statement to give you string because",
    "start": "3296400",
    "end": "3301800"
  },
  {
    "text": "it's the object is the base type for this and that's what we get and that's actually what the definition is for",
    "start": "3301800",
    "end": "3307980"
  },
  {
    "text": "non-nullable it actually takes the type T and if you pass in a union it's going to do the loop of course and intersects",
    "start": "3307980",
    "end": "3313680"
  },
  {
    "text": "it with object uh this has some interesting artifacts uh that this is actually a better",
    "start": "3313680",
    "end": "3319619"
  },
  {
    "text": "definition than what I wrote but uh that will get very weird so just use the non-nullable built-in type is the lesson",
    "start": "3319619",
    "end": "3326640"
  },
  {
    "text": "I can give you okay let's look at one more type",
    "start": "3326640",
    "end": "3332180"
  },
  {
    "text": "return type so you want to create a dependency between two things for",
    "start": "3332280",
    "end": "3338099"
  },
  {
    "text": "example create user and you don't get too lazy you're like I hit typescript I don't want to use type annotations isn't",
    "start": "3338099",
    "end": "3344339"
  },
  {
    "text": "there a way I could infer this hey I like when I hover over this I can see its ID and name do I have to really",
    "start": "3344339",
    "end": "3349859"
  },
  {
    "text": "write it you don't you need to first get the type of create user we know how to",
    "start": "3349859",
    "end": "3355920"
  },
  {
    "text": "do that so take a variable and inference type so type of create user this will be what the type is for this function we",
    "start": "3355920",
    "end": "3363180"
  },
  {
    "text": "can however it as well it's going to be a function that takes a name String and returns these things but what you want",
    "start": "3363180",
    "end": "3368220"
  },
  {
    "text": "to create for the type user is this return type right so there's actually a",
    "start": "3368220",
    "end": "3373680"
  },
  {
    "text": "type utility within typescript for this called return type that does this thing takes a type that",
    "start": "3373680",
    "end": "3380099"
  },
  {
    "text": "is of a function and returns its inferred return type how does it work I sort of gave that away infers it so",
    "start": "3380099",
    "end": "3387359"
  },
  {
    "text": "return time is a type utility that enforces that you must pass it a function of course that's what this is",
    "start": "3387359",
    "end": "3392640"
  },
  {
    "text": "doing I don't get how many arguments this function takes it must be a function that returns something and now if it returns something whatever",
    "start": "3392640",
    "end": "3400380"
  },
  {
    "text": "it infers like whatever it returns infer that result and return that result",
    "start": "3400380",
    "end": "3406079"
  },
  {
    "text": "otherwise this is going to be ruled out by the generic constraint anyways you're never able to pass in so I'm just going",
    "start": "3406079",
    "end": "3411180"
  },
  {
    "text": "to put in any that like programmers have bad days as well but this this case is",
    "start": "3411180",
    "end": "3416280"
  },
  {
    "text": "never going to happen for for a function that that extends this it's like it's like the default case you've all seen",
    "start": "3416280",
    "end": "3422400"
  },
  {
    "text": "that default throw exceptions I don't know what happened wrong this any is that default case um but yeah so if it extends in a",
    "start": "3422400",
    "end": "3429839"
  },
  {
    "text": "function infer its result and return that and that that's how we magically get the return type of a function using",
    "start": "3429839",
    "end": "3435599"
  },
  {
    "text": "this return type type utility function generic function I just like adding",
    "start": "3435599",
    "end": "3440760"
  },
  {
    "text": "things to things um I do not it's a killing time there's",
    "start": "3440760",
    "end": "3446640"
  },
  {
    "text": "another use case for this if you've done react programming components often provide hooks that are designed to use",
    "start": "3446640",
    "end": "3451680"
  },
  {
    "text": "the component and these hooks are designed to be the props for the component for example this use counter",
    "start": "3451680",
    "end": "3457200"
  },
  {
    "text": "is ah going to return an encounter an increment and that's going to be the process for the counter component you",
    "start": "3457200",
    "end": "3462480"
  },
  {
    "text": "could do of course return type let's see if GitHub yes it's sort of",
    "start": "3462480",
    "end": "3469260"
  },
  {
    "text": "done it but another you like you're also learning it by the way that was a side point even though I don't get paid for",
    "start": "3469260",
    "end": "3475200"
  },
  {
    "text": "it I'm not a Microsoft employee um it does the",
    "start": "3475200",
    "end": "3480720"
  },
  {
    "text": "camel casing it does linguistic analysis so it actually doesn't understand the difference between this and this so",
    "start": "3480720",
    "end": "3486180"
  },
  {
    "text": "it'll actually quite commonly write the wrong case but yeah so return type for type of use counter will give us the",
    "start": "3486180",
    "end": "3491520"
  },
  {
    "text": "count and the increment raise your hand if you use GitHub Co palette that's an interesting one",
    "start": "3491520",
    "end": "3496920"
  },
  {
    "text": "ah cool nice a few people have",
    "start": "3496920",
    "end": "3502500"
  },
  {
    "text": "um do you normally leave it on or do you leave it off I haven't decided cool that's where I'm",
    "start": "3502500",
    "end": "3509700"
  },
  {
    "text": "as well as well sometimes I'm like just just stop just stop just just I said one",
    "start": "3509700",
    "end": "3514920"
  },
  {
    "text": "person it's like Google it's like did you mean to search for no I did not um which is why I don't do Google",
    "start": "3514920",
    "end": "3520740"
  },
  {
    "text": "searches on stage um okay we could uh create this like Maps",
    "start": "3520740",
    "end": "3528240"
  },
  {
    "text": "type ourself as well for this wrapped thing that we saw and this would actually sort of combine let's let's uh",
    "start": "3528240",
    "end": "3535079"
  },
  {
    "text": "C type wrapped result of type T is going to",
    "start": "3535079",
    "end": "3543660"
  },
  {
    "text": "yeah see that's exactly what I wanted let me break this down uh",
    "start": "3543660",
    "end": "3551940"
  },
  {
    "text": "not break my laptop break down this type so this is like for for an object for",
    "start": "3551940",
    "end": "3558599"
  },
  {
    "text": "all the keys if it's an object put in an object wrapper otherwise if it if the thing is an array put in an array wrapper that that's the block that we",
    "start": "3558599",
    "end": "3564960"
  },
  {
    "text": "have over here and I've tried to create this wrap result for this and what I'm saying over here is I don't actually",
    "start": "3564960",
    "end": "3571500"
  },
  {
    "text": "need the inferred result of you yes I do actually um",
    "start": "3571500",
    "end": "3576720"
  },
  {
    "text": "for all of the keys in input ID this is me writing the same code that I've written in JavaScript but explaining",
    "start": "3576720",
    "end": "3581819"
  },
  {
    "text": "that to typescript doing that in typescript's mind what's supposed to happen so for all of the keys in input type T if it is an array this this array",
    "start": "3581819",
    "end": "3588720"
  },
  {
    "text": "dot is array condition then infer what is in that array and then create a wrapper for that member",
    "start": "3588720",
    "end": "3595980"
  },
  {
    "text": "we've looked at this unwrapped array before so create an array wrapper for that otherwise if it's an object just",
    "start": "3595980",
    "end": "3601920"
  },
  {
    "text": "create a wrapper around the whole object that's what's being done over here and what we're saying over here yes is the",
    "start": "3601920",
    "end": "3609599"
  },
  {
    "text": "wrapped result and that's the end of it yes",
    "start": "3609599",
    "end": "3615420"
  },
  {
    "text": "and I think that's it sport",
    "start": "3615420",
    "end": "3622818"
  },
  {
    "text": "y What's missing it's missing uh n bracket",
    "start": "3623460",
    "end": "3630299"
  },
  {
    "text": "oh yes you're correct perfect see uh it all made sense thank you very much",
    "start": "3630299",
    "end": "3636480"
  },
  {
    "text": "for coming uh you can find me by Googling my name I will sell YouTube channel that's what I'm wasting most of",
    "start": "3636480",
    "end": "3642119"
  },
  {
    "text": "my time nowadays enjoy NDC [Applause]",
    "start": "3642119",
    "end": "3649940"
  }
]