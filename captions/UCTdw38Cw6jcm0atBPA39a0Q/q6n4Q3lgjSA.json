[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "[Music] okay I'm gonna get going because I've got quite a lot to say and there's just",
    "start": "0",
    "end": "6150"
  },
  {
    "text": "a little bit of time so maybe they'll still be a few people to show up but I'm gonna get going so what I want to talk",
    "start": "6150",
    "end": "14670"
  },
  {
    "text": "about is sick comp you can hear me fine down the back yep good sick comp it's a",
    "start": "14670",
    "end": "23490"
  },
  {
    "start": "19000",
    "end": "29000"
  },
  {
    "text": "facility for limiting the set of system calls and applications allowed to make",
    "start": "23490",
    "end": "29630"
  },
  {
    "start": "29000",
    "end": "146000"
  },
  {
    "text": "and the point is the kernel provides around about 400 different system calls",
    "start": "29630",
    "end": "36239"
  },
  {
    "text": "there is a manual page called syscalls where you can see that list of system calls the way most programmers think",
    "start": "36239",
    "end": "45510"
  },
  {
    "text": "about system calls is it's a way of asking the kernel to get something done the way attackers think about system",
    "start": "45510",
    "end": "52020"
  },
  {
    "text": "calls is this is one more way I might try and compromise the system and the",
    "start": "52020",
    "end": "59640"
  },
  {
    "text": "thing is though there's about 400 different system calls most programs only use a small set of those system",
    "start": "59640",
    "end": "65549"
  },
  {
    "text": "calls it would be really typical that our probe the the average program would",
    "start": "65549",
    "end": "70740"
  },
  {
    "text": "use less than 40 40 system calls in its life 40 different system calls in its",
    "start": "70740",
    "end": "76110"
  },
  {
    "text": "lifetime so less than 10% of the available system calls those other",
    "start": "76110",
    "end": "83729"
  },
  {
    "text": "system calls if the program makes those system calls then somehow this is",
    "start": "83729",
    "end": "89930"
  },
  {
    "text": "unexpected illegitimate perhaps it's happening because the program's been compromised and tripped into executing",
    "start": "89930",
    "end": "98720"
  },
  {
    "text": "unexpected code which so then we know",
    "start": "98720",
    "end": "103770"
  },
  {
    "text": "that something's wrong and if the program's try and make those sort of unexpected the system calls we want to",
    "start": "103770",
    "end": "108930"
  },
  {
    "text": "stop it from doing that and that's what sitcoms about it's a mechanism for",
    "start": "108930",
    "end": "114659"
  },
  {
    "text": "stopping programs making illegitimate unexpected system calls and the idea",
    "start": "114659",
    "end": "121409"
  },
  {
    "text": "then is because you've limited the set of system calls that an application is allowed to make you've effectively",
    "start": "121409",
    "end": "128069"
  },
  {
    "text": "reduced the attack surface on your kernel now now our compromised application",
    "start": "128069",
    "end": "133620"
  },
  {
    "text": "can't be used to try out all of those other system calls to see can we do",
    "start": "133620",
    "end": "138840"
  },
  {
    "text": "something that makes the system do a do something unexpected somehow achieve a",
    "start": "138840",
    "end": "144390"
  },
  {
    "text": "compromise okay sitcoms actually been around for a long",
    "start": "144390",
    "end": "150720"
  },
  {
    "start": "146000",
    "end": "270000"
  },
  {
    "text": "time it was the first version of sitcom was back in 2005 and the way you enabled",
    "start": "150720",
    "end": "159270"
  },
  {
    "text": "it was to write one into a certain proc Pig file but what what we had back there",
    "start": "159270",
    "end": "165150"
  },
  {
    "text": "at the Beeman was a very limited form of set comp filtering basically you wrote",
    "start": "165150",
    "end": "170220"
  },
  {
    "text": "one unto that file and after that the program could make a total of four",
    "start": "170220",
    "end": "175380"
  },
  {
    "text": "different system calls and only those four read and write so you could read",
    "start": "175380",
    "end": "180450"
  },
  {
    "text": "and write files exits so the process could terminate and sig returned a cigarette owns a special system call",
    "start": "180450",
    "end": "186750"
  },
  {
    "text": "that's used in the implementation of signal handlers so in summary you could do file i/o but you couldn't actually",
    "start": "186750",
    "end": "192660"
  },
  {
    "text": "open files you can only do file IO IO on files that had already been opened",
    "start": "192660",
    "end": "198090"
  },
  {
    "text": "before we were to set comm know you could terminate and you could catch",
    "start": "198090",
    "end": "203489"
  },
  {
    "text": "signals made any other system call then the program was killed with a cig kill",
    "start": "203489",
    "end": "211140"
  },
  {
    "text": "signal now the original intention here was actually something quite different to put the theory the kernel developer",
    "start": "211140",
    "end": "218670"
  },
  {
    "text": "added this feature to the kernel had the idea of creating a marketplace in CPU cycles in other words you know you've",
    "start": "218670",
    "end": "225420"
  },
  {
    "text": "got some spare cycles on your machine you could say to people on the Internet hey I'll run code of yours on my machine",
    "start": "225420",
    "end": "232860"
  },
  {
    "text": "you can give me a little bit of money some sort of micro payment maybe and I'm",
    "start": "232860",
    "end": "237870"
  },
  {
    "text": "gonna run that code inside a sandbox that employs set comm and you could run",
    "start": "237870",
    "end": "243030"
  },
  {
    "text": "that code on your machine and feel feel fairly safe that it couldn't do any",
    "start": "243030",
    "end": "249060"
  },
  {
    "text": "damage on your machine because the code couldn't open new files it couldn't do",
    "start": "249060",
    "end": "254160"
  },
  {
    "text": "just about anything except read and write existing files and terminate and catch signals that that was the original",
    "start": "254160",
    "end": "262289"
  },
  {
    "text": "idea this didn't really take off this idea of selling your CPU",
    "start": "262289",
    "end": "268800"
  },
  {
    "text": "cycles but that was the original idea now things started to get interesting",
    "start": "268800",
    "end": "275129"
  },
  {
    "start": "270000",
    "end": "315000"
  },
  {
    "text": "only a few years later in Linux 3.5 2012 when there was a new sink comp mode",
    "start": "275129",
    "end": "282599"
  },
  {
    "text": "added called filter mode now this was such a radical change that often times",
    "start": "282599",
    "end": "288620"
  },
  {
    "text": "this version of set comp was called sent comp 2 because it was such a radical",
    "start": "288620",
    "end": "293849"
  },
  {
    "text": "expansion and the functionality and the way you enabled this the set comp",
    "start": "293849",
    "end": "300810"
  },
  {
    "text": "filtering is with a certain system called PR CTL it's one of these horrible multiplex system calls that does many",
    "start": "300810",
    "end": "307949"
  },
  {
    "text": "things to processors and one of the things you can do is say oh I want to have a set comp filter now you can",
    "start": "307949",
    "end": "318180"
  },
  {
    "start": "315000",
    "end": "439000"
  },
  {
    "text": "choose which system calls the applications going to be allowed to make or which ones are going to be disallowed",
    "start": "318180",
    "end": "324210"
  },
  {
    "text": "so you no longer restrict it to a fixed set of 4 system calls you can actually design a filter that say this programs",
    "start": "324210",
    "end": "330060"
  },
  {
    "text": "allowed to make this set of system calls or its disallowed from making this set of system calls people had wanted this",
    "start": "330060",
    "end": "338969"
  },
  {
    "text": "facility for quite a long time before this was actually implement and there were several proposals to implement this",
    "start": "338969",
    "end": "344879"
  },
  {
    "text": "feature or it's or implement system call limitation in the kernel over the years",
    "start": "344879",
    "end": "351000"
  },
  {
    "text": "and they were all rejected by kernel developers as being overly complicated or perhaps too difficult to maintain and",
    "start": "351000",
    "end": "359150"
  },
  {
    "text": "so there was already by this time a lot of interests in having a feature like",
    "start": "359150",
    "end": "364710"
  },
  {
    "text": "this and once the feature was added a whole lot of applications started using",
    "start": "364710",
    "end": "370169"
  },
  {
    "text": "it pretty smartly so the web browsers are using it to do things like sandbox",
    "start": "370169",
    "end": "375599"
  },
  {
    "text": "rendering processes OpenSSH even users I'm not even sure why there's even some",
    "start": "375599",
    "end": "381150"
  },
  {
    "text": "ftp daemons that use it system do use a",
    "start": "381150",
    "end": "386159"
  },
  {
    "text": "system do use everything",
    "start": "386159",
    "end": "390379"
  },
  {
    "text": "they really do they love to find what they can use things like the container",
    "start": "391310",
    "end": "398460"
  },
  {
    "text": "frameworks died using sent comp among many other things and then this tools",
    "start": "398460",
    "end": "404820"
  },
  {
    "text": "like flat pack and fire gel which are pretty interesting tools if you don't know about them I suggest it's worth",
    "start": "404820",
    "end": "411150"
  },
  {
    "text": "investigating them fire jail is a sort of generalized sandboxing mechanism that",
    "start": "411150",
    "end": "417900"
  },
  {
    "text": "you can use to run some arbitrary application or some standard application with a prepackaged set of farm",
    "start": "417900",
    "end": "426260"
  },
  {
    "text": "sandboxing rules flat pack is a kind of package kind of packaging mechanism",
    "start": "426260",
    "end": "433380"
  },
  {
    "text": "where you can create packages that can be run on any distribution in effect",
    "start": "433380",
    "end": "439880"
  },
  {
    "start": "439000",
    "end": "482000"
  },
  {
    "text": "works still going on on set comp there's even in recent times there's been quite",
    "start": "440030",
    "end": "445860"
  },
  {
    "text": "a bit of development but in 2014 one of the other new features that one of the",
    "start": "445860",
    "end": "450870"
  },
  {
    "text": "earth new details that appeared was there was a new system call added called sync comp",
    "start": "450870",
    "end": "456810"
  },
  {
    "text": "now sitcom effectively takes the multiplexed piece out of PR CTL puts it",
    "start": "456810",
    "end": "463470"
  },
  {
    "text": "in its own system call and at the same time the motivation for adding the system call was we're gonna add some new",
    "start": "463470",
    "end": "469050"
  },
  {
    "text": "functionality as well so nowadays you can set up set comfortables using either PR CPL or you can use CENTCOM and get a",
    "start": "469050",
    "end": "476760"
  },
  {
    "text": "few more features while you do it okay",
    "start": "476760",
    "end": "483140"
  },
  {
    "start": "482000",
    "end": "638000"
  },
  {
    "text": "so when we're doing second filtering what you're doing is filtering of system",
    "start": "483140",
    "end": "489540"
  },
  {
    "text": "calls based on the system call number in the system call arguments now there's",
    "start": "489540",
    "end": "497550"
  },
  {
    "text": "one point that's I want to bring out here you can check on the system call",
    "start": "497550",
    "end": "502620"
  },
  {
    "text": "number you can check on the arguments what you're looking at here is the register values if those registers",
    "start": "502620",
    "end": "508770"
  },
  {
    "text": "contain pointers you can't dereference the pointers obviously it might be an",
    "start": "508770",
    "end": "514440"
  },
  {
    "text": "interesting thing that you might want to do it's currently not possible you can look at the values of the arguments",
    "start": "514440",
    "end": "520349"
  },
  {
    "text": "themselves the values and the registers there someone is working on trying to extend",
    "start": "520349",
    "end": "526490"
  },
  {
    "text": "this feature because if you have a pointer argument that perhaps points to a path name it might be quite",
    "start": "526490",
    "end": "532100"
  },
  {
    "text": "interesting to dereference that path name and and see what the path name is as part of your filtering can't do that",
    "start": "532100",
    "end": "539540"
  },
  {
    "text": "yet there is someone working on it they've been working on it for about two years it's quite a big piece of work to",
    "start": "539540",
    "end": "544610"
  },
  {
    "text": "get into the kernel so it is taking your while of course we can't be sure it'll get there but yeah the work keeps going",
    "start": "544610",
    "end": "552139"
  },
  {
    "text": "I think it'll get there one day now how do we do this the first thing we",
    "start": "552139",
    "end": "559790"
  },
  {
    "text": "do is we construct a filter program which is basically just some binary instructions in our inside our C program",
    "start": "559790",
    "end": "566570"
  },
  {
    "text": "or or whatever else this this this filter program is expressed in a certain",
    "start": "566570",
    "end": "572360"
  },
  {
    "text": "kind of syntax called berkeley packet filter syntax i'll come back to and look at it in more detail in a moment then",
    "start": "572360",
    "end": "579170"
  },
  {
    "text": "you install the filter into the kernel using either the set comp or the PRC GL",
    "start": "579170",
    "end": "586130"
  },
  {
    "text": "system call and then you execute some code that you don't necessarily trust",
    "start": "586130",
    "end": "592730"
  },
  {
    "text": "okay you exec a new program or perhaps you've dynamically loaded a shared library in other words some sort of",
    "start": "592730",
    "end": "598699"
  },
  {
    "text": "plugin functionality and you are going to now execute some code out of there",
    "start": "598699",
    "end": "604370"
  },
  {
    "text": "plugin once you've done that now every",
    "start": "604370",
    "end": "610220"
  },
  {
    "text": "system call that the process makes is going to be tested against that filter",
    "start": "610220",
    "end": "615430"
  },
  {
    "text": "to see is this system call allowed or not once you've installed that filter",
    "start": "615430",
    "end": "622130"
  },
  {
    "text": "you can't remove it when you think about what we're doing here we're about to execute untrusted code we don't want the",
    "start": "622130",
    "end": "628910"
  },
  {
    "text": "untrusted code to actually remove the controls that are being placed on it so",
    "start": "628910",
    "end": "634279"
  },
  {
    "text": "installing set con filters is is permanent now these sitcom filters they're",
    "start": "634279",
    "end": "642680"
  },
  {
    "text": "expressed in Berkeley packet filter syntax both at Berkeley packet filter",
    "start": "642680",
    "end": "648790"
  },
  {
    "text": "programs it's quite likely that even if you've never heard of SEC comp or never",
    "start": "648790",
    "end": "654470"
  },
  {
    "text": "done anything much with a sitcom the heard of BPF because BPF has been around",
    "start": "654470",
    "end": "659690"
  },
  {
    "text": "for a long long time on Linux it's been one salary Fraser now it's been around just generally since 1992 and the reason",
    "start": "659690",
    "end": "667310"
  },
  {
    "text": "it appeared is because it was used by TCP dump",
    "start": "667310",
    "end": "672340"
  },
  {
    "text": "now what TCP dump is does for you is let you look at packets from the network the",
    "start": "672340",
    "end": "679790"
  },
  {
    "text": "the notable feature about network traffic of course is there's a lot of it",
    "start": "679790",
    "end": "685070"
  },
  {
    "text": "and usually you only want to look at some small piece of it the conversation",
    "start": "685070",
    "end": "690560"
  },
  {
    "text": "going on between two endpoints so what TCP dump needs to do is some filtering",
    "start": "690560",
    "end": "696620"
  },
  {
    "text": "so it shows you just the packets that are relevant for you and so there's a",
    "start": "696620",
    "end": "704570"
  },
  {
    "text": "lot of packets to be filtered now I don't know how to CP dump dump did it back in the mists of time in the very",
    "start": "704570",
    "end": "710090"
  },
  {
    "text": "beginning but one theoretical implementation for TCP dump would be the",
    "start": "710090",
    "end": "715690"
  },
  {
    "text": "program puts the network interface into promiscuous mode just grabs all the packets off the network and then looks",
    "start": "715690",
    "end": "723140"
  },
  {
    "text": "at those packets that have got into user space and decide which packets are interesting according to what the user",
    "start": "723140",
    "end": "729230"
  },
  {
    "text": "specified the problem with doing that is simply the act of pumping all those",
    "start": "729230",
    "end": "735680"
  },
  {
    "text": "packets across the kernel user space boundary would would puts a very high",
    "start": "735680",
    "end": "740690"
  },
  {
    "text": "load on the system just that transfer of data is very expensive so what BPF does",
    "start": "740690",
    "end": "748310"
  },
  {
    "text": "is allow what BP if allowed TCP dump to do was to put a filter inside the kernel",
    "start": "748310",
    "end": "753590"
  },
  {
    "text": "and that filter made some decisions about which packets were interesting by looking at the network headers and then",
    "start": "753590",
    "end": "760010"
  },
  {
    "text": "if the filter said yes that packet is interesting then the kernel transfer to",
    "start": "760010",
    "end": "765170"
  },
  {
    "text": "the cross the kernel user space boundary so now there was only a small amount of",
    "start": "765170",
    "end": "770180"
  },
  {
    "text": "impatient information coming across the kernel use the space boundary much less load on the system",
    "start": "770180",
    "end": "777190"
  },
  {
    "start": "778000",
    "end": "948000"
  },
  {
    "text": "okay so BPF what it's doing in effect is",
    "start": "778000",
    "end": "783740"
  },
  {
    "text": "to define a virtual machine and that virtual machines implemented inside the kernel the virtual machine has a few",
    "start": "783740",
    "end": "790010"
  },
  {
    "text": "notable characteristics it's got a very simple instruction set there's only a small set of instructions they're all",
    "start": "790010",
    "end": "795830"
  },
  {
    "text": "the same size this means that for the kernel to implement that virtual machine it's it's",
    "start": "795830",
    "end": "800930"
  },
  {
    "text": "it can be done simply and the implementation can be fast",
    "start": "800930",
    "end": "806350"
  },
  {
    "text": "there are jump instructions branch instructions inside BPF programs but the",
    "start": "806350",
    "end": "811640"
  },
  {
    "text": "only thing you can do is jump forward in the code so you know that the program is",
    "start": "811640",
    "end": "817400"
  },
  {
    "text": "going to terminate you know we these BPF programs being constructed by from user",
    "start": "817400",
    "end": "822980"
  },
  {
    "text": "space and they're being put into the kernel we certainly wouldn't want to have BPF being able to be used as a",
    "start": "822980",
    "end": "829400"
  },
  {
    "text": "mechanism to attack the kernel itself if we could put a program side the kernel that had a loop and created some sort of",
    "start": "829400",
    "end": "835640"
  },
  {
    "text": "denial of service attack against the kernel itself you can't do that with BPF because you can only branch forward what",
    "start": "835640",
    "end": "846770"
  },
  {
    "text": "this means is the kernel can do a lot of checks to make sure that programs are valid and safe the colonel knows every",
    "start": "846770",
    "end": "853520"
  },
  {
    "text": "program is going to complete it's because of directed ASIC acyclic graph it only goes forward the instruction set",
    "start": "853520",
    "end": "859880"
  },
  {
    "text": "is simple so the kernel can easily and quickly verify the operation codes and",
    "start": "859880",
    "end": "865550"
  },
  {
    "text": "their arguments the kernel can even do things like detecting dead code with the some block of code and the BPF program",
    "start": "865550",
    "end": "871670"
  },
  {
    "text": "where there's a jump over that code but no jump into the code if you try and load a program like that a BPF program",
    "start": "871670",
    "end": "878630"
  },
  {
    "text": "like that into the kernel the kernel rejects it and says this is invalid one",
    "start": "878630",
    "end": "885170"
  },
  {
    "text": "of the other things that the kernel can do is verify that every pathway out of the code completes with a return",
    "start": "885170",
    "end": "891560"
  },
  {
    "text": "instruction and a return instruction is the way the BPF program tells the kernel",
    "start": "891560",
    "end": "896840"
  },
  {
    "text": "do I like what I saw or not and then the kernel can use that information to make",
    "start": "896840",
    "end": "903110"
  },
  {
    "text": "it make a decision about what to do now back in the days of TCP dump the the",
    "start": "903110",
    "end": "909350"
  },
  {
    "text": "return instruction was an effect telling the kernel do we pass the network packet",
    "start": "909350",
    "end": "914450"
  },
  {
    "text": "across the kernel users based boundary or not but with sitcom what it's doing is saying are we going to allow this",
    "start": "914450",
    "end": "921170"
  },
  {
    "text": "system call to proceed or not there's a limitation on the size",
    "start": "921170",
    "end": "929340"
  },
  {
    "text": "of BPF programs 4k of instructions it seems to be Moe enough to keep most people happy",
    "start": "929340",
    "end": "934650"
  },
  {
    "text": "in fact what we'll come to later on is you can install multiple BPA BPA filters",
    "start": "934650",
    "end": "940950"
  },
  {
    "text": "and you can have up to 32 K of instructions in total across all the BPA",
    "start": "940950",
    "end": "946320"
  },
  {
    "text": "filters okay so we've got this notion in",
    "start": "946320",
    "end": "951720"
  },
  {
    "start": "948000",
    "end": "1038000"
  },
  {
    "text": "of the virtual machine it's got some instructions this virtual machine has a few characteristics it's got an accumulator register where you do",
    "start": "951720",
    "end": "958490"
  },
  {
    "text": "operations with various virtual machine instructions it's a 32 bit accumulator",
    "start": "958490",
    "end": "964530"
  },
  {
    "text": "there's a data area the data area is information that can be used by the by",
    "start": "964530",
    "end": "972360"
  },
  {
    "text": "the BPF program back in TCP dump days or when we'll be using TCP dump the data is",
    "start": "972360",
    "end": "978810"
  },
  {
    "text": "actually the network packet header when it comes to system calls the data area",
    "start": "978810",
    "end": "984960"
  },
  {
    "text": "is information about the system call letters to say things like the system call number and the system call",
    "start": "984960",
    "end": "990750"
  },
  {
    "text": "arguments there's instructions for this virtual machine there are all as I",
    "start": "990750",
    "end": "996750"
  },
  {
    "text": "mentioned 64 bits long there's a fixed format expressed in C and this is a",
    "start": "996750",
    "end": "1003470"
  },
  {
    "text": "definition out of the header files that the the instructions all look like this and you can see here the structure",
    "start": "1003470",
    "end": "1009800"
  },
  {
    "text": "that's used to express this is called sock filter this tells us about the networking origins of BPS socket filter",
    "start": "1009800",
    "end": "1016630"
  },
  {
    "text": "there's a 16 bit opcode down at the end there's a 32 bit operand and then",
    "start": "1016630",
    "end": "1023270"
  },
  {
    "text": "there's two offsets that are used in jump instructions you can have a jump",
    "start": "1023270",
    "end": "1028730"
  },
  {
    "text": "true on a conditional and a jump false on a conditional and you can have an offset of up to 255 bytes when you do",
    "start": "1028730",
    "end": "1037220"
  },
  {
    "text": "these jumps it's it's a virtual machine that gives you the sort of things you'd",
    "start": "1037220",
    "end": "1043339"
  },
  {
    "text": "expect out of a simple assembler you've got load instructions",
    "start": "1043340",
    "end": "1049310"
  },
  {
    "text": "there's store instructions where you can store information into some working memory space that's available to you",
    "start": "1049310",
    "end": "1057169"
  },
  {
    "text": "one thing identify headed on a slide already one thing about BPF programs is",
    "start": "1057169",
    "end": "1062629"
  },
  {
    "text": "you can use them to inspect system calls in their arguments you can't change the",
    "start": "1062629",
    "end": "1069259"
  },
  {
    "text": "system calls and their arguments there's a jump instruction for jumping to",
    "start": "1069259",
    "end": "1075440"
  },
  {
    "text": "another an unconditional jump instruction there's sorry there's conditional and",
    "start": "1075440",
    "end": "1081259"
  },
  {
    "text": "unconditional jump instructions there's the usual sort of arithmetic and logic instructions you know shift add XOR and",
    "start": "1081259",
    "end": "1090080"
  },
  {
    "text": "so on the sort of things you'd expect and then there's these return",
    "start": "1090080",
    "end": "1095090"
  },
  {
    "text": "instructions these were the return instruction terminates processing of the filter and give some information to back",
    "start": "1095090",
    "end": "1101480"
  },
  {
    "text": "to the kernel saying what do we think about the system call is it good or is it bad so we've got conditional",
    "start": "1101480",
    "end": "1110659"
  },
  {
    "start": "1107000",
    "end": "1179000"
  },
  {
    "text": "unconditional jump instructions the conditional jump instructions they consist of an opcode the opcode says",
    "start": "1110659",
    "end": "1117139"
  },
  {
    "text": "what kind of test do we want to do equal less then not equal and so on a value",
    "start": "1117139",
    "end": "1122720"
  },
  {
    "text": "that we want to test against and then as I mentioned already to jump targets you",
    "start": "1122720",
    "end": "1128899"
  },
  {
    "text": "know if the condition tests true jump by this number by this number of instructions if the condition is false",
    "start": "1128899",
    "end": "1135190"
  },
  {
    "text": "jump by a different number of instructions and we've got instructions",
    "start": "1135190",
    "end": "1141529"
  },
  {
    "text": "the sort of expected stuff like jump equal is the value in the accumulator equal to a certain value jump greater",
    "start": "1141529",
    "end": "1148250"
  },
  {
    "text": "than jump greater than or equal jump set do a bit test ah some bits in the",
    "start": "1148250",
    "end": "1155269"
  },
  {
    "text": "accumulator set what we don't have and it seems a little surprising at first until you have a little insight is",
    "start": "1155269",
    "end": "1162350"
  },
  {
    "text": "there's no jump not equal or jump less then or jump less than or equal",
    "start": "1162350",
    "end": "1169200"
  },
  {
    "text": "because these are all equivalent to the false branches of some other instruction",
    "start": "1169200",
    "end": "1174269"
  },
  {
    "text": "so the the false branch from jump equals jump not equal okay now the targets for",
    "start": "1174269",
    "end": "1183450"
  },
  {
    "start": "1179000",
    "end": "1225000"
  },
  {
    "text": "these jumps that are expressed as relative offsets in the instruction list zero of course means no jump in other",
    "start": "1183450",
    "end": "1189210"
  },
  {
    "text": "words do the very next instruction otherwise you can jump up to 255",
    "start": "1189210",
    "end": "1194279"
  },
  {
    "text": "instructions forward if you want to jump further than that there's a jump always",
    "start": "1194279",
    "end": "1200850"
  },
  {
    "text": "instruction an unconditional jump where the the offset that you're jumping is in",
    "start": "1200850",
    "end": "1206549"
  },
  {
    "text": "the operand the K field of that structure I showed you earlier on so",
    "start": "1206549",
    "end": "1212730"
  },
  {
    "text": "yeah that's way more bits than you need to express how far you want to jump",
    "start": "1212730",
    "end": "1217830"
  },
  {
    "text": "because a BPF program can only be four kilobytes sorry four killer instructions",
    "start": "1217830",
    "end": "1226309"
  },
  {
    "start": "1225000",
    "end": "1342000"
  },
  {
    "text": "okay now this is a point I mentioned already set comm provides or the sitcom facility provides the pro the the BPF",
    "start": "1226309",
    "end": "1233549"
  },
  {
    "text": "program with information about the system call in a buffer that is read-only so we can't change the system",
    "start": "1233549",
    "end": "1240509"
  },
  {
    "text": "call or its arguments and that structure",
    "start": "1240509",
    "end": "1245519"
  },
  {
    "text": "can be expressed as a see structure this is and there is a structure definition",
    "start": "1245519",
    "end": "1250620"
  },
  {
    "text": "like this in the in the header files struct sitcom data and we get various",
    "start": "1250620",
    "end": "1255659"
  },
  {
    "text": "information about the system pool first of all we get the system call number and then the next thing we get is the system",
    "start": "1255659",
    "end": "1263190"
  },
  {
    "text": "call architecture and there'll be a number in here that tells us what architecture is this program executing",
    "start": "1263190",
    "end": "1269940"
  },
  {
    "text": "on and you'll see and there are constants in one of the header files that correspond to the various numbers here for instance x86 64",
    "start": "1269940",
    "end": "1276779"
  },
  {
    "text": "or arm or whatever we'll see why this is relevant in a little while then another",
    "start": "1276779",
    "end": "1286440"
  },
  {
    "text": "piece of information we get inside this structure is the instruction pointer now this is the instruction pointer in the",
    "start": "1286440",
    "end": "1292919"
  },
  {
    "text": "real program that is being filtered so it's telling us from where is this",
    "start": "1292919",
    "end": "1297990"
  },
  {
    "text": "system call being made and then we get the arguments of the",
    "start": "1297990",
    "end": "1304020"
  },
  {
    "text": "system call themselves and we have 64 bit arguments okay because arguments can",
    "start": "1304020",
    "end": "1310290"
  },
  {
    "text": "be up to 64 bits on some architectures and there are up to six arguments because on Linux the maximum number of",
    "start": "1310290",
    "end": "1317760"
  },
  {
    "text": "arguments that a system call can have is 6 now obviously a lot of system calls",
    "start": "1317760",
    "end": "1323340"
  },
  {
    "text": "don't use as many as 6 arguments so when you're writing your filter if you're going to look at a certain system call",
    "start": "1323340",
    "end": "1328560"
  },
  {
    "text": "on its arguments of course you need to know how many arguments does that system call deal with and you'll only use",
    "start": "1328560",
    "end": "1335510"
  },
  {
    "text": "certain pieces then out of that arguments part of the data so you could",
    "start": "1335510",
    "end": "1346620"
  },
  {
    "start": "1342000",
    "end": "1511000"
  },
  {
    "text": "code your mush your your BP of programs completely in binary if you want but as",
    "start": "1346620",
    "end": "1352680"
  },
  {
    "text": "a first cut there are some macros and symbolic constants and the header files",
    "start": "1352680",
    "end": "1358710"
  },
  {
    "text": "to make your life just a little bit easier and in particular there's a macro",
    "start": "1358710",
    "end": "1364080"
  },
  {
    "text": "called BPF statement you give it an opcode and an operand and what it's doing is just constructing the",
    "start": "1364080",
    "end": "1370290"
  },
  {
    "text": "initializer for that 64 bit structure which has four fields there's the opcode zero for the zero for the to jump offset",
    "start": "1370290",
    "end": "1378480"
  },
  {
    "text": "and then the operand at the end and then same thing for the jump instruction but",
    "start": "1378480",
    "end": "1385530"
  },
  {
    "text": "this time a couple more arguments to the macro the offsets for the jump true and",
    "start": "1385530",
    "end": "1390690"
  },
  {
    "text": "the jump false tag again we're constructing this initializer for the 64",
    "start": "1390690",
    "end": "1397050"
  },
  {
    "text": "bit structure so then just to look a at",
    "start": "1397050",
    "end": "1403950"
  },
  {
    "text": "a at a first complete instruction example in here we've got a BPF",
    "start": "1403950",
    "end": "1410040"
  },
  {
    "text": "statement we're building some sort of statement the statement we're building the first part here is the operand and",
    "start": "1410040",
    "end": "1415800"
  },
  {
    "text": "the operand is being constructed by oaring together various bits that's the construct the operand and BPF load here",
    "start": "1415800",
    "end": "1424020"
  },
  {
    "text": "says this is a load instruction the W this is the size of the object we're",
    "start": "1424020",
    "end": "1429420"
  },
  {
    "text": "loading is a word four bytes and the Erbs part there says this word is coming",
    "start": "1429420",
    "end": "1436860"
  },
  {
    "text": "from the darter area because you could do loads from say working that the so",
    "start": "1436860",
    "end": "1442050"
  },
  {
    "text": "called working memory of the set comp program so load a word from the data",
    "start": "1442050",
    "end": "1447390"
  },
  {
    "text": "area and then the question is which word from the data area let's go back a second here was that data err it's got",
    "start": "1447390",
    "end": "1454020"
  },
  {
    "text": "various pieces as expressed as a structure now I don't know I often find that when I talk about this people",
    "start": "1454020",
    "end": "1460170"
  },
  {
    "text": "haven't come across this handy little macro here called offset of who's seen",
    "start": "1460170",
    "end": "1466620"
  },
  {
    "text": "it I've seen offset off before just out of curiosity you know what offset off",
    "start": "1466620",
    "end": "1472440"
  },
  {
    "text": "does is you give it two arguments one is than the name of the structure and the",
    "start": "1472440",
    "end": "1477870"
  },
  {
    "text": "other is a field in their structure and what it does is return you the byte offset of that field in the structure so",
    "start": "1477870",
    "end": "1486540"
  },
  {
    "text": "we're saying give me the byte offset of the arc archfield in the set comp data structure what's",
    "start": "1486540",
    "end": "1495870"
  },
  {
    "text": "Officer dive going to return in that case for ya because this is an int",
    "start": "1495870",
    "end": "1502440"
  },
  {
    "text": "beforehand for by dint and then are just the next thing okay alrighty let's try",
    "start": "1502440",
    "end": "1514710"
  },
  {
    "start": "1511000",
    "end": "1566000"
  },
  {
    "text": "another instruction BPF jump this is a jump instruction the kind of jump we're",
    "start": "1514710",
    "end": "1520650"
  },
  {
    "text": "doing it's a jump testing on equality is the value in the accumulator equal to a certain value what value well the value",
    "start": "1520650",
    "end": "1528390"
  },
  {
    "text": "is taken from the operand that's what the B pfk pod is saying so is the value",
    "start": "1528390",
    "end": "1534090"
  },
  {
    "text": "in the UK made it equal to the value in the operand and what's the value in the operand it's this thing the constant for",
    "start": "1534090",
    "end": "1540420"
  },
  {
    "text": "the architecture x86 64 and then if",
    "start": "1540420",
    "end": "1545580"
  },
  {
    "text": "their test is true we're gonna jump forward one instruction and the would skip the next instruction otherwise",
    "start": "1545580",
    "end": "1552180"
  },
  {
    "text": "we're going to jump forward zero instructions do the very next instruction okay",
    "start": "1552180",
    "end": "1561950"
  },
  {
    "text": "I think I've covered all of that alrighty but here's another example of",
    "start": "1563380",
    "end": "1569260"
  },
  {
    "start": "1566000",
    "end": "1606000"
  },
  {
    "text": "an instruction this is a return instruction terminating the execution of BPA filter telling the kernel what have",
    "start": "1569260",
    "end": "1576700"
  },
  {
    "text": "we decided about this system call and here we're saying BPF ret return and",
    "start": "1576700",
    "end": "1584049"
  },
  {
    "text": "we're going to return a value that is in the operand so when we return we give some information to the kernel and the",
    "start": "1584049",
    "end": "1590320"
  },
  {
    "text": "value we're giving in the operand is this value here sink comp rent kill",
    "start": "1590320",
    "end": "1595929"
  },
  {
    "text": "process and this is our way of saying we don't like this system pool we don't",
    "start": "1595929",
    "end": "1601659"
  },
  {
    "text": "like it so much you should kill the process okay some other examples here",
    "start": "1601659",
    "end": "1610510"
  },
  {
    "start": "1606000",
    "end": "1650000"
  },
  {
    "text": "here's an example of an ADD operation arithmetic and logic instruction it's an",
    "start": "1610510",
    "end": "1617770"
  },
  {
    "text": "ad where we're saying add the value in the operand to the accumulator and the value in the operand is 1 so increment",
    "start": "1617770",
    "end": "1623740"
  },
  {
    "text": "the accumulator or we can do things as well like for instance doing right shift",
    "start": "1623740",
    "end": "1630640"
  },
  {
    "text": "in a value and they came in arithmetic logic instruction right shift by the",
    "start": "1630640",
    "end": "1635890"
  },
  {
    "text": "number of bits specified in the operand shift right 12 bits now I talked about",
    "start": "1635890",
    "end": "1645250"
  },
  {
    "text": "this this architecture field that's in the sitcom data structure and the the",
    "start": "1645250",
    "end": "1653440"
  },
  {
    "start": "1650000",
    "end": "1665000"
  },
  {
    "text": "the reason that field exists there is because checking the architecture value",
    "start": "1653440",
    "end": "1659440"
  },
  {
    "text": "needs to be the very first step in the execution of any BPF program and one of",
    "start": "1659440",
    "end": "1666820"
  },
  {
    "start": "1665000",
    "end": "1738000"
  },
  {
    "text": "the reasons for that is that system call numbers are different on different architectures you know the system call",
    "start": "1666820",
    "end": "1672789"
  },
  {
    "text": "numbers on arm are different some whole numbers on x86 which are different phone system call numbers on PowerPC and so on",
    "start": "1672789",
    "end": "1679120"
  },
  {
    "text": "and you might have created the BPF program on one architecture and you actually stored it in a file so you've",
    "start": "1679120",
    "end": "1685299"
  },
  {
    "text": "got a blob somewhere which is a sitcom program and then later on in you load",
    "start": "1685299",
    "end": "1691179"
  },
  {
    "text": "that blob into some applications you're going to install it as a sitcom filter for the application",
    "start": "1691179",
    "end": "1696370"
  },
  {
    "text": "but you you hate you happened to create the the filter on let's say x86 but accidentally because of a configuration",
    "start": "1696370",
    "end": "1702880"
  },
  {
    "text": "mismanagement in your setup you who loaded the program on let's say PowerPC",
    "start": "1702880",
    "end": "1708130"
  },
  {
    "text": "the BPF program and you tried to install it well now that BP of program is going to be making systems using x86 system",
    "start": "1708130",
    "end": "1716470"
  },
  {
    "text": "call numbers which are different from PowerPC system columns so in other words",
    "start": "1716470",
    "end": "1722260"
  },
  {
    "text": "the program's gonna make the wrong decisions unless at the very start of",
    "start": "1722260",
    "end": "1727420"
  },
  {
    "text": "your program you have a piece of code that in the BP of program that says is this architecture the one I expected am",
    "start": "1727420",
    "end": "1734470"
  },
  {
    "text": "I actually actually actually executing on the architecture I expected there's",
    "start": "1734470",
    "end": "1741059"
  },
  {
    "start": "1738000",
    "end": "1873000"
  },
  {
    "text": "even some more subtleties than this I've talked about the constraints a x86 and",
    "start": "1741059",
    "end": "1746530"
  },
  {
    "text": "arm and PowerPC but you've got many cases of modern",
    "start": "1746530",
    "end": "1752980"
  },
  {
    "text": "hardware now that supports multiple system call conventions modern x86",
    "start": "1752980",
    "end": "1757990"
  },
  {
    "text": "hardware supports three different system call ABI conventions",
    "start": "1757990",
    "end": "1764380"
  },
  {
    "text": "there's x86 64 the modern x86 there's a 386 the ancient 32-bit instruction set",
    "start": "1764380",
    "end": "1775390"
  },
  {
    "text": "which has different system call numbers and there's another one nowadays called",
    "start": "1775390",
    "end": "1780550"
  },
  {
    "text": "ex 32 which is 32 bit pointers and",
    "start": "1780550",
    "end": "1787660"
  },
  {
    "text": "Long's on x86 64 architecture which again has different system call numbers",
    "start": "1787660",
    "end": "1795790"
  },
  {
    "text": "because the arguments are different sizes even though it's also running on x86 64 they need to be different system",
    "start": "1795790",
    "end": "1802750"
  },
  {
    "text": "core numbers in some cases because some system calls tank Long's and pointers and argument as arguments and there are",
    "start": "1802750",
    "end": "1808510"
  },
  {
    "text": "different sizes onyx 32 so even if you're writing your",
    "start": "1808510",
    "end": "1814360"
  },
  {
    "text": "BPF program to run on just one rket your",
    "start": "1814360",
    "end": "1819460"
  },
  {
    "text": "and you load on that architecture on that hardware platform actually the the",
    "start": "1819460",
    "end": "1825520"
  },
  {
    "text": "system call ABI that's being used by a particular program might be one of several things and even",
    "start": "1825520",
    "end": "1833019"
  },
  {
    "text": "over the life of a process this might change you might have processes",
    "start": "1833019",
    "end": "1838509"
  },
  {
    "text": "executing an x86 64 64 bit program but then it execs a 32-bit binary it's still",
    "start": "1838509",
    "end": "1846700"
  },
  {
    "text": "the same process okay but now it's using different system call numbers but this",
    "start": "1846700",
    "end": "1852639"
  },
  {
    "text": "so the the the during the life of a process the the system which says the",
    "start": "1852639",
    "end": "1858639"
  },
  {
    "text": "system call ABI might change but the scope of BPF filters is the lifetime of",
    "start": "1858639",
    "end": "1865929"
  },
  {
    "text": "the process okay so the filter must check its assumptions about the",
    "start": "1865929",
    "end": "1871479"
  },
  {
    "text": "architecture okay okay so system quarter",
    "start": "1871479",
    "end": "1880269"
  },
  {
    "text": "these BPA filters return a value filter gets installed every system call gets tested against that value and the system",
    "start": "1880269",
    "end": "1889929"
  },
  {
    "text": "call filter returns a value telling us your whether the system calls allowed or not that return value is split into its",
    "start": "1889929",
    "end": "1895899"
  },
  {
    "text": "it's 32 bits split into two parts 16 bits say what is the action we want to",
    "start": "1895899",
    "end": "1900940"
  },
  {
    "text": "take and response that system call and then there might be some data that goes along with that action and possible",
    "start": "1900940",
    "end": "1908859"
  },
  {
    "text": "actions that we have set can't brittle out this system calls fine let it proceed set comp ret kill process we",
    "start": "1908859",
    "end": "1916419"
  },
  {
    "text": "really don't like this system call kill the process and do a core dump now Matt",
    "start": "1916419",
    "end": "1923320"
  },
  {
    "text": "it looks I'll rephrase this the process is killed it looks like the process was killed",
    "start": "1923320",
    "end": "1930849"
  },
  {
    "text": "with a cig so signal there is no signal involved the process is dead but any other process that was monitoring this",
    "start": "1930849",
    "end": "1937570"
  },
  {
    "text": "process say using P trace or wait PID it will appear that that process was killed",
    "start": "1937570",
    "end": "1943299"
  },
  {
    "text": "by a success signal now the possible of years kill the thread that made the",
    "start": "1943299",
    "end": "1948999"
  },
  {
    "text": "system call or okay we don't like the system call but don't kill the thread or",
    "start": "1948999",
    "end": "1955359"
  },
  {
    "text": "the process make it return an error don't actually execute the system call causes it to return a failure status",
    "start": "1955359",
    "end": "1961869"
  },
  {
    "text": "with a certain error and the error is whatever bite value is specified in the bottom 16 bits of the",
    "start": "1961869",
    "end": "1968590"
  },
  {
    "text": "return value there's a few other possibilities as well which I won't try",
    "start": "1968590",
    "end": "1973630"
  },
  {
    "text": "and walk through okay so using these BPF",
    "start": "1973630",
    "end": "1979539"
  },
  {
    "start": "1975000",
    "end": "2117000"
  },
  {
    "text": "programs let's drill down a little bit further the general idea is then a process builds a filter and then as then",
    "start": "1979539",
    "end": "1985450"
  },
  {
    "text": "stalls it using one of these system calls with the system calls what you do let's say let's focus on set comp you",
    "start": "1985450",
    "end": "1990850"
  },
  {
    "text": "say I want to set a install a filter so this is a flags but mask which I won't",
    "start": "1990850",
    "end": "1997870"
  },
  {
    "text": "go into and then there's a pointer to the filter program and the filter program looks like this it's a struck at tracked socket filter",
    "start": "1997870",
    "end": "2005190"
  },
  {
    "text": "program again networking origins where you've got the size of the program the",
    "start": "2005190",
    "end": "2010320"
  },
  {
    "text": "size of the BPF program the number of instructions and then a pointer through the instructions themselves now hmm if",
    "start": "2010320",
    "end": "2022679"
  },
  {
    "text": "you want to install a filter one of two things must be true either the program",
    "start": "2022679",
    "end": "2028230"
  },
  {
    "text": "must be privileged or you've set a flag called no new proofs for the process the",
    "start": "2028230",
    "end": "2034350"
  },
  {
    "text": "way you do that is with the system call now let's step back a second",
    "start": "2034350",
    "end": "2039690"
  },
  {
    "text": "why is that necessary suppose you're an attacker who wants to compromise a",
    "start": "2039690",
    "end": "2046260"
  },
  {
    "text": "privileged program and you know about CENTCOM and the idea you have in your mind is you know people do write set UID",
    "start": "2046260",
    "end": "2053429"
  },
  {
    "text": "program set your ID root programs they're not always as careful as they should be and maybe there's an error",
    "start": "2053429",
    "end": "2060270"
  },
  {
    "text": "code path in the set UID root program where the programmer didn't carefully check the return value or gracefully",
    "start": "2060270",
    "end": "2067470"
  },
  {
    "text": "handle a failure from a certain system call because the program expected that system ball would always succeed for",
    "start": "2067470",
    "end": "2073830"
  },
  {
    "text": "example and then you say ok as the attacker I'm gonna set up a filter and then I'm gonna run that set UID program",
    "start": "2073830",
    "end": "2080970"
  },
  {
    "text": "you know exact that set UID program and then the program is gonna misbehave and do something unexpected",
    "start": "2080970",
    "end": "2087000"
  },
  {
    "text": "while it's privileged attackers love that sort of thing of course you can't",
    "start": "2087000",
    "end": "2093628"
  },
  {
    "text": "do that because if you're an unprivileged the attacker you have to set this bit",
    "start": "2093629",
    "end": "2099420"
  },
  {
    "text": "and the effect of this bit in a proton a process is to disable the effect of set",
    "start": "2099420",
    "end": "2105330"
  },
  {
    "text": "UID programs and set GID programs and programs that have capabilities so this",
    "start": "2105330",
    "end": "2111030"
  },
  {
    "text": "means an attacker can't do the kind of expert I was talking about so let's look",
    "start": "2111030",
    "end": "2119040"
  },
  {
    "start": "2117000",
    "end": "2482000"
  },
  {
    "text": "at a small complete example now what",
    "start": "2119040",
    "end": "2125370"
  },
  {
    "text": "I've got here my main program I'm sitting this known you prove spit that's the first thing I must do before I install a filter then I've got a call to",
    "start": "2125370",
    "end": "2131640"
  },
  {
    "text": "a function which installs the filter we'll look at that in a moment and then my program calls the open system call",
    "start": "2131640",
    "end": "2137490"
  },
  {
    "text": "and then line eight there there's a message telling Lee we shouldn't see",
    "start": "2137490",
    "end": "2142530"
  },
  {
    "text": "this line or shouldn't see this message okay and that's because the filter is going to cause the open system call or",
    "start": "2142530",
    "end": "2149400"
  },
  {
    "text": "what's gonna win the open system calls gonna it's made the filter is going to tell the colonel to kill the program",
    "start": "2149400",
    "end": "2155870"
  },
  {
    "text": "okay what have we got here's our install filter function and the very first thing here as I've got a",
    "start": "2155870",
    "end": "2162530"
  },
  {
    "text": "structure sock filter array which is the instructions of my BPA filter first",
    "start": "2162530",
    "end": "2168180"
  },
  {
    "text": "thing I'm doing load a word from the data area the word I'm loading is the",
    "start": "2168180",
    "end": "2173250"
  },
  {
    "text": "offset of the Archaea in other words load the architecture into the accumulator then do a jump equality test",
    "start": "2173250",
    "end": "2181980"
  },
  {
    "text": "is the word in the accumulator equal to the value in the operand the value in the operand is this constant arch x86 64",
    "start": "2181980",
    "end": "2188910"
  },
  {
    "text": "I'm asking am I currently executing on x86 64 if I am I'm gonna jump forward",
    "start": "2188910",
    "end": "2196200"
  },
  {
    "text": "one instructions skip the next instruction otherwise I'm going to jump forward zero instructions kill the",
    "start": "2196200",
    "end": "2203130"
  },
  {
    "text": "process okay we're not on the architecture we expected this means as the system call numbers are different",
    "start": "2203130",
    "end": "2208620"
  },
  {
    "text": "from what we what we are designed for stop okay but otherwise the next thing",
    "start": "2208620",
    "end": "2217140"
  },
  {
    "text": "we happens we load a word from the data area the web we're loading this time is",
    "start": "2217140",
    "end": "2222210"
  },
  {
    "text": "the offset of the system call number so load the system call number into the accumulator and then we have an equality",
    "start": "2222210",
    "end": "2229680"
  },
  {
    "text": "hist is the word in the accumulator equal to the value in the operand is it the open system call",
    "start": "2229680",
    "end": "2236040"
  },
  {
    "text": "number okay this this thing here in our open is just a standard constant in the header files there's these constants for",
    "start": "2236040",
    "end": "2242550"
  },
  {
    "text": "every system call number for this architecture is the system call number equal to open if it is we're gonna jump",
    "start": "2242550",
    "end": "2248850"
  },
  {
    "text": "forward to instructions 0 1 to kill the process otherwise you're going to jump",
    "start": "2248850",
    "end": "2255600"
  },
  {
    "text": "forward 0 instructions doing a quality S is the word in the accumulator equal to",
    "start": "2255600",
    "end": "2260880"
  },
  {
    "text": "the open at system call number now open at is a more modern version of open so I",
    "start": "2260880",
    "end": "2267510"
  },
  {
    "text": "want to make sure that neither of those things is allowed in fact the open wrapper function in g-dubs e nowadays",
    "start": "2267510",
    "end": "2274320"
  },
  {
    "text": "calls open at the system call not open the system core and if it is equal to",
    "start": "2274320",
    "end": "2281400"
  },
  {
    "text": "open at jump board one instruction kill the process otherwise jump forward 0 instructions and here I say return to",
    "start": "2281400",
    "end": "2287670"
  },
  {
    "text": "the kernel allow the system call so every other system call is allowed",
    "start": "2287670",
    "end": "2295760"
  },
  {
    "text": "alrighty now there's the definition of my struck sock F prog it's the size of my filter",
    "start": "2297410",
    "end": "2303930"
  },
  {
    "text": "program which is the size of the filter divided by the size of the first instruction so it was supposed to be the",
    "start": "2303930",
    "end": "2309990"
  },
  {
    "text": "number of instructions not the number of bytes and then I set the filter field to",
    "start": "2309990",
    "end": "2315060"
  },
  {
    "text": "point to the filter program that I just constructed just above and then I install the filter using set comp set",
    "start": "2315060",
    "end": "2321420"
  },
  {
    "text": "mode filter pointed to my filter program and then when I run that program what I",
    "start": "2321420",
    "end": "2328680"
  },
  {
    "text": "see is the the there was no output from",
    "start": "2328680",
    "end": "2334740"
  },
  {
    "text": "the printf because the system our open system called the open at system called",
    "start": "2334740",
    "end": "2339840"
  },
  {
    "text": "to be more precise caused the kernel to kill this process and it was killed as",
    "start": "2339840",
    "end": "2345930"
  },
  {
    "text": "though it had been killed with a sexist signal and when the shell sees that the",
    "start": "2345930",
    "end": "2351750"
  },
  {
    "text": "process that it started looked like it was killed with a signal it print out the standard textual description of the",
    "start": "2351750",
    "end": "2357960"
  },
  {
    "text": "sixers signal which is in the english locale bad system call dollar question",
    "start": "2357960",
    "end": "2363480"
  },
  {
    "text": "mark here the of the last command for a signal the status of the last commanders 128 plus",
    "start": "2363480",
    "end": "2369030"
  },
  {
    "text": "the signal number and signal number 31 is sexists on this architecture okay I'm",
    "start": "2369030",
    "end": "2378270"
  },
  {
    "text": "going to skip another example because we are running a little short on time okay",
    "start": "2378270",
    "end": "2385530"
  },
  {
    "text": "now if you've got some existing filters",
    "start": "2385530",
    "end": "2391020"
  },
  {
    "text": "that allow you to use PR CTL or set comp you can add further filters that further",
    "start": "2391020",
    "end": "2398250"
  },
  {
    "text": "restrict what the program can do you can have an arbitrary number of filters but",
    "start": "2398250",
    "end": "2403800"
  },
  {
    "text": "the total number of instructions in all the filters is 32 K and when the ends",
    "start": "2403800",
    "end": "2409320"
  },
  {
    "text": "when the when a system call is executed when a system call is made all of the",
    "start": "2409320",
    "end": "2414960"
  },
  {
    "text": "filters are executed in reverse order of registration each one of those fields",
    "start": "2414960",
    "end": "2421560"
  },
  {
    "text": "gives you back a return value the kernel executes all the filters and then it says I'm going to do the action of the",
    "start": "2421560",
    "end": "2428190"
  },
  {
    "text": "first filter of the highest priority and there's a priority of filters set comp",
    "start": "2428190",
    "end": "2434490"
  },
  {
    "text": "cool process reticule processes highest priority set compra de Lauer's lowest priority the reason that for this first",
    "start": "2434490",
    "end": "2441990"
  },
  {
    "text": "scene action is that you might have several filters that return set comp ret Erno and that's the high and perhaps",
    "start": "2441990",
    "end": "2448950"
  },
  {
    "text": "that's the highest priority that is returned by any other filters the first filter that returned a no-no value that",
    "start": "2448950",
    "end": "2455790"
  },
  {
    "text": "will be the owner value that is used if you have second filters that allow you",
    "start": "2455790",
    "end": "2463680"
  },
  {
    "text": "to do full or clone the child inherits the parents set comp filters if the",
    "start": "2463680",
    "end": "2469980"
  },
  {
    "text": "filters allow you to exec feed load a new program the filters are preserved across the exec V which is nowhere",
    "start": "2469980",
    "end": "2476640"
  },
  {
    "text": "saying you can't escape filtering by creating child processes or executing new program okay these filters are",
    "start": "2476640",
    "end": "2485340"
  },
  {
    "start": "2482000",
    "end": "2589000"
  },
  {
    "text": "executed for every system pool there is a performance cost on the filter I",
    "start": "2485340",
    "end": "2492810"
  },
  {
    "text": "showed you already which was denying the open system call that means 6 BPF instructions purse",
    "start": "2492810",
    "end": "2497970"
  },
  {
    "text": "system call if I instead apply that filter to a program where I call get",
    "start": "2497970",
    "end": "2503280"
  },
  {
    "text": "PPID get parent process ID repeatedly then which is one of the cheapest system",
    "start": "2503280",
    "end": "2510390"
  },
  {
    "text": "calls just by the way I find that the execution time of the program goes up",
    "start": "2510390",
    "end": "2515580"
  },
  {
    "text": "25% of course these days with Spector and meltdown that statistic I realize is",
    "start": "2515580",
    "end": "2521940"
  },
  {
    "text": "no longer valid because specter and meltdown mitigations increase the execution time of get PP ID by a factor",
    "start": "2521940",
    "end": "2529140"
  },
  {
    "text": "of four ouch okay",
    "start": "2529140",
    "end": "2534780"
  },
  {
    "text": "let's forget about specter and meltdown and so on for a moment but 25% on what it used to be okay",
    "start": "2534780",
    "end": "2541800"
  },
  {
    "text": "now that seems reasonably high but remember get PP ideas a cheap system",
    "start": "2541800",
    "end": "2547109"
  },
  {
    "text": "call and programs don't spend all their time making system pools if you're",
    "start": "2547109",
    "end": "2552270"
  },
  {
    "text": "writing a filter that deals with many different system calls then obviously",
    "start": "2552270",
    "end": "2557340"
  },
  {
    "text": "the order in which you do the chinks in your filter can matter and you want to",
    "start": "2557340",
    "end": "2562859"
  },
  {
    "text": "construct your philosophic the commonly applicable rules dealt with first so you",
    "start": "2562859",
    "end": "2568680"
  },
  {
    "text": "can exit the filter as early as possible in the ideal world you know where you get the perfect binary chop on your",
    "start": "2568680",
    "end": "2575220"
  },
  {
    "text": "checks you'll get order login performance on your filter where n is the number of different kinds of checks",
    "start": "2575220",
    "end": "2581910"
  },
  {
    "text": "that you're going to make obviously not probably possible to achieve in practice but it's the ideal to aim for ok so I",
    "start": "2581910",
    "end": "2592650"
  },
  {
    "text": "said that one set compared me people started using this because they'd wanted",
    "start": "2592650",
    "end": "2598260"
  },
  {
    "text": "this for a long time but I just want to give you a few warnings about using",
    "start": "2598260",
    "end": "2604500"
  },
  {
    "text": "CENTCOM because it is a sharp knife one",
    "start": "2604500",
    "end": "2609510"
  },
  {
    "start": "2608000",
    "end": "2649000"
  },
  {
    "text": "of the things that you're going to try and answer in when you want to put a second filter onto a an application is",
    "start": "2609510",
    "end": "2617839"
  },
  {
    "text": "which system causes my application make and it's actually not always very easy",
    "start": "2617839",
    "end": "2624180"
  },
  {
    "text": "to discover that sort of information you could try doing a source code order but hey what about all the libraries that",
    "start": "2624180",
    "end": "2630630"
  },
  {
    "text": "your applique users you could try doing an S trace on your code but you know they'd only tell",
    "start": "2630630",
    "end": "2638010"
  },
  {
    "text": "you about the code paths that were taken perhaps you can do the S traces with many different inputs where you try and",
    "start": "2638010",
    "end": "2644070"
  },
  {
    "text": "execute all the code paths but they'll probably want to that you miss okay now",
    "start": "2644070",
    "end": "2649170"
  },
  {
    "start": "2649000",
    "end": "2691000"
  },
  {
    "text": "what about that you might write a sitcom filter that allows a certain set of",
    "start": "2649170",
    "end": "2655980"
  },
  {
    "text": "system calls just allows all the other ones you think are illegitimate but you missed one and it's one that a system",
    "start": "2655980",
    "end": "2661980"
  },
  {
    "text": "call that has hardly ever made but one day your program makes that system call because of some obscure code path and at",
    "start": "2661980",
    "end": "2669240"
  },
  {
    "text": "that point your application gets killed because it made a legitimate action",
    "start": "2669240",
    "end": "2675980"
  },
  {
    "text": "congratulations if you just use set comp to introduce a bug into your application",
    "start": "2675980",
    "end": "2683390"
  },
  {
    "text": "those kinds of bugs can be pretty hard to find during testing because we're",
    "start": "2683390",
    "end": "2688710"
  },
  {
    "text": "talking about obscure code paths another thing to think about is system call",
    "start": "2688710",
    "end": "2694470"
  },
  {
    "start": "2691000",
    "end": "2759000"
  },
  {
    "text": "filtering is based on system call numbers but applications use seed",
    "start": "2694470",
    "end": "2699630"
  },
  {
    "text": "library rectifiers at least normally but the wrapper fight library function behavior might change across g-dub see",
    "start": "2699630",
    "end": "2707310"
  },
  {
    "text": "versions for instance until G Lipsy 226 the open wrapper function on some",
    "start": "2707310",
    "end": "2713370"
  },
  {
    "text": "architectures underneath used the open system for all but on x86 and on x86",
    "start": "2713370",
    "end": "2718680"
  },
  {
    "text": "used the open system call but in 226 it changed using the open at system call so",
    "start": "2718680",
    "end": "2725550"
  },
  {
    "text": "if you're trying to filter for just open your filter wasn't catching open and",
    "start": "2725550",
    "end": "2732140"
  },
  {
    "text": "there's a relevant article air on lwm the inherent fragility of sitcom what",
    "start": "2733580",
    "end": "2738990"
  },
  {
    "text": "I'm trying to say here is you know you can't just create your sitcom fillers and forget about them they need to be",
    "start": "2738990",
    "end": "2744000"
  },
  {
    "text": "tested like every other piece of code in your application and they need to be part of your continuous integration",
    "start": "2744000",
    "end": "2749760"
  },
  {
    "text": "testing because things change over time and you need to have unit tests for your",
    "start": "2749760",
    "end": "2754980"
  },
  {
    "text": "set comp filters as well okay now just",
    "start": "2754980",
    "end": "2761340"
  },
  {
    "start": "2759000",
    "end": "2801000"
  },
  {
    "text": "very quickly there is there are obviously those pseudo are similar instructions I",
    "start": "2761340",
    "end": "2767079"
  },
  {
    "text": "was showing you before that's painful there are some higher-level tools perhaps the one that you're most likely",
    "start": "2767079",
    "end": "2773380"
  },
  {
    "text": "to reach for is something called Lube set comp and lips it confessori it's a library you can say I want to make it you make a bunch of API call saying I",
    "start": "2773380",
    "end": "2779829"
  },
  {
    "text": "want rules to do this this and this and then at the end you get a you have an API button where you can squirt out the",
    "start": "2779829",
    "end": "2786309"
  },
  {
    "text": "blob which is the BPF program it's it's",
    "start": "2786309",
    "end": "2791769"
  },
  {
    "text": "actually really nice it's got a full set of manual pages with examples it's almost like the person who did this",
    "start": "2791769",
    "end": "2798549"
  },
  {
    "text": "wanted people the users okay so just a little flavor of how lib",
    "start": "2798549",
    "end": "2804759"
  },
  {
    "start": "2801000",
    "end": "2849000"
  },
  {
    "text": "sitcom works the fundamental data structure is something called a sick sitcom context and it's just used to",
    "start": "2804759",
    "end": "2811720"
  },
  {
    "text": "hang the rules off in preparation for screw pressing the API button that says you know give me the BPF code so you",
    "start": "2811720",
    "end": "2819490"
  },
  {
    "text": "initialize this thing and then we say add a rule here in this case I'm saying add a rule that if there's a system call",
    "start": "2819490",
    "end": "2825759"
  },
  {
    "text": "clone made fail with the error e perm add another rule that says if we make a fork system call then fail with the e",
    "start": "2825759",
    "end": "2832480"
  },
  {
    "text": "not SAP error then we'd say load that filter into the kernel and that does all",
    "start": "2832480",
    "end": "2837759"
  },
  {
    "text": "the steps of things like disabling or setting no new proves and the set comp call that it installs the filter and",
    "start": "2837759",
    "end": "2844059"
  },
  {
    "text": "then my program tries to call fork and at that point property it's killed okay",
    "start": "2844059",
    "end": "2850750"
  },
  {
    "start": "2849000",
    "end": "2869000"
  },
  {
    "text": "there's the example there is some other tools there is a BPF compiler so to",
    "start": "2850750",
    "end": "2857170"
  },
  {
    "text": "speak it lets you write a sort of pseudo assembler with with symbolic labels so",
    "start": "2857170",
    "end": "2863349"
  },
  {
    "text": "you don't count offsets anymore and you can compile it to BPF it's part of the unit sniff ng project there is and this",
    "start": "2863349",
    "end": "2871240"
  },
  {
    "start": "2869000",
    "end": "2929000"
  },
  {
    "text": "is sort of off on a little bit of a tangent nowadays there is I I said before when I put the my filter onto the",
    "start": "2871240",
    "end": "2878619"
  },
  {
    "text": "program that called get PP ID repeatedly it was plus 25% I didn't say at the time there was plus 25% without the JIT",
    "start": "2878619",
    "end": "2885819"
  },
  {
    "text": "compiler enabled there is a JIT compiler in the kernel for BPF which converts the",
    "start": "2885819",
    "end": "2892930"
  },
  {
    "text": "BPF program into native code on that architecture and therefore it executes",
    "start": "2892930",
    "end": "2898299"
  },
  {
    "text": "s-- quick they say two to three times better I've seen even better and than that in some some of my test cases at least you were",
    "start": "2898299",
    "end": "2906310"
  },
  {
    "text": "the the the the JIT compiler on most architectures used to be disabled by default you can now enable it and then",
    "start": "2906310",
    "end": "2913540"
  },
  {
    "text": "you could enable it by writing one to a certain file a lot of modern recent distributions have actually set a kernel",
    "start": "2913540",
    "end": "2920350"
  },
  {
    "text": "option that is available in since a few few releases to actually have the JIT",
    "start": "2920350",
    "end": "2925870"
  },
  {
    "text": "compiler always on okay oh look broadly",
    "start": "2925870",
    "end": "2933010"
  },
  {
    "start": "2929000",
    "end": "2994000"
  },
  {
    "text": "broadly applications there's two broad applications I think for second one is",
    "start": "2933010",
    "end": "2938830"
  },
  {
    "text": "you're doing sandboxing in other words you want to prevent an application from",
    "start": "2938830",
    "end": "2944140"
  },
  {
    "text": "making any but a restricted set of system calls so you use a whitelist approach where the you block all system",
    "start": "2944140",
    "end": "2950680"
  },
  {
    "text": "pulls by default but you allow a few system calls this is what most of the",
    "start": "2950680",
    "end": "2957880"
  },
  {
    "text": "applications I mentioned earlier are doing things like the container frameworks and flat pack and the browser's but there's an alternative",
    "start": "2957880",
    "end": "2965500"
  },
  {
    "text": "which is interesting which is failure mode testing you you've got an",
    "start": "2965500",
    "end": "2971650"
  },
  {
    "text": "application which makes certain system calls and those system calls hardly ever fail and so how do you test whether",
    "start": "2971650",
    "end": "2979660"
  },
  {
    "text": "though your application gracefully handles failures in those system calls well one way of doing this is to use",
    "start": "2979660",
    "end": "2987280"
  },
  {
    "text": "sick comp where you install a second filter that causes that system call to",
    "start": "2987280",
    "end": "2992410"
  },
  {
    "text": "fail okay now just the Sistina is just some further information you can find",
    "start": "2992410",
    "end": "3000540"
  },
  {
    "start": "2994000",
    "end": "3012000"
  },
  {
    "text": "out about sick comp in various places this last piece here in she's a write-up of this presentation that was done by",
    "start": "3000540",
    "end": "3005970"
  },
  {
    "text": "someone at lwn net or a version of it i did two or three years ago okay thank",
    "start": "3005970",
    "end": "3013020"
  },
  {
    "start": "3012000",
    "end": "3127000"
  },
  {
    "text": "you very much for your time the slides are available here the source code is available here I do training courses",
    "start": "3013020",
    "end": "3020690"
  },
  {
    "text": "lots of training courses I wrote a book thank you for your time",
    "start": "3020690",
    "end": "3026310"
  },
  {
    "text": "[Applause] and I know I'll take questions if there",
    "start": "3026310",
    "end": "3031680"
  },
  {
    "text": "are but we're really short of time so I don't know I don't know well we're short of time if there's any quick questions I can take them we can",
    "start": "3031680",
    "end": "3037950"
  },
  {
    "text": "grab me as I leave yes yes so you",
    "start": "3037950",
    "end": "3050940"
  },
  {
    "text": "install the filter for for your you install the filter process and stores",
    "start": "3050940",
    "end": "3056430"
  },
  {
    "text": "are filled at for itself and then the lifetime of that filter is until the process terminates yes the total size of",
    "start": "3056430",
    "end": "3071940"
  },
  {
    "text": "beep of of the you can have multiple filters and the total Emma instructions across all the filters is 32 K each",
    "start": "3071940",
    "end": "3079620"
  },
  {
    "text": "individual filter can be 4 K instructions but the the attacker is",
    "start": "3079620",
    "end": "3092220"
  },
  {
    "text": "running inside that application yes it's yeah yeah yeah so you're saying what if",
    "start": "3092220",
    "end": "3098430"
  },
  {
    "text": "the attacker makes their own life even more difficult know that you'll get an",
    "start": "3098430",
    "end": "3107340"
  },
  {
    "text": "error when you try and install the next filter that exceeds the limit yes if you",
    "start": "3107340",
    "end": "3117450"
  },
  {
    "text": "don't do it if you don't check the error you won't know that you fail to install the filter okay thank you",
    "start": "3117450",
    "end": "3127579"
  }
]