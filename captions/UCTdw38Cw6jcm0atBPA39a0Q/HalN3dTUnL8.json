[
  {
    "text": "okay hey good morning everyone my name is tamir and today we're going to be talking about implementing c plus plus",
    "start": "5920",
    "end": "11440"
  },
  {
    "text": "semantics in python now before we begin and you probably saw this picture on the",
    "start": "11440",
    "end": "17359"
  },
  {
    "text": "website this was my breakout with hairstyle which was a lot shorter now it's getting a bit longer but",
    "start": "17359",
    "end": "22960"
  },
  {
    "text": "it's still me in the same person now and before we start i have a few",
    "start": "22960",
    "end": "28240"
  },
  {
    "text": "questions for you and who here uses c plus plus or raise your hand",
    "start": "28240",
    "end": "33280"
  },
  {
    "text": "okay and the primary language okay and who is this python",
    "start": "33280",
    "end": "39360"
  },
  {
    "text": "and the primary language okay now if you have any questions for",
    "start": "39360",
    "end": "45360"
  },
  {
    "text": "me there will be pauses during the talk for that and there are slide numbers on every slide so you can always refer to",
    "start": "45360",
    "end": "50800"
  },
  {
    "text": "those so the first question we have to ask is why on earth will they want to take c",
    "start": "50800",
    "end": "56719"
  },
  {
    "text": "plus plus semantics and get them in title i mean c plus fast is low level it's mostly expert oriented and it's",
    "start": "56719",
    "end": "64320"
  },
  {
    "text": "slowly becoming more and more pythonic as new features make it in python on the other hand is nice it's high level it's",
    "start": "64320",
    "end": "69520"
  },
  {
    "text": "beginner friendly and it has a lot less food guns i mean it happens that you write code and plan and go like oh i did not expect it to do",
    "start": "69520",
    "end": "76240"
  },
  {
    "text": "that at all and if you've been to the quiz yesterday i mean that's not exactly a fun experience why would they want to",
    "start": "76240",
    "end": "82320"
  },
  {
    "text": "take that and bring that into python well at least for me the answer is resource",
    "start": "82320",
    "end": "87840"
  },
  {
    "text": "management in c plus plus all resources are treated equally eh there's no special handling",
    "start": "87840",
    "end": "94400"
  },
  {
    "text": "by the system you just have to handle everything yourself in python on the other hand you have garbage collection so if you allocate",
    "start": "94400",
    "end": "100560"
  },
  {
    "text": "any memory it gets freed automatically and which is very nice but any other type of resource beta file socket db",
    "start": "100560",
    "end": "107840"
  },
  {
    "text": "connection whatever you do you need to handle it manually so it's not like in c well you actually have to",
    "start": "107840",
    "end": "114399"
  },
  {
    "text": "write every call to close the results",
    "start": "114399",
    "end": "119438"
  },
  {
    "text": "just like",
    "start": "119920",
    "end": "122640"
  },
  {
    "text": "python does give us some facilities to do that namely context managers and context managers are fairly",
    "start": "127280",
    "end": "132800"
  },
  {
    "text": "straightforward whenever we use them with the with statement and then when we enter the within it creates an indented",
    "start": "132800",
    "end": "139120"
  },
  {
    "text": "block when we enter the block the enter method for that context manager is called and when we leave the block bit",
    "start": "139120",
    "end": "144879"
  },
  {
    "text": "by return statement just by getting the end of the block or we throw an exception",
    "start": "144879",
    "end": "149920"
  },
  {
    "text": "and we call the exit method for the context manager",
    "start": "149920",
    "end": "154480"
  },
  {
    "text": "if we want to implement our own context manager we just need to implement the internet methods and we have our own",
    "start": "155680",
    "end": "160800"
  },
  {
    "text": "context manager and we can do anything we want in those methods",
    "start": "160800",
    "end": "165840"
  },
  {
    "text": "so let's talk about some real code and this has been redacted from some code i have running in production you know it's",
    "start": "166000",
    "end": "171519"
  },
  {
    "text": "not the best code in the world but um you have code in production you have to live with that",
    "start": "171519",
    "end": "176959"
  },
  {
    "text": "and you pay for your mistakes anyway the code is fairly simple we have a zip file containing hundreds of files",
    "start": "176959",
    "end": "183680"
  },
  {
    "text": "and you want to be able to read them whenever we need to so initially the object is very simple we",
    "start": "183680",
    "end": "188959"
  },
  {
    "text": "open the zip file with the context manager in order to be sure to close it when you're done we read all the files",
    "start": "188959",
    "end": "194959"
  },
  {
    "text": "from the zip file we unzip them and install them in the dictionary then we're going to read in the actual contents just call the read method and",
    "start": "194959",
    "end": "201599"
  },
  {
    "text": "access the the data in the zip in the dictionary sorry",
    "start": "201599",
    "end": "206879"
  },
  {
    "text": "okay usage is very simple we create a new archive reader and then we call read get",
    "start": "206879",
    "end": "212879"
  },
  {
    "text": "the value print it and everything works as expected",
    "start": "212879",
    "end": "217760"
  },
  {
    "text": "now as time goes by things change in my case the archives got larger from hundreds of",
    "start": "218959",
    "end": "225680"
  },
  {
    "text": "files in the zip it go to thousands and tens of thousands and hundreds of thousands of files and that meant the",
    "start": "225680",
    "end": "232400"
  },
  {
    "text": "file was a lot larger and we could no longer just open everything and hold it in memory it was way too big to be",
    "start": "232400",
    "end": "237519"
  },
  {
    "text": "stored in memory in additionally the time it took to open the actual zip file just to pass the metadata go too long to",
    "start": "237519",
    "end": "244799"
  },
  {
    "text": "open the zip file whenever we want to read one single file so we had to do something we had to open a zip file",
    "start": "244799",
    "end": "250640"
  },
  {
    "text": "store it as a member variable in our class and only then read the files when we want to",
    "start": "250640",
    "end": "256959"
  },
  {
    "text": "this created a bit of a change in our archive reader now in the constructor all we have to do is open the zip file",
    "start": "256959",
    "end": "262079"
  },
  {
    "text": "we don't need to read from the zip file yet in the read method we take the zip file we open a specific file within it we",
    "start": "262079",
    "end": "269040"
  },
  {
    "text": "unzip that file and return the data no need for a dictionary but to get that we also have to make our",
    "start": "269040",
    "end": "275360"
  },
  {
    "text": "own archive reader a context measure so that we can open the file and close the file whenever we need to do that",
    "start": "275360",
    "end": "281120"
  },
  {
    "text": "this means that we need to add an enter method and an exit method all fine so far",
    "start": "281120",
    "end": "286720"
  },
  {
    "text": "however this changes the user the usage of our class like we saw before with the zip file we use the context manager with",
    "start": "286720",
    "end": "293199"
  },
  {
    "text": "the with statement now we need to do that with our archive reader so if anyone's used that archive we need to",
    "start": "293199",
    "end": "299280"
  },
  {
    "text": "change that code if the archive reader was used as a member variable annual we need to change that code as well and",
    "start": "299280",
    "end": "305440"
  },
  {
    "text": "that keeps propagating higher and higher and higher up the call stack and can pollute a lot of code",
    "start": "305440",
    "end": "310479"
  },
  {
    "text": "additionally if we cannot change any part of that code we would not be able to make the change",
    "start": "310479",
    "end": "316720"
  },
  {
    "text": "and use the new archive manager",
    "start": "316720",
    "end": "320759"
  },
  {
    "text": "well c plus plus has a solution for us namely the structures and in c plus the",
    "start": "325520",
    "end": "333120"
  },
  {
    "text": "factors of the same solution to the resource management problem and they have three main properties that we are",
    "start": "333120",
    "end": "338400"
  },
  {
    "text": "interested in first they are automatic then they are composable and they are implicit",
    "start": "338400",
    "end": "343520"
  },
  {
    "text": "let's go over that first automatic whenever we have a distractor and we reach the end of a block this cycle is",
    "start": "343520",
    "end": "349199"
  },
  {
    "text": "called for the object that goes out and goes out of scope doesn't matter if it's because we reached the end of the block",
    "start": "349199",
    "end": "354720"
  },
  {
    "text": "and whether we flew an exception or we just returned and the cycle would be called just like with the context",
    "start": "354720",
    "end": "360240"
  },
  {
    "text": "managers then we have seamless composition if we have a class and it has no members everything",
    "start": "360240",
    "end": "368000"
  },
  {
    "text": "everything is okay our destructor would get called then if we add new member to that class and when the remember sorry",
    "start": "368000",
    "end": "374479"
  },
  {
    "text": "when the class gets destroyed the the member variable this structure would be called as well that just happened",
    "start": "374479",
    "end": "380160"
  },
  {
    "text": "seamlessly we don't need to do anything to make that happen and additionally it's completely",
    "start": "380160",
    "end": "385520"
  },
  {
    "text": "implicit here we have an example one object has this tactile the other one does not have a user-defined destructor",
    "start": "385520",
    "end": "391680"
  },
  {
    "text": "and the code is exactly the same don't do anything special to use that um so if we just add a new destructor to",
    "start": "391680",
    "end": "399039"
  },
  {
    "text": "an object we don't need to propagate a change higher up the call stack we don't need to change anything it just works",
    "start": "399039",
    "end": "404880"
  },
  {
    "text": "which is wonderful so our goal is basically to take this",
    "start": "404880",
    "end": "410160"
  },
  {
    "text": "code which is our current archive reader which is 11 lines of code four of them are strictly resource management so",
    "start": "410160",
    "end": "416960"
  },
  {
    "text": "boilerplate and we create this code which is seven lines and no resource management at all",
    "start": "416960",
    "end": "423440"
  },
  {
    "text": "everything is automatic implicit and composable additionally we change the we change the",
    "start": "423440",
    "end": "429280"
  },
  {
    "text": "usage from this weird with statement usage to just you know regular variable usage",
    "start": "429280",
    "end": "435440"
  },
  {
    "text": "which is a lot nicer and again does not propagate the change higher up the stack we just added structure and we're happy",
    "start": "435440",
    "end": "440800"
  },
  {
    "text": "to go before i continue and just a word of warn you are gonna do a lot of dirty",
    "start": "440800",
    "end": "446720"
  },
  {
    "text": "hacks here please do not try that at work if someone saw that in a code review they would be appalled and",
    "start": "446720",
    "end": "452479"
  },
  {
    "text": "probably call you to a conversation say hey what are we doing here that's that's not okay but we are not doing work here this is",
    "start": "452479",
    "end": "458639"
  },
  {
    "text": "for fun so on our journey towards a python that's more like c plus plus we have our",
    "start": "458639",
    "end": "464800"
  },
  {
    "text": "greater class to join us it's a very simple class just to help us help us visualize the constructor and destructor",
    "start": "464800",
    "end": "471039"
  },
  {
    "text": "calls when we construct the class it says hello and when we call the destructor it says goodbye it's a",
    "start": "471039",
    "end": "476319"
  },
  {
    "text": "context manager just just like we did before and when we run it we simply get hello and then we have a",
    "start": "476319",
    "end": "483440"
  },
  {
    "text": "greater printed here and we say goodbye fairly simple now let's make sure that everything is",
    "start": "483440",
    "end": "489919"
  },
  {
    "text": "automatic as i mentioned before in context managers are already automatic volume",
    "start": "489919",
    "end": "495120"
  },
  {
    "text": "explicit but everything happens automatically if we use the with statement we are sure that when we leave",
    "start": "495120",
    "end": "500240"
  },
  {
    "text": "the scope when we leave the block the destructor would be called now things get a bit messy if we want to",
    "start": "500240",
    "end": "506639"
  },
  {
    "text": "add another griddle and another greater because we keep adding nesting more and more nesting and it's quite common for",
    "start": "506639",
    "end": "512399"
  },
  {
    "text": "us to have more than one object in our function like 10 objects is not that",
    "start": "512399",
    "end": "517680"
  },
  {
    "text": "well and as we keep adding that can get a bit messy",
    "start": "517680",
    "end": "523279"
  },
  {
    "text": "so what do we do instead of stacking everything in with nesting we can move to a propel stack",
    "start": "523440",
    "end": "529839"
  },
  {
    "text": "and so we create a new object called the destructor scope this cycle scope basically holds a stack with the",
    "start": "529839",
    "end": "534880"
  },
  {
    "text": "distractors for all the objects that we create and it's fairly straightforward we use at least any other stack because it has",
    "start": "534880",
    "end": "541360"
  },
  {
    "text": "pop pen you can use the stack and like vector is the default container for everything in c plus plus in python we",
    "start": "541360",
    "end": "548000"
  },
  {
    "text": "use list and we have an enter method which just returns the same object that's very",
    "start": "548000",
    "end": "553600"
  },
  {
    "text": "common with context managers we usually don't need to do anything in the enter method and you have an exit method that goes",
    "start": "553600",
    "end": "559440"
  },
  {
    "text": "over the stack in reverse order and distracts all the objects so we actually call it the cycles in the right order",
    "start": "559440",
    "end": "565279"
  },
  {
    "text": "and we have a push method to add to the stack when our code changes to this we create",
    "start": "565279",
    "end": "570720"
  },
  {
    "text": "a scope and then whenever we create a glitter we push that into the scope and",
    "start": "570720",
    "end": "576320"
  },
  {
    "text": "when we leave everything gets called in the right order now this is nice but that's",
    "start": "576320",
    "end": "582800"
  },
  {
    "text": "very very explicit i mean i don't want to write all that code for every single object i add for every single function",
    "start": "582800",
    "end": "589120"
  },
  {
    "text": "in my code so next step is to try to make things more implicit any questions so far",
    "start": "589120",
    "end": "596640"
  },
  {
    "text": "okay",
    "start": "596640",
    "end": "599640"
  },
  {
    "text": "basically we want to remove all if we cannot remove hide all the boilerplate in our code we want to change from the",
    "start": "604800",
    "end": "610560"
  },
  {
    "text": "factor that we explicitly create the destructor scope we give it a name create the griddle we push them",
    "start": "610560",
    "end": "615600"
  },
  {
    "text": "explicitly onto the stack and then it gets selected to just",
    "start": "615600",
    "end": "621200"
  },
  {
    "text": "the simpler code inside we create a glitter and that's it it just works",
    "start": "621200",
    "end": "626720"
  },
  {
    "text": "so whenever we want to hide something we usually add another layer of interaction in our case",
    "start": "626720",
    "end": "632959"
  },
  {
    "text": "this is what we're going to do first things first um if we don't want to push this in greater explicitly and you don't",
    "start": "632959",
    "end": "639519"
  },
  {
    "text": "want to forget to push the glitter then we just make sure that when we initialize the glitter it needs to get the structural scope if it does not get",
    "start": "639519",
    "end": "646560"
  },
  {
    "text": "that we cannot create the object so move in the pushing into the constructor",
    "start": "646560",
    "end": "652240"
  },
  {
    "text": "and change the code a bit so now it's a bit more it's a bit less code but",
    "start": "652240",
    "end": "657440"
  },
  {
    "text": "we still need to name the suctile scope and i don't really like that i want to hide that name",
    "start": "657440",
    "end": "663839"
  },
  {
    "text": "so let's say we have the scope we want to hide it we want some other",
    "start": "663839",
    "end": "669279"
  },
  {
    "text": "variable to have a functional class to have access to it well i guess the best solution is a global variable",
    "start": "669279",
    "end": "676959"
  },
  {
    "text": "though they're always fun but since um functions are being called on a stack",
    "start": "676959",
    "end": "683279"
  },
  {
    "text": "and keep adding new scopes we'll have to make that global variable a stack as well so we'll have a stack of",
    "start": "683279",
    "end": "689760"
  },
  {
    "text": "these tactile scopes like we created before and whenever we enter a new function we just push that onto the",
    "start": "689760",
    "end": "694800"
  },
  {
    "text": "stack so we change over the cycle scope a bit to make sure that when we create a new",
    "start": "694800",
    "end": "699839"
  },
  {
    "text": "scope we push it onto the global stack and when we destroy the scope we pop it off the stack",
    "start": "699839",
    "end": "705680"
  },
  {
    "text": "fairly straightforward we add a new global function to push something onto that stack",
    "start": "705680",
    "end": "712000"
  },
  {
    "text": "and then you can use it in the in the gripper so instead of getting the desktop stack explicitly we just use the",
    "start": "712639",
    "end": "719519"
  },
  {
    "text": "global stack and we're good to go now we don't pass any more variables into the stack",
    "start": "719519",
    "end": "725760"
  },
  {
    "text": "and our main basically looks like that we create a new scope because we have to do that we create the griddle they get",
    "start": "725760",
    "end": "732079"
  },
  {
    "text": "pushed automatically onto the stack and when we leave main they get distracted automatically",
    "start": "732079",
    "end": "737920"
  },
  {
    "text": "and but we can do better we can do a lot better first um get this tactile scope i",
    "start": "737920",
    "end": "743200"
  },
  {
    "text": "don't want to create it in every function i call it's quite annoying so first thing you can do since it doesn't",
    "start": "743200",
    "end": "748880"
  },
  {
    "text": "have any code that's related to the actual main function it only uses global variables and let's move it outside of",
    "start": "748880",
    "end": "754320"
  },
  {
    "text": "the main function this works exactly the same and now we just need to do it around the recall and",
    "start": "754320",
    "end": "759360"
  },
  {
    "text": "not inside every function it's still not the best and so let's create a",
    "start": "759360",
    "end": "764480"
  },
  {
    "text": "new way to call functions we create a call function it takes a function and it's arguments and the style styles are",
    "start": "764480",
    "end": "771200"
  },
  {
    "text": "kw args is python's way of doing perfect folding so we take a function we take the",
    "start": "771200",
    "end": "777680"
  },
  {
    "text": "arguments and then we perfectly follow the arguments into the function and after creating a destructor scope so",
    "start": "777680",
    "end": "784000"
  },
  {
    "text": "here we call main and it works just like before but it's a bit simpler but still i i don't really like calling call",
    "start": "784000",
    "end": "791519"
  },
  {
    "text": "whenever i want to call a function like i wouldn't use invoke every time you call a function in c plus plus",
    "start": "791519",
    "end": "797839"
  },
  {
    "text": "so we go another step of interaction okay the cpp function function and it",
    "start": "797839",
    "end": "804160"
  },
  {
    "text": "takes a regular python function and returns a c plus plus function so inside",
    "start": "804160",
    "end": "810000"
  },
  {
    "text": "we have a closure we take the function that we passed we capture it in the closure we added the structural scope",
    "start": "810000",
    "end": "815360"
  },
  {
    "text": "and returned the closure then we have a new function called scoped main which does the same thing as main but it's",
    "start": "815360",
    "end": "820959"
  },
  {
    "text": "wrapped in instructor scope and then since python is a dynamic",
    "start": "820959",
    "end": "826720"
  },
  {
    "text": "language after all and we can rebind names to whatever we want we can rewrite the name main to the new scoped",
    "start": "826720",
    "end": "833519"
  },
  {
    "text": "version of the function and now if we call main it creates the scope and calls the original main we defined",
    "start": "833519",
    "end": "840079"
  },
  {
    "text": "and this is a fairly common operation right on taking one function wrapping it in something else and",
    "start": "840079",
    "end": "846399"
  },
  {
    "text": "assigning it to the original name so if i don't edit the new specific syntax for that called",
    "start": "846399",
    "end": "851440"
  },
  {
    "text": "decorator syntax and basically instead of calling the function directly we just use at and the",
    "start": "851440",
    "end": "857360"
  },
  {
    "text": "name of the function above a function definition and it does the exact same work takes the function passes it into",
    "start": "857360",
    "end": "862480"
  },
  {
    "text": "the function takes the return value and assigns it to that name okay so now we can write the main function this way and it works just like",
    "start": "862480",
    "end": "869600"
  },
  {
    "text": "we did initially it created this suction scope make sure that thing gets pushed and returns the value properly",
    "start": "869600",
    "end": "876880"
  },
  {
    "text": "i think this is already a lot better than where we started it's declarative which is nice it doesn't have just weird context managers",
    "start": "876959",
    "end": "883600"
  },
  {
    "text": "lying around it's fairly clean the contents of the main function look like a perfectly regular function",
    "start": "883600",
    "end": "890399"
  },
  {
    "text": "but it's still explicit and again i have to write it every single time for every single function and we",
    "start": "890399",
    "end": "897600"
  },
  {
    "text": "can probably we probably want to avoid i mean if i forget doing that and you just try the main function without it we",
    "start": "897600",
    "end": "903279"
  },
  {
    "text": "would not have this cycle scope and as we write more and more functions that could become annoying especially since",
    "start": "903279",
    "end": "908720"
  },
  {
    "text": "if you forget it for one function you just bind to the function above when things look really weird",
    "start": "908720",
    "end": "914800"
  },
  {
    "text": "any questions so far",
    "start": "914800",
    "end": "918600"
  },
  {
    "text": "okay now we're going to start with import hacking this is where things get really messy and fun",
    "start": "937279",
    "end": "943519"
  },
  {
    "text": "so basically what happens in a file if you want to use our new library with the cpp function um in our own code first",
    "start": "943519",
    "end": "950560"
  },
  {
    "text": "thing we do is form cpp which is how we'll call our c plus plus library that we use and we import the cpp function",
    "start": "950560",
    "end": "956560"
  },
  {
    "text": "decorator then we import the glitter then we create the main function and use the cpp",
    "start": "956560",
    "end": "962320"
  },
  {
    "text": "function decorator fairly straightforward now what if i want to do something else what",
    "start": "962320",
    "end": "967759"
  },
  {
    "text": "if i just want to import magic form c plus plus and have everything else just happen",
    "start": "967759",
    "end": "973040"
  },
  {
    "text": "um well let's start small let's say that instead of only importing magic i also call the magic function and i want that",
    "start": "973040",
    "end": "980560"
  },
  {
    "text": "point to do whatever is necessary in the file and to get the same results as we've gotten before",
    "start": "980560",
    "end": "986320"
  },
  {
    "text": "so what does the magic function actually have to do needs to do two things one is find out which is the calling module",
    "start": "986320",
    "end": "992079"
  },
  {
    "text": "where was the function called and so it needs to modify that model and decorate all the functions within it",
    "start": "992079",
    "end": "999120"
  },
  {
    "text": "let's see how to do that in the magic function we use the",
    "start": "999120",
    "end": "1004240"
  },
  {
    "text": "inspect module to get the call stack then from the call stack we get whichever module called us",
    "start": "1004240",
    "end": "1009680"
  },
  {
    "text": "once we have that we can return the module it's very nice that we have that functionality in python i wish someday",
    "start": "1009680",
    "end": "1014800"
  },
  {
    "text": "we'll have call stock inspection in c plus but that's probably a long way off",
    "start": "1014800",
    "end": "1020240"
  },
  {
    "text": "then we need to decorate all the modules functions so basically we go over the func at the model and iterate over all",
    "start": "1020240",
    "end": "1025678"
  },
  {
    "text": "the modules members the first thing we check is is what we're looking at a function if it's not a function we don't",
    "start": "1025679",
    "end": "1030798"
  },
  {
    "text": "need to do anything then we make sure the function was defined in that model so only if we imported like something",
    "start": "1030799",
    "end": "1036640"
  },
  {
    "text": "from the standard library we don't need to decorate it we don't want to change the functionality of the standard library that would cause very weird",
    "start": "1036640",
    "end": "1043360"
  },
  {
    "text": "behavior and then we set that attribute back into the module we just use setup which",
    "start": "1043360",
    "end": "1049919"
  },
  {
    "text": "allows us to take an object a name and a new value when we fold it attribute and we call this if we function on the",
    "start": "1049919",
    "end": "1055679"
  },
  {
    "text": "function and to decorate it like we did before and with that we can write the code as",
    "start": "1055679",
    "end": "1061919"
  },
  {
    "text": "follows and we just import magic define all of our code call magic to make the",
    "start": "1061919",
    "end": "1066960"
  },
  {
    "text": "magic happen and then call main everything just works",
    "start": "1066960",
    "end": "1072080"
  },
  {
    "text": "but it's quite annoying you have to explicitly use magic magic should be magical and visible and fun",
    "start": "1072080",
    "end": "1079360"
  },
  {
    "text": "so what what do we need to do to actually",
    "start": "1079360",
    "end": "1083440"
  },
  {
    "text": "oh this was confusing i have a duplicate slide sorry so what do we actually need to do and to",
    "start": "1085760",
    "end": "1091360"
  },
  {
    "text": "make the magic call disappear well for them we need to talk about the actual import mechanism in python",
    "start": "1091360",
    "end": "1098000"
  },
  {
    "text": "this is a basic diagram of what happens when you write from cpp import magic this is the import expression and you",
    "start": "1098000",
    "end": "1104400"
  },
  {
    "text": "want in the import statement and you want to import magic from the c plus plus module the first thing we do is",
    "start": "1104400",
    "end": "1110080"
  },
  {
    "text": "check whether the c plus plus module is in the global module cache if it is in the cache we just move ahead if it's not",
    "start": "1110080",
    "end": "1116480"
  },
  {
    "text": "we need to go to three steps first we need to create a new module object then we need to add that model to the",
    "start": "1116480",
    "end": "1122799"
  },
  {
    "text": "cache and then we need to execute that module and generally python adds the model to the cache to prevent cyclic",
    "start": "1122799",
    "end": "1128640"
  },
  {
    "text": "imports from just re-importing it again and again and again which is quite unpleasant once we've executed the model and check",
    "start": "1128640",
    "end": "1136320"
  },
  {
    "text": "whether magic is in the model if it is in the model we just find the magic to the name magic in the importing module",
    "start": "1136320",
    "end": "1142960"
  },
  {
    "text": "if it is not there we call the getatter attribute and the category method of that module if that exists and pass the",
    "start": "1142960",
    "end": "1149440"
  },
  {
    "text": "name that we're looking for which is magic since magic was a function call we probably want to use a function call as",
    "start": "1149440",
    "end": "1155440"
  },
  {
    "text": "well um so that's what we're gonna go for",
    "start": "1155440",
    "end": "1161039"
  },
  {
    "text": "we change the name of the function magic to underscore magic to make sure that we don't accidentally just import it",
    "start": "1161039",
    "end": "1166240"
  },
  {
    "text": "directly and then we create a get outer method in there we check whether the name is magic",
    "start": "1166240",
    "end": "1171760"
  },
  {
    "text": "or not if it's not magic no magic happens if it is magic and we call the",
    "start": "1171760",
    "end": "1176960"
  },
  {
    "text": "magic function and now everything should work we import it the magic function is called",
    "start": "1176960",
    "end": "1182240"
  },
  {
    "text": "everything gets decorated and we're done except there's a bit of an issue",
    "start": "1182240",
    "end": "1189120"
  },
  {
    "text": "if you see in the output here we got hello one hello too but no goodbyes",
    "start": "1189120",
    "end": "1194480"
  },
  {
    "text": "um well if you look at what we're calling the magic function we call it",
    "start": "1194480",
    "end": "1199600"
  },
  {
    "text": "the first line of the module this is before we define the main function so when we import the model we check for",
    "start": "1199600",
    "end": "1206559"
  },
  {
    "text": "the calling module we get our main model and then we check for members in that model it's empty so we decorate all the",
    "start": "1206559",
    "end": "1214480"
  },
  {
    "text": "nothing and nothing happens so we need to do something else",
    "start": "1214480",
    "end": "1220559"
  },
  {
    "text": "one thing we can do is move the import down the line if we do it the same place we called",
    "start": "1220559",
    "end": "1225679"
  },
  {
    "text": "magic before it works but i don't know about you that does not look magical to me",
    "start": "1225679",
    "end": "1230799"
  },
  {
    "text": "that's iffy so we need to do something else well",
    "start": "1230799",
    "end": "1236880"
  },
  {
    "text": "python allows us to do parallel imports which means we can just instead of using the import statement we can write our",
    "start": "1236880",
    "end": "1243280"
  },
  {
    "text": "own code to import new code and again write the function it goes by the same way and we pass in the name of",
    "start": "1243280",
    "end": "1249520"
  },
  {
    "text": "the model we want to import but the path path to that file and so that would find",
    "start": "1249520",
    "end": "1254559"
  },
  {
    "text": "it and then we create a module object we add it to the cache and we execute it first forward",
    "start": "1254559",
    "end": "1262159"
  },
  {
    "text": "now we're going to do something a bit more fun we get the calling model then we take the name of the path and",
    "start": "1262159",
    "end": "1269120"
  },
  {
    "text": "the path of that model and import it again since we're executing the module while",
    "start": "1269120",
    "end": "1275120"
  },
  {
    "text": "we import it we will get the model after it's fully executed which means all the methods in it have been defined",
    "start": "1275120",
    "end": "1281360"
  },
  {
    "text": "now we can decorate everything and we should be okay",
    "start": "1281360",
    "end": "1286640"
  },
  {
    "text": "so the magic happens and we have a recursion error because we",
    "start": "1286640",
    "end": "1292080"
  },
  {
    "text": "imported the module and then the module imported magic again so we imported the module again so we the module imported",
    "start": "1292080",
    "end": "1299120"
  },
  {
    "text": "us again kept going going going until python fill up the stack a python unlike",
    "start": "1299120",
    "end": "1304799"
  },
  {
    "text": "in some languages it does allow for cyclic imports it's something useful you just need to make sure that they stop at",
    "start": "1304799",
    "end": "1310400"
  },
  {
    "text": "some point yeah otherwise you get a recursion l so we need to do something about that",
    "start": "1310400",
    "end": "1318760"
  },
  {
    "text": "in clc plus plus we'd use evil pogba ones or include guards here and i guess",
    "start": "1328159",
    "end": "1333280"
  },
  {
    "text": "we'll use an include guard as well when we import the model using our parallel import function",
    "start": "1333280",
    "end": "1339919"
  },
  {
    "text": "we can add a flag into that module then when we execute the magic we check is the flag",
    "start": "1339919",
    "end": "1345440"
  },
  {
    "text": "does the flag exist or not if the flag exists we don't need to do any magic because we're doing it",
    "start": "1345440",
    "end": "1350720"
  },
  {
    "text": "externally and we can just continue and this prevents the occasional",
    "start": "1350720",
    "end": "1355919"
  },
  {
    "text": "so now everything should work right well no",
    "start": "1355919",
    "end": "1361520"
  },
  {
    "text": "what happens now is we import the magic we create a new model we decorate everything great but",
    "start": "1361520",
    "end": "1367840"
  },
  {
    "text": "during the import we execute the module when we execute the model the main function is not yet decorated which",
    "start": "1367840",
    "end": "1374159"
  },
  {
    "text": "means that when the gritters try to push themselves onto the global stack there's",
    "start": "1374159",
    "end": "1379600"
  },
  {
    "text": "nothing there and we crash so we need to change the way we call the",
    "start": "1379600",
    "end": "1385600"
  },
  {
    "text": "main function this is fun because it allows us to do something a bit more like c plus plus in python whenever you double click",
    "start": "1385600",
    "end": "1391919"
  },
  {
    "text": "about a python file or executed for the command line the name of that model is going to be underscoring main underscore",
    "start": "1391919",
    "end": "1398400"
  },
  {
    "text": "underscore and this means we can check for that to find whether the module is currently importing magic is the main model or a",
    "start": "1398400",
    "end": "1405280"
  },
  {
    "text": "different model if it is the main model we just check whether there is a main function inside that model and if there",
    "start": "1405280",
    "end": "1411440"
  },
  {
    "text": "is we would execute that function once we finish executing it we just exit so essentially we check for the main",
    "start": "1411440",
    "end": "1417440"
  },
  {
    "text": "function we do this we run it just like c plus plus and this means that you can also remove",
    "start": "1417440",
    "end": "1423120"
  },
  {
    "text": "the main call from our function we just create the main function and everything works",
    "start": "1423120",
    "end": "1429120"
  },
  {
    "text": "um any questions okay",
    "start": "1429120",
    "end": "1435278"
  },
  {
    "text": "so let's look at the greater again um so far we've created this one class but",
    "start": "1435360",
    "end": "1440400"
  },
  {
    "text": "we're going to write a lot of classes not just the graded class so if we have here like six lines of boilerplate we",
    "start": "1440400",
    "end": "1447440"
  },
  {
    "text": "might want to be able to remove them we create the init which currently just pushes us onto the stack which is quite",
    "start": "1447440",
    "end": "1453600"
  },
  {
    "text": "pointless and we have the enter function which does basically nothing and we have",
    "start": "1453600",
    "end": "1458880"
  },
  {
    "text": "the exit which called which is the destructo you want to reduce some of that boilerplate now since this is a",
    "start": "1458880",
    "end": "1464320"
  },
  {
    "text": "class and we're an object-oriented language well the obvious thing to do is just create a base class to do the work",
    "start": "1464320",
    "end": "1470159"
  },
  {
    "text": "for us so if we have a base class that does something we can create a constructor",
    "start": "1470159",
    "end": "1476400"
  },
  {
    "text": "here named as the same same as the function and it operates like a regular constructor and we have the structure",
    "start": "1476400",
    "end": "1483520"
  },
  {
    "text": "sorry python does not allow me to use the tilde in a variable name so we have underscore instead still in my opinion",
    "start": "1483520",
    "end": "1490080"
  },
  {
    "text": "better than under swan also exit and we have the destructo and that's basically the entire reader class and removed all",
    "start": "1490080",
    "end": "1497039"
  },
  {
    "text": "the boilerplate as for the cpp class class we we have a constructor with suctal and",
    "start": "1497039",
    "end": "1504159"
  },
  {
    "text": "the useless end of any method in the constructor we push ourselves under the destructor scope and then we",
    "start": "1504159",
    "end": "1510159"
  },
  {
    "text": "check either a constructor for the class if there is one we call it then in the destructor we check either a defined",
    "start": "1510159",
    "end": "1516799"
  },
  {
    "text": "destructor if we have this factor we call it this factor and that works",
    "start": "1516799",
    "end": "1524880"
  },
  {
    "text": "additionally in we might have methods in our class and we want them to be decorated the same way that we did with",
    "start": "1524880",
    "end": "1530480"
  },
  {
    "text": "the main function which means that just like we went over the module object and and over all the",
    "start": "1530480",
    "end": "1535840"
  },
  {
    "text": "members to look for functions and decorate them we do the same with the class itself go over all the members of",
    "start": "1535840",
    "end": "1541279"
  },
  {
    "text": "the class and check they do not begin with a double underscore because that's special methods and we don't want to",
    "start": "1541279",
    "end": "1546400"
  },
  {
    "text": "handle those don't want decorate the dandelion also exit in it or enter",
    "start": "1546400",
    "end": "1552640"
  },
  {
    "text": "then we make sure that that thing is indeed the function not the variable and then we decorate it just like we did",
    "start": "1552640",
    "end": "1558720"
  },
  {
    "text": "before and let's see where we're standing now we have a greater class",
    "start": "1558720",
    "end": "1564799"
  },
  {
    "text": "it inherits from cvp class and basically works but that that cvp class",
    "start": "1564799",
    "end": "1571360"
  },
  {
    "text": "is is still a bit explicit i mean you have to write it all the time and i want it to look just like python code to be",
    "start": "1571360",
    "end": "1577679"
  },
  {
    "text": "completely implicit i mean in c plus plus when you have a class we don't need to say oh and and act like a regular",
    "start": "1577679",
    "end": "1583520"
  },
  {
    "text": "class we just write class and it works so what actually happens when we use",
    "start": "1583520",
    "end": "1590159"
  },
  {
    "text": "inheritance here and one very simplistic way of looking at it which is good for our case is",
    "start": "1590159",
    "end": "1596000"
  },
  {
    "text": "basically we take all the methods from the base class and copy them over into the subclass",
    "start": "1596000",
    "end": "1601520"
  },
  {
    "text": "now if we're just copying methods around and we're using python which is a dynamic opening language it allows us to",
    "start": "1601520",
    "end": "1608000"
  },
  {
    "text": "change objects at runtime we can just assign the methods directly",
    "start": "1608000",
    "end": "1613120"
  },
  {
    "text": "instead of using subclassing so instead of having a cpp class class",
    "start": "1613120",
    "end": "1619360"
  },
  {
    "text": "we can have a cbp class function that takes another takes a class and converts it into a cpp class",
    "start": "1619360",
    "end": "1626080"
  },
  {
    "text": "just like we created before we define all the init enter and exit methods we decorate all the current object methods",
    "start": "1626080",
    "end": "1633200"
  },
  {
    "text": "and then we just assign the new init accidental methods to our class and",
    "start": "1633200",
    "end": "1638240"
  },
  {
    "text": "return the new class this works then classes can be used with decorative",
    "start": "1638240",
    "end": "1644320"
  },
  {
    "text": "syntax as well so just use the cpp class function as a decorator and convert our",
    "start": "1644320",
    "end": "1650240"
  },
  {
    "text": "griddle to a cpp class now one last step we have to do here",
    "start": "1650240",
    "end": "1655440"
  },
  {
    "text": "in since before we just check oh this is an object is it a cvp class well you can",
    "start": "1655440",
    "end": "1661679"
  },
  {
    "text": "check for a using easy instance the checks for inheritance in python and you can see that the object was indeed an",
    "start": "1661679",
    "end": "1668240"
  },
  {
    "text": "instance of a cpp class now that we are not using subclassing we cannot do that so we had a small flag in the object that says yes this is a cbp",
    "start": "1668240",
    "end": "1675279"
  },
  {
    "text": "class not a regular python object",
    "start": "1675279",
    "end": "1679640"
  },
  {
    "text": "with that we can go and back to the magic function we wrote before and at the similar method function to decorate",
    "start": "1686480",
    "end": "1692720"
  },
  {
    "text": "all the fun at the module classes so again we go over all the members of the module",
    "start": "1692720",
    "end": "1697760"
  },
  {
    "text": "we check whether they are classes and unlike the functions we did before we make sure they were defined in the same",
    "start": "1697760",
    "end": "1703440"
  },
  {
    "text": "module and then we decorate them just like we did with the functions so now our greater looks like this and",
    "start": "1703440",
    "end": "1710559"
  },
  {
    "text": "no hint of context management or resource management anywhere our main is fairly straightforward",
    "start": "1710559",
    "end": "1716640"
  },
  {
    "text": "and everything just works any questions",
    "start": "1716640",
    "end": "1722000"
  },
  {
    "text": "okay so let's go over what we did so far in first everything is automatic and",
    "start": "1722840",
    "end": "1728559"
  },
  {
    "text": "selection is automatic whenever we leave a scope we destroy everything that needs to be stored destructed in that scope",
    "start": "1728559",
    "end": "1734000"
  },
  {
    "text": "and second it's implicit and we just import magic forms c plus plus and everything else just happens we don't",
    "start": "1734000",
    "end": "1740159"
  },
  {
    "text": "need to write any spatial code no don't need to do anything specific to make context management a resource management",
    "start": "1740159",
    "end": "1746640"
  },
  {
    "text": "work and additionally the main function is just called which is a lot more fun",
    "start": "1746640",
    "end": "1751840"
  },
  {
    "text": "our next stop is composition",
    "start": "1751840",
    "end": "1755440"
  },
  {
    "text": "so let's look back to where we started we had 11 lines of code four of them were",
    "start": "1757440",
    "end": "1762480"
  },
  {
    "text": "resource management now we have nine lines of code and two of them are resource management i think that's already better",
    "start": "1762480",
    "end": "1769200"
  },
  {
    "text": "but we have an issue and the cycle is currently called twice we create the zip file assigned to a",
    "start": "1769200",
    "end": "1775520"
  },
  {
    "text": "local variable to a member variable and leave the constructor as soon as we do that the zip file gets distracted",
    "start": "1775520",
    "end": "1781760"
  },
  {
    "text": "because we left the scope then when eventually we go to the destructo",
    "start": "1781760",
    "end": "1787039"
  },
  {
    "text": "of the archive it's called again and we actually destroy it twice",
    "start": "1787039",
    "end": "1792480"
  },
  {
    "text": "it would probably be okay because it's python and we don't have any dangling pointers or anything like that but we're",
    "start": "1792480",
    "end": "1798640"
  },
  {
    "text": "still using uh already distracted object which would probably be closed and nothing would work",
    "start": "1798640",
    "end": "1804640"
  },
  {
    "text": "so we need to fix that simple way to fix that would be just to remove it from the current scope",
    "start": "1804640",
    "end": "1810159"
  },
  {
    "text": "yeah create the member we'll create a variable assigned to a local member and then remove it from the desktop scope",
    "start": "1810159",
    "end": "1815760"
  },
  {
    "text": "and we know it would not get destructed automatically when we leave the function now how do we do that",
    "start": "1815760",
    "end": "1821120"
  },
  {
    "text": "whether we move function and remove method toward the stack or scope maybe call",
    "start": "1821120",
    "end": "1826159"
  },
  {
    "text": "stack which is the list dot remove and pass in the member and we have one issue here list dot remove is a quality based",
    "start": "1826159",
    "end": "1833279"
  },
  {
    "text": "and not identity based so if you have two different context measures with which equate two",
    "start": "1833279",
    "end": "1838799"
  },
  {
    "text": "and we may destroy the wrong one we remove the wrong one which is not a very pleasant thing to do",
    "start": "1838799",
    "end": "1845440"
  },
  {
    "text": "so we need to take something from the c plus plus playbook and create a customization object here we create an",
    "start": "1845440",
    "end": "1851200"
  },
  {
    "text": "identity comparator it basically takes an object and overrides the",
    "start": "1851200",
    "end": "1856399"
  },
  {
    "text": "eq method which is what python uses for equality checks and we use the ease statement is a check here",
    "start": "1856399",
    "end": "1863120"
  },
  {
    "text": "which is identity it checks identity and not equality then we can pass that to our remove",
    "start": "1863120",
    "end": "1868559"
  },
  {
    "text": "function and then instead of checking for equality it would automatically check for identity with all the objects",
    "start": "1868559",
    "end": "1874640"
  },
  {
    "text": "and things just work as we want them to do",
    "start": "1874640",
    "end": "1879679"
  },
  {
    "text": "now we can call remove and we're good to go but this is still explicit and we are",
    "start": "1879679",
    "end": "1885120"
  },
  {
    "text": "working on making everything implicit and transparent",
    "start": "1885120",
    "end": "1889919"
  },
  {
    "text": "so um if you have to do something every time we're assigned to a variable or get the value from a variable the obvious",
    "start": "1891039",
    "end": "1897760"
  },
  {
    "text": "thing to do is to use getters and settles so in get zip file and we just return the value from the right",
    "start": "1897760",
    "end": "1903200"
  },
  {
    "text": "attribute that's pretty straightforward because we don't need to do anything when we set the zip file over there",
    "start": "1903200",
    "end": "1908960"
  },
  {
    "text": "several steps first if there is already a value in that member variable and we need to distract that value because",
    "start": "1908960",
    "end": "1915039"
  },
  {
    "text": "otherwise we'll have a dangling object and then once we do that we can assign",
    "start": "1915039",
    "end": "1921360"
  },
  {
    "text": "our new member and remove it from the destructor scope and again like we had before with",
    "start": "1921360",
    "end": "1928880"
  },
  {
    "text": "descriptors sorry with decorators a python has a special syntax following",
    "start": "1928880",
    "end": "1935360"
  },
  {
    "text": "ghettos and settles called descriptors a descriptor has to be a class member variable not an instance variable",
    "start": "1935360",
    "end": "1942000"
  },
  {
    "text": "it has to implement the gets and set methods and it may also implement the set name method which is used to let the",
    "start": "1942000",
    "end": "1948320"
  },
  {
    "text": "variable know which variable name it's assigned to so specifically here",
    "start": "1948320",
    "end": "1953519"
  },
  {
    "text": "when we initialize cppml when the class itself gets created not an instance but the class type",
    "start": "1953519",
    "end": "1960240"
  },
  {
    "text": "set name would be called for the cpp member instance assigned to zip file variable with the name zip file so that",
    "start": "1960240",
    "end": "1967279"
  },
  {
    "text": "it knows oh i'm the zip file variable and not a different variable and to create the cpp member class we",
    "start": "1967279",
    "end": "1974240"
  },
  {
    "text": "implement the free method methods we have set name which takes the name given to it and stores a private name since",
    "start": "1974240",
    "end": "1981679"
  },
  {
    "text": "this is a class member variable not an instance member variable and we have one for the class if we have",
    "start": "1981679",
    "end": "1987360"
  },
  {
    "text": "multiple instances it would still be the same cpp member instance so in order to actually store values in",
    "start": "1987360",
    "end": "1993120"
  },
  {
    "text": "the class in the instance we give it a new name and assign directly to the",
    "start": "1993120",
    "end": "1998320"
  },
  {
    "text": "instance with that name then in get we access the instance with the name we created with the",
    "start": "1998320",
    "end": "2005039"
  },
  {
    "text": "underscore prefix and when we get the value and when we set the value we do just what we did",
    "start": "2005039",
    "end": "2010080"
  },
  {
    "text": "before but again using getter and setup with the private name we created",
    "start": "2010080",
    "end": "2016240"
  },
  {
    "text": "any questions okay and",
    "start": "2016240",
    "end": "2022320"
  },
  {
    "text": "and then everything just works we assign to the variable it gets removed from the scope it does not get automatically distracted",
    "start": "2022320",
    "end": "2028399"
  },
  {
    "text": "um but we still called the desktop zip file explicitly in our destructo and in",
    "start": "2028399",
    "end": "2034480"
  },
  {
    "text": "c plus plus we don't need to do that so we probably shouldn't have to do it in python evil um",
    "start": "2034480",
    "end": "2040799"
  },
  {
    "text": "so we add something else to the exit method we define before we go through all the members of them of the class",
    "start": "2040799",
    "end": "2048000"
  },
  {
    "text": "and we check whether we start with underscore if they do they're the private members and we don't want to touch those because then we distract",
    "start": "2048000",
    "end": "2054638"
  },
  {
    "text": "them twice and we check whether the value currently stored in the member variable is a cpp",
    "start": "2054639",
    "end": "2059679"
  },
  {
    "text": "class if it is not it does not have a distributor we will have nothing to call and if it is we call the exit method we",
    "start": "2059679",
    "end": "2066079"
  },
  {
    "text": "call it destructo and carry on so essentially we just automatically call all the destructors of all the",
    "start": "2066079",
    "end": "2072158"
  },
  {
    "text": "members once we finished calling our disciple and now the class looks like this",
    "start": "2072159",
    "end": "2079040"
  },
  {
    "text": "we have zip file it's a c plus plus member and no more resource management code but",
    "start": "2079040",
    "end": "2085040"
  },
  {
    "text": "there's still something i don't like here and this is explicit and i mean i'm writing python code why should it say",
    "start": "2085040",
    "end": "2091200"
  },
  {
    "text": "cpp member that makes no sense uh so we can do better python has what's called type annotations and patients are",
    "start": "2091200",
    "end": "2098000"
  },
  {
    "text": "a wonderful thing they do absolutely nothing they will just type in sorry",
    "start": "2098000",
    "end": "2103599"
  },
  {
    "text": "objects that can be attached to different things they can be attached to variables they can be attached to",
    "start": "2103599",
    "end": "2109119"
  },
  {
    "text": "functions classes return types function arguments everything can have an attribute annotation assigned to it at",
    "start": "2109119",
    "end": "2116400"
  },
  {
    "text": "runtime it does absolutely nothing it's sometimes static type checking",
    "start": "2116400",
    "end": "2121599"
  },
  {
    "text": "but it is stored and it is accessible at runtime which is the important part",
    "start": "2121599",
    "end": "2127440"
  },
  {
    "text": "now um what we want to do now is instead of assigning the members directly we go to our cpp class method a function and",
    "start": "2127839",
    "end": "2135359"
  },
  {
    "text": "add a function to create all the members what you do is we go through them patients and for orientation we assume that this",
    "start": "2135359",
    "end": "2142560"
  },
  {
    "text": "is a new member variable and we create a new member a cbp member we create the cpp member object since",
    "start": "2142560",
    "end": "2149520"
  },
  {
    "text": "the class has already been created if set name would not be called automatically so we call it ourselves",
    "start": "2149520",
    "end": "2155040"
  },
  {
    "text": "with the name of the variable we got from the annotations and then we assign it to the class in",
    "start": "2155040",
    "end": "2160240"
  },
  {
    "text": "the same name and additionally we save all the member names and for later use",
    "start": "2160240",
    "end": "2167440"
  },
  {
    "text": "then in the exit method in our destructo instead of going for all the members of the class and checking whether they're",
    "start": "2167440",
    "end": "2174079"
  },
  {
    "text": "variables or not we just go over the names and already know those are member variables because that's what we defined",
    "start": "2174079",
    "end": "2180960"
  },
  {
    "text": "and so we distract them and now you basically done we have seven",
    "start": "2180960",
    "end": "2187200"
  },
  {
    "text": "lines of code and no lines of resource management and everything just works very",
    "start": "2187200",
    "end": "2193040"
  },
  {
    "text": "transparently now you might claim that the zip filenation is for resource management but then i would say no it's",
    "start": "2193040",
    "end": "2199440"
  },
  {
    "text": "for the building you want to set the type so everyone would know what happens there and",
    "start": "2199440",
    "end": "2204880"
  },
  {
    "text": "since it's my talk you have to agree so what did we do so far",
    "start": "2204880",
    "end": "2210960"
  },
  {
    "text": "um everything is automatic and the suckers are called when they are needed we don't",
    "start": "2210960",
    "end": "2216079"
  },
  {
    "text": "need to do anything for that everything is composable if we add the new member then it just folks we don't",
    "start": "2216079",
    "end": "2221760"
  },
  {
    "text": "need to add any special code for handling that and everything is implicit assuming you",
    "start": "2221760",
    "end": "2228560"
  },
  {
    "text": "write a specific type of code i mean you need to import the module and the magic form c plus plus",
    "start": "2228560",
    "end": "2234800"
  },
  {
    "text": "and you need to make sure that you write the constructor and destructo the right way and use annotations if you do that",
    "start": "2234800",
    "end": "2242160"
  },
  {
    "text": "everything just works with wonder for c plus plus the structural semantics and you're basically good to go and we don't",
    "start": "2242160",
    "end": "2248720"
  },
  {
    "text": "need to add any special code to our code there's no change in the interfaces when we add the new distractor and it does",
    "start": "2248720",
    "end": "2254800"
  },
  {
    "text": "not pollute the interface as we go higher up yes that's lying because we have to",
    "start": "2254800",
    "end": "2259839"
  },
  {
    "text": "write all of the code in this method and if you just use regular python code nothing would work",
    "start": "2259839",
    "end": "2266000"
  },
  {
    "text": "but assuming you write all your project this way if you add a new constructor and distract your code you don't need to",
    "start": "2266000",
    "end": "2271920"
  },
  {
    "text": "make any foldable changes um any questions",
    "start": "2271920",
    "end": "2277440"
  },
  {
    "text": "okay before we continue to some bonus content i want to thank a few people a bracket",
    "start": "2278480",
    "end": "2284720"
  },
  {
    "text": "kin for helping me with this talk and going over my content again and again and again to make sure everything is",
    "start": "2284720",
    "end": "2290320"
  },
  {
    "text": "okay edition by levy from the cppcon conference is it called cpp sorry",
    "start": "2290320",
    "end": "2295599"
  },
  {
    "text": "conference that encouraged me to submit the talk and the title and the sister for helping with",
    "start": "2295599",
    "end": "2301359"
  },
  {
    "text": "the many many annoying questions i had before going here and now for extras and we're going to",
    "start": "2301359",
    "end": "2307440"
  },
  {
    "text": "cover three things one in return values two this and three member access specifiers",
    "start": "2307440",
    "end": "2314640"
  },
  {
    "text": "and this is going to be fine with live coding",
    "start": "2314640",
    "end": "2318319"
  },
  {
    "text": "oh can you see",
    "start": "2320560",
    "end": "2324200"
  },
  {
    "text": "okay can you see the cuddle should they make it larger",
    "start": "2328880",
    "end": "2333119"
  },
  {
    "text": "battle oh should be louder okay great",
    "start": "2336960",
    "end": "2342560"
  },
  {
    "text": "so the first thing we want to do um for when we created a function and we created some variable inside the",
    "start": "2342560",
    "end": "2348880"
  },
  {
    "text": "function and then we returned the variable from the function and the variable got destroyed",
    "start": "2348880",
    "end": "2354400"
  },
  {
    "text": "because we left the scope we call it the selector and that's not very useful for anything i mean a caller function to",
    "start": "2354400",
    "end": "2360400"
  },
  {
    "text": "create an object i want to get that object back in a working state otherwise what am i going to do in my code so",
    "start": "2360400",
    "end": "2368320"
  },
  {
    "text": "we can solve that fairly easily and this is the cpp function decoder we used before and it has a bit of extra code",
    "start": "2368320",
    "end": "2374720"
  },
  {
    "text": "but we'll ignore it for now we call our function and we get the return value once we get the return",
    "start": "2374720",
    "end": "2379760"
  },
  {
    "text": "value and we know that it left the function so just like what we did before",
    "start": "2379760",
    "end": "2385680"
  },
  {
    "text": "so we've member variables we know we can remove it from the current scope however after we remove it we need to",
    "start": "2385680",
    "end": "2391280"
  },
  {
    "text": "assign to a new scope before we assign it into the class scope now we don't have a class code so we need to assign",
    "start": "2391280",
    "end": "2396320"
  },
  {
    "text": "it to the parent scope just define the calling function do it using rebind to parent this cycle",
    "start": "2396320",
    "end": "2402320"
  },
  {
    "text": "and we check whether the function is a cpp class function and whether the object is a cpp class object if it",
    "start": "2402320",
    "end": "2409359"
  },
  {
    "text": "is we remove it from the current scope and push it into the parent scope then we can return values freely",
    "start": "2409359",
    "end": "2416400"
  },
  {
    "text": "passing arguments however is a completely different subject and we are not going to cover that",
    "start": "2416400",
    "end": "2421839"
  },
  {
    "text": "essentially a lifetime some lifetime semantics are a big and complicated subject that",
    "start": "2421839",
    "end": "2428800"
  },
  {
    "text": "we're not going to delve into because even in c plus it's complicated now the next thing we want to do",
    "start": "2428800",
    "end": "2436560"
  },
  {
    "text": "is this i mean i know that some of you are python programmer but some of you are c plus",
    "start": "2436560",
    "end": "2442000"
  },
  {
    "text": "plus programmers and coming from c plus plus to python or from basically any object-oriented language to python it's",
    "start": "2442000",
    "end": "2447920"
  },
  {
    "text": "quite annoying you have to write self everywhere we have a function takes no variables it takes no arguments itself",
    "start": "2447920",
    "end": "2453920"
  },
  {
    "text": "you have a function takes some arguments self and then everything else it gets quite cumbersome to write it all",
    "start": "2453920",
    "end": "2460400"
  },
  {
    "text": "the time and we we just don't want it but it would be a lot nicer if we could just remove that annoying thing and you",
    "start": "2460400",
    "end": "2466800"
  },
  {
    "text": "know just access this so we're going to use the same tricks as we did before",
    "start": "2466800",
    "end": "2473040"
  },
  {
    "text": "and naturally a global variable because those are the best we call this so it's defined",
    "start": "2473040",
    "end": "2479359"
  },
  {
    "text": "everywhere and we can just use it and",
    "start": "2479359",
    "end": "2484000"
  },
  {
    "text": "then we need to somehow know what object is that this object so we had another",
    "start": "2485680",
    "end": "2491520"
  },
  {
    "text": "scope just like we did before with the destructor scope we created this scope this scope is specific to a methods and",
    "start": "2491520",
    "end": "2498960"
  },
  {
    "text": "not functions so now we have a method decorator and a function decorator which works slightly differently",
    "start": "2498960",
    "end": "2505920"
  },
  {
    "text": "and you want to create this scope we take the self object and push it onto a global this stack",
    "start": "2505920",
    "end": "2512560"
  },
  {
    "text": "again global stacks are a wonderful wonderful thing and maybe not in production code",
    "start": "2512560",
    "end": "2519040"
  },
  {
    "text": "and then because in python we not have a copy assignment we don't have assignment operators or anything like that when we",
    "start": "2519040",
    "end": "2525200"
  },
  {
    "text": "assign the new variable a new value to a variable we just rebind the name nothing else happened no call gets",
    "start": "2525200",
    "end": "2532079"
  },
  {
    "text": "called just a pure assignment and we bind the name so if instead of",
    "start": "2532079",
    "end": "2537920"
  },
  {
    "text": "uh using a proxy we just assigned to the this variable and nothing would work to",
    "start": "2537920",
    "end": "2543359"
  },
  {
    "text": "just be a new variable and nothing would actually happen instead we use this proxy",
    "start": "2543359",
    "end": "2550960"
  },
  {
    "text": "the this box is fairly straightforward it uses a special method in python get apple um allows us to hack yeah sorry to",
    "start": "2550960",
    "end": "2560079"
  },
  {
    "text": "hook into the member access in python if the name of an object of an attribute is not found will you",
    "start": "2560079",
    "end": "2566480"
  },
  {
    "text": "call the getaterma object just a sec",
    "start": "2566480",
    "end": "2573119"
  },
  {
    "text": "we call get utter and underscondal to get the attribute of the object",
    "start": "2576720",
    "end": "2582720"
  },
  {
    "text": "using our code in this case we would get to the top of the d stack ask for the name of the attribute using get",
    "start": "2582720",
    "end": "2588880"
  },
  {
    "text": "attribute and return the same full setting and then you can write code that uses this",
    "start": "2588880",
    "end": "2594079"
  },
  {
    "text": "everywhere and completely ignores self additionally",
    "start": "2594079",
    "end": "2600240"
  },
  {
    "text": "as you can see we we'll no longer we capture the in self variable in our wrapper and we just don't fold it into",
    "start": "2604319",
    "end": "2610160"
  },
  {
    "text": "the function so now we can just write the greater this way and",
    "start": "2610160",
    "end": "2615200"
  },
  {
    "text": "we have we just pass in the name no self use this and everything will just work perfectly",
    "start": "2615200",
    "end": "2621119"
  },
  {
    "text": "which is really fun",
    "start": "2621119",
    "end": "2626160"
  },
  {
    "text": "now one thing that in my experience um c plus plus programmers really hate",
    "start": "2626160",
    "end": "2632400"
  },
  {
    "text": "about python is access specifier i mean in cprs plus",
    "start": "2632400",
    "end": "2638880"
  },
  {
    "text": "we have public private protected and it actually does something titan well it's a bit different",
    "start": "2638880",
    "end": "2644880"
  },
  {
    "text": "if you want to create a public method we just create a method wonderful everyone can access it and we're good to",
    "start": "2644880",
    "end": "2651280"
  },
  {
    "text": "go if you want to create a private method",
    "start": "2651280",
    "end": "2655599"
  },
  {
    "text": "we just append and underscore prepend and underscore and then everyone knows",
    "start": "2658400",
    "end": "2663760"
  },
  {
    "text": "it's a private method and they should never ever recall that which means that if they accidentally",
    "start": "2663760",
    "end": "2670079"
  },
  {
    "text": "need to access some inter something internally in your class they would definitely call that and you would never be able to change that code ever again",
    "start": "2670079",
    "end": "2677359"
  },
  {
    "text": "so python gives us another option which is using a double underscore",
    "start": "2677359",
    "end": "2682880"
  },
  {
    "text": "when we're using a double underscore every access to that function from outside the class would have to use that",
    "start": "2682880",
    "end": "2689040"
  },
  {
    "text": "mangled name which is underscore so name of the class another underscore and then the method that would absolutely prevent",
    "start": "2689040",
    "end": "2695760"
  },
  {
    "text": "people from using it right i mean you've never hacked anything weird in your code to access some something internal even",
    "start": "2695760",
    "end": "2702079"
  },
  {
    "text": "not in python not in c plus plus not in any language that you've ever used so so we might be able to do better to",
    "start": "2702079",
    "end": "2708880"
  },
  {
    "text": "actually have excess specifiers",
    "start": "2708880",
    "end": "2713760"
  },
  {
    "text": "something like this maybe well name is private and the rest is public",
    "start": "2716240",
    "end": "2722480"
  },
  {
    "text": "so what are we going to do here this is a bit more complicated it's going to include most of what we did so",
    "start": "2722480",
    "end": "2729359"
  },
  {
    "text": "far it also doubled the size of my library from around 180 lines to around 360.",
    "start": "2729359",
    "end": "2738319"
  },
  {
    "text": "because it's a lot simpler than the rest of the code so first we need to create our x specifier to have public private",
    "start": "2738319",
    "end": "2743440"
  },
  {
    "text": "and protected as one does our default access specifier is of course private because we want to be on",
    "start": "2743440",
    "end": "2749920"
  },
  {
    "text": "the safe side and we have um some global access",
    "start": "2749920",
    "end": "2754960"
  },
  {
    "text": "variable to store the access now we want to create a function a class",
    "start": "2754960",
    "end": "2761760"
  },
  {
    "text": "the code goes as follows we start from the top and start defining things here we have a name and it",
    "start": "2761760",
    "end": "2768240"
  },
  {
    "text": "doesn't have a value only an annotation so it goes into the annotations dict then we call public we'll get to that in",
    "start": "2768240",
    "end": "2774160"
  },
  {
    "text": "a moment and we define some functions functions just go into the class and we have functions",
    "start": "2774160",
    "end": "2779599"
  },
  {
    "text": "additionally everything that we define here is a index is in a new scope that's the class",
    "start": "2779599",
    "end": "2785200"
  },
  {
    "text": "definition scope which exists as long as we're defining class we can run any code we want in here",
    "start": "2785200",
    "end": "2791119"
  },
  {
    "text": "and for example we're calling a function inside the class definition it's called when we define the class not when you",
    "start": "2791119",
    "end": "2797839"
  },
  {
    "text": "instantiate it so what do we actually do here",
    "start": "2797839",
    "end": "2803640"
  },
  {
    "text": "well obviously we set the access which goes as follows and whenever we",
    "start": "2808960",
    "end": "2814400"
  },
  {
    "text": "call set access we go through all the members that already exist in the class we go output we use the stack to get the",
    "start": "2814400",
    "end": "2820319"
  },
  {
    "text": "local variable stockhold and take all the variables from bell and the annotations we check which variables",
    "start": "2820319",
    "end": "2826160"
  },
  {
    "text": "are new in the and all the new ones get assigned in the current same project and",
    "start": "2826160",
    "end": "2832640"
  },
  {
    "text": "access level and we save that in new value in the access the dictionary that we defined",
    "start": "2832640",
    "end": "2838079"
  },
  {
    "text": "earlier and with the name of the current class so that we know those access pacifiers",
    "start": "2838079",
    "end": "2843599"
  },
  {
    "text": "belong to those variables inside this class so basically when we go for the little",
    "start": "2843599",
    "end": "2849440"
  },
  {
    "text": "and once we call public name would be set to private because it's before the call to public",
    "start": "2849440",
    "end": "2855040"
  },
  {
    "text": "and nothing would happen to those they would stay floating around with no expensive files",
    "start": "2855040",
    "end": "2861280"
  },
  {
    "text": "then in cvp class when we create the class methods",
    "start": "2864800",
    "end": "2869599"
  },
  {
    "text": "we also get the member access for every class and pass it to the cpr method function",
    "start": "2869920",
    "end": "2876079"
  },
  {
    "text": "think class class and method function and class function or that gets a bit",
    "start": "2876079",
    "end": "2881119"
  },
  {
    "text": "confusing and so basically check the global access dict",
    "start": "2881119",
    "end": "2886800"
  },
  {
    "text": "for the current class if not none exists we just take a default one we should just have a private access specifier",
    "start": "2886800",
    "end": "2893920"
  },
  {
    "text": "and then for every member in the class we get for that member name the current specifier if none exist we default to",
    "start": "2893920",
    "end": "2901359"
  },
  {
    "text": "private so if we just create one function we didn't call any access specifiers it would be",
    "start": "2901359",
    "end": "2906720"
  },
  {
    "text": "private and one switch and since each time we call access pacifier we change",
    "start": "2906720",
    "end": "2912000"
  },
  {
    "text": "the current specifier for the class to whatever specifier it was in this case public",
    "start": "2912000",
    "end": "2917440"
  },
  {
    "text": "so when we create the class those functions would be public",
    "start": "2917440",
    "end": "2922720"
  },
  {
    "text": "any questions so far okay also since this is live coding stop me",
    "start": "2922720",
    "end": "2930000"
  },
  {
    "text": "if i'm missing something or if you need any explanations",
    "start": "2930000",
    "end": "2935039"
  },
  {
    "text": "then in cpp method we need to check the access and we know that we will call we",
    "start": "2935680",
    "end": "2941520"
  },
  {
    "text": "need to know who called us and how so to know where we will call the form and we create a color scope",
    "start": "2941520",
    "end": "2947680"
  },
  {
    "text": "and just like the previous scopes it's a stack it's a global stack that solves the colors",
    "start": "2947680",
    "end": "2953119"
  },
  {
    "text": "it can either store a function caller or a class caller if it's a class caller we add the class itself and if the function",
    "start": "2953119",
    "end": "2960480"
  },
  {
    "text": "caller we just add the function then we call check access we get the",
    "start": "2960480",
    "end": "2966880"
  },
  {
    "text": "current caller so that we know who called us and comp and check whether the current caller can access this specific",
    "start": "2966880",
    "end": "2972960"
  },
  {
    "text": "function and with the current access so basically go if the caller is none",
    "start": "2972960",
    "end": "2979440"
  },
  {
    "text": "which means we are up to a regular python function with no cpp functions in the middle just yeah yeah we can use",
    "start": "2979440",
    "end": "2986079"
  },
  {
    "text": "that because i want to be able to write tests and i want to be able to use my code for python code this is completely unaware",
    "start": "2986079",
    "end": "2992400"
  },
  {
    "text": "of all my shenanigans then if it's public we can always access",
    "start": "2992400",
    "end": "2997440"
  },
  {
    "text": "if it's protected we check whether the current class is an instance of the same class as before and this also works with",
    "start": "2997440",
    "end": "3003520"
  },
  {
    "text": "subclassing so we're on the safe side and if it's private we make sure those classes are of the same type",
    "start": "3003520",
    "end": "3010640"
  },
  {
    "text": "if none of those things apply just return false",
    "start": "3010640",
    "end": "3015440"
  },
  {
    "text": "and this is what happens for methods for variables",
    "start": "3017839",
    "end": "3022880"
  },
  {
    "text": "and we have our cpp member and we call check access on the get and the",
    "start": "3023280",
    "end": "3028559"
  },
  {
    "text": "set methods so we get basically the same behavior and",
    "start": "3028559",
    "end": "3034640"
  },
  {
    "text": "both for functions and for variables now we can go to the greater and we know",
    "start": "3034640",
    "end": "3040319"
  },
  {
    "text": "that this is public so we can run the code and everything works however",
    "start": "3040319",
    "end": "3045680"
  },
  {
    "text": "if i remove the public and call it again we get an xsl because we're trying to",
    "start": "3045680",
    "end": "3051680"
  },
  {
    "text": "call a function that is private",
    "start": "3051680",
    "end": "3056640"
  },
  {
    "text": "and that's basically it any questions",
    "start": "3057599",
    "end": "3061920"
  },
  {
    "text": "okay thank you [Applause]",
    "start": "3063599",
    "end": "3070480"
  },
  {
    "text": "and also if you want the code is online and the talk the slide is going to be online as well and thank you for coming",
    "start": "3072800",
    "end": "3081480"
  },
  {
    "text": "you",
    "start": "3086240",
    "end": "3088319"
  }
]