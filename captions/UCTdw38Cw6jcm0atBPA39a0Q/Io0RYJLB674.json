[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "hi everybody it's great to be in Sydney um I'm Rob Richardson um some",
    "start": "9280",
    "end": "15320"
  },
  {
    "text": "people know me as Rob Rich um robor rich on Twitter it's it's great to be in",
    "start": "15320",
    "end": "21000"
  },
  {
    "text": "Sydney here's the part where I say I'm definitely going to post the slides of my blog",
    "start": "21000",
    "end": "26760"
  },
  {
    "text": "tonight um you're going to email me in a week or two I'm going to reply in a month or two no really I'm going to post",
    "start": "26760",
    "end": "33079"
  },
  {
    "text": "you can go to my blog right now Rob rich.org representations and you can pop open the",
    "start": "33079",
    "end": "38680"
  },
  {
    "text": "slide deck right now we're going to learn es6 the language and the tools Rob rich.org is my",
    "start": "38680",
    "end": "45440"
  },
  {
    "text": "blog so that was",
    "start": "47680",
    "end": "53879"
  },
  {
    "text": "fun well maybe I won't be using",
    "start": "53879",
    "end": "58120"
  },
  {
    "text": "this so I do a few things in uh JavaScript",
    "start": "58920",
    "end": "64439"
  },
  {
    "text": "and a few things in net um you're not going to trust what I have to say unless",
    "start": "64439",
    "end": "69479"
  },
  {
    "text": "you know that I'm know what I'm talking about um so that's me uh you can hire me",
    "start": "69479",
    "end": "75159"
  },
  {
    "text": "to do this so I'm from Arizona in the United",
    "start": "75159",
    "end": "80520"
  },
  {
    "text": "States um there's me Arizona is a great place this isn't",
    "start": "80520",
    "end": "85960"
  },
  {
    "text": "my picture but uh I wish it was um I've seen skylines like that though and it is",
    "start": "85960",
    "end": "92079"
  },
  {
    "text": "so beautiful but you know every Paradise has a downside here's the weather in",
    "start": "92079",
    "end": "99119"
  },
  {
    "text": "Phoenix a little warm so we're going to talk about",
    "start": "99119",
    "end": "106000"
  },
  {
    "text": "es6 now um starting off terminology es6 well is it JavaScript is it",
    "start": "106000",
    "end": "112680"
  },
  {
    "start": "107000",
    "end": "160000"
  },
  {
    "text": "JavaScript Harmony is it what's the difference between es6 and this ecmascript 2015 thing well",
    "start": "112680",
    "end": "120360"
  },
  {
    "text": "well in actuality all of them are exactly the same thing um as we got",
    "start": "120360",
    "end": "125479"
  },
  {
    "text": "going along ES3 es5 because programmers can't count es6 and and we got to the",
    "start": "125479",
    "end": "131879"
  },
  {
    "text": "tail end of es6 and they said well we want to go on a faster Cadence we want to go on a yearly Cadence so instead of",
    "start": "131879",
    "end": "137160"
  },
  {
    "text": "calling it es6 we're going to call it es2 2015 and the the industry kind of",
    "start": "137160",
    "end": "143239"
  },
  {
    "text": "went eh so going forward we'll have es 2015 es26 and we're going to call them",
    "start": "143239",
    "end": "150120"
  },
  {
    "text": "es6 and es7 because you know naming conventions naming is",
    "start": "150120",
    "end": "156440"
  },
  {
    "text": "hard so es6 that's what I'll call it today but you can call it whatever you'd",
    "start": "156440",
    "end": "161680"
  },
  {
    "start": "160000",
    "end": "193000"
  },
  {
    "text": "like the es6 story on the server is really interesting as well but we're going to focus on the es6 story inside",
    "start": "161680",
    "end": "169000"
  },
  {
    "text": "the browser you've probably been doing ES3 for a while es5 is getting pretty cool and you open up es6 and it's",
    "start": "169000",
    "end": "178040"
  },
  {
    "text": "like the term that comes to mind is visual Fred remember when we tried to go from VB to vb.net and we had this big",
    "start": "178760",
    "end": "186159"
  },
  {
    "text": "trauma it's really not that hard and so hopefully we can get over that move and",
    "start": "186159",
    "end": "191400"
  },
  {
    "text": "and get towards es6 so I'm going to kind of break it into um new two major groups of things",
    "start": "191400",
    "end": "200080"
  },
  {
    "start": "193000",
    "end": "225000"
  },
  {
    "text": "associated with es6 there's the new features of the language which is really elegant and then there's also new syntax",
    "start": "200080",
    "end": "207239"
  },
  {
    "text": "that makes existing jobs easier now ultimately we're going to want to latch on to this really hard and this is",
    "start": "207239",
    "end": "213560"
  },
  {
    "text": "going to be a theme that we go that we keep coming back to we're going to want to lat on to this and and keep running",
    "start": "213560",
    "end": "219959"
  },
  {
    "text": "with this and and es6 all the things and that's not it ideally you want to create",
    "start": "219959",
    "end": "229000"
  },
  {
    "text": "um create these experiences to increase legibility of your code so sprinkle in",
    "start": "229000",
    "end": "235079"
  },
  {
    "text": "these features as it makes sense but don't go overboard and try an es6 all the the things grab a few features as",
    "start": "235079",
    "end": "242079"
  },
  {
    "text": "they start to make sense and Implement that in your code and you'll have a much more successful",
    "start": "242079",
    "end": "248000"
  },
  {
    "text": "experience so new features and new syntax new ways of doing existing things",
    "start": "248000",
    "end": "255840"
  },
  {
    "text": "under the hood it it falls back to the way where uh we've always done it we'll see that with classes in",
    "start": "255840",
    "end": "262320"
  },
  {
    "start": "262000",
    "end": "325000"
  },
  {
    "text": "particular so the magic question can I use it today yes but",
    "start": "262320",
    "end": "270320"
  },
  {
    "text": "so I'm going to click through here to the ecmascript 6 compatibility table and it's really fun to kind of see",
    "start": "270320",
    "end": "277360"
  },
  {
    "text": "well if I have this browser how much of es6 does it support and we're getting",
    "start": "277360",
    "end": "283360"
  },
  {
    "text": "pretty good um except for this one and and uh and this one and then we get into",
    "start": "283360",
    "end": "292560"
  },
  {
    "text": "mobile browsers and we start falling off again so at this point you're going to turn me off and say yeah that no",
    "start": "292560",
    "end": "299960"
  },
  {
    "text": "especially as we get into 2016 or into other features we start seeing this",
    "start": "299960",
    "end": "306680"
  },
  {
    "text": "support go down a whole lot so how can I use it today",
    "start": "306680",
    "end": "312240"
  },
  {
    "text": "well let's create a mechanism where let's imagine a reality",
    "start": "312240",
    "end": "317919"
  },
  {
    "text": "where I write an es6 and I compile to",
    "start": "317919",
    "end": "324800"
  },
  {
    "text": "es5 well we call it transpiling well you know how's transpiling different than compiling",
    "start": "324800",
    "end": "331960"
  },
  {
    "start": "325000",
    "end": "468000"
  },
  {
    "text": "some would argue compiling is the umbrella like unit testing is the umbrella and then there's little pieces",
    "start": "331960",
    "end": "337560"
  },
  {
    "text": "under it some people argue that unit testing is one of those little pieces and compiling is one of those pieces and",
    "start": "337560",
    "end": "343319"
  },
  {
    "text": "transpiling is a different piece for our purposes transpiling is",
    "start": "343319",
    "end": "348479"
  },
  {
    "text": "just taking one language and moving it to another language that has a similar",
    "start": "348479",
    "end": "354720"
  },
  {
    "text": "level of abstraction when we compile we go from C++ to C",
    "start": "354720",
    "end": "360039"
  },
  {
    "text": "or we go from C to assembly we're going from es6 to es5 we're taking a sideways",
    "start": "360039",
    "end": "367880"
  },
  {
    "text": "track is that compiling ask the typescript guys yeah we're going to call it",
    "start": "367880",
    "end": "375080"
  },
  {
    "text": "transpiling we'll take code from es6 and we'll turn it into es5 code and then now",
    "start": "375080",
    "end": "381520"
  },
  {
    "text": "because we have Evergreen browsers es5 code does just fine in time we can take maybe some of those shims out and just",
    "start": "381520",
    "end": "388199"
  },
  {
    "text": "start running our es6 code more in the browser but by then",
    "start": "388199",
    "end": "393560"
  },
  {
    "text": "will we have moved on to es7 Let's create a mechanism where we can start leveraging the features that",
    "start": "393560",
    "end": "399639"
  },
  {
    "text": "we want to today and transpiling them into the browsers that run today so we",
    "start": "399639",
    "end": "407440"
  },
  {
    "text": "can leverage the newest stuff and our users can still use our sites thus",
    "start": "407440",
    "end": "413840"
  },
  {
    "text": "transpiling so the interesting thing about this transpiling is it takes this tool chain",
    "start": "413840",
    "end": "420000"
  },
  {
    "text": "and so you know as we approach reactor as we approach angular we start looking at the tooling associated with using it",
    "start": "420000",
    "end": "427840"
  },
  {
    "text": "and that's really unfortunate because we really like that hello world where you just open notepad and you start typing",
    "start": "427840",
    "end": "433520"
  },
  {
    "text": "and you open the browser yeah that's not es6 world",
    "start": "433520",
    "end": "438879"
  },
  {
    "text": "today but as we dig into the tools you'll see that we can kind of break that into a really elegant",
    "start": "438879",
    "end": "446120"
  },
  {
    "text": "experience once we've got those tools under our belts so we'll look at kind of three groups of",
    "start": "446120",
    "end": "453720"
  },
  {
    "text": "tools we have the polyfills we have transpilers and we have bundlers um",
    "start": "453720",
    "end": "461080"
  },
  {
    "text": "transpilers we kind of dug into a little bit let's dig into it quite a bit more but let's start with polyfills because",
    "start": "461080",
    "end": "466840"
  },
  {
    "text": "that's really fun so polyfills let's hearken back to the modernizer days when we're looking at",
    "start": "466840",
    "end": "473440"
  },
  {
    "start": "468000",
    "end": "554000"
  },
  {
    "text": "you know jQuery and and those types of Realms and let's use the analogy can I",
    "start": "473440",
    "end": "478879"
  },
  {
    "text": "put a poly fill in here well what was really cool is modernizer would shim in",
    "start": "478879",
    "end": "484960"
  },
  {
    "text": "all those extra um div tags article and nav",
    "start": "484960",
    "end": "491400"
  },
  {
    "text": "and it just kind of made all those tags work which was great that was an",
    "start": "491400",
    "end": "496560"
  },
  {
    "text": "effective um polyfill but could I polyfill",
    "start": "496560",
    "end": "502840"
  },
  {
    "text": "canvas yeah technically I could have rebuilt the app in Flash and I could have also built in silver light and now",
    "start": "503759",
    "end": "511280"
  },
  {
    "text": "I could you know kind of shim between them but I would argue that's not a polyfill that's a",
    "start": "511280",
    "end": "516719"
  },
  {
    "text": "port yeah let's get a few beers and we can argue that for a while so can I polyfill I would say if the level of",
    "start": "516719",
    "end": "523880"
  },
  {
    "text": "effort is smallish yeah if we're able to achieve similar functionality without a",
    "start": "523880",
    "end": "530240"
  },
  {
    "text": "whole lot of effort and in the cases where that makes sense polyfills are really easy and at that point let's",
    "start": "530240",
    "end": "536920"
  },
  {
    "text": "polyfill those things into place as the those standards become",
    "start": "536920",
    "end": "542040"
  },
  {
    "text": "um possible in the browser as the browsers Implement those features those polyils can fall away and now maybe we",
    "start": "542040",
    "end": "549000"
  },
  {
    "text": "don't need that HTML5 shim. JS the next level is those transpilers",
    "start": "549000",
    "end": "556240"
  },
  {
    "start": "554000",
    "end": "591000"
  },
  {
    "text": "and there's two major transpilers that are in use today there's others but for",
    "start": "556240",
    "end": "561320"
  },
  {
    "text": "the purpose of avoiding decision fatigue Babble is kind of the Kingpin here and",
    "start": "561320",
    "end": "566839"
  },
  {
    "text": "typescript is really interesting as well typ script gives us some more benefits when we're coming from you know C or",
    "start": "566839",
    "end": "573040"
  },
  {
    "text": "Java and we have that kind of classical um language we're going to focus on Babble today because it kind of takes",
    "start": "573040",
    "end": "578760"
  },
  {
    "text": "the stance that es that JavaScript we're just going to take",
    "start": "578760",
    "end": "583880"
  },
  {
    "text": "JavaScript at its core and just enable those additional features so what's really cool about U",
    "start": "583880",
    "end": "591760"
  },
  {
    "start": "591000",
    "end": "636000"
  },
  {
    "text": "Babble if you start off with babeljs just pop open the babeljs",
    "start": "591760",
    "end": "598120"
  },
  {
    "text": "website it has a really neat um reppel a Riv",
    "start": "598120",
    "end": "607320"
  },
  {
    "text": "valve print Loop where you can just start typing the um es6",
    "start": "607320",
    "end": "614759"
  },
  {
    "text": "code and it will produce that similar code in es5 and so I've got this",
    "start": "618519",
    "end": "626000"
  },
  {
    "text": "experiment I want to do I want to you know kind of dig into well I can just sit it here in the repple and I can play",
    "start": "626000",
    "end": "631920"
  },
  {
    "text": "with it and get that experience so for an",
    "start": "631920",
    "end": "639240"
  },
  {
    "start": "636000",
    "end": "696000"
  },
  {
    "text": "onramp I don't really want to open up the browser and type all of my code in there and then copy the the the thing",
    "start": "639560",
    "end": "645519"
  },
  {
    "text": "into the other place so we'll come into Babel's site and we'll click on setup here",
    "start": "645519",
    "end": "652200"
  },
  {
    "text": "inside setup I can pick my tool of choice and I can pull up the code that",
    "start": "652200",
    "end": "659639"
  },
  {
    "text": "makes that happen so I think this is particularly wonderful am I using browserify here's",
    "start": "659639",
    "end": "666399"
  },
  {
    "text": "the code to make it run in browserify all of the instructions start with npm install because Babble is a node tool so",
    "start": "666399",
    "end": "673680"
  },
  {
    "text": "yeah you need node on your box but I can dig into you know am I",
    "start": "673680",
    "end": "679279"
  },
  {
    "text": "using it with Jasmine or Karma or net or Jade all of those things then have these",
    "start": "679279",
    "end": "685200"
  },
  {
    "text": "shims to be able to leverage Babel in really interesting ways babble will take our C our es6 code and turn it into",
    "start": "685200",
    "end": "693000"
  },
  {
    "text": "compatible es5",
    "start": "693000",
    "end": "696279"
  },
  {
    "start": "696000",
    "end": "806000"
  },
  {
    "text": "code so we dug into the reple that was pretty fun any questions on Babble before we go",
    "start": "698680",
    "end": "706040"
  },
  {
    "text": "too",
    "start": "706040",
    "end": "708320"
  },
  {
    "text": "far so the really cool part about Babble is that it shims in all of these es6",
    "start": "713040",
    "end": "718639"
  },
  {
    "text": "featur features by replacing them with es5 features there's some things that we can't do that with one of the most",
    "start": "718639",
    "end": "725360"
  },
  {
    "text": "notable ones is imports and exports the module system the module",
    "start": "725360",
    "end": "732639"
  },
  {
    "text": "system depends on loading other files and es5 can't just say well go load the",
    "start": "732639",
    "end": "739120"
  },
  {
    "text": "other file so we're going to misuse bundlers for that purpose we're going to misuse a bundler to say go crawl my",
    "start": "739120",
    "end": "746160"
  },
  {
    "text": "dependency tree find all the dependencies package them into one piece",
    "start": "746160",
    "end": "751560"
  },
  {
    "text": "and now I have one file and so the dependencies are already resolved in effect we can think of this",
    "start": "751560",
    "end": "758160"
  },
  {
    "text": "as turning es6 code into AMD turning commonjs into",
    "start": "758160",
    "end": "766639"
  },
  {
    "text": "AMD so browser IFI was the um first one that accomplished this and browser IFI gained market share really quickly",
    "start": "766880",
    "end": "773920"
  },
  {
    "text": "browserify is kind of fallen out of favor um and webpack is the one that's taking over webpack is immensely",
    "start": "773920",
    "end": "780480"
  },
  {
    "text": "powerful and opt offers us a whole lot more options towards um transpiling our",
    "start": "780480",
    "end": "786079"
  },
  {
    "text": "es6 code and um bundling things and so what I'm finding is that angular is moving to",
    "start": "786079",
    "end": "793360"
  },
  {
    "text": "webpack um react suggests webpack um Aurelia is moving to webpack and so I",
    "start": "793360",
    "end": "800000"
  },
  {
    "text": "would argue that webpack one this",
    "start": "800000",
    "end": "804959"
  },
  {
    "text": "war so webpack is really interesting just from the command line if I just say",
    "start": "805440",
    "end": "811760"
  },
  {
    "start": "806000",
    "end": "845000"
  },
  {
    "text": "npm install DG webpack to get webpack installed globally and then I just say",
    "start": "811760",
    "end": "816880"
  },
  {
    "text": "webpack my source file my destination file it will do that transpilation so in",
    "start": "816880",
    "end": "822279"
  },
  {
    "text": "this case we said let's transpile main.js into bundle.js",
    "start": "822279",
    "end": "827959"
  },
  {
    "text": "it'll go look through main it'll crawl through all of its dependencies and it will produce this final",
    "start": "827959",
    "end": "835920"
  },
  {
    "text": "bundle well that's interesting but that's not transpiling our es6",
    "start": "836360",
    "end": "843399"
  },
  {
    "start": "845000",
    "end": "915000"
  },
  {
    "text": "code but let's dig in a little further um just running webpack with a big long",
    "start": "845720",
    "end": "850759"
  },
  {
    "text": "command line isn't as much fun so let's create a webpack doc config.js and",
    "start": "850759",
    "end": "856279"
  },
  {
    "text": "webpack Doc configs get immensely large we're not going to get too big there but",
    "start": "856279",
    "end": "861880"
  },
  {
    "text": "um here's kind of a a hello world webpack config we have this entry this",
    "start": "861880",
    "end": "867720"
  },
  {
    "text": "starting place that first file on the command line and we have an output file name that second one we had on the",
    "start": "867720",
    "end": "874320"
  },
  {
    "text": "command line this is kind of that hello world webpack where we say I want to",
    "start": "874320",
    "end": "879639"
  },
  {
    "text": "start here and I want to end there so with webpack we've got that",
    "start": "879639",
    "end": "886399"
  },
  {
    "text": "mechanism to get our bundles into one file any questions on webpack before we",
    "start": "886399",
    "end": "893279"
  },
  {
    "text": "dig in too far",
    "start": "893279",
    "end": "900680"
  },
  {
    "text": "so we want to take webpack and we want to take Babel and we want to Mush them together we want to say hey webpack as",
    "start": "902079",
    "end": "907560"
  },
  {
    "text": "you're wandering through your dependencies run each file through Babel and get the es6 to es5 transpiling",
    "start": "907560",
    "end": "915920"
  },
  {
    "text": "goodness so I added another section to my web pack. config um this module",
    "start": "915920",
    "end": "921680"
  },
  {
    "text": "section and it says Hey every time you hit the that's a regular expression that ends injs every time you hit ajs",
    "start": "921680",
    "end": "929160"
  },
  {
    "text": "file go run it through Babel there's a few more things that I",
    "start": "929160",
    "end": "934519"
  },
  {
    "text": "have in place here I have a Babel RC file so let's zoom into that Babel RC file and I have this",
    "start": "934519",
    "end": "941639"
  },
  {
    "text": "presets well Babel is really interesting it say it's this very pluggable architecture where I can say well what",
    "start": "941639",
    "end": "948560"
  },
  {
    "text": "rules would I like to transpile in this case I said well everything in the 2015",
    "start": "948560",
    "end": "955720"
  },
  {
    "text": "spec there's various plugins into B um let's come back to that one then I",
    "start": "956000",
    "end": "961480"
  },
  {
    "text": "run a whole bunch of npm installs and now I run webpack and I've got that",
    "start": "961480",
    "end": "967560"
  },
  {
    "text": "transpilation process for each Javascript file it's going to go wander through the",
    "start": "967560",
    "end": "974120"
  },
  {
    "text": "dependencies each dependency will get transpiled from es6 into es5 I'll end up with a single file when I'm done and I",
    "start": "974120",
    "end": "981519"
  },
  {
    "text": "reference that single bundle.js file from my HTML",
    "start": "981519",
    "end": "987519"
  },
  {
    "text": "code",
    "start": "987519",
    "end": "990519"
  },
  {
    "start": "992000",
    "end": "1132000"
  },
  {
    "text": "so we talked about presets let's dig into that a little bit farther each of these presets enables a",
    "start": "993959",
    "end": "1000360"
  },
  {
    "text": "rule set you know basically a group of rules and Babel Has quite a few of them es25 is kind of the one that we like to",
    "start": "1000360",
    "end": "1007600"
  },
  {
    "text": "focus on to get from es5 to es6 we can enable other features es7",
    "start": "1007600",
    "end": "1013880"
  },
  {
    "text": "features with the 2016 preset we can pull in react act presets if we'd like",
    "start": "1013880",
    "end": "1020440"
  },
  {
    "text": "and then there's this group of stage presets that are kind of fun we can say",
    "start": "1020440",
    "end": "1025480"
  },
  {
    "text": "well for the various levels of development of these um new draft",
    "start": "1025480",
    "end": "1032038"
  },
  {
    "text": "JavaScript features I want to pull in that so if I pull in stage four the it's",
    "start": "1032039",
    "end": "1038678"
  },
  {
    "text": "pretty much everything is done with that browsers may start supporting that I want to pull in that rule in my",
    "start": "1038679",
    "end": "1044880"
  },
  {
    "text": "transpilation as well stage three is more of a incomplete spec or a complete",
    "start": "1044880",
    "end": "1051160"
  },
  {
    "text": "spec but browsers haven't done it stage two is kind of a draft all the way down to Stage zero which is like hey I have",
    "start": "1051160",
    "end": "1057919"
  },
  {
    "text": "an idea let's try this so I can turn on whatever levels of things that I'd like",
    "start": "1057919",
    "end": "1064000"
  },
  {
    "text": "just by including these additional presets back in this um Babel RC file",
    "start": "1064000",
    "end": "1069640"
  },
  {
    "text": "here in this array I can just grab those presets so I may include es25",
    "start": "1069640",
    "end": "1075720"
  },
  {
    "text": "es26 maybe I'm including some react things to get my jsx to",
    "start": "1075720",
    "end": "1081799"
  },
  {
    "text": "compile or I'll go full hog and I'll say stage zero I want to transpile",
    "start": "1081960",
    "end": "1087120"
  },
  {
    "text": "everything I want async and aw in JavaScript I want to pull in all the",
    "start": "1087120",
    "end": "1093480"
  },
  {
    "text": "things so I've got these uh stages here in my um Babel RC I've got this web pack",
    "start": "1096840",
    "end": "1105280"
  },
  {
    "text": "that describes running Babel for each of my JavaScript files and then um webpack",
    "start": "1105280",
    "end": "1111280"
  },
  {
    "text": "to do that module loading and now I've got that complete system now I could walk through a",
    "start": "1111280",
    "end": "1117799"
  },
  {
    "text": "thousand different other things associated with uh webpack I'll leave that to you um webpack files do get this",
    "start": "1117799",
    "end": "1128840"
  },
  {
    "start": "1132000",
    "end": "1300000"
  },
  {
    "text": "big so ultimately answering our question from the beginning can I use it today",
    "start": "1132679",
    "end": "1137919"
  },
  {
    "text": "yes let's use webpack let's use Babel to be able to write es6 and run es5 in the",
    "start": "1137919",
    "end": "1145640"
  },
  {
    "text": "browser today so now that we've answered that question of saying can I do",
    "start": "1145640",
    "end": "1153600"
  },
  {
    "text": "it well what can I do what is this es6 you speak",
    "start": "1153640",
    "end": "1160679"
  },
  {
    "text": "of any questions on tools before we dig in yep as",
    "start": "1162720",
    "end": "1170240"
  },
  {
    "text": "that's a good question why would I use Babel over typescript why wouldn't I just go full hog and go to",
    "start": "1183679",
    "end": "1189960"
  },
  {
    "text": "typescript ultimately that's a choice Babel keeps more towards the JavaScript",
    "start": "1189960",
    "end": "1195880"
  },
  {
    "text": "standards towards ecmascript where typt scrip kind of adds extra things and so if you want those extra things",
    "start": "1195880",
    "end": "1201679"
  },
  {
    "text": "typescript is definitely where you want to go if you don't want those extra things babbles where you want to go if",
    "start": "1201679",
    "end": "1208159"
  },
  {
    "text": "you want to look at more of those stage zero stage one things typescript doesn't have those and doesn't have a way to",
    "start": "1208159",
    "end": "1213880"
  },
  {
    "text": "plug them in so Babble is kind of a better fit there because I can dig into",
    "start": "1213880",
    "end": "1218960"
  },
  {
    "text": "more of those Advanced features if those Advanced features aren't important and typing is more important typescript is",
    "start": "1218960",
    "end": "1225280"
  },
  {
    "text": "definitely a better choice great question",
    "start": "1225280",
    "end": "1232200"
  },
  {
    "text": "yep do the tools generate a source map webpack has a plugin for that and you",
    "start": "1232200",
    "end": "1237679"
  },
  {
    "text": "just say hey I wanted um I specify my Dev tool and my Dev tool is the type of",
    "start": "1237679",
    "end": "1242799"
  },
  {
    "text": "source map that I want to produce and yes the source map spits out the really elegant thing about the source map then",
    "start": "1242799",
    "end": "1249080"
  },
  {
    "text": "is I reference my bundle.js it has that Source map decoration at the bottom of",
    "start": "1249080",
    "end": "1254440"
  },
  {
    "text": "the file I open up the F12 developer tools and I am debugging my es6 code but",
    "start": "1254440",
    "end": "1262000"
  },
  {
    "text": "my browser is running the es5 code and that is such a magical",
    "start": "1262000",
    "end": "1268919"
  },
  {
    "text": "thing yes Source maps are",
    "start": "1268919",
    "end": "1272880"
  },
  {
    "text": "wonderful any other",
    "start": "1274679",
    "end": "1278158"
  },
  {
    "text": "questions so we've got this build process we now able to take advantage of",
    "start": "1284440",
    "end": "1290520"
  },
  {
    "text": "these things and we're going to skim along the top of these features this is hardly an exhaustive",
    "start": "1290520",
    "end": "1296000"
  },
  {
    "text": "list but let's let's look at some of our favorite features here's my warning again use",
    "start": "1296000",
    "end": "1303880"
  },
  {
    "text": "these things sparingly because it would be just as easy to sprinkle es6 over",
    "start": "1303880",
    "end": "1310440"
  },
  {
    "text": "everything and now my code is completely illegible let's avoid that use it where",
    "start": "1310440",
    "end": "1315840"
  },
  {
    "text": "it makes sense use it where your code is more tur more",
    "start": "1315840",
    "end": "1321000"
  },
  {
    "text": "descriptive the moment you get clever is the moment you get",
    "start": "1321200",
    "end": "1326480"
  },
  {
    "text": "scary if you uh I love this quote um my friend uh Jeremy Clark code like the",
    "start": "1326480",
    "end": "1334159"
  },
  {
    "text": "person maintaining your code is a homicidal maniac that knows where you live typically the guy coming behind",
    "start": "1334159",
    "end": "1342400"
  },
  {
    "text": "you that has no idea what you wrote Because you wrote it two weeks ago it's probably you",
    "start": "1342400",
    "end": "1348880"
  },
  {
    "text": "so code for",
    "start": "1348880",
    "end": "1351880"
  },
  {
    "start": "1354000",
    "end": "1503000"
  },
  {
    "text": "legibility so variable scoping one of the things that we love",
    "start": "1354640",
    "end": "1360039"
  },
  {
    "text": "and hate about JavaScript is that Curly braces don't Define scope curly",
    "start": "1360039",
    "end": "1366240"
  },
  {
    "text": "braces Define curly braces in es5 we have mechanisms where we can get into",
    "start": "1366240",
    "end": "1372320"
  },
  {
    "text": "this really interesting place where this variable exists both above",
    "start": "1372320",
    "end": "1377760"
  },
  {
    "text": "and below where it was defined is Javascript broken some might argue this is perfect",
    "start": "1377760",
    "end": "1385360"
  },
  {
    "text": "but in es6 we have new mechanisms for accomplishing this we have let and",
    "start": "1385360",
    "end": "1390799"
  },
  {
    "text": "const let and const will both pay attention to uh the scope of the",
    "start": "1390799",
    "end": "1396799"
  },
  {
    "text": "variables the curly brace scope and will behave as you expect so for example um",
    "start": "1396799",
    "end": "1403799"
  },
  {
    "text": "we Define let message here in the middle and if I try to use that Mage variable above or below that I'll get an",
    "start": "1403799",
    "end": "1411120"
  },
  {
    "text": "exception as I expect there's mechanisms of dead zone",
    "start": "1411120",
    "end": "1417600"
  },
  {
    "text": "where we can get into some interesting places and you know ultimately Ben Scott Allen's ear as we get into these dragony",
    "start": "1417600",
    "end": "1423520"
  },
  {
    "text": "places but um then the next question is so do I use let or const we're",
    "start": "1423520",
    "end": "1429240"
  },
  {
    "text": "transpiling so ultimately in spite of the fact that we may Define it as immutable it's not",
    "start": "1429240",
    "end": "1436880"
  },
  {
    "text": "immutable H hearkening back to our C and C++ days it's a constant",
    "start": "1436880",
    "end": "1447000"
  },
  {
    "text": "pointer if I point to an object that object is not immutable and so I could",
    "start": "1447000",
    "end": "1452080"
  },
  {
    "text": "still start manipulating adding properties removing changing data in that object but that pointer is",
    "start": "1452080",
    "end": "1459159"
  },
  {
    "text": "immutable to that object so ultimately const is more a",
    "start": "1459159",
    "end": "1465279"
  },
  {
    "text": "communication to our fellow developers that we don't expect this to change rather than a a hint to our compiler to",
    "start": "1465279",
    "end": "1472840"
  },
  {
    "text": "um Unbreak this so I say use const when you don't expect it to change use let",
    "start": "1472840",
    "end": "1479880"
  },
  {
    "text": "when it's data that will change and that communication mechanism may be more important than what the variable what",
    "start": "1479880",
    "end": "1486440"
  },
  {
    "text": "the name difference actually does ultimately discuss that with your team find a convention that you like and",
    "start": "1486440",
    "end": "1493399"
  },
  {
    "text": "run with that let and cons though give us that ability to work through um curly brace scope and",
    "start": "1493399",
    "end": "1500760"
  },
  {
    "text": "find interesting places there so fat arrows this is our",
    "start": "1500760",
    "end": "1506000"
  },
  {
    "text": "quintessential thing that we're so glad that we don't have to type",
    "start": "1506000",
    "end": "1511760"
  },
  {
    "text": "function fat arrows fed Aros are wonderful because it reduces that function word down to a smaller piece",
    "start": "1511760",
    "end": "1519039"
  },
  {
    "text": "but it has some side effects it binds this at the point where",
    "start": "1519039",
    "end": "1524440"
  },
  {
    "text": "you define it which means you can't later bind this using like the apply keyword or the bind",
    "start": "1524440",
    "end": "1532840"
  },
  {
    "text": "keyword it's already bound it's always an anonymous function",
    "start": "1532840",
    "end": "1538840"
  },
  {
    "text": "and it has an implicit last line return if it's a single function single line",
    "start": "1538840",
    "end": "1544000"
  },
  {
    "text": "that can be wonderful or we learned this in the coffee script days it can lead to really unexpected",
    "start": "1544000",
    "end": "1550919"
  },
  {
    "text": "results so function is not deprecated by any means for that heavy lifting where",
    "start": "1550919",
    "end": "1556720"
  },
  {
    "text": "you really want control over this or you want kind of a longer experience function is definitely the right keyword",
    "start": "1556720",
    "end": "1564279"
  },
  {
    "text": "ultimately decide together with your team which one you like and pick the style that works best for you so on the",
    "start": "1564279",
    "end": "1572520"
  },
  {
    "start": "1570000",
    "end": "1685000"
  },
  {
    "text": "left here's our es5 function we had to type so many",
    "start": "1572520",
    "end": "1577919"
  },
  {
    "text": "characters we had this three line just to say hey I want to double this number on the right we have this Arrow",
    "start": "1577919",
    "end": "1584919"
  },
  {
    "text": "function where we just say hey you know go grab that in put variable and turn it into a doubled",
    "start": "1584919",
    "end": "1592200"
  },
  {
    "text": "result well that's a little bit magic so let's break that down a little bit I start off with my regular function I'm",
    "start": "1592200",
    "end": "1599440"
  },
  {
    "text": "going to turn it into a fat Arrow function I noticed that I only have a",
    "start": "1599440",
    "end": "1604919"
  },
  {
    "text": "single parameter that means that the parentheses are optional if I had zero or two or more parameters I couldn't do",
    "start": "1604919",
    "end": "1611279"
  },
  {
    "text": "this so let's pull the parentheses off the front I also noticed that it's a single",
    "start": "1611279",
    "end": "1617360"
  },
  {
    "text": "line and that I like that it's a implicit return single line return so I'll shorten that and I got to that",
    "start": "1617360",
    "end": "1625200"
  },
  {
    "text": "result so now setting that into place I could say array. map that really short that really short",
    "start": "1625200",
    "end": "1633200"
  },
  {
    "text": "function a such that a do * 2 and that makes my code more legible the intent",
    "start": "1633200",
    "end": "1639960"
  },
  {
    "text": "flows through more so than the big word that has lots of letters in it what's",
    "start": "1639960",
    "end": "1646039"
  },
  {
    "text": "really interesting about this each of these four are valid they're",
    "start": "1646039",
    "end": "1651640"
  },
  {
    "text": "valid JavaScript lines in es6 so one is not more better than the",
    "start": "1651640",
    "end": "1658520"
  },
  {
    "text": "other and there are places when each of these is the most descriptive thing to",
    "start": "1658520",
    "end": "1664559"
  },
  {
    "text": "use so ultimately get with your team find the style that you like the best and leverage that Federal functions can",
    "start": "1664559",
    "end": "1670840"
  },
  {
    "text": "be really powerful in making your uh code more concise but if you just go find and replace the function keyword",
    "start": "1670840",
    "end": "1677960"
  },
  {
    "text": "with arrows you'll probably find unexpected",
    "start": "1677960",
    "end": "1683398"
  },
  {
    "start": "1685000",
    "end": "1740000"
  },
  {
    "text": "results classes classes are one of these wonderful but horrid things that",
    "start": "1685640",
    "end": "1692760"
  },
  {
    "text": "JavaScript has done to us because it makes it feel more like our Classical Languages Java and",
    "start": "1692760",
    "end": "1700320"
  },
  {
    "text": "C but it still is a prototypal inheritance under the covers so use the",
    "start": "1700320",
    "end": "1707600"
  },
  {
    "text": "sparingly but of course nobody listened to me so angular and react and aelia all",
    "start": "1707600",
    "end": "1714640"
  },
  {
    "text": "use classes as their base construct and they have these um dependency trees and",
    "start": "1714640",
    "end": "1720320"
  },
  {
    "text": "hierarchies I would argue that if you're inheriting from something in uh",
    "start": "1720320",
    "end": "1725640"
  },
  {
    "text": "JavaScript classes you're on the border of doing it wrong if you have a deep hierarchy yeah",
    "start": "1725640",
    "end": "1733360"
  },
  {
    "text": "you're definitely doing it wrong so under the hood it's still still this prototypal",
    "start": "1733360",
    "end": "1740120"
  },
  {
    "start": "1740000",
    "end": "1800000"
  },
  {
    "text": "inheritance so here on the left here's that prototype where I created The Constructor function how am I implying",
    "start": "1740120",
    "end": "1746440"
  },
  {
    "text": "that it's a Constructor Douglas crockford said",
    "start": "1746440",
    "end": "1752159"
  },
  {
    "text": "so yep it's a capital letter and then I have this prototype where I'm defining",
    "start": "1752159",
    "end": "1757840"
  },
  {
    "text": "things that is that a class yeah but here on the right it's",
    "start": "1757840",
    "end": "1764640"
  },
  {
    "text": "much clearer it's much more concise I've defined a class and I have a Constructor",
    "start": "1764640",
    "end": "1769760"
  },
  {
    "text": "called Constructor I have methods that don't have the function keyword they",
    "start": "1769760",
    "end": "1775640"
  },
  {
    "text": "just have the name and and they're able to do what they expect ultimately this and this work",
    "start": "1775640",
    "end": "1783279"
  },
  {
    "text": "exactly the same which is better I think this one's easier to read",
    "start": "1783279",
    "end": "1790360"
  },
  {
    "text": "knowing that it works exactly the same as that one but because they work exactly the same they're also interoperable which is really fun",
    "start": "1790360",
    "end": "1799320"
  },
  {
    "start": "1800000",
    "end": "1947000"
  },
  {
    "text": "so we see promise is a polyfill Babel doesn't enable",
    "start": "1801640",
    "end": "1807159"
  },
  {
    "text": "promises promises can be really really powerful we're in this call back realm",
    "start": "1807159",
    "end": "1812440"
  },
  {
    "text": "and we want to move to This Promise realm or we're starting to play with promises and we want to move to async promises give us the ability to",
    "start": "1812440",
    "end": "1820120"
  },
  {
    "text": "kind of hold on to a result and sequence events in a much easier way than we had",
    "start": "1820120",
    "end": "1826679"
  },
  {
    "text": "before so here's a call back pattern and it's not broken it's just a little weird why",
    "start": "1826679",
    "end": "1833640"
  },
  {
    "text": "is the first result always blank because it hasn't errored so should I just ignore it",
    "start": "1833640",
    "end": "1840080"
  },
  {
    "text": "no here in the promise mechanism I create a new promise the promise takes in um a",
    "start": "1840080",
    "end": "1848279"
  },
  {
    "text": "function that has two parameters the success and the fail and then whether I",
    "start": "1848279",
    "end": "1854200"
  },
  {
    "text": "succeed or fail I call it that result and then later on in my code I can say",
    "start": "1854200",
    "end": "1862559"
  },
  {
    "text": "then then I chain these then functions and I can just walk through my series of",
    "start": "1862559",
    "end": "1867720"
  },
  {
    "text": "events with then the cool part about this thist",
    "start": "1867720",
    "end": "1873480"
  },
  {
    "text": "catch do catch will catch all of the things even if it errored in my then",
    "start": "1873480",
    "end": "1882039"
  },
  {
    "text": "callback I didn't get that with callbacks and callbacks as soon as I handled the ER right here that was the",
    "start": "1882039",
    "end": "1889360"
  },
  {
    "text": "end of my error handling if this code failed I was done here this code could",
    "start": "1889360",
    "end": "1896799"
  },
  {
    "text": "succeed or fail and I would still fall into my catch here I called it the success and",
    "start": "1896799",
    "end": "1903760"
  },
  {
    "text": "fail functions typically we call them",
    "start": "1903760",
    "end": "1909039"
  },
  {
    "text": "um I lost it resolve and reject and so you'll probably see that um that",
    "start": "1909039",
    "end": "1916200"
  },
  {
    "text": "methodology so this is one of those things that you need to polyfill poly filling a promise",
    "start": "1916200",
    "end": "1921480"
  },
  {
    "text": "isn't that hard because you can kind of create a mechanism to call a.",
    "start": "1921480",
    "end": "1927679"
  },
  {
    "text": "thenen um you know ultimately there's like promise ofi that could take a call back and turn it into a pro promises are",
    "start": "1927679",
    "end": "1934720"
  },
  {
    "text": "in browsers for the most part now so maybe it's not necessary to polyfill",
    "start": "1934720",
    "end": "1940440"
  },
  {
    "text": "promises anymore this is one of the only ones that you kind of have to look at in another",
    "start": "1940440",
    "end": "1946080"
  },
  {
    "text": "way so all along I'm not sure if you caught",
    "start": "1946080",
    "end": "1951120"
  },
  {
    "start": "1947000",
    "end": "1965000"
  },
  {
    "text": "it we have up at the top the thing that makes it happen thus far it's been Babel",
    "start": "1951120",
    "end": "1956760"
  },
  {
    "text": "that has empowered all of these things promises had a polyfill that enabled it and now",
    "start": "1956760",
    "end": "1967440"
  },
  {
    "start": "1965000",
    "end": "2019000"
  },
  {
    "text": "modules Babel's purpose is to transpile es6 in es5 modules is about consuming",
    "start": "1967440",
    "end": "1974519"
  },
  {
    "text": "other things and so this is where we jump into that um bundler to try and do",
    "start": "1974519",
    "end": "1981200"
  },
  {
    "text": "that navigation between files so here's that webpack logo we'll",
    "start": "1981200",
    "end": "1986559"
  },
  {
    "text": "grab our webpack config and we're really glad that we can do this in effect we're taking",
    "start": "1986559",
    "end": "1992960"
  },
  {
    "text": "commonjs style code and turning it into AMD",
    "start": "1992960",
    "end": "1998200"
  },
  {
    "text": "code in commonjs we presume that modules resolve synchronously and in uh",
    "start": "1998600",
    "end": "2005519"
  },
  {
    "text": "ecmascript 6 we also res assume modules resolve synchronously so kind of turning",
    "start": "2005519",
    "end": "2011840"
  },
  {
    "text": "it into AMD where it could be asynchronous as a misnomer really it's that kind of AMD style syntax that's",
    "start": "2011840",
    "end": "2019799"
  },
  {
    "start": "2019000",
    "end": "2244000"
  },
  {
    "text": "pretty cool we didn't have this in es5 at all so now we have this kind of es6",
    "start": "2019799",
    "end": "2026039"
  },
  {
    "text": "export and import syntax but we did have it in node so let's compare nodes",
    "start": "2026039",
    "end": "2031720"
  },
  {
    "text": "mechanisms to es6 mechanisms in node if we have this",
    "start": "2031720",
    "end": "2037279"
  },
  {
    "text": "Square function we'll have then this module. exorts object and this module. exorts object",
    "start": "2037279",
    "end": "2044360"
  },
  {
    "text": "then has various Keys representing the things that we want to export as I want to pull it in I say",
    "start": "2044360",
    "end": "2051158"
  },
  {
    "text": "require that library and then I can call the functions that I've",
    "start": "2051159",
    "end": "2057320"
  },
  {
    "text": "exported in es6 it's not all that different I just put the export keyword right as I'm defining each",
    "start": "2057320",
    "end": "2064520"
  },
  {
    "text": "thing yeah technically I could create exports like result object but that gets",
    "start": "2064520",
    "end": "2070158"
  },
  {
    "text": "a little weird so here I've said export the square function and then I I'm going",
    "start": "2070159",
    "end": "2075280"
  },
  {
    "text": "to import that in I'm going to say import Star as star pull in all of the",
    "start": "2075280",
    "end": "2081720"
  },
  {
    "text": "things as lib I'm going to rename it to lib in the same way that I called my local variable in node lib and I'm just",
    "start": "2081720",
    "end": "2089398"
  },
  {
    "text": "going to call Lib do Square to be able to leverage that",
    "start": "2089399",
    "end": "2093919"
  },
  {
    "text": "Library so the interesting thing is I can import it using a couple of different ways and I can export it in a",
    "start": "2095879",
    "end": "2102440"
  },
  {
    "text": "couple of different ways I'm going to call out default because it's one of those ones that's a little weird export",
    "start": "2102440",
    "end": "2110119"
  },
  {
    "text": "default function now ideally when I want to import it I just want to say import the",
    "start": "2110119",
    "end": "2116079"
  },
  {
    "text": "thing and so export default makes it trivial to import things here when I'm",
    "start": "2116079",
    "end": "2121560"
  },
  {
    "text": "importing it I'm just say import lib from that Library",
    "start": "2121560",
    "end": "2128800"
  },
  {
    "text": "so I called it lib but they called it Square basically what I said is go grab",
    "start": "2128880",
    "end": "2136280"
  },
  {
    "text": "that thing marked as default so export default in node land that would be",
    "start": "2136280",
    "end": "2143640"
  },
  {
    "text": "roughly akin to saying module. exports default is this thing and then as I",
    "start": "2143640",
    "end": "2149960"
  },
  {
    "text": "require it I say require. default in effect it creates a",
    "start": "2149960",
    "end": "2155319"
  },
  {
    "text": "key in that module exports object named default so how do I export a function",
    "start": "2155319",
    "end": "2162839"
  },
  {
    "text": "instead of this object with keys and values you",
    "start": "2162839",
    "end": "2168160"
  },
  {
    "text": "don't you create this default export that kind of mimics that",
    "start": "2168160",
    "end": "2173200"
  },
  {
    "text": "instead so how do I know whether I'm supposed to import the default thing or a set of keys and",
    "start": "2173200",
    "end": "2181160"
  },
  {
    "text": "values you open up the file and you go look or you Leverage typescript and",
    "start": "2182000",
    "end": "2187319"
  },
  {
    "text": "typescript will tell you so how you import it and how you export it becomes a matter of that",
    "start": "2187319",
    "end": "2194160"
  },
  {
    "text": "contract between those two files I like to use default exports when",
    "start": "2194160",
    "end": "2199520"
  },
  {
    "text": "I'm going to only export one thing or the main thing and I like to use regular",
    "start": "2199520",
    "end": "2205079"
  },
  {
    "text": "exports when I'm going to export a whole lot of named things I want to export a square function and a by2 function and",
    "start": "2205079",
    "end": "2211839"
  },
  {
    "text": "you know maybe an add or subtract function if I have a service that exposes lots of business business logic",
    "start": "2211839",
    "end": "2217359"
  },
  {
    "text": "associated with my class I'll I'll export all of those things but if my class only does one thing I'll probably",
    "start": "2217359",
    "end": "2223920"
  },
  {
    "text": "do an export default to get that thing um pulled",
    "start": "2223920",
    "end": "2229000"
  },
  {
    "text": "in modules are kind of weird any questions",
    "start": "2231000",
    "end": "2235838"
  },
  {
    "start": "2244000",
    "end": "2268000"
  },
  {
    "text": "there so we kicked around a lot of cool things we're back in Babeland and let's look at string templates this is really",
    "start": "2244520",
    "end": "2253119"
  },
  {
    "text": "fun so we've really wanted to do large strings multi-line strings for a while",
    "start": "2253119",
    "end": "2258960"
  },
  {
    "text": "and we've built up these things handlebars is great in defining the two curly braces the mustaches to build up",
    "start": "2258960",
    "end": "2266000"
  },
  {
    "text": "these templates of things but it always comes out turning really ugly so here on the left we've",
    "start": "2266000",
    "end": "2273839"
  },
  {
    "start": "2268000",
    "end": "2360000"
  },
  {
    "text": "got this string and then we Plus equals and my favorite part of this part",
    "start": "2273839",
    "end": "2280319"
  },
  {
    "text": "putting the carriage return at the end of the string which I always forget so now I end up with like lines and words",
    "start": "2280319",
    "end": "2285400"
  },
  {
    "text": "mashed together this is painful it's painful to do that um",
    "start": "2285400",
    "end": "2292920"
  },
  {
    "text": "templating and to walk in and out of am I doing the template or am I doing code here in es6 I do a back tick and I just",
    "start": "2292920",
    "end": "2301280"
  },
  {
    "text": "start going and that is my string literal here inside my string literal",
    "start": "2301280",
    "end": "2306760"
  },
  {
    "text": "there's no back tick at the end of this line there's no back tick at the beginning of this line here's the end of",
    "start": "2306760",
    "end": "2313640"
  },
  {
    "text": "my string right here and then when I want to get into code mode I do a dollar sign curly brace",
    "start": "2313640",
    "end": "2321800"
  },
  {
    "text": "and now it's looking into scope the scoped variables to try and infer the",
    "start": "2321800",
    "end": "2327319"
  },
  {
    "text": "data that I want to pull in so for example I have an A and A B variable here and I would just want to add them",
    "start": "2327319",
    "end": "2333480"
  },
  {
    "text": "together dollar sign open curly brace a plus B Clos curly brace I really wish it was two curly",
    "start": "2333480",
    "end": "2341760"
  },
  {
    "text": "braces instead of dollar curly brace but that looks gorgeous we have",
    "start": "2341760",
    "end": "2347680"
  },
  {
    "text": "multi-line strings we have templates and I'm not doing any heavy lifting of you know trying to get the carriage returns",
    "start": "2347680",
    "end": "2354240"
  },
  {
    "text": "to fit anymore string",
    "start": "2354240",
    "end": "2360599"
  },
  {
    "start": "2360000",
    "end": "2413000"
  },
  {
    "text": "literals next up building objects",
    "start": "2361400",
    "end": "2368400"
  },
  {
    "text": "so ultimately this building objects is syntactic sugar for making object construction",
    "start": "2368400",
    "end": "2374599"
  },
  {
    "text": "easier I've got a whole bunch of properties and I want to build one object with all those things well I end",
    "start": "2374599",
    "end": "2380599"
  },
  {
    "text": "up module. exorts is a great example of this module. experts curly brace some",
    "start": "2380599",
    "end": "2386960"
  },
  {
    "text": "Name colon that name some Name colon that name that that redundancy right there is",
    "start": "2386960",
    "end": "2394440"
  },
  {
    "text": "really painful well now we can just say the names and JavaScript will notice",
    "start": "2394440",
    "end": "2403440"
  },
  {
    "text": "that I have variables in scope that match these names and pull them in automatically I've got this really",
    "start": "2403440",
    "end": "2409680"
  },
  {
    "text": "elegant mechanism for object construction I can also kind of filter",
    "start": "2409680",
    "end": "2416839"
  },
  {
    "start": "2413000",
    "end": "2438000"
  },
  {
    "text": "that in with um other variables as I'd like so in this case I wanted an extra Z",
    "start": "2416839",
    "end": "2423119"
  },
  {
    "text": "variable and I just called it out so X and Y are the ones that are implicitly",
    "start": "2423119",
    "end": "2428760"
  },
  {
    "text": "pulled out of scope and Z is specifically crafted to be that",
    "start": "2428760",
    "end": "2433839"
  },
  {
    "text": "value I'm constructing objects in this way I could also dreference objects",
    "start": "2433839",
    "end": "2440520"
  },
  {
    "start": "2438000",
    "end": "2484000"
  },
  {
    "text": "destructuring objects as well so as I'm destructuring objects I have an object",
    "start": "2440520",
    "end": "2446359"
  },
  {
    "text": "that has all the pieces and I want to pull variables out of it as I'm destructuring so instead of varx equal",
    "start": "2446359",
    "end": "2453760"
  },
  {
    "text": "c.x and VAR yal c.y I'll say hey let",
    "start": "2453760",
    "end": "2459520"
  },
  {
    "text": "open curly brace a whole bunch of variables in this case X and Y equals c and it will go dig into that c object",
    "start": "2459520",
    "end": "2466119"
  },
  {
    "text": "pulling out the properties into my variables so now I have an X variable",
    "start": "2466119",
    "end": "2471440"
  },
  {
    "text": "that is as I expect and a y variable well that's really weird syntax",
    "start": "2471440",
    "end": "2478680"
  },
  {
    "text": "when would I ever destructure like that why would I want to do",
    "start": "2478680",
    "end": "2484640"
  },
  {
    "start": "2484000",
    "end": "2786000"
  },
  {
    "text": "that import so I've exported a whole lot of things in this library and I don't really care",
    "start": "2484720",
    "end": "2490720"
  },
  {
    "text": "about all of those other things I don't I just want these little things I want",
    "start": "2490720",
    "end": "2495880"
  },
  {
    "text": "the square function and the double function and ignore all of the rest so I'm going to import this library and out",
    "start": "2495880",
    "end": "2504280"
  },
  {
    "text": "of those things I'm going to pick out square and double and now I have variables in my",
    "start": "2504280",
    "end": "2510680"
  },
  {
    "text": "scope called Square and double and I don't care what your library called them and I don't care that it came from your",
    "start": "2510680",
    "end": "2515960"
  },
  {
    "text": "library Library I'm just going to do that so a lot of the things that we see",
    "start": "2515960",
    "end": "2521200"
  },
  {
    "text": "in angular and react and aelia kind of Leverage this type of import syntax",
    "start": "2521200",
    "end": "2527240"
  },
  {
    "text": "import open curly brace Define a bunch of variables and now those variables came out of that exported library and",
    "start": "2527240",
    "end": "2534880"
  },
  {
    "text": "I'm using the variable and I don't need to know which Library they came out of",
    "start": "2534880",
    "end": "2540920"
  },
  {
    "text": "anymore destructuring objects",
    "start": "2541400",
    "end": "2548160"
  },
  {
    "text": "yep good call if I'm pulling it in I need to know what the name of it was out",
    "start": "2557119",
    "end": "2563400"
  },
  {
    "text": "there so I can't change the name in this way I could say in this case Square as",
    "start": "2563400",
    "end": "2571280"
  },
  {
    "text": "Circle if I wanted to call the square function Circle and that would produce that renaming artifact",
    "start": "2571280",
    "end": "2578160"
  },
  {
    "text": "great",
    "start": "2578680",
    "end": "2580960"
  },
  {
    "text": "question any other questions yep",
    "start": "2583800",
    "end": "2591319"
  },
  {
    "text": "I'm it's just a named variable if I were to flip square and double they would still represent the same things and so",
    "start": "2601920",
    "end": "2609119"
  },
  {
    "text": "it's not like the order it was exported is actually the order I need to import them it's just pick these things out of",
    "start": "2609119",
    "end": "2615839"
  },
  {
    "text": "that object that was a great question yeah they're not",
    "start": "2615839",
    "end": "2622040"
  },
  {
    "text": "ordered so now we get to order about should they be alphabetical yeah take that one up with your",
    "start": "2622559",
    "end": "2630078"
  },
  {
    "text": "team yep",
    "start": "2632680",
    "end": "2638079"
  },
  {
    "text": "if I don't have the variable do I get an exception or a null that's a good question I don't know for sure I believe",
    "start": "2644640",
    "end": "2652880"
  },
  {
    "text": "that you get a null if you don't find the variable up in your scope but the cool thing is it will start to crawl up",
    "start": "2652880",
    "end": "2658640"
  },
  {
    "text": "into other closured Scopes so it may not be in your immediate scope it may be you",
    "start": "2658640",
    "end": "2664240"
  },
  {
    "text": "know up a few levels so you know ultimately defining interesting variables may lead to really interesting",
    "start": "2664240",
    "end": "2670520"
  },
  {
    "text": "results if you didn't Define all the variables You're",
    "start": "2670520",
    "end": "2674880"
  },
  {
    "text": "Expecting that's a great question I want to go explore that",
    "start": "2676240",
    "end": "2681119"
  },
  {
    "text": "now any more questions",
    "start": "2685040",
    "end": "2691200"
  },
  {
    "text": "yep",
    "start": "2694960",
    "end": "2697960"
  },
  {
    "text": "good question as I'm building my imports and exports do I need to Define them as AMD and commonjs is that your",
    "start": "2704079",
    "end": "2711559"
  },
  {
    "text": "question",
    "start": "2713240",
    "end": "2716240"
  },
  {
    "text": "MH ah good call so I'm building a library and I want different people to",
    "start": "2721200",
    "end": "2726599"
  },
  {
    "text": "be able to import it some may be commonjs some may be es6 some may be AMD",
    "start": "2726599",
    "end": "2732079"
  },
  {
    "text": "how do I pull that off is that right we're still trying to figure that",
    "start": "2732079",
    "end": "2738000"
  },
  {
    "text": "out and that's the unfortunate part is that we defined really well the Import and Export syntax but we haven't made a",
    "start": "2738000",
    "end": "2744640"
  },
  {
    "text": "good shim of how that relates to other things so in the short vers in the short",
    "start": "2744640",
    "end": "2750440"
  },
  {
    "text": "term probably what that means is I'll need to define a different version of my library for each version of the places",
    "start": "2750440",
    "end": "2757640"
  },
  {
    "text": "where they want to pull it in and that's really unfortunate ultimately we'll hope that this syntax",
    "start": "2757640",
    "end": "2764079"
  },
  {
    "text": "will win but we're not sure yet and so yeah maybe I have one UMD version and one es6",
    "start": "2764079",
    "end": "2772079"
  },
  {
    "text": "version and that gets me close enough or maybe I produce three yeah that's",
    "start": "2772079",
    "end": "2780520"
  },
  {
    "text": "painful so we've got D referencing objects the rest",
    "start": "2784800",
    "end": "2792839"
  },
  {
    "text": "parameters I want to have a variable number of arguments to my function and I'm left with this",
    "start": "2792839",
    "end": "2800680"
  },
  {
    "text": "arguments array and this arguments is not really an array so I do these really interesting things like",
    "start": "2800680",
    "end": "2807800"
  },
  {
    "text": "array.prototype.slice.call do I forgotten what happens after here do I copied it out of the last thing and",
    "start": "2807800",
    "end": "2814200"
  },
  {
    "text": "if I type out it yes I want the rest",
    "start": "2814200",
    "end": "2820079"
  },
  {
    "text": "of the parameters so I have the three dots and I have this variable I happen",
    "start": "2820079",
    "end": "2825920"
  },
  {
    "text": "to call it the rest but you can call it anything and it becomes now an array of all the rest of the parameters called to",
    "start": "2825920",
    "end": "2832800"
  },
  {
    "text": "my function the interesting thing is this is a real array so I don't need to do",
    "start": "2832800",
    "end": "2839440"
  },
  {
    "text": "this but shim it into an array also because I wanted the first",
    "start": "2839440",
    "end": "2845160"
  },
  {
    "text": "two parameters to be real parameters I don't have to like pop them off the stack in my um arguments array I can",
    "start": "2845160",
    "end": "2854280"
  },
  {
    "text": "just grab the rest and I can start to leverage that as a real",
    "start": "2854280",
    "end": "2859599"
  },
  {
    "text": "array rest parameters we also have this spread",
    "start": "2859599",
    "end": "2865000"
  },
  {
    "start": "2861000",
    "end": "2949000"
  },
  {
    "text": "operator so if I have an array and I want to pass it in as a bunch of parameters I can take my array and U",
    "start": "2865000",
    "end": "2873440"
  },
  {
    "text": "Move it the other way so previously where I would do apply",
    "start": "2873440",
    "end": "2878640"
  },
  {
    "text": "or call or something like that to try and get my array apart into pieces I now just call the spread operator with these",
    "start": "2878640",
    "end": "2886800"
  },
  {
    "text": "leading Three Dots and I'm able to get to where I need to be now the interesting thing is um you",
    "start": "2886800",
    "end": "2894559"
  },
  {
    "text": "can tell oh the spread operator is kind of that more powerful array literal so for example",
    "start": "2894559",
    "end": "2902079"
  },
  {
    "text": "here in es5 when I'm trying to take that user in inut the the parts and kind of",
    "start": "2902079",
    "end": "2908599"
  },
  {
    "text": "put things before and after do I need to unshift First do I need to push first was it shift or was it un",
    "start": "2908599",
    "end": "2916040"
  },
  {
    "text": "push pop you know ultimately I end up with this really awkward syntax that",
    "start": "2916040",
    "end": "2921720"
  },
  {
    "text": "doesn't really convey what I'm trying to do here on the right I've got that um Parts thing and I build my lyrics array",
    "start": "2921720",
    "end": "2929000"
  },
  {
    "text": "and I say hey I want to put some stuff before it out three dots and and take your array apart and put it in place and",
    "start": "2929000",
    "end": "2936119"
  },
  {
    "text": "then I'm going to put some stuff after it and I've got that exact same thing but now I'm conveying that intent much",
    "start": "2936119",
    "end": "2942680"
  },
  {
    "text": "more easily so we've got rest and we've got",
    "start": "2942680",
    "end": "2951000"
  },
  {
    "text": "spread and you can tell them apart because the rest parameter has um those",
    "start": "2951000",
    "end": "2956040"
  },
  {
    "text": "leading Three Dots and the spread operator has um those leading three",
    "start": "2956040",
    "end": "2962880"
  },
  {
    "text": "dots oops can you move one of the dots to the end maybe to kind of no they are exactly the",
    "start": "2963920",
    "end": "2970880"
  },
  {
    "text": "same syntax so how do I tell the rest operator from the spread operator well",
    "start": "2970880",
    "end": "2976079"
  },
  {
    "text": "the rest operator is always a parameter into a function and the spread operator",
    "start": "2976079",
    "end": "2983119"
  },
  {
    "text": "is always the other parts so if I have a function declaration even like an array literal",
    "start": "2983119",
    "end": "2990920"
  },
  {
    "text": "uh fat Arrow function and I see the dots in there then that's the rest parameter it's breaking it",
    "start": "2990920",
    "end": "2996760"
  },
  {
    "text": "apart and otherwise I have that or the rest parameter is putting them together otherwise I have that spread operator",
    "start": "2996760",
    "end": "3003240"
  },
  {
    "text": "that's breaking them apart yeah I really wish they had used a",
    "start": "3003240",
    "end": "3008280"
  },
  {
    "text": "different I don't know plus dots at the end but rest in spread can be",
    "start": "3008280",
    "end": "3016559"
  },
  {
    "start": "3015000",
    "end": "3038000"
  },
  {
    "text": "interesting so ultimately we took this really quick tour through this es6",
    "start": "3016799",
    "end": "3022240"
  },
  {
    "text": "syntax I'm going to say it again use these things sparingly use this where it",
    "start": "3022240",
    "end": "3027359"
  },
  {
    "text": "makes your code more legible don't es6 all the things but es6 this is now approachable",
    "start": "3027359",
    "end": "3035480"
  },
  {
    "text": "you can use this today we work our way through Babel and",
    "start": "3035480",
    "end": "3042520"
  },
  {
    "text": "also webpack to get from es6 into places where our browsers can use them",
    "start": "3042520",
    "end": "3048799"
  },
  {
    "start": "3048000",
    "end": "3137000"
  },
  {
    "text": "today and so ultimately yes you can use es6 today you can use it with your",
    "start": "3048799",
    "end": "3054520"
  },
  {
    "text": "existing stuff and that's what I've got any",
    "start": "3054520",
    "end": "3061280"
  },
  {
    "text": "questions thanks for [Applause]",
    "start": "3061280",
    "end": "3068280"
  },
  {
    "text": "coming",
    "start": "3068280",
    "end": "3071280"
  },
  {
    "text": "yep [Music]",
    "start": "3084359",
    "end": "3091449"
  },
  {
    "text": "M right good question is there a mechanism in es6 to deep copy there really isn't I",
    "start": "3098680",
    "end": "3106880"
  },
  {
    "text": "lean on two different tools one is serialize it to J oned back ow or I lean",
    "start": "3106880",
    "end": "3113160"
  },
  {
    "text": "on low Dash to be able to pull that off great",
    "start": "3113160",
    "end": "3117720"
  },
  {
    "text": "question thanks for coming uh my uh Twitter is robor Rich and um give me",
    "start": "3120280",
    "end": "3126480"
  },
  {
    "text": "green things we like",
    "start": "3126480",
    "end": "3130119"
  },
  {
    "text": "those",
    "start": "3136319",
    "end": "3139319"
  }
]