[
  {
    "start": "0",
    "end": "9000"
  },
  {
    "text": "are on yes okay good welcome folks we will not spend too long",
    "start": "2750",
    "end": "9020"
  },
  {
    "start": "9000",
    "end": "68000"
  },
  {
    "text": "doing introduction any things because there's a lot to get through on Monday evening meds and I were talking in",
    "start": "9020",
    "end": "14240"
  },
  {
    "text": "Copenhagen and we talked for three and a half hours though there was a bit of a break in there and we don't have three",
    "start": "14240",
    "end": "19789"
  },
  {
    "text": "and a half hours today and we're still trying to cover pretty much the same set of features and things yeah there's a",
    "start": "19789",
    "end": "26689"
  },
  {
    "text": "lot to tell and we're not going to even scratch the surface of c-sharp eight really because for one thing there's a",
    "start": "26689",
    "end": "34460"
  },
  {
    "text": "lot that we don't well I don't really know yet about what's going to happen we're going to focus on the bits of",
    "start": "34460",
    "end": "39649"
  },
  {
    "text": "c-sharp eight that our preview ball which means you can get it right now",
    "start": "39649",
    "end": "44750"
  },
  {
    "text": "although I wouldn't suggest downloading it over conference Wi-Fi very very",
    "start": "44750",
    "end": "50989"
  },
  {
    "text": "briefly I'm John skeet I'm a c-sharp developer in Google cloud platform there",
    "start": "50989",
    "end": "57500"
  },
  {
    "text": "are other Google cloud platform speakers go see awesome things mats you want to introduce yourself I'm Matt Ferguson I",
    "start": "57500",
    "end": "63890"
  },
  {
    "text": "gave the keynote this morning they introduced me there and I also don't have a slide with other Microsoft people",
    "start": "63890",
    "end": "70040"
  },
  {
    "text": "doing talks so this is highly asymmetrical and I'm already miffed but",
    "start": "70040",
    "end": "76610"
  },
  {
    "text": "there are many and you should go see them all yeah but I'm the lead designer of c-sharp and I have been really",
    "start": "76610",
    "end": "84170"
  },
  {
    "text": "burning to talk about C sharp all morning and now I finally get to sew so let's go cool so I have various demos",
    "start": "84170",
    "end": "91100"
  },
  {
    "text": "the the demo bits for both Noble reference types and for persons are the",
    "start": "91100",
    "end": "98600"
  },
  {
    "text": "same demos that you will see if you watch Justin Ahmed's do their build talk but given that it's me and Mads run",
    "start": "98600",
    "end": "105799"
  },
  {
    "text": "Dustin Ahmed's will probably have a different kink on things and in particular I've got another solution",
    "start": "105799",
    "end": "110899"
  },
  {
    "text": "which shows what happened when I tried to use nullable reference types and some of the weirdnesses that I found so yeah",
    "start": "110899",
    "end": "118610"
  },
  {
    "text": "I get to rag on Mads a bit on sage live is it's great but easy to point out so",
    "start": "118610",
    "end": "125390"
  },
  {
    "text": "it's been a whole week of that yeah we apologize by the way for people who are",
    "start": "125390",
    "end": "130640"
  },
  {
    "text": "near the front on the sides we will try to explain what we're doing so",
    "start": "130640",
    "end": "136550"
  },
  {
    "text": "if you can't see the screen you'll still have some kind of idea is this big enough by the way font wise does anyone",
    "start": "136550",
    "end": "141620"
  },
  {
    "text": "need it to be bigger yeah okay I'm getting thumbs up from the back yes so we will try to explain it audibly Mads",
    "start": "141620",
    "end": "149030"
  },
  {
    "text": "will do interpretive dance and nullable reference types and you know through the the mixed-media hopefully we'll get the",
    "start": "149030",
    "end": "154840"
  },
  {
    "text": "get the ideas flowing so mats you want to give the big picture what do we",
    "start": "154840",
    "end": "160130"
  },
  {
    "text": "picture well so I I cleverly set it up a little in the keynote this morning if you were on the site that could hear I",
    "start": "160130",
    "end": "166340"
  },
  {
    "text": "hear that there were problems with the sound on one side of the stage but essentially yes no no reference",
    "start": "166340",
    "end": "174350"
  },
  {
    "text": "exceptions are usually not popular sometimes there's a show of hands like how many people love null reference",
    "start": "174350",
    "end": "179360"
  },
  {
    "text": "exceptions and there's always a few and that's how you know who to avoid in the",
    "start": "179360",
    "end": "184970"
  },
  {
    "text": "hallway but but generally having the null reference exception is not fun",
    "start": "184970",
    "end": "190250"
  },
  {
    "text": "because then you have to chase down where it came from and why you have it and who's to blame and it's not the",
    "start": "190250",
    "end": "198650"
  },
  {
    "text": "nulls are bad it's just that you want to really say when to use them and when not",
    "start": "198650",
    "end": "204020"
  },
  {
    "text": "to write so the whole idea is that we want to retrofit a notion onto my onto a",
    "start": "204020",
    "end": "210080"
  },
  {
    "text": "c-sharp about when it's a good idea to have an Allison when it's not a good",
    "start": "210080",
    "end": "215120"
  },
  {
    "text": "idea and then we want to enforce it and in fact that the idea of there are things that are sometimes good sometimes",
    "start": "215120",
    "end": "220910"
  },
  {
    "text": "bad and we just want to let people be able to express their ideas that's sort of true of all of programming language",
    "start": "220910",
    "end": "228500"
  },
  {
    "text": "features it's all about you you have your ideas how can we make you express them where you couldn't before or",
    "start": "228500",
    "end": "234080"
  },
  {
    "text": "express them more concisely and if you start looking at every new language feature and right what is that letting",
    "start": "234080",
    "end": "239959"
  },
  {
    "text": "me express better more expressed that I couldn't express before things start to fall into place a bit more yep let's get",
    "start": "239959",
    "end": "247489"
  },
  {
    "text": "to a demo so we have a really simple class it has first name middle name last",
    "start": "247489",
    "end": "255080"
  },
  {
    "start": "252000",
    "end": "277000"
  },
  {
    "text": "name some what sort of western-centric here but leaving that aside so these are",
    "start": "255080",
    "end": "261859"
  },
  {
    "text": "all strings we have two constructors one takes just the first name and the last name and leaves the middle name property",
    "start": "261859",
    "end": "269160"
  },
  {
    "text": "specified here yeah we we don't initialize it explicitly and so you know behind the scenes we know that means",
    "start": "269160",
    "end": "275070"
  },
  {
    "text": "it'll be null and then we try to use this so if we if we try to do this with",
    "start": "275070",
    "end": "281400"
  },
  {
    "start": "277000",
    "end": "312000"
  },
  {
    "text": "me I would use Mads but I don't know his middle name and I probably wouldn't be able to spell it if you told me yes I",
    "start": "281400",
    "end": "289110"
  },
  {
    "text": "don't know I don't actually have one oh well okay Leslie from now on so we can",
    "start": "289110",
    "end": "297890"
  },
  {
    "text": "I'll just call the method rather than using the results so you know we can we",
    "start": "297890",
    "end": "307080"
  },
  {
    "text": "can get my middle name and in fact I can just write it and if we execute this",
    "start": "307080",
    "end": "313800"
  },
  {
    "start": "312000",
    "end": "346000"
  },
  {
    "text": "code this bits gonna be fine because we've got this get length the middle name method that just returns P dot",
    "start": "313800",
    "end": "319440"
  },
  {
    "text": "middle name dot length so we're dotting in two things and that will be fine for me and it will return six and when it'll",
    "start": "319440",
    "end": "325200"
  },
  {
    "text": "print six and then we talk about Miguel de Icaza now this demo isn't meant to",
    "start": "325200",
    "end": "332400"
  },
  {
    "text": "imply that wherever Miguel goes there are problems and you know he causes trouble and things that's just the",
    "start": "332400",
    "end": "338880"
  },
  {
    "text": "corollary but as soon as we do try to use Miguel as an example we will get a",
    "start": "338880",
    "end": "344730"
  },
  {
    "text": "null reference exception yeah this is this is expected now this is the slight",
    "start": "344730",
    "end": "349890"
  },
  {
    "text": "problem so I've got two different versions of visual well I've got three different versions of Visual Studio effectively installed in different hives",
    "start": "349890",
    "end": "356220"
  },
  {
    "text": "with different V sixes and things so anyway it can take a little while but hopefully you can all see we get the NRI",
    "start": "356220",
    "end": "362790"
  },
  {
    "text": "that you would expect so the whole point of this feature is to try to avoid that",
    "start": "362790",
    "end": "368910"
  },
  {
    "text": "how can we find out that that was going to happen right out having to run the code right I think that one I mean one",
    "start": "368910",
    "end": "375090"
  },
  {
    "text": "important thing here is that if you look at this little tiny example you can't you know that it's wrong but you can't",
    "start": "375090",
    "end": "381690"
  },
  {
    "text": "really point to one line of code and say that's the code that's the line that's wrong it all depends right what's it",
    "start": "381690",
    "end": "387810"
  },
  {
    "text": "supposed to be now was I supposed to have checked you know it's it's not",
    "start": "387810",
    "end": "393450"
  },
  {
    "text": "clear yes and because express the expressiveness isn't yeah yeah now",
    "start": "393450",
    "end": "399320"
  },
  {
    "text": "unfortunately for a tool you if Visual Studio is going to give us an error then it does have to pin down you",
    "start": "399320",
    "end": "406830"
  },
  {
    "text": "where where is something going to be wrong and it has chosen in this case the",
    "start": "406830",
    "end": "413249"
  },
  {
    "text": "constructor so this is using the C sharp 8 preview and that's assuming that",
    "start": "413249",
    "end": "420990"
  },
  {
    "text": "anytime you refer to a reference type in its normal form that should always be",
    "start": "420990",
    "end": "427080"
  },
  {
    "text": "non null at least by the time you know by the time we exit the constructor all",
    "start": "427080",
    "end": "432330"
  },
  {
    "text": "the properties and fields should be non null and if we have parameter of string",
    "start": "432330",
    "end": "437699"
  },
  {
    "text": "that should be non null etc etc right so to interject something here we are",
    "start": "437699",
    "end": "442830"
  },
  {
    "text": "changing the meaning of reference types in c-sharp and a little bit which is",
    "start": "442830",
    "end": "448680"
  },
  {
    "text": "quite scary which is a little scary and which is part of the reason why we haven't gone near this feature for the",
    "start": "448680",
    "end": "454110"
  },
  {
    "text": "decade that it's been discussed have you thought of maybe making integer literals hex by default yeah that would be a big",
    "start": "454110",
    "end": "462569"
  },
  {
    "text": "breaking chain right but the reason we chose to do it like that is that we don't want to just do it with all new",
    "start": "462569",
    "end": "469199"
  },
  {
    "text": "syntax where everything works the way it used to because the whole point of the feature is to point out places where you",
    "start": "469199",
    "end": "474869"
  },
  {
    "text": "code is vulnerable and your existing code is probably vulnerable in a lot of places and we want the feature to be",
    "start": "474869",
    "end": "480360"
  },
  {
    "text": "useful to find those places as well and and go and put annotations and null checks in until you're good so it has to",
    "start": "480360",
    "end": "486689"
  },
  {
    "text": "work on existing code but it is only warnings and it is the first language feature in c-sharp that is that has an",
    "start": "486689",
    "end": "493949"
  },
  {
    "text": "opt-in flag right so you'll be able to say don't give me those warnings I'm not ready to deal with it or I think your",
    "start": "493949",
    "end": "499709"
  },
  {
    "text": "whole nullable thing is stupid you get to not do it right I don't not doing is",
    "start": "499709",
    "end": "506309"
  },
  {
    "text": "quite subtle and the details are yet to be fleshed out of exactly yeah if you use a prototype it always does it",
    "start": "506309",
    "end": "512939"
  },
  {
    "text": "because we weren't prototyping the user experience of how to turn it off yes but we will at some point yeah",
    "start": "512939",
    "end": "518189"
  },
  {
    "text": "and it's complicated because you may be writing a library and you're starting to experiment with it but maybe you're not",
    "start": "518189",
    "end": "525240"
  },
  {
    "text": "ready to say this is null safe this is sort of fully baked or maybe you are",
    "start": "525240",
    "end": "530279"
  },
  {
    "text": "ready to say that because you believe everything's right but you haven't yet actually fixed up everything internally",
    "start": "530279",
    "end": "535950"
  },
  {
    "text": "or you may be consuming that library so there are all kinds of different approach that we're still working on but",
    "start": "535950",
    "end": "541140"
  },
  {
    "text": "actually let's show the feature lets show ya and and then we can talk about the things that aren't there so let's try you'll if you try to apply the",
    "start": "541140",
    "end": "549990"
  },
  {
    "text": "feature to your existing code it is like playing whack-a-mole and so we will play whack-a-mole",
    "start": "549990",
    "end": "555000"
  },
  {
    "text": "in front of you right now so it's saying it's uninitialized so let's initialize it let's yeah stupid visual studio",
    "start": "555000",
    "end": "562470"
  },
  {
    "text": "doesn't know that things are going to be null okay I've moved the error it is now",
    "start": "562470",
    "end": "567540"
  },
  {
    "text": "initialized but it's initialized to something that it's not meant to be so just to read the warning out to you it's",
    "start": "567540",
    "end": "572970"
  },
  {
    "text": "saying cannot convert no literal to non nullable reference or unconstrained type parameter which is you see sharps",
    "start": "572970",
    "end": "580530"
  },
  {
    "text": "becky's for you're getting it wrong so what are we trying to express here Mads",
    "start": "580530",
    "end": "586260"
  },
  {
    "text": "yeah something's wrong but yes what's wrong so the thing about assuming that",
    "start": "586260",
    "end": "592950"
  },
  {
    "text": "reference types as they are today no longer can have null is that we also",
    "start": "592950",
    "end": "598260"
  },
  {
    "text": "need to let you express when they can have null and so that's where this new syntax or rather existing syntax that",
    "start": "598260",
    "end": "603690"
  },
  {
    "text": "you can apply in your places right you guys we now have nullable reference types and that is why that is what the feature is called we call it nullable",
    "start": "603690",
    "end": "609930"
  },
  {
    "text": "reference types because that's what's the bit that has nuisance yes so so we want to make the middle name nullable",
    "start": "609930",
    "end": "616560"
  },
  {
    "text": "because we're saying you if we're only saying you can provide two things in this constructor yeah we could make it",
    "start": "616560",
    "end": "624650"
  },
  {
    "text": "default to an empty string and that's one way of getting everything out and",
    "start": "624650",
    "end": "630000"
  },
  {
    "text": "that may be a choice that you would make in this particular case that's an entirely reasonable choice and the",
    "start": "630000",
    "end": "635910"
  },
  {
    "text": "compiler can't possibly tell whether that's the right choice for you or making it nullable it would be a really",
    "start": "635910",
    "end": "642090"
  },
  {
    "text": "boring demo if we just left it here and said okay so yeah we're not actually going to show you how you know Abul reference types yes so we'll take the",
    "start": "642090",
    "end": "648660"
  },
  {
    "text": "opposite yes the whole point is that you get you get to choose B this forces you to think about what is my design here",
    "start": "648660",
    "end": "654660"
  },
  {
    "text": "what should i do when there is no middle name yeah it makes you make a deliberate decision and stick to it rather than",
    "start": "654660",
    "end": "661140"
  },
  {
    "text": "just have whatever happened to be there when you went home for the day right and",
    "start": "661140",
    "end": "667320"
  },
  {
    "text": "this is how you make that decision it's a single character change we're making middle name a nullable string",
    "start": "667320",
    "end": "674600"
  },
  {
    "text": "property right so whenever you get if you call person dot first name the the",
    "start": "674600",
    "end": "681020"
  },
  {
    "text": "compiler has said if you have fixed everything up and it's not it's not a firm guarantee it's not like a guarantee",
    "start": "681020",
    "end": "687920"
  },
  {
    "text": "of you know if you fetch this it definitely definitely won't return you",
    "start": "687920",
    "end": "693650"
  },
  {
    "text": "something that isn't a string it's not going to return you a button or something that's really fully baked into",
    "start": "693650",
    "end": "699620"
  },
  {
    "text": "the CLR it could return you know but if everyone's behaved nicely",
    "start": "699620",
    "end": "706100"
  },
  {
    "text": "it won't yeah okay so there's a certain amount of this is a trust system and honor system whereas middle name it's",
    "start": "706100",
    "end": "711800"
  },
  {
    "text": "saying you know what you really need to be careful now because this could be null it's it's making a polite",
    "start": "711800",
    "end": "717680"
  },
  {
    "text": "suggestion to where it's consuming it that they better be careful right Island and that polite suggestion has indeed",
    "start": "717680",
    "end": "724670"
  },
  {
    "text": "gone we've we fixed the initialization error right and we have a different",
    "start": "724670",
    "end": "730970"
  },
  {
    "text": "problem somewhere else so now the consumer of this API they get presented",
    "start": "730970",
    "end": "736280"
  },
  {
    "text": "with a different public surface area and these question marks you know travel with the signatures across assembly",
    "start": "736280",
    "end": "741890"
  },
  {
    "text": "boundaries and now we see the question mark on this side of the compiler does and it says it says possible dereference",
    "start": "741890",
    "end": "748880"
  },
  {
    "text": "of a null reference mm-hmm okay this time not so much you're doing it wrong",
    "start": "748880",
    "end": "754370"
  },
  {
    "text": "as you might be doing it wrong there's this is a bit of danger so note that",
    "start": "754370",
    "end": "761180"
  },
  {
    "text": "it's not saying that P might be null because P here is a value of type person",
    "start": "761180",
    "end": "766450"
  },
  {
    "text": "non-noble person it's saying that in fact it's the squiggle is in slightly",
    "start": "766450",
    "end": "773480"
  },
  {
    "text": "the wrong place it should be on this dot that isn't covered by the squiggles yes I think that's probably right that's the",
    "start": "773480",
    "end": "779030"
  },
  {
    "text": "bit that's potentially wrong but it's not all kinds of do referencing that have syntax we can put space I absolutely think we're trying to be",
    "start": "779030",
    "end": "785210"
  },
  {
    "text": "consistent here yeah so this is the things that I can be my excuse but with nd referencing all right so what can we",
    "start": "785210",
    "end": "792380"
  },
  {
    "text": "do about that we can you know what do we want to return if someone has no middle names what do you think what if you",
    "start": "792380",
    "end": "798170"
  },
  {
    "text": "don't have a middle name what's the length zero okay we can do that so we'll use",
    "start": "798170",
    "end": "803720"
  },
  {
    "text": "the null conditional operator which works just as well as it always has and so the value of this expression sorry",
    "start": "803720",
    "end": "810920"
  },
  {
    "text": "that the static type for this expression is now null int and we can just use null",
    "start": "810920",
    "end": "816260"
  },
  {
    "text": "coalescing operator and or of course we could have returned we could have changed the signature of the method and",
    "start": "816260",
    "end": "822680"
  },
  {
    "text": "and propagated it back but that you know so now when we run it we should no",
    "start": "822680",
    "end": "829280"
  },
  {
    "start": "829000",
    "end": "913000"
  },
  {
    "text": "longer get the exception 6 which was from my middle name and 0 for Miguel so",
    "start": "829280",
    "end": "836930"
  },
  {
    "text": "the thing to realize here is you didn't have to do a new kind of thing to tell to convince the compiler that there",
    "start": "836930",
    "end": "844070"
  },
  {
    "text": "wasn't a null here and so unlike many systems that have sort of null",
    "start": "844070",
    "end": "849650"
  },
  {
    "text": "resilience built in from the start they could just have the only way you can check for null in those systems and get",
    "start": "849650",
    "end": "856490"
  },
  {
    "text": "a value the only way you could get a value out is if you check for null first like it's sort of built-in whether it's done with pattern matching or something",
    "start": "856490",
    "end": "862610"
  },
  {
    "text": "similar by construction you can't do reference until you've ruled out the possibility that there's a null you can",
    "start": "862610",
    "end": "868910"
  },
  {
    "text": "only do reference into a body of code where it's known not to be known and we",
    "start": "868910",
    "end": "874400"
  },
  {
    "text": "don't want we could do that in c-sharp in fact pattern matching will do that for you in c-sharp but we don't want to",
    "start": "874400",
    "end": "879740"
  },
  {
    "text": "force you to write your code in your way the whole point of this is finding out whether your existing code is good and",
    "start": "879740",
    "end": "885470"
  },
  {
    "text": "helping you fix it in the ways you've always fixed it in there about a million or maybe twelve there abouts different",
    "start": "885470",
    "end": "891620"
  },
  {
    "text": "ways you're checking for null today or making sure something's not null and we try to recognize all of those by doing a",
    "start": "891620",
    "end": "897770"
  },
  {
    "text": "flow analysis on the body of the of the code that is using the denali ball",
    "start": "897770",
    "end": "904040"
  },
  {
    "text": "references which brings up an interesting point about it's not just it's not as simple as it sounds like it",
    "start": "904040",
    "end": "909980"
  },
  {
    "text": "might be so let's let's try to extract this if this expression is far too long",
    "start": "909980",
    "end": "915050"
  },
  {
    "text": "let's let's try to extract some locals so if we do string middle equals P dot",
    "start": "915050",
    "end": "920360"
  },
  {
    "text": "middle name that should give us a warning because hey that's not that that's none of all and this is non",
    "start": "920360",
    "end": "926600"
  },
  {
    "text": "nullable so we can say okay we've got a nullable local variable and then we can",
    "start": "926600",
    "end": "932300"
  },
  {
    "text": "say should I use that the schools in touch you can show new schools interpreting of them so if we",
    "start": "932300",
    "end": "938480"
  },
  {
    "text": "use this we can return null sorry return zero there now what should happen if I",
    "start": "938480",
    "end": "946139"
  },
  {
    "text": "do middle dot length as after this check if this were a simple feature that the",
    "start": "946139",
    "end": "954209"
  },
  {
    "text": "compiler thought okay well the type of middle is still nullable string therefore any time you dot into it you",
    "start": "954209",
    "end": "962639"
  },
  {
    "text": "know we need to warn you then this would not compile but that would be I'll give you a less useful sorry yeah it would",
    "start": "962639",
    "end": "968730"
  },
  {
    "text": "give you a warning and that would be less useful so effectively the fact that you can see there are no scribbles here",
    "start": "968730",
    "end": "974190"
  },
  {
    "text": "the compiler keeps for each is it just for local variables no it's for local",
    "start": "974190",
    "end": "980490"
  },
  {
    "text": "variables and a lot of names as well right okay if you had done it with directly with Peter middle name instead",
    "start": "980490",
    "end": "986130"
  },
  {
    "text": "of having it that would still work essentially whichever way you do it",
    "start": "986130",
    "end": "991560"
  },
  {
    "text": "right up to a certain point like we track essentially the flow analysis tracks current null ability for a given",
    "start": "991560",
    "end": "1000019"
  },
  {
    "text": "point in code for a given for any given variable that is either a simple or a",
    "start": "1000019",
    "end": "1005209"
  },
  {
    "text": "dotted name right does it more efficiently than that but but that's",
    "start": "1005209",
    "end": "1010670"
  },
  {
    "text": "essentially it yeah and so in this danger here just yeah it's a highlight that suppose your",
    "start": "1010670",
    "end": "1016910"
  },
  {
    "text": "middle name property either someone was messing with it in a different thread or it was a bizarre property like date time",
    "start": "1016910",
    "end": "1024650"
  },
  {
    "text": "now is a bizarre property because it changes value all the time maybe P dot middle name uses date time now and says",
    "start": "1024650",
    "end": "1031428"
  },
  {
    "text": "if the second of the minute is zero it will return you null otherwise it will",
    "start": "1031429",
    "end": "1037250"
  },
  {
    "text": "return you something non null then you could easily still get a null reference",
    "start": "1037250",
    "end": "1042650"
  },
  {
    "text": "exception here right the idea is to protect you from the 80% of bugs or probably more like nineteen so this is",
    "start": "1042650",
    "end": "1049640"
  },
  {
    "text": "one of many ways in which there the null warning system isn't precise and can't",
    "start": "1049640",
    "end": "1055130"
  },
  {
    "text": "be and we just have to live with that but it's still we hope it was still",
    "start": "1055130",
    "end": "1061730"
  },
  {
    "text": "pretty good and a lot a large part of it is not so much about does it catch everything",
    "start": "1061730",
    "end": "1067350"
  },
  {
    "text": "it's about making you make those deliberate decisions we're having the",
    "start": "1067350",
    "end": "1072450"
  },
  {
    "text": "expressiveness around it then the rest usually falls out pretty well yeah it has a corner case it's probably the best",
    "start": "1072450",
    "end": "1078059"
  },
  {
    "text": "example I've seen of the C sharp team being pragmatic rather than dogmatic so",
    "start": "1078059",
    "end": "1083309"
  },
  {
    "text": "we've seen that in in other places as well glad you don't say first no definitely not so another example would",
    "start": "1083309",
    "end": "1091289"
  },
  {
    "text": "be a sink and a weight that you a sink methods in c-sharp v always returned tasks or tasks of T or void it's like",
    "start": "1091289",
    "end": "1098280"
  },
  {
    "text": "well ah that's not not as general as it could be yeah but do you know what it does the job and okay it's generalized",
    "start": "1098280",
    "end": "1104220"
  },
  {
    "text": "more in c-sharp 7 in a way that most people won't use um other than using value tasks but we did pretty well for a",
    "start": "1104220",
    "end": "1111600"
  },
  {
    "text": "long time since what 2013 something like that yeah and when you were saying about",
    "start": "1111600",
    "end": "1117049"
  },
  {
    "text": "1968 versus 1967 for similar it's like visual studio year numbers aren't always",
    "start": "1117049",
    "end": "1122370"
  },
  {
    "text": "necessarily the same as calendars so",
    "start": "1122370",
    "end": "1128039"
  },
  {
    "text": "you're building from the best I guess yeah yeah that's one of the main lessons we took from at okay so we have been 20",
    "start": "1128039",
    "end": "1138240"
  },
  {
    "start": "1134000",
    "end": "1488000"
  },
  {
    "text": "minutes we've got a few minutes are there any other points about no ability that you particularly want to hit I",
    "start": "1138240",
    "end": "1143610"
  },
  {
    "text": "think you had one that you wanted to get into right right so there's one interesting idea here in terms of is it",
    "start": "1143610",
    "end": "1153510"
  },
  {
    "text": "reference equality yeah so I demonstrated before that if you if",
    "start": "1153510",
    "end": "1159840"
  },
  {
    "text": "you check whether something is null if you do if text is null then the compiler",
    "start": "1159840",
    "end": "1166169"
  },
  {
    "text": "knows after that that text length is fine but this is just one way of",
    "start": "1166169",
    "end": "1171240"
  },
  {
    "text": "checking whether it's null another would be to use reference equals text no and",
    "start": "1171240",
    "end": "1178700"
  },
  {
    "text": "suddenly we get squiggles yes because the compiler doesn't know that reference",
    "start": "1178700",
    "end": "1184140"
  },
  {
    "text": "equals checks for equality and a method call exactly and another example would",
    "start": "1184140",
    "end": "1190140"
  },
  {
    "text": "be in string dot is no loyalty next so if string dot is null or empty returns",
    "start": "1190140",
    "end": "1196409"
  },
  {
    "text": "true then it might be no yeah this should be might be but if it returns",
    "start": "1196409",
    "end": "1202830"
  },
  {
    "text": "false then it definitely isn't and I was concerned until Monday evening that",
    "start": "1202830",
    "end": "1210209"
  },
  {
    "text": "either we'd end up with situations where we would know that something was non null but we would have to tell the",
    "start": "1210209",
    "end": "1217320"
  },
  {
    "text": "compiler we knew better than that better than it did which is like that's what a cast always is it's saying I know more",
    "start": "1217320",
    "end": "1224279"
  },
  {
    "text": "than you do and every time you do that that's a source of potential for you being wrong so I want to avoid that as",
    "start": "1224279",
    "end": "1231059"
  },
  {
    "text": "far as possible we we do have that yes we do it's a good opportunity which I",
    "start": "1231059",
    "end": "1236070"
  },
  {
    "text": "don't know I would really like it if this stayed officially as the dammit operator",
    "start": "1236070",
    "end": "1241709"
  },
  {
    "text": "my guess is you're not gonna be allowed no we are based in America we can we can't call it that oh it was based in",
    "start": "1241709",
    "end": "1248190"
  },
  {
    "text": "Europe so yes we can call it the damnit operator yeah so text dammit it's a it's",
    "start": "1248190",
    "end": "1256379"
  },
  {
    "text": "no no it's a postfix exclamation mark that says whatever null ability warnings",
    "start": "1256379",
    "end": "1263339"
  },
  {
    "text": "you were about to give here compiler don't give me those warnings because I know exactly what I'm doing so you can",
    "start": "1263339",
    "end": "1269969"
  },
  {
    "text": "also call it D I know what I'm doing already there this will be on my tombstone but you know it has many names",
    "start": "1269969",
    "end": "1278759"
  },
  {
    "text": "my favorite example of it when I was applying all of this denoted time was if you're checking if you're calling a",
    "start": "1278759",
    "end": "1285779"
  },
  {
    "text": "method that says it shouldn't accept a non novel reference if you're writing a",
    "start": "1285779",
    "end": "1293429"
  },
  {
    "text": "library you should still be checking whether it's not or not because someone might be using an old compiler or might",
    "start": "1293429",
    "end": "1299700"
  },
  {
    "text": "be disabling things etc so you should still be checking you should throw an argument null exception and so no time",
    "start": "1299700",
    "end": "1306389"
  },
  {
    "text": "is a good citizen it does so and I wanted tests to check that so how do you",
    "start": "1306389",
    "end": "1311789"
  },
  {
    "text": "how do you knowingly pass null and convince the compiler that it's okay and you write that you do something like",
    "start": "1311789",
    "end": "1318659"
  },
  {
    "text": "console dot write line no oh damn it this is really not now or at least I",
    "start": "1318659",
    "end": "1326039"
  },
  {
    "text": "want you to ignore the fact that it really is no um however so but that's",
    "start": "1326039",
    "end": "1331710"
  },
  {
    "text": "not the reason why you stopped being returned Monday night right going back to this so my concern was",
    "start": "1331710",
    "end": "1337080"
  },
  {
    "text": "that either we would end up having to use the damnit operator far more than we wanted to or that the compiler would",
    "start": "1337080",
    "end": "1342630"
  },
  {
    "text": "have built into it this is what reference equals does this is what string dot is null or empty does and",
    "start": "1342630",
    "end": "1348450"
  },
  {
    "text": "those are different things so string dot is null or empty you know returns true or false and that's part of it",
    "start": "1348450",
    "end": "1355080"
  },
  {
    "text": "reference equals it's only useful if you know that one side of it is null because",
    "start": "1355080",
    "end": "1360840"
  },
  {
    "text": "if it's just if reference equals XY then whether that returns true or false you",
    "start": "1360840",
    "end": "1366300"
  },
  {
    "text": "don't know whether X or Y are null you know there'd be that they are the same",
    "start": "1366300",
    "end": "1371940"
  },
  {
    "text": "degree of null right and there are there are other things there are methods that if you pass in null it will return null",
    "start": "1371940",
    "end": "1379530"
  },
  {
    "text": "if you pass in non null it will return non null so all the cast operators in",
    "start": "1379530",
    "end": "1384720"
  },
  {
    "text": "link to XML you can cast a null x element reference to string and it will return string it's sort of null",
    "start": "1384720",
    "end": "1390480"
  },
  {
    "text": "propagating methods player I think their generic things as well where you have the you have some of the link operators",
    "start": "1390480",
    "end": "1396960"
  },
  {
    "text": "like first or default mm-hmm that says in the method name I don't care what your word your elements",
    "start": "1396960",
    "end": "1404820"
  },
  {
    "text": "are but I might return an all right right so if you if you use that with an unknowable element type you still get",
    "start": "1404820",
    "end": "1411240"
  },
  {
    "text": "nulls right so the list is pretty long but but you can make an excessive list I",
    "start": "1411240",
    "end": "1417990"
  },
  {
    "text": "think of the sort of 98 99 percent of special null behaviors that are out",
    "start": "1417990",
    "end": "1423480"
  },
  {
    "text": "there for methods and then you can create a little little language in attributes that's what we are currently",
    "start": "1423480",
    "end": "1431370"
  },
  {
    "text": "working on of attribute said you can put a message to say this method has special null behavior either you know it returns",
    "start": "1431370",
    "end": "1438780"
  },
  {
    "text": "a boolean and that affects this particular parameter but your attribute on or the whole method is an equality",
    "start": "1438780",
    "end": "1444570"
  },
  {
    "text": "method or things like that so we can we can make that little language and then you can use it or and we can use it in",
    "start": "1444570",
    "end": "1450000"
  },
  {
    "text": "in our libraries and use that the compiler can know about that language we just about the specific about the",
    "start": "1450000",
    "end": "1456450"
  },
  {
    "text": "specific method because I'm not going to submit a pull request to Rosalyn saying please be aware of these no design",
    "start": "1456450",
    "end": "1462660"
  },
  {
    "text": "methods thought I still want to be I still want the compiler to be aware of where I have special null handling so I was",
    "start": "1462660",
    "end": "1470170"
  },
  {
    "text": "very pleased to hear that there will be this this little language and that certain little plan but in the prototype",
    "start": "1470170",
    "end": "1476770"
  },
  {
    "text": "that's fine that's fine cool I said we should stop nullity in",
    "start": "1476770",
    "end": "1481840"
  },
  {
    "text": "about 25 minutes it is exactly oh it's now 26 minutes sorry so we should look at patterns okay",
    "start": "1481840",
    "end": "1488650"
  },
  {
    "start": "1488000",
    "end": "1776000"
  },
  {
    "text": "I have the other can I say something about patterns we're in the old coat that you had there yeah did you close it",
    "start": "1488650",
    "end": "1495550"
  },
  {
    "text": "you closed it but I've got something similar in the other one it's just do you yeah yeah you do the comparison here",
    "start": "1495550",
    "end": "1503350"
  },
  {
    "text": "right actually comparing comparing to null with the equals equals is it's a",
    "start": "1503350",
    "end": "1511030"
  },
  {
    "text": "bit of a smell and you will have because you have the risk that somebody has overloaded the Equality operator and",
    "start": "1511030",
    "end": "1518280"
  },
  {
    "text": "they actually do something other than you would expect them to usually if it's",
    "start": "1518280",
    "end": "1524350"
  },
  {
    "text": "a good override of the Equality operator it will still deal well with null and you'll get this one you might using the",
    "start": "1524350",
    "end": "1530500"
  },
  {
    "text": "stringer but you might be you you might be executing a lot of user code to get to that yeah um so actually since",
    "start": "1530500",
    "end": "1536890"
  },
  {
    "text": "c-sharp seven oh this is a little trick the way that at least I recommend I",
    "start": "1536890",
    "end": "1542140"
  },
  {
    "text": "don't have to put it into the guidelines head checking for null is to use the is operator because the is operator now",
    "start": "1542140",
    "end": "1548560"
  },
  {
    "text": "takes patterns and one of the patterns is the constant pattern and in all is a",
    "start": "1548560",
    "end": "1553750"
  },
  {
    "text": "constant and so by using pattern matching here to check through the is",
    "start": "1553750",
    "end": "1559000"
  },
  {
    "text": "keyword whether it's null that goes another route that doesn't let you plug",
    "start": "1559000",
    "end": "1564250"
  },
  {
    "text": "in user code and indeed make sure that you are checking that the reference is",
    "start": "1564250",
    "end": "1571090"
  },
  {
    "text": "null not running through some some custom stuff actually one of the site benefits there's another feature that's",
    "start": "1571090",
    "end": "1576340"
  },
  {
    "text": "being discussed to be able to combine patterns you know if this pattern or this pattern which would be potentially",
    "start": "1576340",
    "end": "1583690"
  },
  {
    "text": "with keywords of or and and and maybe not and if we have that as well then we",
    "start": "1583690",
    "end": "1589090"
  },
  {
    "text": "can be you know almost like single now you could have if something is not know",
    "start": "1589090",
    "end": "1595350"
  },
  {
    "text": "person's so that's yeah that's that one so I'm down to one Visual Studio open",
    "start": "1600059",
    "end": "1606330"
  },
  {
    "text": "that's that's always good okay it's gone faster and faster notice we're speaking faster as well as we're releasing",
    "start": "1606330",
    "end": "1611730"
  },
  {
    "text": "processing cycles here so patterns yeah",
    "start": "1611730",
    "end": "1617279"
  },
  {
    "text": "do you know should we show the person you show that the types involved first",
    "start": "1617279",
    "end": "1624059"
  },
  {
    "text": "so we have a person that's base class with first name and last name a professor is a person some students may",
    "start": "1624059",
    "end": "1632070"
  },
  {
    "text": "disagree but a professor is a person who also has a subject and a student is a",
    "start": "1632070",
    "end": "1638460"
  },
  {
    "text": "person that professors like a student is a person who also has a professor and",
    "start": "1638460",
    "end": "1644909"
  },
  {
    "text": "they're all done simply and I would",
    "start": "1644909",
    "end": "1649919"
  },
  {
    "text": "point out the yeah there's a little person here that if you haven't seen",
    "start": "1649919",
    "end": "1654929"
  },
  {
    "text": "before it's lovely where a constructor if it's just",
    "start": "1654929",
    "end": "1661260"
  },
  {
    "text": "assigning properties or fields one neat way of doing it is to use a couple on the right-hand side and deconstruction",
    "start": "1661260",
    "end": "1667620"
  },
  {
    "text": "on the left-hand side and matza shows me that the compiler is smart enough to avoid creating the tupple I need to",
    "start": "1667620",
    "end": "1673710"
  },
  {
    "text": "verify this at some point and what I particularly like about this is in the",
    "start": "1673710",
    "end": "1678960"
  },
  {
    "text": "person class we've got not only a constructor but a Deconstructor and the Deconstructor looks exactly the same as",
    "start": "1678960",
    "end": "1685080"
  },
  {
    "text": "a constructor but slightly reversed which you know makes the whole name work really really well mm-hmm",
    "start": "1685080",
    "end": "1691260"
  },
  {
    "text": "so yeah we did think about it a little bit nice pattern so net yeah because you",
    "start": "1691260",
    "end": "1697049"
  },
  {
    "text": "know actually initially when we added expression body members we didn't even add them for constructors because like who has a constructor of only of only",
    "start": "1697049",
    "end": "1704220"
  },
  {
    "text": "one statement you typically have a number of assignments but once we had deconstruction in there all of a sudden",
    "start": "1704220",
    "end": "1710399"
  },
  {
    "text": "this pattern became possible and now it you know it's a whole pattern you made like you know you may not but it's a",
    "start": "1710399",
    "end": "1716370"
  },
  {
    "text": "whole pattern where you can initialize your whole object in one expression and then just make it an expression body and",
    "start": "1716370",
    "end": "1721649"
  },
  {
    "text": "there you go off to the races I love it too and it kind of in terms of why you would do it it's not because it saves",
    "start": "1721649",
    "end": "1727140"
  },
  {
    "text": "you a couple of lines of code but it does when you look at that you know all this constructor is doing is a sign",
    "start": "1727140",
    "end": "1733230"
  },
  {
    "text": "proxy's yeah that's kind of all it can do because the only statement is an",
    "start": "1733230",
    "end": "1738270"
  },
  {
    "text": "assignment statement right so I like what you do if you do anything other than pass for Amazon on the right hand",
    "start": "1738270",
    "end": "1743669"
  },
  {
    "text": "side if you start having logic like oh that parameter and multiply it by the other parameter or anything like that",
    "start": "1743669",
    "end": "1749220"
  },
  {
    "text": "then I wouldn't do it any more because then one thing it does is it removes the",
    "start": "1749220",
    "end": "1755490"
  },
  {
    "text": "assignee and the and the value from each other a little too much for there being",
    "start": "1755490",
    "end": "1761220"
  },
  {
    "text": "anything fancy going on the one exception I might make to that is calling a method that validates that",
    "start": "1761220",
    "end": "1767490"
  },
  {
    "text": "something's not not sure okay but maybe yes okay simple to do with just the one value we've negotiated right so we",
    "start": "1767490",
    "end": "1776820"
  },
  {
    "text": "should talk about patterns patterns that's right came from and this is the only useful method we're just calling",
    "start": "1776820",
    "end": "1782460"
  },
  {
    "text": "yeah we're just calling this method we'll focus on this method right so there are two things we want to well",
    "start": "1782460",
    "end": "1790169"
  },
  {
    "text": "there are several things we want to do with patterns and we sort of happy to take patterns a bit at a time from",
    "start": "1790169",
    "end": "1795929"
  },
  {
    "text": "release to release once we know how the previous batch kind of played out and",
    "start": "1795929",
    "end": "1801470"
  },
  {
    "text": "the next round includes a few things first of all it's it's all hunky-dory",
    "start": "1801470",
    "end": "1807330"
  },
  {
    "text": "though you have a slightly different assembly that's still fine it's all that",
    "start": "1807330",
    "end": "1813540"
  },
  {
    "text": "you have a what's that it's the one Dustin gave me is it yeah anyway",
    "start": "1813540",
    "end": "1820440"
  },
  {
    "text": "so using switch statements can sometimes be a bit of a pain it's actually not too bad here because you're calling returned",
    "start": "1820440",
    "end": "1826140"
  },
  {
    "text": "in all these places and so you don't have to say break and so it kind of saves you a line for every case but I",
    "start": "1826140",
    "end": "1832280"
  },
  {
    "text": "imagine that you had a variable that you need to get the string into and do something else with after then you have",
    "start": "1832280",
    "end": "1838740"
  },
  {
    "text": "to assign to the variable and then do the break and it gets a little more cumbersome but either way we decided",
    "start": "1838740",
    "end": "1844260"
  },
  {
    "text": "it's time to have a switch expression in c-sharp that's the same pretty much as a",
    "start": "1844260",
    "end": "1849720"
  },
  {
    "text": "switch statement except the syntax is nicer and it works with expressions okay so we could instead of running the",
    "start": "1849720",
    "end": "1860100"
  },
  {
    "text": "switch here we could we could just return a switch expression and then whatever gets chosen gets",
    "start": "1860100",
    "end": "1867210"
  },
  {
    "text": "turned so the way it looks is the syntax we're thinking of is sort of an infix",
    "start": "1867210",
    "end": "1873300"
  },
  {
    "text": "notation because that's more expression e where you say person switch and then curly braces and then you have your",
    "start": "1873300",
    "end": "1881100"
  },
  {
    "text": "cases inside of the switch end it with a semicolon like usual and now it's",
    "start": "1881100",
    "end": "1886590"
  },
  {
    "text": "complaining a little bit that it can't figure out the type of this switch expression because there's nothing",
    "start": "1886590",
    "end": "1891630"
  },
  {
    "text": "inside of it so we need to put something inside away so let's start doing that we can just just take them from the top we",
    "start": "1891630",
    "end": "1899580"
  },
  {
    "text": "we don't want to make you put the the case keyword in there we saw it's always gonna be that white why bother making",
    "start": "1899580",
    "end": "1905940"
  },
  {
    "text": "you repeat something that's not always going to be there the colons there's so many things in expressions that have colons we figured it would look red a",
    "start": "1905940",
    "end": "1913110"
  },
  {
    "text": "little nicer with the with the fed arrow but we're willing to discuss we actually changed our minds like a couple of days",
    "start": "1913110",
    "end": "1918720"
  },
  {
    "text": "before we ship the prototype on that so can change again but that's what the",
    "start": "1918720",
    "end": "1923760"
  },
  {
    "text": "that's what a conditioned part of it looks like and then you just put instead of a statement you put it just put an",
    "start": "1923760",
    "end": "1929580"
  },
  {
    "text": "expression on on the right hand side there so we can take that ik o did I do something that copying is apparently",
    "start": "1929580",
    "end": "1936570"
  },
  {
    "text": "very help yeah must do is it formatting my my clipboard who days when I was",
    "start": "1936570",
    "end": "1945930"
  },
  {
    "text": "anyway so so that's all that a case looks like right pattern fat arrow",
    "start": "1945930",
    "end": "1951980"
  },
  {
    "text": "expression and then a comma separated because again feels more expression e",
    "start": "1951980",
    "end": "1957470"
  },
  {
    "text": "and we can do the other ones single lioness there so we can say student s fat arrow at least you have the same",
    "start": "1957470",
    "end": "1965430"
  },
  {
    "text": "keyboard as I do so that's the wrong one oh yeah yeah right and you've missed the",
    "start": "1965430",
    "end": "1972240"
  },
  {
    "text": "teal student just too before it starts complaining us as too much I did as well and I was just saying how nice it is",
    "start": "1972240",
    "end": "1979320"
  },
  {
    "text": "that a keyboard I can actually use but apparently not student and to step into the role of Dustin there will be",
    "start": "1979320",
    "end": "1985670"
  },
  {
    "text": "glorious refactorings that make all of this easy yeah having done tens of these",
    "start": "1985670",
    "end": "1990990"
  },
  {
    "text": "at least manually it gets kind of frustrating yeah so again just a prototype the for the",
    "start": "1990990",
    "end": "1998310"
  },
  {
    "text": "for the in case there's actually a wind clause in the in the switch statement but which",
    "start": "1998310",
    "end": "2007430"
  },
  {
    "text": "is not part of the pattern which is part of the case and those are also available in the in the expression syntax even",
    "start": "2007430",
    "end": "2014690"
  },
  {
    "text": "walnuts types just that aspect of when is not part of the pattern and I found",
    "start": "2014690",
    "end": "2021740"
  },
  {
    "text": "it useful when I've been learning about patterns to separate out in my mind what",
    "start": "2021740",
    "end": "2027350"
  },
  {
    "text": "patterns are available so there are type matching patterns will show you property matching patterns there are constant",
    "start": "2027350",
    "end": "2033830"
  },
  {
    "text": "patterns and var persons is that it or I missed no that might be it so there are",
    "start": "2033830",
    "end": "2041270"
  },
  {
    "text": "kinds of patterns and then there are the places you can apply them which are if",
    "start": "2041270",
    "end": "2046910"
  },
  {
    "text": "statements or boolean conditions and switch statements and now switch",
    "start": "2046910",
    "end": "2052220"
  },
  {
    "text": "expressions and each of those may well very may well be augmented independently",
    "start": "2052220",
    "end": "2058100"
  },
  {
    "text": "but if you think of them as orthogonal things then as soon as you've learned oh",
    "start": "2058100",
    "end": "2063950"
  },
  {
    "text": "there's a new kind of pattern you know I can apply it in these places so just",
    "start": "2063950",
    "end": "2069409"
  },
  {
    "text": "that's a learning yeah tricking yep so this switch statement was already being",
    "start": "2069410",
    "end": "2074840"
  },
  {
    "text": "a bit modern also in that instead of having a default it had a case",
    "start": "2074840",
    "end": "2080659"
  },
  {
    "text": "underscore which is the new discard pattern and it's used elsewhere as well",
    "start": "2080660",
    "end": "2087379"
  },
  {
    "text": "and that indeed is the only way that you can provide a default clause you don't get to say default in a switch but",
    "start": "2087380",
    "end": "2093740"
  },
  {
    "text": "that's so this is really just syntax it's just it reached nicer this way at least I think so but yeah you mileage",
    "start": "2093740",
    "end": "2101750"
  },
  {
    "text": "may vary it's it's a bit of a I mean it's a bit of a big expression here with",
    "start": "2101750",
    "end": "2108350"
  },
  {
    "text": "the long strings and so on but no not too bad so switch expressions that's one thing can we get it old compiled by",
    "start": "2108350",
    "end": "2114830"
  },
  {
    "start": "2114000",
    "end": "2468000"
  },
  {
    "text": "getting rid of this down yeah then we can take the unreachable code and yep so there we go and I just I feel on a bound",
    "start": "2114830",
    "end": "2122000"
  },
  {
    "text": "to then turn it into an expression body member just Mads isn't as keen on this",
    "start": "2122000",
    "end": "2127580"
  },
  {
    "text": "as I am but I I wanted to do this every time I when I watched the the build thing is hey why didn't",
    "start": "2127580",
    "end": "2134640"
  },
  {
    "text": "you turn it now it's just one expression why are you still using a return statement this is just lovely right but",
    "start": "2134640",
    "end": "2140580"
  },
  {
    "text": "this isn't we haven't shown any new persons we were going to say about persons yes what's going on with that well the the thing we're thinking for",
    "start": "2140580",
    "end": "2148140"
  },
  {
    "text": "the next bit of pattern matching is that it'd be nice if you could have patterns",
    "start": "2148140",
    "end": "2153720"
  },
  {
    "text": "to go a little deeper alright so we have these type patterns and we could maybe make them smarter we do we we take we",
    "start": "2153720",
    "end": "2161550"
  },
  {
    "text": "give a name to the thing we we get when when the type check is true and then we",
    "start": "2161550",
    "end": "2167250"
  },
  {
    "text": "we just dot into this name for different things we fish them out what if we could",
    "start": "2167250",
    "end": "2172859"
  },
  {
    "text": "as part of the pattern we could get at those so that's what the two different kinds of recursive patterns what they're",
    "start": "2172859",
    "end": "2178740"
  },
  {
    "text": "for so in the person pattern let's start with the person in the type pattern you",
    "start": "2178740",
    "end": "2184619"
  },
  {
    "text": "can put for instance what we call a property pattern so that starts with a curly and ends with a curly and inside",
    "start": "2184619",
    "end": "2191609"
  },
  {
    "text": "you can start talking about the properties of person there's fields and properties okay so if I start typing you",
    "start": "2191609",
    "end": "2197970"
  },
  {
    "text": "see I get completion I can talk about the first name of the item I'm interested in the last name here",
    "start": "2197970",
    "end": "2204119"
  },
  {
    "text": "for my condition so I can say last name colon and then apply a pet now I can put a pattern I can apply a pattern to the",
    "start": "2204119",
    "end": "2209940"
  },
  {
    "text": "last name for instance I can apply the constant pattern and use the Campbell constant and put it there instead and",
    "start": "2209940",
    "end": "2218609"
  },
  {
    "text": "now I essentially took that when clause and make it made it obsolete because I'm just applying the pattern that checks",
    "start": "2218609",
    "end": "2225180"
  },
  {
    "text": "for the exact value of the of the last name I'm applying that directly where",
    "start": "2225180",
    "end": "2231900"
  },
  {
    "text": "that came from there we go so that's one way of doing it right and now I we could get the",
    "start": "2231900",
    "end": "2239070"
  },
  {
    "text": "first name as well yes we could yeah you want to just to just to you know go all out you might",
    "start": "2239070",
    "end": "2246480"
  },
  {
    "text": "may or may not want to but we say the first name the all we want with the first name is we want to grab it so we",
    "start": "2246480",
    "end": "2251700"
  },
  {
    "text": "can use it later and you and the Gravatt pattern is the VAR pattern which always",
    "start": "2251700",
    "end": "2257010"
  },
  {
    "text": "works right which is probably worth highlighting actually in this particular case so yeah so Mazdas changing instead",
    "start": "2257010",
    "end": "2264900"
  },
  {
    "text": "of tossing in the first name here we can just use FN now now if you're someone who has strong opinions",
    "start": "2264900",
    "end": "2272060"
  },
  {
    "text": "about I don't want to use var I want to use string it's worth understanding that",
    "start": "2272060",
    "end": "2277490"
  },
  {
    "text": "in this particular case changing varta string makes a difference yes because",
    "start": "2277490",
    "end": "2284030"
  },
  {
    "text": "the vowel pattern always matches whatever the value is the type pattern",
    "start": "2284030",
    "end": "2289190"
  },
  {
    "text": "only matches for non audible reference types at least I don't know what would happen if you did a string question mark",
    "start": "2289190",
    "end": "2295400"
  },
  {
    "text": "in there I mean in this preview of homework there's I think we won't allow it right because the nullable nullable",
    "start": "2295400",
    "end": "2302839"
  },
  {
    "text": "types are not supposed to have any semantic impact right anywhere they only give you warnings or not okay so so if",
    "start": "2302839",
    "end": "2310310"
  },
  {
    "text": "we change this to string FN then it won't match if the first name is null",
    "start": "2310310",
    "end": "2315339"
  },
  {
    "text": "okay so we're we're you've trained your brain to say I can change var to the",
    "start": "2315339",
    "end": "2320960"
  },
  {
    "text": "type of the the thing that I'm looking at at any time that's not the case for patterns right okay you can essentially",
    "start": "2320960",
    "end": "2326900"
  },
  {
    "text": "say var is in nullable version of it and will always accept and just give you",
    "start": "2326900",
    "end": "2333890"
  },
  {
    "text": "infer the type and give you a name for it right I know we don't need P now you don't need P so now you get to alight",
    "start": "2333890",
    "end": "2340250"
  },
  {
    "text": "that because nobody's using it anymore you don't have to give the whole thing a name and actually because the thing that",
    "start": "2340250",
    "end": "2346010"
  },
  {
    "text": "comes in is type this person you can also light the the type to begin with and it's still the type pattern even",
    "start": "2346010",
    "end": "2351560"
  },
  {
    "text": "though it now has none of the elements of the type pattern that the previous type pattern has right it's just abbreviating different things and you",
    "start": "2351560",
    "end": "2358369"
  },
  {
    "text": "don't have to you know you can still put the person there if you find that more readable I'm uncertain on this I think",
    "start": "2358369",
    "end": "2364910"
  },
  {
    "text": "it's one of those things that you need to use and find out yeah and I mean this is an example that society designed to",
    "start": "2364910",
    "end": "2371810"
  },
  {
    "text": "go a little overboard with these things right so so let's go overboard let's yeah let's try it myself so I haven't",
    "start": "2371810",
    "end": "2378770"
  },
  {
    "text": "played with this nearly as much as Matt's hair so I may well make some mistakes here okay but let's let's try",
    "start": "2378770",
    "end": "2384470"
  },
  {
    "text": "doing exactly the same kind of thing with a student but we want to be able to pass a match to get the last name",
    "start": "2384470",
    "end": "2390020"
  },
  {
    "text": "instead so I'm going to pass a match and the only bit of the the pattern that's",
    "start": "2390020",
    "end": "2395960"
  },
  {
    "text": "really doing matching conditionally rather than",
    "start": "2395960",
    "end": "2401829"
  },
  {
    "text": "grabbing is the student part so we we're not expecting to have anything in here",
    "start": "2401829",
    "end": "2407020"
  },
  {
    "text": "that in the property part that won't match and so I can save our last or Ln",
    "start": "2407020",
    "end": "2413559"
  },
  {
    "text": "to be consistent with what Mads has already done and then the advisor well I",
    "start": "2413559",
    "end": "2419470"
  },
  {
    "text": "guess there's one thing if I do what are we printing out the advisors",
    "start": "2419470",
    "end": "2425020"
  },
  {
    "text": "last name okay and that make that as our",
    "start": "2425020",
    "end": "2434020"
  },
  {
    "text": "yeah oh hey Ellen for adviser last name yeah yeah now I think this this has",
    "start": "2434020",
    "end": "2442030"
  },
  {
    "text": "actually changed the the meeting slightly oh it was actually is the first name who's got the that was work were",
    "start": "2442030",
    "end": "2448690"
  },
  {
    "text": "young you got young name for the year and so this isn't quite a refactoring",
    "start": "2448690",
    "end": "2454260"
  },
  {
    "text": "because we're avoiding a null reference exception here because yes pattern won't",
    "start": "2454260",
    "end": "2459280"
  },
  {
    "text": "match if the student doesn't have an advisor whereas previously it would have matched and then the interpolated string",
    "start": "2459280",
    "end": "2466119"
  },
  {
    "text": "that the type pattern in all its forms never matches a null right which is actually if I can do it can I do a lot",
    "start": "2466119",
    "end": "2472569"
  },
  {
    "start": "2468000",
    "end": "2747000"
  },
  {
    "text": "of course um yeah so indentations gone a bit wonky which is almost certainly my",
    "start": "2472569",
    "end": "2477790"
  },
  {
    "text": "fault somewhere it doesn't matter you can handle it right don't get dizzy and",
    "start": "2477790",
    "end": "2482950"
  },
  {
    "text": "fall off the cliff here because it's very steep but again you're no regions you know so it's interesting that since",
    "start": "2482950",
    "end": "2494380"
  },
  {
    "text": "the type pattern never matches null mm-hm you can actually use it as a match",
    "start": "2494380",
    "end": "2500829"
  },
  {
    "text": "everything except null pattern well of course you could say you know it's",
    "start": "2500829",
    "end": "2506079"
  },
  {
    "text": "persons you could say I'm person P already before matched everything except in all and it was only because we had a",
    "start": "2506079",
    "end": "2512140"
  },
  {
    "text": "condition on top of it that I didn't match everything but with the new Curly's and with you being able to make",
    "start": "2512140",
    "end": "2518079"
  },
  {
    "text": "everything else optional and alighted you could actually say we only want to say come back last year to somebody who",
    "start": "2518079",
    "end": "2524200"
  },
  {
    "text": "is someone so the curly open curly close curly is a special case but all it means",
    "start": "2524200",
    "end": "2531010"
  },
  {
    "text": "is if you're not null I match right it's",
    "start": "2531010",
    "end": "2536980"
  },
  {
    "text": "saying oh I'm checking you at the type that you're already at so I lighted the",
    "start": "2536980",
    "end": "2542200"
  },
  {
    "text": "type and I'm going to check for all these zero properties that the patterns on the match oh they all did so all",
    "start": "2542200",
    "end": "2549010"
  },
  {
    "text": "right so all now left to do is to see whether your null anon so this presumably will now fail to we'll get a",
    "start": "2549010",
    "end": "2555849"
  },
  {
    "text": "warning somewhere because this isn't exhaustive so that gives me a chance to show that off you see now there's a",
    "start": "2555849",
    "end": "2562660"
  },
  {
    "text": "warning on the switch which says hey as far as we can see this switch expression is next sauced if it's not it you know",
    "start": "2562660",
    "end": "2569859"
  },
  {
    "text": "there are certain values for which it wouldn't match anything and that's a little worse in an expression than in a statement because her statement it's",
    "start": "2569859",
    "end": "2575950"
  },
  {
    "text": "fine to do things you don't do anything for but for an expression you want some kind of result and actually and it's so",
    "start": "2575950",
    "end": "2582579"
  },
  {
    "text": "it's so bad to do this that it only gives you a squiggly as a warning but",
    "start": "2582579",
    "end": "2587619"
  },
  {
    "text": "then the compiler has an internal error and fails to emit valid il and my guess is that that may change before no that's",
    "start": "2587619",
    "end": "2594099"
  },
  {
    "text": "how we punish you right okay so it's it's just it checks actually for the username so no so the it's only a",
    "start": "2594099",
    "end": "2602589"
  },
  {
    "text": "warning because sometimes that's surprising and what people want well so",
    "start": "2602589",
    "end": "2608170"
  },
  {
    "text": "that's gonna stay as a warning I think I had fully expected that that would become an error I think so also I think",
    "start": "2608170",
    "end": "2615130"
  },
  {
    "text": "there might be cases where we can't tell I mean similar to null there might be cases where you know but it doesn't know",
    "start": "2615130",
    "end": "2621339"
  },
  {
    "text": "life like that because actually figuring out figuring out exhaustive Ness it's",
    "start": "2621339",
    "end": "2627430"
  },
  {
    "text": "pretty exhausting so if so my personal plea here this is back to like paying on",
    "start": "2627430",
    "end": "2633160"
  },
  {
    "text": "Monday night so what I've done in loads of cases I have this a lot of the time so in no time I've got a phone interview",
    "start": "2633160",
    "end": "2639730"
  },
  {
    "text": "lure some zone mapping so if you've got a local time that might map to zero one",
    "start": "2639730",
    "end": "2646660"
  },
  {
    "text": "or two instance in time depending on whether you're in a daylight saving",
    "start": "2646660",
    "end": "2653319"
  },
  {
    "text": "transition one way or another or just normal and I have a switch statement that says what's the count 0 1 or 2 and",
    "start": "2653319",
    "end": "2659140"
  },
  {
    "text": "then I've got to have a default and thrown you in valid operation exception right if the compiler just inserts throw",
    "start": "2659140",
    "end": "2664930"
  },
  {
    "text": "new invalid operation exception no unmatch switch pattern or whatever then yeah I can",
    "start": "2664930",
    "end": "2670299"
  },
  {
    "text": "delete more code yes and the idea is that it will throw an exception there also so the runtime semantics are",
    "start": "2670299",
    "end": "2675460"
  },
  {
    "text": "falling through to the end of a switch expression is that an exception gets thrown right",
    "start": "2675460",
    "end": "2681000"
  },
  {
    "text": "it could be invalid operation exception as well just maybe I don't know if we've decided which one yet",
    "start": "2681000",
    "end": "2687220"
  },
  {
    "text": "but makes sense that it's that one so but in order to silence this warning now we could we could go and use the",
    "start": "2687220",
    "end": "2693400"
  },
  {
    "text": "underscore now as a catch-all and say you know sorry you are no one there's no",
    "start": "2693400",
    "end": "2704890"
  },
  {
    "text": "discrimination yeah let's put the comma there to make it happy but just to make",
    "start": "2704890",
    "end": "2711640"
  },
  {
    "text": "clear that it really only is null that didn't fall through yet after I used that curly trick we can we can do it",
    "start": "2711640",
    "end": "2717490"
  },
  {
    "text": "just for null and see that we still don't get the warning back like well compiler really knew when it got here",
    "start": "2717490",
    "end": "2723369"
  },
  {
    "text": "you could see that we dealt with everything except null so it's being pretty it's been pretty smart about the",
    "start": "2723369",
    "end": "2729520"
  },
  {
    "text": "exhaustive mess but it it took me okay after several months to get it right so",
    "start": "2729520",
    "end": "2735539"
  },
  {
    "text": "cool there we are there's one more kind of recursive pattern go for it I was",
    "start": "2735539",
    "end": "2741309"
  },
  {
    "text": "just thinking well yeah you cover Pathan's much quicker than we took over an hour to questions and things so one of the",
    "start": "2741309",
    "end": "2748539"
  },
  {
    "start": "2747000",
    "end": "3044000"
  },
  {
    "text": "things you notice is that all of these types have deconstructors on them which is pretty new thing which lets you plug",
    "start": "2748539",
    "end": "2753910"
  },
  {
    "text": "into the deconstruction yep okay I personally don't recommend that you do that everywhere because if it's if you",
    "start": "2753910",
    "end": "2762369"
  },
  {
    "text": "do it just to get values out of your type then member access is much better",
    "start": "2762369",
    "end": "2769079"
  },
  {
    "text": "but if your type really is sort of tuple like and you often want everything and",
    "start": "2769079",
    "end": "2774869"
  },
  {
    "text": "the ordering will be entirely clear to everyone ordering makes sense the ordering is part of it yeah can you",
    "start": "2774869",
    "end": "2783160"
  },
  {
    "text": "really remember which order those three ents are those is different different type I guess if you've got the go style",
    "start": "2783160",
    "end": "2790420"
  },
  {
    "text": "of you know success or not and the result hmm so they're going to be a different type and if you get them round",
    "start": "2790420",
    "end": "2796299"
  },
  {
    "text": "in the wrong order then your type system will complain it you anyway then that's probably not so bad but the danger and the allure of the",
    "start": "2796299",
    "end": "2803920"
  },
  {
    "text": "positional approach if you will is that you have to remember the order but then you don't have to say the names and so",
    "start": "2803920",
    "end": "2810470"
  },
  {
    "text": "you get to say things shorter shorter when in order that's like a little so",
    "start": "2810470",
    "end": "2818140"
  },
  {
    "text": "why don't we think of that also in terms of patterns that dichotomy here we're",
    "start": "2818260",
    "end": "2825230"
  },
  {
    "text": "doing the property patterns nay in a name based way we say the name of that property apply a pattern to it and so",
    "start": "2825230",
    "end": "2830480"
  },
  {
    "text": "forth but maybe we when we have deconstructors on the types why can't we applied the deconstructors and do the patterns on in order on what comes back",
    "start": "2830480",
    "end": "2837410"
  },
  {
    "text": "from that Deconstructor right and indeed we can so let's do that for the last example up here the professor which not",
    "start": "2837410",
    "end": "2846830"
  },
  {
    "text": "surprisingly we do the the deconstruct pattern using friends and we want the",
    "start": "2846830",
    "end": "2853520"
  },
  {
    "text": "last name and the subject and I seem to remember that professors order was first name last name subject okay",
    "start": "2853520",
    "end": "2859580"
  },
  {
    "text": "so we can ignore the first name with the underscore which you can't see because it's red squiggly then we can get the",
    "start": "2859580",
    "end": "2866710"
  },
  {
    "text": "last name and we can get the subject for instance okay something like this and",
    "start": "2866710",
    "end": "2871790"
  },
  {
    "text": "that is a very concise way of sucking out some values and and using them later",
    "start": "2871790",
    "end": "2877250"
  },
  {
    "text": "which we didn't get to the using them later part well now and it's it makes it",
    "start": "2877250",
    "end": "2887180"
  },
  {
    "text": "yeah nice and terse but also just that little bit harder to maybe yeah just a",
    "start": "2887180",
    "end": "2893750"
  },
  {
    "text": "pair of six and a variable names maybe let me let me just check that I understand it properly and this is",
    "start": "2893750",
    "end": "2899330"
  },
  {
    "text": "genuine this is not me sort of faking it so that one just grabbed the values but",
    "start": "2899330",
    "end": "2906470"
  },
  {
    "text": "presumably we can use this in the same way as the property pattern that sometimes we're grabbing sometimes we're",
    "start": "2906470",
    "end": "2912320"
  },
  {
    "text": "doing things conditional yeah yeah yeah so I can do and can I replace the whole of the property person with just just this without specifying the type so",
    "start": "2912320",
    "end": "2919330"
  },
  {
    "text": "string FN yeah and Kemble yep so you can",
    "start": "2919330",
    "end": "2927320"
  },
  {
    "text": "hang on don't delete right this works without you deleting anything",
    "start": "2927320",
    "end": "2933329"
  },
  {
    "text": "because what you have to think about is that these patterns the way that we",
    "start": "2933329",
    "end": "2938790"
  },
  {
    "text": "decided on the syntax was as much analogy as possible to construction when",
    "start": "2938790",
    "end": "2944940"
  },
  {
    "text": "we're matching against something it's like we're deconstructing it can we are conditionally deconstructing it and",
    "start": "2944940",
    "end": "2950960"
  },
  {
    "text": "therefore if it looks the same as when you're constructing things that's nice when you construct an object you can you",
    "start": "2950960",
    "end": "2958440"
  },
  {
    "text": "say new you have the type which in a later release might become optional you",
    "start": "2958440",
    "end": "2964770"
  },
  {
    "text": "optionally have some constructor parameters and then you optionally have a an object initializer yep",
    "start": "2964770",
    "end": "2973079"
  },
  {
    "text": "and you can have all of those if you want to and the same way in a in a tight",
    "start": "2973079",
    "end": "2979530"
  },
  {
    "text": "pattern you can have both if you really want to you can have both discard there",
    "start": "2979530",
    "end": "2985829"
  },
  {
    "text": "and discard here yes and so this is the",
    "start": "2985829",
    "end": "2991410"
  },
  {
    "text": "this is the grabbing parties you can't just leave them yeah so this is the grabbing part and this is the matching",
    "start": "2991410",
    "end": "2997650"
  },
  {
    "text": "part yeah I don't think I'm gonna be using that no but it's just pointing out the generality oh yeah unless there are",
    "start": "2997650",
    "end": "3004730"
  },
  {
    "text": "bits we're deconstructing gives me some things and there are some bits so with the professor one yeah we have the D",
    "start": "3004730",
    "end": "3010940"
  },
  {
    "text": "constructor that that gives you all three but if we only have the two of them then we could deconstruct to get",
    "start": "3010940",
    "end": "3016940"
  },
  {
    "text": "the last name and things I don't think it's going to be common to use both not at least principle is is a useful one to",
    "start": "3016940",
    "end": "3024490"
  },
  {
    "text": "make things as impossible as possible yeah and that's sort of making the the fact",
    "start": "3024490",
    "end": "3031339"
  },
  {
    "text": "that it's commas here rather than semicolons because that's how you express a sequence of things so this is",
    "start": "3031339",
    "end": "3037819"
  },
  {
    "text": "like a collection initializer for a switch is like here are the patterns within the switch yeah it sort of takes",
    "start": "3037819",
    "end": "3044359"
  },
  {
    "start": "3044000",
    "end": "3151000"
  },
  {
    "text": "a little while but then you think yeah that is entirely natural so there's actually something you can do in let's see you know I can't no I don't",
    "start": "3044359",
    "end": "3053300"
  },
  {
    "text": "have a good example over here yeah actually I do there's something you can do in in ordinary deconstruction for",
    "start": "3053300",
    "end": "3059329"
  },
  {
    "text": "ordinary variable declarations and so on which is that you can put a you can sort",
    "start": "3059329",
    "end": "3066500"
  },
  {
    "text": "of effect to the VAR outside right and you just have variable declarations inside and you can also do that in",
    "start": "3066500",
    "end": "3072650"
  },
  {
    "text": "patterns I just can't remember if we implemented it yet for this prototype but I think we can do this let's see if",
    "start": "3072650",
    "end": "3079220"
  },
  {
    "text": "it works yes but then you can't have then you can have the then show you so",
    "start": "3079220",
    "end": "3085849"
  },
  {
    "text": "it's a variant of the VAR pattern actually you know much if the first name is null when it wouldn't have done",
    "start": "3085849",
    "end": "3093200"
  },
  {
    "text": "before no so it's a little inconsistent maybe we should allow it with the curly braces as well actually and we'll have",
    "start": "3093200",
    "end": "3099560"
  },
  {
    "text": "to discuss that okay right you get to factor the VAR outside of the",
    "start": "3099560",
    "end": "3104570"
  },
  {
    "text": "Deconstructor thing if you don't also have to say a type there but it's a little right special Casey this is this",
    "start": "3104570",
    "end": "3112820"
  },
  {
    "text": "is a pleasure for you I normally when I'm doing a talk and I talk very very quickly and leave at least some people's",
    "start": "3112820",
    "end": "3118670"
  },
  {
    "text": "minds go I don't understand I know you get to see exactly the same thing with meals actually it's not a parent works",
    "start": "3118670",
    "end": "3127690"
  },
  {
    "text": "just in a couple of minutes because I I have something else to show as well we should talk about the other features of",
    "start": "3127690",
    "end": "3133880"
  },
  {
    "text": "c-sharp 8 that might happen you know everything right i I guess you're pretty confident that these nullable and switch",
    "start": "3133880",
    "end": "3140869"
  },
  {
    "text": "expressions and and pattern matching extensions will will happen right and there's one more feature that is also",
    "start": "3140869",
    "end": "3147650"
  },
  {
    "text": "actually in prototype it's in the same prototype which is what's it was that",
    "start": "3147650",
    "end": "3154910"
  },
  {
    "start": "3151000",
    "end": "3254000"
  },
  {
    "text": "what you wanted to be it wasn't okay yeah which is about indexes and ranges",
    "start": "3154910",
    "end": "3161980"
  },
  {
    "text": "so we want to make sure sharp a little more expressive when it comes to talking",
    "start": "3161980",
    "end": "3167300"
  },
  {
    "text": "about both indexing into data structures and and also looking at windows to see",
    "start": "3167300",
    "end": "3175940"
  },
  {
    "text": "sort of sub sections of things so we want to support in the language",
    "start": "3175940",
    "end": "3182000"
  },
  {
    "text": "expressing indices that are also from the end indices and normally integers and also there's expressing ranges one",
    "start": "3182000",
    "end": "3189500"
  },
  {
    "text": "of the motivators for it is the span of T stuff that has already happened in the language so I don't you want to go or",
    "start": "3189500",
    "end": "3195410"
  },
  {
    "text": "should I yeah okay let's be reasonable yeah but yeah just quickly well it's really",
    "start": "3195410",
    "end": "3200870"
  },
  {
    "text": "annoying sometimes when you want to look at the last thing you have to do the arithmetic and make sure you're not off by one and so on so we actually now has",
    "start": "3200870",
    "end": "3209420"
  },
  {
    "text": "syntax for getting the last element so I can just say hat one and people with",
    "start": "3209420",
    "end": "3216080"
  },
  {
    "text": "like regular expressions you typically complain about our choice of hat but it is oh because it would normally mean the",
    "start": "3216080",
    "end": "3222350"
  },
  {
    "text": "start yeah fantastic finally I have a way of remembering because I always get confused which is dollar and witch's hat",
    "start": "3222350",
    "end": "3229360"
  },
  {
    "text": "and if I remember that it's the opposite of what c-sharp does then well people who love but that's how I'm going to",
    "start": "3229360",
    "end": "3235880"
  },
  {
    "text": "room it would be even easier if we had the dollar sign but you know what this isn't set in stone but that is what",
    "start": "3235880",
    "end": "3242210"
  },
  {
    "text": "we went with for the prototype yep so and and the nice thing about it it's not",
    "start": "3242210",
    "end": "3247820"
  },
  {
    "text": "like a part of the index or syntax or something like that it's a completely independent thing so I can fact I wonder",
    "start": "3247820",
    "end": "3253160"
  },
  {
    "text": "if this works I can introduce a local for it and it's even decently named and",
    "start": "3253160",
    "end": "3261980"
  },
  {
    "start": "3254000",
    "end": "3425000"
  },
  {
    "text": "importantly that's that's one off the end of whatever you apply it to it's not sort of relative to right next in this",
    "start": "3261980",
    "end": "3268790"
  },
  {
    "text": "case right so you could use its notion of one from end that's independent of the length of the thing you eventually",
    "start": "3268790",
    "end": "3274910"
  },
  {
    "text": "applied to and then we have a notion of ranges which for for substring it would",
    "start": "3274910",
    "end": "3283490"
  },
  {
    "text": "be really nice if we had an overload that took the actually there's a bug",
    "start": "3283490",
    "end": "3291860"
  },
  {
    "text": "here right it should have you set - - okay this program because that just to show how like how you easily is to be",
    "start": "3291860",
    "end": "3298670"
  },
  {
    "text": "off by one you want to chop off one at either end yeah but since you're saying the length of the result here it should",
    "start": "3298670",
    "end": "3303680"
  },
  {
    "text": "have been two shorter than the length of the original thing but it would have been easier if there was an overload that took an index at the end there but",
    "start": "3303680",
    "end": "3310940"
  },
  {
    "text": "there isn't but there's something even better which is an overload that takes a range so range expressions with dot dot",
    "start": "3310940",
    "end": "3320380"
  },
  {
    "text": "between two indices which can either be an int or had int right and they're",
    "start": "3320380",
    "end": "3325550"
  },
  {
    "text": "independent so we could do range of one two three yes could do range of hat three to hat one",
    "start": "3325550",
    "end": "3332780"
  },
  {
    "text": "yeah is you know the last ignore the last character but the two characters before it and of course it's composable",
    "start": "3332780",
    "end": "3338270"
  },
  {
    "text": "so I can reuse that index that I have up there and it's and it still becomes from end and that's a shoe there's a",
    "start": "3338270",
    "end": "3344450"
  },
  {
    "text": "shorthand for leaving off on that end and that means hat zero mm-hmm that means the end all the way to the end and",
    "start": "3344450",
    "end": "3351950"
  },
  {
    "text": "if you leave off in the beginning that means from that means zero right so and",
    "start": "3351950",
    "end": "3357680"
  },
  {
    "text": "of course combining ranges and indexes now really becomes nice right there two",
    "start": "3357680",
    "end": "3363230"
  },
  {
    "text": "independent features but if you combine them you get something that's very nice and looks like what other languages have",
    "start": "3363230",
    "end": "3368540"
  },
  {
    "text": "so you can imagine and we could kind of sort of hacked it up if you put the right source code behind which I think",
    "start": "3368540",
    "end": "3374480"
  },
  {
    "text": "you did that in the prototype you can try it we have an index or on text that takes a range now you can you can",
    "start": "3374480",
    "end": "3383570"
  },
  {
    "text": "substring just by applying an index or in a range expression so like this was I",
    "start": "3383570",
    "end": "3391550"
  },
  {
    "text": "think was the original exam right okay and that would work not just for Strings but then for any span and anything that",
    "start": "3391550",
    "end": "3399500"
  },
  {
    "text": "influenced it appropriately and probably raised we would return spans when your substrate or when you when you slice",
    "start": "3399500",
    "end": "3406220"
  },
  {
    "text": "those this is essentially for slicing right cool anyway I want to do something slightly so we've been talking about the",
    "start": "3406220",
    "end": "3412880"
  },
  {
    "text": "future of c-sharp to a language two or two minutes yeah the future of what's in",
    "start": "3412880",
    "end": "3419180"
  },
  {
    "text": "the language I want to point out a couple of things about the future of where you can use the language so one of",
    "start": "3419180",
    "end": "3426170"
  },
  {
    "start": "3425000",
    "end": "3600000"
  },
  {
    "text": "these mats has seen and one he hasn't so as you know I write the note of time",
    "start": "3426170",
    "end": "3431870"
  },
  {
    "text": "library and it's been a source of frustration to me that the notice time website is very static it's very you",
    "start": "3431870",
    "end": "3437660"
  },
  {
    "text": "know here's the stuff so I've been working with the tri-dot net team to",
    "start": "3437660",
    "end": "3442750"
  },
  {
    "text": "embed a live coding environment in the know design website and today it's",
    "start": "3442750",
    "end": "3449060"
  },
  {
    "text": "somewhat works okay so we have some things here I can say right get the",
    "start": "3449060",
    "end": "3454160"
  },
  {
    "text": "current zone date/time and we have intellisense assuming that the network connections working yeah so I can find",
    "start": "3454160",
    "end": "3460640"
  },
  {
    "text": "out what what properties are in my zone date and I can run the code and it's showing",
    "start": "3460640",
    "end": "3466739"
  },
  {
    "text": "now you'll notice showing the 10th of June because this is cached any time",
    "start": "3466739",
    "end": "3472559"
  },
  {
    "text": "that you run stuff with trade net if it notices you've got the exact same source code as a previous execution it'll",
    "start": "3472559",
    "end": "3478439"
  },
  {
    "text": "return you that result now earlier on",
    "start": "3478439",
    "end": "3483229"
  },
  {
    "text": "this wouldn't work and it's it's possible that this has been fixed behind",
    "start": "3483919",
    "end": "3490109"
  },
  {
    "text": "the scenes with my friends in the trade out net team it's also possible that it hasn't and Wow I didn't expect it to",
    "start": "3490109",
    "end": "3496499"
  },
  {
    "text": "completely all right there we go right so I think this has given a 503 on the back end it will be fixed oh no well",
    "start": "3496499",
    "end": "3502319"
  },
  {
    "text": "it's worked Thank You Diego or whoever it was that fixed it for me so this was running live code and the idea is I have",
    "start": "3502319",
    "end": "3509579"
  },
  {
    "text": "some recipes here you know you can find out how old I am just copy that to the editor edit it there the actual the web",
    "start": "3509579",
    "end": "3516989"
  },
  {
    "text": "design part is nothing to do with the tri-dot net team which is why it's awful because this is my web design skills are",
    "start": "3516989",
    "end": "3522809"
  },
  {
    "text": "non-existent but again you know you can run the code and it will say that it's",
    "start": "3522809",
    "end": "3528479"
  },
  {
    "text": "nearly my 42nd birthday so that's is running c-sharp in a cloud container",
    "start": "3528479",
    "end": "3533669"
  },
  {
    "text": "somewhere but you get to edit the c-sharp code live in the browser and the",
    "start": "3533669",
    "end": "3539729"
  },
  {
    "text": "other what I think is very cool way of running code bom-bom-bom and this is",
    "start": "3539729",
    "end": "3547919"
  },
  {
    "text": "taking more conference Wi-Fi than I would like and is running c-sharp in the browser itself so for example suppose we",
    "start": "3547919",
    "end": "3555599"
  },
  {
    "text": "want to find out more information about the Copenhagen timezone because though",
    "start": "3555599",
    "end": "3562079"
  },
  {
    "text": "yeah we're in the ha I shouldn't travel so much so in Oslo we can and I'm very",
    "start": "3562079",
    "end": "3568259"
  },
  {
    "text": "new to this this is all something called blazer and this was hacked together over the last few days or so and we've got",
    "start": "3568259",
    "end": "3575849"
  },
  {
    "text": "all this stuff coming this is not on a server I could disconnect from the Wi-Fi and",
    "start": "3575849",
    "end": "3580859"
  },
  {
    "text": "still do stuff I can do this on my phone this is running c-sharp via webassembly via mono that is in JavaScript slash",
    "start": "3580859",
    "end": "3589679"
  },
  {
    "text": "webassembly interpreting the IL from the Noda time assembly so when you think",
    "start": "3589679",
    "end": "3594719"
  },
  {
    "text": "about the future of languages don't think in terms of the future features within the language but where are you",
    "start": "3594719",
    "end": "3599850"
  },
  {
    "text": "going to be able to run it next and I'm sure basically any future language will",
    "start": "3599850",
    "end": "3605220"
  },
  {
    "text": "be designed so it can run pretty much anywhere it's the old Microsoft logo all",
    "start": "3605220",
    "end": "3610470"
  },
  {
    "text": "right where do you want to run today right yeah and so I think that's pretty",
    "start": "3610470",
    "end": "3615720"
  },
  {
    "text": "awesome and I wanted to this is the very first time of showing trade net on the",
    "start": "3615720",
    "end": "3621570"
  },
  {
    "text": "notice home website which is something I've been excited about for a few months now so that's all we have time for we'll",
    "start": "3621570",
    "end": "3629340"
  },
  {
    "text": "probably be around the front packing up and things if you want to come and ask us questions thank you very much thank",
    "start": "3629340",
    "end": "3635880"
  },
  {
    "text": "you and what I should have said",
    "start": "3635880",
    "end": "3644420"
  }
]