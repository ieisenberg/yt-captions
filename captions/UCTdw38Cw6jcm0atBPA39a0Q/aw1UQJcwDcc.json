[
  {
    "start": "0",
    "end": "104000"
  },
  {
    "text": "all right I think we're good to go thank you so much for coming this is the",
    "start": "9150",
    "end": "15460"
  },
  {
    "text": "last session of the day I hope you've all had a really great day of the best conference in the world I think we",
    "start": "15460",
    "end": "21970"
  },
  {
    "text": "should give the the people organizing this conference a really big applause before we get started",
    "start": "21970",
    "end": "29340"
  },
  {
    "text": "perfect I'm not coming here I've travelled all the way from Gothenburg in",
    "start": "29340",
    "end": "35199"
  },
  {
    "text": "Sweden people ask me how long the flight was and if I'm jet-lagged I just love the people outside of Scandinavia have",
    "start": "35199",
    "end": "41320"
  },
  {
    "text": "no idea how far it is between Sweden in Norway another funny thing is that after",
    "start": "41320",
    "end": "46660"
  },
  {
    "text": "this talk because I'm from Scandinavia I will probably be sunburned by these lights so I'm going to turn up like a",
    "start": "46660",
    "end": "53350"
  },
  {
    "text": "shrimp tomorrow but that's fine so we're gonna talk about c-sharp eight and Beyond after this talk will all be",
    "start": "53350",
    "end": "59500"
  },
  {
    "text": "excellent f-sharp developers because we all know that c-sharp is taking all the",
    "start": "59500",
    "end": "64989"
  },
  {
    "text": "best features from the best programming languages and if we ask functional programmers we all know that f-sharp is",
    "start": "64989",
    "end": "71380"
  },
  {
    "text": "the best programming language in the world and c-sharp is taking a lot of influences from these different languages such as f-sharp Java Scala",
    "start": "71380",
    "end": "78660"
  },
  {
    "text": "Cullinan Swift what all joking aside we're gonna go through the features that have been coming to C sharp just quickly",
    "start": "78660",
    "end": "85810"
  },
  {
    "text": "look at two features from c-sharp 7 which will set the kind of the scene of the features that are coming later on in",
    "start": "85810",
    "end": "91810"
  },
  {
    "text": "c-sharp as well as the ones that are now introduced in c-sharp 8 as anyone here tried c-sharp 8 in a live product",
    "start": "91810",
    "end": "99119"
  },
  {
    "text": "excellent so hopefully all of these cool features will be the new teeth before we",
    "start": "99119",
    "end": "105009"
  },
  {
    "start": "104000",
    "end": "122000"
  },
  {
    "text": "get into that my name is Phillip Ekberg you can ping me on Twitter if you have any questions I've done a bunch of",
    "start": "105009",
    "end": "110259"
  },
  {
    "text": "online things like Pluralsight courses I wrote a book and you know you can find all that online if you want you ping me",
    "start": "110259",
    "end": "115720"
  },
  {
    "text": "on Twitter since it's really hard to see you just throw something in my face if you have any questions perfect so over",
    "start": "115720",
    "end": "122920"
  },
  {
    "text": "the years c-sharp has gotten a whole lot of interesting features added to it it all started almost two decades ago I",
    "start": "122920",
    "end": "129550"
  },
  {
    "text": "think the first version of c-sharp was announced 19 years ago that's pretty",
    "start": "129550",
    "end": "135790"
  },
  {
    "text": "long ago right so for a language that has been living for 19 years and are still getting a lot of features I'm",
    "start": "135790",
    "end": "142540"
  },
  {
    "text": "conference talking about a language getting updates after such a long time and of course that applies to other",
    "start": "142540",
    "end": "147579"
  },
  {
    "text": "programming languages as well but looking at the amount of features that we've been getting in c-sharp over the",
    "start": "147579",
    "end": "152650"
  },
  {
    "text": "years it's really amazing you know c-sharp 1 was released as a",
    "start": "152650",
    "end": "158500"
  },
  {
    "text": "competitor to Java and C++ as an alternative to developers that wanted to build something really excellent on the",
    "start": "158500",
    "end": "165099"
  },
  {
    "text": "Microsoft platform and then in the next version of c-sharp regard sings like generics which drastically changed the",
    "start": "165099",
    "end": "170799"
  },
  {
    "text": "way that we build software it changes the way that we build our applications in the way that we look at engineering",
    "start": "170799",
    "end": "176950"
  },
  {
    "text": "our solutions and then of course we got things like a sink and a weight added later on in c-sharp that's one of the",
    "start": "176950",
    "end": "182950"
  },
  {
    "text": "biggest features that word was introduced on the previous versions of the compilers now async in a way kind of",
    "start": "182950",
    "end": "189159"
  },
  {
    "text": "also changed the way that we look at building our applications especially when we're doing interact with web",
    "start": "189159",
    "end": "194379"
  },
  {
    "text": "applications or web api's we're doing database calls so we're loading things from disk as everyone worked with a sink",
    "start": "194379",
    "end": "201069"
  },
  {
    "text": "and a weight almost everyone so that's great there's additions in c-sharp 8 that will make your life even better",
    "start": "201069",
    "end": "207370"
  },
  {
    "text": "when working with async in a way so we'll get to that in a little moment and of course c-sharp is also taking",
    "start": "207370",
    "end": "213489"
  },
  {
    "text": "influences from other things like sequel and we have influences from C++ and Java",
    "start": "213489",
    "end": "219129"
  },
  {
    "text": "and a whole other bunch of different programming languages so for developers that want to build software with all the",
    "start": "219129",
    "end": "225340"
  },
  {
    "text": "the best practices c-sharp is one of those places where you can pick and choose the practices that you want to",
    "start": "225340",
    "end": "230560"
  },
  {
    "text": "work with and then just apply that in your software now what's interesting is that I mentioned that C in a sink and a",
    "start": "230560",
    "end": "237519"
  },
  {
    "text": "weight was introduced in c-sharp as the final thing final big thing on the old compilers now what they've done is that",
    "start": "237519",
    "end": "242949"
  },
  {
    "text": "they rewrote the compilers it's all open source so you can go ahead and check the language features statuses on github and",
    "start": "242949",
    "end": "249340"
  },
  {
    "text": "you can also participate in building these features and I've made a contribution to this I fixed a broken",
    "start": "249340",
    "end": "256209"
  },
  {
    "text": "link in github so I made this huge contribution to the compilers feel really proud that's why I have this",
    "start": "256209",
    "end": "261430"
  },
  {
    "text": "slide here joking is slide this here lists all the features that they want to get into to the language not only",
    "start": "261430",
    "end": "267490"
  },
  {
    "text": "c-sharp 8 but also C shop 9 and X and whatever you want to call the next person so what you can do is they can go",
    "start": "267490",
    "end": "274240"
  },
  {
    "text": "on here and you can talk to the line which design team you can contribute in terms of adding issues to what's in the",
    "start": "274240",
    "end": "280720"
  },
  {
    "text": "compiler what doesn't work for you but you can also suggest changes to features that you want to see in the language and",
    "start": "280720",
    "end": "286450"
  },
  {
    "text": "that's something that's changed the way that they build the compilers now a lot",
    "start": "286450",
    "end": "292480"
  },
  {
    "start": "292000",
    "end": "354000"
  },
  {
    "text": "of these features that I'm going to talk about so this here is the the c-sharp a candidate list this lives on another",
    "start": "292480",
    "end": "297670"
  },
  {
    "text": "place and github because why would you choose to put them on the same place so",
    "start": "297670",
    "end": "302830"
  },
  {
    "text": "this here lists all the champions they they call it champions it's the pretty much as the language features that they want to add it's things like improving",
    "start": "302830",
    "end": "310660"
  },
  {
    "text": "pattern matching and not adding a whole bunch of other things in c-sharp so again you can go in here and you can",
    "start": "310660",
    "end": "315820"
  },
  {
    "text": "have discussions with language team or other developers and some of these issues have probably 300 comments so I",
    "start": "315820",
    "end": "322450"
  },
  {
    "text": "tend to avoid those because it just gets too technical so add some of the features that I'm",
    "start": "322450",
    "end": "328210"
  },
  {
    "text": "gonna show you I can show you live demos in Visual Studio 2019 preview but some",
    "start": "328210",
    "end": "333340"
  },
  {
    "text": "of them unfortunately I didn't have the time to build the compilers myself and introduce all of these features and",
    "start": "333340",
    "end": "338530"
  },
  {
    "text": "they're not all done and speaking of done when do we think c-sharp 8 is going to come out we've",
    "start": "338530",
    "end": "344470"
  },
  {
    "text": "probably heard that it's gonna be a part of Visual Studio 2019 right but Visual Studio 2019 was released two months ago",
    "start": "344470",
    "end": "350800"
  },
  {
    "text": "and c-sharp 8 wasn't in there so c-sharp 8 is going to be released according to github tracking off the",
    "start": "350800",
    "end": "357940"
  },
  {
    "start": "354000",
    "end": "383000"
  },
  {
    "text": "timing somewhere around 2080 I'm pretty sure I won't be dealing c-sharp by then",
    "start": "357940",
    "end": "363100"
  },
  {
    "text": "if I am doing C sharp by 2080s it's impressive but this is just based all",
    "start": "363100",
    "end": "370450"
  },
  {
    "text": "the things they want to get in there right so get up is doing some magic to calculate based on the cadence of their",
    "start": "370450",
    "end": "375760"
  },
  {
    "text": "work and the issues that are there they're closing this is the the right take title the features of language",
    "start": "375760",
    "end": "381540"
  },
  {
    "text": "interesting right but it is going to be a part of Visual Studio 2019 and what's",
    "start": "381540",
    "end": "387220"
  },
  {
    "start": "383000",
    "end": "421000"
  },
  {
    "text": "interesting with c-sharp 8 it's the first time they're introducing language features that require you to you don't",
    "start": "387220",
    "end": "395740"
  },
  {
    "text": "be on a dotnet framework so everything that we're gonna look at here is not going to be be working in dotnet",
    "start": "395740",
    "end": "401290"
  },
  {
    "text": "framework that's because they need to be undocked in core 3.0 to be able to leverage c-sharp 8 and that's a bummer",
    "start": "401290",
    "end": "407020"
  },
  {
    "text": "but it is see they rolled forward because I've been framework it's done and everyone should just jump onto to",
    "start": "407020",
    "end": "413409"
  },
  {
    "text": "the next cool thing that's how we all do it in software right we rewrite out things just to to make our lives easier",
    "start": "413409",
    "end": "420339"
  },
  {
    "text": "so with that being said let's let's stop looking at slides for a moment I have a bunch of other features that I can't",
    "start": "420339",
    "end": "425649"
  },
  {
    "start": "421000",
    "end": "432000"
  },
  {
    "text": "show you but I've got some slides in code we all know that we love to be in PowerPoint so we'll we'll get back to",
    "start": "425649",
    "end": "431559"
  },
  {
    "text": "that later on but right now I want to show you a few things I'm not updating visuals to do now that would be a terrible idea the",
    "start": "431559",
    "end": "439779"
  },
  {
    "start": "432000",
    "end": "462000"
  },
  {
    "text": "last time I gave a talk on c-sharp I updated a visual studio the day before guess how that talk went it didn't go",
    "start": "439779",
    "end": "448029"
  },
  {
    "text": "very well but the thing is the version I was on I had updated a few weeks earlier and had forgotten to run through my",
    "start": "448029",
    "end": "453399"
  },
  {
    "text": "demos and every time I did a curly bracket the visual studio just crashed it deadlocked",
    "start": "453399",
    "end": "458800"
  },
  {
    "text": "so that was worse I couldn't even do anything so just to be on the safe side",
    "start": "458800",
    "end": "464379"
  },
  {
    "start": "462000",
    "end": "710000"
  },
  {
    "text": "I'm not going to be compiling anything I could though but so the first thing I want to show you is sexually not a",
    "start": "464379",
    "end": "469869"
  },
  {
    "text": "feature introduced in c-sharp aid it's something that was introduced in c-sharp 7 and if you worked in other programming",
    "start": "469869",
    "end": "475240"
  },
  {
    "text": "languages before tuples has been something that you probably occur been working with cinnamon used toppled in",
    "start": "475240",
    "end": "482289"
  },
  {
    "text": "c-sharp excellent so it's a great way for us to for instance construct a",
    "start": "482289",
    "end": "487539"
  },
  {
    "text": "little bit of a type that allows us to in this case map these two values into a",
    "start": "487539",
    "end": "492969"
  },
  {
    "text": "new type that we have here which is a tuple and now we can define a type of like this here we've always been able to",
    "start": "492969",
    "end": "499029"
  },
  {
    "text": "stubbles right in C sharp and dotnet but this is a nicer way of doing it so what's - what we're doing here is",
    "start": "499029",
    "end": "504189"
  },
  {
    "text": "I'll be constructing this tuple it has two fields on x and y field and then we're just mapping hundred into X 200",
    "start": "504189",
    "end": "510399"
  },
  {
    "text": "into Y that's super simple so now if I want to use this I can save our point",
    "start": "510399",
    "end": "517380"
  },
  {
    "text": "let me just change my language it's equal to get point and now what happens",
    "start": "517380",
    "end": "522758"
  },
  {
    "text": "is that I can say point dot X and this here now allows me to not zoom in it",
    "start": "522759",
    "end": "529180"
  },
  {
    "text": "allows me to use X on my topple here so we've got this name thing here and it's",
    "start": "529180",
    "end": "535120"
  },
  {
    "text": "just instead of having to in this case we're just looking at it like this it just looks like a way for us to just introduce a type without creating a",
    "start": "535120",
    "end": "541300"
  },
  {
    "text": "class what struct it's a little bit more than that so this is preparing for something really cool",
    "start": "541300",
    "end": "547140"
  },
  {
    "text": "that they were introducing in c-sharp aid so the things they added to c-sharp 7 is just in preparation of making",
    "start": "547140",
    "end": "553230"
  },
  {
    "text": "things even better for c-sharp 8 and that's kind of a common theme I think across the different versions of c-sharp",
    "start": "553230",
    "end": "559950"
  },
  {
    "text": "and they proved that when they rewrote everything using rosslyn in the new compilers they're doing that as an open",
    "start": "559950",
    "end": "566519"
  },
  {
    "text": "source project people can contribute as break but it also means that they can have shorter iterations off when they're",
    "start": "566519",
    "end": "572550"
  },
  {
    "text": "releasing the compilers so it's pretty much just a nougat package so you could pull in the compiler into your projects",
    "start": "572550",
    "end": "578880"
  },
  {
    "text": "and make use of all the new language features in your projects and that's pretty much what happens with a knock",
    "start": "578880",
    "end": "584130"
  },
  {
    "text": "date to Visual Studio you might be getting the new compiler of Rosslyn which introduces new features just keep",
    "start": "584130",
    "end": "590310"
  },
  {
    "text": "that in mind so now with tuples we have different ways of working with that of course I can take my Topol here and say",
    "start": "590310",
    "end": "596070"
  },
  {
    "text": "I want to deconstruct this deconstruction is another thing that they also had to introduce with tuples",
    "start": "596070",
    "end": "601820"
  },
  {
    "text": "so it's taking this the the table we're getting out of get point here it's",
    "start": "601820",
    "end": "607079"
  },
  {
    "text": "deconstructing that into two new fields on a new tuple called point now what's",
    "start": "607079",
    "end": "614220"
  },
  {
    "text": "interesting here is that what's happening is that it's going to take 100 put that into X it's going to then take",
    "start": "614220",
    "end": "620550"
  },
  {
    "text": "that out of this result and put the x value into my new X field that I have here what happens if we change this to Y",
    "start": "620550",
    "end": "630500"
  },
  {
    "text": "we have an unexpected bug right well in this case it's very expected but the problem here is that it's doing this",
    "start": "630500",
    "end": "636149"
  },
  {
    "text": "based on the positions right so it's doing positional matching so it's taking the 100 putting that into X and then",
    "start": "636149",
    "end": "642990"
  },
  {
    "text": "putting this value the first value in the tupple into the first one that we're deconstructing into so the x value is",
    "start": "642990",
    "end": "649019"
  },
  {
    "text": "now going to be the Y value so don't do that so the way that we can can make this little bit better is of course to",
    "start": "649019",
    "end": "654930"
  },
  {
    "text": "say well this is just a var var for point and then we get the same way of",
    "start": "654930",
    "end": "660269"
  },
  {
    "text": "working with it but we don't have to introduce this really stupid bugs we have another way of deconstructing this",
    "start": "660269",
    "end": "666420"
  },
  {
    "text": "into two local variables so I can take the topple and deconstruct that into technical new local variables as well as",
    "start": "666420",
    "end": "675000"
  },
  {
    "text": "just making a little bit simple and if you went to my talk last year I talked a lot about the the changes from",
    "start": "675000",
    "end": "681959"
  },
  {
    "text": "C sharp six to two seven point three and one of the common theme that you see",
    "start": "681959",
    "end": "687180"
  },
  {
    "text": "there is that they're trying to cut down the amount of characters you write and the same goes for the changes that are coming in c-sharp aid less code more",
    "start": "687180",
    "end": "694470"
  },
  {
    "text": "impact on the software that we build I'm not saying that this has a lot of impact but it's certainly a few less characters",
    "start": "694470",
    "end": "701490"
  },
  {
    "text": "right so instead of having say int X one named Y two Y one we have this variable",
    "start": "701490",
    "end": "706889"
  },
  {
    "text": "here all right so that's tuples out of the way what they also introduced is something called pattern matching has",
    "start": "706889",
    "end": "714059"
  },
  {
    "start": "710000",
    "end": "871000"
  },
  {
    "text": "anyone used pattern matching oh it's about a third so that's great pattern matching is a way for us to look",
    "start": "714059",
    "end": "721319"
  },
  {
    "text": "at a given type and then based on its contract or its traits we can cast that",
    "start": "721319",
    "end": "727350"
  },
  {
    "text": "into the correct type and use that as a local variable that sounds very complex but if you look at our shape here so in",
    "start": "727350",
    "end": "733740"
  },
  {
    "text": "my application my shape can be either a triangle or it could be a rectangle now",
    "start": "733740",
    "end": "739529"
  },
  {
    "text": "if I want to make sure that this is a triangle what I would have to do is to say well this is prior to c-sharp seven",
    "start": "739529",
    "end": "746220"
  },
  {
    "text": "right so if shape dot get type is equal to type off triangle right so this this",
    "start": "746220",
    "end": "755069"
  },
  {
    "text": "is pretty nasty for a triangle is equal to shape as triangle so we've all",
    "start": "755069",
    "end": "762720"
  },
  {
    "text": "probably written code like this right but it's a little bit verbose so instead of having to write this everywhere we",
    "start": "762720",
    "end": "768779"
  },
  {
    "text": "can introduce pattern matching to make it easier for us to look at this type and do even more things so if we just",
    "start": "768779",
    "end": "774930"
  },
  {
    "text": "get rid of that we kind of have the same approach to this shape here but instead we're using this switch so we're using a",
    "start": "774930",
    "end": "780929"
  },
  {
    "text": "concept that's already available in c-sharp so we have this switch here and I'm saying based on the shape that we",
    "start": "780929",
    "end": "786569"
  },
  {
    "text": "have here if it's a triangle the case is a triangle I'm gonna cast that to my local variable of T and then inside this",
    "start": "786569",
    "end": "793649"
  },
  {
    "text": "context I can now use everything that I have available on my triangle so we have three different sides and we might have",
    "start": "793649",
    "end": "798990"
  },
  {
    "text": "a a position or something on the screen right and if it's a rectangle of course I can use all the properties that I have",
    "start": "798990",
    "end": "805199"
  },
  {
    "text": "available on my rectangle and of course they have to inherit from the same base type as well",
    "start": "805199",
    "end": "811370"
  },
  {
    "text": "so that's pretty nifty but only using the switch for this it looks pretty much",
    "start": "811370",
    "end": "817260"
  },
  {
    "text": "just ask for bows maybe we don't have the cast we're checking the type and see",
    "start": "817260",
    "end": "822420"
  },
  {
    "text": "you in a little bit of magic but where it becomes really powerful is where we can say things like I want to capture",
    "start": "822420",
    "end": "827640"
  },
  {
    "text": "this triangle when the the a side is equal to the B side and then we're",
    "start": "827640",
    "end": "834900"
  },
  {
    "text": "inside this block here and then of course I can catch the triangle down here that wasn't matched to that particular",
    "start": "834900",
    "end": "840480"
  },
  {
    "text": "pattern doing this with the previous approach would have been a lot more",
    "start": "840480",
    "end": "846660"
  },
  {
    "text": "verbose we'd have to check the type and then we'd have to have an other if statement and it just gets a little bit",
    "start": "846660",
    "end": "851820"
  },
  {
    "text": "nasty right so this was introduced in c-sharp 7-7 as well so pattern matching",
    "start": "851820",
    "end": "856950"
  },
  {
    "text": "in c-sharp 7 is a very lightweight version of what we really want pattern",
    "start": "856950",
    "end": "862590"
  },
  {
    "text": "matching to be pattern matching can be a whole lot more than just what we see here and this is where pattern matching",
    "start": "862590",
    "end": "869880"
  },
  {
    "text": "in tuples are gonna play together so if you're going to look at c-sharp 8 we're gonna see how this has changed they've",
    "start": "869880",
    "end": "877140"
  },
  {
    "start": "871000",
    "end": "1075000"
  },
  {
    "text": "introduced something called recursive patterns as well as something they call the switch expressions so have a few",
    "start": "877140",
    "end": "883800"
  },
  {
    "text": "examples that I'm going to show you here but the first one that I'm gonna show you is my method here that's pretty much",
    "start": "883800",
    "end": "888810"
  },
  {
    "text": "using the same code that we looked at in c-sharp 7 I'm gonna refactor this into what could be potentially the code that",
    "start": "888810",
    "end": "894510"
  },
  {
    "text": "we have in c-sharp 8 so I have this result variable here that I want to populate with some description of my",
    "start": "894510",
    "end": "901170"
  },
  {
    "text": " what my shape is and I'm gonna return that for my method called refactor me now what I can do here is",
    "start": "901170",
    "end": "906900"
  },
  {
    "text": "that I can introduce something called a switch expression a switch expression is a way for me to use this switch as well",
    "start": "906900",
    "end": "912420"
  },
  {
    "text": "as an expression pretty much like an expression body member and use those two concepts together to construct my",
    "start": "912420",
    "end": "918810"
  },
  {
    "text": "pattern matching so that would be something looking like this so we'd say shape switch and then based off that we",
    "start": "918810",
    "end": "928350"
  },
  {
    "text": "can now have a bunch of expressions in here to match our particular shape so we",
    "start": "928350",
    "end": "935490"
  },
  {
    "text": "could say when the triangle of T we can do this",
    "start": "935490",
    "end": "941860"
  },
  {
    "text": "I can spell triangle so now what happened is that I have my triangle here so we have this switch expression I'm",
    "start": "941860",
    "end": "948310"
  },
  {
    "text": "using an expression to match this and then this here is returning that string",
    "start": "948310",
    "end": "954790"
  },
  {
    "text": "so we could simply copy the string that we have down here at the bottom from the old version of our code and then we do",
    "start": "954790",
    "end": "961540"
  },
  {
    "text": "the same thing for our rectangle so we",
    "start": "961540",
    "end": "969850"
  },
  {
    "text": "don't have a whole lot of lesser characters in here but it's starting to",
    "start": "969850",
    "end": "975070"
  },
  {
    "text": "look pretty good right so we got a whole we got rid of the case we got a rid of the break and it's looking a little bit",
    "start": "975070",
    "end": "981640"
  },
  {
    "text": "more compact I cannot like this approach but where it becomes really interesting",
    "start": "981640",
    "end": "987610"
  },
  {
    "text": "is when we combine this with the power of tuples so how would you compare",
    "start": "987610",
    "end": "993339"
  },
  {
    "text": "combine this with the power of tuples you might ask well if we take a look at another example I'm gonna minimize that",
    "start": "993339",
    "end": "1001320"
  },
  {
    "text": "for a second and we have another example here it's pretty much the same thing right based on my shape I'm running my switch",
    "start": "1001320",
    "end": "1007529"
  },
  {
    "text": "expression and say when the triangle is said T as well as the sides are not equal or when they are equal we'll",
    "start": "1007529",
    "end": "1014670"
  },
  {
    "text": "probably make more sense I'm gonna run this code block here so that's what we",
    "start": "1014670",
    "end": "1019709"
  },
  {
    "text": "just saw right but with the addition of using this same thing that you've probably seen when using exception",
    "start": "1019709",
    "end": "1025350"
  },
  {
    "text": "filters so if you've done exception filters so you use this same contract of using the when keyword so now we can",
    "start": "1025350",
    "end": "1032640"
  },
  {
    "text": "combine this with it something called the topple pattern which is a way for us to use in a recursive pattern so the",
    "start": "1032640",
    "end": "1038339"
  },
  {
    "text": "first thing that we're looking at is is this a triangle that's the first pattern that we're matching against so we have",
    "start": "1038339",
    "end": "1045110"
  },
  {
    "text": "checking here here if it's a triangle but then we have a topple construction",
    "start": "1045110",
    "end": "1050160"
  },
  {
    "text": "here which might look a little bit weird but this here is using a concept known as deconstruction if we have a look at",
    "start": "1050160",
    "end": "1058290"
  },
  {
    "text": "our triangle there's a method here called deconstruct which allows us to",
    "start": "1058290",
    "end": "1063870"
  },
  {
    "text": "get an a b c and a point out of this triangle so when we're deconstructing",
    "start": "1063870",
    "end": "1069990"
  },
  {
    "text": "this we can take our object and deconstruct that into a tuple which means that we can now combine our",
    "start": "1069990",
    "end": "1075840"
  },
  {
    "start": "1075000",
    "end": "1137000"
  },
  {
    "text": "turn of a triangle together with something that we call a topple pattern so what does this topple pattern really",
    "start": "1075840",
    "end": "1081929"
  },
  {
    "text": "mean well what happens here is that we're telling this here that we are required to have the variable of a very",
    "start": "1081929",
    "end": "1089669"
  },
  {
    "text": "role of b c as well as we need the point but we don't care if we have the X",
    "start": "1089669",
    "end": "1095039"
  },
  {
    "text": "defined what probably makes more sense is that we can say I don't really care",
    "start": "1095039",
    "end": "1101190"
  },
  {
    "text": "if we have a point or not so the underscore here tells us that I don't care if this triangle has a point",
    "start": "1101190",
    "end": "1107460"
  },
  {
    "text": "initialized I don't care if it is initialized I don't care about any of the values so using this on different",
    "start": "1107460",
    "end": "1114120"
  },
  {
    "text": "types of objects depending on the contract of your object you can check on multiple different things when it's",
    "start": "1114120",
    "end": "1119399"
  },
  {
    "text": "deconstructed it's not always though that you have the ability of adding a Deconstructor to the objects because",
    "start": "1119399",
    "end": "1125640"
  },
  {
    "text": "sometimes you don't own those domain object or you don't own the package that you're working with but this here gives",
    "start": "1125640",
    "end": "1130890"
  },
  {
    "text": "you a little bit of a power when using the tupple if we do have this",
    "start": "1130890",
    "end": "1136039"
  },
  {
    "text": "deconstruction though we can use another pattern called positional pattern which is also one of these recursive patterns",
    "start": "1136039",
    "end": "1142559"
  },
  {
    "start": "1137000",
    "end": "1180000"
  },
  {
    "text": "so what I'm doing here is I'm deconstructing my rectangle and I'm I'm telling this pattern here to match on a",
    "start": "1142559",
    "end": "1148559"
  },
  {
    "text": "triangle where the first value that I get out of my deconstruction is going to be 0 the second value is going to be 0",
    "start": "1148559",
    "end": "1154830"
  },
  {
    "text": "and I don't really care about the last one and then I'm capturing this rectangle here it's a local variable of",
    "start": "1154830",
    "end": "1160529"
  },
  {
    "text": "our and I can use that within my expression if I still want to now again if we have a look at this here it's",
    "start": "1160529",
    "end": "1167010"
  },
  {
    "text": "deconstructing this into the width hiding in our point here so basically what we're saying is that I want a CRO",
    "start": "1167010",
    "end": "1173669"
  },
  {
    "text": "height and sira width rectangle where I don't care if you've initialized the point or not again that requires you to",
    "start": "1173669",
    "end": "1181500"
  },
  {
    "start": "1180000",
    "end": "1248000"
  },
  {
    "text": "have this deconstruction or your object but what we'll see later on is that more and more",
    "start": "1181500",
    "end": "1187169"
  },
  {
    "text": "types are going to get this out of the box especially when we talk about things like record types but let's not get",
    "start": "1187169",
    "end": "1193649"
  },
  {
    "text": "ahead of ourselves the next one is something that they call property pattern so in this case here we don't",
    "start": "1193649",
    "end": "1199830"
  },
  {
    "text": "have access to for instance introducing one of these D constructors so instead we say that I want to make sure that",
    "start": "1199830",
    "end": "1205559"
  },
  {
    "text": "this property has the value of 100 so we can now say that we first matched",
    "start": "1205559",
    "end": "1210660"
  },
  {
    "text": "that it's a rectangle and then we apply a recursive pattern to say well we require the width to be 100 and then",
    "start": "1210660",
    "end": "1216299"
  },
  {
    "text": "that's going to be captured here and then of course if neither of these patterns are matched we can have a",
    "start": "1216299",
    "end": "1221640"
  },
  {
    "text": "default rectangle and we can of course also have a default pattern so instead of using the default keyword we have an",
    "start": "1221640",
    "end": "1227640"
  },
  {
    "text": "underscore which is pretty much the same thing that we were using in the Topol deconstructions as well so that's",
    "start": "1227640",
    "end": "1235290"
  },
  {
    "text": "interesting that's a really nice addition to pattern matching and it makes it a lot more like how you do",
    "start": "1235290",
    "end": "1240720"
  },
  {
    "text": "pattern matching in for instance f-sharp Scylla Courtland Swift and all other programming languages that use these",
    "start": "1240720",
    "end": "1246750"
  },
  {
    "text": "kinds of of language features so I want to show you another example of how we can abuse this and how you probably",
    "start": "1246750",
    "end": "1252630"
  },
  {
    "start": "1248000",
    "end": "1287000"
  },
  {
    "text": "shouldn't do pattern matching but I've seen this happening in different types of applications especially if you do",
    "start": "1252630",
    "end": "1258690"
  },
  {
    "text": "doing mobile and you're working in car plain it's really easy to just over use pattern matching because it feels better",
    "start": "1258690",
    "end": "1264690"
  },
  {
    "text": "in this case here I have this method called visibility Front bool the boolean is nullable because we all know that",
    "start": "1264690",
    "end": "1270330"
  },
  {
    "text": "buildings can have 3 different values so this case here I'm saying well based on this state of our boolean if it's true",
    "start": "1270330",
    "end": "1276840"
  },
  {
    "text": "we're gonna just have the item as visible if it's false it's gonna be hidden if it's null it's gonna blink",
    "start": "1276840",
    "end": "1282120"
  },
  {
    "text": "just to annoy the users to tell the developers to write better code all right another more realistic example",
    "start": "1282120",
    "end": "1290870"
  },
  {
    "start": "1287000",
    "end": "1327000"
  },
  {
    "text": "would be in this case here where we first set our shape out of an HTTP response message we have our HTTP",
    "start": "1290870",
    "end": "1297210"
  },
  {
    "text": "response message and we have this switch expression that's telling us based on the message whenever we have the HTTP",
    "start": "1297210",
    "end": "1304080"
  },
  {
    "text": "status code of okay we're gonna extract that shape out of the message otherwise if it's not modified we're gonna get",
    "start": "1304080",
    "end": "1309870"
  },
  {
    "text": "that from our cache and in all of the other cases we gonna throw exceptions so",
    "start": "1309870",
    "end": "1315090"
  },
  {
    "text": "this here is a more realistic example that you might end up with in your applications but it's all powered by the",
    "start": "1315090",
    "end": "1320970"
  },
  {
    "text": "the fact that we can now do pattern matching in a better way in c-sharp so",
    "start": "1320970",
    "end": "1328169"
  },
  {
    "start": "1327000",
    "end": "1519000"
  },
  {
    "text": "that's one of the bigger features added in c-sharp a probably one of the biggest ones another one is something they call",
    "start": "1328169",
    "end": "1334140"
  },
  {
    "text": "ranges if you've ever done work in for instance Python you probably you",
    "start": "1334140",
    "end": "1339419"
  },
  {
    "text": "probably ran into using ranges ranges is simply a way for us to express start and end in a common",
    "start": "1339419",
    "end": "1346380"
  },
  {
    "text": "manner so what I'm doing is that I'm constructing something that a array of",
    "start": "1346380",
    "end": "1352320"
  },
  {
    "text": "numbers this here is a span of T has anyone heard of span of T we used it",
    "start": "1352320",
    "end": "1358230"
  },
  {
    "text": "okay so half of you know what span of T's so span of T is just a way for us to represent a collection of data and",
    "start": "1358230",
    "end": "1364680"
  },
  {
    "text": "whenever we do operations on this collection of data for instance slicing it up or or cutting it from the end to",
    "start": "1364680",
    "end": "1371130"
  },
  {
    "text": "the start or making a copy of it we only get a reference to those exact items that we want that means there's no extra",
    "start": "1371130",
    "end": "1379050"
  },
  {
    "text": "allocations so you simply point you have two pointers basically that point to start and end and that's your your span",
    "start": "1379050",
    "end": "1385170"
  },
  {
    "text": "off of things so what happens here if I want to slice this up I use this range",
    "start": "1385170",
    "end": "1391470"
  },
  {
    "text": "syntax to say well I want to slice my data collection up and this doesn't give me a copy of it it only gives me a",
    "start": "1391470",
    "end": "1398070"
  },
  {
    "text": "reference to those particular items with a range of items what we're saying here",
    "start": "1398070",
    "end": "1403440"
  },
  {
    "text": "is that we're going to start from index 5 and go all the way to what this hat syntax means that we're gonna start from",
    "start": "1403440",
    "end": "1410250"
  },
  {
    "text": "the end and go one backwards we could of course also use that in the in the start here to say I want to start from 10 from",
    "start": "1410250",
    "end": "1418380"
  },
  {
    "text": "the end whatever that would be and then go to 2 1 from the end I have no idea",
    "start": "1418380",
    "end": "1425040"
  },
  {
    "text": "what happens if you do this actually that would be interesting to start to from the to start from the end and then",
    "start": "1425040",
    "end": "1431220"
  },
  {
    "text": "end at the start maybe it reverses who knows probably doesn't so this range",
    "start": "1431220",
    "end": "1438480"
  },
  {
    "text": "syntax here allows us to define a more common way of us to work with collections of data where we're going to",
    "start": "1438480",
    "end": "1444150"
  },
  {
    "text": "grab especially if you grab certain amounts of items right especially if when I work with two-dimensional erase",
    "start": "1444150",
    "end": "1449370"
  },
  {
    "text": "this becomes really interesting and again it doesn't give us a copy just gives us a reference to those numbers or",
    "start": "1449370",
    "end": "1454530"
  },
  {
    "text": "those items we have another way of doing this as well and we keeps a normal array indexer to say I want to get a range of",
    "start": "1454530",
    "end": "1461850"
  },
  {
    "text": "numbers and the same thing really happens so it slices off our it returns",
    "start": "1461850",
    "end": "1467460"
  },
  {
    "text": "a new or it returns those items as a new span ephant and based off this range",
    "start": "1467460",
    "end": "1473370"
  },
  {
    "text": "here the ranges here the numbers are actually something that that's called in an index",
    "start": "1473370",
    "end": "1479560"
  },
  {
    "text": "and we can construct this index the same way as we construct our range by defying",
    "start": "1479560",
    "end": "1486100"
  },
  {
    "text": "for instance that we have hacked five here which is the fifth item from the end and then we can combine this range",
    "start": "1486100",
    "end": "1494530"
  },
  {
    "text": "syntax if we have two indexes here so I define first and last we will start for from the end go to two from the end and",
    "start": "1494530",
    "end": "1500800"
  },
  {
    "text": "then we're going to construct this as a range you simply have your index dot dot index and that's going to give you a",
    "start": "1500800",
    "end": "1507160"
  },
  {
    "text": "range of data that's pretty cool makes it easier for us to work with",
    "start": "1507160",
    "end": "1512500"
  },
  {
    "text": "collections of data which probably most applications are doing all right the",
    "start": "1512500",
    "end": "1520330"
  },
  {
    "start": "1519000",
    "end": "1543000"
  },
  {
    "text": "next one is something that's called no level reference types this feature is something you have to opt into and you",
    "start": "1520330",
    "end": "1527530"
  },
  {
    "text": "can do it in multiple different ways so we can either edit our project file to say that we want to enable this feature",
    "start": "1527530",
    "end": "1533250"
  },
  {
    "text": "by setting nullable context options to enable before you do that you probably",
    "start": "1533250",
    "end": "1540160"
  },
  {
    "text": "want to know what the future does right we're getting to that we can also use",
    "start": "1540160",
    "end": "1545290"
  },
  {
    "start": "1543000",
    "end": "1590000"
  },
  {
    "text": "this this thing here to say knowable enable or disable so why would you do",
    "start": "1545290",
    "end": "1552730"
  },
  {
    "text": "that if you enable this project slide because when you enable this feature in your project what's going to happen is",
    "start": "1552730",
    "end": "1559600"
  },
  {
    "text": "wherever it thinks that you might have a null reference it's gonna give you a warning and some of us have trait",
    "start": "1559600",
    "end": "1565540"
  },
  {
    "text": "warnings as errors which means that you could potentially end up breaking your build a whole lot more than you should",
    "start": "1565540",
    "end": "1572740"
  },
  {
    "text": "right so you can disable this on places that you don't want to use it and you'll see here that it it'll it'll change in",
    "start": "1572740",
    "end": "1580000"
  },
  {
    "text": "the application so it's now telling us that you should probably shouldn't have this question mark here but once I",
    "start": "1580000",
    "end": "1585400"
  },
  {
    "text": "remove this thing here the the warning goes away because now this is an allowed syntax so what I've done here is that",
    "start": "1585400",
    "end": "1591970"
  },
  {
    "start": "1590000",
    "end": "1850000"
  },
  {
    "text": "I've enabled this nullable reference type thing a notable reference type is a way for us to say that we have notable",
    "start": "1591970",
    "end": "1599170"
  },
  {
    "text": "references we all know that reference types have always been knowable we've always be able to Don string STR or",
    "start": "1599170",
    "end": "1606160"
  },
  {
    "text": "string X is equal to null but now we don't want to do that anymore because someone at the language team",
    "start": "1606160",
    "end": "1611669"
  },
  {
    "text": "finally understood that in producing nulls in a language is a really bad idea and I know someone else I read this few",
    "start": "1611669",
    "end": "1618370"
  },
  {
    "text": "years ago that someone made like a they estimated how much money have gone into",
    "start": "1618370",
    "end": "1624010"
  },
  {
    "text": "fixing no reference exceptions as well as how much of production has gone down",
    "start": "1624010",
    "end": "1629649"
  },
  {
    "text": "due to it and just caused a whole lot of lost money for for people that kind of",
    "start": "1629649",
    "end": "1636190"
  },
  {
    "text": "sucks so what what this allows us to do is to say well I want to be in charge of when we can use nulls or not we've been",
    "start": "1636190",
    "end": "1641919"
  },
  {
    "text": "able to do knowable integers and nullable ruled in sin whatever for a long time that was introduced in c-sharp",
    "start": "1641919",
    "end": "1647230"
  },
  {
    "text": "too but that we can do it with reference types as well so what we do is that we say that everything is true that's not all about",
    "start": "1647230",
    "end": "1653470"
  },
  {
    "text": "and when something can be no like like we're in this case this string here can be null if I don't want this to be null",
    "start": "1653470",
    "end": "1659860"
  },
  {
    "text": "I remove the question mark and what happens now is that the constructor of our type will now tell us you know this",
    "start": "1659860",
    "end": "1666039"
  },
  {
    "text": "this property is uninitialized and you've told me that this shouldn't be null so what we can do now is we can fix",
    "start": "1666039",
    "end": "1672730"
  },
  {
    "text": "this so we can of course send the name into the constructor and then we can initialize our our property and",
    "start": "1672730",
    "end": "1681070"
  },
  {
    "text": "everything's fine right but the problem is now I changed the contract with my entire application and more things are",
    "start": "1681070",
    "end": "1687190"
  },
  {
    "text": "going to break so let's allow nulls in this case and go and fix the problem",
    "start": "1687190",
    "end": "1693700"
  },
  {
    "text": "elsewhere in the code wherever we use this person right so we have this this",
    "start": "1693700",
    "end": "1700059"
  },
  {
    "text": "method here called insert or update it takes a person this is a reference type",
    "start": "1700059",
    "end": "1706480"
  },
  {
    "text": "and I'm not worried about this being null because I haven't declared that person here can be null if I had we",
    "start": "1706480",
    "end": "1713320"
  },
  {
    "text": "would get a warning we're still getting a warning because something else right because in this case here we're",
    "start": "1713320",
    "end": "1718330"
  },
  {
    "text": "accessing the lines property of a value that could potentially give us a null",
    "start": "1718330",
    "end": "1723970"
  },
  {
    "text": "reference exception and that's a little bit problematic I have two ways of solving this either we make sure that",
    "start": "1723970",
    "end": "1731529"
  },
  {
    "text": "person that name isn't initialized but in some cases if that happens on",
    "start": "1731529",
    "end": "1737260"
  },
  {
    "text": "multiple different threads we might not really be be sure that it's it's initialized anyways right so",
    "start": "1737260",
    "end": "1742900"
  },
  {
    "text": "fix the problem but we might not want to declare the name in here right so how do",
    "start": "1742900",
    "end": "1748000"
  },
  {
    "text": "we fix this without setting the value we can of course you see here the no conditional operator to say well don't",
    "start": "1748000",
    "end": "1754630"
  },
  {
    "text": "get the length but what we can also do is that we can ensure that this isn't null by introducing the bank so we can",
    "start": "1754630",
    "end": "1761620"
  },
  {
    "text": "say I'm I'm pretty sure this isn't gonna be no and again if we were to say that person here is null we would potentially",
    "start": "1761620",
    "end": "1768880"
  },
  {
    "text": "get a null reference exception again and we can say well I promise this isn't no it just starts to get ugly right I'm",
    "start": "1768880",
    "end": "1776110"
  },
  {
    "text": "gonna end up with banks everywhere so we don't want that but we have the option to fix the problem and find find box in",
    "start": "1776110",
    "end": "1783280"
  },
  {
    "text": "the applications before they reach production I know there's a good blog post by Johns key to did this in no time",
    "start": "1783280",
    "end": "1789190"
  },
  {
    "text": "and we found a heap of potential bugs that guy writes perfect code so probably wasn't bugging compiler so another",
    "start": "1789190",
    "end": "1798220"
  },
  {
    "text": "example of this is we have this person repository it's telling us that whatever I'm returning here to the right doesn't",
    "start": "1798220",
    "end": "1804910"
  },
  {
    "text": "match what we have to the left and that's because what I'm saying here is that I'm converting this person to know so it's actually figuring out that I",
    "start": "1804910",
    "end": "1810910"
  },
  {
    "text": "have a null value here and that doesn't match up with what I have here so I",
    "start": "1810910",
    "end": "1815980"
  },
  {
    "text": "could change that and one of theirs goes away but I don't wanna do that but instead I'm gonna promise that this",
    "start": "1815980",
    "end": "1821890"
  },
  {
    "text": "isn't null huh what happened now okay so",
    "start": "1821890",
    "end": "1829360"
  },
  {
    "text": "that's not good right this just shows you that the the feature is good it's gonna help us find bugs but we can still",
    "start": "1829360",
    "end": "1835450"
  },
  {
    "text": "break things if we abuse the compiler and view and abuse these language features we can still end up having",
    "start": "1835450",
    "end": "1841180"
  },
  {
    "text": "issues but enabling the nillable reference types allows us to at least find the potential bugs in the code that",
    "start": "1841180",
    "end": "1846640"
  },
  {
    "text": "we have and we can go ahead and check for for things and make sure that either we check well if person is null in this",
    "start": "1846640",
    "end": "1852670"
  },
  {
    "start": "1850000",
    "end": "1870000"
  },
  {
    "text": "case or person that name rather we can do something about that maybe we want to",
    "start": "1852670",
    "end": "1858160"
  },
  {
    "text": "log that properly to the database maybe we want to do something else you know we can fix our problems so that's an",
    "start": "1858160",
    "end": "1866260"
  },
  {
    "text": "interesting feature that's finally being added to c-sharp next up we have",
    "start": "1866260",
    "end": "1871390"
  },
  {
    "start": "1870000",
    "end": "1967000"
  },
  {
    "text": "something called using declarations now if you look at this code here real quickly you'll notice that it looks a little bit",
    "start": "1871390",
    "end": "1877810"
  },
  {
    "text": "different from what you've seen before when you sing using statements so normally what happens is that we have",
    "start": "1877810",
    "end": "1883000"
  },
  {
    "text": "you saying we have these parentheses and then we have the curly the Curly's you",
    "start": "1883000",
    "end": "1893140"
  },
  {
    "text": "know and if we want to do more you sings then we have nested you sings it just starts to look like an error in the application and we're gills we can't of",
    "start": "1893140",
    "end": "1899590"
  },
  {
    "text": "course make it a little bit nicer but you know now what they're doing is that they're getting rid of all of that and",
    "start": "1899590",
    "end": "1905280"
  },
  {
    "text": "what we can do instead is that if we just undo that in this case here what we're doing is that we're just declaring",
    "start": "1905280",
    "end": "1911260"
  },
  {
    "text": "our clients here the HTTP client we have this using thing here at the top so when",
    "start": "1911260",
    "end": "1917170"
  },
  {
    "text": "do they dispose of this well it actually disposes when the method is is finishing",
    "start": "1917170",
    "end": "1922750"
  },
  {
    "text": "executing so at the bottom here if we have a lot of other things happening let's say that we have something",
    "start": "1922750",
    "end": "1927790"
  },
  {
    "text": "happening here and then something else and then something else it would dispose that at the end of the method so it's a",
    "start": "1927790",
    "end": "1935530"
  },
  {
    "text": "nice feature because most of the times that's what we want and if we want to scope our using blocks we can still use",
    "start": "1935530",
    "end": "1941260"
  },
  {
    "text": "the same approach that we did earlier that's one of the things with the language features that they are adding they're not removing any ways of billing",
    "start": "1941260",
    "end": "1947620"
  },
  {
    "text": "Saffir previously like we can still use the old approaches of pattern matching when we check the types ourselves but",
    "start": "1947620",
    "end": "1953770"
  },
  {
    "text": "didn't get type and then comparing with the type of using pattern matching is just a way for us to be less verbose and",
    "start": "1953770",
    "end": "1959590"
  },
  {
    "text": "build better software and the same thing here like we can use these features if we want to and we can also not use them",
    "start": "1959590",
    "end": "1965980"
  },
  {
    "text": "if we don't want to another feature that I can show you is static local functions",
    "start": "1965980",
    "end": "1972600"
  },
  {
    "start": "1967000",
    "end": "2049000"
  },
  {
    "text": "this is a totally over-engineered example I have this local method here",
    "start": "1972600",
    "end": "1977620"
  },
  {
    "text": "which is now marked as static so why would you mark your local methods as static the interesting thing with local",
    "start": "1977620",
    "end": "1983950"
  },
  {
    "text": "functions is that they have their use cases and they're good but they're also capturing the context of your method",
    "start": "1983950",
    "end": "1989440"
  },
  {
    "text": "right if you act as a variable inside your the method that it lives in it's gonna capture that into whatever code is",
    "start": "1989440",
    "end": "1996220"
  },
  {
    "text": "generated and you might have a lot of side effects marking this as static means that it's totally isolated it",
    "start": "1996220",
    "end": "2004680"
  },
  {
    "text": "might not make sense to have it outside of your method because you might be conforming to some design guideline",
    "start": "2004680",
    "end": "2010260"
  },
  {
    "text": "you're not allowed to someone might reject your pull request and be very mad at you if you're not doing this is a",
    "start": "2010260",
    "end": "2015510"
  },
  {
    "text": "local function and this is a way for us to avoid the side effects so you'll see here that I'm trying to change my my",
    "start": "2015510",
    "end": "2023130"
  },
  {
    "text": "name here or even accessing the name and if it's not static I won't be allowed to because this here promises that my",
    "start": "2023130",
    "end": "2031470"
  },
  {
    "text": "over-engineer method is not having any side effects if I remove this static it's gonna have access to all the local",
    "start": "2031470",
    "end": "2038100"
  },
  {
    "text": "variables and I can have a whole lot of side effects now don't go mark everything as static",
    "start": "2038100",
    "end": "2043799"
  },
  {
    "text": "just because I said so but again be cautious with the features you add right so the final feature that I can show you",
    "start": "2043799",
    "end": "2050790"
  },
  {
    "start": "2049000",
    "end": "2122000"
  },
  {
    "text": "inside Visual Studio I promise you to show you something cool with async and a weight and an improvement - how do you",
    "start": "2050790",
    "end": "2056310"
  },
  {
    "text": "say sh Encana weight in c-sharp so in this case here you'll see here that I have my async pain method that's an",
    "start": "2056310",
    "end": "2062040"
  },
  {
    "text": "introduction in c-sharp 7 so you can either do asynchronous console applications but the change here from",
    "start": "2062040",
    "end": "2069510"
  },
  {
    "text": "from c-sharp 8 is that we can now have the await keyword in front of our foreach loop that means that we can work",
    "start": "2069510",
    "end": "2075330"
  },
  {
    "text": "with a stream of data so this here is called asynchronous streams and enumerables it means that imagine we are",
    "start": "2075330",
    "end": "2082290"
  },
  {
    "text": "retrieving data from either hardware or we're retrieving data from the web and it's coming in a little bit of a time",
    "start": "2082290",
    "end": "2087690"
  },
  {
    "text": "right so we want to manage the data once we get it we're going to display the data to the user as soon as they get",
    "start": "2087690",
    "end": "2093510"
  },
  {
    "text": "downloaded from either disk or or the web or hardware right so how do we do",
    "start": "2093510",
    "end": "2098970"
  },
  {
    "text": "that well we had adviye weight keyword inside of a foreach loop which now indicates that this method here is going",
    "start": "2098970",
    "end": "2105930"
  },
  {
    "text": "to be a synchronous it's going to give us chunks of data and as soon as they're available we'll be back inside our body",
    "start": "2105930",
    "end": "2113280"
  },
  {
    "text": "of our for each loop and then it's going to wait for the next one it's gonna wait for the next one after that and then when it's done it goes ahead and runs",
    "start": "2113280",
    "end": "2119400"
  },
  {
    "text": "the the next part of the code so what does that implementation look like well",
    "start": "2119400",
    "end": "2124440"
  },
  {
    "start": "2122000",
    "end": "2140000"
  },
  {
    "text": "first of all we're using something called the ia sync enumerable which is the new thing so you have the async",
    "start": "2124440",
    "end": "2130410"
  },
  {
    "text": "keyword previously you had to do async task now you have to do async enumerable",
    "start": "2130410",
    "end": "2135720"
  },
  {
    "text": "of T if you're doing an icing person innumerable can it make sense if we",
    "start": "2135720",
    "end": "2140910"
  },
  {
    "text": "expand this we can see here I have a normal for loop just gonna loop from zero to ten I'm",
    "start": "2140910",
    "end": "2146460"
  },
  {
    "text": "using the yield return which means that just return every item back to the caller whenever it's available and then",
    "start": "2146460",
    "end": "2153540"
  },
  {
    "text": "I have some other over-engineered code here basically what it's doing is that it's waiting 300 milliseconds after that it's gonna",
    "start": "2153540",
    "end": "2160680"
  },
  {
    "text": "return the value back to the caller and then it goes over again it's gonna do that ten times now if I run this code",
    "start": "2160680",
    "end": "2166710"
  },
  {
    "text": "here hopefully still works we'll see her that's going to stream out this to the",
    "start": "2166710",
    "end": "2171900"
  },
  {
    "text": "console and I'm printing this out inside our main method inside the body of this",
    "start": "2171900",
    "end": "2177840"
  },
  {
    "text": "foreach loop right so that's pretty cool so what about a more realistic example",
    "start": "2177840",
    "end": "2184910"
  },
  {
    "text": "let's say that I'm working with this file here that I have on my file system I'm loading some lyrics from disk I'm",
    "start": "2184910",
    "end": "2192060"
  },
  {
    "text": "again I'm using this using declaration right so I'm saying here that I'm a load is stream from disk then for each line",
    "start": "2192060",
    "end": "2200150"
  },
  {
    "text": "just a side note they want to make this a little bit more pretty by changing",
    "start": "2200150",
    "end": "2205620"
  },
  {
    "text": "this to allow us to do that in line but you can't do that now you have to declare that on the on the line before",
    "start": "2205620",
    "end": "2212810"
  },
  {
    "text": "so what I'm doing now is that I'm a synchronously reading a line for my file we open up the lyrics file on my disk",
    "start": "2212810",
    "end": "2220010"
  },
  {
    "start": "2213000",
    "end": "2244000"
  },
  {
    "text": "just imagine it's a super large file right I'm gonna read a line as long as",
    "start": "2220010",
    "end": "2226320"
  },
  {
    "text": "this line isn't no we're gonna return that line to the caller and then just to save some CPU cycles or whatever we're",
    "start": "2226320",
    "end": "2234570"
  },
  {
    "text": "gonna wait for 400 milliseconds right does that make sense cool all right I forgot to tell you like",
    "start": "2234570",
    "end": "2245070"
  },
  {
    "start": "2244000",
    "end": "2266000"
  },
  {
    "text": "I totally understand it's the last session of the day if you fall asleep try not to fall asleep to your neighbor on your neighbor doesn't go very well",
    "start": "2245070",
    "end": "2253410"
  },
  {
    "text": "all right so now let's see if you know what these lyrics are",
    "start": "2253410",
    "end": "2260180"
  },
  {
    "text": "Fleury rickrolled by C sharp 8 can I",
    "start": "2265140",
    "end": "2271300"
  },
  {
    "start": "2266000",
    "end": "2283000"
  },
  {
    "text": "almost race though that we can now load these lines from our file we wait for",
    "start": "2271300",
    "end": "2276400"
  },
  {
    "text": "400 milliseconds and then we get their next line then we get the next line and we can work with streams of data it's a",
    "start": "2276400",
    "end": "2283990"
  },
  {
    "start": "2283000",
    "end": "2298000"
  },
  {
    "text": "really nice addition to the language that sort that's all the language feature that I can show you in Visual",
    "start": "2283990",
    "end": "2289210"
  },
  {
    "text": "Studio the next ones are going to be all in PowerPoint because again I didn't",
    "start": "2289210",
    "end": "2295930"
  },
  {
    "text": "have time to build on myself so I did mention earlier that it now requires darknet Core 3.0 right and that's",
    "start": "2295930",
    "end": "2302950"
  },
  {
    "start": "2298000",
    "end": "2334000"
  },
  {
    "text": "because they want to add things like target type new expressions they won't experiment with changing the the",
    "start": "2302950",
    "end": "2309640"
  },
  {
    "text": "language runtime to allow us to introduce new features and I think",
    "start": "2309640",
    "end": "2314980"
  },
  {
    "text": "that's good because being you know restricted by just doing compiler magic isn't really going to be sufficient if",
    "start": "2314980",
    "end": "2321400"
  },
  {
    "text": "we want to build a programming language of the future because building software now and compared to when c-sharp 1 was",
    "start": "2321400",
    "end": "2328600"
  },
  {
    "text": "released 19 years ago it's not the same thing it's totally different now target",
    "start": "2328600",
    "end": "2334780"
  },
  {
    "start": "2334000",
    "end": "2369000"
  },
  {
    "text": "type new expressions it's a pretty small feature instead of writing var triangle is equal to new triangle we can ever say",
    "start": "2334780",
    "end": "2341440"
  },
  {
    "text": "triangle triangle is equal to new this here I believe required a one time change but what's interesting with this",
    "start": "2341440",
    "end": "2347830"
  },
  {
    "text": "is that in the case of a dictionary we've all kind of hated to to create instances of things like dictionaries or",
    "start": "2347830",
    "end": "2354130"
  },
  {
    "text": "things that are really long in this case here it's just in first that this is going to be a list of integers if we use",
    "start": "2354130",
    "end": "2359950"
  },
  {
    "text": "that in the nested context right so that's pretty cool it just makes it a little bit nicer when we write our code",
    "start": "2359950",
    "end": "2365950"
  },
  {
    "text": "I think it's a good addition now another really small feature is default in",
    "start": "2365950",
    "end": "2372070"
  },
  {
    "text": "deconstruction so they're doing changes and doing additions to deconstruction and tuples in this case here we want to",
    "start": "2372070",
    "end": "2378280"
  },
  {
    "text": "create a default topple for this but why would we say default default when we can simply say is equal to T fault and just",
    "start": "2378280",
    "end": "2384610"
  },
  {
    "text": "figures it out but some of these things they cannot do with compiler magic they need to rely on changes in the runtime",
    "start": "2384610",
    "end": "2392490"
  },
  {
    "text": "how many of you had have are working in versus web projects and are trying",
    "start": "2392490",
    "end": "2397690"
  },
  {
    "text": "- or have tried to do generic attributes that's not just a few okay normally I",
    "start": "2397690",
    "end": "2405549"
  },
  {
    "start": "2403000",
    "end": "2433000"
  },
  {
    "text": "meet a lot of developers that try to do generic attributes and one of the things that they do is that they introduced his",
    "start": "2405549",
    "end": "2412359"
  },
  {
    "text": "constructor where they take the tie because it can't do generic generic attributes in c-sharp or at least well",
    "start": "2412359",
    "end": "2417940"
  },
  {
    "text": "you will be able to you otherwise why would I show this slide so what you can do now is that instead of having to do",
    "start": "2417940",
    "end": "2423549"
  },
  {
    "text": "that you can now simply have a custom attribute of T and you can use that generic type in the in your custom",
    "start": "2423549",
    "end": "2429910"
  },
  {
    "text": "attribute and the things this is a good addition next up they're doing some changes to to be allow us to skip",
    "start": "2429910",
    "end": "2437799"
  },
  {
    "start": "2433000",
    "end": "2465000"
  },
  {
    "text": "passing parameters especially in this case here it's something called color expression attribute so imagine in this",
    "start": "2437799",
    "end": "2443349"
  },
  {
    "text": "case here we have this method called assert it takes a boolean called the condition then we have an other",
    "start": "2443349",
    "end": "2450369"
  },
  {
    "text": "parameter called message we apply this attribute called call argument",
    "start": "2450369",
    "end": "2455799"
  },
  {
    "text": "expression and we refer to the condition parameter and this here when compiled",
    "start": "2455799",
    "end": "2464849"
  },
  {
    "text": "does now not require us to pass the message itself because what it's going to do it's going to decompile down to",
    "start": "2464849",
    "end": "2470980"
  },
  {
    "start": "2465000",
    "end": "2494000"
  },
  {
    "text": "something something look at this here it's going to take the condition as a string and pass that as the message so",
    "start": "2470980",
    "end": "2478960"
  },
  {
    "text": "if you're working with logging frameworks we're rebuilding anything like logging yourself this is going to be really valuable or even if you're",
    "start": "2478960",
    "end": "2485140"
  },
  {
    "text": "throwing custom exceptions and you just want to pass a little bit more information this here is going to be",
    "start": "2485140",
    "end": "2490750"
  },
  {
    "text": "something that's probably interested now the next feature here is called enhanced",
    "start": "2490750",
    "end": "2495849"
  },
  {
    "start": "2494000",
    "end": "2527000"
  },
  {
    "text": "using also known as duck typing I had a talk to Matt's on the c-sharp team and",
    "start": "2495849",
    "end": "2500950"
  },
  {
    "text": "he told me that they might be scraping this feature but the get up page is still up there and if you've noticed I",
    "start": "2500950",
    "end": "2506589"
  },
  {
    "text": "have all of these links here at the bottom to the you probably won't be able to write that down but I'll share the",
    "start": "2506589",
    "end": "2512049"
  },
  {
    "text": "slides but the links here are to the discussions on github and you can go ahead and you can participate in the",
    "start": "2512049",
    "end": "2517329"
  },
  {
    "text": "discussions and this discussion is still up there so I'm not sure I should probably trust him right he's on the language team but it's it's still there",
    "start": "2517329",
    "end": "2523839"
  },
  {
    "text": "so I'm gonna keep this in my slide here because I really want this feature not necessarily what they're doing in this",
    "start": "2523839",
    "end": "2529210"
  },
  {
    "text": "case here so what they're doing here is we were looking at this this class here or the representation of this class it",
    "start": "2529210",
    "end": "2536410"
  },
  {
    "text": "introduces this disposed method but we don't have an implementation of I disposable so why wouldn't I be able to",
    "start": "2536410",
    "end": "2543609"
  },
  {
    "text": "do using VAR resources equal to new resource why not allow us to just figure out that this has what matches this",
    "start": "2543609",
    "end": "2550300"
  },
  {
    "text": "contract this is a very small example of that but imagine going even further no",
    "start": "2550300",
    "end": "2556990"
  },
  {
    "text": "longer having to explicitly implement interfaces and allowing us to pass passive objects into method that just",
    "start": "2556990",
    "end": "2563470"
  },
  {
    "text": "matches the methods that they were expecting right I think it would be good it's something that go has been doing",
    "start": "2563470",
    "end": "2569319"
  },
  {
    "text": "for a long time and it's it's something that some developers don't like it I do",
    "start": "2569319",
    "end": "2574900"
  },
  {
    "text": "now the next feature is something called default interface methods which is really a feature that I'm scared of",
    "start": "2574900",
    "end": "2580750"
  },
  {
    "start": "2576000",
    "end": "2663000"
  },
  {
    "text": "coming to the language coming from a C++ background and having done multiple inheritance before I think it's a really",
    "start": "2580750",
    "end": "2586960"
  },
  {
    "text": "bad idea to to introduce this type of behavior in the applications so what what happens here is that we have this",
    "start": "2586960",
    "end": "2593079"
  },
  {
    "text": "interface our work is on this I authentication interface that allows us to just authenticate something we pass",
    "start": "2593079",
    "end": "2598630"
  },
  {
    "text": "credentials we get a user back and it that's great so someone can use this interface they can implement their own",
    "start": "2598630",
    "end": "2604510"
  },
  {
    "text": "class for this and now I want to release a new version a new get the users pull",
    "start": "2604510",
    "end": "2610480"
  },
  {
    "text": "this down and the application breaks but they won't when they're using c-sharp 8 because in this case here I'm",
    "start": "2610480",
    "end": "2616750"
  },
  {
    "text": "introducing this expression here over here which is now introducing a default",
    "start": "2616750",
    "end": "2624010"
  },
  {
    "text": "implementation for that method now that's a very small default implementation imagine this to be an",
    "start": "2624010",
    "end": "2630430"
  },
  {
    "text": "entire method with a lot of logic in it we still have the same diamond problem that you would with multiple inheritance",
    "start": "2630430",
    "end": "2636750"
  },
  {
    "text": "but at least now we can call authenticate acing here because it's a",
    "start": "2636750",
    "end": "2642460"
  },
  {
    "text": "default implementation of the interface it doesn't break when we pull in the unity package and build our application I know that people working on",
    "start": "2642460",
    "end": "2650980"
  },
  {
    "text": "open-source projects they really love this because a lot of the feedback they might be getting from their users is",
    "start": "2650980",
    "end": "2656260"
  },
  {
    "text": "that hey I brought in the nougat package you broke my app well",
    "start": "2656260",
    "end": "2662490"
  },
  {
    "start": "2663000",
    "end": "2685000"
  },
  {
    "text": "it's an interesting feature to add now the next one is no equalizing assignment it's just an easier way for us to check",
    "start": "2663320",
    "end": "2669140"
  },
  {
    "text": "you for values no before assigning it so instead of having to say well if X is equal to null then initialize X with y",
    "start": "2669140",
    "end": "2674890"
  },
  {
    "text": "we can now say X question mark question mark is equal to Y again it's about",
    "start": "2674890",
    "end": "2683060"
  },
  {
    "text": "saving characters right now this is all if these are all the features in c-sharp",
    "start": "2683060",
    "end": "2688070"
  },
  {
    "text": "eight or potentially c-sharp eight we'll get to where they might not be in c-sharp baby in just a moment but they",
    "start": "2688070",
    "end": "2693740"
  },
  {
    "text": "also want to add relaxed ordering of referent partial modifiers alternative interpolated robots in strings and stack",
    "start": "2693740",
    "end": "2699650"
  },
  {
    "text": "a lock in esta context so next up after c-sharp I should have written f-sharp",
    "start": "2699650",
    "end": "2707570"
  },
  {
    "start": "2702000",
    "end": "2739000"
  },
  {
    "text": "instead because it's all turning into a functional programming language but they might call it C sharp 10 or X or",
    "start": "2707570",
    "end": "2713540"
  },
  {
    "text": "whatever let's skip 9 like they did with Windows I think that's a good plan but honestly don't be sad if they",
    "start": "2713540",
    "end": "2720260"
  },
  {
    "text": "your language feature that you really love they've done that to me in the past I really wanted record types when they",
    "start": "2720260",
    "end": "2726530"
  },
  {
    "text": "rewrote the compilers they had a working example of record types and then when they released a new version of c-sharp",
    "start": "2726530",
    "end": "2732410"
  },
  {
    "text": "it wasn't in there because it's a really hard thing to solve now further on what",
    "start": "2732410",
    "end": "2738410"
  },
  {
    "text": "they're working on c-sharp is things like negated condition of statements so they want to make improvements see the",
    "start": "2738410",
    "end": "2743810"
  },
  {
    "start": "2739000",
    "end": "2782000"
  },
  {
    "text": "way that we read hours offer right so we want to read we want a more readable and maintainable code so in this here isn't",
    "start": "2743810",
    "end": "2750590"
  },
  {
    "text": "purely readable especially not if there's more conditions all right so what we express ourselves with here is",
    "start": "2750590",
    "end": "2756500"
  },
  {
    "text": "well if the shape isn't a triangle right why not make it a little bit more easy",
    "start": "2756500",
    "end": "2761600"
  },
  {
    "text": "on the eyes to say well if the shape is not a triangle well do this or if not",
    "start": "2761600",
    "end": "2766880"
  },
  {
    "text": "shape is a triangle or unless shape is a triangle clearly they haven't decided",
    "start": "2766880",
    "end": "2772580"
  },
  {
    "text": "which one to choose I would vote for the first one because they don't have to introduce any new keywords and I really",
    "start": "2772580",
    "end": "2778910"
  },
  {
    "text": "don't like the bang after if because that's not readable either next one is no conditional weight so what about if",
    "start": "2778910",
    "end": "2785300"
  },
  {
    "start": "2782000",
    "end": "2803000"
  },
  {
    "text": "you want to return something we want to weight the task if it's not null if it's",
    "start": "2785300",
    "end": "2791000"
  },
  {
    "text": "not we just return that we would be able to maybe just reuse the question mark",
    "start": "2791000",
    "end": "2796560"
  },
  {
    "text": "or the bang if it's really not null let's not do that all right and we also",
    "start": "2796560",
    "end": "2804160"
  },
  {
    "start": "2803000",
    "end": "2849000"
  },
  {
    "text": "want to get record types now record types again it's one of those features that I've been wanting for a long time I",
    "start": "2804160",
    "end": "2809380"
  },
  {
    "text": "don't know about you but I really like this feature so imagine we write this boilerplate code all the time especially",
    "start": "2809380",
    "end": "2814810"
  },
  {
    "text": "when they wrote the compilers and rewrote the compilers they've all said they wanted this feature so they have",
    "start": "2814810",
    "end": "2820030"
  },
  {
    "text": "these contracts in their applications where they write all the boilerplate code we have this thing here it's a",
    "start": "2820030",
    "end": "2825310"
  },
  {
    "text": "triangle it inherits from some abstract class we have these set of properties we want the constructor we want the quality",
    "start": "2825310",
    "end": "2831850"
  },
  {
    "text": "checks and so forth we will just want all of these standard things for our data objects why not just allow us to",
    "start": "2831850",
    "end": "2839470"
  },
  {
    "text": "say well this is a record of a triangle it has a slide a being C inherits from",
    "start": "2839470",
    "end": "2845440"
  },
  {
    "text": "shape would be great to be able to do this but when you compile this in D compiler code it wouldn't only be the",
    "start": "2845440",
    "end": "2852490"
  },
  {
    "start": "2849000",
    "end": "2872000"
  },
  {
    "text": "constructor setting those properties we would get of course the constructor that ensures us that this is immutable so",
    "start": "2852490",
    "end": "2859090"
  },
  {
    "text": "what happens now is that we have the properties they can't be changed by anyone they're set in the constructor we",
    "start": "2859090",
    "end": "2865360"
  },
  {
    "text": "also get the quality check but the quality check is in fact checking the values and not checking the references",
    "start": "2865360",
    "end": "2871210"
  },
  {
    "text": "and then of course we're getting something called a method the width",
    "start": "2871210",
    "end": "2876430"
  },
  {
    "start": "2872000",
    "end": "2898000"
  },
  {
    "text": "width method which allows us to convert this immutable object into a new type",
    "start": "2876430",
    "end": "2881470"
  },
  {
    "text": "with certain values so imagine we could say give me my triangle with this side a",
    "start": "2881470",
    "end": "2886840"
  },
  {
    "text": "is equal to 100 then we'll give you a new triangle so now we have two triangles but you didn't manipulate the",
    "start": "2886840",
    "end": "2892900"
  },
  {
    "text": "old one and in a world where we do concurrent programming that is super important and then of course they also",
    "start": "2892900",
    "end": "2899530"
  },
  {
    "start": "2898000",
    "end": "2921000"
  },
  {
    "text": "introduced deconstruct by default now the reason that they haven't done this is because when it comes to inheritance",
    "start": "2899530",
    "end": "2905740"
  },
  {
    "text": "this is really hard so you might have two immutable objects inheriting from each other or we have one inheriting",
    "start": "2905740",
    "end": "2911680"
  },
  {
    "text": "from the other how do you make sure that you can construct all of this code here it becomes really hard but they're smart",
    "start": "2911680",
    "end": "2918490"
  },
  {
    "text": "enough so just sold it and of course I showed you this earlier the Declaration",
    "start": "2918490",
    "end": "2923740"
  },
  {
    "start": "2921000",
    "end": "2959000"
  },
  {
    "text": "expressions so instead of having to declare this this variable at the top we can do it in line in our",
    "start": "2923740",
    "end": "2928970"
  },
  {
    "text": "Loup for instance again it's just to make the code flow a little bit better when we read it read it right they wanna",
    "start": "2928970",
    "end": "2937580"
  },
  {
    "text": "make changes to how we initialize or create our dictionaries so in this case here I'm just creating a basic",
    "start": "2937580",
    "end": "2942770"
  },
  {
    "text": "dictionary of a string and an integer why not just allow us to do it in a similar manner that we do in other",
    "start": "2942770",
    "end": "2948290"
  },
  {
    "text": "programming languages like Python for instance where it can do something similar to this here that comes nice now",
    "start": "2948290",
    "end": "2955790"
  },
  {
    "text": "there's one more feature that I want to talk about and that's extension everything so we can have extension",
    "start": "2955790",
    "end": "2963050"
  },
  {
    "start": "2959000",
    "end": "3083000"
  },
  {
    "text": "methods on known type so we can introduce extension methods for lists of things right that's how we got linked",
    "start": "2963050",
    "end": "2969080"
  },
  {
    "text": "and how we got all of those great things into the programming language now imagine I have this interface call a few",
    "start": "2969080",
    "end": "2975109"
  },
  {
    "text": "of T here this interface requires us to have this T which would T called bar now",
    "start": "2975109",
    "end": "2983390"
  },
  {
    "text": "I want to extend the integer with this so we could for instance say I have this",
    "start": "2983390",
    "end": "2989330"
  },
  {
    "text": "extension called int foo which is off integer and it implements the interface",
    "start": "2989330",
    "end": "2995150"
  },
  {
    "text": "I few of int and then all of a sudden we have this this implementation that",
    "start": "2995150",
    "end": "3001570"
  },
  {
    "text": "allows such say well I'm now extending integers but how does this work what what happens well I hope that wasn't a",
    "start": "3001570",
    "end": "3009520"
  },
  {
    "text": "staged falling down I'm gonna stand over here so this here means that we can now",
    "start": "3009520",
    "end": "3016750"
  },
  {
    "text": "extend integers or extend anything in the scope of wherever we have this in",
    "start": "3016750",
    "end": "3021760"
  },
  {
    "text": "our like if we have the namespace in our application we'll be able to extend everything in that app right so this",
    "start": "3021760",
    "end": "3027849"
  },
  {
    "text": "here would allow us to say well int X is equal to 10 give us the the bar of X",
    "start": "3027849",
    "end": "3033869"
  },
  {
    "text": "that's totally confusing right but sometimes especially the example that",
    "start": "3033869",
    "end": "3040060"
  },
  {
    "text": "they often give from the language team is when working with math and introducing common calculations and",
    "start": "3040060",
    "end": "3046119"
  },
  {
    "text": "whatnot on the primitive types and they don't want to go in and add them themselves in the framework they don't",
    "start": "3046119",
    "end": "3052300"
  },
  {
    "text": "want to add methods to integers some of us might have very specific needs for an integer and someone else might have a",
    "start": "3052300",
    "end": "3058660"
  },
  {
    "text": "different interest right we could of course just create a class with a method but let's build something in the language",
    "start": "3058660",
    "end": "3064460"
  },
  {
    "text": "that makes it easier for us so I think this could be interesting is just as with extension methods changing the way",
    "start": "3064460",
    "end": "3069710"
  },
  {
    "text": "that we will look at things and being able to change the the contract and the",
    "start": "3069710",
    "end": "3075619"
  },
  {
    "text": "way that we work with for instance collections when we don't have access to those implementations it's great I think this is an interesting addition to the",
    "start": "3075619",
    "end": "3082549"
  },
  {
    "text": "language so they were also looking at adding something called type classes I'm not smart enough to explain that",
    "start": "3082549",
    "end": "3088549"
  },
  {
    "start": "3083000",
    "end": "3099000"
  },
  {
    "text": "especially not at this time of error then they were introducing something called read only struck members Parham",
    "start": "3088549",
    "end": "3094130"
  },
  {
    "text": "of span of tea and any sequel and or or sequel assignment operators and if we",
    "start": "3094130",
    "end": "3100010"
  },
  {
    "start": "3099000",
    "end": "3114000"
  },
  {
    "text": "just look through the features that they want to add to the language there's a whole bunch of things they were gonna",
    "start": "3100010",
    "end": "3105140"
  },
  {
    "text": "guide right is anyone expecting all of these to show up in c-sharp hey you're",
    "start": "3105140",
    "end": "3111950"
  },
  {
    "text": "all so pessimistic all right so we're getting ranges right we're getting async streams in enumerables and i bolded the",
    "start": "3111950",
    "end": "3117920"
  },
  {
    "start": "3114000",
    "end": "3134000"
  },
  {
    "text": "ones that i like the most we're getting hopefully record types target type new expressions default and",
    "start": "3117920",
    "end": "3123170"
  },
  {
    "text": "deconstruction generic attributes color expression attribute enhance you sings which is the duck typing default",
    "start": "3123170",
    "end": "3129319"
  },
  {
    "text": "interface methods why did I build that I didn't like the feature notable reference types no localizing",
    "start": "3129319",
    "end": "3135829"
  },
  {
    "text": "assignments switch expressions declaration expressions dictionary literals type classes and any sequel and",
    "start": "3135829",
    "end": "3142940"
  },
  {
    "text": "or sequel assignment operators static local functions parents of span of T read-only struct members negated",
    "start": "3142940",
    "end": "3149599"
  },
  {
    "text": "conditions if statements will collide no condition lightweight and probably a few more things so looking at this huge list",
    "start": "3149599",
    "end": "3157849"
  },
  {
    "start": "3156000",
    "end": "3254000"
  },
  {
    "text": "of features that they want to add to the language I don't think that we're gonna see all of them means T shar-pei I don't",
    "start": "3157849",
    "end": "3163190"
  },
  {
    "text": "think we're gonna see all of them in c-sharp 9 maybe in c-sharp 10 but it kind of gives us on D an idea of what what the current language features that",
    "start": "3163190",
    "end": "3170059"
  },
  {
    "text": "they want to language is and it kind of represents how we build software and the way that it changes over the years as",
    "start": "3170059",
    "end": "3176359"
  },
  {
    "text": "well maybe they're gonna scrape half of the features to make room for other ones that maybe makes it easier for us to",
    "start": "3176359",
    "end": "3183049"
  },
  {
    "text": "work with salmon application so building mobile apps with the link some some faster parallel programming who knows",
    "start": "3183049",
    "end": "3188420"
  },
  {
    "text": "they're gonna add a whole bunch of different things in the future that makes sense at that particular time I guess that's there there",
    "start": "3188420",
    "end": "3195589"
  },
  {
    "text": "big thing right finding what's relevant now or what's relevant in 10 years because it's certainly a programming",
    "start": "3195589",
    "end": "3201529"
  },
  {
    "text": "language that's gonna be sticking around for for probably the next 10 15 20 years probably not - 20 80 but it's gonna be",
    "start": "3201529",
    "end": "3209239"
  },
  {
    "text": "sticking around for a long time so having a looked at a little bit of c-sharp 7 there's been a huge amount of",
    "start": "3209239",
    "end": "3215089"
  },
  {
    "text": "changes from c-sharp 1 to C sharp 7.3 and now would C sharp 8 we're gonna see a whole lot more features and it's gonna",
    "start": "3215089",
    "end": "3221660"
  },
  {
    "text": "make the way that we build software hopefully a little bit more readable depends on the developer of course you can make interesting choices when you",
    "start": "3221660",
    "end": "3227900"
  },
  {
    "text": "build software but then again it's up to you right so I hope you liked all of these features if you didn't like",
    "start": "3227900",
    "end": "3234739"
  },
  {
    "text": "something my DMS on Twitter are open and I hope you enjoy the rest of the conference and have a good night you've",
    "start": "3234739",
    "end": "3240380"
  },
  {
    "text": "all reserved a really great night of sleep and don't forget to vote on your way out it's been a pleasure being here I'm",
    "start": "3240380",
    "end": "3246229"
  },
  {
    "text": "Phillip Beckford [Applause]",
    "start": "3246229",
    "end": "3255909"
  }
]