[
  {
    "text": "so I was reminded when you started when they tried to push you in uh just to date myself",
    "start": "5060",
    "end": "11580"
  },
  {
    "text": "how many of you have ever defragged a disc okay old people in the room",
    "start": "11580",
    "end": "19340"
  },
  {
    "text": "so you had to defrag a little bit here before you don't know what defragging is",
    "start": "21119",
    "end": "26460"
  },
  {
    "text": "Count yourself lucky anybody enjoy defragging like looking up",
    "start": "26460",
    "end": "32880"
  },
  {
    "text": "yeah it was good like looking at moving little bits and pieces around you felt really good after about after it",
    "start": "32880",
    "end": "39059"
  },
  {
    "text": "like the results yeah it almost felt faster computer always felt faster afterwards",
    "start": "39059",
    "end": "44820"
  },
  {
    "text": "that was awesome all right 640k should be enough for everyone all that anyway Hello friends there's a",
    "start": "44820",
    "end": "52320"
  },
  {
    "text": "lot of you wow uh they put stuff in the way so I can't see everyone but",
    "start": "52320",
    "end": "58980"
  },
  {
    "text": "that was weird welcome back after lunch what are the advantage about NDC Oslo is that there's food available all the time",
    "start": "58980",
    "end": "66000"
  },
  {
    "text": "so hopefully you don't have that massive food coma that sometimes people have after lunch",
    "start": "66000",
    "end": "72360"
  },
  {
    "text": "and we're going to talk about building a glorious monolith and then we're going to talk about carving it afterwards",
    "start": "72360",
    "end": "78360"
  },
  {
    "text": "just because I'm curious how many of you work with or currently working with a",
    "start": "78360",
    "end": "83640"
  },
  {
    "text": "distributed application or microservices whatever definition you have of it quite a few of you enjoy it who enjoys",
    "start": "83640",
    "end": "90000"
  },
  {
    "text": "it who hates it I'll get a couple of those who's working with a monolith",
    "start": "90000",
    "end": "96299"
  },
  {
    "text": "there are a few of those as well who loves it okay",
    "start": "96299",
    "end": "103320"
  },
  {
    "text": "out of those uh who's working with a distributed monolith okay there's a couple of those that well",
    "start": "103320",
    "end": "109140"
  },
  {
    "text": "if you don't know what a monolith is and all that stuff we're going to get into that we're going to define a little bit so I'm Glenn",
    "start": "109140",
    "end": "116220"
  },
  {
    "text": "I'm uh I currently work at a startup called justify we make make sure you get",
    "start": "116220",
    "end": "122460"
  },
  {
    "text": "your personal legal Affairs in order to do this we built an application of course that's why I'm here that's what I",
    "start": "122460",
    "end": "129479"
  },
  {
    "text": "love to do swapping code for food uh and we early on decided that we",
    "start": "129479",
    "end": "135120"
  },
  {
    "text": "wanted to go not for the microservice distributed application path right away so",
    "start": "135120",
    "end": "140819"
  },
  {
    "text": "although it was instead we went to build a monolith by",
    "start": "140819",
    "end": "147420"
  },
  {
    "text": "purpose but we wanted to make it glorious not the other kind some technical terms first the what's the",
    "start": "147420",
    "end": "153660"
  },
  {
    "text": "distributed application and what is actually a monolith so monolith",
    "start": "153660",
    "end": "158819"
  },
  {
    "text": "by definition the dictionary says a large single upright block of stone",
    "start": "158819",
    "end": "163980"
  },
  {
    "text": "especially once shaped into serving as a pillar of Monument you don't really feel that the monolith",
    "start": "163980",
    "end": "170340"
  },
  {
    "text": "you're building is a monument of something do you accept your own stupidity Maybe",
    "start": "170340",
    "end": "175680"
  },
  {
    "text": "the other definition is a large impersonal political corporate or social structure regarded as indivisible and",
    "start": "175680",
    "end": "183180"
  },
  {
    "text": "slow to change and it's a few more nodding when I say that yeah okay that sounds about right",
    "start": "183180",
    "end": "189840"
  },
  {
    "text": "so when you're building a monolith you're building one application it's",
    "start": "189840",
    "end": "195200"
  },
  {
    "text": "compiled and deployed as a single unit everything is in one maybe not project",
    "start": "195200",
    "end": "201900"
  },
  {
    "text": "but solution it's all built into one thing it's deployed as a single unit it runs as a single unit it is a thing and",
    "start": "201900",
    "end": "209159"
  },
  {
    "text": "they call it monoliths because they often get very big and unwieldy",
    "start": "209159",
    "end": "214620"
  },
  {
    "text": "the other cool kid on the Block is the microservice it's an architectural style it's not so",
    "start": "214620",
    "end": "220560"
  },
  {
    "text": "much a word as the monolith is you structure your application in small",
    "start": "220560",
    "end": "225659"
  },
  {
    "text": "pieces does the name micro the services should be Loosely coupled",
    "start": "225659",
    "end": "231000"
  },
  {
    "text": "they should be highly maintainable testable is a good thing to have on those things you should be able to deploy every",
    "start": "231000",
    "end": "237239"
  },
  {
    "text": "single microservice independently and they're often or should be organized",
    "start": "237239",
    "end": "242879"
  },
  {
    "text": "around business concerns and the general consensus if you go",
    "start": "242879",
    "end": "248099"
  },
  {
    "text": "online is that monoliths are bad and microservices are good",
    "start": "248099",
    "end": "254120"
  },
  {
    "text": "at least that's what people say on the internet and of course if they're right on the internet has to be true",
    "start": "254700",
    "end": "260600"
  },
  {
    "text": "but and it seems like these are your only two options a really shitty monolith or",
    "start": "260760",
    "end": "266580"
  },
  {
    "text": "a really awesome micro service thing and we as a business sometimes suffer what I",
    "start": "266580",
    "end": "273840"
  },
  {
    "text": "call technological jerking off because we",
    "start": "273840",
    "end": "279479"
  },
  {
    "text": "pick a technology for the Technology's sake not because it's good for the",
    "start": "279479",
    "end": "285720"
  },
  {
    "text": "business because we like it it's cool it's also called resume development",
    "start": "285720",
    "end": "291780"
  },
  {
    "text": "where I want to build some micro servers I'm going to put that on my resume when I apply for my next job which is going to be cooler than this one",
    "start": "291780",
    "end": "298620"
  },
  {
    "text": "so it seems like you have these these chances and starting out with microservices seems like a good idea for",
    "start": "298620",
    "end": "303840"
  },
  {
    "text": "many but in reality it's playing this game on hard mode",
    "start": "303840",
    "end": "310160"
  },
  {
    "text": "because if you never built microservices before you don't really know what you don't know",
    "start": "310259",
    "end": "316199"
  },
  {
    "text": "and there's a lot of things you should know when building microservices it's really cool if you make it and you",
    "start": "316199",
    "end": "322320"
  },
  {
    "text": "get bragging rights which is awesome but it's going to take unnecessary longer it's going to take a significantly more scale because there are some fallacies",
    "start": "322320",
    "end": "328979"
  },
  {
    "text": "to distribute a Computing that people assume for instance",
    "start": "328979",
    "end": "334139"
  },
  {
    "text": "they assume that network is reliable it is always there it is always online and it's",
    "start": "334139",
    "end": "339960"
  },
  {
    "text": "it's great and of course the latency of the network is zero",
    "start": "339960",
    "end": "345138"
  },
  {
    "text": "which doesn't really happen so you have to account for that you have to account for the network not being reliable you have to account for the",
    "start": "345360",
    "end": "352080"
  },
  {
    "text": "network sometimes timing out stuff like that you assume that bandwidth is infinite",
    "start": "352080",
    "end": "358740"
  },
  {
    "text": "which is not either you assume the network is secure which is not",
    "start": "358740",
    "end": "363840"
  },
  {
    "text": "that the topology of the network doesn't change that no way where this service will",
    "start": "363840",
    "end": "370199"
  },
  {
    "text": "always be here will always be called the same we'll always have the same address oh [ __ ] it doesn't crap",
    "start": "370199",
    "end": "376320"
  },
  {
    "text": "there was one single administrator that governs everything every single part of your network no it doesn't because it's",
    "start": "376320",
    "end": "381900"
  },
  {
    "text": "that guy that runs Network and Bob over there controls the firewall and Bob's on vacation",
    "start": "381900",
    "end": "388500"
  },
  {
    "text": "crap transport cost is zero which means that",
    "start": "388500",
    "end": "393660"
  },
  {
    "text": "it's the cost of putting this around and making sure that",
    "start": "393660",
    "end": "399120"
  },
  {
    "text": "this one's gets deployed here and this one gets deployed here we ignore that when we decide to go to microservices",
    "start": "399120",
    "end": "404880"
  },
  {
    "text": "we have to create an individual deploy scripts maintain them deploy them",
    "start": "404880",
    "end": "411120"
  },
  {
    "text": "and we also assume the network is homogeneous that everything looks the same everything can be treated the same which is often not the reality as well",
    "start": "411120",
    "end": "418500"
  },
  {
    "text": "so there are stuff in a distributed system that has to be",
    "start": "418500",
    "end": "425100"
  },
  {
    "text": "handled that you don't have in a system that is gathered in one block and these fallacies were created in the",
    "start": "425100",
    "end": "432300"
  },
  {
    "text": "90s like the previous Millennia century so you have to handle and have a bearing",
    "start": "432300",
    "end": "439259"
  },
  {
    "text": "on these things going down the microservice path now the other side doesn't seem as attractive either we",
    "start": "439259",
    "end": "444300"
  },
  {
    "text": "have this big ball of mud that everybody keeps warning that's a technical term by the way big ball of mud",
    "start": "444300",
    "end": "450479"
  },
  {
    "text": "every monolith will invariably dissolve into a big ball of mud or spaghetti code stuff like that the massive code files",
    "start": "450479",
    "end": "457680"
  },
  {
    "text": "everything's disorganized and so on and what we like to refer as to the Norwegian arm",
    "start": "457680",
    "end": "463259"
  },
  {
    "text": "does anyone had dinner with Norwegians where they just oh I want that things that I'm asking for they just stretch",
    "start": "463259",
    "end": "468360"
  },
  {
    "text": "over the table and grab it it's a thing that Norwegians do unfortunately",
    "start": "468360",
    "end": "474380"
  },
  {
    "text": "and so we have the Norwegian armor code where this part of the code goes oh that thing I'll just",
    "start": "474660",
    "end": "479759"
  },
  {
    "text": "touch myself to that and every change risk breaking a thousand things",
    "start": "479759",
    "end": "485880"
  },
  {
    "text": "so this is not a good place either there are limitations in the size and the",
    "start": "485880",
    "end": "492360"
  },
  {
    "text": "complexity in the monolith they're too large to fully understand",
    "start": "492360",
    "end": "497580"
  },
  {
    "text": "you can't grasp you can't keep the model within your head necessarily the size of it slows down the startup",
    "start": "497580",
    "end": "504419"
  },
  {
    "text": "time you have to play Everything at Once which might might not create problems",
    "start": "504419",
    "end": "509460"
  },
  {
    "text": "and very often the impact of A Change Is poorly understood and of course ever since everything is",
    "start": "509460",
    "end": "515820"
  },
  {
    "text": "in one application you're limited and adopting new technology because you can't necessarily do that without",
    "start": "515820",
    "end": "521279"
  },
  {
    "text": "changing everything these are problems that people bump into",
    "start": "521279",
    "end": "528200"
  },
  {
    "text": "and of course as something grows complexity grows we can't help that that is a law of nature even",
    "start": "528899",
    "end": "537480"
  },
  {
    "text": "entropy and all of that the problem with complexity is that as we introduce new bits to our",
    "start": "537480",
    "end": "544140"
  },
  {
    "text": "application we introduce new paths in our application new couplings in our application",
    "start": "544140",
    "end": "550620"
  },
  {
    "text": "and this number doesn't increase linearly increases exponentially",
    "start": "550620",
    "end": "555899"
  },
  {
    "text": "because each new thing has n a number of connections and the next one has n plus one number",
    "start": "555899",
    "end": "563100"
  },
  {
    "text": "of connections and so on and so forth so it it increases very fast suddenly",
    "start": "563100",
    "end": "568860"
  },
  {
    "text": "so it kind of hits a lot of people by surprise it's like oh she things are actually bad",
    "start": "568860",
    "end": "576180"
  },
  {
    "text": "suddenly bad",
    "start": "576180",
    "end": "579019"
  },
  {
    "text": "so what we need to do is introduce complexity dampening measures we need to",
    "start": "581880",
    "end": "587339"
  },
  {
    "text": "make sure that complexity is not allowed to grow uncontrollably but I have to keep it down a little bit",
    "start": "587339",
    "end": "594540"
  },
  {
    "text": "and the main reason for those problems in the monolith is that different parts are ill-organized",
    "start": "594540",
    "end": "600660"
  },
  {
    "text": "they are not clearly defined and after a while we get a pretty unmanageable amount of coupling",
    "start": "600660",
    "end": "606779"
  },
  {
    "text": "ref the Norwegian arms stretching all over the place what we need to do is box it",
    "start": "606779",
    "end": "613140"
  },
  {
    "text": "we need to make smaller and more contained boxes and limit their connections to other boxes",
    "start": "613140",
    "end": "618480"
  },
  {
    "text": "now this helps with a lot of problems a lot of the problems mentioned will start going away if you start doing this",
    "start": "618480",
    "end": "624480"
  },
  {
    "text": "properly provided they were reasonably smart when creating these boxes and here's the",
    "start": "624480",
    "end": "629940"
  },
  {
    "text": "kicker this actually takes some skill but we should be able to build boxes",
    "start": "629940",
    "end": "635399"
  },
  {
    "text": "that are small enough to fully understand and be independent",
    "start": "635399",
    "end": "641640"
  },
  {
    "text": "so that you can get by with understanding just that box to do some actual work",
    "start": "641640",
    "end": "649339"
  },
  {
    "text": "small enough to not have a lot of complexity small enough to understand the impact of",
    "start": "650760",
    "end": "656519"
  },
  {
    "text": "a change because we make some rules and some",
    "start": "656519",
    "end": "661680"
  },
  {
    "text": "good practices when we do this there's two measurements in our code that we want to control one is called",
    "start": "661680",
    "end": "667740"
  },
  {
    "text": "coupling how many hard couplings do you have in your application that is a number you want to keep low",
    "start": "667740",
    "end": "674880"
  },
  {
    "text": "especially on the level of the boxes",
    "start": "674880",
    "end": "679519"
  },
  {
    "text": "heard about the depend on abstractions not concrete implementations rule same thing here like don't depend have a",
    "start": "681360",
    "end": "688380"
  },
  {
    "text": "hard dependency on a box if you have to depend on a box make it a loose dependency",
    "start": "688380",
    "end": "694880"
  },
  {
    "text": "and the other one is cohesion that the Collision is a measurement of the things that belong together should",
    "start": "695220",
    "end": "701160"
  },
  {
    "text": "be together so things that are about the same thing that should be in the same box",
    "start": "701160",
    "end": "708440"
  },
  {
    "text": "we want to keep that number High so let's zoom in on a box and see what it might look like your box should have",
    "start": "708899",
    "end": "716700"
  },
  {
    "text": "a clear boundary it should be clear on what it communicates with other boxes",
    "start": "716700",
    "end": "723180"
  },
  {
    "text": "and what is internal stuff and not for you and so we make two and we make two",
    "start": "723180",
    "end": "729240"
  },
  {
    "text": "layers in our boxes we have the inner domain layer the core and if anyone has done anyone done",
    "start": "729240",
    "end": "736019"
  },
  {
    "text": "domain driven design stuff like that yeah a couple of few so this is your core domain objects",
    "start": "736019",
    "end": "741959"
  },
  {
    "text": "entities domain entities your bounded context this box",
    "start": "741959",
    "end": "748639"
  },
  {
    "text": "and the outer layer we call that our application layer the domain layer is 100 internal to our",
    "start": "748680",
    "end": "755519"
  },
  {
    "text": "box nothing from the internal domain layer goes outside the box",
    "start": "755519",
    "end": "761760"
  },
  {
    "text": "that is where we can do whatever we want as long as we're in that box we understand that domain that is where all",
    "start": "761760",
    "end": "767579"
  },
  {
    "text": "our business rules exist",
    "start": "767579",
    "end": "770959"
  },
  {
    "text": "this is where you put your entities your aggregate routes your value objects your domain services",
    "start": "773339",
    "end": "779040"
  },
  {
    "text": "all of the stuff that manipulates things that are within this box",
    "start": "779040",
    "end": "786500"
  },
  {
    "text": "change any change here is for a business reason the application layer decides how other",
    "start": "786959",
    "end": "793860"
  },
  {
    "text": "boxes or other or UI or other adapters or ports or whatever can communicate",
    "start": "793860",
    "end": "800040"
  },
  {
    "text": "with our domain for this we use application services and various data transfer objects dtos",
    "start": "800040",
    "end": "807180"
  },
  {
    "text": "specialized objects without Behavior just moving data back and forth these are services and objects that",
    "start": "807180",
    "end": "814800"
  },
  {
    "text": "other services or boxes can take dependencies on so we have our thing we have a thing in",
    "start": "814800",
    "end": "820800"
  },
  {
    "text": "our domain what it does is an important and in our",
    "start": "820800",
    "end": "826139"
  },
  {
    "text": "application will have a thing service and the thing service will return a thing dto a data transfer object",
    "start": "826139",
    "end": "834200"
  },
  {
    "text": "if another box wants to get a thing they can't do that not directly",
    "start": "834420",
    "end": "840240"
  },
  {
    "text": "or actually they can't do it at all another box or something outside our box will never get a thing",
    "start": "840240",
    "end": "847079"
  },
  {
    "text": "it would only get a thing detail you can only access the thing service",
    "start": "847079",
    "end": "852720"
  },
  {
    "text": "and ask questions say hey I would like I would like a thing with this idea and you'll get something",
    "start": "852720",
    "end": "858420"
  },
  {
    "text": "that the other part party can pretend is a thing but it's not really a thing it's",
    "start": "858420",
    "end": "863519"
  },
  {
    "text": "a representation of the thing customized for the thing service in this",
    "start": "863519",
    "end": "869399"
  },
  {
    "text": "case so here we control the surface of our box we control the part where the Box",
    "start": "869399",
    "end": "878880"
  },
  {
    "text": "how it talks to other entities this makes it a lot easier to manage the",
    "start": "878880",
    "end": "885360"
  },
  {
    "text": "complexity of application because now we don't have people taking hard dependencies on",
    "start": "885360",
    "end": "891060"
  },
  {
    "text": "our things so now we want to change stuff here for business reasons we can do that without",
    "start": "891060",
    "end": "896459"
  },
  {
    "text": "fear we can write tests for the things that are they're really easy to test because they don't have any dependencies not an",
    "start": "896459",
    "end": "903180"
  },
  {
    "text": "infrastructure not anything so the logic here becomes easy to test and the thing service has the",
    "start": "903180",
    "end": "909240"
  },
  {
    "text": "responsibility of probably getting some stuff from the database hydrating some objects",
    "start": "909240",
    "end": "916320"
  },
  {
    "text": "selecting some of it based on whatever question it got and then transforming that into a dto",
    "start": "916320",
    "end": "922440"
  },
  {
    "text": "and delivering it on so we can create these boxes for using",
    "start": "922440",
    "end": "930300"
  },
  {
    "text": "principles of domain driven design as subdomains or bone in context or whatever you want to help keep things",
    "start": "930300",
    "end": "936000"
  },
  {
    "text": "understandable one such box should be self-contained logic and data",
    "start": "936000",
    "end": "942180"
  },
  {
    "text": "you can reason about the domain in the Box in such in isolation",
    "start": "942180",
    "end": "947399"
  },
  {
    "text": "and you don't have to understand the other parts necessarily to understand what's what's going on here now boxes is",
    "start": "947399",
    "end": "953040"
  },
  {
    "text": "a really poor name for it in our application we call these things features",
    "start": "953040",
    "end": "958920"
  },
  {
    "text": "it's an arbitrary name you can pick whatever you want wouldn't that make sense to you and your team",
    "start": "958920",
    "end": "965220"
  },
  {
    "text": "context domains whatever it's not really that important what you call it but make a name and make it part of your",
    "start": "965220",
    "end": "971820"
  },
  {
    "text": "ubiquitous language so the old team knows when you're talking we're talking about a feature everyone in my team",
    "start": "971820",
    "end": "976920"
  },
  {
    "text": "understands what we're talking about so I'll be calling it features",
    "start": "976920",
    "end": "982920"
  },
  {
    "text": "now the communication boundary of a future should be treated like a",
    "start": "982920",
    "end": "988800"
  },
  {
    "text": "public API you should be wary of changing it because this if you change that you also",
    "start": "988800",
    "end": "995699"
  },
  {
    "text": "have to change whoever is depending on your your little thing",
    "start": "995699",
    "end": "1001060"
  },
  {
    "text": "now",
    "start": "1002000",
    "end": "1004540"
  },
  {
    "text": "changes are pretty easy though in a monolith that's one of the advantages of a monolith",
    "start": "1007339",
    "end": "1013399"
  },
  {
    "text": "so if I want to change the public API I can probably just use my refactoring tools in my editor and change whatever",
    "start": "1013399",
    "end": "1021079"
  },
  {
    "text": "is consuming it that is one of the advantages of starting out with the monolith when everything is in flux and you really",
    "start": "1021079",
    "end": "1026660"
  },
  {
    "text": "don't know how things are going to be changes are easy",
    "start": "1026660",
    "end": "1031900"
  },
  {
    "text": "you should be conscious of a change you should be conscious what the change might affect",
    "start": "1033319",
    "end": "1038839"
  },
  {
    "text": "but again in the model if you can get a very clear picture of what parts have a dependency on this thing",
    "start": "1038839",
    "end": "1044360"
  },
  {
    "text": "you can use tools in your IDE say who's that who's referencing this part who's calling this dto oh okay this one and",
    "start": "1044360",
    "end": "1051500"
  },
  {
    "text": "this one only these two and you can know that with a certainty unlike if you start making lots of",
    "start": "1051500",
    "end": "1057500"
  },
  {
    "text": "microservices becomes very unclear suddenly what is who's actually consuming what",
    "start": "1057500",
    "end": "1063159"
  },
  {
    "text": "external dependency should also be handled in your application layer insulated from your domain code",
    "start": "1063320",
    "end": "1071200"
  },
  {
    "text": "makes your domain code easier to test again so if your feature needs some stuff from another feature",
    "start": "1071240",
    "end": "1078559"
  },
  {
    "text": "it's the application service responsibility to get that and it uses the other features one of",
    "start": "1078559",
    "end": "1085160"
  },
  {
    "text": "those application services to get that data",
    "start": "1085160",
    "end": "1089200"
  },
  {
    "text": "now we're starting out with this it's tempting to have we have the thing and we have a thing service and said okay",
    "start": "1092179",
    "end": "1097340"
  },
  {
    "text": "everyone wants one of those you get a thing dto great this might be fine when things are small",
    "start": "1097340",
    "end": "1105500"
  },
  {
    "text": "but it's having a single thing service is probably not a good idea as you're growing because they get really large",
    "start": "1105500",
    "end": "1111679"
  },
  {
    "text": "and long and you have a bunch of concerns coming in and then when you have just a single thing dto",
    "start": "1111679",
    "end": "1118400"
  },
  {
    "text": "you're like okay maybe that's everything cannot be represented with the thing dto because then you have a thing less dto",
    "start": "1118400",
    "end": "1123980"
  },
  {
    "text": "and you have a thing select dto and you think this thing that video and maybe maybe not that's a good idea",
    "start": "1123980",
    "end": "1130520"
  },
  {
    "text": "so what we do is that we use case handlers instead",
    "start": "1130520",
    "end": "1136640"
  },
  {
    "text": "they look something like this I'll zoom in on the code don't bother reading it yet but that is the entire Handler",
    "start": "1136640",
    "end": "1144200"
  },
  {
    "text": "it has uh on the top it has a query object which is a query object sent into my my",
    "start": "1144200",
    "end": "1151520"
  },
  {
    "text": "hander and we're using mediator for this open source Library by Jamie Bogart who's",
    "start": "1151520",
    "end": "1157160"
  },
  {
    "text": "also here in the conference uh it's a model that suits us very well",
    "start": "1157160",
    "end": "1163280"
  },
  {
    "text": "it makes it easy to create small handlers with Associated requests and sometimes Associated response objects",
    "start": "1163280",
    "end": "1170720"
  },
  {
    "text": "are requests and response objects access detail classes and sometimes we have dto",
    "start": "1170720",
    "end": "1175820"
  },
  {
    "text": "classes acting as a response object depending on the the feature but each Handler can also have their",
    "start": "1175820",
    "end": "1182240"
  },
  {
    "text": "their own response class making that thing again that thing about sticking together",
    "start": "1182240",
    "end": "1187520"
  },
  {
    "text": "things that belong together should be together mediator pipelines also allow us to",
    "start": "1187520",
    "end": "1192799"
  },
  {
    "text": "attach pre and post Behavior to handlers putting cross-cutting concerns like logging authentication and",
    "start": "1192799",
    "end": "1199940"
  },
  {
    "text": "stuff like that outside the Handler this one has uh the query here has the",
    "start": "1199940",
    "end": "1205100"
  },
  {
    "text": "interface I require registered Vault user it's a macro interface that says any",
    "start": "1205100",
    "end": "1211400"
  },
  {
    "text": "request with that interface should also run this Behavior",
    "start": "1211400",
    "end": "1216980"
  },
  {
    "text": "and this Behavior the implementation isn't interesting but it will go in and it will make sure that there is for the",
    "start": "1216980",
    "end": "1222860"
  },
  {
    "text": "current logged on user there will be a vault user and it would be of the registered kind and it will create that",
    "start": "1222860",
    "end": "1228620"
  },
  {
    "text": "in the future if it needs to and back and forth so when it comes to the Handler here",
    "start": "1228620",
    "end": "1235039"
  },
  {
    "text": "which is this piece of code the query already has a pre-populated existing walk user ID and we can",
    "start": "1235039",
    "end": "1242059"
  },
  {
    "text": "guarantee that so this is the actual hander this stuff is easy to reason about",
    "start": "1242059",
    "end": "1247400"
  },
  {
    "text": "you can go in and see oh this this thing does that",
    "start": "1247400",
    "end": "1252799"
  },
  {
    "text": "of course we're using a bunch of things here that there's domain specific things here so if you're just reading it's like",
    "start": "1252799",
    "end": "1258320"
  },
  {
    "text": "okay what's that thing but for us who knows the domain it's super easy to work with",
    "start": "1258320",
    "end": "1264159"
  },
  {
    "text": "and this is a whole thing this is what we call a use case hander",
    "start": "1264200",
    "end": "1269500"
  },
  {
    "text": "this takes One Piece One use case this case is get",
    "start": "1269539",
    "end": "1275240"
  },
  {
    "text": "box I get my vault so we have a thing in our application called a vault and sometimes the user wants to get",
    "start": "1275240",
    "end": "1281780"
  },
  {
    "text": "their vault so we call this feature",
    "start": "1281780",
    "end": "1285880"
  },
  {
    "text": "get a vault ID here's the Handler that's it and we have multiple of these a whole bunch of these things",
    "start": "1286880",
    "end": "1293780"
  },
  {
    "text": "depending on each one has a use case each one has a request object each one has some kind of form of",
    "start": "1293780",
    "end": "1300440"
  },
  {
    "text": "response either a dto or in a in uh specialized request object",
    "start": "1300440",
    "end": "1308500"
  },
  {
    "text": "when a feature needs some information from another feature we still like to use a service over a",
    "start": "1313400",
    "end": "1319159"
  },
  {
    "text": "mediator Handler we use these Handler mostly when external features or external Services want us like the web",
    "start": "1319159",
    "end": "1326480"
  },
  {
    "text": "API the endpoints want to call into the domain into the box into the feature",
    "start": "1326480",
    "end": "1333980"
  },
  {
    "text": "because calling mediator pipelines for mediator pipelines is especially if you have behaviors leads",
    "start": "1333980",
    "end": "1341000"
  },
  {
    "text": "to weird results they'll sometimes run twice and stuff like that so calling another handle from another",
    "start": "1341000",
    "end": "1347059"
  },
  {
    "text": "Handler is not really recommended but still most of the coastal feature will be from",
    "start": "1347059",
    "end": "1353539"
  },
  {
    "text": "our endpoints it makes the test service really small and we can also have specialized task",
    "start": "1353539",
    "end": "1359539"
  },
  {
    "text": "services for different use cases in addition if not it can always be split up",
    "start": "1359539",
    "end": "1365919"
  },
  {
    "text": "and also talking about endpoints so if we have a feature",
    "start": "1367940",
    "end": "1373640"
  },
  {
    "text": "it will have a bunch of endpoints on the web in this case of where it's with an API",
    "start": "1373640",
    "end": "1378740"
  },
  {
    "text": "we have mostly an API server and we can pull the definition of those endpoints also into our feature",
    "start": "1378740",
    "end": "1386659"
  },
  {
    "text": "so in this case we're making a static extension class to the web application object in asp.net",
    "start": "1386659",
    "end": "1393679"
  },
  {
    "text": "and we add the endpoints and then in our",
    "start": "1393679",
    "end": "1399200"
  },
  {
    "text": "front-end file in our configuration file startup file we just add those for that feature",
    "start": "1399200",
    "end": "1405500"
  },
  {
    "text": "and we can do that with a lot of things so all the stuff that is relevant for the feature service registrations",
    "start": "1405500",
    "end": "1412039"
  },
  {
    "text": "mapping registrations endpoint mapping all kinds of",
    "start": "1412039",
    "end": "1417620"
  },
  {
    "text": "configuration that did this feature needs we can put that into the feature into the folder of the feature and keep",
    "start": "1417620",
    "end": "1423559"
  },
  {
    "text": "those things together and we can just add it from our program startup to configure it",
    "start": "1423559",
    "end": "1429080"
  },
  {
    "text": "saying hey here's this thing here's this feature call this line to configure it",
    "start": "1429080",
    "end": "1437440"
  },
  {
    "text": "and then by doing this we create modules within our monolith",
    "start": "1437960",
    "end": "1443480"
  },
  {
    "text": "so we get a modular monolith where this feature is a self-contained",
    "start": "1443480",
    "end": "1450320"
  },
  {
    "text": "as possible so you can go into the future we use conventions we have folder conventions",
    "start": "1450320",
    "end": "1456020"
  },
  {
    "text": "do whatever you want but we're using 4G folder conventions and",
    "start": "1456020",
    "end": "1462020"
  },
  {
    "text": "say okay so when we go into a feature I know what to expect to find there I know there will be a file for",
    "start": "1462020",
    "end": "1467960"
  },
  {
    "text": "configuration I know there will be a file for Service registration I know there will be a file for endpoints",
    "start": "1467960",
    "end": "1473179"
  },
  {
    "text": "I know there will be a folder for features I know there will be a folder for my domain I know that's where I'll find my",
    "start": "1473179",
    "end": "1479299"
  },
  {
    "text": "entities so going into any feature becomes",
    "start": "1479299",
    "end": "1484940"
  },
  {
    "text": "a much easier task than if we just had everything in one massive big ball of",
    "start": "1484940",
    "end": "1491059"
  },
  {
    "text": "mud so that's the point of this the monolith doesn't have to devolve into a",
    "start": "1491059",
    "end": "1497480"
  },
  {
    "text": "ball of mud it can be and doesn't have to devolve into spaghetti code it can be those little raviolis is that",
    "start": "1497480",
    "end": "1503840"
  },
  {
    "text": "what they're called little thing where you have a little piece of dough and you have the meat and everything inside and you wrap it up and",
    "start": "1503840",
    "end": "1510140"
  },
  {
    "text": "you stamp it together like small self-contained little piece so you have a bunch of those instead of",
    "start": "1510140",
    "end": "1516320"
  },
  {
    "text": "spaghetti where each one is has its own public surface you know what you're getting you",
    "start": "1516320",
    "end": "1523280"
  },
  {
    "text": "really don't know what's inside until you actually bite into it that could be funny",
    "start": "1523280",
    "end": "1529539"
  },
  {
    "text": "small touch and I have a friend in the U.S and they do Monday night footballs and they play chicken roulette",
    "start": "1529700",
    "end": "1535340"
  },
  {
    "text": "where they have fried chickens like chicken legs and one of them is injected with like those pepper sauce",
    "start": "1535340",
    "end": "1542299"
  },
  {
    "text": "the strongest sauce that can find whatever in whatever shop they go to and so the clue who gets it during the",
    "start": "1542299",
    "end": "1548480"
  },
  {
    "text": "night and takes a bite of it and the trick is not to show it of course they could fail",
    "start": "1548480",
    "end": "1553700"
  },
  {
    "text": "miserably on that so so by now you might be thinking that hey",
    "start": "1553700",
    "end": "1559640"
  },
  {
    "text": "we're treating our features almost like a microservice and that is absolutely right",
    "start": "1559640",
    "end": "1565580"
  },
  {
    "text": "we're taking some of the advantages of a microservice and implementing those in our modules",
    "start": "1565580",
    "end": "1571760"
  },
  {
    "text": "remember the things we said in the beginning microserver is highly maintainable yep if you do it this way",
    "start": "1571760",
    "end": "1576980"
  },
  {
    "text": "each feature is highly maintainable testable yep do it this way you the",
    "start": "1576980",
    "end": "1583820"
  },
  {
    "text": "domain will be highly testable we're taking we're enforcing some",
    "start": "1583820",
    "end": "1589940"
  },
  {
    "text": "constraints to parts of a monolith in the same way that we would have done",
    "start": "1589940",
    "end": "1595940"
  },
  {
    "text": "in a microservice",
    "start": "1595940",
    "end": "1598658"
  },
  {
    "text": "another characteristic of microservices that are completely autonomous even with their data",
    "start": "1601220",
    "end": "1608240"
  },
  {
    "text": "so how do we do this with our features like one database per feature seems excessive",
    "start": "1608240",
    "end": "1615140"
  },
  {
    "text": "well should every feature have its own database I I don't think so",
    "start": "1615140",
    "end": "1620960"
  },
  {
    "text": "maybe you should but it doesn't need to the important part is that our feature owns and controls their own data",
    "start": "1620960",
    "end": "1628940"
  },
  {
    "text": "so we need some way of doing that and most relational databases today which is what most people use",
    "start": "1628940",
    "end": "1636400"
  },
  {
    "text": "you can use what's called a schema which is a namespacing feature in a database",
    "start": "1636440",
    "end": "1643039"
  },
  {
    "text": "now most people when they go to database they just start creating tables and the old tables you create they're part of a",
    "start": "1643039",
    "end": "1648679"
  },
  {
    "text": "schema called dbo database owner but you can make your own schema",
    "start": "1648679",
    "end": "1655460"
  },
  {
    "text": "so for our vault feature we have a database schema called Vault",
    "start": "1655460",
    "end": "1660860"
  },
  {
    "text": "so we can have a table of Vault dot user in the database so we don't go select",
    "start": "1660860",
    "end": "1665900"
  },
  {
    "text": "start from user we go select start from vault.user and now we have a chat feature",
    "start": "1665900",
    "end": "1673039"
  },
  {
    "text": "and there we go select start from chat dot feature dot user",
    "start": "1673039",
    "end": "1678380"
  },
  {
    "text": "and so we get a name spacing in our database where we can have tables with the same",
    "start": "1678380",
    "end": "1683900"
  },
  {
    "text": "names but in different schemas",
    "start": "1683900",
    "end": "1687159"
  },
  {
    "text": "and they are not the same they can be completely different",
    "start": "1689179",
    "end": "1694580"
  },
  {
    "text": "now in our DB context we use Entity Framework but you can whatever you do you can",
    "start": "1694580",
    "end": "1699740"
  },
  {
    "text": "specify the schema in whichever way you want but in a deeper context we can specify",
    "start": "1699740",
    "end": "1705080"
  },
  {
    "text": "the default scheme of all the tables for that context we have a separate DB context for each feature",
    "start": "1705080",
    "end": "1713240"
  },
  {
    "text": "random framework so Entity Framework",
    "start": "1713240",
    "end": "1718940"
  },
  {
    "text": "has a DB context which controls access database all access goes through that every feature gets its own",
    "start": "1718940",
    "end": "1725419"
  },
  {
    "text": "which prevents us from overreaching prevents us from having one feature",
    "start": "1725419",
    "end": "1732200"
  },
  {
    "text": "reach in with its Norwegian arm into the database tables of another feature",
    "start": "1732200",
    "end": "1738279"
  },
  {
    "text": "we can do this by having like having for instance a base DB context this case we have a base deep in context",
    "start": "1739820",
    "end": "1746779"
  },
  {
    "text": "with a protected abstract string called schema and then we override the model on model",
    "start": "1746779",
    "end": "1752299"
  },
  {
    "text": "creating where we can set the default schema on this context on this model",
    "start": "1752299",
    "end": "1759500"
  },
  {
    "text": "and then on our vault context we just set the schema to return vault",
    "start": "1759500",
    "end": "1766480"
  },
  {
    "text": "and we also get an error for this if we don't override it because it's abstract so it needs to be overwritten",
    "start": "1767480",
    "end": "1773679"
  },
  {
    "text": "so that's part of falling into the pit of success and guiding our are program developers into that path",
    "start": "1774320",
    "end": "1782919"
  },
  {
    "text": "where hey if you're making a deeper context inherit from base DB context",
    "start": "1784100",
    "end": "1789620"
  },
  {
    "text": "oh and you need to set the schema oh great I'll set the schema okay done and now your context gets its own yes",
    "start": "1789620",
    "end": "1797559"
  },
  {
    "text": "no each feature so we have cases where",
    "start": "1800600",
    "end": "1806779"
  },
  {
    "text": "um similar domain objects so the question was do we have cases where domain objects appear in several features for",
    "start": "1806779",
    "end": "1814159"
  },
  {
    "text": "instance user yes and no we have user in different features but they're not the same",
    "start": "1814159",
    "end": "1820159"
  },
  {
    "text": "so Vault has its representation of a user and chat has its representation of a",
    "start": "1820159",
    "end": "1826700"
  },
  {
    "text": "user and they are different they have different concerns and they are involved involved independently",
    "start": "1826700",
    "end": "1834559"
  },
  {
    "text": "is it the same table no it's not so we have chat.user and we have walt.user tables",
    "start": "1834559",
    "end": "1840740"
  },
  {
    "text": "again they are different they have different things um Vault has a thing where we create",
    "start": "1840740",
    "end": "1848000"
  },
  {
    "text": "users that are sometimes registered with us sometimes not sometimes they're relations of our use our customers",
    "start": "1848000",
    "end": "1855679"
  },
  {
    "text": "while chat has uses that always our customers so they have there are different things",
    "start": "1855679",
    "end": "1862460"
  },
  {
    "text": "um why do we do that and that is not a pain to maintain sure and no",
    "start": "1862460",
    "end": "1869740"
  },
  {
    "text": "um because they only have a small slice of what they have the thing that is usually common is the user ID",
    "start": "1870140",
    "end": "1877039"
  },
  {
    "text": "and sometimes the name we keep the sometimes the name in the in the different tables and those can be",
    "start": "1877039",
    "end": "1883340"
  },
  {
    "text": "updated when we update the name of a user we use events I'll get to that in a minute",
    "start": "1883340",
    "end": "1888799"
  },
  {
    "text": "to make sure that different features update their local representation of a thing",
    "start": "1888799",
    "end": "1894820"
  },
  {
    "text": "and also summer if it's not doesn't exist the feature can often get the",
    "start": "1895399",
    "end": "1900919"
  },
  {
    "text": "information it needs from the logon information so user log user is logged on and they present a bunch of claims",
    "start": "1900919",
    "end": "1907880"
  },
  {
    "text": "and in that user principle we get is the user ID and is the username so we get that from there",
    "start": "1907880",
    "end": "1914120"
  },
  {
    "text": "but that's a another interesting point how do we integrate between features",
    "start": "1914120",
    "end": "1919520"
  },
  {
    "text": "so it said that we have services that talk to that we can commun extract information",
    "start": "1919520",
    "end": "1926960"
  },
  {
    "text": "from using our other features the other way we integrate is using events",
    "start": "1926960",
    "end": "1934899"
  },
  {
    "text": "so we use in-process events in the monolith",
    "start": "1935120",
    "end": "1940520"
  },
  {
    "text": "we use a feature where we have our",
    "start": "1940520",
    "end": "1945399"
  },
  {
    "text": "we have our domain objects can",
    "start": "1945980",
    "end": "1951620"
  },
  {
    "text": "create an event saying hey my the username change for instance in our identity feature",
    "start": "1951620",
    "end": "1958940"
  },
  {
    "text": "we can have we have the user which is the canonical representation of a user is the master date of user it has",
    "start": "1958940",
    "end": "1964700"
  },
  {
    "text": "it has all it is always right with regards to a user so if someone goes in and changes their",
    "start": "1964700",
    "end": "1971419"
  },
  {
    "text": "name which happens we get updates from the 40K stock and stuff like that",
    "start": "1971419",
    "end": "1977059"
  },
  {
    "text": "an event is created inside the domain object we put that in the collection it's a domain object",
    "start": "1977059",
    "end": "1983240"
  },
  {
    "text": "and then when you save stuff to database we go through event domain events on the object and then we emit those",
    "start": "1983240",
    "end": "1990740"
  },
  {
    "text": "through we use mediator animate those as notification if you look up clean architecture by uh",
    "start": "1990740",
    "end": "1997460"
  },
  {
    "text": "steveard Dallas online you'll see a nice implementation of implementation of that",
    "start": "1997460",
    "end": "2003700"
  },
  {
    "text": "and then we have in the different features that are interested in these things we have notification handlers",
    "start": "2003700",
    "end": "2010960"
  },
  {
    "text": "so in our vault and in our chat feature we would have a notification Handler",
    "start": "2010960",
    "end": "2017320"
  },
  {
    "text": "that would handle username changed event so the identity feature",
    "start": "2017320",
    "end": "2024399"
  },
  {
    "text": "change the username the user domain objects has the",
    "start": "2024399",
    "end": "2030100"
  },
  {
    "text": "knowledge that when I change what the name changes I will omit an event and when you store things in database",
    "start": "2030100",
    "end": "2036820"
  },
  {
    "text": "the event is published and then we have handlers in different",
    "start": "2036820",
    "end": "2042700"
  },
  {
    "text": "features that pick up that event",
    "start": "2042700",
    "end": "2046018"
  },
  {
    "text": "yes in one transaction no because we don't do cross transactions",
    "start": "2049300",
    "end": "2057339"
  },
  {
    "text": "across DB contexts so we use other mechanisms for transactions transaction I will get to",
    "start": "2057339",
    "end": "2063638"
  },
  {
    "text": "that transactions in a while when we go out yes",
    "start": "2063639",
    "end": "2068220"
  },
  {
    "text": "in theory and practice yes because when we hook up mediator when we start",
    "start": "2072639",
    "end": "2078580"
  },
  {
    "text": "mediator in the application start it will go through our code so the question was do we subscribe to events at",
    "start": "2078580",
    "end": "2084520"
  },
  {
    "text": "application start although this is in process so mediator will go through my",
    "start": "2084520",
    "end": "2090638"
  },
  {
    "text": "application to the through the assembly and find all the notification handlers and whatever event they handle",
    "start": "2090639",
    "end": "2098980"
  },
  {
    "text": "and it will make a map of that yes",
    "start": "2098980",
    "end": "2103980"
  },
  {
    "text": "so if I want to can I easily extract what will be called what I admitted event since it's a monolith I can right",
    "start": "2107500",
    "end": "2113680"
  },
  {
    "text": "click my event and say find references and I will get up all the places where",
    "start": "2113680",
    "end": "2119440"
  },
  {
    "text": "that event type is registered is uh referenced and I can see all the",
    "start": "2119440",
    "end": "2124480"
  },
  {
    "text": "notification handlers that reference this event so again one of the advantages of a monolith is that my ID IDE my editor",
    "start": "2124480",
    "end": "2132760"
  },
  {
    "text": "Visual Studio whatever you're using can work with me so we can easily show me where is this",
    "start": "2132760",
    "end": "2138460"
  },
  {
    "text": "event being used oh here here and here great if you want to change the event if I want to edit something",
    "start": "2138460",
    "end": "2145060"
  },
  {
    "text": "I can do that and I can change the handlers I can run my tests that I can commit everything and everything works",
    "start": "2145060",
    "end": "2150460"
  },
  {
    "text": "right away as for database transactions",
    "start": "2150460",
    "end": "2155560"
  },
  {
    "text": "we don't do cross-feature transactions because they're different DB contexts and every DB is a unit of work so it",
    "start": "2155560",
    "end": "2161500"
  },
  {
    "text": "wouldn't really work but doing database transactions across feature is",
    "start": "2161500",
    "end": "2167740"
  },
  {
    "text": "a bad idea anyway because it will bite you in the butt",
    "start": "2167740",
    "end": "2175200"
  },
  {
    "text": "it is better to lift that one step up and do the transactional handling in",
    "start": "2176260",
    "end": "2181839"
  },
  {
    "text": "your business logic and in some cases these events are not important",
    "start": "2181839",
    "end": "2187780"
  },
  {
    "text": "if they're lost in between it's like okay someone has a someone will complain that",
    "start": "2187780",
    "end": "2193599"
  },
  {
    "text": "hey my in the my name in the chat isn't the same as my name oh okay we'll fix that don't worry about it",
    "start": "2193599",
    "end": "2199660"
  },
  {
    "text": "for important events we we can use different ways of transmitting it like the outbox inbox pattern",
    "start": "2199660",
    "end": "2206500"
  },
  {
    "text": "which will work with transaction and we'll get we can get at least once guarantees",
    "start": "2206500",
    "end": "2212500"
  },
  {
    "text": "so check out the uh Ian Cooper had a talk about that yesterday",
    "start": "2212500",
    "end": "2218020"
  },
  {
    "text": "I think it was called I have the notes here somewhere it was called at least once it was on yesterday but you should",
    "start": "2218020",
    "end": "2224440"
  },
  {
    "text": "be able to find on YouTube finally look at yesterday's live stream it should be available in the slack",
    "start": "2224440",
    "end": "2230440"
  },
  {
    "text": "channel for room two and a room I can't remember which room it was finally on",
    "start": "2230440",
    "end": "2236020"
  },
  {
    "text": "this on the scheduler buddy and Cooper's talk is talks about exactly that how to do uh guaranteed",
    "start": "2236020",
    "end": "2243880"
  },
  {
    "text": "delivery of events at least once",
    "start": "2243880",
    "end": "2247559"
  },
  {
    "text": "um yeah so what's",
    "start": "2252220",
    "end": "2257740"
  },
  {
    "text": "now we have our clearly defined uh features we have their domain objects",
    "start": "2257740",
    "end": "2263800"
  },
  {
    "text": "their application Level handlers Services notification handlers all that stuff the external",
    "start": "2263800",
    "end": "2269800"
  },
  {
    "text": "communication is limited to pinpoint communication for that",
    "start": "2269800",
    "end": "2275020"
  },
  {
    "text": "particular service or via an event",
    "start": "2275020",
    "end": "2279359"
  },
  {
    "text": "so what's stopping our developers from just using the Norwegian arm because everything is in one application every",
    "start": "2280540",
    "end": "2287560"
  },
  {
    "text": "class is only one using statement away right so there's there's three ways you can do",
    "start": "2287560",
    "end": "2294040"
  },
  {
    "text": "this and you can trust your developers",
    "start": "2294040",
    "end": "2300880"
  },
  {
    "text": "and everybody's laughing like what an idiot trusting his Developers",
    "start": "2300880",
    "end": "2308220"
  },
  {
    "text": "I see you're a trusting bunch trust but verify",
    "start": "2308380",
    "end": "2314220"
  },
  {
    "text": "well we can and to some degree assume that we are all responsible adults",
    "start": "2315339",
    "end": "2320800"
  },
  {
    "text": "and we have routines in place for not people not doing Cowboy coding uh either",
    "start": "2320800",
    "end": "2326740"
  },
  {
    "text": "pair programming which is or code reviews and stuff like that and we can",
    "start": "2326740",
    "end": "2332200"
  },
  {
    "text": "have part definition of done that when people go through a code reel like okay let's just check that we don't",
    "start": "2332200",
    "end": "2338320"
  },
  {
    "text": "refer to namespaces that shouldn't be referred to we don't do cross feature communication stuff like that",
    "start": "2338320",
    "end": "2344500"
  },
  {
    "text": "but you know okay trust but verify like yes we trust people but people make mistakes",
    "start": "2344500",
    "end": "2350500"
  },
  {
    "text": "the other way is making different projects and limiting communication between",
    "start": "2350500",
    "end": "2357520"
  },
  {
    "text": "projects but that becomes a lot of projects so if you want to limit",
    "start": "2357520",
    "end": "2364119"
  },
  {
    "text": "who can talk to The Domain project then you have to make that all those",
    "start": "2364119",
    "end": "2370300"
  },
  {
    "text": "classes internal you put that in a project for that particular feature",
    "start": "2370300",
    "end": "2375339"
  },
  {
    "text": "so and those classes can only be accessed within those within that space",
    "start": "2375339",
    "end": "2381940"
  },
  {
    "text": "that works but you get a lot of projects there's a bunch of overhead with navigating a bunch of overhead with",
    "start": "2381940",
    "end": "2389140"
  },
  {
    "text": "building it goes at more projects to have the longer time your build takes the third option is using enforceable",
    "start": "2389140",
    "end": "2395859"
  },
  {
    "text": "rules in your code there's tools like NS depth con I think it is the depth cop",
    "start": "2395859",
    "end": "2402700"
  },
  {
    "text": "where you can set rules saying that these namespaces are allowed to talk to",
    "start": "2402700",
    "end": "2408460"
  },
  {
    "text": "these namespaces and everything else is not allowed or the other way around",
    "start": "2408460",
    "end": "2413740"
  },
  {
    "text": "so you can set rules which namespaces are allowed to communicate with which namespace",
    "start": "2413740",
    "end": "2418780"
  },
  {
    "text": "and if you're trying to communicate outside the scope of those rules you'll",
    "start": "2418780",
    "end": "2424119"
  },
  {
    "text": "get a build error your project won't compile it will fail",
    "start": "2424119",
    "end": "2429160"
  },
  {
    "text": "and this runs as a Roslyn analyzer so it works whenever you if you build on CI if",
    "start": "2429160",
    "end": "2434320"
  },
  {
    "text": "you build on computer you've built on command line it'll work either way",
    "start": "2434320",
    "end": "2438960"
  },
  {
    "text": "so that's and they also have a they have a nice feature where you can",
    "start": "2439480",
    "end": "2445000"
  },
  {
    "text": "um because when you do this you get a lot of errors but you can say if you introduce this in",
    "start": "2445000",
    "end": "2450339"
  },
  {
    "text": "existing projects like oh she but you can tell it to stop at a certain point like okay report",
    "start": "2450339",
    "end": "2457119"
  },
  {
    "text": "we have a hundred errors don't don't report anymore and then just when the number goes down",
    "start": "2457119",
    "end": "2462460"
  },
  {
    "text": "okay don't report more than 90. and you can keep going down so you can start strangling your thing little by little",
    "start": "2462460",
    "end": "2470619"
  },
  {
    "text": "so they have they've thought about that that when you introduce this your nothing will build",
    "start": "2470619",
    "end": "2476859"
  },
  {
    "text": "so you can you can limit you can say okay I don't want no I won't no errors and we'll keep fixing after a while yes",
    "start": "2476859",
    "end": "2483480"
  },
  {
    "text": "so there are parts of my domain or my my feature that are will be accessible to other features my dto objects my events",
    "start": "2487780",
    "end": "2497980"
  },
  {
    "text": "my services or their interfaces if one if I'm using interfaces so we'll have some stuff that will be",
    "start": "2497980",
    "end": "2504280"
  },
  {
    "text": "available for others to access that's my public API service",
    "start": "2504280",
    "end": "2509440"
  },
  {
    "text": "those are my services those are my endpoints those are my objects that will cross my boundary",
    "start": "2509440",
    "end": "2517300"
  },
  {
    "text": "so the point here isn't not to let anything in but the point is to be explicit about what is allowed and what",
    "start": "2517300",
    "end": "2522820"
  },
  {
    "text": "is not allowed so you can see you can see and use these",
    "start": "2522820",
    "end": "2528579"
  },
  {
    "text": "things but not these things these things are secret I will keep them safe keep it secret and these things yeah you can play with",
    "start": "2528579",
    "end": "2534640"
  },
  {
    "text": "those and I control that surface independently from the internals in here",
    "start": "2534640",
    "end": "2541559"
  },
  {
    "text": "so why well it's always weird when the ignition",
    "start": "2543640",
    "end": "2549339"
  },
  {
    "text": "comes like oh this thing's blowing up it looks fine",
    "start": "2549339",
    "end": "2555099"
  },
  {
    "text": "so why do we do this and I said well Bill and glorious monolith and carving it into",
    "start": "2555099",
    "end": "2560320"
  },
  {
    "text": "microservice we don't do this because we want microservices in the end we do this because this is creating good",
    "start": "2560320",
    "end": "2566680"
  },
  {
    "text": "software this is how you get maintainable software that is easy to build easy to",
    "start": "2566680",
    "end": "2574000"
  },
  {
    "text": "work with easy to test it's just good practice",
    "start": "2574000",
    "end": "2579700"
  },
  {
    "text": "to do it this way there are various ways of",
    "start": "2579700",
    "end": "2585520"
  },
  {
    "text": "uh or have names to do sort of the same thing vertical slice architecture",
    "start": "2585520",
    "end": "2592119"
  },
  {
    "text": "hexagonal architecture onion architecture clean architecture",
    "start": "2592119",
    "end": "2598300"
  },
  {
    "text": "they're all basically saying the same thing that okay make small defined features",
    "start": "2598300",
    "end": "2604480"
  },
  {
    "text": "make sure you have a core domain you have application Services wrapping this talking inwards and nothing talks",
    "start": "2604480",
    "end": "2611560"
  },
  {
    "text": "outwards but there are good reasons to go to microservices",
    "start": "2611560",
    "end": "2618960"
  },
  {
    "text": "it's not a stupid concept it's not wrong it's just usually wrong for you",
    "start": "2619060",
    "end": "2626400"
  },
  {
    "text": "and we have this thing in our business because oh Netflix does this thing so I need to do it news flash you're not",
    "start": "2628540",
    "end": "2634180"
  },
  {
    "text": "Netflix not in the first five to ten years at least",
    "start": "2634180",
    "end": "2639900"
  },
  {
    "text": "but there are valid reasons to use microservices",
    "start": "2640780",
    "end": "2645540"
  },
  {
    "text": "one of them is or distributed application which is a more a broader term microservice is a very specific",
    "start": "2646060",
    "end": "2651520"
  },
  {
    "text": "thing and and people get microservices wrong as well they build Nano Services instead of",
    "start": "2651520",
    "end": "2656800"
  },
  {
    "text": "micro services but that's a different matter but team topology is one microservices",
    "start": "2656800",
    "end": "2663520"
  },
  {
    "text": "as an organization scales marvelous don't really scale well with",
    "start": "2663520",
    "end": "2669700"
  },
  {
    "text": "an organization because what when an organization scales",
    "start": "2669700",
    "end": "2675040"
  },
  {
    "text": "you start splitting up in different teams and if you have a model if then you create dependent hard",
    "start": "2675040",
    "end": "2681040"
  },
  {
    "text": "dependencies between your teams because now this team is dependent on that theme for doing this thing and this",
    "start": "2681040",
    "end": "2687099"
  },
  {
    "text": "thing and we want to deploy this thing and we can't do that because these things people have something that want to get in before we do the supply and so",
    "start": "2687099",
    "end": "2692440"
  },
  {
    "text": "and so forth and that's annoying that creates friction in our day-to-day",
    "start": "2692440",
    "end": "2697960"
  },
  {
    "text": "work so splitting up parts of a Sim of our system",
    "start": "2697960",
    "end": "2703599"
  },
  {
    "text": "to manage completely by autonomous teams over there that could be a good way to scale",
    "start": "2703599",
    "end": "2709960"
  },
  {
    "text": "there's technical considerations parts of the application might after a while have different technical demands",
    "start": "2709960",
    "end": "2716140"
  },
  {
    "text": "than other parts we had one case where one part of application was dependent on locally",
    "start": "2716140",
    "end": "2721240"
  },
  {
    "text": "installed fonts because we were making PDFs it turns out that's hard to do in Azure",
    "start": "2721240",
    "end": "2728020"
  },
  {
    "text": "web Maps so we could carve off an application okay you can run over here you can",
    "start": "2728020",
    "end": "2734020"
  },
  {
    "text": "generate PDFs over here you're not running in Azure web app you're doing something else",
    "start": "2734020",
    "end": "2739140"
  },
  {
    "text": "we've had maybe a different language it's better for a particular purpose maybe one part of the application is",
    "start": "2739420",
    "end": "2744700"
  },
  {
    "text": "doing some machine learning maybe that should be in Python instead of C sharp maybe you want to create a rules engine",
    "start": "2744700",
    "end": "2749980"
  },
  {
    "text": "and hey I want to create this thing with F sharp which sure it can be in the same thing but maybe it should be a different",
    "start": "2749980",
    "end": "2755380"
  },
  {
    "text": "thing and separate on a Zone",
    "start": "2755380",
    "end": "2759240"
  },
  {
    "text": "so there can be technical considerations for taking this part and saying okay that's that's a separate thing",
    "start": "2760900",
    "end": "2766780"
  },
  {
    "text": "and you can also want to scale different parts individually one moment it can be cheaper to take one part and",
    "start": "2766780",
    "end": "2773319"
  },
  {
    "text": "scale that instead of scaling the whole thing yes you had a question",
    "start": "2773319",
    "end": "2779819"
  },
  {
    "text": "on our code base right now we've uh usually about five so we're a small we're a small team uh",
    "start": "2781619",
    "end": "2789280"
  },
  {
    "text": "we usually work in pairs but we're very well we communicate a lot",
    "start": "2789280",
    "end": "2794800"
  },
  {
    "text": "so for us it makes perfect sense to have a monolith as we're growing and we start getting",
    "start": "2794800",
    "end": "2801099"
  },
  {
    "text": "more teams then monolith might not make as much sense then we'll say okay this thing",
    "start": "2801099",
    "end": "2806619"
  },
  {
    "text": "goes off here this thing might go off here and we do that by doing this work we've",
    "start": "2806619",
    "end": "2812319"
  },
  {
    "text": "done we prepared for that so the work of splitting off of carving off a thing",
    "start": "2812319",
    "end": "2819160"
  },
  {
    "text": "now is that if you're not careful when you're making a distributed application",
    "start": "2819160",
    "end": "2825040"
  },
  {
    "text": "you're making a distributed monolith where you have all the same problems that a ball ball of mud have except you",
    "start": "2825040",
    "end": "2830500"
  },
  {
    "text": "have a network in between as well so that's kind of kind of sucky so then",
    "start": "2830500",
    "end": "2836140"
  },
  {
    "text": "you get the disadvantage of both sides and none of the advantages luckily for you you've been paying",
    "start": "2836140",
    "end": "2842079"
  },
  {
    "text": "attention so your application is ready for this",
    "start": "2842079",
    "end": "2847300"
  },
  {
    "text": "so this thing service we've been using from all the other services",
    "start": "2847300",
    "end": "2852880"
  },
  {
    "text": "we can change the implementation of that in our monolith",
    "start": "2852880",
    "end": "2857760"
  },
  {
    "text": "and we have our future it is pretty self-contained all the configuration is in the future we can take most of that",
    "start": "2857980",
    "end": "2865060"
  },
  {
    "text": "code copy it somewhere else into a new application plug it into the startup for the configuration boot it up we have",
    "start": "2865060",
    "end": "2871660"
  },
  {
    "text": "endpoints going and everything so now everything there is in one application it has its own database",
    "start": "2871660",
    "end": "2876880"
  },
  {
    "text": "not technically they can still use the same actual database server but it has a separate schema so it doesn't they don't",
    "start": "2876880",
    "end": "2883119"
  },
  {
    "text": "interfere with we don't integrate on the database level but if you want to we could take those",
    "start": "2883119",
    "end": "2889000"
  },
  {
    "text": "tables and move to a different database as well if we wanted to it wouldn't matter because nobody else should be using",
    "start": "2889000",
    "end": "2895480"
  },
  {
    "text": "those so that's mostly a copy paste job or a",
    "start": "2895480",
    "end": "2900700"
  },
  {
    "text": "move thing so the thing service back in our monolith now it becomes an interface",
    "start": "2900700",
    "end": "2907480"
  },
  {
    "text": "or a service that I can override the methods on and say hey when you're calling this",
    "start": "2907480",
    "end": "2914079"
  },
  {
    "text": "method I'm not calling my domain feature I'm doing a network call to the other servers instead",
    "start": "2914079",
    "end": "2921720"
  },
  {
    "text": "and then the rest of my application can continue to work maybe I want to use events instead I",
    "start": "2922119",
    "end": "2929020"
  },
  {
    "text": "want to use the inbox outbox pattern using events messaging reply channels and stuff like that I can still do that",
    "start": "2929020",
    "end": "2934780"
  },
  {
    "text": "in my think service I might want to rewrite some of the application the code that is using these",
    "start": "2934780",
    "end": "2941200"
  },
  {
    "text": "things but there will be a small surgical change",
    "start": "2941200",
    "end": "2947940"
  },
  {
    "text": "I need to fix the events so whatever events are happening that my application is interested in my future",
    "start": "2948040",
    "end": "2953560"
  },
  {
    "text": "is interested in or whatever app events my feature puts out I need to put those on",
    "start": "2953560",
    "end": "2959740"
  },
  {
    "text": "on events somewhere else I can use the inbox outbox pattern I can use message queue I can use event grid I",
    "start": "2959740",
    "end": "2967300"
  },
  {
    "text": "can use whatever I want just pick one but you need to make events Network capable so that's a job you have to do",
    "start": "2967300",
    "end": "2973900"
  },
  {
    "text": "when you carve out your first micro service but it's a very defined technical job",
    "start": "2973900",
    "end": "2980440"
  },
  {
    "text": "and once you've done it once you've done it for the rest so the complete adds a bit of complexity but",
    "start": "2980440",
    "end": "2986200"
  },
  {
    "text": "the complexity is fixed it's a one-time thing the biggest challenge is transactional",
    "start": "2986200",
    "end": "2992380"
  },
  {
    "text": "consistency so in your model if you might have depended on transactions in one way you",
    "start": "2992380",
    "end": "2999460"
  },
  {
    "text": "should not do that if you do it you're cheating because it shouldn't really be done across DB contexts",
    "start": "2999460",
    "end": "3004800"
  },
  {
    "text": "so transactions should be moved up as a business concern",
    "start": "3004800",
    "end": "3009839"
  },
  {
    "text": "is our transactions important for this and I'm doing these two things if I this one goes well and this one fails what",
    "start": "3009839",
    "end": "3016380"
  },
  {
    "text": "happens so you should take that into account when you're",
    "start": "3016380",
    "end": "3021839"
  },
  {
    "text": "building a monolith so again look at Ian Cooper's talk at",
    "start": "3021839",
    "end": "3028140"
  },
  {
    "text": "least once for how to do messaging between different parts of your application it works the same whether you're in a monolith or whether you have",
    "start": "3028140",
    "end": "3034319"
  },
  {
    "text": "a distributed system it doesn't really matter so in summary",
    "start": "3034319",
    "end": "3040140"
  },
  {
    "text": "starting a new application with distributed microservices that's playing this game on hard mode lots of work very little return at least",
    "start": "3040140",
    "end": "3046440"
  },
  {
    "text": "the beginning building a modular monolith will give you many the advantage of microservices",
    "start": "3046440",
    "end": "3051960"
  },
  {
    "text": "the good parts very few of the disadvantages all the fallacies that you need to think about",
    "start": "3051960",
    "end": "3058079"
  },
  {
    "text": "it requires some thinking requires some discipline a little bit of extra complexity in the beginning but that complexity is more or",
    "start": "3058079",
    "end": "3064440"
  },
  {
    "text": "less fixed it doesn't increase much more as much over time it's a little bit of infrastructure that just sits there",
    "start": "3064440",
    "end": "3072240"
  },
  {
    "text": "and force clear feature boundaries be very explicit about your give out",
    "start": "3072240",
    "end": "3077700"
  },
  {
    "text": "a new services for cross-feature communication or events or messaging lift your",
    "start": "3077700",
    "end": "3083400"
  },
  {
    "text": "transactions up and the point is not to build something ready to be carved into",
    "start": "3083400",
    "end": "3088500"
  },
  {
    "text": "a bunch of microservices the point is to make a maintainable glorious monolith",
    "start": "3088500",
    "end": "3095220"
  },
  {
    "text": "and it's perfectly okay for have multiple teams working on the same monolith it takes a little bit more",
    "start": "3095220",
    "end": "3100260"
  },
  {
    "text": "discipline but if you're thinking hey this is actually not as fun start carving bring out that carving",
    "start": "3100260",
    "end": "3106380"
  },
  {
    "text": "knife and slice along you have already created the seams to",
    "start": "3106380",
    "end": "3111660"
  },
  {
    "text": "cut Along by using your services using your public API so that's it if you have any questions",
    "start": "3111660",
    "end": "3117680"
  },
  {
    "text": "any more questions over there perhaps nope there's one",
    "start": "3117680",
    "end": "3124700"
  },
  {
    "text": "technically you can no you should not because then you then you're integrating on the database level and you really",
    "start": "3133619",
    "end": "3140460"
  },
  {
    "text": "shouldn't do that because then it makes it hard to say I want to move my this piece of data to a different database and then your life sucks",
    "start": "3140460",
    "end": "3148520"
  },
  {
    "text": "you could you have to make it manually uh because the DB context doesn't know about those things so if you really",
    "start": "3150960",
    "end": "3156480"
  },
  {
    "text": "wanted to you could but it would be better to not do it and rely on integration with events instead",
    "start": "3156480",
    "end": "3162839"
  },
  {
    "text": "because that would be a more maintainable solution yes",
    "start": "3162839",
    "end": "3169819"
  },
  {
    "text": "yes we have do you have separate migrations yes so HTTP context has the wrong migration which works out nice",
    "start": "3171300",
    "end": "3177059"
  },
  {
    "text": "because they don't they can perfectly coexist in the same database",
    "start": "3177059",
    "end": "3182059"
  },
  {
    "text": "yeah the migration table is common to all the entry framework has one common uh migration table but all the",
    "start": "3183800",
    "end": "3190380"
  },
  {
    "text": "migrations go in there they fit neatly if you want you can use uh",
    "start": "3190380",
    "end": "3196559"
  },
  {
    "text": "a convention for your naming so you can see which migration is what but it's not really a problem",
    "start": "3196559",
    "end": "3202700"
  },
  {
    "text": "oh back in there I can't see it goes with lights sorry",
    "start": "3203160",
    "end": "3207559"
  },
  {
    "text": "pretty much do it so uh",
    "start": "3215640",
    "end": "3219838"
  },
  {
    "text": "yeah so I'm CR I'm building my monolith as a bunch of services in a service",
    "start": "3226260",
    "end": "3232440"
  },
  {
    "text": "oriented architecture just wrapped in a monolith pretty much yeah",
    "start": "3232440",
    "end": "3238460"
  },
  {
    "text": "so problems with monoliths are the scaling Beyond a single machine and dependency is an operating system in",
    "start": "3252059",
    "end": "3258000"
  },
  {
    "text": "libraries uh yeah if those things become a problem for parts of your application that's when you carve things out in the",
    "start": "3258000",
    "end": "3263940"
  },
  {
    "text": "microservice uh scaling a monolith across machines is not really a problem",
    "start": "3263940",
    "end": "3269160"
  },
  {
    "text": "uh you just have to make sure that then that would be the same scaling microservice across machines for the",
    "start": "3269160",
    "end": "3274319"
  },
  {
    "text": "things that you need you'd have a distributed cache if you have that if you have a distributed memory database",
    "start": "3274319",
    "end": "3280500"
  },
  {
    "text": "behind stuff like that that would be this exact same thing there's no problem scaling a monolith horizontally",
    "start": "3280500",
    "end": "3287280"
  },
  {
    "text": "because we don't depend on internal state in in memory state",
    "start": "3287280",
    "end": "3294119"
  },
  {
    "text": "um as long as don't do that it's not really an issue",
    "start": "3294119",
    "end": "3298760"
  },
  {
    "text": "okay I'm running out of time I think oh question over there I got four",
    "start": "3299700",
    "end": "3305099"
  },
  {
    "text": "minutes left",
    "start": "3305099",
    "end": "3307520"
  },
  {
    "text": "so organizing folders versus organizing projects and advantages disadvantages with",
    "start": "3316619",
    "end": "3322800"
  },
  {
    "text": "deployment so with the monolith it's the plug in one go whether I have multiple projects or I",
    "start": "3322800",
    "end": "3328140"
  },
  {
    "text": "have everything in one project is still deployed in one go we have some projects so we have some we",
    "start": "3328140",
    "end": "3335280"
  },
  {
    "text": "split out a thing a couple of things in projects the way infrastructures separate projects stuff like that we",
    "start": "3335280",
    "end": "3340859"
  },
  {
    "text": "have a common project with some shared kernels that is we have some separate services so we have a common library",
    "start": "3340859",
    "end": "3347819"
  },
  {
    "text": "that is is among those things so any code that should be shared among application they should definitely be in",
    "start": "3347819",
    "end": "3354300"
  },
  {
    "text": "their own project but apart from that I like keeping things in folders instead of projects it's easy to reason about the build time",
    "start": "3354300",
    "end": "3362819"
  },
  {
    "text": "is slightly shorter and I find it easier to navigate but it's uh",
    "start": "3362819",
    "end": "3369300"
  },
  {
    "text": "it's a preference thing um you wouldn't deploy features",
    "start": "3369300",
    "end": "3376200"
  },
  {
    "text": "independently unless you're actually doing micro servers and that then you make a whole different project different solution different thing",
    "start": "3376200",
    "end": "3382800"
  },
  {
    "text": "so you wouldn't it doesn't make sense to make assemblies for deployment you might want to have assemblies to",
    "start": "3382800",
    "end": "3389040"
  },
  {
    "text": "enforce rules that this these things are turned with that project these things are termed with this project",
    "start": "3389040",
    "end": "3394680"
  },
  {
    "text": "but we're using not future flagging at the",
    "start": "3394680",
    "end": "3400200"
  },
  {
    "text": "moment but it would be perfectly fine to use feature flagging in in those things we",
    "start": "3400200",
    "end": "3405960"
  },
  {
    "text": "try to build small things and deploy as often as possible to production so we deploy a monolith multiple times a day",
    "start": "3405960",
    "end": "3412859"
  },
  {
    "text": "and that works fine we uh we deployed to Azure web apps we deployed to a staging slot and then it deploys there and puts",
    "start": "3412859",
    "end": "3420180"
  },
  {
    "text": "up and then we swap the slot so it's a zero downtime deployment",
    "start": "3420180",
    "end": "3425880"
  },
  {
    "text": "so whether it take if it takes two minutes or 30 seconds to deploy them on list we don't care it doesn't matter",
    "start": "3425880",
    "end": "3431520"
  },
  {
    "text": "for us yep any other questions",
    "start": "3431520",
    "end": "3437760"
  },
  {
    "text": "do you mind if we take a picture of you a lot there was actually a lot of people here",
    "start": "3437760",
    "end": "3443220"
  },
  {
    "text": "that's kind of cool",
    "start": "3443220",
    "end": "3445880"
  },
  {
    "text": "and over there I should be Edgar I could have a panorama thing going",
    "start": "3449520",
    "end": "3455000"
  },
  {
    "text": "so uh if you have any other questions I'll be here wrapping down my stuff I'll be available for a little bit and also",
    "start": "3455099",
    "end": "3460740"
  },
  {
    "text": "if I have one recommendation there's a uh if not the next session but the session afterwards there's a session on",
    "start": "3460740",
    "end": "3466680"
  },
  {
    "text": "mental strength and and with your instinct I really want to go see that because that is uh I think that's going to be a",
    "start": "3466680",
    "end": "3473099"
  },
  {
    "text": "special thing so I'd I'd suggest that one thank you",
    "start": "3473099",
    "end": "3479838"
  }
]