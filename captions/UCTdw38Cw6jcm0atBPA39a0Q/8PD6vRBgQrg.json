[
  {
    "text": "welcome to my talk a binary analysis of real world desktop apps with freedom",
    "start": "7400",
    "end": "12599"
  },
  {
    "text": "my name is Kyle ossinger I'm a senior security researcher at Cisco asig where",
    "start": "12599",
    "end": "17699"
  },
  {
    "text": "I take apart Cisco applications and find vulnerabilities um and I have a focus on binary binary",
    "start": "17699",
    "end": "24480"
  },
  {
    "text": "applications to an exploitation and my free time I like doing a lot of reverse engineering we don't really get a chance",
    "start": "24480",
    "end": "30420"
  },
  {
    "text": "at work since we mostly have source code um so I particularly focus on Automation",
    "start": "30420",
    "end": "36300"
  },
  {
    "text": "and finding new techniques and tooling to speed up finding vulnerabilities um",
    "start": "36300",
    "end": "41340"
  },
  {
    "text": "so one thing I've started using a lot of is Frida and I just wanted to go over a little bit of uh",
    "start": "41340",
    "end": "46920"
  },
  {
    "text": "like some Basics to get you started using fruit as well um because I think it's really a great",
    "start": "46920",
    "end": "53100"
  },
  {
    "text": "tool for digging deep into proprietary closed Source software so in this talk I'll go over what is",
    "start": "53100",
    "end": "59520"
  },
  {
    "text": "Frida why you want to use it I'll go a little bit over installation and Tool setup but I've sent a message that has",
    "start": "59520",
    "end": "65400"
  },
  {
    "text": "all the information about how to do that on your own as well and this talk should be recorded so you should be able to",
    "start": "65400",
    "end": "70439"
  },
  {
    "text": "follow along along later if you don't get a chance now um I'll also go over the basic usage of",
    "start": "70439",
    "end": "76260"
  },
  {
    "text": "Frida's tools that come with it such as free to trace um but then dig more into the Frida",
    "start": "76260",
    "end": "81299"
  },
  {
    "text": "Rebel and then scripting that Rebel with uh some Standalone JavaScript",
    "start": "81299",
    "end": "87240"
  },
  {
    "text": "um and we'll get a little bit more advanced as we go along with some incremental sort of discoveries of the",
    "start": "87240",
    "end": "92400"
  },
  {
    "text": "program that we're targeting and the function that we're looking at all right and then",
    "start": "92400",
    "end": "97560"
  },
  {
    "text": "I'll wrap up with some next steps you could use with the knowledge that you've gained",
    "start": "97560",
    "end": "103680"
  },
  {
    "text": "cool so what is Frida um so Frida is a dynamic binary instrumentation Tool uh",
    "start": "103680",
    "end": "109979"
  },
  {
    "text": "so I'll use the word instrument or instrumentation a lot throughout this work throughout this talk uh and what I",
    "start": "109979",
    "end": "115920"
  },
  {
    "text": "mean by that is essentially adding modifying or moving functionality and instructions at a certain level in the",
    "start": "115920",
    "end": "121439"
  },
  {
    "text": "program um and so there's a lot of other DVI tools out there I'll go over but",
    "start": "121439",
    "end": "127799"
  },
  {
    "text": "um Frida has bindings for Python node.jsc qml and Swift so you can get",
    "start": "127799",
    "end": "133500"
  },
  {
    "text": "started making tools with it with any of those um it's pretty easy to start it's got a",
    "start": "133500",
    "end": "139260"
  },
  {
    "text": "really well documented API that I also send a link for and that I'll also show a little bit during this",
    "start": "139260",
    "end": "145260"
  },
  {
    "text": "um it uh has features such as hooking functions and instructions by address or by symbol name you can perform basic",
    "start": "145260",
    "end": "152520"
  },
  {
    "text": "block and instruction level tracing and you can add instrumentation to uh programs at the instruction or uh",
    "start": "152520",
    "end": "160560"
  },
  {
    "text": "function level and you can even put C functions or",
    "start": "160560",
    "end": "165599"
  },
  {
    "text": "JavaScript functions into the program and they'll execute at the places that you specified",
    "start": "165599",
    "end": "171379"
  },
  {
    "text": "so all of this kind of makes it uh kind of like a Dev tools for Native programs",
    "start": "171379",
    "end": "178680"
  },
  {
    "text": "so why would you use it over other dbis so a lot of people that are really into",
    "start": "178680",
    "end": "184980"
  },
  {
    "text": "Dynamic binary instrumentation would say that food is not a true DBI um because there's some features that's missing so",
    "start": "184980",
    "end": "191340"
  },
  {
    "text": "like things like having events for modules that get loaded and being able to do things with those events",
    "start": "191340",
    "end": "198360"
  },
  {
    "text": "um doesn't have those I'm not sure exactly what else because I haven't dug much into Dynamo Rio or pin but I've",
    "start": "198360",
    "end": "204599"
  },
  {
    "text": "used them a little bit and from what I can gather the big difference between Frida and those is that while those",
    "start": "204599",
    "end": "212400"
  },
  {
    "text": "might be a little bit more robust they are really slow to get started on it it's really hard to prototype tools with",
    "start": "212400",
    "end": "219060"
  },
  {
    "text": "dynamoe on pin there's a lot of groundwork that you have to do to get things started with them",
    "start": "219060",
    "end": "225180"
  },
  {
    "text": "um and so Freedom makes it so that you can just very quickly like write a few lines to them working right away and be",
    "start": "225180",
    "end": "230340"
  },
  {
    "text": "like okay I think the idea has some some Merit to it I'm gonna go with this and and flesh out a tool for it",
    "start": "230340",
    "end": "236760"
  },
  {
    "text": "so another uh similar tool is like debugging like a debugger uh it's not",
    "start": "236760",
    "end": "242519"
  },
  {
    "text": "really Geared for automation though um it's more for stepping through the programs um then you could also just do your own",
    "start": "242519",
    "end": "249120"
  },
  {
    "text": "kind of uh Library injection if you want to put some debug statements into a",
    "start": "249120",
    "end": "254819"
  },
  {
    "text": "program but it's not very portable like if you write a shared object for Linux and then you try to drag that over to",
    "start": "254819",
    "end": "260579"
  },
  {
    "text": "Windows it's not going to be very easy to do that it's probably going to be a lot of specific Flags you have to enable",
    "start": "260579",
    "end": "266220"
  },
  {
    "text": "and defines um and uh",
    "start": "266220",
    "end": "271500"
  },
  {
    "text": "yeah just slower to develop generally and you won't have as much of a feature set available to you like right away",
    "start": "271500",
    "end": "279259"
  },
  {
    "text": "okay uh so I sent instructions for how to get things started with Frida on The Room 2 Channel",
    "start": "279300",
    "end": "285900"
  },
  {
    "text": "um but just to quickly like the most important thing is if you're on OS X you have to disable system Integrity",
    "start": "285900",
    "end": "291479"
  },
  {
    "text": "protection while you're doing it because that prevents uh processes from attaching to and injecting code into",
    "start": "291479",
    "end": "298440"
  },
  {
    "text": "other processes um so it's something where if you're you don't really want to do this on a laptop",
    "start": "298440",
    "end": "304259"
  },
  {
    "text": "that you care too much about uh like sensitive data um usually it's like you",
    "start": "304259",
    "end": "310020"
  },
  {
    "text": "turn this off do your testing and then turn it back on if that's the case or just use a test laptop",
    "start": "310020",
    "end": "315900"
  },
  {
    "text": "um I have some video instructions that I can pass along after the talk",
    "start": "315900",
    "end": "321180"
  },
  {
    "text": "um essentially it's just kind of to go along with this um so you can see what these functions look like in a disassembler",
    "start": "321180",
    "end": "328080"
  },
  {
    "text": "um and how you how that matches up to how you you would use them with Frida so if like once I send the archive later",
    "start": "328080",
    "end": "336000"
  },
  {
    "text": "on um in gidra you just basically import that with a restore project",
    "start": "336000",
    "end": "341120"
  },
  {
    "text": "menu item and I'll send that GAR file and it'll just basically import the",
    "start": "341120",
    "end": "347699"
  },
  {
    "text": "project from the address uh the target installation so uh you",
    "start": "347699",
    "end": "353280"
  },
  {
    "text": "know since about Cisco I'm constantly having to use WebEx and I tend to just go after any application that I",
    "start": "353280",
    "end": "360060"
  },
  {
    "text": "constantly have to use uh so um so WebEx was the natural option for",
    "start": "360060",
    "end": "365400"
  },
  {
    "text": "me I got permission from everyone to go over there's no vulnerabilities I'm discussing but",
    "start": "365400",
    "end": "370979"
  },
  {
    "text": "um basically it's an end-to-end encrypted messenger uh on it um and so it you can't peek at messages with",
    "start": "370979",
    "end": "378360"
  },
  {
    "text": "Wireshark or with with burp or anything like that um and so you have to like in order to",
    "start": "378360",
    "end": "384600"
  },
  {
    "text": "actually see the messages being sent to uh the other end you'd have to inject into the process and um get to the",
    "start": "384600",
    "end": "392340"
  },
  {
    "text": "message that way um and so that's what we'll kind of be doing with Frida we'll we'll look at the",
    "start": "392340",
    "end": "397440"
  },
  {
    "text": "messages before they're intend encrypted and then we can peek at those and tamper them whatever we want",
    "start": "397440",
    "end": "403919"
  },
  {
    "text": "um and uh yeah the slide here just uh if",
    "start": "403919",
    "end": "409500"
  },
  {
    "text": "you're going to be doing this stuff it's a good idea to have a tab open with uh JavaScript API for Frida just because",
    "start": "409500",
    "end": "414960"
  },
  {
    "text": "it's a really helpful uh resource all right so as a security researcher",
    "start": "414960",
    "end": "421440"
  },
  {
    "text": "when I'm looking at a program I always try to find interesting features that have that seem like they have a lot of",
    "start": "421440",
    "end": "427020"
  },
  {
    "text": "complexity they take a lot of user input they're probably doing a lot of things with that user input because that's where I find the most uh juicy bugs I",
    "start": "427020",
    "end": "434460"
  },
  {
    "text": "guess and so the natural place I went to First was the message processing so when",
    "start": "434460",
    "end": "441000"
  },
  {
    "text": "I go into the messenger I see that there's two different ways to format text there's uh the rich text formatting",
    "start": "441000",
    "end": "446580"
  },
  {
    "text": "and then there's markdown formatting and since markdown's a little bit newer to the program I decided I was going to dig",
    "start": "446580",
    "end": "453060"
  },
  {
    "text": "into that so I enabled that in the program and I started messing with it",
    "start": "453060",
    "end": "460500"
  },
  {
    "text": "with Frida so to get started and I'm hoping this works let's see",
    "start": "460500",
    "end": "466380"
  },
  {
    "text": "yeah okay um and let me make sure I can get back too",
    "start": "466380",
    "end": "473940"
  },
  {
    "text": "oh can I not return to my slides",
    "start": "473940",
    "end": "479280"
  },
  {
    "text": "I was stuck in the terminal forever um",
    "start": "479280",
    "end": "485160"
  },
  {
    "text": "I will figure that out anyways um for now uh to get started I'm gonna",
    "start": "485160",
    "end": "492419"
  },
  {
    "text": "make that a lot right there um is that visible for people or is that",
    "start": "492419",
    "end": "497940"
  },
  {
    "text": "good um okay so to get started uh basically",
    "start": "497940",
    "end": "503220"
  },
  {
    "text": "um I happen to know that this program uh some of the libraries have symbols enabled so it makes it a little bit",
    "start": "503220",
    "end": "508500"
  },
  {
    "text": "easier to mess with um and to debug and so I search for markdown",
    "start": "508500",
    "end": "516060"
  },
  {
    "text": "um with the dash s for symbol um flag and I put wild cards around it",
    "start": "516060",
    "end": "522300"
  },
  {
    "text": "so it should find any function that contains the word markdown in its name",
    "start": "522300",
    "end": "527640"
  },
  {
    "text": "and then the name of the function that I'm going to be um like testing",
    "start": "527640",
    "end": "533279"
  },
  {
    "text": "and so I have that running right now I have WebEx running um oh right through the trace",
    "start": "533279",
    "end": "541040"
  },
  {
    "text": "um and so it says the ambiguous name so a lot of these uh programs will have",
    "start": "541920",
    "end": "547380"
  },
  {
    "text": "multiple processes running because they have like a renderer and then they have um you know the actual main process so I'm",
    "start": "547380",
    "end": "554100"
  },
  {
    "text": "just going to try each one and see if it's got some interesting functions",
    "start": "554100",
    "end": "559320"
  },
  {
    "text": "okay it's got a ton of functions um all right so I'm gonna I guess you can't",
    "start": "559320",
    "end": "564959"
  },
  {
    "text": "see it it's a little hard to share all the different apps I have open but I have the WebEx app open I'm test I'm",
    "start": "564959",
    "end": "570360"
  },
  {
    "text": "sending a message right now just says hi um and you can see up at the top there that a bunch of output came out so",
    "start": "570360",
    "end": "577440"
  },
  {
    "text": "that's basically the output um from all the different hooks uh being",
    "start": "577440",
    "end": "583860"
  },
  {
    "text": "called on all the functions that are being hooked inside the program and so",
    "start": "583860",
    "end": "589560"
  },
  {
    "text": "uh that's a start and you can look at all those that were",
    "start": "589560",
    "end": "595560"
  },
  {
    "text": "created uh by looking in the handlers directory that Frida just created inside the current working directory",
    "start": "595560",
    "end": "601800"
  },
  {
    "text": "um so if we look in there we can see I created a bunch of directories based on shared objects that",
    "start": "601800",
    "end": "608700"
  },
  {
    "text": "are inside the the program and then the next to it is a Javascript file that",
    "start": "608700",
    "end": "614160"
  },
  {
    "text": "pertains to the function that was being hooked inside that Library um and so the one that interests me here",
    "start": "614160",
    "end": "619380"
  },
  {
    "text": "is this one looks interesting because uh it seems like it's marked down to",
    "start": "619380",
    "end": "624779"
  },
  {
    "text": "HTML it says so it sounds like it's something that's going to be taking markdown text turning it into html text",
    "start": "624779",
    "end": "630540"
  },
  {
    "text": "uh and so are taking the markdown object and turning it to HTML object so uh that",
    "start": "630540",
    "end": "637019"
  },
  {
    "text": "sounds interesting to me to me because there could be a lot of complexity there with turning one format into another",
    "start": "637019",
    "end": "642320"
  },
  {
    "text": "especially with HTML formatting and things like that um and so that's the one I decided to dig",
    "start": "642320",
    "end": "648480"
  },
  {
    "text": "into so to get rid of all these handlers I",
    "start": "648480",
    "end": "653700"
  },
  {
    "text": "don't care about I'm just gonna arm RF that and then um I'll rerun the free to trace",
    "start": "653700",
    "end": "659700"
  },
  {
    "text": "with a more specific markdown to HTML this should just create one Handler",
    "start": "659700",
    "end": "668839"
  },
  {
    "text": "and then uh",
    "start": "670380",
    "end": "673880"
  },
  {
    "text": "okay cool yeah we created the one Handler and then if I go back over here",
    "start": "676440",
    "end": "681600"
  },
  {
    "text": "I signed another high message I see two calls um so it calls it twice that's because",
    "start": "681600",
    "end": "688680"
  },
  {
    "text": "it's doing it's calling this when you are sending the function so it's it's converting your markdown to HTML I",
    "start": "688680",
    "end": "694440"
  },
  {
    "text": "believe when you're sending it and it's also converting it or calling this function when you're receiving a message",
    "start": "694440",
    "end": "700860"
  },
  {
    "text": "um it was a little strange but I I verified that by using the web client and sending a message to myself with",
    "start": "700860",
    "end": "706680"
  },
  {
    "text": "that and I saw that it only called it once so it seems like it's calling it on send and receive",
    "start": "706680",
    "end": "712200"
  },
  {
    "text": "all right cool so uh let me",
    "start": "712200",
    "end": "718079"
  },
  {
    "text": "see if I can get the demo Gods to let me have my presentation back there we go all right",
    "start": "718079",
    "end": "726300"
  },
  {
    "text": "um so it created all these Handler files as an aside if you if your target program doesn't have symbols you can",
    "start": "726300",
    "end": "733740"
  },
  {
    "text": "still hook exported functions with Dash I and the export name so like if you're",
    "start": "733740",
    "end": "739320"
  },
  {
    "text": "looking at a server and you know that it calls received you can do Dash I receive and it'll probably hook libc receive and",
    "start": "739320",
    "end": "746700"
  },
  {
    "text": "it'll show you output from that um you know create hook files for you for that uh also if you're using a",
    "start": "746700",
    "end": "752820"
  },
  {
    "text": "disassembler this is something I do all the time uh where I have a function a Target program that has no symbols uh or",
    "start": "752820",
    "end": "759240"
  },
  {
    "text": "anything like a giant program and uh but in my disassembler I found something",
    "start": "759240",
    "end": "764700"
  },
  {
    "text": "that looks interesting and I kind of understand what arguments it takes and so I just find the offset to that in the disassembler and give it the module bang",
    "start": "764700",
    "end": "772079"
  },
  {
    "text": "offset and it will hook it that way and you can start messing with it with Frida",
    "start": "772079",
    "end": "778339"
  },
  {
    "text": "all right um cool so inside the Handler file is",
    "start": "778860",
    "end": "786420"
  },
  {
    "text": "basically just a JavaScript object inside the object is two functions there's on enter that takes uh",
    "start": "786420",
    "end": "795540"
  },
  {
    "text": "basically it it captures the arguments that were sent to the function that's being hooked and then there's on leave",
    "start": "795540",
    "end": "801120"
  },
  {
    "text": "that captures the return value before it ends the function and so inside these functions you can",
    "start": "801120",
    "end": "807660"
  },
  {
    "text": "add any of your logic you want to do you can look at the arguments you can modify the arguments you can save values to the",
    "start": "807660",
    "end": "815040"
  },
  {
    "text": "this object and then reference them in the on leave object if that's something you need to do",
    "start": "815040",
    "end": "821060"
  },
  {
    "text": "um so one of the basic things we might want to do is just to get a back Trace so this is useful because uh if you're",
    "start": "822000",
    "end": "828839"
  },
  {
    "text": "looking at a proprietary software it helps give you some context of what's calling this function and things like",
    "start": "828839",
    "end": "834899"
  },
  {
    "text": "that um you're probably familiar with call Stacks um already but basically this is doing",
    "start": "834899",
    "end": "840360"
  },
  {
    "text": "the same idea so you can do thread.backtrace um these constants are all explained in the",
    "start": "840360",
    "end": "848040"
  },
  {
    "text": "JavaScript API it's pretty well documented um but basically it just needs a context object which is always",
    "start": "848040",
    "end": "854040"
  },
  {
    "text": "going to be in this dot context in the on enter function and then backtracer.accurate is the default if",
    "start": "854040",
    "end": "859920"
  },
  {
    "text": "you leave that out it's just gonna put that in anyways um",
    "start": "859920",
    "end": "865560"
  },
  {
    "text": "and so then I'm going to map debug symbol. from address to get this is just going to basically get the uh debug",
    "start": "865560",
    "end": "872519"
  },
  {
    "text": "symbol name for the address in the call stack so it's going to symbolize all those all those addresses",
    "start": "872519",
    "end": "879420"
  },
  {
    "text": "and then just make it look better with a join uh with a new line so",
    "start": "879420",
    "end": "886620"
  },
  {
    "text": "I'll do that real quick so if you see uh",
    "start": "886620",
    "end": "892760"
  },
  {
    "text": "in this oh sorry um in the handlers",
    "start": "892800",
    "end": "899480"
  },
  {
    "text": "go into here and this is the default handle that it created for me it's just like a",
    "start": "899820",
    "end": "905880"
  },
  {
    "text": "log statement showing the name of the function um I can add a log here that's doing",
    "start": "905880",
    "end": "913139"
  },
  {
    "text": "um the back Tracer or thread that back Trace",
    "start": "913139",
    "end": "919980"
  },
  {
    "text": "this.contacts",
    "start": "919980",
    "end": "922980"
  },
  {
    "text": "after it and",
    "start": "926100",
    "end": "932220"
  },
  {
    "text": "see what that looks like",
    "start": "932220",
    "end": "935300"
  },
  {
    "text": "make sure this is",
    "start": "939440",
    "end": "943100"
  },
  {
    "text": "okay and so now if I send a message in the Target app",
    "start": "958639",
    "end": "963959"
  },
  {
    "text": "uh now I see this long list of pointers and so that's basically the call stack",
    "start": "963959",
    "end": "971160"
  },
  {
    "text": "uh and like I was saying you can just go up back to the Handler here",
    "start": "971160",
    "end": "977820"
  },
  {
    "text": "map debug symbol from address",
    "start": "977820",
    "end": "985399"
  },
  {
    "text": "my head doesn't turn that far okay um",
    "start": "985399",
    "end": "992000"
  },
  {
    "text": "all right and then that's the high again and now you see so like it's kind of nice that the the rebel for Frida is",
    "start": "994560",
    "end": "1000320"
  },
  {
    "text": "just like automatically updating so when I'm changing that file it automatically adds the changes here so now",
    "start": "1000320",
    "end": "1006139"
  },
  {
    "text": "um looking",
    "start": "1006139",
    "end": "1009639"
  },
  {
    "text": "all right back here",
    "start": "1011899",
    "end": "1015699"
  },
  {
    "text": "we can see all the different functions that are",
    "start": "1016940",
    "end": "1024079"
  },
  {
    "text": "being called or that uh basically the functions are called markdown to HTML starting so like this is the markdown to",
    "start": "1024079",
    "end": "1030438"
  },
  {
    "text": "HTML call and then after this this is what called that and called that we called that and so on it's a call stack so that can help me",
    "start": "1030439",
    "end": "1037160"
  },
  {
    "text": "figure out if I'm hooking the right function or if there's something farther up the call stack I should probably be hooking because this is like a little",
    "start": "1037160",
    "end": "1043880"
  },
  {
    "text": "bit too too far down um",
    "start": "1043880",
    "end": "1048579"
  },
  {
    "text": "so another thing we can do is use the Frida Rebel so instead of using three to",
    "start": "1056080",
    "end": "1062120"
  },
  {
    "text": "trace to generate hooks we can just kind of try out API functions here so this is",
    "start": "1062120",
    "end": "1067940"
  },
  {
    "text": "good for learning how things work with Frida so you can go down here and instead of doing free",
    "start": "1067940",
    "end": "1074360"
  },
  {
    "text": "to trace you use the same pin and just do Frida and uh now you're just dropped into a",
    "start": "1074360",
    "end": "1080720"
  },
  {
    "text": "rebel interface and it has autocomplete so you can just try things out",
    "start": "1080720",
    "end": "1086480"
  },
  {
    "text": "um so one thing you might want to try is like uh I don't know debug symbol dot",
    "start": "1086480",
    "end": "1092480"
  },
  {
    "text": "find functions matching and we can kind of get the same functionality that uh",
    "start": "1092480",
    "end": "1098539"
  },
  {
    "text": "through the trace was doing here by doing this so this will find any debug symbols that",
    "start": "1098539",
    "end": "1105860"
  },
  {
    "text": "have names matching that glob and so it'll kind of spit out anything it found there",
    "start": "1105860",
    "end": "1112940"
  },
  {
    "text": "as a list",
    "start": "1112940",
    "end": "1115720"
  },
  {
    "text": "sometimes it takes a little bit um",
    "start": "1118960",
    "end": "1124179"
  },
  {
    "text": "okay cool um yeah so there's the address of the function that we're interested in",
    "start": "1127400",
    "end": "1135279"
  },
  {
    "text": "all right so it's really good for just trying out API functions that you're not really familiar with how they work",
    "start": "1139400",
    "end": "1146240"
  },
  {
    "text": "um so outside of that uh there's Standalone scripting so",
    "start": "1146240",
    "end": "1151760"
  },
  {
    "text": "this is essentially just automating the rebel um and this allows you also to make some",
    "start": "1151760",
    "end": "1158240"
  },
  {
    "text": "more powerful tooling so uh the free to trace is kind of constricting you to being inside of a hook and so you you",
    "start": "1158240",
    "end": "1164900"
  },
  {
    "text": "can only do things that are inside that on enter on leave functions the Standalone scripting lets you do things",
    "start": "1164900",
    "end": "1171080"
  },
  {
    "text": "outside of those so for instance you can Define functions like you can take an",
    "start": "1171080",
    "end": "1178640"
  },
  {
    "text": "address of the program like say you found some function you're interested in and you want to call that function you",
    "start": "1178640",
    "end": "1185000"
  },
  {
    "text": "can actually Define that as a native function inside the JavaScript and then call that separately So like",
    "start": "1185000",
    "end": "1192020"
  },
  {
    "text": "um it might be useful for things like fuzzing where you can uh Define the function you're interested",
    "start": "1192020",
    "end": "1198020"
  },
  {
    "text": "in fuzzing and then call that over and over again with different inputs from Frida",
    "start": "1198020",
    "end": "1203419"
  },
  {
    "text": "um so it uh it's basically the first step in making a standalone Tool uh you can",
    "start": "1203419",
    "end": "1208880"
  },
  {
    "text": "even instrument basic block uh and instructions with it uh and you can make",
    "start": "1208880",
    "end": "1213980"
  },
  {
    "text": "things faster by uh there's a c module API inside of Frida that lets you",
    "start": "1213980",
    "end": "1219200"
  },
  {
    "text": "instead of making JavaScript hooks you can actually make a c based hook to speed things up so there's a little bit",
    "start": "1219200",
    "end": "1225799"
  },
  {
    "text": "of like craziness going on with like injecting JavaScript that also injects C that also it's like lots of onions but",
    "start": "1225799",
    "end": "1232880"
  },
  {
    "text": "um it definitely helps with performance on those hot hooks um so let's as an exercise let's",
    "start": "1232880",
    "end": "1240020"
  },
  {
    "text": "re-implement free to trace uh using the Standalone script so uh with",
    "start": "1240020",
    "end": "1245299"
  },
  {
    "text": "the free.api there's this object called Interceptor and the Interceptor",
    "start": "1245299",
    "end": "1250640"
  },
  {
    "text": "influence attach and replace and attach is basically doing the same thing the free that Trace was doing where it's",
    "start": "1250640",
    "end": "1256880"
  },
  {
    "text": "creating an object that has an on-enter and an on leave Hooks and replace is",
    "start": "1256880",
    "end": "1263179"
  },
  {
    "text": "doing something a little stranger where it you can actually replace a function like at the address that it's usually",
    "start": "1263179",
    "end": "1270140"
  },
  {
    "text": "loaded at with a JavaScript function or with a c module function and so this is",
    "start": "1270140",
    "end": "1276440"
  },
  {
    "text": "useful as a security researcher when I'm going after some program that it has a",
    "start": "1276440",
    "end": "1281960"
  },
  {
    "text": "lot of client-side checking and it's saying oh no like I'm like I'm totally protecting the server by saying uh not",
    "start": "1281960",
    "end": "1287660"
  },
  {
    "text": "allowing the user to send this data with their messages and I just replace that with a no op or replace it with",
    "start": "1287660",
    "end": "1294380"
  },
  {
    "text": "something that gives me back the same string that I sent it instead of removing things",
    "start": "1294380",
    "end": "1300460"
  },
  {
    "text": "um and so that would look like this like this is this is basically free to trace as a standalone program so you can see",
    "start": "1301340",
    "end": "1308000"
  },
  {
    "text": "lets Sim equals is like Sim is going to have the address to mark down to HTML",
    "start": "1308000",
    "end": "1313340"
  },
  {
    "text": "function um and then we're passing that address to interceptor.attach and then giving it",
    "start": "1313340",
    "end": "1319159"
  },
  {
    "text": "the object that has on enter and on these functions um",
    "start": "1319159",
    "end": "1325760"
  },
  {
    "text": "yeah and so um one thing we might want to try is uh",
    "start": "1325760",
    "end": "1331280"
  },
  {
    "text": "now that we've gotten the functions that called our Target function we can also",
    "start": "1331280",
    "end": "1336559"
  },
  {
    "text": "see what functions our Target function calls and so this can be useful for things like if you know that somewhere",
    "start": "1336559",
    "end": "1342679"
  },
  {
    "text": "in your function they're doing some sort of uh sanitization of your user input you can find those calls and then uh you",
    "start": "1342679",
    "end": "1351320"
  },
  {
    "text": "know not knob them out basically um and so here we use a powerful module",
    "start": "1351320",
    "end": "1357380"
  },
  {
    "text": "called stalker uh the in the Frida API where you can it's it's an",
    "start": "1357380",
    "end": "1362539"
  },
  {
    "text": "instrumentation library and you can use it to do code tracing so you give it the",
    "start": "1362539",
    "end": "1369559"
  },
  {
    "text": "thread ID in in this case I'm doing it inside of a hook so uh inside the hook I'm telling it to start tracing at the",
    "start": "1369559",
    "end": "1376400"
  },
  {
    "text": "beginning of the function um and basically it has the events there",
    "start": "1376400",
    "end": "1382880"
  },
  {
    "text": "that where you specify what kind of events you care about during the code tracing so there's all sorts of",
    "start": "1382880",
    "end": "1388640"
  },
  {
    "text": "different events but we're only concerned with all the calls that the function is making so anytime a call",
    "start": "1388640",
    "end": "1393679"
  },
  {
    "text": "happens it's going to report back and then we have an on-call summary function that we specify here that will take a",
    "start": "1393679",
    "end": "1401179"
  },
  {
    "text": "summary object that just has um the address of what was called as the",
    "start": "1401179",
    "end": "1407600"
  },
  {
    "text": "key and then as the value it has how many times it was called so that can be",
    "start": "1407600",
    "end": "1412880"
  },
  {
    "text": "also useful if you're trying to trace down performance issues for instance um and so I'm just using json.stringify",
    "start": "1412880",
    "end": "1420620"
  },
  {
    "text": "to show those right now I'll see if I can",
    "start": "1420620",
    "end": "1425659"
  },
  {
    "text": "bring that up [Music]",
    "start": "1425659",
    "end": "1430869"
  },
  {
    "text": "yeah so this is kind of what that looks like here just like in my slide um except I'm going to do something",
    "start": "1443059",
    "end": "1449780"
  },
  {
    "text": "different here actually instead of using uh Json at stringify I'm I don't care too much about how many",
    "start": "1449780",
    "end": "1455539"
  },
  {
    "text": "times each function was called but I just care about the names of the functions and so I just have it uh",
    "start": "1455539",
    "end": "1461600"
  },
  {
    "text": "spitting out the names of each function that was called and so now when I back in the WebEx app",
    "start": "1461600",
    "end": "1467299"
  },
  {
    "text": "when I send another message you can see now it's putting out what",
    "start": "1467299",
    "end": "1472640"
  },
  {
    "text": "functions were called from the target function okay",
    "start": "1472640",
    "end": "1479679"
  },
  {
    "text": "yeah so um you can see it's doing a lot of HTML parsing here it's using cmark",
    "start": "1483140",
    "end": "1488840"
  },
  {
    "text": "Houdini to escape HTML um so that might be something I want to knop out at some point",
    "start": "1488840",
    "end": "1494960"
  },
  {
    "text": "um so just it gives you some ideas when you're looking at a Target function",
    "start": "1494960",
    "end": "1501760"
  },
  {
    "text": "uh and it's really important also um that when you're using stalker inside of",
    "start": "1502820",
    "end": "1507980"
  },
  {
    "text": "a hook like this that you call unfollow at the on leave function because otherwise this is just going to keep",
    "start": "1507980",
    "end": "1513740"
  },
  {
    "text": "code tracing uh forever even after the hook is done and then if the hook is called again it'll start following again",
    "start": "1513740",
    "end": "1519679"
  },
  {
    "text": "they'll be probably a race condition or something it's probably just gonna crash um",
    "start": "1519679",
    "end": "1524779"
  },
  {
    "text": "so I mentioned that the events there's a few different types of events besides call there's ret for Anytime a rut is",
    "start": "1524779",
    "end": "1531440"
  },
  {
    "text": "encountered it's just going to report back there's exec which is really noisy",
    "start": "1531440",
    "end": "1536779"
  },
  {
    "text": "um it uh every single instruction that happens it's going to report back about",
    "start": "1536779",
    "end": "1541880"
  },
  {
    "text": "the instruction um there's block which is useful for fuzzing so you can say",
    "start": "1541880",
    "end": "1547880"
  },
  {
    "text": "um every time a basic block is encountered I want to know uh I want to",
    "start": "1547880",
    "end": "1553279"
  },
  {
    "text": "know about it and where it happened and stuff like that so you can do things like with AFL um you can",
    "start": "1553279",
    "end": "1559460"
  },
  {
    "text": "basically keep track of coverage like that and there's also compile so I mentioned",
    "start": "1559460",
    "end": "1566179"
  },
  {
    "text": "that stalker is an instrumentation engine um so the way it's kind of working is every time it encounters a new basic",
    "start": "1566179",
    "end": "1572059"
  },
  {
    "text": "block instead of just execute letting the basic block execute it copies the instructions over",
    "start": "1572059",
    "end": "1577760"
  },
  {
    "text": "um to like kind of a shadow um basic lock like a new basic block uh",
    "start": "1577760",
    "end": "1582980"
  },
  {
    "text": "and any instrumentation it needs to add it adds to that and then it jumps to that new instrument to basic block",
    "start": "1582980",
    "end": "1588500"
  },
  {
    "text": "instead of the original one um and so this compile event is basically saying let me know when a new",
    "start": "1588500",
    "end": "1595279"
  },
  {
    "text": "basic block is encountered and when the instrumentation is taking effect um and so that that can be useful for",
    "start": "1595279",
    "end": "1601279"
  },
  {
    "text": "coverage data so like if you're just trying to see um what basic blocks were hit at all",
    "start": "1601279",
    "end": "1606440"
  },
  {
    "text": "this is going to show you on each first time a basic block is hit it'll let you know",
    "start": "1606440",
    "end": "1612320"
  },
  {
    "text": "um and one of the most powerful things with stalker is the transform function so uh transform lets you control the",
    "start": "1612320",
    "end": "1618919"
  },
  {
    "text": "instrumentation uh that stalker does so it gives you an iterator um for instructions and so you can go",
    "start": "1618919",
    "end": "1625460"
  },
  {
    "text": "through each instruction and do things like oh if it's a call then do this if it's a jump do this like you can change",
    "start": "1625460",
    "end": "1632000"
  },
  {
    "text": "instructions you can add instructions you can remove instructions uh all that and so it just really",
    "start": "1632000",
    "end": "1638539"
  },
  {
    "text": "um is very powerful um it's a lot faster than doing things like like there's like it's a lot faster",
    "start": "1638539",
    "end": "1645500"
  },
  {
    "text": "than hooks for example like um there's an implementation of an AFL fuzzer",
    "start": "1645500",
    "end": "1651200"
  },
  {
    "text": "um written with Frida and they basically use this to push instructions into each",
    "start": "1651200",
    "end": "1656240"
  },
  {
    "text": "basic block that keep track of uh what basic block was hit before this and what",
    "start": "1656240",
    "end": "1661820"
  },
  {
    "text": "basic block address this is and keeps track of the map of coverage inside the program",
    "start": "1661820",
    "end": "1668480"
  },
  {
    "text": "uh yeah it's definitely my favorite part uh Frida um",
    "start": "1668480",
    "end": "1673880"
  },
  {
    "text": "yeah and so the next step I think so look now that we've got call Stacks and we've got call traces from the function",
    "start": "1673880",
    "end": "1680539"
  },
  {
    "text": "into the function the next thing I'd want to do is look at what arguments are being sent to the function and what",
    "start": "1680539",
    "end": "1686179"
  },
  {
    "text": "kinds of arguments and if we can control those and look at them or change them whatever",
    "start": "1686179",
    "end": "1691340"
  },
  {
    "text": "um so that's something I'll do next so",
    "start": "1691340",
    "end": "1699100"
  },
  {
    "text": "foreign",
    "start": "1700640",
    "end": "1703640"
  },
  {
    "text": "so if we look at handlers uh if we look at the Handler we can see",
    "start": "1705860",
    "end": "1711559"
  },
  {
    "text": "um up at the top there hopefully this is visible I'll highlight it to hopefully make it more visible the",
    "start": "1711559",
    "end": "1718220"
  },
  {
    "text": "type of argument it's taking is uh standard basic string it essentially",
    "start": "1718220",
    "end": "1724039"
  },
  {
    "text": "seems like it's a standard string or basic string in C plus",
    "start": "1724039",
    "end": "1729799"
  },
  {
    "text": "um and let's see if I can bring this over um",
    "start": "1729799",
    "end": "1734900"
  },
  {
    "text": "so if we wanted to I guess I can't bring that over",
    "start": "1734900",
    "end": "1740480"
  },
  {
    "text": "um so basically when I'm looking at how to get things out of objects that I",
    "start": "1740480",
    "end": "1746059"
  },
  {
    "text": "don't have uh easy ways of doing that with like I can't just take the string object and say like uh read it like a C",
    "start": "1746059",
    "end": "1752120"
  },
  {
    "text": "string because it's not going to work because it's a standard string in C plus is implemented a lot differently",
    "start": "1752120",
    "end": "1757340"
  },
  {
    "text": "um so what I do is I go to cppreference.com or anywhere like that and look up the member functions and",
    "start": "1757340",
    "end": "1764000"
  },
  {
    "text": "things like that for example if I want to get at the backing C string I can",
    "start": "1764000",
    "end": "1770059"
  },
  {
    "text": "there's a function in standard string implementation called C underscore string and so I can use that if I can",
    "start": "1770059",
    "end": "1778100"
  },
  {
    "text": "find somewhere in the function somewhere in the program rather that calls",
    "start": "1778100",
    "end": "1783799"
  },
  {
    "text": "the C string member function so",
    "start": "1783799",
    "end": "1789919"
  },
  {
    "text": "let me see Scoops okay",
    "start": "1789919",
    "end": "1796580"
  },
  {
    "text": "Scripts",
    "start": "1796580",
    "end": "1799240"
  },
  {
    "text": "um okay so I'll use this one so this is the most basic hook",
    "start": "1805460",
    "end": "1811640"
  },
  {
    "text": "um for now I think I might just want to use",
    "start": "1811640",
    "end": "1816799"
  },
  {
    "text": "the Ripple so I'll use um basically I can just use debug symbol dot find functions matching",
    "start": "1816799",
    "end": "1824659"
  },
  {
    "text": "and first I'll do the markdown one",
    "start": "1824659",
    "end": "1830179"
  },
  {
    "text": "uh just because I need that type",
    "start": "1830179",
    "end": "1834700"
  },
  {
    "text": "and then I'll get the name from it so um from address",
    "start": "1838760",
    "end": "1845559"
  },
  {
    "text": "um so this should spit out the the full name with the type information and everything and then I can use that uh",
    "start": "1852500",
    "end": "1858980"
  },
  {
    "text": "that type information as another wild card to see functions that are using",
    "start": "1858980",
    "end": "1864200"
  },
  {
    "text": "that type and or functions that Branch off of that type so for example like string dot C string",
    "start": "1864200",
    "end": "1871340"
  },
  {
    "text": "um not sure why it's taking a while like sometimes this target application can be pretty slow okay it's got tons of",
    "start": "1871340",
    "end": "1878600"
  },
  {
    "text": "libraries um cursor",
    "start": "1878600",
    "end": "1885919"
  },
  {
    "text": "um so this is the type information so I'll just take this whole thing except for the const pointer at the end there",
    "start": "1885919",
    "end": "1892760"
  },
  {
    "text": "um and look for functions that are using that type so I want things that start I'm not",
    "start": "1892760",
    "end": "1897799"
  },
  {
    "text": "going to have the first wild card because I want things that start with that but I'm going to have the end there",
    "start": "1897799",
    "end": "1903200"
  },
  {
    "text": "um and I know that it should end with a colon colon c underscore string",
    "start": "1903200",
    "end": "1909620"
  },
  {
    "text": "and then I don't know what comes after that I'm just gonna go for it",
    "start": "1909620",
    "end": "1915260"
  },
  {
    "text": "all right and it came back with with this so",
    "start": "1915260",
    "end": "1921020"
  },
  {
    "text": "let me see if I can do debug symbol dot from",
    "start": "1921020",
    "end": "1928159"
  },
  {
    "text": "name",
    "start": "1928159",
    "end": "1930760"
  },
  {
    "text": "make sure that it's all working it should give me like the full debug",
    "start": "1933980",
    "end": "1939020"
  },
  {
    "text": "information and then from that I can grab the address",
    "start": "1939020",
    "end": "1943720"
  },
  {
    "text": "um yeah so you grab the address from that",
    "start": "1946580",
    "end": "1953899"
  },
  {
    "text": "and I'll just copy this into our program to speed things up a bit",
    "start": "1953899",
    "end": "1959059"
  },
  {
    "text": "um so now we can Define up here",
    "start": "1959059",
    "end": "1964120"
  },
  {
    "text": "some helper functions so I'm going to say C strings adders equals",
    "start": "1964340",
    "end": "1972320"
  },
  {
    "text": "this is quote or something oh it's a new line",
    "start": "1972380",
    "end": "1980740"
  },
  {
    "text": "okay foreign",
    "start": "1981500",
    "end": "1987460"
  },
  {
    "text": "so that's the address and then um I can make that callable now by",
    "start": "1987460",
    "end": "1994279"
  },
  {
    "text": "defining a new native function and give it the address",
    "start": "1994279",
    "end": "2001139"
  },
  {
    "text": "and then the return type these are all defined in the JavaScript API as well",
    "start": "2003820",
    "end": "2009580"
  },
  {
    "text": "um and then an array of the argument types",
    "start": "2009580",
    "end": "2015039"
  },
  {
    "text": "that it expects so I think this should just expect a pointer to a basic string",
    "start": "2015039",
    "end": "2020919"
  },
  {
    "text": "um which should just be basically like this pointer um so now",
    "start": "2020919",
    "end": "2027100"
  },
  {
    "text": "inside the hook instead of just printing out like a pointer or something",
    "start": "2027100",
    "end": "2032159"
  },
  {
    "text": "uh we can have it print out hopefully",
    "start": "2032159",
    "end": "2039220"
  },
  {
    "text": "the uh string",
    "start": "2039220",
    "end": "2045000"
  },
  {
    "text": "so I do Dash l scripts first",
    "start": "2048760",
    "end": "2055919"
  },
  {
    "text": "and then go back into WebEx app and type a message",
    "start": "2062740",
    "end": "2067839"
  },
  {
    "text": "it still points it does a pointer and um that is because",
    "start": "2067839",
    "end": "2073300"
  },
  {
    "text": "the C string still it doesn't like C string is going to return the pointer to the backing C",
    "start": "2073300",
    "end": "2080200"
  },
  {
    "text": "string so from this I have to call Dot read utf-8",
    "start": "2080200",
    "end": "2085240"
  },
  {
    "text": "string and that will give me the the actual string so",
    "start": "2085240",
    "end": "2093580"
  },
  {
    "text": "there we go now it's now it's just showing High um so",
    "start": "2093580",
    "end": "2099520"
  },
  {
    "text": "so it's just getting uh whatever string I'm passing to this function and so now",
    "start": "2099520",
    "end": "2105880"
  },
  {
    "text": "uh we have a little bit more control over the program right so we can we can look",
    "start": "2105880",
    "end": "2112119"
  },
  {
    "text": "at the string that's being sent um and that's the first step in being able",
    "start": "2112119",
    "end": "2117520"
  },
  {
    "text": "to modify things so from there we would want to Define things like being able to assign things",
    "start": "2117520",
    "end": "2124180"
  },
  {
    "text": "to the string um like and being able to create sorry I",
    "start": "2124180",
    "end": "2131320"
  },
  {
    "text": "thought this was over here um so being able to assign data or new",
    "start": "2131320",
    "end": "2137560"
  },
  {
    "text": "strings to that string object and being able to make new string objects all together",
    "start": "2137560",
    "end": "2142859"
  },
  {
    "text": "so that the reason we would want to do the third one is because that's what we",
    "start": "2142859",
    "end": "2147880"
  },
  {
    "text": "would need for actually calling this function because we need to create some basic strings to to give to the function",
    "start": "2147880",
    "end": "2154180"
  },
  {
    "text": "as an argument um and so that's what we'll do next um",
    "start": "2154180",
    "end": "2160660"
  },
  {
    "text": "here um so",
    "start": "2160660",
    "end": "2166260"
  },
  {
    "text": "all right and so I'm just gonna skip ahead here a little bit um to show uh basically I did the same",
    "start": "2176320",
    "end": "2183160"
  },
  {
    "text": "process as before where I find the C string address except I did it with a few more addresses",
    "start": "2183160",
    "end": "2188980"
  },
  {
    "text": "um so I got the address of the Constructor here which I named uh Beast or new uh address and then be so new",
    "start": "2188980",
    "end": "2198400"
  },
  {
    "text": "um and basically Define it the same way it's it takes uh or it returns a pointer",
    "start": "2198400",
    "end": "2204400"
  },
  {
    "text": "to a basic string object it takes a pointer to the basic string objects um or sorry it returns just a pointer",
    "start": "2204400",
    "end": "2211660"
  },
  {
    "text": "I'll go over that later um it takes the pointer to a basic string object",
    "start": "2211660",
    "end": "2217000"
  },
  {
    "text": "um and then also the pointer to a C string um and I've also defined our function",
    "start": "2217000",
    "end": "2223839"
  },
  {
    "text": "our Target function here as something that returns a pointer um",
    "start": "2223839",
    "end": "2228940"
  },
  {
    "text": "and then ticks two pointers as well",
    "start": "2228940",
    "end": "2233640"
  },
  {
    "text": "and it's it seems like it should take one pointer but uh in practice it seems calling it it needs to",
    "start": "2234220",
    "end": "2241000"
  },
  {
    "text": "don't know why um so I haven't gotten that far reversing it but",
    "start": "2241000",
    "end": "2246400"
  },
  {
    "text": "um so basically uh we run this like",
    "start": "2246400",
    "end": "2252160"
  },
  {
    "text": "I've I could basically uh sorry uh re-implemented the the functionality of",
    "start": "2252160",
    "end": "2259180"
  },
  {
    "text": "this this function inside of JavaScript now so I've got a payload here it's a C",
    "start": "2259180",
    "end": "2264820"
  },
  {
    "text": "string um or sorry it's a JavaScript string which I'm then uh making into uh",
    "start": "2264820",
    "end": "2272980"
  },
  {
    "text": "a an actual C string that's allocated in memory right here I'm doing memory.alloc",
    "start": "2272980",
    "end": "2278440"
  },
  {
    "text": "utf-8 string and putting the payload in there uh I'm creating a basic string",
    "start": "2278440",
    "end": "2283540"
  },
  {
    "text": "object so I I didn't take the time to reverse engineer the basic string object like to see how big it should be I just",
    "start": "2283540",
    "end": "2290380"
  },
  {
    "text": "did 1024 plus the payload dot length to be safe um",
    "start": "2290380",
    "end": "2295839"
  },
  {
    "text": "and uh then you can call Basic string new which creates the basic string",
    "start": "2295839",
    "end": "2301000"
  },
  {
    "text": "object with that string as the um payload and then I hex dumped that",
    "start": "2301000",
    "end": "2309160"
  },
  {
    "text": "just to show what's going on and then I can call markdown to HTML with the payload basic string uh just",
    "start": "2309160",
    "end": "2316839"
  },
  {
    "text": "twice it really got upset when I sent it once so um",
    "start": "2316839",
    "end": "2322240"
  },
  {
    "text": "and then I should show the results so I'll get out of this",
    "start": "2322240",
    "end": "2329320"
  },
  {
    "text": "bring it down to the fourth one",
    "start": "2329320",
    "end": "2333240"
  },
  {
    "text": "it starts taking a while um okay",
    "start": "2356980",
    "end": "2363780"
  },
  {
    "text": "so we can see here that it's called a little script actually",
    "start": "2364300",
    "end": "2369940"
  },
  {
    "text": "I'm gonna restart the WebEx app one thing I've found with free does it is a little bit",
    "start": "2369940",
    "end": "2376720"
  },
  {
    "text": "annoying is that it seems to cause a little bit of memory leaking in the Target program",
    "start": "2376720",
    "end": "2383200"
  },
  {
    "text": "um so it's good to just restart it every now and then",
    "start": "2383200",
    "end": "2387359"
  },
  {
    "text": "find the fit again",
    "start": "2389320",
    "end": "2392640"
  },
  {
    "text": "all right cool so I'll kind of walk through this here",
    "start": "2400720",
    "end": "2407520"
  },
  {
    "text": "all right so it attaches we've created our payload string this is it as a",
    "start": "2411339",
    "end": "2416859"
  },
  {
    "text": "string object in the hex dump so you can see it's not just it has the hello part uh with the Stars around it",
    "start": "2416859",
    "end": "2424300"
  },
  {
    "text": "um but it also has this byte here the hex 12. um",
    "start": "2424300",
    "end": "2429460"
  },
  {
    "text": "and it seems like that's about it uh and so yeah the basic string when like I",
    "start": "2429460",
    "end": "2434980"
  },
  {
    "text": "guess just not meaning to but I kind of reverse engineer this as I'm going along like I",
    "start": "2434980",
    "end": "2440800"
  },
  {
    "text": "can see that when uh the string is very short it does a very basic representation of it where it just has kind of a length field and then the uh",
    "start": "2440800",
    "end": "2449380"
  },
  {
    "text": "string itself and but when the string is rather long like",
    "start": "2449380",
    "end": "2455140"
  },
  {
    "text": "I'll send a longer string",
    "start": "2455140",
    "end": "2460740"
  },
  {
    "text": "just a bunch of A's you should see over here",
    "start": "2460780",
    "end": "2467500"
  },
  {
    "text": "that once it loads",
    "start": "2467500",
    "end": "2472800"
  },
  {
    "text": "all right I'm doing this from I'm I forgot that I'm not actually hooking it",
    "start": "2472900",
    "end": "2478300"
  },
  {
    "text": "I'm sending the string myself now so I just put it over here",
    "start": "2478300",
    "end": "2484420"
  },
  {
    "text": "so just a longer string just to show what I'm talking about here",
    "start": "2484420",
    "end": "2490740"
  },
  {
    "text": "save this and that should update over here in a second",
    "start": "2492460",
    "end": "2498760"
  },
  {
    "text": "okay so now we can see if we go up here it's a little bit harder to decipher the string now because the plain text isn't",
    "start": "2498760",
    "end": "2505359"
  },
  {
    "text": "there because it's it's so too big to hold in the small buffer so it's actually allocated elsewhere and",
    "start": "2505359",
    "end": "2512619"
  },
  {
    "text": "um anyway that's just kind of what I was talking about where like if you hex dump these objects as you go along and kind",
    "start": "2512619",
    "end": "2518020"
  },
  {
    "text": "of learn how they work um but the intent of my program is kind of",
    "start": "2518020",
    "end": "2523720"
  },
  {
    "text": "finished here where I've got a way to call the target function uh with the",
    "start": "2523720",
    "end": "2530140"
  },
  {
    "text": "proper arguments and I can see the output now as well with uh it's turned",
    "start": "2530140",
    "end": "2535420"
  },
  {
    "text": "into HTML um and so this lets me do a lot of introspection now with the target",
    "start": "2535420",
    "end": "2542140"
  },
  {
    "text": "program I can I can try different uh payloads that",
    "start": "2542140",
    "end": "2547839"
  },
  {
    "text": "are problematic like I found like with a bunch of",
    "start": "2547839",
    "end": "2552940"
  },
  {
    "text": "these uh backticks and then putting something in here derp",
    "start": "2552940",
    "end": "2558760"
  },
  {
    "text": "if you just once it reloads it I saw that that had some sort of",
    "start": "2558760",
    "end": "2566020"
  },
  {
    "text": "um special functionality so as you see here it turned it into a",
    "start": "2566020",
    "end": "2571240"
  },
  {
    "text": "code block like it's pretty pretty uh standard with a lot of these um",
    "start": "2571240",
    "end": "2576400"
  },
  {
    "text": "like markdown implementations where they'll actually try to show you a code in a specific language that you specify",
    "start": "2576400",
    "end": "2584020"
  },
  {
    "text": "but um it has some quirks like",
    "start": "2584020",
    "end": "2589240"
  },
  {
    "text": "um if you sorry if you do that",
    "start": "2589240",
    "end": "2595740"
  },
  {
    "text": "uh you can you can put things in there you shouldn't be able to",
    "start": "2595900",
    "end": "2600940"
  },
  {
    "text": "um so I had script and you'll see that it actually like just it should just like",
    "start": "2600940",
    "end": "2605980"
  },
  {
    "text": "remove that or put um HTML entities or something around that",
    "start": "2605980",
    "end": "2611140"
  },
  {
    "text": "uh when it reloads yeah so it's got HTML entities around it but what I was seeing in the client was",
    "start": "2611140",
    "end": "2616720"
  },
  {
    "text": "that um it would show up for like a split second and so I think there's some",
    "start": "2616720",
    "end": "2622560"
  },
  {
    "text": "discrepancy between like the rendering and the the parsing in this markdown to",
    "start": "2622560",
    "end": "2627760"
  },
  {
    "text": "HTML function so that was kind of um where I've been focusing for a little",
    "start": "2627760",
    "end": "2633460"
  },
  {
    "text": "bit in my research um so yeah basically we've created that",
    "start": "2633460",
    "end": "2639040"
  },
  {
    "text": "function we're able to call it test things out next possibility is what you'd want to do",
    "start": "2639040",
    "end": "2644619"
  },
  {
    "text": "um or what I did rather was to set up fuzzer for this target function with AFL plus plus uh it has a freedom mode so",
    "start": "2644619",
    "end": "2651760"
  },
  {
    "text": "you can basically take your Frida script that you created and feed it to this AFL plus plus fuzzer and it will call it",
    "start": "2651760",
    "end": "2659079"
  },
  {
    "text": "very quickly um over and over again and keep track of coverage data and uh that will kind of",
    "start": "2659079",
    "end": "2666700"
  },
  {
    "text": "determine what inputs it sends next and um you can also find functions closer to",
    "start": "2666700",
    "end": "2672579"
  },
  {
    "text": "the network sending function functions if you're worried that there's a lot of uh like censorship or sanitization",
    "start": "2672579",
    "end": "2678819"
  },
  {
    "text": "happening earlier on the process um if you're trying to send malicious inputs for example",
    "start": "2678819",
    "end": "2684760"
  },
  {
    "text": "um you can look at the receiving functions instead of the sending functions um that might be interesting for more",
    "start": "2684760",
    "end": "2691000"
  },
  {
    "text": "rendering stuff like we looked at markdown to HTML but what about the HTML parsing itself there can be a lot of",
    "start": "2691000",
    "end": "2697300"
  },
  {
    "text": "issues there if they're HTML engine is Gucci",
    "start": "2697300",
    "end": "2702720"
  },
  {
    "text": "and um yeah find all any client-side checks and map them out with the interceptor.replace",
    "start": "2702720",
    "end": "2710200"
  },
  {
    "text": "um so to go over what we covered here um we went over what fruit it is what it",
    "start": "2710800",
    "end": "2715900"
  },
  {
    "text": "does why you should use it um we covered how to go from a UI feature",
    "start": "2715900",
    "end": "2722380"
  },
  {
    "text": "that we were just a little bit interested in to instrumenting the code that's responsible for uh making it work",
    "start": "2722380",
    "end": "2731020"
  },
  {
    "text": "and looked at a newberning the callers and colleagues of that function with backtrace and stalker",
    "start": "2731020",
    "end": "2737680"
  },
  {
    "text": "and how to make the function callable and ready for fuzzing and uh before I",
    "start": "2737680",
    "end": "2744640"
  },
  {
    "text": "end it uh so the it's better when you're doing Dev work with Frida to use this Frida agent",
    "start": "2744640",
    "end": "2751780"
  },
  {
    "text": "example it uses typescript instead of JavaScript so there's bindings and so you can actually like have autocomplete",
    "start": "2751780",
    "end": "2758020"
  },
  {
    "text": "and um uh it's called intellisense and stuff like that that really helps when you're",
    "start": "2758020",
    "end": "2763660"
  },
  {
    "text": "making these things and it's also a little bit neater it compiles down to a Javascript file",
    "start": "2763660",
    "end": "2769839"
  },
  {
    "text": "um yeah vs code is pretty good with that I'm sure there's some other uh engines that work well with it",
    "start": "2769839",
    "end": "2776740"
  },
  {
    "text": "um it uses npm uh but yeah it also allows for modules and",
    "start": "2776740",
    "end": "2782440"
  },
  {
    "text": "one I'll be releasing uh probably this week is uh one that allows you to sync",
    "start": "2782440",
    "end": "2788680"
  },
  {
    "text": "uh disassembler with Frida um using there's a tool called red sync already that lets you sync uh debuggers like GDB",
    "start": "2788680",
    "end": "2796900"
  },
  {
    "text": "with uh your disassembler like gidra or Ida Pro um but I'm doing the same thing for",
    "start": "2796900",
    "end": "2802900"
  },
  {
    "text": "Frida now so you could do things like if you have some functions that you've renamed in your inside your disassembler",
    "start": "2802900",
    "end": "2809500"
  },
  {
    "text": "um Frida can or you can use Frida to look up those functions by the names you",
    "start": "2809500",
    "end": "2814540"
  },
  {
    "text": "defined and get the address to them so you can like hook functions that otherwise wouldn't have symbols",
    "start": "2814540",
    "end": "2821579"
  },
  {
    "text": "um yeah so I don't know if there's any questions",
    "start": "2822940",
    "end": "2828240"
  },
  {
    "text": "it's kind of a whirlwind too yeah",
    "start": "2832900",
    "end": "2837838"
  },
  {
    "text": "um so yeah you don't need source code uh you don't need symbols so like uh I was",
    "start": "2844420",
    "end": "2851319"
  },
  {
    "text": "saying at the beginning of the talk uh there's um you can find uh if you don't have symbols you can hook exported functions",
    "start": "2851319",
    "end": "2858339"
  },
  {
    "text": "or you can use a disassembler and look at the functions in the disassembler and",
    "start": "2858339",
    "end": "2863500"
  },
  {
    "text": "when you find something interesting you can take the offset to that function from the disassembler and feed it to Frida trace or Frida or anything like",
    "start": "2863500",
    "end": "2871119"
  },
  {
    "text": "that so you can hook Things based on the function offset as well you can even hook things that aren't functions so you",
    "start": "2871119",
    "end": "2878079"
  },
  {
    "text": "can hook like an arbitrary address um as well which can sometimes be uh interesting",
    "start": "2878079",
    "end": "2885359"
  },
  {
    "text": "uh well the way like it works because like aslr is basically",
    "start": "2892540",
    "end": "2898119"
  },
  {
    "text": "um randomizing the base of the pointer but the offsets should remain the same uh so so it's just it Frida is uh",
    "start": "2898119",
    "end": "2907300"
  },
  {
    "text": "keeping track of the modules that are loaded and their base addresses and so um it just you just add them you it'll",
    "start": "2907300",
    "end": "2914380"
  },
  {
    "text": "you can see the Base address and then add the offset to those yeah",
    "start": "2914380",
    "end": "2920579"
  },
  {
    "text": "yeah",
    "start": "2920680",
    "end": "2923040"
  },
  {
    "text": "yes yep you can uh execute files as well um so uh let's see actually",
    "start": "2928000",
    "end": "2936520"
  },
  {
    "text": "I can show that um so if I get out of this I can do Frida",
    "start": "2936520",
    "end": "2942819"
  },
  {
    "text": "Dash Trace Dash I for exported function and do like open",
    "start": "2942819",
    "end": "2948760"
  },
  {
    "text": "so it's going to hook any open calls um I'll do cat Etsy password",
    "start": "2948760",
    "end": "2956760"
  },
  {
    "text": "all right you have to give the whole path because otherwise it will think that it's a service that's",
    "start": "2956980",
    "end": "2962619"
  },
  {
    "text": "running and so you can see it it I'll go up to the top oh boy OS X is a really big",
    "start": "2962619",
    "end": "2968859"
  },
  {
    "text": "password file um uh okay so you can see it it ran bin cat",
    "start": "2968859",
    "end": "2975700"
  },
  {
    "text": "and created a Handler for libsystem kernel.dylib open",
    "start": "2975700",
    "end": "2980800"
  },
  {
    "text": "um and so you can see the regular standard out output here and then later",
    "start": "2980800",
    "end": "2986380"
  },
  {
    "text": "on once the giant file is done oh my God",
    "start": "2986380",
    "end": "2991780"
  },
  {
    "text": "okay uh then you can see the Frida had hooked open and since uh open is a like",
    "start": "2991780",
    "end": "2997660"
  },
  {
    "text": "sort of standard Library function um Frida already has definitions for what arguments it expects and so it",
    "start": "2997660",
    "end": "3003119"
  },
  {
    "text": "prints those out pretty helpfully here like a an S trace or L Trace format um so you can see the file that was",
    "start": "3003119",
    "end": "3008700"
  },
  {
    "text": "opened and the flags it was opened with yeah you can definitely execute files and book",
    "start": "3008700",
    "end": "3015440"
  },
  {
    "text": "okay oh no uh sorry I thought you were talking about if you just have to hook running processes or if it's like you",
    "start": "3017579",
    "end": "3024060"
  },
  {
    "text": "can run the processes yourself um no it's not it's definitely a dynamic binary instrumentation tool",
    "start": "3024060",
    "end": "3030900"
  },
  {
    "text": "um the for Sac analysis I see I mostly just use like uh scripts I've written",
    "start": "3030900",
    "end": "3037619"
  },
  {
    "text": "for Ida Pro um or ghidra things like that stock analysis",
    "start": "3037619",
    "end": "3044599"
  },
  {
    "text": "um yeah um which the bottom",
    "start": "3044760",
    "end": "3051680"
  },
  {
    "text": "yes that was just hooking the open export um and then dash dash just so that it",
    "start": "3058020",
    "end": "3064559"
  },
  {
    "text": "doesn't think anything else is a free to option and then cat argument",
    "start": "3064559",
    "end": "3071359"
  },
  {
    "text": "great yeah there's no other questions thank you",
    "start": "3076500",
    "end": "3082819"
  }
]