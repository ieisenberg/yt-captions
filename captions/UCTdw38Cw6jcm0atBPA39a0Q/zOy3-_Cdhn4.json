[
  {
    "text": "are we ready okay good there we are hello can you hear me okay excellent",
    "start": "8950",
    "end": "15949"
  },
  {
    "text": "hi everyone my workshop Norwegians did a much better job of greeting me hi okay",
    "start": "15949",
    "end": "23660"
  },
  {
    "text": "excellent you're here then you're awake good thanks for coming everyone my name is Brock Allen I'm a consultant",
    "start": "23660",
    "end": "30500"
  },
  {
    "text": "I call myself an identity architect these days kind of a nifty nifty unique title I basically help companies with",
    "start": "30500",
    "end": "37550"
  },
  {
    "text": "their identity architecture and their application security and I focus on",
    "start": "37550",
    "end": "42680"
  },
  {
    "text": "things like you know Identity Management storing passwords you know doing MFA getting users logged into systems very",
    "start": "42680",
    "end": "49879"
  },
  {
    "text": "often doing things like single sign-on with open ID Connect having apps invoke",
    "start": "49879",
    "end": "55640"
  },
  {
    "text": "api's you know securely with oauth2 and a lot of that also then revolves around",
    "start": "55640",
    "end": "62079"
  },
  {
    "text": "right once we know who the user is what can they do in the apps so when I'm not",
    "start": "62079",
    "end": "67310"
  },
  {
    "text": "doing work for customers in those topics I spend a lot of my time doing some open-source work on a couple projects",
    "start": "67310",
    "end": "73280"
  },
  {
    "text": "called identity server and identity model identity server is a framework for",
    "start": "73280",
    "end": "78649"
  },
  {
    "text": "helping you build open ID connect and ooofff to servers to help achieve those identity architectures of single sign-on",
    "start": "78649",
    "end": "86000"
  },
  {
    "text": "and identity model is like a little helper library that you can use from an app to connect to those servers I also",
    "start": "86000",
    "end": "93140"
  },
  {
    "text": "do some commercial product work for authorization in something called policy server so this session is about how from",
    "start": "93140",
    "end": "101989"
  },
  {
    "text": "JavaScript applications running in the browser we can authenticate calls securely back to our web api's I'm",
    "start": "101989",
    "end": "110539"
  },
  {
    "text": "mainly talking you know about client-side browser-based applications I'm not talking about when I'm saying JavaScript not talking about server-side",
    "start": "110539",
    "end": "116869"
  },
  {
    "text": "node.js type of apps so these are purely client-side browser based JavaScript",
    "start": "116869",
    "end": "121879"
  },
  {
    "text": "applications so what we're going to do is look at a couple different approaches for authenticating calls when you're",
    "start": "121879",
    "end": "127429"
  },
  {
    "text": "making these Ajax calls back to the server and then we'll talk about couple of threats you need to be aware of when",
    "start": "127429",
    "end": "133670"
  },
  {
    "text": "you're building your JavaScript spa applications the majority of the session is about mitigating against one of those",
    "start": "133670",
    "end": "139459"
  },
  {
    "text": "threats which is a cross-site request forgery attack and we're gonna see a couple different or a few different styles for protecting",
    "start": "139459",
    "end": "145220"
  },
  {
    "text": "those api's depending on your apt requirements and and you know what what what architecture you kind of need based",
    "start": "145220",
    "end": "153140"
  },
  {
    "text": "on your your you know your identity architecture for your your applications so when we have JavaScript running and",
    "start": "153140",
    "end": "160460"
  },
  {
    "text": "browsers we have a couple different styles for how we make calls back to the server and authenticate those calls",
    "start": "160460",
    "end": "165740"
  },
  {
    "text": "so one kind of half of those apps that I think of I think of the more traditional",
    "start": "165740",
    "end": "171020"
  },
  {
    "text": "or the older applications that you might be building where you have some server-side code running that maybes",
    "start": "171020",
    "end": "176030"
  },
  {
    "text": "rendering HTML and that server-side code needs to know who the user is so chances are because you have a server-side",
    "start": "176030",
    "end": "182030"
  },
  {
    "text": "application you're using a cookie of some sort to do authentication right very very traditional type of thing and",
    "start": "182030",
    "end": "187250"
  },
  {
    "text": "then you know one day you discovered something like jQuery and you're like oh wow I can actually put code in the",
    "start": "187250",
    "end": "192680"
  },
  {
    "text": "browser right and do something more dynamic and I can make Ajax calls back to my server and it just sort of worked",
    "start": "192680",
    "end": "199130"
  },
  {
    "text": "an authentication just worked in those Ajax calls basically because you were sending a cookie along okay and that's",
    "start": "199130",
    "end": "204920"
  },
  {
    "text": "kind of what we like about cookies for authentication is because the browser is automatically or implicitly sending them",
    "start": "204920",
    "end": "210650"
  },
  {
    "text": "to the server so totally works for Ajax calls and you know that's why we like it it's nice and easy okay so that's one",
    "start": "210650",
    "end": "218510"
  },
  {
    "text": "style the other style is more the the the newer style of JavaScript or spa",
    "start": "218510",
    "end": "224780"
  },
  {
    "text": "applications that we're developing these are more like pure angular or react where you're building the application so",
    "start": "224780",
    "end": "231080"
  },
  {
    "text": "that the entire UI is executing and rendering in the browser and you really have nothing on the server other than an",
    "start": "231080",
    "end": "236720"
  },
  {
    "text": "API somewhere and that might not even be running with your app that may be on a totally different domain somewhere and",
    "start": "236720",
    "end": "242060"
  },
  {
    "text": "so that's almost a style or maybe you could even deploy it from a CDN okay you have nothing really executing on the",
    "start": "242060",
    "end": "248120"
  },
  {
    "text": "server so how you authenticate that style of app well you actually have a couple more choices there you could",
    "start": "248120",
    "end": "253970"
  },
  {
    "text": "still try to do cookies if you had something server-side but another architectures use token-based",
    "start": "253970",
    "end": "259910"
  },
  {
    "text": "authentication and we're going to talk about sort of the pros and cons of those so the couple main threats that you need",
    "start": "259910",
    "end": "266390"
  },
  {
    "text": "to be aware of when you're building JavaScript applications running in the browser right the first and foremost is cross-site scripting attacks okay so",
    "start": "266390",
    "end": "273350"
  },
  {
    "text": "that's you know one of the still most many types of attacks on the web where an attacker can somehow pass parameters",
    "start": "273350",
    "end": "279860"
  },
  {
    "text": "into your application your application interprets them as you know some sort of",
    "start": "279860",
    "end": "285230"
  },
  {
    "text": "input but you're interpreting it in executing it accidentally in your application right string concatenation",
    "start": "285230",
    "end": "291710"
  },
  {
    "text": "and it's the same idea with server-side things like sequel injection so a couple of the mitigations that you probably are",
    "start": "291710",
    "end": "298550"
  },
  {
    "text": "already using but if you're not you need to be aware of them is obviously HTTP only cookies is one thing to use there",
    "start": "298550",
    "end": "305390"
  },
  {
    "text": "right the idea there is that when you issue your cookie from your server-side application you don't want the",
    "start": "305390",
    "end": "311530"
  },
  {
    "text": "cross-site scripting attack in your page or in your users app to somehow exfiltrate the cookie because then the",
    "start": "311530",
    "end": "317630"
  },
  {
    "text": "attacker could just send the cookie out to their you know to their server and then replay the cookie into your app and of course they're in that's a really",
    "start": "317630",
    "end": "324380"
  },
  {
    "text": "easy mitigation because you can just mark it in the cookie and it just happens automatically because the browser is enforcing it so that's a nice",
    "start": "324380",
    "end": "331160"
  },
  {
    "text": "mitigation it's not really necessarily the best mitigation because of course if the attacker is running JavaScript in",
    "start": "331160",
    "end": "337310"
  },
  {
    "text": "the page well they can just submit Ajax calls back to the server as if it's the user so you know protecting its",
    "start": "337310",
    "end": "343610"
  },
  {
    "text": "exfiltration of the cookie is only one sort of a defense so yeah we still need to protect against that code running in",
    "start": "343610",
    "end": "349280"
  },
  {
    "text": "the page because then it could do whatever the user is doing so content security policy right is a very",
    "start": "349280",
    "end": "354830"
  },
  {
    "text": "important feature for doing that how many of you use this today actually that's pretty decent it's a quarter of",
    "start": "354830",
    "end": "361310"
  },
  {
    "text": "you that's better than you know maybe a year ago so if you're building a spa",
    "start": "361310",
    "end": "367460"
  },
  {
    "text": "JavaScript application just hands-down you should absolutely using content security policy and the talk is not",
    "start": "367460",
    "end": "373430"
  },
  {
    "text": "about content security policy but I will briefly show you or mention what it's about so the idea is I'm just using a",
    "start": "373430",
    "end": "379580"
  },
  {
    "text": "github as an example here when your HTML page renders from the server and renders into the browser you can emit a HTTP",
    "start": "379580",
    "end": "387320"
  },
  {
    "text": "header from your server-side application called content security policy and this is basically a feature of browsers",
    "start": "387320",
    "end": "393770"
  },
  {
    "text": "modern browsers and you're basically telling the browser that you don't want any JavaScript to run on the page okay",
    "start": "393770",
    "end": "399890"
  },
  {
    "text": "and that's actually gonna solve our cross-site scripting problem right absolutely",
    "start": "399890",
    "end": "405590"
  },
  {
    "text": "no JavaScript no attack okay ah right you building a spy I forgot okay so we",
    "start": "405590",
    "end": "411229"
  },
  {
    "text": "actually want to protect or enable other parts of the application to run which is your code the the legitimate code okay",
    "start": "411229",
    "end": "417470"
  },
  {
    "text": "so basically the way this works you added in the page it disables pretty much all JavaScript and then the idea is",
    "start": "417470",
    "end": "422810"
  },
  {
    "text": "you come down here and with some additional directives you are telling",
    "start": "422810",
    "end": "428000"
  },
  {
    "text": "the browser which scripts you do trust or you do want to allow to run and there",
    "start": "428000",
    "end": "433280"
  },
  {
    "text": "are a variety of ways of doing this one way is you can indicate that the host name or the domain name that your",
    "start": "433280",
    "end": "438590"
  },
  {
    "text": "scripts are coming from that you trust if that's a CDN I don't know if that's gonna really help you because a bad guy",
    "start": "438590",
    "end": "444080"
  },
  {
    "text": "can also put their script up on a CDN but if it's your own domain you can do that there's another technique where you",
    "start": "444080",
    "end": "449570"
  },
  {
    "text": "can even do the hash of the block of JavaScript that you want to allow to run okay that's actually really locking it",
    "start": "449570",
    "end": "455389"
  },
  {
    "text": "down okay so again this talk is not really about that but if you don't know about it you really should be using it and use it and",
    "start": "455389",
    "end": "462470"
  },
  {
    "text": "introduce it as soon as possible into your application architecture as possible because the more you're you're",
    "start": "462470",
    "end": "467990"
  },
  {
    "text": "basically deliberately restricting things that can run on the page and so",
    "start": "467990",
    "end": "474080"
  },
  {
    "text": "if you have a whole bunch of JavaScript that you're building that goes off and does inline scripting and things like that you're really you know kind of",
    "start": "474080",
    "end": "480440"
  },
  {
    "text": "painting yourself into court you're making it harder for you be able to use this okay so again you should be using this for any kind of JavaScript you're",
    "start": "480440",
    "end": "486740"
  },
  {
    "text": "running in the browser alright this by the way has other features as well it's not just what",
    "start": "486740",
    "end": "491870"
  },
  {
    "text": "JavaScript can run it's like what CSS can run you know what domains can you connect back to for Ajax calls and",
    "start": "491870",
    "end": "499160"
  },
  {
    "text": "WebSockets what web fonts will you allow to run what origins you know iframes are",
    "start": "499160",
    "end": "506210"
  },
  {
    "text": "allowed to be running which form which origins you can post your forum post from a form element all kinds of things",
    "start": "506210",
    "end": "511910"
  },
  {
    "text": "like that so you really should look into this and you know be using it in your apps it's gonna be your your best",
    "start": "511910",
    "end": "517700"
  },
  {
    "text": "defense against cross site scripting because it's really the browser who is sandboxing your app and helping you out",
    "start": "517700",
    "end": "523219"
  },
  {
    "text": "okay so the other main attack which is really what the rest of this talk is about it's something called cross-site",
    "start": "523219",
    "end": "529760"
  },
  {
    "text": "request forgery and we have a few different mitigations against that like I said depending on your application architecture so real quick what is a",
    "start": "529760",
    "end": "536660"
  },
  {
    "text": "cross-site request forgery attack the idea is that you have logged in to an application and",
    "start": "536660",
    "end": "542690"
  },
  {
    "text": "again this is the scenario where we're using cookies to authenticate our Ajax calls so the server-side application",
    "start": "542690",
    "end": "549470"
  },
  {
    "text": "your users gonna go log into that username password whatever you're gonna get back a cookie into your browser great your app can make requests that",
    "start": "549470",
    "end": "556520"
  },
  {
    "text": "cookie gets sent your app can make Ajax calls the cookie is sent great now my the end user is somehow fooled into",
    "start": "556520",
    "end": "563240"
  },
  {
    "text": "opening up another tab they to go to some malicious website and that malicious website also makes requests",
    "start": "563240",
    "end": "569420"
  },
  {
    "text": "over to your application okay something like a get request maybe they put an image tag over to your some endpoint in",
    "start": "569420",
    "end": "575870"
  },
  {
    "text": "your application or they have a form element all right just some action in your application and then they write a",
    "start": "575870",
    "end": "581240"
  },
  {
    "text": "line of JavaScript to auto submit it okay this is something you need to protect against because when the attacker runs",
    "start": "581240",
    "end": "586790"
  },
  {
    "text": "that code in the user's browser the cookie will be sent okay so even though the page submitting to your application",
    "start": "586790",
    "end": "593930"
  },
  {
    "text": "is from an entirely different domain because your app previously issued the cookie the browser is gonna",
    "start": "593930",
    "end": "599420"
  },
  {
    "text": "automatically send it that's just how cookies have worked forever okay so again the attack here is the",
    "start": "599420",
    "end": "605480"
  },
  {
    "text": "attacker is taking advantage of the fact that your browser implicitly sends the cookie okay this by the way is also a",
    "start": "605480",
    "end": "613610"
  },
  {
    "text": "valid attack if you're using other types of credentials that the bread that the browser is implicitly sending if you're",
    "start": "613610",
    "end": "620510"
  },
  {
    "text": "doing integrated windows authentication if you're doing HTTP basic authentication where the browser prompts",
    "start": "620510",
    "end": "625700"
  },
  {
    "text": "right or if you're doing even like client certificates like an x.509 certificate you know we're a smart card",
    "start": "625700",
    "end": "631220"
  },
  {
    "text": "and the browser prompts you for it and you send it in all of those credentials you've asked the browser to kind of",
    "start": "631220",
    "end": "637820"
  },
  {
    "text": "manage and therefore implicitly send on every request okay so all those",
    "start": "637820",
    "end": "643340"
  },
  {
    "text": "scenarios you need to protect against so how do we do that one approach is",
    "start": "643340",
    "end": "649310"
  },
  {
    "text": "something with an anti forgery token an anti forgery token is basically think of",
    "start": "649310",
    "end": "654800"
  },
  {
    "text": "it as like a credential that proves that your app is the one making request your",
    "start": "654800",
    "end": "661700"
  },
  {
    "text": "your HTML is making the request back to your server-side application and so the",
    "start": "661700",
    "end": "668089"
  },
  {
    "text": "the trick about this is that your application or your HTML has to explicitly send the value okay that's",
    "start": "668089",
    "end": "674870"
  },
  {
    "text": "kind of the difference right instead of an imp it's an explicit credential and so this is pretty easy to do if you're doing",
    "start": "674870",
    "end": "680740"
  },
  {
    "text": "like asp.net or even MVC because what happens is when your code is rendered",
    "start": "680740",
    "end": "685810"
  },
  {
    "text": "into the page right I'm sure you've all seen this if you've done any kind of Razer programming we're in the form tag",
    "start": "685810",
    "end": "690970"
  },
  {
    "text": "you put HTML dot anti forgery token okay and what that does is it creates a",
    "start": "690970",
    "end": "696040"
  },
  {
    "text": "random value that's the anti forgery token it issues it in a cookie and it",
    "start": "696040",
    "end": "701110"
  },
  {
    "text": "renders the value that random value into this form element as a hidden field so",
    "start": "701110",
    "end": "706960"
  },
  {
    "text": "then whenever your page is posted back with a normal button click like abnormal submit right because that's just a",
    "start": "706960",
    "end": "713080"
  },
  {
    "text": "hidden input that's in your form it's automatically sent along and on the server you have that validate anti",
    "start": "713080",
    "end": "718420"
  },
  {
    "text": "forgery token attribute and that code on the server reads the cookie reads the hidden form value and compares it to and",
    "start": "718420",
    "end": "725380"
  },
  {
    "text": "what that's doing is proving that the form that submitted the page came from your server it's your code okay an",
    "start": "725380",
    "end": "732940"
  },
  {
    "text": "attacker on their website they could make the call the anti forgery cookie",
    "start": "732940",
    "end": "738160"
  },
  {
    "text": "would be sent but they have no way to know the value in that cookie because the cookie came from your domain so they",
    "start": "738160",
    "end": "744040"
  },
  {
    "text": "can't read it and it's such a high entropy value that they would never guess the right value to put in here so",
    "start": "744040",
    "end": "749890"
  },
  {
    "text": "then when they submit it just won't match and your server can reject the call okay this technique has been around",
    "start": "749890",
    "end": "755410"
  },
  {
    "text": "for a very very long time right the trick is or at least when it comes to JavaScript applications did you",
    "start": "755410",
    "end": "762070"
  },
  {
    "text": "remember to send it when you made your Ajax calls right did you remember to send along the ante forgery value that",
    "start": "762070",
    "end": "768730"
  },
  {
    "text": "was from the hidden field when you do dollar sign dot you know Ajax right using jQuery or something like that very",
    "start": "768730",
    "end": "775630"
  },
  {
    "text": "often people forget when they're just adding a little bit JavaScript to the page to make that call ooh they forget",
    "start": "775630",
    "end": "781630"
  },
  {
    "text": "to actually send along that ante forgery value so for those particular endpoints you might have the possibility of a",
    "start": "781630",
    "end": "788770"
  },
  {
    "text": "cross-site request forgery attack okay so that's a concern so anyway that's one",
    "start": "788770",
    "end": "794020"
  },
  {
    "text": "too one way to sort it out so you could use cookies and as long as every request you're standing in anti forgery value",
    "start": "794020",
    "end": "800230"
  },
  {
    "text": "you've protected those calls okay that's one style now turns out there's actually",
    "start": "800230",
    "end": "807070"
  },
  {
    "text": "a newer feature in the last yeah six or nine months the browsers are really starting to implement and it's",
    "start": "807070",
    "end": "813710"
  },
  {
    "text": "something called same site cookies okay what a same site cookie is is basically when you issue the authentication cookie",
    "start": "813710",
    "end": "820460"
  },
  {
    "text": "the cookie you're using to know who the user is in your application you can add this new attribute called same site and",
    "start": "820460",
    "end": "826520"
  },
  {
    "text": "that's a flag to the browser so again we're gonna fall back and have the",
    "start": "826520",
    "end": "831710"
  },
  {
    "text": "browser help protect our application it tells the browser that this cookie should only ever be sent back to the",
    "start": "831710",
    "end": "837710"
  },
  {
    "text": "server if the page making the request is from the same domain okay so that",
    "start": "837710",
    "end": "842990"
  },
  {
    "text": "totally solves the problem because now when you go to the malicious domain the other tab in the browser it's from a different domain it makes the",
    "start": "842990",
    "end": "849710"
  },
  {
    "text": "cross-domain call and the browser basically says oh the cookies not supposed to go cross domain so therefore",
    "start": "849710",
    "end": "855920"
  },
  {
    "text": "the browser will prevent it okay I don't know why they didn't do this ten years ago honestly this really would have",
    "start": "855920",
    "end": "861590"
  },
  {
    "text": "helped us a long time ago in terms of you know helping us with this cross-site request forgery vulnerability and",
    "start": "861590",
    "end": "868310"
  },
  {
    "text": "basically this is a substitute for using an T forgery okay the only gotcha about",
    "start": "868310",
    "end": "874190"
  },
  {
    "text": "this is that it is as I said sort of a newer feature so depending on the the",
    "start": "874190",
    "end": "879230"
  },
  {
    "text": "browsers that you have to support you may not have you know not have this available to you",
    "start": "879230",
    "end": "884450"
  },
  {
    "text": "so if you have to support like an older Android or iOS version running older versions of those browsers or Safari it",
    "start": "884450",
    "end": "891320"
  },
  {
    "text": "looks like only the current version has it or even the point release so you know I don't know if you can quite totally",
    "start": "891320",
    "end": "898550"
  },
  {
    "text": "rely upon this feature but I think in the next six to twelve months you'll be able to okay alright so that is another",
    "start": "898550",
    "end": "906890"
  },
  {
    "text": "approach for addressing the cross-site request forgery issue is to use same",
    "start": "906890",
    "end": "912050"
  },
  {
    "text": "side cookies and again you're letting the browser do the protection for us okay now there's got to be a down side",
    "start": "912050",
    "end": "919460"
  },
  {
    "text": "the same side cookies which is yeah there's a some architectural constraints there one is that your API has to have",
    "start": "919460",
    "end": "928310"
  },
  {
    "text": "something on the server side that issues the cookie okay some api's aren't built that way right they're built to just",
    "start": "928310",
    "end": "934250"
  },
  {
    "text": "sort of be standalone you call them and they don't think about the fact that there's a browser there I guess that also means that you have to have a",
    "start": "934250",
    "end": "940160"
  },
  {
    "text": "browser being the client application so if that API wanted to be in by some server-to-server call or some",
    "start": "940160",
    "end": "945620"
  },
  {
    "text": "mobile app that you're building yeah those don't do cookies so that's also a problem what else oh of course it",
    "start": "945620",
    "end": "952430"
  },
  {
    "text": "has to be in the same domain right that's what same site cookies mean right if you're trying to if you have to call",
    "start": "952430",
    "end": "957440"
  },
  {
    "text": "these at cross domain you know that's not gonna work either and what else well I guess that the same side cookies are",
    "start": "957440",
    "end": "963500"
  },
  {
    "text": "still new so you know there might be some architectural reasons why you can't use same site cookies okay so what are",
    "start": "963500",
    "end": "969440"
  },
  {
    "text": "we gonna do instead well there's a different architecture that uses something called a token based authentication design if you will a",
    "start": "969440",
    "end": "977300"
  },
  {
    "text": "token again is just another type of credential the main difference is that this is something that needs to be sent",
    "start": "977300",
    "end": "982900"
  },
  {
    "text": "explicitly so this token is usually a JSON web token or a jot if you've ever",
    "start": "982900",
    "end": "988070"
  },
  {
    "text": "heard of those I'm sure you have this is sent as the authorization header explicitly every time you make a call",
    "start": "988070",
    "end": "994460"
  },
  {
    "text": "like an ajax call okay and so again this basically gives us a level of indirection from the browser right so",
    "start": "994460",
    "end": "1000130"
  },
  {
    "text": "it's not a cookie that's a really a browser feature it's just an independent thing that can be sent on every call and",
    "start": "1000130",
    "end": "1006790"
  },
  {
    "text": "it can be validated these are self-contained they have a digital signature so they can't be tampered with they can be obtained by any type of app",
    "start": "1006790",
    "end": "1014800"
  },
  {
    "text": "so it just doesn't have to be just a browser-based application we can call cross-domain there are lots of lots of",
    "start": "1014800",
    "end": "1021010"
  },
  {
    "text": "nice benefits for this architecture it is more complex though okay so this is a trade off for those benefits so how do",
    "start": "1021010",
    "end": "1030459"
  },
  {
    "text": "we get these tokens well guess what there's some protocols for that okay so there are a couple protocols open ID connect and ooofff to open ID Connect is",
    "start": "1030459",
    "end": "1038890"
  },
  {
    "text": "built on top of OAuth 2 so you typically you are using them at the same time and basically the design of these protocols",
    "start": "1038890",
    "end": "1044620"
  },
  {
    "text": "is you actually get two tokens one token is meant to be used to call to the API",
    "start": "1044620",
    "end": "1049630"
  },
  {
    "text": "and that's something called an access token and then there's another token called an identity token that is meant",
    "start": "1049630",
    "end": "1056080"
  },
  {
    "text": "to be consumed by the front end of the application and that's for the authentication piece of things so your",
    "start": "1056080",
    "end": "1061870"
  },
  {
    "text": "JavaScript app might like to say welcome back Brock and then the JavaScript spa wants to call an API okay so the ID",
    "start": "1061870",
    "end": "1068710"
  },
  {
    "text": "token is going to contain my name for the front end and the access token will be used to call to the backend ok so",
    "start": "1068710",
    "end": "1075100"
  },
  {
    "text": "these are the protocols that are the the standards for building a spa to obtain these type of tokens basically",
    "start": "1075100",
    "end": "1082570"
  },
  {
    "text": "the high-level architecture is you're in your spa you are gonna typically redirect the user to someplace that issues these",
    "start": "1082570",
    "end": "1089380"
  },
  {
    "text": "tokens and so we call that thing the token server that implements these protocols the user will do their",
    "start": "1089380",
    "end": "1094480"
  },
  {
    "text": "authentication their username and password login with Google whatever and then it will issue tokens back to the",
    "start": "1094480",
    "end": "1100389"
  },
  {
    "text": "app and then the app will of course use the tokens to call the backend API so really that back-end call is just that",
    "start": "1100389",
    "end": "1107380"
  },
  {
    "text": "access token and that identity token is meant to stay in the spa to let the the",
    "start": "1107380",
    "end": "1112690"
  },
  {
    "text": "front-end know who that user is okay so the details of this sort of redirection",
    "start": "1112690",
    "end": "1120190"
  },
  {
    "text": "to the token server and the you know receiving the results back into your client app the OAuth in the open ID",
    "start": "1120190",
    "end": "1126519"
  },
  {
    "text": "Connect specification describes these as flows or protocol flows and there are a",
    "start": "1126519",
    "end": "1131559"
  },
  {
    "text": "few different flows in the protocol for different application scenarios there's some flows for where you have a service",
    "start": "1131559",
    "end": "1138100"
  },
  {
    "text": "server call and there's no user and there are other flows where you have a front-end and users interacting with the",
    "start": "1138100",
    "end": "1144159"
  },
  {
    "text": "app and we need to do this redirect in the browser so there is actually been",
    "start": "1144159",
    "end": "1149169"
  },
  {
    "text": "some some changes in the the spec recommendations in the last six or nine months a while ago or when the OAuth",
    "start": "1149169",
    "end": "1156580"
  },
  {
    "text": "specs originally came out the flow that they recommended for spas was something called implicit flow and it turns out",
    "start": "1156580",
    "end": "1163960"
  },
  {
    "text": "that the movement and the spec committee is to deprecated the implicit flow mainly because when the implicit flow",
    "start": "1163960",
    "end": "1170919"
  },
  {
    "text": "was first being developed it was way back in 2012 and to use the the code",
    "start": "1170919",
    "end": "1175960"
  },
  {
    "text": "flow which is actually the primary recommended one to use the code flow there are certain API calls that do have",
    "start": "1175960",
    "end": "1182769"
  },
  {
    "text": "to happen cross domain and so at the time to do cross domain calls for that",
    "start": "1182769",
    "end": "1188740"
  },
  {
    "text": "to work the browser had to support course okay well at that time cores really wasn't widely deployed so they",
    "start": "1188740",
    "end": "1195279"
  },
  {
    "text": "couldn't take a dependency on it so that's why they had to come up with this implicit flow which was like a shortcut",
    "start": "1195279",
    "end": "1200679"
  },
  {
    "text": "version an optimized version of these protocol flows to accommodate the fact",
    "start": "1200679",
    "end": "1206049"
  },
  {
    "text": "that these you know browser-based apps were we're a little bit hobbled because of the nature of",
    "start": "1206049",
    "end": "1211399"
  },
  {
    "text": "you know cross-domain calls since then though of course more and more browsers are implementing course and so now the",
    "start": "1211399",
    "end": "1218210"
  },
  {
    "text": "spec committee said hey yeah we've always wanted to do something better more modern or more you know and also a",
    "start": "1218210",
    "end": "1223580"
  },
  {
    "text": "consistent flow so they have now moved back to using the authorization code flow as the primary recommended approach",
    "start": "1223580",
    "end": "1231200"
  },
  {
    "text": "for these spas because again now we can do cores and do these cross-domain calls when you need to invoke back to the",
    "start": "1231200",
    "end": "1237769"
  },
  {
    "text": "token server okay now it turns out their authorization code flow itself has some problems there's a substitution attack",
    "start": "1237769",
    "end": "1245059"
  },
  {
    "text": "called the the code substitution attack and so since then the working groups have also added another RFC to kind of",
    "start": "1245059",
    "end": "1252289"
  },
  {
    "text": "fix the hole or patch it if you will so what they've introduced is another specification called pixie the pke is",
    "start": "1252289",
    "end": "1260299"
  },
  {
    "text": "the acronym there stands for proof key for code exchange so the idea is that you need to be using code flow with this",
    "start": "1260299",
    "end": "1266929"
  },
  {
    "text": "pixie spec to have a nice secure approach for your browser-based",
    "start": "1266929",
    "end": "1272149"
  },
  {
    "text": "application so I'm going to talk through the details of that and hopefully it'll make more sense so what this means is",
    "start": "1272149",
    "end": "1278570"
  },
  {
    "text": "that your spa needs to go and talk to this token server through these protocols for the token server for your",
    "start": "1278570",
    "end": "1285019"
  },
  {
    "text": "app to talk to the token server the token server has to have certain endpoints these endpoints are defined by the specification so one of these",
    "start": "1285019",
    "end": "1291710"
  },
  {
    "text": "endpoints is called the discovery document it has metadata about your token server there's an endpoint called",
    "start": "1291710",
    "end": "1297169"
  },
  {
    "text": "the authorization endpoint this is the interactive endpoint that you redirect the user to and then there's a",
    "start": "1297169",
    "end": "1302690"
  },
  {
    "text": "programmatic endpoint called the token endpoint and that's the one that we will now be invoking to get our tokens so",
    "start": "1302690",
    "end": "1309499"
  },
  {
    "text": "here's what the discovery document might look like it's basically a URL under the",
    "start": "1309499",
    "end": "1314960"
  },
  {
    "text": "base address of your token server I don't know if you guys can see here if this is the base address of your token server then the discovery document is",
    "start": "1314960",
    "end": "1321980"
  },
  {
    "text": "always under this well-known path it serves up Jason so that your client",
    "start": "1321980",
    "end": "1327590"
  },
  {
    "text": "application can then know the other metadata it needs about the token server namely what are the two URLs for the",
    "start": "1327590",
    "end": "1334639"
  },
  {
    "text": "other endpoints that I need to interact with just makes easier for your app to configure against the token server so",
    "start": "1334639",
    "end": "1341629"
  },
  {
    "text": "the protocol works like this their users in the spa basically the the spouse's a I need you",
    "start": "1341629",
    "end": "1346940"
  },
  {
    "text": "to go login okay so it ends up redirecting the user to the authorized endpoint okay again to know the",
    "start": "1346940",
    "end": "1352640"
  },
  {
    "text": "authorized endpoint it probably first made an AJAX call that loads the discovery document then we know the URL",
    "start": "1352640",
    "end": "1358640"
  },
  {
    "text": "we redirect the user to that authorized endpoint there are several parameters that are passed to the authorized endpoint to let",
    "start": "1358640",
    "end": "1365540"
  },
  {
    "text": "the token server know what app is making the request that's the client ID and where to send the results which is the",
    "start": "1365540",
    "end": "1371630"
  },
  {
    "text": "redirect URI and the one thing about which protocol flow here this parameter called response type that is actually",
    "start": "1371630",
    "end": "1378890"
  },
  {
    "text": "what is controlling the fact that we are now using code flow instead of the prior implicit flow if you are familiar with",
    "start": "1378890",
    "end": "1385160"
  },
  {
    "text": "that so there's some other parameters here the other main one here is the fact",
    "start": "1385160",
    "end": "1390740"
  },
  {
    "text": "that I want some access to some identity information so this open ID in profile",
    "start": "1390740",
    "end": "1395900"
  },
  {
    "text": "these are called scopes which allow the app to get user information this is what",
    "start": "1395900",
    "end": "1401030"
  },
  {
    "text": "is going to affect the claims that come back in this identity token so the front",
    "start": "1401030",
    "end": "1406970"
  },
  {
    "text": "end can say welcome back brach you know your first name last name whatever other information and then of course Oh",
    "start": "1406970",
    "end": "1412580"
  },
  {
    "text": "actually emails on there as well I missed that one and then the other thing that you want access to are a",
    "start": "1412580",
    "end": "1418190"
  },
  {
    "text": "certain api's so there are other scopes here that represent the api's that the",
    "start": "1418190",
    "end": "1423500"
  },
  {
    "text": "spa wants to invoke and so api one and api to those are going to affect the",
    "start": "1423500",
    "end": "1428809"
  },
  {
    "text": "access token and allow you to call those two different api's okay so what happens",
    "start": "1428809",
    "end": "1435260"
  },
  {
    "text": "then is the request goes to the token server the user then will log into the",
    "start": "1435260",
    "end": "1440450"
  },
  {
    "text": "token server with whatever you know type of account the user will have there so it could be password could be you know",
    "start": "1440450",
    "end": "1445940"
  },
  {
    "text": "social logins could be a business login Federation with Azure Active Directory whatever and then the token service is",
    "start": "1445940",
    "end": "1452090"
  },
  {
    "text": "great you're now logged in we know who you are and you will get a cookie at the token server that represents your single",
    "start": "1452090",
    "end": "1458030"
  },
  {
    "text": "sign-on session and then the token server redirects back to the application",
    "start": "1458030",
    "end": "1463220"
  },
  {
    "text": "with a parameter called a code this is what's called the authorization code this is not the access token this is not",
    "start": "1463220",
    "end": "1471020"
  },
  {
    "text": "the identity token but it is the thing that will get you to the tokens okay now",
    "start": "1471020",
    "end": "1476330"
  },
  {
    "text": "in the implicit flow the prior flow that was dead brocaded what would happen is the tokens",
    "start": "1476330",
    "end": "1481440"
  },
  {
    "text": "would be sent directly in this in this URL okay right there in the URL back to the spa the spa could then just read",
    "start": "1481440",
    "end": "1488070"
  },
  {
    "text": "them and start using them okay that was the main complaint about the prior flow is the fact that it's in the URL and",
    "start": "1488070",
    "end": "1495690"
  },
  {
    "text": "it's in your history right of your browser and maybe your browser is",
    "start": "1495690",
    "end": "1500730"
  },
  {
    "text": "pulling in you know images from someplace and those may leak out as refer headers okay now there were things",
    "start": "1500730",
    "end": "1507660"
  },
  {
    "text": "to do to mitigate against this like the parameters were actually passed in the hash fragment that was supposed to",
    "start": "1507660",
    "end": "1512700"
  },
  {
    "text": "protect against that the history was still a problem but you could write JavaScript to clear the history so the",
    "start": "1512700",
    "end": "1518760"
  },
  {
    "text": "older-style was sort of the best that we had and there were mitigating could do to clean it up and make it a little",
    "start": "1518760",
    "end": "1524309"
  },
  {
    "text": "tighter but anyway the spec committee said no we really want the spec to just have built in a nice clean approach to",
    "start": "1524309",
    "end": "1530490"
  },
  {
    "text": "making sure that you don't have to know to do all these extra things so that's why we now get this code okay now the",
    "start": "1530490",
    "end": "1537000"
  },
  {
    "text": "code is received back in your spa and the spa will now make programmatic calls",
    "start": "1537000",
    "end": "1542790"
  },
  {
    "text": "to the token server to that token endpoint that I mentioned and this is where we exchanged the code for the",
    "start": "1542790",
    "end": "1550350"
  },
  {
    "text": "tokens okay which is the access token is what we're gonna use to call our API so",
    "start": "1550350",
    "end": "1555510"
  },
  {
    "text": "you might look at this and say hmmm well if we change the protocol flow to use",
    "start": "1555510",
    "end": "1560610"
  },
  {
    "text": "code flow because we didn't like the stuff in the URL was maybe you know you",
    "start": "1560610",
    "end": "1565830"
  },
  {
    "text": "could somehow capture that well what would prevent us from capturing the code as well and just",
    "start": "1565830",
    "end": "1570960"
  },
  {
    "text": "making the same call to this token endpoint to get the tokens okay now if you've ever done o author open ID",
    "start": "1570960",
    "end": "1576600"
  },
  {
    "text": "Connect in the past you've probably seen sometimes if you're building a server-side app you'll get a client ID",
    "start": "1576600",
    "end": "1582419"
  },
  {
    "text": "and a client secret and it's that server-side secret that is protecting the code so that nobody can steal it and",
    "start": "1582419",
    "end": "1588929"
  },
  {
    "text": "use it as an attack vector well in a spa can we embed a secret somewhere in your",
    "start": "1588929",
    "end": "1595260"
  },
  {
    "text": "JavaScript yeah not really okay so this is where the other spec that I mentioned proof key for code exchange or pixie",
    "start": "1595260",
    "end": "1602250"
  },
  {
    "text": "comes in what it does is it allows us to protect the code here with sort of a",
    "start": "1602250",
    "end": "1607830"
  },
  {
    "text": "dynamic or a temporary secret and so the way that works is I'm going to go a couple slides notice them when we made",
    "start": "1607830",
    "end": "1614810"
  },
  {
    "text": "a request of the authorized endpoint this is basically using code flow with pixie by that extra parameter called",
    "start": "1614810",
    "end": "1621350"
  },
  {
    "text": "code challenge what the spa is going to do before it makes the request out to the to the authorized endpoint is it",
    "start": "1621350",
    "end": "1627680"
  },
  {
    "text": "dynamically creates a secret and we're only ever going to use the secret for this one exchange with the token server",
    "start": "1627680",
    "end": "1633140"
  },
  {
    "text": "so we don't try to store it anywhere we just create it and hold it in memory so you have a secret the protocol then has",
    "start": "1633140",
    "end": "1641210"
  },
  {
    "text": "you hash that secret and that's this code challenge parameter so what we're",
    "start": "1641210",
    "end": "1646460"
  },
  {
    "text": "doing is we're sending a hash of a dynamically generated secret okay then once we get back to the code the token",
    "start": "1646460",
    "end": "1654050"
  },
  {
    "text": "server when it generates the code it's also storing the hashed version of the secret okay",
    "start": "1654050",
    "end": "1659810"
  },
  {
    "text": "right so now your JavaScript gets back this code it makes an ajax call back to",
    "start": "1659810",
    "end": "1666650"
  },
  {
    "text": "the token server back to the token endpoint it passes its client ID the code and then the original dynamically",
    "start": "1666650",
    "end": "1674360"
  },
  {
    "text": "generated secret okay that's by the way called the code verifier so on the token",
    "start": "1674360",
    "end": "1680060"
  },
  {
    "text": "server we had the hashed version so what it says is hey I see your code great I can look up my data in the database I",
    "start": "1680060",
    "end": "1686390"
  },
  {
    "text": "have your hash secret oh but you're passing to the plaintext as the code verifier so the token server will hash",
    "start": "1686390",
    "end": "1692630"
  },
  {
    "text": "the incoming code verifier compare the hashes and now know that the app making",
    "start": "1692630",
    "end": "1698000"
  },
  {
    "text": "the back-channel call or to the token endpoint call with this code is the same app that made the front channel call",
    "start": "1698000",
    "end": "1704360"
  },
  {
    "text": "so it's guaranteeing or ensuring that if somebody has intercepted this code in",
    "start": "1704360",
    "end": "1709760"
  },
  {
    "text": "transit that you know they're running on some other server they won't be able to actually exchange the code for the",
    "start": "1709760",
    "end": "1715310"
  },
  {
    "text": "tokens okay that's what pixie is all about and it turns out that in the spec committee all of the flows that we've",
    "start": "1715310",
    "end": "1722870"
  },
  {
    "text": "ever used in the past this is now v recommended flow really for all of them so if you have a server-side web",
    "start": "1722870",
    "end": "1728780"
  },
  {
    "text": "application switch over and you can use code flow with pixie instead of like",
    "start": "1728780",
    "end": "1734210"
  },
  {
    "text": "hybrid flow if you're running a mobile app right you can run a mobile app do the same protocol flow code flow with",
    "start": "1734210",
    "end": "1741170"
  },
  {
    "text": "pixie okay so really the nice thing about this is that you know if you've ever learned about",
    "start": "1741170",
    "end": "1747049"
  },
  {
    "text": "the stuff in the last two to three years you have all these flows you have to remember and hybrid flow in this flow",
    "start": "1747049",
    "end": "1752299"
  },
  {
    "text": "and that flow it's really simple now for an interactive app with a human in front of it code flow with pixie right that's",
    "start": "1752299",
    "end": "1759139"
  },
  {
    "text": "it just one to learn okay oh and by the way the asp.net core team in 3.0 is",
    "start": "1759139",
    "end": "1765590"
  },
  {
    "text": "adding code flow with pixie to their Open ID Connect middleware for your MVC",
    "start": "1765590",
    "end": "1771380"
  },
  {
    "text": "style apps okay good so the results from that token endpoint are the identity",
    "start": "1771380",
    "end": "1778909"
  },
  {
    "text": "token and the access token I mentioned that these tokens are the identity token is something called a jot this is",
    "start": "1778909",
    "end": "1785210"
  },
  {
    "text": "basically a JSON data structure that is encoded has a digital signature on it",
    "start": "1785210",
    "end": "1791230"
  },
  {
    "text": "contains some protocol claims but the other main thing it contains are the claims the information about your user",
    "start": "1791230",
    "end": "1797179"
  },
  {
    "text": "that you had asked for with those scopes so we asked for the scope open ID that",
    "start": "1797179",
    "end": "1802909"
  },
  {
    "text": "means I want the subject claim which is the users unique ID I also asked for the email scope which means I want some",
    "start": "1802909",
    "end": "1809840"
  },
  {
    "text": "email claims I also asked I think for profile that which is like your name your first name your last name things",
    "start": "1809840",
    "end": "1815720"
  },
  {
    "text": "like that maybe we didn't get those back you know but the idea is those are the claims you're getting back and these are",
    "start": "1815720",
    "end": "1821210"
  },
  {
    "text": "meant this ID token and the claims inside are meant for the front end portion of the app the ID token is only",
    "start": "1821210",
    "end": "1827779"
  },
  {
    "text": "used by the but the spot itself okay then we have this access token and that's what's used to actually make our",
    "start": "1827779",
    "end": "1834260"
  },
  {
    "text": "Ajax call back to the server and of course on the server side you have to",
    "start": "1834260",
    "end": "1839299"
  },
  {
    "text": "you know validate that so here's some",
    "start": "1839299",
    "end": "1845299"
  },
  {
    "text": "JavaScript that shows you how old I am right basically doing some old-school xml httprequest I'm gonna set the",
    "start": "1845299",
    "end": "1852649"
  },
  {
    "text": "request header which is the authorization header and you use the bearer scheme and that's where you pass along the access token and this is how",
    "start": "1852649",
    "end": "1859610"
  },
  {
    "text": "the token gets sent on every call to the token server and then you process the results you know normally okay and then",
    "start": "1859610",
    "end": "1867320"
  },
  {
    "text": "on the server the web API that you're actually invoking needs to author you know validate that incoming access token",
    "start": "1867320",
    "end": "1873740"
  },
  {
    "text": "and if you're using asp.net core or oh and katana there's",
    "start": "1873740",
    "end": "1879050"
  },
  {
    "text": "helpers in those frameworks for that so I understand people use other tech stacks as well but whatever tech stack you're using there's gonna be some",
    "start": "1879050",
    "end": "1885410"
  },
  {
    "text": "equivalent piece of middleware or infrastructure server side that will validate these tokens okay okay so I do",
    "start": "1885410",
    "end": "1892310"
  },
  {
    "text": "have some sample code so let's switch over and do that I just wanted to kind of get everybody on the same page in terms of the protocol flows what I have",
    "start": "1892310",
    "end": "1900320"
  },
  {
    "text": "here is now a very very simple spa application okay and again you can",
    "start": "1900320",
    "end": "1905600"
  },
  {
    "text": "obviously tell my design skills are on par with my security skills here so here",
    "start": "1905600",
    "end": "1911330"
  },
  {
    "text": "I have a very simple spa or JavaScript application I'm gonna go log the user in I'm gonna then you know get some tokens back I'm",
    "start": "1911330",
    "end": "1918320"
  },
  {
    "text": "gonna say oh you're Brock welcome back have my API access token to call my API",
    "start": "1918320",
    "end": "1923570"
  },
  {
    "text": "and then we'll talk a couple other application things like renewing tokens there's a concern there and of course",
    "start": "1923570",
    "end": "1929390"
  },
  {
    "text": "logging the user out okay so the way this works is that I'm actually using a",
    "start": "1929390",
    "end": "1934670"
  },
  {
    "text": "helper library called OAD C client this is a JavaScript library that I actually",
    "start": "1934670",
    "end": "1940340"
  },
  {
    "text": "built and had certified by the Open ID foundation to be spec compliant at the",
    "start": "1940340",
    "end": "1946460"
  },
  {
    "text": "time I was building this stuff there were no JavaScript libraries out there to do these protocols so I had to build",
    "start": "1946460",
    "end": "1951710"
  },
  {
    "text": "one okay and so the idea is I'm pulling this in here right this library I have my you know event handlers for my",
    "start": "1951710",
    "end": "1958400"
  },
  {
    "text": "buttons and then what I'm gonna do is set up some configuration and this is configuring a building the configuration",
    "start": "1958400",
    "end": "1964880"
  },
  {
    "text": "for my JavaScript client application so there are some settings here like what's the token server that I'm trusting so I",
    "start": "1964880",
    "end": "1971720"
  },
  {
    "text": "just have a test token server up up in the cloud this is actually a copy an instance of",
    "start": "1971720",
    "end": "1978710"
  },
  {
    "text": "identity server we have to configure things like the client ID the response type in the scope those should look",
    "start": "1978710",
    "end": "1984950"
  },
  {
    "text": "familiar from the prior slide because these are the parameters that we send on the protocol this library does in fact",
    "start": "1984950",
    "end": "1991370"
  },
  {
    "text": "support code flow with pixee ok so there's actually a customer here in europe that sponsored that feature at",
    "start": "1991370",
    "end": "1996920"
  },
  {
    "text": "the end of last year so thanks for that and so here we are now with support for",
    "start": "1996920",
    "end": "2002710"
  },
  {
    "text": "your spa for the the proper you know the recommended protocol this only supports",
    "start": "2002710",
    "end": "2007780"
  },
  {
    "text": "code flow with pixie right so you can pop that in here and it's going to automatically do the pics",
    "start": "2007780",
    "end": "2012790"
  },
  {
    "text": "peace right so you configure this stuff we come down here and then we create an",
    "start": "2012790",
    "end": "2018340"
  },
  {
    "text": "instance of this user manager class the user manager is going to do two major things for us one is all the protocol",
    "start": "2018340",
    "end": "2024820"
  },
  {
    "text": "work so it knows how to build the URL to the authorized endpoint and make calls back to the token endpoint as I",
    "start": "2024820",
    "end": "2030850"
  },
  {
    "text": "described earlier it also does your session management within the spa which means when we get",
    "start": "2030850",
    "end": "2036520"
  },
  {
    "text": "the results back we have to kind of keep track that there is a user sitting here and so really what that means is that",
    "start": "2036520",
    "end": "2042130"
  },
  {
    "text": "there's some storage in the browser that the these results are kept in and that's",
    "start": "2042130",
    "end": "2048159"
  },
  {
    "text": "where your tokens reside okay so when we load up the application here what we're",
    "start": "2048160",
    "end": "2053470"
  },
  {
    "text": "gonna do is invoke this first helper here called get user this will let you know well this will attempt to read the",
    "start": "2053470",
    "end": "2059919"
  },
  {
    "text": "storage and see if there is in fact already a session so if there is a session you'll get back a user object",
    "start": "2059919",
    "end": "2066100"
  },
  {
    "text": "which is really just a deserialized object from the storage the JSON that's in storage great so we'll have a user",
    "start": "2066100",
    "end": "2072790"
  },
  {
    "text": "and this user object has your tokens your ID token your access token the access token being the thing that you",
    "start": "2072790",
    "end": "2078490"
  },
  {
    "text": "care about to call your API and it will also have any of the claims that came back in the ID token so this library",
    "start": "2078490",
    "end": "2085330"
  },
  {
    "text": "deals with parsing the ID token and doing all of the the work necessary to get the the users information for you so",
    "start": "2085330",
    "end": "2092139"
  },
  {
    "text": "there's a profile property where all those things hang off of okay so if you have a session you're good to go if not",
    "start": "2092140",
    "end": "2098770"
  },
  {
    "text": "well then I just print out the fact that I don't have a user right now and which is exactly why that's being printed okay",
    "start": "2098770",
    "end": "2104550"
  },
  {
    "text": "all right so of course when I click my login button I'm gonna go trigger the",
    "start": "2104550",
    "end": "2109930"
  },
  {
    "text": "redirect to go login right this is like sending your user to your login page except it just happens to be in a different domain it's the token server",
    "start": "2109930",
    "end": "2116170"
  },
  {
    "text": "that you've established trust with so we're gonna send the user away and when they come back as you notice my redirect",
    "start": "2116170",
    "end": "2123460"
  },
  {
    "text": "URI I'm sending them back to my callback to HTML page so in here I'm basically",
    "start": "2123460",
    "end": "2128730"
  },
  {
    "text": "reinstating the user manager and calling the corresponding paired method if you",
    "start": "2128730",
    "end": "2134710"
  },
  {
    "text": "will so I do sign-in redirect to get the user out and then I'm using sign and",
    "start": "2134710",
    "end": "2140560"
  },
  {
    "text": "redirect callback to process the results when they come back in okay inside of this call it does",
    "start": "2140560",
    "end": "2146770"
  },
  {
    "text": "it grabs the code from the URL it makes the call back to the token server exchanging it for the tokens and doing",
    "start": "2146770",
    "end": "2154450"
  },
  {
    "text": "the rest of the protocol work necessary to know that that's all valid ok it then takes the results stores it in storage",
    "start": "2154450",
    "end": "2162099"
  },
  {
    "text": "right which is your tokens and the information about your user and then we'll raise the success event here and",
    "start": "2162099",
    "end": "2168040"
  },
  {
    "text": "you'll be able to then do whatever you need to do next which in this case I'm just gonna take the user back to the my little home page okay so then back on my",
    "start": "2168040",
    "end": "2175510"
  },
  {
    "text": "home page when I reload right because that storage will have survived the page",
    "start": "2175510",
    "end": "2180550"
  },
  {
    "text": "redirect yeah I'll just load up and now I should see that we have a user session ok so let's give that a try I will call",
    "start": "2180550",
    "end": "2187990"
  },
  {
    "text": "login and actually not only do that one more time in the debugger here or not",
    "start": "2187990",
    "end": "2193390"
  },
  {
    "text": "the debugger per se but the network trace right so what I'll do here call",
    "start": "2193390",
    "end": "2198730"
  },
  {
    "text": "login ok so a couple things that happen first is for my JavaScript app to first",
    "start": "2198730",
    "end": "2204609"
  },
  {
    "text": "know what the URL is for the authorization endpoint it first actually queries that discovery endpoint",
    "start": "2204609",
    "end": "2211450"
  },
  {
    "text": "that I mentioned and it's getting back all that JSON and with the JSON now it knows the actual URL for the authorized",
    "start": "2211450",
    "end": "2217750"
  },
  {
    "text": "endpoint and as you can tell it has built up the parameters for that request",
    "start": "2217750",
    "end": "2223599"
  },
  {
    "text": "including our client ID our redirect URI here is the fact we're easing code flow here the Scopes I configured and if you",
    "start": "2223599",
    "end": "2230890"
  },
  {
    "text": "look here aha here's the code challenge that I talked about so that's that pic",
    "start": "2230890",
    "end": "2236470"
  },
  {
    "text": "see that dynamic secret that's being generated hashed and sent along great so",
    "start": "2236470",
    "end": "2242349"
  },
  {
    "text": "now let's come in here and actually log in Alice and Alice of course ok we come",
    "start": "2242349",
    "end": "2248770"
  },
  {
    "text": "back to my application and where did we pick up here so we came back to my application we ended up going back to my",
    "start": "2248770",
    "end": "2255820"
  },
  {
    "text": "call back page from the token server the token server had sent back the code all right a few other parameters coming back",
    "start": "2255820",
    "end": "2262000"
  },
  {
    "text": "my call back page loads up my library re queries the discovery document so it now",
    "start": "2262000",
    "end": "2267700"
  },
  {
    "text": "knows the token endpoint and if you see the call as being made to the token endpoint and if we scroll down far",
    "start": "2267700",
    "end": "2273490"
  },
  {
    "text": "enough you'll see that the authorization code is being passed along with the code verifier which is the plain text version",
    "start": "2273490",
    "end": "2280570"
  },
  {
    "text": "of that dynamic secret okay and what came back from that was a few other things like our tokens and after all of",
    "start": "2280570",
    "end": "2287650"
  },
  {
    "text": "that then the session was established by putting a record in session storage so",
    "start": "2287650",
    "end": "2295960"
  },
  {
    "text": "the library chooses session storage by default because that's just per window so if you close the browser or close the",
    "start": "2295960",
    "end": "2302650"
  },
  {
    "text": "window that data is gone you can swap this out and use something else like local storage or even indexdb but I",
    "start": "2302650",
    "end": "2311280"
  },
  {
    "text": "think I actually prefer the the session storage approach and so what's in here is you can tell is just a JSON object",
    "start": "2311280",
    "end": "2317920"
  },
  {
    "text": "that's been serialized and it has the access token and the ID token and this profile then is where all the claims",
    "start": "2317920",
    "end": "2324730"
  },
  {
    "text": "came back that I had mentioned that are from the ID token okay so now this",
    "start": "2324730",
    "end": "2330250"
  },
  {
    "text": "access token if I look at the sky and we're on a website called JMS pop the",
    "start": "2330250",
    "end": "2338290"
  },
  {
    "text": "access token in here you can see that now this access token is intended to be used at my API okay and this has things",
    "start": "2338290",
    "end": "2346960"
  },
  {
    "text": "like hey here's your users unique ID subject ID one that's Alice's one okay",
    "start": "2346960",
    "end": "2352080"
  },
  {
    "text": "so anyway that's the access token that I would then send to my API so this",
    "start": "2352080",
    "end": "2357160"
  },
  {
    "text": "storage here for my user right has all these things in it and when I call my get user well as you can tell that user",
    "start": "2357160",
    "end": "2364180"
  },
  {
    "text": "object I got back is just the deserialized object and then I'm just rerender it on the page so we can see",
    "start": "2364180",
    "end": "2369550"
  },
  {
    "text": "what's inside so yeah when you make that call back to get the user you have the dot access token and you have dot",
    "start": "2369550",
    "end": "2375550"
  },
  {
    "text": "profile dot name dot email dot whatever you whatever you need okay all right so",
    "start": "2375550",
    "end": "2382540"
  },
  {
    "text": "how do we then invoke the API well of course I met a little call API method here I'm gonna reload my user I'm doing",
    "start": "2382540",
    "end": "2391090"
  },
  {
    "text": "my old-school Ajax call I'm sending my request my authorization header based on",
    "start": "2391090",
    "end": "2396670"
  },
  {
    "text": "the access token and if that all works I should be able to see that yeah I was",
    "start": "2396670",
    "end": "2402970"
  },
  {
    "text": "able to pass that access token and just to show you on the network here right I was able to pass that bearer token along",
    "start": "2402970",
    "end": "2409480"
  },
  {
    "text": "and here it is in the outgoing header okay the API then was a",
    "start": "2409480",
    "end": "2414550"
  },
  {
    "text": "to validate it and all the API is doing is then just echoing back the contents of the access token just so we can see",
    "start": "2414550",
    "end": "2421030"
  },
  {
    "text": "that it worked okay great",
    "start": "2421030",
    "end": "2426720"
  },
  {
    "text": "cool any questions about that yeah talk loud so why is the secret passes plain",
    "start": "2427710",
    "end": "2442210"
  },
  {
    "text": "text on the token request because you have to prove that you have the secret",
    "start": "2442210",
    "end": "2448140"
  },
  {
    "text": "yeah then then what was the point of hashing it in the first place the hash",
    "start": "2449370",
    "end": "2454540"
  },
  {
    "text": "becomes the secret itself so yeah I see what you're saying they actually have a",
    "start": "2454540",
    "end": "2459730"
  },
  {
    "text": "provision in the SPAC if if your client side app can't do hashing you can just do plain text but yeah I mean that's how",
    "start": "2459730",
    "end": "2468100"
  },
  {
    "text": "the spec was written so oh so the",
    "start": "2468100",
    "end": "2480490"
  },
  {
    "text": "question is just related probably to my comment about all the other protocol flows are now using code flow with pixie",
    "start": "2480490",
    "end": "2487030"
  },
  {
    "text": "or that's an encouraged flow yeah I mean in a sense in theory the client I do",
    "start": "2487030",
    "end": "2493960"
  },
  {
    "text": "could go away I'm sorry the client secret could go away which is what you asked for there might be other interactions though",
    "start": "2493960",
    "end": "2500980"
  },
  {
    "text": "and that your app does need to make to the token server for other things or that client secret still is needed okay",
    "start": "2500980",
    "end": "2507790"
  },
  {
    "text": "so refresh tokens would be one of the prime examples of that okay now one thing I actually want to show you here",
    "start": "2507790",
    "end": "2514270"
  },
  {
    "text": "is that notice I did not obtain a refresh token in this workflow so for those of you who know about refresh",
    "start": "2514270",
    "end": "2520180"
  },
  {
    "text": "tokens it's a way to renew access and get new token so that's actually the next thing I'm going to talk about which",
    "start": "2520180",
    "end": "2525460"
  },
  {
    "text": "is this renew token so for server side apps sure you can still use refresh",
    "start": "2525460",
    "end": "2531910"
  },
  {
    "text": "tokens the way we've been using them for a long time but in that guidance that",
    "start": "2531910",
    "end": "2537100"
  },
  {
    "text": "was put out by the IETF to now ease that you can move to code flow with with pixie they actually have deliberate a",
    "start": "2537100",
    "end": "2544450"
  },
  {
    "text": "section here that explicitly indicates reefer tokens in the spa since you don't have a",
    "start": "2544450",
    "end": "2550960"
  },
  {
    "text": "secret are very powerful things and if that Refresh token is ever exfiltrated",
    "start": "2550960",
    "end": "2556420"
  },
  {
    "text": "from your app now an attacker can just keep getting new access tokens without",
    "start": "2556420",
    "end": "2562150"
  },
  {
    "text": "you know on behalf of the user without anybody you know necessarily knowing now there are other mitigations",
    "start": "2562150",
    "end": "2568600"
  },
  {
    "text": "you can take other hardening you can do in your token server you can do one-time Refresh tokens you can invalidate the",
    "start": "2568600",
    "end": "2574570"
  },
  {
    "text": "entire session if that fails but I've not seen any token server even identity",
    "start": "2574570",
    "end": "2580030"
  },
  {
    "text": "server itself doesn't have all the the protection measures specifically for",
    "start": "2580030",
    "end": "2585190"
  },
  {
    "text": "refresh tokens without secrets for spas so there are things that that spec",
    "start": "2585190",
    "end": "2590850"
  },
  {
    "text": "suggests but they're still working on it and they really need to flesh out the guidance there so at this point in time",
    "start": "2590850",
    "end": "2598170"
  },
  {
    "text": "it's not really recommended to use refresh tokens from these spas okay now",
    "start": "2598170",
    "end": "2603610"
  },
  {
    "text": "the thing that we kind of want in the future is something called a a sender",
    "start": "2603610",
    "end": "2610840"
  },
  {
    "text": "constrained token and a sender constrained token is a token that basically is tied to the caller so there",
    "start": "2610840",
    "end": "2618220"
  },
  {
    "text": "was a feature a while ago that the that the HTML or HTTP spec group was working",
    "start": "2618220",
    "end": "2624610"
  },
  {
    "text": "on called HTTP token binding and it was basically a specification that allowed you to issue a token and they I think",
    "start": "2624610",
    "end": "2631420"
  },
  {
    "text": "intended it for cookies but we could also do it for these type of tokens where the cookie when the website issued",
    "start": "2631420",
    "end": "2636850"
  },
  {
    "text": "it the cookie would actually be cryptographically bound to the TLS session so if somebody ever stole the",
    "start": "2636850",
    "end": "2643840"
  },
  {
    "text": "cookie and tried to submit it from another TLS connection it would be would detect this and reject it so that same",
    "start": "2643840",
    "end": "2650110"
  },
  {
    "text": "technique could be added to these tokens okay that's the concept of a sender constrained token somebody else can't",
    "start": "2650110",
    "end": "2656710"
  },
  {
    "text": "still send that token unfortunately so the OAuth working group went and tried to you know start lever building new",
    "start": "2656710",
    "end": "2663220"
  },
  {
    "text": "specs for tokens on top of this HTTP token binding and then Google one day",
    "start": "2663220",
    "end": "2668470"
  },
  {
    "text": "said Oh where's she gonna remove that feature from our browser we don't think it's terribly useful okay and because",
    "start": "2668470",
    "end": "2674230"
  },
  {
    "text": "Google has you know such dominance with their their you know users using browser browser it kind of killed the whole",
    "start": "2674230",
    "end": "2681970"
  },
  {
    "text": "possible of us relying upon that as a technique so there has now been work in the OAuth",
    "start": "2681970",
    "end": "2688300"
  },
  {
    "text": "working group on a new way to do sender constrain tokens for JavaScript apps something called deep hop it's",
    "start": "2688300",
    "end": "2695740"
  },
  {
    "text": "demonstration of a proof of possession token and it's basically relying upon the same concept web crypto and",
    "start": "2695740",
    "end": "2702240"
  },
  {
    "text": "basically trying to have some sort of private you know public private key pair in that instance of the browser and you",
    "start": "2702240",
    "end": "2708730"
  },
  {
    "text": "when you're doing your connection to the token server the tokens you get back are now tied to that so if the token is ever",
    "start": "2708730",
    "end": "2715210"
  },
  {
    "text": "exfiltrated it'll be detected and prevented so until we have that sort of sorted out okay",
    "start": "2715210",
    "end": "2721030"
  },
  {
    "text": "you know the recommendation is stay away from refresh tokens in the spa ok that was like the longest answer for a",
    "start": "2721030",
    "end": "2727780"
  },
  {
    "text": "question I think so anyway ok so I have a few other few minutes more I can talk about a couple more topics here so the",
    "start": "2727780",
    "end": "2734140"
  },
  {
    "text": "next one is obviously access token that you got back is usually only good for about one hour and so the app can use",
    "start": "2734140",
    "end": "2740680"
  },
  {
    "text": "the access token over and over and over at that API or however many API is it's good for for that hour but at some point",
    "start": "2740680",
    "end": "2746710"
  },
  {
    "text": "it's going to expire and you know like a cookie and a normal web app you can",
    "start": "2746710",
    "end": "2752050"
  },
  {
    "text": "issue your own new cookie you can slide your own cookie because your app is the one consuming it and your the app will",
    "start": "2752050",
    "end": "2758109"
  },
  {
    "text": "app is the one creating it we can't do that here because our app didn't create the token and the access token it was",
    "start": "2758109",
    "end": "2763839"
  },
  {
    "text": "the token server so what we need to do is kind of like go back to the token server right see look at the bottom I",
    "start": "2763839",
    "end": "2770230"
  },
  {
    "text": "have my expiration here I'm going back to the token server and I'm going back to the authorized endpoint the same one",
    "start": "2770230",
    "end": "2776589"
  },
  {
    "text": "I used at the very beginning to login it's immediately coming back because I have a single sign-on session right I",
    "start": "2776589",
    "end": "2782650"
  },
  {
    "text": "have a cookie at the token server that represents my session over there so this is actually working just fine",
    "start": "2782650",
    "end": "2789190"
  },
  {
    "text": "or you could probably tell I'm getting new tokens as well if you can see that yeah I'm still getting new tokens not a",
    "start": "2789190",
    "end": "2795130"
  },
  {
    "text": "problem the only problem is the usability is pretty bad ok so it turns out what the spec has you do is that",
    "start": "2795130",
    "end": "2802329"
  },
  {
    "text": "same login request right that you're happening in the main window you can use that sort of time-honored like",
    "start": "2802329",
    "end": "2809560"
  },
  {
    "text": "rock-solid HTML technology that we've been using for years and years and years to make requests to other websites",
    "start": "2809560",
    "end": "2816460"
  },
  {
    "text": "so the user can't see it and that is iframes exactly okay so basically we can",
    "start": "2816460",
    "end": "2823090"
  },
  {
    "text": "use an iframe or make the same request in an iframe to obtain new tokens and that's exactly what my little renew",
    "start": "2823090",
    "end": "2829930"
  },
  {
    "text": "method here is going to do is if I scroll down I've wired it up to my",
    "start": "2829930",
    "end": "2835450"
  },
  {
    "text": "method called silent of course because it's a silent renew and the user manager in the library that I'm showing you has",
    "start": "2835450",
    "end": "2842020"
  },
  {
    "text": "a sign in silence method so what this does is it creates the exact same authorized request it actually has one",
    "start": "2842020",
    "end": "2849190"
  },
  {
    "text": "more additional parameter called prompt equals none and it's letting the token server know that this is really in an",
    "start": "2849190",
    "end": "2855580"
  },
  {
    "text": "invisible request you know it's in a hidden iframe so if it needs to show an error page don't and just immediately",
    "start": "2855580",
    "end": "2861790"
  },
  {
    "text": "return back to the app so then this will make the request of the token server in the iframe I don't know if you noticed",
    "start": "2861790",
    "end": "2868660"
  },
  {
    "text": "up here at the top but we had a silent redirect URI which was where the silent",
    "start": "2868660",
    "end": "2875560"
  },
  {
    "text": "response will be processed and the remain difference between this one is the response comes into the iframe and",
    "start": "2875560",
    "end": "2882250"
  },
  {
    "text": "the iframe isn't the one that wants to deal with the tokens it wants to send that up to the parent window so the",
    "start": "2882250",
    "end": "2888100"
  },
  {
    "text": "parent window will then actually complete the processing and now have updated tokens okay this is another",
    "start": "2888100",
    "end": "2894670"
  },
  {
    "text": "reason why by the way I am every time by",
    "start": "2894670",
    "end": "2899860"
  },
  {
    "text": "calling my API I am reloading my user from storage because the silent renew is just",
    "start": "2899860",
    "end": "2907030"
  },
  {
    "text": "updating storage right and you don't want a cached version of the old access",
    "start": "2907030",
    "end": "2912400"
  },
  {
    "text": "token you want to every time you're gonna call the API load the latest version okay so that's the that's why",
    "start": "2912400",
    "end": "2918130"
  },
  {
    "text": "the call API is doing this okay so if I hit f12 here go to my elements window",
    "start": "2918130",
    "end": "2923890"
  },
  {
    "text": "and doober a new token I don't know if you guys can see at the bottom there's an iframe being created every time I",
    "start": "2923890",
    "end": "2930910"
  },
  {
    "text": "click the button here and it's being successful obviously it says here silent render success so if I keep hitting this",
    "start": "2930910",
    "end": "2938040"
  },
  {
    "text": "you should see the expiration at the bottom is getting updated and the values and that token are being updated and",
    "start": "2938040",
    "end": "2944140"
  },
  {
    "text": "then that can be used to call the API and that's the approach in your JavaScript app where",
    "start": "2944140",
    "end": "2950140"
  },
  {
    "text": "you keep getting new tokens okay all right a couple other things I have Oh",
    "start": "2950140",
    "end": "2956319"
  },
  {
    "text": "actually have a few minutes left here so you might ask okay well when do I renew",
    "start": "2956319",
    "end": "2962349"
  },
  {
    "text": "this token well there are two approaches one is you could keep using the access",
    "start": "2962349",
    "end": "2968079"
  },
  {
    "text": "token at the API and you'll get a 200 okay 200 okay 200 okay and then all of a",
    "start": "2968079",
    "end": "2973720"
  },
  {
    "text": "sudden you'll get a 401 ok 401 when you're invoking an API means go get a",
    "start": "2973720",
    "end": "2979660"
  },
  {
    "text": "new token so that's pretty easy you could just hook every where you get you know response back from your API check",
    "start": "2979660",
    "end": "2985720"
  },
  {
    "text": "for 401 do the silent write get the result and then reissue your API call",
    "start": "2985720",
    "end": "2991059"
  },
  {
    "text": "based on the new token okay the other thing you could do though is if you notice at the bottom so if I hit refresh",
    "start": "2991059",
    "end": "2998380"
  },
  {
    "text": "here yeah there we actually keep track of when the token will be expiring",
    "start": "2998380",
    "end": "3005549"
  },
  {
    "text": "that's just the unix time of when it's going to expire so you could imagine another approach to renew tokens which",
    "start": "3005549",
    "end": "3011609"
  },
  {
    "text": "is you set up a timer right and you set up a timer to proactively renew prior to",
    "start": "3011609",
    "end": "3017009"
  },
  {
    "text": "the expiration okay so the idea here is that you can do this now I wouldn't",
    "start": "3017009",
    "end": "3022980"
  },
  {
    "text": "expect you guys to write that code it turns out the library implements that for you which is nice and nice and easy",
    "start": "3022980",
    "end": "3028259"
  },
  {
    "text": "and there is an add access token expiring event that you can wire up to",
    "start": "3028259",
    "end": "3033599"
  },
  {
    "text": "so basically this guy internally is already doing all of the calculations to keep track of that so all you would need",
    "start": "3033599",
    "end": "3040259"
  },
  {
    "text": "to do is handle this event and then you could actually do the silent call you know inside of here yourself okay",
    "start": "3040259",
    "end": "3046349"
  },
  {
    "text": "there is even a flag on the settings that will do all of that automatically for you but when I first added that",
    "start": "3046349",
    "end": "3052859"
  },
  {
    "text": "setting originally I thought that was a great idea but the only problem is if you have the library keep automatically",
    "start": "3052859",
    "end": "3058710"
  },
  {
    "text": "renewing tokens when the user walks away from the computer for 2 or 3 hours it's gonna still keep getting tokens and",
    "start": "3058710",
    "end": "3064500"
  },
  {
    "text": "tokens and tokens so in retrospect I kind of wish I had never added that feature so that's why my recommendation",
    "start": "3064500",
    "end": "3070619"
  },
  {
    "text": "is now do it yourself right take the silent call put it in here yourself but put your own type of user activity",
    "start": "3070619",
    "end": "3077519"
  },
  {
    "text": "monitoring on top of that so if you detect that the user is no longer active you know you you want",
    "start": "3077519",
    "end": "3083480"
  },
  {
    "text": "automatically get tokens okay but you figure out the right balance for that for your app okay so the last thing we",
    "start": "3083480",
    "end": "3092810"
  },
  {
    "text": "have here is then the ability to sign out and that's a pretty standard protocol feature so we have a helper in",
    "start": "3092810",
    "end": "3099200"
  },
  {
    "text": "here or wherever it went to sign the user out and when we sign them out we",
    "start": "3099200",
    "end": "3104390"
  },
  {
    "text": "have the ability to you know go send them to log out of the tokens server and then we can come back and you know go",
    "start": "3104390",
    "end": "3111560"
  },
  {
    "text": "back to the app and start over again okay now actually check this out if I try to renew my token right remember",
    "start": "3111560",
    "end": "3117109"
  },
  {
    "text": "that makes the same login request if I did it in the main window would be prompted with the login screen but if",
    "start": "3117109",
    "end": "3123560"
  },
  {
    "text": "you try to do the renewal in the iframe because the prompt equals none parameter",
    "start": "3123560",
    "end": "3129560"
  },
  {
    "text": "is passed notice it immediately comes back with an error and that's because",
    "start": "3129560",
    "end": "3136430"
  },
  {
    "text": "when we made the request we sent prompt equals none and then immediately came back with an error back",
    "start": "3136430",
    "end": "3144109"
  },
  {
    "text": "to that page because the token server respects the fact oh you're in an iframe there's nothing to show I just send back",
    "start": "3144109",
    "end": "3150650"
  },
  {
    "text": "an error okay cool I have a little bit",
    "start": "3150650",
    "end": "3157490"
  },
  {
    "text": "more time so I'll show you one last little feature which is I'm gonna go login and this last little feature is",
    "start": "3157490",
    "end": "3166369"
  },
  {
    "text": "great you're now logged in right as I mentioned before we have a single sign-on session at the token server so",
    "start": "3166369",
    "end": "3172700"
  },
  {
    "text": "you could go and launch two and three or four more apps if they're all trusting the same token server all of them will",
    "start": "3172700",
    "end": "3178130"
  },
  {
    "text": "just get you know signed in automatically there's no more prompt for a password great so let's say you have",
    "start": "3178130",
    "end": "3183859"
  },
  {
    "text": "your spa up in one tab and you have another app up in the other tab and another app in another tab and one of them you click logout so now you're",
    "start": "3183859",
    "end": "3191690"
  },
  {
    "text": "gonna log out of that app you're gonna go to the token server in that tab and log out but what about those other two",
    "start": "3191690",
    "end": "3197660"
  },
  {
    "text": "or three apps that are in the other tabs sitting around wouldn't it be nice if they got notified that the user has",
    "start": "3197660",
    "end": "3203270"
  },
  {
    "text": "signed out in some sort of you know other tab other window so it turns out that the protocol supports that as well",
    "start": "3203270",
    "end": "3209480"
  },
  {
    "text": "so I'm actually gonna open up another window to demo that so here I am if we",
    "start": "3209480",
    "end": "3215510"
  },
  {
    "text": "can see this I'm logged in and the other tab okay and here over in the spa and",
    "start": "3215510",
    "end": "3220640"
  },
  {
    "text": "I'll show you the demo first then I'll talk about how its implemented so the idea is that now over on the right I'm",
    "start": "3220640",
    "end": "3226040"
  },
  {
    "text": "in the other tab I'm gonna go log out on the token server okay oh I need to do my",
    "start": "3226040",
    "end": "3231260"
  },
  {
    "text": "demo better sorry I have an event in the library which is called add user signed",
    "start": "3231260",
    "end": "3236480"
  },
  {
    "text": "out okay which is basically an event that gets raised when this happens okay so sorry let me run that one more",
    "start": "3236480",
    "end": "3242210"
  },
  {
    "text": "time okay log in Alice and Alice here so",
    "start": "3242210",
    "end": "3249680"
  },
  {
    "text": "back over here I'm now logged in I'll go logout okay and again I don't trust my cache so I'm gonna hit ctrl f5 one more",
    "start": "3249680",
    "end": "3256910"
  },
  {
    "text": "time okay good okay so now over here on the right I will log out and here we go",
    "start": "3256910",
    "end": "3263599"
  },
  {
    "text": "okay took a little bit a while but not so bad but the other tab said oh yeah you're signed out and then your",
    "start": "3263599",
    "end": "3269480"
  },
  {
    "text": "JavaScript can you know say to the user they I've noticed you signed out you know you're done click here to start over cool so that's kind of a nifty",
    "start": "3269480",
    "end": "3276530"
  },
  {
    "text": "thing this library supports that which is basically a real simple event and it's paying attention to what's",
    "start": "3276530",
    "end": "3282800"
  },
  {
    "text": "happening at the token server okay now this is the interesting question is how",
    "start": "3282800",
    "end": "3287869"
  },
  {
    "text": "is my spa paying attention to what's happening in at the token server okay so the thing that we care about at the",
    "start": "3287869",
    "end": "3293300"
  },
  {
    "text": "token server is when the cookie is gone if the cookies disappeared that means you've signed out okay so can the",
    "start": "3293300",
    "end": "3300010"
  },
  {
    "text": "application running on localhost 5000 read the cookie from demo dot identity",
    "start": "3300010",
    "end": "3306140"
  },
  {
    "text": "server died oh yeah absolutely not right cookies can't be Red Cross domain so how",
    "start": "3306140",
    "end": "3311240"
  },
  {
    "text": "does this work well it turns out that the piece of code that can read the cookie from the token server is a page",
    "start": "3311240",
    "end": "3318920"
  },
  {
    "text": "from the token server itself so one of the features of the token server is this something called the check session yes",
    "start": "3318920",
    "end": "3326000"
  },
  {
    "text": "iframe right yet another iframe and in this page what's expected is your spa is",
    "start": "3326000",
    "end": "3334310"
  },
  {
    "text": "expected to open up an iframe to this check session iframe endpoint and I",
    "start": "3334310",
    "end": "3341180"
  },
  {
    "text": "don't know if I just lost my internet connection come on is it February twenty-ninth it's",
    "start": "3341180",
    "end": "3355000"
  },
  {
    "text": "as you're restarting okay I think this worked yeah okay good so what's",
    "start": "3355000",
    "end": "3360730"
  },
  {
    "text": "happening here is now the application is opening up an iframe to this thing from",
    "start": "3360730",
    "end": "3367150"
  },
  {
    "text": "identity server itself so if you scroll all the way down there's a bunch of JavaScript in here but the thing that's interesting is in the app on the right",
    "start": "3367150",
    "end": "3374170"
  },
  {
    "text": "or the the iframe it's listening for the message event okay what's happening is the spa has an identifier for the",
    "start": "3374170",
    "end": "3381880"
  },
  {
    "text": "current user session and it's every it's setting up a timer and every two seconds",
    "start": "3381880",
    "end": "3387280"
  },
  {
    "text": "making a cross window call into this okay and it's doing polling the thing is",
    "start": "3387280",
    "end": "3394030"
  },
  {
    "text": "that the polling is not Network polling the polling is just crawling from one window to the next okay once we're in",
    "start": "3394030",
    "end": "3400900"
  },
  {
    "text": "the iframe all of this has to do is take the spa's session ID and see if it",
    "start": "3400900",
    "end": "3406270"
  },
  {
    "text": "matches the cookie that's in memory in the browser that was issued from the token server and if they're the same",
    "start": "3406270",
    "end": "3412750"
  },
  {
    "text": "then the page here responds back with a message called unchanged so we send a",
    "start": "3412750",
    "end": "3419560"
  },
  {
    "text": "message back saying no nothing's changed okay so every two seconds is it the same session no nothing's changed is it the",
    "start": "3419560",
    "end": "3425890"
  },
  {
    "text": "same session nothing's changed then the user logs out of the other tab the session cookie is gone and now the next",
    "start": "3425890",
    "end": "3432880"
  },
  {
    "text": "time the the the JavaScript or the the spa calls into the iframe the iframe says oh your session ID doesn't match",
    "start": "3432880",
    "end": "3438609"
  },
  {
    "text": "anymore something in fact has changed and then that's how the spa can detect",
    "start": "3438609",
    "end": "3443650"
  },
  {
    "text": "oh your session is no longer valid at the token server okay sounds like quite",
    "start": "3443650",
    "end": "3448960"
  },
  {
    "text": "the hack doesn't it well that's exactly what the spec told us to do so we did it",
    "start": "3448960",
    "end": "3454089"
  },
  {
    "text": "okay all right so now that's the last",
    "start": "3454089",
    "end": "3459130"
  },
  {
    "text": "kind of nifty little feature here with this library is that you can track the user session at the token server and be",
    "start": "3459130",
    "end": "3465970"
  },
  {
    "text": "notified for single sign out scenarios okay okay so there's the library there's",
    "start": "3465970",
    "end": "3473050"
  },
  {
    "text": "the github repo with it if you're interested in checking out the code we already talked about the expiration the",
    "start": "3473050",
    "end": "3479330"
  },
  {
    "text": "that we're gonna do this silent renew with an iframe and we're not going to be using refresh tokens and we talked about",
    "start": "3479330",
    "end": "3485720"
  },
  {
    "text": "the couple of things related to signing out and participating in the single sign out notification okay so other that I am",
    "start": "3485720",
    "end": "3492800"
  },
  {
    "text": "done so again the summary here is if you're building same site javascript spa apps using an api totally use cookies",
    "start": "3492800",
    "end": "3500150"
  },
  {
    "text": "same site cookies are really going to be the way to go but if you need a more complex architecture then you're gonna",
    "start": "3500150",
    "end": "3506060"
  },
  {
    "text": "need me to move to tokens you can have cross domain calls other apps using that API you need a token server as well of",
    "start": "3506060",
    "end": "3512660"
  },
  {
    "text": "course and yes it is more complicated but that's you know the price you need to pay for that sort of flexibility in",
    "start": "3512660",
    "end": "3518720"
  },
  {
    "text": "that architecture okay so thank you so much and enjoy the Booker's tonight",
    "start": "3518720",
    "end": "3523990"
  },
  {
    "text": "[Applause]",
    "start": "3523990",
    "end": "3527940"
  }
]