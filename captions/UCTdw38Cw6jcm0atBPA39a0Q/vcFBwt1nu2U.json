[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "my name is mark rendall i am a.net developer but i've been working in this business",
    "start": "8320",
    "end": "14639"
  },
  {
    "text": "for 30 years and over that time i've worked with some truly horrific programming languages i'm going to show",
    "start": "14639",
    "end": "20640"
  },
  {
    "text": "you a couple of them and uh yeah so this is not a talk where i'm going to",
    "start": "20640",
    "end": "27840"
  },
  {
    "text": "like audit and review all the programming languages in the world and then go ha this one is the worst because",
    "start": "27840",
    "end": "33600"
  },
  {
    "text": "that's just mean and also it's easy and we all know which one it is",
    "start": "33600",
    "end": "40399"
  },
  {
    "text": "um no what we're going to do is we are going to take the worst features",
    "start": "40399",
    "end": "46640"
  },
  {
    "text": "from a bunch of programming languages that might in other ways be very very good and perfectly acceptable and we're",
    "start": "46640",
    "end": "51840"
  },
  {
    "text": "going to mash them all together and make the worst programming language that there has ever been",
    "start": "51840",
    "end": "57680"
  },
  {
    "text": "in the whole of history and speaking of history there is a saying that those who do not",
    "start": "57680",
    "end": "64559"
  },
  {
    "start": "62000",
    "end": "573000"
  },
  {
    "text": "learn from history are unable to iterate on it and make it worse",
    "start": "64559",
    "end": "69680"
  },
  {
    "text": "and so we should look back at the history of programming languages at some truly egregious",
    "start": "69680",
    "end": "77040"
  },
  {
    "text": "terrible examples like for example cobol",
    "start": "77040",
    "end": "82479"
  },
  {
    "text": "cobol was the first programming language that was designed by committee",
    "start": "82479",
    "end": "88080"
  },
  {
    "text": "and it shows and it shows that the committee there was no you know when people go there are",
    "start": "88080",
    "end": "94400"
  },
  {
    "text": "no bad ideas i think that's what happened when they designed cobalt there are no bad ideas",
    "start": "94400",
    "end": "99680"
  },
  {
    "text": "and so every idea that anybody suggested they just went yes we'll put that in so this is hello world in cobalt uh you",
    "start": "99680",
    "end": "106399"
  },
  {
    "text": "identify the division and the program and then you say this is the you got the procedure division and then",
    "start": "106399",
    "end": "112159"
  },
  {
    "text": "you just say display hello world and then you stop run not sure what happens if you don't stop",
    "start": "112159",
    "end": "117920"
  },
  {
    "text": "run the program just keeps going forever and so cobol had a lot of boilerplate and",
    "start": "117920",
    "end": "124880"
  },
  {
    "text": "actually the idea i think behind cobol was that business people would be able to write their own",
    "start": "124880",
    "end": "130000"
  },
  {
    "text": "applications that was the dream in the 1960s and we all know how well that's",
    "start": "130000",
    "end": "135120"
  },
  {
    "text": "worked out business people can't even describe the applications they want much less write",
    "start": "135120",
    "end": "141440"
  },
  {
    "text": "them but ibm thought cobalt didn't have enough boilerplate and so they made their own version of cobol",
    "start": "141440",
    "end": "148160"
  },
  {
    "text": "and this i swear to god this is hello world in ibm cobalt",
    "start": "148160",
    "end": "153920"
  },
  {
    "text": "um i'm not even gonna try and dig into how this works because i i can't even",
    "start": "153920",
    "end": "159920"
  },
  {
    "text": "imagine it um but knowing how much ibm programmers get paid by the hour",
    "start": "159920",
    "end": "166959"
  },
  {
    "text": "that's about seven and a half thousand dollars worth of code there",
    "start": "166959",
    "end": "172080"
  },
  {
    "text": "just to print hello world then there was apl um apl was invented",
    "start": "172080",
    "end": "180080"
  },
  {
    "text": "by kenneth iverson uh as a teaching language to use in his computer science",
    "start": "180080",
    "end": "185440"
  },
  {
    "text": "and programming classes um it stands for a programming language because kenneth wasn't the most creative person",
    "start": "185440",
    "end": "192480"
  },
  {
    "text": "in the world uh outside of his programming language which actually in a",
    "start": "192480",
    "end": "197599"
  },
  {
    "text": "lot of ways was fantastic so this is hello world in apl if you just give it a string it goes well i'll just write that",
    "start": "197599",
    "end": "203360"
  },
  {
    "text": "back out to the standard output and we're done which is completely sane this is conway's game of life in apl",
    "start": "203360",
    "end": "212159"
  },
  {
    "text": "that one line of code is the whole of conway's game of life",
    "start": "212159",
    "end": "218720"
  },
  {
    "text": "now you might notice some interesting things in that line of code",
    "start": "218720",
    "end": "224480"
  },
  {
    "text": "like some of those characters are greek uh some of them are mathematical",
    "start": "224480",
    "end": "231599"
  },
  {
    "text": "uh some of them i think are just from a fever dream that kenneth had after",
    "start": "231599",
    "end": "237200"
  },
  {
    "text": "taking some acid with timothy leary in san francisco in order to write code in apl you",
    "start": "237200",
    "end": "244720"
  },
  {
    "text": "actually had to buy an apl keyboard which had all those weird little",
    "start": "244720",
    "end": "249840"
  },
  {
    "text": "squiggles on it and i that that's brilliant that's um i'm going to invent a programming language i'm going to say",
    "start": "249840",
    "end": "255120"
  },
  {
    "text": "this is what you need to learn to pass my course and here's the keyboard it costs 800 brilliant",
    "start": "255120",
    "end": "262479"
  },
  {
    "text": "then in the 1970s somebody invented a programming language called the compiler with no",
    "start": "262880",
    "end": "269199"
  },
  {
    "text": "pronounceable acronym or intercal and intercal was the first",
    "start": "269199",
    "end": "275600"
  },
  {
    "text": "or it's the first known example of a joke programming language so this was a",
    "start": "275600",
    "end": "281120"
  },
  {
    "text": "parody of the programming languages that were around at the time like fortran and fourth and things like that",
    "start": "281120",
    "end": "286960"
  },
  {
    "text": "and it was designed to be ridiculously difficult to code in",
    "start": "286960",
    "end": "292479"
  },
  {
    "text": "um and just also to poke fun at other programming languages so you notice",
    "start": "292479",
    "end": "297919"
  },
  {
    "text": "four of the lines here start with please you had to say please on some of the",
    "start": "297919",
    "end": "304720"
  },
  {
    "text": "lines of code when you were writing into cal if you didn't say please often enough you would get a compiler error",
    "start": "304720",
    "end": "311039"
  },
  {
    "text": "that said programmer is insufficiently com polite",
    "start": "311039",
    "end": "316240"
  },
  {
    "text": "if you just tried to cheat and went well i just put please at the start of every line you would get a compiler error that",
    "start": "319360",
    "end": "325199"
  },
  {
    "text": "said programmer is excessively polite and the correct ratio of pleas to to not",
    "start": "325199",
    "end": "333280"
  },
  {
    "text": "please was not documented anywhere into cal also did not have the go-to",
    "start": "333280",
    "end": "340080"
  },
  {
    "text": "keyword it had come from and so if you wanted to do a conditional",
    "start": "340080",
    "end": "346800"
  },
  {
    "text": "bit and jump to somewhere else in your program uh you would have a line that said um",
    "start": "346800",
    "end": "352960"
  },
  {
    "text": "if something and then the next line would say please do nothing and then somewhere else in your code you would",
    "start": "352960",
    "end": "359280"
  },
  {
    "text": "have a come from statement that took control from that please do nothing line and did something else instead",
    "start": "359280",
    "end": "366560"
  },
  {
    "text": "and semantically that's identical to go to it's just done the other way around",
    "start": "366560",
    "end": "374000"
  },
  {
    "text": "intercal was also the worst compiler ever so at the time uh",
    "start": "374000",
    "end": "380960"
  },
  {
    "text": "they they benchmarked it and it was designed to be as slow as if you didn't have please give up at the end by the",
    "start": "380960",
    "end": "386240"
  },
  {
    "text": "way it would um run your cpu up to 100 usage and just stay there until you turn the machine off",
    "start": "386240",
    "end": "392840"
  },
  {
    "text": "um they benchmarked into cal uh at the time to make sure it was as slow as it",
    "start": "392840",
    "end": "398560"
  },
  {
    "text": "could possibly be um and they compared it to uh i think it was a fortran application running the",
    "start": "398560",
    "end": "405120"
  },
  {
    "text": "eris civ of eritosthenes which is the prime number finder",
    "start": "405120",
    "end": "411039"
  },
  {
    "text": "and the fortran version took half a second to find all the primes up to one million and the intercal version took 17",
    "start": "411039",
    "end": "417840"
  },
  {
    "text": "hours the final results of the benchmark aren't actually in yet because the jvm",
    "start": "417840",
    "end": "424160"
  },
  {
    "text": "version is still spinning up the virtual machine yay java",
    "start": "424160",
    "end": "430720"
  },
  {
    "text": "um visual basic another joke programming language that then accidentally got bought by microsoft and promulgated out",
    "start": "430720",
    "end": "437680"
  },
  {
    "text": "to the world and and people used it to build things um in the 90s when uh windows 3.1 and",
    "start": "437680",
    "end": "444479"
  },
  {
    "text": "then windows 95 came along i'd been working on unix systems and my company went oh we've got to switch to windows",
    "start": "444479",
    "end": "450479"
  },
  {
    "text": "go and evaluate which are the best um platforms for for writing windows applications and it probably would have",
    "start": "450479",
    "end": "456960"
  },
  {
    "text": "been visual basic but i just didn't like it um it didn't do object oriented code at",
    "start": "456960",
    "end": "463280"
  },
  {
    "text": "the time and its data access layer was basically non-existent in visual basic",
    "start": "463280",
    "end": "469199"
  },
  {
    "text": "three they only added that in visual basic four with the ado framework and so i went with another",
    "start": "469199",
    "end": "476080"
  },
  {
    "text": "language gupta sql windows",
    "start": "476080",
    "end": "480400"
  },
  {
    "text": "is there a gupta sql windows user in the room no no you're lucky bastards",
    "start": "481440",
    "end": "488400"
  },
  {
    "text": "so this is the gupta sql windows code editor and yes that is a tree view",
    "start": "488800",
    "end": "495599"
  },
  {
    "text": "and yes that is the editor you would edit so it's like significant white",
    "start": "495599",
    "end": "500720"
  },
  {
    "text": "space but it's not it's actually a tree view and so you could insert a nested",
    "start": "500720",
    "end": "506400"
  },
  {
    "text": "or insert at same level and this when you saved your code it",
    "start": "506400",
    "end": "512159"
  },
  {
    "text": "wasn't text it saved your source code as a binary file",
    "start": "512159",
    "end": "517518"
  },
  {
    "text": "and then the compiler compiled it into bytecode and then put it in a an",
    "start": "517519",
    "end": "522800"
  },
  {
    "text": "executable with a header and it was just it wasn't good",
    "start": "522800",
    "end": "527839"
  },
  {
    "text": "and so i i left that behind and moved onto net so we are going to",
    "start": "527839",
    "end": "533600"
  },
  {
    "text": "see if we can make something worse than all of these languages except possibly into cal but let's see if we can get as",
    "start": "533600",
    "end": "540160"
  },
  {
    "text": "bad as into cal so we need a name for our language and nice short names that are easily",
    "start": "540160",
    "end": "546320"
  },
  {
    "text": "googleable are a key thing when you're creating a programming language so i'm going to",
    "start": "546320",
    "end": "551519"
  },
  {
    "text": "call it bs because be able to google that and there'll be no confusion",
    "start": "551519",
    "end": "556880"
  },
  {
    "text": "people will find that and also programming languages these days you need taglines and marketing for it and",
    "start": "556880",
    "end": "562000"
  },
  {
    "text": "all this sort of stuff and so bs's tagline is going to be why because",
    "start": "562000",
    "end": "567120"
  },
  {
    "text": "you that's why you can beat that on the recording",
    "start": "567120",
    "end": "572320"
  },
  {
    "text": "so we need our design principles for our language our bs design principles now a",
    "start": "572320",
    "end": "577839"
  },
  {
    "start": "573000",
    "end": "693000"
  },
  {
    "text": "lot of languages try to create the pit of success they try to make it easy for the programmer to do the right thing",
    "start": "577839",
    "end": "584720"
  },
  {
    "text": "that doesn't sound like any fun at all we want to create the pit of fail",
    "start": "584720",
    "end": "589760"
  },
  {
    "text": "actually that's that's not even that's not enough i want to create the booby-trapped aztec temple of fail in my",
    "start": "589760",
    "end": "597839"
  },
  {
    "text": "programming language that's what it should be like coding in bs you should feel like harrison ford running away",
    "start": "597839",
    "end": "604640"
  },
  {
    "text": "from a giant boulder and then bumping into a bunch of people pointing arrows at you with a",
    "start": "604640",
    "end": "610560"
  },
  {
    "text": "nazi archaeologist we are not going to trust the programmer to get simple things right we're going",
    "start": "610560",
    "end": "616720"
  },
  {
    "text": "to make that as difficult as we can because programmers know who trusts programmers",
    "start": "616720",
    "end": "622320"
  },
  {
    "text": "to do anything we're useless we're distracted easily we're spending half our time on twitter",
    "start": "622320",
    "end": "627440"
  },
  {
    "text": "half our time on something else half our time playing browser games and we can't even do fractions properly it's",
    "start": "627440",
    "end": "634399"
  },
  {
    "text": "ridiculous so we're not going to trust the programmer to get simple things right but we are going to leave it all all the really complicated stuff up to",
    "start": "634399",
    "end": "641440"
  },
  {
    "text": "the programmer to deal with and make sure that they're having to really work to get this going",
    "start": "641440",
    "end": "648079"
  },
  {
    "text": "and we should target as many things as possible so some programming languages",
    "start": "648079",
    "end": "653440"
  },
  {
    "text": "if you look at like rust so rust specifically targets systems level",
    "start": "653440",
    "end": "658959"
  },
  {
    "text": "programming and then people try and use it for other things like building websites and the rust team are like why",
    "start": "658959",
    "end": "664880"
  },
  {
    "text": "are you doing there's there are other things use node do something else but no",
    "start": "664880",
    "end": "670640"
  },
  {
    "text": "we if we just focus on doing one thing well then then we might accidentally do that and so we're going to try and do",
    "start": "670640",
    "end": "677120"
  },
  {
    "text": "everything so we're going to try and low level systems and embedded code and rich graphical user interfaces and websites",
    "start": "677120",
    "end": "683040"
  },
  {
    "text": "and a something on bs type web framework and the internet of things and furbies and",
    "start": "683040",
    "end": "690079"
  },
  {
    "text": "vr and ar and metaverse and everything else so",
    "start": "690079",
    "end": "695519"
  },
  {
    "start": "693000",
    "end": "725000"
  },
  {
    "text": "we're going to start we're going to take sort of one of the existing programming languages we'll use",
    "start": "695519",
    "end": "702160"
  },
  {
    "text": "that as our base because every programming language since essentially the first one has been based on one that",
    "start": "702160",
    "end": "708240"
  },
  {
    "text": "came before it so uh c was based on b b was based on a a was based on algol",
    "start": "708240",
    "end": "715040"
  },
  {
    "text": "algol was based on fortran it all goes back that way and so if we move that forward and go okay that's languages",
    "start": "715040",
    "end": "721279"
  },
  {
    "text": "that were inspired by c and so we get php",
    "start": "721279",
    "end": "728079"
  },
  {
    "start": "725000",
    "end": "857000"
  },
  {
    "text": "php is a recursive acronym it originally stood for um [Music]",
    "start": "728079",
    "end": "733920"
  },
  {
    "text": "perl hypertext preprocessor i've noticed it stood for personal home page because the dude made it to write his personal",
    "start": "733920",
    "end": "740320"
  },
  {
    "text": "home page and then it stood for um personal hypertext processor but now",
    "start": "740320",
    "end": "746000"
  },
  {
    "text": "it's actually one of those recursive acronyms it stands for php hates programmers",
    "start": "746000",
    "end": "752480"
  },
  {
    "text": "because that's the only explanation i can think of for php",
    "start": "753279",
    "end": "758720"
  },
  {
    "text": "um so what we're going to take from php is the total inconsistency php has shouty case and camelcase and snake case",
    "start": "758720",
    "end": "766160"
  },
  {
    "text": "and pascal case and just all the different cases all the different ways of expressing things we're going to have",
    "start": "766160",
    "end": "772560"
  },
  {
    "text": "pointless variable prefixing php all the variables have to start with a dollar if everything has to start with a dollar",
    "start": "772560",
    "end": "778560"
  },
  {
    "text": "why does anything have to start with the dollar we're going to have the hassle of c and c plus plus but the performance of",
    "start": "778560",
    "end": "784480"
  },
  {
    "text": "altair basic which you know if you're not old it wasn't good",
    "start": "784480",
    "end": "790160"
  },
  {
    "text": "so we're going to start here's our starter bs program we have a class because we're",
    "start": "790160",
    "end": "795279"
  },
  {
    "text": "an object-oriented language and we have a public function underscore underscore construct because that's how php does",
    "start": "795279",
    "end": "802240"
  },
  {
    "text": "its constructors we're not going to prefix our variables with the dollar symbol because we're",
    "start": "802240",
    "end": "807920"
  },
  {
    "text": "european even post brexit i still consider myself a european so we're going to prefix our variables with the",
    "start": "807920",
    "end": "814399"
  },
  {
    "text": "euro symbol and that has the extra advantage the it's actually quite difficult to type on",
    "start": "814399",
    "end": "820720"
  },
  {
    "text": "most keyboards and so that will make programmers work for it we're going to use the minus greater than um symbol for",
    "start": "820720",
    "end": "828639"
  },
  {
    "text": "dereferencing properties and fields and members inside classes because dot that's just far too easy who",
    "start": "828639",
    "end": "836240"
  },
  {
    "text": "wants to type one character when you can be forced to type two um and we're going to have curly brace",
    "start": "836240",
    "end": "842160"
  },
  {
    "text": "let's start with curly braces and semicolons we'll think about whether we want to keep those um and for string",
    "start": "842160",
    "end": "848320"
  },
  {
    "text": "concatenation we're going to use commas rather than the plus symbol because",
    "start": "848320",
    "end": "854000"
  },
  {
    "text": "yeah because we are so yes here are here are our key",
    "start": "854000",
    "end": "859199"
  },
  {
    "start": "857000",
    "end": "931000"
  },
  {
    "text": "differences we have an underscore underscore construct we have the uh",
    "start": "859199",
    "end": "864720"
  },
  {
    "text": "minus arrow dereferencing and we have commas for string concatenation and we have our oh",
    "start": "864720",
    "end": "871920"
  },
  {
    "text": "and we have the colon colon for static methods as well so that's a good start what else can we",
    "start": "871920",
    "end": "878160"
  },
  {
    "text": "look at uh let's look at python so any python programmers in the room",
    "start": "878160",
    "end": "885760"
  },
  {
    "text": "it's it's python you know it's the most popular programming language in the world now and there is a reason for that python is",
    "start": "885760",
    "end": "892399"
  },
  {
    "text": "is actually generally uh very good and and very reasonable apart from this one",
    "start": "892399",
    "end": "898079"
  },
  {
    "text": "thing this is some broken python code uh this chucks an error that says invalid constant when you try to run it",
    "start": "898079",
    "end": "904639"
  },
  {
    "text": "here's the fixed version of that same code um what was wrong with the code on the left",
    "start": "904639",
    "end": "913279"
  },
  {
    "text": "it had a mixture of tabs and spaces for the indentation",
    "start": "913279",
    "end": "918160"
  },
  {
    "text": "which i don't know why that happened i opened it up in my editor and i added some code",
    "start": "919519",
    "end": "925279"
  },
  {
    "text": "and i yeah somehow it it a tab found its way in there so from",
    "start": "925279",
    "end": "930639"
  },
  {
    "text": "python we're going to take significant white space and to be fair that we're not just picking on python here there",
    "start": "930639",
    "end": "936320"
  },
  {
    "start": "931000",
    "end": "980000"
  },
  {
    "text": "are other significant white space languages like f sharp and haskell and ocam and",
    "start": "936320",
    "end": "941920"
  },
  {
    "text": "probably others coffeescript whatever happened to coffeescript i used to like coffeescript despite the significant",
    "start": "941920",
    "end": "948560"
  },
  {
    "text": "white space so we're going to use significant whitespace in bs so this is simplified",
    "start": "948560",
    "end": "953600"
  },
  {
    "text": "bs quite a lot here we've got our class greeter there and and our public function construct and",
    "start": "953600",
    "end": "960800"
  },
  {
    "text": "we're going to use two spaces for indentation but if you are indenting by four spaces",
    "start": "960800",
    "end": "966399"
  },
  {
    "text": "then you use a tab if you're indenting by six spaces then you use a tab and two spaces and if you're indenting by and so",
    "start": "966399",
    "end": "973440"
  },
  {
    "text": "on and so on and so on so let's talk about how we're going to do",
    "start": "973440",
    "end": "979040"
  },
  {
    "text": "comments then because comments you can have line comments you can have block comments you can have all sorts of comments and you",
    "start": "979040",
    "end": "984880"
  },
  {
    "start": "980000",
    "end": "1065000"
  },
  {
    "text": "need comments in code so that people know what's going on and why you've made the decisions and so in bs",
    "start": "984880",
    "end": "991440"
  },
  {
    "text": "because you're either using a tab and two space or two spaces or some combination of those",
    "start": "991440",
    "end": "996959"
  },
  {
    "text": "and so in bs any line that starts with a number of spaces that modulo two is",
    "start": "996959",
    "end": "1005360"
  },
  {
    "text": "one will be treated as a comment so if you start a line with a tab and a",
    "start": "1005360",
    "end": "1010560"
  },
  {
    "text": "single space or a tab in three spaces or just with seven spaces then everything after that is a comment",
    "start": "1010560",
    "end": "1017440"
  },
  {
    "text": "so there you go this is a comment but you also need so c uh c and c plus",
    "start": "1017440",
    "end": "1025038"
  },
  {
    "text": "have the slash star and star slash to start and begin a comment and so if you",
    "start": "1025039",
    "end": "1030400"
  },
  {
    "text": "use tab space and then space tab on a blank line then it comments out",
    "start": "1030400",
    "end": "1035839"
  },
  {
    "text": "everything in between those two things so that public function foo at the bottom there is actually commented out",
    "start": "1035839",
    "end": "1044720"
  },
  {
    "text": "if you use the approved bs editor to edit your bs code",
    "start": "1047039",
    "end": "1052799"
  },
  {
    "text": "three thousand pounds a year from my company then that will gray out ever so slightly so you'll know that it's been",
    "start": "1052799",
    "end": "1058720"
  },
  {
    "text": "commented out the next thing we're obviously going to have to bring in is common to all",
    "start": "1058720",
    "end": "1066160"
  },
  {
    "start": "1065000",
    "end": "1225000"
  },
  {
    "text": "programming languages and it is of course null",
    "start": "1066160",
    "end": "1071600"
  },
  {
    "text": "every language um forgotten the guys was it alan kaye",
    "start": "1071600",
    "end": "1076960"
  },
  {
    "text": "working on the small talk project and he called um he called null his billion dollar mistake and i think that's",
    "start": "1076960",
    "end": "1083520"
  },
  {
    "text": "probably an underestimate i think we're probably up somewhere around a trillion by now",
    "start": "1083520",
    "end": "1088640"
  },
  {
    "text": "every language ever has a null and a nothing and an undefined and a data and an empty and a nil and",
    "start": "1088640",
    "end": "1095039"
  },
  {
    "text": "uh you know javascript's got like eight different things that all mean null so so obviously we're going to have that",
    "start": "1095039",
    "end": "1101760"
  },
  {
    "text": "uh which means we're going to have to do checking for nulls around the place and",
    "start": "1101760",
    "end": "1107280"
  },
  {
    "text": "um there's one language where when you're checking something and potentially throwing exceptions it does",
    "start": "1107280",
    "end": "1114240"
  },
  {
    "text": "it ever so slightly differently to every other language and that language is ruby",
    "start": "1114240",
    "end": "1120000"
  },
  {
    "text": "because ruby in its every piece of code should look like",
    "start": "1120000",
    "end": "1125039"
  },
  {
    "text": "you've written a sentence and it should be readable and it should make programmers happy and so for some reason",
    "start": "1125039",
    "end": "1130640"
  },
  {
    "text": "matt's decided that that involved putting in an unless keyword which was",
    "start": "1130640",
    "end": "1135840"
  },
  {
    "text": "an alternative to the if keyword so instead of saying if allowed formats",
    "start": "1135840",
    "end": "1141280"
  },
  {
    "text": "does not include format raise invalid format you say raise invalid format",
    "start": "1141280",
    "end": "1146640"
  },
  {
    "text": "unless so you raise an exception unless everything's okay which is like me running in here and",
    "start": "1146640",
    "end": "1152480"
  },
  {
    "text": "going everybody get out unless there's not a fire it's it's the wrong way round it's i why",
    "start": "1152480",
    "end": "1160000"
  },
  {
    "text": "why would you do this i don't understand it so i'm putting it in my language it's brilliant it we're not going to have if",
    "start": "1160000",
    "end": "1166960"
  },
  {
    "text": "at all so ruby does have if bs is not going to have if we're just going to have unless",
    "start": "1166960",
    "end": "1173679"
  },
  {
    "text": "also we're going to have a single exception and then we'll leave it up to the programmer to analyze the stack trace",
    "start": "1173679",
    "end": "1180640"
  },
  {
    "text": "and core dump to work out what it was that actually went wrong that exception is going to be called halt and catch fire and that is a",
    "start": "1180640",
    "end": "1188400"
  },
  {
    "text": "key word and that just throws an exception uh it's basically like panic",
    "start": "1188400",
    "end": "1193440"
  },
  {
    "text": "but much more dramatic so we're going to say halton catch fire and then",
    "start": "1193440",
    "end": "1198720"
  },
  {
    "text": "indentation on the line after you obviously have to come out you're out denting after your halt and catch fire",
    "start": "1198720",
    "end": "1203760"
  },
  {
    "text": "and say unless name does not equal null um and so the s now we have exceptions and",
    "start": "1203760",
    "end": "1209919"
  },
  {
    "text": "exception handling our next feature uh does not come from a programming",
    "start": "1209919",
    "end": "1215679"
  },
  {
    "text": "language at all it comes from an actual language is there anybody in from greece",
    "start": "1215679",
    "end": "1221520"
  },
  {
    "text": "or who knows greek or speaks greek so this",
    "start": "1221520",
    "end": "1227200"
  },
  {
    "start": "1225000",
    "end": "1271000"
  },
  {
    "text": "is a greek question mark not a semicolon it's a question mark",
    "start": "1227200",
    "end": "1235280"
  },
  {
    "text": "that's a greek semicolon um literally unicode because the greek",
    "start": "1235280",
    "end": "1240960"
  },
  {
    "text": "question mark looks so much like a semicolon the unicode just automatically maps the greek question mark code to",
    "start": "1240960",
    "end": "1247760"
  },
  {
    "text": "whatever the semicolon is from the same character set and so in bs your unless",
    "start": "1247760",
    "end": "1253600"
  },
  {
    "text": "statements have to end with the greek question mark not a semicolon degree question mark and",
    "start": "1253600",
    "end": "1259679"
  },
  {
    "text": "we'll sell keyboards with a special key that has a greek question mark key on it and we'll put it right next to the semicolon key and you'll just have to",
    "start": "1259679",
    "end": "1267440"
  },
  {
    "text": "remember which one of them is which so the next language we're going to take",
    "start": "1267440",
    "end": "1272559"
  },
  {
    "start": "1271000",
    "end": "1443000"
  },
  {
    "text": "stuff from is javascript and let's be honest there's a ton of stuff we could take from javascript the whole",
    "start": "1272559",
    "end": "1278760"
  },
  {
    "text": "prototypal class based system and and just",
    "start": "1278760",
    "end": "1284159"
  },
  {
    "text": "only having floating point numbers that would be a good one but what we're going to take from javascript",
    "start": "1284159",
    "end": "1291200"
  },
  {
    "text": "is this so in javascript",
    "start": "1291200",
    "end": "1296559"
  },
  {
    "text": "blank string does not equal the string 0 but 0 does equal the blank string and",
    "start": "1296559",
    "end": "1304320"
  },
  {
    "text": "zero does equal the string zero so yeah figure that one out false equals",
    "start": "1304320",
    "end": "1310320"
  },
  {
    "text": "undefined false doesn't equal undefined and false doesn't equal null but null does equal undefined and that comes back",
    "start": "1310320",
    "end": "1316080"
  },
  {
    "text": "as true javascript has type coercion um and",
    "start": "1316080",
    "end": "1321600"
  },
  {
    "text": "if you use double equals or bang equals to do a comparison then javascript will",
    "start": "1321600",
    "end": "1327360"
  },
  {
    "text": "do its level best to make what you're doing true and it's just because it's like well",
    "start": "1327360",
    "end": "1333440"
  },
  {
    "text": "programmers want things to be true we are seekers after truth i should make as many things true as possible i should",
    "start": "1333440",
    "end": "1339919"
  },
  {
    "text": "jump through hoops to make things true so we're going to have this as well but we're going to take it up a notch and",
    "start": "1339919",
    "end": "1345120"
  },
  {
    "text": "we're going to say that zero equals the empty string and zero equals the zero as a string and also",
    "start": "1345120",
    "end": "1351440"
  },
  {
    "text": "zero equals the word zero in a string and 22 divided by seven equals the emoji",
    "start": "1351440",
    "end": "1357919"
  },
  {
    "text": "for pi um",
    "start": "1357919",
    "end": "1362158"
  },
  {
    "text": "so javascript uh because people kind of went this is not helping me i need to",
    "start": "1363760",
    "end": "1370000"
  },
  {
    "text": "actually know whether two things are the same or not please please please can we turn this off",
    "start": "1370000",
    "end": "1375520"
  },
  {
    "text": "but the problem with javascript is you can't fix it because there's tens of billions of lines of code of it out",
    "start": "1375520",
    "end": "1381280"
  },
  {
    "text": "there in web pages and some of it hasn't been updated since 1996",
    "start": "1381280",
    "end": "1386400"
  },
  {
    "text": "and so you can't fix javascript and so they went all right we'll add so if you",
    "start": "1386400",
    "end": "1391679"
  },
  {
    "text": "use equals equals equals then it'll do strict equality and so none of these",
    "start": "1391679",
    "end": "1396799"
  },
  {
    "text": "things then you'll get this through properly and so we're going to do a strict equality check as well if you don't want type coercion but rather than",
    "start": "1396799",
    "end": "1404159"
  },
  {
    "text": "saying uh equals equals equals we're just going to like make the",
    "start": "1404159",
    "end": "1409360"
  },
  {
    "text": "the the equals operator important by putting an exclamation mark after it so bang equals bang",
    "start": "1409360",
    "end": "1416880"
  },
  {
    "text": "means strict does not equal i call that the shopping trolley operator",
    "start": "1416880",
    "end": "1424000"
  },
  {
    "text": "so if you want to do a strict equality check you have to negate the strict inequality",
    "start": "1424720",
    "end": "1431039"
  },
  {
    "text": "operator so the strict equality operator is bang bang equals bang which i call",
    "start": "1431039",
    "end": "1437440"
  },
  {
    "text": "the person on the hoverboard pushing a shopping trolley operator",
    "start": "1437440",
    "end": "1442880"
  },
  {
    "text": "okay let's talk about strings so uh strings we've got multiple formats",
    "start": "1442880",
    "end": "1450000"
  },
  {
    "start": "1443000",
    "end": "1482000"
  },
  {
    "text": "for strings we've got ascii and ansi and and uh unicode and unicode split up into",
    "start": "1450000",
    "end": "1456240"
  },
  {
    "text": "utf-8 and utf-16 and utf-32 nobody uses utf-32 anymore windows uses utf-16",
    "start": "1456240",
    "end": "1463679"
  },
  {
    "text": "internally for everything but the web uses utf-8 most programming languages these days",
    "start": "1463679",
    "end": "1469840"
  },
  {
    "text": "say utf-8 so goes strings and python strings i think now are utf-8 and so we",
    "start": "1469840",
    "end": "1475840"
  },
  {
    "text": "deal with utf-8 unless we've actually loaded a library to do something differently but i want to be able to cope with all kinds of strings so if you",
    "start": "1475840",
    "end": "1482720"
  },
  {
    "start": "1482000",
    "end": "1608000"
  },
  {
    "text": "have a string literal that's enco enclosed in single quotes that's an ascii string if you enclose it in pairs",
    "start": "1482720",
    "end": "1488880"
  },
  {
    "text": "of single quotes that's an ansi string if you enclose it in double quotes then it's a dbcs string if you enclose it in",
    "start": "1488880",
    "end": "1496559"
  },
  {
    "text": "pairs of double quotes then it's an ebcdic string that's important because we want to be able to run bs on ibm",
    "start": "1496559",
    "end": "1503600"
  },
  {
    "text": "mainframes because we're going to replace cobol with bs because those are the only",
    "start": "1503600",
    "end": "1511279"
  },
  {
    "text": "people in the world who are going to look at this language and go yeah that's better",
    "start": "1511279",
    "end": "1515840"
  },
  {
    "text": "if you enclose your string in what i as an english person think of as french",
    "start": "1518320",
    "end": "1523440"
  },
  {
    "text": "quotes then it is a utf-256 encoded string so utf-256 uses 256 bits",
    "start": "1523440",
    "end": "1533120"
  },
  {
    "text": "for ev it's a 256-bit number for every character in the alphabet and this is",
    "start": "1533120",
    "end": "1539440"
  },
  {
    "text": "brilliant because unicode um utf-8 uses this variable length encoding ut some of",
    "start": "1539440",
    "end": "1545760"
  },
  {
    "text": "them are sort of one byte and some of them are four bytes um we're just going to go to hell with that we're going to",
    "start": "1545760",
    "end": "1551679"
  },
  {
    "text": "use 16 bytes for every is it 16 or 32 i can't do math um whatever it is",
    "start": "1551679",
    "end": "1558960"
  },
  {
    "text": "we're going to use 256 but we will never run out of address space for characters",
    "start": "1558960",
    "end": "1564480"
  },
  {
    "text": "no matter because that actually allows us to have a character for every subatomic particle in the solar system",
    "start": "1564480",
    "end": "1571919"
  },
  {
    "text": "that's a lot of characters and i'm going to make a website where you can upload any bloody picture you like and i'll",
    "start": "1571919",
    "end": "1577760"
  },
  {
    "text": "give you back the utf-256 encoding for it and then you can use it in a string and then all the programs in the world",
    "start": "1577760",
    "end": "1584320"
  },
  {
    "text": "will have to come to my web server to download the character for that youtube 256 thing",
    "start": "1584320",
    "end": "1589930"
  },
  {
    "text": "[Music] if you enclose your string in pairs of french quotes then it's utf-256 but with",
    "start": "1589930",
    "end": "1598320"
  },
  {
    "text": "string interpolation string interpolation is not possible with any of the other string types",
    "start": "1598320",
    "end": "1605440"
  },
  {
    "text": "because q visual basic six in this instance but",
    "start": "1605440",
    "end": "1611520"
  },
  {
    "start": "1608000",
    "end": "1712000"
  },
  {
    "text": "you know um this was there were lots of things to love about visual basic arrays started",
    "start": "1611520",
    "end": "1617120"
  },
  {
    "text": "at one unless you did something somewhere in one place in the program and then suddenly all the arrays",
    "start": "1617120",
    "end": "1622400"
  },
  {
    "text": "throughout the entire program started at zero and that was fun when somebody checked that change in",
    "start": "1622400",
    "end": "1628880"
  },
  {
    "text": "but no visual basic for a raise decided that uh the square brackets might be a little",
    "start": "1628880",
    "end": "1636320"
  },
  {
    "text": "bit hard for visual basic programmers to find on their keyboards they knew where the round brackets were everyone knows",
    "start": "1636320",
    "end": "1642000"
  },
  {
    "text": "where the round brackets are so let's just use the round brackets for arrays and array indexing as well",
    "start": "1642000",
    "end": "1647760"
  },
  {
    "text": "so that's that's how visual basic does things so we say dim f round brackets 10 as",
    "start": "1647760",
    "end": "1654000"
  },
  {
    "text": "integer and then later on you see something going f1 and you're kind of like are you calling a function f and",
    "start": "1654000",
    "end": "1660320"
  },
  {
    "text": "passing one or are you getting the first thing out of that f array also visual basics",
    "start": "1660320",
    "end": "1666480"
  },
  {
    "text": "default integer type despite being a 32-bit language or a 32-bit compiler had",
    "start": "1666480",
    "end": "1673200"
  },
  {
    "text": "16-bit integers and so if you wanted a 32-bit integer you had to use long and",
    "start": "1673200",
    "end": "1678480"
  },
  {
    "text": "if you wanted a 64-bit integer you had to write a com add-on in c plus plus",
    "start": "1678480",
    "end": "1684799"
  },
  {
    "text": "so we're doing that we like that we're going to have round brackets for our um for our array indexes and also our",
    "start": "1684799",
    "end": "1692240"
  },
  {
    "text": "integers are just going to be 17-bit um because we've bought shares in all the memory companies and so",
    "start": "1692240",
    "end": "1699039"
  },
  {
    "text": "we don't care about those other um 15 bits that are that are being left",
    "start": "1699039",
    "end": "1704960"
  },
  {
    "text": "empty because that's just making people buy more memory and that's making our share value go up it's brilliant",
    "start": "1704960",
    "end": "1713039"
  },
  {
    "start": "1712000",
    "end": "1836000"
  },
  {
    "text": "c and c plus plus i did see programming my first uh my first job",
    "start": "1713360",
    "end": "1718640"
  },
  {
    "text": "um it was on the job training it was like an apprenticeship and i turned up on my first day and they gave me a copy",
    "start": "1718640",
    "end": "1724480"
  },
  {
    "text": "of kernighan and ritchie's c programming book and they said work through that at",
    "start": "1724480",
    "end": "1729760"
  },
  {
    "text": "that terminal there so i sat down at the time i'm like how do i open a text editor and he went oh type vi",
    "start": "1729760",
    "end": "1736480"
  },
  {
    "text": "and the name of the file and it'll just create it for you sorry vi hello dot c",
    "start": "1736480",
    "end": "1742640"
  },
  {
    "text": "and then trying to start typing and there was a little semi-circle of all the other programmers who'd been there a",
    "start": "1742640",
    "end": "1747840"
  },
  {
    "text": "bit longer standing around me going hey he's just learned vi so yes",
    "start": "1747840",
    "end": "1753919"
  },
  {
    "text": "but um c had this brilliant feature uh called macros",
    "start": "1753919",
    "end": "1759279"
  },
  {
    "text": "which was essentially just string substitution through the code and at the time there was a big you know the holy",
    "start": "1759279",
    "end": "1766159"
  },
  {
    "text": "war so like vi versus emacs and net versus java and um and all these different things you know uh",
    "start": "1766159",
    "end": "1773039"
  },
  {
    "text": "react versus angular at the time it was c versus pascal believe it or not pascal",
    "start": "1773039",
    "end": "1778799"
  },
  {
    "text": "was actually considered a viable programming language back in 1989 and",
    "start": "1778799",
    "end": "1784159"
  },
  {
    "text": "that one of the arguments that the c people had was that c was better because you could declare a few macros at the",
    "start": "1784159",
    "end": "1791440"
  },
  {
    "text": "start of your c program and then it would compile pascal code but there was nothing you could do to pascal to make",
    "start": "1791440",
    "end": "1797520"
  },
  {
    "text": "it to compile c code and kind of like that i like what you've done",
    "start": "1797520",
    "end": "1803360"
  },
  {
    "text": "but it's not a good argument but i like macros they they can make surprising things happen so we're going to have",
    "start": "1803360",
    "end": "1809120"
  },
  {
    "text": "macros in bs modern languages um like rust for",
    "start": "1809120",
    "end": "1814159"
  },
  {
    "text": "example have what's called hygienic macros so they're actual little processes that run",
    "start": "1814159",
    "end": "1820000"
  },
  {
    "text": "inside the compiler and can do intelligent things and i like that idea of being able to do something a bit more",
    "start": "1820000",
    "end": "1826640"
  },
  {
    "text": "intelligent than just basic string substitution and actually there's already a fantastic way to do more",
    "start": "1826640",
    "end": "1833039"
  },
  {
    "text": "complex string substitution so i'm just going to use regular expressions",
    "start": "1833039",
    "end": "1838159"
  },
  {
    "start": "1836000",
    "end": "1898000"
  },
  {
    "text": "macros in bs are regular anything you can express in a regular expression you",
    "start": "1838159",
    "end": "1843679"
  },
  {
    "text": "can turn into a macro in bs and the specific regular expression syntax is",
    "start": "1843679",
    "end": "1849760"
  },
  {
    "text": "the one that you use in vi or vim for search and replace so when you do column percent s slash something slash",
    "start": "1849760",
    "end": "1856000"
  },
  {
    "text": "something else slash g this is this is the same thing here so this i've done define and then a capture",
    "start": "1856000",
    "end": "1862799"
  },
  {
    "text": "group and then thing and you've got the carrot at the start and colon at the end",
    "start": "1862799",
    "end": "1868880"
  },
  {
    "text": "and then a dollar to say the end of the string so this will match an entire string and then it will replace that with class and then whatever was",
    "start": "1868880",
    "end": "1875679"
  },
  {
    "text": "captured in that group so now in my code when i write my greeter thing colon this",
    "start": "1875679",
    "end": "1881600"
  },
  {
    "text": "macro will come along and replace that and turn that into class greeter",
    "start": "1881600",
    "end": "1888320"
  },
  {
    "text": "are you not entertained so yes because because what could",
    "start": "1889440",
    "end": "1896080"
  },
  {
    "text": "possibly go wrong with that so there are some things i'm not quite sure on um",
    "start": "1896080",
    "end": "1901120"
  },
  {
    "start": "1898000",
    "end": "1963000"
  },
  {
    "text": "i'm still sort of thinking them through static or dynamic typing so static type",
    "start": "1901120",
    "end": "1906320"
  },
  {
    "text": "i personally prefer a statically typed language i'm a c-sharp developer um and",
    "start": "1906320",
    "end": "1912880"
  },
  {
    "text": "uh it's other languages come along and i look at them and go do i still want to be a yeah",
    "start": "1912880",
    "end": "1918480"
  },
  {
    "text": "no i'm fine um because c sharp is is great and it's statically typed there",
    "start": "1918480",
    "end": "1923679"
  },
  {
    "text": "are times when that can be a bit annoying and you sort of think i wish this could be dynamic and then you",
    "start": "1923679",
    "end": "1929039"
  },
  {
    "text": "actually use the c sharp dynamic keyword and you go no i don't um but",
    "start": "1929039",
    "end": "1934399"
  },
  {
    "text": "uh so yeah there's there's a lot to be said for static typing there's a lot to be said for dynamic typing very quick prototyping very easy to do test driven",
    "start": "1934399",
    "end": "1941600"
  },
  {
    "text": "development in a in a dynamically typed language because you can you can",
    "start": "1941600",
    "end": "1947120"
  },
  {
    "text": "literally write the test first and it will run uh in a statically typed language if you write the test first and",
    "start": "1947120",
    "end": "1952960"
  },
  {
    "text": "you haven't written any of the implementation it'll just go i'm not compiling um so yes",
    "start": "1952960",
    "end": "1958640"
  },
  {
    "text": "so you know it's it's it's six of one half a dozen of the other and then i discovered that there's a",
    "start": "1958640",
    "end": "1964640"
  },
  {
    "start": "1963000",
    "end": "1998000"
  },
  {
    "text": "thing called gradual typing which facebook um use in their their programming language flow and actually",
    "start": "1964640",
    "end": "1971279"
  },
  {
    "text": "typescript originally did this it was optional so you could put a type hint",
    "start": "1971279",
    "end": "1977840"
  },
  {
    "text": "python has this now as well as of like 3.8 i think python has type hints so you",
    "start": "1977840",
    "end": "1982880"
  },
  {
    "text": "don't have to but you can put a type hint in there to say this variable",
    "start": "1982880",
    "end": "1988320"
  },
  {
    "text": "should be a string or it should be an integer or it should be something um and so yeah facebook and flow has this and",
    "start": "1988320",
    "end": "1995279"
  },
  {
    "text": "so we're going to do this gradual typing thing in bs we're going to introduce a new keyword is probably uh",
    "start": "1995279",
    "end": "2005080"
  },
  {
    "text": "and because you know it's colon that could mean anything at all so we're gonna have",
    "start": "2005120",
    "end": "2010480"
  },
  {
    "text": "is probably a we're gonna do localized versions of this as well so so we'll do a norwegian version with whatever the",
    "start": "2010480",
    "end": "2016399"
  },
  {
    "text": "norwegian for is probably uh is is going to be in there as well also um grammar",
    "start": "2016399",
    "end": "2022080"
  },
  {
    "text": "is very important and in the english language we have two indefinite articles a and an and we use an when the word",
    "start": "2022080",
    "end": "2030880"
  },
  {
    "text": "after it starts with a vowel or an h if you're very posh um and so this is going to do grammar",
    "start": "2030880",
    "end": "2038000"
  },
  {
    "text": "checking as well and so you say is probably a string but is probably an integer",
    "start": "2038000",
    "end": "2043600"
  },
  {
    "text": "and if you get that wrong that'll be a compiler error but it'll just say invalid constant",
    "start": "2043600",
    "end": "2050800"
  },
  {
    "text": "script or compiled so you know i quite like the idea of",
    "start": "2054320",
    "end": "2059679"
  },
  {
    "text": "scripted languages because it forces you to send your source code out there and then anybody who wants to can look at it and see how terrible it is but compiled",
    "start": "2059679",
    "end": "2067520"
  },
  {
    "text": "is good too because if you compile the code then it makes it much harder to work out why it's running really really",
    "start": "2067520",
    "end": "2073839"
  },
  {
    "text": "slowly which is of course because we've put for x equals zero to a million nop",
    "start": "2073839",
    "end": "2080079"
  },
  {
    "text": "in the machine code that has been output or we can do semi-compiled so a lot of languages are semi-compiled like c-sharp",
    "start": "2080079",
    "end": "2087679"
  },
  {
    "text": "and java for example is compiled to an intermediate byte code and then you ship that and then it gets jit compiled um",
    "start": "2087679",
    "end": "2094878"
  },
  {
    "text": "and so uh we're going to go for that semi-compiled thing we're going to generate this intermediate code but we",
    "start": "2094879",
    "end": "2102240"
  },
  {
    "text": "should also make sure that this compiles to ecmascript 3 so that people can write things that still run in internet",
    "start": "2102240",
    "end": "2107520"
  },
  {
    "text": "explorer 6 because it's still getting out there um",
    "start": "2107520",
    "end": "2113119"
  },
  {
    "text": "how many times do you see it you're watching on news particularly hospitals this is the terrifying thing and somebody's being interviewed and you",
    "start": "2113119",
    "end": "2119359"
  },
  {
    "text": "look behind them and you're going that's windows xp why have you got windows xp in your hospital",
    "start": "2119359",
    "end": "2125119"
  },
  {
    "text": "why what are you doing memory management um i like garbage",
    "start": "2125119",
    "end": "2130800"
  },
  {
    "text": "collected languages they make life nice and easy you just create things and then when you're finished with them there's",
    "start": "2130800",
    "end": "2135839"
  },
  {
    "text": "an automated process that comes along and goes oh you're not using that anymore i'll get rid of that for you",
    "start": "2135839",
    "end": "2141040"
  },
  {
    "text": "and clean up behind you um having worked in c for five years where you had to",
    "start": "2141040",
    "end": "2147359"
  },
  {
    "text": "malloc memory that you wanted and then put text into it and then remember to free it",
    "start": "2147359",
    "end": "2152960"
  },
  {
    "text": "again later otherwise everything just went to hell and the really brilliant thing with with",
    "start": "2152960",
    "end": "2159359"
  },
  {
    "text": "c even back in like 19 1991 there was a thing called lindt which could run over your c code and it would point out to",
    "start": "2159359",
    "end": "2167119"
  },
  {
    "text": "you when you had mallocked and you didn't appear to have freed that anywhere and",
    "start": "2167119",
    "end": "2172560"
  },
  {
    "text": "you kind of like if you can do that in the lint why don't you just do it in the king",
    "start": "2172560",
    "end": "2177599"
  },
  {
    "text": "compiler make my life easy rust has got this",
    "start": "2177599",
    "end": "2182800"
  },
  {
    "text": "whole thing going on with only one thing at a time can own a variable which it's it's a nightmare",
    "start": "2182800",
    "end": "2190560"
  },
  {
    "text": "there are two things so nothing is taken from rust in this by the way because um rust",
    "start": "2190560",
    "end": "2196560"
  },
  {
    "text": "is is very close to being the perfect language um and rust's uh",
    "start": "2196560",
    "end": "2202240"
  },
  {
    "text": "borrow checker and and lifetime checkers and all this sort of stuff they make life very difficult",
    "start": "2202240",
    "end": "2208160"
  },
  {
    "text": "but the reason they're making life very difficult is because the things you're trying to do are really really bad and",
    "start": "2208160",
    "end": "2213760"
  },
  {
    "text": "you shouldn't be doing them and they have the potential to cause your program to crash and do unexpected things",
    "start": "2213760",
    "end": "2220400"
  },
  {
    "text": "and rust knows this and so rust isn't going to let you do these things but",
    "start": "2220400",
    "end": "2225440"
  },
  {
    "text": "if you haven't tried rust just grab it and and work through the first couple of chapters of the rust book and do",
    "start": "2225440",
    "end": "2231200"
  },
  {
    "text": "something wrong because the error messages in rust it's like it's like a hug",
    "start": "2231200",
    "end": "2237520"
  },
  {
    "text": "from the compilers they're they're there you did your best yes yeah no you see",
    "start": "2237520",
    "end": "2242880"
  },
  {
    "text": "you see here where you've done this no you can't do that no no it's bad no",
    "start": "2242880",
    "end": "2248400"
  },
  {
    "text": "what you probably want to do is this it teaches you rust the compiler teeth is lovely",
    "start": "2248400",
    "end": "2254640"
  },
  {
    "text": "so yeah we're not doing that definitely our error messages are going to be hell we're going to force our programmers to",
    "start": "2254640",
    "end": "2260800"
  },
  {
    "text": "free everything they're not going to mallock them they're not going to know that they've allocated them we're just",
    "start": "2260800",
    "end": "2266160"
  },
  {
    "start": "2261000",
    "end": "2317000"
  },
  {
    "text": "going to make them free them we're going to use delete and delete is going to start with a capital letter unlike every",
    "start": "2266160",
    "end": "2271599"
  },
  {
    "text": "other keyword because delete is important you don't want to leak memory and you have to delete everything if",
    "start": "2271599",
    "end": "2277040"
  },
  {
    "text": "you've used a variable you have to delete it so there's no pass by reference so the",
    "start": "2277040",
    "end": "2283040"
  },
  {
    "text": "the name parameter that's been passed into our construct here that's a copy of the name parameter wherever that came",
    "start": "2283040",
    "end": "2289359"
  },
  {
    "text": "from so now you own this this name variable here so you have to delete that when your function is finished any",
    "start": "2289359",
    "end": "2295119"
  },
  {
    "text": "parameters you took in any variables you created the only thing you don't delete is if your function returns something",
    "start": "2295119",
    "end": "2300560"
  },
  {
    "text": "then i actually know you have to delete that as well because when it returns it it'll make a copy of that and then the thing that called the function will own",
    "start": "2300560",
    "end": "2306160"
  },
  {
    "text": "that and so after the return statement you have to delete the variable you just returned it's gonna be great what could",
    "start": "2306160",
    "end": "2313520"
  },
  {
    "text": "possibly go wrong everything that's the point loops",
    "start": "2313520",
    "end": "2318880"
  },
  {
    "start": "2317000",
    "end": "2350000"
  },
  {
    "text": "i'm a big big big big believer in the the principle that if it's broke",
    "start": "2318880",
    "end": "2325280"
  },
  {
    "text": "you shouldn't fix it and if it isn't broke you should fix it until it breaks and then run away",
    "start": "2325280",
    "end": "2331920"
  },
  {
    "text": "hire me but no there's there are four loops",
    "start": "2332240",
    "end": "2337599"
  },
  {
    "text": "there are while loops there are four reach loops there are iterators there are do while loops there's all different",
    "start": "2337599",
    "end": "2343040"
  },
  {
    "text": "ways of doing loops but we all know the best way of doing loops thank you into cal thank you basic is go to",
    "start": "2343040",
    "end": "2351119"
  },
  {
    "text": "so modern languages c has go to c sharp has go to i actually use go to in c",
    "start": "2351119",
    "end": "2356960"
  },
  {
    "text": "sharp um not a lot but",
    "start": "2356960",
    "end": "2362240"
  },
  {
    "text": "you know when you have a try method in c sharp and it's got an out",
    "start": "2362240",
    "end": "2367359"
  },
  {
    "text": "and you're going to do a bunch of things to see if you can set that out variable and then you're going to return true or",
    "start": "2367359",
    "end": "2373760"
  },
  {
    "text": "you're going to set that out variable to its default value and return false and",
    "start": "2373760",
    "end": "2379440"
  },
  {
    "text": "if there are like three or four different ways that trying to do this can fail you don't want to repeat that",
    "start": "2379440",
    "end": "2384640"
  },
  {
    "text": "set it to its default value and return false so you put set it to its default value and return false at the bottom of",
    "start": "2384640",
    "end": "2391520"
  },
  {
    "text": "your c sharp function and you put a fail label on it so fail colon and then as",
    "start": "2391520",
    "end": "2397200"
  },
  {
    "text": "you're going through you just go go to fail go to fail go to fail and then just before you fail you set it to what it should be in return through it",
    "start": "2397200",
    "end": "2404079"
  },
  {
    "text": "and there's nothing wrong with doing that and people go oh you've put goto in your code people literally have like um",
    "start": "2404079",
    "end": "2411760"
  },
  {
    "text": "like net code analyzers that they've written with roslyn just just to look for the word go to just go ah you're bad",
    "start": "2411760",
    "end": "2417119"
  },
  {
    "text": "and you're kind of like a no i'm not because it's in there and if it's in there you should be allowed to use it",
    "start": "2417119",
    "end": "2423280"
  },
  {
    "text": "and b write some code that doesn't use go to and then go and look at the intermediate",
    "start": "2423280",
    "end": "2429280"
  },
  {
    "text": "language that is generated from that what do you find in gotos all over the place so i'm putting them in my code",
    "start": "2429280",
    "end": "2436240"
  },
  {
    "text": "but we're not going to have labels we're going to have line numbers we're only going to have line numbers though for lines that you are going to",
    "start": "2436240",
    "end": "2442720"
  },
  {
    "text": "because what's the point of having line numbers for anything else and because i am a big fan of douglas adams line",
    "start": "2442720",
    "end": "2448400"
  },
  {
    "text": "numbers have to be a multiple of 42 uh so you have line 42 and then the next line that you want to go to is going to",
    "start": "2448400",
    "end": "2454400"
  },
  {
    "text": "be line 84 and we're going to go up like that and they have to be sequentially",
    "start": "2454400",
    "end": "2460000"
  },
  {
    "text": "increasing and by 42 each time throughout your entire program and so if you need to introduce a new one halfway",
    "start": "2460000",
    "end": "2466560"
  },
  {
    "text": "through you're going to have to manually renumber all the go-to lines underneath that we'll sell a refactoring tool that will",
    "start": "2466560",
    "end": "2472640"
  },
  {
    "text": "do that for you twenty thousand dollars so we're gonna say 42",
    "start": "2472640",
    "end": "2478560"
  },
  {
    "text": "echo thing uh and and whatever else and then go to 42 unless",
    "start": "2478560",
    "end": "2485119"
  },
  {
    "text": "uh the decremented times is strictly equal as your bang bang equals bang",
    "start": "2485119",
    "end": "2491440"
  },
  {
    "text": "operator to zero and so this will print that string that number of times um",
    "start": "2491440",
    "end": "2498240"
  },
  {
    "text": "the terrifying thing that i realized as i was writing this example code is",
    "start": "2498240",
    "end": "2503599"
  },
  {
    "text": "you could write a compiler that would do that that that that would potentially work please don't",
    "start": "2503599",
    "end": "2510160"
  },
  {
    "text": "please i did this talk at build stuff in 2014 and and",
    "start": "2510160",
    "end": "2515760"
  },
  {
    "text": "two different groups of people went off and started github repos i was just kind of no no no no there are much better or",
    "start": "2515760",
    "end": "2523760"
  },
  {
    "text": "worse things you could do with your time so modern programming languages we've got multi-core processors now we've got",
    "start": "2523760",
    "end": "2529839"
  },
  {
    "text": "um my home machine has got 16 cores and each one of them is hyper threading so it's 32 logical calls in my",
    "start": "2529839",
    "end": "2537359"
  },
  {
    "text": "machine so we have to support parallelism we have to be able to parallelize tasks so they can run as fast as possible which means we need to",
    "start": "2537359",
    "end": "2544560"
  },
  {
    "text": "to do threads um and there's lots of different ways that go has go routines and there are says thread factory thread",
    "start": "2544560",
    "end": "2551839"
  },
  {
    "text": "uh was it threadpool.q user work item and all",
    "start": "2551839",
    "end": "2557359"
  },
  {
    "text": "these sorts of things and i was trying to think how can i bring bring threading into bs",
    "start": "2557359",
    "end": "2563359"
  },
  {
    "text": "and i thought well you know the basic people they like having words for things like they're like lots of keywords and stuff so let's",
    "start": "2563359",
    "end": "2569839"
  },
  {
    "text": "do something to to please the basic people so if you want two pieces of code to run at the same time in bs you just",
    "start": "2569839",
    "end": "2578000"
  },
  {
    "text": "say do this and this and it will run both those lines of code",
    "start": "2578000",
    "end": "2583520"
  },
  {
    "text": "at the same time so it will run hello and goodbye at the same time who knows",
    "start": "2583520",
    "end": "2588640"
  },
  {
    "text": "which one of those will finish first it's indeterminate as threading should be so and that's that that makes sense to",
    "start": "2588640",
    "end": "2594319"
  },
  {
    "text": "me that's that's completely fine the problem though with this way of doing threads which i am now married to",
    "start": "2594319",
    "end": "2600640"
  },
  {
    "text": "um and i i cannot possibly contemplate any other way of doing threads is is it's not dynamic",
    "start": "2600640",
    "end": "2607040"
  },
  {
    "text": "so if i get an array of something and i want to run an operation on each element",
    "start": "2607040",
    "end": "2612079"
  },
  {
    "text": "in that array and i want to do that in a multi-threaded way so like parallel.4 or",
    "start": "2612079",
    "end": "2617760"
  },
  {
    "text": "parallel.4 each in c sharp um there's there's no way of doing that because it's i it's got do and and and and and",
    "start": "2617760",
    "end": "2625440"
  },
  {
    "text": "and so i i racked my brains and i thought there must be a solution to this",
    "start": "2625440",
    "end": "2631520"
  },
  {
    "text": "and then i realized that there's a terrible language from way back in the mists of time that i hadn't taken",
    "start": "2631520",
    "end": "2638240"
  },
  {
    "text": "anything from yet which was fourth fourth was was a truly",
    "start": "2638240",
    "end": "2645200"
  },
  {
    "text": "weird language back in the 1950s i think fourth came from",
    "start": "2645200",
    "end": "2650560"
  },
  {
    "text": "and fourth was the first language that had the evaluate instruction",
    "start": "2650560",
    "end": "2656240"
  },
  {
    "text": "so in fourth you could write some code in a string and then say to fourth",
    "start": "2656240",
    "end": "2662000"
  },
  {
    "text": "compile that and run it dynamically at runtime and actually so many languages um still",
    "start": "2662000",
    "end": "2667920"
  },
  {
    "text": "have you know you can do that in c sharp with uh with the rosalind compiler you can generate an in-memory assembly and run",
    "start": "2667920",
    "end": "2673920"
  },
  {
    "text": "it at runtime and and there are brilliant and clever things you can do with that javascript famously",
    "start": "2673920",
    "end": "2680800"
  },
  {
    "text": "json javascript object notation the original idea with json was that it was not just an object format it was also",
    "start": "2680800",
    "end": "2687440"
  },
  {
    "text": "valid javascript and so you could just say eval a string and it would become an",
    "start": "2687440",
    "end": "2692800"
  },
  {
    "text": "in-memory object and people went that's genius and other people went so if i put a function in that string i",
    "start": "2692800",
    "end": "2699040"
  },
  {
    "text": "can do pretty much whatever i want on your computer and the people who invented jason when oh no there are bad",
    "start": "2699040",
    "end": "2704640"
  },
  {
    "text": "people in the world who knew um but no so we're going to bring in eval",
    "start": "2704640",
    "end": "2710319"
  },
  {
    "text": "for for bs lang and so if i want to do something dynamically with threads then i can just",
    "start": "2710319",
    "end": "2717520"
  },
  {
    "text": "build up a string and so i'm going to work through this so we start",
    "start": "2717520",
    "end": "2724160"
  },
  {
    "text": "with i as -1 oh the gradual typing thing if the thing",
    "start": "2724160",
    "end": "2730880"
  },
  {
    "text": "you're passing in is an array then you don't say like string bracket bracket",
    "start": "2730880",
    "end": "2737040"
  },
  {
    "text": "you say things are probably strings or the equivalent plural",
    "start": "2737040",
    "end": "2743119"
  },
  {
    "text": "conjugation of to be in the relevant language so we say i to minus one and we",
    "start": "2743119",
    "end": "2748319"
  },
  {
    "text": "create an empty uh that's a an ascii string",
    "start": "2748319",
    "end": "2754319"
  },
  {
    "text": "no it's an ansi string whatever it is um and then we say line 42 we're going to",
    "start": "2754319",
    "end": "2760880"
  },
  {
    "text": "uh set threads to do um uh else we'll set threads to and will",
    "start": "2760880",
    "end": "2768720"
  },
  {
    "text": "append um and to threads unless i",
    "start": "2768720",
    "end": "2774640"
  },
  {
    "text": "is equal to one oh i forgot to mention earlier on",
    "start": "2774640",
    "end": "2781359"
  },
  {
    "text": "so yeah visual basics arrays started at one most other programming languages",
    "start": "2781359",
    "end": "2786400"
  },
  {
    "text": "arrays start at zero bs lang's arrays start at minus one and then go down",
    "start": "2786400",
    "end": "2793440"
  },
  {
    "text": "because they can and it is actually laid out backwards in memory uh which will please all the java",
    "start": "2793440",
    "end": "2799440"
  },
  {
    "text": "people with their big endian integers so yes so we start at minus one",
    "start": "2799440",
    "end": "2806560"
  },
  {
    "text": "this threads 42 threads is this else threads is that",
    "start": "2806560",
    "end": "2811599"
  },
  {
    "text": "um and then unless so what we're saying is unless i equals minus 1 do the line",
    "start": "2811599",
    "end": "2817520"
  },
  {
    "text": "above else do the the line that starts with 42. that's an inverted if statement using",
    "start": "2817520",
    "end": "2823920"
  },
  {
    "text": "unless there you go ruby that's how stupid unless is okay then we add the line to say the",
    "start": "2823920",
    "end": "2832079"
  },
  {
    "text": "things that we've currently got in our string and then we go to 42",
    "start": "2832079",
    "end": "2837520"
  },
  {
    "text": "unless negative and less decremented i is less than the length of things the",
    "start": "2837520",
    "end": "2844800"
  },
  {
    "text": "length oh less than minus the length of things so despite the fact that arrays start at minus one and then go down when",
    "start": "2844800",
    "end": "2852240"
  },
  {
    "text": "you call len on an array it will return a positive number and actually that's fine because we are",
    "start": "2852240",
    "end": "2857599"
  },
  {
    "text": "all completely used to the fact that when we get the length of an array in",
    "start": "2857599",
    "end": "2862800"
  },
  {
    "text": "any programming language except visual basic to be fair um it will be one more than the highest index",
    "start": "2862800",
    "end": "2869440"
  },
  {
    "text": "in that array so if you get up a bound it'll be one less so yes",
    "start": "2869440",
    "end": "2875520"
  },
  {
    "text": "then there is a a static method that is in all no there is a method in all caps",
    "start": "2875520",
    "end": "2881920"
  },
  {
    "text": "on the string type in bslang called evaluate which will just cause it to run",
    "start": "2881920",
    "end": "2887599"
  },
  {
    "text": "and then we have to delete threads and i obviously because we're finished with them",
    "start": "2887599",
    "end": "2893040"
  },
  {
    "text": "wouldn't you love to turn up to work every day and just know that you were going to work with this language",
    "start": "2893040",
    "end": "2899119"
  },
  {
    "text": "wouldn't that make you happy no oh suit yourself",
    "start": "2899119",
    "end": "2904559"
  },
  {
    "start": "2903000",
    "end": "3066000"
  },
  {
    "text": "um this is the the last item this is something that dylan beatty actually drew my attention to yesterday",
    "start": "2904559",
    "end": "2911200"
  },
  {
    "text": "in go so in every other language and go",
    "start": "2911200",
    "end": "2917359"
  },
  {
    "text": "does things differently and i'm pretty sure it's just because",
    "start": "2917359",
    "end": "2922800"
  },
  {
    "text": "they're bastards um they've just added generics in go 1.18",
    "start": "2922800",
    "end": "2928319"
  },
  {
    "text": "finally after saying generics make things too complicated for ages now write the same",
    "start": "2928319",
    "end": "2933599"
  },
  {
    "text": "function over and over and over again for every possible type this array could be",
    "start": "2933599",
    "end": "2939200"
  },
  {
    "text": "they've added generics but for for generic type parameters and and",
    "start": "2939200",
    "end": "2944559"
  },
  {
    "text": "type arguments it's not angle brackets it's square brackets which they do also use for the array",
    "start": "2944559",
    "end": "2950640"
  },
  {
    "text": "indexer apparently you can't use angle brackets because they're also the less than and",
    "start": "2950640",
    "end": "2955839"
  },
  {
    "text": "greater than operator and so if you're assigning two variables uh if you say a comma b equals and then",
    "start": "2955839",
    "end": "2961760"
  },
  {
    "text": "you've got these things you have to the passer would have to read ahead to work out what was going on",
    "start": "2961760",
    "end": "2969040"
  },
  {
    "text": "so right make the passer read ahead to work out what's going on what the wrong with you it's not like the",
    "start": "2969040",
    "end": "2975280"
  },
  {
    "text": "passer's got better things to do than read my code is it but anyway they're doing that but goes",
    "start": "2975280",
    "end": "2981599"
  },
  {
    "text": "uh date handling whether you want to format a date or pass a date so if we want to format a date we can pass an",
    "start": "2981599",
    "end": "2987599"
  },
  {
    "text": "explicit string usually lowercase yyyy uppercase m for the month and you've got",
    "start": "2987599",
    "end": "2993760"
  },
  {
    "text": "mm if you want to print it with two digits and then mmm will do like jan feb mar and mmm we'll just print the whole",
    "start": "2993760",
    "end": "3001359"
  },
  {
    "text": "thing dd for day hh for 12 hour clock capital hh for 24",
    "start": "3001359",
    "end": "3007680"
  },
  {
    "text": "hour clock lower case mm for minutes lower case ss for seconds lowercase fff",
    "start": "3007680",
    "end": "3012720"
  },
  {
    "text": "for fractions every programming language in the world",
    "start": "3012720",
    "end": "3018559"
  },
  {
    "text": "uses that now as far as i can tell it's it's like this it's not an iso standard not like the iso date format but it is",
    "start": "3018559",
    "end": "3025040"
  },
  {
    "text": "pretty much standard go doesn't go uses january the 22nd 2006",
    "start": "3025040",
    "end": "3033040"
  },
  {
    "text": "at three minutes past four and five seconds uh mountain time",
    "start": "3033040",
    "end": "3040400"
  },
  {
    "text": "so seven hours behind gmt that is goes magic date and so however",
    "start": "3040400",
    "end": "3047839"
  },
  {
    "text": "you want to format your date you write that date in that format and then it",
    "start": "3047839",
    "end": "3053040"
  },
  {
    "text": "will turn whatever date you've actually got into that same format",
    "start": "3053040",
    "end": "3058079"
  },
  {
    "text": "because they're bastards that's the only thing i can think of it's this is documented in",
    "start": "3058079",
    "end": "3065280"
  },
  {
    "text": "their code it has go doesn't use yymmdd layout so they know it exists",
    "start": "3065280",
    "end": "3071680"
  },
  {
    "start": "3066000",
    "end": "3124000"
  },
  {
    "text": "they know about it but no they're not going to use it instead you format a special layout parameter monday january",
    "start": "3071680",
    "end": "3079359"
  },
  {
    "text": "the 2nd 150405 mst 2006 the same way as the time or",
    "start": "3079359",
    "end": "3085760"
  },
  {
    "text": "date should be formatted it has to be that exact date and time",
    "start": "3085760",
    "end": "3092319"
  },
  {
    "text": "and then there's this line this date is easier to remember when written as 0102 345 pm060700",
    "start": "3092319",
    "end": "3101400"
  },
  {
    "text": "okay but have you ever seen a date written like that",
    "start": "3103760",
    "end": "3108960"
  },
  {
    "text": "i have never ever in my life seen somebody format a date like that and bloody americans they put the month",
    "start": "3108960",
    "end": "3115680"
  },
  {
    "text": "first 0-102 the 2nd of january no that's the 1st of february",
    "start": "3115680",
    "end": "3121359"
  },
  {
    "text": "so it's too good it's going in um but i'm going to use as my date uh the 21st of",
    "start": "3121359",
    "end": "3128880"
  },
  {
    "start": "3124000",
    "end": "3162000"
  },
  {
    "text": "november 2014 at 10 minutes past five eastern european time uh which is the",
    "start": "3128880",
    "end": "3136079"
  },
  {
    "text": "start of the first time i ever gave this talk um and so i mean that's",
    "start": "3136079",
    "end": "3142800"
  },
  {
    "text": "okay it's it's not one two three four five six seven like goes one's uh is but",
    "start": "3142800",
    "end": "3148480"
  },
  {
    "text": "you may find it easier to remember when it's written as twenty one oh five ten zero zero pm",
    "start": "3148480",
    "end": "3154319"
  },
  {
    "text": "uh apostrophe 14 plus zero two zero zero um because there you go that's super",
    "start": "3154319",
    "end": "3160319"
  },
  {
    "text": "helpful i learned a norwegian word",
    "start": "3160319",
    "end": "3165599"
  },
  {
    "start": "3162000",
    "end": "3367000"
  },
  {
    "text": "if you're not norwegian that means you're welcome because i thought that was more appropriate than thank you",
    "start": "3165599",
    "end": "3171920"
  },
  {
    "text": "so yes those those are my ideas for the worst programming language ever",
    "start": "3171920",
    "end": "3177040"
  },
  {
    "text": "and and i do really want to thank go for that last contribution that's that's really tickled me um does anyone in the",
    "start": "3177040",
    "end": "3183680"
  },
  {
    "text": "audience we've got about uh seven minutes left on the clock does anyone in the audience have a a favorite feature",
    "start": "3183680",
    "end": "3190640"
  },
  {
    "text": "from their language that they think we should adopt that they'd like to share",
    "start": "3190640",
    "end": "3197280"
  },
  {
    "text": "no that's fine if you don't sometimes oh yes hello",
    "start": "3197440",
    "end": "3203119"
  },
  {
    "text": "you despite well yes matlab and it echoes out anything you don't and with a",
    "start": "3203440",
    "end": "3209200"
  },
  {
    "text": "semi-colon it matlab echoes out anything you don't end with a semicolon any line it echoes out",
    "start": "3209200",
    "end": "3215280"
  },
  {
    "text": "whatever you did on that line what i do is i go to the last slide as",
    "start": "3215280",
    "end": "3222240"
  },
  {
    "text": "i'm as i'm doing the presentation and i add speaker notes for it if i like it",
    "start": "3222240",
    "end": "3227359"
  },
  {
    "text": "i like it where's my view thing",
    "start": "3227359",
    "end": "3232640"
  },
  {
    "text": "ah speaker note speaker note speaker notes",
    "start": "3232640",
    "end": "3237838"
  },
  {
    "text": "outline view no notes page there we go um",
    "start": "3238720",
    "end": "3244319"
  },
  {
    "text": "so matlab echoes out any line that",
    "start": "3244319",
    "end": "3250800"
  },
  {
    "text": "doesn't end with a semicolon or a greek question",
    "start": "3250800",
    "end": "3256319"
  },
  {
    "text": "mark obviously in in in bs so yes that that's brilliant i love that",
    "start": "3256319",
    "end": "3261440"
  },
  {
    "text": "so yeah i'm gonna put that in for a future one hello yes i think maybe i'm",
    "start": "3261440",
    "end": "3267680"
  },
  {
    "text": "swearing in church but do you have anything to say about also or else",
    "start": "3267680",
    "end": "3274720"
  },
  {
    "text": "and also or else from vb",
    "start": "3274720",
    "end": "3281039"
  },
  {
    "text": "i'm not even familiar with those",
    "start": "3281760",
    "end": "3286119"
  },
  {
    "text": "okay",
    "start": "3286799",
    "end": "3289799"
  },
  {
    "text": "right so it would not evaluate further things if ah yes so if you did in in vb",
    "start": "3292160",
    "end": "3300240"
  },
  {
    "text": "6 if you did this and this and this and this it would evaluate all of them even",
    "start": "3300240",
    "end": "3305839"
  },
  {
    "text": "if the first one was false yes that's right and so they added because you can't break existing",
    "start": "3305839",
    "end": "3311920"
  },
  {
    "text": "behavior because people could be relying on side effects from the third thing in the and sequence happening even when the",
    "start": "3311920",
    "end": "3317920"
  },
  {
    "text": "first one was false and so they introduced and also um to say the that which was the early",
    "start": "3317920",
    "end": "3323839"
  },
  {
    "text": "terminating and operator in if statements um yeah i'd forgotten about that",
    "start": "3323839",
    "end": "3332280"
  },
  {
    "text": "yeah okay those are in there as well um so yes yes hello",
    "start": "3336240",
    "end": "3344000"
  },
  {
    "text": "yes oh so if statements should require you",
    "start": "3346720",
    "end": "3352720"
  },
  {
    "text": "or sorry unless statements should require you to break so",
    "start": "3352720",
    "end": "3358160"
  },
  {
    "text": "and functions i i like that you're a twisted puppy",
    "start": "3358160",
    "end": "3365119"
  },
  {
    "start": "3367000",
    "end": "3599000"
  },
  {
    "text": "so so here",
    "start": "3369200",
    "end": "3375520"
  },
  {
    "text": "um we would say 42 threads equal something break else threads equals break",
    "start": "3375520",
    "end": "3382640"
  },
  {
    "text": "um unless blah blah blah go to 42 break unless",
    "start": "3382640",
    "end": "3388559"
  },
  {
    "text": "negative negative i and then after delete threads and i we'd put break",
    "start": "3388559",
    "end": "3393839"
  },
  {
    "text": "yeah thank you not going to be able to fit these on the slides next time i do this talk",
    "start": "3394000",
    "end": "3401119"
  },
  {
    "text": "break at end of every",
    "start": "3401119",
    "end": "3406640"
  },
  {
    "text": "scope yep that's fantastic anybody else have any suggestions yes",
    "start": "3406640",
    "end": "3413359"
  },
  {
    "text": "hello at the can back function without braces",
    "start": "3413359",
    "end": "3420640"
  },
  {
    "text": "so like you call it function yeah but it's just written as a variable",
    "start": "3420640",
    "end": "3425920"
  },
  {
    "text": "oh yes i've seen ruby does that as well doesn't it if you're not passing parameters you don't",
    "start": "3425920",
    "end": "3433040"
  },
  {
    "text": "have to specify the parens yeah i'll put that down there",
    "start": "3433040",
    "end": "3439920"
  },
  {
    "text": "optional parens when",
    "start": "3440559",
    "end": "3445599"
  },
  {
    "text": "function has no params yeah that that's awesome hello yes",
    "start": "3445599",
    "end": "3451520"
  },
  {
    "text": "i think the language is a bit too effective with less than double minus",
    "start": "3451520",
    "end": "3459400"
  },
  {
    "text": "you would um but uh so yeah and i thought about that the",
    "start": "3461440",
    "end": "3467920"
  },
  {
    "text": "sort of um pre-ink and posting course or something like that um and doing it as a",
    "start": "3467920",
    "end": "3474480"
  },
  {
    "text": "function with like a ref parameter um but then i thought if we put plus plus",
    "start": "3474480",
    "end": "3479599"
  },
  {
    "text": "and minus minus in there we might trick programmers from c like languages to going oh they're serious",
    "start": "3479599",
    "end": "3487520"
  },
  {
    "text": "that's good yes yes you do have that um yep dash gt ah",
    "start": "3492480",
    "end": "3498880"
  },
  {
    "text": "there's a there is a left i want to say it's vb but i don't think it is um",
    "start": "3498880",
    "end": "3504240"
  },
  {
    "text": "there was a programming language i think it was one of the ones i evaluated at the same time as vb and uh and gupta sql",
    "start": "3504240",
    "end": "3510880"
  },
  {
    "text": "windows because i looked at power builder did anyone ever use power builder that sucked",
    "start": "3510880",
    "end": "3517280"
  },
  {
    "text": "informix new era but i've seen a language which has greater than and greater than equal and",
    "start": "3517280",
    "end": "3525119"
  },
  {
    "text": "less than and less than equal as keywords and doesn't support just the the mathematical operators for those",
    "start": "3525119",
    "end": "3532160"
  },
  {
    "text": "things because apparently according to unicode what we call the",
    "start": "3532160",
    "end": "3538559"
  },
  {
    "text": "less than and greater than characters are not actually the less than and greater than characters they're a type",
    "start": "3538559",
    "end": "3544079"
  },
  {
    "text": "of paren the mathematical characters for less than and greater than are hiding somewhere else in the unicode character",
    "start": "3544079",
    "end": "3550400"
  },
  {
    "text": "set we've been sold a lie so yeah",
    "start": "3550400",
    "end": "3556720"
  },
  {
    "text": "um right yes one more hello",
    "start": "3556960",
    "end": "3561760"
  },
  {
    "text": "you often have to prefix functions in build functions right",
    "start": "3563359",
    "end": "3569599"
  },
  {
    "text": "yes so prefix everything with bs yes",
    "start": "3570319",
    "end": "3577680"
  },
  {
    "text": "oh so so some things will and some things yeah okay so prefix",
    "start": "3580400",
    "end": "3586480"
  },
  {
    "text": "uh let's say 69 because that all that number makes my son laugh",
    "start": "3586480",
    "end": "3592960"
  },
  {
    "text": "he's 10. um thank you youtube uh of um standard",
    "start": "3592960",
    "end": "3601040"
  },
  {
    "text": "library uh members with bs",
    "start": "3601040",
    "end": "3606559"
  },
  {
    "text": "fantastic right our time is up thank you all so much for coming um thank you for",
    "start": "3606559",
    "end": "3612640"
  },
  {
    "text": "for coming to the conference generally i hope you had a great time please safe journey home and uh take",
    "start": "3612640",
    "end": "3619200"
  },
  {
    "text": "care of yourself and i hope that we will be back here in may june next year and",
    "start": "3619200",
    "end": "3624559"
  },
  {
    "text": "we can do this all again cheers [Applause]",
    "start": "3624559",
    "end": "3633540"
  }
]