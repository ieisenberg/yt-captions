[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "hi everyone i'm ben sacks my company saxon associates does training in c and",
    "start": "5120",
    "end": "13130"
  },
  {
    "text": "c++ for companies all over the world so if you're interested in learning more",
    "start": "13130",
    "end": "19279"
  },
  {
    "text": "you can find out about us at our at our website or feel free to connect with me",
    "start": "19279",
    "end": "25550"
  },
  {
    "text": "on LinkedIn or email me questions things like that so I'm gonna be talking today",
    "start": "25550",
    "end": "33170"
  },
  {
    "text": "about this concept of freestanding C++ what it is where it comes from where it",
    "start": "33170",
    "end": "40130"
  },
  {
    "text": "might be going and what you can do in the meantime before it gets to that",
    "start": "40130",
    "end": "46100"
  },
  {
    "text": "place where it might eventually be going and the story of freestanding C and C++",
    "start": "46100",
    "end": "52610"
  },
  {
    "text": "kind of starts in the same place as the whole standardization process for C and",
    "start": "52610",
    "end": "60469"
  },
  {
    "text": "C++ in general so the question that we you know we don't often ask ourselves",
    "start": "60469",
    "end": "68060"
  },
  {
    "text": "this but you know why do we have language standards what's the point of",
    "start": "68060",
    "end": "73179"
  },
  {
    "text": "standardizing CN C++ yeah it's a the",
    "start": "73179",
    "end": "78800"
  },
  {
    "text": "sort of thing that we just sort of take for granted a lot of the time but if you but it's worth taking your time every so",
    "start": "78800",
    "end": "85310"
  },
  {
    "text": "often to step back and think about that a little bit and there are lots of",
    "start": "85310",
    "end": "90530"
  },
  {
    "text": "different reasons that we might want a standardized C++ but one of the big benefits I think is Portability and",
    "start": "90530",
    "end": "98800"
  },
  {
    "text": "portability comes in a couple of different flavors the one we usually talk about is that having a language",
    "start": "98800",
    "end": "106190"
  },
  {
    "text": "that's portable means that we can write programs that are portable so we can",
    "start": "106190",
    "end": "112009"
  },
  {
    "text": "write one a single program using a sink one code base and compile it with",
    "start": "112009",
    "end": "118130"
  },
  {
    "text": "several different tool chains targeting many different platforms and have a reasonable expectation that the program",
    "start": "118130",
    "end": "126020"
  },
  {
    "text": "that we get out the other end will actually run and do the right thing but",
    "start": "126020",
    "end": "131800"
  },
  {
    "text": "having a portable language also means that your skills are portable",
    "start": "131800",
    "end": "137160"
  },
  {
    "text": "the things that you learn in the process of writing your first C or C++ program",
    "start": "137160",
    "end": "143030"
  },
  {
    "text": "can then be applied to writing more C and C++ programs even if those other",
    "start": "143030",
    "end": "149880"
  },
  {
    "text": "programs are targeting completely different environments using completely different tool chains so portability is",
    "start": "149880",
    "end": "160080"
  },
  {
    "text": "important but making C and C++ portable is hard because well for lots of reasons",
    "start": "160080",
    "end": "169230"
  },
  {
    "text": "but one of the reasons that making C and C++ portable is hard is that they're",
    "start": "169230",
    "end": "175620"
  },
  {
    "text": "used to write so many different kinds of applications not just traditional",
    "start": "175620",
    "end": "180810"
  },
  {
    "text": "desktop and server applications but things like operating systems or embedded systems some of which use an",
    "start": "180810",
    "end": "188700"
  },
  {
    "text": "operating system and some of which don't some of which run on bare metal and so",
    "start": "188700",
    "end": "195870"
  },
  {
    "text": "when you're writing programs like operating systems and embedded systems you're often operating in environments",
    "start": "195870",
    "end": "203040"
  },
  {
    "text": "that often have some quite severe limitations and those limitations affect",
    "start": "203040",
    "end": "209550"
  },
  {
    "text": "your ability to use certain parts of the language in the library so for example",
    "start": "209550",
    "end": "215730"
  },
  {
    "text": "you might not have a file system available if you are if you're",
    "start": "215730",
    "end": "222090"
  },
  {
    "text": "implementing an operating system usually the file system that you have is one of",
    "start": "222090",
    "end": "227610"
  },
  {
    "text": "the features of your operating system and you can't use the file system from",
    "start": "227610",
    "end": "234900"
  },
  {
    "text": "another operating system to implement a new operating system most people don't",
    "start": "234900",
    "end": "240000"
  },
  {
    "text": "want an operating system that needs to run on top of another operating system",
    "start": "240000",
    "end": "246470"
  },
  {
    "text": "so as a result of that the C and C++ file types for doing input and output",
    "start": "246470",
    "end": "254340"
  },
  {
    "text": "with files might not be available they might not work correctly within",
    "start": "254340",
    "end": "259380"
  },
  {
    "text": "that environment you might not have certain types of hardware like a real-time clock so you might not be able",
    "start": "259380",
    "end": "267840"
  },
  {
    "text": "to the C and C++ functions that exists to get the current",
    "start": "267840",
    "end": "273530"
  },
  {
    "text": "real-world time might not exist in your application you might not have a dynamic",
    "start": "273530",
    "end": "281010"
  },
  {
    "text": "memory pool depending on what sort of memory resources you have available it",
    "start": "281010",
    "end": "286050"
  },
  {
    "text": "might be very difficult for you to use C functions like malloc or C++ facilities",
    "start": "286050",
    "end": "291720"
  },
  {
    "text": "like new within reasonable constraints so all of these things make it kind of",
    "start": "291720",
    "end": "300120"
  },
  {
    "text": "difficult to know what is and isn't available when you're writing these types of systems and this is a problem",
    "start": "300120",
    "end": "308400"
  },
  {
    "text": "because even for these kinds of systems portability is very useful I mean for",
    "start": "308400",
    "end": "313770"
  },
  {
    "text": "operating systems it's generally a design requirement the point of an",
    "start": "313770",
    "end": "319080"
  },
  {
    "text": "operating system is often to be portable for embedded systems you're having some",
    "start": "319080",
    "end": "328500"
  },
  {
    "text": "of the code that you write even for embedded systems that have very specific hardware components often a fair chunk",
    "start": "328500",
    "end": "336360"
  },
  {
    "text": "of the code that you write could be reused on another platform in the next",
    "start": "336360",
    "end": "341850"
  },
  {
    "text": "generation of the product for example so having the ability to change targets",
    "start": "341850",
    "end": "348390"
  },
  {
    "text": "there can be very useful or maybe you don't want to change targets but you want to change which tool chain you're",
    "start": "348390",
    "end": "355229"
  },
  {
    "text": "using because your existing compiler vendor hasn't provided all of the new",
    "start": "355229",
    "end": "361250"
  },
  {
    "text": "modern C++ features that you want and you've found another tool chain that can do something that you think would be",
    "start": "361250",
    "end": "368700"
  },
  {
    "text": "very helpful to you if you if you have portable code making that kind of change",
    "start": "368700",
    "end": "374370"
  },
  {
    "text": "isn't that bad but it's it's not no effort but it's not that bad",
    "start": "374370",
    "end": "381780"
  },
  {
    "text": "but if your code isn't portable that could be a real nightmare if you're",
    "start": "381780",
    "end": "386820"
  },
  {
    "text": "talking about libraries if you are a library implementer if you can make your",
    "start": "386820",
    "end": "392789"
  },
  {
    "text": "library portable to the point where it can be used for these types of platforms",
    "start": "392789",
    "end": "398490"
  },
  {
    "text": "as part of an implementing an operating system or embedded system that increases your potential",
    "start": "398490",
    "end": "404310"
  },
  {
    "text": "market so the question is if we want to make code that is portable to these",
    "start": "404310",
    "end": "410760"
  },
  {
    "text": "sorts of environments what parts of C and C++ can we actually rely on and so",
    "start": "410760",
    "end": "418560"
  },
  {
    "start": "418000",
    "end": "418000"
  },
  {
    "text": "to that end to the C and C++ standards both define two different kinds of",
    "start": "418560",
    "end": "424230"
  },
  {
    "text": "language implementations there's what's called hosted implementations and what",
    "start": "424230",
    "end": "429600"
  },
  {
    "text": "are called free-standing implementations and the two languages explain the",
    "start": "429600",
    "end": "435120"
  },
  {
    "text": "purpose behind hosted and free-standing implementations a little bit differently the rationale for the C standard says by",
    "start": "435120",
    "end": "443640"
  },
  {
    "text": "defining both conforming hosted and conforming freestanding implementations",
    "start": "443640",
    "end": "449460"
  },
  {
    "text": "the standard recognizes the use of C to write such programs as operating systems",
    "start": "449460",
    "end": "455280"
  },
  {
    "text": "and ROM based applications those ROM based applications are one version of",
    "start": "455280",
    "end": "461420"
  },
  {
    "text": "the embedded systems I was talking about before as well as more conventional",
    "start": "461420",
    "end": "466980"
  },
  {
    "text": "hosted applications the C++ 17 standard",
    "start": "466980",
    "end": "472160"
  },
  {
    "text": "says it a little bit differently they talk about a free-standing implementation is one in which execution",
    "start": "472160",
    "end": "478440"
  },
  {
    "text": "may take place without the benefits of an operating system which it's",
    "start": "478440",
    "end": "483750"
  },
  {
    "text": "explaining it in a little bit different language but the limitations are very similar if you think about these things",
    "start": "483750",
    "end": "490230"
  },
  {
    "text": "because the c s-- version is talking about we want to be able to write an",
    "start": "490230",
    "end": "496320"
  },
  {
    "text": "operating system the c++ version is talking about well we don't know what",
    "start": "496320",
    "end": "502410"
  },
  {
    "text": "you're writing but you're writing it in a place where you don't have an operating system available and one of",
    "start": "502410",
    "end": "508140"
  },
  {
    "text": "the versions of that is writing an operating system in the first place so you wind up in a similar place so the",
    "start": "508140",
    "end": "517770"
  },
  {
    "text": "idea here is that hosted implementations are what we would use for writing conventional desktop and server",
    "start": "517770",
    "end": "524580"
  },
  {
    "text": "applications in C and C++ they're what we usually think about when",
    "start": "524580",
    "end": "529800"
  },
  {
    "text": "we think about the C and C++ languages and these implementations have to",
    "start": "529800",
    "end": "535260"
  },
  {
    "text": "provide all of the language and why very facilities that we might expect for",
    "start": "535260",
    "end": "540299"
  },
  {
    "text": "those languages but there are also",
    "start": "540299",
    "end": "545569"
  },
  {
    "text": "freestanding implementations and these freestanding implementations are what we",
    "start": "545569",
    "end": "551910"
  },
  {
    "text": "would use for writing operating systems and embedded systems and they're only required to provide certain limited",
    "start": "551910",
    "end": "558899"
  },
  {
    "text": "language and library facilities in a sense freestanding C and C++ are the",
    "start": "558899",
    "end": "564839"
  },
  {
    "text": "lowest common denominators for using C and C++ if you want to make your",
    "start": "564839",
    "end": "570209"
  },
  {
    "text": "programs portable to the maximum number of C and C++ implementations the",
    "start": "570209",
    "end": "577799"
  },
  {
    "text": "freestanding feature set is what you should be targeting so what does that feature set look like so the C 11",
    "start": "577799",
    "end": "586019"
  },
  {
    "start": "584000",
    "end": "584000"
  },
  {
    "text": "standard says a conforming freestanding implementation shall accept any strictly",
    "start": "586019",
    "end": "591569"
  },
  {
    "text": "conforming program a strictly conforming program is a program that uses only",
    "start": "591569",
    "end": "597600"
  },
  {
    "text": "features defined in the standard not extensions that might be specific to one",
    "start": "597600",
    "end": "603569"
  },
  {
    "text": "tool chain or another so an a strictly conforming program in which the use of",
    "start": "603569",
    "end": "611279"
  },
  {
    "text": "the features specified in the library is confined to the contents of the following standard headers and what I",
    "start": "611279",
    "end": "620730"
  },
  {
    "text": "want you to look at here is this list of headers a lot of these exist to provide",
    "start": "620730",
    "end": "627769"
  },
  {
    "text": "support for core language features so we have things in here like float dot H and",
    "start": "627769",
    "end": "633899"
  },
  {
    "text": "limits dot H which define range information for built-in types like",
    "start": "633899",
    "end": "639779"
  },
  {
    "text": "double or int or unsigned long for example you have a",
    "start": "639779",
    "end": "645269"
  },
  {
    "text": "number of these header files provide alias macros for certain C features so",
    "start": "645269",
    "end": "652009"
  },
  {
    "text": "unlike C++ C did not originally have a boolean type so when they went to add",
    "start": "652009",
    "end": "658499"
  },
  {
    "text": "boolean to the C language they didn't they knew that there were already",
    "start": "658499",
    "end": "663929"
  },
  {
    "text": "programs out there that had definition type deaths called bool lower case B oh",
    "start": "663929",
    "end": "671159"
  },
  {
    "text": "oh so what did they do they called the type underscore capital B boolean and then",
    "start": "671159",
    "end": "679500"
  },
  {
    "text": "they provided the header file standard bool which provides aliases for bull",
    "start": "679500",
    "end": "686760"
  },
  {
    "text": "true and false the way that we would typically write them in C++ so there are",
    "start": "686760",
    "end": "692160"
  },
  {
    "text": "several header files that do things like that we have ISO six four six which provides International keyboard support",
    "start": "692160",
    "end": "699150"
  },
  {
    "text": "depending on what region you live in some of the operators that we typically think of using in C and C++ programming",
    "start": "699150",
    "end": "707279"
  },
  {
    "text": "are difficult to write with those sorts of keyboards so this lets you spell up certain operators as with short text",
    "start": "707279",
    "end": "716010"
  },
  {
    "text": "strings like X or and then there are a few others like stood Arg which provides",
    "start": "716010",
    "end": "721830"
  },
  {
    "text": "support for writing functions that take a variable number of arguments like printf and standard def dot h which",
    "start": "721830",
    "end": "730410"
  },
  {
    "text": "provides a lot of common definitions that we're used to using in C and C++",
    "start": "730410",
    "end": "735450"
  },
  {
    "text": "programming types like size T and common constants like null so this is the sort",
    "start": "735450",
    "end": "742440"
  },
  {
    "text": "of stuff that is guaranteed to be there in freestanding C so most of it is core",
    "start": "742440",
    "end": "751260"
  },
  {
    "text": "language support there's not a lot of what we typically think of as the library of C available here so for",
    "start": "751260",
    "end": "758850"
  },
  {
    "text": "example we don't have stood i/o dot H we don't have stood with H and we don't",
    "start": "758850",
    "end": "764250"
  },
  {
    "text": "have string dot H so at least I should say those those headers aren't",
    "start": "764250",
    "end": "770450"
  },
  {
    "text": "guaranteed to be there a free-standing implementation is allowed to provide more of the library then it's required",
    "start": "770450",
    "end": "778410"
  },
  {
    "text": "to but in terms of what you can actually count on being there it's just those",
    "start": "778410",
    "end": "784740"
  },
  {
    "text": "headers I just showed you so you might not have access to the standard input and output functions like F get C or",
    "start": "784740",
    "end": "791400"
  },
  {
    "text": "printf you might not be able to do memory management with malloc and free you might not even have certain fairly",
    "start": "791400",
    "end": "798600"
  },
  {
    "text": "basic functions like memory when which you know I think everyone in the room",
    "start": "798600",
    "end": "804660"
  },
  {
    "text": "could probably write Durrell and in a matter of minutes and yet it's not actually required to be",
    "start": "804660",
    "end": "811380"
  },
  {
    "text": "something that the standard library provides in a free-standing implementation in fact none of the none",
    "start": "811380",
    "end": "818220"
  },
  {
    "text": "of these headers actually define any real functions some of them declare things that look a lot like functions",
    "start": "818220",
    "end": "825900"
  },
  {
    "text": "but they're actually function like macros you'd find some of those instead of line H for example or sorry start dot",
    "start": "825900",
    "end": "833070"
  },
  {
    "text": "H was what I meant to say but there are no actual functions in these headers the",
    "start": "833070",
    "end": "840540"
  },
  {
    "text": "C++ standard requires a little bit more it requires most not quite all of the",
    "start": "840540",
    "end": "846210"
  },
  {
    "text": "same headers that C requires and it also requires a few more C++ specific headers",
    "start": "846210",
    "end": "854130"
  },
  {
    "text": "so atomic for supporting atomic types there is a version of C stood Lib that's",
    "start": "854130",
    "end": "862110"
  },
  {
    "text": "required in C++ interestingly this is a C header file that wasn't required in",
    "start": "862110",
    "end": "868830"
  },
  {
    "text": "freestanding C but free standing C++ requires it but it only has to provide",
    "start": "868830",
    "end": "875220"
  },
  {
    "text": "these three functions abort add exit and exit so it just needs to provide these",
    "start": "875220",
    "end": "883550"
  },
  {
    "text": "functions that assist with program termination and shutdown X the exception",
    "start": "883550",
    "end": "890580"
  },
  {
    "text": "header for providing the standard exception types as well as some exception helper functions like get",
    "start": "890580",
    "end": "897180"
  },
  {
    "text": "current exception and terminate initializer list for allowing you to write code that uses and the initializer",
    "start": "897180",
    "end": "904320"
  },
  {
    "text": "lists feature limits which is the C++ version of limits age and float dot H in",
    "start": "904320",
    "end": "912900"
  },
  {
    "text": "C new for the various forms of new and delete type traits for performing type",
    "start": "912900",
    "end": "919950"
  },
  {
    "text": "based metaprogramming and type info for doing runtime type identification using",
    "start": "919950",
    "end": "925290"
  },
  {
    "text": "dynamic cast and type ID so and again a",
    "start": "925290",
    "end": "931380"
  },
  {
    "text": "lot of these headers exist to support core language features you might",
    "start": "931380",
    "end": "937740"
  },
  {
    "text": "actually have access to more features than that but they're not guaranteed and in fact even if you have",
    "start": "937740",
    "end": "944640"
  },
  {
    "text": "a particular header file you're not guaranteed to have the full contents of",
    "start": "944640",
    "end": "950160"
  },
  {
    "text": "that header file that you might normally expect be as shown by the example of C",
    "start": "950160",
    "end": "955380"
  },
  {
    "text": "stud lib you're the freestanding version of that header file might only provide",
    "start": "955380",
    "end": "960779"
  },
  {
    "text": "these three functions in addition there are a few other restrictions that",
    "start": "960779",
    "end": "967670"
  },
  {
    "text": "free-standing implementations might impose the the biggest and most obvious",
    "start": "967670",
    "end": "974339"
  },
  {
    "text": "one is the library limitations but there are also a few others so multi-threading",
    "start": "974339",
    "end": "980940"
  },
  {
    "text": "might not be available both C and C++ are now thread aware but they both have",
    "start": "980940",
    "end": "988140"
  },
  {
    "text": "this text in the standards that says under a free-standing implementation it",
    "start": "988140",
    "end": "993750"
  },
  {
    "text": "is implementation defined whether a program can have more than one thread of",
    "start": "993750",
    "end": "998760"
  },
  {
    "text": "execution so it might be available it might not it's up to your specific",
    "start": "998760",
    "end": "1004790"
  },
  {
    "text": "tool chain vendor whether they want to provide multi-threading support within a",
    "start": "1004790",
    "end": "1010220"
  },
  {
    "text": "free-standing implementation programs startup and termination might look a",
    "start": "1010220",
    "end": "1016100"
  },
  {
    "text": "little different most of us are used to writing C and C++ programs where when",
    "start": "1016100",
    "end": "1023899"
  },
  {
    "text": "the entry point of the entire program is a function called main and the program",
    "start": "1023899",
    "end": "1030230"
  },
  {
    "text": "runs as long as you're somewhere within the body of main and as soon as you",
    "start": "1030230",
    "end": "1036230"
  },
  {
    "text": "return from main the program shuts down but that's not necessarily the case in a",
    "start": "1036230",
    "end": "1041750"
  },
  {
    "text": "free-standing environment the function that it that's the entry point for your program is allowed to be called",
    "start": "1041750",
    "end": "1048230"
  },
  {
    "text": "something different in a free-standing implementation now that's subject to",
    "start": "1048230",
    "end": "1054590"
  },
  {
    "text": "certain limitations in C in C++ for example constructors for global objects",
    "start": "1054590",
    "end": "1060770"
  },
  {
    "text": "still need to be run at startup and the destructors still need to run at shutdown this is similar to those",
    "start": "1060770",
    "end": "1067910"
  },
  {
    "text": "functions abort at exit and exit those things still have to have a behavior that's consistent with how the",
    "start": "1067910",
    "end": "1074549"
  },
  {
    "text": "standard describes them but the scaffolding around that might be a",
    "start": "1074549",
    "end": "1079889"
  },
  {
    "text": "little bit different in a free-standing implementation now other than that",
    "start": "1079889",
    "end": "1086609"
  },
  {
    "start": "1085000",
    "end": "1085000"
  },
  {
    "text": "though most of the language features the core language features that make up C",
    "start": "1086609",
    "end": "1092849"
  },
  {
    "text": "and C++ are available in freestanding implementations and this includes some",
    "start": "1092849",
    "end": "1098849"
  },
  {
    "text": "features that some people might find surprising so floating-point arithmetic is required the types double float and",
    "start": "1098849",
    "end": "1108450"
  },
  {
    "text": "long double are all built into the language so if you are operating on a",
    "start": "1108450",
    "end": "1115320"
  },
  {
    "text": "pro on a platform that doesn't have floating-point hardware your implementation has to provide some sort",
    "start": "1115320",
    "end": "1122249"
  },
  {
    "text": "of floating-point emulation capability in software to allow you to use these types you have to have a dynamic memory",
    "start": "1122249",
    "end": "1129840"
  },
  {
    "text": "pool in C++ new and delete are considered to be core language features",
    "start": "1129840",
    "end": "1135419"
  },
  {
    "text": "in C++ this is as opposed to freestanding C where Malik was one of",
    "start": "1135419",
    "end": "1142320"
  },
  {
    "text": "the things that wasn't necessarily guaranteed in C++ knew and delete are",
    "start": "1142320",
    "end": "1147419"
  },
  {
    "text": "considered to be important enough that you have to provide them in a",
    "start": "1147419",
    "end": "1152789"
  },
  {
    "text": "free-standing implementation exception handling you need to be able to throw and catch exceptions even in a",
    "start": "1152789",
    "end": "1159539"
  },
  {
    "text": "free-standing environment and you need to be able to perform runtime type identification using dynamic cast and",
    "start": "1159539",
    "end": "1166529"
  },
  {
    "text": "type ID all of these things are things that the standard guarantees will be available in a free-standing",
    "start": "1166529",
    "end": "1173359"
  },
  {
    "text": "implementation of C++ now a lot of operating systems and embedded systems",
    "start": "1173359",
    "end": "1179489"
  },
  {
    "text": "prefer to avoid a lot of the features that I was just talking about exception",
    "start": "1179489",
    "end": "1185489"
  },
  {
    "text": "handling in runtime type identification in particular can introduce a fair",
    "start": "1185489",
    "end": "1190859"
  },
  {
    "text": "degree of overhead into the program even if you don't actually use those features",
    "start": "1190859",
    "end": "1195929"
  },
  {
    "text": "very much so this is a case where freestanding C++ provides more features",
    "start": "1195929",
    "end": "1202679"
  },
  {
    "text": "than a lot of people who use freestanding C++ action we want in fact it's not uncommon for",
    "start": "1202679",
    "end": "1210010"
  },
  {
    "text": "people to use flags like GCC's f no exceptions to turn off some of those",
    "start": "1210010",
    "end": "1215620"
  },
  {
    "text": "behaviors to disable exception handling on their platform or disable our TTI but",
    "start": "1215620",
    "end": "1222789"
  },
  {
    "text": "it's worth noting that if you're using those flags at that point you've put",
    "start": "1222789",
    "end": "1229659"
  },
  {
    "text": "your compiler into a mode where it's technically no longer compliant with the standard you're not really programming",
    "start": "1229659",
    "end": "1237789"
  },
  {
    "text": "in C or C++ anymore at that point you're programming in something that looks a lot like C++ but isn't technically C++",
    "start": "1237789",
    "end": "1246880"
  },
  {
    "text": "according to the standard so not to say that a lot of people don't do that just",
    "start": "1246880",
    "end": "1254200"
  },
  {
    "text": "that you're it's in sort of a strange gray area with respect to the standard",
    "start": "1254200",
    "end": "1260429"
  },
  {
    "text": "now at the same time there are certain parts of certain language features for",
    "start": "1260429",
    "end": "1266350"
  },
  {
    "text": "which the library support isn't actually guaranteed to be there so standard move",
    "start": "1266350",
    "end": "1271419"
  },
  {
    "text": "and standard forward are defined in the header file utility now these are in an",
    "start": "1271419",
    "end": "1276429"
  },
  {
    "text": "important part of implementing move semantics and r-value references if you",
    "start": "1276429",
    "end": "1281799"
  },
  {
    "text": "want to be able to move an object rather than copying it you would typically call",
    "start": "1281799",
    "end": "1287470"
  },
  {
    "text": "stead move but utility isn't one of the required headers in freestanding C++ so",
    "start": "1287470",
    "end": "1296010"
  },
  {
    "text": "it's one that's commonly provided on a lot of platforms but it's not strictly",
    "start": "1296010",
    "end": "1301450"
  },
  {
    "text": "required you can't be sure that it will be there so if you want to write C and",
    "start": "1301450",
    "end": "1309399"
  },
  {
    "start": "1306000",
    "end": "1306000"
  },
  {
    "text": "C++ code that's going to be portable to the maximum number of systems you want",
    "start": "1309399",
    "end": "1315460"
  },
  {
    "text": "to be aware of both the what library facilities are guaranteed to be",
    "start": "1315460",
    "end": "1321010"
  },
  {
    "text": "available on various platforms which is not very much as you've seen most of the",
    "start": "1321010",
    "end": "1326830"
  },
  {
    "text": "library support that is guaranteed to be there is really the stuff required to support core language features and some",
    "start": "1326830",
    "end": "1335440"
  },
  {
    "text": "of those core language features are things that you might want to steer way from because a lot of freestanding",
    "start": "1335440",
    "end": "1343400"
  },
  {
    "text": "users prefer not to use exception handling or runtime type identification",
    "start": "1343400",
    "end": "1349730"
  },
  {
    "text": "or some of the other features that I mentioned so you want to know how to",
    "start": "1349730",
    "end": "1354860"
  },
  {
    "text": "restrict yourself to both the library facilities that are actually 'print heed",
    "start": "1354860",
    "end": "1360020"
  },
  {
    "text": "to be there and the core language features that your users are going to",
    "start": "1360020",
    "end": "1365090"
  },
  {
    "text": "find palatable now as I mentioned many",
    "start": "1365090",
    "end": "1370790"
  },
  {
    "text": "of the compilers actually provide more of the standard library than",
    "start": "1370790",
    "end": "1375830"
  },
  {
    "text": "freestanding actually requires even in a free-standing implementation and",
    "start": "1375830",
    "end": "1381560"
  },
  {
    "text": "unfortunately there aren't a lot of tools that help you do checking to make",
    "start": "1381560",
    "end": "1387320"
  },
  {
    "text": "sure that you're only using the parts of the standard library that are actually guaranteed to be there in freestanding",
    "start": "1387320",
    "end": "1394720"
  },
  {
    "text": "implementations so it's kind of easy to accidentally stray outside of that box",
    "start": "1394720",
    "end": "1402200"
  },
  {
    "text": "of the things that are guaranteed to be available in a free-standing environment and so you have to sort of know what",
    "start": "1402200",
    "end": "1409490"
  },
  {
    "text": "that list of things is and be ready to police yourself in terms of making sure",
    "start": "1409490",
    "end": "1415130"
  },
  {
    "text": "that you don't accidentally use features of C and C++ that aren't guaranteed to",
    "start": "1415130",
    "end": "1421910"
  },
  {
    "text": "be available in a free-standing implementation and inadvertently make your code less portable than you'd",
    "start": "1421910",
    "end": "1428870"
  },
  {
    "text": "intended it to be so we'll talk a little",
    "start": "1428870",
    "end": "1434000"
  },
  {
    "text": "bit more down the road about some techniques that you can use to protect",
    "start": "1434000",
    "end": "1440690"
  },
  {
    "text": "yourself against that so but another thing I want to mention is so there are",
    "start": "1440690",
    "end": "1446930"
  },
  {
    "start": "1442000",
    "end": "1442000"
  },
  {
    "text": "several compilers that provide a dash F free-standing flag or some variation of",
    "start": "1446930",
    "end": "1452810"
  },
  {
    "text": "that kind of flag this is present on JCCC for example now GCC in general",
    "start": "1452810",
    "end": "1460220"
  },
  {
    "text": "provides a full hosted implementation of C++ so what the if you are going to",
    "start": "1460220",
    "end": "1468470"
  },
  {
    "text": "provide a hosted implementation of C++ anyway if you're gonna provide",
    "start": "1468470",
    "end": "1474110"
  },
  {
    "text": "all those features what does that flag actually do you know what's the point of",
    "start": "1474110",
    "end": "1479840"
  },
  {
    "text": "putting it into freestanding mode it turns out that modern compilers often",
    "start": "1479840",
    "end": "1487190"
  },
  {
    "text": "have a certain amount of built-in knowledge about what the standard library does they don't just take the",
    "start": "1487190",
    "end": "1495830"
  },
  {
    "text": "standard library as this nebulous unknown thing they actually have a",
    "start": "1495830",
    "end": "1500870"
  },
  {
    "text": "certain amount of knowledge about what the standard library is and they can use",
    "start": "1500870",
    "end": "1505910"
  },
  {
    "text": "that knowledge to generate more optimized code in certain situations so",
    "start": "1505910",
    "end": "1511160"
  },
  {
    "text": "here if I write this code where I create a size TN and initialize it with the",
    "start": "1511160",
    "end": "1518030"
  },
  {
    "text": "value of sterlin of a fixed size string hello here if I run this through GCC the",
    "start": "1518030",
    "end": "1526960"
  },
  {
    "text": "compiler doesn't actually generate a call to sterlin it doesn't need to",
    "start": "1526960",
    "end": "1532730"
  },
  {
    "text": "because GCC has the built-in knowledge of what sterlin does and it can see that",
    "start": "1532730",
    "end": "1539600"
  },
  {
    "text": "that string is of a fixed length and so it just compiles the code as if what I",
    "start": "1539600",
    "end": "1546080"
  },
  {
    "text": "had written was size TN equals 5 it never generates a call to the library",
    "start": "1546080",
    "end": "1552830"
  },
  {
    "text": "function now it can only do that in certain cases if I'm working in a",
    "start": "1552830",
    "end": "1559490"
  },
  {
    "text": "situation where the length of a string is unknown where I get the string that I'm going to take the sterlin of as a",
    "start": "1559490",
    "end": "1566270"
  },
  {
    "text": "parameter to a function for example in this case GCC will generate a call to",
    "start": "1566270",
    "end": "1572150"
  },
  {
    "text": "sterlin because it can't see what the length of the string is going to be in",
    "start": "1572150",
    "end": "1577190"
  },
  {
    "text": "all cases there so there it has to fall back to the library function so it turns",
    "start": "1577190",
    "end": "1583700"
  },
  {
    "text": "out that the dash F free-standing flag what it does is turn a lot of this",
    "start": "1583700",
    "end": "1590419"
  },
  {
    "text": "built-in knowledge that the compiler has off so the description of the flag in",
    "start": "1590419",
    "end": "1597200"
  },
  {
    "text": "GCC says that GCC does not make assumptions about the meanings of function names from the",
    "start": "1597200",
    "end": "1604100"
  },
  {
    "text": "standard library with exceptions noted below and in this case there no turtle on the next",
    "start": "1604100",
    "end": "1609120"
  },
  {
    "text": "slide so I'll get to those but what's",
    "start": "1609120",
    "end": "1614640"
  },
  {
    "text": "why is this important well suppose that I'm working with a version of the",
    "start": "1614640",
    "end": "1620429"
  },
  {
    "text": "standard library that doesn't actually provide a sterlin but I could but I'm",
    "start": "1620429",
    "end": "1628049"
  },
  {
    "text": "working with GCC if this built-in knowledge is turned on then I could have",
    "start": "1628049",
    "end": "1634830"
  },
  {
    "text": "calls to Sterling in some places like this that actually appear to work",
    "start": "1634830",
    "end": "1641270"
  },
  {
    "text": "because GCC never generated a call to the function it just figured out what it",
    "start": "1641270",
    "end": "1648120"
  },
  {
    "text": "was supposed to do at compile time and then in other places it would actually",
    "start": "1648120",
    "end": "1654150"
  },
  {
    "text": "try and generate a call to the function and in those places my compilation would",
    "start": "1654150",
    "end": "1659400"
  },
  {
    "text": "fail and I'd get some error message that says sterlin doesn't exist and it's a",
    "start": "1659400",
    "end": "1666030"
  },
  {
    "text": "but wait a minute that guy over there called sterlin just fine what the heck",
    "start": "1666030",
    "end": "1671250"
  },
  {
    "text": "happened and it can be a very confusing situation for people so by turning off",
    "start": "1671250",
    "end": "1678870"
  },
  {
    "text": "this built-in knowledge you can make sure that all of your calls to sterlin",
    "start": "1678870",
    "end": "1684480"
  },
  {
    "text": "will fail you won't accidentally step outside the boundaries of what you're",
    "start": "1684480",
    "end": "1690210"
  },
  {
    "text": "aware your library provides and it makes",
    "start": "1690210",
    "end": "1695309"
  },
  {
    "text": "it makes it a little bit easier to avoid going to a place you didn't want to go",
    "start": "1695309",
    "end": "1701570"
  },
  {
    "text": "the exceptions I mentioned just a moment ago that GCC requires are the functions",
    "start": "1701570",
    "end": "1707910"
  },
  {
    "text": "mem copy mem move memset and mem compare these functions are assumed to be there",
    "start": "1707910",
    "end": "1717510"
  },
  {
    "text": "in GCC even in freestanding mode none of them are actually required of",
    "start": "1717510",
    "end": "1723919"
  },
  {
    "text": "freestanding C according to the standard but GCC itself requires them the",
    "start": "1723919",
    "end": "1729809"
  },
  {
    "text": "knowledge about how these functions work and what they do is embedded to a",
    "start": "1729809",
    "end": "1735330"
  },
  {
    "text": "certain degree in the compiler and so the compiler itself expects to",
    "start": "1735330",
    "end": "1740440"
  },
  {
    "text": "code that will depend on these functions so in a rare case you may need to write",
    "start": "1740440",
    "end": "1746110"
  },
  {
    "text": "these functions yourself even though freestanding C says they might not be",
    "start": "1746110",
    "end": "1752200"
  },
  {
    "text": "available most platforms you'll they will provide implementations of these functions but in a rare situation you",
    "start": "1752200",
    "end": "1761080"
  },
  {
    "text": "might have to provide them to make GCC work over time the - F freestanding flag",
    "start": "1761080",
    "end": "1769690"
  },
  {
    "start": "1766000",
    "end": "1766000"
  },
  {
    "text": "has also found another use which is I'm not necessarily really tart were",
    "start": "1769690",
    "end": "1775570"
  },
  {
    "text": "targeting freestanding environments when I write my code but what I want to do is",
    "start": "1775570",
    "end": "1781360"
  },
  {
    "text": "I want to substitute a different implementation of the standard library",
    "start": "1781360",
    "end": "1786510"
  },
  {
    "text": "for the one that my compiler would normally provide so I I don't want fewer",
    "start": "1786510",
    "end": "1796720"
  },
  {
    "text": "standard library capabilities but I want the standard library capabilities that I get to be compiled using somewhat",
    "start": "1796720",
    "end": "1804850"
  },
  {
    "text": "different algorithms and maybe have different performance characteristics now if the compiler is making",
    "start": "1804850",
    "end": "1812950"
  },
  {
    "text": "assumptions about what standard library functions do there's a risk a small risk",
    "start": "1812950",
    "end": "1820510"
  },
  {
    "text": "but a risk that those assumptions wouldn't hold true for whatever standard",
    "start": "1820510",
    "end": "1828730"
  },
  {
    "text": "library distribution I'm substituting in place of the one that I'm you that would",
    "start": "1828730",
    "end": "1834400"
  },
  {
    "text": "come with my compiler so using the - F free-standing flag has become a way in",
    "start": "1834400",
    "end": "1841450"
  },
  {
    "text": "some projects to to help substitute",
    "start": "1841450",
    "end": "1846480"
  },
  {
    "text": "another version of the standard library in place of the one that you would",
    "start": "1846480",
    "end": "1851560"
  },
  {
    "text": "normally have with your compiler now this is a little complicated because the",
    "start": "1851560",
    "end": "1858070"
  },
  {
    "text": "dividing line between the core language and the standard library is kind of",
    "start": "1858070",
    "end": "1864400"
  },
  {
    "text": "blurry we've already talked about there are parts of the standard library that",
    "start": "1864400",
    "end": "1869440"
  },
  {
    "text": "exists to provide language support to provide library support for language features but there are also",
    "start": "1869440",
    "end": "1876700"
  },
  {
    "text": "parts of the libraries that really expect a certain amount of support from the compiler itself so earlier I",
    "start": "1876700",
    "end": "1884140"
  },
  {
    "text": "mentioned the type traits header that's used to perform type based meta programming this is one of the header",
    "start": "1884140",
    "end": "1890770"
  },
  {
    "text": "files that actually is required in freestanding C++ and one of the things",
    "start": "1890770",
    "end": "1896080"
  },
  {
    "text": "that you can do using the contents of this header file is you can ask questions about types at compile time so",
    "start": "1896080",
    "end": "1904960"
  },
  {
    "text": "I can write a type trait like is integral and feed it a type T and the",
    "start": "1904960",
    "end": "1911920"
  },
  {
    "text": "member colon colon value of is integral T will be true if T is some integral",
    "start": "1911920",
    "end": "1919810"
  },
  {
    "text": "type like int and false if it's a floating point type like double or some",
    "start": "1919810",
    "end": "1926020"
  },
  {
    "text": "non integral non numeric type entirely like you know a widget or something like",
    "start": "1926020",
    "end": "1931720"
  },
  {
    "text": "that I can ask the question is abstract and in that case is abstract of T : :",
    "start": "1931720",
    "end": "1939070"
  },
  {
    "text": "value is true if the class type that I give it in there is an abstract base",
    "start": "1939070",
    "end": "1947050"
  },
  {
    "text": "class I can ask is volatile T : : value",
    "start": "1947050",
    "end": "1952090"
  },
  {
    "text": "and that will be true if T is a type that includes a volatile qualifier so",
    "start": "1952090",
    "end": "1959130"
  },
  {
    "text": "some of these type traits can be implemented in standard C++ is volatile",
    "start": "1960600",
    "end": "1966820"
  },
  {
    "text": "is the kind of thing that you could write using standard template deduction rules but without any actual compiler",
    "start": "1966820",
    "end": "1977140"
  },
  {
    "text": "support to make it work but some of them like is abstract really require a",
    "start": "1977140",
    "end": "1982990"
  },
  {
    "text": "certain amount of assistance from the compiler to actually be able to answer the question of whether or not something",
    "start": "1982990",
    "end": "1989350"
  },
  {
    "text": "is an abstract base class type it's very difficult using standard C++ to",
    "start": "1989350",
    "end": "1995290"
  },
  {
    "text": "ascertain whether something is is an abstract base class while still being",
    "start": "1995290",
    "end": "2001620"
  },
  {
    "text": "able to actually compile your program so so this these sorts of interactions",
    "start": "2001620",
    "end": "2012210"
  },
  {
    "text": "can make it a little bit tricky to substitute one standard library distribution in place of another so it's",
    "start": "2012210",
    "end": "2019680"
  },
  {
    "text": "something that it's worth being aware being aware of if that's something that you intend to do so you so he",
    "start": "2019680",
    "end": "2030930"
  },
  {
    "start": "2027000",
    "end": "2027000"
  },
  {
    "text": "free-standing C and C++ is essentially the baseline that you can target if you",
    "start": "2030930",
    "end": "2038640"
  },
  {
    "text": "want to make your C and C++ programs as portable as possible if you want to be",
    "start": "2038640",
    "end": "2044070"
  },
  {
    "text": "able to use them on the maximum number of tool chains and target the maximum",
    "start": "2044070",
    "end": "2049560"
  },
  {
    "text": "number of systems free-standing C and C++ is the way to go and but using them",
    "start": "2049560",
    "end": "2056280"
  },
  {
    "text": "can be kind of difficult because you don't get very much of the standard library you have to make sure that you",
    "start": "2056280",
    "end": "2063149"
  },
  {
    "text": "restrict yourself to only using those parts of the standard library because if",
    "start": "2063150",
    "end": "2068460"
  },
  {
    "text": "you stray outside of them accidentally you could make your code less portable",
    "start": "2068460",
    "end": "2075290"
  },
  {
    "text": "and you also want to stick to own using only certain core language features",
    "start": "2075290",
    "end": "2081500"
  },
  {
    "text": "because free-standing environments often take a dim view of some features like in",
    "start": "2081500",
    "end": "2088260"
  },
  {
    "text": "the like exception handling and runtime type identification now there is work",
    "start": "2088260",
    "end": "2093690"
  },
  {
    "text": "being done on the Standards Committee to try and make this stuff a little bit easier to use by making some of those",
    "start": "2093690",
    "end": "2100920"
  },
  {
    "text": "core language features optional and increasing the guaranteed portions of",
    "start": "2100920",
    "end": "2106530"
  },
  {
    "text": "the standard library so there's a paper leaving no room for a lower-level",
    "start": "2106530",
    "end": "2112830"
  },
  {
    "text": "language by myself and another person named Ben Craig which proposes to make",
    "start": "2112830",
    "end": "2120840"
  },
  {
    "text": "certain language and library features optional in free-standing implementations of C++ so the default",
    "start": "2120840",
    "end": "2128630"
  },
  {
    "text": "implementations of new and delete exception handling abort at exit and",
    "start": "2128630",
    "end": "2133890"
  },
  {
    "text": "exit floating-point arithmetic multi-threading and a lock based atomic",
    "start": "2133890",
    "end": "2139350"
  },
  {
    "text": "runtime type identification and thread-safe static initialization this",
    "start": "2139350",
    "end": "2144720"
  },
  {
    "text": "is this last one is when you create local static objects in modern C++",
    "start": "2144720",
    "end": "2151440"
  },
  {
    "text": "there's guaranteed to be a certain amount of thread synchronization built-in to ensure that they're not",
    "start": "2151440",
    "end": "2156950"
  },
  {
    "text": "inadvertently initialized more than once so this this list of features should",
    "start": "2156950",
    "end": "2163260"
  },
  {
    "text": "look familiar some of them are the features that we talked about before as being things that many freestanding",
    "start": "2163260",
    "end": "2169650"
  },
  {
    "text": "users tend to avoid now multi-threading is commonly used in embedded systems and",
    "start": "2169650",
    "end": "2176450"
  },
  {
    "text": "other and operating systems but the",
    "start": "2176450",
    "end": "2181470"
  },
  {
    "text": "standard library version usually isn't what you want to use in those situations",
    "start": "2181470",
    "end": "2188580"
  },
  {
    "text": "the standard library version of multi-threading really expects support",
    "start": "2188580",
    "end": "2193890"
  },
  {
    "text": "from an operating system so obviously if you're trying to implement an operating system that's not really going to help",
    "start": "2193890",
    "end": "2200850"
  },
  {
    "text": "you out very much there are now there",
    "start": "2200850",
    "end": "2205860"
  },
  {
    "text": "are plenty of standard yes yes so in standard in C++ you are",
    "start": "2205860",
    "end": "2217980"
  },
  {
    "text": "allowed to and this is true of freestanding and hosted implementations",
    "start": "2217980",
    "end": "2223080"
  },
  {
    "text": "of C++ you are allowed to provide to replace the standard definitions the the",
    "start": "2223080",
    "end": "2231180"
  },
  {
    "text": "default implementations of new and delete that come from your compiler and",
    "start": "2231180",
    "end": "2236270"
  },
  {
    "text": "you can replace them in various ways there's a whole I could talk for quite a while about that but but yeah you so",
    "start": "2236270",
    "end": "2245100"
  },
  {
    "text": "under this paper you would still be allowed to provide your own implementations of new and delete but",
    "start": "2245100",
    "end": "2252660"
  },
  {
    "text": "the default implementations that assume the existence of a standard dynamic",
    "start": "2252660",
    "end": "2258990"
  },
  {
    "text": "memory pool would not be guaranteed to be there you'd get if you tried to use",
    "start": "2258990",
    "end": "2266220"
  },
  {
    "text": "them and you didn't provide any implementation then you'd expect to get",
    "start": "2266220",
    "end": "2271440"
  },
  {
    "text": "something like a link error so now there are many parts of the",
    "start": "2271440",
    "end": "2279090"
  },
  {
    "text": "standard library that don't use any of these features so lots of the STL",
    "start": "2279090",
    "end": "2285960"
  },
  {
    "text": "algorithms don't use them but the STL containers obviously use dynamic memory",
    "start": "2285960",
    "end": "2291780"
  },
  {
    "text": "all over the place although even there things like array array is this is an",
    "start": "2291780",
    "end": "2297300"
  },
  {
    "text": "STL container it doesn't use dynamic memory so there are there are a number",
    "start": "2297300",
    "end": "2304859"
  },
  {
    "text": "of different parts of the standard library that could probably be made available to freestanding applications",
    "start": "2304859",
    "end": "2312890"
  },
  {
    "text": "even if all of those features are optional in some cases there are",
    "start": "2312890",
    "end": "2321150"
  },
  {
    "text": "facilities like stood array which stood",
    "start": "2321150",
    "end": "2326369"
  },
  {
    "text": "array does have one member function that can throw an exception the add member function but it's perfectly usable",
    "start": "2326369",
    "end": "2332910"
  },
  {
    "text": "without ever calling the @ member function there's also the operator",
    "start": "2332910",
    "end": "2337920"
  },
  {
    "text": "square bracket function which doesn't do the bounds checking that would cause an exception to be thrown with the @",
    "start": "2337920",
    "end": "2344369"
  },
  {
    "text": "function so Ben Craig has some other papers that are making their way through",
    "start": "2344369",
    "end": "2349560"
  },
  {
    "text": "the Standards Committee that are aiming to guarantee more of the standard library is available to freestanding",
    "start": "2349560",
    "end": "2355830"
  },
  {
    "text": "applications which in some cases like stood array would mean that the types",
    "start": "2355830",
    "end": "2362099"
  },
  {
    "text": "that were that you would get would not necessarily provide the full interface that you would expect from a hosted",
    "start": "2362099",
    "end": "2369810"
  },
  {
    "text": "implementation only certain member functions might be available depending on your implementation and that's",
    "start": "2369810",
    "end": "2377670"
  },
  {
    "text": "something that often strikes people as a little bit weird but there is some precedence for it we've seen in C stud",
    "start": "2377670",
    "end": "2385320"
  },
  {
    "text": "web that the the free-standing implementation might provide only some",
    "start": "2385320",
    "end": "2391380"
  },
  {
    "text": "parts of that header file and so the same thing could be done with standard",
    "start": "2391380",
    "end": "2397410"
  },
  {
    "text": "library types now so if these papers are",
    "start": "2397410",
    "end": "2403200"
  },
  {
    "text": "adopted it could make the process of writing reading applications significantly",
    "start": "2403200",
    "end": "2408329"
  },
  {
    "text": "easier but there are some unresolved questions that we need to deal with so",
    "start": "2408329",
    "end": "2413839"
  },
  {
    "text": "one of the the questions we get frequently is as part of if you",
    "start": "2413839",
    "end": "2420269"
  },
  {
    "text": "guarantee that more of the standard library is going to be available does that complicate the process of",
    "start": "2420269",
    "end": "2427130"
  },
  {
    "text": "substituting a different standard library implementation for the one that",
    "start": "2427130",
    "end": "2432869"
  },
  {
    "text": "that I would normally get from my compiler this is something that a fair number of people do and it's a real",
    "start": "2432869",
    "end": "2439769"
  },
  {
    "text": "concern for them if they might be forced to use the standard library that's packaged with their compiler it's not",
    "start": "2439769",
    "end": "2446670"
  },
  {
    "text": "clear to me that it needs to be a problem it just I think that you could",
    "start": "2446670",
    "end": "2453299"
  },
  {
    "text": "be you could write this in such a way that all it means is whatever standard library distribution you substitute in",
    "start": "2453299",
    "end": "2460410"
  },
  {
    "text": "place of the one that you would get from your compiler has to provide all of these freestanding facilities but many",
    "start": "2460410",
    "end": "2468150"
  },
  {
    "text": "of the many of these implementations already provide those facilities so I don't think that we're increasing the",
    "start": "2468150",
    "end": "2475259"
  },
  {
    "text": "effort required all that much but it is something of a concern there's also the",
    "start": "2475259",
    "end": "2482130"
  },
  {
    "text": "question of C++ 20 will introduce modules as a language feature now there",
    "start": "2482130",
    "end": "2490799"
  },
  {
    "text": "is not the standard library itself hasn't really been reorganized into",
    "start": "2490799",
    "end": "2497640"
  },
  {
    "text": "modules there will be a small you will be able to treat the standard library",
    "start": "2497640",
    "end": "2503880"
  },
  {
    "text": "headers as if they were modules in C++ 20 according to the current working",
    "start": "2503880",
    "end": "2509430"
  },
  {
    "text": "draft but there's it's not actually reorganizing those header files into",
    "start": "2509430",
    "end": "2516680"
  },
  {
    "text": "modules the way that you might expect but there is interest in doing that at some point in making some sort of",
    "start": "2516680",
    "end": "2525779"
  },
  {
    "text": "restructuring of the standard library and that could be a significant",
    "start": "2525779",
    "end": "2531599"
  },
  {
    "text": "complicating factor in terms of how these how freestanding applications use",
    "start": "2531599",
    "end": "2538890"
  },
  {
    "text": "the standard library be because if you get a module and parts of it are guaranteed to be there in",
    "start": "2538890",
    "end": "2545700"
  },
  {
    "text": "freestanding and parts or not that could be a very strange world that we occupy",
    "start": "2545700",
    "end": "2552770"
  },
  {
    "text": "so that's another outstanding question at this point in the meantime what sorts",
    "start": "2552770",
    "end": "2562560"
  },
  {
    "text": "of things can you do to make it easier for your for yourselves to write",
    "start": "2562560",
    "end": "2568050"
  },
  {
    "text": "free-standing code it depends a little bit on what sort of application you're",
    "start": "2568050",
    "end": "2574260"
  },
  {
    "text": "working on so if you're an application developer if you're writing an embedded",
    "start": "2574260",
    "end": "2580290"
  },
  {
    "start": "2575000",
    "end": "2575000"
  },
  {
    "text": "system or an operating system you often have a certain amount of knowledge about",
    "start": "2580290",
    "end": "2586250"
  },
  {
    "text": "where your code is likely to be deployed it was particularly true for embedded developers not always but in many cases",
    "start": "2586250",
    "end": "2596090"
  },
  {
    "text": "you'll have some idea of what sort of platforms you intend to target and that",
    "start": "2596090",
    "end": "2602730"
  },
  {
    "text": "knowledge can help inform your choice of which language features you want to use",
    "start": "2602730",
    "end": "2609060"
  },
  {
    "text": "in your application so if you have access to floating-point hardware then",
    "start": "2609060",
    "end": "2615750"
  },
  {
    "text": "the cost of using floating-point types in your code goes down substantially",
    "start": "2615750",
    "end": "2622320"
  },
  {
    "text": "because it you the first double that you use doesn't introduce a bunch of",
    "start": "2622320",
    "end": "2627960"
  },
  {
    "text": "additional library code for emulating floating-point operations it's taken",
    "start": "2627960",
    "end": "2633030"
  },
  {
    "text": "care of in the hardware so at that point you might not be concerned about using",
    "start": "2633030",
    "end": "2638119"
  },
  {
    "text": "floating point values the way that I was talking about earlier and you can make these sorts of intelligent decisions",
    "start": "2638119",
    "end": "2644820"
  },
  {
    "text": "based on what you know about the platforms that you're targeting so there",
    "start": "2644820",
    "end": "2651930"
  },
  {
    "text": "are many parts of the C stand the C and C++ standard libraries that can be",
    "start": "2651930",
    "end": "2657810"
  },
  {
    "text": "implemented in standard C and C++ not quite all of it but most of it so for",
    "start": "2657810",
    "end": "2665040"
  },
  {
    "text": "example here is a simple implementation of mem copy not that big sort of thing",
    "start": "2665040",
    "end": "2671670"
  },
  {
    "text": "that you that you could write fairly easily and you can even do this for",
    "start": "2671670",
    "end": "2678720"
  },
  {
    "text": "functions like stood move yeah it would be you might think that stood move would",
    "start": "2678720",
    "end": "2685500"
  },
  {
    "text": "be some sort of special function that had a certain amount of built-in logic created by the compiler but in fact it",
    "start": "2685500",
    "end": "2692609"
  },
  {
    "text": "can be written in standard C++ it's sort of a complicated definition if you're",
    "start": "2692609",
    "end": "2697950"
  },
  {
    "text": "not familiar with the type traits and some of these other facilities but it",
    "start": "2697950",
    "end": "2703349"
  },
  {
    "text": "can be done and both of these definitions were things I found from just a simple internet search so in many",
    "start": "2703349",
    "end": "2709559"
  },
  {
    "text": "cases you can find implementations of standard library facilities that might",
    "start": "2709559",
    "end": "2715890"
  },
  {
    "text": "not be available to you just by using the Google or whatever you happen to",
    "start": "2715890",
    "end": "2721980"
  },
  {
    "text": "choose now I realize that's not very much not very comforting because the",
    "start": "2721980",
    "end": "2728520"
  },
  {
    "text": "point of having a standard library in general is I don't want to have to write these things I wanted it to be provided",
    "start": "2728520",
    "end": "2736650"
  },
  {
    "text": "by my tool chain automatically if I have to write all of this code that's just a",
    "start": "2736650",
    "end": "2742440"
  },
  {
    "text": "bunch of extra stuff I need to maintain well sort of but I'm not really",
    "start": "2742440",
    "end": "2747720"
  },
  {
    "text": "suggesting that you do this what I'm suggesting is the fact that you can do",
    "start": "2747720",
    "end": "2754500"
  },
  {
    "text": "it opens the door to making use of more of the standard library than is actually",
    "start": "2754500",
    "end": "2760309"
  },
  {
    "text": "guaranteed by free-standing tool chains so because most tool chains provide more",
    "start": "2760309",
    "end": "2770279"
  },
  {
    "text": "of the standard library then they're actually required to provide you can do",
    "start": "2770279",
    "end": "2776339"
  },
  {
    "text": "things like this where you use things like using declarations to wrap parts of",
    "start": "2776339",
    "end": "2782490"
  },
  {
    "text": "a standard library that aren't guaranteed in free-standing applications up in your own namespace and then I can",
    "start": "2782490",
    "end": "2793140"
  },
  {
    "text": "proceed to write my code always call so here I have a namespace Ben and it just",
    "start": "2793140",
    "end": "2798150"
  },
  {
    "text": "borrows the definition of mem copy from the standard library and then I write",
    "start": "2798150",
    "end": "2803970"
  },
  {
    "text": "the rest of my code using Ben colon colon mem copy and now if I ever run across a platform",
    "start": "2803970",
    "end": "2813260"
  },
  {
    "text": "that doesn't provide me with an implementation of mem copy now I have",
    "start": "2813260",
    "end": "2819150"
  },
  {
    "text": "the freedom to come in here and replace the mem cup this using declaration with",
    "start": "2819150",
    "end": "2825690"
  },
  {
    "text": "my own implementation of mem copy if I need to but in many cases I'll never",
    "start": "2825690",
    "end": "2831630"
  },
  {
    "text": "need to in in a lot of situations every platform that I try to use will as an",
    "start": "2831630",
    "end": "2840840"
  },
  {
    "text": "application developer again situations a little different for library developers and we'll talk about that but as an",
    "start": "2840840",
    "end": "2847890"
  },
  {
    "text": "application developer I may very well never run across a platform that doesn't",
    "start": "2847890",
    "end": "2852900"
  },
  {
    "text": "provide me with a mem copy and so I can just get away with doing this and I",
    "start": "2852900",
    "end": "2858750"
  },
  {
    "text": "never need to provide my own implementation now suppose that I'm that",
    "start": "2858750",
    "end": "2864960"
  },
  {
    "text": "I have to target several different platforms and each one of my tool chains",
    "start": "2864960",
    "end": "2869970"
  },
  {
    "text": "provides a different slice of the standard library so some portions of the standard library available on platform",
    "start": "2869970",
    "end": "2876960"
  },
  {
    "text": "one and other parts that are available on platform two and so forth one of the",
    "start": "2876960",
    "end": "2882960"
  },
  {
    "text": "things that you can use is to make managing these your use of the standard",
    "start": "2882960",
    "end": "2890520"
  },
  {
    "text": "library like this a little bit easier is to use a facility called inline",
    "start": "2890520",
    "end": "2895860"
  },
  {
    "text": "namespaces so they look like this so inside my namespace been here I create a",
    "start": "2895860",
    "end": "2903870"
  },
  {
    "text": "bunch of additional namespaces namespace so a namespace for platform one a",
    "start": "2903870",
    "end": "2910080"
  },
  {
    "text": "namespace for platform two so forth and so on for however many platforms I need to support and within each namespace I",
    "start": "2910080",
    "end": "2920450"
  },
  {
    "text": "select the pieces of the standard library in the case of platform one or",
    "start": "2920450",
    "end": "2926760"
  },
  {
    "text": "select my own implementation of things like mem copy for platform two as needed",
    "start": "2926760",
    "end": "2933630"
  },
  {
    "text": "and then I compile one of those conditionally as an inline and namespace",
    "start": "2933630",
    "end": "2940110"
  },
  {
    "text": "and when I use an in space all of the members of the inner",
    "start": "2940110",
    "end": "2947849"
  },
  {
    "text": "namespace become members of the enclosing namespace implicitly so even",
    "start": "2947849",
    "end": "2955170"
  },
  {
    "text": "though this using declaration is inside of platform one there if platform one is",
    "start": "2955170",
    "end": "2963270"
  },
  {
    "text": "compiled as an inline namespace I can use it I can use it as if it were a",
    "start": "2963270",
    "end": "2969809"
  },
  {
    "text": "member of namespace been directly so whichever platform I'm happen to be",
    "start": "2969809",
    "end": "2975420"
  },
  {
    "text": "using I just supply the appropriate pound define and then I select the parts",
    "start": "2975420",
    "end": "2983400"
  },
  {
    "text": "of the standard library that I need and provide the the other implementations that I need as appropriate for a",
    "start": "2983400",
    "end": "2990450"
  },
  {
    "text": "specific platform and it all just works and having this all in one file like",
    "start": "2990450",
    "end": "2997289"
  },
  {
    "text": "this makes it a lot easier to keep track of making modifications to all of these",
    "start": "2997289",
    "end": "3006069"
  },
  {
    "text": "namespaces at the same time if I suddenly find a new part of the standard",
    "start": "3006069",
    "end": "3011480"
  },
  {
    "text": "library that I want to use having this all in one file makes it easy to just go",
    "start": "3011480",
    "end": "3016700"
  },
  {
    "text": "and add them to each namespace and see that I didn't miss any of them whereas",
    "start": "3016700",
    "end": "3021829"
  },
  {
    "text": "if they were distributed across several different files and conditionally compiled in it might be a while before I",
    "start": "3021829",
    "end": "3027890"
  },
  {
    "text": "noticed that I had forgotten to include a version of mem copy for platform 17",
    "start": "3027890",
    "end": "3037119"
  },
  {
    "text": "for example so as a library developer",
    "start": "3037119",
    "end": "3045220"
  },
  {
    "start": "3042000",
    "end": "3042000"
  },
  {
    "text": "your problem is a little bit more complicated because you don't know what",
    "start": "3045220",
    "end": "3051470"
  },
  {
    "text": "platforms you're going to target you could your library could conceivably be used on pretty much any platform and as",
    "start": "3051470",
    "end": "3061250"
  },
  {
    "text": "a result you really need to be careful to restrict yourself to only using the",
    "start": "3061250",
    "end": "3066260"
  },
  {
    "text": "features that are guaranteed to be available in free-standing environments because even if you knew for a fact that",
    "start": "3066260",
    "end": "3075950"
  },
  {
    "text": "every toolchain out there every freestanding implementation currently provided an implementation of mem copy",
    "start": "3075950",
    "end": "3083440"
  },
  {
    "text": "yet the standard still allows for the possibility that there isn't one that",
    "start": "3083440",
    "end": "3089150"
  },
  {
    "text": "there's one that doesn't provide an implementation of mem copy and someone could write a new compiler tomorrow that",
    "start": "3089150",
    "end": "3096109"
  },
  {
    "text": "doesn't provide a mem copy and you still want your library to be able to work on",
    "start": "3096109",
    "end": "3101570"
  },
  {
    "text": "that platform even though that platform didn't even exist at the time that you",
    "start": "3101570",
    "end": "3106820"
  },
  {
    "text": "created your library so in that situation you need to be you really need",
    "start": "3106820",
    "end": "3111859"
  },
  {
    "text": "to restrict yourself specifically to the freestanding feature set so you want to",
    "start": "3111859",
    "end": "3117859"
  },
  {
    "text": "be careful to document the features that your library uses so that free-standing",
    "start": "3117859",
    "end": "3124510"
  },
  {
    "text": "application users can make an informed decision about whether they want to use",
    "start": "3124510",
    "end": "3131089"
  },
  {
    "text": "your library based on knowing whether or not aiding it makes use of exception",
    "start": "3131089",
    "end": "3136550"
  },
  {
    "text": "handling or floating-point arithmetic or things like that if you are and as a",
    "start": "3136550",
    "end": "3144670"
  },
  {
    "text": "library developer you really need to the",
    "start": "3144670",
    "end": "3150710"
  },
  {
    "text": "same trick that I showed you before with inline namespaces really isn't available to you because you don't know which",
    "start": "3150710",
    "end": "3156710"
  },
  {
    "text": "platforms you'll be used on or which tool chains you'll ultimately be compiled with so there are any parts of",
    "start": "3156710",
    "end": "3163819"
  },
  {
    "text": "the standard library that you actually need like stood move as part of writing",
    "start": "3163819",
    "end": "3170510"
  },
  {
    "text": "a library that's intended for freestanding users the safest thing for you to do is write it yourself using the",
    "start": "3170510",
    "end": "3177710"
  },
  {
    "text": "approach that I showed you a little while ago the feature the feature test",
    "start": "3177710",
    "end": "3186290"
  },
  {
    "text": "macros yes I mean your uke yes you could",
    "start": "3186290",
    "end": "3191869"
  },
  {
    "text": "write your library to use the feature test macros to test these things and",
    "start": "3191869",
    "end": "3196880"
  },
  {
    "text": "that would give you a clearer error message at compile time if your if they",
    "start": "3196880",
    "end": "3203270"
  },
  {
    "text": "try to use the your library on a platform that it wasn't intended to work",
    "start": "3203270",
    "end": "3209190"
  },
  {
    "text": "on-like yes yeah you could do that you",
    "start": "3209190",
    "end": "3219210"
  },
  {
    "text": "could do something like conditionally compile your code so that you use either",
    "start": "3219210",
    "end": "3225119"
  },
  {
    "text": "the library version of stood move or your own version of it but if you're",
    "start": "3225119",
    "end": "3230220"
  },
  {
    "text": "going to provide your your own version anyway I'm not sure how much that buys",
    "start": "3230220",
    "end": "3235500"
  },
  {
    "text": "you it might be a woman yeah might buy you something the standard library version would probably be more efficient",
    "start": "3235500",
    "end": "3241410"
  },
  {
    "text": "or at least as efficient as the one you'd write yourself yes yeah we thank",
    "start": "3241410",
    "end": "3255569"
  },
  {
    "text": "you I think you're I was really making more of a general statement about about the behavior of standard library",
    "start": "3255569",
    "end": "3263069"
  },
  {
    "text": "functions the in general they're going to be written to a very high quality standard and you can't know it's",
    "start": "3263069",
    "end": "3271859"
  },
  {
    "text": "difficult to assume that you can beat the standard library implementation not",
    "start": "3271859",
    "end": "3277200"
  },
  {
    "text": "impossible but it general you're not good you're not just going to sit down and beat however and write out something",
    "start": "3277200",
    "end": "3286950"
  },
  {
    "text": "that's going to be better than what was provided by your library so that brings",
    "start": "3286950",
    "end": "3293460"
  },
  {
    "text": "me to the end we sort of already transitioned into the Q&A section so if",
    "start": "3293460",
    "end": "3299010"
  },
  {
    "text": "there are any more questions I'm happy to take them yeah well so the only",
    "start": "3299010",
    "end": "3330060"
  },
  {
    "text": "header that in the standard actually says that it's going to be that it you",
    "start": "3330060",
    "end": "3336750"
  },
  {
    "text": "might get a partial implementation of it is C stud web all the others",
    "start": "3336750",
    "end": "3343050"
  },
  {
    "text": "they don't have this text in them that suggests that you might get a partial version of the header but it does open",
    "start": "3343050",
    "end": "3351330"
  },
  {
    "text": "the door to the possibility that you might be faced with with partial",
    "start": "3351330",
    "end": "3356580"
  },
  {
    "text": "versions of certain header files I don't know of very many people that do that but it is a possibility that the",
    "start": "3356580",
    "end": "3364950"
  },
  {
    "text": "standard allows in terms of is it an is it an artificial distinction whether",
    "start": "3364950",
    "end": "3372030"
  },
  {
    "text": "that it to sort of divide this along header file lines I would say yes and no",
    "start": "3372030",
    "end": "3381020"
  },
  {
    "text": "because in some cases it was retrofitted",
    "start": "3381020",
    "end": "3386100"
  },
  {
    "text": "onto an existing set of header file you know the early header files that C and",
    "start": "3386100",
    "end": "3392790"
  },
  {
    "text": "C++ had they had to make sure that Minh",
    "start": "3392790",
    "end": "3399030"
  },
  {
    "text": "to completely change how this these things were laid out so then they had to sort of sort them into freestanding and",
    "start": "3399030",
    "end": "3405540"
  },
  {
    "text": "not freestanding whereas with others I think that they were making a decision about how how to group things into",
    "start": "3405540",
    "end": "3412980"
  },
  {
    "text": "libraries in part informed by the idea that some of these things might be used",
    "start": "3412980",
    "end": "3418950"
  },
  {
    "text": "in freestanding input implementations and others might not yeah",
    "start": "3418950",
    "end": "3429980"
  },
  {
    "text": "just to be clear I am NOT a co-author on that paper that is been Craig's paper",
    "start": "3443450",
    "end": "3449240"
  },
  {
    "text": "but but yes in that paper yeah in that situation one",
    "start": "3449240",
    "end": "3457950"
  },
  {
    "text": "of the things that he is proposing in that paper is that we would create a",
    "start": "3457950",
    "end": "3464580"
  },
  {
    "text": "sort of distinction the the contents of the header files would be marked in a",
    "start": "3464580",
    "end": "3471750"
  },
  {
    "text": "certain way so that certain pieces were identified as the freestanding pieces",
    "start": "3471750",
    "end": "3477060"
  },
  {
    "text": "and other pieces were not guaranteed to be there in a free-standing implementation and so that would one of",
    "start": "3477060",
    "end": "3486870"
  },
  {
    "text": "the complicating factors there is that you can't really cleanly divide it along",
    "start": "3486870",
    "end": "3492630"
  },
  {
    "text": "header file lines and so there is a question of you know what do you do in",
    "start": "3492630",
    "end": "3498150"
  },
  {
    "text": "that situation and the general tack that he's taken in",
    "start": "3498150",
    "end": "3503550"
  },
  {
    "text": "his paper is it's better to provide some of the functionality if there's a core",
    "start": "3503550",
    "end": "3511560"
  },
  {
    "text": "set of functionality that you can provide for something like stood array where most of the behavior doesn't rely",
    "start": "3511560",
    "end": "3517920"
  },
  {
    "text": "on exceptions there's this one function that does then you get that available to",
    "start": "3517920",
    "end": "3524370"
  },
  {
    "text": "you he hasn't made the effort to that I know of to delve into providing things",
    "start": "3524370",
    "end": "3532530"
  },
  {
    "text": "like stud vector or stud deck which where the usage of dynamic memory is",
    "start": "3532530",
    "end": "3538590"
  },
  {
    "text": "built into the metal at least those things there the usage of memory is",
    "start": "3538590",
    "end": "3545580"
  },
  {
    "text": "governed by a locators and things like that it's a much more complicated process to separate out which pieces",
    "start": "3545580",
    "end": "3552480"
  },
  {
    "text": "might and might not throw exceptions or raise some of the other concerns that",
    "start": "3552480",
    "end": "3559500"
  },
  {
    "text": "freestanding users have",
    "start": "3559500",
    "end": "3562820"
  },
  {
    "text": "yes I don't think that there's a well knew is already one of the guaranteed",
    "start": "3575080",
    "end": "3581330"
  },
  {
    "text": "freestanding headers and so you always get placement new that's that's",
    "start": "3581330",
    "end": "3587960"
  },
  {
    "text": "guaranteed to be available today but",
    "start": "3587960",
    "end": "3591880"
  },
  {
    "text": "well yes the it's the yes I simplified",
    "start": "3597700",
    "end": "3605270"
  },
  {
    "text": "the the description down a little bit for the sake of making it fit on a salt on a slide here yes only some of the",
    "start": "3605270",
    "end": "3614450"
  },
  {
    "text": "implementations of new and delete would become optional in that under that paper",
    "start": "3614450",
    "end": "3621020"
  },
  {
    "text": "others that don't allocate memory like like placement new would would still be",
    "start": "3621020",
    "end": "3628250"
  },
  {
    "text": "available okay I'm happy to stick around",
    "start": "3628250",
    "end": "3637460"
  },
  {
    "text": "and answer any other questions but otherwise thank you for coming I hope you found it useful and best of luck to",
    "start": "3637460",
    "end": "3646430"
  },
  {
    "text": "you and all your coding endeavors",
    "start": "3646430",
    "end": "3649569"
  }
]