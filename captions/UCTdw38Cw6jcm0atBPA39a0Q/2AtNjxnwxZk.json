[
  {
    "text": "hi good afternoon everyone uh I'm gonna get started straight away I'm going to try and pack a lot into 60 minutes which",
    "start": "480",
    "end": "5940"
  },
  {
    "text": "is always my problem um my name's Steve I'm a Microsoft MVP pluralsight author and engineer at",
    "start": "5940",
    "end": "11519"
  },
  {
    "text": "elastic and before I get into how you can contact me there's a bitly link on this slide if you grab that that is a",
    "start": "11519",
    "end": "18180"
  },
  {
    "text": "link to the slide so if you want anything to review afterwards or the resource links and things just grab that",
    "start": "18180",
    "end": "23279"
  },
  {
    "text": "one link and you have everything you need so if you do want to reach out to me I'm at Steve J Gordon on Twitter same",
    "start": "23279",
    "end": "29039"
  },
  {
    "text": "username over on Macedon you know just in case and stevejagorn.com UK is where",
    "start": "29039",
    "end": "34260"
  },
  {
    "text": "I blog pretty infrequently at the moment but hopefully more so in the future so I'm gonna I'm gonna talk to you today",
    "start": "34260",
    "end": "40379"
  },
  {
    "text": "about writing code with code and specifically using uh something called the Roslyn apis",
    "start": "40379",
    "end": "46800"
  },
  {
    "text": "so to set expectations uh we'll do an intro to Roslyn so don't worry if you've never heard of it or you've never sort",
    "start": "46800",
    "end": "52559"
  },
  {
    "text": "of worked with it before we'll talk about what it is and why you might use it well specifically then look at some demos around visualizing syntax trees",
    "start": "52559",
    "end": "60180"
  },
  {
    "text": "and generating code from those syntax trees don't worry if you don't know what a syntax tree is we touch on that too",
    "start": "60180",
    "end": "65580"
  },
  {
    "text": "and specifically where this is kind of Applied practically is in co-generating",
    "start": "65580",
    "end": "70860"
  },
  {
    "text": "the next version of the elasticsearch.net client so I'm going to talk a little bit about like how we determined creating a spec transforming",
    "start": "70860",
    "end": "78540"
  },
  {
    "text": "that spec into sort of models that we can sort of represent with c-sharp types and then actually building those syntax",
    "start": "78540",
    "end": "83640"
  },
  {
    "text": "trees emitting the C sharp files and some of the lessons learned and things I would probably do differently with the",
    "start": "83640",
    "end": "89759"
  },
  {
    "text": "knowledge that I've learned as I've gone along so let's start with Roslyn Roslyn was",
    "start": "89759",
    "end": "95100"
  },
  {
    "text": "originally the code name for a project that kicked off what we're about to talk about Microsoft are pretty good at good",
    "start": "95100",
    "end": "101100"
  },
  {
    "text": "code names often they then ditch them at release and come up with a boring brand product name they kind of have the.net",
    "start": "101100",
    "end": "107159"
  },
  {
    "text": "compiler platform SDK is kind of the other name for this thing but Roslyn fortunately is stuck so you will still",
    "start": "107159",
    "end": "113520"
  },
  {
    "text": "find stuff in the documentation and the repos and you can search Rosalind c-sharp and you'll find probably what",
    "start": "113520",
    "end": "118979"
  },
  {
    "text": "you're looking for so as I say it was sort of initially kicked off in 2010",
    "start": "118979",
    "end": "124619"
  },
  {
    "text": "um and then I think it was a sort of first released um after some previews in 2015 and",
    "start": "124619",
    "end": "130380"
  },
  {
    "text": "ultimately what Rosalind is is a set of Open Source uh compilers for c-sharp and vb.net open source is pretty",
    "start": "130380",
    "end": "137340"
  },
  {
    "text": "self-evident it's on GitHub you can view the code you can play with the code you can learn from the code and create",
    "start": "137340",
    "end": "143040"
  },
  {
    "text": "issues all of that kind of stuff compilers for c-sharp and vb.net so the",
    "start": "143040",
    "end": "148200"
  },
  {
    "text": "interesting thing there is that the compiler for c-sharp is now written in C sharp so to compiler the compile the",
    "start": "148200",
    "end": "153660"
  },
  {
    "text": "compiler you use the compiler that you've just written and same for vb.net so the interesting part of this",
    "start": "153660",
    "end": "160800"
  },
  {
    "text": "particular statement is open box traditionally combined compilers have been quite a closed box you put source code in one end and out the other you",
    "start": "160800",
    "end": "167280"
  },
  {
    "text": "get some kind of artifact like an executable or a dll and what happens inside is kind of opaque to you and you",
    "start": "167280",
    "end": "173459"
  },
  {
    "text": "can't really access any of that information and you might not think that's important but the Microsoft team",
    "start": "173459",
    "end": "179160"
  },
  {
    "text": "did and ultimately what they've set out to achieve is producing a compiler platform which is basically opening the",
    "start": "179160",
    "end": "184680"
  },
  {
    "text": "box and giving us access to the apis that Roslyn can give us to see what the",
    "start": "184680",
    "end": "190260"
  },
  {
    "text": "data structures are that the compiler can see and hook into various points along that compiler pipeline if we want",
    "start": "190260",
    "end": "195300"
  },
  {
    "text": "to so this is used heavily inside like Visual Studio to provide all of the",
    "start": "195300",
    "end": "200400"
  },
  {
    "text": "features you're probably using day to day without really paying much attention to them ultimately I summarize this as the maker of squiggles and the finder of",
    "start": "200400",
    "end": "206760"
  },
  {
    "text": "things it's what understands your source code and is able to give you hints and intellisense but also to highlight when",
    "start": "206760",
    "end": "213360"
  },
  {
    "text": "you've made mistakes if you forget a semicolon on a statement it can give you a syntax error squiggle that tells you",
    "start": "213360",
    "end": "218459"
  },
  {
    "text": "you've done that and also we have other sort of more advanced squiggles that give us like code refactoring so ways to",
    "start": "218459",
    "end": "224879"
  },
  {
    "text": "maybe make code more concise or move some more modern c-sharp language features",
    "start": "224879",
    "end": "230159"
  },
  {
    "text": "finder of things like go to all final references go to definition searching for particular symbols within your",
    "start": "230159",
    "end": "236099"
  },
  {
    "text": "source code they're all enabled through things like the rosin apis",
    "start": "236099",
    "end": "241700"
  },
  {
    "text": "so one of the concrete examples of where these can be useful is like building analyzers and code fixes so a lot of",
    "start": "241739",
    "end": "248640"
  },
  {
    "text": "these are already available to you like just when you use the framework but you can also bring in analyzers and code",
    "start": "248640",
    "end": "254819"
  },
  {
    "text": "fixes in nougat packages so people can write these and ship them on nougat for you you can write your own internally",
    "start": "254819",
    "end": "260639"
  },
  {
    "text": "within your business so ultimately what an analyzer is is it's something that contains code that recognizes some",
    "start": "260639",
    "end": "266400"
  },
  {
    "text": "violation of a rule and that rule can be pretty much anything related to the code that's been",
    "start": "266400",
    "end": "271740"
  },
  {
    "text": "written uh the structure of it but style and naming conventions you could if you",
    "start": "271740",
    "end": "277020"
  },
  {
    "text": "want to write an analyzer that says you can never have a class name that has the word builder in it and then a force that across your organization",
    "start": "277020",
    "end": "283320"
  },
  {
    "text": "now once you've got sort of an analyzer to detect a problem which will appear as a squiggle in your in your code base and",
    "start": "283320",
    "end": "289380"
  },
  {
    "text": "you will configure that as maybe informational or warning or error it's nice if you could also have something",
    "start": "289380",
    "end": "295199"
  },
  {
    "text": "that fixes it for you rather than just telling you you've done something wrong here's how you actually change your code to apply with the rule and so a code fix",
    "start": "295199",
    "end": "303840"
  },
  {
    "text": "is essentially that it's something that's actually going to fix that violation in the code for you because we",
    "start": "303840",
    "end": "309120"
  },
  {
    "text": "have all of the information through Roslyn about what the syntax and semantic meaning is of the code I'll",
    "start": "309120",
    "end": "314699"
  },
  {
    "text": "show a quick demo of of sort of analyzers in action once the resolution fixes itself and so",
    "start": "314699",
    "end": "322139"
  },
  {
    "text": "inside this is actually something we're using inside the elasticsearch um code base for the client and so as a",
    "start": "322139",
    "end": "329880"
  },
  {
    "text": "library we're recommended that we should apply configure away Force to the end of anything asynchronous don't worry about",
    "start": "329880",
    "end": "335759"
  },
  {
    "text": "why specifically I don't have time to go into that but we're doing it and we can easily forget to do this so if I",
    "start": "335759",
    "end": "342479"
  },
  {
    "text": "actually delete this here and just give Visual Studio a second or two to realize I've done that",
    "start": "342479",
    "end": "348120"
  },
  {
    "text": "we get a squiggle and if I hover over this we can see telling me I'm possibly missing a configurable weight Force here",
    "start": "348120",
    "end": "354660"
  },
  {
    "text": "so we've installed through a nuget package an analyzer called configure awake Checker and then this picks up the",
    "start": "354660",
    "end": "361500"
  },
  {
    "text": "fact that we haven't applied the configure away on the end of this method cool and so if I go in here and I can say",
    "start": "361500",
    "end": "367500"
  },
  {
    "text": "well I want to correct that then to put it back on again and that's the code fix putting that back for me similarly in",
    "start": "367500",
    "end": "373560"
  },
  {
    "text": "box we get something like if we forget to await an asynchronous method again Visual Studio will moan at me here and",
    "start": "373560",
    "end": "379500"
  },
  {
    "text": "stay because this call is not awaited execution of the current method continues before the call is completed",
    "start": "379500",
    "end": "384780"
  },
  {
    "text": "and then says to consider applying the await operator and again we have a code fix to add that back",
    "start": "384780",
    "end": "391080"
  },
  {
    "text": "so that's kind of in a nutshell some of the uses that you probably use daily",
    "start": "391080",
    "end": "396800"
  },
  {
    "text": "inside Rosalind it's something more exciting more recent is Source generators this isn't a full talk on",
    "start": "396800",
    "end": "402960"
  },
  {
    "text": "Source generators there was one this morning on incremental Source generators but just to summarize it if you haven't",
    "start": "402960",
    "end": "408479"
  },
  {
    "text": "heard much about these These Are A c-sharp compiler feature that lets developers inspect user code while it's",
    "start": "408479",
    "end": "414300"
  },
  {
    "text": "being compiled you might think well do I care about that why would I want to know about that well you can develop",
    "start": "414300",
    "end": "420419"
  },
  {
    "text": "components that run during that compilation of your code to access the rich metadata about the code the syntactical structure of the code and",
    "start": "420419",
    "end": "427020"
  },
  {
    "text": "some of the semantic meaning again you may still be thinking okay I don't care you can create new c-sharp source files",
    "start": "427020",
    "end": "434639"
  },
  {
    "text": "at this point so you can create them on the Fly and add them to the compilation and if you're still searching for",
    "start": "434639",
    "end": "440039"
  },
  {
    "text": "reasons for it let me give you a couple of examples so where these are typically useful is reducing boilerplate code in",
    "start": "440039",
    "end": "447180"
  },
  {
    "text": "applications so an example in the Microsoft docs I think they actually now ship the source generators to fix this or to help with this is when you need to",
    "start": "447180",
    "end": "453900"
  },
  {
    "text": "do like I notify property changed and you need to implement that and there's lots of boilerplate code you'd have to write today you can just plug in a",
    "start": "453900",
    "end": "460800"
  },
  {
    "text": "source generator by putting an attribute on a few things and then the source generator compile time can put all that",
    "start": "460800",
    "end": "466500"
  },
  {
    "text": "boilerplate into your compilation for you and that saves you a lot of code that you would normally have to write by hand and avoid you making mistakes and",
    "start": "466500",
    "end": "473460"
  },
  {
    "text": "missing things another more interesting example I think is where we can actually improve the",
    "start": "473460",
    "end": "478620"
  },
  {
    "text": "execution time of code potentially so inside system text Json when you're serializing a type to or from Json the",
    "start": "478620",
    "end": "487199"
  },
  {
    "text": "first time that happens typically a serializer is going to have to start doing some inspection usually using",
    "start": "487199",
    "end": "492660"
  },
  {
    "text": "something like reflection to understand okay well this is the class they want to serialize to or from here's the",
    "start": "492660",
    "end": "498060"
  },
  {
    "text": "properties it has here's the attributes some of them have Json ignore some of them don't here's the Json property name",
    "start": "498060",
    "end": "503580"
  },
  {
    "text": "Etc so it needs to build up that model and that meta information to perform serialization and that happens normally",
    "start": "503580",
    "end": "509639"
  },
  {
    "text": "at runtime and it gets cached but it's still overhead with Source generators we",
    "start": "509639",
    "end": "514860"
  },
  {
    "text": "can actually do that up front because we have the finished code that you want to produce and you're compiling and so the",
    "start": "514860",
    "end": "520380"
  },
  {
    "text": "source generator can see the same information about what properties are on the types and what attributes are",
    "start": "520380",
    "end": "526020"
  },
  {
    "text": "applied and so it can spit out a c-sharp file for you that contains all of that information pre-calculated and optimize",
    "start": "526020",
    "end": "533120"
  },
  {
    "text": "source code and serialization so that's pretty cool",
    "start": "533120",
    "end": "538620"
  },
  {
    "text": "uh we're not going to spend time on compiler Theory um but just very very briefly there is a",
    "start": "538620",
    "end": "544620"
  },
  {
    "text": "compiler pipeline so ultimately we write C sharp source files they go into the compiler it has to parse them so",
    "start": "544620",
    "end": "550740"
  },
  {
    "text": "understand where the tokens are in that text file that we've given it we have to identify any symbols that have been declared in our source code so methods",
    "start": "550740",
    "end": "557700"
  },
  {
    "text": "and classes that we've defined also methods and classes that have been defined in stuff that we're importing so",
    "start": "557700",
    "end": "563399"
  },
  {
    "text": "you know new get packages we've pulled in and then there's a binding phase to understand so what are the results of",
    "start": "563399",
    "end": "570060"
  },
  {
    "text": "expressions and variables in our code what do they actually bind to and what symbol do they bind to and then finally",
    "start": "570060",
    "end": "575459"
  },
  {
    "text": "emitting IL and so this is the phase where we actually produce IL code that actually",
    "start": "575459",
    "end": "581880"
  },
  {
    "text": "is the result of the compilation so C sharp VB dot f sharp compiled to Il IL",
    "start": "581880",
    "end": "587519"
  },
  {
    "text": "is an Intermediate Language so C sharp VB F sharp high level languages machine",
    "start": "587519",
    "end": "592740"
  },
  {
    "text": "code low level language the Intermediate Language sits in the middle and the nice thing is the compiler is all just enough to know how to produce IL code and that",
    "start": "592740",
    "end": "600240"
  },
  {
    "text": "can run on any architecture on any platform where.net can run and then the runtime is responsible for taking that",
    "start": "600240",
    "end": "606480"
  },
  {
    "text": "IL and just in time compiling to machine code so as methods are needing to be",
    "start": "606480",
    "end": "611940"
  },
  {
    "text": "invoked if they haven't previously been compiled then they can be compiled at that point",
    "start": "611940",
    "end": "618200"
  },
  {
    "text": "Rosalind includes a very rich compact compiler API that Maps very nicely to",
    "start": "618740",
    "end": "625440"
  },
  {
    "text": "that compiler pipeline so you can see there the parsing phase has a corresponding set of apis within the",
    "start": "625440",
    "end": "631560"
  },
  {
    "text": "compiler API that to do with managing syntax trees there's an API for symbols there's an API for emitting IL code",
    "start": "631560",
    "end": "639120"
  },
  {
    "text": "and so it's these apis that we're going to be sort of talking about specifically we're going to focus in on this level",
    "start": "639120",
    "end": "644399"
  },
  {
    "text": "the parsing level and the syntax tree level so that's introducing tax trees",
    "start": "644399",
    "end": "652260"
  },
  {
    "text": "syntax trees are the result basically of the analysis phase of the compiler so as",
    "start": "652260",
    "end": "657300"
  },
  {
    "text": "that parsing phase has gone through the code and it's worked out where all the tokens are it understands the syntax that we've written",
    "start": "657300",
    "end": "663959"
  },
  {
    "text": "and so from there we can build up a tree representation of that syntactic",
    "start": "663959",
    "end": "669060"
  },
  {
    "text": "structure of the code and this includes three main things nodes which are generally going to correspond to kind of",
    "start": "669060",
    "end": "675480"
  },
  {
    "text": "language constructs so like a class declaration or a method declaration would be defined as a node in this tree",
    "start": "675480",
    "end": "681180"
  },
  {
    "text": "nodes will always have a parent except for the root node and nodes may have child nodes below them so a class can",
    "start": "681180",
    "end": "687779"
  },
  {
    "text": "have methods and properties and those are nodes below it nodes also are made up of tokens and",
    "start": "687779",
    "end": "694320"
  },
  {
    "text": "tokens are really the individual language keywords that correspond to that declaration to that node so for",
    "start": "694320",
    "end": "700500"
  },
  {
    "text": "example we can put a public keyword on a declaration for a class and then we've made it public but that token has to be",
    "start": "700500",
    "end": "706260"
  },
  {
    "text": "attached to that node so that we understand that it's part of that declaration tokens are kind of Terminators within the tree although",
    "start": "706260",
    "end": "712680"
  },
  {
    "text": "they do have trivia attached to them and trivia is anything within that source code file that isn't something that's",
    "start": "712680",
    "end": "719519"
  },
  {
    "text": "going to be involved in the actual final compilation of idle code so this is white space new lines and also things",
    "start": "719519",
    "end": "726120"
  },
  {
    "text": "like comments single line comments multi-line comments XML documentation comments that's all structural things",
    "start": "726120",
    "end": "731880"
  },
  {
    "text": "that we can include in a c-sharp source file that aren't necessary for compilation but we do want to represent",
    "start": "731880",
    "end": "737160"
  },
  {
    "text": "them in the tree so that we understand where those things belong because for example with an analyzer or maybe even a",
    "start": "737160",
    "end": "743700"
  },
  {
    "text": "code refactoring if it's going to move some code around in that tree it needs to make sure that any comments that",
    "start": "743700",
    "end": "748860"
  },
  {
    "text": "belong to that line follow it around as well now ultimately what a syntax tree gives us",
    "start": "748860",
    "end": "755100"
  },
  {
    "text": "is the ability to interact with source code in a more meaningful way so we're no longer just looking at a text file",
    "start": "755100",
    "end": "760380"
  },
  {
    "text": "that needs parsing but we actually have a data structure now that represents everything that we've defined for our",
    "start": "760380",
    "end": "765899"
  },
  {
    "text": "programming that source file very important points about syntax trees so they're immutable as are the nodes",
    "start": "765899",
    "end": "772800"
  },
  {
    "text": "and everything below so this is important if you're making changes to a syntax tree you're not changing anything",
    "start": "772800",
    "end": "778380"
  },
  {
    "text": "what you're doing is saying I want a copy of this node with these changes applied now internally this is all done",
    "start": "778380",
    "end": "783899"
  },
  {
    "text": "as sort of a relatively highly optimized way to avoid sort of too much memory allocations things like that but",
    "start": "783899",
    "end": "789660"
  },
  {
    "text": "ultimately it's important because multiple different things might be looking at that syntax tree at the same",
    "start": "789660",
    "end": "795240"
  },
  {
    "text": "time and we don't really want to have locking we want these things to be thread safe so if you're going to change something you get a copy of that thing",
    "start": "795240",
    "end": "801000"
  },
  {
    "text": "with the changes applied the other important point is that they're round tripable so you can parse",
    "start": "801000",
    "end": "806160"
  },
  {
    "text": "a c-sharp source file through the the compiler and you'll get a syntax tree and because that includes everything",
    "start": "806160",
    "end": "811980"
  },
  {
    "text": "that's in that file including all of the detail about the trivia you can return back to a c-sharp file or just a text",
    "start": "811980",
    "end": "817920"
  },
  {
    "text": "file ultimately that has the exact same representation of that source code in it so entirely around triple",
    "start": "817920",
    "end": "824639"
  },
  {
    "text": "so there is some tooling that we can use to kind of get an understanding of what a syntax tree kind of looks like this",
    "start": "824639",
    "end": "830160"
  },
  {
    "text": "isn't installed by default but if you want to this is where you need to know the the product name on the right there",
    "start": "830160",
    "end": "835260"
  },
  {
    "text": "you can see the.net compiler platform SDK is the component I've installed you can find that under Visual Studio",
    "start": "835260",
    "end": "841019"
  },
  {
    "text": "extension development if you want to install that piece so with that let's have a look at a",
    "start": "841019",
    "end": "846600"
  },
  {
    "text": "syntax tree yeah I don't want that one",
    "start": "846600",
    "end": "854300"
  },
  {
    "text": "so in this uh solution I'll give a link to this at the end but it's not very exciting we have a single",
    "start": "855480",
    "end": "862200"
  },
  {
    "text": "um program class uh in this single project here",
    "start": "862200",
    "end": "867480"
  },
  {
    "text": "um so it has a program main method has a very simple data class and we just",
    "start": "867480",
    "end": "872820"
  },
  {
    "text": "basically create an instance of the data class and then write something out the code is not exciting nor is it important",
    "start": "872820",
    "end": "877860"
  },
  {
    "text": "but what we'd like to do is actually understand what the syntax tree looks like so if I go with that tooling",
    "start": "877860",
    "end": "883740"
  },
  {
    "text": "installed if I go here to other windows I can bring up the syntax visualizer pin",
    "start": "883740",
    "end": "888779"
  },
  {
    "text": "over there hopefully this will be big enough if it isn't the space to come forward",
    "start": "888779",
    "end": "894420"
  },
  {
    "text": "um so if I click in this code file somewhere it populates the syntax tree so you can see the roots of the tree",
    "start": "894420",
    "end": "900240"
  },
  {
    "text": "here is this compilation unit which is basically just AC sharp source file and if I click on this you can see it",
    "start": "900240",
    "end": "905820"
  },
  {
    "text": "highlights all the text that belongs to that node and below so if I click here I can see I've got a",
    "start": "905820",
    "end": "912120"
  },
  {
    "text": "file scope namespace declaration so using the file scope namespace syntax here so although this isn't curly braced",
    "start": "912120",
    "end": "918660"
  },
  {
    "text": "and then indented like a traditional old style namespace declaration um falscope namespace is still applied",
    "start": "918660",
    "end": "924959"
  },
  {
    "text": "to the entire file so everything in this file belongs to that namespace just by the nature of how this feature is",
    "start": "924959",
    "end": "930480"
  },
  {
    "text": "defined so everything appears under it in the tree by being indented that is defined with a keyword so this is a",
    "start": "930480",
    "end": "937620"
  },
  {
    "text": "token which is a language keyword that we have in C sharp in the grammar and then you can see here the trailing white",
    "start": "937620",
    "end": "943199"
  },
  {
    "text": "space so we can identify where that trivia is appearing too we then have an identify name which is made up of an",
    "start": "943199",
    "end": "949139"
  },
  {
    "text": "identifier token so this isn't a language keyword it's something we've decided to name the namespace and then",
    "start": "949139",
    "end": "954660"
  },
  {
    "text": "we can see we even have the punctuation represented as a token the semicolon here and then that's followed by a new",
    "start": "954660",
    "end": "961199"
  },
  {
    "text": "line we have two class declarations if I expand this first one and we dive down a little bit into the method and we go",
    "start": "961199",
    "end": "968100"
  },
  {
    "text": "down to the block so this is the the method body you can see again wrapped in open brace close brace tokens we have",
    "start": "968100",
    "end": "974339"
  },
  {
    "text": "our two statements and the local declaration statement defines the variable and then we have our expression",
    "start": "974339",
    "end": "980040"
  },
  {
    "text": "and if I dive down here and click on the semicolon token at the end of that we have multiple bits of trivia applied",
    "start": "980040",
    "end": "986339"
  },
  {
    "text": "because we have white space then we have our single line comment on that same line and then the end of line",
    "start": "986339",
    "end": "992399"
  },
  {
    "text": "trivia so this is all the trivia that's attached to that token so that we know what's actually in this file so that's",
    "start": "992399",
    "end": "998519"
  },
  {
    "text": "one way you can kind of get started with getting a view of the syntax tree another thing I've installed is something called the dgml editor which",
    "start": "998519",
    "end": "1005300"
  },
  {
    "text": "you can find if you search other components and if I click right click on this class declaration",
    "start": "1005300",
    "end": "1012139"
  },
  {
    "text": "desperately try and fit this on the screen so one two five percent we get basically a kind of graph view of",
    "start": "1012139",
    "end": "1018680"
  },
  {
    "text": "that syntax tree so I've chosen to start at the class declaration and you can see below that we have one of its children",
    "start": "1018680",
    "end": "1025339"
  },
  {
    "text": "is the method declaration one of that has a child of a block node and then we see all right I don't want",
    "start": "1025339",
    "end": "1032058"
  },
  {
    "text": "to move stuff around we see the statements statement there statement there so obviously you can see there's",
    "start": "1032059",
    "end": "1037220"
  },
  {
    "text": "there's lots of syntactical information that has been identified here we have all the tokens in green",
    "start": "1037220",
    "end": "1043120"
  },
  {
    "text": "we have the trivia so leading trivia that comes before a token is in white trailing is in Gray",
    "start": "1043120",
    "end": "1049700"
  },
  {
    "text": "um and that can be kind of useful if you want to kind of get a feel for what um what a syntax tree looks like",
    "start": "1049700",
    "end": "1055640"
  },
  {
    "text": "I'm going to close that so I'll get some more memory back um",
    "start": "1055640",
    "end": "1060820"
  },
  {
    "text": "cool um so with that knowledge sort of set let's talk a little bit more about how",
    "start": "1063320",
    "end": "1069260"
  },
  {
    "text": "we're going about co-generating a language client so elasticsearch has grown over the",
    "start": "1069260",
    "end": "1075559"
  },
  {
    "text": "years and elasticsearch is entirely managed through its HTTP API so as features get introduced the team add",
    "start": "1075559",
    "end": "1081860"
  },
  {
    "text": "more and more endpoints there's well over 400 endpoints there there today and for representing all of the data that",
    "start": "1081860",
    "end": "1088400"
  },
  {
    "text": "can flow in and out of those there's over 2000 data structures use is requests and responses for most of those",
    "start": "1088400",
    "end": "1093679"
  },
  {
    "text": "endpoints most of those have tens of properties then there's sub-objects below those that have to be represented",
    "start": "1093679",
    "end": "1100160"
  },
  {
    "text": "with Concepts like different queries and aggregations and filters you can apply so it's a complex API",
    "start": "1100160",
    "end": "1107000"
  },
  {
    "text": "and our job on the clients team is to build the language clients that allow you to interact with that programmatically through various",
    "start": "1107000",
    "end": "1112520"
  },
  {
    "text": "different languages so with the version 7 language client for net one of the major problems we had",
    "start": "1112520",
    "end": "1119000"
  },
  {
    "text": "was it's nearly entirely hand written and if you can imagine keeping up with a",
    "start": "1119000",
    "end": "1124100"
  },
  {
    "text": "server team of hundreds of people who are producing new endpoints new features or modifying existing requests and",
    "start": "1124100",
    "end": "1130280"
  },
  {
    "text": "adding new properties um that's a lot of Maintenance work because the client's team is less than 10. and so ultimately we're going to not",
    "start": "1130280",
    "end": "1138620"
  },
  {
    "text": "be consistent with the API you know in the original days it was easy to kind of hand roll this stuff and keep up at a",
    "start": "1138620",
    "end": "1144799"
  },
  {
    "text": "reasonable Pace but you know we have to When someone tells us they've added a new endpoint we have to see if they've",
    "start": "1144799",
    "end": "1150140"
  },
  {
    "text": "written documentation yet and if they have we can see the docs and we can get a view for what's available there if not",
    "start": "1150140",
    "end": "1155600"
  },
  {
    "text": "we have to go to the elasticsearch server code base which is Java we have to basically reverse engineer all of",
    "start": "1155600",
    "end": "1161179"
  },
  {
    "text": "their modeling there to figure out okay well we want these properties on the c-sharp model then and so you know we're",
    "start": "1161179",
    "end": "1166640"
  },
  {
    "text": "getting it out consistency we're never going to release things quite at the same Cadence that their server team can",
    "start": "1166640",
    "end": "1171679"
  },
  {
    "text": "and that's a problem and so for version 8 we started thinking about how we could get more intelligent",
    "start": "1171679",
    "end": "1177380"
  },
  {
    "text": "about this you know it was the time to make the move to optimize this so for",
    "start": "1177380",
    "end": "1182419"
  },
  {
    "text": "net and Java in particular we've kind of basically decided that we'd create the next generation of those clients and",
    "start": "1182419",
    "end": "1187640"
  },
  {
    "text": "specifically to make things easier we would look to try and code generate a vast majority of them based on a formal",
    "start": "1187640",
    "end": "1194720"
  },
  {
    "text": "spec so ignoring the spec for a second we'll come to that",
    "start": "1194720",
    "end": "1199760"
  },
  {
    "text": "um if you're told you need to generate some c-sharp files what are the first possible options you might think about",
    "start": "1199760",
    "end": "1204919"
  },
  {
    "text": "well strings and string Builder is a valid way of doing code generation you",
    "start": "1204919",
    "end": "1209960"
  },
  {
    "text": "can have strings that represent you know a structure of a c-sharp file that you want to produce with placeholders that",
    "start": "1209960",
    "end": "1215480"
  },
  {
    "text": "you populate for each type or you could break them down into you know representation of a class and a method",
    "start": "1215480",
    "end": "1221299"
  },
  {
    "text": "and then chain these things together with string Builders that's a valid way of defining ultimately a text file but",
    "start": "1221299",
    "end": "1228860"
  },
  {
    "text": "it's a bit brittle you don't get any kind of checking that you're doing the right thing if you misspell namespace",
    "start": "1228860",
    "end": "1235100"
  },
  {
    "text": "you will maybe only find out about it when you generate your client and then you try and compile the compliant you",
    "start": "1235100",
    "end": "1240380"
  },
  {
    "text": "find the error and then you have to find the string that that code was defined in another option that's maybe a step up",
    "start": "1240380",
    "end": "1247640"
  },
  {
    "text": "that's still really working with with text ultimately is templates so something like T4 Razer we were actually",
    "start": "1247640",
    "end": "1254299"
  },
  {
    "text": "using the Razer engine in the V7 climate client for the small amount of Cogen we did do we basically created Razer views",
    "start": "1254299",
    "end": "1261440"
  },
  {
    "text": "that represented the structure we wanted to generate and that can include constructs like loops and things and",
    "start": "1261440",
    "end": "1266960"
  },
  {
    "text": "then you have the view model which is something that you can populate for each type and then use the Razer engine and",
    "start": "1266960",
    "end": "1272059"
  },
  {
    "text": "model binding to actually produce the final file and that worked quite nicely but it's still kind of templates which",
    "start": "1272059",
    "end": "1277700"
  },
  {
    "text": "are text ultimately what I landed on was I wanted to try and play with the Roslyn apis",
    "start": "1277700",
    "end": "1283340"
  },
  {
    "text": "because my thought was well we can construct a syntax tree with the rosin apis and generate C sharp from it",
    "start": "1283340",
    "end": "1289039"
  },
  {
    "text": "because just as we can parse a c-sharp source file and we can get to the syntax tree as you'll remember it's entirely",
    "start": "1289039",
    "end": "1295039"
  },
  {
    "text": "around triple but we don't have to start with parsing a file we can actually construct programmatically that syntax",
    "start": "1295039",
    "end": "1300500"
  },
  {
    "text": "tree and then just emit the file from it and so that's a look at what that looks",
    "start": "1300500",
    "end": "1305659"
  },
  {
    "text": "like in um in.net",
    "start": "1305659",
    "end": "1309400"
  },
  {
    "text": "so I have another I do have another project Factory in this solution and that has a file in here called spec.json",
    "start": "1314720",
    "end": "1322539"
  },
  {
    "text": "this is like a really super simplified version of the elasticsearch spec it doesn't Define enough to be a rich",
    "start": "1323720",
    "end": "1329720"
  },
  {
    "text": "specification for defining classes but it's enough for getting started so you could generate any spec you want you can",
    "start": "1329720",
    "end": "1335960"
  },
  {
    "text": "have any format you want as long as it contains the information you need to understand what classes and things you want to produce you could create one but",
    "start": "1335960",
    "end": "1342980"
  },
  {
    "text": "we've chosen a basic Json structure so we have an array of types the type has a type name and it might have an array of",
    "start": "1342980",
    "end": "1349820"
  },
  {
    "text": "properties and the property is just going to have a type and a name so a very simple spec and we have two classes",
    "start": "1349820",
    "end": "1354860"
  },
  {
    "text": "to find inside this project I have a reference to the package",
    "start": "1354860",
    "end": "1360520"
  },
  {
    "text": "microsoft.codeanalysis.c sharp which gives me the compiler apis and specifically stuff for working with the",
    "start": "1360520",
    "end": "1366580"
  },
  {
    "text": "c-sharp syntax tree um that we're going to need so this is where the Rosalind apis come in and",
    "start": "1366580",
    "end": "1372020"
  },
  {
    "text": "they've obviously used different names for everywhere else that we've just talked about but as long as you know where to find it you know what you're looking for",
    "start": "1372020",
    "end": "1377960"
  },
  {
    "text": "the program for this is only 55 lines I think most of that is actually parsing the",
    "start": "1377960",
    "end": "1383780"
  },
  {
    "text": "file and using statements so the first part of this program is basically look I want to deserialize from that Json spec",
    "start": "1383780",
    "end": "1390200"
  },
  {
    "text": "file that we've got into some types in.net that represent it so I've got a schema which has a collection schema",
    "start": "1390200",
    "end": "1396919"
  },
  {
    "text": "type the schema type as the type name and the collection of schema property and then we have a type and a name and",
    "start": "1396919",
    "end": "1401960"
  },
  {
    "text": "those are strings in this model so that allows us to get some some objects from in C sharp that represent our structure",
    "start": "1401960",
    "end": "1408500"
  },
  {
    "text": "that we want to generate and then we're going to create this this class declaration syntax array so this",
    "start": "1408500",
    "end": "1414260"
  },
  {
    "text": "is basically one of those syntax nodes or a set of syntax nodes relating to classes and so we do that by accessing",
    "start": "1414260",
    "end": "1420799"
  },
  {
    "text": "all the types on the schema we're going to just do a link select and we're going to use this helper class create class down here to actually create the class",
    "start": "1420799",
    "end": "1427940"
  },
  {
    "text": "declaration syntax so that takes in the class name and any properties that are assigned on that",
    "start": "1427940",
    "end": "1433280"
  },
  {
    "text": "spec so now what we're doing is actually creating a class declaration and rather than newing up the class declaration",
    "start": "1433280",
    "end": "1439760"
  },
  {
    "text": "syntax object itself we're using this method on the syntax Factory and the",
    "start": "1439760",
    "end": "1445820"
  },
  {
    "text": "syntax Factory is I've got a using static here because otherwise your code gets littered with syntax Factory dot",
    "start": "1445820",
    "end": "1451760"
  },
  {
    "text": "all over the place and that gets hard to read so I'm just going to call the factory method here to create a class",
    "start": "1451760",
    "end": "1457460"
  },
  {
    "text": "declaration and it enforces the fact I have to provide an a token as the identifier so this is already giving us",
    "start": "1457460",
    "end": "1463520"
  },
  {
    "text": "some level of sanity checking that we're generating something vaguely valid as a syntax tree if we were just doing text",
    "start": "1463520",
    "end": "1469580"
  },
  {
    "text": "technically you could miss the identifier you probably wouldn't but here we're getting enforced by the syntax tree understanding there's",
    "start": "1469580",
    "end": "1476299"
  },
  {
    "text": "definitely going to be an identifier on the class please give it to me and that's just the class name that we passed in and then by default we're not",
    "start": "1476299",
    "end": "1482900"
  },
  {
    "text": "going to have any modifiers any keywords applied to that declaration so we want to add a modifier here and the modifier",
    "start": "1482900",
    "end": "1488900"
  },
  {
    "text": "is just we're going to attach a token of syntax coin public keyword so a language keyword so this syntax find here",
    "start": "1488900",
    "end": "1495020"
  },
  {
    "text": "contains basically an enumeration of all the keywords we might need from the language so we now have a class declaration and",
    "start": "1495020",
    "end": "1501799"
  },
  {
    "text": "then for every property we're going to add that property as a member so as a node below that class declaration and",
    "start": "1501799",
    "end": "1508640"
  },
  {
    "text": "add members in this case we're creating properties now the important point is this reassignment to the variable so if",
    "start": "1508640",
    "end": "1513740"
  },
  {
    "text": "I take that off for a second that looks valid probably I can't scroll",
    "start": "1513740",
    "end": "1518960"
  },
  {
    "text": "up for some reason that looks valid but the problem is what we're doing here because this is an immutable structure",
    "start": "1518960",
    "end": "1524900"
  },
  {
    "text": "is we're not actually updating what this variable is referencing we're calling ad members and that's returning",
    "start": "1524900",
    "end": "1530480"
  },
  {
    "text": "to us a class declaration syntax which is the new copy the modified version the the With The Changes we want so we have",
    "start": "1530480",
    "end": "1536960"
  },
  {
    "text": "to make sure we reassign that back to our variable otherwise when we split this thing out we won't have any properties",
    "start": "1536960",
    "end": "1542419"
  },
  {
    "text": "to declare a property we need the identify name for the at the type and the identifier for the actual property",
    "start": "1542419",
    "end": "1548480"
  },
  {
    "text": "again we're going to make it public and then we're going to need some accesses so we can get and Set uh the value of this property so in this case I'm using",
    "start": "1548480",
    "end": "1554960"
  },
  {
    "text": "this add accessor list accessors method a bit of a mouthful and I like this one",
    "start": "1554960",
    "end": "1561080"
  },
  {
    "text": "because it takes a params attribute so I can just pass into access the Declarations comma separated here and it",
    "start": "1561080",
    "end": "1568340"
  },
  {
    "text": "will just take those in for me so we're having a get and a set and we have to put in the the grammar and the",
    "start": "1568340",
    "end": "1575059"
  },
  {
    "text": "punctuation so that the semicolon token here of syntax kind semicolon token there are other methods that you've got",
    "start": "1575059",
    "end": "1581900"
  },
  {
    "text": "so there's various with methods so you can create like with access the list but this requires an accessor list syntax",
    "start": "1581900",
    "end": "1587600"
  },
  {
    "text": "which you create through the Factory and then you have to pass it a list so it's a bit more of a bow so I prefer the kind of add methods for kind of tersa code",
    "start": "1587600",
    "end": "1595039"
  },
  {
    "text": "and that's it for declaring the class declaration we're ultimately going to want these in a namespace so I'm now",
    "start": "1595039",
    "end": "1600320"
  },
  {
    "text": "going to use another Factory method to create file scope namespace declaration again I need the identify for that and",
    "start": "1600320",
    "end": "1606919"
  },
  {
    "text": "then to that as child children I can add it the class decorations and now I've defined my syntax tree so I'd like to",
    "start": "1606919",
    "end": "1613880"
  },
  {
    "text": "spit this out so I'm going to create a stream to a file and I'm just going to call right you can call right to on any",
    "start": "1613880",
    "end": "1619340"
  },
  {
    "text": "of the syntax nodes and it will spit out what's below it so if I run this code",
    "start": "1619340",
    "end": "1627580"
  },
  {
    "text": "which is done and we go to the generated code ah not quite what we wanted so we're",
    "start": "1628279",
    "end": "1635120"
  },
  {
    "text": "missing spacing spaces and new lines here we've just got we have got what we asked for we have a public class first",
    "start": "1635120",
    "end": "1641179"
  },
  {
    "text": "class but this is not something the compiler is going to be able to read in and compile once we actually try and",
    "start": "1641179",
    "end": "1646580"
  },
  {
    "text": "compile it later on so why do we have that problem well we didn't actually specify any",
    "start": "1646580",
    "end": "1652220"
  },
  {
    "text": "trivia this code just specifies the nodes and just specifies the tokens we want now it's",
    "start": "1652220",
    "end": "1658760"
  },
  {
    "text": "possible to add trivia like we can do with leading trivia with trailing trivia and then we can attach the trivia that",
    "start": "1658760",
    "end": "1663860"
  },
  {
    "text": "we want that would get quite painful quite quickly and ultimately I don't",
    "start": "1663860",
    "end": "1669080"
  },
  {
    "text": "care too much about the formatting so I'm just going to cheat and I'm going to call this normalize once white space method and so what this does is just",
    "start": "1669080",
    "end": "1675620"
  },
  {
    "text": "apply standard white space rules for where new line should appear after semicolons and braces and you know",
    "start": "1675620",
    "end": "1681679"
  },
  {
    "text": "you're going to have a space after a token a keyword before the identifier that kind of thing and so then if we",
    "start": "1681679",
    "end": "1687980"
  },
  {
    "text": "rerun the code we now get what we're hoping for so we",
    "start": "1687980",
    "end": "1694760"
  },
  {
    "text": "now get our generated c-sharp file it's something a c-sharp compiler can actually compile",
    "start": "1694760",
    "end": "1700520"
  },
  {
    "text": "um now personally I'd love an extra line there because I just like that um but that's not the rules so that's",
    "start": "1700520",
    "end": "1706400"
  },
  {
    "text": "what's generated try not to get too precious over your generated code files um most of the time you're not modifying",
    "start": "1706400",
    "end": "1713120"
  },
  {
    "text": "these things by hand you might debug through them occasionally you might check them when you start code generating to make sure they're giving",
    "start": "1713120",
    "end": "1718940"
  },
  {
    "text": "you what you're expecting but the formatting is not important there are ways to pass like formatters in you can",
    "start": "1718940",
    "end": "1724340"
  },
  {
    "text": "even I think pass in your editor config rules and it can apply those in the formatter that stuff we're not worried",
    "start": "1724340",
    "end": "1729679"
  },
  {
    "text": "about But ultimately we've generated the file so actually one other thing you might be",
    "start": "1729679",
    "end": "1735679"
  },
  {
    "text": "wondering how would you know what the rosin API calls are to generate your c-sharp code and often you don't so I",
    "start": "1735679",
    "end": "1743360"
  },
  {
    "text": "start with this really handy website which is basically where I've lived for like a year Rosalind created",
    "start": "1743360",
    "end": "1748480"
  },
  {
    "text": "azurewebsites.net nice open source project and if I paste in some c-sharp code up here",
    "start": "1748480",
    "end": "1754340"
  },
  {
    "text": "and I click um get the Russian API calls the output here is close to what we wrote by hand",
    "start": "1754340",
    "end": "1762020"
  },
  {
    "text": "you can see by default you know this project just tends to use the with method so you can see with accessor list",
    "start": "1762020",
    "end": "1768320"
  },
  {
    "text": "then we create an accessories then we give it a list which has got an array to populate the list which is weird but",
    "start": "1768320",
    "end": "1774380"
  },
  {
    "text": "ultimately it's giving us an example of all the nodes we need in the structure we need them and the tokens that we're",
    "start": "1774380",
    "end": "1780440"
  },
  {
    "text": "applying to those the modifiers and so you can kind of take this and then slim it down if you if you care to slightly",
    "start": "1780440",
    "end": "1786919"
  },
  {
    "text": "terce a code you can even click to preserve original white space and now if I generate this you get all of the the",
    "start": "1786919",
    "end": "1793880"
  },
  {
    "text": "tokens have a leading and trailing trivia sometimes empty and up here we can see we've got a space after the",
    "start": "1793880",
    "end": "1799279"
  },
  {
    "text": "namespace keyword um and you can see that that was obviously a lot much longer and that's why I don't bother messing around with",
    "start": "1799279",
    "end": "1805039"
  },
  {
    "text": "that stuff myself because I don't care that much about the formatting of my generated files",
    "start": "1805039",
    "end": "1811000"
  },
  {
    "text": "so moving on them um let's think about generating the.net client so we're going",
    "start": "1816020",
    "end": "1821179"
  },
  {
    "text": "to need a spec and so how do you define a specification for something that's quite complex like elasticsearch so I",
    "start": "1821179",
    "end": "1828440"
  },
  {
    "text": "wasn't there when the team started this sort of piece of work so this started I've been elastic nearly two well just",
    "start": "1828440",
    "end": "1834200"
  },
  {
    "text": "over two years actually and this kind of kicked off just before I joined and the team first assessed something like open",
    "start": "1834200",
    "end": "1840020"
  },
  {
    "text": "API this is this is a specification for defining HTTP apis and specifying them",
    "start": "1840020",
    "end": "1847240"
  },
  {
    "text": "ultimately at the time at least open API was a bit too limited elasticsearch is very complex and there would be needing",
    "start": "1847240",
    "end": "1853940"
  },
  {
    "text": "we'd need custom extensions added in there to handle some of the edge case things that we have and the weird polymorphism that some of the requests",
    "start": "1853940",
    "end": "1860779"
  },
  {
    "text": "and response types have ultimately our problems about representing data structures endpoints are quite easy to",
    "start": "1860779",
    "end": "1866899"
  },
  {
    "text": "represent and specify and document the data structures are harder as I say elasticsearch apis sometimes they have",
    "start": "1866899",
    "end": "1873740"
  },
  {
    "text": "unions of the types they might return so a property might come back as a Boolean in some scenarios but sometimes as an",
    "start": "1873740",
    "end": "1880279"
  },
  {
    "text": "integer we need to know that so that the C sharp code can be built to try and handle that problem similarly you know",
    "start": "1880279",
    "end": "1886700"
  },
  {
    "text": "you can send any number of queries when you're doing a search and all of those have different structures that need to",
    "start": "1886700",
    "end": "1893059"
  },
  {
    "text": "represent those but ultimately the server will handle whatever data it gets but we need to model that somehow",
    "start": "1893059",
    "end": "1898940"
  },
  {
    "text": "and the other thing is managing an open API spec for 400 endpoints and over 2000 data structures by hand in yaml or Json",
    "start": "1898940",
    "end": "1906440"
  },
  {
    "text": "um is not going to be that fun the output today is about 180 000 lines so",
    "start": "1906440",
    "end": "1911539"
  },
  {
    "text": "managing that sort of size of specification by hand is probably not a great idea so what the team decided to do is",
    "start": "1911539",
    "end": "1917840"
  },
  {
    "text": "actually let's let's deal with the data structure issue and model our data structures using typescript",
    "start": "1917840",
    "end": "1923480"
  },
  {
    "text": "because it's a static type checking is in there so we can actually kind of make sure that our types make some kind of",
    "start": "1923480",
    "end": "1929840"
  },
  {
    "text": "sense it's a type system built to represent Json JavaScript we have strong ID support for working with it across",
    "start": "1929840",
    "end": "1936500"
  },
  {
    "text": "all the developers no one was sort of against using it in different languages and it has its own compiler apis that",
    "start": "1936500",
    "end": "1942799"
  },
  {
    "text": "you can hook into with libraries like TS morph to do some clever stuff that we'll talk about later so this is ultimately an example of kind",
    "start": "1942799",
    "end": "1950120"
  },
  {
    "text": "of what we've ended up with in terms of defining our types so here we're defining a request this isn't the complete request and you can see we have",
    "start": "1950120",
    "end": "1957080"
  },
  {
    "text": "inheritance so we can say well look there's a bunch of stuff that's on all requests we'll put that in a base class and we can say that this extends that",
    "start": "1957080",
    "end": "1963260"
  },
  {
    "text": "the fact it's just called request it's actually a search request there's a name spacing that we're using to figure out",
    "start": "1963260",
    "end": "1968299"
  },
  {
    "text": "where these requests belong to but we also have meta information that are basically specific tags in the comments",
    "start": "1968299",
    "end": "1974360"
  },
  {
    "text": "so in this case the spec name when that was introduced in the server API is it a",
    "start": "1974360",
    "end": "1979399"
  },
  {
    "text": "stable endpoint and then we have to define basically three main things about the request the things that could appear",
    "start": "1979399",
    "end": "1985760"
  },
  {
    "text": "in the URL path the things that can appear on the query string and the things that might appear in the body and we have separate objects to represent",
    "start": "1985760",
    "end": "1992840"
  },
  {
    "text": "these so here for the path we have an optional index that can be passed in so when you do a search you can either",
    "start": "1992840",
    "end": "1998659"
  },
  {
    "text": "search everything and just going underscore search or you can provide the index name or a set of indices that you",
    "start": "1998659",
    "end": "2005320"
  },
  {
    "text": "want to search against and limit your search results and so that's optional on the path and so we Define that with an",
    "start": "2005320",
    "end": "2011320"
  },
  {
    "text": "optional property here with the the question mark and then we Define a type for that so this is indices which is",
    "start": "2011320",
    "end": "2017019"
  },
  {
    "text": "actually a union of index name or index name array the reason we have to be very specific there you might think well we",
    "start": "2017019",
    "end": "2023260"
  },
  {
    "text": "could just use the array can't we but the problem is on some of the responses we might get back either a string or an",
    "start": "2023260",
    "end": "2029380"
  },
  {
    "text": "array containing strings to represent uh the result of some index on that response body and so we Define it very",
    "start": "2029380",
    "end": "2035919"
  },
  {
    "text": "explicitly to say what exact data types we might expect in all scenarios and then we also have like index name here",
    "start": "2035919",
    "end": "2041799"
  },
  {
    "text": "is basically an alias over a string that gives us kind of a strong name for that string type that's used across our code",
    "start": "2041799",
    "end": "2047919"
  },
  {
    "text": "in our typescript model But ultimately it's just representing a string",
    "start": "2047919",
    "end": "2053200"
  },
  {
    "text": "on the body some of the things that are interesting here so we have a property opt to find on the body for aggregations",
    "start": "2053200",
    "end": "2059460"
  },
  {
    "text": "don't worry about the typing of that for now but the interesting thing is that we have this Alias so when you actually",
    "start": "2059460",
    "end": "2065440"
  },
  {
    "text": "send a search request for elasticsearch you can send it aggregations optionally and you can use aggregations as the",
    "start": "2065440",
    "end": "2071138"
  },
  {
    "text": "property name in the Json you can also call it ads and the server will deal with that on the way out that's not a problem for us because we can choose",
    "start": "2071139",
    "end": "2077260"
  },
  {
    "text": "which we use but if the server returns as a query in any of the data structures it might choose one or the other of",
    "start": "2077260",
    "end": "2083440"
  },
  {
    "text": "those names so we have to again in the c-sharp code base we have to have a custom serializer that says okay I'm",
    "start": "2083440",
    "end": "2088780"
  },
  {
    "text": "looking for either ads or aggregations and that binds to this property ultimately",
    "start": "2088780",
    "end": "2093878"
  },
  {
    "text": "um so we have to declare that information in the spec we also put like documentation information into the spec here and then that can be picked up by",
    "start": "2093879",
    "end": "2101500"
  },
  {
    "text": "the language clients to include their own documentation where it's relevant um a response is interesting because we",
    "start": "2101500",
    "end": "2107500"
  },
  {
    "text": "have user provided types a response is going to take contain generally search results which will",
    "start": "2107500",
    "end": "2113260"
  },
  {
    "text": "include the documents that you've matched and those documents are the things that the user indexed so we don't know what the the structure of those is",
    "start": "2113260",
    "end": "2120040"
  },
  {
    "text": "we know what our request sorry our response body is going to have in terms of fixed properties but we need the",
    "start": "2120040",
    "end": "2125859"
  },
  {
    "text": "generic system in typescript to represent there might be this other sort of user provided thing and so ultimately",
    "start": "2125859",
    "end": "2131859"
  },
  {
    "text": "the hits on the response body here is this type hits metadata of T another interesting thing in here is",
    "start": "2131859",
    "end": "2138040"
  },
  {
    "text": "total is pain because again depending on how you've configured your request you might get back an object that contains",
    "start": "2138040",
    "end": "2143740"
  },
  {
    "text": "some properties the total hits object or you might get it back along so this is yet another case where we need to know",
    "start": "2143740",
    "end": "2149079"
  },
  {
    "text": "that as a a language client to be able to deserialize either option depending on what we're given and there's no way",
    "start": "2149079",
    "end": "2155440"
  },
  {
    "text": "of knowing up front in all cases because some of these things are controlled by server-side configs as well hits here",
    "start": "2155440",
    "end": "2161440"
  },
  {
    "text": "hits of T um you can see there where this applies is in the source so if you get a hit a",
    "start": "2161440",
    "end": "2167140"
  },
  {
    "text": "result back we have some fixed information the server is always going to include and then if you've asked for it the source which will be this T",
    "start": "2167140",
    "end": "2173380"
  },
  {
    "text": "document and we can convert that into C sharp quite nicely to generics as well and then when you do a search request as",
    "start": "2173380",
    "end": "2179560"
  },
  {
    "text": "a generic argument you tell us what the type is You're Expecting for your results and then you just um we can do serialize",
    "start": "2179560",
    "end": "2185619"
  },
  {
    "text": "that for you using our source serializer uh this is another interesting concept",
    "start": "2185619",
    "end": "2191440"
  },
  {
    "text": "we had to come up with was how to model those polymorphic scenarios where something can be sent in multiple forms",
    "start": "2191440",
    "end": "2196780"
  },
  {
    "text": "or maybe received back for queries what we've done is model this as a kind of container and basically the container",
    "start": "2196780",
    "end": "2203320"
  },
  {
    "text": "lists all of the possible strongly typed queries that elasticsearch supports and",
    "start": "2203320",
    "end": "2209140"
  },
  {
    "text": "then we Mark that with this attribute here that says this is a container and it's going to contain all the variants that we could possibly send up and then",
    "start": "2209140",
    "end": "2216280"
  },
  {
    "text": "the language clients are free to do with this information what they will they have to come up with a language structure that makes sense in the",
    "start": "2216280",
    "end": "2222700"
  },
  {
    "text": "language to represent that and how you work with It ultimately in C sharp we still end up with this container object",
    "start": "2222700",
    "end": "2227880"
  },
  {
    "text": "and it takes one of these queries that it's going to contain and we just constrain them by a base class to say",
    "start": "2227880",
    "end": "2234940"
  },
  {
    "text": "all of these things are valid in that inside that container now the other important thing we've got",
    "start": "2234940",
    "end": "2240400"
  },
  {
    "text": "to do is validate this spec we've generated this massive typescript specification and we've modeled it and",
    "start": "2240400",
    "end": "2245560"
  },
  {
    "text": "we've got all the strong typing in there to make sure you know all of that logically makes sense as a model but how",
    "start": "2245560",
    "end": "2250660"
  },
  {
    "text": "do we make sure it works with elasticsearch and so for that we hooked into the integration tests so ultimately we have this thing called a flight",
    "start": "2250660",
    "end": "2256420"
  },
  {
    "text": "recorder that we run and we run the integration tests and then we just capture all the requests and respond to Json for every test to every endpoint",
    "start": "2256420",
    "end": "2263079"
  },
  {
    "text": "and then ultimately what we can do is just check that those serialize and deserialize to and from our typescript",
    "start": "2263079",
    "end": "2268960"
  },
  {
    "text": "types so if if we get a response that has a property on it that we haven't defined in our model then we get an",
    "start": "2268960",
    "end": "2275079"
  },
  {
    "text": "alert and we can go and fix it and so we get a lot of tests for free and we don't have to think too hard about the problem because the elasticsearch team will",
    "start": "2275079",
    "end": "2281200"
  },
  {
    "text": "create the integration tests as they add features and this runs as part of PR so if you do",
    "start": "2281200",
    "end": "2286660"
  },
  {
    "text": "a PR to the specification repo here cess modified the user profile and it detects",
    "start": "2286660",
    "end": "2292300"
  },
  {
    "text": "all of the endpoints where that might be used somewhere in the request and response below and so you can see for example security is your authenticate",
    "start": "2292300",
    "end": "2298780"
  },
  {
    "text": "has 15 recorded requests and responses for different test scenarios that will give us different examples of valid",
    "start": "2298780",
    "end": "2304900"
  },
  {
    "text": "requests and response bodies and so it's checked that that type is still can serialized to and from those",
    "start": "2304900",
    "end": "2312700"
  },
  {
    "text": "then we need to generate the spec we've got the typescript model but how do we create the spec now in theory we could",
    "start": "2312700",
    "end": "2318760"
  },
  {
    "text": "generate the types the the c-sharp code from the typescript by using the typescript apis to access their abstract",
    "start": "2318760",
    "end": "2325720"
  },
  {
    "text": "syntax tree and then generate our code ultimately that's quite low level",
    "start": "2325720",
    "end": "2330820"
  },
  {
    "text": "and the main problem is it's not fully constrained different language clients and different authors of those",
    "start": "2330820",
    "end": "2336940"
  },
  {
    "text": "generators might infer different things from the syntax Tree in a different way and that's not ideal if you're trying to",
    "start": "2336940",
    "end": "2342400"
  },
  {
    "text": "generate consistent clients so we decided what we would do is transform that typescript to a simpler",
    "start": "2342400",
    "end": "2347619"
  },
  {
    "text": "specification tailor made for our needs and unambiguous",
    "start": "2347619",
    "end": "2353099"
  },
  {
    "text": "so this is kind of our Cogen pipeline we have all the typescript files in our sort of project for the typescript and",
    "start": "2353140",
    "end": "2359560"
  },
  {
    "text": "then we have this thing called the spec compiler so traditionally typescript would compile to JavaScript what we do",
    "start": "2359560",
    "end": "2365079"
  },
  {
    "text": "is we hook in through that TS morph library that I touched on earlier and we accessed the syntax tree and then we",
    "start": "2365079",
    "end": "2370720"
  },
  {
    "text": "basically inspect that and go okay well this is the Json structure we want to produce for our schema and so that's",
    "start": "2370720",
    "end": "2377920"
  },
  {
    "text": "ultimately what the output is for our spec compiler it's our single schema.json file that lists all of the",
    "start": "2377920",
    "end": "2383320"
  },
  {
    "text": "possible endpoints and then also all of those data structures and the annotations that go with them",
    "start": "2383320",
    "end": "2390099"
  },
  {
    "text": "so from there we can create our code generators so I'm created a.net code generator that spits out most of the.net",
    "start": "2390099",
    "end": "2396579"
  },
  {
    "text": "client the other language clients are doing the same for theirs the dynamic people have got a great time because",
    "start": "2396579",
    "end": "2401920"
  },
  {
    "text": "they don't have to worry about the typing so much the Java go and c-sharp people we're having to think a bit",
    "start": "2401920",
    "end": "2407140"
  },
  {
    "text": "harder about how we model these structures and some of these Concepts in in our languages now I have some history",
    "start": "2407140",
    "end": "2413200"
  },
  {
    "text": "with the previous clients and I've tried to apply that most of the time but we've also had the opportunity to rethink some",
    "start": "2413200",
    "end": "2418960"
  },
  {
    "text": "of these things and how we model them and also we've had to make decisions around standardization in terms of the",
    "start": "2418960",
    "end": "2424780"
  },
  {
    "text": "code generator is going to have to do this thing once for for this concept so making sure it applies and works in all cases",
    "start": "2424780",
    "end": "2430960"
  },
  {
    "text": "the other interesting thing we could do and we're starting to play around with is we have an hour and open API generator that takes our schema.json",
    "start": "2430960",
    "end": "2437800"
  },
  {
    "text": "format and spits out an open API spec and then teams within elasticsearch that want to work with open API can build",
    "start": "2437800",
    "end": "2444040"
  },
  {
    "text": "like API documentation off of that spec the exciting idea is that we could even generate some of the server-side code",
    "start": "2444040",
    "end": "2450460"
  },
  {
    "text": "because if we get entirely schema driven and we agree up from what the specification for endpoints is going to",
    "start": "2450460",
    "end": "2456280"
  },
  {
    "text": "look like and how we're going to type them in our typescript model we build the schema.json and that's our single",
    "start": "2456280",
    "end": "2461920"
  },
  {
    "text": "source of Truth For What elasticsearches API should look like so we generate the clients but we can also generate the",
    "start": "2461920",
    "end": "2467260"
  },
  {
    "text": "endpoints on the server and their models and that would get us to a really nice place where consistency wise we should",
    "start": "2467260",
    "end": "2473560"
  },
  {
    "text": "always be consistent and if we're wrong we're wrong everywhere at least",
    "start": "2473560",
    "end": "2478380"
  },
  {
    "text": "um quick demo of schema.json we won't die as I say it's like 180 000 lines of code we probably don't have time to look",
    "start": "2478660",
    "end": "2484359"
  },
  {
    "text": "at all of it um I've grabbed two examples so if we go to line",
    "start": "2484359",
    "end": "2491040"
  },
  {
    "text": "9840 of the schema we'll see the definition for our search",
    "start": "2491040",
    "end": "2497440"
  },
  {
    "text": "endpoint so this is that same endpoint that we've been talking about so far so you can see the name here we get all",
    "start": "2497440",
    "end": "2503260"
  },
  {
    "text": "that meta information so if we've attached the documentation URL the description we have the types for the",
    "start": "2503260",
    "end": "2508660"
  },
  {
    "text": "request and response so you can see all of the types come out into the spec with an actual namespace so we don't have any clashes so this is why we don't name",
    "start": "2508660",
    "end": "2515619"
  },
  {
    "text": "this thing search request in the spec in our model uh we can see you know does it require a",
    "start": "2515619",
    "end": "2521920"
  },
  {
    "text": "body no it takes application Json it returns application Json it's been there since the day one it's stable and it has",
    "start": "2521920",
    "end": "2529119"
  },
  {
    "text": "two URL paths that could potentially match for it because we have that optional index on our skip specification",
    "start": "2529119",
    "end": "2534820"
  },
  {
    "text": "if you don't provide that when you you build up your request then obviously you're searching everything here with that URL but otherwise we need to apply",
    "start": "2534820",
    "end": "2541839"
  },
  {
    "text": "it so the language clients have to know all the URLs and they have to know if properties are set on their whatever however they've modeled a request if the",
    "start": "2541839",
    "end": "2548680"
  },
  {
    "text": "properties are set for that that Define the the indices that you want to search against we have to use this other URL",
    "start": "2548680",
    "end": "2555040"
  },
  {
    "text": "so that's that part of the spec if we jump down even deeper we'll get to the",
    "start": "2555040",
    "end": "2560740"
  },
  {
    "text": "um search request and again this is itself is is quite big so I'm going to look at",
    "start": "2560740",
    "end": "2566680"
  },
  {
    "text": "the whole thing but ultimately the object starts about here and and the top part of this defines its body properties",
    "start": "2566680",
    "end": "2572079"
  },
  {
    "text": "so to align with what we saw in the example code earlier on there's that aggregations",
    "start": "2572079",
    "end": "2577920"
  },
  {
    "text": "property that is available we have a list of any potential aliases that the clients can then decide how they handle",
    "start": "2577920",
    "end": "2584319"
  },
  {
    "text": "aliasing if they need to this property isn't required on a search and then we have the type information so in this",
    "start": "2584319",
    "end": "2590380"
  },
  {
    "text": "case this type is a dictionary of and the key for this is an instance of",
    "start": "2590380",
    "end": "2595420"
  },
  {
    "text": "string and the result sorry the value is an instance of that aggregation container so we looked at query",
    "start": "2595420",
    "end": "2601119"
  },
  {
    "text": "container aggregation contain a very similar concept we have many possible aggregation types that you can send in",
    "start": "2601119",
    "end": "2606700"
  },
  {
    "text": "and the container basically is a way of constraining that to all of the possible built-in types that we could represent",
    "start": "2606700",
    "end": "2613180"
  },
  {
    "text": "an aggregation with and that ultimately is what that entire file contains just for all of those 400",
    "start": "2613180",
    "end": "2619980"
  },
  {
    "text": "endpoints and types that we have",
    "start": "2619980",
    "end": "2624000"
  },
  {
    "text": "eventually so in terms of net code generation",
    "start": "2627339",
    "end": "2632980"
  },
  {
    "text": "um our first job is deserialize Jason pretty easy then I do a phase where I'm essentially doing what I call building the context",
    "start": "2632980",
    "end": "2639280"
  },
  {
    "text": "so the the Json file contains everything we should need to know about the elasticsearch API and its types but it",
    "start": "2639280",
    "end": "2645460"
  },
  {
    "text": "doesn't have enough information for me just to generate blindly I have to do some sort of modifications and understanding of what",
    "start": "2645460",
    "end": "2652240"
  },
  {
    "text": "that means to see what's valid for C sharp and we'll talk specifically about what this I call the marketing Rich",
    "start": "2652240",
    "end": "2658000"
  },
  {
    "text": "phase because it sounds fun and I'll talk through what that actually does to that is sort of applying stuff to those",
    "start": "2658000",
    "end": "2664599"
  },
  {
    "text": "contacts But ultimately once we've got all of these contacts for every type we're going to generate we can do what",
    "start": "2664599",
    "end": "2670240"
  },
  {
    "text": "we've just seen before just on a slightly more complex level and build up a syntax tree using those rules within",
    "start": "2670240",
    "end": "2675640"
  },
  {
    "text": "apis we just build a syntax tree for each type that we're going to generate and we emit a file or set of files",
    "start": "2675640",
    "end": "2681640"
  },
  {
    "text": "potentially out to the project that we're generating into",
    "start": "2681640",
    "end": "2687099"
  },
  {
    "text": "so some of the things we have to think about so one of the important things is naming a name spaces it's possible the",
    "start": "2687099",
    "end": "2693400"
  },
  {
    "text": "typescript model includes names for types that are not valid in C sharp because they can flick with a keyword or",
    "start": "2693400",
    "end": "2698859"
  },
  {
    "text": "whatever else there's often the cases where some of those types have underscores and different casing",
    "start": "2698859",
    "end": "2703900"
  },
  {
    "text": "potentially as well um and so we have to make basically sanitize the naming of all the types",
    "start": "2703900",
    "end": "2710260"
  },
  {
    "text": "um sometimes we can do that on a rule-based basis sometimes we just have like configuration as code that says",
    "start": "2710260",
    "end": "2715359"
  },
  {
    "text": "rename this thing on this type to that because it makes more sense um also we have to think about",
    "start": "2715359",
    "end": "2720400"
  },
  {
    "text": "namespacing we don't want a namespace that says undersall Global in C sharp I think it would be unhappy we want it to",
    "start": "2720400",
    "end": "2726460"
  },
  {
    "text": "be in our root project namespace for our assembly um in that scenario and then we do",
    "start": "2726460",
    "end": "2731640"
  },
  {
    "text": "introduce namespacing in the c-sharp library to avoid type name conflicts but",
    "start": "2731640",
    "end": "2737079"
  },
  {
    "text": "we've tried to limit the depth of that so in the typescript model the depth can get quite quite far down I think you could have like dot five times for",
    "start": "2737079",
    "end": "2743920"
  },
  {
    "text": "different parts of the namespace we try and bring that to a more sane level of less namespaces so if you're using the",
    "start": "2743920",
    "end": "2749619"
  },
  {
    "text": "different parts of elasticsearch apis you'd have to bring in lots of using declarations for them we also walk the",
    "start": "2749619",
    "end": "2755680"
  },
  {
    "text": "type type hierarchy so looking at the base types to find in the spec the base types in this in the typescript model",
    "start": "2755680",
    "end": "2762040"
  },
  {
    "text": "are there as a convenience for us not to have to retype all the properties on every request they don't represent an",
    "start": "2762040",
    "end": "2768160"
  },
  {
    "text": "actual construct on the server necessarily because the server May model that differently so what we've decided",
    "start": "2768160",
    "end": "2773380"
  },
  {
    "text": "to do in most of the strongly typed languages is actually just flatten all the properties from all those base types",
    "start": "2773380",
    "end": "2779440"
  },
  {
    "text": "onto the search request in this case for example so that request Base Class just contains some properties we hoist up",
    "start": "2779440",
    "end": "2785500"
  },
  {
    "text": "logically inside our kind of context we have to identify the relationships so we resolve all those schema namespace names",
    "start": "2785500",
    "end": "2792160"
  },
  {
    "text": "we have to identify okay well this property has this type and that's this c-sharp object over here that we've",
    "start": "2792160",
    "end": "2797260"
  },
  {
    "text": "pulled from the from the specification and deserialized and how they interrelate so we can navigate those relationships in any direction",
    "start": "2797260",
    "end": "2803920"
  },
  {
    "text": "we Mark all the request types so anything that's used on the request you're going to need to be able to modify it and set its properties because",
    "start": "2803920",
    "end": "2809980"
  },
  {
    "text": "your you know consumers are configuring the request they want to send response types we don't expect you to modify",
    "start": "2809980",
    "end": "2815380"
  },
  {
    "text": "those so we make them basically read only and we deserialize them and give them to you we also Mark all those",
    "start": "2815380",
    "end": "2821680"
  },
  {
    "text": "special Concepts those containers the variants we also have something called internally tagged unions which is",
    "start": "2821680",
    "end": "2826960"
  },
  {
    "text": "another way of representing the polymorphic Json we might get back and ultimately we also want to simplify",
    "start": "2826960",
    "end": "2833440"
  },
  {
    "text": "some of those type aliases so where we had like index name is an alias for string that one we actually keep because",
    "start": "2833440",
    "end": "2838720"
  },
  {
    "text": "we have some special logic around the index name but that's used a lot in the typescript model and many of those we",
    "start": "2838720",
    "end": "2844119"
  },
  {
    "text": "don't want our users to have to basically we'd have to create a type a class or a struct that wraps a string in",
    "start": "2844119",
    "end": "2849819"
  },
  {
    "text": "order to model that and then you'd have to construct that through like a Constructor or something or we give you",
    "start": "2849819",
    "end": "2854859"
  },
  {
    "text": "implicit operators that's a pain to work with and it's hard to reason about so we just simplify those to whatever they",
    "start": "2854859",
    "end": "2861220"
  },
  {
    "text": "aliased to the string or the integer in the properties that we're generating to make working with the API a bit easier",
    "start": "2861220",
    "end": "2867579"
  },
  {
    "text": "and then we also Mark some some types that need special serialization so the bulk API takes new lines are limited",
    "start": "2867579",
    "end": "2873760"
  },
  {
    "text": "Json not just a standard Json structure and so we have to know that that that's going to need custom serialization logic",
    "start": "2873760",
    "end": "2879940"
  },
  {
    "text": "that we're going to create and so we basically stub that out and then we can manually manage that code ourselves in",
    "start": "2879940",
    "end": "2885160"
  },
  {
    "text": "the in the client so what does our generator code look like pretty much what we saw in the demo earlier on just slightly bigger amounts",
    "start": "2885160",
    "end": "2892660"
  },
  {
    "text": "of code scattered throughout my generator so when you see a request on our type",
    "start": "2892660",
    "end": "2899020"
  },
  {
    "text": "or the type in RM schema that's one type but in C sharp we're going to generate",
    "start": "2899020",
    "end": "2904480"
  },
  {
    "text": "probably at least four classes from for that we generate a class that represents all of the query string parameters we",
    "start": "2904480",
    "end": "2909880"
  },
  {
    "text": "call that the request parameter class and that's what the code you're seeing here we also generate the request class itself that models the body of a request",
    "start": "2909880",
    "end": "2917319"
  },
  {
    "text": "and then because we have another Syntax for fluently defining requests in elasticsearch we generate what we call",
    "start": "2917319",
    "end": "2923260"
  },
  {
    "text": "descriptors which is how our fluent syntax is put together and that will usually have a non-generic and a generic",
    "start": "2923260",
    "end": "2929380"
  },
  {
    "text": "version for reasons for when you're working with those in different ways in the in the API so here we're doing a",
    "start": "2929380",
    "end": "2934960"
  },
  {
    "text": "class declaration for the request parameter class from the context we get the name we add the modifiers we can add",
    "start": "2934960",
    "end": "2940060"
  },
  {
    "text": "a base type and then ultimately we'll create properties for each of its query string parameters to find and we add",
    "start": "2940060",
    "end": "2946540"
  },
  {
    "text": "that that adds class there just adds it to our root namespace declaration",
    "start": "2946540",
    "end": "2951640"
  },
  {
    "text": "um we also then need to figure out what Constructors we're going to need on the request so we saw a request had an optional path parameter sometimes",
    "start": "2951640",
    "end": "2958240"
  },
  {
    "text": "requests have a required one and if you have a required one what we do is generate a Constructor that enforces that so that consumers can only create a",
    "start": "2958240",
    "end": "2964900"
  },
  {
    "text": "request with the required path parameters so we do all of that sort of analysis up front and then ultimately",
    "start": "2964900",
    "end": "2970480"
  },
  {
    "text": "we're generating again another class declaration for the request class we add all of our various members the",
    "start": "2970480",
    "end": "2976240"
  },
  {
    "text": "constructors some common properties a property that maps to the generic argument it's query between parameters",
    "start": "2976240",
    "end": "2983020"
  },
  {
    "text": "and then the body properties and so body properties here is using essentially my own syntax Factory which",
    "start": "2983020",
    "end": "2989079"
  },
  {
    "text": "helps me create this serializable property syntax so I take in a property here which is basically what represents",
    "start": "2989079",
    "end": "2995200"
  },
  {
    "text": "a property in my contacts I do some type name resolution to find out what the fully qualified name of the type is so",
    "start": "2995200",
    "end": "3000900"
  },
  {
    "text": "rather than figuring out what using declarations each file is going to need I generally just use the fully qualified name of the type where we're declaring",
    "start": "3000900",
    "end": "3007980"
  },
  {
    "text": "properties and things like that so once I have that information I can create the property property declaration we can add",
    "start": "3007980",
    "end": "3014040"
  },
  {
    "text": "any attributes that are needed for system text Json so the Json include the Json property name and we get all of the",
    "start": "3014040",
    "end": "3020819"
  },
  {
    "text": "property names off of the spec if it's used in the request we add a getter and a Setter otherwise we don't",
    "start": "3020819",
    "end": "3026640"
  },
  {
    "text": "and that's that's pretty much it for our code generator so let's now think about what I've",
    "start": "3026640",
    "end": "3033839"
  },
  {
    "text": "learned through this process and what I would do differently so we have a working code generator that's generating not all of the endpoints yet mostly",
    "start": "3033839",
    "end": "3040500"
  },
  {
    "text": "through for the fact that we haven't spent the time testing everything looks good but we have a working generator but",
    "start": "3040500",
    "end": "3046619"
  },
  {
    "text": "it was put together rather rapidly through evolving knowledge because we were defining the spec as we went we",
    "start": "3046619",
    "end": "3053339"
  },
  {
    "text": "were fixing problems we were coming up with other constructs in the the model for elastic searches data structures",
    "start": "3053339",
    "end": "3059940"
  },
  {
    "text": "that we needed to somehow specify and so we often found ourselves kind of having to adjust based on new things we were",
    "start": "3059940",
    "end": "3066420"
  },
  {
    "text": "adding to the spec or even new kind of things like those variants um and so as I've gone it's got a bit",
    "start": "3066420",
    "end": "3072839"
  },
  {
    "text": "spaghetti code um you know we all try and write clean code but this is a bit of a mess so it needs refactory",
    "start": "3072839",
    "end": "3078660"
  },
  {
    "text": "um and also I've understood where the various things are that you need to customize in this because ultimately",
    "start": "3078660",
    "end": "3084119"
  },
  {
    "text": "what I'd like to do is productize this so we can get maybe an open API spec or another schema.json file for a different",
    "start": "3084119",
    "end": "3090240"
  },
  {
    "text": "product and then spit out of a working client but right now it has a little too",
    "start": "3090240",
    "end": "3095520"
  },
  {
    "text": "much knowledge built into the code about elasticsearch and some special edge cases so what I'd like to do is add like a",
    "start": "3095520",
    "end": "3102599"
  },
  {
    "text": "plugable transform pipeline to this thing that basically takes you know a set of defined Json files that could",
    "start": "3102599",
    "end": "3108599"
  },
  {
    "text": "represent how we would take the spec and then transform it so this would be things like renaming those properties that conflict we'd have a you know a",
    "start": "3108599",
    "end": "3115619"
  },
  {
    "text": "rename transform that you'd read in and it would tell us what to rename and so at this level we really just tweaking",
    "start": "3115619",
    "end": "3121559"
  },
  {
    "text": "the spec that we've just read from Jason it could include things like skipping certain Properties or adding other properties and so I'm thinking you",
    "start": "3121559",
    "end": "3129180"
  },
  {
    "text": "probably have an eye Transformer and then you plug those in through Di and most of them will read out really in",
    "start": "3129180",
    "end": "3134520"
  },
  {
    "text": "Json input similarly for working out what we're actually going to generate right now it's just kind of a an allow and deny",
    "start": "3134520",
    "end": "3140520"
  },
  {
    "text": "list in code that kind of says yeah these are the endpoints I want to print out we can make that more intelligent",
    "start": "3140520",
    "end": "3146220"
  },
  {
    "text": "with a similar concept some kind of filter pipeline so we can say well have a filter that says we only want to generate endpoints that have been",
    "start": "3146220",
    "end": "3152220"
  },
  {
    "text": "available up and or since this version or before this version we only want to",
    "start": "3152220",
    "end": "3157619"
  },
  {
    "text": "generate stable endpoints or we want to generate you know this specific allow list of endpoints and ultimately I want to make this thing",
    "start": "3157619",
    "end": "3164160"
  },
  {
    "text": "it's something that we can kind of hand off to other teams that makes it easier for non-developers in those teams to configure it through Json files rather",
    "start": "3164160",
    "end": "3170280"
  },
  {
    "text": "than having to kind of figure out what's what's going on I want to kind of hide all the complexity of Rosalind for them",
    "start": "3170280",
    "end": "3177300"
  },
  {
    "text": "and the really cool thing that I I haven't had a chance to play around with that I think would be really good and useful is to actually look at getting",
    "start": "3177300",
    "end": "3184140"
  },
  {
    "text": "more intelligent with this so part of the reason I chose the rosin apis is there's a lot more you can do with it",
    "start": "3184140",
    "end": "3189440"
  },
  {
    "text": "including working with something called the workspace apis so the workspace apis",
    "start": "3189440",
    "end": "3195200"
  },
  {
    "text": "basically give us a way to hook into like Solutions and projects so there's",
    "start": "3195200",
    "end": "3200220"
  },
  {
    "text": "an MS build workspace that you can load up and you pass in a solution location and then you can access the solution and",
    "start": "3200220",
    "end": "3206400"
  },
  {
    "text": "then you can navigate through to see okay that solution has these projects and it has these source files or these",
    "start": "3206400",
    "end": "3212099"
  },
  {
    "text": "documents and then you find all of the c-sharp documents and then you could basically build up the syntax tree and the semantic analysis for everything",
    "start": "3212099",
    "end": "3218579"
  },
  {
    "text": "that's in there essentially within that compilation and then we can take the knowledge about what we're about to",
    "start": "3218579",
    "end": "3223800"
  },
  {
    "text": "generate and you and kind of dip it basically so today what the co-donator does is it obliterates the generated",
    "start": "3223800",
    "end": "3230460"
  },
  {
    "text": "folder in the project and it rewrites every every file for every part of the spec that it's generating which is",
    "start": "3230460",
    "end": "3236880"
  },
  {
    "text": "pretty low Tech but what we could do is say well okay I'm about to generate this type I know I'm going to have these",
    "start": "3236880",
    "end": "3241920"
  },
  {
    "text": "properties can you find this type is that a symbol that's already in this project okay it is but it's missing",
    "start": "3241920",
    "end": "3248099"
  },
  {
    "text": "these properties so we're going to be just adding those and that's where we can basically modify the syntax tree so create a new copy of",
    "start": "3248099",
    "end": "3254940"
  },
  {
    "text": "the syntax tree from that node With The Changes applied reapply that into the workspace and then have it emit out the",
    "start": "3254940",
    "end": "3261059"
  },
  {
    "text": "changes to c-sharp files so we're not obliterating everything every time because right now I have to basically get diff on the elasticsearch client",
    "start": "3261059",
    "end": "3267480"
  },
  {
    "text": "after I've run the generator and go okay it's added this stuff the important thing is we'd want to detect breaking changes if someone",
    "start": "3267480",
    "end": "3273420"
  },
  {
    "text": "removes a property from the spec what do we want to do in C sharp do we want to remove the property and introduce a",
    "start": "3273420",
    "end": "3278819"
  },
  {
    "text": "breaking change or do we want to maybe preserve it and decide that we put a sort of deprecated uh obsolete attribute",
    "start": "3278819",
    "end": "3284579"
  },
  {
    "text": "on it or something the other thing we could potentially do once we have access to this level of the",
    "start": "3284579",
    "end": "3290520"
  },
  {
    "text": "code because we understand the full project we could actually then in memory compile the whole project and we could",
    "start": "3290520",
    "end": "3296040"
  },
  {
    "text": "check that what we've generated is actually compilable because right now again I run the code generator I switch",
    "start": "3296040",
    "end": "3301680"
  },
  {
    "text": "to my other Visual Studio instance that has the client I do the git DF check what's changed and then I say compile it",
    "start": "3301680",
    "end": "3307619"
  },
  {
    "text": "and say okay yeah great it's worked you know that's manual it's not ideal we could automate all of this through the",
    "start": "3307619",
    "end": "3313800"
  },
  {
    "text": "workspace apis potentially and then we can just have basically a GitHub action that says generate this version of the spec please and then give me a PR that",
    "start": "3313800",
    "end": "3321119"
  },
  {
    "text": "introduces those changes that's kind of where I want to get to this thing",
    "start": "3321119",
    "end": "3326900"
  },
  {
    "text": "um resources so I'm pretty much done um the link to the slides again uh",
    "start": "3327180",
    "end": "3333660"
  },
  {
    "text": "writing Cobra code on the bitly there so if you grab that you get all the slides you get all the links I'm about to show you uh the demos I've showed you on my",
    "start": "3333660",
    "end": "3340559"
  },
  {
    "text": "GitHub repo they're not particularly exciting but if you want to have a look at them you can this is the the Microsoft page for the",
    "start": "3340559",
    "end": "3347220"
  },
  {
    "text": "rules and stuff so you can see here it's referred to as Rosalind which I think is better Roslyn quota definitely your",
    "start": "3347220",
    "end": "3353099"
  },
  {
    "text": "friend if you're doing this kind of stuff for just taking what you've already got or you know you prototype",
    "start": "3353099",
    "end": "3358319"
  },
  {
    "text": "what the c-sharp is that you're going to generate and then you go back to the Ross and Coast to get the rosin API",
    "start": "3358319",
    "end": "3363660"
  },
  {
    "text": "calls you need simplify them down a bit and ultimately package that up as your code generator if you want to look at",
    "start": "3363660",
    "end": "3369180"
  },
  {
    "text": "the result of this kind of stuff if you go to our elasticsearch client repo and go to the dot generated folder in there",
    "start": "3369180",
    "end": "3376680"
  },
  {
    "text": "um underscore generated folder in there you can find all of the generated files if you're curious what the ones we're",
    "start": "3376680",
    "end": "3382920"
  },
  {
    "text": "generating look like so far and I'll spec is public as well so if you want to view that specification typescripts and",
    "start": "3382920",
    "end": "3390000"
  },
  {
    "text": "and if you want to contribute or just kind of see what we're doing in there you can go and view that and that includes all of our custom compiler",
    "start": "3390000",
    "end": "3396599"
  },
  {
    "text": "stuff I think in there as well the co-generative donor is not public I'm afraid so you're just going to have",
    "start": "3396599",
    "end": "3402960"
  },
  {
    "text": "to go on what I've shown you so far um once it gets more uh refactored and",
    "start": "3402960",
    "end": "3408960"
  },
  {
    "text": "productized for other teams internally you know maybe we'll be able to release that as well and make that open but right now it's kind of intrinsically",
    "start": "3408960",
    "end": "3415200"
  },
  {
    "text": "tied to what we're doing and it's a mess so you're not going to see it um with that thank you very much for",
    "start": "3415200",
    "end": "3420480"
  },
  {
    "text": "coming I hope this has been useful maybe interesting or just a good place to nap after lunch otherwise uh you know find",
    "start": "3420480",
    "end": "3428400"
  },
  {
    "text": "me online if you have any questions that pop up I'm going to clear the way for the next speaker but if you want to hang around for questions afterwards uh yeah",
    "start": "3428400",
    "end": "3435540"
  },
  {
    "text": "come and find me thank you",
    "start": "3435540",
    "end": "3438680"
  }
]