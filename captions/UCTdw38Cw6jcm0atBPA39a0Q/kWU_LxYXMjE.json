[
  {
    "text": "good afternoon and welcome for the first after lunch talk of the conference who",
    "start": "3470",
    "end": "11960"
  },
  {
    "text": "attended that another talk on streams it's I think data streams for fun and",
    "start": "11960",
    "end": "17880"
  },
  {
    "text": "profit by David Ostrovsky earlier today yeah if you odd David presented",
    "start": "17880",
    "end": "26240"
  },
  {
    "text": "available providers of live streams of data and he also showed what is",
    "start": "26240",
    "end": "35130"
  },
  {
    "text": "available on GA am on dotnet and gave us a little bit of classification and when",
    "start": "35130",
    "end": "40950"
  },
  {
    "text": "it came to dotnet to show that it was only Orleans which was available and it",
    "start": "40950",
    "end": "47430"
  },
  {
    "text": "it may have raised the question okay so if I want streams of data can I use",
    "start": "47430",
    "end": "53399"
  },
  {
    "text": "anything which is ready for me and yes you can because if you just",
    "start": "53399",
    "end": "60149"
  },
  {
    "text": "don't rely only on streams provider by",
    "start": "60149",
    "end": "65399"
  },
  {
    "text": "vendors there is actually initiative which lets stream almost any sequence of",
    "start": "65399",
    "end": "72810"
  },
  {
    "text": "data and it's available on multiple platforms and it doesn't require you to",
    "start": "72810",
    "end": "80729"
  },
  {
    "text": "know the low-level details of actor model programming or reactive stream",
    "start": "80729",
    "end": "86369"
  },
  {
    "text": "interfaces so it might look like extremes it's a junction to technologies and it",
    "start": "86369",
    "end": "92310"
  },
  {
    "text": "requires you to know more low-level details but actually its opposite so",
    "start": "92310",
    "end": "98460"
  },
  {
    "text": "this are we'll be talking about it my name is Rajeev and I work for Norwegian company miles we are one of",
    "start": "98460",
    "end": "104970"
  },
  {
    "text": "the sponsors fantasy conference so if you looking for a good place to work then come to stand and talk to us or if",
    "start": "104970",
    "end": "113759"
  },
  {
    "text": "you are happy with your company but just want to grab some Italian food you can also come to our stand and talk to us",
    "start": "113759",
    "end": "119670"
  },
  {
    "text": "so enough marketing pitch let's go to technical staff there is no prerequisite",
    "start": "119670",
    "end": "127170"
  },
  {
    "text": "text text me preface for this talk you might be familiar with some of these and that probably give you some",
    "start": "127170",
    "end": "135959"
  },
  {
    "text": "ring some bells for you some common scenarios but none of that is required",
    "start": "135959",
    "end": "140970"
  },
  {
    "text": "to understand how extremes work and we'll spend probably like 15-20 minutes",
    "start": "140970",
    "end": "148290"
  },
  {
    "text": "first to go through the motivation line to explain how you can not just how you",
    "start": "148290",
    "end": "155280"
  },
  {
    "text": "can get to our costumes but why there was a blog post which I think from 2015",
    "start": "155280",
    "end": "160980"
  },
  {
    "text": "but I just recently read it and it's explaining why why it's so hard to explain Manas to people it's everlasting",
    "start": "160980",
    "end": "167790"
  },
  {
    "text": "story like people try to explain moment and people don't get it and those of",
    "start": "167790",
    "end": "173430"
  },
  {
    "text": "this article he said that one of the problem that we often get excited about",
    "start": "173430",
    "end": "179160"
  },
  {
    "text": "things and we forget that if you want to sell aspirin we need to know that this",
    "start": "179160",
    "end": "185250"
  },
  {
    "text": "other person it knows what pain is and if you can't just explain what pain is because if you have never experienced",
    "start": "185250",
    "end": "190380"
  },
  {
    "text": "pain you this cannot be explained so if extreme is after in that what is",
    "start": "190380",
    "end": "196410"
  },
  {
    "text": "the pain so what can be the road to occur streets and we'll try to identify",
    "start": "196410",
    "end": "203310"
  },
  {
    "text": "as a few ways towards extreme and first this is actually my story story of my",
    "start": "203310",
    "end": "211889"
  },
  {
    "text": "last year and half approximately I've been doing acha acha dotnet development and as for today even though we're happy",
    "start": "211889",
    "end": "220889"
  },
  {
    "text": "with results we are getting I see that some of the things some some code could",
    "start": "220889",
    "end": "226769"
  },
  {
    "text": "be written in more compact way and I can focus more on high-level abstractions if",
    "start": "226769",
    "end": "232230"
  },
  {
    "text": "we use our curse dreams then if you familiar with reactive streams this is a",
    "start": "232230",
    "end": "240150"
  },
  {
    "text": "Kaseem gives you the ability to use them in practice without going through",
    "start": "240150",
    "end": "245609"
  },
  {
    "text": "implementation of the interfaces then we will be shown some extremes building",
    "start": "245609",
    "end": "251190"
  },
  {
    "text": "blocks and this alone might be convincing for you to try how extremes",
    "start": "251190",
    "end": "257190"
  },
  {
    "text": "work finally arca streams are built on so-called reactive extensions will come",
    "start": "257190",
    "end": "263940"
  },
  {
    "text": "to them later which implements are called back pressure we're published and consumer of data they can dynamically",
    "start": "263940",
    "end": "270699"
  },
  {
    "text": "agree about suitable data transfer rate and this is a quite neat feature and for",
    "start": "270699",
    "end": "276819"
  },
  {
    "text": "many of us it can also be point of pain because who can honestly tell how many",
    "start": "276819",
    "end": "283449"
  },
  {
    "text": "messages your system is capable of tackling and what happens if it gets",
    "start": "283449",
    "end": "290619"
  },
  {
    "text": "overloaded so I can achieve back pressure it gives us opportunity to avoid that to have contract of how many",
    "start": "290619",
    "end": "297279"
  },
  {
    "text": "messages we get on each processing stage and what happens when if buffer gets",
    "start": "297279",
    "end": "303579"
  },
  {
    "text": "overloaded so first road is from actors to at the stream this is a slide from",
    "start": "303579",
    "end": "311909"
  },
  {
    "text": "presentation that me and my colleague Alan tweak we gave another NTC",
    "start": "311909",
    "end": "317019"
  },
  {
    "text": "conference in London this year and we tried to explain other points of pain",
    "start": "317019",
    "end": "322209"
  },
  {
    "text": "that led us to use active model everyone who has been working with enterprise",
    "start": "322209",
    "end": "328679"
  },
  {
    "text": "applications that require multiple threads and high availability know how",
    "start": "328679",
    "end": "336369"
  },
  {
    "text": "hard is to provide manual thread management thread synchronization and to",
    "start": "336369",
    "end": "343929"
  },
  {
    "text": "manage shared state so these three evil faces was for us one of several reasons",
    "start": "343929",
    "end": "351249"
  },
  {
    "text": "why we decided to give akka a try and",
    "start": "351249",
    "end": "357059"
  },
  {
    "text": "even though we are in general happy with our choice but of course every technology has its own limitations and",
    "start": "357509",
    "end": "364749"
  },
  {
    "text": "obstacles and there is a claim about actors that actors do not compose this",
    "start": "364749",
    "end": "371919"
  },
  {
    "text": "one of the blog posts that at if there",
    "start": "371919",
    "end": "377050"
  },
  {
    "text": "are a lot of reference if you google to this blog post that since actors send",
    "start": "377050",
    "end": "383949"
  },
  {
    "text": "messages to each other then an actors some rental messages they use addresses",
    "start": "383949",
    "end": "391209"
  },
  {
    "text": "of in inside ecosystems this is ecosystem and these are addresses so we",
    "start": "391209",
    "end": "396519"
  },
  {
    "text": "have an actor and it sends messages so it it's sort of hard-coded of course you",
    "start": "396519",
    "end": "402990"
  },
  {
    "text": "can use dependency injection but as actor model is defined this is quite",
    "start": "402990",
    "end": "409139"
  },
  {
    "text": "obscure what happens how messages are floating with an actor system around",
    "start": "409139",
    "end": "416190"
  },
  {
    "text": "cool one of akka architects he he disagreed with a regional claim but he tried to",
    "start": "416190",
    "end": "423030"
  },
  {
    "text": "rephrase it saying that what probably people mean when they say that access do not compose and since the only way to",
    "start": "423030",
    "end": "429320"
  },
  {
    "text": "communicate with actors to send a message so basically you have a method send message which is void or unit and",
    "start": "429320",
    "end": "435990"
  },
  {
    "text": "in this respect there is no composition between actors because if you can't",
    "start": "435990",
    "end": "443610"
  },
  {
    "text": "build a functional pipeline if function is doing to turn anything so those who are familiar function programming know",
    "start": "443610",
    "end": "450060"
  },
  {
    "text": "that this pipeline operator and it works very nicely if you have functions that you turn something you transform to next",
    "start": "450060",
    "end": "456810"
  },
  {
    "text": "next next level next chain and you can't do this with actors then a kun added",
    "start": "456810",
    "end": "465020"
  },
  {
    "text": "commented saying that actors do compose actually in the same sense are our human",
    "start": "465020",
    "end": "471389"
  },
  {
    "text": "society compose and you might think that this is kind of different context to",
    "start": "471389",
    "end": "476880"
  },
  {
    "text": "what social human society have to do with actor model but if you think about",
    "start": "476880",
    "end": "483990"
  },
  {
    "text": "how we people communicate we communicate using messages and we we do compose",
    "start": "483990",
    "end": "490680"
  },
  {
    "text": "great teams great families and those who attended gig beer yesterday I mean it we",
    "start": "490680",
    "end": "498120"
  },
  {
    "text": "compose a good beer party just by sending messages to each other so this",
    "start": "498120",
    "end": "504000"
  },
  {
    "text": "is the same way actors work but still from technical point of view there is no",
    "start": "504000",
    "end": "511159"
  },
  {
    "text": "composition or which which let us build functional pipelines using actors",
    "start": "511159",
    "end": "517430"
  },
  {
    "text": "another thing is that often when you write actor code you write quite tiny",
    "start": "517430",
    "end": "523589"
  },
  {
    "text": "code and then on the top of it there is some boilerplate code and it's okay if",
    "start": "523589",
    "end": "530970"
  },
  {
    "text": "you have a large implementation but if you have to write this code like everywhere",
    "start": "530970",
    "end": "536760"
  },
  {
    "text": "in addition you have similar code to arrange actors to have functions like",
    "start": "536760",
    "end": "544650"
  },
  {
    "text": "pre-start post start and so on so it's quite a lot boilerplate code so you may",
    "start": "544650",
    "end": "550680"
  },
  {
    "text": "get lost in a in a large code base losing actual understanding of how",
    "start": "550680",
    "end": "555990"
  },
  {
    "text": "communication goes so what if we could use still use actor model but describe",
    "start": "555990",
    "end": "563700"
  },
  {
    "text": "the data flow process differently focusing on a high-level composition",
    "start": "563700",
    "end": "570200"
  },
  {
    "text": "like link here everyone of course who",
    "start": "570200",
    "end": "575820"
  },
  {
    "text": "does dotnet and even who doesn't from among developers familiar with this",
    "start": "575820",
    "end": "581340"
  },
  {
    "text": "link statement so you can just chain using fluent in text link statements you don't need to write a class yourselves",
    "start": "581340",
    "end": "588030"
  },
  {
    "text": "that implement join aware and this is a nice functional transformation like here",
    "start": "588030",
    "end": "596040"
  },
  {
    "text": "this is a codon F sharp and even those who know familiar this effort actually can get a picture of what's going on",
    "start": "596040",
    "end": "603060"
  },
  {
    "text": "here we read the content of a web page and then we extract words from it and",
    "start": "603060",
    "end": "609540"
  },
  {
    "text": "then we run spellcheck in control so it's here we compose our flow processing",
    "start": "609540",
    "end": "616080"
  },
  {
    "text": "flow can we do something with actors actually we can so this is a actually",
    "start": "616080",
    "end": "623280"
  },
  {
    "text": "our first exposure to extreme do you know what language it is written in",
    "start": "623280",
    "end": "630260"
  },
  {
    "text": "scala of course Scala so this is other streams you see there",
    "start": "630860",
    "end": "636270"
  },
  {
    "text": "is no code that man you create any actors what happens here that we define some source this out stream source and",
    "start": "636270",
    "end": "643260"
  },
  {
    "text": "then this is think we just ignore results but we do some interesting stuff",
    "start": "643260",
    "end": "648720"
  },
  {
    "text": "here we define broadcast and merge and then this is also called in Scala by the",
    "start": "648720",
    "end": "654180"
  },
  {
    "text": "way so from source we send data to through flow and flow just adds them to",
    "start": "654180",
    "end": "660960"
  },
  {
    "text": "all numbers then we broadcast these numbers and then on each next stage we",
    "start": "660960",
    "end": "667530"
  },
  {
    "text": "also add ten then we merge this data and then again add ten and then we send to sync",
    "start": "667530",
    "end": "672840"
  },
  {
    "text": "so it's very compact actually very neat way using Scala to define streams",
    "start": "672840",
    "end": "680520"
  },
  {
    "text": "probably for some developers it will be after seeing this cause they can consider switching to scholar because it",
    "start": "680520",
    "end": "687090"
  },
  {
    "text": "really looks neat if you look at a c-sharp",
    "start": "687090",
    "end": "692959"
  },
  {
    "text": "this is yeah so what this code shows us is that we can unlearn actually our",
    "start": "693260",
    "end": "700530"
  },
  {
    "text": "ability to create individual actors and instead we can learn instead how to use",
    "start": "700530",
    "end": "708750"
  },
  {
    "text": "high level composition primitives so we focus on our workflow and our framework",
    "start": "708750",
    "end": "715950"
  },
  {
    "text": "internally we'll create and connect all these instances of actors and coming to",
    "start": "715950",
    "end": "721290"
  },
  {
    "text": "C sharp this is very simple table the simplest octa stream in c-sharp",
    "start": "721290",
    "end": "728550"
  },
  {
    "text": "we have a source again enumerables and then we have some flow we just multiply numbers by two and we write everything",
    "start": "728550",
    "end": "735090"
  },
  {
    "text": "to console and if you want to create something more complicated and this is a",
    "start": "735090",
    "end": "740850"
  },
  {
    "text": "graph g7 C sharp it's it's called also grab this cell like in Scala but there isn't not much graphical here still it's",
    "start": "740850",
    "end": "749760"
  },
  {
    "text": "quite easy to understand what's going on here it's just one page you see that we add broadcast and merge then there are a",
    "start": "749760",
    "end": "757380"
  },
  {
    "text": "couple of flows so we actually create a counter and with some counters we",
    "start": "757380",
    "end": "762540"
  },
  {
    "text": "created some aggregate even though aqua stream has its built-in primitive for that but this is just to show how you",
    "start": "762540",
    "end": "768360"
  },
  {
    "text": "can do it in a different way and then we merge data and return flow shape which",
    "start": "768360",
    "end": "774690"
  },
  {
    "text": "is a graph which can be processed so that's one way one road to extremes if",
    "start": "774690",
    "end": "781650"
  },
  {
    "text": "you have experience with ARCA writing actors individually you can actually",
    "start": "781650",
    "end": "787050"
  },
  {
    "text": "have alternative way of running your workflows with another road from Roxy",
    "start": "787050",
    "end": "792780"
  },
  {
    "text": "streams to extremes what is reactive streams it's in an initiative with",
    "start": "792780",
    "end": "799190"
  },
  {
    "text": "several large companies behind that decided to provide a standard way",
    "start": "799190",
    "end": "804779"
  },
  {
    "text": "for a synchronous in processing so they defined minimum set of components and",
    "start": "804779",
    "end": "810870"
  },
  {
    "text": "interfaces that stream provider must support so these streams can be actually",
    "start": "810870",
    "end": "819110"
  },
  {
    "text": "combined in a single processing workflow",
    "start": "819110",
    "end": "824660"
  },
  {
    "text": "and one important quality of such teams will be the support back pressure but",
    "start": "824660",
    "end": "831779"
  },
  {
    "text": "pressure is as I mentioned in in the beginning it's a its ability to dynamically agree about a message rate",
    "start": "831779",
    "end": "839310"
  },
  {
    "text": "between a producer and consumer message so there are a few original if the",
    "start": "839310",
    "end": "848190"
  },
  {
    "text": "beta's in this initiative and light band used to be called type safe at that time and there are four components publishes",
    "start": "848190",
    "end": "855420"
  },
  {
    "text": "subscribe a subscription and processor that reacted stream specification requires and there are four interfaces",
    "start": "855420",
    "end": "862519"
  },
  {
    "text": "interface are very simple and it might look like it's simple to implement them because publishers have one method and",
    "start": "862519",
    "end": "870000"
  },
  {
    "text": "subscriber has four then we have subscription with requests and counsel and process it doesn't have any its own",
    "start": "870000",
    "end": "876750"
  },
  {
    "text": "method it just derives from publishing subscriber but in fact those interfaces are not meant to be used by client API",
    "start": "876750",
    "end": "886230"
  },
  {
    "text": "they're to be used by those who implement stream sources so these",
    "start": "886230",
    "end": "893190"
  },
  {
    "text": "interfaces they let us to support very important feature which is called back",
    "start": "893190",
    "end": "899610"
  },
  {
    "text": "pressure what is it about you may have a slow consumer of data what happens if",
    "start": "899610",
    "end": "907520"
  },
  {
    "text": "the stream uses push model and publisher just keeps pushing data on the",
    "start": "907520",
    "end": "912540"
  },
  {
    "text": "subscriber well then subscribers sooner or later will be overloaded to these messages so",
    "start": "912540",
    "end": "918750"
  },
  {
    "text": "push model doesn't really work for slow subscriber but it's not efficient if we",
    "start": "918750",
    "end": "924750"
  },
  {
    "text": "use pool model and then the publisher this law because if subscriber just keeps on pulling data and there is nothing to to get then this",
    "start": "924750",
    "end": "932130"
  },
  {
    "text": "communication will become inefficient so what directs streams vacation implement enables is that",
    "start": "932130",
    "end": "940800"
  },
  {
    "text": "publishing subscriber they can switch between pool and push model dynamically within a single session depending on how",
    "start": "940800",
    "end": "947220"
  },
  {
    "text": "fast communication goes so this is example of test of dynamic of back",
    "start": "947220",
    "end": "954360"
  },
  {
    "text": "pressure on a passive link publishing subscriber originally publisher was slow",
    "start": "954360",
    "end": "960209"
  },
  {
    "text": "they just added thread sleep to publish and subscribe of course followed and",
    "start": "960209",
    "end": "966949"
  },
  {
    "text": "received messages on slow rate then they made subscribers law so it was capable",
    "start": "966949",
    "end": "972839"
  },
  {
    "text": "of consuming about 20% of its publishing speed and publish followed immediately",
    "start": "972839",
    "end": "978300"
  },
  {
    "text": "then they removed all breaks and all data was consumed at high speed and added slowness again works fine and then",
    "start": "978300",
    "end": "986519"
  },
  {
    "text": "then finally removed and publishing consumed as a process data at the highest rate so this is illustration of",
    "start": "986519",
    "end": "995040"
  },
  {
    "text": "this dynamic push-pull agreement between publish and subscriber",
    "start": "995040",
    "end": "1000970"
  },
  {
    "text": "so after streams building box they include various sources flows and things",
    "start": "1000970",
    "end": "1010209"
  },
  {
    "text": "so a source is a processing stage with exactly one output you can have multiple",
    "start": "1010209",
    "end": "1015500"
  },
  {
    "text": "sources that give you data but each source it just it has no input it just gives you the data this is your",
    "start": "1015500",
    "end": "1021800"
  },
  {
    "text": "originally where your sim stops then I think it's where your data may",
    "start": "1021800",
    "end": "1028010"
  },
  {
    "text": "eventually come it's a stage with just one input and then we have flow flow",
    "start": "1028010",
    "end": "1034870"
  },
  {
    "text": "according specification has exactly one input and output although developers often relate to flow as stage with mods",
    "start": "1034870",
    "end": "1044900"
  },
  {
    "text": "with at least one input and at least one output although strictly speaking it's not a flow at the graph graph it's a",
    "start": "1044900",
    "end": "1050870"
  },
  {
    "text": "combination it can consist of flow sources and things and not every graph",
    "start": "1050870",
    "end": "1057980"
  },
  {
    "text": "is runnable only closed shape is runnable which means that if you have a",
    "start": "1057980",
    "end": "1064010"
  },
  {
    "text": "graph with open ends you can't run it so you have some sources you have",
    "start": "1064010",
    "end": "1069720"
  },
  {
    "text": "to stream the data somewhere and that eventually data must come to the sink then you have a runnable graph if you",
    "start": "1069720",
    "end": "1078330"
  },
  {
    "text": "look at built in source stages for extremes there are plenty of them and",
    "start": "1078330",
    "end": "1083789"
  },
  {
    "text": "I'm now showing you a cadet implementation for Scala it's different although there is a lot of similarities",
    "start": "1083789",
    "end": "1091049"
  },
  {
    "text": "but some of these are just a cadet net for example is from a numerator if you have ienumerator you can get a stream",
    "start": "1091049",
    "end": "1097380"
  },
  {
    "text": "out of it from gives you from any enumerable so actually if you have any",
    "start": "1097380",
    "end": "1102900"
  },
  {
    "text": "sequence of data anything that gives you either mobile you can make a stream out",
    "start": "1102900",
    "end": "1108659"
  },
  {
    "text": "of it at the stream here are built in sync stages from ignore to some",
    "start": "1108659",
    "end": "1116429"
  },
  {
    "text": "aggregates like aggregate and some and of course you can just stream data right to files or you can send them to some",
    "start": "1116429",
    "end": "1124049"
  },
  {
    "text": "actors so there is a lot of possibilities and even big a number of built-in flow stages and it looks like",
    "start": "1124049",
    "end": "1131100"
  },
  {
    "text": "link statement or link link expression types in a way I think there are",
    "start": "1131100",
    "end": "1137490"
  },
  {
    "text": "probably 83 link expression types and it's comparable number of built-in flow",
    "start": "1137490",
    "end": "1143640"
  },
  {
    "text": "stages so once you get data you can do various things with them like MapReduce",
    "start": "1143640",
    "end": "1149159"
  },
  {
    "text": "filtering buffering throttling all this available no matter what is your stream",
    "start": "1149159",
    "end": "1156480"
  },
  {
    "text": "source so this makes it attractive even if you not familiar with akka or",
    "start": "1156480",
    "end": "1166140"
  },
  {
    "text": "reactive streams you can just start from scratch basically get some ienumerable",
    "start": "1166140",
    "end": "1172500"
  },
  {
    "text": "as a stream and then start preserving them stream needs to be materialized so",
    "start": "1172500",
    "end": "1179330"
  },
  {
    "text": "the actual stream specifications as we saw it can't be run without active",
    "start": "1179330",
    "end": "1185340"
  },
  {
    "text": "system so we just declare a stream and like a link statement if you have a link",
    "start": "1185340",
    "end": "1191429"
  },
  {
    "text": "statement with some link providers they have so called deferred query execution",
    "start": "1191429",
    "end": "1197669"
  },
  {
    "text": "which means that if you don't have this to list and this is a link statement that you",
    "start": "1197669",
    "end": "1203330"
  },
  {
    "text": "use with a single server you don't get any data until your materialize them and",
    "start": "1203330",
    "end": "1208519"
  },
  {
    "text": "utilization is just a call to lease to array single first to default anything that actually require actual data",
    "start": "1208519",
    "end": "1215239"
  },
  {
    "text": "retrieval the same is with streams this is just a blueprint so it's a",
    "start": "1215239",
    "end": "1221600"
  },
  {
    "text": "specification how stream should work and in order for this stream to work you",
    "start": "1221600",
    "end": "1227179"
  },
  {
    "text": "should create an octave system and this is as easy as just calling active system great so you don't really need to have a",
    "start": "1227179",
    "end": "1234019"
  },
  {
    "text": "knowledge of how active system works and then you create materializer which is",
    "start": "1234019",
    "end": "1239029"
  },
  {
    "text": "disposable object you can equally materialize three multiple times and probably will get different data if it's",
    "start": "1239029",
    "end": "1246769"
  },
  {
    "text": "a really live stream and then as long as you have a runnable graph you can just go run and you will start getting later",
    "start": "1246769",
    "end": "1255638"
  },
  {
    "text": "then stream can produce materialized values if you think about stream",
    "start": "1256330",
    "end": "1262639"
  },
  {
    "text": "processing stages you have source you have some flows of sync on each stage",
    "start": "1262639",
    "end": "1268600"
  },
  {
    "text": "data are coming and leaving the stage and if you don't retreat them if you",
    "start": "1268600",
    "end": "1276379"
  },
  {
    "text": "don't specify that you want to get hold of them they're not used and so here for",
    "start": "1276379",
    "end": "1284659"
  },
  {
    "text": "this dream we have be getting a runnable graph of not used which means that we have a stream we can run it but it",
    "start": "1284659",
    "end": "1290330"
  },
  {
    "text": "doesn't produce any materialized value even though it's actually in this think",
    "start": "1290330",
    "end": "1296450"
  },
  {
    "text": "it actually populate the list but this comes just as a side-effect alternative is to run stream to",
    "start": "1296450",
    "end": "1304909"
  },
  {
    "text": "materialized so you want to produce some addressed value of some of the running",
    "start": "1304909",
    "end": "1310879"
  },
  {
    "text": "stages so here we have a sink where were some integers and we can say that we want to have a right part of this",
    "start": "1310879",
    "end": "1319480"
  },
  {
    "text": "processing stage to be materialized so we want to get this data so then we",
    "start": "1319480",
    "end": "1325340"
  },
  {
    "text": "getting not runnable of not use we get runnable of tasks of int and we can retrieve materials values from multiple",
    "start": "1325340",
    "end": "1332779"
  },
  {
    "text": "stages and then here we will have some tuple of values so this is very convenient way",
    "start": "1332779",
    "end": "1339940"
  },
  {
    "text": "of just taking care of intermediate data without going to infrastructure level so",
    "start": "1339940",
    "end": "1350880"
  },
  {
    "text": "how do you consume extremes what do you need to do to start consuming them of",
    "start": "1350880",
    "end": "1358030"
  },
  {
    "text": "course as we saw that building sources business or stages they provide wide range of streaming data and the easiest",
    "start": "1358030",
    "end": "1365679"
  },
  {
    "text": "is just use from a numerator or from from input stream profile if you're",
    "start": "1365679",
    "end": "1372700"
  },
  {
    "text": "using aapke and you're using persistence actors then you can use a persistent",
    "start": "1372700",
    "end": "1377980"
  },
  {
    "text": "square it's a module that lets you stream data from event beta event",
    "start": "1377980",
    "end": "1387100"
  },
  {
    "text": "database of actors so you get either life of snapshot stream a bit of historical stream and then it's open",
    "start": "1387100",
    "end": "1393580"
  },
  {
    "text": "source initiative is called out Parker connectors both on Scala and dotnet and",
    "start": "1393580",
    "end": "1398940"
  },
  {
    "text": "like with David's talk we showed plenty of application from Gigi a.m. and just",
    "start": "1398940",
    "end": "1406360"
  },
  {
    "text": "one for dotnet here the major of connectors there are 4 GB M so this is",
    "start": "1406360",
    "end": "1412630"
  },
  {
    "text": "just extract from the list you get much more we have Kafka of MPP and so on",
    "start": "1412630",
    "end": "1418539"
  },
  {
    "text": "HBase when it comes to dotnet the list",
    "start": "1418539",
    "end": "1424659"
  },
  {
    "text": "is currently quite modest it's a utter we have storage q7 hub and service bus and we have signal R and I'm QP is in",
    "start": "1424659",
    "end": "1433240"
  },
  {
    "text": "work and this is a quite fresh tweet it",
    "start": "1433240",
    "end": "1438429"
  },
  {
    "text": "was about 10 days ago David Fowler he said that now signal our friend with",
    "start": "1438429",
    "end": "1445030"
  },
  {
    "text": "reactive extensions and butter is one of key contributors to a cadet net he said",
    "start": "1445030",
    "end": "1452230"
  },
  {
    "text": "that by the way we we had this connector thing off for a while so if you're using signal you have a stream for that now so",
    "start": "1452230",
    "end": "1461250"
  },
  {
    "text": "now as we have gone through some definitions of what streams",
    "start": "1461250",
    "end": "1469420"
  },
  {
    "text": "how they work then let's go through some cases we've got we'll go to a couple of",
    "start": "1469420",
    "end": "1476760"
  },
  {
    "text": "small case studies first if it's",
    "start": "1476760",
    "end": "1481840"
  },
  {
    "text": "actually how I was exposed to extremes in our project swimming event journal",
    "start": "1481840",
    "end": "1487900"
  },
  {
    "text": "and then later we'll look at how we can stream commits so everyone who is",
    "start": "1487900",
    "end": "1494440"
  },
  {
    "text": "working with streams create examples with reactive streams like swimming into it that's probably the most common",
    "start": "1494440",
    "end": "1501960"
  },
  {
    "text": "ground for twelve developers so a streaming event journal so this is a",
    "start": "1501960",
    "end": "1509140"
  },
  {
    "text": "dashboard that we have in our project and it's actually it's a dashboard that",
    "start": "1509140",
    "end": "1515620"
  },
  {
    "text": "is dynamically changing all the time so it shows we distribute some files and it",
    "start": "1515620",
    "end": "1522340"
  },
  {
    "text": "shows the status of files that we'll be distributing it's a Cabana dashboard and",
    "start": "1522340",
    "end": "1527940"
  },
  {
    "text": "it's based on elastic search index and it shows data that's populated based on",
    "start": "1527940",
    "end": "1534640"
  },
  {
    "text": "some actors that we have persistent actors so this activity dashboard and",
    "start": "1534640",
    "end": "1540490"
  },
  {
    "text": "these are principles that we used to build it elastic search cabana who is",
    "start": "1540490",
    "end": "1546790"
  },
  {
    "text": "using elastic search yeah more than happening and index like with elastic",
    "start": "1546790",
    "end": "1556810"
  },
  {
    "text": "search indexes it's recommended that you don't use them as your primary source of data you just create index and we create",
    "start": "1556810",
    "end": "1562720"
  },
  {
    "text": "them on demand typically when we change the model the the layout of a bunch of",
    "start": "1562720",
    "end": "1570370"
  },
  {
    "text": "data that we want to show that this is ongoing project so it's changing so and",
    "start": "1570370",
    "end": "1576940"
  },
  {
    "text": "I'll react our position axes are stored in event Journal which is based on",
    "start": "1576940",
    "end": "1582370"
  },
  {
    "text": "sequel server and this is stable and we don't have a control over the of this table it's actor this is event journal",
    "start": "1582370",
    "end": "1589570"
  },
  {
    "text": "table but we need to in order to build our dashboards we need to create indexer",
    "start": "1589570",
    "end": "1598600"
  },
  {
    "text": "that first gets historical data from event journal from SQL and on the top of it will run the life",
    "start": "1598600",
    "end": "1606669"
  },
  {
    "text": "event that our persistent actors receive so we started thinking with my colleague",
    "start": "1606669",
    "end": "1616419"
  },
  {
    "text": "parallel banker about how we should build it and then whatever solution we",
    "start": "1616419",
    "end": "1621919"
  },
  {
    "text": "came with is we were not really happy because you have this relatively small",
    "start": "1621919",
    "end": "1628309"
  },
  {
    "text": "piece of code that we don't really need for to solve our domain tasks and then",
    "start": "1628309",
    "end": "1635750"
  },
  {
    "text": "we need to do something to grab data from sequel server and then in to synchronize it so we start from where it",
    "start": "1635750",
    "end": "1642980"
  },
  {
    "text": "ends we start with life events so we're not happy with what we're getting until its structure that we could use just",
    "start": "1642980",
    "end": "1648789"
  },
  {
    "text": "ARCA streams because our provides persistent query and there are six",
    "start": "1648789",
    "end": "1656659"
  },
  {
    "text": "predefined specific queries and this is what we needed so it's event by tag and current events",
    "start": "1656659",
    "end": "1662720"
  },
  {
    "text": "my tag all we start with current is just a snapshot from the beginning of time until now all that doesn't have current",
    "start": "1662720",
    "end": "1670520"
  },
  {
    "text": "it's a life event but you can actually give them from the beginning of time so",
    "start": "1670520",
    "end": "1675890"
  },
  {
    "text": "it starts from the first event ever received by actors and then it continues",
    "start": "1675890",
    "end": "1682610"
  },
  {
    "text": "streaming all events and then just fluently goes into life events so this was exactly what we needed we didn't",
    "start": "1682610",
    "end": "1690049"
  },
  {
    "text": "really need to build this hybrid component that takes things from signal",
    "start": "1690049",
    "end": "1695150"
  },
  {
    "text": "server and then combine them with life events and this is a resulting code and",
    "start": "1695150",
    "end": "1702140"
  },
  {
    "text": "you can recognize probably already that this is something about extreme it's written an f-sharp but it's very similar",
    "start": "1702140",
    "end": "1709360"
  },
  {
    "text": "how we would have written in C sharp because it's this part is common more or",
    "start": "1709360",
    "end": "1715280"
  },
  {
    "text": "less so we have event by tag and they apply certain flows to that and then we",
    "start": "1715280",
    "end": "1721100"
  },
  {
    "text": "send result to elasticsearch so this is example of once you get hold of stream",
    "start": "1721100",
    "end": "1728090"
  },
  {
    "text": "of data how easily you can use it to",
    "start": "1728090",
    "end": "1733120"
  },
  {
    "text": "produce things like dashboards in this case and how little cold it",
    "start": "1733120",
    "end": "1738890"
  },
  {
    "text": "requires you to write because of these primitives that available to you and now",
    "start": "1738890",
    "end": "1744440"
  },
  {
    "text": "something that probably more usable for",
    "start": "1744440",
    "end": "1749530"
  },
  {
    "text": "everyone it's how we can stream tweets its rectified it's a sample that written",
    "start": "1749530",
    "end": "1757790"
  },
  {
    "text": "boss for actor scholar and a kebab net and I have written my own based on their",
    "start": "1757790",
    "end": "1765010"
  },
  {
    "text": "on the same library which aqueduct net uses Scala uses different but a cadet",
    "start": "1765010",
    "end": "1771050"
  },
  {
    "text": "net using open source library called tweet and me",
    "start": "1771050",
    "end": "1777130"
  },
  {
    "text": "so this line provides several streams I didn't want to filter anything I just",
    "start": "1777130",
    "end": "1782960"
  },
  {
    "text": "wanted to get sample seams so I will be using sample stream and tweet and it",
    "start": "1782960",
    "end": "1790970"
  },
  {
    "text": "doesn't support reaction specification which means it doesn't support back pressure and you have to do something to",
    "start": "1790970",
    "end": "1797450"
  },
  {
    "text": "convert it into a reactive stream debate based streams but that's very easy",
    "start": "1797450",
    "end": "1806840"
  },
  {
    "text": "thanks to a lot of available primitives in extremes so what we're going to build",
    "start": "1806840",
    "end": "1813830"
  },
  {
    "text": "we will start with very simple workflow but then eventually we will have a",
    "start": "1813830",
    "end": "1819500"
  },
  {
    "text": "broadcast so these are tweet feed sources we'll run them through broadcast on the first channel we just format them",
    "start": "1819500",
    "end": "1828590"
  },
  {
    "text": "and send to merge on the second channel it will throttle them because we are going to send them to weather forecast",
    "start": "1828590",
    "end": "1836540"
  },
  {
    "text": "service and if we send too many of them then they can ban us and so we get back",
    "start": "1836540",
    "end": "1843350"
  },
  {
    "text": "results and then we format results and then we merge everything and then write to the console so let's see how this can",
    "start": "1843350",
    "end": "1850460"
  },
  {
    "text": "be achieved so I'm switching to visual studio okay and yes I need to pull it in",
    "start": "1850460",
    "end": "1861650"
  },
  {
    "text": "this monitor so first is this is a program and here",
    "start": "1861650",
    "end": "1868809"
  },
  {
    "text": "we have huge cash tweets false so first we will try with live tweet but with",
    "start": "1868809",
    "end": "1874840"
  },
  {
    "text": "live tweets we don't get them at very high rate and also usually most of them",
    "start": "1874840",
    "end": "1883690"
  },
  {
    "text": "don't have locations but I want to play this location so that will then I will switch to cash tweets so first is just",
    "start": "1883690",
    "end": "1889149"
  },
  {
    "text": "to demonstrate if we can get live feeds from Twitter so let's see how it works",
    "start": "1889149",
    "end": "1895019"
  },
  {
    "text": "so if I go to you choose yeah so this is",
    "start": "1895019",
    "end": "1906130"
  },
  {
    "text": "a method to get our last we'd start with stream so we this is tweeting we API",
    "start": "1906130",
    "end": "1913299"
  },
  {
    "text": "create sample stream and then we register some event receiver so what we",
    "start": "1913299",
    "end": "1920260"
  },
  {
    "text": "do with it like okay here this are the extreme that",
    "start": "1920260",
    "end": "1927639"
  },
  {
    "text": "we define source flow and thing so what we do we create an actor and we send",
    "start": "1927639",
    "end": "1934450"
  },
  {
    "text": "live tweet to this actor then we create a flow where we format the street and",
    "start": "1934450",
    "end": "1939760"
  },
  {
    "text": "the same to sync the just writes everything to the console so if you run",
    "start": "1939760",
    "end": "1947889"
  },
  {
    "text": "this program",
    "start": "1947889",
    "end": "1950220"
  },
  {
    "text": "yeah so here we're getting a live stream of tweets from Twitter that was simple",
    "start": "1955039",
    "end": "1964559"
  },
  {
    "text": "but it doesn't show us really advantages",
    "start": "1964559",
    "end": "1969960"
  },
  {
    "text": "of occur streams so now let's go to back to program hard times risk yeah",
    "start": "1969960",
    "end": "1979559"
  },
  {
    "text": "now we set use cache street street queue and the first thing which we try we we",
    "start": "1979559",
    "end": "1990090"
  },
  {
    "text": "just try cash please and here the difference you could compare the trash",
    "start": "1990090",
    "end": "1996720"
  },
  {
    "text": "Queens series if you compare with how we get life with these life speeds we",
    "start": "1996720",
    "end": "2002389"
  },
  {
    "text": "created it from actor but here we already have file with cash twist we",
    "start": "2002389",
    "end": "2008240"
  },
  {
    "text": "just create cash trees from enumerator very little difference and if you around",
    "start": "2008240",
    "end": "2015049"
  },
  {
    "text": "this program okay yeah we're getting",
    "start": "2015049",
    "end": "2025820"
  },
  {
    "text": "tweets on a much higher rate because this is just contest on the file but all",
    "start": "2025820",
    "end": "2033700"
  },
  {
    "text": "the the format is the same so now what",
    "start": "2033700",
    "end": "2039590"
  },
  {
    "text": "we're going to do next if we try to see",
    "start": "2039590",
    "end": "2046639"
  },
  {
    "text": "twitch with this broadcast so now we'll start broadcasting them and this is how",
    "start": "2046639",
    "end": "2054079"
  },
  {
    "text": "our graph will look so here is something more interesting we",
    "start": "2054079",
    "end": "2062310"
  },
  {
    "text": "have a tweet source the same source and then we sending data to two channels",
    "start": "2062310",
    "end": "2068608"
  },
  {
    "text": "first channel is a tweet will be formatted and only user name will be",
    "start": "2068609",
    "end": "2079108"
  },
  {
    "text": "written the second channel we will just show only tweet coordinates then we merge both channels and we send them to",
    "start": "2079109",
    "end": "2086220"
  },
  {
    "text": "the thing so if you do this if you run",
    "start": "2086220",
    "end": "2091888"
  },
  {
    "text": "this program yeah see we're getting two",
    "start": "2091889",
    "end": "2099390"
  },
  {
    "text": "channels and at the same rate this name also user and coordinates where he was",
    "start": "2099390",
    "end": "2105570"
  },
  {
    "text": "tweeting from so we getting more interesting results now so next thing",
    "start": "2105570",
    "end": "2114240"
  },
  {
    "text": "which we are going to try is we have tweet with throttle let's see how this",
    "start": "2114240",
    "end": "2123900"
  },
  {
    "text": "is implemented we could stop",
    "start": "2123900",
    "end": "2129079"
  },
  {
    "text": "yeah so here we have a broadcast these two channels and let me start throttling",
    "start": "2131940",
    "end": "2138370"
  },
  {
    "text": "them so let's try to throttle them first",
    "start": "2138370",
    "end": "2146620"
  },
  {
    "text": "without using buffer here so the throttling at the same rate like we're",
    "start": "2146620",
    "end": "2156070"
  },
  {
    "text": "sending ten messages a second and see what happens then yeah you see that they",
    "start": "2156070",
    "end": "2167320"
  },
  {
    "text": "are we getting these tweets and they're written at the same rate so now let's",
    "start": "2167320",
    "end": "2174970"
  },
  {
    "text": "change this and instead of having ten assists for second in a second for the",
    "start": "2174970",
    "end": "2181420"
  },
  {
    "text": "coordinate Channel we'll just use one message a second okay",
    "start": "2181420",
    "end": "2188080"
  },
  {
    "text": "where is my coordinates yeah it's here",
    "start": "2188080",
    "end": "2193680"
  },
  {
    "text": "so what do you think will happen so now we request tweets at the rate one",
    "start": "2194130",
    "end": "2200380"
  },
  {
    "text": "message a second on one channel and ten matches second or second channel will they get messages at different rates or",
    "start": "2200380",
    "end": "2207730"
  },
  {
    "text": "they will get both that first one message a second or both at ten that's a second who think they will be getting",
    "start": "2207730",
    "end": "2213700"
  },
  {
    "text": "message to different rates very few that",
    "start": "2213700",
    "end": "2220450"
  },
  {
    "text": "they will get majestic messages at the lowest rate bit more hands and they will",
    "start": "2220450",
    "end": "2228760"
  },
  {
    "text": "be getting messages at the highest rate nobody actually they will be getting",
    "start": "2228760",
    "end": "2235420"
  },
  {
    "text": "messages at the lowest rate as we can probably demonstrate now",
    "start": "2235420",
    "end": "2241890"
  },
  {
    "text": "Sorry Sorry",
    "start": "2248820",
    "end": "2252090"
  },
  {
    "text": "uh-huh let me see okay",
    "start": "2257640",
    "end": "2263710"
  },
  {
    "text": "oh yeah I'm so long yeah so it's wrong if I go to mr. O'Toole yeah I mean this",
    "start": "2263710",
    "end": "2274570"
  },
  {
    "text": "is the the throttle and then I have we",
    "start": "2274570",
    "end": "2279760"
  },
  {
    "text": "are ten and then we want to have one here I'm turn there let's try again",
    "start": "2279760",
    "end": "2288070"
  },
  {
    "text": "thank you yeah so now this is it looks",
    "start": "2288070",
    "end": "2297640"
  },
  {
    "text": "like this so you've only just one message a second and why is that because we have a source stream source we have a",
    "start": "2297640",
    "end": "2304570"
  },
  {
    "text": "broadcast and then we'll request one message a second and the request a message a second but the this stream",
    "start": "2304570",
    "end": "2311710"
  },
  {
    "text": "source is just one it's a think of theme source so it can't start producing seems a message to different rate so what it",
    "start": "2311710",
    "end": "2318010"
  },
  {
    "text": "does of course it satisfies the lowest requirement and this is how it works",
    "start": "2318010",
    "end": "2323710"
  },
  {
    "text": "so back pressure from flows the strongest requirement will be satisfied",
    "start": "2323710",
    "end": "2329800"
  },
  {
    "text": "but this is not what we want so what can we do you go back to to this file and we",
    "start": "2329800",
    "end": "2338760"
  },
  {
    "text": "introducing a buffer so here what we say we want to buffer up to ten elements and",
    "start": "2338760",
    "end": "2346740"
  },
  {
    "text": "if we just let's have it here one buffer",
    "start": "2346740",
    "end": "2355240"
  },
  {
    "text": "here and here then yeah so we want to",
    "start": "2355240",
    "end": "2361450"
  },
  {
    "text": "bother a up to ten elements and after that we'll just flowing dropping",
    "start": "2361450",
    "end": "2368970"
  },
  {
    "text": "data that overflowed the buffer yeah so",
    "start": "2368970",
    "end": "2381690"
  },
  {
    "text": "now we're getting one tweet one coordinate a second and 10,000 a second",
    "start": "2381690",
    "end": "2388050"
  },
  {
    "text": "oh sorry don't names a second so now we see that",
    "start": "2388050",
    "end": "2393170"
  },
  {
    "text": "this different flows they receive data with a different rate why can this be",
    "start": "2393170",
    "end": "2399359"
  },
  {
    "text": "useful for in our case we want to send the coordinates to weather service and",
    "start": "2399359",
    "end": "2406410"
  },
  {
    "text": "then we don't want to be banned so if we look now at the last file which I",
    "start": "2406410",
    "end": "2412170"
  },
  {
    "text": "mistakenly took for real this time so here it is yes",
    "start": "2412170",
    "end": "2428010"
  },
  {
    "text": "so wherever just users here created by",
    "start": "2428010",
    "end": "2433440"
  },
  {
    "text": "and here the channel that get tweets and we have buffer and throttle and the",
    "start": "2433440",
    "end": "2441210"
  },
  {
    "text": "throttle data be sending to Weather Service so here you select I think so",
    "start": "2441210",
    "end": "2446940"
  },
  {
    "text": "this is one of utter primitives actor has a boss select and select a thing and",
    "start": "2446940",
    "end": "2453030"
  },
  {
    "text": "install it's got my passing so we can just map a synchronously our data to",
    "start": "2453030",
    "end": "2458190"
  },
  {
    "text": "some external service and this is a by the way it's a relly lism so we want to",
    "start": "2458190",
    "end": "2465440"
  },
  {
    "text": "do it in parallel up to 5 connections so if you run it now then we should be able",
    "start": "2465440",
    "end": "2473430"
  },
  {
    "text": "to",
    "start": "2473430",
    "end": "2475670"
  },
  {
    "text": "no it's not it's I think I think I didn't change the in the program yeah I",
    "start": "2481090",
    "end": "2488780"
  },
  {
    "text": "didn't change what runnable drop I want to use weather okay yeah so you see in",
    "start": "2488780",
    "end": "2504230"
  },
  {
    "text": "the beginning actually it was buffering something so we saw more weather forecasts in the beginning but now we",
    "start": "2504230",
    "end": "2510349"
  },
  {
    "text": "see names and approximately for every",
    "start": "2510349",
    "end": "2516050"
  },
  {
    "text": "tense name we get to organize oh sorry we get better coordinate sent to weather",
    "start": "2516050",
    "end": "2524540"
  },
  {
    "text": "service that returns back the weather so",
    "start": "2524540",
    "end": "2535750"
  },
  {
    "text": "to summarize what we have seen and the",
    "start": "2535750",
    "end": "2541400"
  },
  {
    "text": "examples we have gone through with akka streams I first thought about writing some bullet lists of takeaways but then",
    "start": "2541400",
    "end": "2549740"
  },
  {
    "text": "I thought that it's better probably to have some final thoughts or more",
    "start": "2549740",
    "end": "2554900"
  },
  {
    "text": "conceptual level because the extremes",
    "start": "2554900",
    "end": "2560470"
  },
  {
    "text": "started developing approximate design where we first heard about serverless",
    "start": "2560470",
    "end": "2565580"
  },
  {
    "text": "and those two technologies that are not comparable technically because serve",
    "start": "2565580",
    "end": "2571369"
  },
  {
    "text": "less it's much more spread extremes and streams in general it's a much more",
    "start": "2571369",
    "end": "2578180"
  },
  {
    "text": "narrow than service but like we serve a less we go from server bound computation",
    "start": "2578180",
    "end": "2586540"
  },
  {
    "text": "towards setting up environment where we don't care where which service will be",
    "start": "2586540",
    "end": "2593570"
  },
  {
    "text": "used to run our domain communication",
    "start": "2593570",
    "end": "2599030"
  },
  {
    "text": "rather all right I'll run our business workflow so of course it will be run on",
    "start": "2599030",
    "end": "2604550"
  },
  {
    "text": "some servers and probably on the bigger number of servers then if we configure everything manually but we sort of don't",
    "start": "2604550",
    "end": "2611330"
  },
  {
    "text": "err and this is conscious choice which let us focus more on solving domain",
    "start": "2611330",
    "end": "2616910"
  },
  {
    "text": "specific tasks the same way those of us who have experience with akka we will",
    "start": "2616910",
    "end": "2624110"
  },
  {
    "text": "focus on active bound computation like we were creating actors we were carefully designing communication",
    "start": "2624110",
    "end": "2631550"
  },
  {
    "text": "between actors instead just like with link statements we run this we create",
    "start": "2631550",
    "end": "2639290"
  },
  {
    "text": "using grab yourself the graph that shows declaration of what we're going to",
    "start": "2639290",
    "end": "2646090"
  },
  {
    "text": "compute we define sources flows and Street and things and active streams",
    "start": "2646090",
    "end": "2653990"
  },
  {
    "text": "using stream metallization and let us achieve same results with the same",
    "start": "2653990",
    "end": "2662420"
  },
  {
    "text": "performance but in much more code",
    "start": "2662420",
    "end": "2667550"
  },
  {
    "text": "compact way and shifting our focus to our domain specific tasks rather than",
    "start": "2667550",
    "end": "2673400"
  },
  {
    "text": "focusing on infrastructure on plumbing so this is what probably sort of the",
    "start": "2673400",
    "end": "2680660"
  },
  {
    "text": "main takeaway which I would like you to take from this session and this how much",
    "start": "2680660",
    "end": "2689180"
  },
  {
    "text": "time we have yeah we have some time so this completes my technical part of",
    "start": "2689180",
    "end": "2695180"
  },
  {
    "text": "session but I often complete them with something which is not technical and I'm",
    "start": "2695180",
    "end": "2704210"
  },
  {
    "text": "going to present you musical implications of interpretation of what I just said which is called extreme right",
    "start": "2704210",
    "end": "2712370"
  },
  {
    "text": "we're going to go through some extremes primitives which will make it easy for",
    "start": "2712370",
    "end": "2718880"
  },
  {
    "text": "you to use extremes in practice so if all the works let's and you can sing",
    "start": "2718880",
    "end": "2729290"
  },
  {
    "text": "along of course [Music]",
    "start": "2729290",
    "end": "2752980"
  },
  {
    "text": "this is up the street and this is the source that pieces at the street this is",
    "start": "2754920",
    "end": "2763390"
  },
  {
    "text": "enough at least that much from the source they feed the artistry this is",
    "start": "2763390",
    "end": "2769510"
  },
  {
    "text": " force Matt I think that mask from scissors that be state actors dream",
    "start": "2769510",
    "end": "2775680"
  },
  {
    "text": "this is image that flag from broadcasted for smashing that mask from the source",
    "start": "2775680",
    "end": "2781840"
  },
  {
    "text": "that piece take up the stream this is amount that electrons emerge the",
    "start": "2781840",
    "end": "2787750"
  },
  {
    "text": "electron broadcast the port mapping this map from the boss that we will act as",
    "start": "2787750",
    "end": "2793630"
  },
  {
    "text": "dream this is the balance that we fail to notice the leg from the merge desk",
    "start": "2793630",
    "end": "2799180"
  },
  {
    "text": "electron drops out that both map I think that math from the for that piece these actors dream this is to be that combined",
    "start": "2799180",
    "end": "2807970"
  },
  {
    "text": "on the talented pieces you know that electron beam a desk electron the star performer I think that much from the",
    "start": "2807970",
    "end": "2814960"
  },
  {
    "text": "source that people act as dream this is the drug that really from busy that",
    "start": "2814960",
    "end": "2821050"
  },
  {
    "text": "combines from the balances pieces will notice connect on the method selection discussed at both maps in this map from",
    "start": "2821050",
    "end": "2828310"
  },
  {
    "text": "the 3rd St the actors dream this is that while that pull from the drug that",
    "start": "2828310",
    "end": "2834280"
  },
  {
    "text": "remove from the Fitness conversions and balance and precinct and all that connects on the madness collects on the",
    "start": "2834280",
    "end": "2840370"
  },
  {
    "text": "darknet both laugh I think there's math on this all that these three actors dream this is a struggle that people",
    "start": "2840370",
    "end": "2847660"
  },
  {
    "text": "acquire they've put from the group that remove from the piece that combines of the diamond that difference in load",
    "start": "2847660",
    "end": "2853420"
  },
  {
    "text": "estimates of the magnet I said I've got the first mass of investment from people that B we packed",
    "start": "2853420",
    "end": "2859690"
  },
  {
    "text": "up dream just a bit of law that don't like the throttle that we sounded while that proves on the drop that we move",
    "start": "2859690",
    "end": "2866440"
  },
  {
    "text": "somebody that combines on the Ballon d'Or pieces notice collect from the merge that collects on the process both",
    "start": "2866440",
    "end": "2872499"
  },
  {
    "text": "mass in that mushroom because their feces actors dream this is the think",
    "start": "2872499",
    "end": "2882609"
  },
  {
    "text": "that feel from the applause that don't back the throttle that big sound that one that pulls from the drop that",
    "start": "2882609",
    "end": "2888789"
  },
  {
    "text": "removed from the reset combined from the talent that we fail to not that select want to match that the like from the",
    "start": "2888789",
    "end": "2895749"
  },
  {
    "text": "start that faults master things that map from the first that feeds these actors",
    "start": "2895749",
    "end": "2900880"
  },
  {
    "text": "green thank you enjoy the rest of the",
    "start": "2900880",
    "end": "2911199"
  },
  {
    "text": "conference and I think you still have a few more minutes so if you have any",
    "start": "2911199",
    "end": "2917380"
  },
  {
    "text": "questions that I'm here questions yeah",
    "start": "2917380",
    "end": "2928588"
  },
  {
    "text": "yeah you can I didn't go into details but you with dreams you have difference",
    "start": "2939240",
    "end": "2945370"
  },
  {
    "text": "between error and failure of course when stream fails it's like it's done that's",
    "start": "2945370",
    "end": "2951880"
  },
  {
    "text": "it but individual elements may fail it's just an error and you can still continue",
    "start": "2951880",
    "end": "2959980"
  },
  {
    "text": "processing and yes you can of course",
    "start": "2959980",
    "end": "2965490"
  },
  {
    "text": "that that would be more code to write but you can you can back up with",
    "start": "2965490",
    "end": "2972450"
  },
  {
    "text": "supervision strategies that that provides like individual handling on",
    "start": "2972450",
    "end": "2978250"
  },
  {
    "text": "each processing take more questions good",
    "start": "2978250",
    "end": "2991900"
  },
  {
    "text": "question and I didn't mention in my talk for the time being",
    "start": "2991900",
    "end": "2997500"
  },
  {
    "text": "there is no distributed motivation for ARCA streams that means that the stream",
    "start": "2997500",
    "end": "3003750"
  },
  {
    "text": "declaration will be run on the same node of course you can call external services",
    "start": "3003750",
    "end": "3009780"
  },
  {
    "text": "you can run at a enclosed environment you can so different stream instances",
    "start": "3009780",
    "end": "3015180"
  },
  {
    "text": "may be run in different across the nodes but you can't split processing stages between different nodes so it's only",
    "start": "3015180",
    "end": "3022560"
  },
  {
    "text": "local scenario for the time being and it looks like for some time because I saw",
    "start": "3022560",
    "end": "3028620"
  },
  {
    "text": "discussion on forums and then people from Scala Hockaday some contributors",
    "start": "3028620",
    "end": "3034650"
  },
  {
    "text": "said that it is not going to be prioritized in foreseeable future and",
    "start": "3034650",
    "end": "3040470"
  },
  {
    "text": "probably it means that it won't appear on academic two more questions okay",
    "start": "3040470",
    "end": "3049920"
  },
  {
    "text": "thank you",
    "start": "3049920",
    "end": "3052490"
  }
]