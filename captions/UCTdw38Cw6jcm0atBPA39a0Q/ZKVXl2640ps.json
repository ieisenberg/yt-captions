[
  {
    "start": "0",
    "end": "74000"
  },
  {
    "text": "right uh we'll go ahead and get started so uh this is entity framework core unchained",
    "start": "4160",
    "end": "9679"
  },
  {
    "text": "um getting the best performance from your orm",
    "start": "9679",
    "end": "15040"
  },
  {
    "text": "the spoiler is not don't use entity framework core so just want to get that out of the way",
    "start": "15200",
    "end": "21359"
  },
  {
    "text": "um so we're going to start out uh we're going to talk about configuration um arguably one of the more important",
    "start": "21359",
    "end": "27920"
  },
  {
    "text": "pieces is making sure you've got your configuration right talk a little bit about access patterns",
    "start": "27920",
    "end": "34000"
  },
  {
    "text": "any framework does some very interesting things with some crud operations",
    "start": "34000",
    "end": "39360"
  },
  {
    "text": "we'll learn about the really really easy foot guns to find",
    "start": "39360",
    "end": "44879"
  },
  {
    "text": "and there are a couple we are of course going to touch on database design because",
    "start": "44879",
    "end": "52160"
  },
  {
    "text": "if you have a poor database design nothing else that i'm talking about is going to matter um",
    "start": "52160",
    "end": "58559"
  },
  {
    "text": "and then uh lastly we're just gonna have some honest conversation about things you shouldn't do with the f core i've got a couple of war stories there um",
    "start": "58559",
    "end": "66400"
  },
  {
    "text": "including a recent one where i did not follow my own advice he's good",
    "start": "66400",
    "end": "72880"
  },
  {
    "text": "right uh who am i uh so my name is dan malott i'm a senior principal for west monroe uh in our product engineering",
    "start": "72880",
    "end": "79759"
  },
  {
    "start": "74000",
    "end": "74000"
  },
  {
    "text": "practice west monroe is a business and technology consulting firm based primarily in the united states we",
    "start": "79759",
    "end": "85439"
  },
  {
    "text": "recently opened an office here in london they're primarily focused with mergers and acquisitions i.e making money off of",
    "start": "85439",
    "end": "91200"
  },
  {
    "text": "other people's work there are less charitable ways i can",
    "start": "91200",
    "end": "97200"
  },
  {
    "text": "describe it i've been developing software since 2011 in various capacities uh",
    "start": "97200",
    "end": "103840"
  },
  {
    "text": "my first job i was the dba uh not necessarily voluntarily",
    "start": "103840",
    "end": "111280"
  },
  {
    "text": "um but now i primarily do development work although a lot of times that means developing powerpoints",
    "start": "111280",
    "end": "118399"
  },
  {
    "text": "uh primary experience in microsoft i've also unfortunately written that four letter language",
    "start": "118399",
    "end": "124000"
  },
  {
    "text": "and i am a usa hockey referee i put ice in parentheses because hockey here means",
    "start": "124000",
    "end": "129840"
  },
  {
    "text": "something different than it does in the united states right twitter github linkedin",
    "start": "129840",
    "end": "137280"
  },
  {
    "text": "if you want to get a hold of me right so i'm gonna assume you guys all know",
    "start": "137280",
    "end": "142959"
  },
  {
    "start": "140000",
    "end": "140000"
  },
  {
    "text": "this but i'm gonna go over it anyway um so any framework core is made up of two",
    "start": "142959",
    "end": "148160"
  },
  {
    "text": "components uh there's an object relational mapper which is taking the results of queries",
    "start": "148160",
    "end": "154239"
  },
  {
    "text": "and mapping them into net objects whether those be records or pocos or",
    "start": "154239",
    "end": "159280"
  },
  {
    "text": "what have you right and then the other piece of it is a really really powerful query generator",
    "start": "159280",
    "end": "165599"
  },
  {
    "text": "that translates your link or link q statements into",
    "start": "165599",
    "end": "171040"
  },
  {
    "text": "a sql that's actually executed on the database or whatever query language happens to be",
    "start": "171040",
    "end": "177440"
  },
  {
    "text": "right if you're using cosmos that might be different",
    "start": "177440",
    "end": "181680"
  },
  {
    "text": "and the query generator is both",
    "start": "182840",
    "end": "188319"
  },
  {
    "text": "the solution and the source of many of our issues um and i'll talk about that as we go on",
    "start": "188319",
    "end": "193760"
  },
  {
    "text": "but suffice to say that writing a query generator that is going to generate something that executes against every",
    "start": "193760",
    "end": "199840"
  },
  {
    "text": "version of sql going back to like i guess 2005 is a difficult challenge",
    "start": "199840",
    "end": "207120"
  },
  {
    "text": "right so let's talk about configuration right so when you go to",
    "start": "207120",
    "end": "214400"
  },
  {
    "text": "add entity framework to your application and you go consult the microsoft docs",
    "start": "214400",
    "end": "220319"
  },
  {
    "start": "220000",
    "end": "220000"
  },
  {
    "text": "you get something that looks an awful lot like this which is great it's easy it's a",
    "start": "220319",
    "end": "226560"
  },
  {
    "text": "one-liner who doesn't like a one-liner of code right that's why we see nested ternaries everywhere",
    "start": "226560",
    "end": "233120"
  },
  {
    "text": "um and so it's really just we have the db context it's registered in our dependency injection container",
    "start": "233120",
    "end": "238640"
  },
  {
    "text": "i'm using net apis not in the minimal",
    "start": "238640",
    "end": "244319"
  },
  {
    "text": "mode here clearly connection string",
    "start": "244319",
    "end": "249599"
  },
  {
    "text": "in this case stored in a configuration object and we're good to go right it works and it does just work",
    "start": "249599",
    "end": "256639"
  },
  {
    "text": "um there are some things that are probably happening under the hood or that are happening under the hood that",
    "start": "256639",
    "end": "261680"
  },
  {
    "text": "you may not actually want uh so for one",
    "start": "261680",
    "end": "267280"
  },
  {
    "text": "there's no query retry who develops applications that live in the cloud",
    "start": "267280",
    "end": "273120"
  },
  {
    "text": "who develop apps develop applications that live on premise who develops an environment that has 100",
    "start": "273520",
    "end": "280560"
  },
  {
    "text": "uptime on your sql server oh good no one's lying to themselves",
    "start": "280560",
    "end": "287280"
  },
  {
    "text": "right connections go down who develops an environment where there's a dns problem once a month",
    "start": "287520",
    "end": "295440"
  },
  {
    "text": "oh nobody's a million to that one either come on it's always dns",
    "start": "295600",
    "end": "301039"
  },
  {
    "text": "right so query retries is important right and for a long time this was something",
    "start": "301039",
    "end": "306080"
  },
  {
    "text": "that was sort of left to the developer to kind of handle um and",
    "start": "306080",
    "end": "311120"
  },
  {
    "text": "in our defaults we don't have any retry that might be important you might want that",
    "start": "311120",
    "end": "316880"
  },
  {
    "text": "um all queries are tracked what do i mean by that so in internal to the db context right so",
    "start": "316880",
    "end": "323440"
  },
  {
    "text": "the db context is our container that holds all of our connection information and models and all the mapping",
    "start": "323440",
    "end": "328960"
  },
  {
    "text": "information from the database it will track all of the results that it",
    "start": "328960",
    "end": "334400"
  },
  {
    "text": "brings back and it does this for a couple of reasons one it does this because in theory if you ask for the same object four times",
    "start": "334400",
    "end": "342240"
  },
  {
    "text": "entity framework core is again in theory smart enough to only ask the database for it once",
    "start": "342240",
    "end": "347280"
  },
  {
    "text": "right um because nothing's changed",
    "start": "347280",
    "end": "352639"
  },
  {
    "text": "the other reason it does it is because any framework core has a huge amount of",
    "start": "352639",
    "end": "358639"
  },
  {
    "text": "change tracking logic built into it so that if i pull an object back from my database make a bunch of changes to it",
    "start": "358639",
    "end": "365120"
  },
  {
    "text": "and call save changes it knows exactly what to do to persist that to the database or if i pull an object back i",
    "start": "365120",
    "end": "370319"
  },
  {
    "text": "don't do anything with it and call save changes it does well you didn't do anything so i'm not going to do anything",
    "start": "370319",
    "end": "376720"
  },
  {
    "text": "and this is this is really powerful right it automates a lot of that uh change tracking away from us",
    "start": "376720",
    "end": "383600"
  },
  {
    "text": "but that might not be the best thing for your use case um related entities are explicitly",
    "start": "383600",
    "end": "390639"
  },
  {
    "text": "loaded um fine um what is what does that mean it means",
    "start": "390639",
    "end": "397680"
  },
  {
    "text": "that if i have a user that's a child to a post it's going to load that",
    "start": "397680",
    "end": "404400"
  },
  {
    "text": "uh and you don't really get much logging of errors or warnings you get a connection failed",
    "start": "404400",
    "end": "410160"
  },
  {
    "text": "so sorry try again later um again in a production environment",
    "start": "410160",
    "end": "416560"
  },
  {
    "text": "it's fine in your development environment we might want some more information about why our",
    "start": "416560",
    "end": "422400"
  },
  {
    "text": "exquisitely constructed link statement that's 40 lines long failed",
    "start": "422400",
    "end": "427599"
  },
  {
    "text": "right so what can we do about this um well so first of all there's a couple of things this isn't",
    "start": "427599",
    "end": "432880"
  },
  {
    "text": "all bad right i've kind of talked about that like there are some things that are fine and some things that are probably not fine",
    "start": "432880",
    "end": "439039"
  },
  {
    "text": "right so you do want to implement a retry policy um you do want to use the proper",
    "start": "439039",
    "end": "445280"
  },
  {
    "text": "tracking behavior for your use case i will dive into that much more in a few minutes",
    "start": "445280",
    "end": "450319"
  },
  {
    "text": "you do want to log errors and warnings in the development environment",
    "start": "450319",
    "end": "455599"
  },
  {
    "text": "and [Music] you may also want to log some sensitive",
    "start": "455919",
    "end": "461680"
  },
  {
    "text": "data if you were trying to make your debugging easier um and you don't want to enable lazier",
    "start": "461680",
    "end": "467759"
  },
  {
    "text": "eager loading proxies now microsoft is so on board with that one that those are no longer options unless",
    "start": "467759",
    "end": "473759"
  },
  {
    "text": "you download specific nuget packages right um lazy loading is where we get the n plus",
    "start": "473759",
    "end": "480240"
  },
  {
    "text": "one problem where well i got my users i iterate all through all",
    "start": "480240",
    "end": "485759"
  },
  {
    "text": "their posts and now i'm like querying the database like mad and if you're in an on-premise environment the sand administrator's calling you",
    "start": "485759",
    "end": "492720"
  },
  {
    "text": "if you're in a cloud environment your finance department's calling you",
    "start": "492720",
    "end": "498400"
  },
  {
    "text": "and eager loading is i've just loaded the entire database by loading one user",
    "start": "499039",
    "end": "504479"
  },
  {
    "text": "oops right so here's a suggested configuration again this is",
    "start": "504840",
    "end": "510479"
  },
  {
    "text": "got an in is development flag make that a little bit bigger right so the first thing up there",
    "start": "510479",
    "end": "516880"
  },
  {
    "start": "513000",
    "end": "513000"
  },
  {
    "text": "got a retry policy in this case four times one second each time",
    "start": "516880",
    "end": "522800"
  },
  {
    "text": "now you're going to want you know just like we've you you hear this a lot at conferences this is",
    "start": "522800",
    "end": "528560"
  },
  {
    "text": "example code don't do this in production uh you're going to want to do something more clever right so in a cloud scenario",
    "start": "528560",
    "end": "535920"
  },
  {
    "text": "um you know you probably want some sort of like fibonacci back off right okay one",
    "start": "535920",
    "end": "541519"
  },
  {
    "text": "second one second two right okay we all know that um but here it works fine right",
    "start": "541519",
    "end": "548720"
  },
  {
    "text": "um and you'll notice that error numbers to add so the retry comes out of the box with a whole bunch of like the database didn't",
    "start": "548720",
    "end": "555519"
  },
  {
    "text": "respond you had a login error uh there's a couple other ones but like it",
    "start": "555519",
    "end": "562480"
  },
  {
    "text": "covers like your standard like six things that a sql server might like barf up if it just happens to not be there",
    "start": "562480",
    "end": "569360"
  },
  {
    "text": "um but you can add some right so like if you get a uh",
    "start": "569360",
    "end": "574480"
  },
  {
    "text": "well for example if you get a key conflict right or if you get a lock deadlock or",
    "start": "574959",
    "end": "580160"
  },
  {
    "text": "something like that you can add those uh in this case i am",
    "start": "580160",
    "end": "586320"
  },
  {
    "text": "putting in query tracking behavior no tracking that's more just to illustrate how you do that again we'll get to that",
    "start": "586320",
    "end": "591600"
  },
  {
    "text": "in a minute and then uh in development we want to log some additional things",
    "start": "591600",
    "end": "598240"
  },
  {
    "text": "and i do very strongly urge you to do this at least in your local development um if",
    "start": "598240",
    "end": "604079"
  },
  {
    "text": "you're shipping your logs anywhere consult your security people first",
    "start": "604079",
    "end": "609120"
  },
  {
    "text": "so the first is able to enable detailed errors so that gives us field level errors so if for example i try to stuff",
    "start": "609120",
    "end": "617360"
  },
  {
    "text": "a six so in the united states all of our postcodes are five digits right",
    "start": "617360",
    "end": "622800"
  },
  {
    "text": "and if i am taking a us-centric approach to my database design and i've",
    "start": "622800",
    "end": "629040"
  },
  {
    "text": "done a car five or something like that or varchar5 and i try to stuff say a uk postcode",
    "start": "629040",
    "end": "634160"
  },
  {
    "text": "into it it's going to tell me hey you're an idiot",
    "start": "634160",
    "end": "639519"
  },
  {
    "text": "or at least you didn't think this through sensitive data logging so that is we're",
    "start": "639519",
    "end": "646240"
  },
  {
    "text": "gonna get parameter values um really useful right like now i know that",
    "start": "646240",
    "end": "653440"
  },
  {
    "text": "my id of one returned nothing or my id of one returned like caused an error and i can go look into that in the database",
    "start": "653440",
    "end": "659839"
  },
  {
    "text": "don't do that in production don't do that in production",
    "start": "659839",
    "end": "665200"
  },
  {
    "text": "don't do that in production and then i can configure some additional",
    "start": "665200",
    "end": "670320"
  },
  {
    "text": "warnings so these warnings give us a different additional information that entity",
    "start": "670320",
    "end": "675440"
  },
  {
    "text": "framer core is emitting but usually not doing anything with and in this case",
    "start": "675440",
    "end": "680640"
  },
  {
    "text": "uh the two that i always care about are a first without order by and filter warning",
    "start": "680640",
    "end": "686959"
  },
  {
    "text": "uh and so that's if i do a dot first or dot first or default and don't order buy or filter at all",
    "start": "686959",
    "end": "693600"
  },
  {
    "text": "right uh the reason for that is most databases order is not guaranteed",
    "start": "693600",
    "end": "700160"
  },
  {
    "text": "in your query results we all know that right",
    "start": "700160",
    "end": "705519"
  },
  {
    "text": "or we've all had to find that out the hard way um and the other one is a row limiting",
    "start": "705519",
    "end": "712320"
  },
  {
    "text": "operation without order by ironing right and that's for the same reason right order is not guaranteed so if i just call give me the first",
    "start": "712320",
    "end": "719200"
  },
  {
    "text": "100 of these give me the next 100 of these i might get the same 100",
    "start": "719200",
    "end": "725440"
  },
  {
    "text": "or i might worse get like 100 and then 50 new ones",
    "start": "725440",
    "end": "732000"
  },
  {
    "text": "um right so these are useful things to get an error like oops i forgot to do this or",
    "start": "732000",
    "end": "737279"
  },
  {
    "text": "you know maybe there's a use case here that i wasn't covered in my user story but i need to cover later on",
    "start": "737279",
    "end": "744880"
  },
  {
    "text": "um and there are a huge number of additional core event ids that get uh",
    "start": "744880",
    "end": "750959"
  },
  {
    "text": "emitted by any framework core some of them are kind of like oh i executed a query thanks",
    "start": "750959",
    "end": "757440"
  },
  {
    "text": "uh some of them are marginally more useful um",
    "start": "757440",
    "end": "762720"
  },
  {
    "text": "but you can go on the docs docs.microsoft.com in the framework core section and find out all the ones that",
    "start": "762720",
    "end": "768480"
  },
  {
    "text": "there are there may be some additional that you want to use some of the some of the ones that",
    "start": "768480",
    "end": "775920"
  },
  {
    "text": "used to be optional are now guaranteed which is kind of nice there are also relational event ids",
    "start": "775920",
    "end": "783839"
  },
  {
    "text": "which tell you some additional information about how it's how any framework core is uh",
    "start": "783839",
    "end": "790720"
  },
  {
    "text": "like dealing with your model against the database right",
    "start": "790720",
    "end": "797680"
  },
  {
    "text": "so let's talk about crud",
    "start": "797680",
    "end": "802000"
  },
  {
    "text": "by the way i'm really easy to spot at conferences these days i don't think i own anything that doesn't say west monroe on it um",
    "start": "808240",
    "end": "815200"
  },
  {
    "text": "it's working at a place for a bunch of years does right so uh",
    "start": "815200",
    "end": "820240"
  },
  {
    "text": "the first thing that happens so crud is create read update delete right okay we all know that so we'll take those in order and the",
    "start": "820240",
    "end": "826560"
  },
  {
    "text": "first thing we'll talk about is inserting records okay if we insert one record we get one",
    "start": "826560",
    "end": "832000"
  },
  {
    "text": "insert statement that's expected um but if we insert more than one record",
    "start": "832000",
    "end": "841639"
  },
  {
    "text": "we got a merge statement and this is against sql server other providers will do different things",
    "start": "842639",
    "end": "849920"
  },
  {
    "text": "um and so that that's sort of interesting right like why is entity framework core",
    "start": "850399",
    "end": "856000"
  },
  {
    "text": "making that choice um and it",
    "start": "856000",
    "end": "862000"
  },
  {
    "text": "yeah so those two lines right i just added a couple of users",
    "start": "862000",
    "end": "869040"
  },
  {
    "text": "called save changes and got a merge statement um and you can see that i'm emitting all",
    "start": "869040",
    "end": "875279"
  },
  {
    "text": "of the parameters okay so you can see the data that i'm shoving in there",
    "start": "875279",
    "end": "880800"
  },
  {
    "text": "and then the sql query um so",
    "start": "880800",
    "end": "886320"
  },
  {
    "start": "884000",
    "end": "884000"
  },
  {
    "text": "this is a really curious choice and it's a change in behavior who used entity framework six or previous",
    "start": "886320",
    "end": "894000"
  },
  {
    "text": "okay we've got a few right so this is different than what at any framework traditionally framework did right",
    "start": "894000",
    "end": "900880"
  },
  {
    "text": "um and it's not entirely illogical um",
    "start": "900880",
    "end": "906240"
  },
  {
    "text": "and for those of you who know who brent ozar is he actually has a blog post from a couple years ago that digs into this",
    "start": "906240",
    "end": "912000"
  },
  {
    "text": "much more but essentially so single insert statements are slow",
    "start": "912000",
    "end": "918560"
  },
  {
    "text": "that's true ish inserting multiple records is more",
    "start": "918560",
    "end": "923600"
  },
  {
    "text": "efficient again that's true ish right as with everything it depends",
    "start": "923600",
    "end": "930560"
  },
  {
    "text": "um so the result of that thinking is let's use a merge statement to protect",
    "start": "930560",
    "end": "935600"
  },
  {
    "text": "ourselves from strange sequel generation issues right because if i were to go",
    "start": "935600",
    "end": "940639"
  },
  {
    "text": "hand write what it generated i would use some sort of table valued",
    "start": "940639",
    "end": "946480"
  },
  {
    "text": "constructor in my insert right so that's insert my list of queries",
    "start": "946480",
    "end": "952959"
  },
  {
    "text": "and then select and hard code all that stuff in there right",
    "start": "952959",
    "end": "958480"
  },
  {
    "text": "and so they chose to use emerge instead right because building a table valid constructor is",
    "start": "958480",
    "end": "963920"
  },
  {
    "text": "weird even though they actually are kind of doing that",
    "start": "963920",
    "end": "969839"
  },
  {
    "text": "um so it's this isn't a bad choice right um",
    "start": "970160",
    "end": "978079"
  },
  {
    "text": "this is of between using merge and using a bunch",
    "start": "978079",
    "end": "983360"
  },
  {
    "text": "of insert statements this is fine right uh in sql server merge does have some",
    "start": "983360",
    "end": "989920"
  },
  {
    "text": "issues with deadlocks this statement",
    "start": "989920",
    "end": "994959"
  },
  {
    "text": "is not constructed in a way that you're going to run into that particular issue because we are just inserting to the",
    "start": "994959",
    "end": "1000720"
  },
  {
    "text": "table the deadlock issue happens when you're inserting or updating",
    "start": "1000720",
    "end": "1006160"
  },
  {
    "text": "or deleting um but in your environment it may make",
    "start": "1006160",
    "end": "1011759"
  },
  {
    "text": "sense to force single insert statements and we can do this um",
    "start": "1011759",
    "end": "1018160"
  },
  {
    "text": "so the break point is three or more records so if you have one record or two record you get insert statements if you",
    "start": "1018160",
    "end": "1024480"
  },
  {
    "text": "have three records you get merge it's an odd breakpoint but i suppose",
    "start": "1024480",
    "end": "1029678"
  },
  {
    "text": "they did some testing but you can change the max batch size",
    "start": "1029679",
    "end": "1036240"
  },
  {
    "text": "in your configuration and say my batches are one",
    "start": "1036240",
    "end": "1042240"
  },
  {
    "text": "uh this is fine it does what you expect it to do now we'll get instead of one merge statement we'll get",
    "start": "1042240",
    "end": "1048319"
  },
  {
    "text": "three insert statements we'll get into something that's not so good side effect of this a little bit later on",
    "start": "1048319",
    "end": "1055120"
  },
  {
    "text": "right okay reading data i promised we were going to talk about query tracking so",
    "start": "1055679",
    "end": "1060960"
  },
  {
    "start": "1056000",
    "end": "1056000"
  },
  {
    "text": "reading data we're just pulling data back from the database right simplest thing you can do with an rrm",
    "start": "1060960",
    "end": "1066240"
  },
  {
    "text": "it's arguably the use case that you should be using an orm for um",
    "start": "1066240",
    "end": "1071600"
  },
  {
    "text": "and there's a difference right so if you're going to simply return the data like through an api or to",
    "start": "1071600",
    "end": "1080640"
  },
  {
    "text": "like a ui on your screen if you're in winforms land and you're not making any modifications",
    "start": "1080640",
    "end": "1087039"
  },
  {
    "text": "to the entities that you pull back there is no reason to track them",
    "start": "1087039",
    "end": "1092799"
  },
  {
    "text": "zero um but if you're going to be modifying the original entities",
    "start": "1092840",
    "end": "1099200"
  },
  {
    "text": "um and saving them back then you should use as tracking now most",
    "start": "1099200",
    "end": "1105039"
  },
  {
    "text": "of us when we're building apis we have discrete",
    "start": "1105039",
    "end": "1110320"
  },
  {
    "text": "um read and update or delete or",
    "start": "1110320",
    "end": "1115360"
  },
  {
    "text": "create endpoints you're very rarely like pulling stuff and doing a whole bunch of",
    "start": "1115360",
    "end": "1121520"
  },
  {
    "text": "and putting it back in right in a simple case um",
    "start": "1121520",
    "end": "1126880"
  },
  {
    "text": "so you can mix and match these right so you can configure your default behavior and then on your query itself say i do",
    "start": "1128240",
    "end": "1134240"
  },
  {
    "text": "want this to be tracking or i don't want this to be tracking right and so it's choosing which one is your",
    "start": "1134240",
    "end": "1141600"
  },
  {
    "text": "majority use case so in an api situation where you're serving",
    "start": "1141600",
    "end": "1147039"
  },
  {
    "text": "a bunch of data it's going to be no tracking and then okay well we're actually creating so we need to track this guy",
    "start": "1147039",
    "end": "1153840"
  },
  {
    "start": "1156000",
    "end": "1156000"
  },
  {
    "text": "um updates and deletes it kind of is what it is right",
    "start": "1156000",
    "end": "1162880"
  },
  {
    "text": "however interestingly enough updates do not generate a merge statement they're just updates",
    "start": "1163760",
    "end": "1170640"
  },
  {
    "text": "go figure they always happen in single statements",
    "start": "1170640",
    "end": "1177760"
  },
  {
    "text": "so if i delete one thousand things i get one thousand deletes if i update one thousand things i get one thousand",
    "start": "1177760",
    "end": "1183280"
  },
  {
    "text": "updates uh the only difference is if we mess with our max batch size",
    "start": "1183280",
    "end": "1188960"
  },
  {
    "text": "uh we get either one connection or",
    "start": "1188960",
    "end": "1194799"
  },
  {
    "text": "a thousand connections seems bad um so again that's",
    "start": "1194799",
    "end": "1200160"
  },
  {
    "text": "want to pay attention to that",
    "start": "1200160",
    "end": "1204039"
  },
  {
    "text": "speaking of easy ways to shoot yourself in the foot okay so bulk manipulation of data",
    "start": "1214880",
    "end": "1222320"
  },
  {
    "text": "bad don't do that with any framework uh lazy loading entities bad don't do",
    "start": "1222320",
    "end": "1228880"
  },
  {
    "text": "that with any rm uh using tracking for read-only scenarios",
    "start": "1228880",
    "end": "1234880"
  },
  {
    "text": "not bad but you're costing yourself about 30 of your performance um",
    "start": "1234880",
    "end": "1240880"
  },
  {
    "text": "may matter and then retry policy things fall offline for a minute so",
    "start": "1240880",
    "end": "1247360"
  },
  {
    "text": "interestingly i harp on the retry policy because when i was putting together the code samples for this talk i was using a",
    "start": "1247360",
    "end": "1253760"
  },
  {
    "text": "sql azure serverless which is great because it's really cheap it's not great because it goes to sleep",
    "start": "1253760",
    "end": "1260000"
  },
  {
    "text": "every like 10 minutes of non-use and then the first query that you run after it starts up times out",
    "start": "1260000",
    "end": "1267840"
  },
  {
    "text": "while it's waking up fun um and then your you know app throws a",
    "start": "1267840",
    "end": "1274640"
  },
  {
    "text": "big giant exception because it couldn't even create a connection to the database because it wasn't awake great",
    "start": "1274640",
    "end": "1281840"
  },
  {
    "text": "right okay so uh what are some other ways to destroy performance how many",
    "start": "1281840",
    "end": "1286880"
  },
  {
    "start": "1282000",
    "end": "1282000"
  },
  {
    "text": "people run scaffold db context and just go with it",
    "start": "1286880",
    "end": "1293440"
  },
  {
    "text": "great don't do that but using the auto-generated entities in general can result in far too much data",
    "start": "1293840",
    "end": "1300240"
  },
  {
    "text": "coming back so uh loading too many related tables or",
    "start": "1300240",
    "end": "1306960"
  },
  {
    "text": "too few so loading related tables.include that adds joins to your statement it",
    "start": "1306960",
    "end": "1313120"
  },
  {
    "text": "adds complexity to your statement if you do like six of those",
    "start": "1313120",
    "end": "1319360"
  },
  {
    "text": "fine if you do 60 of those write yourself a view um",
    "start": "1319360",
    "end": "1325600"
  },
  {
    "text": "async the async promoting model is really really mature in.net at this",
    "start": "1325600",
    "end": "1330840"
  },
  {
    "text": "point you should use it the async for each one that's a weird construct but it works",
    "start": "1330840",
    "end": "1339440"
  },
  {
    "text": "and then defeating indexes by not understanding how your database uses them",
    "start": "1340159",
    "end": "1345200"
  },
  {
    "text": "got an example for that guy right so what are the solutions here right so we can project",
    "start": "1345200",
    "end": "1351919"
  },
  {
    "text": "only what we need out of a query and entity framework core is smart enough to only pull back what we need",
    "start": "1351919",
    "end": "1357600"
  },
  {
    "text": "yeah that's gonna result in better performance uh only include the data you actually need",
    "start": "1357600",
    "end": "1363840"
  },
  {
    "text": "right so if i'm loading up a user profile and",
    "start": "1363840",
    "end": "1369200"
  },
  {
    "text": "i just have this like generic get user so all my examples are from stack overflows like users have posts right",
    "start": "1369200",
    "end": "1375440"
  },
  {
    "text": "and i always load the posts like i probably don't need to if i'm just showing a user's profile",
    "start": "1375440",
    "end": "1381440"
  },
  {
    "text": "um always use async unless you have a really good reason not to",
    "start": "1381440",
    "end": "1387039"
  },
  {
    "text": "um and then learn a bit about how your database engine chooses which indexes to use",
    "start": "1387039",
    "end": "1392640"
  },
  {
    "text": "like i said we'll get into that all right so how can we use select to limit fields so",
    "start": "1392640",
    "end": "1398240"
  },
  {
    "start": "1394000",
    "end": "1394000"
  },
  {
    "text": "um everybody in here has used stack overflow right yeah",
    "start": "1398240",
    "end": "1403600"
  },
  {
    "text": "okay so in the stack overflow database the posts table includes a whole lot of stuff",
    "start": "1403600",
    "end": "1410320"
  },
  {
    "text": "um but say i'm just gonna show the body of the post well i",
    "start": "1410320",
    "end": "1416400"
  },
  {
    "text": "really only need the body and probably an id so that i can keep track of it there's no reason to load the entire",
    "start": "1416400",
    "end": "1422400"
  },
  {
    "text": "post entity so what i can do is define myself a custom post entity",
    "start": "1422400",
    "end": "1428240"
  },
  {
    "text": "in a different namespace project our query right so that's what we talked about with the select guy",
    "start": "1428240",
    "end": "1434640"
  },
  {
    "text": "that's a projection and then we get one much smaller sql",
    "start": "1434640",
    "end": "1440159"
  },
  {
    "text": "which shows better in our log but two uh we get",
    "start": "1440159",
    "end": "1446320"
  },
  {
    "text": "less data coming back right and so the less data you send over the wire the",
    "start": "1446320",
    "end": "1452880"
  },
  {
    "text": "faster it's going to go right we can't defeat physics yet",
    "start": "1452880",
    "end": "1458159"
  },
  {
    "text": "um just as an interesting thing you guys probably noticed i used single or default",
    "start": "1458159",
    "end": "1463520"
  },
  {
    "text": "and i got top two which entity framework does to tell you if it gets more than one result",
    "start": "1463520",
    "end": "1469919"
  },
  {
    "text": "so it can throw an exception at you it's nice um",
    "start": "1469919",
    "end": "1476720"
  },
  {
    "text": "cool async yeah not not a lot to say that i haven't",
    "start": "1476880",
    "end": "1482000"
  },
  {
    "text": "already said uh essentially the top one is going to perform better than the bottom one",
    "start": "1482000",
    "end": "1487919"
  },
  {
    "text": "all else being equal now if you have 10 users who cares",
    "start": "1487919",
    "end": "1494480"
  },
  {
    "text": "if you have 10 million users you're probably going to want to do this also if you have constraints about",
    "start": "1494480",
    "end": "1501600"
  },
  {
    "text": "like auto scaling in the cloud things like um",
    "start": "1501600",
    "end": "1508000"
  },
  {
    "text": "under load async is going to give you more responsiveness that's it",
    "start": "1508159",
    "end": "1514120"
  },
  {
    "start": "1514000",
    "end": "1514000"
  },
  {
    "text": "uh indexing right i did mention i was going to talk about this so indexes are great right",
    "start": "1514720",
    "end": "1520159"
  },
  {
    "text": "how many of you have a dba group that you get to work with a couple okay how many of you also play",
    "start": "1520159",
    "end": "1526559"
  },
  {
    "text": "the role of the dba we've got a couple there too yeah so",
    "start": "1526559",
    "end": "1532400"
  },
  {
    "text": "i have a slow query you could put an index on it that's going to speed it up right scribble grabble grumble sure",
    "start": "1532400",
    "end": "1539840"
  },
  {
    "text": "um i will say indexes will also slow",
    "start": "1539840",
    "end": "1546159"
  },
  {
    "text": "inserts updates and deletes because you have to update the index",
    "start": "1546159",
    "end": "1552159"
  },
  {
    "text": "um but the really important thing here is that indexes are only used in certain",
    "start": "1552159",
    "end": "1558480"
  },
  {
    "text": "circumstances this depends on your database engine so here we're talking sql server specifically",
    "start": "1558480",
    "end": "1565039"
  },
  {
    "text": "if you have an index on a string field whether that be ansi or whether that be ascii or unicode",
    "start": "1566880",
    "end": "1575440"
  },
  {
    "text": "and you use a wild card in your search and you start the you start the search with a wildcard",
    "start": "1575440",
    "end": "1582559"
  },
  {
    "text": "sql server will not use your index so",
    "start": "1582559",
    "end": "1588080"
  },
  {
    "text": "if you say ends with instead it starts with",
    "start": "1588080",
    "end": "1594240"
  },
  {
    "text": "you are now no longer using your index and your query is going to be slow now depending on the size of your table may",
    "start": "1594240",
    "end": "1600000"
  },
  {
    "text": "not matter depending on your sla for returning the data it may not matter but when it does matter",
    "start": "1600000",
    "end": "1606480"
  },
  {
    "text": "it matters right so try to only use the with guy and",
    "start": "1606480",
    "end": "1612240"
  },
  {
    "text": "there are ways to get around that so like you know if this is a really common use case you can create a computed column",
    "start": "1612240",
    "end": "1618000"
  },
  {
    "text": "and reverse your column so that now you're just reversing what you're searching on",
    "start": "1618000",
    "end": "1623360"
  },
  {
    "text": "um and then uh indexes are generally not used when you're doing an operation on",
    "start": "1623360",
    "end": "1630080"
  },
  {
    "text": "the column so for example answer count divided by two um",
    "start": "1630080",
    "end": "1635840"
  },
  {
    "text": "but yeah reach out to your dba team should you have one or you know put your dba hat on if",
    "start": "1636720",
    "end": "1643360"
  },
  {
    "text": "you're the dba too because they want to help they really do",
    "start": "1643360",
    "end": "1648399"
  },
  {
    "text": "this hey how can i speed up my slow query like well can you rewrite your query no",
    "start": "1648399",
    "end": "1655120"
  },
  {
    "text": "hmm they want to help they really do",
    "start": "1655120",
    "end": "1660640"
  },
  {
    "text": "how are we doing on time",
    "start": "1661919",
    "end": "1665720"
  },
  {
    "text": "okay database design how many of you are just",
    "start": "1670960",
    "end": "1677520"
  },
  {
    "text": "get to work on a product where you're designing your database from scratch let's go",
    "start": "1677520",
    "end": "1684880"
  },
  {
    "text": "great how many of you have a database design that's like 20 years old",
    "start": "1686480",
    "end": "1692480"
  },
  {
    "text": "yeah generally clients",
    "start": "1692480",
    "end": "1698240"
  },
  {
    "text": "right because you only get one chance and once there's data in there changing a database is really really hard",
    "start": "1698240",
    "end": "1705440"
  },
  {
    "text": "um it's it's a hard problem not to mention all of the governance around it",
    "start": "1705440",
    "end": "1711279"
  },
  {
    "start": "1711000",
    "end": "1711000"
  },
  {
    "text": "uh right so some general guidance right do it right the first time",
    "start": "1711279",
    "end": "1716799"
  },
  {
    "text": "for most of us that ships sailed but you know think about the proper design patterns",
    "start": "1717919",
    "end": "1723760"
  },
  {
    "text": "and and specifically design for your access patterns right so",
    "start": "1723760",
    "end": "1729200"
  },
  {
    "text": "you know 20 years ago when all we had were relational databases it was like yes you should go full like",
    "start": "1729200",
    "end": "1735520"
  },
  {
    "text": "third normal form or whatever normal form right because that's a pure design",
    "start": "1735520",
    "end": "1742399"
  },
  {
    "text": "and then along came these things called nosql databases um",
    "start": "1742399",
    "end": "1747919"
  },
  {
    "text": "for not only sql you're not writing sql um",
    "start": "1747919",
    "end": "1753520"
  },
  {
    "text": "and all of a sudden we started to think about like well maybe it's okay to have some data duplication if that speeds up our",
    "start": "1753520",
    "end": "1759840"
  },
  {
    "text": "results right like if any of you are using cassandra right that's the entire that's like the",
    "start": "1759840",
    "end": "1765360"
  },
  {
    "text": "entire design philosophy is you can have like 60 copies of your data and it doesn't matter because you get it fast",
    "start": "1765360",
    "end": "1772320"
  },
  {
    "text": "um and then you know you have to like worry about keeping it updated but",
    "start": "1772320",
    "end": "1778240"
  },
  {
    "text": "right but so discard pure relational patterns when it makes sense right so in a pure as an",
    "start": "1778240",
    "end": "1783760"
  },
  {
    "text": "example in a pure third normal form pattern right you would have a",
    "start": "1783760",
    "end": "1790480"
  },
  {
    "text": "country table that you look up against and then you would have a country id on your address",
    "start": "1790480",
    "end": "1796640"
  },
  {
    "text": "that is silly you might have a country table because you might need to display those countries in a ui",
    "start": "1796640",
    "end": "1803120"
  },
  {
    "text": "but having a foreign key to your address table is just adding overhead that you don't actually need because you have to",
    "start": "1803120",
    "end": "1808320"
  },
  {
    "text": "do that join every time right so why not just chuck that text onto the address object",
    "start": "1808320",
    "end": "1816799"
  },
  {
    "text": "um right poor design equals poor performance um",
    "start": "1817360",
    "end": "1822640"
  },
  {
    "text": "so one of the first things i did in my career was moving migrating a bunch of foxpro data",
    "start": "1822640",
    "end": "1829600"
  },
  {
    "text": "um i haven't lost my hair for nothing into sql server",
    "start": "1829600",
    "end": "1834799"
  },
  {
    "text": "and for those of you who know anything about foxpro like it's fixed with and files",
    "start": "1834799",
    "end": "1840960"
  },
  {
    "text": "and and the first attempt was we'll just replicate that pattern in sql server",
    "start": "1840960",
    "end": "1846720"
  },
  {
    "text": "and that worked terribly so then we had to go and like redo it",
    "start": "1846720",
    "end": "1852000"
  },
  {
    "text": "right so poor design poor performance uh",
    "start": "1852000",
    "end": "1857120"
  },
  {
    "text": "avoid table per type this is a kind of this is one that is uh kind of more",
    "start": "1857120",
    "end": "1862559"
  },
  {
    "text": "challenging in some cases um because any framework makes it really",
    "start": "1862559",
    "end": "1868720"
  },
  {
    "text": "really easy to do one type one entity one poco one whatever",
    "start": "1868720",
    "end": "1874640"
  },
  {
    "text": "to each table um",
    "start": "1874640",
    "end": "1879840"
  },
  {
    "text": "90 it's fine but there are cases where maybe you've split tables or",
    "start": "1880720",
    "end": "1886799"
  },
  {
    "text": "you have like you know something that's better represented as an enum like in my",
    "start": "1886799",
    "end": "1893200"
  },
  {
    "text": "country example um that like really like the shape in the",
    "start": "1893200",
    "end": "1899039"
  },
  {
    "text": "database is not how you should be looking at it as an object or likewise the shape as an object is really not how you should be looking at",
    "start": "1899039",
    "end": "1905039"
  },
  {
    "text": "in the database right so don't marry yourself to table per type",
    "start": "1905039",
    "end": "1910240"
  },
  {
    "text": "use your databases tools right so these are things like views computed",
    "start": "1912080",
    "end": "1917360"
  },
  {
    "text": "columns procedures shutter",
    "start": "1917360",
    "end": "1922960"
  },
  {
    "text": "but doing these things can help reduce the amount of work you're making any framework and your database on jindoo",
    "start": "1923600",
    "end": "1931360"
  },
  {
    "text": "and then lastly and perhaps most controversially on this slide avoid code first tools",
    "start": "1931360",
    "end": "1937519"
  },
  {
    "text": "um i will preface that by saying code first for a quick start or",
    "start": "1937519",
    "end": "1943200"
  },
  {
    "text": "you know something where you're just trying to get off the ground or again servicing like 10 users",
    "start": "1943200",
    "end": "1949600"
  },
  {
    "text": "totally fine uh it doesn't scale well so we have uh an internal project that we use",
    "start": "1949600",
    "end": "1957519"
  },
  {
    "text": "to help utilities in the united states manage people's applications for putting",
    "start": "1957519",
    "end": "1963679"
  },
  {
    "text": "solar panels on the roof um because there's a lot of stuff that goes into that",
    "start": "1963679",
    "end": "1970559"
  },
  {
    "text": "it's seven years old it started out life as a",
    "start": "1970559",
    "end": "1976480"
  },
  {
    "text": "net mvc monolith with angularjs on the front of it and they used code first",
    "start": "1976480",
    "end": "1983200"
  },
  {
    "text": "and it was fine because this was a really small use case with like you know two applications a day that our local",
    "start": "1983200",
    "end": "1990559"
  },
  {
    "text": "utility was using seven years later now we're trying to",
    "start": "1990559",
    "end": "1996880"
  },
  {
    "text": "you know strangle the monolith break it into services you know we've added functionality in",
    "start": "1996880",
    "end": "2002080"
  },
  {
    "text": "microservices and all of the sudden code first is a giant pain because",
    "start": "2002080",
    "end": "2008640"
  },
  {
    "text": "it's in one project in our monolith they've had to re-baseline like",
    "start": "2008640",
    "end": "2014080"
  },
  {
    "text": "i think like 15 times to get any sort of decent performance",
    "start": "2014080",
    "end": "2019919"
  },
  {
    "text": "so again if you're starting with it and you need to start fast",
    "start": "2019919",
    "end": "2025279"
  },
  {
    "text": "or you're doing something small it's fine long term",
    "start": "2025279",
    "end": "2031559"
  },
  {
    "text": "all right so what do some of these things look like so as far as entity framework core is concerned a view is just the same as a",
    "start": "2033919",
    "end": "2040320"
  },
  {
    "start": "2036000",
    "end": "2036000"
  },
  {
    "text": "table um you just need to tell it it's a view so that it doesn't try to generate so it",
    "start": "2040320",
    "end": "2045840"
  },
  {
    "text": "stops you from inserting things um so",
    "start": "2045840",
    "end": "2052398"
  },
  {
    "text": "stack overflow again posts have a post type um now are you ever going to look at you",
    "start": "2052560",
    "end": "2058878"
  },
  {
    "text": "ever going to pull back a post without its post type probably not there are a couple of different ways to solve it in this case i chose",
    "start": "2058879",
    "end": "2065839"
  },
  {
    "text": "let's just add the type and the join and wrap it in a view so that we aren't having entity",
    "start": "2065839",
    "end": "2071280"
  },
  {
    "text": "framework do that work every time because",
    "start": "2071280",
    "end": "2076560"
  },
  {
    "text": "i don't have an example of the generated sql because then it will just generate select",
    "start": "2076560",
    "end": "2081919"
  },
  {
    "text": "the view columns right from our post with post type view",
    "start": "2081919",
    "end": "2089118"
  },
  {
    "text": "and it's just it it's cleaner right and you can control",
    "start": "2089119",
    "end": "2094398"
  },
  {
    "text": "what the sequel looks like right",
    "start": "2094399",
    "end": "2099200"
  },
  {
    "text": "uh right code first kind of talked about this a little bit but",
    "start": "2099839",
    "end": "2105119"
  },
  {
    "start": "2100000",
    "end": "2100000"
  },
  {
    "text": "some other specific pitfalls uh data types",
    "start": "2105119",
    "end": "2111200"
  },
  {
    "text": "there are some really unfortunate defaults there is no reason to store every string",
    "start": "2111200",
    "end": "2117200"
  },
  {
    "text": "field as a unicode um",
    "start": "2117200",
    "end": "2122160"
  },
  {
    "text": "now if you're building a big international app many of them probably have to be but not all of them",
    "start": "2123680",
    "end": "2130400"
  },
  {
    "text": "uh you are left to define your indexes um",
    "start": "2130400",
    "end": "2136400"
  },
  {
    "text": "you probably get an index on your primary key particularly if you're using sql server um",
    "start": "2136400",
    "end": "2142400"
  },
  {
    "text": "but now we're adding indexes uh when we're running our migration that's gonna",
    "start": "2142400",
    "end": "2147520"
  },
  {
    "text": "be slow which if you're running your migration as part of a cicd process the last thing",
    "start": "2147520",
    "end": "2152960"
  },
  {
    "text": "you want is your cicd process to be slow because then people won't merge and build as often and right",
    "start": "2152960",
    "end": "2160160"
  },
  {
    "text": "uh you got it written you have to write views manually um so you are going to end up writing sql",
    "start": "2160160",
    "end": "2166160"
  },
  {
    "text": "there for me not so scary for other people maybe more scary or more annoying",
    "start": "2166160",
    "end": "2173599"
  },
  {
    "text": "um and then code first doesn't gener generally doesn't utilize more advanced database",
    "start": "2173599",
    "end": "2180240"
  },
  {
    "text": "features um again it's a size of data problem right",
    "start": "2180240",
    "end": "2186560"
  },
  {
    "text": "most of the time you're not going to table partition most of the time you're not using in memory tables or things like that",
    "start": "2186560",
    "end": "2192800"
  },
  {
    "text": "you might want some user to find types when i get to my i shot myself in the foot story i'll tell you about that",
    "start": "2192800",
    "end": "2200519"
  },
  {
    "text": "so let's talk about the things that entity framework core is really bad at",
    "start": "2201680",
    "end": "2207280"
  },
  {
    "start": "2207000",
    "end": "2207000"
  },
  {
    "text": "lots of joins um i had a great example of this from entity",
    "start": "2207280",
    "end": "2212880"
  },
  {
    "text": "framework 6 that was like this wonderful arrow pattern of a query",
    "start": "2212880",
    "end": "2218480"
  },
  {
    "text": "and i've lost the image unfortunately but if you have a lot of joins so include",
    "start": "2218480",
    "end": "2224480"
  },
  {
    "text": "efcor is going to struggle to produce good sql it's just it it's not only it looks ugly but it is",
    "start": "2224480",
    "end": "2230079"
  },
  {
    "text": "actually not optimal um etl",
    "start": "2230079",
    "end": "2236000"
  },
  {
    "text": "yeah so how many of you are aware that um rebrickable publishes a data set of all",
    "start": "2236000",
    "end": "2244160"
  },
  {
    "text": "the lego sets and pieces and minifigures yeah got one so rebrickable.com you can",
    "start": "2244160",
    "end": "2250880"
  },
  {
    "text": "go and download the data set um and i got tired of using stack overflow so",
    "start": "2250880",
    "end": "2256960"
  },
  {
    "text": "i said i'll use this lego data set this is great i like legos everybody likes legos",
    "start": "2256960",
    "end": "2262640"
  },
  {
    "text": "they have an icrd you can do it it's really nice and they publish it in individual csv",
    "start": "2262640",
    "end": "2268720"
  },
  {
    "text": "files so it's kind of on the user to figure out how to get that into a data structure right",
    "start": "2268720",
    "end": "2274079"
  },
  {
    "text": "um so download the csvs i go well this is something small and quick",
    "start": "2274079",
    "end": "2279440"
  },
  {
    "text": "i'll just use entity framework core for for loading it right",
    "start": "2279440",
    "end": "2284800"
  },
  {
    "text": "not kind of kind of ignoring that at least one of the tables is over a million rows",
    "start": "2284800",
    "end": "2291119"
  },
  {
    "text": "so i go and i write all the code and i do some like genericization so that i don't have to like write these",
    "start": "2295680",
    "end": "2302240"
  },
  {
    "text": "you know write the same code 15 times i go run",
    "start": "2302240",
    "end": "2307599"
  },
  {
    "text": "run it just on a small table first just on like a 10 row table like okay it works cool let me run it on everything",
    "start": "2307599",
    "end": "2314960"
  },
  {
    "text": "got to that 1 million some of them were kind of slow got to that 1 million row csv over 1 million rows clc",
    "start": "2314960",
    "end": "2322000"
  },
  {
    "text": "and i went oh i guess i'll go get a coffee so i went to get a coffee",
    "start": "2322000",
    "end": "2328240"
  },
  {
    "text": "came back nope still not done ran my little test query like oh it's inserted like 3 000 records",
    "start": "2328240",
    "end": "2335119"
  },
  {
    "text": "it's not good went and talked to my wife who's in the next room working from home is wonderful",
    "start": "2335119",
    "end": "2341839"
  },
  {
    "text": "came back hit the hit the query fifteen thousand",
    "start": "2341839",
    "end": "2348160"
  },
  {
    "text": "well i'll go like clean the cat box and clean the cat box came back upstairs my computer had gone",
    "start": "2348160",
    "end": "2354400"
  },
  {
    "text": "to sleep and the application stopped because i was",
    "start": "2354400",
    "end": "2360079"
  },
  {
    "text": "loading everything locally in a docker container",
    "start": "2360079",
    "end": "2364960"
  },
  {
    "text": "see i didn't follow my own advice so uh",
    "start": "2365680",
    "end": "2370880"
  },
  {
    "text": "yeah don't do hpl within the framework core it's going to be very slow and it's",
    "start": "2370880",
    "end": "2376480"
  },
  {
    "text": "going to be very painful i rewrote it to use a table value parameter",
    "start": "2376480",
    "end": "2382560"
  },
  {
    "text": "which you create a table type in sql server you shove all the data into a data table and",
    "start": "2382560",
    "end": "2387920"
  },
  {
    "text": "net and call a stored procedure and it's an insert and it runs very quickly and now it runs in less than two seconds",
    "start": "2387920",
    "end": "2394400"
  },
  {
    "text": "to load that one million row table right um",
    "start": "2394400",
    "end": "2399440"
  },
  {
    "text": "don't be me follow my advice uh and lastly uh parameter issues",
    "start": "2399440",
    "end": "2406000"
  },
  {
    "text": "um you will know this if you run into it",
    "start": "2406000",
    "end": "2410240"
  },
  {
    "text": "and that is you know parameter issue can be as simple as you're feeding a",
    "start": "2411040",
    "end": "2416319"
  },
  {
    "text": "unicode string in where it's an ascii string or you're feeding ascii string in where it's a unicode string and sql",
    "start": "2416319",
    "end": "2421440"
  },
  {
    "text": "server says well these things are close enough i'm not going to complain about it but i'm also not going to use an index",
    "start": "2421440",
    "end": "2427680"
  },
  {
    "text": "thanks um and there there's just some times when it's going to do the wrong thing you're",
    "start": "2427680",
    "end": "2432880"
  },
  {
    "text": "going to have to write sql to fix it unfortunately",
    "start": "2432880",
    "end": "2438760"
  },
  {
    "start": "2439000",
    "end": "2439000"
  },
  {
    "text": "okay so",
    "start": "2439200",
    "end": "2443920"
  },
  {
    "text": "the primary goal and this is really important to remember any frame framework core's primary goal is to is",
    "start": "2447680",
    "end": "2453119"
  },
  {
    "text": "reliable execution right now the team has done a ton of work to improve performance",
    "start": "2453119",
    "end": "2459680"
  },
  {
    "text": "like if you haven't used it in a while or if you're using an older version it is worth updating to six",
    "start": "2459680",
    "end": "2465359"
  },
  {
    "text": "actually was worth updating to five it's really worth updating to six um",
    "start": "2465359",
    "end": "2471520"
  },
  {
    "text": "but it's its goal is to be reliable right so the sequel it generates is not going",
    "start": "2471599",
    "end": "2478240"
  },
  {
    "text": "to be the most performant this really matters when you're going against cosmos db because how do we pay for cosmos db",
    "start": "2478240",
    "end": "2485680"
  },
  {
    "text": "yes by query time great um",
    "start": "2485680",
    "end": "2493400"
  },
  {
    "text": "the other thing is that",
    "start": "2494160",
    "end": "2497920"
  },
  {
    "text": "the pre-compilation items so you can now compile your queries again with ef core six don't have a demo",
    "start": "2500319",
    "end": "2508000"
  },
  {
    "text": "for that unfortunately um but that can also provide some better performance and also more uh repeatable",
    "start": "2508000",
    "end": "2514319"
  },
  {
    "text": "performance um but the thing is there is significant overhead associated with all of this",
    "start": "2514319",
    "end": "2520560"
  },
  {
    "text": "right it is a full featured orm",
    "start": "2520560",
    "end": "2525680"
  },
  {
    "text": "with all the good and bad things that that comes with um and",
    "start": "2525680",
    "end": "2531280"
  },
  {
    "text": "you know that just creates overhead which is fine",
    "start": "2531280",
    "end": "2536720"
  },
  {
    "text": "right if you really really need performance",
    "start": "2536720",
    "end": "2541760"
  },
  {
    "text": "raw ado or something like dapper right like if that if performance matters that",
    "start": "2542000",
    "end": "2547520"
  },
  {
    "text": "much use something that is closer to essentially writing it yourself",
    "start": "2547520",
    "end": "2553920"
  },
  {
    "text": "it's going to take more work so there is an roi there right but",
    "start": "2553920",
    "end": "2560160"
  },
  {
    "text": "yeah that's uh that's it right",
    "start": "2560560",
    "end": "2566800"
  },
  {
    "text": "um so i've gone very fast i hope you guys have questions",
    "start": "2566800",
    "end": "2572319"
  },
  {
    "text": "uh right so understand how it works how it doesn't work the docs are your friends",
    "start": "2572319",
    "end": "2577599"
  },
  {
    "text": "they're really much more useful than they used to be you want to measure performance",
    "start": "2577599",
    "end": "2584160"
  },
  {
    "text": "and if you've done one and two you're going to have three which is have a plan to fix it when it",
    "start": "2584160",
    "end": "2589839"
  },
  {
    "text": "goes bump right that happens to everybody this thing that worked all of a sudden",
    "start": "2589839",
    "end": "2595119"
  },
  {
    "text": "doesn't work right all right",
    "start": "2595119",
    "end": "2600800"
  },
  {
    "text": "questions i went very fast",
    "start": "2600800",
    "end": "2605559"
  },
  {
    "text": "no questions i i was i was perfect i'm gonna see nothing but greens in the",
    "start": "2608720",
    "end": "2615280"
  },
  {
    "text": "bin out there and then all the reds in the little tupperware thing right",
    "start": "2615280",
    "end": "2622160"
  },
  {
    "text": "um yeah so that's that's really all i have um if you have questions that you don't",
    "start": "2622160",
    "end": "2627599"
  },
  {
    "text": "want to ask in front of the entire room feel free to come up and ask me as you are leaving please make sure you",
    "start": "2627599",
    "end": "2632640"
  },
  {
    "text": "fill out an evaluation that's very helpful for me it's very helpful for the organizers",
    "start": "2632640",
    "end": "2638318"
  },
  {
    "text": "and thank you all very much",
    "start": "2639520",
    "end": "2643480"
  }
]