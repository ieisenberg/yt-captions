[
  {
    "text": "first of all I have to apologize a little bit you see that I have a a a",
    "start": "6080",
    "end": "11480"
  },
  {
    "text": "muscular issue and hopefully next Monday it will be",
    "start": "11480",
    "end": "16640"
  },
  {
    "text": "solved okay so don't be irritated therefore I will not walk so much talk uh so much as I do it",
    "start": "16640",
    "end": "23760"
  },
  {
    "text": "usually uh a few words about me I'm a software developer since the",
    "start": "23760",
    "end": "29320"
  },
  {
    "text": "last Mill vum yeah right it's the way uh since 22",
    "start": "29320",
    "end": "36600"
  },
  {
    "text": "24 I give glasses I started with py then I gave classes for my company worldwide",
    "start": "36600",
    "end": "42440"
  },
  {
    "text": "classes 28 I gave worldwide remote classes by the way this was terrible and",
    "start": "42440",
    "end": "48280"
  },
  {
    "text": "since 2016 I'm an independent C++ trainer and I also give C++ uh python",
    "start": "48280",
    "end": "54399"
  },
  {
    "text": "classes but only 10 a year okay I also have a",
    "start": "54399",
    "end": "60559"
  },
  {
    "text": "International mentoring program running which takes place tomorrow so this is a little bit of my",
    "start": "60559",
    "end": "66479"
  },
  {
    "text": "background so let's talk about concurrency concurrency improvements in",
    "start": "66479",
    "end": "72360"
  },
  {
    "text": "C++ 20 and I will not talk about so many features therefore I can dive a little",
    "start": "72360",
    "end": "78320"
  },
  {
    "text": "bit deeper so this is what I talk about",
    "start": "78320",
    "end": "83880"
  },
  {
    "text": "atomics and I will also give you a little bit of background what we got in C++ 11 how it's improved in",
    "start": "83880",
    "end": "90960"
  },
  {
    "text": "20 I will talk about semr let just barus this is totally new 20 about Cooperative",
    "start": "90960",
    "end": "98560"
  },
  {
    "text": "Interruption and finally about G threat the improved",
    "start": "98560",
    "end": "103759"
  },
  {
    "text": "threat this is all for today um I will also include the",
    "start": "103759",
    "end": "111280"
  },
  {
    "text": "exercises in this presentation therefore when you want to have it you have it included because there's a link to God",
    "start": "111280",
    "end": "118119"
  },
  {
    "text": "Bol compiler example atomics a little bit of",
    "start": "118119",
    "end": "123479"
  },
  {
    "text": "background are the F foundation of the memory model in",
    "start": "123479",
    "end": "129280"
  },
  {
    "text": "11 they Define operations on them are atomics clear this is why they are called and",
    "start": "129280",
    "end": "136519"
  },
  {
    "text": "additionally they Define synchronization ordering constraints this is for me the more",
    "start": "136519",
    "end": "142280"
  },
  {
    "text": "interesting parts and the interesting part about atomics is this ordering constraints also apply to non atomics",
    "start": "142280",
    "end": "149840"
  },
  {
    "text": "once more to non atomics okay to make it short when you",
    "start": "149840",
    "end": "156440"
  },
  {
    "text": "do something with non atomics and you do some kind of synchronization it boils down on a",
    "start": "156440",
    "end": "162959"
  },
  {
    "text": "synchronization on atomics therefore atomics are the pillars of uh of",
    "start": "162959",
    "end": "168360"
  },
  {
    "text": "concurrency meaning uh condition notify one synchronize with",
    "start": "168360",
    "end": "174360"
  },
  {
    "text": "a condition notify weight notify once or notify all to be precise uh unlock",
    "start": "174360",
    "end": "181440"
  },
  {
    "text": "synchronizes B the previous lock call on motex threat creation threat joining is",
    "start": "181440",
    "end": "186920"
  },
  {
    "text": "a synchronization point on so on and so on so they are really really",
    "start": "186920",
    "end": "192159"
  },
  {
    "text": "important and this is what you what we have in C++ 11 and 20 we have the atomic",
    "start": "192159",
    "end": "198680"
  },
  {
    "text": "flag and we have St Atomic and various specialization of it St Atomic flag is a",
    "start": "198680",
    "end": "208000"
  },
  {
    "text": "extremely how should I say it has know interface let me put it this",
    "start": "208000",
    "end": "213640"
  },
  {
    "text": "way you can only do two things clear and test ins set with clear you put it in a",
    "start": "213640",
    "end": "220519"
  },
  {
    "text": "kind of an false state with test in set you put it in a true State and you get",
    "start": "220519",
    "end": "226959"
  },
  {
    "text": "return the Old State if it was false or true but stud Atomic flag has one",
    "start": "226959",
    "end": "234840"
  },
  {
    "text": "extraordinary feature it must be Lock Free",
    "start": "234840",
    "end": "241680"
  },
  {
    "text": "for all the others to Atomic in its specialization they can internally use a",
    "start": "241760",
    "end": "248159"
  },
  {
    "text": "locking mechanism we don't know it we only know it for the smart pointers so far so we",
    "start": "248159",
    "end": "255360"
  },
  {
    "text": "have stud Atomic specialization for pointers for integral types for user defined types if they are simple",
    "start": "255360",
    "end": "262759"
  },
  {
    "text": "enough for floating Point times this is newest 20 and for smart pointers and for",
    "start": "262759",
    "end": "269080"
  },
  {
    "text": "smart point so far each implementation uses a locking mechanism in",
    "start": "269080",
    "end": "275800"
  },
  {
    "text": "underhood this is still a fight to get them locky Danielle you are involved no",
    "start": "275800",
    "end": "281720"
  },
  {
    "text": "this is a hard fight",
    "start": "281720",
    "end": "287039"
  },
  {
    "text": "yeah and this is what you can do with st Atomic you can say test in set or clear",
    "start": "287039",
    "end": "293280"
  },
  {
    "text": "you see you canot even say on a atomic flag which value do you have to get the",
    "start": "293280",
    "end": "301280"
  },
  {
    "text": "value you have to change it you have to set it so it's pretty yeah how it not so convenient but",
    "start": "301280",
    "end": "309400"
  },
  {
    "text": "powerful and then we have operations on atomics not all of them are aailable for",
    "start": "309400",
    "end": "314919"
  },
  {
    "text": "each type but this this is what we have and I only want to give a little bit of",
    "start": "314919",
    "end": "319960"
  },
  {
    "text": "background only want to talk about this operation here compare exchange",
    "start": "319960",
    "end": "326440"
  },
  {
    "text": "strong in short often called car compare in Swap this is I would say the",
    "start": "326440",
    "end": "333639"
  },
  {
    "text": "bread and butter of atomics it's a little bit complicated",
    "start": "333639",
    "end": "338880"
  },
  {
    "text": "here you see it what you can do is the following you",
    "start": "338880",
    "end": "345680"
  },
  {
    "text": "check if Atomic is equal to expected if",
    "start": "345680",
    "end": "351680"
  },
  {
    "text": "yes you say you set in an atomic step atom to desired and return to",
    "start": "351680",
    "end": "360720"
  },
  {
    "text": "if no something may happen in the meantime no you set expected to the new value of",
    "start": "360720",
    "end": "371160"
  },
  {
    "text": "atomic and you return Force so essentially there are two",
    "start": "371160",
    "end": "376400"
  },
  {
    "text": "operations in one and you return if this is successfully or",
    "start": "376400",
    "end": "382479"
  },
  {
    "text": "not and what I do now is Implement for you with this fetch at uh Atomic",
    "start": "382560",
    "end": "388680"
  },
  {
    "text": "multiplication fetch mild you see we have fetch at and fetch sub they return the old value and",
    "start": "388680",
    "end": "396160"
  },
  {
    "text": "this is what my fetch mild also will do have a look I use compare exchange strong I",
    "start": "396160",
    "end": "406199"
  },
  {
    "text": "assume this is big enough for you only the people from the last row",
    "start": "406199",
    "end": "412960"
  },
  {
    "text": "count okay you see I have an atomic here and I want to multiply by five this is",
    "start": "413000",
    "end": "420120"
  },
  {
    "text": "what I want to do can you can't you see it is it not better for",
    "start": "420120",
    "end": "426280"
  },
  {
    "text": "you okay thanks okay and this is my fetch M it takes this",
    "start": "426280",
    "end": "433160"
  },
  {
    "text": "Atomic T by reference in this mild I want to multiply with and what you do",
    "start": "433160",
    "end": "439599"
  },
  {
    "text": "essentially is always kind of this thing you load the old",
    "start": "439599",
    "end": "446840"
  },
  {
    "text": "value and then you apply in a Loop compare exchange",
    "start": "446840",
    "end": "453520"
  },
  {
    "text": "strong and you see this is a loop this Loop",
    "start": "453520",
    "end": "458639"
  },
  {
    "text": "continues uh as long it it turns through right and what is happening here you",
    "start": "458639",
    "end": "465039"
  },
  {
    "text": "compare an atomic operation the shared value with the old value if both values are equal you know",
    "start": "465039",
    "end": "473199"
  },
  {
    "text": "your your observation of the world is right now you doing the same operation",
    "start": "473199",
    "end": "479800"
  },
  {
    "text": "update shared with Old Times M because you want to multiply and you return two therefore",
    "start": "479800",
    "end": "486560"
  },
  {
    "text": "you are done and you return old value if not because something changed in the",
    "start": "486560",
    "end": "492000"
  },
  {
    "text": "meantime this function could be used by many threats concurrently",
    "start": "492000",
    "end": "499159"
  },
  {
    "text": "you change the view of your world you change the value of old value to the",
    "start": "499159",
    "end": "506960"
  },
  {
    "text": "updated value of shared because someone changed it in the meantime and you do it once more because you return false you",
    "start": "506960",
    "end": "514120"
  },
  {
    "text": "do it until it's successful you don't care when your call is successful you",
    "start": "514120",
    "end": "519800"
  },
  {
    "text": "only call care that it will happen in some point in the future and this",
    "start": "519800",
    "end": "525560"
  },
  {
    "text": "is how you should look at it this is for me an atomic",
    "start": "525560",
    "end": "530800"
  },
  {
    "text": "transaction you store the the state of the word then you are you hope to",
    "start": "530800",
    "end": "536880"
  },
  {
    "text": "perform operation if not you do it once more this is how you do software transaction",
    "start": "536880",
    "end": "541920"
  },
  {
    "text": "memory probably in the 26 or how you would do um a database transaction it's",
    "start": "541920",
    "end": "548640"
  },
  {
    "text": "a kind of an atomic transaction and the key part is compare",
    "start": "548640",
    "end": "554839"
  },
  {
    "text": "exchange strong sorry this was a little bit a wrong story because this was 20 C++ 11 related but I want to give you a",
    "start": "554839",
    "end": "562200"
  },
  {
    "text": "little bit of background okay let's jump",
    "start": "562200",
    "end": "568120"
  },
  {
    "text": "back but you",
    "start": "568120",
    "end": "572160"
  },
  {
    "text": "make yeah can you elaborate more on it Danel",
    "start": "573760",
    "end": "579839"
  },
  {
    "text": "because if somebody changes the current value of",
    "start": "579839",
    "end": "585480"
  },
  {
    "text": "sharony and you don't take this into",
    "start": "586360",
    "end": "591720"
  },
  {
    "text": "account mation run immediately",
    "start": "591720",
    "end": "597160"
  },
  {
    "text": "into Behavior this is probably not what want okay let's analyze this later",
    "start": "597160",
    "end": "603720"
  },
  {
    "text": "little bit deeper okay let's",
    "start": "603720",
    "end": "610240"
  },
  {
    "text": "continue and now what we get with 20 additionally Atomic flag and on Atomic",
    "start": "610560",
    "end": "617120"
  },
  {
    "text": "now you can you can uh notify you can wait on it and you can",
    "start": "617120",
    "end": "624720"
  },
  {
    "text": "notify one or all similar to condition Rebels",
    "start": "624720",
    "end": "631040"
  },
  {
    "text": "and this weight Works a little bit special this weight blocks if the value",
    "start": "631200",
    "end": "637320"
  },
  {
    "text": "for Atomic is equal to value of Val keep this in mind because I will",
    "start": "637320",
    "end": "643360"
  },
  {
    "text": "show it now to you so it's a little bit special so it blocks if W is equal to atom and if not it of course not blocks",
    "start": "643360",
    "end": "652160"
  },
  {
    "text": "don't blocks let me see how I can use this to implement a symbol",
    "start": "652160",
    "end": "659800"
  },
  {
    "text": "a simple producer consumer workflow I have a threat waiting for",
    "start": "659800",
    "end": "665600"
  },
  {
    "text": "work and I have a threat set data ready set data ready prepares some work",
    "start": "665600",
    "end": "673480"
  },
  {
    "text": "here we are prepar some work puts a few ins onto a vector which is of course not",
    "start": "673480",
    "end": "679200"
  },
  {
    "text": "threat safe says data prepared then stores two in it and then",
    "start": "679200",
    "end": "686040"
  },
  {
    "text": "says notify one initially it has the value fce this means this guy here is blocked",
    "start": "686040",
    "end": "695680"
  },
  {
    "text": "because it blocks on force it blocks until this guy puts the value true to it and notifies the",
    "start": "695680",
    "end": "704600"
  },
  {
    "text": "other this is a simple producer consumer workflow based on Atomic pool keep this",
    "start": "704800",
    "end": "710519"
  },
  {
    "text": "in mind while because I will give you a few performance numbers but I need a little bit more of theory",
    "start": "710519",
    "end": "717720"
  },
  {
    "text": "now there is do you know why I explain this so",
    "start": "717720",
    "end": "723279"
  },
  {
    "text": "deeply because I'm a big anti fan of condition rist which I will come",
    "start": "723279",
    "end": "729160"
  },
  {
    "text": "later okay we have atomics we have a Shar",
    "start": "729160",
    "end": "735680"
  },
  {
    "text": "pointer and Shar pointer have one big issue regarding",
    "start": "735680",
    "end": "741600"
  },
  {
    "text": "concurrency do you know my favorite quote from Tony F of course you don't know it forget what you learned in",
    "start": "741600",
    "end": "747800"
  },
  {
    "text": "kindergarten don't share but share pointer share by Design and",
    "start": "747800",
    "end": "753240"
  },
  {
    "text": "there are two meta rules when you do concurrency don't share don't notate and",
    "start": "753240",
    "end": "758399"
  },
  {
    "text": "they share by Design therefore there need are extremely specific concurrency",
    "start": "758399",
    "end": "764000"
  },
  {
    "text": "semantics and now we see bub 20 we have new specialization to Atomic for share",
    "start": "764000",
    "end": "769720"
  },
  {
    "text": "Putter and weak putter here's a rational from uh from",
    "start": "769720",
    "end": "776360"
  },
  {
    "text": "Hub why we need them you may not know it",
    "start": "776360",
    "end": "781959"
  },
  {
    "text": "but shed putter was the only nonatomic variable in C++ 11 on which you could",
    "start": "781959",
    "end": "789000"
  },
  {
    "text": "apply Atomic operations so out of consistency we need",
    "start": "789000",
    "end": "795040"
  },
  {
    "text": "it second out of correctness reasons you can say Atomic store shared",
    "start": "795040",
    "end": "802800"
  },
  {
    "text": "pointer this would be fine in C++ 11 but you can easily get it and do it this way",
    "start": "802800",
    "end": "811160"
  },
  {
    "text": "and now your program runs but you have a data race and third we could also make the",
    "start": "811160",
    "end": "819959"
  },
  {
    "text": "shared pointer by Design sweat save but now we would um optimize for the not",
    "start": "819959",
    "end": "826160"
  },
  {
    "text": "common case which is bad therefore we need it I like this explanation or this",
    "start": "826160",
    "end": "832240"
  },
  {
    "text": "rational from uh um H okay we have have also C++ 11 Atomic",
    "start": "832240",
    "end": "842680"
  },
  {
    "text": "ref here the referenced variable is atomic we have essentially the same",
    "start": "842680",
    "end": "850519"
  },
  {
    "text": "specialization such as for Atomic except the smart",
    "start": "850519",
    "end": "856880"
  },
  {
    "text": "pointers this meaning reading and writing of the reference object is no dat R this the key Point",
    "start": "857759",
    "end": "865759"
  },
  {
    "text": "here the as always the lifetime of the reference object must exceed the lifetime of the atomic",
    "start": "865759",
    "end": "873480"
  },
  {
    "text": "gra and okay this is what I already mentioned let me show you an example no",
    "start": "873480",
    "end": "878920"
  },
  {
    "text": "this was wrong let me show you an",
    "start": "878920",
    "end": "882880"
  },
  {
    "text": "example here I have a data type and for some reason it's expensive to copy for",
    "start": "885040",
    "end": "891399"
  },
  {
    "text": "some reason and I want to Pro I want to increase this counter",
    "start": "891399",
    "end": "897680"
  },
  {
    "text": "concurrently and here's what I did I have a function",
    "start": "897680",
    "end": "903680"
  },
  {
    "text": "count which has a vector of threats and then I make a ref Atomic ref",
    "start": "903680",
    "end": "909240"
  },
  {
    "text": "to this counter here you see this is what I want to protect and",
    "start": "909240",
    "end": "915440"
  },
  {
    "text": "now I start 10 threads each thre takes counter by",
    "start": "915440",
    "end": "921880"
  },
  {
    "text": "reference and uh get take gets one number between 100 and 200s in in",
    "start": "921880",
    "end": "928639"
  },
  {
    "text": "increments this counter this amount of times and at the end we have",
    "start": "928639",
    "end": "935240"
  },
  {
    "text": "1591 this is just number and this is threat safe this is not a proof but let me show",
    "start": "935240",
    "end": "943399"
  },
  {
    "text": "you something when you do concurrency I strongly suggest that you always",
    "start": "943399",
    "end": "952560"
  },
  {
    "text": "use sweat",
    "start": "952560",
    "end": "955959"
  },
  {
    "text": "sanitizer well let's wait a few seconds you see it's not approv but we",
    "start": "957600",
    "end": "964959"
  },
  {
    "text": "see at least that it's not red but when I make when I remove this",
    "start": "964959",
    "end": "970839"
  },
  {
    "text": "Atomic ref here and make it just an atom uh",
    "start": "970839",
    "end": "977480"
  },
  {
    "text": "nonatomic now we see a few colors come on it's just running you see",
    "start": "977480",
    "end": "985199"
  },
  {
    "text": "s sanitized kicks in there seems to be a data race believe me that this is a",
    "start": "985199",
    "end": "991680"
  },
  {
    "text": "datas okay let's jump",
    "start": "992560",
    "end": "998959"
  },
  {
    "text": "back we have in C++ 20 SEMA",
    "start": "999360",
    "end": "1005399"
  },
  {
    "text": "Force let me naively in let me do differently requesting a s for",
    "start": "1005519",
    "end": "1012000"
  },
  {
    "text": "decrements the counter releasing the for increases the counter right and here's the ex the interesting",
    "start": "1012000",
    "end": "1019480"
  },
  {
    "text": "point requesting the requesting thread is blocked if the counter is",
    "start": "1019480",
    "end": "1026199"
  },
  {
    "text": "zero I don't blame me for that I often introduce a s for as a generaliz",
    "start": "1026199",
    "end": "1033798"
  },
  {
    "text": "mutex a mutex has two states lock unlocked false to 01 how you would call",
    "start": "1033799",
    "end": "1040760"
  },
  {
    "text": "it what is the key difference between a mutex and a semap for which only has two",
    "start": "1040760",
    "end": "1047400"
  },
  {
    "text": "Straits a mutic you have to",
    "start": "1047400",
    "end": "1055000"
  },
  {
    "text": "look exactly so SE I know what they talk about I want to say but this is what how",
    "start": "1055960",
    "end": "1062160"
  },
  {
    "text": "I use them a threat must be locked and unlocked uh motex must be locked and unlocked with the same thread but not a",
    "start": "1062160",
    "end": "1070400"
  },
  {
    "text": "semaphore this is the yeah for be the key difference and then we have two of them",
    "start": "1070400",
    "end": "1075559"
  },
  {
    "text": "we have a counting copur and one let's say in alas which uh uh the number one",
    "start": "1075559",
    "end": "1082520"
  },
  {
    "text": "which can only have the states one and two uh zero and",
    "start": "1082520",
    "end": "1087840"
  },
  {
    "text": "one this is what you can do with a semop for you can ask how uh the maximum value",
    "start": "1087840",
    "end": "1094919"
  },
  {
    "text": "of it you can release it by default by one you can acquire it you can try to",
    "start": "1094919",
    "end": "1102039"
  },
  {
    "text": "acquire it this may be successful not we don't know and you can also do it with a",
    "start": "1102039",
    "end": "1107799"
  },
  {
    "text": "uh time duration or time Point these are the data types you have since C++ 11",
    "start": "1107799",
    "end": "1116280"
  },
  {
    "text": "okay let's play once more producer consumer the same program such as before",
    "start": "1116280",
    "end": "1123159"
  },
  {
    "text": "you see I say waiting for work set that",
    "start": "1123159",
    "end": "1129158"
  },
  {
    "text": "already but now I use accounting",
    "start": "1129400",
    "end": "1134799"
  },
  {
    "text": "semor initialized with zero it can add most have the value one so it can flip",
    "start": "1134799",
    "end": "1141400"
  },
  {
    "text": "forwards backwards from zero to one and here's the guy who is waiting he",
    "start": "1141400",
    "end": "1149559"
  },
  {
    "text": "wants to acquire it but he cannot do it because the value is initially",
    "start": "1149559",
    "end": "1156280"
  },
  {
    "text": "zero first the sender has to release it put it from",
    "start": "1156280",
    "end": "1161880"
  },
  {
    "text": "zero to one and now the other guy can continue I'm a big fan of zop for",
    "start": "1161880",
    "end": "1169400"
  },
  {
    "text": "because for me they are extremely easy to read you will see what I mean when I",
    "start": "1169400",
    "end": "1176840"
  },
  {
    "text": "talk about condition R okay and I forgot to mention it they",
    "start": "1176840",
    "end": "1184480"
  },
  {
    "text": "are for me also unbelievable fast this astonished me a lot I will",
    "start": "1184480",
    "end": "1189600"
  },
  {
    "text": "show you a few performance numbers in a few seconds when we play ping",
    "start": "1189600",
    "end": "1195360"
  },
  {
    "text": "pong okay let's jump back",
    "start": "1195520",
    "end": "1200240"
  },
  {
    "text": "and now to my favorite in C++ 11 I gave around 205 of few talks which I called",
    "start": "1200600",
    "end": "1207400"
  },
  {
    "text": "threats and locks must go I should have called them condition RS must go but anyway this is what I essentially mean",
    "start": "1207400",
    "end": "1214679"
  },
  {
    "text": "condition Rees okay their model is pretty simple",
    "start": "1214679",
    "end": "1220559"
  },
  {
    "text": "idea you want to have a producer consumer send your receiver workflow a",
    "start": "1220559",
    "end": "1226240"
  },
  {
    "text": "extremely simple idea synchron ation of threats right",
    "start": "1226240",
    "end": "1233360"
  },
  {
    "text": "okay you have a center which says notify one or all and you have a receiver which",
    "start": "1233360",
    "end": "1241280"
  },
  {
    "text": "waits for it using the same condition",
    "start": "1241280",
    "end": "1246600"
  },
  {
    "text": "reel you can wait for it without a time limit or with a time limit to make it",
    "start": "1246919",
    "end": "1254080"
  },
  {
    "text": "short always when you use four you need a Time duration when you use until you",
    "start": "1254080",
    "end": "1260600"
  },
  {
    "text": "need a Time point just remember it this holds for all C++ data",
    "start": "1260600",
    "end": "1265760"
  },
  {
    "text": "types okay the fun starts with this three",
    "start": "1265760",
    "end": "1270799"
  },
  {
    "text": "points here now let me explain a story this is",
    "start": "1270799",
    "end": "1276159"
  },
  {
    "text": "a German story I don't know if this applies to Norway but you can imagine imagine you lay in the pet so let me put",
    "start": "1276159",
    "end": "1284159"
  },
  {
    "text": "it differently condition RS can be victim of two serious issues ues Spirits",
    "start": "1284159",
    "end": "1289720"
  },
  {
    "text": "wake up lost wake up what does it mean you you are",
    "start": "1289720",
    "end": "1298120"
  },
  {
    "text": "sleeping and you wait for the alarm clock to go because you have to stand up",
    "start": "1298120",
    "end": "1303559"
  },
  {
    "text": "then you are for some reason awoken but it was not the alarm clock it",
    "start": "1303559",
    "end": "1311640"
  },
  {
    "text": "was the cat scratching at the door we call this as SP wake up some",
    "start": "1311640",
    "end": "1319039"
  },
  {
    "text": "went happened and you think this is now your time what do you do when you are in bed don't do anything with the cat so",
    "start": "1319039",
    "end": "1326679"
  },
  {
    "text": "what do you do how you can you be sure when you stand up it's the right time what do you",
    "start": "1326679",
    "end": "1334120"
  },
  {
    "text": "do exactly you need an additional predicate which you can check which",
    "start": "1335279",
    "end": "1341679"
  },
  {
    "text": "gives you the answer true or false in this case the clock would be fine this is a spous wake up",
    "start": "1341679",
    "end": "1349039"
  },
  {
    "text": "we have also I will show it you in a five few seconds another issue lost wake",
    "start": "1349039",
    "end": "1357159"
  },
  {
    "text": "up imagine you go to bed after the alarm clock",
    "start": "1357159",
    "end": "1362640"
  },
  {
    "text": "went this is a deadlock to be serious you wait for something which will never",
    "start": "1362640",
    "end": "1368600"
  },
  {
    "text": "happen because the standard says the weight call only recognize a",
    "start": "1368600",
    "end": "1374640"
  },
  {
    "text": "notification if it's in the weight state but but we do threading we have no idea in which state it",
    "start": "1374640",
    "end": "1382080"
  },
  {
    "text": "is okay and here's the workflow once more",
    "start": "1384279",
    "end": "1389559"
  },
  {
    "text": "this is 11 uh maybe the only reason I explain it to you is to say to you don't use it",
    "start": "1389559",
    "end": "1397640"
  },
  {
    "text": "okay this is the weight flow now I explain the the workflow based on the",
    "start": "1397640",
    "end": "1403320"
  },
  {
    "text": "waiter here this is my weight call and this is my additional predicate you",
    "start": "1403320",
    "end": "1409880"
  },
  {
    "text": "see here I check if something happened",
    "start": "1409880",
    "end": "1415159"
  },
  {
    "text": "before the notification this is I have I have to um",
    "start": "1415159",
    "end": "1420960"
  },
  {
    "text": "establish a memory so I",
    "start": "1420960",
    "end": "1426759"
  },
  {
    "text": "wait I first check when I go into this wait call I wait while locking the mutex",
    "start": "1427400",
    "end": "1434200"
  },
  {
    "text": "I first check if return rep happened if this happened the alarm clock went",
    "start": "1434200",
    "end": "1440400"
  },
  {
    "text": "before I went to bed if not I'm in the weight",
    "start": "1440400",
    "end": "1446640"
  },
  {
    "text": "call and I fall asleep I go to the colonel Motors I release the mood text",
    "start": "1446640",
    "end": "1453840"
  },
  {
    "text": "because this guy wants to have it and I sleep I sleep I sleep I sleep",
    "start": "1453840",
    "end": "1459799"
  },
  {
    "text": "and then at one point the future I Got a notification I locked the mutex once",
    "start": "1459799",
    "end": "1466480"
  },
  {
    "text": "more I check first if return ready is set assume it's not set therefore I know",
    "start": "1466480",
    "end": "1473799"
  },
  {
    "text": "it was the cat and then I fall back once more to sleep sleep sleep sleep notification",
    "start": "1473799",
    "end": "1481279"
  },
  {
    "text": "this time the uh the predicate the return ready is checked and therefore I",
    "start": "1481279",
    "end": "1487480"
  },
  {
    "text": "know it was not a cat I have to stand up I have to go to work it's it's really a fun to explain",
    "start": "1487480",
    "end": "1494600"
  },
  {
    "text": "this workflow and you have to essentially do it in this way way you have to check something which happened",
    "start": "1494600",
    "end": "1500480"
  },
  {
    "text": "before if this a buo or vector you put something I don't care but you have to build your",
    "start": "1500480",
    "end": "1507880"
  },
  {
    "text": "memory if not you are really really",
    "start": "1507880",
    "end": "1513159"
  },
  {
    "text": "really um how should I say it it's extremely likely that you will get a lost figure I show you to you in a few",
    "start": "1513159",
    "end": "1521200"
  },
  {
    "text": "seconds this the same workflow such before no waiting for work set that",
    "start": "1521200",
    "end": "1526679"
  },
  {
    "text": "already I started intentionally waiting for work first but here I would have a",
    "start": "1526679",
    "end": "1532320"
  },
  {
    "text": "lost wake up have look here here I first the alarm clock goes before I go into",
    "start": "1532320",
    "end": "1538559"
  },
  {
    "text": "weight State this would be a lost wake up",
    "start": "1538559",
    "end": "1544399"
  },
  {
    "text": "deadlock and here's what I do it's essenti same workflow waiting for work",
    "start": "1544399",
    "end": "1550679"
  },
  {
    "text": "has a critical section uses this mutex here uh locks it and waits having this",
    "start": "1550679",
    "end": "1557919"
  },
  {
    "text": "uh predicate checking this predicate and this is my set data ready here we have",
    "start": "1557919",
    "end": "1563480"
  },
  {
    "text": "it uh notify one is thread save therefore I put it outside of the uh of",
    "start": "1563480",
    "end": "1569039"
  },
  {
    "text": "the critical section and now let me play a little bit",
    "start": "1569039",
    "end": "1575919"
  },
  {
    "text": "I only change now the probability of an",
    "start": "1575919",
    "end": "1581080"
  },
  {
    "text": "issue let me do this afterwards I cannot okay so f",
    "start": "1581080",
    "end": "1588760"
  },
  {
    "text": "fine and now let me remove this predicate and now I can be a victim of a",
    "start": "1588760",
    "end": "1596399"
  },
  {
    "text": "l wake up but we cannot see it I will get here",
    "start": "1596399",
    "end": "1603440"
  },
  {
    "text": "on timeout you see the worker was first uh awake",
    "start": "1603440",
    "end": "1609520"
  },
  {
    "text": "Dam at least one additional try now it looks better I think this",
    "start": "1609520",
    "end": "1617640"
  },
  {
    "text": "this timeout and now I get a timeout no Dam sorry but believe",
    "start": "1617640",
    "end": "1625960"
  },
  {
    "text": "me when set dat already will happen first I have a timeout H sorry I have",
    "start": "1626080",
    "end": "1632919"
  },
  {
    "text": "deadlock only one additional try in the hotel T room it works worked but this is",
    "start": "1632919",
    "end": "1639279"
  },
  {
    "text": "the fun about",
    "start": "1639279",
    "end": "1641840"
  },
  {
    "text": "threading now it looks better this is a timeout this is a deadlock and uh Matt",
    "start": "1645279",
    "end": "1650640"
  },
  {
    "text": "godal throw me out of the compiler essentially sorry",
    "start": "1650640",
    "end": "1657240"
  },
  {
    "text": "Matt okay you see I'm a big condition R fan",
    "start": "1657320",
    "end": "1664760"
  },
  {
    "text": "and now to my final example I want to do a ping pong game",
    "start": "1664760",
    "end": "1672679"
  },
  {
    "text": "because when I recognize there are so many ways you can synchronize threats in 20",
    "start": "1672679",
    "end": "1678399"
  },
  {
    "text": "which one I always ask two question which one is the easiest one to use",
    "start": "1678399",
    "end": "1684120"
  },
  {
    "text": "which one is the fastest one to use I have here already the numbers I will not prove the numbers you have to do it on",
    "start": "1684120",
    "end": "1690720"
  },
  {
    "text": "your PC but I have this examples say run on the compile Explorer except this guy",
    "start": "1690720",
    "end": "1698360"
  },
  {
    "text": "here it takes to look you have it let me explain my ping",
    "start": "1698360",
    "end": "1704640"
  },
  {
    "text": "pong game uh let me do it here just by reading it one threat executes a ping",
    "start": "1704640",
    "end": "1711640"
  },
  {
    "text": "function and the other threat a pong function the pink threads waits for the",
    "start": "1711640",
    "end": "1718360"
  },
  {
    "text": "notification of the pong thread and sends the notification back to the pong",
    "start": "1718360",
    "end": "1723440"
  },
  {
    "text": "thread The Game Stops after 1 million ball",
    "start": "1723440",
    "end": "1728840"
  },
  {
    "text": "changes and I measure just how long this 1 million ball changes",
    "start": "1728840",
    "end": "1734840"
  },
  {
    "text": "take here's the program once more this will not work but I can reduce the",
    "start": "1734840",
    "end": "1741320"
  },
  {
    "text": "number you see let me remove a few zeros",
    "start": "1741320",
    "end": "1747200"
  },
  {
    "text": "here it will work locally but here I got a timeout you see now it works at",
    "start": "1747200",
    "end": "1752919"
  },
  {
    "text": "least so I have a ping sweat and I have a pong sweat I have to",
    "start": "1752919",
    "end": "1760159"
  },
  {
    "text": "be precise I have a thread T1 executing ping and the thre T2 executing",
    "start": "1760159",
    "end": "1766120"
  },
  {
    "text": "pong what is the Ping thread doing it does its job 1,000",
    "start": "1766120",
    "end": "1774240"
  },
  {
    "text": "times then it locks a mutex checks if data ready is false sets",
    "start": "1774240",
    "end": "1783000"
  },
  {
    "text": "data ready to True increments the counter and notifies the other",
    "start": "1783000",
    "end": "1788640"
  },
  {
    "text": "guy and another guy essentially does the same but the opposite",
    "start": "1788640",
    "end": "1796120"
  },
  {
    "text": "it LO loocks the mutex checks if it's false and sets it",
    "start": "1796120",
    "end": "1802320"
  },
  {
    "text": "true hi sorry this was wrong here's the other guy sets it to",
    "start": "1802320",
    "end": "1808480"
  },
  {
    "text": "two checks for two and sets it to force so exactly the opposite this one",
    "start": "1808480",
    "end": "1815279"
  },
  {
    "text": "Waits on condition varable one and this one notifies on condition varable one",
    "start": "1815279",
    "end": "1821720"
  },
  {
    "text": "and other way around it's essentially you could do it in one function but this would be a littleit of a",
    "start": "1821720",
    "end": "1829159"
  },
  {
    "text": "mess and 1 million ball exchanges and you see well this looks not so",
    "start": "1829159",
    "end": "1835600"
  },
  {
    "text": "easy but you can achieve it now I do it once",
    "start": "1835600",
    "end": "1841600"
  },
  {
    "text": "more with an atomic flag and now I can do it one million",
    "start": "1841600",
    "end": "1847039"
  },
  {
    "text": "times you see it works one million times and here I do it",
    "start": "1847039",
    "end": "1854639"
  },
  {
    "text": "differently this is my pink thread initially my Atomic flag is",
    "start": "1854639",
    "end": "1861039"
  },
  {
    "text": "false therefore this guy can continue because",
    "start": "1861039",
    "end": "1867120"
  },
  {
    "text": "this blocks when it would be true so it it continues it sets it to true and",
    "start": "1867120",
    "end": "1876080"
  },
  {
    "text": "then it notifies the other guy The Other Guy waits on false clears it which means",
    "start": "1876080",
    "end": "1882880"
  },
  {
    "text": "it puts it to FSE and notifies back is essentially the",
    "start": "1882880",
    "end": "1889519"
  },
  {
    "text": "same but uh uh symmetrical but you see there's no need",
    "start": "1889519",
    "end": "1894799"
  },
  {
    "text": "here for the using a motex a lock uh don't care",
    "start": "1894799",
    "end": "1900480"
  },
  {
    "text": "about SP wakeups L wakeups it's fine by Design or correct by",
    "start": "1900480",
    "end": "1907360"
  },
  {
    "text": "Design This Is atomic flck but I can do it even with atomic pool I could also use",
    "start": "1907360",
    "end": "1914919"
  },
  {
    "text": "two Atomic pools but I will not show it to you this looks pretty similar",
    "start": "1914919",
    "end": "1921240"
  },
  {
    "text": "now and I have to say it here I measure time and here I measure",
    "start": "1921240",
    "end": "1926760"
  },
  {
    "text": "time now I have an atomic pool initialized to",
    "start": "1926760",
    "end": "1933120"
  },
  {
    "text": "fals this means this guide can continue because it blocks on true it puts it",
    "start": "1933120",
    "end": "1939519"
  },
  {
    "text": "then to True increments the counter and notifies the other and the other is",
    "start": "1939519",
    "end": "1944639"
  },
  {
    "text": "waiting on for you see the opposite and puts it instead of two to fors essentially almost the same work",
    "start": "1944639",
    "end": "1953399"
  },
  {
    "text": "the almost same workflow is the previous one and now the last one which is SEMA",
    "start": "1953399",
    "end": "1963080"
  },
  {
    "text": "Force this was the wrong",
    "start": "1963080",
    "end": "1966840"
  },
  {
    "text": "one SEMA Force don't Bel these numbers on a local",
    "start": "1968600",
    "end": "1976200"
  },
  {
    "text": "machine they work differently so semors this is easy I have a semor I",
    "start": "1976200",
    "end": "1982080"
  },
  {
    "text": "have two semors both can have the value Z or one I initial initialize them with",
    "start": "1982080",
    "end": "1988799"
  },
  {
    "text": "zero so you can flip from two to one 0 to one forwards backwards then I use two",
    "start": "1988799",
    "end": "1996600"
  },
  {
    "text": "semors one for acquiring one for releasing or for",
    "start": "1996600",
    "end": "2003320"
  },
  {
    "text": "notifications and this is what I essentially do first of all B are zero then I say here",
    "start": "2003320",
    "end": "2013320"
  },
  {
    "text": "release signal to Ping this goes now from Z to one this",
    "start": "2013320",
    "end": "2020679"
  },
  {
    "text": "means what name signal to Ping signal to Ping this is this guy here this one can",
    "start": "2020720",
    "end": "2027320"
  },
  {
    "text": "acquire it it acquires it it goes to zero but now it releases another themap therefore",
    "start": "2027320",
    "end": "2034399"
  },
  {
    "text": "it goes from Zer to one and forward back",
    "start": "2034399",
    "end": "2038960"
  },
  {
    "text": "qu now I improvise what kind of synchronization",
    "start": "2040440",
    "end": "2046519"
  },
  {
    "text": "do you prefer not from the performance point of view I know you care about",
    "start": "2046519",
    "end": "2051560"
  },
  {
    "text": "performance from the usability point of view the atomics sem for or condition RS",
    "start": "2051560",
    "end": "2059079"
  },
  {
    "text": "what do you think is easier to",
    "start": "2059079",
    "end": "2062720"
  },
  {
    "text": "get I also like this kind of but anyway for me this is Crystal Clear to acquire",
    "start": "2065879",
    "end": "2072200"
  },
  {
    "text": "release but anyway but I at least we can assume or we can conclude that we don't",
    "start": "2072200",
    "end": "2079358"
  },
  {
    "text": "want to use condition RS and here other the performance numbers on Windows this is",
    "start": "2079359",
    "end": "2088040"
  },
  {
    "text": "a a real PC this virtualized but you see always condition reps are really really",
    "start": "2088040",
    "end": "2095358"
  },
  {
    "text": "bad by the way when you I show show you performance numbers always miss maximum",
    "start": "2095359",
    "end": "2101559"
  },
  {
    "text": "optimization and you see now there's no point here I don't",
    "start": "2102760",
    "end": "2109960"
  },
  {
    "text": "see a point here there's a reason for that once more",
    "start": "2109960",
    "end": "2115320"
  },
  {
    "text": "I cannot execute it on compiler expore because it's too slow I got a",
    "start": "2115320",
    "end": "2120560"
  },
  {
    "text": "timeout I did it locally I did it first with the windows compiler Windows compiler supported this new thing",
    "start": "2120560",
    "end": "2127680"
  },
  {
    "text": "first and then a few two years later GCC supported it and I used",
    "start": "2127680",
    "end": "2134119"
  },
  {
    "text": "GCC so I would say there is I",
    "start": "2137280",
    "end": "2142400"
  },
  {
    "text": "don't is there you a use case for conditioning variable anymore in C++",
    "start": "2142400",
    "end": "2148240"
  },
  {
    "text": "20 do you know anyone there's condition varable any which can do something",
    "start": "2148240",
    "end": "2153680"
  },
  {
    "text": "special but not condition varable so there's no use case we agreed",
    "start": "2153680",
    "end": "2159359"
  },
  {
    "text": "here for condition LEL okay we also get Lees and barers in C++",
    "start": "2159359",
    "end": "2166079"
  },
  {
    "text": "20 it's a it's a pretty easy synchronization",
    "start": "2166079",
    "end": "2171800"
  },
  {
    "text": "mechanism you have a synchronization point and all threats wait here until a",
    "start": "2171800",
    "end": "2177599"
  },
  {
    "text": "counter becomes zero okay and we have it in two ways we",
    "start": "2177599",
    "end": "2183800"
  },
  {
    "text": "have a ledge and we have a barrier the ledge is for the one way iteration the",
    "start": "2183800",
    "end": "2189319"
  },
  {
    "text": "batch for the more than one way iterations and this is what you can do",
    "start": "2189319",
    "end": "2195680"
  },
  {
    "text": "you can say countdown which counts down the counter by one by default by one but",
    "start": "2195680",
    "end": "2201800"
  },
  {
    "text": "you can say I want to count it on more you can say try weight which is a",
    "start": "2201800",
    "end": "2206920"
  },
  {
    "text": "terrible name which just returns you if the count is zero I had a discussion with that fman this is a terrible name",
    "start": "2206920",
    "end": "2212880"
  },
  {
    "text": "he wanted to fix it but he didn't he couldn't do it I this is a terrible",
    "start": "2212880",
    "end": "2219000"
  },
  {
    "text": "name you don't wait here you just then you have a wait",
    "start": "2219000",
    "end": "2224880"
  },
  {
    "text": "call this returns immediately if the counter is zero if not blocks until the",
    "start": "2224880",
    "end": "2230680"
  },
  {
    "text": "counter is zero and then you have arrive in weight which essentially does",
    "start": "2230680",
    "end": "2235800"
  },
  {
    "text": "countown and weight in combination and by default you count",
    "start": "2235800",
    "end": "2241480"
  },
  {
    "text": "down by one but you can achieve use a bigger volue",
    "start": "2241480",
    "end": "2248440"
  },
  {
    "text": "okay let's do a simple workflow I'm happy that this guy is not here wait a",
    "start": "2248440",
    "end": "2256240"
  },
  {
    "text": "second that this guy is not here he's in the first",
    "start": "2256240",
    "end": "2261720"
  },
  {
    "text": "room Andre Andre Alexandra okay I have here simple",
    "start": "2261720",
    "end": "2267359"
  },
  {
    "text": "workflow I have six workers her Scott bana Andrew Andre and",
    "start": "2267359",
    "end": "2274520"
  },
  {
    "text": "David all of them perform this work here what is the",
    "start": "2274520",
    "end": "2280920"
  },
  {
    "text": "work they perform this function object they perform this operation",
    "start": "2280920",
    "end": "2288200"
  },
  {
    "text": "here I only I will say a few words about this in a few seconds I did a a simple",
    "start": "2288200",
    "end": "2294720"
  },
  {
    "text": "uh standard SE synchronization forget about it this is only for optical reasons I will say more about it when I",
    "start": "2294720",
    "end": "2301160"
  },
  {
    "text": "talk about synchronized output stream I only want to be sure that this is nicely loaded",
    "start": "2301160",
    "end": "2308119"
  },
  {
    "text": "okay first I display the name and I say work done and then here",
    "start": "2308119",
    "end": "2315760"
  },
  {
    "text": "they have to wait each time a threat comes here it",
    "start": "2315760",
    "end": "2320960"
  },
  {
    "text": "decreases the counter by one and I forgot to mention some interesting point",
    "start": "2320960",
    "end": "2326440"
  },
  {
    "text": "this workd down counter is six initially and you have six workers",
    "start": "2326440",
    "end": "2332760"
  },
  {
    "text": "right so each time someone is done it it decreases the counter by one when the",
    "start": "2332760",
    "end": "2339280"
  },
  {
    "text": "counter becomes zero all can go home and say say you see you",
    "start": "2339280",
    "end": "2345279"
  },
  {
    "text": "tomorrow and therefore first all people prepare their work and then they say see",
    "start": "2346400",
    "end": "2352880"
  },
  {
    "text": "you tomorrow extremely simple and of course",
    "start": "2352880",
    "end": "2358359"
  },
  {
    "text": "not exception sa so I know but extremely simple synchronization",
    "start": "2358359",
    "end": "2365440"
  },
  {
    "text": "mechanism and with a barrier you can do it even",
    "start": "2365440",
    "end": "2370440"
  },
  {
    "text": "better this is a barrier this is helpful for managing",
    "start": "2370720",
    "end": "2375960"
  },
  {
    "text": "repetitive tasks the interface is simple you have a arrive",
    "start": "2375960",
    "end": "2382079"
  },
  {
    "text": "call you have a weight call which blocks when the counter is not",
    "start": "2382079",
    "end": "2388640"
  },
  {
    "text": "zero you have a rifen weight which is equivalent to calling a r and then",
    "start": "2388640",
    "end": "2393760"
  },
  {
    "text": "weight and you have a r and drop this is a little bit a tricky function a r and",
    "start": "2393760",
    "end": "2399960"
  },
  {
    "text": "drop means that you are out in the next",
    "start": "2399960",
    "end": "2405000"
  },
  {
    "text": "iteration of this Loop therefore in this situation there are maybe six workers and you say arrive",
    "start": "2405000",
    "end": "2411480"
  },
  {
    "text": "and drop I want to be part any a part anymore of the next iteration which by",
    "start": "2411480",
    "end": "2417680"
  },
  {
    "text": "default starts with the same number and therefore you can kick yourself out I",
    "start": "2417680",
    "end": "2423119"
  },
  {
    "text": "will show you an example",
    "start": "2423119",
    "end": "2428359"
  },
  {
    "text": "uh now I have full-time workers and part-time",
    "start": "2437359",
    "end": "2442480"
  },
  {
    "text": "workers so the full-time workers work in the morning and in the afternoon the the",
    "start": "2442480",
    "end": "2447560"
  },
  {
    "text": "parttime workers only in the morning and this is I have six of them",
    "start": "2447560",
    "end": "2455760"
  },
  {
    "text": "you see in total I have six workers three full-time workers three part-time",
    "start": "2455760",
    "end": "2464160"
  },
  {
    "text": "workers and this is what the part-time worker do they do their morning work and then",
    "start": "2464160",
    "end": "2472000"
  },
  {
    "text": "they say arrive and drop I want not to work at the",
    "start": "2472000",
    "end": "2477960"
  },
  {
    "text": "afternoon therefore the counter goes down from six to three because of three of them but what the full-time workers",
    "start": "2477960",
    "end": "2485359"
  },
  {
    "text": "do They al they say it arrive in drop say they arrive in wait and then they",
    "start": "2485359",
    "end": "2491240"
  },
  {
    "text": "have to fulfill the afternoon",
    "start": "2491240",
    "end": "2495920"
  },
  {
    "text": "work and this is the this is a possible use case for I",
    "start": "2497400",
    "end": "2504839"
  },
  {
    "text": "drop okay now we have here the same s",
    "start": "2507760",
    "end": "2512400"
  },
  {
    "text": "before Okay jump back",
    "start": "2513119",
    "end": "2518240"
  },
  {
    "text": "we have Cooperative Interruption C++ 20 why it is a bad idea to kill a",
    "start": "2519560",
    "end": "2527760"
  },
  {
    "text": "threat go on do you have no idea",
    "start": "2529960",
    "end": "2536240"
  },
  {
    "text": "which yeah of course maybe the mutex is locked would be a lot of fun when you",
    "start": "2536240",
    "end": "2541760"
  },
  {
    "text": "kill the threat you have no idea which state the threat is",
    "start": "2541760",
    "end": "2547040"
  },
  {
    "text": "essentially uh this is always nice I think P thre allows it and they always",
    "start": "2547040",
    "end": "2552720"
  },
  {
    "text": "me also mention you should not do it which is",
    "start": "2552720",
    "end": "2558520"
  },
  {
    "text": "nice I'm not a peace thre expert okay what we do we love Cooperative",
    "start": "2558520",
    "end": "2566680"
  },
  {
    "text": "Interruption this means I can say to a threat please stop and the threat can",
    "start": "2566680",
    "end": "2572760"
  },
  {
    "text": "say I will do it or not and I can only do it",
    "start": "2572760",
    "end": "2578558"
  },
  {
    "text": "once cooperatively it essentially consists of two components and the third one which",
    "start": "2579599",
    "end": "2585920"
  },
  {
    "text": "will come later we have a stop token and a stop Source the stop token is something you",
    "start": "2585920",
    "end": "2593920"
  },
  {
    "text": "copy it's extremely cheap to copy and you copy it into to this running entity",
    "start": "2593920",
    "end": "2599280"
  },
  {
    "text": "you want to request to stop and the stop Source uh States the stop request",
    "start": "2599280",
    "end": "2607839"
  },
  {
    "text": "and this is what a stop token can do can ask if it stop is possible and if a stop",
    "start": "2607839",
    "end": "2612960"
  },
  {
    "text": "was requested this mechanism is built in in",
    "start": "2612960",
    "end": "2618559"
  },
  {
    "text": "ch sweat the improved sweat and in condition varable any I want to say it",
    "start": "2618559",
    "end": "2625119"
  },
  {
    "text": "explicitly not condition varable condition varable any and this is a stop token on the",
    "start": "2625119",
    "end": "2632680"
  },
  {
    "text": "contrary we have the stop Source a stop source has a function get token this allows you to create a stop",
    "start": "2632680",
    "end": "2642160"
  },
  {
    "text": "token then it has function stop possible to ask if a stop can request it uh if",
    "start": "2642160",
    "end": "2648920"
  },
  {
    "text": "Source can be requested to stop you can only do it once you can ask is it if it already",
    "start": "2648920",
    "end": "2655599"
  },
  {
    "text": "happened and here you request to stop let me show you a simple example",
    "start": "2655599",
    "end": "2663880"
  },
  {
    "text": "using a GES s gwat let's say this stands",
    "start": "2663880",
    "end": "2670640"
  },
  {
    "text": "for it was first called eat for interruptable now it stands for joinable",
    "start": "2670640",
    "end": "2675680"
  },
  {
    "text": "but anyway I should not say e I should say I",
    "start": "2675680",
    "end": "2685160"
  },
  {
    "text": "okay here I have a main function and two really really long",
    "start": "2685160",
    "end": "2690880"
  },
  {
    "text": "lambas usually I don't write this long lambas but here I do it here have an",
    "start": "2690880",
    "end": "2696880"
  },
  {
    "text": "Gat which is non-interruptible and this is what it does it has a counter it",
    "start": "2696880",
    "end": "2702160"
  },
  {
    "text": "counts up up to 10 it sleeps for fifth of a second and always says non",
    "start": "2702160",
    "end": "2710160"
  },
  {
    "text": "eruptible ah here have a little bit of inter leing but I don't care and here I have a cheese sweat which got a stop",
    "start": "2710440",
    "end": "2717960"
  },
  {
    "text": "token you see and here it asks if a stop was",
    "start": "2717960",
    "end": "2724119"
  },
  {
    "text": "requested and if so just two",
    "start": "2724119",
    "end": "2728400"
  },
  {
    "text": "turns now I have the main sweat which sleeps for sleeps for one",
    "start": "2731480",
    "end": "2738000"
  },
  {
    "text": "second and then requests both sweats to",
    "start": "2738000",
    "end": "2744040"
  },
  {
    "text": "stop only the interruptable sweat will react because it has stop token",
    "start": "2744040",
    "end": "2751760"
  },
  {
    "text": "here and therefore you see what's happening first both Red Run",
    "start": "2751760",
    "end": "2757319"
  },
  {
    "text": "interruptible non-interruptible you see then the request to stop comes and only the non-interruptible",
    "start": "2757319",
    "end": "2764559"
  },
  {
    "text": "continuous until 10 this is a cheese thread or",
    "start": "2764559",
    "end": "2771880"
  },
  {
    "text": "Interruption of a Cooperative Interruption of a g",
    "start": "2771880",
    "end": "2777400"
  },
  {
    "text": "threat okay",
    "start": "2778359",
    "end": "2782400"
  },
  {
    "text": "uh I don't want to say it but I assume this",
    "start": "2784800",
    "end": "2790520"
  },
  {
    "text": "is based on that I'm not sure not because I know what you mean promise has",
    "start": "2790520",
    "end": "2796599"
  },
  {
    "text": "the function get future here we call it get token but what is special is now there's",
    "start": "2796599",
    "end": "2802760"
  },
  {
    "text": "one extreme different point our future cannot be",
    "start": "2802760",
    "end": "2808280"
  },
  {
    "text": "copied and this can extremely cheap be copied maybe it's more shared I don't",
    "start": "2808280",
    "end": "2814839"
  },
  {
    "text": "know it's honestly goes more this direction you agree maybe",
    "start": "2814839",
    "end": "2820400"
  },
  {
    "text": "a shared future Shar stage yeah but it goes more in this direction",
    "start": "2820400",
    "end": "2828079"
  },
  {
    "text": "okay yeah some sharing facility I see the same way you can by",
    "start": "2831240",
    "end": "2839119"
  },
  {
    "text": "the way go in GitHub you look for Nicol suu implementation and study it",
    "start": "2839119",
    "end": "2846640"
  },
  {
    "text": "because he uh created this",
    "start": "2846640",
    "end": "2850400"
  },
  {
    "text": "guy I don't get",
    "start": "2852640",
    "end": "2856160"
  },
  {
    "text": "you once more if you want to know more details you can see how at least could be",
    "start": "2871400",
    "end": "2878559"
  },
  {
    "text": "implemented okay I played with this stuff before it was published or a wable because I'm",
    "start": "2878559",
    "end": "2886079"
  },
  {
    "text": "really really curious which direction C++ in concurrency goes okay I was",
    "start": "2886079",
    "end": "2893440"
  },
  {
    "text": "honestly a little bit disappointed about Cooperative Interruption you can do it",
    "start": "2893440",
    "end": "2898760"
  },
  {
    "text": "with cheese thre you can do it with condition variable any but then I recognized this is a extremely",
    "start": "2898760",
    "end": "2906359"
  },
  {
    "text": "generic mechanism I recognized it and now I show you an example what",
    "start": "2906359",
    "end": "2912040"
  },
  {
    "text": "you can do with that and honestly I like this example more because this is more",
    "start": "2912040",
    "end": "2918200"
  },
  {
    "text": "explicit you know python the Met rule of python the second",
    "start": "2918200",
    "end": "2924960"
  },
  {
    "text": "meta rule of python explicit is better than implicit code should be expit should",
    "start": "2924960",
    "end": "2930920"
  },
  {
    "text": "know what's happening and now you see it have a look I have here stop",
    "start": "2930920",
    "end": "2936720"
  },
  {
    "text": "Source I I create my stop token out of it and now I have a few running entities",
    "start": "2936720",
    "end": "2945200"
  },
  {
    "text": "I have a threat which takes a function and a stop token so I can also use it as",
    "start": "2945200",
    "end": "2950960"
  },
  {
    "text": "a threat but now I have to use it as a argument and what is function one",
    "start": "2950960",
    "end": "2958559"
  },
  {
    "text": "doing here it sleeps for one second and then it asks if a stop was requested in",
    "start": "2958559",
    "end": "2965160"
  },
  {
    "text": "this cas I just say stop requested only to see what's happening so I can do it with a",
    "start": "2965160",
    "end": "2971920"
  },
  {
    "text": "thread I can also do it with a cheese thread I can do this",
    "start": "2971920",
    "end": "2978760"
  },
  {
    "text": "explicitly this also performs the function function one but it's even better I can do it",
    "start": "2978760",
    "end": "2987000"
  },
  {
    "text": "with a sync it takes my stop token and here I ask if I was requested to",
    "start": "2987000",
    "end": "2994520"
  },
  {
    "text": "stop I can do it with a",
    "start": "2994520",
    "end": "2999559"
  },
  {
    "text": "promise this is my promise which I move inside this red and now let's see what",
    "start": "2999559",
    "end": "3005119"
  },
  {
    "text": "function two is doing I registered here in call",
    "start": "3005119",
    "end": "3011480"
  },
  {
    "text": "back which is called when the stop request",
    "start": "3011480",
    "end": "3017000"
  },
  {
    "text": "appeared so I can register callbacks which are called in case you cannot only",
    "start": "3017000",
    "end": "3023440"
  },
  {
    "text": "register one you can just as many call backs as you like but you don't have to",
    "start": "3023440",
    "end": "3029200"
  },
  {
    "text": "guarantee which one runs first so it's extremely generic",
    "start": "3029200",
    "end": "3034400"
  },
  {
    "text": "mechanism and now I like it honestly and I can also do it from the main Sweat",
    "start": "3034400",
    "end": "3040920"
  },
  {
    "text": "Just For Fun you see here I request the stop and then I",
    "start": "3040920",
    "end": "3046319"
  },
  {
    "text": "asked in the main thre if there was a stop request this makes no sense but I only",
    "start": "3046319",
    "end": "3052079"
  },
  {
    "text": "want to show you it's possible and here you see all the reaction",
    "start": "3052079",
    "end": "3057440"
  },
  {
    "text": "and once more I like this way more because this is extremely explicit and I want to program explicit you should read",
    "start": "3062040",
    "end": "3068799"
  },
  {
    "text": "my code and you should know what's happening this is readability is one of my key",
    "start": "3068799",
    "end": "3076119"
  },
  {
    "text": "concerns okay uh a few short remarks and then I'm",
    "start": "3077079",
    "end": "3084319"
  },
  {
    "text": "almost done you know this is a lot of fun we have with stood threat I don't show it to you",
    "start": "3084319",
    "end": "3091280"
  },
  {
    "text": "but because you know it stood thread I show it to you you should see",
    "start": "3091280",
    "end": "3096520"
  },
  {
    "text": "it this makes it more",
    "start": "3096520",
    "end": "3100200"
  },
  {
    "text": "obvious terminal called without an active exception program terminal with",
    "start": "3102480",
    "end": "3108319"
  },
  {
    "text": "with Microsoft you only get a number which makes it also not nicer the point is the following when you create a",
    "start": "3108319",
    "end": "3114839"
  },
  {
    "text": "threat T and this red T gouts out of scope",
    "start": "3114839",
    "end": "3124640"
  },
  {
    "text": "while the threat is still joinable why you never call detach or uh join on it",
    "start": "3124640",
    "end": "3131720"
  },
  {
    "text": "you get an stood terminate in its Destructor which ends with an",
    "start": "3131720",
    "end": "3137359"
  },
  {
    "text": "aort and this is what you can see and what I mostly like about this error message is the following",
    "start": "3137359",
    "end": "3144280"
  },
  {
    "text": "one you have no idea what happened this gives you noide clue what",
    "start": "3144280",
    "end": "3151640"
  },
  {
    "text": "happened and this issue is gone with C++ um 20 then you should use",
    "start": "3151640",
    "end": "3161160"
  },
  {
    "text": "G and Gat joins automatically if necessary in the structor and you'll see",
    "start": "3161160",
    "end": "3168400"
  },
  {
    "text": "here now it's fine takes a little bit longer but it's fine no it does not take long",
    "start": "3168400",
    "end": "3177240"
  },
  {
    "text": "when when should the exception be uh thrown",
    "start": "3185559",
    "end": "3189799"
  },
  {
    "text": "once okay fine I answered question things okay so this was by the way a",
    "start": "3202040",
    "end": "3210440"
  },
  {
    "text": "design issue St thread was created 11 and all way all people said immediately use a",
    "start": "3210440",
    "end": "3216640"
  },
  {
    "text": "scoped thread I implemented anony implemented this was pretty easy but now we have it or use the one we have in",
    "start": "3216640",
    "end": "3225280"
  },
  {
    "text": "GSL now it's fine okay and now to the last feature I",
    "start": "3226000",
    "end": "3233200"
  },
  {
    "text": "want to mention in C++ plus 20 synchronized output",
    "start": "3233200",
    "end": "3239720"
  },
  {
    "text": "streams standard say out is thre safe but not in the way you think and now you",
    "start": "3240559",
    "end": "3246400"
  },
  {
    "text": "can have the you have the guarantee that your sentence is written an atomic",
    "start": "3246400",
    "end": "3252200"
  },
  {
    "text": "step here are two simple examples here I have a stood out wrapped",
    "start": "3252200",
    "end": "3258880"
  },
  {
    "text": "in a Sy out and now when I write to it nothing happens even this endle call has",
    "start": "3258880",
    "end": "3266280"
  },
  {
    "text": "no effect the output is written when s out",
    "start": "3266280",
    "end": "3272559"
  },
  {
    "text": "goes out of scope and exactly here therefore the entire um entire sentence is written in one",
    "start": "3272559",
    "end": "3281480"
  },
  {
    "text": "Atomic step oh now let me a little bit piggy",
    "start": "3281480",
    "end": "3287440"
  },
  {
    "text": "what iium in C++ models syned",
    "start": "3287440",
    "end": "3293319"
  },
  {
    "text": "out what is the mod most important itum is",
    "start": "3293319",
    "end": "3298240"
  },
  {
    "text": "C++ the term goes back to in hereat it r",
    "start": "3298680",
    "end": "3305280"
  },
  {
    "text": "aii because you do an an action when the thing goes out of scope in here the",
    "start": "3305280",
    "end": "3311520"
  },
  {
    "text": "action is you flush the buffer you can do it this way or can do",
    "start": "3311520",
    "end": "3316559"
  },
  {
    "text": "it even this way now this thing lives until this semicolon here and therefore here it's",
    "start": "3316559",
    "end": "3324000"
  },
  {
    "text": "flashed and this is what I have should have used",
    "start": "3324000",
    "end": "3329480"
  },
  {
    "text": "before Diana noticed it but when I created this program this was not",
    "start": "3329480",
    "end": "3334760"
  },
  {
    "text": "available and now I'm",
    "start": "3334760",
    "end": "3339440"
  },
  {
    "text": "done but now it's ailable by the way okay this was C++ 20 I made a deep",
    "start": "3341440",
    "end": "3348880"
  },
  {
    "text": "dive I also gave you a little bit of background to say what improved",
    "start": "3348880",
    "end": "3354160"
  },
  {
    "text": "regarding uh atomics in C++ 20",
    "start": "3354160",
    "end": "3360520"
  },
  {
    "text": "Y and five minutes are left but anyway I'm longer I I stay longer here if",
    "start": "3368640",
    "end": "3375440"
  },
  {
    "text": "necessary any question this was what I essentially wanted to",
    "start": "3375440",
    "end": "3380799"
  },
  {
    "text": "say",
    "start": "3383920",
    "end": "3386920"
  },
  {
    "text": "go what do you mean exactly what Atomic flag and",
    "start": "3400799",
    "end": "3405839"
  },
  {
    "text": "SP",
    "start": "3413880",
    "end": "3416880"
  },
  {
    "text": "after after",
    "start": "3440799",
    "end": "3446799"
  },
  {
    "text": "can you kick in Dan do you know",
    "start": "3453520",
    "end": "3457319"
  },
  {
    "text": "it we still fight",
    "start": "3460039",
    "end": "3464160"
  },
  {
    "text": "yeah I so far never use any kind of predicate when I would use Atomic pick",
    "start": "3467559",
    "end": "3476359"
  },
  {
    "text": "because I assumed that that that's not is that does not",
    "start": "3476359",
    "end": "3482960"
  },
  {
    "text": "have the issues of um Spurs wakeups but on this level you often have",
    "start": "3482960",
    "end": "3488799"
  },
  {
    "text": "issues of Spurs wakeups so I'm not one% sure you you see I explained you compare",
    "start": "3488799",
    "end": "3494359"
  },
  {
    "text": "exchange strong the weak thing could have SP wakeups what's",
    "start": "3494359",
    "end": "3501559"
  },
  {
    "text": "that someone is shooting at me statical I'm on fire or power okay",
    "start": "3501559",
    "end": "3512599"
  },
  {
    "text": "so it's a prate by itself which essentially checks atomically the state",
    "start": "3513359",
    "end": "3519680"
  },
  {
    "text": "of the atomic with the value you therefore it's it seems to be something here I",
    "start": "3519680",
    "end": "3528920"
  },
  {
    "text": "just now I can do it this way yeah I'm really really",
    "start": "3530079",
    "end": "3535400"
  },
  {
    "text": "strong okay now I'm weak but now I'm",
    "start": "3535400",
    "end": "3541079"
  },
  {
    "text": "strong so we assume this is fine but you usually you have to read the",
    "start": "3541079",
    "end": "3549160"
  },
  {
    "text": "original wording okay any additional question I cannot",
    "start": "3549160",
    "end": "3555599"
  },
  {
    "text": "answer then we do it a different way a question I could",
    "start": "3557520",
    "end": "3563039"
  },
  {
    "text": "answer then I would say we are",
    "start": "3563640",
    "end": "3569599"
  },
  {
    "text": "done",
    "start": "3569599",
    "end": "3572599"
  }
]