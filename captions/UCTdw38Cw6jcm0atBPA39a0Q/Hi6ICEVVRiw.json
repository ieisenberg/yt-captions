[
  {
    "text": "okay good afternoon um i don't believe we have any um",
    "start": "5040",
    "end": "10400"
  },
  {
    "text": "bomb scares planned because obviously they're planned um uh and i'm surprised uh the number of",
    "start": "10400",
    "end": "16720"
  },
  {
    "text": "people who want to turn up to find out a bit about programming history i take this as a positive sign okay",
    "start": "16720",
    "end": "22400"
  },
  {
    "text": "either that or you need a gentle snooze at the end of the day having filled your head with all kinds of technical wonders",
    "start": "22400",
    "end": "27519"
  },
  {
    "text": "um i'm going to take you back to the past concurrent affairs um procedural programming unlocked see every now and",
    "start": "27519",
    "end": "33520"
  },
  {
    "text": "then i do a talk where some element of the title is deliberately provocative nobody nobody",
    "start": "33520",
    "end": "39280"
  },
  {
    "text": "else i mean maybe i should take a picture of you and just post it came to it would come to a talk on procedural",
    "start": "39280",
    "end": "44640"
  },
  {
    "text": "programming because that's just like a thing that you don't do that's a bad word i kind of want to reclaim that because",
    "start": "44640",
    "end": "50559"
  },
  {
    "text": "people normally use some particular word and they overload it with either the word meaning of good or the meaning of",
    "start": "50559",
    "end": "56719"
  },
  {
    "text": "bat and they will and at various points in the history of programming the words",
    "start": "56719",
    "end": "61840"
  },
  {
    "text": "good and bad have meant different things um you know you go to some functional shops these days and they go oh that's so object-oriented as if it's a bad",
    "start": "61840",
    "end": "68240"
  },
  {
    "text": "thing um whereas yeah you get a lot of people looking at the object-oriented code and they kind of go your object",
    "start": "68240",
    "end": "73920"
  },
  {
    "text": "oriented code is really procedural and it's a bad thing um these paradigms all kind of jostle up against one another um",
    "start": "73920",
    "end": "81680"
  },
  {
    "text": "they're all kind of good they all have their context of applicability they all influence that this us at different points they also dominate our thinking",
    "start": "81680",
    "end": "89680"
  },
  {
    "text": "and that's the failure excessively getting absorbed by one approach",
    "start": "89680",
    "end": "94720"
  },
  {
    "text": "um and and i've always been you know yeah kind of hot and cold about procedural programming then i realized",
    "start": "94720",
    "end": "100079"
  },
  {
    "text": "when i look back at my career the number of times that an idea had actually come from the procedural space it's just oh",
    "start": "100079",
    "end": "105840"
  },
  {
    "text": "that's interesting i didn't really appreciate that but more importantly how many of the lost contributions",
    "start": "105840",
    "end": "112320"
  },
  {
    "text": "were from the procedural space and they're kind of coming back which is kind of interesting",
    "start": "112320",
    "end": "117680"
  },
  {
    "text": "so let's talk a little bit about that um my name's kevin henney um i have an interest in all kinds of stuff um from",
    "start": "117680",
    "end": "124240"
  },
  {
    "text": "kind of architecture level to um coding level detail um",
    "start": "124240",
    "end": "130319"
  },
  {
    "text": "and so i'm not gonna really be talking about anything related to these books it's",
    "start": "130319",
    "end": "135680"
  },
  {
    "text": "just kind of context um i'm interested in how all this stuff fits together and i'm very interested in paradigms",
    "start": "135680",
    "end": "142879"
  },
  {
    "text": "and functional programming was a real eye-opener to me uh when i encountered it um",
    "start": "142879",
    "end": "149120"
  },
  {
    "text": "a very long time ago um over 30 years ago let's just let's just let's just kind of not discuss the",
    "start": "149440",
    "end": "156400"
  },
  {
    "text": "numbers okay greater than 30 years ago because at that point i had been programming in fortran and c and trust",
    "start": "156400",
    "end": "163440"
  },
  {
    "text": "me c is the greatest relief in your life when you have worked with fortran it is just it's the feeling of not hitting",
    "start": "163440",
    "end": "170000"
  },
  {
    "text": "your head against a wall anymore it's just wonderful particularly doing systems programming",
    "start": "170000",
    "end": "176959"
  },
  {
    "text": "and i started reading up on all these other languages and these different styles i came across functional programming",
    "start": "176959",
    "end": "182800"
  },
  {
    "text": "i was then also fortunate to end up doing a um a master's degree where i looked into",
    "start": "182800",
    "end": "188720"
  },
  {
    "text": "parallel computer systems and uh kind of focus and actually implemented a virtual",
    "start": "188720",
    "end": "194879"
  },
  {
    "text": "machine that was kind of a lisp well it's kind of an object-oriented functional thing and and it's kind of nice to see this",
    "start": "194879",
    "end": "201680"
  },
  {
    "text": "kind of coming in a bit more to the mainstream now there are a lot of people these days who are saying you know",
    "start": "201680",
    "end": "206799"
  },
  {
    "text": "functional programming is making a comeback no it's not it's done it's come back if you look at the lines they've plateaued",
    "start": "206799",
    "end": "213200"
  },
  {
    "text": "it's it's it's kind of done its bit and everybody really these days has kind of",
    "start": "213200",
    "end": "218239"
  },
  {
    "text": "gone for hybrid or pragmatic i love this because when people use the",
    "start": "218239",
    "end": "225280"
  },
  {
    "text": "word pragmatic it's a short way of saying not you probably encountered this you know",
    "start": "225280",
    "end": "230400"
  },
  {
    "text": "we're doing pragmatic tdd we're not doing tdd we're doing pragmatic agile we are so not agile",
    "start": "230400",
    "end": "238720"
  },
  {
    "text": "we are doing pragmatic functional programming we call that procedural programming when you actually look at a number of",
    "start": "238720",
    "end": "245120"
  },
  {
    "text": "the concepts and you add in you go to functional programming you go what if the functions aren't pure",
    "start": "245120",
    "end": "251200"
  },
  {
    "text": "what if just functions call other functions huh what if we just share stuff that's good next door i want",
    "start": "251200",
    "end": "258720"
  },
  {
    "text": "some of what they have so there's this whole thing of like actually that's what functional",
    "start": "258720",
    "end": "264080"
  },
  {
    "text": "programming degenerates into um you're not careful and one of the things that characterizes functional programming or rather procedural",
    "start": "264080",
    "end": "270479"
  },
  {
    "text": "programming from functional programming is a different model or a discipline of state um and you can arrive at some of the",
    "start": "270479",
    "end": "277040"
  },
  {
    "text": "same solutions by different parts a lot of people mistake immutability for functional programming",
    "start": "277040",
    "end": "282560"
  },
  {
    "text": "immutability covers a much larger space functional programming is the answer that you get if you say what if",
    "start": "282560",
    "end": "288479"
  },
  {
    "text": "my functions have no side effects if you start the other way you end up",
    "start": "288479",
    "end": "293759"
  },
  {
    "text": "with a very similar solution what if i'm not allowed to change data well that means the only operations i can have can't have side effects um they they",
    "start": "293759",
    "end": "300240"
  },
  {
    "text": "have a kind of equifinality you get to the same destination by two different routes but that point about state change",
    "start": "300240",
    "end": "305440"
  },
  {
    "text": "is kind of important because when we start throwing in concurrency and i'll come to what do i mean by concurrency because guess what",
    "start": "305440",
    "end": "311440"
  },
  {
    "text": "there isn't a unique definition if you've ever been in a talk and somebody said this is the definition of concurrency",
    "start": "311440",
    "end": "317360"
  },
  {
    "text": "they are not entirely correct it turns out this is not a standardized term you can quite have to pick up one book that",
    "start": "317360",
    "end": "323039"
  },
  {
    "text": "says concurrency is things running simultaneously on different you know actually they are genuinely in terms of",
    "start": "323039",
    "end": "330320"
  },
  {
    "text": "physics running simultaneously and you'll pick up another thing saying that is not actually the case they are time",
    "start": "330320",
    "end": "336000"
  },
  {
    "text": "sliced with respect to one another you can go even further and say not even there mate co-routines stuff",
    "start": "336000",
    "end": "341280"
  },
  {
    "text": "like that which i will be talking about so it turns out that at different times with different people they have a very",
    "start": "341280",
    "end": "346560"
  },
  {
    "text": "strong opinion about the work and currency i'm just going to define my terms here i'm using concurrency like",
    "start": "346560",
    "end": "352880"
  },
  {
    "text": "we do in english okay it means things happening at the same time any other qualification i will",
    "start": "352880",
    "end": "358000"
  },
  {
    "text": "make clear so when we throw concurrency in and it can degenerate in various ways",
    "start": "358000",
    "end": "364560"
  },
  {
    "text": "and fragment if you like um there is a question of state change",
    "start": "364560",
    "end": "370479"
  },
  {
    "text": "and one of the most obvious mechanisms that people have in the past employed and they said oh yeah i'm gonna throw threads at the problem",
    "start": "370479",
    "end": "375919"
  },
  {
    "text": "okay and they got themselves into terrible",
    "start": "375919",
    "end": "381280"
  },
  {
    "text": "trouble which honestly if you're a consultant is great um",
    "start": "381280",
    "end": "387039"
  },
  {
    "text": "because people have kind of gone at it with the idea of saying well i went on a course i've learned about a library it's",
    "start": "387039",
    "end": "392720"
  },
  {
    "text": "a very common problem that we have is we often think ah it's just a library i've now got this capability i'm just calling",
    "start": "392720",
    "end": "398560"
  },
  {
    "text": "it it's just like it's not just a library when you introduce concurrency into a",
    "start": "398560",
    "end": "404319"
  },
  {
    "text": "non-concurrent environment what you do is you change the laws of physics of your program",
    "start": "404319",
    "end": "409440"
  },
  {
    "text": "you change the nature of time there is nothing more profound than that by the way if you're ever dealing with a",
    "start": "409440",
    "end": "416240"
  },
  {
    "text": "bug related to concurrency you can console yourself with that feeling i am",
    "start": "416240",
    "end": "421280"
  },
  {
    "text": "exploring the nature of time and deep questions of philosophy okay that probably sounds better than i'm debugging some damn threading book",
    "start": "421280",
    "end": "428560"
  },
  {
    "text": "but there is a point here it's not it's not a minor thing i keep finding people say oh yeah i just kind of sprinkled",
    "start": "428560",
    "end": "434319"
  },
  {
    "text": "some threads on the code it's just it doesn't work like that i changed the laws of physics about how our system runs and it's not working anymore",
    "start": "434319",
    "end": "441840"
  },
  {
    "text": "well yeah when you look at it it's kind of obvious you've changed the nature of time now why does this happen",
    "start": "441840",
    "end": "448479"
  },
  {
    "text": "so we're at the end of the day it's time for a quadrant diagram let us talk about this quadrant diagram quadrant diagrams are nice and easy that's why i put it at",
    "start": "448479",
    "end": "454720"
  },
  {
    "text": "the end of the day there's normally one quadrant that's very very good or one quadrant that's very very bad we basically divide the",
    "start": "454720",
    "end": "461039"
  },
  {
    "text": "universe into four so here are the axes i have some state and over a particular interval of",
    "start": "461039",
    "end": "466720"
  },
  {
    "text": "interest a particular period of time of interest this state",
    "start": "466720",
    "end": "472000"
  },
  {
    "text": "may or may not be shared in other words it is shareable it is shared or unchecked",
    "start": "472000",
    "end": "477280"
  },
  {
    "text": "okay also over this period of time it may or may not change",
    "start": "477280",
    "end": "482720"
  },
  {
    "text": "it is mutable or immutable and notice i'm saying may change i'm not saying it has to change the possibility that it",
    "start": "482720",
    "end": "488879"
  },
  {
    "text": "could change you know there are things called if statements you know you don't have to commit to that path",
    "start": "488879",
    "end": "495039"
  },
  {
    "text": "so in other words we have this quadrant diagram and it turns out",
    "start": "495039",
    "end": "500319"
  },
  {
    "text": "that it's actually surprisingly easy to write systems that are concurrent",
    "start": "500319",
    "end": "507720"
  },
  {
    "text": "as long as you have a clear sense of which is the bad quadrant",
    "start": "508720",
    "end": "515360"
  },
  {
    "text": "now i'm red green color blight but i have chosen shades that i know work",
    "start": "515360",
    "end": "521680"
  },
  {
    "text": "and red is nature's color of danger it is the color of blood in other cultures it is the color of",
    "start": "521680",
    "end": "527920"
  },
  {
    "text": "celebration again i refer you to the consultant's remark top right hand corner you don't want to",
    "start": "527920",
    "end": "533760"
  },
  {
    "text": "go here this is where the pain lies that we can even call it we can give it a name synchronization quadrant now what",
    "start": "533760",
    "end": "540000"
  },
  {
    "text": "is interesting here is it turns out three quarters of the diagram is is a safe space",
    "start": "540000",
    "end": "545440"
  },
  {
    "text": "it's a it kind of almost falls out it's just like well if you don't share your data you can do",
    "start": "545440",
    "end": "551040"
  },
  {
    "text": "what you want with it you can change it or not change it you know i can't see that it doesn't matter to me",
    "start": "551040",
    "end": "556720"
  },
  {
    "text": "this is kind of like the classic unix process model you know the unix process well whatever you're doing the privilege of your own",
    "start": "556720",
    "end": "562240"
  },
  {
    "text": "process you know that's your own business i'm cool with that but i can't see that state",
    "start": "562240",
    "end": "568320"
  },
  {
    "text": "it doesn't matter to me even though i may be running concurrently with you i i can't affect that it's not shared with",
    "start": "568320",
    "end": "574800"
  },
  {
    "text": "me i can't see it in other words that's totally safe so that's a really simple way and that is the kind of",
    "start": "574800",
    "end": "580800"
  },
  {
    "text": "classic unix way unix historically had a really negative opinion about things like threads",
    "start": "580800",
    "end": "587519"
  },
  {
    "text": "it's just like no we do everything with processes because they are a natural unit of isolation a natural unit of fault tolerance",
    "start": "587519",
    "end": "593600"
  },
  {
    "text": "and a natural unit of safety from the point of view of the program okay let's take a different slice",
    "start": "593600",
    "end": "599360"
  },
  {
    "text": "what if i can't change the stuff this is by the way one of those interesting observations that we need to",
    "start": "599360",
    "end": "604959"
  },
  {
    "text": "talk about when we talk about words like synchronize what is it that we are synchronizing",
    "start": "604959",
    "end": "610079"
  },
  {
    "text": "we are synchronizing change what if there is no change again more philosophy what if there is no change then you",
    "start": "610079",
    "end": "616320"
  },
  {
    "text": "don't have to synchronize ah well that that problem went away really quickly",
    "start": "616320",
    "end": "621680"
  },
  {
    "text": "so that's the other axis okay so what we have is these are the safe spaces",
    "start": "621680",
    "end": "627760"
  },
  {
    "text": "top right hand corner yeah things are going to happen at the same time we can all see it and maybe we'll change it maybe we won't are you",
    "start": "627760",
    "end": "633839"
  },
  {
    "text": "feeling lucky so this bit which bleaches out terribly in",
    "start": "633839",
    "end": "640800"
  },
  {
    "text": "the light but let me let me clarify a few what this says functional comfort zone this is the functional comfort zone",
    "start": "640800",
    "end": "648560"
  },
  {
    "text": "functional programming is based on functional purity with the consequence that naturally things don't change",
    "start": "648560",
    "end": "654399"
  },
  {
    "text": "immutability is part of the landscape as it is with many declarative approaches this is great you get this for free with",
    "start": "654399",
    "end": "660720"
  },
  {
    "text": "the paradigm top left hand corner is the procedural",
    "start": "660720",
    "end": "666000"
  },
  {
    "text": "comfort zone you can change your state but you don't share it with anybody now",
    "start": "666000",
    "end": "671200"
  },
  {
    "text": "this by the way is also historically why we ended up with the problems of everybody in the in the right hand",
    "start": "671200",
    "end": "676640"
  },
  {
    "text": "quadrant why do we end up in the discomfort zone because we were all over on the left-hand side",
    "start": "676640",
    "end": "683040"
  },
  {
    "text": "because it turns out that the lower part used too much memory and was too slow historically",
    "start": "683040",
    "end": "689040"
  },
  {
    "text": "and everybody was probably in the top left top left-hand corner they had this idea imperative programming you are entitled",
    "start": "689040",
    "end": "695519"
  },
  {
    "text": "to change state whereas actually you need to approach the modification of state is a privilege not an",
    "start": "695519",
    "end": "700839"
  },
  {
    "text": "entitlement and when you look at it like that if everybody's doing that and somebody suddenly says okay",
    "start": "700839",
    "end": "706240"
  },
  {
    "text": "we can now have threads and things like that it's just like right we all",
    "start": "706240",
    "end": "711279"
  },
  {
    "text": "wander over into the new territory using our thinking habits and programming languages and we bolt things onto our",
    "start": "711279",
    "end": "716880"
  },
  {
    "text": "programming languages even the new ones java is a really good example a language that was created",
    "start": "716880",
    "end": "723440"
  },
  {
    "text": "after we actually ended up with kind of a fairly decent operating system threading being introduced",
    "start": "723440",
    "end": "728959"
  },
  {
    "text": "invented a new and it was kind of like let's develop an object-oriented language from scratch and then just bolt",
    "start": "728959",
    "end": "734000"
  },
  {
    "text": "on threads it's just like they feel bolted on that's because they are that's not that",
    "start": "734000",
    "end": "739519"
  },
  {
    "text": "doesn't make sense in the way that the language is designed and it's why it's painful",
    "start": "739519",
    "end": "744639"
  },
  {
    "text": "so there's a kind of an interesting point here we've ended up here for reasons of history people go in there",
    "start": "744639",
    "end": "750240"
  },
  {
    "text": "they say right i'm entitled to state change how do i do this in a concurrent environment wrong",
    "start": "750240",
    "end": "756000"
  },
  {
    "text": "you are basically gotta approach it like what if i don't change the state okay",
    "start": "756000",
    "end": "761440"
  },
  {
    "text": "or what if we don't share what if we keep everything separate so",
    "start": "761440",
    "end": "766720"
  },
  {
    "text": "this is the kind of interesting list a couple of other points of history um dykstra introduced the word mutex but he",
    "start": "766720",
    "end": "773279"
  },
  {
    "text": "didn't introduce the construct he introduced a thing called the semaphore um the difference between a mutex and a semaphore these days a semaphore is just",
    "start": "773279",
    "end": "780240"
  },
  {
    "text": "a lock and anybody can lock it and unlock it basically and let's be very very clear",
    "start": "780240",
    "end": "786160"
  },
  {
    "text": "about the purpose of any form of lock the purpose of a lock",
    "start": "786160",
    "end": "792320"
  },
  {
    "text": "is to eliminate currency so whenever anybody whenever you say so why are you guys you know kind of",
    "start": "792320",
    "end": "798320"
  },
  {
    "text": "using all this threading in your code we want better performance why are you using all these locks because we want to kill that performance",
    "start": "798320",
    "end": "804240"
  },
  {
    "text": "but they never say that it's funny you know the whole point is a lock is the anti-threat",
    "start": "804240",
    "end": "810000"
  },
  {
    "text": "okay that is something when you all computers wait at the same speed okay",
    "start": "810000",
    "end": "816480"
  },
  {
    "text": "this is the point about moore's law when it comes to waiting you know you can have a three gigahertz",
    "start": "816480",
    "end": "821760"
  },
  {
    "text": "multi-core weight or a one gigahertz single call weight you know what they actually have the same amount of time",
    "start": "821760",
    "end": "827120"
  },
  {
    "text": "so he was introducing semaphores but he referred to one",
    "start": "827120",
    "end": "832320"
  },
  {
    "text": "as a mute he just gave it the name mutex for mutual exclusion and that name was then later picked up to give a much more",
    "start": "832320",
    "end": "838399"
  },
  {
    "text": "specific meaning of a lock with affinity in other words it knows who locked it",
    "start": "838399",
    "end": "843519"
  },
  {
    "text": "so somebody else can't come and unlock it okay that that's that's the distinction um and he talked about",
    "start": "843519",
    "end": "849040"
  },
  {
    "text": "critical sections we aim to make critical sections governed by mutex rather short in other words this very simple piece of advice just for context",
    "start": "849040",
    "end": "855199"
  },
  {
    "text": "this is dijkstra writing in 1968. there is a small chance we might have learned a couple of things since then",
    "start": "855199",
    "end": "861199"
  },
  {
    "text": "but there are days when i wonder um now david budenhoff who is involved",
    "start": "861199",
    "end": "867040"
  },
  {
    "text": "heavily with posix threads which kind of really can't standardize the stuff in the 1990s this was all up for grabs",
    "start": "867040",
    "end": "873839"
  },
  {
    "text": "posix threads are very much native to linux in the way that that's expressed the api there the only other unix that was really",
    "start": "873839",
    "end": "879760"
  },
  {
    "text": "seriously doing threads in a way that people noticed was um sun's operating system they had a",
    "start": "879760",
    "end": "885120"
  },
  {
    "text": "slightly different model and naming i worked on i worked on a system that used posix threads for",
    "start": "885120",
    "end": "891120"
  },
  {
    "text": "real-time systems before that it was actually standardized it's very awkward trying to write things to a moving",
    "start": "891120",
    "end": "897040"
  },
  {
    "text": "standard um and that has not changed but one of the one of the great comments from david butenhoff was i've often",
    "start": "897040",
    "end": "903519"
  },
  {
    "text": "joked that instead of picking up dijkstra's q acronym of mutex we should have called the basic synchronization object the bottleneck",
    "start": "903519",
    "end": "910480"
  },
  {
    "text": "because that would change everybody's conversation yeah you know what oh what should we put here i think we should put a bottleneck",
    "start": "910480",
    "end": "915839"
  },
  {
    "text": "here it's one of those things where you say it out loud it's just like yeah i read something about immutable state",
    "start": "915839",
    "end": "921920"
  },
  {
    "text": "yeah let's go let's you know let's go let's go along and do that and leave those locks alone and for just an understanding of why it",
    "start": "921920",
    "end": "928639"
  },
  {
    "text": "is that we really need to understand why people have done an extraordinary job of really",
    "start": "928639",
    "end": "935120"
  },
  {
    "text": "screwing up the performance of large classes of systems um this is uh from the it here",
    "start": "935120",
    "end": "942320"
  },
  {
    "text": "and it's basically a logarithmic projection and and sergey uses the same metric that i've used for years the",
    "start": "942320",
    "end": "947759"
  },
  {
    "text": "width of a laptop actually helps us using a smaller laptop my laptop's about 30 centimeters across that is that is",
    "start": "947759",
    "end": "953759"
  },
  {
    "text": "one light nanosecond give you kind of a sensor calibration and i've always used that just to remind",
    "start": "953759",
    "end": "958959"
  },
  {
    "text": "people that speed of light is shockingly slow i mean it's fast from a human perspective but",
    "start": "958959",
    "end": "964000"
  },
  {
    "text": "one light nanosecond that's a cycle time of one gigahertz suddenly that doesn't sound so fast and that's only over a",
    "start": "964000",
    "end": "969839"
  },
  {
    "text": "space like this you start stretching that piece of string and everything really slows down but what is impressive when you start",
    "start": "969839",
    "end": "976399"
  },
  {
    "text": "looking at all the optimizations available to us and you hit threading",
    "start": "976399",
    "end": "982399"
  },
  {
    "text": "thread context switch direct costs that's really slow compared to that",
    "start": "982399",
    "end": "990639"
  },
  {
    "text": "indirect costs the slowest thing on the graph threading is a magnificent way even",
    "start": "990639",
    "end": "997120"
  },
  {
    "text": "without locks slowing things down so we must be really careful about anything that does that you have to really have a",
    "start": "997120",
    "end": "1003360"
  },
  {
    "text": "particular problem that looks like a particular shape the amount of performance benefit you can get by just saying you know what we're going to put",
    "start": "1003360",
    "end": "1008480"
  },
  {
    "text": "this in a single thread and really make this work it's impressive you know it's i've had that with teams it's just like",
    "start": "1008480",
    "end": "1014320"
  },
  {
    "text": "have you thought about doing it single threaded no no no no no we've got all these threads kevlar yeah i know and it's kind of like they're all treading",
    "start": "1014320",
    "end": "1020079"
  },
  {
    "text": "on each other's toes it's like trying to get everybody simultaneously through those doors at the back it's just like",
    "start": "1020079",
    "end": "1025520"
  },
  {
    "text": "yeah you've got a stampede problem here so there's this wonderful talk it's almost",
    "start": "1025520",
    "end": "1030640"
  },
  {
    "text": "coming up to 10 years i can't believe it brett victor's the future programming he gives this talk as if from the perspective of 1973. it is wildly",
    "start": "1030640",
    "end": "1037438"
  },
  {
    "text": "entertaining and deeply depressing okay and he's basically looking at the landscape as it was in 1973 as the",
    "start": "1037439",
    "end": "1044558"
  },
  {
    "text": "possible futures and he wasn't talking flying cars here although i still harbor a deep amount of disappointment about our lack of mars",
    "start": "1044559",
    "end": "1051360"
  },
  {
    "text": "bases and flying cars um but this is great he looks into the future",
    "start": "1051360",
    "end": "1058240"
  },
  {
    "text": "they said threads and locks they're kind of a dead idea right or dead end right i think if we're still using threads and",
    "start": "1058240",
    "end": "1063360"
  },
  {
    "text": "locks we should just like pack up and go home because we clearly failed as an engineering field it's just like one of the most perfect mic drop moments and",
    "start": "1063360",
    "end": "1069440"
  },
  {
    "text": "there's a deep truth to it so let's open up the variety we normally people presented with locks and threads and so",
    "start": "1069440",
    "end": "1075600"
  },
  {
    "text": "on there's a whole bunch of other stuff i mean there's stuff that goes off the top of the screen off the bottom of the screen there are a lot of different ways",
    "start": "1075600",
    "end": "1080880"
  },
  {
    "text": "of expressing ourselves so that this thing kind of does something either absolutely simultaneously with this or",
    "start": "1080880",
    "end": "1086480"
  },
  {
    "text": "kind of simultaneously or kind of asynchronously we need to be a little bit careful because certain words in people's minds have got",
    "start": "1086480",
    "end": "1093039"
  },
  {
    "text": "attached to a particular meaning so we see a lot of languages these days with the word async popping up",
    "start": "1093039",
    "end": "1099039"
  },
  {
    "text": "the problem is they all mean something different whereas if i see the word if in a particular programming language and then",
    "start": "1099039",
    "end": "1104400"
  },
  {
    "text": "in another there's a pretty good chance i know what i'm looking at if i see while yeah four little bit of variation on the",
    "start": "1104400",
    "end": "1111919"
  },
  {
    "text": "syntax but actually it's still the same idea async can mean almost anything",
    "start": "1111919",
    "end": "1117840"
  },
  {
    "text": "ultimately all concurrent programming is asynchronous but because you've changed the synchronous nature of time it kind of",
    "start": "1117840",
    "end": "1124000"
  },
  {
    "text": "stands to reason but different apis and languages come down on this is",
    "start": "1124000",
    "end": "1130080"
  },
  {
    "text": "our async so don't get too attached to a particular meaning and if you see it in one language be very careful about your",
    "start": "1130080",
    "end": "1135679"
  },
  {
    "text": "interpretations of it in another piece of code sometimes it might be similar but it might be a false friend um now",
    "start": "1135679",
    "end": "1142400"
  },
  {
    "text": "what i'm going to what i want to cover here is channels co routines parallel blocks and pipelines these all came from the procedural world",
    "start": "1142400",
    "end": "1148400"
  },
  {
    "text": "okay um and uh they all let me think",
    "start": "1148400",
    "end": "1154559"
  },
  {
    "text": "what do we got 1970s 1950s 1960s",
    "start": "1154559",
    "end": "1160880"
  },
  {
    "text": "1960s and we compare it to this these are not",
    "start": "1160880",
    "end": "1167200"
  },
  {
    "text": "the only these are great primitives these are great tools for making stuff out of but they don't you don't want them messing",
    "start": "1167200",
    "end": "1173039"
  },
  {
    "text": "messing around with your high level application but there is another area of threads that people tend to talk about these days i've noticed coming back green",
    "start": "1173039",
    "end": "1179520"
  },
  {
    "text": "threads um that's kind of been popularized by uh certain work consent spaces a green",
    "start": "1179520",
    "end": "1185679"
  },
  {
    "text": "thread is a kind of a post-hoc name it's named for the java a green team at sun who",
    "start": "1185679",
    "end": "1192400"
  },
  {
    "text": "implemented an approach to threading in java in the 90s and there's renewed interest in this but green threads are a",
    "start": "1192400",
    "end": "1198000"
  },
  {
    "text": "much much older idea um i was using green tents before they were called green threads so it gives us a strange",
    "start": "1198000",
    "end": "1204159"
  },
  {
    "text": "way of talking about them but they technically they are user space threads as opposed to kernel threads they are threads that run within the application",
    "start": "1204159",
    "end": "1211360"
  },
  {
    "text": "on the thread of the application rather than in the operating system which means that they can be relatively",
    "start": "1211360",
    "end": "1217840"
  },
  {
    "text": "cheap but there are some interesting issues that come about with that but they're not true operating system threads",
    "start": "1217840",
    "end": "1224000"
  },
  {
    "text": "and they will be um as it were sliced up on that threat",
    "start": "1224000",
    "end": "1229600"
  },
  {
    "text": "and there are some subtle bugs that you can get when they don't behave like what",
    "start": "1229600",
    "end": "1235200"
  },
  {
    "text": "many people now consider to be true threats in other words something actually runs uh or rather something",
    "start": "1235200",
    "end": "1240480"
  },
  {
    "text": "that's an operating system threads and then there's true threads which run uh one per call okay there's these varying",
    "start": "1240480",
    "end": "1246000"
  },
  {
    "text": "degrees and people like to put the word true or real or concurrent or not yeah the landscape is interesting but",
    "start": "1246000",
    "end": "1252240"
  },
  {
    "text": "this is how we kind of slice it up or fragment it so green threads have kind of come back in because people have realized you know",
    "start": "1252240",
    "end": "1257360"
  },
  {
    "text": "those context switching costs us can be they can dwarf um",
    "start": "1257360",
    "end": "1262559"
  },
  {
    "text": "the the overall benefits and that's quite important because why is it that people want to do the stuff",
    "start": "1262559",
    "end": "1269120"
  },
  {
    "text": "and sometimes it is a direct say it's directly saying i want to have the kind",
    "start": "1269120",
    "end": "1274159"
  },
  {
    "text": "of concurrency that allows me to exploit the concurrency in the hardware or the parallelism of the hardware i want that",
    "start": "1274159",
    "end": "1280640"
  },
  {
    "text": "kind of that's why i am doing this but actually for many problems and one of the original reasons that people got",
    "start": "1280640",
    "end": "1286400"
  },
  {
    "text": "interested in this stuff and why event driven programming all this kind of stuff is interesting it's that idea of saying",
    "start": "1286400",
    "end": "1292240"
  },
  {
    "text": "i would like to organize my code around the shape of the flow i want to decouple",
    "start": "1292240",
    "end": "1297600"
  },
  {
    "text": "things that in other words it's an act of decoupling now if you've ever had the experience of looking at certain",
    "start": "1297600",
    "end": "1303600"
  },
  {
    "text": "event code or async code or threaded code you're sitting there going like no this is a tightly coupled a pile of goo it is anything but",
    "start": "1303600",
    "end": "1310320"
  },
  {
    "text": "decoupled guess what welcome to programming there are things you can use for good and for bad it turns out that",
    "start": "1310320",
    "end": "1315840"
  },
  {
    "text": "the same construct that you can use for decoupling things can also be used to couple things tightly together but the idea is your the original goal was let's",
    "start": "1315840",
    "end": "1322480"
  },
  {
    "text": "decouple these two things which are relatively independent let's decouple them in time whereas we might think of",
    "start": "1322480",
    "end": "1328159"
  },
  {
    "text": "normal discussions of decoupling as being spatial decoupling the kind of stuff you draw on a diagram",
    "start": "1328159",
    "end": "1334799"
  },
  {
    "text": "space in that case is only a metaphor but there is that idea that what you're doing is decoupling things in time i've got these three things and they're",
    "start": "1334799",
    "end": "1340320"
  },
  {
    "text": "relatively independent but i don't want to have to make a choice and really i shouldn't be having to make a choice about when and what they happen and i",
    "start": "1340320",
    "end": "1345919"
  },
  {
    "text": "don't want to write the infrastructure that does that that's why people want to do that so there are these these two things are not",
    "start": "1345919",
    "end": "1352320"
  },
  {
    "text": "you know they're not contradictory they sometimes overlap but the desire for performance i want to make the most of",
    "start": "1352320",
    "end": "1357919"
  },
  {
    "text": "the concurrency available to me and i want to decouple the expression of",
    "start": "1357919",
    "end": "1363679"
  },
  {
    "text": "my solution those two are actually they pull you in slightly different directions",
    "start": "1363679",
    "end": "1369120"
  },
  {
    "text": "and which is why green threads become interesting now green threads are related to a thing called fiber a fiber",
    "start": "1369120",
    "end": "1374720"
  },
  {
    "text": "is kind of a construct relate it's a cooperative multitasking",
    "start": "1374720",
    "end": "1379919"
  },
  {
    "text": "everything i've kind of implied but i haven't said explicitly so when we use the word thread we normally mean that something is preemptive",
    "start": "1379919",
    "end": "1386240"
  },
  {
    "text": "in other words it's not down to the subject matter or the task at hand as to when things get executed",
    "start": "1386240",
    "end": "1392480"
  },
  {
    "text": "um we can switch at any point and that may mean that that is actually running on a you know you have one single core",
    "start": "1392480",
    "end": "1399919"
  },
  {
    "text": "and the operating system or the runtime library is sitting there going like i think i'll interrupt now and switch to another",
    "start": "1399919",
    "end": "1406320"
  },
  {
    "text": "thread or actually we've got two separate cores two pieces of hardware that are running",
    "start": "1406320",
    "end": "1411440"
  },
  {
    "text": "this simultaneously and i was preemptive we're not saying that there is it's not bound to the",
    "start": "1411440",
    "end": "1416640"
  },
  {
    "text": "nature of the task and that also applies to green threads",
    "start": "1416640",
    "end": "1422399"
  },
  {
    "text": "but fibers tend to not work like that fibers tend to be often they are and the distinction",
    "start": "1422880",
    "end": "1430080"
  },
  {
    "text": "because they are often confused with co-routines um and nobody's ever formally defined them but i'm going to use the sinkable human",
    "start": "1430080",
    "end": "1436480"
  },
  {
    "text": "knowledge wikipedia to help me the distinction if there is any is that co routines are a language level construct a form of control flow this is kind of",
    "start": "1436480",
    "end": "1443600"
  },
  {
    "text": "important come back to that one in a moment while fiber is a system level construct that doesn't mean their operating system but the idea is that",
    "start": "1443600",
    "end": "1450159"
  },
  {
    "text": "i can see co-routines in my code i i i may have",
    "start": "1450159",
    "end": "1455200"
  },
  {
    "text": "keywords and things like that you know i will say here is this whereas a fiber is something i may",
    "start": "1455200",
    "end": "1461200"
  },
  {
    "text": "launch but then something else will get executed on completion or at a particular point an",
    "start": "1461200",
    "end": "1467039"
  },
  {
    "text": "io point for example in other words things run to a particular point and then there's a handoff there's no preemption there's no there's nothing",
    "start": "1467039",
    "end": "1473440"
  },
  {
    "text": "slicing time up in the background um but the idea that co-routine is under the programmers direct control",
    "start": "1473440",
    "end": "1480240"
  },
  {
    "text": "and is therefore a control flow construct is really important because most control flow constructs everybody's quite happy with the idea of you know",
    "start": "1480240",
    "end": "1486000"
  },
  {
    "text": "i've got ifs i've got wilds and then i've got various flavors of these things that's what people get tall but co-routines are a control flow construct",
    "start": "1486000",
    "end": "1493039"
  },
  {
    "text": "now this is interesting because they kind of become popular again",
    "start": "1493039",
    "end": "1498559"
  },
  {
    "text": "so let's um you know co routines are computer pro so just on a point on the word",
    "start": "1498559",
    "end": "1503679"
  },
  {
    "text": "there's very relatively few languages these days that use the word subroutine so if you're a vb programmer you're",
    "start": "1503679",
    "end": "1509360"
  },
  {
    "text": "familiar with this um but you know the only people who use the term subroutine are vb programmers",
    "start": "1509360",
    "end": "1514960"
  },
  {
    "text": "fortran programmers and star trek script writers um if you listen carefully you will always",
    "start": "1514960",
    "end": "1520240"
  },
  {
    "text": "notice they referring to subroutines so apparently in about the 23rd century all this comes back into fashion okay",
    "start": "1520240",
    "end": "1526480"
  },
  {
    "text": "the point there is pause for a moment because we often don't think about where our words come from pause and go",
    "start": "1526480",
    "end": "1532400"
  },
  {
    "text": "sub subordinate co ah right it's a it's a symmetric version it's",
    "start": "1532400",
    "end": "1537760"
  },
  {
    "text": "this idea um jet they are a generalization in other words co-routines",
    "start": "1537760",
    "end": "1543039"
  },
  {
    "text": "are not a kind of a new subordinate idea because sabo is already taken co-routines are the root idea and",
    "start": "1543039",
    "end": "1549760"
  },
  {
    "text": "subordin and the sub-routines are kind of like a special case of them when you think about it like that um non-preemptive multitasking by",
    "start": "1549760",
    "end": "1556159"
  },
  {
    "text": "allowing execution to be suspended and resumed in other words under the programmers control it's not at magic",
    "start": "1556159",
    "end": "1561200"
  },
  {
    "text": "points it's not under magic preemption or anything like that and",
    "start": "1561200",
    "end": "1566320"
  },
  {
    "text": "historically you can donald knuth in the first edition of the",
    "start": "1566320",
    "end": "1571919"
  },
  {
    "text": "art of computer programming volume 1 written in the early 60s",
    "start": "1571919",
    "end": "1577120"
  },
  {
    "text": "where he talks about he shows you how to implement co routines subroutines are special cases of more general",
    "start": "1577120",
    "end": "1582400"
  },
  {
    "text": "programming components called charities in contrast the unsymmetric relationship or asymmetric between a main routine and",
    "start": "1582400",
    "end": "1588080"
  },
  {
    "text": "subroutine there is a complete symmetry between co-routines which call on each other now canoes",
    "start": "1588080",
    "end": "1593919"
  },
  {
    "text": "was not the inventor of co routines now that that claim",
    "start": "1593919",
    "end": "1598960"
  },
  {
    "text": "goes to a particular gentleman called melvin conway anybody come across conway's law",
    "start": "1598960",
    "end": "1606400"
  },
  {
    "text": "okay yes same conway conway's law was 1968 and it's it's an observation about",
    "start": "1606400",
    "end": "1612640"
  },
  {
    "text": "or the relationship between an organizational um an organization and the things that it designs you know it",
    "start": "1612640",
    "end": "1618640"
  },
  {
    "text": "establishes a kind of homeomorphism between it's just like yeah the shape of your team or the communication party",
    "start": "1618640",
    "end": "1623679"
  },
  {
    "text": "team will influence your architecture and people are often surprised wow comey's really old",
    "start": "1623679",
    "end": "1629360"
  },
  {
    "text": "not as old as his previous one of his major contributions 1958 okay he invented the co-routine this is a paper",
    "start": "1629360",
    "end": "1636240"
  },
  {
    "text": "of his talking about her construction of a a cobalt compiler",
    "start": "1636240",
    "end": "1641520"
  },
  {
    "text": "in the early 60s and he makes the observation co-routines are subroutines all at the same level each acting as if",
    "start": "1641520",
    "end": "1646640"
  },
  {
    "text": "it were the master programming when in fact there is no master program it's kind of like a mystery story and it's just that the co-routine notion can",
    "start": "1646640",
    "end": "1653520"
  },
  {
    "text": "greatly simplify the conception of a program when its modules do not communicate with each other synchronously how much code has been",
    "start": "1653520",
    "end": "1660399"
  },
  {
    "text": "spent in the intervening decades where people end up going oh i wonder how to do this anybody got a switch statement",
    "start": "1660399",
    "end": "1666960"
  },
  {
    "text": "and a flag handy or let's write a state machine all this kind of no need it's already you can do this",
    "start": "1666960",
    "end": "1673679"
  },
  {
    "text": "it's an idea that's been around for a very long time we find it and we found it as kind of standard feature in some languages bliss",
    "start": "1673679",
    "end": "1680000"
  },
  {
    "text": "was a systems programming language in the early 70s came out of bell labs but you might be",
    "start": "1680000",
    "end": "1685360"
  },
  {
    "text": "more familiar with another systems programming language that came out of bell labs that's the great thing about laboratories they kind of invent all",
    "start": "1685360",
    "end": "1691279"
  },
  {
    "text": "kinds of things and then one of them either wins or the other one loses so bliss ultimately lost out to c",
    "start": "1691279",
    "end": "1697760"
  },
  {
    "text": "um but there are some really elegant design ideas in bliss and bliss had the co-routine concept and importantly it",
    "start": "1697760",
    "end": "1703360"
  },
  {
    "text": "didn't make a distinction between it was a very primitive kind of co-routine concept",
    "start": "1703360",
    "end": "1708720"
  },
  {
    "text": "it's a systems language so therefore you expect it to be relatively level the body of any function any function you don't have to have special keywording",
    "start": "1708720",
    "end": "1714799"
  },
  {
    "text": "here may be activated as a co-routine and or asynchronous process",
    "start": "1714799",
    "end": "1720159"
  },
  {
    "text": "so let me think where are we half a century on from that this sounds pretty cool i want my languages to do this now",
    "start": "1720159",
    "end": "1726240"
  },
  {
    "text": "it is assistance programming language so let's look at this let's look at the syntax and i will tell you when i have not",
    "start": "1726240",
    "end": "1731919"
  },
  {
    "text": "implemented this i will tell you code that i have swiped i have not found a bliss simulator so",
    "start": "1731919",
    "end": "1737440"
  },
  {
    "text": "this is stuff i've just taken straight from the papers um you have a process name process",
    "start": "1737440",
    "end": "1743120"
  },
  {
    "text": "identifier pit your function call but now you put the word create in front of it now it's a",
    "start": "1743120",
    "end": "1748320"
  },
  {
    "text": "sister's programming language and you know yeah space is scarce so you actually have to go and say",
    "start": "1748320",
    "end": "1753600"
  },
  {
    "text": "by the way i'd like you to execute this co-routine over here so if you've got memory allocation to be done you need to have done it that's not part",
    "start": "1753600",
    "end": "1759919"
  },
  {
    "text": "of the co-routine construct that you don't get that for free um it kind of gives you it basically says you give me",
    "start": "1759919",
    "end": "1765840"
  },
  {
    "text": "the space and i'll do the rest of the work oh and by the way please make sure you tell me how big that is because i really want to avoid buffer overruns huh",
    "start": "1765840",
    "end": "1772880"
  },
  {
    "text": "interesting that c did not do that um and then really cool idea you have a continuation when you are done with this",
    "start": "1772880",
    "end": "1778960"
  },
  {
    "text": "you can now execute a separate instruction or operation including another function call it's just like hmm this feels really",
    "start": "1778960",
    "end": "1785600"
  },
  {
    "text": "kind of fresh there's some really good ideas here i'm happy to forgo the please work out where you want the stack and",
    "start": "1785600",
    "end": "1791760"
  },
  {
    "text": "tell me how big it is i'm happy to give that one up the rest of this sounds pretty good and you have a very simple exchange a very simple model if you",
    "start": "1791760",
    "end": "1797840"
  },
  {
    "text": "wanted to switch context you did it in a very as i said you can build more sophisticated mechanisms out this is a",
    "start": "1797840",
    "end": "1802960"
  },
  {
    "text": "systems primitive this is the value on resume you get when you say i want to swap between this code",
    "start": "1802960",
    "end": "1809200"
  },
  {
    "text": "with the co routine i currently am and another one but when you return to this point of control you get a value back",
    "start": "1809200",
    "end": "1816720"
  },
  {
    "text": "and you can to say i want to resume that one please tell it this is the value to pass so it's equivalent extraj",
    "start": "1816720",
    "end": "1823520"
  },
  {
    "text": "honestly please if you are a language designer please have these conversations out in the room so that people use the",
    "start": "1823520",
    "end": "1829039"
  },
  {
    "text": "keywords and you avoid things like xj because it doesn't work i'm sure it looks great and logical on paper but",
    "start": "1829039",
    "end": "1835520"
  },
  {
    "text": "when you use the words people hear them they go yeah you know that's a really bad keyword just just a suggestion",
    "start": "1835520",
    "end": "1841840"
  },
  {
    "text": "um so we've got that it's a really interesting idea you can build much more sophisticated systems out of this but",
    "start": "1841840",
    "end": "1847840"
  },
  {
    "text": "this is appropriate for a systems language um and so why would we want these things i",
    "start": "1847840",
    "end": "1853360"
  },
  {
    "text": "mean they are one trick pony you know we're just using them for a bit of you know asynchronous web server writing",
    "start": "1853360",
    "end": "1859200"
  },
  {
    "text": "it's just like well no the web didn't exist back when people were inventing this stuff co-routines are well suited for implementing familiar program",
    "start": "1859200",
    "end": "1865360"
  },
  {
    "text": "components such as cooperative tasks exceptions event loops iterators infinite lists and pipes holy crap",
    "start": "1865360",
    "end": "1872559"
  },
  {
    "text": "that's like that's a lot there's a lot here and that point about iterators is really",
    "start": "1872559",
    "end": "1878399"
  },
  {
    "text": "interesting um so this is a paper from 1974",
    "start": "1878399",
    "end": "1884000"
  },
  {
    "text": "uh by barbara liskoff and her team you may have come across the list of",
    "start": "1884000",
    "end": "1889039"
  },
  {
    "text": "substitution principle which was named in 1991 by jim caplin based on a 1987",
    "start": "1889039",
    "end": "1895200"
  },
  {
    "text": "talk by barbara liskoff yes it's the same barbara liskoff who won the cheering award in 2008 for her work on",
    "start": "1895200",
    "end": "1902640"
  },
  {
    "text": "programming language design as well as distributed systems and this is one of the key contributions this language",
    "start": "1902640",
    "end": "1908240"
  },
  {
    "text": "research language um foreshadowed all kinds of stuff you know",
    "start": "1908240",
    "end": "1913360"
  },
  {
    "text": "it's not something anybody used in production but there's loads of stuff here basically abstract data types all of that kind of language",
    "start": "1913360",
    "end": "1920000"
  },
  {
    "text": "and iterators i mean the list does go on there's a whole load of exception handling stuff as well but the iterators",
    "start": "1920000",
    "end": "1925919"
  },
  {
    "text": "um and let's go off and team noted iterators are a form of co-routine",
    "start": "1925919",
    "end": "1931840"
  },
  {
    "text": "huh yes however they use sufficiently constrained that they are implemented using just the program stack",
    "start": "1931840",
    "end": "1938320"
  },
  {
    "text": "for anybody who's used c sharp this is exactly the same thing in fact c sharp pretty much lifted this idea and",
    "start": "1938320",
    "end": "1945760"
  },
  {
    "text": "this idea of implementation um uh front clue because i remember looking at the thing in c sharp with the yield keyword",
    "start": "1945760",
    "end": "1952240"
  },
  {
    "text": "and i said i think they're gonna like that looks a lot like the clue one yeah you know because i'm a programming language nerd",
    "start": "1952240",
    "end": "1957840"
  },
  {
    "text": "and i happen to have read this paper years ago it was like this looks really familiar and it also looks like some of the other things here in the ruby space",
    "start": "1957840",
    "end": "1964080"
  },
  {
    "text": "and all this but what was interesting was when i saw it in c sharp i thought oh oh i wonder if they've done it i",
    "start": "1964080",
    "end": "1970640"
  },
  {
    "text": "wonder they've done it i wonder if they've gone and given back co-routines to the developers no they hadn't they",
    "start": "1970640",
    "end": "1976480"
  },
  {
    "text": "said oh you know this is a special case we can get rid of the actual coaches oh they're so close you could almost taste it",
    "start": "1976480",
    "end": "1982080"
  },
  {
    "text": "but you know we can we can live with that so here's a bit of clue let me translate this for you",
    "start": "1982080",
    "end": "1988320"
  },
  {
    "text": "string channels is the name of the iterator type uh ita tells us hey guess what this is an iterator it takes an",
    "start": "1988320",
    "end": "1993440"
  },
  {
    "text": "initial argument it yields i love the keywords here it yields a character um we've got you know we're going to start",
    "start": "1993440",
    "end": "1999600"
  },
  {
    "text": "off with an index it's a one counting language modules are indicated",
    "start": "1999600",
    "end": "2005279"
  },
  {
    "text": "um uh using dollars rather than dot notation um",
    "start": "2005279",
    "end": "2010320"
  },
  {
    "text": "let's see if that one works there we go there we go dollar sign there we go so that's instead of dot which to the modern eye is kind of like oh that's",
    "start": "2010320",
    "end": "2016000"
  },
  {
    "text": "kind of intrusive so but it's it's all there and then we have",
    "start": "2016000",
    "end": "2021360"
  },
  {
    "text": "this really nice little bit where we have the actual bit where we yield and",
    "start": "2021360",
    "end": "2026480"
  },
  {
    "text": "we return to the caller and then we re-enter this and it keeps our state",
    "start": "2026480",
    "end": "2031919"
  },
  {
    "text": "none of these crazy state machines or big switch statements or anything like that and no need for threads for a lot",
    "start": "2031919",
    "end": "2036960"
  },
  {
    "text": "of problems you have this idea of here are two things in cooperation you know i'm gonna i'm gonna give you a value",
    "start": "2036960",
    "end": "2042880"
  },
  {
    "text": "when you want more you just let me know okay and i'll just go around the loop and all the state is managed for you elegant simple",
    "start": "2042880",
    "end": "2049118"
  },
  {
    "text": "and very 19 very early 70s okay so the 1970s was not just about",
    "start": "2049119",
    "end": "2054320"
  },
  {
    "text": "disco and you know great rock music it was also about iterators and some",
    "start": "2054320",
    "end": "2059760"
  },
  {
    "text": "good language design now um here is how you use it you know all those people it's just like oh hey this is really",
    "start": "2059760",
    "end": "2066000"
  },
  {
    "text": "cool what's really cool about this what's really cool is that's a modern for loop",
    "start": "2066000",
    "end": "2071679"
  },
  {
    "text": "how long did it take languages to get beyond the old for loop it's a for loop you're just counting yeah but maybe i've",
    "start": "2071679",
    "end": "2077200"
  },
  {
    "text": "got ways that i count you know like over collections and things like that no no we're only going to allow you to take",
    "start": "2077200",
    "end": "2083200"
  },
  {
    "text": "a number it's just like yeah so this is a this idea is caught on it's kind of nice",
    "start": "2083200",
    "end": "2089599"
  },
  {
    "text": "now if i translate this to python i can kind of do very much the same thing and we see the same kind of",
    "start": "2089599",
    "end": "2095118"
  },
  {
    "text": "keyword there it's you know it's pretty much identical there's the yield keyword and we see this popping up in a number",
    "start": "2095119",
    "end": "2100880"
  },
  {
    "text": "of languages but that idea has been around for as i say a remarkably long time and again there's that for loop",
    "start": "2100880",
    "end": "2107359"
  },
  {
    "text": "and this is kind of 1990s so in other languages we see this idea",
    "start": "2107359",
    "end": "2114320"
  },
  {
    "text": "dominated very heavily and was actually part of the reason for their creation um design and evolution of c plus plus",
    "start": "2114320",
    "end": "2120320"
  },
  {
    "text": "by beyonce stroudstrap he published the book in 1995 which is actually now seen it's actually",
    "start": "2120320",
    "end": "2126640"
  },
  {
    "text": "it is further from now and you know it's it's almost we're getting to the point where",
    "start": "2126640",
    "end": "2132880"
  },
  {
    "text": "the time between now and that no actually it is and his first c plus compiler um you know it's actually this",
    "start": "2132880",
    "end": "2138880"
  },
  {
    "text": "is written closer to the first c plus plus compiler than to the present day um but at that point he described",
    "start": "2138880",
    "end": "2146000"
  },
  {
    "text": "the motivation he said the first real code to be written in c with classes before i had the name pl c plus was the task library",
    "start": "2146000",
    "end": "2152160"
  },
  {
    "text": "that's why he actually wrote the language to implement a simulation library based on",
    "start": "2152160",
    "end": "2158720"
  },
  {
    "text": "co-routines but decided not to put co routines in the language decided to have them as a library construct",
    "start": "2158720",
    "end": "2165440"
  },
  {
    "text": "and somewhere in history that library construct got lost it's it's you know it's lost somewhere in the 1980s if",
    "start": "2165440",
    "end": "2171280"
  },
  {
    "text": "somebody can kind of find it you know between the indiana jones movies um and uh hair metal you know please return it",
    "start": "2171280",
    "end": "2177520"
  },
  {
    "text": "to the present day because it's it was a really interesting idea um and it was all based around a simple library task.h",
    "start": "2177520",
    "end": "2184320"
  },
  {
    "text": "but that one got neglected now there's a point here about what actually happened why have we ended up with the historical",
    "start": "2184320",
    "end": "2189520"
  },
  {
    "text": "narrative that we uh that we've got because preemption started becoming",
    "start": "2189520",
    "end": "2194800"
  },
  {
    "text": "normal for operating systems everybody used to have simple single threaded operating systems with cooperative multitasking models doesn't matter if",
    "start": "2194800",
    "end": "2201200"
  },
  {
    "text": "you're a mac or windows or you know if you were dos then actually you really just did have nothing else you know dos",
    "start": "2201200",
    "end": "2208480"
  },
  {
    "text": "these days now means denial of service and you know that's been true for decades but there is this idea that the only",
    "start": "2208480",
    "end": "2215680"
  },
  {
    "text": "people that actually had access to true preemption were on 32-bit workstations",
    "start": "2215680",
    "end": "2221440"
  },
  {
    "text": "and that was not most people so therefore this this was the standby but this idea co-routines were just going",
    "start": "2221440",
    "end": "2227280"
  },
  {
    "text": "out as i came in it's just i'll see you as they went walked out the building all these kind of residual design ideas",
    "start": "2227280",
    "end": "2234560"
  },
  {
    "text": "and bits and pieces of libraries that are no longer supported that language similar",
    "start": "2234560",
    "end": "2240960"
  },
  {
    "text": "in its first form these days we know about similar 67 as being the kind of the the the",
    "start": "2240960",
    "end": "2246400"
  },
  {
    "text": "progenitor of all object orientation it's an extension of algol but before it",
    "start": "2246400",
    "end": "2251520"
  },
  {
    "text": "got classes its most important idea was hmm let's have co routines that was the",
    "start": "2251520",
    "end": "2257599"
  },
  {
    "text": "idea it's like if you want to create a simulation language how can you have how can you model a real world or do",
    "start": "2257599",
    "end": "2262720"
  },
  {
    "text": "anything with how can you do anything event based that was their thinking in the 1960s how can you do anything event",
    "start": "2262720",
    "end": "2268240"
  },
  {
    "text": "based and make keep the code simple unless you have the idea of co-routines um",
    "start": "2268240",
    "end": "2274400"
  },
  {
    "text": "and so that was the simple idea um similar one 1965 no objects but it had",
    "start": "2274400",
    "end": "2279839"
  },
  {
    "text": "co-routines to enable this idea which were governed by an operating rule which was basically the life cycle of the",
    "start": "2279839",
    "end": "2285680"
  },
  {
    "text": "thing and they were co-routines it's not just a kind of curvature they work our routines they look different to a lot of",
    "start": "2285680",
    "end": "2291119"
  },
  {
    "text": "modern co-routines but that whole idea of objects have a life cycle the original vision of object orientation we",
    "start": "2291119",
    "end": "2297760"
  },
  {
    "text": "might say i was like yeah you've got encapsulation you got in polymorphism you've got inheritance and you've got concurrency but people found it really",
    "start": "2297760",
    "end": "2303839"
  },
  {
    "text": "difficult to count to four so we kind of dropped one of those but it was integral to the object paradigm",
    "start": "2303839",
    "end": "2310079"
  },
  {
    "text": "and a lot of the stuff also kicked in when we started talking about structured programs so co-routines are a surprisingly old idea they are coming",
    "start": "2310079",
    "end": "2315920"
  },
  {
    "text": "back and they are about control flow which is interesting because a lot of the",
    "start": "2315920",
    "end": "2321040"
  },
  {
    "text": "languages that people are noting that adopting co-routines they're going like yeah you know what this is all very um",
    "start": "2321040",
    "end": "2327599"
  },
  {
    "text": "this is all very uh new to us and what is surprising for them is not",
    "start": "2327599",
    "end": "2333920"
  },
  {
    "text": "only how old this stuff is but there's a bunch of other ideas here about how this stuff is structured and people were talking about",
    "start": "2333920",
    "end": "2340640"
  },
  {
    "text": "control flow that is a way of organizing your procedural programs so there's an interesting thing sometimes oh yeah i'm",
    "start": "2340640",
    "end": "2345920"
  },
  {
    "text": "using this language in that language and it's really functional no most of what's been added to programming languages in the last half decade has",
    "start": "2345920",
    "end": "2353119"
  },
  {
    "text": "been borrowed from you know procedural hand-me-downs with its control flow functional programming",
    "start": "2353119",
    "end": "2358240"
  },
  {
    "text": "is not interested in control flow there is no flow there is no time yeah it feels like a statement from the",
    "start": "2358240",
    "end": "2363760"
  },
  {
    "text": "matrix there are also no spoons in any of these languages but there is this observation it's all",
    "start": "2363760",
    "end": "2369040"
  },
  {
    "text": "built around procedures and the the object paradigm grew out of procedures a procedure that can give rise to your",
    "start": "2369040",
    "end": "2376560"
  },
  {
    "text": "procedures your functions they've got state they've got variables and you can nest functions inside them",
    "start": "2376560",
    "end": "2382400"
  },
  {
    "text": "what if you could hand off that state and it lived longer and it didn't just end when you hit the closing curly",
    "start": "2382400",
    "end": "2388160"
  },
  {
    "text": "bracket a thing which has behavior and state in it wow that's a really interesting idea",
    "start": "2388160",
    "end": "2393359"
  },
  {
    "text": "somebody should do something about that and they did so in other words object orientation came from this",
    "start": "2393359",
    "end": "2399280"
  },
  {
    "text": "so let's have a look at a co-routine implementation of sleep sort",
    "start": "2399280",
    "end": "2405200"
  },
  {
    "text": "this is in python we are using the async keyword and what we're going to do is we're going to launch a bunch of things we're",
    "start": "2405200",
    "end": "2411119"
  },
  {
    "text": "not actually going to launch any threads but what we're going to do is we'll just make things available with respect to time and all the scheduling is done within",
    "start": "2411119",
    "end": "2417920"
  },
  {
    "text": "python there are there is no threading here um and so",
    "start": "2417920",
    "end": "2423520"
  },
  {
    "text": "how does sleep sort work and this is one of those this is one of those um algorithms you",
    "start": "2423520",
    "end": "2429040"
  },
  {
    "text": "you never get taught at the university it was only event in 2011 um by somebody on 4chan",
    "start": "2429040",
    "end": "2434640"
  },
  {
    "text": "it may be the only good thing to ever come out of 4chan um you see how it works it lets everything",
    "start": "2434640",
    "end": "2440640"
  },
  {
    "text": "delay for a particular amount of time wait for it wait for it there you go nine seconds um you know",
    "start": "2440640",
    "end": "2446319"
  },
  {
    "text": "very elegantly simply implemented no excessive use of resources but please please do",
    "start": "2446319",
    "end": "2451520"
  },
  {
    "text": "not go into work tomorrow and say we're doing sleepsaw this is how we should present user data",
    "start": "2451520",
    "end": "2456960"
  },
  {
    "text": "but there is a point here it's a very simple implementation there's no race conditions or anything like that it's just time-based and very simple",
    "start": "2456960",
    "end": "2463040"
  },
  {
    "text": "expression of time how else can we kind of explore co routines well let's talk about fibonacci",
    "start": "2463040",
    "end": "2468319"
  },
  {
    "text": "numbers um because i mean somebody needs to choose one of these silly examples but actually it's quite a good example",
    "start": "2468319",
    "end": "2474800"
  },
  {
    "text": "um of course there's the whole thing with fibonacci that you know there's a whole load of jokes about it i'm gonna i'll go to this use fibonacci",
    "start": "2474800",
    "end": "2481200"
  },
  {
    "text": "convention it'll be as big as the last two put together um i think it's funny",
    "start": "2481200",
    "end": "2487520"
  },
  {
    "text": "but maybe i'm just influenced by this joke what did you think of my fibonacci joke it was as bad as your previous two fibonacci jokes combined um you know but",
    "start": "2487520",
    "end": "2494560"
  },
  {
    "text": "we got that there so i can write this so let's i'm going to write this in c plus plus given that we just talked about c plus plus that's right this is c plus",
    "start": "2494560",
    "end": "2501040"
  },
  {
    "text": "and so i've got a standard recursive one now the point about this is that it yes it works but it's hideously inefficient",
    "start": "2501040",
    "end": "2507040"
  },
  {
    "text": "because you go and recalculate all the numbers but it is elegant and simple and all the rest of it so maybe we could cache our state rather than recalculate",
    "start": "2507040",
    "end": "2513440"
  },
  {
    "text": "it maybe we can cache our state and in c plus plus i can create objects that look like functions so maybe i can do it like",
    "start": "2513440",
    "end": "2519599"
  },
  {
    "text": "this and i'm expecting you to kind of hold on to this but the idea is now i've introduced state i'm going to hold on to my previous values so when you ask me",
    "start": "2519599",
    "end": "2526160"
  },
  {
    "text": "again it's just like i've got this one and when i say it is the sum of the previous one and the one before that",
    "start": "2526160",
    "end": "2531920"
  },
  {
    "text": "i've already got these in stock i'd have to recalculate them brilliant fantastic",
    "start": "2531920",
    "end": "2537359"
  },
  {
    "text": "or as or c plus plus 20. we can use co routines are they like bjarna's co-routines",
    "start": "2537359",
    "end": "2543040"
  },
  {
    "text": "no they're not but here we have it generator returns into fibonacci and then we get a magic",
    "start": "2543040",
    "end": "2548640"
  },
  {
    "text": "yield keyword but obviously because it's c plus plus you can't have you can't have everything simple so we",
    "start": "2548640",
    "end": "2553680"
  },
  {
    "text": "put co in front of it and so yeah this is looking really good it says there's a logical flow here it's just like yield",
    "start": "2553680",
    "end": "2559920"
  },
  {
    "text": "the first two values and then go around the loop and you don't need to have any remembered other object state because",
    "start": "2559920",
    "end": "2565920"
  },
  {
    "text": "it's just your local variables that's your state and nobody else can see them you just",
    "start": "2565920",
    "end": "2571200"
  },
  {
    "text": "reveal it as you go and you can print out this stuff and you can use it in a for loop",
    "start": "2571200",
    "end": "2577440"
  },
  {
    "text": "and you end up with the first 20 fibonacci numbers that was fantastic this is brilliant if i write it in python",
    "start": "2577440",
    "end": "2582640"
  },
  {
    "text": "it looks pretty much the same okay you know modulo some idiom",
    "start": "2582640",
    "end": "2588000"
  },
  {
    "text": "yeah that's kind of nice however there is a dark secret here",
    "start": "2588000",
    "end": "2594318"
  },
  {
    "text": "if you look very carefully you go so kevin you can tell us what generator angle brackets int is",
    "start": "2595359",
    "end": "2601359"
  },
  {
    "text": "yeah yeah you see c plus didn't quite finish the job people might say that as a general",
    "start": "2601359",
    "end": "2607359"
  },
  {
    "text": "statement i couldn't possibly comment um so",
    "start": "2607359",
    "end": "2613040"
  },
  {
    "text": "this is how c plus plus approaches parentheses i believe that my swedish is correct i have checked it modulo the",
    "start": "2613040",
    "end": "2620319"
  },
  {
    "text": "ikea uh uh extras um yeah it's like c plus plus said yeah",
    "start": "2620319",
    "end": "2626079"
  },
  {
    "text": "we've got co routines and we think they're really powerful but we're not going to give you everything you want something you've got to build it",
    "start": "2626079",
    "end": "2631760"
  },
  {
    "text": "yourself absolutely got to build it yourself you've got to here's generator",
    "start": "2631760",
    "end": "2637599"
  },
  {
    "text": "it's a lot of skeleton code and then there's this other thing which you have to then define which is but you've got to do it yourself",
    "start": "2637599",
    "end": "2643920"
  },
  {
    "text": "every single time i've ever tried to do this i've had to spend a lot of caffeine",
    "start": "2643920",
    "end": "2649200"
  },
  {
    "text": "and a lot of blog posts to try and get the right nuance and it's a case of like yeah it would be nice that they finished it it's kind of",
    "start": "2649200",
    "end": "2655359"
  },
  {
    "text": "like it's one of those kind of like yeah we could be bothering but here you want to carry routines you got them it's just like what's",
    "start": "2655359",
    "end": "2660839"
  },
  {
    "text": "this you know really having seen what co-routines are in other languages not quite what i had",
    "start": "2660839",
    "end": "2666880"
  },
  {
    "text": "in mind okay let's go back to structured programming structure programming was originally about sequential programming",
    "start": "2666880",
    "end": "2672960"
  },
  {
    "text": "but also in the late 60s and early 70s there was exploration but we didn't have the hardware at the time but there's no",
    "start": "2672960",
    "end": "2678480"
  },
  {
    "text": "shortage of ideas maybe it was the drugs who knows there was there were plenty of ideas around that okay",
    "start": "2678480",
    "end": "2685040"
  },
  {
    "text": "and it's kind of like there was this kind of exploration of all these ideas so there was a",
    "start": "2685040",
    "end": "2690400"
  },
  {
    "text": "structured concurrency um and dijkstra talked about it in that",
    "start": "2690400",
    "end": "2697200"
  },
  {
    "text": "1968 paper i just referred to he said when a sequence of statements is surrounded by the special statement",
    "start": "2697200",
    "end": "2702640"
  },
  {
    "text": "pairing par begin and par end this is to be interpreted as parallel execution of the constituent statements",
    "start": "2702640",
    "end": "2708400"
  },
  {
    "text": "just as you know certain languages use begin end or open curly closed curly the idea is well let's have a special",
    "start": "2708400",
    "end": "2714319"
  },
  {
    "text": "version and instead of executing it from top to bottom we execute it from left to right so to speak so these are all done",
    "start": "2714319",
    "end": "2720079"
  },
  {
    "text": "you know at the same time for some definition of at the same time they are done concurrently this idea was in there",
    "start": "2720079",
    "end": "2725760"
  },
  {
    "text": "it's been around for a long time and in fact uh it made it into algol 68 and the clue to the language is in the number um",
    "start": "2725760",
    "end": "2733200"
  },
  {
    "text": "however that said to be fair and honest uh uh you know uh the final report was",
    "start": "2733200",
    "end": "2739280"
  },
  {
    "text": "1973 because guess what it was kind of delivered late um but yeah here's the 1968 language but it's kind of half a",
    "start": "2739280",
    "end": "2745680"
  },
  {
    "text": "decade late i hope nobody minds this however is one of the most influential languages you've either",
    "start": "2745680",
    "end": "2751200"
  },
  {
    "text": "never heard of or never used um if you've all if you wonder where any of these you've seen these keywords in",
    "start": "2751200",
    "end": "2756800"
  },
  {
    "text": "various languages this is where they came from nobody was using these words in any of the other languages at the time um they had a",
    "start": "2756800",
    "end": "2763119"
  },
  {
    "text": "position for abbreviation and uh and certain things so they a lot of ideas this was hugely influential language um",
    "start": "2763119",
    "end": "2769280"
  },
  {
    "text": "so the initial report had this influence but it also had this idea so i can write",
    "start": "2769280",
    "end": "2775200"
  },
  {
    "text": "this begin if any vdvc that will execute top to bottom an alternative notation because keyboards didn't have curly",
    "start": "2775200",
    "end": "2780880"
  },
  {
    "text": "brackets was to use parentheses that is a standard block okay executes from top to bottom",
    "start": "2780880",
    "end": "2788319"
  },
  {
    "text": "unless i put the word power in front of her in which case they all execute concurrently for some definition of",
    "start": "2788319",
    "end": "2794560"
  },
  {
    "text": "concurrent and that's just like oh well that's that's kind of logical now where i really first encountered this",
    "start": "2794560",
    "end": "2800960"
  },
  {
    "text": "was in a language called occum which is kind of as dead as a doornail at this point but 30 years ago it was it was quite a",
    "start": "2800960",
    "end": "2807520"
  },
  {
    "text": "what actually 1980s but there's some really interesting ideas in it and it",
    "start": "2807520",
    "end": "2812560"
  },
  {
    "text": "basically tried to generalize the whole concept and say well look you've got two ways of executing a bunch",
    "start": "2812560",
    "end": "2818560"
  },
  {
    "text": "a bunch that's very technical here i have a bunch of statements how would you like them executed would you like them",
    "start": "2818560",
    "end": "2825040"
  },
  {
    "text": "from top to bottom or all at once and so you would choose in other words you didn't have extra qualifiers you",
    "start": "2825040",
    "end": "2831280"
  },
  {
    "text": "basically said i want this one in sequence it executes top to bottom i want these in parallel it executes all",
    "start": "2831280",
    "end": "2837680"
  },
  {
    "text": "at once it's really and everything aligns because they're the same number of letters oh my goodness it's like i",
    "start": "2837680",
    "end": "2842880"
  },
  {
    "text": "designed this and they even generalized the for loop what is a for loop if not a sequence",
    "start": "2842880",
    "end": "2848880"
  },
  {
    "text": "repeat it so from i equals one four three",
    "start": "2848880",
    "end": "2854240"
  },
  {
    "text": "in sequence is this and you can do it in parallel as well",
    "start": "2854240",
    "end": "2859838"
  },
  {
    "text": "so you could generalize you had a parallel fall it's just like it was all that really nice design very very",
    "start": "2860160",
    "end": "2865440"
  },
  {
    "text": "elegant but there's a point here that was",
    "start": "2865440",
    "end": "2870559"
  },
  {
    "text": "parallel blocks which people have been trying to kind of reinvent but rarely try to put back in the language they",
    "start": "2870559",
    "end": "2876000"
  },
  {
    "text": "often do it via a library but it's such an elegant way of thinking it kind of recognizes the",
    "start": "2876000",
    "end": "2881760"
  },
  {
    "text": "the top to bottom nature versus you know i have a set of things would you like them in sequence or simultaneous that's",
    "start": "2881760",
    "end": "2886880"
  },
  {
    "text": "a really nice idea but let's explore another quadrant here looking at the procedural comfort zone",
    "start": "2886880",
    "end": "2892480"
  },
  {
    "text": "unshared mutable data needs no synchronization there was an idea kicking around the late 80s early 90s",
    "start": "2892480",
    "end": "2898160"
  },
  {
    "text": "called the coordination model uh david galento and colleagues uh came up with this the linda model of uh concurrency",
    "start": "2898160",
    "end": "2904960"
  },
  {
    "text": "and distribution and it was this idea that perhaps if you separated and this is a very powerful",
    "start": "2904960",
    "end": "2910400"
  },
  {
    "text": "design idea that you can apply anywhere um you don't need to it's not bound to their thinking but the",
    "start": "2910400",
    "end": "2916000"
  },
  {
    "text": "idea we can build a complete programming model out of two separate pieces computation okay and coordination in",
    "start": "2916000",
    "end": "2922640"
  },
  {
    "text": "other words computation here computation bit is rather than taking nicolas birth's algorithms plus data structures equals",
    "start": "2922640",
    "end": "2929359"
  },
  {
    "text": "programs which is a very it's a book on classic structure programming we take a different view programs our coordination",
    "start": "2929359",
    "end": "2934480"
  },
  {
    "text": "plus computation and we make we make it so that what we're doing is we have lots of little pieces of computation and then",
    "start": "2934480",
    "end": "2939920"
  },
  {
    "text": "we glue them together and we have maybe the glue is blue language is the same maybe it's via library or maybe we use a",
    "start": "2939920",
    "end": "2945440"
  },
  {
    "text": "separate language but we treat them as architecturally separate and there's a beautiful clarity to this",
    "start": "2945440",
    "end": "2950480"
  },
  {
    "text": "you can test your computation easily and take a step back and now how would you like to plug it together that's a very",
    "start": "2950480",
    "end": "2956000"
  },
  {
    "text": "and that's a as i say it's a powerful way of thinking um but as they say computation model allows",
    "start": "2956000",
    "end": "2961280"
  },
  {
    "text": "programs to build a single computational activity a single threaded step at a time computation they were really clear about this keep it simple because people",
    "start": "2961280",
    "end": "2967680"
  },
  {
    "text": "can do that right now configure your coordination is and how",
    "start": "2967680",
    "end": "2974720"
  },
  {
    "text": "would you like the result of this to go to this one now although i say that this is their specific language and description of",
    "start": "2974720",
    "end": "2981760"
  },
  {
    "text": "this was late 80s early 90s actually we've seen the idea before and actually very explicitly the kind of",
    "start": "2981760",
    "end": "2988319"
  },
  {
    "text": "the idea of the pipeline and pipelines are really nice because they",
    "start": "2988319",
    "end": "2994079"
  },
  {
    "text": "allow you they pipelines are friendly because they allow you to reason about things they allow you to reason because the",
    "start": "2994079",
    "end": "3000240"
  },
  {
    "text": "bits in the in a simple pipeline the components the parts you're putting together that sequence as a human being",
    "start": "3000240",
    "end": "3006000"
  },
  {
    "text": "i can read from top to bottom on a good day and that's like okay i can do that i can understand what's going on",
    "start": "3006000",
    "end": "3012720"
  },
  {
    "text": "you may notice that one of the things we miss in most of our programs and our programming languages is the ability to express concurrently on the",
    "start": "3012720",
    "end": "3019359"
  },
  {
    "text": "concurrency on the page it's normally launch this or send something off there it when when you look at the code",
    "start": "3019359",
    "end": "3025920"
  },
  {
    "text": "squinted it and look at the indentation there's nothing that says parallel there okay there's nothing that tells you that it",
    "start": "3025920",
    "end": "3032079"
  },
  {
    "text": "looks like that we have relatively few notations that afford that um kind of classical music",
    "start": "3032079",
    "end": "3038000"
  },
  {
    "text": "stave notation is is a good example of actually here is a notation that is truly concurrent um but we don't really",
    "start": "3038000",
    "end": "3043920"
  },
  {
    "text": "have that so what we do is we simplify this we say look two ways i can think simply the flow of the data and the flow",
    "start": "3043920",
    "end": "3049599"
  },
  {
    "text": "of the control and we you know that's the elegance of a pipeline the pipelines",
    "start": "3049599",
    "end": "3054960"
  },
  {
    "text": "are really old this is doug mcelroy's 1964 paper where he designed this it took uh it took ken thompson six",
    "start": "3054960",
    "end": "3062319"
  },
  {
    "text": "years to find the pipe symbol on the keyboard but that was how it was implemented that",
    "start": "3062319",
    "end": "3067599"
  },
  {
    "text": "this was the original unix pipe before there was even such an idea of unix and this idea is incredibly elegant we",
    "start": "3067599",
    "end": "3073680"
  },
  {
    "text": "should have some ways of coupling programs like garden hoses screw in another segment when it becomes necessary to massage data in another way",
    "start": "3073680",
    "end": "3079280"
  },
  {
    "text": "this is the way of i o also this is kind of the unix way but it's a very it doesn't solve every problem",
    "start": "3079280",
    "end": "3084720"
  },
  {
    "text": "but historically pipes were the coordination language for procedural programs that's how that was",
    "start": "3084720",
    "end": "3091599"
  },
  {
    "text": "one of the ways that they were supposed to be bolted together we keep the bits procedural in a way that seems to be relatively efficient and widely",
    "start": "3091599",
    "end": "3097680"
  },
  {
    "text": "understood at the time and then we combine things differently and",
    "start": "3097680",
    "end": "3102880"
  },
  {
    "text": "so we kind of have that kind of view but if we kind of jump a little bit",
    "start": "3102880",
    "end": "3108079"
  },
  {
    "text": "there's an observation here and this is about another observation of mcelroy's so we jump into this quote",
    "start": "3108079",
    "end": "3114480"
  },
  {
    "text": "mcroy's review is both an explanation of an exemplar of the unique's way this kind of ties in with dan dantos north's talk yesterday the cupid",
    "start": "3114480",
    "end": "3121520"
  },
  {
    "text": "uh when he's talking about cupid properties he talks about the unix way and it's a very important way of",
    "start": "3121520",
    "end": "3126640"
  },
  {
    "text": "thinking even though none of the universities seem to follow that anymore it's an it's a profound way of thinking",
    "start": "3126640",
    "end": "3131680"
  },
  {
    "text": "it's compositional small programs do elementary tasks but which are written so they can be combined in complex ways",
    "start": "3131680",
    "end": "3137359"
  },
  {
    "text": "and this is also important because it gives us this idea of composability again something that people find easy to",
    "start": "3137359",
    "end": "3143599"
  },
  {
    "text": "reason about and composability is a property that we have with",
    "start": "3143599",
    "end": "3148960"
  },
  {
    "text": "pipelines but not with locks and threats if you try and take a piece of code that works with locks and threads and you",
    "start": "3148960",
    "end": "3154160"
  },
  {
    "text": "combine it with another piece of code that works with lots of threads you've got absolutely no guarantee that it's",
    "start": "3154160",
    "end": "3159359"
  },
  {
    "text": "going to work at all it may deadlock it may just do the wrong thing because they're not they both have strong",
    "start": "3159359",
    "end": "3165119"
  },
  {
    "text": "opinions you've got two pieces of code that have strong opinions about the nature of time it's very difficult to mix those",
    "start": "3165119",
    "end": "3170640"
  },
  {
    "text": "so there is a kind of an observation there when we talk about these things a lot of",
    "start": "3170640",
    "end": "3176079"
  },
  {
    "text": "these things are based on cueing ideas a pipe is just a cue with a bit of discipline okay",
    "start": "3176079",
    "end": "3181839"
  },
  {
    "text": "and it's a it's a point to point you know producer um consumer q although i always like to think if you want to",
    "start": "3181839",
    "end": "3187280"
  },
  {
    "text": "really pep up your vocabulary and confuse your colleagues don't call a qrq call it space time decoupling because that is exactly what it is",
    "start": "3187280",
    "end": "3193839"
  },
  {
    "text": "it is either you are decoupling things spatially within the code or in time we'll come back to that later that's all",
    "start": "3193839",
    "end": "3198960"
  },
  {
    "text": "you can look at any queue and it's a space time decoupling um no actually please don't take that as a naming recommendation because",
    "start": "3198960",
    "end": "3204319"
  },
  {
    "text": "otherwise i'm going to get a lot of flack for that kevin i thought you said all this kind of extra word naming was a bad idea yeah but honestly space-time",
    "start": "3204319",
    "end": "3210559"
  },
  {
    "text": "decoupling sounds cool use it in a meeting just not in the code now typically we do this because it",
    "start": "3210559",
    "end": "3215839"
  },
  {
    "text": "gives us natural asynchronicity we end up with a construct that is buffered it's bounded and it's buffered watch out",
    "start": "3215839",
    "end": "3221359"
  },
  {
    "text": "for anything that is infinite and unbounded it looks kind of good in computer science paper but it's a terrible terrible idea because it means",
    "start": "3221359",
    "end": "3227920"
  },
  {
    "text": "you are subject to bad producers and bad consumers when you run out of memory you suddenly discover",
    "start": "3227920",
    "end": "3232960"
  },
  {
    "text": "the finiteness of infinity in practice okay it's a painful experience so yeah always",
    "start": "3232960",
    "end": "3238800"
  },
  {
    "text": "go in with a strong opinion in the limit you can have a buffer of one and it's still considered",
    "start": "3238800",
    "end": "3244559"
  },
  {
    "text": "asynchronous it's kind of a mailbox metaphor i'll just put this here you come back for it later i'll leave it on",
    "start": "3244559",
    "end": "3249680"
  },
  {
    "text": "your neighbor's doorstep you can come back for it later type thing interestingly enough if you make that",
    "start": "3249680",
    "end": "3255040"
  },
  {
    "text": "single place so that even on that level it's useful if you make that single place a single use",
    "start": "3255040",
    "end": "3260720"
  },
  {
    "text": "we have a name for that it's called the future and the other side of it's called a promise",
    "start": "3260720",
    "end": "3265920"
  },
  {
    "text": "it turns out we don't need most of the things that people add to programming languages is just like squinted them right and it's just yep we",
    "start": "3265920",
    "end": "3272640"
  },
  {
    "text": "have this we already have this it's a primitive from another point of view",
    "start": "3272640",
    "end": "3277599"
  },
  {
    "text": "but what about what about a queue that has no capacity whatsoever does",
    "start": "3277680",
    "end": "3283119"
  },
  {
    "text": "that even make sense and it depends it's a question",
    "start": "3283119",
    "end": "3288400"
  },
  {
    "text": "perspective no it's not asynchronous so if you ask if you're your definition of of cueing is yeah it's got to be asynchronous then",
    "start": "3288400",
    "end": "3294880"
  },
  {
    "text": "it's then it isn't but then again this is a little bit like the number zero for a long for most of",
    "start": "3294880",
    "end": "3300640"
  },
  {
    "text": "human history the idea of actually having a number for zero was a ridiculous idea um but actually having a having this",
    "start": "3300640",
    "end": "3308319"
  },
  {
    "text": "actually makes sense it implements a construct known as a rendezvous where both of you you can go off and do independent things",
    "start": "3308319",
    "end": "3314720"
  },
  {
    "text": "but you both have to be there at the same time for that we actually have another name for this this is called a channel if you're treating it's a",
    "start": "3314720",
    "end": "3320400"
  },
  {
    "text": "primitive construct rendezvous are an idea that we used in a few languages in the 1980s um and still i think is one of",
    "start": "3320400",
    "end": "3327040"
  },
  {
    "text": "the more elegant ways of doing this but a channel is a fundamental construct the idea of like we've both got to be",
    "start": "3327040",
    "end": "3332400"
  },
  {
    "text": "here at the same time i've got no space to buffer things so you better be there i'm going to wait for you",
    "start": "3332400",
    "end": "3337760"
  },
  {
    "text": "okay you can see there's a limit to this but you know this was a fundamental idea",
    "start": "3337760",
    "end": "3343200"
  },
  {
    "text": "that tony hall introduced in csp communicating sequential processes um i mentioned the arkham",
    "start": "3343200",
    "end": "3349680"
  },
  {
    "text": "language earlier that also had this kind of stuff it was this idea in fact this is wonderful so my copy of jones and",
    "start": "3349680",
    "end": "3356400"
  },
  {
    "text": "goldsmith they have this wonderful example like yes you can implement anything with parallel constructs the idea sometimes you know a little bit of",
    "start": "3356400",
    "end": "3362480"
  },
  {
    "text": "fun that sometimes you have you take a simple problem and you make it ridiculously hard it's just like fizz bars or anything",
    "start": "3362480",
    "end": "3367839"
  },
  {
    "text": "like that actually this it's not a new idea i i love this book because it's just like okay there's that's what an",
    "start": "3367839",
    "end": "3374640"
  },
  {
    "text": "assignment looks like in arkham i shouldn't freak you out too much that's what an assignment looks like",
    "start": "3374640",
    "end": "3379920"
  },
  {
    "text": "or oh this semantically equivalent",
    "start": "3379920",
    "end": "3385280"
  },
  {
    "text": "to let's execute a let's execute two processes in parallel across a shared",
    "start": "3385280",
    "end": "3390799"
  },
  {
    "text": "channel and i'm going to send you this value and you're going to receive it in a variable you need never write a simple humble assignment statement again",
    "start": "3390799",
    "end": "3398079"
  },
  {
    "text": "okay this is semantically equivalent i'll be very careful about the word semantically equivalent because it really isn't when",
    "start": "3398079",
    "end": "3403599"
  },
  {
    "text": "you start looking at the generated code and the expressions on the your colleagues faces um so but that was all built this arkham",
    "start": "3403599",
    "end": "3411839"
  },
  {
    "text": "language was built out of csp um and as he said we shall observe the convention that channels are used for",
    "start": "3411839",
    "end": "3417680"
  },
  {
    "text": "communication in only one direction and between only two processes now the channel idea",
    "start": "3417680",
    "end": "3422799"
  },
  {
    "text": "i was introduced to in occur these days people are more likely to use go that's the language that was influenced by them",
    "start": "3422799",
    "end": "3429119"
  },
  {
    "text": "they also get the option by default channels are indeed channels i described them they are zero place they are",
    "start": "3429119",
    "end": "3434400"
  },
  {
    "text": "unbuffered they are synchronous uh they are rendezvous mechanisms but you can customize them to be much more",
    "start": "3434400",
    "end": "3439680"
  },
  {
    "text": "like cues and you can build all these other constructs so the terminology shifts a little bit here but it's there",
    "start": "3439680",
    "end": "3445280"
  },
  {
    "text": "so we can and there's a beautiful switch where we can take something like",
    "start": "3445280",
    "end": "3451119"
  },
  {
    "text": "a function and turn it into something like a running process that might even be considered an object i'm gonna take",
    "start": "3451119",
    "end": "3457040"
  },
  {
    "text": "i'm gonna have two channels they're both gonna be channels of string you know one's gonna send we're gonna",
    "start": "3457040",
    "end": "3462160"
  },
  {
    "text": "use one to send strings and the other to receive strings i'm giving the name push and pop and i'm gonna run a function called",
    "start": "3462160",
    "end": "3468400"
  },
  {
    "text": "stack and that function is gonna have a simultaneous concurrent existence with where i have called it from and my only",
    "start": "3468400",
    "end": "3475599"
  },
  {
    "text": "means of communicating with it actually go allows you other ways but if you are using if you're not going round",
    "start": "3475599",
    "end": "3481359"
  },
  {
    "text": "the back and kind of like actually i'm going to meddle with things if you just use the kind of like the",
    "start": "3481359",
    "end": "3486880"
  },
  {
    "text": "easy off-the-shelf stuff you can use channels that's the only way we can talk so there's no locks but we do have",
    "start": "3486880",
    "end": "3492480"
  },
  {
    "text": "synchronization because we have channels so the idea is you don't get to say right we've set all this up here's the data by the way please remember to",
    "start": "3492480",
    "end": "3500000"
  },
  {
    "text": "please remember to lock in and lock out but then leave the door open that's kind of like most you know kind of lock based",
    "start": "3500000",
    "end": "3505520"
  },
  {
    "text": "programming it's like please don't touch the thing you're supposed there's a token over here please please pay attention to it",
    "start": "3505520",
    "end": "3511359"
  },
  {
    "text": "most people just walk in and try and grab the thing hence race conditions here it's a case",
    "start": "3511359",
    "end": "3516880"
  },
  {
    "text": "of like we're not even going to let you do that you have a discipline you go in that door and you come out this door simple as that you want data well you",
    "start": "3516880",
    "end": "3523359"
  },
  {
    "text": "want to you want to push something onto the stack send down push channel you want to see something listen on the pop channel",
    "start": "3523359",
    "end": "3528559"
  },
  {
    "text": "so if we push ndc nice arrow notation nice one there push london",
    "start": "3528559",
    "end": "3534000"
  },
  {
    "text": "and then we print the pop of it we get this in reverse order again notice the nice little arrows they thought about",
    "start": "3534000",
    "end": "3540079"
  },
  {
    "text": "this one we have a kind of question what happens if i do that and what happens if i pop",
    "start": "3540079",
    "end": "3545119"
  },
  {
    "text": "an empty stack yeah good question i'm gonna i'm gonna be a very much a computer scientist",
    "start": "3545119",
    "end": "3550160"
  },
  {
    "text": "about this one and say well we're gonna leave this one as unspecified that's a very elegant way of saying we",
    "start": "3550160",
    "end": "3555440"
  },
  {
    "text": "did not solve the problem you're on your own kit actually what it means in practice is",
    "start": "3555440",
    "end": "3560720"
  },
  {
    "text": "as tony hawe highlighted something very fundamental here that is a weakness of this approach but",
    "start": "3560720",
    "end": "3566640"
  },
  {
    "text": "yeah this form of failure is known as a deadlock okay but i'm going to say that that's a feature it's not a bug if you",
    "start": "3566640",
    "end": "3571760"
  },
  {
    "text": "do the wrong thing that is on you um there's a simple state model you know a stack it can be",
    "start": "3571760",
    "end": "3577520"
  },
  {
    "text": "empty it can be non-empty and if you push it when it's empty you get what you want if you pop it when it's not empty",
    "start": "3577520",
    "end": "3583440"
  },
  {
    "text": "you get what you want if you push and pop when it's not empty you get what you want if you pop it when it's empty you get",
    "start": "3583440",
    "end": "3589359"
  },
  {
    "text": "what you deserve okay but what's the code look like",
    "start": "3589359",
    "end": "3594720"
  },
  {
    "text": "so this is the nice things what we do is we kind of folding around just for clarification sometimes go is",
    "start": "3594720",
    "end": "3601440"
  },
  {
    "text": "very much a procedural language it's a procedural language with some data abstraction ideas and some channel ideas",
    "start": "3601440",
    "end": "3607440"
  },
  {
    "text": "but most of its features it's very you can you can find go through history not surprising based on the authors those",
    "start": "3607440",
    "end": "3614319"
  },
  {
    "text": "ideas were already around but it is very much first and foremost if you look at its dna this is modern procedural programming",
    "start": "3614319",
    "end": "3620400"
  },
  {
    "text": "in fact you can do other things in it that's great but that's its default access in other words if i just sit there and write stuff that's what it's",
    "start": "3620400",
    "end": "3626640"
  },
  {
    "text": "going to look like and these ideas all came from languages that were procedural so what i'm going to do is i'm going to",
    "start": "3626640",
    "end": "3633119"
  },
  {
    "text": "say i've got a function it's got local state i want my local state to persist we have this conversation earlier wrong with objects what if i could keep the",
    "start": "3633119",
    "end": "3639599"
  },
  {
    "text": "state around for a while well here i'm actually going to do it i'm going to make a function continually exist and",
    "start": "3639599",
    "end": "3645040"
  },
  {
    "text": "then talk to the function and it's going to have its local data forget all that private keyword stuff this is so private",
    "start": "3645040",
    "end": "3651920"
  },
  {
    "text": "you can't even look inside it you know this really is very private it's inside the block and i've got a forever loop",
    "start": "3651920",
    "end": "3659359"
  },
  {
    "text": "and the first thing is basically i'm going to take the depth if the depth is zero we are empty so i am prepared at",
    "start": "3659359",
    "end": "3666240"
  },
  {
    "text": "this point you know i'm going to listen i'm going to listen out for at this point i'm going to listen to a",
    "start": "3666240",
    "end": "3671839"
  },
  {
    "text": "push i'm not listening for pops if you do that you're stuck okay but i'm listening for push and i'm quite happy",
    "start": "3671839",
    "end": "3677119"
  },
  {
    "text": "to do that i'm going to modify my own internal state accordingly",
    "start": "3677119",
    "end": "3681920"
  },
  {
    "text": "if i'm not empty then i must be non-empty so one of two things can happen",
    "start": "3683280",
    "end": "3688480"
  },
  {
    "text": "either somebody pushes something onto me or somebody wants a value they want to pop so i can receive so there's",
    "start": "3688480",
    "end": "3693680"
  },
  {
    "text": "something happening on one of two channels a listen or a send okay so that's how i decide a different control",
    "start": "3693680",
    "end": "3699760"
  },
  {
    "text": "construct okay basically a non-deterministic control construct again another 1970s idea",
    "start": "3699760",
    "end": "3706799"
  },
  {
    "text": "but it's basically a case of in this case i'm listening on push if i receive a",
    "start": "3707200",
    "end": "3713520"
  },
  {
    "text": "push then that means i receive a new value and therefore i will append it to my array of values and therefore i've",
    "start": "3713520",
    "end": "3719200"
  },
  {
    "text": "now received that value and i'm a stack that now has one more value than it had before on the other hand if i if i'm hearing a",
    "start": "3719200",
    "end": "3725359"
  },
  {
    "text": "pop then i'm going to take that uh that last element off and then slice it down no it's not the most efficient",
    "start": "3725359",
    "end": "3730960"
  },
  {
    "text": "implementation that's not my intention here but what we've got here is a very simple idea i've just taken",
    "start": "3730960",
    "end": "3736480"
  },
  {
    "text": "a simple construct a procedural construct and turn it into a co-partner and go routines as they're called and go",
    "start": "3736480",
    "end": "3743760"
  },
  {
    "text": "they are not exactly co-routines they're not exactly threads that's kind of all scrolled away at the back but there is this idea of you think about it in terms",
    "start": "3743760",
    "end": "3752079"
  },
  {
    "text": "of channels you don't think there's a thread over there that i want to talk to and i'm going to lock things and unlock",
    "start": "3752079",
    "end": "3758400"
  },
  {
    "text": "things you say we fired that off and we're going to have a conversation we just better make",
    "start": "3758400",
    "end": "3763520"
  },
  {
    "text": "sure we have the right conversation okay this is a kind of question of orchestration in the code",
    "start": "3763520",
    "end": "3769838"
  },
  {
    "text": "okay so the final trick wouldn't it be fun if you could actually get rid of that array",
    "start": "3770079",
    "end": "3775920"
  },
  {
    "text": "because that array yeah it's okay but we already have a stack it's called",
    "start": "3775920",
    "end": "3781200"
  },
  {
    "text": "a runtime stack why don't we use the runtime stack to express the stack",
    "start": "3781200",
    "end": "3788559"
  },
  {
    "text": "there's almost an xkcd cartoon in here so let's do that when you create a stack it's initially",
    "start": "3788559",
    "end": "3793839"
  },
  {
    "text": "empty that's your forever loop and when you call a function called non-empty stack",
    "start": "3793839",
    "end": "3798880"
  },
  {
    "text": "then you go into the non-empty stack you call it with the value that you're keeping on",
    "start": "3798880",
    "end": "3804079"
  },
  {
    "text": "top top is now a local variable so now when somebody says i would like",
    "start": "3804079",
    "end": "3809359"
  },
  {
    "text": "to pop this you return your local variable you return the value the one value you had on the stack and your returner",
    "start": "3809359",
    "end": "3815280"
  },
  {
    "text": "or you call yourself again with the new value so now you know if you're not comfortable with the cursion i'm sorry",
    "start": "3815280",
    "end": "3820960"
  },
  {
    "text": "this code is really not going to help you it's not going to make you more comfortable but what is interesting is that this",
    "start": "3820960",
    "end": "3827119"
  },
  {
    "text": "approach to express so we've just replaced the stack with a stack genius so yeah this is the summary of the talk",
    "start": "3827119",
    "end": "3834079"
  },
  {
    "text": "um no more of the point this is actually idiomatic if you were doing this in erlang again another",
    "start": "3834079",
    "end": "3839760"
  },
  {
    "text": "language whose influence and his model the actor model definitely not a procedural thing that hence why it's",
    "start": "3839760",
    "end": "3845440"
  },
  {
    "text": "outside the scope but i want to show you there is a convergence here we can actually see how this touches on to some of these other ideas but or more",
    "start": "3845440",
    "end": "3852480"
  },
  {
    "text": "importantly how it relates to other paradigms and there's an adjacency between paradigms which people don't uh",
    "start": "3852480",
    "end": "3858640"
  },
  {
    "text": "which don't appreciate sometimes and sometimes it's hard to see but from a historical perspective",
    "start": "3858640",
    "end": "3865359"
  },
  {
    "text": "i want to go back through all of this stuff and it's just like it's not that i'm it's not that i'm hankering for the you know 1960s or 1970s honestly you",
    "start": "3865359",
    "end": "3872880"
  },
  {
    "text": "know some of the music is great but we get to listen to that music these days that is what you know that's that is",
    "start": "3872880",
    "end": "3878319"
  },
  {
    "text": "what things like spotify iv it allows me to access the past without having to put up with the food quality of the past and",
    "start": "3878319",
    "end": "3884160"
  },
  {
    "text": "other issues like that uh on the other hand there were fewer pandemics back then so",
    "start": "3884160",
    "end": "3889920"
  },
  {
    "text": "you know it's a bit of yeah the point here is that what we need to do is say hey look that feature is really nice",
    "start": "3889920",
    "end": "3895680"
  },
  {
    "text": "it's coming around again that's in that language and i have seen this before it's a better sense of history so i hope",
    "start": "3895680",
    "end": "3901119"
  },
  {
    "text": "that that's either screwed with your mind or educated your history or given you something to think about or is going",
    "start": "3901119",
    "end": "3907440"
  },
  {
    "text": "to make you dive into a glass of wine right now because i realize i am the i am the obstacle between you",
    "start": "3907440",
    "end": "3913280"
  },
  {
    "text": "and the evenings entertainment so thank you very much for your time",
    "start": "3913280",
    "end": "3919720"
  }
]