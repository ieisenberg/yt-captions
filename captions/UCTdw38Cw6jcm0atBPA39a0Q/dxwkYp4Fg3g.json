[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "so good morning who here builds applications for living",
    "start": "7490",
    "end": "13370"
  },
  {
    "text": "who was distributed applications for living who would like to have the problem of",
    "start": "13370",
    "end": "20550"
  },
  {
    "text": "scale so that's actually the biggest problem",
    "start": "20550",
    "end": "26490"
  },
  {
    "text": "that we face at some point in the in the app dev cycle right and we all want to be successful but then",
    "start": "26490",
    "end": "33900"
  },
  {
    "text": "sometimes successes they actually the dragon that kills us and scale becomes the enemy rather than the friend that we",
    "start": "33900",
    "end": "40650"
  },
  {
    "start": "39000",
    "end": "39000"
  },
  {
    "text": "want to have and in in many ways we have had over the last few years",
    "start": "40650",
    "end": "48799"
  },
  {
    "text": "since the birth of the internet and so on various technologies various tools",
    "start": "48799",
    "end": "54780"
  },
  {
    "text": "platforms rules of ways of building applications to try and get us to build",
    "start": "54780",
    "end": "61619"
  },
  {
    "text": "scalable applications to defeat the scale monster so we're going to talk about Orleans",
    "start": "61619",
    "end": "67380"
  },
  {
    "text": "which is a platform that I think that is the problem fairly squarely and in some",
    "start": "67380",
    "end": "73560"
  },
  {
    "text": "sense I think this is the way in which we should be doing highly scalable",
    "start": "73560",
    "end": "79350"
  },
  {
    "text": "applications in the future so welcome to our talk my name is John Ezra",
    "start": "79350",
    "end": "84750"
  },
  {
    "text": "I work for Microsoft as a software engineer and this is Sergey back off he's me",
    "start": "84750",
    "end": "92070"
  },
  {
    "text": "it's actually been Deb lead for project or lean since the beginning so this is kind of a cheesy slide and",
    "start": "92070",
    "end": "99900"
  },
  {
    "text": "actually I think correctly the slope should be the other way around it's our PowerPoint skills are not great to",
    "start": "99900",
    "end": "105000"
  },
  {
    "text": "express what you want to show so it shows the general kind of scale growth but you think about if you step back",
    "start": "105000",
    "end": "110729"
  },
  {
    "text": "it's not just scale in terms of a huge number of servers their architecture is hit their limit with CPU sizes in terms",
    "start": "110729",
    "end": "118620"
  },
  {
    "text": "of number of transistors we can put and the scaling out even on",
    "start": "118620",
    "end": "124970"
  },
  {
    "text": "the silicon to silicon level so at some point the movement promised 100 core",
    "start": "124970",
    "end": "131310"
  },
  {
    "text": "CPUs a few years ago at some point they will arrive and interestingly enough in that case you cannot have character here",
    "start": "131310",
    "end": "138540"
  },
  {
    "text": "memory even at the processor level so you need to do some kind of message passing and scale out even at the lower",
    "start": "138540",
    "end": "143819"
  },
  {
    "text": "level so this patterns in general conservative scale they apply I believe",
    "start": "143819",
    "end": "149250"
  },
  {
    "text": "all the way from the silicon to the cloud scale of the cloud",
    "start": "149250",
    "end": "155030"
  },
  {
    "text": "just a quick intro to your liens for somebody who is unaware so at least is",
    "start": "155030",
    "end": "161069"
  },
  {
    "text": "the virtual actor model where you program kind of like in distributed C sharp paradigm so you start by defining",
    "start": "161069",
    "end": "167340"
  },
  {
    "text": "an interface which has a synchronous methods return tasks GPL tasks it",
    "start": "167340",
    "end": "172859"
  },
  {
    "text": "promises for future values like in this case say hello method takes a string and returns a promise for a string that will",
    "start": "172859",
    "end": "178650"
  },
  {
    "text": "be fulfilled at some point in the future so you define this any faces and that's one hard requirement you have everything",
    "start": "178650",
    "end": "184409"
  },
  {
    "text": "asynchronous and then you can use it it's gonna code in this way so first",
    "start": "184409",
    "end": "189450"
  },
  {
    "text": "line you get a reference to the grade the logical reference we're saying factory class give me a reference for",
    "start": "189450",
    "end": "196409"
  },
  {
    "text": "grain that implements this interface which was defined for identity of the actor recalled on grains the user ID and",
    "start": "196409",
    "end": "203190"
  },
  {
    "text": "that proxy you get back at implements already in FA so you can make a call right away so it's totally local operation doesn't",
    "start": "203190",
    "end": "211229"
  },
  {
    "text": "require any round-trips lookup to just construct identity essentially in the form of this proxy object underneath and",
    "start": "211229",
    "end": "216750"
  },
  {
    "text": "then make a call and so the magic of GPL async/await you can await the call",
    "start": "216750",
    "end": "223560"
  },
  {
    "text": "without blocking thread and then continue execution when response actually arise so that that's the basic",
    "start": "223560",
    "end": "229609"
  },
  {
    "text": "constructed very basic level and when you implement you implement a class that",
    "start": "229609",
    "end": "234810"
  },
  {
    "text": "extends the base class grain and implements one extensive base class grain and implements one or more grain",
    "start": "234810",
    "end": "240629"
  },
  {
    "text": "interfaces like in this case our user what you get here is the single threaded",
    "start": "240629",
    "end": "246569"
  },
  {
    "text": "execution guarantee so this method will never run concurrently with any other methods or any other calls to the same",
    "start": "246569",
    "end": "253109"
  },
  {
    "text": "method so that's the guarantee of the framework and it allows me to have a private variable counter and you just increments on it without worrying about",
    "start": "253109",
    "end": "260250"
  },
  {
    "text": "data races concurrency and I need logs semaphores so this is what the the probably model is for developer but",
    "start": "260250",
    "end": "266969"
  },
  {
    "text": "under the covers this actual grains they go through this lifecycle so logically",
    "start": "266969",
    "end": "272670"
  },
  {
    "text": "they always exist logically can make a call to any grain with any identity of any type in the system you don't care",
    "start": "272670",
    "end": "278550"
  },
  {
    "text": "you don't check if they're in memory or in storage but most of your grain is actually in storage they're not in memory because they haven't been used",
    "start": "278550",
    "end": "284280"
  },
  {
    "text": "recently and so as you make a call as the method call arrives it gets activated boots and memory and one of",
    "start": "284280",
    "end": "289560"
  },
  {
    "text": "the server's handles requests as they come in and as it becomes cold they request stops coming in the runtime knows that it's",
    "start": "289560",
    "end": "295950"
  },
  {
    "text": "not used anymore and can deactivate it and the process it makes calls to the grain cold say I'm activating you if you",
    "start": "295950",
    "end": "302220"
  },
  {
    "text": "need initialization do it now or I'm about to deactivate you do something before I remove you from memory that",
    "start": "302220",
    "end": "308760"
  },
  {
    "text": "that's the basis on which we're going to build the rest of the patterns just kind of a primer to the general model",
    "start": "308760",
    "end": "315860"
  },
  {
    "text": "that's right so in another thing that so it's okay",
    "start": "315860",
    "end": "321110"
  },
  {
    "start": "317000",
    "end": "317000"
  },
  {
    "text": "so we we have basically the act as the unit of computation that's a traditional",
    "start": "321110",
    "end": "326190"
  },
  {
    "text": "way of thinking of actors right but one of the extensions that are present in in",
    "start": "326190",
    "end": "332190"
  },
  {
    "text": "this whole activation deactivation cycle is the ability for a grain to actually store a little bit of state so not only",
    "start": "332190",
    "end": "339750"
  },
  {
    "text": "is it the unit of computation it could also be the unit of data storage so the very very simplest pattern that you will",
    "start": "339750",
    "end": "346590"
  },
  {
    "text": "likely use at some point is please allow me to store this bit of information and",
    "start": "346590",
    "end": "352530"
  },
  {
    "text": "access it later and the address of the information is its identity right so in",
    "start": "352530",
    "end": "359880"
  },
  {
    "text": "in in a distributed environment we have the ability to say here is a grain and",
    "start": "359880",
    "end": "365040"
  },
  {
    "text": "it's only reason for existence is the ability to store a bit of information",
    "start": "365040",
    "end": "370710"
  },
  {
    "text": "and give it back to us when we need it the beauty of this is that the the",
    "start": "370710",
    "end": "376110"
  },
  {
    "text": "access to the state will always be serialized as I pointed out we have a single threaded model for accessing",
    "start": "376110",
    "end": "382919"
  },
  {
    "text": "everything so you never have a concurrency issue when it comes to dealing with that so you can think about the the grain state pattern as the",
    "start": "382919",
    "end": "391500"
  },
  {
    "text": "simplest way to deal with distributed data and you know in the smallest very",
    "start": "391500",
    "end": "397320"
  },
  {
    "text": "possible so the pattern so by the way let me let",
    "start": "397320",
    "end": "402630"
  },
  {
    "text": "me take a step back little bit about what it is that we're actually talking about in this talk right we have a fair bit of experience",
    "start": "402630",
    "end": "411350"
  },
  {
    "text": "in building real-world applications and we've used Orleans to build real world",
    "start": "411350",
    "end": "418009"
  },
  {
    "text": "applications and there are quite a few common patterns that we come across so",
    "start": "418009",
    "end": "424009"
  },
  {
    "text": "for example in traditional way we would deal with a three-tier model we would talk about you know entity relationships",
    "start": "424009",
    "end": "430310"
  },
  {
    "text": "for the databases and then you have a domain model for defining humidity and",
    "start": "430310",
    "end": "435380"
  },
  {
    "text": "so on and so forth these patterns are equivalent in terms of how we build",
    "start": "435380",
    "end": "441410"
  },
  {
    "text": "applications so all the code that I'm showing you is freely available will be",
    "start": "441410",
    "end": "447349"
  },
  {
    "text": "pointed to the github repo take the patterns and use the masses I'll spend some time explaining some of",
    "start": "447349",
    "end": "453620"
  },
  {
    "text": "the complex patterns how they're actually implemented but you actually don't need to even know about those you",
    "start": "453620",
    "end": "459440"
  },
  {
    "text": "just have to use them so in the case of the object store",
    "start": "459440",
    "end": "464229"
  },
  {
    "text": "in the case of the object store we start by basically defining the entity that we",
    "start": "465520",
    "end": "470690"
  },
  {
    "text": "want store and this is if you did design this would be a domain entity right and",
    "start": "470690",
    "end": "476780"
  },
  {
    "text": "all we have to do is make it serializable",
    "start": "476780",
    "end": "482289"
  },
  {
    "text": "as part of a pattern what we have is an interface",
    "start": "482289",
    "end": "489310"
  },
  {
    "text": "that's the laser you know so this interface is actually part of the",
    "start": "492639",
    "end": "498380"
  },
  {
    "text": "pattern library you won't actually see it but I put it up here to show you what it looks like and like I said it has",
    "start": "498380",
    "end": "505250"
  },
  {
    "text": "only one raison d'être life it should store some key item and give it back to you when you wanted right so we write",
    "start": "505250",
    "end": "512390"
  },
  {
    "text": "this bit and we write the underlying green implementation for you so in order for you to use it the simplest pattern",
    "start": "512390",
    "end": "518690"
  },
  {
    "text": "can possibly think of create an item grain that just extends from that",
    "start": "518690",
    "end": "523930"
  },
  {
    "text": "define your grain implementation as base class implementation and provide a",
    "start": "523930",
    "end": "529490"
  },
  {
    "text": "storage provider which tells the the runtime where you want this grain",
    "start": "529490",
    "end": "534740"
  },
  {
    "text": "persistent and that's it it's actually a simplest bit of code you'll write and here's an example of",
    "start": "534740",
    "end": "541160"
  },
  {
    "text": "how it actually works is the form too small is it too small oh",
    "start": "541160",
    "end": "547990"
  },
  {
    "text": "okay it's on github",
    "start": "548620",
    "end": "552370"
  },
  {
    "text": "fundamentally I'll smoke it through you know you create the grain State this is",
    "start": "553720",
    "end": "558770"
  },
  {
    "text": "an instance of the piece of data we want to store get a reference to the grain as we saw earlier and then store the",
    "start": "558770",
    "end": "565790"
  },
  {
    "text": "reference store the data in there in that grain by calling set item and that's you creating the item and",
    "start": "565790",
    "end": "573040"
  },
  {
    "text": "you reading the item is exactly get item on this so this is the simplest piece of",
    "start": "573040",
    "end": "580420"
  },
  {
    "text": "programming that you would use to simply store and retrieve data right not all",
    "start": "580420",
    "end": "586280"
  },
  {
    "text": "the patterns are going to be this simple so the next pattern is an interesting one so if you think of that as the row",
    "start": "586280",
    "end": "594140"
  },
  {
    "text": "of your database table this would be the table here we have registry which is",
    "start": "594140",
    "end": "601820"
  },
  {
    "text": "just a grain that keeps references to other grains and you don't actually",
    "start": "601820",
    "end": "608230"
  },
  {
    "text": "the the grain does not intervene in the conversation with with with the things",
    "start": "608230",
    "end": "613910"
  },
  {
    "text": "that are stored all it does is keep a group of grains related grains together",
    "start": "613910",
    "end": "620230"
  },
  {
    "text": "this is a fundamental pattern again we will see this being used all over the place and",
    "start": "620230",
    "end": "626320"
  },
  {
    "text": "the state management of this registry grain is taking care of in the pattern",
    "start": "626320",
    "end": "633230"
  },
  {
    "text": "so you don't have to write the management of the list of grains and so on and so forth so again the usage",
    "start": "633230",
    "end": "639680"
  },
  {
    "start": "639000",
    "end": "639000"
  },
  {
    "text": "fairly trivial this time we we say hey we would like to",
    "start": "639680",
    "end": "646010"
  },
  {
    "text": "store or we would like to register a bunch of I catalog items into your registry and",
    "start": "646010",
    "end": "653140"
  },
  {
    "text": "again very complex implementation which simply",
    "start": "653140",
    "end": "659590"
  },
  {
    "text": "write underneath the covers the registry grain knows how to take care of doing stuff so where we use it um sorry for",
    "start": "659590",
    "end": "668660"
  },
  {
    "text": "the small fault but it's on github we do them much the same thing create a",
    "start": "668660",
    "end": "674600"
  },
  {
    "text": "catalogue item set the item and then once you get the item set in the grain",
    "start": "674600",
    "end": "679970"
  },
  {
    "text": "you register it in the registry right and then when we need to use the catalog",
    "start": "679970",
    "end": "685819"
  },
  {
    "text": "then we can just pick things off from there",
    "start": "685819",
    "end": "691329"
  },
  {
    "text": "now let's take a look at this code from the",
    "start": "691329",
    "end": "698209"
  },
  {
    "text": "point of view how we're going to use it so you know let's say you're building the next time is alright and you've got",
    "start": "698209",
    "end": "704929"
  },
  {
    "text": "a bunch of things that you want to keep track of that you need to sell each",
    "start": "704929",
    "end": "710769"
  },
  {
    "text": "item is virtually independent of each other I do every other item so a good",
    "start": "710769",
    "end": "717470"
  },
  {
    "text": "thing to do then is to model each of the items that you're gonna store in your catalog as an individual grain and then",
    "start": "717470",
    "end": "725389"
  },
  {
    "text": "every time you want to say group a bunch of grains together so say I'm stirring",
    "start": "725389",
    "end": "730699"
  },
  {
    "text": "I'm planning to do clothing right so every kind of shirt that I sell or every",
    "start": "730699",
    "end": "738230"
  },
  {
    "text": "kind of pant that I sell is its own grain but then I can have a registry that says",
    "start": "738230",
    "end": "743769"
  },
  {
    "text": "this is a list of all the things that pertain to shirts and this is another registry of",
    "start": "743769",
    "end": "751009"
  },
  {
    "text": "all the pants and then I can have multiple registries that talk about the various sizes so give me everything that",
    "start": "751009",
    "end": "757459"
  },
  {
    "text": "you know fits in this extra large size or whatever it is so you can have multiple registries",
    "start": "757459",
    "end": "765220"
  },
  {
    "text": "having references to the same grain and you can have the same grain register in multiple registries so that kind of a",
    "start": "765220",
    "end": "772999"
  },
  {
    "text": "matrix model vastly simplifies any and because the the registry actually",
    "start": "772999",
    "end": "778040"
  },
  {
    "text": "doesn't participate in the conversation and the grain all it does is hold a reference to it it doesn't add any",
    "start": "778040",
    "end": "783379"
  },
  {
    "text": "performance implication to you receiving information from it and there's no consistency",
    "start": "783379",
    "end": "790610"
  },
  {
    "text": "problem either because all that this thing is doing is keeping track of the reference has nothing to do with the",
    "start": "790610",
    "end": "797600"
  },
  {
    "text": "material inside the grain itself so as you can tell right this is already",
    "start": "797600",
    "end": "803509"
  },
  {
    "text": "starting to be a fairly powerful sort of introduction to how you use storage",
    "start": "803509",
    "end": "809970"
  },
  {
    "text": "patterns with an audience now of course you know we don't just read",
    "start": "809970",
    "end": "817620"
  },
  {
    "text": "things and then we land up having to persist",
    "start": "817620",
    "end": "822660"
  },
  {
    "text": "the things the traditional approach to doing this is to have you know caching pattern",
    "start": "822660",
    "end": "829500"
  },
  {
    "start": "827000",
    "end": "827000"
  },
  {
    "text": "where you have front ends talking all the way down to a source of truth that would traditionally be a database but",
    "start": "829500",
    "end": "837029"
  },
  {
    "text": "for performance reasons you have multiple levels of caching in between and then you have the interesting",
    "start": "837029",
    "end": "843089"
  },
  {
    "text": "problem of trying to figure out when should I invalidate my cache and how do I make sure that the right information",
    "start": "843089",
    "end": "848820"
  },
  {
    "text": "is in the right place with the right freshness guarantee right so audience",
    "start": "848820",
    "end": "855120"
  },
  {
    "text": "has an extremely elegant solution to this problem",
    "start": "855120",
    "end": "859910"
  },
  {
    "text": "and so the release model of this virtual actors it essentially creates the cache",
    "start": "860600",
    "end": "866040"
  },
  {
    "start": "862000",
    "end": "862000"
  },
  {
    "text": "pattern by itself so did this virtual cycle of grain getting from storage to",
    "start": "866040",
    "end": "871620"
  },
  {
    "text": "memory and back that essentially gives you a cache so you can encapsulate individual pieces of state like catalog",
    "start": "871620",
    "end": "879420"
  },
  {
    "text": "items in John's example the individual grains and whenever they're used there will be lifted to memory and then all",
    "start": "879420",
    "end": "885510"
  },
  {
    "text": "read access will be from memory but then the writes instead of going directly to storage and then causing this cache",
    "start": "885510",
    "end": "892050"
  },
  {
    "text": "invalidation problem can go through the exact same item and all the concurrency issues of concurrent updates those",
    "start": "892050",
    "end": "897990"
  },
  {
    "text": "issues disappear because all the writes will be routed for the same piece of code that executes in single threaded",
    "start": "897990",
    "end": "903329"
  },
  {
    "text": "manner and and talk to storage alone so in the simplest case you have",
    "start": "903329",
    "end": "910709"
  },
  {
    "start": "910000",
    "end": "910000"
  },
  {
    "text": "read-only so you have many many reads that you need to serve like a web page but by going to its storage only once",
    "start": "910709",
    "end": "917819"
  },
  {
    "text": "and lifted the storage it stated memory you only solving a lot of problem of latency and throughput and reduce load",
    "start": "917819",
    "end": "924810"
  },
  {
    "text": "any database without introducing a caching tier like memcache the Redis or what have you so read through is when",
    "start": "924810",
    "end": "932790"
  },
  {
    "text": "you write through that grain into the state so presumably you have mostly",
    "start": "932790",
    "end": "938220"
  },
  {
    "text": "but some rights in this case you get all the benefits of read-only and you only pay for rights when you need to",
    "start": "938220",
    "end": "944750"
  },
  {
    "text": "interestingly enough if you think it this is trivial but this",
    "start": "944750",
    "end": "950360"
  },
  {
    "text": "this fact that you remove a concurrency on the right axis is actually very powerful when you use key value stores",
    "start": "950360",
    "end": "957210"
  },
  {
    "text": "with the attack protection and things like that we had an example where one described services you got great",
    "start": "957210",
    "end": "964440"
  },
  {
    "text": "benefits on performance and costs reducing the cost because they eliminated all the right conflicts",
    "start": "964440",
    "end": "969510"
  },
  {
    "text": "they've been processing telemetry and aggregating story into an azure table and because they were coming to",
    "start": "969510",
    "end": "975360"
  },
  {
    "text": "different front ends on being processed and try to try to update a row in the table and yet I eat tag by relation",
    "start": "975360",
    "end": "982260"
  },
  {
    "text": "because some other code already updated so you need to reread reply and retry and then the other guy is trying to play",
    "start": "982260",
    "end": "987540"
  },
  {
    "text": "the same thing there are links based cache essentially eliminate this problem altogether so they get to zero or right",
    "start": "987540",
    "end": "994380"
  },
  {
    "text": "conflicts effectively in case there is no failure and then if you want you can also do right behind if you can afford",
    "start": "994380",
    "end": "1001250"
  },
  {
    "text": "to infrequent to lose some of the rights in case of an hardware failure in network or availability issues like you",
    "start": "1001250",
    "end": "1006980"
  },
  {
    "text": "can write say every minute or every and number of updates or some combination thereof by just using the timer and say",
    "start": "1006980",
    "end": "1013550"
  },
  {
    "text": "hey accumulate writes and Android and periodically begin reducing load the",
    "start": "1013550",
    "end": "1020090"
  },
  {
    "text": "storage system if we put it into the catalog",
    "start": "1020090",
    "end": "1026589"
  },
  {
    "start": "1022000",
    "end": "1022000"
  },
  {
    "text": "terminology hope this font is a little bit larger can you read it no yes No",
    "start": "1026589",
    "end": "1034220"
  },
  {
    "text": "so you say we can define two different interfaces one for read access and one",
    "start": "1034220",
    "end": "1039890"
  },
  {
    "text": "for write access and we can define semantic operations that we don't have to necessarily load everything we can say give me just details or all the",
    "start": "1039890",
    "end": "1048260"
  },
  {
    "text": "information or key data so we can program in this kind of object-oriented way or we have this object and has",
    "start": "1048260",
    "end": "1053870"
  },
  {
    "text": "methods and you can do semantic operations in a comparative talking to key value store we say give me value of",
    "start": "1053870",
    "end": "1060350"
  },
  {
    "text": "this key thank you you have to translate it yourself here everything behaves like an object and if you see here in real",
    "start": "1060350",
    "end": "1068000"
  },
  {
    "text": "example you just have a couple lines to call to get data and couple lines to write data and you don't have to worry",
    "start": "1068000",
    "end": "1074780"
  },
  {
    "text": "whether the data is loaded to cache or not or whether it's it storage it's all automatic and when you implement this",
    "start": "1074780",
    "end": "1081170"
  },
  {
    "text": "code it's equally simple you just need to put this data in either return the",
    "start": "1081170",
    "end": "1087020"
  },
  {
    "text": "state or put it and then write to storage and it's very trivial code I",
    "start": "1087020",
    "end": "1092180"
  },
  {
    "text": "would argue so even though we refer to this pattern is smart cache it's just",
    "start": "1092180",
    "end": "1097540"
  },
  {
    "text": "the case where we couldn't come up with a better name you could call the active objects or distribute object but those",
    "start": "1097540",
    "end": "1103210"
  },
  {
    "text": "terms were tainted essentially or abused over decades so we didn't call them that",
    "start": "1103210",
    "end": "1108680"
  },
  {
    "text": "but effectively you have this active entities that have their incarnation",
    "start": "1108680",
    "end": "1114530"
  },
  {
    "text": "cycles or you can get activated on servers in your cluster and they live",
    "start": "1114530",
    "end": "1119540"
  },
  {
    "text": "there for when they need it and disappear they always addressable you don't have to take care of loading them",
    "start": "1119540",
    "end": "1125450"
  },
  {
    "text": "into memory and removing them from memory and it's actually the most popular pattern and that's sort of a",
    "start": "1125450",
    "end": "1131180"
  },
  {
    "text": "foundation for a lot of the services that people build on top so that's like I would suggest even though we call it",
    "start": "1131180",
    "end": "1137330"
  },
  {
    "text": "smart cache it's much bigger than that in reality in this case we persisting data",
    "start": "1137330",
    "end": "1145010"
  },
  {
    "text": "persistent state as is but as John would argue that's not necessarily the best",
    "start": "1145010",
    "end": "1151430"
  },
  {
    "text": "solution to always save update and he's gonna talk about the event sourcing option yeah so this is probably a good",
    "start": "1151430",
    "end": "1158510"
  },
  {
    "start": "1155000",
    "end": "1155000"
  },
  {
    "text": "time to tell Sam that decom is not a good name for this better right so we resisted the idea of doing",
    "start": "1158510",
    "end": "1168240"
  },
  {
    "text": "that anyway so we've we've had a whole bunch",
    "start": "1168240",
    "end": "1173550"
  },
  {
    "text": "of problems that we've figured out over time in terms of scale with updating",
    "start": "1173550",
    "end": "1179430"
  },
  {
    "text": "state and as a functional programmer every time I see a shared mutable state I have a problem now clearly you know",
    "start": "1179430",
    "end": "1187980"
  },
  {
    "text": "audience is gonna grade to great lengths to make sure that the state writing and mutation happens in a",
    "start": "1187980",
    "end": "1196320"
  },
  {
    "text": "serial fashion so I get the guarantee that only one thing can actually change the state at any given time and with the",
    "start": "1196320",
    "end": "1201930"
  },
  {
    "text": "smart cash pattern I can actually pull stuff back but I still have a problem with that because I lost context why did",
    "start": "1201930",
    "end": "1209670"
  },
  {
    "text": "the state change you've tried you've tracked the fact that state has changed but I actually don't know why and I and",
    "start": "1209670",
    "end": "1216930"
  },
  {
    "text": "it turns out that in in the business in the business world a great deal of",
    "start": "1216930",
    "end": "1224210"
  },
  {
    "text": "secondary information can be derived from analyzing the events trains that caused the chase state to change over",
    "start": "1224210",
    "end": "1231570"
  },
  {
    "text": "time which is why when you put something into an amazon shopping cart and take it out",
    "start": "1231570",
    "end": "1239030"
  },
  {
    "text": "they can actually predict hey it's the 14th of the month you're probably",
    "start": "1239030",
    "end": "1244110"
  },
  {
    "text": "blowing budget you really want this thing you're likely to buy it in the next two weeks they can actually derive",
    "start": "1244110",
    "end": "1251070"
  },
  {
    "text": "that information whereas if you hadn't had the event stream in place what would",
    "start": "1251070",
    "end": "1256380"
  },
  {
    "text": "have happened is all that would have showed up in the database was the updated you know shopping cart so to",
    "start": "1256380",
    "end": "1266040"
  },
  {
    "text": "prevent that kind of thing from happening we have an event so the sourcing mechanism now at this point",
    "start": "1266040",
    "end": "1273810"
  },
  {
    "text": "things are going to get a little hand wavy and the reason they're going to get a little hand wavy is because we are",
    "start": "1273810",
    "end": "1280110"
  },
  {
    "text": "going to augment not just the Orleans pattern but progressively going forward",
    "start": "1280110",
    "end": "1286920"
  },
  {
    "text": "we're going to update the type system that c-sharp uses and",
    "start": "1286920",
    "end": "1292160"
  },
  {
    "text": "eventually extend the language itself to be able to to support more complex patterns right so the park is going to",
    "start": "1292160",
    "end": "1299310"
  },
  {
    "text": "get a little bit complex at this point here's so think about what it means to",
    "start": "1299310",
    "end": "1305640"
  },
  {
    "text": "store an event that is going to change state well the event has got to be a",
    "start": "1305640",
    "end": "1311100"
  },
  {
    "text": "type of some kind and there may be a bunch of",
    "start": "1311100",
    "end": "1316550"
  },
  {
    "text": "specializations of that type based on the business event so for example",
    "start": "1317180",
    "end": "1322610"
  },
  {
    "text": "let's think of a bank account and you can credit money and you can debit money",
    "start": "1322610",
    "end": "1327720"
  },
  {
    "text": "both of those are events and we have to somehow formalize the relationship between the event the thing that is",
    "start": "1327720",
    "end": "1335100"
  },
  {
    "text": "changing based on the application of the event and to make sure that we don't have random things being passed off as",
    "start": "1335100",
    "end": "1342060"
  },
  {
    "text": "events you have to somehow contain the structure of the event into a type so",
    "start": "1342060",
    "end": "1347280"
  },
  {
    "text": "think of T event as an enum four types except that it's a little bit more like an enum on steroids not just on values",
    "start": "1347280",
    "end": "1354930"
  },
  {
    "text": "but on types themselves so people they have sharp community or any of the functional programming community will",
    "start": "1354930",
    "end": "1361020"
  },
  {
    "text": "recognize the event as a discriminated Union type which doesn't exist as a fundamental building block in session",
    "start": "1361020",
    "end": "1367700"
  },
  {
    "text": "we're going to fix that problem in a bit in fact we have fixed the problem in the patterns you'll find that there's",
    "start": "1367700",
    "end": "1373740"
  },
  {
    "text": "actually a pattern for creating this community Union types and we use that for the event right but in the pinch you",
    "start": "1373740",
    "end": "1381780"
  },
  {
    "text": "can actually use the F sharp type itself you can define your TF and type in a library with that shop and have a",
    "start": "1381780",
    "end": "1387750"
  },
  {
    "text": "succinct way of defining what that looks like now the green state is another",
    "start": "1387750",
    "end": "1392880"
  },
  {
    "text": "interesting piece here because if you think about events touring we're storing events a list of events that affect the",
    "start": "1392880",
    "end": "1399750"
  },
  {
    "text": "grain state so we have to somehow augment the information about the grain state to say hey this particular event",
    "start": "1399750",
    "end": "1407550"
  },
  {
    "text": "changes me in this particular way where you're going to get that information from so you have to bring that",
    "start": "1407550",
    "end": "1412860"
  },
  {
    "text": "information in as well so we have to make sure that the grain States not just any old state anymore it's a state that",
    "start": "1412860",
    "end": "1419880"
  },
  {
    "text": "has an implementation of a method and that method is specified in that I can",
    "start": "1419880",
    "end": "1425400"
  },
  {
    "text": "apply that it's kind of a cute name simply because your stick in front of it but it's really I'm capable of consuming",
    "start": "1425400",
    "end": "1433019"
  },
  {
    "text": "an event and changing my own state right so",
    "start": "1433019",
    "end": "1439129"
  },
  {
    "text": "again fontsize sorry but really what you're doing here is an example and I'm",
    "start": "1439129",
    "end": "1445080"
  },
  {
    "text": "gonna show an example of a credit and a debit we have a bank account grain that",
    "start": "1445080",
    "end": "1450659"
  },
  {
    "text": "we pulled out and we're going to show the account state by just looking at all the events that have actually happened",
    "start": "1450659",
    "end": "1457159"
  },
  {
    "text": "but then we call credit amount and it should change the balance but not just",
    "start": "1457159",
    "end": "1462720"
  },
  {
    "text": "change the balance but also add on the fact that it recorded that it changed the balance because of a credit and",
    "start": "1462720",
    "end": "1468980"
  },
  {
    "text": "those the the sequence of events over here will actually land up accumulating",
    "start": "1468980",
    "end": "1475860"
  },
  {
    "text": "over time I'll be happy to show you the code for",
    "start": "1475860",
    "end": "1482149"
  },
  {
    "text": "what the event actually looks like but it's really really really complex",
    "start": "1482149",
    "end": "1488610"
  },
  {
    "text": "anesthesia it's four lines in F sharp well it's about two hundred and C",
    "start": "1488610",
    "end": "1495169"
  },
  {
    "text": "so C Leone is smiling if you if you think the font size is small on this one",
    "start": "1495169",
    "end": "1501570"
  },
  {
    "text": "you'll be much worse if we do this so just take it from me that the concept",
    "start": "1501570",
    "end": "1506639"
  },
  {
    "text": "you have to realize is that now we are really talking about encapsulating intent in a type that's",
    "start": "1506639",
    "end": "1513419"
  },
  {
    "text": "your event type and encapsulating the ability to consume instances of that event and change your",
    "start": "1513419",
    "end": "1521789"
  },
  {
    "text": "own state and that's the bit that actually implements the I can apply",
    "start": "1521789",
    "end": "1527250"
  },
  {
    "text": "event okay those are the two fundamental pieces that allow us to build this complex pattern",
    "start": "1527250",
    "end": "1533179"
  },
  {
    "text": "I'm going to go on a little bit and talk about something that everyone asks me",
    "start": "1533179",
    "end": "1539840"
  },
  {
    "text": "all right now we've managed to put stuff in",
    "start": "1539840",
    "end": "1544879"
  },
  {
    "text": "into some kind of an object store we've managed to read it out so we have the",
    "start": "1544879",
    "end": "1550049"
  },
  {
    "text": "ability to do cataloging type of thing using that smart cage pattern and",
    "start": "1550049",
    "end": "1556159"
  },
  {
    "text": "registry I can put things on same I can say all shirts my size that a pink in",
    "start": "1556159",
    "end": "1562830"
  },
  {
    "text": "color 20% off I can do that by basically creating a registry for the shirts that",
    "start": "1562830",
    "end": "1568770"
  },
  {
    "text": "fit my requirement and then through that through that registry go and get all the",
    "start": "1568770",
    "end": "1575430"
  },
  {
    "text": "items and update some state associated with it right so if you think about it that's an that's a pattern that we can",
    "start": "1575430",
    "end": "1581910"
  },
  {
    "text": "already do but how do I report on these things people asked the question about how do I",
    "start": "1581910",
    "end": "1588990"
  },
  {
    "text": "find out an ad hoc query select star from and it turns out that's a difficult",
    "start": "1588990",
    "end": "1595980"
  },
  {
    "text": "problem to solve because we've kind of sacrificed that for the ability to talk about the",
    "start": "1595980",
    "end": "1602520"
  },
  {
    "text": "individual units of state and individual access to that state so because of that",
    "start": "1602520",
    "end": "1608970"
  },
  {
    "text": "we now it's still a valid use case it's still absolutely essential that we want",
    "start": "1608970",
    "end": "1614040"
  },
  {
    "text": "to be able to say for example figure out how much money we made that's a very good thing right meaning you have to",
    "start": "1614040",
    "end": "1619170"
  },
  {
    "text": "figure out how much we sold and then how much money we got and how much stuff we had to give back in refunds and all of",
    "start": "1619170",
    "end": "1625110"
  },
  {
    "text": "the other stuff so that's important so we're not downplaying that we have a new pattern for it this is the first example",
    "start": "1625110",
    "end": "1632850"
  },
  {
    "text": "that you'll find in our pattern story where we take existing patterns and",
    "start": "1632850",
    "end": "1638780"
  },
  {
    "text": "compose them so if you take a registry pattern now and the events are same",
    "start": "1638780",
    "end": "1644100"
  },
  {
    "text": "pattern we can process the events in more than one place so the event comes",
    "start": "1644100",
    "end": "1650100"
  },
  {
    "text": "and changes the state of grain forward that event onto a registry that holds a",
    "start": "1650100",
    "end": "1655200"
  },
  {
    "text": "bunch of grains that were interested in and now we can aggregate by applying the event to the registered",
    "start": "1655200",
    "end": "1662610"
  },
  {
    "text": "aggregate if you get my drift right so we create a green which aggregates",
    "start": "1662610",
    "end": "1668070"
  },
  {
    "text": "events from a set of registered grains and then we can apply those event",
    "start": "1668070",
    "end": "1673590"
  },
  {
    "text": "processing things with a various set of strategy so for example the simplest strategy that we have is the one that is",
    "start": "1673590",
    "end": "1681360"
  },
  {
    "text": "lazy load you want a total I'll go and compute it for you right I'll compute it",
    "start": "1681360",
    "end": "1688920"
  },
  {
    "text": "for you by asking each of the grains to give me the set of events that I haven't seen already",
    "start": "1688920",
    "end": "1695210"
  },
  {
    "text": "and I will consume those apply that on to myself and then I will hand you a",
    "start": "1695210",
    "end": "1703049"
  },
  {
    "text": "total and that is now valid as of this time so inherent in this is the concept",
    "start": "1703049",
    "end": "1709860"
  },
  {
    "text": "of eventual consistency because stuff may be happening all the time but your total will be valid as of a",
    "start": "1709860",
    "end": "1717149"
  },
  {
    "text": "given point in time which if you really think about it that's all you get in a guarantee from a database anyway the",
    "start": "1717149",
    "end": "1724590"
  },
  {
    "text": "fact that you can do a select star from something and sum it up only tells you",
    "start": "1724590",
    "end": "1730590"
  },
  {
    "text": "the validity of that sum up unto the point when you did the query we get that",
    "start": "1730590",
    "end": "1735840"
  },
  {
    "text": "from here again this code is already there it's",
    "start": "1735840",
    "end": "1740850"
  },
  {
    "text": "written please go and look at it it's quite complex the purpose of this talk is to walk you through the possibilities",
    "start": "1740850",
    "end": "1747149"
  },
  {
    "text": "of what we can do the actual bit about actually aggregating stuff and playing",
    "start": "1747149",
    "end": "1753450"
  },
  {
    "text": "these events and so on and so forth the codes there and hopefully it's readable",
    "start": "1753450",
    "end": "1759980"
  },
  {
    "text": "there are very few for loops in it those people attend my talk yesterday",
    "start": "1760730",
    "end": "1766080"
  },
  {
    "text": "you know what I'm talking about so here's here's here's what the aggregate pattern looks like and it says hey I'm a",
    "start": "1766080",
    "end": "1774090"
  },
  {
    "text": "registry of tea grain so now I'm going to have references to a bunch of tea grains and each tea grain is an event",
    "start": "1774090",
    "end": "1781919"
  },
  {
    "text": "source screen that has a bunch of events that are gonna fire it and my grain state is going to be an",
    "start": "1781919",
    "end": "1789510"
  },
  {
    "text": "aggregate as well because I need to be able to handle the event so just by looking at the type signature of this",
    "start": "1789510",
    "end": "1796080"
  },
  {
    "text": "interface you can get a sense you can reason about what it's actually going to",
    "start": "1796080",
    "end": "1802590"
  },
  {
    "text": "do and as it turns out we have to introduce this concept of a timestamp to value because we actually care about",
    "start": "1802590",
    "end": "1808860"
  },
  {
    "text": "when the events come in so that we only play the events one at a time and",
    "start": "1808860",
    "end": "1814460"
  },
  {
    "text": "once at most once and we're able to do this so again the implementation is",
    "start": "1814460",
    "end": "1822620"
  },
  {
    "text": "fairly straightforward but this is interesting because I want to just show you what it looks like build the drain",
    "start": "1822620",
    "end": "1829679"
  },
  {
    "start": "1823000",
    "end": "1823000"
  },
  {
    "text": "state class to implement I can apply event and in this case the apply event",
    "start": "1829679",
    "end": "1835370"
  },
  {
    "text": "effectively does a pattern match on the various operations that come from the",
    "start": "1835370",
    "end": "1841820"
  },
  {
    "text": "discriminated Union I was talking about and you only need to provide the bit",
    "start": "1841820",
    "end": "1847350"
  },
  {
    "text": "that says please add an amount when I want to credit and subtract an effect this is all the business logic",
    "start": "1847350",
    "end": "1856799"
  },
  {
    "text": "that you really need to write and you can even unit test those bits",
    "start": "1856799",
    "end": "1862429"
  },
  {
    "text": "independently so with that with the kind of composite patterns that we have now",
    "start": "1862429",
    "end": "1867900"
  },
  {
    "text": "you can actually build a fairly sophisticated system with minimal amount of clutter",
    "start": "1867900",
    "end": "1874620"
  },
  {
    "text": "from your site and that's the goal of what we want to use orleans for is to be able to say hey don't think about it as",
    "start": "1874620",
    "end": "1881669"
  },
  {
    "text": "a distributed sea nor think about it as reactivating a green on a remote server and all of that what do you really want",
    "start": "1881669",
    "end": "1888179"
  },
  {
    "text": "is I have a bunch of bank accounts and I want to keep a total that's what creating the bank account",
    "start": "1888179",
    "end": "1895230"
  },
  {
    "text": "looks like and that's what aggregating it looks like that's really all that we",
    "start": "1895230",
    "end": "1900330"
  },
  {
    "text": "need to worry about in fact that's all you have to provide this you will definitely not be agreed",
    "start": "1900330",
    "end": "1906870"
  },
  {
    "text": "because I could read it but I'll just walk you through what's happening you get the account aggregate you get a",
    "start": "1906870",
    "end": "1913350"
  },
  {
    "text": "bunch of grains there are ten of them in our system so you get a whole bunch of grains here and you register the grain",
    "start": "1913350",
    "end": "1919950"
  },
  {
    "text": "because that's what you do with there with this this is now behaving like a registry credit a hundred dollars to each of the",
    "start": "1919950",
    "end": "1927360"
  },
  {
    "text": "accounts and then read the balance from the aggregate and magically in the",
    "start": "1927360",
    "end": "1933450"
  },
  {
    "text": "background because you're going through the registry at this point the aggregate",
    "start": "1933450",
    "end": "1939360"
  },
  {
    "text": "value will go off and in the lazy strategy go and pull all the information",
    "start": "1939360",
    "end": "1944400"
  },
  {
    "text": "update itself and provide you the value and this value is now eventually",
    "start": "1944400",
    "end": "1950040"
  },
  {
    "text": "consistent so you can now add this lot another $100 for each of the accounts",
    "start": "1950040",
    "end": "1955770"
  },
  {
    "text": "and you'll find that this will actually land up being to the so this is a way of aggregating stuff",
    "start": "1955770",
    "end": "1964200"
  },
  {
    "text": "now one of the things that this is simple scalar aggregate there's nothing",
    "start": "1964200",
    "end": "1969660"
  },
  {
    "text": "that prevents the aggregate from being a vector so you can actually keep track of other grains so you can say you know you",
    "start": "1969660",
    "end": "1976530"
  },
  {
    "text": "can get a multitude of rows you can aggregate down to a list of",
    "start": "1976530",
    "end": "1982650"
  },
  {
    "text": "things and therefore at this point we have if you think about it",
    "start": "1982650",
    "end": "1990470"
  },
  {
    "start": "1989000",
    "end": "1989000"
  },
  {
    "text": "implemented an object store just to be a platform with minimal code",
    "start": "1990470",
    "end": "1996060"
  },
  {
    "text": "that you need to write to make it work we have the objects living in a scalable",
    "start": "1996060",
    "end": "2003800"
  },
  {
    "text": "way we have thread safety safety guarantees to make sure that you have",
    "start": "2003800",
    "end": "2009400"
  },
  {
    "text": "concurrency management you have the ability to eventually you compute",
    "start": "2009400",
    "end": "2016280"
  },
  {
    "text": "aggregates with the eventual consistency you can create materialized views those",
    "start": "2016280",
    "end": "2021350"
  },
  {
    "text": "are the standing queries that that those that I will get plus if it could be lets you set up and you can actually build a",
    "start": "2021350",
    "end": "2029840"
  },
  {
    "text": "fairly sophisticated system without deviating too much from the",
    "start": "2029840",
    "end": "2034880"
  },
  {
    "text": "domain model that you would have come up with when you did your domain driven design to begin with the single",
    "start": "2034880",
    "end": "2041450"
  },
  {
    "text": "anti-pattern in this whole thing is the ad hoc query so if you feel the deep",
    "start": "2041450",
    "end": "2046850"
  },
  {
    "text": "desire to have an ad hoc query the first question you should ask is why because",
    "start": "2046850",
    "end": "2052610"
  },
  {
    "text": "at the end of the day even in a traditional application you are not giving a sequel interface to your",
    "start": "2052610",
    "end": "2058310"
  },
  {
    "text": "applications database you're only using the ad hoc query to make it easy for you to do development",
    "start": "2058310",
    "end": "2065649"
  },
  {
    "text": "well you can do the development internally it's a little bit more work",
    "start": "2065650",
    "end": "2071120"
  },
  {
    "text": "you have to formalize what kind of views you want and so on but the building pieces for the object store are already",
    "start": "2071120",
    "end": "2078800"
  },
  {
    "text": "here now we have spent about 35 minutes going from a very",
    "start": "2078800",
    "end": "2084980"
  },
  {
    "text": "very trivial a single object store all the way down to a scalable object",
    "start": "2084980",
    "end": "2091540"
  },
  {
    "text": "database and I appreciate the fact that the levels of complexity that you've",
    "start": "2091540",
    "end": "2097060"
  },
  {
    "text": "been asked to simulate significant so I'm going to take a pause here and see",
    "start": "2097060",
    "end": "2102610"
  },
  {
    "text": "if there's anyone who has any questions because I think we will we will address these questions while you still have",
    "start": "2102610",
    "end": "2109330"
  },
  {
    "text": "them fresh in your mind does anyone have any issues they want to discuss",
    "start": "2109330",
    "end": "2114960"
  },
  {
    "text": "that's a brilliant question so the question that was asked was does the",
    "start": "2132720",
    "end": "2137740"
  },
  {
    "text": "aggregate pattern introduce a bottleneck because now you are",
    "start": "2137740",
    "end": "2142830"
  },
  {
    "text": "processing updates through the aggregate the answer is actually",
    "start": "2142830",
    "end": "2148560"
  },
  {
    "text": "it depends on the strategy that you pick so that the pattern that we have allows",
    "start": "2148560",
    "end": "2154450"
  },
  {
    "text": "you to update and send events to the greens themselves that's what the traditional events closing model was",
    "start": "2154450",
    "end": "2161700"
  },
  {
    "text": "we then queried the grains for the events that we haven't seen yet",
    "start": "2161700",
    "end": "2167670"
  },
  {
    "text": "on-demand so there's no throughput bottleneck when you're writing stuff we",
    "start": "2167670",
    "end": "2173890"
  },
  {
    "text": "don't broadcast the the events to the aggregate at the time when you ask for",
    "start": "2173890",
    "end": "2180730"
  },
  {
    "text": "the total then we say hey let's see how fresh my total is starting from then",
    "start": "2180730",
    "end": "2187140"
  },
  {
    "text": "till now has any of the grains that I've referenced do they have any events that haven't",
    "start": "2187140",
    "end": "2194530"
  },
  {
    "text": "processed",
    "start": "2194530",
    "end": "2196770"
  },
  {
    "text": "right so there's a strategy pattern that's built in called the lazy loaded",
    "start": "2202920",
    "end": "2208570"
  },
  {
    "text": "strategy which does that for you now you can replace that with a more eager way of doing it there are actually far more",
    "start": "2208570",
    "end": "2215710"
  },
  {
    "text": "sophisticated approaches that you can take for example when Sergei talks about streaming you can actually publish the",
    "start": "2215710",
    "end": "2222700"
  },
  {
    "text": "changes that come to you and consume them as and when you like so you",
    "start": "2222700",
    "end": "2227980"
  },
  {
    "text": "can say for example have a thread that runs off and every 10 seconds keep your data up to date right if that's all",
    "start": "2227980",
    "end": "2234910"
  },
  {
    "text": "you're interested in that's all you'll need to do but the decoupling of the",
    "start": "2234910",
    "end": "2240580"
  },
  {
    "text": "computation of the aggregate from the writing of the individual events into",
    "start": "2240580",
    "end": "2247540"
  },
  {
    "text": "the grains that's the fundamental reason why the stuff works so we actually deke up with",
    "start": "2247540",
    "end": "2254380"
  },
  {
    "text": "those and separate them out and make them two separate problems updating the",
    "start": "2254380",
    "end": "2259540"
  },
  {
    "text": "state via saving events is one story computing the total in some form either",
    "start": "2259540",
    "end": "2266310"
  },
  {
    "text": "proactively or reactively or lazily or whatever that's actually a separate",
    "start": "2266310",
    "end": "2271450"
  },
  {
    "text": "concern and we had the ability just plug whatever strategy you want in there to be able to there is also another pattern",
    "start": "2271450",
    "end": "2277750"
  },
  {
    "text": "which we're not covering and reduce pattern where the aggregation can be done in layers so instead of having one",
    "start": "2277750",
    "end": "2283210"
  },
  {
    "text": "aggregate at half like at first later I could get a second layer aggregator and that's very scalable because instead of",
    "start": "2283210",
    "end": "2288220"
  },
  {
    "text": "going to one you pulling it pushing you go through several layers of aggregation just we're not talking about in this",
    "start": "2288220",
    "end": "2295090"
  },
  {
    "text": "talk but it's there and then I release can't reap repo it's also there",
    "start": "2295090",
    "end": "2302069"
  },
  {
    "text": "so um one of the recommendations in event sourcing is actually taking a",
    "start": "2305109",
    "end": "2310939"
  },
  {
    "text": "snapshot every X events so you don't have to replay a million events is all",
    "start": "2310939",
    "end": "2316160"
  },
  {
    "text": "liens doing a similar thing so remember that all this stuff is not actually being done as a foundational piece of",
    "start": "2316160",
    "end": "2323479"
  },
  {
    "text": "our lanes the the reason we have this talk is because all means is extraordinarily scalable it's totally",
    "start": "2323479",
    "end": "2329630"
  },
  {
    "text": "powerful and people build all kinds of cool applications on top of it but when you want to write applications you'll",
    "start": "2329630",
    "end": "2335239"
  },
  {
    "text": "find that you will have to replicate the same similar patterns so what we are talking about is actually a level above",
    "start": "2335239",
    "end": "2341209"
  },
  {
    "text": "the fundamental set of orleans right so in terms of the questions that you raised that's a separate strategy for",
    "start": "2341209",
    "end": "2346969"
  },
  {
    "text": "creating the materialized view you can have the materialized view update itself every ten minutes and if ten minutes",
    "start": "2346969",
    "end": "2354499"
  },
  {
    "text": "resolution is all you need well you don't even have to go and ask at that point you just take whatever aggregate",
    "start": "2354499",
    "end": "2360349"
  },
  {
    "text": "value having passed that along and knowing full well that in ten minutes someone else will come and process all",
    "start": "2360349",
    "end": "2365719"
  },
  {
    "text": "the events that have happened since then the pattern that we've shown you is an example pattern how to create a lazily",
    "start": "2365719",
    "end": "2373069"
  },
  {
    "text": "loaded aggregate the fundamental interface that we have here will not",
    "start": "2373069",
    "end": "2379429"
  },
  {
    "text": "change depending on which pattern which strategy you use to get the aggregate",
    "start": "2379429",
    "end": "2385069"
  },
  {
    "text": "plane this specific aggregate Green turns out to be a lazily evaluated but you can most certainly",
    "start": "2385069",
    "end": "2393189"
  },
  {
    "text": "have to keep the materialized views up-to-date any other questions",
    "start": "2393189",
    "end": "2400749"
  },
  {
    "text": "sorry other events actually sort of persisted with the grain historically can you go back and replace them that's",
    "start": "2400749",
    "end": "2407929"
  },
  {
    "text": "an excellent question so this is one of the reasons why we use composite patterns so if you look at the aggregate",
    "start": "2407929",
    "end": "2415429"
  },
  {
    "text": "grain there are composite patterns in this so we have a system now where the",
    "start": "2415429",
    "end": "2422029"
  },
  {
    "text": "grain state of the brain itself is going to be able to process its events so what",
    "start": "2422029",
    "end": "2429319"
  },
  {
    "text": "did we do when we wrote the event sourcing pattern we actually said hey",
    "start": "2429319",
    "end": "2434479"
  },
  {
    "text": "the grain state that you want to you want to store information about a shirt fine I'll do that",
    "start": "2434479",
    "end": "2440579"
  },
  {
    "text": "but I will also store all the things that happen to that went so in the case",
    "start": "2440579",
    "end": "2445630"
  },
  {
    "text": "with the example we had a bank balance with and all the credits and debits and the Augmented green that we've generated",
    "start": "2445630",
    "end": "2453760"
  },
  {
    "text": "for you when you say this is in the aggregate Green takes care of storing the events and persisting it so you",
    "start": "2453760",
    "end": "2460720"
  },
  {
    "text": "don't have to worry about any of that so as far as you are concerned you send an event by making a method call please",
    "start": "2460720",
    "end": "2467500"
  },
  {
    "text": "credit me $100 or whatever it is internally what that translates to is I",
    "start": "2467500",
    "end": "2473170"
  },
  {
    "text": "will instantiate an instance of the event called credit with the argument of",
    "start": "2473170",
    "end": "2479559"
  },
  {
    "text": "a hundred time stamp it with now store it in the sequence and when the",
    "start": "2479559",
    "end": "2486190"
  },
  {
    "text": "aggregate comes and says please give me all the events I haven't seen I know which ones to pull out and give back so",
    "start": "2486190",
    "end": "2492670"
  },
  {
    "text": "the storage of the events and all of that all of that stuff is abstracted away for you and implemented in the",
    "start": "2492670",
    "end": "2498220"
  },
  {
    "text": "pattern so you can use the pattern as is so you can extend it to how to be whatever you want but this is one of",
    "start": "2498220",
    "end": "2504010"
  },
  {
    "text": "those powerful patterns that you can use it's the time chugging we have 15 minutes",
    "start": "2504010",
    "end": "2510150"
  },
  {
    "text": "can we hold your question till the end excellent thank you actually at this point is a good time to",
    "start": "2510150",
    "end": "2517000"
  },
  {
    "text": "actually stop and switch gears entirely so I'm going to ask",
    "start": "2517000",
    "end": "2522690"
  },
  {
    "text": "Sergey to talk about it so far we talked a lot about the",
    "start": "2522690",
    "end": "2528010"
  },
  {
    "text": "managing state and you created this object store but what we didn't talk about is the relations and in this data",
    "start": "2528010",
    "end": "2533349"
  },
  {
    "text": "so we kind of have this top-down view you have individual items you you go and call them but in reality in many",
    "start": "2533349",
    "end": "2540279"
  },
  {
    "text": "scenarios you have relations like in this picture it's a multiplayer game like a graph where it shows players that",
    "start": "2540279",
    "end": "2547779"
  },
  {
    "text": "have shortly relations for game sessions but longer-lived relations is part of a client or a group of friends whatever in",
    "start": "2547779",
    "end": "2555520"
  },
  {
    "text": "this release model it's very easy to very initial to model because this reference to your grain that you get",
    "start": "2555520",
    "end": "2560680"
  },
  {
    "text": "from the system it's actually just identity so you can easily save it as part of your state and establish this",
    "start": "2560680",
    "end": "2566650"
  },
  {
    "text": "age would be a relation with with another grain and because that other grain doesn't",
    "start": "2566650",
    "end": "2572170"
  },
  {
    "text": "need to be in memory when you have relations with it that makes it very easy to program this is where the virtual actor model works much better",
    "start": "2572170",
    "end": "2579220"
  },
  {
    "text": "than the traditional approach to actor model with the kuru lank akha where you have to have a physical reference to all",
    "start": "2579220",
    "end": "2585430"
  },
  {
    "text": "these objects so in order to have a graph of relations they all have to be in memory and have physical references",
    "start": "2585430",
    "end": "2591490"
  },
  {
    "text": "or your eyes or what have you there and this actually is a very popular I",
    "start": "2591490",
    "end": "2597400"
  },
  {
    "text": "think that's used in production in many services where in gaming the main but if",
    "start": "2597400",
    "end": "2602620"
  },
  {
    "text": "I switch to this slide nothing is changed except for I change words they put in those in those boxes",
    "start": "2602620",
    "end": "2610810"
  },
  {
    "text": "now I have devices IOT devices or sensors and controllers and in rooms",
    "start": "2610810",
    "end": "2616120"
  },
  {
    "text": "where they belonged it's the same kind of problem but now it's it's a much more",
    "start": "2616120",
    "end": "2621280"
  },
  {
    "text": "static graph than than the game graph where a relation is changed that's why I like when we talk about social networks",
    "start": "2621280",
    "end": "2628060"
  },
  {
    "text": "people immediately jump into Facebook Twitter but in reality this network of relations in graphics is much more",
    "start": "2628060",
    "end": "2633790"
  },
  {
    "text": "general problem and it's very easy just all here but but also if you look at it",
    "start": "2633790",
    "end": "2638860"
  },
  {
    "text": "you kind of get back this object-oriented feeling of your program which we sort of give up early on say oh",
    "start": "2638860",
    "end": "2646210"
  },
  {
    "text": "yeah everything has to be a service oriented so and all kinds of variations",
    "start": "2646210",
    "end": "2651570"
  },
  {
    "text": "microservices they all kind of push you to think of your program from the services perspective but as developers",
    "start": "2651570",
    "end": "2658180"
  },
  {
    "text": "the natural way to model things is through objects and narrow relations and this distributed network of objects or",
    "start": "2658180",
    "end": "2664990"
  },
  {
    "text": "you see with network of entities sort of gives you that power back and that sanity of dealing with objects and",
    "start": "2664990",
    "end": "2670690"
  },
  {
    "text": "relations like a graph of nodes and edges between them",
    "start": "2670690",
    "end": "2675780"
  },
  {
    "text": "and because of the virtual actor virtual actor",
    "start": "2675780",
    "end": "2681480"
  },
  {
    "text": "Natura berlin's you can program as if all of your actors are in memory so you",
    "start": "2681480",
    "end": "2686620"
  },
  {
    "text": "have this kind of infinite virtual naming space or address space that you can program without worrying about do",
    "start": "2686620",
    "end": "2692350"
  },
  {
    "text": "you have enough memory or they need to always something to unload so you get automatic resource management and of course there",
    "start": "2692350",
    "end": "2699700"
  },
  {
    "text": "ant anti-patterns so if you have too small of a grains there too much connectivity so you need to send too",
    "start": "2699700",
    "end": "2705100"
  },
  {
    "text": "many messages we have to course of a grains they become bottlenecks because you trying to process all the stuff",
    "start": "2705100",
    "end": "2710590"
  },
  {
    "text": "there on the single within the single thread guarantee concerned so chatty communication in distribute system is",
    "start": "2710590",
    "end": "2717040"
  },
  {
    "text": "always pain another thing sort of orthogonal to that",
    "start": "2717040",
    "end": "2723760"
  },
  {
    "start": "2722000",
    "end": "2722000"
  },
  {
    "text": "is the early streaming feature which we added two or three years ago I think",
    "start": "2723760",
    "end": "2730020"
  },
  {
    "text": "what we show it so far was RPC style communication between actors or client",
    "start": "2730020",
    "end": "2735100"
  },
  {
    "text": "and actor where you get the reference so they make a call and get a task back which covers a lot of scenarios but then",
    "start": "2735100",
    "end": "2741040"
  },
  {
    "text": "in some cases you want to decouple producer and consumer or you want to make this messages this events to be",
    "start": "2741040",
    "end": "2746980"
  },
  {
    "text": "reliable because RPC may fail if you don't have a network connection if something happened if machine went down",
    "start": "2746980",
    "end": "2753730"
  },
  {
    "text": "with streaming that can go over a persistent queues you solve this problem because the moment I published and got a",
    "start": "2753730",
    "end": "2760210"
  },
  {
    "text": "confirmation that might then get written to a persistent queue I'm done it's it's the problem of the receiver of",
    "start": "2760210",
    "end": "2767230"
  },
  {
    "text": "subscriber to process it later so this is a very powerful feature that enables",
    "start": "2767230",
    "end": "2772570"
  },
  {
    "text": "a lot of scenarios like that back in in the energy case devices may ingest data into the queues and not worry about them",
    "start": "2772570",
    "end": "2779140"
  },
  {
    "text": "being processed they can a done their job as the queued events and the key",
    "start": "2779140",
    "end": "2784660"
  },
  {
    "text": "thing here is that there's no notion of logical stream so we call them virtual streams you have virtual actors with virtual streams so they all you can have",
    "start": "2784660",
    "end": "2792280"
  },
  {
    "text": "again infinite amount of them because it's just identity but physically they get multiplex over physical cues whether",
    "start": "2792280",
    "end": "2798340"
  },
  {
    "text": "you use AWS sqs or Kafka or even hub as your queues the under the covers get",
    "start": "2798340",
    "end": "2805000"
  },
  {
    "text": "multiplex or those physical pipes and here's an example of a streaming",
    "start": "2805000",
    "end": "2811570"
  },
  {
    "text": "analytics kind of case where I have grain that is explicitly told to",
    "start": "2811570",
    "end": "2817270"
  },
  {
    "text": "subscribe so it has this let me try to use this fancy laser pointer",
    "start": "2817270",
    "end": "2824820"
  },
  {
    "text": "so it's explicitly told to subscribe to a stream and pass the source stream and an identity of the source stream is a",
    "start": "2826440",
    "end": "2832750"
  },
  {
    "text": "good and identity of the alert stream so the I keep receiving events and process",
    "start": "2832750",
    "end": "2839050"
  },
  {
    "text": "them and if there is some condition is met like i exceeded threshold or I have five bad events and we didn't spend",
    "start": "2839050",
    "end": "2847060"
  },
  {
    "text": "every minute I need to raise an alert so to set it up when I call subscribe I get the stream provider in this case in just",
    "start": "2847060",
    "end": "2854260"
  },
  {
    "text": "the name of event hub provider and I get a stream for source stream so I pass the",
    "start": "2854260",
    "end": "2860080"
  },
  {
    "text": "ID and the name space device events and I subscribe this class that implements I",
    "start": "2860080",
    "end": "2866170"
  },
  {
    "text": "sink observer of device event so that's all I need to subscribe explicitly to a stream of events but they also get a",
    "start": "2866170",
    "end": "2873370"
  },
  {
    "text": "stream for alerts so I use the LR stream ID and a different namespace of streams",
    "start": "2873370",
    "end": "2879340"
  },
  {
    "text": "this is the stream where I'm gonna produce my alerts to do so when the event arrives this uh next async method",
    "start": "2879340",
    "end": "2885940"
  },
  {
    "text": "is called canna rx ish API I process this event and I get an alert and if",
    "start": "2885940",
    "end": "2892060"
  },
  {
    "text": "alert is set I just do on next async on the other stream that's my output and",
    "start": "2892060",
    "end": "2897670"
  },
  {
    "text": "it's kind of all I need to do to receive advance process them and I can run many of them in parallel so you can have this",
    "start": "2897670",
    "end": "2904120"
  },
  {
    "text": "one per machine and monitor and one for device for monitoring it's very easy",
    "start": "2904120",
    "end": "2909340"
  },
  {
    "text": "with this addressing scheme but then if you look on the alert side we use a",
    "start": "2909340",
    "end": "2916030"
  },
  {
    "text": "different feature here I apply this implicit stream subscription attribute which allows me not to subscribe",
    "start": "2916030",
    "end": "2922420"
  },
  {
    "text": "explicitly to a stream so this this grain class alert processor great it's already subscribed to streams within",
    "start": "2922420",
    "end": "2928840"
  },
  {
    "text": "this namespace device alerts remember we use in here to produce device alerts so",
    "start": "2928840",
    "end": "2933940"
  },
  {
    "text": "I'm associating this grain class with the namespace of streams and then these goods would map to a goose of grains and",
    "start": "2933940",
    "end": "2940120"
  },
  {
    "text": "my grain you can get activated right away so in my own activated sync which is kind of like a constructor of a grain",
    "start": "2940120",
    "end": "2946510"
  },
  {
    "text": "I set up a subscription it's because they cannot persist lambdas and then",
    "start": "2946510",
    "end": "2952240"
  },
  {
    "text": "when the event arise I can again process it and if condition is met I can do whatever I want they can make a call to",
    "start": "2952240",
    "end": "2958300"
  },
  {
    "text": "your web service I can write to database I can make a call to another grain so it's kind of freeform model",
    "start": "2958300",
    "end": "2965940"
  },
  {
    "text": "so why we build it so we needed this ability to process large streams of",
    "start": "2965940",
    "end": "2971890"
  },
  {
    "start": "2967000",
    "end": "2967000"
  },
  {
    "text": "advance a large number of streams of events with low latency and high throughput and it came from sort of",
    "start": "2971890",
    "end": "2978340"
  },
  {
    "text": "another set of Halo game scenarios were streaming a latest defense during the",
    "start": "2978340",
    "end": "2984100"
  },
  {
    "text": "game keep coming in from consoles into the cloud they need to be processed at the end of the game you need to show all",
    "start": "2984100",
    "end": "2990190"
  },
  {
    "text": "the statistics all the results like headshots and kill death ratio all of that at promotions if you calculate it",
    "start": "2990190",
    "end": "2996550"
  },
  {
    "text": "by the time the game is done so these calculations happen as events arrive and get processed in the grains and at the",
    "start": "2996550",
    "end": "3002670"
  },
  {
    "text": "end they just get quarried in return and there are many others many other",
    "start": "3002670",
    "end": "3008850"
  },
  {
    "text": "applications like detection is no different from credit card for detection because you see the patterns you follow",
    "start": "3008850",
    "end": "3015240"
  },
  {
    "text": "you monitor a particular credit card number you don't need to monitor all of them you can do this grain per credit",
    "start": "3015240",
    "end": "3021840"
  },
  {
    "text": "card number and seed events coming in and analyze their relations and then race alerts if you see things like that but",
    "start": "3021840",
    "end": "3029400"
  },
  {
    "text": "you can also apply streams for the aggregation where instead of signing data directly accordion you can just",
    "start": "3029400",
    "end": "3035790"
  },
  {
    "text": "publish it in the aggregation streaming and process them separately in decouple your event sourcing part from from",
    "start": "3035790",
    "end": "3042270"
  },
  {
    "text": "aggregation part so this covers kind of our touches at",
    "start": "3042270",
    "end": "3047490"
  },
  {
    "text": "least in larval state and some their relations but we haven't talked much about compute this is where John will",
    "start": "3047490",
    "end": "3055640"
  },
  {
    "text": "continue yeah so state machines they're actually",
    "start": "3055640",
    "end": "3061280"
  },
  {
    "start": "3056000",
    "end": "3056000"
  },
  {
    "text": "everywhere most of the code that we write they're actually concurrent state machines that",
    "start": "3061280",
    "end": "3069150"
  },
  {
    "text": "need to be run in a scalable way think about shopping cart let's go back to the",
    "start": "3069150",
    "end": "3075570"
  },
  {
    "text": "e-commerce thing each shopping cart is actually a state machine it's it's you",
    "start": "3075570",
    "end": "3082910"
  },
  {
    "text": "if the state if the shopping cart is in an empty state well checking out shouldn't really be allowed",
    "start": "3082910",
    "end": "3090240"
  },
  {
    "text": "you can abandon something that has something it's full and you can check it out if you want but you shouldn't check",
    "start": "3090240",
    "end": "3097140"
  },
  {
    "text": "out an antique shopping cart now this business rule for example is really something that should be modeled",
    "start": "3097140",
    "end": "3103690"
  },
  {
    "text": "somewhat formally as a state machine but usually gets modeled informally and the",
    "start": "3103690",
    "end": "3110829"
  },
  {
    "text": "source of most of our bugs actually comes from the ability to my inability to reason about these side effects that",
    "start": "3110829",
    "end": "3117760"
  },
  {
    "text": "are encoded implicitly in the code and that you have to then discover the",
    "start": "3117760",
    "end": "3122890"
  },
  {
    "text": "intent off by walking through the thing to see how did we even allow this to",
    "start": "3122890",
    "end": "3127900"
  },
  {
    "text": "happen right and anyone who's done stuff in this earth in the service arena knows",
    "start": "3127900",
    "end": "3133869"
  },
  {
    "text": "this is why logs exist and so you're sitting there mostly trying to do printf debugging on something that happened you",
    "start": "3133869",
    "end": "3140799"
  },
  {
    "text": "know in a server that sits in Sweden which you have no access to and you're",
    "start": "3140799",
    "end": "3146049"
  },
  {
    "text": "trying to reconstruct you know what killed the patient right we don't want",
    "start": "3146049",
    "end": "3151930"
  },
  {
    "text": "to do that be much easier if we had a formal way of actually managing state",
    "start": "3151930",
    "end": "3157619"
  },
  {
    "text": "within the context that allowed you to formally talk about it right and so one",
    "start": "3157619",
    "end": "3165099"
  },
  {
    "text": "of the approaches for this is typically I mean if we use",
    "start": "3165099",
    "end": "3170670"
  },
  {
    "text": "steepness micro-services and then manage the data in the implicit form to achieve",
    "start": "3171089",
    "end": "3179559"
  },
  {
    "text": "this ability or you could use the actor as in effect a stateful microservice",
    "start": "3179559",
    "end": "3186910"
  },
  {
    "text": "that had the logic built-in in any service nanus service nanus - - is",
    "start": "3186910",
    "end": "3193720"
  },
  {
    "text": "because whatever right and so",
    "start": "3193720",
    "end": "3198839"
  },
  {
    "text": "like I said we have now taken this pattern and come",
    "start": "3198839",
    "end": "3205150"
  },
  {
    "text": "up with an example of what that would look like and again I'm not going to show you the code itself it's really",
    "start": "3205150",
    "end": "3211779"
  },
  {
    "text": "horrendous in indicia because of the lack of discrimination unions we will see why that is in a minute but further",
    "start": "3211779",
    "end": "3218829"
  },
  {
    "text": "we've actually formalized the business logic of say a bank account is a toy bank card over here so let's say that",
    "start": "3218829",
    "end": "3226059"
  },
  {
    "text": "you have a bank account it's identified by an ID you're interested in its balance it can be the you know accepted",
    "start": "3226059",
    "end": "3234309"
  },
  {
    "text": "a deposit or a withdrawal or you can close it initially when you bring up a bank-owned",
    "start": "3234309",
    "end": "3240860"
  },
  {
    "text": "please don't put money into it it's a zero balance account right and if it's in zero balance then you put some money",
    "start": "3240860",
    "end": "3246950"
  },
  {
    "text": "in my deposit it becomes an active bank account or you can close the zero balance account and go to closed when",
    "start": "3246950",
    "end": "3254090"
  },
  {
    "text": "it's active we can deposit some more and it'll stay active if you withdraw depending on how much you withdrew it'll",
    "start": "3254090",
    "end": "3260900"
  },
  {
    "text": "either be an active or an overdrawn or a zero balance right and if you're",
    "start": "3260900",
    "end": "3266240"
  },
  {
    "text": "overdrawn please don't let them take any more money out of the thing the deadbeats have already taken the money out of the account you want to take some",
    "start": "3266240",
    "end": "3272690"
  },
  {
    "text": "more and depending on how much they deposit and either get sent back into grace or they stay overdrawn or we can",
    "start": "3272690",
    "end": "3280310"
  },
  {
    "text": "finally get to the point where there's zero balance and notice now that you can't close anything other than a zero",
    "start": "3280310",
    "end": "3286100"
  },
  {
    "text": "balance account now by embedding this kind of logic into the the formal",
    "start": "3286100",
    "end": "3292370"
  },
  {
    "text": "description of the business you've eliminated entire swathe of problems",
    "start": "3292370",
    "end": "3298820"
  },
  {
    "text": "this is a whole bunch of unit tests you never had to write write so of course you know people owe me is the dude so or",
    "start": "3298820",
    "end": "3308750"
  },
  {
    "text": "as an F sharp dude so my problem everything here is a type problem as far",
    "start": "3308750",
    "end": "3314090"
  },
  {
    "text": "as I'm concerned if you look at this that's a discriminative Union a message can be only one of those three things",
    "start": "3314090",
    "end": "3319100"
  },
  {
    "text": "that's a type the set of states is also discriminated Union can only be in one",
    "start": "3319100",
    "end": "3324830"
  },
  {
    "text": "of those four states that's also a type each message that is acceptable at a",
    "start": "3324830",
    "end": "3330950"
  },
  {
    "text": "given state that's also a type each return value that is possible when I",
    "start": "3330950",
    "end": "3336530"
  },
  {
    "text": "receive a message that's also type so now you've got a whole slew of",
    "start": "3336530",
    "end": "3341600"
  },
  {
    "text": "discriminated union types each of which four or five hundred lines of co-op code",
    "start": "3341600",
    "end": "3347450"
  },
  {
    "text": "so the faults really really couldn't be smaller when I show you what the code looks like right but you can actually",
    "start": "3347450",
    "end": "3354920"
  },
  {
    "text": "generate most of it so there will be another talk at some point in the future shortly where we have gone ahead and",
    "start": "3354920",
    "end": "3362150"
  },
  {
    "text": "built a tool that pauses this language and generates the Orleans green for you",
    "start": "3362150",
    "end": "3369040"
  },
  {
    "text": "but in the meanwhile you can actually go and see what that looks like and see why there is a need for a generator because",
    "start": "3369040",
    "end": "3375650"
  },
  {
    "text": "really what you want to do is what do I want to write when I want to create this bank account I want to write what does",
    "start": "3375650",
    "end": "3381830"
  },
  {
    "text": "it mean to do this when I deposit something what does it mean when I would",
    "start": "3381830",
    "end": "3388370"
  },
  {
    "text": "draw something how do I know which of these three values is returned that's",
    "start": "3388370",
    "end": "3393530"
  },
  {
    "text": "really the entire business logic of the application that I wanted right I don't want to worry about scale I don't want",
    "start": "3393530",
    "end": "3398600"
  },
  {
    "text": "to worry about where this object lives I don't worry about grains grain States none of this I am only interested in",
    "start": "3398600",
    "end": "3403880"
  },
  {
    "text": "writing six functions in this entire thing and I want to have the guarantee that I couldn't make a mistake and",
    "start": "3403880",
    "end": "3411760"
  },
  {
    "text": "with that motivation in mind you know we can actually build an audience grain",
    "start": "3411760",
    "end": "3418160"
  },
  {
    "text": "back-end that supports this behavior in a scalable way allows you to run 10,000 of these accounts in parallel if you",
    "start": "3418160",
    "end": "3424460"
  },
  {
    "text": "like manage each individual account state independently and concurrently and",
    "start": "3424460",
    "end": "3430580"
  },
  {
    "text": "allow you to interact with it in a sensible way so rather than show you how",
    "start": "3430580",
    "end": "3435710"
  },
  {
    "text": "it's done I'll show you how we use it because we're really really short on time at the moment so here's how I",
    "start": "3435710",
    "end": "3442250"
  },
  {
    "text": "create a bank account state machine and if I get this balance at this point I",
    "start": "3442250",
    "end": "3449180"
  },
  {
    "text": "would expect that it's zero and then I create a deposit of $100 I expect",
    "start": "3449180",
    "end": "3458120"
  },
  {
    "text": "it to be zero but now my state better be active which means that I should be able",
    "start": "3458120",
    "end": "3463880"
  },
  {
    "text": "to withdraw $20 from it and my state better be active and",
    "start": "3463880",
    "end": "3470350"
  },
  {
    "text": "if I try to close an active state machine what do I expect an exception I",
    "start": "3470350",
    "end": "3476000"
  },
  {
    "text": "expect not to be able to close that so if I had ran this code I would actually",
    "start": "3476000",
    "end": "3481250"
  },
  {
    "text": "get an invalid message returned as an exception saying I tried to close an",
    "start": "3481250",
    "end": "3486380"
  },
  {
    "text": "account which was it in zero balance State and I failed as I expected it and this whole thing comes with intelligence",
    "start": "3486380",
    "end": "3494050"
  },
  {
    "text": "because of the type system that's really the state that we are trying to aim towards right make developers productive",
    "start": "3494050",
    "end": "3501500"
  },
  {
    "text": "and give them the ability scalable applications so I'm gonna wrap",
    "start": "3501500",
    "end": "3507300"
  },
  {
    "text": "it up with just giving you an overview of the cross-cutting benefits of Arlen's",
    "start": "3507300",
    "end": "3512750"
  },
  {
    "start": "3508000",
    "end": "3508000"
  },
  {
    "text": "and we've talked about all of this stuff you can build very complex things with",
    "start": "3512750",
    "end": "3518040"
  },
  {
    "text": "it you can build things that require tools to generate the Orleans grain for you that's the story that I would like",
    "start": "3518040",
    "end": "3524250"
  },
  {
    "text": "to leave you with we have one of those examples in place so the goal behind it",
    "start": "3524250",
    "end": "3530160"
  },
  {
    "text": "is to let the system manage the lifecycle of the actors manage your axis in a type safe way give",
    "start": "3530160",
    "end": "3537630"
  },
  {
    "text": "you a natural idiomatic c-sharp way of talking to these things give you the capacity to",
    "start": "3537630",
    "end": "3544170"
  },
  {
    "text": "deal with exceptions and type safety and then have",
    "start": "3544170",
    "end": "3551150"
  },
  {
    "text": "linear scalability when it comes to actually throwing more Hardware on the system you so that's actually the cost",
    "start": "3551150",
    "end": "3557670"
  },
  {
    "text": "cutting benefits of using Orleans and using patterns that sit on top of Orleans you can build very complex",
    "start": "3557670",
    "end": "3564420"
  },
  {
    "text": "things and we have these libraries that allow you to do that so the Orleans is open source there's a",
    "start": "3564420",
    "end": "3572220"
  },
  {
    "text": "very active community that's out there there's contributions accepted from the",
    "start": "3572220",
    "end": "3577530"
  },
  {
    "text": "Orleans community in fact all the code in the patterns that we talked about will eventually show up over there in",
    "start": "3577530",
    "end": "3584640"
  },
  {
    "text": "the meanwhile you can come to my grubby little grid tab repo and take a look at",
    "start": "3584640",
    "end": "3589740"
  },
  {
    "text": "that and then there's a gator site that allows you to go and have a conversation with anyone who's",
    "start": "3589740",
    "end": "3596480"
  },
  {
    "text": "in the audience community saying would you please help me with this and then",
    "start": "3596480",
    "end": "3602220"
  },
  {
    "text": "that's that's where we are at mode I think we're 2 minutes over time thank you don't forget to leave green feedback",
    "start": "3602220",
    "end": "3609450"
  },
  {
    "text": "I will take questions actually [Applause]",
    "start": "3609450",
    "end": "3618769"
  },
  {
    "text": "so I'm gonna the question is about",
    "start": "3637300",
    "end": "3642210"
  },
  {
    "text": "so it's it's it's a very deep question about delivery guarantees so the the",
    "start": "3643710",
    "end": "3649540"
  },
  {
    "text": "default delivery guarantee in Orleans is at most ones so we can configure it to",
    "start": "3649540",
    "end": "3654910"
  },
  {
    "text": "have retries and if you can hear it too high enough number you can get at least",
    "start": "3654910",
    "end": "3660310"
  },
  {
    "text": "once in practice what we've seen that's a not a great idea to do because usually",
    "start": "3660310",
    "end": "3665800"
  },
  {
    "text": "you losing messages when they're failures like fillers of machines fellers of network and in that case if",
    "start": "3665800",
    "end": "3672220"
  },
  {
    "text": "you keep retrying keep reciting all the events you're not making things better making things worse so that's why",
    "start": "3672220",
    "end": "3678400"
  },
  {
    "text": "default is we deliver a try to deliver the message and in most cases will get delivered in some small percentage of",
    "start": "3678400",
    "end": "3684550"
  },
  {
    "text": "cases when they're failures we get an exception back and usually the application code knows has an idea do",
    "start": "3684550",
    "end": "3689980"
  },
  {
    "text": "you wanted you to try and not said we thought it needs to be an explicit decision at the application layer instead of blindly trying to resend all",
    "start": "3689980",
    "end": "3696630"
  },
  {
    "text": "old messages which application may not want to send and then make recovery from",
    "start": "3696630",
    "end": "3702040"
  },
  {
    "text": "say network partition even harder",
    "start": "3702040",
    "end": "3706109"
  },
  {
    "text": "the question is what when you send a message to an actor that is down so the",
    "start": "3720120",
    "end": "3725250"
  },
  {
    "text": "technically actor cannot be down the machine can be down and and because all",
    "start": "3725250",
    "end": "3730810"
  },
  {
    "text": "the methods that you have in in the grainy face is returned in task you always have this clear either you",
    "start": "3730810",
    "end": "3736870"
  },
  {
    "text": "succeed it or you get an exception back so if we send a message and a machine is down it just died a millisecond ago we",
    "start": "3736870",
    "end": "3742540"
  },
  {
    "text": "haven't discovered that it's dead we just failed to deliver the message we'll get in a section exception back we failed to deliver this message which",
    "start": "3742540",
    "end": "3749470"
  },
  {
    "text": "industry billet systems is always ambiguous because maybe the message actually went through connection died",
    "start": "3749470",
    "end": "3754540"
  },
  {
    "text": "later and we didn't get an act so you always have this ambiguity with the tribute systems but with with task based",
    "start": "3754540",
    "end": "3762430"
  },
  {
    "text": "async RPC you have this very easy a correlation idea under the cover well",
    "start": "3762430",
    "end": "3768340"
  },
  {
    "text": "instead of saying one-way messages and receiving one-way responses and correlating what went through or not you get this task back that tells you there",
    "start": "3768340",
    "end": "3775810"
  },
  {
    "text": "was an exception if you need to retry Ori or not",
    "start": "3775810",
    "end": "3780240"
  },
  {
    "text": "the queuing yes you can use only in streaming for this if you like you can",
    "start": "3782130",
    "end": "3788290"
  },
  {
    "text": "basically put it onto your queue subscribe some publish some event and then let the",
    "start": "3788290",
    "end": "3795600"
  },
  {
    "text": "recipient pick the events of so the queue centric workflow is typically the",
    "start": "3795600",
    "end": "3801700"
  },
  {
    "text": "answer to the question that he just raised the way you implement queue centric workflow is to go through streaming",
    "start": "3801700",
    "end": "3807150"
  },
  {
    "text": "so from that point of view you you couple queue centric workflows and",
    "start": "3807150",
    "end": "3812850"
  },
  {
    "text": "virtual virtual actors which basically have no beginning or end they just exist",
    "start": "3812850",
    "end": "3819550"
  },
  {
    "text": "when you need them those that combination actually gives us",
    "start": "3819550",
    "end": "3825520"
  },
  {
    "text": "the ability to build systems so Q essentially give you at least once",
    "start": "3825520",
    "end": "3831720"
  },
  {
    "text": "they still have this kind of dead letter kind of handling where it would keep trying to deliver and keep this legate",
    "start": "3831720",
    "end": "3837700"
  },
  {
    "text": "in Arabic and there is a mechanisms to indicate well we're dropping because because there's no failing to deliver but other than that it it's at least",
    "start": "3837700",
    "end": "3843880"
  },
  {
    "text": "once with streams any other questions oh",
    "start": "3843880",
    "end": "3851070"
  },
  {
    "text": "we made everything Thomas I'm clear [Applause]",
    "start": "3851070",
    "end": "3858330"
  }
]