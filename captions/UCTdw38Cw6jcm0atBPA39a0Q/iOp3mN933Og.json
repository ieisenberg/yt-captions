[
  {
    "text": "good morning London hello world welcome to Let's code an",
    "start": "240",
    "end": "5520"
  },
  {
    "text": "incremental generator with wrestling",
    "start": "5520",
    "end": "9200"
  },
  {
    "text": "I am Stefan pertz I love clean code I love test driven development so we will",
    "start": "11219",
    "end": "16320"
  },
  {
    "text": "be seeing a lot of tests today I am a senior developer at trayport at the",
    "start": "16320",
    "end": "22140"
  },
  {
    "text": "office in Vienna but they had headquarters here in London that I visited also this week I since a couple of months I'm a",
    "start": "22140",
    "end": "28920"
  },
  {
    "text": "Microsoft MVP which was very exciting and also for a couple of months I am a",
    "start": "28920",
    "end": "34500"
  },
  {
    "text": "chat brains Community contributor which potentially will become",
    "start": "34500",
    "end": "40379"
  },
  {
    "text": "positive for you at the end so stick around also I'm a co-organizer of the cognitive 80 Meetup in Vienna we're",
    "start": "40379",
    "end": "47520"
  },
  {
    "text": "doing User Group meetups in Vienna about.net since last year I also stream at twitch",
    "start": "47520",
    "end": "54120"
  },
  {
    "text": "and of YouTube under the handle flashover and on Twitter I am Cox underscore F0 if",
    "start": "54120",
    "end": "62100"
  },
  {
    "text": "you have potentially some questions later on that I can't answer later on at",
    "start": "62100",
    "end": "67320"
  },
  {
    "text": "the Q a section um all the slides are online the example that we're building live not yet it will",
    "start": "67320",
    "end": "73500"
  },
  {
    "text": "be you can get the Via flashover.net NDC London but I'll be showing this at the end again if you want to check check",
    "start": "73500",
    "end": "80340"
  },
  {
    "text": "that out so what is rustling",
    "start": "80340",
    "end": "87180"
  },
  {
    "text": "um Boston is the.net compiler platform for the languages c-sharp and Visual Basic and it also allows extensibility",
    "start": "87180",
    "end": "94520"
  },
  {
    "text": "model so that I as a consumer of.net as a developer can write plugins basically",
    "start": "94520",
    "end": "101340"
  },
  {
    "text": "for that I can write analyzers which show bubblies",
    "start": "101340",
    "end": "106939"
  },
  {
    "text": "curlies or you get a you get the warnings or errors in your IDE you can",
    "start": "106939",
    "end": "113820"
  },
  {
    "text": "also provide a code fixer which then offers a controlled Auto Art enter experience depending on the IDE you are",
    "start": "113820",
    "end": "120540"
  },
  {
    "text": "using in order to fix that problem so it offers suggestions you can also do a refactoring provider which is basically",
    "start": "120540",
    "end": "126479"
  },
  {
    "text": "a code fix without a diagnostic so that doesn't necessarily have to be a warning",
    "start": "126479",
    "end": "131520"
  },
  {
    "text": "for example if you change from file from block scope namespace to file scope namespaces",
    "start": "131520",
    "end": "137459"
  },
  {
    "text": "and you can also do a diagnostic suppressor which is suppressing warnings though",
    "start": "137459",
    "end": "144060"
  },
  {
    "text": "and since dotnet 5 we can also write Source generators there's two interfaces",
    "start": "144060",
    "end": "149340"
  },
  {
    "text": "we will have a look at the letter because that has been added in.net 6 and offers a performance in potential",
    "start": "149340",
    "end": "155340"
  },
  {
    "text": "performance Improvement to the first iteration now I'm wondering who is",
    "start": "155340",
    "end": "160379"
  },
  {
    "text": "consciously consuming some Western components such as an analyzer in their",
    "start": "160379",
    "end": "165540"
  },
  {
    "text": "projects I see like roughly half the room who of",
    "start": "165540",
    "end": "170760"
  },
  {
    "text": "you has actively already built something with Foster for example an analyzer or a source generator",
    "start": "170760",
    "end": "178099"
  },
  {
    "text": "10 15 okay cool I hope I got for those who already have experience with it also",
    "start": "178319",
    "end": "183720"
  },
  {
    "text": "something new in store today",
    "start": "183720",
    "end": "187099"
  },
  {
    "text": "so when it comes to Source generation there has been through the history",
    "start": "188819",
    "end": "194180"
  },
  {
    "text": "of c-sharp's particular features in edit for example the partial",
    "start": "194180",
    "end": "200640"
  },
  {
    "text": "type uh the partial keyword and I want to specifically point out to the c-sharp 9 version of that",
    "start": "200640",
    "end": "206940"
  },
  {
    "text": "because in C sharp nine previously we could only make if we if we would make a",
    "start": "206940",
    "end": "212940"
  },
  {
    "text": "type and a method partial it cannot have an accessibility modifier so it's",
    "start": "212940",
    "end": "218879"
  },
  {
    "text": "inherently um uh for private and it cannot have a",
    "start": "218879",
    "end": "224220"
  },
  {
    "text": "return type which means if there is no partial doesn't have an implementation and if at compilation there is no",
    "start": "224220",
    "end": "230159"
  },
  {
    "text": "implementation nobody's providing it not the developer not not some other tool then this call to this partial method is",
    "start": "230159",
    "end": "237840"
  },
  {
    "text": "actually is um is removed so this is why it cannot have any return",
    "start": "237840",
    "end": "243260"
  },
  {
    "text": "return types or out parameters and this restriction has been lifted in C sharp 9",
    "start": "243260",
    "end": "249439"
  },
  {
    "text": "by explicitly adding an accessibility modifier so if you're specific to a partial method explicitly say this is",
    "start": "249439",
    "end": "256380"
  },
  {
    "text": "public this is internal not a new rules applied and the new world say okay we can have return types and out parameters",
    "start": "256380",
    "end": "263820"
  },
  {
    "text": "and such but we must have an implementation if there is no implementation at compile time either",
    "start": "263820",
    "end": "270240"
  },
  {
    "text": "via manual white or a for example Source generator then this will be a compiler",
    "start": "270240",
    "end": "276060"
  },
  {
    "text": "error and we will have we will use the partial keyword will be the center of our",
    "start": "276060",
    "end": "281940"
  },
  {
    "text": "example today speaking of generators so they have been",
    "start": "281940",
    "end": "287340"
  },
  {
    "text": "editing.net 5 and in.net6 or since.net6 the Nets team is also actively using",
    "start": "287340",
    "end": "293340"
  },
  {
    "text": "them so we will get Source generators in the PCL for example in.net 6 system text",
    "start": "293340",
    "end": "299340"
  },
  {
    "text": "Json generator and a logging generator and I'm going to show you the benefit of",
    "start": "299340",
    "end": "304620"
  },
  {
    "text": "using that login generator",
    "start": "304620",
    "end": "308540"
  },
  {
    "text": "so I have here A Benchmark with benchmark.net and a logger",
    "start": "319740",
    "end": "325560"
  },
  {
    "text": "and here I basically set the minimum log level so it has to be at least",
    "start": "325560",
    "end": "330780"
  },
  {
    "text": "information or warning and I want the tests with both ldfd log level is lower",
    "start": "330780",
    "end": "336240"
  },
  {
    "text": "then no log will be emitted and I try to log with different",
    "start": "336240",
    "end": "341280"
  },
  {
    "text": "variations for example the classic extension method via log information",
    "start": "341280",
    "end": "348060"
  },
  {
    "text": "another version is to actually guard that log information",
    "start": "348060",
    "end": "353460"
  },
  {
    "text": "level with a check if this log level actually has been enabled and the third variant this is the source",
    "start": "353460",
    "end": "361199"
  },
  {
    "text": "generated version let's have a look at the performance output",
    "start": "361199",
    "end": "365960"
  },
  {
    "text": "so we see if the okay yeah so we log information and we if we actually do set the minimum level as information so it",
    "start": "367800",
    "end": "374699"
  },
  {
    "text": "actually gets locked then we see that the extension method does allocate for the six bytes of memory",
    "start": "374699",
    "end": "381900"
  },
  {
    "text": "and also if it's if guarded because the if God will be true so it's basically the same path",
    "start": "381900",
    "end": "387660"
  },
  {
    "text": "and without that now without that if God if the log level is higher for example warning so we are now",
    "start": "387660",
    "end": "394560"
  },
  {
    "text": "the minimum Block Level is warning we log in information so that doesn't get locked",
    "start": "394560",
    "end": "399600"
  },
  {
    "text": "if we do not have that if check B also allocate 64 bytes of memory",
    "start": "399600",
    "end": "405840"
  },
  {
    "text": "but if you do have that if check we don't why is that there are some hidden allocations in",
    "start": "405840",
    "end": "413039"
  },
  {
    "text": "this extension method so if we have a look at the implementation",
    "start": "413039",
    "end": "418319"
  },
  {
    "text": "we will see that takes a paragram's object away and for the c-sharp compiler emits for",
    "start": "418319",
    "end": "425280"
  },
  {
    "text": "this is actually an in a way instantiation we don't see this in the",
    "start": "425280",
    "end": "432960"
  },
  {
    "text": "code but the compiler will emit this so for every invocation we will initialize in Array of size 2 and also we have a",
    "start": "432960",
    "end": "440400"
  },
  {
    "text": "number here number is a structure type a value type and if we cast the two object we will",
    "start": "440400",
    "end": "446759"
  },
  {
    "text": "have boxing and this these are additional allocations on the hip so we always make sure to guard",
    "start": "446759",
    "end": "455599"
  },
  {
    "text": "those invocations because we spare those object away allocations if we do not log",
    "start": "455599",
    "end": "464639"
  },
  {
    "text": "and the source generated version is here I have here a partial class so",
    "start": "464639",
    "end": "469979"
  },
  {
    "text": "that the source generator can actually add something at compile time to it then have the partial method",
    "start": "469979",
    "end": "475979"
  },
  {
    "text": "which takes a logger and those two arguments the name and the number that I",
    "start": "475979",
    "end": "481139"
  },
  {
    "text": "have in this string format",
    "start": "481139",
    "end": "485300"
  },
  {
    "text": "and for the Swatch terminal generates we can have a look at this we see now in wider is a very similar experience in",
    "start": "486479",
    "end": "492599"
  },
  {
    "text": "Visual Studio the file here is has a bit of a yellow tint this means it's it's",
    "start": "492599",
    "end": "498240"
  },
  {
    "text": "generated if I try to edit this pop-up will appear and says hey this is a source generated file this is actually",
    "start": "498240",
    "end": "504419"
  },
  {
    "text": "not physically on disk so you have to save this first in order to edit it and the source generator what it does is",
    "start": "504419",
    "end": "510780"
  },
  {
    "text": "actually generate this if this log level has been enabled check for us so we can in this",
    "start": "510780",
    "end": "518339"
  },
  {
    "text": "case the source generator saves us performance and also",
    "start": "518339",
    "end": "523440"
  },
  {
    "text": "avoid this tedious implementation so our source code is actually cleaner because we don't have those manual if checks all",
    "start": "523440",
    "end": "529380"
  },
  {
    "text": "over the place and this is a very strong benefit of source generators and I also want to show an example from",
    "start": "529380",
    "end": "536399"
  },
  {
    "text": "seven which is a wedgex generator so with red",
    "start": "536399",
    "end": "542820"
  },
  {
    "text": "checks there is always a bit of performance consideration if you always",
    "start": "542820",
    "end": "548940"
  },
  {
    "text": "knew up a new web checks that's rather expensive every new HX to invoke the first time is very expensive you can set",
    "start": "548940",
    "end": "555959"
  },
  {
    "text": "the compiled flag which means that only the first is match implication is expensive and saves that saves that call",
    "start": "555959",
    "end": "562920"
  },
  {
    "text": "them to the assembly and reuses that but still that first call is expensive and",
    "start": "562920",
    "end": "568260"
  },
  {
    "text": "we also generate code at one time and if the source generator all that code is generated at compile",
    "start": "568260",
    "end": "575399"
  },
  {
    "text": "time so we move there's a lot of code so we move that complexity from one time to",
    "start": "575399",
    "end": "582779"
  },
  {
    "text": "compile time and oh and the first invocation is as fast as any other because this is cached and we don't have",
    "start": "582779",
    "end": "590880"
  },
  {
    "text": "to write all of this ourselves to get high performance regex",
    "start": "590880",
    "end": "596360"
  },
  {
    "text": "so those are those two main use cases for Source generators they save tedious",
    "start": "598500",
    "end": "604019"
  },
  {
    "text": "implementation and can also boost your performance",
    "start": "604019",
    "end": "608959"
  },
  {
    "text": "now what are the laws of source generation the input of a source",
    "start": "611000",
    "end": "616080"
  },
  {
    "text": "generation is actually the code that the user has written in this very project so the entire seat this all the C sharp",
    "start": "616080",
    "end": "621839"
  },
  {
    "text": "files or the Visual Basic files in this in this compilation so in the Cs project",
    "start": "621839",
    "end": "627000"
  },
  {
    "text": "are an input to the source generator The Source generator gets this as the so-called syntax tree",
    "start": "627000",
    "end": "633420"
  },
  {
    "text": "what's a syntax tree we can check that out via the site a sharp clip",
    "start": "633420",
    "end": "639720"
  },
  {
    "text": "dot IO and let's have a look at the standard",
    "start": "639720",
    "end": "646620"
  },
  {
    "text": "code here if we appear switch oops",
    "start": "646620",
    "end": "653300"
  },
  {
    "text": "up here switch from C sharp to the syntax tree now this is the wrestling representation of this source code so we",
    "start": "653519",
    "end": "661019"
  },
  {
    "text": "are in a compilation unit and there is and we see this is this tree structure",
    "start": "661019",
    "end": "666779"
  },
  {
    "text": "now we have we have a using directive and we have a class declaration",
    "start": "666779",
    "end": "672060"
  },
  {
    "text": "and this class declaration has for example the public keyword",
    "start": "672060",
    "end": "677160"
  },
  {
    "text": "the class keyword it has an identifier so that we can use it in this case",
    "start": "677160",
    "end": "683220"
  },
  {
    "text": "um it's a c and it can also have members for example a method declaration which again has the",
    "start": "683220",
    "end": "691740"
  },
  {
    "text": "return type is a predefined type in this case White and the identifier is m",
    "start": "691740",
    "end": "697019"
  },
  {
    "text": "and this is syntactic this is to the rules of C sharp syntactic and we can also get meaning",
    "start": "697019",
    "end": "704820"
  },
  {
    "text": "for that code so if I write for example I want to return an INT 32.",
    "start": "704820",
    "end": "711959"
  },
  {
    "text": "now it says in 32 and I assume it's system in 32 but I could technically",
    "start": "711959",
    "end": "717839"
  },
  {
    "text": "have my own implementation of system int32 well this would cause a ambiguity but I could have",
    "start": "717839",
    "end": "725600"
  },
  {
    "text": "there's the same type name which is actually totally different and but as I meant syntactically it",
    "start": "725600",
    "end": "732480"
  },
  {
    "text": "looks like an INT but semantically it doesn't necessarily have to be so the semantics is actually then having a look",
    "start": "732480",
    "end": "738120"
  },
  {
    "text": "at this type what is it what members does it have and this is then the",
    "start": "738120",
    "end": "743459"
  },
  {
    "text": "second input that we can get from the within the source generator",
    "start": "743459",
    "end": "750800"
  },
  {
    "text": "so we can ask the semantic models questions about the meaning of our code",
    "start": "754160",
    "end": "760920"
  },
  {
    "text": "we can add the source generators can add many sources or no sources at all",
    "start": "760920",
    "end": "767100"
  },
  {
    "text": "and we add them as a string so the output of a source generator is a string that then gets fed into the compilation",
    "start": "767100",
    "end": "774120"
  },
  {
    "text": "and then together with the already existing user code is compiled again and this is where the partial thing kicks in",
    "start": "774120",
    "end": "779579"
  },
  {
    "text": "so we have the user codes partial the sourceometer is partial then they get compiled into one type into one",
    "start": "779579",
    "end": "785220"
  },
  {
    "text": "implementation of this method social media is additive only we cannot remove we cannot alter code we cannot",
    "start": "785220",
    "end": "792480"
  },
  {
    "text": "rename anything so we cannot we can only currently add new code to it",
    "start": "792480",
    "end": "798060"
  },
  {
    "text": "since a source generator is technically an analyzer we could also produce diagnostics for example warnings now",
    "start": "798060",
    "end": "805019"
  },
  {
    "text": "there is of course a performance consideration with that but",
    "start": "805019",
    "end": "810060"
  },
  {
    "text": "we'll come together a little bit later um oblivious that means if I have",
    "start": "810060",
    "end": "816180"
  },
  {
    "text": "multiple Source generators in one project all of them get the very same input The Source generator currently",
    "start": "816180",
    "end": "821880"
  },
  {
    "text": "this may change in the future a source generator cannot depend on the output of another generator all of them get the",
    "start": "821880",
    "end": "827700"
  },
  {
    "text": "same input of this one project and yeah I mentioned the use cases the",
    "start": "827700",
    "end": "833100"
  },
  {
    "text": "typical use cases already um so tooling that I like to use for",
    "start": "833100",
    "end": "840420"
  },
  {
    "text": "example is shoplab where you can have a look at the syntax tree a visual studio has a has a similar uh with",
    "start": "840420",
    "end": "846839"
  },
  {
    "text": "representation um with via the visual studio syntax analyzer and there's also the waslam",
    "start": "846839",
    "end": "854220"
  },
  {
    "text": "quota that I want to have a brief look at this is basically the other way around",
    "start": "854220",
    "end": "860940"
  },
  {
    "text": "so I can put the empty sharp code let's create a class",
    "start": "860940",
    "end": "866519"
  },
  {
    "text": "and then I see what was link code I would need to write in order to get that",
    "start": "866519",
    "end": "873120"
  },
  {
    "text": "and this would look let's enable the syntax Factory",
    "start": "873120",
    "end": "878220"
  },
  {
    "text": "so via the syntax Factory we can create compilations",
    "start": "878220",
    "end": "884279"
  },
  {
    "text": "and well this is somewhat helpful so to social videos perhaps to understand the structure this is very very useful for",
    "start": "885360",
    "end": "892980"
  },
  {
    "text": "analysis and other models what did you call that website uh the",
    "start": "892980",
    "end": "899279"
  },
  {
    "text": "Western quarter but all of this is on GitHub so you can have a look at the links later on",
    "start": "899279",
    "end": "905959"
  },
  {
    "text": "uh when it comes to versioning since there is many many versions of of wrestling I created a little bit of a",
    "start": "906839",
    "end": "914160"
  },
  {
    "text": "matrix if I find it there it is",
    "start": "914160",
    "end": "919459"
  },
  {
    "text": "so we start with Western freepoint",
    "start": "919560",
    "end": "926579"
  },
  {
    "text": "eight this is the Wilson version that is included in the.net 5 SDK which means if",
    "start": "926579",
    "end": "932100"
  },
  {
    "text": "my source trivet is targeted in mostly in 3.8 the consumer must at least have",
    "start": "932100",
    "end": "937579"
  },
  {
    "text": "the.net 5 SDK so the first um",
    "start": "937579",
    "end": "943320"
  },
  {
    "text": "I was like the gold release version one after the release candidate has been has been released if I want to use",
    "start": "943320",
    "end": "949320"
  },
  {
    "text": "additional features for example in 3.9 post initialization has been added we",
    "start": "949320",
    "end": "956399"
  },
  {
    "text": "will have a look at it what this means and if I if my social is targeting 3.9",
    "start": "956399",
    "end": "961579"
  },
  {
    "text": "the consumer must have the dotnet SDK 5.0.200 so depending on the western",
    "start": "961579",
    "end": "968519"
  },
  {
    "text": "version I Target the consumer of the generator which then invokes it and produces code needs to",
    "start": "968519",
    "end": "975060"
  },
  {
    "text": "have respectively a higher version of the.net SDK",
    "start": "975060",
    "end": "980519"
  },
  {
    "text": "and I also list the compatibility versions with wider if you want to have a look at this later on",
    "start": "980519",
    "end": "986399"
  },
  {
    "text": "what we will be using since we will be using post initialization we will also be using the incremental",
    "start": "986399",
    "end": "993240"
  },
  {
    "text": "generator because they offer potentially performance boost over the classic isosce generators",
    "start": "993240",
    "end": "1000320"
  },
  {
    "text": "uh we'll we will not be using with tracking name this isn't directly",
    "start": "1000320",
    "end": "1005420"
  },
  {
    "text": "helpful for the generator plus C but if you have tooling that runs the generator you can produce some more Diagnostics",
    "start": "1005420",
    "end": "1013639"
  },
  {
    "text": "with that there was also a error a bug in the",
    "start": "1013639",
    "end": "1019519"
  },
  {
    "text": "previous version which is fixed in 4.2 and in 4.3 which is the last release of",
    "start": "1019519",
    "end": "1026058"
  },
  {
    "text": "the within the.net 6 SDK time frame a new",
    "start": "1026059",
    "end": "1031298"
  },
  {
    "text": "method has been introduced in order to analyze where",
    "start": "1031299",
    "end": "1036678"
  },
  {
    "text": "the user is using specific attributes and we're gonna make heavy use of that",
    "start": "1036679",
    "end": "1042199"
  },
  {
    "text": "so now let's jump to the live coding example",
    "start": "1042199",
    "end": "1047918"
  },
  {
    "text": "the example that I would like to build um how I started here is actually I",
    "start": "1049160",
    "end": "1055059"
  },
  {
    "text": "built a template for Source generators and basically what I did uh",
    "start": "1055059",
    "end": "1063380"
  },
  {
    "text": "in the morning is",
    "start": "1063380",
    "end": "1067960"
  },
  {
    "text": "invoking this command via.net new this template is available on nougat if",
    "start": "1068720",
    "end": "1075440"
  },
  {
    "text": "you want to have a look at it it's it contains the search generator it",
    "start": "1075440",
    "end": "1080720"
  },
  {
    "text": "contains tests it also contains benchmarks and you can then water easily there's not much more you have to do in",
    "start": "1080720",
    "end": "1087140"
  },
  {
    "text": "order to publish the investors generator as a nougat package if you find that helpful as a Kickstart",
    "start": "1087140",
    "end": "1094120"
  },
  {
    "text": "which is this project fco.templates also available in nougat",
    "start": "1095240",
    "end": "1101140"
  },
  {
    "text": "but yeah the link is in the in the slides if you want to check that out later",
    "start": "1101140",
    "end": "1107240"
  },
  {
    "text": "so let's jump to the example that I would like to build so as most of the times when it comes to",
    "start": "1107240",
    "end": "1113900"
  },
  {
    "text": "Source generators I start with a benchmark so what I had a look at is the enum is",
    "start": "1113900",
    "end": "1121520"
  },
  {
    "text": "defined so enum is defined basically checks we",
    "start": "1121520",
    "end": "1126620"
  },
  {
    "text": "have an enum in our case here the logging enum again and we can check if that value",
    "start": "1126620",
    "end": "1133340"
  },
  {
    "text": "if we when we pass in a value if this is part of the inner there is a constant defined with that value",
    "start": "1133340",
    "end": "1139100"
  },
  {
    "text": "because if you check out the log level um enum which is part of",
    "start": "1139100",
    "end": "1146559"
  },
  {
    "text": "microsoft.extensions.logging.abstractions package we see they have values provided and we can since the underlying type of",
    "start": "1146559",
    "end": "1155660"
  },
  {
    "text": "an enorm default is an integer we can assign any integer to that enum",
    "start": "1155660",
    "end": "1162200"
  },
  {
    "text": "so let's have a look at e test actually first",
    "start": "1162200",
    "end": "1167720"
  },
  {
    "text": "for example a field a test I start with negative one and the value 0 through 6 are actually",
    "start": "1167720",
    "end": "1176120"
  },
  {
    "text": "defined in the enum but 7 again is not so is defined short return false",
    "start": "1176120",
    "end": "1182120"
  },
  {
    "text": "and this test confirms that it works okay I feel I give it away the generated version but for the for the PCL version",
    "start": "1182120",
    "end": "1190039"
  },
  {
    "text": "enum. is defined this is how it works in dotnet framework",
    "start": "1190039",
    "end": "1195620"
  },
  {
    "text": "the generic version doesn't exist yet so we need to use the type of overload",
    "start": "1195620",
    "end": "1202100"
  },
  {
    "text": "and everyone that benchmarks I don't know so I um and since inundo is defined is using",
    "start": "1202100",
    "end": "1209179"
  },
  {
    "text": "reflection under the hood there is a bit of a performance hit and",
    "start": "1209179",
    "end": "1216559"
  },
  {
    "text": "what if we theoretically we had a generated version which is a little bit",
    "start": "1216559",
    "end": "1222200"
  },
  {
    "text": "more naive but um does it more direct without reflection what what's the performance difference be",
    "start": "1222200",
    "end": "1228860"
  },
  {
    "text": "and in our case so actually so this was the test sorry let's have a look at the benchmark",
    "start": "1228860",
    "end": "1236419"
  },
  {
    "text": "so The Benchmark we won the ecl version we won a hand-walled version this is",
    "start": "1236419",
    "end": "1242480"
  },
  {
    "text": "then the E version I meant so we basically have just a value at the check is a choice is it debug or any of those",
    "start": "1242480",
    "end": "1249280"
  },
  {
    "text": "seven values from 0 to 6 and if it's not if it's negative one or any other",
    "start": "1249280",
    "end": "1255260"
  },
  {
    "text": "integer then it will return false and a performance difference between these",
    "start": "1255260",
    "end": "1262240"
  },
  {
    "text": "is measure global so the BCL version has 15 nanoseconds and the hand-world",
    "start": "1262700",
    "end": "1270380"
  },
  {
    "text": "version is fairly measurable because it's rather naive it's just checking some some",
    "start": "1270380",
    "end": "1275660"
  },
  {
    "text": "integers and so this handled version the downside is this handled version only",
    "start": "1275660",
    "end": "1281120"
  },
  {
    "text": "works for log level so this only works for log level I cannot use it for any other Eno",
    "start": "1281120",
    "end": "1287179"
  },
  {
    "text": "uh where is defined I could use for any other email so again it would be very tedious to implement this hand-world",
    "start": "1287179",
    "end": "1293900"
  },
  {
    "text": "version for every enum again and if that even changes if somebody adds a value then basically the handwalled version",
    "start": "1293900",
    "end": "1300740"
  },
  {
    "text": "could be invalid so wouldn't it be cool if we had a generator automatically",
    "start": "1300740",
    "end": "1306080"
  },
  {
    "text": "doing this tedious work for us and this is what we will build now",
    "start": "1306080",
    "end": "1311500"
  },
  {
    "text": "before we really start let's have a look at the Cs project because it's important that the source",
    "start": "1313059",
    "end": "1319880"
  },
  {
    "text": "generator is targeting.net standard 2.0 this is because there is various tools",
    "start": "1319880",
    "end": "1325700"
  },
  {
    "text": "out there there is Visual Studio which still works on.net framework Wireless backend sweating on.net core or dot net",
    "start": "1325700",
    "end": "1331880"
  },
  {
    "text": "so we still need to target.net standard 2.0 in order to have in order to make",
    "start": "1331880",
    "end": "1337220"
  },
  {
    "text": "this generator consumable from any from any tooling um I do multi-targeting with the latest",
    "start": "1337220",
    "end": "1345620"
  },
  {
    "text": "Target framework in order to get nullable reference type annotations so",
    "start": "1345620",
    "end": "1350720"
  },
  {
    "text": "there's a little bit of a trick this is then not part of the nougat package because if we have a look then later on",
    "start": "1350720",
    "end": "1356539"
  },
  {
    "text": "we will only pack the.net standard 2.0 version there is a trick this is",
    "start": "1356539",
    "end": "1362000"
  },
  {
    "text": "Microsoft actually does multi-targeting with different Western versions but I couldn't figure this out yet",
    "start": "1362000",
    "end": "1369380"
  },
  {
    "text": "um So currently we target one version and it must be extended 2.0",
    "start": "1369380",
    "end": "1376039"
  },
  {
    "text": "and here I suppress the null ability warnings for net standard because.net standard 2.0 was c-sharp 7.3 and they",
    "start": "1376039",
    "end": "1383539"
  },
  {
    "text": "have there are no nullable annotations yet which have been added in C sharp 8 and have been introduced with the.net",
    "start": "1383539",
    "end": "1389480"
  },
  {
    "text": "core free SDK and more and more annotations have been added so the questions marks and various attributes",
    "start": "1389480",
    "end": "1395059"
  },
  {
    "text": "for for reference types and I ignore them for Open Standards but for the.net",
    "start": "1395059",
    "end": "1401120"
  },
  {
    "text": "7 build I use them in order to get the warnings to get the null ability right",
    "start": "1401120",
    "end": "1406960"
  },
  {
    "text": "so let's have a look at the interface the eye incremental generator interface",
    "start": "1408799",
    "end": "1416740"
  },
  {
    "text": "so our generator has to implement this interface and there is only one method the initialize method and from that we",
    "start": "1416900",
    "end": "1423500"
  },
  {
    "text": "build a pipeline and this pipelining approach is the huge difference between the net 5 isource",
    "start": "1423500",
    "end": "1431120"
  },
  {
    "text": "generators and with this pipeline approach we will see that at the end we can shortcut we",
    "start": "1431120",
    "end": "1437240"
  },
  {
    "text": "can short circuit separate steps in order to avoid duplicate work if it has if it has already been",
    "start": "1437240",
    "end": "1443240"
  },
  {
    "text": "um the same as the previous one we will see the benefit at the end",
    "start": "1443240",
    "end": "1447940"
  },
  {
    "text": "so when we start we implement the initialize method and I",
    "start": "1448340",
    "end": "1456260"
  },
  {
    "text": "mentioned it before there was post initialization and post initialization actually enables",
    "start": "1456260",
    "end": "1461900"
  },
  {
    "text": "a bit of ordering so we can actually code that we",
    "start": "1461900",
    "end": "1467179"
  },
  {
    "text": "produce in the post initialization phase of the generator can actually be used in",
    "start": "1467179",
    "end": "1473000"
  },
  {
    "text": "subsequent generator phases in the in the in the general output phase in our",
    "start": "1473000",
    "end": "1479539"
  },
  {
    "text": "case so this is how actually we can generate source which we later on depend on",
    "start": "1479539",
    "end": "1485120"
  },
  {
    "text": "and in this example I am putting out an attribute",
    "start": "1485120",
    "end": "1490940"
  },
  {
    "text": "the is enum defined attribute this is all this is actually a c-sharp 11",
    "start": "1490940",
    "end": "1496340"
  },
  {
    "text": "attribute we see this is a generic attribute which also takes a type and this type",
    "start": "1496340",
    "end": "1502520"
  },
  {
    "text": "must be an enum so it must be a struct which derives from you know we can't manually derive",
    "start": "1502520",
    "end": "1510380"
  },
  {
    "text": "from the enum type because drugs cannot derive any other classes but",
    "start": "1510380",
    "end": "1516380"
  },
  {
    "text": "um internet.net so the PCL the.net team knows how to do that it's part I'm",
    "start": "1516380",
    "end": "1521900"
  },
  {
    "text": "actually not sure but um so this is a check um to know this is an enum yeah",
    "start": "1521900",
    "end": "1529580"
  },
  {
    "text": "and I want to apply this email to a class and then on this class on this partial",
    "start": "1529580",
    "end": "1535940"
  },
  {
    "text": "class I want to emit those is defined methods so I'm marking a class",
    "start": "1535940",
    "end": "1542419"
  },
  {
    "text": "for the generator to observe and create the relevant implementations of the is",
    "start": "1542419",
    "end": "1548779"
  },
  {
    "text": "defined there it's always good practice to add the auto generated comment at an auto",
    "start": "1548779",
    "end": "1555020"
  },
  {
    "text": "generated file so that's tooling knows oh this is also generated for example an",
    "start": "1555020",
    "end": "1560419"
  },
  {
    "text": "analyzer and analyzer there's a flag if you also want to analyze",
    "start": "1560419",
    "end": "1566179"
  },
  {
    "text": "auto-generated file the default you should rather not because the user has no direct influence on this generator on",
    "start": "1566179",
    "end": "1572900"
  },
  {
    "text": "the generated file and if this will produce warnings and if the if the developer had warning this errors this",
    "start": "1572900",
    "end": "1578900"
  },
  {
    "text": "would be very annoying cannot actually fix that it would need to fix but they would need to fix the generator if they",
    "start": "1578900",
    "end": "1584000"
  },
  {
    "text": "don't have Source access that's troublesome and also I like nullability so I always",
    "start": "1584000",
    "end": "1589940"
  },
  {
    "text": "enable nullability because in generated files the default nullability context is",
    "start": "1589940",
    "end": "1595520"
  },
  {
    "text": "false there are no nullable limitations then it's another good practice to add",
    "start": "1595520",
    "end": "1602059"
  },
  {
    "text": "the generated code attribute we find it up here",
    "start": "1602059",
    "end": "1607940"
  },
  {
    "text": "generated code attribute adds the name of this assembly and also",
    "start": "1607940",
    "end": "1613039"
  },
  {
    "text": "the version again this is for tooling this is for not source code base tooling",
    "start": "1613039",
    "end": "1619700"
  },
  {
    "text": "because the comment may not be emitted in the in the in the metadata of the",
    "start": "1619700",
    "end": "1624919"
  },
  {
    "text": "assembly but for example reflection based tooling would be able to read this attribute and know okay this is a",
    "start": "1624919",
    "end": "1631400"
  },
  {
    "text": "generated file I may should tweet this differently",
    "start": "1631400",
    "end": "1636039"
  },
  {
    "text": "and we're putting it is in the western dot generated namespace",
    "start": "1639140",
    "end": "1644658"
  },
  {
    "text": "and now this is actually what we have so if we want the tests",
    "start": "1645380",
    "end": "1652279"
  },
  {
    "text": "while having a look at them",
    "start": "1652279",
    "end": "1655480"
  },
  {
    "text": "I am here again defining this attribute that I'm checking against we see this is all strings because that's the output of",
    "start": "1663140",
    "end": "1668779"
  },
  {
    "text": "a generator and I have here test if I don't have any candidate candidates so this this partial class does not have",
    "start": "1668779",
    "end": "1677059"
  },
  {
    "text": "this new attribute applied then nothing should be generated except this one",
    "start": "1677059",
    "end": "1683539"
  },
  {
    "text": "is a non-defined attribute this is not necessarily the best practice to emit",
    "start": "1683539",
    "end": "1688880"
  },
  {
    "text": "those marker attributes also via Source generator because if we have multiple",
    "start": "1688880",
    "end": "1694600"
  },
  {
    "text": "assemblies using the generator now we have this type it's an internal type but",
    "start": "1694600",
    "end": "1700279"
  },
  {
    "text": "still we have this now multiple assemblies so you could also produce this marker type this attribute",
    "start": "1700279",
    "end": "1706460"
  },
  {
    "text": "in a separate assembly intercept with nougat package that then the generator is also automatically including and the",
    "start": "1706460",
    "end": "1712940"
  },
  {
    "text": "only way of this type once but for our case this shows how the post",
    "start": "1712940",
    "end": "1718340"
  },
  {
    "text": "initialization phase works because we are first outputting this attribute and then later on we can",
    "start": "1718340",
    "end": "1724520"
  },
  {
    "text": "search it and this is not a second test you see this is not failing because in the",
    "start": "1724520",
    "end": "1730580"
  },
  {
    "text": "second test we actually want to use that is you know defined attribute so we can now depend on it and if we find that now",
    "start": "1730580",
    "end": "1738200"
  },
  {
    "text": "I want to Output the code so this is now what should be generated the partial class again",
    "start": "1738200",
    "end": "1744320"
  },
  {
    "text": "and now there is defined method with in our case we're using string",
    "start": "1744320",
    "end": "1749539"
  },
  {
    "text": "comparison because this is what we defined up here and now emit all the enots for that",
    "start": "1749539",
    "end": "1756740"
  },
  {
    "text": "doing the logic all the enum constants and then doing basically string comparison and check has this really",
    "start": "1756740",
    "end": "1763820"
  },
  {
    "text": "been created I do have here a bit of a name it's the is",
    "start": "1763820",
    "end": "1769360"
  },
  {
    "text": "enumgenerated.g.cs so if you have a generated file always add dot g dot CS or dot generated CS again the tooling",
    "start": "1769360",
    "end": "1776659"
  },
  {
    "text": "nodes or the reader knows okay this is generated but this is not necessarily a file per",
    "start": "1776659",
    "end": "1782120"
  },
  {
    "text": "default those Source generated sources are not put to disk there is an",
    "start": "1782120",
    "end": "1788179"
  },
  {
    "text": "um in this build flag that you can set and also a directory that you can put to actually see on disk what gets emitted",
    "start": "1788179",
    "end": "1794720"
  },
  {
    "text": "for debugging purposes perhaps but by default this is just the hint name for",
    "start": "1794720",
    "end": "1799820"
  },
  {
    "text": "tooling to show but it's not necessarily put to disk it's not necessarily A source file",
    "start": "1799820",
    "end": "1806419"
  },
  {
    "text": "now our test is failing let's have a look why",
    "start": "1806419",
    "end": "1813220"
  },
  {
    "text": "uh yeah because I implemented it correct and so let's get to it",
    "start": "1814640",
    "end": "1822940"
  },
  {
    "text": "since we want to search for this enote type",
    "start": "1827779",
    "end": "1833299"
  },
  {
    "text": "let's have a closer look how this looks in the syntax tree so if we",
    "start": "1833299",
    "end": "1839720"
  },
  {
    "text": "go to the test if we grab",
    "start": "1839720",
    "end": "1844880"
  },
  {
    "text": "that example go to sharflip.io put us in",
    "start": "1844880",
    "end": "1850640"
  },
  {
    "text": "now it doesn't compile but we can still have a look at the syntax tree",
    "start": "1850640",
    "end": "1856460"
  },
  {
    "text": "we are searching for class declaration that have in the attribute list",
    "start": "1856460",
    "end": "1863059"
  },
  {
    "text": "this very attribute and in previous version it was what a manual in order to search for that you",
    "start": "1863059",
    "end": "1869240"
  },
  {
    "text": "really have to drill down have a look at all the class declaration see if they're attribute lists contain this very",
    "start": "1869240",
    "end": "1875960"
  },
  {
    "text": "attribute and basically a two for each Loops in order search for it and the Western 3. 4.0 4.3 sorry a very nice",
    "start": "1875960",
    "end": "1885919"
  },
  {
    "text": "feature has been added that does that for us and I guess also the most performant way because the Western team",
    "start": "1885919",
    "end": "1891140"
  },
  {
    "text": "they know what they do so we can write on the syntax provider we can write dot for attribute with",
    "start": "1891140",
    "end": "1898520"
  },
  {
    "text": "metadata name and now we provide the metadata name I have the",
    "start": "1898520",
    "end": "1906799"
  },
  {
    "text": "is enum defined attribute metadata which looks like this perhaps you have seen this in a reflect",
    "start": "1906799",
    "end": "1913520"
  },
  {
    "text": "in reflection already when we have a generic type there is this backtick one which indicates this type has one",
    "start": "1913520",
    "end": "1919640"
  },
  {
    "text": "generic argument if it is a pactic 2 it has two and this",
    "start": "1919640",
    "end": "1926779"
  },
  {
    "text": "is why we can't overload by generic differences so we can't have an overload",
    "start": "1926779",
    "end": "1933380"
  },
  {
    "text": "with one generic type parameter with different types because in metadata they",
    "start": "1933380",
    "end": "1939919"
  },
  {
    "text": "look the same so we have an ambiguity now we're searching for these",
    "start": "1939919",
    "end": "1945860"
  },
  {
    "text": "and then on the on this provider we have two more callbacks",
    "start": "1945860",
    "end": "1952460"
  },
  {
    "text": "we have a predicate we see the input for that predicate is a syntax node so we",
    "start": "1952460",
    "end": "1958760"
  },
  {
    "text": "get in each and every syntax node where this attribute applies to various metadata attribute has been found on",
    "start": "1958760",
    "end": "1965480"
  },
  {
    "text": "so we can do further checking and then we have the transform method and this",
    "start": "1965480",
    "end": "1971059"
  },
  {
    "text": "transform method now is semantic because in this generator attribute",
    "start": "1971059",
    "end": "1976640"
  },
  {
    "text": "context we not only get the syntax node because the syntax node that's the name says",
    "start": "1976640",
    "end": "1982100"
  },
  {
    "text": "it's syntactic we know what it looks like but we don't know exactly what it",
    "start": "1982100",
    "end": "1987440"
  },
  {
    "text": "is but we also get this target symbol in this case where the attribute has been",
    "start": "1987440",
    "end": "1992899"
  },
  {
    "text": "applied on in our case the class this is the symbol is semantic it has Type",
    "start": "1992899",
    "end": "1997940"
  },
  {
    "text": "information and we also get the semantic model so we",
    "start": "1997940",
    "end": "2003940"
  },
  {
    "text": "could ask additional questions about the meaning of the code and we have a collection of attribute",
    "start": "2003940",
    "end": "2010720"
  },
  {
    "text": "data so we could apply this attribute multiple times in order to make multiple",
    "start": "2010720",
    "end": "2016480"
  },
  {
    "text": "methods and PC that's an immutable array in Gosling almost everything if not",
    "start": "2016480",
    "end": "2022179"
  },
  {
    "text": "everything is immutable so if we have a syntax tree and if we edit the syntax tree this will be entire new syntax tree",
    "start": "2022179",
    "end": "2028600"
  },
  {
    "text": "I think this is how you enable basically control C experiences that you can back go back to previous steps",
    "start": "2028600",
    "end": "2035700"
  },
  {
    "text": "and this is how a multiplayer is used you cannot immutably waste obstruct",
    "start": "2035700",
    "end": "2040899"
  },
  {
    "text": "which has an array under the hood but you cannot modify that array",
    "start": "2040899",
    "end": "2046200"
  },
  {
    "text": "and now we will use the predicate the syntactic jack",
    "start": "2048659",
    "end": "2054398"
  },
  {
    "text": "we get in a syntax node oops",
    "start": "2054399",
    "end": "2059398"
  },
  {
    "text": "so let's go let's say node we also have a cancellation token",
    "start": "2061419",
    "end": "2066838"
  },
  {
    "text": "and let's see if this is really really a class well on the attribute we declared",
    "start": "2067300",
    "end": "2073540"
  },
  {
    "text": "that this attribute can only be applied to classes but still let's make sure that this node is a class so predicate",
    "start": "2073540",
    "end": "2080080"
  },
  {
    "text": "must return a Boolean so we return if this node is a class declaration syntax",
    "start": "2080080",
    "end": "2085480"
  },
  {
    "text": "again how do I know how this is a class declaration syntax because in sharp lab if we have a look at the syntax tree we",
    "start": "2085480",
    "end": "2092500"
  },
  {
    "text": "see that this class is a class declaration that's the type that we can check for",
    "start": "2092500",
    "end": "2099160"
  },
  {
    "text": "and what I also want to check is that this class indeed is partial",
    "start": "2099160",
    "end": "2105280"
  },
  {
    "text": "because if the class isn't partial we cannot add source to this type so we need to make sure that this is partial",
    "start": "2105280",
    "end": "2110980"
  },
  {
    "text": "so we can say class Dot oh I should add a end",
    "start": "2110980",
    "end": "2118720"
  },
  {
    "text": "if I make some errors I have my rubber duck debug here to help me but if you if you spot any obvious titles please let",
    "start": "2118720",
    "end": "2124720"
  },
  {
    "text": "me know and we can um go for the for the modifiers",
    "start": "2124720",
    "end": "2131500"
  },
  {
    "text": "and ask the modifiers if sorry I have to cheat",
    "start": "2131500",
    "end": "2138000"
  },
  {
    "text": "um because that's the oh yeah right we use any actually only um",
    "start": "2139540",
    "end": "2145599"
  },
  {
    "text": "there's an extension method yeah so we can ask if the kind",
    "start": "2145599",
    "end": "2151260"
  },
  {
    "text": "if the partial keyword is a part of these modifiers so",
    "start": "2151900",
    "end": "2159940"
  },
  {
    "text": "the modifiers includes the the pub for example public on the strike to read only would be a modifier or a partial in",
    "start": "2159940",
    "end": "2167500"
  },
  {
    "text": "this case and we see if any of these modifiers is partial and only if this",
    "start": "2167500",
    "end": "2172900"
  },
  {
    "text": "predicate returns true then we go into the",
    "start": "2172900",
    "end": "2178180"
  },
  {
    "text": "syntax semantic check the transform",
    "start": "2178180",
    "end": "2183700"
  },
  {
    "text": "not a transform we see oops that must be a comma sorry",
    "start": "2183700",
    "end": "2190900"
  },
  {
    "text": "the transform receives a context again a cancellation token yeah",
    "start": "2190900",
    "end": "2198510"
  },
  {
    "text": "[Music] wait thank you",
    "start": "2198510",
    "end": "2203579"
  },
  {
    "text": "and here we can again Ask additional questions I grabbed that from an example",
    "start": "2204579",
    "end": "2211000"
  },
  {
    "text": "and walk you through so",
    "start": "2211000",
    "end": "2216280"
  },
  {
    "text": "since we checked here that this is a class declaration we can",
    "start": "2216280",
    "end": "2221619"
  },
  {
    "text": "cast this into the class declaration syntax denote if it would cost it to anything else it would crash and then",
    "start": "2221619",
    "end": "2228760"
  },
  {
    "text": "Source generate a question no sources are output so always make sure that it's safe in",
    "start": "2228760",
    "end": "2236079"
  },
  {
    "text": "general just because it's not when a source generator creates an error it's not super super obvious it just doesn't",
    "start": "2236079",
    "end": "2242020"
  },
  {
    "text": "work and it's then especially if it's a new good package we are hard to to to to",
    "start": "2242020",
    "end": "2247300"
  },
  {
    "text": "debug so always make sure that casting is actually safe",
    "start": "2247300",
    "end": "2252820"
  },
  {
    "text": "and the so we know that the syntactic information is a class declaration and with that we know that the semantic type",
    "start": "2252820",
    "end": "2260440"
  },
  {
    "text": "is a named type symbol now we can safely assert that our",
    "start": "2260440",
    "end": "2267280"
  },
  {
    "text": "attribute list list has at least one member in it because this is what the",
    "start": "2267280",
    "end": "2272980"
  },
  {
    "text": "four attributes of metadata name is doing it ensures that this metadata named attribute is actually applied at",
    "start": "2272980",
    "end": "2279339"
  },
  {
    "text": "least once on this syntax node and then we return this in a tuple",
    "start": "2279339",
    "end": "2285460"
  },
  {
    "text": "and from that we now go on now we build up the pipeline so how does this pipeline work let's",
    "start": "2285460",
    "end": "2291339"
  },
  {
    "text": "have a look again at the syntax provider a syntax provider",
    "start": "2291339",
    "end": "2297180"
  },
  {
    "text": "and the form effort returns an incremental value provider there is two",
    "start": "2298180",
    "end": "2304240"
  },
  {
    "text": "of these there is the incremental values provider plural and there is the incremental value provider singular an",
    "start": "2304240",
    "end": "2311980"
  },
  {
    "text": "incremental value provider has one thing the values provider multiple or zero to",
    "start": "2311980",
    "end": "2317980"
  },
  {
    "text": "many so that's then later on in a mutable array and we have",
    "start": "2317980",
    "end": "2324640"
  },
  {
    "text": "more of these if you have a look at the context that we get in to the initialize",
    "start": "2324640",
    "end": "2330220"
  },
  {
    "text": "method there is many of these value providers",
    "start": "2330220",
    "end": "2335680"
  },
  {
    "text": "so we have for example a compilation provider we can have a look have a closer look at the compilation there's",
    "start": "2335680",
    "end": "2341560"
  },
  {
    "text": "only one compilation so this is a value provider we can also have a look at the options",
    "start": "2341560",
    "end": "2346720"
  },
  {
    "text": "of the compilation we can have a look at the pause options the pass options for example would include with with which",
    "start": "2346720",
    "end": "2353680"
  },
  {
    "text": "c-sharp version this project has been compiled so you could technically",
    "start": "2353680",
    "end": "2359079"
  },
  {
    "text": "depending on the language version of the user of the project emits different",
    "start": "2359079",
    "end": "2364180"
  },
  {
    "text": "codes to be more compatible thank you there is also additional texts",
    "start": "2364180",
    "end": "2369640"
  },
  {
    "text": "additional text is anything that is not C sharp so I could have a text file an",
    "start": "2369640",
    "end": "2374740"
  },
  {
    "text": "XML file a Json file that I transform transpile into a c-sharp source code",
    "start": "2374740",
    "end": "2385800"
  },
  {
    "text": "not every additional files like a Json if we have a web project there is the app settings.json this is not per",
    "start": "2385800",
    "end": "2392560"
  },
  {
    "text": "default getting in you have to explicitly Mark in the uh in the MS in",
    "start": "2392560",
    "end": "2397720"
  },
  {
    "text": "the Cs project marketed file is an additional file and all additional files then will be",
    "start": "2397720",
    "end": "2402760"
  },
  {
    "text": "visible to generators analyzers to all the hosting tooling",
    "start": "2402760",
    "end": "2407880"
  },
  {
    "text": "and there is also the metadata reference provider that I mentioned that had a bug the bug was that before version 4.2 this",
    "start": "2407880",
    "end": "2416500"
  },
  {
    "text": "was a value provider not a values provider and the metadata references for example are the yeah the assemblies that",
    "start": "2416500",
    "end": "2423820"
  },
  {
    "text": "this project is depending on for example uh Newtons of Json",
    "start": "2423820",
    "end": "2429520"
  },
  {
    "text": "or other nugget packages and we can also not only have those",
    "start": "2429520",
    "end": "2435640"
  },
  {
    "text": "basic providers we can also chain providers with link like methods for example because",
    "start": "2435640",
    "end": "2443140"
  },
  {
    "text": "what we have here now is we have the class declaration but we have multiple",
    "start": "2443140",
    "end": "2448180"
  },
  {
    "text": "attributes now what I want to do because there is one test",
    "start": "2448180",
    "end": "2454000"
  },
  {
    "text": "which actually I thought I had this test but we could",
    "start": "2454000",
    "end": "2462160"
  },
  {
    "text": "actually apply the same attributes twice on a type and then we need to emit two",
    "start": "2462160",
    "end": "2468040"
  },
  {
    "text": "methods and for that we need to now group these",
    "start": "2468040",
    "end": "2474640"
  },
  {
    "text": "so I'm doing here a select many",
    "start": "2474640",
    "end": "2478740"
  },
  {
    "text": "foreign",
    "start": "2480040",
    "end": "2482280"
  },
  {
    "text": "out those multiple attributes this attribute data that we have and combine",
    "start": "2488760",
    "end": "2494800"
  },
  {
    "text": "this with the type information and the",
    "start": "2494800",
    "end": "2499960"
  },
  {
    "text": "um with the with the syntactic and the semantic information of this type that",
    "start": "2499960",
    "end": "2505480"
  },
  {
    "text": "this attribute has been applied on so this is how we do a select any we create an array with all this data and",
    "start": "2505480",
    "end": "2512619"
  },
  {
    "text": "then return the stator so we now switch from a",
    "start": "2512619",
    "end": "2517980"
  },
  {
    "text": "from on single output to multiple outputs",
    "start": "2517980",
    "end": "2523240"
  },
  {
    "text": "now we will do a step that will come in handy later we will now select those",
    "start": "2523240",
    "end": "2531760"
  },
  {
    "text": "elements that that we need in order to generate the source code",
    "start": "2531760",
    "end": "2536920"
  },
  {
    "text": "so we will drill down and get all the information what do we need in order to emit this",
    "start": "2536920",
    "end": "2544660"
  },
  {
    "text": "code let's have a look so we need the namespace that this type is in",
    "start": "2544660",
    "end": "2551740"
  },
  {
    "text": "we need the type name that this attribute has been applied on",
    "start": "2551740",
    "end": "2557079"
  },
  {
    "text": "so because we need to mark it as partial in our edit source we need to know the enum so not only the",
    "start": "2557079",
    "end": "2565359"
  },
  {
    "text": "the name of the enum but also the semantic information of this enum so we",
    "start": "2565359",
    "end": "2571540"
  },
  {
    "text": "need to know that this enum has those six constants the current culture",
    "start": "2571540",
    "end": "2576760"
  },
  {
    "text": "invarian culture and so on so that we can then emit the source code and we",
    "start": "2576760",
    "end": "2582400"
  },
  {
    "text": "will grab all this information so we ask the symbol to get the",
    "start": "2582400",
    "end": "2588760"
  },
  {
    "text": "containing namespace and see if this is the global namespace because if it's if it's in the global",
    "start": "2588760",
    "end": "2595300"
  },
  {
    "text": "namespace it's also a test for that so we could we could declare a type",
    "start": "2595300",
    "end": "2601599"
  },
  {
    "text": "which isn't in a namespace and then we can't emit any namespace if we try to",
    "start": "2601599",
    "end": "2607300"
  },
  {
    "text": "get the namespace name of the global namespace it would be Global namespace in Brackets and this would be invalidity",
    "start": "2607300",
    "end": "2613000"
  },
  {
    "text": "sharp code so we need to check for that we also then get",
    "start": "2613000",
    "end": "2620500"
  },
  {
    "text": "the name of this namespace we get the name of the type",
    "start": "2620500",
    "end": "2626980"
  },
  {
    "text": "we get the name of the Eno and I'm using here a format the global Elias format in",
    "start": "2626980",
    "end": "2634060"
  },
  {
    "text": "order to produce produce this so it's good practice and instruction",
    "start": "2634060",
    "end": "2639280"
  },
  {
    "text": "related code to always use the global alliers in order to avoid potential",
    "start": "2639280",
    "end": "2646380"
  },
  {
    "text": "ambiguity so the user could declare their own system.string comparison or",
    "start": "2646380",
    "end": "2652000"
  },
  {
    "text": "could declare their own in a different namespace type from the from the BCL and with that we can potentially avoid this",
    "start": "2652000",
    "end": "2659319"
  },
  {
    "text": "errors so it's really I saw rarely that there was actually",
    "start": "2659319",
    "end": "2665400"
  },
  {
    "text": "using declaration in in Swatch generated code",
    "start": "2665400",
    "end": "2671079"
  },
  {
    "text": "so we need the full name with the global identify the Global Alliance and",
    "start": "2671079",
    "end": "2677560"
  },
  {
    "text": "sorry and also now we need to get the members of this enum",
    "start": "2677560",
    "end": "2683980"
  },
  {
    "text": "we do that by yeah getting the members and we need to filter",
    "start": "2683980",
    "end": "2690280"
  },
  {
    "text": "for all members which are a field because by default this is what this is how I learned",
    "start": "2690280",
    "end": "2695740"
  },
  {
    "text": "while building social service is how I learn a lot about c-sharp because in enum actually has a default Constructor",
    "start": "2695740",
    "end": "2703480"
  },
  {
    "text": "so if I would go video test",
    "start": "2703480",
    "end": "2709140"
  },
  {
    "text": "for example the log level I can write via level equals new log level",
    "start": "2709960",
    "end": "2716400"
  },
  {
    "text": "so there is a default Constructor for Enos now be aware that if there is no",
    "start": "2720520",
    "end": "2727720"
  },
  {
    "text": "zero element in in that in that enum for example if I",
    "start": "2727720",
    "end": "2732760"
  },
  {
    "text": "start at one invoking the default Constructor would still assign the value 0 to it because",
    "start": "2732760",
    "end": "2739839"
  },
  {
    "text": "the underlying type is an integer and the default of the integer is zero so this is how we could if we don't have a",
    "start": "2739839",
    "end": "2745540"
  },
  {
    "text": "zero value the default of an enum already would not be defined",
    "start": "2745540",
    "end": "2751920"
  },
  {
    "text": "and in order to get width in our selection of this default Constructor",
    "start": "2752140",
    "end": "2757660"
  },
  {
    "text": "we will filter only for the fields",
    "start": "2757660",
    "end": "2762940"
  },
  {
    "text": "then we convert this to the string again we say two display string which allows passing these Elias where we say we can",
    "start": "2762940",
    "end": "2770079"
  },
  {
    "text": "have a brief look at this this is basically combining various enums in order to say okay",
    "start": "2770079",
    "end": "2776440"
  },
  {
    "text": "uh use special types so if it's actually saying the language keyword Inked keep",
    "start": "2776440",
    "end": "2781540"
  },
  {
    "text": "it as Inked and we include the containing type",
    "start": "2781540",
    "end": "2786880"
  },
  {
    "text": "and also is the global uh the global is part of this fully",
    "start": "2786880",
    "end": "2794319"
  },
  {
    "text": "qualified format already and now we have all the variables that",
    "start": "2794319",
    "end": "2800500"
  },
  {
    "text": "we need now we can",
    "start": "2800500",
    "end": "2807760"
  },
  {
    "text": "put create the source but I still have a compiler ever",
    "start": "2807760",
    "end": "2815440"
  },
  {
    "text": "um so what do we have excuse me twice",
    "start": "2815440",
    "end": "2821880"
  },
  {
    "text": "ah wait so let's make this this is why I usually actually also always Mark themes static in order to",
    "start": "2827520",
    "end": "2833920"
  },
  {
    "text": "avoid this errors thank you very much and",
    "start": "2833920",
    "end": "2841259"
  },
  {
    "text": "I guess I also have a bracing error yes okay and now we created this pipeline so",
    "start": "2841359",
    "end": "2847060"
  },
  {
    "text": "we have selected and filtered",
    "start": "2847060",
    "end": "2852940"
  },
  {
    "text": "and now have this one provider which has now if we have a look at the",
    "start": "2852940",
    "end": "2858099"
  },
  {
    "text": "type information this is now an incremental value use",
    "start": "2858099",
    "end": "2865420"
  },
  {
    "text": "provider of this is enum defined info so we have multiple of these now we can get to generation",
    "start": "2865420",
    "end": "2872260"
  },
  {
    "text": "and we also do it with a context so we can say context dot actually have it down here already",
    "start": "2872260",
    "end": "2878859"
  },
  {
    "text": "register Source output if we want to produce Diagnostics we could also do to",
    "start": "2878859",
    "end": "2883900"
  },
  {
    "text": "be a context dot report oh no it's not it's",
    "start": "2883900",
    "end": "2889660"
  },
  {
    "text": "down there sorry I confused um yes",
    "start": "2889660",
    "end": "2895180"
  },
  {
    "text": "so now we're with Chester and output that acts on this pipeline that we have",
    "start": "2895180",
    "end": "2901720"
  },
  {
    "text": "built so let me bring that in uh oops what I forgot is to also collect",
    "start": "2901720",
    "end": "2909220"
  },
  {
    "text": "because we now have a we now have an incremental value use provider",
    "start": "2909220",
    "end": "2915280"
  },
  {
    "text": "and if I want to change an incremental values provider which is multiple into a singular we can say dot collect I'm",
    "start": "2915280",
    "end": "2922420"
  },
  {
    "text": "doing this in order to be able to put all because this example you want to put all the source into one generated file",
    "start": "2922420",
    "end": "2929079"
  },
  {
    "text": "and so I collect this into one now we have an immutable array and now",
    "start": "2929079",
    "end": "2934240"
  },
  {
    "text": "um we can put this into one single file and now let's bring in the source code which actually generates the source code",
    "start": "2934240",
    "end": "2943920"
  },
  {
    "text": "so I will walk you through so we will get as an input a source production context via which we",
    "start": "2944920",
    "end": "2952119"
  },
  {
    "text": "can actually add sources and we get the result from our pipeline that we built",
    "start": "2952119",
    "end": "2958000"
  },
  {
    "text": "in our case since we could since we have since we have collected we get an immutable array of this type if we",
    "start": "2958000",
    "end": "2963940"
  },
  {
    "text": "wouldn't have collected we would get just the easy undefined info singular",
    "start": "2963940",
    "end": "2969040"
  },
  {
    "text": "but then it would be invoked multiple times so we could produce multiple files multiple sources but I want to merge it",
    "start": "2969040",
    "end": "2975700"
  },
  {
    "text": "into one so this is how I collect then since we are creating a source I",
    "start": "2975700",
    "end": "2982119"
  },
  {
    "text": "start here with a string Builder I wrapped this in an indented text writer",
    "start": "2982119",
    "end": "2987339"
  },
  {
    "text": "this is how you can do easily invention always add good practice always add Auto",
    "start": "2987339",
    "end": "2993700"
  },
  {
    "text": "generated header and notability information and now we iterate through all the infos that we have",
    "start": "2993700",
    "end": "3000240"
  },
  {
    "text": "we check are we not in the global namespace then we can print namespace",
    "start": "3000240",
    "end": "3006599"
  },
  {
    "text": "information if we are in a global namespace we don't see anything about the namespace that is by default in the global",
    "start": "3006599",
    "end": "3013560"
  },
  {
    "text": "we print the partial class now within that partial class this is",
    "start": "3013560",
    "end": "3020099"
  },
  {
    "text": "here we do indent in order to get nice a nice invention this helps having a",
    "start": "3020099",
    "end": "3025859"
  },
  {
    "text": "look at the code later on then we emit the is defined method with the name of this item which is the",
    "start": "3025859",
    "end": "3031740"
  },
  {
    "text": "global column column version then this enum could be empty so we",
    "start": "3031740",
    "end": "3040920"
  },
  {
    "text": "could have an enum without any constants then we just return false because no value is defined",
    "start": "3040920",
    "end": "3048000"
  },
  {
    "text": "there are any constants then we start emitting this return statement so we",
    "start": "3048000",
    "end": "3053579"
  },
  {
    "text": "return value is and then for each constant we write the constant and or combine it",
    "start": "3053579",
    "end": "3061200"
  },
  {
    "text": "and if it's the last we just write the semicolon and then we close our brackets",
    "start": "3061200",
    "end": "3067380"
  },
  {
    "text": "so we close to the brace close another brace then at the end we again need to",
    "start": "3067380",
    "end": "3073140"
  },
  {
    "text": "check are we in the global namespace because if we are we all we open the brace we need to close it now",
    "start": "3073140",
    "end": "3080119"
  },
  {
    "text": "and then we build a big string and put this to this to this and this is where the",
    "start": "3080119",
    "end": "3086099"
  },
  {
    "text": "actual emission is happening this is where the source code is added to",
    "start": "3086099",
    "end": "3093300"
  },
  {
    "text": "um to the to the next step of the compilation we give it we see we give it a hint name",
    "start": "3093300",
    "end": "3100200"
  },
  {
    "text": "and the hint name now will come in handy because tooling will show us where it is so if we build that",
    "start": "3100200",
    "end": "3108078"
  },
  {
    "text": "and have a look at the example hope that everything turns",
    "start": "3113339",
    "end": "3119339"
  },
  {
    "text": "not red and we can have a look in Rider this is",
    "start": "3119339",
    "end": "3125400"
  },
  {
    "text": "very similar in Visual Studio if it will down to the framework that we are compiling with",
    "start": "3125400",
    "end": "3131819"
  },
  {
    "text": "there is a source generators folder here is our source generator and there",
    "start": "3131819",
    "end": "3137640"
  },
  {
    "text": "are now there we can have a look at those generated files and these name not files but sources these are the names",
    "start": "3137640",
    "end": "3143280"
  },
  {
    "text": "that I use the hint name is used for that so we can have a look at the attribute there it is it's valency sharp code and",
    "start": "3143280",
    "end": "3150420"
  },
  {
    "text": "we can have a look at this enum that we Define and here we have it we have",
    "start": "3150420",
    "end": "3156119"
  },
  {
    "text": "successfully emitted um the headers we have big since we've",
    "start": "3156119",
    "end": "3161280"
  },
  {
    "text": "been enough we we are not in the global namespace we have a namespace we have the partial class we have the log level",
    "start": "3161280",
    "end": "3167460"
  },
  {
    "text": "and so on and so forth and now we can actually run this example and we",
    "start": "3167460",
    "end": "3176160"
  },
  {
    "text": "are searching if uh log level.trace is defined the output is true",
    "start": "3176160",
    "end": "3183359"
  },
  {
    "text": "and if we would try to say negative 10 cast this into log level",
    "start": "3183359",
    "end": "3190818"
  },
  {
    "text": "wondering what I'm doing wrong maybe let's put this into arrival",
    "start": "3194520",
    "end": "3200059"
  },
  {
    "text": "level",
    "start": "3200760",
    "end": "3203180"
  },
  {
    "text": "uh what am I doing wrong",
    "start": "3208740",
    "end": "3212300"
  },
  {
    "text": "instead of bar excuse me looks like bars giving you an INT per level yeah",
    "start": "3223319",
    "end": "3229559"
  },
  {
    "text": "I'm not sure do you know why uh",
    "start": "3229559",
    "end": "3235819"
  },
  {
    "text": "oops",
    "start": "3238380",
    "end": "3240920"
  },
  {
    "text": "your name is not fair at this point did I forget total cost",
    "start": "3244079",
    "end": "3250640"
  },
  {
    "text": "I did forget oh is it is it the negative okay I did ah okay I did forget how to cast okay",
    "start": "3255800",
    "end": "3262859"
  },
  {
    "text": "and if we want that we now get we should get a false",
    "start": "3262859",
    "end": "3267800"
  },
  {
    "text": "and there we have it and this is now the faster version so this is now if we have",
    "start": "3268140",
    "end": "3273720"
  },
  {
    "text": "a look at the full full benchmarks again this is now the generated version which",
    "start": "3273720",
    "end": "3280740"
  },
  {
    "text": "is equal to the handheld version because the very same code has been emitted this naive check of just checking if any of",
    "start": "3280740",
    "end": "3288180"
  },
  {
    "text": "these values is the value that we got in any of these integers in that case and but we didn't have to um",
    "start": "3288180",
    "end": "3295619"
  },
  {
    "text": "actually write it so if we now if this enum would change the source generator would actually would actually update now",
    "start": "3295619",
    "end": "3302880"
  },
  {
    "text": "speaking about updating there is still one thing to left because currently we're not really use the incrementality",
    "start": "3302880",
    "end": "3308460"
  },
  {
    "text": "of this generator we just built the pipeline but we're not using its benefit just yet and I want to show this by",
    "start": "3308460",
    "end": "3315780"
  },
  {
    "text": "going back to the generator and at the top of the uh not file its",
    "start": "3315780",
    "end": "3321960"
  },
  {
    "text": "source let's write a comment",
    "start": "3321960",
    "end": "3328160"
  },
  {
    "text": "that prints the current date time",
    "start": "3328440",
    "end": "3332960"
  },
  {
    "text": "if we build that",
    "start": "3334260",
    "end": "3337220"
  },
  {
    "text": "and have a look at the example at the output",
    "start": "3343859",
    "end": "3350000"
  },
  {
    "text": "put these next to each other use the program now we have 11 14. time",
    "start": "3350099",
    "end": "3357480"
  },
  {
    "text": "is running out if I hit if I hit return just somewhere now the",
    "start": "3357480",
    "end": "3363599"
  },
  {
    "text": "source is generated The Source has been generated a new 15.40 but nothing really",
    "start": "3363599",
    "end": "3369900"
  },
  {
    "text": "has changed nothing relevant has changed we didn't add the enum hasn't changed the the type we didn't add another",
    "start": "3369900",
    "end": "3377339"
  },
  {
    "text": "attribute we didn't remove an attributes nothing relevant has changed so we create the same output again and this is",
    "start": "3377339",
    "end": "3382740"
  },
  {
    "text": "now what the incremental Source generator's power is for and this is by comparing so I'll be",
    "start": "3382740",
    "end": "3389640"
  },
  {
    "text": "adding now a comparer in within the pipeline",
    "start": "3389640",
    "end": "3397740"
  },
  {
    "text": "so let's jump to the pipeline before we collect",
    "start": "3397740",
    "end": "3403859"
  },
  {
    "text": "we have here an comparer which Compares all of these",
    "start": "3403859",
    "end": "3409079"
  },
  {
    "text": "elements and for the array does a sequence equal because the default this is actually what the default equality",
    "start": "3409079",
    "end": "3415380"
  },
  {
    "text": "does equal just all the members but then array isn't the default sequence equaled",
    "start": "3415380",
    "end": "3420720"
  },
  {
    "text": "so this is how we need to do it manually and if we rebuild that now we actually have the incrementality",
    "start": "3420720",
    "end": "3427859"
  },
  {
    "text": "in place so if we understand that after the compiler the",
    "start": "3427859",
    "end": "3435599"
  },
  {
    "text": "output of the of this um generation phase was the same as the",
    "start": "3435599",
    "end": "3441420"
  },
  {
    "text": "previous one before we hit enter Then it basically stops and reuses the previously emitted output whatever has",
    "start": "3441420",
    "end": "3448140"
  },
  {
    "text": "been cached and we don't we don't go into this method again and the evidence is here so if we have a",
    "start": "3448140",
    "end": "3455460"
  },
  {
    "text": "look at the generated file on the right hand side",
    "start": "3455460",
    "end": "3461460"
  },
  {
    "text": "and if I now hit enter the 11 16 28 should not update",
    "start": "3461460",
    "end": "3469140"
  },
  {
    "text": "and it doesn't but if I add another attribute if I actually change something relevant which",
    "start": "3469140",
    "end": "3474240"
  },
  {
    "text": "is mentioned in the pipeline and mentioned in the in the comparer let's add a string",
    "start": "3474240",
    "end": "3481819"
  },
  {
    "text": "comparison in comparison enum here and",
    "start": "3481819",
    "end": "3487800"
  },
  {
    "text": "I'm not even building it this tooling now automatically regenerates it we have a new time and we now also have",
    "start": "3487800",
    "end": "3496140"
  },
  {
    "text": "the string comparison is defined emitted but again if I remove some code which is",
    "start": "3496140",
    "end": "3501720"
  },
  {
    "text": "not relevant to the to the pipeline it will not update and this is the true power of the incremental generator and",
    "start": "3501720",
    "end": "3508920"
  },
  {
    "text": "the pipeline that we built so we need to build our pipelines efficiently so that caching can be used",
    "start": "3508920",
    "end": "3515960"
  },
  {
    "text": "and this concludes the example um here's a list of the best practices",
    "start": "3519720",
    "end": "3526380"
  },
  {
    "text": "we went through all of them and yeah if we want to get started all",
    "start": "3526380",
    "end": "3532559"
  },
  {
    "text": "the links are online I also put some more examples for example the community toolkits this is recently this is",
    "start": "3532559",
    "end": "3538619"
  },
  {
    "text": "recently and continuously updated with Source generator improvements recently with a lot of performance improvements",
    "start": "3538619",
    "end": "3543900"
  },
  {
    "text": "for example they moved the diagnostics from the generator to a specific to",
    "start": "3543900",
    "end": "3549960"
  },
  {
    "text": "analyzer in order to make the generator faster um I also have additional references and",
    "start": "3549960",
    "end": "3556440"
  },
  {
    "text": "videos if you if you want to know more about generators and now there is two minutes left for",
    "start": "3556440",
    "end": "3562980"
  },
  {
    "text": "questions um what I mentioned the beginning I for the first two questions I got one",
    "start": "3562980",
    "end": "3568380"
  },
  {
    "text": "Wireless license for you to score that I was given by checkpoints",
    "start": "3568380",
    "end": "3573798"
  },
  {
    "text": "um your type is a record time right in that case I used to record type it yeah so it should be good comparable",
    "start": "3579900",
    "end": "3586140"
  },
  {
    "text": "properties by uh technically technically yes but we have an array",
    "start": "3586140",
    "end": "3591720"
  },
  {
    "text": "the array array equals array does not do a sequence equal",
    "start": "3591720",
    "end": "3597799"
  },
  {
    "text": "and it's a it's a value type so it's barely ever equal",
    "start": "3598200",
    "end": "3604859"
  },
  {
    "text": "you wouldn't need that compare if say if you didn't have a collection yeah it",
    "start": "3604859",
    "end": "3610079"
  },
  {
    "text": "was just a normal record yes yes because the default the",
    "start": "3610079",
    "end": "3615420"
  },
  {
    "text": "default comparative is used is um I uh",
    "start": "3615420",
    "end": "3620760"
  },
  {
    "text": "is it comparative default um if that exists uh yeah so there is a",
    "start": "3620760",
    "end": "3626040"
  },
  {
    "text": "default comparing place which just does just does the I quotable dot equals invocation or the object overload if I",
    "start": "3626040",
    "end": "3632160"
  },
  {
    "text": "equals is implemented and that's the default if we have something special to do in our case the array we need to",
    "start": "3632160",
    "end": "3637980"
  },
  {
    "text": "write a custom copier",
    "start": "3637980",
    "end": "3644180"
  },
  {
    "text": "I think what was next I actually have the same question about it okay then",
    "start": "3645980",
    "end": "3653280"
  },
  {
    "text": "uh",
    "start": "3655319",
    "end": "3658319"
  },
  {
    "text": "I was using wider because it both have the advantages both have the",
    "start": "3666319",
    "end": "3671760"
  },
  {
    "text": "disadvantages I'm using wider because you can actually build it again and then",
    "start": "3671760",
    "end": "3678180"
  },
  {
    "text": "I don't need to restart wider and the new source Trader is picked up the feature studio if you change the source",
    "start": "3678180",
    "end": "3683460"
  },
  {
    "text": "generator because it's loaded at startup time of Visual Studio you need to restart with your studio if you change the source generator",
    "start": "3683460",
    "end": "3690480"
  },
  {
    "text": "um so this is for the for the actual integration part there's also unit tests for the unit tests you don't need them",
    "start": "3690480",
    "end": "3695819"
  },
  {
    "text": "because the idea they would send trust energy generator is loaded in memory and",
    "start": "3695819",
    "end": "3701280"
  },
  {
    "text": "I also link it in the slides so the unit test framework that I'm using is also",
    "start": "3701280",
    "end": "3706980"
  },
  {
    "text": "for Microsoft which is um microsoft.code analysis everything was Lane starts with microsoft.com code",
    "start": "3706980",
    "end": "3713640"
  },
  {
    "text": "analysis C sharp software does testing and for that you don't need to restart",
    "start": "3713640",
    "end": "3718980"
  },
  {
    "text": "Visual Studio but for the actual deployed version for the if you have the source generator in code then you need to restart it",
    "start": "3718980",
    "end": "3724920"
  },
  {
    "text": "um the advantage of visual studio is debugging there is a feature that you can actually have F5 debugging of a",
    "start": "3724920",
    "end": "3730200"
  },
  {
    "text": "generator you can't do this in in wider but since with unit tests you can debug",
    "start": "3730200",
    "end": "3735900"
  },
  {
    "text": "via unit tests so if we jump to any test let's have a",
    "start": "3735900",
    "end": "3743420"
  },
  {
    "text": "breakpoint anywhere go to the unit tests",
    "start": "3743420",
    "end": "3750140"
  },
  {
    "text": "and debug it then we will land there um but if you have loaded it as a component",
    "start": "3750480",
    "end": "3757799"
  },
  {
    "text": "as a nougat package then you can't debug it so those are the two biggest",
    "start": "3757799",
    "end": "3763880"
  },
  {
    "text": "differences that I saw but everything else is similar you can develop all of them both of them offer the you you can",
    "start": "3763880",
    "end": "3770760"
  },
  {
    "text": "drill down in so we yeah we did hit the breakpoint um this view here",
    "start": "3770760",
    "end": "3776040"
  },
  {
    "text": "is also available in visual studio and um yeah other than that they're quite",
    "start": "3776040",
    "end": "3781859"
  },
  {
    "text": "comparable yes",
    "start": "3781859",
    "end": "3787680"
  },
  {
    "text": "but one tiny question so when you use a generated code one of the annoyances is",
    "start": "3787680",
    "end": "3795180"
  },
  {
    "text": "if you want to go go to declaration and it's being done by a software generator",
    "start": "3795180",
    "end": "3800460"
  },
  {
    "text": "then very often it's found do you have anything for that this",
    "start": "3800460",
    "end": "3807000"
  },
  {
    "text": "works in both Visual Studio both with your students why they are aware of that so if I F12 that is defined I hit I",
    "start": "3807000",
    "end": "3813180"
  },
  {
    "text": "could hit F12 and I select because I do multi-targeting and also like the framework and I jump to the generated",
    "start": "3813180",
    "end": "3818940"
  },
  {
    "text": "code so both wide and visual studio you can do F12 into generated code with both",
    "start": "3818940",
    "end": "3825059"
  },
  {
    "text": "white and visual studio okay you just sometimes misbehave but generally it doesn't work for me so maybe uh I've got",
    "start": "3825059",
    "end": "3832020"
  },
  {
    "text": "an old version",
    "start": "3832020",
    "end": "3834619"
  },
  {
    "text": "maybe maybe yeah it may be Visual Studio yeah",
    "start": "3837799",
    "end": "3842838"
  }
]