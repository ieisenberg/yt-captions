[
  {
    "text": "okay thank you for coming uh welcome let's talk a bit about unit tests and",
    "start": "7500",
    "end": "13139"
  },
  {
    "text": "properties of unit test little disclaimer right up front um I won't be showing you any code over",
    "start": "13139",
    "end": "19440"
  },
  {
    "text": "so I won't be talking about exactly this is how you should write unit tests right so this is more about in General About",
    "start": "19440",
    "end": "24779"
  },
  {
    "text": "Properties we want to achieve to make them to make unit tests worth our while",
    "start": "24779",
    "end": "29820"
  },
  {
    "text": "to make them efficient and to get all the things out of them that we need out of unit tests",
    "start": "29820",
    "end": "37280"
  },
  {
    "text": "um let me introduce myself for a second my name is Anna matz I'm working as a",
    "start": "37980",
    "end": "43680"
  },
  {
    "text": "software engineer at tsuka engineering or at Zuki group um I've been learning and using C plus",
    "start": "43680",
    "end": "50520"
  },
  {
    "text": "plus for almost two almost two decades almost 20 years um I say learning because well um as you",
    "start": "50520",
    "end": "57059"
  },
  {
    "text": "probably know you never stop learning because there's always something new in C plus and something alt you didn't know",
    "start": "57059",
    "end": "62280"
  },
  {
    "text": "yet um regardless I've I'm a trainer for C plus plus and for the clean code um",
    "start": "62280",
    "end": "70439"
  },
  {
    "text": "area of topics um internally at our organization but also externally and as a freelancer",
    "start": "70439",
    "end": "78320"
  },
  {
    "text": "so um I will not give you another definition of what a unit test is but",
    "start": "79020",
    "end": "85220"
  },
  {
    "text": "since we are talking about unit tests um I think we need some common understanding what at least what I am",
    "start": "85220",
    "end": "91080"
  },
  {
    "text": "talking about when I say unit test so this is a what cloud that I gathered by looking up unit test definitions on",
    "start": "91080",
    "end": "99180"
  },
  {
    "text": "Google I took like the 21st definitions I came across I put them in the word cloud generator this is what it came up",
    "start": "99180",
    "end": "105119"
  },
  {
    "text": "with so obviously there's unit and test in there so I reduce all the the",
    "start": "105119",
    "end": "111600"
  },
  {
    "text": "um the plurals the singularize to make it a bit more readable to not have like units and units and and stuff like that",
    "start": "111600",
    "end": "117180"
  },
  {
    "text": "but what you also see is like there's software in there but there is then module component function subrouting",
    "start": "117180",
    "end": "124700"
  },
  {
    "text": "stuff like that in there all right and there is like parts and pieces",
    "start": "124700",
    "end": "130800"
  },
  {
    "text": "um what I think is important is down here the individual isolated so this already gives us a first hint at",
    "start": "130800",
    "end": "137940"
  },
  {
    "text": "what unit tests are about like having the isolated parts and testing them",
    "start": "137940",
    "end": "144080"
  },
  {
    "text": "also important is um automated so those are not manual tests",
    "start": "144080",
    "end": "151620"
  },
  {
    "text": "um like by incidence like you're close together written by the developer",
    "start": "151620",
    "end": "158640"
  },
  {
    "text": "so um when I talk about unit tests what I mean",
    "start": "158640",
    "end": "163920"
  },
  {
    "text": "about that what I mean and what most of these definitions agree on is unit tests",
    "start": "163920",
    "end": "169500"
  },
  {
    "text": "are automated by the programmer usually using some kind of unit test",
    "start": "169500",
    "end": "174840"
  },
  {
    "text": "framework but not necessarily so you can write unit tests on your own like using just asserts",
    "start": "174840",
    "end": "180720"
  },
  {
    "text": "but usually you want to use a uni test framework like g-tests catch boost test I think I think those",
    "start": "180720",
    "end": "189180"
  },
  {
    "text": "are the three most popular ones in C plus plus at least if you're not coming from C plus plus",
    "start": "189180",
    "end": "195000"
  },
  {
    "text": "there are other testing Frameworks but I think all the languages have their their unit test Frameworks",
    "start": "195000",
    "end": "201120"
  },
  {
    "text": "um unit tests cover the entire software so not in one test but all the tests",
    "start": "201120",
    "end": "208319"
  },
  {
    "text": "together cover at least a huge amount of our classes functions and so on in our software",
    "start": "208319",
    "end": "214440"
  },
  {
    "text": "so we need a big coverage and they test individual units",
    "start": "214440",
    "end": "220440"
  },
  {
    "text": "or whatever a unit is so the other part about this is what is",
    "start": "220440",
    "end": "226080"
  },
  {
    "text": "a unit is a small and individually and logically separated piece of code",
    "start": "226080",
    "end": "232980"
  },
  {
    "text": "still doesn't say is it a function is it the class something like that it can be a functional it can be a class",
    "start": "232980",
    "end": "238739"
  },
  {
    "text": "some of the definitions say it's a module or a sub module or a component it",
    "start": "238739",
    "end": "244680"
  },
  {
    "text": "can also be like a smaller group of classes think about for example standard",
    "start": "244680",
    "end": "250200"
  },
  {
    "text": "containers if you have a vector you cannot really have a vector without without using the iterators right which",
    "start": "250200",
    "end": "255659"
  },
  {
    "text": "is a different class it belongs together so the two classes together form a unit",
    "start": "255659",
    "end": "262639"
  },
  {
    "text": "um there is the testing pyramids and again like there are a couple of different",
    "start": "265199",
    "end": "271139"
  },
  {
    "text": "versions but all of them have basically the unit tests in the bottom which is the basis of the",
    "start": "271139",
    "end": "277440"
  },
  {
    "text": "testing pyramids because the unit tests are the ones that go really into the details of each individual unit",
    "start": "277440",
    "end": "286560"
  },
  {
    "text": "and then above that we have and and the unit tests have like the the broad base",
    "start": "286560",
    "end": "291840"
  },
  {
    "text": "because they have the big coverage and then above that we have the integration test in most cases if you see those",
    "start": "291840",
    "end": "297240"
  },
  {
    "text": "pyramids not in every case um so integration tests",
    "start": "297240",
    "end": "303000"
  },
  {
    "text": "um at least how I talk about them are tests where I would take like different units and put",
    "start": "303000",
    "end": "309419"
  },
  {
    "text": "them together and see that they play well together because um if you have like this class and that class and that function and",
    "start": "309419",
    "end": "315660"
  },
  {
    "text": "every everyone each of the functions and classes works well that doesn't mean that they work well together so you have to integrate them",
    "start": "315660",
    "end": "323400"
  },
  {
    "text": "and those other integration tests typically also written by the programmer typically",
    "start": "323400",
    "end": "329220"
  },
  {
    "text": "also using like unit testing Frameworks and above that we have like a plethora",
    "start": "329220",
    "end": "334380"
  },
  {
    "text": "of different kinds of tests that have like different names depending on what kind of systems you work on whether",
    "start": "334380",
    "end": "340500"
  },
  {
    "text": "you're working on a signal application or whether you're working on a big embedded device where you have like multiple Services running in parallel so",
    "start": "340500",
    "end": "347580"
  },
  {
    "text": "like testing a single servers testing all the services testing the whole device like there's like different namings depending on on which context",
    "start": "347580",
    "end": "354360"
  },
  {
    "text": "you're in so but since we are not talking about",
    "start": "354360",
    "end": "360000"
  },
  {
    "text": "those that tip of the pyramid we're talking about unit tests and maybe the distinction to integration tests to you",
    "start": "360000",
    "end": "366479"
  },
  {
    "text": "to uh to make it clear where you draw the boundaries",
    "start": "366479",
    "end": "372500"
  },
  {
    "text": "so unit tests are one of the many tools we have in our toolbox right so we even have like different amounts of different",
    "start": "373440",
    "end": "379560"
  },
  {
    "text": "kinds of tests as we have seen just seen so if you have like this toolbox with all",
    "start": "379560",
    "end": "384900"
  },
  {
    "text": "the different tools what do we use in this specific tool for",
    "start": "384900",
    "end": "390319"
  },
  {
    "text": "um pretty obvious what comes to mind first is quality assurance",
    "start": "391979",
    "end": "397199"
  },
  {
    "text": "usually thinking about we write a new feature we want to test this new feature",
    "start": "397199",
    "end": "402300"
  },
  {
    "text": "to actually make sure that the new feature does what it what it is supposed to be doing in this case for units we have a new",
    "start": "402300",
    "end": "409440"
  },
  {
    "text": "unit we have write a new class write a new function so we want to make sure that it actually",
    "start": "409440",
    "end": "415380"
  },
  {
    "text": "does what we design it to do or what what we want it to do",
    "start": "415380",
    "end": "421919"
  },
  {
    "text": "um what's also important is when the unit test fails that it actually documents",
    "start": "421919",
    "end": "427860"
  },
  {
    "text": "what's wrong because like running a suite of like 5000 unit tests and then just computers",
    "start": "427860",
    "end": "433319"
  },
  {
    "text": "has no great what do I do now right so we won't really want to see what is failing here",
    "start": "433319",
    "end": "439199"
  },
  {
    "text": "and we get to that later to what the actual documentation of failures entails",
    "start": "439199",
    "end": "446418"
  },
  {
    "text": "then we have test driven development who in here practices test driven development",
    "start": "448139",
    "end": "454740"
  },
  {
    "text": "sometimes regularly okay",
    "start": "454740",
    "end": "460199"
  },
  {
    "text": "yeah so there are multiple definitions for test driven development as well um",
    "start": "460199",
    "end": "465440"
  },
  {
    "text": "usually it goes into the direction of well at least test First Development the idea is",
    "start": "465440",
    "end": "472080"
  },
  {
    "text": "um I know roughly what kind of unit or class or function I want to write so I",
    "start": "472080",
    "end": "477840"
  },
  {
    "text": "want to I write the tests for that first which basically pins down how I want it to be used",
    "start": "477840",
    "end": "483960"
  },
  {
    "text": "and then I compile and run the test and of course it doesn't compile it first because if I have a new function and I",
    "start": "483960",
    "end": "489000"
  },
  {
    "text": "just use a function it doesn't exist and the compiler says well the function doesn't exist so I'll write the function and I make the tests green I make it",
    "start": "489000",
    "end": "497099"
  },
  {
    "text": "that single test that I've just written I make it green I make it run then I write the next test for a different",
    "start": "497099",
    "end": "503099"
  },
  {
    "text": "aspect of the same function or different method of the same object class and stuff like that",
    "start": "503099",
    "end": "508319"
  },
  {
    "text": "and I make that green again and we have these red green refactor",
    "start": "508319",
    "end": "513959"
  },
  {
    "text": "Cycles I'll write a test it's red I'll write the necessary functionality to make it pass and then in that kind of",
    "start": "513959",
    "end": "521940"
  },
  {
    "text": "development very important Theory Factor part because if I just write next test make it green next test make it green",
    "start": "521940",
    "end": "528180"
  },
  {
    "text": "then my code gets messy really quickly so I consciously have to go and do this refactoring to clean it up again",
    "start": "528180",
    "end": "535320"
  },
  {
    "text": "and typically these red green reflector Cycles are said to be in the order of",
    "start": "535320",
    "end": "542220"
  },
  {
    "text": "minutes so um there are people that say well if you are really good and really quick then you can do this in like 30",
    "start": "542220",
    "end": "548519"
  },
  {
    "text": "seconds maybe if you're working on a compiled",
    "start": "548519",
    "end": "553560"
  },
  {
    "text": "language and maybe on a slow computer that can be take like compiling along can take more than 30 seconds but it",
    "start": "553560",
    "end": "559320"
  },
  {
    "text": "shouldn't take more like than like five or ten minutes or something like that one cycle so um",
    "start": "559320",
    "end": "566519"
  },
  {
    "text": "this is applications for our unit test as well for the tests we are using here",
    "start": "566519",
    "end": "572240"
  },
  {
    "text": "um when fixing bugs we use unit tests because usually we want to know that we actually have fixed the box so we were",
    "start": "572940",
    "end": "579720"
  },
  {
    "text": "just want to write a test that reproduces a bug preferably well usually we start with",
    "start": "579720",
    "end": "586200"
  },
  {
    "text": "like a big feature test or something like that that in in the grand scheme of things reproduces a bug but we try to",
    "start": "586200",
    "end": "592920"
  },
  {
    "text": "nail it down to that single unit or to um the two or three units are played together that have actually gotten the",
    "start": "592920",
    "end": "599040"
  },
  {
    "text": "bug where the where the actual behavior is is hidden that is wrong so",
    "start": "599040",
    "end": "605160"
  },
  {
    "text": "we usually try to write a unit test for those units and to pin down the wrong",
    "start": "605160",
    "end": "610380"
  },
  {
    "text": "Behavior or in that case to make a test that should pass when we have fixed the",
    "start": "610380",
    "end": "615540"
  },
  {
    "text": "buck so this is another use case where we can use unit tests",
    "start": "615540",
    "end": "620700"
  },
  {
    "text": "and to make this worth our while we usually don't want to like trying to fix",
    "start": "620700",
    "end": "626339"
  },
  {
    "text": "a bug and and especially if it's like something complicated where we have to do multiple iterations of fixing the",
    "start": "626339",
    "end": "633240"
  },
  {
    "text": "buck and trying again we usually want to just run the single test case or a couple of test cases and not run to run",
    "start": "633240",
    "end": "639600"
  },
  {
    "text": "or or a whole test Suite right so we want to be able to select some of these cases we want to able to to filter our",
    "start": "639600",
    "end": "646920"
  },
  {
    "text": "test cases to actually only run what is important right now for",
    "start": "646920",
    "end": "651959"
  },
  {
    "text": "for bug fixes and this selecting specific test cases is not only important for bug fixes but also for for",
    "start": "651959",
    "end": "658860"
  },
  {
    "text": "other kinds of work refactoring is another use case for unit",
    "start": "658860",
    "end": "663899"
  },
  {
    "text": "tests refactoring means we are changing our code without changing its actual",
    "start": "663899",
    "end": "670019"
  },
  {
    "text": "Behavior so cleaning up codes making it more readable changing names maybe",
    "start": "670019",
    "end": "676019"
  },
  {
    "text": "replacing follows with standard algorithms stuff like that right not changing of the behavior means well",
    "start": "676019",
    "end": "683220"
  },
  {
    "text": "we should be running our test continuously to check that we didn't by accident change any Behavior",
    "start": "683220",
    "end": "689820"
  },
  {
    "text": "because if you like factor out stuff and maybe invert an if condition or invert",
    "start": "689820",
    "end": "695279"
  },
  {
    "text": "the the booleans and NF Condition it's really easy to make a mistake and if like two days later you end up oh um",
    "start": "695279",
    "end": "701760"
  },
  {
    "text": "something happened here I did something wrong well you want to run your unit tests",
    "start": "701760",
    "end": "707279"
  },
  {
    "text": "relatively often so for this kind of refactoring you want",
    "start": "707279",
    "end": "712560"
  },
  {
    "text": "to do refactoring in relatively small steps so you have like these feedback loops",
    "start": "712560",
    "end": "717959"
  },
  {
    "text": "if I say Okay um so this is a story I I had in the past um when I actually didn't know that",
    "start": "717959",
    "end": "724980"
  },
  {
    "text": "where I said okay we have like this very old code base and we are using this this handwritten iterator classes all over",
    "start": "724980",
    "end": "731820"
  },
  {
    "text": "the place and those handwritten iterator classes were basically taking out of the very first edition of The Gang of 4",
    "start": "731820",
    "end": "737940"
  },
  {
    "text": "design pattern book which means they had like a Java interface if there's a next then go to get the next and then iterate",
    "start": "737940",
    "end": "744959"
  },
  {
    "text": "increase and stuff like that instead of what we usually use these days in C plus plus plus operator and the referencing",
    "start": "744959",
    "end": "752940"
  },
  {
    "text": "operator and stuff like that so those kinds of iterators would not be usable at all in standard algorithms and stuff",
    "start": "752940",
    "end": "758339"
  },
  {
    "text": "like that so I said well we have these old iterator classes all over the place let's just go ahead and replace them",
    "start": "758339",
    "end": "764639"
  },
  {
    "text": "with new iterator classes so what I did was basically I ripped apart the complete code base I threw out all the",
    "start": "764639",
    "end": "770639"
  },
  {
    "text": "old guitars wrote new iterators piece it together again and like two weeks later I got finally finally got to",
    "start": "770639",
    "end": "777060"
  },
  {
    "text": "compile it and then all the tests were broken",
    "start": "777060",
    "end": "782639"
  },
  {
    "text": "and it took me like one and a half weeks more to actually debug and find out what was broken",
    "start": "782639",
    "end": "789079"
  },
  {
    "text": "if you do this in short Loops like let me just do a five minute refactoring",
    "start": "789480",
    "end": "795180"
  },
  {
    "text": "it compiles this one test is broken then you usually know what you have done in the last five minutes to break this",
    "start": "795180",
    "end": "801720"
  },
  {
    "text": "specific test right so um and if you don't then you can just roll back and say okay those five minutes have been",
    "start": "801720",
    "end": "807899"
  },
  {
    "text": "wasted but if you've done so for like two days or for two weeks then you just don't okay yeah I just throw it all away",
    "start": "807899",
    "end": "814740"
  },
  {
    "text": "inside over where I was like last Monday so these short Cycles help in actually",
    "start": "814740",
    "end": "821459"
  },
  {
    "text": "not waste time and in keeping track um I'm still on track have I broken anything",
    "start": "821459",
    "end": "827639"
  },
  {
    "text": "um so um here again we want to have like Fast unit tests for um the",
    "start": "827639",
    "end": "833880"
  },
  {
    "text": "for those feedback Cycles and this may be a surprise to some at",
    "start": "833880",
    "end": "841320"
  },
  {
    "text": "least um not everybody has I've talked into has considered this maybe not",
    "start": "841320",
    "end": "847200"
  },
  {
    "text": "everybody agrees with this unitists unit tests and test in general",
    "start": "847200",
    "end": "853019"
  },
  {
    "text": "can be taken to be documentation if I have a look at my unit tests well",
    "start": "853019",
    "end": "859800"
  },
  {
    "text": "those tests usually have been written by the same person who has written those functions and classes",
    "start": "859800",
    "end": "866519"
  },
  {
    "text": "and if I have a look at those unit tests then I see how the author has designed",
    "start": "866519",
    "end": "873779"
  },
  {
    "text": "or had in mind how this class and this function has to be used I may see that elsewhere in the code",
    "start": "873779",
    "end": "880560"
  },
  {
    "text": "base but I also may see also in the code base how other people thought it had to be used and it was completely different",
    "start": "880560",
    "end": "886380"
  },
  {
    "text": "to what the author in internet in in when designing this class so this unit tests they show how it is",
    "start": "886380",
    "end": "893760"
  },
  {
    "text": "intended to be used and um ideally you know yes",
    "start": "893760",
    "end": "901220"
  },
  {
    "text": "in the documentation yes",
    "start": "906560",
    "end": "911180"
  },
  {
    "text": "so yes I I really like that um so in in Python and I think in Haskell as well and stuff like that you have like um you",
    "start": "915300",
    "end": "921720"
  },
  {
    "text": "can just put the test into the class or just inside the code um or in the comments on the code and and the testing",
    "start": "921720",
    "end": "927180"
  },
  {
    "text": "frame adjustable interpret us testing this is not to my knowledge existing and",
    "start": "927180",
    "end": "933060"
  },
  {
    "text": "C plus plus um I know I don't know if doc test does this yes so this may something in that",
    "start": "933060",
    "end": "939660"
  },
  {
    "text": "direction right so um yeah so I I get I from what I",
    "start": "939660",
    "end": "944820"
  },
  {
    "text": "gather from doctors I have never used it I've just um seen a bit of this documentation it's um",
    "start": "944820",
    "end": "950760"
  },
  {
    "text": "it has been implemented in in with that in mind to actually mimic this kind of thing to you to have it in the",
    "start": "950760",
    "end": "956699"
  },
  {
    "text": "documentation yeah so um",
    "start": "956699",
    "end": "962579"
  },
  {
    "text": "but therefore to actually have to test this documentation we want to have the tests co-located with the code right so",
    "start": "962579",
    "end": "968760"
  },
  {
    "text": "we don't want to have like um very far apart and and just especially not in a completely different Repository",
    "start": "968760",
    "end": "975480"
  },
  {
    "text": "so if you have the code you want to have the documentation and the test for the code more or less at the same location",
    "start": "975480",
    "end": "982339"
  },
  {
    "text": "so like with these five use cases we had so",
    "start": "983639",
    "end": "989100"
  },
  {
    "text": "um correctness of our new features um fixing our bugs maybe test driven development even if you don't practice",
    "start": "989100",
    "end": "995100"
  },
  {
    "text": "this right now maybe you can get the taste of it um refactoring and documentation",
    "start": "995100",
    "end": "1003199"
  },
  {
    "text": "um what are the properties that we need our unit tests to have to actually make",
    "start": "1003199",
    "end": "1008959"
  },
  {
    "text": "them work for those use cases to make them the right the right tool for those use cases",
    "start": "1008959",
    "end": "1015399"
  },
  {
    "text": "um so it comes now please don't take this as me preaching",
    "start": "1016699",
    "end": "1021920"
  },
  {
    "text": "any rules or stuff like that um some of these things I will be mentioning um",
    "start": "1021920",
    "end": "1027319"
  },
  {
    "text": "seem to be considered best practices but they are not rules they are not",
    "start": "1027319",
    "end": "1033020"
  },
  {
    "text": "guidelines I don't say you have to do it like this take it into account it may or may not",
    "start": "1033020",
    "end": "1039020"
  },
  {
    "text": "work for you right these are just food for thought be pragmatic some of these things see",
    "start": "1039020",
    "end": "1047058"
  },
  {
    "text": "may seem well um overly detailed and and things that just",
    "start": "1047059",
    "end": "1053720"
  },
  {
    "text": "don't apply to you because um maybe you don't have that bigger test base or you don't have that bigger code",
    "start": "1053720",
    "end": "1059059"
  },
  {
    "text": "base or things in here are not of a concern for you so take everything I say and over the",
    "start": "1059059",
    "end": "1065179"
  },
  {
    "text": "grain of salt so we had a few of these check marks before",
    "start": "1065179",
    "end": "1071240"
  },
  {
    "text": "in the in the in the use cases right we want to be to have correctness for our code",
    "start": "1071240",
    "end": "1077120"
  },
  {
    "text": "but also for our tests because if the tests aren't correct then probably the code can't be correct or we can't say",
    "start": "1077120",
    "end": "1083720"
  },
  {
    "text": "whether the code is correct or not um having correct tests of course improve the",
    "start": "1083720",
    "end": "1090080"
  },
  {
    "text": "confidence that our code is correct as well right um to have correct tests don't reproduce",
    "start": "1090080",
    "end": "1098120"
  },
  {
    "text": "logic I've seen test cases and code logic where someone well very",
    "start": "1098120",
    "end": "1104960"
  },
  {
    "text": "simplified example imagine you write a function that says okay these numbers are odd and these",
    "start": "1104960",
    "end": "1111799"
  },
  {
    "text": "numbers are even and you insert a typo so you say if I",
    "start": "1111799",
    "end": "1117200"
  },
  {
    "text": "modulo 3 instead of modular 2 is 0 then it's uh even else it's odd",
    "start": "1117200",
    "end": "1123799"
  },
  {
    "text": "and then okay now I have to write unit tests well let's just come up with a list of",
    "start": "1123799",
    "end": "1129440"
  },
  {
    "text": "numbers and then I copy paste my code if imodue 3 is even is zero then it's even",
    "start": "1129440",
    "end": "1134539"
  },
  {
    "text": "else is odd the unit test will be green because you just copy pasted the the actual logic you're using right",
    "start": "1134539",
    "end": "1141080"
  },
  {
    "text": "so you will get like one is odd two is odd three is even four is what",
    "start": "1141080",
    "end": "1146660"
  },
  {
    "text": "and if you don't have a second look you will never come across this error",
    "start": "1146660",
    "end": "1151700"
  },
  {
    "text": "if you actually go ahead and say okay I don't reproduce my logic I will just",
    "start": "1151700",
    "end": "1156740"
  },
  {
    "text": "want to know I will just test with known examples that my logic reproduces those examples",
    "start": "1156740",
    "end": "1165320"
  },
  {
    "text": "um then I can go ahead and say okay my tests now are relatively simple and I",
    "start": "1165320",
    "end": "1170840"
  },
  {
    "text": "have known values and I can just put in well 500 has to be even and then see if my unit tests if if the",
    "start": "1170840",
    "end": "1178160"
  },
  {
    "text": "algorithm I've used reproduces that desired behavior that I know to be true",
    "start": "1178160",
    "end": "1184779"
  },
  {
    "text": "um don't have too complex logic in there",
    "start": "1187820",
    "end": "1192919"
  },
  {
    "text": "so if they are like if and else and stuff like that in your unit test maybe",
    "start": "1192919",
    "end": "1198200"
  },
  {
    "text": "those are just different test cases if you boil it really down just",
    "start": "1198200",
    "end": "1205460"
  },
  {
    "text": "input constants and expect constants out of them don't just say well I have this bunch of",
    "start": "1205460",
    "end": "1211220"
  },
  {
    "text": "constants and if this constant is even or if this constant is divisible by five then I want to have this behavior on",
    "start": "1211220",
    "end": "1216860"
  },
  {
    "text": "that behavior you just say Okay um so a very",
    "start": "1216860",
    "end": "1222320"
  },
  {
    "text": "example bye bye bye for example by Kevin Henny you just when he talks about unit tests",
    "start": "1222320",
    "end": "1228740"
  },
  {
    "text": "talk about um whether a a year has a has a gap year",
    "start": "1228740",
    "end": "1234260"
  },
  {
    "text": "so it has a has an additional day on February it depends on whether it's divisible by four if it's divisible by 4",
    "start": "1234260",
    "end": "1240740"
  },
  {
    "text": "by 100 and divisible by 400 right and he just makes different test cases for all",
    "start": "1240740",
    "end": "1247640"
  },
  {
    "text": "these cases and then you can just throw in a bunch of numbers that fit into the test case and say and the outcome is",
    "start": "1247640",
    "end": "1254179"
  },
  {
    "text": "true or false and the outcome is that this or that and you don't need to have loops and ifs",
    "start": "1254179",
    "end": "1261740"
  },
  {
    "text": "and else's and stuff like that because well the more complex your unit test code gets",
    "start": "1261740",
    "end": "1268220"
  },
  {
    "text": "the more likely you are to actually build in some errors and who is going to test the tests",
    "start": "1268220",
    "end": "1276400"
  },
  {
    "text": "um then we have this thing of gray box testing so",
    "start": "1282860",
    "end": "1289640"
  },
  {
    "text": "um some people say you should do be doing Black Box testing some people said you",
    "start": "1289640",
    "end": "1296360"
  },
  {
    "text": "say you should be doing white box testing so gray box is the thing in the middle Black Box means um you just don't",
    "start": "1296360",
    "end": "1302059"
  },
  {
    "text": "know anything about the inner workings of your class or functional stuff like that you just test against the API",
    "start": "1302059",
    "end": "1307840"
  },
  {
    "text": "that's black box white box is basically you can actually",
    "start": "1307840",
    "end": "1313280"
  },
  {
    "text": "inspect everything that's inside your class I would say go the middle way",
    "start": "1313280",
    "end": "1318320"
  },
  {
    "text": "unit tests should not be friends because if you have like unit tests being friends and being able to actually reach",
    "start": "1318320",
    "end": "1324559"
  },
  {
    "text": "into your classes and touch member variables only to observe member variables and stuff like that then it makes it really hard to actually",
    "start": "1324559",
    "end": "1330860"
  },
  {
    "text": "refactor your class because remember we want to refactor all the",
    "start": "1330860",
    "end": "1335960"
  },
  {
    "text": "stuff without touching the test because the tests are making sure that our classes our Behavior stays the same",
    "start": "1335960",
    "end": "1343400"
  },
  {
    "text": "and if we remove a member variable or rename it or replace it with something else",
    "start": "1343400",
    "end": "1349400"
  },
  {
    "text": "and we have to touch our tests we really run the risk that we are actually",
    "start": "1349400",
    "end": "1355100"
  },
  {
    "text": "making the test work again because um then they're wrong because we introduce",
    "start": "1355100",
    "end": "1360860"
  },
  {
    "text": "wrong behavior in the class and at the same time we introduce wrong testing in test cases",
    "start": "1360860",
    "end": "1366080"
  },
  {
    "text": "so tests only against the interface and the class should be fine um",
    "start": "1366080",
    "end": "1372559"
  },
  {
    "text": "however knowing the implementation of our class we can test against edge cases",
    "start": "1372559",
    "end": "1377840"
  },
  {
    "text": "inside the implementation so this is the gray part of this gray",
    "start": "1377840",
    "end": "1382880"
  },
  {
    "text": "box testing so for example let's say you write your own string class that has a",
    "start": "1382880",
    "end": "1388340"
  },
  {
    "text": "short string optimization so we have a small buffer in that and if the string is smaller then you just use a buffer",
    "start": "1388340",
    "end": "1393860"
  },
  {
    "text": "and if it's larger then you allocate memory if you know how large the buffer is then",
    "start": "1393860",
    "end": "1399080"
  },
  {
    "text": "you can you write a test case for exactly that size of the string and for one larger to actually make sure that in",
    "start": "1399080",
    "end": "1405380"
  },
  {
    "text": "this transition from the buffer to the allocated memory your string class really behaves the same this is inner",
    "start": "1405380",
    "end": "1412159"
  },
  {
    "text": "knowledge of the implementation and you write test cases to make sure that these boundaries are okay but still you don't",
    "start": "1412159",
    "end": "1418700"
  },
  {
    "text": "touch and you don't actively observe the implementation details",
    "start": "1418700",
    "end": "1425500"
  },
  {
    "text": "um to make sure that everything or as much as possible works well we want to have",
    "start": "1428840",
    "end": "1435200"
  },
  {
    "text": "code coverage which means um well we want to cover as much as",
    "start": "1435200",
    "end": "1442220"
  },
  {
    "text": "possible um there are people out there saying we want to have a 100 code coverage",
    "start": "1442220",
    "end": "1448940"
  },
  {
    "text": "if you're writing an application and you're having something having a language like C plus",
    "start": "1448940",
    "end": "1455299"
  },
  {
    "text": "um I just assume that many people in here are using C plus um you can't really unit test or test at",
    "start": "1455299",
    "end": "1461360"
  },
  {
    "text": "all the main function you can't cut main function with tests like this because you just can't call it from anywhere",
    "start": "1461360",
    "end": "1467120"
  },
  {
    "text": "the only way to test the actual main function is to just um compile the whole program and test the whole program but",
    "start": "1467120",
    "end": "1473000"
  },
  {
    "text": "this is not down in the unit test or integration test level right so you can't have a 100 code coverage in many",
    "start": "1473000",
    "end": "1478640"
  },
  {
    "text": "cases there are other things that I will touch later that are not really possible or not",
    "start": "1478640",
    "end": "1485059"
  },
  {
    "text": "worthwhile to actually test in that fine granularity so go for a good enough code coverage",
    "start": "1485059",
    "end": "1493600"
  },
  {
    "text": "there are tools like sonar Cube coverity I don't know which else um that tell you",
    "start": "1493600",
    "end": "1500480"
  },
  {
    "text": "this is your code coverage and you should go to whatever 95 98 or something",
    "start": "1500480",
    "end": "1506000"
  },
  {
    "text": "like that uh don't just listen to those tools because people will then just play the",
    "start": "1506000",
    "end": "1511880"
  },
  {
    "text": "metrics right you have enough coverage when you have covered everything you can cover",
    "start": "1511880",
    "end": "1517100"
  },
  {
    "text": "you don't have enough coverage when the Tool says yeah 95 you have covered everything you need",
    "start": "1517100",
    "end": "1522740"
  },
  {
    "text": "well there may be gaps and Beyond the 95 percent that you can unit test and then",
    "start": "1522740",
    "end": "1528620"
  },
  {
    "text": "you should also test them to improve the confidence in the code right",
    "start": "1528620",
    "end": "1534640"
  },
  {
    "text": "if you actually can't test something for whatever reason",
    "start": "1534740",
    "end": "1540020"
  },
  {
    "text": "think about documenting the gaps because if there's someone going and say well we had 97 I want to go to 98 or maybe 99",
    "start": "1540020",
    "end": "1547640"
  },
  {
    "text": "and goes through all the uncovered pieces of code and actually tries to to",
    "start": "1547640",
    "end": "1553220"
  },
  {
    "text": "to find some way to test them to cover them if you tried and didn't succeed",
    "start": "1553220",
    "end": "1559279"
  },
  {
    "text": "maybe leave a comment at the section and say I tried to cover this by this in this way it didn't work so",
    "start": "1559279",
    "end": "1566120"
  },
  {
    "text": "um maybe don't try it maybe don't waste your time to actually try to cover this kind of part of code",
    "start": "1566120",
    "end": "1572380"
  },
  {
    "text": "um this gives especially in the direction of C plus plus but I think this also",
    "start": "1576860",
    "end": "1582500"
  },
  {
    "text": "applies to to um to other classes use strong types don't lose strings and",
    "start": "1582500",
    "end": "1588200"
  },
  {
    "text": "integers everywhere um let's say what's a street name it",
    "start": "1588200",
    "end": "1594140"
  },
  {
    "text": "street name is string right it's just a bunch of characters can a street name be empty does it make",
    "start": "1594140",
    "end": "1599299"
  },
  {
    "text": "sense so does the empty string make sense as a street name probably not so if you have functionality that has to",
    "start": "1599299",
    "end": "1605960"
  },
  {
    "text": "deal with addresses with street names um should the functionality everywhere",
    "start": "1605960",
    "end": "1611779"
  },
  {
    "text": "have to check for empty strings should it be able to deal with empty strings or just should it be",
    "start": "1611779",
    "end": "1617960"
  },
  {
    "text": "just able to deal with a street name so if you have a proper type that says this",
    "start": "1617960",
    "end": "1623000"
  },
  {
    "text": "is a street name and when constructing objects of that type you do the actual check this is an",
    "start": "1623000",
    "end": "1628520"
  },
  {
    "text": "empty string can I actually make this a street name or is it something that is just invalid for this for this type",
    "start": "1628520",
    "end": "1633919"
  },
  {
    "text": "then you have the check at one location and you have to test that one location if you use a string wherever you need",
    "start": "1633919",
    "end": "1640340"
  },
  {
    "text": "street names then all your classes that take that string as a street name have",
    "start": "1640340",
    "end": "1645740"
  },
  {
    "text": "to check is it empty and have to maybe deal with the fact that it's empty and then you have to write tests that all",
    "start": "1645740",
    "end": "1652159"
  },
  {
    "text": "those classes are able to actually throw the correct error or give you the correct warning or whatever when they",
    "start": "1652159",
    "end": "1659179"
  },
  {
    "text": "get past an empty street name right so having",
    "start": "1659179",
    "end": "1664279"
  },
  {
    "text": "stronger types having having types for for all your different kinds of domain",
    "start": "1664279",
    "end": "1670400"
  },
  {
    "text": "objects um not only makes it these the design better and and easier to work with",
    "start": "1670400",
    "end": "1677539"
  },
  {
    "text": "because you don't have to do all these out of bound checks and stuff like that everywhere but only when constructing",
    "start": "1677539",
    "end": "1682940"
  },
  {
    "text": "that actual type um it also makes the amount of testing",
    "start": "1682940",
    "end": "1689419"
  },
  {
    "text": "much less because you don't have to test for all those error cases everywhere because they just can't happen anymore",
    "start": "1689419",
    "end": "1696400"
  },
  {
    "text": "so now I've covered the correctness part",
    "start": "1702260",
    "end": "1707419"
  },
  {
    "text": "the next property we would like to have is readability because um the first thing we had or one of the",
    "start": "1707419",
    "end": "1714320"
  },
  {
    "text": "things we had was as documentation but",
    "start": "1714320",
    "end": "1719360"
  },
  {
    "text": "um also when our test is failing we want to see why it's failing and we want to have readable tests right so all the the",
    "start": "1719360",
    "end": "1726620"
  },
  {
    "text": "clean code principles and stuff like that they don't only apply to the production code they also apply to the",
    "start": "1726620",
    "end": "1731659"
  },
  {
    "text": "test code and I see many people who say well um this is only test code I can just be lazy and write sloppy code in",
    "start": "1731659",
    "end": "1738020"
  },
  {
    "text": "there when you are debugging and figuring trying to figure out why the test failed um then you are really",
    "start": "1738020",
    "end": "1744679"
  },
  {
    "text": "grateful if someone has written actually readable and maintainable test code",
    "start": "1744679",
    "end": "1750158"
  },
  {
    "text": "so well as I said use design principles um have meaningful names in your test",
    "start": "1753740",
    "end": "1759740"
  },
  {
    "text": "cases if you're running your tote your your um your unit tests and you see test",
    "start": "1759740",
    "end": "1767360"
  },
  {
    "text": "number 22 has failed and then you have to find test number 22 first and look into test number 22 to",
    "start": "1767360",
    "end": "1773600"
  },
  {
    "text": "actually find out what it's testing if um you have a code that says well um",
    "start": "1773600",
    "end": "1782000"
  },
  {
    "text": "years that are divisible by four are Gap years then well and if test fails then you",
    "start": "1782000",
    "end": "1790460"
  },
  {
    "text": "actually know okay if there's something in this specific location that actually doesn't work as the test expected to be",
    "start": "1790460",
    "end": "1798080"
  },
  {
    "text": "so you know where to look um",
    "start": "1798080",
    "end": "1803480"
  },
  {
    "text": "use abstractions in code we've heard the talk by by Kate that",
    "start": "1803480",
    "end": "1809140"
  },
  {
    "text": "there are lots of missing abstractions in code that would usually write code and we just add code and while",
    "start": "1809140",
    "end": "1814820"
  },
  {
    "text": "abstractions will be missing and we will maybe see abstractions and if you see abstractions also in unit",
    "start": "1814820",
    "end": "1820640"
  },
  {
    "text": "test code just factor out stuff factor out functions that instead of like having 30 lines to actually establish",
    "start": "1820640",
    "end": "1828260"
  },
  {
    "text": "your preconditions maybe Factor them out and have only one or two lines to establish your preconditions",
    "start": "1828260",
    "end": "1834919"
  },
  {
    "text": "foreign fixtures are another example of this so depending on the unit test framework",
    "start": "1834919",
    "end": "1840980"
  },
  {
    "text": "where you use there are these fixture classes where you can have setup methods that do all the common setups that are",
    "start": "1840980",
    "end": "1847220"
  },
  {
    "text": "needed to actually create your unit under test and Supply it maybe with mocks or stops or whatever you need and and do the proper setup to",
    "start": "1847220",
    "end": "1854720"
  },
  {
    "text": "actually prepare them for for the testing you're going to do",
    "start": "1854720",
    "end": "1860779"
  },
  {
    "text": "and this also includes having short test cases so the ideal",
    "start": "1860779",
    "end": "1866720"
  },
  {
    "text": "common test case would have like three lines of code first line the arrange or given part of",
    "start": "1866720",
    "end": "1874760"
  },
  {
    "text": "the test then the ACT part where you do the actual action that you want to test",
    "start": "1874760",
    "end": "1879980"
  },
  {
    "text": "this is or in in uh in other terms it's it's so it's either",
    "start": "1879980",
    "end": "1885440"
  },
  {
    "text": "a range act as third or it's given when then right so these three are basically uh these two are interchangeable and",
    "start": "1885440",
    "end": "1891500"
  },
  {
    "text": "these are the three lines you would ideally want to have so don't factor out a function of two lines",
    "start": "1891500",
    "end": "1897919"
  },
  {
    "text": "of code and just to have a single line of code but that's the idea to have like this is my arranging of the code to",
    "start": "1897919",
    "end": "1905179"
  },
  {
    "text": "actually be able to then do the action and then assert that the action provides",
    "start": "1905179",
    "end": "1910820"
  },
  {
    "text": "the try the required results the asserts can be multiple multiple",
    "start": "1910820",
    "end": "1917419"
  },
  {
    "text": "asserts but it should as well what's the single thing",
    "start": "1917419",
    "end": "1921880"
  },
  {
    "text": "um it has one fact per test case so let's say",
    "start": "1922520",
    "end": "1928159"
  },
  {
    "text": "um we test our own implementation of standard vector",
    "start": "1928159",
    "end": "1933559"
  },
  {
    "text": "a default constructed Vector is empty so I take a vector I default construct",
    "start": "1933559",
    "end": "1939020"
  },
  {
    "text": "it and then I checked that it's empty for whatever empty means it can mean that the empty method returns true it",
    "start": "1939020",
    "end": "1945500"
  },
  {
    "text": "can mean that the two iterators begin and end are the same and it can say that this size is zero those are all",
    "start": "1945500",
    "end": "1950840"
  },
  {
    "text": "equivalent so those could get into the same test case another fact is that a default",
    "start": "1950840",
    "end": "1957500"
  },
  {
    "text": "constructed Vector also has a capacity of zero which does nothing has nothing to do",
    "start": "1957500",
    "end": "1965299"
  },
  {
    "text": "with empty right we can change that factor that the capacity maybe is not zero but but 10 for our own",
    "start": "1965299",
    "end": "1970520"
  },
  {
    "text": "implementation of whatever Vector we are going to have but it's not the empty part and if you're struggling to figure out a",
    "start": "1970520",
    "end": "1977419"
  },
  {
    "text": "correct name for your test function then it may be that there is multiple things that you are testing so try to dissect",
    "start": "1977419",
    "end": "1984679"
  },
  {
    "text": "them into two things so test case should have one reason to fail because one fact isn't actually",
    "start": "1984679",
    "end": "1990740"
  },
  {
    "text": "implemented correctly um the default Constructor creating an",
    "start": "1990740",
    "end": "1996559"
  },
  {
    "text": "empty container if that one fails there will probably be a lot of other test cases that fail because that is a basis",
    "start": "1996559",
    "end": "2003100"
  },
  {
    "text": "basically for for a lot of other things but you will then can pick the most basic test case that has failed and see",
    "start": "2003100",
    "end": "2010120"
  },
  {
    "text": "okay here's my point of failure I can fix that and then I can see whether the other test cases have been",
    "start": "2010120",
    "end": "2016000"
  },
  {
    "text": "fixed as well",
    "start": "2016000",
    "end": "2018600"
  },
  {
    "text": "um focus on the unit on a test so you have",
    "start": "2022240",
    "end": "2027760"
  },
  {
    "text": "something you are testing right here your function your class or something like that",
    "start": "2027760",
    "end": "2033220"
  },
  {
    "text": "don't test all the things around it if you use if you have like your class",
    "start": "2033220",
    "end": "2039100"
  },
  {
    "text": "and this uses another unit and you basically have to have parts of that",
    "start": "2039100",
    "end": "2044380"
  },
  {
    "text": "other unit injected into the class or given into the classes arguments don't test those other parts you have unit",
    "start": "2044380",
    "end": "2049540"
  },
  {
    "text": "tests for those other parts in another location so make your assertions about the class you are testing in this test case and",
    "start": "2049540",
    "end": "2055839"
  },
  {
    "text": "not about all the other stuff and please don't start to test compiler generated members because well the compiler is",
    "start": "2055839",
    "end": "2063158"
  },
  {
    "text": "infallible or at least um if the compiler has a bug you have a",
    "start": "2063159",
    "end": "2068378"
  },
  {
    "text": "much bigger problem so trust that the compiler is implemented correctly trusts that your standard Library",
    "start": "2068379",
    "end": "2074919"
  },
  {
    "text": "implementation is implemented correctly don't try to test the actual standard implementation don't try to test",
    "start": "2074919",
    "end": "2081280"
  },
  {
    "text": "third-party libraries if you don't trust your third-party libraries maybe let's write a couple of",
    "start": "2081280",
    "end": "2087398"
  },
  {
    "text": "test suite for the third party libraries but not in the unit test for your own code move those elsewhere to the to",
    "start": "2087399",
    "end": "2093820"
  },
  {
    "text": "another test right so focus on what you are actually testing here not on the dependencies",
    "start": "2093820",
    "end": "2100440"
  },
  {
    "text": "um so writing test cases can be a usability",
    "start": "2103060",
    "end": "2108520"
  },
  {
    "text": "check for your classes or for your functions because if you have to write really convoluted stuff for your actual",
    "start": "2108520",
    "end": "2115660"
  },
  {
    "text": "test case to to do something to test something there may be a problem in the usability",
    "start": "2115660",
    "end": "2120940"
  },
  {
    "text": "of your class or in of your unit overall because if you have to write this convoluted code to make a simple test",
    "start": "2120940",
    "end": "2126760"
  },
  {
    "text": "case work you probably have to write the same convoluted case and you're only a product uh production code to actually",
    "start": "2126760",
    "end": "2131920"
  },
  {
    "text": "use this unit which means that it's more likely to to contain some errors to to emit some",
    "start": "2131920",
    "end": "2138520"
  },
  {
    "text": "stuff or uh to to make something uh well more problematic extent it",
    "start": "2138520",
    "end": "2144400"
  },
  {
    "text": "should be so check whether the unit under test is",
    "start": "2144400",
    "end": "2149619"
  },
  {
    "text": "actually as usable as you want it to be",
    "start": "2149619",
    "end": "2153359"
  },
  {
    "text": "um test case order so this is about reading the code this is not about executing the tests",
    "start": "2156040",
    "end": "2162520"
  },
  {
    "text": "so um we touched it a bit later you actually want your test to be independent and be executable in any",
    "start": "2162520",
    "end": "2167859"
  },
  {
    "text": "order so for the test execution it doesn't matter in which order you write them into your test kit file but for the",
    "start": "2167859",
    "end": "2175480"
  },
  {
    "text": "reader who wants to read this documentation that's important that's uh",
    "start": "2175480",
    "end": "2180520"
  },
  {
    "text": "um important they want to see that well if I construct an object of this type then it's hesitation that in that",
    "start": "2180520",
    "end": "2187420"
  },
  {
    "text": "property they want to read this first before reading about this really convoluted stuff what happens when I push twice and then remove another",
    "start": "2187420",
    "end": "2195700"
  },
  {
    "text": "object and stuff like that so have this problem very basic to more complex use cases for the unit under",
    "start": "2195700",
    "end": "2202420"
  },
  {
    "text": "test in that order to actually make the reader make it possible for the reader to follow along to actually get an idea of",
    "start": "2202420",
    "end": "2208960"
  },
  {
    "text": "what is what the test cases are testing here",
    "start": "2208960",
    "end": "2213420"
  },
  {
    "text": "um next thing discoverability we I briefly touched that we want to be able to find",
    "start": "2215859",
    "end": "2222760"
  },
  {
    "text": "our test cases if I have a class that I don't know yet um ideally if I want to have our tests",
    "start": "2222760",
    "end": "2229359"
  },
  {
    "text": "as documentation I want to find the test cases for that right",
    "start": "2229359",
    "end": "2234119"
  },
  {
    "text": "so um there are considerations about the test",
    "start": "2235420",
    "end": "2240460"
  },
  {
    "text": "file names that probably should contain the name of what they are actually testing",
    "start": "2240460",
    "end": "2246839"
  },
  {
    "text": "um I bought the test file locations where do I find them so um in in C plus plus projects I've",
    "start": "2247180",
    "end": "2253839"
  },
  {
    "text": "worked on I've seen at basically two different patterns one was I have the",
    "start": "2253839",
    "end": "2258880"
  },
  {
    "text": "test files directly beside the actual unit files so I have my my fancy class",
    "start": "2258880",
    "end": "2265240"
  },
  {
    "text": "HPP my fancy class CPP my fancy class test CBP All in One Directory which is",
    "start": "2265240",
    "end": "2270760"
  },
  {
    "text": "okay it gets a bit crowdy because we have basically a factor of 1.5 or more of",
    "start": "2270760",
    "end": "2277240"
  },
  {
    "text": "number of files in your directories but um you definitely will find them",
    "start": "2277240",
    "end": "2284140"
  },
  {
    "text": "um the other way that I have seen is basically we have a source directory and then I have my subdirectories and in there are some at some point my my CPP",
    "start": "2284140",
    "end": "2290980"
  },
  {
    "text": "and HPP files and you basically reproduce the same structure in a test directory",
    "start": "2290980",
    "end": "2296740"
  },
  {
    "text": "maybe even in a test unit test and test integration test directory where there's",
    "start": "2296740",
    "end": "2302020"
  },
  {
    "text": "the same directory structure reproduced so you can basically follow along and find the tests for your test cases",
    "start": "2302020",
    "end": "2309640"
  },
  {
    "text": "I think in Java this is a pretty natural because you have like um you have those",
    "start": "2309640",
    "end": "2314859"
  },
  {
    "text": "directories just follow the the the package name paths and you just have",
    "start": "2314859",
    "end": "2320380"
  },
  {
    "text": "like thing dot prompt unit and point my class and you have test or that point",
    "start": "2320380",
    "end": "2326380"
  },
  {
    "text": "unit by class and something like that",
    "start": "2326380",
    "end": "2329700"
  },
  {
    "text": "um important part about unit test is speed um the at my last employer we had something",
    "start": "2335020",
    "end": "2342820"
  },
  {
    "text": "that it was labeled unit tests and we had like two different versions",
    "start": "2342820",
    "end": "2349000"
  },
  {
    "text": "that we could execute the fast one would take 45 minutes to complete",
    "start": "2349000",
    "end": "2356140"
  },
  {
    "text": "the slow one would take like two and a half hours or something like that remember the red green Factor cycle and",
    "start": "2356140",
    "end": "2363460"
  },
  {
    "text": "the actual refactoring with short feedback loops well if you write three lines of code",
    "start": "2363460",
    "end": "2369820"
  },
  {
    "text": "and then execute 45 minutes of unit tests you won't get very very far in a day right you probably execute those",
    "start": "2369820",
    "end": "2376359"
  },
  {
    "text": "things maybe once a day maybe just two or three times a week so we want to make them",
    "start": "2376359",
    "end": "2383320"
  },
  {
    "text": "fast which has implications",
    "start": "2383320",
    "end": "2388200"
  },
  {
    "text": "um very rough back of the nav can estimate right so on a very busy day we",
    "start": "2389020",
    "end": "2394599"
  },
  {
    "text": "will make like effect not not actually right but effect and change about 1000",
    "start": "2394599",
    "end": "2400060"
  },
  {
    "text": "lines maybe 10 000 lines of code if you actually get that far then you're really fast and um either really good or or",
    "start": "2400060",
    "end": "2406420"
  },
  {
    "text": "really sloppy either of the two right so um",
    "start": "2406420",
    "end": "2411940"
  },
  {
    "text": "roughly estimate of test code to production code unit test code to production code one two one",
    "start": "2411940",
    "end": "2418420"
  },
  {
    "text": "maybe ten to one if you have really big coverage of unit tests and really ex long unit test cases but usually I would",
    "start": "2418420",
    "end": "2425260"
  },
  {
    "text": "say let's let's go with one to one I have 10 lines of code per test case roughly as I said ideal would be three",
    "start": "2425260",
    "end": "2432700"
  },
  {
    "text": "lines but 10 lines is okay plus a bit off of of glue code of Practical Art functions and stuff like",
    "start": "2432700",
    "end": "2438579"
  },
  {
    "text": "that if I have 100 to and and that together",
    "start": "2438579",
    "end": "2445000"
  },
  {
    "text": "means I have like 100 to 1000 test cases to run",
    "start": "2445000",
    "end": "2450099"
  },
  {
    "text": "um in a day after the day but continuously since I'm working continuously I don't",
    "start": "2450099",
    "end": "2455619"
  },
  {
    "text": "want to run them just at the end of the day I want to run them in between because I don't want to roll back the last eight hours I've worked on the",
    "start": "2455619",
    "end": "2461320"
  },
  {
    "text": "stuff right um I want to have a short feedback Cycles in minutes um so depending on the language if I",
    "start": "2461320",
    "end": "2468280"
  },
  {
    "text": "factor in like maybe if 10 to 20 second compilation and stuff like that then and",
    "start": "2468280",
    "end": "2475420"
  },
  {
    "text": "I actually want to do some work in those minutes right then my tests should run in a matter of seconds",
    "start": "2475420",
    "end": "2481800"
  },
  {
    "text": "so um last thing I've worked on we had I think about 10 000 test cases and there",
    "start": "2481800",
    "end": "2489640"
  },
  {
    "text": "were like two 20 30 seconds so this is a",
    "start": "2489640",
    "end": "2494740"
  },
  {
    "text": "good time I would say for the for the amount of tests which means our test cases should take amount of milliseconds",
    "start": "2494740",
    "end": "2502900"
  },
  {
    "text": "if you have test cases that take like five seconds 20 seconds then you will not get near that right",
    "start": "2502900",
    "end": "2510820"
  },
  {
    "text": "so this is just very back of the napkin so there may be a factor of 10 maybe a factor of 20 or so or something away",
    "start": "2510820",
    "end": "2518800"
  },
  {
    "text": "from from what's actually good but um this gives you a roughly idea of how",
    "start": "2518800",
    "end": "2523960"
  },
  {
    "text": "fast we want our unit test to be",
    "start": "2523960",
    "end": "2527338"
  },
  {
    "text": "um so what we want to do is when we run our unit tests we don't want",
    "start": "2529780",
    "end": "2535300"
  },
  {
    "text": "to run into slow code because it will slow us down",
    "start": "2535300",
    "end": "2541060"
  },
  {
    "text": "um which means we will probably like to separate infrastructure stuff from our",
    "start": "2541060",
    "end": "2549460"
  },
  {
    "text": "actual code that we are testing for example",
    "start": "2549460",
    "end": "2555339"
  },
  {
    "text": "um in a recent training I was asked yeah I have this function that calculates some values and writes them into a file",
    "start": "2555339",
    "end": "2563320"
  },
  {
    "text": "what do you think takes most of the time of the execution of this function",
    "start": "2563320",
    "end": "2568420"
  },
  {
    "text": "writing into the file the function itself it's a couple milliseconds probably as microseconds",
    "start": "2568420",
    "end": "2576339"
  },
  {
    "text": "even the writing into the file takes some time and",
    "start": "2576339",
    "end": "2582819"
  },
  {
    "text": "when they then have like a couple dozen test cases that test those functions then you have like calculated value",
    "start": "2582819",
    "end": "2589480"
  },
  {
    "text": "write it into a file and the right into the file is really truly yeah right you um probably get even past a file stream",
    "start": "2589480",
    "end": "2596220"
  },
  {
    "text": "or you open your file and then you just write a value in there and then you have",
    "start": "2596220",
    "end": "2601420"
  },
  {
    "text": "to open the file again to actually read what has been written into the file to to make sure that this that the value is",
    "start": "2601420",
    "end": "2607359"
  },
  {
    "text": "correct if you separate those two then you have test cases for calculating your values which are really fast",
    "start": "2607359",
    "end": "2614500"
  },
  {
    "text": "and you have like one or two test cases for actually opening the file writing into the file and then seeing that what",
    "start": "2614500",
    "end": "2620140"
  },
  {
    "text": "I've written in there is in the file and usually this is like a very true thing to do",
    "start": "2620140",
    "end": "2625720"
  },
  {
    "text": "so in that case for example you just just could say Okay instead of opening",
    "start": "2625720",
    "end": "2631599"
  },
  {
    "text": "the file myself and maybe having to open it again and again and again because I call the function call the function",
    "start": "2631599",
    "end": "2636760"
  },
  {
    "text": "multiple times just pass a stream into the function",
    "start": "2636760",
    "end": "2641800"
  },
  {
    "text": "we can discuss about whether it should be a stream or something else outside but but in that case they passed",
    "start": "2641800",
    "end": "2649660"
  },
  {
    "text": "just just an O stream into the function and in production it would be just an open file stream right so it would open",
    "start": "2649660",
    "end": "2655240"
  },
  {
    "text": "the file have a file stream pass it into the function and the function and then could transparate into the file right into the file done",
    "start": "2655240",
    "end": "2661180"
  },
  {
    "text": "in tests they would just take a string stream pass it into the function and all it all",
    "start": "2661180",
    "end": "2668200"
  },
  {
    "text": "happens in memory it doesn't really write into a file and you can just say Okay after the test case what's inside",
    "start": "2668200",
    "end": "2673720"
  },
  {
    "text": "my string stream this is the correct value that's okay and then in integration tests you would have like one or two test cases where",
    "start": "2673720",
    "end": "2680260"
  },
  {
    "text": "you actually use the two together the file stream and the function and you have the result",
    "start": "2680260",
    "end": "2686500"
  },
  {
    "text": "so there are these are examples how you basically um extract those infrastructure Parts",
    "start": "2686500",
    "end": "2692200"
  },
  {
    "text": "your database connections your files your files um your networking connections and and stuff like that from",
    "start": "2692200",
    "end": "2698980"
  },
  {
    "text": "your actual logic because what you really are what's really important to test is you're actually logic because",
    "start": "2698980",
    "end": "2704079"
  },
  {
    "text": "well writing into a file and writing into a database usually is relatively",
    "start": "2704079",
    "end": "2709359"
  },
  {
    "text": "simple and you can Factor this out into the test that you maybe run once a day also this infrastructure stuff is",
    "start": "2709359",
    "end": "2716260"
  },
  {
    "text": "something that you probably won't touch during the whole day and so you don't",
    "start": "2716260",
    "end": "2722680"
  },
  {
    "text": "need to run it like every 10 seconds or every 10 minutes or something like that it's enough to run this once a day or",
    "start": "2722680",
    "end": "2728260"
  },
  {
    "text": "once a week to the infrastructure part but the logic we are testing we are actually developing this is the part we",
    "start": "2728260",
    "end": "2733599"
  },
  {
    "text": "want to be testing which also means so then you can say",
    "start": "2733599",
    "end": "2739000"
  },
  {
    "text": "okay but I want to unit test this infrastructure code that's okay maybe have your own infrastructure library and",
    "start": "2739000",
    "end": "2745720"
  },
  {
    "text": "test that or have your own infrastructure tests infrastructure unit test Suite that you only run once a day",
    "start": "2745720",
    "end": "2752560"
  },
  {
    "text": "which is separated from your actual logic unit tests um or maybe just say okay I don't need",
    "start": "2752560",
    "end": "2758920"
  },
  {
    "text": "unit tests for those I have my integration tests that cover those in the infrastructure Parts perfectly and then again you get",
    "start": "2758920",
    "end": "2765339"
  },
  {
    "text": "again further away from the 100 coverage right because you don't test your unit test your infrastructure code",
    "start": "2765339",
    "end": "2772359"
  },
  {
    "text": "so this is what you have to decide what you have to figure out what's what works best for your project",
    "start": "2772359",
    "end": "2778800"
  },
  {
    "text": "so incidentally one of the unit test",
    "start": "2779980",
    "end": "2785380"
  },
  {
    "text": "definitions I I scanned for the word clock in the beginning by Michael feathers",
    "start": "2785380",
    "end": "2791319"
  },
  {
    "text": "and where he says unit tests do not contain any calls to databases files",
    "start": "2791319",
    "end": "2798660"
  },
  {
    "text": "networking and system configurations and stuff like that if you do this you're not having a unit",
    "start": "2798660",
    "end": "2805900"
  },
  {
    "text": "test you have to having having a different kind of test",
    "start": "2805900",
    "end": "2810060"
  },
  {
    "text": "um the kiss principle and the acne principle so kiss is keep it simple and stupid yakney is you ain't gonna need it",
    "start": "2813220",
    "end": "2821380"
  },
  {
    "text": "so write really simple code to have less edge cases you have to test",
    "start": "2821380",
    "end": "2827099"
  },
  {
    "text": "don't write code that you don't need just yet because um it may never come that you need it and",
    "start": "2827099",
    "end": "2833920"
  },
  {
    "text": "when it comes then it comes differently then you just anticipate it so you will have to refactor and and change it",
    "start": "2833920",
    "end": "2839260"
  },
  {
    "text": "anyway and applying these principles mean that you reduce your code base you reduce the",
    "start": "2839260",
    "end": "2845380"
  },
  {
    "text": "amount of code that has to be tested you reduce the amount of test cases because you have less edge cases and so on",
    "start": "2845380",
    "end": "2851380"
  },
  {
    "text": "which means that again your test cases execute the overall test Suite executes",
    "start": "2851380",
    "end": "2857380"
  },
  {
    "text": "faster maybe in the future the things come but when they are necessary then you have to",
    "start": "2857380",
    "end": "2862540"
  },
  {
    "text": "deal with them and then you have to write the test for them right but uh not right now",
    "start": "2862540",
    "end": "2867660"
  },
  {
    "text": "next one is Independence um we talked about that we want to be able to run like individual units um to",
    "start": "2870040",
    "end": "2877000"
  },
  {
    "text": "recheck and recheck when we're fixing bugs um maybe just a group of units and stuff like that and we want to repeat",
    "start": "2877000",
    "end": "2882400"
  },
  {
    "text": "individual test cases especially if one has failed we want to fix it um is it running now without caring for all the",
    "start": "2882400",
    "end": "2889240"
  },
  {
    "text": "other test cases around and then just in the end run all the test cases because well even if it's only like uh 20 30 40",
    "start": "2889240",
    "end": "2896380"
  },
  {
    "text": "seconds to run all your test cases if you run one test case maybe even directly from your IDE and takes like",
    "start": "2896380",
    "end": "2902020"
  },
  {
    "text": "half a second that's much faster than waiting 20 seconds for all the thing to complete right",
    "start": "2902020",
    "end": "2908400"
  },
  {
    "text": "so we want to be able to filter tests so depending on the unit test framework",
    "start": "2909660",
    "end": "2914980"
  },
  {
    "text": "that you have in g-test you'll have like these g-test",
    "start": "2914980",
    "end": "2921160"
  },
  {
    "text": "filter equals and they have just put part of the names with uh with stars in there and stuff like that",
    "start": "2921160",
    "end": "2926920"
  },
  {
    "text": "where you can say I'm just only run the unit tests that have this and that and their name and um in catch two for example you have",
    "start": "2926920",
    "end": "2935380"
  },
  {
    "text": "like the ability to tag your tests or what are these tests about um so use these kinds of things to actually be",
    "start": "2935380",
    "end": "2941440"
  },
  {
    "text": "able to select success of your tests to to run them",
    "start": "2941440",
    "end": "2946020"
  },
  {
    "text": "we want to have our test repeatable",
    "start": "2949560",
    "end": "2953880"
  },
  {
    "text": "um who has come across a heisenbach which is basically you run the tests",
    "start": "2954760",
    "end": "2959920"
  },
  {
    "text": "they fail you run the test they pass you run the test they pass you're on the test they pass okay",
    "start": "2959920",
    "end": "2965440"
  },
  {
    "text": "nightly build tests have failed next morning the tests pass again",
    "start": "2965440",
    "end": "2971339"
  },
  {
    "text": "these are really hard to catch things and they can have different uh",
    "start": "2971339",
    "end": "2978880"
  },
  {
    "text": "different reasons we want to have our test being",
    "start": "2978880",
    "end": "2985560"
  },
  {
    "text": "deterministic very often there's something about timing involved in these kinds of tests",
    "start": "2985560",
    "end": "2992619"
  },
  {
    "text": "like we run the tests and maybe the hardware is a bit slow because someone is making a phone call or something like",
    "start": "2992619",
    "end": "2997900"
  },
  {
    "text": "that and just two and a half milliseconds doesn't cut it and takes just slightly longer but it's still okay",
    "start": "2997900",
    "end": "3004920"
  },
  {
    "text": "um if you have like strict checks for like we want to have like this amount of time",
    "start": "3004920",
    "end": "3011520"
  },
  {
    "text": "so we're writing unit tests we're writing tests for functionality not for performance performance testing is a",
    "start": "3011520",
    "end": "3017040"
  },
  {
    "text": "whole different Beast right um especially when you're using",
    "start": "3017040",
    "end": "3022880"
  },
  {
    "text": "multi-threading in which order things get executed in the different threads is really not deterministic",
    "start": "3022880",
    "end": "3029160"
  },
  {
    "text": "and including sleeps to make this actually work will mean that you slow",
    "start": "3029160",
    "end": "3034500"
  },
  {
    "text": "down your test cases in your back to fast execution again don't try this so um I've seen people",
    "start": "3034500",
    "end": "3042240"
  },
  {
    "text": "say well don't use threading at all in your unit tests um well when the part you're working on",
    "start": "3042240",
    "end": "3048780"
  },
  {
    "text": "is all about dispatching different threads and so on that's really hard to do because well um the logic you're actually writing your contest yes",
    "start": "3048780",
    "end": "3057300"
  },
  {
    "text": "for Independence one of the other things the order of the test should yes so the",
    "start": "3057300",
    "end": "3062880"
  },
  {
    "text": "order of the test should matter yeah",
    "start": "3062880",
    "end": "3066200"
  },
  {
    "text": "at least as many sleeps yes so if you have different tests then the test order shouldn't matter but even",
    "start": "3069000",
    "end": "3076260"
  },
  {
    "text": "like having different things happening in inside the same test if you just say I want this and that and that to be",
    "start": "3076260",
    "end": "3082380"
  },
  {
    "text": "happening in that order um it usually breaks down into well I have to wait for this event that I have",
    "start": "3082380",
    "end": "3087420"
  },
  {
    "text": "to wait for that event and maybe I have to put in sleep to actually be able to wait because well um so timing issues are really hard to",
    "start": "3087420",
    "end": "3094559"
  },
  {
    "text": "actually test well and test fast for example especially",
    "start": "3094559",
    "end": "3100140"
  },
  {
    "text": "um yes so yes so you want to do you want to",
    "start": "3100140",
    "end": "3108059"
  },
  {
    "text": "test the actual uh well the logic and not the timing Behavior because well um",
    "start": "3108059",
    "end": "3113760"
  },
  {
    "text": "you will have to run stress tests to actually make sure that the that's the shredding and stuff like that works",
    "start": "3113760",
    "end": "3118920"
  },
  {
    "text": "correctly and usually this also um contains having a look at your test and",
    "start": "3118920",
    "end": "3125040"
  },
  {
    "text": "having a look at your code to actually see that they're on our race conditioning conditions because they're",
    "start": "3125040",
    "end": "3130859"
  },
  {
    "text": "really it's really hard to actually prove whether you have race conditions or not so this is the kind of thing",
    "start": "3130859",
    "end": "3136079"
  },
  {
    "text": "that's maybe you want don't want to test in the unit test that you run on a uh",
    "start": "3136079",
    "end": "3141180"
  },
  {
    "text": "several times per hour um",
    "start": "3141180",
    "end": "3147300"
  },
  {
    "text": "this also occludes includes avoiding Global State most of tests that I've seen failing",
    "start": "3147300",
    "end": "3156180"
  },
  {
    "text": "um when executed isolated it was due to global state",
    "start": "3156180",
    "end": "3162839"
  },
  {
    "text": "Global State can be like tied to some Global variable maybe title database or something like that which we said is out",
    "start": "3162839",
    "end": "3170640"
  },
  {
    "text": "of the question anyway but having global State means that um maybe your unit on a test on the",
    "start": "3170640",
    "end": "3176880"
  },
  {
    "text": "first test case write something into the global State and your unit on a test in the second test case reads from the",
    "start": "3176880",
    "end": "3182400"
  },
  {
    "text": "global State and expects the previously written value because you have arranged a test cases like that and then when you",
    "start": "3182400",
    "end": "3188880"
  },
  {
    "text": "just execute the second unit in isolation then it won't find the previously",
    "start": "3188880",
    "end": "3194280"
  },
  {
    "text": "written value in there and you will basically have title test sorry the test cases to each other",
    "start": "3194280",
    "end": "3199559"
  },
  {
    "text": "so this is really hard to find out what you're actually doing in your Global States besides being hard to actually",
    "start": "3199559",
    "end": "3206520"
  },
  {
    "text": "reason about when writing your your code right because um you usually don't want you want to",
    "start": "3206520",
    "end": "3212220"
  },
  {
    "text": "have the the interactions of different parts of the code base obvious and like sending hidden messages via some Global",
    "start": "3212220",
    "end": "3219660"
  },
  {
    "text": "variables that you don't see directly is anything but obvious So like um keep",
    "start": "3219660",
    "end": "3225960"
  },
  {
    "text": "that in mind so this is also why Singletons are so well discouraged these days because well if you have Global",
    "start": "3225960",
    "end": "3232980"
  },
  {
    "text": "State um it gets hard to reason about it gets hard to actually break things apart and and test them in isolation",
    "start": "3232980",
    "end": "3240359"
  },
  {
    "text": "this also includes test cases I've people seen um writing static variables in their",
    "start": "3240359",
    "end": "3247500"
  },
  {
    "text": "fixture files which means you had to execute all the test cases in a specific order because",
    "start": "3247500",
    "end": "3253800"
  },
  {
    "text": "um that Global would be changed by the test cases themselves and the test cases would fail when",
    "start": "3253800",
    "end": "3260520"
  },
  {
    "text": "executed in isolation for no bad reason about the actual tested code but for bad reasons about the test uh the test code",
    "start": "3260520",
    "end": "3267660"
  },
  {
    "text": "itself so how can we decouple well um usually",
    "start": "3267660",
    "end": "3274319"
  },
  {
    "text": "what we use is dependency injections sometimes we have like um other ways to actually decouple things",
    "start": "3274319",
    "end": "3280500"
  },
  {
    "text": "but the most often used is well different kinds of dependency injection",
    "start": "3280500",
    "end": "3286079"
  },
  {
    "text": "you can do this as compile time at runtime with with virtual stuff with templating",
    "start": "3286079",
    "end": "3292140"
  },
  {
    "text": "um whatever means are at hand to actually create stuff outside and inject them",
    "start": "3292140",
    "end": "3298260"
  },
  {
    "text": "into into your unit on a test you can use this for mocking for example for for",
    "start": "3298260",
    "end": "3303720"
  },
  {
    "text": "for just stubbing stuff so you don't have to actually use a concrete database but you can just write a database Mock",
    "start": "3303720",
    "end": "3309839"
  },
  {
    "text": "and use that one and um with MOX you can also Trace like how does my unit on a test interact with",
    "start": "3309839",
    "end": "3316619"
  },
  {
    "text": "the other stuff that I've given the unit right",
    "start": "3316619",
    "end": "3320480"
  },
  {
    "text": "and that's about it other comments questions",
    "start": "3323420",
    "end": "3329700"
  },
  {
    "text": "yes yes",
    "start": "3329700",
    "end": "3336359"
  },
  {
    "text": "one of the things run across a lot is",
    "start": "3336359",
    "end": "3344520"
  },
  {
    "text": "people write unit tests for putting myself done as well or just the good good taste",
    "start": "3344520",
    "end": "3353220"
  },
  {
    "text": "yeah that's not sufficient you also want your unit test to test your failure dates yes",
    "start": "3353220",
    "end": "3361500"
  },
  {
    "text": "and that's part of the strong typing that's part of the",
    "start": "3361500",
    "end": "3367160"
  },
  {
    "text": "correctness yeah alluded to what's it can I accept an",
    "start": "3367440",
    "end": "3374520"
  },
  {
    "text": "empty string can I accept a null what happens when I pass a null into this yeah so you want your unit test to test",
    "start": "3374520",
    "end": "3381540"
  },
  {
    "text": "you've got yeah so um well you're testing the the",
    "start": "3381540",
    "end": "3386700"
  },
  {
    "text": "arrow cases testing the edge cases should be included um also for the",
    "start": "3386700",
    "end": "3392460"
  },
  {
    "text": "coverage right so um if you have close to 100 coverage and",
    "start": "3392460",
    "end": "3398520"
  },
  {
    "text": "you don't test the edge cases the error cases then this means you don't actually handle those error cases because if you",
    "start": "3398520",
    "end": "3404400"
  },
  {
    "text": "did then you would have like uncovered code in there and you would hopefully when using coverage tools and stuff like",
    "start": "3404400",
    "end": "3409800"
  },
  {
    "text": "that your phone print them quickly you have the question",
    "start": "3409800",
    "end": "3414380"
  },
  {
    "text": "thank you",
    "start": "3414839",
    "end": "3417440"
  },
  {
    "text": "um",
    "start": "3423059",
    "end": "3425059"
  },
  {
    "text": "uh harmful sometimes",
    "start": "3431660",
    "end": "3436280"
  },
  {
    "text": "sometimes for protesters image recognition stuff basically a unit test Frameworks give",
    "start": "3438660",
    "end": "3446640"
  },
  {
    "text": "you the possibility to bake some bunch of machine sensor inputs yeah I couldn't",
    "start": "3446640",
    "end": "3452280"
  },
  {
    "text": "ever actually do on the real machine um and uh it's really the best tool in",
    "start": "3452280",
    "end": "3458040"
  },
  {
    "text": "that case is is unit tests framework yeah",
    "start": "3458040",
    "end": "3463700"
  },
  {
    "text": "don't write that test because you know I I can't I don't have a test instrumentation to get control of that",
    "start": "3464040",
    "end": "3470520"
  },
  {
    "text": "on that machine and then the the developers are working towards the code maybe think oh that's not a unit test",
    "start": "3470520",
    "end": "3476819"
  },
  {
    "text": "yeah yeah so so in that regard I would say the term unit test framework is is",
    "start": "3476819",
    "end": "3483359"
  },
  {
    "text": "the one that's harmful here so having unit tests is okay but labeling something that is not only used for unit",
    "start": "3483359",
    "end": "3489359"
  },
  {
    "text": "tests or not only usable for unit tests naming that only unit test framework basically makes it scope smaller than it",
    "start": "3489359",
    "end": "3494940"
  },
  {
    "text": "should be as I said in the beginning in the integration tests are usually written by developers as well and",
    "start": "3494940",
    "end": "3500880"
  },
  {
    "text": "usually also in the same language I just put multiple units together and check how they work together so integration tests are written using unit test",
    "start": "3500880",
    "end": "3507300"
  },
  {
    "text": "Frameworks and there are so many um use cases for unit test framework way outside unit testing itself that",
    "start": "3507300",
    "end": "3513420"
  },
  {
    "text": "actually is yeah yes first",
    "start": "3513420",
    "end": "3520880"
  },
  {
    "text": "yes so um the comment was running test cases in",
    "start": "3540119",
    "end": "3545160"
  },
  {
    "text": "different processes to actually discover these interactions with the global variables right",
    "start": "3545160",
    "end": "3551339"
  },
  {
    "text": "um which means you just basically have you as a dependency not the global",
    "start": "3551339",
    "end": "3556500"
  },
  {
    "text": "variable be the specific value left by the last test case but just being the global variable having like the initial",
    "start": "3556500",
    "end": "3561900"
  },
  {
    "text": "value and shuffling the test will basically um will show that actually they depend on that value and that the",
    "start": "3561900",
    "end": "3569640"
  },
  {
    "text": "previous test cases may or may not have uh changed this but",
    "start": "3569640",
    "end": "3574740"
  },
  {
    "text": "um dealing so yeah dealing with shuffled test cases when you are in that situations where everything is depending",
    "start": "3574740",
    "end": "3581339"
  },
  {
    "text": "on globals is really a pain in the butt because yeah so",
    "start": "3581339",
    "end": "3586380"
  },
  {
    "text": "is independent so we can just say Okay",
    "start": "3586380",
    "end": "3592460"
  },
  {
    "text": "on top of them yeah",
    "start": "3592460",
    "end": "3596940"
  },
  {
    "text": "yeah so so my experience with shuffling test has been",
    "start": "3597780",
    "end": "3603119"
  },
  {
    "text": "um basically we had like spurious test cases test case failures",
    "start": "3603119",
    "end": "3608220"
  },
  {
    "text": "um every two months or something like that because that one test case that actually changed that Global variable",
    "start": "3608220",
    "end": "3614819"
  },
  {
    "text": "where the other test case was depending on was sometimes shuffled before that other test case and sometimes shuffled",
    "start": "3614819",
    "end": "3621059"
  },
  {
    "text": "behind that other test case and like um finding them the concrete uh so so",
    "start": "3621059",
    "end": "3626880"
  },
  {
    "text": "basically what we what it boiled down to was we rearrange our test cases we switched off the shuffling and then",
    "start": "3626880",
    "end": "3633420"
  },
  {
    "text": "executed them in that exact order to be able to actually reproduce where did this case failure come from right",
    "start": "3633420",
    "end": "3639720"
  },
  {
    "text": "so it's it's it can be hard for you to actually find yeah",
    "start": "3639720",
    "end": "3644900"
  },
  {
    "text": "okay when you keep when you keep the seat from the shuffle yeah then yeah yeah definitely",
    "start": "3654000",
    "end": "3660319"
  },
  {
    "text": "yeah yeah thanks uh I think be honest first",
    "start": "3661260",
    "end": "3669319"
  },
  {
    "text": "because the general wisdom seemed to be that we test the observable behavior",
    "start": "3680780",
    "end": "3687540"
  },
  {
    "text": "from the outside but if say I'm writing a red black tree just to take an example",
    "start": "3687540",
    "end": "3693059"
  },
  {
    "text": "that everybody knows I really want to ensure that I'm getting the rebalancing of the rotation of the",
    "start": "3693059",
    "end": "3699420"
  },
  {
    "text": "internal nodes correct extremely important what else actually is but it's not",
    "start": "3699420",
    "end": "3705960"
  },
  {
    "text": "something that is usually visible from the outside so what is rotating how to write tests for that",
    "start": "3705960",
    "end": "3713640"
  },
  {
    "text": "um so if you have like you know the testing the inner workings of the data structure that you're writing",
    "start": "3713640",
    "end": "3719940"
  },
  {
    "text": "so um one option would be to to",
    "start": "3719940",
    "end": "3725040"
  },
  {
    "text": "um to have like the parts of the data structure like you in in this case the red black tree like having the",
    "start": "3725040",
    "end": "3730380"
  },
  {
    "text": "individual nodes being public and having the algorithm that is actually therefore",
    "start": "3730380",
    "end": "3735420"
  },
  {
    "text": "balancing the stuff making it separate from the actual data structure itself so the data structure just say I have a set",
    "start": "3735420",
    "end": "3741720"
  },
  {
    "text": "of nodes I have this algorithm I throw them together I see what comes out and then you can write unit tests that",
    "start": "3741720",
    "end": "3747180"
  },
  {
    "text": "doesn't employ the data structure itself but employs a set of nodes employees algorithms throw them together see what comes out and then you can do this kind",
    "start": "3747180",
    "end": "3753480"
  },
  {
    "text": "of testing so externalizing your uh your implementation details to actually have",
    "start": "3753480",
    "end": "3759480"
  },
  {
    "text": "them separate and have them tested can be an option for that but I um agree",
    "start": "3759480",
    "end": "3765359"
  },
  {
    "text": "this is basically more or less a gray area because you would say at some point well I I'm externalizing everything and",
    "start": "3765359",
    "end": "3770940"
  },
  {
    "text": "my data structure just ties all these details together right",
    "start": "3770940",
    "end": "3775819"
  },
  {
    "text": "there was some comment in the background yeah",
    "start": "3779339",
    "end": "3783319"
  },
  {
    "text": "sorry",
    "start": "3786359",
    "end": "3788779"
  },
  {
    "text": "um a hundred percent code coverage if",
    "start": "3793920",
    "end": "3799160"
  },
  {
    "text": "I I don't think I got the question you can't say you have a hundred percent code coverage and saying your tdd",
    "start": "3799559",
    "end": "3806099"
  },
  {
    "text": "if you're doing tdd you will have always 100 code coverage yes because um you only write code that actually matches",
    "start": "3806099",
    "end": "3812760"
  },
  {
    "text": "those tests um there will so there are arguments even",
    "start": "3812760",
    "end": "3819780"
  },
  {
    "text": "by someone as famous for tdd as Kent back that the set of tests that you",
    "start": "3819780",
    "end": "3825660"
  },
  {
    "text": "write for uh test room while doing test driven",
    "start": "3825660",
    "end": "3830940"
  },
  {
    "text": "development is not enough so you will even probably need more tests and yes",
    "start": "3830940",
    "end": "3835980"
  },
  {
    "text": "there will be Parts in your code that you can't test where you can say okay this part I can't do test driven because",
    "start": "3835980",
    "end": "3842160"
  },
  {
    "text": "um if you have like for example um I can't really simulate a network",
    "start": "3842160",
    "end": "3847680"
  },
  {
    "text": "failure or something like that so I just have to write the code that hopefully",
    "start": "3847680",
    "end": "3852960"
  },
  {
    "text": "catches the network value but I never can test it at least not at this level so there are these points where you can",
    "start": "3852960",
    "end": "3858480"
  },
  {
    "text": "say okay but now I have these usually those are error conditions and stuff like like conditions that you really",
    "start": "3858480",
    "end": "3864599"
  },
  {
    "text": "can't reproduce in the lab or in the test environment we have to say Okay um I do have to do this part um even though",
    "start": "3864599",
    "end": "3872339"
  },
  {
    "text": "I don't know how to actually reproduce this and this is basically a part where you can as I as I mentioned earlier say",
    "start": "3872339",
    "end": "3879119"
  },
  {
    "text": "here's a comment this is not covered by the test for this and that reason because I just couldn't reproduce it so",
    "start": "3879119",
    "end": "3885000"
  },
  {
    "text": "this is also not written in a tester development environment",
    "start": "3885000",
    "end": "3890720"
  },
  {
    "text": "sorry when you introduce doubles because you",
    "start": "3890760",
    "end": "3896040"
  },
  {
    "text": "can't say when it's it's none and stuff like that yeah",
    "start": "3896040",
    "end": "3901200"
  },
  {
    "text": "yeah",
    "start": "3901200",
    "end": "3903260"
  },
  {
    "text": "failure conditions well you're just testing the accepted",
    "start": "3913260",
    "end": "3918540"
  },
  {
    "text": "the good path very good tdd yeah",
    "start": "3918540",
    "end": "3924260"
  },
  {
    "text": "so in one of my classes I basically I go and say um let's build a stack class and",
    "start": "3931799",
    "end": "3939059"
  },
  {
    "text": "let's build a test driven and these are the requirements for the test class and",
    "start": "3939059",
    "end": "3944220"
  },
  {
    "text": "then you say well if you take top or pop from an empty stack it's not specified",
    "start": "3944220",
    "end": "3950700"
  },
  {
    "text": "but what will happen right and then people go ahead and say well I check if it's empty and then I throw an exception",
    "start": "3950700",
    "end": "3956880"
  },
  {
    "text": "or if I just have top it just has to return some value so I just changed the",
    "start": "3956880",
    "end": "3962339"
  },
  {
    "text": "signature to return an optional or something like that and some people say well it's not specified so I can just",
    "start": "3962339",
    "end": "3967619"
  },
  {
    "text": "base it on the standard vector and if you use pop or a pop back or back on an",
    "start": "3967619",
    "end": "3973020"
  },
  {
    "text": "anti standard Vector it's just undefined Behavior that's okay because there's no specification for this part yeah",
    "start": "3973020",
    "end": "3978059"
  },
  {
    "text": "but you have to maybe then leave a comment or something like that but yeah there are these gray areas that you um",
    "start": "3978059",
    "end": "3984240"
  },
  {
    "text": "really have to figure out how you want to be how you want to cover them or if you leave them uncovered",
    "start": "3984240",
    "end": "3991740"
  },
  {
    "text": "more comments great thank you very much",
    "start": "3991740",
    "end": "3997880"
  }
]