[
  {
    "text": "my name is michael stipe i'm a graphql technical steering committee member and i'm the author of",
    "start": "640",
    "end": "7520"
  },
  {
    "text": "the hot chocolate graphical library and dot net and today we are going to explore how we",
    "start": "7520",
    "end": "12960"
  },
  {
    "text": "can get started with graphql and why graphql is awesome",
    "start": "12960",
    "end": "18080"
  },
  {
    "text": "before we get started let's do a quick temperature of the room",
    "start": "18080",
    "end": "24880"
  },
  {
    "text": "you can scan this barcode or qr code",
    "start": "25840",
    "end": "33280"
  },
  {
    "text": "and then we do a quick quiz",
    "start": "33280",
    "end": "37399"
  },
  {
    "text": "awesome",
    "start": "47039",
    "end": "49520"
  },
  {
    "text": "okay let's start so who has used graphql before",
    "start": "56239",
    "end": "63199"
  },
  {
    "text": "or who has just heard about it or experimented with it has it in production",
    "start": "63199",
    "end": "70479"
  },
  {
    "text": "i will unlock yeah 50 users can go on",
    "start": "70479",
    "end": "78240"
  },
  {
    "text": "awesome that's good because we are getting started so",
    "start": "84840",
    "end": "90880"
  },
  {
    "text": "okay let's see the next one ah",
    "start": "91920",
    "end": "97280"
  },
  {
    "text": "no i took it away damn it",
    "start": "97280",
    "end": "101840"
  },
  {
    "text": "mini mistake",
    "start": "104399",
    "end": "107119"
  },
  {
    "text": "okay most people think it's five years and",
    "start": "110000",
    "end": "116000"
  },
  {
    "text": "that is when i go to conferences most people will exactly say it's five",
    "start": "116000",
    "end": "121680"
  },
  {
    "text": "years old at dot net conferences okay",
    "start": "121680",
    "end": "129000"
  },
  {
    "text": "actually it was released in 2012 and initially they called it super graph",
    "start": "129440",
    "end": "135200"
  },
  {
    "text": "for a lack of a better name so in march 2012",
    "start": "135200",
    "end": "140640"
  },
  {
    "text": "facebook released graphql into production",
    "start": "140640",
    "end": "145760"
  },
  {
    "text": "but it was only later open sourced so graphql was open source in 2016. they",
    "start": "146080",
    "end": "152959"
  },
  {
    "text": "announced that they will open source it in 2015. that's why most people think it's",
    "start": "152959",
    "end": "159519"
  },
  {
    "text": "younger than it is so graphical is quite mature at this moment in time",
    "start": "159519",
    "end": "165360"
  },
  {
    "text": "but let's explore what graphql really is or why graphql was even",
    "start": "165360",
    "end": "172720"
  },
  {
    "text": "created so back in 2011",
    "start": "172720",
    "end": "179920"
  },
  {
    "text": "facebook faced a big crisis with their mobile application the mobile application actually didn't",
    "start": "179920",
    "end": "186879"
  },
  {
    "text": "look so sleek like this and more looked like this",
    "start": "186879",
    "end": "192080"
  },
  {
    "text": "and users hated it because when they started it",
    "start": "192080",
    "end": "197120"
  },
  {
    "text": "it was really slow sluggish usage of it and it used a ton of data and back then",
    "start": "197120",
    "end": "205360"
  },
  {
    "text": "data was precious think about how much data capacity you had in your mobile phones",
    "start": "205360",
    "end": "212239"
  },
  {
    "text": "around 2012 2011 maybe half a gigabyte maybe a gigabyte depends on your mobile",
    "start": "212239",
    "end": "218799"
  },
  {
    "text": "provider today we have unlimited on many cases we have unlimited",
    "start": "218799",
    "end": "224959"
  },
  {
    "text": "use of data in our mobile phones on top of it they found out that",
    "start": "224959",
    "end": "231040"
  },
  {
    "text": "it really had a bad impact on your battery your device would get hot and it would use",
    "start": "231040",
    "end": "237840"
  },
  {
    "text": "in a short amount of time all your battery so the facebook engineers",
    "start": "237840",
    "end": "244159"
  },
  {
    "text": "went and analyzed what went wrong with the",
    "start": "244159",
    "end": "249200"
  },
  {
    "text": "mobile application of facebook and what they found out",
    "start": "249200",
    "end": "254400"
  },
  {
    "text": "is that they done everything like they did with their web application like with the",
    "start": "254400",
    "end": "260479"
  },
  {
    "text": "with the facebook web application so they used html they used rest as a backend",
    "start": "260479",
    "end": "267040"
  },
  {
    "text": "so everything seems to be fine but when they looked at startup times and what the application actually did",
    "start": "267040",
    "end": "273919"
  },
  {
    "text": "they found out it first just fetched the user and when they fetched the user from the",
    "start": "273919",
    "end": "280080"
  },
  {
    "text": "rest endpoint it would give them some data the data that the developers of that endpoint",
    "start": "280080",
    "end": "287040"
  },
  {
    "text": "actually intended for the desktop web application so it sent down not three properties but",
    "start": "287040",
    "end": "293759"
  },
  {
    "text": "around 100 properties just for the user",
    "start": "293759",
    "end": "298800"
  },
  {
    "text": "but that was not it because facebook is nothing without its news feed so it first fetched",
    "start": "298960",
    "end": "305680"
  },
  {
    "text": "the user information and then just went on to fetch the news of this user",
    "start": "305680",
    "end": "312479"
  },
  {
    "text": "and again not intended for mobile application news it started to fetch the",
    "start": "312479",
    "end": "317520"
  },
  {
    "text": "news with thousands of properties and thousands of items but the news are actually not the fun",
    "start": "317520",
    "end": "324320"
  },
  {
    "text": "thing what else do we have at our news it's likes it's comments",
    "start": "324320",
    "end": "330560"
  },
  {
    "text": "and when we look at the comments comments have authors so we need another fetch to our user to fetch the author of",
    "start": "330560",
    "end": "337680"
  },
  {
    "text": "these comments and so on and that is not because that was a bad",
    "start": "337680",
    "end": "343520"
  },
  {
    "text": "application design or a bad service application design it was that rest was",
    "start": "343520",
    "end": "350400"
  },
  {
    "text": "was designed around the concept of resources so we wanted this isolation",
    "start": "350400",
    "end": "355680"
  },
  {
    "text": "because because it scales nice and we have these nice buckets like a user",
    "start": "355680",
    "end": "360720"
  },
  {
    "text": "endpoint that deals with everything user and so on and so forth so we could optimize that with rest we",
    "start": "360720",
    "end": "367680"
  },
  {
    "text": "could now start and create mobile endpoints or start with spa spheres or something like that",
    "start": "367680",
    "end": "374080"
  },
  {
    "text": "but we would invest a lot of work and a lot of new api to just solve",
    "start": "374080",
    "end": "381120"
  },
  {
    "text": "now for every new device that we create on the problems",
    "start": "381120",
    "end": "387360"
  },
  {
    "text": "so when facebook looked at their data fetching graphs they saw they saw",
    "start": "387520",
    "end": "392880"
  },
  {
    "text": "something like this and we call that a data waterfall these are consecutive data fetches where",
    "start": "392880",
    "end": "400240"
  },
  {
    "text": "we first get the user but we cannot fetch the next request before we have the user data because we need an",
    "start": "400240",
    "end": "407280"
  },
  {
    "text": "id that is hidden in that data that we don't need from the user request and then we fetch the next thing but we",
    "start": "407280",
    "end": "414560"
  },
  {
    "text": "still have to wait for all the requests to resolve before we can fetch the very next thing",
    "start": "414560",
    "end": "420400"
  },
  {
    "text": "so we are kind of blocked and this is why the facebook application back then",
    "start": "420400",
    "end": "426319"
  },
  {
    "text": "performed so bad that is where three guys at microsoft came up with a",
    "start": "426319",
    "end": "433759"
  },
  {
    "text": "new data technology to fetch data or expose the domain layer of facebook in a much",
    "start": "433759",
    "end": "441199"
  },
  {
    "text": "better way so in graphql this is basically the hello world of",
    "start": "441199",
    "end": "447199"
  },
  {
    "text": "graphql we could ask for what we want essentially graphql",
    "start": "447199",
    "end": "452639"
  },
  {
    "text": "reverses the responsibility of what to fetch and empowers",
    "start": "452639",
    "end": "458479"
  },
  {
    "text": "the consumer of our api to ask for exactly what he or she needs",
    "start": "458479",
    "end": "465120"
  },
  {
    "text": "so in this case we want to have just the username of our service",
    "start": "465120",
    "end": "471039"
  },
  {
    "text": "and our graphql server would respond with exactly the requested data",
    "start": "471039",
    "end": "478240"
  },
  {
    "text": "but as our components change our data needs like we're moving from desktop to",
    "start": "478240",
    "end": "483680"
  },
  {
    "text": "mobile we have different data fetching needs and maybe we need some more data maybe",
    "start": "483680",
    "end": "490240"
  },
  {
    "text": "need the profile picture of that user so we could just craft a new request for this new use",
    "start": "490240",
    "end": "496879"
  },
  {
    "text": "case and ask for more data and again our server would just respond with the",
    "start": "496879",
    "end": "503440"
  },
  {
    "text": "data we asked for and if we look at that",
    "start": "503440",
    "end": "509520"
  },
  {
    "text": "we realize that graphql is not about flat data structure it's about data trees",
    "start": "509520",
    "end": "516240"
  },
  {
    "text": "and that's why it's so great with graphql to explore connections",
    "start": "516240",
    "end": "521440"
  },
  {
    "text": "because i can drill into my friends maybe in the facebook use case and",
    "start": "521440",
    "end": "526640"
  },
  {
    "text": "not only fetch the user but in the same instance already all the friends of this",
    "start": "526640",
    "end": "531680"
  },
  {
    "text": "user i could go even further and fetch in the same request also the",
    "start": "531680",
    "end": "538399"
  },
  {
    "text": "news and the comments that i need and if we look at that",
    "start": "538399",
    "end": "544240"
  },
  {
    "text": "we can see that we are repeating things that we want to fetch me for instance is a user",
    "start": "544240",
    "end": "551120"
  },
  {
    "text": "and friends is a list of users and in both cases we are fetching name and last scene",
    "start": "551120",
    "end": "557120"
  },
  {
    "text": "so that's why facebook actually introduced something we call a fragment and the fragment",
    "start": "557120",
    "end": "563200"
  },
  {
    "text": "is our primitive of composition in graphql it allows us to compose fragment",
    "start": "563200",
    "end": "568640"
  },
  {
    "text": "hierarchies as we compose component hierarchies in our front end",
    "start": "568640",
    "end": "574800"
  },
  {
    "text": "or class hierarchies in our backends but more to that later",
    "start": "574800",
    "end": "580320"
  },
  {
    "text": "so graphql gives clients or consumers the power to",
    "start": "580320",
    "end": "585920"
  },
  {
    "text": "ask for exactly what they want and nothing more so what is graphql",
    "start": "585920",
    "end": "593360"
  },
  {
    "text": "graphql is a query language for your api and a runtime",
    "start": "593360",
    "end": "598560"
  },
  {
    "text": "to fulfill those queries and that means in graphql we have a",
    "start": "598560",
    "end": "604800"
  },
  {
    "text": "single endpoint and we can get all the data we need in a single request",
    "start": "604800",
    "end": "612160"
  },
  {
    "text": "and that means we don't have the problem of over or under fetching that we have with traditional data fetching",
    "start": "612160",
    "end": "617760"
  },
  {
    "text": "technologies over fetching is every time an endpoint",
    "start": "617760",
    "end": "623040"
  },
  {
    "text": "like the user endpoint gives us too much data gives us data we don't need we maybe just wanted the username but we",
    "start": "623040",
    "end": "629360"
  },
  {
    "text": "get all the informations about the user so that we call over fetching",
    "start": "629360",
    "end": "634480"
  },
  {
    "text": "under fetching is the reverse problem we fetch the news and there is an author id in there but",
    "start": "634480",
    "end": "641519"
  },
  {
    "text": "we don't want this id we actually want the name of the author so we under fetched and have to do a consecutive",
    "start": "641519",
    "end": "649600"
  },
  {
    "text": "data fetch to get the action information we need",
    "start": "649600",
    "end": "654880"
  },
  {
    "text": "graphql is built on a strong type system because when facebook looked at their api they said oh we have a awesome",
    "start": "655360",
    "end": "663519"
  },
  {
    "text": "domain model that we designed in our internal api we want to make it expose",
    "start": "663519",
    "end": "669680"
  },
  {
    "text": "or we want to be able to expose it without compromise",
    "start": "669680",
    "end": "675040"
  },
  {
    "text": "and this type system this strong type system in graphql makes it very predictable to use the api",
    "start": "675040",
    "end": "682720"
  },
  {
    "text": "from a consumer perspective because when graphql tells me to that",
    "start": "682720",
    "end": "688480"
  },
  {
    "text": "a field is a string or a non-nullable string it will never violate that contract",
    "start": "688480",
    "end": "695120"
  },
  {
    "text": "on top of that graphql is real time but enough of the talk let's see some",
    "start": "695600",
    "end": "702959"
  },
  {
    "text": "code but before we see some code let me say one last thing here so in graphql we",
    "start": "702959",
    "end": "710399"
  },
  {
    "text": "have operations and that's an important aspect to understand we have",
    "start": "710399",
    "end": "715519"
  },
  {
    "text": "three operation kinds we have queries that is side effect free reads on our",
    "start": "715519",
    "end": "721519"
  },
  {
    "text": "model on the back end and then we have something called we call a mutation then our right operations and if you compare",
    "start": "721519",
    "end": "728639"
  },
  {
    "text": "that to rest it's the post patch delete that we have to figure out which verb we",
    "start": "728639",
    "end": "734880"
  },
  {
    "text": "actually have to use in rest and subscription is our real time capability",
    "start": "734880",
    "end": "742320"
  },
  {
    "text": "to query the system in real time when something is happening so the events in our system",
    "start": "742320",
    "end": "749680"
  },
  {
    "text": "in this first demo we will have a look at queries so let's dive just in actually let me",
    "start": "750720",
    "end": "758959"
  },
  {
    "text": "get rid of this and then go in so this is an",
    "start": "758959",
    "end": "765200"
  },
  {
    "text": "empty project or it's not even a project it's just an empty folder and what we're going to do is create a",
    "start": "765200",
    "end": "771839"
  },
  {
    "text": "graphql server and see what we need to do to create a graphql server so the first thing we should do is maybe",
    "start": "771839",
    "end": "779279"
  },
  {
    "text": "just create a web server so net new web we'll just create an empty web project",
    "start": "779279",
    "end": "785680"
  },
  {
    "text": "it's done at asp.net core and if we look at that",
    "start": "785680",
    "end": "791040"
  },
  {
    "text": "there's not much to it right we have a program cs we have a hello world here we could run that call this endpoint it",
    "start": "791040",
    "end": "798160"
  },
  {
    "text": "will say hello world so these are the basics so how do we make it a graphql server so the first thing we need to do",
    "start": "798160",
    "end": "805680"
  },
  {
    "text": "is add a package and we are adding the hot chocolate",
    "start": "805680",
    "end": "812560"
  },
  {
    "text": "dot asp.net core package here did i miss",
    "start": "812720",
    "end": "818560"
  },
  {
    "text": "no should be all right okay that's adding normal the hot",
    "start": "818560",
    "end": "824000"
  },
  {
    "text": "chocolate graphql server for the net let's see if everything is in here",
    "start": "824000",
    "end": "830399"
  },
  {
    "text": "okay it's now in and with that we can build a graphql server and i said",
    "start": "830399",
    "end": "836720"
  },
  {
    "text": "that operations are important and we are going to build a query operation",
    "start": "836720",
    "end": "842480"
  },
  {
    "text": "so that means let's create a query dot cs",
    "start": "842480",
    "end": "847680"
  },
  {
    "text": "and this query.cs is a simple class that will represent our query type",
    "start": "847680",
    "end": "853760"
  },
  {
    "text": "let me put just an empty class in here so in order to",
    "start": "853760",
    "end": "859040"
  },
  {
    "text": "expose something in my graphql server and let's start with a simple hello world here we need something that we",
    "start": "859040",
    "end": "865120"
  },
  {
    "text": "call a resolver in graphql a resolver",
    "start": "865120",
    "end": "871839"
  },
  {
    "text": "is just a simple method in hot chocolate so i'm just creating here a method called hello which has a",
    "start": "871839",
    "end": "880320"
  },
  {
    "text": "input like an argument we should we would say in graphql or a parameter in c",
    "start": "880320",
    "end": "886240"
  },
  {
    "text": "sharp that is called name and has default of word",
    "start": "886240",
    "end": "891279"
  },
  {
    "text": "and from that we compose just a string here that says hello common name let's run that",
    "start": "891279",
    "end": "900000"
  },
  {
    "text": "so it's building two seconds",
    "start": "904880",
    "end": "909920"
  },
  {
    "text": "and it's up let me just copy this url let's paste it in here",
    "start": "910399",
    "end": "918320"
  },
  {
    "text": "that's not what we want and that is correct because i forgot something so we created um a correct",
    "start": "919199",
    "end": "926320"
  },
  {
    "text": "operation type here but we set and set to our web server nothing how to",
    "start": "926320",
    "end": "933279"
  },
  {
    "text": "deal with that so in graphql to make the graphql server we actually go here and look at our web",
    "start": "933279",
    "end": "940079"
  },
  {
    "text": "application builder and then we say builder.services.add",
    "start": "940079",
    "end": "945360"
  },
  {
    "text": "graphql server and then we add our query type as an operation to",
    "start": "945360",
    "end": "953040"
  },
  {
    "text": "it so we say add query type query and now we have a graphql server but",
    "start": "953040",
    "end": "959440"
  },
  {
    "text": "there's still one piece missing and that is the transport at the moment we just",
    "start": "959440",
    "end": "964560"
  },
  {
    "text": "have mapped this get endpoint here and to make make it a graphql server we need",
    "start": "964560",
    "end": "969680"
  },
  {
    "text": "to say map a graphql and then we are done",
    "start": "969680",
    "end": "974880"
  },
  {
    "text": "let's rebuild that and let's see if it's now a graphql server",
    "start": "974880",
    "end": "983680"
  },
  {
    "text": "i always struggle with the hot reload no hot",
    "start": "983680",
    "end": "989120"
  },
  {
    "text": "reload who actually wanted hot reloading on that",
    "start": "989120",
    "end": "996320"
  },
  {
    "text": "okay okay and that's what i expect so we get uh",
    "start": "996320",
    "end": "1002160"
  },
  {
    "text": "four or four because we don't have map this initial endpoint anymore and the graph to an endpoint by default",
    "start": "1002160",
    "end": "1009519"
  },
  {
    "text": "is mapped on the graphql route and if i go in this route i am greeted here with bananacachpop",
    "start": "1009519",
    "end": "1016240"
  },
  {
    "text": "that is the graphql ide that our open source project has built",
    "start": "1016240",
    "end": "1022000"
  },
  {
    "text": "and we can now dive into our api by creating a document here and says you want to create a new",
    "start": "1022000",
    "end": "1028240"
  },
  {
    "text": "document for our api i say yes and then i could start writing my graphql query here but before i do that",
    "start": "1028240",
    "end": "1035678"
  },
  {
    "text": "i can dive into my schema and look at what it exposes and we can see that i'm",
    "start": "1035679",
    "end": "1041360"
  },
  {
    "text": "exposing here the query type and down here i can see that the query",
    "start": "1041360",
    "end": "1046798"
  },
  {
    "text": "type has a hello field and this hello field has an argument",
    "start": "1046799",
    "end": "1051840"
  },
  {
    "text": "name which returns a string and has a default word so why am i saying that because graphql",
    "start": "1051840",
    "end": "1059280"
  },
  {
    "text": "exposes my internal api over the wire in a much richer way than",
    "start": "1059280",
    "end": "1065760"
  },
  {
    "text": "i could do with rest it doesn't work just with those simple cases like if you have interfaces or things like that it",
    "start": "1065760",
    "end": "1073200"
  },
  {
    "text": "will also translate to graphql and we will see that in a minute but let's start with this simple thing here",
    "start": "1073200",
    "end": "1079679"
  },
  {
    "text": "we can just now write a graphql query and ask for the hello field and if we",
    "start": "1079679",
    "end": "1085120"
  },
  {
    "text": "run that we get hello world and since we have an argument we can pass data in like michael",
    "start": "1085120",
    "end": "1093280"
  },
  {
    "text": "and then i get hello michael so that is nice let's make it more",
    "start": "1093280",
    "end": "1098880"
  },
  {
    "text": "complex let's put some more data structures in here for instance let's add an author",
    "start": "1098880",
    "end": "1106480"
  },
  {
    "text": "typical example i know and maybe a book and the book has an",
    "start": "1106480",
    "end": "1111760"
  },
  {
    "text": "author and then we introduce a new resolver to our query type",
    "start": "1111760",
    "end": "1116880"
  },
  {
    "text": "and that is the get books resolver and the get books resolver will return here",
    "start": "1116880",
    "end": "1122080"
  },
  {
    "text": "two books of the same author so let's go back to our graphql point",
    "start": "1122080",
    "end": "1127919"
  },
  {
    "text": "and refresh our schema and let's have a look at that schema we immediately can see that we now have",
    "start": "1127919",
    "end": "1134160"
  },
  {
    "text": "a books field and it's called books because in graphql we don't use these verbs like get",
    "start": "1134160",
    "end": "1140320"
  },
  {
    "text": "and and things like that so we wouldn't also we would also remove things like async things that are dot netty but not",
    "start": "1140320",
    "end": "1147679"
  },
  {
    "text": "graphically okay we also can have a look at it differently like this our query",
    "start": "1147679",
    "end": "1153919"
  },
  {
    "text": "type we can now dive into our books field here and then can dive into the",
    "start": "1153919",
    "end": "1159440"
  },
  {
    "text": "author to fetch the name let's do that so we fetch above here hello still",
    "start": "1159440",
    "end": "1167200"
  },
  {
    "text": "but now we also want the books and from the books maybe just the title and when we fetch that we exactly get",
    "start": "1167200",
    "end": "1174480"
  },
  {
    "text": "what we asked for but we also can fetch like everything and go in and ask for the author as well",
    "start": "1174480",
    "end": "1183039"
  },
  {
    "text": "and the author doesn't have a title but a name we format that",
    "start": "1183039",
    "end": "1189520"
  },
  {
    "text": "something is wrong that is not right okay and fetch that and then i get what i",
    "start": "1189520",
    "end": "1196960"
  },
  {
    "text": "asked for okay that is awesome let me close that",
    "start": "1196960",
    "end": "1204080"
  },
  {
    "text": "and let's get to it back to the slides so let's recap that",
    "start": "1204080",
    "end": "1209520"
  },
  {
    "text": "that was our query operation type and the query operation type has",
    "start": "1209520",
    "end": "1214720"
  },
  {
    "text": "something that we call in graphql resolver that's the c sharp method here and",
    "start": "1214720",
    "end": "1220400"
  },
  {
    "text": "when our graphql server looks at this class it will translate it into a",
    "start": "1220400",
    "end": "1225919"
  },
  {
    "text": "graphql type that looks like this and in a graphql type",
    "start": "1225919",
    "end": "1231440"
  },
  {
    "text": "this by the way is the annotation based approach and when facebook invented graphql they",
    "start": "1231440",
    "end": "1237919"
  },
  {
    "text": "started with the annotation-based approach so essentially you have an api we infer from that the graphql types put",
    "start": "1237919",
    "end": "1244720"
  },
  {
    "text": "a thin layer of graphql on the top and then essentially our domain model is",
    "start": "1244720",
    "end": "1249760"
  },
  {
    "text": "exposed so in the graphql type hello is called a",
    "start": "1249760",
    "end": "1254960"
  },
  {
    "text": "field and the field in graphql is like a method in.net",
    "start": "1254960",
    "end": "1260400"
  },
  {
    "text": "and then we have in our field arguments like in a proper method we don't have to have",
    "start": "1260400",
    "end": "1266240"
  },
  {
    "text": "arguments but we can have and these arguments can have default values like in.net",
    "start": "1266240",
    "end": "1273360"
  },
  {
    "text": "but we even can have more here we could have object trees as default values that we cannot have in",
    "start": "1273360",
    "end": "1280240"
  },
  {
    "text": "dotnet and at the end here you see always this bang operator because in graphql we have",
    "start": "1280240",
    "end": "1286320"
  },
  {
    "text": "the reverse types are nullable by default",
    "start": "1286320",
    "end": "1291760"
  },
  {
    "text": "and if we want to make them nullable we apply the bang operator this is a bit reversed from the net way like in.net we",
    "start": "1291760",
    "end": "1299280"
  },
  {
    "text": "put a question mark at the end to market nullable okay",
    "start": "1299280",
    "end": "1306080"
  },
  {
    "text": "let me say something about the transport because in graphql",
    "start": "1306080",
    "end": "1312080"
  },
  {
    "text": "we write this nice query but how does it translate over the wire so the typical graphql request is an",
    "start": "1312080",
    "end": "1318880"
  },
  {
    "text": "http post request so um if you go and look for instance at",
    "start": "1318880",
    "end": "1325039"
  },
  {
    "text": "twitter twitter uses graphql then you see only http",
    "start": "1325039",
    "end": "1330080"
  },
  {
    "text": "and then there's graphql graphql works over http by the spec graphql is actually",
    "start": "1330080",
    "end": "1336720"
  },
  {
    "text": "transport agnostic that is why you also can use websockets to use graphql grpc or server-side",
    "start": "1336720",
    "end": "1344640"
  },
  {
    "text": "events works also over these so let's make it more complex and build",
    "start": "1344640",
    "end": "1351440"
  },
  {
    "text": "a more complex backend and we have let me go through that",
    "start": "1351440",
    "end": "1357200"
  },
  {
    "text": "we have built a little demo application with which we teach graphql that is this",
    "start": "1357200",
    "end": "1363840"
  },
  {
    "text": "crypto application here where you can check crypto prices the prices are not real so don't buy",
    "start": "1363840",
    "end": "1371039"
  },
  {
    "text": "so this application is what i call a modern application what is a modern application",
    "start": "1373200",
    "end": "1379120"
  },
  {
    "text": "and this is a yeah like like a fancy term but for me a modern application is reactive",
    "start": "1379120",
    "end": "1386480"
  },
  {
    "text": "and that means if i for instance go into here the data really lives",
    "start": "1386480",
    "end": "1392320"
  },
  {
    "text": "that often translate into me using observables you can see the prices",
    "start": "1392320",
    "end": "1397600"
  },
  {
    "text": "changing but if i go back into my dashboard view the prices in the ticker will change",
    "start": "1397600",
    "end": "1404559"
  },
  {
    "text": "when everything whenever something changes in the back end by the way this real-time data is graphical over",
    "start": "1404559",
    "end": "1411600"
  },
  {
    "text": "websockets so this doesn't work over http or the simple data fetching is done",
    "start": "1411600",
    "end": "1417120"
  },
  {
    "text": "over http but let's have a look at the network tab now it's pretty small but you can see",
    "start": "1417120",
    "end": "1424000"
  },
  {
    "text": "here two graphql requests because i navigated essentially to the bitcoin price let's kill that refresh the app",
    "start": "1424000",
    "end": "1432960"
  },
  {
    "text": "so ah that's the internet is really not so nice here",
    "start": "1432960",
    "end": "1438559"
  },
  {
    "text": "i struggled yesterday with it but okay but what you can see is that we have a",
    "start": "1438559",
    "end": "1444320"
  },
  {
    "text": "single graphql request to get all the data for our components",
    "start": "1444320",
    "end": "1449600"
  },
  {
    "text": "and if i go now to the bitcoin price or to any other price let's go to this one",
    "start": "1449600",
    "end": "1454640"
  },
  {
    "text": "we have again just one more graphql request because because we can fetch",
    "start": "1454640",
    "end": "1459760"
  },
  {
    "text": "everything we need at any point in time in one request and",
    "start": "1459760",
    "end": "1465440"
  },
  {
    "text": "that makes it super resilient over mobile connections like you're on a bus",
    "start": "1465440",
    "end": "1470559"
  },
  {
    "text": "you have a 3g connection you fetch something it's not 10 000 connections that wait for other connections to",
    "start": "1470559",
    "end": "1476720"
  },
  {
    "text": "finish it's a single connection to fetch your data okay let's have a look at how we could build",
    "start": "1476720",
    "end": "1483520"
  },
  {
    "text": "such a back end and let me go back to the slides here",
    "start": "1483520",
    "end": "1489039"
  },
  {
    "text": "so just recap so a goal for our modern application that we want to build",
    "start": "1489039",
    "end": "1495600"
  },
  {
    "text": "is that we want to have a fast iteration we don't want to block our front-end engineer of building the front end",
    "start": "1495600",
    "end": "1501919"
  },
  {
    "text": "meaning he should not wait for us in the back end to create a new rest endpoint so",
    "start": "1501919",
    "end": "1507840"
  },
  {
    "text": "just that he can finish his use case he should just tell the backend what he needs or he or she needs",
    "start": "1507840",
    "end": "1515840"
  },
  {
    "text": "and we want to have strong contracts and you saw how the net api",
    "start": "1515840",
    "end": "1521279"
  },
  {
    "text": "easily translates to graphql in graphical we actually have more type constructs than in.net",
    "start": "1521279",
    "end": "1527760"
  },
  {
    "text": "because in graphql we have for instance unions we don't have that in not net even",
    "start": "1527760",
    "end": "1534080"
  },
  {
    "text": "and on top of that modern applications should enable me in development time that i'm",
    "start": "1534080",
    "end": "1539600"
  },
  {
    "text": "really work with static typing and graphql is statically typed and that",
    "start": "1539600",
    "end": "1545520"
  },
  {
    "text": "translates to me in react when i compile my react application i get proper",
    "start": "1545520",
    "end": "1551120"
  },
  {
    "text": "compilation errors if i ask for the wrong things okay",
    "start": "1551120",
    "end": "1556400"
  },
  {
    "text": "let's go and have a look at the next demo and that is",
    "start": "1556400",
    "end": "1561760"
  },
  {
    "text": "how would i deal with proper data and typically a lot of",
    "start": "1561760",
    "end": "1567520"
  },
  {
    "text": "engineers still love entity framework so let's have a look at how i could",
    "start": "1567520",
    "end": "1574000"
  },
  {
    "text": "expose something that is in my entity framework and in this demo",
    "start": "1574000",
    "end": "1580159"
  },
  {
    "text": "okay let me click that away i have just a db context and this db context provides the base data for the",
    "start": "1580159",
    "end": "1587440"
  },
  {
    "text": "api we saw so we have an asset that is essentially my coin here and i",
    "start": "1587440",
    "end": "1594559"
  },
  {
    "text": "have information about the asset and i have the asset context which is my",
    "start": "1594559",
    "end": "1600400"
  },
  {
    "text": "db context here and i have the asset prices okay so how could we make that a graphql",
    "start": "1600400",
    "end": "1607520"
  },
  {
    "text": "server so what we learned in our first demo is that we need to create an operation type here so we",
    "start": "1607520",
    "end": "1614400"
  },
  {
    "text": "could start again with the query type that we built before so empty class query",
    "start": "1614400",
    "end": "1621200"
  },
  {
    "text": "so how do we expose our entity framework data here that's quite easy we learned it's just a",
    "start": "1621200",
    "end": "1627520"
  },
  {
    "text": "method so we could create a method called assets getassets that returns an",
    "start": "1627520",
    "end": "1633440"
  },
  {
    "text": "iqueryable from our db context there's one thing in graphql we want to",
    "start": "1633440",
    "end": "1639440"
  },
  {
    "text": "parallelize data fetching so we can fetch data really quickly and that's why we used a method",
    "start": "1639440",
    "end": "1646159"
  },
  {
    "text": "dependency injection meaning we are not creating all the",
    "start": "1646159",
    "end": "1651840"
  },
  {
    "text": "services that we need for all the resolvers at once we are looking what",
    "start": "1651840",
    "end": "1657279"
  },
  {
    "text": "your request looks like and then we only create the services for the resolvers you really need",
    "start": "1657279",
    "end": "1663520"
  },
  {
    "text": "so we are injecting here the asset db context and then we're just returning",
    "start": "1663520",
    "end": "1668640"
  },
  {
    "text": "the assets okay let's set that up in our server we",
    "start": "1668640",
    "end": "1674159"
  },
  {
    "text": "already have the add graphql server here to host our query type we just do add",
    "start": "1674159",
    "end": "1680960"
  },
  {
    "text": "query type and then query that's what we did before right let me just reformat that",
    "start": "1680960",
    "end": "1688640"
  },
  {
    "text": "so what you can see i'm using a pool db context up there and i'm using a pool db",
    "start": "1688640",
    "end": "1694159"
  },
  {
    "text": "context because i want a fast server i don't want to waste memory of a scope db",
    "start": "1694159",
    "end": "1700240"
  },
  {
    "text": "context so i'm pulling it and that also allows me to use multiple db context in",
    "start": "1700240",
    "end": "1705679"
  },
  {
    "text": "parallel so i need to explain kind of to my graphql engine how to deal with that so",
    "start": "1705679",
    "end": "1712000"
  },
  {
    "text": "i can say register db context",
    "start": "1712000",
    "end": "1717520"
  },
  {
    "text": "the asset db context and this db context actually is a pooled db",
    "start": "1717520",
    "end": "1723600"
  },
  {
    "text": "context it's not scoped and now my graphql engine knows that it has to get the the db context from the db context",
    "start": "1723600",
    "end": "1731440"
  },
  {
    "text": "factory use it and then return it to the pool i don't deal with this complicated stuff",
    "start": "1731440",
    "end": "1738480"
  },
  {
    "text": "i just tell my graphql engine about it okay let's just",
    "start": "1738480",
    "end": "1744480"
  },
  {
    "text": "dotnet watch and this time no hard reload",
    "start": "1744480",
    "end": "1750320"
  },
  {
    "text": "this should be a default okay let's wait for it to compile",
    "start": "1750320",
    "end": "1758799"
  },
  {
    "text": "and there it is let's go back to our browser here",
    "start": "1759760",
    "end": "1764960"
  },
  {
    "text": "it's now on port 5000 graphql and let's re-fetch",
    "start": "1764960",
    "end": "1771120"
  },
  {
    "text": "my graphql schema let's have a look at the schema reference and i can see i have a assets",
    "start": "1771120",
    "end": "1777360"
  },
  {
    "text": "field here and i have all these property of my assets and i have my asset",
    "start": "1777360",
    "end": "1782960"
  },
  {
    "text": "pricier so let's query that so i again start with my graphql query",
    "start": "1782960",
    "end": "1789120"
  },
  {
    "text": "give me assets maybe let's just fetch the asset names and then i fetch that and i get all the",
    "start": "1789120",
    "end": "1795840"
  },
  {
    "text": "data but this also introduced kind of a problem here because it's my whole",
    "start": "1795840",
    "end": "1801279"
  },
  {
    "text": "database and if i had more in there that would be really a problem",
    "start": "1801279",
    "end": "1807440"
  },
  {
    "text": "and this is the right time to talk about pagination because when facebook created",
    "start": "1807440",
    "end": "1813440"
  },
  {
    "text": "graphql they also rethought how to do pagination",
    "start": "1813440",
    "end": "1820000"
  },
  {
    "text": "so typically when we talk about pagination you would talk about offset pagination",
    "start": "1820000",
    "end": "1825840"
  },
  {
    "text": "and that's the skip and take what you do but facebook with a lot of",
    "start": "1825840",
    "end": "1832000"
  },
  {
    "text": "new data that is coming in by users all the time had a problem with this skip take approach",
    "start": "1832000",
    "end": "1839039"
  },
  {
    "text": "because when you maybe were on page one and you wanted to skip to page two and",
    "start": "1839039",
    "end": "1846480"
  },
  {
    "text": "now new data comes in and you go to page two you again had the same data",
    "start": "1846480",
    "end": "1853120"
  },
  {
    "text": "because we are not pinned to our items and it could also happen that you have",
    "start": "1853120",
    "end": "1859600"
  },
  {
    "text": "the exact same data because it's so much data came in that you maybe even went backwards",
    "start": "1859600",
    "end": "1866399"
  },
  {
    "text": "by going forwards so they introduced something that they call cursor-based pagination",
    "start": "1866399",
    "end": "1874559"
  },
  {
    "text": "and cursor-based pagination pins the item with a key",
    "start": "1874559",
    "end": "1880240"
  },
  {
    "text": "so it takes your id of the entity and essentially navigates from that id",
    "start": "1880240",
    "end": "1887200"
  },
  {
    "text": "so in cursor based pagination we would say we take five items",
    "start": "1887200",
    "end": "1893360"
  },
  {
    "text": "after the id five the item with the id five and as new data comes in our pages",
    "start": "1893360",
    "end": "1899760"
  },
  {
    "text": "actually move so we don't get repeated data",
    "start": "1899760",
    "end": "1905799"
  },
  {
    "text": "so what do i have to do to do because of his pagination sounds complex",
    "start": "1906240",
    "end": "1912480"
  },
  {
    "text": "so actually we just say use",
    "start": "1912480",
    "end": "1918559"
  },
  {
    "text": "paging that will recompile was more about the concept then",
    "start": "1918840",
    "end": "1926559"
  },
  {
    "text": "and now i can refresh here my graphql schema and i see okay there's something",
    "start": "1928080",
    "end": "1933120"
  },
  {
    "text": "wrong schema has changed because we now have a type that they call a connection so every list they",
    "start": "1933120",
    "end": "1940559"
  },
  {
    "text": "essentially say that's a connection to a different node in my graph and you can see i have edges edges are",
    "start": "1940559",
    "end": "1947519"
  },
  {
    "text": "essentially my asset and the cursor to that asset and i also have nodes which is kind of a",
    "start": "1947519",
    "end": "1953600"
  },
  {
    "text": "clean view at my list and i have paging info where i have the end cursor of a page",
    "start": "1953600",
    "end": "1959919"
  },
  {
    "text": "the start cursor or indicator if there's more data let's try that out a bit",
    "start": "1959919",
    "end": "1966720"
  },
  {
    "text": "so we could say nodes and then i just again want the name here",
    "start": "1966720",
    "end": "1972880"
  },
  {
    "text": "and i fire that and then i only get 10 items because that's the default we have configured in",
    "start": "1973519",
    "end": "1980000"
  },
  {
    "text": "hot chocolate 10 items by default you can change that default okay and i also can",
    "start": "1980000",
    "end": "1986799"
  },
  {
    "text": "kind of look at the paging info i just want to do a fast forward paging here so let's just ask for does it has a next",
    "start": "1986799",
    "end": "1993919"
  },
  {
    "text": "page and what is the end cursor and if i ask for that",
    "start": "1993919",
    "end": "1999440"
  },
  {
    "text": "it will say the it has a next page and this is the end cursor and then i can use like the",
    "start": "1999440",
    "end": "2006240"
  },
  {
    "text": "arguments in my field what my paging middleware just injected into that field i want after the cursor",
    "start": "2006240",
    "end": "2013120"
  },
  {
    "text": "this guy here i want the first two items",
    "start": "2013120",
    "end": "2018640"
  },
  {
    "text": "and if i do that i just get the next two items navigated from the last item in my",
    "start": "2018640",
    "end": "2024159"
  },
  {
    "text": "list okay let's just wipe that out",
    "start": "2024159",
    "end": "2029440"
  },
  {
    "text": "go back to our slides okay and i said use pagination is",
    "start": "2029440",
    "end": "2036960"
  },
  {
    "text": "actually a field middleware what does a field middleware mean so this is my",
    "start": "2036960",
    "end": "2043279"
  },
  {
    "text": "resolver and this guy up here is my field middleware and the field middleware is",
    "start": "2043279",
    "end": "2049118"
  },
  {
    "text": "the exact same thing that we have in asp.net core just on the request so in",
    "start": "2049119",
    "end": "2054320"
  },
  {
    "text": "asp.net core we would say use authentication use websockets and if we",
    "start": "2054320",
    "end": "2059599"
  },
  {
    "text": "put them one after the other it builds a pipeline and that's the same thing that we do here by putting use paging on the",
    "start": "2059599",
    "end": "2066960"
  },
  {
    "text": "top we compile from that a pipeline for this field where use",
    "start": "2066960",
    "end": "2073118"
  },
  {
    "text": "pagination is actually use paging is actually the first item in the pipeline and after that comes the resolver",
    "start": "2073119",
    "end": "2079919"
  },
  {
    "text": "we have more of these middlewares like we could say use paging use projects news filtering new sorting",
    "start": "2079919",
    "end": "2086878"
  },
  {
    "text": "which add new data capabilities to your graphql resolver",
    "start": "2086879",
    "end": "2092720"
  },
  {
    "text": "so a field middleware works like this i said it's a pipeline the use paging",
    "start": "2092720",
    "end": "2097839"
  },
  {
    "text": "middleware essentially asks for the next pipeline element in the list",
    "start": "2097839",
    "end": "2104160"
  },
  {
    "text": "of the pipeline and then get assets will be executed",
    "start": "2104160",
    "end": "2109680"
  },
  {
    "text": "which returns a variable and then use paging will apply on this queryable",
    "start": "2109680",
    "end": "2114839"
  },
  {
    "text": "slicing and if we add all the other middlewares here then we can see so use",
    "start": "2114839",
    "end": "2121920"
  },
  {
    "text": "pagination defers to the next filtering the first to the next sorting the first to the next then we return the filtering",
    "start": "2121920",
    "end": "2129359"
  },
  {
    "text": "we create an expression for sorting we apply that on our variable and so on and",
    "start": "2129359",
    "end": "2134800"
  },
  {
    "text": "at the end this is translated into sql in the case of entity framework",
    "start": "2134800",
    "end": "2140800"
  },
  {
    "text": "this graphql query translates into",
    "start": "2140800",
    "end": "2145920"
  },
  {
    "text": "the sql representation but actually graphql is not",
    "start": "2145920",
    "end": "2152320"
  },
  {
    "text": "a query language for your database sql is much better but this is just the capabilities we can",
    "start": "2152320",
    "end": "2157680"
  },
  {
    "text": "do with field middlewares actually graphql is best on top of your application layer",
    "start": "2157680",
    "end": "2163359"
  },
  {
    "text": "so if you have a proper domain layer expose this paging will work also with this you can",
    "start": "2163359",
    "end": "2169839"
  },
  {
    "text": "have a custom paging provider for your domain layer",
    "start": "2169839",
    "end": "2175359"
  },
  {
    "text": "but let's have a look at the data middlewares first okay so i said we can pipeline that here",
    "start": "2175359",
    "end": "2182079"
  },
  {
    "text": "so we can say use projection then we can say",
    "start": "2182079",
    "end": "2188160"
  },
  {
    "text": "use filtering and then we can say use sorting so that's our pipeline now",
    "start": "2188160",
    "end": "2195200"
  },
  {
    "text": "this guy belongs to the graphql core because it's a core functionality these guys are integration for database",
    "start": "2195200",
    "end": "2202720"
  },
  {
    "text": "provider and we we actually integrate with everything that is there so if you bring us a mongodb it works if you go with cosmos",
    "start": "2202720",
    "end": "2210560"
  },
  {
    "text": "db it works if you go with entity framework everything under there it works and we are also working on elastic",
    "start": "2210560",
    "end": "2216640"
  },
  {
    "text": "as a search provider on top okay because these are data",
    "start": "2216640",
    "end": "2222480"
  },
  {
    "text": "middlewares we need to kind of tell our graphql server that we want to use projections here and we want",
    "start": "2222480",
    "end": "2229040"
  },
  {
    "text": "to use filtering so we centrally tell our graphql engine",
    "start": "2229040",
    "end": "2234480"
  },
  {
    "text": "that we are now using these data middlewares",
    "start": "2234480",
    "end": "2240000"
  },
  {
    "text": "okay should rebuild no i stopped it that was not good",
    "start": "2240000",
    "end": "2246960"
  },
  {
    "text": "just a second thank you",
    "start": "2249440",
    "end": "2254880"
  },
  {
    "text": "okay let's refresh that we have a new schema let's have a quick",
    "start": "2254880",
    "end": "2260320"
  },
  {
    "text": "look at it if we now look at our arguments of our field we can see we have the paging",
    "start": "2260320",
    "end": "2267040"
  },
  {
    "text": "arguments but we also here have now a where argument on order argument",
    "start": "2267040",
    "end": "2273119"
  },
  {
    "text": "so i kind of can now say give me all the assets and i want the asset name",
    "start": "2273119",
    "end": "2280640"
  },
  {
    "text": "and i want the price and from the price i want the latest price",
    "start": "2280640",
    "end": "2286720"
  },
  {
    "text": "um but actually order this stuff please buy the price",
    "start": "2286720",
    "end": "2294079"
  },
  {
    "text": "i use the price information and then by by the market",
    "start": "2294079",
    "end": "2299440"
  },
  {
    "text": "by the market cap so the market capitalization",
    "start": "2299440",
    "end": "2304480"
  },
  {
    "text": "of the coin so i want the the coin with the highest market capitalization at the top so we're",
    "start": "2304480",
    "end": "2311119"
  },
  {
    "text": "ordering it descendingly let's do that and i get it exactly like i want so i",
    "start": "2311119",
    "end": "2318400"
  },
  {
    "text": "can empower the client to ask for the data and also tell my bank and how i want this data",
    "start": "2318400",
    "end": "2325520"
  },
  {
    "text": "and let's have a quick look at oh",
    "start": "2325520",
    "end": "2330560"
  },
  {
    "text": "no that's a other one this guy here look at this it's exactly the the data i asked for",
    "start": "2330560",
    "end": "2337839"
  },
  {
    "text": "translated to the exact database query language and it works actually with  even better",
    "start": "2337839",
    "end": "2345520"
  },
  {
    "text": "than with a native mongod adb driver okay",
    "start": "2345520",
    "end": "2350720"
  },
  {
    "text": "so let's go back to my slides and one morning here so actually",
    "start": "2350800",
    "end": "2356800"
  },
  {
    "text": "i wouldn't expose it like that just expose my database so as i said use your",
    "start": "2356800",
    "end": "2362240"
  },
  {
    "text": "domain layer use your application layer and if you expose filtering like that",
    "start": "2362240",
    "end": "2367359"
  },
  {
    "text": "tell the graphql engine what you want to expose here so i would limit that i don't have the time to show you but you",
    "start": "2367359",
    "end": "2374160"
  },
  {
    "text": "can actually create a little graphql type and tell it what filtering is allowed",
    "start": "2374160",
    "end": "2379680"
  },
  {
    "text": "because we don't want to have maybe text search filters on our sql database",
    "start": "2379680",
    "end": "2386320"
  },
  {
    "text": "okay let's talk about different kinds of data let's talk about",
    "start": "2386320",
    "end": "2392480"
  },
  {
    "text": "rest because when you integrate graphql and that's how it actually started",
    "start": "2392480",
    "end": "2397520"
  },
  {
    "text": "is that you might have other services you might have a rest infrastructure or you might have",
    "start": "2397520",
    "end": "2403599"
  },
  {
    "text": "a grpc infrastructure with lots of microservices so what we talked about was graphql and",
    "start": "2403599",
    "end": "2410400"
  },
  {
    "text": "the data layer so far but actually graphql would go on the business layer that's how facebook intended it",
    "start": "2410400",
    "end": "2417040"
  },
  {
    "text": "but when they released graphql to the public it was used more like that because people had their existing",
    "start": "2417040",
    "end": "2424319"
  },
  {
    "text": "infrastructures with microservices or domain services and they would use graphql to make it easier to work with",
    "start": "2424319",
    "end": "2431440"
  },
  {
    "text": "their microservice infrastructure so they would put it on top of that",
    "start": "2431440",
    "end": "2436960"
  },
  {
    "text": "and that can be in different ways like i could have a part of that as internal",
    "start": "2436960",
    "end": "2442640"
  },
  {
    "text": "data structures i could use like the db context as an internal data and then",
    "start": "2442640",
    "end": "2449040"
  },
  {
    "text": "merge that with data from other microservices for instance in our example here we will have a price change",
    "start": "2449040",
    "end": "2455680"
  },
  {
    "text": "service that lives in the cloud as an azure function and pro provides aggregated",
    "start": "2455680",
    "end": "2461680"
  },
  {
    "text": "data functionality so like the percentage change that a coin does in a",
    "start": "2461680",
    "end": "2467440"
  },
  {
    "text": "specified amount of time so our rest service has a url like this",
    "start": "2467440",
    "end": "2475680"
  },
  {
    "text": "you can call it it's actually online ah you can't because i didn't post a",
    "start": "2475680",
    "end": "2481839"
  },
  {
    "text": "real url okay so our service would return a data",
    "start": "2481839",
    "end": "2487920"
  },
  {
    "text": "structure like this like when i asked for the bitcoin for the monthly change i would",
    "start": "2487920",
    "end": "2493040"
  },
  {
    "text": "get a percentage change here like 0.1 percent for instance and i want to",
    "start": "2493040",
    "end": "2499760"
  },
  {
    "text": "integrate that into my graphql service so how would i do that",
    "start": "2499760",
    "end": "2505599"
  },
  {
    "text": "let's just wipe out my other demos here so",
    "start": "2505599",
    "end": "2510800"
  },
  {
    "text": "we don't get confused and let's start with demo three",
    "start": "2510800",
    "end": "2518160"
  },
  {
    "text": "okay that's the same service that we saw before so i have my sdb context here but",
    "start": "2518160",
    "end": "2524079"
  },
  {
    "text": "it's a couple of iterations further so i maybe have now account types like",
    "start": "2524079",
    "end": "2530640"
  },
  {
    "text": "users and stuff like that and i now want to integrate that with data from my rest",
    "start": "2530640",
    "end": "2536800"
  },
  {
    "text": "endpoint or for my microservices so how could i do that in the case of rest so rest is unstructured data okay it",
    "start": "2536800",
    "end": "2544400"
  },
  {
    "text": "could have a swagger schema or so on but mine is just unstructured data so graphql has something that they call the",
    "start": "2544400",
    "end": "2551599"
  },
  {
    "text": "the data definition language or the graphql sdl and i can use that",
    "start": "2551599",
    "end": "2558319"
  },
  {
    "text": "to describe the unstructured data that i have there so i could say schema.graphql",
    "start": "2558640",
    "end": "2564720"
  },
  {
    "text": "and then i could add a type here and that was the type i",
    "start": "2564720",
    "end": "2570079"
  },
  {
    "text": "showed you earlier i could just say there is an asset price change type in",
    "start": "2570079",
    "end": "2575359"
  },
  {
    "text": "the cloud and it's a json object and grab this field here from that json",
    "start": "2575359",
    "end": "2582480"
  },
  {
    "text": "and it's actually a float so now i type this data structure that i have somewhere there i ignored the fields",
    "start": "2582480",
    "end": "2589040"
  },
  {
    "text": "that i don't want from it and then i could integrate that into my graphql schema and that's very",
    "start": "2589040",
    "end": "2596240"
  },
  {
    "text": "easy i tell my graphql engine that i actually want json support",
    "start": "2596240",
    "end": "2602640"
  },
  {
    "text": "and then i kind of say add document from file",
    "start": "2602640",
    "end": "2610318"
  },
  {
    "text": "and then i take the schema.graphql okay",
    "start": "2610400",
    "end": "2616319"
  },
  {
    "text": "and there is one more thing so i now have a type i maybe have this asset or",
    "start": "2616319",
    "end": "2621520"
  },
  {
    "text": "not this price node type here and you can see that it already has a resolver here",
    "start": "2621520",
    "end": "2628160"
  },
  {
    "text": "and i'm just adding another resolver and this resolver",
    "start": "2628160",
    "end": "2634720"
  },
  {
    "text": "fetches essentially with an http client just from this rest service and returns",
    "start": "2634720",
    "end": "2640880"
  },
  {
    "text": "essentially the json element i know i'm telling it this is actually the price change type that i described",
    "start": "2640880",
    "end": "2648240"
  },
  {
    "text": "so let's see how that performs",
    "start": "2648240",
    "end": "2652240"
  },
  {
    "text": "no hot reload",
    "start": "2654800",
    "end": "2657920"
  },
  {
    "text": "let's wait for it",
    "start": "2661520",
    "end": "2664400"
  },
  {
    "text": "okay let's go back to our schema here let's refresh that let's have a look at our schema so we",
    "start": "2669200",
    "end": "2675839"
  },
  {
    "text": "have here query i said it's a couple of iterations further so we have more reservers here",
    "start": "2675839",
    "end": "2681920"
  },
  {
    "text": "so i can drill into my asset here and i can drill into my price here",
    "start": "2681920",
    "end": "2686960"
  },
  {
    "text": "and then i have my price change type here so i can ask for the",
    "start": "2686960",
    "end": "2692800"
  },
  {
    "text": "price change like the time span you can see there's an enum to ask for my service and then i get",
    "start": "2692800",
    "end": "2699119"
  },
  {
    "text": "back this price change field and let's do that so i have this field",
    "start": "2699119",
    "end": "2704319"
  },
  {
    "text": "here and then let's ask for the change of each currency",
    "start": "2704319",
    "end": "2710160"
  },
  {
    "text": "over the months and then ask for the price change let's execute",
    "start": "2710160",
    "end": "2717119"
  },
  {
    "text": "that the specified argument is not right why is it not right",
    "start": "2717119",
    "end": "2723119"
  },
  {
    "text": "because of and you see so the graphql client here doesn't even allow me to call that",
    "start": "2723119",
    "end": "2729920"
  },
  {
    "text": "but wait a minute this seems slow eight seconds",
    "start": "2729920",
    "end": "2735440"
  },
  {
    "text": "that's bad that's a time to talk about data loader",
    "start": "2735440",
    "end": "2741680"
  },
  {
    "text": "so facebook actually introduced this tool data loader for the rest api originally",
    "start": "2741680",
    "end": "2748000"
  },
  {
    "text": "and data loader are an integral tool in the graphql tool chain",
    "start": "2748000",
    "end": "2755200"
  },
  {
    "text": "so we just integrated a rest endpoint what happens when we integrate a",
    "start": "2755200",
    "end": "2760560"
  },
  {
    "text": "resolver that naively so every time we have this",
    "start": "2760560",
    "end": "2765599"
  },
  {
    "text": "change method here we will execute it if we have a list of 10 items we will 10",
    "start": "2765599",
    "end": "2771119"
  },
  {
    "text": "times go to this rest service and ask for it and a data loader doesn't just help with",
    "start": "2771119",
    "end": "2777680"
  },
  {
    "text": "http requests it actually could also help with fetch requests to other databases",
    "start": "2777680",
    "end": "2784079"
  },
  {
    "text": "so what we would do here is create a new component we call the data loader put it",
    "start": "2784079",
    "end": "2789599"
  },
  {
    "text": "in between our resolver and our fetch request and what happens here",
    "start": "2789599",
    "end": "2795440"
  },
  {
    "text": "is when our resolver will ask our data loader to fetch for our cryptocurrency the price change",
    "start": "2795440",
    "end": "2802960"
  },
  {
    "text": "from that rest service we would ask the task cache of the data loader",
    "start": "2802960",
    "end": "2810240"
  },
  {
    "text": "kind of a promise cache to give us the a promise for this data",
    "start": "2810240",
    "end": "2817920"
  },
  {
    "text": "if it doesn't have a promise for this data in its cache it will create a new one and",
    "start": "2817920",
    "end": "2823760"
  },
  {
    "text": "then we would wait for the data so when the execution engine has",
    "start": "2823760",
    "end": "2828880"
  },
  {
    "text": "executed all the resolvers in our pipeline it would batch all the requests to that",
    "start": "2828880",
    "end": "2836319"
  },
  {
    "text": "background to that endpoint in one go so for this our rest endpoint actually",
    "start": "2836319",
    "end": "2842559"
  },
  {
    "text": "needs a batchable endpoint in this case i created that so i can ask for multiple",
    "start": "2842559",
    "end": "2848800"
  },
  {
    "text": "symbols at once and the dataloser improves data fetching",
    "start": "2848800",
    "end": "2854160"
  },
  {
    "text": "and ensures consistency in one request so let's have a look at how that looks",
    "start": "2854160",
    "end": "2860720"
  },
  {
    "text": "so at the moment our resolver actually looks pretty complicated if we offload this",
    "start": "2860720",
    "end": "2867839"
  },
  {
    "text": "complexity to our data loader it actually looks like this we ask for the asset price change data loader",
    "start": "2867839",
    "end": "2874960"
  },
  {
    "text": "which essentially um fetches here again the data for",
    "start": "2874960",
    "end": "2882240"
  },
  {
    "text": "from that endpoint but then fetches like multiple things at",
    "start": "2882240",
    "end": "2887440"
  },
  {
    "text": "once and then just returns a collection of json objects and our execution engine",
    "start": "2887440",
    "end": "2894559"
  },
  {
    "text": "will then fulfill for each resolver the data so let's see how that performs",
    "start": "2894559",
    "end": "2900880"
  },
  {
    "text": "it actually is already i shouldn't have saved 10 minutes",
    "start": "2900880",
    "end": "2906880"
  },
  {
    "text": "okay let's go back to here let's just execute it again",
    "start": "2906880",
    "end": "2911920"
  },
  {
    "text": "so the first fetch always is slow because we built up the schema but you can see now we are at 112 milliseconds",
    "start": "2911920",
    "end": "2920240"
  },
  {
    "text": "although we fetch a lot of data from our rest endpoint that is a concept in",
    "start": "2920240",
    "end": "2926720"
  },
  {
    "text": "graphql we call a data loader okay so let's",
    "start": "2926720",
    "end": "2933440"
  },
  {
    "text": "we did that let's talk about one more aspect and that is real time data",
    "start": "2933599",
    "end": "2938720"
  },
  {
    "text": "we have 10 minutes let's do it so when we talk about real-time data we",
    "start": "2938720",
    "end": "2944160"
  },
  {
    "text": "are calling about streams of real-time data so instead of having a single graphql response we have a stream of",
    "start": "2944160",
    "end": "2950720"
  },
  {
    "text": "graphql responses and that actually translates very well to async innumerables in.net",
    "start": "2950720",
    "end": "2957760"
  },
  {
    "text": "so when we talk about subscriptions we are talking about events in event stream",
    "start": "2957760",
    "end": "2964400"
  },
  {
    "text": "and we are talking about a response stream and how that works is when an event is",
    "start": "2964400",
    "end": "2970480"
  },
  {
    "text": "triggered we will execute a graphql query and send that down to our",
    "start": "2970480",
    "end": "2976240"
  },
  {
    "text": "to our consumer so let me quickly switch over demo",
    "start": "2976240",
    "end": "2983280"
  },
  {
    "text": "four okay so this is again the same server",
    "start": "2983440",
    "end": "2990640"
  },
  {
    "text": "just the next iteration phase of it so and here we have the asset types that",
    "start": "2990640",
    "end": "2998079"
  },
  {
    "text": "we are using and what we want to do is essentially implement a new event when the price is changed we want to get a",
    "start": "2998079",
    "end": "3005359"
  },
  {
    "text": "price query down to our client that is when you remember our ui in the beginning where the price",
    "start": "3005359",
    "end": "3011520"
  },
  {
    "text": "changed that was a subscription so let's add first our",
    "start": "3011520",
    "end": "3017920"
  },
  {
    "text": "class here that is an asset subscription type in this case it's a root type like",
    "start": "3017920",
    "end": "3024480"
  },
  {
    "text": "query and we can add resolvers to it but i said subscription is about a stream",
    "start": "3024480",
    "end": "3031040"
  },
  {
    "text": "so we first need to create an event stream and again i said an event stream",
    "start": "3031040",
    "end": "3036240"
  },
  {
    "text": "actually translates well to an ic i async that is an awaitable stream",
    "start": "3036240",
    "end": "3043280"
  },
  {
    "text": "and this awaitable stream can you can hook up to anything to any event system",
    "start": "3043280",
    "end": "3049200"
  },
  {
    "text": "like redis or whatever and yield events from there so in this instance i have a",
    "start": "3049200",
    "end": "3055839"
  },
  {
    "text": "price change service that's an internal service that triggers us an event and tells us which price has changed and",
    "start": "3055839",
    "end": "3062559"
  },
  {
    "text": "yields in that case the symbol of the price that changed the second component we need",
    "start": "3062559",
    "end": "3068559"
  },
  {
    "text": "is a resolver and that is the same resolver than we did for our query so this resolver is called on price change",
    "start": "3068559",
    "end": "3075680"
  },
  {
    "text": "here and it get gets injected an event message that is the symbol from this",
    "start": "3075680",
    "end": "3082079"
  },
  {
    "text": "event stream whenever it occurs and then we use a data loader here this",
    "start": "3082079",
    "end": "3087200"
  },
  {
    "text": "time for our database to load this data efficiently so the one thing we have to do",
    "start": "3087200",
    "end": "3094240"
  },
  {
    "text": "is tell our resolver that it actually subscribes with the",
    "start": "3094240",
    "end": "3099359"
  },
  {
    "text": "event stream that we have defined up here so let's put that in",
    "start": "3099359",
    "end": "3105040"
  },
  {
    "text": "and then let's just check that i have set up everything right because i also need to",
    "start": "3105040",
    "end": "3112480"
  },
  {
    "text": "register let me just check if we have done that subscription type here add subscription",
    "start": "3112480",
    "end": "3119760"
  },
  {
    "text": "type and let's run that dotnet watch",
    "start": "3119760",
    "end": "3126480"
  },
  {
    "text": "no hot",
    "start": "3126480",
    "end": "3130400"
  },
  {
    "text": "i should copy paste that next talk so it's starting",
    "start": "3132079",
    "end": "3139838"
  },
  {
    "text": "okay it's coming up so you can see it's a lot more happening",
    "start": "3142319",
    "end": "3148319"
  },
  {
    "text": "here because we have real-time data actually we are emulating here price changes so that's why we're updating",
    "start": "3148319",
    "end": "3154000"
  },
  {
    "text": "constantly the database pushed by a backend service let's refresh here our graphql schema it",
    "start": "3154000",
    "end": "3160800"
  },
  {
    "text": "actually says oh no okay it's not ready to be fetched from",
    "start": "3160800",
    "end": "3167200"
  },
  {
    "text": "i hope it comes up",
    "start": "3167200",
    "end": "3170240"
  },
  {
    "text": "that is always",
    "start": "3172880",
    "end": "3175920"
  },
  {
    "text": "not ready okay that doesn't matter i have prepared for that use case",
    "start": "3178319",
    "end": "3183920"
  },
  {
    "text": "so we have a little endpoint here let me",
    "start": "3183920",
    "end": "3189680"
  },
  {
    "text": "just get that workshop is it this one",
    "start": "3189680",
    "end": "3196000"
  },
  {
    "text": "import badge let me check no that's a local one",
    "start": "3196000",
    "end": "3201280"
  },
  {
    "text": "yeah this one so let's just say api",
    "start": "3202000",
    "end": "3209400"
  },
  {
    "text": "and go no",
    "start": "3210480",
    "end": "3214720"
  },
  {
    "text": "hcc one second",
    "start": "3216480",
    "end": "3222119"
  },
  {
    "text": "that would be a shame it's always subscriptions",
    "start": "3222960",
    "end": "3228960"
  },
  {
    "text": "workshop no that's the other one",
    "start": "3230079",
    "end": "3234440"
  },
  {
    "text": "one second let me copy that",
    "start": "3238400",
    "end": "3242318"
  },
  {
    "text": "it went so well and now it's dying oh yes sorry",
    "start": "3248720",
    "end": "3254319"
  },
  {
    "text": "it's api crypto crypto crypto",
    "start": "3254319",
    "end": "3259599"
  },
  {
    "text": "dash workshop dot chili cream",
    "start": "3259599",
    "end": "3265760"
  },
  {
    "text": "dot com slash graphql",
    "start": "3265760",
    "end": "3269440"
  },
  {
    "text": "okay so here we are so this is the same service um that i",
    "start": "3271520",
    "end": "3279040"
  },
  {
    "text": "wanted to have in the end uh we don't have time to figure out why it's broken um but essentially what we have there",
    "start": "3279040",
    "end": "3286640"
  },
  {
    "text": "is now a third type the subscription type and then we have the on price change event here",
    "start": "3286640",
    "end": "3293200"
  },
  {
    "text": "and it's the same data structure that we actually have in our query so what i can do now is here subscribe call write a",
    "start": "3293200",
    "end": "3300559"
  },
  {
    "text": "subscription query and what is awesome for the consumer of this api",
    "start": "3300559",
    "end": "3305599"
  },
  {
    "text": "that the only thing he or she has to change is writing here subscription and",
    "start": "3305599",
    "end": "3310880"
  },
  {
    "text": "then we can drill the same way into our data like we did before",
    "start": "3310880",
    "end": "3316400"
  },
  {
    "text": "just come on so we can say on price change that is our event here and then we can drill",
    "start": "3316400",
    "end": "3322960"
  },
  {
    "text": "into this like latest price or maybe we want something from the asset and from",
    "start": "3322960",
    "end": "3328720"
  },
  {
    "text": "the asset maybe we want the name let me just reformat that and then",
    "start": "3328720",
    "end": "3333760"
  },
  {
    "text": "we can just execute that and nothing happens and that is because",
    "start": "3333760",
    "end": "3339680"
  },
  {
    "text": "we subscribed and there will only something happen when the back end has some events and i",
    "start": "3339680",
    "end": "3346960"
  },
  {
    "text": "hope this back end has some events at any point there they're coming in so every time when the price changes in the",
    "start": "3346960",
    "end": "3353920"
  },
  {
    "text": "back end it will execute our query and send us these responses you can see it's sometimes pausing",
    "start": "3353920",
    "end": "3360400"
  },
  {
    "text": "because not always are these cryptocurrencies changing and that means sometimes i get a bunch",
    "start": "3360400",
    "end": "3367119"
  },
  {
    "text": "of events and sometimes nothing so and let me just",
    "start": "3367119",
    "end": "3372720"
  },
  {
    "text": "conclude that here um and that's also what you have to think about when implementing",
    "start": "3372720",
    "end": "3378319"
  },
  {
    "text": "subscription you have to think about throttling maybe you don't want to send the the client too many events",
    "start": "3378319",
    "end": "3384720"
  },
  {
    "text": "otherwise you're frying the mobile device or the desktop um so we have to think about uh",
    "start": "3384720",
    "end": "3391839"
  },
  {
    "text": "throttling also about quality of service meaning is this event like important maybe we need a replay",
    "start": "3391839",
    "end": "3399119"
  },
  {
    "text": "functionality we can do that in a in our async stream like fetch the missed events from the database and first year",
    "start": "3399119",
    "end": "3405920"
  },
  {
    "text": "them and then start real time multiplexing is actually solved by the graphql",
    "start": "3405920",
    "end": "3412559"
  },
  {
    "text": "ws protocol but still you have to think about these things",
    "start": "3412559",
    "end": "3418000"
  },
  {
    "text": "okay unfortunately like we don't have time for this so let me jump to",
    "start": "3418000",
    "end": "3424079"
  },
  {
    "text": "my conclusion so graphql is evolving rapidly",
    "start": "3424079",
    "end": "3430079"
  },
  {
    "text": "over the last 10 years think about it 10 years ago facebook started with graphql",
    "start": "3430079",
    "end": "3435839"
  },
  {
    "text": "and when they open sourced it in 2015 they talked about it they said okay we",
    "start": "3435839",
    "end": "3441200"
  },
  {
    "text": "have something cool and we are running it in production for the last four years at the scale of 500 million users that",
    "start": "3441200",
    "end": "3448400"
  },
  {
    "text": "do a ton of requests i think it was 20 billion a day so i don't i'm not sure anymore but graphql is tested in ma as",
    "start": "3448400",
    "end": "3456400"
  },
  {
    "text": "massive scale it's not a thing that nobody uses like if you think",
    "start": "3456400",
    "end": "3462319"
  },
  {
    "text": "about the users of graphql we have github we have microsoft microsoft teams",
    "start": "3462319",
    "end": "3467440"
  },
  {
    "text": "runs on graphql microsoft office runs on graphql then we have",
    "start": "3467440",
    "end": "3473119"
  },
  {
    "text": "twitter netflix all graphql so graphql is running the internet",
    "start": "3473119",
    "end": "3479440"
  },
  {
    "text": "companies of the current age with that i'm done this is all open source you can",
    "start": "3479440",
    "end": "3485920"
  },
  {
    "text": "go to our github repository if you like it please give us a star if not",
    "start": "3485920",
    "end": "3490960"
  },
  {
    "text": "doesn't matter if you want to follow me you can copy the page and",
    "start": "3490960",
    "end": "3497200"
  },
  {
    "text": "get into contact with us and with that i'm done [Applause]",
    "start": "3497200",
    "end": "3510119"
  },
  {
    "text": "you",
    "start": "3549839",
    "end": "3551920"
  }
]