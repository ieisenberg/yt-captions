[
  {
    "text": "not yet are we getting are we getting audio yes yes yes it's always the",
    "start": "2360",
    "end": "8320"
  },
  {
    "text": "scariest part right do you see the slides do you hear me so hello I'm",
    "start": "8320",
    "end": "13719"
  },
  {
    "text": "hanis um I'm gonna tell you a little bit um I love Denmark always have uh I lived",
    "start": "13719",
    "end": "21760"
  },
  {
    "text": "here a year after college which is quite a while ago um",
    "start": "21760",
    "end": "27199"
  },
  {
    "text": "2005 um I also met my my fiance here like a long time ago uh we have three",
    "start": "27199",
    "end": "33960"
  },
  {
    "text": "kids now um that's why we gave them Danish names so there's that so you came",
    "start": "33960",
    "end": "40039"
  },
  {
    "text": "to a talk with a clickbait title I'm just going to remind you what clickbait is right it's just a phrase to make you",
    "start": "40039",
    "end": "48239"
  },
  {
    "text": "click on a particular link to lure you into a site where the content is",
    "start": "48239",
    "end": "54840"
  },
  {
    "text": "probably questionable right um so",
    "start": "54840",
    "end": "60600"
  },
  {
    "text": "yeah nothing in the St is going to be super shocking um it may be a waste of",
    "start": "60600",
    "end": "65920"
  },
  {
    "text": "time if you want to walk out you can do so right now um You have been warned so",
    "start": "65920",
    "end": "71439"
  },
  {
    "text": "my name is hanis um as I just explained my kids have Danish names um and my wife",
    "start": "71439",
    "end": "76759"
  },
  {
    "text": "is called Bara we met here in Copenhagen last year at deathfest um I ran out of",
    "start": "76759",
    "end": "82400"
  },
  {
    "text": "this venue to go and shop for engagement rings um I had a beautiful ring made",
    "start": "82400",
    "end": "87840"
  },
  {
    "text": "here downtown by a very nice crafts woman uh and she did a beautiful custom",
    "start": "87840",
    "end": "93439"
  },
  {
    "text": "ring and I proposed to my wife so now we're engaged and it's all because of Copenhagen so",
    "start": "93439",
    "end": "99720"
  },
  {
    "text": "fantastic um I am the net league coach at a consulting firm called exess in Belgium which basically means um Hannas",
    "start": "99720",
    "end": "107640"
  },
  {
    "text": "does whatever he wants I come from a net backend development background um and",
    "start": "107640",
    "end": "115240"
  },
  {
    "text": "last year I made the Dome train course on Ned framework because I've always",
    "start": "115240",
    "end": "120280"
  },
  {
    "text": "seen teams uh on two sides of the spectrum when using Ed framework um",
    "start": "120280",
    "end": "127079"
  },
  {
    "text": "either they go from the N framework demos and what they'll do is they'll create a bunch of model classes and a DB",
    "start": "127079",
    "end": "133760"
  },
  {
    "text": "context and they don't care about what's going on in the database side um or I see teams working the other way around",
    "start": "133760",
    "end": "141519"
  },
  {
    "text": "um they model their classes exactly like they would model a normalized SQL database um but they still map",
    "start": "141519",
    "end": "148560"
  },
  {
    "text": "everything one to one but in framework can do so much more than that and there are so many tweaks that you can do to",
    "start": "148560",
    "end": "154920"
  },
  {
    "text": "get more performance out of it or to do more complex mappings and that kind of triggered me to make this uh talk I'm",
    "start": "154920",
    "end": "162720"
  },
  {
    "text": "also a line breaker and for those of you who do not know what that is uh we play",
    "start": "162720",
    "end": "168519"
  },
  {
    "text": "musical parodies um kind of like what Weird Al yanovich does but we have them",
    "start": "168519",
    "end": "173920"
  },
  {
    "text": "all in software or it uh parody teams we will be doing that tomorrow night on",
    "start": "173920",
    "end": "179159"
  },
  {
    "text": "stage here right yeah and I have some uh Community titles so what's my plan for today um I",
    "start": "179159",
    "end": "186000"
  },
  {
    "text": "think this quite intimidating I don't usually do live coding talks but today is one of them so my plan is I'm going",
    "start": "186000",
    "end": "192879"
  },
  {
    "text": "to present I'm going to present you 10 things that Ned framework core can do",
    "start": "192879",
    "end": "199080"
  },
  {
    "text": "right um I'm just going to run through them conceptually I'm not actually going to demo",
    "start": "199080",
    "end": "204480"
  },
  {
    "text": "them um then you get to vote so you can take out your phones and you can vote on",
    "start": "204480",
    "end": "210640"
  },
  {
    "text": "which ones you see want to see me live demo and then for the rest of the talk",
    "start": "210640",
    "end": "216280"
  },
  {
    "text": "um I'm going to live Cod through all of the features that you voted for until we run out of time and then the talk is",
    "start": "216280",
    "end": "222120"
  },
  {
    "text": "over so you will have reached the end now the plan is if you want to take a",
    "start": "222120",
    "end": "228640"
  },
  {
    "text": "nap um you better stay awake for the part where um I know this is right after",
    "start": "228640",
    "end": "235519"
  },
  {
    "text": "lunch so um you stay awake for the part where I present all the Nifty stuff if",
    "start": "235519",
    "end": "240840"
  },
  {
    "text": "you want to take a nap do that in the Life coding part it's GNA be boring anyway right so there's no lunch after",
    "start": "240840",
    "end": "246760"
  },
  {
    "text": "this but there's going to be coffee so um I'm going to present and I'm just going to take them one at a time and",
    "start": "246760",
    "end": "252760"
  },
  {
    "text": "when we get to the end you get to vote so value type properties um often you",
    "start": "252760",
    "end": "258239"
  },
  {
    "text": "are building a model and your model has some nested classes so one of your properties is another class and and you",
    "start": "258239",
    "end": "265520"
  },
  {
    "text": "go a couple of levels deep um and it's a very nice way to to model stuff in your",
    "start": "265520",
    "end": "272000"
  },
  {
    "text": "domain when you're using classes and using C but when you do that in the database those classes need to go",
    "start": "272000",
    "end": "278039"
  },
  {
    "text": "somewhere so what you can basically do is you can take a bunch of those uh columns and map them to the properties",
    "start": "278039",
    "end": "285199"
  },
  {
    "text": "of your uh nested class and the cool thing with value t uh with value type",
    "start": "285199",
    "end": "291479"
  },
  {
    "text": "properties is you can basically extend those with certain Behavior you can reuse the types it makes modeling a more",
    "start": "291479",
    "end": "298199"
  },
  {
    "text": "complex domain so easier and you don't necessarily need extra tables to make that to make that work so you're still",
    "start": "298199",
    "end": "304919"
  },
  {
    "text": "selecting from a single table it's still very fast you're just making it much more easier to read the code that you're",
    "start": "304919",
    "end": "311240"
  },
  {
    "text": "working with that was feature number one many to",
    "start": "311240",
    "end": "316600"
  },
  {
    "text": "many relationships is the next and many to many relationships what we want conceptually is you have two entities",
    "start": "316600",
    "end": "324720"
  },
  {
    "text": "and each of them can have many of the other right um",
    "start": "324720",
    "end": "330600"
  },
  {
    "text": "I go to many conferences um and conferences have many speakers that's a",
    "start": "330600",
    "end": "335680"
  },
  {
    "text": "many to many relationship right if we were to model that in a database um you",
    "start": "335680",
    "end": "342199"
  },
  {
    "text": "would have two tables with a primary key and the way to actually make that many",
    "start": "342199",
    "end": "347840"
  },
  {
    "text": "to many work because you cannot put a many to many relationship in a SQL database you would have a small joint",
    "start": "347840",
    "end": "354080"
  },
  {
    "text": "table where you have a foreign key to each and every one of them and that is your link between the two so you can",
    "start": "354080",
    "end": "360560"
  },
  {
    "text": "model it like that in code and that would work but you can actually just have two properties two navigation",
    "start": "360560",
    "end": "367440"
  },
  {
    "text": "properties pointing in the other direction and that is no problem whatsoever with any framework in the",
    "start": "367440",
    "end": "374319"
  },
  {
    "text": "database you will still have a link entity but in the code you don't have to have it you can just have many to many",
    "start": "374319",
    "end": "379680"
  },
  {
    "text": "navigation between your two entities also something you sometimes",
    "start": "379680",
    "end": "385360"
  },
  {
    "text": "have to solve is hierarchy um you have data that is",
    "start": "385360",
    "end": "390520"
  },
  {
    "text": "modeled in a kind of tree structure right every node has a parent and every",
    "start": "390520",
    "end": "396800"
  },
  {
    "text": "parent has can have descendants um and one of the ways that I see this modeled quite often is you",
    "start": "396800",
    "end": "404039"
  },
  {
    "text": "have a foreign keyy that points to the primary key of its own table you're pointing at your own parent now the",
    "start": "404039",
    "end": "411240"
  },
  {
    "text": "problem with this is that this is very very hard to query because when you're",
    "start": "411240",
    "end": "416520"
  },
  {
    "text": "querying this and you need to get a part of your Gra like all the descendants of a certain node you're going to be",
    "start": "416520",
    "end": "423639"
  },
  {
    "text": "nesting queries and going to have repeat round trips and nobody really wants that so there is a better way of doing this",
    "start": "423639",
    "end": "430120"
  },
  {
    "text": "SQL server has a feature called hierarchy IDs that allows you to do all",
    "start": "430120",
    "end": "435440"
  },
  {
    "text": "those weird querying operations on a tree of data and you can map that into",
    "start": "435440",
    "end": "440840"
  },
  {
    "text": "any framework and the cool thing is you can just say hey give me everything that is below this or this node and it's just",
    "start": "440840",
    "end": "448400"
  },
  {
    "text": "a single round trip to your database and you're getting all the data that you want to have you can even get the flexibility of",
    "start": "448400",
    "end": "457000"
  },
  {
    "text": "um only selecting a certain number of levels deep and stuff like that now who here has used Dapper before",
    "start": "457000",
    "end": "465599"
  },
  {
    "text": "do you know that you don't need that anymore we can do raw SQL queries in N framework core as well since I think",
    "start": "465599",
    "end": "472680"
  },
  {
    "text": "seven and so basically what we take is we do our SQL query literals and we pump",
    "start": "472680",
    "end": "478520"
  },
  {
    "text": "them through our DB cont context and we execute them on the database and we actually get objects back just like",
    "start": "478520",
    "end": "484280"
  },
  {
    "text": "depper does and the first version of it was super super slow deer was like way",
    "start": "484280",
    "end": "489319"
  },
  {
    "text": "faster uh but it has actually gotten really close in uh EF core 8 uh so",
    "start": "489319",
    "end": "494720"
  },
  {
    "text": "that's a thing that removes my need for at least having two orm in a lot of projects um so that's something we got",
    "start": "494720",
    "end": "502240"
  },
  {
    "text": "as well support for Jason columns a lot of modern database engines have Chason",
    "start": "502240",
    "end": "509680"
  },
  {
    "text": "support for their columns meaning that you just have a column that has a bunch of adjacent data in it so same example",
    "start": "509680",
    "end": "516159"
  },
  {
    "text": "you have some nested stuff in your um model classes in your code well you",
    "start": "516159",
    "end": "521839"
  },
  {
    "text": "could just take that and put it into a single field where it's just a Json graph and given that these database",
    "start": "521839",
    "end": "529000"
  },
  {
    "text": "engines have support for these Json uh columns is you can index a couple of levels deep into the Chason if that's",
    "start": "529000",
    "end": "535880"
  },
  {
    "text": "what you please um it makes it so much easier if you have have uh data that moves around in shape a little bit you",
    "start": "535880",
    "end": "542640"
  },
  {
    "text": "can easily dump that into a Jason column and use that true Entity framework as",
    "start": "542640",
    "end": "548399"
  },
  {
    "text": "well um batch size I'm not sure if you are aware of this but ATB context is a",
    "start": "548399",
    "end": "556839"
  },
  {
    "text": "unit of work pattern so as long as you're doing stuff and you're adding objects and removing them and editing",
    "start": "556839",
    "end": "562160"
  },
  {
    "text": "them and and all that sort of stuff until you hit save changes it just cues up the work to be done so you get a list",
    "start": "562160",
    "end": "568880"
  },
  {
    "text": "of quer that need to be executed when you hit save changes and actually um",
    "start": "568880",
    "end": "575600"
  },
  {
    "text": "when you send stuff to a database engine your round trips actually matter so if you have 200 commands to be executing if",
    "start": "575600",
    "end": "583120"
  },
  {
    "text": "you do 200 round trips you're always paying for that database latency and you don't have to do that because a SQL text",
    "start": "583120",
    "end": "591240"
  },
  {
    "text": "can be multiple statements you can put 300 statements under each other and just send them as one I think in SQL Server",
    "start": "591240",
    "end": "598320"
  },
  {
    "text": "the limit to that is something around 65 kilobytes I'm not really sure but the number is in that region um so what you",
    "start": "598320",
    "end": "605360"
  },
  {
    "text": "could basically do is you could take blocks of statements and have less round trips and you have full control over the",
    "start": "605360",
    "end": "612240"
  },
  {
    "text": "batch size actually ntity framework does this by default so it already by default cues up a bunch of statements and sends",
    "start": "612240",
    "end": "619560"
  },
  {
    "text": "them to the database and back so having exercising control of",
    "start": "619560",
    "end": "625519"
  },
  {
    "text": "that is a very very good way of gaining a lot of performance performance when you're often executing big workloads in",
    "start": "625519",
    "end": "632560"
  },
  {
    "text": "one Chunk on One DB context now something that we all do in",
    "start": "632560",
    "end": "637959"
  },
  {
    "text": "code but we're maybe not aware of that we can do that as nicely in a database as well is inheritance we basically have",
    "start": "637959",
    "end": "645760"
  },
  {
    "text": "inheritance in our classes quite a lot so if we have a parent class with do child classes there's actually three",
    "start": "645760",
    "end": "651880"
  },
  {
    "text": "ways that you can model this on the database site so the first way of doing it is just dumping everything into a",
    "start": "651880",
    "end": "659320"
  },
  {
    "text": "single table this is a default behavior for Entity framework as well so you get all of the fields for your parent class",
    "start": "659320",
    "end": "665600"
  },
  {
    "text": "and then all of the fields for your child classes all of the extending fields and at the end you will probably",
    "start": "665600",
    "end": "670639"
  },
  {
    "text": "need a column that tells you what type of record this is that's going to be your discriminator it's going to tell",
    "start": "670639",
    "end": "676240"
  },
  {
    "text": "you what is in this row what should NTI framework deserialize this at that's",
    "start": "676240",
    "end": "681839"
  },
  {
    "text": "called table per hierarchy but there's two other ways of actually modeling this in a database so the one that feels most",
    "start": "681839",
    "end": "688480"
  },
  {
    "text": "most natural to most developers is something that Maps the way that you do it in code so you have a table per type",
    "start": "688480",
    "end": "695600"
  },
  {
    "text": "we basically have a table for parent entity and two tables for or two child entities and those will get primary keys",
    "start": "695600",
    "end": "702560"
  },
  {
    "text": "that are also foreign keys and they point at the parent entity that way there can be no conflicts in primary",
    "start": "702560",
    "end": "709160"
  },
  {
    "text": "keys and foreign keys and depending on where you find your records Entity framework knows how to deserialize this",
    "start": "709160",
    "end": "716440"
  },
  {
    "text": "now the disadvantage of this is that you are doing joints AC cross all of the tables in your inheritance hierarchy and",
    "start": "716440",
    "end": "722440"
  },
  {
    "text": "that may become very slow if there are a lot of classes right and then there's a",
    "start": "722440",
    "end": "728320"
  },
  {
    "text": "last way of doing it um and that's basically having uh the other one is called table per type by the way uh and",
    "start": "728320",
    "end": "734639"
  },
  {
    "text": "the last way of doing it is basically we have three tables but we repeat the fields of the um parent entity in the",
    "start": "734639",
    "end": "743399"
  },
  {
    "text": "child tables meaning that we don't need to get a join going um if we just want",
    "start": "743399",
    "end": "749360"
  },
  {
    "text": "to select one certain type of that inheritance hierarchy we can pull out that table specifically it makes it a",
    "start": "749360",
    "end": "755880"
  },
  {
    "text": "lot easier to do you do need to do unions to get all your records but typically those are a little bit more",
    "start": "755880",
    "end": "761680"
  },
  {
    "text": "performant than doing a bunch of joints and that's called table table per concrete class now the tricky thing",
    "start": "761680",
    "end": "768760"
  },
  {
    "text": "about this is that you need one sequence that actually handles the primary key generation across all of your tables",
    "start": "768760",
    "end": "775320"
  },
  {
    "text": "because Entity framework cannot deal with duplicates in the same entity and it's gon to treat parent as an entity",
    "start": "775320",
    "end": "781600"
  },
  {
    "text": "that it knows about so you cannot have duplicate primary Keys latest versions of NTI framework actually do that by",
    "start": "781600",
    "end": "788279"
  },
  {
    "text": "default as soon as you map table BR concrete class until recently an framework core could only do the",
    "start": "788279",
    "end": "794519"
  },
  {
    "text": "hierarchy part like the top right one um since seven and eight we've actually",
    "start": "794519",
    "end": "800079"
  },
  {
    "text": "gotten all of these um enti framework six could do all of these like years ago but in core we've recently gotten",
    "start": "800079",
    "end": "807279"
  },
  {
    "text": "them and then something really cool um double databases like we already have a",
    "start": "807279",
    "end": "812760"
  },
  {
    "text": "way to distribute one entity set across multiple tables and now it's going to be",
    "start": "812760",
    "end": "818800"
  },
  {
    "text": "a we're going to be able to actually talk to multiple databases from the same",
    "start": "818800",
    "end": "824079"
  },
  {
    "text": "DB context is a feature that's coming in EF core 9 um so basically what we can do",
    "start": "824079",
    "end": "829279"
  },
  {
    "text": "is we can take one DB set and put it in one database and and the other DB sets we put in another database that's going",
    "start": "829279",
    "end": "835120"
  },
  {
    "text": "to be totally possible to do um now this is micros oft's idea of what polyglot",
    "start": "835120",
    "end": "840680"
  },
  {
    "text": "persistence can be um they will actually even add support for different database",
    "start": "840680",
    "end": "846399"
  },
  {
    "text": "engines across those uh different databases that we're talking to um you can query and uh join across these diff",
    "start": "846399",
    "end": "854519"
  },
  {
    "text": "different databases as well be aware that has a performance hit because you're doing that in",
    "start": "854519",
    "end": "860680"
  },
  {
    "text": "memory logical deletes logical deletes is um not a feature of anti framework",
    "start": "860680",
    "end": "867720"
  },
  {
    "text": "but it's something that you can really easily whip up using a couple of features of uh EF core so the idea is",
    "start": "867720",
    "end": "875279"
  },
  {
    "text": "when we delete a record we don't want it to be gone from our database we just want to take that deleted flag and set",
    "start": "875279",
    "end": "881720"
  },
  {
    "text": "that to true and then no longer see that record but still have the data in our database so you're going to need a",
    "start": "881720",
    "end": "888120"
  },
  {
    "text": "couple of features to whip this up you're going to need Shadow properties to hide that deleted flag but still have",
    "start": "888120",
    "end": "894360"
  },
  {
    "text": "it accessible so you can code against it uh Global query filters are going to fil filter out the deleted records so that",
    "start": "894360",
    "end": "900759"
  },
  {
    "text": "you don't see them when you're coding against the data um you're going to",
    "start": "900759",
    "end": "905920"
  },
  {
    "text": "intercept the safe changes so that you're not actually deleting the record but you're setting the shadow property",
    "start": "905920",
    "end": "911440"
  },
  {
    "text": "um and obviously you're going to have to mdle with the change tracker to get this done but it doesn't really require a lot",
    "start": "911440",
    "end": "917560"
  },
  {
    "text": "of code it's very easy to get it done um and then you can have logical deletes but when you're coding against it you",
    "start": "917560",
    "end": "924040"
  },
  {
    "text": "just call the delete on your DB set which is way nicer than setting the deleted flx whenever in a repository",
    "start": "924040",
    "end": "930160"
  },
  {
    "text": "you're seeing um that you want to delete something compiled queries is something",
    "start": "930160",
    "end": "936680"
  },
  {
    "text": "that wins a lot of time when you're building apis so basically what happens when we query something in EF core um",
    "start": "936680",
    "end": "943920"
  },
  {
    "text": "you have two things that go into a query you have the query itself which you usually write in link um and then you",
    "start": "943920",
    "end": "950959"
  },
  {
    "text": "have the parameters to that query right and that basically gives us a link",
    "start": "950959",
    "end": "956600"
  },
  {
    "text": "expression tree and that link expression tree gets parsed and it getss converted into a SQL query and that SQL query gets",
    "start": "956600",
    "end": "964360"
  },
  {
    "text": "executed on the database engine results that come back or materialized into objects and so on now in scenarios where",
    "start": "964360",
    "end": "972319"
  },
  {
    "text": "you have a high load API you're going to do that link expression three parsing for every call and that's typically",
    "start": "972319",
    "end": "978920"
  },
  {
    "text": "something you don't want because usually the only thing that changes is the parameter or the keys that you're",
    "start": "978920",
    "end": "984120"
  },
  {
    "text": "passing into the query the query is going to be the same so there's actually option with Ned framework to to do that",
    "start": "984120",
    "end": "991480"
  },
  {
    "text": "precompilation part only once and then keep reusing that and effectively it",
    "start": "991480",
    "end": "996639"
  },
  {
    "text": "will behave like a uh parameterized um SQL query SQL command",
    "start": "996639",
    "end": "1002920"
  },
  {
    "text": "that you're re-executing every time which makes it so much faster um for high load",
    "start": "1002920",
    "end": "1009959"
  },
  {
    "text": "apis and then Andy framework um and I always love this part um Ned framework",
    "start": "1009959",
    "end": "1016480"
  },
  {
    "text": "is doesn't have to have a DB set for anything you talk to it yet so a DB",
    "start": "1016480",
    "end": "1022639"
  },
  {
    "text": "context actually functions all by itself as soon as it has a databased connection it can do all of its work and you can",
    "start": "1022639",
    "end": "1029678"
  },
  {
    "text": "tell it about the entities that you wanted to know about because it doesn't need that info at compile time it needs",
    "start": "1029679",
    "end": "1035918"
  },
  {
    "text": "that run time it also gives us the feeling as developers that Entity framework is sometimes slow because what",
    "start": "1035919",
    "end": "1041360"
  },
  {
    "text": "do we do as developers is we code and then we run a five and we hit that in",
    "start": "1041360",
    "end": "1047760"
  },
  {
    "text": "initialization of that first DB context is always slow couple hundred milliseconds you're Los you're losing",
    "start": "1047760",
    "end": "1053360"
  },
  {
    "text": "that right that's when Entity framework is building its mental model it needs to know about what your classes look like",
    "start": "1053360",
    "end": "1058799"
  },
  {
    "text": "your code model it needs to look what your tables look like your database model it needs to know how to map",
    "start": "1058799",
    "end": "1064039"
  },
  {
    "text": "between the two right that happens when you start a process and the first DB context of a certain type that you hit",
    "start": "1064039",
    "end": "1070320"
  },
  {
    "text": "that initialization happens that's also the moment where you can feed it new Intel so if you tell enti framework in",
    "start": "1070320",
    "end": "1077559"
  },
  {
    "text": "the on model creating you tell it about a bunch of types that it doesn't have any sets for that's totally fine it can",
    "start": "1077559",
    "end": "1083880"
  },
  {
    "text": "deal with all of those as well which effectively makes it possible to have a DB context that learns about all of the",
    "start": "1083880",
    "end": "1090720"
  },
  {
    "text": "types it needs to know about at runtime um which allows for some pretty cool hacks and obviously you can still if you",
    "start": "1090720",
    "end": "1099440"
  },
  {
    "text": "feed it all this data it's going to derive its mental model it's going to derive what the database looks like and",
    "start": "1099440",
    "end": "1106240"
  },
  {
    "text": "it's going to be exactly the same as you would have done with uh normal DB sets but that means you can save this data",
    "start": "1106240",
    "end": "1112720"
  },
  {
    "text": "you can query that data you can do anything with it that you would please you're just not going to have a DV set",
    "start": "1112720",
    "end": "1118880"
  },
  {
    "text": "totally possible so those were my 10 features have you",
    "start": "1118880",
    "end": "1124880"
  },
  {
    "text": "count it no okay we're going to vote now but there's a little twist um see I've",
    "start": "1124880",
    "end": "1132760"
  },
  {
    "text": "presented 11 features one of these was fake news um not real not happening",
    "start": "1132760",
    "end": "1139240"
  },
  {
    "text": "um the thing is we're in Denmark beer here as a Belgian like extremely",
    "start": "1139240",
    "end": "1144480"
  },
  {
    "text": "expensive like for our taste right um You have gotten good at making beers",
    "start": "1144480",
    "end": "1149760"
  },
  {
    "text": "though like micheller so nice but very expensive so if you vote wrong and I",
    "start": "1149760",
    "end": "1156000"
  },
  {
    "text": "make it with my life coding all the way down to the fake one that means that you",
    "start": "1156000",
    "end": "1161240"
  },
  {
    "text": "guys owe me a beer okay um I will tell you what the fake",
    "start": "1161240",
    "end": "1166280"
  },
  {
    "text": "one is at the end of The Talk this is my way of saying yeah you're not getting your nap right so if you scan the QR code you can",
    "start": "1166280",
    "end": "1174039"
  },
  {
    "text": "vote on the feature you can just drag in the stuff that you want to see um this",
    "start": "1174039",
    "end": "1179360"
  },
  {
    "text": "should start moving as soon as you do something H and I have demos prepared",
    "start": "1179360",
    "end": "1184799"
  },
  {
    "text": "for the 10 real ones um so we will do as many as we have time",
    "start": "1184799",
    "end": "1192240"
  },
  {
    "text": "for and we still have 40 minutes so that's quite a few demos",
    "start": "1192240",
    "end": "1198240"
  },
  {
    "text": "compiled queries nice",
    "start": "1199919",
    "end": "1204158"
  },
  {
    "text": "you vot it kind of vot it yeah okay compiled queries chasing",
    "start": "1231559",
    "end": "1237520"
  },
  {
    "text": "columns hierarchical IDs okay we need to make our way at least to that one oh that just popped up good no back down",
    "start": "1237520",
    "end": "1243679"
  },
  {
    "text": "come on no it's not that's actually a real",
    "start": "1243679",
    "end": "1249080"
  },
  {
    "text": "one but I love it because it solves a particular problem really well and as",
    "start": "1249080",
    "end": "1254919"
  },
  {
    "text": "long as you don't know that that solution exists you're gonna always be struggling with it so I love that that",
    "start": "1254919",
    "end": "1261360"
  },
  {
    "text": "thing okay you can still 61 people voted so I'm guessing that this is going to be",
    "start": "1261360",
    "end": "1270080"
  },
  {
    "text": "pretty much a ranking um so we are going to start coding um the fake one um I'll",
    "start": "1270080",
    "end": "1278760"
  },
  {
    "text": "reveal at the end right so hop over into visual",
    "start": "1278760",
    "end": "1284480"
  },
  {
    "text": "studio um and I'm going to cheat and you see my screen okay that's perfect um",
    "start": "1284480",
    "end": "1290919"
  },
  {
    "text": "what I don't see is your votes but here we go compiled queries Okay cool so",
    "start": "1290919",
    "end": "1297480"
  },
  {
    "text": "compiled queries let's take a look that is demo here number nine Okay cool so um",
    "start": "1297480",
    "end": "1306679"
  },
  {
    "text": "how I have this set up just so that it's going to be easy for us to demo I just",
    "start": "1306679",
    "end": "1312360"
  },
  {
    "text": "have a console application and I have a function that just recreates the",
    "start": "1312360",
    "end": "1317760"
  },
  {
    "text": "database um it just drops the whole thing uh I do ensure deleted Ure created it just drops",
    "start": "1317760",
    "end": "1324679"
  },
  {
    "text": "the whole schema and recreates them it allows us to iterate really quickly so when I do stuff in code we can quickly",
    "start": "1324679",
    "end": "1331159"
  },
  {
    "text": "open our SQL Server management and take a look what what has happened in the database site right so compiled queries",
    "start": "1331159",
    "end": "1340360"
  },
  {
    "text": "um and actually in order to do that um what I have here is I have a bunch",
    "start": "1340360",
    "end": "1348559"
  },
  {
    "text": "bunch of records that have been added like a bunch of movies that have been",
    "start": "1348559",
    "end": "1353840"
  },
  {
    "text": "released in uh in 2023 so those movies have been will get",
    "start": "1353840",
    "end": "1360919"
  },
  {
    "text": "created in the database and then it allows me to query them so what is going",
    "start": "1360919",
    "end": "1367400"
  },
  {
    "text": "to hurt is if we want to parse a query so I should have a query ready here",
    "start": "1367400",
    "end": "1374840"
  },
  {
    "text": "that's already doing something no this is the wrong demo isn't",
    "start": "1374840",
    "end": "1380440"
  },
  {
    "text": "it compiled queries no",
    "start": "1380440",
    "end": "1386720"
  },
  {
    "text": "okay oh yeah this is the the safe changes so",
    "start": "1386720",
    "end": "1392360"
  },
  {
    "text": "um this is super weird this should have more code in",
    "start": "1392360",
    "end": "1399880"
  },
  {
    "text": "it did I up okay let's just query this uh very",
    "start": "1399880",
    "end": "1406799"
  },
  {
    "text": "quickly so for move movies um and I'm going to if I take",
    "start": "1406799",
    "end": "1412400"
  },
  {
    "text": "these movies and I query anything from them um parsing the link like if we have",
    "start": "1412400",
    "end": "1420480"
  },
  {
    "text": "a work Clause um anything like",
    "start": "1420480",
    "end": "1427480"
  },
  {
    "text": "that um and I want to query it on the release date let's say that that for some reason is hurting our performance",
    "start": "1427480",
    "end": "1434480"
  },
  {
    "text": "right um is bigger it should be released after",
    "start": "1434480",
    "end": "1440039"
  },
  {
    "text": "December 2023 right new",
    "start": "1440039",
    "end": "1446200"
  },
  {
    "text": "whoa uh date",
    "start": "1446200",
    "end": "1451360"
  },
  {
    "text": "only uh date only",
    "start": "1452799",
    "end": "1458679"
  },
  {
    "text": "dot I can just do new right that query should have been there",
    "start": "1458799",
    "end": "1464919"
  },
  {
    "text": "doesn't matter so let's say that we are having performance issues with",
    "start": "1464919",
    "end": "1472480"
  },
  {
    "text": "this so right um so this is hurting our",
    "start": "1472760",
    "end": "1478080"
  },
  {
    "text": "performance because we're doing it over and over and over again right how we are going to deal with this is we can",
    "start": "1478080",
    "end": "1484960"
  },
  {
    "text": "basically make this into a function um and my cheat sheet is there",
    "start": "1484960",
    "end": "1491960"
  },
  {
    "text": "okay um and if I want to make a function I'm going to use ef. compiled query",
    "start": "1491960",
    "end": "1499440"
  },
  {
    "text": "so what I'm going to use basically is instead of this function I'm actually going to precompile this",
    "start": "1499440",
    "end": "1506600"
  },
  {
    "text": "query so I'm just going to create a variable for the compiled query um",
    "start": "1506600",
    "end": "1511840"
  },
  {
    "text": "private read only only going to create my compiled um query once um it's",
    "start": "1511840",
    "end": "1520240"
  },
  {
    "text": "actually suggesting that here very fun let's use this work Clause the one that I just told you about so what this",
    "start": "1520240",
    "end": "1527320"
  },
  {
    "text": "compiled query does is if we have this query um we basically pass in a couple",
    "start": "1527320",
    "end": "1536039"
  },
  {
    "text": "of um a couple of parameters actually I'm going to need the one from my",
    "start": "1536039",
    "end": "1542200"
  },
  {
    "text": "demo um so we are we can pass in that date only so we pass in the type of DB",
    "start": "1542200",
    "end": "1548760"
  },
  {
    "text": "context that we want to run our query against then we pass in the types of parameters that we want our compiled",
    "start": "1548760",
    "end": "1555640"
  },
  {
    "text": "query to have in this case it's a date only and then we specify what kind of return",
    "start": "1555640",
    "end": "1562679"
  },
  {
    "text": "type we want from our compiled query so those are our interesting movies and",
    "start": "1562679",
    "end": "1570360"
  },
  {
    "text": "what we use is we use ef. compile query and that allows us to take that demo",
    "start": "1570360",
    "end": "1577080"
  },
  {
    "text": "context um and of course we are going to take our date",
    "start": "1577080",
    "end": "1583039"
  },
  {
    "text": "only um start date and that's something that we're going to pass into our",
    "start": "1583039",
    "end": "1589399"
  },
  {
    "text": "compiled query and that start date is something we can use here as a variable",
    "start": "1589399",
    "end": "1595080"
  },
  {
    "text": "right um there we go um and what am I missing",
    "start": "1595080",
    "end": "1604080"
  },
  {
    "text": "here probably some kind of brace or bracket I'm guessing around bracket",
    "start": "1604080",
    "end": "1611279"
  },
  {
    "text": "there that ends my compiled",
    "start": "1611279",
    "end": "1615799"
  },
  {
    "text": "query why is it complaining excuse",
    "start": "1616799",
    "end": "1623120"
  },
  {
    "text": "me yeah it's conf wait it's I'm getting a i queriable of movie back that is Def",
    "start": "1623559",
    "end": "1631679"
  },
  {
    "text": "oh I innumerable of movie",
    "start": "1631679",
    "end": "1637640"
  },
  {
    "text": "probably probably that uh that solves it okay so we're getting",
    "start": "1637640",
    "end": "1645159"
  },
  {
    "text": "a bunch of movies back now this compiles the query so what this does is it takes this link that is the same link that I",
    "start": "1645159",
    "end": "1651559"
  },
  {
    "text": "have written up here but now with a parameter right it takes that link and it parses it once when we create the",
    "start": "1651559",
    "end": "1658399"
  },
  {
    "text": "compiled query and after that it just behaves like a SQL command that we can",
    "start": "1658399",
    "end": "1664399"
  },
  {
    "text": "like iterate and iterate and iterate over on different DB contexts and we can do that and pass in new parameters so",
    "start": "1664399",
    "end": "1671960"
  },
  {
    "text": "what I could do here is instead of doing this I can just take my compiled query",
    "start": "1671960",
    "end": "1679080"
  },
  {
    "text": "so I'm going to take my interesting movies um and I can just execute",
    "start": "1679080",
    "end": "1686279"
  },
  {
    "text": "that um so I can invoke that on my DB context in",
    "start": "1686279",
    "end": "1695279"
  },
  {
    "text": "this case my context and I can pass it in my parameter that I care about which is",
    "start": "1695279",
    "end": "1702640"
  },
  {
    "text": "this one and we can execute that as often as we want and what we're actually",
    "start": "1702640",
    "end": "1708360"
  },
  {
    "text": "getting back is um is the movies that we're interested",
    "start": "1708360",
    "end": "1714200"
  },
  {
    "text": "in so we do this for every API that basically gets a high load and we do",
    "start": "1714200",
    "end": "1720320"
  },
  {
    "text": "that over and over and over again um and this is no longer awaitable um so that",
    "start": "1720320",
    "end": "1728039"
  },
  {
    "text": "is a synchronous call now um so that's basically how we can take these and get",
    "start": "1728039",
    "end": "1736519"
  },
  {
    "text": "something more performant out of them where we don't have to basically do uh all the link parsing for every",
    "start": "1736519",
    "end": "1742519"
  },
  {
    "text": "subsequent query so it's not really hard to do but you have to be mindful and you have to",
    "start": "1742519",
    "end": "1748840"
  },
  {
    "text": "explicitly make a compiled query object so that the link parsing happens up",
    "start": "1748840",
    "end": "1754200"
  },
  {
    "text": "front and so that you are reusing this so This should now work I should be",
    "start": "1754200",
    "end": "1759679"
  },
  {
    "text": "getting all my movies back um with a bit of",
    "start": "1759679",
    "end": "1764799"
  },
  {
    "text": "luck any our breakpoint there who",
    "start": "1764799",
    "end": "1770039"
  },
  {
    "text": "oh oh I'm I'm having the wrong startup project I was",
    "start": "1771240",
    "end": "1778720"
  },
  {
    "text": "worried there we go that should solve",
    "start": "1779159",
    "end": "1785200"
  },
  {
    "text": "that and we should hit our breakpoint it's creating those movies",
    "start": "1786440",
    "end": "1792880"
  },
  {
    "text": "first that's fun where were we",
    "start": "1792880",
    "end": "1798279"
  },
  {
    "text": "oh I did not I did not succeed in setting that break board yeah that's never going to work that's never going to",
    "start": "1798279",
    "end": "1805320"
  },
  {
    "text": "work try",
    "start": "1805320",
    "end": "1808679"
  },
  {
    "text": "again wow the first demo that fails see this is why I don't do live demos",
    "start": "1816399",
    "end": "1822120"
  },
  {
    "text": "somebody gave me the the wise advice once um if the demo works it could have",
    "start": "1822120",
    "end": "1827559"
  },
  {
    "text": "been a video video and if the demo doesn't work it should have been a video right um he was the guy who did the",
    "start": "1827559",
    "end": "1833679"
  },
  {
    "text": "keynote this morning so yeah there's that um but I do have a couple of movies",
    "start": "1833679",
    "end": "1839200"
  },
  {
    "text": "in here we do have a results view um so my query definitely",
    "start": "1839200",
    "end": "1846159"
  },
  {
    "text": "worked um do we have anything in",
    "start": "1846159",
    "end": "1852679"
  },
  {
    "text": "there there is data yeah so we can print them out um but that's how you do your",
    "start": "1852679",
    "end": "1859360"
  },
  {
    "text": "compiled queries like easy as that right any questions on this",
    "start": "1859360",
    "end": "1867000"
  },
  {
    "text": "yes um that's a good question um I'm not sure if there is an asnc overload um so",
    "start": "1867000",
    "end": "1878158"
  },
  {
    "text": "what in in oh in this query oh that that will",
    "start": "1879760",
    "end": "1886559"
  },
  {
    "text": "probably um yeah so that that could work um dot two",
    "start": "1886559",
    "end": "1894480"
  },
  {
    "text": "list um to list async can we do",
    "start": "1894480",
    "end": "1901679"
  },
  {
    "text": "that yeah there is one one this I should have kept that one",
    "start": "1901679",
    "end": "1907120"
  },
  {
    "text": "right to list async and then my return type should",
    "start": "1907120",
    "end": "1912200"
  },
  {
    "text": "change to um it's not an i inumerable movie",
    "start": "1912200",
    "end": "1918240"
  },
  {
    "text": "um but it's a task oh come on see that happens task",
    "start": "1918240",
    "end": "1926880"
  },
  {
    "text": "list movie I'm going to oh two array I think okay then it's",
    "start": "1926880",
    "end": "1934679"
  },
  {
    "text": "an array of movie there we go um and",
    "start": "1934679",
    "end": "1940159"
  },
  {
    "text": "then we need one more of those in there right",
    "start": "1940159",
    "end": "1945679"
  },
  {
    "text": "wait it's not that array wait I'm",
    "start": "1946840",
    "end": "1951799"
  },
  {
    "text": "just there is to list a sync what am I doing wrong here you're spotting this",
    "start": "1954000",
    "end": "1960279"
  },
  {
    "text": "right JS type no never",
    "start": "1960279",
    "end": "1965559"
  },
  {
    "text": "ever compile a sync compile",
    "start": "1966320",
    "end": "1973559"
  },
  {
    "text": "query oh yeah thank you so much right so that's the other way of",
    "start": "1975320",
    "end": "1982000"
  },
  {
    "text": "doing it I'm not sure if this I'm not sure if this will even run but let's try that after the talk okay but that would",
    "start": "1982000",
    "end": "1989440"
  },
  {
    "text": "probably now I would be able to do a wait here right yeah not sure if that",
    "start": "1989440",
    "end": "1995799"
  },
  {
    "text": "works we'll try it after a talk is that okay you had the question yeah we'll see",
    "start": "1995799",
    "end": "2001840"
  },
  {
    "text": "that after the talk okay next one you had let's hopefully get one where all the code is there so I can be a little",
    "start": "2001840",
    "end": "2007440"
  },
  {
    "text": "bit less tressed hierarchy IDs okay that's cool uh it's the one I always really want to do um",
    "start": "2007440",
    "end": "2015240"
  },
  {
    "text": "so the thing is um what you need for this is you need a package to add the",
    "start": "2015240",
    "end": "2022120"
  },
  {
    "text": "support for this so hierarchy IDs um what we have here I'm going to set that",
    "start": "2022120",
    "end": "2027960"
  },
  {
    "text": "as my startup project um there is an extra package I included which is the um",
    "start": "2027960",
    "end": "2036919"
  },
  {
    "text": "NTI framework core SQL Server hierarchy ID right um it's just to enable support",
    "start": "2036919",
    "end": "2042679"
  },
  {
    "text": "for this um and what that enables us encode is if we take the entire Hobbit",
    "start": "2042679",
    "end": "2051839"
  },
  {
    "text": "family all of the halflings you can basically model their position in the",
    "start": "2051839",
    "end": "2057599"
  },
  {
    "text": "Craft um these are the ones by the way um so you have Balo who is like the arch",
    "start": "2057599",
    "end": "2064878"
  },
  {
    "text": "parent of the entire um family and he has his children and so on and so on so",
    "start": "2064879",
    "end": "2070599"
  },
  {
    "text": "the these are all the uh the halflings in the family and you can basically Define the note by its position in that",
    "start": "2070599",
    "end": "2076200"
  },
  {
    "text": "tree so Polo is um slash Tre sl32 right",
    "start": "2076200",
    "end": "2083158"
  },
  {
    "text": "positional in a hierarchy now you can basically use that as an extra key on an",
    "start": "2083159",
    "end": "2089679"
  },
  {
    "text": "entity when you save something to a database so what we have here is I've",
    "start": "2089679",
    "end": "2095158"
  },
  {
    "text": "already prepared these hierarchy IDs and because that package enables us to do that and we parse those and we populate",
    "start": "2095159",
    "end": "2102560"
  },
  {
    "text": "that tree in our database so that we enable it for querying now there is one thing that we",
    "start": "2102560",
    "end": "2108520"
  },
  {
    "text": "do have to do it's something that we um have to enable on the DB context as well",
    "start": "2108520",
    "end": "2115079"
  },
  {
    "text": "it's not something that is going to be there by default so when we are doing",
    "start": "2115079",
    "end": "2121280"
  },
  {
    "text": "our options Builder um what we are doing here is we should basically um at the um hierarchy",
    "start": "2121280",
    "end": "2131000"
  },
  {
    "text": "ID so on the options Builder uh you can do this in your un configuring as well",
    "start": "2131000",
    "end": "2136480"
  },
  {
    "text": "you can do use hierarchy ID and of course that is not doing what",
    "start": "2136480",
    "end": "2143240"
  },
  {
    "text": "I wanted to do um oh actually it's not in the options",
    "start": "2143240",
    "end": "2151160"
  },
  {
    "text": "it's in the use it's something we extend on the SQL Server so after we pass in",
    "start": "2151160",
    "end": "2156760"
  },
  {
    "text": "our connection string we it's it's a SQL Server options thing so it's not something you can do with",
    "start": "2156760",
    "end": "2162000"
  },
  {
    "text": "other uh databases uh so option no not the options",
    "start": "2162000",
    "end": "2169640"
  },
  {
    "text": "Builder do use hierarchy ID yay and that just",
    "start": "2169640",
    "end": "2176240"
  },
  {
    "text": "enables that functionality and that allows us to create a model class that has a hierarchy ID uh in it so what that",
    "start": "2176240",
    "end": "2186079"
  },
  {
    "text": "looks like is all we do is we create an extra property of type hierarchy ID and",
    "start": "2186079",
    "end": "2193640"
  },
  {
    "text": "basically Entity framework already knows that this is something that we're going to be able to query just like that so",
    "start": "2193640",
    "end": "2200800"
  },
  {
    "text": "when we run this code it should already populate our database with that",
    "start": "2200800",
    "end": "2206079"
  },
  {
    "text": "hierarchical data I'm not really querying it yet I'm just saving it I'm just going to run it for one so we can",
    "start": "2206079",
    "end": "2212079"
  },
  {
    "text": "take a look in the database what this has actually done uh to our database schema so that was demo number",
    "start": "2212079",
    "end": "2219640"
  },
  {
    "text": "three is that too small for you to read probably is right do we UI scale the",
    "start": "2219640",
    "end": "2225440"
  },
  {
    "text": "whole thing is that too risky",
    "start": "2225440",
    "end": "2230480"
  },
  {
    "text": "um I'm going to assume not what could possibly go wrong",
    "start": "2230480",
    "end": "2236400"
  },
  {
    "text": "right there we go is that a little bit better so what we've gotten here is",
    "start": "2237200",
    "end": "2243480"
  },
  {
    "text": "we've got our hofling table and the column that we're getting here is actually of type hierarchy ID so",
    "start": "2243480",
    "end": "2251880"
  },
  {
    "text": "that's actually a SQL Server feature that we're using and the data that we're getting in there",
    "start": "2251880",
    "end": "2258720"
  },
  {
    "text": "um you can basically take a look and you see that it's binary",
    "start": "2258720",
    "end": "2264119"
  },
  {
    "text": "data um and that binary data becomes longer and longer and longer depending on which node we are in right and that's",
    "start": "2264119",
    "end": "2270960"
  },
  {
    "text": "basically our tree data but this allows for some pretty cool",
    "start": "2270960",
    "end": "2276000"
  },
  {
    "text": "things so the way that you can now query this and I'm actually going to open a profiler so",
    "start": "2276000",
    "end": "2283319"
  },
  {
    "text": "you can see what's going on uh with that database um I'm quickly going to open",
    "start": "2283319",
    "end": "2289920"
  },
  {
    "text": "that that's my local DB instance I only want to",
    "start": "2289920",
    "end": "2295400"
  },
  {
    "text": "see RPC completed and batch completed right there we go so that should show",
    "start": "2295400",
    "end": "2303800"
  },
  {
    "text": "our queries when we start doing things with this in link and the fun thing here is when we have that database",
    "start": "2303800",
    "end": "2311480"
  },
  {
    "text": "created um these queries now we are querying all of the heal links so we have run this before you're seeing",
    "start": "2311480",
    "end": "2318400"
  },
  {
    "text": "everybody right you see every everybody that's in the database and it comes out like that now the fun stuff here is we",
    "start": "2318400",
    "end": "2326040"
  },
  {
    "text": "can query that in completely unexpected ways that would be very hard to do when you're doing a self- referencing uh",
    "start": "2326040",
    "end": "2332359"
  },
  {
    "text": "forign key so the the way that this works is you can do a pad from patriarch",
    "start": "2332359",
    "end": "2339760"
  },
  {
    "text": "or pad from um so we can take our",
    "start": "2339760",
    "end": "2346079"
  },
  {
    "text": "hling and we can basically say my pth from",
    "start": "2346079",
    "end": "2352240"
  },
  {
    "text": "patriarch is descendant of and I'm going to create now that I've scaled everything this becomes a problem and",
    "start": "2352240",
    "end": "2358800"
  },
  {
    "text": "PCO is one of our nodes right and now I'm just going to get all of the halflings that descend from our PCO and",
    "start": "2358800",
    "end": "2366599"
  },
  {
    "text": "that will include the parent as well so when we run this um and now of course",
    "start": "2366599",
    "end": "2376240"
  },
  {
    "text": "my UI looks all messed up uh when we run this I should only get the descendants",
    "start": "2376800",
    "end": "2382720"
  },
  {
    "text": "in that tree that are here underneath posco right posco is right here so I'm",
    "start": "2382720",
    "end": "2388319"
  },
  {
    "text": "should only get posco and like his three children and his grandchild right and",
    "start": "2388319",
    "end": "2393359"
  },
  {
    "text": "that's exactly what we get we get those five notes now the cool thing is like in",
    "start": "2393359",
    "end": "2398880"
  },
  {
    "text": "terms of round trips that is just a single query so the way that that has",
    "start": "2398880",
    "end": "2405200"
  },
  {
    "text": "been queried um is basically this and I'm not",
    "start": "2405200",
    "end": "2410680"
  },
  {
    "text": "sure can we enlarge that um so what you see here is it uses",
    "start": "2410680",
    "end": "2417760"
  },
  {
    "text": "a SQL Server function is descendant off so it's actually Levering leveraging the",
    "start": "2417760",
    "end": "2423800"
  },
  {
    "text": "SQL Server functionality to let you have nice higher key P IDs in your code as well and you don't have to do many round",
    "start": "2423800",
    "end": "2430800"
  },
  {
    "text": "trips so there is is descendant of uh you can also flip that around obviously",
    "start": "2430800",
    "end": "2437280"
  },
  {
    "text": "where we can say like okay I just want to get all of the parents um so if we just want to flip that around um you get",
    "start": "2437280",
    "end": "2445200"
  },
  {
    "text": "the pad up from your certain node so you can basically instead of doing this you",
    "start": "2445200",
    "end": "2451160"
  },
  {
    "text": "do posco um and Pat from patriarch here well",
    "start": "2451160",
    "end": "2458280"
  },
  {
    "text": "that's a hierarchy ID um what's going wrong",
    "start": "2458280",
    "end": "2465599"
  },
  {
    "text": "there H go is",
    "start": "2465599",
    "end": "2471560"
  },
  {
    "text": "descendant oh yeah no yeah we don't need that pad anymore",
    "start": "2471560",
    "end": "2477079"
  },
  {
    "text": "posco already is a hierarchy ID and then we need to do h. pad from patriarch so",
    "start": "2477079",
    "end": "2483319"
  },
  {
    "text": "the pad from patriarch is just my um property on my model right so now it's",
    "start": "2483319",
    "end": "2488800"
  },
  {
    "text": "the other way around and we will get from posco all the nodes up right that will work in the other way and also that",
    "start": "2488800",
    "end": "2496040"
  },
  {
    "text": "leverages the functionality of SQL Server again um those are the type of um",
    "start": "2496040",
    "end": "2503200"
  },
  {
    "text": "queries that would be very hard to do it also allows you to go to certain levels so you can play around with the levels",
    "start": "2503200",
    "end": "2511359"
  },
  {
    "text": "so the cool thing is if we just instead of doing this I would say hey um hh.",
    "start": "2511359",
    "end": "2518800"
  },
  {
    "text": "patr patriarch uh do um we get the get level on that we can basically say I",
    "start": "2518800",
    "end": "2526800"
  },
  {
    "text": "only want the ones in uh generation four three um wait get level equals three",
    "start": "2526800",
    "end": "2535079"
  },
  {
    "text": "obviously um that will work as well and that will also execute on the database instead of in code but then you get all",
    "start": "2535079",
    "end": "2542720"
  },
  {
    "text": "the ones that have the same length of um ID right so",
    "start": "2542720",
    "end": "2548400"
  },
  {
    "text": "wait for it to execute for a second there we go so that is actually",
    "start": "2548400",
    "end": "2556440"
  },
  {
    "text": "just like the one slice in our um the",
    "start": "2556440",
    "end": "2561480"
  },
  {
    "text": "one slice here in our generation right and of course you can say I'm going to",
    "start": "2561480",
    "end": "2567040"
  },
  {
    "text": "do descendant off and then include the level as well and and you can mix these things together it's super convenient",
    "start": "2567040",
    "end": "2573520"
  },
  {
    "text": "when you're working with three structured data right the only problem that I've run into is any framework in",
    "start": "2573520",
    "end": "2579880"
  },
  {
    "text": "its current version gets super confused if you try to make your hierar key also your primary key that is like something",
    "start": "2579880",
    "end": "2586839"
  },
  {
    "text": "that throws a bunch of exceptions so you should have an artificial primary key and then put your hierarch key ID next",
    "start": "2586839",
    "end": "2592839"
  },
  {
    "text": "to it right um that's the only stuff that I've run into with this but it also solves some nice problems along the way",
    "start": "2592839",
    "end": "2600359"
  },
  {
    "text": "um we have time so let's take a look at the next one anybody have questions about this yes",
    "start": "2600359",
    "end": "2608520"
  },
  {
    "text": "can I",
    "start": "2609079",
    "end": "2615720"
  },
  {
    "text": "wait wait I'm sorry",
    "start": "2617559",
    "end": "2624920"
  },
  {
    "text": "yes oh only for the leaves um I'm not sure what you mean you",
    "start": "2628280",
    "end": "2634760"
  },
  {
    "text": "can you can query for any position oh so that you don't get the",
    "start": "2634760",
    "end": "2640440"
  },
  {
    "text": "parent yeah yeah so so the way that you would do that what you're I think what",
    "start": "2640960",
    "end": "2648119"
  },
  {
    "text": "you're trying to say is if if I say here my Pat from patriarch um is descendant of um and you",
    "start": "2648119",
    "end": "2656640"
  },
  {
    "text": "get our posco in there that includes the parent node as well right and you only",
    "start": "2656640",
    "end": "2662880"
  },
  {
    "text": "want to see the ones that are below it is that what you're trying to say",
    "start": "2662880",
    "end": "2668760"
  },
  {
    "text": "yeah so you only want to see the leaves underneath this um then we can just go",
    "start": "2670839",
    "end": "2677520"
  },
  {
    "text": "h. B from patriarch doget level",
    "start": "2677520",
    "end": "2683800"
  },
  {
    "text": "um is higher than um wait um than posco doget level",
    "start": "2683800",
    "end": "2693160"
  },
  {
    "text": "right so those this one should not include posco anymore so you have to combine those functions but that takes",
    "start": "2693160",
    "end": "2700839"
  },
  {
    "text": "away because now we only get Generations below it and if you combine those that that",
    "start": "2700839",
    "end": "2707720"
  },
  {
    "text": "solves the problem at least I'm confident that this this will work yay",
    "start": "2707720",
    "end": "2714400"
  },
  {
    "text": "great okay like one more successful demo and then I've redeemed like the failed one from before right and chasing",
    "start": "2714400",
    "end": "2721160"
  },
  {
    "text": "columns we have time for that that's going to be fine um so chasing columns",
    "start": "2721160",
    "end": "2726200"
  },
  {
    "text": "um which one one was that let's take a look it's demo number",
    "start": "2726200",
    "end": "2732400"
  },
  {
    "text": "five it's also not the fake one so that's good um there we go um in adjacent column if we have a",
    "start": "2732400",
    "end": "2740800"
  },
  {
    "text": "model um that looks something like this right you have a shipment and a shipment",
    "start": "2740800",
    "end": "2746839"
  },
  {
    "text": "has a shipping label and our shipping label consists of a shipping address and",
    "start": "2746839",
    "end": "2752079"
  },
  {
    "text": "a carrier and a tracking code right and we're nesting a few levels deep we could obviously model this as different",
    "start": "2752079",
    "end": "2759040"
  },
  {
    "text": "entities but in a lot of times like we are not reusing a shipping label for a",
    "start": "2759040",
    "end": "2765839"
  },
  {
    "text": "different shipment right so it makes sense to not make that an entity of its",
    "start": "2765839",
    "end": "2771200"
  },
  {
    "text": "own it should just be saved with the shipment data now",
    "start": "2771200",
    "end": "2777000"
  },
  {
    "text": "um if you would model this as owned entities right um that was the way until",
    "start": "2777000",
    "end": "2784640"
  },
  {
    "text": "e course 6 that you would do this you could can you could do owned entities um",
    "start": "2784640",
    "end": "2789920"
  },
  {
    "text": "then they would behind the scenes still be treated as proper entities meaning",
    "start": "2789920",
    "end": "2795079"
  },
  {
    "text": "they would require an ID behind the scenes to actually run um because that's",
    "start": "2795079",
    "end": "2802359"
  },
  {
    "text": "how NTI framework Works everything that an entity needs at least behind the scenes some kind of identifier um that",
    "start": "2802359",
    "end": "2809200"
  },
  {
    "text": "it will deal with on those entity objects um so let's take a look at what my code here does um I'm actually saving",
    "start": "2809200",
    "end": "2817520"
  },
  {
    "text": "a new shipment and that has a UPS shipping label and it's being sent to our office in an worp I'm trying to save",
    "start": "2817520",
    "end": "2824920"
  },
  {
    "text": "that so let's quickly run and see what kind of database that we get if we do it",
    "start": "2824920",
    "end": "2830119"
  },
  {
    "text": "with owned types so if we do this with own types um the way that that would",
    "start": "2830119",
    "end": "2837040"
  },
  {
    "text": "look um demo database 5 there we",
    "start": "2837040",
    "end": "2845160"
  },
  {
    "text": "go we had a shipment table and it has a bunch of columns in it and it has",
    "start": "2845559",
    "end": "2851440"
  },
  {
    "text": "modeled it like this we put everything in there but behind the scenes Entity framework is still treating this as an",
    "start": "2851440",
    "end": "2858920"
  },
  {
    "text": "entity of its own and that means that it is listed in the change tracker as an",
    "start": "2858920",
    "end": "2864720"
  },
  {
    "text": "entity and it's causing overhead as well while it doesn't have to so um let's",
    "start": "2864720",
    "end": "2871640"
  },
  {
    "text": "take a look as how we can basically put this this into Json instead of having",
    "start": "2871640",
    "end": "2877520"
  },
  {
    "text": "that whole um hierarchy that we have in there so we do uh Json we can we're",
    "start": "2877520",
    "end": "2885680"
  },
  {
    "text": "basically going to have to tell our model to treat this one differently",
    "start": "2885680",
    "end": "2891520"
  },
  {
    "text": "um the way that that works is when we create our demo",
    "start": "2891520",
    "end": "2896880"
  },
  {
    "text": "context um it's actually here in the on model creating that owns one that is the",
    "start": "2896880",
    "end": "2903880"
  },
  {
    "text": "stuff that we're basically going to have to change um and we do",
    "start": "2903880",
    "end": "2911520"
  },
  {
    "text": "that this one for the shipping label we can basically sa for that top one we can",
    "start": "2911520",
    "end": "2917920"
  },
  {
    "text": "make that own type uh property Navigator so we do the um",
    "start": "2917920",
    "end": "2926960"
  },
  {
    "text": "Navigator and that Navigator um that is something that we can build up just to",
    "start": "2926960",
    "end": "2934119"
  },
  {
    "text": "do the things that we wanted to do oh obviously one and we can do that by just saying to",
    "start": "2934119",
    "end": "2941960"
  },
  {
    "text": "Json on that so Navigator do2 Json that will take everything that is underneath",
    "start": "2941960",
    "end": "2947799"
  },
  {
    "text": "our shipping label and convert that to a Json column so make that into a Json column in a database so it doesn't treat",
    "start": "2947799",
    "end": "2954240"
  },
  {
    "text": "it as an entity anymore but it just has that as Jason coming out so that's super",
    "start": "2954240",
    "end": "2959960"
  },
  {
    "text": "cool um we can also um say the owns one here that is something that we will move",
    "start": "2959960",
    "end": "2967839"
  },
  {
    "text": "into um the Navigator expression there",
    "start": "2967839",
    "end": "2973520"
  },
  {
    "text": "so Navigator do owns one and then we can extend it couple of levels deep if we",
    "start": "2973520",
    "end": "2979160"
  },
  {
    "text": "want to take all that Json with it and that's completely how you get that done",
    "start": "2979160",
    "end": "2985760"
  },
  {
    "text": "so we move that one in there there we go and then we are taking",
    "start": "2985760",
    "end": "2991920"
  },
  {
    "text": "the shipping address with us as well so by just putting that on a j ason we will",
    "start": "2991920",
    "end": "2997680"
  },
  {
    "text": "get a completely different view when we take a look at our database we will get only one column um and that will be of",
    "start": "2997680",
    "end": "3005000"
  },
  {
    "text": "type Chason so let's refresh here there we go um it is an narker Max",
    "start": "3005000",
    "end": "3012920"
  },
  {
    "text": "now that should be a Jason column actually um you can do that with a two type um what's a SQL Server type for",
    "start": "3012920",
    "end": "3020960"
  },
  {
    "text": "Jason again drawing a blank there's a type for",
    "start": "3020960",
    "end": "3027720"
  },
  {
    "text": "it right using Chas and columns now in any case uh what's in",
    "start": "3027720",
    "end": "3035640"
  },
  {
    "text": "there is actually our Chasin so let's just quickly query",
    "start": "3035640",
    "end": "3042160"
  },
  {
    "text": "this and take a look at what we have here and just going to copy it",
    "start": "3042160",
    "end": "3047920"
  },
  {
    "text": "and um put that in quickly make a new one there",
    "start": "3047920",
    "end": "3056839"
  },
  {
    "text": "there we go so we are getting our entire Chason object in here so we're getting",
    "start": "3056839",
    "end": "3062280"
  },
  {
    "text": "our carrier name our tracking code our shipping address and then we go a level deeper right and all of it is in there",
    "start": "3062280",
    "end": "3070280"
  },
  {
    "text": "and this is super useful when you have objects that have missing Properties or",
    "start": "3070280",
    "end": "3075599"
  },
  {
    "text": "that sometimes have a different shape have a lot of inheritance in it you can easily serialize that into a Chason",
    "start": "3075599",
    "end": "3081720"
  },
  {
    "text": "column makes it so much easier to handle it also makes sure that when this mutates you don't always have to",
    "start": "3081720",
    "end": "3088240"
  },
  {
    "text": "recreate um new columns for the stuff that you're changing if you add something underneath your Json property",
    "start": "3088240",
    "end": "3095040"
  },
  {
    "text": "that will just um work without database migration now I'm not saying that every",
    "start": "3095040",
    "end": "3100319"
  },
  {
    "text": "table should just be an ID and adjacent column um there are other database types",
    "start": "3100319",
    "end": "3105799"
  },
  {
    "text": "that you should be using if you do that like use a document database if that's what you wanted to right like Dynamo DP",
    "start": "3105799",
    "end": "3115280"
  },
  {
    "text": "right um 51 we can do one more",
    "start": "3115280",
    "end": "3121359"
  },
  {
    "text": "right raw SQL queries okay that's actually a quite easy one to do",
    "start": "3121359",
    "end": "3128319"
  },
  {
    "text": "um but it's also not the fake one uh we we are getting deer supports in",
    "start": "3128319",
    "end": "3135960"
  },
  {
    "text": "uh deer like supports in NTI framework so that is demo number four",
    "start": "3135960",
    "end": "3143000"
  },
  {
    "text": "last one hope that works as well so what we're getting here is if I have",
    "start": "3143000",
    "end": "3150480"
  },
  {
    "text": "this query that I want to execute against a database that already exists and the scenarios where you would do",
    "start": "3150480",
    "end": "3157280"
  },
  {
    "text": "this um I I used to use Dapper and and nty",
    "start": "3157280",
    "end": "3163839"
  },
  {
    "text": "framework side by side because ntity framework was very slow in certain scenarios and then if you would know",
    "start": "3163839",
    "end": "3169960"
  },
  {
    "text": "which query to write you could be way faster with depper depper also had less overhead now nty framework core has",
    "start": "3169960",
    "end": "3175640"
  },
  {
    "text": "gotten really good its overhead so it's gotten way faster but sometimes there",
    "start": "3175640",
    "end": "3181000"
  },
  {
    "text": "are queries that are very very hard to express when you're writing link that",
    "start": "3181000",
    "end": "3186119"
  },
  {
    "text": "would be easy to express when you're writing SQL um and that's the kind of scenarios where I still find myself",
    "start": "3186119",
    "end": "3191960"
  },
  {
    "text": "using functionality like that now the cool thing is if you do this in a",
    "start": "3191960",
    "end": "3197359"
  },
  {
    "text": "formattable string um we can basically use this on our demo context to query some data so",
    "start": "3197359",
    "end": "3205240"
  },
  {
    "text": "I'm first going to make that my startup project there we go um and if I'm just",
    "start": "3205240",
    "end": "3212280"
  },
  {
    "text": "if I want to get those Distributors out there because what's in this database I just put a bunch of movies in there so",
    "start": "3212280",
    "end": "3219680"
  },
  {
    "text": "it's the same movies that we got in that other data uh in that other um demo we",
    "start": "3219680",
    "end": "3226599"
  },
  {
    "text": "if we want to uh query those on the distributor and a sum of the gross revenue uh let's assume that that's",
    "start": "3226599",
    "end": "3233480"
  },
  {
    "text": "something that is very hard to express in link right um so how we do that",
    "start": "3233480",
    "end": "3240240"
  },
  {
    "text": "is if I want to get all of my Distributors out",
    "start": "3240240",
    "end": "3245720"
  },
  {
    "text": "there what we can just do is await on our context dot um no not Distributors",
    "start": "3246559",
    "end": "3255079"
  },
  {
    "text": "we're not going to do that and then we'll have to go to the database object of our DB context that is where we can",
    "start": "3255079",
    "end": "3261040"
  },
  {
    "text": "run those queries um and then you just use the SQL query um and that's a generic method",
    "start": "3261040",
    "end": "3268720"
  },
  {
    "text": "that you can pass your result type into so I made a type for that distributor",
    "start": "3268720",
    "end": "3273960"
  },
  {
    "text": "Revenue distributor revenue is just a simple name and total revenue right um",
    "start": "3273960",
    "end": "3280760"
  },
  {
    "text": "that's going to come back if we want to get that back and we pass this query in",
    "start": "3280760",
    "end": "3286040"
  },
  {
    "text": "there oh no no no no what did I do okay",
    "start": "3286040",
    "end": "3291119"
  },
  {
    "text": "if we pass that query in there that's the one that we should be running",
    "start": "3291119",
    "end": "3297119"
  },
  {
    "text": "there we go and we can just do tool list async on",
    "start": "3297119",
    "end": "3302880"
  },
  {
    "text": "that and then we are getting our results back and of course I forgot to type when",
    "start": "3302880",
    "end": "3309160"
  },
  {
    "text": "I'm um to list a",
    "start": "3309160",
    "end": "3315640"
  },
  {
    "text": "Sy and what of course a DOT yes thank you okay so now we got all of our",
    "start": "3315640",
    "end": "3322559"
  },
  {
    "text": "Distributors we can for each overdose um so let let's just remove the quotes and",
    "start": "3322559",
    "end": "3329720"
  },
  {
    "text": "let's go and of course I mistyped this so",
    "start": "3329720",
    "end": "3335480"
  },
  {
    "text": "there's that so this just gets executed into the",
    "start": "3335480",
    "end": "3341480"
  },
  {
    "text": "database as is um",
    "start": "3341480",
    "end": "3347039"
  },
  {
    "text": "now this may not work and the reason that this may not",
    "start": "3347039",
    "end": "3352520"
  },
  {
    "text": "work I think that this is going to throw an exception so hold on for a second yes it's there uh the required column",
    "start": "3352520",
    "end": "3360039"
  },
  {
    "text": "name was not present and just like depper it uses conventions to map between your results and your output",
    "start": "3360039",
    "end": "3367520"
  },
  {
    "text": "models so when we take this we have our um distributor that should be Alias as",
    "start": "3367520",
    "end": "3375960"
  },
  {
    "text": "name and our gross revenue should be Alias as total revenue because those are",
    "start": "3375960",
    "end": "3383319"
  },
  {
    "text": "the um where did I put that I did show that",
    "start": "3383319",
    "end": "3391480"
  },
  {
    "text": "right so those are the property names that we have here name and total revenue we should reuse those as our result",
    "start": "3391480",
    "end": "3397760"
  },
  {
    "text": "column names and then everything should be peachy right now the cool thing about",
    "start": "3397760",
    "end": "3404960"
  },
  {
    "text": "this is is this is just the start and this is where this gets better than what",
    "start": "3404960",
    "end": "3411400"
  },
  {
    "text": "we can do with Dapper so let's first take a look oh is that still throwing exceptions",
    "start": "3411400",
    "end": "3417000"
  },
  {
    "text": "no that should work now oh it's recreating database so let's",
    "start": "3417000",
    "end": "3424000"
  },
  {
    "text": "wait for a second make sure that this works before I do anything",
    "start": "3424000",
    "end": "3429039"
  },
  {
    "text": "else there we go so we're getting all of these production houses and we're getting their revenue from their movies",
    "start": "3430119",
    "end": "3436839"
  },
  {
    "text": "okay cool um now because this is ntity framework this is actually an I",
    "start": "3436839",
    "end": "3444359"
  },
  {
    "text": "queriable so we can start building onto this using regular link so let's say",
    "start": "3444359",
    "end": "3452720"
  },
  {
    "text": "that I want to order that query or put a wear clause on it I don't have to basically modify my base query every",
    "start": "3452720",
    "end": "3459799"
  },
  {
    "text": "time I can just tack on link to this so if I do here if I do an order by",
    "start": "3459799",
    "end": "3468319"
  },
  {
    "text": "descending and then I can just use my Revenue class that I'm using Revenue total revenue which is",
    "start": "3468559",
    "end": "3475880"
  },
  {
    "text": "then strongly typed and the result of my input query all of that just tags on to",
    "start": "3475880",
    "end": "3481839"
  },
  {
    "text": "each other so that's that's the cool bit of doing this and that's something that like",
    "start": "3481839",
    "end": "3487880"
  },
  {
    "text": "depper has trouble doing because this will actually get executed in the database uh like this so I'm going to",
    "start": "3487880",
    "end": "3495000"
  },
  {
    "text": "let this run and but we we're going to take a look at what the um query is that was",
    "start": "3495000",
    "end": "3501359"
  },
  {
    "text": "executed so now I have the one at the top while Disney obviously made the most money uh no surprise there uh the query",
    "start": "3501359",
    "end": "3509440"
  },
  {
    "text": "that was executed um basically has our order by in it so it takes our base query this is",
    "start": "3509440",
    "end": "3517880"
  },
  {
    "text": "basically you can can you read this yeah so that's the base query that we wrote",
    "start": "3517880",
    "end": "3523960"
  },
  {
    "text": "and then it just wraps around it with a select from and it adds our order by on",
    "start": "3523960",
    "end": "3529480"
  },
  {
    "text": "top of that so even the link that we tag onto this literal query is something",
    "start": "3529480",
    "end": "3535280"
  },
  {
    "text": "that entity frame work is able to deal with and put into one database round trip right and I think this makes this",
    "start": "3535280",
    "end": "3541520"
  },
  {
    "text": "cooler than what derer can do um and I guess that's out of time anybody have",
    "start": "3541520",
    "end": "3548039"
  },
  {
    "text": "any questions what's the fake one you forgot come on what's the fake one you got a",
    "start": "3548039",
    "end": "3558160"
  },
  {
    "text": "guess what the batch size no that's real the batch size is super",
    "start": "3558160",
    "end": "3563680"
  },
  {
    "text": "real double databases I mean let's take a",
    "start": "3563680",
    "end": "3569400"
  },
  {
    "text": "look and go back to the slides for a second yes um now of course double databases would",
    "start": "3569400",
    "end": "3577160"
  },
  {
    "text": "never work how are you going to deal with transactions across multiple database engines we don't want to get",
    "start": "3577160",
    "end": "3582720"
  },
  {
    "text": "back to an Era where we're doing distributed transaction coordinators who ever had to deal with those who has set",
    "start": "3582720",
    "end": "3589559"
  },
  {
    "text": "you still have trauma yeah yeah right so we never want to go back there this is not a real feature we're not going to be",
    "start": "3589559",
    "end": "3595680"
  },
  {
    "text": "able to to talk to two databases from One DB context so don't expect this feature to come all of the rest of them",
    "start": "3595680",
    "end": "3602559"
  },
  {
    "text": "were real um so you can easily look them up I have a whole course out on dome",
    "start": "3602559",
    "end": "3607760"
  },
  {
    "text": "train as well um but all of the documentation is on the nty framework uh",
    "start": "3607760",
    "end": "3613400"
  },
  {
    "text": "documentation base so you can look all of them up by yourself if you want so that's it for now I'm going to release",
    "start": "3613400",
    "end": "3620000"
  },
  {
    "text": "you and let you get coffee H I hope you will forgive me the first demo that was a little bit messy um",
    "start": "3620000",
    "end": "3627960"
  },
  {
    "text": "just remember n framework cor is awesome it can do a lot more than you would think at first glance that's my Twitter",
    "start": "3631000",
    "end": "3636559"
  },
  {
    "text": "handle if you want to discuss this anymore I have been doing a joke for years where I would give people my icq",
    "start": "3636559",
    "end": "3643160"
  },
  {
    "text": "number and the previous conference and D see Oslo where I where I gave this talk was the last time that I could actually",
    "start": "3643160",
    "end": "3649440"
  },
  {
    "text": "use that because icq has been turned off and it makes me sad",
    "start": "3649440",
    "end": "3656160"
  },
  {
    "text": "so it's no longer a thing so no icq number but you can hit me up on Twitter if you want to talk about this anymore",
    "start": "3656160",
    "end": "3663640"
  }
]