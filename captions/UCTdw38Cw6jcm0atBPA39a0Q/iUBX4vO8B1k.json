[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "uh my name is dmitry and i work for",
    "start": "160",
    "end": "3360"
  },
  {
    "text": "norwegian consultancy company in novonet",
    "start": "3360",
    "end": "5839"
  },
  {
    "text": "and uh",
    "start": "5839",
    "end": "6799"
  },
  {
    "text": "i will present a little bit about",
    "start": "6799",
    "end": "10080"
  },
  {
    "text": "performance when each millisecond counts",
    "start": "10080",
    "end": "14000"
  },
  {
    "text": "recently i worked for nrk and created an",
    "start": "14000",
    "end": "17359"
  },
  {
    "text": "uh part of backend services for ear",
    "start": "17359",
    "end": "19520"
  },
  {
    "text": "which is weather forecast service",
    "start": "19520",
    "end": "21119"
  },
  {
    "text": "for the whole world",
    "start": "21119",
    "end": "24000"
  },
  {
    "text": "uh this is a agenda for today i will",
    "start": "24320",
    "end": "27359"
  },
  {
    "text": "talk a little bit about apis and",
    "start": "27359",
    "end": "29599"
  },
  {
    "text": "how performance.net core3 against.net",
    "start": "29599",
    "end": "32160"
  },
  {
    "text": "core 2.",
    "start": "32160",
    "end": "33600"
  },
  {
    "text": "a little bit about json serialization",
    "start": "33600",
    "end": "35280"
  },
  {
    "text": "and how should you choose an operating",
    "start": "35280",
    "end": "37520"
  },
  {
    "text": "system",
    "start": "37520",
    "end": "38320"
  },
  {
    "text": "a little bit about databases and choice",
    "start": "38320",
    "end": "41280"
  },
  {
    "text": "of the right database engine and",
    "start": "41280",
    "end": "43600"
  },
  {
    "text": "queries and frameworks and some code",
    "start": "43600",
    "end": "45920"
  },
  {
    "text": "examples which",
    "start": "45920",
    "end": "47200"
  },
  {
    "text": "are performance related but first",
    "start": "47200",
    "end": "51199"
  },
  {
    "start": "51000",
    "end": "51000"
  },
  {
    "text": "let's just talk about the title when one",
    "start": "51199",
    "end": "53680"
  },
  {
    "text": "millisecond actually make a difference",
    "start": "53680",
    "end": "56239"
  },
  {
    "text": "usually you can't tell the difference",
    "start": "56239",
    "end": "58640"
  },
  {
    "text": "between 100 milliseconds and the latency",
    "start": "58640",
    "end": "61520"
  },
  {
    "text": "of 100 milliseconds is nothing",
    "start": "61520",
    "end": "63280"
  },
  {
    "text": "but sometimes each millisecond counts",
    "start": "63280",
    "end": "66080"
  },
  {
    "text": "and make a difference",
    "start": "66080",
    "end": "67760"
  },
  {
    "text": "especially when you have lots of users",
    "start": "67760",
    "end": "70159"
  },
  {
    "text": "and lots of requests for example",
    "start": "70159",
    "end": "72320"
  },
  {
    "text": "if you have million requests each of",
    "start": "72320",
    "end": "74080"
  },
  {
    "text": "them takes this millisecond from your",
    "start": "74080",
    "end": "75600"
  },
  {
    "text": "cpu time",
    "start": "75600",
    "end": "77360"
  },
  {
    "text": "or millisecond can make really",
    "start": "77360",
    "end": "79600"
  },
  {
    "text": "difference when",
    "start": "79600",
    "end": "80560"
  },
  {
    "text": "you have a process against many many",
    "start": "80560",
    "end": "82960"
  },
  {
    "text": "database rows for example if you have",
    "start": "82960",
    "end": "84640"
  },
  {
    "text": "millions of rows and each of them",
    "start": "84640",
    "end": "86640"
  },
  {
    "text": "takes some milliseconds to process then",
    "start": "86640",
    "end": "88799"
  },
  {
    "text": "it can sum up to hours",
    "start": "88799",
    "end": "91600"
  },
  {
    "text": "so let me share some numbers from here",
    "start": "91600",
    "end": "94960"
  },
  {
    "text": "it has from 8 to 10 million",
    "start": "94960",
    "end": "98240"
  },
  {
    "text": "unique users per week and around 100 000",
    "start": "98240",
    "end": "102000"
  },
  {
    "text": "requests per minute and",
    "start": "102000",
    "end": "103360"
  },
  {
    "text": "13 million places defined in the",
    "start": "103360",
    "end": "105600"
  },
  {
    "text": "database",
    "start": "105600",
    "end": "106560"
  },
  {
    "text": "so you can see it's an original visa",
    "start": "106560",
    "end": "108720"
  },
  {
    "text": "service but it has much more users per",
    "start": "108720",
    "end": "110720"
  },
  {
    "text": "week than norwegian population",
    "start": "110720",
    "end": "112640"
  },
  {
    "text": "so it's quite a lot and",
    "start": "112640",
    "end": "116079"
  },
  {
    "text": "constantly there is there is a problem",
    "start": "116079",
    "end": "118640"
  },
  {
    "text": "with uh",
    "start": "118640",
    "end": "119439"
  },
  {
    "text": "maintain such an infrastructure to",
    "start": "119439",
    "end": "122719"
  },
  {
    "text": "deliver this traffic in a good way",
    "start": "122719",
    "end": "126479"
  },
  {
    "text": "so let's talk about how to get most from",
    "start": "126640",
    "end": "128720"
  },
  {
    "text": "api and infrastructure",
    "start": "128720",
    "end": "131599"
  },
  {
    "text": "uh i have number of theories theories to",
    "start": "131599",
    "end": "134560"
  },
  {
    "text": "check",
    "start": "134560",
    "end": "135360"
  },
  {
    "text": "uh for example which version of.net is",
    "start": "135360",
    "end": "137280"
  },
  {
    "text": "faster uh which json serialization is",
    "start": "137280",
    "end": "140000"
  },
  {
    "text": "better or which operation system to use",
    "start": "140000",
    "end": "143120"
  },
  {
    "text": "and the first thing",
    "start": "143120",
    "end": "146560"
  },
  {
    "text": "i would like to talk about is is.net",
    "start": "146560",
    "end": "148319"
  },
  {
    "text": "core 3 better than",
    "start": "148319",
    "end": "149599"
  },
  {
    "text": "net core 2.",
    "start": "149599",
    "end": "152400"
  },
  {
    "text": "i run some tests with k6 as the",
    "start": "152640",
    "end": "155200"
  },
  {
    "text": "performance framework",
    "start": "155200",
    "end": "156400"
  },
  {
    "text": "and i will not go too much into details",
    "start": "156400",
    "end": "158800"
  },
  {
    "text": "but i run this test for dotnet core and",
    "start": "158800",
    "end": "160560"
  },
  {
    "text": "do not score three",
    "start": "160560",
    "end": "163040"
  },
  {
    "text": "and made like couple of graphs which you",
    "start": "163040",
    "end": "165200"
  },
  {
    "text": "can compare",
    "start": "165200",
    "end": "166800"
  },
  {
    "text": "and you can see that.net core 3 is much",
    "start": "166800",
    "end": "169360"
  },
  {
    "text": "more stable",
    "start": "169360",
    "end": "170080"
  },
  {
    "text": "and this orange line is a minimal",
    "start": "170080",
    "end": "172000"
  },
  {
    "text": "request at the time which",
    "start": "172000",
    "end": "173840"
  },
  {
    "text": "is constant on the test 4.3 but",
    "start": "173840",
    "end": "177200"
  },
  {
    "text": "net core 2 struggles a lot and this test",
    "start": "177200",
    "end": "180319"
  },
  {
    "text": "generates lots of traffic until server",
    "start": "180319",
    "end": "182400"
  },
  {
    "text": "is dead",
    "start": "182400",
    "end": "183360"
  },
  {
    "text": "so that's how it basically works",
    "start": "183360",
    "end": "187040"
  },
  {
    "text": "so another thing is uh",
    "start": "187040",
    "end": "191519"
  },
  {
    "text": "json serialization when you start to",
    "start": "191519",
    "end": "194319"
  },
  {
    "text": "hear about",
    "start": "194319",
    "end": "194879"
  },
  {
    "text": "net core 3 many people refer our system",
    "start": "194879",
    "end": "197840"
  },
  {
    "text": "text json as a",
    "start": "197840",
    "end": "199120"
  },
  {
    "text": "new serialization engine which is much",
    "start": "199120",
    "end": "200800"
  },
  {
    "text": "better than newtonsoft or",
    "start": "200800",
    "end": "202720"
  },
  {
    "text": "other frameworks we issued before",
    "start": "202720",
    "end": "205840"
  },
  {
    "text": "i tried to prove it and therefore i",
    "start": "205840",
    "end": "208080"
  },
  {
    "text": "created a test object",
    "start": "208080",
    "end": "209280"
  },
  {
    "text": "and uh serialized and deserialized it",
    "start": "209280",
    "end": "211840"
  },
  {
    "text": "several thousand times just to see how",
    "start": "211840",
    "end": "213680"
  },
  {
    "text": "it works",
    "start": "213680",
    "end": "214560"
  },
  {
    "text": "and surprisingly i couldn't confirm that",
    "start": "214560",
    "end": "216799"
  },
  {
    "text": "system like json is better",
    "start": "216799",
    "end": "218640"
  },
  {
    "text": "i compared it to this newton soft",
    "start": "218640",
    "end": "221680"
  },
  {
    "text": "which on this graph is green and on",
    "start": "221680",
    "end": "224319"
  },
  {
    "text": "small",
    "start": "224319",
    "end": "224799"
  },
  {
    "text": "amount of object or small amount of",
    "start": "224799",
    "end": "226319"
  },
  {
    "text": "payload newtonsoft actually performs",
    "start": "226319",
    "end": "228879"
  },
  {
    "text": "much better",
    "start": "228879",
    "end": "230000"
  },
  {
    "text": "i tried this test several times with",
    "start": "230000",
    "end": "231519"
  },
  {
    "text": "several environments and i can't",
    "start": "231519",
    "end": "233040"
  },
  {
    "text": "make system tech json perform better",
    "start": "233040",
    "end": "235120"
  },
  {
    "text": "than",
    "start": "235120",
    "end": "236080"
  },
  {
    "text": "soft in any circumstances the same is",
    "start": "236080",
    "end": "239280"
  },
  {
    "text": "valid for deserialization",
    "start": "239280",
    "end": "241120"
  },
  {
    "text": "so it starts to perform better only on",
    "start": "241120",
    "end": "243360"
  },
  {
    "text": "very very large payload like 10",
    "start": "243360",
    "end": "245120"
  },
  {
    "text": "000 objects so for me",
    "start": "245120",
    "end": "248480"
  },
  {
    "text": "this theory doesn't work so as my buster",
    "start": "248480",
    "end": "251599"
  },
  {
    "text": "says it's busted",
    "start": "251599",
    "end": "253360"
  },
  {
    "text": "but also people refer that system.json",
    "start": "253360",
    "end": "255760"
  },
  {
    "text": "is much better in memory management and",
    "start": "255760",
    "end": "257519"
  },
  {
    "text": "cpu management which is probably subject",
    "start": "257519",
    "end": "259440"
  },
  {
    "text": "to in other tests but",
    "start": "259440",
    "end": "260639"
  },
  {
    "text": "not today also i would like to notice",
    "start": "260639",
    "end": "264639"
  },
  {
    "start": "263000",
    "end": "263000"
  },
  {
    "text": "that linux is much better than windows",
    "start": "264639",
    "end": "266320"
  },
  {
    "text": "for your container storage and for your",
    "start": "266320",
    "end": "268320"
  },
  {
    "text": "apis",
    "start": "268320",
    "end": "269680"
  },
  {
    "text": "i myself is a windows developer and i",
    "start": "269680",
    "end": "272479"
  },
  {
    "text": "never worked on linux",
    "start": "272479",
    "end": "273759"
  },
  {
    "text": "but as long as i switched my apis from",
    "start": "273759",
    "end": "277120"
  },
  {
    "text": "windows containers to linux containers",
    "start": "277120",
    "end": "279040"
  },
  {
    "text": "they performed much better and much more",
    "start": "279040",
    "end": "280840"
  },
  {
    "text": "stable",
    "start": "280840",
    "end": "283759"
  },
  {
    "text": "let's talk a little bit about databases",
    "start": "283759",
    "end": "287040"
  },
  {
    "text": "in our forecast service we have a lot of",
    "start": "287040",
    "end": "290400"
  },
  {
    "text": "queries like this one on the screen this",
    "start": "290400",
    "end": "292800"
  },
  {
    "text": "query is basically",
    "start": "292800",
    "end": "293840"
  },
  {
    "text": "tries to find closest points to some",
    "start": "293840",
    "end": "298000"
  },
  {
    "text": "arbitrary geographic point and",
    "start": "298000",
    "end": "301840"
  },
  {
    "text": "on a very large data set it performs not",
    "start": "301840",
    "end": "304400"
  },
  {
    "text": "so well",
    "start": "304400",
    "end": "305520"
  },
  {
    "text": "i made some measurements and on initial",
    "start": "305520",
    "end": "307360"
  },
  {
    "text": "implementation on microsoft sql server",
    "start": "307360",
    "end": "309199"
  },
  {
    "text": "it took almost 700 milliseconds",
    "start": "309199",
    "end": "312479"
  },
  {
    "text": "we tried to optimize it and we tried to",
    "start": "312479",
    "end": "315039"
  },
  {
    "text": "use cosmic db for the same purpose",
    "start": "315039",
    "end": "317600"
  },
  {
    "text": "it worked much better and it averaged",
    "start": "317600",
    "end": "320479"
  },
  {
    "text": "like 300 milliseconds",
    "start": "320479",
    "end": "322000"
  },
  {
    "text": "but cost of this infrastructure was",
    "start": "322000",
    "end": "323919"
  },
  {
    "text": "really high and cosmos be",
    "start": "323919",
    "end": "325520"
  },
  {
    "text": "become really expensive if you scaled up",
    "start": "325520",
    "end": "329120"
  },
  {
    "text": "when i use postgresql it varies from 440",
    "start": "329120",
    "end": "333680"
  },
  {
    "text": "to 250 milliseconds which is much much",
    "start": "333680",
    "end": "336000"
  },
  {
    "text": "better",
    "start": "336000",
    "end": "337120"
  },
  {
    "text": "and i also had a conversation with dba",
    "start": "337120",
    "end": "340160"
  },
  {
    "text": "and he said that sql server probably",
    "start": "340160",
    "end": "342320"
  },
  {
    "text": "could be much better and could be",
    "start": "342320",
    "end": "343520"
  },
  {
    "text": "optimized and if you spend lots of time",
    "start": "343520",
    "end": "345600"
  },
  {
    "text": "on it",
    "start": "345600",
    "end": "346160"
  },
  {
    "text": "probably you can make this timing better",
    "start": "346160",
    "end": "349039"
  },
  {
    "text": "for sql server",
    "start": "349039",
    "end": "350240"
  },
  {
    "text": "but for postgre for example you should",
    "start": "350240",
    "end": "352160"
  },
  {
    "text": "not do anything it just works for this",
    "start": "352160",
    "end": "354080"
  },
  {
    "text": "type of queries",
    "start": "354080",
    "end": "355360"
  },
  {
    "text": "so you should choose the right database",
    "start": "355360",
    "end": "356800"
  },
  {
    "text": "for your task",
    "start": "356800",
    "end": "359440"
  },
  {
    "text": "you should also always remember that",
    "start": "361199",
    "end": "363280"
  },
  {
    "text": "database",
    "start": "363280",
    "end": "364240"
  },
  {
    "text": "need indexes as simple as a simple query",
    "start": "364240",
    "end": "367280"
  },
  {
    "text": "as the one on the screen",
    "start": "367280",
    "end": "368560"
  },
  {
    "text": "could work really really really bad if",
    "start": "368560",
    "end": "371039"
  },
  {
    "text": "id field is not indexed",
    "start": "371039",
    "end": "372960"
  },
  {
    "text": "for example or you can have query like",
    "start": "372960",
    "end": "375600"
  },
  {
    "text": "this which is also geospatial",
    "start": "375600",
    "end": "377840"
  },
  {
    "text": "which is optimally written it uses all",
    "start": "377840",
    "end": "380800"
  },
  {
    "text": "the indexes it should",
    "start": "380800",
    "end": "382080"
  },
  {
    "text": "but it takes forever to execute and this",
    "start": "382080",
    "end": "384160"
  },
  {
    "text": "is because this polygon which it defines",
    "start": "384160",
    "end": "386160"
  },
  {
    "text": "covers half of the world it's too much",
    "start": "386160",
    "end": "388639"
  },
  {
    "text": "so you should just",
    "start": "388639",
    "end": "389919"
  },
  {
    "text": "use your queries correctly and don't ask",
    "start": "389919",
    "end": "392080"
  },
  {
    "text": "for data you don't",
    "start": "392080",
    "end": "393280"
  },
  {
    "text": "need to uh",
    "start": "393280",
    "end": "396560"
  },
  {
    "text": "also i would like to tell that you",
    "start": "396560",
    "end": "397840"
  },
  {
    "text": "should forget entity framework",
    "start": "397840",
    "end": "399840"
  },
  {
    "text": "entity framework is a brilliant but you",
    "start": "399840",
    "end": "402560"
  },
  {
    "text": "need to",
    "start": "402560",
    "end": "403199"
  },
  {
    "text": "know how to use it and there are many",
    "start": "403199",
    "end": "404960"
  },
  {
    "text": "many people who do it wrong",
    "start": "404960",
    "end": "406479"
  },
  {
    "text": "and there are many many people who",
    "start": "406479",
    "end": "408000"
  },
  {
    "text": "struggle with the make entity",
    "start": "408000",
    "end": "409759"
  },
  {
    "text": "framework-based applications perform",
    "start": "409759",
    "end": "412319"
  },
  {
    "text": "they're quite all",
    "start": "412319",
    "end": "413520"
  },
  {
    "text": "quite often they are very very slow so",
    "start": "413520",
    "end": "416560"
  },
  {
    "text": "unless you really need",
    "start": "416560",
    "end": "417680"
  },
  {
    "text": "to do this code generation features and",
    "start": "417680",
    "end": "419520"
  },
  {
    "text": "so on use plain sql or use some",
    "start": "419520",
    "end": "423680"
  },
  {
    "text": "some other libraries which",
    "start": "423680",
    "end": "426880"
  },
  {
    "text": "do it much better than entity framework",
    "start": "426880",
    "end": "428639"
  },
  {
    "text": "for example dapper",
    "start": "428639",
    "end": "431599"
  },
  {
    "text": "and while we're talking about doppler i",
    "start": "431599",
    "end": "433759"
  },
  {
    "text": "would like to make an",
    "start": "433759",
    "end": "434880"
  },
  {
    "text": "example that you should know your",
    "start": "434880",
    "end": "436639"
  },
  {
    "text": "framework and then you should",
    "start": "436639",
    "end": "437919"
  },
  {
    "text": "read the documentation and check what",
    "start": "437919",
    "end": "439440"
  },
  {
    "text": "your framework actually is doing",
    "start": "439440",
    "end": "442240"
  },
  {
    "text": "uh dapper api for example has ability to",
    "start": "442240",
    "end": "446160"
  },
  {
    "text": "pass a list of elements to queries",
    "start": "446160",
    "end": "449599"
  },
  {
    "text": "and if you execute code which is on the",
    "start": "449599",
    "end": "451840"
  },
  {
    "text": "screen you might",
    "start": "451840",
    "end": "453599"
  },
  {
    "text": "consider that this code generates one",
    "start": "453599",
    "end": "456400"
  },
  {
    "text": "insert statement per list of data which",
    "start": "456400",
    "end": "458479"
  },
  {
    "text": "might be thousands of elements",
    "start": "458479",
    "end": "460160"
  },
  {
    "text": "which is of course wrong but in the",
    "start": "460160",
    "end": "462800"
  },
  {
    "text": "documentation or in the exam",
    "start": "462800",
    "end": "464560"
  },
  {
    "text": "in the examples you can't see it so if",
    "start": "464560",
    "end": "467360"
  },
  {
    "text": "you run this code it is very slow",
    "start": "467360",
    "end": "469120"
  },
  {
    "text": "because it",
    "start": "469120",
    "end": "469840"
  },
  {
    "text": "generates one insert statement per data",
    "start": "469840",
    "end": "472400"
  },
  {
    "text": "item",
    "start": "472400",
    "end": "473759"
  },
  {
    "text": "just to compare how slow it is i just",
    "start": "473759",
    "end": "476720"
  },
  {
    "text": "rewrote it to bulk insert for example",
    "start": "476720",
    "end": "479039"
  },
  {
    "text": "which you can see on the screen",
    "start": "479039",
    "end": "481039"
  },
  {
    "text": "and bulk insert takes 100 milliseconds",
    "start": "481039",
    "end": "484560"
  },
  {
    "text": "and the upper insert took four seconds",
    "start": "484560",
    "end": "487120"
  },
  {
    "text": "which is",
    "start": "487120",
    "end": "488000"
  },
  {
    "text": "extremely big difference for the same",
    "start": "488000",
    "end": "490240"
  },
  {
    "text": "data",
    "start": "490240",
    "end": "491120"
  },
  {
    "text": "so read your documentation and don't",
    "start": "491120",
    "end": "492720"
  },
  {
    "text": "rely on the code until you test",
    "start": "492720",
    "end": "494400"
  },
  {
    "text": "which it works",
    "start": "494400",
    "end": "497360"
  },
  {
    "start": "497000",
    "end": "497000"
  },
  {
    "text": "let's move away from databases and talk",
    "start": "497520",
    "end": "500560"
  },
  {
    "text": "a little bit about",
    "start": "500560",
    "end": "501520"
  },
  {
    "text": "code itself",
    "start": "501520",
    "end": "504240"
  },
  {
    "text": "many of us copy code from stack overflow",
    "start": "505280",
    "end": "508080"
  },
  {
    "text": "but quite often you have to check and",
    "start": "508080",
    "end": "509759"
  },
  {
    "text": "validate that it actually does what you",
    "start": "509759",
    "end": "511440"
  },
  {
    "text": "need",
    "start": "511440",
    "end": "512320"
  },
  {
    "text": "consider the very simple task filter out",
    "start": "512320",
    "end": "515120"
  },
  {
    "text": "protest entities or",
    "start": "515120",
    "end": "516640"
  },
  {
    "text": "find all elements in the list which",
    "start": "516640",
    "end": "518240"
  },
  {
    "text": "exist in another list",
    "start": "518240",
    "end": "520000"
  },
  {
    "text": "if i google this and find a post on the",
    "start": "520000",
    "end": "521760"
  },
  {
    "text": "stack overflow which is marked as",
    "start": "521760",
    "end": "523120"
  },
  {
    "text": "accepted answer",
    "start": "523120",
    "end": "524399"
  },
  {
    "text": "i get code something like this which",
    "start": "524399",
    "end": "527760"
  },
  {
    "text": "performs some link based",
    "start": "527760",
    "end": "530800"
  },
  {
    "text": "joins but maybe it's written by dba or",
    "start": "530800",
    "end": "534000"
  },
  {
    "text": "i don't know i just copied it and used",
    "start": "534000",
    "end": "536000"
  },
  {
    "text": "it",
    "start": "536000",
    "end": "537120"
  },
  {
    "text": "and it worked on tests it worked on",
    "start": "537120",
    "end": "538800"
  },
  {
    "text": "small amount of data but",
    "start": "538800",
    "end": "540399"
  },
  {
    "text": "if your list is really long it starts to",
    "start": "540399",
    "end": "542959"
  },
  {
    "text": "be really really slow",
    "start": "542959",
    "end": "545360"
  },
  {
    "text": "i started just to think how it could be",
    "start": "545360",
    "end": "547760"
  },
  {
    "text": "improved",
    "start": "547760",
    "end": "548880"
  },
  {
    "text": "i made a hash set and",
    "start": "548880",
    "end": "552000"
  },
  {
    "text": "squared against the hash set and then",
    "start": "552000",
    "end": "554080"
  },
  {
    "text": "measurements came like",
    "start": "554080",
    "end": "555600"
  },
  {
    "text": "10 milliseconds against 380 milliseconds",
    "start": "555600",
    "end": "557920"
  },
  {
    "text": "for 10 000",
    "start": "557920",
    "end": "558720"
  },
  {
    "text": "elements and this was inside the loop",
    "start": "558720",
    "end": "562000"
  },
  {
    "text": "which executes million times so you can",
    "start": "562000",
    "end": "564480"
  },
  {
    "text": "see how timing is",
    "start": "564480",
    "end": "567600"
  },
  {
    "text": "also code which is beautiful is not",
    "start": "568480",
    "end": "570800"
  },
  {
    "text": "always performant",
    "start": "570800",
    "end": "573760"
  },
  {
    "text": "many people are familiar with",
    "start": "573760",
    "end": "575760"
  },
  {
    "text": "elasticsearch or fluent apis or",
    "start": "575760",
    "end": "577920"
  },
  {
    "text": "functional programming lamp the",
    "start": "577920",
    "end": "579279"
  },
  {
    "text": "functions and so on",
    "start": "579279",
    "end": "580399"
  },
  {
    "text": "and consider it a good looking and a",
    "start": "580399",
    "end": "582959"
  },
  {
    "text": "very good",
    "start": "582959",
    "end": "584399"
  },
  {
    "text": "read so consider code like this",
    "start": "584399",
    "end": "587839"
  },
  {
    "text": "which is basically equivalent to the",
    "start": "587839",
    "end": "590000"
  },
  {
    "text": "code",
    "start": "590000",
    "end": "590959"
  },
  {
    "text": "down this is the same code",
    "start": "590959",
    "end": "594080"
  },
  {
    "text": "and the code on the upper part which",
    "start": "594080",
    "end": "597440"
  },
  {
    "text": "is much more beautiful because you don't",
    "start": "597440",
    "end": "599279"
  },
  {
    "text": "need to type much",
    "start": "599279",
    "end": "601200"
  },
  {
    "text": "you can rename a property safely you",
    "start": "601200",
    "end": "603680"
  },
  {
    "text": "don't need to",
    "start": "603680",
    "end": "605120"
  },
  {
    "text": "guess the type so it works perfectly",
    "start": "605120",
    "end": "609120"
  },
  {
    "text": "but again if you measure the timings it",
    "start": "609120",
    "end": "611519"
  },
  {
    "text": "is like 179 milliseconds against one",
    "start": "611519",
    "end": "613839"
  },
  {
    "text": "millisecond",
    "start": "613839",
    "end": "614959"
  },
  {
    "text": "which is awful and if you look inside",
    "start": "614959",
    "end": "617360"
  },
  {
    "text": "the constructor of this db value entry",
    "start": "617360",
    "end": "620480"
  },
  {
    "text": "you find something like this which is",
    "start": "620480",
    "end": "623120"
  },
  {
    "text": "very very long piece of code with",
    "start": "623120",
    "end": "624720"
  },
  {
    "text": "expressions",
    "start": "624720",
    "end": "626079"
  },
  {
    "text": "and reflections and so on and it's",
    "start": "626079",
    "end": "628880"
  },
  {
    "text": "really slow",
    "start": "628880",
    "end": "630959"
  },
  {
    "text": "and it's also inside some library so",
    "start": "630959",
    "end": "633040"
  },
  {
    "text": "it's really really impossible to debug",
    "start": "633040",
    "end": "636880"
  },
  {
    "text": "so it's lighting talk so i will not go",
    "start": "638399",
    "end": "641120"
  },
  {
    "text": "too much into details",
    "start": "641120",
    "end": "642640"
  },
  {
    "text": "but here probably should come some",
    "start": "642640",
    "end": "644320"
  },
  {
    "text": "conclusion we managed to cut",
    "start": "644320",
    "end": "646000"
  },
  {
    "text": "the response times thousand percent and",
    "start": "646000",
    "end": "647760"
  },
  {
    "text": "everything is perfect and",
    "start": "647760",
    "end": "649040"
  },
  {
    "text": "the our import process works with",
    "start": "649040",
    "end": "651200"
  },
  {
    "text": "database quite fast",
    "start": "651200",
    "end": "652800"
  },
  {
    "text": "but this is not the point of this",
    "start": "652800",
    "end": "653920"
  },
  {
    "text": "sliding talk i actually would like to",
    "start": "653920",
    "end": "656240"
  },
  {
    "text": "talk a little bit about architecture",
    "start": "656240",
    "end": "658480"
  },
  {
    "text": "when you creating some service it",
    "start": "658480",
    "end": "660959"
  },
  {
    "text": "usually starts like this",
    "start": "660959",
    "end": "662240"
  },
  {
    "text": "it's a database it's api and some",
    "start": "662240",
    "end": "664079"
  },
  {
    "text": "clients but database sometimes becomes",
    "start": "664079",
    "end": "666560"
  },
  {
    "text": "slow what you should what should you do",
    "start": "666560",
    "end": "670640"
  },
  {
    "text": "you probably scale the api first",
    "start": "670640",
    "end": "674480"
  },
  {
    "text": "it works for some point but when clients",
    "start": "674480",
    "end": "676959"
  },
  {
    "text": "become more and more",
    "start": "676959",
    "end": "678160"
  },
  {
    "text": "and more it stops working",
    "start": "678160",
    "end": "681279"
  },
  {
    "text": "so we add some cache maybe between the",
    "start": "681279",
    "end": "683040"
  },
  {
    "text": "database and apis",
    "start": "683040",
    "end": "684959"
  },
  {
    "text": "if it doesn't work it's some cache also",
    "start": "684959",
    "end": "687120"
  },
  {
    "text": "between api and clients",
    "start": "687120",
    "end": "689519"
  },
  {
    "text": "if this doesn't work you probably add",
    "start": "689519",
    "end": "691040"
  },
  {
    "text": "some elastic search as a",
    "start": "691040",
    "end": "693360"
  },
  {
    "text": "caching engine on top of the database",
    "start": "693360",
    "end": "695600"
  },
  {
    "text": "and the web jobs which",
    "start": "695600",
    "end": "696880"
  },
  {
    "text": "fills it with the data and then you read",
    "start": "696880",
    "end": "698640"
  },
  {
    "text": "from it",
    "start": "698640",
    "end": "701040"
  },
  {
    "text": "and if this doesn't work you scale",
    "start": "701040",
    "end": "702399"
  },
  {
    "text": "elastic cluster",
    "start": "702399",
    "end": "704720"
  },
  {
    "text": "and if this doesn't work you also",
    "start": "704720",
    "end": "706959"
  },
  {
    "text": "replicate this to several data centers",
    "start": "706959",
    "end": "710480"
  },
  {
    "text": "and so on and so on so on the thing",
    "start": "710480",
    "end": "712880"
  },
  {
    "text": "which you",
    "start": "712880",
    "end": "713760"
  },
  {
    "text": "really would like to have",
    "start": "713760",
    "end": "717040"
  },
  {
    "text": "is the first architecture so instead of",
    "start": "717040",
    "end": "720079"
  },
  {
    "text": "trying to",
    "start": "720079",
    "end": "721600"
  },
  {
    "text": "scale and use money on your sky",
    "start": "721600",
    "end": "723600"
  },
  {
    "text": "infrastructure",
    "start": "723600",
    "end": "725680"
  },
  {
    "text": "optimize your code optimize your",
    "start": "725680",
    "end": "727200"
  },
  {
    "text": "database optimize your",
    "start": "727200",
    "end": "729279"
  },
  {
    "text": "clients and then scale up not before",
    "start": "729279",
    "end": "733519"
  },
  {
    "text": "that's all what i have thank you",
    "start": "733519",
    "end": "738240"
  }
]