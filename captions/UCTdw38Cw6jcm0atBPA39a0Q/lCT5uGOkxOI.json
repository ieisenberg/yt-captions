[
  {
    "start": "0",
    "end": "142000"
  },
  {
    "text": "good afternoon everyone and welcome to building reactive services with functional programming I'm Rachel Reese",
    "start": "9679",
    "end": "16440"
  },
  {
    "text": "um so today I'm obviously going to speak on reactive services and by this I mean",
    "start": "16440",
    "end": "21560"
  },
  {
    "text": "generally services that adhere to the guidelines laid down by the reactive Manifesto and this is a technique that",
    "start": "21560",
    "end": "27519"
  },
  {
    "text": "we use a lot at jet.com where I work and so so a quick spiel about us uh we are",
    "start": "27519",
    "end": "33120"
  },
  {
    "text": "taking on Amazon we launched last year we're a startup we aren't actually available in Australia but we'll hire",
    "start": "33120",
    "end": "38920"
  },
  {
    "text": "Australians um but we have over 20,000 orders per day our Apple and Android apps were",
    "start": "38920",
    "end": "45280"
  },
  {
    "text": "rated really really highly uh you know 600,000 first-time buyers in our first I think that was our first two or three",
    "start": "45280",
    "end": "51520"
  },
  {
    "text": "months uh so we use a lot of Technologies we're very much a you know",
    "start": "51520",
    "end": "57760"
  },
  {
    "text": "right tool for the job kind of company we we are very heavy users of azure uh",
    "start": "57760",
    "end": "63280"
  },
  {
    "text": "and in case you noticed we are very heavy users of azure because we are taking on Amazon so we are very much not",
    "start": "63280",
    "end": "69280"
  },
  {
    "text": "heavy users of AWS but you know we use uh VMS the the",
    "start": "69280",
    "end": "74320"
  },
  {
    "text": "DNS SQL Azure active directory where we use a lot of the Azure Technologies we also use a lot of f the our back end is",
    "start": "74320",
    "end": "82439"
  },
  {
    "text": "probably 90 or 95% FP so it's we are we have sort of doubled down and we are an",
    "start": "82439",
    "end": "88840"
  },
  {
    "text": "FP shop like a lot of folks say they're a c shop we have node and angular on our front end our Python and SAS on our uh",
    "start": "88840",
    "end": "95560"
  },
  {
    "text": "for our data science and the green down here is sort of everything else we have",
    "start": "95560",
    "end": "100600"
  },
  {
    "text": "and we use some zamon we use Kafka event store microservices puppet Jenkins you",
    "start": "100600",
    "end": "106000"
  },
  {
    "text": "know we're like I said very much a right tool for the job company so this does",
    "start": "106000",
    "end": "111079"
  },
  {
    "text": "focus on FSH and on uh how how we make some of those uh our services reactive",
    "start": "111079",
    "end": "118759"
  },
  {
    "text": "so the reactive manifest and there was an updated well updated one in 2014 I don't know if there's been",
    "start": "118759",
    "end": "124880"
  },
  {
    "text": "an updated updated one uh but the you know today's modern",
    "start": "124880",
    "end": "131599"
  },
  {
    "text": "applications should be responsive message driven uh resilient and elastic",
    "start": "131599",
    "end": "137000"
  },
  {
    "text": "and I will go into what they mean with for each of those so responsive uh almost every program has",
    "start": "137000",
    "end": "145040"
  },
  {
    "start": "142000",
    "end": "330000"
  },
  {
    "text": "to handle events whether it's Clicks in the user interface or listening to sockets in the server events are really",
    "start": "145040",
    "end": "150480"
  },
  {
    "text": "just a reaction to a change of state and in fshp we have some really convenient",
    "start": "150480",
    "end": "157080"
  },
  {
    "text": "features of events they are immutable so they don't change from underneath us and you know concurrency of any form is",
    "start": "157080",
    "end": "163560"
  },
  {
    "text": "wicked difficult if you're trying to handle mutable data they are they all do Implement I observable so events are",
    "start": "163560",
    "end": "170720"
  },
  {
    "text": "value uh events are values of type I event uh of T they inherit from I",
    "start": "170720",
    "end": "176400"
  },
  {
    "text": "observable and you know this is used in other libraries the reactive extensions the because of this though importantly",
    "start": "176400",
    "end": "183040"
  },
  {
    "text": "they Implement ey disposable so we can help prevent some memory leaks they're also first class so events",
    "start": "183040",
    "end": "190920"
  },
  {
    "text": "similar to functions in a functional language events are values we can pass them around as inputs we can you know in",
    "start": "190920",
    "end": "196080"
  },
  {
    "text": "parameters and outputs we can filter them we can transform them we can they are first class and we can treat them",
    "start": "196080",
    "end": "202640"
  },
  {
    "text": "like that it's really very convenient uh they're also composable not only can we filter and transform all of these but we",
    "start": "202640",
    "end": "209200"
  },
  {
    "text": "can compose all the operations in the in the event module so similar to this here",
    "start": "209200",
    "end": "215879"
  },
  {
    "text": "we have a very simple and very real world example of a program but it it",
    "start": "215879",
    "end": "223480"
  },
  {
    "text": "basically uh loads up a little button if you hit the button uh quickly it'll only add one if you click it very slowly it",
    "start": "223480",
    "end": "230000"
  },
  {
    "text": "will add four useful example but you can see we have EV is our event that we're",
    "start": "230000",
    "end": "236000"
  },
  {
    "text": "taking in and we are transforming this we're uh taking the event piping it into",
    "start": "236000",
    "end": "241200"
  },
  {
    "text": "an event. map grabbing the date time the scan is where we handle the either the",
    "start": "241200",
    "end": "246360"
  },
  {
    "text": "four of the one then we're taking the the first item and adding that on and printing out how",
    "start": "246360",
    "end": "253560"
  },
  {
    "text": "many clicks have been set and then doing an event ad to actually set the text uh to show how many clicks have been",
    "start": "253560",
    "end": "259759"
  },
  {
    "text": "handled but we're able to you know compose all of these things pass the event around as if it's just an ordinary",
    "start": "259759",
    "end": "267960"
  },
  {
    "text": "parameter you'll also notice all of the piping that happen in F and F piping is is huge you will",
    "start": "267960",
    "end": "275320"
  },
  {
    "text": "proably see it in almost every piece of code that you will encounter in F almost not all of it but it was so important to",
    "start": "275320",
    "end": "282120"
  },
  {
    "text": "the F community that when they re then when they created a new logo a couple years ago they took their design from",
    "start": "282120",
    "end": "290120"
  },
  {
    "text": "the pipe so it's important but mapping scanning and adding uh as well as you",
    "start": "290120",
    "end": "297400"
  },
  {
    "text": "know adding choosing filtering these sorts of things are actually called combinators we can actually create our own of",
    "start": "297400",
    "end": "304440"
  },
  {
    "text": "these and this here is how we would use uh you know a a combinator that we've",
    "start": "304440",
    "end": "310680"
  },
  {
    "text": "created called using and the code at the top is how you would actually create that but because we can create our own",
    "start": "310680",
    "end": "316880"
  },
  {
    "text": "we can you know it's very extensible what we can actually do with events",
    "start": "316880",
    "end": "322520"
  },
  {
    "text": "so that was uh responsive message driven is the the more the the fun part of this",
    "start": "322520",
    "end": "330120"
  },
  {
    "start": "330000",
    "end": "804000"
  },
  {
    "text": "talk so before we move on to message driven properly let's talk about uh",
    "start": "330120",
    "end": "335360"
  },
  {
    "text": "async workflows and what those are is really just an application of F's computation expression",
    "start": "335360",
    "end": "343440"
  },
  {
    "text": "syntax uh and which is I will show you guys so",
    "start": "344919",
    "end": "352319"
  },
  {
    "text": "before we actually look at that first let's talk about async versus concurrent versus parallel a lot of folks you know",
    "start": "352319",
    "end": "358240"
  },
  {
    "text": "since since we're going to be talking talking about you know async workflows let's get that straight asynchronous is",
    "start": "358240",
    "end": "363600"
  },
  {
    "text": "just non-blocking usually it's in reference to IO operations it can be something else but it just means actually",
    "start": "363600",
    "end": "369360"
  },
  {
    "text": "non-blocking concurrent means multiple operations happening at the same time so",
    "start": "369360",
    "end": "375680"
  },
  {
    "text": "they might necess uh they're not necessarily in parallel it might be on one thread it might be a little bit of",
    "start": "375680",
    "end": "380840"
  },
  {
    "text": "one thing happening and then a little bit of the next thing then a little bit of the first thing again so they're happening basically at the same time but",
    "start": "380840",
    "end": "388280"
  },
  {
    "text": "they're not happening fully at the same time whereas uh parallel they're actually processed",
    "start": "388280",
    "end": "394840"
  },
  {
    "text": "simultaneously so there's maybe two threads and uh two things are happening at the same",
    "start": "394840",
    "end": "400599"
  },
  {
    "text": "time so the computation Expressions now since",
    "start": "400599",
    "end": "406360"
  },
  {
    "text": "uh they're basically a a mechanism that",
    "start": "406360",
    "end": "413639"
  },
  {
    "text": "will execute a a controlled series of of uh of Expressions so it's an evaluation",
    "start": "413639",
    "end": "420319"
  },
  {
    "text": "of steps there are uh a few things I am trying not to say here they are they can",
    "start": "420319",
    "end": "425759"
  },
  {
    "text": "be monads uh and this will H could scare",
    "start": "425759",
    "end": "431000"
  },
  {
    "text": "folks that are not familiar with functional programming but they're actually more generic than that they're",
    "start": "431000",
    "end": "436120"
  },
  {
    "text": "not just monads you know and that if you have seen there's there's a famous example where folks compare monads to",
    "start": "436120",
    "end": "442319"
  },
  {
    "text": "burritos and that's how you know famous blog post but computation Expressions aren't just a burrito they're an entire",
    "start": "442319",
    "end": "448280"
  },
  {
    "text": "Buffet of food there's all sorts of things you can do with them you know it can be a mon monoid or an additive monad",
    "start": "448280",
    "end": "455479"
  },
  {
    "text": "uh so lots of different things and you can come talk to me afterwards uh about",
    "start": "455479",
    "end": "461319"
  },
  {
    "text": "what those actually are but the point is we can do lots of really cool things with them so async workflows basically simply",
    "start": "461319",
    "end": "470639"
  },
  {
    "text": "make it really easy to work with async uh it's very very easy to convert uh be",
    "start": "470639",
    "end": "477000"
  },
  {
    "text": "it it ends up reading very similar to to your classic linear code and because of that it's very easy to to understand",
    "start": "477000",
    "end": "482440"
  },
  {
    "text": "what's actually going on so we take a simple example create a new web client",
    "start": "482440",
    "end": "488000"
  },
  {
    "text": "we download some data based on a a specific URI and then we out output the the uh data",
    "start": "488000",
    "end": "494759"
  },
  {
    "text": "length here a slightly longer but very similar we have a processing agent that you know",
    "start": "494759",
    "end": "501520"
  },
  {
    "text": "starts in an async Loop and in this uh well true we have here we have a New York and",
    "start": "501520",
    "end": "509520"
  },
  {
    "text": "then we have this web client and then we have an async download string and at the end we print out the a set of",
    "start": "509520",
    "end": "515680"
  },
  {
    "text": "information the main differences here are that we need to actually have the async computation expression so we need",
    "start": "515680",
    "end": "522200"
  },
  {
    "text": "the async and the curly brackets around it this is one of the few cases in F where you will actually see curly",
    "start": "522200",
    "end": "527279"
  },
  {
    "text": "brackets and then we have a let bang instead of the standard let in F let is how you sort of Define everything",
    "start": "527279",
    "end": "533440"
  },
  {
    "text": "whether it's a value whether it's a function it's that's how you start uh",
    "start": "533440",
    "end": "538680"
  },
  {
    "text": "let B will start the computation immediately whereas let within the async",
    "start": "538680",
    "end": "544519"
  },
  {
    "text": "uh workflow will create an async object for use later so the main differences",
    "start": "544519",
    "end": "550279"
  },
  {
    "text": "between the top bit of code and the bottom are that it is in the async workflow we have this let bang and then we have an async download string instead",
    "start": "550279",
    "end": "557360"
  },
  {
    "text": "of the download data which is not asynchronous so it is very",
    "start": "557360",
    "end": "562720"
  },
  {
    "text": "similar I mean let web client equal new web client the the HTML is uh very",
    "start": "562720",
    "end": "568640"
  },
  {
    "text": "similar then here we're using a print ofn instead of an output streamr but it's very very similar",
    "start": "568640",
    "end": "574920"
  },
  {
    "text": "code H and then what this would actually print out is you know it if",
    "start": "574920",
    "end": "580760"
  },
  {
    "text": "we're Google Microsoft and msdn then those are sample numbers that we would be looking at So within an async",
    "start": "580760",
    "end": "589760"
  },
  {
    "text": "workflow uh we generally have uh",
    "start": "589760",
    "end": "595399"
  },
  {
    "text": "or this yeah we'll have a a recursive Loop around this and have uh you know we",
    "start": "595440",
    "end": "602279"
  },
  {
    "text": "here we're awaiting an event so that we can grab these these clicks we also have",
    "start": "602279",
    "end": "608040"
  },
  {
    "text": "uh let uh in addition to the let syntax we have a do and a return syntax they",
    "start": "608040",
    "end": "613440"
  },
  {
    "text": "they perform similarly async sleep is very similar to uh you know a thread dot",
    "start": "613440",
    "end": "619959"
  },
  {
    "text": "sleep except it's obviously asynchronous there's also uh possibility of doing a",
    "start": "619959",
    "end": "625120"
  },
  {
    "text": "back pipe it's exactly the same as a front pipe uh which if you folks have done Powershell programming or any Linux",
    "start": "625120",
    "end": "632320"
  },
  {
    "text": "programming it's the same concept you're taking the output of the previous information and passing that in as the",
    "start": "632320",
    "end": "638200"
  },
  {
    "text": "final parameter into the next set of information uh so that's how that that",
    "start": "638200",
    "end": "644519"
  },
  {
    "text": "back Loop Works in general uh back piping is really only necessary if",
    "start": "644519",
    "end": "650279"
  },
  {
    "text": "you're trying to avoid adding parentheses so you could write async do start immediately start immediate parenthesis Loop",
    "start": "650279",
    "end": "657000"
  },
  {
    "text": "one so uh message driven since we're H let's",
    "start": "657000",
    "end": "662639"
  },
  {
    "text": "talk properly about message driven message driven is really done using the actor model in FP so what that is it's a",
    "start": "662639",
    "end": "670760"
  },
  {
    "text": "model of concurrent computations using actors the the main sort of tenants of it Dynamic creation of actors uh",
    "start": "670760",
    "end": "678120"
  },
  {
    "text": "inclusion of actor addresses in messages interaction through only through the actual message passing and no",
    "start": "678120",
    "end": "684480"
  },
  {
    "text": "restriction on message arrival order thank you",
    "start": "684480",
    "end": "690959"
  },
  {
    "text": "um middle button thank you uh so the the actor model was originally",
    "start": "692079",
    "end": "700440"
  },
  {
    "text": "created uh from it was modeled on a a uh well it was first implemented in the the",
    "start": "700440",
    "end": "706760"
  },
  {
    "text": "programming language llang and llang was first developed properly to be used uh",
    "start": "706760",
    "end": "714240"
  },
  {
    "text": "with telephone systems Ericson uh telephone and",
    "start": "714560",
    "end": "719920"
  },
  {
    "text": "the the concept of an actor model fits very very nicely with this one of the most famous uh folks who originally",
    "start": "719920",
    "end": "725639"
  },
  {
    "text": "developed the idea uh said that one actor is no actor and Carl huitt I",
    "start": "725639",
    "end": "731320"
  },
  {
    "text": "believe uh and if you think about it the idea of having One telephone is sort of",
    "start": "731320",
    "end": "736440"
  },
  {
    "text": "useless you can't really call anybody if you only have one telephone you can't really do any I mean these days you",
    "start": "736440",
    "end": "742120"
  },
  {
    "text": "could play you know use your your telephone to to for apps and and other such things you can't call somebody you",
    "start": "742120",
    "end": "747760"
  },
  {
    "text": "can't text somebody else if you're using the only telephone in the world uh so a",
    "start": "747760",
    "end": "752959"
  },
  {
    "text": "lot of these Concepts make a lot of sense if you think about telephones um well Dynamic creation of actors you can",
    "start": "752959",
    "end": "758639"
  },
  {
    "text": "create more telephones and give them away to to more people uh inclusion of actor addresses you need a telephone",
    "start": "758639",
    "end": "764560"
  },
  {
    "text": "number to be able to contact a specific telephone uh interaction only through",
    "start": "764560",
    "end": "769839"
  },
  {
    "text": "direct asynchronous message pathing passing through the only interaction with telephones really is through you",
    "start": "769839",
    "end": "776600"
  },
  {
    "text": "know calling or maybe texting or maybe Bluetooth tooth but there's we go with",
    "start": "776600",
    "end": "781880"
  },
  {
    "text": "texting you know the the only interaction there is is some form of of of texting there it's not like One",
    "start": "781880",
    "end": "787720"
  },
  {
    "text": "telephone can reach out and grab the other telephone and shake its hand uh no restriction on me message arrival order",
    "start": "787720",
    "end": "793760"
  },
  {
    "text": "again if you think about text messages sometimes you know you you go through a slightly dead dead zone and you come out",
    "start": "793760",
    "end": "800160"
  },
  {
    "text": "and you get messages all out of order from one of your friends so the actor model actors",
    "start": "800160",
    "end": "806920"
  },
  {
    "start": "804000",
    "end": "1197000"
  },
  {
    "text": "themselves the the telephones you might think of an independent computational entity contains a queue and receives and",
    "start": "806920",
    "end": "813600"
  },
  {
    "text": "processes messages that's all they really do they you know there is this you can think of them as basically a",
    "start": "813600",
    "end": "820000"
  },
  {
    "text": "mini Q another way I like to to think of the",
    "start": "820000",
    "end": "825320"
  },
  {
    "text": "actors in the actor model is sort of like a subway system or Metro this is actually the Tokyo subway but you can",
    "start": "825320",
    "end": "832120"
  },
  {
    "text": "think of each station as a single actor the trains coming in are messages and so",
    "start": "832120",
    "end": "838160"
  },
  {
    "text": "you have you know a message will come in the actor the actor will process it some of the folks will maybe stay on the",
    "start": "838160",
    "end": "844279"
  },
  {
    "text": "train continue on to another station some folks will get off and transfer trains and continue to a different section and some folks will get off the",
    "start": "844279",
    "end": "851160"
  },
  {
    "text": "train as their final destination so that's the sort of processing that will happen for each actor there's also some",
    "start": "851160",
    "end": "858040"
  },
  {
    "text": "terminology uh actors are generally theoretical uh agents are often how",
    "start": "858040",
    "end": "864720"
  },
  {
    "text": "erlang refers to them and many other folks mailbox processors are what they're actually called in F for all",
    "start": "864720",
    "end": "871199"
  },
  {
    "text": "intents and purposes they are basically the same thing um there are some differences if you really want to get",
    "start": "871199",
    "end": "877480"
  },
  {
    "text": "into the nitty-gritty but basically if you're trying to Google Basics around them they they are good to go so with",
    "start": "877480",
    "end": "885800"
  },
  {
    "text": "act with actors agents and mailbox processors but mailbox processors specifically um they use async workflows",
    "start": "885800",
    "end": "891959"
  },
  {
    "text": "to be able to handle the message passing and processing so here's a an example",
    "start": "891959",
    "end": "901880"
  },
  {
    "text": "and so you have uh all of the agents here we're creating 100,000 separate agents",
    "start": "901880",
    "end": "909480"
  },
  {
    "text": "and uh we have a mailbox processor we're starting the implementation right away we have an inbox which is where the",
    "start": "909480",
    "end": "916000"
  },
  {
    "text": "messages come into obviously and within that we have an async uh",
    "start": "916000",
    "end": "921160"
  },
  {
    "text": "workflow within the async workflow we have our Loop here we have a while true",
    "start": "921160",
    "end": "926360"
  },
  {
    "text": "we can have a uh a more functional",
    "start": "926360",
    "end": "932120"
  },
  {
    "text": "style Loop if we need to both work perfectly fine you don't have to strictly adhere to functional style and",
    "start": "932120",
    "end": "939920"
  },
  {
    "text": "again we use our let bang to receive the messages uh this obviously will wait until there is a",
    "start": "939920",
    "end": "946319"
  },
  {
    "text": "message to receive and then for every 10,000th message of the the 100,000 just",
    "start": "946319",
    "end": "951680"
  },
  {
    "text": "print yes I got a message so it's it doesn't actually do very interesting processing here but as a very basic",
    "start": "951680",
    "end": "957480"
  },
  {
    "text": "example it shows shows you the structure of how agents are what should look and",
    "start": "957480",
    "end": "962720"
  },
  {
    "text": "then to actually post we need to know uh excuse me uh for each agent in",
    "start": "962720",
    "end": "969720"
  },
  {
    "text": "all of these agents uh do an agent. post so agent here is excuse me is the actual",
    "start": "969720",
    "end": "975959"
  },
  {
    "text": "address of this agent the the telephone number that we're posting to and then the output will look something like this",
    "start": "975959",
    "end": "982399"
  },
  {
    "text": "and these don't necessarily come in order I've run this code sometimes and had you know 6,000 or six 60,000 and",
    "start": "982399",
    "end": "989920"
  },
  {
    "text": "70,000 uh messed up the other thing about agents is they're they're very",
    "start": "989920",
    "end": "995040"
  },
  {
    "text": "very lightweight I can run this code and spin up a 100 thousand of them on my laptop they're not threads so they they",
    "start": "995040",
    "end": "1001920"
  },
  {
    "text": "are much more much more lightweight so there's a few more interesting things we can do with agents",
    "start": "1001920",
    "end": "1008240"
  },
  {
    "text": "we can actually get a reply back so agents as they stand don't necessarily you send a message off to it and you may",
    "start": "1008240",
    "end": "1014680"
  },
  {
    "text": "never hear from anything again so for this for this example you know we have",
    "start": "1014680",
    "end": "1020440"
  },
  {
    "text": "our our mailbox processor we send in a string and an async reply channel of a string so that gives us a way to have a",
    "start": "1020440",
    "end": "1026600"
  },
  {
    "text": "reply there's a a channel through which we have this reply again we're starting right away and our inbox this time we're",
    "start": "1026600",
    "end": "1032120"
  },
  {
    "text": "using a recursive Loop uh and we have our our async",
    "start": "1032120",
    "end": "1037480"
  },
  {
    "text": "workflow and here when we receive the message we have to receive both the message and the reply Channel together",
    "start": "1037480",
    "end": "1043640"
  },
  {
    "text": "at once and we can do a reply channel. reply yes we actually received the message this is what it was and here",
    "start": "1043640",
    "end": "1049600"
  },
  {
    "text": "we're just uh continuing to Loop and then we're calling the loop so instead",
    "start": "1049600",
    "end": "1055320"
  },
  {
    "text": "of doing an agent. poost now we have to do an agent. poost and async reply and send in an actual reply",
    "start": "1055320",
    "end": "1061600"
  },
  {
    "text": "channel so the the important bits here are we need the async reply Channel we",
    "start": "1061600",
    "end": "1067440"
  },
  {
    "text": "need to decompose it out of the receiving the message and then actually use it to reply and then when we call",
    "start": "1067440",
    "end": "1074080"
  },
  {
    "text": "the the agent we do a post and async reply so obviously this just repeats the",
    "start": "1074080",
    "end": "1081360"
  },
  {
    "text": "message that was sent into it again very real world example uh one more thing that's",
    "start": "1081360",
    "end": "1088480"
  },
  {
    "text": "important to you know a message driven setup is actually being able to",
    "start": "1088480",
    "end": "1093960"
  },
  {
    "text": "scan an agent's queue so here we have uh this these two and uh the these",
    "start": "1093960",
    "end": "1105120"
  },
  {
    "text": "two are taken from a a very small app that uh basically uses a couple actors to",
    "start": "1105120",
    "end": "1113360"
  },
  {
    "text": "simulate uh being able to to Monitor and then cancel jobs that are being created so it",
    "start": "1113360",
    "end": "1120360"
  },
  {
    "text": "it automatically spins up about 10 of them and then holds some of them holds",
    "start": "1120360",
    "end": "1125880"
  },
  {
    "text": "all of them in the in progress agent and it's just a uh it just holds them there",
    "start": "1125880",
    "end": "1131120"
  },
  {
    "text": "it doesn't actually process them in any way so that you can scan and see what's actually happening but then you can scan",
    "start": "1131120",
    "end": "1137600"
  },
  {
    "text": "and actually cancel some of them so when they're completed uh it will we have the same",
    "start": "1137600",
    "end": "1145880"
  },
  {
    "text": "you know we have our recursive Loop we have our async we have an ID and a result coming in for the receive and",
    "start": "1145880",
    "end": "1152039"
  },
  {
    "text": "then the result of this so this is what we'll print out when it's actually uh when it when it actually finishes for",
    "start": "1152039",
    "end": "1160120"
  },
  {
    "text": "this the actual cancel job will contact the in progress agent and do a scan which basically scans the entire queue",
    "start": "1160120",
    "end": "1166280"
  },
  {
    "text": "sees what's there and sees what what options there are here we just do a",
    "start": "1166280",
    "end": "1171440"
  },
  {
    "text": "a quick source. cancel uh and if if that actually exists then run that action",
    "start": "1171440",
    "end": "1177520"
  },
  {
    "text": "that we've just created otherwise don't do anything so if we find the the job",
    "start": "1177520",
    "end": "1182760"
  },
  {
    "text": "that we're looking to cancel in once in this scan then we will actually cancel",
    "start": "1182760",
    "end": "1189880"
  },
  {
    "text": "it and then obviously the the important part here is just the scan so one major difference from llang",
    "start": "1191200",
    "end": "1199919"
  },
  {
    "start": "1197000",
    "end": "1394000"
  },
  {
    "text": "the FP agents don't actually work across process boundaries so only within the same process uh in many",
    "start": "1199919",
    "end": "1207039"
  },
  {
    "text": "cases in most cases that I have done and this is coming from somebody who doesn't regularly use ear Lang using F mailbox",
    "start": "1207039",
    "end": "1214600"
  },
  {
    "text": "processors has been completely fine it's been sufficient uh for our needs but it it obviously is not",
    "start": "1214600",
    "end": "1222640"
  },
  {
    "text": "always uh but there is a library Cricut uh which used to be called f. actor",
    "start": "1222840",
    "end": "1229280"
  },
  {
    "text": "which does handle H uh across process boundaries and and some other really",
    "start": "1229280",
    "end": "1234919"
  },
  {
    "text": "interesting things so the way you use Cricut actually is very very similar to the way",
    "start": "1234919",
    "end": "1241080"
  },
  {
    "text": "that you would use just regular mailbox processors we have here we have just you know a greeter it'll print hello world",
    "start": "1241080",
    "end": "1247760"
  },
  {
    "text": "in a couple different ways we have an actor instead of a standard async workflow then you have to spec specify a",
    "start": "1247760",
    "end": "1254280"
  },
  {
    "text": "name for it because actors need to have a name by which you can communicate with them",
    "start": "1254280",
    "end": "1259520"
  },
  {
    "text": "and then the body here will have again a recursive Loop which will handle the",
    "start": "1259520",
    "end": "1264720"
  },
  {
    "text": "messages it needs to have a message. receive because you need to receive messages into your inbox so that they",
    "start": "1264720",
    "end": "1270360"
  },
  {
    "text": "can be processed and then processing section so we we're just doing a simple",
    "start": "1270360",
    "end": "1276440"
  },
  {
    "text": "pattern match here we're massing Mass matching the message with either a hello where it prints hello a hello world",
    "start": "1276440",
    "end": "1283120"
  },
  {
    "text": "princess hello world or a specific name and then we run actor. spawn instead of",
    "start": "1283120",
    "end": "1289159"
  },
  {
    "text": "start so and the the message type obviously is a discriminated Union of",
    "start": "1289159",
    "end": "1294600"
  },
  {
    "text": "hello hello world or name of with a specific",
    "start": "1294600",
    "end": "1299480"
  },
  {
    "text": "string and then the way to call this is you call greeter with a back arrow and",
    "start": "1299679",
    "end": "1304720"
  },
  {
    "text": "name and it would print hello from F actor the way to handle remoting is",
    "start": "1304720",
    "end": "1311880"
  },
  {
    "text": "calling actor host. start you subscribe to event and then you enable remoting with you know by setting up a TCP",
    "start": "1311880",
    "end": "1319279"
  },
  {
    "text": "transport and TCP actor registry transport and uh making sure you have your endpoints and your uh registry",
    "start": "1319279",
    "end": "1326120"
  },
  {
    "text": "Discovery so it's it's not that complicated it's just",
    "start": "1326120",
    "end": "1331320"
  },
  {
    "text": "a a few actual lines to get that properly set up and then you can do fun",
    "start": "1331320",
    "end": "1338240"
  },
  {
    "text": "things like this the uh we have a a pingpong game built with",
    "start": "1338240",
    "end": "1345240"
  },
  {
    "text": "the two actors so we have an actor here this is is just the Ping actor there's a similar pong actor and they will just",
    "start": "1345240",
    "end": "1352440"
  },
  {
    "text": "loop back and and post you know ping and pong and H go back and",
    "start": "1352440",
    "end": "1359360"
  },
  {
    "text": "forth to each other but the actor internals are the exact same here as the",
    "start": "1359360",
    "end": "1364760"
  },
  {
    "text": "non- remoting so there is nothing different we're still receiving a message we're still matching that",
    "start": "1364760",
    "end": "1369919"
  },
  {
    "text": "message with a you know a pong or it's receiving a ping message from ping which",
    "start": "1369919",
    "end": "1376440"
  },
  {
    "text": "is is bad otherwise in in something some other case where it's either not pong or ping something is terrible and you",
    "start": "1376440",
    "end": "1382600"
  },
  {
    "text": "should stop uh but there is nothing here that's different when you're actually using",
    "start": "1382600",
    "end": "1388360"
  },
  {
    "text": "remoting so that's how you would handle uh message driven the next step",
    "start": "1388360",
    "end": "1396320"
  },
  {
    "start": "1394000",
    "end": "1545000"
  },
  {
    "text": "is resilient so resilient you know as it says the system should stay responsive",
    "start": "1396320",
    "end": "1402000"
  },
  {
    "text": "in the face of failure so one of the major tenants and and points of llang is",
    "start": "1402000",
    "end": "1408039"
  },
  {
    "text": "that it's it's self-healing it can uh work with itself you know know what sort of errors are happening and try to fix",
    "start": "1408039",
    "end": "1414520"
  },
  {
    "text": "itself so this obviously is very important especially to highly highly",
    "start": "1414520",
    "end": "1419840"
  },
  {
    "text": "available Mission critical systems but also to anything you know if if you have an app that's that's not responsive",
    "start": "1419840",
    "end": "1425240"
  },
  {
    "text": "that's you know throws errors all the time and can't figure out what's going on it's very annoying and obnoxious to",
    "start": "1425240",
    "end": "1431159"
  },
  {
    "text": "use so error handling is is an important part of",
    "start": "1431159",
    "end": "1437520"
  },
  {
    "text": "being a uh a resilient a responsive application so here we tend to want to",
    "start": "1437520",
    "end": "1445679"
  },
  {
    "text": "use async uh well tasks that are run using async run synchronously should report uh any of their failures back to",
    "start": "1445679",
    "end": "1453240"
  },
  {
    "text": "the controlling thread and specifically to do that we use we'd want to use async catch uh async do start with",
    "start": "1453240",
    "end": "1459559"
  },
  {
    "text": "continuations which is another way of running an async uh workflow also has an exception continuation that's another",
    "start": "1459559",
    "end": "1466320"
  },
  {
    "text": "really good way of handling uh exceptions within async there's also a supervisor pattern which is common again",
    "start": "1466320",
    "end": "1472240"
  },
  {
    "text": "in llang and very very useful with within the actor model so async catch",
    "start": "1472240",
    "end": "1481960"
  },
  {
    "text": "uh here we have it you know not the most",
    "start": "1481960",
    "end": "1487200"
  },
  {
    "text": "real world example again but this is really best for for async workflows but",
    "start": "1487200",
    "end": "1492240"
  },
  {
    "text": "here we have a uh we're doing an async start we have",
    "start": "1492240",
    "end": "1498080"
  },
  {
    "text": "two we're we're basically trying to write to a file immediately after reading and if we do this quickly enough",
    "start": "1498080",
    "end": "1503679"
  },
  {
    "text": "we'll still be reading the file when the code comes to try to write to the file it'll still be open it should fail um",
    "start": "1503679",
    "end": "1510000"
  },
  {
    "text": "and you know exception occurred reading from this file you can't access it uh so",
    "start": "1510000",
    "end": "1516039"
  },
  {
    "text": "you try to call WR to file so first we call you know read file and then immediately we call right to file and we",
    "start": "1516039",
    "end": "1522440"
  },
  {
    "text": "use an async catch and then an async run synchronously and if we there are either you know two op options either it",
    "start": "1522440",
    "end": "1528760"
  },
  {
    "text": "successfully worked which happens actually in most cases or there is an",
    "start": "1528760",
    "end": "1533799"
  },
  {
    "text": "exception because it it went too quickly but this is a a good quick way of of",
    "start": "1533799",
    "end": "1540360"
  },
  {
    "text": "handling an exception excuse me from an async",
    "start": "1540360",
    "end": "1545600"
  },
  {
    "start": "1545000",
    "end": "1823000"
  },
  {
    "text": "workflow so async start with continuations uh if if you're using H",
    "start": "1545600",
    "end": "1553399"
  },
  {
    "text": "for example a a reply then this is uh a good way of of handling that that",
    "start": "1553399",
    "end": "1561399"
  },
  {
    "text": "reply uh so we have you know our message async here we have an async post and reply handling Gathering the reply",
    "start": "1561399",
    "end": "1567679"
  },
  {
    "text": "Channel and then async start with continuations we send in the message async which is you know doing the post",
    "start": "1567679",
    "end": "1573880"
  },
  {
    "text": "and async reply and then we have three separate options there's a continuation for a successful case there's a Contin",
    "start": "1573880",
    "end": "1582520"
  },
  {
    "text": "uh an exception for when obviously there is an error or some something goes terribly wrong there's also a",
    "start": "1582520",
    "end": "1588039"
  },
  {
    "text": "cancellation case so with the the code that was running the the jobs this is the sort",
    "start": "1588039",
    "end": "1595360"
  },
  {
    "text": "of the the sort of uh handling that we would use we'd have an a cancellation",
    "start": "1595360",
    "end": "1601760"
  },
  {
    "text": "option here which would go and specifically cancel that job that was",
    "start": "1601760",
    "end": "1606880"
  },
  {
    "text": "running so another example for uh start",
    "start": "1607919",
    "end": "1613039"
  },
  {
    "text": "with continuations within the um the same the",
    "start": "1613039",
    "end": "1618200"
  },
  {
    "text": "same bit of code when we're actually doing the",
    "start": "1618200",
    "end": "1625600"
  },
  {
    "text": "scanning uh this this is the agent that will actually start start running so",
    "start": "1625600",
    "end": "1630720"
  },
  {
    "text": "from the same code where it double checks the the starting the job so it'll",
    "start": "1630720",
    "end": "1635760"
  },
  {
    "text": "specifically start the job it'll post to the in progress agent so that you know the the agent is actually in progress",
    "start": "1635760",
    "end": "1642640"
  },
  {
    "text": "and then we'll call a start with continuations on this specific job and first the successful one we have a",
    "start": "1642640",
    "end": "1649799"
  },
  {
    "text": "complete agent so we post to the completed agent when this has been successfully completed uh in this case we don't have",
    "start": "1649799",
    "end": "1657399"
  },
  {
    "text": "an error clearly nothing will ever error here but with some good then obviously this is uh you know non-production",
    "start": "1657399",
    "end": "1664480"
  },
  {
    "text": "quality code but here we would have a proper error handling here and in this",
    "start": "1664480",
    "end": "1669799"
  },
  {
    "text": "case we have the cancel exception so here's where we actually go out and cancel this this properly uh",
    "start": "1669799",
    "end": "1678039"
  },
  {
    "text": "using uh this token and we loop around but this is how we would use the the",
    "start": "1678039",
    "end": "1683760"
  },
  {
    "text": "start with continuations to be able to handle errors more",
    "start": "1683760",
    "end": "1688919"
  },
  {
    "text": "effectively uh the supervisor pattern so for supervisors",
    "start": "1688919",
    "end": "1696640"
  },
  {
    "text": "when excuse me uh when I first discovered agents",
    "start": "1699039",
    "end": "1706440"
  },
  {
    "text": "I I wanted I wanted to solve every problem with agents I thought they were very useful very neat and you know very",
    "start": "1706440",
    "end": "1711840"
  },
  {
    "text": "typical developer response I can do everything with agents I I wanted to to",
    "start": "1711840",
    "end": "1717120"
  },
  {
    "text": "write a quick sort of demo app and the problem that we currently needed to solve at the job that I was at at the",
    "start": "1717120",
    "end": "1722200"
  },
  {
    "text": "time was how to handle all of the emails that we we needed to both uh process and",
    "start": "1722200",
    "end": "1727519"
  },
  {
    "text": "specifically send out uh it was a a company that handles helping uh",
    "start": "1727519",
    "end": "1734399"
  },
  {
    "text": "brick and mortar grocery stores go online so there were were signing up and you know making sure your order was",
    "start": "1734399",
    "end": "1739760"
  },
  {
    "text": "going to be delivered there were you know please come back and order from us again all sorts of very standard emails",
    "start": "1739760",
    "end": "1745679"
  },
  {
    "text": "that you want to to send out and they need to look a little bit different so I wrote a a quick demo with five or six",
    "start": "1745679",
    "end": "1752240"
  },
  {
    "text": "agents uh where some of them would handle a list of uh emails or types",
    "start": "1752240",
    "end": "1760919"
  },
  {
    "text": "coming in and you know people that needed to have an email sent to them a template that needed that the email",
    "start": "1760919",
    "end": "1766640"
  },
  {
    "text": "needed to follow and excuse me a",
    "start": "1766640",
    "end": "1772399"
  },
  {
    "text": "one one agent that would actually specifically process all of the emails one that would actually send them and",
    "start": "1772399",
    "end": "1777960"
  },
  {
    "text": "then this one the which would actually handle the error ring so the error agent",
    "start": "1777960",
    "end": "1785480"
  },
  {
    "text": "is you know we you know I uh Alias everything to agent so the error agent",
    "start": "1785480",
    "end": "1790799"
  },
  {
    "text": "is just a a quick little agent that takes in a message that has both an integer and a system",
    "start": "1790799",
    "end": "1796000"
  },
  {
    "text": "exception and a specific agent ID and an error",
    "start": "1796000",
    "end": "1802519"
  },
  {
    "text": "message and in the application again it was a a quick little proof of concept",
    "start": "1803960",
    "end": "1812480"
  },
  {
    "text": "so oh so that one's actually next um",
    "start": "1814279",
    "end": "1819519"
  },
  {
    "text": "because I didn't actually read my code and I switched my two examples all right I'm going to come back to this one so in",
    "start": "1819519",
    "end": "1824600"
  },
  {
    "start": "1823000",
    "end": "2067000"
  },
  {
    "text": "my email type I this is my error agent and I have three",
    "start": "1824600",
    "end": "1830080"
  },
  {
    "text": "different email types here which makes a lot more sense uh and you know type one",
    "start": "1830080",
    "end": "1836000"
  },
  {
    "text": "might be thank you for your order type two is something else but just again it was a proof of proof of concept and the",
    "start": "1836000",
    "end": "1841559"
  },
  {
    "text": "point that I was going to go into the proof of concept was the way I handled simulating errors was any email address",
    "start": "1841559",
    "end": "1849039"
  },
  {
    "text": "that I needed to send to that had either an e and an N together or an A and an N together errored no matter what just to",
    "start": "1849039",
    "end": "1856679"
  },
  {
    "text": "just to double check that I was handling all of the errors properly so like I said a very real world example uh but",
    "start": "1856679",
    "end": "1863919"
  },
  {
    "text": "here we H just uh handling you know we have a a message type and uh this is how",
    "start": "1863919",
    "end": "1870200"
  },
  {
    "text": "we're going to handle changing the in one of the cases we I believe it's a",
    "start": "1870200",
    "end": "1876760"
  },
  {
    "text": "an uh yeah if it's if it's a n then if it's",
    "start": "1876760",
    "end": "1885000"
  },
  {
    "text": "if it has an e and an N together then it fails permanently if it has an A and an N together then it replaces that and",
    "start": "1885000",
    "end": "1890919"
  },
  {
    "text": "retries the entire process so here's where we change the email if it has an A",
    "start": "1890919",
    "end": "1897240"
  },
  {
    "text": "and an N together then we run this the the change function actually change it and then just return the message so",
    "start": "1897240",
    "end": "1903880"
  },
  {
    "text": "still within the error agent now we come to our actual recursive loop our async again here we're scanning the the me the",
    "start": "1903880",
    "end": "1912200"
  },
  {
    "text": "errors to see what's going on so we we first scan and then we replace if if we",
    "start": "1912200",
    "end": "1917960"
  },
  {
    "text": "can if that's uh uh this is our our action that we'll take and let we look",
    "start": "1917960",
    "end": "1924519"
  },
  {
    "text": "at all of the data that we have and we choose the the specific one and we do a",
    "start": "1924519",
    "end": "1929720"
  },
  {
    "text": "replace a uh because that's how we fix our failure uh and then we repost to the the",
    "start": "1929720",
    "end": "1937720"
  },
  {
    "text": "filtering agent which will figure out which template it needs and it will restart the entire process again but",
    "start": "1937720",
    "end": "1943360"
  },
  {
    "text": "basically it's recovering from a failure automatically because know exactly what error just",
    "start": "1943360",
    "end": "1949399"
  },
  {
    "text": "happened uh in the case this is Sim simulating something where we have no idea what just happened and something",
    "start": "1949399",
    "end": "1956279"
  },
  {
    "text": "something actually went wrong and we're going to need to actually go and discover that log the failure and come back to it",
    "start": "1956279",
    "end": "1961559"
  },
  {
    "text": "later so if the the message contains cannot send then specifically retry with",
    "start": "1961559",
    "end": "1967159"
  },
  {
    "text": "an a an If the message contains something about templating then the the issue is an and and it should fail",
    "start": "1967159",
    "end": "1975519"
  },
  {
    "text": "specifically and then run this run this synchronously so the easier example with",
    "start": "1975519",
    "end": "1981200"
  },
  {
    "text": "supervisors is a a much more simple example where",
    "start": "1981200",
    "end": "1988080"
  },
  {
    "text": "basically uh in this down here if the the the so for each of the agent we",
    "start": "1988080",
    "end": "1995120"
  },
  {
    "text": "post for each you know for each of these agents we post a message to agent whatever with an agent ID and we created",
    "start": "1995120",
    "end": "2002360"
  },
  {
    "text": "a bunch of Agents uh specifically and so if the message contains agent 90 9 and",
    "start": "2002360",
    "end": "2008039"
  },
  {
    "text": "we're creating 10,000 of them so it's actually Agent 99 and then 990 and",
    "start": "2008039",
    "end": "2014919"
  },
  {
    "text": "99,900 uh anything in there that that actually ends up failing or or that",
    "start": "2014919",
    "end": "2020240"
  },
  {
    "text": "actually ends up having Agent 99 will specifically fail again a contrived example but we'll show you that if you",
    "start": "2020240",
    "end": "2026159"
  },
  {
    "text": "understand the type of error that is happening you can attempt to fix it uh so up here anytime anytime that error",
    "start": "2026159",
    "end": "2034000"
  },
  {
    "text": "actually happens we just send to this agent error error we do an an error agent.",
    "start": "2034000",
    "end": "2039960"
  },
  {
    "text": "poost and along with the a specific agent ID and the actual error we call",
    "start": "2039960",
    "end": "2045120"
  },
  {
    "text": "agent agent. start and uh then then rerun the the whole loop at the",
    "start": "2045120",
    "end": "2051599"
  },
  {
    "text": "beginning um so any questions on supervisors",
    "start": "2051599",
    "end": "2057480"
  },
  {
    "text": "because I know that's a little much to to get",
    "start": "2057480",
    "end": "2062279"
  },
  {
    "text": "through all right uh so here so next we have",
    "start": "2062560",
    "end": "2070480"
  },
  {
    "start": "2067000",
    "end": "2498000"
  },
  {
    "text": "elastic and this is very very important elastic is uh one of the big important",
    "start": "2070480",
    "end": "2076520"
  },
  {
    "text": "features of having uh reactive Services because the the system really needs to",
    "start": "2076520",
    "end": "2081560"
  },
  {
    "text": "stay responsive under a varying workload at jet we have you know Christmas season",
    "start": "2081560",
    "end": "2086839"
  },
  {
    "text": "hits at some point and people around Thanksgiving start to to start buying",
    "start": "2086839",
    "end": "2094398"
  },
  {
    "text": "everything in the everything on the planet and and the website becomes comes under tremendous tremendous load and the",
    "start": "2094399",
    "end": "2101040"
  },
  {
    "text": "same well not the same thing but a similar thing happen you know during the course course of the work day it's the",
    "start": "2101040",
    "end": "2107400"
  },
  {
    "text": "load is a lot lighter at 9:00 a.m. than it is around 2 p.m people get bored and start shopping",
    "start": "2107400",
    "end": "2114560"
  },
  {
    "text": "and you know it's do you have to hit those after lunch Blues somehow you go out and make sure your your groceries",
    "start": "2115359",
    "end": "2121200"
  },
  {
    "text": "are handled or whatever you need and then you come back to work for a little while uh but we need to be able to",
    "start": "2121200",
    "end": "2126400"
  },
  {
    "text": "handle all of this workload specifically and so you know reative systems need to to react to all",
    "start": "2126400",
    "end": "2133280"
  },
  {
    "text": "these changes increasing or decreasing these resour resources uh and you know automatically so you",
    "start": "2133280",
    "end": "2141160"
  },
  {
    "text": "need to know how to handle all of that and especially with agents it's very very very easy to scale agents on demand",
    "start": "2141160",
    "end": "2149319"
  },
  {
    "text": "so here we're looking at a very similar example to the the first example",
    "start": "2149319",
    "end": "2155720"
  },
  {
    "text": "that we had um um that uh here in the middle we have a processing agent but here we have our",
    "start": "2155720",
    "end": "2162240"
  },
  {
    "text": "actual URL list and the the square brackets is how you uh Define a list in",
    "start": "2162240",
    "end": "2168319"
  },
  {
    "text": "F uh so we have a list of tupal so we have microsoft.com msdn and Google",
    "start": "2168319",
    "end": "2174400"
  },
  {
    "text": "strings of identifiers and then strings of the actual URLs uh fun fact when you list the the items",
    "start": "2174400",
    "end": "2183760"
  },
  {
    "text": "in a list out on their own specific lines you don't actually need the semicolon uh if you had listed those all",
    "start": "2183760",
    "end": "2189720"
  },
  {
    "text": "on one line then you still would need the",
    "start": "2189720",
    "end": "2194240"
  },
  {
    "text": "semicolon so we first have the processing agent and this takes in the a",
    "start": "2196000",
    "end": "2203160"
  },
  {
    "text": "tupal for its message which is going to be uh the string for the name and the",
    "start": "2203160",
    "end": "2208800"
  },
  {
    "text": "the URL and for our inbox you know we we",
    "start": "2208800",
    "end": "2214240"
  },
  {
    "text": "start it right away and we have our inbox and our our async Loop this time we're using a w true uh like I said it",
    "start": "2214240",
    "end": "2221280"
  },
  {
    "text": "really doesn't matter if you're using recursive or not so we Ed our let",
    "start": "2221280",
    "end": "2226359"
  },
  {
    "text": "bang here we're we're decomposing out both the name of the the system and the URL we're doing an inbox received to get",
    "start": "2226359",
    "end": "2233400"
  },
  {
    "text": "those we're creating a a specific URI from the URL we're creating a brand new",
    "start": "2233400",
    "end": "2239240"
  },
  {
    "text": "web client and again we're we're using let bang to asynchronously download the",
    "start": "2239240",
    "end": "2246680"
  },
  {
    "text": "string from of all of the information the HTML on that that page and",
    "start": "2246680",
    "end": "2254200"
  },
  {
    "text": "then excuse me and then just printing out the characters that have uh that",
    "start": "2255800",
    "end": "2262200"
  },
  {
    "text": "were read for the the length of the HTML for that you know read so many characters for a specific",
    "start": "2262200",
    "end": "2269640"
  },
  {
    "text": "name so the scaling agent then if we wanted to do all three of these at the",
    "start": "2269640",
    "end": "2276079"
  },
  {
    "text": "same time rather than one running one at a time or maybe we have a list of 500",
    "start": "2276079",
    "end": "2281440"
  },
  {
    "text": "websites that we need to get through and that's going to take a lot a lot more time to handle those all at once instead",
    "start": "2281440",
    "end": "2287480"
  },
  {
    "text": "we create this scaling agent that",
    "start": "2287480",
    "end": "2292640"
  },
  {
    "text": "specifically you know takes an agent and then uh within our async Loop we have uh",
    "start": "2292640",
    "end": "2298560"
  },
  {
    "text": "an inbox receive we take the the the message that",
    "start": "2298560",
    "end": "2303920"
  },
  {
    "text": "that we've gotten and then iterate through the the whole list so for each",
    "start": "2303920",
    "end": "2309160"
  },
  {
    "text": "one of these items in the list we create a brand new agent which handles the processing for each one that which just",
    "start": "2309160",
    "end": "2316440"
  },
  {
    "text": "is an instance of this processing agent and post the information to that new",
    "start": "2316440",
    "end": "2322920"
  },
  {
    "text": "agent so we're just you know iterating through each one of those we could also",
    "start": "2322920",
    "end": "2328560"
  },
  {
    "text": "if you wanted do uh make this an array and do an array. parallel and process",
    "start": "2328560",
    "end": "2334359"
  },
  {
    "text": "those in parallel but the point is we're automatically spinning up a new instance of this processing agent for each item",
    "start": "2334359",
    "end": "2341280"
  },
  {
    "text": "in this list just at well as we need to we could do this for you know if there are 50,000 items in a list we can spin",
    "start": "2341280",
    "end": "2348079"
  },
  {
    "text": "up a new actor for each one of them handle all of that asynchronously and then come back and it's it's a lot",
    "start": "2348079",
    "end": "2354280"
  },
  {
    "text": "easier to to automatically spin this up and that's an important feature again of",
    "start": "2354280",
    "end": "2360119"
  },
  {
    "text": "reactive Services uh and then from here then we just post the entire list to the scaling",
    "start": "2360119",
    "end": "2367599"
  },
  {
    "text": "agent which handles the scaling for us uh by calling each one of the processing",
    "start": "2367599",
    "end": "2372640"
  },
  {
    "text": "agents any questions on the scaling",
    "start": "2372640",
    "end": "2379880"
  },
  {
    "text": "yes this will if the URL list is a different size each time then this will",
    "start": "2383560",
    "end": "2389680"
  },
  {
    "text": "automatically uh account for that so if you have three items in the list the first time and a thousand the second",
    "start": "2389680",
    "end": "2395079"
  },
  {
    "text": "time then it's not necess Neary to spin up a thousand each time yeah it's it just automatically will handle",
    "start": "2395079",
    "end": "2401400"
  },
  {
    "text": "that and since I forgot to repeat the question sorry uh the question was just",
    "start": "2401400",
    "end": "2408440"
  },
  {
    "text": "what the difference was between those uh anything",
    "start": "2408440",
    "end": "2414880"
  },
  {
    "text": "yes uh what if we wanted to talk around limiting how many of those scaling agents we can have at each time so if we",
    "start": "2417319",
    "end": "2424480"
  },
  {
    "text": "have say a network and we got a million in those list if we do a million HP requests across a firewall we'll",
    "start": "2424480",
    "end": "2430319"
  },
  {
    "text": "probably break the firewall is there a me is there a mechanism there that you can spef throttle thank you the question",
    "start": "2430319",
    "end": "2437200"
  },
  {
    "text": "was is there a mechanism to specifically limit those instead um you could you",
    "start": "2437200",
    "end": "2442400"
  },
  {
    "text": "could do the same specifically uh spin up an exact number",
    "start": "2442400",
    "end": "2447520"
  },
  {
    "text": "you could also yeah you could do a another um like",
    "start": "2447520",
    "end": "2455280"
  },
  {
    "text": "the the uh list comprehension the four agent in agents you could do something like four one to 10 until the agents run",
    "start": "2455280",
    "end": "2464560"
  },
  {
    "text": "or you know that so yes there is um I would say by using a list comprehension",
    "start": "2464560",
    "end": "2469880"
  },
  {
    "text": "and just like setting a maximum and running through that until you've utilized as many as you need",
    "start": "2469880",
    "end": "2478480"
  },
  {
    "text": "um there's not a specific builtin mechanism that which I think is what you're looking for so there are ways",
    "start": "2478480",
    "end": "2485359"
  },
  {
    "text": "around it but nothing very yeah yeah nothing pretty",
    "start": "2485359",
    "end": "2491640"
  },
  {
    "text": "um uh any other questions all right uh I went a little",
    "start": "2491640",
    "end": "2499000"
  },
  {
    "start": "2498000",
    "end": "2551000"
  },
  {
    "text": "bit quick more quickly than I wanted so I was hoping you guys had more",
    "start": "2499000",
    "end": "2504000"
  },
  {
    "text": "questions uh so some general resources for fshp specifically um f.org is a",
    "start": "2504200",
    "end": "2512520"
  },
  {
    "text": "fabulous resource um the there's all sorts of information on how to get",
    "start": "2512520",
    "end": "2518119"
  },
  {
    "text": "started on the foundation itself the foundation is also running a they're going to start back up soon a mentoring",
    "start": "2518119",
    "end": "2525440"
  },
  {
    "text": "program they help out user groups I know they have a speaker program so speakers can can go out to the different user",
    "start": "2525440",
    "end": "2531640"
  },
  {
    "text": "groups so if you guys either speak or run a user group or want to definitely look into that uh the Twitter hash fshp",
    "start": "2531640",
    "end": "2539079"
  },
  {
    "text": "is also fairly well monitored still a lot of folks will will jump in and if you hashtag something with FP",
    "start": "2539079",
    "end": "2548079"
  },
  {
    "text": "uh hash FP I have personally never tried it",
    "start": "2548079",
    "end": "2556040"
  },
  {
    "text": "I yeah it felt weird to me and then I discovered that people just spell out the sharp so",
    "start": "2556040",
    "end": "2563760"
  },
  {
    "text": "yeah that as far as I know that is not one that is monitored is the hashtag F",
    "start": "2563760",
    "end": "2568880"
  },
  {
    "text": "hashtag um there is an F channel on the functional programming slack uh there is",
    "start": "2568880",
    "end": "2574359"
  },
  {
    "text": "also one run by shp.org that I didn't list here as soon as you join the organization and it's free to join uh",
    "start": "2574359",
    "end": "2581760"
  },
  {
    "text": "you will get an invite to the f.org fshp uh slack Channel which is a really",
    "start": "2581760",
    "end": "2589079"
  },
  {
    "text": "a really great resource as well I would also highly highly recommend FP for Fun and Profit it's",
    "start": "2589079",
    "end": "2596119"
  },
  {
    "text": "Scott flashen is one a fabulous speaker if you haven't seen him speak definitely go check out his videos um but even even",
    "start": "2596119",
    "end": "2604920"
  },
  {
    "text": "if you don't do that go check out his website he explains a lot of a lot of f Concepts everything really",
    "start": "2604920",
    "end": "2612480"
  },
  {
    "text": "from very very basic ideas to very very complicated like he has a 13p part",
    "start": "2612480",
    "end": "2617960"
  },
  {
    "text": "section on monads I think it's it's amazing uh but even even basically like why is it",
    "start": "2617960",
    "end": "2625200"
  },
  {
    "text": "important that f is immutable by default uh so he he he hits all levels it's very",
    "start": "2625200",
    "end": "2630319"
  },
  {
    "text": "easy to understand very very very good material there's also f sharp weekly",
    "start": "2630319",
    "end": "2637040"
  },
  {
    "text": "it's just a weekly blog post digest that you can get uh that lists out the latest",
    "start": "2637040",
    "end": "2644119"
  },
  {
    "text": "uh you know new releases of fshp projects new talks or blog posts that",
    "start": "2644119",
    "end": "2650720"
  },
  {
    "text": "have come out lately just basically a a weekly update of the F Community it's a",
    "start": "2650720",
    "end": "2655839"
  },
  {
    "text": "a really useful resource to to keep an eye on what's actually happening with the rest of the community uh there's a",
    "start": "2655839",
    "end": "2663240"
  },
  {
    "text": "few uh mailbox processors in general a few really good blog posts here the the",
    "start": "2663240",
    "end": "2668760"
  },
  {
    "text": "C asent gachas is excuse me",
    "start": "2668760",
    "end": "2674839"
  },
  {
    "text": "is is by Tomas Petra he wrote he wrote a blog post",
    "start": "2674839",
    "end": "2682040"
  },
  {
    "start": "2676000",
    "end": "2748000"
  },
  {
    "text": "after one of his I don't remember which one one of his trips to Microsoft uh",
    "start": "2682040",
    "end": "2687559"
  },
  {
    "text": "probably for an MVP Summit but to talk to know he was talking there was a a",
    "start": "2687559",
    "end": "2692839"
  },
  {
    "text": "talk there on some of the folks by some of the the folks I think that had worked on C async and they were just going over",
    "start": "2692839",
    "end": "2700680"
  },
  {
    "text": "a few you know make sure you really understand what you're doing if you think you're typing if you think you're working with this bit of code you you",
    "start": "2700680",
    "end": "2707160"
  },
  {
    "text": "could accidentally do this because it's a little unclear here and Tomas went through in his blog post and for each I",
    "start": "2707160",
    "end": "2713960"
  },
  {
    "text": "think each one of the things that they had presented in their their talk he went through and showed that basically",
    "start": "2713960",
    "end": "2719640"
  },
  {
    "text": "FSH the the F compiler prevents you from actually making any of those mistakes",
    "start": "2719640",
    "end": "2724880"
  },
  {
    "text": "the and I don't definitely go go check out the series there's a it's a two or three blog post series but in each case",
    "start": "2724880",
    "end": "2731960"
  },
  {
    "text": "it's in almost every case it's basically not possible to make that same mistake because the F compiler cleans up after",
    "start": "2731960",
    "end": "2738280"
  },
  {
    "text": "you and was like wait a second I don't think that's actually what you mean go check something else is that a",
    "start": "2738280",
    "end": "2743640"
  },
  {
    "text": "question sure hi sorry I'm I'm actually quite new",
    "start": "2743640",
    "end": "2750960"
  },
  {
    "text": "to functional programming I'm getting my head around it uh obviously very strong and objectoriented um there was a",
    "start": "2750960",
    "end": "2756440"
  },
  {
    "text": "previous talk about pure function and impure functions and the testability of",
    "start": "2756440",
    "end": "2762720"
  },
  {
    "text": "pure functions um just wondering if there's the same kind of concept of like visibility like private public for all",
    "start": "2762720",
    "end": "2769359"
  },
  {
    "text": "those functions or I mean how how do you protect uh pure function so that the entire application doesn't access it and",
    "start": "2769359",
    "end": "2775920"
  },
  {
    "text": "do what it wants with it you can do uh you can set things as private uh I have",
    "start": "2775920",
    "end": "2781880"
  },
  {
    "text": "um there's I tend not to as much because a",
    "start": "2781880",
    "end": "2788079"
  },
  {
    "text": "lot as an evangelist a lot of the code I write is actually demo code um but it's absolutely possible and it is obviously",
    "start": "2788079",
    "end": "2795200"
  },
  {
    "text": "recommended in many cases I know there's private public there's",
    "start": "2795200",
    "end": "2801200"
  },
  {
    "text": "um yeah I I definitely there are ways absolutely and",
    "start": "2801559",
    "end": "2808119"
  },
  {
    "text": "I think for I think almost everything actually corresponds to the C uh uh",
    "start": "2808119",
    "end": "2817839"
  },
  {
    "text": "ways but don't quote me on that because it's been a really long time since I've actually looked at C",
    "start": "2817839",
    "end": "2824960"
  },
  {
    "text": "also anyone okay um so there is an FP control reactive uh",
    "start": "2825280",
    "end": "2832839"
  },
  {
    "text": "project definitely check out the Cricut project as well it's a really really good there's also additional actor",
    "start": "2832839",
    "end": "2838319"
  },
  {
    "text": "Library based uh projects um that that also are really really good",
    "start": "2838319",
    "end": "2845079"
  },
  {
    "text": "and very well maintained within the f space I happen to show off Cricket but don't you know don't take that as an",
    "start": "2845079",
    "end": "2850839"
  },
  {
    "text": "endorsement of that over any of the others uh but definitely go try to find the the C asnc goa's post and that is it",
    "start": "2850839",
    "end": "2859839"
  },
  {
    "text": "for me if there are any other other",
    "start": "2859839",
    "end": "2863440"
  },
  {
    "text": "questions thank you very",
    "start": "2865680",
    "end": "2869160"
  },
  {
    "text": "much",
    "start": "2870880",
    "end": "2873880"
  }
]