[
  {
    "text": "okay uh welcome everyone and thanks for joining my talk uh so today I'm going to talk about",
    "start": "6240",
    "end": "14000"
  },
  {
    "text": "ebpf and try and give a small introduction to it uh during the talk I I'm probably",
    "start": "14000",
    "end": "21760"
  },
  {
    "text": "going to switch between calling it ebpf and BPF but I will always mean the extended BPF not the classical one if",
    "start": "21760",
    "end": "29119"
  },
  {
    "text": "you're familiar with the differ differences so I'm Martin I work in",
    "start": "29119",
    "end": "34360"
  },
  {
    "text": "Cisco been there for many many years now uh basically all I do is very Linux Bas",
    "start": "34360",
    "end": "40440"
  },
  {
    "text": "these days uh and so I like digging into Fun Linux",
    "start": "40440",
    "end": "46360"
  },
  {
    "text": "apis like BPF but in this case I really have no idea what I'm doing I decided to",
    "start": "46360",
    "end": "52840"
  },
  {
    "text": "submit the talk uh on something I wanted to learn something about uh so I learned a lot",
    "start": "52840",
    "end": "61719"
  },
  {
    "text": "uh I'm not really sure how much the abstract meets the actual content",
    "start": "61719",
    "end": "67400"
  },
  {
    "text": "anymore CU I started writing and stuff changed uh hopefully it's not too far off but yeah I wanted to experiment with",
    "start": "67400",
    "end": "74799"
  },
  {
    "text": "ebpf and uh the way to allocate some time for that is to submit a talk",
    "start": "74799",
    "end": "80640"
  },
  {
    "text": "obviously uh which might in hindsight have been a mistake though it was fun",
    "start": "80640",
    "end": "86360"
  },
  {
    "text": "but don't don't use any of the code in this presentation uh first of it's presentation codee there's a lot of",
    "start": "86360",
    "end": "93119"
  },
  {
    "text": "error checking and stuff missing uh it will blow up and there's probably way better ways of doing some of the stuff",
    "start": "93119",
    "end": "100159"
  },
  {
    "text": "I'm doing uh but hopefully it'll get you give you an insight into how you can",
    "start": "100159",
    "end": "105360"
  },
  {
    "text": "start using at least parts of or some of the systems that use ebpf to to do cool",
    "start": "105360",
    "end": "115240"
  },
  {
    "text": "stuff so what is EBP",
    "start": "116520",
    "end": "121759"
  },
  {
    "text": "and the short of it is there's a way to program the kernel or let yeah program",
    "start": "121759",
    "end": "127119"
  },
  {
    "text": "the kernel without modifying the kernel source code or any kernel module source",
    "start": "127119",
    "end": "133040"
  },
  {
    "text": "code uh ebpf in itself is also a programming",
    "start": "133040",
    "end": "138800"
  },
  {
    "text": "language uh and the programs that you make with it they're event driven so",
    "start": "138800",
    "end": "144879"
  },
  {
    "text": "basically what you do from the user space is that you create a binary",
    "start": "144879",
    "end": "150760"
  },
  {
    "text": "program which is sent into the kernel and you hook that program to some kernel",
    "start": "150760",
    "end": "156319"
  },
  {
    "text": "defined hook and then when that hook hits in the kernel for instance you're opening a",
    "start": "156319",
    "end": "162239"
  },
  {
    "text": "file then your program will evaluate so in the kernel there's a interpreter for",
    "start": "162239",
    "end": "170200"
  },
  {
    "text": "this programming language there's also a jit compiler which is pretty cool uh and the big gain of this is that",
    "start": "170200",
    "end": "178000"
  },
  {
    "text": "you can do you can add features to the kernel meaning they will run without",
    "start": "178000",
    "end": "183760"
  },
  {
    "text": "having to like cross the kernel us space barrier uh you can modify the kernel",
    "start": "183760",
    "end": "190560"
  },
  {
    "text": "without having to patch the kernel then compile the kernel or even worse if you",
    "start": "190560",
    "end": "196280"
  },
  {
    "text": "want to make this available for everyone you would have to patch the kernel try and",
    "start": "196280",
    "end": "203040"
  },
  {
    "text": "Upstream that kernel patch go probably quite a few rounds eventually get Upstream into the",
    "start": "203040",
    "end": "210760"
  },
  {
    "text": "kernel and then you have to wait for every Dr to pick that new kernel version up which is a long way so with this you",
    "start": "210760",
    "end": "218640"
  },
  {
    "text": "can just hey I have this ebpf program send it out to people and they can run",
    "start": "218640",
    "end": "225560"
  },
  {
    "text": "it now running binaries inside of the kernel that comes in from user space",
    "start": "227840",
    "end": "233319"
  },
  {
    "text": "sounds like a very scary thing and it kind of is because the kernel is something you want to check if the",
    "start": "233319",
    "end": "240640"
  },
  {
    "text": "kernel goes down everything goes down so can I harm the kernel or get",
    "start": "240640",
    "end": "247480"
  },
  {
    "text": "information from the kernel that you shouldn't have access to uh well first of the loading of ebpf",
    "start": "247480",
    "end": "255200"
  },
  {
    "text": "programs are they need uh well correct capabilities which in this C case is uh",
    "start": "255200",
    "end": "261639"
  },
  {
    "text": "cap BBF uh in most cases and on most",
    "start": "261639",
    "end": "267160"
  },
  {
    "text": "systems you need this capability you can't there are some exceptions if you compile the kernel in a way that allows",
    "start": "267160",
    "end": "273360"
  },
  {
    "text": "it to run unprivileged BPF programs in some sub",
    "start": "273360",
    "end": "278479"
  },
  {
    "text": "subsystems but generally cap BPF is necessary but when you load if you have",
    "start": "278479",
    "end": "285360"
  },
  {
    "text": "the correct capabilities and you load a program a ebpf program into the kernel",
    "start": "285360",
    "end": "291479"
  },
  {
    "text": "there's some checks happening so there's a verifier which",
    "start": "291479",
    "end": "297759"
  },
  {
    "text": "checks that uh it tries to check at least that the that it doesn't crash or harm the",
    "start": "297759",
    "end": "303560"
  },
  {
    "text": "system and some of the limitations on this is actually in the programming language itself and its",
    "start": "303560",
    "end": "311160"
  },
  {
    "text": "limitations uh it checks that you're not using any uninitialized memory it checks",
    "start": "311160",
    "end": "316360"
  },
  {
    "text": "that you're within a size limit of the program size and it checks that your program has",
    "start": "316360",
    "end": "324880"
  },
  {
    "text": "a finite complexity meaning that at some point you can prove that this program will finish so you can't have infinite",
    "start": "324880",
    "end": "331919"
  },
  {
    "text": "Loops you can't you need actual balance on your Loops for this to even",
    "start": "331919",
    "end": "339039"
  },
  {
    "text": "work it's also running in a in a protected execution context so you only",
    "start": "339039",
    "end": "345280"
  },
  {
    "text": "have access to the memory that is sent into your hook or you have to use some",
    "start": "345280",
    "end": "350960"
  },
  {
    "text": "helper functions to gain access to memory outside of your protected memory",
    "start": "350960",
    "end": "358240"
  },
  {
    "text": "region uh so that would then go into the kernel memory and do a lot of checking",
    "start": "358240",
    "end": "365360"
  },
  {
    "text": "before copying that data structure into something you have access",
    "start": "365360",
    "end": "371199"
  },
  {
    "text": "to uh and there's the memory for the program itself is as long as as soon as",
    "start": "371199",
    "end": "376960"
  },
  {
    "text": "it's passed the verifier it's set to read only so you can't modify a running",
    "start": "376960",
    "end": "382000"
  },
  {
    "text": "ebf or a loaded ebpf program anymore so there's a lot of it's It's",
    "start": "382000",
    "end": "388440"
  },
  {
    "text": "Gone some thought into this they are trying to save your system even though you're at shitty BPF programs",
    "start": "388440",
    "end": "395120"
  },
  {
    "text": "there hopefully you won't uh be able to harm the",
    "start": "395120",
    "end": "400840"
  },
  {
    "text": "kernel but why is this a cool feature or a set of really cool features uh like I",
    "start": "401520",
    "end": "408199"
  },
  {
    "text": "said you you were able you are now able to do actual kernel features meaning in",
    "start": "408199",
    "end": "415280"
  },
  {
    "text": "this case avoiding sending stuff up and down the user space kernel barrier which is",
    "start": "415280",
    "end": "422960"
  },
  {
    "text": "expensive and you can do it for stuff like monitoring and tracing processes you can make decisions based",
    "start": "422960",
    "end": "430120"
  },
  {
    "text": "on what's happening on the system in these cases as well uh you can do the same for",
    "start": "430120",
    "end": "435720"
  },
  {
    "text": "networking so this again this can be used to for instance collect data on how",
    "start": "435720",
    "end": "441039"
  },
  {
    "text": "a system is used or it can be as a protective layer to make sure that only",
    "start": "441039",
    "end": "446560"
  },
  {
    "text": "certain processes can do certain things or they can uh make decisions on the",
    "start": "446560",
    "end": "453319"
  },
  {
    "text": "networking layer for instance you can proxy everything through through something el else without the user space",
    "start": "453319",
    "end": "459440"
  },
  {
    "text": "even knowing because every decision like this happens in the kernel",
    "start": "459440",
    "end": "464479"
  },
  {
    "text": "space and also all the cool kids in the kernel space these days uses ebpf so",
    "start": "464479",
    "end": "469960"
  },
  {
    "text": "that's a good reason um after I submitted after I submitted this talk we",
    "start": "469960",
    "end": "476560"
  },
  {
    "text": "got an actual use case at work for uh doing this even so what we wanted to do",
    "start": "476560",
    "end": "482199"
  },
  {
    "text": "was when a specific process is exact so basically when you create a specific",
    "start": "482199",
    "end": "487759"
  },
  {
    "text": "process we want to put that into a memory C group to limit the available",
    "start": "487759",
    "end": "493919"
  },
  {
    "text": "memory for it to have it not kill all our servers and that's the use case I'll be",
    "start": "493919",
    "end": "501000"
  },
  {
    "text": "using in the presentation so we'll kind of go step by step through how to do something like",
    "start": "501000",
    "end": "507560"
  },
  {
    "text": "that this is a my overview of ebpf and how it's loaded",
    "start": "507840",
    "end": "514279"
  },
  {
    "text": "into kernel and what happens so we start in the user space uh where the green",
    "start": "514279",
    "end": "519440"
  },
  {
    "text": "program here is actually the one loading the ebpf program into the kernel using",
    "start": "519440",
    "end": "526279"
  },
  {
    "text": "the BPF cisal where's my pointer yeah it's gone uh then that runs through the",
    "start": "526279",
    "end": "532080"
  },
  {
    "text": "verifier if it's verified it goes through the jit compiler and then we have a ebbf program that's loaded into",
    "start": "532080",
    "end": "538720"
  },
  {
    "text": "the kernel and it's also created some maps now these maps are the communications between user space and",
    "start": "538720",
    "end": "546000"
  },
  {
    "text": "kernel space or between user space and your ebpf program",
    "start": "546000",
    "end": "551880"
  },
  {
    "text": "specifically now this ebpf program is hooked into one or several of the",
    "start": "551880",
    "end": "557279"
  },
  {
    "text": "hooks on the right here and you can have hooks on like system calls that's been",
    "start": "557279",
    "end": "562399"
  },
  {
    "text": "that's being executed so for every time someone opens a file you can you can",
    "start": "562399",
    "end": "567959"
  },
  {
    "text": "monitor that the same with devices that are being accessed or like I said",
    "start": "567959",
    "end": "573959"
  },
  {
    "text": "networking and you can also put uh ebf program on a cgroup itself to for",
    "start": "573959",
    "end": "581000"
  },
  {
    "text": "instance manage traffic Network traffic for that specific cgroup then there's a lot of these hooks",
    "start": "581000",
    "end": "587760"
  },
  {
    "text": "in the kernel uh yeah and then when a program",
    "start": "587760",
    "end": "594040"
  },
  {
    "text": "basically hits one of these hooks it goes into kernel space it opens up a file or a device or send a packet on the",
    "start": "594040",
    "end": "600360"
  },
  {
    "text": "network then your ebpf program which is not part of the calling program is doing",
    "start": "600360",
    "end": "607800"
  },
  {
    "text": "its",
    "start": "607800",
    "end": "610000"
  },
  {
    "text": "evaluation there's quite a few tools that you should look into when uh when you want",
    "start": "613240",
    "end": "620959"
  },
  {
    "text": "to make an ebpf program so lib BF is the",
    "start": "620959",
    "end": "626279"
  },
  {
    "text": "C library that I'm using to to to basically make life a lot easier uh when",
    "start": "626279",
    "end": "632760"
  },
  {
    "text": "creating ebpf program it does a lot of lookups for finding maps and it it does a lot of stuff for me uh BPF",
    "start": "632760",
    "end": "642040"
  },
  {
    "text": "tool is a tool for both inspecting and manipulating ebpf programs and it'll",
    "start": "642040",
    "end": "648399"
  },
  {
    "text": "also help out by making uh a skeleton for instance which is very easy to use from your user Space",
    "start": "648399",
    "end": "655959"
  },
  {
    "text": "Program to get access to the maps and to create and load the",
    "start": "655959",
    "end": "662240"
  },
  {
    "text": "programs uh BCC I haven't used but is a toolkit for creating ebpf programs uh",
    "start": "662240",
    "end": "668240"
  },
  {
    "text": "for instance with python or Lua so you have to write the C code and",
    "start": "668240",
    "end": "673760"
  },
  {
    "text": "then uh BCC will will facilitate uh compiling the ccod to BPF and send it",
    "start": "673760",
    "end": "681639"
  },
  {
    "text": "over to the kernel and clang is very nice uh it has",
    "start": "681639",
    "end": "686880"
  },
  {
    "text": "a BPF back end so you can write C code and get out a BPF program on instead of using lot of",
    "start": "686880",
    "end": "694920"
  },
  {
    "text": "Kernel macros to create a binary that is where the code you write is almost",
    "start": "694920",
    "end": "700760"
  },
  {
    "text": "completely unreadable and doing uh a bit more advanced stuff",
    "start": "700760",
    "end": "706240"
  },
  {
    "text": "is definitely not advisable uh netlink is a current API",
    "start": "706240",
    "end": "712959"
  },
  {
    "text": "that allows you to in this case it's a socket type that allows you to attach a BPF program to uh",
    "start": "712959",
    "end": "720240"
  },
  {
    "text": "a kernel interface or a specific part in the networking stack um it's not recommended to do this directly but use",
    "start": "720240",
    "end": "726760"
  },
  {
    "text": "the IP tool instead which uses netlink to to do the same things because what",
    "start": "726760",
    "end": "732200"
  },
  {
    "text": "you'll figure out when you start looking into ebpf is that there are many Hooks",
    "start": "732200",
    "end": "737720"
  },
  {
    "text": "and a lot of these hooks have different ways of attaching a program so doing ebpf for system calls",
    "start": "737720",
    "end": "746720"
  },
  {
    "text": "versus for networking the way to attach to whatever you need to attach to is",
    "start": "746720",
    "end": "753240"
  },
  {
    "text": "different uh let's start with a small example of a BPF program and this is a",
    "start": "755079",
    "end": "761279"
  },
  {
    "text": "full BPF program um now this SEC",
    "start": "761279",
    "end": "768959"
  },
  {
    "text": "macro defines uh a section in the BPF program to use basically this defines",
    "start": "768959",
    "end": "775360"
  },
  {
    "text": "the hook so I'm hooking into the uh Trace Point SC sced process exec so",
    "start": "775360",
    "end": "781920"
  },
  {
    "text": "every time uh something runs the exec sus call",
    "start": "781920",
    "end": "787800"
  },
  {
    "text": "this will run uh now the memory context I get for",
    "start": "787800",
    "end": "795519"
  },
  {
    "text": "this Trace point is the trace event raw sced process exec which has some members",
    "start": "795519",
    "end": "801360"
  },
  {
    "text": "uh and you can use you have to kind of look into what the the members actually are but uh this is basically your exec",
    "start": "801360",
    "end": "809120"
  },
  {
    "text": "ution content this is what you have access uh the memory you have accessible from kernel",
    "start": "809120",
    "end": "815839"
  },
  {
    "text": "space the name you can choose it choose to name it whatever you",
    "start": "815920",
    "end": "821120"
  },
  {
    "text": "want uh because this is just C",
    "start": "821120",
    "end": "827320"
  },
  {
    "text": "uh then we have this uh BPF core read",
    "start": "827320",
    "end": "833480"
  },
  {
    "text": "which is a helper function to help reading out the uh memory the memory uh from a",
    "start": "833480",
    "end": "840160"
  },
  {
    "text": "structure and this BPF get current task is basically one of the helper functions",
    "start": "840160",
    "end": "845360"
  },
  {
    "text": "to get uh information about the current task into BPF space that's not something",
    "start": "845360",
    "end": "852040"
  },
  {
    "text": "you have access to normally unless you use this helble function to get that memory",
    "start": "852040",
    "end": "858880"
  },
  {
    "text": "region um so basically what I do here is I check what or I find my uh",
    "start": "858880",
    "end": "865959"
  },
  {
    "text": "PID I find my parent PID this reads A String from the",
    "start": "865959",
    "end": "872360"
  },
  {
    "text": "kernel which is in this case my uh the the first argument of uh the exec system",
    "start": "872360",
    "end": "879959"
  },
  {
    "text": "call which is the file name that you're trying to exec and then I do just print out that",
    "start": "879959",
    "end": "888240"
  },
  {
    "text": "information now at the end here I also have a license which I put in the license section and that's required it",
    "start": "888240",
    "end": "894920"
  },
  {
    "text": "is required to have a GPL compatible license that you're us when for your BPF",
    "start": "894920",
    "end": "900279"
  },
  {
    "text": "program if not the valid validator will deny your",
    "start": "900279",
    "end": "906839"
  },
  {
    "text": "program so this can be loaded into the kernel and it will",
    "start": "906839",
    "end": "912800"
  },
  {
    "text": "run but we need a program to load it in you could use BPF tool to load in this",
    "start": "912800",
    "end": "917920"
  },
  {
    "text": "program but to do it from uh from uh your own program is kind of",
    "start": "917920",
    "end": "924800"
  },
  {
    "text": "nice because then you can also control it using the communication channels that you create which we have none of right",
    "start": "924800",
    "end": "931759"
  },
  {
    "text": "now um I mentioned BPF tool can make a skeleton and this is this header file is",
    "start": "931759",
    "end": "938720"
  },
  {
    "text": "created by BPF tool and I just included and it gives me access to well",
    "start": "938720",
    "end": "944759"
  },
  {
    "text": "opening simple open and simple load and simple attach so simple is what I've",
    "start": "944759",
    "end": "950319"
  },
  {
    "text": "just called my well I told BPF tool to prefix everything with simple basically",
    "start": "950319",
    "end": "955839"
  },
  {
    "text": "I just gave it to name simple and uh so opening just opens up Theo file or",
    "start": "955839",
    "end": "963880"
  },
  {
    "text": "the object file then I load that into the kernel and then I attach it to the",
    "start": "963880",
    "end": "969279"
  },
  {
    "text": "hooks that is defined in the in the sections and then I just Loop forever",
    "start": "969279",
    "end": "975800"
  },
  {
    "text": "and uh let the the program do its thing and then I destroy it",
    "start": "975800",
    "end": "981120"
  },
  {
    "text": "afterwards and as long when uh this Pro this user Space Program exits the BPF",
    "start": "981120",
    "end": "987560"
  },
  {
    "text": "program will automatically be detached if it if the user Space Program crashes then the kernel will detach the the",
    "start": "987560",
    "end": "994399"
  },
  {
    "text": "corresponding BPF program for this hook that's not the case for all Hooks and",
    "start": "994399",
    "end": "1000160"
  },
  {
    "text": "especially not Network hooks are generally they generally live forever unless you explicitly detach",
    "start": "1000160",
    "end": "1007879"
  },
  {
    "text": "them so let's have a quick look here and",
    "start": "1009519",
    "end": "1015079"
  },
  {
    "text": "first off I want to show you the BPF tool what I can do with that is I can list",
    "start": "1015079",
    "end": "1021800"
  },
  {
    "text": "out every currently running BPF",
    "start": "1021800",
    "end": "1027360"
  },
  {
    "text": "hook so these are the ones that's are that's running on my system and I am I",
    "start": "1027360",
    "end": "1036798"
  },
  {
    "text": "simple nope and then I can run my",
    "start": "1036799",
    "end": "1043160"
  },
  {
    "text": "program which I just Call Exec and it's running so if I run the BPF tool again I",
    "start": "1043160",
    "end": "1051320"
  },
  {
    "text": "see now I now a new Trace point named handle clone uh it has some more information",
    "start": "1051320",
    "end": "1059240"
  },
  {
    "text": "there as well but that's not as as interesting now what you saw was that it's doing a BPF printk but I'm not",
    "start": "1059240",
    "end": "1066360"
  },
  {
    "text": "getting anything out the reason for that is that that information is logged to uh",
    "start": "1066360",
    "end": "1073960"
  },
  {
    "text": "Trace pipe in the kernel so if I do this and I go",
    "start": "1073960",
    "end": "1081760"
  },
  {
    "text": "and is this the wrong yeah it",
    "start": "1082640",
    "end": "1088679"
  },
  {
    "text": "is uh this is the one I was going to",
    "start": "1088679",
    "end": "1093080"
  },
  {
    "text": "run there we are now I have yeah and now you see there's stuff exing on the",
    "start": "1094520",
    "end": "1100280"
  },
  {
    "text": "system I have the PID I have the parent PID let's stop it because it's going a bit fast so I have the name of the name",
    "start": "1100280",
    "end": "1109480"
  },
  {
    "text": "of the application being run I have the pit I have the parent pit and it's just",
    "start": "1109480",
    "end": "1115159"
  },
  {
    "text": "logged to a pipe to have access to of course that part isn't as interesting",
    "start": "1115159",
    "end": "1121760"
  },
  {
    "text": "doing just logging to a pipe where you have to have access to actually look at it but we'll get to how to do more",
    "start": "1121760",
    "end": "1128679"
  },
  {
    "text": "interesting stuff uh I also said we were making",
    "start": "1128679",
    "end": "1136400"
  },
  {
    "text": "um skeleton and the way we do that is by having BPF",
    "start": "1136400",
    "end": "1143000"
  },
  {
    "text": "to look at the object file ex BP f.o is the object file that I",
    "start": "1143000",
    "end": "1152039"
  },
  {
    "text": "create for my C file and I just call it well let's call it simple because that's what we did",
    "start": "1152039",
    "end": "1158840"
  },
  {
    "text": "previously and I failed making a pipe there we are so it creates a header file for you",
    "start": "1162679",
    "end": "1169720"
  },
  {
    "text": "it has a lot of information it includes lipf because this depends on",
    "start": "1169720",
    "end": "1174840"
  },
  {
    "text": "libpf uh and you have some structs that you can access it has a program which is the",
    "start": "1174840",
    "end": "1182280"
  },
  {
    "text": "program it's the binary that we that to the client compiles",
    "start": "1182280",
    "end": "1187600"
  },
  {
    "text": "basically uh and a link to the BPF link uh it also has",
    "start": "1187600",
    "end": "1193039"
  },
  {
    "text": "these uh C++ uh handlers for me so I can",
    "start": "1193039",
    "end": "1198320"
  },
  {
    "text": "use C++ bindings though the C++ bindings are just names spaced versions of the C",
    "start": "1198320",
    "end": "1204000"
  },
  {
    "text": "bindings they're not too interesting uh so you do get some uh",
    "start": "1204000",
    "end": "1210120"
  },
  {
    "text": "nice helper functions that you can use to to create and manage your BPF",
    "start": "1210120",
    "end": "1216320"
  },
  {
    "text": "objects okay but currently we're not really",
    "start": "1216760",
    "end": "1223440"
  },
  {
    "text": "doing much everything's happening in kernel space and you kind of need a privileged",
    "start": "1223440",
    "end": "1228960"
  },
  {
    "text": "uh user to even see what's happening because you have to watch that Trace pipe",
    "start": "1228960",
    "end": "1234039"
  },
  {
    "text": "thingy so let's see how we can communicate between the kernel space and the user space and there's two ways of",
    "start": "1234039",
    "end": "1241080"
  },
  {
    "text": "doing it actually I mentioned the ebpf maps but you also have uh the BSS",
    "start": "1241080",
    "end": "1248080"
  },
  {
    "text": "section where you can put simple",
    "start": "1248080",
    "end": "1251559"
  },
  {
    "text": "things and we'll start with the BSS section because it's the simplest but you're probably not going to use it in",
    "start": "1254440",
    "end": "1260480"
  },
  {
    "text": "many real world scenarios but it's nice to know about so you make this int which I call",
    "start": "1260480",
    "end": "1268440"
  },
  {
    "text": "ppid and I put it into the BSS section now the skeleton will then",
    "start": "1268440",
    "end": "1274039"
  },
  {
    "text": "create a new uh a new entry in its uh in its skeleton",
    "start": "1274039",
    "end": "1279799"
  },
  {
    "text": "structure which is the BSS entries that I can use from user",
    "start": "1279799",
    "end": "1285720"
  },
  {
    "text": "space uh so what I do is I read out the uh real parent process ID and I check if",
    "start": "1285799",
    "end": "1295039"
  },
  {
    "text": "the parent process ID is the same as the process ID I now am interested",
    "start": "1295039",
    "end": "1302520"
  },
  {
    "text": "in and then from user space I just set the the skeletons BSS PP ID to well",
    "start": "1302520",
    "end": "1311120"
  },
  {
    "text": "whatever I get from the command line in this case so basically this is watching One",
    "start": "1311120",
    "end": "1317480"
  },
  {
    "text": "process and then printing out the the information that you saw in the",
    "start": "1317480",
    "end": "1324440"
  },
  {
    "text": "trace pipe if it's that parent process that's actually exing so now I'm not",
    "start": "1324440",
    "end": "1330200"
  },
  {
    "text": "interested in the all the processes on the system just this",
    "start": "1330200",
    "end": "1335080"
  },
  {
    "text": "one but this is also very limited the the BSS section",
    "start": "1341720",
    "end": "1348640"
  },
  {
    "text": "because it needs to be very it needs to be trival types but ebpf uh M maps",
    "start": "1348640",
    "end": "1357039"
  },
  {
    "text": "are way more they have way more freedom so you have multiple map types",
    "start": "1357039",
    "end": "1363720"
  },
  {
    "text": "uh we're not going to go through many of them we're actually going to just look at two of them um we're not going to go into the",
    "start": "1363720",
    "end": "1369880"
  },
  {
    "text": "details of what they are because they are they're very good for different",
    "start": "1369880",
    "end": "1375120"
  },
  {
    "text": "applications or the different ones are good for different applications I'm not even sure if I'm using the most",
    "start": "1375120",
    "end": "1381000"
  },
  {
    "text": "efficient ones in these examples but they work um but to I think it's tomorrow",
    "start": "1381000",
    "end": "1388320"
  },
  {
    "text": "there's a there's a talk about sock map from the maintainer of the sock map uh",
    "start": "1388320",
    "end": "1396559"
  },
  {
    "text": "functionality and he's probably going to go more into details on how actually sock the sock map map",
    "start": "1396559",
    "end": "1402919"
  },
  {
    "text": "Works uh but there are multiple map types and we're going to start with by",
    "start": "1402919",
    "end": "1408120"
  },
  {
    "text": "using a ring buffer so the way to do that we'll start",
    "start": "1408120",
    "end": "1414440"
  },
  {
    "text": "with the lower uh struct here because that's actually defining the ring",
    "start": "1414440",
    "end": "1419799"
  },
  {
    "text": "buffer so you give it a type which is the BPF map type ring",
    "start": "1419799",
    "end": "1424840"
  },
  {
    "text": "buff and then we say it has uh a number of Max entries which is 256 * 1024 in",
    "start": "1424840",
    "end": "1432279"
  },
  {
    "text": "this case and we put that struct in the maps section which gives us access to the map",
    "start": "1432279",
    "end": "1439559"
  },
  {
    "text": "also in user space um so the max entries is basically",
    "start": "1439559",
    "end": "1445600"
  },
  {
    "text": "the number of bytes you can have in the ring buffer uh and it doesn't Define what",
    "start": "1445600",
    "end": "1452200"
  },
  {
    "text": "types it can hold it can hold any type",
    "start": "1452200",
    "end": "1456880"
  },
  {
    "text": "basically uh but what we'll use is this event struct that's over which basically holds the exact same information as what",
    "start": "1457400",
    "end": "1464600"
  },
  {
    "text": "we were printing out to the trace pipe now to put this information into the",
    "start": "1464600",
    "end": "1471679"
  },
  {
    "text": "ring buffer you create a event struct basically how you would do it in",
    "start": "1471679",
    "end": "1478440"
  },
  {
    "text": "NAC program you have the PID you have the ppid and you have the command and you just give that information to the",
    "start": "1478440",
    "end": "1485039"
  },
  {
    "text": "event struct and then you do BPF ring buff output to the events",
    "start": "1485039",
    "end": "1490919"
  },
  {
    "text": "struct and you give it the size of the object that you're putting on",
    "start": "1490919",
    "end": "1496240"
  },
  {
    "text": "it and then we can remove the B PF printk because now we're basically sending this information up to well",
    "start": "1496320",
    "end": "1502919"
  },
  {
    "text": "technically someone else so from the user space",
    "start": "1502919",
    "end": "1510880"
  },
  {
    "text": "perspective we need uh we need to attach to this uh",
    "start": "1510880",
    "end": "1516720"
  },
  {
    "text": "map and make sure we can read events that's happen on it happening on it so we get the file descriptor for",
    "start": "1516720",
    "end": "1524960"
  },
  {
    "text": "this map so while adding it uh like this you are",
    "start": "1524960",
    "end": "1530480"
  },
  {
    "text": "the BPF skeleton generation thingy will create a entry which is maps.",
    "start": "1530480",
    "end": "1537600"
  },
  {
    "text": "events and you can use Li BPF to get the a file descriptor to that",
    "start": "1537600",
    "end": "1544360"
  },
  {
    "text": "map uh and then you can create a new ring buffer and you can add a call back to it now this call back will then be",
    "start": "1544559",
    "end": "1551720"
  },
  {
    "text": "called whenever something new is on the ring buffer uh and then in instead of just",
    "start": "1551720",
    "end": "1558919"
  },
  {
    "text": "sleeping in the in the loop I just consume the ring buffer whenever there's",
    "start": "1558919",
    "end": "1564679"
  },
  {
    "text": "stuff in it so the ring buffer consume will just make sure that whenever something new is",
    "start": "1564679",
    "end": "1570000"
  },
  {
    "text": "on the ring buffer I'll call the call back and then you have to free ring ring",
    "start": "1570000",
    "end": "1576120"
  },
  {
    "text": "buffer when you're done with it so in the consumer in the Callback",
    "start": "1576120",
    "end": "1581760"
  },
  {
    "text": "you get a context you get some data and you get a size so the context is the US to",
    "start": "1581760",
    "end": "1588480"
  },
  {
    "text": "supplied context you see I just sent two nulls here uh so the you can populate the",
    "start": "1588480",
    "end": "1595360"
  },
  {
    "text": "context with actually user data and then the uh data pointer is",
    "start": "1595360",
    "end": "1601679"
  },
  {
    "text": "poined to the data that's coming in on the ring buffer and then the size is the size of whatever is on the ring buffer",
    "start": "1601679",
    "end": "1608360"
  },
  {
    "text": "so you can check that it's the expected amount of bytes just cast that over to a event",
    "start": "1608360",
    "end": "1614799"
  },
  {
    "text": "struct which I have access to and then I just print it and return zero meaning",
    "start": "1614799",
    "end": "1619880"
  },
  {
    "text": "I've handled this",
    "start": "1619880",
    "end": "1623039"
  },
  {
    "text": "callback so to use this that's in um parent",
    "start": "1627880",
    "end": "1635360"
  },
  {
    "text": "pit just checking what so this is the pit of my current",
    "start": "1635360",
    "end": "1643799"
  },
  {
    "text": "shell so this is what I'll be watching",
    "start": "1643799",
    "end": "1648799"
  },
  {
    "text": "and that's 4352 so now I'm just watching the shet",
    "start": "1649960",
    "end": "1658640"
  },
  {
    "text": "underneath and I can do LS for instance",
    "start": "1658640",
    "end": "1663360"
  },
  {
    "text": "no is this running bash what's going on here for the",
    "start": "1664360",
    "end": "1670120"
  },
  {
    "text": "riew okay this should have Prett stuff out to the ah because it's the wrong one",
    "start": "1670120",
    "end": "1677000"
  },
  {
    "text": "again I Al I removed all this uh all",
    "start": "1677000",
    "end": "1683240"
  },
  {
    "text": "these us space notification then I can do XX stuff and",
    "start": "1683240",
    "end": "1691720"
  },
  {
    "text": "it's now printed to SD out instead of to this Trace pipe so now the user space is",
    "start": "1691720",
    "end": "1698399"
  },
  {
    "text": "telling kernel space what to care for and kernel space is sending data up to the user space so that can so we can do",
    "start": "1698399",
    "end": "1706519"
  },
  {
    "text": "sensible things with it",
    "start": "1706519",
    "end": "1710120"
  },
  {
    "text": "So currently I have almost the solution I needed to basically put stuff into a",
    "start": "1713159",
    "end": "1720559"
  },
  {
    "text": "cgroup I could now follow a parent and whenever that parent XX something I care",
    "start": "1720559",
    "end": "1726080"
  },
  {
    "text": "about I could put that into a users into a cgroup but I'm more interested in when",
    "start": "1726080",
    "end": "1733919"
  },
  {
    "text": "someone tries to run this particular binary so",
    "start": "1733919",
    "end": "1740640"
  },
  {
    "text": "the parent PID approach isn't really sufficient for my use",
    "start": "1740640",
    "end": "1746840"
  },
  {
    "text": "case so instead of just from the user space saying that watch this parent ped",
    "start": "1746840",
    "end": "1753000"
  },
  {
    "text": "I'm going to give it a list of strings basically which is Parts into the file",
    "start": "1753000",
    "end": "1758760"
  },
  {
    "text": "system and say that when these are executed then you tell user",
    "start": "1758760",
    "end": "1765000"
  },
  {
    "text": "space and you do that with a map just like we did to get data from kernel",
    "start": "1765000",
    "end": "1771080"
  },
  {
    "text": "space to user space because then we can send over more complex types like a string and you can easily keep multiple",
    "start": "1771080",
    "end": "1780840"
  },
  {
    "text": "entries so like we did with the ring buffer we create something in the maps",
    "start": "1781440",
    "end": "1787519"
  },
  {
    "text": "section but this time we make a a map of hashes or map type",
    "start": "1787519",
    "end": "1794080"
  },
  {
    "text": "hash where we have a maximum of 32 entries this can of course be adjusted",
    "start": "1794080",
    "end": "1799559"
  },
  {
    "text": "if you need more uh I give it a key size and a value",
    "start": "1799559",
    "end": "1805440"
  },
  {
    "text": "size you can and I'll show you later you can say that this has a type of string",
    "start": "1805440",
    "end": "1811960"
  },
  {
    "text": "for instance or a length of string but this this way it was easier when",
    "start": "1811960",
    "end": "1818200"
  },
  {
    "text": "you're when you're talking about strings because they don't really have a t a type in C so saying that we accept this",
    "start": "1818200",
    "end": "1826039"
  },
  {
    "text": "amount of bytes basically was way easier and then the value is just a unsigned",
    "start": "1826039",
    "end": "1832720"
  },
  {
    "text": "8bit thingy because I don't really really going to care about the value I only going to care about the",
    "start": "1832720",
    "end": "1839279"
  },
  {
    "text": "size of the key or the key so instead of uh checking the the",
    "start": "1839279",
    "end": "1846960"
  },
  {
    "text": "parent pit with the ppid I read in the in the command that's",
    "start": "1846960",
    "end": "1853760"
  },
  {
    "text": "been ex exec just like I did before I just now push that further up in the stack or in the in the function and then",
    "start": "1853760",
    "end": "1861760"
  },
  {
    "text": "I check can I look up this element does this element exist in my map if this",
    "start": "1861760",
    "end": "1867720"
  },
  {
    "text": "exists in the map then lookup element will uh return uh the a handle to it or",
    "start": "1867720",
    "end": "1876760"
  },
  {
    "text": "an or an index to it and if not it will return zero so if",
    "start": "1876760",
    "end": "1883919"
  },
  {
    "text": "I can't find it I'll just return zero CU then I'm not interested in this and I don't have to do anything more work in",
    "start": "1883919",
    "end": "1891919"
  },
  {
    "text": "kernel that's basically the only change from the from the ebpf",
    "start": "1892039",
    "end": "1897760"
  },
  {
    "text": "perspective which is kind of nice and on the user space side instead",
    "start": "1897760",
    "end": "1904880"
  },
  {
    "text": "of just writing to this ppid I do the same as I did in kernel space when",
    "start": "1904880",
    "end": "1911000"
  },
  {
    "text": "sending data back up I copy the string I care about",
    "start": "1911000",
    "end": "1918120"
  },
  {
    "text": "I set a value this is uninteresting so I'm just setting it to one and then I",
    "start": "1918120",
    "end": "1923799"
  },
  {
    "text": "update the exec names element and when I've done that the map",
    "start": "1923799",
    "end": "1930600"
  },
  {
    "text": "contains some new data so the next time the ebpf program is",
    "start": "1930600",
    "end": "1938000"
  },
  {
    "text": "running it will know what's what contents is content is in there and this",
    "start": "1938000",
    "end": "1943960"
  },
  {
    "text": "could this is in this example just happening when we start up but this could of course be dynamic I could from",
    "start": "1943960",
    "end": "1950559"
  },
  {
    "text": "user space both add and delete elements and do whatever I",
    "start": "1950559",
    "end": "1955440"
  },
  {
    "text": "want uh but also for this particular uh",
    "start": "1955840",
    "end": "1962080"
  },
  {
    "text": "example one thing to note here is when I update elements from the kernel",
    "start": "1962080",
    "end": "1968320"
  },
  {
    "text": "space the API is basically the same as for user space but there is a way to",
    "start": "1968320",
    "end": "1974760"
  },
  {
    "text": "distinguish it and that is looking at BPF score map double underscore update LM the double",
    "start": "1974760",
    "end": "1982000"
  },
  {
    "text": "underscore is the lib BPF API which is available to you in user space if",
    "start": "1982000",
    "end": "1987720"
  },
  {
    "text": "there's a single underscore after these functions then you're in kernel",
    "start": "1987720",
    "end": "1993519"
  },
  {
    "text": "space so if you're not really sure if this is Kernel space or user space code just look at the function set you're",
    "start": "1993519",
    "end": "2000399"
  },
  {
    "text": "calling they look very similar but one of them has a double underscore somewhere",
    "start": "2000399",
    "end": "2006519"
  },
  {
    "text": "so after this whenever my process is exiting I can put it into cgroup I'm not",
    "start": "2009320",
    "end": "2014360"
  },
  {
    "text": "going to show how to do that because that that you can look at other talks but what you need to do is you",
    "start": "2014360",
    "end": "2021880"
  },
  {
    "text": "need to clean up after exit if not you have like just heaps of cgroups lying",
    "start": "2021880",
    "end": "2027519"
  },
  {
    "text": "around empty and it's not really nice it's not critical to do but it's nice to",
    "start": "2027519",
    "end": "2032880"
  },
  {
    "text": "clean up after yourself so we need to add another BPF program that cares about system exit or",
    "start": "2032880",
    "end": "2039559"
  },
  {
    "text": "process exit and we need a map to communicate between the two ebpf",
    "start": "2039559",
    "end": "2047398"
  },
  {
    "text": "programs so if we want to make a map to monitor between or to communicate",
    "start": "2048839",
    "end": "2053960"
  },
  {
    "text": "between two BPF programs you just make a new map and they don't have to it's not",
    "start": "2053960",
    "end": "2060839"
  },
  {
    "text": "difference from if you want to communicate to user space so in this case I also make a map",
    "start": "2060839",
    "end": "2068800"
  },
  {
    "text": "type hash this time I say that the type of the key is a PID and the type of the",
    "start": "2068800",
    "end": "2075079"
  },
  {
    "text": "value is a PID and I keep 8K",
    "start": "2075079",
    "end": "2080800"
  },
  {
    "text": "entries so when I in this case uh have decided that this is interesting for uh",
    "start": "2081679",
    "end": "2090200"
  },
  {
    "text": "user space I put it into the monitored map basically I put the pit that is being",
    "start": "2090200",
    "end": "2096480"
  },
  {
    "text": "exec into the monitor map and then I send the information up to user",
    "start": "2096480",
    "end": "2103520"
  },
  {
    "text": "space so now this monitored is just a a map of uh processes that I'm",
    "start": "2105880",
    "end": "2113720"
  },
  {
    "text": "currently monitoring and now I need a new ebpf",
    "start": "2113720",
    "end": "2119119"
  },
  {
    "text": "program which then I hook into the sked process exit Trace Point instead of the",
    "start": "2119119",
    "end": "2124920"
  },
  {
    "text": "exec which I did previously",
    "start": "2124920",
    "end": "2128880"
  },
  {
    "text": "and this is kind of similar to the previous one I do get my thread ID and",
    "start": "2130599",
    "end": "2137200"
  },
  {
    "text": "PID and then I check if uh well first off I'm actually checking if it's the",
    "start": "2137200",
    "end": "2143520"
  },
  {
    "text": "process or the thread that's exiting if the thread is exiting I don't want to do anything but if it's the pit that's",
    "start": "2143520",
    "end": "2150520"
  },
  {
    "text": "exiting then I kind of want to do my work um and the only thing I do I try to",
    "start": "2150520",
    "end": "2158640"
  },
  {
    "text": "delete the element itself if I successfully delete it then",
    "start": "2158640",
    "end": "2163680"
  },
  {
    "text": "I knew it was there and this is a monitored uh process so if I deleted it I tell I",
    "start": "2163680",
    "end": "2171200"
  },
  {
    "text": "populate the event struct again this time I add a type just to make it easier for user space to distinguish between",
    "start": "2171200",
    "end": "2178440"
  },
  {
    "text": "exec and exit and I tell user space that this happened and now user space can do",
    "start": "2178440",
    "end": "2184920"
  },
  {
    "text": "its work and of course if it's not monitored I",
    "start": "2184920",
    "end": "2190240"
  },
  {
    "text": "just exit because I don't care about this process so now I have all the building",
    "start": "2190240",
    "end": "2197280"
  },
  {
    "text": "blocks to solve the use case that I",
    "start": "2197280",
    "end": "2203440"
  },
  {
    "text": "wanted so let's see what we want to",
    "start": "2205720",
    "end": "2212440"
  },
  {
    "text": "monitor ah not there I want to see",
    "start": "2212440",
    "end": "2218078"
  },
  {
    "text": "what's the bash",
    "start": "2219079",
    "end": "2221880"
  },
  {
    "text": "process nope uh make C group pretty sure this is the correct one this time",
    "start": "2227359",
    "end": "2234079"
  },
  {
    "text": "uh so I run this thing and I'm basically only",
    "start": "2234079",
    "end": "2240319"
  },
  {
    "text": "monitoring that bash is exiting and if bash is exiting I'm",
    "start": "2240319",
    "end": "2245400"
  },
  {
    "text": "giving it 200 Megs so this is just the format I made for",
    "start": "2245400",
    "end": "2250839"
  },
  {
    "text": "the for the argument parer so now I'm monitoring uh bash so",
    "start": "2250839",
    "end": "2258880"
  },
  {
    "text": "if I down here start bash I can see okay what am I I'm",
    "start": "2258880",
    "end": "2265640"
  },
  {
    "text": "14057 now if you're familiar with Linux uh and cgroups there's this magical",
    "start": "2265640",
    "end": "2272720"
  },
  {
    "text": "folder s FSC group and this now has",
    "start": "2272720",
    "end": "2280119"
  },
  {
    "text": "a ebpf manage thing which my user Space Program creates just create a folder",
    "start": "2280119",
    "end": "2285280"
  },
  {
    "text": "called ebpf managed and in this I have this uh folder",
    "start": "2285280",
    "end": "2291200"
  },
  {
    "text": "14057 which is the C group I created to monitor this bash",
    "start": "2291200",
    "end": "2297040"
  },
  {
    "text": "process so I can have a look at it s FS group uh",
    "start": "2297040",
    "end": "2305480"
  },
  {
    "text": "4057 and these are processes processes that's currently in it now 14057 is of",
    "start": "2306440",
    "end": "2312359"
  },
  {
    "text": "course my current bash process 14127 is the cat process that I just created so",
    "start": "2312359",
    "end": "2319560"
  },
  {
    "text": "that one will always change uh if I create another bash",
    "start": "2319560",
    "end": "2327760"
  },
  {
    "text": "session and I enter bash then I see I have CIS FS C",
    "start": "2328119",
    "end": "2335880"
  },
  {
    "text": "group ebpf managed oh this was not easy to see I now have two folders which are",
    "start": "2335880",
    "end": "2342920"
  },
  {
    "text": "two distinct uh c groups if I exit one of",
    "start": "2342920",
    "end": "2350280"
  },
  {
    "text": "them that's cleaned up and the creation and cleanup of the c",
    "start": "2352720",
    "end": "2358200"
  },
  {
    "text": "groups themselves are done by the user Space Program not by the ebbf program",
    "start": "2358200",
    "end": "2364119"
  },
  {
    "text": "and also just to show that I have uh actually limit",
    "start": "2364119",
    "end": "2370760"
  },
  {
    "text": "the the memory what's the name memory.",
    "start": "2370760",
    "end": "2379319"
  },
  {
    "text": "Max oh of course I don't have permissions to do",
    "start": "2379319",
    "end": "2386160"
  },
  {
    "text": "that oh double dot no wonder so that should be 200 Megs",
    "start": "2387960",
    "end": "2397680"
  },
  {
    "text": "okay now",
    "start": "2403520",
    "end": "2409960"
  },
  {
    "text": "currently we only used one type of hooks we only did Trace",
    "start": "2409960",
    "end": "2415240"
  },
  {
    "text": "points So currently we're only tracing uh B programs on the system which is",
    "start": "2415240",
    "end": "2422400"
  },
  {
    "text": "fine but there's a lot more you can do with ebpf",
    "start": "2422400",
    "end": "2427880"
  },
  {
    "text": "so you can connect programs to the cgroup itself like I said you can",
    "start": "2428599",
    "end": "2433800"
  },
  {
    "text": "connect it to a network interface you can connect it to uh well see not sure if you can",
    "start": "2433800",
    "end": "2440319"
  },
  {
    "text": "connect yeah you can you can connect programs to devices on the",
    "start": "2440319",
    "end": "2446960"
  },
  {
    "text": "system uh so let's look into how you can uh connect uh Network program to the",
    "start": "2446960",
    "end": "2453839"
  },
  {
    "text": "cgroup itself so I create a cgroup and now I want to actually do something more than just",
    "start": "2453839",
    "end": "2460240"
  },
  {
    "text": "limited memory I also want to say do traffic shaping or some decision in the",
    "start": "2460240",
    "end": "2467480"
  },
  {
    "text": "on the networking layer of processes that I put into this",
    "start": "2467480",
    "end": "2472359"
  },
  {
    "text": "cgroup and for this I created some very simple uh ebpf",
    "start": "2472839",
    "end": "2480079"
  },
  {
    "text": "programs so we connect to the cgroup SKB ESS and Ingress hooks so basically",
    "start": "2480079",
    "end": "2488200"
  },
  {
    "text": "whenever a packet is leaving or entering this cgroup or leaving or entering",
    "start": "2488200",
    "end": "2493599"
  },
  {
    "text": "something in the cgroup is more correct probably I want to run these",
    "start": "2493599",
    "end": "2499040"
  },
  {
    "text": "programs and they are as you can see dead simple they're not really doing much uh if this flag is set then I drop",
    "start": "2499040",
    "end": "2508240"
  },
  {
    "text": "drop all the packets and if not I accept them um I don't care about the memory",
    "start": "2508240",
    "end": "2515280"
  },
  {
    "text": "context I get in the S key buff uh I could of course monitor that or",
    "start": "2515280",
    "end": "2522680"
  },
  {
    "text": "look at that and see that okay this is a this only holds for UDP uh packets or",
    "start": "2522680",
    "end": "2528640"
  },
  {
    "text": "TCP only for TCP packets or I can look into the data that's actually there which is the full packet",
    "start": "2528640",
    "end": "2536359"
  },
  {
    "text": "structure uh in this in these hooks I can't actually modify the contents of",
    "start": "2536359",
    "end": "2542240"
  },
  {
    "text": "the packets that's not allowed they're read only in other hooks I can so kind",
    "start": "2542240",
    "end": "2547599"
  },
  {
    "text": "of depends on what you want to do which ones you want to use but in this one I don't really care",
    "start": "2547599",
    "end": "2553920"
  },
  {
    "text": "I'm just dropping packets or allowing",
    "start": "2553920",
    "end": "2557520"
  },
  {
    "text": "packets so from the user space all I have to do is set this",
    "start": "2559359",
    "end": "2566000"
  },
  {
    "text": "drop and but I also need to attach it to the",
    "start": "2566640",
    "end": "2573960"
  },
  {
    "text": "cgroup itself so I mentioned how to attach a BPF program depends on what type of BPF",
    "start": "2573960",
    "end": "2582400"
  },
  {
    "text": "program or what type of hook you're attaching to with the trace points it was pretty",
    "start": "2582400",
    "end": "2588119"
  },
  {
    "text": "easy you just with the skeleton you just tell it to attach because it knows where",
    "start": "2588119",
    "end": "2593280"
  },
  {
    "text": "to attach but for cgroups you have to open a file uh descriptor to the cgroup",
    "start": "2593280",
    "end": "2601880"
  },
  {
    "text": "itself so that's just this directory path of the C group you're interested in",
    "start": "2601880",
    "end": "2608440"
  },
  {
    "text": "and then you say program attach cgroup with the egress program and the",
    "start": "2608440",
    "end": "2613839"
  },
  {
    "text": "Ingress program to that file scriptor so it's not that much harder as long as you",
    "start": "2613839",
    "end": "2618880"
  },
  {
    "text": "use something relatively San like like Li",
    "start": "2618880",
    "end": "2625480"
  },
  {
    "text": "BPF um because that does all the work for you in the background which is very",
    "start": "2625520",
    "end": "2633960"
  },
  {
    "text": "nice so that was a bit fast uh",
    "start": "2634240",
    "end": "2640119"
  },
  {
    "text": "so to show that uh I do the same thing but with the",
    "start": "2640119",
    "end": "2647040"
  },
  {
    "text": "cgroup network thing I made and now I'm in a in a c",
    "start": "2647040",
    "end": "2656079"
  },
  {
    "text": "group uh let's just so now this thing is in a c group",
    "start": "2656079",
    "end": "2663800"
  },
  {
    "text": "and if I now want to curl",
    "start": "2663800",
    "end": "2667720"
  },
  {
    "text": "go oh writing is hard especially hitting keys so you see it",
    "start": "2669440",
    "end": "2676680"
  },
  {
    "text": "works quite well until sometimes it suddenly it hangs So",
    "start": "2676680",
    "end": "2683359"
  },
  {
    "text": "currently I allow packets for uh 10 seconds and then I block them for four or something like that and now it works",
    "start": "2683359",
    "end": "2690319"
  },
  {
    "text": "again for a good amount of time until it every packet is suddenly dropped dropped again",
    "start": "2690319",
    "end": "2698119"
  },
  {
    "text": "and that's the hangs you",
    "start": "2700119",
    "end": "2703039"
  },
  {
    "text": "see and you can do way more complex stuff than this uh with the with the",
    "start": "2707079",
    "end": "2712599"
  },
  {
    "text": "networking subsystem you can I I have a plan of using it to for",
    "start": "2712599",
    "end": "2718960"
  },
  {
    "text": "instance push how to do how to proxy stuff down to the kernel instead of",
    "start": "2718960",
    "end": "2725319"
  },
  {
    "text": "having uh having to do those decisions in user space so everything from the machine is then proxied through uh",
    "start": "2725319",
    "end": "2732520"
  },
  {
    "text": "through a proxy but then I have to actually inspect the data and see that okay this is actually a HTTP packet so",
    "start": "2732520",
    "end": "2738680"
  },
  {
    "text": "that's push to the proxy and you can you can inspect a lot of data through ebpf",
    "start": "2738680",
    "end": "2745400"
  },
  {
    "text": "as long as you use the right hooks because all of the okay at least",
    "start": "2745400",
    "end": "2751839"
  },
  {
    "text": "most of the networking hooks you get this SK buff which has all the data for",
    "start": "2751839",
    "end": "2759640"
  },
  {
    "text": "um for the network packets you have the raw you have the raw bites if you want",
    "start": "2759640",
    "end": "2766079"
  },
  {
    "text": "to inspect them but and this is for all hooks uh that doesn't mean you can read",
    "start": "2766079",
    "end": "2772760"
  },
  {
    "text": "them so some of some of the fields in this SK buff might not be available for",
    "start": "2772760",
    "end": "2778599"
  },
  {
    "text": "you depending on what hook you're using H and they might be read only you",
    "start": "2778599",
    "end": "2785040"
  },
  {
    "text": "might be able to write to them it all depends on what hook hook you're using so if you have a use case that you want",
    "start": "2785040",
    "end": "2792040"
  },
  {
    "text": "to solve you need to figure out what's readable what's writable what's not even",
    "start": "2792040",
    "end": "2797760"
  },
  {
    "text": "available and then make a decision based on that for where in the networking",
    "start": "2797760",
    "end": "2802960"
  },
  {
    "text": "stack you are actually",
    "start": "2802960",
    "end": "2805960"
  },
  {
    "text": "attaching so yeah any questions yes",
    "start": "2810000",
    "end": "2817400"
  },
  {
    "text": "support uh the it depends on what Hooks you need to use uh and also what uh",
    "start": "2821440",
    "end": "2827599"
  },
  {
    "text": "Library you want to or what um what level of abstraction you want to use because it's I think uh as far back as",
    "start": "2827599",
    "end": "2835880"
  },
  {
    "text": "515 you at least have some support for it but a lot of stuff is coming like",
    "start": "2835880",
    "end": "2842000"
  },
  {
    "text": "that it's always developing uh I'm not really sure for instance with the sock map stuff I think you need to get to at",
    "start": "2842000",
    "end": "2848920"
  },
  {
    "text": "least six something kernel to be able to use that and there's probably new features being developed as we speak for",
    "start": "2848920",
    "end": "2855359"
  },
  {
    "text": "it as well so you have to look at what you what you need to use and figure out what the kernel version stats",
    "start": "2855359",
    "end": "2863720"
  },
  {
    "text": "on any more questions you say it's available does it",
    "start": "2865359",
    "end": "2873240"
  },
  {
    "text": "me that you like are you talking about you but you some of it yes that's",
    "start": "2873240",
    "end": "2882039"
  },
  {
    "text": "correct yeah I I'll repeat the question because there might be some people uh",
    "start": "2882480",
    "end": "2888400"
  },
  {
    "text": "people watching this later as well uh so the question was uh is it the case that",
    "start": "2888400",
    "end": "2895119"
  },
  {
    "text": "in in this this H this SK buff that some of the fields exist but are not",
    "start": "2895119",
    "end": "2902200"
  },
  {
    "text": "readable and how do like I forgot to the full train uh how do",
    "start": "2902200",
    "end": "2911960"
  },
  {
    "text": "you it's I think it's not compil verify yeah",
    "start": "2913559",
    "end": "2920160"
  },
  {
    "text": "it's verified by the compiler when I try to so it's it's verified by either",
    "start": "2920160",
    "end": "2925280"
  },
  {
    "text": "verifier or the jit compiler to check that you're only accessing data that is",
    "start": "2925280",
    "end": "2931359"
  },
  {
    "text": "uh readable or writable for you so they do verify it and you will",
    "start": "2931359",
    "end": "2936920"
  },
  {
    "text": "not be able to upload a a program if it's if it violates the whatever is readable and writable I think I think",
    "start": "2936920",
    "end": "2943040"
  },
  {
    "text": "that was the that was the result I think when I tried it out but I might be I",
    "start": "2943040",
    "end": "2948720"
  },
  {
    "text": "might be wrong I don't think it's a runtime error but yes it's it's in theory the",
    "start": "2948720",
    "end": "2956160"
  },
  {
    "text": "same struct but then some things are marked as",
    "start": "2956160",
    "end": "2960558"
  },
  {
    "text": "inaccessible yeah any more questions",
    "start": "2962640",
    "end": "2968720"
  },
  {
    "text": "questions no okay and thank you",
    "start": "2968760",
    "end": "2975960"
  },
  {
    "text": "[Applause]",
    "start": "2976020",
    "end": "2979170"
  }
]