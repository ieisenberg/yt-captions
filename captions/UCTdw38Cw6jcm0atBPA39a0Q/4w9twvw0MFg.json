[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "hello everyone how's everyone doing today uh so before I get started here I",
    "start": "4560",
    "end": "9639"
  },
  {
    "text": "just kind of was wondering how many people here have ever heard of grpc one two anybody ever used it one",
    "start": "9639",
    "end": "19560"
  },
  {
    "text": "what about Cassandra anybody ever used that or heard of it what about other nosql",
    "start": "19560",
    "end": "27640"
  },
  {
    "text": "Solutions okay so what I hope you take away from this",
    "start": "27840",
    "end": "33960"
  },
  {
    "text": "talk is first off a little bit of understanding about what grpc is uh also",
    "start": "33960",
    "end": "39960"
  },
  {
    "text": "a little bit of an understanding about what Cassandra is and then how you can build a simple grpc based",
    "start": "39960",
    "end": "46239"
  },
  {
    "text": "microservice and how you might be able to persist time series data into Cassandra with using that that grpc",
    "start": "46239",
    "end": "52320"
  },
  {
    "text": "based microservice and then the last little bit is why you might want to use grpc and Cassandra instead of uh more",
    "start": "52320",
    "end": "59120"
  },
  {
    "text": "traditional rest and relational model for persisting time series data um",
    "start": "59120",
    "end": "64198"
  },
  {
    "text": "mainly around why it's more why it's more performant and uh has better throughput so first a little bit about",
    "start": "64199",
    "end": "70759"
  },
  {
    "start": "68000",
    "end": "96000"
  },
  {
    "text": "myself my name is David beberg I am a senior architect at expiro um I am from",
    "start": "70759",
    "end": "76600"
  },
  {
    "text": "the United States I live in Te Houston Texas I've been developing uh all sorts of software for about 16 years now",
    "start": "76600",
    "end": "84119"
  },
  {
    "text": "everything from embedded C systems through high performance web applications to highly distributed",
    "start": "84119",
    "end": "89920"
  },
  {
    "text": "systems uh I am also a certified architect on uh Pache Cassandra and a data stack certified",
    "start": "89920",
    "end": "95840"
  },
  {
    "text": "architect uh I work for a company called expiro what we do at expiro is we solve",
    "start": "95840",
    "end": "101240"
  },
  {
    "start": "96000",
    "end": "136000"
  },
  {
    "text": "problems in complex domains specifically around big data iot and high performance",
    "start": "101240",
    "end": "106600"
  },
  {
    "text": "Computing uh we do that across a variety of Industries such as Financial Services oil and gas manufacturing anything like",
    "start": "106600",
    "end": "113079"
  },
  {
    "text": "that we basically uh my company's broken up into three separate practices we have an architecture and development practice",
    "start": "113079",
    "end": "118560"
  },
  {
    "text": "where we actually build the stuff we have a user experience practice which uh does an excellent job of of figuring out",
    "start": "118560",
    "end": "124840"
  },
  {
    "text": "workflows and how to show all this complex data in a simple way and we have a product strategy practice where they",
    "start": "124840",
    "end": "130479"
  },
  {
    "text": "actually figure out prioritization and how to uh actually get this out to the customer based",
    "start": "130479",
    "end": "136680"
  },
  {
    "start": "136000",
    "end": "147000"
  },
  {
    "text": "quickest uh here are some of the clients that we have the companies that we have worked",
    "start": "136680",
    "end": "141920"
  },
  {
    "text": "for so first first thing I want to talk about is what is",
    "start": "141920",
    "end": "147200"
  },
  {
    "text": "grpc well grpc is a general purpose RPC framework it was built uh by Google so I",
    "start": "147200",
    "end": "155440"
  },
  {
    "text": "don't know if you guys know this but Google is highly based on a microservice style architecture so they have a microservice",
    "start": "155440",
    "end": "161920"
  },
  {
    "text": "style architecture for many years it ran on their own internally built uh system called stubby uh stubby was very closely",
    "start": "161920",
    "end": "169640"
  },
  {
    "text": "tied to their internal architecture uh to their internal infrastructure I should say and uh as they moved into uh",
    "start": "169640",
    "end": "177080"
  },
  {
    "text": "more of an open standard iot mobile application it was no longer sufficient",
    "start": "177080",
    "end": "182440"
  },
  {
    "text": "because it was so closely tied to their uh internal infrastructure well to solve that they decided they wanted to move",
    "start": "182440",
    "end": "187920"
  },
  {
    "text": "more towards a standards-based protocol so they that standards based protocol became what is now grpc uh grpc is based",
    "start": "187920",
    "end": "196200"
  },
  {
    "text": "on the httt http2 protocol for its transport protocol so it's available uh",
    "start": "196200",
    "end": "202319"
  },
  {
    "text": "across any any common Network infrastructure which includes many mobile",
    "start": "202319",
    "end": "207760"
  },
  {
    "text": "devices uh it's free and open source and it's built specifically for the problems",
    "start": "207760",
    "end": "212799"
  },
  {
    "text": "of distributed systems so if you've ever worked on highly distributed systems you've probably run into the uh the",
    "start": "212799",
    "end": "218760"
  },
  {
    "text": "posting on the internet of the the fallacies of the uh distributed systems some of those fallacies are you know",
    "start": "218760",
    "end": "224760"
  },
  {
    "text": "networks are always available there's zero latency bandwidth is infinite all",
    "start": "224760",
    "end": "229799"
  },
  {
    "text": "these sort of problems where if you go you know you actually start to build a distributed system you quickly run into them well grpc is built to handle some",
    "start": "229799",
    "end": "236799"
  },
  {
    "text": "of those sort of uh architectural challenges well a little bit about gpc's",
    "start": "236799",
    "end": "242879"
  },
  {
    "start": "240000",
    "end": "389000"
  },
  {
    "text": "architecture gpc's architecture it's it's it's a remote procedure called architecture and it's built to allow",
    "start": "242879",
    "end": "248879"
  },
  {
    "text": "clients to call methods on servers as if they were local so this is very similar to if any of you I'm sure probably at",
    "start": "248879",
    "end": "255120"
  },
  {
    "text": "least some of you are familiar with soap services and have used them before in your applications where you able to actually generate a client from a wisol",
    "start": "255120",
    "end": "262800"
  },
  {
    "text": "and you will get a client a client on your side that you can call without having to set up you know the network",
    "start": "262800",
    "end": "268479"
  },
  {
    "text": "network uh traffic you don't have to set up the you don't have to make the request you don't have to what happens if the request actually fails you know",
    "start": "268479",
    "end": "274680"
  },
  {
    "text": "handling packet loss things like that well grpc is built on the same basic idea where you can where you're able to",
    "start": "274680",
    "end": "281320"
  },
  {
    "text": "call the method as if it was a local client so it simplifies the code that you have to write it's built for writing",
    "start": "281320",
    "end": "287479"
  },
  {
    "text": "low latency highly scalable microservices and it's built to be payload agnostic by payload agnostic uh",
    "start": "287479",
    "end": "294199"
  },
  {
    "text": "what I mean is by default uh the default message format for uh transferring data",
    "start": "294199",
    "end": "299280"
  },
  {
    "text": "to and from grpc is protocol buffers uh protocol buffers is another standard",
    "start": "299280",
    "end": "304840"
  },
  {
    "text": "that Google has for uh highly highly performant message uh it's a highly",
    "start": "304840",
    "end": "310120"
  },
  {
    "text": "performant message format for passing back and forth because it's high partially because it's highly compressible well that's the standard",
    "start": "310120",
    "end": "316320"
  },
  {
    "text": "that comes with grpc but it's also built in such a way that if you have say a service that needs a binary compression",
    "start": "316320",
    "end": "322400"
  },
  {
    "text": "algorithm or it had you want to transfer XML or Json or Thrift or adom or any one",
    "start": "322400",
    "end": "328080"
  },
  {
    "text": "of the many other different message formats out there you can just basically replace the protocol buffers portion",
    "start": "328080",
    "end": "333880"
  },
  {
    "text": "with the portion for XML or Json and you're can go grpc is also built with bidirectional",
    "start": "333880",
    "end": "340440"
  },
  {
    "text": "streaming and by bidirectional streaming I mean that means you can stream data from the client to the server and from",
    "start": "340440",
    "end": "345840"
  },
  {
    "text": "the server back to the client which coming you know my my background is uh actually quite a lot of my time has been",
    "start": "345840",
    "end": "351759"
  },
  {
    "text": "spent building rest style apis which when all of a sudden you realize you can stream data back and forth it actually",
    "start": "351759",
    "end": "357400"
  },
  {
    "text": "allows you to think allows for some interesting differences between how you would build a rest API and you how you",
    "start": "357400",
    "end": "362639"
  },
  {
    "text": "can go out and build a a grpc style API and grpc is pluggable and extensible",
    "start": "362639",
    "end": "369520"
  },
  {
    "text": "maybe you need a different authentication method you want a different me method for compress uh method for compression something like",
    "start": "369520",
    "end": "375720"
  },
  {
    "text": "that well it's built in such a way that you can just plug in those different methods uh to replace what's currently",
    "start": "375720",
    "end": "381840"
  },
  {
    "text": "uh what the current defaults are and go from",
    "start": "381840",
    "end": "386039"
  },
  {
    "text": "there well the first thing when it comes to grpc is the simple model and service",
    "start": "388400",
    "end": "394120"
  },
  {
    "start": "389000",
    "end": "469000"
  },
  {
    "text": "definition so what you're looking at here is actually a simple model and service definition for a service called",
    "start": "394120",
    "end": "399759"
  },
  {
    "text": "hello service well that the first two things you'll see there are the two things that are need message hello",
    "start": "399759",
    "end": "404960"
  },
  {
    "text": "request and hello response well what that is what you're looking at is this is actually protocol buffers that you",
    "start": "404960",
    "end": "410199"
  },
  {
    "text": "use to define your models and your services so in protocol buffers a message is essentially an OB is what be",
    "start": "410199",
    "end": "417199"
  },
  {
    "text": "translated into an object so you have an object object called hello request and an object called hello response each of",
    "start": "417199",
    "end": "423360"
  },
  {
    "text": "those has a single property and one of the unique things you'll notice about protocol buffers if you've never actually used it before is that each",
    "start": "423360",
    "end": "430000"
  },
  {
    "text": "property has to have a number associated with it this is because uh part of the way it does data compression is when it",
    "start": "430000",
    "end": "435759"
  },
  {
    "text": "sends it over the wire instead of sending greeting as part of the the message packet it actually just sends",
    "start": "435759",
    "end": "441879"
  },
  {
    "text": "the value one since both sides need to know what the uh format of the uh the",
    "start": "441879",
    "end": "447000"
  },
  {
    "text": "object R is it's both sides are able to basically translate that back and forth so that's why that uh works that way um",
    "start": "447000",
    "end": "455160"
  },
  {
    "text": "if you look uh so after your two messages you'll see there's a simple definition of a service says in this",
    "start": "455160",
    "end": "460479"
  },
  {
    "text": "case it's called hello service and it basically takes it sends out a request a hello request and it gets back a hello",
    "start": "460479",
    "end": "467240"
  },
  {
    "text": "response so pretty straightforward secondly grpc is",
    "start": "467240",
    "end": "472639"
  },
  {
    "start": "469000",
    "end": "527000"
  },
  {
    "text": "optimized for Speed and Performance uh grpc has several things built into it uh natively that that help optim imiz speed",
    "start": "472639",
    "end": "479879"
  },
  {
    "text": "performance and actually help optimize bandwidth it has things like uh natural message",
    "start": "479879",
    "end": "485120"
  },
  {
    "text": "compression uh flow control for the message pass as well as multiplexing of connections so by multiplexing of",
    "start": "485120",
    "end": "492360"
  },
  {
    "text": "connections if you say working in a rest stle architecture if you need to make multiple requests you end up opening a",
    "start": "492360",
    "end": "497720"
  },
  {
    "text": "you know you end up opening a request making a request closing it opening making a you know requesting closing",
    "start": "497720",
    "end": "502800"
  },
  {
    "text": "things like that with grpc you can actually have a long running persistent connection which you'll send multiple",
    "start": "502800",
    "end": "508319"
  },
  {
    "text": "requests to and possibly to different end points across that single connection so it helps optimize the speed because",
    "start": "508319",
    "end": "515440"
  },
  {
    "text": "you're not making multiple uh connection and discon deconnection requests and it optimizes the performance because you're",
    "start": "515440",
    "end": "521800"
  },
  {
    "text": "there it also optimizes bandwidth which is especially important if you're looking at doing a mobile",
    "start": "521800",
    "end": "527560"
  },
  {
    "start": "527000",
    "end": "616000"
  },
  {
    "text": "application and uh the last last major uh feature that I really enjoy of grpc",
    "start": "527560",
    "end": "533720"
  },
  {
    "text": "is the code generation aspect of it so by code generation you you've seen uh",
    "start": "533720",
    "end": "538800"
  },
  {
    "text": "earlier how we defined the S the U the uh models and the service well the uh",
    "start": "538800",
    "end": "545600"
  },
  {
    "text": "grpc comes with a tool called protoc well that tool what it does is it allows you to generate client uh clients uh",
    "start": "545600",
    "end": "553640"
  },
  {
    "text": "client stubs and server interfaces for a variety of language I believe currently there's eight supported languages um but",
    "start": "553640",
    "end": "559920"
  },
  {
    "text": "being it's open source you can work with any of those other languages um this is sort of similar to how soap and wi Wiles",
    "start": "559920",
    "end": "567040"
  },
  {
    "text": "used to work with except except for the fact that you don't run into the uh problems you used to have with wisal in",
    "start": "567040",
    "end": "573200"
  },
  {
    "text": "soap Services where Java wouldn't wouldn't render the objects quite the way that net was expecting it that",
    "start": "573200",
    "end": "578959"
  },
  {
    "text": "wasn't quite the way C C++ was expecting the stuff to work well since it's all",
    "start": "578959",
    "end": "584320"
  },
  {
    "text": "done through the same executable it it's all done in a way that's compatible this means if you have a business service",
    "start": "584320",
    "end": "590399"
  },
  {
    "text": "team that's writing services in Java and a web service a web development team",
    "start": "590399",
    "end": "595480"
  },
  {
    "text": "that wants no JS services and maybe you're writing the server in C SHP and you have an Objective C uh team that's",
    "start": "595480",
    "end": "602320"
  },
  {
    "text": "writing a mobile app for a Windows phone or sorry an iPhone they're all able to actually have the code generated and you",
    "start": "602320",
    "end": "608959"
  },
  {
    "text": "know that things will work together so next I want to talk a little",
    "start": "608959",
    "end": "614079"
  },
  {
    "text": "bit about what is Cassandra well Cassandra is a distributed nosql data store built for",
    "start": "614079",
    "end": "621839"
  },
  {
    "start": "616000",
    "end": "669000"
  },
  {
    "text": "uh large volumes of data and and fast read write performance it is an open-",
    "start": "621839",
    "end": "626920"
  },
  {
    "text": "Source Apache project it's built uh with a no single point of",
    "start": "626920",
    "end": "632399"
  },
  {
    "text": "failure architecture and it's scalable uh and by scalable I mean it's built to be",
    "start": "632399",
    "end": "638760"
  },
  {
    "text": "horizontally scalable on commodity Hardware so if you go if you're going to scale something like a relational",
    "start": "638760",
    "end": "644680"
  },
  {
    "text": "database usually the way you scale it is vertically you get bigger servers with more processors more memory more dis",
    "start": "644680",
    "end": "650920"
  },
  {
    "text": "space with Cassandra uh being as uh being as it's built to be horizontally scalable that it what it means if you",
    "start": "650920",
    "end": "657399"
  },
  {
    "text": "need to get a bigger cluster you end up just adding more service to your cluster and those those servers tend to be",
    "start": "657399",
    "end": "663040"
  },
  {
    "text": "cheaper because they're more commodity",
    "start": "663040",
    "end": "666440"
  },
  {
    "start": "669000",
    "end": "755000"
  },
  {
    "text": "Hardware so a lot of people uh may be familiar with the cap theorem uh well",
    "start": "669639",
    "end": "675160"
  },
  {
    "text": "what the cap theorem States is there are three basic properties of of data stores consistency availability and partition",
    "start": "675160",
    "end": "682360"
  },
  {
    "text": "tolerance and that you can choose two of them well what consistency means is that",
    "start": "682360",
    "end": "687440"
  },
  {
    "text": "all nodes will see the same data at the same same time availability means that every request to the store will receive",
    "start": "687440",
    "end": "694000"
  },
  {
    "text": "a response and partition tolerance means that the system will continue can continue to work even during Network",
    "start": "694000",
    "end": "700320"
  },
  {
    "text": "failures well if you look at something like Oracle or SQL Server there they're both consistent and available all the",
    "start": "700320",
    "end": "707720"
  },
  {
    "text": "all the data is the same across any any of the parts of it and it's always a it",
    "start": "707720",
    "end": "712800"
  },
  {
    "text": "always every request receives or response the case of something like redis or mongod DB you basically all the",
    "start": "712800",
    "end": "719240"
  },
  {
    "text": "data will be the same and it's resilient to network failures that you know that's at the uh the cost of not always being",
    "start": "719240",
    "end": "725800"
  },
  {
    "text": "able to answer every request request well Cassandra it falls under uh what's known as an AP or an available and",
    "start": "725800",
    "end": "732720"
  },
  {
    "text": "partition tolerant data store so what that means is every request will receive a response it it's very it responds very",
    "start": "732720",
    "end": "739639"
  },
  {
    "text": "well to network failures you but what you lose is the ability for some of the nodes sometimes the nodes will not all",
    "start": "739639",
    "end": "746240"
  },
  {
    "text": "to see the same data so Cassandra is what's called an AP data store and it has what's called eventual consistency",
    "start": "746240",
    "end": "752440"
  },
  {
    "text": "we'll talk a little bit about what eventual consistency means here in a moment so another another comparison",
    "start": "752440",
    "end": "759399"
  },
  {
    "start": "755000",
    "end": "840000"
  },
  {
    "text": "that's often made between relational and the nosql world is the concept of an asset transaction so if you if you're",
    "start": "759399",
    "end": "765079"
  },
  {
    "text": "familiar with what asset compliant databases are basically an asset compliant database has four guarantees",
    "start": "765079",
    "end": "771000"
  },
  {
    "text": "it guarantees that every transaction is atomic meaning that they're all or nothing that they're consistent that",
    "start": "771000",
    "end": "776639"
  },
  {
    "text": "once data is uh that as soon as a trans action is completed all data is the same",
    "start": "776639",
    "end": "781880"
  },
  {
    "text": "that transactions are isolated in as much as a transa one transaction will not interfere with another transaction",
    "start": "781880",
    "end": "788399"
  },
  {
    "text": "and durable that once the transaction is done the results are permanent well part",
    "start": "788399",
    "end": "793720"
  },
  {
    "text": "of one of the problems with getting those four guarantees is it actually T tends to have a drag on the performance of your data store because that's some",
    "start": "793720",
    "end": "799920"
  },
  {
    "text": "of those guarantees actually require quite a bit to actually achieve well Cassandra is not an asset compliant data",
    "start": "799920",
    "end": "805160"
  },
  {
    "text": "store in the nosql world uh what you end up giving up sometime s is for some of those things in order to gain",
    "start": "805160",
    "end": "811480"
  },
  {
    "text": "performance is uh you know you end up giving up a couple of those guarantees and they've come up with this other",
    "start": "811480",
    "end": "817399"
  },
  {
    "text": "corollary or comparison uh called a base compliant database what that means is it",
    "start": "817399",
    "end": "823199"
  },
  {
    "text": "has a base availability where the data store is always working it has a soft state which means that stores are not",
    "start": "823199",
    "end": "829519"
  },
  {
    "text": "right consistent so data May differ between between uh nodes or replicas of the database or data store and that it's",
    "start": "829519",
    "end": "837120"
  },
  {
    "text": "eventually consistent this means that stores become consistent over time so uh now I want to talk a little",
    "start": "837120",
    "end": "844680"
  },
  {
    "start": "840000",
    "end": "947000"
  },
  {
    "text": "bit about what the Cassandra architecture is so the Cassandra is architected as a cluster it's a group of",
    "start": "844680",
    "end": "849920"
  },
  {
    "text": "servers it there's you don't really ever run just a single Cassandra server you actually run them as a large uh chunk of",
    "start": "849920",
    "end": "856600"
  },
  {
    "text": "servers and uh as part of that server there's a hierarchy inside the cluster",
    "start": "856600",
    "end": "862120"
  },
  {
    "text": "as to how things are built and scaled out in order to provide that no single point of failure style architecture so",
    "start": "862120",
    "end": "868959"
  },
  {
    "text": "the smallest the smallest part is a node well a node is a server um you know node",
    "start": "868959",
    "end": "874240"
  },
  {
    "text": "is a server on Next Step Up is a rack a rack is very similar to like a physical",
    "start": "874240",
    "end": "879279"
  },
  {
    "text": "Rack in a data center it can be a physical Rack or a logical rack but basically it's it's a set of servers",
    "start": "879279",
    "end": "885480"
  },
  {
    "text": "that will fail together if they fail usually if the rack fails uh usually in case of like if you want to think about",
    "start": "885480",
    "end": "891279"
  },
  {
    "text": "it as a actual data center you know they have the same power strip they have the same network well racks then are grouped",
    "start": "891279",
    "end": "898480"
  },
  {
    "text": "together together into what's called a data center a data center is made up as I said is made up of multiple racks which is made up of multiple nodes a",
    "start": "898480",
    "end": "905240"
  },
  {
    "text": "data center is very much the same as a physical data center it can be yet again be physical or logical and in Cassandra",
    "start": "905240",
    "end": "912519"
  },
  {
    "text": "you actually have the the ability to actually have multiple data centers so you may have one data center that's located here in Norway and another data",
    "start": "912519",
    "end": "919959"
  },
  {
    "text": "center that's located in the United States one of the unique features of Cassandra is the fact that data will be",
    "start": "919959",
    "end": "925320"
  },
  {
    "text": "automatically replicated between the two so you may so you can actually write data here in the in Europe and then read",
    "start": "925320",
    "end": "931440"
  },
  {
    "text": "it out of uh the Americas this means that if you have an international style uh problem that you're trying to solve",
    "start": "931440",
    "end": "937319"
  },
  {
    "text": "you're able to actually optimize your applications to write to the to read or write from the data center that's",
    "start": "937319",
    "end": "943120"
  },
  {
    "text": "closest to them without having your application actually be",
    "start": "943120",
    "end": "947800"
  },
  {
    "start": "947000",
    "end": "1064000"
  },
  {
    "text": "aware so the next thing I wanted to talk a bit about was the archit the hashing architecture of Cassandra so as I",
    "start": "953639",
    "end": "960319"
  },
  {
    "text": "mentioned Cassandra is U is built out as a cluster well in that cluster each node",
    "start": "960319",
    "end": "966839"
  },
  {
    "text": "uh there's this concept of what's known as a token ring a token ring uh is a set of unique tokens between two to the six",
    "start": "966839",
    "end": "973920"
  },
  {
    "text": "I think they run from 2 to the 63rd to 2 to the 63rd I don't remember the number of unique values that exists but that is",
    "start": "973920",
    "end": "981839"
  },
  {
    "text": "a number that I've never seen before um so for Simplicity sake here",
    "start": "981839",
    "end": "987600"
  },
  {
    "text": "I've just I've just uh shown it as 0 to 100 well the way that Cassandra works",
    "start": "987600",
    "end": "993639"
  },
  {
    "text": "and stores data is each node owns a portion of this token running so in this",
    "start": "993639",
    "end": "998800"
  },
  {
    "text": "case we have four nodes you know node zero owns 1 to 25 node 25 owns 25 to 50",
    "start": "998800",
    "end": "1004759"
  },
  {
    "text": "node 50 owns 50 to 75 and node 75 owns 75 to 100 well each node owns a certain",
    "start": "1004759",
    "end": "1012199"
  },
  {
    "text": "set of that token ring and um there's a piece of code inside Cassandra called",
    "start": "1012199",
    "end": "1017720"
  },
  {
    "text": "the partitioner well the partitioner basically generates uses a consistent hashing algorithm to generate a token",
    "start": "1017720",
    "end": "1024720"
  },
  {
    "text": "from a piece of the data that you reading or writing called the partition key we we'll talk a little bit more",
    "start": "1024720",
    "end": "1029959"
  },
  {
    "text": "about that in a few minutes about what that actually is but just know it's a piece of the data you're reading and writing from the from the data store",
    "start": "1029959",
    "end": "1036280"
  },
  {
    "text": "well it it takes that partition key it applies a hashing algorithm and then it basically from that it gets back a token",
    "start": "1036280",
    "end": "1042678"
  },
  {
    "text": "and that token is what determines which node owns that data um and one of the",
    "start": "1042679",
    "end": "1049160"
  },
  {
    "text": "key features as I mentioned was the no single point of failure aspect of Cassandra and because of that everything",
    "start": "1049160",
    "end": "1054679"
  },
  {
    "text": "is a here there's no master there's no slave so everything knows everything about all the nodes so all the nodes",
    "start": "1054679",
    "end": "1061960"
  },
  {
    "text": "know which token ranges belong to which nodes so here's a little example of how",
    "start": "1061960",
    "end": "1067880"
  },
  {
    "text": "tokens uh actually were going to work so you have a client he's making a call into node 75 uh you'll often see node uh",
    "start": "1067880",
    "end": "1075520"
  },
  {
    "text": "the node that's being written read or written to being being called the coordinator node so the first thing that",
    "start": "1075520",
    "end": "1081600"
  },
  {
    "text": "the coordinator node does is it takes the primary key out of the data that's being read well it find in this case",
    "start": "1081600",
    "end": "1088520"
  },
  {
    "text": "that the primary ke key is expiro it sends that Prim or sorry not the primary key the partition key it sends the",
    "start": "1088520",
    "end": "1095440"
  },
  {
    "text": "partition key to the partitioner which applies that consistent hashing algorithm that consistent hashing",
    "start": "1095440",
    "end": "1101480"
  },
  {
    "text": "algorithm will always send back the same data for the same partition key in this case the token uh that is returned is 12",
    "start": "1101480",
    "end": "1109679"
  },
  {
    "text": "so now that that we know that this right is going to whatever node owns the",
    "start": "1109679",
    "end": "1115200"
  },
  {
    "text": "partition key range that includes 12 well that partition key is owned by node",
    "start": "1115200",
    "end": "1120960"
  },
  {
    "text": "zero so that is how the data is determined where the data is written to so that after the data has been",
    "start": "1120960",
    "end": "1127840"
  },
  {
    "start": "1125000",
    "end": "1210000"
  },
  {
    "text": "written one of the other key architectural features of Cassandra is that data is replicated uh there's an uh n you can",
    "start": "1127840",
    "end": "1135000"
  },
  {
    "text": "specify the number of times data is replicated within a data center and that is called the replication factor or what",
    "start": "1135000",
    "end": "1141000"
  },
  {
    "text": "you'll see as RF uh one important thing to note here is all of this is done without the application having to have",
    "start": "1141000",
    "end": "1147600"
  },
  {
    "text": "any concept of how it actually works so the number of replicas and you",
    "start": "1147600",
    "end": "1153200"
  },
  {
    "text": "know uh is basically specifies the number of times the data is copied within a data center if you have",
    "start": "1153200",
    "end": "1158480"
  },
  {
    "text": "multiple data center setups you can actually specify different copying different number of times it's copied",
    "start": "1158480",
    "end": "1163880"
  },
  {
    "text": "between data centers so here in Norway you may say it's copied three times inside a data center in the United",
    "start": "1163880",
    "end": "1169840"
  },
  {
    "text": "States it may be copied twice uh that's uh one of the other key features is that",
    "start": "1169840",
    "end": "1174880"
  },
  {
    "text": "ability to actually tune that based on your needs uh and the last thing here is yet",
    "start": "1174880",
    "end": "1180960"
  },
  {
    "text": "again as part of the single point of failure if now I'm replicating this data multiple times what happens if one of my",
    "start": "1180960",
    "end": "1186600"
  },
  {
    "text": "nodes is down for some reason well there's this functionality in Tai Cassandra called a hinted handoff what",
    "start": "1186600",
    "end": "1192000"
  },
  {
    "text": "it means is the coordinator node that the node that you're basically writing or reading your data to Will basically",
    "start": "1192000",
    "end": "1198640"
  },
  {
    "text": "know okay I need to write to node one well node one's down it will store that data locally until such time as node one",
    "start": "1198640",
    "end": "1205200"
  },
  {
    "text": "comes back online and it'll then automatically sync that data back to it",
    "start": "1205200",
    "end": "1211159"
  },
  {
    "start": "1210000",
    "end": "1275000"
  },
  {
    "text": "so here's a little example of how data replication will actually work in real life so in this case we have a for node",
    "start": "1211159",
    "end": "1217320"
  },
  {
    "text": "cluster we have a replication factor of three that means the data is going to be written to three of these four nodes",
    "start": "1217320",
    "end": "1222880"
  },
  {
    "text": "well first thing that happens is a Right comes in to the coordinator node in this case the right is a",
    "start": "1222880",
    "end": "1229400"
  },
  {
    "text": "as we talked about next step is the partition key is pulled out of the right sent to the partitioner the partitioner",
    "start": "1229400",
    "end": "1236520"
  },
  {
    "text": "then sends back the token in this case 12 well node uh the coordinator node",
    "start": "1236520",
    "end": "1241679"
  },
  {
    "text": "noes that part knows that the token number with the number of 12 is owned by node one and it's written to node one at",
    "start": "1241679",
    "end": "1248640"
  },
  {
    "text": "the same time we know we need to replicate this data two more times so while it's being written to node one",
    "start": "1248640",
    "end": "1254480"
  },
  {
    "text": "it's actually written at the same time to nodes two and nodes three the way it the way the cluster determines what",
    "start": "1254480",
    "end": "1260200"
  },
  {
    "text": "nodes it needs to write to is if you have a replication factor of three and",
    "start": "1260200",
    "end": "1265320"
  },
  {
    "text": "it's owned by node one it just writes it to the next two nodes in this cluster so nodes two or node three if it was owned",
    "start": "1265320",
    "end": "1271000"
  },
  {
    "text": "by node two it would write it to node three and no node four as the replica",
    "start": "1271000",
    "end": "1276520"
  },
  {
    "start": "1275000",
    "end": "1493000"
  },
  {
    "text": "data so what does it mean to be eventually consistent it means that data",
    "start": "1280640",
    "end": "1286440"
  },
  {
    "text": "will eventually match on all the replicas this isn't in terms of seconds or hours or days it's actually in terms of",
    "start": "1286440",
    "end": "1292919"
  },
  {
    "text": "milliseconds in almost every case um one of the other key parts of eventual",
    "start": "1292919",
    "end": "1298039"
  },
  {
    "text": "consistency is what's known as the consistency level or what you often see respon uh written down as CL there are",
    "start": "1298039",
    "end": "1305039"
  },
  {
    "text": "11 different levels you can choose for writes and 10 different levels you can choose for reads but what consistency",
    "start": "1305039",
    "end": "1310320"
  },
  {
    "text": "level means is it's the number of replicas that have to respond back that",
    "start": "1310320",
    "end": "1316000"
  },
  {
    "text": "they've either read or written the data correctly in order for your request to succeed so even though it's being",
    "start": "1316000",
    "end": "1321039"
  },
  {
    "text": "written to three different replicas maybe you have your consistency level set to one which just means any one of",
    "start": "1321039",
    "end": "1327840"
  },
  {
    "text": "those has to respond back to me that it's written the data successfully for my for my my application my client",
    "start": "1327840",
    "end": "1333960"
  },
  {
    "text": "application to get back a successful uh act um well because you because of this",
    "start": "1333960",
    "end": "1342159"
  },
  {
    "text": "ability to be able to to be able to change how many uh you know how many replicas need to respond you can",
    "start": "1342159",
    "end": "1348120"
  },
  {
    "text": "actually tune the consistency level to affect the performance and availability of your uh your application because you",
    "start": "1348120",
    "end": "1354840"
  },
  {
    "text": "know let's take the example I just talked about where we had a you know a consistency level of one well if you",
    "start": "1354840",
    "end": "1360679"
  },
  {
    "text": "have a consistency level of one that means the fastest one to be able to write the data is going to be able to respond back to me first if I have a",
    "start": "1360679",
    "end": "1366799"
  },
  {
    "text": "consistency level there's another consistency level called Quorum which is very commonly used and basically it",
    "start": "1366799",
    "end": "1372000"
  },
  {
    "text": "stands it means a majority it means a majority of your replicas have to respond successfully in order for that",
    "start": "1372000",
    "end": "1377200"
  },
  {
    "text": "to happen that mean so in the case of a replication factor of three that means two of them if you had a replication",
    "start": "1377200",
    "end": "1382480"
  },
  {
    "text": "factor of five it would be three seven would be four and so on but that mean but the more time the more nodes that",
    "start": "1382480",
    "end": "1389480"
  },
  {
    "text": "you end up requiring to have written the data in order for your request to succeed the slower the performance of",
    "start": "1389480",
    "end": "1395000"
  },
  {
    "text": "your application is going to be well the other part of this is the availability there's a consistency level that's known",
    "start": "1395000",
    "end": "1401279"
  },
  {
    "text": "as all which means all of the replicas have to respond back so it's very similar to uh a a actually in that case",
    "start": "1401279",
    "end": "1408679"
  },
  {
    "text": "it's more like an assd transaction where everything has been written and all the data will be consistent the problem with",
    "start": "1408679",
    "end": "1414240"
  },
  {
    "text": "that is if any of those nodes are down now every request is going to fail so if you do if you choose that it's it's very",
    "start": "1414240",
    "end": "1421600"
  },
  {
    "text": "rarely actually used in real life because of that downside um but if you choose that know that any of your like",
    "start": "1421600",
    "end": "1428520"
  },
  {
    "text": "any of your requests will fail if one of your nodes is down um and lastly the you know",
    "start": "1428520",
    "end": "1434120"
  },
  {
    "text": "consistency level it can actually be tuned for read and write performance on a per query basis so different queries",
    "start": "1434120",
    "end": "1439760"
  },
  {
    "text": "can be tuned to have different consistency levels maybe you have one that you need all on because you really want to make sure that it if it's",
    "start": "1439760",
    "end": "1445880"
  },
  {
    "text": "written it's written to everywhere in that case you can actually use you know you can use all and maybe you have",
    "start": "1445880",
    "end": "1451360"
  },
  {
    "text": "another one where you don't have as you don't need as high a guarantee so you use consistency level of one uh the ones",
    "start": "1451360",
    "end": "1457440"
  },
  {
    "text": "you most commonly see use are one and Quorum well one Quorum and there's actually a another Concept in there",
    "start": "1457440",
    "end": "1464320"
  },
  {
    "text": "called local one and local Quorum and what that means is if you have multiple data centers it's only waiting for the",
    "start": "1464320",
    "end": "1470200"
  },
  {
    "text": "data in the local data center you're writing to it's not going to wait for anything to go across you know in the case of having one in Europe and one in",
    "start": "1470200",
    "end": "1476279"
  },
  {
    "text": "America you're not going to wait for anything to go across the ocean in order to do that uh and this is all t uh tuned",
    "start": "1476279",
    "end": "1482520"
  },
  {
    "text": "by basically the in Cassandra there's uh something called cql which stands for Cassandra query language which is",
    "start": "1482520",
    "end": "1489440"
  },
  {
    "text": "actually uh we'll see it here in a little bit but it's very SQL",
    "start": "1489440",
    "end": "1494679"
  },
  {
    "start": "1493000",
    "end": "1590000"
  },
  {
    "text": "like so why might you want to use like Cassandra over a relational database",
    "start": "1494919",
    "end": "1500200"
  },
  {
    "text": "well the number one reason probably is performance Cassandra is is optimized for high uh very fast read and write",
    "start": "1500200",
    "end": "1506880"
  },
  {
    "text": "performance and when I talk about very fast read and write performance we're talking singled digigit millisecond read",
    "start": "1506880",
    "end": "1511960"
  },
  {
    "text": "and write uh efforts it's pretty much something you're never going to be able to actually achieve out of a relational",
    "start": "1511960",
    "end": "1517399"
  },
  {
    "text": "model it's also linearly scalable what does I what do I mean by when I say linearly scalable I mean if you have",
    "start": "1517399",
    "end": "1523600"
  },
  {
    "text": "twice as many nodes in your cluster so if you have if you add twice as many to your cluster you will be able to process",
    "start": "1523600",
    "end": "1529399"
  },
  {
    "text": "twice as many transactions that's not really true in any relational database if you had twice as big a server you're",
    "start": "1529399",
    "end": "1535080"
  },
  {
    "text": "still not going to get twice the performance out of that database it's also natively built as a distributed",
    "start": "1535080",
    "end": "1540240"
  },
  {
    "text": "data store uh by and and what I mean by that is the fact that it is it's built",
    "start": "1540240",
    "end": "1545520"
  },
  {
    "text": "to handle data that's too big to fit on a single server so if you have a relational database and you need to",
    "start": "1545520",
    "end": "1551880"
  },
  {
    "text": "scale it up to data that's too big for a single server what do you end up doing you end up having to build clusters you",
    "start": "1551880",
    "end": "1557919"
  },
  {
    "text": "end up having to Shard it you end up having to do relatively complex exercises if anybody's had to go into",
    "start": "1557919",
    "end": "1564480"
  },
  {
    "text": "about this and that has a lot of overhead involved in actually getting it to work well since Cassandra is natively",
    "start": "1564480",
    "end": "1571399"
  },
  {
    "text": "built as a distributed technology it can handle pretty much any size scale of data you know terabytes tens of",
    "start": "1571399",
    "end": "1578279"
  },
  {
    "text": "terabytes hundreds of terabytes it doesn't matter and because of the distributed nature in which it's built",
    "start": "1578279",
    "end": "1584799"
  },
  {
    "text": "it's actually built for an always on style architecture so can actually have a cluster that is never not",
    "start": "1584799",
    "end": "1591960"
  },
  {
    "start": "1590000",
    "end": "1685000"
  },
  {
    "text": "available so if you start doing a lot of research on Apache Cassandra what you'll find is you'll find this concept of",
    "start": "1594760",
    "end": "1601640"
  },
  {
    "text": "you'll see a lot of references to data stacks and I just wanted to throw a little bit in there to say tell what the difference is so uh you don't get",
    "start": "1601640",
    "end": "1608000"
  },
  {
    "text": "confused like I did when I first started well so as I mentioned Apache Cassandra is an open-source free project what data",
    "start": "1608000",
    "end": "1615840"
  },
  {
    "text": "Stacks is is data stacks provides a commercial version of that project with additional features added uh some of",
    "start": "1615840",
    "end": "1622720"
  },
  {
    "text": "those additional features are it has a full text it has integration with a full text indexer uh based on Apache solar it",
    "start": "1622720",
    "end": "1630720"
  },
  {
    "text": "also has uh integration with a uh Analytics tool based on Apache spark uh",
    "start": "1630720",
    "end": "1636520"
  },
  {
    "text": "so those two things are tightly integrated that's available in datax has two additions there's Community Edition which is free and there is an Enterprise",
    "start": "1636520",
    "end": "1644279"
  },
  {
    "text": "Edition the Enterprise Edition also adds some additional features around Enterprise level security integration",
    "start": "1644279",
    "end": "1650279"
  },
  {
    "text": "with the active directory uh has some additional Tools around man automating some of the management tasks you end up",
    "start": "1650279",
    "end": "1656679"
  },
  {
    "text": "having to do with a Cassandra cluster and uh uh there's a tool it also comes with it called op Center which is a very",
    "start": "1656679",
    "end": "1662600"
  },
  {
    "text": "nice way to monitor the uh the health and per and uh performance functionality of your cluster and probably the last",
    "start": "1662600",
    "end": "1669919"
  },
  {
    "text": "and most the biggest reason uh I see a lot of people do it is it comes with a support ticket if you know being an open",
    "start": "1669919",
    "end": "1675799"
  },
  {
    "text": "source product if it breaks on you you you end up having to go to news groups you end up having to you know post things on stack Overflow to get help",
    "start": "1675799",
    "end": "1682519"
  },
  {
    "text": "well if you have the Enterprise version you actually have someone you can call so next I wanted to talk a little",
    "start": "1682519",
    "end": "1689360"
  },
  {
    "start": "1685000",
    "end": "1700000"
  },
  {
    "text": "bit about a pro you know here's a problem where you may want to start thinking you may want to actually uh use",
    "start": "1689360",
    "end": "1694600"
  },
  {
    "text": "you know grpc and uh Cassandra instead of a rest and relational databased sort",
    "start": "1694600",
    "end": "1700200"
  },
  {
    "start": "1700000",
    "end": "1724000"
  },
  {
    "text": "of model so you write you work for a company that does a SAS product for",
    "start": "1700200",
    "end": "1705440"
  },
  {
    "text": "truck that monitors truck engine sensors basically you know you currently have like a thousand truck thousand trucks in",
    "start": "1705440",
    "end": "1712519"
  },
  {
    "text": "your Fleet and you take readings every 10 seconds this is built on a web API uh you know rest set of services on top of",
    "start": "1712519",
    "end": "1719399"
  },
  {
    "text": "a SQL Server database I'm guessing we've all built something probably very similar to this",
    "start": "1719399",
    "end": "1725159"
  },
  {
    "start": "1724000",
    "end": "1758000"
  },
  {
    "text": "before well you recently just landed a huge new client they love the UI they love how the the product works they just",
    "start": "1725159",
    "end": "1732120"
  },
  {
    "text": "want some changes to how the data is actually read out of how the data is captured instead of reading it once",
    "start": "1732120",
    "end": "1737960"
  },
  {
    "text": "every 10 seconds they now want to read it once every second they also want to add lat latitude and longitude",
    "start": "1737960",
    "end": "1743120"
  },
  {
    "text": "information from their trucks GPS's so they can see not only where it failed or not only when it failed but where it was",
    "start": "1743120",
    "end": "1748799"
  },
  {
    "text": "at at the time they're adding they're going to add 10,000 trucks to the to your system and part of the contract was",
    "start": "1748799",
    "end": "1754760"
  },
  {
    "text": "you needed to minimize their cost and provide them a zero downtime environment well what what's the problem",
    "start": "1754760",
    "end": "1762240"
  },
  {
    "start": "1758000",
    "end": "1784000"
  },
  {
    "text": "well now you've gone from a a Lo a transaction load of about a 100 measurements a second to 22,000",
    "start": "1762240",
    "end": "1768919"
  },
  {
    "text": "measurements a second it's a relatively large increase uh and you know your data",
    "start": "1768919",
    "end": "1774279"
  },
  {
    "text": "load's gone from about 35 megabytes a day to 2.2 gigabytes well your architecture is going to need to change",
    "start": "1774279",
    "end": "1780399"
  },
  {
    "text": "in some way to handle this additional increase in scale I think we can all agree so here's the solution I'm",
    "start": "1780399",
    "end": "1787200"
  },
  {
    "start": "1784000",
    "end": "1823000"
  },
  {
    "text": "proposing um which just uh in case you are interested all the code is available on GitHub if you want to take a look at",
    "start": "1787200",
    "end": "1793120"
  },
  {
    "text": "what we did here well the solution I'm proposing is first first off we're going to change",
    "start": "1793120",
    "end": "1798200"
  },
  {
    "text": "out the SQL Server database for a Cassandra cluster this will provide some of the scalability of not only the",
    "start": "1798200",
    "end": "1803799"
  },
  {
    "text": "transactional load that's going to be required but also the data load that's going to be required because at 2.2",
    "start": "1803799",
    "end": "1809519"
  },
  {
    "text": "gigabytes a day how quickly is that going to take to fill up a single server won't take that long and we're going to replace our rest",
    "start": "1809519",
    "end": "1816919"
  },
  {
    "text": "s based our rest based set of services with a grpc based set of",
    "start": "1816919",
    "end": "1824240"
  },
  {
    "start": "1823000",
    "end": "1910000"
  },
  {
    "text": "services so the first step here is to define the",
    "start": "1826240",
    "end": "1833559"
  },
  {
    "text": "model and service we've seen this a little bit already uh with uh earlier on",
    "start": "1833559",
    "end": "1839440"
  },
  {
    "text": "where this is basically using protocol buffers to Define out the models and",
    "start": "1839440",
    "end": "1844559"
  },
  {
    "text": "service end services and service endpoints that you're going to have so in this case you have a service endpoint",
    "start": "1844559",
    "end": "1849600"
  },
  {
    "text": "called Trucking it's got two different uh you have a service called Trucking it has two different endpoints one of them",
    "start": "1849600",
    "end": "1855840"
  },
  {
    "text": "is called a record location and the other one is called read last location",
    "start": "1855840",
    "end": "1862159"
  },
  {
    "text": "what the um so if you look at read last location what it's going to do is it's going to take in a trip object and it's going to return back a point object so",
    "start": "1862159",
    "end": "1869120"
  },
  {
    "text": "it will read the last location that's been stored in the system and then you have one called record location and this is where it",
    "start": "1869120",
    "end": "1875760"
  },
  {
    "text": "kind of gets a little bit interesting from an API standpoint this is one that actually will take a stream of points",
    "start": "1875760",
    "end": "1881559"
  },
  {
    "text": "and return back a stream of responses so this is one of this is an example of how you can set up that directional",
    "start": "1881559",
    "end": "1887799"
  },
  {
    "text": "streaming uh functionality that I talked about with that grpc had so you're able",
    "start": "1887799",
    "end": "1893840"
  },
  {
    "text": "to set that up uh that way uh you'll notice then there's a few objects of a point uh one of the things to notice",
    "start": "1893840",
    "end": "1900000"
  },
  {
    "text": "about the point is the first property is actually another object so with with protocol buffers you are able to build",
    "start": "1900000",
    "end": "1906120"
  },
  {
    "text": "out complex domain objects and transmit them back and forth across the wire so now that we've defined our",
    "start": "1906120",
    "end": "1914720"
  },
  {
    "text": "server our client and server Subs sorry the text is actually pretty wonky here uh",
    "start": "1914720",
    "end": "1920679"
  },
  {
    "text": "what you'll see at the top there if you could read it is that um basically this",
    "start": "1920679",
    "end": "1926120"
  },
  {
    "text": "is the code that you'll need to the command line tool code that you'll need to run to actually generate out the",
    "start": "1926120",
    "end": "1931760"
  },
  {
    "text": "client and server stubs uh what you can see is basically it's a call to that",
    "start": "1931760",
    "end": "1937080"
  },
  {
    "text": "protoc C file and then it's a bunch of command line arguments to specify where the file you want to write uh where the",
    "start": "1937080",
    "end": "1943440"
  },
  {
    "text": "the Proto file is that you want to actually compile and where you want the outputs to go and what you want those",
    "start": "1943440",
    "end": "1948559"
  },
  {
    "text": "outputs to be unfortunately I know most of us all hear Windows guys and don't really like command line stuff but at",
    "start": "1948559",
    "end": "1954559"
  },
  {
    "text": "this point there is no uh gooey to toolkit to do this but like I said it's",
    "start": "1954559",
    "end": "1960000"
  },
  {
    "text": "still a relatively new technology so I expect that will probably come along at some point here in the future so you run",
    "start": "1960000",
    "end": "1966399"
  },
  {
    "text": "that command that big long command and what do you get out of it you end up getting out two separate uh CS files one",
    "start": "1966399",
    "end": "1972360"
  },
  {
    "text": "of those files will be called Trucking service. Cs and that will contain all your model definition definitions the",
    "start": "1972360",
    "end": "1978240"
  },
  {
    "text": "other one is called Trucking Service grpc and that will contain the the grpc",
    "start": "1978240",
    "end": "1983760"
  },
  {
    "text": "client and the client stub and the server interface that you will need to",
    "start": "1983760",
    "end": "1988840"
  },
  {
    "text": "actually Implement for your service so now that we've created the service uh",
    "start": "1988840",
    "end": "1995880"
  },
  {
    "start": "1991000",
    "end": "2229000"
  },
  {
    "text": "now that we've defined the service and we've created the stubs the next step is to go and actually create the key space",
    "start": "1995880",
    "end": "2001760"
  },
  {
    "text": "in the table so in Cassandra you have what's called a keyspace a key space is",
    "start": "2001760",
    "end": "2007159"
  },
  {
    "text": "basically the same as a database is in SQL Server it's a collection of tables",
    "start": "2007159",
    "end": "2012320"
  },
  {
    "text": "um what you can see here is that the",
    "start": "2012320",
    "end": "2017759"
  },
  {
    "text": "uh so what you see here is actually this is all cql that you're seeing on screen",
    "start": "2018880",
    "end": "2024080"
  },
  {
    "text": "here as you'll notice it's very similar to the way SQL looks and it's actually",
    "start": "2024080",
    "end": "2029639"
  },
  {
    "text": "very similar to the way SQL functions so first thing you'll see here is that we're going to create a keyspace called",
    "start": "2029639",
    "end": "2035720"
  },
  {
    "text": "NDC Oslo uh which is which with that we'll just do is create a new keyspace called NDC",
    "start": "2035720",
    "end": "2041880"
  },
  {
    "text": "Oslo and then we're going to set the replication on it uh this is where you are able to set the replication factor",
    "start": "2041880",
    "end": "2047760"
  },
  {
    "text": "of your uh system we talked about the replication Factor earlier is the number of nodes that data is copied to well",
    "start": "2047760",
    "end": "2053560"
  },
  {
    "text": "there's a couple of properties you can set the first being the class there's there's two separate classes you can set",
    "start": "2053560",
    "end": "2059079"
  },
  {
    "text": "if you're working on a single data center you use what's called Simple strategy uh and then you can set the",
    "start": "2059079",
    "end": "2066079"
  },
  {
    "text": "replication Factor in this case I have it set to one because I was running this on a single node cluster just not much",
    "start": "2066079",
    "end": "2071599"
  },
  {
    "text": "of a cluster but uh the other one is uh if you're working in a multi- DAT Center environment you'll get uh there's one",
    "start": "2071599",
    "end": "2078320"
  },
  {
    "text": "called Network topology strategy the interesting thing about Network topology strategy is that you're able to set the",
    "start": "2078320",
    "end": "2083358"
  },
  {
    "text": "replication factor on a per data center basis so you can set up multiple data centers they can be of different sizes",
    "start": "2083359",
    "end": "2089878"
  },
  {
    "text": "and you'll still actually be able to set different replication factors on them so once you run that command it'll",
    "start": "2089879",
    "end": "2095960"
  },
  {
    "text": "basically create your our keyspace the next thing we're going to do is run a use command which will just put you in the context of NDC Oslo this is exactly",
    "start": "2095960",
    "end": "2103400"
  },
  {
    "text": "the same as doing a use command in SQL so now that we're in the context of",
    "start": "2103400",
    "end": "2109240"
  },
  {
    "text": "the keyspace we've created we're going to create a new table this should look very familiar pretty much to anybody",
    "start": "2109240",
    "end": "2115280"
  },
  {
    "text": "that's done a lot of SQL I'm just going to create a table called location by trip ID I'm going to set a few",
    "start": "2115280",
    "end": "2121359"
  },
  {
    "text": "properties you know there's a truck name a manufacturer a trip ID a time a",
    "start": "2121359",
    "end": "2126920"
  },
  {
    "text": "latitude and a longitude I guess one key thing to note is if you're actually using Cassandra the time stamp is all in",
    "start": "2126920",
    "end": "2132760"
  },
  {
    "text": "Unix time epic which can be kind of interesting to get to from a net world",
    "start": "2132760",
    "end": "2137960"
  },
  {
    "text": "if you have never had that fun so the last part you'll see there is actually the primary key so the primary key is uh",
    "start": "2137960",
    "end": "2145720"
  },
  {
    "text": "not the same as a primary key in a relational database in a relational database the primary key is used as an",
    "start": "2145720",
    "end": "2151280"
  },
  {
    "text": "index and it's used to actually provide uh relational uh data Integrity across",
    "start": "2151280",
    "end": "2156480"
  },
  {
    "text": "tables in Cassandra what it's actually used for is it's made up of two separate parts",
    "start": "2156480",
    "end": "2161599"
  },
  {
    "text": "the two parts are the partition key and the clustering Keys uh what you'll see in this example is we have truck name",
    "start": "2161599",
    "end": "2168839"
  },
  {
    "text": "manufacturer and trip ID and those are what can are are inside a set of parentheses and that's what makes the",
    "start": "2168839",
    "end": "2175200"
  },
  {
    "text": "partition key uh if you remember from earlier the partition key is the piece of data that is taken and given to the",
    "start": "2175200",
    "end": "2182440"
  },
  {
    "text": "partitioner in order to make the token and the token is determines which node owns that data so that's what the",
    "start": "2182440",
    "end": "2190319"
  },
  {
    "text": "partition key does the key uh the key after that is the clustering keys right now I only have one clustering key of",
    "start": "2190319",
    "end": "2195960"
  },
  {
    "text": "time you can have many clustering keys and then you can specify the order in which you actually want them to be",
    "start": "2195960",
    "end": "2201280"
  },
  {
    "text": "written out ascending or descending order well the point of the clustering Keys is so once you know that the data",
    "start": "2201280",
    "end": "2207359"
  },
  {
    "text": "is going to be written to node one for example what what actually happens on the C on the actual Cassandra node when",
    "start": "2207359",
    "end": "2213280"
  },
  {
    "text": "the data is written it's written each partition is written to a separate file file well once it's written to a",
    "start": "2213280",
    "end": "2219160"
  },
  {
    "text": "separate file the clustering Keys tell you what order to write the data into the fil in in this case the data will",
    "start": "2219160",
    "end": "2225240"
  },
  {
    "text": "physically be written into the file in time descending",
    "start": "2225240",
    "end": "2229680"
  },
  {
    "start": "2229000",
    "end": "2558000"
  },
  {
    "text": "order so now that we've created our databas or created our keyspace we've created our table we've created our",
    "start": "2230520",
    "end": "2236280"
  },
  {
    "text": "stubs and we've created our uh our objects the next step is to actually",
    "start": "2236280",
    "end": "2241480"
  },
  {
    "text": "attach to the the cluster and start doing some work well uh there's an open source uh C",
    "start": "2241480",
    "end": "2248119"
  },
  {
    "text": "driver that's provided by data Stacks at the uh address you'll see there and basically if you want to connect to the",
    "start": "2248119",
    "end": "2253480"
  },
  {
    "text": "cluster you basically build it out as you see here you know you're basically do a cluster. builder and then you add",
    "start": "2253480",
    "end": "2259800"
  },
  {
    "text": "contact points well in in this case I'm showing you want add I'm showing adding multiple contact points well why would",
    "start": "2259800",
    "end": "2265760"
  },
  {
    "text": "you want to add multiple contact points well the reason you want to add multiple contact points is one it provides the",
    "start": "2265760",
    "end": "2271440"
  },
  {
    "text": "ability for no single point of failure because say in this case node two is down if that was the only contact point",
    "start": "2271440",
    "end": "2276640"
  },
  {
    "text": "point there listed there your application would not be able to actually read or write data from the thing the second part is you want to be",
    "start": "2276640",
    "end": "2283040"
  },
  {
    "text": "able to spread the load of those reads those read requests and those write requests across the different nodes in",
    "start": "2283040",
    "end": "2288920"
  },
  {
    "text": "your cluster since every node in the cluster is a pier there is no master any node can handle a read and write request",
    "start": "2288920",
    "end": "2295839"
  },
  {
    "text": "so if you put all the nodes in your driver what will actually happen behind the scenes is the driver will",
    "start": "2295839",
    "end": "2301839"
  },
  {
    "text": "automatically round robin across the different nodes to spread the load out that way not one load is not that way",
    "start": "2301839",
    "end": "2307960"
  },
  {
    "text": "one node is not taking the majority of the read and write requests so it helps prevent uh overloading a single node in",
    "start": "2307960",
    "end": "2314520"
  },
  {
    "text": "your cluster and slowing down the performance of the cluster as a",
    "start": "2314520",
    "end": "2319040"
  },
  {
    "text": "whole so now that we're able now we've connected to the cluster the first thing",
    "start": "2324480",
    "end": "2330160"
  },
  {
    "text": "we want to do is write some data to it well if you're familiar with SQL as I'm",
    "start": "2330160",
    "end": "2335599"
  },
  {
    "text": "guessing probably every body here is this should look very familiar to you you're just going to insert data into",
    "start": "2335599",
    "end": "2341960"
  },
  {
    "text": "the table name then you're going to specify the columns that you want to insert and then you're going to specify",
    "start": "2341960",
    "end": "2348000"
  },
  {
    "text": "the values that you want to insert into that column I mean you could take this and pull it right into a SQL database",
    "start": "2348000",
    "end": "2353839"
  },
  {
    "text": "and it would work just fine one interesting fact to note about Cassandra is when you're doing inserts or updates",
    "start": "2353839",
    "end": "2360440"
  },
  {
    "text": "in Cassandra it does what's called an upsert it's actually this is actually a not uncommon thing in many no SQL",
    "start": "2360440",
    "end": "2366480"
  },
  {
    "text": "databases and what an upsert is is if you're familiar with a SQL merge statement it's the same functionality",
    "start": "2366480",
    "end": "2373119"
  },
  {
    "text": "what it means is if the data exists it will update that data if the data does not exist it will insert that",
    "start": "2373119",
    "end": "2381720"
  },
  {
    "text": "data so now that we've successfully written data to the data stores let's read some data back from it well how do",
    "start": "2386839",
    "end": "2394319"
  },
  {
    "text": "I go about reading data back from it well you again write a cql command which is very similar to the SQL command you",
    "start": "2394319",
    "end": "2401520"
  },
  {
    "text": "know I'm going to select star from my table name where some filtering criteria in this",
    "start": "2401520",
    "end": "2407680"
  },
  {
    "text": "case the truck name the manufacturer and the trip ID and then there's this idea",
    "start": "2407680",
    "end": "2413839"
  },
  {
    "text": "of called limit one uh what I'm doing here is I'm actually limiting it to only the top result so I will actually only",
    "start": "2413839",
    "end": "2419680"
  },
  {
    "text": "get back the last Red the last location ever written by time that's where the clustering Keys come in it's very",
    "start": "2419680",
    "end": "2425359"
  },
  {
    "text": "similar to the concept of a top one in SQL so couple interesting things to note",
    "start": "2425359",
    "end": "2431640"
  },
  {
    "text": "here is there are some constraints around how you can actually filter data",
    "start": "2431640",
    "end": "2437280"
  },
  {
    "text": "in cql in cql you can do a select star from a table in which case it will go",
    "start": "2437280",
    "end": "2444319"
  },
  {
    "text": "out it will scan every cluster in the table or every CL every node in the cluster for that table information and",
    "start": "2444319",
    "end": "2450599"
  },
  {
    "text": "try to coate it together if you try to do that on any on a cluster of any size",
    "start": "2450599",
    "end": "2455760"
  },
  {
    "text": "it'll probably time out it doesn't usually take too long before you get to the level of it just times out before it",
    "start": "2455760",
    "end": "2461599"
  },
  {
    "text": "actually is able to process all that data so if you want to add a filtering criteria to it there there are some",
    "start": "2461599",
    "end": "2468280"
  },
  {
    "text": "constraints some of those constraints uh are the first one is if you're going to add a filtering criteria you have to add",
    "start": "2468280",
    "end": "2475560"
  },
  {
    "text": "at minimum every key in the partition key as an equality Clause this means",
    "start": "2475560",
    "end": "2482240"
  },
  {
    "text": "because my partition key consisted of truck name manufacturer and trip ID I",
    "start": "2482240",
    "end": "2487839"
  },
  {
    "text": "have to have truck name manufacturer and trip ID as equality Clauses in my uh",
    "start": "2487839",
    "end": "2494800"
  },
  {
    "text": "filtering in my wear clause in my filtering Clause that's because as we said those are the three items that are",
    "start": "2494800",
    "end": "2501160"
  },
  {
    "text": "used to determine used by the partitioner to determine the token so",
    "start": "2501160",
    "end": "2506640"
  },
  {
    "text": "what the way that work the way it works is it takes us when you do a select query it takes those three keys it finds",
    "start": "2506640",
    "end": "2513280"
  },
  {
    "text": "out what the token is and then it's able to very quickly go straight to the node that owns that data to the file that",
    "start": "2513280",
    "end": "2519000"
  },
  {
    "text": "owns that data and pull that data back out that's one of the ways in which the performance of Cassandra is enhanced by",
    "start": "2519000",
    "end": "2524960"
  },
  {
    "text": "adding that constraint on the second constraint is if you want to actually filter or if you want to filter on",
    "start": "2524960",
    "end": "2531000"
  },
  {
    "text": "anything beyond the partition key those must be one of the clustering keys so",
    "start": "2531000",
    "end": "2536480"
  },
  {
    "text": "you have to have uh so basically in this case the only additional item uh column that I could actually search on is time",
    "start": "2536480",
    "end": "2544119"
  },
  {
    "text": "because it was the only clustering key I added into CL uh if you're searching on that those can be INE equality searches if they're",
    "start": "2544119",
    "end": "2551520"
  },
  {
    "text": "clustering keys but they have to be equality Keys uh equality searches if they are partition",
    "start": "2551520",
    "end": "2558599"
  },
  {
    "start": "2558000",
    "end": "2837000"
  },
  {
    "text": "keys so uh next I want to actually show you a little bit of running",
    "start": "2558880",
    "end": "2564720"
  },
  {
    "text": "code so what you'll see here uh this is actually the client side of the",
    "start": "2565359",
    "end": "2572160"
  },
  {
    "text": "application what what we were showing before was everything that's written on the server side so this is the client",
    "start": "2572160",
    "end": "2577240"
  },
  {
    "text": "side so in order to create a client basically the first thing I have to do is I have to set up a Channel all a",
    "start": "2577240",
    "end": "2583200"
  },
  {
    "text": "channel is is specifies essentially where is the end point I'm going to be talking to since this is over you know",
    "start": "2583200",
    "end": "2589160"
  },
  {
    "text": "since it's over HTTP key in this case I'm actually going to run it against Local Host uh on Port",
    "start": "2589160",
    "end": "2598480"
  },
  {
    "text": "50,51 uh first thing I do is come in here and I start I basically start a new",
    "start": "2598480",
    "end": "2605240"
  },
  {
    "text": "uh asynchronous tab called start truck recording well let's go look at start truck recording well start truck",
    "start": "2605240",
    "end": "2611240"
  },
  {
    "text": "recording first thing it does is it creates a new Trucking client uh that is the client stub that was generated by",
    "start": "2611240",
    "end": "2619359"
  },
  {
    "text": "the uh generated from the definition so between these two things I have now been",
    "start": "2619359",
    "end": "2624839"
  },
  {
    "text": "able to connect those two lines of code will basically now connect your client to your server much simpler than a rest style",
    "start": "2624839",
    "end": "2632680"
  },
  {
    "text": "architecture well first thing next thing I'm going to do is I'm going to basically set up a call to record uh to",
    "start": "2632680",
    "end": "2639400"
  },
  {
    "text": "record location record location if we remember was that bir directional streaming endpoint so we can actually",
    "start": "2639400",
    "end": "2646079"
  },
  {
    "text": "this this is an example of how you actually will write a bidirectional streaming to be able to stream data back and forth you know the theory in this",
    "start": "2646079",
    "end": "2651800"
  },
  {
    "text": "case is a truck you know when a truck starts up it connects once and then it's able to stream data back and forth to",
    "start": "2651800",
    "end": "2658119"
  },
  {
    "text": "get and what it's actually doing to stream it'll stream uh latitude and longitude data and it will send back the",
    "start": "2658119",
    "end": "2664319"
  },
  {
    "text": "actual time it took to write the data out uh that becomes important because the first step here is we're going to set up",
    "start": "2664319",
    "end": "2671240"
  },
  {
    "text": "an asynchronous task to basically wait for those response messages to come",
    "start": "2671240",
    "end": "2676680"
  },
  {
    "text": "in so those response messages come in uh the way I have this written is it'll",
    "start": "2676680",
    "end": "2682240"
  },
  {
    "text": "write every fifth it'll basically has it writes every fifth response message that",
    "start": "2682240",
    "end": "2687680"
  },
  {
    "text": "comes in it will take the average of that data it will then call a read last",
    "start": "2687680",
    "end": "2693160"
  },
  {
    "text": "location so you can see how so it will actually write it would actually read data out of the data source and then it",
    "start": "2693160",
    "end": "2698440"
  },
  {
    "text": "will print all that information with those times out so uh after you set up the task to",
    "start": "2698440",
    "end": "2705160"
  },
  {
    "text": "read the responses back what the next step is to actually",
    "start": "2705160",
    "end": "2710599"
  },
  {
    "text": "basically just start sending data in so uh this code all it does is create a new",
    "start": "2710599",
    "end": "2716240"
  },
  {
    "text": "point with some some madeup data and write that asynchronously once a second",
    "start": "2716240",
    "end": "2722480"
  },
  {
    "text": "to the server",
    "start": "2722480",
    "end": "2727880"
  },
  {
    "text": "is",
    "start": "2734960",
    "end": "2737240"
  },
  {
    "text": "R so what you'll see here is it's now these the servers are connecting together uh that that first one is",
    "start": "2741520",
    "end": "2748960"
  },
  {
    "text": "because the server had not started out by the time it tried to connect so you'll see it's writing out data and",
    "start": "2748960",
    "end": "2754240"
  },
  {
    "text": "it's taking about 178 or 170 or so milliseconds to read",
    "start": "2754240",
    "end": "2759760"
  },
  {
    "text": "and write data to and from the cluster well that doesn't seem super uh",
    "start": "2759760",
    "end": "2766319"
  },
  {
    "text": "performant to me I don't know about you guys but 170 milliseconds is pretty slow however that's because the cluster this",
    "start": "2766319",
    "end": "2774000"
  },
  {
    "text": "is currently writing to is located in Oregon in the United States it's about 7700 kmet away and has about a roundtrip",
    "start": "2774000",
    "end": "2782240"
  },
  {
    "text": "ping time of about 164 milliseconds so if you figure 164 milliseconds out of",
    "start": "2782240",
    "end": "2788920"
  },
  {
    "text": "you take you subtract that from the 170 milliseconds we were seeing it means it was taken about five SEC 5 milliseconds",
    "start": "2788920",
    "end": "2794440"
  },
  {
    "text": "to write that data out which seems a lot better to me um if you'll can see on the left or on the right there I uh actually",
    "start": "2794440",
    "end": "2801359"
  },
  {
    "text": "ran this locally in a data center in Oregon to get more realistic numbers and",
    "start": "2801359",
    "end": "2806599"
  },
  {
    "text": "the numbers there were anywhere from about 1 to 5 Mill seconds to actually write I think that's probably a little",
    "start": "2806599",
    "end": "2812559"
  },
  {
    "text": "bit misleading I think at that point you're down into the the accuracy of the net stopwatch class because I don't",
    "start": "2812559",
    "end": "2818720"
  },
  {
    "text": "think it was actually reading and writing within a millisecond it seems a little too fast from for my uh from my",
    "start": "2818720",
    "end": "2824559"
  },
  {
    "text": "experience but I have seen uh many times in in my experience I have seen where that data will be read and written in",
    "start": "2824559",
    "end": "2832079"
  },
  {
    "text": "about somewhere between 3 to 10",
    "start": "2832079",
    "end": "2836559"
  },
  {
    "start": "2837000",
    "end": "2981000"
  },
  {
    "text": "milliseconds so now I just wanted to talk a little bit about some of the tradeoffs between grpc uh when using G",
    "start": "2838520",
    "end": "2845760"
  },
  {
    "text": "RPC in Cassandra so some of the trade-offs when using grpc first off and probably the",
    "start": "2845760",
    "end": "2852720"
  },
  {
    "text": "biggest trade-off at least from my perspective when using grpc is that it's not for browsers at this point",
    "start": "2852720",
    "end": "2858640"
  },
  {
    "text": "unfortunately there is uh it relies heavily on http2 HTTP trailers",
    "start": "2858640",
    "end": "2864480"
  },
  {
    "text": "functionality and so far none of modern browsers have had a robust enough implementation of it in order for them",
    "start": "2864480",
    "end": "2872040"
  },
  {
    "text": "to be able to build a client against it uh there is hope that this will will be coming in the future I I really hope to",
    "start": "2872040",
    "end": "2878640"
  },
  {
    "text": "see this in the future uh because it would it would make it so much more useful the other part is if you have",
    "start": "2878640",
    "end": "2884760"
  },
  {
    "text": "large messages that you're passing back and forth anything larger than about a megabyte you end up uh having to chunk",
    "start": "2884760",
    "end": "2891119"
  },
  {
    "text": "that data theor the theoretically uh theoretically you can write grpc messages are up to about I think it's 63",
    "start": "2891119",
    "end": "2897520"
  },
  {
    "text": "megabytes but the Practical limit in what they suggest you use is no longer than 1 Megabyte this means if you have a",
    "start": "2897520",
    "end": "2904760"
  },
  {
    "text": "you know 5 megab file you have to chunk that data up you have to send it back and forth and unfortunately there's no",
    "start": "2904760",
    "end": "2910359"
  },
  {
    "text": "built-in functionality currently in grpc to handle the chunking so you end up having to write it",
    "start": "2910359",
    "end": "2916400"
  },
  {
    "text": "yourself also uh in do in protocol buffers version three which is what all",
    "start": "2916400",
    "end": "2922480"
  },
  {
    "text": "of this runs uh which is what all grpc runs on there's no support for nullable data types I find this relatively",
    "start": "2922480",
    "end": "2929720"
  },
  {
    "text": "annoying because if you get end up getting having a value that's an integer and it comes across as a zero does that",
    "start": "2929720",
    "end": "2935040"
  },
  {
    "text": "mean it's a zero or does that mean it's a null you end up having to do some work",
    "start": "2935040",
    "end": "2940200"
  },
  {
    "text": "that has to be a liation in",
    "start": "2940200",
    "end": "2943880"
  },
  {
    "text": "the option it's it's optional but when when",
    "start": "2947760",
    "end": "2952920"
  },
  {
    "text": "it's generate yes",
    "start": "2952920",
    "end": "2956078"
  },
  {
    "text": "it'ses yes yes yeah uh and probably one of the other things especially if you",
    "start": "2961000",
    "end": "2966319"
  },
  {
    "text": "want to use us in production is there it's still a Beta release so it's it's a Beta release so a lot of places uh",
    "start": "2966319",
    "end": "2972839"
  },
  {
    "text": "especially a lot of Enterprises won't allow you to use it in production yet it's a strong beta I think it's on beta",
    "start": "2972839",
    "end": "2978200"
  },
  {
    "text": "14 at this point uh so it's been around for a while so what are some of the trade-offs",
    "start": "2978200",
    "end": "2984960"
  },
  {
    "start": "2981000",
    "end": "3157000"
  },
  {
    "text": "when using Cassandra well probably the biggest trade-off when using Cassandra and the biggest limitation that you'll",
    "start": "2984960",
    "end": "2990480"
  },
  {
    "text": "actually run into is the fact that you are not allowed to join between tables in Cassandra so so uh what that means is",
    "start": "2990480",
    "end": "2998079"
  },
  {
    "text": "it means exactly what I said as far as every if you want to get data out of a table in Cassandra all that data must",
    "start": "2998079",
    "end": "3004640"
  },
  {
    "text": "live in one table this leads to a lot of denormalization denormalization and data",
    "start": "3004640",
    "end": "3010680"
  },
  {
    "text": "duplication um basically when you do data modeling in Cassandra it is far",
    "start": "3010680",
    "end": "3016280"
  },
  {
    "text": "more important uh than it ever was in like a relational model because you have to build your your basically your",
    "start": "3016280",
    "end": "3022680"
  },
  {
    "text": "Cassandra key spaces built on what's called a table per query methodology so if you're going to build out your key",
    "start": "3022680",
    "end": "3028200"
  },
  {
    "text": "space the first thing you have to do is figure out how you're going to get the data out of your application because if",
    "start": "3028200",
    "end": "3033799"
  },
  {
    "text": "you don't know how the you get the data out of your application you're not going to be able to actually build out your tables in a way that you can be able to",
    "start": "3033799",
    "end": "3040480"
  },
  {
    "text": "fetch that data because the second limit one of the second limitations as I already alluded to is that you can't",
    "start": "3040480",
    "end": "3045640"
  },
  {
    "text": "really do ad hoc queries if you want to do queries that have filtering all those filtering criteria have to live have to",
    "start": "3045640",
    "end": "3052240"
  },
  {
    "text": "be part of the primary key that's not necessarily completely true there are several other methodologies there is",
    "start": "3052240",
    "end": "3058880"
  },
  {
    "text": "there's a concept of secondary indexes and materialized views and if actually if you're using uh the data Stacks you",
    "start": "3058880",
    "end": "3066119"
  },
  {
    "text": "can use the full text indexer as inquiry against it however each of those has an effect on their performance and in",
    "start": "3066119",
    "end": "3072400"
  },
  {
    "text": "generally and in general they're discouraged from being used unless there's no other way to do",
    "start": "3072400",
    "end": "3078440"
  },
  {
    "text": "it uh Cassandra also has minimal support for aggregations um it has support for",
    "start": "3078440",
    "end": "3084400"
  },
  {
    "text": "for some men Max and average but those are the only uh aggregators it supports",
    "start": "3084400",
    "end": "3089520"
  },
  {
    "text": "and in general because of the performance hit that it requires to actually make those work they're not",
    "start": "3089520",
    "end": "3094599"
  },
  {
    "text": "recommended to be used as you probably now have guessed the complexity of Cassandra is far more",
    "start": "3094599",
    "end": "3101000"
  },
  {
    "text": "than that of a normal relational database um part of that's being just based the nature of being a distributed",
    "start": "3101000",
    "end": "3107640"
  },
  {
    "text": "data store um part of that is just the complexity with which is required to get the performance that that people are",
    "start": "3107640",
    "end": "3114079"
  },
  {
    "text": "looking for um you know Cassandra is not something you're going to sit down in a",
    "start": "3114079",
    "end": "3119400"
  },
  {
    "text": "weekend or an evening and figure out how to use correctly it's going to take some time in order to be able to understand",
    "start": "3119400",
    "end": "3125480"
  },
  {
    "text": "what the limitations are what the advantages are and how you might best use it in your scenario and the last one",
    "start": "3125480",
    "end": "3131040"
  },
  {
    "text": "here is Cassandra is not relational the the biggest mistake I see with a lot of",
    "start": "3131040",
    "end": "3136160"
  },
  {
    "text": "developers that are coming in to try and use Cassandra is they just try to use it like it's a relational database well if",
    "start": "3136160",
    "end": "3141240"
  },
  {
    "text": "you try to do that you're pretty much guaranteed to fail uh you need you know you need to spend some time you need to",
    "start": "3141240",
    "end": "3146599"
  },
  {
    "text": "understand it you need to understand its limitations and then figure out how you're going to app apply it you can't just throw your relational database",
    "start": "3146599",
    "end": "3152319"
  },
  {
    "text": "schema at in and expect to actually be able to accomplish anything from it",
    "start": "3152319",
    "end": "3157839"
  },
  {
    "start": "3157000",
    "end": "3203000"
  },
  {
    "text": "um so now if you're interested in learning some more there's a couple of uh links I have up here uh specifically",
    "start": "3157839",
    "end": "3165480"
  },
  {
    "text": "if you're interested in learning more about Cassandra I would highly recommend you go to the academy. data.com link uh",
    "start": "3165480",
    "end": "3172559"
  },
  {
    "text": "that they actually provide a lot of very good free online training you do have to register for it but it all the training",
    "start": "3172559",
    "end": "3178240"
  },
  {
    "text": "is free they have several uh very very in-depth uh courses on uh not only",
    "start": "3178240",
    "end": "3185319"
  },
  {
    "text": "Cassandra but the other aspects of the data stack System including solar spark and uh actually they recently came out",
    "start": "3185319",
    "end": "3191680"
  },
  {
    "text": "with one they're they're going to be uh data STX is going to be releasing a graph engine on top of the their their",
    "start": "3191680",
    "end": "3196920"
  },
  {
    "text": "version of Cassandra uh and they recently released a graph training on that as well so uh with that I would just I",
    "start": "3196920",
    "end": "3205319"
  },
  {
    "start": "3203000",
    "end": "3510000"
  },
  {
    "text": "would like to thank NDC Oslo for inviting me to come speak and I'd like to thank all of you guys for coming and listening to me uh and are there any",
    "start": "3205319",
    "end": "3214160"
  },
  {
    "text": "questions how do you do security between the replication how do you do security",
    "start": "3214160",
    "end": "3219920"
  },
  {
    "text": "between the replic the nodes when replicated uh you can actually set up SSL to to secure the data between it uh",
    "start": "3219920",
    "end": "3225920"
  },
  {
    "text": "you can SEC and you can also secure the data and uh right State as it's being written uh to",
    "start": "3225920",
    "end": "3233240"
  },
  {
    "text": "disk you said you can filtering on thetion key items yes and you only talk",
    "start": "3233240",
    "end": "3238839"
  },
  {
    "text": "about equality but can you have some similar wild card so in your example if I want to get out the DAT of let's say",
    "start": "3238839",
    "end": "3244960"
  },
  {
    "text": "all the trucks one manufacturer any way to no there's not unfortunately that's",
    "start": "3244960",
    "end": "3250280"
  },
  {
    "text": "one of the limitations you have is that partition key has to be equality comparisons uh and and the reason for",
    "start": "3250280",
    "end": "3256599"
  },
  {
    "text": "that is because when uh because those equality comparisons if it needs to be equality comparison so you can get the",
    "start": "3256599",
    "end": "3262599"
  },
  {
    "text": "token out so it knows exactly where in the cluster to get it that that's one of the trade-offs you end up making in order to get that very fast read",
    "start": "3262599",
    "end": "3270680"
  },
  {
    "text": "performance consistency level that you mentioned uh what what is the impact if",
    "start": "3271640",
    "end": "3277440"
  },
  {
    "text": "you have a nodes with a uh a network that is not that fast could that have a",
    "start": "3277440",
    "end": "3283440"
  },
  {
    "text": "very negative impact absolutely a lot of traffic I I assume and yeah if you have",
    "start": "3283440",
    "end": "3288920"
  },
  {
    "text": "if you have nodes on on a network that's very slow yeah it will dramatically affect the performance over overall in",
    "start": "3288920",
    "end": "3295640"
  },
  {
    "text": "general and then the consistency level is very yeah the consistency level you can use to probably tune that to make it",
    "start": "3295640",
    "end": "3300880"
  },
  {
    "text": "slightly better you know you may want to make it Z one instead of instead of Quorum but yeah if you you pretty much",
    "start": "3300880",
    "end": "3307799"
  },
  {
    "text": "have to have a very fast Network between all your nodes internally in order to make it uh very",
    "start": "3307799",
    "end": "3313599"
  },
  {
    "text": "performant one of the thats one ofs goes",
    "start": "3313599",
    "end": "3319359"
  },
  {
    "text": "down what happens to that what happens to that dat to that",
    "start": "3319359",
    "end": "3326440"
  },
  {
    "text": "so if you so let's say for example you have the node is owned by no data or the data is owned by node one and node one",
    "start": "3326440",
    "end": "3333280"
  },
  {
    "text": "is down well that's where those two other replicas come into effect if node one's down and it queries data that's",
    "start": "3333280",
    "end": "3339280"
  },
  {
    "text": "owned by node one then the replicas from node two and node three will will service that request okay so by knowing",
    "start": "3339280",
    "end": "3346960"
  },
  {
    "text": "that should be onde one then it knows if it's not there we can try two and",
    "start": "3346960",
    "end": "3352799"
  },
  {
    "text": "because because we have a replication factor of three yeah yeah really what owning it means is it's the first of the",
    "start": "3352799",
    "end": "3359319"
  },
  {
    "text": "nodes um to to to have that data how would CER compare to Dynamo DB",
    "start": "3359319",
    "end": "3366280"
  },
  {
    "text": "is it roughly the same thing or would you recommend one over the other uh uh so Cassandra the actual uh distributed",
    "start": "3366280",
    "end": "3373400"
  },
  {
    "text": "model is is inspired by Dynamo DB so that aspect of it is different so uh",
    "start": "3373400",
    "end": "3378640"
  },
  {
    "text": "Cassandra the the it was originally built a Facebook it was inspired by uh the the distributed design was by Dynamo",
    "start": "3378640",
    "end": "3385760"
  },
  {
    "text": "DB the the data model was inspired by Google big table as far as recommending",
    "start": "3385760",
    "end": "3390920"
  },
  {
    "text": "it I you need to know more about the problem before I could say one versus the other but uh they're very similar in",
    "start": "3390920",
    "end": "3396880"
  },
  {
    "text": "a lot of ways just like DB I can get as a host",
    "start": "3396880",
    "end": "3401960"
  },
  {
    "text": "and I don't need about set about as far as I know there is no one",
    "start": "3401960",
    "end": "3409599"
  },
  {
    "text": "that provides a hosted service however there uh you can spin up uh am m in AWS",
    "start": "3409599",
    "end": "3416280"
  },
  {
    "text": "and actually Windows Azure has has built in support now for as of I think it was like November they signed an agreement",
    "start": "3416280",
    "end": "3423079"
  },
  {
    "text": "with Microsoft to have built-in support for for uh Cassandra Oh sorry actually it's not",
    "start": "3423079",
    "end": "3429559"
  },
  {
    "text": "Cassandra it's data stack specific",
    "start": "3429559",
    "end": "3434119"
  },
  {
    "text": "sorry GE series database a classic Geo time series database",
    "start": "3439440",
    "end": "3446799"
  },
  {
    "text": "um probably the biggest the biggest would be the scalability aspect of it um you know if you start putting in uh you",
    "start": "3449839",
    "end": "3456720"
  },
  {
    "text": "know 2.2 gigabytes a day it's going to not take that long in order to overwhelm many databases",
    "start": "3456720",
    "end": "3464319"
  },
  {
    "text": "so you set up the clients to every time to new know that they are running ground",
    "start": "3469200",
    "end": "3476280"
  },
  {
    "text": "actually are you not flooding your servers with open connections actually if you have many clients well I I are",
    "start": "3476280",
    "end": "3482000"
  },
  {
    "text": "you taking grpc or are you talking the connecting to the CL the cluster because the the the round robing and the driver",
    "start": "3482000",
    "end": "3487799"
  },
  {
    "text": "was done in the CL was done in the apach or the Cassandra cluster whereas grpc you specify the specific address that",
    "start": "3487799",
    "end": "3493720"
  },
  {
    "text": "you're that you're connecting to but then they then they're changing no no grpc is it it's run as a it's run just",
    "start": "3493720",
    "end": "3500359"
  },
  {
    "text": "like any other web service there's a one end point uh the round robing I think you're talking about was inside",
    "start": "3500359",
    "end": "3507799"
  },
  {
    "text": "the yeah oh yes that is not at this isn't",
    "start": "3507799",
    "end": "3513640"
  },
  {
    "start": "3510000",
    "end": "3600000"
  },
  {
    "text": "grpc this is actually connecting to the Cassandra cluster this is the Cassandra driver",
    "start": "3513640",
    "end": "3520160"
  },
  {
    "text": "okay one more drpc that is deled by was it what is it",
    "start": "3522359",
    "end": "3530200"
  },
  {
    "text": "actually so it is actually a a binary that runs its own server inside of it if",
    "start": "3530200",
    "end": "3535920"
  },
  {
    "text": "you want to uh the way I've always done it when I've done it in Windows is just built a Windows service around it to run",
    "start": "3535920",
    "end": "3540960"
  },
  {
    "text": "it uh what I showed here is actually just a console app uh if you want I can show you how it",
    "start": "3540960",
    "end": "3546720"
  },
  {
    "text": "actually enough for basically you more or less also",
    "start": "3546720",
    "end": "3551880"
  },
  {
    "text": "generate the silver with generation base package I guess the",
    "start": "3551880",
    "end": "3557280"
  },
  {
    "text": "there is a few base packages you have to add around there's like grpc core grpc",
    "start": "3557280",
    "end": "3563599"
  },
  {
    "text": "native. c they're new get pack new Gable packages uh and then what the what's",
    "start": "3563599",
    "end": "3569359"
  },
  {
    "text": "generated from the model definition is actually an interface that you have to implement and for an app which would",
    "start": "3569359",
    "end": "3575799"
  },
  {
    "text": "really I mean I guess it's the same question this gentl for an app that really has a large data intake so you",
    "start": "3575799",
    "end": "3583760"
  },
  {
    "text": "can probably not go with just one cm no you probably wouldn't if you in this",
    "start": "3583760",
    "end": "3590000"
  },
  {
    "text": "case you probably would actually have to build a couple of drpc end points and then you could put whatever load balancing in front of that you wanted",
    "start": "3590000",
    "end": "3597318"
  },
  {
    "text": "to all right well if there's no more questions I thank you and if there's any",
    "start": "3600720",
    "end": "3606000"
  },
  {
    "text": "other questions I'll be around here uh if anybody has anything else",
    "start": "3606000",
    "end": "3611450"
  },
  {
    "text": "[Applause]",
    "start": "3611450",
    "end": "3615599"
  },
  {
    "text": "thanks",
    "start": "3619119",
    "end": "3622119"
  }
]