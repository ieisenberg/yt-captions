[
  {
    "text": "okay hello everyone hola uh welcome to my talk I'm calling it just in time",
    "start": "5400",
    "end": "10759"
  },
  {
    "text": "architecture this is a talk that I originally prepared and delivered uh internally uh at a previous employer",
    "start": "10759",
    "end": "17160"
  },
  {
    "text": "which is an online social games company and during my time there the company grew from being sort of a scrappy small",
    "start": "17160",
    "end": "24840"
  },
  {
    "text": "startup to quite possibly Australia's fastest growing and easily most profitable scale up",
    "start": "24840",
    "end": "30519"
  },
  {
    "text": "from around about 100 employees to now approaching 2,000 um and I think this story makes me",
    "start": "30519",
    "end": "36840"
  },
  {
    "text": "fortunate stories like this are uncommon at any given time there are probably only roughly 1% of organizations that",
    "start": "36840",
    "end": "43920"
  },
  {
    "text": "are actually going through uh this stage in their journey and many startups will",
    "start": "43920",
    "end": "49320"
  },
  {
    "text": "actually fail at this exact point so that means now I get to talk to you all about this experience and",
    "start": "49320",
    "end": "55039"
  },
  {
    "text": "reflect on all the lessons that we learned as we went through that this is actually really exciting of got people",
    "start": "55039",
    "end": "60359"
  },
  {
    "text": "standing at the back we got a full house here so that's cool uh so bit about myself uh my name",
    "start": "60359",
    "end": "66640"
  },
  {
    "text": "is mlin Harley I'm from Perth Australia uh and I guess three facts uh I'm really",
    "start": "66640",
    "end": "71799"
  },
  {
    "text": "enjoying my time here in Porto it's a great City uh I've had about three billion pastel daata since I've been",
    "start": "71799",
    "end": "78119"
  },
  {
    "text": "here and I'm actually soaked from about here downwards cuz I got caught in the",
    "start": "78119",
    "end": "83400"
  },
  {
    "text": "rain here this morning so I'm hiding behind this Podium so you can't see that so we'll start with with a software",
    "start": "83400",
    "end": "90799"
  },
  {
    "text": "development Journey um with a company I'm going to talk sort of hypothetically",
    "start": "90799",
    "end": "95920"
  },
  {
    "text": "so I'll be talking about an online gaming company who shall remain nameless at this point so let's imagine we all work for",
    "start": "95920",
    "end": "103040"
  },
  {
    "text": "an online gaming company and our product managers and stakeholders they believe",
    "start": "103040",
    "end": "108439"
  },
  {
    "text": "that we can make more Revenue by allowing our customers to personalize their experience in game so the",
    "start": "108439",
    "end": "114759"
  },
  {
    "text": "stakeholders call a meeting with the team they get all of the engineers and the testers and the designers together",
    "start": "114759",
    "end": "119920"
  },
  {
    "text": "and a meeting like this might sound a little bit familiar to you lots of ideas and brainstorming happens uh and there's",
    "start": "119920",
    "end": "126520"
  },
  {
    "text": "lots of debate about how best to approach this problem after the dust settles the",
    "start": "126520",
    "end": "133599"
  },
  {
    "text": "product manager grabs a marker walks up to the board and draws out some squares that look a little bit like this I",
    "start": "133599",
    "end": "139040"
  },
  {
    "text": "realize that this is a bit of a higher Fidelity uh than a sketch but you'll just have to imagine so what we have",
    "start": "139040",
    "end": "145480"
  },
  {
    "text": "here is we have an online avatar store where players can choose to buy which Avatar they want to",
    "start": "145480",
    "end": "152480"
  },
  {
    "text": "buy we can see that we have our balance shown up the top and a preview of each",
    "start": "152480",
    "end": "157840"
  },
  {
    "text": "Avatar is shown with the name the cost and a buy button beneath it the avatars also uh have an",
    "start": "157840",
    "end": "165800"
  },
  {
    "text": "artificial scarcity so once they ran out run out they're gone so that's a bit like an nft although we don't really",
    "start": "165800",
    "end": "172120"
  },
  {
    "text": "talk about those anymore right over in the corner of the room uh we can see that the frontend engineers",
    "start": "172120",
    "end": "178200"
  },
  {
    "text": "and the ux team they both light up immediately you can tell that they both just come up with the ideal front- end architecture and they're Keen to start",
    "start": "178200",
    "end": "185040"
  },
  {
    "text": "so they leave the room now the backend Engineers need to decide on what the serice side application architecture is",
    "start": "185040",
    "end": "191200"
  },
  {
    "text": "going to be so I'll say at this point I'm going to be talking about serice side application architecture at this",
    "start": "191200",
    "end": "196560"
  },
  {
    "text": "point um I'm leaving out front end uh that can be a different talk I'm sure there's many people you can you can",
    "start": "196560",
    "end": "201760"
  },
  {
    "text": "watch here at this conference talk about front end architecture as well so the team they start to think",
    "start": "201760",
    "end": "209439"
  },
  {
    "text": "about all of the steps that are involved in the workflow firstly they figure out that",
    "start": "209439",
    "end": "214840"
  },
  {
    "text": "they'll need to have a step in the uh workflow to First validate the request because we don't want people cheating",
    "start": "214840",
    "end": "220200"
  },
  {
    "text": "the system uh the server side will need to ensure that the customer for example is valid and that they have sufficient",
    "start": "220200",
    "end": "226360"
  },
  {
    "text": "balance in order to purch this purchase this item then the server will need to be able to deduct that balance and that",
    "start": "226360",
    "end": "232920"
  },
  {
    "text": "cost from the customer's balance and then once that balance is deducted the Avatar can be assigned to that player in",
    "start": "232920",
    "end": "239239"
  },
  {
    "text": "their invent inventory uh you'll start to notice some reoccurring language some ubiquitous",
    "start": "239239",
    "end": "244720"
  },
  {
    "text": "language here so I've underlined that we've got the words checkout deduct balance assign and inventory so we'll",
    "start": "244720",
    "end": "252280"
  },
  {
    "text": "come back to those knowing that this is a reasonably common and simple workflow the team",
    "start": "252280",
    "end": "259160"
  },
  {
    "text": "decides that the easiest way to approach this would be to use a monolithic architecture how this works is there's a",
    "start": "259160",
    "end": "266080"
  },
  {
    "text": "single server and its database and they talk to each other and this is categorized by handling multiple",
    "start": "266080",
    "end": "271280"
  },
  {
    "text": "operations in a single request life cycle there's no need to communicate with any other systems it's just a",
    "start": "271280",
    "end": "277840"
  },
  {
    "text": "server and a database paired with each other and this means we can leverage a really powerful thing called Atomic",
    "start": "277840",
    "end": "283960"
  },
  {
    "text": "database transactions so if we zoom into that little bit uh with the atomic database",
    "start": "283960",
    "end": "290520"
  },
  {
    "text": "transaction uh let's ask ourself what does that mean they allow us to perform a series",
    "start": "290520",
    "end": "297000"
  },
  {
    "text": "of operations on the database such that either all of those operations succeed or all of those operations fail and this",
    "start": "297000",
    "end": "304440"
  },
  {
    "text": "prevents us from entering any weird invalid States for example where we debit the balance but then don't assign",
    "start": "304440",
    "end": "310280"
  },
  {
    "text": "the Avatar this eliminates most of the complexity of managing that State uh and",
    "start": "310280",
    "end": "316120"
  },
  {
    "text": "this is a feature of most if not all major database Technologies almost all of them can do",
    "start": "316120",
    "end": "322918"
  },
  {
    "text": "transactions and this is called a monolithic architecture how do I know what is a monolith how do I know one",
    "start": "323440",
    "end": "330360"
  },
  {
    "text": "when I see it we might all have the same idea but let's define it for me I",
    "start": "330360",
    "end": "335919"
  },
  {
    "text": "associate it with old software so Microsoft Word Adobe Photoshop software that's been around for a very long time",
    "start": "335919",
    "end": "342160"
  },
  {
    "text": "maybe your favorite video games as well that kind of software used to come in a CD in a box",
    "start": "342160",
    "end": "348720"
  },
  {
    "text": "right just because we built an application recently using a modern language or framework doesn't mean it's",
    "start": "348720",
    "end": "355120"
  },
  {
    "text": "not a monolith monolithic architecture is usually hosted within one code base that couples all of the business",
    "start": "355120",
    "end": "361080"
  },
  {
    "text": "concerns together and to make a change to this sort of application requires deploying the entire stack at once this",
    "start": "361080",
    "end": "367759"
  },
  {
    "text": "can sometimes but not always make updating the stack restrictive and timec consuming leading to making updates",
    "start": "367759",
    "end": "374319"
  },
  {
    "text": "infrequent and costly relative to the package size so let's fast forward a year the",
    "start": "374319",
    "end": "381520"
  },
  {
    "text": "product is successful and the team has grown in size the monolithic architecture has been really productive",
    "start": "381520",
    "end": "388240"
  },
  {
    "text": "for the team up until this point we've added a few more team members to the team and a lot of new",
    "start": "388240",
    "end": "395080"
  },
  {
    "text": "features some problems are starting to show up though the new Engineers on the team are complaining that for example",
    "start": "395080",
    "end": "401520"
  },
  {
    "text": "the IDE takes a long time to load the build time has increased and it takes a",
    "start": "401520",
    "end": "406919"
  },
  {
    "text": "long time to run all of the tests too regular merge conflicts happen because everyone is working on top of each other",
    "start": "406919",
    "end": "413280"
  },
  {
    "text": "on the same code the boundaries are not isolated and there's no separation of",
    "start": "413280",
    "end": "418680"
  },
  {
    "text": "concerns a high there's a high batch size for small changes so if we change one thing",
    "start": "418680",
    "end": "424639"
  },
  {
    "text": "for a small be uh feature uh a bunch of other things need to change at the same time otherwise things break and that's",
    "start": "424639",
    "end": "431039"
  },
  {
    "text": "really frustrating too new features in your app are also not individually Deployable so it's not",
    "start": "431039",
    "end": "437919"
  },
  {
    "text": "a problem from a downtime perspective uh the team uh did the right thing early on and set up zero downtime deployments but",
    "start": "437919",
    "end": "444680"
  },
  {
    "text": "they take 20 minutes and if we want to be doing more than 20 deployments a day we've got large team uh that means",
    "start": "444680",
    "end": "451160"
  },
  {
    "text": "they're now back to back uh we we have used all of that time so again some of the news new",
    "start": "451160",
    "end": "457599"
  },
  {
    "text": "Engineers also have heaps of experience using cotlin and the whole team is excited to start using it but up until",
    "start": "457599",
    "end": "464560"
  },
  {
    "text": "now everything's been written in goang so we'd have to do a huge project to migrate everything over so we can't",
    "start": "464560",
    "end": "469960"
  },
  {
    "text": "really do that either so I'll come back to all of that in a minute but to summarize this",
    "start": "469960",
    "end": "476159"
  },
  {
    "text": "solution was really fantastic it did what we really needed it to do with at the time uh we validated the hypothesis",
    "start": "476159",
    "end": "482199"
  },
  {
    "text": "about personalized avatars and the product became really successful The Chosen architecture also",
    "start": "482199",
    "end": "487840"
  },
  {
    "text": "has some unique and Powerful characteristics we can for example do atomic database transactions while that",
    "start": "487840",
    "end": "494479"
  },
  {
    "text": "sounds really good this is not a perfect system there are downsides monolithic architectures have a coordination",
    "start": "494479",
    "end": "500360"
  },
  {
    "text": "overhead that is Amplified by the team size they do little to enforce modularity and it becomes easy to create",
    "start": "500360",
    "end": "506919"
  },
  {
    "text": "the infamous big ball of mud so bit of a detour hands up who here",
    "start": "506919",
    "end": "513518"
  },
  {
    "text": "bought a coffee this morning like actually paid for a coffee at the shop okay there's one person",
    "start": "513519",
    "end": "519719"
  },
  {
    "text": "cool uh the flow I described is like going to a cafe to order a coffee from",
    "start": "519719",
    "end": "524760"
  },
  {
    "text": "the customer perspective uh the customer gives the cashier some money the cashier",
    "start": "524760",
    "end": "530040"
  },
  {
    "text": "checks that it's enough and validates it and puts it into the till and then the team will go make a coffee for you there",
    "start": "530040",
    "end": "535640"
  },
  {
    "text": "isn't anything special happening here it's actually a pretty typical Commerce workflow and it's seen everywhere in",
    "start": "535640",
    "end": "541320"
  },
  {
    "text": "real life and online this probably a good time for me to uh do a little side note about how",
    "start": "541320",
    "end": "548120"
  },
  {
    "text": "coffee is consumed in Australia because I've originally given this talk uh to Australians um so some of this might not make sense if you're from uh Portugal or",
    "start": "548120",
    "end": "555519"
  },
  {
    "text": "for other parts of Europe um the most C popular coffee drink in Australia is a flat white so that would be something",
    "start": "555519",
    "end": "561680"
  },
  {
    "text": "like a latte or a m leer here I hopefully I get that pronunciation right",
    "start": "561680",
    "end": "567680"
  },
  {
    "text": "um I would say that in Australia because a flight white is the most common drink or or latte type drink is the most",
    "start": "567680",
    "end": "573320"
  },
  {
    "text": "common drink a latte out's a really big deal so it's more a part of the sit down coffee experience whereas it's quite",
    "start": "573320",
    "end": "580120"
  },
  {
    "text": "common I think here to drink coffee without milk I've noticed um so if the way I'm talking about coffee seems a little strange that's",
    "start": "580120",
    "end": "587040"
  },
  {
    "text": "why so monolithic architecture is a bit like a tiny Cafe operated by a single",
    "start": "587040",
    "end": "592279"
  },
  {
    "text": "person uh this is Adam he owns the cafe and he currently has three responsibilities he has to take the",
    "start": "592279",
    "end": "597640"
  },
  {
    "text": "orders uh make the coffee and then pour the milk he works quickly so he's never had",
    "start": "597640",
    "end": "603480"
  },
  {
    "text": "any problems or issues keeping up with demand for the customers plus his Cafe is quite small so he doesn't have heaps",
    "start": "603480",
    "end": "608680"
  },
  {
    "text": "of customers but the problem is he's not very good at making latte art look at",
    "start": "608680",
    "end": "613880"
  },
  {
    "text": "that that's terrible form that's just awful yeah that's what it's meant to look",
    "start": "613880",
    "end": "619600"
  },
  {
    "text": "like Adam feels he's actually better at talking to customers and taking orders he remembers everyone's name uh and he's",
    "start": "619600",
    "end": "626160"
  },
  {
    "text": "never really been very good at making the actual coffee I want to re re reiterate that the problem here that",
    "start": "626160",
    "end": "632640"
  },
  {
    "text": "Adam has isn't one of scale he can make the coffee fast enough and serve it to his customers but he wants to give the",
    "start": "632640",
    "end": "638399"
  },
  {
    "text": "customers the best possible Cafe experience including having the best coffee in town with the best latte AR so",
    "start": "638399",
    "end": "644639"
  },
  {
    "text": "what is he going to do Adam hires two employees so he hires",
    "start": "644639",
    "end": "650560"
  },
  {
    "text": "Sarah and James Sarah is an expert in pulling coffee so she is responsible for",
    "start": "650560",
    "end": "655839"
  },
  {
    "text": "operating the coffee machine and James has a master's degree in latte art from Melbourne University so he's responsible",
    "start": "655839",
    "end": "662079"
  },
  {
    "text": "for pouring the milk that's a joke by the way we don't have University degrees for making",
    "start": "662079",
    "end": "667839"
  },
  {
    "text": "coffee this is how now two less things that Adam has to worry about he can focus on providing really good customer",
    "start": "667839",
    "end": "674200"
  },
  {
    "text": "service he can be talking to customers remembering their names and importantly everyone in this workflow here can work",
    "start": "674200",
    "end": "680959"
  },
  {
    "text": "separately and independently of each other and I think this makes sense in a cafe we see this all the time can we do",
    "start": "680959",
    "end": "687320"
  },
  {
    "text": "something similar in software hands up if anyone can see where this is going right yeah this is a microservices cafe",
    "start": "687320",
    "end": "695519"
  },
  {
    "text": "so the engineering team has heard a lot about this new architecture called microservices and they decide to do some",
    "start": "695519",
    "end": "703440"
  },
  {
    "text": "research they find out that a microservices architecture is a way that we can help enforce boundaries which is",
    "start": "703440",
    "end": "709000"
  },
  {
    "text": "one of the problems that we have at the moment this also allows parts of the system to be deployed independently of",
    "start": "709000",
    "end": "715959"
  },
  {
    "text": "others it also enables polyglot development meaning the engineering team with the new Engineers can start using",
    "start": "715959",
    "end": "722079"
  },
  {
    "text": "cotlin without needing to do a huge rewrite so that sounds like it can solve",
    "start": "722079",
    "end": "727440"
  },
  {
    "text": "some of our current problems I think so the team has agreed to split up the monolith and create boundaries between",
    "start": "727440",
    "end": "734120"
  },
  {
    "text": "each domain concept now we have the store that tells us what things are for",
    "start": "734120",
    "end": "739399"
  },
  {
    "text": "sale balance which is how many coins I have and inventory which is all of the",
    "start": "739399",
    "end": "744880"
  },
  {
    "text": "things that I own and these names uh based on some of that language that the team identified earlier that ubiquitous",
    "start": "744880",
    "end": "751360"
  },
  {
    "text": "language so you remember the slide it said store balance and",
    "start": "751360",
    "end": "756240"
  },
  {
    "text": "inventory and this is what the workflow now looks like we still have a workflow",
    "start": "756880",
    "end": "761959"
  },
  {
    "text": "with a single request life cycle we can see here that the client sends a checkout request to the store and the",
    "start": "761959",
    "end": "767680"
  },
  {
    "text": "store receives information about the customer and package from its database to validate the request the store then sends a request",
    "start": "767680",
    "end": "775279"
  },
  {
    "text": "to the balance service to deduct the balance uh the balance service goes in deducts the balance and saves that",
    "start": "775279",
    "end": "780680"
  },
  {
    "text": "information in its own separate database then sends a response back to the store service the store service can",
    "start": "780680",
    "end": "787519"
  },
  {
    "text": "then send a request to the inventory service to assign the Avatar to the customer the inventory service then adds",
    "start": "787519",
    "end": "793600"
  },
  {
    "text": "the item and saves its information into another separate database before responding to the store",
    "start": "793600",
    "end": "799959"
  },
  {
    "text": "service then the checkout workflow is now done the store service can return a response to the client saying that the",
    "start": "799959",
    "end": "805199"
  },
  {
    "text": "checkout is completed the team's pretty happy with themselves we did a team we did microservices this was easy I don't know",
    "start": "805199",
    "end": "812160"
  },
  {
    "text": "what everyone was talking about but hold on a minute after deploying our new microservices",
    "start": "812160",
    "end": "818760"
  },
  {
    "text": "everything starts going wrong our customers are unhappy they're reporting that their balance is deducted but they",
    "start": "818760",
    "end": "824920"
  },
  {
    "text": "don't get the Avatar customer support was receiving thousands of complaints from customers every day and Engineers",
    "start": "824920",
    "end": "831560"
  },
  {
    "text": "have to start wasting a lot of time helping customer support by manually compensating those customers who didn't",
    "start": "831560",
    "end": "836880"
  },
  {
    "text": "get their their uh their item and then perhaps worst of all Fed Up customers are just leaving and revenues",
    "start": "836880",
    "end": "843240"
  },
  {
    "text": "dropping so the the team decided to look at the architecture a little bit deeper and investigate possible failure",
    "start": "843240",
    "end": "851600"
  },
  {
    "text": "scenarios the team notices that occasionally the balance service fails to return a response after deducting the",
    "start": "851600",
    "end": "858880"
  },
  {
    "text": "balance the store doesn't know whether the balance was deducted or not it never gets an answer it can't proceed to the",
    "start": "858880",
    "end": "864880"
  },
  {
    "text": "next step of the workflow to send a request to the inventory to assign the avatar in this scenario the workflow timed out",
    "start": "864880",
    "end": "872440"
  },
  {
    "text": "and we were left in an incomplete State the customer balances was debited but the item doesn't get assigned to the",
    "start": "872440",
    "end": "879240"
  },
  {
    "text": "inventory this is one of the eight fallacies of distributed uh Computing uh",
    "start": "879240",
    "end": "884320"
  },
  {
    "text": "was this is and impacted by the one of the eight fallacies of the distributed computing called the network is reliable",
    "start": "884320",
    "end": "890680"
  },
  {
    "text": "because we've introduced more Network calls into our workflow there are now more failure points how can we know",
    "start": "890680",
    "end": "896240"
  },
  {
    "text": "without the response from the server how to proceed with this workflow in our previous workflow we",
    "start": "896240",
    "end": "901720"
  },
  {
    "text": "relied here on Atomic transactions to prevent our application from even entering into this",
    "start": "901720",
    "end": "907800"
  },
  {
    "text": "state so typically with a distributed architecture like this there's not really a way to reliably replicate",
    "start": "907800",
    "end": "914360"
  },
  {
    "text": "Atomic transactions we don't have the luxury of opening up a transaction scope completing our unit of work and then",
    "start": "914360",
    "end": "920240"
  },
  {
    "text": "committing that transaction once we finished or rolling it back if it failed each of these Services the store the",
    "start": "920240",
    "end": "926720"
  },
  {
    "text": "balance and the inventory are running on different databases they could be even different database Technologies one",
    "start": "926720",
    "end": "931959"
  },
  {
    "text": "could be postgress and the other one could be mongod Deb there's this one idea called a",
    "start": "931959",
    "end": "937319"
  },
  {
    "text": "two-phase commit which aims to replicate Atomic transactions it works",
    "start": "937319",
    "end": "942480"
  },
  {
    "text": "unsurprisingly in two phases we ask each service to prepare itself to be ready to do the",
    "start": "942480",
    "end": "949480"
  },
  {
    "text": "transaction and if all services are ready we ask each service to then perform the action otherwise they all",
    "start": "949480",
    "end": "955240"
  },
  {
    "text": "roll back this usually involves taking a lock on any of the resources that are",
    "start": "955240",
    "end": "960399"
  },
  {
    "text": "required and total transaction time is proportional to the time taken by the slowest",
    "start": "960399",
    "end": "965560"
  },
  {
    "text": "server the team is concerned about adopting this pattern uh because it will cap right through point in the future as",
    "start": "965560",
    "end": "971399"
  },
  {
    "text": "we continue to scale so for that reason two two-phase commit is not really a commonly used pattern and mainly for",
    "start": "971399",
    "end": "978000"
  },
  {
    "text": "that reason um it's essentially a a blocking protocol the coordinator in",
    "start": "978000",
    "end": "983839"
  },
  {
    "text": "this case the store service has to wait until all participants are complete and is therefore coupled to the performance",
    "start": "983839",
    "end": "989920"
  },
  {
    "text": "of the slowest participant you can also run into tricky situations where if the coordinator",
    "start": "989920",
    "end": "996040"
  },
  {
    "text": "fails during the transaction a bunch of services could be left with locks hanging open and not really knowing what",
    "start": "996040",
    "end": "1001399"
  },
  {
    "text": "to do they have to rely on either the coordinator coming back online or on on",
    "start": "1001399",
    "end": "1007920"
  },
  {
    "text": "timeouts one of the engineers suggests that if the first request fails we should just retry it and ask the ask the",
    "start": "1008000",
    "end": "1015800"
  },
  {
    "text": "service to deduct the balance again however because we're now using microservices the balance service",
    "start": "1015800",
    "end": "1021279"
  },
  {
    "text": "doesn't really have its own context of the given request uh and whether the",
    "start": "1021279",
    "end": "1026280"
  },
  {
    "text": "request is a retry or if it's uh if it's another request with the same",
    "start": "1026280",
    "end": "1031720"
  },
  {
    "text": "parameters so here is where we need to introduce A New Concept called item potency item potency will allow the",
    "start": "1031720",
    "end": "1038480"
  },
  {
    "text": "balance service to know whether it is received and processed a given request already to make our retried request item",
    "start": "1038480",
    "end": "1046120"
  },
  {
    "text": "potent we have added a request ID property if the request ID matches a request that we have already seen and",
    "start": "1046120",
    "end": "1052520"
  },
  {
    "text": "already processed then the balance service skips processing and the request returns",
    "start": "1052520",
    "end": "1059200"
  },
  {
    "text": "immediately if a given request has a unique request ID that has not been processed already we can see here that",
    "start": "1059200",
    "end": "1065240"
  },
  {
    "text": "the balance service knows to process it as a new request rather than a retry of an existing",
    "start": "1065240",
    "end": "1070480"
  },
  {
    "text": "request uh even if all of the other parameters match so now that our requests are item",
    "start": "1070480",
    "end": "1076240"
  },
  {
    "text": "potent we can add retry logic to our workflow so this is what our workflow looks like",
    "start": "1076240",
    "end": "1082240"
  },
  {
    "text": "now with retry logic now when the balance service occasionally fails our store service can",
    "start": "1082240",
    "end": "1088520"
  },
  {
    "text": "simply retry the request with the same request ID until it gets a response from the balance service without it timing",
    "start": "1088520",
    "end": "1094720"
  },
  {
    "text": "out once the retry logic concludes the rest of the workflow continues on as",
    "start": "1094720",
    "end": "1100799"
  },
  {
    "text": "normal however now whenever the balance service occasionally fails things start",
    "start": "1100799",
    "end": "1106600"
  },
  {
    "text": "to get much worse the team observes more and more requests are piling up and retrying over and over when the balance",
    "start": "1106600",
    "end": "1114000"
  },
  {
    "text": "service comes back online and finally recovers it gets this huge flood of retrying requests that are sent at the",
    "start": "1114000",
    "end": "1119919"
  },
  {
    "text": "same time from all of the hanging hanging Services the balance Service never really recovers because there are too",
    "start": "1119919",
    "end": "1126000"
  },
  {
    "text": "many requests backed up since we're not closing our request life cycles until this workflow is complete lots of",
    "start": "1126000",
    "end": "1132600"
  },
  {
    "text": "requests to the store stay open and start putting requests on that service as well uh this affect effect is known",
    "start": "1132600",
    "end": "1138799"
  },
  {
    "text": "as a retry storm generally what we've learned here",
    "start": "1138799",
    "end": "1144400"
  },
  {
    "text": "is this kind of workflow is unreliable there are many examples uh where the failure of one service leads to the",
    "start": "1144400",
    "end": "1150960"
  },
  {
    "text": "failure of the entire workflow uh and the name for this is called availability",
    "start": "1150960",
    "end": "1156559"
  },
  {
    "text": "coupling this workflow needs all three services to be available at the same time if each service has a 99%",
    "start": "1156559",
    "end": "1165440"
  },
  {
    "text": "availability then the availability of the workflow as a whole is a multiplication of those three",
    "start": "1165440",
    "end": "1170960"
  },
  {
    "text": "availabilities which turns out to be 97% it actually gets worse 97% is probably",
    "start": "1170960",
    "end": "1177280"
  },
  {
    "text": "very good if you're in University that's like a high distinction but in in our case that means our system can be down",
    "start": "1177280",
    "end": "1183039"
  },
  {
    "text": "for uh it can be unavailable for as many as 11 whole days per year so imagine if",
    "start": "1183039",
    "end": "1188679"
  },
  {
    "text": "Netflix was just down for 11 whole days per year it's not really acceptable and it gets worse again as I said when more",
    "start": "1188679",
    "end": "1194919"
  },
  {
    "text": "services add to workflow so if you recall there's now three",
    "start": "1194919",
    "end": "1200919"
  },
  {
    "text": "employees in our Cafe we have Adam who talks to the customer and takes payment",
    "start": "1200919",
    "end": "1206240"
  },
  {
    "text": "then we have Sarah who pulls the coffee shot and James who handles the milk",
    "start": "1206240",
    "end": "1211640"
  },
  {
    "text": "let's say Adam takes payment from the customer uh Adam then orders Sarah to pull the coffee shot however at this",
    "start": "1211640",
    "end": "1217840"
  },
  {
    "text": "time Sarah's just had to duck out to an emergency call and she's left her station Sarah's not there what does Adam",
    "start": "1217840",
    "end": "1224159"
  },
  {
    "text": "do well in this case Adam just drops the order and moves on to the next customer this resulted in the payment being taken",
    "start": "1224159",
    "end": "1231080"
  },
  {
    "text": "but the cof coffee not being made for the customer and here in this in this coffee shop as well there's also",
    "start": "1231080",
    "end": "1237120"
  },
  {
    "text": "availability coupling although Adam and Sarah are working on different things and able to work independently of each",
    "start": "1237120",
    "end": "1243799"
  },
  {
    "text": "other Adam needs Sarah to be there when an order comes through otherwise the order is lost I will say probably that",
    "start": "1243799",
    "end": "1251120"
  },
  {
    "text": "cafes don't normally work like this they've got solutions to it we'll get to that point but um yeah here we have",
    "start": "1251120",
    "end": "1256919"
  },
  {
    "text": "availability coupling as well so to recap by splitting our our",
    "start": "1256919",
    "end": "1263600"
  },
  {
    "text": "monolith into multiple Services we're able to enforce boundaries and allow the team to work independently and deploy",
    "start": "1263600",
    "end": "1270080"
  },
  {
    "text": "Services separately but other different problems arose when the team moved to multiple",
    "start": "1270080",
    "end": "1277559"
  },
  {
    "text": "Services availability of the system as a whole decreased due to availability coupling require requiring all three of",
    "start": "1277559",
    "end": "1284520"
  },
  {
    "text": "those services to be available at the same time balances were deducted deducted but avatars weren't being",
    "start": "1284520",
    "end": "1290360"
  },
  {
    "text": "assigned to the customer's inventory and we had incomplete workflows what we'd implemented was not",
    "start": "1290360",
    "end": "1296600"
  },
  {
    "text": "microservices but probably instead of uh known as a distributed",
    "start": "1296600",
    "end": "1302200"
  },
  {
    "text": "monolith cool so we have to go back to the drawing board now we got to figure out another way to do",
    "start": "1302520",
    "end": "1309360"
  },
  {
    "text": "this firstly uh let's talk about event driven architectures firstly let's cover",
    "start": "1309640",
    "end": "1315279"
  },
  {
    "text": "exactly what an event-driven architecture is uh starting with an event uh so what is an event uh an event",
    "start": "1315279",
    "end": "1323279"
  },
  {
    "text": "represents a change in state uh a representation of something that has happened uh it's an immutable fact so",
    "start": "1323279",
    "end": "1329279"
  },
  {
    "text": "generally events don't change we can't rewrite history and usually you have to assume",
    "start": "1329279",
    "end": "1334880"
  },
  {
    "text": "that there's something that's happened in the past so assume when you're seeing an event that it's something that happened potentially a long time ago we",
    "start": "1334880",
    "end": "1341159"
  },
  {
    "text": "don't know uh AWS defined an event drien",
    "start": "1341159",
    "end": "1346960"
  },
  {
    "text": "architecture as an architecture that uses events to trigger and communicate between decoupled services and it's a",
    "start": "1346960",
    "end": "1353880"
  },
  {
    "text": "really common architecture pattern that's applied to microservices so I think this could be a way to solve some",
    "start": "1353880",
    "end": "1359480"
  },
  {
    "text": "of our problems the team starts doing some research about event driven",
    "start": "1359480",
    "end": "1365440"
  },
  {
    "text": "architectures uh and they when they start digging into it they notice a few patterns keep emerging uh they've got",
    "start": "1365440",
    "end": "1371120"
  },
  {
    "text": "this thing called event notification and event carried State transfer as different ways of producing events so",
    "start": "1371120",
    "end": "1377240"
  },
  {
    "text": "let's explore what the those two things mean let's start with event notification uh what happens is we send",
    "start": "1377240",
    "end": "1384400"
  },
  {
    "text": "an event of uh something that happened uh essentially all that gives us is the identifier for the thing that changed",
    "start": "1384400",
    "end": "1391200"
  },
  {
    "text": "and we can see we we created a checkout um but just the identifi is there this",
    "start": "1391200",
    "end": "1396440"
  },
  {
    "text": "uh allows the consumer to decide whether or not it needs to do anything with that information uh if the balance service",
    "start": "1396440",
    "end": "1403440"
  },
  {
    "text": "gets this event it would need to deduct the customer's balance but which customer and by how much",
    "start": "1403440",
    "end": "1408480"
  },
  {
    "text": "in this case the balance service must query the store about the checkout details and the source of Truth Remains",
    "start": "1408480",
    "end": "1414240"
  },
  {
    "text": "the store database it knows everything so back in a cafe event",
    "start": "1414240",
    "end": "1419919"
  },
  {
    "text": "notification uh this is what event notification looks like in the in the context of a cafe um Adam is at the",
    "start": "1419919",
    "end": "1425320"
  },
  {
    "text": "counter and he takes an order and then he shouts over to Sarah take away coffee",
    "start": "1425320",
    "end": "1430960"
  },
  {
    "text": "and Sarah's like okay not enough information uh she has to go and ask Adam for more information hey Adam what",
    "start": "1430960",
    "end": "1438120"
  },
  {
    "text": "kind of coffee is it it's a it's a flat white or a mayor deleter great is it small or large oh",
    "start": "1438120",
    "end": "1445559"
  },
  {
    "text": "it's large so Sarah gets a little bit frustrated because she has to ask Adam over and over again for more",
    "start": "1445559",
    "end": "1452840"
  },
  {
    "text": "information so while this is an ideal in the context of a cafe it's not all bad news it's actually a totally common and",
    "start": "1452840",
    "end": "1458760"
  },
  {
    "text": "acceptable way of applying an event driven architecture particularly on on a legacy system that uh doesn't initially",
    "start": "1458760",
    "end": "1464880"
  },
  {
    "text": "support it with event notification when an event is raised we ask the source of that event for its view of the world",
    "start": "1464880",
    "end": "1472120"
  },
  {
    "text": "event notification is nice because the source of the event is always the source of truth but the downside here is that",
    "start": "1472120",
    "end": "1477960"
  },
  {
    "text": "additional request for information to get it if there are many things that are interested in a particular event they'll",
    "start": "1477960",
    "end": "1484080"
  },
  {
    "text": "all ask for information at the same time so this can be pretty chatty um there yeah got lots of lots of uh requests for",
    "start": "1484080",
    "end": "1491440"
  },
  {
    "text": "extra information so what if we add some additional state to the",
    "start": "1491440",
    "end": "1498360"
  },
  {
    "text": "event so this is the same event as before but all we've done is we've added some extra information onto it about the",
    "start": "1498360",
    "end": "1504440"
  },
  {
    "text": "event so that we don't have to get that information later and this is called event carried State transfer this avoids",
    "start": "1504440",
    "end": "1510679"
  },
  {
    "text": "the need for the balance service to query the information from the store because it's in the event we don't need",
    "start": "1510679",
    "end": "1517279"
  },
  {
    "text": "to make another request to get more information and that's great but potentially now as soon as we have this",
    "start": "1517279",
    "end": "1523600"
  },
  {
    "text": "information it's potentially stale it's no longer true if we read it again later from our",
    "start": "1523600",
    "end": "1530159"
  },
  {
    "text": "database the new information we might have might not match what's on that event the database in the store might",
    "start": "1530159",
    "end": "1537520"
  },
  {
    "text": "have new events uh new information that we've not yet received and that's known as eventual",
    "start": "1537520",
    "end": "1544158"
  },
  {
    "text": "consistency so back to the cafe again Adam listens to Sarah's frustrations and",
    "start": "1544360",
    "end": "1550120"
  },
  {
    "text": "he went and bought a receipt printer now when he takes orders he prints out a ticket and he places that ticket on the",
    "start": "1550120",
    "end": "1556240"
  },
  {
    "text": "little thing on the coffee machine and Sarah can see all the information that she needs so it says you know a large",
    "start": "1556240",
    "end": "1561480"
  },
  {
    "text": "takeaway with all of the the uh information M Dela and this works out pretty well most",
    "start": "1561480",
    "end": "1567760"
  },
  {
    "text": "of the time except occasionally uh maybe a customer comes quickly up to the counter and they said",
    "start": "1567760",
    "end": "1573919"
  },
  {
    "text": "oh they've changed their mind um oops can you please make sure that's decaffeinated now the information on",
    "start": "1573919",
    "end": "1580120"
  },
  {
    "text": "that ticket is no longer relevant uh if we don't change that ticket Sarah might",
    "start": "1580120",
    "end": "1586480"
  },
  {
    "text": "make the wrong drink we should produce new information and a new new event uh to say that that order has",
    "start": "1586480",
    "end": "1594080"
  },
  {
    "text": "changed this mostly works better in the context of the cafe but it still has trade-offs so we're not making all of",
    "start": "1594360",
    "end": "1599960"
  },
  {
    "text": "those extra requests just to get more information it's less chatty but now we",
    "start": "1599960",
    "end": "1605480"
  },
  {
    "text": "have potentially stale events and stale data shared across multiple places the assumption is that any of",
    "start": "1605480",
    "end": "1611360"
  },
  {
    "text": "these events essentially stale immediately they might not actually be stale but we don't know unless we",
    "start": "1611360",
    "end": "1616600"
  },
  {
    "text": "check so now we know about the the two different uh event driven patterns let's talk about where events actually come",
    "start": "1616600",
    "end": "1622679"
  },
  {
    "text": "from how do we produce them so events are usually produced as a",
    "start": "1622679",
    "end": "1627919"
  },
  {
    "text": "side effect to a change that has occurred in the system so here is an example where we inserted a checkout",
    "start": "1627919",
    "end": "1634279"
  },
  {
    "text": "into our database a checkout created event is created at the same time we can",
    "start": "1634279",
    "end": "1639520"
  },
  {
    "text": "send an event to this message broker for other systems to",
    "start": "1639520",
    "end": "1644600"
  },
  {
    "text": "consume however the database and the message broker two different systems what if the message broker is",
    "start": "1644960",
    "end": "1650880"
  },
  {
    "text": "unavailable at that time this could lead to our event getting lost we need to guarantee that event gets published when",
    "start": "1650880",
    "end": "1657559"
  },
  {
    "text": "the change occurs in the database and we don't have the luxury again of atomic transactions here because these are two",
    "start": "1657559",
    "end": "1663440"
  },
  {
    "text": "different systems it's the same problem with our microservices and I don't think we really want to try out figure out a",
    "start": "1663440",
    "end": "1668840"
  },
  {
    "text": "two-face commit here either unsurprisingly there are a number",
    "start": "1668840",
    "end": "1674559"
  },
  {
    "text": "of ways to fix this problem as well each with their their own tradeoffs there's three ways to guarantee that events are",
    "start": "1674559",
    "end": "1681399"
  },
  {
    "text": "produced we get transaction logs the transactional outbox pattern and event",
    "start": "1681399",
    "end": "1687840"
  },
  {
    "text": "sourcing so transaction logs are a feature that's actually offered by most databases transaction logs are created",
    "start": "1688440",
    "end": "1695480"
  },
  {
    "text": "whenever inserts updates or deletes are performed on a database you might have heard some of something like this before",
    "start": "1695480",
    "end": "1702840"
  },
  {
    "text": "but by a different name U maybe you've heard of change data capture an event publisher can poll",
    "start": "1702840",
    "end": "1709080"
  },
  {
    "text": "these logs and then translate those into uh events about the system before",
    "start": "1709080",
    "end": "1714919"
  },
  {
    "text": "sending those off to a message broker probably the biggest upside to",
    "start": "1714919",
    "end": "1720760"
  },
  {
    "text": "using transaction logs for event creation is that it can be enabled with minimal effort on Legacy databases with",
    "start": "1720760",
    "end": "1727200"
  },
  {
    "text": "no existing event generation capacity you don't need to write any new",
    "start": "1727200",
    "end": "1732279"
  },
  {
    "text": "application code to start streaming and capturing events from transaction logs just en enable the transaction logging",
    "start": "1732279",
    "end": "1738559"
  },
  {
    "text": "feature if it's not already enabled and start polling the log output the downside here is it's using",
    "start": "1738559",
    "end": "1745679"
  },
  {
    "text": "the low-level database logs instead of business events so you create a coupling to the the schema of those",
    "start": "1745679",
    "end": "1752880"
  },
  {
    "text": "logs alternatively we can use the transactional outbox pattern instead of using transaction",
    "start": "1752880",
    "end": "1759240"
  },
  {
    "text": "logs how this works is we save the business event into a separate table called the outbox table and this",
    "start": "1759240",
    "end": "1766240"
  },
  {
    "text": "thankfully can be done in a and an atomic transaction this this ensures that both",
    "start": "1766240",
    "end": "1772440"
  },
  {
    "text": "the row in the table gets updated and the event gets inserted at the same time",
    "start": "1772440",
    "end": "1777960"
  },
  {
    "text": "and if either one of those fails then they both fail after that a process could do",
    "start": "1777960",
    "end": "1784519"
  },
  {
    "text": "what's called a destructive read from uh for events from the artbox table that means it reads them and if it",
    "start": "1784519",
    "end": "1790760"
  },
  {
    "text": "successfully processes them in an atomic transaction it can then delete that row as well um that ensures that the data is",
    "start": "1790760",
    "end": "1797559"
  },
  {
    "text": "read and processed before it is deleted once events are generated they can be then sent Downstream to the",
    "start": "1797559",
    "end": "1803919"
  },
  {
    "text": "message broker however this step is not Atomic so you might uh one of the one of the problems here is you might get",
    "start": "1803919",
    "end": "1809600"
  },
  {
    "text": "duplicate messages being published to that message broker if it fails so again this is a good choice for",
    "start": "1809600",
    "end": "1816840"
  },
  {
    "text": "supporting an exist an existing database that doesn't have any uh event generation capacity it also allows us to",
    "start": "1816840",
    "end": "1823960"
  },
  {
    "text": "avoid any direct coupling to those database logs those transaction LS there is however a downside in that",
    "start": "1823960",
    "end": "1830480"
  },
  {
    "text": "this pattern requires an additional toomic insert on the database at the point of uh insert or",
    "start": "1830480",
    "end": "1836600"
  },
  {
    "text": "update uh this carries with it the potential maintenance and performance",
    "start": "1836600",
    "end": "1842039"
  },
  {
    "text": "penalty so as a third option instead of saving an events as a side effect what",
    "start": "1842039",
    "end": "1848159"
  },
  {
    "text": "if we could just make the events the single source of Truth we can do this when the data in an appendonly event",
    "start": "1848159",
    "end": "1854640"
  },
  {
    "text": "stream represents the superset of the equivalent dat data in a mutable table and this is known as event",
    "start": "1854640",
    "end": "1861360"
  },
  {
    "text": "sourcing so Downstream Services can just pull the event store directly without",
    "start": "1861360",
    "end": "1866440"
  },
  {
    "text": "needing to go through a message breaker although we can add a message Braker if we want now we replace all of those",
    "start": "1866440",
    "end": "1872720"
  },
  {
    "text": "existing tables and if we ever want to bring them back if we ever want to you know bring back the the data in the same",
    "start": "1872720",
    "end": "1878279"
  },
  {
    "text": "shape it was before we would use what's called either a projection or a read",
    "start": "1878279",
    "end": "1883559"
  },
  {
    "text": "model one of the properties I personally really like about Event Source is the use of the append only model so",
    "start": "1883559",
    "end": "1889279"
  },
  {
    "text": "generally speaking a stream of events in an Event Source system will have the event carried State equivalent of the",
    "start": "1889279",
    "end": "1895200"
  },
  {
    "text": "comparable crud model however in an Event Source system it also contains the",
    "start": "1895200",
    "end": "1900639"
  },
  {
    "text": "history of all the changes making it a superet of the current state for example the crud model on the",
    "start": "1900639",
    "end": "1907360"
  },
  {
    "text": "left only stores the most recent value of the balance um so every time it changes we're overriding that data and",
    "start": "1907360",
    "end": "1913200"
  },
  {
    "text": "we're losing the the previous value whereas with event sourcing uh you you can see on the right that we've got",
    "start": "1913200",
    "end": "1918519"
  },
  {
    "text": "every single version um of that amount that it's ever been we're not losing any",
    "start": "1918519",
    "end": "1924840"
  },
  {
    "text": "data so event sourcing provides a complete immutable log of every state",
    "start": "1924919",
    "end": "1930000"
  },
  {
    "text": "change which can make troubleshooting a lot easier event sourcing also has an",
    "start": "1930000",
    "end": "1935159"
  },
  {
    "text": "audit log built in as an added benefit it enables resilient applications it uh",
    "start": "1935159",
    "end": "1941679"
  },
  {
    "text": "enables us to reprocess data if we need to it is however not generally as",
    "start": "1941679",
    "end": "1947519"
  },
  {
    "text": "compatible with an existing system an existing database uh like the transaction log or transactional outbox",
    "start": "1947519",
    "end": "1954159"
  },
  {
    "text": "patterns I tend to find that moving from a non-vent source system to an Event Source One will typically require a",
    "start": "1954159",
    "end": "1960519"
  },
  {
    "text": "rewrite from scratch and a really complex migration so therefore it is an easier",
    "start": "1960519",
    "end": "1966519"
  },
  {
    "text": "choice to make if you're starting from scratch so to wrap it all up we're going",
    "start": "1966519",
    "end": "1973120"
  },
  {
    "text": "to talk about communication patterns this is putting all of the pieces together this is is talking about how microservices can communicate with each",
    "start": "1973120",
    "end": "1979799"
  },
  {
    "text": "other through event driven systems so one of the attributes of an event driven architecture that I've not",
    "start": "1979799",
    "end": "1986240"
  },
  {
    "text": "touched on yet is their reactivity what that means is they're able to react and process information as it",
    "start": "1986240",
    "end": "1992600"
  },
  {
    "text": "arrives rather than later in bulk when it is retrieved or at request time but",
    "start": "1992600",
    "end": "1997919"
  },
  {
    "text": "how are we able to do that when a building event driven systems we not only have to consider how events are",
    "start": "1997919",
    "end": "2004080"
  },
  {
    "text": "produced we also have to consider the patterns by which events are consumed at a broader scale how our",
    "start": "2004080",
    "end": "2011600"
  },
  {
    "text": "services interact with each other in a distributed",
    "start": "2011600",
    "end": "2016480"
  },
  {
    "text": "system there are two common event-driven communication patents that I'm going to talk about uh the first one is",
    "start": "2016880",
    "end": "2023360"
  },
  {
    "text": "choreography think of choreography as a bunch of services or participants performing in a dance routine um in a",
    "start": "2023360",
    "end": "2030519"
  },
  {
    "text": "dance routine if you didn't know uh the way they work is everyone just looks to their left for cues uh each step is just handed off to",
    "start": "2030519",
    "end": "2037279"
  },
  {
    "text": "the next participant in a in a choreography workflow and then you have uh the other",
    "start": "2037279",
    "end": "2042720"
  },
  {
    "text": "workflow which is an or uh orchestration and that's like an orchestra so with an",
    "start": "2042720",
    "end": "2048040"
  },
  {
    "text": "orchestra you have a conductor who's telling everyone uh uh the timing on",
    "start": "2048040",
    "end": "2053240"
  },
  {
    "text": "which to play by but the thing about a conductor is they don't play an instrument themselves but on the flip",
    "start": "2053240",
    "end": "2059520"
  },
  {
    "text": "side the orchestra doesn't play without the conductor that's not possible so our flow as a choreography",
    "start": "2059520",
    "end": "2069000"
  },
  {
    "text": "workflow might look a little bit like this the workflow sequence is distributed to each of the participants",
    "start": "2069000",
    "end": "2075760"
  },
  {
    "text": "the participants communicate with each other through events so we can see here the store receives requests to start a",
    "start": "2075760",
    "end": "2082118"
  },
  {
    "text": "checkout from the client when this happens it raises an event saying the checkout was created so that's up",
    "start": "2082119",
    "end": "2090480"
  },
  {
    "text": "there uh the balance service is waiting for checkout created events when it gets",
    "start": "2090480",
    "end": "2096200"
  },
  {
    "text": "one it knows its job is to deduct the balance so it deducts the balance and produces a balance deducted",
    "start": "2096200",
    "end": "2103200"
  },
  {
    "text": "event the inventory is waiting for balance deducted events when it gets one",
    "start": "2103200",
    "end": "2108520"
  },
  {
    "text": "it can raise an avatar assigned event and then if we go back to the store we can see that it's waiting for that",
    "start": "2108520",
    "end": "2114800"
  },
  {
    "text": "Avatar assigned event and when it gets one it knows that it's time to inform the client that the checkout is",
    "start": "2114800",
    "end": "2122839"
  },
  {
    "text": "complete so choreography is probably a lot like how a cafe Works naturally um",
    "start": "2124000",
    "end": "2129760"
  },
  {
    "text": "we have Adam who takes the order and Adam passes that order on to Sarah and it's now Sarah's",
    "start": "2129760",
    "end": "2135160"
  },
  {
    "text": "responsibility Sarah then pulls the coffee um when she's done she can pass",
    "start": "2135160",
    "end": "2140560"
  },
  {
    "text": "uh the coffee over to James and then James uh Frost the milk and pours it and",
    "start": "2140560",
    "end": "2146040"
  },
  {
    "text": "then James once he's done calls out the customer's name and the order is complete one problem is when a customer",
    "start": "2146040",
    "end": "2153200"
  },
  {
    "text": "wants to know where their order is let's say it's taking a long time who can answer that question well the",
    "start": "2153200",
    "end": "2159760"
  },
  {
    "text": "problem is it really depends on where the order is up to in the system if we ask Adam all he knows is he took the",
    "start": "2159760",
    "end": "2166760"
  },
  {
    "text": "order took the money and passed it on to Sarah he doesn't know where it is now if",
    "start": "2166760",
    "end": "2172440"
  },
  {
    "text": "we ask Sarah she says that she's pulled the coffee already and she's done and she's not responsible for it anymore",
    "start": "2172440",
    "end": "2178440"
  },
  {
    "text": "he's she's passed it on to to James and if we look over at James he looks a bit flustered he's got a big queue of",
    "start": "2178440",
    "end": "2184599"
  },
  {
    "text": "coffees that he has to add milk to um so we should probably just leave him alone but he probably has your",
    "start": "2184599",
    "end": "2189720"
  },
  {
    "text": "coffee so with choreography the problem is we may have to ask each participant in order to understand where we are up",
    "start": "2189720",
    "end": "2196119"
  },
  {
    "text": "to in the workflow to recap about choreography",
    "start": "2196119",
    "end": "2201960"
  },
  {
    "text": "it's I think of it as elegant um it's quite simple in the sense that a dance routine is is quite simple as well each",
    "start": "2201960",
    "end": "2209280"
  },
  {
    "text": "person only has to look to their left for cues each participant only consumes the events that they care about and once",
    "start": "2209280",
    "end": "2216440"
  },
  {
    "text": "they complete uh once they complete their job they raise more events uh that become cues for the next",
    "start": "2216440",
    "end": "2224160"
  },
  {
    "text": "participant uh the problem here is that it's costly to observe so if I want to know where the workflow is up to I",
    "start": "2225040",
    "end": "2231000"
  },
  {
    "text": "probably need to talk to every participant there's no central place that I can look to for",
    "start": "2231000",
    "end": "2238040"
  },
  {
    "text": "Progress the decentralized nature of choreography also ensures that it gets very complex when the size and the",
    "start": "2238040",
    "end": "2243839"
  },
  {
    "text": "number of steps in a workflow increases um particularly when you have things like nonlinear workflows with multiple",
    "start": "2243839",
    "end": "2249760"
  },
  {
    "text": "branches or complicated error handling requirements they become more difficult",
    "start": "2249760",
    "end": "2255200"
  },
  {
    "text": "without centralized management I'm just going to stop and",
    "start": "2255200",
    "end": "2261800"
  },
  {
    "text": "have a",
    "start": "2261800",
    "end": "2264040"
  },
  {
    "text": "drink okay so before I talk about orchestration let's talk about the",
    "start": "2268599",
    "end": "2274440"
  },
  {
    "text": "difference between events and I'm going to introduce A New Concept called commands so you can see here our events",
    "start": "2274440",
    "end": "2281760"
  },
  {
    "text": "are orange Services can listen to these events and produ uh that are produced by",
    "start": "2281760",
    "end": "2286880"
  },
  {
    "text": "each workflow that they care about uh as we can see here the uh the balance service is listening to checkout",
    "start": "2286880",
    "end": "2293720"
  },
  {
    "text": "created but then uh also game registered daily reward claim achievement completed",
    "start": "2293720",
    "end": "2299040"
  },
  {
    "text": "for every new workflow it needs to subscribe to more and more events and know more and more about how the world is uh more and more about the world",
    "start": "2299040",
    "end": "2306240"
  },
  {
    "text": "around like a lot of things in software I think we could probably make this a little bit",
    "start": "2306240",
    "end": "2312160"
  },
  {
    "text": "simpler if we just flip it around so with commands uh the service doesn't",
    "start": "2312160",
    "end": "2317359"
  },
  {
    "text": "need to know about all of these other workflows instead the balance service just does two things and it exposes two",
    "start": "2317359",
    "end": "2324839"
  },
  {
    "text": "commands it handles the add balance command and the deduct balance command and it does nothing",
    "start": "2324839",
    "end": "2331200"
  },
  {
    "text": "else we know that from the definition a few slides back the balance added is past tense uh so that that uh that sort",
    "start": "2331200",
    "end": "2339200"
  },
  {
    "text": "of is a as a marker for an event um whereas commands because they in indic",
    "start": "2339200",
    "end": "2344560"
  },
  {
    "text": "indicate intent uh it's an instruction to add the balance then generally you'll see them written in a in a future",
    "start": "2344560",
    "end": "2351240"
  },
  {
    "text": "tense commands and events sit on the either th either side of the thing that happens in a workflow so you have ADD",
    "start": "2351240",
    "end": "2358160"
  },
  {
    "text": "balance then you're adding the balance and then you've added the",
    "start": "2358160",
    "end": "2363480"
  },
  {
    "text": "balance so now let's look at our uh our workflow using orchestration so",
    "start": "2364319",
    "end": "2370480"
  },
  {
    "text": "we can see here we're using commands instead of events to coordinate this workflow with orchestration the workflow",
    "start": "2370480",
    "end": "2378200"
  },
  {
    "text": "starts off the same a checkout created event is created by the store the event is received by the uh by",
    "start": "2378200",
    "end": "2385920"
  },
  {
    "text": "a new component called the checkout process manager which now manages the workf flow from this point",
    "start": "2385920",
    "end": "2392200"
  },
  {
    "text": "onwards it begins by sending a deduct balance command to the balance service",
    "start": "2392200",
    "end": "2397760"
  },
  {
    "text": "the balance deducted event then gets triggered and then we move on to the next step of the workflow which is to send the fund",
    "start": "2397760",
    "end": "2404640"
  },
  {
    "text": "checkout command to the store to notify that the checkout is being funded the checkout funded event comes",
    "start": "2404640",
    "end": "2412400"
  },
  {
    "text": "back and then triggers the next step in the workflow which is to assign the uh which is to send the assign Avatar",
    "start": "2412400",
    "end": "2419040"
  },
  {
    "text": "command uh to the inventory service the Avatar assigned event is produced and",
    "start": "2419040",
    "end": "2424160"
  },
  {
    "text": "then triggers the next step in the workflow which is to tell the store that the checkout has been",
    "start": "2424160",
    "end": "2429720"
  },
  {
    "text": "completed this workflow is centralized and is managed by that single process manager in the",
    "start": "2429720",
    "end": "2436079"
  },
  {
    "text": "middle workflow participants do not need to subscribe to events they only expose",
    "start": "2436079",
    "end": "2441440"
  },
  {
    "text": "commands the balance service exposes the deduct balance command for example and the inventory exposes the assign Avatar",
    "start": "2441440",
    "end": "2448920"
  },
  {
    "text": "command the workflow steps here are still triggered by events so for example",
    "start": "2448920",
    "end": "2454359"
  },
  {
    "text": "the checkout created event triggers the the first step of the workflow and the balance deducted deducted event then",
    "start": "2454359",
    "end": "2460680"
  },
  {
    "text": "triggers the next step of the workflow and so",
    "start": "2460680",
    "end": "2464880"
  },
  {
    "text": "forth with orchestration we can also handle uh unsuccessful workflows so if",
    "start": "2466480",
    "end": "2472480"
  },
  {
    "text": "we have unsuccessful workflows due to business constraints say for example uh we have a customer who already has the",
    "start": "2472480",
    "end": "2478359"
  },
  {
    "text": "Avatar um and we have a business role that says you can only buy one of each so let's imagine they they've",
    "start": "2478359",
    "end": "2484560"
  },
  {
    "text": "already bought this Avatar and before we uh before we end up in the state where they've got two avatars and that's an",
    "start": "2484560",
    "end": "2491079"
  },
  {
    "text": "invalid State um we need to uh what we can do instead is uh if we if we receive sort",
    "start": "2491079",
    "end": "2498000"
  },
  {
    "text": "of an error from that inventory saying that we've done that um we need to basically reverse all of the",
    "start": "2498000",
    "end": "2503200"
  },
  {
    "text": "transactions that we've done before uh where are we up to yeah so uh",
    "start": "2503200",
    "end": "2509960"
  },
  {
    "text": "we can see here a reverse operation which is an add balance command which is basically the opposite of that original",
    "start": "2509960",
    "end": "2515880"
  },
  {
    "text": "dedu balance command uh is sent and then that needs to be handled after the",
    "start": "2515880",
    "end": "2521280"
  },
  {
    "text": "assignment fails the checkout failed event is then also raised that event triggers the process",
    "start": "2521280",
    "end": "2527440"
  },
  {
    "text": "manager uh to uh refund the checkout at the end so upon success oh sorry I'm I'm now",
    "start": "2527440",
    "end": "2537000"
  },
  {
    "text": "lost cool um so basically this workflow here and and the act of uh adding the",
    "start": "2537000",
    "end": "2542960"
  },
  {
    "text": "balance um back is what's known as a compensating TR transaction a compensating transaction is similar to",
    "start": "2542960",
    "end": "2550400"
  },
  {
    "text": "but different to an atomic transaction it's a separate transaction that's performed out of band unlike an atomic",
    "start": "2550400",
    "end": "2556440"
  },
  {
    "text": "transaction but it's the same in the sense that it's used to roll back to the original",
    "start": "2556440",
    "end": "2562558"
  },
  {
    "text": "state so the cafe is growing and and now also sells food Adam decides that it's",
    "start": "2562680",
    "end": "2568079"
  },
  {
    "text": "time to take on more of a management role to make sure he managing staff and orders a customer orders a coffee and",
    "start": "2568079",
    "end": "2574400"
  },
  {
    "text": "some food so Adam takes the order Adam now makes sure that orders are handle properly so his first job is to pass the",
    "start": "2574400",
    "end": "2580280"
  },
  {
    "text": "order onto Sarah Sarah starts pulling the coffee shop but then at the same time Adam can walk over to the kitchen",
    "start": "2580280",
    "end": "2587040"
  },
  {
    "text": "uh and ask the kitchen staff to make make the food order as well after Sarah is done pulling the",
    "start": "2587040",
    "end": "2592200"
  },
  {
    "text": "coffee shop Adam then makes sure to check in with James who is handling the milk if a customer needs to know the",
    "start": "2592200",
    "end": "2598880"
  },
  {
    "text": "status of the order they can ask now ask Adam because he's centrally managing that workflow although the centralization uh",
    "start": "2598880",
    "end": "2607319"
  },
  {
    "text": "now means the manager is now a crital a single critical point of failure So Adam",
    "start": "2607319",
    "end": "2612599"
  },
  {
    "text": "can't really take a break now uh without handing off this role to someone else he",
    "start": "2612599",
    "end": "2617839"
  },
  {
    "text": "also finds that sometimes he gets a little bit overloaded when it's really really busy because he's he a single central point of failure at the",
    "start": "2617839",
    "end": "2625680"
  },
  {
    "text": "moment so to recap about orchestration um with orchestration the workflow logic is centralized events are still used to",
    "start": "2626240",
    "end": "2633680"
  },
  {
    "text": "proceed through the workflow but commands are also used by the orchestrator to communicate with those",
    "start": "2633680",
    "end": "2639040"
  },
  {
    "text": "Services if someone wanted to figure out the current state of the workflow they can go to the orchestrator and",
    "start": "2639040",
    "end": "2646359"
  },
  {
    "text": "ask this however also means the workflow has a single source of failure so if the orchestrator ever fails then the whole",
    "start": "2646359",
    "end": "2652680"
  },
  {
    "text": "workflow stops something else to consider is how to scale a workflow with a single",
    "start": "2652680",
    "end": "2658119"
  },
  {
    "text": "orchestrator how do we enable this workflow to have multiple orchestrators so that they don't become a bottleneck",
    "start": "2658119",
    "end": "2664160"
  },
  {
    "text": "is it even possible to do that maybe we can't scale the orchestrators horizontally but we have to look at ways",
    "start": "2664160",
    "end": "2670319"
  },
  {
    "text": "to enable them to process faster so we could do batch processing for",
    "start": "2670319",
    "end": "2675359"
  },
  {
    "text": "example not something uh we have to do as a consideration for our own problems but um also not not generally a problem",
    "start": "2675359",
    "end": "2682720"
  },
  {
    "text": "with choreography as a as a communication pattern just to know so yeah uh just to recap all of",
    "start": "2682720",
    "end": "2690920"
  },
  {
    "text": "that um we went on a bit of a software development Journey so we started by building out our Avatar purchase",
    "start": "2690920",
    "end": "2697400"
  },
  {
    "text": "workflow we went from a monolith which worked well in the beginning for us um",
    "start": "2697400",
    "end": "2703240"
  },
  {
    "text": "and we moved to a microservices architecture uh we introduced all sorts of problems that were really unexpected",
    "start": "2703240",
    "end": "2709440"
  },
  {
    "text": "because really what we built was a distributed monolith with availability coupling we sort out ways to uh improve",
    "start": "2709440",
    "end": "2717079"
  },
  {
    "text": "this with an event driven architecture so I told you about two different types of events which is event notification",
    "start": "2717079",
    "end": "2723400"
  },
  {
    "text": "and event carried State transfer and then three ways of producing those events so you have transaction logs the",
    "start": "2723400",
    "end": "2729839"
  },
  {
    "text": "transactional outbox patent and event sourcing and then to stitch it all together we commun uh we talked about",
    "start": "2729839",
    "end": "2736040"
  },
  {
    "text": "communication patterns so I talked about choreography and orchestration both patterns USE events",
    "start": "2736040",
    "end": "2742000"
  },
  {
    "text": "to trigger the next step in the workflow choreography uh uses events to communicate between Services directly so",
    "start": "2742000",
    "end": "2749000"
  },
  {
    "text": "it's elegant decentralized but difficult to observe whereas orchestration centralizes the workflow it uses",
    "start": "2749000",
    "end": "2755000"
  },
  {
    "text": "commands for community communication um but introduces a single point of",
    "start": "2755000",
    "end": "2760359"
  },
  {
    "text": "failure and this is the end of the journey I guess the key takeaway of this is uh this journey was about using the",
    "start": "2760359",
    "end": "2767280"
  },
  {
    "text": "architecture that was suitable for the problem that we were facing at the time each of these architectures served its",
    "start": "2767280",
    "end": "2773520"
  },
  {
    "text": "purpose at the time that they were needed we started by integrating into an existing monolithic architecture that",
    "start": "2773520",
    "end": "2779680"
  },
  {
    "text": "was already working well for the small team the team got to Market quicker and saw success earlier and the product was",
    "start": "2779680",
    "end": "2787160"
  },
  {
    "text": "successful but eventually the team grew and then the team outgrew the architecture and decided to transition",
    "start": "2787160",
    "end": "2793839"
  },
  {
    "text": "later to microservices this architecture allowed multiple teams to deploy independently",
    "start": "2793839",
    "end": "2799760"
  },
  {
    "text": "of each other but there was more planning and work uh required in order to build a reliable system and they had",
    "start": "2799760",
    "end": "2806280"
  },
  {
    "text": "to navigate a few bumps along the way it was better to make those uh to run into",
    "start": "2806280",
    "end": "2811640"
  },
  {
    "text": "those bumps uh later in the journey once the team was more established the decisions and tradeoffs that were",
    "start": "2811640",
    "end": "2817960"
  },
  {
    "text": "made at each stage of the journey were appropriate to the problem at hand and I guess the key takeaway here is there's no one siiz all fits architecture each",
    "start": "2817960",
    "end": "2825480"
  },
  {
    "text": "stage in that Journey required a different architecture that evolved with the product so if there's no oniz fit all",
    "start": "2825480",
    "end": "2832559"
  },
  {
    "text": "architecture I think our jobs as Architects uh is to find the best architecture to suit the problem at hand",
    "start": "2832559",
    "end": "2839079"
  },
  {
    "text": "how do we do that uh there's two phrases that I think you'll hear most software Architects uh using and saying on a",
    "start": "2839079",
    "end": "2845440"
  },
  {
    "text": "regular basis the first one is it depends which is relevant here but probably maybe not that useful maybe",
    "start": "2845440",
    "end": "2852400"
  },
  {
    "text": "another more pertinent phrase in this case is what problem are we trying to solve so we start with the question what",
    "start": "2852400",
    "end": "2858800"
  },
  {
    "text": "problem are we trying to solve are we a small maybe five person team uh trying to to find product Market fit do we",
    "start": "2858800",
    "end": "2867240"
  },
  {
    "text": "really want to be spending the majority of our time uh you know searching for product Market fit trying to make a",
    "start": "2867240",
    "end": "2873160"
  },
  {
    "text": "product that's successful or do we want to spend most of our time building a globally distributed fault tolerant",
    "start": "2873160",
    "end": "2879200"
  },
  {
    "text": "microservices architecture with zero users had our team chosen this",
    "start": "2879200",
    "end": "2885000"
  },
  {
    "text": "microservices architecture too early the team could have run into those availability couplings uh problems",
    "start": "2885000",
    "end": "2890640"
  },
  {
    "text": "really early on and perhaps never have succeeded so at early stages our team's",
    "start": "2890640",
    "end": "2896000"
  },
  {
    "text": "goals should align more towards meeting our customers needs um in the near near",
    "start": "2896000",
    "end": "2901440"
  },
  {
    "text": "term and as cheaply as possible and that's it thank",
    "start": "2901440",
    "end": "2906710"
  },
  {
    "text": "[Applause]",
    "start": "2906710",
    "end": "2912999"
  },
  {
    "text": "you I'm going to supplement it a little bit with um if you uh get a hold of my slides I've got some other talks here",
    "start": "2915240",
    "end": "2921720"
  },
  {
    "text": "that are fantastic to to um watch over as well identifying watching Talks by other people um is the best way to learn",
    "start": "2921720",
    "end": "2928440"
  },
  {
    "text": "so this one's particularly good you want to take your pictures of it this guy actually spoke after me when I presented",
    "start": "2928440",
    "end": "2934520"
  },
  {
    "text": "this one at ya and they compl mented each other really well so if you want to see this one it's a good one to",
    "start": "2934520",
    "end": "2940680"
  },
  {
    "text": "watch um this one goes over the event patterns that I talked about before um Martin F's fantastic he's a",
    "start": "2940680",
    "end": "2948880"
  },
  {
    "text": "fantastic orator so he speaks very well he's very clear uh and this one's a really good one to talk about um",
    "start": "2948880",
    "end": "2955680"
  },
  {
    "text": "communication patterns uh choreography and orchestration lots of detail in here this is he's uh he's an",
    "start": "2955680",
    "end": "2963119"
  },
  {
    "text": "expert thanks guys",
    "start": "2963119",
    "end": "2967519"
  }
]