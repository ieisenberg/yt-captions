[
  {
    "text": "alright let's get started welcome to the session on JavaScript the cute parts my",
    "start": "4839",
    "end": "9920"
  },
  {
    "text": "name is Venkat Subramanyam we're going to talk about some of the wonderful features in JavaScript especially in es6",
    "start": "9920",
    "end": "16670"
  },
  {
    "text": "and some of the things we can actually do a lot better well this time to ask",
    "start": "16670",
    "end": "21830"
  },
  {
    "text": "questions or make comments as whenever you have it if you do have a question or a comment I request you to start",
    "start": "21830",
    "end": "27409"
  },
  {
    "text": "speaking up I cannot see actually from here because of the lights in front of me but if used I draw my attention I'll",
    "start": "27409",
    "end": "34070"
  },
  {
    "text": "be more than happy to listen to you so let's talk about just a little bit about the good old JavaScript you know I was",
    "start": "34070",
    "end": "41510"
  },
  {
    "text": "thinking about how to describe JavaScript as a language and can you believe it this is 2018 and we are",
    "start": "41510",
    "end": "49399"
  },
  {
    "text": "talking about JavaScript and so here's my definition of what JavaScript is it's like that bad villain in the movie they",
    "start": "49399",
    "end": "56390"
  },
  {
    "text": "keep killing him but he keeps coming back to life that's how it feels about JavaScript isn't it but JavaScript the",
    "start": "56390",
    "end": "62510"
  },
  {
    "text": "old one was really notorious but here we're talking about thankfully modern JavaScript modern JavaScript is a lot",
    "start": "62510",
    "end": "70670"
  },
  {
    "text": "better it's learnt a lot of things from a lot of different languages for example languages like Ruby and Java and c-sharp",
    "start": "70670",
    "end": "78590"
  },
  {
    "text": "and so on a lot of different languages it's got inspiration from and there's a",
    "start": "78590",
    "end": "83990"
  },
  {
    "text": "lot of number of beautiful features in fact I never thought I would get actually excited about JavaScript but",
    "start": "83990",
    "end": "89930"
  },
  {
    "text": "honestly has to started playing with JavaScript the modern versions I got pretty excited about it so much that I",
    "start": "89930",
    "end": "95689"
  },
  {
    "text": "actually wrote a book on it call the rediscovering JavaScript it's in a way that it's really true that it's a",
    "start": "95689",
    "end": "101240"
  },
  {
    "text": "rediscovery because it's a language that's been around for 20 plus years and yet there is so much to really do with",
    "start": "101240",
    "end": "108289"
  },
  {
    "text": "that given the changes that the language has gone through over the past you know a few years so I want to talk on barbra",
    "start": "108289",
    "end": "114829"
  },
  {
    "text": "about what are the better things we can do and I want to share with you some of the parts I'm really excited about what",
    "start": "114829",
    "end": "120229"
  },
  {
    "text": "I call as the cute parts are things that really are making a real life's a lot better so let's talk about a few things",
    "start": "120229",
    "end": "126409"
  },
  {
    "text": "that we shouldn't do and we should probably move towards doing the first is we should really get rid of bar in the",
    "start": "126409",
    "end": "134780"
  },
  {
    "text": "code var is really a bad idea so for example if you save our max equal mm and",
    "start": "134780",
    "end": "141620"
  },
  {
    "text": "I want to print the value of max right there but for reasons I don't understand you could actually do var 200 and you",
    "start": "141620",
    "end": "149480"
  },
  {
    "text": "can print var what doesn't make sense any sense here is that we are redefining",
    "start": "149480",
    "end": "155000"
  },
  {
    "text": "the variable one more time it makes no sense at all to redefine a variable hiding this particular variable at this",
    "start": "155000",
    "end": "161750"
  },
  {
    "text": "point not a very healthy thing to do but also if you continue a little further let's say we have a function right now",
    "start": "161750",
    "end": "168170"
  },
  {
    "text": "and within the function I'm gonna say let's say local 1 and the local 1 is",
    "start": "168170",
    "end": "174350"
  },
  {
    "text": "equal to let's say a value of 7 and I want to print out the value of local 1 as you can see right here and it printed",
    "start": "174350",
    "end": "180950"
  },
  {
    "text": "it but what I want to do here is to define a block scope so within this block I'm gonna say local 2 equal to",
    "start": "180950",
    "end": "188180"
  },
  {
    "text": "let's say a value of 8 and I'm printing local 2 and that worked also but",
    "start": "188180",
    "end": "193790"
  },
  {
    "text": "unfortunately though at the time of war JavaScript really did not have a block",
    "start": "193790",
    "end": "199820"
  },
  {
    "text": "scope so what JavaScript does is it comes along nicely and says hey look I",
    "start": "199820",
    "end": "205340"
  },
  {
    "text": "found a little nice little braces and throws it away it has no meaning at all unfortunately so as a result notice I'm",
    "start": "205340",
    "end": "213410"
  },
  {
    "text": "able to use local 2 right outside of the block scope which is pretty nasty so",
    "start": "213410",
    "end": "219290"
  },
  {
    "text": "these are some of the problems with var so what do you do with var so the best thing to suggest is a quit using var",
    "start": "219290",
    "end": "227120"
  },
  {
    "text": "because this is really not a good idea at all so moving forward we should not use var so what should we do instant",
    "start": "227120",
    "end": "234110"
  },
  {
    "text": "well let's get back to this code for a second let's say use the let if you will and I'm gonna say max equal to 1000 now",
    "start": "234110",
    "end": "241580"
  },
  {
    "text": "I'm gonna print the value of Max it's 1000 now I say let max equal to 200 and",
    "start": "241580",
    "end": "247670"
  },
  {
    "text": "I want to print the value of Max well that will give an error as you can see and the reason is you cannot redefine a",
    "start": "247670",
    "end": "255739"
  },
  {
    "text": "variable that's been defined using let that's the really good news similarly if",
    "start": "255739",
    "end": "260959"
  },
  {
    "text": "I have a function called a flu and in this function if I were to define let let's say a local 1 is equal to 7 one",
    "start": "260959",
    "end": "269210"
  },
  {
    "text": "more time and I'm gonna print local one and I'm calling the function foo you can see that actually",
    "start": "269210",
    "end": "274320"
  },
  {
    "text": "work but if I were to put a block scope and say local 2 equals to 8 and I'm",
    "start": "274320",
    "end": "280440"
  },
  {
    "text": "printing local 2 and you can see that in this case if I were to try to access local 2 outside that would become an",
    "start": "280440",
    "end": "288420"
  },
  {
    "text": "error as you can see I'm not allowed on line number 10 to access the variable because it's got block scope so the good",
    "start": "288420",
    "end": "296280"
  },
  {
    "text": "news is let has block scope and then of course can't be redefined as well so in",
    "start": "296280",
    "end": "304260"
  },
  {
    "text": "other words what what I'm getting to is quit using var so quit using var use let",
    "start": "304260",
    "end": "312630"
  },
  {
    "text": "but having said that I'm gonna change it right away so don't use let as much as",
    "start": "312630",
    "end": "320220"
  },
  {
    "text": "possible so why not I'm gonna give you an example of why let is not a smartest",
    "start": "320220",
    "end": "325860"
  },
  {
    "text": "thing on earth let's take a look at one example real quick let's say for a minute I say a factor equal to 2 for a",
    "start": "325860",
    "end": "333000"
  },
  {
    "text": "minute well that's great now I want to say over here print it equal to and I'm",
    "start": "333000",
    "end": "339000"
  },
  {
    "text": "gonna take an element but I'm gonna print out right here let's go ahead and say in this case e times factor now of",
    "start": "339000",
    "end": "346920"
  },
  {
    "text": "course I'm gonna call print 8 pass a value of 2 and you can see that the value is 4 there's no surprise over",
    "start": "346920",
    "end": "353070"
  },
  {
    "text": "there but I'm gonna now go ahead and say factor equal to 0 now honestly I'm gonna",
    "start": "353070",
    "end": "359790"
  },
  {
    "text": "ask you the question what are you how many of you think the output is going to be 4 just to show off hand",
    "start": "359790",
    "end": "366590"
  },
  {
    "text": "not a single person thinks it's a 4 how many of you think it is 0 a few people raised the hand others did",
    "start": "366590",
    "end": "374400"
  },
  {
    "text": "not how many of you think I have no clue absolutely I'm with you that's exactly",
    "start": "374400",
    "end": "380430"
  },
  {
    "text": "where I am - I have no clue well I work with multiple languages this is way too much then my smartness can help me and I",
    "start": "380430",
    "end": "388470"
  },
  {
    "text": "look at this I'm like huh what's this happening well here is a beautiful thing I often like to give this as an",
    "start": "388470",
    "end": "393780"
  },
  {
    "text": "interview question and I would give this an interview question and ask the developer what is the output if they try",
    "start": "393780",
    "end": "399990"
  },
  {
    "text": "to answer the question I tell them you are fired even before they are high because the right answer is are you all",
    "start": "399990",
    "end": "406889"
  },
  {
    "text": "stupid to write code like this then you're hired because the point is we want to write code that's easy to work",
    "start": "406889",
    "end": "412739"
  },
  {
    "text": "with this is terrible code well as you can see the result was zero but that's",
    "start": "412739",
    "end": "417929"
  },
  {
    "text": "really complex what should we do instead well this is why we want to use a constant instead because a constant",
    "start": "417929",
    "end": "424860"
  },
  {
    "text": "cannot be mutated notice in this case when I try to run the code I get an error on line number five saying that",
    "start": "424860",
    "end": "431489"
  },
  {
    "text": "line five says I cannot mutate the variable because it's a constant so the",
    "start": "431489",
    "end": "437039"
  },
  {
    "text": "short answer is quit using so quit using var that's a very first thing you sconce",
    "start": "437039",
    "end": "444509"
  },
  {
    "text": "TWEN use let only where Const is not you know",
    "start": "444509",
    "end": "453029"
  },
  {
    "text": "possible so this should be the really go to recommendation is quit using var use",
    "start": "453029",
    "end": "458309"
  },
  {
    "text": "constant wherever possible and use led only when a constant is not possible so",
    "start": "458309",
    "end": "463949"
  },
  {
    "text": "your go-to should really be to use constant I would in fact say that this is one of the things we should do as a",
    "start": "463949",
    "end": "469439"
  },
  {
    "text": "coding standard in Java moving forward these developers should use Const more often and less use let less often and",
    "start": "469439",
    "end": "476999"
  },
  {
    "text": "and quit using var and and stay out of that as much as possible okay so we",
    "start": "476999",
    "end": "482279"
  },
  {
    "text": "talked about the let and the bar the other thing to think about is in the older syntax we had arguments let's talk",
    "start": "482279",
    "end": "490110"
  },
  {
    "text": "about that a little bit so let's say for a minute I'm gonna say constant max is equal to function and in this case I'm",
    "start": "490110",
    "end": "497519"
  },
  {
    "text": "gonna say a comma B and all I'm gonna do is if a is greater than B return a",
    "start": "497519",
    "end": "503089"
  },
  {
    "text": "otherwise I'm gonna say return B I'm going to call right now this particular function max but I'm going to go ahead",
    "start": "503089",
    "end": "509849"
  },
  {
    "text": "and call the function max with let's say 1 & 2 clearly the result is to no",
    "start": "509849",
    "end": "514888"
  },
  {
    "text": "surprise over there now I'm gonna say max with a let's say a 4 and a 2 well clearly the result is a 4",
    "start": "514889",
    "end": "522060"
  },
  {
    "text": "no surprise over there but what if I say over here max with a 4 and a 7 and a 2",
    "start": "522060",
    "end": "529139"
  },
  {
    "text": "well I'm passing three arguments wherein I have given only two parameters a and B",
    "start": "529139",
    "end": "535620"
  },
  {
    "text": "here but when I run the notice it still gave us a value of seven now how in the world can JavaScript do",
    "start": "535620",
    "end": "542870"
  },
  {
    "text": "that well the reason is JavaScript reaps you like a guest in its house it doesn't",
    "start": "542870",
    "end": "549139"
  },
  {
    "text": "yell at you and say hey you idiot you shouldn't send three when two is expected it'll quietly smile away and accept",
    "start": "549139",
    "end": "555980"
  },
  {
    "text": "everything you give every function really is a bar art function in JavaScript actually this is a little",
    "start": "555980",
    "end": "562399"
  },
  {
    "text": "fooling example because notice that in this case it said seven as an output but if I send it world clearly that's broken",
    "start": "562399",
    "end": "569509"
  },
  {
    "text": "it's still sending a seven so what's going on here what's going on here is that every function is a var art so what",
    "start": "569509",
    "end": "577459"
  },
  {
    "text": "you could do in the past was the following you could write code like this you could say for example you know result is equal",
    "start": "577459",
    "end": "585439"
  },
  {
    "text": "to arguments if you will zero and then you could return the result when you're",
    "start": "585439",
    "end": "591350"
  },
  {
    "text": "done with it but with tildes of course you could write code like this far you could say I",
    "start": "591350",
    "end": "596569"
  },
  {
    "text": "is equal to zero I less than arguments start lent and then of course you could",
    "start": "596569",
    "end": "601610"
  },
  {
    "text": "say I plus plus and then you could say for example if result is less than",
    "start": "601610",
    "end": "606680"
  },
  {
    "text": "arguments of I then of course result is equal to arguments of I and so in other",
    "start": "606680",
    "end": "612949"
  },
  {
    "text": "words in the past arguments was useful for representing variable arguments so",
    "start": "612949",
    "end": "619730"
  },
  {
    "text": "as you can see in this example the result was a correct 12 because our humans represent now there were a few",
    "start": "619730",
    "end": "626810"
  },
  {
    "text": "problems with this code the problem is couple of things the first problem of problem 1 is how many parameters does",
    "start": "626810",
    "end": "636620"
  },
  {
    "text": "parameters does this function take and and the answer to that is who knows",
    "start": "636620",
    "end": "643579"
  },
  {
    "text": "right because you look at this if it doesn't take any parameters you could actually take a lot of parameters how",
    "start": "643579",
    "end": "650630"
  },
  {
    "text": "what logic is that how do you describe this to somebody and saying this function doesn't take anything so he can",
    "start": "650630",
    "end": "656600"
  },
  {
    "text": "send anything you want to it that is clearly doesn't make any sense at all that's one problem the second problem is",
    "start": "656600",
    "end": "663009"
  },
  {
    "text": "what is arguments well that's a very sad story so arguments is",
    "start": "663009",
    "end": "670760"
  },
  {
    "text": "our Rhea wannabe so it was not an array it died before it could become an array",
    "start": "670760",
    "end": "677480"
  },
  {
    "text": "so as a result it just is longing to be an array but it cannot use it as an array which is really really sad let's",
    "start": "677480",
    "end": "684709"
  },
  {
    "text": "take a look at an example here if I were to say in this case arguments and say instance instance are off let's say",
    "start": "684709",
    "end": "693079"
  },
  {
    "text": "instance off and then I say array notice the Falls that you get as an output so",
    "start": "693079",
    "end": "699260"
  },
  {
    "text": "that's a really sad isn't it because arguments is not an array so you cannot",
    "start": "699260",
    "end": "705050"
  },
  {
    "text": "use this an array so what do programmers normally do they write code to",
    "start": "705050",
    "end": "710120"
  },
  {
    "text": "forcefully convert arguments to an array which really begins to smell bad in the",
    "start": "710120",
    "end": "716120"
  },
  {
    "text": "code it's error-prone its verbose more coding to do what is the answer good news",
    "start": "716120",
    "end": "721970"
  },
  {
    "text": "moving forward quit using arguments there should be no arguments about it what you really want to use is the rest",
    "start": "721970",
    "end": "729529"
  },
  {
    "text": "parameter so how do you use a rest parameter notice I'm gonna start",
    "start": "729529",
    "end": "734600"
  },
  {
    "text": "refactoring this code slowly to start using rest parameters so the first thing",
    "start": "734600",
    "end": "740149"
  },
  {
    "text": "I'm gonna do here is put three dots that's the ellipsis to say that this parameter is a rest parameter and I'll",
    "start": "740149",
    "end": "746959"
  },
  {
    "text": "call it as numbers right here and notice now we are passing numbers but it's been",
    "start": "746959",
    "end": "752389"
  },
  {
    "text": "indicated as a respirometer what's the first benefit the first benefit is when you look at this code it is absolutely",
    "start": "752389",
    "end": "759319"
  },
  {
    "text": "clear how many arguments you can pass through this you can pass 0 through any number of arguments because the ellipsis",
    "start": "759319",
    "end": "766250"
  },
  {
    "text": "gives away that particular argument the second thing is if you look at this here",
    "start": "766250",
    "end": "771410"
  },
  {
    "text": "I'm gonna ask for numbers instance of array notice false and true while the",
    "start": "771410",
    "end": "778250"
  },
  {
    "text": "arguments is not an array numbers is actually an array this opens up door for",
    "start": "778250",
    "end": "783980"
  },
  {
    "text": "some really nice things you can actually do with this so for example I'm a huge",
    "start": "783980",
    "end": "789260"
  },
  {
    "text": "fan of functional style of programming unfortunately though you cannot say are",
    "start": "789260",
    "end": "795139"
  },
  {
    "text": "humans dart reduce that is not a valid function as you can see it fails because",
    "start": "795139",
    "end": "800959"
  },
  {
    "text": "reduce does not exist on arguments because arguments is not an array on the other",
    "start": "800959",
    "end": "806540"
  },
  {
    "text": "hand you can do numbers start reduce that is a function available undefined",
    "start": "806540",
    "end": "812780"
  },
  {
    "text": "is not a function belt that will come to that in a second numbers can be used with the reduce method very easily so",
    "start": "812780",
    "end": "819680"
  },
  {
    "text": "what is the model of the story the model of the story is while you could write code like this you can actually start",
    "start": "819680",
    "end": "825920"
  },
  {
    "text": "using numbers in fact let's do it this way let's go ahead and copy this over so",
    "start": "825920",
    "end": "831440"
  },
  {
    "text": "in this case instead of using the arguments the very first thing is it's easier to refactor the code",
    "start": "831440",
    "end": "837350"
  },
  {
    "text": "so notice everywhere I have arguments I could use numbers right now so it",
    "start": "837350",
    "end": "843020"
  },
  {
    "text": "becomes a nice stand-in replacement for it right there so I could actually use the numbers but",
    "start": "843020",
    "end": "849320"
  },
  {
    "text": "having done that those two look extremely similar to each other but I could actually go back to this code and",
    "start": "849320",
    "end": "856010"
  },
  {
    "text": "say well return and in this case I can say numbers dart reduce and and now I",
    "start": "856010",
    "end": "862790"
  },
  {
    "text": "can provide a bunch of values for this for example I can say in this case given",
    "start": "862790",
    "end": "868430"
  },
  {
    "text": "a max will say result comma element and then we can write it in a functional style for example and I can say if",
    "start": "868430",
    "end": "875720"
  },
  {
    "text": "result is greater than element well then return the result otherwise",
    "start": "875720",
    "end": "881960"
  },
  {
    "text": "return the element I can write this in a beautiful functional style as you can see in this case so that is not possible",
    "start": "881960",
    "end": "889420"
  },
  {
    "text": "with the arguments but we can do this nicely with the rest parameter so that's",
    "start": "889420",
    "end": "894740"
  },
  {
    "text": "one of the biggest benefits you get out of this is the rest parameter so what's the model of the story the model of the",
    "start": "894740",
    "end": "900200"
  },
  {
    "text": "story is the following quit using so quit using arguments instead instead use",
    "start": "900200",
    "end": "908620"
  },
  {
    "text": "rest which is the dot dot so that is a much better way to write code moving forward he want to use rest because a",
    "start": "908620",
    "end": "915770"
  },
  {
    "text": "it's descriptive it's easy to see what you're passing and B the other benefit is it is a full-blown array it can",
    "start": "915770",
    "end": "923660"
  },
  {
    "text": "benefit from the methods of the array you can write it imperatively you can write it functionally so that's",
    "start": "923660",
    "end": "929210"
  },
  {
    "text": "one benefit you get out of using this so that's a great benefit you get out of using the rest but as a opposite to rest",
    "start": "929210",
    "end": "936260"
  },
  {
    "text": "you have what's called as right operator let's take a look at the spread operator real quick let's take",
    "start": "936260",
    "end": "942410"
  },
  {
    "text": "one example and play with it notice in this example I called max with",
    "start": "942410",
    "end": "948020"
  },
  {
    "text": "the values four seven and twelve but on the other side notice it's a rest parameter what if I have the following",
    "start": "948020",
    "end": "955220"
  },
  {
    "text": "what if instead of this I have a constant array is equal to let's say one",
    "start": "955220",
    "end": "961310"
  },
  {
    "text": "two three and I want to call the function with the array so what if I did the following what if I said max and",
    "start": "961310",
    "end": "968690"
  },
  {
    "text": "pass the array to it well you clearly know this is not working properly because the result should have been a",
    "start": "968690",
    "end": "975200"
  },
  {
    "text": "three not the array one two three so what just happened what happened was it",
    "start": "975200",
    "end": "981260"
  },
  {
    "text": "passed the entire array has one value to the numbers if you ask the numbers what",
    "start": "981260",
    "end": "987590"
  },
  {
    "text": "it contains it contains one element which is the entire array that's not your intention so what should you do",
    "start": "987590",
    "end": "993980"
  },
  {
    "text": "instead of this what you can do instead of this is you can call max and say array square bracket and then you can",
    "start": "993980",
    "end": "1002020"
  },
  {
    "text": "pass a zero and then of course you can say comma 1 and then comma 2 and now you",
    "start": "1002020",
    "end": "1008710"
  },
  {
    "text": "can see the result is 3 but if you write code like this you will soon realize you",
    "start": "1008710",
    "end": "1014440"
  },
  {
    "text": "need another job right this is not a fun way to write code this is not gonna be really fun at all imagine writing code",
    "start": "1014440",
    "end": "1021700"
  },
  {
    "text": "like this for 8 hours a day you're not going to like the job anymore so what do you do well the good news is you don't",
    "start": "1021700",
    "end": "1027880"
  },
  {
    "text": "need another job you just need a better language and JavaScript now provides that so max over here and then you can",
    "start": "1027880",
    "end": "1035380"
  },
  {
    "text": "use the spread operator right there and you can use the spread so how do you",
    "start": "1035380",
    "end": "1040630"
  },
  {
    "text": "know it's a rest or a spread notice the ellipses being used here and the ellipse is being used here as well if you use",
    "start": "1040630",
    "end": "1047709"
  },
  {
    "text": "the ellipses on the receiving side it's the rest have used ellipses on the sending side it's a spread operator but",
    "start": "1047710",
    "end": "1055720"
  },
  {
    "text": "what is really cool about it is the spread is probably one of the coolest operators available in JavaScript let's",
    "start": "1055720",
    "end": "1063340"
  },
  {
    "text": "explore this a little bit further it is not just for rest on the other side you",
    "start": "1063340",
    "end": "1068950"
  },
  {
    "text": "can actually use it for discrete parameters as well let's look at an example let's say grit equals two function and I'm taking",
    "start": "1068950",
    "end": "1076640"
  },
  {
    "text": "name one and name two over here and in this case I'm going to go ahead and print out let's say you know let's say",
    "start": "1076640",
    "end": "1083390"
  },
  {
    "text": "hello and then we'll put name one and we will put name two right here so this is",
    "start": "1083390",
    "end": "1089150"
  },
  {
    "text": "a little function called greet that we wrote now what I'm gonna do here is I'm gonna call greet with let's say Jack",
    "start": "1089150",
    "end": "1096770"
  },
  {
    "text": "comma Jill and you can see that in this case I can pass Jack and Jill to this function but what if I had names equals",
    "start": "1096770",
    "end": "1104330"
  },
  {
    "text": "two let's say Tom comma Jerry right here and I want to be able to pass this to",
    "start": "1104330",
    "end": "1110360"
  },
  {
    "text": "this function well clearly if you try to say agreed with names that's not going",
    "start": "1110360",
    "end": "1116840"
  },
  {
    "text": "to work really well you have Tom Jerry and I'm defined not quite what you really wanted so what you really wanted",
    "start": "1116840",
    "end": "1123440"
  },
  {
    "text": "was named square brackets 0 comma name square bracket 1 and that is also known",
    "start": "1123440",
    "end": "1128690"
  },
  {
    "text": "as a sad pattern right so we don't want to do that so what you can do instead is you can say agreed and then you can",
    "start": "1128690",
    "end": "1135350"
  },
  {
    "text": "reuse the spread operator on it and notice how beautiful that is in terms of how we can pass it that becomes a lot",
    "start": "1135350",
    "end": "1142250"
  },
  {
    "text": "easier to pass their data so you can use a spread operator notice that you're",
    "start": "1142250",
    "end": "1147590"
  },
  {
    "text": "using spread on the side but you don't have rest on this other side which is",
    "start": "1147590",
    "end": "1152690"
  },
  {
    "text": "really powerful you can use a spread anywhere you want to do you take your collection and spread it but what's",
    "start": "1152690",
    "end": "1159410"
  },
  {
    "text": "really cool about the spread operator is you can combine arrays as well so as an",
    "start": "1159410",
    "end": "1165800"
  },
  {
    "text": "example let's say you have names one names two names let's say others over",
    "start": "1165800",
    "end": "1171350"
  },
  {
    "text": "here so I'm gonna have others and in this case I'm gonna come in here and say others start join with the little comma",
    "start": "1171350",
    "end": "1179000"
  },
  {
    "text": "well if I run this code you can see it said Tom & Jerry so far that's great but",
    "start": "1179000",
    "end": "1184880"
  },
  {
    "text": "what I can also do here is I can say for example constant let's say names one",
    "start": "1184880",
    "end": "1191360"
  },
  {
    "text": "equals two let's say Jack comma Jill and then I'm gonna say over here oh let's go",
    "start": "1191360",
    "end": "1197960"
  },
  {
    "text": "ahead and say one more at this point we'll say constant names two equals two let's say Tom and",
    "start": "1197960",
    "end": "1204540"
  },
  {
    "text": "jerry and we will also say let's say over here a spike but notice what i can",
    "start": "1204540",
    "end": "1210390"
  },
  {
    "text": "do now i can call greet but i can send to this for example names too",
    "start": "1210390",
    "end": "1217500"
  },
  {
    "text": "well in this case what is it going to do when I take the greet and past names due",
    "start": "1217500",
    "end": "1222840"
  },
  {
    "text": "to it well you can see it said hello Tom Jerry we'll just say and so we can",
    "start": "1222840",
    "end": "1228330"
  },
  {
    "text": "actually see the difference right here and it says Tom Jerry and spike on the other hand I can also say greet like",
    "start": "1228330",
    "end": "1235260"
  },
  {
    "text": "this but this time around I'm gonna say names one but I'm going to go ahead and",
    "start": "1235260",
    "end": "1241260"
  },
  {
    "text": "combine names one and then I'm going to combine names two and then I'm going to",
    "start": "1241260",
    "end": "1248040"
  },
  {
    "text": "spread it out so I can actually pass all of that through and that's pretty darn",
    "start": "1248040",
    "end": "1253230"
  },
  {
    "text": "powerful as ended you're able to combine two arrays together into one if you",
    "start": "1253230",
    "end": "1258420"
  },
  {
    "text": "wanted to but you can also go a little further if you wanted to for example you can say agreed and then you can say a",
    "start": "1258420",
    "end": "1265620"
  },
  {
    "text": "Bob comma J in for example and then comma and then you can say names one and",
    "start": "1265620",
    "end": "1272850"
  },
  {
    "text": "you can combine it using that as well so you can start combining them in any form",
    "start": "1272850",
    "end": "1278310"
  },
  {
    "text": "or fashion and you can put this together to communicate and and and combine",
    "start": "1278310",
    "end": "1283860"
  },
  {
    "text": "either array of data or discrete values into it you can do that as well",
    "start": "1283860",
    "end": "1289470"
  },
  {
    "text": "so for example in this case I can take Bob into a collection I can then bring",
    "start": "1289470",
    "end": "1294840"
  },
  {
    "text": "in names one into the collection then I can bring in Jane over here and then I",
    "start": "1294840",
    "end": "1300360"
  },
  {
    "text": "can also say for example names 2 and I can bring these together any form or",
    "start": "1300360",
    "end": "1306270"
  },
  {
    "text": "fashion so you can start combining them into this so that is a powerful operation of spread I'll show you one",
    "start": "1306270",
    "end": "1312870"
  },
  {
    "text": "more power of spread later on but it's by far one of the most charming operators I have actually come across in",
    "start": "1312870",
    "end": "1319590"
  },
  {
    "text": "JavaScript that's pretty darn wonderful well we saw how we can quit using var",
    "start": "1319590",
    "end": "1325680"
  },
  {
    "text": "and could using constant as much as possible we saw how to quit using arguments and start using rest and",
    "start": "1325680",
    "end": "1331500"
  },
  {
    "text": "spread well next let's talk about default parameters why do we care about",
    "start": "1331500",
    "end": "1337050"
  },
  {
    "text": "default parameters I take a slightly different view on this one of the reasons I like a default",
    "start": "1337050",
    "end": "1342250"
  },
  {
    "text": "parameter is not because you can send fewer parameters I think it's really cool because you can easily extend your",
    "start": "1342250",
    "end": "1349539"
  },
  {
    "text": "functions much more effectively so to understand this let's take a greet for a",
    "start": "1349539",
    "end": "1354789"
  },
  {
    "text": "minute and I'm gonna take a name as an argument and within this I'm gonna simply say over here hello and then I'm",
    "start": "1354789",
    "end": "1362590"
  },
  {
    "text": "gonna pass the name over here now I can call greet and say Jo right here and it",
    "start": "1362590",
    "end": "1368380"
  },
  {
    "text": "says hello Jo but let's say a few weeks goes by and you decide to change the",
    "start": "1368380",
    "end": "1373929"
  },
  {
    "text": "function so that you can add another parameter for the message well",
    "start": "1373929",
    "end": "1379840"
  },
  {
    "text": "unfortunately that's a really hard now because if you go back over here and say oh let's say message over here and I'm",
    "start": "1379840",
    "end": "1387760"
  },
  {
    "text": "gonna change this to a message right here the problem with this code is you",
    "start": "1387760",
    "end": "1392830"
  },
  {
    "text": "can call greet right now and for any new calls you can pass the message let's say",
    "start": "1392830",
    "end": "1398650"
  },
  {
    "text": "hi but what about existing code that's already there that's gonna be broken a",
    "start": "1398650",
    "end": "1405130"
  },
  {
    "text": "Jo is no longer happy with you because you said undefined Jo so that's not going to be fun at all what do we do",
    "start": "1405130",
    "end": "1411100"
  },
  {
    "text": "well the beauty is you can actually specify a default value for exactly that",
    "start": "1411100",
    "end": "1416590"
  },
  {
    "text": "reason it makes it really easy to extend existing methods so for example you can",
    "start": "1416590",
    "end": "1421840"
  },
  {
    "text": "say hello right there and you can see how you're able to bring that in and you can use it so this is one nice",
    "start": "1421840",
    "end": "1428830"
  },
  {
    "text": "capability you're able to bring that in so if I say greet right here and only",
    "start": "1428830",
    "end": "1434590"
  },
  {
    "text": "pass Jerry you can see it says hello Jerry but one of the really interesting",
    "start": "1434590",
    "end": "1440350"
  },
  {
    "text": "features of the default parameters in JavaScript is not only can you use a",
    "start": "1440350",
    "end": "1447460"
  },
  {
    "text": "default parameter but you can also go here and specify if you will notice I'm",
    "start": "1447460",
    "end": "1454840"
  },
  {
    "text": "going to change this alight slightly and I'm gonna put a little dollar and I say",
    "start": "1454840",
    "end": "1459940"
  },
  {
    "text": "named dart length if you will this is kind of weird isn't it this is how you",
    "start": "1459940",
    "end": "1465100"
  },
  {
    "text": "can say hi fight to Jerry so this is a nice way for you to actually use",
    "start": "1465100",
    "end": "1471190"
  },
  {
    "text": "barometer in a previous parameter that's there you can use that so this is really",
    "start": "1471190",
    "end": "1476440"
  },
  {
    "text": "powerful as you can see where you can create this particular default value but",
    "start": "1476440",
    "end": "1481600"
  },
  {
    "text": "also combine it with expressions that are previously in the parameter list obviously in this case if you call greet",
    "start": "1481600",
    "end": "1489250"
  },
  {
    "text": "with Jo and say hello you will not of course get that particular feature but you can see in",
    "start": "1489250",
    "end": "1496180"
  },
  {
    "text": "the other one you're able to use that so that's a pretty darn powerful feature as you can see within this particular",
    "start": "1496180",
    "end": "1501970"
  },
  {
    "text": "default parameters well having said that though we can use the define parameters",
    "start": "1501970",
    "end": "1507580"
  },
  {
    "text": "for write but there is one difference we have to be very careful about and when I showed this to you you probably will",
    "start": "1507580",
    "end": "1513760"
  },
  {
    "text": "look at this and say gosh this is nasty but there's a really good reason why they did it this way so let's look at",
    "start": "1513760",
    "end": "1519340"
  },
  {
    "text": "what that is if I go back to this code now notice I'm calling greet right now",
    "start": "1519340",
    "end": "1524620"
  },
  {
    "text": "and it said high-five Jerry but if I call greet right now and if I were to",
    "start": "1524620",
    "end": "1530800"
  },
  {
    "text": "say in here let's say Jo but I'm gonna pass a null to it",
    "start": "1530800",
    "end": "1536140"
  },
  {
    "text": "we know nullus smell we shouldn't really do this but what does it do well it simply passes the null so that's a",
    "start": "1536140",
    "end": "1543280"
  },
  {
    "text": "little nasty don't send on now having said that though this is a little weird if I send undefined right here notice",
    "start": "1543280",
    "end": "1551290"
  },
  {
    "text": "that it actually took the value in this case of the hi as a parameter so what's",
    "start": "1551290",
    "end": "1558250"
  },
  {
    "text": "going on why is undefined so special well there is a really good reason for",
    "start": "1558250",
    "end": "1563350"
  },
  {
    "text": "this the reason is if you call a method or call a function if it's returning an",
    "start": "1563350",
    "end": "1568780"
  },
  {
    "text": "object to you the object may not have certain properties if the object doesn't have certain properties those properties",
    "start": "1568780",
    "end": "1576190"
  },
  {
    "text": "if you try to access them become as undefined so the beauty is when you receive an object you can start giving",
    "start": "1576190",
    "end": "1583120"
  },
  {
    "text": "default values for properties that don't exist I will show this to you towards the end of this presentation when I",
    "start": "1583120",
    "end": "1589840"
  },
  {
    "text": "talked about D structuring which is pretty amazing how de structuring and",
    "start": "1589840",
    "end": "1595360"
  },
  {
    "text": "default end and spread all work together that's really an awesome way to see the",
    "start": "1595360",
    "end": "1601690"
  },
  {
    "text": "full power of the language so we'll see this a little later on well let's move a little forward we",
    "start": "1601690",
    "end": "1607870"
  },
  {
    "text": "talked about functions pretty much so far but let's talk about looping values",
    "start": "1607870",
    "end": "1613600"
  },
  {
    "text": "so let's say we have a to begin with let's start with names if you will so in",
    "start": "1613600",
    "end": "1619870"
  },
  {
    "text": "this case I say names equals two let's say Tom again and Jerry and let's say",
    "start": "1619870",
    "end": "1625809"
  },
  {
    "text": "spike and I want to iterate over these values how do you do this in the old",
    "start": "1625809",
    "end": "1631350"
  },
  {
    "text": "JavaScript in the old JavaScript you would say far var and you would say I",
    "start": "1631350",
    "end": "1638080"
  },
  {
    "text": "equal to zero I less than names dart length I plus plus and then you would",
    "start": "1638080",
    "end": "1644679"
  },
  {
    "text": "say over here output maybe you would say something like I and then you would",
    "start": "1644679",
    "end": "1650620"
  },
  {
    "text": "provide a little dash over here and then plus names square bracket I now it",
    "start": "1650620",
    "end": "1656679"
  },
  {
    "text": "worked but nobody ever goes home proud after writing that code isn't it that's",
    "start": "1656679",
    "end": "1662620"
  },
  {
    "text": "a really low level code it's melts not very much fun and nothing to be proud about well the code has to be a lot more",
    "start": "1662620",
    "end": "1669490"
  },
  {
    "text": "concise than this how can we really make that happen well to do this let's try",
    "start": "1669490",
    "end": "1674980"
  },
  {
    "text": "the enhanced for loop this is a much better way to write the loops so far and",
    "start": "1674980",
    "end": "1681309"
  },
  {
    "text": "notice the beautiful word Const over there now this eye is pretty dangerous",
    "start": "1681309",
    "end": "1686500"
  },
  {
    "text": "eye is a variable nobody in the right mind will do it but usually programmers",
    "start": "1686500",
    "end": "1692289"
  },
  {
    "text": "are not always in the right mind so we might actually try to change this right and as a result that could be really a",
    "start": "1692289",
    "end": "1698620"
  },
  {
    "text": "bad idea well notice I put a word constant over here that makes the looping really safe so constant name and",
    "start": "1698620",
    "end": "1706779"
  },
  {
    "text": "the name is going to come from names over here and I can simply print the name right here as you can see notice it",
    "start": "1706779",
    "end": "1714279"
  },
  {
    "text": "says Tom Jerry and Spike that's awesome that was really easy to write it but I",
    "start": "1714279",
    "end": "1719590"
  },
  {
    "text": "know what you're thinking you're saying all right Venkat that worked all right but what about the 0 1 & 2 I really",
    "start": "1719590",
    "end": "1726070"
  },
  {
    "text": "wanted the indexing shouldn't I have access to that well yeah that would be really nice let's give it a try how to",
    "start": "1726070",
    "end": "1733090"
  },
  {
    "text": "write it with the indexing so what I'll do here yes I'll say for constant index is equal",
    "start": "1733090",
    "end": "1740460"
  },
  {
    "text": "to well actually entry off and we will say names dart and trees and we will",
    "start": "1740460",
    "end": "1748350"
  },
  {
    "text": "call the entries method and then what we will do here is we will simply print the",
    "start": "1748350",
    "end": "1753510"
  },
  {
    "text": "entry out well isn't that beautiful so you're able to get the entry value out of it nicely and",
    "start": "1753510",
    "end": "1760410"
  },
  {
    "text": "as a result you can see how it gave you an array of the entries you're saying",
    "start": "1760410",
    "end": "1765929"
  },
  {
    "text": "all right good first step but I really want to get the index value separate from the value how do you do that well",
    "start": "1765929",
    "end": "1773280"
  },
  {
    "text": "here's an idea what we could do here is we could go back to this code and say",
    "start": "1773280",
    "end": "1778710"
  },
  {
    "text": "well you give me the entry and I'll say constant index is equal to + 3 square",
    "start": "1778710",
    "end": "1786210"
  },
  {
    "text": "bracket 0 and constant name is equal to n 3 square bracket 1 and then we could",
    "start": "1786210",
    "end": "1793260"
  },
  {
    "text": "output of course the index value and then are two dashes and then the name we",
    "start": "1793260",
    "end": "1799679"
  },
  {
    "text": "could write it like this but something tells me you're not convinced about it right because this is a little verbose",
    "start": "1799679",
    "end": "1805500"
  },
  {
    "text": "you're writing three lines of code instead of writing one line of code okay",
    "start": "1805500",
    "end": "1810690"
  },
  {
    "text": "fair enough here's another beautiful thing you can do you can come to this code and you can put on a square bracket",
    "start": "1810690",
    "end": "1817080"
  },
  {
    "text": "and then you can say comma name and you can put the entry right here and remove",
    "start": "1817080",
    "end": "1822929"
  },
  {
    "text": "this part this is called the structuring and be structuring is beautiful as you",
    "start": "1822929",
    "end": "1829740"
  },
  {
    "text": "can see it's really saving you a little bit of an effort but you realize well if",
    "start": "1829740",
    "end": "1835080"
  },
  {
    "text": "you can do this why not simply take this away from here and simply go up here and",
    "start": "1835080",
    "end": "1842429"
  },
  {
    "text": "replace the entry and that would work as well as you can see right here so that",
    "start": "1842429",
    "end": "1847650"
  },
  {
    "text": "becomes a lot more elegant way to get the index out of it so this is really applying two different concepts together",
    "start": "1847650",
    "end": "1854700"
  },
  {
    "text": "we are using the enhanced for-loop on one hand but we are also using the B",
    "start": "1854700",
    "end": "1860370"
  },
  {
    "text": "structuring on the other hand as well it's an interplay of two different concepts nicely working together here",
    "start": "1860370",
    "end": "1866309"
  },
  {
    "text": "and that makes life lot easier as you can see so basically what we did we kind of refactor this into using the D",
    "start": "1866309",
    "end": "1873490"
  },
  {
    "text": "structuring that's what we are doing at this point so that's an enhanced for-loop but wait a minute we're using a",
    "start": "1873490",
    "end": "1880000"
  },
  {
    "text": "nice little enhanced for-loop but what in the world is names names is an array",
    "start": "1880000",
    "end": "1885370"
  },
  {
    "text": "an array is e terrible so we are able to use this very nicely well but what if I",
    "start": "1885370",
    "end": "1891910"
  },
  {
    "text": "want to use this for my own purpose for my own class so a class wheel is just",
    "start": "1891910",
    "end": "1898570"
  },
  {
    "text": "going to represent the wheel of a car class car contains a constructor and in",
    "start": "1898570",
    "end": "1904240"
  },
  {
    "text": "this case what I'm gonna do is say this got wheels is equal to and I'm gonna define a bunch of wheels over here so",
    "start": "1904240",
    "end": "1911920"
  },
  {
    "text": "it's a new wheel right here and we will create let's say four wheels for this",
    "start": "1911920",
    "end": "1917020"
  },
  {
    "text": "particular car so I created the four wheels of this car as you can see now",
    "start": "1917020",
    "end": "1922120"
  },
  {
    "text": "that I created four wheels what I want to do is the following I want to come in here and say constant car equals new car",
    "start": "1922120",
    "end": "1930070"
  },
  {
    "text": "so we create a new car object then I'm gonna say far constant wheel off car and",
    "start": "1930070",
    "end": "1938170"
  },
  {
    "text": "then I want to print out the wheel right after this so in this case I want to",
    "start": "1938170",
    "end": "1943870"
  },
  {
    "text": "just print out the wheel well unfortunately that doesn't work well the reason it doesn't work is look at the",
    "start": "1943870",
    "end": "1950380"
  },
  {
    "text": "error it gives you it tells you that car is not a terrible well how do I make the",
    "start": "1950380",
    "end": "1957550"
  },
  {
    "text": "car really iterable is the question well this is where you can create this",
    "start": "1957550",
    "end": "1963760"
  },
  {
    "text": "beautiful idea of generators and iterators very nicely but before we talk",
    "start": "1963760",
    "end": "1970120"
  },
  {
    "text": "about it we have to talk about something else so we'll come back to this so in JavaScript if you think about primitives",
    "start": "1970120",
    "end": "1979050"
  },
  {
    "text": "JavaScript had five primitives in the past so what were the primitives",
    "start": "1979050",
    "end": "1984220"
  },
  {
    "text": "javascript had it had number it had a string it had a boolean then it had a",
    "start": "1984220",
    "end": "1991270"
  },
  {
    "text": "null and had undefined so these were the five primitives javascript had well now",
    "start": "1991270",
    "end": "1998320"
  },
  {
    "text": "javascript has six primitives there is a new kid on the block",
    "start": "1998320",
    "end": "2003360"
  },
  {
    "text": "and the new kid on the block is actually called as symbol so what is a symbol a",
    "start": "2003360",
    "end": "2009299"
  },
  {
    "text": "symbol is a representation of internal symbols in the language if you use",
    "start": "2009299",
    "end": "2015749"
  },
  {
    "text": "languages like Ruby you're familiar with the idea of symbol not exactly the same",
    "start": "2015749",
    "end": "2021149"
  },
  {
    "text": "but a similar idea so a symbol can give you uniqueness now there can be several",
    "start": "2021149",
    "end": "2027179"
  },
  {
    "text": "purpose of a symbol but one purpose of symbol airs remember how JavaScript doesn't have",
    "start": "2027179",
    "end": "2032820"
  },
  {
    "text": "interfaces in Java in c-sharp and languages like Java you have concept of",
    "start": "2032820",
    "end": "2040100"
  },
  {
    "text": "interfaces well because JavaScript doesn't have interface what if you want",
    "start": "2040100",
    "end": "2045389"
  },
  {
    "text": "to tell somebody that they they should implement your method called foo well",
    "start": "2045389",
    "end": "2052020"
  },
  {
    "text": "the problem is they may already have a method called foo and how do you know if it is their method called foo are you",
    "start": "2052020",
    "end": "2059520"
  },
  {
    "text": "our method called foo to make things worse remember JavaScript doesn't have overloading of functions so if they",
    "start": "2059520",
    "end": "2066720"
  },
  {
    "text": "already have a function foo and you write a function called foo there's gonna be a collision between them how do",
    "start": "2066720",
    "end": "2072030"
  },
  {
    "text": "we deal with it well javascript found a way to deal with this rather than introducing interfaces",
    "start": "2072030",
    "end": "2078240"
  },
  {
    "text": "they decided to introduce unique method names and so because symbols are unique",
    "start": "2078240",
    "end": "2083579"
  },
  {
    "text": "method names that have symbol in their name or unique so one such symbol is",
    "start": "2083579",
    "end": "2090780"
  },
  {
    "text": "called symbol a dart iterator so the iterator is a special function and",
    "start": "2090780",
    "end": "2098010"
  },
  {
    "text": "because it's a symbol it is unique JavaScript will look for a function with",
    "start": "2098010",
    "end": "2104280"
  },
  {
    "text": "that name in your object and if your object contains that function that means",
    "start": "2104280",
    "end": "2109890"
  },
  {
    "text": "your function your object is e terrible if your object doesn't have that function your object is not iterable",
    "start": "2109890",
    "end": "2115950"
  },
  {
    "text": "well that's exactly what we're gonna use over here to perform the iteration on",
    "start": "2115950",
    "end": "2121290"
  },
  {
    "text": "our object so notice when I run the code it said that car is not eatable",
    "start": "2121290",
    "end": "2127500"
  },
  {
    "text": "so what am I gonna do now I'm gonna go back over here and I'm gonna write a simple dot iterator and",
    "start": "2127500",
    "end": "2136260"
  },
  {
    "text": "gonna provide a special function called the iterator function I won't have time",
    "start": "2136260",
    "end": "2141810"
  },
  {
    "text": "to go into the depth of this but I will give you a clue and then we'll switch to something a little simpler I'm gonna",
    "start": "2141810",
    "end": "2148020"
  },
  {
    "text": "simply say called over here right now so when I run this code notice the top",
    "start": "2148020",
    "end": "2153180"
  },
  {
    "text": "it says called and the reason it says called over there is it looked at the",
    "start": "2153180",
    "end": "2158460"
  },
  {
    "text": "symbol dot iterator and said AHA you are supporting an iterator thank you so much",
    "start": "2158460",
    "end": "2164310"
  },
  {
    "text": "I'm gonna call it if you want to implement the iterator for yourself that",
    "start": "2164310",
    "end": "2169440"
  },
  {
    "text": "syntax can become really ugly and nasty only a few people in the world have survived their journey well thankfully",
    "start": "2169440",
    "end": "2176160"
  },
  {
    "text": "you don't have to fight that hard you can do a lot better but before I show",
    "start": "2176160",
    "end": "2181470"
  },
  {
    "text": "you what you can do how many of you are familiar with c-sharp in the room just a quick show of hands awesome",
    "start": "2181470",
    "end": "2186990"
  },
  {
    "text": "how many of you are familiar with the Ruby for example a few ends our hands go",
    "start": "2186990",
    "end": "2192090"
  },
  {
    "text": "up well both Ruby and c-sharp have this keyword called yield well that's exactly",
    "start": "2192090",
    "end": "2197340"
  },
  {
    "text": "what you're gonna use if you understand what ile doesn't Ruby that's exactly what L doesn't see sharp that's exactly",
    "start": "2197340",
    "end": "2204240"
  },
  {
    "text": "what he'll does in JavaScript so notice what I'll do here I'm gonna say over",
    "start": "2204240",
    "end": "2209250"
  },
  {
    "text": "here called over here and then I'm gonna say yield just say a nasty one for now",
    "start": "2209250",
    "end": "2216030"
  },
  {
    "text": "what is it going to do well first of all I'm using the yield but you cannot just",
    "start": "2216030",
    "end": "2221370"
  },
  {
    "text": "used yield anywhere you want to I mentioned that there's a really ugly syntax most people don't survive it well",
    "start": "2221370",
    "end": "2227850"
  },
  {
    "text": "if you're writing that ugly syntax you're gonna write a lot of code here you can tell JavaScript compiler you",
    "start": "2227850",
    "end": "2234120"
  },
  {
    "text": "know what I don't want to go through the journey why don't you do the work for me well for that you had to bribe",
    "start": "2234120",
    "end": "2239550"
  },
  {
    "text": "JavaScript just a little bit and the bribe you give is called this Asterix so you cannot use yield in a function",
    "start": "2239550",
    "end": "2247320"
  },
  {
    "text": "that's not marked with an asterisk so they go as as buddies they always are",
    "start": "2247320",
    "end": "2252360"
  },
  {
    "text": "there together so now that I put an Asterix over there notice it's returning a value of 1 it's set called and it",
    "start": "2252360",
    "end": "2259890"
  },
  {
    "text": "returns 1 now notice I'm gonna change this to called 1 if you will and then I'm gonna repeat",
    "start": "2259890",
    "end": "2266100"
  },
  {
    "text": "this right here and I'll call this s called the 2 and return a to notice how it's a it's",
    "start": "2266100",
    "end": "2272260"
  },
  {
    "text": "called one and call two if you used to yield in c-sharp this is exactly how C sharp ield works as well so as you can",
    "start": "2272260",
    "end": "2279430"
  },
  {
    "text": "see here as you're looping through here it first comes in the iterator calls the",
    "start": "2279430",
    "end": "2284830"
  },
  {
    "text": "called one returns one goes back to the iteration here but then quietly comes",
    "start": "2284830",
    "end": "2290830"
  },
  {
    "text": "back and resumes over here without reentering the particular function so",
    "start": "2290830",
    "end": "2296320"
  },
  {
    "text": "this is like a code or peen if you will it jumps right in the middle of that code and execute until the next yield",
    "start": "2296320",
    "end": "2302650"
  },
  {
    "text": "and then you can see that it goes further down and ield three right here",
    "start": "2302650",
    "end": "2307720"
  },
  {
    "text": "and you can see in this case this is called three and just for our purpose",
    "start": "2307720",
    "end": "2313030"
  },
  {
    "text": "I'm gonna say in loop right here so you can see how that's actually going through in the loop iterating over the",
    "start": "2313030",
    "end": "2319570"
  },
  {
    "text": "concepts of yield versus the looping it's able to do this we can leverage this real leverage this really nicely",
    "start": "2319570",
    "end": "2326290"
  },
  {
    "text": "now notice what I'm gonna do here well first of all I'm interested in iterating",
    "start": "2326290",
    "end": "2332590"
  },
  {
    "text": "over the wheels after all so I can say for constant wheel off this dot wheels",
    "start": "2332590",
    "end": "2339640"
  },
  {
    "text": "and then I can simply say over here yield and then I can yield the wheel to",
    "start": "2339640",
    "end": "2347440"
  },
  {
    "text": "the collar so in this case you can see that we are getting one wheel at a time",
    "start": "2347440",
    "end": "2352750"
  },
  {
    "text": "from the call and that is the four wheels of the car we are able to get to it but actually you can do a lot better",
    "start": "2352750",
    "end": "2360700"
  },
  {
    "text": "than this this is where the power of yield really comes in rather than doing it this way when would you write code",
    "start": "2360700",
    "end": "2367870"
  },
  {
    "text": "like this if you want to control your own iteration you want to write code like this however you can also do illed",
    "start": "2367870",
    "end": "2375670"
  },
  {
    "text": "and then you can simply say this dot wheels over here and you can also",
    "start": "2375670",
    "end": "2381280"
  },
  {
    "text": "convert a collection and yield over the collection as well and that is pretty darn powerful as you can see this gives",
    "start": "2381280",
    "end": "2388570"
  },
  {
    "text": "a nice way to generate data from your collection well that's great so far but",
    "start": "2388570",
    "end": "2394320"
  },
  {
    "text": "what if I want to iterate over wheels and I want to iterate over doors",
    "start": "2394320",
    "end": "2399670"
  },
  {
    "text": "I want to iterate over seeds what have you well this of course is not going to help us because the",
    "start": "2399670",
    "end": "2406349"
  },
  {
    "text": "symbol dart iterator gives one iteration over the collection you want multiple",
    "start": "2406349",
    "end": "2411750"
  },
  {
    "text": "types of iterators what gifts well here comes the beauty you can simply go to this code and you can say wheels over",
    "start": "2411750",
    "end": "2419309"
  },
  {
    "text": "here let's call this as d wheels for the white confusion so doing wheels and I",
    "start": "2419309",
    "end": "2425339"
  },
  {
    "text": "simply come down here and say the wheels and notice how in this case D wheels can",
    "start": "2425339",
    "end": "2430589"
  },
  {
    "text": "be the function that I can start iterating over here in this code for the",
    "start": "2430589",
    "end": "2436230"
  },
  {
    "text": "iteration purpose and I can start doing that very nicely as you can see right here so in this case as you see the",
    "start": "2436230",
    "end": "2443519"
  },
  {
    "text": "wheels is a function but I turned the function into a generator by sprinkling",
    "start": "2443519",
    "end": "2449309"
  },
  {
    "text": "a star in front of it and as a result that becomes a generator function as a",
    "start": "2449309",
    "end": "2454829"
  },
  {
    "text": "result I can have yet another function called the doors if you will and the",
    "start": "2454829",
    "end": "2460890"
  },
  {
    "text": "doors can do whatever it wants to do if you want to iterate over doors you can call the doors you read over the wheels",
    "start": "2460890",
    "end": "2467490"
  },
  {
    "text": "you can call the wheels and so on so this becomes a really nice way for you to use this generator and so not only",
    "start": "2467490",
    "end": "2475619"
  },
  {
    "text": "can you use an elegant for loop you can also use elegant for loop on your own classes as well by implementing nice",
    "start": "2475619",
    "end": "2482849"
  },
  {
    "text": "little generators well the next thing I want to talk about is arrow functions",
    "start": "2482849",
    "end": "2489480"
  },
  {
    "text": "we'll talk about the structure of arrow functions and then we'll talk about some gotchas with it let's say we have a",
    "start": "2489480",
    "end": "2496829"
  },
  {
    "text": "greet is equal to function in this case I'm gonna take a name over here as a",
    "start": "2496829",
    "end": "2502049"
  },
  {
    "text": "parameter and then of course I'm gonna say let's say hello dollar name right",
    "start": "2502049",
    "end": "2508200"
  },
  {
    "text": "here in this case I can call greet and pass Jane over here and you can see that",
    "start": "2508200",
    "end": "2513839"
  },
  {
    "text": "it says hello Jane well this is a regular function I've written right here but what I can do here is we can use an",
    "start": "2513839",
    "end": "2521940"
  },
  {
    "text": "arrow function so let's talk about arrow function arrow function structure is as",
    "start": "2521940",
    "end": "2527819"
  },
  {
    "text": "follows you have a parenthesis parameter list fat arrow as they can call it",
    "start": "2527819",
    "end": "2535440"
  },
  {
    "text": "and then of course this is the same as you use in c-sharp and then you write a single line body of the function and so",
    "start": "2535440",
    "end": "2542069"
  },
  {
    "text": "this becomes the structure of an arrow function now the parentheses is optional",
    "start": "2542069",
    "end": "2547560"
  },
  {
    "text": "so it's optional if the parameter list has only one parameter so if you don't",
    "start": "2547560",
    "end": "2554819"
  },
  {
    "text": "have any parameter or you have more than one you're required to put a parenthesis but if you don't have anything other",
    "start": "2554819",
    "end": "2561060"
  },
  {
    "text": "than one parameter you can let go of it so how do we write this here in here",
    "start": "2561060",
    "end": "2566190"
  },
  {
    "text": "constant greet is equal to named arrow and then I can simply say over here",
    "start": "2566190",
    "end": "2572760"
  },
  {
    "text": "output hello and then a dollar name as you can see so we are using an arrow",
    "start": "2572760",
    "end": "2578910"
  },
  {
    "text": "function rather than writing a regular function so this becomes a very concise",
    "start": "2578910",
    "end": "2584310"
  },
  {
    "text": "way of writing the code but unfortunately though this is easy said than done the problem is you cannot just",
    "start": "2584310",
    "end": "2592200"
  },
  {
    "text": "simply use an arrow function anywhere there is a function that's a really a",
    "start": "2592200",
    "end": "2597810"
  },
  {
    "text": "slippery slope we're gonna get hurt if you do that well why is that such a big problem for this we have to understand",
    "start": "2597810",
    "end": "2604650"
  },
  {
    "text": "the scoping now let's talk about scoping let's say you know kind languages use",
    "start": "2604650",
    "end": "2613109"
  },
  {
    "text": "what is called lexical scoping so what is lexical scoping lexical scoping is",
    "start": "2613109",
    "end": "2620010"
  },
  {
    "text": "where you can eyeball the code eyeball the code are to find variables or to",
    "start": "2620010",
    "end": "2629730"
  },
  {
    "text": "bind to this is a very easy way to think about it you can just eyeball the code and say oh look the code is here I'm",
    "start": "2629730",
    "end": "2635940"
  },
  {
    "text": "gonna look around that's a variable I'm gonna use that's lexical scoping now on",
    "start": "2635940",
    "end": "2641250"
  },
  {
    "text": "the other hand hard languages languages so what do they do use dynamic scoping",
    "start": "2641250",
    "end": "2650040"
  },
  {
    "text": "so what is dynamic scoping a variable is bound to what the caller sense well this",
    "start": "2650040",
    "end": "2659609"
  },
  {
    "text": "is really hard why because you don't know who the caller is when you look at the code when they send the data they",
    "start": "2659609",
    "end": "2667319"
  },
  {
    "text": "send you they are you to bind to now then comes along evil",
    "start": "2667319",
    "end": "2673170"
  },
  {
    "text": "languages use both lexical scoping and dynamic scoping is anyone aware of such",
    "start": "2673170",
    "end": "2680700"
  },
  {
    "text": "an evil language right so this is why",
    "start": "2680700",
    "end": "2686090"
  },
  {
    "text": "javascript is pure evil because it uses both lexical scoping and the dynamic",
    "start": "2686090",
    "end": "2694230"
  },
  {
    "text": "scoping we gotta be extremely careful about this so let's understand why this is a big deal to understand this let's",
    "start": "2694230",
    "end": "2702300"
  },
  {
    "text": "take a look at an example of a function which is gonna use multiple different scopes in here so we can appreciate this",
    "start": "2702300",
    "end": "2709680"
  },
  {
    "text": "a little bit better so what I'm gonna do here is create a constant greet is equal",
    "start": "2709680",
    "end": "2715560"
  },
  {
    "text": "to let's go ahead and say function name we'll call this as greet 1 actually",
    "start": "2715560",
    "end": "2721830"
  },
  {
    "text": "let's call it as F 1 and I'm gonna pass a value end to this and I'm gonna just",
    "start": "2721830",
    "end": "2727170"
  },
  {
    "text": "print the value and now I'm gonna say constant F 1 is equal to n and then I'm",
    "start": "2727170",
    "end": "2732960"
  },
  {
    "text": "going to over here print the value of n notice that F 1 and F 2 are very similar",
    "start": "2732960",
    "end": "2739320"
  },
  {
    "text": "to each other in what they do but one is written as a regular function the other is returned as a narrow function now I'm",
    "start": "2739320",
    "end": "2748260"
  },
  {
    "text": "gonna call F 1 with a 7 I'm gonna call F 2 with the 7 no",
    "start": "2748260",
    "end": "2753780"
  },
  {
    "text": "surprises over here both of them are the parameters being passed in however",
    "start": "2753780",
    "end": "2759050"
  },
  {
    "text": "there's something we need to keep in mind a regular function regular and",
    "start": "2759050",
    "end": "2764690"
  },
  {
    "text": "anonymous functions use lexical scoping",
    "start": "2764690",
    "end": "2769980"
  },
  {
    "text": "for all non parameters except this and",
    "start": "2769980",
    "end": "2776630"
  },
  {
    "text": "arguments this is one of the really sad stories about how JavaScript works",
    "start": "2776630",
    "end": "2782690"
  },
  {
    "text": "javascript uses lexical scoping for everything except for this and arguments",
    "start": "2782690",
    "end": "2789120"
  },
  {
    "text": "so as a result as you can see here I'm gonna say it this dart something is",
    "start": "2789120",
    "end": "2795000"
  },
  {
    "text": "equal to 4 now I come in here and say this dot something and",
    "start": "2795000",
    "end": "2801200"
  },
  {
    "text": "same thing I'm gonna do over here as well but we'll do that in just a minute now notice in here I'm gonna go ahead",
    "start": "2801200",
    "end": "2808640"
  },
  {
    "text": "and call this with the function f1 we know what NS its a local variable but",
    "start": "2808640",
    "end": "2815750"
  },
  {
    "text": "what is this unfortunately this is dynamically scoped so when I run this",
    "start": "2815750",
    "end": "2822110"
  },
  {
    "text": "code it says undefined the reason it says undefined is that the f1 is going to receive that this so if I",
    "start": "2822110",
    "end": "2830840"
  },
  {
    "text": "said over here let's say for a minute if I were to say over here f1 a dart call",
    "start": "2830840",
    "end": "2839810"
  },
  {
    "text": "and I'm gonna say something AHA and then I pass the value of seven",
    "start": "2839810",
    "end": "2846170"
  },
  {
    "text": "notice in the second call over here it actually says aha and the reason is the caller sends that",
    "start": "2846170",
    "end": "2854750"
  },
  {
    "text": "this as a parameter to that function which is pretty sad as you can see right",
    "start": "2854750",
    "end": "2860360"
  },
  {
    "text": "here so in this case this and arguments are going to use so what are the dissing",
    "start": "2860360",
    "end": "2866780"
  },
  {
    "text": "arguments do this end arguments use dynamic as a dynamic scoping right so",
    "start": "2866780",
    "end": "2874070"
  },
  {
    "text": "this is basically how this works this is dynamic scoping if I know how to type that so dynamic scoping is what they use",
    "start": "2874070",
    "end": "2881180"
  },
  {
    "text": "for dissing arguments on the other hand our arrow functions use lexical scoping",
    "start": "2881180",
    "end": "2888800"
  },
  {
    "text": "for all non parameter parameters so they",
    "start": "2888800",
    "end": "2896030"
  },
  {
    "text": "consistently use lexical scoping for everything so as a result semantically",
    "start": "2896030",
    "end": "2902840"
  },
  {
    "text": "they are very different from one another as you can see in this example if I go back to this code and if I take this one",
    "start": "2902840",
    "end": "2910400"
  },
  {
    "text": "and put it into f2 when I run the code notice f2 says four and not undefined in",
    "start": "2910400",
    "end": "2918530"
  },
  {
    "text": "the first place in fact if you go back over here and say F 2 dot call and I say",
    "start": "2918530",
    "end": "2925040"
  },
  {
    "text": "something and then aha and then of course comma 7 well guess what it makes",
    "start": "2925040",
    "end": "2933020"
  },
  {
    "text": "no sense to use call on this it will not use AHA because the",
    "start": "2933020",
    "end": "2939060"
  },
  {
    "text": "this is never bound by an arrow function so what's the model of the story",
    "start": "2939060",
    "end": "2944760"
  },
  {
    "text": "the model of the story is no the semantics a semantical difference right",
    "start": "2944760",
    "end": "2952610"
  },
  {
    "text": "difference between between arrow functions and non arrow functions so",
    "start": "2952610",
    "end": "2960540"
  },
  {
    "text": "that's the first thing the second thing to keep in mind as given this arrow",
    "start": "2960540",
    "end": "2965690"
  },
  {
    "text": "functions use a lexical scope so for all",
    "start": "2965690",
    "end": "2972740"
  },
  {
    "text": "variables that are not parameters so let's infer something from that it",
    "start": "2972740",
    "end": "2980430"
  },
  {
    "text": "makes zero sense to use arrow function",
    "start": "2980430",
    "end": "2987720"
  },
  {
    "text": "as method of a class just think about that for a minute right why would you ever want to do that",
    "start": "2987720",
    "end": "2995010"
  },
  {
    "text": "because if you make an arrow function a method of a class that this will be",
    "start": "2995010",
    "end": "3000320"
  },
  {
    "text": "bound to whatever is outside of the class and so when you call the method the object will not be bound to the",
    "start": "3000320",
    "end": "3007550"
  },
  {
    "text": "object on which the method is attached to it will be something else it makes no",
    "start": "3007550",
    "end": "3012620"
  },
  {
    "text": "sense to do that so just because arrow functions are cute doesn't mean we use them all the time we",
    "start": "3012620",
    "end": "3018680"
  },
  {
    "text": "have to really understand the semantical difference between an arrow function and a regular function otherwise we'll get",
    "start": "3018680",
    "end": "3024920"
  },
  {
    "text": "really hurt by it so we have to be very careful about it I want to show you three other concepts before we are done",
    "start": "3024920",
    "end": "3031010"
  },
  {
    "text": "here and and this is by for a pretty nice interesting feature that JavaScript",
    "start": "3031010",
    "end": "3036710"
  },
  {
    "text": "has added and that is template literals you saw me do this already so what you",
    "start": "3036710",
    "end": "3041780"
  },
  {
    "text": "can do here is suppose you had a constant name equals to Jane well you",
    "start": "3041780",
    "end": "3048590"
  },
  {
    "text": "could write code like this you could say hello and then plus and then you could",
    "start": "3048590",
    "end": "3053870"
  },
  {
    "text": "say name like this but this is so boring well instead of doing it this way you",
    "start": "3053870",
    "end": "3059300"
  },
  {
    "text": "could actually do a backtick hello dollar name and you can write a template",
    "start": "3059300",
    "end": "3064940"
  },
  {
    "text": "literal notice carefully the backtick why a backtick the single court and double court",
    "start": "3064940",
    "end": "3070460"
  },
  {
    "text": "already have meaning in JavaScript they are just literals they cannot change the rule of the game suddenly",
    "start": "3070460",
    "end": "3076310"
  },
  {
    "text": "because backward compatibility is very important for Java so at our script so as a result they said we're gonna use a",
    "start": "3076310",
    "end": "3082700"
  },
  {
    "text": "new symbol called a back take this becomes what's called a template literal and as a result you can embed",
    "start": "3082700",
    "end": "3089680"
  },
  {
    "text": "expressions in here for example hello name is of length for example named dart",
    "start": "3089680",
    "end": "3096650"
  },
  {
    "text": "length as you can see and you're able to write it that way as well so you can see that you are able to use the expressions",
    "start": "3096650",
    "end": "3103700"
  },
  {
    "text": "here as well and you can use these things called template order all but I'm gonna show you an object literal and",
    "start": "3103700",
    "end": "3109970"
  },
  {
    "text": "when I show this to you the way I'm gonna show it to you you probably will get angry as I did but there's a really",
    "start": "3109970",
    "end": "3116930"
  },
  {
    "text": "good use for it in the structuring so we'll talk about that after I show you the nasty code let's say for a minute I",
    "start": "3116930",
    "end": "3123890"
  },
  {
    "text": "have a constant the name equal to Sam right here I also have a constant the",
    "start": "3123890",
    "end": "3129890"
  },
  {
    "text": "age is equal to 2 now I want to say a constant Sam equal to named colon the",
    "start": "3129890",
    "end": "3138440"
  },
  {
    "text": "name and then age colon the age so this shouldn't be of any surprise at all to",
    "start": "3138440",
    "end": "3144530"
  },
  {
    "text": "you so I'm printing Sam right here well this is great but then notice I could",
    "start": "3144530",
    "end": "3151160"
  },
  {
    "text": "just use age over here then I could use age over here and when I run the code it",
    "start": "3151160",
    "end": "3159109"
  },
  {
    "text": "works but what is this we are dealing with right now this age is a property",
    "start": "3159109",
    "end": "3165410"
  },
  {
    "text": "this age is a local variable this is where an object literal comes in if the",
    "start": "3165410",
    "end": "3172130"
  },
  {
    "text": "name of the property is the same as the name of a local variable you can't quietly omit that and write",
    "start": "3172130",
    "end": "3179990"
  },
  {
    "text": "the code like this so this becomes a really easy way to take objects and",
    "start": "3179990",
    "end": "3186109"
  },
  {
    "text": "create them from existing variables so similarly if this was called as name I",
    "start": "3186109",
    "end": "3194270"
  },
  {
    "text": "can call this as name as well or what I can do here is I can quietly remove this",
    "start": "3194270",
    "end": "3201589"
  },
  {
    "text": "part and I can write the code like this so the key here is you should really watch",
    "start": "3201589",
    "end": "3207300"
  },
  {
    "text": "out for this curly that is sitting right here now given this this is object",
    "start": "3207300",
    "end": "3213720"
  },
  {
    "text": "literal you're constructing there is also what is called be structuring",
    "start": "3213720",
    "end": "3219480"
  },
  {
    "text": "before we talk about be structuring I want you to look at that word structuring let's change the word",
    "start": "3219480",
    "end": "3225869"
  },
  {
    "text": "structuring to something else let's call it construction what is construction",
    "start": "3225869",
    "end": "3230960"
  },
  {
    "text": "construction is where you create an object from data well",
    "start": "3230960",
    "end": "3236070"
  },
  {
    "text": "structuring our construction is you create an object from data be construction or being structuring is the",
    "start": "3236070",
    "end": "3243420"
  },
  {
    "text": "reverse of it you create variables from an object so notice what I'm gonna do",
    "start": "3243420",
    "end": "3248970"
  },
  {
    "text": "here I'm gonna take this object and in this case let's take the same object if",
    "start": "3248970",
    "end": "3255000"
  },
  {
    "text": "you will and let's say the same object contains the name called Sam and we also",
    "start": "3255000",
    "end": "3261119"
  },
  {
    "text": "have an age let's say is 2 but I want to get this variable back from the caller",
    "start": "3261119",
    "end": "3266490"
  },
  {
    "text": "how do I do that so notice I can say constant and in this case I can say the",
    "start": "3266490",
    "end": "3272820"
  },
  {
    "text": "name equal to Sam dot name I can say constant the age equal to Sam dot H then",
    "start": "3272820",
    "end": "3280560"
  },
  {
    "text": "it can print out here well the name and then I can also print out the age as well this is an old-style",
    "start": "3280560",
    "end": "3288960"
  },
  {
    "text": "boring code we can write it like this but I realize quickly if I'm all them",
    "start": "3288960",
    "end": "3294450"
  },
  {
    "text": "doing is d structuring why can't we do this a little bit more elegantly so notice constant what is the name of",
    "start": "3294450",
    "end": "3302520"
  },
  {
    "text": "the variable the name but where does the value come forward from the name if you",
    "start": "3302520",
    "end": "3308880"
  },
  {
    "text": "will and similarly the age is the property the age is the variable equal",
    "start": "3308880",
    "end": "3315359"
  },
  {
    "text": "to Sam I'm able to do be structuring at this point now if the syntax is a little",
    "start": "3315359",
    "end": "3321660"
  },
  {
    "text": "confusing I'll give you a clue to make it a bit easier for you rather than",
    "start": "3321660",
    "end": "3326700"
  },
  {
    "text": "seeing this as an assignment look at this as pattern matching what does that",
    "start": "3326700",
    "end": "3332820"
  },
  {
    "text": "really mean you're saying on the right side I have name : Sam and",
    "start": "3332820",
    "end": "3339420"
  },
  {
    "text": "I also have H : or to now apply pattern matching name",
    "start": "3339420",
    "end": "3345560"
  },
  {
    "text": "named Sam the name aha I'm gonna sign",
    "start": "3345560",
    "end": "3350850"
  },
  {
    "text": "the name - Sam age is age D age is - so",
    "start": "3350850",
    "end": "3357030"
  },
  {
    "text": "this is a pattern matching that's what you're really doing in this case so you are saying look what's on the right and",
    "start": "3357030",
    "end": "3363690"
  },
  {
    "text": "look what's on the left and whatever has come and keep it whatever it is defined here as a variable where is a constant",
    "start": "3363690",
    "end": "3371070"
  },
  {
    "text": "over here literal over here assigned to it as a pattern matching so that is basically what's happening in the syntax",
    "start": "3371070",
    "end": "3377490"
  },
  {
    "text": "he's a pattern matching now why is this such a cool thing the reason this is the cool thing is I'll show you one more",
    "start": "3377490",
    "end": "3383940"
  },
  {
    "text": "thing what you can do with this now let's write a function called print it",
    "start": "3383940",
    "end": "3389700"
  },
  {
    "text": "now the printed function says person and within this function what am I going to",
    "start": "3389700",
    "end": "3395610"
  },
  {
    "text": "do let's say we have a height and I would say height is 100 whatever that",
    "start": "3395610",
    "end": "3400830"
  },
  {
    "text": "means but I'm gonna say print out we could say person's name earth and then I'm gonna",
    "start": "3400830",
    "end": "3407490"
  },
  {
    "text": "say a person dot name and let's say name",
    "start": "3407490",
    "end": "3412650"
  },
  {
    "text": "and then would say and H s and then we'll say person dot H if you look at",
    "start": "3412650",
    "end": "3418380"
  },
  {
    "text": "this code real quick right here this is using the person's name and person's age",
    "start": "3418380",
    "end": "3423570"
  },
  {
    "text": "no surprise over there now what I'm gonna do here is in this case I'm going",
    "start": "3423570",
    "end": "3430230"
  },
  {
    "text": "to call print it and pass Sam to it while that worked the person's name is",
    "start": "3430230",
    "end": "3436320"
  },
  {
    "text": "Sam and ages two but notice I don't care about height I don't care about weight",
    "start": "3436320",
    "end": "3442680"
  },
  {
    "text": "whatever that value is it doesn't really matter to me but what I'm really looking for is name an age if that's all I want",
    "start": "3442680",
    "end": "3451080"
  },
  {
    "text": "here's a what I can do right constant name is equal to person dot name okay",
    "start": "3451080",
    "end": "3458880"
  },
  {
    "text": "and then constant age is equal to person dot age okay now I can use a name here I",
    "start": "3458880",
    "end": "3465480"
  },
  {
    "text": "can use an edge here well only a little bit better we remove",
    "start": "3465480",
    "end": "3470890"
  },
  {
    "text": "the clutter just a little bit oh wait a minute we could use object D structuring isn't it so why not simply say over here",
    "start": "3470890",
    "end": "3479220"
  },
  {
    "text": "constant name comma age is equal to person now that would really eliminate",
    "start": "3479220",
    "end": "3486520"
  },
  {
    "text": "that ugly syntax after all well wait a minute if you can do that why not just",
    "start": "3486520",
    "end": "3493000"
  },
  {
    "text": "elevate this all the way up to here isn't that beautiful",
    "start": "3493000",
    "end": "3499510"
  },
  {
    "text": "so you can actually do the D structuring on entry to the parameter so what desay",
    "start": "3499510",
    "end": "3506200"
  },
  {
    "text": "says when an object is being passed on the other side just take the name and",
    "start": "3506200",
    "end": "3511240"
  },
  {
    "text": "age alone leave out the rest of the things that is D structuring right there",
    "start": "3511240",
    "end": "3516670"
  },
  {
    "text": "when you are receiving the data just like I did however we factored it through some stages it becomes really",
    "start": "3516670",
    "end": "3523900"
  },
  {
    "text": "easy to understand if you go through the steps of refactoring it that really ties the idea in our mind really well where",
    "start": "3523900",
    "end": "3530859"
  },
  {
    "text": "we are just saying extract the name extract the age and leave out the height and weight or other properties I don't",
    "start": "3530859",
    "end": "3536950"
  },
  {
    "text": "care about it and I'll show you one last thing before we are done with this notice in here I'm gonna print out Sam",
    "start": "3536950",
    "end": "3544029"
  },
  {
    "text": "now I want to create an older Sam is equal to now I say name is Sam dot name",
    "start": "3544029",
    "end": "3551410"
  },
  {
    "text": "age is Sam dart age plus one height is",
    "start": "3551410",
    "end": "3557230"
  },
  {
    "text": "Sam dart height and weight is Sam dart weight this is also known as bad idea",
    "start": "3557230",
    "end": "3564880"
  },
  {
    "text": "isn't it why is this such a bad idea well notice in here Sam is the same as",
    "start": "3564880",
    "end": "3570789"
  },
  {
    "text": "Sam was before we are not mutating Sam which is a good news but unfortunately",
    "start": "3570789",
    "end": "3576119"
  },
  {
    "text": "here notice that in this particular case I had to copy every single property in",
    "start": "3576119",
    "end": "3583960"
  },
  {
    "text": "here so the age is going to be Sam dot h plus one and so on this is a sad story",
    "start": "3583960",
    "end": "3589630"
  },
  {
    "text": "isn't it the age is different everything of the same why is this a bad idea well tomorrow Sam gets a Facebook ID or a",
    "start": "3589630",
    "end": "3597010"
  },
  {
    "text": "Twitter account right so in this case you're gonna say whatever Sam's ID is now the code is",
    "start": "3597010",
    "end": "3603100"
  },
  {
    "text": "broken isn't it because you have to come here and say , Twitter is equal to Sam",
    "start": "3603100",
    "end": "3609070"
  },
  {
    "text": "dar Twitter nobody wants to write code like that that's stupid isn't it well the good news is you don't have to what",
    "start": "3609070",
    "end": "3615190"
  },
  {
    "text": "you can do instead is you can simply come here and say the age is different",
    "start": "3615190",
    "end": "3620710"
  },
  {
    "text": "and I've seen this facility in languages like Elm for example so what you can do",
    "start": "3620710",
    "end": "3626140"
  },
  {
    "text": "here is you can simply say Sam , so notice how beautifully you are using the",
    "start": "3626140",
    "end": "3632350"
  },
  {
    "text": "spread operator to copy everything from the object you probably have seen this",
    "start": "3632350",
    "end": "3637870"
  },
  {
    "text": "in redux Redux uses this quite a bit to make copies of objects and and the spread operator is beautifully in here",
    "start": "3637870",
    "end": "3644980"
  },
  {
    "text": "where you can simply say take everything from sam and only give me a new value for age and so as a result the height",
    "start": "3644980",
    "end": "3652120"
  },
  {
    "text": "and weight and the name all got copied over pretty nicely so the good news is modern JavaScript is a lot better than",
    "start": "3652120",
    "end": "3659440"
  },
  {
    "text": "the JavaScript that tormented once us once upon a time a lot of beautiful",
    "start": "3659440",
    "end": "3664630"
  },
  {
    "text": "features they introduced these from different languages like for example parts of c-sharp Ruby Python Java so",
    "start": "3664630",
    "end": "3673360"
  },
  {
    "text": "many features and so many different languages have influenced this and I think they have done a remarkable job so",
    "start": "3673360",
    "end": "3679330"
  },
  {
    "text": "if you're interested in the code examples you can download them from my website if you're interested in the book I mentioned feel free to take a look at",
    "start": "3679330",
    "end": "3686080"
  },
  {
    "text": "that as well hope that was useful thank you [Applause]",
    "start": "3686080",
    "end": "3697329"
  }
]