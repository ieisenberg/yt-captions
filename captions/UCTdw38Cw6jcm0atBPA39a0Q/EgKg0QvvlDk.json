[
  {
    "text": "all right well we will go ahead and get started so uh my name is Aaron Stannard",
    "start": "4880",
    "end": "12200"
  },
  {
    "text": "and I'm one of the creators of a.net I'm also the founder and CEO of a company called pbridge uh we help businesses and",
    "start": "12200",
    "end": "19760"
  },
  {
    "text": "lots of different Industries all over the world build uh Mission critical real time applications on top of it and the",
    "start": "19760",
    "end": "26880"
  },
  {
    "text": "subject of my talk today is death Del latency now what this is really about is being",
    "start": "26880",
    "end": "34120"
  },
  {
    "text": "able to build soft realtime applications these are applications that",
    "start": "34120",
    "end": "39239"
  },
  {
    "text": "are a relatively new class of app that's basically been enabled through recent",
    "start": "39239",
    "end": "44360"
  },
  {
    "text": "technological developments so a really good example of that is the introduction of websockets to browsers 10 years ago",
    "start": "44360",
    "end": "51000"
  },
  {
    "text": "this allows us to go ahead and push events out to the client rather than have to have the poll for it and this is",
    "start": "51000",
    "end": "56480"
  },
  {
    "text": "what makes all sorts of interactive uh web applications like collaborative editing chat Etc all possible directly",
    "start": "56480",
    "end": "63879"
  },
  {
    "text": "through a browser and there's also been other improvements in areas like uh for instance manufacturing where there's a",
    "start": "63879",
    "end": "69640"
  },
  {
    "text": "lot more devices that are inexpensive that can be embedded to help automate the construction process or can be used",
    "start": "69640",
    "end": "76400"
  },
  {
    "text": "to go ahead and use systems like computer vision to go ahead and automate jobs that would normally require a",
    "start": "76400",
    "end": "81680"
  },
  {
    "text": "number of people to do so these applications are do not follow your sort of traditional paradigms or your",
    "start": "81680",
    "end": "88720"
  },
  {
    "text": "traditional rules what distinguishes a realtime application from everything else is that",
    "start": "88720",
    "end": "95439"
  },
  {
    "text": "these applications come with what we call soft realtime processing",
    "start": "95439",
    "end": "100640"
  },
  {
    "text": "guarantees this means that data is basically highly perishable inside these",
    "start": "100640",
    "end": "105920"
  },
  {
    "text": "systems now before I get too deep into what a soft realtime application is we",
    "start": "105920",
    "end": "111159"
  },
  {
    "text": "should talk about what it isn't and these are hard realtime applications a good example one of those is the brake",
    "start": "111159",
    "end": "117719"
  },
  {
    "text": "control system on your car these applications are built with entirely different operating systems realtime",
    "start": "117719",
    "end": "124159"
  },
  {
    "text": "os's like VX works and they have conditions like if this application doesn't execute this function in under",
    "start": "124159",
    "end": "131080"
  },
  {
    "text": "50 milliseconds it's a fatal crash and these are used basically to do embedded systems development primarily that is",
    "start": "131080",
    "end": "138720"
  },
  {
    "text": "not what we're talking about today we're talking about Cloud hosted applications or things that might be hosted on",
    "start": "138720",
    "end": "145400"
  },
  {
    "text": "premise in a data center but generally speaking Internet connected applications that a soft processing guarantee this",
    "start": "145400",
    "end": "152319"
  },
  {
    "text": "means that the operating system doesn't fail if our request takes longer than 100 milliseconds but it might mean our",
    "start": "152319",
    "end": "158080"
  },
  {
    "text": "users get pissed off that's what that's the distinction there so a soft realtime processing",
    "start": "158080",
    "end": "165720"
  },
  {
    "text": "guarantee means that the longer something takes the less useful it is that's the gist of it so data becomes",
    "start": "165720",
    "end": "173080"
  },
  {
    "text": "stale really quickly an example we can all relate to is if we've ever used let's say a video calling application or",
    "start": "173080",
    "end": "180920"
  },
  {
    "text": "really any sort of conferencing app you can tolerate a small amount of latency let's say 50 to 100 milliseconds and",
    "start": "180920",
    "end": "188080"
  },
  {
    "text": "that's not going to really affect the quality of the call but what happens if it starts taking one second or two",
    "start": "188080",
    "end": "194280"
  },
  {
    "text": "seconds or 5 seconds for something you say to be heard by the receiver on the other end very quickly the application",
    "start": "194280",
    "end": "201440"
  },
  {
    "text": "becomes useless and customers will move on and either use a totally different",
    "start": "201440",
    "end": "206680"
  },
  {
    "text": "product or they might resort to leaving a voicemail rather than doing a live video call so that's what these classes",
    "start": "206680",
    "end": "213400"
  },
  {
    "text": "of applications are all about is being able to facilitate realtime interactivity typically between people",
    "start": "213400",
    "end": "219480"
  },
  {
    "text": "or between devices so that's really what we're looking at now the other thing that's",
    "start": "219480",
    "end": "224760"
  },
  {
    "text": "interesting about some of these applications is it might not just be merely inconveniencing a user that might",
    "start": "224760",
    "end": "231519"
  },
  {
    "text": "be the consequence of failing to observe that latency guarantee it can actually mean losing money or it could mean a",
    "start": "231519",
    "end": "237920"
  },
  {
    "text": "safety issue uh good example a lot of the industrial iot applications I'm worked on have emergency shut off",
    "start": "237920",
    "end": "245040"
  },
  {
    "text": "procedures where if some sensor detects that temperature is too high or maybe a machine's moving too fast it has to be",
    "start": "245040",
    "end": "251959"
  },
  {
    "text": "able to power everything down quickly in order to make sure that equipment's not damaged and people aren't hurt so there",
    "start": "251959",
    "end": "258440"
  },
  {
    "text": "are some real consequences aside from just having a laggy phone call when it comes to building these types of",
    "start": "258440",
    "end": "264479"
  },
  {
    "text": "apps so some examples of applications that are very similar and are in the same domain",
    "start": "264479",
    "end": "270479"
  },
  {
    "text": "where one is real time and one is not voice chat is real time it's all",
    "start": "270479",
    "end": "275639"
  },
  {
    "text": "about being able to actually have a conversation in real time with somebody who's not in the same room as you",
    "start": "275639",
    "end": "281680"
  },
  {
    "text": "compare that to let's say voicemail where I'm leaving a recording for someone else to pick up at their Leisure",
    "start": "281680",
    "end": "286880"
  },
  {
    "text": "these applications have very similar requirements they're in the same space but the difference is that the real-time",
    "start": "286880",
    "end": "292720"
  },
  {
    "text": "use case is more valuable for getting instant turnaround time and shortening the business cycle whereas voicemail is",
    "start": "292720",
    "end": "298919"
  },
  {
    "text": "something you do only if you can't get a hold of that person ditto for chat versus email and ditto for something",
    "start": "298919",
    "end": "306120"
  },
  {
    "text": "like a live auction platform like eBay versus an e-commerce website like Amazon on eBay um the auctions are taking place",
    "start": "306120",
    "end": "313840"
  },
  {
    "text": "in real time there's a finite date where the auction ends and if you're one of the biders you want to be notified when",
    "start": "313840",
    "end": "320240"
  },
  {
    "text": "your bid is beaten so you can possibly make another one in order to stay on top of it whereas if you're just buying a",
    "start": "320240",
    "end": "326840"
  },
  {
    "text": "package of socks off Amazon there's nothing really that exciting or interactive about it right so these are",
    "start": "326840",
    "end": "333600"
  },
  {
    "text": "sort of the and then yeah I used another example here of collaboration having multiple people working together on a",
    "start": "333600",
    "end": "338880"
  },
  {
    "text": "Google Document versus people checking out a dock on SharePoint editing it then checking it back in over a long cycle",
    "start": "338880",
    "end": "345520"
  },
  {
    "text": "very similar looking workflows but one's a real-time business case the other's",
    "start": "345520",
    "end": "350759"
  },
  {
    "text": "not there are an increasingly large number of domains that are moving into",
    "start": "350759",
    "end": "356400"
  },
  {
    "text": "realtime application development and it's because it's valuable for end users and it's valuable for the business so",
    "start": "356400",
    "end": "362240"
  },
  {
    "text": "this is all business driven all this stuff it's not driven because someone wants to add websocket development to",
    "start": "362240",
    "end": "368000"
  },
  {
    "text": "the resume at least I hope not so some of the example domains we've worked in",
    "start": "368000",
    "end": "373319"
  },
  {
    "text": "are on here sports betting Dynamic pricing a lot of the stuff might sound like sort of exciting or far-fetched in",
    "start": "373319",
    "end": "379800"
  },
  {
    "text": "case you're working in Industries they're a little bit more traditional but even traditional and in case I",
    "start": "379800",
    "end": "385240"
  },
  {
    "text": "offend anyone in this industry boring domains like Insurance actually have a need for realtime processing good",
    "start": "385240",
    "end": "391639"
  },
  {
    "text": "example if you sell Auto or home insurance you might need to be able to generate a realtime quote for a user",
    "start": "391639",
    "end": "397840"
  },
  {
    "text": "while they're on your website so you can get them into your user acquisition pipeline that's actually a type of",
    "start": "397840",
    "end": "403639"
  },
  {
    "text": "dynamic pricing activity so even in industries that are as old and again",
    "start": "403639",
    "end": "408759"
  },
  {
    "text": "kind of boring like Insurance have a business need for this so if you're going down the road of",
    "start": "408759",
    "end": "416960"
  },
  {
    "text": "building a real-time application you've been given some directives by your stakeholders you know sort that you need",
    "start": "416960",
    "end": "422639"
  },
  {
    "text": "to be able to complete certain types of operations within a finite window of time the first key business question is",
    "start": "422639",
    "end": "430039"
  },
  {
    "text": "okay how big should that window of time be uh so good example if I'm building a algorithmic trading application my",
    "start": "430039",
    "end": "436919"
  },
  {
    "text": "latency window might be able to be measured in single milliseconds so somewhere between two and five that's a",
    "start": "436919",
    "end": "443039"
  },
  {
    "text": "very short time window that's like high frequency trading or foreign currency exchange that type of thing uh if I'm",
    "start": "443039",
    "end": "449319"
  },
  {
    "text": "doing doing something like multiplayer video games maybe it'll be in the hundreds of milliseconds might be my",
    "start": "449319",
    "end": "455800"
  },
  {
    "text": "latency range and if I'm doing something like Computing aid insurance quote maybe I'll have as long as 30 seconds uh since",
    "start": "455800",
    "end": "463000"
  },
  {
    "text": "I can I can let the users sit there and wait for a minute while we think right it's going to vary by industry how big",
    "start": "463000",
    "end": "468879"
  },
  {
    "text": "your time constraint is but this is something you have to choose early it's a key business requirement and so then",
    "start": "468879",
    "end": "474639"
  },
  {
    "text": "the first engineering question becomes given that I need to complete this operation",
    "start": "474639",
    "end": "480159"
  },
  {
    "text": "in this number of milliseconds how can I guarantee I can do that every time for",
    "start": "480159",
    "end": "485440"
  },
  {
    "text": "every request how do I model an operation so I can reliably complete it under that time frame so that's the",
    "start": "485440",
    "end": "491680"
  },
  {
    "text": "first business question the second business question deals with the basic issue of",
    "start": "491680",
    "end": "497319"
  },
  {
    "text": "concurrency so how do I make sure that a single instance of my application can service an arbitrarily large number of",
    "start": "497319",
    "end": "505120"
  },
  {
    "text": "concurrent requests of the same type all underneath that latency window because now you have to start thinking about",
    "start": "505120",
    "end": "511360"
  },
  {
    "text": "things like shared resources and bottlenecks forming inside the application so how do I build a system",
    "start": "511360",
    "end": "517640"
  },
  {
    "text": "that can allow me to minimize the impact of that and reliably execute all these requests in parallel underneath that",
    "start": "517640",
    "end": "524720"
  },
  {
    "text": "time threshold so that's the second business question the third business question is",
    "start": "524720",
    "end": "530720"
  },
  {
    "text": "how do I operationalize all of this how do I deploy it to a cloud environment how do I make sure I can scale up and",
    "start": "530720",
    "end": "537399"
  },
  {
    "text": "down with demand and how can I deal with other real world issues like failures or data consistency or",
    "start": "537399",
    "end": "544040"
  },
  {
    "text": "deployments how could I make sure I can honor that guarantee without taking my system offline in order to do",
    "start": "544040",
    "end": "550040"
  },
  {
    "text": "that so a.net is going to help us do all of this so it's going to be kind of the",
    "start": "550040",
    "end": "555240"
  },
  {
    "text": "foundational tier for helping build some of this out so keep that in mind as we",
    "start": "555240",
    "end": "560880"
  },
  {
    "text": "go through the next section here now why do we need to have this",
    "start": "560880",
    "end": "566800"
  },
  {
    "text": "presentation at all why can't people just run out start building real- time applications right away with tools",
    "start": "566800",
    "end": "572560"
  },
  {
    "text": "they've been using for the past you know 10 20 30 years and the reason is is that",
    "start": "572560",
    "end": "578079"
  },
  {
    "text": "those old paradigms don't work and the old Paradigm I'm really referring to is database driven development when I was",
    "start": "578079",
    "end": "586279"
  },
  {
    "text": "first starting to do uh work on real-time applications about 10 years ago I also started with the philosophy",
    "start": "586279",
    "end": "592720"
  },
  {
    "text": "of just let the database handle it and for reasons I'm about to get into it never works so today when people bring",
    "start": "592720",
    "end": "600040"
  },
  {
    "text": "that up this is usually how I reply now here's an example of where the",
    "start": "600040",
    "end": "606560"
  },
  {
    "text": "database is going to struggle to help us build a real-time application let's say we're doing",
    "start": "606560",
    "end": "611920"
  },
  {
    "text": "clickstream analytics where a user is going to produce four discret events by doing",
    "start": "611920",
    "end": "618880"
  },
  {
    "text": "something on our website or something in our mobile application or maybe they're doing stuff um by filling out various",
    "start": "618880",
    "end": "626560"
  },
  {
    "text": "forms or whatever throughout our application we care that this user has completed a specific set of four discret",
    "start": "626560",
    "end": "634600"
  },
  {
    "text": "events and we have a requirement that once the fourth and final event has been observed we have to fire a notification",
    "start": "634600",
    "end": "642040"
  },
  {
    "text": "at that user that notification could be a targeted ad or marketing offer it",
    "start": "642040",
    "end": "647680"
  },
  {
    "text": "might be a security alert depends quite a bit on what your business case is but the key is that we have to let the user",
    "start": "647680",
    "end": "653639"
  },
  {
    "text": "know quickly otherwise the notification won't be very effective if they get a security alert hours after their account",
    "start": "653639",
    "end": "660360"
  },
  {
    "text": "was compromised that's pretty worthless and in the event that we don't",
    "start": "660360",
    "end": "665800"
  },
  {
    "text": "have the all these sufficient events we have to go ahead and continue to wait continue to try to observe if those",
    "start": "665800",
    "end": "671200"
  },
  {
    "text": "events get produced we're essentially building a little State machine is what we're creating here now the original way I tried to",
    "start": "671200",
    "end": "678519"
  },
  {
    "text": "build a system just like this 10 years ago was doing the database driven developments approach which is called",
    "start": "678519",
    "end": "684839"
  },
  {
    "text": "read after write where I have my stateless web application I have my highly consistent",
    "start": "684839",
    "end": "692760"
  },
  {
    "text": "database and each time a user would produce an event that would get set back to our web API and we would go ahead and",
    "start": "692760",
    "end": "700000"
  },
  {
    "text": "insert a row uh belonging to that user in a table somewhere and we would then read all the rows back of all the events",
    "start": "700000",
    "end": "707360"
  },
  {
    "text": "you've observed for that user and would try to see are all four events present inside the database and in theory this",
    "start": "707360",
    "end": "714200"
  },
  {
    "text": "is how this should work when the fourth and final event is observed uh the the",
    "start": "714200",
    "end": "720880"
  },
  {
    "text": "client that's handling it inside the web API will go ahead and fire a notification and the job will be done",
    "start": "720880",
    "end": "726639"
  },
  {
    "text": "this was the theoretical model I had when I first built this system about 10 years ago the reality was a little different",
    "start": "726639",
    "end": "735320"
  },
  {
    "text": "namely that there was no guarantee that any of the clients would be able to reason about the user's data in the same",
    "start": "735320",
    "end": "741600"
  },
  {
    "text": "way and as a result we had a 99% Mis rate on actually firing events meaning",
    "start": "741600",
    "end": "747160"
  },
  {
    "text": "this thing only worked 1% of the time time when we did it and the reason for that is",
    "start": "747160",
    "end": "752760"
  },
  {
    "text": "simple it's that the even if you have a strongly consistent database it does nothing to help you with the concurrency",
    "start": "752760",
    "end": "759600"
  },
  {
    "text": "layer of your actual application itself it has no way of essentially coalescing all the activity within one process that",
    "start": "759600",
    "end": "767040"
  },
  {
    "text": "owns the has the responsibility of replying back to that end user in a",
    "start": "767040",
    "end": "772279"
  },
  {
    "text": "system like aaet this would be very trivial to solve this problem so that's kind of the first issue there is that",
    "start": "772279",
    "end": "778839"
  },
  {
    "text": "there was no ability to reason about what was happening the application layer there was no guarantee that I would get",
    "start": "778839",
    "end": "784120"
  },
  {
    "text": "all four events back so the typical way you would have to fix a system like this if you're doing database driven",
    "start": "784120",
    "end": "790399"
  },
  {
    "text": "development is introduce polling you'd have to have a KRON job that goes and scans recently inserted users maybe at a",
    "start": "790399",
    "end": "797360"
  },
  {
    "text": "rate of once per second maybe every few seconds and at that point you're no longer a realtime system you're now a",
    "start": "797360",
    "end": "804440"
  },
  {
    "text": "schedule driven system basically a batch processor at that point",
    "start": "804440",
    "end": "809600"
  },
  {
    "text": "so the reasons why old paradigms fail are fairly straightforward probably the most",
    "start": "809600",
    "end": "814920"
  },
  {
    "text": "obvious reason is database driven development is very expensive from an IO standpoint it requires lots of roundtrip",
    "start": "814920",
    "end": "822519"
  },
  {
    "text": "Network IO lots of serialization query planning possibly depending on if",
    "start": "822519",
    "end": "827959"
  },
  {
    "text": "depending on which database you use and how complicated your queries are and possibly dis IO this is going to create",
    "start": "827959",
    "end": "834800"
  },
  {
    "text": "a high floor for latency inside your system it's going to go ahead and let's say if you have to get an operation done",
    "start": "834800",
    "end": "840680"
  },
  {
    "text": "and under 5 milliseconds that will not be theoretically possible in a system designed this way now if you have 30",
    "start": "840680",
    "end": "847240"
  },
  {
    "text": "seconds to work with you'll probably be fine but in really low latency scenarios it will no longer be achievable so",
    "start": "847240",
    "end": "853480"
  },
  {
    "text": "that's one reason the second reason is what we just showed in the previous slides which is",
    "start": "853480",
    "end": "858639"
  },
  {
    "text": "no application layer concurrency control you don't have any ability to synchronize the clients through the",
    "start": "858639",
    "end": "863800"
  },
  {
    "text": "database that's not really feasible even with something like SQL Server underneath",
    "start": "863800",
    "end": "870279"
  },
  {
    "text": "but the biggest issue that these systems have is that they are fundamentally centralized all of the state and all of",
    "start": "870279",
    "end": "876519"
  },
  {
    "text": "the essentially all the source of truth of your system all converges in one location inside your network and this",
    "start": "876519",
    "end": "883000"
  },
  {
    "text": "creates side effects once you start scaling up in terms of the number of users you have to support and the number",
    "start": "883000",
    "end": "889000"
  },
  {
    "text": "of requests you have to process and that leads to an inescapable bottleneck and even worse a single point of failure",
    "start": "889000",
    "end": "896880"
  },
  {
    "text": "possibly so if we' had let's say our our sort of third question which is about operationalizing a real-time application",
    "start": "896880",
    "end": "904279"
  },
  {
    "text": "how can I make sure that when we're hitting Peak demand everyone's requests are still processed on time well when",
    "start": "904279",
    "end": "911480"
  },
  {
    "text": "that happens the pressure that's going to build up in this system is all going to converge where all the arrows are",
    "start": "911480",
    "end": "917800"
  },
  {
    "text": "going right around our SQL Server primary and secondary replicas and this system will start to slow down as a",
    "start": "917800",
    "end": "924240"
  },
  {
    "text": "result of lock contention as a result of the connection pool beginning to begin to max out and on top of that the system",
    "start": "924240",
    "end": "931120"
  },
  {
    "text": "is just going to be perpetually busy processing all these requests so centralization is something that will",
    "start": "931120",
    "end": "936959"
  },
  {
    "text": "fundamentally limit your ability to be real time depending on how large your application is um a small application",
    "start": "936959",
    "end": "944199"
  },
  {
    "text": "that's running let's say on premise in a factory somewhere where you don't have to worry about variable demand may not",
    "start": "944199",
    "end": "950160"
  },
  {
    "text": "have this issue but if you're building a cloud facing system where you have customers such as if you're doing let's",
    "start": "950160",
    "end": "955759"
  },
  {
    "text": "say software as a service or maybe you're doing Dynamic pricing for e-commerce customers you're going to run",
    "start": "955759",
    "end": "963600"
  },
  {
    "text": "into this problem with this design so the solution ultimately to",
    "start": "963600",
    "end": "969120"
  },
  {
    "text": "trying to build low latency architectures from the bottom up resides around changing the way we think about",
    "start": "969120",
    "end": "975600"
  },
  {
    "text": "who owns the truth in our system where does the source of Truth live so that's",
    "start": "975600",
    "end": "980639"
  },
  {
    "text": "the first thing we need to we need to shift in order to make sure we can control latency and reduce the let's say",
    "start": "980639",
    "end": "987160"
  },
  {
    "text": "the the floor that's on there get it as low as possible and the reason for this is",
    "start": "987160",
    "end": "992519"
  },
  {
    "text": "pretty simple if you consider these two architectures you have your database driven architecture on the left and a",
    "start": "992519",
    "end": "999240"
  },
  {
    "text": "stateful architecture on the right where the data and the work are collocated",
    "start": "999240",
    "end": "1004480"
  },
  {
    "text": "inside the same process that architecture on the right will be orders of magnitude faster than the one on the",
    "start": "1004480",
    "end": "1010680"
  },
  {
    "text": "left and it's simple the reason why we're able to achieve much lower",
    "start": "1010680",
    "end": "1016399"
  },
  {
    "text": "latencies in that design on the right is because we're leveraging a principle known as state locality meaning that",
    "start": "1016399",
    "end": "1023079"
  },
  {
    "text": "work and data are collocated together in the same process so rather than making",
    "start": "1023079",
    "end": "1028678"
  },
  {
    "text": "queries over the network and serializing uh result sets and doing all the things we' typically do in a database driven",
    "start": "1028679",
    "end": "1035319"
  },
  {
    "text": "application we're able to just check an adjacent register in memory on the machine we're on and produce a result",
    "start": "1035319",
    "end": "1042319"
  },
  {
    "text": "immediately so cutting out all of that IO gives us a good starting point for keeping latency low inside of our",
    "start": "1042319",
    "end": "1049720"
  },
  {
    "text": "system it also is going to eliminate polling as a as a potential uh potential",
    "start": "1049720",
    "end": "1055760"
  },
  {
    "text": "device we need to rely on instead because we can observe all the state",
    "start": "1055760",
    "end": "1061320"
  },
  {
    "text": "changes for a given business entity inside our system let's say um I use that example of generating auto",
    "start": "1061320",
    "end": "1067760"
  },
  {
    "text": "insurance quotes let's say an entity is one user who is looking for auto insurance I can view all the events and",
    "start": "1067760",
    "end": "1074799"
  },
  {
    "text": "those events might be users submitting pieces of data we need such as their drivers like license number and the type",
    "start": "1074799",
    "end": "1080120"
  },
  {
    "text": "of car they drive and that type of stuff I can observe those events arriving for that entity and immediately react and",
    "start": "1080120",
    "end": "1088039"
  },
  {
    "text": "process the risk model we're going to use to price their quote and then I can actually send them a notification when",
    "start": "1088039",
    "end": "1093640"
  },
  {
    "text": "that's done and that can be used to update their display and to send them an email and essentially we can make this",
    "start": "1093640",
    "end": "1098880"
  },
  {
    "text": "whole system reactive rather than driven around guest work and polling which is what database driven development leads",
    "start": "1098880",
    "end": "1105360"
  },
  {
    "text": "us to the other benefit of this approach is that you can collocate many different",
    "start": "1105360",
    "end": "1111120"
  },
  {
    "text": "domain objects that are interrelated into the same process and have them interact with each other when you're",
    "start": "1111120",
    "end": "1116799"
  },
  {
    "text": "building an industrial iot system for instance if you're doing let's say manufacturing or maybe you're doing uh",
    "start": "1116799",
    "end": "1122960"
  },
  {
    "text": "automated shipping and packaging uh you can go ahead and have a a series of",
    "start": "1122960",
    "end": "1128520"
  },
  {
    "text": "sensors such as cameras or maybe um maybe being able to go ahead and use",
    "start": "1128520",
    "end": "1133919"
  },
  {
    "text": "laser sensors uh working together with mechanical parts that move in the factory such as a picker or a conveyor",
    "start": "1133919",
    "end": "1140720"
  },
  {
    "text": "belt and you can go ahead and use them to Signal okay based on this sensor reading I need to tell the conveyor belt",
    "start": "1140720",
    "end": "1147080"
  },
  {
    "text": "to move this far ahead so this picker can come in and grab this object and load it onto a pallet afterwards so",
    "start": "1147080",
    "end": "1154360"
  },
  {
    "text": "State locality is kind of the first building block of being able to keep latency under control and that's really",
    "start": "1154360",
    "end": "1160320"
  },
  {
    "text": "going to be the answer to the first question how do I guarantee that my operation can complete in under n",
    "start": "1160320",
    "end": "1166000"
  },
  {
    "text": "milliseconds the answer is the application is going to start functioning as the source of Truth and",
    "start": "1166000",
    "end": "1171520"
  },
  {
    "text": "it's going to be because we're stateful that we're able to bound latency for each",
    "start": "1171520",
    "end": "1176960"
  },
  {
    "text": "operation so one important reason why I have this slide up here is a natural",
    "start": "1176960",
    "end": "1182480"
  },
  {
    "text": "question you'll ask at this point is okay well if the application state is the source of truth how do we deal with",
    "start": "1182480",
    "end": "1188400"
  },
  {
    "text": "issues like deployments and crashes and scaling out and scaling back down again all these sort of real world concerns",
    "start": "1188400",
    "end": "1195000"
  },
  {
    "text": "right so the answer is that the database isn't completely out of the picture here we've just changed its role slightly is",
    "start": "1195000",
    "end": "1202080"
  },
  {
    "text": "what we've done the database now acts as essentially cold storage for our data so",
    "start": "1202080",
    "end": "1208640"
  },
  {
    "text": "every time we go and update one of our business objects we might write a Delta down to the database using event",
    "start": "1208640",
    "end": "1214840"
  },
  {
    "text": "sourcing or maybe we'll take a snapshot of our state and save it down there that way in the event that we need to move",
    "start": "1214840",
    "end": "1222080"
  },
  {
    "text": "processing for a given uh business entity in our system to another process because maybe one shut down maybe it",
    "start": "1222080",
    "end": "1229039"
  },
  {
    "text": "crashed maybe there was something that was unhealthy about it we need the ability to recover that data and pick up",
    "start": "1229039",
    "end": "1234919"
  },
  {
    "text": "where we left off so the database's role is to help guarantee that our processing",
    "start": "1234919",
    "end": "1240039"
  },
  {
    "text": "can be done in a re-entrant fashion so rather than queering the database on all of our read operations we mostly use it",
    "start": "1240039",
    "end": "1247039"
  },
  {
    "text": "to recover the very first time an entity starts and then from that point onward we're mostly writing to it we're writing",
    "start": "1247039",
    "end": "1253840"
  },
  {
    "text": "each time a critical event happens in our system so we can reflect that the next time we have to to rehydrate that",
    "start": "1253840",
    "end": "1259559"
  },
  {
    "text": "state again do that make sense to everybody good so this is how we've",
    "start": "1259559",
    "end": "1265400"
  },
  {
    "text": "answered our first question so far which is okay how do I bound latency and the",
    "start": "1265400",
    "end": "1270720"
  },
  {
    "text": "answer is we need a stateful programming approach now in terms of how do we actually Implement that programming",
    "start": "1270720",
    "end": "1277080"
  },
  {
    "text": "approach this is going to be where a.net and actors enter the picture and that's also going to help us address question",
    "start": "1277080",
    "end": "1283000"
  },
  {
    "text": "two which is how do I allow an arbitrarily large number of concurrent instances of my operation all complete",
    "start": "1283000",
    "end": "1290320"
  },
  {
    "text": "successfully within this deadline so this is where the actor model is going to enter the picture here",
    "start": "1290320",
    "end": "1296720"
  },
  {
    "text": "uh this is Fabio and I I abuse his likeness in like all of my presentations so what is an actor",
    "start": "1296720",
    "end": "1303679"
  },
  {
    "text": "exactly uh this is a basic oad actor on screen I'm going to show a more complicated one when we get to our demo",
    "start": "1303679",
    "end": "1309720"
  },
  {
    "text": "in a little bit but this actor is just a C class we also support F I know there's",
    "start": "1309720",
    "end": "1315240"
  },
  {
    "text": "been like a thousand F talks here so want to make sure uh those developers know that they're they're supported but",
    "start": "1315240",
    "end": "1321720"
  },
  {
    "text": "this is a c uh example and we're inheriting from the receive actor base",
    "start": "1321720",
    "end": "1326919"
  },
  {
    "text": "type in a.net and what a receive actor does is allows us to Define some",
    "start": "1326919",
    "end": "1332600"
  },
  {
    "text": "strongly typed receive statements the way you work with state in the actor",
    "start": "1332600",
    "end": "1338000"
  },
  {
    "text": "model is each entity is modeled as a unique actor a unique actor instance",
    "start": "1338000",
    "end": "1343919"
  },
  {
    "text": "basically so I have a ping actor is my type here uh and my other demo it's",
    "start": "1343919",
    "end": "1349400"
  },
  {
    "text": "called a product totals actor and it's doing accounting for product inventory inside our system and that actor has",
    "start": "1349400",
    "end": "1356480"
  },
  {
    "text": "certain messages it can process and it has internal properties and Fields that make up its state so state in a.net is",
    "start": "1356480",
    "end": "1364760"
  },
  {
    "text": "not some fancy thing that requires you to inherit from a custom based class or whatever it's arbitrary doet types that",
    "start": "1364760",
    "end": "1373279"
  },
  {
    "text": "you that you basically initialize as properties and Fields of your actor class so it's pretty straightforward now",
    "start": "1373279",
    "end": "1381000"
  },
  {
    "text": "what's special about the actor model is the guarantees it makes around how actors behave actors are serial",
    "start": "1381000",
    "end": "1388760"
  },
  {
    "text": "processors meaning they only process one message at a time under the covers when",
    "start": "1388760",
    "end": "1394080"
  },
  {
    "text": "you start an actor in a.net every actor gets its own cue that basically belongs",
    "start": "1394080",
    "end": "1399200"
  },
  {
    "text": "only to that actor so you can think of it as if I have a process with a million actors in it I have a million very tiny",
    "start": "1399200",
    "end": "1406039"
  },
  {
    "text": "cues that all these act that each one belonging to its own actor that actor will process those messages one at a",
    "start": "1406039",
    "end": "1412640"
  },
  {
    "text": "time and because we're processing messages one at a time we are able to",
    "start": "1412640",
    "end": "1418240"
  },
  {
    "text": "guarantee that all the actors internal state is automatically thread safe there's no need for synchronization",
    "start": "1418240",
    "end": "1424799"
  },
  {
    "text": "mechanisms no need for locks none of that stuff basically anytime an actor is",
    "start": "1424799",
    "end": "1429919"
  },
  {
    "text": "processing a message that message processing operation is the only thing the actor is doing and any operations",
    "start": "1429919",
    "end": "1435840"
  },
  {
    "text": "you perform inside that actor are going to be synchron ized automatically it's the actor's queue is what basically",
    "start": "1435840",
    "end": "1442039"
  },
  {
    "text": "synchronizes the actor and the actor is going to process those messages just like it would in the other queue in",
    "start": "1442039",
    "end": "1447360"
  },
  {
    "text": "first in first out order so the oldest message is first it's going to work backwards from",
    "start": "1447360",
    "end": "1452520"
  },
  {
    "text": "that finally down here you'll see this sender field when you send a message to",
    "start": "1452520",
    "end": "1457679"
  },
  {
    "text": "an actor I get a reference to the actor who sent me that message now if",
    "start": "1457679",
    "end": "1463039"
  },
  {
    "text": "something that was not an actor sent me this message such as an asp.net controller or a gr PC service that",
    "start": "1463039",
    "end": "1469840"
  },
  {
    "text": "sender property is going to essentially report to Dev null it's going to not do anything if I reply back to it but I",
    "start": "1469840",
    "end": "1476120"
  },
  {
    "text": "don't necessarily need to know that I can go ahead and try replying back to it a.net might log what's called a dead",
    "start": "1476120",
    "end": "1481799"
  },
  {
    "text": "letter indicating that this message was non- deliverable and that probably means your developer uh needs to look at your",
    "start": "1481799",
    "end": "1487919"
  },
  {
    "text": "logs and debug it but this is what a basic actor is fundamentally and the way we create",
    "start": "1487919",
    "end": "1494559"
  },
  {
    "text": "actors is we instantiate what's called an actor system and an actor system is a long lived object it's going to live as",
    "start": "1494559",
    "end": "1501559"
  },
  {
    "text": "long as your net process is so basically you don't start actor systems every time you need an operation typically you",
    "start": "1501559",
    "end": "1508200"
  },
  {
    "text": "start it once when you're booting up your application and then you hang on to it afterwards uh the way oad onet is",
    "start": "1508200",
    "end": "1514799"
  },
  {
    "text": "typically used in practice is usually it's an I hosted service that Boots the actor system behind the scenes and then",
    "start": "1514799",
    "end": "1519960"
  },
  {
    "text": "registers it into the DI container it's typically what we do um once you have",
    "start": "1519960",
    "end": "1525360"
  },
  {
    "text": "your actor system you can begin creating actors and the way we do that is we Define uh what's called props for an",
    "start": "1525360",
    "end": "1531960"
  },
  {
    "text": "actor this is going to specify the actor's type its Constructor arguments and there's a couple of other optional",
    "start": "1531960",
    "end": "1537960"
  },
  {
    "text": "properties we can configure on this actor such as uh if you wanted to change the type of queue this actor uses maybe",
    "start": "1537960",
    "end": "1544600"
  },
  {
    "text": "you want to have a priority cue that prioritizes certain messages ahead of others you can specify that on this",
    "start": "1544600",
    "end": "1550279"
  },
  {
    "text": "props class here we feed that props class into the actor of method and we",
    "start": "1550279",
    "end": "1555799"
  },
  {
    "text": "can optionally give this actor a name and that name will show up in the actor's uh unique URL every single actor",
    "start": "1555799",
    "end": "1562760"
  },
  {
    "text": "has a globally unique address in a.net so you can go ahead and send a message to an actor's address somewhere if you",
    "start": "1562760",
    "end": "1569120"
  },
  {
    "text": "don't have a reference to it so it's basically being able to look up an actor based on its URI uh when you pass the props into the",
    "start": "1569120",
    "end": "1576640"
  },
  {
    "text": "actor of method that's going to start the actor and you'll get a reference back to it and that actor reference is",
    "start": "1576640",
    "end": "1582720"
  },
  {
    "text": "what you can use to actually begin sending messages to the actor under the covers and actor references are",
    "start": "1582720",
    "end": "1588440"
  },
  {
    "text": "serializable you can go ahead and transmit them over the network and send them back and forth if you want so this",
    "start": "1588440",
    "end": "1594919"
  },
  {
    "text": "is kind of the basis basics of creating an actor now where",
    "start": "1594919",
    "end": "1601600"
  },
  {
    "text": "actors are useful in terms of building low latency applications actors you can think of as",
    "start": "1601600",
    "end": "1608679"
  },
  {
    "text": "stateful Cloud objects where if we step away from the infrastructure of a.net",
    "start": "1608679",
    "end": "1614159"
  },
  {
    "text": "for a second and think about our business domain we might be thinking about object objects like users or",
    "start": "1614159",
    "end": "1620240"
  },
  {
    "text": "devices or insurance quotes or maybe an order that needs to be fulfilled these",
    "start": "1620240",
    "end": "1625440"
  },
  {
    "text": "are all the different types of entities that might appear the businesses that you work on typically in a.net and really in any",
    "start": "1625440",
    "end": "1633039"
  },
  {
    "text": "actor model implementation you think you would go ahead and model each one of those entities as its own unique actor",
    "start": "1633039",
    "end": "1640480"
  },
  {
    "text": "instance so if I have a million users I'm going to have a million user actors floating around inside my system and",
    "start": "1640480",
    "end": "1647240"
  },
  {
    "text": "those actors will be instantiated the first time the user sends a request and if you're using oact",
    "start": "1647240",
    "end": "1652799"
  },
  {
    "text": "cluster sharding which we're going to talk about a bit later those actors will be automatically turned back off after a",
    "start": "1652799",
    "end": "1658279"
  },
  {
    "text": "couple of minutes and they'll be reinstantiate again if you need to send a message to it down the road so those",
    "start": "1658279",
    "end": "1663519"
  },
  {
    "text": "actors can kind of appear and disappear from existence as you need them we do this in order to make sure you don't run",
    "start": "1663519",
    "end": "1669640"
  },
  {
    "text": "out of memory it's what we're doing there now the way actors work is they",
    "start": "1669640",
    "end": "1675480"
  },
  {
    "text": "process messages that are sent to it either by other actors or by other components in your net application and",
    "start": "1675480",
    "end": "1682679"
  },
  {
    "text": "as these events arrive the actor is going to process them and use it to change its state possibly so if we have",
    "start": "1682679",
    "end": "1690200"
  },
  {
    "text": "that clickstream example from earlier we were looking for those four events in order to send that user a notification I",
    "start": "1690200",
    "end": "1696600"
  },
  {
    "text": "might observe those events arrive in my message handlers and I can check after I process each event is my state ready for",
    "start": "1696600",
    "end": "1704320"
  },
  {
    "text": "this notification and once that Boolean property is true which is going to happen concurrent at the very last",
    "start": "1704320",
    "end": "1711360"
  },
  {
    "text": "instant of me processing the fourth message I can fire off a notification",
    "start": "1711360",
    "end": "1716559"
  },
  {
    "text": "and that notification can be me sending a message to another actor it could be this actor invoking a web service it",
    "start": "1716559",
    "end": "1723080"
  },
  {
    "text": "could be this actor sending a grpc message it could be writing to a signal or Hub if you want to sky is the limit",
    "start": "1723080",
    "end": "1729720"
  },
  {
    "text": "anything you can do in C or F this actor can do so the power of this programming",
    "start": "1729720",
    "end": "1735919"
  },
  {
    "text": "model is that allows us to create one class that represents how this entity",
    "start": "1735919",
    "end": "1741360"
  },
  {
    "text": "should behave and then we can run thousands or hundreds of thousands or even millions of instances of it it's",
    "start": "1741360",
    "end": "1748200"
  },
  {
    "text": "pretty common for actors to live for there to be as many as several million actors in a process uh and the reason",
    "start": "1748200",
    "end": "1754960"
  },
  {
    "text": "why is actors are actually pretty inexpensive resources they don't use any CPU well they don't have a message to",
    "start": "1754960",
    "end": "1760720"
  },
  {
    "text": "process and the amount of memory they use is typically pretty low um really depends mostly on your state that you",
    "start": "1760720",
    "end": "1767279"
  },
  {
    "text": "implement now actors accumulate state in memory",
    "start": "1767279",
    "end": "1772320"
  },
  {
    "text": "this is where we get back to our first processing guarantee it's the actors internal properties and fields are our",
    "start": "1772320",
    "end": "1778399"
  },
  {
    "text": "source of Truth and our are are basically our state for our application and we can observe as we're processing",
    "start": "1778399",
    "end": "1784519"
  },
  {
    "text": "messages how that state might be changing and we can decide all right this is the fourth event I need to send",
    "start": "1784519",
    "end": "1790279"
  },
  {
    "text": "this user security alert I'm going to go ahead and change my behavior to a clo",
    "start": "1790279",
    "end": "1796159"
  },
  {
    "text": "from an open state to a closed state and when I do that I'm going to fire a",
    "start": "1796159",
    "end": "1801320"
  },
  {
    "text": "notification via a push notification service to this user and maybe also via email",
    "start": "1801320",
    "end": "1806519"
  },
  {
    "text": "too and we have the ability to do that without any database infrastructure without any IO or really let's say any",
    "start": "1806519",
    "end": "1814880"
  },
  {
    "text": "any thirdparty dependencies all you really need to do this is just to AA Library itself so this gives us a very",
    "start": "1814880",
    "end": "1821039"
  },
  {
    "text": "low latency lightweight way of beginning to build realtime",
    "start": "1821039",
    "end": "1826480"
  },
  {
    "text": "applications and like I mentioned earlier actors are cheap so this gets us to our second question how do I observe",
    "start": "1826480",
    "end": "1833720"
  },
  {
    "text": "this processing guarantee within a single process for many concurrent requests and the answer is that each",
    "start": "1833720",
    "end": "1841200"
  },
  {
    "text": "entity should get its own actor and all of these entities can run in parallel with each other or can run concurrently",
    "start": "1841200",
    "end": "1847320"
  },
  {
    "text": "depending on how technical you want to be so for instance if I have a big fire hose of iot data coming from a range of",
    "start": "1847320",
    "end": "1854640"
  },
  {
    "text": "devices I'm connected to I need to be able to uphold real time processing guarantees for all of them so the way",
    "start": "1854640",
    "end": "1861480"
  },
  {
    "text": "I'm going to do that is I'm going to use one of the properties of a.net which is the actor hierarchy actors can be",
    "start": "1861480",
    "end": "1867679"
  },
  {
    "text": "organized in parent child relationships so I might have a aggregate here this",
    "start": "1867679",
    "end": "1873720"
  },
  {
    "text": "device of type a actor this actor owns let's say all the temperature sensors in",
    "start": "1873720",
    "end": "1880039"
  },
  {
    "text": "our warehouse so if I get temperature sensor data for from let's say a",
    "start": "1880039",
    "end": "1885360"
  },
  {
    "text": "thousand different sensors I might have a thousand children children each one correlating to an individual sensor and",
    "start": "1885360",
    "end": "1892519"
  },
  {
    "text": "so all of those a thousand sensor actors can process their events in parallel and",
    "start": "1892519",
    "end": "1897559"
  },
  {
    "text": "idana actors are very fast a single actor on my 5-year-old desktop at home",
    "start": "1897559",
    "end": "1903080"
  },
  {
    "text": "can process about six million messages a second if I scale this up to a very",
    "start": "1903080",
    "end": "1908480"
  },
  {
    "text": "large actor hierarchy where there's lots of actors running continuously I can do on the newest version of a.net running",
    "start": "1908480",
    "end": "1915360"
  },
  {
    "text": "on net 6 about 80 to 90 million meth mesages per second across hundreds or thousands of actors so that's probably",
    "start": "1915360",
    "end": "1922840"
  },
  {
    "text": "more throughput than most of you will ever need but the reason why that's important is each one of those",
    "start": "1922840",
    "end": "1928440"
  },
  {
    "text": "operations is very low latency out of the gate actors get scheduled very quickly and are able to clear out their",
    "start": "1928440",
    "end": "1934360"
  },
  {
    "text": "mailbox very fast and we have a fair scheduling system that makes sure that uh actors All actors get serviced",
    "start": "1934360",
    "end": "1941559"
  },
  {
    "text": "relatively quickly now if I have a second type of entity in my system let's say I had temperature sensors before",
    "start": "1941559",
    "end": "1948240"
  },
  {
    "text": "maybe I have a volumetric sensor as well that s that all those events that belong",
    "start": "1948240",
    "end": "1954240"
  },
  {
    "text": "to that sensor type will go to a totally different group of actors possibly in the same process and those can also run",
    "start": "1954240",
    "end": "1960600"
  },
  {
    "text": "in parallel with our temperature sensors as well this is where we observe that second guarantee it's the fact that you",
    "start": "1960600",
    "end": "1967480"
  },
  {
    "text": "can have lots of actors all getting scheduled to run independently of each other and that way all of those objects",
    "start": "1967480",
    "end": "1973519"
  },
  {
    "text": "are updating their state figuring out if they need to fire notifications all independ dependently from each other and",
    "start": "1973519",
    "end": "1979360"
  },
  {
    "text": "this gives programmers a relatively simple abstraction that's easy to manage that's the most important facet of this",
    "start": "1979360",
    "end": "1985919"
  },
  {
    "text": "is that it helps reduce the complexity of what the programmers need to do to build a stateful",
    "start": "1985919",
    "end": "1991960"
  },
  {
    "text": "app all right so we've answered the first two key business questions namely how do we guarantee that one operation",
    "start": "1991960",
    "end": "1998639"
  },
  {
    "text": "can complete under a soft real-time processing deadline and how can we make sure that an arbitrarily large number of",
    "start": "1998639",
    "end": "2006440"
  },
  {
    "text": "parallel requests can be serviced by one process under that deadline as well but",
    "start": "2006440",
    "end": "2011799"
  },
  {
    "text": "now we need to address the the real money-making question which is how do I",
    "start": "2011799",
    "end": "2017120"
  },
  {
    "text": "observe this guarantee for Peak Demand on our system and deal with all the other real world stuff that can come up",
    "start": "2017120",
    "end": "2023559"
  },
  {
    "text": "such as the fallibility of the network or doing deployments and how do I make",
    "start": "2023559",
    "end": "2028720"
  },
  {
    "text": "sure I do all of this without compromising the data consistency of my application and without introducing",
    "start": "2028720",
    "end": "2035480"
  },
  {
    "text": "downtime right this is where this is where I spend most of my time talking with customers is this question number",
    "start": "2035480",
    "end": "2041880"
  },
  {
    "text": "three so aa. Net's a big framework it has lots of different packages of the",
    "start": "2041880",
    "end": "2047679"
  },
  {
    "text": "core actor libraries these are the three that we're going to focus on for answering question number three the",
    "start": "2047679",
    "end": "2054240"
  },
  {
    "text": "first is aodot cluster which allows us to build a high availability network of lots of actor systems all coordinating",
    "start": "2054240",
    "end": "2062000"
  },
  {
    "text": "with each other to distribute work and state in a essentially a location transparent manner",
    "start": "2062000",
    "end": "2068520"
  },
  {
    "text": "the second tool is aodot cluster sharding this allows us to distribute entities in an even fashion over the",
    "start": "2068520",
    "end": "2075200"
  },
  {
    "text": "network and allows us to guarantee there is at most one copy of each entity in our system so a quick trivia question",
    "start": "2075200",
    "end": "2083240"
  },
  {
    "text": "for those of you who are attending today if I was keeping track of a user's shopping cart in my idana application",
    "start": "2083240",
    "end": "2092158"
  },
  {
    "text": "and because of a programming error I ended up having one process that had one version of the user shopping cart and",
    "start": "2092159",
    "end": "2099079"
  },
  {
    "text": "another process that had a different version of that user shopping cart what sort of problems would that cause for my",
    "start": "2099079",
    "end": "2106079"
  },
  {
    "text": "business it would cause some pretty massive data consistency problems where essentially uh I would probably lose",
    "start": "2106079",
    "end": "2111960"
  },
  {
    "text": "money is the answer so the key there is you need to make sure there is at most one copy of your entity's state",
    "start": "2111960",
    "end": "2119160"
  },
  {
    "text": "somewhere inside the system you don't want to have a split brain in other words we have multiple actors that all",
    "start": "2119160",
    "end": "2124880"
  },
  {
    "text": "think they own the same entity this is what cluster sharding does for us it also manages the life cycle of those",
    "start": "2124880",
    "end": "2131160"
  },
  {
    "text": "actors for us normally by default n.net when you call actor of that actors never",
    "start": "2131160",
    "end": "2136200"
  },
  {
    "text": "get to shut down until you tell it to in cluster sharding it'll automatically terminate actors that haven't processed",
    "start": "2136200",
    "end": "2142320"
  },
  {
    "text": "a message uh within two minutes that way you can free up memory and not have to worry about new actors starting up and",
    "start": "2142320",
    "end": "2149240"
  },
  {
    "text": "your memory pool shrinking all the time finally we're going to talk about aodot persistence aodot persistence is a",
    "start": "2149240",
    "end": "2156400"
  },
  {
    "text": "database agnostic way way of making actor State re-entrant and durable so being able to go in journal events to a",
    "start": "2156400",
    "end": "2162720"
  },
  {
    "text": "database being able to recover them when the actor gets started back up again all three of these components work in",
    "start": "2162720",
    "end": "2169079"
  },
  {
    "text": "concert to help build highly available systems that are reasonably consistent",
    "start": "2169079",
    "end": "2174280"
  },
  {
    "text": "and partition tolerant as well so the way to think about aod do",
    "start": "2174280",
    "end": "2179839"
  },
  {
    "text": "cluster is what it's really going to give us is a very useful property known",
    "start": "2179839",
    "end": "2185640"
  },
  {
    "text": "as topology awareness now when you're building a stateless web application you",
    "start": "2185640",
    "end": "2191640"
  },
  {
    "text": "typically do not need all the web servers to know about each other they don't care they're dumb applications",
    "start": "2191640",
    "end": "2197880"
  },
  {
    "text": "that only talk to the database typically right so there's no need for web applications to work together on a",
    "start": "2197880",
    "end": "2203800"
  },
  {
    "text": "network of any kind in a stateful application that's not the case because",
    "start": "2203800",
    "end": "2208960"
  },
  {
    "text": "your application is the source of truth and you want to make sure all state for any given business entity is",
    "start": "2208960",
    "end": "2214640"
  },
  {
    "text": "concentrated and owned by one actor you need to know who is capable of Hosting",
    "start": "2214640",
    "end": "2219880"
  },
  {
    "text": "actors and where are they right now that's what aod do cluster gives us the ability to do essentially we're building",
    "start": "2219880",
    "end": "2226000"
  },
  {
    "text": "a peer-to-peer network is what aodot cluster does and I'll show some code in just a second here uh because I know",
    "start": "2226000",
    "end": "2232520"
  },
  {
    "text": "this is a lot of Concepts that I'm throwing at you all at once but basically each one of these uh sort of",
    "start": "2232520",
    "end": "2238680"
  },
  {
    "text": "big teal circles here is an actor system that has a tree of actors running inside",
    "start": "2238680",
    "end": "2244000"
  },
  {
    "text": "of it and typically what the cluster is going to be useful",
    "start": "2244000",
    "end": "2249280"
  },
  {
    "text": "for is allowing us to determine where data and work should be sent inside the network if I have an actor that owns my",
    "start": "2249280",
    "end": "2257599"
  },
  {
    "text": "clickstream data I want all the click events that I produce moving around through my through my customers website",
    "start": "2257599",
    "end": "2264680"
  },
  {
    "text": "I want to make sure all of my click events end up at my actor wherever it is in the cluster even though it might be",
    "start": "2264680",
    "end": "2271480"
  },
  {
    "text": "process a might receive that request from the web balancer but process e might be where that actor is aod cluster",
    "start": "2271480",
    "end": "2278200"
  },
  {
    "text": "allows me to figure that out and send the message to the right place at the right",
    "start": "2278200",
    "end": "2283440"
  },
  {
    "text": "time what aod cluster also does is lets me know about those real world failure",
    "start": "2283440",
    "end": "2288720"
  },
  {
    "text": "conditions we talked about when a process crashes or when a process gets so overloaded that it can't respond",
    "start": "2288720",
    "end": "2294599"
  },
  {
    "text": "quickly or if a new process joins the network if we're using something like autoscaling aodot cluster will will give",
    "start": "2294599",
    "end": "2301720"
  },
  {
    "text": "me notifications about that and components like aod do cluster sharding and clustered routers these different",
    "start": "2301720",
    "end": "2308079"
  },
  {
    "text": "distribution tools we're going to learn about those can react to those events and begin sending data and sending work",
    "start": "2308079",
    "end": "2314359"
  },
  {
    "text": "to those new locations on the network conversely if we're scaling down we can also use that information to move data",
    "start": "2314359",
    "end": "2321400"
  },
  {
    "text": "that's on a node that's leaving the network onto nodes that aren't so that's the gist of OA cluster",
    "start": "2321400",
    "end": "2328680"
  },
  {
    "text": "and what its purpose is and the way it gets used is typically it's a distribution tool it's designed to allow",
    "start": "2328680",
    "end": "2334880"
  },
  {
    "text": "us to build a distributed system a network of different processes that are all cooperating together to try to build",
    "start": "2334880",
    "end": "2342520"
  },
  {
    "text": "a real-time application so in this case I'm using what's called a clustered router which is a just a type of actor",
    "start": "2342520",
    "end": "2348599"
  },
  {
    "text": "you can create and this router has a a strategy you can configure for how it distributes messages typically it's us",
    "start": "2348599",
    "end": "2355160"
  },
  {
    "text": "almost always going to be like a round robin router which is basically a load balancer so this router on node one",
    "start": "2355160",
    "end": "2362720"
  },
  {
    "text": "might start receiving messages that are coming in uh via a HTTP API that's also",
    "start": "2362720",
    "end": "2367839"
  },
  {
    "text": "Exposed on this node and we'll start using that to Route traffic to actors",
    "start": "2367839",
    "end": "2373119"
  },
  {
    "text": "that live on nodes 2 3 and four and this is all done transparently I as the end",
    "start": "2373119",
    "end": "2378440"
  },
  {
    "text": "user don't need to know that those actors exist on the network and this is",
    "start": "2378440",
    "end": "2384640"
  },
  {
    "text": "where I'm going to go ahead and take a step into a demo for a second and stop dropping new Concepts on you for a",
    "start": "2384640",
    "end": "2390839"
  },
  {
    "text": "moment since it's quite a lot let's",
    "start": "2390839",
    "end": "2395880"
  },
  {
    "text": "see how do I make this a little bigger to",
    "start": "2395880",
    "end": "2402920"
  },
  {
    "text": "Windows well I don't know how to do it in ryer but I know how to do it in Windows there we",
    "start": "2404280",
    "end": "2410520"
  },
  {
    "text": "go okay this is an example guess it would have been better",
    "start": "2410520",
    "end": "2416200"
  },
  {
    "text": "if I blew it up in ryer this is an example of what starting a.net and a modern let's say net 6 application looks",
    "start": "2416200",
    "end": "2423200"
  },
  {
    "text": "like this is a minimal web API or yeah minimal web API and we have a package called acad.",
    "start": "2423200",
    "end": "2429319"
  },
  {
    "text": "hosting that just binds into all the I hosting extensions that you you normally would use every day so we're going to go",
    "start": "2429319",
    "end": "2436319"
  },
  {
    "text": "ahead and create an actor system called SQL sharding uh we're going to turn on aa. remote which is what aaot cluster",
    "start": "2436319",
    "end": "2443280"
  },
  {
    "text": "uses to communicate across processes it's basically just a TCP connection is what that is uh we're going to turn",
    "start": "2443280",
    "end": "2449160"
  },
  {
    "text": "clustering on and then we're going to create in fact let me move to this process here we",
    "start": "2449160",
    "end": "2455520"
  },
  {
    "text": "go we're going to create a Shard region um that is going to be a set of entity",
    "start": "2455520",
    "end": "2461760"
  },
  {
    "text": "actors that are managed for us automatically by a.net and what The Shard region is called is products",
    "start": "2461760",
    "end": "2467520"
  },
  {
    "text": "that's the type of entity we're using and if I scroll over get rid of",
    "start": "2467520",
    "end": "2473839"
  },
  {
    "text": "that yeah get rid of that real fist basically what we're going to do is",
    "start": "2475000",
    "end": "2481000"
  },
  {
    "text": "for each unique entity inside our system we're going to create a brand new product totals actor that owns owns The",
    "start": "2481000",
    "end": "2487640"
  },
  {
    "text": "Entity State and the way we determine which entity is which is using this uh product message",
    "start": "2487640",
    "end": "2495480"
  },
  {
    "text": "router it's going to inspect the messages that we're sending to The Shard region and if that message implements",
    "start": "2495480",
    "end": "2501960"
  },
  {
    "text": "this interface we're going to say the product ID that's Exposed on this interface here is going to be the unique",
    "start": "2501960",
    "end": "2508680"
  },
  {
    "text": "identity of that entity so essentially we're using the properties of the messages that are being sent to our",
    "start": "2508680",
    "end": "2514359"
  },
  {
    "text": "system to determine where those messages should go and which actor owns them make",
    "start": "2514359",
    "end": "2519560"
  },
  {
    "text": "sense to everybody yeah so that's what's going on here and then I have my product",
    "start": "2519560",
    "end": "2526680"
  },
  {
    "text": "totals actor this is the entity actor that cluster sharding is actually creating this actor only takes in its",
    "start": "2526680",
    "end": "2534319"
  },
  {
    "text": "Constructor The Entity ID that we extracted from one of those messages so that's the only real thing we pass into",
    "start": "2534319",
    "end": "2540520"
  },
  {
    "text": "its Constructor and from there we will go ahead and allocate a product State",
    "start": "2540520",
    "end": "2546440"
  },
  {
    "text": "this is basically just a c record that has all my dads on it so I have some",
    "start": "2546440",
    "end": "2552839"
  },
  {
    "text": "purchasing totals and a couple of orders and inventory warnings and all that stuff that's all just part of my",
    "start": "2552839",
    "end": "2559720"
  },
  {
    "text": "domain this actor uses aoda persistence to recover its state each time it's",
    "start": "2559720",
    "end": "2565960"
  },
  {
    "text": "created so I recover my state by replaying excuse me I've recovered my",
    "start": "2565960",
    "end": "2572920"
  },
  {
    "text": "state by replaying the first snapshot that I saved to knock it out persistence",
    "start": "2572920",
    "end": "2579000"
  },
  {
    "text": "so I might save a full point in time copy of my state and I recover that as soon as my actor starts and then after",
    "start": "2579000",
    "end": "2587040"
  },
  {
    "text": "that I might recover any of these product events that I had previously saved so this actor goes and performs a",
    "start": "2587040",
    "end": "2593760"
  },
  {
    "text": "full recovery before it processes any other messages that are sent to it and then that's what I do here in",
    "start": "2593760",
    "end": "2601079"
  },
  {
    "text": "this little command Handler these are the live messages I'm processing while my application's running and these are",
    "start": "2601079",
    "end": "2607280"
  },
  {
    "text": "all going to be generated via my web UI which I'll pull up me get rid of",
    "start": "2607280",
    "end": "2613440"
  },
  {
    "text": "that so this is my little web UI right here now I am not ever going to be giving any talks on UI development so I",
    "start": "2614839",
    "end": "2622000"
  },
  {
    "text": "apologize if it looks a little basic uh we all have our different strengths and weaknesses uh user interfaces is",
    "start": "2622000",
    "end": "2628280"
  },
  {
    "text": "definitely not one of mine but if I click into here this Eagle Rare uh 10-year-old",
    "start": "2628280",
    "end": "2633720"
  },
  {
    "text": "750ml uh this is W this is American whiskey um I have a price a amount of available",
    "start": "2633720",
    "end": "2641880"
  },
  {
    "text": "units uh product total and some Revenue I can go ahead and order let's say 100",
    "start": "2641880",
    "end": "2650520"
  },
  {
    "text": "bottles and I'll see that appear on my Supply log down here as one of the events of this actor",
    "start": "2650520",
    "end": "2656520"
  },
  {
    "text": "processed when I just did that web request just now I'll receive an i",
    "start": "2656520",
    "end": "2662559"
  },
  {
    "text": "product command and this i product command if I take a look on it if I go to to my",
    "start": "2662559",
    "end": "2669680"
  },
  {
    "text": "implementation will probably be a purchase product command in this case which will say here's the product I want",
    "start": "2670160",
    "end": "2675440"
  },
  {
    "text": "here's the quantity and I'll go and convert that into an event that I'll append to my state object from there and",
    "start": "2675440",
    "end": "2681960"
  },
  {
    "text": "this is a concrete example of let's say one stateful entity doing its processing where I have a set of commands that are",
    "start": "2681960",
    "end": "2689079"
  },
  {
    "text": "going to enforce a state change I also have a set of queries so if I actually dig in here real quick I have a set of",
    "start": "2689079",
    "end": "2696680"
  },
  {
    "text": "queries commands and events let me do this real quick again",
    "start": "2696680",
    "end": "2702319"
  },
  {
    "text": "there we go so I have some product commands which are inputs product events",
    "start": "2702319",
    "end": "2707480"
  },
  {
    "text": "which are outputs and those are what get persisted to our database and those also get recovered when the actor starts",
    "start": "2707480",
    "end": "2712839"
  },
  {
    "text": "again and then I have some queries which are basically a way of fetching my actor State without actually changing it and",
    "start": "2712839",
    "end": "2719880"
  },
  {
    "text": "that's what we're using to actually power of the web UI that you're seeing is we're quering this actor each time",
    "start": "2719880",
    "end": "2725119"
  },
  {
    "text": "and getting its data so for instance if I go to my product page here I go to the code",
    "start": "2725119",
    "end": "2734240"
  },
  {
    "text": "behind here we go what I'm doing here is I'm grabbing a hold of the actor registry this is kind of part of aa.",
    "start": "2734440",
    "end": "2740960"
  },
  {
    "text": "Net's hosting system now I'm saying I want to get an actor um that is registered with type",
    "start": "2740960",
    "end": "2746839"
  },
  {
    "text": "product and I'm going to perform an Ask operation I'm going to say fetch this",
    "start": "2746839",
    "end": "2752400"
  },
  {
    "text": "product ID and I'm going to return this uh fetch result",
    "start": "2752400",
    "end": "2757640"
  },
  {
    "text": "and I'm going to set my Razor Pages States equal to that fetch results State and that's what's going to be used to",
    "start": "2757640",
    "end": "2763559"
  },
  {
    "text": "populate all those items on screen here so this is kind of a very simple endtoend example of what programming",
    "start": "2763559",
    "end": "2769680"
  },
  {
    "text": "with actors actually looks like this application itself is not real time but I wanted to include something in here",
    "start": "2769680",
    "end": "2775800"
  },
  {
    "text": "that helped make these Concepts more concrete before I keep going so this sample is all open source by the way uh",
    "start": "2775800",
    "end": "2782000"
  },
  {
    "text": "if I go ahead and zoom back out actually",
    "start": "2782000",
    "end": "2788079"
  },
  {
    "text": "okay let me get rid of that real quick I'll pull this back up so that",
    "start": "2790520",
    "end": "2797400"
  },
  {
    "text": "sample is all open source and I just went through a number of things there now I wanted to talk a little bit about",
    "start": "2797400",
    "end": "2803440"
  },
  {
    "text": "aad up persistance aoda persistance fundamentally Works via event sourcing",
    "start": "2803440",
    "end": "2809200"
  },
  {
    "text": "where these apis that's command and recover API plus if I go back to my code",
    "start": "2809200",
    "end": "2815839"
  },
  {
    "text": "sample and I go to my product actor this persist all method or there's also just",
    "start": "2815839",
    "end": "2821800"
  },
  {
    "text": "a single persist these are what allow me to write events to my backend in this",
    "start": "2821800",
    "end": "2826839"
  },
  {
    "text": "case I'm using SQL Server as my backend we have support for at least a dozen",
    "start": "2826839",
    "end": "2833200"
  },
  {
    "text": "different database types I've personally worked on all of these ones and customers have implemented ones for",
    "start": "2833200",
    "end": "2839960"
  },
  {
    "text": "things like Google big table for instance or or Dynamo DB or Cosmos so",
    "start": "2839960",
    "end": "2845760"
  },
  {
    "text": "aod up persistance gives my actors a database agnostic way of journaling their state using event sourcing and",
    "start": "2845760",
    "end": "2851839"
  },
  {
    "text": "then recovering it the next time they start and this makes it very feasible for me to go ahead and have my actors",
    "start": "2851839",
    "end": "2858720"
  },
  {
    "text": "recover their state during a crash or when we're scaling out to another process or in the event that I brought",
    "start": "2858720",
    "end": "2865800"
  },
  {
    "text": "my application offline had to bring it back up again allows my actors to pick up where they left off that's the one",
    "start": "2865800",
    "end": "2872040"
  },
  {
    "text": "role a database really needs to needs to play in a stateful system is you need to have some some way of making sure that",
    "start": "2872040",
    "end": "2877880"
  },
  {
    "text": "State's durable so you still need a database for that you just don't want to make it the center of everything that",
    "start": "2877880",
    "end": "2883760"
  },
  {
    "text": "you're up to and the way this fundamentally works is our persistent actors still retain",
    "start": "2883760",
    "end": "2890920"
  },
  {
    "text": "State uh like you saw earlier I had my product State object in that actor that state gets modified as a result of the",
    "start": "2890920",
    "end": "2898119"
  },
  {
    "text": "messages that we process and whenever someone else interacts with us we're using our state to do that but we're",
    "start": "2898119",
    "end": "2906160"
  },
  {
    "text": "also a synchronously or possibly synchronously depending on which API and macket app persistance you use we're",
    "start": "2906160",
    "end": "2912680"
  },
  {
    "text": "also journaling the changes to our state and sometimes taking snapshots of it in order to make sure that we can always",
    "start": "2912680",
    "end": "2918680"
  },
  {
    "text": "pick up when we left off again right and here's the what the recovery",
    "start": "2918680",
    "end": "2924240"
  },
  {
    "text": "process essentially looks like as well we're going to replay the messages in the original order they were persisted",
    "start": "2924240",
    "end": "2929680"
  },
  {
    "text": "and run them back through our model um I'm not going to sell you on the event on the benefits of event sourcing uh but",
    "start": "2929680",
    "end": "2936559"
  },
  {
    "text": "it's a very powerful model that works very well with actors generally speaking you don't have to use it in order to",
    "start": "2936559",
    "end": "2942599"
  },
  {
    "text": "build stateful applications but it's probably the simplest outof the-box way to do it is using AA",
    "start": "2942599",
    "end": "2948960"
  },
  {
    "text": "persistence now the last thing I want to focus in on for a second is aa. cluster sharding aodot cluster sharing's role is",
    "start": "2948960",
    "end": "2955799"
  },
  {
    "text": "mostly there to provide data consistency and to make sure that your work is distributed evenly throughout your",
    "start": "2955799",
    "end": "2961400"
  },
  {
    "text": "cluster which is something you need to do in order to guarantee those low latencies you don't want to have what",
    "start": "2961400",
    "end": "2966520"
  },
  {
    "text": "are called hotspots forming in your cluster which means that some nodes are doing disproportionately more work than",
    "start": "2966520",
    "end": "2972799"
  },
  {
    "text": "others it's typically a programming error is what causes hotspots to form uh good example a lot of customers in the",
    "start": "2972799",
    "end": "2979680"
  },
  {
    "text": "United States uh will Shard their data based on the state the users in because you want to have a low cardinality key",
    "start": "2979680",
    "end": "2985920"
  },
  {
    "text": "that repeats often right well unfortunately the states are very lob sided in terms of population in the US",
    "start": "2985920",
    "end": "2993119"
  },
  {
    "text": "so if you get California Texas and New York on the same node your processing about 40% of the population right there",
    "start": "2993119",
    "end": "2999839"
  },
  {
    "text": "meanwhile if for get Wyoming and New Hampshire uh you're processing less than 1% so a much better sharding key would",
    "start": "2999839",
    "end": "3006599"
  },
  {
    "text": "be to use something like a zip code instead now aodot cluster sharding",
    "start": "3006599",
    "end": "3012400"
  },
  {
    "text": "automatically instantiates and passivates entity actors in the cluster it guarantees even during Network",
    "start": "3012400",
    "end": "3017960"
  },
  {
    "text": "partitions that there will be at most one unique instance of all your entities and all messages for the same entity all",
    "start": "3017960",
    "end": "3024960"
  },
  {
    "text": "get routed to the same place we have to do this in order to guarantee consistency AA cluster sharding is also",
    "start": "3024960",
    "end": "3031720"
  },
  {
    "text": "very smart about when it's rebalancing if one location on the network is being taken offline because we're scaling down",
    "start": "3031720",
    "end": "3038839"
  },
  {
    "text": "or maybe we're doing a deployment it will pause traffic to all those entities and rehome them to a new location on the",
    "start": "3038839",
    "end": "3045559"
  },
  {
    "text": "network and then unpause traffic for them again so it handles a lot of those sort of uh nly networking problems for",
    "start": "3045559",
    "end": "3053960"
  },
  {
    "text": "you now my goal goal here was just to give you enough of an overview of the",
    "start": "3053960",
    "end": "3059599"
  },
  {
    "text": "different parts of a.net and how they work so you can go research this on your own if you're going down the road of",
    "start": "3059599",
    "end": "3065079"
  },
  {
    "text": "building a real-time application the last thing I'm going to show you is how",
    "start": "3065079",
    "end": "3070119"
  },
  {
    "text": "to handle a couple of other practical questions namely around deployment",
    "start": "3070119",
    "end": "3075359"
  },
  {
    "text": "hosting and how do we expose aa. net to end users so we'll wrap up with that",
    "start": "3075359",
    "end": "3081640"
  },
  {
    "text": "today this is an example of what I would wager about 50% of Windows Azure a.net",
    "start": "3081640",
    "end": "3088359"
  },
  {
    "text": "deployments look like um kubernetes goes very nicely with a.net and I'll get into",
    "start": "3088359",
    "end": "3093480"
  },
  {
    "text": "the reasons why in a second but typically what you developers will do is all of aa. Net's communication between",
    "start": "3093480",
    "end": "3100440"
  },
  {
    "text": "the different actor systems all happens privately inside a subnet that is not accessible to end users instead what",
    "start": "3100440",
    "end": "3107319"
  },
  {
    "text": "those developers will typically do is they'll expose a HTTP API or maybe a",
    "start": "3107319",
    "end": "3112680"
  },
  {
    "text": "grpc endpoint or maybe they'll use websockets you could o use things like Azure service bus potentially as a",
    "start": "3112680",
    "end": "3119480"
  },
  {
    "text": "communication endpoint or something like Kafka if you wanted to and they'll typically use some sort of cloud-based",
    "start": "3119480",
    "end": "3126520"
  },
  {
    "text": "storage system for oaop persistence um you obviously can use SQL Server if you want to but a Azure table storage works",
    "start": "3126520",
    "end": "3133359"
  },
  {
    "text": "just as well and is a fraction of the cost so you might as well use something that's Cloud native and relatively cheap",
    "start": "3133359",
    "end": "3140000"
  },
  {
    "text": "so this is sort of generally speaking from an infrastructure standpoint how all this works now the one thing you don't want",
    "start": "3140000",
    "end": "3146960"
  },
  {
    "text": "to do and this is usually where Unity 3D developers who want to use aa. net get into trouble is you don't want to use AA",
    "start": "3146960",
    "end": "3154040"
  },
  {
    "text": "remote directly as your endpoint between uh end users and aa. net and the reason",
    "start": "3154040",
    "end": "3159839"
  },
  {
    "text": "why is that because a.net is a peer-to-peer technology fundamentally it means that every node is both the client",
    "start": "3159839",
    "end": "3166119"
  },
  {
    "text": "and a server in order to secure a server what do you need to have on it the",
    "start": "3166119",
    "end": "3171799"
  },
  {
    "text": "private key for your for your for your uh encryption so you don't really have a",
    "start": "3171799",
    "end": "3177640"
  },
  {
    "text": "feasible means of let's say sharing that with untrusted parties so you shouldn't go there aadu remote's very powerful and",
    "start": "3177640",
    "end": "3184559"
  },
  {
    "text": "just like exposing a database connection or anything else you don't want to share that with the outside world instead you",
    "start": "3184559",
    "end": "3191079"
  },
  {
    "text": "typically want to expose perhaps a grpc endpoint this is what I'm using in one of my new iot applications I'm working",
    "start": "3191079",
    "end": "3197319"
  },
  {
    "text": "on is I'm going to expose grpc I'm expecting to have uh an order of about a",
    "start": "3197319",
    "end": "3203079"
  },
  {
    "text": "quarter of a million persistent clients connected to my system all the time using this so we're going to use grpc",
    "start": "3203079",
    "end": "3209599"
  },
  {
    "text": "for that um but I've also very frequently used HTP API a little web API",
    "start": "3209599",
    "end": "3215960"
  },
  {
    "text": "uh that can go ahead and process events or do ingestion from clients and that's",
    "start": "3215960",
    "end": "3221160"
  },
  {
    "text": "typically what I use when I need a request response model with a client grpc is a little bit um heavier than I",
    "start": "3221160",
    "end": "3227440"
  },
  {
    "text": "need for doing that type of workload lastly I'm a very big fan of using a.net",
    "start": "3227440",
    "end": "3233720"
  },
  {
    "text": "with websockets these two technologies go together like P peanut butter and chocolate so if you're doing let's say a",
    "start": "3233720",
    "end": "3240040"
  },
  {
    "text": "real-time web UI so for instance we have a lot of customers that build things like monitoring dashboards for checking",
    "start": "3240040",
    "end": "3245760"
  },
  {
    "text": "on the health of servers and Hardware or monitoring let's say the state of financial transactions so having let's",
    "start": "3245760",
    "end": "3251880"
  },
  {
    "text": "say like a uh a trading dashboard uh or if you're doing something like building a real time uh chat room or",
    "start": "3251880",
    "end": "3258839"
  },
  {
    "text": "collaboration software web stock it's all the way to go um and we have a uh we have a really fun demo um called Draw",
    "start": "3258839",
    "end": "3266040"
  },
  {
    "text": "together net in the pbridge GitHub organization which is like multiplayer paint.net built in blazor that's pretty",
    "start": "3266040",
    "end": "3272960"
  },
  {
    "text": "fun that's all aa. net based now the last big question is how",
    "start": "3272960",
    "end": "3278520"
  },
  {
    "text": "do we deal with our infrastructure for hosting a.net and what do we need to be concerned about when we deploy the",
    "start": "3278520",
    "end": "3284799"
  },
  {
    "text": "biggest issue with a stateful application during deployments is that you have to move",
    "start": "3284799",
    "end": "3291280"
  },
  {
    "text": "your state when you're deploying a new instance of your service you have all the state that's being used in real time",
    "start": "3291280",
    "end": "3298160"
  },
  {
    "text": "to keep to process those low latency requests I have to find a way to transition it off of the nodes that are",
    "start": "3298160",
    "end": "3303799"
  },
  {
    "text": "leaving and onto the ones that are coming right so that means the way we do",
    "start": "3303799",
    "end": "3309119"
  },
  {
    "text": "deployments is going to be a little different than how you might deploy a web application that has no state for",
    "start": "3309119",
    "end": "3314200"
  },
  {
    "text": "instance oad do cluster sharding will manage 99.9% of this for you if you allow it",
    "start": "3314200",
    "end": "3320880"
  },
  {
    "text": "this is the key point is I'm going to tell you how to allow it next the thing you don't want want to do",
    "start": "3320880",
    "end": "3326960"
  },
  {
    "text": "is an environment swap which is a very common way of deploying web applications",
    "start": "3326960",
    "end": "3332319"
  },
  {
    "text": "in the context of a.net what an environment swap looks like is you have a cluster that's in production right now",
    "start": "3332319",
    "end": "3338480"
  },
  {
    "text": "and you're going to try to replace that entire cluster all at once remember that problem I mentioned earlier about having",
    "start": "3338480",
    "end": "3344839"
  },
  {
    "text": "two different copies of the customer actor that have different versions of the state this is how you have that",
    "start": "3344839",
    "end": "3350640"
  },
  {
    "text": "problem so don't do it instead we want to go ahead and do either a one by one",
    "start": "3350640",
    "end": "3356799"
  },
  {
    "text": "replacement or you want to go ahead and do an add and remove deployment where you add nodes to the cluster and then",
    "start": "3356799",
    "end": "3362319"
  },
  {
    "text": "remove the old nodes that gives us time to go ahead and gracefully transition data off the nodes that are leaving onto",
    "start": "3362319",
    "end": "3368839"
  },
  {
    "text": "the ones that are joining a.net can detect which nodes are newer and which ones are older based on the assembly",
    "start": "3368839",
    "end": "3375400"
  },
  {
    "text": "version number that you're deploying and when we see a higher assembly version number join we know that's part of the",
    "start": "3375400",
    "end": "3381640"
  },
  {
    "text": "deployment and we will start rehoming shards on sharded actors onto those noes first so o like I said cluster shorting",
    "start": "3381640",
    "end": "3389400"
  },
  {
    "text": "will take care of most of this for you if you allow it but if you blow it up with an environment Swap all bets are",
    "start": "3389400",
    "end": "3395799"
  },
  {
    "text": "off so in terms of what's the easy mode way of doing this deploying with",
    "start": "3395799",
    "end": "3401440"
  },
  {
    "text": "kubernetes and using a staple set does all of the right things automatically out of the box without you really having",
    "start": "3401440",
    "end": "3407440"
  },
  {
    "text": "to think about it um it does one by one deployment it uses stable node identities which is useful for um a",
    "start": "3407440",
    "end": "3415400"
  },
  {
    "text": "couple of different things inside a.net that I'm not going to get into and this is typically how I run most of my",
    "start": "3415400",
    "end": "3421119"
  },
  {
    "text": "workloads however um you could also accomplish this with Azure container apps which is relatively new and you do",
    "start": "3421119",
    "end": "3427799"
  },
  {
    "text": "this by having uh two revisions at once your old revision that you're going to replace and your new revision you're",
    "start": "3427799",
    "end": "3433359"
  },
  {
    "text": "deploying and what you do is once both revisions are in the same cluster you go ahead and just shut begin shutting down",
    "start": "3433359",
    "end": "3439359"
  },
  {
    "text": "the old one and that'll gradually drain those nodes and turn them off that's what'll happen uh you can also use if you're an",
    "start": "3439359",
    "end": "3446400"
  },
  {
    "text": "Amazon Customer you can use elastic container services to do this quite easily as well and you just use the",
    "start": "3446400",
    "end": "3451760"
  },
  {
    "text": "rolling update strategy for that so these are sort of some of the easiest out of the-box ways of being able to",
    "start": "3451760",
    "end": "3458000"
  },
  {
    "text": "make guarantee smooth deployments for a.net so that's it for my talk today I",
    "start": "3458000",
    "end": "3465119"
  },
  {
    "text": "really appreciate all of you being so attentive I know it was a lot of Concepts I'll be up here to go ahead and",
    "start": "3465119",
    "end": "3470520"
  },
  {
    "text": "answer questions and there's some uh free a.net stickers on the back so you know as long as you go ahead and put",
    "start": "3470520",
    "end": "3475880"
  },
  {
    "text": "that green card in the bin wink wink um you can go ahead and walk out with one",
    "start": "3475880",
    "end": "3481319"
  },
  {
    "text": "uh thank you very much [Applause]",
    "start": "3481319",
    "end": "3486990"
  }
]