[
  {
    "text": "all right I'm Mak 1340 so I'm going to get started um my name is Ian Cooper for those you don't know me uh my socials",
    "start": "5440",
    "end": "12440"
  },
  {
    "text": "it's just I Cooper on X or hacky Derm uh interestingly enough uh you can also find some tech content from me on",
    "start": "12440",
    "end": "19199"
  },
  {
    "text": "LinkedIn who knew that LinkedIn would become a a tech conversation platform",
    "start": "19199",
    "end": "24760"
  },
  {
    "text": "with the death of Twitter but there you go uh but either any of those locations",
    "start": "24760",
    "end": "30400"
  },
  {
    "text": "you'll probably find useful stuff from me hacky dmore LinkedIn is mostly where I post content I just get into fights on",
    "start": "30400",
    "end": "36399"
  },
  {
    "text": "Twitter uh I've been doing this a long time and there is gray in my beard I've been doing it a lot of places um we've",
    "start": "36399",
    "end": "42879"
  },
  {
    "text": "got a lot to cover I won't dwell on this um I work on an open- Source messaging framework for net space I assume most of",
    "start": "42879",
    "end": "50879"
  },
  {
    "text": "you are net developers and not a Java developers you just thought would' see how it worked for net developers um but",
    "start": "50879",
    "end": "58239"
  },
  {
    "text": "yeah we're alternative to kind of mass trans and service B Etc um we try and be",
    "start": "58239",
    "end": "64239"
  },
  {
    "text": "good for airet developers in terms of how we work um we opinionated about having things like a what we call a",
    "start": "64239",
    "end": "70240"
  },
  {
    "text": "single threaded reactor stuff that may make no sense to you but do come and check us out all right and we just SP Kafka by",
    "start": "70240",
    "end": "77479"
  },
  {
    "text": "the way on brighter okay let's talk talk about Kafka will um have a little bit of a talk after we",
    "start": "77479",
    "end": "84640"
  },
  {
    "text": "do an introduction to cfar and show you how we do basic producing and consuming to cfar send sending receiving if you",
    "start": "84640",
    "end": "90960"
  },
  {
    "text": "like um from net we'll dig a little bit under the hood and Kafka learn a little",
    "start": "90960",
    "end": "96280"
  },
  {
    "text": "bit about what mean makes it a reliable broker and then we'll do some uh work to",
    "start": "96280",
    "end": "101640"
  },
  {
    "text": "have understand how we Avail oursel of those features from sear when we're writing our producers and consumers we",
    "start": "101640",
    "end": "108960"
  },
  {
    "text": "will touch lightly because we have time on uh serializers der serializers in the",
    "start": "108960",
    "end": "114320"
  },
  {
    "text": "schema registry we probably won't get into streams and cues that's probably",
    "start": "114320",
    "end": "119560"
  },
  {
    "text": "not really on our agenda today but I may talk about it if we do have time all right",
    "start": "119560",
    "end": "126960"
  },
  {
    "text": "CFA okay so CFA was created um at LinkedIn in 2011 by J creps uh NAA Nadi",
    "start": "126960",
    "end": "136519"
  },
  {
    "text": "and JRE they are now essentially the leadership of confluent the company that",
    "start": "136519",
    "end": "142239"
  },
  {
    "text": "effectively evolved out of CFA and it's been on an Apache OSS project since about October",
    "start": "142239",
    "end": "148840"
  },
  {
    "text": "2012 the reason they built it was that at LinkedIn they had data coming from",
    "start": "148840",
    "end": "154800"
  },
  {
    "text": "innumerable sources different databases and they wanted to collect it all into a data warehouse so it was originally a",
    "start": "154800",
    "end": "162159"
  },
  {
    "text": "data engineering project and they looked at all this diversity of techniques they",
    "start": "162159",
    "end": "168239"
  },
  {
    "text": "had for doing stuff and said there must be a better way to do this in some way that is common and reliable and the",
    "start": "168239",
    "end": "173760"
  },
  {
    "text": "result was Kafka so what is Kafka so there's basically thing that sits in the middle uh on Kafka I can't really use",
    "start": "173760",
    "end": "181159"
  },
  {
    "text": "the pointer on that one there you go is effectively a com an appendonly log sometimes called a commit log so a",
    "start": "181159",
    "end": "188200"
  },
  {
    "text": "producer that has some data writes essentially aens to the log and any",
    "start": "188200",
    "end": "194799"
  },
  {
    "text": "readers who effectively want to consume that data read from the other end of the",
    "start": "194799",
    "end": "200080"
  },
  {
    "text": "log right and so you just keep reading until you run out of things that have been written uh and that is effectively",
    "start": "200080",
    "end": "206159"
  },
  {
    "text": "a very efficient way of communicating data because we are both the reader and",
    "start": "206159",
    "end": "211720"
  },
  {
    "text": "writer that can be disconnected in time in other words the producer and consumer",
    "start": "211720",
    "end": "217239"
  },
  {
    "text": "don't don't both need to be present at the same time to communicate they just need the presence of the",
    "start": "217239",
    "end": "222560"
  },
  {
    "text": "log then that conversation can be asynchronous right so I can write to the",
    "start": "222560",
    "end": "228120"
  },
  {
    "text": "log and keep writing to the log all the data that I have and you eventually even hours later could come along and read it",
    "start": "228120",
    "end": "236200"
  },
  {
    "text": "right so that enables asynchronous conversations to occur between producers and consumers typically we often think",
    "start": "236200",
    "end": "243959"
  },
  {
    "text": "about that as messaging right it's a very different way of doing messaging to",
    "start": "243959",
    "end": "250040"
  },
  {
    "text": "a que which you might be used to from things like rber mq sqs as as your service bus right because",
    "start": "250040",
    "end": "257160"
  },
  {
    "text": "effectively we're talking about a log that we commit to it's very fast and has",
    "start": "257160",
    "end": "262280"
  },
  {
    "text": "quite low latency because of the benefits of using this kind of a pendon log",
    "start": "262280",
    "end": "268720"
  },
  {
    "text": "right so what happens with your producer so your producer will write a record to",
    "start": "268720",
    "end": "275320"
  },
  {
    "text": "that log so the record consists of a key which identifies that particular record",
    "start": "275320",
    "end": "281680"
  },
  {
    "text": "and the value the data that you want to essentially write to the log to exchange or somebody else your producer gets a",
    "start": "281680",
    "end": "288800"
  },
  {
    "text": "TCP IP connection connects to the Kafka cluster and says I would like to write",
    "start": "288800",
    "end": "294680"
  },
  {
    "text": "this record and it writes it to a topic so a topic",
    "start": "294680",
    "end": "300160"
  },
  {
    "text": "is just a named addressable log right so rather than",
    "start": "300160",
    "end": "305639"
  },
  {
    "text": "talking about log p137 94 whatever Etc we just say I want to talk to the order",
    "start": "305639",
    "end": "312000"
  },
  {
    "text": "created topic or I want to talk to the um restaurant on boarded topic right so",
    "start": "312000",
    "end": "319400"
  },
  {
    "text": "you write to that topic and essentially the producer append records into that",
    "start": "319400",
    "end": "327520"
  },
  {
    "text": "topic a cons consumer then reads from that topic so the consumer says hey I'm",
    "start": "327919",
    "end": "334160"
  },
  {
    "text": "interested in orders being created I will start reading from that topic and it reads from the other end now when a",
    "start": "334160",
    "end": "341160"
  },
  {
    "text": "consumer reads an item from the topic it doesn't as you might expect from say",
    "start": "341160",
    "end": "347520"
  },
  {
    "text": "queueing Technologies and messaging doesn't delete that item it simply says",
    "start": "347520",
    "end": "353000"
  },
  {
    "text": "I've read that particular item so I will record that I've read item number one",
    "start": "353000",
    "end": "360560"
  },
  {
    "text": "right then it reads item number two and it says I've read that item so I will record that I've read item number two",
    "start": "360560",
    "end": "366280"
  },
  {
    "text": "item number three item number four item number five so as it reachs to the log it just records how far into the log it",
    "start": "366280",
    "end": "374319"
  },
  {
    "text": "is read in other words the last the index of the last item that's read we actually say offset in CFA terms rather",
    "start": "374319",
    "end": "381160"
  },
  {
    "text": "than index but you can think of it the same way there's a special topic inside",
    "start": "381160",
    "end": "386240"
  },
  {
    "text": "CFA underscore consumer offsets what happens is your consumer records where",
    "start": "386240",
    "end": "392960"
  },
  {
    "text": "did I read up to in there that means if your consumer crashes when you restarted",
    "start": "392960",
    "end": "398599"
  },
  {
    "text": "it goes now where was I oh yeah I read item number six okay I'll start reading an item number seven okay and that way",
    "start": "398599",
    "end": "406639"
  },
  {
    "text": "you progress through the log so producer writes space to the log consumer reads",
    "start": "406639",
    "end": "412360"
  },
  {
    "text": "from the log every new consumer starts reading the log at item",
    "start": "412360",
    "end": "418000"
  },
  {
    "text": "number 0 1 2 3 3 4 5 6 7 8 right so the question may become hang on a minute if",
    "start": "418000",
    "end": "425240"
  },
  {
    "text": "I am writing a million items to this log how is the consumer going to move fast",
    "start": "425240",
    "end": "430440"
  },
  {
    "text": "enough for me because if I add more consumers they're all starting at zero",
    "start": "430440",
    "end": "436080"
  },
  {
    "text": "they're never going to read they're never going to catch up right so how does that work so we li to you a little bit my",
    "start": "436080",
    "end": "444440"
  },
  {
    "text": "topic consists of a number of partitions it'll have at least one partition right",
    "start": "444440",
    "end": "450240"
  },
  {
    "text": "uh but you can have any number more each partition is essentially a separate log",
    "start": "450240",
    "end": "456879"
  },
  {
    "text": "that slices up all that data right into the topic into a number of individual slices right these",
    "start": "456879",
    "end": "463360"
  },
  {
    "text": "partitions so I take my record with my value and my key and I say effectively",
    "start": "463360",
    "end": "469199"
  },
  {
    "text": "okay I need to assign This Record to one of the partitions I could choose to do that and",
    "start": "469199",
    "end": "474919"
  },
  {
    "text": "kfra allows that randomly I just want you to try and evenly distribute",
    "start": "474919",
    "end": "479960"
  },
  {
    "text": "these records amongst all of the partitions that I've created or more commonly we say that",
    "start": "479960",
    "end": "487000"
  },
  {
    "text": "doesn't work for me because I care about the sequence these items are in now",
    "start": "487000",
    "end": "494560"
  },
  {
    "text": "think about the original dat scenario I'm doing data engineering I may have effectively um be wanting to capture",
    "start": "494560",
    "end": "501000"
  },
  {
    "text": "updates to a database table so I want you to basically see those in order that",
    "start": "501000",
    "end": "506159"
  },
  {
    "text": "they happened put them in the wrong order obviously you may get the wrong phone number and address right so",
    "start": "506159",
    "end": "511599"
  },
  {
    "text": "typically CFA is used in scenarios where I want to read what happened in a",
    "start": "511599",
    "end": "517000"
  },
  {
    "text": "sequential way now if I just randomly write those to new partitions they're",
    "start": "517000",
    "end": "522399"
  },
  {
    "text": "going to be out of sequence in each individual partition to each other so what I want is for the same key write it",
    "start": "522399",
    "end": "530800"
  },
  {
    "text": "to the same partition right so imagine I'm observing the changes to a restaurant just because I work at JY",
    "start": "530800",
    "end": "536200"
  },
  {
    "text": "takeway right now and it's restaurant 123 I I would like all the changes for restaurant 123 to go to partition zero",
    "start": "536200",
    "end": "544200"
  },
  {
    "text": "all the changes to restaurant 125 can go to partition 1 and then as long as they're in sequence on that partition",
    "start": "544200",
    "end": "550440"
  },
  {
    "text": "I'm going to be okay we'll see consumers in a second all right and that's technique called consistent hashing so",
    "start": "550440",
    "end": "555839"
  },
  {
    "text": "consistent hashing says whatever your key is will continue to write it to the",
    "start": "555839",
    "end": "561760"
  },
  {
    "text": "same partition all right okay so your producer asks the broker and says okay",
    "start": "561760",
    "end": "570360"
  },
  {
    "text": "where is effectively the partition that I need to write to so then your",
    "start": "570360",
    "end": "577200"
  },
  {
    "text": "consumer are actually reading a partition on a topic and the offset they",
    "start": "577200",
    "end": "584200"
  },
  {
    "text": "record is how far they are into that partition on a topic now in the kind of",
    "start": "584200",
    "end": "590399"
  },
  {
    "text": "default case when you're just playing around with cfar and you tell cathica to create topics automatically for you you",
    "start": "590399",
    "end": "596440"
  },
  {
    "text": "get one partition right so you're single consumer effectively just says I'm reading this only partition there is",
    "start": "596440",
    "end": "602240"
  },
  {
    "text": "right but generally in production environments you want to figure out how many partitions you need we'll come back to that but generally Therefore your",
    "start": "602240",
    "end": "610120"
  },
  {
    "text": "topics are split up amongst your consumers all right so here I'm showing I've got three partitions if I have one",
    "start": "610120",
    "end": "616720"
  },
  {
    "text": "consumer it'll read all three partitions and it'll record itself offs set into any one of those partitions if I have",
    "start": "616720",
    "end": "623519"
  },
  {
    "text": "two consumers one of them will read from two partitions the other one will read from one partition right and generally",
    "start": "623519",
    "end": "631000"
  },
  {
    "text": "if I have three then each one gets a partition if I have four one of them sits idle why would I might I want that",
    "start": "631000",
    "end": "639839"
  },
  {
    "text": "well if one of my consumers goes down that one that was sitting around doing nothing will now be allocated a",
    "start": "639839",
    "end": "646480"
  },
  {
    "text": "partition and so what happens is cfco Will reallocate partitions to your",
    "start": "646480",
    "end": "652760"
  },
  {
    "text": "consumers to make sure that all of the partitions are being read but only being",
    "start": "652760",
    "end": "658279"
  },
  {
    "text": "read by a single consumer so that you read the elements of the partition in",
    "start": "658279",
    "end": "664200"
  },
  {
    "text": "sequence right if you try to have two consumers reading an ordered partition",
    "start": "664200",
    "end": "669639"
  },
  {
    "text": "it would become out of order so you can't do it so you have to read them with one thread reading a given a given",
    "start": "669639",
    "end": "676040"
  },
  {
    "text": "partition in order all right so what that gives us is that a",
    "start": "676040",
    "end": "682959"
  },
  {
    "text": "model that lets us for a given application have up to a c up to as many",
    "start": "682959",
    "end": "688399"
  },
  {
    "text": "uh consumers as we have partitions there an idea called a consumer group the consumer group says well my application",
    "start": "688399",
    "end": "696160"
  },
  {
    "text": "and this application over here are different both of us want to read all the messages right so the consumer group",
    "start": "696160",
    "end": "702560"
  },
  {
    "text": "says this rule is true the idea that we distribute the partitions amongst the",
    "start": "702560",
    "end": "707959"
  },
  {
    "text": "available consumers and they essentially maintain their offsets into that for a given consumer group so your application",
    "start": "707959",
    "end": "715360"
  },
  {
    "text": "and my application can both read the same topic we both start at zero when I relative partitions and work our way",
    "start": "715360",
    "end": "721160"
  },
  {
    "text": "through so think about your app as having a consumer group all right so back to the bigger",
    "start": "721160",
    "end": "727959"
  },
  {
    "text": "picture so you can kind of see how it works my producer writes a record to a",
    "start": "727959",
    "end": "734279"
  },
  {
    "text": "topic the producer puts the data in the value and it has a key for the",
    "start": "734279",
    "end": "740839"
  },
  {
    "text": "record typically I want to see all of the changes for a given key in sequence",
    "start": "740839",
    "end": "748320"
  },
  {
    "text": "so I'll use them methodology called consistent hashing to find the re to make sure that I can I write the record",
    "start": "748320",
    "end": "756279"
  },
  {
    "text": "to the same partition each time so assume here like 1 2 3 4 goes to Z 2",
    "start": "756279",
    "end": "762279"
  },
  {
    "text": "three goes to zero 1 12 4 goes to one and one25 goes to two my consumers on",
    "start": "762279",
    "end": "769279"
  },
  {
    "text": "the right hand side for a given application and I've got two consumer groups for the first group I have two",
    "start": "769279",
    "end": "776399"
  },
  {
    "text": "consumers with three partitions so one of my consumers is reading with a just",
    "start": "776399",
    "end": "781560"
  },
  {
    "text": "one thread a partition and getting all of them in order so it's reading all of the changes of one two three for example",
    "start": "781560",
    "end": "786959"
  },
  {
    "text": "in order the other consumer has two partitions presumably we think they're lower traffic right and he's effectively",
    "start": "786959",
    "end": "794279"
  },
  {
    "text": "getting one 12 and 125 in order and reading all of those there's another",
    "start": "794279",
    "end": "799440"
  },
  {
    "text": "application where essentially they're less interested perhaps in keeping pace",
    "start": "799440",
    "end": "804600"
  },
  {
    "text": "and they effectively only got one consumer and it's reading from all the partitions and we're according in the",
    "start": "804600",
    "end": "811160"
  },
  {
    "text": "consumer offsets topic how far we have read so that if we crash either we or",
    "start": "811160",
    "end": "818360"
  },
  {
    "text": "somebody else can take over our responsibility in reading that",
    "start": "818360",
    "end": "823760"
  },
  {
    "text": "partition okay hopefully that makes sense because that's the key to",
    "start": "823760",
    "end": "829440"
  },
  {
    "text": "understanding how CFA Works how many partitions do you need right so there is",
    "start": "829440",
    "end": "836480"
  },
  {
    "text": "a branch of math called queuing Theory curing theory is a bit complicated I don't understand it but you out on the",
    "start": "836480",
    "end": "843079"
  },
  {
    "text": "web you can find curing Theory calculators and it works a bit like this it says the rate there's a rate of",
    "start": "843079",
    "end": "849360"
  },
  {
    "text": "arrival of work right so let's say your work arrives basically every 10",
    "start": "849360",
    "end": "856199"
  },
  {
    "text": "milliseconds okay and there's a rate at which I can consume work in other words there's a rate at which I can do the job",
    "start": "856199",
    "end": "862839"
  },
  {
    "text": "of pulling that that piece of that item off my stream in CFA saying okay this is",
    "start": "862839",
    "end": "869800"
  },
  {
    "text": "what I need to do completing that and then effectively saying okay commit the offset for that particular piece of work",
    "start": "869800",
    "end": "875240"
  },
  {
    "text": "move on to the next one let's assume that's 20 milliseconds right so work is arriving at 10 millisecond once for 10",
    "start": "875240",
    "end": "881959"
  },
  {
    "text": "milliseconds and I'm processing it in 20 milliseconds if I only have one topic",
    "start": "881959",
    "end": "888959"
  },
  {
    "text": "and therefore one consumer I will fall behind work is arriving twice as fast as",
    "start": "888959",
    "end": "895519"
  },
  {
    "text": "I am reading it right so after um 20",
    "start": "895519",
    "end": "900839"
  },
  {
    "text": "milliseconds uh two jobs will have arrived but I'll only have processed one",
    "start": "900839",
    "end": "905880"
  },
  {
    "text": "right after 40 milliseconds four jobs will AR I'll only have processed two so",
    "start": "905880",
    "end": "911279"
  },
  {
    "text": "I will get what's called lag right so in other words that lag is the is the the the distance between",
    "start": "911279",
    "end": "918920"
  },
  {
    "text": "something arriving and getting round to servicing it so what I want to do is say well",
    "start": "918920",
    "end": "926199"
  },
  {
    "text": "actually if my work is arriving if it takes 20 seconds to process something and it rides every two every 10",
    "start": "926199",
    "end": "932240"
  },
  {
    "text": "milliseconds I'm going to need double the number of consumers right to keep Pace now that isn't quite perfect what K",
    "start": "932240",
    "end": "939040"
  },
  {
    "text": "Theory says is actually there's what's called A Plus on distribution of arrival so actually you need slightly more than that and the calculator will tell you",
    "start": "939040",
    "end": "946440"
  },
  {
    "text": "roughly what you need to do to avoid high levels of latency and waiting and",
    "start": "946440",
    "end": "952240"
  },
  {
    "text": "if that's a bit complicated as an abstract example imagine going into the um a shop to buy something",
    "start": "952240",
    "end": "959519"
  },
  {
    "text": "or go to a bar to order a drink if they have one member of bar staff and it's busy you're going to wait a long time",
    "start": "959519",
    "end": "965560"
  },
  {
    "text": "right if they have more bar staff than people waiting then you'll get served quickly that's really what we're talking",
    "start": "965560",
    "end": "971199"
  },
  {
    "text": "about right so your partitions are effectively bar staff if you like right you need enough bar staff in order to",
    "start": "971199",
    "end": "978160"
  },
  {
    "text": "basically meet the number of people turning up ordering drinks right that is the fundamentals of how Kafka",
    "start": "978160",
    "end": "984360"
  },
  {
    "text": "works all right running Kafka this is a a horrible dockor compos file running kafa is a bit",
    "start": "984360",
    "end": "991560"
  },
  {
    "text": "of a pain would be the best way to say um uh when I run a workshop earlier in",
    "start": "991560",
    "end": "997480"
  },
  {
    "text": "the week one of the biggest problems we usually get is uh getting CFA to run on everyone's machine right uh it's a bit",
    "start": "997480",
    "end": "1004600"
  },
  {
    "text": "of a black art typically in production environments a lot of people actually just Outsource it they pay confluent or",
    "start": "1004600",
    "end": "1011519"
  },
  {
    "text": "Avan or somebody else to actually run their Kafka clusters for them um because or even Amazon's MKS Etc CU it is it is",
    "start": "1011519",
    "end": "1019959"
  },
  {
    "text": "quite a pain right some things you may need to know though because you will probably when you are uh working locally",
    "start": "1019959",
    "end": "1027120"
  },
  {
    "text": "and trying out Kafka want to understand roughly what this doer composed file which is typically how I get Kafka",
    "start": "1027120",
    "end": "1033839"
  },
  {
    "text": "running locally for myself right how it works so this is like a compost file that will get you a Kafka running on a",
    "start": "1033839",
    "end": "1040839"
  },
  {
    "text": "Mac and a modern Kafka that doesn't use zookeeper that will become clear to you later",
    "start": "1040839",
    "end": "1046798"
  },
  {
    "text": "okay uh so uh a couple of flags are useful this one here uh says uh",
    "start": "1046799",
    "end": "1054120"
  },
  {
    "text": "basically what should you do if some a producer tries to write to a topic that doesn't exist right now for development",
    "start": "1054120",
    "end": "1061600"
  },
  {
    "text": "you might just say Creator or true right because actually you know I don't want",
    "start": "1061600",
    "end": "1067200"
  },
  {
    "text": "to go through all the hell of setting up all my topics I just want to test something in a production environment you never want this to be set to",
    "start": "1067200",
    "end": "1073400"
  },
  {
    "text": "anything other than false because it will give you a single partition topic right so a production envirment you want",
    "start": "1073400",
    "end": "1079320"
  },
  {
    "text": "to use a different approach to effectively create your topics out of band okay um there are two things you",
    "start": "1079320",
    "end": "1086600"
  },
  {
    "text": "need to understand listeners and advertised listeners advertised listeners are essentially where external",
    "start": "1086600",
    "end": "1094240"
  },
  {
    "text": "parties what are the addresses they will be able to communicate with Kafka on and",
    "start": "1094240",
    "end": "1100159"
  },
  {
    "text": "Kafka listeners is where CFA is itself listening obviously because you may not",
    "start": "1100159",
    "end": "1105600"
  },
  {
    "text": "be on the same network uh that may mean that those may vary okay and at 3.3 it'll tell you",
    "start": "1105600",
    "end": "1112919"
  },
  {
    "text": "about nodes this rool plays don't worry about that we will explain that later in the presentation um and again there's",
    "start": "1112919",
    "end": "1119600"
  },
  {
    "text": "some stuff here which is 3.3 related which talks about how we run without zookeeper again we will explain that",
    "start": "1119600",
    "end": "1126039"
  },
  {
    "text": "later okay so once you have CRA and running we",
    "start": "1126039",
    "end": "1131400"
  },
  {
    "text": "will take a look at this in a demo a little bit right um then essentially how do you interact with it so comes with a",
    "start": "1131400",
    "end": "1139320"
  },
  {
    "text": "suite of C tools um uh and essentially if you want to set up topics etc those",
    "start": "1139320",
    "end": "1145840"
  },
  {
    "text": "tend to be what you use there is nowadays an API for Kafka it's a more recent addition as a rest API so you can",
    "start": "1145840",
    "end": "1152240"
  },
  {
    "text": "also use the rest API to begin to configure elements like topics in in Kafka as well so Bri to which I work on",
    "start": "1152240",
    "end": "1158360"
  },
  {
    "text": "plugs into the rest API and will let you um set up Kafka that way um but",
    "start": "1158360",
    "end": "1163679"
  },
  {
    "text": "typically uh in a lot of production environments you won't want to do that from your producer or consumer so you'll",
    "start": "1163679",
    "end": "1169000"
  },
  {
    "text": "tend to basically use these tools so is it in the bin file basically wherever you've installed Kafka uh and I always",
    "start": "1169000",
    "end": "1175760"
  },
  {
    "text": "struggle with that because I can never remember on Unix systems whether it's basically you know VAR or server or",
    "start": "1175760",
    "end": "1181400"
  },
  {
    "text": "whatever directory when you finally find where you've installed Kafka in the bin directory there are a whole load of",
    "start": "1181400",
    "end": "1186720"
  },
  {
    "text": "command line utilities like cafka topics which let you create or delete topics console producer which is basically a",
    "start": "1186720",
    "end": "1192679"
  },
  {
    "text": "simple way of just saying I want to send something to that topic at the command line and consumer says I want to read",
    "start": "1192679",
    "end": "1198720"
  },
  {
    "text": "something topic from that command line Etc get offsets which will show you petitions and a whole load more right so",
    "start": "1198720",
    "end": "1204880"
  },
  {
    "text": "typically you can set up CF using the scripting that way if you want to interact with Kafka as a developer",
    "start": "1204880",
    "end": "1212280"
  },
  {
    "text": "working on an application and understanding what is happening then uh a really useful tool is Kat and Kat",
    "start": "1212280",
    "end": "1219280"
  },
  {
    "text": "essentially lets you is a kind of generic producer and consumer for Kafka",
    "start": "1219280",
    "end": "1225159"
  },
  {
    "text": "uh that lets you essentially read uh and write to a given top topic and works nicely with tools like JQ if you want to",
    "start": "1225159",
    "end": "1231799"
  },
  {
    "text": "basically interpret your data right um and we will have a little demo of those in a",
    "start": "1231799",
    "end": "1237159"
  },
  {
    "text": "second oh now in fact um I'm going to show you the UI tools and then I'll do both the demos at the same time actually",
    "start": "1237159",
    "end": "1243960"
  },
  {
    "text": "uh there's also uis there's a whole range of them this one is Kafka UI we'll show you Kafka UI in a second and",
    "start": "1243960",
    "end": "1249880"
  },
  {
    "text": "actually probably in a way that's a bit lighter but there's a whole range of them a aqk CFA drop lenses CMAC or",
    "start": "1249880",
    "end": "1257360"
  },
  {
    "text": "non-commercial ones uh confluent basically in conductor both make paid for uis you've pretty much got",
    "start": "1257360",
    "end": "1264200"
  },
  {
    "text": "a huge range of choices CF UI is pretty good this one I'm I'm going to show you um but you get to choose pretty much and",
    "start": "1264200",
    "end": "1270679"
  },
  {
    "text": "if you're working locally even the paid uis are are not paid for if you see what I mean um so just on your own desktop",
    "start": "1270679",
    "end": "1276799"
  },
  {
    "text": "you could use confluent if you wanted to quite happily it just comes out of container all right let me do these",
    "start": "1276799",
    "end": "1284880"
  },
  {
    "text": "demos",
    "start": "1287520",
    "end": "1290520"
  },
  {
    "text": "all right so I have uh run this Docker compos file which you",
    "start": "1292720",
    "end": "1299440"
  },
  {
    "text": "saw part of for Kafka it also includes things like the CFA UI uh schema",
    "start": "1299440",
    "end": "1305240"
  },
  {
    "text": "registry Etc um uh you can there's a",
    "start": "1305240",
    "end": "1310840"
  },
  {
    "text": "repo I'll should give you link to at the end you can find all the code that's basically being here in umvs code all",
    "start": "1310840",
    "end": "1317320"
  },
  {
    "text": "right so what we're going to do is just that's the UI by the way just flicking across it um we're we're just going to",
    "start": "1317320",
    "end": "1322480"
  },
  {
    "text": "run a few pieces of script here so you can see some stuff so what I'm going to",
    "start": "1322480",
    "end": "1327960"
  },
  {
    "text": "do is I am just going to get a terminal on my so I'm running basically that",
    "start": "1327960",
    "end": "1335840"
  },
  {
    "text": "Kafka in Docker I didn't want to show you starting up Docker didn't feel like it would help it so I basically shelled",
    "start": "1335840",
    "end": "1341919"
  },
  {
    "text": "into my Kafka broker and then I can see what I can create a topic so I can",
    "start": "1341919",
    "end": "1348960"
  },
  {
    "text": "create a test topic so I'm just saying C topics cor if not exists topic test",
    "start": "1348960",
    "end": "1354279"
  },
  {
    "text": "topic how many partitions do I want that's have three what's the bootstrap server so the bootstrap server says what",
    "start": "1354279",
    "end": "1361200"
  },
  {
    "text": "is effectively the address your client can communicate to you to get metadata and we'll talk about that a bit more",
    "start": "1361200",
    "end": "1367640"
  },
  {
    "text": "later on what the metadata is so it says I created a topic called test topic for you for you in and I can use this CFA",
    "start": "1367640",
    "end": "1377039"
  },
  {
    "text": "producer to essentially send to write a record to test topic",
    "start": "1377039",
    "end": "1384799"
  },
  {
    "text": "right and it's saying what record do you want to write in and I'm going to write this the most",
    "start": "1384799",
    "end": "1391559"
  },
  {
    "text": "boring record in the in any demo all right and then I'm going",
    "start": "1391559",
    "end": "1396799"
  },
  {
    "text": "to say I'm done okay and then in",
    "start": "1396799",
    "end": "1402720"
  },
  {
    "text": "theory what I should be able to do is then use a consumer to read that all right so I can",
    "start": "1402720",
    "end": "1412679"
  },
  {
    "text": "do this and say uh console consumer talk to this bootstrap server the bootstrap",
    "start": "1412679",
    "end": "1418520"
  },
  {
    "text": "server will tell me where I need to talk to to read this topic test topic and",
    "start": "1418520",
    "end": "1423760"
  },
  {
    "text": "read it from the beginning right and it's telling me there's a record in there called coups right now",
    "start": "1423760",
    "end": "1430799"
  },
  {
    "text": "if I was actually producer and consumer at the same time you could see I would produce it would then say okay I've seen",
    "start": "1430799",
    "end": "1436919"
  },
  {
    "text": "another record I could keep going right okay",
    "start": "1436919",
    "end": "1444679"
  },
  {
    "text": "Kat is kind of similar so with Kat I can",
    "start": "1445200",
    "end": "1450720"
  },
  {
    "text": "oops I don't have to be in there actually I don't think I can be Kat from the command line because I've got Kat",
    "start": "1450720",
    "end": "1456200"
  },
  {
    "text": "installed locally and I can say okay those are all the things I've sent to the topic so you",
    "start": "1456200",
    "end": "1462120"
  },
  {
    "text": "can see I've sent a few things to that topic when I was testing out this demo ahead of time and Cath is say Kat saying",
    "start": "1462120",
    "end": "1469640"
  },
  {
    "text": "hey that's everything if I start from the beginning that I can find okay",
    "start": "1469640",
    "end": "1475840"
  },
  {
    "text": "and I can also write with Kat right so I can say minus P so you",
    "start": "1475840",
    "end": "1484000"
  },
  {
    "text": "can see minus P or minus C so consumer mode or producer mode so if I'm producer mode I can do a similar thing I can say",
    "start": "1484000",
    "end": "1491440"
  },
  {
    "text": "okay let's write another record to that topic",
    "start": "1491440",
    "end": "1499200"
  },
  {
    "text": "right terminate",
    "start": "1499200",
    "end": "1502960"
  },
  {
    "text": "that you don't want to end the oh yeah it says that in my",
    "start": "1504960",
    "end": "1511399"
  },
  {
    "text": "notes um okay I may not have finished producing that message it may be saying I am",
    "start": "1511399",
    "end": "1517200"
  },
  {
    "text": "really slow let's just see okay yeah so too slow on that one",
    "start": "1517200",
    "end": "1523320"
  },
  {
    "text": "okay right don't wor that why w't you stop",
    "start": "1523320",
    "end": "1529039"
  },
  {
    "text": "okay all right um CF UI so you can see",
    "start": "1529039",
    "end": "1534080"
  },
  {
    "text": "cfy UI has also effectively got that information don't transmogrification you'll see that a bit later so you can",
    "start": "1534080",
    "end": "1540440"
  },
  {
    "text": "see here is our test topic right and you can see that there are a number of partitions we asked for three partitions",
    "start": "1540440",
    "end": "1547640"
  },
  {
    "text": "remember um we effectively only have the one message we can go and look at messages right we can see name",
    "start": "1547640",
    "end": "1555840"
  },
  {
    "text": "coups right fullback 30 was used so essentially it's saying we didn't tell it how to serialize and deserialize to",
    "start": "1555840",
    "end": "1562559"
  },
  {
    "text": "this and I will talk to you about that that's the serialization deserialization topic towards the end but you can effectively see what's going going on",
    "start": "1562559",
    "end": "1569399"
  },
  {
    "text": "here in that in that model right okay let's get back to the",
    "start": "1569399",
    "end": "1578000"
  },
  {
    "text": "slides all right so that is the kind of basics of CFA so we looked at what does",
    "start": "1582360",
    "end": "1589799"
  },
  {
    "text": "c look like producers consumers topic divided into partitions it's an pendon",
    "start": "1589799",
    "end": "1596000"
  },
  {
    "text": "commit log allows asynchronous conversations because both parties don't need to be present they can I can write",
    "start": "1596000",
    "end": "1602559"
  },
  {
    "text": "to the log in an entirely different time window from when you read from the log right I occasionally explain the messaging cour says think about that as",
    "start": "1602559",
    "end": "1609120"
  },
  {
    "text": "being WhatsApp as opposed to a phone call right it's basically send it's a message right so we're going to write a",
    "start": "1609120",
    "end": "1615880"
  },
  {
    "text": "little um we're going to use a consistent Test example when we're showing you some C code to show how that",
    "start": "1615880",
    "end": "1621520"
  },
  {
    "text": "works with this we're going to build the Calvin and Hobs transmogrifier uh who's old enough to be",
    "start": "1621520",
    "end": "1627760"
  },
  {
    "text": "a Calvin and Hobs fan in the audience who's never heard of Calvin and Hobs okay go read some Calvin and Hobs",
    "start": "1627760",
    "end": "1635240"
  },
  {
    "text": "so Calvin uh is a small boy and Hobbs is is tiger stuffed animal uh Calvin owns a",
    "start": "1635240",
    "end": "1642240"
  },
  {
    "text": "trans mograph which is a cardboard box with the word Trans mograph on it and some dials that allow him to change into",
    "start": "1642240",
    "end": "1648679"
  },
  {
    "text": "various creatures including Hobs so we're going to build our own transmogrifier we will have a CLI that",
    "start": "1648679",
    "end": "1655159"
  },
  {
    "text": "will ask us basically uh what we want to transform in transform into uh we will",
    "start": "1655159",
    "end": "1661039"
  },
  {
    "text": "basically take those settings we will send it across to a consumer and the",
    "start": "1661039",
    "end": "1666600"
  },
  {
    "text": "consumer will effectively do the transmogrification for us it was better than hello",
    "start": "1666600",
    "end": "1673480"
  },
  {
    "text": "world okay so what is it look like to produce",
    "start": "1673480",
    "end": "1679080"
  },
  {
    "text": "a message in C all right so uh ignoring the Border plate at the",
    "start": "1679080",
    "end": "1685559"
  },
  {
    "text": "top this is dispatch method you'll see in context uh of the whole code base in a second in vs C but let's talk about",
    "start": "1685559",
    "end": "1691279"
  },
  {
    "text": "what we're doing in here so the first thing we do we need to create a producer so in C we use a producer Builder and we",
    "start": "1691279",
    "end": "1698200"
  },
  {
    "text": "notice we're basically giving it a type of string string what does that mean that means that the key type for this",
    "start": "1698200",
    "end": "1704880"
  },
  {
    "text": "message will be a string and the value type will be a string right and we can obviously adjust those to say what do we",
    "start": "1704880",
    "end": "1711960"
  },
  {
    "text": "want the key and the value type to be for whatever the record is we want to create right we pass it a producer",
    "start": "1711960",
    "end": "1718080"
  },
  {
    "text": "config we will show you that a bit later but essentially that is going to tell us where to find that bootstrap server for",
    "start": "1718080",
    "end": "1724200"
  },
  {
    "text": "CFA and then we build a producer so we say create one of these producers for",
    "start": "1724200",
    "end": "1730360"
  },
  {
    "text": "us then in order to send a message we do producer. produce and we give it the",
    "start": "1730360",
    "end": "1736480"
  },
  {
    "text": "topic what is the name with the topic we want to send the record to and the the message or record effectively has the",
    "start": "1736480",
    "end": "1743480"
  },
  {
    "text": "same key value type of string string and then we set it's contents so our key is just going to be the name of the setting",
    "start": "1743480",
    "end": "1750200"
  },
  {
    "text": "and our value is going to be the actual transformation then we flush the producer all right we don't typically do",
    "start": "1750200",
    "end": "1757840"
  },
  {
    "text": "that uh necessarily per send but you will want to do that before your application exits why when you call",
    "start": "1757840",
    "end": "1765880"
  },
  {
    "text": "producer produce effectively what happens is under the hood in your client SDK is it says great",
    "start": "1765880",
    "end": "1773039"
  },
  {
    "text": "got that work I'll queue it up and I'll put give it to CFA your program can",
    "start": "1773039",
    "end": "1778120"
  },
  {
    "text": "continue so in other words it's a very quick operation to produce but you now have a buffer which isn't necessarily",
    "start": "1778120",
    "end": "1785480"
  },
  {
    "text": "flush to CFA so flush is important before you exit to make sure all of your",
    "start": "1785480",
    "end": "1792159"
  },
  {
    "text": "records have been written to Kafka successfully there is a return value from flush which tells you how much",
    "start": "1792159",
    "end": "1798159"
  },
  {
    "text": "needs to be still need to be written so you can actually do that in a while loop and effectively I'm not doing that here",
    "start": "1798159",
    "end": "1804039"
  },
  {
    "text": "because I only ever have one message to flash right but you can do that in a while loop to basically make sure that",
    "start": "1804039",
    "end": "1809399"
  },
  {
    "text": "there's nothing left to flush out your buffer from Kafka right this does mean that producer do producers effectively",
    "start": "1809399",
    "end": "1816519"
  },
  {
    "text": "async right because it writes to a buffer and you continue There are async methods support we talk about that a bit",
    "start": "1816519",
    "end": "1822440"
  },
  {
    "text": "later actually it's slower than using produce okay and at end we want to",
    "start": "1822440",
    "end": "1828559"
  },
  {
    "text": "dispose the producer like any resource so topic we want to write to um yeah there's the producer com you might to",
    "start": "1828559",
    "end": "1834880"
  },
  {
    "text": "read that Local Host 992 any we care about um create a producer key in value",
    "start": "1834880",
    "end": "1839919"
  },
  {
    "text": "string produce message to a topic right uh and tidy up okay how do we consume a",
    "start": "1839919",
    "end": "1846320"
  },
  {
    "text": "message tiny bit tiny isn't it um I'll walk through you'll see it again in vs code in a second um need to tell the",
    "start": "1846320",
    "end": "1854320"
  },
  {
    "text": "topic want to consume to and we basically need to give it the config again which basically is again the bootstrap server but also here we're",
    "start": "1854320",
    "end": "1861440"
  },
  {
    "text": "going to set a little bit of additional information which is the group ID remember we said you belong to a consumer group all right we'll see it",
    "start": "1861440",
    "end": "1867799"
  },
  {
    "text": "again bit in in big in a second uh similarly we create a consumer from a",
    "start": "1867799",
    "end": "1872919"
  },
  {
    "text": "consumer Builder and it's exactly the same it's a string string that we're reading off right a string key and a",
    "start": "1872919",
    "end": "1879440"
  },
  {
    "text": "string value all right what we're doing here and this is just the way I've set it up",
    "start": "1879440",
    "end": "1885120"
  },
  {
    "text": "is our run method will effectively spin reading from a given stream in CFA from",
    "start": "1885120",
    "end": "1891000"
  },
  {
    "text": "a given topic right and so in it's going to be a while loop in there what we're",
    "start": "1891000",
    "end": "1896519"
  },
  {
    "text": "actually going to do because this is typical of kind of messaging Frameworks is pass in two functions one says how do",
    "start": "1896519",
    "end": "1903240"
  },
  {
    "text": "I translate between this message on the wire and something I might want a type I",
    "start": "1903240",
    "end": "1909840"
  },
  {
    "text": "might want to be able to use internally and the other says I'm going to then handle that message and you'll see how we do that when we get to the actual",
    "start": "1909840",
    "end": "1916399"
  },
  {
    "text": "code in a second so we subscribe to the topic we run the message pump in an",
    "start": "1916399",
    "end": "1921480"
  },
  {
    "text": "endless loop right and we say Okay use a cancel otion token to make sure we can",
    "start": "1921480",
    "end": "1927200"
  },
  {
    "text": "exit the loop if we're signal to um translate the message handle the message",
    "start": "1927200",
    "end": "1932480"
  },
  {
    "text": "right and deal with any uh errors and tidy up and close all right and so we've",
    "start": "1932480",
    "end": "1937679"
  },
  {
    "text": "got in our main method uh configuring CFA uh and essentially we will tell you",
    "start": "1937679",
    "end": "1944240"
  },
  {
    "text": "here how to what our methods are that translate and then do handle a message all right so let's see that",
    "start": "1944240",
    "end": "1951960"
  },
  {
    "text": "code which way is that",
    "start": "1956080",
    "end": "1960320"
  },
  {
    "text": "okay so just that producer code again to remind ourselves there is the",
    "start": "1962960",
    "end": "1970279"
  },
  {
    "text": "dispatcher right is that is the code up on",
    "start": "1970279",
    "end": "1976840"
  },
  {
    "text": "screen let me kill",
    "start": "1976840",
    "end": "1983279"
  },
  {
    "text": "that die all right excellent okay so we have our our",
    "start": "1983279",
    "end": "1994279"
  },
  {
    "text": "producer here is basically the producer build statement right here is basically",
    "start": "1994279",
    "end": "1999320"
  },
  {
    "text": "our producer producing sending that message and we flush all that's happening in terms of the program code",
    "start": "1999320",
    "end": "2005360"
  },
  {
    "text": "is we have some UI that just Spector do console I won't show you that code please go and look at the repair if you",
    "start": "2005360",
    "end": "2011279"
  },
  {
    "text": "want to see how that works what we're going to say is I'm going to ask you for your name I'm going to ask you for the transformation I'm going to tell you",
    "start": "2011279",
    "end": "2017760"
  },
  {
    "text": "what you selected and then I'm going to essentially when we do enter transmogrifier say do you want to do",
    "start": "2017760",
    "end": "2023399"
  },
  {
    "text": "this and then we'll send a message fora the dispatcher uh to the to produce then the consumer",
    "start": "2023399",
    "end": "2030960"
  },
  {
    "text": "code one that was harder to read all right in the message pump we're going to",
    "start": "2030960",
    "end": "2036000"
  },
  {
    "text": "say well build a matching cons that's string string right and then subscribe",
    "start": "2036000",
    "end": "2041600"
  },
  {
    "text": "to the given topic right remember the topic is how we know we're addressing the same commit",
    "start": "2041600",
    "end": "2046799"
  },
  {
    "text": "log and then we're going to say on a while loop read from that that uh that",
    "start": "2046799",
    "end": "2052679"
  },
  {
    "text": "topic if effectively we're not we've run out of items to read in which case yield",
    "start": "2052679",
    "end": "2058560"
  },
  {
    "text": "for a bit and then come back and check again later then I want you to translate",
    "start": "2058560",
    "end": "2063760"
  },
  {
    "text": "that message into something useful and then handle it so you can see in the program file what we're actually saying",
    "start": "2063760",
    "end": "2069800"
  },
  {
    "text": "is create this message pump and run it and what we want to do is turn the message into a new",
    "start": "2069800",
    "end": "2076800"
  },
  {
    "text": "transmogrification right and then we'll output the transmogrification that we're going to we're going to make all",
    "start": "2076800",
    "end": "2083839"
  },
  {
    "text": "right",
    "start": "2083839",
    "end": "2086839"
  },
  {
    "text": "so oh no spoilers uh is that font big enough or",
    "start": "2089440",
    "end": "2097359"
  },
  {
    "text": "do you want it to be a bit",
    "start": "2097359",
    "end": "2100559"
  },
  {
    "text": "bigger big",
    "start": "2102400",
    "end": "2105640"
  },
  {
    "text": "enough bit more transm mography is a long word it",
    "start": "2108000",
    "end": "2113320"
  },
  {
    "text": "turns out uh okay all right so uh run there we",
    "start": "2113320",
    "end": "2120960"
  },
  {
    "text": "go what's my name my name is Ian I'd like to become a tiger",
    "start": "2120960",
    "end": "2129640"
  },
  {
    "text": "right um so it says basically uh I've entered the transmogrifier and I'll come",
    "start": "2130240",
    "end": "2135280"
  },
  {
    "text": "out as Ian all right so if I then that's the producer we can see now there a",
    "start": "2135280",
    "end": "2142119"
  },
  {
    "text": "slight thing going on here to just explain you can see I've got trans modification I currently have 21 messages um so I could have uh done",
    "start": "2142119",
    "end": "2150240"
  },
  {
    "text": "something where uh before the demo I deleted the topic and uh reset all my",
    "start": "2150240",
    "end": "2156040"
  },
  {
    "text": "consumers Etc but uh my my my slight thing then was how do I know the demo is",
    "start": "2156040",
    "end": "2161760"
  },
  {
    "text": "actually going to work so let's just assume 21 is now Base number messages",
    "start": "2161760",
    "end": "2166800"
  },
  {
    "text": "and you'll see it go up all right um but we are reading effectively you'll see from the uh this",
    "start": "2166800",
    "end": "2174000"
  },
  {
    "text": "point if not I'll got it fixed don't worry okay and we can run the",
    "start": "2174000",
    "end": "2182400"
  },
  {
    "text": "consumer begin the M trans modification and I should want to be transformed into a typ",
    "start": "2182800",
    "end": "2188920"
  },
  {
    "text": "uh and I could do it again all right I could run it again and say in",
    "start": "2188920",
    "end": "2194920"
  },
  {
    "text": "what do you want to be transformed into this time I could say a frog right and you can see I got a frog",
    "start": "2194920",
    "end": "2201960"
  },
  {
    "text": "so the consumer is in a loop and it's just reading the next thing that I write",
    "start": "2201960",
    "end": "2208319"
  },
  {
    "text": "okay fairly straightforward um and that's how you write to C and we're done great",
    "start": "2208319",
    "end": "2214720"
  },
  {
    "text": "thanks all right",
    "start": "2214720",
    "end": "2219520"
  },
  {
    "text": "all right few more things to tell you about Kafka so Kafka tends to come in a",
    "start": "2225160",
    "end": "2233960"
  },
  {
    "text": "cluster one of other things is going to be bad right because I've got a single node there in Docker compose which is",
    "start": "2233960",
    "end": "2239520"
  },
  {
    "text": "fine for me running on my machine um but obviously in your production environment you're going to know multiple nodes",
    "start": "2239520",
    "end": "2245359"
  },
  {
    "text": "because if you lose that single node well you've lost and access to all the data written to a stream so you have multiple",
    "start": "2245359",
    "end": "2252079"
  },
  {
    "text": "notes typically a corent number three five Etc right so my any given partition",
    "start": "2252079",
    "end": "2259319"
  },
  {
    "text": "is copied across all those nodes one of those copies will effectively be the",
    "start": "2259319",
    "end": "2265160"
  },
  {
    "text": "leader and All rights go to the leader okay since about I think it's",
    "start": "2265160",
    "end": "2271280"
  },
  {
    "text": "2.3 you can also you can read from the leader but you can read to any of the followers to whom that data is copied",
    "start": "2271280",
    "end": "2278839"
  },
  {
    "text": "right so I write to partition Zero's leader the data is copied to partition Zero's two followers on broker one or",
    "start": "2278839",
    "end": "2284960"
  },
  {
    "text": "broker two and essentially therefore I can read from any one of those three Brokers notice that for the next uh uh",
    "start": "2284960",
    "end": "2293680"
  },
  {
    "text": "partition down partition one the lead is actually on broker one so the leaders are distributed across the brokers in",
    "start": "2293680",
    "end": "2300560"
  },
  {
    "text": "order to distribute the right load in the event that I lose a broker",
    "start": "2300560",
    "end": "2305960"
  },
  {
    "text": "then what happens is the control which is one of the Brokers will redetermined leader of the",
    "start": "2305960",
    "end": "2312440"
  },
  {
    "text": "partitions is that you should now write to and the other followers should listen to all right the bootstrap server which",
    "start": "2312440",
    "end": "2320920"
  },
  {
    "text": "you saw in some of that config right so when I connect when when I connect to Kafka you don't usually have to do too",
    "start": "2320920",
    "end": "2327079"
  },
  {
    "text": "much but your SDK is doing quite a lot of work one of the things it's saying is I need to know on which broker the",
    "start": "2327079",
    "end": "2334359"
  },
  {
    "text": "leader partition is because that's what I want to write to you for this",
    "start": "2334359",
    "end": "2339400"
  },
  {
    "text": "topic to find that information it needs a server to tell it where do all the",
    "start": "2339400",
    "end": "2344520"
  },
  {
    "text": "leaders and followers live and so the bootstrap server eff just means that the",
    "start": "2344520",
    "end": "2349839"
  },
  {
    "text": "server you ask for the metadata to tell you where to send your produce requests",
    "start": "2349839",
    "end": "2355720"
  },
  {
    "text": "and where to make your consume",
    "start": "2355720",
    "end": "2359078"
  },
  {
    "text": "requests who decides who is basically the controller who determines which of",
    "start": "2362200",
    "end": "2369079"
  },
  {
    "text": "these nodes are going to be leaders and followers so the obviously if I got a",
    "start": "2369079",
    "end": "2376359"
  },
  {
    "text": "leader and some followers someone's got to make the decision you're the leader you're the follower especially if a broker goes down someone's got to say",
    "start": "2376359",
    "end": "2382640"
  },
  {
    "text": "well okay now you're the leader you're the follower for any given partition and that is called the controller so the",
    "start": "2382640",
    "end": "2388240"
  },
  {
    "text": "controller is basically in CFA versions part about 3.3 is one of your nodes in",
    "start": "2388240",
    "end": "2394880"
  },
  {
    "text": "the cluster and its job is to determine who which are the leader and follower partitions okay how do we know who is",
    "start": "2394880",
    "end": "2401520"
  },
  {
    "text": "the controller so this is where CFA used to have and you may still find us in some",
    "start": "2401520",
    "end": "2407440"
  },
  {
    "text": "of the instances you're using have a dependency on zookeeper so zookeeper supports a number of Primitives such as",
    "start": "2407440",
    "end": "2414119"
  },
  {
    "text": "basically consensus algorithms so CFA uses it for that what happens is as each",
    "start": "2414119",
    "end": "2419800"
  },
  {
    "text": "CFA node comes up it tries to create an ephemeral root node on basically",
    "start": "2419800",
    "end": "2425760"
  },
  {
    "text": "zookeeper for that c AF cluster if it's the first one it gets to be root if it's",
    "start": "2425760",
    "end": "2431240"
  },
  {
    "text": "another one it doesn't get to be root right root says I am the controller if root goes down because",
    "start": "2431240",
    "end": "2438520"
  },
  {
    "text": "it's an ephemeral node the node disappears and somebody else grabs a root and they become the controller so that's why there's a dependency you're",
    "start": "2438520",
    "end": "2444839"
  },
  {
    "text": "seeing some Kafka setups for for zookeeper since about 3.3 Kafka has not",
    "start": "2444839",
    "end": "2451119"
  },
  {
    "text": "needed zookeeper anymore to do that right so now essentially what happen",
    "start": "2451119",
    "end": "2457319"
  },
  {
    "text": "Happ s is that the CFA nodes Implement CFA raft so raft is a stup consensus",
    "start": "2457319",
    "end": "2463440"
  },
  {
    "text": "protocol right go often called craft which makes me think about Dairy Le cheese because I'm British um and",
    "start": "2463440",
    "end": "2470680"
  },
  {
    "text": "essentially the individual nodes will decide amongst themselves who gets to be",
    "start": "2470680",
    "end": "2475960"
  },
  {
    "text": "the controller in case one of them effectively dies your nodes can either",
    "start": "2475960",
    "end": "2481119"
  },
  {
    "text": "act as Brokers controllers or both depending on how you want to configure",
    "start": "2481119",
    "end": "2486200"
  },
  {
    "text": "the resilience in your faser a so we mentioned a little bit",
    "start": "2486200",
    "end": "2493240"
  },
  {
    "text": "earlier that when we were writing we said one of the optimizations Kafka gives you and that producer produces",
    "start": "2493240",
    "end": "2499400"
  },
  {
    "text": "under the hood in the sdat buffering those rights the producer so your code",
    "start": "2499400",
    "end": "2504560"
  },
  {
    "text": "can move on the other question really is when I write to the producer what do I take as the",
    "start": "2504560",
    "end": "2512640"
  },
  {
    "text": "confirmation that I have successfully written my record so so I could just say the broker",
    "start": "2512640",
    "end": "2519079"
  },
  {
    "text": "says hey yeah you talked to me right this is what we call act zero I don't",
    "start": "2519079",
    "end": "2524920"
  },
  {
    "text": "know whether it's actually been written successfully to any of the nodes in the",
    "start": "2524920",
    "end": "2530119"
  },
  {
    "text": "cluster I just know that it was acknowledged that it got it if effectively the node that I was writing",
    "start": "2530119",
    "end": "2537480"
  },
  {
    "text": "to Crashed before it wrote it to the leader partition because that's that I should be talking to then effectively",
    "start": "2537480",
    "end": "2544160"
  },
  {
    "text": "that right would be lost right that's a Z it's fast in terms of that response back to your so you're",
    "start": "2544160",
    "end": "2550760"
  },
  {
    "text": "going to eat through that buffer fast right but it's potentially lossy in the event of that node",
    "start": "2550760",
    "end": "2557440"
  },
  {
    "text": "crashing ax equals 1 says I should know it's been written to the leader right that's a little less fast",
    "start": "2557440",
    "end": "2566160"
  },
  {
    "text": "now I know the leader's got it so if there's a right I can I'm assuming that under the hood it's going to basically",
    "start": "2566160",
    "end": "2572280"
  },
  {
    "text": "be replicating out to those followers I don't know though that it's not going to",
    "start": "2572280",
    "end": "2577599"
  },
  {
    "text": "crash before it's actually replicated now there's a lesser chance perhaps than",
    "start": "2577599",
    "end": "2583359"
  },
  {
    "text": "effectively I'm going to get message loss with x equals z but there's still a",
    "start": "2583359",
    "end": "2588760"
  },
  {
    "text": "chance x equals all says when I write",
    "start": "2588760",
    "end": "2594000"
  },
  {
    "text": "don't tell me it's done until essentially you have given me information back from all of these uh",
    "start": "2594000",
    "end": "2603160"
  },
  {
    "text": "all of the nodes that it's been successfully written now I know I'm not going to lose the the",
    "start": "2603160",
    "end": "2608599"
  },
  {
    "text": "message okay now question you may be asking yourself is um hang on a minute",
    "start": "2608599",
    "end": "2615720"
  },
  {
    "text": "if the buffer is doing the rights how do I know whether it achieved any of these things and we will come back to",
    "start": "2615720",
    "end": "2622079"
  },
  {
    "text": "that okay um kafa determines the health",
    "start": "2622079",
    "end": "2627240"
  },
  {
    "text": "of given nodes by asking itself how far out of alignment are they with the",
    "start": "2627240",
    "end": "2635200"
  },
  {
    "text": "leader right so this is called lag it's saying how far behind in terms of the",
    "start": "2635200",
    "end": "2642760"
  },
  {
    "text": "rights is this replica in terms of what it's basically showing in its in it in",
    "start": "2642760",
    "end": "2649800"
  },
  {
    "text": "its copy of the partition right and if that number gets too high in other words",
    "start": "2649800",
    "end": "2655280"
  },
  {
    "text": "there are five or six uh rights that it's basically it's not got yet then",
    "start": "2655280",
    "end": "2660480"
  },
  {
    "text": "essentially what happens is CFA says that replica is no longer in sync and",
    "start": "2660480",
    "end": "2666559"
  },
  {
    "text": "basically takes it out of the cluster at that point your rights no longer in an",
    "start": "2666559",
    "end": "2672720"
  },
  {
    "text": "ax equals all consider that a broker they need to write to and it's not one you tend to read from right and",
    "start": "2672720",
    "end": "2679839"
  },
  {
    "text": "typically you've got to figure out what happened to that particular node that it's dropped",
    "start": "2679839",
    "end": "2685000"
  },
  {
    "text": "out okay so few things we need to know about writing reliable producers then in",
    "start": "2685000",
    "end": "2691119"
  },
  {
    "text": "C and some configuration things you want to think about so on the screen here you",
    "start": "2691119",
    "end": "2696640"
  },
  {
    "text": "can see in the little box when writing our producer topic Fu ax equals all typically means we're going to copy that",
    "start": "2696640",
    "end": "2702680"
  },
  {
    "text": "to all of our all of the um nodes in the cluster that's probably best if we want to be reliable we don't want we can't",
    "start": "2702680",
    "end": "2709200"
  },
  {
    "text": "risk message loss retries is how many times the producer is going to keep",
    "start": "2709200",
    "end": "2714520"
  },
  {
    "text": "retrying to send a given message in the buffer before it gives up typical values are something like three uh but you may",
    "start": "2714520",
    "end": "2721319"
  },
  {
    "text": "want more if you really can't afford to lose a message and retry back off says what's the gap app in between each one",
    "start": "2721319",
    "end": "2728040"
  },
  {
    "text": "of those retries to write to the broker there are typically in a network transient errors right networks go down",
    "start": "2728040",
    "end": "2734359"
  },
  {
    "text": "for a period of time so essentially you need to work on that a maxim flight rest quest per connection says how many",
    "start": "2734359",
    "end": "2741400"
  },
  {
    "text": "threads can you use to basically read from that buffer if you require strict ordering keep it at one in order to make",
    "start": "2741400",
    "end": "2748359"
  },
  {
    "text": "sure that you are reading the buffer and Order okay so if I want to rely produce",
    "start": "2748359",
    "end": "2753880"
  },
  {
    "text": "a message in C couple of things I might want to think about so the first thing",
    "start": "2753880",
    "end": "2760400"
  },
  {
    "text": "up there is my configuration right actually that's saying ax leader should be ax all right but I've got some new",
    "start": "2760400",
    "end": "2766599"
  },
  {
    "text": "elements that axe uh the maximum number of retries three and the max in Flight",
    "start": "2766599",
    "end": "2772240"
  },
  {
    "text": "in that config in the corner so I need to configure the SDK and I might want to also make sure I S an error Handler in",
    "start": "2772240",
    "end": "2778680"
  },
  {
    "text": "my Builder so I can understand when CF is telling me things have gone wrong in order to understand whether CFA",
    "start": "2778680",
    "end": "2785720"
  },
  {
    "text": "actually successfully wrote my buffered uh record I'm going to have I should",
    "start": "2785720",
    "end": "2792440"
  },
  {
    "text": "handle essentially delivery report so that's a call back and produce right so",
    "start": "2792440",
    "end": "2798440"
  },
  {
    "text": "I register a call back and I say tell me whether it got sent now what am I going to do with that right because that's",
    "start": "2798440",
    "end": "2804760"
  },
  {
    "text": "coming out of band what am I going to do if didn't get sent so the typical strategy in most messaging Frameworks is",
    "start": "2804760",
    "end": "2810319"
  },
  {
    "text": "to use an outbox this is a nody memory out box it doesn't really work don't go and put this one in your deployment",
    "start": "2810319",
    "end": "2816160"
  },
  {
    "text": "right but what this just says is I'm going to record when I send a message I'm going to add something to the outbox",
    "start": "2816160",
    "end": "2821920"
  },
  {
    "text": "you can see that in line 28 right I'm going to add something to the outbox and effectively when I get the delivery",
    "start": "2821920",
    "end": "2828240"
  },
  {
    "text": "report on 19 I will Mark that as scene now a in a genuine outbox implementation",
    "start": "2828240",
    "end": "2834200"
  },
  {
    "text": "what would happen is you would look for work that had not been sent in a given time scale and resend",
    "start": "2834200",
    "end": "2840559"
  },
  {
    "text": "it all right uh that one's okay y um async so",
    "start": "2840559",
    "end": "2847599"
  },
  {
    "text": "if you do use async right you can create an async producer then what happens is it's just async awaits and the report is",
    "start": "2847599",
    "end": "2855319"
  },
  {
    "text": "returned to you as the response to the asyn a weight call right so you just handle the return report value um it",
    "start": "2855319",
    "end": "2862640"
  },
  {
    "text": "will be slower than doing producer. produce and producer. produce is also",
    "start": "2862640",
    "end": "2867720"
  },
  {
    "text": "effectively async because it doesn't block right why won't you ever want to use this because async is viral and you",
    "start": "2867720",
    "end": "2874960"
  },
  {
    "text": "may end up needing to basically have an async produce all right let's demo that I the",
    "start": "2874960",
    "end": "2882760"
  },
  {
    "text": "time die",
    "start": "2895040",
    "end": "2898920"
  },
  {
    "text": "right oh no there's even more spoilers don't know why I left all these spoilers",
    "start": "2900240",
    "end": "2905760"
  },
  {
    "text": "up right look at code first okay just to remind you so demo number",
    "start": "2905760",
    "end": "2914000"
  },
  {
    "text": "three producer we will actually be using this",
    "start": "2914000",
    "end": "2919520"
  },
  {
    "text": "dispatcher uh you can see we create this action delivery report right it's just a call back what we're saying is Mark the",
    "start": "2919520",
    "end": "2926000"
  },
  {
    "text": "status in the outbox right uh what we've done is that's just a callback we try",
    "start": "2926000",
    "end": "2931480"
  },
  {
    "text": "and send the message we put basically it in the outbox and then we produce it when we register Handler and that will",
    "start": "2931480",
    "end": "2938240"
  },
  {
    "text": "call this which would then Mark the item in the outbox the outbox is not a",
    "start": "2938240",
    "end": "2943440"
  },
  {
    "text": "anything other than just a dictionary which contains those values right it's not production gr anything but it lets",
    "start": "2943440",
    "end": "2949400"
  },
  {
    "text": "us interrogate it afterwards this is what the async dispatcher we're not using that one but",
    "start": "2949400",
    "end": "2955040"
  },
  {
    "text": "this is what the async dispatcher looks like so it's in the code which I give you the GitHub reference at the end so you can go and see that if you if you",
    "start": "2955040",
    "end": "2961559"
  },
  {
    "text": "need that for your scenario and this is the consumer",
    "start": "2961559",
    "end": "2967559"
  },
  {
    "text": "right here's the message pump again so very similar we're subscribing effectively Etc there's no real change",
    "start": "2967559",
    "end": "2973640"
  },
  {
    "text": "to the consumer in this model right we'll come back to store offset later you'll see that we're going to talk",
    "start": "2973640",
    "end": "2978720"
  },
  {
    "text": "about store offset in the next um uh bit of a slide deck but you'll see a little",
    "start": "2978720",
    "end": "2984760"
  },
  {
    "text": "response so you can wonder what does that mean what is hean",
    "start": "2984760",
    "end": "2991160"
  },
  {
    "text": "doing uh is that readable needs to be bigger doesn't it bigger enough",
    "start": "2991599",
    "end": "2999160"
  },
  {
    "text": "oh uh oh dear let's start that",
    "start": "3000640",
    "end": "3007160"
  },
  {
    "text": "again okay let's make you bigger as",
    "start": "3007559",
    "end": "3015000"
  },
  {
    "text": "well is that visible",
    "start": "3015000",
    "end": "3020200"
  },
  {
    "text": "visible okay what's a transformation make me an an eel I have to get the case",
    "start": "3021119",
    "end": "3026160"
  },
  {
    "text": "right because my code is not that good okay so I want to be an eel can you see",
    "start": "3026160",
    "end": "3032520"
  },
  {
    "text": "I've now got this box marked sent messages where what I'm saying is that",
    "start": "3032520",
    "end": "3037640"
  },
  {
    "text": "basically that is the contents of the outbox so it says there's a transmogrification topic I sent",
    "start": "3037640",
    "end": "3044440"
  },
  {
    "text": "something with the key of E and the value of e it went to partition zero um",
    "start": "3044440",
    "end": "3050200"
  },
  {
    "text": "uh it status persisted in other words basically that's the status I got back on the delivery report to say that now",
    "start": "3050200",
    "end": "3055599"
  },
  {
    "text": "exists and all of the nodes in my cluster there is only one Noe all right it tells me when that",
    "start": "3055599",
    "end": "3061079"
  },
  {
    "text": "happened and I can consume",
    "start": "3061079",
    "end": "3065280"
  },
  {
    "text": "that uh the nice the nice sort of table effects and stuff all Des Specta do console by the way uh and you can see",
    "start": "3066280",
    "end": "3073160"
  },
  {
    "text": "that code in GitHub it's not a talk about Specta do console though so I don't want to spend too long on",
    "start": "3073160",
    "end": "3079319"
  },
  {
    "text": "that okay uh so I can say Ian I'm going to transform into a baboon because why",
    "start": "3079319",
    "end": "3088799"
  },
  {
    "text": "not um I'm done right okay so you can see Ian",
    "start": "3088799",
    "end": "3095160"
  },
  {
    "text": "baboon zero persisted and you can see I'm reading those on the other side all right all",
    "start": "3095160",
    "end": "3102880"
  },
  {
    "text": "right uh how am I doing for time all right just keep going in no one cares",
    "start": "3103119",
    "end": "3108799"
  },
  {
    "text": "how much time you're wasting all",
    "start": "3108799",
    "end": "3112359"
  },
  {
    "text": "right timing is to cover everything all right uh transactional reliability you can try",
    "start": "3113880",
    "end": "3120760"
  },
  {
    "text": "and increase the number of items that you are sending at once typically what you need to do is a couple of things you",
    "start": "3120760",
    "end": "3126520"
  },
  {
    "text": "will need to enable item potent and that essentially says cafka do not make sure that you make sure that you do not send",
    "start": "3126520",
    "end": "3133079"
  },
  {
    "text": "the same message more than once and you will probably need to use a transaction which means you need to create a",
    "start": "3133079",
    "end": "3138480"
  },
  {
    "text": "transaction ID um so here is some code that de",
    "start": "3138480",
    "end": "3143720"
  },
  {
    "text": "creates a transaction you can see at the top it's doing produc produce init transaction produce a begin transaction",
    "start": "3143720",
    "end": "3149400"
  },
  {
    "text": "so the init transaction gives me a time span a begin transaction you can see the bottom it commits right typically also",
    "start": "3149400",
    "end": "3156119"
  },
  {
    "text": "useful if you want to send a cluster of things that have to be sent in order um",
    "start": "3156119",
    "end": "3161280"
  },
  {
    "text": "it will automatically set ax all Max in flight to five and Max in retries in",
    "start": "3161280",
    "end": "3166480"
  },
  {
    "text": "other words it will keep retrying until it finally gives up right and if you",
    "start": "3166480",
    "end": "3171799"
  },
  {
    "text": "genuinely have a problem with uh how the sequencing of your messages going to CFA",
    "start": "3171799",
    "end": "3177720"
  },
  {
    "text": "you may need to fall back on those transactions we not going to Dem with that just CU interest of time",
    "start": "3177720",
    "end": "3184079"
  },
  {
    "text": "um okay reliable consumers so remember we talked earlier",
    "start": "3184079",
    "end": "3190520"
  },
  {
    "text": "on and said our consumer stores an offset to tell us how far it's red by",
    "start": "3190520",
    "end": "3196640"
  },
  {
    "text": "theault out of the box if I do nothing if you can see up in the top right hand box it says enable auto commit equals",
    "start": "3196640",
    "end": "3203040"
  },
  {
    "text": "true and enable auto offset store is true what that means is this enable auto",
    "start": "3203040",
    "end": "3208280"
  },
  {
    "text": "offset store means when I've read a record from uh the cafka stream put in a",
    "start": "3208280",
    "end": "3216480"
  },
  {
    "text": "store that that offset has been read and they will autoc commit means every 5",
    "start": "3216480",
    "end": "3222200"
  },
  {
    "text": "Seconds commit those to the consumer offsets log in",
    "start": "3222200",
    "end": "3227599"
  },
  {
    "text": "CFA so the code on the left which what been running up to now effectively when",
    "start": "3227599",
    "end": "3233040"
  },
  {
    "text": "it consumes something stores to the offset log that that's read that item",
    "start": "3233040",
    "end": "3238520"
  },
  {
    "text": "and in the background it will be committed okay but there's a problem I've consumed it and said I've",
    "start": "3238520",
    "end": "3244599"
  },
  {
    "text": "read it but what happens if there's an error at translator or Handler or my application crashes I probably don't",
    "start": "3244599",
    "end": "3251680"
  },
  {
    "text": "want to mark that work item is done I want to be able to come back and do that",
    "start": "3251680",
    "end": "3257440"
  },
  {
    "text": "later on right or if this application just crashes have something else pick up and take over the work that was",
    "start": "3257440",
    "end": "3263319"
  },
  {
    "text": "otherwise lost but I've committed the offset so my consumer doesn't know so to fix that I'm going to have to",
    "start": "3263319",
    "end": "3272440"
  },
  {
    "text": "manually take over part of the operation the simplest model in net it's",
    "start": "3272440",
    "end": "3281200"
  },
  {
    "text": "not the same for all CFA packaging library is quite how this works when net the simplest model is for us to",
    "start": "3281200",
    "end": "3286960"
  },
  {
    "text": "essentially say I'll take over storing the offsets so I will store the offset",
    "start": "3286960",
    "end": "3294599"
  },
  {
    "text": "essentially um for you whenever I basically hit a number that I have done",
    "start": "3294599",
    "end": "3301240"
  },
  {
    "text": "right so I'll say I've translated it I've handled it it's done store the offset in the",
    "start": "3301240",
    "end": "3308680"
  },
  {
    "text": "background the SDK will say okay I'll commit that offset every 5",
    "start": "3308839",
    "end": "3314760"
  },
  {
    "text": "Seconds that's the simplest way of doing it your only problem is essentially",
    "start": "3314760",
    "end": "3320440"
  },
  {
    "text": "still if you get a bad crash you might have pending offsets that you never see",
    "start": "3320440",
    "end": "3325640"
  },
  {
    "text": "and so effect effectively you will replay those items right your consumer when it",
    "start": "3325640",
    "end": "3333039"
  },
  {
    "text": "restarts will go hey we only reach five even though you might actually have processed up to about",
    "start": "3333039",
    "end": "3339480"
  },
  {
    "text": "10 so your other alternative is to say don't commit for me don't store offsets",
    "start": "3339480",
    "end": "3345760"
  },
  {
    "text": "I will choose when to commit for you right and on that model we actually",
    "start": "3345760",
    "end": "3351160"
  },
  {
    "text": "call commit rather an offset store and tell it a commit has been made now",
    "start": "3351160",
    "end": "3356400"
  },
  {
    "text": "there's a tradeoff here if I'm committing every single time my problem is going to be that's",
    "start": "3356400",
    "end": "3362599"
  },
  {
    "text": "very chatty right going to cut they're going to slow me down so typically at",
    "start": "3362599",
    "end": "3367720"
  },
  {
    "text": "that point I might want to batch commits if I batch commits maybe I should have",
    "start": "3367720",
    "end": "3373240"
  },
  {
    "text": "is am I any better off than when I was using a store right because I could still lose if I crashed during the",
    "start": "3373240",
    "end": "3378640"
  },
  {
    "text": "middle of the batch and it's not been committed so you kind of have to figure out what your tolerance is whether",
    "start": "3378640",
    "end": "3386039"
  },
  {
    "text": "you're more tolerant to uh performance issues or whether you're more tolerant",
    "start": "3386039",
    "end": "3391440"
  },
  {
    "text": "to having to maybe replying some messages when you go missing right so when like brighter we let you have quite",
    "start": "3391440",
    "end": "3398200"
  },
  {
    "text": "a lot of control we actually do manual but then we do batching and we let you make a lot of control over quite how",
    "start": "3398200",
    "end": "3403960"
  },
  {
    "text": "that works um the other thing to bear in mind is",
    "start": "3403960",
    "end": "3409799"
  },
  {
    "text": "that whatever strategy you choose if you now have taken control of storing offsets or commits you need to react if",
    "start": "3409799",
    "end": "3417400"
  },
  {
    "text": "the partitions change don't forget effectively the partitions can be revoked and you can gain and lose",
    "start": "3417400",
    "end": "3423480"
  },
  {
    "text": "offsets all right so you typically have to say whatever my strategy was I will",
    "start": "3423480",
    "end": "3428640"
  },
  {
    "text": "set up in the partitions revoke Handler to store offsets of store commits all right quick demo because I realize we",
    "start": "3428640",
    "end": "3435680"
  },
  {
    "text": "are difficult on time",
    "start": "3435680",
    "end": "3442480"
  },
  {
    "text": "okay uh I think it's",
    "start": "3443920",
    "end": "3448160"
  },
  {
    "text": "yeah we know the",
    "start": "3452160",
    "end": "3455640"
  },
  {
    "text": "form okay and then if I",
    "start": "3460000",
    "end": "3465680"
  },
  {
    "text": "clear you can see that what I've got there is a note saying I committed this",
    "start": "3469960",
    "end": "3475119"
  },
  {
    "text": "offset right to partition zero offset 24 you've been doing a number of demos",
    "start": "3475119",
    "end": "3480160"
  },
  {
    "text": "we're about 21 earlier on you can see we're just advancing the new offset right so we're just manually doing",
    "start": "3480160",
    "end": "3485440"
  },
  {
    "text": "committing offsets at that point all right let me stop that all right need to go a bit",
    "start": "3485440",
    "end": "3493760"
  },
  {
    "text": "faster uh offset resets uh I won't show you this but uh there is some code",
    "start": "3501280",
    "end": "3506839"
  },
  {
    "text": "there's actually some in the sample which will let you reset the offsets for a given topic Etc typically though the simplest way to do it often is just",
    "start": "3506839",
    "end": "3513079"
  },
  {
    "text": "change your group ID right just change it the group to Consumer two you got a new group ID you're effectively going to",
    "start": "3513079",
    "end": "3519359"
  },
  {
    "text": "start from zero right okay Qui trick serializes deriz in the scheme",
    "start": "3519359",
    "end": "3525039"
  },
  {
    "text": "registry so on a given topic uh we can essentially establish that the either",
    "start": "3525039",
    "end": "3530880"
  },
  {
    "text": "the key or the value or both may have a given schema Kafka supports Avro J",
    "start": "3530880",
    "end": "3536280"
  },
  {
    "text": "schema or Proto buff so we don't have to do everything in terms of strings right or other Primitives okay um uh typically",
    "start": "3536280",
    "end": "3543839"
  },
  {
    "text": "there is a relationship between a Copic on one or more schemas lot of complexity for the minute let's just assume the",
    "start": "3543839",
    "end": "3550200"
  },
  {
    "text": "simple case which is there is a a schema which has the same name as the topic Das",
    "start": "3550200",
    "end": "3556200"
  },
  {
    "text": "value right that's that's the default there are more complex uh arrangements okay schemas effectively",
    "start": "3556200",
    "end": "3564240"
  },
  {
    "text": "have a whole list of rules if you wish to force them at by I think called the schema registry which tell you whether",
    "start": "3564240",
    "end": "3570160"
  },
  {
    "text": "or not uh when you make a change to that schema it is backwards or forwards compatible and this is a big table that",
    "start": "3570160",
    "end": "3577280"
  },
  {
    "text": "CFA gives you that tells you what that means it's complicated let's have a easier version so your choices are",
    "start": "3577280",
    "end": "3584799"
  },
  {
    "text": "really consumers using the new version can read messages using the last version",
    "start": "3584799",
    "end": "3590599"
  },
  {
    "text": "so the thing you send is still usable if I only know about the last version of the schema",
    "start": "3590599",
    "end": "3597520"
  },
  {
    "text": "producers using the new version can send messages to Consumers with the last version in other words my producer can",
    "start": "3597520",
    "end": "3605960"
  },
  {
    "text": "use can send a message with the new version right but I can still read a me but the consumers can be on the last",
    "start": "3605960",
    "end": "3612920"
  },
  {
    "text": "version and full it means effectively either side can be a version out and it",
    "start": "3612920",
    "end": "3620039"
  },
  {
    "text": "still works the transitive lines just mean not just last but all versions",
    "start": "3620039",
    "end": "3625400"
  },
  {
    "text": "right so it's to do with compatibility how do we use that right",
    "start": "3625400",
    "end": "3631160"
  },
  {
    "text": "so the idea is that the producer on the leftand side here says okay when I'm",
    "start": "3631160",
    "end": "3636400"
  },
  {
    "text": "going to do a write I will write and I will check basically the contents of my",
    "start": "3636400",
    "end": "3642000"
  },
  {
    "text": "right against the schema registry hopefully it's in my local cache so I don't actually have to call the schema",
    "start": "3642000",
    "end": "3648599"
  },
  {
    "text": "registry which could be down in theory right if not it doesn't exist i e I",
    "start": "3648599",
    "end": "3653960"
  },
  {
    "text": "would get it from the server if it doesn't exist on the server I can kind of create it and put it in the server as version one um and I can configure the",
    "start": "3653960",
    "end": "3660880"
  },
  {
    "text": "scheme registry to say what kind of compatibility backwards forwards Etc my",
    "start": "3660880",
    "end": "3666079"
  },
  {
    "text": "enforcing and it will throw an error if my attempt to produce doesn't match that",
    "start": "3666079",
    "end": "3671440"
  },
  {
    "text": "enforcement similarly when I can consume although typically we don't tend to do so much enforcement on consume I could",
    "start": "3671440",
    "end": "3677319"
  },
  {
    "text": "also choose to enforce that the messages I'm receiving uh match the scheme registry when CFA writes basic when you",
    "start": "3677319",
    "end": "3684400"
  },
  {
    "text": "want to write something that effectively uses the schem of registry the slight wrinkle is that your",
    "start": "3684400",
    "end": "3692520"
  },
  {
    "text": "value has a more complicated format cfar basically started to use this before it",
    "start": "3692520",
    "end": "3698160"
  },
  {
    "text": "had the notion of headers for records only had a value on a body had no",
    "start": "3698160",
    "end": "3703400"
  },
  {
    "text": "metadata so the problem is it needed somewhere to store schema ID so what it does is it takes the first five bytes of",
    "start": "3703400",
    "end": "3710039"
  },
  {
    "text": "your value it makes the first bite a magic bite which is the version number of the uh the the the the serialized",
    "start": "3710039",
    "end": "3717319"
  },
  {
    "text": "value at the minute it's always been zero and the next four bytes are the schemer ID and the remainder is your",
    "start": "3717319",
    "end": "3723520"
  },
  {
    "text": "data right so that means effectively what you need to end up doing is either",
    "start": "3723520",
    "end": "3729680"
  },
  {
    "text": "manipulating the bites of your value that you're sending to your message or using one of the CFA Seri serializers",
    "start": "3729680",
    "end": "3736480"
  },
  {
    "text": "well confence CI serializers so here what we're going to do is use the a",
    "start": "3736480",
    "end": "3742319"
  },
  {
    "text": "confluent Json serializer which under the hood uses Jason schema and Newton",
    "start": "3742319",
    "end": "3747400"
  },
  {
    "text": "soft Jason just to make you annoyed which means that you have to mark up your data for both Newton soft and",
    "start": "3747400",
    "end": "3754240"
  },
  {
    "text": "system text Jason if you want both of them which is really annoying um but it basically this will say use the Jason",
    "start": "3754240",
    "end": "3761720"
  },
  {
    "text": "serializer and that will handle that for you it will handle magic bites and everything else right okay it is also as",
    "start": "3761720",
    "end": "3770000"
  },
  {
    "text": "syn over async why because effectively um the Json serialized it is async but",
    "start": "3770000",
    "end": "3777520"
  },
  {
    "text": "producer. produces sync and they have to match okay uh schema registry I will do",
    "start": "3777520",
    "end": "3784760"
  },
  {
    "text": "a uh I will skip that demo just because of time but you can see the code it doesn't do do anything apart from",
    "start": "3784760",
    "end": "3791200"
  },
  {
    "text": "serialize it using the schema all right um okay we're at the end so let me just",
    "start": "3791200",
    "end": "3797480"
  },
  {
    "text": "finish some links all right so you can find the sample code there you can uh",
    "start": "3797480",
    "end": "3802640"
  },
  {
    "text": "run that last di for yourself all it will do is output the schema from the scheme registry to your command line for you um brighter is also linked there we",
    "start": "3802640",
    "end": "3810839"
  },
  {
    "text": "do handle cfra as a topic this presentation there a pdf version because I couldn't upload the PowerPoint file",
    "start": "3810839",
    "end": "3817160"
  },
  {
    "text": "it's too big in my GitHub repo there are topics we didn't have time to cover just a brief mention of them Kafka connect",
    "start": "3817160",
    "end": "3824480"
  },
  {
    "text": "Kafka connect comes from its data engineering days of CFA it's a way of hooking up a data source like a database",
    "start": "3824480",
    "end": "3830680"
  },
  {
    "text": "or another queue to turn it into a CFA stream and then effectively do the same with the other and turn a CFA stream",
    "start": "3830680",
    "end": "3837000"
  },
  {
    "text": "into a database right um K SQL is essentially the idea that if if if",
    "start": "3837000",
    "end": "3843079"
  },
  {
    "text": "streams are effectively data I can essentially take a Time window look at",
    "start": "3843079",
    "end": "3848520"
  },
  {
    "text": "the data and run SQL queries over it uh our experience is it kind of sucks uh",
    "start": "3848520",
    "end": "3854480"
  },
  {
    "text": "streams applications let you actually write applications that use those streams in a more reactive way there's a",
    "start": "3854480",
    "end": "3862640"
  },
  {
    "text": "standard library from for Java there are some C port of that library right and",
    "start": "3862640",
    "end": "3867680"
  },
  {
    "text": "there are alternatives to connect even confluent themselves have switched away from connect and case equal to Flink um",
    "start": "3867680",
    "end": "3874920"
  },
  {
    "text": "we really like benthos uh benthos is a really nice tool you go find at benthos",
    "start": "3874920",
    "end": "3880039"
  },
  {
    "text": "dodev it's a goib and it is what Kafka connect should have been all right",
    "start": "3880039",
    "end": "3886200"
  },
  {
    "text": "that's the end I'm sorry I overran slightly um uh an apologies for scheme",
    "start": "3886200",
    "end": "3892000"
  },
  {
    "text": "registry uh if anyone wants to hang around I can I'll do the SCH registry demo but if you want to go feel free all",
    "start": "3892000",
    "end": "3898960"
  },
  {
    "text": "right thanks",
    "start": "3898960",
    "end": "3901720"
  },
  {
    "text": "everybody",
    "start": "3904960",
    "end": "3907960"
  }
]