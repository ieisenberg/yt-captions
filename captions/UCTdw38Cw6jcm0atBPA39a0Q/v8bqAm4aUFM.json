[
  {
    "text": "in cape town in south africa um the story goes a traveler comes and um",
    "start": "1760",
    "end": "7919"
  },
  {
    "text": "that's that's a watchmaker in town and all his clocks and watches all show the same time",
    "start": "7919",
    "end": "13920"
  },
  {
    "text": "you know so he clearly like invests in keeping them and so the traveler asks um",
    "start": "13920",
    "end": "20160"
  },
  {
    "text": "so how do you know what time it is it's you know it's before the internet like by a couple hundred years maybe and uh",
    "start": "20160",
    "end": "26160"
  },
  {
    "text": "he said so it's easy up on the hill there's a fort and every day at noon they shoot a cannon and then i just set",
    "start": "26160",
    "end": "31359"
  },
  {
    "text": "my clocks to that then the traveler comes up to the fort and asks how do you know that it's noon well see i have",
    "start": "31359",
    "end": "37680"
  },
  {
    "text": "these binoculars and in town there's this uh watchmaker and i just look at the clock in his window and when it's 12",
    "start": "37680",
    "end": "43840"
  },
  {
    "text": "o'clock i'll fire the cannon so anyway that passed the time that was",
    "start": "43840",
    "end": "49920"
  },
  {
    "text": "a joke um so um but it was funny that when i when",
    "start": "49920",
    "end": "55680"
  },
  {
    "text": "i mentioned that to to my friend last week we met up in denmark he said oh oh",
    "start": "55680",
    "end": "62559"
  },
  {
    "text": "that's that's totally it it's called signal hill and it's um and it's in cape town it really exists",
    "start": "62559",
    "end": "69360"
  },
  {
    "text": "anyway and the canon is 200 years old or something",
    "start": "69360",
    "end": "74560"
  },
  {
    "text": "still accurate yes yeah so we are now at 11 40 according even to",
    "start": "74560",
    "end": "80560"
  },
  {
    "text": "um the watchmaker in in in town so um looks like i'm about to fire the cannon",
    "start": "80560",
    "end": "87680"
  },
  {
    "text": "uh again welcome and welcome back i'm uh mad torguson a masterwizen uh must",
    "start": "87680",
    "end": "95280"
  },
  {
    "text": "have any norwegians in here can you say it properly for me there you go yes",
    "start": "95280",
    "end": "102560"
  },
  {
    "text": "i'm not norwegian i i married into this name and she's not norwegian either but her gran her her great-grandfather was",
    "start": "102560",
    "end": "108479"
  },
  {
    "text": "so so that's where it comes from um so if you were here before um like",
    "start": "108479",
    "end": "113920"
  },
  {
    "text": "the last time i gave a talk in here which you know i do every every second",
    "start": "113920",
    "end": "118960"
  },
  {
    "text": "um time slot i give a talk here that's that's a deal um i i talked about",
    "start": "118960",
    "end": "124079"
  },
  {
    "text": "functional stuff in in c sharp over the years now we're going to talk about the c sharp that's about to come out in six",
    "start": "124079",
    "end": "129520"
  },
  {
    "text": "months time five months time uh c-sharp 11 which",
    "start": "129520",
    "end": "135680"
  },
  {
    "text": "you know you can you can kind of guess why it's called that and when we get to c-sharp 12 we fire the",
    "start": "135680",
    "end": "141680"
  },
  {
    "text": "um and um and uh we we're now shipping c sharp every year and we decided that okay this is all",
    "start": "141680",
    "end": "149440"
  },
  {
    "text": "driven.net you know they decided every year now we're modern kind of so so a",
    "start": "149440",
    "end": "154959"
  },
  {
    "text": "year really cadence for major versions seems about right um and we're gonna turn the crank use",
    "start": "154959",
    "end": "160319"
  },
  {
    "text": "new numbers for every one of those every other one of them is long-term support and all that and we're like okay",
    "start": "160319",
    "end": "167680"
  },
  {
    "text": "i guess c sharp has to do the same thing so um so that we can keep that you know",
    "start": "167680",
    "end": "173360"
  },
  {
    "text": "there's different version numbers that's done so so there's going to be dotnet 7 and c-sharp 11 but at least the delta is",
    "start": "173360",
    "end": "179040"
  },
  {
    "text": "now constant like it's of this you can always just add 4 to the net number and you get the c sharp number we're not all",
    "start": "179040",
    "end": "184640"
  },
  {
    "text": "that messy business from back when when they sometimes lined up and sometimes went out of whack and you know it's over",
    "start": "184640",
    "end": "189840"
  },
  {
    "text": "and we also stopped saying dot zero because there's only one time in the sevens that we ventured into in recent",
    "start": "189840",
    "end": "196400"
  },
  {
    "text": "memory that we ventured into dot something other than zero so now we just say c sharp 11.",
    "start": "196400",
    "end": "201920"
  },
  {
    "text": "anyway so so but with this freaking frequent um cadence",
    "start": "201920",
    "end": "207519"
  },
  {
    "text": "that more and more what happens is that we don't drop a whole feature set into one language version but we kind of",
    "start": "207519",
    "end": "212959"
  },
  {
    "text": "trickle it out over a few language versions this first one though is like a",
    "start": "212959",
    "end": "218879"
  },
  {
    "text": "full-fledged language feature being dropped in all at once so you see something up here that's",
    "start": "218879",
    "end": "223920"
  },
  {
    "text": "super simple it's it's a little function that takes an array of ints and adds them up and",
    "start": "223920",
    "end": "231360"
  },
  {
    "text": "returns the result okay it couldn't be simpler still though",
    "start": "231360",
    "end": "237680"
  },
  {
    "text": "up until now this numeric algorithm um with a plus in it and zero and so on",
    "start": "237680",
    "end": "245120"
  },
  {
    "text": "there has been no way to actually abstract or numeric algorithms and say",
    "start": "245120",
    "end": "252159"
  },
  {
    "text": "no good way anyway to say well um as long as it has a plus and you know an",
    "start": "252159",
    "end": "257440"
  },
  {
    "text": "additive identity and whatnot you know run this algorithm um and um that's always been a bit of a",
    "start": "257440",
    "end": "264479"
  },
  {
    "text": "pain point in c sharp and many other languages essentially we can only abstract over",
    "start": "264479",
    "end": "269680"
  },
  {
    "text": "instance members like with interfaces for instance and you know operators are not instance",
    "start": "269680",
    "end": "275280"
  },
  {
    "text": "members um so too bad up until now",
    "start": "275280",
    "end": "280400"
  },
  {
    "text": "so we'll do magic i'll say let's make this generic take a t instead",
    "start": "280400",
    "end": "286080"
  },
  {
    "text": "return a t um i have a t here as well let's have it",
    "start": "286080",
    "end": "292479"
  },
  {
    "text": "it's t time um that doesn't work okay it wasn't that easy um but",
    "start": "292479",
    "end": "299280"
  },
  {
    "text": "you know normally when you want to do something meaningful with your type parameters you you use constraints to to",
    "start": "299280",
    "end": "304639"
  },
  {
    "text": "constrain t to something that offers those meaningful things so where t something or other and",
    "start": "304639",
    "end": "311440"
  },
  {
    "text": "i kind of want to just say i number uh well if it's a number and i have to pass t back in we'll get we can get back",
    "start": "311440",
    "end": "318160"
  },
  {
    "text": "to that and you know what it kind of sort of works like what you're seeing all of a sudden",
    "start": "318160",
    "end": "324160"
  },
  {
    "text": "is that the plus actually doesn't have a red squiggle anymore which we all know means it works",
    "start": "324160",
    "end": "329440"
  },
  {
    "text": "um so uh so somehow this interface",
    "start": "329440",
    "end": "336240"
  },
  {
    "text": "guarantees the presence of a plus operator that's kind of cool okay it doesn't have zero but kasira really is a",
    "start": "336240",
    "end": "343919"
  },
  {
    "text": "real zero really is a an int right um but it has well it has additive identity it",
    "start": "343919",
    "end": "350479"
  },
  {
    "text": "also has zero actually as a static member on the type parameter like who'd ever seen that before in c",
    "start": "350479",
    "end": "358319"
  },
  {
    "text": "sharp at least so so all of a sudden this interface is bringing in static members a static property",
    "start": "358319",
    "end": "365039"
  },
  {
    "text": "zero and a static operator plus in other words interfaces can as",
    "start": "365039",
    "end": "370880"
  },
  {
    "text": "contracts can now specify static members that's kind of cool right",
    "start": "370880",
    "end": "376560"
  },
  {
    "text": "um and you know numbers isn't the the only scenario that you can imagine",
    "start": "376560",
    "end": "382720"
  },
  {
    "text": "for that but it's certainly a big one right it's because this whole operator thing has just essentially meant you",
    "start": "382720",
    "end": "388800"
  },
  {
    "text": "can't do like any advanced math algorithms into sharp in any nice",
    "start": "388800",
    "end": "394160"
  },
  {
    "text": "way like people have tried and it you know gets kind of ugly but this is good this is strongly typed and but but",
    "start": "394160",
    "end": "401039"
  },
  {
    "text": "but how does it work you know and clearly it's just it's same old type inference here there's an array",
    "start": "401039",
    "end": "406960"
  },
  {
    "text": "of events we infer int it probably seemingly then satisfies the",
    "start": "406960",
    "end": "412160"
  },
  {
    "text": "constraint so it implements i number of of itself i number of int um but what what is it that you sign up",
    "start": "412160",
    "end": "418240"
  },
  {
    "text": "for when you implement that so let's um let's go and have a look here's our number",
    "start": "418240",
    "end": "424560"
  },
  {
    "text": "it's a big type you know it's a big for an interface in particular it's very very big it's like i can do all the",
    "start": "424560",
    "end": "431039"
  },
  {
    "text": "number you know if if uh the um the built-in number types in c",
    "start": "431039",
    "end": "437520"
  },
  {
    "text": "sharp can do it then this interface has it okay so that's a that's a tall order to live up to",
    "start": "437520",
    "end": "443599"
  },
  {
    "text": "and not only does it have like a bunch of members on it but it also has a bunch of other interfaces that it implements",
    "start": "443599",
    "end": "450560"
  },
  {
    "text": "that bring that each you know brings in more members so it's a gigantic interface",
    "start": "450560",
    "end": "457680"
  },
  {
    "text": "but it means that once you once you do satisfy that then uh you know sky's the limit you can do all the number and if",
    "start": "457680",
    "end": "464800"
  },
  {
    "text": "that's your constraint then your generic numeric algorithms can do everything that you can do with operators and so on",
    "start": "464800",
    "end": "471440"
  },
  {
    "text": "in in c sharp with number types and t-shirts that's pretty great and now let's look at these members you",
    "start": "471440",
    "end": "477280"
  },
  {
    "text": "can see they say static abstract you know um it's pretty obvious right there",
    "start": "477280",
    "end": "483120"
  },
  {
    "text": "they're static and they're abstract they're like a contract they're not implemented um",
    "start": "483120",
    "end": "488800"
  },
  {
    "text": "and they're static so they're not about instance members they're about static members and",
    "start": "488800",
    "end": "494400"
  },
  {
    "text": "um the way you implement one is to have a you know a static",
    "start": "494400",
    "end": "501039"
  },
  {
    "text": "member declaration that would be an implicit implementation like you can do with instance members just static",
    "start": "501039",
    "end": "508080"
  },
  {
    "text": "so put your own up implement this interface yourself put your own operator implementations on it um that's fine you",
    "start": "508080",
    "end": "514000"
  },
  {
    "text": "can also explicitly implement if you don't want them to be surfaced on the implementing type just like just",
    "start": "514000",
    "end": "519279"
  },
  {
    "text": "like other things the only difference is that they're static in terms of of declaration anyway",
    "start": "519279",
    "end": "526240"
  },
  {
    "text": "uh we can get back to a little what what that means in other ways",
    "start": "526240",
    "end": "531920"
  },
  {
    "text": "so um but you notice that there are all these this is long",
    "start": "531920",
    "end": "537040"
  },
  {
    "text": "very very very long at least it's alphabetical like you have very sort of orderly need",
    "start": "537040",
    "end": "542560"
  },
  {
    "text": "people on the on the on the pcl team i think that put these things in alphabetical order or maybe it's",
    "start": "542560",
    "end": "548080"
  },
  {
    "text": "actually just visual studio that does that sorting when it shows from metadata i don't know but so you saw the you saw i addition",
    "start": "548080",
    "end": "555360"
  },
  {
    "text": "operators there you know there wasn't actually an addition operator down here but that's because it's being brought in",
    "start": "555360",
    "end": "561040"
  },
  {
    "text": "from a much simpler interface that we can go and have a look at that really just is i have a plus operator and there",
    "start": "561040",
    "end": "567680"
  },
  {
    "text": "are and that now you realize why there are so many interfaces because there's an interface for each one of these and",
    "start": "567680",
    "end": "572720"
  },
  {
    "text": "then that lets you sort of be fine-grained about uh your constraints if you are",
    "start": "572720",
    "end": "578320"
  },
  {
    "text": "writing a generic numeric algorithm that just needs plus and zero well you can",
    "start": "578320",
    "end": "583920"
  },
  {
    "text": "just bring in two you wouldn't have to do i number like i did you could just bring in um i addition operators and uh i",
    "start": "583920",
    "end": "590880"
  },
  {
    "text": "additive identity and and then you have the things you need",
    "start": "590880",
    "end": "596000"
  },
  {
    "text": "uh so that way because not all when you think about this this we we're making we're offering",
    "start": "596000",
    "end": "602560"
  },
  {
    "text": "this set of interfaces in the core libraries so that all our numeric types can implement them but everyone else can",
    "start": "602560",
    "end": "609600"
  },
  {
    "text": "implement them too and if you're building types that use numerics they don't necessarily have all the bells and",
    "start": "609600",
    "end": "616240"
  },
  {
    "text": "whistles of a full line number right so so you you want to be able to say for instance if you're building a matrix",
    "start": "616240",
    "end": "621360"
  },
  {
    "text": "implementation um you want to be able to multiply matrices great so you'll",
    "start": "621360",
    "end": "627279"
  },
  {
    "text": "you'll implement you know i mult multiplication operator and i addition operator but a bunch of things",
    "start": "627279",
    "end": "634000"
  },
  {
    "text": "that won't make sense on a matrix and also in order to implement those you",
    "start": "634000",
    "end": "639440"
  },
  {
    "text": "can make your matrix itself generic and just say you know where t some other numeric operators that are",
    "start": "639440",
    "end": "645519"
  },
  {
    "text": "the ones that you need in order to implement the matrix level operators so you get this fine-grained control of",
    "start": "645519",
    "end": "651200"
  },
  {
    "text": "like just requiring what you need and using what you have so um so that that's why the the interfaces",
    "start": "651200",
    "end": "657680"
  },
  {
    "text": "are designed like that but this is yeah this is what um this is what um",
    "start": "657680",
    "end": "663760"
  },
  {
    "text": "an abstract operator looks like it's it's actually not very surprising when it comes down to it",
    "start": "663760",
    "end": "669759"
  },
  {
    "text": "so in when you want to use these members though that is where things get interesting so",
    "start": "670640",
    "end": "676800"
  },
  {
    "text": "back to our program i am using the members the the the static abstract members of the interface",
    "start": "676800",
    "end": "683519"
  },
  {
    "text": "not directly on the interface right because the thing about it like when you have um",
    "start": "683519",
    "end": "688800"
  },
  {
    "text": "when you have an instance member like i have something of type um object",
    "start": "688800",
    "end": "694640"
  },
  {
    "text": "and i can call tostring on it and underneath there's an actual object that might be a derived",
    "start": "694640",
    "end": "701120"
  },
  {
    "text": "class that might not be instantiated from object itself it might be string or int or whatever and it",
    "start": "701120",
    "end": "707120"
  },
  {
    "text": "knows its own virtual implementation because there's an object there to hold on to like what am i actually going to",
    "start": "707120",
    "end": "712639"
  },
  {
    "text": "do when he says that but for static members it's different there's no instance that's a whole point",
    "start": "712639",
    "end": "717839"
  },
  {
    "text": "right so so we can't just walk up we can't just have a variable that's typed i number of t and then go",
    "start": "717839",
    "end": "725360"
  },
  {
    "text": "up and and call as um a static abstract member on it",
    "start": "725360",
    "end": "730399"
  },
  {
    "text": "because where would it find the implementation it doesn't know which implementation of the interface there's no instance to ask",
    "start": "730399",
    "end": "736880"
  },
  {
    "text": "so that is where this becomes quite different and how it works this is the way that we get sort of an instance",
    "start": "736880",
    "end": "742560"
  },
  {
    "text": "where we get a representation of the concrete type that we want to get the implementation for",
    "start": "742560",
    "end": "748160"
  },
  {
    "text": "is with generics so by taking a t and constraining it to i number of t",
    "start": "748160",
    "end": "756160"
  },
  {
    "text": "i am saying there's a type i'm calling it t",
    "start": "756160",
    "end": "762720"
  },
  {
    "text": "and it does implement this interface and it does have concrete implementations like if you try to pass a type parameter",
    "start": "762720",
    "end": "769200"
  },
  {
    "text": "that doesn't we're just like sorry can't do that it has to have concrete implementations",
    "start": "769200",
    "end": "776160"
  },
  {
    "text": "and and that's how we get the concrete implementations through the type parameter which means that you can only",
    "start": "776160",
    "end": "782880"
  },
  {
    "text": "access these static members on a generic type through a generic type",
    "start": "782880",
    "end": "787920"
  },
  {
    "text": "through a type parameter you can't do it directly i mean you can go walk up to the concrete objects and call the plus",
    "start": "787920",
    "end": "794320"
  },
  {
    "text": "operator there but you're not calling the interface member then you're just calling the static member like always if",
    "start": "794320",
    "end": "800240"
  },
  {
    "text": "you want to access the interface member you have to do it on a type parameter constrained by the interface that is how",
    "start": "800240",
    "end": "805839"
  },
  {
    "text": "you get at this functionality so it's very closely tied with generics questions",
    "start": "805839",
    "end": "813560"
  },
  {
    "text": "does that imply that if you call with uh if you call this method once with uh",
    "start": "820240",
    "end": "826800"
  },
  {
    "text": "with double and once with float it will the compiler will generate two versions um",
    "start": "826800",
    "end": "832639"
  },
  {
    "text": "yeah um so the answer to that is the same as it is for generics today",
    "start": "832639",
    "end": "839040"
  },
  {
    "text": "which is that the compiler the c-sharp compiler generates just one version which is generic",
    "start": "839040",
    "end": "845519"
  },
  {
    "text": "um in to il and then the runtime typically if you're running on a jitted",
    "start": "845519",
    "end": "850639"
  },
  {
    "text": "runtime which most of us are still the runtime will generate if it's these value types it will",
    "start": "850639",
    "end": "856160"
  },
  {
    "text": "generate specialized versions for those value types and a shared one for reference types so that's that happens to be the",
    "start": "856160",
    "end": "861920"
  },
  {
    "text": "implementation detail behind it um so actually yeah we should i mean i",
    "start": "861920",
    "end": "867120"
  },
  {
    "text": "didn't even show you that you know how you know i can i can make it i can put a floating or a double in there and now",
    "start": "867120",
    "end": "873360"
  },
  {
    "text": "they only in the other end convert to double and the type inference now says that it's an array of doubles and",
    "start": "873360",
    "end": "878639"
  },
  {
    "text": "everything is still compiled and if you don't believe me we can actually even run it",
    "start": "878639",
    "end": "883839"
  },
  {
    "text": "always a little scary i'm not a fan of running code but um occasionally you got to do it",
    "start": "883839",
    "end": "890160"
  },
  {
    "text": "there you go i'm sure you you all can verify that this is the right result",
    "start": "890160",
    "end": "895680"
  },
  {
    "text": "um by careful like um you know middle school math",
    "start": "895680",
    "end": "900800"
  },
  {
    "text": "so um so that's sort of like that's the the core of it",
    "start": "900800",
    "end": "907519"
  },
  {
    "text": "you put abstract static memories on your interfaces you constrain type parameters to those",
    "start": "907519",
    "end": "913519"
  },
  {
    "text": "interfaces now you can use the static members including operators",
    "start": "913519",
    "end": "919600"
  },
  {
    "text": "in on on things that are typed t or around or you know on type t um",
    "start": "919600",
    "end": "927279"
  },
  {
    "text": "now you might be wondering why is it what is it with this type argument on the uh on the interface itself what does",
    "start": "927279",
    "end": "933279"
  },
  {
    "text": "it need that for like why why do you need to have a type argument in order to have a plus operator",
    "start": "933279",
    "end": "939040"
  },
  {
    "text": "um well again let's go have a look um the reason is",
    "start": "939040",
    "end": "944880"
  },
  {
    "text": "that let's say we didn't it actually takes three the plus of the plus interface actually takes three right one for the",
    "start": "944880",
    "end": "950639"
  },
  {
    "text": "left uh upper end one for the right and once for the result um so it's it's parameterized over there",
    "start": "950639",
    "end": "957440"
  },
  {
    "text": "but why does it have one for for itself so to speak um the the reason is that we don't want the",
    "start": "957440",
    "end": "964800"
  },
  {
    "text": "results to be just interfaces right we don't want to just say well it takes two i numbers or two i add i addition",
    "start": "964800",
    "end": "972160"
  },
  {
    "text": "operators things and returns an idition operator because then when you get the result you've lost the the fact that you",
    "start": "972160",
    "end": "978240"
  },
  {
    "text": "you knew very well what you know what type it was and now it's it's it's been delighted you want to use generics to",
    "start": "978240",
    "end": "985440"
  },
  {
    "text": "to pass through uh the the strong types that you're operating on so you don't lose",
    "start": "985440",
    "end": "991120"
  },
  {
    "text": "um type strength if you will so therefore even this one has three but if you look if you look at i number um",
    "start": "991120",
    "end": "998560"
  },
  {
    "text": "which i just um which i just went away from that we can go back to um it it",
    "start": "998560",
    "end": "1004320"
  },
  {
    "text": "only has the one and that is the that is the the t self so um and that and if you look at all the uh",
    "start": "1004320",
    "end": "1010800"
  },
  {
    "text": "the um all the implementations here t-self is there all over the place because it's the thing that describes",
    "start": "1010800",
    "end": "1017199"
  },
  {
    "text": "the actual type that will eventually implement this interface right the int",
    "start": "1017199",
    "end": "1022320"
  },
  {
    "text": "the matrix of something that this and that it's it's a representation of that type",
    "start": "1022320",
    "end": "1028079"
  },
  {
    "text": "inside of the interface itself so therefore it needs to be passed in when you implement the interface say hey i'm",
    "start": "1028079",
    "end": "1033520"
  },
  {
    "text": "implementing you and this is me the and uh and now you can refer to me",
    "start": "1033520",
    "end": "1039600"
  },
  {
    "text": "with this type parameter inside of your implementations inside of your signatures that's why you see self and input and on",
    "start": "1039600",
    "end": "1046558"
  },
  {
    "text": "output here all over the place that is why the plus in our program",
    "start": "1046559",
    "end": "1052640"
  },
  {
    "text": "uh actually it produces a t um as the output as well that can be",
    "start": "1052640",
    "end": "1058559"
  },
  {
    "text": "added to the t here that can then be returned as an s t to the to the caller that's",
    "start": "1058559",
    "end": "1064480"
  },
  {
    "text": "how the type strength gets in there yes",
    "start": "1064480",
    "end": "1069360"
  },
  {
    "text": "is this backwards compatible with all the runtimes no all the runtimes not at all",
    "start": "1070400",
    "end": "1076559"
  },
  {
    "text": "so you're bringing up a super interesting aspect of this which is that up until like while we were still",
    "start": "1076559",
    "end": "1082559"
  },
  {
    "text": "doing.net framework windows only the runtime was something we couldn't touch because it was distributed as part",
    "start": "1082559",
    "end": "1089919"
  },
  {
    "text": "of windows we couldn't we couldn't know or influence what runtimes were there on",
    "start": "1089919",
    "end": "1095520"
  },
  {
    "text": "on people's machines and so that turned out to be a big impediment because that meant we",
    "start": "1095520",
    "end": "1102080"
  },
  {
    "text": "couldn't rely on the presence of new run-time features in our language features so we just didn't make new ones",
    "start": "1102080",
    "end": "1108000"
  },
  {
    "text": "um and um and then when we moved over to core we said well",
    "start": "1108000",
    "end": "1113440"
  },
  {
    "text": "a we don't care about uh new language versions being",
    "start": "1113440",
    "end": "1118640"
  },
  {
    "text": "um being runnable on old runtimes and b we can now",
    "start": "1118640",
    "end": "1125280"
  },
  {
    "text": "change the runtimes so that or add new features to them so that things can be",
    "start": "1125280",
    "end": "1130559"
  },
  {
    "text": "implemented properly in the runtime like all the generics in c sharp are in the runtime and if we did this one outside",
    "start": "1130559",
    "end": "1136400"
  },
  {
    "text": "of the runtime it would be different and weird and like it would be a very bad it would be an",
    "start": "1136400",
    "end": "1141919"
  },
  {
    "text": "impedance mismatch so we kind of have to do it to do this feature um and um",
    "start": "1141919",
    "end": "1148400"
  },
  {
    "text": "and we are fine with just saying that well if you use this feature",
    "start": "1148400",
    "end": "1153440"
  },
  {
    "text": "and you're targeting an older runtime which is going to give you a compiler error all the new runtime features",
    "start": "1153440",
    "end": "1159200"
  },
  {
    "text": "have feature flags in the in the bcl that the compiler is looking for saying",
    "start": "1159200",
    "end": "1165280"
  },
  {
    "text": "does this runtime support static static abstracts and",
    "start": "1165280",
    "end": "1170799"
  },
  {
    "text": "if if that feature flag isn't there it's going to say well sorry you're targeting a runtime is tool this",
    "start": "1170799",
    "end": "1176320"
  },
  {
    "text": "feature's not going to work so that's the new compatibility story um",
    "start": "1176320",
    "end": "1181679"
  },
  {
    "text": "that's the price that people have to pay for for getting actual runtime features is",
    "start": "1181679",
    "end": "1187120"
  },
  {
    "text": "that if they don't have them they don't have them you know in a way it's kind of yeah it it sounds",
    "start": "1187120",
    "end": "1193039"
  },
  {
    "text": "kind of all right when you say it like that um so um",
    "start": "1193039",
    "end": "1198160"
  },
  {
    "text": "so uh yeah that's how that works um",
    "start": "1198160",
    "end": "1203679"
  },
  {
    "text": "i there's one more thing i want to so i you get the idea any more questions i'm",
    "start": "1203840",
    "end": "1209360"
  },
  {
    "text": "happy to take them um at least one or two more um yes",
    "start": "1209360",
    "end": "1216440"
  },
  {
    "text": "um yeah i mean the the language doesn't the language doesn't try to impose",
    "start": "1235919",
    "end": "1242400"
  },
  {
    "text": "a numeric semantics in any way beyond i mean it does a little bit today by saying well if you have a plus operator",
    "start": "1242400",
    "end": "1249360"
  },
  {
    "text": "it has to like some of the types have to be the enclosing type and some haven't have to be the same or whatnot they're",
    "start": "1249360",
    "end": "1255440"
  },
  {
    "text": "like there's small restrictions and operators that have always been in the language but beyond that we don't say oh",
    "start": "1255440",
    "end": "1262159"
  },
  {
    "text": "we don't try to ensure that you do proper math with your math operators um",
    "start": "1262159",
    "end": "1267360"
  },
  {
    "text": "we never did and in in a sense just because you're implementing an interface now we we're",
    "start": "1267360",
    "end": "1273600"
  },
  {
    "text": "not trying to be more harsh about that as long as the you know the signature fits we're like ah that's plus you know",
    "start": "1273600",
    "end": "1280000"
  },
  {
    "text": "even if it breaks all the rules um and um that's just like",
    "start": "1280000",
    "end": "1285600"
  },
  {
    "text": "that's what we can do uh the there there is like one",
    "start": "1285600",
    "end": "1292159"
  },
  {
    "text": "sort of like a get out of jail thing i use sometimes which is that i mean these interfaces are in the bcl",
    "start": "1292159",
    "end": "1299840"
  },
  {
    "text": "and so will be widely distributed you could write a roslin analyzer that finds implementations of the interfaces and",
    "start": "1299840",
    "end": "1307280"
  },
  {
    "text": "tells people that does not look right you know this view if you if you're smart enough you",
    "start": "1307280",
    "end": "1313520"
  },
  {
    "text": "can draw the code to as much detail as you like with the rosslyn analyzer we did not do that we",
    "start": "1313520",
    "end": "1319520"
  },
  {
    "text": "i'm not sure we even thought about it and i think it probably will be hard for some of the operators to say you know it",
    "start": "1319520",
    "end": "1324720"
  },
  {
    "text": "looks this looks like a good implementation or this looks like a bad one i think testing is probably better for that hey but you could write your testing",
    "start": "1324720",
    "end": "1330559"
  },
  {
    "text": "code generically actually you could hey write a test suite for uh for uh math implementations um",
    "start": "1330559",
    "end": "1338000"
  },
  {
    "text": "that's completely generic and then when somebody comes with a new concrete type that implements it you just run it all and say hey hey sorry but you had you",
    "start": "1338000",
    "end": "1344320"
  },
  {
    "text": "identity was not an identity yeah you screwed up and so actually that would be possible as well",
    "start": "1344320",
    "end": "1349760"
  },
  {
    "text": "so there are several possible answers to it but the the honest answer is we have not done anything in that direction",
    "start": "1349760",
    "end": "1356640"
  },
  {
    "text": "okay i want to say one more thing about the language feature i've been focusing a lot on math because that was really the",
    "start": "1356640",
    "end": "1361919"
  },
  {
    "text": "driving scenario that was the thing that made us do the hard work and it is hard work to put a new",
    "start": "1361919",
    "end": "1368400"
  },
  {
    "text": "abstraction mechanism into the runtime uh that was one where we felt it was worth it uh but",
    "start": "1368400",
    "end": "1374880"
  },
  {
    "text": "that said the language feature itself has nothing to do with math it just has to do with abstract static members and",
    "start": "1374880",
    "end": "1381039"
  },
  {
    "text": "interfaces and there are actually there are actually many design patterns",
    "start": "1381039",
    "end": "1386720"
  },
  {
    "text": "that you can imagine doing more simply using this feature one of them is actually let's go to",
    "start": "1386720",
    "end": "1392000"
  },
  {
    "text": "i-number one of them is is factories so actually one of these interfaces up",
    "start": "1392000",
    "end": "1398400"
  },
  {
    "text": "here is a factory um i i'm just going to go through the alphabet here quickly actually not so",
    "start": "1398400",
    "end": "1405360"
  },
  {
    "text": "quickly crap okay grab it and run there we go i i am i",
    "start": "1405360",
    "end": "1411919"
  },
  {
    "text": "parcelable there we are i parsable um let's go and have a look at that one for a bit and it's a little com complex",
    "start": "1411919",
    "end": "1417760"
  },
  {
    "text": "because you know it has two methods um and it takes an i format provider but really what it's doing is it's a it's",
    "start": "1417760",
    "end": "1424559"
  },
  {
    "text": "prescribing a static method that will take a string and create one",
    "start": "1424559",
    "end": "1430240"
  },
  {
    "text": "of these guys one of the t-cells type right so it is a factory",
    "start": "1430240",
    "end": "1435440"
  },
  {
    "text": "if your type has this implement this interface then it is able to produce its an instance of itself",
    "start": "1435440",
    "end": "1442960"
  },
  {
    "text": "from a string right so now we can abstract over a factory that means this could not have been done with an instance method",
    "start": "1442960",
    "end": "1448480"
  },
  {
    "text": "because the whole point is you don't have an instance yet you want to make one and now you can have abstract static factories you can take",
    "start": "1448480",
    "end": "1455840"
  },
  {
    "text": "like remember all those like so people who've been going down the rabbit hole with factories they have these parallel",
    "start": "1455840",
    "end": "1461520"
  },
  {
    "text": "hierarchies of factory objects to create the hierarchies of actual objects and it's like a mess people do it a lot in",
    "start": "1461520",
    "end": "1467520"
  },
  {
    "text": "java they don't do it so much in c-share for some reason but um but you see it and you understand why people do it you don't have to do that anymore now",
    "start": "1467520",
    "end": "1473760"
  },
  {
    "text": "because you can just just have um you know um an abstract factory on the",
    "start": "1473760",
    "end": "1480400"
  },
  {
    "text": "root a root interface and um and um then everything will need to",
    "start": "1480400",
    "end": "1487600"
  },
  {
    "text": "implement that and that means you can create them abstractly you can abstract over the fact",
    "start": "1487600",
    "end": "1493200"
  },
  {
    "text": "that they have a factory um so you both have abstract factory and static factory in the same go static",
    "start": "1493200",
    "end": "1499919"
  },
  {
    "text": "abstract factory i think that's very cool and and um",
    "start": "1499919",
    "end": "1505039"
  },
  {
    "text": "we already are finding places where this pattern or other of the original design patterns can sort of be improved upon",
    "start": "1505039",
    "end": "1511360"
  },
  {
    "text": "even in our own code we we have an example where we are using this for the strategy pattern already in some implementation detail and",
    "start": "1511360",
    "end": "1518000"
  },
  {
    "text": "so i think it opens up a new world that we haven't even really explored very much of ways that you can abstract that can",
    "start": "1518000",
    "end": "1524480"
  },
  {
    "text": "reduce complexity of your code where you really want that",
    "start": "1524480",
    "end": "1531039"
  },
  {
    "text": "unified abstraction of things but they don't naturally show up as instance members so you can't do it now you can",
    "start": "1531039",
    "end": "1537200"
  },
  {
    "text": "okay so that's the i talked about it for a long time but it is the biggest feature and this is about how much time i i",
    "start": "1537200",
    "end": "1543600"
  },
  {
    "text": "expected to spend on it because it's that is like the one that is okay since generics this is the first",
    "start": "1543600",
    "end": "1550240"
  },
  {
    "text": "time we added a new abstraction mechanism to the runtime so okay this is big um and it wasn't it was a bit hard",
    "start": "1550240",
    "end": "1557760"
  },
  {
    "text": "so i want to spend some time on it to sort of justif you know it's really important for you",
    "start": "1557760",
    "end": "1564240"
  },
  {
    "text": "so with that um let's leave those behind um go and and take a look at our numeric algorithm",
    "start": "1564240",
    "end": "1571120"
  },
  {
    "text": "here and then look at a different aspect of it it's very imperative you know it's old style have an",
    "start": "1571120",
    "end": "1576320"
  },
  {
    "text": "accumulator zoom around a loop add the stuff um and then return it super imperative",
    "start": "1576320",
    "end": "1582840"
  },
  {
    "text": "um we could try to do it more functionally this is kind of like also a capstone on the",
    "start": "1582840",
    "end": "1589120"
  },
  {
    "text": "previous talk then it's like where did pat where did we go with patterns so one way we could also implement this would be",
    "start": "1589120",
    "end": "1596240"
  },
  {
    "text": "via pattern matching um using the new list patterns that are in c sharp in c sharp 11. so i'm actually going to just",
    "start": "1596240",
    "end": "1603120"
  },
  {
    "text": "do it as i'm i'm going to be brave and i'm going to start out as an expression body function here it's going to be",
    "start": "1603120",
    "end": "1608640"
  },
  {
    "text": "no statements will be used in this you know it's completely organic",
    "start": "1608640",
    "end": "1614159"
  },
  {
    "text": "so let's take the values that's what we have and let's switch on",
    "start": "1614159",
    "end": "1619200"
  },
  {
    "text": "them into a switch expression boom and put a semicolon and this is our",
    "start": "1619200",
    "end": "1626320"
  },
  {
    "text": "implementation and now um what we're going to do is we're going to take this list this list like thing like",
    "start": "1626320",
    "end": "1632720"
  },
  {
    "text": "list patterns work on anything that has sort of the right surface area um",
    "start": "1632720",
    "end": "1638240"
  },
  {
    "text": "and we can talk about what that is if you're interested in drilling in but uh and then we're gonna just uh look at the structure of the list using essentially",
    "start": "1638240",
    "end": "1645120"
  },
  {
    "text": "list destructuring with list patterns so the first case uh the sort of base case is hey there weren't any values okay",
    "start": "1645120",
    "end": "1652880"
  },
  {
    "text": "well then the result is probably you know it's probably not multiplicative identity actually it's probably like",
    "start": "1652880",
    "end": "1659279"
  },
  {
    "text": "it's probably zero or you know additive identity would probably do the same thing so that's one case in the pattern",
    "start": "1659279",
    "end": "1665520"
  },
  {
    "text": "that's an empty list pattern or a non-empty list pattern it could be so now we're putting patterns inside for",
    "start": "1665520",
    "end": "1671840"
  },
  {
    "text": "each element in the list so i could say var t here for the for the first t",
    "start": "1671840",
    "end": "1677760"
  },
  {
    "text": "and i could you know put more and if we want to start simple we can just say okay let's deal with the case where",
    "start": "1677760",
    "end": "1683120"
  },
  {
    "text": "there's one element in the list so this will match only a single element array um in that case you know yeah you would",
    "start": "1683120",
    "end": "1690000"
  },
  {
    "text": "just return t that's the sum of t yeah okay so far so good and we could keep adding",
    "start": "1690000",
    "end": "1695039"
  },
  {
    "text": "two three four but you know we're never gonna get all the way um",
    "start": "1695039",
    "end": "1700320"
  },
  {
    "text": "you're not gonna like the feature very much if that's how you do things so so we're gonna have to i mean we're",
    "start": "1700320",
    "end": "1706480"
  },
  {
    "text": "gonna have to go all the way into functional land and go recursive here that's the only",
    "start": "1706480",
    "end": "1712240"
  },
  {
    "text": "and that means we're going to have to be able to grab like a rest like get the rest of the list",
    "start": "1712240",
    "end": "1718399"
  },
  {
    "text": "so i can pad and match on the first element maybe and then i can have uh the rest just dot dot if i don't care",
    "start": "1718399",
    "end": "1725520"
  },
  {
    "text": "about it or dot dot var rest or tease um",
    "start": "1725520",
    "end": "1731200"
  },
  {
    "text": "and um and that will then give me like this gives me an a t but this gives me an array of t that it gives me back the",
    "start": "1731200",
    "end": "1737919"
  },
  {
    "text": "same kind of thing that that i came in with so here be dragons from a performance",
    "start": "1737919",
    "end": "1744080"
  },
  {
    "text": "standpoint because it's going to give us a new array that's almost as big as the previous one so oh",
    "start": "1744080",
    "end": "1751520"
  },
  {
    "text": "um but we can fix that in a little bit um but um but so this this one and actually it",
    "start": "1751520",
    "end": "1757840"
  },
  {
    "text": "doesn't have to be the last it you can have things after you could have t2 here uh of rt2 um and by the way these things",
    "start": "1757840",
    "end": "1765360"
  },
  {
    "text": "can be other patterns as well i'm just using var patterns to just extract the values without uh doing any pattern matching on them",
    "start": "1765360",
    "end": "1771760"
  },
  {
    "text": "uh so this is totally fine they'll just grab whatever is between the elements in front and the elements in back so you",
    "start": "1771760",
    "end": "1776799"
  },
  {
    "text": "can only have one dot dot section in there um but you get to decide where i'm not gonna i'm not gonna have something",
    "start": "1776799",
    "end": "1782720"
  },
  {
    "text": "after i just wanted to mention that it's not like restricted like that um and if we have that then what we",
    "start": "1782720",
    "end": "1788000"
  },
  {
    "text": "should be doing is we should be adding the t to the add all",
    "start": "1788000",
    "end": "1793279"
  },
  {
    "text": "of the t's and uh call recursively and now we get like a lot of reallocation and copying",
    "start": "1793279",
    "end": "1799039"
  },
  {
    "text": "going on and so you know there'll be dragons the reason why is that the um",
    "start": "1799039",
    "end": "1805360"
  },
  {
    "text": "the way that this actually the dot dot thing here works like you can imagine what what is it actually doing to those",
    "start": "1805360",
    "end": "1811840"
  },
  {
    "text": "list like things when it is getting the values you know here obviously it's indexing",
    "start": "1811840",
    "end": "1817279"
  },
  {
    "text": "right this is index zero if i had one out here it would be index hat one or hat zero you know the uh if",
    "start": "1817279",
    "end": "1823919"
  },
  {
    "text": "you have looked at the hat syntax or indices so that's you know that's just indexing um and to get these it is using um",
    "start": "1823919",
    "end": "1832799"
  },
  {
    "text": "the ability of that um type to slice so if it's sliceable",
    "start": "1832799",
    "end": "1838320"
  },
  {
    "text": "and we already have defined that in a previous version of the language like you can have an index so that is you",
    "start": "1838320",
    "end": "1843840"
  },
  {
    "text": "know x dot dot y and then it will slice those elements out or throw if they",
    "start": "1843840",
    "end": "1849120"
  },
  {
    "text": "weren't if if it was out of range so we already have a notion of sliceability in the language you may or may not have",
    "start": "1849120",
    "end": "1854399"
  },
  {
    "text": "seen but just trust me on that and each type gets to define its own what does it mean to slice me",
    "start": "1854399",
    "end": "1860240"
  },
  {
    "text": "and and the sort of design principle for slice is that it will return the same kind of thing",
    "start": "1860240",
    "end": "1866080"
  },
  {
    "text": "that that that came in that you're calling it on so if we want to do this more",
    "start": "1866080",
    "end": "1871840"
  },
  {
    "text": "efficiently we should we should slice we should have a type that is more that",
    "start": "1871840",
    "end": "1877279"
  },
  {
    "text": "is cheaper to slice that's not array and and we have uh",
    "start": "1877279",
    "end": "1882640"
  },
  {
    "text": "this is not used very much in in top level code but for performance reasons we have a type called span of t we also",
    "start": "1882640",
    "end": "1890000"
  },
  {
    "text": "have a read-only span of t if you don't want access which is really like a view on a segment of of memory for instance a",
    "start": "1890000",
    "end": "1897120"
  },
  {
    "text": "part of an array and and slicing for spans is super simple because it's really just a start",
    "start": "1897120",
    "end": "1902159"
  },
  {
    "text": "and a length so you just you know we move the start and reduce the length to create the next one and there and the",
    "start": "1902159",
    "end": "1908799"
  },
  {
    "text": "value type so we don't even allocate that little that little uh structure so so and",
    "start": "1908799",
    "end": "1915120"
  },
  {
    "text": "and the nice thing about um",
    "start": "1915120",
    "end": "1919640"
  },
  {
    "text": "i don't know oh this is one of the this is because i'm in a preview i've run into this before um don't worry about it",
    "start": "1922799",
    "end": "1928240"
  },
  {
    "text": "it'll still compile right let's just check now let's just check no",
    "start": "1928240",
    "end": "1934799"
  },
  {
    "text": "what is my problem you can't infer uh",
    "start": "1934799",
    "end": "1940960"
  },
  {
    "text": "you know maybe because oh i don't know never mind we'll just pass it in oh double",
    "start": "1940960",
    "end": "1946640"
  },
  {
    "text": "and i'll yeah sorry about that it's probably simple um but uh i'm on stage",
    "start": "1946640",
    "end": "1951679"
  },
  {
    "text": "so i can't figure it out um so um",
    "start": "1951679",
    "end": "1956799"
  },
  {
    "text": "uh the the nice thing about span is that arrays have a simple conversion to them",
    "start": "1956799",
    "end": "1962480"
  },
  {
    "text": "a simple implicit conversion from an array to a span that covers the whole array so that that would be a way to make it efficient",
    "start": "1962480",
    "end": "1968320"
  },
  {
    "text": "so um the way that in a functional language this would typically be very efficient is that",
    "start": "1968320",
    "end": "1976960"
  },
  {
    "text": "they typically use linked lists and so if you're careful to slice off from the front",
    "start": "1976960",
    "end": "1982159"
  },
  {
    "text": "uh and oftentimes you know list patterns would only allow you to slice off from the front then there's already like a",
    "start": "1982159",
    "end": "1989200"
  },
  {
    "text": "list you know it's already a linked list of the rest that they can reuse",
    "start": "1989200",
    "end": "1994720"
  },
  {
    "text": "but here you get more expressiveness in terms of where you slice but you also have to be more careful in terms of performance",
    "start": "1994720",
    "end": "2001120"
  },
  {
    "text": "okay and of course uh patterns patterns eagerly check that you cover",
    "start": "2001120",
    "end": "2008480"
  },
  {
    "text": "all the cases and that you you don't do uh stuff that can't be reached so if we so until we had that one the the there",
    "start": "2008480",
    "end": "2015760"
  },
  {
    "text": "was a warning on switch that would tell you like you weren't covering lists longer than one",
    "start": "2015760",
    "end": "2021360"
  },
  {
    "text": "and if i took this one which covers all lists including",
    "start": "2021360",
    "end": "2027440"
  },
  {
    "text": "the one with one element and i move it up then we get an error on this one saying hey the one element case has already",
    "start": "2027440",
    "end": "2034399"
  },
  {
    "text": "been fully covered so so this so you can't match it again here",
    "start": "2034399",
    "end": "2040000"
  },
  {
    "text": "so these are this is this is standard functionality of patterns already but it also just to show that it works well for",
    "start": "2040000",
    "end": "2046000"
  },
  {
    "text": "list patterns as well so we can actually just delete that one because it's handled very nicely here",
    "start": "2046000",
    "end": "2052320"
  },
  {
    "text": "so that's list patterns um there's a question or two there",
    "start": "2052320",
    "end": "2059240"
  },
  {
    "text": "not the span why wouldn't it be possible to specify instead of fire in ts",
    "start": "2060000",
    "end": "2065919"
  },
  {
    "text": "have either array segment or span of t there and then let the compiler",
    "start": "2065919",
    "end": "2071760"
  },
  {
    "text": "take an ass span behind",
    "start": "2071760",
    "end": "2075040"
  },
  {
    "text": "um [Music] it's possible we could do something like that yeah i would i kind of have to see",
    "start": "2078159",
    "end": "2083280"
  },
  {
    "text": "it worked out a little bit to see if that will be possible again and yeah an option is to have tool",
    "start": "2083280",
    "end": "2091200"
  },
  {
    "text": "support for telling you hey it looks like you're doing a lot of slicing on arrays",
    "start": "2091200",
    "end": "2096800"
  },
  {
    "text": "maybe you want to fix the code like this and have it be like an ide",
    "start": "2096800",
    "end": "2102880"
  },
  {
    "text": "gesture a warning or a suggestion um but that's definitely yeah typically",
    "start": "2102880",
    "end": "2108560"
  },
  {
    "text": "when they're dragons like that it's good to have some way for either the compiler or the tooling just to help you avoid",
    "start": "2108560",
    "end": "2115440"
  },
  {
    "text": "the pitfalls uh one more take one more",
    "start": "2115440",
    "end": "2120880"
  },
  {
    "text": "why should you prefer to in this case i mean it's in",
    "start": "2126000",
    "end": "2131040"
  },
  {
    "text": "this case it's maybe overkill pattern matching just",
    "start": "2131040",
    "end": "2136480"
  },
  {
    "text": "generally tends to lead to more readable code also as you saw it gives you more",
    "start": "2136480",
    "end": "2143040"
  },
  {
    "text": "checking that your logic is so so uh compared to what you had before which is",
    "start": "2143040",
    "end": "2148240"
  },
  {
    "text": "very imperative it's hard to like tell am i off by one am i you know doing all the right things and pattern matching",
    "start": "2148240",
    "end": "2155359"
  },
  {
    "text": "when it gave you the it gives you the completeness and subsumption checking there uh it's just keeping you more",
    "start": "2155359",
    "end": "2161920"
  },
  {
    "text": "the compiler is helping you more with correctness also this combines with all the other",
    "start": "2161920",
    "end": "2168640"
  },
  {
    "text": "kinds of patterns like all the recursive kinds of patterns where you can have patterns within patterns",
    "start": "2168640",
    "end": "2173920"
  },
  {
    "text": "and so it's kind of a place where if i'm using patterns to destructure",
    "start": "2173920",
    "end": "2179280"
  },
  {
    "text": "something a structure and i get to a collection kind of thing and i want to do collection like",
    "start": "2179280",
    "end": "2184400"
  },
  {
    "text": "destructuring on it i kind of run out of steam now and i have to take the i have to grab it and take it outside of the",
    "start": "2184400",
    "end": "2190000"
  },
  {
    "text": "pattern matching context that i'm already in and this lets you stay in pattern matching mode",
    "start": "2190000",
    "end": "2196000"
  },
  {
    "text": "when when you get to those situations so those are some of the some of the arguments we'll take okay we'll take one",
    "start": "2196000",
    "end": "2201359"
  },
  {
    "text": "more yes",
    "start": "2201359",
    "end": "2206880"
  },
  {
    "text": "the the the the the point is this will give you stack overflow at one point uh at some point",
    "start": "2206880",
    "end": "2212240"
  },
  {
    "text": "and that is also true like i'm not say essentially i'm not really here to advocate uh recursive algorithms",
    "start": "2212240",
    "end": "2219520"
  },
  {
    "text": "um it was just like a small a small example that is familiar to to functional people",
    "start": "2219520",
    "end": "2226000"
  },
  {
    "text": "but yeah we do we are not able to do tail call optimization on things like this and and promise that and make sure",
    "start": "2226000",
    "end": "2231760"
  },
  {
    "text": "that the stack doesn't overflow this wouldn't even necessarily be a tail this isn't even a tail call and so you're",
    "start": "2231760",
    "end": "2237440"
  },
  {
    "text": "like um and if they're exception handling so we don't we don't do that kind of we're not",
    "start": "2237440",
    "end": "2242480"
  },
  {
    "text": "that functional and so you have deep recursion you have deep stacks that's that's the c-sharp way and",
    "start": "2242480",
    "end": "2250320"
  },
  {
    "text": "if you're if you have if you have a domain where you might go very deep",
    "start": "2250320",
    "end": "2255440"
  },
  {
    "text": "you'll run out of stack now oftentimes the places where recursion is good in c sharp they're",
    "start": "2255440",
    "end": "2260720"
  },
  {
    "text": "typically where you're recursing over some data structure and then you have much more of a handle on how big how big",
    "start": "2260720",
    "end": "2265920"
  },
  {
    "text": "it can get that you know your data structure is not probably not going to be all that much bigger than the stack or you know",
    "start": "2265920",
    "end": "2272000"
  },
  {
    "text": "it will be more on the same order of magnitude so so there it makes more sense okay",
    "start": "2272000",
    "end": "2277920"
  },
  {
    "text": "um so that's list patterns for you let's switch gears and go talk about",
    "start": "2277920",
    "end": "2284000"
  },
  {
    "text": "persons again like i can't remember the last time i talked about new c-sharp features and didn't",
    "start": "2284000",
    "end": "2289119"
  },
  {
    "text": "have a person class so it's kind of um it's kind of traditional this time though i'm going to change it into a",
    "start": "2289119",
    "end": "2295359"
  },
  {
    "text": "a person struct just you know shake it up there you go christmas truck um",
    "start": "2295359",
    "end": "2300480"
  },
  {
    "text": "you notice that that's fine and um for people who have worked with many people don't work with structs but",
    "start": "2300480",
    "end": "2306400"
  },
  {
    "text": "if you work with structs and you look at this for a bit you'll be like why is it fine actually that would be an error here in c sharp 10.",
    "start": "2306400",
    "end": "2312640"
  },
  {
    "text": "the reason is that since since the dawn of time for structs we have required",
    "start": "2312640",
    "end": "2318480"
  },
  {
    "text": "constructors to initialize everything like if you have a constructor instruct it must initialize all the fields",
    "start": "2318480",
    "end": "2326640"
  },
  {
    "text": "and we meticulously check in the compiler and say yep you didn't initialize that one not",
    "start": "2326640",
    "end": "2332000"
  },
  {
    "text": "in a way that i can see anyway so error and um and we're like well",
    "start": "2332000",
    "end": "2338400"
  },
  {
    "text": "why why are we doing that again um maybe we're trying to",
    "start": "2338400",
    "end": "2343520"
  },
  {
    "text": "not bulk zero initialize things for efficiency maybe",
    "start": "2343520",
    "end": "2348640"
  },
  {
    "text": "but couldn't the compiler if it's figured out that you're not initializing it couldn't just go and zero out that one instead of telling us that we're",
    "start": "2348640",
    "end": "2355520"
  },
  {
    "text": "dumb you know couldn't he just do it for us i'm like that must be a deep reason we went and talked to anders heilsberg he's the like",
    "start": "2355520",
    "end": "2362240"
  },
  {
    "text": "oldest c-sharp designer around and like what is the deep reason anders what was the wisdom behind this he's like i don't",
    "start": "2362240",
    "end": "2368880"
  },
  {
    "text": "know i know it doesn't seem important",
    "start": "2368880",
    "end": "2374800"
  },
  {
    "text": "okay we'll do it we'll we'll we'll fix it and this is and this is important now",
    "start": "2374800",
    "end": "2380160"
  },
  {
    "text": "because we've done many more things recently to make structs more versatile we made them able in c sharp 10 they're",
    "start": "2380160",
    "end": "2386240"
  },
  {
    "text": "able to be records they're able to have primary constructors and all kinds of things where we keep running up against",
    "start": "2386240",
    "end": "2391839"
  },
  {
    "text": "this limitation you keep doing something and you get this error and you have to have to do stupid stuff we let you have",
    "start": "2391839",
    "end": "2398160"
  },
  {
    "text": "initial field initializes instructs now and again once you have a field initialized but you don't have it on everything then",
    "start": "2398160",
    "end": "2404240"
  },
  {
    "text": "you're like well then you get slapped for all the ones that you're not interested let's just fix this instead instead of",
    "start": "2404240",
    "end": "2410319"
  },
  {
    "text": "chasing all these weird corners of the language and we do have actually if if for some",
    "start": "2410319",
    "end": "2416000"
  },
  {
    "text": "reason you really like pain you like this error i mean some people",
    "start": "2416000",
    "end": "2421920"
  },
  {
    "text": "like i i want to make sure the compiler doesn't do anything for me because it takes it wastes valuable time or",
    "start": "2421920",
    "end": "2427280"
  },
  {
    "text": "something and i know what i'm doing famous last words um we actually do",
    "start": "2427280",
    "end": "2432319"
  },
  {
    "text": "produce a diagnostic in the in the in the wrestling computer in the",
    "start": "2432319",
    "end": "2437599"
  },
  {
    "text": "compilation tree and you can and it has a diagnostic number like cs",
    "start": "2437599",
    "end": "2443440"
  },
  {
    "text": "some number that we produce whenever you do not initialize everything manually then we do initialize it for you we still",
    "start": "2443440",
    "end": "2449520"
  },
  {
    "text": "produce a diagnostic it's just not a warning error like it's just an info and but you can go make it an error if",
    "start": "2449520",
    "end": "2454800"
  },
  {
    "text": "you want to so because it exists because the compiler puts it in you can raise that level to warning error and you can",
    "start": "2454800",
    "end": "2460640"
  },
  {
    "text": "get back your pain because we weren't entirely sure people i mean some people",
    "start": "2460640",
    "end": "2466720"
  },
  {
    "text": "there might be reasons we hadn't thought about let me just put it so we're back to classes though um",
    "start": "2466720",
    "end": "2473280"
  },
  {
    "text": "um we we did a few more things uh around class like for the last",
    "start": "2473280",
    "end": "2479440"
  },
  {
    "text": "um for the last couple of years we've tried to make we tried to be serious about",
    "start": "2479440",
    "end": "2486319"
  },
  {
    "text": "immutability and value semantics for classes as well where you can have like still have class hierarchies and that",
    "start": "2486319",
    "end": "2493359"
  },
  {
    "text": "and the sort of class level expressiveness still having to be reference types so they can be recursive",
    "start": "2493359",
    "end": "2498400"
  },
  {
    "text": "yet have value semantics as opposed to object semantics and that's again sort of the functional vein of i actually",
    "start": "2498400",
    "end": "2504720"
  },
  {
    "text": "want to work with immutable data and and the language has been fighting on every every step of the way and",
    "start": "2504720",
    "end": "2510800"
  },
  {
    "text": "and uh we are trying to remove some of that pain of of when you're trying to go in those directions in various ways over",
    "start": "2510800",
    "end": "2517119"
  },
  {
    "text": "the years one is records which we've done nothing new with records since teacher 11 so i'm not going to go there but",
    "start": "2517119",
    "end": "2522880"
  },
  {
    "text": "um i mean the pain of having to have constructors is is uh is an obvious one right and",
    "start": "2522880",
    "end": "2530079"
  },
  {
    "text": "and an alternative to having construct let me just go and and comment out my code",
    "start": "2530079",
    "end": "2536079"
  },
  {
    "text": "here so i so that i can um use top level statements over here instead um",
    "start": "2536079",
    "end": "2542960"
  },
  {
    "text": "the uh you know if i if i want to say var mats equals new",
    "start": "2542960",
    "end": "2548839"
  },
  {
    "text": "maths because it's immutable i in the past i would have had to use a",
    "start": "2548839",
    "end": "2553920"
  },
  {
    "text": "constructor i couldn't use an object initializer and but the but the constructors are just",
    "start": "2553920",
    "end": "2560319"
  },
  {
    "text": "really super painful i have 2f2 because the middle name is optional but optional",
    "start": "2560319",
    "end": "2565599"
  },
  {
    "text": "parameters have to go on the end but i don't want the middle name to be at the end and the last names are in the middle i mean so so i kind of i have to have",
    "start": "2565599",
    "end": "2571760"
  },
  {
    "text": "this overload and now okay now i want to create class student or employee or whatever and it's a person i haven't",
    "start": "2571760",
    "end": "2578400"
  },
  {
    "text": "even done anything yet and i'm already in debt right oh yeah you have yeah you've gotta you have those constructors you gotta deal with that so it's like",
    "start": "2578400",
    "end": "2584640"
  },
  {
    "text": "constructors are painful in many ways if you have hierarchies or several overloads and sometimes you just want",
    "start": "2584640",
    "end": "2591040"
  },
  {
    "text": "things to be easier and object initializers are a way for that to be easier to just live without live without",
    "start": "2591040",
    "end": "2596880"
  },
  {
    "text": "constructors but they lack certain things and in uh what was it c sharp",
    "start": "2596880",
    "end": "2602160"
  },
  {
    "text": "nine uh like so one of the things they lack is",
    "start": "2602160",
    "end": "2607200"
  },
  {
    "text": "or they used to lack was that if i have an immutable data structure you know they they rely on mutation so if i say",
    "start": "2607200",
    "end": "2613599"
  },
  {
    "text": "first name name oh newman's",
    "start": "2613599",
    "end": "2618800"
  },
  {
    "text": "i'm not a class yet and you know 25 years microsoft they turn you into a class but i'm not i'm not that guy",
    "start": "2618800",
    "end": "2625760"
  },
  {
    "text": "first name equals meds let's just stick with that um you know um",
    "start": "2625760",
    "end": "2631440"
  },
  {
    "text": "it says you can't because uh sorry it's uh it's uh actually getter only and then we said let's add",
    "start": "2631440",
    "end": "2637760"
  },
  {
    "text": "this kind of setter that only works in object initialize it's calling a knitter and so you might have seen this all this",
    "start": "2637760",
    "end": "2643680"
  },
  {
    "text": "before because that's not new but it's just part of the story that i wanna i wanna get us to there um",
    "start": "2643680",
    "end": "2649119"
  },
  {
    "text": "and and that kind of took care of the initializing immutable things with",
    "start": "2649119",
    "end": "2654800"
  },
  {
    "text": "object initializes the next thing though is that i don't want people to not",
    "start": "2654800",
    "end": "2660480"
  },
  {
    "text": "give a first name and a last name in this object model at least i know that it's not a good object model for names i should you know remember to say that but",
    "start": "2660480",
    "end": "2667440"
  },
  {
    "text": "you know this one can you know it's okay if they don't initialize middle name but i want them to initialize first and last name i",
    "start": "2667440",
    "end": "2672800"
  },
  {
    "text": "want to force them to do so i could do that with a constructor i was doing that before there was no constructor that didn't so there you know so that's one",
    "start": "2672800",
    "end": "2680480"
  },
  {
    "text": "place where object initializers still kind of have a gap of expressiveness and that kind of interferes in an annoying",
    "start": "2680480",
    "end": "2687040"
  },
  {
    "text": "way with nullable reference types as well because you're seeing these warnings here on first name and last name and what those warnings are saying",
    "start": "2687040",
    "end": "2693520"
  },
  {
    "text": "is you're not initializing this non-nullable property which means it might be null",
    "start": "2693520",
    "end": "2699200"
  },
  {
    "text": "when the object is initialized yeah but i want my i want people to do",
    "start": "2699200",
    "end": "2704319"
  },
  {
    "text": "it themselves yeah but you can't be sure they will so i'm gonna give you a warning",
    "start": "2704319",
    "end": "2710000"
  },
  {
    "text": "um now what we really need is a way to ensure that they will like we're gonna we're",
    "start": "2710000",
    "end": "2715520"
  },
  {
    "text": "gonna give you a hammer to say this is required this is required you can't not",
    "start": "2715520",
    "end": "2721760"
  },
  {
    "text": "you can't not do it and now the warning goes away because it's like yeah you're making them do it",
    "start": "2721760",
    "end": "2726960"
  },
  {
    "text": "i'm good i'm i'm good now that this will not be null because when if they go and put null in they will get the warning",
    "start": "2726960",
    "end": "2732640"
  },
  {
    "text": "and it'll be their problem you know so this fixes the nullable problem and this also just fixes the general problem of",
    "start": "2732640",
    "end": "2738640"
  },
  {
    "text": "i couldn't force i can force it that difference in expressiveness so now i made last name required but i didn't do",
    "start": "2738640",
    "end": "2745040"
  },
  {
    "text": "it i get an error everything's good it's just hunky-dory you can't do this in the previews yet i think because it just came out in the",
    "start": "2745040",
    "end": "2751520"
  },
  {
    "text": "internal preview that i'm using that um but um but soon soon or maybe you can't was was",
    "start": "2751520",
    "end": "2758560"
  },
  {
    "text": "there somebody here you you it is out in the public preview",
    "start": "2758560",
    "end": "2763359"
  },
  {
    "text": "yes the attribute that we use under the hood",
    "start": "2763839",
    "end": "2769440"
  },
  {
    "text": "to put the required on things isn't in there so but but you can cheat and go and so",
    "start": "2769440",
    "end": "2775119"
  },
  {
    "text": "i've done that there's like a a file in here that has a declaration of that attribute and that's why it works here",
    "start": "2775119",
    "end": "2780640"
  },
  {
    "text": "so this is how it's going to work um and um and of course then yeah",
    "start": "2780640",
    "end": "2786560"
  },
  {
    "text": "when i actually get a last name um [Music] it's going to be happy and these are",
    "start": "2786560",
    "end": "2792640"
  },
  {
    "text": "inherited obviously so the cumulative down through inheritance hierarchies",
    "start": "2792640",
    "end": "2798960"
  },
  {
    "text": "if you have a constructor that is like i don't want it to do it here um i it's a good example it's a copy",
    "start": "2798960",
    "end": "2805680"
  },
  {
    "text": "constructor i'm literally i'm you know i have an immutable data type i want to actually create the next record from ads",
    "start": "2805680",
    "end": "2812480"
  },
  {
    "text": "like um and i want everything to be the same except what someone optionally chooses",
    "start": "2812480",
    "end": "2818400"
  },
  {
    "text": "to put in an object initializer because they explicitly want to change it",
    "start": "2818400",
    "end": "2823440"
  },
  {
    "text": "that shouldn't that constructor shouldn't force everybody to put everything right it shouldn't force them",
    "start": "2823440",
    "end": "2829359"
  },
  {
    "text": "to call me mads again that the constructor just did that so there's a there we talked for a long",
    "start": "2829359",
    "end": "2835280"
  },
  {
    "text": "while about what is what should be the granularity of opt-out mechanisms for that and we in the end we just ended on",
    "start": "2835280",
    "end": "2841280"
  },
  {
    "text": "an attribute which is also not there and i can't show you because i can't remember what it is and i forgot to declare it um but there's an attribute",
    "start": "2841280",
    "end": "2847599"
  },
  {
    "text": "that you can put on a constructor to say this one is exempt from requiredness completely so it's all or nothing you",
    "start": "2847599",
    "end": "2853920"
  },
  {
    "text": "get all the required and none of the required and none and none of the required is no worse than today it's",
    "start": "2853920",
    "end": "2860640"
  },
  {
    "text": "just um that's the fallback if you if you know what you're doing",
    "start": "2860640",
    "end": "2866079"
  },
  {
    "text": "and so uh so we figured that was the right balance but if if we need more granularity in the future hey there's a",
    "start": "2866079",
    "end": "2871520"
  },
  {
    "text": "next version coming next year and you know we can always make it better now we can granularly improve features",
    "start": "2871520",
    "end": "2878319"
  },
  {
    "text": "we can take the the the cautious approach at first and then and then when we find out hey",
    "start": "2878319",
    "end": "2884559"
  },
  {
    "text": "we may need a little more here it's actually worth it many customers reporting then we'll just do it",
    "start": "2884559",
    "end": "2891440"
  },
  {
    "text": "okay so that was required there's one more pro oh yep one question",
    "start": "2891440",
    "end": "2896559"
  },
  {
    "text": "thank you so much you're welcome",
    "start": "2896559",
    "end": "2900680"
  },
  {
    "text": "this does not change what constructors get generated now",
    "start": "2905680",
    "end": "2912318"
  },
  {
    "text": "and it also it doesn't the required restriction isn't isn't maintained through reflection we talked",
    "start": "2913280",
    "end": "2919280"
  },
  {
    "text": "about like how can we make that actually a strong requirement that even works through reflection like when you have a",
    "start": "2919280",
    "end": "2924480"
  },
  {
    "text": "serialized or something using reflection to create the object and we're like actually read only isn't even enforced",
    "start": "2924480",
    "end": "2930000"
  },
  {
    "text": "during you know through reflection so why should this be it's like yeah all bets are off when you go that",
    "start": "2930000",
    "end": "2935920"
  },
  {
    "text": "in that direction um four constructors that",
    "start": "2935920",
    "end": "2942160"
  },
  {
    "text": "people generate for specific purposes like like that they could slap that attribute on if they if they want to",
    "start": "2942160",
    "end": "2950160"
  },
  {
    "text": "not require object initializes to be used",
    "start": "2950160",
    "end": "2956079"
  },
  {
    "text": "um let's take a couple of questions now and i do have two more features to go um",
    "start": "2956079",
    "end": "2961200"
  },
  {
    "text": "can we take them after all right i'm i'm gonna just stay here while everybody else goes and grabs all",
    "start": "2961200",
    "end": "2966880"
  },
  {
    "text": "the good stuff at lunch or we can walk up together or something but yeah i want to get to the last two features apologies",
    "start": "2966880",
    "end": "2973680"
  },
  {
    "text": "one that i want to show quickly is i you know it turned out auto properties",
    "start": "2973680",
    "end": "2979119"
  },
  {
    "text": "turn out to be really awesome because very often you really just want a backing field and you want to read and write from the vacuum field and done",
    "start": "2979119",
    "end": "2985680"
  },
  {
    "text": "but the moment you want to do just a tiny little bit thing more you fall completely off the cliff and you have to",
    "start": "2985680",
    "end": "2990800"
  },
  {
    "text": "declare your own backing field and you have to implement all both of your accessors yourself like there's no middle ground and we are introducing the",
    "start": "2990800",
    "end": "2996800"
  },
  {
    "text": "middle ground and what and we do that in form of field access that you can access",
    "start": "2996800",
    "end": "3002880"
  },
  {
    "text": "the backing field from an auto property using the innovatively named keyword field",
    "start": "3002880",
    "end": "3008880"
  },
  {
    "text": "um and this is not in my prototype yet so there's going to be squiggles but um",
    "start": "3008880",
    "end": "3015040"
  },
  {
    "text": "this is what it's going to look like so so what the set or init accessor is generated to do is just to",
    "start": "3015040",
    "end": "3021359"
  },
  {
    "text": "take the um you know the backing field which we can now name field and escape out of all",
    "start": "3021359",
    "end": "3027359"
  },
  {
    "text": "those suggestion uh suggestions for completion equals value right that's just what it",
    "start": "3027359",
    "end": "3032480"
  },
  {
    "text": "does uh if but what if i wanted to just you know trim it yeah i don't want white",
    "start": "3032480",
    "end": "3037680"
  },
  {
    "text": "space accidentally in my first name now you know i would fall off the cliff before but instead i can implement the",
    "start": "3037680",
    "end": "3044480"
  },
  {
    "text": "emitter manually just by referencing the backing field with the keyword field i don't have to use the getter or to",
    "start": "3044480",
    "end": "3051200"
  },
  {
    "text": "implement the getter myself i don't have to to declare the the backing field so um it's more of like an incremental",
    "start": "3051200",
    "end": "3058720"
  },
  {
    "text": "um incremental step instead of falling all the way off of the cliff and um and we do the right things if you",
    "start": "3058720",
    "end": "3064880"
  },
  {
    "text": "know that give questions about does it do the right things yes it does the right things",
    "start": "3064880",
    "end": "3070720"
  },
  {
    "text": "so that's coming um i don't know what preview but everything else i've shown so far you can actually go try",
    "start": "3070720",
    "end": "3078000"
  },
  {
    "text": "just using the bs previews but um but not this one yet",
    "start": "3078000",
    "end": "3083839"
  },
  {
    "text": "here's another one um uh oh actually it's not here because i'm going to show it in i'm going to show",
    "start": "3083839",
    "end": "3089599"
  },
  {
    "text": "this in in my favorite browser",
    "start": "3089599",
    "end": "3094318"
  },
  {
    "text": "using um sharblab which if you don't know sharblab it's awesome it's a",
    "start": "3095599",
    "end": "3100640"
  },
  {
    "text": "community uh run website that that offers up all the latest branches",
    "start": "3100640",
    "end": "3107680"
  },
  {
    "text": "of the c-sharp compiler um you know in an interactive way that you can play with it",
    "start": "3107680",
    "end": "3113760"
  },
  {
    "text": "and i'm just using main because we did merge this feature um but in here is a lovely menu of like all the stuff we",
    "start": "3113760",
    "end": "3120000"
  },
  {
    "text": "ever did um some of it is broken but um that's the risk you have it means",
    "start": "3120000",
    "end": "3126000"
  },
  {
    "text": "even if a feature is not out you can still use it here and maybe i think possibly the um the the field access thing that i showed",
    "start": "3126000",
    "end": "3133200"
  },
  {
    "text": "before you might actually be able to go in and try it here but i haven't tried recently what i want to talk about is raw string",
    "start": "3133200",
    "end": "3139280"
  },
  {
    "text": "literals so there's a bunch of times where you just want to have some code in a string",
    "start": "3139280",
    "end": "3145280"
  },
  {
    "text": "in your code you know and it can be c sharp code oftentimes it's um oftentimes it's like um",
    "start": "3145280",
    "end": "3152800"
  },
  {
    "text": "are you also distracted it's kind of it's kind of cute it's cute do you have it do you have a cat in your",
    "start": "3152800",
    "end": "3158640"
  },
  {
    "text": "pocket or is it just a phone no it's yeah",
    "start": "3158640",
    "end": "3164640"
  },
  {
    "text": "okay nice it's very gentle i love it um",
    "start": "3164640",
    "end": "3169839"
  },
  {
    "text": "you know code can just be xml or json or whatever the main thing the main problem",
    "start": "3169839",
    "end": "3175520"
  },
  {
    "text": "about it is it'll have a lot of characters and the way what i mean by code is something that has characters in it that's going to",
    "start": "3175520",
    "end": "3181599"
  },
  {
    "text": "confuse be confused string literals like backslashes like that look like escapes but they really really just want them",
    "start": "3181599",
    "end": "3188079"
  },
  {
    "text": "and the and the pain of converting things so that they will end up being the right thing",
    "start": "3188079",
    "end": "3193520"
  },
  {
    "text": "uh after the literal husband it's just like everybody knows this and even like vibrating strings don't fully solve this",
    "start": "3193520",
    "end": "3199680"
  },
  {
    "text": "so we wanted to create a new yet another form of string level and c sharp",
    "start": "3199680",
    "end": "3205200"
  },
  {
    "text": "that is that has no escapes period there are no escapes you cannot escape",
    "start": "3205200",
    "end": "3210960"
  },
  {
    "text": "um and the way we do that is that we we make you put at least three double quotes",
    "start": "3210960",
    "end": "3218480"
  },
  {
    "text": "on either end and now you can see the backslashes they they show up correctly they're no longer escapes so actually i want to remove",
    "start": "3218480",
    "end": "3225520"
  },
  {
    "text": "them because they don't actually belong in the content so now what's in there is just the content that i want no escapes",
    "start": "3225520",
    "end": "3232720"
  },
  {
    "text": "that's nice well okay somebody's like what if i have three quotes",
    "start": "3232720",
    "end": "3239839"
  },
  {
    "text": "in my content oh you got me oh what am i gonna do",
    "start": "3239839",
    "end": "3247040"
  },
  {
    "text": "i'm gonna put four what if i have 16 quotes",
    "start": "3247040",
    "end": "3254000"
  },
  {
    "text": "i'm gonna put 17. you can always win it",
    "start": "3254000",
    "end": "3259680"
  },
  {
    "text": "it might not look nice by the time you win but the only reason you would have 16",
    "start": "3259680",
    "end": "3266800"
  },
  {
    "text": "double quotes in a in a sequence in in you know in content is because you want to",
    "start": "3266800",
    "end": "3273920"
  },
  {
    "text": "capture a demo of this feature in in you know as a string you know actually i have this i have",
    "start": "3273920",
    "end": "3280480"
  },
  {
    "text": "this as a constant string in code somewhere and it you know it has to use it has to use four quotes because it has",
    "start": "3280480",
    "end": "3286640"
  },
  {
    "text": "the triple quotes in there um so uh usually three is enough but you have",
    "start": "3286640",
    "end": "3292640"
  },
  {
    "text": "in you you have an escape that's not an escape if you know what i mean um these can be multi-line uh and if",
    "start": "3292640",
    "end": "3300160"
  },
  {
    "text": "they're multi-line you have to like have a new line both before and after the content",
    "start": "3300160",
    "end": "3305440"
  },
  {
    "text": "and that new line is not part of the content that is part of the delimiters",
    "start": "3305440",
    "end": "3310480"
  },
  {
    "text": "um so the content here is still like it has no new lines in it um but it's now multi-line it's one",
    "start": "3310480",
    "end": "3317200"
  },
  {
    "text": "multi-line but we can start you know breaking it over lines and",
    "start": "3317200",
    "end": "3322799"
  },
  {
    "text": "well let's do one there as well hello there we go",
    "start": "3322799",
    "end": "3328480"
  },
  {
    "text": "um and um you might notice that well you just told me that we just get the raw content but",
    "start": "3328480",
    "end": "3335520"
  },
  {
    "text": "i'm noticing that some white space is going missing here yeah what what's with that are you like",
    "start": "3335520",
    "end": "3341119"
  },
  {
    "text": "are you cheating here at what's going on so what what is it that",
    "start": "3341119",
    "end": "3347040"
  },
  {
    "text": "let me yeah i mean happens would actually probably want to indent this and and a little bit and what you see is that that indentation gets picked",
    "start": "3347040",
    "end": "3352640"
  },
  {
    "text": "up so what is going on here like what what what white spaces are in and what white spaces are out what's the deal",
    "start": "3352640",
    "end": "3358480"
  },
  {
    "text": "here the the reason for it is obvious is like you it's really it really it's really",
    "start": "3358480",
    "end": "3363839"
  },
  {
    "text": "annoying when you're quoting multi-line things and they flush completely to your left margin right",
    "start": "3363839",
    "end": "3369119"
  },
  {
    "text": "and all your code flow is up there and then something bad it takes all the attention and it's even red it you know",
    "start": "3369119",
    "end": "3374720"
  },
  {
    "text": "and then just strangle around it takes all the attention by being out it's like just looks stupid and so it's really nice if you can avoid",
    "start": "3374720",
    "end": "3381440"
  },
  {
    "text": "that by just having the white space clipped off but what if i don't want it clipped off well we got",
    "start": "3381440",
    "end": "3387760"
  },
  {
    "text": "something for you as well what's that more quotes no no no we're done with that",
    "start": "3387760",
    "end": "3394240"
  },
  {
    "text": "but um but the the way we do it is that the the number of white spaces before the end quotes",
    "start": "3394240",
    "end": "3402240"
  },
  {
    "text": "is what determines how much get cut gets cut off so if i move this to the left you see",
    "start": "3402240",
    "end": "3407520"
  },
  {
    "text": "that i get one white space in there and there and there if i want the full thing i just flush the end uh quotes all the",
    "start": "3407520",
    "end": "3415040"
  },
  {
    "text": "way to the left and i get all the white space does it work the other way interesting",
    "start": "3415040",
    "end": "3420160"
  },
  {
    "text": "let's try that's a good thing about interactive stuff here let's go one over ah no sorry you can't do that",
    "start": "3420160",
    "end": "3426240"
  },
  {
    "text": "no no it's like what are you doing",
    "start": "3426240",
    "end": "3430359"
  },
  {
    "text": "exercise for the reader um",
    "start": "3434160",
    "end": "3439119"
  },
  {
    "text": "good one so [Music] now",
    "start": "3439200",
    "end": "3444319"
  },
  {
    "text": "that quoting is great having like actual good literal raw literals is great but what if you do want to interpolate just",
    "start": "3444319",
    "end": "3450720"
  },
  {
    "text": "a little bit we want to yeah we still want to stick some content in there like uh can i interpolate these",
    "start": "3450720",
    "end": "3456559"
  },
  {
    "text": "you know if because if because no escapes right so if i put something in here that's like three plus four that's",
    "start": "3456559",
    "end": "3462720"
  },
  {
    "text": "just content you know just content what if i want to interpolate well i can do that",
    "start": "3462720",
    "end": "3468960"
  },
  {
    "text": "let's put a dollar sign and now it's interpolated now the the",
    "start": "3468960",
    "end": "3474160"
  },
  {
    "text": "single brackets the limit a whole and the expression inside gets evaluated and to strength back in",
    "start": "3474160",
    "end": "3479839"
  },
  {
    "text": "awesome well what if i want interpolation and curlies",
    "start": "3479839",
    "end": "3487558"
  },
  {
    "text": "have you been at this talk before now they're now their content again",
    "start": "3492160",
    "end": "3498640"
  },
  {
    "text": "because it takes the dollar signs number of dollar signs is the number of curlies it takes before it's instant",
    "start": "3498640",
    "end": "3505280"
  },
  {
    "text": "interpolation and now it's a little ridiculous but it is actually like it's super useful now we can do this",
    "start": "3505280",
    "end": "3513599"
  },
  {
    "text": "i have a problem like getting it too to click in the right place here um now we can do this and it's interpolated",
    "start": "3513599",
    "end": "3520799"
  },
  {
    "text": "but if you only have single ones you know the content or if you want your single ones around",
    "start": "3520799",
    "end": "3528319"
  },
  {
    "text": "the interpolation that's fine too and then you get you know single quotes around that if you want double quotes",
    "start": "3528319",
    "end": "3534240"
  },
  {
    "text": "around there you know what to do add a dollar sign use three for the",
    "start": "3534240",
    "end": "3540240"
  },
  {
    "text": "interpolation hall and then you can put your two and they're not an interpolation hole anymore so you can still win",
    "start": "3540240",
    "end": "3547920"
  },
  {
    "text": "and i mean i'm i'm making it a little hilarious here",
    "start": "3549920",
    "end": "3555359"
  },
  {
    "text": "and you're like you can see how this can get a little ridiculous but the important thing is",
    "start": "3555359",
    "end": "3561040"
  },
  {
    "text": "we are not forcing you to change things when you want to quote them",
    "start": "3561040",
    "end": "3566799"
  },
  {
    "text": "we're just maybe making you put a lot of quotes around them so you don't have to go and",
    "start": "3566799",
    "end": "3572000"
  },
  {
    "text": "find those escapes and you don't have to to read the fine print of your output and",
    "start": "3572000",
    "end": "3577359"
  },
  {
    "text": "we're still allowing interpolation even when you want curlies like you should we are not falling for the temptation to",
    "start": "3577359",
    "end": "3583520"
  },
  {
    "text": "put escapes back in even when it's even when it's interpolation so hopefully this is one that is this",
    "start": "3583520",
    "end": "3589839"
  },
  {
    "text": "one for the ages this is the one this is the one that is going to let you quote all the things",
    "start": "3589839",
    "end": "3595440"
  },
  {
    "text": "uh forevermore that's the planning and that was the last feature i was going to show today",
    "start": "3595440",
    "end": "3600480"
  },
  {
    "text": "which is lucky because we're actually we're at the end of time i can take one question",
    "start": "3600480",
    "end": "3605920"
  },
  {
    "text": "yep what what sorry",
    "start": "3605920",
    "end": "3612000"
  },
  {
    "text": "what if you want the string to start with a double quote um",
    "start": "3612079",
    "end": "3616799"
  },
  {
    "text": "you use the multi-line version of it even if it's just a single line because then the quotes",
    "start": "3618240",
    "end": "3624480"
  },
  {
    "text": "on the on the top line here are part of the delimiter and the quotes on the next line are the first part of the content",
    "start": "3624480",
    "end": "3629839"
  },
  {
    "text": "that is why we don't use the new line as part of the content you know the content starts",
    "start": "3629839",
    "end": "3636160"
  },
  {
    "text": "here and ends here so you can do tricks like that same at the end right there's always a way",
    "start": "3636160",
    "end": "3643839"
  },
  {
    "text": "or at least i haven't found a hole yet and with that i want to say thanks it was great um great questions and i'm",
    "start": "3644319",
    "end": "3651520"
  },
  {
    "text": "still around there's going to be lunch i'll be around there somewhere um if you have more questions more ideas you know",
    "start": "3651520",
    "end": "3658640"
  },
  {
    "text": "grab me now shoot me an email later i'm just mad stop targeting at microsoft.com i don't mind sharing that um just with my",
    "start": "3658640",
    "end": "3665200"
  },
  {
    "text": "closest my 100 closest friends um i know some some number um",
    "start": "3665200",
    "end": "3671839"
  },
  {
    "text": "and um and i hope you enjoy c sharp 11. thank you",
    "start": "3671839",
    "end": "3678119"
  },
  {
    "text": "you",
    "start": "3686880",
    "end": "3688960"
  }
]