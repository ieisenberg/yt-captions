[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "good morning and welcome to the second day of NDC conferences and this talk about typescript decorator's so Who am I",
    "start": "4210",
    "end": "13450"
  },
  {
    "text": "my name is Damian and I'm an independent consultant mostly helping teams getting better and working with bad various web",
    "start": "13450",
    "end": "19750"
  },
  {
    "text": "technologies so in this talk will mostly",
    "start": "19750",
    "end": "26560"
  },
  {
    "text": "talk about typescript decorators but my goal is to just show you how you can",
    "start": "26560",
    "end": "32680"
  },
  {
    "text": "repackage some really well-known ideas from the function programming world and",
    "start": "32680",
    "end": "40210"
  },
  {
    "text": "use typescript decorators to kind of facilitate that because I really think",
    "start": "40210",
    "end": "47160"
  },
  {
    "text": "from what I've seen from my experience that the decorators are really really underused feature of typescript most",
    "start": "47160",
    "end": "54160"
  },
  {
    "text": "people are especially developers working with angular they're quite comfortable using built-in decorators you know for",
    "start": "54160",
    "end": "60399"
  },
  {
    "text": "dependency injection and everything that angular facilitates but they're also quite comfortable with you know building",
    "start": "60399",
    "end": "66369"
  },
  {
    "text": "components and building services but I've very rarely seen someone building",
    "start": "66369",
    "end": "71560"
  },
  {
    "text": "new new decorators and I think that's that's really a shame because you can accomplish a lot and make your code much",
    "start": "71560",
    "end": "77350"
  },
  {
    "text": "more cleaner and nicer if you if you use decorator so just the sort of a set of",
    "start": "77350",
    "end": "83560"
  },
  {
    "text": "stage for this talk before we actually move on to the mechanics of decorators and how you can use them and how you can",
    "start": "83560",
    "end": "91209"
  },
  {
    "start": "90000",
    "end": "600000"
  },
  {
    "text": "build new ones I really enjoy let's talk",
    "start": "91209",
    "end": "97209"
  },
  {
    "text": "yesterday about the power of composition was anyone actually on that talk it was the first talk in the morning yes they",
    "start": "97209",
    "end": "102970"
  },
  {
    "text": "could we have a show of hands Oh a couple a couple it was a really nice",
    "start": "102970",
    "end": "108819"
  },
  {
    "text": "talk that the talk about the power of of composition which is one of the basic",
    "start": "108819",
    "end": "114190"
  },
  {
    "text": "principles of functional programming so um let's just sort of set the stage by",
    "start": "114190",
    "end": "123030"
  },
  {
    "text": "starting with something fairly simple so let's let's start with a function called",
    "start": "123959",
    "end": "131099"
  },
  {
    "text": "sq Artie which should in theory compute the",
    "start": "131099",
    "end": "139180"
  },
  {
    "text": "square root of a real number so if we say something like result and then ask",
    "start": "139180",
    "end": "149290"
  },
  {
    "text": "you RT 16 we should get 4 do not can you",
    "start": "149290",
    "end": "156550"
  },
  {
    "text": "actually see the stuff happening on the console or is it is it too small",
    "start": "156550",
    "end": "161670"
  },
  {
    "text": "um I'll just make it a little bit bigger so let's put this to maybe 20 and then",
    "start": "161670",
    "end": "171400"
  },
  {
    "text": "make that bigger okay so we call the SQ",
    "start": "171400",
    "end": "184930"
  },
  {
    "text": "RT function and with 16 as a parameter and we get 4 as a result we call it with",
    "start": "184930",
    "end": "192550"
  },
  {
    "text": "9 we get 3 we call it with 16 again and we get we get 4 okay so how about this",
    "start": "192550",
    "end": "204730"
  },
  {
    "text": "done let's say at some point in time we decided we would like to add a little bit of logging to our application so",
    "start": "204730",
    "end": "211840"
  },
  {
    "text": "obviously one way to do that would be to add that directly inside the SQ RT",
    "start": "211840",
    "end": "222100"
  },
  {
    "text": "function and then we get exactly the same here a",
    "start": "222100",
    "end": "235510"
  },
  {
    "text": "view apart from actually seeing the parameters being logged every time we invoke this this function but I think we",
    "start": "235510",
    "end": "243160"
  },
  {
    "text": "can actually do do better than that so I can introduce another little abstraction",
    "start": "243160",
    "end": "250799"
  },
  {
    "text": "we can implement a function that would allow us to lock the parameters of any",
    "start": "250799",
    "end": "256239"
  },
  {
    "text": "function that we that we want so how would that what would that look like so",
    "start": "256239",
    "end": "261669"
  },
  {
    "text": "we can say log is a function and that",
    "start": "261669",
    "end": "267280"
  },
  {
    "text": "function takes actually a function as a as a parameter and then it returns",
    "start": "267280",
    "end": "272860"
  },
  {
    "text": "another function as a result and what what does that function look like well it takes some arguments and then it logs",
    "start": "272860",
    "end": "282820"
  },
  {
    "text": "whatever these arguments are you can",
    "start": "282820",
    "end": "290620"
  },
  {
    "text": "actually spread this so we get a nicer output and then we just invoke this",
    "start": "290620",
    "end": "297820"
  },
  {
    "text": "function that we passed in as a parameter and passed exactly the same",
    "start": "297820",
    "end": "305280"
  },
  {
    "text": "arguments and then what we do with that well we can just say sqr t is log mass",
    "start": "305280",
    "end": "317289"
  },
  {
    "text": "dot x QR t and we get exactly the same exactly the same behavior here on the right side we see 16 being logged in",
    "start": "317289",
    "end": "324460"
  },
  {
    "text": "because there was a parameter and then we get result of 4 and then 9 and 3 and then 16 16 and 4 so now we have this",
    "start": "324460",
    "end": "332080"
  },
  {
    "text": "little very small though reusable abstraction that we can then glue on to any function we want and have its",
    "start": "332080",
    "end": "340330"
  },
  {
    "text": "parameters being logged in and we don't have to kind of pollute this function here the math dot s QR C and add any",
    "start": "340330",
    "end": "346360"
  },
  {
    "text": "extra behavior in there we can just bolt on this logging feature onto any",
    "start": "346360",
    "end": "351370"
  },
  {
    "text": "function any function we want okay so this was a really simple simple",
    "start": "351370",
    "end": "362060"
  },
  {
    "text": "example what we can maybe go one one level up so I remember when I was about",
    "start": "362060",
    "end": "370850"
  },
  {
    "text": "15 they'd kind of demo scene and then graphics programming was all rage and I",
    "start": "370850",
    "end": "379660"
  },
  {
    "text": "mean this is gonna sound like the Yorkshiremen sketch from Monty Python but we really had a slow computers which",
    "start": "379660",
    "end": "386300"
  },
  {
    "text": "did not have any floating point support so you actually it was really really",
    "start": "386300",
    "end": "391430"
  },
  {
    "text": "slow to do any floating-point operation like trigonometry functions or square root or anything like that and when you",
    "start": "391430",
    "end": "397910"
  },
  {
    "text": "do graphics programming square root is a really important function because you computing distances all the time and you",
    "start": "397910",
    "end": "406940"
  },
  {
    "text": "call the square root function many many times so what would typically happen in in a in a demo was that if you have lots",
    "start": "406940",
    "end": "414800"
  },
  {
    "text": "of friends you would initially show a greetings page where the name of your",
    "start": "414800",
    "end": "420320"
  },
  {
    "text": "friends will scroll indefinitely while you were in the background precomputing all the possible results for all the",
    "start": "420320",
    "end": "426920"
  },
  {
    "text": "possible parameters of the square root function so that you can reuse it reuse it later on and typically you would save",
    "start": "426920",
    "end": "432470"
  },
  {
    "text": "that into an array and then look up by index and avoid the computation",
    "start": "432470",
    "end": "437810"
  },
  {
    "text": "altogether which would kind of make the whole thing possible or bearable now",
    "start": "437810",
    "end": "443150"
  },
  {
    "text": "there's that that that's probably even counterproductive because you have much more powerful CPUs that can you know",
    "start": "443150",
    "end": "449510"
  },
  {
    "text": "compute square root in a couple of clock cycles but it was kind of all all all",
    "start": "449510",
    "end": "454970"
  },
  {
    "text": "the rage then so but I think the idea is",
    "start": "454970",
    "end": "461570"
  },
  {
    "text": "still applicable maybe not in that direct form but we'll see later on an example where that for actually that",
    "start": "461570",
    "end": "466970"
  },
  {
    "text": "approach might actually come useful so now we'll try and build another little",
    "start": "466970",
    "end": "473030"
  },
  {
    "text": "reusable abstraction to kind of deal with that idea of remembering the",
    "start": "473030",
    "end": "478160"
  },
  {
    "text": "results of a particular function in vacations so how would you going about",
    "start": "478160",
    "end": "484520"
  },
  {
    "text": "that well we can again build another function and maybe call it memorize and",
    "start": "484520",
    "end": "492520"
  },
  {
    "text": "he's also a function that takes function as a parameter and then returns another",
    "start": "492520",
    "end": "500690"
  },
  {
    "text": "function as a result so what does that resulting function look like well it takes some arguments again and then we",
    "start": "500690",
    "end": "512419"
  },
  {
    "text": "actually have to make this a bit more elaborate in this case but then before",
    "start": "512420",
    "end": "523159"
  },
  {
    "text": "we return this new function as a result we need to initialize a little store where we keep track of all these results",
    "start": "523160",
    "end": "530360"
  },
  {
    "text": "of these computations so we can say something like results is an empty",
    "start": "530360",
    "end": "539060"
  },
  {
    "text": "object and then here we can say let's",
    "start": "539060",
    "end": "545990"
  },
  {
    "text": "add some property called key which we would use to look up into the results and for the purpose of this",
    "start": "545990",
    "end": "552160"
  },
  {
    "text": "demonstration let's just say that that's",
    "start": "552160",
    "end": "556720"
  },
  {
    "text": "Jason string before i args so we just",
    "start": "557470",
    "end": "564740"
  },
  {
    "text": "string if I whichever parameters are passed to that function is as arguments and then we can say if this results has",
    "start": "564740",
    "end": "577400"
  },
  {
    "text": "a property with the name key then we just return that and otherwise we then",
    "start": "577400",
    "end": "586850"
  },
  {
    "text": "need to do a little bit of work we have to say results key is what we call the",
    "start": "586850",
    "end": "595340"
  },
  {
    "text": "function FN okay",
    "start": "595340",
    "end": "599050"
  },
  {
    "start": "600000",
    "end": "1042000"
  },
  {
    "text": "FN arcs so we store we invoke the",
    "start": "600480",
    "end": "605580"
  },
  {
    "text": "function past the parameters and remember the result inside this results",
    "start": "605580",
    "end": "611400"
  },
  {
    "text": "object and then return return the same",
    "start": "611400",
    "end": "618660"
  },
  {
    "text": "the same value as a result okay so let's let's see how would this work",
    "start": "618660",
    "end": "625110"
  },
  {
    "text": "what connection so for the time being I'm just going to replace this with memorize and then I'm coming gonna",
    "start": "625110",
    "end": "633390"
  },
  {
    "text": "comment out these ones and I'm actually gonna add this log-log stuff back in",
    "start": "633390",
    "end": "640760"
  },
  {
    "text": "right so what we have now is this sq RT",
    "start": "641150",
    "end": "648690"
  },
  {
    "text": "function with two Bolton's added on one for logging the parameters and the other",
    "start": "648690",
    "end": "653700"
  },
  {
    "text": "one for cashing or remembering all these intermediate results so when we call it",
    "start": "653700",
    "end": "659580"
  },
  {
    "text": "with 16 we still get four as the result",
    "start": "659580",
    "end": "664830"
  },
  {
    "text": "and we see number 16 being being logged as a parameter when we call it with 9 we",
    "start": "664830",
    "end": "670020"
  },
  {
    "text": "see 9 being Lankan logged and 3 being returned as a as a result but when we",
    "start": "670020",
    "end": "675030"
  },
  {
    "text": "call it with 16 again we only get the result but there is no log which is",
    "start": "675030",
    "end": "681030"
  },
  {
    "text": "exactly what we want because what happened is this memorise decorator of",
    "start": "681030",
    "end": "686430"
  },
  {
    "text": "bolt-on actually remembered what the result was when we call the function first time with number 16 as the",
    "start": "686430",
    "end": "691830"
  },
  {
    "text": "parameter and now we just get the result straightaway without sq RT being invoked",
    "start": "691830",
    "end": "696960"
  },
  {
    "text": "at all right so now we have these two",
    "start": "696960",
    "end": "704490"
  },
  {
    "text": "little bottoms that we can reuse any time any time we want and obviously now you get the idea how this whole thing",
    "start": "704490",
    "end": "710730"
  },
  {
    "text": "works you just have these functions all the way down pretty much like Turtles you just keep nesting than one one in",
    "start": "710730",
    "end": "716520"
  },
  {
    "text": "each other we have the original function which actually does some useful work and",
    "start": "716520",
    "end": "722670"
  },
  {
    "text": "then we have all these bottoms that we apply on to it by passing that function",
    "start": "722670",
    "end": "727920"
  },
  {
    "text": "as a parameter to other functions and then passing these results again as parameters to other",
    "start": "727920",
    "end": "733450"
  },
  {
    "text": "so this this bit of nesting here is kind of starting to look like that pyramid of",
    "start": "733450",
    "end": "740260"
  },
  {
    "text": "do that you might for example get when you work with callbacks callbacks a lot",
    "start": "740260",
    "end": "746770"
  },
  {
    "text": "so um might be worth investing some time and coming up with an abstraction that",
    "start": "746770",
    "end": "752860"
  },
  {
    "text": "makes this kind of bit more ergonomic and easier easier to work for you to kind of avoid avoid nesting so there is",
    "start": "752860",
    "end": "760240"
  },
  {
    "text": "actually a well known abstraction that helps you do that and it's called compose that's basically the idea behind",
    "start": "760240",
    "end": "766360"
  },
  {
    "text": "functional composition so we might say we want to have a function called",
    "start": "766360",
    "end": "771730"
  },
  {
    "text": "compose which is also a higher-order",
    "start": "771730",
    "end": "777700"
  },
  {
    "text": "function because it takes function as parameter and returns function as its all but this one is a bit more complicated because it actually takes an",
    "start": "777700",
    "end": "785230"
  },
  {
    "text": "array of functions as as parameters so we're gonna call that offense for",
    "start": "785230",
    "end": "791740"
  },
  {
    "text": "example and then the function that we return as a result is the one that takes",
    "start": "791740",
    "end": "797350"
  },
  {
    "text": "some arc and then that's what well we",
    "start": "797350",
    "end": "807370"
  },
  {
    "text": "need to start with these offense and then we want to reduce them but we want to reduce them from the right-hand side",
    "start": "807370",
    "end": "813430"
  },
  {
    "text": "not from the normal left-hand side so we couldn't use the reduce write function",
    "start": "813430",
    "end": "821230"
  },
  {
    "text": "which takes two parameters the first one is the reducer function which is has a result and a function",
    "start": "821230",
    "end": "830250"
  },
  {
    "text": "might let's let's do this let's make it simple and then we'll make it more complicated later so let's just call",
    "start": "834880",
    "end": "841820"
  },
  {
    "text": "this arc let's just do it for one arc that that that's easier to understand so",
    "start": "841820",
    "end": "847760"
  },
  {
    "text": "reduce right take the reducer which just passes the previous result on to the",
    "start": "847760",
    "end": "855199"
  },
  {
    "text": "next function and passes the arc as the",
    "start": "855199",
    "end": "860720"
  },
  {
    "text": "initial value for the accumulator function model I do wrong here curly",
    "start": "860720",
    "end": "875990"
  },
  {
    "text": "brackets but it should not mean thank",
    "start": "875990",
    "end": "883339"
  },
  {
    "text": "you kindly thank you kindly okay cool so now we have the composed bit and then",
    "start": "883339",
    "end": "891050"
  },
  {
    "text": "we can change this a little bit we don't have to have all these nesting we can",
    "start": "891050",
    "end": "896149"
  },
  {
    "text": "just say sq Artie he's composed memoirs",
    "start": "896149",
    "end": "907970"
  },
  {
    "text": "and look and then math asked you party",
    "start": "907970",
    "end": "913870"
  },
  {
    "text": "and we get exactly the same exactly the same result but what's better about this",
    "start": "913870",
    "end": "919870"
  },
  {
    "text": "is that it's kind of more ergonomic you don't have to have all these nesting when you invoke the functions you've",
    "start": "919870",
    "end": "926810"
  },
  {
    "text": "gone from kind of going deeper and deeper and deeper to just going more to",
    "start": "926810",
    "end": "933589"
  },
  {
    "text": "the right more horizontal you just specify which functions you want to",
    "start": "933589",
    "end": "939410"
  },
  {
    "text": "compose and then give them the original function you get you get a function back that has all these all these bottoms so",
    "start": "939410",
    "end": "948589"
  },
  {
    "text": "this is a bit unfortunate the way we've implemented compose because it won't",
    "start": "948589",
    "end": "953959"
  },
  {
    "text": "work your function has multiple parameters so what we would actually want is something like this you want",
    "start": "953959",
    "end": "959930"
  },
  {
    "text": "these to be arcs and then pass",
    "start": "959930",
    "end": "964600"
  },
  {
    "text": "the args and then pass the arcs here and",
    "start": "965439",
    "end": "975220"
  },
  {
    "text": "return a little array here and then take the first one",
    "start": "975220",
    "end": "981938"
  },
  {
    "text": "you like so yeah so now with this flavor of",
    "start": "986990",
    "end": "995370"
  },
  {
    "text": "compose you would actually be able to compose functions where the original one takes multiple multiple parameters okay",
    "start": "995370",
    "end": "1001840"
  },
  {
    "text": "so so this is kind of a fairly standard",
    "start": "1001840",
    "end": "1007870"
  },
  {
    "text": "way to how you compose functions in in in JavaScript most functional libraries",
    "start": "1007870",
    "end": "1015710"
  },
  {
    "text": "would already have these things built in things like memorize compose log throttle debounce",
    "start": "1015710",
    "end": "1020840"
  },
  {
    "text": "and many many others but let's now see how we can repackage those ideas in a",
    "start": "1020840",
    "end": "1027980"
  },
  {
    "text": "slightly different way and use",
    "start": "1027980",
    "end": "1033319"
  },
  {
    "text": "typescript decorators to come up with a really really economic way to add these",
    "start": "1033319",
    "end": "1038750"
  },
  {
    "text": "bolt ons to our to our code so what we",
    "start": "1038750",
    "end": "1047300"
  },
  {
    "start": "1042000",
    "end": "1425000"
  },
  {
    "text": "have here is an example to how you implement a decorator in in typescript",
    "start": "1047300",
    "end": "1056090"
  },
  {
    "text": "and this is basically a decorator that does absolutely nothing so it just decorates a function and allows you to",
    "start": "1056090",
    "end": "1062780"
  },
  {
    "text": "invoke that function and return exactly the same result as the function did originally so as you can see the",
    "start": "1062780",
    "end": "1069890"
  },
  {
    "text": "decorators are just plain functions as you would expect and they are exactly",
    "start": "1069890",
    "end": "1075980"
  },
  {
    "text": "the same kind of functions that we've seen on that little demonstration before they're functions that take functions as",
    "start": "1075980",
    "end": "1082880"
  },
  {
    "text": "parameters because this descriptor dot value would be nothing but your method for example in your class and then",
    "start": "1082880",
    "end": "1089180"
  },
  {
    "text": "return some other functions as a as a result so pretty much exactly exactly",
    "start": "1089180",
    "end": "1094820"
  },
  {
    "text": "the same the same idea and it's exactly the same structure but let's let's see",
    "start": "1094820",
    "end": "1100490"
  },
  {
    "text": "put this into into practice with kind of more elaborate example so here we have the log decorator which matches exactly",
    "start": "1100490",
    "end": "1108410"
  },
  {
    "text": "what the log higher-order function did on that little demo that intercept any",
    "start": "1108410",
    "end": "1116180"
  },
  {
    "text": "invocation of the method that you decorate with this decorator and then logs whatever the parameters are when",
    "start": "1116180",
    "end": "1122600"
  },
  {
    "text": "the function is invoked and then returns exactly the same exactly the same result so we have this",
    "start": "1122600",
    "end": "1127669"
  },
  {
    "text": "little example here a simple angular component it's not too really important",
    "start": "1127669",
    "end": "1134450"
  },
  {
    "text": "if you not familiar with angular this should be fairly easy to understand what's what's going on it's a component",
    "start": "1134450",
    "end": "1140450"
  },
  {
    "text": "that has a button and when we click on the button we want to store hello world",
    "start": "1140450",
    "end": "1145639"
  },
  {
    "text": "in this message and then render that on on the screen but because we've decorated this event click call back",
    "start": "1145639",
    "end": "1154399"
  },
  {
    "text": "with the log decorator we expect the log statement to appear in the log when we click on the button which is exactly",
    "start": "1154399",
    "end": "1160669"
  },
  {
    "text": "what happens I have a little demo here to show you that so when I click on this",
    "start": "1160669",
    "end": "1171730"
  },
  {
    "text": "say hello",
    "start": "1171730",
    "end": "1175090"
  },
  {
    "text": "you actually see world being logged on the console every time you click and",
    "start": "1181130",
    "end": "1188990"
  },
  {
    "text": "that's because we log all the arguments",
    "start": "1188990",
    "end": "1194370"
  },
  {
    "text": "before we actually invoke the original invoke the original function so this is actually quite similar to sort of monkey",
    "start": "1194370",
    "end": "1200520"
  },
  {
    "text": "monkey patching in in JavaScript you just hijack the original method and then",
    "start": "1200520",
    "end": "1206130"
  },
  {
    "text": "replace it with another function that does a little bit of extra work and then invokes the very same original function",
    "start": "1206130",
    "end": "1212370"
  },
  {
    "text": "returns the same returns the same result so we've seen that these decorators are",
    "start": "1212370",
    "end": "1219000"
  },
  {
    "text": "nothing but JavaScript functions they just plain plain functions and you just",
    "start": "1219000",
    "end": "1224250"
  },
  {
    "text": "use them like so you decorate whichever method or a class you want to enhance",
    "start": "1224250",
    "end": "1229590"
  },
  {
    "text": "and add some extra that's some extra behavior so this is a really simplistic",
    "start": "1229590",
    "end": "1236010"
  },
  {
    "text": "example because this log decorator cannot be customized in any particular",
    "start": "1236010",
    "end": "1241710"
  },
  {
    "text": "in any particular way but because these decorators are just functions you can",
    "start": "1241710",
    "end": "1247290"
  },
  {
    "text": "actually then implement what is called a decorator Factory so you can have a",
    "start": "1247290",
    "end": "1253350"
  },
  {
    "text": "function that actually returns a function that is a decorator itself and",
    "start": "1253350",
    "end": "1259170"
  },
  {
    "text": "what would that look like well we would use it like like this so this log is now",
    "start": "1259170",
    "end": "1264300"
  },
  {
    "text": "no longer a decorator it's a decorator Factory because you need to call it first in order to get the decorator back",
    "start": "1264300",
    "end": "1270210"
  },
  {
    "text": "and with this little trick you can now pass some extra bits of configuration",
    "start": "1270210",
    "end": "1275610"
  },
  {
    "text": "initial initialization to your to your decorator so here we have an extra step",
    "start": "1275610",
    "end": "1281730"
  },
  {
    "text": "of indirection we have a function that returns a function that returns a function so this one is the factory this",
    "start": "1281730",
    "end": "1286860"
  },
  {
    "text": "one is the is the decorator and then inside this options object in our case",
    "start": "1286860",
    "end": "1291960"
  },
  {
    "text": "we just pass the name of the component or the unit that we want to appear",
    "start": "1291960",
    "end": "1298559"
  },
  {
    "text": "inside inside the log and then when we log we take options dot name and then concatenate any other parameters",
    "start": "1298559",
    "end": "1305880"
  },
  {
    "text": "afterwards and then when I click on this button here we actually",
    "start": "1305880",
    "end": "1311180"
  },
  {
    "text": "see logged em a component and than any other parameters that are passed to then passed on to that function and that's",
    "start": "1311180",
    "end": "1319880"
  },
  {
    "text": "actually really nice because you can then customize your decorators and have",
    "start": "1319880",
    "end": "1325700"
  },
  {
    "text": "them configured in a very particular way that matches your exact exact use case just by using this little trick where",
    "start": "1325700",
    "end": "1332330"
  },
  {
    "text": "you actually have functions returning decorators instead and because again",
    "start": "1332330",
    "end": "1340340"
  },
  {
    "text": "these are just normal type script or JavaScript functions these parameters",
    "start": "1340340",
    "end": "1347420"
  },
  {
    "text": "that you pass in they not necessarily have to be data you don't have to be",
    "start": "1347420",
    "end": "1352520"
  },
  {
    "text": "passing in your strings and objects or whatever its parameters it's perfectly legitimate to pass a function as a",
    "start": "1352520",
    "end": "1358730"
  },
  {
    "text": "parameter as well so for example just for the purpose of the illustration we",
    "start": "1358730",
    "end": "1364790"
  },
  {
    "text": "have another decorator factory for logging where we pass the format",
    "start": "1364790",
    "end": "1371660"
  },
  {
    "text": "function as a as a parameter with the idea being that you can exactly specify what and how you want you want locked so",
    "start": "1371660",
    "end": "1380450"
  },
  {
    "text": "for example here the format functions takes arguments as parameters and then",
    "start": "1380450",
    "end": "1385720"
  },
  {
    "text": "outputs logs the name of the component and the current timestamp or any other",
    "start": "1385720",
    "end": "1391060"
  },
  {
    "text": "parameters that you passing on to that function and then that's what actually ultimately gets logged on to the console",
    "start": "1391060",
    "end": "1396260"
  },
  {
    "text": "so if I click on this button here we actually see the name of the component",
    "start": "1396260",
    "end": "1402410"
  },
  {
    "text": "the current timestamp and all the parameters that were that were passed in so you can obviously make this as simple",
    "start": "1402410",
    "end": "1408290"
  },
  {
    "text": "or as complex as as you like because you have the full power of JavaScript and JavaScript functions available available",
    "start": "1408290",
    "end": "1416510"
  },
  {
    "text": "to you ok so that was the kind of simple",
    "start": "1416510",
    "end": "1423040"
  },
  {
    "text": "simple example so the next one is just wrapping that",
    "start": "1423040",
    "end": "1429780"
  },
  {
    "text": "very same memorized function we had on that little demonstration and turning it",
    "start": "1429780",
    "end": "1435240"
  },
  {
    "text": "into a decorator so the basic idea is pretty much exactly the same we",
    "start": "1435240",
    "end": "1441410"
  },
  {
    "text": "intercept the function invocation keep track of the previously previous invocations inside these results object",
    "start": "1441410",
    "end": "1449280"
  },
  {
    "text": "literal compute the key check if we have the value and then store it otherwise we",
    "start": "1449280",
    "end": "1455190"
  },
  {
    "text": "just return the very same result obviously that that's not very it",
    "start": "1455190",
    "end": "1461430"
  },
  {
    "text": "doesn't seem to be very useful for memorizing things like square root and",
    "start": "1461430",
    "end": "1467810"
  },
  {
    "text": "normal calculation but what it does come useful is in cases where you need to do",
    "start": "1467810",
    "end": "1475680"
  },
  {
    "start": "1468000",
    "end": "1615000"
  },
  {
    "text": "some IO operations to make things happen so even though this is very non",
    "start": "1475680",
    "end": "1485100"
  },
  {
    "text": "idiomatic angular I think it's good enough for the illustration so hey we",
    "start": "1485100",
    "end": "1491100"
  },
  {
    "text": "have a component that is trying to make some asynchronous HTTP requests so it's",
    "start": "1491100",
    "end": "1498240"
  },
  {
    "text": "trying to use this API for fetching the message of the day and then rendering",
    "start": "1498240",
    "end": "1504210"
  },
  {
    "text": "that as a promise inside inside this template so whichever the message we get back from the server we render inside",
    "start": "1504210",
    "end": "1510990"
  },
  {
    "text": "inside the template and let's say we only want to fetch the message of the",
    "start": "1510990",
    "end": "1517110"
  },
  {
    "text": "day once inside our application so ideally you would want to move this onto",
    "start": "1517110",
    "end": "1522870"
  },
  {
    "text": "the service or any other more civilized way of managing the state inside your angular application like ng rx or store",
    "start": "1522870",
    "end": "1529710"
  },
  {
    "text": "or something like that but for now it's just inside the component and we can just annotate this method here the fetch",
    "start": "1529710",
    "end": "1536730"
  },
  {
    "text": "message method with the memorize decorator and what that we do is ensure",
    "start": "1536730",
    "end": "1543060"
  },
  {
    "text": "that the side-effect the asynchronous call only happens once you can request",
    "start": "1543060",
    "end": "1549540"
  },
  {
    "text": "for this message as many times as you like but the real HTTP request would only be made once and you would actually",
    "start": "1549540",
    "end": "1555060"
  },
  {
    "text": "cache the result of that invocation and all of that is possible cause we use a promise I promise here",
    "start": "1555060",
    "end": "1562380"
  },
  {
    "text": "because promise is a really nice and useful abstraction because you get a value or an object as a as a result and",
    "start": "1562380",
    "end": "1569669"
  },
  {
    "text": "then you can just catch that object and store it inside that results little so",
    "start": "1569669",
    "end": "1577950"
  },
  {
    "text": "we can actually see a little demo of that so we have this refresh button when",
    "start": "1577950",
    "end": "1584789"
  },
  {
    "text": "we click we get a message and we see the HTTP request happening but when we click",
    "start": "1584789",
    "end": "1592230"
  },
  {
    "text": "again nothing nothing happens because exactly the same promise would be returned as a result and no side effect",
    "start": "1592230",
    "end": "1600590"
  },
  {
    "text": "is happening so this was a really",
    "start": "1600590",
    "end": "1608000"
  },
  {
    "text": "primitive implementation of memoization but again you can make this more",
    "start": "1608659",
    "end": "1616049"
  },
  {
    "text": "complicated by turning this into for example decorator Factory and adding",
    "start": "1616049",
    "end": "1622440"
  },
  {
    "text": "some placeholders for configuration so for example just administration one",
    "start": "1622440",
    "end": "1630600"
  },
  {
    "text": "thing that we might want to be able to do is specify the expiry time so we can",
    "start": "1630600",
    "end": "1636750"
  },
  {
    "text": "say you can cash this value you can cash this promise but for no longer than one",
    "start": "1636750",
    "end": "1642929"
  },
  {
    "text": "second so if someone else asks for the same operation within a thousand",
    "start": "1642929",
    "end": "1648690"
  },
  {
    "text": "milliseconds giving back the same result but after that just forget about this value and make make the request again",
    "start": "1648690",
    "end": "1655159"
  },
  {
    "text": "and we do that just by allowing an",
    "start": "1655159",
    "end": "1661429"
  },
  {
    "text": "option to be passed in we the name",
    "start": "1661429",
    "end": "1667549"
  },
  {
    "text": "expires in Milly's so this would allow you to specify after how many milliseconds the value expires and then",
    "start": "1669049",
    "end": "1676789"
  },
  {
    "text": "if you remember that together with the value itself then you would be able to detect when the value had expired and",
    "start": "1676789",
    "end": "1683510"
  },
  {
    "text": "then make the call make the call again so we can actually see this in action mmm so if I click on this other button I",
    "start": "1683510",
    "end": "1691990"
  },
  {
    "text": "get a message and if I click again I get another one but if I keep clicking a lot",
    "start": "1691990",
    "end": "1698270"
  },
  {
    "text": "I only get to see one at most one request one more request per second and this",
    "start": "1698270",
    "end": "1704630"
  },
  {
    "text": "message is only updated at most once once per second so you probably noticed",
    "start": "1704630",
    "end": "1719210"
  },
  {
    "start": "1715000",
    "end": "2098000"
  },
  {
    "text": "that we don't show any progress status while we are loading the message it is",
    "start": "1719210",
    "end": "1725450"
  },
  {
    "text": "quite a common thing to do inside any any web application and when I look at",
    "start": "1725450",
    "end": "1730700"
  },
  {
    "text": "work with different teams and look how people do that that code tends to become",
    "start": "1730700",
    "end": "1736309"
  },
  {
    "text": "really really repetitive like every single component you know regardless of",
    "start": "1736309",
    "end": "1741799"
  },
  {
    "text": "whether you work with promises or rx or any other obstruction has a lots of duplication when it comes to kind of",
    "start": "1741799",
    "end": "1747770"
  },
  {
    "text": "showing progress messages and spinners and whatnot and what happens typically",
    "start": "1747770",
    "end": "1754370"
  },
  {
    "text": "is you pollute your business code with all these orthogonal or non relevant concepts that's where decorators come",
    "start": "1754370",
    "end": "1762620"
  },
  {
    "text": "really really useful because you can isolate that behavior and implement it once and then just bolt it on and if you",
    "start": "1762620",
    "end": "1771559"
  },
  {
    "text": "use it anytime anytime you like so what we have here is a slightly more complex",
    "start": "1771559",
    "end": "1778850"
  },
  {
    "text": "example because we have a little combo we have a decorator and we have a little",
    "start": "1778850",
    "end": "1785419"
  },
  {
    "text": "component that is the loaded component itself so the idea is the decorator the",
    "start": "1785419",
    "end": "1791630"
  },
  {
    "text": "loader decorator would still have pretty much exactly the same structure as as",
    "start": "1791630",
    "end": "1796940"
  },
  {
    "text": "before a function returning a function returning a function but what happens inside the decorator is",
    "start": "1796940",
    "end": "1804800"
  },
  {
    "text": "we capture the promise that's returned by the result of this asynchronous",
    "start": "1804800",
    "end": "1811020"
  },
  {
    "text": "operation and then we we done it and when the promise is when the",
    "start": "1811020",
    "end": "1818640"
  },
  {
    "text": "operation starts we raise a flag inside this object here called operation in",
    "start": "1818640",
    "end": "1825030"
  },
  {
    "text": "progress and when the operation either succeeds or fails when the promises are",
    "start": "1825030",
    "end": "1830130"
  },
  {
    "text": "the result or rejected we remove that flag from this object literal here and",
    "start": "1830130",
    "end": "1838550"
  },
  {
    "text": "then that allows us to show the spinner inside this loader loaded component",
    "start": "1838550",
    "end": "1844640"
  },
  {
    "text": "because the loaded component is binding over this object literal and only",
    "start": "1844640",
    "end": "1851400"
  },
  {
    "text": "showing this little span or icon if the operation if the operation is in",
    "start": "1851400",
    "end": "1858120"
  },
  {
    "text": "progress so you now have this little combo of the decorator and the component",
    "start": "1858120",
    "end": "1863790"
  },
  {
    "text": "you can decorate any method you want and then stick the component wherever you like and when while the operation is in",
    "start": "1863790",
    "end": "1870690"
  },
  {
    "text": "progress you will see the spinner - spinner showing this one is kind of bit",
    "start": "1870690",
    "end": "1878460"
  },
  {
    "text": "more elaborate because we also allowed to specify the name of the operation so because you typically have multiple things going on inside the web",
    "start": "1878460",
    "end": "1884880"
  },
  {
    "text": "application you don't want to have maybe a single loader for all of it you want to have separate loaders for different",
    "start": "1884880",
    "end": "1891780"
  },
  {
    "text": "for different operations so that's why this seems a bit more complicated that",
    "start": "1891780",
    "end": "1896790"
  },
  {
    "text": "maybe should be and then we can see a little demo so how would we use this",
    "start": "1896790",
    "end": "1904560"
  },
  {
    "text": "well we again have a component that has a method called fetch message be the",
    "start": "1904560",
    "end": "1910470"
  },
  {
    "text": "same thing that returns a promise promise as a result but we didn't decorate this method with the loader",
    "start": "1910470",
    "end": "1916340"
  },
  {
    "text": "decorator and say the name of the operation is fetch message and then we",
    "start": "1916340",
    "end": "1921750"
  },
  {
    "text": "put the loader component itself and say show the loader if the operation called fetch message is",
    "start": "1921750",
    "end": "1927870"
  },
  {
    "text": "is in progress and then when we click the refresh",
    "start": "1927870",
    "end": "1933550"
  },
  {
    "text": "button if you have a really young and quick eyes you should be able to see a",
    "start": "1933550",
    "end": "1938590"
  },
  {
    "text": "little spinner appearing on the right hand side of a button while the",
    "start": "1938590",
    "end": "1945210"
  },
  {
    "text": "operation is he's in progress so it's",
    "start": "1946140",
    "end": "1957100"
  },
  {
    "text": "quite common when testing this type of code is a synchronous code that you",
    "start": "1957100",
    "end": "1963280"
  },
  {
    "text": "would you may want to prolong the duration of certain operation so that you can verify the user experience and",
    "start": "1963280",
    "end": "1970390"
  },
  {
    "text": "and then how long it takes what does your application look like when you have slow requests going on so that's why",
    "start": "1970390",
    "end": "1980980"
  },
  {
    "text": "this little decorator called delay comes comes useful so the idea is this we",
    "start": "1980980",
    "end": "1986680"
  },
  {
    "text": "would like to have a little helper like this that we can then stick onto any",
    "start": "1986680",
    "end": "1995550"
  },
  {
    "text": "asynchronous method and say well can you actually delay this execution for let's",
    "start": "1995550",
    "end": "2002970"
  },
  {
    "text": "say 2 seconds so that I can verify that you know the spinner is indeed shown and then that I can that my application",
    "start": "2002970",
    "end": "2010200"
  },
  {
    "text": "behaves behaves correctly cuz maybe your API is a super quick and super fast and you never get to see the spinners when",
    "start": "2010200",
    "end": "2016020"
  },
  {
    "text": "you develop so in sort of development mode this this is something that might be quite quite useful so how would we go",
    "start": "2016020",
    "end": "2023850"
  },
  {
    "text": "on about this well again we have this little utility function called delay",
    "start": "2023850",
    "end": "2031130"
  },
  {
    "text": "which just delays a promise to be resolved after specified number of milliseconds and then inside the",
    "start": "2031130",
    "end": "2039630"
  },
  {
    "text": "decorator we delay the promise for the",
    "start": "2039630",
    "end": "2045960"
  },
  {
    "text": "specified number of milliseconds and then perform the original function",
    "start": "2045960",
    "end": "2051210"
  },
  {
    "text": "invocation and return that as a result so basically just using promise training to delay the invocation",
    "start": "2051210",
    "end": "2061550"
  },
  {
    "text": "of this of this API and then we can see",
    "start": "2061550",
    "end": "2067340"
  },
  {
    "text": "a little demo so if I press on this refresh button after two seconds we get",
    "start": "2067340",
    "end": "2074480"
  },
  {
    "text": "the message back and we show the spinner we showing two spinner all that all the",
    "start": "2074480",
    "end": "2080629"
  },
  {
    "text": "time right so now that we have our",
    "start": "2080630",
    "end": "2092629"
  },
  {
    "text": "loader and our delay another common",
    "start": "2092630",
    "end": "2100190"
  },
  {
    "start": "2098000",
    "end": "2225000"
  },
  {
    "text": "issue that happens when when people write asynchronous code at least from my",
    "start": "2100190",
    "end": "2105530"
  },
  {
    "text": "experience is that they don't really understand how promises work and then break the promise chain and end up with",
    "start": "2105530",
    "end": "2113600"
  },
  {
    "text": "operations that return promises that are never neither resolved nor know rejected",
    "start": "2113600",
    "end": "2119090"
  },
  {
    "text": "or alternatively you may want to limit the duration of your asynchronous",
    "start": "2119090",
    "end": "2128840"
  },
  {
    "text": "operations to a certain amount of time so imagine you have a really long promise chain that does lots of things",
    "start": "2128840",
    "end": "2134180"
  },
  {
    "text": "asynchronously but you will want to say if the whole thing does not complete within ten seconds I want you to mark",
    "start": "2134180",
    "end": "2142640"
  },
  {
    "text": "this whole operation as as a failure so how do we go on about that well again we",
    "start": "2142640",
    "end": "2149150"
  },
  {
    "text": "can build another custom decorator called timeout with the idea being that we can say we can then decorate any",
    "start": "2149150",
    "end": "2157220"
  },
  {
    "text": "function we want and specify time or duration in milliseconds and if the",
    "start": "2157220",
    "end": "2164690"
  },
  {
    "text": "operation happens with it within that specified time we would get exactly the same result if the operation takes",
    "start": "2164690",
    "end": "2171920"
  },
  {
    "text": "longer we just get a promise that is rejected with the let's say reason",
    "start": "2171920",
    "end": "2177320"
  },
  {
    "text": "timeout exactly after that amount amount of time so how would we go on about that",
    "start": "2177320",
    "end": "2183080"
  },
  {
    "text": "but again we have a factory that takes Milly's as a parameter as a configuration and then returns the",
    "start": "2183080",
    "end": "2189260"
  },
  {
    "text": "decorator itself we get a hold of the method we invoke it",
    "start": "2189260",
    "end": "2195109"
  },
  {
    "text": "here and then we raise that promise that we get back as a result against a",
    "start": "2195109",
    "end": "2201859"
  },
  {
    "text": "promise that would timeout after let's say a thousand milliseconds so we again",
    "start": "2201859",
    "end": "2208309"
  },
  {
    "text": "invoke this helper method called delay which gives us back a promise that times out after time email is and then we",
    "start": "2208309",
    "end": "2215119"
  },
  {
    "text": "failed that promise and then race it against the original original one what",
    "start": "2215119",
    "end": "2222920"
  },
  {
    "text": "would that look like so if we have a little example here that is now using all these three decorators so we first",
    "start": "2222920",
    "end": "2231230"
  },
  {
    "start": "2225000",
    "end": "2314000"
  },
  {
    "text": "delay this by three seconds and then we time it out after 2,000 milliseconds and",
    "start": "2231230",
    "end": "2239150"
  },
  {
    "text": "we also show the loader obviously we would expect this to fail because this would never complete within the two",
    "start": "2239150",
    "end": "2245359"
  },
  {
    "text": "seconds that the timeout is going to be waiting for and that's exactly what",
    "start": "2245359",
    "end": "2251180"
  },
  {
    "text": "happens if we try this little example so if we click refresh button after",
    "start": "2251180",
    "end": "2256720"
  },
  {
    "text": "approximately two seconds it would fail because we don't get to see any message here but you can see that request",
    "start": "2256720",
    "end": "2263150"
  },
  {
    "text": "ultimately still happened and you actually succeeded and we got the message back because the resulting",
    "start": "2263150",
    "end": "2268369"
  },
  {
    "text": "promise failed in theory we actually do get yes we do get the error here saying",
    "start": "2268369",
    "end": "2274099"
  },
  {
    "text": "unquote rejected rejected promise so now",
    "start": "2274099",
    "end": "2281239"
  },
  {
    "text": "we have quite a few of these little ball tones we have the one for adding the",
    "start": "2281239",
    "end": "2286819"
  },
  {
    "text": "logging to all our functions to memorizing the results and showing the loaders and we also have a way of",
    "start": "2286819",
    "end": "2293920"
  },
  {
    "text": "delaying certain asynchronous operations and also specifying the cut of time for",
    "start": "2293920",
    "end": "2305119"
  },
  {
    "text": "when the operation should ultimately ultimately fail so this really allows us",
    "start": "2305119",
    "end": "2311900"
  },
  {
    "text": "to keep this business-related code",
    "start": "2311900",
    "end": "2318230"
  },
  {
    "start": "2314000",
    "end": "2368000"
  },
  {
    "text": "really really simple and really really focused around heavy parts so you we only program against the happy part and",
    "start": "2318230",
    "end": "2326749"
  },
  {
    "text": "we get the decorators to handle all these other nasty error in boundary",
    "start": "2326749",
    "end": "2332480"
  },
  {
    "text": "and boundary conditions like you know getting the errors things timing out and and so on so one thing that also becomes",
    "start": "2332480",
    "end": "2341000"
  },
  {
    "text": "quite repetitive when when I get to work",
    "start": "2341000",
    "end": "2346099"
  },
  {
    "text": "with different different teams is how they handle errors you see the error handling code spread out all over the",
    "start": "2346099",
    "end": "2353800"
  },
  {
    "text": "application code and all over the all over the business code and and that's another perfect candidate for something",
    "start": "2353800",
    "end": "2359599"
  },
  {
    "text": "that can and should be handled by the decorators and then make less repetitive",
    "start": "2359599",
    "end": "2364670"
  },
  {
    "text": "and then deduplicated so how do you go on about this well this is actually",
    "start": "2364670",
    "end": "2373130"
  },
  {
    "start": "2368000",
    "end": "2420000"
  },
  {
    "text": "quite similar to the whole example with with with the loader we have a combo of",
    "start": "2373130",
    "end": "2379010"
  },
  {
    "text": "a decorator and a component so we have the error decorator that is only",
    "start": "2379010",
    "end": "2388010"
  },
  {
    "text": "checking if the promise that is returned by the original method is rejected and",
    "start": "2388010",
    "end": "2394460"
  },
  {
    "text": "if it is rejected and all we do we just push an error onto this array of errors and then inside the error component",
    "start": "2394460",
    "end": "2401270"
  },
  {
    "text": "itself we just render whichever errors happen during the execution of our",
    "start": "2401270",
    "end": "2407060"
  },
  {
    "text": "application so as a little example",
    "start": "2407060",
    "end": "2413290"
  },
  {
    "start": "2420000",
    "end": "2469000"
  },
  {
    "text": "what we have here is a fetch message",
    "start": "2422530",
    "end": "2428710"
  },
  {
    "text": "method that is trying to talk to an endpoint that does not exist this is this API / missing so our expectation is",
    "start": "2428710",
    "end": "2436060"
  },
  {
    "text": "that this operation would fail and hopefully it would be picked up by the error decorator and then rendered by the",
    "start": "2436060",
    "end": "2441250"
  },
  {
    "text": "error component that we this we show there we show here so we click on the",
    "start": "2441250",
    "end": "2452110"
  },
  {
    "text": "button the error happens because we get 404 as a result and the little error",
    "start": "2452110",
    "end": "2457600"
  },
  {
    "text": "message is rendered here if we click a couple of times we get multiplayers which we can then dismiss and whatnot so",
    "start": "2457600",
    "end": "2465700"
  },
  {
    "text": "these this example is fairly simplistic and it's not probably the best way to go",
    "start": "2465700",
    "end": "2473500"
  },
  {
    "text": "on about handling errors but it illustrates the point is it's good",
    "start": "2473500",
    "end": "2479080"
  },
  {
    "text": "enough to show to show the idea so we intercept the call detect the case when",
    "start": "2479080",
    "end": "2488230"
  },
  {
    "text": "the error happened register that somewhere and then that gets picked up by another component showing what and",
    "start": "2488230",
    "end": "2495460"
  },
  {
    "text": "why the error the error happened",
    "start": "2495460",
    "end": "2500430"
  },
  {
    "text": "so hopefully this gave you some ideas",
    "start": "2501400",
    "end": "2509440"
  },
  {
    "text": "how you can improve your code by identifying all these orthogonal",
    "start": "2509440",
    "end": "2515250"
  },
  {
    "text": "concepts inside your application things like error handling loading caching and",
    "start": "2515250",
    "end": "2521620"
  },
  {
    "text": "and so on and then wrap these things into either higher-order functions or",
    "start": "2521620",
    "end": "2528780"
  },
  {
    "text": "method decorators they're just kind of different way of packaging the same old ideas and recycling some really",
    "start": "2528780",
    "end": "2535120"
  },
  {
    "text": "well-known concepts from functional programming world some other ways where",
    "start": "2535120",
    "end": "2542800"
  },
  {
    "text": "you can we can use this is obviously dependency injection because that's exactly how dependency injection is",
    "start": "2542800",
    "end": "2548050"
  },
  {
    "text": "implemented in in in angular but you can do that with your code as well if you",
    "start": "2548050",
    "end": "2553570"
  },
  {
    "text": "use things like nodejs or javascript on the server this would be a good candidate for implementing the",
    "start": "2553570",
    "end": "2560049"
  },
  {
    "text": "transaction transaction management inside your application code another",
    "start": "2560049",
    "end": "2566109"
  },
  {
    "text": "quite common place where I use this a lot is I tend to write lots of load",
    "start": "2566109",
    "end": "2575349"
  },
  {
    "text": "tests or stress test tools using using nodejs and it's really useful to have",
    "start": "2575349",
    "end": "2584170"
  },
  {
    "text": "some sort of reporting to you know how",
    "start": "2584170",
    "end": "2589239"
  },
  {
    "text": "long the requests are taking how many failures you have how many successes you have then your 90th percentile and and",
    "start": "2589239",
    "end": "2596319"
  },
  {
    "text": "and so on so one really neat way of doing that is basically build a decorator that you can",
    "start": "2596319",
    "end": "2603759"
  },
  {
    "text": "instrument your functions that do all these asynchronous operations and then",
    "start": "2603759",
    "end": "2610059"
  },
  {
    "text": "use things like rx and then turn those into streams and then compute",
    "start": "2610059",
    "end": "2615989"
  },
  {
    "text": "continuously any kind of statistics that that you're interested at and then you can render those on the screen or save",
    "start": "2615989",
    "end": "2622029"
  },
  {
    "text": "them in a file or create reports from them and and what whatnot but it really keeps the whole the whole",
    "start": "2622029",
    "end": "2628059"
  },
  {
    "text": "thing very very clean because there's a really strict separation between gathering statistics and all this",
    "start": "2628059",
    "end": "2634979"
  },
  {
    "text": "application application code another another useful another idea where you",
    "start": "2634979",
    "end": "2643239"
  },
  {
    "text": "can apply this is to analytics so if you use Google Analytics or any other kind of analytics inside your application it",
    "start": "2643239",
    "end": "2651459"
  },
  {
    "text": "is very easy to just implement a decorator that interacts with the",
    "start": "2651459",
    "end": "2658089"
  },
  {
    "text": "third-party analytic systems and then sends events across when certain things",
    "start": "2658089",
    "end": "2664059"
  },
  {
    "text": "of significance happen inside inside your application and the really nice thing about that is that then that",
    "start": "2664059",
    "end": "2670479"
  },
  {
    "text": "becomes completely encapsulated and if you want they want to change to a different analytics product all you have to do is just three implement your",
    "start": "2670479",
    "end": "2676539"
  },
  {
    "text": "decorator and all your application code remains exactly exactly the same other",
    "start": "2676539",
    "end": "2682569"
  },
  {
    "text": "things that kind of could be worth packaging into these decorators are sort of other",
    "start": "2682569",
    "end": "2688110"
  },
  {
    "text": "[Music] higher-order functions like you know the bounds throttle and so on",
    "start": "2688110",
    "end": "2694040"
  },
  {
    "text": "also things like retries in in in this talk I didn't really want to use rx",
    "start": "2694040",
    "end": "2701370"
  },
  {
    "text": "because I don't know maybe people aren't experienced with rx enough but all these",
    "start": "2701370",
    "end": "2708270"
  },
  {
    "text": "ideas are also very very applicable if you use our X and they are actually",
    "start": "2708270",
    "end": "2713520"
  },
  {
    "text": "quite a fair bit simpler to implement because our X already supports the piping and chaining all these operators",
    "start": "2713520",
    "end": "2720660"
  },
  {
    "text": "so you can what you can do is just encapsulate a certain combination of operators into a new decorator and then",
    "start": "2720660",
    "end": "2728100"
  },
  {
    "text": "just glue that on any kind of operation that that you want so implementing",
    "start": "2728100",
    "end": "2733620"
  },
  {
    "text": "things like you know retries becomes super super trivial it's literally just",
    "start": "2733620",
    "end": "2739020"
  },
  {
    "text": "adding a single decorator without changing any other part of your of your",
    "start": "2739020",
    "end": "2744300"
  },
  {
    "text": "application right well that's all I had",
    "start": "2744300",
    "end": "2750000"
  },
  {
    "text": "for today hope you enjoyed this and you got some material to think about and",
    "start": "2750000",
    "end": "2755790"
  },
  {
    "text": "then some ideas to try later on when you develop your your own code thank you",
    "start": "2755790",
    "end": "2761370"
  },
  {
    "text": "very much [Applause]",
    "start": "2761370",
    "end": "2770429"
  },
  {
    "text": "you",
    "start": "2776950",
    "end": "2779010"
  }
]