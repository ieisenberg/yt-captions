[
  {
    "text": "right hello everyone welcome to this talk 13 ways of",
    "start": "9840",
    "end": "15759"
  },
  {
    "text": "looking at a turtle and um I have a lot of things to cover in in less than hour so I you know",
    "start": "15759",
    "end": "22920"
  },
  {
    "text": "I might go a little bit over so so um a lot of the talks here are sort of deep dives into one topic and I thought for",
    "start": "22920",
    "end": "30160"
  },
  {
    "text": "fun I would do one topic lots of shallow Dives in fact 13 maybe even 15 very",
    "start": "30160",
    "end": "36840"
  },
  {
    "text": "shallow Dives and mostly they're going to be functional programming things we're going to cover a lot of functional",
    "start": "36840",
    "end": "41879"
  },
  {
    "text": "programming techniques partial application error handling State mono actor model vent sourcing dependency",
    "start": "41879",
    "end": "47600"
  },
  {
    "text": "injection interpret patent capabilities and uh see if I can squeeze",
    "start": "47600",
    "end": "52680"
  },
  {
    "text": "all this in because I've got four minutes per topic so it's going to be pretty crazy this this is another I did",
    "start": "52680",
    "end": "59039"
  },
  {
    "text": "another crazy one on functional patterns so if you like my crazy talks then you can watch that one too I'm going to be",
    "start": "59039",
    "end": "64760"
  },
  {
    "text": "using f for the code examples but this stuff will work in pretty much any",
    "start": "64760",
    "end": "69840"
  },
  {
    "text": "programing language as long as it has support for things like lambda's functional programming stuff right so",
    "start": "69840",
    "end": "75320"
  },
  {
    "text": "Turtle graphics for people who are not familiar you have a little turtle on a screen or a canvas and you can move it",
    "start": "75320",
    "end": "82439"
  },
  {
    "text": "forward and then you can turn it around and you can move it around so basically you can turn it and you can move it so",
    "start": "82439",
    "end": "88880"
  },
  {
    "text": "this is our API we're going going to be using you can move a distance you can turn an angle and uh you can put the pen",
    "start": "88880",
    "end": "95159"
  },
  {
    "text": "up and Pen down and if the pen is up it won't draw a line if the pen is down it will draw a line so that is really",
    "start": "95159",
    "end": "100560"
  },
  {
    "text": "simple API and let's see how many ways we can make this really complicated okay going to make it as complicated as",
    "start": "100560",
    "end": "106560"
  },
  {
    "text": "possible by the end it's going to be so complicated so we're going to start with three different approaches to start with",
    "start": "106560",
    "end": "112680"
  },
  {
    "text": "and I'm got a little bell here next okay so number one okay object oriented",
    "start": "112680",
    "end": "118560"
  },
  {
    "text": "number two is abstract data type number three is functional so object oriented Turtle so an object oriented Turtle",
    "start": "118560",
    "end": "124240"
  },
  {
    "text": "people are poly familiar with you have the data and the behavior combined into one thing which I'm going to call a toal",
    "start": "124240",
    "end": "131239"
  },
  {
    "text": "and uh the thing about oo is you focus on Behavior right you don't focus on data and you encapsulate the state so",
    "start": "131239",
    "end": "138720"
  },
  {
    "text": "that means no sets and gets if you have sets and gets you're not doing proper oh sorry so here we have our client and we",
    "start": "138720",
    "end": "145959"
  },
  {
    "text": "have our Turtle which is a class and the turtle contains mutable state it contains its own state encapsulated that",
    "start": "145959",
    "end": "152239"
  },
  {
    "text": "you're not allowed to look at so I call the turtle and I ask it to do something and it doesn't give me really back of",
    "start": "152239",
    "end": "158160"
  },
  {
    "text": "response and I call the turtle to do something else and it updates its own internal state every time I do that so",
    "start": "158160",
    "end": "163920"
  },
  {
    "text": "let's look at the implementation so this is going to be an O so it's going to be a class and I have to have uh the",
    "start": "163920",
    "end": "170120"
  },
  {
    "text": "internal States various fields for position angle and whether the Pen's up and down or not and then I have my",
    "start": "170120",
    "end": "175879"
  },
  {
    "text": "methods move turn pen up and Pen down so that is my kind of API and notice that I have to use the",
    "start": "175879",
    "end": "182000"
  },
  {
    "text": "keyword mutable in F because F being a functional language things are not mutable by default everything is",
    "start": "182000",
    "end": "188519"
  },
  {
    "text": "immutable by default so if I do want to do mutability I actually have to ask for it it's a very unusual thing it's",
    "start": "188519",
    "end": "194680"
  },
  {
    "text": "normally bit of a code smell if you're doing mutable data so notice there's no set ofas right so how do I move something so",
    "start": "194680",
    "end": "202480"
  },
  {
    "text": "I'm going to log that I'm going to move and then I'm going to calculate the new position to where I'm going to move two and then if the pen state is down I'm",
    "start": "202480",
    "end": "208959"
  },
  {
    "text": "going to draw a line using the canvas and then I'm going to update the state because I need to keep track of of where I am I'm in a new",
    "start": "208959",
    "end": "215720"
  },
  {
    "text": "position now that's the move implementation now this backwards Arrow by the way is F's way of doing",
    "start": "215720",
    "end": "222319"
  },
  {
    "text": "assignment because again you don't normally mutate things there's actually a special symbol to set a value a",
    "start": "222319",
    "end": "228200"
  },
  {
    "text": "mutable value Okay so we've got the loger and the canvas now these are Global",
    "start": "228200",
    "end": "235200"
  },
  {
    "text": "dependencies and I've hardcoded them in the code so that's bad and we will fix",
    "start": "235200",
    "end": "240360"
  },
  {
    "text": "this later on but for now I've just sort of hardcoded it uh let's look at the turn implementation so again I'm going",
    "start": "240360",
    "end": "247400"
  },
  {
    "text": "to log it and I'm going to do the calculation of what the new angle is you know and then I'm going to again update the state so it's now pointing to a New",
    "start": "247400",
    "end": "254640"
  },
  {
    "text": "Direction uh and I update the mutable state to do that and so on and so forth the pen up and Pen down I just change",
    "start": "254640",
    "end": "260840"
  },
  {
    "text": "the state I don't actually do anything and so these ones just up updating the state they're not actually doing",
    "start": "260840",
    "end": "266520"
  },
  {
    "text": "something this us L one now how do I actually use this thing well um let's",
    "start": "266520",
    "end": "272160"
  },
  {
    "text": "say I want to draw a triangle so I construct a turtle uh and then I move it",
    "start": "272160",
    "end": "277880"
  },
  {
    "text": "a certain distance and then I turn 120 Dees and I move another distance and 120 degrees and move this so so I should be",
    "start": "277880",
    "end": "284080"
  },
  {
    "text": "back home with at the zero point facing north orever right so that is how you",
    "start": "284080",
    "end": "289120"
  },
  {
    "text": "would write some code using a an objectoriented Turtle so let me do a",
    "start": "289120",
    "end": "294160"
  },
  {
    "text": "quick demo of this so you can show I can prove you I'm not just making this stuff up",
    "start": "294160",
    "end": "300880"
  },
  {
    "text": "so here is my uh my my turtle here and I'm just going to move this here right so I can move",
    "start": "302280",
    "end": "311240"
  },
  {
    "text": "and then I can turn and then I can move again and I can turn and I can move and I can move and",
    "start": "311240",
    "end": "319000"
  },
  {
    "text": "move and so on so that's that working and if I want to construct a uh a thing",
    "start": "319000",
    "end": "326000"
  },
  {
    "text": "like drawing a triangle I can just write a little uh function that contains or method that contains all the operations",
    "start": "326000",
    "end": "332199"
  },
  {
    "text": "to run to do a triangle but notice this this operation is not actually a method on the T on the turtle I have to write",
    "start": "332199",
    "end": "339120"
  },
  {
    "text": "as a separate piece of code and that I'll talk about that in a minute okay so the pros and cons well",
    "start": "339120",
    "end": "345600"
  },
  {
    "text": "everyone knows pretty much how this works nowadays everyone's familiar with oo um I was around long enough that",
    "start": "345600",
    "end": "351600"
  },
  {
    "text": "people didn't used to know oo and it had to learn it was the new trendy things like functional program is or whatever",
    "start": "351600",
    "end": "357199"
  },
  {
    "text": "anyway the downside of oo is it's a black box it's a stateful thing it's very hard to test I've got no sets and",
    "start": "357199",
    "end": "364319"
  },
  {
    "text": "gets how would I test that the angle logic is working how would I test that the moving logic is working I can't",
    "start": "364319",
    "end": "369960"
  },
  {
    "text": "really because it's all kind of you know internal to the object so a lot of people add back doors they'll add a GTO",
    "start": "369960",
    "end": "375880"
  },
  {
    "text": "in a set or they add some sort of thing where can for just for testing only there's some special thing and that's",
    "start": "375880",
    "end": "381360"
  },
  {
    "text": "you know that's not so good really is it um it's hard to work them it's hard to compose them together it's hard to like",
    "start": "381360",
    "end": "386400"
  },
  {
    "text": "move two turtles at once if I want to have a whole set of turtles it would be kind of tricky right they're",
    "start": "386400",
    "end": "391560"
  },
  {
    "text": "not really composable and if I want to do something like a userdefined method like a triangle or a square that's a",
    "start": "391560",
    "end": "398440"
  },
  {
    "text": "separate thing um I can't really add it as a property of the turtle because it's you know encapsulated so that's why in C",
    "start": "398440",
    "end": "405440"
  },
  {
    "text": "you have extension methods to do this kind of thing so but that's kind of hack it's a work around how object oriented",
    "start": "405440",
    "end": "411800"
  },
  {
    "text": "program doesn't do this and of course we've got these hardcoded dependencies which are bad now let's look at abstract",
    "start": "411800",
    "end": "417680"
  },
  {
    "text": "data Turtle so data types are where the data is separate from the behavior but",
    "start": "417680",
    "end": "423080"
  },
  {
    "text": "it's still basically the same idea as oo you have this encapsulate encapsulated uh State um and you have behavior that",
    "start": "423080",
    "end": "430639"
  },
  {
    "text": "works with this state and you can't really see inside the state but in abstract data type the things are",
    "start": "430639",
    "end": "436440"
  },
  {
    "text": "separate so you have your data structure and you have your uh methods or actions that work on that data structure and",
    "start": "436440",
    "end": "441720"
  },
  {
    "text": "they're independent because you have some sort of opaque data structure so if you ever worked with a file handle or",
    "start": "441720",
    "end": "447639"
  },
  {
    "text": "some sort of pointer to some data structure that you can't actually see what's in it then that's what an abstract data type is so let's look at",
    "start": "447639",
    "end": "454680"
  },
  {
    "text": "our Turtle version of this we have a turtle handle I'm going to call it so it's opaque nobody can see inside it",
    "start": "454680",
    "end": "460440"
  },
  {
    "text": "other than the other Turtle functions so it's very similar and then the Behavior now we have the API but the",
    "start": "460440",
    "end": "467599"
  },
  {
    "text": "API the handle is passed into every single function in the API so the API",
    "start": "467599",
    "end": "473720"
  },
  {
    "text": "are it's not object oriented you still have to pass in the handle but you don't know what's inside the handle so it's",
    "start": "473720",
    "end": "479039"
  },
  {
    "text": "still kind of safe in terms of working with it so again things like FAL handles and stuff work the same",
    "start": "479039",
    "end": "484759"
  },
  {
    "text": "way and again to use it I can um pull it",
    "start": "484759",
    "end": "490400"
  },
  {
    "text": "with a handle now notice in this one the triangle it passes in a handle so the",
    "start": "490400",
    "end": "496599"
  },
  {
    "text": "way you call a triangle is just the way you call any of the other ones the handle is the first parameter so you can",
    "start": "496599",
    "end": "501680"
  },
  {
    "text": "actually add the triangle to the set to the module of all the other actions and and the user really can't tell the",
    "start": "501680",
    "end": "507120"
  },
  {
    "text": "difference from their point of view it works exactly the same way which is different from the oo thing where you have to have extension",
    "start": "507120",
    "end": "512839"
  },
  {
    "text": "methods pros and cons um very simple um it does force composition over",
    "start": "512839",
    "end": "519159"
  },
  {
    "text": "inheritance because there's no oo you can't inherit a turtle and people who",
    "start": "519159",
    "end": "524200"
  },
  {
    "text": "are kind of anti- inheritance now so it's probably a good thing so you can't do inheritance uh and the functions like",
    "start": "524200",
    "end": "529360"
  },
  {
    "text": "I said they're free to be moved around you can organize the functions in lots of different ways because they're not tied to the same they're not tied to be",
    "start": "529360",
    "end": "534959"
  },
  {
    "text": "part of the class so refactoring is a lot easier and again you can add user defin Behavior a bit more easily again",
    "start": "534959",
    "end": "541839"
  },
  {
    "text": "it's still stateful still hard to test just like o right functional Turtle whoops I didn't ring the bell functional",
    "start": "541839",
    "end": "548440"
  },
  {
    "text": "Turtle so functional Turtles things are mutable and um you in function program",
    "start": "548440",
    "end": "555640"
  },
  {
    "text": "we use everything's a function there's no methods all the data is IM mutable and there's no internal",
    "start": "555640",
    "end": "560720"
  },
  {
    "text": "state so you as the client of the thing you have to keep track of the state which can be good and bad as we'll see",
    "start": "560720",
    "end": "567320"
  },
  {
    "text": "so as a client I call the turtle function it gives me back the new state it gives me back where it's moved to what the new angle is and then I use",
    "start": "567320",
    "end": "574040"
  },
  {
    "text": "that state and I pass it in and it gives me back some new state so there's this back and forth between me as the client",
    "start": "574040",
    "end": "580760"
  },
  {
    "text": "having to keep track of what the state is so again if if I look at the data structure it's very very similar except",
    "start": "580760",
    "end": "586560"
  },
  {
    "text": "this time it's not mutable it's an immutable data structure and so it can be public M because people aren't going",
    "start": "586560",
    "end": "591959"
  },
  {
    "text": "to mess with it I mean there's no way they can change it so there's no no reason to see it kind of encapsulated anymore and then here's my behavior",
    "start": "591959",
    "end": "598880"
  },
  {
    "text": "again I have these functions that take the state as a parameter and return a",
    "start": "598880",
    "end": "603920"
  },
  {
    "text": "new state so this is the difference between the other ones where the state is immutable I'm not changing the state",
    "start": "603920",
    "end": "609120"
  },
  {
    "text": "I pass in the state but like the output is a new state it's a it's a clone of the original one but it's different",
    "start": "609120",
    "end": "615079"
  },
  {
    "text": "right but I can't change the original one because it's immutable so everything takes in a state as a parameter and it returns a new",
    "start": "615079",
    "end": "621839"
  },
  {
    "text": "state as an as an output so if you look at the code for how you might draw a triangle you take",
    "start": "621839",
    "end": "628800"
  },
  {
    "text": "the first State you pass it into move and that gives you the new state and then you pass that into turn and that",
    "start": "628800",
    "end": "633959"
  },
  {
    "text": "gives you another state and so on and so forth this is what it looks like uh drawing a triangle now this is great for",
    "start": "633959",
    "end": "640519"
  },
  {
    "text": "testing because it's very explicit if I want to see you know what does the move do I pass in this state and I expect you",
    "start": "640519",
    "end": "646200"
  },
  {
    "text": "know I can actually look at the output and see exactly what it is however it is kind of ugly and not as nice as the O",
    "start": "646200",
    "end": "653120"
  },
  {
    "text": "version can we make this nicer and the answer is yes we can because if you think about these",
    "start": "653120",
    "end": "658480"
  },
  {
    "text": "functions where they have the state as an input and the state as the output and I have another function with the state as input and state as output I can",
    "start": "658480",
    "end": "665200"
  },
  {
    "text": "connect them together by taking the output of one and feeding into the input of the other and that is called piping",
    "start": "665200",
    "end": "671680"
  },
  {
    "text": "in F and it's if you've done Unix pipes or Linux pipes it's the same thing you take the output something and feed it into the input of the other thing so if",
    "start": "671680",
    "end": "678399"
  },
  {
    "text": "I use piping I can take the output of the initial State Pipe it into the move function take the output of that pipe it",
    "start": "678399",
    "end": "684920"
  },
  {
    "text": "into the turn function take the output of that and so on and so forth so this looks a much cleaner and this vertical bar with the angle",
    "start": "684920",
    "end": "691560"
  },
  {
    "text": "bracket that's F's pipe op it's not just a vertical bar it's slightly different so it actually looks much nicer now and",
    "start": "691560",
    "end": "698000"
  },
  {
    "text": "piping is really the standard way of doing things in F and it's becoming popular in other languages now other",
    "start": "698000",
    "end": "703680"
  },
  {
    "text": "people use piping as well so this is much nicer to read and all that whole state thing has gone away so almost",
    "start": "703680",
    "end": "710240"
  },
  {
    "text": "looks like a code now what's the advantage of functional programming much much much easier to reason about because",
    "start": "710240",
    "end": "717079"
  },
  {
    "text": "everything's immutable much much easier did a test because everything's stateless and uh things are composable",
    "start": "717079",
    "end": "723200"
  },
  {
    "text": "so if I have two turtles I could easily just combine the two functions to make a bigger function that works on two turtles at once so very easy now the",
    "start": "723200",
    "end": "730040"
  },
  {
    "text": "downside is the client has to keep track of the state and of course we've still got these hard coded dependencies so one",
    "start": "730040",
    "end": "735800"
  },
  {
    "text": "of the things in function programming is all the workarounds we use to hide the ugliness of keeping track of all the",
    "start": "735800",
    "end": "742519"
  },
  {
    "text": "stuff right next let's do some more complex Turtles we're going to be",
    "start": "742519",
    "end": "748000"
  },
  {
    "text": "working with state in a more way we're going to be working errors and we're going to be working with async so the state the state monad this",
    "start": "748000",
    "end": "756360"
  },
  {
    "text": "is a monad word and this is all about how you thread State behind the scenes",
    "start": "756360",
    "end": "761519"
  },
  {
    "text": "so let's say we have a new requirement that there's some sort of boundary and if you hit the boundary you have to stop",
    "start": "761519",
    "end": "768120"
  },
  {
    "text": "you're not allowed to move anymore so in terms of our API we actually going to",
    "start": "768120",
    "end": "773320"
  },
  {
    "text": "return the actual distance moved which might not be the same as the distance requested so our API is going to return",
    "start": "773320",
    "end": "779240"
  },
  {
    "text": "the state but it's also going to return what you actually did okay so it's going to return a pair of things so if we look",
    "start": "779240",
    "end": "785440"
  },
  {
    "text": "at the code there's our initial State Now we move we get a pair back we get",
    "start": "785440",
    "end": "790600"
  },
  {
    "text": "the actual distance and the new state and then we might make some decisions base if the distance is not what we",
    "start": "790600",
    "end": "796720"
  },
  {
    "text": "expected we might for you know log it as an error we might turn it so it doesn't hit the wall again or something anyway",
    "start": "796720",
    "end": "802839"
  },
  {
    "text": "so you know and then we run the move again and we get the actual distance moved again and so on and so forth so",
    "start": "802839",
    "end": "808920"
  },
  {
    "text": "this this is what it would look like kind of the crude way of implementing this so again this is good for testing",
    "start": "808920",
    "end": "814920"
  },
  {
    "text": "because I get everything's extremely explicit there's no magic going on if I want to test whether the move function",
    "start": "814920",
    "end": "820360"
  },
  {
    "text": "hits the wall I can pass in something near the wall and I can see the actual distance is moved it's fantastic but",
    "start": "820360",
    "end": "826240"
  },
  {
    "text": "it's really ugly again really ugly so this return pair this is annoying",
    "start": "826240",
    "end": "831600"
  },
  {
    "text": "because it stops the whole piping we can't use piping because we're not just returning the state that we can feed in",
    "start": "831600",
    "end": "838000"
  },
  {
    "text": "we're returning a a pair of things and we and we only one of them has to go down but the other one can't so can we make this look nicer and",
    "start": "838000",
    "end": "846040"
  },
  {
    "text": "the answer is yes we can so this is one of the first tricks that functional programmers have which",
    "start": "846040",
    "end": "852360"
  },
  {
    "text": "is transforming a complicated function into another kind of function that works better so our function has the state and",
    "start": "852360",
    "end": "859639"
  },
  {
    "text": "the input like the distance to move and it's now got kind of two outputs right the new turtle State and now the output",
    "start": "859639",
    "end": "865800"
  },
  {
    "text": "of the thing which is the actual distance moved and that does that's ugly but what we can do is transform it into",
    "start": "865800",
    "end": "873079"
  },
  {
    "text": "a function which has just a one input just the parameter input parameter and it returns a new function so the second",
    "start": "873079",
    "end": "880480"
  },
  {
    "text": "parameter the turtle state is actually saved for later so this thing of turning",
    "start": "880480",
    "end": "886279"
  },
  {
    "text": "a two parameter function into a one parameter function which returns another one parameter function is called currying really common in functional",
    "start": "886279",
    "end": "893079"
  },
  {
    "text": "programming so if you think about our Turtle function like our move function now we have it you pass in the distance",
    "start": "893079",
    "end": "899160"
  },
  {
    "text": "and it returns this new function it doesn't return the actual distance move it returns a function which has the",
    "start": "899160",
    "end": "904680"
  },
  {
    "text": "state as a parameter and we can then take that function and give it a name we're going to wrap it up and call it State okay but",
    "start": "904680",
    "end": "912360"
  },
  {
    "text": "now what we've done is we have a um this function has a one input and one output",
    "start": "912360",
    "end": "919160"
  },
  {
    "text": "so this is good it sounds like we can sort of start piping them inputs and outputs together now I actually have a",
    "start": "919160",
    "end": "924440"
  },
  {
    "text": "whole talk on state monad called the monad so really it's just you know I'm",
    "start": "924440",
    "end": "930560"
  },
  {
    "text": "really just skimming the very surface here so obviously if you don't understand what's going on don't worry about it I just want to show you the concept even the basic idea now what you",
    "start": "930560",
    "end": "938040"
  },
  {
    "text": "can do is a nice trick where you can create something called a state expression and it will hide the state",
    "start": "938040",
    "end": "946040"
  },
  {
    "text": "behind the scenes so with a state expression it will keep track of the state for you and you write the code as",
    "start": "946040",
    "end": "952720"
  },
  {
    "text": "if the state wasn't there anymore so you notice that I can say move and I'm not passing the state in and when I get the",
    "start": "952720",
    "end": "959759"
  },
  {
    "text": "dist when I get the distance actual distance moved the state isn't there anymore so I'm I'm working with everything other than the state the",
    "start": "959759",
    "end": "965720"
  },
  {
    "text": "state is sort of being threaded through behind the scenes so I can write all the logic I did before but without having to",
    "start": "965720",
    "end": "972800"
  },
  {
    "text": "worry where the state is so this is called a state expression it's something that FP",
    "start": "972800",
    "end": "978240"
  },
  {
    "text": "has um and actually hascal and Scala most functional languages have an equivalent hascal has do notation and",
    "start": "978240",
    "end": "983759"
  },
  {
    "text": "Scara has four comprehensions and so on so it's a really really common technique because it's such an annoying problem in functional programming that people have",
    "start": "983759",
    "end": "989519"
  },
  {
    "text": "developed tricks to work with it so this is the F version of that now if we look at the the original oo version where you",
    "start": "989519",
    "end": "997040"
  },
  {
    "text": "know if it's if the distance is wrong we're going to throw an we're going to log an error and if we look at the state expression version where the distance is",
    "start": "997040",
    "end": "1003680"
  },
  {
    "text": "wrong we're going to log an error it looks exactly the same it looks very not exactly the same it's very very close so",
    "start": "1003680",
    "end": "1010000"
  },
  {
    "text": "it looks very similar to the imperative version but there's a big difference the big difference is the O version is is",
    "start": "1010000",
    "end": "1017079"
  },
  {
    "text": "the state is mutable and I can't test it because it's not actually returning the state right it's just doing it now in",
    "start": "1017079",
    "end": "1024240"
  },
  {
    "text": "the uh State expression the this version it is actually returning the state so if",
    "start": "1024240",
    "end": "1029360"
  },
  {
    "text": "I wanted to take this function I could test it on its own and it would return the state so it is actually much much",
    "start": "1029360",
    "end": "1035839"
  },
  {
    "text": "more testable but when I use it inside this kind of state expression all that",
    "start": "1035839",
    "end": "1041720"
  },
  {
    "text": "state logic is hidden away from me so I can actually use it like like as just regular programming but it's just it's",
    "start": "1041720",
    "end": "1047640"
  },
  {
    "text": "keeping track of that stuff so much more testable and you know you use this trick and it sort of looks like the original",
    "start": "1047640",
    "end": "1053160"
  },
  {
    "text": "imperative version so pros and cons of State uh it does look imperative",
    "start": "1053160",
    "end": "1058320"
  },
  {
    "text": "preserves immutability functions are still composable functions are easy to test um downside it's much harder to",
    "start": "1058320",
    "end": "1065840"
  },
  {
    "text": "implement now it's getting kind of tricky okay next error handling same kind of",
    "start": "1065840",
    "end": "1071480"
  },
  {
    "text": "thing um we have a turtle function this time instead of returning uh always",
    "start": "1071480",
    "end": "1077039"
  },
  {
    "text": "returning some it's going to sometimes return successful and sometimes it's going to fail so in functional program",
    "start": "1077039",
    "end": "1082280"
  },
  {
    "text": "we don't normally throw exceptions if it's an for simple errors we return a choice which is either is it succeeded",
    "start": "1082280",
    "end": "1089440"
  },
  {
    "text": "or it failed it's okay or it's an error and if it's okay there's some data with the okay which is the state and if it's",
    "start": "1089440",
    "end": "1095280"
  },
  {
    "text": "an error there's some data with that which is the uh the information about the error so this is I like to call",
    "start": "1095280",
    "end": "1102360"
  },
  {
    "text": "these Choice types because it's a choice between two things um in F they're actually called discriminated unions and",
    "start": "1102360",
    "end": "1108280"
  },
  {
    "text": "other people might call them sum suum types but they're really really useful for domain modeling in my book my domain",
    "start": "1108280",
    "end": "1114360"
  },
  {
    "text": "modeling book it's all about this stuff it's very useful so let's look at the implementation with this so you know",
    "start": "1114360",
    "end": "1121360"
  },
  {
    "text": "given the actual distance move didn't match I'm going to say I'm going to return an error and it's out of bounds",
    "start": "1121360",
    "end": "1127000"
  },
  {
    "text": "say or if it did work I'm going to say everything's good and I've just updated the state so it's either success or",
    "start": "1127000",
    "end": "1133320"
  },
  {
    "text": "failure basically depending on whether um it worked or not so the nearest",
    "start": "1133320",
    "end": "1139039"
  },
  {
    "text": "equivalent of this in O would be something like an enum or maybe subclasses with each different data in",
    "start": "1139039",
    "end": "1145120"
  },
  {
    "text": "each subass it's not a standard feature in in object oriented languages so again we have the same",
    "start": "1145120",
    "end": "1150559"
  },
  {
    "text": "thing if I try and use it I get the results if it's an error you know I have to test every single time I have to do",
    "start": "1150559",
    "end": "1156919"
  },
  {
    "text": "this kind of switch statement or a match statement is it an error is it successful okay I do it again is it an",
    "start": "1156919",
    "end": "1162679"
  },
  {
    "text": "error is it successful and again this is the correct way of doing it but it's",
    "start": "1162679",
    "end": "1167799"
  },
  {
    "text": "really ugly really ugly to use so behind the scenes this is going on but is there a way to simplify it and the answer is",
    "start": "1167799",
    "end": "1175000"
  },
  {
    "text": "yes we can create something called a result expression and in this case the",
    "start": "1175000",
    "end": "1180120"
  },
  {
    "text": "result logic is hidden behind the scenes so every time you do something if it's an error you kind of skip everything",
    "start": "1180120",
    "end": "1187880"
  },
  {
    "text": "else so if it if it succeeds it's good and if it's an error it kind of Skips the rest of the code so behind the",
    "start": "1187880",
    "end": "1193600"
  },
  {
    "text": "scenes the error handling is being done but when you write the code you can sort of focus on the happy path so this is",
    "start": "1193600",
    "end": "1199840"
  },
  {
    "text": "called the result expression and like I say the errors are handled it's not like ignoring the errors the errors are",
    "start": "1199840",
    "end": "1205520"
  },
  {
    "text": "managed behind the scenes but you don't have to see them when you write your code you can focus on the happy path so",
    "start": "1205520",
    "end": "1211480"
  },
  {
    "text": "that's good and I have a whole talk about this called Railway ored programming now notice we still have",
    "start": "1211480",
    "end": "1217240"
  },
  {
    "text": "this ugly State everywhere we keep passing in the state every single function can we fix that yes we can we",
    "start": "1217240",
    "end": "1223200"
  },
  {
    "text": "can combine them together and have a thing which is the result and the state and now we're getting back to this sort",
    "start": "1223200",
    "end": "1230440"
  },
  {
    "text": "of standard imperative model that we had in the O thing but unlike the O version every single thing here is doing error",
    "start": "1230440",
    "end": "1237240"
  },
  {
    "text": "handling is managing the state everything's immutable it's really easy to test so it looks like imperative code",
    "start": "1237240",
    "end": "1242919"
  },
  {
    "text": "but it's actually not ah okay so advantages again we're",
    "start": "1242919",
    "end": "1248919"
  },
  {
    "text": "not using exceptions we're actually returning a choice between success or failure it's almost like we turning a Boolean uh everything looks like a happy",
    "start": "1248919",
    "end": "1255679"
  },
  {
    "text": "path but we are handling errors probably again it's a little more awkward to use um but there we go okay next async",
    "start": "1255679",
    "end": "1264080"
  },
  {
    "text": "Turtle so what if the turtle is actually a physical turtle that was being moving around the room like like a Roomba or",
    "start": "1264080",
    "end": "1269600"
  },
  {
    "text": "something um you'd have to make a call and let's say it's an asynchronous call so you don't actually get the state so",
    "start": "1269600",
    "end": "1275520"
  },
  {
    "text": "way you have to wait for the state to come is a call back so given that it finishes I get the new state and I make",
    "start": "1275520",
    "end": "1281520"
  },
  {
    "text": "another move and then I have to wait for that to finish and I have to wait for that to finish and I have to wait for that to finish and this whole thing of",
    "start": "1281520",
    "end": "1288080"
  },
  {
    "text": "these nest async callbacks uh is really common problem",
    "start": "1288080",
    "end": "1293760"
  },
  {
    "text": "and um you know this is just the problem with async it's really messy um and this actually has a name which is the Pyramid",
    "start": "1293760",
    "end": "1300360"
  },
  {
    "text": "of Doom because these nestings get bigger and bigger and bigger and you you know you got 10 callbacks and they get",
    "start": "1300360",
    "end": "1305919"
  },
  {
    "text": "really bad so everyone thinks this is uh I this is the right way to do it but everyone thinks this is really ugly is",
    "start": "1305919",
    "end": "1311400"
  },
  {
    "text": "there a nicer way of doing it yes there is so there's something called an async expression and again it gets with it",
    "start": "1311400",
    "end": "1318039"
  },
  {
    "text": "hides the a syn logic behind the scenes so and then I've got the state in",
    "start": "1318039",
    "end": "1323919"
  },
  {
    "text": "here right now this this what's going on behind the scenes is very much equivalent to the asyn of weight that",
    "start": "1323919",
    "end": "1329279"
  },
  {
    "text": "you get in C and uh I I think other languages are beginning to add this feature because it's a really cool",
    "start": "1329279",
    "end": "1334880"
  },
  {
    "text": "feature hid hides all the nness of Asing stuff and again we've got the state logic let's get rid of the states blah",
    "start": "1334880",
    "end": "1341000"
  },
  {
    "text": "blah blah so we have an async States and so often in in functional program you have these things kind of piled together",
    "start": "1341000",
    "end": "1346720"
  },
  {
    "text": "you have an async State result in all you know and so you're still working for those stuff but you're handling the",
    "start": "1346720",
    "end": "1351960"
  },
  {
    "text": "errors you're handling the async you're handling the state in a very nice way right",
    "start": "1351960",
    "end": "1357679"
  },
  {
    "text": "so this pattern is called monads so monad is just a generic sort of pattern",
    "start": "1357679",
    "end": "1363159"
  },
  {
    "text": "for handling these things behind the scenes these effects like you know results and and errors and RAC Sy and",
    "start": "1363159",
    "end": "1370039"
  },
  {
    "text": "stuff it's just a common way to handle these things to chain these things together in a nice looking way so your code looks much nicer so that's what",
    "start": "1370039",
    "end": "1375840"
  },
  {
    "text": "monads are for so we're using a lot of composition right because everything is an output",
    "start": "1375840",
    "end": "1381120"
  },
  {
    "text": "you can always pipe it into the next function um we've got a lot of explicitness uh right everything there's",
    "start": "1381120",
    "end": "1387120"
  },
  {
    "text": "nothing hidden inside the object all the state is explicit there's no mutation all the errors are explicit there's no",
    "start": "1387120",
    "end": "1393159"
  },
  {
    "text": "exceptions so that this doing this stuff does make it look ugly but then we have these special techniques to hide the",
    "start": "1393159",
    "end": "1398480"
  },
  {
    "text": "ugliness with monads and and uh computation expressions and things like that so Monas we these are all three",
    "start": "1398480",
    "end": "1404840"
  },
  {
    "text": "things we're using Monas next right now let's talk about",
    "start": "1404840",
    "end": "1410080"
  },
  {
    "text": "decoupling so we'll talk about batch processing batch processing actor model event sourcing and stream processing",
    "start": "1410080",
    "end": "1417240"
  },
  {
    "text": "right so um we've got all this state working you know going around so one way",
    "start": "1417240",
    "end": "1422720"
  },
  {
    "text": "is to hide the mutable state from you which is the O way the problem with that is very hard to test the next thing is",
    "start": "1422720",
    "end": "1428919"
  },
  {
    "text": "for the caller to keep track of the state everywhere which is the functional way which we've been doing so far but",
    "start": "1428919",
    "end": "1434559"
  },
  {
    "text": "there's another way which is to have someone else deal with it and not be your problem and that's nice because just it's not",
    "start": "1434559",
    "end": "1440640"
  },
  {
    "text": "your problem so we'll look at a couple of ways of doing that we're going to look at batching we'll look at agents and so on so let's start with batches",
    "start": "1440640",
    "end": "1448760"
  },
  {
    "text": "batch how does the uh batch process help you avoid the state well what we're",
    "start": "1448760",
    "end": "1454200"
  },
  {
    "text": "going to do is we're going to have a special intermediary now that's a batch Runner and we're going to send it a",
    "start": "1454200",
    "end": "1459360"
  },
  {
    "text": "command and it's going to do the running of the turtle for us and it will keep track of the state for us so we'll",
    "start": "1459360",
    "end": "1465120"
  },
  {
    "text": "started with a we start with batches because that's the simplest one and it's going to run and it's going to we're going to send it you know do this do",
    "start": "1465120",
    "end": "1471360"
  },
  {
    "text": "this do this it's going to run Loop over all of them and keep track of the state Force while it while it do runs it so",
    "start": "1471360",
    "end": "1478320"
  },
  {
    "text": "that's how it runs now we're going to send something down the wire if it's a remote call how do we convert a function",
    "start": "1478320",
    "end": "1486000"
  },
  {
    "text": "into data which is called defunctionalization that's another buzz word you'll hear a lot so these are the",
    "start": "1486000",
    "end": "1491720"
  },
  {
    "text": "functions I want to call in my API but I can't really send a function down the wire so what we do is we create a choice",
    "start": "1491720",
    "end": "1498919"
  },
  {
    "text": "type which is a one toone correspondence with the functions that we want to call",
    "start": "1498919",
    "end": "1504399"
  },
  {
    "text": "so for the move function that we want to call which has a distance parameter we're going to create a choice called move and it's going to have a distance",
    "start": "1504399",
    "end": "1510480"
  },
  {
    "text": "parameter and then to you know the turn function which has an angle is going to have a choice called turn with an angle",
    "start": "1510480",
    "end": "1517159"
  },
  {
    "text": "and these are this second one is a data structure it's not it's no functions it's literally just a data structure",
    "start": "1517159",
    "end": "1522559"
  },
  {
    "text": "again you could think of it as a bunch of subclasses so these Choice types pop up all the time you serialize them put them",
    "start": "1522559",
    "end": "1528600"
  },
  {
    "text": "a wi and you pick them on the other Bend so here's a bunch of commands that",
    "start": "1528600",
    "end": "1534000"
  },
  {
    "text": "I once send to the batch processor and these look like functions but it's",
    "start": "1534000",
    "end": "1539240"
  },
  {
    "text": "actually data right so this is a these are the same what six different data",
    "start": "1539240",
    "end": "1545440"
  },
  {
    "text": "structures put into a list sent down serialized and sent down the wire now on the batch Runner side it picks one of",
    "start": "1545440",
    "end": "1553120"
  },
  {
    "text": "these things off the wire and for each one it actually does the turtle operation and it's a onetoone",
    "start": "1553120",
    "end": "1559640"
  },
  {
    "text": "correspondence between what the choice was and what the turtle function is so if I get a move I call the turtle move",
    "start": "1559640",
    "end": "1566559"
  },
  {
    "text": "and if I get a turn I call the turn function and so on so this one toone correspondence between the data structure and the list of functions and",
    "start": "1566559",
    "end": "1574080"
  },
  {
    "text": "it's really common back and forth between functions to data and then data to functions very common trick so there",
    "start": "1574080",
    "end": "1581080"
  },
  {
    "text": "you go they're literally paired up designed to be exactly the same and then to run the whole thing I",
    "start": "1581080",
    "end": "1586840"
  },
  {
    "text": "just start with initial State and for each command I execute that and that gives me back a new state and I just Lo",
    "start": "1586840",
    "end": "1593880"
  },
  {
    "text": "Loop through things and I pass the state through each command in turn and that gives me the final answer so that's um",
    "start": "1593880",
    "end": "1600200"
  },
  {
    "text": "again the the batch Runner is handling all the state for me so that's the mutable version um and if you're a",
    "start": "1600200",
    "end": "1606000"
  },
  {
    "text": "functional programmer you'd use fold which is the immutable version of a loop so that's the that's the kind of",
    "start": "1606000",
    "end": "1613000"
  },
  {
    "text": "imperative version and that's the functional version and by the way if you ever do uh get into functional programming I highly recommend learning",
    "start": "1613000",
    "end": "1619360"
  },
  {
    "text": "all the collection classes because elction functions there's hundreds of them and they're all really useful this fold and map and all this stuff right so",
    "start": "1619360",
    "end": "1627559"
  },
  {
    "text": "pros and cons what's nice about the batch thing is I don't care how the turtle works right I'm just sending it",
    "start": "1627559",
    "end": "1633399"
  },
  {
    "text": "these data structures and how it actually works behind the SC I don't know it's a lot simpler to work than Mo ads for managing State you have somebody",
    "start": "1633399",
    "end": "1639919"
  },
  {
    "text": "else managing state for you and your code is very simple uh this is batch oriented so I can't make a decision",
    "start": "1639919",
    "end": "1647080"
  },
  {
    "text": "based on the response so if I move something and it's not allowed to move I can't there's no way I can like make a",
    "start": "1647080",
    "end": "1652399"
  },
  {
    "text": "decision based on that so this is you know we'll talk about a way fixing that in a minute there's no control",
    "start": "1652399",
    "end": "1658960"
  },
  {
    "text": "flow right now actor model basically the same except it's real time rather than",
    "start": "1658960",
    "end": "1666640"
  },
  {
    "text": "batch so the actor model is very similar except that you you communicate using a",
    "start": "1666640",
    "end": "1671880"
  },
  {
    "text": "q a message queue right so I put the command on the que the actor is reading from the que and then processing each",
    "start": "1671880",
    "end": "1678279"
  },
  {
    "text": "event as it comes in each command as it comes in so again the actor is has its own internal State uh and this is a",
    "start": "1678279",
    "end": "1685600"
  },
  {
    "text": "great way to actually to work with um uh mutable state in a nice clean way",
    "start": "1685600",
    "end": "1691279"
  },
  {
    "text": "because nobody's allowed to touch again it's encapsulated you have to send a message to the actor to actually do something and because the ACT because",
    "start": "1691279",
    "end": "1697640"
  },
  {
    "text": "it's cued uh it's linear it's linear it's linear so the only one person at",
    "start": "1697640",
    "end": "1703320"
  },
  {
    "text": "time is changing state so you're not going to have any issues with having to lock things or having any kind of uh race conditions or something like that",
    "start": "1703320",
    "end": "1709600"
  },
  {
    "text": "so that's really nice so here's the actor it reads from a que and if if the Q is empty it blocks right because it's",
    "start": "1709600",
    "end": "1715440"
  },
  {
    "text": "just a big loop and then it does literally the same thing if it's a move data structure we we call the move and",
    "start": "1715440",
    "end": "1721120"
  },
  {
    "text": "so on so forth and then it just goes back to the beginning with the new state and waits for the next command to come",
    "start": "1721120",
    "end": "1728120"
  },
  {
    "text": "in so again very similar logic which is why I put them right next to each other",
    "start": "1728120",
    "end": "1734480"
  },
  {
    "text": "right um yeah and the loop now the the state just put the I don't need to have the mutable State because it State just",
    "start": "1734480",
    "end": "1740240"
  },
  {
    "text": "comes around for the next time in the loop so here I'm calling it post rather",
    "start": "1740240",
    "end": "1745720"
  },
  {
    "text": "than I'm actually posting this uh little thing because I'm posting it to a message Cube so each one of these things",
    "start": "1745720",
    "end": "1751240"
  },
  {
    "text": "is actually going to work in real time I when as soon as I send the message hopefully it'll pick it from the cube reasonably quickly and actually do the",
    "start": "1751240",
    "end": "1757600"
  },
  {
    "text": "thing but if I send it if I send too many things because it's cued it's it's decouples it's buffered it's async you",
    "start": "1757600",
    "end": "1763960"
  },
  {
    "text": "know if the a goes down or has to reboot or something it doesn't affect me as a client it just means my stuff is",
    "start": "1763960",
    "end": "1769200"
  },
  {
    "text": "buffered for when it comes back up again right pros and cons it's decoupled in space because it's a remote service",
    "start": "1769200",
    "end": "1775640"
  },
  {
    "text": "it's also decou in time because it's uh you know it's buffered it's asness it's",
    "start": "1775640",
    "end": "1780840"
  },
  {
    "text": "still again simpler than state moned so that's nice uh extra boiler plate needed",
    "start": "1780840",
    "end": "1786360"
  },
  {
    "text": "though so that's not so good right event sourcing all right now what is event",
    "start": "1786360",
    "end": "1793519"
  },
  {
    "text": "sourcing and why is it useful um so all these things the state been stored in",
    "start": "1793519",
    "end": "1798880"
  },
  {
    "text": "memory so what happens if you crash um how are you going to pers you really want to persist the state after",
    "start": "1798880",
    "end": "1805080"
  },
  {
    "text": "each action right so how are we going to do that so event souring is a event you could just store it in a database but",
    "start": "1805080",
    "end": "1810840"
  },
  {
    "text": "event sourcing is a great way to do this kind of thing because what you do is you store events you store the journey not",
    "start": "1810840",
    "end": "1817320"
  },
  {
    "text": "the destination you don't store the final result if you look at this chess game you don't in a in a chess game you",
    "start": "1817320",
    "end": "1823039"
  },
  {
    "text": "don't store what the final result of the game is you want to know how did it get there who who played which move at which",
    "start": "1823039",
    "end": "1828919"
  },
  {
    "text": "point right so those moves are events and if you want to record a chess game you want to record all the individual",
    "start": "1828919",
    "end": "1835120"
  },
  {
    "text": "moves you don't just you don't just want to have the final state of the board that's not very helpful uh here's another one let's say you have a bank",
    "start": "1835120",
    "end": "1840519"
  },
  {
    "text": "statement right I mean it's nice to know how much money you have but it's also nice to know what went in and what went",
    "start": "1840519",
    "end": "1845760"
  },
  {
    "text": "out and how much you know how much what you spent things on right so those are the events anything to do with money is",
    "start": "1845760",
    "end": "1850880"
  },
  {
    "text": "typically event sourced right any kind of accounting thing you add an event every time you don't just like store the",
    "start": "1850880",
    "end": "1857200"
  },
  {
    "text": "final amount of money you have so it's a really common technique so we're going to store the events and every time we",
    "start": "1857200",
    "end": "1863159"
  },
  {
    "text": "want to do something we're going to load up all the events and rebuild the state from the source so if we go to the bank",
    "start": "1863159",
    "end": "1868840"
  },
  {
    "text": "example if I want to know what my current balance is I literally load up all my events for this month or whatever",
    "start": "1868840",
    "end": "1874760"
  },
  {
    "text": "and then that gives you my current balance so I mean there's ways to optimize that but in general you can always do that and then after we've",
    "start": "1874760",
    "end": "1882000"
  },
  {
    "text": "process something we create a new event and we add that to the event store so here you go I send a command so I read",
    "start": "1882000",
    "end": "1888880"
  },
  {
    "text": "up all the previous events like in the chess game I load up all the previous events in the chess game to get what the current state of the game is and then I",
    "start": "1888880",
    "end": "1896039"
  },
  {
    "text": "execute the command and then that might give me a new event which I then save back to",
    "start": "1896039",
    "end": "1902120"
  },
  {
    "text": "disk right and then then that Loop just keeps going and going so that's how event sourcing",
    "start": "1902120",
    "end": "1907440"
  },
  {
    "text": "works so a command event and command are not quite the same thing when I talk about command is like I want you to do",
    "start": "1907440",
    "end": "1913080"
  },
  {
    "text": "something it's imperative I'm ordering I'm asking you to do something or ordering you to do something but that",
    "start": "1913080",
    "end": "1918320"
  },
  {
    "text": "doesn't always happen that's what I want to have happen an event is what actually happened I actually moved this distance",
    "start": "1918320",
    "end": "1924440"
  },
  {
    "text": "I actually turned this angle I actually did this thing because just because I wanted it to happen doesn't mean it actually happened",
    "start": "1924440",
    "end": "1931120"
  },
  {
    "text": "right so pros and cons of event sourcing again it's very decoupled uh it's",
    "start": "1931120",
    "end": "1936799"
  },
  {
    "text": "stateless so it's very easy if you it's very good to crash any kind of system which you need to crash and cover uh",
    "start": "1936799",
    "end": "1942440"
  },
  {
    "text": "it's very good if you need audit Trails or any kind of compliance any kind of traceability because you have every",
    "start": "1942440",
    "end": "1947919"
  },
  {
    "text": "every single thing that happen and if you wanted reports um you know of of what people did like Classic on a",
    "start": "1947919",
    "end": "1953799"
  },
  {
    "text": "website where do they click right not they just they order this thing but what other things did they order click on",
    "start": "1953799",
    "end": "1958880"
  },
  {
    "text": "before they order this thing you know that kind of thing so much more complex every time we do",
    "start": "1958880",
    "end": "1964120"
  },
  {
    "text": "something we're going to get more and more complex um storing stuff events can be tricky if you if you modify the data",
    "start": "1964120",
    "end": "1970200"
  },
  {
    "text": "structures it can get tricky with the versioning stream processing right so uh oh yeah I need to",
    "start": "1970200",
    "end": "1978559"
  },
  {
    "text": "ring the bell there we go stream processing so we've talked about event sourcing where uh but this is like event",
    "start": "1978559",
    "end": "1985320"
  },
  {
    "text": "sourcing but we put the things on a stream we don't just store it in our local database we publish them for other",
    "start": "1985320",
    "end": "1991080"
  },
  {
    "text": "people to look at and what that does is it means that I don't actually have to",
    "start": "1991080",
    "end": "1996360"
  },
  {
    "text": "do the actual work I can say I I I've done this thing somebody else can decide that means they need to move the piece",
    "start": "1996360",
    "end": "2002279"
  },
  {
    "text": "on the board I mean a good example is a is a chess game the chess game it you know that was just a list of events so",
    "start": "2002279",
    "end": "2008519"
  },
  {
    "text": "if I'm replaying the game myself I physically read the event and I physically move the piece to kind of",
    "start": "2008519",
    "end": "2013919"
  },
  {
    "text": "replay the game and then I get another event and I move the piece so I am the reading the stream of events and and",
    "start": "2013919",
    "end": "2019200"
  },
  {
    "text": "actually physically doing something based on receiving those events so it's quite common you have",
    "start": "2019200",
    "end": "2024880"
  },
  {
    "text": "people who generate events and other people who consume events and some people who transform events so you have",
    "start": "2024880",
    "end": "2030519"
  },
  {
    "text": "this whole system so let's say we have an event stream coming in and we have a uh that's coming from Upstream somehow",
    "start": "2030519",
    "end": "2037360"
  },
  {
    "text": "um and and then my little process is like not all the events are relevant to me so I'm going to filter out a lot of",
    "start": "2037360",
    "end": "2043120"
  },
  {
    "text": "them and only focus on the ones I care about um maybe I only care about Turtle commands and I don't care about other",
    "start": "2043120",
    "end": "2048480"
  },
  {
    "text": "commands that coming down the event stream right um so I'm going to handle it I'm going to put it in the event store just like we did with event",
    "start": "2048480",
    "end": "2054079"
  },
  {
    "text": "sourcing but this time the Event Source is also published for other people to",
    "start": "2054079",
    "end": "2059480"
  },
  {
    "text": "read so there can be another person Downstream who is now seeing these Turtle events happening and they say oh",
    "start": "2059480",
    "end": "2065079"
  },
  {
    "text": "yeah I'm interested in Turtle events I'm going to actually do things with these Turtle events so it's again it's more",
    "start": "2065079",
    "end": "2071960"
  },
  {
    "text": "complicated but you know sometimes it's quite useful uh where you have other you know each each person interprets the",
    "start": "2071960",
    "end": "2078118"
  },
  {
    "text": "events and creates new events for the next people down the the stream to read because it allows you for a lot of decoupling it's like one process can",
    "start": "2078119",
    "end": "2085118"
  },
  {
    "text": "focus on just the business Logic for this thing and someone else can focus on what do I actually do when I get the",
    "start": "2085119",
    "end": "2090398"
  },
  {
    "text": "event I might need to you know call an API or do a transaction or whatever so that's that's how it works",
    "start": "2090399",
    "end": "2097118"
  },
  {
    "text": "so let's look at the Turtle example so we I sent a command and it writes the event store but I'm not actually going",
    "start": "2097119",
    "end": "2103520"
  },
  {
    "text": "to move the turtle I'm just going to record the event and then what I can do is I can have Downstream",
    "start": "2103520",
    "end": "2110359"
  },
  {
    "text": "processors that work on those events in different ways so for example I have an auditing processor and all it does is",
    "start": "2110359",
    "end": "2117160"
  },
  {
    "text": "log the fact that that Turtle event happened that's my audit Trail right uh",
    "start": "2117160",
    "end": "2122920"
  },
  {
    "text": "I can have a canvas processor which takes all these events and draws them on the screen",
    "start": "2122920",
    "end": "2128200"
  },
  {
    "text": "uh and then I have a maybe a distance let me I don't want to run out of ink so I every you know I have to keep track of how much ink I've used so I keep track",
    "start": "2128200",
    "end": "2135119"
  },
  {
    "text": "of how many miles the turtle has done and you know that will give me a report on the total distance so and it doesn't",
    "start": "2135119",
    "end": "2140680"
  },
  {
    "text": "care about you know the distance procer doesn't care about turning the turtle doesn't care about pen up and down it just cares about it actually move right",
    "start": "2140680",
    "end": "2147800"
  },
  {
    "text": "so I'm actually going to do a demo of this in a minute but the important thing is that the the the Upstream processor",
    "start": "2147800",
    "end": "2154040"
  },
  {
    "text": "does not actually move the turtle all it does is it does the business Logic for for how a turtle might you know for the",
    "start": "2154040",
    "end": "2159920"
  },
  {
    "text": "events of moving a turtle but it doesn't actually move the turtle it's only the canvas processor that actually draws on the",
    "start": "2159920",
    "end": "2165200"
  },
  {
    "text": "screen so let me go a demo of this and I know I'm going really",
    "start": "2165200",
    "end": "2173040"
  },
  {
    "text": "fast I promised you I'd be going first so here we",
    "start": "2173040",
    "end": "2178359"
  },
  {
    "text": "go right so here is our here is our auditing",
    "start": "2179560",
    "end": "2185440"
  },
  {
    "text": "processor right there's the event stream and the way I'm going to act on the",
    "start": "2185440",
    "end": "2191119"
  },
  {
    "text": "event is just if it's a moved event I'm going to log it and if it's a turned event I'm going to log it and I'm going to say this is an audit Trail okay so",
    "start": "2191119",
    "end": "2197680"
  },
  {
    "text": "that's it that's the the auditing now the canvas processor is going to handle the same event stream H and it's going",
    "start": "2197680",
    "end": "2204560"
  },
  {
    "text": "to filter the events to only moved I don't care about I'm just going to draw lines on the canvas right I don't care",
    "start": "2204560",
    "end": "2211240"
  },
  {
    "text": "about the Angles and all stuff because it's already figured out the Upstream has already figured out all the angle stuff it's just literally I'm going to",
    "start": "2211240",
    "end": "2217119"
  },
  {
    "text": "move I'm going to draw a line from here to here so to act on a particular event",
    "start": "2217119",
    "end": "2222680"
  },
  {
    "text": "I'm just you're going to draw a line so I'm this this this one is not actually doing any of the turtle logic about you",
    "start": "2222680",
    "end": "2228599"
  },
  {
    "text": "know where should the line go to and should the pen be up and Pen be down that's done Upstream all this does is",
    "start": "2228599",
    "end": "2234920"
  },
  {
    "text": "handle drawing lines right so it's decoupled this is what I'm saying it's the logic of doing stuff is now decoupled from the action of doing it",
    "start": "2234920",
    "end": "2241920"
  },
  {
    "text": "and here's our distance travel processor again it's using the same event stream and again it only cares about mood",
    "start": "2241920",
    "end": "2247200"
  },
  {
    "text": "events doesn't care about um turning or anything and all it does is accumulate",
    "start": "2247200",
    "end": "2252920"
  },
  {
    "text": "the distance so far and print it out right so here is my command",
    "start": "2252920",
    "end": "2259319"
  },
  {
    "text": "Handler and there are no events so there's my event stream there's my auditing processor my canvas processor",
    "start": "2259319",
    "end": "2265680"
  },
  {
    "text": "and my distance and they're all subscribing to the same stream so again I can have multiple things all working",
    "start": "2265680",
    "end": "2270800"
  },
  {
    "text": "on the same stream right so there's my little canvas again and I'm going to turn",
    "start": "2270800",
    "end": "2277960"
  },
  {
    "text": "turn and I'm going to move and I'm going to turn and I'm going to",
    "start": "2277960",
    "end": "2283560"
  },
  {
    "text": "move right now notice you see the distance travel so far is 300 so it's",
    "start": "2283560",
    "end": "2290040"
  },
  {
    "text": "necess doing that the audit Ching is keeping track of the moving and it's it's keeping tracking the auditing and",
    "start": "2290040",
    "end": "2295880"
  },
  {
    "text": "the canvas one is generating the canvas so uh and if if I can look at the",
    "start": "2295880",
    "end": "2301280"
  },
  {
    "text": "event I can look inside the event store and see what events I've got so there's my moved event there's my turn turned",
    "start": "2301280",
    "end": "2307800"
  },
  {
    "text": "event there's my moved event there's my turned event and so on and so forth this is because I'm using floating point it's",
    "start": "2307800",
    "end": "2313560"
  },
  {
    "text": "rounded I should I need to fix that and make it more rounder right okay so um if I used a uh",
    "start": "2313560",
    "end": "2323839"
  },
  {
    "text": "do I have yeah so if I if I didn't have the canvas um uh processor and I just",
    "start": "2323839",
    "end": "2329680"
  },
  {
    "text": "did the um the distance processor it wouldn't show on the screen so let me do that see if I can",
    "start": "2329680",
    "end": "2336319"
  },
  {
    "text": "get that to work I'm just going to do the the distance processor and see if it works no because",
    "start": "2336319",
    "end": "2341880"
  },
  {
    "text": "it's it's going to need to why is that is not",
    "start": "2341880",
    "end": "2347920"
  },
  {
    "text": "uh I think i' I've got a hardcoded global variable but in theory it will actually keep track of the distance and",
    "start": "2347920",
    "end": "2353960"
  },
  {
    "text": "it it won't actually do the canvas because I didn't I never registered it right so that's that that's stream",
    "start": "2353960",
    "end": "2359920"
  },
  {
    "text": "processing so you can see it's getting more and more complicated right I said it's going to get more complicated so",
    "start": "2359920",
    "end": "2365400"
  },
  {
    "text": "it's event sourcing with extra work but the extra work again is it worth it it's",
    "start": "2365400",
    "end": "2370680"
  },
  {
    "text": "worth it if you really want to separate the if you really want to decouple the various things if you want to decouple",
    "start": "2370680",
    "end": "2375920"
  },
  {
    "text": "the the the logic part from the actions that you take and it may be that you need to take multiple actions and",
    "start": "2375920",
    "end": "2381079"
  },
  {
    "text": "different systems work on actions in different ways so this is very microservice friendly because each of",
    "start": "2381079",
    "end": "2386680"
  },
  {
    "text": "these stream processes could be a microservice so people using uh I guess but people use CFA this",
    "start": "2386680",
    "end": "2393040"
  },
  {
    "text": "way and they use uh rabbit mq and also I mean there I know I'm not up to I'm not up to the latest thing but whatever it",
    "start": "2393040",
    "end": "2398920"
  },
  {
    "text": "is people use it now of course it's more complex so don't do this just because it's cool I would never do this unless I",
    "start": "2398920",
    "end": "2405760"
  },
  {
    "text": "really really really needed to because it's really complicated but it's going to get even more complicated we haven't finished yet",
    "start": "2405760",
    "end": "2412000"
  },
  {
    "text": "okay so in the the these last few Turtles we've talked about you know consciously coupling we're passing data",
    "start": "2412000",
    "end": "2417920"
  },
  {
    "text": "around rather than passing functions around um and notice that the data store is also immutable so that's one of the",
    "start": "2417920",
    "end": "2423720"
  },
  {
    "text": "things about event sourcing unlike a kind of regular database where you replace what's in the database we're",
    "start": "2423720",
    "end": "2429800"
  },
  {
    "text": "adding to the database so what's in the database already never changes which is great for an audit Trail because I",
    "start": "2429800",
    "end": "2435839"
  },
  {
    "text": "guarantee that I'm never erasing anything there's a famous expression accountants don't use erasers they never",
    "start": "2435839",
    "end": "2442240"
  },
  {
    "text": "erase or delete anything they always just add a compensating thing or a replacement or a refund or whatever right they never change the original",
    "start": "2442240",
    "end": "2449079"
  },
  {
    "text": "data right now let's look at dependency so I talked about hardcoded dependencies now let's some let's uh",
    "start": "2449079",
    "end": "2456200"
  },
  {
    "text": "look at some ways to get rid of the dependencies so we've got dependency injection dependency parameterization",
    "start": "2456200",
    "end": "2461880"
  },
  {
    "text": "and dependency rejection so what are all these things and how are they all different right dependency",
    "start": "2461880",
    "end": "2470400"
  },
  {
    "text": "injection so we have a turtle class this is typically an oo Technique we have a",
    "start": "2470400",
    "end": "2475760"
  },
  {
    "text": "class and we have to you you know we need a canvas and we need some a logger",
    "start": "2475760",
    "end": "2482440"
  },
  {
    "text": "um so what we're going to do is create an interface for the canvas we're not going to pass a direct canvas and",
    "start": "2482440",
    "end": "2487520"
  },
  {
    "text": "interface in interface for logger will pass that in typically in the Constructor and then the methods in the",
    "start": "2487520",
    "end": "2493880"
  },
  {
    "text": "objects can use these uh dependencies that we've passed in right so this very",
    "start": "2493880",
    "end": "2500040"
  },
  {
    "text": "standard I'm sure you're all familiar with this now what's interesting is that the",
    "start": "2500040",
    "end": "2505400"
  },
  {
    "text": "the move function needs the canvas and the loger but the turn function does not need the canvas and the pen up does not",
    "start": "2505400",
    "end": "2510800"
  },
  {
    "text": "need the canas so one of the problems is that you have this big interface and it",
    "start": "2510800",
    "end": "2516119"
  },
  {
    "text": "everyone has access to it but maybe they shouldn't uh and it's quite easy to have accidental coupling when you know the",
    "start": "2516119",
    "end": "2522359"
  },
  {
    "text": "the penup starts using the canvas by mistake because there's a bug right so anyway you've got interfaces I'm sure",
    "start": "2522359",
    "end": "2528800"
  },
  {
    "text": "everyone knows how this works uh construction directions really used um one of the problems is the interfaces",
    "start": "2528800",
    "end": "2534920"
  },
  {
    "text": "you have you're doing a Constructor and it's like I just need one more method so I add it to the interface and the interface tends to get really really big",
    "start": "2534920",
    "end": "2541079"
  },
  {
    "text": "you might have hundreds of me like the canvas there might be like hundred methods on that canvas and I only using",
    "start": "2541079",
    "end": "2547200"
  },
  {
    "text": "one of them I'm just drawing a line why why do I have access to those other 100 methods right so it's you know it's easy",
    "start": "2547200",
    "end": "2552839"
  },
  {
    "text": "to do because I'm just I don't want to it's like easy to add something to the interface and add a whole new thing but you have these guidelines don't do that",
    "start": "2552839",
    "end": "2558920"
  },
  {
    "text": "interface segregation principle and single responsibility principle all this stuff don't do that but it's so easy to do so it's really hard to kind of stick",
    "start": "2558920",
    "end": "2566000"
  },
  {
    "text": "to it and you know if if I have access to some of these functions that I'm not",
    "start": "2566000",
    "end": "2572000"
  },
  {
    "text": "really supposed to have access to because they right there I could accidentally call them by mistake and you end up with this coupling when you ever trying to refactor something and",
    "start": "2572000",
    "end": "2578400"
  },
  {
    "text": "things got tangled up where they shouldn't have been and of course you need typically you need an ioc container or something to manage system right next",
    "start": "2578400",
    "end": "2588280"
  },
  {
    "text": "parameterization so let's this is the functional approach and we have a move function which has a distance parameter",
    "start": "2589559",
    "end": "2596520"
  },
  {
    "text": "and a turn function with an angle parameter and the pen up function which has no parameter and what we're going to do rather than",
    "start": "2596520",
    "end": "2603160"
  },
  {
    "text": "hardcoding the logging we're going to literally pass in two extra parameters for what it needs so the move function",
    "start": "2603160",
    "end": "2609200"
  },
  {
    "text": "needs to log something and it needs to draw a line so I'm literally going to pass in a function that it can log and I",
    "start": "2609200",
    "end": "2614839"
  },
  {
    "text": "can pass in a function that you can use to draw a line and the turn uh function only needs to log something it doesn't",
    "start": "2614839",
    "end": "2621440"
  },
  {
    "text": "need to draw a line so I don't pass it as a parameter and the penup function you know only needs to log something it",
    "start": "2621440",
    "end": "2627480"
  },
  {
    "text": "doesn't need to dra line so the move function had originally had one parameter now it has three parameters",
    "start": "2627480",
    "end": "2632839"
  },
  {
    "text": "and the turn function has one parameter now it has two parameters and so so we're literally just adding it parameters this is nice and what's",
    "start": "2632839",
    "end": "2639400"
  },
  {
    "text": "really cool about this is that these are functions these are not interface I",
    "start": "2639400",
    "end": "2645400"
  },
  {
    "text": "don't have to create an i thingy just you know an i canvas I can literally just pass in a function for drawing a",
    "start": "2645400",
    "end": "2651160"
  },
  {
    "text": "line it's it's really simple and the turn function has no access to that so I",
    "start": "2651160",
    "end": "2656960"
  },
  {
    "text": "can't accidentally have the turn code be dependent on drawing a line because it's not being passed in so I it's less buggy",
    "start": "2656960",
    "end": "2663480"
  },
  {
    "text": "and and finally um if you start having too many you know let's say I have like",
    "start": "2663480",
    "end": "2668640"
  },
  {
    "text": "20 different dependencies that's going to be 20 different parameters and that's really ugly and it stops you it's like I",
    "start": "2668640",
    "end": "2675079"
  },
  {
    "text": "maybe I shouldn't do that so it's the exact opposite of interface segregation it's like it's the the natural",
    "start": "2675079",
    "end": "2681599"
  },
  {
    "text": "inclination is to have fewer parameters so you're much more likely to have better structured code because you kind",
    "start": "2681599",
    "end": "2686720"
  },
  {
    "text": "of separate the dependencies it's really easy to have hundreds of methods on interface but it's really hard to have 100 parameters is really ugly straight",
    "start": "2686720",
    "end": "2693079"
  },
  {
    "text": "away so it kind of keeps you honest without having to have some sort of code code r view you",
    "start": "2693079",
    "end": "2698440"
  },
  {
    "text": "know right so uh here is my move function and I'm passing in the logger",
    "start": "2698440",
    "end": "2705079"
  },
  {
    "text": "just the info part and I'm passing the canvas draw line it's not any none of the other canvas functions need to be",
    "start": "2705079",
    "end": "2710520"
  },
  {
    "text": "passed in for this particular one and so I create these uh pass in these extra parameters now what's interesting is",
    "start": "2710520",
    "end": "2716400"
  },
  {
    "text": "that the move is a three parameter function but I'm passing in two of the parameters and this is called partial application common technique in",
    "start": "2716400",
    "end": "2722720"
  },
  {
    "text": "functional programming where I can just uh pass in some of the parameters and the other par is handled later so the",
    "start": "2722720",
    "end": "2729160"
  },
  {
    "text": "the state is going to be handled later and passing in the dependencies but not the rest of it so when I have these kind",
    "start": "2729160",
    "end": "2735319"
  },
  {
    "text": "of uh partially applied functions I can use them just like I did before the move function and the turn function they look",
    "start": "2735319",
    "end": "2741119"
  },
  {
    "text": "just like the previous ones except now they are um got the dependencies being",
    "start": "2741119",
    "end": "2746480"
  },
  {
    "text": "passed in rather than being hardcoded actually into the implementation so that's",
    "start": "2746480",
    "end": "2752359"
  },
  {
    "text": "that uh I'll skip over the demo I think um the advantage of this approach is",
    "start": "2752359",
    "end": "2758359"
  },
  {
    "text": "that it's really obvious what the dependencies are every function has dependency is passed in unlike with an O",
    "start": "2758359",
    "end": "2764640"
  },
  {
    "text": "where it's not obvious which method requires which dependency you have to kind of look inside um with the functions it's",
    "start": "2764640",
    "end": "2771119"
  },
  {
    "text": "explicit on the outside like I said we love functional programs love explicit stuff um these are functions not",
    "start": "2771119",
    "end": "2776559"
  },
  {
    "text": "interface we don't have to create a special interface just for this we literally just pass in a we can pass in a Lambda we don't have to do anything",
    "start": "2776559",
    "end": "2783079"
  },
  {
    "text": "and like I say it's a counterforce to having too many dependencies so no no special libraries no ioc container none",
    "start": "2783079",
    "end": "2789400"
  },
  {
    "text": "of that stuff um it is hard to work with sometimes if you have nested functions very because you have to kind of pass it",
    "start": "2789400",
    "end": "2795040"
  },
  {
    "text": "all way down through the tree so there are better ways to do it and the better way to do it is something which I call",
    "start": "2795040",
    "end": "2800880"
  },
  {
    "text": "which is called dependency rejection which is the next topic so dependency",
    "start": "2800880",
    "end": "2806800"
  },
  {
    "text": "rejection what does rejection mean that means don't have any dependencies how can you write code without any",
    "start": "2806800",
    "end": "2813200"
  },
  {
    "text": "dependencies I will show you and this is a phrase Co coin by Mark Sean who literally wrote the book on dependency",
    "start": "2813200",
    "end": "2819800"
  },
  {
    "text": "injection and so he's now anti- dependency injection he's Pro rejection",
    "start": "2819800",
    "end": "2825440"
  },
  {
    "text": "so how do what does it mean to reject dependencies obviously you do need to have dependencies you have to have some",
    "start": "2825440",
    "end": "2831079"
  },
  {
    "text": "sort of IO but you keep it away from your business logic okay so rather than mixing your IO with your Co with your",
    "start": "2831079",
    "end": "2837680"
  },
  {
    "text": "kind of logic you keep them separate keep your IO at the edges sometimes called functional core imperative",
    "start": "2837680",
    "end": "2844720"
  },
  {
    "text": "shell um and if you do this there are lots and lots of benefits for not having",
    "start": "2844720",
    "end": "2851000"
  },
  {
    "text": "any kind of IO in your code because for one thing anything to do with IO is",
    "start": "2851000",
    "end": "2856440"
  },
  {
    "text": "non-deterministic if you read from a database or read from the network or whatever you don't know what you're going to get makes it very hard to test",
    "start": "2856440",
    "end": "2863559"
  },
  {
    "text": "uh if you have all your code be completely deterministic every input has the same output makes it really easy to",
    "start": "2863559",
    "end": "2869000"
  },
  {
    "text": "test and so you get get rid of the iio that way so you keep your non-deterministic code at the edges and",
    "start": "2869000",
    "end": "2874319"
  },
  {
    "text": "you keep your pure uh deterministic code in the the middle right so you get the kind of sandwich effect so classic one",
    "start": "2874319",
    "end": "2881559"
  },
  {
    "text": "is you load some data from a database you make some decisions based on what you're going to do uh and then you do",
    "start": "2881559",
    "end": "2886640"
  },
  {
    "text": "something you know the io is then write the stuff back to the database or actually do the thing like move the turtle we're going to see that in a",
    "start": "2886640",
    "end": "2891760"
  },
  {
    "text": "minute and if you do it this way from a testing point of view it's great too because the unit tests are the stuff in",
    "start": "2891760",
    "end": "2897480"
  },
  {
    "text": "the middle and they are completely deterministic they don't have any IO so they run fast and they're very very easy",
    "start": "2897480",
    "end": "2903800"
  },
  {
    "text": "to write and integration tests are the things with the i so people say where the boundaries",
    "start": "2903800",
    "end": "2909319"
  },
  {
    "text": "between integration and unit Sy thing if you do it this way the boundaries are completely obvious right so let let's look at our",
    "start": "2909319",
    "end": "2915520"
  },
  {
    "text": "original move implementation um we have the logger and the canvas this is our dependencies",
    "start": "2915520",
    "end": "2922280"
  },
  {
    "text": "right and then the rest of the stuff is our deterministic code calculating the position and all that stuff and then",
    "start": "2922280",
    "end": "2927480"
  },
  {
    "text": "they're all mixed together like this so if we separate the decision",
    "start": "2927480",
    "end": "2932559"
  },
  {
    "text": "logic from the from the io so what we're going to do is we're going",
    "start": "2932559",
    "end": "2937880"
  },
  {
    "text": "to not actually write the message to the log we're to figure out what message we want to send to the logger but we're not",
    "start": "2937880",
    "end": "2943520"
  },
  {
    "text": "actually going to do the logging and then similarly if we we're going to say if we wanted to draw something this is",
    "start": "2943520",
    "end": "2950079"
  },
  {
    "text": "what we would draw but we're not actually going to do the drawing we're going to make a decision about what to draw but not actually draw it so if the",
    "start": "2950079",
    "end": "2955760"
  },
  {
    "text": "pen is down we want you to draw something if the pen is not down we don't want you to draw something and",
    "start": "2955760",
    "end": "2961640"
  },
  {
    "text": "that is the decision we're making so this code then we return all these decisions back to the next step so this",
    "start": "2961640",
    "end": "2967839"
  },
  {
    "text": "code is completely testable because for any input I always get the same output right there's no databases no IO there's",
    "start": "2967839",
    "end": "2974119"
  },
  {
    "text": "no canvases no nothing like that so super super easy I can test the log messages I can test the the pen logic",
    "start": "2974119",
    "end": "2980359"
  },
  {
    "text": "and all that stuff very very easily so we've anything where anywhere we had IO we've replace it with a decision we",
    "start": "2980359",
    "end": "2986760"
  },
  {
    "text": "return the decision and then we have an impure piece of code which does do the io which",
    "start": "2986760",
    "end": "2992839"
  },
  {
    "text": "kind of wraps the original one so we do our decision which is pure and then we do the io So based on the decision what",
    "start": "2992839",
    "end": "2999240"
  },
  {
    "text": "are we going to do well the decision said print this log message so I'm going to log that message the decision said we",
    "start": "2999240",
    "end": "3004799"
  },
  {
    "text": "want to draw so I'm going to use the canvas to draw or if the decision said don't draw then I'm not going to do anything so this thing this very simple",
    "start": "3004799",
    "end": "3011960"
  },
  {
    "text": "change is separated the pure uh decision logic from the io in non-deterministic",
    "start": "3011960",
    "end": "3019400"
  },
  {
    "text": "logic so it's very very similar but it's much more testable now than the original",
    "start": "3019400",
    "end": "3024440"
  },
  {
    "text": "one was so we got back we got to our wrapper with the pure dis pure business in the middle and the iio on the edges",
    "start": "3024440",
    "end": "3031440"
  },
  {
    "text": "so that is dependency rejection and I think I've got just enough time for",
    "start": "3031440",
    "end": "3037520"
  },
  {
    "text": "this right there's my total class where is my Oh that's oh that's",
    "start": "3048760",
    "end": "3054680"
  },
  {
    "text": "not one I want the it is rejection where is",
    "start": "3054680",
    "end": "3059760"
  },
  {
    "text": "it right so here is my unit test right so I create my",
    "start": "3059760",
    "end": "3065839"
  },
  {
    "text": "turtle and I put the pen up and I and I I do the decision part so I can test the",
    "start": "3065839",
    "end": "3071000"
  },
  {
    "text": "decision and and and you can see that it says don't draw anything okay and then I",
    "start": "3071000",
    "end": "3076079"
  },
  {
    "text": "put the pen down and I do the decision I I do the decision again and now it says yeah I",
    "start": "3076079",
    "end": "3081960"
  },
  {
    "text": "want you I want you to draw something so from a unit testing point of view this is my unit test so every you know all",
    "start": "3081960",
    "end": "3089400"
  },
  {
    "text": "the logic the complicated logic about which angle to turn and which direction to move and all that stuff that is completely testable and then my",
    "start": "3089400",
    "end": "3095960"
  },
  {
    "text": "integration test is using the whole thing so rather than using the the pure code I can now use the imperative the",
    "start": "3095960",
    "end": "3102599"
  },
  {
    "text": "the stuff with the iio in it and that's literally you know I can now open up the canvas and run the same code so it looks",
    "start": "3102599",
    "end": "3108880"
  },
  {
    "text": "like it's running the same code but the difference is that the anything to do IO is now kind of been separated from the",
    "start": "3108880",
    "end": "3114520"
  },
  {
    "text": "business logic and it's easier to test right next",
    "start": "3114520",
    "end": "3120559"
  },
  {
    "text": "interpreter all right two more to go and these are the most complicated ones of course for last right now if I look at",
    "start": "3120559",
    "end": "3127559"
  },
  {
    "text": "the apis um my total API originally said you know move a you know here's the distance",
    "start": "3127559",
    "end": "3134040"
  },
  {
    "text": "I want you to move and here's the current state and then I'm going to give you back the actual distance moved and the new state and then for the angle you",
    "start": "3134040",
    "end": "3141839"
  },
  {
    "text": "give me the angle you want to turn and your current state and I'll give you back the new state and so on and so forth so that's my a",
    "start": "3141839",
    "end": "3147640"
  },
  {
    "text": "API now at some point later I say actually I really want to do some error handling so I'm going to change these",
    "start": "3147640",
    "end": "3154680"
  },
  {
    "text": "things to be results instead because it's going to have maybe have an error case uh oh and actually you know turned",
    "start": "3154680",
    "end": "3162680"
  },
  {
    "text": "out that we need to make this async as well so it's now an async result and so on so so every time I do this I'm messing with the API every time I do",
    "start": "3162680",
    "end": "3169880"
  },
  {
    "text": "this I'm breaking the caller and the caller is getting annoyed with me because I keep changing my mind so is",
    "start": "3169880",
    "end": "3175599"
  },
  {
    "text": "there a way to design an API that does not have",
    "start": "3175599",
    "end": "3181000"
  },
  {
    "text": "anything to do with async or results or anything like that that is all hidden",
    "start": "3181000",
    "end": "3186160"
  },
  {
    "text": "and the answer is yes there is now we saw how to do this with the batch thing where I sent a command over the wire or",
    "start": "3186160",
    "end": "3192319"
  },
  {
    "text": "the actor thing where I posted the command to the actor but that didn't allow me to do any kind of logic based",
    "start": "3192319",
    "end": "3197960"
  },
  {
    "text": "on the response well the actor one you probably could do but the batch one you couldn't so let's look at another way of",
    "start": "3197960",
    "end": "3203799"
  },
  {
    "text": "doing this which is called The Interpreter pattern and what I'm I'm going to do is I'm going to send an instruction to The Interpreter and this",
    "start": "3203799",
    "end": "3209359"
  },
  {
    "text": "is called The Interpreter panel because it's just like an interpreter that interprets a program right so I send an",
    "start": "3209359",
    "end": "3215040"
  },
  {
    "text": "instruction and it's going to act it's going to run that instruction and it's going to give me back a response now I",
    "start": "3215040",
    "end": "3221280"
  },
  {
    "text": "actually then will base based on that response I will then send it another instruction and based and it'll give me",
    "start": "3221280",
    "end": "3227480"
  },
  {
    "text": "a response and based on that instruction based on that response I'll do another instruction now the trick is I have to send all this at once so I actually have",
    "start": "3227480",
    "end": "3234200"
  },
  {
    "text": "to send it as a data structure and how can I send all this stuff as a data structure so here's I'm going to do I'm",
    "start": "3234200",
    "end": "3240280"
  },
  {
    "text": "going to have a choice type and you notice there's two groups",
    "start": "3240280",
    "end": "3245440"
  },
  {
    "text": "there's the input and there's the Callback so what it says I'm going to pass in I'm going to send this distance",
    "start": "3245440",
    "end": "3251640"
  },
  {
    "text": "FR this is what I want to move The Interpreter is going to run it and it's going to give me a response now how am I",
    "start": "3251640",
    "end": "3257400"
  },
  {
    "text": "going to handle that response I also have to pass in a callback just kind of how you do async I pass on a call back",
    "start": "3257400",
    "end": "3263559"
  },
  {
    "text": "that the interpret all run and I will then use that call back to figure out based on the response what to do so",
    "start": "3263559",
    "end": "3270359"
  },
  {
    "text": "that's the input and then I will get this back from The Interpreter and based on that I will pass The Interpreter",
    "start": "3270359",
    "end": "3275599"
  },
  {
    "text": "another program and it is like a program because this is basically a set of instructions and so you it's again this",
    "start": "3275599",
    "end": "3282440"
  },
  {
    "text": "is really complicated but sometimes it is useful and you need a final you need at some point you need to unlike the",
    "start": "3282440",
    "end": "3288680"
  },
  {
    "text": "other ones you need to say okay stop interpreting so you need a stop instruction as",
    "start": "3288680",
    "end": "3293920"
  },
  {
    "text": "well right so how do you use this thing well let's say I want to draw a triangle",
    "start": "3293920",
    "end": "3299280"
  },
  {
    "text": "I say move this thing and the interpret is going to run it and then what's the call back well the call back is based on the actual distance I wanted to return",
    "start": "3299280",
    "end": "3307200"
  },
  {
    "text": "okay and then the Callback says well there's no response from that one so based on that which is I don't care I'm going to move and that's going to give",
    "start": "3307200",
    "end": "3313280"
  },
  {
    "text": "me another actra distance and so on and so forth so the way you write it is a whole bunch of um callbacks mixed with",
    "start": "3313280",
    "end": "3321359"
  },
  {
    "text": "these data structure so this whole thing doesn't actually do anything it's just a",
    "start": "3321359",
    "end": "3327319"
  },
  {
    "text": "giant J data structure with lots of uh you know operations or or instructions",
    "start": "3327319",
    "end": "3334039"
  },
  {
    "text": "and when you've finished writing it this draw triangle does not actually draw a triangle anywhere it's literally a big b",
    "start": "3334039",
    "end": "3340160"
  },
  {
    "text": "big data structure so now I can interpret it to do different things so",
    "start": "3340160",
    "end": "3345520"
  },
  {
    "text": "almost like the stream very similar to The Stream press idea and of course this is really ugly and it turns out there's",
    "start": "3345520",
    "end": "3350760"
  },
  {
    "text": "a way to hide this just like we did with the other one there's a kind of hide we can write this Turtle program expression",
    "start": "3350760",
    "end": "3357119"
  },
  {
    "text": "thing and so you can actually write the code that looks much more like imperative code right so we got our Turtle program now let's interpret it so",
    "start": "3357119",
    "end": "3365000"
  },
  {
    "text": "um I can have multiple interpreters for the same program just like I had multiple stream processors for the same",
    "start": "3365000",
    "end": "3372880"
  },
  {
    "text": "stream so let me open that one",
    "start": "3372880",
    "end": "3377078"
  },
  {
    "text": "up and there is there is an example of my program",
    "start": "3379200",
    "end": "3385480"
  },
  {
    "text": "right so like the batch one I can actually do logic like if you know this is the distance coming back from The",
    "start": "3385480",
    "end": "3391319"
  },
  {
    "text": "Interpreter and if the distance is less than 50 I want to print an error message and then I want to turn and do and stuff",
    "start": "3391319",
    "end": "3396880"
  },
  {
    "text": "so you can actually write imperative code and again this looks really ugly with all these kind of callbacks poed in",
    "start": "3396880",
    "end": "3402760"
  },
  {
    "text": "but as you saw we can get rid of the callbacks by having this super duper expression thing just like we did got",
    "start": "3402760",
    "end": "3407799"
  },
  {
    "text": "rid of async callbacks so this is the kind of turtle program and all the",
    "start": "3407799",
    "end": "3413280"
  },
  {
    "text": "callbacks are gone so it looks like imperative code now right so this doesn't actually do",
    "start": "3413280",
    "end": "3418760"
  },
  {
    "text": "anything like I said it's it's a just a program so if I run it it's it's just a",
    "start": "3418760",
    "end": "3424119"
  },
  {
    "text": "data structure so let me interpret it as a",
    "start": "3424119",
    "end": "3430279"
  },
  {
    "text": "turtle and it's going to draw on the screen right but now let me interpret it the same thing as the distance",
    "start": "3432440",
    "end": "3439359"
  },
  {
    "text": "interpreter so it's the same program but this time it's just going to interpret it as a distance",
    "start": "3439359",
    "end": "3446359"
  },
  {
    "text": "and uh it's just going to add up all so it literally is writing a little little piece of code and you you rri your own",
    "start": "3446359",
    "end": "3453599"
  },
  {
    "text": "mini interpreter and your own mini instruction set and uh it's a lot of",
    "start": "3453599",
    "end": "3458960"
  },
  {
    "text": "extra work why would you do that um well the first thing is it's",
    "start": "3458960",
    "end": "3464839"
  },
  {
    "text": "completely decouples what you actually do behind the scenes because it's an instruction set and how the instructions",
    "start": "3464839",
    "end": "3470920"
  },
  {
    "text": "sets get executed you know you don't care so all the thing about async and errors and stuff",
    "start": "3470920",
    "end": "3476680"
  },
  {
    "text": "that's behind the scenes you know you don't really care about it so really it's the purest possible API the other",
    "start": "3476680",
    "end": "3483079"
  },
  {
    "text": "thing you do is optimization so if I make a whole bunch of moves to the turtle you know three",
    "start": "3483079",
    "end": "3488480"
  },
  {
    "text": "moves in a row because it's a data structure I can do just like you do compiler optimization you know it's like",
    "start": "3488480",
    "end": "3493960"
  },
  {
    "text": "I've got three moves in a row I can collapse it into one move right uh and or if I have a whole bunch of things if",
    "start": "3493960",
    "end": "3499359"
  },
  {
    "text": "it's a if it's a kind of remote call I can batch all those move operations if it's you know moving a turtle and the",
    "start": "3499359",
    "end": "3506640"
  },
  {
    "text": "turtle takes 200 milliseconds to reply I can batch all the moves into one single send so I get faster responsiveness you",
    "start": "3506640",
    "end": "3513680"
  },
  {
    "text": "know all these I know maybe I'll save money in the in the amount of network traffic who knows but you can do a lot of things with optimization if you want",
    "start": "3513680",
    "end": "3520319"
  },
  {
    "text": "to so if you really really care about if you're Facebook or Twitter this is the kind of thing you would do and and in",
    "start": "3520319",
    "end": "3525880"
  },
  {
    "text": "fact they have done um if you're the average small business you do not need this so it's really really complex uh it",
    "start": "3525880",
    "end": "3533039"
  },
  {
    "text": "really only works best if you have a limited number of operations like you know I got four operations if you had",
    "start": "3533039",
    "end": "3538480"
  },
  {
    "text": "hundreds of operations it would be bad but if it's just like you know fetch a fetch your url you know upload something",
    "start": "3538480",
    "end": "3544799"
  },
  {
    "text": "it's like three or four different things it works great right last one capabilities and I'm going to run a",
    "start": "3544799",
    "end": "3551280"
  },
  {
    "text": "few minutes over I'm sorry on this right so let's talk about our API again now",
    "start": "3551280",
    "end": "3556599"
  },
  {
    "text": "one of the problems when you call an API is sometimes it doesn't like what you did and it gives you back an error",
    "start": "3556599",
    "end": "3562240"
  },
  {
    "text": "message and one of the problems with that is you you know it won't let you do",
    "start": "3562240",
    "end": "3568760"
  },
  {
    "text": "something but it's not telling you what you can do it says no no you can't do that it's like well thanks very much but",
    "start": "3568760",
    "end": "3574079"
  },
  {
    "text": "I want to you know what can I do so it might say I try and move the turtle it says you can't move the turtle it's like",
    "start": "3574079",
    "end": "3579960"
  },
  {
    "text": "well what can I do the API doesn't tell you so the capability model is exactly",
    "start": "3579960",
    "end": "3585559"
  },
  {
    "text": "it flips it around and it Returns what you can do rather than rather than just giving an error for what you can't do so",
    "start": "3585559",
    "end": "3592079"
  },
  {
    "text": "that's the whole thing about a capability so what I mean by a capability a capability is like a key for a lock right so if I have the key I",
    "start": "3592079",
    "end": "3599839"
  },
  {
    "text": "can open the door if I don't have the key I can't open the door right so what happens is when I make a call the server",
    "start": "3599839",
    "end": "3606559"
  },
  {
    "text": "or the whatever the API gives me back a bunch of keys and each key is something I can do right and I'm calling these",
    "start": "3606559",
    "end": "3612839"
  },
  {
    "text": "capabilities so then I use one of the keys to open the door and I'm now in a new room and I get back some more keys",
    "start": "3612839",
    "end": "3620319"
  },
  {
    "text": "right now maybe some of the keys don't you know this time I don't have some of the original keys so there's things I can't do which I could do before",
    "start": "3620319",
    "end": "3627119"
  },
  {
    "text": "so let's for example moving a turtle so I get back when I move the turtle I get back three keys I can move it again I",
    "start": "3627119",
    "end": "3633520"
  },
  {
    "text": "can turn it I can put the pen up and down right so I move it again now this time I hit the edge so it's going to",
    "start": "3633520",
    "end": "3640400"
  },
  {
    "text": "give me back two keys it's going to give at the turn key and the pen down key but it's not going to give me the move key I",
    "start": "3640400",
    "end": "3646400"
  },
  {
    "text": "can't move it literally don't have the capability to call the move function so this is very different from like a",
    "start": "3646400",
    "end": "3652319"
  },
  {
    "text": "regular API where you can call any API call at any time this is literally I I can only use the API it gives me so the",
    "start": "3652319",
    "end": "3659039"
  },
  {
    "text": "API is kind of dynamic right the actual functions available to me change based on the result every single",
    "start": "3659039",
    "end": "3665520"
  },
  {
    "text": "call so here's the T here's the turtle capabilities so typically this I'm you know I'm using a data structure here",
    "start": "3665520",
    "end": "3671359"
  },
  {
    "text": "mostly I can do the other ones but the move function is optional because sometimes I can do it and sometimes I can't do it based on whether I fit the",
    "start": "3671359",
    "end": "3676920"
  },
  {
    "text": "wall right so these are the keys I've got four possible keys I could get back so every time I make a I do",
    "start": "3676920",
    "end": "3684280"
  },
  {
    "text": "something I call an API I'm not just getting a result I'm getting back a list of capabilities for my next",
    "start": "3684280",
    "end": "3691200"
  },
  {
    "text": "call so let me do a demo and then we'll be",
    "start": "3691200",
    "end": "3696558"
  },
  {
    "text": "done right so let me see if I can do here we go",
    "start": "3698799",
    "end": "3704640"
  },
  {
    "text": "right so I'm going to initialize the canvas and I'm going to move whoops now if you notice here",
    "start": "3704640",
    "end": "3712200"
  },
  {
    "text": "this is the capabilties that came back I have my data structure and there's four capabilities and the move function is",
    "start": "3712200",
    "end": "3719119"
  },
  {
    "text": "available and the turn function is available and the penup function is available okay so now I'm going to",
    "start": "3719119",
    "end": "3726079"
  },
  {
    "text": "move and the move function is still available so I can call it",
    "start": "3726079",
    "end": "3732319"
  },
  {
    "text": "again now I've hit the wall on the on the on the canvas and the move function is no longer available so I cannot I",
    "start": "3732799",
    "end": "3739720"
  },
  {
    "text": "literally have no way to call the move function it's not available for me to call I can do the turn function and if I",
    "start": "3739720",
    "end": "3746599"
  },
  {
    "text": "do the turn function maybe it will move will it uh let's see if I turn yeah so as soon as I've turned the move function",
    "start": "3746599",
    "end": "3753599"
  },
  {
    "text": "is available again so now I can move so what is this is really good for",
    "start": "3753599",
    "end": "3760279"
  },
  {
    "text": "is things where the logic is really complicated and the client doesn't need",
    "start": "3760279",
    "end": "3766760"
  },
  {
    "text": "to know what all the logic is I mean sometimes you know often you have the the client has all the rules like this",
    "start": "3766760",
    "end": "3772480"
  },
  {
    "text": "button should be enabled you know if you clicked here this button should be enabled and if this is bad you can't do if you know the sometimes the logic get",
    "start": "3772480",
    "end": "3779200"
  },
  {
    "text": "really complicated and why should the client know all that and if the client has the logic hardcoded just like the",
    "start": "3779200",
    "end": "3784319"
  },
  {
    "text": "server has now you have a synchronization problem between you know the logic being in sync between the",
    "start": "3784319",
    "end": "3789920"
  },
  {
    "text": "business logic being in sync between the client and server so in this model the client knows nothing it doesn't know",
    "start": "3789920",
    "end": "3795520"
  },
  {
    "text": "about whether it can move or not all that stuff is not there and for example if it ran out of ink you know if there",
    "start": "3795520",
    "end": "3800559"
  },
  {
    "text": "if I added logic about you're not allow you know you run out of Inc you can't do anything I could add that to the logic",
    "start": "3800559",
    "end": "3805960"
  },
  {
    "text": "and the client wouldn't care that I added new features or or you know that the pen the pen is broken and you can't",
    "start": "3805960",
    "end": "3811440"
  },
  {
    "text": "move the pen anymore I could totally do that and and the client would not care because all it does is it knows it's",
    "start": "3811440",
    "end": "3816799"
  },
  {
    "text": "just given these keys and it and it runs the keys so it's a very powerful technique um so no no business logic",
    "start": "3816799",
    "end": "3825200"
  },
  {
    "text": "shared I another good example if you're playing a game with chess right and there's the rules of chess the client",
    "start": "3825200",
    "end": "3831000"
  },
  {
    "text": "you could just give back all the possible moves that you can make right so you give back you know his 15 moves",
    "start": "3831000",
    "end": "3836599"
  },
  {
    "text": "you can make and I pick one of the moves and I run it and then it goes to the server and the server comes back with here 10 moves you can make so as a",
    "start": "3836599",
    "end": "3843880"
  },
  {
    "text": "client I don't need to know the rules of Chess it just gives me here's all the moves I can make and I pick one that you",
    "start": "3843880",
    "end": "3849160"
  },
  {
    "text": "know the complicated logic of how what moves are available and what moves IL legal and stuff as a client I don't care",
    "start": "3849160",
    "end": "3854359"
  },
  {
    "text": "about that it literally is going to give me all the possibilities so this is also better security because um I can't do",
    "start": "3854359",
    "end": "3862079"
  },
  {
    "text": "bad things right and one nice thing about the capabilties is you can transform them so because it's just a function I can say this capability is",
    "start": "3862079",
    "end": "3869359"
  },
  {
    "text": "only available during business hours and if you're doing it you know at night you can't call it or this available this",
    "start": "3869359",
    "end": "3876200"
  },
  {
    "text": "capability is only available to you and it's not available to anybody else you know so all that kind of stuff is super easy to do with capabilities so again",
    "start": "3876200",
    "end": "3883279"
  },
  {
    "text": "the downside is very complex to implement um and the client has to change the way they work so rather than",
    "start": "3883279",
    "end": "3889599"
  },
  {
    "text": "just like calling the API the client has to go through all the possible capabilities and say which ones can I use and you know present some user where",
    "start": "3889599",
    "end": "3898000"
  },
  {
    "text": "they can click it so um if you've heard of hate AOS OAS hyper media as the",
    "start": "3898000",
    "end": "3904319"
  },
  {
    "text": "engine application states that is exactly the same model and I have a talk about that so if you were doing this for",
    "start": "3904319",
    "end": "3909960"
  },
  {
    "text": "a website you would return capabilities as a bunch of hyperlinks and each each thing you could",
    "start": "3909960",
    "end": "3916119"
  },
  {
    "text": "do would be a hyperlink that you can click on and so you might you know you you might do something like this where you literally can't see you know You'",
    "start": "3916119",
    "end": "3923039"
  },
  {
    "text": "have no idea what it's do this is the this is the URL you call to make a move and it's completely you know it's very",
    "start": "3923039",
    "end": "3928960"
  },
  {
    "text": "safe because nobody knows what that that that code is you know so that's a capability based way of web stuff like",
    "start": "3928960",
    "end": "3935599"
  },
  {
    "text": "say hate hate uh uh OAS right okay that's it last one thank you very much",
    "start": "3935599",
    "end": "3942039"
  },
  {
    "text": "I'm going to try and put all the code on GitHub esan Turtle there's nothing up",
    "start": "3942039",
    "end": "3947480"
  },
  {
    "text": "there now but it's going to be in a minute um and thank you very much for coming",
    "start": "3947480",
    "end": "3955160"
  }
]