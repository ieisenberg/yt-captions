[
  {
    "start": "0",
    "end": "114000"
  },
  {
    "text": "so uh right hope you are in the right room let's start with",
    "start": "4520",
    "end": "10960"
  },
  {
    "text": "YC well you want to program a microwave oven or a smart light bulb C might be",
    "start": "10960",
    "end": "19199"
  },
  {
    "text": "the language or a pacemaker uh some fancy breaking systems in a car if you",
    "start": "19199",
    "end": "26039"
  },
  {
    "text": "want to develop a programming language or work on an operating system uh",
    "start": "26039",
    "end": "32640"
  },
  {
    "text": "supercomputing uh guidance systems but that goes into space and maybe you just",
    "start": "32640",
    "end": "38600"
  },
  {
    "text": "want the battery to last the whole summer there are plenty of uses places",
    "start": "38600",
    "end": "44559"
  },
  {
    "text": "where you would like to use uh C so my name is Ol M I'm here to give a",
    "start": "44559",
    "end": "52079"
  },
  {
    "text": "reintroduction to c uh I did last year uh at NDC Tech town",
    "start": "52079",
    "end": "58680"
  },
  {
    "text": "I was teaching a two de introductory course in C um but I also did a 60 Minute session",
    "start": "58680",
    "end": "65280"
  },
  {
    "text": "called 42 Silly Ways to Say Hello Inc and while working on that talk I",
    "start": "65280",
    "end": "71479"
  },
  {
    "text": "realized how much you can actually teach by using simplified",
    "start": "71479",
    "end": "77119"
  },
  {
    "text": "examples and Skip kind of the boring details and just go directly into the m",
    "start": "77119",
    "end": "82320"
  },
  {
    "text": "so I challenged myself um to try to cram as much as possible of the essent stuff",
    "start": "82320",
    "end": "90840"
  },
  {
    "text": "into uh one hour presentation like this so what you're seeing now is the",
    "start": "90840",
    "end": "96920"
  },
  {
    "text": "premiere uh it was finished around 3:00 last night um but I have been thinking",
    "start": "96920",
    "end": "103759"
  },
  {
    "text": "about it for a year so it's not rushed in any way but uh the slides will be",
    "start": "103759",
    "end": "109560"
  },
  {
    "text": "rushed because I have 259 of them um so let's start with a very",
    "start": "109560",
    "end": "117840"
  },
  {
    "text": "proper and educational example um notice how we are checking",
    "start": "117840",
    "end": "123640"
  },
  {
    "text": "the return value from puts and then accordingly communicate success or failure back to the runtime environment",
    "start": "123640",
    "end": "131599"
  },
  {
    "text": "and when we compile and run this code of course we will get",
    "start": "131599",
    "end": "136879"
  },
  {
    "text": "hello so this is your stuff and um the other files on the top",
    "start": "141319",
    "end": "151440"
  },
  {
    "text": "of your program in your translation unit they are basically expanded textually by",
    "start": "151440",
    "end": "158160"
  },
  {
    "text": "the pre-processor and uh here I extract significant details from these two",
    "start": "158160",
    "end": "166840"
  },
  {
    "text": "libraries and the first we see here are the macros and they are textually",
    "start": "166840",
    "end": "172360"
  },
  {
    "text": "substituted into your code and uh here we see a so-called uh",
    "start": "172360",
    "end": "179440"
  },
  {
    "text": "uh declaration or a prototype which is saying that there is",
    "start": "179440",
    "end": "184720"
  },
  {
    "text": "a function somewhere I don't know where but it exists and the symbol the Linker",
    "start": "184720",
    "end": "192200"
  },
  {
    "text": "you can try to find that symbol and Link into this program uh when you uh compile",
    "start": "192200",
    "end": "198720"
  },
  {
    "text": "and Link this uh Snippets and in this case the function is part of the standard",
    "start": "198720",
    "end": "205239"
  },
  {
    "text": "Library the external keyword is implicit so it's usually skipped uh",
    "start": "205239",
    "end": "211640"
  },
  {
    "text": "um and uh let's just rewind a few slides",
    "start": "211640",
    "end": "217120"
  },
  {
    "text": "like the here and notice that of course there are other Library functions you",
    "start": "217120",
    "end": "222400"
  },
  {
    "text": "can use as well and printf um which has a returns also an integer but it returns",
    "start": "222400",
    "end": "231640"
  },
  {
    "text": "some different values instead of just saying yes or no whether it succeeded uh",
    "start": "231640",
    "end": "236959"
  },
  {
    "text": "it will return the number of characters it printed out and this might lead you into something",
    "start": "236959",
    "end": "243920"
  },
  {
    "text": "like this you want to be really really secure and kind of check that yeah really",
    "start": "243920",
    "end": "250879"
  },
  {
    "text": "printing six characters and there are applications where you need to check",
    "start": "250879",
    "end": "257199"
  },
  {
    "text": "everything and see but it's very easy to be taken down into a rabbit hole um and uh you you get",
    "start": "257199",
    "end": "266840"
  },
  {
    "text": "more kind of checking code than uh not that actually functionality and C has a",
    "start": "266840",
    "end": "272600"
  },
  {
    "text": "limited and very weak error handling system and that is one of the reasons why you probably want to consider other",
    "start": "272600",
    "end": "278960"
  },
  {
    "text": "program languages if you can but as I said in the initially there",
    "start": "278960",
    "end": "285360"
  },
  {
    "text": "are places where C is still the dominant language uh you can even go get into the",
    "start": "285360",
    "end": "292000"
  },
  {
    "text": "bizarre examples like this uh this is inspired by some code that I found on on a very serious uh website about C",
    "start": "292000",
    "end": "299320"
  },
  {
    "text": "program programming um but it's it's kind of ridiculous because we are",
    "start": "299320",
    "end": "304360"
  },
  {
    "text": "checking the return code from printf and doing all the work but we don't check",
    "start": "304360",
    "end": "309919"
  },
  {
    "text": "the return code from fprintf and and other stuff so it's just it looks like",
    "start": "309919",
    "end": "315759"
  },
  {
    "text": "it's very serious and and uh and safe but it isn't and when it comes to C programming",
    "start": "315759",
    "end": "324800"
  },
  {
    "start": "323000",
    "end": "443000"
  },
  {
    "text": "you often have to just make a decision that something is just working and if",
    "start": "324800",
    "end": "331840"
  },
  {
    "text": "you're in on a kind of a desktop computer running Linux or or something like like that you probably can it's a",
    "start": "331840",
    "end": "340960"
  },
  {
    "text": "fair assumption to say that standard out is always working um at least for kind",
    "start": "340960",
    "end": "348240"
  },
  {
    "text": "of Snippets and toy examples like I'm I'm doing here so I I claim that this is",
    "start": "348240",
    "end": "354440"
  },
  {
    "text": "a decent way of saying hello and uh I even go further I go to this where I",
    "start": "354440",
    "end": "360440"
  },
  {
    "text": "removed the return um because since c99 that's 24 years ago uh C has guarantee",
    "start": "360440",
    "end": "368160"
  },
  {
    "text": "that if you drop out of main you will get whatever the operating",
    "start": "368160",
    "end": "373400"
  },
  {
    "text": "system runtime environment expects for a success so you will basically get exit",
    "start": "373400",
    "end": "380160"
  },
  {
    "text": "success this is the same as what C++ does uh and then you're not forced to",
    "start": "380160",
    "end": "385199"
  },
  {
    "text": "lie you're not forced to say yeah success uh can silently drop out and and",
    "start": "385199",
    "end": "391520"
  },
  {
    "text": "get the default Behavior so this would be a good start now you might find it a bit inconsistent uh that um main says",
    "start": "391520",
    "end": "401400"
  },
  {
    "text": "it's returning an INT and it doesn't but you just have to deal with it there are plenty of them in C and and",
    "start": "401400",
    "end": "408720"
  },
  {
    "text": "if that is problematic then maybe C is not your language right um hello",
    "start": "408720",
    "end": "417319"
  },
  {
    "text": "hello oh where is my hello",
    "start": "417319",
    "end": "421400"
  },
  {
    "text": "oh",
    "start": "425759",
    "end": "428400"
  },
  {
    "text": "cing I need to start this one again ah hello there it is all right now",
    "start": "432840",
    "end": "440680"
  },
  {
    "text": "to something completely different um here we have some integers",
    "start": "440680",
    "end": "446319"
  },
  {
    "start": "443000",
    "end": "715000"
  },
  {
    "text": "uh variables uh also called integer object of automatic storage duration and",
    "start": "446319",
    "end": "451720"
  },
  {
    "text": "we initialize them with a collection of constants exod decimal decimal octal",
    "start": "451720",
    "end": "457520"
  },
  {
    "text": "character construct and escape sequence um in the standard Library the put Shar",
    "start": "457520",
    "end": "465919"
  },
  {
    "text": "function uh that writes to standard out or more precisely the past in argument is",
    "start": "465919",
    "end": "473720"
  },
  {
    "text": "converted to assigned integer type before they passed into the putar",
    "start": "473720",
    "end": "479680"
  },
  {
    "text": "function and where they will be converted to an unsigned Char before they are sent to standard out and then",
    "start": "479680",
    "end": "485800"
  },
  {
    "text": "putar will convert that unsigned Char back to an integer and returning back to the to the",
    "start": "485800",
    "end": "492599"
  },
  {
    "text": "Coler and the I eror is reporting by and uh and of file constant and this results",
    "start": "492599",
    "end": "500680"
  },
  {
    "text": "of course in another",
    "start": "500680",
    "end": "504680"
  },
  {
    "text": "hello um we talked a lot about conversions some about conversions",
    "start": "508240",
    "end": "514000"
  },
  {
    "text": "already there will be much more um here we have a suite of uh unsigned integer",
    "start": "514000",
    "end": "521919"
  },
  {
    "text": "variables wide ones down to narrow ones uh",
    "start": "521919",
    "end": "526959"
  },
  {
    "text": "typically and they are all silently converted to a signed in before being",
    "start": "526959",
    "end": "534959"
  },
  {
    "text": "passed into pchar there is this is absolutely house is supposed to work",
    "start": "534959",
    "end": "541079"
  },
  {
    "text": "silently converting between types uh not giving any warnings uh you",
    "start": "541079",
    "end": "547839"
  },
  {
    "text": "can probably turn on some very strange uh optional Flags but if you put on wall",
    "start": "547839",
    "end": "555040"
  },
  {
    "text": "and vextra and all of those kind of things you will not get a warning about narrowing of of variables and and",
    "start": "555040",
    "end": "562800"
  },
  {
    "text": "widening of integers and also as you notice in the comments here we the only we have",
    "start": "562800",
    "end": "569959"
  },
  {
    "text": "guaranteed about is a minimum size of these variables it",
    "start": "569959",
    "end": "577959"
  },
  {
    "text": "doesn't say anything about the maximum size it is possible and I've heard",
    "start": "577959",
    "end": "583760"
  },
  {
    "text": "about um computers that where everything is an in where everything is 32 bit and",
    "start": "583760",
    "end": "592640"
  },
  {
    "text": "but not of course the long long which is 64bit even the Char is 64bit and no",
    "start": "592640",
    "end": "597760"
  },
  {
    "text": "32bit and and so on uh and talking about uh",
    "start": "597760",
    "end": "606200"
  },
  {
    "text": "conversions also these signed the unsigned integers they have a signed",
    "start": "607040",
    "end": "614440"
  },
  {
    "text": "counterpart um the signed is implicit and the int keyword can be uh dropped so very often",
    "start": "614440",
    "end": "621920"
  },
  {
    "text": "you will see them like this they are also being converted into",
    "start": "621920",
    "end": "628800"
  },
  {
    "text": "uh and signed in before pass to to char uh without going into further",
    "start": "628800",
    "end": "635600"
  },
  {
    "text": "details about it but interesting that uh all the others they have assigned and",
    "start": "635600",
    "end": "642480"
  },
  {
    "text": "unsigned part the Char actually are three different types you have the unsigned Char and the signed Char they",
    "start": "642480",
    "end": "649800"
  },
  {
    "text": "can be used for small integers small numbers and the Char is a separate type",
    "start": "649800",
    "end": "657480"
  },
  {
    "text": "that is ideal for well drum roll",
    "start": "657480",
    "end": "662560"
  },
  {
    "text": "characters yeah that's the conversion Mayhem doesn't",
    "start": "662560",
    "end": "668920"
  },
  {
    "text": "stop here watch closely",
    "start": "668920",
    "end": "672680"
  },
  {
    "text": "now all of these variables will also silently be converted to assigned int",
    "start": "674880",
    "end": "681519"
  },
  {
    "text": "before they are passed into picture um and once again it's a feature",
    "start": "681519",
    "end": "689880"
  },
  {
    "text": "that's how C works and C is a typical weak type uh",
    "start": "689880",
    "end": "697079"
  },
  {
    "text": "it's a statically typed language but it's also a weak typed language uh C++ is trying to make it a bit stronger but",
    "start": "697079",
    "end": "706200"
  },
  {
    "text": "uh C++ is also a weekly type language um all right now for something",
    "start": "706200",
    "end": "713200"
  },
  {
    "text": "completely different here I created an array of uh",
    "start": "713200",
    "end": "719040"
  },
  {
    "start": "715000",
    "end": "1018000"
  },
  {
    "text": "integers and print them out to standard out in the regular way now let's look into the details there before we do that",
    "start": "719040",
    "end": "727200"
  },
  {
    "text": "um the external keyword well we know that one it's saying that the pchar is",
    "start": "727200",
    "end": "732360"
  },
  {
    "text": "defined somewhere else the static keyword is kind of doing the opposite um",
    "start": "732360",
    "end": "738720"
  },
  {
    "text": "it's basically saying to the compiler don't make this object available for",
    "start": "738720",
    "end": "745639"
  },
  {
    "text": "anyone else to use an extern and say can find the symbol here so the a by using",
    "start": "745639",
    "end": "751839"
  },
  {
    "text": "stating in front there the a symbol will will not be visible from another U",
    "start": "751839",
    "end": "758160"
  },
  {
    "text": "compilation unit translation unit an object pile that wants to link with this",
    "start": "758160",
    "end": "765600"
  },
  {
    "text": "program here we are we are now going to do a lot of pointer work so here we are",
    "start": "768000",
    "end": "774000"
  },
  {
    "text": "um first of all we the the array is",
    "start": "774000",
    "end": "780680"
  },
  {
    "text": "as soon as you start using it in an expression it decays into a pointer so",
    "start": "780680",
    "end": "786079"
  },
  {
    "text": "what we're looking at here is that a has decayed into a pointer that we are now D",
    "start": "786079",
    "end": "792160"
  },
  {
    "text": "referencing with the indirection operator um and uh we get an H coming",
    "start": "792160",
    "end": "799800"
  },
  {
    "text": "out here here we are using the subscript operator AR subscript",
    "start": "799800",
    "end": "806000"
  },
  {
    "text": "operator which is basically just a tactical convenient way of writing what",
    "start": "806000",
    "end": "812360"
  },
  {
    "text": "you see here now where you take the Base address plus two and then you dreference",
    "start": "812360",
    "end": "820800"
  },
  {
    "text": "it um to get uh the L",
    "start": "820800",
    "end": "825880"
  },
  {
    "text": "out now since addition is commutative this also works of course 3",
    "start": "825880",
    "end": "833560"
  },
  {
    "text": "plus I and yeah probably I guess the next step very useful for pub quiz",
    "start": "833560",
    "end": "839680"
  },
  {
    "text": "questions but uh this is perfectly fine uh there isn't much use for this",
    "start": "839680",
    "end": "847320"
  },
  {
    "text": "construct um but I've seen it used successfully a couple of times uh one",
    "start": "847320",
    "end": "853360"
  },
  {
    "text": "was in an audio codec where there was this kind of clever way of looking up which codec to use um it wasn't",
    "start": "853360",
    "end": "860160"
  },
  {
    "text": "necessary but it kind of looked okay but in um you can also sometimes find them",
    "start": "860160",
    "end": "865480"
  },
  {
    "text": "in macros that triggers compilation errors if um if you are using the",
    "start": "865480",
    "end": "872920"
  },
  {
    "text": "incorrect type passed into the the the the",
    "start": "872920",
    "end": "880959"
  },
  {
    "text": "macro and uh finally I'll show an example where we take kind of the address of the third element add another",
    "start": "880959",
    "end": "889440"
  },
  {
    "text": "three to that and then they reference",
    "start": "889440",
    "end": "893680"
  },
  {
    "text": "it and we will continue with some pointer uh [Music]",
    "start": "894880",
    "end": "901279"
  },
  {
    "text": "gymnastics so here is uh what we're doing here is basically to",
    "start": "901279",
    "end": "907920"
  },
  {
    "text": "take the address of this Phantom element that is one",
    "start": "907920",
    "end": "913800"
  },
  {
    "text": "beyond the array this is a very common technique uh everything in in C++ is",
    "start": "913800",
    "end": "921800"
  },
  {
    "text": "based on this when it comes to ranges and iterators and and so on but it's",
    "start": "921800",
    "end": "927279"
  },
  {
    "text": "also something that we do in see all the time um and there is a guarantee in the standard there will it's always possible",
    "start": "927279",
    "end": "935040"
  },
  {
    "text": "to compute the address of the one Beyond element in in a sequence like",
    "start": "935040",
    "end": "941920"
  },
  {
    "text": "this and then by doing that we can",
    "start": "941920",
    "end": "947959"
  },
  {
    "text": "use we can uher to the other elements uh relatively so in this case the minus 6",
    "start": "947959",
    "end": "955920"
  },
  {
    "text": "element from the one Beyond Min - 5 -4",
    "start": "955920",
    "end": "961600"
  },
  {
    "text": "minus 3 and uh we can here we are taking the pointer of",
    "start": "961600",
    "end": "968120"
  },
  {
    "text": "the minus 2 and then dereferencing it and it gets even worse like the last",
    "start": "968120",
    "end": "973600"
  },
  {
    "text": "thing here um of course you wouldn't write this yourself but when you are using macros",
    "start": "973600",
    "end": "981120"
  },
  {
    "text": "uh or when you are using uh looking at COD generated uh automatically for you",
    "start": "981120",
    "end": "988600"
  },
  {
    "text": "you sometimes get these kind of constructs and it's useful to understand what they are doing and the answer is",
    "start": "988600",
    "end": "994680"
  },
  {
    "text": "basically that uh the these two the D reference and the address operator or",
    "start": "994680",
    "end": "1000880"
  },
  {
    "text": "the IND Direction and U address operator they're canceling each other out so what you're",
    "start": "1000880",
    "end": "1007519"
  },
  {
    "text": "looking at at here is basically only this",
    "start": "1007519",
    "end": "1012959"
  },
  {
    "text": "thing right now do something completely different",
    "start": "1013079",
    "end": "1019040"
  },
  {
    "start": "1018000",
    "end": "1113000"
  },
  {
    "text": "so here I I have um I'm repeatingly using the pre-increment operator to",
    "start": "1019040",
    "end": "1024280"
  },
  {
    "text": "increase the index so that we can print out all the elements in the array",
    "start": "1024280",
    "end": "1031400"
  },
  {
    "text": "um notice that I'm using size T it is possible to use an INT but it",
    "start": "1031400",
    "end": "1038720"
  },
  {
    "text": "will usually take you in the wrong direction uh an INT is first of all int",
    "start": "1038720",
    "end": "1044360"
  },
  {
    "text": "is a signed type you probably want to use an unsigned type to in index into an array unless",
    "start": "1044360",
    "end": "1050480"
  },
  {
    "text": "you're going negative in the array but also the size the width of the the type you want",
    "start": "1050480",
    "end": "1058320"
  },
  {
    "text": "to use to index into an array is um machine dependent and the runtime",
    "start": "1058320",
    "end": "1064039"
  },
  {
    "text": "dependent so it's better to include St Def and then you will get a type def for",
    "start": "1064039",
    "end": "1070000"
  },
  {
    "text": "size T that will typically give you an unsigned int or an unsigned long or an",
    "start": "1070000",
    "end": "1075679"
  },
  {
    "text": "unsigned long long depending on what you uh machine you are running on and it solves a lot of portability issues so if",
    "start": "1075679",
    "end": "1082919"
  },
  {
    "text": "you have had problems porting between 32bit and 64bit um this might be one of the things",
    "start": "1082919",
    "end": "1090360"
  },
  {
    "text": "you have been struggling with uh in your code but size T is your friend there is",
    "start": "1090360",
    "end": "1095600"
  },
  {
    "text": "also an s siiz t which can give you assigned version of size",
    "start": "1095600",
    "end": "1102039"
  },
  {
    "text": "T so uh how are we going to deal with this reputation any guess",
    "start": "1102039",
    "end": "1110320"
  },
  {
    "text": "H Loop yeah of course let's go for it and uh yeah goto can do the job uh goto",
    "start": "1110640",
    "end": "1118840"
  },
  {
    "start": "1113000",
    "end": "1240000"
  },
  {
    "text": "exists in the language of see I had to show it somewhere but also if you look in the for example in the",
    "start": "1118840",
    "end": "1125919"
  },
  {
    "text": "Linux um kernel source code for Linux kernel which is by the way one of the",
    "start": "1125919",
    "end": "1131799"
  },
  {
    "text": "best sources for learning uh C beautiful beautiful beautiful code there um",
    "start": "1131799",
    "end": "1139440"
  },
  {
    "text": "you will find plenty of uses of goto go-to is used all the time uh it's",
    "start": "1139440",
    "end": "1144760"
  },
  {
    "text": "usually not used like this though uh it's mostly used to jump forward to",
    "start": "1144760",
    "end": "1150000"
  },
  {
    "text": "clean up things but you can also find examples where you look at it and",
    "start": "1150000",
    "end": "1156760"
  },
  {
    "text": "said this seems to express the idea best and uh why not use it I'm not",
    "start": "1156760",
    "end": "1164320"
  },
  {
    "text": "encouraging anyone to start using goto massively but it's nice to know it exists in the language the key reason",
    "start": "1164320",
    "end": "1171520"
  },
  {
    "text": "why I show it here is to give a buildup onto the next the other ways of",
    "start": "1171520",
    "end": "1178080"
  },
  {
    "text": "iterating trait one of the key kind of inventions",
    "start": "1178080",
    "end": "1183880"
  },
  {
    "text": "or concept features that c introduced back in the early ' 70s was something",
    "start": "1183880",
    "end": "1189960"
  },
  {
    "text": "called the compound statement so here again is referring to",
    "start": "1189960",
    "end": "1195919"
  },
  {
    "text": "putar because that's the one statement but here the again label is bound to the",
    "start": "1195919",
    "end": "1203039"
  },
  {
    "text": "compound statement we have grouped statements together and in C nearly everywhere you you you can use a single",
    "start": "1203039",
    "end": "1210799"
  },
  {
    "text": "statement you can always put a compound statement instead by grouping them together with",
    "start": "1210799",
    "end": "1216679"
  },
  {
    "text": "the color braces like this now let's fix the indentation a bit and now you might",
    "start": "1216679",
    "end": "1223200"
  },
  {
    "text": "recognize there something similar something that I recognized here yes",
    "start": "1223200",
    "end": "1228760"
  },
  {
    "text": "it's the do while loop so this is the transition into the do while loop and",
    "start": "1228760",
    "end": "1235159"
  },
  {
    "text": "there is also a while loop where we put the loop invariant on",
    "start": "1235159",
    "end": "1240720"
  },
  {
    "text": "top and now we recognize a pattern that happens so often that there is a",
    "start": "1240720",
    "end": "1246840"
  },
  {
    "text": "separate keyword and a loop construct in in C and lot of other languages and it",
    "start": "1246840",
    "end": "1253240"
  },
  {
    "text": "works like this so the four",
    "start": "1253240",
    "end": "1260280"
  },
  {
    "text": "statements the middle part of that one is the con is the loop condition same as",
    "start": "1260280",
    "end": "1265919"
  },
  {
    "text": "the wir is using and now I have just left some open holes where we are going",
    "start": "1265919",
    "end": "1271120"
  },
  {
    "text": "that we are now going to fill with the initialization of the loop variable and with the update statement like",
    "start": "1271120",
    "end": "1280080"
  },
  {
    "text": "this and the for loop I show you now and the Y Loop we had earlier they are",
    "start": "1280080",
    "end": "1285960"
  },
  {
    "text": "exactly the same they will probably produce exactly the same machine code well I'm quite sure they will produce",
    "start": "1285960",
    "end": "1292679"
  },
  {
    "text": "the same machine code they are equivalent um here we are have hardcoded",
    "start": "1292679",
    "end": "1300520"
  },
  {
    "text": "six uh elements um but it is possible to",
    "start": "1300520",
    "end": "1306760"
  },
  {
    "text": "compute the size of an array and this is a an idiomatic way of doing",
    "start": "1306760",
    "end": "1312400"
  },
  {
    "text": "it where we take the size of the whole array and then divide it by the size of",
    "start": "1312400",
    "end": "1318039"
  },
  {
    "text": "of the first element and that will give you the number of elements inside uh so in this case",
    "start": "1318039",
    "end": "1325159"
  },
  {
    "text": "um we can now change the size of the array and the loop will still",
    "start": "1325159",
    "end": "1332320"
  },
  {
    "text": "work um the compiler knows how to count you don't have to specify the size like",
    "start": "1332320",
    "end": "1338840"
  },
  {
    "text": "this you can leave it blank and then the compiler will say yeah there are six",
    "start": "1338840",
    "end": "1345440"
  },
  {
    "text": "initialization elements here uh so therefore I will create an array of uh",
    "start": "1345440",
    "end": "1350760"
  },
  {
    "text": "six integers in this",
    "start": "1350760",
    "end": "1355159"
  },
  {
    "text": "case there are some useful functionality in the main now so let's extract it into",
    "start": "1357640",
    "end": "1363880"
  },
  {
    "text": "a function like this my put chars that",
    "start": "1363880",
    "end": "1370559"
  },
  {
    "text": "takes a base pointer and the number of elements and then use the traditional",
    "start": "1370559",
    "end": "1377360"
  },
  {
    "text": "way of looping through every element from the beginning to the end and you can see down here that we",
    "start": "1377360",
    "end": "1383960"
  },
  {
    "text": "are passing in this one now a is used as uh in an expression because this is",
    "start": "1383960",
    "end": "1390600"
  },
  {
    "text": "evaluated as an expression so it will Decay to a pointer and that is what we are passing in here and N is passed in",
    "start": "1390600",
    "end": "1397880"
  },
  {
    "text": "there inside this function there is another way of iterating uh some people",
    "start": "1397880",
    "end": "1404000"
  },
  {
    "text": "call it iterator pattern very much used in Plus+ and that",
    "start": "1404000",
    "end": "1410120"
  },
  {
    "text": "is instead of having a base pointer and then index into each element we compute",
    "start": "1410120",
    "end": "1416720"
  },
  {
    "text": "the beginning of the sequence a pointer to the beginning and then we",
    "start": "1416720",
    "end": "1422919"
  },
  {
    "text": "compute the address to the Phantom element the one",
    "start": "1422919",
    "end": "1428840"
  },
  {
    "text": "Beyond and in the loop now we are basically starting with the pointer to",
    "start": "1428840",
    "end": "1435000"
  },
  {
    "text": "the beginning and as long as the point the iterated pointer is not the same as",
    "start": "1435000",
    "end": "1440559"
  },
  {
    "text": "the end we are doing this Loop over and over and over",
    "start": "1440559",
    "end": "1445600"
  },
  {
    "text": "again and uh it's it's of course used in C as well and has been used from the",
    "start": "1445600",
    "end": "1451200"
  },
  {
    "text": "very beginning of C but it's it's everything in C++ is basically iterating",
    "start": "1451200",
    "end": "1457320"
  },
  {
    "text": "like this ranges and and so on so inspired by C++ um you might say but um",
    "start": "1457320",
    "end": "1466520"
  },
  {
    "text": "it's it's a useful way to think about iteration as well now um these begin and",
    "start": "1466520",
    "end": "1472760"
  },
  {
    "text": "end of course they can be passed in as argument arguments like",
    "start": "1472760",
    "end": "1478720"
  },
  {
    "text": "this um so now the caller basically sends in the base uh pointer to the base",
    "start": "1478720",
    "end": "1486440"
  },
  {
    "text": "and then the pointer to the one",
    "start": "1486440",
    "end": "1490720"
  },
  {
    "text": "beyond all right but now we instead of",
    "start": "1492600",
    "end": "1497760"
  },
  {
    "text": "giving the beginning and the end or the number of elements we might introduce a",
    "start": "1497760",
    "end": "1502960"
  },
  {
    "text": "convention that says if there is a zero in the end of the array then you should",
    "start": "1502960",
    "end": "1509840"
  },
  {
    "text": "stop iteration and we can now change this uh",
    "start": "1509840",
    "end": "1514919"
  },
  {
    "text": "loop condition so that we dreference the iterator and check that it's not zero as",
    "start": "1514919",
    "end": "1521320"
  },
  {
    "text": "long as it's not zero we are just iterating over and over now this is the same as this and be",
    "start": "1521320",
    "end": "1530799"
  },
  {
    "text": "like T concise uh small code so it's",
    "start": "1530799",
    "end": "1535880"
  },
  {
    "text": "often written like this and now we don't need the end uh pointer anymore we can just pass in the",
    "start": "1535880",
    "end": "1543080"
  },
  {
    "text": "base of the array and it will Loop until um the zero uh element uh in this",
    "start": "1543080",
    "end": "1551399"
  },
  {
    "text": "array and now we can get rid of the size calculation as well like this",
    "start": "1551399",
    "end": "1559440"
  },
  {
    "text": "now here we pass in the beginning and we create an iterator why not just take it",
    "start": "1559440",
    "end": "1565480"
  },
  {
    "text": "in as an iterator and similarly here we using the",
    "start": "1565480",
    "end": "1570640"
  },
  {
    "text": "pre-increment which you should always default to the pre-increment for some reason C programmers tend to default to",
    "start": "1570640",
    "end": "1577159"
  },
  {
    "text": "the post increment um I think we should do some work on on convincing to to by default",
    "start": "1577159",
    "end": "1585039"
  },
  {
    "text": "use the pre-increment but this is a particular case Cas where if you move if",
    "start": "1585039",
    "end": "1590600"
  },
  {
    "text": "you put the post increments here we don't need the updates u in in the followup anymore and now we are",
    "start": "1590600",
    "end": "1596720"
  },
  {
    "text": "recognizing that this is basically a y Loop and",
    "start": "1596720",
    "end": "1603200"
  },
  {
    "text": "uh um it's probably time to reveal what",
    "start": "1603200",
    "end": "1608720"
  },
  {
    "text": "these numbers are uh so I change it to a Char and then I",
    "start": "1608720",
    "end": "1615880"
  },
  {
    "text": "use uh kind of a constant literal uh instead oh sorry character literals",
    "start": "1615880",
    "end": "1623440"
  },
  {
    "text": "instead uh and what you're looking at now is exactly the same as",
    "start": "1623440",
    "end": "1629159"
  },
  {
    "text": "this so the string representation is basically a nice way of saying exactly",
    "start": "1629159",
    "end": "1635559"
  },
  {
    "text": "this it's just more compact than uh than all the braces and all the comment and",
    "start": "1635559",
    "end": "1642440"
  },
  {
    "text": "and so on and implicitly you will get a zero in",
    "start": "1642440",
    "end": "1648520"
  },
  {
    "text": "the end always when you use a string literal like this now if we continue to make it more",
    "start": "1648520",
    "end": "1655720"
  },
  {
    "text": "and more similar to puts uh we just uh add a new line in the",
    "start": "1655720",
    "end": "1660880"
  },
  {
    "text": "end so we don't need to have it in our string literal and then we can change it to my",
    "start": "1660880",
    "end": "1666559"
  },
  {
    "text": "puts and if we also now change the it to the more common s which is often used in",
    "start": "1666559",
    "end": "1673120"
  },
  {
    "text": "King and Richie and the library and so on we realize that we have basically created puts but without returning the",
    "start": "1673120",
    "end": "1680880"
  },
  {
    "text": "returning an error condition and of course we can put the literal inside the call and let's just",
    "start": "1680880",
    "end": "1689080"
  },
  {
    "text": "go for puts anyway and we can get rid of this one and we have a nice hello oh",
    "start": "1689080",
    "end": "1695600"
  },
  {
    "start": "1691000",
    "end": "1761000"
  },
  {
    "text": "before that yes we have an include that we don't need we have had it for a few slides remember to clean up your code",
    "start": "1695600",
    "end": "1702679"
  },
  {
    "text": "get rid of the unnecessary includes uh there was it's it's quite common when",
    "start": "1702679",
    "end": "1708000"
  },
  {
    "text": "you look at really large code bases that half of the compilation time is actually opening and closing files to be",
    "start": "1708000",
    "end": "1715360"
  },
  {
    "text": "included so uh a very good advice for anyone working with a large code base is",
    "start": "1715360",
    "end": "1721519"
  },
  {
    "text": "to look at how you can get rid of unnecessary includes and how you can",
    "start": "1721519",
    "end": "1729159"
  },
  {
    "text": "avoid header files to be included over and over and over and over again and there is something called an include uh",
    "start": "1729159",
    "end": "1736600"
  },
  {
    "text": "macro guard at you can use to avoid that and and so on also pragma ones is",
    "start": "1736600",
    "end": "1742080"
  },
  {
    "text": "sometimes used but anyway let's clean up and we have a nice hello",
    "start": "1742080",
    "end": "1747279"
  },
  {
    "text": "again all right now to something completely",
    "start": "1747600",
    "end": "1753879"
  },
  {
    "start": "1761000",
    "end": "2048000"
  },
  {
    "text": "different I like cooking and I take it seriously I'm not",
    "start": "1761159",
    "end": "1766760"
  },
  {
    "text": "very good at it but i' still take it seriously um and here are some notes I",
    "start": "1766760",
    "end": "1771960"
  },
  {
    "text": "made while uh doing a 1.3 kilo steak in oven at",
    "start": "1771960",
    "end": "1777320"
  },
  {
    "text": "125 Celsius so I just used them as as an excuse for",
    "start": "1777320",
    "end": "1783559"
  },
  {
    "text": "creating a structure with a Time Temp and scale because sometimes I",
    "start": "1783559",
    "end": "1789080"
  },
  {
    "text": "accidentally hit the button on the on the St Thom and uh I end up with",
    "start": "1789080",
    "end": "1796559"
  },
  {
    "text": "the Fahrenheit instead of Celsius and I have to fix that but this example I just let the fahrenheit be",
    "start": "1796559",
    "end": "1804080"
  },
  {
    "text": "here so when you run this code here is the structure here is an",
    "start": "1804080",
    "end": "1810120"
  },
  {
    "text": "array of these uh structures initialize and when I here I compute the number of",
    "start": "1810120",
    "end": "1817679"
  },
  {
    "text": "samples observations and here I just have a pretty print of the time the temp",
    "start": "1817679",
    "end": "1825039"
  },
  {
    "text": "and the scale and uh this is the output of this",
    "start": "1825039",
    "end": "1830640"
  },
  {
    "text": "program I need the screen estate here so I just put them on one line even though",
    "start": "1831679",
    "end": "1837720"
  },
  {
    "text": "I don't do that in practice but I just need more lines on the slide",
    "start": "1837720",
    "end": "1843559"
  },
  {
    "text": "here so looking at this Loop here um this is just a an excuse for showing two",
    "start": "1843559",
    "end": "1851440"
  },
  {
    "text": "constructs continue and break and suppose that if the scale is",
    "start": "1851440",
    "end": "1857039"
  },
  {
    "text": "not not Celsius then I don't care about it so I say continue and that means go",
    "start": "1857039",
    "end": "1864519"
  },
  {
    "text": "back and do the do the next operation um the the next",
    "start": "1864519",
    "end": "1869600"
  },
  {
    "text": "iteration similarly if the time is more than 131 that's 2 hours and 11 minutes I",
    "start": "1869600",
    "end": "1876240"
  },
  {
    "text": "took the stake out there are still observations but I don't care about them uh you might say let's just",
    "start": "1876240",
    "end": "1883399"
  },
  {
    "text": "break the the iteration I'm not interested anymore so this was just an excuse to show",
    "start": "1883399",
    "end": "1889760"
  },
  {
    "text": "continue and break but there is a warning here though uh continue and",
    "start": "1889760",
    "end": "1894919"
  },
  {
    "text": "break well continue in particular they are like um uh bug",
    "start": "1894919",
    "end": "1902519"
  },
  {
    "text": "attractors very often when you have bug in in the code it's close to a continue",
    "start": "1902519",
    "end": "1909279"
  },
  {
    "text": "used in the most simple scenarios like this it's probably fine but in your code base you should probably do a search for",
    "start": "1909279",
    "end": "1916440"
  },
  {
    "text": "continue uh and and read the code around it and you have a high chance of finding a bug",
    "start": "1916440",
    "end": "1924000"
  },
  {
    "text": "because it breaks the logic it breaks the thinking both for the computer and and for the compiler no for the",
    "start": "1924000",
    "end": "1930720"
  },
  {
    "text": "programmer uh and it's it's often a good idea to be careful about using continue",
    "start": "1930720",
    "end": "1938240"
  },
  {
    "text": "used like this I think it's fine but more complicated examples are often not fine they can be solved in different",
    "start": "1938240",
    "end": "1945960"
  },
  {
    "text": "ways uh um yeah so this is the output we get when we have done the continue and",
    "start": "1945960",
    "end": "1952360"
  },
  {
    "text": "break now I need to rewind a bit simplify the slides to fit more into",
    "start": "1952360",
    "end": "1958200"
  },
  {
    "text": "them so I'm simplifying this back to what we",
    "start": "1958200",
    "end": "1963559"
  },
  {
    "text": "had I'm also just getting rid of a few observations uh to get a few more lines",
    "start": "1963559",
    "end": "1970200"
  },
  {
    "text": "to work with um sometimes when I do these",
    "start": "1970200",
    "end": "1975480"
  },
  {
    "text": "observations uh I get them in the wrong order I might write them on a different note and and so on so here just to",
    "start": "1975480",
    "end": "1983480"
  },
  {
    "text": "illustrate that I swwa these two observations so they are not in timely",
    "start": "1983480",
    "end": "1989039"
  },
  {
    "text": "order of course I could have sorted them and do all of that kind of stuff but now",
    "start": "1989039",
    "end": "1994880"
  },
  {
    "text": "it's a nice chance to show this one and this doesn't exist in C++ well it maybe it came in C++",
    "start": "1994880",
    "end": "2003880"
  },
  {
    "text": "20 you can do this um you can specify which element you",
    "start": "2003880",
    "end": "2011519"
  },
  {
    "text": "want to initialize in in the sequence now in the in the array and you can also",
    "start": "2011519",
    "end": "2017720"
  },
  {
    "text": "use these names to say these are the elements I want to initialize and they",
    "start": "2017720",
    "end": "2023679"
  },
  {
    "text": "can you can swap the order and and and things like that sometimes this is super",
    "start": "2023679",
    "end": "2029600"
  },
  {
    "text": "convenient this is called designators and they provide explicit",
    "start": "2029600",
    "end": "2035039"
  },
  {
    "text": "initialization uh in in a list like this",
    "start": "2035039",
    "end": "2040919"
  },
  {
    "text": "desate initializers",
    "start": "2040919",
    "end": "2046320"
  },
  {
    "text": "yeah all right slightly changing we are still working with the temperature here",
    "start": "2047560",
    "end": "2052638"
  },
  {
    "start": "2048000",
    "end": "2538000"
  },
  {
    "text": "but not with an array we are now now introducing a",
    "start": "2052639",
    "end": "2059040"
  },
  {
    "text": "compound um literal so here I'm basically creating",
    "start": "2059040",
    "end": "2066320"
  },
  {
    "text": "an object object as I'm passing it into the print sample function and the print sample",
    "start": "2066320",
    "end": "2074320"
  },
  {
    "text": "function is taking a copy of that object that we can work with inside of the",
    "start": "2074320",
    "end": "2082878"
  },
  {
    "text": "function um this might I've seen examples or heard and and heard about",
    "start": "2082960",
    "end": "2089760"
  },
  {
    "text": "examples of um using this as kind of a poor man kind of named",
    "start": "2089760",
    "end": "2098480"
  },
  {
    "text": "arguments way of passing named arguments into a function I'm not sure how far you",
    "start": "2098480",
    "end": "2104599"
  },
  {
    "text": "should go down into that route but um I guess you see that it's a possibility of",
    "start": "2104599",
    "end": "2110200"
  },
  {
    "text": "of doing so all right so this will print out a",
    "start": "2110200",
    "end": "2118960"
  },
  {
    "text": "temperature now we might instead of passing a copy",
    "start": "2119400",
    "end": "2124760"
  },
  {
    "text": "of the whole structure we might want to just pass uh a pointer to that structure",
    "start": "2124760",
    "end": "2131520"
  },
  {
    "text": "by the way in in C uh you can only pass by copy there is",
    "start": "2131520",
    "end": "2137680"
  },
  {
    "text": "no such thing as pass by reference and even pointers are passed by copy because",
    "start": "2137680",
    "end": "2143480"
  },
  {
    "text": "they are Pointers that you are actually passing so you might pretend like it's something more advanced but it's still a",
    "start": "2143480",
    "end": "2150000"
  },
  {
    "text": "pass by copy so this is also a pass by copy we are copying in the pointer to",
    "start": "2150000",
    "end": "2155560"
  },
  {
    "text": "this object in this case it won't save as much performance actually it might be much worse um but uh it's quite common",
    "start": "2155560",
    "end": "2164640"
  },
  {
    "text": "to work on on pointers instead of uh big uh structures that we are copying back",
    "start": "2164640",
    "end": "2170720"
  },
  {
    "text": "and forth uh into functions in C um notice that since we are passing a",
    "start": "2170720",
    "end": "2176839"
  },
  {
    "text": "pointer we need to D reference the pointer before we can access the element",
    "start": "2176839",
    "end": "2183440"
  },
  {
    "text": "inside of the structure so that's what we are doing here now this has",
    "start": "2183440",
    "end": "2188880"
  },
  {
    "text": "um a nice syntactical um helper with this Arrow um",
    "start": "2188880",
    "end": "2197520"
  },
  {
    "text": "operator also called the structure Point operator um but it's useful to know that",
    "start": "2197520",
    "end": "2203440"
  },
  {
    "text": "what you're looking at here is the same as we see",
    "start": "2203440",
    "end": "2208680"
  },
  {
    "text": "here um since we are not modifying the object that we are receiving you probably want to to put a",
    "start": "2209920",
    "end": "2217000"
  },
  {
    "text": "const in front and const is just as important in C as it is in",
    "start": "2217000",
    "end": "2222079"
  },
  {
    "text": "C++ so whenever you're working where you have a pointer to an object and you do",
    "start": "2222079",
    "end": "2228200"
  },
  {
    "text": "not intend to change it you probably want to declare it as const it's a very",
    "start": "2228200",
    "end": "2233760"
  },
  {
    "text": "strong communication tool to other programmers and yourself and the compiler um that this",
    "start": "2233760",
    "end": "2241200"
  },
  {
    "text": "is you're sending in some data but you're not giving away the ownership to",
    "start": "2241200",
    "end": "2246359"
  },
  {
    "text": "it and you're not allowing modification on on the on the",
    "start": "2246359",
    "end": "2252319"
  },
  {
    "text": "data and here I call it print sample print sample is a perfectly fine function name uh for this but it's quite",
    "start": "2252319",
    "end": "2259839"
  },
  {
    "text": "common to see this naming um standard or",
    "start": "2259839",
    "end": "2265520"
  },
  {
    "text": "whatever where the first part of of the function is basically the structure name",
    "start": "2265520",
    "end": "2273280"
  },
  {
    "text": "and the last part is kind of the member function accessing and and",
    "start": "2273280",
    "end": "2280440"
  },
  {
    "text": "using that structure and by doing this you get some kind of feeling that we can",
    "start": "2280440",
    "end": "2287960"
  },
  {
    "text": "do some objectoriented stuff uh I would say there you you can't",
    "start": "2287960",
    "end": "2293640"
  },
  {
    "text": "really do that I have seen so many efforts of trying to do object orientation in C and uh when I see the",
    "start": "2293640",
    "end": "2301839"
  },
  {
    "text": "horrors of the result I always recommend why not use C++ instead if you want to",
    "start": "2301839",
    "end": "2307319"
  },
  {
    "text": "go deep down in the objectoriented uh way C++ is pro probably your language",
    "start": "2307319",
    "end": "2313560"
  },
  {
    "text": "instead but anyway it's very common to see see something like this um and you can take this ID further",
    "start": "2313560",
    "end": "2322920"
  },
  {
    "text": "um so here I've implemented not a command member member function but a",
    "start": "2322920",
    "end": "2330119"
  },
  {
    "text": "query member function uh where you pass in the temp pointer to a temp sample uh",
    "start": "2330119",
    "end": "2339359"
  },
  {
    "text": "structure and then you query can I get the temperature in celsius",
    "start": "2339359",
    "end": "2344640"
  },
  {
    "text": "please and inside here you're Computing um doing what is needed to always return",
    "start": "2344640",
    "end": "2351599"
  },
  {
    "text": "the Celsius version of the temperature in that",
    "start": "2351599",
    "end": "2356318"
  },
  {
    "text": "observation this gave me a chance to show the if and the elif and and so on",
    "start": "2357400",
    "end": "2362520"
  },
  {
    "text": "but what I really wanted to show was this",
    "start": "2362520",
    "end": "2368440"
  },
  {
    "text": "this would be a typical example where we would use switch and case",
    "start": "2369040",
    "end": "2375480"
  },
  {
    "text": "um the switch um is must be um well typically it's",
    "start": "2375480",
    "end": "2383839"
  },
  {
    "text": "it's a numerical uh value that's uh you can uh then make a decision should I go",
    "start": "2383839",
    "end": "2390160"
  },
  {
    "text": "to this case this case or these cases notice that um",
    "start": "2390160",
    "end": "2398400"
  },
  {
    "text": "here we have a fault through from R to K and I claim that",
    "start": "2398920",
    "end": "2405640"
  },
  {
    "text": "this is a perfect example and why switch is so nice you really want that F",
    "start": "2405640",
    "end": "2411160"
  },
  {
    "text": "through uh and it's so obvious that you don't probably don't want to document it",
    "start": "2411160",
    "end": "2416560"
  },
  {
    "text": "with a this kind of pman annotation by the way this annotation is the formally",
    "start": "2416560",
    "end": "2421720"
  },
  {
    "text": "defined in the c23 standard then it comes with square brackets and and so on",
    "start": "2421720",
    "end": "2427040"
  },
  {
    "text": "but uh you get full through but be aware that every case that you don't want to full through on you of course you need",
    "start": "2427040",
    "end": "2433319"
  },
  {
    "text": "the break and I realize now you probably need a you want a break here as well on",
    "start": "2433319",
    "end": "2439480"
  },
  {
    "text": "the default just for consistency in case you decide that the default should be a",
    "start": "2439480",
    "end": "2444560"
  },
  {
    "text": "case instead of the default and and so on I I don't know all right I got the chance to show",
    "start": "2444560",
    "end": "2451839"
  },
  {
    "text": "the switch and case um before moving",
    "start": "2451839",
    "end": "2457680"
  },
  {
    "text": "on here we are using a character to um to hold the scale whether it's Celsius",
    "start": "2457680",
    "end": "2466480"
  },
  {
    "text": "Fahrenheit Rankin or kelvin um but you could also introduce an",
    "start": "2466480",
    "end": "2473359"
  },
  {
    "text": "enom um with a temperature scale uh it's a fair primitive mechanism the enom in",
    "start": "2473359",
    "end": "2479680"
  },
  {
    "text": "in C mostly is a bit like creating just",
    "start": "2479680",
    "end": "2485880"
  },
  {
    "text": "const um you can wrap the enm inside of a type",
    "start": "2485880",
    "end": "2492200"
  },
  {
    "text": "no inside of a struct and somehow emulate enms that are type safe and so",
    "start": "2492200",
    "end": "2500680"
  },
  {
    "text": "on um it takes you a bit in the right direction but not all the way it's a",
    "start": "2500680",
    "end": "2506599"
  },
  {
    "text": "primitive mechanism but it's very useful um and and for example this is a decent",
    "start": "2506599",
    "end": "2512359"
  },
  {
    "text": "example of using enms in C enms are are usually stored as an integer maybe",
    "start": "2512359",
    "end": "2519760"
  },
  {
    "text": "that's defined in the standard in C++ uh the standard says just the number of",
    "start": "2519760",
    "end": "2525599"
  },
  {
    "text": "bits required to store the enom which is usually if you have less than 256 cases",
    "start": "2525599",
    "end": "2531839"
  },
  {
    "text": "it's usually a bite or a Char a",
    "start": "2531839",
    "end": "2536920"
  },
  {
    "text": "Char all right now to something completely",
    "start": "2536920",
    "end": "2541960"
  },
  {
    "start": "2538000",
    "end": "2745000"
  },
  {
    "text": "different so here I want to um talk about uh storage duration memory and and",
    "start": "2541960",
    "end": "2551800"
  },
  {
    "text": "how we deal with that uh what we you are looking at now is",
    "start": "2551800",
    "end": "2558160"
  },
  {
    "text": "um we are creating a sample which is at so called object of",
    "start": "2558160",
    "end": "2563520"
  },
  {
    "text": "automatic storage duration some people call it a function variable or a stack variable uh I don't",
    "start": "2563520",
    "end": "2571640"
  },
  {
    "text": "like those names especially not the last one stack variable because it kind of implies that c has a stack and",
    "start": "2571640",
    "end": "2579480"
  },
  {
    "text": "theoretically it does but in practice the compiler will try to avoid using a",
    "start": "2579480",
    "end": "2585520"
  },
  {
    "text": "stack as much as possible um so if you're looking for a stack inside of the",
    "start": "2585520",
    "end": "2591000"
  },
  {
    "text": "produced machine code you will often not find the stack in C and in the C",
    "start": "2591000",
    "end": "2596599"
  },
  {
    "text": "standard the word stack is never mentioned um in the standard um so um",
    "start": "2596599",
    "end": "2605079"
  },
  {
    "text": "it's a long it's it's a long word automatic storage duration but it's useful word to use because if you search",
    "start": "2605079",
    "end": "2611920"
  },
  {
    "text": "on the internet and you have questions about it if you sear search a stack",
    "start": "2611920",
    "end": "2616960"
  },
  {
    "text": "variable you will get to thousands and thousands of recommendations for how to do things written by people that don't",
    "start": "2616960",
    "end": "2623960"
  },
  {
    "text": "understand much about C if you search for automatic storage duration you won't get that many hits but they are probably",
    "start": "2623960",
    "end": "2631480"
  },
  {
    "text": "of a higher quality than kind of the stack variable people",
    "start": "2631480",
    "end": "2636960"
  },
  {
    "text": "uh the scope is also interesting here um the scope of sample is within this function",
    "start": "2636960",
    "end": "2645520"
  },
  {
    "text": "demo um of course try to avoid um using",
    "start": "2645520",
    "end": "2650680"
  },
  {
    "text": "Global scope we often want to limit the scope of our symbols as much as possible",
    "start": "2650680",
    "end": "2657200"
  },
  {
    "text": "that's also the reason why we tend to put static in front of things to limit",
    "start": "2657200",
    "end": "2662480"
  },
  {
    "text": "the kind of linker visibility where can this will be seen uh and the same is is",
    "start": "2662480",
    "end": "2669040"
  },
  {
    "text": "through here it's um the scope of sample is it's not visible outside of this",
    "start": "2669040",
    "end": "2675240"
  },
  {
    "text": "F now if I take this object of automatic uh storage",
    "start": "2675240",
    "end": "2681520"
  },
  {
    "text": "duration and then move it out into the file",
    "start": "2681520",
    "end": "2686880"
  },
  {
    "text": "level I get an object of static storage",
    "start": "2686880",
    "end": "2694440"
  },
  {
    "text": "duration um so every object uh defined in the file",
    "start": "2694440",
    "end": "2700359"
  },
  {
    "text": "on the file level they are by default implicitly stat static so adding static",
    "start": "2700359",
    "end": "2707480"
  },
  {
    "text": "in front it's the same keyword and to my surprise it is actually in the standard",
    "start": "2707480",
    "end": "2713240"
  },
  {
    "text": "it is called the storage um specifier also when used like",
    "start": "2713240",
    "end": "2720839"
  },
  {
    "text": "this um but it's it's an overloading both of the keyword and intention of it",
    "start": "2720839",
    "end": "2727599"
  },
  {
    "text": "because as you know U we talked about what it's doing is reducing the Linker",
    "start": "2727599",
    "end": "2733520"
  },
  {
    "text": "visibility other object files cannot see uh the sample uh now that we have static",
    "start": "2733520",
    "end": "2739880"
  },
  {
    "text": "in",
    "start": "2739880",
    "end": "2742039"
  },
  {
    "start": "2745000",
    "end": "3062000"
  },
  {
    "text": "front all right let's move it back into",
    "start": "2745680",
    "end": "2751800"
  },
  {
    "text": "the function but now using the static keyword here static means something else now",
    "start": "2751800",
    "end": "2760160"
  },
  {
    "text": "static means that the object well I forgot to say that let's go back um the",
    "start": "2760160",
    "end": "2766800"
  },
  {
    "text": "objects of automatic storage duration starts to exist on the beginning of the",
    "start": "2766800",
    "end": "2773440"
  },
  {
    "text": "function and it is destroyed when you go out of the",
    "start": "2773440",
    "end": "2779040"
  },
  {
    "text": "function it well it isn't destroyed as such it's not valid anymore so if you",
    "start": "2779040",
    "end": "2784079"
  },
  {
    "text": "reference uh refer into it you get undefined Behavior so in practice it",
    "start": "2784079",
    "end": "2790079"
  },
  {
    "text": "doesn't exist however if you put it",
    "start": "2790079",
    "end": "2795720"
  },
  {
    "text": "uh objects of static storage duration like this they are created before",
    "start": "2795960",
    "end": "2802680"
  },
  {
    "text": "Main and they stop existing after main is finished and the same is true also if",
    "start": "2802680",
    "end": "2809240"
  },
  {
    "text": "you put them inside of this function so the object is now created before Main",
    "start": "2809240",
    "end": "2815480"
  },
  {
    "text": "and allocated and and and ready before Main and certainly before you come to",
    "start": "2815480",
    "end": "2821319"
  },
  {
    "text": "demo and it will exist until the program",
    "start": "2821319",
    "end": "2826480"
  },
  {
    "text": "terminates this also mean you can return um a pointer to it so here I'm",
    "start": "2826480",
    "end": "2835160"
  },
  {
    "text": "taking the address of this um object of static storage duration and return it",
    "start": "2835160",
    "end": "2840480"
  },
  {
    "text": "back to main so that main can print out the sample uh and this is about dealing",
    "start": "2840480",
    "end": "2847000"
  },
  {
    "text": "with the ownership and so on I'm not saying that this is necessarily a good idea but it's not necessarily a bad idea",
    "start": "2847000",
    "end": "2852599"
  },
  {
    "text": "either it's something that you can do because the object exists it has static sour duration exists from the beginning",
    "start": "2852599",
    "end": "2859319"
  },
  {
    "text": "to the end of the program or storage for that object",
    "start": "2859319",
    "end": "2865680"
  },
  {
    "text": "exists now the obvious next thing to show is using",
    "start": "2865680",
    "end": "2872160"
  },
  {
    "text": "maloc which is an object",
    "start": "2872160",
    "end": "2877720"
  },
  {
    "text": "of correct me allocated storage duration Dynamic storage duration",
    "start": "2878440",
    "end": "2884760"
  },
  {
    "text": "yes um",
    "start": "2884760",
    "end": "2888440"
  },
  {
    "text": "so yeah but I think this is in C it's a dynamic stor verion but this needs to be",
    "start": "2889960",
    "end": "2895520"
  },
  {
    "text": "checked but anyway U Malo so Malo is a way to ask uh usually the Heap even",
    "start": "2895520",
    "end": "2902359"
  },
  {
    "text": "though that doesn't exist either in in the theory in practice it does um so it",
    "start": "2902359",
    "end": "2909160"
  },
  {
    "text": "asks for some memory in the free store um and it will return a pointer to it if",
    "start": "2909160",
    "end": "2915240"
  },
  {
    "text": "it succeeds or null if it doesn't exceed and if you can't get memory to work with",
    "start": "2915240",
    "end": "2922280"
  },
  {
    "text": "you probably don't want to continue your program so exit failure is might be what",
    "start": "2922280",
    "end": "2928200"
  },
  {
    "text": "you want to do or somehow violently scream I'm not ready to continue uh you certainly don't want to",
    "start": "2928200",
    "end": "2935640"
  },
  {
    "text": "ignore it because writing into a memory location that uh you were not",
    "start": "2935640",
    "end": "2941799"
  },
  {
    "text": "given or null for example it's it's a terrible ID uh don't do",
    "start": "2941799",
    "end": "2948799"
  },
  {
    "text": "it and uh now since we have um an object of dynamic storage duration we can do",
    "start": "2948799",
    "end": "2954960"
  },
  {
    "text": "whatever we want it will exist until we release it with a",
    "start": "2954960",
    "end": "2961319"
  },
  {
    "text": "free so you can choose to do it in the same place or you can create it one place and then say well I will delete it",
    "start": "2961319",
    "end": "2968640"
  },
  {
    "text": "later and so on this is perfectly fine it's something that we often do with uh",
    "start": "2968640",
    "end": "2973920"
  },
  {
    "text": "dynamically allocated memory um but of course you might",
    "start": "2973920",
    "end": "2982440"
  },
  {
    "text": "want I I would like to show an example where we do the maloc and the free in",
    "start": "2982440",
    "end": "2987640"
  },
  {
    "text": "the same function so I'm moving it in here now Malo is there is there I'm we",
    "start": "2987640",
    "end": "2993880"
  },
  {
    "text": "printing out the sample and it gives me a chance to show the more typical use of",
    "start": "2993880",
    "end": "2999640"
  },
  {
    "text": "a goto uh it very often looks like this so you have some cleanup section in your",
    "start": "2999640",
    "end": "3007319"
  },
  {
    "text": "function and then if you get some errors after having grabbed some resources and",
    "start": "3007319",
    "end": "3013240"
  },
  {
    "text": "allocated some memory you go to the cleanup section and and you get rid of",
    "start": "3013240",
    "end": "3020680"
  },
  {
    "text": "your stuff now this can always be solved with an extra of in",
    "start": "3020680",
    "end": "3026880"
  },
  {
    "text": "Direction um so it is a choice you have whether you",
    "start": "3026880",
    "end": "3032760"
  },
  {
    "text": "want to use go to like this or not but uh sometimes you're in a situation where",
    "start": "3032760",
    "end": "3038359"
  },
  {
    "text": "you don't write all the code yourself sometimes you just have to deal with code written by others and then it's",
    "start": "3038359",
    "end": "3043960"
  },
  {
    "text": "useful to understand this particular idiom I think I counted more than 100",
    "start": "3043960",
    "end": "3050839"
  },
  {
    "text": "uses of this in the Linux colel uh it's a very common way of doing it there there for example",
    "start": "3050839",
    "end": "3057559"
  },
  {
    "text": "layer H layer yeah and yeah you can also layer them yeah all",
    "start": "3057559",
    "end": "3065960"
  },
  {
    "start": "3062000",
    "end": "3351000"
  },
  {
    "text": "right we are doing nice on time here um we need to talk about memory a",
    "start": "3066240",
    "end": "3073880"
  },
  {
    "text": "bit [Music] um on my development PC the one I'm",
    "start": "3073880",
    "end": "3079839"
  },
  {
    "text": "writing my slides on um often I work in an embedded domain and then this isn't",
    "start": "3079839",
    "end": "3086960"
  },
  {
    "text": "true at all but on kind of a desktop computer",
    "start": "3086960",
    "end": "3092520"
  },
  {
    "text": "um and on my PowerPoint generating machine uh I get uh if I run this",
    "start": "3092520",
    "end": "3100400"
  },
  {
    "text": "program my ins are four in size",
    "start": "3100400",
    "end": "3106359"
  },
  {
    "text": "my double is eight Char is one that is actually the",
    "start": "3106359",
    "end": "3113599"
  },
  {
    "text": "only value that you know is always one the others they can vary they can be the",
    "start": "3113599",
    "end": "3121319"
  },
  {
    "text": "integer can be four it can be eight it can be two it can be one someone wants to correct me yeah",
    "start": "3121319",
    "end": "3129160"
  },
  {
    "text": "one it will probably be one if the Char is one no if yeah if the Char is 32",
    "start": "3129160",
    "end": "3137960"
  },
  {
    "text": "bit uh then the integer can be one so theoretically you don't know how big it",
    "start": "3137960",
    "end": "3144720"
  },
  {
    "text": "is but then you might be a bit surprised by the size of the structure it's",
    "start": "3144720",
    "end": "3153319"
  },
  {
    "text": "24 and to encourage some interaction anyone would like to suggest",
    "start": "3153319",
    "end": "3159559"
  },
  {
    "text": "why yeah all right you H",
    "start": "3159559",
    "end": "3167119"
  },
  {
    "text": "sorry yes it's alignment and I like that you said alignment first you said",
    "start": "3167359",
    "end": "3173079"
  },
  {
    "text": "padding because uh if it's not because of the padding that we get it it's because of the",
    "start": "3173079",
    "end": "3178920"
  },
  {
    "text": "alignment that we get this uh this size and the thing is that stuff like double",
    "start": "3178920",
    "end": "3187559"
  },
  {
    "text": "and int they often want a certain alignment uh and on my machine if the",
    "start": "3187559",
    "end": "3195160"
  },
  {
    "text": "compiler puts a double onto an address that is not divisible by",
    "start": "3195160",
    "end": "3201960"
  },
  {
    "text": "eight I get an the program crashes uh it's often a segmentation fault or",
    "start": "3201960",
    "end": "3209839"
  },
  {
    "text": "something like that that it ends up with similarly if the int is put on an",
    "start": "3209839",
    "end": "3215079"
  },
  {
    "text": "address that is not divisible by four it crashes the Char is the only one on my",
    "start": "3215079",
    "end": "3222160"
  },
  {
    "text": "machine that you can put anywhere you want so these structures they come with",
    "start": "3222160",
    "end": "3229040"
  },
  {
    "text": "an alignment requirement and the rule of thumb is approximately like this the alignment",
    "start": "3229040",
    "end": "3234799"
  },
  {
    "text": "requirement M of a struct will typically be the same as the Align requirement of",
    "start": "3234799",
    "end": "3240400"
  },
  {
    "text": "the strictest um element inside which in this case is",
    "start": "3240400",
    "end": "3246319"
  },
  {
    "text": "eight 24 is divisible by 8 so that's the reason why we get 24 and then the",
    "start": "3246319",
    "end": "3252640"
  },
  {
    "text": "compiler will do what it takes to kind of pad up the others so that they are",
    "start": "3252640",
    "end": "3257880"
  },
  {
    "text": "correctly uh put in place um yeah I remove that slide but",
    "start": "3257880",
    "end": "3264440"
  },
  {
    "text": "there is actually um a keyword in C called align",
    "start": "3264440",
    "end": "3270040"
  },
  {
    "text": "off uh where you can ask the object and the type what's what is your alignment",
    "start": "3270040",
    "end": "3277359"
  },
  {
    "text": "requirement",
    "start": "3277359",
    "end": "3280359"
  },
  {
    "text": "yeah on my machine that's correct yes so",
    "start": "3283599",
    "end": "3288680"
  },
  {
    "text": "um uh what the gentleman over here said is that if you change the or order of",
    "start": "3288680",
    "end": "3296040"
  },
  {
    "text": "this particular structure on my machine which is probably very similar to yours",
    "start": "3296040",
    "end": "3301680"
  },
  {
    "text": "since you knew that um then uh then the int which has an alignment requirement",
    "start": "3301680",
    "end": "3308880"
  },
  {
    "text": "of four um the Char can be wherever so it can take one of the otherwise padded",
    "start": "3308880",
    "end": "3314640"
  },
  {
    "text": "spaces and then the double will get uh an aligned eight",
    "start": "3314640",
    "end": "3322079"
  },
  {
    "text": "um mod 8 uh address position uh and then the whole struct will get an",
    "start": "3322079",
    "end": "3327559"
  },
  {
    "text": "alignment requirement of 16 well of eight it's still alignment requirement of eight but the size will be uh 16 on",
    "start": "3327559",
    "end": "3337359"
  },
  {
    "text": "my development my PowerPoint generating machine on embedded it's completely",
    "start": "3337359",
    "end": "3343880"
  },
  {
    "text": "different you have to study the ab ABI abstract binary interface that tells you about the alignment",
    "start": "3343880",
    "end": "3351440"
  },
  {
    "text": "required all right and then the final example and I have shown this many times",
    "start": "3351440",
    "end": "3359559"
  },
  {
    "text": "in talks before so some of you might be like oh not again but if you haven't",
    "start": "3359559",
    "end": "3365640"
  },
  {
    "text": "seen it before you might enjoy or be scared to death by this",
    "start": "3365640",
    "end": "3371839"
  },
  {
    "text": "one uh this is a piece of code that is um of course it's",
    "start": "3371839",
    "end": "3377720"
  },
  {
    "text": "rubbish um but it's you can type it into",
    "start": "3377720",
    "end": "3383119"
  },
  {
    "text": "Java or into sharp or a lot of other program languages and it will always",
    "start": "3383119",
    "end": "3389359"
  },
  {
    "text": "generate exactly the same result it's well defined in many other languages but",
    "start": "3389359",
    "end": "3394480"
  },
  {
    "text": "not so in C not so in C++ spend a few seconds just look at it",
    "start": "3394480",
    "end": "3401400"
  },
  {
    "text": "try to figure out what do you think it might be on my machine well you can give or",
    "start": "3401400",
    "end": "3407280"
  },
  {
    "text": "you can what would it be on your machine or your kind of chip when you are doing some embedded development and so on and",
    "start": "3407280",
    "end": "3415480"
  },
  {
    "text": "uh I take some anyone that would like to",
    "start": "3415480",
    "end": "3422440"
  },
  {
    "text": "suggest we will come maybe come back to that",
    "start": "3423720",
    "end": "3428640"
  },
  {
    "text": "yeah all right who wants to make a first guess yes thank you 13 I love that",
    "start": "3431880",
    "end": "3437920"
  },
  {
    "text": "answer any anyone else zero zero I love that answer as well come on",
    "start": "3437920",
    "end": "3445599"
  },
  {
    "text": "any higher lower well the point here is and this is",
    "start": "3445599",
    "end": "3454559"
  },
  {
    "text": "super important and it's true in C++ it's true in C and that is the",
    "start": "3454559",
    "end": "3460880"
  },
  {
    "text": "evaluation order is mostly unspecified we don't know we cannot know",
    "start": "3460880",
    "end": "3468640"
  },
  {
    "text": "whether it's trying to evaluate expressions from left to",
    "start": "3468640",
    "end": "3473799"
  },
  {
    "text": "right if it's a strictly left to right I think you get",
    "start": "3473799",
    "end": "3481000"
  },
  {
    "text": "11 if you do a strictly right to to left you get something",
    "start": "3481319",
    "end": "3487240"
  },
  {
    "text": "else if you do kind of a spiral evaluation you get something",
    "start": "3487240",
    "end": "3493599"
  },
  {
    "text": "else but what compilers often do is that say I I don't care because this is a",
    "start": "3493599",
    "end": "3500319"
  },
  {
    "text": "sequence Point violation you are not allowed to up update a variable twice",
    "start": "3500319",
    "end": "3506640"
  },
  {
    "text": "within a sequence point and um and that",
    "start": "3506640",
    "end": "3511760"
  },
  {
    "text": "the sequence points are basically The rhythms in the program that says when do these evaluations have to be stored into",
    "start": "3511760",
    "end": "3519160"
  },
  {
    "text": "some place so that it can be used for other Evolutions later in uh in more modern standards",
    "start": "3519160",
    "end": "3526440"
  },
  {
    "text": "it's called sequence before and sequence after and so on but the the rules are approximately the same so since we don't",
    "start": "3526440",
    "end": "3532680"
  },
  {
    "text": "know the evaluation order if if we evaluate this one first and then this one and this one we get one result if we",
    "start": "3532680",
    "end": "3539119"
  },
  {
    "text": "evaluate this one first and then this one and this one we get another result and uh here are three compilers",
    "start": "3539119",
    "end": "3546880"
  },
  {
    "text": "the GC compiler will give you 12 the Intel compiler will give you",
    "start": "3546880",
    "end": "3553839"
  },
  {
    "text": "13 and Clank will give you 11 no on average they",
    "start": "3553839",
    "end": "3560480"
  },
  {
    "text": "are well they are all wrong so by that thank you very much",
    "start": "3560480",
    "end": "3566960"
  },
  {
    "text": "that was my",
    "start": "3566960",
    "end": "3569640"
  },
  {
    "text": "talk we we have room for couple of questions um or comments or",
    "start": "3573480",
    "end": "3580880"
  },
  {
    "text": "whatever if there",
    "start": "3580880",
    "end": "3584240"
  },
  {
    "text": "are no or I will hang around here and you can uh you can discuss this anytime",
    "start": "3586559",
    "end": "3594160"
  },
  {
    "text": "and I plan to publish these uh slides uh I just need to put on some",
    "start": "3594160",
    "end": "3601880"
  },
  {
    "text": "talking Bubbles and and so on so that it's possible to read them without the",
    "start": "3601880",
    "end": "3607359"
  },
  {
    "text": "narration of me uh and I will also add a few extra things there because then I'm",
    "start": "3607359",
    "end": "3612599"
  },
  {
    "text": "not limited to 60 minutes then I can do maybe 90 minutes when I present the slides yeah there is one question over",
    "start": "3612599",
    "end": "3618880"
  },
  {
    "text": "there I will repeat the question oh yes go for it is it possible to find out the maximum value of of a size T typed uh",
    "start": "3618880",
    "end": "3628480"
  },
  {
    "text": "variable yeah it's uh in limits. ag uh you can you can find uh the limits",
    "start": "3628480",
    "end": "3636640"
  },
  {
    "text": "of uh of the types so just as you can find the biggest inss or the biggest",
    "start": "3636640",
    "end": "3642960"
  },
  {
    "text": "unsigned Longs and and so on uh I'm quite sure you can find the maximum size",
    "start": "3642960",
    "end": "3649440"
  },
  {
    "text": "of of uh size t as well yeah",
    "start": "3649440",
    "end": "3656520"
  },
  {
    "text": "any other over here",
    "start": "3657680",
    "end": "3663319"
  },
  {
    "text": "yeah microphone yeah but it needs to be on",
    "start": "3663319",
    "end": "3669599"
  },
  {
    "text": "the recording so doesn't C++ from 17 specify the evaluation order of",
    "start": "3669599",
    "end": "3675200"
  },
  {
    "text": "operators um which would sequence this right I I'm quite sure it didn't make it",
    "start": "3675200",
    "end": "3681440"
  },
  {
    "text": "into 17 because then I think I would known okay I followed uh I followed C++ until",
    "start": "3681440",
    "end": "3689359"
  },
  {
    "text": "17 and uh now I don't follow it very closely anymore but uh they are working",
    "start": "3689359",
    "end": "3695559"
  },
  {
    "text": "actively on the evaluation order I'm not sure if they do it on the Expressions if",
    "start": "3695559",
    "end": "3700640"
  },
  {
    "text": "that is their intention uh like this but they are certainly doing it on the",
    "start": "3700640",
    "end": "3706200"
  },
  {
    "text": "evaluation order on the on the function arguments and so on so typically GCC",
    "start": "3706200",
    "end": "3712839"
  },
  {
    "text": "will go backwards on the function arguments arguments you pass into a function will typically be evaluated",
    "start": "3712839",
    "end": "3719720"
  },
  {
    "text": "from right to left on GCC and left to right on other compilers and some just",
    "start": "3719720",
    "end": "3725160"
  },
  {
    "text": "do it in a random order but the evaluation order is one of the sources of a lot of kind of",
    "start": "3725160",
    "end": "3732799"
  },
  {
    "text": "interesting behavior in in CN C++",
    "start": "3732799",
    "end": "3737920"
  },
  {
    "text": "yeah all right enjoy the conference and uh yeah that was it",
    "start": "3738119",
    "end": "3743359"
  },
  {
    "text": "thanks",
    "start": "3743359",
    "end": "3746359"
  }
]