[
  {
    "text": "good morning everyone is everyone awake oh good morning",
    "start": "9750",
    "end": "15160"
  },
  {
    "text": "excellent so to get the energy up this morning I think we should all just give a big round of applause for the best",
    "start": "15160",
    "end": "20750"
  },
  {
    "text": "conference in the world excellent alright so we're gonna talk about a sink",
    "start": "20750",
    "end": "28070"
  },
  {
    "text": "and a weight and getting back to the basics do you all have JavaScript I'm",
    "start": "28070",
    "end": "33290"
  },
  {
    "text": "kidding we're gonna talk about c-sharp someone left hey I'm joking all right so we're gonna",
    "start": "33290",
    "end": "40040"
  },
  {
    "text": "talk about being efficient with async annoyed and the word efficiency can mean a few different things depending on who you talk to",
    "start": "40040",
    "end": "45440"
  },
  {
    "text": "for me when I talk about being efficient with a sink in a way it's about being able to efficiently add code in my",
    "start": "45440",
    "end": "51440"
  },
  {
    "text": "applications and make the code readable as well as maintainable for the future and I also want to make sure that my",
    "start": "51440",
    "end": "57710"
  },
  {
    "text": "applications are understandable by my users and that I don't have applications",
    "start": "57710",
    "end": "62809"
  },
  {
    "text": "that randomly crash because I have threading issues and so forth so in this case here efficiency means that we want",
    "start": "62809",
    "end": "68600"
  },
  {
    "text": "to make sure that we applied the async and avoid keywords in a manner that make sure that our applications work properly",
    "start": "68600",
    "end": "74090"
  },
  {
    "text": "and that it's easy for us to work with them in the future so why do we want to bother adding async",
    "start": "74090",
    "end": "81230"
  },
  {
    "text": "and a weight and the asynchronous principles in our applications well mostly it ends up being because near",
    "start": "81230",
    "end": "88580"
  },
  {
    "text": "api's that are out there we grab packages when you get or we use more discs or we use database calls and so",
    "start": "88580",
    "end": "95390"
  },
  {
    "text": "forth in our applications these new api's are all asynchronous which means that we will need to learn how to use",
    "start": "95390",
    "end": "101390"
  },
  {
    "text": "these principles properly and one really big reason is because often this happens",
    "start": "101390",
    "end": "108080"
  },
  {
    "text": "we get an unreliable application and we really want to avoid that now this is an Android application and I'm not saying",
    "start": "108080",
    "end": "113720"
  },
  {
    "text": "that each Android application is unreliable although by default the era's itself is kind of although in this case",
    "start": "113720",
    "end": "121190"
  },
  {
    "text": "here this is a salmon application it's using a c-sharp and everything that I'm going to talk about here today is kind",
    "start": "121190",
    "end": "126410"
  },
  {
    "text": "of applicable in samory nor WPF or wing forms or asp.net or console applications",
    "start": "126410",
    "end": "131720"
  },
  {
    "text": "any type of dark net application where it differs between the different applications I'll mention that for",
    "start": "131720",
    "end": "137900"
  },
  {
    "text": "instance in asp.net there are a few things that are a little bit different but most of the things that I'm going to talk about is the same across all the",
    "start": "137900",
    "end": "143870"
  },
  {
    "text": "different types of dotnet up so we want to increase this as synchron's principles to avoid these",
    "start": "143870",
    "end": "149330"
  },
  {
    "text": "unreliable types of applications as well as improving the user experience so how do we avoid locking up the UI",
    "start": "149330",
    "end": "156410"
  },
  {
    "text": "well we leverage all the available resources on our devices so this is my superfast computer and it has a lot of",
    "start": "156410",
    "end": "163940"
  },
  {
    "text": "course a lot of memory a lot of disk and if I use the asynchronous API is properly I can leverage all of these",
    "start": "163940",
    "end": "169280"
  },
  {
    "text": "different resources but using this CPU is not only about its synchro's principles when we talked about CPU",
    "start": "169280",
    "end": "175970"
  },
  {
    "text": "bound operations we talked about parallel programming so when we talk about these asuma's principles a lot of",
    "start": "175970",
    "end": "182630"
  },
  {
    "text": "this is very similar to when we talk about parallel programming these two paradigms are very similar there's a",
    "start": "182630",
    "end": "188180"
  },
  {
    "text": "very thin line between what parallel programming is and what a synchronous programming is the fundamental",
    "start": "188180",
    "end": "194360"
  },
  {
    "text": "difference is that when we apply asynchronous principles or asynchronous programming when we start off a",
    "start": "194360",
    "end": "200480"
  },
  {
    "text": "concurrent operation the idea is that we want to know when this thing is done so",
    "start": "200480",
    "end": "206060"
  },
  {
    "text": "for instance I go ahead and fetch some data from the web I want to do that somewhere else I'm gonna relieve my UI",
    "start": "206060",
    "end": "211190"
  },
  {
    "text": "of work so the user can do other things in their applications and when the data's been loaded from the web I want",
    "start": "211190",
    "end": "218570"
  },
  {
    "text": "to be notified and subscribe to that event and be able to process that data accordingly when we talk about parallel",
    "start": "218570",
    "end": "225860"
  },
  {
    "text": "programming we have a chunk of data we want to process that by chucking that up",
    "start": "225860",
    "end": "231050"
  },
  {
    "text": "into smaller pieces and working with them concurrently and we can apply these different principles together as well so",
    "start": "231050",
    "end": "237530"
  },
  {
    "text": "here's an example of a mobile application I click a button in the mobile app it goes ahead and fetch you some data when the data is downloaded it",
    "start": "237530",
    "end": "245600"
  },
  {
    "text": "can go ahead and process that in parallel right so just to look at a little bit of code it's gonna get ahead",
    "start": "245600",
    "end": "251210"
  },
  {
    "text": "of ourselves but this thing here starts off in a synchronous operation it then inside this is synchronous operation",
    "start": "251210",
    "end": "256609"
  },
  {
    "text": "does some parallel computing so you might ask yourself why would you do this because the the parallel extensions",
    "start": "256609",
    "end": "262820"
  },
  {
    "text": "using parallel for for instance that locks up the current thread that you're calling it on and this thing here now",
    "start": "262820",
    "end": "267890"
  },
  {
    "text": "all floats this work to another thread in my application and don't worry we're going to go through a little bit of this",
    "start": "267890",
    "end": "274430"
  },
  {
    "text": "throughout the talk so in order for us to achieve this we need to go from a approach to an asynchronous approach and",
    "start": "274430",
    "end": "280570"
  },
  {
    "text": "the way that we do that is by also going from a blocking application like we saw on the Android application that's",
    "start": "280570",
    "end": "285580"
  },
  {
    "text": "currently crashing or we're doing too much work on the UI thread or the main threading the application we're gonna be",
    "start": "285580",
    "end": "292120"
  },
  {
    "text": "notified that the always thinks that this application has crashed so we want to avoid blocking things and go to a",
    "start": "292120",
    "end": "298360"
  },
  {
    "text": "non-blocking application and non-blocking code and the way that we do that is by avoiding the heavy work on",
    "start": "298360",
    "end": "303580"
  },
  {
    "text": "the UI thread can it makes a lot of sense but we don't really want to think about the threads and managing the",
    "start": "303580",
    "end": "308950"
  },
  {
    "text": "threads thread cools ourselves so we have helpers to allow us to work with this more easily one thing that I will",
    "start": "308950",
    "end": "315700"
  },
  {
    "text": "mention here as well is that when we work with the synchronous principles one of the things that we should never do is block our asynchronous operations so if",
    "start": "315700",
    "end": "323290"
  },
  {
    "text": "we for instance use an asynchronous API loading something from disk or talking to an web called using the HTTP client",
    "start": "323290",
    "end": "329860"
  },
  {
    "text": "we should never be calling the dot result property or the dot weight method because what happens then is that's",
    "start": "329860",
    "end": "335980"
  },
  {
    "text": "going to block their synchro's call and in some cases that's going to end up deadlock in your application you might",
    "start": "335980",
    "end": "341470"
  },
  {
    "text": "think that it makes your applications application synchronous but what it's really doing is that it's making your application unreliable so in reality",
    "start": "341470",
    "end": "349360"
  },
  {
    "text": "what's going to happen here is that I'm gonna take this Android application we're gonna change this and apply some",
    "start": "349360",
    "end": "354669"
  },
  {
    "text": "asynchronous principles and all that we are now left with it's a little bit of a better user experience now if I show",
    "start": "354669",
    "end": "360880"
  },
  {
    "text": "this to the UX designers of my work it are going to slap me in my face and say that this is no better user experience",
    "start": "360880",
    "end": "366130"
  },
  {
    "text": "because I'm still blocking the application but I argue that if I'm",
    "start": "366130",
    "end": "371290"
  },
  {
    "text": "faced with the the left picture here I would most likely terminate the application and tell the arrows to well",
    "start": "371290",
    "end": "376750"
  },
  {
    "text": "just terminate the app because I don't think it's gonna respond I think it's crushed well when I see the",
    "start": "376750",
    "end": "382419"
  },
  {
    "text": "the loading indicator I will be more inclined to wait for that to finish so how do we apply this in dotnet well we",
    "start": "382419",
    "end": "388300"
  },
  {
    "text": "use something called a task parallel library which is the way first is simplify working with both concurrent as",
    "start": "388300",
    "end": "393400"
  },
  {
    "text": "well as asynchronous code so even here they line between parallel as well as the sequence principles or a very thin",
    "start": "393400",
    "end": "400600"
  },
  {
    "text": "line so they group both of both of these different paradigms together in the same bucket so we can work with the",
    "start": "400600",
    "end": "406060"
  },
  {
    "text": "concurrent principles as well as the Super's code and they're pretty much the same thing the only difference instead",
    "start": "406060",
    "end": "412289"
  },
  {
    "text": "in a synchronous operation I can now subscribe to whenever that's done so a",
    "start": "412289",
    "end": "417869"
  },
  {
    "text": "task allows us to represent one of those things so we can represent work then we want to do somewhere else so in this",
    "start": "417869",
    "end": "424229"
  },
  {
    "text": "case here I'm simply saying that I want to run this thing somewhere else don't block my current context don't block my",
    "start": "424229",
    "end": "431279"
  },
  {
    "text": "current thread just go ahead and run this somewhere else manage the thread for me I don't care if you're reusing a",
    "start": "431279",
    "end": "436379"
  },
  {
    "text": "thread in the thread pool or just do this work somewhere else now what I can",
    "start": "436379",
    "end": "441599"
  },
  {
    "text": "do this task here is they're gonna I can do a whole lot of different things I can subscribe to whenever this is done I can take care of a potential result if this",
    "start": "441599",
    "end": "448589"
  },
  {
    "text": "returns a value we have the task here for instance for tasks of string it's a generic class it will allow us to return",
    "start": "448589",
    "end": "454499"
  },
  {
    "text": "a value out of this as well so I can use this to do a whole lot of things and most of these synchronous API",
    "start": "454499",
    "end": "459689"
  },
  {
    "text": "is in.net is now leveraging this there are other is synchronous ways and principles and and patterns that we can",
    "start": "459689",
    "end": "466439"
  },
  {
    "text": "use as well but we're not going to cover this here so let's just quickly have a look at what this looks like the initial",
    "start": "466439",
    "end": "471990"
  },
  {
    "text": "studio I have an application I'm now using WPF because it makes it easier to",
    "start": "471990",
    "end": "477689"
  },
  {
    "text": "run the application it's a little bit faster than booting the Android emulator so this is a simple just WPF application",
    "start": "477689",
    "end": "484499"
  },
  {
    "text": "I have a a couple of buttons over one button I have a text block that allows me to just enter some data in the UI",
    "start": "484499",
    "end": "490879"
  },
  {
    "text": "pretty simple and again this would be the same in asp.net or in console applications all these principles are",
    "start": "490879",
    "end": "497159"
  },
  {
    "text": "pretty much the same everywhere so now what I'm doing here I'm clicking my button and then what's happening here is",
    "start": "497159",
    "end": "503399"
  },
  {
    "text": "that we now have this test and run here which is now offloading some work of a",
    "start": "503399",
    "end": "508830"
  },
  {
    "text": "method somewhere else so you'll see here that I'm not using the anonymous method that you saw in my slide I can also just",
    "start": "508830",
    "end": "514649"
  },
  {
    "text": "pass the the method name of whatever method I want to run somewhere else I don't have to care about scheduling this",
    "start": "514649",
    "end": "520469"
  },
  {
    "text": "on the thread pool and managing this thread myself so what's happening here is that this is going to run somewhere",
    "start": "520469",
    "end": "525899"
  },
  {
    "text": "else it's going to going to run on a different context than the UI thread which means that invoking the UI thread",
    "start": "525899",
    "end": "531420"
  },
  {
    "text": "if you've already done you are programming this issue of hands how many of you are done you are programming so",
    "start": "531420",
    "end": "537240"
  },
  {
    "text": "almost everyone in here has done anything with UI programming you know that if you're spawning off a threading you trying to communicate back to the UI",
    "start": "537240",
    "end": "543540"
  },
  {
    "text": "thread you can have a problem because you can you cross threading when you're talking back to the UI so everything in do",
    "start": "543540",
    "end": "549120"
  },
  {
    "text": "something here is going to have to somehow communicate back to the UI thread but you won't just be able to to",
    "start": "549120",
    "end": "556710"
  },
  {
    "text": "call it straight away so this here will in fact crash work will give us an",
    "start": "556710",
    "end": "563400"
  },
  {
    "text": "exception right so we're trying to in here update our text box inside the application so this here should crash",
    "start": "563400",
    "end": "570570"
  },
  {
    "text": "the application but if we run the application something interesting is going to happen here so when I click the",
    "start": "570570",
    "end": "576390"
  },
  {
    "text": "button now you would probably expect this to to crash I click run here in fact nothing happens it dipped possibly",
    "start": "576390",
    "end": "585180"
  },
  {
    "text": "run this method here because I cannot access at a breakpoint in here and we can rerun the application and hopefully",
    "start": "585180",
    "end": "594030"
  },
  {
    "text": "now we can see here that we were inside do you do something we respond off to a different thread but nothing happened",
    "start": "594030",
    "end": "599190"
  },
  {
    "text": "didn't update the UI we didn't get an exception the reason for this is if we release the the debugger here now it's",
    "start": "599190",
    "end": "606150"
  },
  {
    "text": "going to tell us that we do have an exception but it didn't crash the application what's happening here is that it's capturing this exception on",
    "start": "606150",
    "end": "611550"
  },
  {
    "text": "the task it is now now setting that on the task itself so since we have this",
    "start": "611550",
    "end": "617580"
  },
  {
    "text": "task ID run here all the work we'll do something is happening inside this other task so whenever there's an exception on",
    "start": "617580",
    "end": "623550"
  },
  {
    "text": "this asynchronous operation is going to capture that and set this on this state of our task itself so now you might ask",
    "start": "623550",
    "end": "630360"
  },
  {
    "text": "yourself well how do we check that well on the task itself we have a lot of different properties we can check if we",
    "start": "630360",
    "end": "635760"
  },
  {
    "text": "have a fault state we can grab two different exceptions that occurred on this particular asynchronous operation",
    "start": "635760",
    "end": "641970"
  },
  {
    "text": "we can check if it's completed or canceled and so forth but if I were to check here if it's faulted right at this",
    "start": "641970",
    "end": "647940"
  },
  {
    "text": "point here the operation might not even be done so the way that we make sure that we can check if the task faulted it",
    "start": "647940",
    "end": "654720"
  },
  {
    "text": "or if it's completed and handled a potential result is by introducing something called a continuation now the",
    "start": "654720",
    "end": "660210"
  },
  {
    "text": "continuation allows us to kind of subscribe to whenever a asynchronous operation is done so a Munich's using",
    "start": "660210",
    "end": "666750"
  },
  {
    "text": "this method called continue with which will be executed when our task is completed again I'm passing the method that I want",
    "start": "666750",
    "end": "672930"
  },
  {
    "text": "to run here I could use an anonymous method as well if I want to do that and what you'll see here in the method",
    "start": "672930",
    "end": "678150"
  },
  {
    "text": "signature is that automatically going to pass the task that completed and do something returns",
    "start": "678150",
    "end": "683639"
  },
  {
    "text": "a string which means that this thing here will be returning a task of string because it'll then return this string to",
    "start": "683639",
    "end": "689430"
  },
  {
    "text": "whoever's subscribing to the completion so now in here we get the completed task pass to handle test method we can here",
    "start": "689430",
    "end": "696810"
  },
  {
    "text": "check if it's if it's faulted or not so if it's a breakpoint here we'll run this",
    "start": "696810",
    "end": "706620"
  },
  {
    "text": "here we'll see that we're gonna get an exception we are now inside the continuation and we can see that we have",
    "start": "706620",
    "end": "712410"
  },
  {
    "text": "this this faulted state on our task so let me zoom in here a little bit too",
    "start": "712410",
    "end": "718589"
  },
  {
    "text": "much and you can see here that we have a state is faulted and if we check the",
    "start": "718589",
    "end": "724410"
  },
  {
    "text": "exception here we can see that we have the exception telling us that you cannot do cross threading communication now",
    "start": "724410",
    "end": "731069"
  },
  {
    "text": "what's even more interesting is that we know that we got in here and that it's now trying to update our UI again the",
    "start": "731069",
    "end": "737160"
  },
  {
    "text": "problem here is that the continuation using the task parallel library also executes on a different context which",
    "start": "737160",
    "end": "742980"
  },
  {
    "text": "means that I'm not back at the UI thread when I'm in the continuation here this means that I'm trying to update the UI",
    "start": "742980",
    "end": "749130"
  },
  {
    "text": "but nothing happens so what happens with this exception the thing is that when you're inside a continuation that is",
    "start": "749130",
    "end": "755490"
  },
  {
    "text": "also wrapped in a new task so what we have to do if you want to capture that is to say well I want to continue with",
    "start": "755490",
    "end": "763339"
  },
  {
    "text": "with this thing and check if the the task that I got here failed as well and",
    "start": "763339",
    "end": "770130"
  },
  {
    "text": "if that task fails this kind of gets ugly right yeah so we don't want to do",
    "start": "770130",
    "end": "776250"
  },
  {
    "text": "that there's all these up to the awesomeness of async in a way but then",
    "start": "776250",
    "end": "781649"
  },
  {
    "text": "you can see here that I'm using something that told you to not never use right so I told you to never use the result property on your tasks that's",
    "start": "781649",
    "end": "788010"
  },
  {
    "text": "actually false you can use the result property as long as you've properly awaited your task right so inside here",
    "start": "788010",
    "end": "794880"
  },
  {
    "text": "we're inside the continuation what happens here is that I can now grab the result out of my tasks that just",
    "start": "794880",
    "end": "800160"
  },
  {
    "text": "completed so this here will give me the the string representation of whatever was returned so this here is going to tell us from Phillip in the completed",
    "start": "800160",
    "end": "808110"
  },
  {
    "text": "task result here but how do we make this work just to to show you that the demo works it order for us to update the UI we need to",
    "start": "808110",
    "end": "814739"
  },
  {
    "text": "cross communicate with a different thread this works a little bit different depending on the type of application you're building but WPF we can use",
    "start": "814739",
    "end": "821339"
  },
  {
    "text": "something called a dispatcher I can evoke something on the UI so I can",
    "start": "821339",
    "end": "828359"
  },
  {
    "text": "update the text here and let's just do I've been doing coughing for a while",
    "start": "828359",
    "end": "835229"
  },
  {
    "text": "aware you don't need semicolons that's nice and then we'll do the same thing in our",
    "start": "835229",
    "end": "840899"
  },
  {
    "text": "narrate continuation and now this here",
    "start": "840899",
    "end": "850410"
  },
  {
    "text": "should hopefully work if we run this it's gonna say hello for men do you see in that form Phillip but this kind of",
    "start": "850410",
    "end": "856499"
  },
  {
    "text": "defeats the purpose of having asynchronous code here right because now what's happening here is the only thing that we were really doing inside our",
    "start": "856499",
    "end": "861989"
  },
  {
    "text": "asynchronous operation that we're offloading to somewhere else is communicating back to the UI thread so",
    "start": "861989",
    "end": "867629"
  },
  {
    "text": "you will really have to be careful about these different scenarios and where you want to come back to the original context and again this code starts to",
    "start": "867629",
    "end": "876059"
  },
  {
    "text": "look a little bit ugly I really don't like when you have to use the dispatcher I'd much rather have a more in a linear",
    "start": "876059",
    "end": "882059"
  },
  {
    "text": "way of reading my code and this here becomes a little bit unmaintainable and just to give you a little bit of a hint",
    "start": "882059",
    "end": "888209"
  },
  {
    "text": "of what happens now if I were to say give me the result out of this here this would now deadlock the application we'll",
    "start": "888209",
    "end": "895289"
  },
  {
    "text": "get into that a little bit later all right so that kind of shows you how to use the tasks in the TPL just the",
    "start": "895289",
    "end": "902369"
  },
  {
    "text": "fundamentals of how we work with these with these different things now let's",
    "start": "902369",
    "end": "907979"
  },
  {
    "text": "talk about the async and away keywords and how they we're going to improve the ways that we work with this asynchronous code in our applications because it's",
    "start": "907979",
    "end": "914129"
  },
  {
    "text": "going to be very different from using the TPL I give this a raw way that we just saw here so the async Inoue",
    "start": "914129",
    "end": "919889"
  },
  {
    "text": "keywords are simply contextual keywords that means that when they announce the async and away keywords being added in",
    "start": "919889",
    "end": "926159"
  },
  {
    "text": "language they didn't want to do any runtime updates I do reckon that if they",
    "start": "926159",
    "end": "931409"
  },
  {
    "text": "were to add the async a network keywords now like if you just imagine that we didn't have the async in our keywords",
    "start": "931409",
    "end": "936629"
  },
  {
    "text": "they would probably release that with dotnet core 4 or whatever and or docked",
    "start": "936629",
    "end": "941730"
  },
  {
    "text": "at 5 which is going to be the next thing and they would probably update the runtime to support co-routines do it properly so what they've done here",
    "start": "941730",
    "end": "948600"
  },
  {
    "text": "with the contextual keywords is that they've done a lot of compiler magic to make this work so everything compiles",
    "start": "948600",
    "end": "954269"
  },
  {
    "text": "down to the the code that we have available prior to the using the async anyway keywords they're just building a",
    "start": "954269",
    "end": "959699"
  },
  {
    "text": "lot of things for us when we are applying these things so when you're out of the async in a wiki where it's what's really happening is that it's generating",
    "start": "959699",
    "end": "965850"
  },
  {
    "text": "a lot of code and a lot of complexity so the async and a weak keywords the idea",
    "start": "965850",
    "end": "971399"
  },
  {
    "text": "here is that we want to hide the complexity that we just saw here so we don't want to have this chain of continuations and doing continue with we",
    "start": "971399",
    "end": "977579"
  },
  {
    "text": "want to make sure that if we get an exception that's going to be traveled back to whoever calls to asynchronous",
    "start": "977579",
    "end": "982889"
  },
  {
    "text": "method or whoever's awaiting that we want to increase the readability because in this case here if we had a problem in",
    "start": "982889",
    "end": "989279"
  },
  {
    "text": "our continuation we would have to put on a new continuation and continue to do",
    "start": "989279",
    "end": "994319"
  },
  {
    "text": "with that and that quickly becomes very ugly although the problem with async in a way it is that it becomes more",
    "start": "994319",
    "end": "1000079"
  },
  {
    "text": "error-prone so if we're applying these keywords in the applications our applications were the most definitely at",
    "start": "1000079",
    "end": "1006110"
  },
  {
    "text": "one point deadlock or crash or you'll have a problem but let's try and see if we can figure out why that would be so",
    "start": "1006110",
    "end": "1012860"
  },
  {
    "text": "this case here we have our very simple simple method here and that pretty much does nothing at all but I'm apply the",
    "start": "1012860",
    "end": "1018439"
  },
  {
    "text": "asing keyword and you can see here that it's not returning anything right so it's not returning a task by itself but",
    "start": "1018439",
    "end": "1024199"
  },
  {
    "text": "when we apply this async keyword what's magically going to happen is that this here it's going to generate some code",
    "start": "1024199",
    "end": "1029750"
  },
  {
    "text": "that will return a task for us right that is so we can track the ongoing",
    "start": "1029750",
    "end": "1035120"
  },
  {
    "text": "operation in the ongoing works that happening in here another thing to to point out here is that we have the awake",
    "start": "1035120",
    "end": "1040970"
  },
  {
    "text": "keyword and if you ever see this being used alone you're doing it wrong you always want to use the async and",
    "start": "1040970",
    "end": "1047750"
  },
  {
    "text": "avoid keywords together and you only want to use the await keyword whenever there's something after it if the last",
    "start": "1047750",
    "end": "1054559"
  },
  {
    "text": "thing you're doing in your method is the awake keyword and you don't have any weights before that you can simply return you can simply return the task",
    "start": "1054559",
    "end": "1061010"
  },
  {
    "text": "instead of avoiding it let's look at an example of that later on so the awake",
    "start": "1061010",
    "end": "1066080"
  },
  {
    "text": "keyword it's now what we're going to use in order for us to mark a continuation so that means that we can replace our",
    "start": "1066080",
    "end": "1071720"
  },
  {
    "text": "continue with call with the awake keyword as long as we mark the methodists async we can now do this",
    "start": "1071720",
    "end": "1077299"
  },
  {
    "text": "instead what the way keyword will then is that it'll validate the success or",
    "start": "1077299",
    "end": "1082399"
  },
  {
    "text": "failure of a task which means that it will check for an exceptions it will check that it's a successful motor",
    "start": "1082399",
    "end": "1088249"
  },
  {
    "text": "completed state it will make sure that we come back to that particular context whenever it's completed right but what's",
    "start": "1088249",
    "end": "1095389"
  },
  {
    "text": "interesting is that whenever it sees their weight keyword it's going to return back to whoever's calling our",
    "start": "1095389",
    "end": "1100489"
  },
  {
    "text": "method that means that it's not gonna process any of the code in the continuation which is after the away",
    "start": "1100489",
    "end": "1107119"
  },
  {
    "text": "keyword until after it's completed so what's the big difference between a",
    "start": "1107119",
    "end": "1112609"
  },
  {
    "text": "weight and task can we continue with if we just look at them like this here it",
    "start": "1112609",
    "end": "1118460"
  },
  {
    "text": "doesn't look like they're much different but the thing is with the continuation only continue with method we're on a",
    "start": "1118460",
    "end": "1124070"
  },
  {
    "text": "different context we're running on a different thread so it will be very hard for us to invoke the UI for instance or talk back to the main thread or use",
    "start": "1124070",
    "end": "1130970"
  },
  {
    "text": "things from the original context right if your thread static things that'll be",
    "start": "1130970",
    "end": "1136519"
  },
  {
    "text": "a little bit problematic as well so when we're inside the continuation with the avoid keyword we were back at the",
    "start": "1136519",
    "end": "1142999"
  },
  {
    "text": "original context and that'll make a lot more sense when we we're gonna look at a little bit about on the code that's",
    "start": "1142999",
    "end": "1148789"
  },
  {
    "text": "generated from this as well and when we do it'll make a lot more sense why this is being executed back on the original",
    "start": "1148789",
    "end": "1155239"
  },
  {
    "text": "context and why it's returning it tasks and so forth but just keep in mind that the idea here is that we're going to be",
    "start": "1155239",
    "end": "1160489"
  },
  {
    "text": "back versus a UI thread in this case here so let's jump back into visual studio and see how we can apply this in",
    "start": "1160489",
    "end": "1166850"
  },
  {
    "text": "our application so I have some some code",
    "start": "1166850",
    "end": "1174169"
  },
  {
    "text": "here I'm going to comment it out the e the first portion of what I showed here",
    "start": "1174169",
    "end": "1179919"
  },
  {
    "text": "and we have pretty much the same thing but it's now using the async and Away keywords so we still have this method",
    "start": "1180039",
    "end": "1186799"
  },
  {
    "text": "called do something do something which is up here it's a little bit different now we were actually doing some work so",
    "start": "1186799",
    "end": "1193730"
  },
  {
    "text": "it's it's doing this task deal I 2000 which is simply a way for us to represent that we're doing an operation",
    "start": "1193730",
    "end": "1199789"
  },
  {
    "text": "that takes a little bit of time instead of me having to rely on the internet connection in Australia to go and fetch",
    "start": "1199789",
    "end": "1205220"
  },
  {
    "text": "something from the web I'd much rather fake the two seconds happening here otherwise we'll be",
    "start": "1205220",
    "end": "1210619"
  },
  {
    "text": "waiting all day all right so now mark this as a sink and we got the away",
    "start": "1210619",
    "end": "1217000"
  },
  {
    "text": "keyword these are all the C's together right and then we're doing something in the continuation so as long as do",
    "start": "1217000",
    "end": "1223780"
  },
  {
    "text": "something here it's being called from the UI thread what's gonna happen here is that the the last line which is",
    "start": "1223780",
    "end": "1229930"
  },
  {
    "text": "debugger text it's plus equal to hello NDC it's going to be executed on that same context so if I will look at how",
    "start": "1229930",
    "end": "1236980"
  },
  {
    "text": "this is being executed we have this run click event handler the first thing that we're doing is that we were updating our",
    "start": "1236980",
    "end": "1242200"
  },
  {
    "text": "text to starting then we're calling the method do something this is all called on on the same thread right we're",
    "start": "1242200",
    "end": "1248680"
  },
  {
    "text": "getting to the top thing here it runs this line here and sees that well there's a weight keyword here so what's gonna happen now is that it's",
    "start": "1248680",
    "end": "1255100"
  },
  {
    "text": "going to return from the method it'll return up here to the next line it's",
    "start": "1255100",
    "end": "1261130"
  },
  {
    "text": "gonna stay running and then we have the awake keyword again and what's gonna happen then it's gonna return back to whoever's calling the click event Taylor",
    "start": "1261130",
    "end": "1266730"
  },
  {
    "text": "all right so then it'll return back and then when it's done it's going to run",
    "start": "1266730",
    "end": "1273250"
  },
  {
    "text": "the continuations right so this here says that well if this task is not completed don't proceed executing the",
    "start": "1273250",
    "end": "1279610"
  },
  {
    "text": "things down here which is inside the continuation of this method right only executes this as long as our task here",
    "start": "1279610",
    "end": "1286650"
  },
  {
    "text": "executed properly and without any exceptions so now what's gonna happen here is that after about two seconds",
    "start": "1286650",
    "end": "1293470"
  },
  {
    "text": "we're going to be back inside our context here to execute the continuation and which is the first continuation well",
    "start": "1293470",
    "end": "1300340"
  },
  {
    "text": "it's the thing that we have here right so this is the first continuation this is our first awake keyword so this means",
    "start": "1300340",
    "end": "1306160"
  },
  {
    "text": "that the first thing that's going to happen then it's going to execute hello NDC then it's going to find out that",
    "start": "1306160",
    "end": "1311290"
  },
  {
    "text": "well now that task is done so we can go ahead and run the continuation of this task gonna be down here and so first",
    "start": "1311290",
    "end": "1317170"
  },
  {
    "text": "let's just run the application have a look so it should say starting running hello in DC and then whatever comes next",
    "start": "1317170",
    "end": "1324640"
  },
  {
    "text": "year and what's interesting here as well is that you can see here",
    "start": "1324640",
    "end": "1330040"
  },
  {
    "text": "note this doesn't build that's great because the app is running",
    "start": "1330040",
    "end": "1336720"
  },
  {
    "text": "starting running hello in DC uh please yeah there we go and then it's going to go ahead and run whatever's after here",
    "start": "1337380",
    "end": "1344110"
  },
  {
    "text": "so now what's interesting here is that out of do something we grab the tasks we can start this operation we can run some",
    "start": "1344110",
    "end": "1350440"
  },
  {
    "text": "more code and then we can say well I want to wait that and run all the code after this here whenever that task is",
    "start": "1350440",
    "end": "1355900"
  },
  {
    "text": "done so then it proceeds to call the same pretty much the same handle task function that we had earlier it can",
    "start": "1355900",
    "end": "1362320"
  },
  {
    "text": "check if the task is faulted or not so if ever had an exception which we didn't",
    "start": "1362320",
    "end": "1367390"
  },
  {
    "text": "so it didn't do anything let it go ahead and run something else that's asynchronous so you see that we can have multiple awake keywords in the",
    "start": "1367390",
    "end": "1373150"
  },
  {
    "text": "same method no problem the thing here is that this one here isn't executed until you know we're back in the continuation",
    "start": "1373150",
    "end": "1379270"
  },
  {
    "text": "of the first one so do something more here also sleeps for two seconds right so that that's going to be executed",
    "start": "1379270",
    "end": "1386590"
  },
  {
    "text": "after after the first continuation is done does that make sense so how do we",
    "start": "1386590",
    "end": "1392740"
  },
  {
    "text": "now know that the tasks failed or preceded properly well I mentioned that if we throw an exception in here we",
    "start": "1392740",
    "end": "1400150"
  },
  {
    "text": "can't get an exception out of cross threading now right because we're now back at the UI thread here at the bottom",
    "start": "1400150",
    "end": "1405430"
  },
  {
    "text": "so that just works but if I throw an exception after two seconds I can spell",
    "start": "1405430",
    "end": "1410800"
  },
  {
    "text": "throw throw hello does anyone want to come up here and help me write some code there we go so",
    "start": "1410800",
    "end": "1424300"
  },
  {
    "text": "now if I run this here this should probably crash up to two seconds and now the application crashes so that's pretty",
    "start": "1424300",
    "end": "1430630"
  },
  {
    "text": "good the exception that we got earlier or the exception that we get now is now traveling back to whoever's calling this method so how do we make sure that the",
    "start": "1430630",
    "end": "1438760"
  },
  {
    "text": "application doesn't crash well first of all we don't throw in exceptions but after that we make sure that we wrap",
    "start": "1438760",
    "end": "1444130"
  },
  {
    "text": "things in a try and catch block so now I can go ahead and try and catch this",
    "start": "1444130",
    "end": "1449460"
  },
  {
    "text": "and now if we put a breakpoint here and run this we'll see that we caught the",
    "start": "1454120",
    "end": "1464169"
  },
  {
    "text": "exception of the task so what happened here is that not only does it travel back to whoever's calling the method we",
    "start": "1464169",
    "end": "1469179"
  },
  {
    "text": "call in context it also makes sure that the task completed properly and we can catch those exceptions as well so that's",
    "start": "1469179",
    "end": "1477850"
  },
  {
    "text": "all great this allows us to write a little bit more readable code I would aren't you know to do not have so much",
    "start": "1477850",
    "end": "1485200"
  },
  {
    "text": "coding your handlers or whatever but you want to make sure that you always have the async and awake keywords together",
    "start": "1485200",
    "end": "1491020"
  },
  {
    "text": "and I never ever want to see async void used in your applications and we'll get into that in just a moment and see how",
    "start": "1491020",
    "end": "1497529"
  },
  {
    "text": "how really terrible that is but pretty much if you use that in a car you'll die all right perfect",
    "start": "1497529",
    "end": "1507100"
  },
  {
    "text": "so this here narrow illustrates that we can do the synchronous operations that we saw earlier we can await the tasks and we can make sure that we're back at",
    "start": "1507100",
    "end": "1513100"
  },
  {
    "text": "the original context but what's also interesting here is that what if this thing here were to spawn off a different",
    "start": "1513100",
    "end": "1519820"
  },
  {
    "text": "task so let's say that this let's get rid of the exception first let's say",
    "start": "1519820",
    "end": "1525279"
  },
  {
    "text": "that this task itself returns something or it returns a task that runs something",
    "start": "1525279",
    "end": "1532240"
  },
  {
    "text": "you could have a task that spawns another task how do we how do we make that work well we could for instance say",
    "start": "1532240",
    "end": "1537760"
  },
  {
    "text": "that we have a task of a task and we",
    "start": "1537760",
    "end": "1543700"
  },
  {
    "text": "could flow let's do it in the other method instead we could say down here instead so instead of returning the",
    "start": "1543700",
    "end": "1549520"
  },
  {
    "text": "string here we can say that we return a task of a task of a string or whatever you want to do that but like one two and",
    "start": "1549520",
    "end": "1557320"
  },
  {
    "text": "what I can do here is that I can now say I want you to create a task in this case",
    "start": "1557320",
    "end": "1562450"
  },
  {
    "text": "here we have a static story that I want to return but the signature of my method tells me that I have to use a task of",
    "start": "1562450",
    "end": "1567970"
  },
  {
    "text": "tasks of strings so now I can represent a completed task with a particular result I could also say that we have a",
    "start": "1567970",
    "end": "1574330"
  },
  {
    "text": "task of from exception or from what they don't have those here but you can't",
    "start": "1574330",
    "end": "1580360"
  },
  {
    "text": "create tasks from exceptions and I think that depends on the dotnet version but",
    "start": "1580360",
    "end": "1585669"
  },
  {
    "text": "now what happens here is how do we you make sure that this how do we await that the thing here this here do",
    "start": "1585669",
    "end": "1591460"
  },
  {
    "text": "something more is now going to return a task of task right so we can simply apply our keyword in front of that way",
    "start": "1591460",
    "end": "1597820"
  },
  {
    "text": "keyword and now the code is so much more readable and so much more understandable",
    "start": "1597820",
    "end": "1603610"
  },
  {
    "text": "it's still gonna do the same thing hopefully hopefully still gonna work",
    "start": "1603610",
    "end": "1610680"
  },
  {
    "text": "there we go still works so no matter if if we imagine doing this with the the",
    "start": "1611160",
    "end": "1618040"
  },
  {
    "text": "TPL would have to have a continuation and then the continuation inside of that and it would just look very nasty but",
    "start": "1618040",
    "end": "1623980"
  },
  {
    "text": "now this thing here takes care of first it's checking where all of us happening here is that if we do this a little more",
    "start": "1623980",
    "end": "1629520"
  },
  {
    "text": "readable what's gonna happen here is that the first thing ever get we get the task which is running a task itself",
    "start": "1629520",
    "end": "1635230"
  },
  {
    "text": "right it's grabbing that task it's validating that that task executed",
    "start": "1635230",
    "end": "1641530"
  },
  {
    "text": "properly and then when that task returns its task it's then validating that there's no exceptions so that's pretty helpful all",
    "start": "1641530",
    "end": "1651190"
  },
  {
    "text": "right everything's clear so far it's totally understandable it will never",
    "start": "1651190",
    "end": "1656860"
  },
  {
    "text": "have any dead locks I promise so let's talk about the state machine this is the thing that's returned or the the thing",
    "start": "1656860",
    "end": "1662680"
  },
  {
    "text": "that's generated whenever we apply the async keyword so the state machine is pretty much this thing like a nagging",
    "start": "1662680",
    "end": "1668230"
  },
  {
    "text": "kid in the back of your car that's asking if you're there yet it's just continually asking if you if the",
    "start": "1668230",
    "end": "1673780"
  },
  {
    "text": "synchronous operation is done if it's not done it'll proceed doing other things if it's done it's going to execute the",
    "start": "1673780",
    "end": "1679470"
  },
  {
    "text": "continuation now my daughter is only two years old she's telling me that we're there she's not asking she says telling",
    "start": "1679470",
    "end": "1686410"
  },
  {
    "text": "me to stop the car so now what else does the state machine do well it handles the",
    "start": "1686410",
    "end": "1691780"
  },
  {
    "text": "result of the potential errors that means that if there's a result on our synchronous operations it'll make sure",
    "start": "1691780",
    "end": "1696820"
  },
  {
    "text": "that that travels back to wherever you want to set that it also makes sure that if there's an exception it's going to",
    "start": "1696820",
    "end": "1702610"
  },
  {
    "text": "put that on whatever thing that's awaiting it right so if we have an exception in on a task that's have a",
    "start": "1702610",
    "end": "1708370"
  },
  {
    "text": "continuation on the UI thread and throw the exception back on the UI thread and you can you can pretty much just handle that properly right so it's also in",
    "start": "1708370",
    "end": "1715480"
  },
  {
    "text": "charge of executing the code after the away keyword so that's great so what",
    "start": "1715480",
    "end": "1720940"
  },
  {
    "text": "does the ACE sinky weren't really do well it's generating the state machine and what it's doing this it's moving the entire",
    "start": "1720940",
    "end": "1727029"
  },
  {
    "text": "method body into a different thing sounds good right",
    "start": "1727029",
    "end": "1732450"
  },
  {
    "text": "so precompilation our method looks fairly simple we're having some variable",
    "start": "1732450",
    "end": "1737950"
  },
  {
    "text": "English civilizations we do an asynchronous operation and then we were running something to debug the pipeline",
    "start": "1737950",
    "end": "1743070"
  },
  {
    "text": "well this is compiled the code looks nothing like what we had earlier there's no debug dot write line here there's no",
    "start": "1743070",
    "end": "1749379"
  },
  {
    "text": "variable initialization everything's moved into this generated state machine here but now you can see here why the",
    "start": "1749379",
    "end": "1756639"
  },
  {
    "text": "method signature it just removed the async keyword and the the reason that it doesn't keep the async e-word when it's",
    "start": "1756639",
    "end": "1762129"
  },
  {
    "text": "compiled is because the IL the the language that's the the runtime executes doesn't have any any async keywords or",
    "start": "1762129",
    "end": "1769960"
  },
  {
    "text": "anything like that so what's what it's doing here it's using just some compiler magic to generate code that's doing all",
    "start": "1769960",
    "end": "1776619"
  },
  {
    "text": "of this for us it generates the state machine and runs all of these different things and it's returning a task with any",
    "start": "1776619",
    "end": "1782440"
  },
  {
    "text": "representation of the ongoing work so we can keep track off of their works that happening if there's a new results if",
    "start": "1782440",
    "end": "1788049"
  },
  {
    "text": "there's any exceptions and so forth and then if we peek inside the state machine now the implementation is really that",
    "start": "1788049",
    "end": "1794619"
  },
  {
    "text": "important but it's interesting to see that inside the state machine we have our test a delay here it's getting here",
    "start": "1794619",
    "end": "1800979"
  },
  {
    "text": "waiter the thing that it that keeps track of if that particular task is done and then it can check if that is",
    "start": "1800979",
    "end": "1807159"
  },
  {
    "text": "completed or not if it's not completed its gonna return to whoever calls this thing inside the state machine in the",
    "start": "1807159",
    "end": "1812259"
  },
  {
    "text": "state machine then execute these things again and check if it's done and so forth then at the bottom here we're back",
    "start": "1812259",
    "end": "1819190"
  },
  {
    "text": "and running everything in the continuation so now this kind of makes",
    "start": "1819190",
    "end": "1824859"
  },
  {
    "text": "sense right if you go back and have a look at this post compiled code here you can see that everything here is executed",
    "start": "1824859",
    "end": "1830739"
  },
  {
    "text": "on the same thread right everything here every line here is executed on it on the UI thread for instance there's nothing",
    "start": "1830739",
    "end": "1836320"
  },
  {
    "text": "here going off running some something somewhere else that means that the code that we have in here if you look at the",
    "start": "1836320",
    "end": "1842080"
  },
  {
    "text": "last line here that is executed on the UI thread as well so that's executed in the same context all right just keep",
    "start": "1842080",
    "end": "1849639"
  },
  {
    "text": "that in mind for now and we'll talk a little bit about async board this is a picture of me whenever I see async",
    "start": "1849639",
    "end": "1854799"
  },
  {
    "text": "forward and applications is it really that bad well obviously otherwise I'm gonna talk about",
    "start": "1854799",
    "end": "1860830"
  },
  {
    "text": "it so acing forward in this case here it doesn't look like it's that bad what's happening here is that we have the same",
    "start": "1860830",
    "end": "1866740"
  },
  {
    "text": "method signature all that it did was remove the tasks here and replace that",
    "start": "1866740",
    "end": "1871750"
  },
  {
    "text": "would void so what's the big issue here well first of all if we look at the",
    "start": "1871750",
    "end": "1877600"
  },
  {
    "text": "generated code here there's nothing returned from the method which kind of makes sense because it's Markus Boyd although a task that doesn't represent",
    "start": "1877600",
    "end": "1884740"
  },
  {
    "text": "or doesn't tell you that it's returning a value it's a task that's by definition not returning anything and that's a void",
    "start": "1884740",
    "end": "1891850"
  },
  {
    "text": "task whatever you want to call it but in this case here we're actually using void itself so we have no way of tracking the",
    "start": "1891850",
    "end": "1897970"
  },
  {
    "text": "ongoing operation we have no way of knowing if there was an exception so that's why I why I said earlier that it",
    "start": "1897970",
    "end": "1903160"
  },
  {
    "text": "whenever you see a car running c-sharp and using a Seng void I would change car I won't use this one so how do we fix",
    "start": "1903160",
    "end": "1911320"
  },
  {
    "text": "this well it's pretty simple right we just swap it out with tasks that very",
    "start": "1911320",
    "end": "1917380"
  },
  {
    "text": "very very subtle okay there we go freshly I'm so all right so if we just",
    "start": "1917380",
    "end": "1922720"
  },
  {
    "text": "replace this with the task here we kind of changed the the signature of our of our method in our application right this",
    "start": "1922720",
    "end": "1929770"
  },
  {
    "text": "here now changes the contract of whoever is calling this method which means that if there was a potential error here",
    "start": "1929770",
    "end": "1935950"
  },
  {
    "text": "before I've worked with developers that like to get exceptions thrown back to the UI and crash the application rather",
    "start": "1935950",
    "end": "1942220"
  },
  {
    "text": "than gracefully just capturing all of them personally I don't like that as a user so please never do that just in",
    "start": "1942220",
    "end": "1948220"
  },
  {
    "text": "this case here if we get an exception here this will tear down the application in this case here we wouldn't know if",
    "start": "1948220",
    "end": "1953830"
  },
  {
    "text": "there was an exception or not if we don't await this thing here so how about we just have a look at on an ASIC void",
    "start": "1953830",
    "end": "1959830"
  },
  {
    "text": "demo it's always fun to look at crashing applications so I have this thing here",
    "start": "1959830",
    "end": "1965500"
  },
  {
    "text": "it's a simple method and it's doing a net weight task to delay doing some asynchronous operation and then I'm just",
    "start": "1965500",
    "end": "1971320"
  },
  {
    "text": "throwing it out throwing an exception this here is marked as a Seng void a should never do that but where would it",
    "start": "1971320",
    "end": "1978010"
  },
  {
    "text": "put this exception so if I simply call this method I'm gonna call it up here",
    "start": "1978010",
    "end": "1983400"
  },
  {
    "text": "run async I can't apply the my keyword here right because I don't have a time",
    "start": "1983400",
    "end": "1989050"
  },
  {
    "text": "this doesn't return anything so this will not tell me well this is a symboi door this is not returning a task so you",
    "start": "1989050",
    "end": "1994810"
  },
  {
    "text": "can't await this that's a little bit problematic so now if I run the application not only can I not say that",
    "start": "1994810",
    "end": "2002700"
  },
  {
    "text": "all of these things down here I can't move them into a continuation of run a sync they will have to be executed",
    "start": "2002700",
    "end": "2009060"
  },
  {
    "text": "sequentially right so if I click run here after you're about two seconds I think the application is going to crash",
    "start": "2009060",
    "end": "2014310"
  },
  {
    "text": "and it looks like it did crash right so that's not good so how do we solve this",
    "start": "2014310",
    "end": "2019820"
  },
  {
    "text": "again obviously don't throw any exceptions but if we have to how about we just wrapped it in a try-catch block",
    "start": "2019820",
    "end": "2028250"
  },
  {
    "text": "can I see a show of hands how many of you think this is going to work what's kind of leading question right the same",
    "start": "2029420",
    "end": "2037140"
  },
  {
    "text": "thing here I run the application after for two seconds the application is going to crash even though I'm wrapping this",
    "start": "2037140",
    "end": "2044460"
  },
  {
    "text": "thing here in a Tron cache block what's happening here is run async is being executed on the UI thread it's not being",
    "start": "2044460",
    "end": "2050429"
  },
  {
    "text": "executed in line here so it knows nothing about the trying catch block so this thing here wouldn't be able to",
    "start": "2050429",
    "end": "2056610"
  },
  {
    "text": "capture that exception so what really happens here is that whatever this exception in run async occurs it's going",
    "start": "2056610",
    "end": "2063810"
  },
  {
    "text": "to set that back to whoever's calling the method or the call in context or the app domain or whatever you want to call",
    "start": "2063810",
    "end": "2069120"
  },
  {
    "text": "it this means that it's going to tear down the application because this here is being executed on the UI thread and",
    "start": "2069120",
    "end": "2074879"
  },
  {
    "text": "so forth so that's not really good so the way that we saw this of course is by",
    "start": "2074880",
    "end": "2080940"
  },
  {
    "text": "changing this to a task instead but then we have to properly avoid this in order",
    "start": "2080940",
    "end": "2086280"
  },
  {
    "text": "for us to capture the exception and now what happened is that the code down here won't be executed until two seconds",
    "start": "2086280",
    "end": "2092310"
  },
  {
    "text": "after so in a changing behavior of the application which we might not have",
    "start": "2092310",
    "end": "2097500"
  },
  {
    "text": "wanted to and to keep that in mind so we don't we want to avoid async void but if we simply replace it with async tasks",
    "start": "2097500",
    "end": "2104370"
  },
  {
    "text": "instead we might have different implications in the application all",
    "start": "2104370",
    "end": "2111390"
  },
  {
    "text": "right so let's talk about a little bit more fun things let's talk about deadlocking how many of you experience a",
    "start": "2111390",
    "end": "2118830"
  },
  {
    "text": "deadlock excellent that's perfect so almost all of you have",
    "start": "2118830",
    "end": "2123840"
  },
  {
    "text": "had a padlock and those of you that didn't raise your hand I know you've had a bit look you just don't know yet so",
    "start": "2123840",
    "end": "2130770"
  },
  {
    "text": "real a deadlock is we've we've seen that problems can occur and when we had a",
    "start": "2130770",
    "end": "2136260"
  },
  {
    "text": "deadlock in the applications it pretty much means that there's no point of return we can't return from a deadlock",
    "start": "2136260",
    "end": "2142070"
  },
  {
    "text": "so a pretty hard to read example of that is is this here so let's say that we are",
    "start": "2142070",
    "end": "2149700"
  },
  {
    "text": "running some asynchronous operation this year just delays for one millisecond which isn't really that long inside the",
    "start": "2149700",
    "end": "2155310"
  },
  {
    "text": "continuation of this method or inside the continuation here I want to invoke the UI like we saw earlier I want to",
    "start": "2155310",
    "end": "2161490"
  },
  {
    "text": "update the UI whenever I'm done inside the continuation like we do with the a white keyword so why shouldn't I be able to do that here but then when I say here",
    "start": "2161490",
    "end": "2168270"
  },
  {
    "text": "I really want this to to block my application I don't want this to to go",
    "start": "2168270",
    "end": "2174090"
  },
  {
    "text": "ahead and be asynchronous I want my users to suffer so what happens if we do this here this here is now going to say",
    "start": "2174090",
    "end": "2180630"
  },
  {
    "text": "that I want to block this thread from executing anything else until there's a synchronous operation is done however",
    "start": "2180630",
    "end": "2186960"
  },
  {
    "text": "what's happening here is that we have an asynchronous operation that needs to talk to the UI thread and the UI thread",
    "start": "2186960",
    "end": "2192180"
  },
  {
    "text": "is being blocked hence we have a deadlock all right looks like a complex",
    "start": "2192180",
    "end": "2197640"
  },
  {
    "text": "scenario it looks like something none of us would do in our applications right although what's interesting here is that",
    "start": "2197640",
    "end": "2203220"
  },
  {
    "text": "there's an easier way to get a deadlock and that's just simply to call wait on an asynchronous method right and I see",
    "start": "2203220",
    "end": "2209610"
  },
  {
    "text": "this happening quite often not particularly using the wait key the wait method but you think the results",
    "start": "2209610",
    "end": "2214710"
  },
  {
    "text": "properly for instance especially if you're writing unit tests or you might not have asynchronous is the async",
    "start": "2214710",
    "end": "2220410"
  },
  {
    "text": "Android keyword available inside your test Runner and so forth you might be calling the dot result and that just",
    "start": "2220410",
    "end": "2225780"
  },
  {
    "text": "deadlocks the test so that's not good so let's avoid doing that all right and",
    "start": "2225780",
    "end": "2232770"
  },
  {
    "text": "then another thing I see quite often is the the unnecessary use of a lot of different state machines so I mentioned",
    "start": "2232770",
    "end": "2238620"
  },
  {
    "text": "earlier that if you're not doing anything anything inside your continuations there's no point in having the away keyword so an example of that",
    "start": "2238620",
    "end": "2245910"
  },
  {
    "text": "is where this run async method and you know naming things is hard so that's why - next method is one internal async and",
    "start": "2245910",
    "end": "2252440"
  },
  {
    "text": "so forth right so I have all of these different methods and one of the common things there is that I have the async and away keywords because",
    "start": "2252440",
    "end": "2259680"
  },
  {
    "text": "one of the misconceptions when using async and awaitin using the task Perl library he said wherever you had to have",
    "start": "2259680",
    "end": "2264810"
  },
  {
    "text": "a task you need to await that because someone once said that you should use async and await all the way down and",
    "start": "2264810",
    "end": "2270720"
  },
  {
    "text": "that means the flying day sink & Away keyword everywhere where you see a task but that's not really what that means it",
    "start": "2270720",
    "end": "2275940"
  },
  {
    "text": "means that we shouldn't be blocking our synchronous operations we shouldn't use the result property we shouldn't use the wait keyword the wait method but we",
    "start": "2275940",
    "end": "2283920"
  },
  {
    "text": "shouldn't do this either because this is really inefficient and if we want to be efficient with a sink and a weight and write readable and maintainable code",
    "start": "2283920",
    "end": "2290040"
  },
  {
    "text": "this is not really what we want you because what's gonna happen here is that we're gonna generate a state machine",
    "start": "2290040",
    "end": "2295260"
  },
  {
    "text": "here a generate a state machine here here and here as well and then we don't do anything in the continuation here so",
    "start": "2295260",
    "end": "2301020"
  },
  {
    "text": "there's no point in having those async you know what keywords so if there's nothing in the continuation there's no",
    "start": "2301020",
    "end": "2307050"
  },
  {
    "text": "need for an away keyword so the way that we kind of sold this it's by simply",
    "start": "2307050",
    "end": "2312300"
  },
  {
    "text": "replacing the await keyword with a return and then removing the async keyword and we have the same method",
    "start": "2312300",
    "end": "2317670"
  },
  {
    "text": "signature but less code that's being generated all right so let's have a look",
    "start": "2317670",
    "end": "2323880"
  },
  {
    "text": "in Visual Studio what that looks like so",
    "start": "2323880",
    "end": "2327410"
  },
  {
    "text": "the console application and since C sharp seven point two or three you can",
    "start": "2329750",
    "end": "2335520"
  },
  {
    "text": "now have asynchronous main methods which is really nice I don't know if any one",
    "start": "2335520",
    "end": "2340620"
  },
  {
    "text": "rule of rights console apps though outside of demos so this running Sigma",
    "start": "2340620",
    "end": "2345660"
  },
  {
    "text": "third here all of these different methods that we just saw here they're all appending the async and avoid",
    "start": "2345660",
    "end": "2350940"
  },
  {
    "text": "keywords even though they might not need to if there's nothing here below this keyword there's no need for the away",
    "start": "2350940",
    "end": "2356370"
  },
  {
    "text": "keyword although the the case of this being like this here we do have",
    "start": "2356370",
    "end": "2361800"
  },
  {
    "text": "something in the in the continuation right so in this case here we have two",
    "start": "2361800",
    "end": "2366960"
  },
  {
    "text": "synchros operations being scheduled and we are awaiting both of them but if all",
    "start": "2366960",
    "end": "2372840"
  },
  {
    "text": "that you want to do is wait for both of these to finish and you don't care about them being executed at the same time do",
    "start": "2372840",
    "end": "2379230"
  },
  {
    "text": "you know what we can do instead we can do task dot when all we can do the tasks delay like this here",
    "start": "2379230",
    "end": "2387920"
  },
  {
    "text": "can get rid of this thing here do that",
    "start": "2389340",
    "end": "2397620"
  },
  {
    "text": "easy start off to both synchronous operations at once we have a task that represents",
    "start": "2397710",
    "end": "2403330"
  },
  {
    "text": "when both of these are done and now we don't have the async in that way keyword anymore so if I just go back here and",
    "start": "2403330",
    "end": "2411270"
  },
  {
    "text": "we'll have a look at what the code here looks like when it's being generated I'm gonna compile this here I'm gonna head",
    "start": "2411270",
    "end": "2417970"
  },
  {
    "text": "over to reflector which is an application that will allow me to have a look at the code that's being generated",
    "start": "2417970",
    "end": "2424210"
  },
  {
    "text": "so you'll you'll see here that we have a lot of things inside our inside our",
    "start": "2424210",
    "end": "2430540"
  },
  {
    "text": "class here in particular we have these different asynchronous state machines",
    "start": "2430540",
    "end": "2435790"
  },
  {
    "text": "that's now being generated so we have one for run async one for running turtle one for something using something internal async and so forth and for this",
    "start": "2435790",
    "end": "2443380"
  },
  {
    "text": "like for this demo here there's not a lot of code inside the state machine but",
    "start": "2443380",
    "end": "2448750"
  },
  {
    "text": "for simply returning in a senior's operation which is to test delays this is a lot of code right and if we have",
    "start": "2448750",
    "end": "2455530"
  },
  {
    "text": "more complex code or complex methods this here could look a lot worse so of",
    "start": "2455530",
    "end": "2461410"
  },
  {
    "text": "course the simple way of solving this is to just replace the replace the away",
    "start": "2461410",
    "end": "2468070"
  },
  {
    "text": "with your weight with return get rid of the task and if we do the same thing here you see the the signature of the",
    "start": "2468070",
    "end": "2474820"
  },
  {
    "text": "method and whoever's calling the method is doing the same thing doesn't change the behavior of the app doesn't really",
    "start": "2474820",
    "end": "2482050"
  },
  {
    "text": "change how you use the the methods and now we got a little bit less code generated so that's a nice improvement",
    "start": "2482050",
    "end": "2488230"
  },
  {
    "text": "to our application so that's the unnecessary of state machines let's also",
    "start": "2488230",
    "end": "2493270"
  },
  {
    "text": "have a look at dead locking all right so",
    "start": "2493270",
    "end": "2500920"
  },
  {
    "text": "for dead locking I mentioned that it's really easy for us to deadlock if we're calling weight or result on one of our",
    "start": "2500920",
    "end": "2507520"
  },
  {
    "text": "synchronous operations and here I have a little bit more of a a real-world scenario I'm trying to read a file from",
    "start": "2507520",
    "end": "2513370"
  },
  {
    "text": "disk and then what I'm doing here is I'm reading the file a synchronously from start to end and then I'm going to set",
    "start": "2513370",
    "end": "2519550"
  },
  {
    "text": "the result on my to do that so now what's interesting",
    "start": "2519550",
    "end": "2526059"
  },
  {
    "text": "there are two things that's interesting here this new c-sharp age feature which is enhanced using so we can we no longer",
    "start": "2526059",
    "end": "2531549"
  },
  {
    "text": "have to wrap the entire thing and I using block and I have a talk on c-sharp 8:00 tomorrow if you want to come to that now what's happening here is that",
    "start": "2531549",
    "end": "2538660"
  },
  {
    "text": "all of this code here is being executed on our UI thread right so from top to bottom it's all being executed on the UI",
    "start": "2538660",
    "end": "2543970"
  },
  {
    "text": "thread the continuation needs to communicate back to the UI thread which means that when we block the UI thread",
    "start": "2543970",
    "end": "2549490"
  },
  {
    "text": "like this here the state machine can no longer execute and that's problematic right so there's a way for us to solve",
    "start": "2549490",
    "end": "2557019"
  },
  {
    "text": "this now imagine that I really want to block this this call here what I can do",
    "start": "2557019",
    "end": "2562390"
  },
  {
    "text": "is that I can I can wrap this in a new task and say I want to run the state machine somewhere else and I want this",
    "start": "2562390",
    "end": "2569170"
  },
  {
    "text": "to I want to wait for that what's happening here now is I'm blocking the UI thread I'm taking my task and I'm running that",
    "start": "2569170",
    "end": "2576069"
  },
  {
    "text": "I'm taking the state machine and running that on a separate thread do you think",
    "start": "2576069",
    "end": "2581920"
  },
  {
    "text": "this code is bug free now it's not promise so what's happening here is that were getting an exception right because",
    "start": "2581920",
    "end": "2587619"
  },
  {
    "text": "we're now trying to update our dy from a different tack task right previously our",
    "start": "2587619",
    "end": "2592720"
  },
  {
    "text": "run async method tried to invoke the UI because we expect it to be on the UI thread in this continuation right so as",
    "start": "2592720",
    "end": "2599200"
  },
  {
    "text": "good developers do we're gonna increase the dispatcher does anyone think this is",
    "start": "2599200",
    "end": "2605859"
  },
  {
    "text": "going to work this isn't gonna work either because what we will now have a",
    "start": "2605859",
    "end": "2611589"
  },
  {
    "text": "deadlock again because now I'm trying to update the UI in the continuation but I'm blocking the UI until this entire",
    "start": "2611589",
    "end": "2617499"
  },
  {
    "text": "thing is done right so trying to refactor the application and make it better but we are just",
    "start": "2617499",
    "end": "2622779"
  },
  {
    "text": "making it worse still have a deadlock so this kind of illustrates that it's super easy for us to introduce deadlocks in",
    "start": "2622779",
    "end": "2628509"
  },
  {
    "text": "our applications so of course the the proper way to solve this is to change",
    "start": "2628509",
    "end": "2634539"
  },
  {
    "text": "this here to a returning string we're gonna return this thing here instead the",
    "start": "2634539",
    "end": "2645009"
  },
  {
    "text": "last thing here is the awake humored right so we can probably that",
    "start": "2645009",
    "end": "2653039"
  },
  {
    "text": "and now we could probably do this",
    "start": "2654920",
    "end": "2662839"
  },
  {
    "text": "but remember I said never use some result property so we would have to introduce the async and it would cure it",
    "start": "2667510",
    "end": "2672880"
  },
  {
    "text": "to make this work a little bit more nicely",
    "start": "2672880",
    "end": "2676890"
  },
  {
    "text": "one thing one thing to keep in mind I mentioned earlier that we can remove the async anyway keyword if there's nothing",
    "start": "2680950",
    "end": "2686320"
  },
  {
    "text": "in the continuation this thing here is a continuation as well so whenever we were assigning a variable or whenever we are",
    "start": "2686320",
    "end": "2692200"
  },
  {
    "text": "in this case invoking the UI after the away keyword that's also something that happens in the continuation so now the",
    "start": "2692200",
    "end": "2699220"
  },
  {
    "text": "application is going to behave a little bit better although we had to do a little bit of refactoring to make this",
    "start": "2699220",
    "end": "2704770"
  },
  {
    "text": "work properly and the contract of the method now changed and our it was a lot",
    "start": "2704770",
    "end": "2710200"
  },
  {
    "text": "of work just to make this work right but then again we don't have a deadlock anymore",
    "start": "2710200",
    "end": "2716339"
  },
  {
    "text": "so one more thing I want to talk about is cancellations this is one thing that",
    "start": "2717150",
    "end": "2722530"
  },
  {
    "text": "I see being misused quite often so we're gonna look at an example that again looks a little bit tedious but in this",
    "start": "2722530",
    "end": "2729190"
  },
  {
    "text": "case here I have this long-running operation it's a wild fruit loop I want to offload that to somewhere else I'm",
    "start": "2729190",
    "end": "2734980"
  },
  {
    "text": "gonna run this long-running operation somewhere else even though this might be more CPU bound I can use the TPL because",
    "start": "2734980",
    "end": "2740800"
  },
  {
    "text": "the TPL is always also used for concurrent work right so what we're doing here is we're simply trying to",
    "start": "2740800",
    "end": "2746860"
  },
  {
    "text": "update the UI every every 500 milliseconds and this task a deal I here",
    "start": "2746860",
    "end": "2752230"
  },
  {
    "text": "at the bottom just to illustrate some of some work happening with that data now",
    "start": "2752230",
    "end": "2757600"
  },
  {
    "text": "I'm gonna run this here in a separate task because this is son it's both on asynchronous method because we have the",
    "start": "2757600",
    "end": "2763300"
  },
  {
    "text": "the async and away keywords right but it's a while true loop and this thing here is going to be executed on the UI",
    "start": "2763300",
    "end": "2769000"
  },
  {
    "text": "thread if we run this off our click event handler so we don't want that so I'm gonna wrap that in a new task to",
    "start": "2769000",
    "end": "2775140"
  },
  {
    "text": "offload the work of this entire while true loop to somewhere else but we're also going to pass something called a",
    "start": "2775140",
    "end": "2781450"
  },
  {
    "text": "cancellation token now when I do this this will allow me to then cancel this",
    "start": "2781450",
    "end": "2786610"
  },
  {
    "text": "cancellation token when the cancellation token source here which allows us to signal all the tokens or all the places",
    "start": "2786610",
    "end": "2793270"
  },
  {
    "text": "that's using the token that you should now cancel so pass this cancellation token in here and then we can call",
    "start": "2793270",
    "end": "2800500"
  },
  {
    "text": "cancellation token but cancel I don't see these very often although when you call cancellation token source that",
    "start": "2800500",
    "end": "2807400"
  },
  {
    "text": "cancels nothing's going to happen so if you were working with Coughlin for",
    "start": "2807400",
    "end": "2812530"
  },
  {
    "text": "instance if you if you just canceled you're co-routines it'll just terminate the entire thread which is in my opinion",
    "start": "2812530",
    "end": "2819039"
  },
  {
    "text": "a weird thing to do because if we do something in here and there's a cancellation scheduled we might want to",
    "start": "2819039",
    "end": "2825190"
  },
  {
    "text": "roll back the the newest change or the newest thing that you did right so just terminating the thread could be",
    "start": "2825190",
    "end": "2830710"
  },
  {
    "text": "that we're terminating whatever we are trying to set debug duck text which means that we might end up in a really",
    "start": "2830710",
    "end": "2835720"
  },
  {
    "text": "weird scenario in the application so how do we make sure that we can listen for",
    "start": "2835720",
    "end": "2841029"
  },
  {
    "text": "whenever the task is cancelled we can introduce this thing here since we have the cancellation token we can now say if",
    "start": "2841029",
    "end": "2847089"
  },
  {
    "text": "there's a cancellation request I'd just throw an exception and whoever is listening to this asynchronous operation if they're properly awaiting this they",
    "start": "2847089",
    "end": "2854019"
  },
  {
    "text": "will get an exception telling them that this was canceled all right it's really",
    "start": "2854019",
    "end": "2859059"
  },
  {
    "text": "super simple and we can do this in in different variations as well so if we",
    "start": "2859059",
    "end": "2864789"
  },
  {
    "text": "have a look at pretty much the same code here but if we neglect to have the cancellation too token telling us that",
    "start": "2864789",
    "end": "2873369"
  },
  {
    "text": "it's cancellation has been requested if we just run this application it's pretty much the same application that way",
    "start": "2873369",
    "end": "2878980"
  },
  {
    "text": "earlier and click run here and when I click cancel here nothing's gonna happen right and if I introduce this thing here",
    "start": "2878980",
    "end": "2887609"
  },
  {
    "text": "all that I'm doing inside my cancer click event tailor is : cancel the",
    "start": "2887609",
    "end": "2892720"
  },
  {
    "text": "cancellation token source is being updated to a new one every time I click my run run method otherwise what's gonna",
    "start": "2892720",
    "end": "2900130"
  },
  {
    "text": "happen is that you were always going to start this off with a canceled cancellation token and if you call task",
    "start": "2900130",
    "end": "2905740"
  },
  {
    "text": "dot run with a canceled cancellation token you won't start so that's kind of bad so let's run the application again",
    "start": "2905740",
    "end": "2912670"
  },
  {
    "text": "I'm gonna click run here and then I'm gonna cancel and you can see that there was a slight delay there that I could",
    "start": "2912670",
    "end": "2918700"
  },
  {
    "text": "cancel and then it still entered one last element so depending on when you",
    "start": "2918700",
    "end": "2924220"
  },
  {
    "text": "add the cancellation when you add the eliciting for the cancellation token you",
    "start": "2924220",
    "end": "2929829"
  },
  {
    "text": "could have moved this up two to the top up here or to the bottom kind of depends",
    "start": "2929829",
    "end": "2934990"
  },
  {
    "text": "on how you want to handle that you can also listen for it to subscribe to whenever a cancellation has been requested so that's one way of doing it",
    "start": "2934990",
    "end": "2942910"
  },
  {
    "text": "but I also have a a WPF core application so we're done of course we for now we",
    "start": "2942910",
    "end": "2948430"
  },
  {
    "text": "now use WPF which means that we can now leverage the new c-sharp 8 features which means that I can now use my async",
    "start": "2948430",
    "end": "2954010"
  },
  {
    "text": "restreams in this application so we'll go through this demo as well it's a little bit more of a real-world scenario",
    "start": "2954010",
    "end": "2959170"
  },
  {
    "text": "so this run click event tailor here it's going to set my text to nothing at all",
    "start": "2959170",
    "end": "2964540"
  },
  {
    "text": "it's gonna create a new cancellation token source it's gonna run my run async method the run async method now has this",
    "start": "2964540",
    "end": "2971800"
  },
  {
    "text": "this new syntax for a for each loop where I say for each element which is going to come to me asynchronously",
    "start": "2971800",
    "end": "2978610"
  },
  {
    "text": "I want to await that so we have the away keyword in front of the for each loop because each element that I get out of",
    "start": "2978610",
    "end": "2984040"
  },
  {
    "text": "this lyrics thing here is going to be streamed to the application makes a lot of sense right hopefully it will when we",
    "start": "2984040",
    "end": "2991810"
  },
  {
    "text": "look at the implementation here so this here is a new thing as well the ia syncing numerable you can use the",
    "start": "2991810",
    "end": "2997540"
  },
  {
    "text": "normally and use async task or an async task like object but in this case here",
    "start": "2997540",
    "end": "3002730"
  },
  {
    "text": "we have an i async enumerable of string which means that we are going to return",
    "start": "3002730",
    "end": "3008250"
  },
  {
    "text": "one line at a time we're going to read a line from disk we're going to do some",
    "start": "3008250",
    "end": "3013710"
  },
  {
    "text": "work with that and then we're going to return that back to the caller so for each line that we get it's going to be",
    "start": "3013710",
    "end": "3019650"
  },
  {
    "text": "streamed back to whoever's calling this so that's pretty cool and now I want to",
    "start": "3019650",
    "end": "3025170"
  },
  {
    "text": "be able to cancel this as well so I have the cancellation token in here so after I read the line from disk I can't pass a",
    "start": "3025170",
    "end": "3031260"
  },
  {
    "text": "cancellation token to read line async because it doesn't support the cancellation so I have to do the cancellation in my while loop here right",
    "start": "3031260",
    "end": "3038970"
  },
  {
    "text": "and again I have a cancel button so when I click that hopefully it's going to cancel the application so rickrolled I",
    "start": "3038970",
    "end": "3051410"
  },
  {
    "text": "can click cancel and the operation was cancelled super simple",
    "start": "3051410",
    "end": "3057140"
  },
  {
    "text": "another scenario where you might want to use this is something that I call smart cancellations so I'm gonna run the",
    "start": "3057140",
    "end": "3062970"
  },
  {
    "text": "application first and then we'll talk through the code that I have here so imagine being able to search for",
    "start": "3062970",
    "end": "3069030"
  },
  {
    "text": "something so whenever I work with mobile applications I try to apply this pattern so I for instance I want to search for",
    "start": "3069030",
    "end": "3074130"
  },
  {
    "text": "I've been doing public transport so you want to search for the closest stop or you want to search for a bus that's going to leave in 10 minutes when the",
    "start": "3074130",
    "end": "3080340"
  },
  {
    "text": "user enters the data you don't want to API for every keystroke you want to figure out how long does it take for a",
    "start": "3080340",
    "end": "3086070"
  },
  {
    "text": "user to type a word and then when they stop typing you want to search for that particular thing they're searching for",
    "start": "3086070",
    "end": "3092690"
  },
  {
    "text": "so we cannot make sure in four out of milliseconds or 500 milliseconds so whenever I type something in here you",
    "start": "3092690",
    "end": "3098010"
  },
  {
    "text": "can see that I'm going to have bort the call to my thing and then after a little while it's going to to go ahead and",
    "start": "3098010",
    "end": "3103410"
  },
  {
    "text": "query my my API or whatever so whenever I write something here it's going to",
    "start": "3103410",
    "end": "3109740"
  },
  {
    "text": "cancel that so for every keystroke and then when I stop typing it's going to",
    "start": "3109740",
    "end": "3115110"
  },
  {
    "text": "search and the way that we saw this is by simply listening for whatever the",
    "start": "3115110",
    "end": "3121320"
  },
  {
    "text": "text changes whatever the text changes I'm going to cancel the ongoing operation so you might ask yourself what",
    "start": "3121320",
    "end": "3128220"
  },
  {
    "text": "is the current ongoing operation well I have attached a dealer here for 500 milliseconds I'm gonna pass the",
    "start": "3128220",
    "end": "3134940"
  },
  {
    "text": "cancellation token in here so if I simulate 500 milliseconds worth of work and I don't cancel that I know that in",
    "start": "3134940",
    "end": "3143670"
  },
  {
    "text": "the continuation of these 500 milliseconds I can now go ahead and load my data of the web or from wherever I want to load that you might also want to",
    "start": "3143670",
    "end": "3150540"
  },
  {
    "text": "pass the cancellation token in here and have that properly propagated down to your HTTP clients or whatever but this",
    "start": "3150540",
    "end": "3157260"
  },
  {
    "text": "piece that I can now capture whenever there's an exception because when I await this here it's going to throw an",
    "start": "3157260",
    "end": "3162780"
  },
  {
    "text": "exception whatever this has been aborted all right so that means that we are",
    "start": "3162780",
    "end": "3169560"
  },
  {
    "text": "going to be an exception handler down here and we can now handle that properly all right so let's look at one final",
    "start": "3169560",
    "end": "3177990"
  },
  {
    "text": "thing I haven't talked much about asp.net but one of the things I do want",
    "start": "3177990",
    "end": "3183180"
  },
  {
    "text": "to mention everything that we've talked about except the how do we invoke the UI of course is different in asp.net",
    "start": "3183180",
    "end": "3189440"
  },
  {
    "text": "although one of the misconceptions maybe not anymore about in the early days of the async anyway key words was that when",
    "start": "3189440",
    "end": "3195780"
  },
  {
    "text": "you apply the async in a way keyword like I'm doing here for instance on my index action is that you would",
    "start": "3195780",
    "end": "3202230"
  },
  {
    "text": "automatically automatically get Ajax on your client but that's not really the case so what you get here is that the",
    "start": "3202230",
    "end": "3208350"
  },
  {
    "text": "server-side part is asynchronous which means that if we are running some work",
    "start": "3208350",
    "end": "3213570"
  },
  {
    "text": "here that takes a long time we're load something from discord the database the web server can now go ahead and take",
    "start": "3213570",
    "end": "3219290"
  },
  {
    "text": "care of other requests while it's going on that means that if we have the away keyword here it's going to release the",
    "start": "3219290",
    "end": "3225290"
  },
  {
    "text": "thread back to the thread pool so that IAS can take care of other requests in asp.net other than that we can use the",
    "start": "3225290",
    "end": "3232760"
  },
  {
    "text": "async and avoid keywords just like we do in WPF or console applications we can even get the deadlock like we do in",
    "start": "3232760",
    "end": "3239450"
  },
  {
    "text": "other types of applications as well so if I do the same thing here we have this thread on the thread pool running our",
    "start": "3239450",
    "end": "3245060"
  },
  {
    "text": "application if I run this and call slash home slash deadlock if I can spell home",
    "start": "3245060",
    "end": "3257980"
  },
  {
    "text": "this will in fact deadlock the application so if we run but now if I",
    "start": "3257980",
    "end": "3263480"
  },
  {
    "text": "run this thing here it's gonna say okay so it still listens for for other",
    "start": "3263480",
    "end": "3269990"
  },
  {
    "text": "requests wipe but we have a thread here that's now deadlocked how it's going to handle that afterwards I'm a little bit",
    "start": "3269990",
    "end": "3276680"
  },
  {
    "text": "unsure if it's go ever going to terminate the threader or not but just avoid deadlock in your applications and you will probably be fine other than",
    "start": "3276680",
    "end": "3284420"
  },
  {
    "text": "that we can use to pretty much the same principles in asp.net in earlier versions of not core versions of asp.net",
    "start": "3284420",
    "end": "3291859"
  },
  {
    "text": "so you have a speed-up net the the normal MVC and web api you use something called the configure a waiter or",
    "start": "3291859",
    "end": "3298280"
  },
  {
    "text": "configure await in order for you to be able to configure how you want the continuation to to to work so for",
    "start": "3298280",
    "end": "3305420"
  },
  {
    "text": "instance here I could say configure await and say false this means that",
    "start": "3305420",
    "end": "3310430"
  },
  {
    "text": "whenever you are done it's not going to try Marshall back to the original context which means that when we were",
    "start": "3310430",
    "end": "3315590"
  },
  {
    "text": "down here it's a completely different thread or different context than what we had up here that makes sense all the way",
    "start": "3315590",
    "end": "3323960"
  },
  {
    "text": "in asp.net core that works a little bit different so I don't want to talk too much about that because it's just gonna be confusing but basically you can just",
    "start": "3323960",
    "end": "3331640"
  },
  {
    "text": "remove this in asp.net core but if you're working with libraries you might always want to do this because what",
    "start": "3331640",
    "end": "3338720"
  },
  {
    "text": "happens is that all the code here above the or below the continuation is now not",
    "start": "3338720",
    "end": "3344090"
  },
  {
    "text": "going to try and get back to the original context so if you're working with libraries for that don't care about the original",
    "start": "3344090",
    "end": "3350060"
  },
  {
    "text": "context or their original thread you don't have to try and marshal back to that one more thing about that is it",
    "start": "3350060",
    "end": "3356180"
  },
  {
    "text": "only affects this method in here so if we have someone listening for this",
    "start": "3356180",
    "end": "3361580"
  },
  {
    "text": "method somewhere else let me show you what I mean about that so if we have if I do this configure right in in my run",
    "start": "3361580",
    "end": "3369320"
  },
  {
    "text": "async method that's not going to affect this method up here right it only",
    "start": "3369320",
    "end": "3374600"
  },
  {
    "text": "affects this one and the things after its continuation but again that's",
    "start": "3374600",
    "end": "3380330"
  },
  {
    "text": "totally confusing and if you're run into problems with asp.net and asynchronous programming hate me I hate to be up on",
    "start": "3380330",
    "end": "3386150"
  },
  {
    "text": "Twitter and I'll try to help you up for that right so if you want a little bit",
    "start": "3386150",
    "end": "3391220"
  },
  {
    "text": "more I've recently redone my async async course on Pluralsight so you can go ahead and and check that out it goes",
    "start": "3391220",
    "end": "3398570"
  },
  {
    "text": "through all of these things in much more detail I talk about parallel extensions and a little bit more about how you can",
    "start": "3398570",
    "end": "3404210"
  },
  {
    "text": "use these two paradigms together and if you do check it out let me know if you if you like it or not right so to wrap",
    "start": "3404210",
    "end": "3412790"
  },
  {
    "text": "this up we've talked about everything from the beginning of how you use two tasks parallel library to how we apply",
    "start": "3412790",
    "end": "3418760"
  },
  {
    "text": "the async and avoid keywords and do that in an efficient manner because efficiency can mean that we are efficient in writing the code and being",
    "start": "3418760",
    "end": "3425870"
  },
  {
    "text": "efficient in maintaining the code but also reducing the amounts of generated code and the potential problems in our",
    "start": "3425870",
    "end": "3431780"
  },
  {
    "text": "applications so I think that if we try to apply a lot of these things in our",
    "start": "3431780",
    "end": "3437000"
  },
  {
    "text": "applications we will try we will probably avoid some deadlocks and some problems in the future so I hope you",
    "start": "3437000",
    "end": "3442610"
  },
  {
    "text": "enjoy this talk and that you got something out of it if you have any questions you can ping me on twitter i'm philip Ekberg and it's been my pleasure",
    "start": "3442610",
    "end": "3448520"
  },
  {
    "text": "being back here in Sydney thank you so much [Applause]",
    "start": "3448520",
    "end": "3456110"
  }
]