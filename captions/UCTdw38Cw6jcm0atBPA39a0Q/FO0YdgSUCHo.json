[
  {
    "text": "did i hear something i'm going to carry on if you want to ask",
    "start": "10480",
    "end": "15599"
  },
  {
    "text": "questions i just shout out um i hope you've enjoyed your lunch dinner",
    "start": "15599",
    "end": "20720"
  },
  {
    "text": "afternoon tea breakfast or bedtime snacks during the break",
    "start": "20720",
    "end": "25840"
  },
  {
    "text": "um but first just a very quick intro about myself i'm",
    "start": "25840",
    "end": "31279"
  },
  {
    "text": "a software developer from auckland new zealand and i work at a great place called xero",
    "start": "31279",
    "end": "38559"
  },
  {
    "text": "the beautiful accounting software throughout the talk i would love if you could ask me questions",
    "start": "38559",
    "end": "45440"
  },
  {
    "text": "if you do just call me hack or you know hux that's how my friends call me so don't",
    "start": "45440",
    "end": "51039"
  },
  {
    "text": "be shy today i want to talk to you about regular expressions and pauses parsers",
    "start": "51039",
    "end": "58079"
  },
  {
    "text": "however before we get into it i must confess that the title of the talk is uh",
    "start": "58079",
    "end": "63359"
  },
  {
    "text": "inaccurate for dramatic effects",
    "start": "63359",
    "end": "67920"
  },
  {
    "text": "to be more accurate i think it should be called less puzzle and less regex more positive or",
    "start": "68640",
    "end": "75280"
  },
  {
    "text": "try out parsers when red x fails you but hopefully you get the idea",
    "start": "75280",
    "end": "82000"
  },
  {
    "text": "so is it regex or regex if you're a fan of trivia this could be",
    "start": "82000",
    "end": "88320"
  },
  {
    "text": "something to spend a few days of your life debating um unfortunately today is not the day",
    "start": "88320",
    "end": "95439"
  },
  {
    "text": "sorry and because english is not my first language i'm going to be very liberal",
    "start": "95439",
    "end": "100880"
  },
  {
    "text": "about it i'm going to use both pronunciations throughout so hopefully you don't give me trouble for",
    "start": "100880",
    "end": "106560"
  },
  {
    "text": "doing that there are quite a few good quotes about",
    "start": "106560",
    "end": "113040"
  },
  {
    "text": "regular expressions and my favorite is this one some people when confronted with a",
    "start": "113040",
    "end": "119759"
  },
  {
    "text": "problem think i know i use regular expressions now they have two problems",
    "start": "119759",
    "end": "126640"
  },
  {
    "text": "this is by jamie zawanski uh kind of a ton in chief it went um",
    "start": "126640",
    "end": "131840"
  },
  {
    "text": "well like many similar quotes um you know we may like it or hate it but we know there is a certain amount of",
    "start": "131840",
    "end": "138319"
  },
  {
    "text": "truth to it and to me the bit of truth here is that regular expressions are nice and sweet",
    "start": "138319",
    "end": "145280"
  },
  {
    "text": "but they can be troublesome if overused like candy or",
    "start": "145280",
    "end": "150640"
  },
  {
    "text": "perfume um just to generalize a little bit uh",
    "start": "150640",
    "end": "156160"
  },
  {
    "text": "i'm a big believer of less is more um when it comes to programming i believe less code is uh",
    "start": "156160",
    "end": "162879"
  },
  {
    "text": "better than more code there are somehow a couple of",
    "start": "162879",
    "end": "168840"
  },
  {
    "text": "exceptions and the very first one um you guessed it it's trial expressions have you um ever",
    "start": "168840",
    "end": "175200"
  },
  {
    "text": "have to use it is it pure joy to use isn't it um i mean anything to do with the scheduling",
    "start": "175200",
    "end": "182400"
  },
  {
    "text": "and it also must be amongst the most succinct syntax out there i actually don't know anything else that",
    "start": "182400",
    "end": "188879"
  },
  {
    "text": "comes even close to chrome expressions um imagine your big boss asks you um",
    "start": "188879",
    "end": "195760"
  },
  {
    "text": "hack can you explain these numbers to me and i'll have to you know put a big smile on my face and say",
    "start": "195760",
    "end": "202239"
  },
  {
    "text": "okay but do you have eight hours i'm just so grateful that nice people",
    "start": "202239",
    "end": "208080"
  },
  {
    "text": "out there have made you know great tools such as this one otherwise i would never be able to",
    "start": "208080",
    "end": "214480"
  },
  {
    "text": "decrypt or encrypt on expressions with confidence with that said though i'm kind of okay",
    "start": "214480",
    "end": "220799"
  },
  {
    "text": "with it because well it's first is used for one specific purpose secondly",
    "start": "220799",
    "end": "227760"
  },
  {
    "text": "it's quite well understood for those who use it and thirdly it's kind of well explained by tools",
    "start": "227760",
    "end": "235360"
  },
  {
    "text": "like this um i hope you agree it's a little bit annoying it sometimes",
    "start": "235360",
    "end": "240400"
  },
  {
    "text": "makes me feel useless any questions",
    "start": "240400",
    "end": "245360"
  },
  {
    "text": "okay our dear regular expressions um can be quite a different story commit look at",
    "start": "246239",
    "end": "254080"
  },
  {
    "text": "this beautiful baby don't you just love it um if you're not using this on production",
    "start": "254080",
    "end": "260160"
  },
  {
    "text": "to verify email addresses you should really be ashamed yourself okay",
    "start": "260160",
    "end": "266000"
  },
  {
    "text": "but in all seriousness who could really understand it um i mean i'll",
    "start": "266160",
    "end": "271680"
  },
  {
    "text": "give you one day to decode it and you know um i couldn't accept the challenge",
    "start": "271680",
    "end": "277040"
  },
  {
    "text": "it's kind of an extreme example to be uh to be honest but um compare",
    "start": "277040",
    "end": "282720"
  },
  {
    "text": "regular expressions to chrome um expressions so regular expressions really has no limit",
    "start": "282720",
    "end": "290400"
  },
  {
    "text": "at least not to its length or obscurity",
    "start": "290400",
    "end": "295199"
  },
  {
    "text": "there are also tools on the internet that helps us understand they explain um",
    "start": "295680",
    "end": "301759"
  },
  {
    "text": "regexes but often i found the explanations not much easier to understand than the regular",
    "start": "301759",
    "end": "308479"
  },
  {
    "text": "expression themselves just a few fun facts about regular",
    "start": "308479",
    "end": "313919"
  },
  {
    "text": "expressions it's a regular language which means it's actually a language of its own",
    "start": "313919",
    "end": "322000"
  },
  {
    "text": "there are also many flavors to it there is perl there's pcie which stands for",
    "start": "322000",
    "end": "328080"
  },
  {
    "text": "perl compatible regular expression there's php which stands for php",
    "start": "328080",
    "end": "334560"
  },
  {
    "text": "you have.net java javascript the list goes on right",
    "start": "334560",
    "end": "339680"
  },
  {
    "text": "as a regular language it has its limitations um and it's not always a good idea to push its limitations",
    "start": "339680",
    "end": "347039"
  },
  {
    "text": "regular expressions are wildly popular sometimes you can't run away from it all right",
    "start": "347039",
    "end": "352479"
  },
  {
    "text": "and it's occasionally vague and hard to get right i have to define occasional it's you know usual",
    "start": "352479",
    "end": "361600"
  },
  {
    "text": "one of the challenges with using regular expressions um or actually programming in general is to",
    "start": "361759",
    "end": "367039"
  },
  {
    "text": "get the right balance between readability and writeability if that's a word at all",
    "start": "367039",
    "end": "373919"
  },
  {
    "text": "and often when we can't get the balance we would prefer readability",
    "start": "373919",
    "end": "380319"
  },
  {
    "text": "because we want other people to understand our code it's not just for ourselves obviously",
    "start": "380319",
    "end": "386960"
  },
  {
    "text": "but this is not always easy with regular expressions we usually get the opposite",
    "start": "386960",
    "end": "394039"
  },
  {
    "text": "it's also a regular source of uh disagreements if you uh you know program",
    "start": "395520",
    "end": "400639"
  },
  {
    "text": "as a daily job um between the writer of a regular expression and the reader regular",
    "start": "400639",
    "end": "406080"
  },
  {
    "text": "expression the writer possibly after successful after a couple of failed",
    "start": "406080",
    "end": "411280"
  },
  {
    "text": "attempts they would think oh this regular expression is glorious",
    "start": "411280",
    "end": "417039"
  },
  {
    "text": "and the reader on the other side would usually fail miserably a couple of times",
    "start": "417039",
    "end": "423680"
  },
  {
    "text": "so they would you know would not appreciate such beauty immediately um and tell me you've never come across",
    "start": "423680",
    "end": "429840"
  },
  {
    "text": "this i think everybody does um and you know what let's be clear i don't",
    "start": "429840",
    "end": "435280"
  },
  {
    "text": "think it's the fault of regular expressions indeed um it's us software developers i",
    "start": "435280",
    "end": "441120"
  },
  {
    "text": "think we're notorious for you know abusing things that are nice and sweet but you know we keep",
    "start": "441120",
    "end": "447039"
  },
  {
    "text": "stretching them until they break and become so likable",
    "start": "447039",
    "end": "453759"
  },
  {
    "text": "so what are the alternatives um obviously when regular expressions are getting",
    "start": "453759",
    "end": "460319"
  },
  {
    "text": "stretched i think parses can be extremely handy and this is what we're",
    "start": "460319",
    "end": "465599"
  },
  {
    "text": "going to look at today the agenda of this talk is very simple",
    "start": "465599",
    "end": "471520"
  },
  {
    "text": "um hopefully we start to the case study which is about parsing your",
    "start": "471520",
    "end": "477840"
  },
  {
    "text": "first we're going to use regular expressions for the job and then we'll follow with using pauses",
    "start": "477840",
    "end": "485680"
  },
  {
    "text": "um directly without an introduction and then of course we will get a proper introduction",
    "start": "485680",
    "end": "493120"
  },
  {
    "text": "after that there will be more case studies with parsers",
    "start": "493120",
    "end": "498800"
  },
  {
    "text": "the goals hopefully are also clear um well first we want to share the understanding where parts can be useful",
    "start": "499840",
    "end": "509360"
  },
  {
    "text": "and secondly we want to have an understanding how puzzles work we're actually going to",
    "start": "509360",
    "end": "514959"
  },
  {
    "text": "implement a parser from scratch okay exciting for you and nerve-wracking for me a lot",
    "start": "514959",
    "end": "521120"
  },
  {
    "text": "of uh live coding um and then you know we'll cover the",
    "start": "521120",
    "end": "526480"
  },
  {
    "text": "typical use cases for parsers i hope that sounds right a lot to cover",
    "start": "526480",
    "end": "533760"
  },
  {
    "text": "uh personally i value clarity and simplicity so if you feel",
    "start": "533760",
    "end": "539120"
  },
  {
    "text": "you know during the course of this talk that some not clear enough you must stop me and ask you know hako",
    "start": "539120",
    "end": "546720"
  },
  {
    "text": "can you explain this a bit more okay just don't be shy just shout out i think",
    "start": "546720",
    "end": "552800"
  },
  {
    "text": "it will have plenty of time hopefully",
    "start": "552800",
    "end": "557040"
  },
  {
    "text": "without further ado uh we're gonna jump right into a about you know parsing a rest some url",
    "start": "558640",
    "end": "566959"
  },
  {
    "text": "i don't want to call it restful because uh you know people get really um you know",
    "start": "566959",
    "end": "572080"
  },
  {
    "text": "excited about restful designs okay here are the things we want to do um the",
    "start": "572080",
    "end": "578800"
  },
  {
    "text": "task is to convert a url to a mode object so the mode object is the green",
    "start": "578800",
    "end": "585519"
  },
  {
    "text": "boxes and you can see the urls are kind of you can imagine therefore managing",
    "start": "585519",
    "end": "592160"
  },
  {
    "text": "books and a library and you would make http post requests to",
    "start": "592160",
    "end": "598080"
  },
  {
    "text": "the urls to either create a book edit a book or clone an",
    "start": "598080",
    "end": "603680"
  },
  {
    "text": "existing book you know possibly to create a new one and then based on the structure of the",
    "start": "603680",
    "end": "608800"
  },
  {
    "text": "url we want to extract useful information and build the mode object",
    "start": "608800",
    "end": "615200"
  },
  {
    "text": "okay it's kind of like reverse engineering of routing so i want us to take a few seconds to",
    "start": "615200",
    "end": "621200"
  },
  {
    "text": "digest this because you know the a big part of the talk kind of hinges on",
    "start": "621200",
    "end": "626640"
  },
  {
    "text": "it again it's not clear this is your chance to unmute and ask me",
    "start": "626640",
    "end": "632959"
  },
  {
    "text": "any question",
    "start": "632959",
    "end": "635600"
  },
  {
    "text": "all good",
    "start": "641920",
    "end": "645160"
  },
  {
    "text": "now i'm going to um you know get to the nerve wrecking part for myself i'm going to do a bit of live coding",
    "start": "647600",
    "end": "654320"
  },
  {
    "text": "um if you can see uh we just do a code here",
    "start": "654320",
    "end": "659519"
  },
  {
    "text": "um we're going to be using typescript we think why typescript um well i think",
    "start": "659519",
    "end": "665839"
  },
  {
    "text": "it's possibly one of the most popular languages these days and it's also my personal favorite um",
    "start": "665839",
    "end": "672399"
  },
  {
    "text": "a lot of people who think oh it's just javascript plus c sharp but uh it's so much more than that right",
    "start": "672399",
    "end": "678079"
  },
  {
    "text": "you can get you know conditional types type calculation and you know sort of crazy stuff and they're officially in",
    "start": "678079",
    "end": "683519"
  },
  {
    "text": "typescript isn't that you know one of the coolest things okay um",
    "start": "683519",
    "end": "689040"
  },
  {
    "text": "so i'll start to walk you through the code and then you know there's the part that",
    "start": "689040",
    "end": "694240"
  },
  {
    "text": "i have to write code um and really have a nervous breakdown but",
    "start": "694240",
    "end": "699279"
  },
  {
    "text": "first of all um remember the url schema we're gonna",
    "start": "699279",
    "end": "704880"
  },
  {
    "text": "produce a mode thing as a result so a mode type",
    "start": "704880",
    "end": "710160"
  },
  {
    "text": "it's either a create type or an edit or clone type and if you",
    "start": "710160",
    "end": "715680"
  },
  {
    "text": "look at the create type it has a mode which you know has to be create",
    "start": "715680",
    "end": "721200"
  },
  {
    "text": "for the type edit or clone it has two modes edit or clone and then it also has",
    "start": "721200",
    "end": "726800"
  },
  {
    "text": "an id i know some of us might ask why don't you just do mode with create",
    "start": "726800",
    "end": "734160"
  },
  {
    "text": "edit and clone with three modes and then id",
    "start": "734160",
    "end": "739440"
  },
  {
    "text": "well the reason is the create type can never have an id",
    "start": "739440",
    "end": "747040"
  },
  {
    "text": "editor clone type can never not have an id okay so this is kind of a bit of a domain modeling but in the small",
    "start": "747040",
    "end": "754000"
  },
  {
    "text": "i hope that makes sense now to be um well-behaving software uh",
    "start": "754000",
    "end": "761360"
  },
  {
    "text": "developers uh we you know we don't want to be cowboy so we actually have a nice",
    "start": "761360",
    "end": "766399"
  },
  {
    "text": "um test suite and test cases for it so um this would make sense to you but",
    "start": "766399",
    "end": "773279"
  },
  {
    "text": "let's consolidate our understanding of the schema you know out of this url i want to",
    "start": "773279",
    "end": "779600"
  },
  {
    "text": "get back this mode object with create okay",
    "start": "779600",
    "end": "785040"
  },
  {
    "text": "this is the edit url which has an id and that will be edit",
    "start": "785040",
    "end": "790959"
  },
  {
    "text": "and then there's this clone mode hope that makes sense again questions just shout out i'll stop",
    "start": "790959",
    "end": "799200"
  },
  {
    "text": "and try to explain there are also negative test cases where none of these should work and um",
    "start": "799200",
    "end": "806480"
  },
  {
    "text": "they should you know return now and there's um this nice uh test um you test",
    "start": "806480",
    "end": "815600"
  },
  {
    "text": "hopefully make sense but um if you don't have time to read through you just have to take my word and",
    "start": "815600",
    "end": "822399"
  },
  {
    "text": "to give us all the confidence my windows about a little um",
    "start": "822399",
    "end": "828959"
  },
  {
    "text": "let's run the tests",
    "start": "828959",
    "end": "832000"
  },
  {
    "text": "that's great demoguard is kind so you can see the positive cases are not passing because you know there's a job",
    "start": "838399",
    "end": "844959"
  },
  {
    "text": "that's the job for me to do and the negative cases are passing because well they're returning now",
    "start": "844959",
    "end": "850560"
  },
  {
    "text": "so the goal of course is to keep the negative case passing but we need to make the positive",
    "start": "850560",
    "end": "856079"
  },
  {
    "text": "cases pass okay",
    "start": "856079",
    "end": "860639"
  },
  {
    "text": "here comes um you know the novice part for me",
    "start": "861760",
    "end": "866959"
  },
  {
    "text": "we already have this posit function which will be called here of course if you can see the positive function",
    "start": "866959",
    "end": "873440"
  },
  {
    "text": "i'll just drill into it so that you know i'm not lying very simply we have a regex expression a",
    "start": "873440",
    "end": "881279"
  },
  {
    "text": "pattern that we will match against the url if it's successful then we will",
    "start": "881279",
    "end": "886720"
  },
  {
    "text": "extract an id and a clone string if clone is there we say",
    "start": "886720",
    "end": "892079"
  },
  {
    "text": "well this is a clone mode with an id otherwise there's an edit mode with an id otherwise it's a",
    "start": "892079",
    "end": "898959"
  },
  {
    "text": "create mode with an id i hope that's all very clear now um",
    "start": "898959",
    "end": "906480"
  },
  {
    "text": "um how do i begin well i think i'll start with the most simplest one right um apparently create",
    "start": "906480",
    "end": "913199"
  },
  {
    "text": "doesn't have d so um i put this here um",
    "start": "913199",
    "end": "918320"
  },
  {
    "text": "and hopefully that should work yes well who needs parses right um",
    "start": "918320",
    "end": "924480"
  },
  {
    "text": "it works here um",
    "start": "924480",
    "end": "929600"
  },
  {
    "text": "well can i just stop here and celebrate um but no uh we need to get to edit so how",
    "start": "929600",
    "end": "936639"
  },
  {
    "text": "do we do edit well apparently it's going to follow with another slash right and um",
    "start": "936639",
    "end": "942240"
  },
  {
    "text": "we want to capture the numbers so um you know that would be utility let me",
    "start": "942240",
    "end": "948800"
  },
  {
    "text": "save and see works well it works for edit here see but it doesn't work for create what i do",
    "start": "948800",
    "end": "955519"
  },
  {
    "text": "well i think it's because this this bit is actually optional right to match um create so what i'll do",
    "start": "955519",
    "end": "964720"
  },
  {
    "text": "is make this optional would this work going a bit of trial and error oh no it fails edit",
    "start": "964720",
    "end": "972240"
  },
  {
    "text": "is too wrong well i think it's because this pair of parentheses",
    "start": "972240",
    "end": "978480"
  },
  {
    "text": "actually constructs a capturing group sorry so i'm gonna say don't capture",
    "start": "978480",
    "end": "983519"
  },
  {
    "text": "this group yes oof i'm on a roll",
    "start": "983519",
    "end": "989839"
  },
  {
    "text": "love it now how do we end up clone i think it's more or less the same thing so i think",
    "start": "989839",
    "end": "995839"
  },
  {
    "text": "i'll just piggyback on edit and put another slash there and it would follow with a clone",
    "start": "995839",
    "end": "1003120"
  },
  {
    "text": "string wouldn't it so um would that work see we're doing tdd i love that",
    "start": "1003120",
    "end": "1008959"
  },
  {
    "text": "now it fails edit what am i doing wrong well i think it's because well this part",
    "start": "1008959",
    "end": "1014800"
  },
  {
    "text": "would have to be optional no so i'm gonna make this optional and put something here",
    "start": "1014800",
    "end": "1022639"
  },
  {
    "text": "does this look well still failing i think we have the same problem here don't we",
    "start": "1023839",
    "end": "1029360"
  },
  {
    "text": "this should not be capturing success",
    "start": "1029360",
    "end": "1035199"
  },
  {
    "text": "high five everyone um wow let's take uh two seconds to celebrate",
    "start": "1035199",
    "end": "1042640"
  },
  {
    "text": "um but also let's um yeah i'm so happy but i think we need a senator check so what",
    "start": "1042640",
    "end": "1048480"
  },
  {
    "text": "do i do um let's put this uh beautiful baby on the",
    "start": "1048480",
    "end": "1054400"
  },
  {
    "text": "screen um how do you feel i'm full of cold sweat but also i love it you know i just made",
    "start": "1054400",
    "end": "1060880"
  },
  {
    "text": "this beautiful day i think you know everybody should be able to understand",
    "start": "1060880",
    "end": "1067200"
  },
  {
    "text": "unless if you look away for two seconds like me and then look back",
    "start": "1067200",
    "end": "1073120"
  },
  {
    "text": "oh my god i can't understand it anymore what did i do um",
    "start": "1073120",
    "end": "1078320"
  },
  {
    "text": "what does it mean with them um i can't understand it but",
    "start": "1078320",
    "end": "1084080"
  },
  {
    "text": "also you know i do hope that my um whoever reviews my code will be in a good mood",
    "start": "1084080",
    "end": "1089679"
  },
  {
    "text": "um this is so cryptic i mean timing is everything i hope they review my code friday morning",
    "start": "1089679",
    "end": "1095679"
  },
  {
    "text": "definitely not uh monday afternoon right they've been bad mood um",
    "start": "1095679",
    "end": "1101360"
  },
  {
    "text": "right we have to move on as i promised i'm um we're gonna be hardcore i'm just gonna",
    "start": "1101360",
    "end": "1106640"
  },
  {
    "text": "go straight into pauses to get you a taste and for this demo i'm going to use a",
    "start": "1106640",
    "end": "1112240"
  },
  {
    "text": "pauses library called parsimon why possibly well first of all i",
    "start": "1112240",
    "end": "1119760"
  },
  {
    "text": "persimmons okay my favorite fruit there's a joy to use with typescript or",
    "start": "1119760",
    "end": "1126080"
  },
  {
    "text": "javascript and from my personal experience it's a great library it's very well made",
    "start": "1126080",
    "end": "1132880"
  },
  {
    "text": "well maintained the maintainer uh brian molk who gave me their blessing",
    "start": "1132880",
    "end": "1138640"
  },
  {
    "text": "for this talk um is an extremely helpful person so i would highly recommend that you try",
    "start": "1138640",
    "end": "1144799"
  },
  {
    "text": "this out they also have a sister library called bread and butter",
    "start": "1144799",
    "end": "1150240"
  },
  {
    "text": "the naming is just incredible uh you should totally check that out if you're interested",
    "start": "1150240",
    "end": "1156320"
  },
  {
    "text": "with that said um there are excellent parsers libraries out there for any main",
    "start": "1156320",
    "end": "1161919"
  },
  {
    "text": "mainstream languages so you will have no problem finding your favorite okay so",
    "start": "1161919",
    "end": "1166960"
  },
  {
    "text": "this it's just for a good demo today",
    "start": "1166960",
    "end": "1171279"
  },
  {
    "text": "without further ado again uh we're gonna jump right in um",
    "start": "1172400",
    "end": "1179840"
  },
  {
    "text": "want to go to this up you know this parses file um before we do that of course we uh we're going to",
    "start": "1182240",
    "end": "1188480"
  },
  {
    "text": "reuse the same test suite okay so i'm going to import the same function from",
    "start": "1188480",
    "end": "1195520"
  },
  {
    "text": "the parser file and just to show you that i'm not lying that all the tests are you know failing",
    "start": "1195840",
    "end": "1201760"
  },
  {
    "text": "again and then pass a function",
    "start": "1201760",
    "end": "1207840"
  },
  {
    "text": "well we have this url parser that's not quite defined and um",
    "start": "1207840",
    "end": "1213520"
  },
  {
    "text": "currently it's returning a empty mode object so you should be failing all the",
    "start": "1213520",
    "end": "1219440"
  },
  {
    "text": "test cases positive test cases excuse me and if you look at you know just the",
    "start": "1219440",
    "end": "1224640"
  },
  {
    "text": "first impression how pauses work you run the password against the url here",
    "start": "1224640",
    "end": "1230960"
  },
  {
    "text": "if it's successful we return the value from the result otherwise we return now okay hopefully that's a very simple",
    "start": "1231039",
    "end": "1237919"
  },
  {
    "text": "thing to understand okay um again the nerve um",
    "start": "1237919",
    "end": "1243840"
  },
  {
    "text": "wrecking part i'm gonna create a url parser um live coding oh my",
    "start": "1243840",
    "end": "1248960"
  },
  {
    "text": "god i get myself into um i'm gonna i'm gonna be uh very uh",
    "start": "1248960",
    "end": "1254880"
  },
  {
    "text": "declarative because i like declarative programming what do i do um i will start",
    "start": "1254880",
    "end": "1261440"
  },
  {
    "text": "from top and go to the bottom um you know just get a load of the syntax",
    "start": "1261440",
    "end": "1268000"
  },
  {
    "text": "okay i think the url parser being our schema there are three alternatives",
    "start": "1268000",
    "end": "1274799"
  },
  {
    "text": "there is clone i'll start with the most specific one along with an id and a clone string okay",
    "start": "1274799",
    "end": "1280720"
  },
  {
    "text": "and there is edit and there is create how does that sound",
    "start": "1280720",
    "end": "1287200"
  },
  {
    "text": "i hope that's um that makes sense so that we now do need to um create the",
    "start": "1287200",
    "end": "1293440"
  },
  {
    "text": "uh the three parses okay so clone edit create there actually uh",
    "start": "1293440",
    "end": "1299280"
  },
  {
    "text": "pauses within pauses okay so easily i'm gonna create a create parser",
    "start": "1299280",
    "end": "1305600"
  },
  {
    "text": "well um if we um if i remember well the create parser is",
    "start": "1305600",
    "end": "1311120"
  },
  {
    "text": "simply this okay it's just this string with slash book okay",
    "start": "1311120",
    "end": "1319919"
  },
  {
    "text": "well it's not gonna make the test run but i'm gonna go on to create the edit",
    "start": "1319919",
    "end": "1326880"
  },
  {
    "text": "parser which will be if i can type well i think it would be create actually",
    "start": "1326880",
    "end": "1333760"
  },
  {
    "text": "followed by",
    "start": "1333760",
    "end": "1336559"
  },
  {
    "text": "a slash so i'm going to say it's followed by",
    "start": "1339679",
    "end": "1344880"
  },
  {
    "text": "a slash in this way and then followed by a book id",
    "start": "1344880",
    "end": "1350880"
  },
  {
    "text": "and again i'm going to be declaration i'll just create one called book id and now of course",
    "start": "1350880",
    "end": "1358159"
  },
  {
    "text": "mind you i have to create a book id parser see they're all parsers so we're getting a load of part with",
    "start": "1358159",
    "end": "1365440"
  },
  {
    "text": "what is a book id i think is a digit now the syntax might be a bit foreign",
    "start": "1365440",
    "end": "1370640"
  },
  {
    "text": "but hopefully if you calm down you can understand it it's at least one digit right we don't",
    "start": "1370640",
    "end": "1377280"
  },
  {
    "text": "want to uh get an empty string um and then i am going to join all the digi",
    "start": "1377280",
    "end": "1383200"
  },
  {
    "text": "together because you know all the keys will come in as an array so",
    "start": "1383200",
    "end": "1389120"
  },
  {
    "text": "a bit of javascript will join the array of digits into one book id hopefully that makes sense",
    "start": "1389120",
    "end": "1397840"
  },
  {
    "text": "and we have one last thing to define of course the clone parser will be",
    "start": "1397840",
    "end": "1405039"
  },
  {
    "text": "the edit parser followed by slash clone right so",
    "start": "1405039",
    "end": "1410400"
  },
  {
    "text": "i'm going to use another thing called skip followed by string of",
    "start": "1410400",
    "end": "1418158"
  },
  {
    "text": "clone does that compile it doesn't of course um because",
    "start": "1418400",
    "end": "1424159"
  },
  {
    "text": "typescript is going to tell us the types don't match so i like the passes created but i do have",
    "start": "1424159",
    "end": "1431360"
  },
  {
    "text": "to do a mapping just so that i know",
    "start": "1431360",
    "end": "1438559"
  },
  {
    "text": "that clone and edit pauses will give me the id we'll figure that out later if",
    "start": "1438559",
    "end": "1444640"
  },
  {
    "text": "you think this is confusing but if i take the id i can create an object",
    "start": "1444640",
    "end": "1451520"
  },
  {
    "text": "with the id and the mode the mode will be cloned here",
    "start": "1451520",
    "end": "1457480"
  },
  {
    "text": "and the same happens to edit just so that i know that id will be the",
    "start": "1458080",
    "end": "1464159"
  },
  {
    "text": "result of the edit parser and the mode here will be edit",
    "start": "1464159",
    "end": "1469840"
  },
  {
    "text": "that allows the auto completion and the create thing it's most simplest",
    "start": "1469840",
    "end": "1477520"
  },
  {
    "text": "i don't really care about you know what's the result of the parser because",
    "start": "1477520",
    "end": "1483760"
  },
  {
    "text": "you know uh we don't need an id so i am just easily going to give it a mode create",
    "start": "1483760",
    "end": "1492158"
  },
  {
    "text": "yes it all works together was on a roll um now let's take just one",
    "start": "1494720",
    "end": "1502159"
  },
  {
    "text": "few seconds to look at this i hope this declarative way of making a partner",
    "start": "1502159",
    "end": "1508960"
  },
  {
    "text": "makes sense to you we're simply saying",
    "start": "1508960",
    "end": "1514559"
  },
  {
    "text": "the url is either create edit or clone and",
    "start": "1514559",
    "end": "1520080"
  },
  {
    "text": "how are they created they're actually created iteratively",
    "start": "1520080",
    "end": "1525440"
  },
  {
    "text": "in terms of each other",
    "start": "1525440",
    "end": "1529240"
  },
  {
    "text": "okay any questions at this moment",
    "start": "1531120",
    "end": "1535919"
  },
  {
    "text": "okay comfortable silence i'm okay with that",
    "start": "1538640",
    "end": "1543320"
  },
  {
    "text": "that is just to get us a taste of um personal and parsers in general okay so i'm quite sure you have questions if",
    "start": "1546240",
    "end": "1553760"
  },
  {
    "text": "this is new to you but you know we'll get to it later",
    "start": "1553760",
    "end": "1559440"
  },
  {
    "text": "um so far for our example it would seem that parsers do about the same thing as",
    "start": "1559840",
    "end": "1565760"
  },
  {
    "text": "red x um and given the context we have i think is a fair thing to say because they're",
    "start": "1565760",
    "end": "1571760"
  },
  {
    "text": "solving the same task at this moment um but even without going further",
    "start": "1571760",
    "end": "1578799"
  },
  {
    "text": "we can see there are a few differences well first of all quite obviously",
    "start": "1578799",
    "end": "1585600"
  },
  {
    "text": "puzzles are more explicit we're writing more code but hopefully",
    "start": "1585600",
    "end": "1590799"
  },
  {
    "text": "they're less cryptic secondly if this less obvious",
    "start": "1590799",
    "end": "1598559"
  },
  {
    "text": "but using parsers kind of require a different flow",
    "start": "1598559",
    "end": "1603600"
  },
  {
    "text": "now what i mean by that with regular expressions usually three",
    "start": "1603600",
    "end": "1609520"
  },
  {
    "text": "steps so we match a regex pattern against the string",
    "start": "1609520",
    "end": "1614880"
  },
  {
    "text": "if it's successful we extract the capturing groups",
    "start": "1614880",
    "end": "1620159"
  },
  {
    "text": "out of the match and then we build the mode out of the captures",
    "start": "1620159",
    "end": "1626960"
  },
  {
    "text": "i've got sometimes you just need to match right sometimes you don't really want to build something out of it but",
    "start": "1626960",
    "end": "1633520"
  },
  {
    "text": "this would be um a pretty general summary of the workflow with parsers it's slightly different",
    "start": "1633520",
    "end": "1641120"
  },
  {
    "text": "as you can see we um select or skip data conditionally",
    "start": "1641120",
    "end": "1646640"
  },
  {
    "text": "so the terms value the functions that i use you know the then function skip function",
    "start": "1646640",
    "end": "1651760"
  },
  {
    "text": "they they conditionally ignore or capture something and then we build",
    "start": "1651760",
    "end": "1658720"
  },
  {
    "text": "the mode um object the result on the fly but piece by piece see we have",
    "start": "1658720",
    "end": "1664799"
  },
  {
    "text": "ids and then we ignore some data eventually build the mode object",
    "start": "1664799",
    "end": "1670799"
  },
  {
    "text": "and also kind of strange parsers they're just functions",
    "start": "1670799",
    "end": "1676320"
  },
  {
    "text": "um so we must apply the puzzle in the end to get the result",
    "start": "1676320",
    "end": "1683320"
  },
  {
    "text": "of course pauses are so much more than what we just sing but before we go any further let's make a brief um but more",
    "start": "1685200",
    "end": "1691919"
  },
  {
    "text": "proper introduction so what are parsers exactly",
    "start": "1691919",
    "end": "1697600"
  },
  {
    "text": "well it's you know a good source of truth uh wikipedia is where i usually go to",
    "start": "1697600",
    "end": "1703360"
  },
  {
    "text": "my first attempt but like many you know technical terms",
    "start": "1703360",
    "end": "1709200"
  },
  {
    "text": "pages this is quite dense and um you know i try really hard but i think i can pick",
    "start": "1709200",
    "end": "1716240"
  },
  {
    "text": "out a few keywords here um for example parsing",
    "start": "1716240",
    "end": "1721600"
  },
  {
    "text": "it's kind of equivalent to syntactic analysis it's used for natural languages",
    "start": "1721600",
    "end": "1728080"
  },
  {
    "text": "programming languages or data structures it's also",
    "start": "1728080",
    "end": "1733440"
  },
  {
    "text": "an essential part of making compilers for programming languages",
    "start": "1733440",
    "end": "1739840"
  },
  {
    "text": "i must admit that was a bit overwhelming the wikipedia page uh luckily there were great people there who didn't mind you",
    "start": "1741919",
    "end": "1748159"
  },
  {
    "text": "know darming it down for the likes for me um they even made a rhyme for it um",
    "start": "1748159",
    "end": "1754000"
  },
  {
    "text": "although i never found the tune so i guess we'll have to improvise um",
    "start": "1754000",
    "end": "1759679"
  },
  {
    "text": "you know it can be um jingle bell right like a parser falls and there's a function from strings",
    "start": "1759679",
    "end": "1767039"
  },
  {
    "text": "um yeah i mean i practiced for weeks um that's the highlight of ndc sydney right",
    "start": "1767039",
    "end": "1773760"
  },
  {
    "text": "no doubt does anybody want to try a rep version um any challenges no",
    "start": "1773760",
    "end": "1781279"
  },
  {
    "text": "your loss um [Music] my version is still the best um but you know feel free to post your",
    "start": "1781279",
    "end": "1788480"
  },
  {
    "text": "uh video in this live channel if you do want to try",
    "start": "1788480",
    "end": "1793480"
  },
  {
    "text": "if i'm allowed to uh oversimplify grossly so um oversimplify",
    "start": "1794320",
    "end": "1799360"
  },
  {
    "text": "it even further a parser is just a function that turns a string into a thing",
    "start": "1799360",
    "end": "1805039"
  },
  {
    "text": "remember the rhyme the parts are all things i'll keep saying this until you get so bored um",
    "start": "1805039",
    "end": "1812480"
  },
  {
    "text": "so it just turns the string into a thing and it's a function okay",
    "start": "1812480",
    "end": "1818159"
  },
  {
    "text": "but how is it done well puzzles are kind of like uh cute crocodiles and look at it",
    "start": "1818159",
    "end": "1825120"
  },
  {
    "text": "um this cute crocodile would eat the string part by part",
    "start": "1825120",
    "end": "1831679"
  },
  {
    "text": "if it likes the part then it spits out a small thing",
    "start": "1831679",
    "end": "1837279"
  },
  {
    "text": "if you don't it would stop the whole job and then it keeps eating it keeps",
    "start": "1837279",
    "end": "1843760"
  },
  {
    "text": "spitting out more and more small things on the fly and then the final big thing it's built",
    "start": "1843760",
    "end": "1850159"
  },
  {
    "text": "by putting all these small things together if the crocodile you know gets to the end",
    "start": "1850159",
    "end": "1857840"
  },
  {
    "text": "so why crocodile people say um well it's because i've seen the video of two all mates uh bossing a crocodile about have",
    "start": "1858480",
    "end": "1866159"
  },
  {
    "text": "you seen that video um you're a nuisance stay put um i never",
    "start": "1866159",
    "end": "1871440"
  },
  {
    "text": "like uh crocodile cartoons you know i never thought they're cute i mean they're gonna kill you right",
    "start": "1871440",
    "end": "1878000"
  },
  {
    "text": "until i saw this video and then i was like whoa okay now i got it they're cute to the aussies",
    "start": "1878000",
    "end": "1885919"
  },
  {
    "text": "okay enough theory and crocodiles um let's look at some solid example",
    "start": "1886240",
    "end": "1892159"
  },
  {
    "text": "um see we have the string that apparently is an addition right it adds two numbers together and we want to",
    "start": "1892159",
    "end": "1899279"
  },
  {
    "text": "pause it evaluate it and get the results of the addition",
    "start": "1899279",
    "end": "1905120"
  },
  {
    "text": "now how is it done with pauses",
    "start": "1905120",
    "end": "1909279"
  },
  {
    "text": "well actually we're not quite done with the cute crocodiles and you know",
    "start": "1910720",
    "end": "1915840"
  },
  {
    "text": "yeah it's going to be a good meal digitallicious that's what",
    "start": "1915840",
    "end": "1920880"
  },
  {
    "text": "uh you can see the crocodile takes uh four steps to uh to get to the end",
    "start": "1920880",
    "end": "1926880"
  },
  {
    "text": "well first of all it eats two digits and spits out 12",
    "start": "1926880",
    "end": "1932799"
  },
  {
    "text": "and then it keeps eating and eats the plus sign and it's going to spit out a addition",
    "start": "1932799",
    "end": "1940320"
  },
  {
    "text": "function called operation and thirdly is going to keep eating and eat the last",
    "start": "1940320",
    "end": "1947840"
  },
  {
    "text": "two digits and spit out another number and eventually it's going to apply",
    "start": "1947840",
    "end": "1954960"
  },
  {
    "text": "the addition operation to the two numbers that we get from the result",
    "start": "1954960",
    "end": "1962000"
  },
  {
    "text": "that's the result right oh uh more live coding i hope you're ready for that well actually more",
    "start": "1962000",
    "end": "1968320"
  },
  {
    "text": "like copy pasting because i don't think we have um enough time for me to do that um it's a",
    "start": "1968320",
    "end": "1974640"
  },
  {
    "text": "slow typist i am we're going to create this is where we",
    "start": "1974640",
    "end": "1979840"
  },
  {
    "text": "create a naive parser from scratch okay if you're ready i hope you remember you",
    "start": "1979840",
    "end": "1986559"
  },
  {
    "text": "know 12 plus 34 we want to sew that with a naive parser that we're going to build",
    "start": "1986559",
    "end": "1993039"
  },
  {
    "text": "right a daunting task all right we're going to build something magical from scratch well first um",
    "start": "1993039",
    "end": "1998720"
  },
  {
    "text": "we're quite type driven actually so we're going to start with declaring a couple of types the result for the",
    "start": "1998720",
    "end": "2004159"
  },
  {
    "text": "parser which has a value and the rest of the string remember it eats it part by part so there would",
    "start": "2004159",
    "end": "2010480"
  },
  {
    "text": "be the rest and then we have a parser which is a function remember it's",
    "start": "2010480",
    "end": "2016320"
  },
  {
    "text": "a puzzle of things is a function from the string to results okay and then we have the symbols",
    "start": "2016320",
    "end": "2022159"
  },
  {
    "text": "i thought we have another thing which is just a simple function that you know either adds or you know",
    "start": "2022159",
    "end": "2029600"
  },
  {
    "text": "or multiply two numbers together i hope that makes sense",
    "start": "2030399",
    "end": "2036080"
  },
  {
    "text": "we're going to list out all the you know possible digits very explicit",
    "start": "2036080",
    "end": "2041519"
  },
  {
    "text": "all the symbol characters also create a simple helper function",
    "start": "2041519",
    "end": "2047120"
  },
  {
    "text": "here that converts a symbol to a function that either adds subtracts or multiplies",
    "start": "2047120",
    "end": "2056000"
  },
  {
    "text": "i hope that makes sense okay here comes the exciting part",
    "start": "2056079",
    "end": "2061919"
  },
  {
    "text": "this is how a parser is really built this is the most basic powder remember",
    "start": "2061919",
    "end": "2069358"
  },
  {
    "text": "the crocodile is going to eat a string part by part but really it does that one",
    "start": "2069359",
    "end": "2076560"
  },
  {
    "text": "character at a time the parts is just a function remember",
    "start": "2076560",
    "end": "2082398"
  },
  {
    "text": "it's rhyme and if you look at the implementation of this this char parser it's very simple right",
    "start": "2082399",
    "end": "2090079"
  },
  {
    "text": "it says the raw string it's empty or now we'll fail immediately otherwise",
    "start": "2090079",
    "end": "2096560"
  },
  {
    "text": "you want to take the first character and return and you know keep the rest",
    "start": "2096560",
    "end": "2103119"
  },
  {
    "text": "does that make sense questions feel free to ask",
    "start": "2103119",
    "end": "2109119"
  },
  {
    "text": "we're going to slowly move on to this strange parser this is also a parser",
    "start": "2109119",
    "end": "2115200"
  },
  {
    "text": "called satisfies and it takes two parameters okay one is",
    "start": "2115200",
    "end": "2120880"
  },
  {
    "text": "a parser itself we call parser one there's also a predicate all it does is to intercept the result",
    "start": "2120880",
    "end": "2128000"
  },
  {
    "text": "of parser one and only return the result if it satisfies the predicate",
    "start": "2128000",
    "end": "2134960"
  },
  {
    "text": "as you can see the implementation that does exactly that but there is this recursive pattern you know if the result",
    "start": "2134960",
    "end": "2141599"
  },
  {
    "text": "is already null don't do anything just return on hope that makes sense",
    "start": "2141599",
    "end": "2147280"
  },
  {
    "text": "you have to get used to functions within functions but that's you know that's what the rhyme tells us",
    "start": "2147280",
    "end": "2155040"
  },
  {
    "text": "okay there is this mainly parser that takes one parser and keeps applying this parser one until",
    "start": "2157440",
    "end": "2164240"
  },
  {
    "text": "it fails and puts all the good results before it fails into an array",
    "start": "2164240",
    "end": "2170079"
  },
  {
    "text": "you can see there is a bit of recursion here and it keeps going to next but you can see the pattern here results",
    "start": "2170079",
    "end": "2176240"
  },
  {
    "text": "now then return immediately okay it keeps adding to the array",
    "start": "2176240",
    "end": "2183040"
  },
  {
    "text": "many and then we have a map function hopefully we're very um",
    "start": "2183040",
    "end": "2190079"
  },
  {
    "text": "familiar with the concept list what it does is to take the result of",
    "start": "2190079",
    "end": "2195440"
  },
  {
    "text": "parser one and convert it from type t to type u",
    "start": "2195440",
    "end": "2201200"
  },
  {
    "text": "so it's just like map for a array or a list as you can see the implementation does",
    "start": "2201200",
    "end": "2207119"
  },
  {
    "text": "exactly that okay these are actually the fundamental bits",
    "start": "2207119",
    "end": "2214079"
  },
  {
    "text": "or at least just the bits that we need now comes the real exciting part we're",
    "start": "2214079",
    "end": "2219920"
  },
  {
    "text": "going to compose these building blocks there are only about four or five of them aren't they",
    "start": "2219920",
    "end": "2225440"
  },
  {
    "text": "we say digit as a parser it's just a char parser that satisfies",
    "start": "2225440",
    "end": "2231920"
  },
  {
    "text": "this condition that its result is in these characters you see",
    "start": "2231920",
    "end": "2237680"
  },
  {
    "text": "makes sense slowly we're going to move on to the plural",
    "start": "2237680",
    "end": "2243200"
  },
  {
    "text": "form of digi it still satisfies but this it's saying",
    "start": "2243200",
    "end": "2249280"
  },
  {
    "text": "digits is many digit",
    "start": "2249280",
    "end": "2254640"
  },
  {
    "text": "with at least one digit in it okay",
    "start": "2255359",
    "end": "2260880"
  },
  {
    "text": "so this would be a array of string what's a number parser i hope you're",
    "start": "2260880",
    "end": "2267520"
  },
  {
    "text": "slowly getting bored with this repetition but that's good because you're getting the idea so the number parser it's the digits",
    "start": "2267520",
    "end": "2275040"
  },
  {
    "text": "parser mapped to a number remember digits parser it's",
    "start": "2275040",
    "end": "2280079"
  },
  {
    "text": "parser that returns a string array okay what's the symbol parser it's just a",
    "start": "2280079",
    "end": "2287119"
  },
  {
    "text": "character that satisfies this condition i hope you do feel the boredom we're",
    "start": "2287119",
    "end": "2293119"
  },
  {
    "text": "getting very repetitive which is great the operation parser it's just a symbol",
    "start": "2293119",
    "end": "2298960"
  },
  {
    "text": "parser that's getting converted into a operation function",
    "start": "2298960",
    "end": "2305599"
  },
  {
    "text": "easy as and we get to the evaluate function",
    "start": "2305599",
    "end": "2310720"
  },
  {
    "text": "there's a lot of code i regret but the idea is very um the idea is very straightforward hopefully",
    "start": "2310720",
    "end": "2317200"
  },
  {
    "text": "it tries to match it tries to eat a number right and then it tries to eat the opera operation then",
    "start": "2317200",
    "end": "2324400"
  },
  {
    "text": "it tries to get another number if all successful easy",
    "start": "2324400",
    "end": "2329760"
  },
  {
    "text": "we're going to apply the result of operation parser which would be a function",
    "start": "2329760",
    "end": "2335119"
  },
  {
    "text": "and apply that to two numbers now would this work well as well",
    "start": "2335119",
    "end": "2340880"
  },
  {
    "text": "behaving software developers we have another test suite and plenty of test cases now if my um",
    "start": "2340880",
    "end": "2347119"
  },
  {
    "text": "arithmetics still works i hope this was also correct otherwise we have a big problem but let's run this",
    "start": "2347119",
    "end": "2353920"
  },
  {
    "text": "test lead",
    "start": "2353920",
    "end": "2356400"
  },
  {
    "text": "and right oh they do work so you believe it we take about like 10",
    "start": "2359119",
    "end": "2365440"
  },
  {
    "text": "minutes and we created a parser from scratch",
    "start": "2365440",
    "end": "2369839"
  },
  {
    "text": "how do you feel",
    "start": "2371359",
    "end": "2374000"
  },
  {
    "text": "okay is the time to ask questions okay um but",
    "start": "2376800",
    "end": "2382079"
  },
  {
    "text": "hopefully everybody's getting the idea if not the dating",
    "start": "2382079",
    "end": "2387838"
  },
  {
    "text": "well we implemented a positive is there a question yeah just a question uh",
    "start": "2391119",
    "end": "2398320"
  },
  {
    "text": "in terms of performance uh how how are parts are performing",
    "start": "2398320",
    "end": "2403359"
  },
  {
    "text": "compared to rejects that is a great question um i will get to it later if you don't mind",
    "start": "2403359",
    "end": "2411839"
  },
  {
    "text": "sure another problem i promise um thank you good question",
    "start": "2412319",
    "end": "2417520"
  },
  {
    "text": "i love it um well we just created a positive from",
    "start": "2417520",
    "end": "2423359"
  },
  {
    "text": "scratch right which is great but of course in real life you possibly don't have to",
    "start": "2423359",
    "end": "2428880"
  },
  {
    "text": "write your own parses unless you're really obsessed which i know some of us must be",
    "start": "2428880",
    "end": "2434880"
  },
  {
    "text": "it's so easy right you just gotta do it developers",
    "start": "2434880",
    "end": "2440000"
  },
  {
    "text": "but sometimes we just use a library they're you know quite well made well maintained proven",
    "start": "2440000",
    "end": "2446000"
  },
  {
    "text": "um we do use a library like passimon there are terms that we use regularly to",
    "start": "2446000",
    "end": "2453119"
  },
  {
    "text": "get most jobs done so you can see um there is",
    "start": "2453119",
    "end": "2458319"
  },
  {
    "text": "in a sec for sequencing a few passes there is alt or choosing from",
    "start": "2458319",
    "end": "2463440"
  },
  {
    "text": "alternatives there is map thing there is many and at least to handle",
    "start": "2463440",
    "end": "2470160"
  },
  {
    "text": "repetitions there is off and succeed they they just succeed without consuming any",
    "start": "2470160",
    "end": "2477200"
  },
  {
    "text": "characters there is also um panzer dot regex",
    "start": "2477200",
    "end": "2482720"
  },
  {
    "text": "i told you i was kidding i still need regex um but not all parties use regex you've",
    "start": "2482720",
    "end": "2488800"
  },
  {
    "text": "seen that but they're not mutually exclusive and there is also skip and then um",
    "start": "2488800",
    "end": "2495839"
  },
  {
    "text": "they just conditionally capture or ignore things they're like special maps",
    "start": "2495839",
    "end": "2501920"
  },
  {
    "text": "hope that all makes sense um again if you use another parser library",
    "start": "2503359",
    "end": "2508640"
  },
  {
    "text": "there are so many good ones out there the terms would be slightly different",
    "start": "2508640",
    "end": "2513920"
  },
  {
    "text": "but the hopefully would be quite similar",
    "start": "2513920",
    "end": "2520440"
  },
  {
    "text": "okay um well we've done actually uh done the live coding but",
    "start": "2526560",
    "end": "2532720"
  },
  {
    "text": "there's something else i want to do we're gonna go back to the url um",
    "start": "2532720",
    "end": "2538400"
  },
  {
    "text": "examples say one day um",
    "start": "2538400",
    "end": "2543839"
  },
  {
    "text": "you know we decided that integers are not really good they're not really the best option for",
    "start": "2543839",
    "end": "2550160"
  },
  {
    "text": "um book ids have you come across this we want to switch to",
    "start": "2550160",
    "end": "2556079"
  },
  {
    "text": "guides but um before i show you any code i want you to",
    "start": "2556079",
    "end": "2562560"
  },
  {
    "text": "take a few seconds think about how you would use regex to match this",
    "start": "2562560",
    "end": "2567839"
  },
  {
    "text": "you know this guitar string that's on the slide",
    "start": "2567839",
    "end": "2574079"
  },
  {
    "text": "now also remember anything will be more code than regex",
    "start": "2574079",
    "end": "2580559"
  },
  {
    "text": "because regex just you know so dense but arguably many other options are more clearer",
    "start": "2580720",
    "end": "2588000"
  },
  {
    "text": "and the key points of this is that i want to show you pauses are very easy to compose",
    "start": "2588000",
    "end": "2595119"
  },
  {
    "text": "okay so the solution hopefully you'll see um",
    "start": "2595119",
    "end": "2600880"
  },
  {
    "text": "is quite simple in my opinion",
    "start": "2600880",
    "end": "2604920"
  },
  {
    "text": "we're going to reuse the same um",
    "start": "2606000",
    "end": "2611440"
  },
  {
    "text": "url parser but here we're going to use instead of book id with digits we are",
    "start": "2611520",
    "end": "2617200"
  },
  {
    "text": "going to change it we're going to use something called good",
    "start": "2617200",
    "end": "2623119"
  },
  {
    "text": "okay so good is actually um a parser which i've defined here i'll",
    "start": "2623119",
    "end": "2628960"
  },
  {
    "text": "drill into it for your benefit but also i am going to run",
    "start": "2628960",
    "end": "2635839"
  },
  {
    "text": "well-behaving software developers we need some um",
    "start": "2635839",
    "end": "2641760"
  },
  {
    "text": "test cases so i'm going to run that",
    "start": "2641760",
    "end": "2649480"
  },
  {
    "text": "of course or passes if you look at them",
    "start": "2651040",
    "end": "2654880"
  },
  {
    "text": "what is the magic i hope this is straightforward to you i",
    "start": "2656079",
    "end": "2662319"
  },
  {
    "text": "think i like this uh good parser it just reads out perfectly doesn't it",
    "start": "2662319",
    "end": "2670000"
  },
  {
    "text": "a parser very good dictates that the structure of gui it's",
    "start": "2670000",
    "end": "2675280"
  },
  {
    "text": "eight hex characters followed by dash and four followed by dash then four four",
    "start": "2675280",
    "end": "2681200"
  },
  {
    "text": "and twelve eventually we joined them together",
    "start": "2681200",
    "end": "2685838"
  },
  {
    "text": "does this make sense now just a quick comparison",
    "start": "2687119",
    "end": "2693040"
  },
  {
    "text": "this is what we will get with a regular expression",
    "start": "2693040",
    "end": "2698480"
  },
  {
    "text": "noticeably it's not the regular expression but personally i think um i like this a bit",
    "start": "2699359",
    "end": "2704880"
  },
  {
    "text": "better of course um i would have to show you that hex it's a helpful function that",
    "start": "2704880",
    "end": "2711119"
  },
  {
    "text": "takes a length and it's the hex character parser which is",
    "start": "2711119",
    "end": "2717839"
  },
  {
    "text": "defined here so many times enjoying the result together as a string",
    "start": "2717839",
    "end": "2724319"
  },
  {
    "text": "but you can see we're being very explicit here if you're using um",
    "start": "2724319",
    "end": "2731440"
  },
  {
    "text": "pass among a good partner library because there are more succinct ways to do that",
    "start": "2731440",
    "end": "2736560"
  },
  {
    "text": "but here i'd like to be more explicit let's take another look at this beauty",
    "start": "2736560",
    "end": "2742560"
  },
  {
    "text": "don't you just love that",
    "start": "2742560",
    "end": "2746359"
  },
  {
    "text": "what i forgot to show you actually um is that i was going to implement the calculator calculator in um",
    "start": "2748640",
    "end": "2757359"
  },
  {
    "text": "with parsimony as well let's quickly go over that if you excuse me um as you can see the types are quite",
    "start": "2757359",
    "end": "2763359"
  },
  {
    "text": "similar you also have the same converter function that converts symbols",
    "start": "2763359",
    "end": "2768480"
  },
  {
    "text": "to two small functions hopefully that's quite straightforward",
    "start": "2768480",
    "end": "2775599"
  },
  {
    "text": "what about number well it's many digits remember at least one digit",
    "start": "2775599",
    "end": "2781760"
  },
  {
    "text": "and then we join them together what about operation well it's one of these symbols and then we map it to a",
    "start": "2781760",
    "end": "2787839"
  },
  {
    "text": "function i'm going to go this lower what about arithmetic",
    "start": "2787839",
    "end": "2793680"
  },
  {
    "text": "well it's just a sequence of number then operation",
    "start": "2793680",
    "end": "2799200"
  },
  {
    "text": "then a number and then take two numbers with a symbol with the front the operation function in",
    "start": "2799200",
    "end": "2805119"
  },
  {
    "text": "between i apply this operation function and how do we calculate it hopefully",
    "start": "2805119",
    "end": "2811359"
  },
  {
    "text": "you've seen this a lot of times we use the arithmetic parser to pass the",
    "start": "2811359",
    "end": "2816640"
  },
  {
    "text": "raw string if it's successful we return it otherwise we'll return now",
    "start": "2816640",
    "end": "2824640"
  },
  {
    "text": "so a bit back and forth sorry about that but hopefully this makes sense to you",
    "start": "2825280",
    "end": "2832800"
  },
  {
    "text": "this is the good that we just covered",
    "start": "2835920",
    "end": "2840000"
  },
  {
    "text": "now i know some of us will think well that's nice you know but i can also do that with the red x if i stretched it",
    "start": "2840960",
    "end": "2846880"
  },
  {
    "text": "just a little what's the big fast with pizzas right um",
    "start": "2846880",
    "end": "2852240"
  },
  {
    "text": "well there is much much more uh two parsers um remember it's used to make programming",
    "start": "2852240",
    "end": "2858880"
  },
  {
    "text": "languages um so it can get quite complex",
    "start": "2858880",
    "end": "2863680"
  },
  {
    "text": "but without getting to very advanced case studies here is an example that you",
    "start": "2864319",
    "end": "2871839"
  },
  {
    "text": "will very possibly run into if you're lucky or unlucky",
    "start": "2871839",
    "end": "2877280"
  },
  {
    "text": "depending on your perspective of course this is some sort of um oh somebody should have told me sorry um",
    "start": "2877280",
    "end": "2885440"
  },
  {
    "text": "my fault this is the recursive syntax that um i personally rang into in in real life",
    "start": "2885440",
    "end": "2893760"
  },
  {
    "text": "it's possibly kind of like json but not quite easy it's from a time when",
    "start": "2893839",
    "end": "2901119"
  },
  {
    "text": "there's no standardization and people just had a blast inventing their wrongs",
    "start": "2901119",
    "end": "2906640"
  },
  {
    "text": "and you know and then a couple of weeks later other developers had to suffer from their genius",
    "start": "2906640",
    "end": "2913520"
  },
  {
    "text": "um yeah perfect example of that so it's also saved in the database as a",
    "start": "2913520",
    "end": "2920720"
  },
  {
    "text": "it's a text field so i had to pause it and get information out of it",
    "start": "2920720",
    "end": "2926160"
  },
  {
    "text": "how's that now this is something that would be",
    "start": "2926160",
    "end": "2933200"
  },
  {
    "text": "impossible if not very difficult for the expressions because it's a regular language",
    "start": "2933200",
    "end": "2940559"
  },
  {
    "text": "although i'm aware there are very powerful regular expression engines out there so i would rather not say never",
    "start": "2940559",
    "end": "2948400"
  },
  {
    "text": "but you know um for my experience this would be quite difficult and this is where i would really need a",
    "start": "2948400",
    "end": "2956079"
  },
  {
    "text": "parser and on that note let's bring in",
    "start": "2956079",
    "end": "2962240"
  },
  {
    "text": "baby okay first of all",
    "start": "2962240",
    "end": "2967119"
  },
  {
    "text": "we call this data structure we call it angle okay because of the angle brackets now this is a valid angle",
    "start": "2968800",
    "end": "2976400"
  },
  {
    "text": "object 20y it's also a valid one",
    "start": "2976400",
    "end": "2981839"
  },
  {
    "text": "just one single value and a string it's also a valid angle okay",
    "start": "2981839",
    "end": "2988640"
  },
  {
    "text": "now we define the types here and i want you to mind the recursion okay with typescript don't you love it",
    "start": "2988640",
    "end": "2994880"
  },
  {
    "text": "so an angle data structure is either a number or a string",
    "start": "2994880",
    "end": "3001359"
  },
  {
    "text": "or a array of entries or the array of entries for each entry",
    "start": "3001359",
    "end": "3007440"
  },
  {
    "text": "it's a key value pair but the value itself can be an angle see there's a bit",
    "start": "3007440",
    "end": "3013040"
  },
  {
    "text": "of recursion okay we also have a helper function that",
    "start": "3013040",
    "end": "3019680"
  },
  {
    "text": "converts a angle object to a javascript object recursively okay so",
    "start": "3019680",
    "end": "3025599"
  },
  {
    "text": "this can be a bit dense but it just goes through the whole array and deal stands and here you can see",
    "start": "3025599",
    "end": "3032640"
  },
  {
    "text": "it's calling itself",
    "start": "3032640",
    "end": "3035920"
  },
  {
    "text": "okay so how do we get this um how do we pass this um you know nasty angle of uh angle string",
    "start": "3038960",
    "end": "3046960"
  },
  {
    "text": "well first we bring on an old friend the number i hope you are very familiar with this",
    "start": "3046960",
    "end": "3052720"
  },
  {
    "text": "now see there are patterns that you would come across very quickly",
    "start": "3052720",
    "end": "3058319"
  },
  {
    "text": "when you start using parsers there is this quote thing",
    "start": "3058319",
    "end": "3063440"
  },
  {
    "text": "see i'm being very explicit i just define a small parser for everything i'm having a blast",
    "start": "3063440",
    "end": "3069838"
  },
  {
    "text": "and there's quoted string which has this parser that you know keeps taking keeps",
    "start": "3070000",
    "end": "3076480"
  },
  {
    "text": "eating characters until another quote is met so",
    "start": "3076480",
    "end": "3082880"
  },
  {
    "text": "a disclaimer this is a very simple um implementation we're not considering",
    "start": "3082880",
    "end": "3088240"
  },
  {
    "text": "escaped quotes um or nasty things like that",
    "start": "3088240",
    "end": "3093280"
  },
  {
    "text": "and um that string will be wrapped in two quotes okay i hope the syntax the fluent syntax is",
    "start": "3093280",
    "end": "3099760"
  },
  {
    "text": "uh self-explanatory so we have quoted strings when the code strings can be a value",
    "start": "3099760",
    "end": "3106319"
  },
  {
    "text": "or the field name okay have a key value pair parser",
    "start": "3106319",
    "end": "3112880"
  },
  {
    "text": "which takes a child parser and builds a key value string here you see",
    "start": "3112880",
    "end": "3118480"
  },
  {
    "text": "we have a quoted string as the field name we have a dot in between then we put the",
    "start": "3118480",
    "end": "3123520"
  },
  {
    "text": "child in there and then with this map thing we ignore the dots",
    "start": "3123520",
    "end": "3130079"
  },
  {
    "text": "in between you see we are we just leave it out because we just need the key and the value but",
    "start": "3130079",
    "end": "3138079"
  },
  {
    "text": "note the charge itself can be a angle parser you see so there's a bit of recursion",
    "start": "3138079",
    "end": "3144720"
  },
  {
    "text": "there now we define the parser for an object",
    "start": "3144720",
    "end": "3151359"
  },
  {
    "text": "again we use the same pattern there's a child we build a key value pair but then we say we want to repeat it and there",
    "start": "3151359",
    "end": "3158480"
  },
  {
    "text": "should be at least one pair so we get many key value pairs",
    "start": "3158480",
    "end": "3166400"
  },
  {
    "text": "which you know that the value of the child could itself be a puzzle so mine's the recursion",
    "start": "3166400",
    "end": "3175200"
  },
  {
    "text": "and then we wrap them we in a couple of uh in a pair of curly brackets not curly",
    "start": "3175200",
    "end": "3180640"
  },
  {
    "text": "sorry angle brackets and then we map it using the helper function we had defined above map it to a javascript object",
    "start": "3180640",
    "end": "3189440"
  },
  {
    "text": "i hope that makes sense and we're going to bring it all together",
    "start": "3189440",
    "end": "3198720"
  },
  {
    "text": "what is an angle parser and go parser it's a lazy puzzle okay so lazy is what makes recursion possible",
    "start": "3199440",
    "end": "3207760"
  },
  {
    "text": "and angle as you can see can have three alternatives remember",
    "start": "3207760",
    "end": "3213200"
  },
  {
    "text": "the types you know can be either a number or a string let's quote it but also it can be",
    "start": "3213200",
    "end": "3219760"
  },
  {
    "text": "recursive so angle is defined in terms of itself see that's also",
    "start": "3219760",
    "end": "3225680"
  },
  {
    "text": "something that that's something that's only possible with this lazy function",
    "start": "3225680",
    "end": "3231680"
  },
  {
    "text": "okay how do we do how do we use it well we've seen that so many times i hope again you're getting so bored with this",
    "start": "3231680",
    "end": "3238240"
  },
  {
    "text": "um well we use the positive deposit and if it's successful we turn the value",
    "start": "3238240",
    "end": "3244000"
  },
  {
    "text": "otherwise and does this work again um i don't want you to just take",
    "start": "3244000",
    "end": "3250319"
  },
  {
    "text": "my um words for it oh i don't work it doesn't hurt",
    "start": "3250319",
    "end": "3257440"
  },
  {
    "text": "so all the positive cases negative cases um they just work as expected",
    "start": "3257440",
    "end": "3265480"
  },
  {
    "text": "i'm aware this could be a bit overwhelming if you just new to pauses but i hope you get the idea that you know",
    "start": "3267520",
    "end": "3274000"
  },
  {
    "text": "it's composable and you know you just make small parts and add them together you have a pretty big one like this one",
    "start": "3274000",
    "end": "3281040"
  },
  {
    "text": "here in the end they just bring things together",
    "start": "3281040",
    "end": "3287520"
  },
  {
    "text": "okay just being conscious of time um if i have to make a recommendation um",
    "start": "3290640",
    "end": "3297440"
  },
  {
    "text": "when to use regular expressions well",
    "start": "3297440",
    "end": "3302319"
  },
  {
    "text": "for dynamic string search accepting user input for example you want users to give you a regex and then",
    "start": "3302720",
    "end": "3308960"
  },
  {
    "text": "you can search in your database you know with a regex match but if you do that do watch out for",
    "start": "3308960",
    "end": "3316480"
  },
  {
    "text": "regular expression denial of service there is a all os page that you can read",
    "start": "3316480",
    "end": "3321599"
  },
  {
    "text": "up on well secondly if you want to achieve readability",
    "start": "3321599",
    "end": "3328480"
  },
  {
    "text": "you possibly want to prioritize using regex because well if it's simple why",
    "start": "3328480",
    "end": "3336000"
  },
  {
    "text": "bother with the new library right so go for it if you can achieve readability",
    "start": "3336000",
    "end": "3342079"
  },
  {
    "text": "now uh to answer the question that was previous previously asked sorry about the delay uh maybe for perform",
    "start": "3342079",
    "end": "3349119"
  },
  {
    "text": "well why because some of the redex engines are there they're really well made and they're",
    "start": "3349119",
    "end": "3354480"
  },
  {
    "text": "proven they're battle tested really performant so if performance is a big problem for you",
    "start": "3354480",
    "end": "3361920"
  },
  {
    "text": "then maybe you want to consider regular expressions first however with that said",
    "start": "3361920",
    "end": "3367200"
  },
  {
    "text": "remember there are well-made parsers out there as well",
    "start": "3367200",
    "end": "3372319"
  },
  {
    "text": "with great performance however you might want to assess",
    "start": "3372319",
    "end": "3377599"
  },
  {
    "text": "yourself um if it's really business critical for you um",
    "start": "3377599",
    "end": "3383440"
  },
  {
    "text": "to have it run fast well eventually when you don't have a choice we don't have a choice for example some configuration",
    "start": "3383440",
    "end": "3389520"
  },
  {
    "text": "files would require you to use regex when you don't have you know you can't write code for it you",
    "start": "3389520",
    "end": "3394720"
  },
  {
    "text": "don't have a choice really um well when would i recommend that us",
    "start": "3394720",
    "end": "3401839"
  },
  {
    "text": "using for us to use parses well obviously when something's not",
    "start": "3401839",
    "end": "3406880"
  },
  {
    "text": "simply solvable with string comparison or regular expressions",
    "start": "3406880",
    "end": "3412160"
  },
  {
    "text": "typically when readability is hurt which is you know why we have this talk really um",
    "start": "3412160",
    "end": "3418880"
  },
  {
    "text": "or if you want to take things to the next level for the full power of parsers if you want to deal",
    "start": "3418880",
    "end": "3425040"
  },
  {
    "text": "with custom syntax clever schema they were invented by um you know clever developers before you",
    "start": "3425040",
    "end": "3431760"
  },
  {
    "text": "which is uh unfortunately my case in real life but that was fun as it turned out",
    "start": "3431760",
    "end": "3437119"
  },
  {
    "text": "or if you want to go crazy and create your own language from you know a mini language to a fully",
    "start": "3437119",
    "end": "3442799"
  },
  {
    "text": "fledged language actually if you look at parsimon they actually have a thing that facilitates creating a",
    "start": "3442799",
    "end": "3449920"
  },
  {
    "text": "language for you think about that or simply for fun um",
    "start": "3449920",
    "end": "3455200"
  },
  {
    "text": "parsers are amazing and they're just a joy to work with so um yeah try it out",
    "start": "3455200",
    "end": "3462559"
  },
  {
    "text": "well i hope you didn't fall asleep uh during this long talk it just comes to the time uh if you did fall asleep i",
    "start": "3464960",
    "end": "3470880"
  },
  {
    "text": "hope you slept really well um the co examples will be on",
    "start": "3470880",
    "end": "3475920"
  },
  {
    "text": "my github account so um just search um you know hackl w i guess",
    "start": "3475920",
    "end": "3483119"
  },
  {
    "text": "um and also please reach out anytime if you have any questions i'll hang around",
    "start": "3483119",
    "end": "3488160"
  },
  {
    "text": "the conference but other than that thank you very much everyone",
    "start": "3488160",
    "end": "3494599"
  }
]