[
  {
    "start": "0",
    "end": "176000"
  },
  {
    "text": "Hey good afternoon and welcome to the promise of an async future awaits which",
    "start": "5130",
    "end": "11559"
  },
  {
    "text": "I've gotten kudos for for being the most interesting talk title and I got all the",
    "start": "11559",
    "end": "17410"
  },
  {
    "text": "important keywords in the title or diamond no so the story behind this talk",
    "start": "17410",
    "end": "23470"
  },
  {
    "text": "is C sharp has had a sink and a weight and tasks of tasks of T and this task",
    "start": "23470",
    "end": "28539"
  },
  {
    "text": "based asynchronous programming model since version 5 now I work on the dotnet",
    "start": "28539",
    "end": "34930"
  },
  {
    "text": "docs team and I am primarily responsible for everything related to c-sharp we",
    "start": "34930",
    "end": "40629"
  },
  {
    "text": "thought we had a bit of a problem in terms of we really didn't think",
    "start": "40629",
    "end": "46450"
  },
  {
    "text": "developers understood this model particularly well so we started tracking",
    "start": "46450",
    "end": "52899"
  },
  {
    "text": "issues on that and we made a project on our repo for everything related to a",
    "start": "52899",
    "end": "58059"
  },
  {
    "text": "weight async task task of t continue with when all when any and wait all",
    "start": "58059",
    "end": "65710"
  },
  {
    "text": "weight any and all that I would you started collecting the issues that came in based on articles about those and",
    "start": "65710",
    "end": "71530"
  },
  {
    "text": "based on those concepts this project has more issues than any other sub area of",
    "start": "71530",
    "end": "79210"
  },
  {
    "text": "dotnet that we write about so clearly we",
    "start": "79210",
    "end": "84580"
  },
  {
    "text": "have not explained it extremely well that's where this talk is growing grown",
    "start": "84580",
    "end": "90610"
  },
  {
    "text": "out of is I'm taking all these issues and we're going to redo a lot of the documentation around this concept",
    "start": "90610",
    "end": "96220"
  },
  {
    "text": "because we think we made it harder than it had to be we think the concepts",
    "start": "96220",
    "end": "101260"
  },
  {
    "text": "aren't as hard we think the language itself put some very nice features in play for you to do asynchronous",
    "start": "101260",
    "end": "106990"
  },
  {
    "text": "programming and we've struggled to explain it well and to give a mental model that will work so the arc of this",
    "start": "106990",
    "end": "114490"
  },
  {
    "text": "talk what we're going to do is we're going to imagine something that we do every day or pretty close to everyday",
    "start": "114490",
    "end": "121650"
  },
  {
    "text": "describe it to another human the way we would describe it look at how a computer",
    "start": "121650",
    "end": "127600"
  },
  {
    "text": "would actually execute those steps and point out that that's really isn't what we want then we'll start to talk about",
    "start": "127600",
    "end": "133870"
  },
  {
    "text": "what asynchronous means in terms of how we want to make this work and what would that do to our code",
    "start": "133870",
    "end": "140390"
  },
  {
    "text": "to make it execute the way we want it to be done and yet still be able to",
    "start": "140390",
    "end": "145910"
  },
  {
    "text": "describe it in a way that is crystal clear and then in the last 15 or 20",
    "start": "145910",
    "end": "153200"
  },
  {
    "text": "minutes I'm going to expand on what Mads had talked about yesterday and things that are coming in c-sharp ate and talked about async streams which",
    "start": "153200",
    "end": "160910"
  },
  {
    "text": "takes these concepts and moves them a little bit into the kind of things that we're doing now that have data sources",
    "start": "160910",
    "end": "166280"
  },
  {
    "text": "that are bringing us data from another place and they come in batches and so on",
    "start": "166280",
    "end": "171710"
  },
  {
    "text": "and we want to be able to work with those in a good way so here's the analogy that we're going",
    "start": "171710",
    "end": "177830"
  },
  {
    "start": "176000",
    "end": "406000"
  },
  {
    "text": "to do we're gonna make breakfast which is a task all of us know how to do and",
    "start": "177830",
    "end": "184100"
  },
  {
    "text": "we've described it to others so what are we going to do I'm gonna make an American breakfast because when I",
    "start": "184100",
    "end": "190070"
  },
  {
    "text": "started to research and put it together for this talk here I learned that an English breakfast means something",
    "start": "190070",
    "end": "195170"
  },
  {
    "text": "different in different places so I didn't want to get sidetracked I said okay we'll do an American breakfast I'm",
    "start": "195170",
    "end": "200900"
  },
  {
    "text": "going to pour a cup a coffee first because before I get coffee I'm not doing anything at least I'm not gonna do",
    "start": "200900",
    "end": "206330"
  },
  {
    "text": "anything successfully so when you pour cup of coffee I want to fry two eggs I want to have",
    "start": "206330",
    "end": "211520"
  },
  {
    "text": "three slices of bacon I'm going to toast two pieces of bread I'm gonna add butter and jam to the bread once it's toasted",
    "start": "211520",
    "end": "218300"
  },
  {
    "text": "and then I'm gonna pour orange juice and now I'll sit down and eat now if I were",
    "start": "218300",
    "end": "224630"
  },
  {
    "text": "to write that in code it looks a lot like this out of the way I'm going to",
    "start": "224630",
    "end": "231650"
  },
  {
    "text": "pour my coffee put it in a coffee object I'm going to fry the eggs after that",
    "start": "231650",
    "end": "237350"
  },
  {
    "text": "stun we're gonna fry the bacon I'm gonna toast the bread I'm going to apply the butter I'm gonna ply the jam I'm going",
    "start": "237350",
    "end": "244880"
  },
  {
    "text": "to pour the OJ everything's ready I'm gonna sit down and eat this is a very",
    "start": "244880",
    "end": "250700"
  },
  {
    "text": "clear description of what we're doing it reads one step after the other it's",
    "start": "250700",
    "end": "256190"
  },
  {
    "text": "exactly what happens now if I execute this code the way it runs okay for",
    "start": "256190",
    "end": "263720"
  },
  {
    "text": "coffee warming up the egg pan I've got the eggs in there the eggs are ready I",
    "start": "263720",
    "end": "268940"
  },
  {
    "text": "put the bacon on now I flip the bacon now the bacons done",
    "start": "268940",
    "end": "275870"
  },
  {
    "text": "I put toast in the toaster but the jam on poured the OJ and breakfast is ready",
    "start": "275870",
    "end": "280970"
  },
  {
    "text": "now I sorted a lot of the time outs there because nobody wants to just watch that program run but you can see that",
    "start": "280970",
    "end": "288979"
  },
  {
    "text": "what happens is if I do it do those steps exactly as this is written I'm not",
    "start": "288979",
    "end": "294410"
  },
  {
    "text": "really gonna be happy did the eggs they're sitting on a plate they're getting cold I'm watching the",
    "start": "294410",
    "end": "299660"
  },
  {
    "text": "bacon that's happening I'm doing the jam I'm doing this and then finally ate when",
    "start": "299660",
    "end": "305570"
  },
  {
    "text": "we describe what we do to another human when we describe these steps we take and",
    "start": "305570",
    "end": "310910"
  },
  {
    "text": "we describe this to another human we describe them something like this it's very linear this is what you do but that",
    "start": "310910",
    "end": "319340"
  },
  {
    "text": "other human who probably has some experience in the kitchen and probably cooks doesn't execute them like this",
    "start": "319340",
    "end": "325449"
  },
  {
    "text": "they're going to start warming up the pan now I'm going to warm up the baking pan and start the bacon you know",
    "start": "325449",
    "end": "331699"
  },
  {
    "text": "depending on how long I think each part takes after I flip the bacon I'm gonna go over here I'm going to start the toast I'm gonna come back watch the",
    "start": "331699",
    "end": "337910"
  },
  {
    "text": "bacon get that off get the bacon off when it's totally done now the toast is done put the butter and jam on and then",
    "start": "337910",
    "end": "344030"
  },
  {
    "text": "pour the BOJ so I'm doing these things asynchronously even though I have",
    "start": "344030",
    "end": "350060"
  },
  {
    "text": "written the instruction in a synchronous linear fashion that's the mental model",
    "start": "350060",
    "end": "356000"
  },
  {
    "text": "we want to have about asynchronous programming in c-sharp I'm going to write something that looks synchronous",
    "start": "356000",
    "end": "361340"
  },
  {
    "text": "and looks like it executes one after the other and the compiler is going to do some magic to rearrange how this code",
    "start": "361340",
    "end": "369260"
  },
  {
    "text": "executes so that it happens asynchronously okay so that's the first",
    "start": "369260",
    "end": "376130"
  },
  {
    "text": "part of this mental model think about the fact that what we're doing here is nothing really special but really",
    "start": "376130",
    "end": "381710"
  },
  {
    "text": "translating instructions just like we give another person into the actions that they would take right we first",
    "start": "381710",
    "end": "390169"
  },
  {
    "text": "taught our kids to start cooking they might do it something like this they would stand there and just watch something happen okay now it's ready for",
    "start": "390169",
    "end": "396590"
  },
  {
    "text": "the next step and they would stand there and watch it as we get more experienced we do it in a different way",
    "start": "396590",
    "end": "402219"
  },
  {
    "text": "so that's our steps now here's the next thing that we did really bad when we",
    "start": "405499",
    "end": "411509"
  },
  {
    "start": "406000",
    "end": "645000"
  },
  {
    "text": "started to explain this and when we started to even designing the api's and to work with things asynchronous",
    "start": "411509",
    "end": "418499"
  },
  {
    "text": "programming might look a lot like parallel programming because everyone",
    "start": "418499",
    "end": "424050"
  },
  {
    "text": "knows multi-threaded programming is hard we started to think this must be hard because this works the same way and we",
    "start": "424050",
    "end": "431339"
  },
  {
    "text": "have this mental model we're so often we think that things are asynchronous means",
    "start": "431339",
    "end": "436469"
  },
  {
    "text": "parallel and it's doing something different if I go back to these instructions in this program if this",
    "start": "436469",
    "end": "443339"
  },
  {
    "text": "were to be parallel I would want different cpus doing each one of those steps or different threads doing each",
    "start": "443339",
    "end": "449909"
  },
  {
    "text": "one of those steps and they would be synchronously waiting for something to happen it would be like if I brought all",
    "start": "449909",
    "end": "455669"
  },
  {
    "text": "my family in to cook breakfast and our youngest watches the toast and well",
    "start": "455669",
    "end": "463469"
  },
  {
    "text": "that's a little bit more experience and it's done a little more cooking you work with the eggs no I'll watch the bacon",
    "start": "463469",
    "end": "469949"
  },
  {
    "text": "and so on now let's think of the difference in what that means in terms of scale for what we want for",
    "start": "469949",
    "end": "476639"
  },
  {
    "text": "our programs what I really want is something that's asynchronous one person",
    "start": "476639",
    "end": "482459"
  },
  {
    "text": "can be in the kitchen I'll start one task and I'll go do something else until",
    "start": "482459",
    "end": "488879"
  },
  {
    "text": "I need to respond to something that happened over here on this task and then I'll come back and do that part I mean",
    "start": "488879",
    "end": "494879"
  },
  {
    "text": "while this one is doing something and I can start something else I get a signal",
    "start": "494879",
    "end": "501300"
  },
  {
    "text": "when I reach a certain point right the most obvious one is when I put bread in the toaster and press the button toast",
    "start": "501300",
    "end": "509550"
  },
  {
    "text": "pops I can hear the toaster pop I know I have to go do something else that's",
    "start": "509550",
    "end": "514589"
  },
  {
    "text": "asynchronous so now here's why we want to really be explicit about which one of",
    "start": "514589",
    "end": "520258"
  },
  {
    "text": "these models we use suppose you're building something that's a large-scale web application that's going to be used",
    "start": "520259",
    "end": "527970"
  },
  {
    "text": "by thousands of people if I want to scale it out by going parallel and I'm",
    "start": "527970",
    "end": "534959"
  },
  {
    "text": "going have each CPU take a request do the steps in order blocking on each one of",
    "start": "534959",
    "end": "541500"
  },
  {
    "text": "those that thread spends a lot of time blocked and waiting as does every other",
    "start": "541500",
    "end": "548610"
  },
  {
    "text": "thread a request comes in thread does something wait synchronously doing",
    "start": "548610",
    "end": "553830"
  },
  {
    "text": "nothing does something else wait synchronously doing nothing and so on what that means is as we get more and",
    "start": "553830",
    "end": "561390"
  },
  {
    "text": "more people accessing this website we don't scale up very well because we've",
    "start": "561390",
    "end": "567450"
  },
  {
    "text": "got all these threats sitting there going I'm waiting for something to finish I can't respond to another",
    "start": "567450",
    "end": "572970"
  },
  {
    "text": "incoming request but if I correctly do it asynchronously now what happens is",
    "start": "572970",
    "end": "579780"
  },
  {
    "text": "that one thread can start something oh I'm going to need some data from a database I'm gonna make a database call ok I'm ready to handle another incoming",
    "start": "579780",
    "end": "586890"
  },
  {
    "text": "request so now I can get that request and start doing something else until it's off to the database or oh this data",
    "start": "586890",
    "end": "594510"
  },
  {
    "text": "came back from the database formulate the page send the page back or send the API call back so by being asynchronous I",
    "start": "594510",
    "end": "603710"
  },
  {
    "text": "get much much better scale out because I keep those CPUs as busy as possible the",
    "start": "603710",
    "end": "609480"
  },
  {
    "text": "CPUs aren't sitting there waiting for something to finish as they would if this was asynchronous blocking operation",
    "start": "609480",
    "end": "617330"
  },
  {
    "text": "right so that's what we want to do we want to take this and we're going to say you know what I really can do this with",
    "start": "617330",
    "end": "624030"
  },
  {
    "text": "one cook I can make this happen more quickly but I'm going to a synchronously",
    "start": "624030",
    "end": "629190"
  },
  {
    "text": "do it I'm going to start a task let that task proceed and then we'll come back",
    "start": "629190",
    "end": "635240"
  },
  {
    "text": "when I get signaled and I will do some extra work so that's our main key in",
    "start": "635240",
    "end": "642090"
  },
  {
    "text": "terms of how we're going to put this together so now let's look at our code here what I want to be able to do is I",
    "start": "642090",
    "end": "650580"
  },
  {
    "start": "645000",
    "end": "1098000"
  },
  {
    "text": "need to change some of these steps so that I can start something and then come",
    "start": "650580",
    "end": "656130"
  },
  {
    "text": "back and do more work later all right so let's start with the eggs because pouring coffee is a synchronous",
    "start": "656130",
    "end": "663000"
  },
  {
    "text": "operation nothing is happening until they get to coffee so we'll keep that synchronous",
    "start": "663000",
    "end": "668509"
  },
  {
    "text": "so we'll go to fry eggs all right I want a signal that I'm doing something asynchronously so I'm gonna end that",
    "start": "668509",
    "end": "675689"
  },
  {
    "text": "with the async suffix great I'm going to change its signature to return a task of",
    "start": "675689",
    "end": "682470"
  },
  {
    "text": "eight and I'm getting some red squiggles",
    "start": "682470",
    "end": "688499"
  },
  {
    "text": "here where I return the egg so I need to make this an async method great so I'm",
    "start": "688499",
    "end": "695879"
  },
  {
    "text": "telling the compiler to do things asynchronously and return when we're done I'm getting a green squiggle here",
    "start": "695879",
    "end": "701939"
  },
  {
    "text": "because right now I'm not actually awaiting anything so internally in here",
    "start": "701939",
    "end": "708050"
  },
  {
    "text": "for this demonstration I just just start with a synchronous version i synchronously waited here I want to",
    "start": "708050",
    "end": "714809"
  },
  {
    "text": "await these so as part of this this",
    "start": "714809",
    "end": "723749"
  },
  {
    "text": "demonstration I did synchronously wait don't do that please don't that was a bad example this is a better example if I want to have",
    "start": "723749",
    "end": "729959"
  },
  {
    "text": "something take some time I'm going to wait I'm also not using thread dot sleep which is code we've seen in the wild and",
    "start": "729959",
    "end": "737009"
  },
  {
    "text": "the reason thread that sleep as bad as it does synchronously wait and that thread stays blocked await task delay it",
    "start": "737009",
    "end": "745350"
  },
  {
    "text": "says all right in 3 seconds in this instance start again okay so now I slide",
    "start": "745350",
    "end": "750480"
  },
  {
    "text": "on up to main and now you see that I",
    "start": "750480",
    "end": "755490"
  },
  {
    "text": "have a mismatch in what's getting returned here I've got eggs this fry eggs which is now fry eggs async it's",
    "start": "755490",
    "end": "766410"
  },
  {
    "text": "returning the wrong type I'm now returning a task of egg so I need to await it",
    "start": "766410",
    "end": "772430"
  },
  {
    "text": "and I'm getting red squiggles here because I need to now make this an async",
    "start": "773769",
    "end": "781029"
  },
  {
    "text": "task of Maine there we go",
    "start": "781029",
    "end": "787209"
  },
  {
    "text": "and I think I already upgraded this project so I should get a build good",
    "start": "787209",
    "end": "794720"
  },
  {
    "text": "zero warnings awesome so that's a feature that was added in c-sharp seven",
    "start": "794720",
    "end": "800089"
  },
  {
    "text": "one is you can now make Maine an async method must return must be easier must",
    "start": "800089",
    "end": "805310"
  },
  {
    "text": "return a task or a task of int so the only things that can return so let's finish this with these other tasks bacon",
    "start": "805310",
    "end": "811070"
  },
  {
    "text": "takes quite a while so frying the bacon now we're gonna change its name to fry",
    "start": "811070",
    "end": "818750"
  },
  {
    "text": "bacon async I'm gonna do that as a refactoring so it changes where it was called once again I've got some",
    "start": "818750",
    "end": "824810"
  },
  {
    "text": "synchronous weights here I want to await that bacon needs to get",
    "start": "824810",
    "end": "833990"
  },
  {
    "text": "cooked on both sides so we're going to await it as well and this now is an",
    "start": "833990",
    "end": "841790"
  },
  {
    "text": "async method that returns a task of bacon that's a good time to look at just",
    "start": "841790",
    "end": "850459"
  },
  {
    "text": "exactly what we think for an asynchronous method and why some of the syntax was chosen the way it does if I",
    "start": "850459",
    "end": "856250"
  },
  {
    "text": "squint a little bit I can think this is still just returning bacon when it's done my return statement is returned new",
    "start": "856250",
    "end": "862550"
  },
  {
    "text": "bacon I like that it's now async so it's actual signature is async task of bacon",
    "start": "862550",
    "end": "869480"
  },
  {
    "text": "so the compiler is doing some magic for me to make this result that I'm",
    "start": "869480",
    "end": "875300"
  },
  {
    "text": "returning the result of the task so some work the",
    "start": "875300",
    "end": "880550"
  },
  {
    "text": "compiler does that that changes that so that the signature matches what's declared for the method but in my return",
    "start": "880550",
    "end": "887480"
  },
  {
    "text": "statement I'm actually just giving it the the thing that is returned by the task rather than the task itself and",
    "start": "887480",
    "end": "894110"
  },
  {
    "text": "once again will come up here I'm now getting this warning that says you know you you weren't waiting awaiting this",
    "start": "894110",
    "end": "899930"
  },
  {
    "text": "and it's really a task so we're going to call this oh wait task of bacon will do the same",
    "start": "899930",
    "end": "907460"
  },
  {
    "text": "thing with our bread we're going to",
    "start": "907460",
    "end": "912890"
  },
  {
    "text": "toast our bread asynchronously async task of toast though there we go pretty",
    "start": "912890",
    "end": "923000"
  },
  {
    "text": "quick and simple refactorings not so much that it takes very little time in code to write differently but this still",
    "start": "923000",
    "end": "929029"
  },
  {
    "text": "looks like the same kind of code I can still reason about its logic very",
    "start": "929029",
    "end": "935570"
  },
  {
    "text": "clearly and then oh wait squiggles are",
    "start": "935570",
    "end": "942140"
  },
  {
    "text": "all gone life is good okay so I can reason about this just by reading and I will await",
    "start": "942140",
    "end": "950810"
  },
  {
    "text": "this here okay so this looks good I like this so some things I like about the",
    "start": "950810",
    "end": "955880"
  },
  {
    "text": "syntax and things that making this shift from doing this synchronously we're how",
    "start": "955880",
    "end": "961310"
  },
  {
    "text": "we wrote it is exactly how it executes to something that looks more asynchronous it's a little bit more like",
    "start": "961310",
    "end": "966920"
  },
  {
    "text": "what we would do in real life but if I do a little bit of a code review if we",
    "start": "966920",
    "end": "973460"
  },
  {
    "text": "take just one of the methods there's only a couple changes to write an asynchronous algorithm I put the async",
    "start": "973460",
    "end": "980720"
  },
  {
    "text": "modifier on the method I changed the signature to make sure it's returning something like a task and where I need",
    "start": "980720",
    "end": "989300"
  },
  {
    "text": "to I await something inside that method okay that looks good I like that it",
    "start": "989300",
    "end": "995839"
  },
  {
    "text": "really isn't that hard I can squint and I can still kind of go well if it were synchronous it would look like this and",
    "start": "995839",
    "end": "1004960"
  },
  {
    "text": "now if we look at the code that calls that method",
    "start": "1004960",
    "end": "1009870"
  },
  {
    "text": "it looks very similar once again I'm just starting these things I'm awaiting them and then I move on with the rest of",
    "start": "1011860",
    "end": "1018880"
  },
  {
    "text": "the algorithm so we're part were there this still looks pretty similar so if I run it now I should be super happy my",
    "start": "1018880",
    "end": "1026110"
  },
  {
    "text": "breakfast everything should get done in about the same time and I should eat when it's ready wait a minute hmm this",
    "start": "1026110",
    "end": "1036370"
  },
  {
    "text": "is working the same way that's kind of a bummer yes but it scales better so if I",
    "start": "1036370",
    "end": "1047500"
  },
  {
    "text": "were making 100 breakfasts this would work better because as I've started something and I'm awaiting it well I",
    "start": "1047500",
    "end": "1052720"
  },
  {
    "text": "could be starting someone else's breakfast so I know as the gentleman up here kind of pointed out if this were in",
    "start": "1052720",
    "end": "1058060"
  },
  {
    "text": "a web farm web kind of thing where where I'm trying to respond to multiple requests and lots of requests coming",
    "start": "1058060",
    "end": "1064720"
  },
  {
    "text": "quickly I can now do that this may be enough in a lot of cases that's pretty cool if this were a UI app and I wanted",
    "start": "1064720",
    "end": "1071740"
  },
  {
    "text": "to be trying to move things around and interact with the window this would be enough as well because now I've started",
    "start": "1071740",
    "end": "1078610"
  },
  {
    "text": "a task and while that task is doing its thing the CPU can be doing other things",
    "start": "1078610",
    "end": "1087030"
  },
  {
    "text": "so in many scenarios this is all you need but in this instance for this one",
    "start": "1087030",
    "end": "1092320"
  },
  {
    "text": "person trying to make breakfast I haven't really done the simulation that I want okay so the lesson so far let's",
    "start": "1092320",
    "end": "1100780"
  },
  {
    "start": "1098000",
    "end": "1230000"
  },
  {
    "text": "take a brief break and look at what we've done we've added a couple key words I'm now awaiting anytime that's",
    "start": "1100780",
    "end": "1108100"
  },
  {
    "text": "happening anything that's happening asynchronously instead of blocking until",
    "start": "1108100",
    "end": "1113290"
  },
  {
    "text": "it's completes and I've changed the signature of methods anything that would",
    "start": "1113290",
    "end": "1120610"
  },
  {
    "text": "would have previously been void like my main method now returns a task anything",
    "start": "1120610",
    "end": "1126640"
  },
  {
    "text": "that returned some tea like the eggs or the bacon now returns a task of tea so",
    "start": "1126640",
    "end": "1134020"
  },
  {
    "text": "this is really the mental model I want everyone have when you're writing anything that's asynchronous we all know",
    "start": "1134020",
    "end": "1140710"
  },
  {
    "text": "how to write methods and functions avoid returning method is a method that does homework and when that method exits that",
    "start": "1140710",
    "end": "1148030"
  },
  {
    "text": "work has been done any method that",
    "start": "1148030",
    "end": "1153670"
  },
  {
    "text": "returns some value is a method that does some computation creates a value and",
    "start": "1153670",
    "end": "1159490"
  },
  {
    "text": "then returns that value by analogy once I start doing something asynchronous any",
    "start": "1159490",
    "end": "1166510"
  },
  {
    "text": "method that does some work returns a task and I can ask the task in my code",
    "start": "1166510",
    "end": "1174040"
  },
  {
    "text": "are you done yet or please continue with this once you've finished what that task",
    "start": "1174040",
    "end": "1180580"
  },
  {
    "text": "was anything that returns a task of T is a method that performs some calculation",
    "start": "1180580",
    "end": "1187600"
  },
  {
    "text": "and is now going to return a task object so I can determine when it finishes and",
    "start": "1187600",
    "end": "1194040"
  },
  {
    "text": "when it has finished I can retrieve the result from that task so just like today",
    "start": "1194040",
    "end": "1200050"
  },
  {
    "text": "in any synchronous program that you write you create methods that perform actions and you create functions that",
    "start": "1200050",
    "end": "1205210"
  },
  {
    "text": "compute values when you're writing an asynchronous program what you're going to do is write functions that return",
    "start": "1205210",
    "end": "1211390"
  },
  {
    "text": "tasks if they do some action or task of T if they're going to do some action",
    "start": "1211390",
    "end": "1217060"
  },
  {
    "text": "that returns a value over time that's the key concept to put in your head",
    "start": "1217060",
    "end": "1222970"
  },
  {
    "text": "anytime you work with this once you have that now you can start composing these things in a way that works a",
    "start": "1222970",
    "end": "1229060"
  },
  {
    "text": "synchronously because I started writing this synchronously from the get-go I",
    "start": "1229060",
    "end": "1234250"
  },
  {
    "text": "wrote it in such a way that I'm not really getting all the advantages I want out of async its operating exactly as we",
    "start": "1234250",
    "end": "1240490"
  },
  {
    "text": "wanted to have it run and I'm awaiting each one of those tasks and not doing anything else while it happens I can I",
    "start": "1240490",
    "end": "1248680"
  },
  {
    "text": "can fix that I'm gonna now I'm just going to change these well we'll make",
    "start": "1248680",
    "end": "1254710"
  },
  {
    "text": "this a task of eggs and I will rename",
    "start": "1254710",
    "end": "1261100"
  },
  {
    "text": "this as my eggs task now I don't want that oh wait so now that's now a",
    "start": "1261100",
    "end": "1267400"
  },
  {
    "text": "variable and object that is that task that represents that work this will now",
    "start": "1267400",
    "end": "1273610"
  },
  {
    "text": "continue after I've started it and I will start working on the next ask okay because the eggs are in the pan",
    "start": "1273610",
    "end": "1281750"
  },
  {
    "text": "they're cooking away I can be doing something else so we'll make that same",
    "start": "1281750",
    "end": "1287500"
  },
  {
    "text": "refactoring here on the other asynchronous tasks",
    "start": "1287500",
    "end": "1292330"
  },
  {
    "text": "now before I can apply the butter and apply the jam it's got to come out of the toaster right I mean I suppose I",
    "start": "1312280",
    "end": "1319070"
  },
  {
    "text": "could put the butter in the toaster but that might not end well so I'm gonna right here I'm just gonna await the",
    "start": "1319070",
    "end": "1324680"
  },
  {
    "text": "toast it's a my toast is oh wait the",
    "start": "1324680",
    "end": "1331520"
  },
  {
    "text": "toast ask",
    "start": "1331520",
    "end": "1334030"
  },
  {
    "text": "great and now before my breakfast is ready I need to have all those tasks finish so",
    "start": "1338149",
    "end": "1344749"
  },
  {
    "text": "I'm just going to go await task dot went all and I made some eggs so I've got my",
    "start": "1344749",
    "end": "1352129"
  },
  {
    "text": "eggs task I made the bacon and I should even",
    "start": "1352129",
    "end": "1366049"
  },
  {
    "text": "though it's should be I'm gonna await the toast task again just to be explicit",
    "start": "1366049",
    "end": "1373069"
  },
  {
    "text": "about it now I should probably move these because I'll leave those them in",
    "start": "1373069",
    "end": "1380179"
  },
  {
    "start": "1375000",
    "end": "1514000"
  },
  {
    "text": "there at the moment just this will be illustrative as to what our next step is so now what I've done is I've started",
    "start": "1380179",
    "end": "1386209"
  },
  {
    "text": "these tasks I'm cashing those tasks variables right so it's going it's a",
    "start": "1386209",
    "end": "1391279"
  },
  {
    "text": "it's the thing that's going to return eggs or bacon when it's done and until then it's a task that's running and I'm",
    "start": "1391279",
    "end": "1398509"
  },
  {
    "text": "going to await it at the end that's when I take stuff out of the pan so now if I run this I'm going to say yep yep okay",
    "start": "1398509",
    "end": "1405919"
  },
  {
    "text": "I've got stuff going look at that the stuffs already in toaster it's in the bacon in the pan I'm flipping a little",
    "start": "1405919",
    "end": "1411229"
  },
  {
    "text": "the bacon over the OJ is already ready put the eggs in the plate okay everything's ready that's nice and",
    "start": "1411229",
    "end": "1418159"
  },
  {
    "text": "notice how it executed faster I didn't synchronously wait for each one of those things to finish okay that's pretty good",
    "start": "1418159",
    "end": "1426639"
  },
  {
    "text": "this code now has a little bit of ugliness to it though because well I'm saying that the eggs and bacon already",
    "start": "1426639",
    "end": "1433309"
  },
  {
    "text": "as soon as I started the tasks they're not really done then and I don't like",
    "start": "1433309",
    "end": "1438469"
  },
  {
    "text": "that extra weight to do the toast thing where I put the toast in it comes back up it's now in this method I had to",
    "start": "1438469",
    "end": "1444619"
  },
  {
    "text": "await it separately and no that's not what I want at all so let's take these three lines right here and I'm gonna put",
    "start": "1444619",
    "end": "1454399"
  },
  {
    "text": "them in a local function and that's going to return just a task",
    "start": "1454399",
    "end": "1462190"
  },
  {
    "text": "you know if your host",
    "start": "1462190",
    "end": "1470070"
  },
  {
    "text": "goes with butter and jam and that's",
    "start": "1473529",
    "end": "1479799"
  },
  {
    "text": "going to take any task of toast",
    "start": "1479799",
    "end": "1483570"
  },
  {
    "text": "and now if I put those lines in this local method it's called my bread",
    "start": "1487179",
    "end": "1497830"
  },
  {
    "text": "toasting because that'll be a good name for that okay so now if we look at this",
    "start": "1497830",
    "end": "1505528"
  },
  {
    "text": "and then we can return our toast now that's just creating a function that",
    "start": "1510810",
    "end": "1516960"
  },
  {
    "start": "1514000",
    "end": "1625000"
  },
  {
    "text": "composes tasks one of the things that we've used the phrase we've used often",
    "start": "1516960",
    "end": "1522090"
  },
  {
    "text": "here is don't compose sink over a sink when I had that a weight up above and I",
    "start": "1522090",
    "end": "1527310"
  },
  {
    "text": "said okay stop everything wait for the toast and then do this this code I was bringing that back that tasks back up",
    "start": "1527310",
    "end": "1533730"
  },
  {
    "text": "and then I was doing some more work with it and that extra work was synchronous and about three minutes ago I said we",
    "start": "1533730",
    "end": "1541590"
  },
  {
    "text": "can think of our composition with asynchronous programs the same way we think of it as how we would do it with",
    "start": "1541590",
    "end": "1547770"
  },
  {
    "text": "synchronous programs I did some work and now I'm doing some more work that initial work means a function call and",
    "start": "1547770",
    "end": "1553980"
  },
  {
    "text": "then when I'm doing some more work that's what happens after that function call and that can be in its own function that's what I've done right here I take",
    "start": "1553980",
    "end": "1561510"
  },
  {
    "text": "in this task of toast where my toast is is in the toaster and the thing that",
    "start": "1561510",
    "end": "1569730"
  },
  {
    "text": "happens later which is technically referred to as a continuation I put that in the same method so now what I've done",
    "start": "1569730",
    "end": "1575820"
  },
  {
    "text": "is I have composed a task so my input here is a task that when it's finished",
    "start": "1575820",
    "end": "1582660"
  },
  {
    "text": "I'm going to do some more work so because what came in was asynchronous",
    "start": "1582660",
    "end": "1588200"
  },
  {
    "text": "this is now an asynchronous method and therefore must return a task in this",
    "start": "1588200",
    "end": "1593550"
  },
  {
    "text": "case it's a task of toast so now up here we're going to call this and here now my",
    "start": "1593550",
    "end": "1599190"
  },
  {
    "text": "toast task is just this dot",
    "start": "1599190",
    "end": "1603799"
  },
  {
    "text": "and I said toast with butter and jam right intellisense is in my way hello I",
    "start": "1607720",
    "end": "1614889"
  },
  {
    "text": "can't I should if I make that an extension method I could do that",
    "start": "1614889",
    "end": "1620100"
  },
  {
    "start": "1625000",
    "end": "1725000"
  },
  {
    "text": "and here as I call it now becomes kind of obvious what I'm doing I'm starting a task and then I'm passing that task to",
    "start": "1625620",
    "end": "1631620"
  },
  {
    "text": "another function to say you know when that first task finishes do some other things and when you do those other",
    "start": "1631620",
    "end": "1638400"
  },
  {
    "text": "things then return now different toast",
    "start": "1638400",
    "end": "1643470"
  },
  {
    "text": "it's now got butter and jam right that's programming with composition of tasks",
    "start": "1643470",
    "end": "1650720"
  },
  {
    "text": "all I have to do once I start to see this pattern is realize that I just need",
    "start": "1650720",
    "end": "1656940"
  },
  {
    "text": "to move some code around and put it into methods that will return a task anytime you see this pattern that says do these",
    "start": "1656940",
    "end": "1664169"
  },
  {
    "text": "things and when that finishes do some other stuff that's writing a couple",
    "start": "1664169",
    "end": "1671220"
  },
  {
    "text": "asynchronous functions just like right now you would say well step one is this",
    "start": "1671220",
    "end": "1676590"
  },
  {
    "text": "step two is this step three is that that might be three method calls same basic concept but now we're just carrying",
    "start": "1676590",
    "end": "1682860"
  },
  {
    "text": "along some extra information in the form of a task okay so this male model start",
    "start": "1682860",
    "end": "1688890"
  },
  {
    "text": "to make more sense we start to see this so now let's I'm gonna do the same thing",
    "start": "1688890",
    "end": "1696270"
  },
  {
    "text": "with my eggs and bacon being ready but I'm gonna do it in a different way because I already have some methods down here since I had a method that was",
    "start": "1696270",
    "end": "1704480"
  },
  {
    "text": "making my eggs I'm just going to put the eggs already down here inside that",
    "start": "1704480",
    "end": "1709890"
  },
  {
    "text": "method because I already am doing some composition but I could do the same thing by taking the eggs and the bacon",
    "start": "1709890",
    "end": "1716450"
  },
  {
    "text": "and putting it putting it in a local",
    "start": "1716450",
    "end": "1723059"
  },
  {
    "text": "function to do more work there and any of these can be put together put together in different ways so at any one",
    "start": "1723059",
    "end": "1729720"
  },
  {
    "start": "1725000",
    "end": "1786000"
  },
  {
    "text": "of these await points basically what you're doing is saying after this thing finishes then executes the continuation",
    "start": "1729720",
    "end": "1736279"
  },
  {
    "text": "it's in the same method the task will finish when all of those things are done if it's in different methods you'll pass",
    "start": "1736279",
    "end": "1742529"
  },
  {
    "text": "the task in and retrieve a new task out it's done when all those things are finished",
    "start": "1742529",
    "end": "1748840"
  },
  {
    "text": "cool now if I run this I think we get a",
    "start": "1748840",
    "end": "1755379"
  },
  {
    "text": "pretty good mental model as to how this is gonna work call dr. Dada Dada Dada",
    "start": "1755379",
    "end": "1762419"
  },
  {
    "text": "pouring coffee I put stuff in and now you can see his things finish I've already put the butter and jam on the toast put the eggs in the plate the eggs",
    "start": "1762419",
    "end": "1769210"
  },
  {
    "text": "already flipped the bacon the second part of the bacon is done breakfast is ready yes and that's now all the",
    "start": "1769210",
    "end": "1780070"
  },
  {
    "text": "complexity you really need to make this work I started three different tasks",
    "start": "1780070",
    "end": "1788279"
  },
  {
    "text": "those are composed of subtasks and then when those tasks are finished my",
    "start": "1788279",
    "end": "1794559"
  },
  {
    "text": "breakfast is ready it sounds a lot like what we do every day and if you look at",
    "start": "1794559",
    "end": "1800230"
  },
  {
    "text": "this code now and this is where the syntax is is rather pleasant and we hope leads to an understanding once you start",
    "start": "1800230",
    "end": "1807159"
  },
  {
    "text": "to really see and get this mental model and we explain it better this still",
    "start": "1807159",
    "end": "1812559"
  },
  {
    "text": "reads the way we would communicate to another person how to make the breakfast start from here start moving this",
    "start": "1812559",
    "end": "1820119"
  },
  {
    "text": "through and then when all those things are done everything's ready",
    "start": "1820119",
    "end": "1829799"
  },
  {
    "text": "simple right we hope now there's a few things because of the age of the API and",
    "start": "1829830",
    "end": "1836559"
  },
  {
    "text": "because it was built on top of some things that came before that make this a little bit nastier there's a couple",
    "start": "1836559",
    "end": "1842649"
  },
  {
    "text": "things that we're going to work with all right so as we said cooking bread",
    "start": "1842649",
    "end": "1849429"
  },
  {
    "text": "synchronously it looks pretty much like this we went to and we changed it and",
    "start": "1849429",
    "end": "1857169"
  },
  {
    "text": "how it looks a little bit like this change the name I think in the slide from what I did here but pretty much the same kind of thing the same logic is",
    "start": "1857169",
    "end": "1864519"
  },
  {
    "text": "still there as I read it now a couple of the things that people run into a lot",
    "start": "1864519",
    "end": "1869710"
  },
  {
    "text": "before I get to async streams that are probably the most common questions we get and it is where I think in every",
    "start": "1869710",
    "end": "1877149"
  },
  {
    "text": "higher-level language almost anything we do any abstraction we do at some point",
    "start": "1877149",
    "end": "1883210"
  },
  {
    "text": "in time at some point you get far enough into it that the abstraction least a little bit when we're dealing with async",
    "start": "1883210",
    "end": "1890769"
  },
  {
    "text": "and await in tasks the place that leaks is where we get to dealing with a synchronization context or the context",
    "start": "1890769",
    "end": "1897880"
  },
  {
    "text": "that code runs on so you'll see things and we do this in our Docs and we",
    "start": "1897880",
    "end": "1903190"
  },
  {
    "text": "explain where we also will say something like continue configure await false and",
    "start": "1903190",
    "end": "1908289"
  },
  {
    "text": "we say you should do this but a lot of times we don't really say why that well",
    "start": "1908289",
    "end": "1916529"
  },
  {
    "text": "and here's where the abstraction kind of hurts for the reason this doesn't compile is configure await actually",
    "start": "1916679",
    "end": "1921820"
  },
  {
    "text": "returns a different kind of a way table than a task so if I were just to make",
    "start": "1921820",
    "end": "1928120"
  },
  {
    "text": "this a var because it's it's actually an i async await able I think or a",
    "start": "1928120",
    "end": "1935110"
  },
  {
    "text": "configure await context and I probably have to change that as well",
    "start": "1935110",
    "end": "1941279"
  },
  {
    "text": "and in this application it's a console application so I don't really need to do anything with configure wait and here's",
    "start": "1943670",
    "end": "1952850"
  },
  {
    "start": "1952000",
    "end": "2097000"
  },
  {
    "text": "where there's times where you need to do it there's times when you don't so a",
    "start": "1952850",
    "end": "1958070"
  },
  {
    "text": "common misconception is that a synchronization context equates to a",
    "start": "1958070",
    "end": "1963290"
  },
  {
    "text": "threat the reality is that a synchronization context equates to a",
    "start": "1963290",
    "end": "1969590"
  },
  {
    "text": "thread except when it doesn't and the reason is there are special contexts and",
    "start": "1969590",
    "end": "1976600"
  },
  {
    "text": "that have exactly one thread in particular a UI context so if you are",
    "start": "1976600",
    "end": "1983780"
  },
  {
    "text": "writing a Windows desktop program WPF program WinForms UWP xamarin there is",
    "start": "1983780",
    "end": "1992750"
  },
  {
    "text": "one thread that is allowed to update controls on the screen that UI thread so",
    "start": "1992750",
    "end": "1999170"
  },
  {
    "text": "if you are running in the synchronization context that is allowed to work with the UI there is exactly one",
    "start": "1999170",
    "end": "2005020"
  },
  {
    "text": "thread that is in that context and if your continuations what's actually",
    "start": "2005020",
    "end": "2010090"
  },
  {
    "text": "happening under the covers here which is why we say this is a part of the abstraction that leaks a little bit is there's going to be effectively some",
    "start": "2010090",
    "end": "2017230"
  },
  {
    "text": "things that get hooked up and the compiler creates some gnarly code that says do this and then hook up an event",
    "start": "2017230",
    "end": "2023800"
  },
  {
    "text": "so that after this thing finishes now do the rest of this stuff and that event by",
    "start": "2023800",
    "end": "2030580"
  },
  {
    "text": "default is going to be on the same context where the work started okay in",
    "start": "2030580",
    "end": "2038470"
  },
  {
    "text": "the case of the UI and a UI application that will mean on the same thread",
    "start": "2038470",
    "end": "2043510"
  },
  {
    "text": "because there is only one thread in that context so if this were a windowed",
    "start": "2043510",
    "end": "2049419"
  },
  {
    "text": "program my tasks would kind of stop and pause in order to switch to execute the",
    "start": "2049419",
    "end": "2056050"
  },
  {
    "text": "code when something else finished and then would come back if any of these",
    "start": "2056050",
    "end": "2061360"
  },
  {
    "text": "were long-running cpu-bound applications that would kind of be a jerky experience",
    "start": "2061360",
    "end": "2066760"
  },
  {
    "text": "for users and the way you can avoid that is then you say configure await false",
    "start": "2066760",
    "end": "2071950"
  },
  {
    "text": "which means the continuation can run in another contact and that other context might be a",
    "start": "2071950",
    "end": "2079250"
  },
  {
    "text": "background thread might be a thread pull thread and then when it comes back up to the UI we're gonna continue at the UI",
    "start": "2079250",
    "end": "2086330"
  },
  {
    "text": "level in the same you back in the UI context and then we'll be back on the only thread that can manipulate the UI",
    "start": "2086330",
    "end": "2093040"
  },
  {
    "text": "so that's a one spot where it leaks if",
    "start": "2093040",
    "end": "2098090"
  },
  {
    "start": "2097000",
    "end": "2170000"
  },
  {
    "text": "you're in a writing and asp.net or asp.net core application all of your",
    "start": "2098090",
    "end": "2103610"
  },
  {
    "text": "controllers are everything that's handling a request is on a thread pool thread the thread pool has more than one",
    "start": "2103610",
    "end": "2111440"
  },
  {
    "text": "thread and so the name thread pool as opposed to thread so when you're in that",
    "start": "2111440",
    "end": "2116980"
  },
  {
    "text": "context continuing on the same context may very well mean a different thread in",
    "start": "2116980",
    "end": "2125540"
  },
  {
    "text": "fact in all likelihood it almost certainly means a different thread in any production scale application but it",
    "start": "2125540",
    "end": "2131420"
  },
  {
    "text": "will be another thread in the same context because it will be in the thread pool okay so that's a bit of a",
    "start": "2131420",
    "end": "2137990"
  },
  {
    "text": "long-winded explanation so what's the guidance and why did we pick the default",
    "start": "2137990",
    "end": "2143030"
  },
  {
    "text": "that is going to continue on the same you know configure wait if I don't put anything it's like you put configure",
    "start": "2143030",
    "end": "2148640"
  },
  {
    "text": "await true why did we make that to default if we tell everybody doing libraries and configure await false well",
    "start": "2148640",
    "end": "2155390"
  },
  {
    "text": "the reason is configure await true or not doing anything your code will always work correctly you may in certain",
    "start": "2155390",
    "end": "2163760"
  },
  {
    "text": "situations lose a little bit of responsiveness particularly at the UI level configure await false if you know",
    "start": "2163760",
    "end": "2175130"
  },
  {
    "start": "2170000",
    "end": "2303000"
  },
  {
    "text": "what you're doing in the library and you know that the continuation can execute anywhere and you're not taking in a",
    "start": "2175130",
    "end": "2181730"
  },
  {
    "text": "delegate which might actually be modifying the UI or doing something else so it could be bad you can switch",
    "start": "2181730",
    "end": "2187640"
  },
  {
    "text": "contexts and it won't hurt so configure await false means your library is going to be more responsive however if you",
    "start": "2187640",
    "end": "2195200"
  },
  {
    "text": "don't know exactly what's going on and you can't correctly make some of those assumptions configure await false means",
    "start": "2195200",
    "end": "2202400"
  },
  {
    "text": "your app might crash because somebody using it might update the UI and be in",
    "start": "2202400",
    "end": "2207500"
  },
  {
    "text": "the wrong car text you might deadlock or you might get race conditions hence the default is the same as",
    "start": "2207500",
    "end": "2214040"
  },
  {
    "text": "configure away true because it will always work and not putting it in doesn't cause really bad stuff I don't",
    "start": "2214040",
    "end": "2222470"
  },
  {
    "text": "have a good demo for that with breakfast so I'm going to be working on that as we update the Docs and that's probably the",
    "start": "2222470",
    "end": "2228619"
  },
  {
    "text": "single biggest bit the key thing of this whole simulation that I want people to",
    "start": "2228619",
    "end": "2233720"
  },
  {
    "text": "remember and to build this mental model of working with async is just like with",
    "start": "2233720",
    "end": "2239840"
  },
  {
    "text": "every bit of code you write you break things up into methods those methods are actions that return void or return some",
    "start": "2239840",
    "end": "2247609"
  },
  {
    "text": "value that they computed when you move that code in an asynchronous processing",
    "start": "2247609",
    "end": "2254300"
  },
  {
    "text": "model at at a method that does some work returns a map a task and you use the",
    "start": "2254300",
    "end": "2262520"
  },
  {
    "text": "task to determine when that work finished and you always almost always want to know when the tasks finished a",
    "start": "2262520",
    "end": "2268750"
  },
  {
    "text": "method that does some work in computes of value returns a task of T so you ask",
    "start": "2268750",
    "end": "2276350"
  },
  {
    "text": "the task is it done yet and you retrieve the value then you get the computation",
    "start": "2276350",
    "end": "2283640"
  },
  {
    "text": "that was done asynchronously okay so I'm",
    "start": "2283640",
    "end": "2288650"
  },
  {
    "text": "going to load up a second solution and as that loads yeah we can say these",
    "start": "2288650",
    "end": "2298150"
  },
  {
    "text": "we'll talk a little bit about async streams",
    "start": "2298210",
    "end": "2302470"
  },
  {
    "text": "so async streams now we're going to introduce three new interfaces that if",
    "start": "2303350",
    "end": "2308850"
  },
  {
    "text": "you squint close one eye and look at are going to look amazingly familiar first in system that collection is not generic",
    "start": "2308850",
    "end": "2315390"
  },
  {
    "text": "we are going to have I a sync enumerable that looks a lot like ienumerable",
    "start": "2315390",
    "end": "2321740"
  },
  {
    "text": "the difference is the method instead of being called get the numerator is called",
    "start": "2321740",
    "end": "2327720"
  },
  {
    "text": "get a sinc enumerator and it implements",
    "start": "2327720",
    "end": "2333270"
  },
  {
    "text": "I a sinc enumerator instead of I enumerator and if we look at this Ayase",
    "start": "2333270",
    "end": "2339330"
  },
  {
    "text": "and kanuma Reiter it looks a lot like ienumerator of T the difference current",
    "start": "2339330",
    "end": "2346860"
  },
  {
    "text": "looks exactly the same I'm just going to get a T move next async looks a lot like",
    "start": "2346860",
    "end": "2353790"
  },
  {
    "text": "move next remember what I said about that mental model instead of returning a bool it's going to return a task that",
    "start": "2353790",
    "end": "2361290"
  },
  {
    "text": "will tell you when it's done and then the bool you can retrieve from",
    "start": "2361290",
    "end": "2366300"
  },
  {
    "text": "the task instead of tasks it's using value tasks which behaves the same way",
    "start": "2366300",
    "end": "2371520"
  },
  {
    "text": "as tasks but isn't optimisation value task is a struct task is a class for",
    "start": "2371520",
    "end": "2377070"
  },
  {
    "text": "something like enumerate enlarge collections we can reuse memory and do a lot fewer allocations by making it a",
    "start": "2377070",
    "end": "2383820"
  },
  {
    "text": "struct and then if you notice I a sync enumerator like ienumerator implement",
    "start": "2383820",
    "end": "2389550"
  },
  {
    "text": "something that looks a little bit like eye disposable but here's I a sync disposable and if you look at ia sync",
    "start": "2389550",
    "end": "2396270"
  },
  {
    "text": "disposable you can screw into a little bit and go that looks a lot like eye disposable it has one method instead of",
    "start": "2396270",
    "end": "2403980"
  },
  {
    "text": "disposed it's called dispose async and instead of returning void it returns value tasks same mental model that was",
    "start": "2403980",
    "end": "2411150"
  },
  {
    "text": "just going through within this whole earlier program about making a breakfast asynchronously something that was void",
    "start": "2411150",
    "end": "2416940"
  },
  {
    "text": "now returns a task there we go so let's",
    "start": "2416940",
    "end": "2422160"
  },
  {
    "start": "2420000",
    "end": "2627000"
  },
  {
    "text": "look at where we think this is really a cool thing so I'm going to go around",
    "start": "2422160",
    "end": "2429030"
  },
  {
    "text": "some of the code that's here and talk mostly about the asynchronous parts",
    "start": "2429030",
    "end": "2434860"
  },
  {
    "text": "so everything we do for Dax is open source on github and one of the things",
    "start": "2434860",
    "end": "2441800"
  },
  {
    "text": "that we do sometimes is we want to look at new issues as they come in and see what's going on so here I have this",
    "start": "2441800",
    "end": "2446840"
  },
  {
    "text": "thing I'm going to run a page query which is using the github graph QL library and the reason I picked graph QL",
    "start": "2446840",
    "end": "2453260"
  },
  {
    "text": "is graph QL is a very nice paging library and then I'm when it comes back",
    "start": "2453260",
    "end": "2458720"
  },
  {
    "text": "and this thing is going to be async I'm going to print out each one of the",
    "start": "2458720",
    "end": "2464120"
  },
  {
    "text": "issues so let's look at how this is implemented I'm returning a task of",
    "start": "2464120",
    "end": "2472190"
  },
  {
    "text": "ienumerable of J token so I'm using the Newton soft JSON library that's already ugly task of ienumerable of J token whoa",
    "start": "2472190",
    "end": "2482620"
  },
  {
    "text": "I'm gonna create a request and then when",
    "start": "2482620",
    "end": "2488900"
  },
  {
    "text": "I get each one of those requests back after the I'm going to wait here to go make the web request and then when it",
    "start": "2488900",
    "end": "2495320"
  },
  {
    "text": "comes back I'm gonna parse the results print stuff out a couple fields in the response are gonna tell me if there are",
    "start": "2495320",
    "end": "2502220"
  },
  {
    "text": "more pages and then give me a cursor so I can get the next page so I'm going to stuff those back in and then I'm going",
    "start": "2502220",
    "end": "2508670"
  },
  {
    "text": "to run the query again until I get all the pages that I asked for I'm stopping",
    "start": "2508670",
    "end": "2514130"
  },
  {
    "text": "at 10 just because this is a rather large repo so if you look at the structure of this code I'm gonna make a",
    "start": "2514130",
    "end": "2520880"
  },
  {
    "text": "request put data into an array see that",
    "start": "2520880",
    "end": "2525950"
  },
  {
    "text": "there's more pages make another request add more data to that array make another request add more data that array until",
    "start": "2525950",
    "end": "2533180"
  },
  {
    "text": "I've requested as much as I want then send the whole thing back and let the caller enumerate it I picked an overload",
    "start": "2533180",
    "end": "2541430"
  },
  {
    "text": "of this that implements an I progress API so that can print out a message when each packet comes back and it looks like",
    "start": "2541430",
    "end": "2550220"
  },
  {
    "text": "I disconnected from the speaker Wi-Fi so before I run this we will get back",
    "start": "2550220",
    "end": "2556610"
  },
  {
    "text": "internet connection because this demo doesn't work real well without an Internet",
    "start": "2556610",
    "end": "2563110"
  },
  {
    "text": "yes so now when I run it the way it works as I said this kind of before in a",
    "start": "2563210",
    "end": "2570349"
  },
  {
    "text": "world before async streams after it builds you can see we're gonna make a",
    "start": "2570349",
    "end": "2576380"
  },
  {
    "text": "request now we're pausing and we should get dated soon one hopes there we go so",
    "start": "2576380",
    "end": "2589250"
  },
  {
    "text": "now I've got 25 issues now I got 50 and you can see each page is coming back and",
    "start": "2589250",
    "end": "2594980"
  },
  {
    "text": "then once I get my 10 pages there's the last 100 or 250 issues that we've",
    "start": "2594980",
    "end": "2602329"
  },
  {
    "text": "received I like the fact that the last one there I said async void bag which is",
    "start": "2602329",
    "end": "2607579"
  },
  {
    "text": "true okay so there it came back nice stuff now if this were production and in",
    "start": "2607579",
    "end": "2613550"
  },
  {
    "text": "today's world if I really wanted to access that data as it came back I would have to do some things like have that I",
    "start": "2613550",
    "end": "2619400"
  },
  {
    "text": "progress start to return the ienumerable and keep track of who's a numerating it and make sure I don't rewrite memory and",
    "start": "2619400",
    "end": "2625430"
  },
  {
    "text": "so on and a big critique of this program right now is this array it has to hold",
    "start": "2625430",
    "end": "2631549"
  },
  {
    "text": "all the results so if I'm doing a whole lot of work like say it's an ml program where I'm getting a hundred million data",
    "start": "2631549",
    "end": "2637579"
  },
  {
    "text": "points that's a lot of memory allocated if I'm going to stream through it so let's change this so let's make this",
    "start": "2637579",
    "end": "2644020"
  },
  {
    "text": "doing something to start retrieving these immediately so let's change all of",
    "start": "2644020",
    "end": "2650450"
  },
  {
    "text": "this and just retrieve an i async enumerable",
    "start": "2650450",
    "end": "2657609"
  },
  {
    "text": "there we go that's cool and now down",
    "start": "2658790",
    "end": "2664100"
  },
  {
    "text": "here the nice things I can do is I can delete that array because I don't really",
    "start": "2664100",
    "end": "2669770"
  },
  {
    "text": "need to keep track of all that stuff that's just kind of I don't want to allocate all that memory and keep having",
    "start": "2669770",
    "end": "2676160"
  },
  {
    "text": "it grow all over the place and then when this comes back AHA instead of this I'm not going to do",
    "start": "2676160",
    "end": "2683300"
  },
  {
    "text": "that because I don't need to merge things but what I can do is for each J",
    "start": "2683300",
    "end": "2690320"
  },
  {
    "text": "object and notice it was it is going to",
    "start": "2690320",
    "end": "2696470"
  },
  {
    "text": "be issues of results some nodes",
    "start": "2696470",
    "end": "2706599"
  },
  {
    "text": "and yield return issue right make sure I",
    "start": "2710280",
    "end": "2719850"
  },
  {
    "text": "got that right",
    "start": "2719850",
    "end": "2722390"
  },
  {
    "text": "as well make sure I got that variable name right Oh Jerry yeah for it to lead",
    "start": "2726070",
    "end": "2734440"
  },
  {
    "text": "to that code I meant to just move it yeah that was exactly what I wanted okay",
    "start": "2734440",
    "end": "2744120"
  },
  {
    "text": "and now because this isn't icing I a sink enumerable I'm gonna skip this",
    "start": "2744120",
    "end": "2749410"
  },
  {
    "text": "progress reporting bit and because I now",
    "start": "2749410",
    "end": "2754930"
  },
  {
    "text": "yield returning I can remove the returned since I'm skipping the progress well and get rid of that last last",
    "start": "2754930",
    "end": "2766060"
  },
  {
    "text": "argument because I don't really need it and now here aha to iterate this instead",
    "start": "2766060",
    "end": "2772930"
  },
  {
    "text": "of here this a weight issue in each issues I'm just going to grab this part",
    "start": "2772930",
    "end": "2779680"
  },
  {
    "text": "of the code and instead of issues I'm just going to put it right there close",
    "start": "2779680",
    "end": "2784990"
  },
  {
    "text": "bracket don't need this and I'm getting a red squiggle there because I need to",
    "start": "2784990",
    "end": "2791080"
  },
  {
    "text": "await for each it cool okay so the code looks really just like enumerate in a",
    "start": "2791080",
    "end": "2797800"
  },
  {
    "start": "2794000",
    "end": "3053000"
  },
  {
    "text": "sequence but now I've just added this a weight in front of the for each to say yeah this is an async strain it's going",
    "start": "2797800",
    "end": "2803710"
  },
  {
    "text": "to get data back when it gets data back and down below instead of ienumerable",
    "start": "2803710",
    "end": "2808900"
  },
  {
    "text": "I've just said I a sink and numerable and I can put some weights in there each time I need to get a new page awesome",
    "start": "2808900",
    "end": "2815970"
  },
  {
    "text": "and now what I really love about this feature and the things we can do with it is watch what happens differently now as",
    "start": "2815970",
    "end": "2822940"
  },
  {
    "text": "I run this version I got a chunk of data and imma numerating it and then I get",
    "start": "2822940",
    "end": "2828370"
  },
  {
    "text": "another chunk of data and imma numerating it and so on and so forth",
    "start": "2828370",
    "end": "2833490"
  },
  {
    "text": "okay I just run that one more time to really really drive that home notice how",
    "start": "2833490",
    "end": "2839290"
  },
  {
    "text": "we're going to get it's going to pause it makes that first request boom boom",
    "start": "2839290",
    "end": "2846510"
  },
  {
    "text": "okay and this is part of why this",
    "start": "2847930",
    "end": "2853130"
  },
  {
    "text": "interface is implemented the way it is I a sync innumerable return something that",
    "start": "2853130",
    "end": "2861290"
  },
  {
    "text": "is going to hand you will be able to retrieve the next element and when it's available and if the next element is",
    "start": "2861290",
    "end": "2868880"
  },
  {
    "text": "already in memory or already retrieved from your asynchronous data source you'll be able to get that immediately",
    "start": "2868880",
    "end": "2875810"
  },
  {
    "text": "and just continue to enumerate that's why I get that after that first pause you see 25 issues come out and then",
    "start": "2875810",
    "end": "2882920"
  },
  {
    "text": "there's a pause at some point you'll hit a page boundary where you need to make the next request to get the next hunk of",
    "start": "2882920",
    "end": "2889400"
  },
  {
    "text": "data and at that time it's asynchronous inside the implementation you'll be able",
    "start": "2889400",
    "end": "2896300"
  },
  {
    "text": "to see that detail right up here I'm making a request to a web service I'm",
    "start": "2896300",
    "end": "2902540"
  },
  {
    "text": "getting some data back and down here or I'm letting you enumerate the sequence",
    "start": "2902540",
    "end": "2907640"
  },
  {
    "text": "I'm just gonna yield return however many have downloaded if I change the page",
    "start": "2907640",
    "end": "2912920"
  },
  {
    "text": "size here from 25 to 50 the chunks would be bigger changed it to 10 it would be smaller here where I'm enumerated and",
    "start": "2912920",
    "end": "2921880"
  },
  {
    "text": "iterating it it doesn't matter I'm iterating the sequence you'll get the",
    "start": "2921880",
    "end": "2927050"
  },
  {
    "text": "next element immediately if it's already downloaded but without changing anything that you're doing here to enumerate the",
    "start": "2927050",
    "end": "2932930"
  },
  {
    "text": "sequence when the source has to do some asynchronous work to get the next piece",
    "start": "2932930",
    "end": "2939050"
  },
  {
    "text": "of data the source will enumerate or we'll go asynchronous you'll have to",
    "start": "2939050",
    "end": "2944090"
  },
  {
    "text": "await here and then get the next one the only part I didn't demonstrate here is",
    "start": "2944090",
    "end": "2949640"
  },
  {
    "text": "if I moved my github client object down into this method it would be disposed",
    "start": "2949640",
    "end": "2955910"
  },
  {
    "text": "after the weight finishes another couple bits and nice things here I wouldn't",
    "start": "2955910",
    "end": "2962420"
  },
  {
    "text": "have to implement cancellation and cancellation stores in something like this how do I cancel and not make more",
    "start": "2962420",
    "end": "2968480"
  },
  {
    "text": "requests just stop a numerate in the sequence I would not make another robe request because if I look at the",
    "start": "2968480",
    "end": "2975260"
  },
  {
    "text": "implementation here let's say I stopped after the first ten issues came back that yield for each",
    "start": "2975260",
    "end": "2983540"
  },
  {
    "text": "would return the first 10 there stay still 15 in this instance in memory and I don't loop back up to the next part of",
    "start": "2983540",
    "end": "2990890"
  },
  {
    "text": "the loop and make another request so cancellation is automatic I just",
    "start": "2990890",
    "end": "2996920"
  },
  {
    "text": "stopped reading from the async stream and then up here it's currently in main",
    "start": "2996920",
    "end": "3003160"
  },
  {
    "text": "but if this were like somewhere in a service layer if I stop for reaching this and that the return of run paged",
    "start": "3003160",
    "end": "3010119"
  },
  {
    "text": "query once that goes out of scope it's going to get disposed of and any connections would automatically get",
    "start": "3010119",
    "end": "3016089"
  },
  {
    "text": "closed so the mental model now it's just like enumerated of synchronous sequence",
    "start": "3016089",
    "end": "3022690"
  },
  {
    "text": "and the compiler is going to generate the code to automatically cancel if you stop a numerating right just because you",
    "start": "3022690",
    "end": "3029680"
  },
  {
    "text": "won't make any more asynchronous requests and automatically clean up",
    "start": "3029680",
    "end": "3035099"
  },
  {
    "text": "after the enumerable goes out of scope or after the enumerator goes out of scope awesome",
    "start": "3035099",
    "end": "3043349"
  },
  {
    "text": "I could say that all the time call",
    "start": "3043980",
    "end": "3050869"
  },
  {
    "text": "alright so again reviewing key point is you",
    "start": "3050869",
    "end": "3056040"
  },
  {
    "start": "3053000",
    "end": "3094000"
  },
  {
    "text": "start to play with this feature if you just squint a little bit it looks just like what you're using today there you",
    "start": "3056040",
    "end": "3063510"
  },
  {
    "text": "go so it should be really familiar and generating a sequence it's going to look",
    "start": "3063510",
    "end": "3069599"
  },
  {
    "text": "a lot like what you do today except instead of returning an ienumerable you return an eye a sync innumerable add the",
    "start": "3069599",
    "end": "3077400"
  },
  {
    "text": "async modifier on the method and you can use awaits inside the code that's going to generate the sequence and with that",
    "start": "3077400",
    "end": "3090770"
  },
  {
    "text": "we've worked through those cool last a little bit I want to talk about kind of",
    "start": "3090770",
    "end": "3097109"
  },
  {
    "start": "3094000",
    "end": "3414000"
  },
  {
    "text": "shifting gears a bit is in the last months the dotnet foundation has now opened and announced open membership",
    "start": "3097109",
    "end": "3104720"
  },
  {
    "text": "okay what this really is is dotnet kind of growing up and trying to have more of",
    "start": "3104720",
    "end": "3113190"
  },
  {
    "text": "a stake for those people like all of you who paid to come to a conference to learn more things and when in this room",
    "start": "3113190",
    "end": "3119700"
  },
  {
    "text": "because you want to learn more about dotnet to have your own professional organization that net Foundation has I",
    "start": "3119700",
    "end": "3126599"
  },
  {
    "text": "think 287 projects was the last number I saw some of them are projects that",
    "start": "3126599",
    "end": "3133500"
  },
  {
    "text": "started at Microsoft many of them are all community driven projects if you have participated in any",
    "start": "3133500",
    "end": "3141240"
  },
  {
    "text": "of those projects whether that's writing issues on any of our repos contributing",
    "start": "3141240",
    "end": "3146369"
  },
  {
    "text": "to our Docs submitted PRS either to one of the Microsoft repos or to xunit or to",
    "start": "3146369",
    "end": "3151619"
  },
  {
    "text": "any of the projects that you work with you can become a member and notice I",
    "start": "3151619",
    "end": "3157230"
  },
  {
    "text": "said if you've contributed issues and participated in discussions you don't have to have written a pull request if",
    "start": "3157230",
    "end": "3164430"
  },
  {
    "text": "you go to this dotnet foundation.org slash become a member you can read all the details think of it as your",
    "start": "3164430",
    "end": "3170400"
  },
  {
    "text": "professional organization if you care about the future of dotnet and direction this is the organization",
    "start": "3170400",
    "end": "3176589"
  },
  {
    "text": "that's going to be setting that direction board elections will be next month so joining now means you would",
    "start": "3176589",
    "end": "3184030"
  },
  {
    "text": "participate and vote on the board by laws have been changed so that any corporate member can have no more than",
    "start": "3184030",
    "end": "3190150"
  },
  {
    "text": "two people on the board so only two microsoft employees at most will be on this Beth masse it's been announced has",
    "start": "3190150",
    "end": "3197680"
  },
  {
    "text": "been the one board seat Microsoft gets to appoint one anyone else who wants to run if you are a member you can also run",
    "start": "3197680",
    "end": "3204010"
  },
  {
    "text": "for the board all the information is once again on some links it will be able to become a member think of it as your professional Society",
    "start": "3204010",
    "end": "3211500"
  },
  {
    "text": "professional organization for dotnet if you are interested please please consider it any questions yes start",
    "start": "3211500",
    "end": "3222520"
  },
  {
    "text": "there when when does a task start executing in",
    "start": "3222520",
    "end": "3230730"
  },
  {
    "text": "c-sharp a task starts executing as soon as you call the code that's in that method it will execute up",
    "start": "3230730",
    "end": "3237480"
  },
  {
    "text": "to the first await and it will only go asynchronous once it hits the first a",
    "start": "3237480",
    "end": "3243210"
  },
  {
    "text": "weight that's awaiting a non completed task so in c-sharp all tasks start running",
    "start": "3243210",
    "end": "3249930"
  },
  {
    "text": "I don't think tax to do to start it to create a task but then start it later",
    "start": "3249930",
    "end": "3258859"
  },
  {
    "text": "okay and so I hand go up somewhere over here I thought yes so what was the",
    "start": "3267140",
    "end": "3288510"
  },
  {
    "text": "motivation of adding two keywords to have a sink and a weight in order to",
    "start": "3288510",
    "end": "3294000"
  },
  {
    "text": "split those two um I may defer to you on",
    "start": "3294000",
    "end": "3299339"
  },
  {
    "text": "that one come on up to the mic I think there's one I thought I was done sorry is that one",
    "start": "3299339",
    "end": "3308950"
  },
  {
    "text": "honest you guys asking I bet they can do that back there hello yes yes okay so that was of course a discussion point",
    "start": "3308950",
    "end": "3315760"
  },
  {
    "text": "shoot what why do we have two key words can't we just recognize that there's an a wait in the method for instance and",
    "start": "3315760",
    "end": "3321460"
  },
  {
    "text": "then a reason that it's async and we actually did make that choice for",
    "start": "3321460",
    "end": "3327430"
  },
  {
    "text": "iterators where we recognized as a yield keyword and we realized that this method has to be an iterator we decided that we",
    "start": "3327430",
    "end": "3335079"
  },
  {
    "text": "didn't want to do that because the the await can be really deeply buried in",
    "start": "3335079",
    "end": "3340329"
  },
  {
    "text": "weight expression is an expression it can be really deeply inside some coding to be hard to just look at a piece of",
    "start": "3340329",
    "end": "3345369"
  },
  {
    "text": "code and see this and I wait in there whereas the yield is the statement so it's a little more it's a little more",
    "start": "3345369",
    "end": "3352030"
  },
  {
    "text": "visible at least and I also think we probably made a mistake with the yield I think we should have had a keyword for the iterators as well so the async is",
    "start": "3352030",
    "end": "3360430"
  },
  {
    "text": "primarily there to make it clear that this is an async method it also helps",
    "start": "3360430",
    "end": "3366150"
  },
  {
    "text": "with some compiled technical things of avoiding ambiguity and because the",
    "start": "3366150",
    "end": "3372430"
  },
  {
    "text": "weight wasn't a keyword all the time people could have that things that were called a weight they'd have a you know",
    "start": "3372430",
    "end": "3377950"
  },
  {
    "text": "method or variable called a weight and we would we had to kind of respect that kind of code but the async keyword is",
    "start": "3377950",
    "end": "3384549"
  },
  {
    "text": "new so whenever you have a sink we know that a weight inside isn't is the keyword away somebody's declared a",
    "start": "3384549",
    "end": "3391059"
  },
  {
    "text": "weight mm-hmm does that explain yeah cool I'll run back down any others",
    "start": "3391059",
    "end": "3396990"
  },
  {
    "text": "that's right there yeah is it redundant",
    "start": "3396990",
    "end": "3404109"
  },
  {
    "text": "to write a sink and then tasks no probably the quickest way to explain it",
    "start": "3404109",
    "end": "3409540"
  },
  {
    "text": "is it's again if we look at the time",
    "start": "3409540",
    "end": "3414930"
  },
  {
    "start": "3414000",
    "end": "3600000"
  },
  {
    "text": "yeah here in c-sharp 7.2 a feature got snuck in that was called generalized",
    "start": "3414930",
    "end": "3420880"
  },
  {
    "text": "async return types and one of those is actually you can see an example of both",
    "start": "3420880",
    "end": "3427540"
  },
  {
    "text": "of the things where that's important here if you notice I a sink disposable to suppose a sink returns a value tasks",
    "start": "3427540",
    "end": "3433660"
  },
  {
    "text": "and here this also returns a value task of of a bull and the reason for that in",
    "start": "3433660",
    "end": "3439750"
  },
  {
    "text": "this instance to use value tasks is because there's some optimizations that can be made in some memory allocations",
    "start": "3439750",
    "end": "3445900"
  },
  {
    "text": "that we don't need for that so the compiler now recognizes that an async method doesn't have to return a task it",
    "start": "3445900",
    "end": "3453700"
  },
  {
    "text": "has to return something that has the right pattern and the right methods so that it can be awaited okay",
    "start": "3453700",
    "end": "3460660"
  },
  {
    "text": "the second reason for that is if you look at IA sync a numerator or IA sync",
    "start": "3460660",
    "end": "3466030"
  },
  {
    "text": "innumerable itself we can await that because we recognize that pattern and",
    "start": "3466030",
    "end": "3474310"
  },
  {
    "text": "then this was right there i thought yeah",
    "start": "3474310",
    "end": "3477660"
  },
  {
    "text": "why do we have tests that wait tasks that result get a waiter and get result",
    "start": "3483030",
    "end": "3489990"
  },
  {
    "text": "probably mostly historical there were times when you needed to do something synchronous at some point bubble up to",
    "start": "3490080",
    "end": "3496120"
  },
  {
    "text": "it so it's there but I would I would recommend moving forward that that would",
    "start": "3496120",
    "end": "3501640"
  },
  {
    "text": "probably be a Coatesville anytime I see a dot wait or a dot result like I started with in the async breakfast when",
    "start": "3501640",
    "end": "3508870"
  },
  {
    "text": "I saw a test out the way dot wait yeah I would really try to avoid that yeah I",
    "start": "3508870",
    "end": "3522870"
  },
  {
    "text": "think I know I am pretty sure that there's a project nougat project called",
    "start": "3522870",
    "end": "3529630"
  },
  {
    "text": "dotnet analyzers that I think finds that and it will give you if you install that",
    "start": "3529630",
    "end": "3534880"
  },
  {
    "text": "analyzing your project it will give you analyzer warnings if someone does those I can look that up for you after as we",
    "start": "3534880",
    "end": "3543040"
  },
  {
    "text": "get done one last question and then I will make sure the next person gets up in it okay way back there oh dear",
    "start": "3543040",
    "end": "3550680"
  },
  {
    "text": "why does it move next a sink take a cancellation token because it really doesn't need one all I have to do to",
    "start": "3553490",
    "end": "3560040"
  },
  {
    "text": "cancel this is don't ask for it I could",
    "start": "3560040",
    "end": "3570090"
  },
  {
    "text": "so the question is the assertion was I could ask for and then later decide I could cancel it if we look at the code",
    "start": "3570090",
    "end": "3575580"
  },
  {
    "text": "that I wrote here let's say you've asked",
    "start": "3575580",
    "end": "3582690"
  },
  {
    "text": "for the first 25 and now you've asked for the 26th element so I have nothing here in this yield return I'm going to",
    "start": "3582690",
    "end": "3588570"
  },
  {
    "text": "go to the issues return plus equals whatever come back up here there's more",
    "start": "3588570",
    "end": "3594210"
  },
  {
    "text": "pages and I'm going to make a web request so before it actually awaits I've sent that packet right so I've made",
    "start": "3594210",
    "end": "3601650"
  },
  {
    "text": "that asynchronous request so cancel at that point is meaningless until it comes",
    "start": "3601650",
    "end": "3606810"
  },
  {
    "text": "back because the rest of this is gonna execute anyway okay so one of the things that we said earlier in the current",
    "start": "3606810",
    "end": "3614100"
  },
  {
    "text": "model is that if you support cancellation cancellation should actually mean that you can cancel it",
    "start": "3614100",
    "end": "3619710"
  },
  {
    "text": "once I've already made the web request it's already out there on another machine so cancel really doesn't do",
    "start": "3619710",
    "end": "3625230"
  },
  {
    "text": "anything other than throwing away the results when they get back okay good",
    "start": "3625230",
    "end": "3630360"
  },
  {
    "text": "question though at this point I'm gonna make sure the next person can set up but I will be more than happy to take questions individually up here I want to",
    "start": "3630360",
    "end": "3637410"
  },
  {
    "text": "thank you for all of your time and please if you like this analogy please",
    "start": "3637410",
    "end": "3644990"
  },
  {
    "text": "give me feedback on that either here on Twitter or if you look at the repo",
    "start": "3644990",
    "end": "3650130"
  },
  {
    "text": "create issues because I think this is a has been a good way to explain the concepts and that's one of the things",
    "start": "3650130",
    "end": "3657060"
  },
  {
    "text": "I'm going to be doing in terms of reworking the docs thank you very much for your time",
    "start": "3657060",
    "end": "3662780"
  },
  {
    "text": "you",
    "start": "3663010",
    "end": "3665070"
  }
]