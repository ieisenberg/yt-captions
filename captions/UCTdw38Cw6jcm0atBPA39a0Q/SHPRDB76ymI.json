[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "so hi everyone and welcome to distributed tracing and monitoring with",
    "start": "30",
    "end": "5040"
  },
  {
    "text": "open census Mayor Lehman who was professor in London in parallel college",
    "start": "5040",
    "end": "12380"
  },
  {
    "text": "formulated the set of rules which later became known as Lehman laws one is he",
    "start": "12380",
    "end": "18270"
  },
  {
    "text": "one of his rules says that change in software is inevitable and it's not this",
    "start": "18270",
    "end": "24539"
  },
  {
    "text": "earlier result of bad design or bad implementation it just because things change over time and as a result we need",
    "start": "24539",
    "end": "31830"
  },
  {
    "text": "to adjust our software and there is nothing bad about it so it's not surprising that in the last twenty years",
    "start": "31830",
    "end": "39000"
  },
  {
    "text": "we were evident to software evolution that happens and they changed our lives",
    "start": "39000",
    "end": "46230"
  },
  {
    "text": "and the technology that that we use we were running our workloads and premises",
    "start": "46230",
    "end": "51600"
  },
  {
    "text": "and then at some point we started to migrate this workloads into the cloud we",
    "start": "51600",
    "end": "57059"
  },
  {
    "text": "run the workloads on virtual machines but then after some time we realized",
    "start": "57059",
    "end": "62280"
  },
  {
    "text": "that we might optimize the footprint of our workloads to run it on containers",
    "start": "62280",
    "end": "70140"
  },
  {
    "text": "instead of virtual machines and then if previously we were developing applications as monoliths that were hard",
    "start": "70140",
    "end": "77670"
  },
  {
    "text": "to scale over time our development teams grew up and so now we have multiple",
    "start": "77670",
    "end": "84390"
  },
  {
    "text": "teams working together and so it's much better to develop micro services so that",
    "start": "84390",
    "end": "90150"
  },
  {
    "text": "every team can focus on its own micro service and make it much more efficient",
    "start": "90150",
    "end": "96860"
  },
  {
    "text": "for everyone we were developing using a single stack and nowadays you can find",
    "start": "96860",
    "end": "105090"
  },
  {
    "text": "many applications which are micro services developed in multiple programming languages so called",
    "start": "105090",
    "end": "110820"
  },
  {
    "text": "polyglots and if previously people were using single clouds nowadays many",
    "start": "110820",
    "end": "117540"
  },
  {
    "text": "companies realize that they need to use multiple clouds or multiple cloud",
    "start": "117540",
    "end": "123119"
  },
  {
    "text": "providers and a hybrid because of some compliance constraints or for redundancy",
    "start": "123119",
    "end": "129959"
  },
  {
    "text": "or some other reasons now even the second wave of this",
    "start": "129959",
    "end": "135030"
  },
  {
    "text": "innovation previously people were running on virtual machines went to containers but now even from containers",
    "start": "135030",
    "end": "141210"
  },
  {
    "text": "people move towards the surrealist world which is cloud functions or other types",
    "start": "141210",
    "end": "147060"
  },
  {
    "text": "of severest workloads where you focus mostly on functionality and less on",
    "start": "147060",
    "end": "152510"
  },
  {
    "text": "managing your infrastructure so with all",
    "start": "152510",
    "end": "157620"
  },
  {
    "text": "these changes also come new challenges how do we debug software like this when",
    "start": "157620",
    "end": "163800"
  },
  {
    "text": "we move pretty substantially from one product to another from one language to",
    "start": "163800",
    "end": "169020"
  },
  {
    "text": "multiple languages from one infrastructure to a different set of infrastructure how do we deal with",
    "start": "169020",
    "end": "176790"
  },
  {
    "text": "problems how do we detect that there is a problem with our software and how do we fix those problems how do we nail the",
    "start": "176790",
    "end": "184500"
  },
  {
    "text": "development practices do we need to adjust the practices to the changes in",
    "start": "184500",
    "end": "189630"
  },
  {
    "text": "the technology or maybe we can continue working like we used to work maybe 20",
    "start": "189630",
    "end": "195120"
  },
  {
    "text": "years ago how do we deploy the workloads that we develop nowadays do we need to",
    "start": "195120",
    "end": "201570"
  },
  {
    "text": "package them in a different way than before how do we manage configuration how do we manage security and more",
    "start": "201570",
    "end": "209070"
  },
  {
    "text": "specifically secrets that you might have in your application so there are a lot of problems that nowadays need solutions",
    "start": "209070",
    "end": "215820"
  },
  {
    "text": "and obviously this talk cannot solve all this problem so we'll focus on one area",
    "start": "215820",
    "end": "222000"
  },
  {
    "text": "which is observability so let me first introduce myself before we actually",
    "start": "222000",
    "end": "228720"
  },
  {
    "text": "delve into this topic so I'm a Simon Seltzer software engineer at Google focusing on developer experience with",
    "start": "228720",
    "end": "236130"
  },
  {
    "text": "infrastructure and operation tools you can find me on github Twitter LinkedIn or any other social media so what is",
    "start": "236130",
    "end": "245489"
  },
  {
    "text": "observability one easy way to describe it is being able to debug the system and",
    "start": "245489",
    "end": "251310"
  },
  {
    "text": "gain insights into systems behavior people say nowadays that observability",
    "start": "251310",
    "end": "258930"
  },
  {
    "text": "just a new way to say the older term which everyone knows is monitoring but",
    "start": "258930",
    "end": "264240"
  },
  {
    "text": "that is not true cyndy 3d rom came up with this nice Venn",
    "start": "264240",
    "end": "269720"
  },
  {
    "text": "diagram which explains why it's not true with monetary typically you create your",
    "start": "269720",
    "end": "276320"
  },
  {
    "text": "monitors that check on predictable failures you know that you can write",
    "start": "276320",
    "end": "282169"
  },
  {
    "text": "some code which will repeatedly check on some condition and if that condition",
    "start": "282169",
    "end": "287500"
  },
  {
    "text": "stops working you know that likely you found a failure with testing efforts you",
    "start": "287500",
    "end": "295160"
  },
  {
    "text": "can verify your software before your deploy to production with observer ability it's actually all potential",
    "start": "295160",
    "end": "301340"
  },
  {
    "text": "issues that you might find throughout the full lifecycle of development bead before you deploy to production during",
    "start": "301340",
    "end": "308000"
  },
  {
    "text": "the run in production or any other combination so every possible failure",
    "start": "308000",
    "end": "314510"
  },
  {
    "text": "that can be detected in your systems and being able to understand the source of",
    "start": "314510",
    "end": "320900"
  },
  {
    "text": "that failure this all falls into this area of observability so observability",
    "start": "320900",
    "end": "327020"
  },
  {
    "text": "is not only monitoring it's way more and don't please don't confuse it",
    "start": "327020",
    "end": "332710"
  },
  {
    "text": "Baron Schwartz who was very known for his contributions to my sequel's once",
    "start": "332710",
    "end": "338599"
  },
  {
    "text": "said that monitoring tells you whether the system works and observability lets you ask why it's not working this is",
    "start": "338599",
    "end": "345950"
  },
  {
    "text": "another pretty good statement that helps understanding the difference between",
    "start": "345950",
    "end": "351020"
  },
  {
    "text": "monitoring and observability now when we talk about observability we need to have",
    "start": "351020",
    "end": "358250"
  },
  {
    "text": "holistic approach we need to look at the same timeline and put different signals",
    "start": "358250",
    "end": "364490"
  },
  {
    "text": "that come from our systems it could be tracers it could be metrics it could be",
    "start": "364490",
    "end": "369650"
  },
  {
    "text": "a profiling information it could be logs putting all the signals on the same timeline and then trying to understand",
    "start": "369650",
    "end": "376520"
  },
  {
    "text": "from the entire context what's going on with your system is very efficient way",
    "start": "376520",
    "end": "381889"
  },
  {
    "text": "to understand and spot the problems now what if I told you that there is",
    "start": "381889",
    "end": "388490"
  },
  {
    "start": "386000",
    "end": "386000"
  },
  {
    "text": "ultimate recipe for making your distributed systems always reliable and successful it's rethinks that if you",
    "start": "388490",
    "end": "395960"
  },
  {
    "text": "implement these three things you are going to be successful it just always works so first",
    "start": "395960",
    "end": "401580"
  },
  {
    "text": "is truck system house detect problems it's the second thing and then fix and",
    "start": "401580",
    "end": "408300"
  },
  {
    "text": "refine all like rinse and repeat it's relatively a simple life cycle and",
    "start": "408300",
    "end": "413390"
  },
  {
    "text": "everybody can implement it but apparently people still fail and the",
    "start": "413390",
    "end": "418770"
  },
  {
    "text": "reason people fail it's because this problem is in a way similar to a dream",
    "start": "418770",
    "end": "424170"
  },
  {
    "text": "problem you know if you want to lose weight you can go to gym you can practice three times a week eat healthy",
    "start": "424170",
    "end": "430590"
  },
  {
    "text": "and the results will come over time but still people don't do it and the reason",
    "start": "430590",
    "end": "435600"
  },
  {
    "text": "they don't do it is because even though the recipe is well known it's not that easy to implement observability in in",
    "start": "435600",
    "end": "444060"
  },
  {
    "text": "distributed systems is hard an expensive problem to solve you need to deal with",
    "start": "444060",
    "end": "449370"
  },
  {
    "text": "context propagation between different components multiple environments sometimes things like vendor lock-in",
    "start": "449370",
    "end": "456150"
  },
  {
    "text": "external dependencies of course high cost and as a result you might find it",
    "start": "456150",
    "end": "462300"
  },
  {
    "text": "pretty complex problem to solve so meet open sensors open census is a single",
    "start": "462300",
    "end": "469740"
  },
  {
    "text": "distribution of libraries written in multiple programming languages that help",
    "start": "469740",
    "end": "475440"
  },
  {
    "text": "you with a matrix collection and tracing of your distributed distributed systems",
    "start": "475440",
    "end": "483830"
  },
  {
    "text": "so to kind of delve a little bit more into what it provides it's a single set",
    "start": "483830",
    "end": "489510"
  },
  {
    "text": "of api's implemented in a programming languages including you know all the",
    "start": "489510",
    "end": "495720"
  },
  {
    "text": "popular ones for tracing and metrics collection it is also providing",
    "start": "495720",
    "end": "501720"
  },
  {
    "text": "integrations with popular web and remote procedure call frameworks so that you",
    "start": "501720",
    "end": "507120"
  },
  {
    "text": "can get more visibility into how your dependencies are doing without doing any",
    "start": "507120",
    "end": "513060"
  },
  {
    "text": "extra work because it already comes integrated it also provides standard",
    "start": "513060",
    "end": "519300"
  },
  {
    "text": "protocol for context propagation between different components of distributed system and we'll talk about that a",
    "start": "519300",
    "end": "526320"
  },
  {
    "text": "little later in this in this presentation then it provides exporters which allow you to create all",
    "start": "526320",
    "end": "534110"
  },
  {
    "text": "this observability signals using the libraries that are all open source and then send it to the backend of your",
    "start": "534110",
    "end": "540200"
  },
  {
    "text": "choice it could be you know application insights if you work with Azure or it",
    "start": "540200",
    "end": "545690"
  },
  {
    "text": "could be stock driver if you work with Google or any other popular vendor for a",
    "start": "545690",
    "end": "551510"
  },
  {
    "text": "monitoring tracing and other observability technologies finally it",
    "start": "551510",
    "end": "557180"
  },
  {
    "text": "provides the collector that we'll talk later on about which helps you with",
    "start": "557180",
    "end": "563240"
  },
  {
    "text": "smart traces in matrix collection okay",
    "start": "563240",
    "end": "570260"
  },
  {
    "text": "so I'm going to show the the demos in c-sharp and that's why I put a slide",
    "start": "570260",
    "end": "578060"
  },
  {
    "text": "that explains the nougat packages that you can download to to use open census in c-sharp but similarly you can find",
    "start": "578060",
    "end": "586780"
  },
  {
    "text": "NPM packages for node or go packages Java and so on so basically for all the",
    "start": "586780",
    "end": "593060"
  },
  {
    "text": "popular languages there is a corresponding repo which holds the",
    "start": "593060",
    "end": "598640"
  },
  {
    "text": "development for this packages and then in the relevant package manager you can find all the open census packages so for",
    "start": "598640",
    "end": "605690"
  },
  {
    "text": "dotnet the four packages which are likely most important to you is open",
    "start": "605690",
    "end": "611540"
  },
  {
    "text": "census dot abstractions which defines all the contracts all the api's that we will talk about without the",
    "start": "611540",
    "end": "617570"
  },
  {
    "text": "implementation and then just the open census which is the actual implementation for these contracts then",
    "start": "617570",
    "end": "623900"
  },
  {
    "text": "if you want to instrument your HTTP client you can work with open census dot",
    "start": "623900",
    "end": "629060"
  },
  {
    "text": "collectors or dependencies and for asp.net core you can work with open",
    "start": "629060",
    "end": "634640"
  },
  {
    "text": "census collector dot asp net core and then there is the full list of packages that you can access which also includes",
    "start": "634640",
    "end": "641600"
  },
  {
    "text": "packages for different exporters like application insights from e to Zipkin jäger and so on and we'll see some of",
    "start": "641600",
    "end": "648920"
  },
  {
    "text": "that today so before we delve into the actual",
    "start": "648920",
    "end": "654410"
  },
  {
    "start": "651000",
    "end": "651000"
  },
  {
    "text": "samples in c-sharp how you can instrument your code and do tracing with open census let's talk about",
    "start": "654410",
    "end": "661640"
  },
  {
    "text": "are the typical peridot paradigms when your instrument your code with tracing",
    "start": "661640",
    "end": "668600"
  },
  {
    "text": "so typically there are two scenarios bike roughly speaking one is agentless and another is using",
    "start": "668600",
    "end": "675680"
  },
  {
    "text": "agent in agentless scenario typically you have the workload up and running it",
    "start": "675680",
    "end": "681110"
  },
  {
    "text": "could be in container it could be in the VM it could be on Windows and Linux or any other operating system but basically",
    "start": "681110",
    "end": "688040"
  },
  {
    "text": "your application runs likely in process and then there is a component which",
    "start": "688040",
    "end": "693860"
  },
  {
    "text": "lives in process with your application that collects all the traces that the",
    "start": "693860",
    "end": "699770"
  },
  {
    "text": "application produces and then sends these traces to the back end of your choice okay in this case your",
    "start": "699770",
    "end": "705650"
  },
  {
    "text": "application needs to to do some work to basically call the right api's to",
    "start": "705650",
    "end": "711590"
  },
  {
    "text": "initialize this exporter and then send the and then it the exporter will send the traces that get generated all the",
    "start": "711590",
    "end": "719300"
  },
  {
    "text": "way to the trace backend it is typically the easiest and most common approach but",
    "start": "719300",
    "end": "726230"
  },
  {
    "text": "it will not work for all the sonars and this is why we have the second approach which is using agent with agent",
    "start": "726230",
    "end": "733730"
  },
  {
    "text": "typically you have your application up and running somewhere container VM whatever and then the agent lives",
    "start": "733730",
    "end": "741590"
  },
  {
    "text": "alongside your application but it's kind of side by side so it's not in process",
    "start": "741590",
    "end": "747200"
  },
  {
    "text": "it could be like a separate process or it could be a sidecar proxy if you run in container and kubernetes for example",
    "start": "747200",
    "end": "753710"
  },
  {
    "text": "but it's it's a separate component that lives in a different process or might be",
    "start": "753710",
    "end": "760400"
  },
  {
    "text": "even different container in this case application might produce traces and",
    "start": "760400",
    "end": "765410"
  },
  {
    "text": "this traces will get generated and sent it could be sed out it could be other",
    "start": "765410",
    "end": "773000"
  },
  {
    "text": "ways but essentially the application doesn't know that there is a separate component that collects all these traces",
    "start": "773000",
    "end": "779360"
  },
  {
    "text": "and sends over to the backend of your choice this is very common in cloud",
    "start": "779360",
    "end": "786260"
  },
  {
    "text": "environments and also in systems which need to scale to scale up quickly",
    "start": "786260",
    "end": "793650"
  },
  {
    "text": "so in order to kind of be on the same page with all the terms for tracing",
    "start": "793650",
    "end": "800220"
  },
  {
    "text": "let's explore what is trace in the context of open census and what can we",
    "start": "800220",
    "end": "806760"
  },
  {
    "text": "do with it so first of all trace is a collection of spans span is a single",
    "start": "806760",
    "end": "813240"
  },
  {
    "text": "operation in the trace it's like a logical operation that has the start has the end has its name and everything that",
    "start": "813240",
    "end": "820440"
  },
  {
    "text": "happens between the start and and the end is what you want to kind of showcase",
    "start": "820440",
    "end": "826740"
  },
  {
    "text": "in this in this pan sampler is a component that decides whether to export",
    "start": "826740",
    "end": "834270"
  },
  {
    "text": "a given span or not we'll see later on that we might not always want to export",
    "start": "834270",
    "end": "840660"
  },
  {
    "text": "all the telemetry that our systems are producing but we might want to export",
    "start": "840660",
    "end": "845820"
  },
  {
    "text": "only subset of all traces and this is why we need a component that takes this decision what to export and what to",
    "start": "845820",
    "end": "852180"
  },
  {
    "text": "leave then there is exporter which is the component that sends all the traces",
    "start": "852180",
    "end": "858089"
  },
  {
    "text": "that were collected locally be it in the first scenario that we discussed without agents or be it in the second scenario",
    "start": "858089",
    "end": "865130"
  },
  {
    "text": "but essentially this traces that were created they need to be sent over to the",
    "start": "865130",
    "end": "871740"
  },
  {
    "text": "backend of the choice and the exporter is the component that is in charge of sending these traces to a back-end so in",
    "start": "871740",
    "end": "880170"
  },
  {
    "text": "this graphical example we can see that we created a trace which basically shows",
    "start": "880170",
    "end": "886400"
  },
  {
    "text": "the flow of a system we called messages which made the call in to us which made",
    "start": "886400",
    "end": "893490"
  },
  {
    "text": "a call to cached or get and so on and it looks like a call start but the",
    "start": "893490",
    "end": "899190"
  },
  {
    "text": "difference is that it's distributed system so every component could live on the same machine or could also live on a",
    "start": "899190",
    "end": "905430"
  },
  {
    "text": "completely different machine cloud or other environment ok so now let's see",
    "start": "905430",
    "end": "912029"
  },
  {
    "text": "how to kind of get started to create a trace using c-sharp with open sensors and",
    "start": "912029",
    "end": "918060"
  },
  {
    "text": "again the reason I'm showing it in c-sharp it just you know I choose C sharp but a very similar api's identical",
    "start": "918060",
    "end": "926850"
  },
  {
    "text": "besides that difference in the language also exists in Java go Python and other languages so",
    "start": "926850",
    "end": "934080"
  },
  {
    "text": "if you use a different language you are welcome to try similar things using that",
    "start": "934080",
    "end": "940830"
  },
  {
    "text": "language so first of all we need to configure the exporter we are going to",
    "start": "940830",
    "end": "946530"
  },
  {
    "text": "use the first agent agentless approach so our agent is like we don't have it",
    "start": "946530",
    "end": "955320"
  },
  {
    "text": "it's basically code that we need to initialize that will send all the traces that were generated all the way to the",
    "start": "955320",
    "end": "960930"
  },
  {
    "text": "backend in process so I create in this case Zipkin trace exporter so in my demo",
    "start": "960930",
    "end": "967080"
  },
  {
    "text": "I'm going to use a distributed system called Zipkin which you might be some of",
    "start": "967080",
    "end": "973950"
  },
  {
    "text": "you might be familiar it's all open source it was invented by Twitter and it",
    "start": "973950",
    "end": "979050"
  },
  {
    "text": "allows you to collect traces and then visualize the flow of your a distributed system so we'll see it shortly so",
    "start": "979050",
    "end": "987150"
  },
  {
    "text": "typically with with exporters we have the options object where we specify details of how to connect with that",
    "start": "987150",
    "end": "993270"
  },
  {
    "text": "specific exporter and in this case we also specify the the name of the service",
    "start": "993270",
    "end": "1000050"
  },
  {
    "text": "for which we create all the stresses and then we provide tracing dot export",
    "start": "1000050",
    "end": "1005060"
  },
  {
    "text": "component which is where all the traces gets generated locally before they are",
    "start": "1005060",
    "end": "1011390"
  },
  {
    "text": "sent over to the backend of the choice and then we start the exporter after we",
    "start": "1011390",
    "end": "1017330"
  },
  {
    "start": "1016000",
    "end": "1016000"
  },
  {
    "text": "created the exporter we need to configure sampler sampler I remind it's",
    "start": "1017330",
    "end": "1022400"
  },
  {
    "text": "a component that decides whether to take the trace and send it or skip it in our",
    "start": "1022400",
    "end": "1028280"
  },
  {
    "text": "case we are going to use a logic which will take every single trace so 100% of",
    "start": "1028280",
    "end": "1033980"
  },
  {
    "text": "all traces that were generated will basically take this trace as an export",
    "start": "1033980",
    "end": "1039339"
  },
  {
    "text": "but you can also implement any other logics we can take percentage of all traces and you can take some other",
    "start": "1039339",
    "end": "1047120"
  },
  {
    "text": "decision may based on some statistical analysis that you do over Trevor else it could be we'll discuss that in a bit",
    "start": "1047120",
    "end": "1054650"
  },
  {
    "text": "more details in a third demo but in this case you can see that we have sampler",
    "start": "1054650",
    "end": "1060200"
  },
  {
    "text": "dot always sample which is the one that will take all the traces then if I want",
    "start": "1060200",
    "end": "1067700"
  },
  {
    "start": "1066000",
    "end": "1066000"
  },
  {
    "text": "to get a hold of the object that produces traces there is a way to do so with tracing your tracer you can also",
    "start": "1067700",
    "end": "1074659"
  },
  {
    "text": "plug this into an inversion of control system if you use c-sharp or something",
    "start": "1074659",
    "end": "1081350"
  },
  {
    "text": "similar in Java because all this objects they implement",
    "start": "1081350",
    "end": "1087049"
  },
  {
    "text": "corresponding interfaces so for example tracing the tracer implements interface called AI tracer so you can plug it",
    "start": "1087049",
    "end": "1093950"
  },
  {
    "text": "really easy into your dependency injection framework okay now",
    "start": "1093950",
    "end": "1100309"
  },
  {
    "text": "the actual part so before this point we created the exporter we created the",
    "start": "1100309",
    "end": "1106999"
  },
  {
    "text": "sampler but now we actually need to generate the traces and the spans that belong to these traces so this is how we",
    "start": "1106999",
    "end": "1114889"
  },
  {
    "text": "can do it I typically recommend to use sculpt spans which means that you can narrow",
    "start": "1114889",
    "end": "1122960"
  },
  {
    "text": "the scope of the span that you create with the using statement in C sharp so",
    "start": "1122960",
    "end": "1128480"
  },
  {
    "text": "you don't need to explicitly call finish for that span but essentially we create a span we give it a name we started and",
    "start": "1128480",
    "end": "1136940"
  },
  {
    "text": "then we can do some work and we know that everything that happens within the scope of that span is going to be",
    "start": "1136940",
    "end": "1144230"
  },
  {
    "text": "accounted for in the duration of that span okay so let's see it before we",
    "start": "1144230",
    "end": "1150799"
  },
  {
    "text": "actually see there is a link here that has all this samples that I'm going to",
    "start": "1150799",
    "end": "1156559"
  },
  {
    "text": "show and so you can later check it take a look and reproduce it yourself but now",
    "start": "1156559",
    "end": "1163999"
  },
  {
    "text": "let's try and see it",
    "start": "1163999",
    "end": "1167320"
  },
  {
    "text": "so basically the code that I'm going to show you is very much similar to what we",
    "start": "1170340",
    "end": "1181620"
  },
  {
    "text": "saw in the in the slides okay I just go where really quickly okay we create the",
    "start": "1181620",
    "end": "1192390"
  },
  {
    "text": "exporter and then we configure the",
    "start": "1192390",
    "end": "1198529"
  },
  {
    "text": "sampler in this case hundred percent if we want get hold of the tracer we can do",
    "start": "1198529",
    "end": "1206730"
  },
  {
    "text": "it this way or in any other method by tracing the tracer and in this case we",
    "start": "1206730",
    "end": "1212610"
  },
  {
    "text": "create a scope span for the uber span that starts the entire activity here for",
    "start": "1212610",
    "end": "1219330"
  },
  {
    "text": "simplicity since it's just getting started sample I just do everything on the same machine but we'll see also",
    "start": "1219330",
    "end": "1225600"
  },
  {
    "text": "later on how things can be done on different machines so this is the do",
    "start": "1225600",
    "end": "1230909"
  },
  {
    "text": "work method that we try to instrument and in this do work we also have multiple iterations of something also do",
    "start": "1230909",
    "end": "1239760"
  },
  {
    "text": "work itself runs in multiple iterations and every iteration we want to create a",
    "start": "1239760",
    "end": "1245809"
  },
  {
    "text": "span that basically describes the duration of that so this is how we can",
    "start": "1245809",
    "end": "1251880"
  },
  {
    "text": "do it with the start scope span and we",
    "start": "1251880",
    "end": "1256950"
  },
  {
    "text": "can also add annotations which basically means that we can add some additional",
    "start": "1256950",
    "end": "1262169"
  },
  {
    "text": "metadata that describes the span that we just produced so for example if you work with big data tables you might add a",
    "start": "1262169",
    "end": "1269909"
  },
  {
    "text": "notation which says what table are working with could be useful when you look at the traces so let's let's run it",
    "start": "1269909",
    "end": "1276960"
  },
  {
    "text": "and then see what it essentially produces and why it's good for us okay",
    "start": "1276960",
    "end": "1285690"
  },
  {
    "text": "so it's it's doing some busy work so there are some threads dot dot sleep for",
    "start": "1285690",
    "end": "1291260"
  },
  {
    "text": "simulating the things take time it's like really simple thing okay",
    "start": "1291260",
    "end": "1298740"
  },
  {
    "text": "so it looks like it finished and now I can go into Zipkin so in this case I run",
    "start": "1298740",
    "end": "1307230"
  },
  {
    "text": "zipless in a container so it runs locally on my machine it could be a Zipkin as somewhere else and I can do",
    "start": "1307230",
    "end": "1315540"
  },
  {
    "text": "find traces for this service that we instrumented and you will see here that",
    "start": "1315540",
    "end": "1321570"
  },
  {
    "text": "we have eleven spans of one trace okay so for this service we created this uber",
    "start": "1321570",
    "end": "1329400"
  },
  {
    "text": "span for Maine and in Maine we made a few calls for do work and every call for",
    "start": "1329400",
    "end": "1335429"
  },
  {
    "text": "the work took a different duration you can see it here by the number of seconds that every call tube and then if I click",
    "start": "1335429",
    "end": "1342900"
  },
  {
    "text": "I can even get some additional data like in walking the work this is the text that we added in our code so it's",
    "start": "1342900",
    "end": "1351030"
  },
  {
    "text": "relatively easy way that helps you visualize how your system behaves in terms of which component calls which",
    "start": "1351030",
    "end": "1358110"
  },
  {
    "text": "components and how long it takes so of course when you have microservices",
    "start": "1358110",
    "end": "1363960"
  },
  {
    "text": "architecture it's going to be really handy to see which micro-service calls which micro service and what actually",
    "start": "1363960",
    "end": "1371010"
  },
  {
    "text": "happens in the flow ok so I'm going to",
    "start": "1371010",
    "end": "1376260"
  },
  {
    "text": "start the second demo and then we are going to start talking about it because the tree it needs some warmup time ok",
    "start": "1376260",
    "end": "1391250"
  },
  {
    "text": "so with tracing demo that we just saw it's relatively easy to create traces",
    "start": "1397160",
    "end": "1405150"
  },
  {
    "text": "it's easy to create spans and there is this exporter component that does all the heavy lifting of taking the traces",
    "start": "1405150",
    "end": "1411480"
  },
  {
    "text": "and spans that were created or on our component and sending over this",
    "start": "1411480",
    "end": "1417000"
  },
  {
    "text": "information to to the back end of the choice but there are some problems that we still need to solve one of them is",
    "start": "1417000",
    "end": "1422640"
  },
  {
    "text": "trace context propagation so you might have multiple micro-services talking to each other so in this case front and",
    "start": "1422640",
    "end": "1429330"
  },
  {
    "text": "talks to add service but also to check out and then check out makes two calls",
    "start": "1429330",
    "end": "1435840"
  },
  {
    "text": "downstream to payment and to email services and if you think about this",
    "start": "1435840",
    "end": "1441570"
  },
  {
    "text": "problem that happening in multiple transactions in parallels we might have",
    "start": "1441570",
    "end": "1447030"
  },
  {
    "text": "multiple users which execute exactly the same code paths exactly the same activity and you want to distinguish",
    "start": "1447030",
    "end": "1454110"
  },
  {
    "text": "between different activities of different users so for that you need to have traced context propagation and now",
    "start": "1454110",
    "end": "1460350"
  },
  {
    "text": "the reason why it's important problem to solve is because essentially you might use things like a be testing so with a/b",
    "start": "1460350",
    "end": "1467670"
  },
  {
    "text": "testing if you decide to give your control group version a and then your",
    "start": "1467670",
    "end": "1473670"
  },
  {
    "text": "test group version B might be that the components downstream that serve the",
    "start": "1473670",
    "end": "1479970"
  },
  {
    "text": "users that got version B they might behave differently because user gets",
    "start": "1479970",
    "end": "1485580"
  },
  {
    "text": "version B right because you try to roll out a new version so you might want to expose a different behavior for B versus",
    "start": "1485580",
    "end": "1493830"
  },
  {
    "text": "a so for that you need to provide some additional information for the downstream components so that they know",
    "start": "1493830",
    "end": "1500220"
  },
  {
    "text": "that they need to behave differently and this is why we need trace context propagation this among other things also",
    "start": "1500220",
    "end": "1507420"
  },
  {
    "text": "helps us to construct this nice picture that shows who caused who and why but we",
    "start": "1507420",
    "end": "1513600"
  },
  {
    "text": "also could see a previously with Zipkin if we have this trace ad that is",
    "start": "1513600",
    "end": "1519080"
  },
  {
    "text": "propagated all the way throughout the the call chain and also all the spans",
    "start": "1519080",
    "end": "1526710"
  },
  {
    "text": "have their unique ID is associated with corresponding parent ID this is when we can create these",
    "start": "1526710",
    "end": "1534210"
  },
  {
    "text": "graphical representations like you see on the right hand side that help you",
    "start": "1534210",
    "end": "1539580"
  },
  {
    "text": "understand really what happens with the given specific transaction and also to distinguish that transaction from other",
    "start": "1539580",
    "end": "1547049"
  },
  {
    "text": "transactions that have similar type but were initiated by a different user so",
    "start": "1547049",
    "end": "1554369"
  },
  {
    "text": "luckily with open census you get this for free open census came up with w3c",
    "start": "1554369",
    "end": "1559580"
  },
  {
    "text": "standard which was recently approved and this standard basically defined what",
    "start": "1559580",
    "end": "1565200"
  },
  {
    "text": "does it mean to propagate context between component a and component B in distributed systems and the industry is",
    "start": "1565200",
    "end": "1572070"
  },
  {
    "text": "slowly very steadily moving into this standard so we're not going to get into",
    "start": "1572070",
    "end": "1579330"
  },
  {
    "text": "too much details there is a link here to the actual proposal on w3c but the good",
    "start": "1579330",
    "end": "1585509"
  },
  {
    "text": "thing is that all of the libraries that you can use with open census bead for",
    "start": "1585509",
    "end": "1590549"
  },
  {
    "text": "traces or a metrics collection in any language that you choose they all implement this trace context propagation",
    "start": "1590549",
    "end": "1599720"
  },
  {
    "text": "component or algorithm out-of-the-box so you can be assured that if you choose",
    "start": "1599720",
    "end": "1607080"
  },
  {
    "text": "to use it it's it's a good choice because every one every one is going to align with this okay so we were talking",
    "start": "1607080",
    "end": "1616349"
  },
  {
    "text": "about mostly traces collection but open census also allows you to do metrics",
    "start": "1616349",
    "end": "1621479"
  },
  {
    "text": "collection so let's talk about that now just like with traces let's first talk",
    "start": "1621479",
    "end": "1627029"
  },
  {
    "start": "1624000",
    "end": "1624000"
  },
  {
    "text": "about the different terms that we have in this world of metrics collection with open sensors and then once we nail the",
    "start": "1627029",
    "end": "1634379"
  },
  {
    "text": "the terms we'll see the demo that kind of glues all these things together so",
    "start": "1634379",
    "end": "1640200"
  },
  {
    "text": "what you can see here on this picture this is excerpt from stock driver which",
    "start": "1640200",
    "end": "1645210"
  },
  {
    "text": "is a Google cloud system for application performance monitoring and this is just",
    "start": "1645210",
    "end": "1652440"
  },
  {
    "text": "some random graph and on this graph will see different terms of open census and how they play together so first thing is",
    "start": "1652440",
    "end": "1660509"
  },
  {
    "text": "a measure measure is what you actually want to measure and what are the units for that",
    "start": "1660509",
    "end": "1666480"
  },
  {
    "text": "so CPU utilization is is example what we try to measure in this specific case and",
    "start": "1666480",
    "end": "1672150"
  },
  {
    "text": "there are no really units because it typically percentage now second term is",
    "start": "1672150",
    "end": "1680130"
  },
  {
    "text": "tog tog is additional metadata that you can send with every measurement that",
    "start": "1680130",
    "end": "1685920"
  },
  {
    "text": "will be taken for your system one very common scenario for using tags is in",
    "start": "1685920",
    "end": "1693809"
  },
  {
    "text": "reaching the metrics that you collect with metadata of instances in which the",
    "start": "1693809",
    "end": "1700020"
  },
  {
    "text": "metrics were collected so for example you might collect the CPU utilization",
    "start": "1700020",
    "end": "1705690"
  },
  {
    "text": "from different VMs so you can send the instance ID of every VM so that",
    "start": "1705690",
    "end": "1711870"
  },
  {
    "text": "essentially when all this information comes together you can then filter by",
    "start": "1711870",
    "end": "1717330"
  },
  {
    "text": "the instance in which the information was collected and you can also add some",
    "start": "1717330",
    "end": "1723030"
  },
  {
    "text": "additional tags to the metadata that is",
    "start": "1723030",
    "end": "1728549"
  },
  {
    "text": "sent with every measurement just to fit your scenario so for example in our a",
    "start": "1728549",
    "end": "1733620"
  },
  {
    "text": "demo we are going to use environment as additional piece of information that's important that helps to do filtering ok",
    "start": "1733620",
    "end": "1743070"
  },
  {
    "text": "next thing is measurement measurement is taking the measured given point in time",
    "start": "1743070",
    "end": "1748320"
  },
  {
    "text": "it's like a dot on this graph okay next",
    "start": "1748320",
    "end": "1753870"
  },
  {
    "text": "is aggregation even though you feel like the graph is not you know just lonely",
    "start": "1753870",
    "end": "1763320"
  },
  {
    "text": "dot it's a pretty connected graph but still there is only finite number of dots that can that can be plotted on on",
    "start": "1763320",
    "end": "1770549"
  },
  {
    "text": "this graph and every dot represents a given point in time but what happens if",
    "start": "1770549",
    "end": "1777240"
  },
  {
    "text": "you have multiple measurements that you took in that point in time so for example if here every daughter present",
    "start": "1777240",
    "end": "1783480"
  },
  {
    "text": "one second might be that you two hundred measurements during that second and so",
    "start": "1783480",
    "end": "1789299"
  },
  {
    "text": "the question then becomes if we send all this measurements all the way to the back ends how do we represent",
    "start": "1789299",
    "end": "1795420"
  },
  {
    "text": "hundred measurements in that one point that we can see on the graph and this is",
    "start": "1795420",
    "end": "1801360"
  },
  {
    "text": "why we have aggregations aggregation is a method that the backend uses to",
    "start": "1801360",
    "end": "1807600"
  },
  {
    "text": "aggregate all the measurements that were taking for given point in time so that we can represent it as one point on the",
    "start": "1807600",
    "end": "1815010"
  },
  {
    "text": "graph so in this case we choose some but it really depends on the scenario it",
    "start": "1815010",
    "end": "1820470"
  },
  {
    "text": "could be mean marks count or any other aggregation that you might be familiar with from a sequel that basically takes",
    "start": "1820470",
    "end": "1827190"
  },
  {
    "text": "a lot of points and then provides one results that represent all these points",
    "start": "1827190",
    "end": "1833960"
  },
  {
    "text": "next thing is view data view data is basically like all the measurements that",
    "start": "1833960",
    "end": "1842640"
  },
  {
    "text": "were taken over time with all corresponding metadata that this measurements process so for example",
    "start": "1842640",
    "end": "1849210"
  },
  {
    "text": "every point on this graph represents the utilization but when it was sent to the",
    "start": "1849210",
    "end": "1854970"
  },
  {
    "text": "back end of the choice it was sent with the instance ad and so all of these things together they form view data if",
    "start": "1854970",
    "end": "1864900"
  },
  {
    "text": "you want some similarities if you're familiar with the sequel world where you",
    "start": "1864900",
    "end": "1869970"
  },
  {
    "text": "have tables and schemas view data is like a table it's like the actual rows",
    "start": "1869970",
    "end": "1875820"
  },
  {
    "text": "that you have in your table and then our next term which is view is like a schema",
    "start": "1875820",
    "end": "1882390"
  },
  {
    "text": "view is a definition of what we want to measure what we want to capture so it's",
    "start": "1882390",
    "end": "1888150"
  },
  {
    "text": "all of the measure tag and aggregation and the name for this table together",
    "start": "1888150",
    "end": "1893810"
  },
  {
    "text": "using one term called view and view data is the actual measurements that were",
    "start": "1893810",
    "end": "1899310"
  },
  {
    "text": "taken for this definitions okay so now let's see the demo of how we can create",
    "start": "1899310",
    "end": "1909230"
  },
  {
    "text": "metrics using open census in the c-sharp",
    "start": "1909230",
    "end": "1914690"
  },
  {
    "text": "okay so what I'm doing here first I'm creating a measure now measure",
    "start": "1919990",
    "end": "1928160"
  },
  {
    "text": "in this case it has its name description and in the units but in this case the",
    "start": "1928160",
    "end": "1934400"
  },
  {
    "text": "unit is 1 because I'm measuring the number of executions then I need to",
    "start": "1934400",
    "end": "1941300"
  },
  {
    "text": "define what tags they want to add to every measurement that will be sent over so in this case I decided to send",
    "start": "1941300",
    "end": "1948320"
  },
  {
    "text": "environment and the machine so I just defined two keys and when I will",
    "start": "1948320",
    "end": "1954559"
  },
  {
    "text": "essentially send this data over to the back end I need to provide the values for this keys so in this case I created",
    "start": "1954559",
    "end": "1961070"
  },
  {
    "text": "an object called I taught context which maps for every key corresponding value",
    "start": "1961070",
    "end": "1966410"
  },
  {
    "text": "ok now for every measurement these things are not supposed to change ok",
    "start": "1966410",
    "end": "1971480"
  },
  {
    "text": "because it just describes the metadata that is not supposed to change and so I",
    "start": "1971480",
    "end": "1977900"
  },
  {
    "text": "created this context which for environment will send test M and for machine will send my machine name now",
    "start": "1977900",
    "end": "1987590"
  },
  {
    "text": "the reason object called starts recorder this is like with trace the object that",
    "start": "1987590",
    "end": "1993020"
  },
  {
    "text": "collects all of the metrics that were collected locally before this matrix were essentially sent to the back end of",
    "start": "1993020",
    "end": "1999590"
  },
  {
    "text": "the choice now similarly to the trace I",
    "start": "1999590",
    "end": "2005290"
  },
  {
    "text": "need here to create the exporter that will essentially take this measurements that they produce in my service and send",
    "start": "2005290",
    "end": "2013840"
  },
  {
    "text": "them over to the back end of my choice so in this second demo I'm going to use Google's truck driver but essentially I",
    "start": "2013840",
    "end": "2021400"
  },
  {
    "text": "could replace it just on this line where it create the exporter I could replace it - let's say Prometheus which is",
    "start": "2021400",
    "end": "2027970"
  },
  {
    "text": "open-source metrics collection system or some other system from other vendors and",
    "start": "2027970",
    "end": "2034179"
  },
  {
    "text": "it could work equally fine I don't need to change any other things in my code for this to work only the exporter which",
    "start": "2034179",
    "end": "2041920"
  },
  {
    "text": "is one of the main benefits of using open sensors over more proprietary",
    "start": "2041920",
    "end": "2047230"
  },
  {
    "text": "solutions which holds you to specific vendor okay so I created the stock driver",
    "start": "2047230",
    "end": "2054669"
  },
  {
    "text": "exporter and then I create the view okay so like I mentioned earlier it's like a",
    "start": "2054670",
    "end": "2061149"
  },
  {
    "text": "schema for a table it's just defining what columns you have in a table in a way so in this case it has the name a",
    "start": "2061150",
    "end": "2069129"
  },
  {
    "text": "description it has the measure that they want to capture matrix for and this is",
    "start": "2069130",
    "end": "2075879"
  },
  {
    "text": "the aggregation function that they want to use in this case they use count because they count the number of",
    "start": "2075880",
    "end": "2081280"
  },
  {
    "text": "invocations and these are the tags that they want to send with every measurement",
    "start": "2081280",
    "end": "2088570"
  },
  {
    "text": "okay I just described what will be sent without that actually producing the data",
    "start": "2088570",
    "end": "2094330"
  },
  {
    "text": "yet and essentially I registered this view because with this view I can send",
    "start": "2094330",
    "end": "2101530"
  },
  {
    "text": "basically multiple metrics which describe different things and they all get collected on the same machine in",
    "start": "2101530",
    "end": "2107800"
  },
  {
    "text": "this case we will send only one metric but the reason we have this register view is that you can create multiple",
    "start": "2107800",
    "end": "2114750"
  },
  {
    "text": "views and send metrics for for this views then this is the actual code that",
    "start": "2114750",
    "end": "2121720"
  },
  {
    "text": "we want to instrument with metrics so like I said earlier I want to take",
    "start": "2121720",
    "end": "2126960"
  },
  {
    "text": "measurements of how many times the method was invoked and send this as a metric to stock driver so the matter is",
    "start": "2126960",
    "end": "2135010"
  },
  {
    "text": "foo and in this case I am trying to",
    "start": "2135010",
    "end": "2141010"
  },
  {
    "text": "record then the invocation of the method so for the stats recorder I call the",
    "start": "2141010",
    "end": "2146800"
  },
  {
    "text": "matter new measure map and a put for the metric called number of invocation that",
    "start": "2146800",
    "end": "2152320"
  },
  {
    "text": "we defined earlier I put its value which is 1 in this case and I add the metadata the tags that we",
    "start": "2152320",
    "end": "2160540"
  },
  {
    "text": "defined earlier with the corresponding values so this is essentially what will send a point of measurement all the way",
    "start": "2160540",
    "end": "2169570"
  },
  {
    "text": "to start driver now this application already runs for a while I just created",
    "start": "2169570",
    "end": "2175510"
  },
  {
    "text": "dot every time that this matter gets executed so that you can visually see that it was executed quite a few times",
    "start": "2175510",
    "end": "2181810"
  },
  {
    "text": "already and now we will try to go to stock driver and see what you can get by sending the metrics",
    "start": "2181810",
    "end": "2190099"
  },
  {
    "text": "over there",
    "start": "2190099",
    "end": "2192519"
  },
  {
    "text": "okay so this is stackdriver and I'm going to go to matrix Explorer which is",
    "start": "2203160",
    "end": "2208720"
  },
  {
    "text": "where all the metrics will go and this is where I can produce nice graphs on",
    "start": "2208720",
    "end": "2214510"
  },
  {
    "text": "the fly and I need to find the metric that I created so it's here in the list",
    "start": "2214510",
    "end": "2221440"
  },
  {
    "text": "of all the metrics a lot of metrics that you can see here this are the standard",
    "start": "2221440",
    "end": "2227590"
  },
  {
    "text": "metrics that you get out of the box if you deploy your code into Google Cloud you will get a lot of this matrix mainly",
    "start": "2227590",
    "end": "2234640"
  },
  {
    "text": "for infrastructure for free so you don't need to do anything to get them but in our case we instrument our own code so",
    "start": "2234640",
    "end": "2242590"
  },
  {
    "text": "we need to find the metric that we created which is called sample execution",
    "start": "2242590",
    "end": "2247900"
  },
  {
    "text": "counts and you can see here indeed the draft is getting created you see that",
    "start": "2247900",
    "end": "2254080"
  },
  {
    "text": "this graph is being refreshed it was interval of one minute and this is why",
    "start": "2254080",
    "end": "2260410"
  },
  {
    "text": "you see that it started at some point when I started to execute my application and this is the main reason why I wanted",
    "start": "2260410",
    "end": "2267520"
  },
  {
    "text": "to invoke my second demo ahead of actually showing it to you so that we",
    "start": "2267520",
    "end": "2272770"
  },
  {
    "text": "can see that we actually have some data that was produced because this foo",
    "start": "2272770",
    "end": "2277960"
  },
  {
    "text": "method was called and so we recorded the invocation for the metric of sample",
    "start": "2277960",
    "end": "2284530"
  },
  {
    "text": "execution count here all right so let's stop it and similarly we are going to",
    "start": "2284530",
    "end": "2293200"
  },
  {
    "text": "start the third demo because it also needs some warmup time",
    "start": "2293200",
    "end": "2301860"
  },
  {
    "text": "okay so far we we saw two demos of how you can get started with traces how you",
    "start": "2312700",
    "end": "2320390"
  },
  {
    "text": "can get started with metrics now let's talk about some of the more advanced",
    "start": "2320390",
    "end": "2325670"
  },
  {
    "text": "topics of telemetry collection so recently we introduced the component",
    "start": "2325670",
    "end": "2331700"
  },
  {
    "start": "2328000",
    "end": "2328000"
  },
  {
    "text": "co-op and sensor service which is agent and collector for metrics and traces now",
    "start": "2331700",
    "end": "2338329"
  },
  {
    "text": "one of the problems that we discovered when we started to work on this open census set of libraries is that",
    "start": "2338329",
    "end": "2346099"
  },
  {
    "text": "sometimes developers want to export the telemetry that their systems produce",
    "start": "2346099",
    "end": "2351400"
  },
  {
    "text": "into more than one back-end of the choice okay it could be relevant for",
    "start": "2351400",
    "end": "2357380"
  },
  {
    "text": "scenarios when you migrate from one cloud to another or it could be because for some compliance reasons you need to",
    "start": "2357380",
    "end": "2363349"
  },
  {
    "text": "store data in multiple places or you know there are multiple cases that might",
    "start": "2363349",
    "end": "2368900"
  },
  {
    "text": "be relevant so with the previous approach of using in process collection",
    "start": "2368900",
    "end": "2376910"
  },
  {
    "text": "of the metrics and tracers if you wanted to export the data to a different",
    "start": "2376910",
    "end": "2381920"
  },
  {
    "text": "destination you had to restart the process with the new set of changes that",
    "start": "2381920",
    "end": "2390349"
  },
  {
    "text": "configure the code to export data to a different back-end of the choice which",
    "start": "2390349",
    "end": "2396019"
  },
  {
    "text": "is not very convenient especially when you run your systems in production you don't want downtime because of that and",
    "start": "2396019",
    "end": "2401269"
  },
  {
    "text": "especially you don't want to redeploy your service with new changes for that so one this was one of the reasons why",
    "start": "2401269",
    "end": "2407329"
  },
  {
    "text": "we came up with this open sense of service which essentially allows you to do this all of the telemetry that gets",
    "start": "2407329",
    "end": "2415309"
  },
  {
    "text": "collected on your machine then essentially gets taken by I open census",
    "start": "2415309",
    "end": "2423799"
  },
  {
    "text": "agent and sent over to open census collector which is configured separately",
    "start": "2423799",
    "end": "2430309"
  },
  {
    "text": "to your code so if you want to change the configuration of where this information is gonna be exported it",
    "start": "2430309",
    "end": "2437420"
  },
  {
    "text": "could be the same place it could be a different place you can easily do that by just changing some",
    "start": "2437420",
    "end": "2443780"
  },
  {
    "text": "Yama file where we can define multiple destinations without restarting your own own service so that was one of the",
    "start": "2443780",
    "end": "2451010"
  },
  {
    "text": "reasons and also it allows us to do what we call smart sampling so let's talk",
    "start": "2451010",
    "end": "2457280"
  },
  {
    "text": "about that problem in more depth so when you collect Salama tree for your distributed systems there are two",
    "start": "2457280",
    "end": "2464569"
  },
  {
    "text": "problems that typically people complain about one is higher operational costs",
    "start": "2464569",
    "end": "2470270"
  },
  {
    "text": "and second is noise so if you think about system that has a lot of user",
    "start": "2470270",
    "end": "2476359"
  },
  {
    "text": "traffic majority of activities that you you might get from the system as a",
    "start": "2476359",
    "end": "2482990"
  },
  {
    "text": "result of user transactions they they will work and so the traces that get",
    "start": "2482990",
    "end": "2489079"
  },
  {
    "text": "generated might not always be useful for you but you will pay for that right",
    "start": "2489079",
    "end": "2494150"
  },
  {
    "text": "because all the traces that you essentially need to store you need to pay to that back-end that you decide to",
    "start": "2494150",
    "end": "2499550"
  },
  {
    "text": "work with for the storage so it might be expensive and second because your system",
    "start": "2499550",
    "end": "2505220"
  },
  {
    "text": "might generate so many trace points it might be hard for you to really nail",
    "start": "2505220",
    "end": "2511310"
  },
  {
    "text": "this down to what really is meaningful for you so it might produce a lot of noise which you obviously want to",
    "start": "2511310",
    "end": "2517670"
  },
  {
    "text": "eliminate so the solution that we came up with called smart sampling now with",
    "start": "2517670",
    "end": "2523760"
  },
  {
    "start": "2518000",
    "end": "2518000"
  },
  {
    "text": "smart sampling you have the power to decide whether you want to take all the",
    "start": "2523760",
    "end": "2529430"
  },
  {
    "text": "samples that were created on on that machine or only subset of them and there",
    "start": "2529430",
    "end": "2534589"
  },
  {
    "text": "are two types of decision that you can make first is called head based sampling and second is called tail tail based",
    "start": "2534589",
    "end": "2541490"
  },
  {
    "text": "sampling with the head base sampling when the transaction to your system comes in there is this sample assembler",
    "start": "2541490",
    "end": "2548720"
  },
  {
    "text": "component that decides whether to instrument that trace or not this",
    "start": "2548720",
    "end": "2554180"
  },
  {
    "text": "decision is taking at the start so you can say let's instrument maybe like twenty percent of all of the traces that",
    "start": "2554180",
    "end": "2561319"
  },
  {
    "text": "potentially can be generated on the system and so you this way can easily reduce the number of data that was",
    "start": "2561319",
    "end": "2568089"
  },
  {
    "text": "produced by a telemetry so it's better than nothing",
    "start": "2568089",
    "end": "2573619"
  },
  {
    "text": "but it still might be a bit problematic because what if the income request comes",
    "start": "2573619",
    "end": "2580490"
  },
  {
    "text": "in then your component decides not to trace it but if that request goes into",
    "start": "2580490",
    "end": "2587420"
  },
  {
    "text": "downstream components somewhere downstream there will be an error that you don't want to miss but the decision",
    "start": "2587420",
    "end": "2593869"
  },
  {
    "text": "is already taken so you will miss that trace obviously we want to have much",
    "start": "2593869",
    "end": "2599509"
  },
  {
    "text": "more freedom to decide what to do with the traces and to be able to make a",
    "start": "2599509",
    "end": "2605180"
  },
  {
    "text": "thoughtful decision we need to look at the entire picture so we need this transaction to end to see all of this",
    "start": "2605180",
    "end": "2613940"
  },
  {
    "text": "spans that were created as part of this entire trace if there are errors in in",
    "start": "2613940",
    "end": "2619549"
  },
  {
    "text": "the spans then might be useful to add this trace and send it over to the",
    "start": "2619549",
    "end": "2625430"
  },
  {
    "text": "backend of the choice for the ones that always produced 200 which is always",
    "start": "2625430",
    "end": "2631220"
  },
  {
    "text": "healthy might be worse to drop it to reduce the cost so we'll see a demo of",
    "start": "2631220",
    "end": "2637549"
  },
  {
    "text": "tail based sampling and before we actually see the end result of the demo",
    "start": "2637549",
    "end": "2644269"
  },
  {
    "text": "let's talk about the architecture of what we try to do here so there is an",
    "start": "2644269",
    "end": "2649759"
  },
  {
    "text": "application that we created at Google for a demo purposes called hipster shop there is a link that you can get to the",
    "start": "2649759",
    "end": "2656509"
  },
  {
    "text": "repo and see it its e-commerce application which you have front-end you",
    "start": "2656509",
    "end": "2662450"
  },
  {
    "text": "have checkout you have cart service and so on just typical application and in this case there is a micro service",
    "start": "2662450",
    "end": "2670279"
  },
  {
    "text": "called checkout which will start running some a synthetic traffic through this",
    "start": "2670279",
    "end": "2676400"
  },
  {
    "text": "checkout service such that in some cases it will fail the checkout transaction",
    "start": "2676400",
    "end": "2683089"
  },
  {
    "text": "and in some cases checkout transaction will succeed what we want to see is the",
    "start": "2683089",
    "end": "2688519"
  },
  {
    "text": "difference between the tale based sampling and had base sampling so what",
    "start": "2688519",
    "end": "2694549"
  },
  {
    "text": "we are going to do is on the right hand side we are going to send synthetic loads and it's going to be sent into",
    "start": "2694549",
    "end": "2702019"
  },
  {
    "text": "collector so basically we create the traces and corresponding spans for this traces that",
    "start": "2702019",
    "end": "2711630"
  },
  {
    "text": "include activities which sometimes succeed and sometimes fail and then we",
    "start": "2711630",
    "end": "2720000"
  },
  {
    "text": "configure the collector which is part of this help and sense of service to send the telemetry to to back ends of choice",
    "start": "2720000",
    "end": "2727200"
  },
  {
    "text": "one is Jaeger wha one is Jaeger two so Jaeger is another open-source system",
    "start": "2727200",
    "end": "2733320"
  },
  {
    "text": "that you can use for tracing it was created by uber and got very popular nowadays you can use it for free it's",
    "start": "2733320",
    "end": "2740550"
  },
  {
    "text": "all on github and so we'll use two Jaeger instances one Jaeger instance is",
    "start": "2740550",
    "end": "2745650"
  },
  {
    "text": "configured with head base sampling which means that there is some random percentage of requests that will trace",
    "start": "2745650",
    "end": "2752910"
  },
  {
    "text": "blindly without knowing how they continue in the downstream systems and the second instance of Jaeger will use a",
    "start": "2752910",
    "end": "2760800"
  },
  {
    "text": "tale based sampling where we'll trace only the activities which has at least",
    "start": "2760800",
    "end": "2766530"
  },
  {
    "text": "one error in them so there is at least one span which resulted in error and then we'll see the results so I'm",
    "start": "2766530",
    "end": "2779520"
  },
  {
    "text": "already running this for quite some time and so we can go into two instances",
    "start": "2779520",
    "end": "2786589"
  },
  {
    "text": "again this sample is running in containers so it's all running on my machine but you can also run it in",
    "start": "2786589",
    "end": "2794369"
  },
  {
    "text": "distributed systems so this is the checkout service and if I look at the",
    "start": "2794369",
    "end": "2801119"
  },
  {
    "text": "traces okay there are many traces that we generated like here there is one",
    "start": "2801119",
    "end": "2807569"
  },
  {
    "text": "trace with nine spans and other trace and so on and if you look okay I'm",
    "start": "2807569",
    "end": "2813480"
  },
  {
    "text": "scheming pretty fast but you can see for example here this is the activity that",
    "start": "2813480",
    "end": "2818730"
  },
  {
    "text": "happened to be without errors and the next one happened to be with three errors so so here we have a mix of",
    "start": "2818730",
    "end": "2826440"
  },
  {
    "text": "activity some of the traces with failures some of the traces with successes a lot of data that we need to",
    "start": "2826440",
    "end": "2833099"
  },
  {
    "text": "digest to see what's important and what's not so let's go into the second instance",
    "start": "2833099",
    "end": "2839900"
  },
  {
    "text": "so this is the instance where we use the smart sampling and in here you see that",
    "start": "2843540",
    "end": "2852340"
  },
  {
    "text": "every single trace has errors in them okay so this is much more efficient in",
    "start": "2852340",
    "end": "2858280"
  },
  {
    "text": "terms of giving me only the information that they really care about so you don't overpay for things that I don't need",
    "start": "2858280",
    "end": "2865740"
  },
  {
    "text": "okay so some other things that open census provides for example the Z pages",
    "start": "2875059",
    "end": "2882299"
  },
  {
    "text": "Z pages is a term that originates at Google and this is a hosted service that",
    "start": "2882299",
    "end": "2889949"
  },
  {
    "text": "lives alongside your application and provides visibility into the traces that",
    "start": "2889949",
    "end": "2895949"
  },
  {
    "text": "were generated on that specific instance beat with you know traces that you",
    "start": "2895949",
    "end": "2902279"
  },
  {
    "text": "generated as a result of HTTP calls what you use may be a rest components in your",
    "start": "2902279",
    "end": "2907289"
  },
  {
    "text": "system or be it RPC calls if you use G RPC we provide this - hosted sub",
    "start": "2907289",
    "end": "2914969"
  },
  {
    "text": "services so which are part of the open census libraries that you can use and and then if you go into corresponding",
    "start": "2914969",
    "end": "2922049"
  },
  {
    "text": "trace Z or R pcs it depends on what type of remote procedure call framework you",
    "start": "2922049",
    "end": "2929999"
  },
  {
    "text": "use you can get visibility into what happened on that specific machine so it's like Zipkin and Jager in a way but",
    "start": "2929999",
    "end": "2937019"
  },
  {
    "text": "only for that specific machines in cases when your machine might lose connectivity to the back end of your",
    "start": "2937019",
    "end": "2943079"
  },
  {
    "text": "choice for a reason you can still see what's going on there ok and it's coming out of the box now open census provides",
    "start": "2943079",
    "end": "2951380"
  },
  {
    "text": "support for wide variety of exporters for many existing vendors of",
    "start": "2951380",
    "end": "2959179"
  },
  {
    "text": "observability this is the partial table which tells you which exporter are",
    "start": "2959179",
    "end": "2965249"
  },
  {
    "text": "supported which language and also for traces versus stats which is metrics ok",
    "start": "2965249",
    "end": "2972659"
  },
  {
    "text": "this table gets updated quite often to add more and more and the goal of course",
    "start": "2972659",
    "end": "2979469"
  },
  {
    "text": "is to and make it full with all the supported systems open census also comes",
    "start": "2979469",
    "end": "2986939"
  },
  {
    "start": "2985000",
    "end": "2985000"
  },
  {
    "text": "with a lot of integrations so if you use Brady's cash or your hosted on Google",
    "start": "2986939",
    "end": "2992369"
  },
  {
    "text": "Cloud or you might use my sequel or some you know MongoDB or some other",
    "start": "2992369",
    "end": "2999679"
  },
  {
    "text": "components in your system you might want to get visibility into what these components are doing how long every",
    "start": "2999739",
    "end": "3006890"
  },
  {
    "text": "activity in this company stakes so that you can spot bottlenecks or you can understand better what's",
    "start": "3006890",
    "end": "3012300"
  },
  {
    "text": "going on in your systems and so this integrations exist for a lot of these",
    "start": "3012300",
    "end": "3017720"
  },
  {
    "text": "external systems all you need to do is just enable them okay which is like one",
    "start": "3017720",
    "end": "3023520"
  },
  {
    "text": "API way but you don't need to actually instrument every single code to let's say Redis because it's already",
    "start": "3023520",
    "end": "3030260"
  },
  {
    "text": "instrumented for you and we work on adding more and more integration points so that you can get more visibility into",
    "start": "3030260",
    "end": "3037110"
  },
  {
    "text": "any component that that you want open census community is pretty active we",
    "start": "3037110",
    "end": "3043350"
  },
  {
    "start": "3039000",
    "end": "3039000"
  },
  {
    "text": "have a website we have a little channel we have repos for every language we have",
    "start": "3043350",
    "end": "3049710"
  },
  {
    "text": "Twitter and meetings every month the last meeting happened yesterday and it",
    "start": "3049710",
    "end": "3055170"
  },
  {
    "text": "typically happens every month where we discuss the way forward and there is a",
    "start": "3055170",
    "end": "3063870"
  },
  {
    "text": "slide that was kind of emitted here but basically one thing that's gonna happen",
    "start": "3063870",
    "end": "3070290"
  },
  {
    "text": "very soon is there is another community called open tracing which had similar",
    "start": "3070290",
    "end": "3077040"
  },
  {
    "text": "goals in a way but only focusing on the tracing and distributed systems in open",
    "start": "3077040",
    "end": "3083280"
  },
  {
    "text": "census we cover both tracing and metrics collection and so these two communities",
    "start": "3083280",
    "end": "3089820"
  },
  {
    "text": "shared a lot of similarities and we decided to unite and there's gonna be",
    "start": "3089820",
    "end": "3095760"
  },
  {
    "text": "announcement and at cube con in Barcelona about the new name but",
    "start": "3095760",
    "end": "3101490"
  },
  {
    "text": "essentially the roadmap of open censuses and open tracing is to merge to have the",
    "start": "3101490",
    "end": "3107280"
  },
  {
    "text": "single set of api's that you can use for your distributed systems to get",
    "start": "3107280",
    "end": "3112770"
  },
  {
    "text": "visibility into your components as well as all potential search party components",
    "start": "3112770",
    "end": "3118920"
  },
  {
    "text": "that you might use and so you don't need to choose between the two now there is no - there is only one and the name is",
    "start": "3118920",
    "end": "3126240"
  },
  {
    "text": "going to be shared later on but you're welcome to join the development still",
    "start": "3126240",
    "end": "3132660"
  },
  {
    "text": "continues we are going to work on the merge the plans for the merge",
    "start": "3132660",
    "end": "3138180"
  },
  {
    "text": "were announced on a medium page of open",
    "start": "3138180",
    "end": "3143309"
  },
  {
    "text": "tracing we plan to wrap the marriage by November and from November on you will",
    "start": "3143309",
    "end": "3149910"
  },
  {
    "text": "have only one set of libraries and api's",
    "start": "3149910",
    "end": "3155720"
  },
  {
    "text": "to use for observability in distributed systems okay with that I'd like to",
    "start": "3155720",
    "end": "3162059"
  },
  {
    "text": "finish and welcome any questions that you might have around log aggregation",
    "start": "3162059",
    "end": "3177869"
  },
  {
    "text": "okay a great question so yes log aggregation is very common problem that",
    "start": "3177869",
    "end": "3184069"
  },
  {
    "text": "like everyone who is involved in open census community is thinking about many",
    "start": "3184069",
    "end": "3191869"
  },
  {
    "text": "developers that try to use open census they basically I gave that feedback that",
    "start": "3191869",
    "end": "3198170"
  },
  {
    "text": "one of the key signals for observability is logs and so we want to aggregate lots",
    "start": "3198170",
    "end": "3203279"
  },
  {
    "text": "as well and open census already came up with the proposal it was early proposal still in the works",
    "start": "3203279",
    "end": "3209789"
  },
  {
    "text": "about how we can standardize on the logs collection there are so many different",
    "start": "3209789",
    "end": "3216180"
  },
  {
    "text": "frameworks on blocks collection out there for different languages and different scenarios and this is why this",
    "start": "3216180",
    "end": "3223170"
  },
  {
    "text": "problem will take some time to solve but it's definitely on the roadmap and it's already in discussion so yeah it will",
    "start": "3223170",
    "end": "3228960"
  },
  {
    "text": "happen more questions",
    "start": "3228960",
    "end": "3235279"
  },
  {
    "text": "yes so I'm from Google's obviously I can speak for a stock driver and I'm also",
    "start": "3285980",
    "end": "3292290"
  },
  {
    "text": "involved with development of stock driver basically stock driver is a Google solution for application",
    "start": "3292290",
    "end": "3299309"
  },
  {
    "text": "performance monitoring so what you get there is all different signals in one place on one timeline so for example you",
    "start": "3299309",
    "end": "3306599"
  },
  {
    "text": "can instrument your application with traces with logs with metrics it all",
    "start": "3306599",
    "end": "3312390"
  },
  {
    "text": "will flow into the same system and will show you dashboards that you can customize any way you want",
    "start": "3312390",
    "end": "3318750"
  },
  {
    "text": "and and in that that dashboard you can see all your micro-services and topology",
    "start": "3318750",
    "end": "3324390"
  },
  {
    "text": "graph of what what micro-service calls what micro-service what's the call rate you can see all the logs for every",
    "start": "3324390",
    "end": "3331410"
  },
  {
    "text": "component and so on and so on so yeah Google provides this out-of-the-box one",
    "start": "3331410",
    "end": "3336839"
  },
  {
    "text": "of the cool things that stock niver has that not every other vendor out there",
    "start": "3336839",
    "end": "3344130"
  },
  {
    "text": "can offer is debug ability so if you have your application up and running in",
    "start": "3344130",
    "end": "3350040"
  },
  {
    "text": "in the cloud one of the problems that you might experience is there is a bug that happens in production but they",
    "start": "3350040",
    "end": "3357000"
  },
  {
    "text": "can't reproduce this bug locally right happens to a lot of us and so we start",
    "start": "3357000",
    "end": "3362819"
  },
  {
    "text": "driver we have this tag driver debugging which is free for people who use a star driver and basically what it allows you",
    "start": "3362819",
    "end": "3369690"
  },
  {
    "text": "to do is put a snap point on on the code which is running in production and then",
    "start": "3369690",
    "end": "3376500"
  },
  {
    "text": "when that code is being heat will create a snapshot of the memory in that point",
    "start": "3376500",
    "end": "3382589"
  },
  {
    "text": "in time and let you debug into that snapshot without stopping your code so there is no penalty for your call in",
    "start": "3382589",
    "end": "3389130"
  },
  {
    "text": "production but you will get a lot of insights into what actually happens in the code of your application and we",
    "start": "3389130",
    "end": "3395069"
  },
  {
    "text": "support all the major programming languages we'll start over a debugger you can also even inject lock points which is",
    "start": "3395069",
    "end": "3402720"
  },
  {
    "text": "basically adding log statements into your code without deploying and also without changing your application which",
    "start": "3402720",
    "end": "3409109"
  },
  {
    "text": "sounds like too good to be true when you hear it for the first time whether it actually works um so yeah the",
    "start": "3409109",
    "end": "3415589"
  },
  {
    "text": "resolutions out there that provide you this holistic view of logs metrics",
    "start": "3415589",
    "end": "3420990"
  },
  {
    "text": "profile information debugging and all on the same timeline it's just a matter of",
    "start": "3420990",
    "end": "3427829"
  },
  {
    "text": "you choosing what works best for your use case and with open census it's still",
    "start": "3427829",
    "end": "3434400"
  },
  {
    "text": "valuable because you might be in the scenario where some of your components runs around on different clouds or may",
    "start": "3434400",
    "end": "3441270"
  },
  {
    "text": "be on-premises and you want to have this holistic view of everything not just components that run on specific cloud",
    "start": "3441270",
    "end": "3448109"
  },
  {
    "text": "provider but for every component in your system and with open census you can do",
    "start": "3448109",
    "end": "3453599"
  },
  {
    "text": "it and even if it essentially you take your workload let's say from on-premises",
    "start": "3453599",
    "end": "3458670"
  },
  {
    "text": "into the cloud still you will not need to change almost anything in terms of",
    "start": "3458670",
    "end": "3464069"
  },
  {
    "text": "observability maybe just exporter which is like one line of code and then all",
    "start": "3464069",
    "end": "3470280"
  },
  {
    "text": "the rest of the api is for metrics and traces collections will stays the same and suddenly you get the same visibility",
    "start": "3470280",
    "end": "3476640"
  },
  {
    "text": "of what's going on but now your services are already running in the cloud so it's really powerful all right yeah",
    "start": "3476640",
    "end": "3490700"
  },
  {
    "text": "yes oh you mean messaging systems when you can like broadcast the message to",
    "start": "3500980",
    "end": "3507050"
  },
  {
    "text": "multiple compose so for the Microsoft",
    "start": "3507050",
    "end": "3512660"
  },
  {
    "text": "messaging systems like service bus I don't think there is existing",
    "start": "3512660",
    "end": "3519280"
  },
  {
    "text": "integration that that you can use today but it's definitely on the roadmap yeah",
    "start": "3519280",
    "end": "3525079"
  },
  {
    "text": "we worked with Microsoft on on this open census set of libraries Michael this",
    "start": "3525079",
    "end": "3532010"
  },
  {
    "text": "very active contributor alongside Google alongside dynaTrace and some other folks",
    "start": "3532010",
    "end": "3538010"
  },
  {
    "text": "out there and so yeah it's definitely on the roadmap to make sure that you can get visibility into all all the",
    "start": "3538010",
    "end": "3544970"
  },
  {
    "text": "components all right so thank you very",
    "start": "3544970",
    "end": "3550190"
  },
  {
    "text": "much",
    "start": "3550190",
    "end": "3552520"
  }
]