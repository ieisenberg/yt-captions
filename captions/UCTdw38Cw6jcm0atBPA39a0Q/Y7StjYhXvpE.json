[
  {
    "text": "still here honestly I talk on lambdas last thing on a Friday you're hardcore",
    "start": "4530",
    "end": "11340"
  },
  {
    "text": "you have my respect you will have my slides in a minute you have my respect to begin with me okay so let's talk",
    "start": "11340",
    "end": "17640"
  },
  {
    "text": "about Landers um this is a phrase that's been used a lot by programmers language",
    "start": "17640",
    "end": "25710"
  },
  {
    "text": "designers so I know I'm really what I want to do is I want to get inside this and say well okay so what is this thing",
    "start": "25710",
    "end": "31950"
  },
  {
    "text": "people keep talking about let's talk white origin stories okay this is this is basically the way that Hollywood",
    "start": "31950",
    "end": "37800"
  },
  {
    "text": "works you've had all the lambda features released in your languages now it's the origin story okay that we've released",
    "start": "37800",
    "end": "43199"
  },
  {
    "text": "that how do we monetize more lambdas okay this is what we're going to talk about and to understand a little bit",
    "start": "43199",
    "end": "52649"
  },
  {
    "text": "more about what's going on here it's a nice letter it's it's one of the most pleasing letters to write actually and",
    "start": "52649",
    "end": "60499"
  },
  {
    "text": "but there's this thing it has a number of associations the Amazon completely",
    "start": "60499",
    "end": "66350"
  },
  {
    "text": "completely jumped on some crazy van right so we're gonna call this thing that's nothing to do or even remotely",
    "start": "66350",
    "end": "71790"
  },
  {
    "text": "like functions and lambdas we're going to call it lambda that'll confuse everybody because it's kind of like",
    "start": "71790",
    "end": "77340"
  },
  {
    "text": "function sort of yeah our PCs done differently right so yes nothing to do with that no it's",
    "start": "77340",
    "end": "84600"
  },
  {
    "text": "not to do with half-life which borrowed it from the idea of the decay constant in physics where it's also used as a wavelength physicists like to recycle",
    "start": "84600",
    "end": "91619"
  },
  {
    "text": "their letters quite a lot they don't use name spaces and then",
    "start": "91619",
    "end": "96659"
  },
  {
    "text": "there's calculus and that's the one that we're kind of interested in now this all came out of the work of Alonzo Church",
    "start": "96659",
    "end": "102930"
  },
  {
    "text": "and he published this paper in 1936 so",
    "start": "102930",
    "end": "108359"
  },
  {
    "text": "that's kind of the moment of Inception except actually it isn't he published a previous paper in 1932 which I have not",
    "start": "108359",
    "end": "114869"
  },
  {
    "text": "been able to get my hands on even via the interwebs but this is the kind of the basic reference point he did some",
    "start": "114869",
    "end": "120149"
  },
  {
    "text": "fixes in 1935 to some stuff and he wasn't interested in what we are",
    "start": "120149",
    "end": "125460"
  },
  {
    "text": "interested in he was interested in computability but in the same way that cheering was is something computable as",
    "start": "125460",
    "end": "132690"
  },
  {
    "text": "opposed to how do I actually write a program and he was exploring this an unsolvable problem of element",
    "start": "132690",
    "end": "138000"
  },
  {
    "text": "number theory this was really just the exploration of the insurance problem",
    "start": "138000",
    "end": "145200"
  },
  {
    "text": "which is related to the halting problem and in the same year Turing came out with similar proof that was shown to be",
    "start": "145200",
    "end": "151920"
  },
  {
    "text": "compatible but using Turing machines and these was shown to be actually",
    "start": "151920",
    "end": "157190"
  },
  {
    "text": "equivalent and so there's so but as a buyer by in this paper which I am not",
    "start": "157190",
    "end": "163140"
  },
  {
    "text": "trained as a mathematician so I kind of I kind of reached a sort of a sort of",
    "start": "163140",
    "end": "168420"
  },
  {
    "text": "sheer g-force acceleration after a couple of pages got really totally sure",
    "start": "168420",
    "end": "173880"
  },
  {
    "text": "I'm with you here on this one there's a lot of assumed context but he just tosses in learned calculus it's just a",
    "start": "173880",
    "end": "180450"
  },
  {
    "text": "very casual thing but it's also interesting this is the 1930s and there",
    "start": "180450",
    "end": "186780"
  },
  {
    "text": "was this is a period at which it's worth understanding where a number of certainties about the future was",
    "start": "186780",
    "end": "193590"
  },
  {
    "text": "starting to be torn down and I'm not making political references just yet but I could easily do that it's there was",
    "start": "193590",
    "end": "202440"
  },
  {
    "text": "this idea at the end of the nineteenth century that we had everything was everything was knowable knowability",
    "start": "202440",
    "end": "209959"
  },
  {
    "text": "everything could be complete maths could be consistent and complete and all of this started tumbling down in the 1920s",
    "start": "209959",
    "end": "217680"
  },
  {
    "text": "the end of the 1920s thanks to Kirk girdle and the incompleteness theorem we discovered halting problem as a whole",
    "start": "217680",
    "end": "223739"
  },
  {
    "text": "series of things by the way relativity came along to just say oh yes black holes that was a nice",
    "start": "223739",
    "end": "230430"
  },
  {
    "text": "side effect of relativity which was 1915 when Einstein first presented it properly published in 1916 and then",
    "start": "230430",
    "end": "237570"
  },
  {
    "text": "other people started working through the know working through the equations going wait a minute you know there's a really weird thing here what we now call a",
    "start": "237570",
    "end": "243030"
  },
  {
    "text": "black hole a boundary of no ability and it turns out that the 1920's 1930's came",
    "start": "243030",
    "end": "249030"
  },
  {
    "text": "along and tore down this edifice of like everything is knowable oh by the way quantum mechanics it's just like so that",
    "start": "249030",
    "end": "257220"
  },
  {
    "text": "was that that was that was the stage which ultimately gives us this idea of what we have is rigidly defined areas of",
    "start": "257220",
    "end": "265050"
  },
  {
    "text": "doubt and uncertainty that certain things cannot be known and are no but it turns out that lambdas are they",
    "start": "265050",
    "end": "273520"
  },
  {
    "text": "are knowable they were they were left as a kind of theoretical thing something of",
    "start": "273520",
    "end": "279400"
  },
  {
    "text": "interest pretty much until the end of the 1950s when McCarthy and others",
    "start": "279400",
    "end": "284620"
  },
  {
    "text": "started designing lists the first implementation of the list was 1960 and it was pretty much based on lambda",
    "start": "284620",
    "end": "293889"
  },
  {
    "text": "calculus and lambdas were a feature in the language and this was kind of like the first time this is just like right",
    "start": "293889",
    "end": "300160"
  },
  {
    "text": "made its way in to computing and these days it's kind of like you know I just",
    "start": "300160",
    "end": "306910"
  },
  {
    "text": "did some googling around the other day and there's this Ruby Ruby tutorial you",
    "start": "306910",
    "end": "313180"
  },
  {
    "text": "may have heard of Landers before perhaps you've used them in other languages it's just what it's now got to that point",
    "start": "313180",
    "end": "318430"
  },
  {
    "text": "where we kind of assume that people have heard of them there's a strong assumption despite the fancy name I don't know",
    "start": "318430",
    "end": "326620"
  },
  {
    "text": "picking a letter is not particularly fancy I mean you know dominant programming languages through history",
    "start": "326620",
    "end": "332380"
  },
  {
    "text": "see what that's a fancy name no it's just just because it chooses a letter",
    "start": "332380",
    "end": "338229"
  },
  {
    "text": "from a different alphabet it's like that a lambda is just a function peculiarly without a name and you know what this",
    "start": "338229",
    "end": "345250"
  },
  {
    "text": "actually means in terms of solving deep significant problems it means that this",
    "start": "345250",
    "end": "350620"
  },
  {
    "text": "classic quote from Phil Carlton okay it turns out too hard things and computer",
    "start": "350620",
    "end": "357520"
  },
  {
    "text": "science cache invalidation and naming things we're done you know we've just reduced it if land does mean you you",
    "start": "357520",
    "end": "363160"
  },
  {
    "text": "never have to worry about naming things and cache of validation if you've doing functional programming it turns out",
    "start": "363160",
    "end": "369039"
  },
  {
    "text": "there's no such thing as invalidation because that's a process with a side-effect nothing happens in",
    "start": "369039",
    "end": "374349"
  },
  {
    "text": "functional programming it's so purely even if you unplug your computer your functional programs will still run wait",
    "start": "374349",
    "end": "380380"
  },
  {
    "text": "a minute doesn't work yeah they're riddled with side-effects that's all that makes it all of this stuff is an illusion okay functional programming is",
    "start": "380380",
    "end": "386830"
  },
  {
    "text": "an illusion every paradigm is an illusion but yeah we can do that and basically say right we've done if we can",
    "start": "386830",
    "end": "392860"
  },
  {
    "text": "go home you know there are no more problems because it's also caching validation is not relevant to this talk either so what was Church",
    "start": "392860",
    "end": "401490"
  },
  {
    "text": "what's Church saying I said right okay so we select a particular list of symbols consisting of the symbols open",
    "start": "401490",
    "end": "408270"
  },
  {
    "text": "close curly open close parenthesis lambda square brackets and an",
    "start": "408270",
    "end": "414900"
  },
  {
    "text": "innumerably infinite set of symbols ABC etcetera to be called variables and we",
    "start": "414900",
    "end": "420570"
  },
  {
    "text": "define the wave formula to mean any finite sequence of symbols out of this",
    "start": "420570",
    "end": "425580"
  },
  {
    "text": "list now this is a shift from the way that people have and here within the",
    "start": "425580",
    "end": "431730"
  },
  {
    "text": "paper he also uses traditional function notation from a mathematical perspective and there's this very simple but subtle",
    "start": "431730",
    "end": "439290"
  },
  {
    "text": "idea that a function is a name and there is a formula and the function begins",
    "start": "439290",
    "end": "446760"
  },
  {
    "text": "with a name and what we're doing is we're basically saying you know what if you do have a name it's just kind of",
    "start": "446760",
    "end": "451860"
  },
  {
    "text": "like on the side and that's an associate that's a convenience but it's not a fundamental idea and we're going to",
    "start": "451860",
    "end": "458220"
  },
  {
    "text": "shift this and we're going to treat these things as first class that there are only values and that's the thing in",
    "start": "458220",
    "end": "463620"
  },
  {
    "text": "lambda calculus there are only values that are lambdas that will turn out to be interesting a little bit later and so",
    "start": "463620",
    "end": "470430"
  },
  {
    "text": "here we have a very simple lambda expression and I'm gonna use this to demonstrate the basically the the three",
    "start": "470430",
    "end": "476850"
  },
  {
    "text": "rules of what makes a lambda a lambda the first thing is variable that seems",
    "start": "476850",
    "end": "485130"
  },
  {
    "text": "trivial we we take these for granted but this is the basic idea that you have",
    "start": "485130",
    "end": "490200"
  },
  {
    "text": "something that can hold a value that value must be a lambda in pure lambda calculus but you have a variable we'll",
    "start": "490200",
    "end": "497280"
  },
  {
    "text": "see in a moment has two kinds of variables the next thing is you have abstraction function abstraction where",
    "start": "497280",
    "end": "503550"
  },
  {
    "text": "what you're doing is saying that this variable is bound within this context over an expression Y of X and the y and",
    "start": "503550",
    "end": "511920"
  },
  {
    "text": "to be precise it's Y applied to x and y is a lambda being applied to a value so",
    "start": "511920",
    "end": "517229"
  },
  {
    "text": "application so it turns out these are the three things if you've got these this is fundamental you have variables",
    "start": "517230",
    "end": "523140"
  },
  {
    "text": "you have function abstraction you have application you've got that that's e it now a couple of other things that thing",
    "start": "523140",
    "end": "531630"
  },
  {
    "text": "F that I had before that's an abbreviation it's not formally par of lambda calculus but it turns out it",
    "start": "531630",
    "end": "536999"
  },
  {
    "text": "gets quite boring when you have to write everything out longhand yeah although he wasn't saying don't repeat yourself",
    "start": "536999",
    "end": "542309"
  },
  {
    "text": "that's what he meant these are convenience but this is really important because it means just as an",
    "start": "542309",
    "end": "547769"
  },
  {
    "text": "aside I'm not a topic I'm going to cover here it means that that is simply a stand-in for that because it's not a",
    "start": "547769",
    "end": "555300"
  },
  {
    "text": "definition because it is an abbreviation it basically means that you cannot refer to F on the right-hand side which means",
    "start": "555300",
    "end": "561240"
  },
  {
    "text": "that lambda calculus does not support recursion which is going to upset a lot of people who've just thought whoa wait",
    "start": "561240",
    "end": "566879"
  },
  {
    "text": "a minute isn't that all the functional programming there's this there's a whole bunch of things called fixpoint Combinator's that get kind of",
    "start": "566879",
    "end": "573480"
  },
  {
    "text": "interesting and maybe an extended version of this talk I'll explore that but these are just abbreviations they turn out to be surprisingly convenient",
    "start": "573480",
    "end": "579329"
  },
  {
    "text": "the next thing is to look at the kinds of variable we have bound variables that comes in as a parameter that's your",
    "start": "579329",
    "end": "585420"
  },
  {
    "text": "classic parameter and free variables that means that as defined somewhere else and then that somewhere else is",
    "start": "585420",
    "end": "592559"
  },
  {
    "text": "kind of an interesting thing we'll come to that in a moment so let's just look at something fairly simple and what I'm",
    "start": "592559",
    "end": "598110"
  },
  {
    "text": "going to do is I'm going to introduce something beyond lambda calculus that little x symbols strictly speaking the",
    "start": "598110",
    "end": "603209"
  },
  {
    "text": "purest well the purest form of lambda calculus has nothing else to it I just showed you the whole thing and it got a",
    "start": "603209",
    "end": "609059"
  },
  {
    "text": "few reduction rules and that's it but for convenience obviously we just like",
    "start": "609059",
    "end": "614069"
  },
  {
    "text": "yeah this is through some mathematical stuff and let's make life a little bit easier so we take our standard definition of what is Square and we do",
    "start": "614069",
    "end": "619350"
  },
  {
    "text": "something like this so therefore this is an abbreviation I apply that guess what",
    "start": "619350",
    "end": "625829"
  },
  {
    "text": "innumerably infinite symbols I'm not saying Alonzo Church invented emoji but he accommodated it he didn't say there's",
    "start": "625829",
    "end": "632429"
  },
  {
    "text": "a bound set he said no and that means that that's a cross-product I know I",
    "start": "632429",
    "end": "638040"
  },
  {
    "text": "know that's terrible it does not get better than that in fact we can do the whole thing this is great so I can now",
    "start": "638040",
    "end": "644429"
  },
  {
    "text": "get square and he said he knew a reemployment I'm gonna take him at his word and so we comply that to seven or",
    "start": "644429",
    "end": "650759"
  },
  {
    "text": "we can do that or we can write the whole format so there we see in its purest form we've used simple types and we've",
    "start": "650759",
    "end": "656819"
  },
  {
    "text": "got a simple application we're very strict about things like parentheses as",
    "start": "656819",
    "end": "662279"
  },
  {
    "text": "programmers about where they go that's not the case of mathematicians it's just like yeah feeling that he actually",
    "start": "662279",
    "end": "668069"
  },
  {
    "text": "switches through the page how he does function application f parens of X or f space X it says",
    "start": "668069",
    "end": "675830"
  },
  {
    "text": "parentheses are just there to make things a little bit more visible I just love to see I just love to see compilers",
    "start": "675830",
    "end": "681650"
  },
  {
    "text": "do that it's just that yeah I think I understood that you know I feel I understood that",
    "start": "681650",
    "end": "687110"
  },
  {
    "text": "I'm gonna go with this you know so that's the kind of thing you can get away with in a paper now let's make this",
    "start": "687110",
    "end": "693500"
  },
  {
    "text": "real javascript doesn't get more real than that so traditional JavaScript we",
    "start": "693500",
    "end": "700210"
  },
  {
    "text": "we have we are we are brought up with the idea of thinking we named functions",
    "start": "700210",
    "end": "706850"
  },
  {
    "text": "a function has a name that is your starting point but actually we could do",
    "start": "706850",
    "end": "712070"
  },
  {
    "text": "it like this now there's an interesting point about and one of the reasons I've",
    "start": "712070",
    "end": "717320"
  },
  {
    "text": "chosen JavaScript here it's not simply that it is broad accessible but Brendan Eich when he developed it in the mid-90s",
    "start": "717320",
    "end": "723470"
  },
  {
    "text": "we kind of the tale goes that it took him two weeks to do a lot and then there's half a dozen jokes that hinge",
    "start": "723470",
    "end": "728750"
  },
  {
    "text": "around the fact we're not quite sure what he was doing in the second week but actually what he wanted to do was",
    "start": "728750",
    "end": "735230"
  },
  {
    "text": "implemented version of scheme I will come to scheme in a moment but people said nobody's gonna buy that syntax you've got to use familiar syntax so",
    "start": "735230",
    "end": "742100"
  },
  {
    "text": "basically it's it's kind of an interesting mashup he said ok right I'm gonna use C style syntax I'm going to",
    "start": "742100",
    "end": "750230"
  },
  {
    "text": "use I'm gonna use Landers I'm going to use ideas from scheme so it's a list",
    "start": "750230",
    "end": "756110"
  },
  {
    "text": "based language I'm gonna use ideas from there and I don't really want any of that complex objects I'm gonna use a really simple prototypical model of",
    "start": "756110",
    "end": "763880"
  },
  {
    "text": "objects and go with that but from the very beginning it was always in there now strictly speaking",
    "start": "763880",
    "end": "770450"
  },
  {
    "text": "some people would some people get very fussy and say well I know that's not really a lambda because it's just a",
    "start": "770450",
    "end": "775790"
  },
  {
    "text": "function without a name it turns out that these are not necessarily equivalent but some computer scientists",
    "start": "775790",
    "end": "781250"
  },
  {
    "text": "get get very upset about them being regarded as equivalent so I'm gonna treat them as equivalent so anyway what",
    "start": "781250",
    "end": "787850"
  },
  {
    "text": "we get is X script 6 comes along and says you know we got this arrow form we're gonna make life even easier and we",
    "start": "787850",
    "end": "794660"
  },
  {
    "text": "can they we've gotten more abbreviations and actually if you've only got a single expression then yeah black very easy so this is all good this works",
    "start": "794660",
    "end": "801350"
  },
  {
    "text": "out really well let's go back to that Ruby tutorial they're anonymous little",
    "start": "801350",
    "end": "808339"
  },
  {
    "text": "functional spires sneaking into the rest of your code I don't like the sound of that I mean I've already got Facebook to worry about and now you're telling me my",
    "start": "808339",
    "end": "814579"
  },
  {
    "text": "lambdas are gonna gang up on me but we have a point here about the way that",
    "start": "814579",
    "end": "820100"
  },
  {
    "text": "people perceive them not the spy but the functional bear people immediately",
    "start": "820100",
    "end": "825560"
  },
  {
    "text": "associate lambdas I say all right lambdas that must be in function program so 2014 Java gets lambdas lots of people",
    "start": "825560",
    "end": "834500"
  },
  {
    "text": "going like I am now functional programming its Java mate you're not functional programming really yeah but I'm using Landers and",
    "start": "834500",
    "end": "842180"
  },
  {
    "text": "they're like totally functional it's just like oh okay let's let's take things down a bit let's",
    "start": "842180",
    "end": "847430"
  },
  {
    "text": "let's reduce our excitement here Excel interesting enough which does not have",
    "start": "847430",
    "end": "853459"
  },
  {
    "text": "lambdas although it's been suggested I don't know I think spreadsheets already",
    "start": "853459",
    "end": "859250"
  },
  {
    "text": "have enough bugs in them I'm not quite sure that the public is ready for the ladders but assignment page Jones mr.",
    "start": "859250",
    "end": "864800"
  },
  {
    "text": "Haskell basically med Association Excel is the world's most popular function language functional means a number of different things to different people at",
    "start": "864800",
    "end": "871069"
  },
  {
    "text": "different times they start from different positions some people say write functional programming is rooted in this for me it is lambda calculus for",
    "start": "871069",
    "end": "878750"
  },
  {
    "text": "other people on and I know it's to do with hindley-milner type systems that is functional programming to me it's kind",
    "start": "878750",
    "end": "885110"
  },
  {
    "text": "of like everybody has their own personal version of this but I wanna go back to list because this is the one that was",
    "start": "885110",
    "end": "892040"
  },
  {
    "text": "kind of interesting this just want to trigger a number of ideas and there's a certain beauty and elegance to the",
    "start": "892040",
    "end": "898490"
  },
  {
    "text": "original Lisp this is the manual for the original Lisp as I have a copy of it at",
    "start": "898490",
    "end": "904100"
  },
  {
    "text": "home you can find a PDF online it's quite it's quite brilliantly written as she was written in the early 60s Lisp",
    "start": "904100",
    "end": "911209"
  },
  {
    "text": "1.5 there was supposed to be a list to than ever was the syntax they were going to tidy up the syntax and make it less list",
    "start": "911209",
    "end": "918139"
  },
  {
    "text": "oriented but actually it turns out the syntax they're merging between data and code treating them as the same was not a",
    "start": "918139",
    "end": "925459"
  },
  {
    "text": "it was not a stepping stone idea it was actually a really big idea and they were",
    "start": "925459",
    "end": "931040"
  },
  {
    "text": "kind of thought we're going to change the sin two accents just like now you know what this is this something really good here but we use Lisp generally to mean",
    "start": "931040",
    "end": "937720"
  },
  {
    "text": "anything that coming - looks like Lisp there's a there's a monster called Common Lisp which I've had to grapple",
    "start": "937720",
    "end": "945410"
  },
  {
    "text": "with in the past a couple of times number of people are familiar with the Emacs Lisp earless there's lots of",
    "start": "945410",
    "end": "952279"
  },
  {
    "text": "different flavors they're not all of them were significantly larger than this but this is sent elegance to it and I've",
    "start": "952279",
    "end": "958009"
  },
  {
    "text": "described to people you need to get infatuated with this I don't think I've ever been commit pay commercially to",
    "start": "958009",
    "end": "963019"
  },
  {
    "text": "write this code although I think I managed to sneak some stuff that was Lisp ish a couple of places but there is",
    "start": "963019",
    "end": "968959"
  },
  {
    "text": "an elegance to the thinking there's something really clean and simple Alan Kay of small talk Fame when he saw part",
    "start": "968959",
    "end": "977329"
  },
  {
    "text": "of some some of the ideas in this book said basically that this page this is the laws of physics or Maxwell's",
    "start": "977329",
    "end": "983209"
  },
  {
    "text": "equations to be precise for programming of all languages in particular is really aspired and that inspired a lot of small",
    "start": "983209",
    "end": "988850"
  },
  {
    "text": "talk come back to that a little bit later and so we can always get carried away with this and xkcd last night I",
    "start": "988850",
    "end": "995299"
  },
  {
    "text": "drifted off while reading a list book suddenly I was baited as a fusion of blue I noticed the coincidence that actually I don't think Randall Munroe",
    "start": "995299",
    "end": "1002589"
  },
  {
    "text": "intended it but that is the blue of the original book and there it is nice",
    "start": "1002589",
    "end": "1008019"
  },
  {
    "text": "coincidence suddenly I was bathed in this effusion blue once just like they said I felt a great in light when I saw",
    "start": "1008019",
    "end": "1013480"
  },
  {
    "text": "naked structure of Lister code I'm fall before me the patterns and meta patterns dance syntax fade and I swam the purity",
    "start": "1013480",
    "end": "1019809"
  },
  {
    "text": "of quantified conception of ideas manifest 2001 referenced there which if",
    "start": "1019809",
    "end": "1025899"
  },
  {
    "text": "you know Lisp is hilarious if you don't don't worry about it truly this was the language from which that gods wrote the",
    "start": "1025899",
    "end": "1032350"
  },
  {
    "text": "universe no it's not it's not I mean its density yes honestly we hang most of it together with Perl there is a certain",
    "start": "1032350",
    "end": "1039188"
  },
  {
    "text": "pragmatism to the way that things come out and as for those red X's for quantum mechanics you're on your own kid but",
    "start": "1039189",
    "end": "1045418"
  },
  {
    "text": "that does bring a rather interesting point um lambdas really have got",
    "start": "1045419",
    "end": "1051100"
  },
  {
    "text": "everywhere to try and claim them for your paradigm is it's not really gonna",
    "start": "1051100",
    "end": "1056590"
  },
  {
    "text": "work out I'm not no I'm not gonna do anything with Perl I have a kind of a there's a bit of me that won't let me do",
    "start": "1056590",
    "end": "1063039"
  },
  {
    "text": "Perl you know it's it's kind of like Sethe speech I just can't do it",
    "start": "1063039",
    "end": "1068460"
  },
  {
    "text": "it's not I'm not allowed to do it Perl is executable line noise it's one of my least favorite languages no like",
    "start": "1068460",
    "end": "1074130"
  },
  {
    "text": "languages but PowerShell let's use a scripting language he's partial here's a",
    "start": "1074130",
    "end": "1079620"
  },
  {
    "text": "lambda that's the square it's quite nice actually POW sure there's a surprisingly good and well well for to our language",
    "start": "1079620",
    "end": "1086250"
  },
  {
    "text": "if I want to give it a name like oh yeah I can just I can bind it to a name I can apply up a really simple application",
    "start": "1086250",
    "end": "1092340"
  },
  {
    "text": "syntax there it is it's very direct and that's it so I've got I've got these options I can even do it this is prop",
    "start": "1092340",
    "end": "1098130"
  },
  {
    "text": "now you know it's a proper lamb because you can just take that and you don't need the name with which to execute it",
    "start": "1098130",
    "end": "1103140"
  },
  {
    "text": "that's that substitutability that freedom the idea is that the name is simply an abbreviation for something else if you've got that this is a really",
    "start": "1103140",
    "end": "1110220"
  },
  {
    "text": "good thing then that's also while we",
    "start": "1110220",
    "end": "1115380"
  },
  {
    "text": "well you know let's go back to the 60s again Algol 68 possibly the most influential language you've never used",
    "start": "1115380",
    "end": "1121880"
  },
  {
    "text": "if you were all of those those are you using languages where there's in a keyword int yes that came from Al Gore",
    "start": "1121880",
    "end": "1129450"
  },
  {
    "text": "prior to that all language design involved using the word integer int",
    "start": "1129450",
    "end": "1134760"
  },
  {
    "text": "character char that's where it all comes void that came from Algol there's a load",
    "start": "1134760",
    "end": "1141330"
  },
  {
    "text": "of stuff it really is at the time it was seen as this monstrously huge language that would nobody would ever be able to",
    "start": "1141330",
    "end": "1147900"
  },
  {
    "text": "implement honestly the I've got a copy of the language report it's it's kind of",
    "start": "1147900",
    "end": "1153240"
  },
  {
    "text": "really quite small compared to modern languages this is not complex but you",
    "start": "1153240",
    "end": "1160350"
  },
  {
    "text": "know guess what one things I love about Algol is it is unforgivingly procedural",
    "start": "1160350",
    "end": "1166650"
  },
  {
    "text": "it does the procedural paradigm properly algorithmic language there it is it does",
    "start": "1166650",
    "end": "1173730"
  },
  {
    "text": "the procedural paradigm it's committed to the procedural paradigm so committed that you can have unnamed procedures that's how committed",
    "start": "1173730",
    "end": "1180750"
  },
  {
    "text": "it is yeah they were a standard feature it's a standard concept okay so I can go",
    "start": "1180750",
    "end": "1189270"
  },
  {
    "text": "ahead and I can you know bind this simple anonymous procedure square so I",
    "start": "1189270",
    "end": "1195120"
  },
  {
    "text": "just want to remind you 1968 okay Gouri because you all the other languages going around is like yeah",
    "start": "1195120",
    "end": "1200539"
  },
  {
    "text": "Java's going like 2014 we got lambdas and everybody else behind it's going like hi c++ here that was 2011 for us",
    "start": "1200539",
    "end": "1207220"
  },
  {
    "text": "and c-sharp sitting going like come on we're in the 2000s javascript in the",
    "start": "1207220",
    "end": "1213590"
  },
  {
    "text": "background going like yeah mid 90s Lisp was going like yeah 1960 but somewhere in there in the 1960s this was kind of a",
    "start": "1213590",
    "end": "1221210"
  },
  {
    "text": "normal feature of language design COBOL did not have it but a lot of other languages had this ability to have this",
    "start": "1221210",
    "end": "1226909"
  },
  {
    "text": "kind of procedural abstraction freely available so I've got a declare it as I you know it's it's a language that has a",
    "start": "1226909",
    "end": "1234440"
  },
  {
    "text": "concept of types doesn't do type deduction so I do have to go ahead and declare these things but you know I can",
    "start": "1234440",
    "end": "1240049"
  },
  {
    "text": "apply it I can also as we expect with an application I can just apply it freely I can just take that expression and apply",
    "start": "1240049",
    "end": "1245809"
  },
  {
    "text": "it to seven and it will give me the square of that so it's a little bit much",
    "start": "1245809",
    "end": "1250820"
  },
  {
    "text": "to try and claim I am being pretty I've just shown you scripting and procedural I mean that's yeah it's not oh my",
    "start": "1250820",
    "end": "1257510"
  },
  {
    "text": "goodness lambdas and Ruby are also objects just like everything else okay we are not done with this paradigm apparently so pick this one up from a",
    "start": "1257510",
    "end": "1267940"
  },
  {
    "text": "discussion group on which years ago there was a discussion I dug out with",
    "start": "1267940",
    "end": "1275120"
  },
  {
    "text": "guy Steele and a number of other people guy Steele was his kind of languages expert had a hand in a number of",
    "start": "1275120",
    "end": "1281419"
  },
  {
    "text": "languages worthless son but prior to that it's been involved in variety of languages most notably scheme in the 1970s really nice bloke very very",
    "start": "1281419",
    "end": "1289820"
  },
  {
    "text": "knowledgeable but this was kind of a response and somebody was kind of describing it the pheromone Master croc now I was walking with his student Anton",
    "start": "1289820",
    "end": "1296149"
  },
  {
    "text": "hoping to prompt the master into discussion Anton said master I've heard that objects are a very good thing is",
    "start": "1296149",
    "end": "1301970"
  },
  {
    "text": "this true quick nah looks pityingly at his student and replied foolish people objects am",
    "start": "1301970",
    "end": "1308269"
  },
  {
    "text": "merely a poor man's closures so closure is a term that gets thrown around a bit",
    "start": "1308269",
    "end": "1314080"
  },
  {
    "text": "and actually wikipedia has one of the best definitions oh god I dug around I don't know you know I don't always like",
    "start": "1314080",
    "end": "1320120"
  },
  {
    "text": "to rely on Wikipedia except for the fact that sometimes they absolutely Nayla and it's a really good condensed tour of it",
    "start": "1320120",
    "end": "1326210"
  },
  {
    "text": "the concept of closures was developed in the 1960s that's a hell of a decade for the",
    "start": "1326210",
    "end": "1331970"
  },
  {
    "text": "mechanical evaluation expressions in the lambda calculus they were invented to solve this problem how do we take lift",
    "start": "1331970",
    "end": "1338179"
  },
  {
    "text": "this stuff off the page and use things that we are familiar with now scope binding variables things like that how",
    "start": "1338179",
    "end": "1345290"
  },
  {
    "text": "we do this piece of land in defines term closure in 1964 is having an environment part on a control part now what is",
    "start": "1345290",
    "end": "1351860"
  },
  {
    "text": "interesting is I encountered closures there are things called closures in a number of languages and I encountered",
    "start": "1351860",
    "end": "1359360"
  },
  {
    "text": "closures at one point in Borland's Pascal had Delfy stuff and I thought",
    "start": "1359360",
    "end": "1365090"
  },
  {
    "text": "these are not closures they're just bound methods you can't actually I can't give you a chunk of code I can simply",
    "start": "1365090",
    "end": "1371660"
  },
  {
    "text": "say here's an object dot here's and here's a method and that's I'm going to pass you that bind that bound thing and",
    "start": "1371660",
    "end": "1378799"
  },
  {
    "text": "that's not really that's happen yeah that's a that's re poor version of closure but strictly speaking these kind",
    "start": "1378799",
    "end": "1385190"
  },
  {
    "text": "does kind of fit it's having an environment partner control part it's just that you can't do much about it",
    "start": "1385190",
    "end": "1390290"
  },
  {
    "text": "it's just that you have a very restricted idea of what environment is and what control is a a pointer to a method but it must be a named method",
    "start": "1390290",
    "end": "1396290"
  },
  {
    "text": "that already exists so that's very different to the lambda idea which is it doesn't have to have a name in fact",
    "start": "1396290",
    "end": "1401360"
  },
  {
    "text": "we're not going to assume names the environment parties the binding of the names now importantly these ideas become",
    "start": "1401360",
    "end": "1407900"
  },
  {
    "text": "a little more popular for a number of reasons John Moses creates landing with introducing the term closure to refer to",
    "start": "1407900",
    "end": "1413000"
  },
  {
    "text": "a lambda expression whose open bindings the free variables have been closed while bound in the lexical environment",
    "start": "1413000",
    "end": "1419179"
  },
  {
    "text": "resulting in a closed expressional closure in other words those free variables we now have a regular concept like that free-standing Y that refers to",
    "start": "1419179",
    "end": "1426230"
  },
  {
    "text": "this it's not totally free standing we have an idea of scope if you like that gets passed through this turns out to be",
    "start": "1426230",
    "end": "1431929"
  },
  {
    "text": "quite an important idea one that again we take very much for granted but this",
    "start": "1431929",
    "end": "1437600"
  },
  {
    "text": "does also allow you to if you find yourself one is absolutely fascinating the pointless debates you know is a",
    "start": "1437600",
    "end": "1444440"
  },
  {
    "text": "lambda closure or a closure or lambda there is now an answer a closure is a lambda that had free variables if it has",
    "start": "1444440",
    "end": "1452750"
  },
  {
    "text": "no free variables in fact so Square for example is not a closure because it is",
    "start": "1452750",
    "end": "1458299"
  },
  {
    "text": "fully self-contained all of its variables are bound it takes X it only uses X we're done okay um now the bit of history that is",
    "start": "1458299",
    "end": "1466659"
  },
  {
    "text": "more important and interesting this usage was subsequently adopted by Jared Sussman and guy Steele when they defined",
    "start": "1466659",
    "end": "1472570"
  },
  {
    "text": "scheme in 1975 a lexical scope variant of this variant of Lisp and from that",
    "start": "1472570",
    "end": "1477610"
  },
  {
    "text": "point on it became widespread that was the kind of like the inception point for the popularity of the term it started",
    "start": "1477610",
    "end": "1482980"
  },
  {
    "text": "taking it out to other people now that becomes interesting let us go back to",
    "start": "1482980",
    "end": "1488769"
  },
  {
    "text": "Anton chastise Anton took his lead from his master and returned to his cell intent on studying closures he carefully",
    "start": "1488769",
    "end": "1495669"
  },
  {
    "text": "read the entire land of the ultimate series this is a series of papers by guy Steele and colleagues that kind of",
    "start": "1495669",
    "end": "1502120"
  },
  {
    "text": "showed how powerful lambdas were written primarily in the 1970s but that name has been taken and is used for a site that",
    "start": "1502120",
    "end": "1509320"
  },
  {
    "text": "dedicated function prone land to the alternate ultimate series babe and it's cousins and implemented a small scheme",
    "start": "1509320",
    "end": "1515080"
  },
  {
    "text": "interpreter with a closure based object system now this book is sort of computer",
    "start": "1515080",
    "end": "1522399"
  },
  {
    "text": "science classic structure interpretation in computer programs one of those books that it's kind of everybody eventually refers to few people have read has one",
    "start": "1522399",
    "end": "1529539"
  },
  {
    "text": "of the dullest titles but there's a lot of really interesting stuff in there that was by Gerald Sussman and partner",
    "start": "1529539",
    "end": "1537610"
  },
  {
    "text": "and Herald Abelson interesting thing in here actually as an aside is the",
    "start": "1537610",
    "end": "1544960"
  },
  {
    "text": "Maxwell's equations as it were for programming languages this is the scheme",
    "start": "1544960",
    "end": "1550539"
  },
  {
    "text": "interpreter written in scheme or the heart of the scheme interpreter written in scheme this is a that's demonstrating",
    "start": "1550539",
    "end": "1557139"
  },
  {
    "text": "a something we would sometimes refer to as Homo iconicity the idea of a language representing itself and this is part of",
    "start": "1557139",
    "end": "1564039"
  },
  {
    "text": "the same mind-bending stuff when you first hear about cross compilers you know I'm coming across that's like how",
    "start": "1564039",
    "end": "1569200"
  },
  {
    "text": "can you write a C compiler in C that doesn't make sense yeah there's a couple of extra tricks you have to get in there",
    "start": "1569200",
    "end": "1574389"
  },
  {
    "text": "but the idea is let us write this one out and let us do this let us describe the language in terms of itself and",
    "start": "1574389",
    "end": "1580210"
  },
  {
    "text": "translate that and then you've got the kernel and you can kind of bootstrap everything from there but it's a very",
    "start": "1580210",
    "end": "1585279"
  },
  {
    "text": "profound idea because it you can see it's very simple it's a favorable font it fits on once it fits on one slide and",
    "start": "1585279",
    "end": "1591519"
  },
  {
    "text": "that is kind of everything that you need to make this stuff work what is interesting is that Alan Kay did",
    "start": "1591519",
    "end": "1599730"
  },
  {
    "text": "the same for small talk he wrote the basic idea of small talk in small talk his he did this kind exact",
    "start": "1599730",
    "end": "1607170"
  },
  {
    "text": "Lisp ish type of thing and small talk is all about closures and this idea however",
    "start": "1607170",
    "end": "1613170"
  },
  {
    "text": "whenever people sort of always talk about purity I've just done it I just did it with Excel and functional",
    "start": "1613170",
    "end": "1618420"
  },
  {
    "text": "programming it turns out this thing I discovered a few years ago Dan Ingalls was some of you work with Alan Kay at",
    "start": "1618420",
    "end": "1624180"
  },
  {
    "text": "Xerox PARC Dan Ingalls implemented the first version of small talk 72 now small",
    "start": "1624180",
    "end": "1630060"
  },
  {
    "text": "talk is a language often touted as a very pure object-oriented language for a",
    "start": "1630060",
    "end": "1636210"
  },
  {
    "text": "few people use it now very few people have had hands-on with it but its influence is is quite quite",
    "start": "1636210",
    "end": "1643740"
  },
  {
    "text": "marked in fact if you go and look at Ruby a lot of that Matz was inspired very heavily by ideas that he found in",
    "start": "1643740",
    "end": "1650010"
  },
  {
    "text": "small talk but what is interesting is that Darin Ingalls took the small talk",
    "start": "1650010",
    "end": "1656070"
  },
  {
    "text": "version of this and implemented it at home using basic it's kind of like it's",
    "start": "1656070",
    "end": "1663210"
  },
  {
    "text": "beautiful elegant object because it was a time this is the 1970s time sharing systems had just come in and what else",
    "start": "1663210",
    "end": "1668820"
  },
  {
    "text": "do you have available to you on a time sharing system you didn't really have high pact and pilots he was busy working at home and it turns out that it basic",
    "start": "1668820",
    "end": "1675750"
  },
  {
    "text": "was the only language available so you know you make do with what you've got now this is kind of interesting because",
    "start": "1675750",
    "end": "1681600"
  },
  {
    "text": "you can actually see there's a little bit here that says lambda and that's kind of that's one of the more interesting bits there we go lambda make",
    "start": "1681600",
    "end": "1688800"
  },
  {
    "text": "procedure bind the environment and do all the rest of it that's all good that turns out to be quite an important bit",
    "start": "1688800",
    "end": "1695360"
  },
  {
    "text": "in a paper published in the mid-70s Sussman still point out they say well",
    "start": "1695360",
    "end": "1702570"
  },
  {
    "text": "here's why we did this we weren't just inventing languages for kicks this worked fell out of an initial attempt to",
    "start": "1702570",
    "end": "1708630"
  },
  {
    "text": "understand the activeness of actus Carl Hewitt that come out in the early",
    "start": "1708630",
    "end": "1714540"
  },
  {
    "text": "seventies with this idea of computation the actor model and Carl Hewitt has",
    "start": "1714540",
    "end": "1723450"
  },
  {
    "text": "written some crazy ideas I've read some of the original papers I ended up doing my master's degree thesis was on actors",
    "start": "1723450",
    "end": "1729309"
  },
  {
    "text": "and I have to admit the call here at stuff was the least accessible and since",
    "start": "1729309",
    "end": "1734710"
  },
  {
    "text": "I understand the motivation what is what is an actor is it is it an object is it oh what actually is it so they they did",
    "start": "1734710",
    "end": "1742419"
  },
  {
    "text": "what a number of people did in academia at that time is if you don't understand something let's build a language to",
    "start": "1742419",
    "end": "1748419"
  },
  {
    "text": "understand it yeah and this was a part of a series of languages there was a",
    "start": "1748419",
    "end": "1755049"
  },
  {
    "text": "kind of a culture in the AI community back then of naming your Lisp variants",
    "start": "1755049",
    "end": "1760990"
  },
  {
    "text": "after something like well one of them is called planner and other was called mapper this was supposed to be called",
    "start": "1760990",
    "end": "1766749"
  },
  {
    "text": "schema you get the idea of what's going on problem is there was a six six",
    "start": "1766749",
    "end": "1772749"
  },
  {
    "text": "character limit on file names so schema-less one that trim down becomes scheme hence the name scheme this",
    "start": "1772749",
    "end": "1781059"
  },
  {
    "text": "interpreter attempting to mix the use of actors and list lambda expressions in a clean manner now I saw a talk by guy",
    "start": "1781059",
    "end": "1788200"
  },
  {
    "text": "Steele 2005-2006 what was interesting is he talked about this when it was",
    "start": "1788200",
    "end": "1795399"
  },
  {
    "text": "completed we discovered that actors and the land of expressions were identical and implementation in other words it",
    "start": "1795399",
    "end": "1802899"
  },
  {
    "text": "turns out that that bit there that says lambda it turns out they had another bit",
    "start": "1802899",
    "end": "1808119"
  },
  {
    "text": "and they call them alpha expressions for actor it turns out it was syntactically identical this is the joy of having code",
    "start": "1808119",
    "end": "1813820"
  },
  {
    "text": "that fits on one page and they said wait a minute it's exactly the same except the names are different but other than that it's structurally similar wait a",
    "start": "1813820",
    "end": "1819759"
  },
  {
    "text": "minute both mind-blown actors are Landis Wow cool so that's where it all comes",
    "start": "1819759",
    "end": "1826269"
  },
  {
    "text": "from but that was the motivation so we've now just unified another paradigm",
    "start": "1826269",
    "end": "1832389"
  },
  {
    "text": "with Landis at this point crook na has",
    "start": "1832389",
    "end": "1839169"
  },
  {
    "text": "another walk with Anton who tends to impress his master by saying master I had diligently studied the matter now",
    "start": "1839169",
    "end": "1844240"
  },
  {
    "text": "understand that objects are truly a poor man's closures quick now I responded by hitting Anton with his stick saying when",
    "start": "1844240",
    "end": "1850450"
  },
  {
    "text": "will you learn closures are a poor man's object at that moment Anton became enlightened this is kind of duality here",
    "start": "1850450",
    "end": "1857350"
  },
  {
    "text": "and it's one that we kind of pick up it's a rather nice paper from 2009 will",
    "start": "1857350",
    "end": "1862659"
  },
  {
    "text": "you cook it's based on revisiting a paper on data abstraction and polymorphism that",
    "start": "1862659",
    "end": "1869649"
  },
  {
    "text": "was a very influential in the night in 1984 Lukic art daily peter Wagner published it and William Kirk goes back",
    "start": "1869649",
    "end": "1878139"
  },
  {
    "text": "to it a number points he makes but one of my favorite is lambda calculus was the first object oriented language by",
    "start": "1878139",
    "end": "1884590"
  },
  {
    "text": "looking at a number of things related to polymorphism and and and so on and we can actually see this if we look",
    "start": "1884590",
    "end": "1890710"
  },
  {
    "text": "at so this is seven mountains just outside Las Vegas as you can see the",
    "start": "1890710",
    "end": "1899559"
  },
  {
    "text": "data structure in use here is the stack I'm going to be traditional with this so",
    "start": "1899559",
    "end": "1905440"
  },
  {
    "text": "you know here we have the quote this is this is if you like this is a kind of a",
    "start": "1905440",
    "end": "1913330"
  },
  {
    "text": "functions as objects sometimes called modules but and that's not that that terminology is falling out of favor but",
    "start": "1913330",
    "end": "1919929"
  },
  {
    "text": "this is the purest object model that lives inside of JavaScript there's quite a few object models that live inside of",
    "start": "1919929",
    "end": "1925360"
  },
  {
    "text": "JavaScript and lots of different ways of getting them but if you like this is the one that most directly represents this idea of closure and pure data",
    "start": "1925360",
    "end": "1933340"
  },
  {
    "text": "abstraction and so what we see here is simply I've got the outer thing I'm",
    "start": "1933340",
    "end": "1939369"
  },
  {
    "text": "basically saying I've got a name that I'm going to associate it's just the abbreviation there's no cycles here",
    "start": "1939369",
    "end": "1946330"
  },
  {
    "text": "it's a lambda you call it and then you will get a new thing a new record or a",
    "start": "1946330",
    "end": "1952299"
  },
  {
    "text": "new object that happens to have names accessible depth top push and pop and each one of these is bound to a lambda",
    "start": "1952299",
    "end": "1959379"
  },
  {
    "text": "each one of which is indeed a closure because it's referring to a local variable items that items list is about",
    "start": "1959379",
    "end": "1966190"
  },
  {
    "text": "as private as you can get it's an array that is a local variable and it's it's",
    "start": "1966190",
    "end": "1971200"
  },
  {
    "text": "truly local that's bound in with the scope so it's not it's not in the sense it's not a there's not a keyword thing",
    "start": "1971200",
    "end": "1977950"
  },
  {
    "text": "going on here it's it's hidden because it's hidden it's not hidden because it's inaccessible that's a difference in",
    "start": "1977950",
    "end": "1983529"
  },
  {
    "text": "languages like C sharp and Java if you say oh yes we've hidden this now you haven't I can see right there on the",
    "start": "1983529",
    "end": "1989649"
  },
  {
    "text": "page I can do reflection and I can see it right there that field it's there you",
    "start": "1989649",
    "end": "1995399"
  },
  {
    "text": "just said you can't access it I can perfectly well see it but you just can't access it whereas here it's just like no",
    "start": "1995399",
    "end": "2001759"
  },
  {
    "text": "there is nothing this is the bottom of the iceberg so this takes us to to",
    "start": "2001759",
    "end": "2008269"
  },
  {
    "text": "another paradigm and a lot of people associate structured programming with the idea of go to free programming so",
    "start": "2008269",
    "end": "2016879"
  },
  {
    "text": "this book was published in 72 based on work in the late 60s and early 70s and",
    "start": "2016879",
    "end": "2022509"
  },
  {
    "text": "in it they make a really important point well the most powerful mechanisms of",
    "start": "2022509",
    "end": "2027769"
  },
  {
    "text": "program structuring is the block and procedure concept so I'm gonna give you some code here that is based on a",
    "start": "2027769",
    "end": "2034489"
  },
  {
    "text": "language based on Algol 60 predecessor of Algol 68 and what we're going to do",
    "start": "2034489",
    "end": "2040099"
  },
  {
    "text": "is going to have an array of items one to capacity you couldn't have dynamically sized arrays so one to",
    "start": "2040099",
    "end": "2046129"
  },
  {
    "text": "capacity or other you could not have dynamically allocated is it you can capacity as long as that's in an outer",
    "start": "2046129",
    "end": "2053388"
  },
  {
    "text": "scope we can allocate that on the stack and it's got a reference to Rox",
    "start": "2053389",
    "end": "2059059"
  },
  {
    "text": "and we're going to keep a count of how much of that capacity we've used just as a general point you have a nil there",
    "start": "2059059",
    "end": "2066408"
  },
  {
    "text": "isn't there is then there is a null reference here this is the null reference that was borrowed from another language in the algal family algal W and",
    "start": "2066409",
    "end": "2075099"
  },
  {
    "text": "Tony Hoare kind of feels he is responsible for inventing null which he calls a billion dollar mistake but this",
    "start": "2075099",
    "end": "2082460"
  },
  {
    "text": "is where it comes from and then we can actually be we can we can go ahead and initialize that and because it's a",
    "start": "2082460",
    "end": "2089000"
  },
  {
    "text": "proper block structured language and this is the thing I think we've also forgotten what block structured",
    "start": "2089000",
    "end": "2094010"
  },
  {
    "text": "originally meant it meant that you could put anything in a block that means if you want to put a procedure in a block you can put a procedure in a block it's",
    "start": "2094010",
    "end": "2100160"
  },
  {
    "text": "as simple as that there's no idea of there's a top level and you can't define nested things it turns out curiously that a number of",
    "start": "2100160",
    "end": "2106099"
  },
  {
    "text": "languages are kind of caught up with this one a little bit late so c-sharp said you know what we're gonna have these kind of like you know you can have",
    "start": "2106099",
    "end": "2112430"
  },
  {
    "text": "these kind of methods nested inside your methods this idea is a very very old one but that idea being able to offer",
    "start": "2112430",
    "end": "2119079"
  },
  {
    "text": "operations desktop push and pop on that is interesting so that's a block of code",
    "start": "2119079",
    "end": "2124640"
  },
  {
    "text": "that's your begin and end that's your open and closing curly a procedure which is capable of giving",
    "start": "2124640",
    "end": "2130300"
  },
  {
    "text": "rise to block instances now that's kind of interesting because given the specialist we're talking about stacks",
    "start": "2130300",
    "end": "2136620"
  },
  {
    "text": "the whole point here is that normally when you think about blocks its stack discipline you enter a block you get",
    "start": "2136620",
    "end": "2142900"
  },
  {
    "text": "your variables you do you work you leave the block and that's all gone okay it's gone there are no more variables that's",
    "start": "2142900",
    "end": "2149140"
  },
  {
    "text": "it that some of those objects may live on thanks to the garbage collector but they're on there that's done there is a",
    "start": "2149140",
    "end": "2154330"
  },
  {
    "text": "very simple idea here what if it doesn't go away what if the block is itself a thing huh what if what have you returned",
    "start": "2154330",
    "end": "2162040"
  },
  {
    "text": "the block and say look I've got a block and it's got procedures in it and it's got variables it's got state here have",
    "start": "2162040",
    "end": "2167320"
  },
  {
    "text": "this you can use it and that was the beginning of object orientation the language in question so here we go which",
    "start": "2167320",
    "end": "2173650"
  },
  {
    "text": "survive it's called be known as claw clasp and the instances will be known as objects of that class and classes did",
    "start": "2173650",
    "end": "2178840"
  },
  {
    "text": "not have to be named they could be anonymous just like lambdas you could have unnamed classes but I'll show you",
    "start": "2178840",
    "end": "2184780"
  },
  {
    "text": "the named version what I do is we take that and then we just simply add that at the top and we're done and that's where",
    "start": "2184780",
    "end": "2190660"
  },
  {
    "text": "so this is this is similar 67 the first object-oriented language it's based on Algol 60 and it follows exactly that",
    "start": "2190660",
    "end": "2197080"
  },
  {
    "text": "idea of why don't we take a block and then add the idea that the block doesn't go away when you've left it it can",
    "start": "2197080",
    "end": "2202330"
  },
  {
    "text": "become a thing that you can refer to wow you can create a whole paradigm out of that and again the land earnest of that",
    "start": "2202330",
    "end": "2208120"
  },
  {
    "text": "is it's pretty cool we could of course use any notation we want to not laugh at notations invent them they are powerful",
    "start": "2208120",
    "end": "2213820"
  },
  {
    "text": "so Nobel laureate Richard Feynman made this observation in fact mathematics is",
    "start": "2213820",
    "end": "2219580"
  },
  {
    "text": "to a large extent invention of better notations so let's talk about that",
    "start": "2219580",
    "end": "2226080"
  },
  {
    "text": "Alonzo Church was asked why do you why did you choose lambda and there are a number of different origin stories the",
    "start": "2226080",
    "end": "2231610"
  },
  {
    "text": "one that is the most rational it goes like this you've got an abstraction you",
    "start": "2231610",
    "end": "2239020"
  },
  {
    "text": "basically want to say I've got a a is a bound variable I want to show I want to show an abstraction with respect to that",
    "start": "2239020",
    "end": "2245170"
  },
  {
    "text": "and his original form was this it was a carat okay it's good put it don't by the",
    "start": "2245170",
    "end": "2252430"
  },
  {
    "text": "way this also means something I haven't said so far and I'll state it lambdas can only take one parameter because if",
    "start": "2252430",
    "end": "2259600"
  },
  {
    "text": "you forgot that notation does make sense to have two parameters you can't do lands can only take one thing and return another and that was",
    "start": "2259600",
    "end": "2265130"
  },
  {
    "text": "that problem is and trust me you get a lot of trouble trying to find an a circumflex don't worry about your",
    "start": "2265130",
    "end": "2270500"
  },
  {
    "text": "infinitely innumerable symbols it's quite tough if you're a typesetter in the 1930s you go like come on mate",
    "start": "2270500",
    "end": "2276320"
  },
  {
    "text": "really give us a break what about that",
    "start": "2276320",
    "end": "2281770"
  },
  {
    "text": "there we go that's the story that makes the most sense later in his life Church",
    "start": "2281770",
    "end": "2288020"
  },
  {
    "text": "gave other stories which is I liked it yeah whim that was it you know why not",
    "start": "2288020",
    "end": "2293930"
  },
  {
    "text": "yeah but I like that story because it also helps demonstrate some of the aspects of what lambda is so what are",
    "start": "2293930",
    "end": "2299720"
  },
  {
    "text": "the other languages do well they took lambda and you know some of them",
    "start": "2299720",
    "end": "2307510"
  },
  {
    "text": "imaginative Lee called their lambda abstraction lambda okay so this is what Lisp did this is what scheme did if you",
    "start": "2307510",
    "end": "2313910"
  },
  {
    "text": "work in Python this is what Python does Haskell kind of said dude that's so",
    "start": "2313910",
    "end": "2319400"
  },
  {
    "text": "verbose there we go everything you need to know that is one",
    "start": "2319400",
    "end": "2327260"
  },
  {
    "text": "of the most minimal notations out there clearly you've got stuff like JavaScript",
    "start": "2327260",
    "end": "2334070"
  },
  {
    "text": "came along and said we have to call it function and then you get blank just like closure so a kind of a lisp variant",
    "start": "2334070",
    "end": "2339470"
  },
  {
    "text": "running on the JVM it decided to call it FN because clearly you know vowels",
    "start": "2339470",
    "end": "2344540"
  },
  {
    "text": "they're bad so in some languages you get func in other language you get fun here",
    "start": "2344540",
    "end": "2351320"
  },
  {
    "text": "hmm now what I consider this to be profoundly ironic it basically means",
    "start": "2351320",
    "end": "2357530"
  },
  {
    "text": "that closure has anonymous functions but it has there is nothing in the language that is called a lambda what is the logo",
    "start": "2357530",
    "end": "2365300"
  },
  {
    "text": "for the language a language that does not have anything called lambda there",
    "start": "2365300",
    "end": "2371540"
  },
  {
    "text": "you go it's either ironic or deep or quite possibly both we get C++ is a",
    "start": "2371540",
    "end": "2379430"
  },
  {
    "text": "great one this is actually you get choice of whether you want to catch a closure or not so we get square brackets",
    "start": "2379430",
    "end": "2384860"
  },
  {
    "text": "now this get some great syntax this is a valid token sequence in C++ okay what it",
    "start": "2384860",
    "end": "2394100"
  },
  {
    "text": "is is this is a lambda that captures nothing takes no arguments and does nothing and here's how you execute it so",
    "start": "2394100",
    "end": "2405290"
  },
  {
    "text": "this is kind of so this doesn't this is silence of the Landers if you like I",
    "start": "2405290",
    "end": "2411490"
  },
  {
    "text": "told you they weren't going to get any better so then we get all the language we've got JavaScript we've got c-sharp",
    "start": "2411490",
    "end": "2418400"
  },
  {
    "text": "we say you know we're gonna go for this arrow notation and then you've got some other folks you know groovy and Javas",
    "start": "2418400",
    "end": "2424010"
  },
  {
    "text": "like now we're gonna be more we're gonna be much more lightweight see that's much more lightweight it's",
    "start": "2424010",
    "end": "2429410"
  },
  {
    "text": "just like yeah but it's kind of interesting because here it isn't Java",
    "start": "2429410",
    "end": "2434770"
  },
  {
    "text": "here's the thing that does nothing well I have an interesting question how do i execute that that's a language brush in",
    "start": "2434770",
    "end": "2442610"
  },
  {
    "text": "java well how do i excuse me thing but how do i execute it and we have exact the same problem in c-sharp how do i",
    "start": "2442610",
    "end": "2448160"
  },
  {
    "text": "execute that it here's the thing that does nothing how do i execute that now it's kind of an interesting one cuz it",
    "start": "2448160",
    "end": "2453440"
  },
  {
    "text": "actually opens up a number of issues because what is the type of the return",
    "start": "2453440",
    "end": "2459100"
  },
  {
    "text": "well in the original and calculus there was only one type there are only lambdas that's it but we have grown used to",
    "start": "2459100",
    "end": "2466700"
  },
  {
    "text": "languages that have a very particular vocabulary and set of concepts the",
    "start": "2466700",
    "end": "2472280"
  },
  {
    "text": "languages most names that I've described so far are C based languages which have their origins in Algol you know the",
    "start": "2472280",
    "end": "2479240"
  },
  {
    "text": "syntax has shifted but all of the ideas are there and there's a fundamental idea in all of these languages you have",
    "start": "2479240",
    "end": "2484880"
  },
  {
    "text": "expressions and all expressions have a type clearly that's we can kind of say",
    "start": "2484880",
    "end": "2494090"
  },
  {
    "text": "well you know the original lambda can't care but what is the type of that expression in c-sharp what is the type",
    "start": "2494090",
    "end": "2499520"
  },
  {
    "text": "of that expression in Java these are C related languages in terms of their concepts of a category but it turns out",
    "start": "2499520",
    "end": "2505790"
  },
  {
    "text": "that we cannot name weak well I just don't even case we can't name it it turns out that they don't actually have a type they're not expressions in the",
    "start": "2505790",
    "end": "2512540"
  },
  {
    "text": "conventional sense the original lambda calculus is often referred to as untyped there's been a move recently people have described unit",
    "start": "2512540",
    "end": "2519800"
  },
  {
    "text": "types which is kind of cool if you want to you know confuse your colleagues if you're having one of those dynamic versus static",
    "start": "2519800",
    "end": "2525220"
  },
  {
    "text": "like debates and you think it's getting away from you just throwing new terminology you know this is on type oh",
    "start": "2525220",
    "end": "2530560"
  },
  {
    "text": "I think you'll find it's you know typed you know it's like the type of the web is in the string yeah the type of the enterprise is the",
    "start": "2530560",
    "end": "2536530"
  },
  {
    "text": "core dump you know this is there's lots of different ideas of what there is one true type but yeah shell scripts are",
    "start": "2536530",
    "end": "2543640"
  },
  {
    "text": "historically you know typed around string they are streaming typed but",
    "start": "2543640",
    "end": "2548820"
  },
  {
    "text": "there is only lambdas so this is kind of interesting what do we do now clearly",
    "start": "2548820",
    "end": "2554950"
  },
  {
    "text": "having just untyped lambda calculus is annoying and in fact Church later developed a simple typed calculus and a",
    "start": "2554950",
    "end": "2561340"
  },
  {
    "text": "number of other people kind of assume that it's just like yeah I want my convenience I want to use lambdas as a vehicle in the context of other things I",
    "start": "2561340",
    "end": "2568150"
  },
  {
    "text": "don't want to have to build everything up from scratch that's a little bit yeah Baima ones and zeros together I haven't",
    "start": "2568150",
    "end": "2573369"
  },
  {
    "text": "really moved to a very high level so we normally assume that there is a type system but we let's go have a look at",
    "start": "2573369",
    "end": "2579430"
  },
  {
    "text": "what languages do if we go to Haskell that is our square in the shell I can go",
    "start": "2579430",
    "end": "2589359"
  },
  {
    "text": "ahead and ask what's your type I don't tell me and it has a well-defined type this works with classes of numbers and",
    "start": "2589359",
    "end": "2595440"
  },
  {
    "text": "gives you a result that is of the same type there you go",
    "start": "2595440",
    "end": "2600940"
  },
  {
    "text": "it has a type the type is determined in c-sharp oh nope so it's C++",
    "start": "2600940",
    "end": "2607089"
  },
  {
    "text": "it has a type you cannot name the type the type is anonymous but it has a type",
    "start": "2607089",
    "end": "2612339"
  },
  {
    "text": "that can be deduced and you can use it it has a type that has certain syntax",
    "start": "2612339",
    "end": "2617560"
  },
  {
    "text": "associated with it if I go to python i can sit there and wrap that expression",
    "start": "2617560",
    "end": "2623080"
  },
  {
    "text": "in type and i will get an answer yeah it'll tell me hey this is a function this is an object of class function but if I go to c-sharp and try",
    "start": "2623080",
    "end": "2634089"
  },
  {
    "text": "and get type this does not work out quite so well for me operator dot cannot be applied to",
    "start": "2634089",
    "end": "2640150"
  },
  {
    "text": "operator type language question that's it no explanation I'm sorry do not pass go but why you just can't do that's been",
    "start": "2640150",
    "end": "2648760"
  },
  {
    "text": "frustrating well tell you what maybe I'll just put it into a variable",
    "start": "2648760",
    "end": "2653460"
  },
  {
    "text": "yeah same dealer again no explanation you just can't do it yeah but why no I'm telling you why it",
    "start": "2653950",
    "end": "2660190"
  },
  {
    "text": "turns out that you can that's one of the kind of the key distinction so this is the interesting thing it turns out that's not a lambda I mean it's called",
    "start": "2660190",
    "end": "2666790"
  },
  {
    "text": "the lambda but it's not a lambda you know you can call it with what you call it fret you know I'm not going to argue is your choice of names there but that",
    "start": "2666790",
    "end": "2673000"
  },
  {
    "text": "is not a language question because I cannot it doesn't support application to",
    "start": "2673000",
    "end": "2678579"
  },
  {
    "text": "get it to do anything I have to do that now technically speaking based on everything I've just said this is a",
    "start": "2678579",
    "end": "2684940"
  },
  {
    "text": "lambda expression that bit away from the type is not a lambda expression",
    "start": "2684940",
    "end": "2690390"
  },
  {
    "text": "so there are lambdas the dart lambdas and there are other things that we don't call the Landers that our lambdas and",
    "start": "2690390",
    "end": "2695440"
  },
  {
    "text": "you know what about Java yeah what about Java it's slightly well at least we got to use normal function",
    "start": "2695440",
    "end": "2702280"
  },
  {
    "text": "call or method call syntax here you only hit Java it gets a bit Messier because Java doesn't have this idea it basically",
    "start": "2702280",
    "end": "2710740"
  },
  {
    "text": "says you can't do any kind of there's no abstractions for operator overloading or",
    "start": "2710740",
    "end": "2717450"
  },
  {
    "text": "being able to hook into that in the language that simply doesn't exist and so for yeah there's a bit of a",
    "start": "2717450",
    "end": "2723760"
  },
  {
    "text": "compatibility issue here in fact there's a bit of a consistency issue that is not a lambda but if I execute it I can't",
    "start": "2723760",
    "end": "2730990"
  },
  {
    "text": "just put her ends around it like a method so it doesn't behave like a functional abstraction the other function abstractions in the language it",
    "start": "2730990",
    "end": "2737410"
  },
  {
    "text": "turns out there's a whole library of interfaces that I can use to wrap lambdas and I can also apply my own but",
    "start": "2737410",
    "end": "2744579"
  },
  {
    "text": "those are not the type of the thing they are things you know there was the JIT LAN just used to generate something but I can then give it a type and it's a big",
    "start": "2744579",
    "end": "2753190"
  },
  {
    "text": "it's a big old mess it's a big old mess and that's just the basic variants",
    "start": "2753190",
    "end": "2758680"
  },
  {
    "text": "that's one and two parameters and deals with the fact that generics aren't",
    "start": "2758680",
    "end": "2763750"
  },
  {
    "text": "rarified in the language there's a lot of duplication here so did they choose a consistent name given I'm not you given",
    "start": "2763750",
    "end": "2769839"
  },
  {
    "text": "that we understand that normally how you call a functional abstraction is to use open parens closed parens that's one",
    "start": "2769839",
    "end": "2775599"
  },
  {
    "text": "that is the one syntax to rule them all so surely they must have chosen one name one consistent name and now they didn't",
    "start": "2775599",
    "end": "2784319"
  },
  {
    "text": "some of them are called apply some of them are called test some call the sect and someone will get",
    "start": "2784319",
    "end": "2789400"
  },
  {
    "text": "so there are four different names actually turns out this five because if we want to do this one there's run now",
    "start": "2789400",
    "end": "2797560"
  },
  {
    "text": "sometimes people said well yeah we don't we don't have enough information to deduce the types and that's quite reasonable because these expressions",
    "start": "2797560",
    "end": "2803590"
  },
  {
    "text": "tend to be very light a lot of deduction needs to go on what's the return type well that's how we have to have a look",
    "start": "2803590",
    "end": "2808810"
  },
  {
    "text": "what's the you know what what are the parameter types well we're going to have to look at context but I've just given",
    "start": "2808810",
    "end": "2814210"
  },
  {
    "text": "you an expression that has no context it's bound to nothing it takes no arguments returns nothing it really is",
    "start": "2814210",
    "end": "2819880"
  },
  {
    "text": "if you're looking for the type it's void void so there's no deduction to be done here but we have to jump through the",
    "start": "2819880",
    "end": "2825880"
  },
  {
    "text": "hoops here so yeah it turns out the c-sharp and java do not support the",
    "start": "2825880",
    "end": "2832660"
  },
  {
    "text": "third of the three things so they are very useful but they are not really",
    "start": "2832660",
    "end": "2840369"
  },
  {
    "text": "strictly lambdas now it may come as no surprise that Alonzo Church doesn't care",
    "start": "2840369",
    "end": "2848170"
  },
  {
    "text": "about any of this not simply because he is yea long since deceased but this was not the problem he was trying to solve",
    "start": "2848170",
    "end": "2853930"
  },
  {
    "text": "it turns out the lambdas came out to be useful for other reasons but his original motivation was something well",
    "start": "2853930",
    "end": "2861100"
  },
  {
    "text": "it was to do with numbers countable numbers innumerably infinite sequences",
    "start": "2861100",
    "end": "2866920"
  },
  {
    "text": "of numbers and do they have well can we find an end to things yeah is there a finiteness to certain sequences of",
    "start": "2866920",
    "end": "2872350"
  },
  {
    "text": "execution or not this is a very simple question turns out has ridiculously hard answers so this observation I've got",
    "start": "2872350",
    "end": "2880480"
  },
  {
    "text": "must have forward slumped against the bulkhead and started to count to 10 he was desperately worried one day sentient",
    "start": "2880480",
    "end": "2886000"
  },
  {
    "text": "life-forms would forget how to do this only by counting could humans demonstrate their independence of computers so of course remember I just",
    "start": "2886000",
    "end": "2895030"
  },
  {
    "text": "said right back at the beginning and I've kind of none cheated it every now and then if you do pure lambdas there's",
    "start": "2895030",
    "end": "2901750"
  },
  {
    "text": "no numbers because there are only lambdas can you go do arithmetic when",
    "start": "2901750",
    "end": "2907930"
  },
  {
    "text": "you've got no numbers well the answer is obvious you invent them you know you",
    "start": "2907930",
    "end": "2914320"
  },
  {
    "text": "create your own numbers so we're gonna start with nothing and this is in fact the curiously enough",
    "start": "2914320",
    "end": "2922739"
  },
  {
    "text": "Church did not you need a zero in his original paper but here's a zero and I",
    "start": "2922739",
    "end": "2930959"
  },
  {
    "text": "here is a lambda that takes two parameters effort an X X is itself",
    "start": "2930959",
    "end": "2937930"
  },
  {
    "text": "actually a function but I'm just choosing names that look a little more obvious and here we're not going to",
    "start": "2937930",
    "end": "2943239"
  },
  {
    "text": "apply F to X we're just going to return X with one we're going to apply it once",
    "start": "2943239",
    "end": "2949469"
  },
  {
    "text": "to X with two we're going to apply F to the result of F to the result of X with",
    "start": "2949469",
    "end": "2956109"
  },
  {
    "text": "three we're going to so you see what's going on here is what we've done is we defined our numbers as the application",
    "start": "2956109",
    "end": "2962609"
  },
  {
    "text": "of a functional thing an application of a lambda to something else and the number of times we apply it repeatedly",
    "start": "2962609",
    "end": "2969339"
  },
  {
    "text": "is the number that is the thing that is how we distinguish it so four is equivalent to that five and so on I",
    "start": "2969339",
    "end": "2976150"
  },
  {
    "text": "won't go in numeral infinite on you there are a couple of observations we could write it like that there are some",
    "start": "2976150",
    "end": "2981160"
  },
  {
    "text": "shorthands in fact to be consistent we could write it like that I'm not going to do that here I want the full form",
    "start": "2981160",
    "end": "2986519"
  },
  {
    "text": "also I told you that lambda is strictly speaking only take one parameter but",
    "start": "2986519",
    "end": "2992109"
  },
  {
    "text": "it's a shorthand and it's in the original paper that you can basically go oh lambda FX that's understood as being",
    "start": "2992109",
    "end": "2997569"
  },
  {
    "text": "lambda F got lambda X and notationally that's convenient it just means that",
    "start": "2997569",
    "end": "3003779"
  },
  {
    "text": "everything is curried if you've done highschool or looked at all this kind of stuff all that's for free that was built in but I can use this long form cuz it",
    "start": "3003779",
    "end": "3010319"
  },
  {
    "text": "makes it a lot easier to turn this into JavaScript now I know if those of you who work JavaScript already know that",
    "start": "3010319",
    "end": "3015900"
  },
  {
    "text": "JavaScript has a really weird idea of numbers so we're not missing anything by skipping it so here we go",
    "start": "3015900",
    "end": "3022969"
  },
  {
    "text": "I'm going to have underscore 0 a so the",
    "start": "3022969",
    "end": "3028440"
  },
  {
    "text": "thing things nice about JavaScript choice of notation is this is actually one of the lightest I've done this in a number of languages because I have a",
    "start": "3028440",
    "end": "3035130"
  },
  {
    "text": "certain masochistic streak and honestly JavaScript is one of the easiest to do this it's syntactically light and you",
    "start": "3035130",
    "end": "3040859"
  },
  {
    "text": "can really see when you've gone wrong but yeah so basically we've now recreated the number system awesome but",
    "start": "3040859",
    "end": "3048539"
  },
  {
    "text": "how do we know that it works well what is that this is a thing that does",
    "start": "3048539",
    "end": "3053890"
  },
  {
    "text": "stuff we aren't actually defining or we are defining numbers by and/or as it",
    "start": "3053890",
    "end": "3060130"
  },
  {
    "text": "were application this is the thing that doesn't apply a thing what's it not going to apply well I'm",
    "start": "3060130",
    "end": "3067090"
  },
  {
    "text": "gonna plug in some good old-fashioned JavaScript I'm gonna take an increment you receive an argument and you add one",
    "start": "3067090",
    "end": "3073930"
  },
  {
    "text": "to it and that's your result so we're not going to apply that because it's 0 and what is it that we're not",
    "start": "3073930",
    "end": "3079540"
  },
  {
    "text": "going to apply it to well I'm going to use the original 0 in the language so",
    "start": "3079540",
    "end": "3085540"
  },
  {
    "text": "we're not going to do that and what's the result of doing this 0 it's a JavaScript 0 what happens when we do it",
    "start": "3085540",
    "end": "3092560"
  },
  {
    "text": "once one applies F n becomes n plus 1",
    "start": "3092560",
    "end": "3098260"
  },
  {
    "text": "once which gives us that and then we see so in other words the numbers these are",
    "start": "3098260",
    "end": "3104440"
  },
  {
    "text": "this is called the church encoding these are church numerals which of you here if you read that out of context it makes",
    "start": "3104440",
    "end": "3110680"
  },
  {
    "text": "you think since I talking Roman Catholics here what are we worried over here Church numerals so these are church",
    "start": "3110680",
    "end": "3117760"
  },
  {
    "text": "numerals this is a really cool idea it's moderately insane why don't have curacy enough one of the best best explanations",
    "start": "3117760",
    "end": "3126310"
  },
  {
    "text": "of it i came across was in shadows of the mind no no emperor's new mind by roger",
    "start": "3126310",
    "end": "3132760"
  },
  {
    "text": "penrose which is a book about why it is that we will have create consciousness and a bunch of quantum mechanics and",
    "start": "3132760",
    "end": "3139360"
  },
  {
    "text": "stuff but and ultimately you tend to think he's got a very he has a great",
    "start": "3139360",
    "end": "3145090"
  },
  {
    "text": "mind but he's gone wrong but it has one of the best explanations of this and i think this is one of the first places i",
    "start": "3145090",
    "end": "3150730"
  },
  {
    "text": "encountered it's just ok so numbers can be considered to be the act of applying something to repeat a number of times",
    "start": "3150730",
    "end": "3156100"
  },
  {
    "text": "that's really cool ok um let's go back to our friend square",
    "start": "3156100",
    "end": "3161280"
  },
  {
    "text": "so here's a really simple way of implementing it we take a thing if 2 2",
    "start": "3161280",
    "end": "3169900"
  },
  {
    "text": "is is the tunis of something i'm going to take em and I'm gonna apply it to em",
    "start": "3169900",
    "end": "3175320"
  },
  {
    "text": "huh so that's squared I'm gonna apply em to em how many times well that's twice it's",
    "start": "3175320",
    "end": "3180790"
  },
  {
    "text": "no I'm gonna do that what happens if I put seven in well",
    "start": "3180790",
    "end": "3185830"
  },
  {
    "text": "seven is a thing that's a counting thing so I'm gonna apply seven seven times and",
    "start": "3185830",
    "end": "3192180"
  },
  {
    "text": "seven does seven things so huh this is really cool because we can now apply",
    "start": "3192180",
    "end": "3197530"
  },
  {
    "text": "this straight to start with zero and the answer you've been waiting for since the",
    "start": "3197530",
    "end": "3202660"
  },
  {
    "text": "opening minutes of this talk yes it is 49 okay but we've just recreated numbers",
    "start": "3202660",
    "end": "3208630"
  },
  {
    "text": "now why stop there why stop there 19th century let's go back to the 19th",
    "start": "3208630",
    "end": "3215590"
  },
  {
    "text": "century when we thought we could solve and know everything was knowable everything was logical Victorian",
    "start": "3215590",
    "end": "3221200"
  },
  {
    "text": "engineering it reaches Peaks like yes the world can be understood through engineering through mass we will you",
    "start": "3221200",
    "end": "3226840"
  },
  {
    "text": "know everything will be understood and the optimism is apparent in this gentleman's book title very very these",
    "start": "3226840",
    "end": "3234369"
  },
  {
    "text": "days people just refer to it as the laws of thought but clearly this is Victorian era people still in too long book titles and investigation of the laws of thought",
    "start": "3234369",
    "end": "3240820"
  },
  {
    "text": "which are on which I found the mathematical c et cetera so there's beautiful optimism that actually we think logically come the late 20th",
    "start": "3240820",
    "end": "3248410"
  },
  {
    "text": "century that that edifice was torn down hugely it turns out that logic is the",
    "start": "3248410",
    "end": "3253990"
  },
  {
    "text": "thing that you learn we are a mess logic is a tidiness that can only be acquired through education by our default state",
    "start": "3253990",
    "end": "3261190"
  },
  {
    "text": "is to be messy and irrational I refer you to the activities outside was",
    "start": "3261190",
    "end": "3266440"
  },
  {
    "text": "evening so what did he do for us well he basically formalized propositional calculus and you know we live in a post",
    "start": "3266440",
    "end": "3272920"
  },
  {
    "text": "truth era so I thought I'd just show you this just so yeah before you lose sight of what it is and false you know what",
    "start": "3272920",
    "end": "3278740"
  },
  {
    "text": "you can church and code this I can apply it so lambda a B truth is a falsehood is",
    "start": "3278740",
    "end": "3287470"
  },
  {
    "text": "B so I'm now got shrim Fosters pretty cool if you look carefully although I've",
    "start": "3287470",
    "end": "3292840"
  },
  {
    "text": "used different names you may recognize this if I did this as f and X you may",
    "start": "3292840",
    "end": "3297850"
  },
  {
    "text": "recognize this as zero so for all those of you wondered is false zero is that is that just a programmer thing no it's",
    "start": "3297850",
    "end": "3304780"
  },
  {
    "text": "actually built into the foundations of lambda calculus that zero is false so next time you have one of those debates",
    "start": "3304780",
    "end": "3311220"
  },
  {
    "text": "depending on where you stand on it but if you ever need to justify your gratuitous abuse of a language feature",
    "start": "3311220",
    "end": "3317790"
  },
  {
    "text": "and this happens to have been what you've done you have a justification for it just refer them to the paper they'll",
    "start": "3317790",
    "end": "3323970"
  },
  {
    "text": "never get through it it's our friend small talk and what it's small talk well",
    "start": "3323970",
    "end": "3331350"
  },
  {
    "text": "this is the whole thing small talks idea of what is truth and falsehood is not there is a symbol called true and there",
    "start": "3331350",
    "end": "3336810"
  },
  {
    "text": "is a symbol called false truth and falsehood do different things so truth",
    "start": "3336810",
    "end": "3343860"
  },
  {
    "text": "does one thing this is polymorphic if I give a and B to a thing that is true I will get a back I'll get the a part so",
    "start": "3343860",
    "end": "3351360"
  },
  {
    "text": "I'm basically created the basically if-else here which is kind of neat so we",
    "start": "3351360",
    "end": "3356370"
  },
  {
    "text": "can take this a bit further it turns out you can get really carried away with this pair was originally introduced so",
    "start": "3356370",
    "end": "3365760"
  },
  {
    "text": "pair is you take an ax and a Y and then you bind them together with an F and you kind of glue that together you can pass",
    "start": "3365760",
    "end": "3370890"
  },
  {
    "text": "it around you can pass it around to an operation first which will return you the X well I'll pressure second which will return you the Y if you look very",
    "start": "3370890",
    "end": "3377400"
  },
  {
    "text": "closely at those you realize that first is basically pair true second is pair of",
    "start": "3377400",
    "end": "3384180"
  },
  {
    "text": "false this is quite nice all you need to do now is add nil and you just reinvented Lisp",
    "start": "3384180",
    "end": "3390320"
  },
  {
    "text": "so it's ridiculously powerful for words I'm not suggesting that you got to go out and just like just say look don't",
    "start": "3390320",
    "end": "3397440"
  },
  {
    "text": "worry about the optimize will take care of it I'm go I am NOT going to use these mere mortal numbers and integers that you you've been talking about using you",
    "start": "3397440",
    "end": "3404130"
  },
  {
    "text": "that domain-driven design thing of yours we are going to build things from the purest of the pure you know oh you mean",
    "start": "3404130",
    "end": "3410580"
  },
  {
    "text": "you're gonna use zeros and ones serious once do we're gonna use landis we're gonna make our own zeros and once this",
    "start": "3410580",
    "end": "3417120"
  },
  {
    "text": "is the craftsmanship movement we make our own zeros and ones finely-crafted so",
    "start": "3417120",
    "end": "3425070"
  },
  {
    "text": "I'm going to end with a exploration of one of the most teasing challenges",
    "start": "3425070",
    "end": "3430880"
  },
  {
    "text": "fizzbuzz what was interesting as a number of years ago I guess it was about",
    "start": "3430880",
    "end": "3436410"
  },
  {
    "text": "ten years ago I was reading a piece by Tom Stewart and it's called programming with nothing and I suddenly realized I",
    "start": "3436410",
    "end": "3441930"
  },
  {
    "text": "know what you're doing it was a ruby piece and Tom solved it like this now",
    "start": "3441930",
    "end": "3448170"
  },
  {
    "text": "this is not a language you're familiar with and I just said Ruby well what did he do well what he did is he basically programmed with nothing he",
    "start": "3448170",
    "end": "3455280"
  },
  {
    "text": "had those three properties I can have a name of a thing a variable I can have",
    "start": "3455280",
    "end": "3461610"
  },
  {
    "text": "lambdas and I can apply a lambda that is it and he built up and these are all the",
    "start": "3461610",
    "end": "3469050"
  },
  {
    "text": "abbreviations so he built up all of these concepts he built the numbers 3 5 50 100 he built logic he built iteration",
    "start": "3469050",
    "end": "3479880"
  },
  {
    "text": "he did the whole thing and you can find that on blog programming with nothing",
    "start": "3479880",
    "end": "3485970"
  },
  {
    "text": "but he also included it in his book understanding computation he also included the full form if you expand it",
    "start": "3485970",
    "end": "3492120"
  },
  {
    "text": "from the abbreviations that's what it looks like you know it is one of the crazier versions of fizzbuzz I have ever",
    "start": "3492120",
    "end": "3498210"
  },
  {
    "text": "encountered yeah yeah this is it yeah this is the kind of stuff you give to",
    "start": "3498210",
    "end": "3503520"
  },
  {
    "text": "somebody could you just work this one out for me you know I I need some more detail here yeah good luck debugging",
    "start": "3503520",
    "end": "3510240"
  },
  {
    "text": "that by the way so we found is this idea",
    "start": "3510240",
    "end": "3524850"
  },
  {
    "text": "of lambda it was in one sense of mathematical curiosity it helped solve a",
    "start": "3524850",
    "end": "3532020"
  },
  {
    "text": "problem it was shown and it was to do it the fact it was such a simple formalism that even numbers could be encoded in it",
    "start": "3532020",
    "end": "3537870"
  },
  {
    "text": "and it had rules of reduction and therefore you had very simple operations it turns out integers on their own are",
    "start": "3537870",
    "end": "3543900"
  },
  {
    "text": "surprisingly hard we tend to think it was quite easy there's a whole load of stuff it's the idea of what I want to understand certain sequences if I can",
    "start": "3543900",
    "end": "3550620"
  },
  {
    "text": "encode everything in the simplest form then I can provide proofs about it and",
    "start": "3550620",
    "end": "3555630"
  },
  {
    "text": "this turned out to be incredibly convenient but this idea of an abstraction that was not about things",
    "start": "3555630",
    "end": "3561390"
  },
  {
    "text": "but about doing if you like it's about functions that's not the usual candidate for this stuff we normally mass was",
    "start": "3561390",
    "end": "3567900"
  },
  {
    "text": "always phrased in terms of of objects or things not objects in the arrow sense but of things of entities here we are",
    "start": "3567900",
    "end": "3573960"
  },
  {
    "text": "talking about something that is much more intangible a much more first class idea a function rather than function",
    "start": "3573960",
    "end": "3579720"
  },
  {
    "text": "being a convenience it was actually a thing and we can reduce everything down to that so there is nothing else and this",
    "start": "3579720",
    "end": "3586069"
  },
  {
    "text": "proved to be surprisingly powerful so powerful in fact that when people started thinking about well what how do",
    "start": "3586069",
    "end": "3592219"
  },
  {
    "text": "you build up simple languages how do we do this this idea freestanding functions whether we take it at its rawest level",
    "start": "3592219",
    "end": "3598219"
  },
  {
    "text": "or start saying you know if I know how to just pass a piece of doing stuff to us around rather than having to name",
    "start": "3598219",
    "end": "3604039"
  },
  {
    "text": "everything you only I could just create everything and just pass it around and we discover that that's actually been",
    "start": "3604039",
    "end": "3609650"
  },
  {
    "text": "infused in a number of different paradigms obviously there is a natural home in functional programming for this",
    "start": "3609650",
    "end": "3615380"
  },
  {
    "text": "but what we first see is that that is not restricted to that that every paradigm has ultimately ended up claiming it as its own because of that",
    "start": "3615380",
    "end": "3622910"
  },
  {
    "text": "convenience so I hope that has been thought-provoking and that you managed",
    "start": "3622910",
    "end": "3628309"
  },
  {
    "text": "to stay awake and that is provoked some thoughts in you maybe you can just gonna",
    "start": "3628309",
    "end": "3633619"
  },
  {
    "text": "go home and drink that away or maybe you're gonna go home and say alright ok let's just try this I can do this let's",
    "start": "3633619",
    "end": "3640819"
  },
  {
    "text": "try a little bit church encoding COBOL yeah yeah but yeah good good luck with that thank",
    "start": "3640819",
    "end": "3648019"
  },
  {
    "text": "you very much [Applause]",
    "start": "3648019",
    "end": "3653020"
  }
]