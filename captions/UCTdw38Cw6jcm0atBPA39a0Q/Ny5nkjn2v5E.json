[
  {
    "text": "so hello everyone want to get start started exactly on time thank you all",
    "start": "2800",
    "end": "8679"
  },
  {
    "text": "for coming so it's a good crowd here I um wasn't expecting or wasn't sure how",
    "start": "8679",
    "end": "14879"
  },
  {
    "text": "many people to expect really this is a little bit of a different type of talk so I hope I haven't Miss sold it too",
    "start": "14879",
    "end": "20680"
  },
  {
    "text": "much uh I should also say I've done this talk a couple of times before as well and they were both twoh hour long talks",
    "start": "20680",
    "end": "27920"
  },
  {
    "text": "so I've had to abridge it a little bit I'm going to have to rush a bit which means cutting some bit short including",
    "start": "27920",
    "end": "34079"
  },
  {
    "text": "my introduction so I'm going to get straight into it uh because I don't want to rush too much either so I'm Phil Nash",
    "start": "34079",
    "end": "41920"
  },
  {
    "text": "um I've done lots of talks over the years say this one is a little bit different um and I wanted to start by",
    "start": "41920",
    "end": "49360"
  },
  {
    "text": "very briefly at least addressing my title slide you might be wondering why is there a car up there well this is the",
    "start": "49360",
    "end": "55760"
  },
  {
    "text": "oldmobile cutless Supreme came out in 1989 sure everybody remembers it well uh",
    "start": "55760",
    "end": "62600"
  },
  {
    "text": "Oldsmobile originally old have been around for about 100 years at that point and they were starting to to lose ground",
    "start": "62600",
    "end": "68000"
  },
  {
    "text": "lose market share to other newer trendier Brands and so they came out with this uh this genius marketing",
    "start": "68000",
    "end": "76759"
  },
  {
    "text": "campaign this is not your father's oldmobile maybe some of you remember that it sort of survived as a bit of a",
    "start": "76759",
    "end": "82439"
  },
  {
    "text": "meme these days to where my title comes from but um the idea was you know this",
    "start": "82439",
    "end": "88280"
  },
  {
    "text": "is this is something new fresh it's going to appeal to the to the Next Generation unfortunately it backfired a",
    "start": "88280",
    "end": "94560"
  },
  {
    "text": "bit it turns out it wasn't actually that new it was very similar just sort of a bit warmed over and um it failed in the",
    "start": "94560",
    "end": "102640"
  },
  {
    "text": "market and Tim M were pretty much gone within the decade of that what's that",
    "start": "102640",
    "end": "108240"
  },
  {
    "text": "going to do with C++ well there's at least one possibly two points in C++ is history where it's",
    "start": "108240",
    "end": "115439"
  },
  {
    "text": "had a bit of an oldmobile moment where it's been around for a long time it's it's got to appeal to a new generation",
    "start": "115439",
    "end": "121680"
  },
  {
    "text": "is it going to survive and we're going to address at least one of those possibly the second one if we get time",
    "start": "121680",
    "end": "126840"
  },
  {
    "text": "at the end uh to see whether that's actually happened or not um I should also say I mean this was",
    "start": "126840",
    "end": "133520"
  },
  {
    "text": "a product of the 80s unnecessarily sexist and agist two for one I managed",
    "start": "133520",
    "end": "138680"
  },
  {
    "text": "to get rid of the the sexism part but added an extra generation into mine um",
    "start": "138680",
    "end": "143800"
  },
  {
    "text": "not out of any sort of judgment but just to say while C+ plus has been around long enough that if you were there at",
    "start": "143800",
    "end": "149360"
  },
  {
    "text": "the start you are old enough to be a grandparent these days um has anybody",
    "start": "149360",
    "end": "154560"
  },
  {
    "text": "been using C++ since before 1992 out of",
    "start": "154560",
    "end": "160239"
  },
  {
    "text": "interest just one person thank you but that's when I started using it",
    "start": "160239",
    "end": "166200"
  },
  {
    "text": "so one of the oldest um people to to use C++ in the room using it for the longest",
    "start": "166200",
    "end": "172879"
  },
  {
    "text": "time okay so let's get straight into this and I'm going to go right back to the the",
    "start": "172879",
    "end": "180239"
  },
  {
    "text": "dinosaurs well figuratively speaking anyway I want to do a little bit of a prehistory of C++ the historical context",
    "start": "180239",
    "end": "186760"
  },
  {
    "text": "that C++ was born into just to give us a bit of a feel for what this language is actually all about I'm going to do that",
    "start": "186760",
    "end": "193040"
  },
  {
    "text": "by means of a bit of a family tree and timeline so it's really rooted in the alol family of languages um there sort",
    "start": "193040",
    "end": "201000"
  },
  {
    "text": "of fre languages that came out in the in the late 50s or around the same time uh lisp and foran with the other ones and",
    "start": "201000",
    "end": "207840"
  },
  {
    "text": "alol sort of survived through uh CPL bcpl B and then C",
    "start": "207840",
    "end": "215519"
  },
  {
    "text": "1972 on on this left hand side uh and you you probably we may have heard some",
    "start": "215519",
    "end": "221760"
  },
  {
    "text": "of the other languages in between but probably don't know a lot about them I don't know if anybody here has actually used any of those other languages but we",
    "start": "221760",
    "end": "228239"
  },
  {
    "text": "all know c c survives to today is well represented even at this conference so",
    "start": "228239",
    "end": "233959"
  },
  {
    "text": "that's the the history of that line and on the other Branch we've got simula there sure we recognize is the name",
    "start": "233959",
    "end": "240200"
  },
  {
    "text": "similar isn't that where we get all the oo ideas from C+ into C++ from which is",
    "start": "240200",
    "end": "246000"
  },
  {
    "text": "sort of true but not similar one simul 1 was just about simulations built on top",
    "start": "246000",
    "end": "251439"
  },
  {
    "text": "of Alo simul 67 was a quite Stark reimagining of the language and that's",
    "start": "251439",
    "end": "257320"
  },
  {
    "text": "where all the the oo features classes and inheritance and that sort of thing all came in 1967 same time as",
    "start": "257320",
    "end": "265040"
  },
  {
    "text": "bcpl interesting timing because late '70s those two languages were being",
    "start": "265040",
    "end": "270759"
  },
  {
    "text": "actively used by a certain B strup might recognize the name in his",
    "start": "270759",
    "end": "276759"
  },
  {
    "text": "PhD thesis and um he uh he was using both languages side by side and his",
    "start": "276759",
    "end": "283080"
  },
  {
    "text": "observation was similar 67 had all of these really nice high level",
    "start": "283080",
    "end": "288560"
  },
  {
    "text": "abstractions uh that he really liked and he felt would be great for building large scale",
    "start": "288560",
    "end": "293800"
  },
  {
    "text": "applications bcpl though was much lower level and much faster had the",
    "start": "293800",
    "end": "299120"
  },
  {
    "text": "performance really wanted simil didn't but it was so low level it was just a bit too tedious to write and he couldn't",
    "start": "299120",
    "end": "305520"
  },
  {
    "text": "really see it scaling you really wanted The Best of Both Worlds so after he",
    "start": "305520",
    "end": "310720"
  },
  {
    "text": "finished his PhD and he went to work at Bell Labs he started on something called see with classes I'm sure you've heard",
    "start": "310720",
    "end": "317320"
  },
  {
    "text": "of this the uh original version really of C++ really just rolled those o",
    "start": "317320",
    "end": "324039"
  },
  {
    "text": "features from stimula into on top of C literally just a pre-processor",
    "start": "324039",
    "end": "331400"
  },
  {
    "text": "and that was just an internal project project at Bell labs iterated for a few years mid",
    "start": "331400",
    "end": "337360"
  },
  {
    "text": "80s new version came out with a whole load of new features as well and a new name",
    "start": "337360",
    "end": "343800"
  },
  {
    "text": "C++ and now this was open to the public as well so this is really the birth of",
    "start": "343800",
    "end": "349319"
  },
  {
    "text": "C++ 1985 but 1979 is when it all started and the historical context is",
    "start": "349319",
    "end": "357199"
  },
  {
    "text": "there because I think it's really important to get a feel for what actually led to the creation of this",
    "start": "357199",
    "end": "362319"
  },
  {
    "text": "language it was a desire to get what we now call zeroc Cost abstractions we want",
    "start": "362319",
    "end": "367840"
  },
  {
    "text": "those high level abstractions we want to pay for them and that actually leads to the second part as well if there is a",
    "start": "367840",
    "end": "374599"
  },
  {
    "text": "cost we shouldn't have to pay for it we should be a to opt into it we know both these terms I'm sure",
    "start": "374599",
    "end": "381039"
  },
  {
    "text": "they're they're still a thriving part of C+ plus today but they've been there right from the start this is really what",
    "start": "381039",
    "end": "386800"
  },
  {
    "text": "has shaped the language zero cost of actions and don't pay for what you don't",
    "start": "386800",
    "end": "392520"
  },
  {
    "text": "use so I'm going to talk a little bit more now about some of the features of the earliest versions of C++ and get a",
    "start": "392520",
    "end": "399280"
  },
  {
    "text": "feel for what that language is like uh maybe compared to what we have today so",
    "start": "399280",
    "end": "404759"
  },
  {
    "text": "let's go into the next era now but we're going to look at pre-standard C++",
    "start": "404759",
    "end": "410800"
  },
  {
    "text": "starting with with C with classes as I say just got those o um elements from",
    "start": "410800",
    "end": "416960"
  },
  {
    "text": "from simula um and actually even the poly morphism it's just um very basic to",
    "start": "416960",
    "end": "422440"
  },
  {
    "text": "begin with much later more towards the mid 80s C++ era we got virtual functions",
    "start": "422440",
    "end": "429000"
  },
  {
    "text": "they actually came quite late and then C++ 1985 added actually",
    "start": "429000",
    "end": "436039"
  },
  {
    "text": "quite a few extra features on top of that references came in then uh inline",
    "start": "436039",
    "end": "441280"
  },
  {
    "text": "functions um templates exceptions name spaces they were all early '90s or maybe",
    "start": "441280",
    "end": "447319"
  },
  {
    "text": "like turn turn of the '90s so quite late really that was all pre-standard",
    "start": "447319",
    "end": "454479"
  },
  {
    "text": "C++ right up until uh towards the end of the '90s but around the turn of the '90s",
    "start": "454479",
    "end": "460199"
  },
  {
    "text": "bana felt that this really needed to be standardized and a committee was formed",
    "start": "460199",
    "end": "465720"
  },
  {
    "text": "so spent most of that decade standardizing C++ so we got C++",
    "start": "465720",
    "end": "472199"
  },
  {
    "text": "98 the big new feature of C++ 98 of course was the STL the standard",
    "start": "472199",
    "end": "478599"
  },
  {
    "text": "template Library which um uh is very familiar to us now but",
    "start": "478599",
    "end": "485199"
  },
  {
    "text": "back in 1998 even though it actually been around for a while at third party libraries for many of us 98 was the",
    "start": "485199",
    "end": "490759"
  },
  {
    "text": "first time we really got a taste of the STL it really was revolutionary a very different way of working really changed",
    "start": "490759",
    "end": "497039"
  },
  {
    "text": "the way we use C++ and we'll look a little bit about why in a",
    "start": "497039",
    "end": "503039"
  },
  {
    "text": "moment um all of the other things were touched as well to some degree or another it really didn't feel like a new",
    "start": "503039",
    "end": "510479"
  },
  {
    "text": "language uh Alexandre scu's book uh modern C++ design was actually based on",
    "start": "510479",
    "end": "516560"
  },
  {
    "text": "C++ 98 and even like early 2000s he was saying actually no compilers can support this yet it took a while to catch up it",
    "start": "516560",
    "end": "523800"
  },
  {
    "text": "was a big release the very first release but I actually want to focus on",
    "start": "523800",
    "end": "529839"
  },
  {
    "text": "something that came in much earlier back in 1985 the first version of C++ introduced",
    "start": "529839",
    "end": "536680"
  },
  {
    "text": "references into the language why do I want to focus on this so I think this really sort of sets the tone of where",
    "start": "536680",
    "end": "544399"
  },
  {
    "text": "both some of the power but also complexity of the language comes in I'm going to skip through these",
    "start": "544399",
    "end": "550680"
  },
  {
    "text": "slides a little bit because I'm I'm sure you know how references work and how they compare to to pointers maybe to",
    "start": "550680",
    "end": "556480"
  },
  {
    "text": "stop on this bit comparing pointers and references side by side because they do share some common traits they're",
    "start": "556480",
    "end": "563320"
  },
  {
    "text": "initializable and assignable but that's it all the other capabilities are unique",
    "start": "563320",
    "end": "568640"
  },
  {
    "text": "to pointers they seem to be the more capable concept the more powerful concept but actually",
    "start": "568640",
    "end": "574600"
  },
  {
    "text": "the power of references comes from what they don't do that gives it Simplicity",
    "start": "574600",
    "end": "580160"
  },
  {
    "text": "and guarantees in many ways references are the superior Choice uh unless you",
    "start": "580160",
    "end": "586519"
  },
  {
    "text": "need one of those other things which hopefully is fairly rarely uh nullability we can now get with withed",
    "start": "586519",
    "end": "592720"
  },
  {
    "text": "optional um we don't have to resort to pointers for that now different s syntax",
    "start": "592720",
    "end": "598079"
  },
  {
    "text": "just gets in the way so we would prefer references but again a common theme of",
    "start": "598079",
    "end": "603399"
  },
  {
    "text": "C++ we're get a new feature replaces something old but we still have the old thing as well now we got",
    "start": "603399",
    "end": "610560"
  },
  {
    "text": "both part of the complexity of the language talking to which it you use",
    "start": "610560",
    "end": "616079"
  },
  {
    "text": "conin multiply that with pointers you get all these different ways of doing things this is only one level of indirection I'm not even going to talk",
    "start": "616079",
    "end": "622279"
  },
  {
    "text": "about pointers to pointers or the fact that you can put the con aside that's the another talk compare that to",
    "start": "622279",
    "end": "628800"
  },
  {
    "text": "references you can see it's a lot simpler much easier to reason about where whether you use pointers or",
    "start": "628800",
    "end": "636120"
  },
  {
    "text": "references they are just ways of adding a level of indirection over",
    "start": "636120",
    "end": "641480"
  },
  {
    "text": "values so we have value types and of course the value could be con as kind",
    "start": "641480",
    "end": "646639"
  },
  {
    "text": "the pointer which is also a value but at the center of this is the value C++ is inherently by default a",
    "start": "646639",
    "end": "656120"
  },
  {
    "text": "value based language maybe we don't think of it that way but actually a lot of language features are really just in",
    "start": "656120",
    "end": "662639"
  },
  {
    "text": "service of giving us value semantics value semantics were really a",
    "start": "662639",
    "end": "669160"
  },
  {
    "text": "an inherent part of early C++ and to this day gave us things like ra",
    "start": "669160",
    "end": "674600"
  },
  {
    "text": "aaii sure you know RI stands for resource acquisition is initialization a",
    "start": "674600",
    "end": "680880"
  },
  {
    "text": "very powerful concept that is almost unique to C++ at least amongst modern",
    "start": "680880",
    "end": "687000"
  },
  {
    "text": "mainstream languages some other languages sort of approximate part of it but it's only really C++ that",
    "start": "687000",
    "end": "694240"
  },
  {
    "text": "gives us a whole range of value semantics around that we usually focus",
    "start": "694240",
    "end": "699600"
  },
  {
    "text": "on what you can do in destructors is one of the more unique things that determinism of the destructors we put",
    "start": "699600",
    "end": "706160"
  },
  {
    "text": "one of these things in different Scopes we know exactly where that distructor is going to fire we can take advantage of that it's really powerful we miss it",
    "start": "706160",
    "end": "713040"
  },
  {
    "text": "when we go to other languages so we can be very specific about you know what's going to be printed out here for example",
    "start": "713040",
    "end": "720440"
  },
  {
    "text": "again I'm not going to dwell on that too long but definitely a very powerful part of C++ but it's not that just just a",
    "start": "720440",
    "end": "727839"
  },
  {
    "text": "destructors Val semantics includes these custom Constructors copy Constructors we",
    "start": "727839",
    "end": "733720"
  },
  {
    "text": "also got move Constructors now we come on to that assignment operators they're all part of what uh the power that C++",
    "start": "733720",
    "end": "741839"
  },
  {
    "text": "gives us over how we use the language fairly unique to C++ in that",
    "start": "741839",
    "end": "747760"
  },
  {
    "text": "respect so let's come back to C++ 998 we mentioned the STL gave us vectors for",
    "start": "747760",
    "end": "754079"
  },
  {
    "text": "the first time we had other third party libraries that may have approximated this but vectors were still a big step",
    "start": "754079",
    "end": "760279"
  },
  {
    "text": "forward as were the other containers because now we can manage all of the",
    "start": "760279",
    "end": "765760"
  },
  {
    "text": "memory uh using those RI techniques we got generics with templates so we don't",
    "start": "765760",
    "end": "771560"
  },
  {
    "text": "have to have a different version for each type all their package in a simple type that we can treat as a value so",
    "start": "771560",
    "end": "778040"
  },
  {
    "text": "it's a value type again we take it for granted but that's actually a really powerful feature and it's still lowlevel we're",
    "start": "778040",
    "end": "786800"
  },
  {
    "text": "not really paying much if anything for all of those conveniences great then we actually try",
    "start": "786800",
    "end": "793600"
  },
  {
    "text": "to use it so C++ 98 if we want to load up one of these vectors all you can really do is push",
    "start": "793600",
    "end": "799760"
  },
  {
    "text": "back there are some third party libraries that try to make this simpler but really you're doing a lot of pushing",
    "start": "799760",
    "end": "805720"
  },
  {
    "text": "back so gets a little bit for boast if you do a lot of this and you still sort",
    "start": "805720",
    "end": "811560"
  },
  {
    "text": "of have to know about the memory management under the hood you know there's going to be a maybe a couple of",
    "start": "811560",
    "end": "816600"
  },
  {
    "text": "allocations there if that matters well we we can reserve ahead of time so yeah",
    "start": "816600",
    "end": "822680"
  },
  {
    "text": "we're not paying for what we don't need but it is quite low",
    "start": "822680",
    "end": "827839"
  },
  {
    "text": "level all right but we loaded up our Vector events one allocation so far so",
    "start": "827839",
    "end": "834000"
  },
  {
    "text": "good let's introduce another Vector this time it's a vector of strings stood",
    "start": "834000",
    "end": "839320"
  },
  {
    "text": "string another value type managing its own memory great let's say we want to convert all",
    "start": "839320",
    "end": "846040"
  },
  {
    "text": "of those integers into Strings put them in this second Vector well we know how",
    "start": "846040",
    "end": "851279"
  },
  {
    "text": "big it is we can use reserve and then we're going to iterate over our original",
    "start": "851279",
    "end": "856800"
  },
  {
    "text": "Vector we could have done it with C style indexes but the idiomatic way in",
    "start": "856800",
    "end": "861839"
  },
  {
    "text": "C++ 98 of course is to use iterators it's the powerful abstraction in C++ 9",
    "start": "861839",
    "end": "868759"
  },
  {
    "text": "in the TL um going to gloss over exactly how powerful that is I'm sure you're",
    "start": "868759",
    "end": "874759"
  },
  {
    "text": "familiar with them but to use these iterators you probably have to put them into variables and if C++ 98 that means",
    "start": "874759",
    "end": "883000"
  },
  {
    "text": "spelling them out long hand it's a subtype of or a type within the vector",
    "start": "883000",
    "end": "889040"
  },
  {
    "text": "and then because the conness is actually the thing you're referring to you got to put that in the type name as well",
    "start": "889040",
    "end": "894600"
  },
  {
    "text": "and it looks like this if you've done old school C++ you're very familiar with",
    "start": "894600",
    "end": "901079"
  },
  {
    "text": "this this these type names are so long that we usually put these Loop variables outside of the loop because we couldn't",
    "start": "901079",
    "end": "906720"
  },
  {
    "text": "fit them in can't even use Loops properly but it's",
    "start": "906720",
    "end": "911959"
  },
  {
    "text": "idiomatic let's do the string conversion then so we got string stream that was",
    "start": "911959",
    "end": "917279"
  },
  {
    "text": "also new in '98 uh interestingly we had stress stream before that anybody",
    "start": "917279",
    "end": "923720"
  },
  {
    "text": "remember stress stream so it's actually still in the standard there I hope think they're",
    "start": "923720",
    "end": "929759"
  },
  {
    "text": "removing it in 26 finally we finally got all the pieces necessary to replace that",
    "start": "929759",
    "end": "935399"
  },
  {
    "text": "but stress stream's good um we can de reference our iterator put the int into",
    "start": "935399",
    "end": "941360"
  },
  {
    "text": "the string stream do do Str to get it out it works it's not the most efficient",
    "start": "941360",
    "end": "947199"
  },
  {
    "text": "way to do it if you care about the performance here you're probably going to write your own or or use another",
    "start": "947199",
    "end": "952360"
  },
  {
    "text": "facility but as a go-to it's actually pretty good not too bad all right and",
    "start": "952360",
    "end": "957959"
  },
  {
    "text": "then let's um iterate that loop with this time we'll use an index just because we can and print things out I'm",
    "start": "957959",
    "end": "964319"
  },
  {
    "text": "going to use study out from the io streams Library so iio streams actually was one",
    "start": "964319",
    "end": "970600"
  },
  {
    "text": "of the earliest libraries in C++ I think predates 1985's original C++ in fact",
    "start": "970600",
    "end": "977720"
  },
  {
    "text": "quite an old library now but still going strong we'll come back to that one okay",
    "start": "977720",
    "end": "983920"
  },
  {
    "text": "we achieved it quite a bit of code but a lot of conveniences as well just for fun",
    "start": "983920",
    "end": "990120"
  },
  {
    "text": "how would we do this in Python this does the same thing in fre",
    "start": "990120",
    "end": "995600"
  },
  {
    "text": "lines and it's quite expressive uh we're not quite there yet but um but but we're",
    "start": "995600",
    "end": "1000920"
  },
  {
    "text": "doing okay we we it's I'm sure it's faster let's um let's have a look at",
    "start": "1000920",
    "end": "1008120"
  },
  {
    "text": "classes so again I'm not going to spend too long on this I'm sure you know how classes work but this one has a string",
    "start": "1008120",
    "end": "1013759"
  },
  {
    "text": "and a vector of strings in it and we a Constructor and it's going to take a string and a vector strings and again",
    "start": "1013759",
    "end": "1020519"
  },
  {
    "text": "idiomatically we do that by con reference because that's going to be more efficient but then we copy them",
    "start": "1020519",
    "end": "1026520"
  },
  {
    "text": "into our members okay that's fine been doing that for years uh and now we got some",
    "start": "1026520",
    "end": "1032760"
  },
  {
    "text": "accesses just some member functions that will uh return us some of",
    "start": "1032760",
    "end": "1038280"
  },
  {
    "text": "those typical class but because we've got that Vector in the Constructor means we're going to construct one of these uh",
    "start": "1038280",
    "end": "1046079"
  },
  {
    "text": "these classes we're going to have to instantiate a vector outside loaded up",
    "start": "1046079",
    "end": "1052080"
  },
  {
    "text": "using push back or whatever and then we can use that past it into our",
    "start": "1052080",
    "end": "1057440"
  },
  {
    "text": "Constructor where it's going to get copied at least a string we can do in line uh so that that's fine and this is",
    "start": "1057440",
    "end": "1064360"
  },
  {
    "text": "the value type by default we have the value semantics in",
    "start": "1064360",
    "end": "1069400"
  },
  {
    "text": "C++ and we can use the dot operator to to get our member functions uh fine all",
    "start": "1069400",
    "end": "1075559"
  },
  {
    "text": "very familiar I'm sure if it's a value but we might want to create these on the",
    "start": "1075559",
    "end": "1081480"
  },
  {
    "text": "Heap so we had the new operator of course now we get a pointer use a",
    "start": "1081480",
    "end": "1087080"
  },
  {
    "text": "pointer have to use the arrow operator at different syntax bit ugly but we can",
    "start": "1087080",
    "end": "1093080"
  },
  {
    "text": "live with that and now it's on the Heap we got to remember to delete it as well",
    "start": "1093080",
    "end": "1098200"
  },
  {
    "text": "notice I'm saying pre stood C++ down there um even before C++ 98 there were",
    "start": "1098200",
    "end": "1105799"
  },
  {
    "text": "third party libraries for doing what we can now call Smart point uses those those Rai techniques to clean",
    "start": "1105799",
    "end": "1113679"
  },
  {
    "text": "things up for us but in C++ 98 we got that in the standard we got Auto pointer",
    "start": "1113679",
    "end": "1120080"
  },
  {
    "text": "great now we can use the new keyword but pass off that pointer to Auto pointer",
    "start": "1120080",
    "end": "1126000"
  },
  {
    "text": "and it will manage that memory for us and we still get the pointer C semantics to get to the member function brilliant",
    "start": "1126000",
    "end": "1133760"
  },
  {
    "text": "solves all of our memory management needs doesn't it until we come to copy",
    "start": "1133760",
    "end": "1141120"
  },
  {
    "text": "it if you copy an auto pointer what happens well that will compile and it's",
    "start": "1141240",
    "end": "1147880"
  },
  {
    "text": "going to transfer ownership from the outgoing Auto pointer to the new one well s of looks familiar",
    "start": "1147880",
    "end": "1155600"
  },
  {
    "text": "if you squint but remember this is a copy operation a little bit surprising for a copy operation to mutate the thing",
    "start": "1155600",
    "end": "1161880"
  },
  {
    "text": "you're copying from but a very powerful technique nonetheless a lot of Promise here but",
    "start": "1161880",
    "end": "1169240"
  },
  {
    "text": "also very dangerous in fact so dangerous that if you try to put one of these into a um stood Vector well first of all you",
    "start": "1169240",
    "end": "1177520"
  },
  {
    "text": "can't if you could it wouldn't work you would You' lose objects if they get moved around and that's why we had to",
    "start": "1177520",
    "end": "1184520"
  },
  {
    "text": "put specific code in there in the standard to say you cannot allow an auto pointer in a stood Vector think about",
    "start": "1184520",
    "end": "1191360"
  },
  {
    "text": "that for a moment we had to design the standard in such a way that you couldn't use one part of the standard with",
    "start": "1191360",
    "end": "1197120"
  },
  {
    "text": "another part because it was too dangerous lot of power a lot of",
    "start": "1197120",
    "end": "1202799"
  },
  {
    "text": "danger we'll fix that but that was say plus plus 98 obviously there's a lot",
    "start": "1202799",
    "end": "1208280"
  },
  {
    "text": "more we could talk about I've only got a few minutes so 1998 came and went we got the new",
    "start": "1208280",
    "end": "1215159"
  },
  {
    "text": "standard and then it was 5 years before we really saw anything else out of the committee we got C++",
    "start": "1215159",
    "end": "1222320"
  },
  {
    "text": "O3 not really a new standard you think of it more as a patch on C++ 98 in fact",
    "start": "1222320",
    "end": "1228400"
  },
  {
    "text": "you often hear people say C++ 9803 rolls off the tongue as if it's",
    "start": "1228400",
    "end": "1234559"
  },
  {
    "text": "like a single standard um because O3 did did actually fix a lot of niggly little things it was",
    "start": "1234559",
    "end": "1241480"
  },
  {
    "text": "really just a a lot of fixes and refinements uh for example stood Vector",
    "start": "1241480",
    "end": "1247240"
  },
  {
    "text": "the memory in stood Vector was not guaranteed to be contiguous in C++ 98 which seems ridiculous and all",
    "start": "1247240",
    "end": "1253320"
  },
  {
    "text": "implementations made it contiguous people relied on that so O3 made that standard",
    "start": "1253320",
    "end": "1259400"
  },
  {
    "text": "and now we can rely on that so we never really never really talk about C++ 98 we",
    "start": "1259400",
    "end": "1264600"
  },
  {
    "text": "talk about C+ 53 why would' use 98 um okay at this point Mo's law was",
    "start": "1264600",
    "end": "1273880"
  },
  {
    "text": "still in full swing processors were getting much more powerful year over year and no new standard was coming",
    "start": "1273880",
    "end": "1281640"
  },
  {
    "text": "there was a lot of talk but C++ was pretty stagnant so other languages like",
    "start": "1281640",
    "end": "1286679"
  },
  {
    "text": "Java C maybe even python were starting to take a lot of market share where C++ had",
    "start": "1286679",
    "end": "1293640"
  },
  {
    "text": "previously been riging uh because the performance differences didn't matter so much",
    "start": "1293640",
    "end": "1299440"
  },
  {
    "text": "anymore but the productivity the high level abstractions did so this is where we approach Our",
    "start": "1299440",
    "end": "1305799"
  },
  {
    "text": "oldmobile Moment and in fact the years went by there's a lot of talk about it's all",
    "start": "1305799",
    "end": "1312360"
  },
  {
    "text": "going to be worth it because we're going to get Concepts and concepts are going to completely change the way we write",
    "start": "1312360",
    "end": "1317520"
  },
  {
    "text": "C++ and lots of other stuff but still no standard we're talking about C++",
    "start": "1317520",
    "end": "1323880"
  },
  {
    "text": "Ox because it's definitely going to come in that first decade and we got towards the end of the",
    "start": "1323880",
    "end": "1329520"
  },
  {
    "text": "decade and we said actually it's hex we got another six years",
    "start": "1329520",
    "end": "1334720"
  },
  {
    "text": "yet and briefly we talked about C++ 1X let's be honest but only briefly because",
    "start": "1334799",
    "end": "1341520"
  },
  {
    "text": "then suddenly C++ 11 was here finally but is it too late",
    "start": "1341520",
    "end": "1350080"
  },
  {
    "text": "is it going to be that Oldsmobile moment a lot of Promise behind C++ 11 going to",
    "start": "1350080",
    "end": "1355919"
  },
  {
    "text": "completely transform the language modernize it it's going to be great but it's been a long time 13 years really",
    "start": "1355919",
    "end": "1362320"
  },
  {
    "text": "since the last release Mo's law though had now dried up",
    "start": "1362320",
    "end": "1367720"
  },
  {
    "text": "well was really slowing down very small increments in processor power year on",
    "start": "1367720",
    "end": "1373240"
  },
  {
    "text": "year um and actually there was a big shift towards um multicore so",
    "start": "1373240",
    "end": "1379039"
  },
  {
    "text": "parallelism becoming more important fortunately well previous C++ didn't",
    "start": "1379039",
    "end": "1384679"
  },
  {
    "text": "have a threed aware memory model C++ 11 it did low-level threading Primitives",
    "start": "1384679",
    "end": "1390240"
  },
  {
    "text": "the promise of higher level threading libraries concurrency libraries coming in the future not there yet but they're",
    "start": "1390240",
    "end": "1398279"
  },
  {
    "text": "coming so at least the shift back towards focus on",
    "start": "1398279",
    "end": "1403640"
  },
  {
    "text": "performance was actually c++'s opportunity here's the new standard is it going to be good enough and be up to",
    "start": "1403640",
    "end": "1410360"
  },
  {
    "text": "the challenge I would say it didn't happen overnight took maybe a few years perhaps",
    "start": "1410360",
    "end": "1417760"
  },
  {
    "text": "even into the C+ plus4 time frame but at least from my memory I started to see",
    "start": "1417760",
    "end": "1423159"
  },
  {
    "text": "more and more new generations of people starting to take C++ seriously again and",
    "start": "1423159",
    "end": "1429159"
  },
  {
    "text": "certainly by by the time C++ 17 came around it was a transformed",
    "start": "1429159",
    "end": "1435200"
  },
  {
    "text": "Community I think we avoided The Old Mill moment partly out of luck but we",
    "start": "1435200",
    "end": "1440400"
  },
  {
    "text": "did it we escaped so what was it in C++ 78 uh C++ C++",
    "start": "1440400",
    "end": "1448039"
  },
  {
    "text": "11 that made it so impressive let's have a look so we looked at this example earlier",
    "start": "1448039",
    "end": "1455440"
  },
  {
    "text": "with the with the vector loading it up converting it to strings all of that very tedious but low",
    "start": "1455440",
    "end": "1461679"
  },
  {
    "text": "level we pay for that in lines of code really uh let's have a look at the first",
    "start": "1461679",
    "end": "1467640"
  },
  {
    "text": "bit first of all loading up with all the push backs little thing but C++ 11 gave us",
    "start": "1467640",
    "end": "1472960"
  },
  {
    "text": "the initializer list and not perfect it's not free small cost maybe optimized",
    "start": "1472960",
    "end": "1479399"
  },
  {
    "text": "out in this case probably is but so much nicer to use especially for this sort of",
    "start": "1479399",
    "end": "1485240"
  },
  {
    "text": "code nice little win okay what about those iterators so we we",
    "start": "1485240",
    "end": "1491200"
  },
  {
    "text": "wrote lots of this sort of code and we hated it well we grew to love it I",
    "start": "1491200",
    "end": "1496799"
  },
  {
    "text": "suppose uh of course Plus+ 11 gave us type inference useful for a lot more",
    "start": "1496799",
    "end": "1502760"
  },
  {
    "text": "things than this but the perfect application cuz now we don't have to spell out those big long names anymore",
    "start": "1502760",
    "end": "1508399"
  },
  {
    "text": "and we never cared about that type anyway perfect great and in fact this is now so small",
    "start": "1508399",
    "end": "1515559"
  },
  {
    "text": "we can put that back in the loop so that's nice what about the string conversion even that got some attention",
    "start": "1515559",
    "end": "1523640"
  },
  {
    "text": "now got stood to string again it's not necessarily the most performant but it's at least as performant as the the old",
    "start": "1523640",
    "end": "1530480"
  },
  {
    "text": "string stream approach so again as a go-to great quite often we' want to do",
    "start": "1530480",
    "end": "1536120"
  },
  {
    "text": "that sort of thing now it's a oneliner definitely getting there and of course you're all saying it we have the range",
    "start": "1536120",
    "end": "1543760"
  },
  {
    "text": "based for Loop we don't even need to see those iterators anymore we can just let the compiler do",
    "start": "1543760",
    "end": "1549039"
  },
  {
    "text": "that for us we don't have to De reference the iterator there much cleaner now don't fig is here but we do",
    "start": "1549039",
    "end": "1556559"
  },
  {
    "text": "have sha parent on site this week so I'd better mention that actually you",
    "start": "1556559",
    "end": "1562640"
  },
  {
    "text": "shouldn't be writing raw for Loops we need algorithms and of course you've been a to do this since C++",
    "start": "1562640",
    "end": "1569360"
  },
  {
    "text": "98 in fact the only bit that really changed is the bit in the comment there so we brought the iterators back and put",
    "start": "1569360",
    "end": "1576600"
  },
  {
    "text": "a back inserter in there but the bit that we actually call to make the transformation in this case well it",
    "start": "1576600",
    "end": "1583000"
  },
  {
    "text": "could be a file uh function pointer but idiomatic C++ 98 how does writing what",
    "start": "1583000",
    "end": "1589120"
  },
  {
    "text": "we call function objects just to structure a class with a public call operator and that's what's going to get",
    "start": "1589120",
    "end": "1594919"
  },
  {
    "text": "called on each iteration of the loop uh this is quite nice actually not",
    "start": "1594919",
    "end": "1601200"
  },
  {
    "text": "least because now the compiler can see all of that code in line it and in many",
    "start": "1601200",
    "end": "1606679"
  },
  {
    "text": "cases we can actually get better performance than the equivalent in c as a result things like stood salort in",
    "start": "1606679",
    "end": "1614120"
  },
  {
    "text": "particular um but you know it's quite a bit of boilerplate code we did it but could also be better C",
    "start": "1614120",
    "end": "1622799"
  },
  {
    "text": "Plus+ 11 of course we got lambdas and now we can do the same thing in",
    "start": "1622799",
    "end": "1628399"
  },
  {
    "text": "line and when I say the same thing I mean that quite literally this Lambda is exactly",
    "start": "1628399",
    "end": "1635399"
  },
  {
    "text": "equivalent to to this struct and sometimes we forget that it's actually a useful way of thinking about them",
    "start": "1635399",
    "end": "1641600"
  },
  {
    "text": "particularly with regard to lifetimes but really what you're defining there is a is a class with a call operator",
    "start": "1641600",
    "end": "1648799"
  },
  {
    "text": "and potentially members so if you have a um a closure so something in the captures list you can think of that as",
    "start": "1648799",
    "end": "1655640"
  },
  {
    "text": "arguments to the Constructor of the class that's been generated so that's really nice and we",
    "start": "1655640",
    "end": "1661240"
  },
  {
    "text": "even get fine G grain control over that so that was by value we can capture it by reference we can capture everything",
    "start": "1661240",
    "end": "1667519"
  },
  {
    "text": "by value or reference quite a lot of control but actually most of that",
    "start": "1667519",
    "end": "1672679"
  },
  {
    "text": "complexity is coming from the fact that we have references in the language at all so bit more boast and other",
    "start": "1672679",
    "end": "1678840"
  },
  {
    "text": "languages but still a lot better than where we were so lambdas were a really big win for C++ 11 really helped to",
    "start": "1678840",
    "end": "1686080"
  },
  {
    "text": "modernize the image of the language and its use so great really nice what about this",
    "start": "1686080",
    "end": "1693880"
  },
  {
    "text": "big problem autop pointers deprecated in C++ 11 great uh",
    "start": "1693880",
    "end": "1700559"
  },
  {
    "text": "removed in C++ 17 I don't know if any compilers have actually removed them yet but they've",
    "start": "1700559",
    "end": "1706480"
  },
  {
    "text": "been removed for a while that's how Danger ous they were and of course we have direct replacement drop in replacement really stud unique pointer",
    "start": "1706480",
    "end": "1714600"
  },
  {
    "text": "I'm sure you're familiar but works exactly the same way except for that",
    "start": "1714600",
    "end": "1720120"
  },
  {
    "text": "copy we tried to make a copy it's",
    "start": "1720120",
    "end": "1725559"
  },
  {
    "text": "deleted deleted Constructors also new to C++ 11 you can't actually copy an auto",
    "start": "1725559",
    "end": "1731840"
  },
  {
    "text": "pointer doesn't make sense it's a move only type but you can move one or also",
    "start": "1731840",
    "end": "1738320"
  },
  {
    "text": "new to C++ 11 move semantics and in in particular R Val references which you",
    "start": "1738320",
    "end": "1744600"
  },
  {
    "text": "can get from a temporary uh something that's about to go out of scope or explicitly using St",
    "start": "1744600",
    "end": "1751000"
  },
  {
    "text": "move now we invoke the move Constructor of stud unique pointer which will take",
    "start": "1751000",
    "end": "1756240"
  },
  {
    "text": "ownership in a much more controlled and expressive way which means St Vector can",
    "start": "1756240",
    "end": "1761600"
  },
  {
    "text": "hold them which is great obviously still some dangers but nothing we can't manage",
    "start": "1761600",
    "end": "1768399"
  },
  {
    "text": "so that's good if we look at that class again we could our own add our own move",
    "start": "1768399",
    "end": "1775320"
  },
  {
    "text": "Constructor something like this more importantly instead of taking things by",
    "start": "1775320",
    "end": "1780840"
  },
  {
    "text": "const reference if we're going to store them anyway which should probably take them by value most of the time and then",
    "start": "1780840",
    "end": "1786279"
  },
  {
    "text": "move them in which will often be more um more performant so we're getting higher level",
    "start": "1786279",
    "end": "1793679"
  },
  {
    "text": "abstractions and more performance at the same time which is great moving the right",
    "start": "1793679",
    "end": "1799399"
  },
  {
    "text": "Direction so that's C++ 11 a lot went into this release big big release uh",
    "start": "1799399",
    "end": "1806960"
  },
  {
    "text": "even here there's a couple of things I hadn't talked about yet Vari adct templates quite a big deal um perfect",
    "start": "1806960",
    "end": "1813440"
  },
  {
    "text": "forwarding con expra we've got the first version of con expra very limited in 11",
    "start": "1813440",
    "end": "1818799"
  },
  {
    "text": "just one line single return no conditionals variables but it's a great",
    "start": "1818799",
    "end": "1823840"
  },
  {
    "text": "start still really useful we're going to see more about Conex",
    "start": "1823840",
    "end": "1828880"
  },
  {
    "text": "share pointer unique pointer up there in green because they're actually the only Library Types on this slide loads of",
    "start": "1828880",
    "end": "1834679"
  },
  {
    "text": "other language features I'm not even sure if that's all of them but quite a few uh and then loads of Library",
    "start": "1834679",
    "end": "1840559"
  },
  {
    "text": "features as well it's just a massive release so yeah we waited 13 years but we got what we paid",
    "start": "1840559",
    "end": "1846919"
  },
  {
    "text": "for but we also realized we didn't want to make that mistake again we're not going to wait another 13 years so we",
    "start": "1846919",
    "end": "1854159"
  },
  {
    "text": "changed the model for standardization instead of waiting for things to be ready for a new",
    "start": "1854159",
    "end": "1859279"
  },
  {
    "text": "standard then we set a uh a time limit",
    "start": "1859279",
    "end": "1864559"
  },
  {
    "text": "so every X years which turn out to be free we're going to have a new standard and whatever's ready goes in if it's not",
    "start": "1864559",
    "end": "1870399"
  },
  {
    "text": "ready it gets pushed back the so-called train model get on the train or you miss",
    "start": "1870399",
    "end": "1875559"
  },
  {
    "text": "it so we knew even back in the C++ 11 time frame there's going to be a C++ 14",
    "start": "1875559",
    "end": "1883200"
  },
  {
    "text": "there's even going to be a C++ 17 and we can even start thinking about what's going to be in them",
    "start": "1883200",
    "end": "1888919"
  },
  {
    "text": "and that sort of takes the pressure off a bit so what it comes time for C++",
    "start": "1888919",
    "end": "1894600"
  },
  {
    "text": "14 a much smaller release and that's okay because we got C+ plus 17 coming",
    "start": "1894600",
    "end": "1900600"
  },
  {
    "text": "that's going to be the big one but C plus plus 14 certainly bigger than O3",
    "start": "1900600",
    "end": "1906360"
  },
  {
    "text": "but still more about refinements fixes and a few nice features Auto lambas is",
    "start": "1906360",
    "end": "1911559"
  },
  {
    "text": "actually quite quite a big deal basically Landa templates some fixes make unique should",
    "start": "1911559",
    "end": "1917559"
  },
  {
    "text": "really been in 11 but we got it eventually con exper actually expanded",
    "start": "1917559",
    "end": "1922919"
  },
  {
    "text": "quite a lot you can now do variables Loops conditionals almost looks like normal",
    "start": "1922919",
    "end": "1928519"
  },
  {
    "text": "code Still Still limits but a lot more a lot more capable all came in in",
    "start": "1928519",
    "end": "1935519"
  },
  {
    "text": "14 plenty more as well uh shout out to stud exchange I don't know if you can see that down there in the corner um",
    "start": "1935519",
    "end": "1942880"
  },
  {
    "text": "often overlooked but actually very simple but quite powerful feature with the standard light we should probably",
    "start": "1942880",
    "end": "1948720"
  },
  {
    "text": "use more of it plenty more not a bad release but a small one and that's okay because 17 is",
    "start": "1948720",
    "end": "1956480"
  },
  {
    "text": "going to be the big one you know we're going to get Concepts uh co- routines ranges they're",
    "start": "1956480",
    "end": "1964840"
  },
  {
    "text": "all going to be in 17 of course you all know we didn't get any of those",
    "start": "1964840",
    "end": "1970120"
  },
  {
    "text": "things uh we found that out quite late and there was a lot of disappointment is",
    "start": "1970120",
    "end": "1976080"
  },
  {
    "text": "17 just going to be another little small relase at least like 14 that's bit of a let down turns out we got quite a lot and it",
    "start": "1976080",
    "end": "1983639"
  },
  {
    "text": "took us a little while for that to syn in I think let so have a look at some of them so our example of the stood Vector",
    "start": "1983639",
    "end": "1990120"
  },
  {
    "text": "from earlier well we got all our in there in the initializer list we got type",
    "start": "1990120",
    "end": "1995880"
  },
  {
    "text": "inference in C++ 11 but we still have to spell out the int here until we get",
    "start": "1995880",
    "end": "2002919"
  },
  {
    "text": "CAD class template argument deduction if we canu the type from The",
    "start": "2002919",
    "end": "2008440"
  },
  {
    "text": "Constructor of a template that we don't how to spell out the template type sometimes you get that for free more",
    "start": "2008440",
    "end": "2015080"
  },
  {
    "text": "often you're going to have to write some explicit code to handle this so it hasn't quite taken off as much as we",
    "start": "2015080",
    "end": "2021000"
  },
  {
    "text": "would have liked a little bit more fiddly to use but still it's a nice feature makes things a bit nicer again",
    "start": "2021000",
    "end": "2027960"
  },
  {
    "text": "you have to write less explicit code that you don't care about I'll go to thumbs up let's have a look at this example so",
    "start": "2027960",
    "end": "2035200"
  },
  {
    "text": "rather than converting into just strings we're going to do the around now PA a string into an integer going to use a",
    "start": "2035200",
    "end": "2041279"
  },
  {
    "text": "string stream again again not necessarily the best way but it's there in the language in the library so we'll",
    "start": "2041279",
    "end": "2046519"
  },
  {
    "text": "go with that but we're taking a stood string again we're going to do it by con",
    "start": "2046519",
    "end": "2051878"
  },
  {
    "text": "reference because we're not storing anywhere so if we take it by value we're going to pay the cost to have an extra",
    "start": "2051879",
    "end": "2057638"
  },
  {
    "text": "copy we might still pay the cost to have an extra copy if we pass in say a string",
    "start": "2057639",
    "end": "2062760"
  },
  {
    "text": "literal a a character literal but C++ 11 uh 17 gives a stood",
    "start": "2062760",
    "end": "2070440"
  },
  {
    "text": "string View and now if you give it a stood string a character literal maybe one of",
    "start": "2070440",
    "end": "2076560"
  },
  {
    "text": "your own string types or third party or something else all it's going to take is",
    "start": "2076560",
    "end": "2082800"
  },
  {
    "text": "the pointer and length and it will just work with no overhead compared to in",
    "start": "2082800",
    "end": "2088560"
  },
  {
    "text": "fact maybe even less overhead compared to the conre depending on how optimize it big win or we can even work with",
    "start": "2088560",
    "end": "2094158"
  },
  {
    "text": "substrings of course so that's nice but if you've got a function like this",
    "start": "2094159",
    "end": "2100839"
  },
  {
    "text": "you're probably going to want some error handling because you're not always going to pass strings that have into them so that's a little bit of a problem",
    "start": "2100839",
    "end": "2108200"
  },
  {
    "text": "here we probably don't want to do exceptions that's probably not the best approach for a function like this but the return channel is already taken up",
    "start": "2108200",
    "end": "2114640"
  },
  {
    "text": "by the integer so we'll often result to tricks like this return a Boolean to indicate",
    "start": "2114640",
    "end": "2120640"
  },
  {
    "text": "the error and take the the actual result by by reference it works we've been",
    "start": "2120640",
    "end": "2127400"
  },
  {
    "text": "doing for a long time at least that's better in 17 because we can use no discard so we have to look at the return",
    "start": "2127400",
    "end": "2134880"
  },
  {
    "text": "type at least consider the error handling but of course there's a better way in C++ 17 if it get stood optional a",
    "start": "2134880",
    "end": "2144079"
  },
  {
    "text": "type that represents a value or the absence of a value sort of mixes that Boolean in and now if we don't have a",
    "start": "2144079",
    "end": "2151400"
  },
  {
    "text": "value we get a null opt and in usage looks like pointers we can test it in an",
    "start": "2151400",
    "end": "2156920"
  },
  {
    "text": "if statement be reference like a pointer to get the value out or it's an",
    "start": "2156920",
    "end": "2163680"
  },
  {
    "text": "error if you actually want to know what the error is though well it doesn't give you that so if you want to use these for",
    "start": "2163680",
    "end": "2169599"
  },
  {
    "text": "error handling still a little bit missing so you might use St variant",
    "start": "2169599",
    "end": "2175599"
  },
  {
    "text": "which you also got in C++ 17 I wouldn't recommend this actually",
    "start": "2175599",
    "end": "2182440"
  },
  {
    "text": "stood variant is actually very very useful represents one of a range of types",
    "start": "2182440",
    "end": "2188640"
  },
  {
    "text": "um you could use it for error handling like this this part's not too bad but if you come to actually use it there's a",
    "start": "2188640",
    "end": "2195040"
  },
  {
    "text": "few ways you can use stood variant they're all a little bit like this quite",
    "start": "2195040",
    "end": "2200200"
  },
  {
    "text": "verose um this one I'm using stood holds alternative and then stood",
    "start": "2200200",
    "end": "2205560"
  },
  {
    "text": "G I've actually had to put the result on its own line as a separate statement",
    "start": "2205560",
    "end": "2211040"
  },
  {
    "text": "because then I going to do holds alternative here it's it's quite verose well we did get the init statement you",
    "start": "2211040",
    "end": "2217640"
  },
  {
    "text": "plus plus 17 so we can at least move that first statement into the if now the",
    "start": "2217640",
    "end": "2222839"
  },
  {
    "text": "variable is scoped to the if statement but still it's a bit too verbose variant",
    "start": "2222839",
    "end": "2227960"
  },
  {
    "text": "not a good solution we'll look at a better solution later just setting that one",
    "start": "2227960",
    "end": "2233680"
  },
  {
    "text": "up lots more we got in 17 uh that we don't have time to look at including structured bindings quite a big feature",
    "start": "2233680",
    "end": "2240319"
  },
  {
    "text": "came in quite late uh W talk about that now fold Expressions to make vartic",
    "start": "2240319",
    "end": "2245839"
  },
  {
    "text": "templates easier even more conexa I think we got Con expra lambas in 17 and",
    "start": "2245839",
    "end": "2252000"
  },
  {
    "text": "if conexa actually making a compile time Branch uh just with normal looking code",
    "start": "2252000",
    "end": "2258200"
  },
  {
    "text": "within a function so much template meta programming is no longer necessary with",
    "start": "2258200",
    "end": "2263240"
  },
  {
    "text": "if con exra there a really big win all that kid 17 and there's plenty more it's",
    "start": "2263240",
    "end": "2269160"
  },
  {
    "text": "just the highlights so not a bad release after all but we didn't get those big",
    "start": "2269160",
    "end": "2274720"
  },
  {
    "text": "features that we've been waiting for so it brings us to C++ 20 now at this",
    "start": "2274720",
    "end": "2281680"
  },
  {
    "text": "point those of you that are working every day with C++ maybe you've just moved on to C plus",
    "start": "2281680",
    "end": "2287520"
  },
  {
    "text": "20 or maybe you haven't moved on to it yet this is still taken a little while",
    "start": "2287520",
    "end": "2292760"
  },
  {
    "text": "to uh reach the mainstream and I think we're just crossing a threshold now maybe it's a big release again in some",
    "start": "2292760",
    "end": "2301240"
  },
  {
    "text": "ways maybe even bigger than C++ 11 certainly in size of the features can that some people taken a",
    "start": "2301240",
    "end": "2309160"
  },
  {
    "text": "little while to to adopt it so let's have a look at what actually made it in now this is the slide as I",
    "start": "2309160",
    "end": "2315839"
  },
  {
    "text": "had it when I first gave this talk when C++ 20 was not quite done but all these",
    "start": "2315839",
    "end": "2323079"
  },
  {
    "text": "things have been voted in you see the old one out so contracts was on here it been",
    "start": "2323079",
    "end": "2329240"
  },
  {
    "text": "voted into the standard at the point that I gave this talk and then shortly after was taken out again we didn't get",
    "start": "2329240",
    "end": "2335960"
  },
  {
    "text": "contracts so like Concepts you see Plus+ 11 didn't make it in contracts didn't",
    "start": "2335960",
    "end": "2341480"
  },
  {
    "text": "make it into 20 but we got everything else and that was actually really big",
    "start": "2341480",
    "end": "2348079"
  },
  {
    "text": "lots of big features co- routines Concepts not quite the C++ X Concepts",
    "start": "2348079",
    "end": "2353960"
  },
  {
    "text": "but still really powerful really worthwhile ranges a big evolution on",
    "start": "2353960",
    "end": "2360640"
  },
  {
    "text": "iterators modules that's going to solve everything I",
    "start": "2360640",
    "end": "2366160"
  },
  {
    "text": "promise so spaceship operator one of the few features to go into the standard",
    "start": "2366160",
    "end": "2371560"
  },
  {
    "text": "that actually reduces the amount of wording in the standard overall and even more context for",
    "start": "2371560",
    "end": "2376920"
  },
  {
    "text": "Actually I don't even remember which which bits went in I think it was um memory",
    "start": "2376920",
    "end": "2382040"
  },
  {
    "text": "allocations and tri catch maybe we could actually finally get things like um uh",
    "start": "2382040",
    "end": "2388079"
  },
  {
    "text": "strings in in vectors in Conex lots more of course but these were",
    "start": "2388079",
    "end": "2394119"
  },
  {
    "text": "were good highlights certainly the big things I to do a couple of um little",
    "start": "2394119",
    "end": "2400520"
  },
  {
    "text": "code examples to try to give you a flavor so here's a function a template",
    "start": "2400520",
    "end": "2406760"
  },
  {
    "text": "that tries to print a container the uh the implementation it's uh it's not perfect it's got some downsides but",
    "start": "2406760",
    "end": "2413240"
  },
  {
    "text": "don't worry too much about that it's more that signature I want to look at could take any container because it's the template and so Sur you enough if we",
    "start": "2413240",
    "end": "2420359"
  },
  {
    "text": "pass it a vector of in like the one we had earlier it's going to print them out quite nicely great but it's a template",
    "start": "2420359",
    "end": "2427680"
  },
  {
    "text": "it can take anything and even something it's not a container like an integer and of course",
    "start": "2427680",
    "end": "2433000"
  },
  {
    "text": "we're going to get a compiler error but it's going to be pointed to something right in the middle of the implementation it's not going to be that",
    "start": "2433000",
    "end": "2439480"
  },
  {
    "text": "helpful fortunately this is small enough we can work it out reasonably easily but I'm sure you've all seen pages long",
    "start": "2439480",
    "end": "2446560"
  },
  {
    "text": "template errors that never actually get to the point could be quite nasty there have been workarounds for this before",
    "start": "2446560",
    "end": "2453520"
  },
  {
    "text": "but they're they're quite tedious and make compile times longer but we got",
    "start": "2453520",
    "end": "2459680"
  },
  {
    "text": "Concepts Concepts is actually quite a big feature with lots of uh different things you can do one of them is you can",
    "start": "2459680",
    "end": "2466359"
  },
  {
    "text": "constrain templates with a concept so here I'm using one of the built-in Concepts input range obviously you can",
    "start": "2466359",
    "end": "2472800"
  },
  {
    "text": "Define your own but input range is exactly what we want here something that you can iterate over in a Range based",
    "start": "2472800",
    "end": "2479359"
  },
  {
    "text": "for Loop that's really all we needed at least at that level that solves our problem now look the error message has",
    "start": "2479359",
    "end": "2486520"
  },
  {
    "text": "almost as much Tex but it says there's no matching function for the core to print so it's at the core site not in",
    "start": "2486520",
    "end": "2493319"
  },
  {
    "text": "the middle it says the candid template was ignored because the constraints were",
    "start": "2493319",
    "end": "2498400"
  },
  {
    "text": "not satisfied when T is an INT and that's because int does not satisfy",
    "start": "2498400",
    "end": "2503800"
  },
  {
    "text": "input range tells you everything you needed to know they're not always as good as that but they are getting better",
    "start": "2503800",
    "end": "2509920"
  },
  {
    "text": "so concepts for a big win even just for error messages but there so much more you can do overloading things like that",
    "start": "2509920",
    "end": "2517960"
  },
  {
    "text": "um if you are on C++ 20 and you're using templates but you're not using Concepts yet please please use",
    "start": "2517960",
    "end": "2525359"
  },
  {
    "text": "Concepts because you can also simplify the the template syntax with the",
    "start": "2525359",
    "end": "2530680"
  },
  {
    "text": "abbreviated syntax you can use Auto much the same way that you can use in Auto lambdas instead of a template and you",
    "start": "2530680",
    "end": "2537599"
  },
  {
    "text": "can constrain it with a concept so huge step forward for templates and generic",
    "start": "2537599",
    "end": "2544440"
  },
  {
    "text": "code with Concepts in C++ 20 all right our ongoing example or the",
    "start": "2544440",
    "end": "2552839"
  },
  {
    "text": "vector of in converted to a vector of strings this is where we got to in our story so far using stood transform with",
    "start": "2552839",
    "end": "2559200"
  },
  {
    "text": "a Lambda not bad I think but we look at those iterators there great abstraction",
    "start": "2559200",
    "end": "2566640"
  },
  {
    "text": "but they can be a little bit tedious to work with even still so with ranges we can do things",
    "start": "2566640",
    "end": "2572480"
  },
  {
    "text": "like St use transform so now we basically just pipe",
    "start": "2572480",
    "end": "2578040"
  },
  {
    "text": "the whole container in works out there's a range there pulls the iterators out does everything on the Fly and so far so",
    "start": "2578040",
    "end": "2585680"
  },
  {
    "text": "good this all works but you probably want to put it in a vector and you sort of want to do this but it doesn't",
    "start": "2585680",
    "end": "2591480"
  },
  {
    "text": "work uh this is one of the the problems with ranges in C++ 20 great feature",
    "start": "2591480",
    "end": "2598599"
  },
  {
    "text": "powerful feature just not quite complete and lots of holes so you probably want to do something like this uh stood",
    "start": "2598599",
    "end": "2604559"
  },
  {
    "text": "ranges copy you got the back inserter there again doesn't feel like a big",
    "start": "2604559",
    "end": "2610040"
  },
  {
    "text": "Improvement after all but it is because now you can compose things much better if want a filter in there just put it in",
    "start": "2610040",
    "end": "2616760"
  },
  {
    "text": "exactly in that spot and it all pipelines together there's no intermediate containers pretty nice ranges are",
    "start": "2616760",
    "end": "2624280"
  },
  {
    "text": "definitely worthwhile um not quite the the easy win a lot of us hoped for but",
    "start": "2624280",
    "end": "2631319"
  },
  {
    "text": "they're getting better we're GL have to move on because the C+ plus 23 train is leaving the",
    "start": "2631319",
    "end": "2638920"
  },
  {
    "text": "station as far as the standard committee are concerned C++ 23 is done he's out",
    "start": "2638920",
    "end": "2644760"
  },
  {
    "text": "the door but it is with ISO who still yet to publish it I believe but that should happen in the coming months but",
    "start": "2644760",
    "end": "2652680"
  },
  {
    "text": "we know exactly what's in it weeks next week it's weeks from now ah okay proba",
    "start": "2652680",
    "end": "2659880"
  },
  {
    "text": "SS we weeks not months got you right so as of 11th of September it's going to",
    "start": "2659880",
    "end": "2666760"
  },
  {
    "text": "come before the end of the month probably all right you heard it here",
    "start": "2666760",
    "end": "2672078"
  },
  {
    "text": "first whichever way you look at it that train is leaving the station so again this is the slide I first showed in",
    "start": "2672359",
    "end": "2679240"
  },
  {
    "text": "2019 C+ plus 23 was a way off but I was reasonably confident in a lot of these",
    "start": "2679240",
    "end": "2684760"
  },
  {
    "text": "things reflection we were going to get coutin libraries patent matching modular",
    "start": "2684760",
    "end": "2691160"
  },
  {
    "text": "main okay meta classes um was a bit of a stretch but I was hopeful",
    "start": "2691160",
    "end": "2697680"
  },
  {
    "text": "um of all of those we got um we did get more ranges which is good um to be fair we",
    "start": "2697680",
    "end": "2705440"
  },
  {
    "text": "got St generate that is a co- routine library and an important one if you want to write um generator style co- routines",
    "start": "2705440",
    "end": "2713440"
  },
  {
    "text": "they are now trivial to write and that that's a really big win so I'm not going to complain too much about that but we",
    "start": "2713440",
    "end": "2719800"
  },
  {
    "text": "do need more and we've got loads more features that's actually quite a big release again seems to be a common theme we",
    "start": "2719800",
    "end": "2725400"
  },
  {
    "text": "don't get what we wanted but we got a load of good stuff anyway uh deducing this stood print MD",
    "start": "2725400",
    "end": "2732760"
  },
  {
    "text": "span um more stood format all all big things which I'm not going to talk about",
    "start": "2732760",
    "end": "2738000"
  },
  {
    "text": "now they're too big I do recommend you see uh tea dumler cpon 2023 I think",
    "start": "2738000",
    "end": "2745319"
  },
  {
    "text": "keynote where he talks about you know what's going to be in C++ 23 he covers",
    "start": "2745319",
    "end": "2750359"
  },
  {
    "text": "those very nicely so do go and watch that but I'll talk about a few of these",
    "start": "2750359",
    "end": "2756359"
  },
  {
    "text": "first so what we didn't get we still didn't get contracts which we thought I didn't make",
    "start": "2756359",
    "end": "2761800"
  },
  {
    "text": "it in 20 but it's going to make it in 23 surely not yet we didn't get the coting",
    "start": "2761800",
    "end": "2767000"
  },
  {
    "text": "task libraries and we didn't get executiv so this was what we're going to be doing",
    "start": "2767000",
    "end": "2772960"
  },
  {
    "text": "for the high level concurrency and it' been talked about for years and years prioritized for C++ 23 didn't make",
    "start": "2772960",
    "end": "2781359"
  },
  {
    "text": "it so let's concentrate on what we did get and go back to um this example from",
    "start": "2781359",
    "end": "2787760"
  },
  {
    "text": "earlier we're trying to use variant for error handling we said yeah not not so",
    "start": "2787760",
    "end": "2793240"
  },
  {
    "text": "good um we want something a bit simpler than that and that's what stood expected",
    "start": "2793240",
    "end": "2798359"
  },
  {
    "text": "gives us similar to variant optimized for error handling so it takes the value",
    "start": "2798359",
    "end": "2805680"
  },
  {
    "text": "you want value type you want or an error type you stood make unexpected if you have the uh the error",
    "start": "2805680",
    "end": "2812480"
  },
  {
    "text": "case and in use the first part of the if is exactly like still optional the only",
    "start": "2812480",
    "end": "2818200"
  },
  {
    "text": "difference is you can now get error out in the error case great exactly what we",
    "start": "2818200",
    "end": "2824680"
  },
  {
    "text": "wanted not perfect though and actually if we go back to optional to illustrate",
    "start": "2824680",
    "end": "2829839"
  },
  {
    "text": "this one um this is the example we looked at earlier this is fine if you've",
    "start": "2829839",
    "end": "2835119"
  },
  {
    "text": "just you just making one call and you need to immediately check for an error but if you got a few of these you want",
    "start": "2835119",
    "end": "2840960"
  },
  {
    "text": "to compose together as you sometimes do that doesn't work so nicely you out with code",
    "start": "2840960",
    "end": "2847480"
  },
  {
    "text": "like on the right this is only a couple of levels you've got a few more you start to see what we call the arrow of",
    "start": "2847480",
    "end": "2852720"
  },
  {
    "text": "Doom emerging that deep nesting and the happy path ending up in the middle it's so it's not a great way to",
    "start": "2852720",
    "end": "2859839"
  },
  {
    "text": "do it especially when you can compare it to exceptions that we already have in the language shuffles are the a handling",
    "start": "2859839",
    "end": "2865440"
  },
  {
    "text": "off to the end well C+ plus 23 gives us the so-called montic operations on stood",
    "start": "2865440",
    "end": "2871920"
  },
  {
    "text": "optional and stood expected where you can do the exactly the same thing like this",
    "start": "2871920",
    "end": "2877400"
  },
  {
    "text": "you can just uh compose lambdas together they do all the D referencing for you so you only get called back when you",
    "start": "2877400",
    "end": "2883119"
  },
  {
    "text": "actually have a value you got and then and transform depending on whether it was already an",
    "start": "2883119",
    "end": "2888200"
  },
  {
    "text": "optional type there's also R else that will do the error handling part and I",
    "start": "2888200",
    "end": "2893319"
  },
  {
    "text": "say that works for stood expected there's a couple more for dealing with the ER case so that's a big win I think",
    "start": "2893319",
    "end": "2902280"
  },
  {
    "text": "we'll see how that works out in practice uh we're not so used to using this sort",
    "start": "2902280",
    "end": "2907400"
  },
  {
    "text": "of style in our community but then maybe that will change so I'm actually going to be",
    "start": "2907400",
    "end": "2913160"
  },
  {
    "text": "giving a talk in depth on error handling at CP beon next week I'll go into this a bit more including some of the problems",
    "start": "2913160",
    "end": "2919480"
  },
  {
    "text": "with it but uh for now we'll move on because we need to talk about the",
    "start": "2919480",
    "end": "2926200"
  },
  {
    "text": "future got sound",
    "start": "2926200",
    "end": "2932520"
  },
  {
    "text": "future originally I had this for the C++ 23 slide things move",
    "start": "2932839",
    "end": "2939599"
  },
  {
    "text": "on C++ 23 it's um it's sort of early",
    "start": "2939599",
    "end": "2944960"
  },
  {
    "text": "days but actually as far as the committee is concerned we're half done uh feature freeze is next February",
    "start": "2944960",
    "end": "2952280"
  },
  {
    "text": "so we don't actually have a lot of time to get anything new in we already know some of the big things that we got in",
    "start": "2952280",
    "end": "2957720"
  },
  {
    "text": "and some of the things that we're still hoping for so there's more than this but these are the highlights stood execution",
    "start": "2957720",
    "end": "2965559"
  },
  {
    "text": "is finally in so we talked about Executives before this is different but it's an alternate to um alternate option",
    "start": "2965559",
    "end": "2972559"
  },
  {
    "text": "for concurrency structure concurrency specifically it's a big complex",
    "start": "2972559",
    "end": "2978960"
  },
  {
    "text": "feature and I think we're going to see lots of talks trainings blog posts books",
    "start": "2978960",
    "end": "2986119"
  },
  {
    "text": "libraries I don't know um dealing with Stud execution over the next year I think next week at cppcon the very first",
    "start": "2986119",
    "end": "2992720"
  },
  {
    "text": "talk is actually about stood execution it's already started so I'm not even going to try to",
    "start": "2992720",
    "end": "2998920"
  },
  {
    "text": "summarize it in one sentence here Beyond structure concurrency all right bit",
    "start": "2998920",
    "end": "3005160"
  },
  {
    "text": "easier to take in is stood in place Vector little thing really it's a vector",
    "start": "3005160",
    "end": "3010359"
  },
  {
    "text": "that entirely holds its memory within the object no allocations uh fixed",
    "start": "3010359",
    "end": "3016920"
  },
  {
    "text": "capacity very useful in certain domains low latency audio games things like that",
    "start": "3016920",
    "end": "3022960"
  },
  {
    "text": "they've been asking for this for years finally got it don't know why it's so long L algebra it's another big one but",
    "start": "3022960",
    "end": "3031319"
  },
  {
    "text": "you can think of it as like a wrapper around the blast libraries if you know those for linear algebra uh fairly",
    "start": "3031319",
    "end": "3038200"
  },
  {
    "text": "widely used well respected not without detractors but so far at least this has",
    "start": "3038200",
    "end": "3044400"
  },
  {
    "text": "made it into the standard there's a couple more in there that are a little bit harder to see because they're just single",
    "start": "3044400",
    "end": "3051079"
  },
  {
    "text": "characters we've got the underscore the placeholder this is now has new new",
    "start": "3051079",
    "end": "3056960"
  },
  {
    "text": "meaning and it's something that if you don't refer to it you can actually use it multiple times in the same scope",
    "start": "3056960",
    "end": "3062720"
  },
  {
    "text": "reuse it it's for things we don't actually care about the variable but you have to name it like RI types that rely",
    "start": "3062720",
    "end": "3069920"
  },
  {
    "text": "on side effects like lock guard for example or structured binding where you're binding to something several",
    "start": "3069920",
    "end": "3076119"
  },
  {
    "text": "things you don't care about one or two of them you can use underscore there really nice and they they've really",
    "start": "3076119",
    "end": "3081319"
  },
  {
    "text": "fought through how to be able to use just that Single Character and also be back was compatible with any code that",
    "start": "3081319",
    "end": "3087799"
  },
  {
    "text": "might been using in the past so nice job I'm really pleased about that it also be quite big when we get patent matching",
    "start": "3087799",
    "end": "3094040"
  },
  {
    "text": "eventually one day was on track for 26 but I think that's going to slip the other one the",
    "start": "3094040",
    "end": "3100240"
  },
  {
    "text": "dollar there there's actually a few other characters that are being adopted as legal identifiers or legal in",
    "start": "3100240",
    "end": "3106680"
  },
  {
    "text": "identifiers uh I think this already gone into C and I meant to check whether it had actually made it in or whether it's",
    "start": "3106680",
    "end": "3113160"
  },
  {
    "text": "still it has gone in thank you yeah so we can now use dollar and a couple of other characters I",
    "start": "3113160",
    "end": "3118839"
  },
  {
    "text": "forget which it identifies which is nice if you like that sort of thing things that we are",
    "start": "3118839",
    "end": "3125079"
  },
  {
    "text": "still hoping for contracts still on track but only just it's quite tight I",
    "start": "3125079",
    "end": "3130839"
  },
  {
    "text": "would say at this point 50/50 looks like Daniela agrees with me it may go into 26",
    "start": "3130839",
    "end": "3137040"
  },
  {
    "text": "it may not we'll see reflection seems to be actually surprisingly ahead of that",
    "start": "3137040",
    "end": "3143799"
  },
  {
    "text": "much higher chance of getting in I think current it's with word um so borrowing them finding anything I",
    "start": "3143799",
    "end": "3150839"
  },
  {
    "text": "would expect it to probably be voted in in November maybe February keep looking at Daniel in",
    "start": "3150839",
    "end": "3158040"
  },
  {
    "text": "now knows more than me but um very strong chance we're going to get reflection in 26 and this is a big deal",
    "start": "3158040",
    "end": "3165400"
  },
  {
    "text": "this could be the the game changer on par with at least 20 maybe 11 change the",
    "start": "3165400",
    "end": "3171240"
  },
  {
    "text": "way that we write a lot of C++ and this is meant to be an MVP",
    "start": "3171240",
    "end": "3177160"
  },
  {
    "text": "um so not even like the fully-fledged set of features we really wanted but actually surprisingly",
    "start": "3177160",
    "end": "3183040"
  },
  {
    "text": "powerful so I'm really excited about that stood simd was originally part of",
    "start": "3183040",
    "end": "3188799"
  },
  {
    "text": "the parallelism TS I believe um when I first put this up on a slide I was going",
    "start": "3188799",
    "end": "3194160"
  },
  {
    "text": "to say and it seems to be quite non-controversial so it's like to get in last I heard it was very controversial",
    "start": "3194160",
    "end": "3199839"
  },
  {
    "text": "so now I'm not so sure um I haven't been following that but um a few other things",
    "start": "3199839",
    "end": "3205799"
  },
  {
    "text": "like that but we're already tracking to go into 26 so this could actually be a a",
    "start": "3205799",
    "end": "3212240"
  },
  {
    "text": "very big release after all and I'm actually on my final slide ahead of time",
    "start": "3212240",
    "end": "3219359"
  },
  {
    "text": "which I wasn't expecting at all so that's good so I said that I wanted to try and sort of",
    "start": "3219359",
    "end": "3225880"
  },
  {
    "text": "give a flavor of how the language is evolved and also what stayed the same that desire to get zero cost",
    "start": "3225880",
    "end": "3232880"
  },
  {
    "text": "abstractions don't pay for what you don't use has been there from the start hasn't always been",
    "start": "3232880",
    "end": "3238960"
  },
  {
    "text": "realized but when it hasn't been we've tried again and we tried to improve get",
    "start": "3238960",
    "end": "3245000"
  },
  {
    "text": "better higher higher level abstractions and also get better performance going",
    "start": "3245000",
    "end": "3250599"
  },
  {
    "text": "both ways and hopefully I've shown that various points we've hit that we're actually in a better place because of it",
    "start": "3250599",
    "end": "3257440"
  },
  {
    "text": "the language is definitely not dead yet moving forwards still at a rapid Pace",
    "start": "3257440",
    "end": "3264079"
  },
  {
    "text": "still a big Community a lot of interest and yet we find ourselves yet another",
    "start": "3264079",
    "end": "3269640"
  },
  {
    "text": "Crossroads another possible oldmobile moment we have challenges so-called",
    "start": "3269640",
    "end": "3276640"
  },
  {
    "text": "successor languages saying actually who wants the complexity of C++ we can get",
    "start": "3276640",
    "end": "3282240"
  },
  {
    "text": "those zero cross subtractions in a an even cleaner way and maybe that's true I think it's too",
    "start": "3282240",
    "end": "3289599"
  },
  {
    "text": "early to tell but I do think C++ is going to be around quite a few versions",
    "start": "3289599",
    "end": "3294839"
  },
  {
    "text": "yet and we'll see whether it lasts but uh",
    "start": "3294839",
    "end": "3300359"
  },
  {
    "text": "I'm optimistic I think that's really the end of the talk I wasn't even expecting to",
    "start": "3300359",
    "end": "3306920"
  },
  {
    "text": "finish on time so I didn't prepare a conclusion so I'm going to say thank you",
    "start": "3306920",
    "end": "3312760"
  },
  {
    "text": "very much",
    "start": "3312760",
    "end": "3315960"
  }
]