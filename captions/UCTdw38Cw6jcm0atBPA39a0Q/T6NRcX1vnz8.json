[
  {
    "text": "welcome to clean testing i'm jason taylor an ssw solution",
    "start": "640",
    "end": "6080"
  },
  {
    "text": "architect you can find me on twitter at jasontaylordev recently i've been teaching folks about clean architecture",
    "start": "6080",
    "end": "12880"
  },
  {
    "text": "and i've highlighted the simplest approach to enterprise application development with net core tonight in this talk i want to",
    "start": "12880",
    "end": "19760"
  },
  {
    "text": "demonstrate a simple and yet powerful approach to automated testing with net core i want to demonstrate an",
    "start": "19760",
    "end": "26240"
  },
  {
    "text": "approach where tests are easy to create maintain and understand and give you the confidence to deploy to production",
    "start": "26240",
    "end": "33120"
  },
  {
    "text": "knowing that it will behave as expected let's get started",
    "start": "33120",
    "end": "38160"
  },
  {
    "text": "so we'll we'll kick it off with an introduction to clean architecture and following that i'm going to provide an",
    "start": "38160",
    "end": "43440"
  },
  {
    "text": "overview of clean testing next we'll take a quick look at testing frameworks and tools",
    "start": "43440",
    "end": "49360"
  },
  {
    "text": "and then we'll jump right into the live demos and this is where we're going to spend most of our time it's going to be a lot of fun",
    "start": "49360",
    "end": "54480"
  },
  {
    "text": "i had a lot of fun putting this talk together i think you're going to really enjoy it finally i'm going to wrap it up with a",
    "start": "54480",
    "end": "60079"
  },
  {
    "text": "quick summary and some resources in case you're keen to learn more so with clean architecture the domain",
    "start": "60079",
    "end": "67600"
  },
  {
    "text": "and the application layer at the center of the design this is known as the core of the system",
    "start": "67600",
    "end": "73119"
  },
  {
    "text": "now the domain layer contains enterprise logic and types whereas the application layer contains",
    "start": "73119",
    "end": "78640"
  },
  {
    "text": "business logic and types the difference being that enterprise logic could be shared across multiple",
    "start": "78640",
    "end": "83680"
  },
  {
    "text": "systems whereas the business logic is the logic that's specific to the system if you've heard my talks before on clean",
    "start": "83680",
    "end": "89759"
  },
  {
    "text": "architecture you know that i often use northland traders as an example so an example of business logic in",
    "start": "89759",
    "end": "94960"
  },
  {
    "text": "northwind traders would be create an order or create a customer or update a customer those sorts of things",
    "start": "94960",
    "end": "101439"
  },
  {
    "text": "so now core should not be dependent on data access concerns and other infrastructure so those dependencies are",
    "start": "101439",
    "end": "107200"
  },
  {
    "text": "inverted so infrastructure and presentation depend on core this is achieved by adding interfaces or",
    "start": "107200",
    "end": "114240"
  },
  {
    "text": "abstractions within core that are implemented outside of core a good example is messaging if we wanted",
    "start": "114240",
    "end": "121040"
  },
  {
    "text": "to have some sort of messaging capability within core then we could say add an interface i",
    "start": "121040",
    "end": "126079"
  },
  {
    "text": "messaging service and ins outside of core inside of infrastructure we could add an implementation",
    "start": "126079",
    "end": "132000"
  },
  {
    "text": "now it doesn't actually matter what that implementation is at that point all of our business logic that we include inside core",
    "start": "132000",
    "end": "137760"
  },
  {
    "text": "can just run against the interface we can change that implementation say from twilio to sendgrid to a local",
    "start": "137760",
    "end": "144800"
  },
  {
    "text": "smtp server anything we want and as long as that messaging interface doesn't change our business logic is not impacted by",
    "start": "144800",
    "end": "151599"
  },
  {
    "text": "that so you can see that all dependencies flow inwards and core has no dependencies on any other layers",
    "start": "151599",
    "end": "158720"
  },
  {
    "text": "now infrastructure and presentation both depend on core but not on one another and that's very",
    "start": "158720",
    "end": "164560"
  },
  {
    "text": "important if as an example we had presentation depending on core because i wanted to access that",
    "start": "164560",
    "end": "170800"
  },
  {
    "text": "messaging service well then that would be a dependency on a concrete implementation",
    "start": "170800",
    "end": "176319"
  },
  {
    "text": "which would be not great because we couldn't change that implementation would be fixed in using that in presentation but also",
    "start": "176319",
    "end": "182800"
  },
  {
    "text": "it would mean that we'd have to put logic in presentation to orchestrate that interaction the interaction between say for example",
    "start": "182800",
    "end": "190000"
  },
  {
    "text": "on asp.net controller and the messaging service that we're using so we want those dependencies to",
    "start": "190000",
    "end": "195599"
  },
  {
    "text": "always point inwards so that we can keep the logic within core",
    "start": "195599",
    "end": "201040"
  },
  {
    "text": "so this results in an accurate texture and design that is independent of frameworks it doesn't require the existence of some framework it's",
    "start": "201599",
    "end": "208879"
  },
  {
    "text": "testable and that's why we're here tonight i'm going to show you a very simple and powerful approach to testing systems",
    "start": "208879",
    "end": "215200"
  },
  {
    "text": "that that implement these principles of clean architecture it's independent of the ui so right now",
    "start": "215200",
    "end": "221920"
  },
  {
    "text": "we might be using an angular application soon we'll change it to view and next view we'll change it to blazer for sure",
    "start": "221920",
    "end": "228319"
  },
  {
    "text": "it's independent of the database right now it's using sql server we've tested it with postgres we might use the cosmos db in the future",
    "start": "228319",
    "end": "235680"
  },
  {
    "text": "it's independent of anything external so in fact core just doesn't know anything at all about the outside world",
    "start": "235680",
    "end": "241519"
  },
  {
    "text": "and that's what makes this design so great it's the difference between something that's going to last three years and something that will be still around",
    "start": "241519",
    "end": "247840"
  },
  {
    "text": "in 20 years now that's quite a brief introduction but i do have this video that if you'd",
    "start": "247840",
    "end": "253360"
  },
  {
    "text": "like to learn more you can check this out this is my clean architecture with asp.net course free otalk",
    "start": "253360",
    "end": "258479"
  },
  {
    "text": "that was recorded in ndc sydney last year so certainly worth a look if you're new",
    "start": "258479",
    "end": "264000"
  },
  {
    "text": "to the topic of clean architecture so now we get to have a look at clean testing that's why we're here",
    "start": "264000",
    "end": "270080"
  },
  {
    "text": "so first i want to look at the typical approach to testing with the typical approach to automated testing the focus is on",
    "start": "270080",
    "end": "276160"
  },
  {
    "text": "unit tests integration tests and ui tests no surprises there so we",
    "start": "276160",
    "end": "282479"
  },
  {
    "text": "know that ui tests are the most expensive to create and they're also the slowest to run so",
    "start": "282479",
    "end": "288160"
  },
  {
    "text": "we therefore try to minimize the amount of ui tests we create in the middle we've got integration",
    "start": "288160",
    "end": "293440"
  },
  {
    "text": "tests and then at the bottom we've got unit tests and we know that unit chests are cheap to create and faster on so this is where we're",
    "start": "293440",
    "end": "300240"
  },
  {
    "text": "going to focus the majority of our efforts so generally we're going to try to write a unit test first",
    "start": "300240",
    "end": "306000"
  },
  {
    "text": "if we can't write a unit test then we'll move up the pyramid and write an integration test and finally if this particular piece of",
    "start": "306000",
    "end": "311680"
  },
  {
    "text": "behavior cannot be integration tested then we'll write a ui test so for some examples",
    "start": "311680",
    "end": "316720"
  },
  {
    "text": "if logic exists in an angular front-end then we need to write a ui test we could of course use a variety of",
    "start": "316720",
    "end": "322639"
  },
  {
    "text": "different javascript testing frameworks to do that but for me i consider that to be a ui test next if logic exists in the asp.net",
    "start": "322639",
    "end": "330720"
  },
  {
    "text": "core controller for example then we need to write some sort of asp.net core integration test",
    "start": "330720",
    "end": "336000"
  },
  {
    "text": "fortunately asp.net core has really good tools for that so it's not so bad but the thing with the clean",
    "start": "336000",
    "end": "341199"
  },
  {
    "text": "architecture approach that we're taking is we're keeping the logic completely out of presentation so that includes angular or vue or or",
    "start": "341199",
    "end": "349600"
  },
  {
    "text": "react and that includes our web api our web api is very simple just infrastructure and so",
    "start": "349600",
    "end": "355440"
  },
  {
    "text": "we're not going to be looking at writing tests in those areas so what we will be doing is focusing on",
    "start": "355440",
    "end": "361759"
  },
  {
    "text": "subcutaneous tests so with clean testing we'll introduce subcutaneous tests into the mix and we'll still write",
    "start": "361759",
    "end": "368479"
  },
  {
    "text": "unit integration and ui tests but the main focus is going to be on the subcutaneous testing",
    "start": "368479",
    "end": "374479"
  },
  {
    "text": "and that's because these tests are the ones that are easy to write and run these tests effectively verify",
    "start": "374479",
    "end": "381039"
  },
  {
    "text": "behavior and integration they document the system and they reduce the need to create",
    "start": "381039",
    "end": "386080"
  },
  {
    "text": "and maintain a large number of mocks and if you've if you've if you've built a lot of hand rolled mocks or even used a",
    "start": "386080",
    "end": "391440"
  },
  {
    "text": "great mocking tool like mq sorry mock you then you know that that can be",
    "start": "391440",
    "end": "396880"
  },
  {
    "text": "a real pain it can be time consuming and that can be a little bit fragile so in short these tests these",
    "start": "396880",
    "end": "402720"
  },
  {
    "text": "subcutaneous tests are going to provide us with a great deal of confidence so now i know you're asking what are",
    "start": "402720",
    "end": "408000"
  },
  {
    "text": "subcutaneous tests so subcutaneous tests are tests that operate",
    "start": "408000",
    "end": "413280"
  },
  {
    "text": "just below the ui layer now we talked about this a little bit but i just want to touch on it again because this can be",
    "start": "413280",
    "end": "418400"
  },
  {
    "text": "confusing so for a single page application if it was view with an asp.net web api backend then just below the ui",
    "start": "418400",
    "end": "425599"
  },
  {
    "text": "layer could be below the view layer and that would be appropriate if we have logic inside of asp.net or",
    "start": "425599",
    "end": "432000"
  },
  {
    "text": "controllers or endpoints or somewhere along those lines we could write subcutaneous tests to in",
    "start": "432000",
    "end": "437440"
  },
  {
    "text": "to to operate at that point but again with this clean architecture that i provide we're not putting any",
    "start": "437440",
    "end": "444160"
  },
  {
    "text": "logic in that layer so we get to operate one layer below so we'll we'll look at what that layer",
    "start": "444160",
    "end": "450479"
  },
  {
    "text": "will be shortly so with subcutaneous tests we're going to verify the basic inputs and outputs of the system and",
    "start": "450479",
    "end": "457599"
  },
  {
    "text": "this provides good test coverage and helps to ensure that tests are not brittle these tests are only appropriate if you",
    "start": "457599",
    "end": "463840"
  },
  {
    "text": "keep your logic out of the ui i think i think i probably hopped on that enough so um and this will therefore reduce the",
    "start": "463840",
    "end": "470560"
  },
  {
    "text": "need for ui tests which is a good thing because we know as we mentioned earlier they're expensive to create",
    "start": "470560",
    "end": "475919"
  },
  {
    "text": "and they're brittle they're also slow so let's have a look at this from a",
    "start": "475919",
    "end": "481759"
  },
  {
    "text": "slightly different perspective so presentation in this layer diagram contains the ui",
    "start": "481759",
    "end": "487280"
  },
  {
    "text": "for a typical spa that might be the view front-end combined with the web api back-end or for a microservice it might just be a",
    "start": "487280",
    "end": "493199"
  },
  {
    "text": "web api back-end depending on your approach of course we have core which includes the application and domain layers",
    "start": "493199",
    "end": "499759"
  },
  {
    "text": "and that contains all logic it includes commands queries validators cross-cutting concerns",
    "start": "499759",
    "end": "505520"
  },
  {
    "text": "anything else you can think of that you've got inside of core infrastructure represents both our",
    "start": "505520",
    "end": "510800"
  },
  {
    "text": "internal and external infrastructure so an example of internal infrastructure might be the",
    "start": "510800",
    "end": "516159"
  },
  {
    "text": "database that we're programming against and and keep in mind these tests will run against a live database",
    "start": "516159",
    "end": "523039"
  },
  {
    "text": "um an example of external infrastructure might be the external client api",
    "start": "523039",
    "end": "528160"
  },
  {
    "text": "so the subcutaneous tests are going to operate just below the presentation layer operating all the",
    "start": "528160",
    "end": "534160"
  },
  {
    "text": "way through core and the internal infrastructure so the live database and so we're going to actually wire up services",
    "start": "534160",
    "end": "542240"
  },
  {
    "text": "for these tests we're going to wire up a production system to be as close to production as",
    "start": "542240",
    "end": "547360"
  },
  {
    "text": "possible so to ensure that we're definitely on the same page what we're going to be testing is our",
    "start": "547360",
    "end": "552720"
  },
  {
    "text": "commands and queries so in the clean architecture approach that i demonstrate the logic is moved out of the front end",
    "start": "552720",
    "end": "558880"
  },
  {
    "text": "out of presentation and into commands and queries inside of core in the application layer and those",
    "start": "558880",
    "end": "564240"
  },
  {
    "text": "are the entry points for our application so we'll include internal services so",
    "start": "564240",
    "end": "569920"
  },
  {
    "text": "we're going to wire up things like our live database we're going to wire up asp.net identity and any other services",
    "start": "569920",
    "end": "576959"
  },
  {
    "text": "that we're using in production but we'll mock our external services so if there's something such as",
    "start": "576959",
    "end": "582160"
  },
  {
    "text": "an external client api that we're talking to we didn't create that um we don't maintain it and it's kind of",
    "start": "582160",
    "end": "588320"
  },
  {
    "text": "um it can be a little bit fragile to run that as part of our automated test because we don't know if it's going to be up it's going to be down or how it's going",
    "start": "588320",
    "end": "594320"
  },
  {
    "text": "to behave so we'll mock those external services and we really want to minimize the amount of mocks that we write just",
    "start": "594320",
    "end": "600560"
  },
  {
    "text": "keep it down to hopefully just a small few because that's going to make our test give us all the more confidence",
    "start": "600560",
    "end": "607440"
  },
  {
    "text": "so we want to keep it simple of course we want these tests to be easy to write and maintain because that's that's the",
    "start": "607440",
    "end": "613360"
  },
  {
    "text": "approach that we're trying to build here so with that definition out of the way let's have a look at testing tools",
    "start": "613360",
    "end": "620240"
  },
  {
    "text": "i want to kick it off with the frameworks that i considered when i was trying to put together the approach to clean testing",
    "start": "620240",
    "end": "626000"
  },
  {
    "text": "so first and foremost i looked at end unit it's a popular choice for many.net and",
    "start": "626000",
    "end": "631200"
  },
  {
    "text": "net core developers and it's probably the most widely used next we have x unit now this is by far",
    "start": "631200",
    "end": "637519"
  },
  {
    "text": "the most popular choice for net core and it's also used by a number of teams at microsoft",
    "start": "637519",
    "end": "642880"
  },
  {
    "text": "in fact it's probably one of my favorites then we have ms test now if you've seen my",
    "start": "642880",
    "end": "648240"
  },
  {
    "text": "presentations before you know that i love building logos for for ms tests they don't have a logo",
    "start": "648240",
    "end": "653360"
  },
  {
    "text": "this is my latest version i've used microsoft emojis this time so i think it's much more professional",
    "start": "653360",
    "end": "658959"
  },
  {
    "text": "than my last version i hope you enjoy it so i think ms test can be somewhat of a default choice for many new developers",
    "start": "658959",
    "end": "665839"
  },
  {
    "text": "and and i think that a lot of the time they'll move on to nu and x unit one",
    "start": "665839",
    "end": "670959"
  },
  {
    "text": "other framework that i looked at was fixy and this is a powerful conventions-based framework",
    "start": "670959",
    "end": "676480"
  },
  {
    "text": "and the reason that i looked at this particular framework is because it was recommended by jimmy bogard in an article",
    "start": "676480",
    "end": "683519"
  },
  {
    "text": "integration tests with x unit and he basically described that you have to jump through a few hoops if",
    "start": "683519",
    "end": "689519"
  },
  {
    "text": "you want to write integration text in x unit you can do it but it's not simple and he suggested that something like fixy or other",
    "start": "689519",
    "end": "696480"
  },
  {
    "text": "behavior during design frameworks can be much much better so i wanted to check",
    "start": "696480",
    "end": "701680"
  },
  {
    "text": "that out for myself and i really did like fixie in fact i built a um fixie.net call project",
    "start": "701680",
    "end": "706880"
  },
  {
    "text": "template so if you want to write some tests in fixer you can check out the.net core project template so i didn't have time to try out all of",
    "start": "706880",
    "end": "713600"
  },
  {
    "text": "these because for three of them i wrote a lot of subcutaneous tests so that i could choose the right framework",
    "start": "713600",
    "end": "720000"
  },
  {
    "text": "but i didn't use ms test maybe i should have they put a lot of work into ms test i",
    "start": "720000",
    "end": "725200"
  },
  {
    "text": "know it's been cross-platform for a while now it's out of the box with net core it's fast um so maybe that's an",
    "start": "725200",
    "end": "732160"
  },
  {
    "text": "exercise for next time but for this particular exercise i looked at end unit x unit and fix c",
    "start": "732160",
    "end": "738160"
  },
  {
    "text": "and um i guess you know the the thing was i had to decide which framework was best for me",
    "start": "738160",
    "end": "743600"
  },
  {
    "text": "so which framework did i go with before this i had been programming with x unit and while it's possible to create great",
    "start": "743600",
    "end": "750639"
  },
  {
    "text": "subcutaneous tests in any one of these frameworks i decided to run with n unit and the",
    "start": "750639",
    "end": "755680"
  },
  {
    "text": "reason for this was for this style of testing i found n-unit to provide the best support",
    "start": "755680",
    "end": "761120"
  },
  {
    "text": "it was simple it actually seemed to run a little bit faster for my tests i didn't actually benchmark that so i",
    "start": "761120",
    "end": "766800"
  },
  {
    "text": "can't say that with authority but that was the feeling i was getting they were running faster and it had great",
    "start": "766800",
    "end": "772079"
  },
  {
    "text": "mechanisms for managing global shared state when we're writing subcutaneous tests and we're trying to",
    "start": "772079",
    "end": "778000"
  },
  {
    "text": "wire up these production scenarios obviously that's really important",
    "start": "778000",
    "end": "783440"
  },
  {
    "text": "so end unit one so next some tools let's have a look at first and foremost fluent assertions",
    "start": "784160",
    "end": "791200"
  },
  {
    "text": "this tool contains a large set of extension methods that allow you to more naturally specify",
    "start": "791200",
    "end": "796639"
  },
  {
    "text": "the outcome of your test and it also improves the readability within your tests so that makes your tests easier to understand and that's",
    "start": "796639",
    "end": "803600"
  },
  {
    "text": "one of the goals of this approach tests should be easy to create and maintain not only that one of the greatest things",
    "start": "803600",
    "end": "810800"
  },
  {
    "text": "about fluent assertions is it clearly explains test failure results you get better test results",
    "start": "810800",
    "end": "817040"
  },
  {
    "text": "and as a result of that it means you need to do less debugging so how many times do you if i have a",
    "start": "817040",
    "end": "822959"
  },
  {
    "text": "test failure and you immediately launch the debugger set a breakpoint and try to figure out what's going on",
    "start": "822959",
    "end": "828000"
  },
  {
    "text": "i find that i'm actually doing that less and less with fluent assertions because the the better test results that",
    "start": "828000",
    "end": "833360"
  },
  {
    "text": "it's providing means that i can see immediately what's going wrong and how i can fix it so i can jump straight into you know",
    "start": "833360",
    "end": "839839"
  },
  {
    "text": "fixing that red moving onto green and refactoring so overall i found that fluent assertions improved my productivity",
    "start": "839839",
    "end": "847120"
  },
  {
    "text": "and simplified my approach it's a great tool you should check it out you might be using should we have used should we in the past i think it's good",
    "start": "847120",
    "end": "853199"
  },
  {
    "text": "too but i'm certainly enjoying switching it up with fluent assertions okay and next we have mock i don't think",
    "start": "853199",
    "end": "859760"
  },
  {
    "text": "it needs much of an introduction but just in case it's the mockingframeworkfor.net",
    "start": "859760",
    "end": "865440"
  },
  {
    "text": "i think it's a default choice for many developers now according to the repo it's very popular and friendly now i can",
    "start": "865440",
    "end": "872959"
  },
  {
    "text": "confirm that it's indeed popular but i don't agree that it's friendly it's never once greeted me in the",
    "start": "872959",
    "end": "878320"
  },
  {
    "text": "morning it's never given me any compliments it's never said how nice and clean my code is which i take a lot of time to",
    "start": "878320",
    "end": "883600"
  },
  {
    "text": "try and make it nice and clean but it is popular it is probably the number one choice for mocking frameworks",
    "start": "883600",
    "end": "890079"
  },
  {
    "text": "that aside it does support mocking classes and interfaces and it's strongly typed so there's no",
    "start": "890079",
    "end": "895279"
  },
  {
    "text": "magic strings it's simple to use with no prior knowledge required you can really do",
    "start": "895279",
    "end": "900720"
  },
  {
    "text": "a lot with mock just by having a look at its fluent syntax so next we have respawn so this is my",
    "start": "900720",
    "end": "907360"
  },
  {
    "text": "favorite new tool respawn is an intelligent database cleaner for integration tests",
    "start": "907360",
    "end": "913279"
  },
  {
    "text": "and just in case we're you're wondering what respawn is um it's it's uh what the word means of",
    "start": "913279",
    "end": "920160"
  },
  {
    "text": "course it means that um it's kind of like when you're playing a video game let's say you're playing um",
    "start": "920160",
    "end": "925600"
  },
  {
    "text": "quake and you die and then your character respawns and you can continue on to quite another day so it's kind of like that for databases",
    "start": "925600",
    "end": "932320"
  },
  {
    "text": "it wipes the database to a clean state you've got all your health back and you're ready to go again ready to run that next test already to get that",
    "start": "932320",
    "end": "938959"
  },
  {
    "text": "next frag so what it does is instead of deleting data or rolling back transactions it",
    "start": "938959",
    "end": "944800"
  },
  {
    "text": "takes a performant approach by working out the relationships and deleting the data in the correct order",
    "start": "944800",
    "end": "950639"
  },
  {
    "text": "respawn is easy to configure you can set it to ignore tables and schemas such as the ear",
    "start": "950639",
    "end": "956079"
  },
  {
    "text": "migrations history table and i'm going to show you that because if we're resetting the database",
    "start": "956079",
    "end": "961279"
  },
  {
    "text": "to clean state that means wiping the data obviously we can't wipe the ef migrations history table",
    "start": "961279",
    "end": "967199"
  },
  {
    "text": "otherwise it's going to be out of sync with ef core so now it supports many databases such as sql server postgres",
    "start": "967199",
    "end": "973360"
  },
  {
    "text": "mysql i predominantly work with sql server so i've only used it with sql server at this stage",
    "start": "973360",
    "end": "979839"
  },
  {
    "text": "the cool thing about respawn is it's small and it's easy to learn so i'm going to show you a lot in this",
    "start": "979839",
    "end": "985839"
  },
  {
    "text": "talk but if you'd like to learn more of course you can go and check out the the repo so now the best part of the",
    "start": "985839",
    "end": "992399"
  },
  {
    "text": "talk we can move on to the live demos all of these demos are going to be run",
    "start": "992399",
    "end": "997839"
  },
  {
    "text": "using the clean architecture solution template so this is something that i actually built for my talk for nbc sydney",
    "start": "997839",
    "end": "1004720"
  },
  {
    "text": "last year and it was based on everything that i'd learned in talking to people about clean",
    "start": "1004720",
    "end": "1010320"
  },
  {
    "text": "architecture presenting clean architecture and teaching clean architecture so it's a net core template package you basically",
    "start": "1010320",
    "end": "1016480"
  },
  {
    "text": "run.net and uci solution and you get a bunch of projects out of the box ready to go it runs asp net core",
    "start": "1016480",
    "end": "1022320"
  },
  {
    "text": "31 angular 9 energy framework core 31 and asp net core identity",
    "start": "1022320",
    "end": "1028079"
  },
  {
    "text": "so if you wanted to try it out you just simply install it from the command line dot net new install clean architecture",
    "start": "1028079",
    "end": "1034240"
  },
  {
    "text": "solution template and then you can create a new project by going dot net new ca solution and it will create that project",
    "start": "1034240",
    "end": "1040720"
  },
  {
    "text": "for you of course you can learn a lot more at the repo and i've got a link to that repo at the end",
    "start": "1040720",
    "end": "1046160"
  },
  {
    "text": "of this presentation but this is what we're going to be using for the demos tonight the only difference is i've deleted the tests",
    "start": "1046160",
    "end": "1053840"
  },
  {
    "text": "okay so let's begin demo on clean testing we're going to create tests that are easy to write and maintain with end unit balloon",
    "start": "1053840",
    "end": "1060240"
  },
  {
    "text": "assertions mock and respawn",
    "start": "1060240",
    "end": "1063919"
  },
  {
    "text": "okay what i'd like to do is start with a little bit of a",
    "start": "1065440",
    "end": "1071200"
  },
  {
    "text": "demonstration so we're going to talk about what we're going to be testing uh a",
    "start": "1071200",
    "end": "1076400"
  },
  {
    "text": "quick overview of the project first so when you run this new ca solution",
    "start": "1076400",
    "end": "1081679"
  },
  {
    "text": "what you get out of the box is a single page application built on angular with asp.net core back",
    "start": "1081679",
    "end": "1087679"
  },
  {
    "text": "end adhering to the principles of clean architecture and so just briefly it contains four",
    "start": "1087679",
    "end": "1094799"
  },
  {
    "text": "projects the domain and application layers making up core the infrastructure layer and the",
    "start": "1094799",
    "end": "1100720"
  },
  {
    "text": "presentation layer which is called web ui so that's exactly what you saw on the diagram now i don't want to go into too",
    "start": "1100720",
    "end": "1106320"
  },
  {
    "text": "much detail here because you can see that in the other presentation we'll spend our time talking about clean testing now the template also comes with",
    "start": "1106320",
    "end": "1113760"
  },
  {
    "text": "i think three test projects so really good examples of tests um straight out of the box including these",
    "start": "1113760",
    "end": "1120000"
  },
  {
    "text": "subcutaneous tests that we're going to be writing tonight so i have a little bit of functionality",
    "start": "1120000",
    "end": "1125120"
  },
  {
    "text": "in here and we're going to be testing that this is my to-do list um sample and it's basically multiple",
    "start": "1125120",
    "end": "1130799"
  },
  {
    "text": "lists and multiple to-do items with various capabilities for managing items",
    "start": "1130799",
    "end": "1136320"
  },
  {
    "text": "and managing lists and creating lists and creating items a little bit of fun",
    "start": "1136320",
    "end": "1142880"
  },
  {
    "text": "working with it so i created this much earlier in the year and i thought i'll create a covert 19 shopping list and of course it was",
    "start": "1142880",
    "end": "1149360"
  },
  {
    "text": "easy to get apples milk and bread but i wasn't able to yet check toilet paper pasta tissue's tuna and water off",
    "start": "1149360",
    "end": "1155520"
  },
  {
    "text": "the list i think i had to meet the shady guy at the end of my street who had stocked up on these things",
    "start": "1155520",
    "end": "1161440"
  },
  {
    "text": "so let's write some tests i think we need to look at writing a simple test first and so we'll",
    "start": "1161440",
    "end": "1167360"
  },
  {
    "text": "write a test for get to do's and that's what this view is driven by it's driven by a view model",
    "start": "1167360",
    "end": "1172480"
  },
  {
    "text": "called the to-do's view model so let's give that a test so in the application layer",
    "start": "1172480",
    "end": "1178400"
  },
  {
    "text": "i have this to-do list folder and inside of there i have a queries folder and inside of there i have a get to do's",
    "start": "1178400",
    "end": "1185440"
  },
  {
    "text": "folder so let's have a look at this get to this query so hopefully this is nice and big for you or make it even bigger so the way this",
    "start": "1185440",
    "end": "1193280"
  },
  {
    "text": "query is structured is it has a dto for the query request and this might contain parameters to",
    "start": "1193280",
    "end": "1200160"
  },
  {
    "text": "pass in as part of the the request so it might include some filtering options",
    "start": "1200160",
    "end": "1205919"
  },
  {
    "text": "some paging options and sorting options whatever it is that we we wanted to",
    "start": "1205919",
    "end": "1211360"
  },
  {
    "text": "include when we wanted to get a list of to-do's in this case i really just want everything",
    "start": "1211360",
    "end": "1217039"
  },
  {
    "text": "and i don't need to provide any arguments for this particular query now just below",
    "start": "1217039",
    "end": "1223200"
  },
  {
    "text": "that in the same file i have this get to do's query handler and this contains the logic for building",
    "start": "1223200",
    "end": "1230080"
  },
  {
    "text": "the to-do's view model and essentially what it does is it returns a today's view model",
    "start": "1230080",
    "end": "1235360"
  },
  {
    "text": "which consists of a number of priority levels and to-do lists and each to-do list is made",
    "start": "1235360",
    "end": "1241760"
  },
  {
    "text": "up of a to-do list dto and a to-do list dto contains a number of items to do item dto",
    "start": "1241760",
    "end": "1249440"
  },
  {
    "text": "so we're going to start writing some tests for this one what did i change there",
    "start": "1249440",
    "end": "1256159"
  },
  {
    "text": "oh of course yep okay so first we're going to create a",
    "start": "1256159",
    "end": "1261600"
  },
  {
    "text": "new project so i'm going to create it in this test folder and i'll go add new project and of course as i",
    "start": "1261600",
    "end": "1269280"
  },
  {
    "text": "mentioned we're using end unit so we're going to use an end unit test project in net core",
    "start": "1269280",
    "end": "1274640"
  },
  {
    "text": "go next and we will call it clean testing",
    "start": "1274640",
    "end": "1281919"
  },
  {
    "text": "dot uh integration and we'll call it",
    "start": "1282799",
    "end": "1288840"
  },
  {
    "text": "cleantesting.application.org integration test because this is going to target our application layer i could also call it",
    "start": "1288840",
    "end": "1294880"
  },
  {
    "text": "subcutaneous test i might even change that at some point",
    "start": "1294880",
    "end": "1300640"
  },
  {
    "text": "we're creating that just waiting",
    "start": "1300640",
    "end": "1306320"
  },
  {
    "text": "i always like to run the default test just to make sure everything's um working we'll just make sure that",
    "start": "1308240",
    "end": "1313840"
  },
  {
    "text": "we've got those dependencies restored take a second this is all getting",
    "start": "1313840",
    "end": "1319679"
  },
  {
    "text": "cleaned up when i'm not recording and presenting",
    "start": "1319679",
    "end": "1326480"
  },
  {
    "text": "live it takes about one second when we're recording and presenting live i'm pretty sure that just took ten minutes of my time",
    "start": "1326480",
    "end": "1332320"
  },
  {
    "text": "so anyway we're there now we'll run that so i just went ctrl rt nice little",
    "start": "1332320",
    "end": "1337760"
  },
  {
    "text": "shortcut to run this particular test and we'll switch to test explorer it's just doing a quick build",
    "start": "1337760",
    "end": "1343760"
  },
  {
    "text": "i'll just expand that out",
    "start": "1343760",
    "end": "1347840"
  },
  {
    "text": "there's absolutely no reason why this test wasn't wrong but hopefully it'll warm up my surface book and make",
    "start": "1349520",
    "end": "1354880"
  },
  {
    "text": "the rest of the presentation go a little bit faster maybe not it's time to get a new laptop",
    "start": "1354880",
    "end": "1361039"
  },
  {
    "text": "okay that's all good so we don't need that test so we'll go ahead and delete that and we're going to create our new test",
    "start": "1361039",
    "end": "1366960"
  },
  {
    "text": "so let me see i will use my",
    "start": "1366960",
    "end": "1372000"
  },
  {
    "text": "little snippets and i have a cool little extension called add new file you probably heard",
    "start": "1372000",
    "end": "1377679"
  },
  {
    "text": "me talk about it before it allows me just to specify the full path including folders to be created and the",
    "start": "1377679",
    "end": "1383600"
  },
  {
    "text": "file name a folder structure and a file name that replicates the folder structure and",
    "start": "1383600",
    "end": "1390159"
  },
  {
    "text": "file names that are in the application layer so now my application layer is neatly organized and so on my tests",
    "start": "1390159",
    "end": "1396320"
  },
  {
    "text": "so i've got this little nice test ready to go now i'm going to grab my stub for that",
    "start": "1396320",
    "end": "1402000"
  },
  {
    "text": "test",
    "start": "1402000",
    "end": "1404240"
  },
  {
    "text": "and looks good we'll need to bring in some name spaces",
    "start": "1410480",
    "end": "1416240"
  },
  {
    "text": "so we'll bring in end unit we'll bring in a reference now i want to add a reference for this project",
    "start": "1416240",
    "end": "1423200"
  },
  {
    "text": "to web ui so you might be thinking why is he adding a reference to web ui why not to",
    "start": "1423200",
    "end": "1428480"
  },
  {
    "text": "application layer that's what we're testing we'll remember we're going to set up the production scenario",
    "start": "1428480",
    "end": "1433520"
  },
  {
    "text": "and in web ui is where we have startup.cs and then startup.cs is where we configure our services",
    "start": "1433520",
    "end": "1440000"
  },
  {
    "text": "and we want to reuse that functionality so i'm just going to go ahead and add a reference to web ui and of course web ui has an application",
    "start": "1440000",
    "end": "1446400"
  },
  {
    "text": "a reference to application anyway so now i'll hit control dot",
    "start": "1446400",
    "end": "1454720"
  },
  {
    "text": "and we won't do that yet just wait for it to find its reference",
    "start": "1454720",
    "end": "1460320"
  },
  {
    "text": "check make sure i didn't do anything wrong",
    "start": "1464080",
    "end": "1467840"
  },
  {
    "text": "testing with your",
    "start": "1469840",
    "end": "1473840"
  },
  {
    "text": "yeah that's it okay good so now we've fixed up pretty much all of the references oh we need to install some",
    "start": "1474880",
    "end": "1481039"
  },
  {
    "text": "packages as well so we're going to install fluent assertions mock and respawn",
    "start": "1481039",
    "end": "1486559"
  },
  {
    "text": "why don't we just do that from the command line because it'll be a little bit quicker",
    "start": "1486559",
    "end": "1490880"
  },
  {
    "text": "drag that up here",
    "start": "1492480",
    "end": "1501840"
  },
  {
    "text": "that's slow okay so dot net add oh there's auto complete we'll use",
    "start": "1506960",
    "end": "1512720"
  },
  {
    "text": "that right now order dotnet add package fluent assertions",
    "start": "1512720",
    "end": "1529840"
  },
  {
    "text": "and we want mock",
    "start": "1529840",
    "end": "1534480"
  },
  {
    "text": "moq i should have just pasted this into the cs project that'd be a little bit quicker this is fun too",
    "start": "1540840",
    "end": "1548240"
  },
  {
    "text": "and respawn",
    "start": "1554720",
    "end": "1557840"
  },
  {
    "text": "there we go okay we'll let that disappear this one should appear here and we'll be",
    "start": "1561760",
    "end": "1568320"
  },
  {
    "text": "able to fix up those references",
    "start": "1568320",
    "end": "1571840"
  },
  {
    "text": "yay okay good so back to the code that we're working on so we just need to bring in fluent",
    "start": "1583919",
    "end": "1590000"
  },
  {
    "text": "assertions good",
    "start": "1590000",
    "end": "1594400"
  },
  {
    "text": "almost didn't do it try it again there we go",
    "start": "1597039",
    "end": "1605120"
  },
  {
    "text": "and we'll just clean up those name spaces so that looks good that's what i want to be this is the test that i want to write",
    "start": "1605120",
    "end": "1611679"
  },
  {
    "text": "of course it's not going to run right now i haven't wired up the database i haven't wired up any production services",
    "start": "1611679",
    "end": "1617120"
  },
  {
    "text": "this little helper method doesn't exist and so a little bit of an explanation on this helper method so",
    "start": "1617120",
    "end": "1624159"
  },
  {
    "text": "in the application layer i'm using a tool called mediator and with mediator all of my commands and",
    "start": "1624159",
    "end": "1629919"
  },
  {
    "text": "queries are defined as requests and i can say mediator.send and i can give it a query or a command essentially",
    "start": "1629919",
    "end": "1636080"
  },
  {
    "text": "a request and it'll find the handler that's associated with that request we saw an example of that just now",
    "start": "1636080",
    "end": "1642559"
  },
  {
    "text": "and then it will return the response and so we want to send we want our tests to run through",
    "start": "1642559",
    "end": "1648480"
  },
  {
    "text": "mediator and there's a really important reason for that because of course we could just test the commands and queries directly",
    "start": "1648480",
    "end": "1655520"
  },
  {
    "text": "and we could actually just unit test them we don't need to write subcutaneous tests for them but when we're using mediator i have",
    "start": "1655520",
    "end": "1663120"
  },
  {
    "text": "these behavior pipelines set up so here's an example here's a validation",
    "start": "1663120",
    "end": "1668559"
  },
  {
    "text": "behavior every request that comes through the system runs through mediator and mediator will automatically validate",
    "start": "1668559",
    "end": "1676320"
  },
  {
    "text": "any request so it will just basically say hey if this request has any validators then validate it and if there are any",
    "start": "1676320",
    "end": "1683120"
  },
  {
    "text": "failures then throw a validation exception so we want this to be part of our test",
    "start": "1683120",
    "end": "1688559"
  },
  {
    "text": "we want to test this whole pipeline we want to test as much of the production scenario as possible and so we definitely want to",
    "start": "1688559",
    "end": "1695120"
  },
  {
    "text": "pass it through mediator here's another one is an unhandled exception behavior will automatically",
    "start": "1695120",
    "end": "1700320"
  },
  {
    "text": "log any unhandled exceptions for any requests so we've got a few other examples there",
    "start": "1700320",
    "end": "1705919"
  },
  {
    "text": "so let's go back down here so really what we need to do now is to wire up our production services",
    "start": "1705919",
    "end": "1714000"
  },
  {
    "text": "and to implement this helper method um",
    "start": "1714000",
    "end": "1720720"
  },
  {
    "text": "but we also don't want to be dependent on global data for a couple of reasons um if we were writing our test this way",
    "start": "1720720",
    "end": "1727279"
  },
  {
    "text": "we're assuming that that there is only one list and that there are only six items in that list but this is coming this data",
    "start": "1727279",
    "end": "1733440"
  },
  {
    "text": "is coming from somewhere and typically when you see this that means it's coming from some sort of global location",
    "start": "1733440",
    "end": "1738880"
  },
  {
    "text": "but of course someone's going to need to change that data at some point to suit the needs of another test and of course that's going to break a",
    "start": "1738880",
    "end": "1744720"
  },
  {
    "text": "whole bunch of tests so it would be much better if we could set up the data that we need",
    "start": "1744720",
    "end": "1749840"
  },
  {
    "text": "right here as part of this test and then of course we have this new tool respawn",
    "start": "1749840",
    "end": "1755600"
  },
  {
    "text": "which is going to clean up the database each time so we'll have a clean state for each test",
    "start": "1755600",
    "end": "1761600"
  },
  {
    "text": "so i've got a little snippet we can throw in we'll grab that",
    "start": "1761600",
    "end": "1767840"
  },
  {
    "text": "there it is and so here it is so we're calling add async and we're passing in a to-do list with a",
    "start": "1768480",
    "end": "1773919"
  },
  {
    "text": "bunch of to-do items so a nice little shopping list i'll bring in the name space for that you can see that async hasn't been",
    "start": "1773919",
    "end": "1780640"
  },
  {
    "text": "implemented yet because it's another helper method it's basically going to allow me to pass",
    "start": "1780640",
    "end": "1785919"
  },
  {
    "text": "an object graph and it'll try to add it using entity framework called db context",
    "start": "1785919",
    "end": "1792000"
  },
  {
    "text": "then we can run we can set up our query we can take an action so we can send the query get the result",
    "start": "1792000",
    "end": "1798159"
  },
  {
    "text": "and then assert on that result so let's go to the next steps of getting that test to actually run",
    "start": "1798159",
    "end": "1805440"
  },
  {
    "text": "so what i'll do first is i'm going to create a testing.cs class",
    "start": "1805520",
    "end": "1811919"
  },
  {
    "text": "and this testing.cs class is going to be responsible for wiring up those services and also",
    "start": "1812960",
    "end": "1819200"
  },
  {
    "text": "exposing some helper methods so we've seen ad async and we've seen send async and we're going to add a few more along the way",
    "start": "1819200",
    "end": "1826720"
  },
  {
    "text": "so we're going to use some of n units great mechanisms for",
    "start": "1826720",
    "end": "1834640"
  },
  {
    "text": "managing global test setup so we have the setup fixture bringing",
    "start": "1834640",
    "end": "1840559"
  },
  {
    "text": "that and this one time setup so this is going to run for everything in this",
    "start": "1840559",
    "end": "1845679"
  },
  {
    "text": "namespace which is kind of the root name space for this this project it's going to run this one",
    "start": "1845679",
    "end": "1851360"
  },
  {
    "text": "time and so we can use this to wire up our services set up our database and to set up respawn so we'll",
    "start": "1851360",
    "end": "1858720"
  },
  {
    "text": "leave that for the moment now i also want to create stubs for those helper methods and so i'm going to put them just in",
    "start": "1858720",
    "end": "1866320"
  },
  {
    "text": "here i need to fix this up before that bites me look at that i'm fixing my own arrows",
    "start": "1866320",
    "end": "1872000"
  },
  {
    "text": "tonight this is going to be great that one that one and",
    "start": "1872000",
    "end": "1878159"
  },
  {
    "text": "i'll come back to that because i want to paste this in there we go we'll come back to here pop",
    "start": "1878159",
    "end": "1883840"
  },
  {
    "text": "that one up the top hit control x i don't think we need to",
    "start": "1883840",
    "end": "1889039"
  },
  {
    "text": "think about that okay and control d okay that's looking better",
    "start": "1889039",
    "end": "1897039"
  },
  {
    "text": "clean it up okay so yes we need to bring a mediator",
    "start": "1897039",
    "end": "1903919"
  },
  {
    "text": "and i think that's it so we've got our helper methods ready um",
    "start": "1905200",
    "end": "1911200"
  },
  {
    "text": "what's it complaining about it lacks a lack of weight that's okay um we'll come back to that so we've got the stubs for our two helper methods add",
    "start": "1911200",
    "end": "1917840"
  },
  {
    "text": "async and send async and we've got this one-time setup which we can use to set up our services in our",
    "start": "1917840",
    "end": "1923039"
  },
  {
    "text": "database so if we want to now use these helper methods of course we could say",
    "start": "1923039",
    "end": "1929000"
  },
  {
    "text": "testing.adasync because they're static and we can access them that way but we",
    "start": "1929000",
    "end": "1934480"
  },
  {
    "text": "can actually use the using static director which is really cool",
    "start": "1934480",
    "end": "1940320"
  },
  {
    "text": "and if we say using static testing um then it's actually going to allow us to access those members without specifying",
    "start": "1940320",
    "end": "1947360"
  },
  {
    "text": "testing all throughout here so you can see those squigglies are gone immediately and knows where to find them",
    "start": "1947360",
    "end": "1953360"
  },
  {
    "text": "so we're going to see this appear in all of our test classes and that's going to expose our helper",
    "start": "1953360",
    "end": "1958559"
  },
  {
    "text": "methods so why don't we come back here",
    "start": "1958559",
    "end": "1963760"
  },
  {
    "text": "and start wiring this up um so the first thing that i want to do",
    "start": "1963760",
    "end": "1971039"
  },
  {
    "text": "is wire up configuration i'm going to need a couple of things i'm going to need configuration and that's going to be used to wire up",
    "start": "1971039",
    "end": "1977360"
  },
  {
    "text": "our services so i'm going to just steal from web ui our app.settings and i'll still",
    "start": "1977360",
    "end": "1985840"
  },
  {
    "text": "the whole lot because we'll need something from dev as well i'll just drag that in there",
    "start": "1985840",
    "end": "1992480"
  },
  {
    "text": "okay so i won't need anything from production so delete that from development i want",
    "start": "1992480",
    "end": "1999360"
  },
  {
    "text": "this configuration for identity server it basically says that um",
    "start": "1999360",
    "end": "2004720"
  },
  {
    "text": "it's running in development and we don't need to wire up an ssl or anything like that so i've got that in clipboard and so",
    "start": "2004720",
    "end": "2010880"
  },
  {
    "text": "then we'll go to app settings and i can put that in here",
    "start": "2010880",
    "end": "2018240"
  },
  {
    "text": "and now i just want to change my oh my that should actually not be like that",
    "start": "2018240",
    "end": "2024880"
  },
  {
    "text": "let's change that because i'm going to commit all of this code for you at the end um so that you can see the demo so that one should be our clean",
    "start": "2024880",
    "end": "2032000"
  },
  {
    "text": "testing database and this one is our very much separate clean testing test database",
    "start": "2032000",
    "end": "2038320"
  },
  {
    "text": "starting to get confusing but anyway that's all we need for configuration um one of the features that you that",
    "start": "2038320",
    "end": "2045120"
  },
  {
    "text": "that you'll notice in the clean architecture solution template is out of the box it'll use an in-memory database by default",
    "start": "2045120",
    "end": "2051440"
  },
  {
    "text": "and so i just need to make sure that that's set to false otherwise it won't bother looking at the connection string",
    "start": "2051440",
    "end": "2057440"
  },
  {
    "text": "and that's just so that people who are on windows mac or linux they can get up right up and running without having to",
    "start": "2057440",
    "end": "2062960"
  },
  {
    "text": "set up any kind of infrastructure so it just makes it easier to use the template because maybe you know the template comes with",
    "start": "2062960",
    "end": "2068878"
  },
  {
    "text": "a sql server but you might not like sql server maybe you're going to switch it to um",
    "start": "2068879",
    "end": "2074638"
  },
  {
    "text": "to postgres or or to sql light or whatever whatever your favorite flavor is so",
    "start": "2074639",
    "end": "2080480"
  },
  {
    "text": "we've got our app settings and so we want to now grab that configuration so i've got a snippet for",
    "start": "2080480",
    "end": "2086839"
  },
  {
    "text": "that okay so we can see that we're using the",
    "start": "2086839",
    "end": "2092398"
  },
  {
    "text": "configuration builder to read the app settings file",
    "start": "2092399",
    "end": "2097520"
  },
  {
    "text": "name spaces and then we're creating a private static variable to hold that",
    "start": "2098079",
    "end": "2104079"
  },
  {
    "text": "i guess i'll type that out by hand",
    "start": "2104079",
    "end": "2117839"
  },
  {
    "text": "should be okay okay that's not used at the moment",
    "start": "2118079",
    "end": "2123280"
  },
  {
    "text": "and so that returns our configuration so next we're going to wire up our",
    "start": "2123280",
    "end": "2129599"
  },
  {
    "text": "services so that's pretty easy to do so if we go over services equals new",
    "start": "2129599",
    "end": "2135280"
  },
  {
    "text": "service collection picks up that error i feel like someone's helping me tonight",
    "start": "2135280",
    "end": "2141920"
  },
  {
    "text": "there we go okay and that one",
    "start": "2141920",
    "end": "2148640"
  },
  {
    "text": "and now so now what we want to do is we want to grab startup because remember i said in web ui we have startup and startup",
    "start": "2148640",
    "end": "2156240"
  },
  {
    "text": "has our method configure services and so configure services wire ups all of the all of those services for us",
    "start": "2156240",
    "end": "2162560"
  },
  {
    "text": "and we want to reuse that we don't want to have to write it by hand when i first started out trying to",
    "start": "2162560",
    "end": "2167839"
  },
  {
    "text": "figure out this approach that's exactly what i was doing but fortunately i found a lot of great resources and i'll share i'll share those with you at the end",
    "start": "2167839",
    "end": "2174400"
  },
  {
    "text": "so say startup equals new startup and pass in",
    "start": "2174400",
    "end": "2181119"
  },
  {
    "text": "a configuration it needs configuration i think that's good i'll maybe a",
    "start": "2181119",
    "end": "2186240"
  },
  {
    "text": "reference there we go and now we could just call startup dot",
    "start": "2186240",
    "end": "2191520"
  },
  {
    "text": "configure services and we pass in our services",
    "start": "2191520",
    "end": "2198160"
  },
  {
    "text": "and it will configure them for us that's so good right so simple it's all done no not really if only it",
    "start": "2198160",
    "end": "2204079"
  },
  {
    "text": "could be that easy there is a gotcha if we were to run that now we'd encounter an object reference error and that's because we're",
    "start": "2204079",
    "end": "2210960"
  },
  {
    "text": "trying to register identity services and it actually needs a i web host environment and so we're",
    "start": "2210960",
    "end": "2218079"
  },
  {
    "text": "going to create a mock of iweb host environment so that we can avoid this error altogether",
    "start": "2218079",
    "end": "2223119"
  },
  {
    "text": "and so we'll use mock for that so we need to do that before we call configure services so we might just do it here",
    "start": "2223119",
    "end": "2230800"
  },
  {
    "text": "so let's see services dot add singleton oops singleton and this is",
    "start": "2230800",
    "end": "2237359"
  },
  {
    "text": "going to be our mock and we'll put it bring in mrq dot of i web host",
    "start": "2237359",
    "end": "2244960"
  },
  {
    "text": "environment and basically what i'm doing is i'm just creating kind of a bare bones mock",
    "start": "2244960",
    "end": "2250400"
  },
  {
    "text": "that will suit just the needs that identity has so that we can uh avoid this issue",
    "start": "2250400",
    "end": "2256560"
  },
  {
    "text": "altogether and it took me a little while to figure this out you know i had to actually um troll through the asp.net core source",
    "start": "2256560",
    "end": "2262960"
  },
  {
    "text": "code um to figure this out but i've been doing that more and more lately so it's been being pretty useful",
    "start": "2262960",
    "end": "2269760"
  },
  {
    "text": "environment that's the great thing about it being open source right we can jump in and we can just see how it works",
    "start": "2269760",
    "end": "2276880"
  },
  {
    "text": "so the environment's going to be development you probably could grab that elsewhere but anyway i'll bring in that name first because",
    "start": "2277280",
    "end": "2282800"
  },
  {
    "text": "that's quickly starting to annoy me and then we'll say w dot application name",
    "start": "2282800",
    "end": "2288480"
  },
  {
    "text": "and that's just going to be simply clean testing dot web ui",
    "start": "2288480",
    "end": "2294160"
  },
  {
    "text": "i think that's all we need okay good so now when we configure our",
    "start": "2294160",
    "end": "2301040"
  },
  {
    "text": "services and it tries to wire up identity it's going to be able to find our web host environment and and and",
    "start": "2301040",
    "end": "2307040"
  },
  {
    "text": "wire that up for us so now when when our when our um",
    "start": "2307040",
    "end": "2312800"
  },
  {
    "text": "requests run through asp.net web api they're kind of running in a small scope they're running in a",
    "start": "2312800",
    "end": "2318880"
  },
  {
    "text": "request code and so we kind of want to replicate that here so we're going to create a scope factory",
    "start": "2318880",
    "end": "2325520"
  },
  {
    "text": "that will share as a services dot field service provider",
    "start": "2325520",
    "end": "2332079"
  },
  {
    "text": "dot get service oops i service scope",
    "start": "2332079",
    "end": "2339119"
  },
  {
    "text": "factory looking good um hopefully and hopefully i can get",
    "start": "2339119",
    "end": "2344880"
  },
  {
    "text": "some help there yes peak and we'll just make that static",
    "start": "2344880",
    "end": "2352078"
  },
  {
    "text": "i would i'd like to use resharper but i don't think my surface book can take anymore it's time for a new laptop",
    "start": "2353599",
    "end": "2360480"
  },
  {
    "text": "all right uh so we've got that in place and so now let's flesh out our helper methods um so",
    "start": "2361200",
    "end": "2367359"
  },
  {
    "text": "we'll start with a snippet for this one save a little bit of time",
    "start": "2367359",
    "end": "2372560"
  },
  {
    "text": "okay so you can see here we're using our scope factory to create a scope and then using that we're able to",
    "start": "2373839",
    "end": "2379839"
  },
  {
    "text": "actually just grab the db context so we say scope dot service provider",
    "start": "2379839",
    "end": "2386400"
  },
  {
    "text": "which is our i service provider dot get service application db context",
    "start": "2386400",
    "end": "2391599"
  },
  {
    "text": "and we're able to do that because we wire all of our services by calling configure services",
    "start": "2391599",
    "end": "2396960"
  },
  {
    "text": "and if we look at configure services it had some extension methods to wire up",
    "start": "2396960",
    "end": "2402240"
  },
  {
    "text": "infrastructure and inside of infrastructure this is where we wired up our database",
    "start": "2402240",
    "end": "2409599"
  },
  {
    "text": "okay so all of this is happening now for us in our tests as part of that one-time setup that",
    "start": "2409599",
    "end": "2415200"
  },
  {
    "text": "we're using and yeah this was a big reason that i went with n-unit i just really like how easy it was to create integration",
    "start": "2415200",
    "end": "2421520"
  },
  {
    "text": "tests and how our needs for managing global shared state were met by this one-time setup",
    "start": "2421520",
    "end": "2427839"
  },
  {
    "text": "you can do it in the other frameworks but it's not quite so easy let's see so we've got that one in place",
    "start": "2427839",
    "end": "2433440"
  },
  {
    "text": "now we want to do our send async and this is similar but we want to get mediator this time",
    "start": "2433440",
    "end": "2439680"
  },
  {
    "text": "because it's going to be responsible for sending our requests our commands or our queries so we'll say mediator equals scope dot",
    "start": "2439680",
    "end": "2447599"
  },
  {
    "text": "service provider dot get service i mediated or just like that",
    "start": "2447599",
    "end": "2455280"
  },
  {
    "text": "and then we can just say await mediator dot send and our request which we passed in here",
    "start": "2455280",
    "end": "2464079"
  },
  {
    "text": "we want to return the result though and that's defined by kind of the type",
    "start": "2464079",
    "end": "2470560"
  },
  {
    "text": "of request that we made so we have a i request of type t response and so if we're looking at our back at our get to do's",
    "start": "2470560",
    "end": "2478839"
  },
  {
    "text": "query you can see that it is an eye request of",
    "start": "2478839",
    "end": "2484079"
  },
  {
    "text": "type today's view model so we could pass in a get to this query which would return",
    "start": "2484079",
    "end": "2489280"
  },
  {
    "text": "uh today's view model and that's exactly what we're going to do so everything in place",
    "start": "2489280",
    "end": "2496480"
  },
  {
    "text": "i think we can run that test",
    "start": "2496480",
    "end": "2500319"
  },
  {
    "text": "there's a little bit of setup but after that's done uh we're good to go get to do's tests",
    "start": "2501599",
    "end": "2511359"
  },
  {
    "text": "i want to call it get to do's queries tests anyway it doesn't matter let's run it",
    "start": "2511920",
    "end": "2518079"
  },
  {
    "text": "control rt so this one will take about two seconds to run maybe a bit longer so i assume",
    "start": "2518079",
    "end": "2523839"
  },
  {
    "text": "that's going to feel like 20 minutes so we'll just have to be patient",
    "start": "2523839",
    "end": "2529119"
  },
  {
    "text": "let's see it fails else i have to debug it",
    "start": "2530880",
    "end": "2551838"
  },
  {
    "text": "very patient",
    "start": "2554880",
    "end": "2557599"
  },
  {
    "text": "any questions",
    "start": "2561440",
    "end": "2565838"
  },
  {
    "text": "that's okay we'll have time for questions um at the end hopefully and uh also we'll have time for",
    "start": "2571680",
    "end": "2577440"
  },
  {
    "text": "questions in the slack channel afterwards i'll be sticking around",
    "start": "2577440",
    "end": "2582640"
  },
  {
    "text": "here we go that took a long time",
    "start": "2583119",
    "end": "2593838"
  },
  {
    "text": "okay that took 15.9 seconds so obviously the load on my system um is is more than",
    "start": "2598160",
    "end": "2605040"
  },
  {
    "text": "i expected with with the live streaming but that's okay we'll still be able to do this quite easily",
    "start": "2605040",
    "end": "2610800"
  },
  {
    "text": "so this failed but it failed for any reason we were gonna get there eventually um",
    "start": "2610800",
    "end": "2619440"
  },
  {
    "text": "just remember to keep on mute if if you don't mind so what the reason that it failed is it",
    "start": "2619440",
    "end": "2625040"
  },
  {
    "text": "expected result.list to contain one items but it found two and this is coming from fluent",
    "start": "2625040",
    "end": "2630960"
  },
  {
    "text": "assertions you know we're seeing those really good test results and those error message and we're seeing",
    "start": "2630960",
    "end": "2636200"
  },
  {
    "text": "result.lists which was part of the actual variable name so it's really easy to",
    "start": "2636200",
    "end": "2641359"
  },
  {
    "text": "understand what happened so essentially what's happening is that there was some data already in the database",
    "start": "2641359",
    "end": "2646720"
  },
  {
    "text": "and when we ran this test it failed and um and it was because there was just two",
    "start": "2646720",
    "end": "2651839"
  },
  {
    "text": "two items in the database and that's simply because we're not cleaning up the database yet so now we need to start using respawn so",
    "start": "2651839",
    "end": "2658000"
  },
  {
    "text": "that we can clean up the database and the way we're gonna do that is we're going to reset the database back to a clean state",
    "start": "2658000",
    "end": "2663920"
  },
  {
    "text": "before each test runs we could do it after each test runs but that can be kind of problematic because what if the test fails to",
    "start": "2663920",
    "end": "2670160"
  },
  {
    "text": "complete and it doesn't do its cleanup so it's better just to do it before each test runs so let's do that now",
    "start": "2670160",
    "end": "2677119"
  },
  {
    "text": "so back to testing dot cs",
    "start": "2677119",
    "end": "2683359"
  },
  {
    "text": "and here we go so we're going to create a new checkpoint and obviously that's going to",
    "start": "2683359",
    "end": "2689520"
  },
  {
    "text": "be a field we've got a new checkpoint and that comes from respawn so we'll bring in the namespace for that",
    "start": "2689520",
    "end": "2696400"
  },
  {
    "text": "and create it just like that and if we don't have any you know configuration to provide um then that's fine but as i",
    "start": "2696400",
    "end": "2702079"
  },
  {
    "text": "mentioned earlier we're going to need to exclude or ignore the migrations history",
    "start": "2702079",
    "end": "2708319"
  },
  {
    "text": "table because we don't want it to wipe that so this is expecting an array",
    "start": "2708319",
    "end": "2713760"
  },
  {
    "text": "and the table name is ef migration history just like that",
    "start": "2713760",
    "end": "2721119"
  },
  {
    "text": "good and um that's pretty much it i'll do one other",
    "start": "2721119",
    "end": "2726880"
  },
  {
    "text": "thing which is just a little bit nicer we'll make sure that the database exists",
    "start": "2726880",
    "end": "2732400"
  },
  {
    "text": "um and that it's up to date with the latest migration so that we don't have to deal with that in the future and you don't have to go",
    "start": "2732400",
    "end": "2738480"
  },
  {
    "text": "and create it before you run the test because that could get pretty annoying so we'll just call that method ensure database",
    "start": "2738480",
    "end": "2744480"
  },
  {
    "text": "and we'll just pop that down here so ensure database i should put in a few more",
    "start": "2744480",
    "end": "2752319"
  },
  {
    "text": "things there okay now we're still",
    "start": "2752319",
    "end": "2759599"
  },
  {
    "text": "steal that and we'll steal that as well okay and all you have to do is say",
    "start": "2759599",
    "end": "2766880"
  },
  {
    "text": "context dot database database dot migrate i saw a question",
    "start": "2766880",
    "end": "2774880"
  },
  {
    "text": "come up there um it's an interesting question and it was one of the reasons that i went with end unit so these tests are",
    "start": "2774880",
    "end": "2780160"
  },
  {
    "text": "not running in parallel they're going to run synchronously because yes otherwise we'd have trouble",
    "start": "2780160",
    "end": "2785520"
  },
  {
    "text": "maintaining the database and side effects would be a plenty so yeah we're running them",
    "start": "2785520",
    "end": "2792880"
  },
  {
    "text": "synchronously",
    "start": "2792880",
    "end": "2795599"
  },
  {
    "text": "okay so database.migrate and i think that's everything now we need a method which is going to",
    "start": "2799359",
    "end": "2807599"
  },
  {
    "text": "use this checkpoint field to reset the state so we'll create a public static",
    "start": "2807599",
    "end": "2816880"
  },
  {
    "text": "async task reset state and we'll say a weight",
    "start": "2816880",
    "end": "2823520"
  },
  {
    "text": "check point dot",
    "start": "2823520",
    "end": "2828319"
  },
  {
    "text": "um so so why not use transactions um so i found this approach just to be a little bit a little bit cleaner a little bit easier",
    "start": "2829520",
    "end": "2836160"
  },
  {
    "text": "to manage you could definitely you could definitely use transactions but i wanted to give this approach a try",
    "start": "2836160",
    "end": "2842640"
  },
  {
    "text": "and it's been working nicely for me so the other question i saw pop up which was cool i like how that's working",
    "start": "2842640",
    "end": "2847680"
  },
  {
    "text": "um is n unit only synchronous no n unit can also run tests asynchronously",
    "start": "2847680",
    "end": "2854160"
  },
  {
    "text": "in parallel but its default option is to run test synchronously and let's in contrast to x unit where",
    "start": "2854160",
    "end": "2860800"
  },
  {
    "text": "it's default option is to run tests asynchronously and and of course x unit also supports",
    "start": "2860800",
    "end": "2867359"
  },
  {
    "text": "running tests synchronously although i had a lot of trouble getting that to work with xunit because",
    "start": "2867359",
    "end": "2872480"
  },
  {
    "text": "it's a supported feature but i think there's some difficulties with x unit and maybe visual studio 2019",
    "start": "2872480",
    "end": "2878480"
  },
  {
    "text": "there's some issues on github and in forums and um and",
    "start": "2878480",
    "end": "2885440"
  },
  {
    "text": "uh yeah it hasn't it doesn't seem to be solved yet so hopefully they'll solve it soon anyway i'll um i'll get this set up and",
    "start": "2885440",
    "end": "2893359"
  },
  {
    "text": "we'll continue on a little bit but i'll try to come back to some of these questions uh as we go so we do have a lot to cover",
    "start": "2893359",
    "end": "2900880"
  },
  {
    "text": "calculation animation dot get connection string",
    "start": "2900880",
    "end": "2907920"
  },
  {
    "text": "default connection okay so that's going to reset our",
    "start": "2907920",
    "end": "2913359"
  },
  {
    "text": "database and it's going to reset it based on the default connection which is the same connection string we're using to wire up our db context",
    "start": "2913359",
    "end": "2920400"
  },
  {
    "text": "so now we need a test space and we're going to use the test base to contain our setup logic for our tests",
    "start": "2920400",
    "end": "2927040"
  },
  {
    "text": "so these are we're going to we're going to run this logic before we run our tests and so to do that we'll",
    "start": "2927040",
    "end": "2933440"
  },
  {
    "text": "call setup from",
    "start": "2933440",
    "end": "2938640"
  },
  {
    "text": "from n unit there notice and public async task",
    "start": "2939839",
    "end": "2947839"
  },
  {
    "text": "setup and we'll go await reset state which doesn't exist but of",
    "start": "2947839",
    "end": "2953760"
  },
  {
    "text": "course we can do that because we're going to use the using static director so using static testing and that will",
    "start": "2953760",
    "end": "2960400"
  },
  {
    "text": "work clean up the namespaces so that's looking good",
    "start": "2960400",
    "end": "2965440"
  },
  {
    "text": "so now to use that all we have to do is actually get to these test to inherit from that",
    "start": "2965440",
    "end": "2972558"
  },
  {
    "text": "and so that will run the setup then it will run the test and if we had specified any kind of cleanup in the in",
    "start": "2973440",
    "end": "2980400"
  },
  {
    "text": "the test place it would have run that too now i'm not going to run that test because it's going to it's going to be",
    "start": "2980400",
    "end": "2985839"
  },
  {
    "text": "a little bit slow what i'll do is i'll complete all of the tests and we'll run them at the end so hopefully we can um",
    "start": "2985839",
    "end": "2991280"
  },
  {
    "text": "we can see them complete successfully but i don't want it to run for 15.9 seconds again because that was um",
    "start": "2991280",
    "end": "2998480"
  },
  {
    "text": "felt like um 60 seconds so okay so what i want to do now is try",
    "start": "2998480",
    "end": "3005119"
  },
  {
    "text": "creating some tests for a command um and i can see we've got about 10 minutes left so i'll",
    "start": "3005119",
    "end": "3010800"
  },
  {
    "text": "speed it up a little bit so i'm going to use my snippet so we can create it with the",
    "start": "3010800",
    "end": "3016960"
  },
  {
    "text": "folders and the files like this",
    "start": "3016960",
    "end": "3023200"
  },
  {
    "text": "okay so we're going to create it in to-do list commands create to do list tests",
    "start": "3023839",
    "end": "3030559"
  },
  {
    "text": "and i will grab the stubs",
    "start": "3030559",
    "end": "3041359"
  },
  {
    "text": "good and bring in the name spaces and we'll bring in our using static",
    "start": "3041359",
    "end": "3050000"
  },
  {
    "text": "testing good and so for the first test require",
    "start": "3050000",
    "end": "3055520"
  },
  {
    "text": "minimum fields we're going to check that our validation is working correctly and remember that's coming from a",
    "start": "3055520",
    "end": "3061200"
  },
  {
    "text": "pipeline behavior um and so that behavior is going to run",
    "start": "3061200",
    "end": "3067280"
  },
  {
    "text": "before the request runs it'll validate any request that comes through the system",
    "start": "3067280",
    "end": "3073920"
  },
  {
    "text": "so i'll grab that",
    "start": "3076000",
    "end": "3082640"
  },
  {
    "text": "and we'll bring in reference to fluent assertions and the create to do list command",
    "start": "3082640",
    "end": "3090640"
  },
  {
    "text": "and the validation exception now that we have to be careful to get the validation exception from the clean testing",
    "start": "3090640",
    "end": "3095760"
  },
  {
    "text": "application common exceptions because that's a custom application exception i wrote rather than the one",
    "start": "3095760",
    "end": "3100880"
  },
  {
    "text": "that's in system dot component model dot data annotations okay so what's happening here is we're",
    "start": "3100880",
    "end": "3107680"
  },
  {
    "text": "creating a new instance of the command but we're not filling out one of the required fields which is",
    "start": "3107680",
    "end": "3113359"
  },
  {
    "text": "title and that's much required because we're using fluent validation",
    "start": "3113359",
    "end": "3118559"
  },
  {
    "text": "and it's specified that it must not be empty",
    "start": "3118559",
    "end": "3124720"
  },
  {
    "text": "back a little bit then we're using fluent actions we're going to say in invoking send async the command it",
    "start": "3124720",
    "end": "3132400"
  },
  {
    "text": "should throw a validation exception so this is a good example but we really need to flush this test out a little bit",
    "start": "3132400",
    "end": "3138240"
  },
  {
    "text": "more it says we should require minimum fields we probably need to get a little bit more specific",
    "start": "3138240",
    "end": "3144079"
  },
  {
    "text": "about exactly what validation exception was thrown and what errors were contained in that",
    "start": "3144079",
    "end": "3149119"
  },
  {
    "text": "validation exception which is contained in this dictionary so there's an errors dictionary as part of this class that",
    "start": "3149119",
    "end": "3155599"
  },
  {
    "text": "you can interrogate and we're not going to do it for this test but we will do it for one that's coming up",
    "start": "3155599",
    "end": "3161200"
  },
  {
    "text": "okay so that that test is complete again we won't run up we'll wait we'll wait till the end to have that that fun",
    "start": "3161200",
    "end": "3166800"
  },
  {
    "text": "so now i want to write a test for requiring a unique title and this is another part of the",
    "start": "3166800",
    "end": "3174000"
  },
  {
    "text": "validation that's happening for this request we'll basically check to see if that title already exists or not",
    "start": "3174000",
    "end": "3180559"
  },
  {
    "text": "and if the title does exist then it will throw a validation exception so we do that by setting up our data in",
    "start": "3180559",
    "end": "3186800"
  },
  {
    "text": "the database first we create a new to-do list with the title shopping and that happens immediately using send",
    "start": "3186800",
    "end": "3192880"
  },
  {
    "text": "async then we create the to-do list command which will",
    "start": "3192880",
    "end": "3198079"
  },
  {
    "text": "we will use to then as part of fluentaction.invoking send that request and assert that it",
    "start": "3198079",
    "end": "3203520"
  },
  {
    "text": "should throw a validation exception so again we should dig a little bit deeper there and we will in an upcoming",
    "start": "3203520",
    "end": "3209760"
  },
  {
    "text": "example okay and finally for the",
    "start": "3209760",
    "end": "3215200"
  },
  {
    "text": "create to-do list command this last test should create to-do list we're going to do a little bit more",
    "start": "3215200",
    "end": "3220559"
  },
  {
    "text": "remember that we're using asp.net core identity in this system well these these to-do",
    "start": "3220559",
    "end": "3226400"
  },
  {
    "text": "lists are created um with the user id the currently logged in user",
    "start": "3226400",
    "end": "3231520"
  },
  {
    "text": "and they're modified with the user id as well so if we were to run an update to do list command and so i want to",
    "start": "3231520",
    "end": "3238400"
  },
  {
    "text": "test that as well so you can see we're going to introduce a couple of new um helper methods we're going to run as a",
    "start": "3238400",
    "end": "3244720"
  },
  {
    "text": "default user async and that's basically going to create a user in the database and give us a user id and it's going to use",
    "start": "3244720",
    "end": "3250800"
  },
  {
    "text": "it's going to do that using asp.net core identity then we're going to actually",
    "start": "3250800",
    "end": "3257760"
  },
  {
    "text": "create this new list which is going to be called tasks we'll get the id um and then we'll find",
    "start": "3257760",
    "end": "3265040"
  },
  {
    "text": "that list in the database so we'll introduce a new method called find async will allow us to",
    "start": "3265040",
    "end": "3270559"
  },
  {
    "text": "grab an entity from the database and then we'll run our assertions against against that that list",
    "start": "3270559",
    "end": "3277839"
  },
  {
    "text": "so the first thing we need to do is implement these two methods so we'll start by implementing find",
    "start": "3277839",
    "end": "3284079"
  },
  {
    "text": "async and of course we're going to do that in our testing helper class we'll do it just",
    "start": "3284079",
    "end": "3289359"
  },
  {
    "text": "after actually we'll do it just before add async",
    "start": "3289359",
    "end": "3294640"
  },
  {
    "text": "okay so you can see it's similar we grab the db context and then we call find async based on the",
    "start": "3295359",
    "end": "3301280"
  },
  {
    "text": "entity that was specified because it's generic and passing in the id and so that'll return it if it exists",
    "start": "3301280",
    "end": "3307280"
  },
  {
    "text": "otherwise it'll return null so the other one that we wanted to",
    "start": "3307280",
    "end": "3312319"
  },
  {
    "text": "implement was we need to bring in that noise first",
    "start": "3312319",
    "end": "3317760"
  },
  {
    "text": "and we need to run as default user async so let's see how we can do that so",
    "start": "3318160",
    "end": "3326400"
  },
  {
    "text": "so this this method's going to allow us to work with a valid user id and so i'll bring in some",
    "start": "3326400",
    "end": "3333839"
  },
  {
    "text": "snippets and we'll have a look at those we will add these after the database",
    "start": "3333839",
    "end": "3341760"
  },
  {
    "text": "stuff maybe maybe just here okay so you can see there's two methods",
    "start": "3341760",
    "end": "3348000"
  },
  {
    "text": "we're using runner's default user async and all that does is just specify um",
    "start": "3348000",
    "end": "3353359"
  },
  {
    "text": "some dummy data for a user to create so there's a a username and a password and so then in",
    "start": "3353359",
    "end": "3361359"
  },
  {
    "text": "run as user async it takes that username and password grabs the scope and it grabs the user",
    "start": "3361359",
    "end": "3366559"
  },
  {
    "text": "manager from asp.net core identity and the application user is how our",
    "start": "3366559",
    "end": "3371599"
  },
  {
    "text": "users are defined it's the identity user so now you can see we're creating a new",
    "start": "3371599",
    "end": "3377680"
  },
  {
    "text": "instance of the application user using the username as both the username and the email",
    "start": "3377680",
    "end": "3384000"
  },
  {
    "text": "we're making that request to user manager so we're creating that user specifying the application user and the",
    "start": "3384000",
    "end": "3389680"
  },
  {
    "text": "password and that if if successful will return us a new user id",
    "start": "3389680",
    "end": "3395440"
  },
  {
    "text": "and so we're going to store that as a static field so that we can access it as needed",
    "start": "3395440",
    "end": "3402720"
  },
  {
    "text": "now remember that we're also resetting the start state of the database before each test",
    "start": "3403520",
    "end": "3408720"
  },
  {
    "text": "and so that means that this user is going to be cleaned up before each test so we also need to when we reset the",
    "start": "3408720",
    "end": "3415040"
  },
  {
    "text": "state of the database just set that to null so we'll do that here",
    "start": "3415040",
    "end": "3421040"
  },
  {
    "text": "there we go i think that is everything oh yes",
    "start": "3424799",
    "end": "3430880"
  },
  {
    "text": "there's one more thing we need to do so we're using an i current user service to",
    "start": "3430880",
    "end": "3436000"
  },
  {
    "text": "get the current user and that's um that exists in the application layer and it's used by any request that would",
    "start": "3436000",
    "end": "3441920"
  },
  {
    "text": "like to get the user id of the current user the current implementation for that is in web ui",
    "start": "3441920",
    "end": "3447839"
  },
  {
    "text": "um and it requires a valid http context but we're not doing asp.net core",
    "start": "3447839",
    "end": "3453119"
  },
  {
    "text": "integration testing so we're going to create a mock for the icurrent user service instead",
    "start": "3453119",
    "end": "3458160"
  },
  {
    "text": "and that mock is just going to return the current user id um if it's if it's set to a value and and",
    "start": "3458160",
    "end": "3464880"
  },
  {
    "text": "and um you know whether whether it's set to a value on or not really um so the way we have to do that is we have",
    "start": "3464880",
    "end": "3470720"
  },
  {
    "text": "to actually remove the existing registration of our current user service and then add a new registration for",
    "start": "3470720",
    "end": "3476640"
  },
  {
    "text": "testing and we'll use mock to create that registration just as we did with the iweb host",
    "start": "3476640",
    "end": "3482960"
  },
  {
    "text": "environment so i'm going to pop that in right here",
    "start": "3482960",
    "end": "3488400"
  },
  {
    "text": "uh no i'm not that would be a bad place to put it we need to do it after configure services because that's where",
    "start": "3488400",
    "end": "3493520"
  },
  {
    "text": "the um web ui version is going to be registered so we replace the service registration",
    "start": "3493520",
    "end": "3499200"
  },
  {
    "text": "for the i current user service in link and we",
    "start": "3499200",
    "end": "3504559"
  },
  {
    "text": "we do that by first finding the current user service descriptor",
    "start": "3504559",
    "end": "3509839"
  },
  {
    "text": "we can then remove it from the from the services collection and then we can register a new one as i",
    "start": "3510400",
    "end": "3516400"
  },
  {
    "text": "current user service and it sets it up so that user id will be equal to static current user id",
    "start": "3516400",
    "end": "3523920"
  },
  {
    "text": "okay so that's it with that in place those tests would all run and um i",
    "start": "3524319",
    "end": "3532079"
  },
  {
    "text": "should say you know the tests are running slow tonight um but that's just because of the live stream now i've got about 18",
    "start": "3532079",
    "end": "3538960"
  },
  {
    "text": "tests on the clean architecture template that is more added all the time and they run in about 1.8 seconds so about 100 milliseconds",
    "start": "3538960",
    "end": "3546000"
  },
  {
    "text": "per test which is pretty amazing considering we're wiring up all of these services we're programming against a",
    "start": "3546000",
    "end": "3551280"
  },
  {
    "text": "live database so it's pretty great so that is done so i wanted to create uh one more set of",
    "start": "3551280",
    "end": "3558480"
  },
  {
    "text": "tests just the update to do list tests um and then i think we'll we'll run those",
    "start": "3558480",
    "end": "3564880"
  },
  {
    "text": "tests um and and and provide a summary so the update to do list tests we can",
    "start": "3564880",
    "end": "3572079"
  },
  {
    "text": "put in um this here update to do this test.cs",
    "start": "3572079",
    "end": "3578319"
  },
  {
    "text": "and i've got a snippet so that we don't have to jump through hoops now this is this is um has some similar",
    "start": "3578319",
    "end": "3584720"
  },
  {
    "text": "logic to what we've covered in the create to-do list but of course it goes into a",
    "start": "3584720",
    "end": "3590160"
  },
  {
    "text": "little bit of detail and showing hey we need to set these things up ahead of time because we're not going to be dealing with this global state",
    "start": "3590160",
    "end": "3596640"
  },
  {
    "text": "so i'll paste that in and we'll bring in the name spaces here's a handy hint if you're not using",
    "start": "3596640",
    "end": "3602240"
  },
  {
    "text": "resharper if i hit ctrl a ctrl x to cut it ctrl v to paste it",
    "start": "3602240",
    "end": "3607280"
  },
  {
    "text": "jumping through hoops right then i can press alt enter and add missing using it's hard to see",
    "start": "3607280",
    "end": "3613119"
  },
  {
    "text": "it's down the bottom here it'll go ahead and add all those usings in for me just kind of nice",
    "start": "3613119",
    "end": "3619599"
  },
  {
    "text": "there we go we'll clean that up so that'll be ready to run uh so that's simple so you know",
    "start": "3619599",
    "end": "3626559"
  },
  {
    "text": "we're seeing these tests now they're easy to create they're going to be easy to",
    "start": "3626559",
    "end": "3633040"
  },
  {
    "text": "maintain and they're also easy to understand so they're going to provide system documentation for the for the users who come along and they're",
    "start": "3633040",
    "end": "3639599"
  },
  {
    "text": "testing a whole lot and in testing that much it's going to give us great confidence that we can",
    "start": "3639599",
    "end": "3645440"
  },
  {
    "text": "deploy these changes to production so what i'm going to do is i'll run all",
    "start": "3645440",
    "end": "3650880"
  },
  {
    "text": "of these tests uh and we'll we'll do a little bit of a wrap up and we'll come back and just see",
    "start": "3650880",
    "end": "3656160"
  },
  {
    "text": "if they pass so hopefully hopefully you get to see that now i'm also going to check in these changes",
    "start": "3656160",
    "end": "3661280"
  },
  {
    "text": "so you'll be able to access the sample repo as soon as this presentation is finished",
    "start": "3661280",
    "end": "3667520"
  },
  {
    "text": "so wrapping up resources so first and foremost there's the clean testing demo",
    "start": "3667599",
    "end": "3672799"
  },
  {
    "text": "code so this is where i'm going to post the demonstration code the repo is already there it's in its",
    "start": "3672799",
    "end": "3677920"
  },
  {
    "text": "initial state where we started tonight and i'll do a commit that's at the end of this presentation",
    "start": "3677920",
    "end": "3683280"
  },
  {
    "text": "there's also the clean architecture solution template and so if you wanted a even more test",
    "start": "3683280",
    "end": "3689040"
  },
  {
    "text": "then you can just go net new ca solution from the command line and that will bring those up for you now the next two",
    "start": "3689040",
    "end": "3696079"
  },
  {
    "text": "resources contoso university by jimmy bogart and fixie demo by patrick loy",
    "start": "3696079",
    "end": "3701520"
  },
  {
    "text": "were a major source of inspiration for this approach now you have three really cool resources",
    "start": "3701520",
    "end": "3707200"
  },
  {
    "text": "you've got the clean architecture solution template which is using n-unit you've got the contoso university sample",
    "start": "3707200",
    "end": "3713359"
  },
  {
    "text": "which is using x unit and you've got the fixie demo which of course is using fixy and they all have something a little bit",
    "start": "3713359",
    "end": "3720480"
  },
  {
    "text": "different in them so there's good things to learn so i recommend you check them all out but um the other point to make is that you",
    "start": "3720480",
    "end": "3727039"
  },
  {
    "text": "know it doesn't matter which framework you're using what your preferred framework is now you have a good example of any of",
    "start": "3727039",
    "end": "3733760"
  },
  {
    "text": "these approaches so hopefully you'll be able to get started",
    "start": "3733760",
    "end": "3738799"
  },
  {
    "text": "so let's do a quick summary so tonight i've shown you clean tests that are simple to create",
    "start": "3738799",
    "end": "3743920"
  },
  {
    "text": "maintain and understand these tests were configured to run against production services against a real database",
    "start": "3743920",
    "end": "3750319"
  },
  {
    "text": "and helped to pro and helped with verification testing tools such as mock",
    "start": "3750319",
    "end": "3755359"
  },
  {
    "text": "and fluent assertions improved our simplicity and productivity and we used respawn to reset the",
    "start": "3755359",
    "end": "3760720"
  },
  {
    "text": "database state back to a clean state before each test was run and it gave us a knowing a known",
    "start": "3760720",
    "end": "3766240"
  },
  {
    "text": "starting point for each test now this approach results in a better",
    "start": "3766240",
    "end": "3771599"
  },
  {
    "text": "test coverage and higher confidence so before we cut re finish up there let's just see if those",
    "start": "3771599",
    "end": "3777760"
  },
  {
    "text": "tests all succeeded that's good i'm very glad about that so yeah we've got seven passing tests it took about 8.5 seconds which is",
    "start": "3777760",
    "end": "3784640"
  },
  {
    "text": "which is super slow um but that's okay when you run it for yourself you're going to see that these tests run",
    "start": "3784640",
    "end": "3789760"
  },
  {
    "text": "really quick so we're no longer constrained by that pyramid we can write with modern technologies",
    "start": "3789760",
    "end": "3795440"
  },
  {
    "text": "modern tools modern approach we can write these tests that run fast and give us super high confidence",
    "start": "3795440",
    "end": "3801039"
  },
  {
    "text": "so the confidence to deploy your system to production knowing that it will behave as expected that's it for me",
    "start": "3801039",
    "end": "3808160"
  },
  {
    "text": "stay safe and keep testing thank you so i'll be heading over to the slack",
    "start": "3808160",
    "end": "3814160"
  },
  {
    "text": "room now and we can we can continue that conversation",
    "start": "3814160",
    "end": "3820880"
  }
]