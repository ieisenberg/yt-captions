[
  {
    "text": "it's 11:40 I guess we can get started hello and welcome to clean architecture",
    "start": "60",
    "end": "6330"
  },
  {
    "text": "with ASP net cord 2 - I'm Jason Taylor and I'm an SSW solution architect you",
    "start": "6330",
    "end": "12809"
  },
  {
    "text": "can find me on Twitter at Jason G tau or on my blog Korean flow net I try to blog",
    "start": "12809",
    "end": "18690"
  },
  {
    "text": "once a week so the contents nice and fresh a last blog at NDC Sydney 2018 in",
    "start": "18690",
    "end": "25019"
  },
  {
    "text": "September so not quite reaching that but I'm going to improve someone from my",
    "start": "25019",
    "end": "30720"
  },
  {
    "text": "companies came to me last week and said would it be ok if you blog once a month and I said yeah that's that's fine I try",
    "start": "30720",
    "end": "36750"
  },
  {
    "text": "to blog once a week so I think I can achieve once a month I've been a developer now for 19 years and I've",
    "start": "36750",
    "end": "44010"
  },
  {
    "text": "learned the most important principle is kiss or keep it simple stupid and this principle states that systems should be",
    "start": "44010",
    "end": "50489"
  },
  {
    "text": "kept simple rather than made more complicated and today I'm going to show you the simplest approach to building",
    "start": "50489",
    "end": "56699"
  },
  {
    "text": "enterprise applications with clean architecture and this is the simplest approach because what I build is not",
    "start": "56699",
    "end": "63300"
  },
  {
    "text": "simple or trivial I build medium to large to complex applications so you",
    "start": "63300",
    "end": "68369"
  },
  {
    "text": "could definitely do things differently in something that's simple and trivial but that's not what this is about",
    "start": "68369",
    "end": "73619"
  },
  {
    "text": "this is about enterprise application development let's get started with clean",
    "start": "73619",
    "end": "79710"
  },
  {
    "text": "architecture the domain and the application layer are at the center of the design this is known as the core of",
    "start": "79710",
    "end": "86820"
  },
  {
    "text": "the application now in the domain we have enterprise logic and types and in",
    "start": "86820",
    "end": "92850"
  },
  {
    "text": "the application layer we have business logic and types the difference being that the enterprise logic could be",
    "start": "92850",
    "end": "98759"
  },
  {
    "text": "shared across multiple systems whereas the business logic will exist only in this system now rather than have core",
    "start": "98759",
    "end": "106680"
  },
  {
    "text": "depending on concerns such as data access and persistence we invert these dependencies so infrastructure",
    "start": "106680",
    "end": "114860"
  },
  {
    "text": "persistence and presentation all depend on core this is achieved by adding",
    "start": "114860",
    "end": "120360"
  },
  {
    "text": "abstractions or interfaces inside of core which are then implemented by layers outside of core a good example is",
    "start": "120360",
    "end": "128879"
  },
  {
    "text": "the repository pattern so if we wanted to implement the repository pattern in this design then an irepository inside of core which is",
    "start": "128879",
    "end": "136230"
  },
  {
    "text": "implemented then maybe as EF core or  in the persistence layer now with",
    "start": "136230",
    "end": "145230"
  },
  {
    "text": "with this design all dependencies flow inwards and core has no dependencies so",
    "start": "145230",
    "end": "151850"
  },
  {
    "text": "infrastructure of persistence and presentation depend on core but not on one another and this results in an",
    "start": "151850",
    "end": "158880"
  },
  {
    "text": "architecture and design that's independent of frameworks core doesn't need any frameworks to exist it's",
    "start": "158880",
    "end": "165360"
  },
  {
    "text": "testable we can test the logic in that inside of core without a UI without a",
    "start": "165360",
    "end": "170760"
  },
  {
    "text": "database and without a webserver and it's easy to test there aren't any external dependencies",
    "start": "170760",
    "end": "176580"
  },
  {
    "text": "and we know the logics the most important part of our application so this is very important it's independent",
    "start": "176580",
    "end": "183150"
  },
  {
    "text": "of the UI we'll have the flexibility to change the UI easily and that's a good thing right now we're dealing with a lot",
    "start": "183150",
    "end": "189750"
  },
  {
    "text": "of different web frameworks angular react view we want to move to the latest and greatest and we'll be moving to",
    "start": "189750",
    "end": "195540"
  },
  {
    "text": "Blaser so we want that flexibility when we do move to a new presentation",
    "start": "195540",
    "end": "201390"
  },
  {
    "text": "technology we're not going to impact the logic inside of core it's independent of that it's independent at a data base so",
    "start": "201390",
    "end": "209340"
  },
  {
    "text": "right now we might be using sequel server oracle Postgres but soon we'll be switching into cosmos DB it's gonna be a",
    "start": "209340",
    "end": "215340"
  },
  {
    "text": "lot cooler when we're building blazer applications on cosmos DB and finally",
    "start": "215340",
    "end": "220980"
  },
  {
    "text": "it's independent of anything external core simply doesn't know anything about the outside world",
    "start": "220980",
    "end": "226820"
  },
  {
    "text": "now with this design you can see that there's only three layers now you might need more or you might need less it just",
    "start": "226820",
    "end": "233850"
  },
  {
    "text": "depends on the complexity of your application the only thing you need to keep in mind is those dependencies need",
    "start": "233850",
    "end": "239490"
  },
  {
    "text": "to continue to point inwards that's what gives us the great flexibility and the high maintainability and that's going to",
    "start": "239490",
    "end": "245400"
  },
  {
    "text": "be the difference between an application that lasts a few years to an application that's going to last 20 years so this is",
    "start": "245400",
    "end": "252510"
  },
  {
    "text": "my example Northwind traders show of hands who's heard of Northwind traders pretty much everyone Northwind traders",
    "start": "252510",
    "end": "259620"
  },
  {
    "text": "is cool right no one no one thinks north and traders is cool I might change your",
    "start": "259620",
    "end": "265650"
  },
  {
    "text": "mind so it's now cross-platform I have upgraded it it runs on Windows Mac and",
    "start": "265650",
    "end": "270810"
  },
  {
    "text": "Linux so that's good it's dotnet core too too soon oh I played it two three",
    "start": "270810",
    "end": "276950"
  },
  {
    "text": "EF core two to code first and data seeded that's cool right Northwind",
    "start": "276950",
    "end": "284820"
  },
  {
    "text": "traders is cool again let's take a look",
    "start": "284820",
    "end": "290240"
  },
  {
    "text": "so this is my Northwind traders solution you can find it on github I'm gonna",
    "start": "293270",
    "end": "298440"
  },
  {
    "text": "share a link at the end so you don't need to take note of this but I just wanted to point out when you go to the",
    "start": "298440",
    "end": "303600"
  },
  {
    "text": "repo there's some nice instructions here on how to get started and what you'll need and we can follow along with these",
    "start": "303600",
    "end": "309870"
  },
  {
    "text": "instructions just to get it running I don't want to show you one thing initially just how to launch the application because there are two parts",
    "start": "309870",
    "end": "316500"
  },
  {
    "text": "to it this has an angular front-end and so to launch the angular front-end we",
    "start": "316500",
    "end": "322380"
  },
  {
    "text": "use we go to the command prompt Northwind web UI client up and we just",
    "start": "322380",
    "end": "327390"
  },
  {
    "text": "have to run NPM start and that'll launch the front-end now from the backend we",
    "start": "327390",
    "end": "334979"
  },
  {
    "text": "can just go to the web UI project and we can just press ctrl f5 and that'll",
    "start": "334979",
    "end": "340530"
  },
  {
    "text": "launch at the backend if you launch the backend without the front end running as it is now you'll",
    "start": "340530",
    "end": "347580"
  },
  {
    "text": "see this exception don't be alarmed sometimes my laptop just needs a little",
    "start": "347580",
    "end": "352710"
  },
  {
    "text": "bit more time to get started so there we go it's running and if we come here and launch that's all good",
    "start": "352710",
    "end": "361169"
  },
  {
    "text": "so this is a sample application it does have some functionality but its purpose is primarily to demonstrate the",
    "start": "361169",
    "end": "368010"
  },
  {
    "text": "principles of clean architecture and the key points that I'd like to make in this presentation it has a nice open API",
    "start": "368010",
    "end": "375750"
  },
  {
    "text": "behind it so you can explore the API and see some of the functionality and we'll talk about that a little bit later but I",
    "start": "375750",
    "end": "382979"
  },
  {
    "text": "just wanted to give you a tour of of the project so I'll zoom in here for you",
    "start": "382979",
    "end": "390710"
  },
  {
    "text": "here we go so you can see the solutions broken up into a number of folders",
    "start": "390710",
    "end": "395850"
  },
  {
    "text": "correlating to the folders in the architecture and design I showed you earlier there's a docs folder here and that",
    "start": "395850",
    "end": "402360"
  },
  {
    "text": "contains a readme that's the github readme so you can take a look at that and then there's the slides from the",
    "start": "402360",
    "end": "408750"
  },
  {
    "text": "presentation so when you do go and have a look at this you'll have all of the resources from today now you can see",
    "start": "408750",
    "end": "414660"
  },
  {
    "text": "here I have my core layers application and domain and inside each of those",
    "start": "414660",
    "end": "420480"
  },
  {
    "text": "they're read miss also so you can get an understanding at each layer what should",
    "start": "420480",
    "end": "425610"
  },
  {
    "text": "be contained within there I have my infrastructure layer which contains infrastructure and persistence I didn't",
    "start": "425610",
    "end": "432000"
  },
  {
    "text": "mention this earlier but persistence really is a kind of infrastructure we just separated out because we've got a",
    "start": "432000",
    "end": "438660"
  },
  {
    "text": "few concerns in there that we're going to encapsulate and so you could separate out other infrastructure concerns in",
    "start": "438660",
    "end": "444240"
  },
  {
    "text": "this in the same way so if you wanted to have Northwind security for your authentication authorization concerns",
    "start": "444240",
    "end": "450300"
  },
  {
    "text": "that will be an appropriate choice I have a Northwind common project which is",
    "start": "450300",
    "end": "455610"
  },
  {
    "text": "for my cross-cutting concerns and it has no dependencies any of those other",
    "start": "455610",
    "end": "460680"
  },
  {
    "text": "projects can depend on common it's a good place for things like string extensions or date/time extensions",
    "start": "460680",
    "end": "466050"
  },
  {
    "text": "whatever whatever type of thing you might want to put in there and then you can see I've got a bunch of tests on",
    "start": "466050",
    "end": "472080"
  },
  {
    "text": "just just to keep it all running nice and healthily",
    "start": "472080",
    "end": "476360"
  },
  {
    "text": "okay skip through that so key points for",
    "start": "483830",
    "end": "491000"
  },
  {
    "text": "this first section the domain contains the enterprise-wide logic and types and that's the logic that we can use in",
    "start": "491000",
    "end": "496970"
  },
  {
    "text": "multiple systems the application contains the business logic in types and that's the logic that's specific to this",
    "start": "496970",
    "end": "502880"
  },
  {
    "text": "application infrastructure including persistence includes all external concerns and the presentation and",
    "start": "502880",
    "end": "509690"
  },
  {
    "text": "infrastructure depend only on application not on each other so infrastructure and presentation",
    "start": "509690",
    "end": "516169"
  },
  {
    "text": "components can be replaced with minimal effort and that's because we're not going to affect call and we do that it",
    "start": "516170",
    "end": "522890"
  },
  {
    "text": "has no external concerns so now we're going to have a look at the domain layer followed by every other layer in",
    "start": "522890",
    "end": "528260"
  },
  {
    "text": "application and essentially in this talk I'll make some key points I'll highlight the things that I think are important so",
    "start": "528260",
    "end": "536420"
  },
  {
    "text": "that you get a good understanding of the project but you'll also want to dive in and take a look for yourself because",
    "start": "536420",
    "end": "542630"
  },
  {
    "text": "there's a lot more going on then I can include in the time allowed in this talk so inside of the domain layer we have",
    "start": "542630",
    "end": "549800"
  },
  {
    "text": "entities value objects enumerations logic and exceptions let's take a look",
    "start": "549800",
    "end": "558459"
  },
  {
    "text": "so the first key point that I'd like to make is regarding the use of data annotations so you can see what I have",
    "start": "567580",
    "end": "576070"
  },
  {
    "text": "here is an entity called customer and it's nice and clean but if I look at the history we can",
    "start": "576070",
    "end": "582550"
  },
  {
    "text": "actually find a version that includes data annotations here we go so this is",
    "start": "582550",
    "end": "591010"
  },
  {
    "text": "another version but I'll make it I'll make that much bigger for you let's go 150 there we go so this version contains",
    "start": "591010",
    "end": "600010"
  },
  {
    "text": "data annotations and and in the past earlier versions of EF we used to use",
    "start": "600010",
    "end": "605200"
  },
  {
    "text": "data annotations all the time and they had two purposes and that was to instruct the ORM how to create the",
    "start": "605200",
    "end": "611170"
  },
  {
    "text": "relational model and also to provide validation but in newer versions of the F core it doesn't do the validation",
    "start": "611170",
    "end": "618070"
  },
  {
    "text": "anymore you can use dart annotations for validation it's just not something that you have courses are for and it also it",
    "start": "618070",
    "end": "625959"
  },
  {
    "text": "does still use it for relational modeling but there's a much better way to do that we can we can actually use",
    "start": "625959",
    "end": "632140"
  },
  {
    "text": "fluent API configuration instead and that means that we can keep our entities",
    "start": "632140",
    "end": "637630"
  },
  {
    "text": "nice and clean and looking like this because really those sort of concerns don't belong in our domain layer anyway",
    "start": "637630",
    "end": "644410"
  },
  {
    "text": "we want to keep that into the infrastructure layer specifically in the persistence project now the next point",
    "start": "644410",
    "end": "650860"
  },
  {
    "text": "that I'd like to make we can we can use this example again is to initialize all collections and also to make the private",
    "start": "650860",
    "end": "658420"
  },
  {
    "text": "the set as private or to remove them all together and you might think well why will I do that and it it's just because",
    "start": "658420",
    "end": "665290"
  },
  {
    "text": "it makes life easier if we do that we don't need to think when we're accessing a new customer object we don't need to",
    "start": "665290",
    "end": "672100"
  },
  {
    "text": "say hmm I wonder if the order collection has been initialized all right an if statement if customers orders equals",
    "start": "672100",
    "end": "678459"
  },
  {
    "text": "null then initialize the orders collection we don't have to do that anymore",
    "start": "678459",
    "end": "683740"
  },
  {
    "text": "and we gain control of the object it's it's about helping your developers in",
    "start": "683740",
    "end": "690420"
  },
  {
    "text": "ensuring that they fall into the pit of success we make it easy for them to do the right thing and hard for them to do",
    "start": "690420",
    "end": "696850"
  },
  {
    "text": "the wrong thing so the next one that I want to talk about is when you're designing your",
    "start": "696850",
    "end": "702880"
  },
  {
    "text": "system let me just see I want you to",
    "start": "702880",
    "end": "707950"
  },
  {
    "text": "think about this this entity we often use primitive types where where we",
    "start": "707950",
    "end": "714520"
  },
  {
    "text": "shouldn't be using primitive types so here we have an ad account and its type is string and that's fine ad accounts",
    "start": "714520",
    "end": "720940"
  },
  {
    "text": "are strings but not all strings are valid ad accounts the certain rules in",
    "start": "720940",
    "end": "726430"
  },
  {
    "text": "the way that ad accounts will be created the value and there's certain ways in",
    "start": "726430",
    "end": "731950"
  },
  {
    "text": "which we'll use the ad account for example sometimes we'll want just the domain name and sometimes we'll want",
    "start": "731950",
    "end": "738160"
  },
  {
    "text": "just the username and sometimes we'll want to roll together in some kind of display format now that's logic there's",
    "start": "738160",
    "end": "744370"
  },
  {
    "text": "validation and logic associated with using this ad account now if we don't find somewhere to encapsulate this",
    "start": "744370",
    "end": "750970"
  },
  {
    "text": "that's going to be problematic that in a large system that logic is going to appear time and time again because new",
    "start": "750970",
    "end": "757960"
  },
  {
    "text": "developers experience developers may not know about it so we need a good way to",
    "start": "757960",
    "end": "763210"
  },
  {
    "text": "encapsulate that logic in a complex type and that's where value objects can really help so you can see here I've",
    "start": "763210",
    "end": "769750"
  },
  {
    "text": "changed it to a value object and let's take a look at the implementation actually let's take a look at the tests",
    "start": "769750",
    "end": "777210"
  },
  {
    "text": "okay so I have this ad account and it should have the correct domain and name",
    "start": "779070",
    "end": "784960"
  },
  {
    "text": "so I can construct it using this factory method and all I have to do is pass in the ad account string and then I'll have",
    "start": "784960",
    "end": "791620"
  },
  {
    "text": "access to the domain and the name so that's nice and easy I won't have to write logic around that I've got a",
    "start": "791620",
    "end": "798100"
  },
  {
    "text": "method to string which I've overridden and it returns the correct format so we can see that if I construct a new object",
    "start": "798100",
    "end": "804900"
  },
  {
    "text": "it's going to return the format which will essentially be SSW slash jason the",
    "start": "804900",
    "end": "810490"
  },
  {
    "text": "original format i have an implicit conversion operator so i can take an ad",
    "start": "810490",
    "end": "816130"
  },
  {
    "text": "account type and implicitly convert it to a string which is great for whatever purposes i need in the string format",
    "start": "816130",
    "end": "823830"
  },
  {
    "text": "logging is one that comes to mind i have an explicit conversion operator so i can",
    "start": "823830",
    "end": "829030"
  },
  {
    "text": "directly cast from a string to an ad account and I control the creation of the ad",
    "start": "829030",
    "end": "834820"
  },
  {
    "text": "object if the ad account is not valid the ad account string it doesn't contain a slash then that's going to fail and",
    "start": "834820",
    "end": "841780"
  },
  {
    "text": "and it brings me to my next point which is to use custom domain exceptions this",
    "start": "841780",
    "end": "847420"
  },
  {
    "text": "exception ad account invalid exception will be a lot easier to debug than the",
    "start": "847420",
    "end": "852490"
  },
  {
    "text": "index out of range exception that would otherwise be throw on I have a quick look at the implementation so you can",
    "start": "852490",
    "end": "861190"
  },
  {
    "text": "see here it has a private constructor I'm controlling the construction of this object through the factory method",
    "start": "861190",
    "end": "867310"
  },
  {
    "text": "it essentially splits the string into two parts and this is where it could throw an index out of range exception so",
    "start": "867310",
    "end": "873820"
  },
  {
    "text": "I catch any exceptions and just say hey there's something wrong with this ad account so that's much better I have",
    "start": "873820",
    "end": "880600"
  },
  {
    "text": "this type it encapsulates all the logic associated with it and I don't have to",
    "start": "880600",
    "end": "885670"
  },
  {
    "text": "worry about logic appearing elsewhere when my developers use this type they're going to fall into the pit of success",
    "start": "885670",
    "end": "891490"
  },
  {
    "text": "again they're not going to think about how do I get just the domain part how do I think get just the name part so when",
    "start": "891490",
    "end": "897670"
  },
  {
    "text": "you're building your entities just think about this property that I'm creating is",
    "start": "897670",
    "end": "903100"
  },
  {
    "text": "it really a string or is it more complex than that will I have logic associated",
    "start": "903100",
    "end": "908530"
  },
  {
    "text": "with it is it a primitive type or is it a complex type",
    "start": "908530",
    "end": "913680"
  },
  {
    "text": "okay so key points for the domain layer avoid using data annotations there are",
    "start": "920080",
    "end": "925220"
  },
  {
    "text": "better ways they clutter up our domain and we'll see that soon the better approach use value objects where",
    "start": "925220",
    "end": "931400"
  },
  {
    "text": "appropriate I mentioned before just think about it is it really a primitive type or is it more complex initialize",
    "start": "931400",
    "end": "937970"
  },
  {
    "text": "all collections and privates and use private setters help your developers to fall into the pit of success and create",
    "start": "937970",
    "end": "945050"
  },
  {
    "text": "custom domain exceptions so much easier to debug than an index out of range exception so now we're going to look at",
    "start": "945050",
    "end": "951620"
  },
  {
    "text": "the application layer the application layer contains interfaces models view",
    "start": "951620",
    "end": "958040"
  },
  {
    "text": "models and DT OS logic commands and queries we'll talk about that soon and validators and again custom exceptions",
    "start": "958040",
    "end": "966100"
  },
  {
    "text": "so CQRS we all know by now CQRS stands for command query responsibility",
    "start": "966100",
    "end": "971570"
  },
  {
    "text": "segregation and with CQRS we separate our reads from our rights and the",
    "start": "971570",
    "end": "977780"
  },
  {
    "text": "benefits include maximizing performance and scalability and that's awesome but for me the most important benefit is",
    "start": "977780",
    "end": "985250"
  },
  {
    "text": "simplicity i find that when i use CQRS everything becomes easier it's easy to",
    "start": "985250",
    "end": "991160"
  },
  {
    "text": "add new features because I can just add a new query or command and it's easy to maintain our changes should be nicely",
    "start": "991160",
    "end": "997940"
  },
  {
    "text": "isolated to a single query or command and so we're less likely to introduce bugs now if you like CQRS then you'll",
    "start": "997940",
    "end": "1005770"
  },
  {
    "text": "love using CQRS with mediator they like the perfect couple so with mediator we don't define our",
    "start": "1005770",
    "end": "1012880"
  },
  {
    "text": "commands and queries as requests so the application layer just becomes a series of requests response objects and with",
    "start": "1012880",
    "end": "1020740"
  },
  {
    "text": "that we get the fantastic ability to introduce additional behavior so we can",
    "start": "1020740",
    "end": "1026650"
  },
  {
    "text": "add functionality before and/or after each request so behavior such as",
    "start": "1026650",
    "end": "1032730"
  },
  {
    "text": "cross-cutting concerns such as logging cache invalidation and security become",
    "start": "1032730",
    "end": "1039040"
  },
  {
    "text": "easier because we're using mediator we get this really nice pipeline which is powerful so let's take a look",
    "start": "1039040",
    "end": "1046920"
  },
  {
    "text": "okay so you can see here in their application layer I've separated things",
    "start": "1059669",
    "end": "1064840"
  },
  {
    "text": "by feature so everything related to customers is in this customers folder",
    "start": "1064840",
    "end": "1069850"
  },
  {
    "text": "and there's only two things there's commands and queries if we expand those",
    "start": "1069850",
    "end": "1075130"
  },
  {
    "text": "it's really obvious what everything in those folders will do we know that if we",
    "start": "1075130",
    "end": "1081279"
  },
  {
    "text": "go into here it will be a create customer command and if we come into here that will be where we can work with",
    "start": "1081279",
    "end": "1087460"
  },
  {
    "text": "our get customers list feature and that's a query let's take a look at this one inside of this folder I have",
    "start": "1087460",
    "end": "1096010"
  },
  {
    "text": "everything that I need to work on this feature I don't have a separate folder for my view models I don't have a",
    "start": "1096010",
    "end": "1102399"
  },
  {
    "text": "separate folder for my DTO so I don't have a separate folder for my handlers so when I'm ready to change this feature",
    "start": "1102399",
    "end": "1109029"
  },
  {
    "text": "it's all here I don't have to jump around to find what I'm looking for now",
    "start": "1109029",
    "end": "1114870"
  },
  {
    "text": "with mediator we define our commands enquiries as requests so you can see in",
    "start": "1114870",
    "end": "1121720"
  },
  {
    "text": "this case this is a DTO for getting a list of customers at the",
    "start": "1121720",
    "end": "1126820"
  },
  {
    "text": "moment it doesn't have any properties but I might start to add some so I might say things like page size filtering",
    "start": "1126820",
    "end": "1134950"
  },
  {
    "text": "abilities what page that I'm currently on but with with the mediator framework",
    "start": "1134950",
    "end": "1140830"
  },
  {
    "text": "we define these as type I requests and then the return type so this query will",
    "start": "1140830",
    "end": "1146230"
  },
  {
    "text": "return our customers list view model if we jump in here and look at the handler",
    "start": "1146230",
    "end": "1151890"
  },
  {
    "text": "we can see it's quite simple we're injecting an eye Northwind dbcontext",
    "start": "1151890",
    "end": "1157870"
  },
  {
    "text": "and a mapper for our mapper and we're simply constructing a new customers list",
    "start": "1157870",
    "end": "1164500"
  },
  {
    "text": "view model and this is this is a very nice approach because what's contained",
    "start": "1164500",
    "end": "1170289"
  },
  {
    "text": "within here are only the things needed to return this query we don't have a",
    "start": "1170289",
    "end": "1175840"
  },
  {
    "text": "large service that's responsible for many things which becomes hard to navigate it's a single file with a",
    "start": "1175840",
    "end": "1181899"
  },
  {
    "text": "single purpose",
    "start": "1181899",
    "end": "1184590"
  },
  {
    "text": "you can see the create customer command is quite simple also",
    "start": "1190280",
    "end": "1196800"
  },
  {
    "text": "so this is our DTO it's a requester as well it doesn't return anything so we're",
    "start": "1196800",
    "end": "1202140"
  },
  {
    "text": "not specifying that here and it contains everything that we need to go ahead and",
    "start": "1202140",
    "end": "1207480"
  },
  {
    "text": "create a customer now I've taken a slightly different approach here I've actually nested the handler inside the",
    "start": "1207480",
    "end": "1214590"
  },
  {
    "text": "command and that can help to improve discoverability we'll talk about that a",
    "start": "1214590",
    "end": "1220080"
  },
  {
    "text": "little bit later you can see again it's quite straightforward essentially I'm",
    "start": "1220080",
    "end": "1226680"
  },
  {
    "text": "creating a new customer entity I'm adding that saving the changes and publishing a customer created event and",
    "start": "1226680",
    "end": "1233670"
  },
  {
    "text": "then with mediator I can create handlers that have specific functionality for that event as well the next thing I want",
    "start": "1233670",
    "end": "1243810"
  },
  {
    "text": "to talk about is validation so we mentioned that data annotations are not",
    "start": "1243810",
    "end": "1249630"
  },
  {
    "text": "so good at the domain level well I think they're not so good at this level also data annotations are ok we can use them",
    "start": "1249630",
    "end": "1256230"
  },
  {
    "text": "for simple validation scenarios but not so much for complex validation scenarios",
    "start": "1256230",
    "end": "1261800"
  },
  {
    "text": "for that I prefer to use fluent validation and let me let me show you an example so here I have an update",
    "start": "1261800",
    "end": "1271080"
  },
  {
    "text": "customer command and it just has the DTO to an updater customer and then I have",
    "start": "1271080",
    "end": "1276660"
  },
  {
    "text": "an update customer command validator so with the fluent validation I'm able to",
    "start": "1276660",
    "end": "1282150"
  },
  {
    "text": "define the validation rules using a fluent syntax in a separate file and these rules are obviously simple there",
    "start": "1282150",
    "end": "1289530"
  },
  {
    "text": "are there no more complicated than what you can support with data annotations but down here I have a couple of example",
    "start": "1289530",
    "end": "1296550"
  },
  {
    "text": "more complex rules so you can see here I have a rule for the postal code when the",
    "start": "1296550",
    "end": "1303210"
  },
  {
    "text": "country is equal to Australia then the post code should match this regular expression essentially it should be four",
    "start": "1303210",
    "end": "1309630"
  },
  {
    "text": "digits and if not it will return this error Australian post codes have four",
    "start": "1309630",
    "end": "1314730"
  },
  {
    "text": "digits so that's not much more complicated but it is a nice syntax we can do that with data",
    "start": "1314730",
    "end": "1320610"
  },
  {
    "text": "patience but we also have this one we have a rule for the foreign it must have",
    "start": "1320610",
    "end": "1326549"
  },
  {
    "text": "a Queensland landline when the country is equal to Australia and the postcode starts with four so in this case we're",
    "start": "1326549",
    "end": "1333690"
  },
  {
    "text": "actually looking at Crossfield validation and we can do a lot with with",
    "start": "1333690",
    "end": "1338820"
  },
  {
    "text": "fluent validation in this way really we take full control of the validation scenarios and so the implementation is",
    "start": "1338820",
    "end": "1346380"
  },
  {
    "text": "up to us yes question I'm not validating",
    "start": "1346380",
    "end": "1355640"
  },
  {
    "text": "domain entities I'm validating other commands or queries the requests to the",
    "start": "1355640",
    "end": "1360990"
  },
  {
    "text": "application so this is kind of the first line of defense because everything's coming in as a request so what was that",
    "start": "1360990",
    "end": "1374179"
  },
  {
    "text": "no no it's in it's in the application layer I like to have the things that",
    "start": "1374179",
    "end": "1383820"
  },
  {
    "text": "change together together and so the the command and the command validator sit",
    "start": "1383820",
    "end": "1388950"
  },
  {
    "text": "together so that when I need to update that feature it's easy to access those things I prefer not to have to jump",
    "start": "1388950",
    "end": "1394350"
  },
  {
    "text": "around okay so one of the other things",
    "start": "1394350",
    "end": "1400020"
  },
  {
    "text": "about using mediator I mentioned as we get that pipeline and so to run these",
    "start": "1400020",
    "end": "1406080"
  },
  {
    "text": "validators I have what's called a pipeline behavior and if we look at this",
    "start": "1406080",
    "end": "1413030"
  },
  {
    "text": "this is a request validation behavior so remember everything that's coming into",
    "start": "1413030",
    "end": "1419070"
  },
  {
    "text": "this application is a request and I have a pipeline behavior which handles these",
    "start": "1419070",
    "end": "1424620"
  },
  {
    "text": "requests so the requests might be of type create customer command or get customer detail query if there are",
    "start": "1424620",
    "end": "1431010"
  },
  {
    "text": "validators associated with those commands or queries this little process here will run them and if there are",
    "start": "1431010",
    "end": "1437820"
  },
  {
    "text": "exceptions it will return a validation exception so that's a custom exception that was thrown from the application",
    "start": "1437820",
    "end": "1443610"
  },
  {
    "text": "layer so that means the request validation is automatic the developers",
    "start": "1443610",
    "end": "1449070"
  },
  {
    "text": "don't need to think about that if they associate a validator with her Qwest then it will be validated and",
    "start": "1449070",
    "end": "1455490"
  },
  {
    "text": "that's great that's a part of the mediators our pipeline so here we have",
    "start": "1455490",
    "end": "1462120"
  },
  {
    "text": "another simple behavior this is an I request preprocessor so it happens",
    "start": "1462120",
    "end": "1467250"
  },
  {
    "text": "before the request runs in mediator and it's quite simple essentially we get a request let's say create customer",
    "start": "1467250",
    "end": "1473760"
  },
  {
    "text": "command I take the name of that request and I just log it using dotnet cause built in logging abstraction so I just",
    "start": "1473760",
    "end": "1482010"
  },
  {
    "text": "say Northwind request create customer command and then I take the actual request DT Oh everything that's in the",
    "start": "1482010",
    "end": "1487950"
  },
  {
    "text": "create customer command and I serialize that so that's going to be available in the log and then finally I have another",
    "start": "1487950",
    "end": "1495570"
  },
  {
    "text": "one which is just a simple request performance behavior and so this one is",
    "start": "1495570",
    "end": "1501210"
  },
  {
    "text": "a pipelined behavior like the validator so with this one I start a timer I complete the complete the request get",
    "start": "1501210",
    "end": "1508470"
  },
  {
    "text": "the response and stop the timer and if the request happens to take greater than 500 milliseconds then I log a warning to",
    "start": "1508470",
    "end": "1515640"
  },
  {
    "text": "the database in much the same way as I was logging the information so that's kind of that's kind of great any request",
    "start": "1515640",
    "end": "1522330"
  },
  {
    "text": "that comes into the system with a few lines of code I can log that request I can I can when I add the user details",
    "start": "1522330",
    "end": "1529380"
  },
  {
    "text": "I'll be able to filter it by user set the date range and I can see kind of what they were doing or where they had",
    "start": "1529380",
    "end": "1535710"
  },
  {
    "text": "the problem and what kind of exceptions were associated with that and because the request itself has been serialized I",
    "start": "1535710",
    "end": "1541470"
  },
  {
    "text": "can take that serialize request and I can add that to a test that's probably going to fail because will the customers",
    "start": "1541470",
    "end": "1547830"
  },
  {
    "text": "complaining and then I can fix it and the test will pass so that's pretty cool",
    "start": "1547830",
    "end": "1554570"
  },
  {
    "text": "all right and the other thing that I wanted to talk about was abstractions so",
    "start": "1554570",
    "end": "1559620"
  },
  {
    "text": "in this in this layer we have a couple of abstractions so I have the I Northwind dbcontext",
    "start": "1559620",
    "end": "1565610"
  },
  {
    "text": "which is my interface instead of using the dbcontext directly now this is a",
    "start": "1565610",
    "end": "1570840"
  },
  {
    "text": "compromise I've chosen to use entity framework core directly because make no",
    "start": "1570840",
    "end": "1575940"
  },
  {
    "text": "mistake even though this is an interface I still need a dependency on entity framework core in this application now",
    "start": "1575940",
    "end": "1583110"
  },
  {
    "text": "if I wanted to avoid that if I had a good reason to use the repository and unit of work then I would",
    "start": "1583110",
    "end": "1589950"
  },
  {
    "text": "actually implement those patterns and I wouldn't need the dependency on energy framework or but these are some of the",
    "start": "1589950",
    "end": "1596370"
  },
  {
    "text": "real decisions we make when we build software today we know the right thing to do but we make choices based on speed",
    "start": "1596370",
    "end": "1605399"
  },
  {
    "text": "and cost and quality the other interface",
    "start": "1605399",
    "end": "1610409"
  },
  {
    "text": "that I have in here is a demonstrator for I notification service and the",
    "start": "1610409",
    "end": "1615749"
  },
  {
    "text": "important thing to note is it doesn't matter where the implementation for the notification server is services it's",
    "start": "1615749",
    "end": "1622350"
  },
  {
    "text": "going to be an infrastructure somewhere but core only depends on this interface",
    "start": "1622350",
    "end": "1627720"
  },
  {
    "text": "and this message type that's not coming from infrastructure that's coming from",
    "start": "1627720",
    "end": "1632820"
  },
  {
    "text": "core as well so I'm sure that if we use a service like sand grid or something else it's going to have our own types",
    "start": "1632820",
    "end": "1639179"
  },
  {
    "text": "and we could easily take a dependency on that and that would save us time but that means that we will be tightly",
    "start": "1639179",
    "end": "1644519"
  },
  {
    "text": "coupled to that framework and when we want to change to a new messaging service we'll have to rewrite those types so",
    "start": "1644519",
    "end": "1650940"
  },
  {
    "text": "just to avoid that straight away make sure that the interfaces within core make sure that the types are worth in",
    "start": "1650940",
    "end": "1656940"
  },
  {
    "text": "core and do the mapping necessary okay",
    "start": "1656940",
    "end": "1667559"
  },
  {
    "text": "key points using CQRS and mediator simplifies your overall design fluent",
    "start": "1667559",
    "end": "1673350"
  },
  {
    "text": "validation is useful for all validation scenarios mediator simplifies",
    "start": "1673350",
    "end": "1678600"
  },
  {
    "text": "cross-cutting concerns we get that really great pipeline so we can implement all sorts of things there and",
    "start": "1678600",
    "end": "1683629"
  },
  {
    "text": "it's independent of infrastructure and data access concerns all right now we",
    "start": "1683629",
    "end": "1690360"
  },
  {
    "text": "look at the persistence layer so inside of the business in layer we have our DB context because this solutions using",
    "start": "1690360",
    "end": "1696749"
  },
  {
    "text": "energy framework or we have migrations configurations seeding abstractions so",
    "start": "1696749",
    "end": "1703139"
  },
  {
    "text": "here's the big question used to be a bigger question should we implement these patterns and I'm going",
    "start": "1703139",
    "end": "1708690"
  },
  {
    "text": "to answer for you because every time I ask the question most people say no now",
    "start": "1708690",
    "end": "1714240"
  },
  {
    "text": "there'll be one or two people who will say yes but the fact of the matter is with architecture and design it always",
    "start": "1714240",
    "end": "1720950"
  },
  {
    "text": "depends now in the general case it's not always the best choice because you've",
    "start": "1720950",
    "end": "1726889"
  },
  {
    "text": "core insulates your code from database changes EF court is an abstraction and",
    "start": "1726889",
    "end": "1731960"
  },
  {
    "text": "we choose a database provider to work with that abstraction we can choose sequel server we can choose Postgres now",
    "start": "1731960",
    "end": "1738169"
  },
  {
    "text": "we can choose cosmos DB DB context acts as a unit of work it's implementing that",
    "start": "1738169",
    "end": "1743779"
  },
  {
    "text": "pattern and the DB set axes are repository so a common reason for",
    "start": "1743779",
    "end": "1748999"
  },
  {
    "text": "implementing these patterns with earlier versions of EF and with other ORM S is for unit testing but now if core has",
    "start": "1748999",
    "end": "1756769"
  },
  {
    "text": "features for unit testing without repositories in the way of the EF core in-memory provider so that's what I",
    "start": "1756769",
    "end": "1763940"
  },
  {
    "text": "think but what do the experts think so Jimmy Bogart who was at the conference this week he's the chief architect at",
    "start": "1763940",
    "end": "1770899"
  },
  {
    "text": "head spring and the creator of auto mapper and mediator which were using in this solution he says that I'm over",
    "start": "1770899",
    "end": "1776299"
  },
  {
    "text": "repositories and definitely over abstracting your data layer so I'd say I'd say he's against implementing",
    "start": "1776299",
    "end": "1782330"
  },
  {
    "text": "repositories and unit of work in in in most scenarios then we have Steve Smith Microsoft MVP and Regional Director for",
    "start": "1782330",
    "end": "1789759"
  },
  {
    "text": "almost ten years and he says no you don't need a repository but there are",
    "start": "1789759",
    "end": "1795289"
  },
  {
    "text": "many benefits and you should consider it now I think Steve has been very diplomatic here I think that if you came",
    "start": "1795289",
    "end": "1801259"
  },
  {
    "text": "to him and showed him your solution and you didn't have a repository he'd show you why you need it so very diplomatic",
    "start": "1801259",
    "end": "1806720"
  },
  {
    "text": "he says you don't need it but I think he's kind of on the side of implementing a repository and next we have John Smith",
    "start": "1806720",
    "end": "1814070"
  },
  {
    "text": "the author of energy framework core in action and he says no the unit of the",
    "start": "1814070",
    "end": "1819409"
  },
  {
    "text": "repository slash unit of work pattern isn't useful with energy framework core so even the experts don't agree and what",
    "start": "1819409",
    "end": "1827210"
  },
  {
    "text": "does that tell us well it's simple as is the case with all design patterns we",
    "start": "1827210",
    "end": "1832999"
  },
  {
    "text": "need to think about the problem that they're trying to solve if if the pattern if applying the pattern solves",
    "start": "1832999",
    "end": "1840619"
  },
  {
    "text": "that problem for us then go and head and implement it if you implement it without a problem to solve then it just",
    "start": "1840619",
    "end": "1846529"
  },
  {
    "text": "introduces unnecessary complexity so same approach or design patterns",
    "start": "1846529",
    "end": "1852710"
  },
  {
    "text": "okay let's have a look at the persistence layer",
    "start": "1852710",
    "end": "1857210"
  },
  {
    "text": "okay so first the point that I'd like to make is the precision Slayer is independent of the database insofar as",
    "start": "1867340",
    "end": "1874400"
  },
  {
    "text": "there is a provider that we can change to with energy framework core you can",
    "start": "1874400",
    "end": "1879860"
  },
  {
    "text": "see in this particular application the provider I'm using a sequel server so I",
    "start": "1879860",
    "end": "1886790"
  },
  {
    "text": "could change that to Postgres so in that way it's independent of the database I have changed this solution to Postgres",
    "start": "1886790",
    "end": "1892220"
  },
  {
    "text": "in the past and and run it on Linux and it works quite well we talked about not",
    "start": "1892220",
    "end": "1902450"
  },
  {
    "text": "using data annotations in the domain layer so how do we configure the ORM so",
    "start": "1902450",
    "end": "1907880"
  },
  {
    "text": "that so that it knows how to map from the object model to the relational model we use fluent API configurations so in",
    "start": "1907880",
    "end": "1915830"
  },
  {
    "text": "the fluent API configuration for customer we define everything that we need and it's outside of the domain",
    "start": "1915830",
    "end": "1923780"
  },
  {
    "text": "layer so nice and clean in a separate file we also can automatically apply",
    "start": "1923780",
    "end": "1931840"
  },
  {
    "text": "these configurations in our DB contacts we just need to add this line so model",
    "start": "1931840",
    "end": "1937760"
  },
  {
    "text": "builder don't apply configurations from assembly and we just say which which assembly the configurations are",
    "start": "1937760",
    "end": "1943580"
  },
  {
    "text": "contained within so this is a new feature I think it came in in in - -",
    "start": "1943580",
    "end": "1948880"
  },
  {
    "text": "before that we had to either do it manually or write our own code to apply",
    "start": "1948880",
    "end": "1955430"
  },
  {
    "text": "it automatically now the most important",
    "start": "1955430",
    "end": "1960650"
  },
  {
    "text": "thing with working with any framework which is conventions base is to",
    "start": "1960650",
    "end": "1966200"
  },
  {
    "text": "understand the conventions because that's going to make us more productive so you can see here I'm configuring the",
    "start": "1966200",
    "end": "1974300"
  },
  {
    "text": "employee entity but right after about any of you who know entity framework well well know that I don't need this",
    "start": "1974300",
    "end": "1980810"
  },
  {
    "text": "line by convention it will recognize that an employee entity with an employee",
    "start": "1980810",
    "end": "1986630"
  },
  {
    "text": "ID or an ID just by itself will be flagged as energy front by energy",
    "start": "1986630",
    "end": "1993410"
  },
  {
    "text": "framework as being a key so when you're working with a conventions based framework it's important to first",
    "start": "1993410",
    "end": "1999230"
  },
  {
    "text": "understand the conventions because that's going to make it easier for you to to work with that system you'll be more productive",
    "start": "1999230",
    "end": "2004979"
  },
  {
    "text": "and you co will be simpler because of it I can just remove anything like that so",
    "start": "2004979",
    "end": "2018539"
  },
  {
    "text": "I want to just touch one more time on the repository pattern so obviously in",
    "start": "2018539",
    "end": "2024779"
  },
  {
    "text": "this application I've chosen not to implement it but we should definitely talk about a good reason as to why we",
    "start": "2024779",
    "end": "2030299"
  },
  {
    "text": "might implement the repository pattern so in a complex design we might like to implement the repository pattern at an",
    "start": "2030299",
    "end": "2036989"
  },
  {
    "text": "aggregate route so an example in this application would be an order with order",
    "start": "2036989",
    "end": "2042599"
  },
  {
    "text": "details and why would we do that well we would implement the repository at the order level and not at the order detail",
    "start": "2042599",
    "end": "2049980"
  },
  {
    "text": "level and in this way we will control how orders can be created updated and",
    "start": "2049980",
    "end": "2055559"
  },
  {
    "text": "deleted we'll make it easy to encapsulate that logic so that our developers can't go directly to the",
    "start": "2055559",
    "end": "2062429"
  },
  {
    "text": "order detail where we haven't written the correct logic around adding updating and deleting order details directly so",
    "start": "2062429",
    "end": "2069720"
  },
  {
    "text": "remember with the repository with design patterns first figure out what the problem is that you're trying to solve",
    "start": "2069720",
    "end": "2076049"
  },
  {
    "text": "and then apply the appropriate pattern",
    "start": "2076049",
    "end": "2080629"
  },
  {
    "text": "okay so key points for the persistence layer it's independent of the database",
    "start": "2087610",
    "end": "2093200"
  },
  {
    "text": "using EF call we can switch providers we use fluent API configuration over data",
    "start": "2093200",
    "end": "2099710"
  },
  {
    "text": "annotations it's simpler to to wire up and it keeps our domain free of extra",
    "start": "2099710",
    "end": "2105890"
  },
  {
    "text": "attributes we prefer conventions over configuration and when we're working with a framework that is convention",
    "start": "2105890",
    "end": "2112280"
  },
  {
    "text": "space we need to understand those conventions clearly and we should automatically apply all entity type",
    "start": "2112280",
    "end": "2118670"
  },
  {
    "text": "configurations we can do it with one line of code so that way we won't forget okay next the infrastructure layer so",
    "start": "2118670",
    "end": "2127130"
  },
  {
    "text": "within the infrastructure it's essentially our implementations persistence API clients file systems",
    "start": "2127130",
    "end": "2133790"
  },
  {
    "text": "email / SMS services the system clock kind of an important one anything",
    "start": "2133790",
    "end": "2138830"
  },
  {
    "text": "external so let's have a look in this",
    "start": "2138830",
    "end": "2146420"
  },
  {
    "text": "demonstration I've kept the infrastructure layer quite simple I've",
    "start": "2146420",
    "end": "2151730"
  },
  {
    "text": "got my machine date/time which basically has a couple of properties it just has",
    "start": "2151730",
    "end": "2158060"
  },
  {
    "text": "now in the current year any anyone think why we might want to actually implement",
    "start": "2158060",
    "end": "2165380"
  },
  {
    "text": "machine date/time and only have core depend on the interface I'd a time rather than using date/time directly so",
    "start": "2165380",
    "end": "2175100"
  },
  {
    "text": "what's that yeah possibly yep testing yep testing testing is the the",
    "start": "2175100",
    "end": "2182030"
  },
  {
    "text": "main reason that comes to mind for me so if we have some logic that we need to test and perhaps that logic is only can",
    "start": "2182030",
    "end": "2189260"
  },
  {
    "text": "be tested on a Tuesday well if we're using date/time now directly well we can only test that on a Tuesday maybe we can",
    "start": "2189260",
    "end": "2196460"
  },
  {
    "text": "write some logic in our test to check that it's a Tuesday and only run but with an i date/time interface we can we",
    "start": "2196460",
    "end": "2202760"
  },
  {
    "text": "can mock that out and make sure that it's a Tuesday another nice advantage that I came across is that I was able to",
    "start": "2202760",
    "end": "2209750"
  },
  {
    "text": "switch this out for an implementation where the end user was able to supply",
    "start": "2209750",
    "end": "2215090"
  },
  {
    "text": "the day time for the system and this was used for testers so they could actually configure the date/time",
    "start": "2215090",
    "end": "2220610"
  },
  {
    "text": "to test things that were time and date based so they could advance the system clock bring her back to the current date",
    "start": "2220610",
    "end": "2226880"
  },
  {
    "text": "time bring it back in time that was quite useful too so we have a machine",
    "start": "2226880",
    "end": "2234260"
  },
  {
    "text": "deck time implementation there and then I have my ultra fast notification service responsible for sending",
    "start": "2234260",
    "end": "2239840"
  },
  {
    "text": "notifications so we saw the I notification service implementation in core and this is the side of the",
    "start": "2239840",
    "end": "2246200"
  },
  {
    "text": "interface in core and this is my implementation it's superfast but the messages don't go anywhere okay so no a",
    "start": "2246200",
    "end": "2257240"
  },
  {
    "text": "point an important point to make about the infrastructure layer is that no layers should depend on infrastructure",
    "start": "2257240",
    "end": "2263950"
  },
  {
    "text": "infrastructure depends on core but we shouldn't have for example presentation",
    "start": "2263950",
    "end": "2269330"
  },
  {
    "text": "depending on infrastructure we might have something in presentation that wants to send a message for example but",
    "start": "2269330",
    "end": "2276050"
  },
  {
    "text": "when we do that were actually forced to write logic in presentation logic to",
    "start": "2276050",
    "end": "2281180"
  },
  {
    "text": "orchestrate the communications between presentation and infrastructure in order to send a message now that's logic that",
    "start": "2281180",
    "end": "2287810"
  },
  {
    "text": "we can't reuse we want to avoid that we want to push that logic into core so that when we change out that",
    "start": "2287810",
    "end": "2293660"
  },
  {
    "text": "presentation layer we don't have to move that logic as well so it's an important point all of the logic that we have for",
    "start": "2293660",
    "end": "2300470"
  },
  {
    "text": "this application should be carefully encapsulated within core",
    "start": "2300470",
    "end": "2306130"
  },
  {
    "text": "okay so key points so the infrastructure layer contains classes for accessing",
    "start": "2314240",
    "end": "2319350"
  },
  {
    "text": "external resources such as file systems web services SMTP and so on it",
    "start": "2319350",
    "end": "2324960"
  },
  {
    "text": "implements abstractions and interfaces defined within the application layer and no layers should depend on",
    "start": "2324960",
    "end": "2330390"
  },
  {
    "text": "infrastructure so next the presentation layer so what's in our presentation",
    "start": "2330390",
    "end": "2336270"
  },
  {
    "text": "layer it's the it's our clients it's the spa whether we're using angular reactive view could be just a Web API razor pages",
    "start": "2336270",
    "end": "2343830"
  },
  {
    "text": "MVC or even web forms let's take a look so what I want to show you here is",
    "start": "2343830",
    "end": "2350550"
  },
  {
    "text": "something that helps tie all of this together we're going to take a look at the controller's so I have a products",
    "start": "2350550",
    "end": "2358890"
  },
  {
    "text": "controller and I want to show you a",
    "start": "2358890",
    "end": "2365040"
  },
  {
    "text": "typical example so this is how controllers were typically built we would have a products controller we",
    "start": "2365040",
    "end": "2371550"
  },
  {
    "text": "would inject the dbcontext directly we would return entities from the controller and we would accept entities",
    "start": "2371550",
    "end": "2379320"
  },
  {
    "text": "in order to to update persistence we would have lots of logic in here and",
    "start": "2379320",
    "end": "2385190"
  },
  {
    "text": "generally it would get hard to work with there's a couple of problems with this the first one is that the the DB context",
    "start": "2385190",
    "end": "2393630"
  },
  {
    "text": "the persistence is one of the lowest levels of our system and the controller itself is one of the highest levels of",
    "start": "2393630",
    "end": "2400140"
  },
  {
    "text": "our system so when we bring those two things together we only have one place to write our logic and that's in the",
    "start": "2400140",
    "end": "2407070"
  },
  {
    "text": "controller that's in the actions so that's not great and as you know there's",
    "start": "2407070",
    "end": "2412320"
  },
  {
    "text": "lots of problems with returning entities from controllers and using them outside of this area for example if we have a",
    "start": "2412320",
    "end": "2420630"
  },
  {
    "text": "product and it has a collection of categories and that relinquishes let's",
    "start": "2420630",
    "end": "2430560"
  },
  {
    "text": "say we're updating a customer and we're not supposed to update the customers email address but then someone over",
    "start": "2430560",
    "end": "2437040"
  },
  {
    "text": "posts and supplies the email address anyway even though it wasn't on the form well now they've changed the email",
    "start": "2437040",
    "end": "2442980"
  },
  {
    "text": "address to their email address they can reset the customers password take over the account so there's lots of issues involved in",
    "start": "2442980",
    "end": "2450720"
  },
  {
    "text": "doing that so we can control that much better let's have a look at a newer",
    "start": "2450720",
    "end": "2457529"
  },
  {
    "text": "version so in this version i started using CQRS",
    "start": "2457529",
    "end": "2463500"
  },
  {
    "text": "and with with CQRS in this implementation I wasn't using mediator I",
    "start": "2463500",
    "end": "2469049"
  },
  {
    "text": "just added all of the interfaces to the commands increase that I needed now this",
    "start": "2469049",
    "end": "2474359"
  },
  {
    "text": "was a lot better I have a lot of kind of boilerplate here in order to get dependency injection to wire all that up",
    "start": "2474359",
    "end": "2480180"
  },
  {
    "text": "for me but when we look at the actions themselves they're now really simple",
    "start": "2480180",
    "end": "2485250"
  },
  {
    "text": "they're just one or two lines of code no longer working with the DB context no",
    "start": "2485250",
    "end": "2490559"
  },
  {
    "text": "longer encapsulating any logic so even though is it is it is a great step in",
    "start": "2490559",
    "end": "2495839"
  },
  {
    "text": "the right direction the logic is now in its respective command or query so it's",
    "start": "2495839",
    "end": "2502079"
  },
  {
    "text": "quite simple so minor update here we",
    "start": "2502079",
    "end": "2511589"
  },
  {
    "text": "started using from services so this is a nice little attribute with the dotnet core dependency injection we're",
    "start": "2511589",
    "end": "2518579"
  },
  {
    "text": "basically saying to dependency injection to inject this query for us so we don't have to add all of those commands and",
    "start": "2518579",
    "end": "2525690"
  },
  {
    "text": "queries so it'll just inject it and we query dot execute inject the command and",
    "start": "2525690",
    "end": "2531599"
  },
  {
    "text": "we can execute that nice and simple ok",
    "start": "2531599",
    "end": "2542130"
  },
  {
    "text": "and this is where we introduce mediator so with mediator all we need to do is",
    "start": "2542130",
    "end": "2547410"
  },
  {
    "text": "inject a mediator and it knows where to find the the handlers that are",
    "start": "2547410",
    "end": "2552599"
  },
  {
    "text": "associated with a command or query so then we can just say mediator send this",
    "start": "2552599",
    "end": "2558359"
  },
  {
    "text": "get all products query or mediated send create product command so it's nice and",
    "start": "2558359",
    "end": "2564779"
  },
  {
    "text": "easy but now of course we have the power of the mediator pipeline so we can do a lot more with the requests and the",
    "start": "2564779",
    "end": "2571020"
  },
  {
    "text": "responses that are moving through our application",
    "start": "2571020",
    "end": "2575119"
  },
  {
    "text": "I think I'll go to the latest version",
    "start": "2577069",
    "end": "2582319"
  },
  {
    "text": "now so not too much has changed since we introduced mediator I've I have a bass",
    "start": "2582319",
    "end": "2588559"
  },
  {
    "text": "controller where we're using property injection to get mediators so I don't need to add anything to the constructor",
    "start": "2588559",
    "end": "2595219"
  },
  {
    "text": "I can just inherit from this base controller but you can see it is really simple this controller doesn't contain",
    "start": "2595219",
    "end": "2602029"
  },
  {
    "text": "any logic it's it's basically become infrastructure it just has a single",
    "start": "2602029",
    "end": "2608449"
  },
  {
    "text": "responsibility for products to turn a products request into a products response that's it all of the logic is",
    "start": "2608449",
    "end": "2615499"
  },
  {
    "text": "elsewhere if we have to switch away from web api to something like Nancy it's not",
    "start": "2615499",
    "end": "2620929"
  },
  {
    "text": "really going to be that big a deal one of the things that I'd like to show you",
    "start": "2620929",
    "end": "2627529"
  },
  {
    "text": "in the presentation layer is I also have a filter so when we run validation in",
    "start": "2627529",
    "end": "2634039"
  },
  {
    "text": "the application layer we throw an exception if there are validation errors a validation exception and it's up to",
    "start": "2634039",
    "end": "2640189"
  },
  {
    "text": "the client how they handle that exception obviously a console applications going to handle it",
    "start": "2640189",
    "end": "2646279"
  },
  {
    "text": "differently to a web application in this application I've created a simple custom exception filter and it essentially for",
    "start": "2646279",
    "end": "2655009"
  },
  {
    "text": "any exceptions that happen it'll catch it turn it into a bad request and return",
    "start": "2655009",
    "end": "2661999"
  },
  {
    "text": "the failures back to the client and that's going to be in a format similar to model state validation so one point",
    "start": "2661999",
    "end": "2675499"
  },
  {
    "text": "that I want to make here is that we should work hard to return well-defined view models and what do I mean by that",
    "start": "2675499",
    "end": "2682819"
  },
  {
    "text": "well we could return a product with the product details in order to edit a",
    "start": "2682819",
    "end": "2688519"
  },
  {
    "text": "product but we could actually return much more information than that we don't want our client to have to make",
    "start": "2688519",
    "end": "2693709"
  },
  {
    "text": "additional requests so for example when we're turning in a product view model we can also return things like edit enabled",
    "start": "2693709",
    "end": "2701839"
  },
  {
    "text": "or delete enabled so the clients not forced to make authorization checks to get the additional information that it",
    "start": "2701839",
    "end": "2707929"
  },
  {
    "text": "needs we can encapsulate within the view model everything that the view needs so that",
    "start": "2707929",
    "end": "2714239"
  },
  {
    "text": "it's simple for new clients to use that view model and it's also simple for us to test we can write a test to see that",
    "start": "2714239",
    "end": "2722099"
  },
  {
    "text": "the edit button is disabled by testing the view model directly and that's",
    "start": "2722099",
    "end": "2727739"
  },
  {
    "text": "something that's inside of core and as we know core has no external dependencies so it's very easy to write",
    "start": "2727739",
    "end": "2733769"
  },
  {
    "text": "tests for core so by encapsulating those things in the view model we do get great flexibility in in changing our our",
    "start": "2733769",
    "end": "2741809"
  },
  {
    "text": "presentation layer in the future the",
    "start": "2741809",
    "end": "2747119"
  },
  {
    "text": "last point that I want to make in this in this presentation layer is that we should use open API with our Web API s",
    "start": "2747119",
    "end": "2754849"
  },
  {
    "text": "so you can see here I've got an open API UI so this is the swagger UI and for my",
    "start": "2754849",
    "end": "2762749"
  },
  {
    "text": "developers they can come and explore this this API they can learn about the",
    "start": "2762749",
    "end": "2767759"
  },
  {
    "text": "API and understand how it works so I've got a customers get all customers here I",
    "start": "2767759",
    "end": "2773880"
  },
  {
    "text": "can click try it out execute that and I",
    "start": "2773880",
    "end": "2779309"
  },
  {
    "text": "can I can kind of see the response type and that sort of thing but I can also generate code from that because I have",
    "start": "2779309",
    "end": "2787109"
  },
  {
    "text": "the API specification set up I've actually used it to generate an angular client for this application so if I dive",
    "start": "2787109",
    "end": "2794399"
  },
  {
    "text": "into the angular application I have this",
    "start": "2794399",
    "end": "2801689"
  },
  {
    "text": "Northwind traders API written in typescript so this is this this is quite big I didn't have to write any of this",
    "start": "2801689",
    "end": "2807949"
  },
  {
    "text": "and I can use this directly so by implementing open API on on the Web API",
    "start": "2807949",
    "end": "2814189"
  },
  {
    "text": "we're actually making it easier for our developers to work with the system and we'll make it easier to to build",
    "start": "2814189",
    "end": "2820349"
  },
  {
    "text": "front-end applications in a microservices architecture I can also generate c-sharp clients so it can make",
    "start": "2820349",
    "end": "2827339"
  },
  {
    "text": "it easy to communicate with that with that microservice if that's my preferred method",
    "start": "2827339",
    "end": "2834019"
  },
  {
    "text": "this application is configured to use a tool called n swag to generate the open API specification and it actually",
    "start": "2838380",
    "end": "2845520"
  },
  {
    "text": "happens automatically when I build the web UI it will build a new specification",
    "start": "2845520",
    "end": "2851400"
  },
  {
    "text": "and place it here in WWE route specification JSON and it will also",
    "start": "2851400",
    "end": "2859349"
  },
  {
    "text": "generate the angular client that you saw and that's actually using msbuild so n",
    "start": "2859349",
    "end": "2866520"
  },
  {
    "text": "swag has a nice msbuild package and if we scroll down in this CS proj I've got",
    "start": "2866520",
    "end": "2872250"
  },
  {
    "text": "to comment it out at the moment don't need to it actually just runs n swag",
    "start": "2872250",
    "end": "2878400"
  },
  {
    "text": "after build and we'll keep that up to date so I don't have to worry about it anymore usually with these tools you",
    "start": "2878400",
    "end": "2886140"
  },
  {
    "text": "have two choices you can do it when that web applications running and automatically or you can do",
    "start": "2886140",
    "end": "2891810"
  },
  {
    "text": "it offline kind of how I'm doing it now I find it preferable to do it offline because then I don't run into any kind",
    "start": "2891810",
    "end": "2898470"
  },
  {
    "text": "of issues relating to authentication or forgetting to start the web front-end",
    "start": "2898470",
    "end": "2903990"
  },
  {
    "text": "when I'm trying to generate an angular client and that sort of thing",
    "start": "2903990",
    "end": "2908540"
  },
  {
    "text": "okay key points for the presentation layer so controllers should not contain any application logic we should",
    "start": "2918309",
    "end": "2924609"
  },
  {
    "text": "encapsulate that within our commands in queries we should create and consume while defined view models we want the",
    "start": "2924609",
    "end": "2931390"
  },
  {
    "text": "view model to contain everything that the view needs and open API bridges the",
    "start": "2931390",
    "end": "2936729"
  },
  {
    "text": "gap between the front end and the back end I have some recommended resources so",
    "start": "2936729",
    "end": "2942729"
  },
  {
    "text": "first is the book architect in modern web applications with asp net kora and Microsoft Azure so this is by Steve",
    "start": "2942729",
    "end": "2949209"
  },
  {
    "text": "Smith definitely encourage reading this don't worry if your stack is in asia or",
    "start": "2949209",
    "end": "2954569"
  },
  {
    "text": "asp.net core there's a lot of great value in this book this was the book",
    "start": "2954569",
    "end": "2959979"
  },
  {
    "text": "that I read that first got me interested in clean architecture I think it's actually up to version 2 to now next",
    "start": "2959979",
    "end": "2967089"
  },
  {
    "text": "book is building micro services so dotnet micro services architecture for containerize dotnet applications don't",
    "start": "2967089",
    "end": "2973329"
  },
  {
    "text": "worry that it says micro services don't worry that it says Asia and and don't even worry that it says containers",
    "start": "2973329",
    "end": "2980380"
  },
  {
    "text": "fact of the matter is there's a lot of great value in this book even if you're not building Micra services architecture",
    "start": "2980380",
    "end": "2985439"
  },
  {
    "text": "there's a lot to learn so definitely have a read of this book the value object that I implemented it actually",
    "start": "2985439",
    "end": "2992170"
  },
  {
    "text": "has an abstract base class behind it and that's where I got that implementation so great book and finally couldn't do a",
    "start": "2992170",
    "end": "2999099"
  },
  {
    "text": "clean architecture presentation without referring to Uncle Bob's book on clean architecture so obviously it's a one of",
    "start": "2999099",
    "end": "3006059"
  },
  {
    "text": "one of the best resources so next steps thank you for coming to my talk today if",
    "start": "3006059",
    "end": "3012420"
  },
  {
    "text": "you're keen to learn more please grab the code in slides you can find it at bitly Northwind traders and get started",
    "start": "3012420",
    "end": "3019829"
  },
  {
    "text": "try it for yourself I think you'll find that this approach is simple to build and maintain all the way from",
    "start": "3019829",
    "end": "3025499"
  },
  {
    "text": "development to production thank you [Applause]",
    "start": "3025499",
    "end": "3035800"
  }
]