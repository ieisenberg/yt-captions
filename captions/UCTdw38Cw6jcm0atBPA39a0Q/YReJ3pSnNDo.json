[
  {
    "text": "hey it's just turned four o'clock so we'll get going I've been doing a",
    "start": "2629",
    "end": "10110"
  },
  {
    "text": "workshop earlier this week I've already presented 700 slides of code this week I reckon we have time for another 80 or so",
    "start": "10110",
    "end": "16410"
  },
  {
    "text": "now so my name is Rob small Shire I work",
    "start": "16410",
    "end": "22170"
  },
  {
    "text": "for and part owned a consultancy based here in Norway we work in various",
    "start": "22170",
    "end": "27510"
  },
  {
    "text": "domains but mostly they have a science and or engineering flavor to them I've",
    "start": "27510",
    "end": "34290"
  },
  {
    "text": "been working with C++ since about 1995 or 1996 I discovered Python in either",
    "start": "34290",
    "end": "41579"
  },
  {
    "text": "2000 2001 so I've been working with both these languages for quite a substantial",
    "start": "41579",
    "end": "47460"
  },
  {
    "text": "period of time it's fair to say that my use of C++ is tailed off in the last five or six years simply because the",
    "start": "47460",
    "end": "54809"
  },
  {
    "text": "kind of projects I've been involved in and to use an unfortunate metaphor my",
    "start": "54809",
    "end": "61859"
  },
  {
    "text": "C++ has become a bit rusty so some of the C++ you here see here it might",
    "start": "61859",
    "end": "68400"
  },
  {
    "text": "remind you a bit more of C++ 98 rather than C++ 17 so I'm going to talk about",
    "start": "68400",
    "end": "74100"
  },
  {
    "text": "integrating Python and C++ together with a fair library called PI bind 11 so why",
    "start": "74100",
    "end": "82320"
  },
  {
    "text": "might you want to do this well one of the key motivations for doing this and",
    "start": "82320",
    "end": "87930"
  },
  {
    "text": "the one that's going to motivate the example in this talk is that you already have a useful valuable debugged piece of",
    "start": "87930",
    "end": "97470"
  },
  {
    "text": "technology in one of these languages and you need to use it from the other one so",
    "start": "97470",
    "end": "102630"
  },
  {
    "text": "in the example I'm going to give them the talk we have a very high quality C++ library that's been around for a very",
    "start": "102630",
    "end": "108270"
  },
  {
    "text": "long time and I would like to use it for whatever reason from Python so although",
    "start": "108270",
    "end": "115140"
  },
  {
    "text": "I don't really believe you should ever design with reuse in mind if you have something very useful it's much it makes",
    "start": "115140",
    "end": "121740"
  },
  {
    "text": "much more sense to reuse what you already have rather than trying to rewrite it from scratch in another",
    "start": "121740",
    "end": "127979"
  },
  {
    "text": "language just because it's another language and C++ and Python are interesting",
    "start": "127979",
    "end": "135129"
  },
  {
    "text": "complements their opposite in almost every way but in spite of the fact that they live at opposite ends of various",
    "start": "135129",
    "end": "141519"
  },
  {
    "text": "spectrums they do complement each other very well and they can be made to work",
    "start": "141519",
    "end": "146860"
  },
  {
    "text": "together very elegantly so C++ is very",
    "start": "146860",
    "end": "152980"
  },
  {
    "text": "fast arguably it's as fast as we can go without dropping down to assembler",
    "start": "152980",
    "end": "158580"
  },
  {
    "text": "Python is very slow very even compared",
    "start": "158580",
    "end": "163750"
  },
  {
    "text": "to things like JavaScript it's very slow you're looking at Python being nominally 10 times slower than C++ perhaps even",
    "start": "163750",
    "end": "172959"
  },
  {
    "text": "100 times slower so you don't go to Python for performance on the other hand as I experienced while I was writing the",
    "start": "172959",
    "end": "179709"
  },
  {
    "text": "code for this talk you don't go to C++ for productivity either it can take a",
    "start": "179709",
    "end": "184900"
  },
  {
    "text": "long time to write the code correctly it can take a long time that you spend a",
    "start": "184900",
    "end": "192190"
  },
  {
    "text": "lot of time just waiting it's my experience for the compiler and the linker so in terms of productivity I",
    "start": "192190",
    "end": "200410"
  },
  {
    "text": "find that I am much more productive in other languages which don't have that",
    "start": "200410",
    "end": "206680"
  },
  {
    "text": "compile link cycle I can just run code immediately the whole bunch of libraries",
    "start": "206680",
    "end": "212500"
  },
  {
    "text": "out there for helping you adapt C or C++ code to Python there's one called swig",
    "start": "212500",
    "end": "219220"
  },
  {
    "text": "even the author of swig recommends that you don't use swig I was I met with him",
    "start": "219220",
    "end": "225130"
  },
  {
    "text": "at Euro Python in Edinburgh a few weeks ago and over a few beers he confessed that he wished he'd never written it so",
    "start": "225130",
    "end": "232359"
  },
  {
    "text": "don't use swig as thing called c-types which is built into the Python standard",
    "start": "232359",
    "end": "238840"
  },
  {
    "text": "library that allows you to call C functions but not C++ functions there's",
    "start": "238840",
    "end": "244389"
  },
  {
    "text": "a thing called C FF I the C foreign function interface which is kind of clever because you can essentially",
    "start": "244389",
    "end": "250299"
  },
  {
    "text": "import a C header file the text header into c FF I and then call the functions",
    "start": "250299",
    "end": "256269"
  },
  {
    "text": "within it that's quite nice there is boost Python which is as its name suggests part of the boost library",
    "start": "256269",
    "end": "263099"
  },
  {
    "text": "that's still very much it is compatible with C++ 98 and 11 etc but",
    "start": "263099",
    "end": "271360"
  },
  {
    "text": "it's also weighed down by that compatibility and it's become extraordinarily complicated and nobody",
    "start": "271360",
    "end": "277810"
  },
  {
    "text": "wants to maintain it the guy who wrote it is now the lead developer on Swift for Apple so we're left with PI bind 11",
    "start": "277810",
    "end": "286540"
  },
  {
    "text": "which is much newer has ditched a lot of the legacy stuff that was really awkward to do in C++ 98 embraced and embraced",
    "start": "286540",
    "end": "295600"
  },
  {
    "text": "C++ 11 and later coincidentally this adapter is from the Norwegian Wikipedia",
    "start": "295600",
    "end": "303070"
  },
  {
    "text": "page on adapters and it looks incredibly dangerous to me how did isolate the",
    "start": "303070",
    "end": "308350"
  },
  {
    "text": "other hot pins when you plug it into one of them I don't know there were on that",
    "start": "308350",
    "end": "316660"
  },
  {
    "text": "thought let's move on there are two basic architectures if you like of when",
    "start": "316660",
    "end": "322930"
  },
  {
    "text": "it comes to how we can use Python and C++ together we can extend Python with",
    "start": "322930",
    "end": "329620"
  },
  {
    "text": "C++ this basically means we can write Python modules in C++ it's important to",
    "start": "329620",
    "end": "335650"
  },
  {
    "text": "realize that Python is itself written in C and in fact when you run the Python executable the Python excusable is a",
    "start": "335650",
    "end": "341830"
  },
  {
    "text": "very small executable and all it really does is load the Python library libcast",
    "start": "341830",
    "end": "347190"
  },
  {
    "text": "it some arguments and create an interpreter so once you realize that Lib",
    "start": "347190",
    "end": "353230"
  },
  {
    "text": "python is a c library it becomes a bit easier to understand how these different languages can talk together we can write",
    "start": "353230",
    "end": "359530"
  },
  {
    "text": "modules in C or C++ Lib Python will load them these modules will use the Python C",
    "start": "359530",
    "end": "365890"
  },
  {
    "text": "API Python has a C API for its interpreter and all of its built-in",
    "start": "365890",
    "end": "371050"
  },
  {
    "text": "types and now C++ modules can also use existing libraries which might be fed",
    "start": "371050",
    "end": "377830"
  },
  {
    "text": "party libraries as there will be in my example or they might be libraries in existing",
    "start": "377830",
    "end": "383230"
  },
  {
    "text": "libraries in your own domain that you have made the other approach which is a",
    "start": "383230",
    "end": "390970"
  },
  {
    "text": "bit trickier to make it work but it's very powerful as embedding so you",
    "start": "390970",
    "end": "396310"
  },
  {
    "text": "already have some existing application in plus plus say which is using some",
    "start": "396310",
    "end": "402130"
  },
  {
    "text": "libraries and you can have your library linked against and use lib - and it can",
    "start": "402130",
    "end": "411250"
  },
  {
    "text": "instantiate Python interpreter running in the same process as your rest of your",
    "start": "411250",
    "end": "416319"
  },
  {
    "text": "C++ application it can then load your modules written in C++ and your modules",
    "start": "416319",
    "end": "422710"
  },
  {
    "text": "in C++ can call other libraries in your application or in indeed the original",
    "start": "422710",
    "end": "427870"
  },
  {
    "text": "library in your application all within the same process so at this point you've",
    "start": "427870",
    "end": "434050"
  },
  {
    "text": "embedded a Python interpreter into a single program and you essentially have a single application running in a single",
    "start": "434050",
    "end": "440919"
  },
  {
    "text": "process where you can choose which parts of it you now write in C or C++ so that's a typical approach for adding a",
    "start": "440919",
    "end": "447430"
  },
  {
    "text": "scripting facility to an existing application so for the purposes of my",
    "start": "447430",
    "end": "455319"
  },
  {
    "text": "talk I need an example I need a library to rap preferably open-source preferably",
    "start": "455319",
    "end": "463389"
  },
  {
    "text": "C++ preferably not entirely straightforward C++ to make it a bit more interesting so I've chosen to wrap",
    "start": "463389",
    "end": "471070"
  },
  {
    "text": "a live with some people here might be familiar with called seagull Steagall is huge it's the computational",
    "start": "471070",
    "end": "477789"
  },
  {
    "text": "geometry algorithms library it's a good candidate for rapping it's very fast",
    "start": "477789",
    "end": "484210"
  },
  {
    "text": "it's in C++ it's very robust anyone",
    "start": "484210",
    "end": "489250"
  },
  {
    "text": "who's it don't any computational geometry will know that writing robust geometric algorithms is incredibly hard",
    "start": "489250",
    "end": "495400"
  },
  {
    "text": "it's got some very sophisticated mathematics in it so it knows when floating-point numbers aren't sufficient",
    "start": "495400",
    "end": "501190"
  },
  {
    "text": "and we'll switch to multiple precision numbers internally so it's not to lose precision so clearly right rewriting",
    "start": "501190",
    "end": "508900"
  },
  {
    "text": "something like this or even a small part of this in Python so that I can use it from Python is a non-starter Seaguar has",
    "start": "508900",
    "end": "516339"
  },
  {
    "text": "been developed over maybe 20 years or more so it's a major major undertaking",
    "start": "516339",
    "end": "521610"
  },
  {
    "text": "I'm gonna wrap a very tiny part of Siegel that deals with a thing called constrained and conforming",
    "start": "521610",
    "end": "528250"
  },
  {
    "text": "triangulations I is great to use some C++ I'd like to be able to use them from pi so let's go so I'm going to start by",
    "start": "528250",
    "end": "537670"
  },
  {
    "text": "showing you a C++ program which is using",
    "start": "537670",
    "end": "542800"
  },
  {
    "text": "C gal it's an application if you like and will talk you through what that program is doing and then when I've",
    "start": "542800",
    "end": "548500"
  },
  {
    "text": "shown you the C++ program we're gonna set off and try to make that same program in Python so typical C++ we have",
    "start": "548500",
    "end": "555970"
  },
  {
    "text": "to include a big pile of includes we go off and define a bunch of types you can",
    "start": "555970",
    "end": "561970"
  },
  {
    "text": "see that these aren't you know entirely straightforward types you nested templates many many levels deep here the",
    "start": "561970",
    "end": "571120"
  },
  {
    "text": "key thing is we're creating things like triangulation data structures and defining points and vertex handles all",
    "start": "571120",
    "end": "578019"
  },
  {
    "text": "the things we need to interact with the triangulation here's my main program the very first thing I do is I create a CDT",
    "start": "578019",
    "end": "585250"
  },
  {
    "text": "that's my type def for a constrained alone a triangulation in two dimensions",
    "start": "585250",
    "end": "590940"
  },
  {
    "text": "in the next part of my program I'm gonna have an unrolled loop I wouldn't normally write code like this but I've",
    "start": "590940",
    "end": "596800"
  },
  {
    "text": "unrolled it for clarity this is the unrolled loop I'm going to insert a",
    "start": "596800",
    "end": "601959"
  },
  {
    "text": "bunch of points into the constrain triangulation and each time I insert a",
    "start": "601959",
    "end": "607570"
  },
  {
    "text": "point it returns a vertex handle which is just an opaque handle on to the point I've just inserted there are my points",
    "start": "607570",
    "end": "617640"
  },
  {
    "text": "next I'm going to insert some constraints and a constraint is just a",
    "start": "617640",
    "end": "623410"
  },
  {
    "text": "pair of points that I've already inserted which define an edge in the triangulation and they set up a rule in",
    "start": "623410",
    "end": "629170"
  },
  {
    "text": "the triangulation that no triangles are allowed to cross one of these red edges",
    "start": "629170",
    "end": "635230"
  },
  {
    "text": "here so there's a constraint edges and while I'm doing this behind the scenes Seigle is actually maintaining this",
    "start": "635230",
    "end": "641290"
  },
  {
    "text": "triangulation data structure now I'm",
    "start": "641290",
    "end": "646390"
  },
  {
    "text": "going to create a thing called emeasure you'll notice that the measure is wraps",
    "start": "646390",
    "end": "651790"
  },
  {
    "text": "around the constraint triangulation and the measure allows me to specify seed so",
    "start": "651790",
    "end": "658870"
  },
  {
    "text": "I've created a vector with two seeds in it here and I pass the iterators to that vector to",
    "start": "658870",
    "end": "664800"
  },
  {
    "text": "seeds on the Mesha you can see the two seed points in yellow here and here and",
    "start": "664800",
    "end": "669839"
  },
  {
    "text": "the seeds allow me to control which triangles in the triangulation I'm actually interested in or not interested",
    "start": "669839",
    "end": "676380"
  },
  {
    "text": "in in this case we can strip away the",
    "start": "676380",
    "end": "681630"
  },
  {
    "text": "parts of the triangulation that was no interest in my picture at least now I'm",
    "start": "681630",
    "end": "686970"
  },
  {
    "text": "going to ask Siegel to make this triangulation conform to some geometrical rules to conform to think of",
    "start": "686970",
    "end": "693630"
  },
  {
    "text": "the de Launay property it doesn't matter what it is but you'll see when I do that too it says watch here the triangulation",
    "start": "693630",
    "end": "698700"
  },
  {
    "text": "changes and we get some new triangles and you're now gonna make it conform to the Gabriel property we get a few more",
    "start": "698700",
    "end": "705089"
  },
  {
    "text": "triangles then I'm going to set some meshing criteria and I see how to refine",
    "start": "705089",
    "end": "710730"
  },
  {
    "text": "the mesh I'm going to set some properties that control the minimum angles on the triangles small angle",
    "start": "710730",
    "end": "716160"
  },
  {
    "text": "triangles aren't very good when you're using them with simulations and set the triangle size never get a nice",
    "start": "716160",
    "end": "721800"
  },
  {
    "text": "triangular mesh and then I'm going to ask the seagull to optimize that mesh doing a thing called Lloyd optimization",
    "start": "721800",
    "end": "728760"
  },
  {
    "text": "which makes the triangles more even there we go so there we are beautiful",
    "start": "728760",
    "end": "734250"
  },
  {
    "text": "mesh so the problem is from my point of",
    "start": "734250",
    "end": "739470"
  },
  {
    "text": "view is I'm interested in triangles and even trivial changes to this program take me quite a long time it's at least",
    "start": "739470",
    "end": "748050"
  },
  {
    "text": "30 seconds if I just hit compile and run all right the seagull is not a straightforward library it's extremely",
    "start": "748050",
    "end": "755010"
  },
  {
    "text": "generic so it takes a long time see you got also uses boost so it's pretty slow",
    "start": "755010",
    "end": "763589"
  },
  {
    "text": "around this circuit so what can we do well we can try to wrap it using PI",
    "start": "763589",
    "end": "770250"
  },
  {
    "text": "binary 11 so this is a structure I think",
    "start": "770250",
    "end": "775680"
  },
  {
    "text": "this is one of the hardest things when you're starting something like this is how just how do you organize stuff where the things go you know in a sense",
    "start": "775680",
    "end": "782130"
  },
  {
    "text": "writing the code is the easy bit getting to this point and ever understanding where to put things usually trips me up so I'm gonna have an",
    "start": "782130",
    "end": "789449"
  },
  {
    "text": "example program triangulate PI I've got PI bind 11 in a Lib directory",
    "start": "789449",
    "end": "796020"
  },
  {
    "text": "I need that I'm going to be using it I've got the library I'm rapping see girl that's gonna live in here",
    "start": "796020",
    "end": "801060"
  },
  {
    "text": "specifically this header here and then I've got my source directory which is",
    "start": "801060",
    "end": "806160"
  },
  {
    "text": "where my rapper is gonna live inside source I have measure measure is a Python",
    "start": "806160",
    "end": "811920"
  },
  {
    "text": "package it's just a directory on the file system that has a thing called this",
    "start": "811920",
    "end": "816960"
  },
  {
    "text": "is pronounced dunder init as a thing called dunder init PI in that directory",
    "start": "816960",
    "end": "822570"
  },
  {
    "text": "and it has Seagal measure dot CPP which we're gonna write and then can",
    "start": "822570",
    "end": "829380"
  },
  {
    "text": "optionally have some C++ tests and some Python tests I need to build the C++ with C make and I need to explain how",
    "start": "829380",
    "end": "836460"
  },
  {
    "text": "that build works to Python with a standard setup dot pi so let's um let's",
    "start": "836460",
    "end": "844820"
  },
  {
    "text": "just start off watching some Python so I'd like to do something like this import measure seagull measure this is",
    "start": "844820",
    "end": "852120"
  },
  {
    "text": "my out to sea Python module this is my inner Python module which will be written in C++ and of course I can't do",
    "start": "852120",
    "end": "858210"
  },
  {
    "text": "this yet it doesn't exist so we need to begin writing some code in here in",
    "start": "858210",
    "end": "864330"
  },
  {
    "text": "seagull measured CPP so this is just about the simplest pie-by and 11 module",
    "start": "864330",
    "end": "871620"
  },
  {
    "text": "we include pi bind 11 set up the namespace alias and then use this macro",
    "start": "871620",
    "end": "878190"
  },
  {
    "text": "to set up the module name and M is a C++ object that represents the concept of",
    "start": "878190",
    "end": "884430"
  },
  {
    "text": "the Python module that we're making we now need to build it so we neither see",
    "start": "884430",
    "end": "892050"
  },
  {
    "text": "make lists I'm no fan at all of C make its emerges something of a de facto",
    "start": "892050",
    "end": "897450"
  },
  {
    "text": "standard so I'm gonna try to use it and we have a C make file which says the",
    "start": "897450",
    "end": "904170"
  },
  {
    "text": "project is Seaguar measure we're using seagull seagull uses boost so we need",
    "start": "904170",
    "end": "909240"
  },
  {
    "text": "that as well and we're telling it about pi bind 11 pi",
    "start": "909240",
    "end": "915030"
  },
  {
    "text": "by and 11 comes with C make support which is why I'm using C make and then all I need to do is use this seagull",
    "start": "915030",
    "end": "921570"
  },
  {
    "text": "function here pi bind 11 add module is the module name here's where to find the",
    "start": "921570",
    "end": "927900"
  },
  {
    "text": "source code for the module and C make will do its thing all Python modules that are packaged up",
    "start": "927900",
    "end": "935820"
  },
  {
    "text": "need a thing called setup type py which uses setup tools to package Python into",
    "start": "935820",
    "end": "941640"
  },
  {
    "text": "something we can redistribute so I need a setup dot pi as well set up top PI",
    "start": "941640",
    "end": "947370"
  },
  {
    "text": "files usually pretty simple they usually look something like this just you know the name of the module the version who",
    "start": "947370",
    "end": "952500"
  },
  {
    "text": "wrote it we need to explain in setup doc py that this code needs to be compiled using a",
    "start": "952500",
    "end": "959730"
  },
  {
    "text": "thing called C make extension unfortunately we have to write C make extension which looks like this it's",
    "start": "959730",
    "end": "967770"
  },
  {
    "text": "just horrible fortunately this is just boilerplate and you can copy and paste it and you can",
    "start": "967770",
    "end": "972870"
  },
  {
    "text": "copy and paste the other half of it as well that's quite a lot of code in here required to make setup tools talk to see",
    "start": "972870",
    "end": "979110"
  },
  {
    "text": "make but you only have to write it once in fact you can just do what I do and just cargo cult it and copy it off the",
    "start": "979110",
    "end": "984900"
  },
  {
    "text": "internet so we've come now we need to",
    "start": "984900",
    "end": "992820"
  },
  {
    "text": "run set a block py and when you give it develop that argument there is usually",
    "start": "992820",
    "end": "998310"
  },
  {
    "text": "things like develop or install develop means that I want to be able to install",
    "start": "998310",
    "end": "1003440"
  },
  {
    "text": "the code in such a way that I can still develop on it while it's installed into my current Python so we run this it goes",
    "start": "1003440",
    "end": "1010040"
  },
  {
    "text": "away set up dot py calls C makes you may just the compiling and linking we're done here",
    "start": "1010040",
    "end": "1015500"
  },
  {
    "text": "it's built that takes about a minute I",
    "start": "1015500",
    "end": "1022540"
  },
  {
    "text": "start at Python here we are Python 37 import measure so you got measure great",
    "start": "1022540",
    "end": "1028428"
  },
  {
    "text": "it works we've got the imported the C++ module we ask for help on the module",
    "start": "1028429",
    "end": "1035270"
  },
  {
    "text": "it's not very interesting there are no classes nor functions in here yet but you can see that the module is",
    "start": "1035270",
    "end": "1041209"
  },
  {
    "text": "implemented as a shared library here on my Mac normally when your modules",
    "start": "1041209",
    "end": "1047750"
  },
  {
    "text": "written in Python you get the path or PI file here so the module is just a dynamically loaded library so now let's",
    "start": "1047750",
    "end": "1056030"
  },
  {
    "text": "crack on and start building the mesh from Python so in my in my little test a",
    "start": "1056030",
    "end": "1064790"
  },
  {
    "text": "I just did in poor measure Seger measure and switch this around so it's from measure Segal",
    "start": "1064790",
    "end": "1070340"
  },
  {
    "text": "measure import to constraint the law no triangulation as CDT in Python we can",
    "start": "1070340",
    "end": "1076100"
  },
  {
    "text": "rename things on import which is very handy so here's my very basic Python",
    "start": "1076100",
    "end": "1083900"
  },
  {
    "text": "program those of you aren't familiar with this this is how you tell Python what to do when a module is executed and",
    "start": "1083900",
    "end": "1091760"
  },
  {
    "text": "what it says is when this module is executed call main in main we",
    "start": "1091760",
    "end": "1097640"
  },
  {
    "text": "instantiate a CDT and call it CDT simple",
    "start": "1097640",
    "end": "1104890"
  },
  {
    "text": "ok our module is not very interesting yet so to get that to work we need to",
    "start": "1104890",
    "end": "1116870"
  },
  {
    "text": "tell in C++ we need to use high bind 11 to explain that we want to wrap an",
    "start": "1116870",
    "end": "1125750"
  },
  {
    "text": "existing type CDT and we want to call it this in Python and it must have a",
    "start": "1125750",
    "end": "1132980"
  },
  {
    "text": "default constructor okay no it's the underscore here this is not the class",
    "start": "1132980",
    "end": "1138620"
  },
  {
    "text": "keyword this is a function within the PI",
    "start": "1138620",
    "end": "1143900"
  },
  {
    "text": "bind 11 named space but is I hope you agree that's fairly readable you'll see",
    "start": "1143900",
    "end": "1152090"
  },
  {
    "text": "why I have this slightly odd placement of semicolons in a moment so we need all",
    "start": "1152090",
    "end": "1159590"
  },
  {
    "text": "the we need all the includes and all of the I've got fancy here in my C++ this",
    "start": "1159590",
    "end": "1166580"
  },
  {
    "text": "is I've moved away from type deafs you seem to whatever these are called and now I'm used it so I need all of this",
    "start": "1166580",
    "end": "1173150"
  },
  {
    "text": "just to find out what CDT is ok so I can use it here",
    "start": "1173150",
    "end": "1178840"
  },
  {
    "text": "okay so next we what do we need to do we",
    "start": "1180690",
    "end": "1187210"
  },
  {
    "text": "need to insert the points into the triangulation so I'm just going to take the same unrolled loop approach that I",
    "start": "1187210",
    "end": "1193419"
  },
  {
    "text": "took in the C++ so in order to get this to work what do we need to implement",
    "start": "1193419",
    "end": "1199890"
  },
  {
    "text": "well we need to be able to import point so that we can get hold of that we need",
    "start": "1199890",
    "end": "1205750"
  },
  {
    "text": "to wrap the point class we need to wrap the insert method on the triangulation and we need to even though this vertex",
    "start": "1205750",
    "end": "1213429"
  },
  {
    "text": "handle type is never named in Python because python is dynamically typed we",
    "start": "1213429",
    "end": "1218740"
  },
  {
    "text": "need to have wrapped it so that this function is able to return it because",
    "start": "1218740",
    "end": "1225399"
  },
  {
    "text": "insert returns this vertex handle so back to the c++ we're not quite doing",
    "start": "1225399",
    "end": "1233380"
  },
  {
    "text": "TDD here but we're definitely driving the implementation of this module by requirements in the client code so",
    "start": "1233380",
    "end": "1240510"
  },
  {
    "text": "inside the module we need some more code now we need the point class so I have to define the point CDT gives us a type for",
    "start": "1240510",
    "end": "1248440"
  },
  {
    "text": "that and this is pretty much the minimum useful point again",
    "start": "1248440",
    "end": "1253690"
  },
  {
    "text": "PI class I'm wrapping the point I'll in this module I want to call the point",
    "start": "1253690",
    "end": "1259330"
  },
  {
    "text": "this in python or to call it point and I'm going to define an initializer for",
    "start": "1259330",
    "end": "1265000"
  },
  {
    "text": "it that takes two integers and I can tell PI bind 11 what I want the arguments to be named in Python Python",
    "start": "1265000",
    "end": "1272890"
  },
  {
    "text": "allows named arguments and we can explain that two pi bind 11 by using",
    "start": "1272890",
    "end": "1280360"
  },
  {
    "text": "this pi argh that's pretty minimal I'm gonna go a bit further I'd also like to be able to",
    "start": "1280360",
    "end": "1286750"
  },
  {
    "text": "construct my point from two doubles this is kind of interesting because we don't",
    "start": "1286750",
    "end": "1292419"
  },
  {
    "text": "have overloading in Python because it's dynamically typed but when I'm writing a Python module in C++ I can overload",
    "start": "1292419",
    "end": "1299320"
  },
  {
    "text": "functions and the machinery is smart enough to dispatch to the right one",
    "start": "1299320",
    "end": "1304929"
  },
  {
    "text": "depending on which one I'm using on the actual dynamic type at runtime",
    "start": "1304929",
    "end": "1311080"
  },
  {
    "text": "so there's quite a lot machinery in pi binder to make all of this work I also want to",
    "start": "1311080",
    "end": "1318219"
  },
  {
    "text": "add a couple of properties so in Python we have properties which enables us to enable us to access the attributes of",
    "start": "1318219",
    "end": "1325059"
  },
  {
    "text": "objects without going through a function call okay we don't need the parentheses on the end I'd like these properties to",
    "start": "1325059",
    "end": "1331149"
  },
  {
    "text": "be read-only so use def property read-only I'd like my properties to be called x and y what do they do they call these",
    "start": "1331149",
    "end": "1339999"
  },
  {
    "text": "two functions so here I'm passing a pointer to point to member function here",
    "start": "1339999",
    "end": "1346229"
  },
  {
    "text": "okay so whenever I get that property from Python it will call that C++",
    "start": "1346229",
    "end": "1351669"
  },
  {
    "text": "function so this is quite nice and it's",
    "start": "1351669",
    "end": "1356769"
  },
  {
    "text": "quite readable and now you can see why my semicolon is here because all of this is one statement and these are chained",
    "start": "1356769",
    "end": "1362649"
  },
  {
    "text": "method calls make sense now when",
    "start": "1362649",
    "end": "1374859"
  },
  {
    "text": "everyone teaching my Python classes I strongly encourage people to implement a special Python method called dunder",
    "start": "1374859",
    "end": "1381549"
  },
  {
    "text": "repper underscore underscore our EPR underscore underscore and then the wrapper is the special Python method",
    "start": "1381549",
    "end": "1387940"
  },
  {
    "text": "that gets used to display objects to the console particularly in an interactive",
    "start": "1387940",
    "end": "1393070"
  },
  {
    "text": "session and it's much easier to debug your Python programs if they know if the objects know how to display themselves",
    "start": "1393070",
    "end": "1399009"
  },
  {
    "text": "so we're going to defined in the wrapper here and my dunder wrapper implementation is going to be a lambda",
    "start": "1399009",
    "end": "1405820"
  },
  {
    "text": "and I'm going to use some fairly horrible string concatenation here to put the description of that object",
    "start": "1405820",
    "end": "1412239"
  },
  {
    "text": "together so start with a string point and I'm just going to convert the coordinates to strings and make it look",
    "start": "1412239",
    "end": "1418929"
  },
  {
    "text": "nice so it's very important to remember dunder repper if you want to have a nice",
    "start": "1418929",
    "end": "1424450"
  },
  {
    "text": "development experience when you're working from Python especially for a value type like points here yeah",
    "start": "1424450",
    "end": "1434429"
  },
  {
    "text": "I do have a comment on that any object",
    "start": "1435510",
    "end": "1450780"
  },
  {
    "text": "you have in Python will inherit done the wrapper and then the straw from the object base class then the wrapper is",
    "start": "1450780",
    "end": "1459350"
  },
  {
    "text": "really intended for developers and then the stirrer is intended for the rest of",
    "start": "1459350",
    "end": "1464460"
  },
  {
    "text": "the human race so that's generally how you organize things so put that way I",
    "start": "1464460",
    "end": "1471180"
  },
  {
    "text": "would say you should always have a dunder wrapper because otherwise you're going to get the inherited dunder wrapper from object which just prints",
    "start": "1471180",
    "end": "1477030"
  },
  {
    "text": "the object address which is not very useful yeah I'm not going to cover that",
    "start": "1477030",
    "end": "1491790"
  },
  {
    "text": "today but there is support in PI by and 11 specifically for numpy and some other",
    "start": "1491790",
    "end": "1497220"
  },
  {
    "text": "very popular numerical libraries yeah so you can do things like access numpy",
    "start": "1497220",
    "end": "1502470"
  },
  {
    "text": "array arrays from c++ yeah I'm not going to show that today though so we also",
    "start": "1502470",
    "end": "1508140"
  },
  {
    "text": "need to wrap this vertex handle vertex handle we don't need to say anything",
    "start": "1508140",
    "end": "1513360"
  },
  {
    "text": "about it all we need to do is be able to own a vertex handle from Python it can be completely opaque so this is very",
    "start": "1513360",
    "end": "1518880"
  },
  {
    "text": "concise we just have vertex handle in this module called vertex handle okay",
    "start": "1518880",
    "end": "1527700"
  },
  {
    "text": "and then we need to add the insert method to our triangulation class so the",
    "start": "1527700",
    "end": "1534810"
  },
  {
    "text": "insert method here is again bound to this lambda which just calls CDT insert",
    "start": "1534810",
    "end": "1540090"
  },
  {
    "text": "why have I used the lambda rather than a function pointer like I did before it's because insert is overloaded about 37",
    "start": "1540090",
    "end": "1546960"
  },
  {
    "text": "times and you have to get into quite unpleasant syntax casting the function",
    "start": "1546960",
    "end": "1552180"
  },
  {
    "text": "pointer to explain exactly to 5 and 11 which overload you want to call using",
    "start": "1552180",
    "end": "1557550"
  },
  {
    "text": "the lambda avoids that and frankly it's just easier to read",
    "start": "1557550",
    "end": "1562850"
  },
  {
    "text": "okay so that's inserting the points now we need to insert the constraints these",
    "start": "1562900",
    "end": "1569900"
  },
  {
    "text": "accept vertex handles these are pay cob jects so let's see how to do that",
    "start": "1569900",
    "end": "1575620"
  },
  {
    "text": "actually let's see that we can't do it yet because we have no insert constraint",
    "start": "1575620",
    "end": "1580660"
  },
  {
    "text": "and we run our Python program so insert constraint is going to look like this",
    "start": "1580660",
    "end": "1587770"
  },
  {
    "text": "again it's going to be bound to a lambda that accept to vertex handles and just calls insert constraint so you can see",
    "start": "1587770",
    "end": "1595130"
  },
  {
    "text": "most of these wrappers are really straightforward extremely simple and you have quite I haven't done it yet we ever",
    "start": "1595130",
    "end": "1601370"
  },
  {
    "text": "get freedom you can call the method in Python something different to what it was called in C++ you'll see that come up soon for my own convenience and so",
    "start": "1601370",
    "end": "1610010"
  },
  {
    "text": "that I can debug the thing and make sure this is actually working I'm just going to add a couple of functions which get",
    "start": "1610010",
    "end": "1615230"
  },
  {
    "text": "the number of vertices in the triangulation and the number of triangles in the triangulation faces",
    "start": "1615230",
    "end": "1621190"
  },
  {
    "text": "these are implemented using function pointers okay let's crack on so now I've",
    "start": "1621190",
    "end": "1631490"
  },
  {
    "text": "run my program and I've inserted 28 vertices moving forward next thing I",
    "start": "1631490",
    "end": "1638419"
  },
  {
    "text": "need to do is insert these two seed points to explain which parts of the triangulation I'm interested in this is",
    "start": "1638419",
    "end": "1644510"
  },
  {
    "text": "a little bit more interesting from a wrapping point of view in Python I'd like to be able to write this I'd like",
    "start": "1644510",
    "end": "1649580"
  },
  {
    "text": "to put lights we had to create my measure create a Python list with two my points in remember these are C++ objects",
    "start": "1649580",
    "end": "1656409"
  },
  {
    "text": "this is a Python list containing two C++ objects and I'd like to pass my seeds to",
    "start": "1656409",
    "end": "1662950"
  },
  {
    "text": "measure dot seeds from to tell the measure about these two seed points I'd",
    "start": "1662950",
    "end": "1669409"
  },
  {
    "text": "like my seeds from to be very generic from a Python point of view so that seeds can be any Python iterable not",
    "start": "1669409",
    "end": "1675860"
  },
  {
    "text": "just a list as it is concretely here but a list a tuple a set just any collection",
    "start": "1675860",
    "end": "1681409"
  },
  {
    "text": "of points so I'd like this to be quite generic I struggled a little bit with",
    "start": "1681409",
    "end": "1688100"
  },
  {
    "text": "this reading the that I have to warn you the PI by and 11 documentation is not fantastic it's pretty bare-bones",
    "start": "1688100",
    "end": "1695660"
  },
  {
    "text": "so you have to spend a bit of time working things out for yourself pie-by and 11 gives us an iterator type",
    "start": "1695660",
    "end": "1702920"
  },
  {
    "text": "which is a wrapper around Python iterators in C++ it gives us pie eater",
    "start": "1702920",
    "end": "1709120"
  },
  {
    "text": "which can take an iterable object and",
    "start": "1709120",
    "end": "1714470"
  },
  {
    "text": "give us a Python iterator what I can actually do with Pietra at PI a traitor is a is a C++ iterator wrapper around a",
    "start": "1714470",
    "end": "1722630"
  },
  {
    "text": "Python iterator right so it looks like an STL iterator but its implementation",
    "start": "1722630",
    "end": "1728990"
  },
  {
    "text": "is a Python in for iterator as implemented by the Python virtual",
    "start": "1728990",
    "end": "1734840"
  },
  {
    "text": "machine by the Python runtime so set seeds is just expecting any forward",
    "start": "1734840",
    "end": "1741140"
  },
  {
    "text": "iterator which has a value type of points so I can give it my Python",
    "start": "1741140",
    "end": "1747530"
  },
  {
    "text": "iterator here this actually fails and it fails because the iterator doesn't know",
    "start": "1747530",
    "end": "1753020"
  },
  {
    "text": "that its value type needs to be point its value type is just PI object which",
    "start": "1753020",
    "end": "1758450"
  },
  {
    "text": "is just the most generic thing so that doesn't really work to make this work adapt my Python iterators to my c++",
    "start": "1758450",
    "end": "1767750"
  },
  {
    "text": "iterators and to write an iterator class iterate a template class called typed",
    "start": "1767750",
    "end": "1773660"
  },
  {
    "text": "input iterator and you can see here that I'm taking my Python iterator adapting",
    "start": "1773660",
    "end": "1780380"
  },
  {
    "text": "it to my typed in put it rater with a value type of point and then passing those iterators to set seeds in c gal",
    "start": "1780380",
    "end": "1786620"
  },
  {
    "text": "yeah the only thing the only interesting thing that typed input iterator does is",
    "start": "1786620",
    "end": "1793000"
  },
  {
    "text": "call this cast function from pi bind 11 just to make the type conversion work",
    "start": "1793000",
    "end": "1800360"
  },
  {
    "text": "all the rest is just iterator boilerplate but it works ok now I need",
    "start": "1800360",
    "end": "1810110"
  },
  {
    "text": "to wrap my conforming delorean conforming gabriel functions this is",
    "start": "1810110",
    "end": "1815780"
  },
  {
    "text": "very straightforward the module object has a def I can give a function name a",
    "start": "1815780",
    "end": "1822740"
  },
  {
    "text": "function pointer an argument name I should have done this throughout I haven't for space reasons but you can",
    "start": "1822740",
    "end": "1828950"
  },
  {
    "text": "also give of a docstring and that will be accessible from Python so when you do",
    "start": "1828950",
    "end": "1833989"
  },
  {
    "text": "help in Python on your module you can get the documentation that you've written on the C++ side of things so",
    "start": "1833989",
    "end": "1841099"
  },
  {
    "text": "that's quite nice okay so we just run our program again doing quite well here",
    "start": "1841099",
    "end": "1847929"
  },
  {
    "text": "so we start off with 28 vertices we do the de Launay conforming and we get 31",
    "start": "1847929",
    "end": "1853700"
  },
  {
    "text": "we do gabriel we get 37 so the program seems to be working that's good now I",
    "start": "1853700",
    "end": "1862129"
  },
  {
    "text": "need to refine the mesh and for this I need to wrap this criteria object or",
    "start": "1862129",
    "end": "1869329"
  },
  {
    "text": "create this criteria object which is a seagull thing again which the mesh uses to decide how to do the meshing so back",
    "start": "1869329",
    "end": "1878209"
  },
  {
    "text": "in C++ we have to write all of this we have to create the criteria object",
    "start": "1878209",
    "end": "1885879"
  },
  {
    "text": "notice now new thing here PI R doesn't just allow me to name the argument",
    "start": "1886479",
    "end": "1891889"
  },
  {
    "text": "allows me to specify a default for the Python function from C++ so I can do",
    "start": "1891889",
    "end": "1897919"
  },
  {
    "text": "default arguments here too which is nice and then on my measure here I've just",
    "start": "1897919",
    "end": "1907070"
  },
  {
    "text": "added oh yes I've added def property so",
    "start": "1907070",
    "end": "1912919"
  },
  {
    "text": "before I had a property read-only this is a readwrite property where I can set",
    "start": "1912919",
    "end": "1918349"
  },
  {
    "text": "the criteria the property setter is this function pointer the property getter",
    "start": "1918349",
    "end": "1923929"
  },
  {
    "text": "sorry the property getter is this function pointer the property setter is this lambda which just falls through to",
    "start": "1923929",
    "end": "1929839"
  },
  {
    "text": "set criteria again I use the lambda there to avoid casting function pointers",
    "start": "1929839",
    "end": "1937089"
  },
  {
    "text": "okay how are we doing",
    "start": "1937959",
    "end": "1943120"
  },
  {
    "text": "let's run our program again obviously rather than we just ridding the program all the time I should have some tests",
    "start": "1943120",
    "end": "1949100"
  },
  {
    "text": "but then that would be even more code for you to look at so after the mesh is",
    "start": "1949100",
    "end": "1954260"
  },
  {
    "text": "done its work we've now got 431 vertices so everything seems to be working nicely and then the last thing we need to do is",
    "start": "1954260",
    "end": "1960980"
  },
  {
    "text": "this mesh optimization step with Lloyd optimize this is pretty straightforward actually no it's not straightforward and",
    "start": "1960980",
    "end": "1967730"
  },
  {
    "text": "it's not straightforward because Lloyd optimized uses some quite clever machinery from boost to allow you to do",
    "start": "1967730",
    "end": "1975200"
  },
  {
    "text": "named arguments in C++ which I won't even pretend to understand but in order",
    "start": "1975200",
    "end": "1981350"
  },
  {
    "text": "to wrap it I had to write all of this in order to be able to call Lloyd optimize mesh to",
    "start": "1981350",
    "end": "1989389"
  },
  {
    "text": "again you can see my use of Pi arc here to specify the argument names and the",
    "start": "1989389",
    "end": "1994519"
  },
  {
    "text": "defaults so I've got at this point I've got a thing I've got to the end of my",
    "start": "1994519",
    "end": "2000220"
  },
  {
    "text": "original C++ program and reproduced it in Python which is nice",
    "start": "2000220",
    "end": "2008850"
  },
  {
    "text": "and of course fiddling with this Python program and running again takes literally 2 seconds whereas",
    "start": "2008850",
    "end": "2016000"
  },
  {
    "text": "fiddling with a C++ program I'm running it again took me at least half a minute maybe longer right now I need to this",
    "start": "2016000",
    "end": "2026529"
  },
  {
    "text": "program is great allows me to build a mesh but I can't now I can't actually access the mesh I can't iterate over it",
    "start": "2026529",
    "end": "2032649"
  },
  {
    "text": "or get hold of the triangles or do anything with them so how do we do that",
    "start": "2032649",
    "end": "2038590"
  },
  {
    "text": "and we get the mesh out well see gal",
    "start": "2038590",
    "end": "2044200"
  },
  {
    "text": "defines on its triangulation some iterator ranges vertices begin to end",
    "start": "2044200",
    "end": "2050710"
  },
  {
    "text": "and phases begin to end this finite is here because triangulations have",
    "start": "2050710",
    "end": "2055810"
  },
  {
    "text": "vertices in infinity for reasons I'm not going to begin to go into and so what",
    "start": "2055810",
    "end": "2063579"
  },
  {
    "text": "I'm doing here is I'm saying i want finite vertices function on my constrain",
    "start": "2063579",
    "end": "2069429"
  },
  {
    "text": "triangulation object i want it to return a Python iterator and it's",
    "start": "2069429",
    "end": "2076330"
  },
  {
    "text": "it's really straightforward to use it looks like it is I just call make",
    "start": "2076330",
    "end": "2081639"
  },
  {
    "text": "iterator give it my C++ iterators and it returns a Python iterator that wraps them that's really straightforward same",
    "start": "2081640",
    "end": "2090190"
  },
  {
    "text": "for the faces when I was writing this I ran into real trouble figuring out what",
    "start": "2090190",
    "end": "2096280"
  },
  {
    "text": "the value type of these iterators was because the siegel templates are nested",
    "start": "2096280",
    "end": "2101920"
  },
  {
    "text": "so deep and I was tracing this through the code trying to find out what the value type actually was because I needed",
    "start": "2101920",
    "end": "2107710"
  },
  {
    "text": "to expose that value type to Python so that the iterator could be dereferenced",
    "start": "2107710",
    "end": "2114090"
  },
  {
    "text": "fortunately the solution came in the elevator this morning which I was sharing with some world renowned C++",
    "start": "2114090",
    "end": "2120370"
  },
  {
    "text": "experts he gave me the key piece of advice I needed and the key piece of advice is you need to go to stack",
    "start": "2120370",
    "end": "2126700"
  },
  {
    "text": "overflow and paste in this type name function which allows you at runtime to",
    "start": "2126700",
    "end": "2132790"
  },
  {
    "text": "print out as text the actual type of a thing you have in C++ so I actually",
    "start": "2132790",
    "end": "2139810"
  },
  {
    "text": "actually wrapped a function called print faces iterative value type which calls type name on finite faces iterative",
    "start": "2139810",
    "end": "2146950"
  },
  {
    "text": "value type because I had no idea what this type walls and then I was able to print it out and when I printed it out I",
    "start": "2146950",
    "end": "2152620"
  },
  {
    "text": "wasn't much wiser so I pasted it into my text editor and reformatted it and got",
    "start": "2152620",
    "end": "2157780"
  },
  {
    "text": "this so that was the actual value type of via tracer which I was struggling to find so the reason Siegel is like this",
    "start": "2157780",
    "end": "2167560"
  },
  {
    "text": "is because you could parameterize it on things like the type of float:right you can put your own number types into it so",
    "start": "2167560",
    "end": "2173470"
  },
  {
    "text": "it's extremely generic but I did struggle with that I admit I got a great hint this morning in the in the lift",
    "start": "2173470",
    "end": "2181350"
  },
  {
    "text": "yeah so anyway the truth has work when she figure out which types you need to",
    "start": "2182340",
    "end": "2187480"
  },
  {
    "text": "expose another important thing I've added which you'll see why in a moment",
    "start": "2187480",
    "end": "2193450"
  },
  {
    "text": "is point is a value type you know we don't really deal with points by reference we copy them around okay and",
    "start": "2193450",
    "end": "2200670"
  },
  {
    "text": "it's very important that for value types especially for one to use them in like a dictionary or a set in Python that they",
    "start": "2200670",
    "end": "2207460"
  },
  {
    "text": "know how to generate a hash code and equality is defined for these things so I've had to define dunder hash which",
    "start": "2207460",
    "end": "2214930"
  },
  {
    "text": "makes a type in Python hashable and then the EQ so Python understands how to compare things for equality with the",
    "start": "2214930",
    "end": "2221170"
  },
  {
    "text": "double equals so you can see they are left fairly straightforward then the EQ",
    "start": "2221170",
    "end": "2226630"
  },
  {
    "text": "just falls through to the Equality operator and C++ then the hash is a",
    "start": "2226630",
    "end": "2231730"
  },
  {
    "text": "little bit more involved I was very happy to see that C++ now has a std hash so I was able to use that to generate my",
    "start": "2231730",
    "end": "2239800"
  },
  {
    "text": "integer hash code based upon the hashes of the x and y-coordinates so it seems",
    "start": "2239800",
    "end": "2247300"
  },
  {
    "text": "to work so now it's slightly more interesting Python program using all",
    "start": "2247300",
    "end": "2253540"
  },
  {
    "text": "that stuff so this is a complete Python program we take in some command line",
    "start": "2253540",
    "end": "2260290"
  },
  {
    "text": "arguments I get the file name for an edge file that's going to contain some",
    "start": "2260290",
    "end": "2266020"
  },
  {
    "text": "edges just some line segments I'm gonna take in the file name from mesh file",
    "start": "2266020",
    "end": "2271510"
  },
  {
    "text": "name which is what I'm this program is going to write out and I'm going to take in a number which is the size of the",
    "start": "2271510",
    "end": "2276609"
  },
  {
    "text": "mesh that I'd like to produce I'm going to create a constrained alone a triangulation this is my siegel object",
    "start": "2276609",
    "end": "2283180"
  },
  {
    "text": "created from Python I'm gonna open my edge file for each line in the file I'm",
    "start": "2283180",
    "end": "2289510"
  },
  {
    "text": "gonna read the line I'm gonna split it up put whitespace I'm gonna map each",
    "start": "2289510",
    "end": "2295060"
  },
  {
    "text": "field to through the float function to turn it into a floating-point number and I'm going to unpack the result into a X",
    "start": "2295060",
    "end": "2301210"
  },
  {
    "text": "a Y B X B Y so there are two points at the ends of a line segment okay I use",
    "start": "2301210",
    "end": "2307990"
  },
  {
    "text": "these to create the two points a and B which I insert into my triangulation and",
    "start": "2307990",
    "end": "2313150"
  },
  {
    "text": "then I insert the constraint edge between a and B so these are those two vertex handles that came back I just",
    "start": "2313150",
    "end": "2318790"
  },
  {
    "text": "pass them straight back to C gal here I don't never need to know what they are they're just completely opaque types",
    "start": "2318790",
    "end": "2326040"
  },
  {
    "text": "then I refine my triangulation by making it de Launay compliance and Gabriel",
    "start": "2326040",
    "end": "2331119"
  },
  {
    "text": "compliant I create my measure just meshing do the lloyd optimization on the",
    "start": "2331119",
    "end": "2337359"
  },
  {
    "text": "mesh from at this point I've built a nice mesh but it's living inside the C++",
    "start": "2337359",
    "end": "2342490"
  },
  {
    "text": "date structure so we need to pull it back now so that we can access it from Python so",
    "start": "2342490",
    "end": "2348380"
  },
  {
    "text": "what do I do here I build a dictionary which maps points which are now hashable",
    "start": "2348380",
    "end": "2355339"
  },
  {
    "text": "so they can be used as dictionary keys to an index of the point so the first",
    "start": "2355339",
    "end": "2360529"
  },
  {
    "text": "point is index 0 the second point is index one I use enumerate to generate those indexes these that this is the",
    "start": "2360529",
    "end": "2368209"
  },
  {
    "text": "dictionary key the vertex point this is the value the integer so for any point I",
    "start": "2368209",
    "end": "2374299"
  },
  {
    "text": "can say which index are you at so I'm just building that map in Python that dictionary in Python then I go through",
    "start": "2374299",
    "end": "2381410"
  },
  {
    "text": "every triangular face for face in finite faces here and I ask that face for its",
    "start": "2381410",
    "end": "2387829"
  },
  {
    "text": "vertex handle at index is 0 1 & 2 so there are the 3 corners of every",
    "start": "2387829",
    "end": "2393859"
  },
  {
    "text": "triangle okay and then for the 3 corners of every triangle I look up in my",
    "start": "2393859",
    "end": "2399709"
  },
  {
    "text": "dictionary built up here what the index is so anyone who's ever done any graphics might know about like V lists",
    "start": "2399709",
    "end": "2406009"
  },
  {
    "text": "and T lists triangles so we have a list of vertices and we have a list of",
    "start": "2406009",
    "end": "2411349"
  },
  {
    "text": "triangles and these triangle is represented as 3 indexes into the vertex list quite a simple thing and then we at",
    "start": "2411349",
    "end": "2419869"
  },
  {
    "text": "the end here we just write out into the mesh file the number of vertices print",
    "start": "2419869",
    "end": "2426559"
  },
  {
    "text": "out each vertex the number of faces and print out each triangle so the input",
    "start": "2426559",
    "end": "2432499"
  },
  {
    "text": "file to this program looks like this four numbers per line so that's X Y X Y",
    "start": "2432499",
    "end": "2438410"
  },
  {
    "text": "four points we read those in from coaster edges we've run our program",
    "start": "2438410",
    "end": "2445339"
  },
  {
    "text": "Python make Paramesh pi closed edges to coast mesh the size of 0.125 for the",
    "start": "2445339",
    "end": "2451759"
  },
  {
    "text": "triangles it writes out a file that has 89 thousand points in it and 178,000",
    "start": "2451759",
    "end": "2459199"
  },
  {
    "text": "triangles in it the whole process takes about a second including all the file i/o and the triangulation everything",
    "start": "2459199",
    "end": "2465410"
  },
  {
    "text": "there's no way I could do that in Python if I wrote that triangle Adrian Python it take ten minutes",
    "start": "2465410",
    "end": "2472190"
  },
  {
    "text": "and we get a nice mesh and we're done",
    "start": "2472190",
    "end": "2478190"
  },
  {
    "text": "with three minutes for questions thank you [Applause]",
    "start": "2478190",
    "end": "2489069"
  },
  {
    "text": "you can just stare at that because it's beautiful I think if you're gonna do put",
    "start": "2489069",
    "end": "2505549"
  },
  {
    "text": "my microphone back on so the question is do I recommend pi bind 11 I think if you're wrapping C++ today pi bind 11 is",
    "start": "2505549",
    "end": "2515150"
  },
  {
    "text": "the way to go if you're wrapping see today then c-types or c FF I might be",
    "start": "2515150",
    "end": "2521510"
  },
  {
    "text": "sufficient and it's probably possible quite possibly less work I mean if I just have if I just had something where",
    "start": "2521510",
    "end": "2527359"
  },
  {
    "text": "I wanted to call like to see functions I just use C types because then you don't need the whole kind of build system",
    "start": "2527359",
    "end": "2533420"
  },
  {
    "text": "stuff to go along with this and which is where a lot of the complexity is if I",
    "start": "2533420",
    "end": "2539240"
  },
  {
    "text": "was doing C++ I'd definitely go over pi bind 11 I cannot imagine a case in which I would now use boost Python",
    "start": "2539240",
    "end": "2545329"
  },
  {
    "text": "I think pi bind 11 is superseded it and",
    "start": "2545329",
    "end": "2550900"
  },
  {
    "text": "thankfully pi bind 11 api's are very close to the boost Python API is so",
    "start": "2550900",
    "end": "2556309"
  },
  {
    "text": "migrating is not free but it's straightforward",
    "start": "2556309",
    "end": "2561818"
  },
  {
    "text": "what questions do you have",
    "start": "2567240",
    "end": "2570710"
  },
  {
    "text": "yes how long did it take to do Sunday",
    "start": "2572839",
    "end": "2579900"
  },
  {
    "text": "and this morning plus a bit of time on",
    "start": "2579900",
    "end": "2586799"
  },
  {
    "text": "the slides yes yeah there's no there's",
    "start": "2586799",
    "end": "2603839"
  },
  {
    "text": "no magical just wrap this class yeah it",
    "start": "2603839",
    "end": "2609930"
  },
  {
    "text": "does feel like there should be yeah I'm not sure why that is I mean it's quite",
    "start": "2609930",
    "end": "2616200"
  },
  {
    "text": "often C++ classes have a lot of stuff in them that you don't want to wrap you know and I can you know for example and",
    "start": "2616200",
    "end": "2623130"
  },
  {
    "text": "when you have like vertex begin and vertex end I don't want to wrap those two Python right I want it to appear as",
    "start": "2623130",
    "end": "2629190"
  },
  {
    "text": "a Python iterator which is just giving me the all the give me a vertex iterator so what is two functions in c++ really",
    "start": "2629190",
    "end": "2637650"
  },
  {
    "text": "has to become one function in python to be pythonic",
    "start": "2637650",
    "end": "2642890"
  },
  {
    "text": "yeah I I don't think it's hard I mean there's a few patterns you need to figure out particularly with adapting",
    "start": "2670269",
    "end": "2677089"
  },
  {
    "text": "iterators but beyond that just regular functions are really straightforward to to wrap I think so it's it's not a lot",
    "start": "2677089",
    "end": "2684380"
  },
  {
    "text": "of work you know I be quite comfortable just well I have done you know just",
    "start": "2684380",
    "end": "2689750"
  },
  {
    "text": "sitting down and making one of these wrappers quite quickly where the time goes is in getting the thing to build",
    "start": "2689750",
    "end": "2694880"
  },
  {
    "text": "for the first time right that is well on",
    "start": "2694880",
    "end": "2700099"
  },
  {
    "text": "every project I've ever worked on I think that's been true so but particularly so in this case because there's a lot of moving parts and you",
    "start": "2700099",
    "end": "2707269"
  },
  {
    "text": "have to worry a lot about binary compatibility between your library that you're wrapping and the Python",
    "start": "2707269",
    "end": "2713059"
  },
  {
    "text": "interpreter and possibly the application you're embedding it into so you spend a",
    "start": "2713059",
    "end": "2719059"
  },
  {
    "text": "lot of time worrying about those kind of things yes correct",
    "start": "2719059",
    "end": "2734059"
  },
  {
    "text": "I did have an outer Python module which I didn't use it had no code in it right",
    "start": "2734059",
    "end": "2740380"
  },
  {
    "text": "you can put code in there and then of course then you have the opportunity to write stuff that can be written in",
    "start": "2740380",
    "end": "2746750"
  },
  {
    "text": "Python in Python yeah I mean you're not forced to write the whole thing in C++ you can certainly do this kind of mixed",
    "start": "2746750",
    "end": "2753170"
  },
  {
    "text": "language module where you know certain aspects of the wrapping if they're",
    "start": "2753170",
    "end": "2758359"
  },
  {
    "text": "easier to do in Python why not do them in Python I did have that module in here",
    "start": "2758359",
    "end": "2763940"
  },
  {
    "text": "it was empty except for in fact you know",
    "start": "2763940",
    "end": "2769519"
  },
  {
    "text": "by the time I finished it was empty so but you could put Python code in",
    "start": "2769519",
    "end": "2774829"
  },
  {
    "text": "there sure to help you do the wrapping and then you could if you did that approach you could expose api's that",
    "start": "2774829",
    "end": "2782299"
  },
  {
    "text": "were less Python accusing pi bind 11 and then make them fully Python it in the Python yeah yes my curator if if",
    "start": "2782299",
    "end": "2797400"
  },
  {
    "text": "the packing side keeps holding that yeah",
    "start": "2797400",
    "end": "2807800"
  },
  {
    "text": "right had we had we had like another three hours we could have talked about all the other arguments that go to PI",
    "start": "2807800",
    "end": "2814710"
  },
  {
    "text": "make iterator which are various policies which control the lifetime of the",
    "start": "2814710",
    "end": "2819930"
  },
  {
    "text": "objects that's being that are being held onto so there is quite sophisticated",
    "start": "2819930",
    "end": "2825030"
  },
  {
    "text": "control for object ownership in pi bind 11 because of course you can get into a",
    "start": "2825030",
    "end": "2830220"
  },
  {
    "text": "fight between the Python garbage collector and whatever you'll C++ wants to do in terms of ownership and you do",
    "start": "2830220",
    "end": "2836310"
  },
  {
    "text": "need to be careful and I will confess that this example is carefully constructed to avoid any of those issues",
    "start": "2836310",
    "end": "2843800"
  },
  {
    "text": "yes yes yeah in gdb it is my colleague",
    "start": "2848300",
    "end": "2860580"
  },
  {
    "text": "Austin bingum has written some gdb plugins that allow you to do exactly that you can step from one language to",
    "start": "2860580",
    "end": "2866520"
  },
  {
    "text": "the other back into the other language back into the other I'm not smart enough to write plugins like that which is why",
    "start": "2866520",
    "end": "2873180"
  },
  {
    "text": "I work with Austin but you know if",
    "start": "2873180",
    "end": "2879750"
  },
  {
    "text": "you're in like Visual Studio or something without gdb I don't my guess is not",
    "start": "2879750",
    "end": "2887000"
  },
  {
    "text": "okay are we done thank you all very much for your attention",
    "start": "2890000",
    "end": "2895660"
  },
  {
    "text": "[Applause]",
    "start": "2897190",
    "end": "2901349"
  }
]