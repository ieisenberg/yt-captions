[
  {
    "text": "well I made that three o'clock so uh let's get started",
    "start": "1500",
    "end": "6720"
  },
  {
    "text": "uh my name's Ian Cooper uh my various socials are",
    "start": "6720",
    "end": "12599"
  },
  {
    "text": "there on the screen in front of you um my DMs on Twitter are open and I'm",
    "start": "12599",
    "end": "18600"
  },
  {
    "text": "usually very happy to take uh uh communication from you folks if",
    "start": "18600",
    "end": "24119"
  },
  {
    "text": "you've got specific questions you want to ask kind of afterwards this talk today is about reactive",
    "start": "24119",
    "end": "31320"
  },
  {
    "text": "architectures so uh a brief overview would be we're going to look at what we mean by",
    "start": "31320",
    "end": "37140"
  },
  {
    "text": "reactive reactive programming and reactive systems and really how the insights of",
    "start": "37140",
    "end": "43860"
  },
  {
    "text": "reactive programming can help us build uh better architectures",
    "start": "43860",
    "end": "49820"
  },
  {
    "text": "that's just me uh it essentially says I'm old um I always write the bottom point which",
    "start": "51600",
    "end": "58320"
  },
  {
    "text": "is you know I got into this gig years ago because of speaking because uh I started",
    "start": "58320",
    "end": "64320"
  },
  {
    "text": "a.net user group and there was nobody that could speak about.net because we did it in 2002 when it was still in",
    "start": "64320",
    "end": "69960"
  },
  {
    "text": "betas we had to do it ourselves so I got used to the idea of standing in front of an audience and speaking but it's not",
    "start": "69960",
    "end": "76680"
  },
  {
    "text": "I'm not here because I'm smarter I just had the opportunity to build up the confidence to do it so please uh think",
    "start": "76680",
    "end": "83220"
  },
  {
    "text": "about doing it yourself it's definitely worthwhile any.net developers in the room",
    "start": "83220",
    "end": "89820"
  },
  {
    "text": "yeah it's good there's a whole load of us at one place um I work on an open source project",
    "start": "89820",
    "end": "94979"
  },
  {
    "text": "called brighter it's a messaging framework primarily competes with mass transit and then service bus we are also",
    "start": "94979",
    "end": "102240"
  },
  {
    "text": "effectively a what we call a command processor which effectively competes with things like mediator uh we predate",
    "start": "102240",
    "end": "109020"
  },
  {
    "text": "mediator by some time but you've probably never heard of us but please do check us out",
    "start": "109020",
    "end": "114540"
  },
  {
    "text": "we don't have as good PR as Jimmy all right let's talk about the reactive Manifesto",
    "start": "114540",
    "end": "121500"
  },
  {
    "text": "first of all just so we can get clear um kind of what our scope is has anyone heard of the reactive Manifesto I've",
    "start": "121500",
    "end": "127979"
  },
  {
    "text": "seen it yeah quite a few of you okay so the ratchet manufacturer came out in",
    "start": "127979",
    "end": "133140"
  },
  {
    "text": "2014 and it was basically by Jonas Bonner but there's a few luminaries of",
    "start": "133140",
    "end": "138540"
  },
  {
    "text": "the industry that helped him uh kind of write it and I'm sure you recognize some of the names in there",
    "start": "138540",
    "end": "145200"
  },
  {
    "text": "um and they wanted to create a a new architectural style called reactive",
    "start": "145200",
    "end": "152280"
  },
  {
    "text": "applications inspired a lot by the ideas that came from reactive programming",
    "start": "152280",
    "end": "158879"
  },
  {
    "text": "and they had some characteristics they were trying to achieve they wanted to create applications that would react to",
    "start": "158879",
    "end": "166260"
  },
  {
    "text": "events so they wanted to be event driven because it had the following qualities",
    "start": "166260",
    "end": "174180"
  },
  {
    "text": "they felt that being event-driven would let essentially them write applications which scaled to load more easily",
    "start": "174180",
    "end": "182580"
  },
  {
    "text": "that they would be resilient to failure and that they would be able to be",
    "start": "182580",
    "end": "188340"
  },
  {
    "text": "responsive to users so in other words as users effectively were added to the",
    "start": "188340",
    "end": "194099"
  },
  {
    "text": "system we would continue to be able to respond to them in a timely fashion",
    "start": "194099",
    "end": "199640"
  },
  {
    "text": "and they essentially said these properties are valuable being responsive",
    "start": "201780",
    "end": "206819"
  },
  {
    "text": "system responds in a timely manner resilient the system stays responsive in the presence of failure elastic the",
    "start": "206819",
    "end": "214560"
  },
  {
    "text": "system stories responsive under varying workloads and message driven we rely on asynchronous message passing and often",
    "start": "214560",
    "end": "224220"
  },
  {
    "text": "we use this diagram to represent that so the idea is by the means of being",
    "start": "224220",
    "end": "229860"
  },
  {
    "text": "message driven we are able to achieve properties of elasticity and resilience",
    "start": "229860",
    "end": "237060"
  },
  {
    "text": "which both in turn work together to make us responsive to users",
    "start": "237060",
    "end": "242959"
  },
  {
    "text": "now this talk is not about a specific reactive programming",
    "start": "246780",
    "end": "252840"
  },
  {
    "text": "model we will go through them but I'm not here to tell you about you know akka Orleans",
    "start": "252840",
    "end": "259139"
  },
  {
    "text": "or a given active framework right so that's what you've come for there is still time to exit the building",
    "start": "259139",
    "end": "264860"
  },
  {
    "text": "but we will talk about reactive programming and what the models that basically fall under that heading",
    "start": "264860",
    "end": "271919"
  },
  {
    "text": "to understand how we can use those ideas to achieve those properties in reactive",
    "start": "271919",
    "end": "277860"
  },
  {
    "text": "architectures so the first half we'll talk about um reactive programming we'll talk about",
    "start": "277860",
    "end": "283620"
  },
  {
    "text": "data flow active model and flow-based programming in theory CSP communicating",
    "start": "283620",
    "end": "288720"
  },
  {
    "text": "sequential processes is also really a reactive programming model but I'm not going to cover that today",
    "start": "288720",
    "end": "294720"
  },
  {
    "text": "and then we'll get into reactive systems what are the principles and patterns we can use to achieve those properties in",
    "start": "294720",
    "end": "300300"
  },
  {
    "text": "the large but there's a key idea to all of this which is probably expressed by the Greek",
    "start": "300300",
    "end": "306240"
  },
  {
    "text": "philosopher heraclitus I will try the ancient Greek it's going to be awful apologies to anyone Greek in the",
    "start": "306240",
    "end": "311820"
  },
  {
    "text": "audience I think it's tarpantare Kai uden menai which means everything flows",
    "start": "311820",
    "end": "316979"
  },
  {
    "text": "and nothing stays and the idea is that we want to focus on flow",
    "start": "316979",
    "end": "323940"
  },
  {
    "text": "what's important to us when we think about a system and how we model it and how we deal with how we decide it's",
    "start": "323940",
    "end": "330060"
  },
  {
    "text": "architecture is the flow of information through the system",
    "start": "330060",
    "end": "336300"
  },
  {
    "text": "how is that a contrast to what you may be doing today all right so we're talking about objects in SOI",
    "start": "336300",
    "end": "342060"
  },
  {
    "text": "that's not the world we want to live in and we will talk about what the problems are from that world from the point of",
    "start": "342060",
    "end": "348600"
  },
  {
    "text": "view of moving to a larger canvas then we'll get into reactive we'll run",
    "start": "348600",
    "end": "355199"
  },
  {
    "text": "through some of the ideas and reactive programming and then towards the end we'll see how we can apply them to systems",
    "start": "355199",
    "end": "362539"
  },
  {
    "text": "so I'd expect nearly all of us are familiar with the idea of object-oriented programming",
    "start": "362580",
    "end": "369000"
  },
  {
    "text": "so an opportunity program we have a class and a class Loosely we could Define as a role in our system it has",
    "start": "369000",
    "end": "377520"
  },
  {
    "text": "responsibilities actually and it has essentially to fulfill those responsibilities some",
    "start": "377520",
    "end": "384479"
  },
  {
    "text": "behaviors and some state and usually the idea is that the state",
    "start": "384479",
    "end": "391199"
  },
  {
    "text": "we encapsulate and hide which is the state required to exhibit a",
    "start": "391199",
    "end": "397080"
  },
  {
    "text": "given set of behaviors there's usually coupling between the behaviors in the class and the state of the class",
    "start": "397080",
    "end": "402120"
  },
  {
    "text": "basically manages and it owns and our system tends to consist of a",
    "start": "402120",
    "end": "409440"
  },
  {
    "text": "number of these classes that basically pass messages to each other in in objectorian terms I mean we think of",
    "start": "409440",
    "end": "415560"
  },
  {
    "text": "that as a method call but an oo Theory it's seen as message passing",
    "start": "415560",
    "end": "420840"
  },
  {
    "text": "and in some cases we can say that hey this role like derives from another role",
    "start": "420840",
    "end": "426360"
  },
  {
    "text": "and we can use Dynamic dispatch to basically make sure that we effectively root stuff to the correct derived role",
    "start": "426360",
    "end": "433199"
  },
  {
    "text": "instead but oo tends to rely on an approach we call call and return",
    "start": "433199",
    "end": "439979"
  },
  {
    "text": "now that just means you have a main method which is the entry point and everything effectually proceeds from",
    "start": "439979",
    "end": "446039"
  },
  {
    "text": "calls from the main method to other things right",
    "start": "446039",
    "end": "450800"
  },
  {
    "text": "service orientation SOA was really this idea of taking",
    "start": "457639",
    "end": "463919"
  },
  {
    "text": "object orientation and if you like doing it at a macro level to produce a system",
    "start": "463919",
    "end": "471060"
  },
  {
    "text": "so our services were roles within our system",
    "start": "471060",
    "end": "476639"
  },
  {
    "text": "and they had responsibilities and they were defined Often by operations rather",
    "start": "476639",
    "end": "481860"
  },
  {
    "text": "than methods but the same thing really the behaviors in the system and typically what we would do is",
    "start": "481860",
    "end": "489900"
  },
  {
    "text": "co-locate operations and the state require to fulfill those operations",
    "start": "489900",
    "end": "495440"
  },
  {
    "text": "within the system and so effectively",
    "start": "495440",
    "end": "501960"
  },
  {
    "text": "um they are effectively if you think about them operation at methods on a class and",
    "start": "501960",
    "end": "508919"
  },
  {
    "text": "often when we built something like a soap service that's exactly what we did right we went and worm created a class",
    "start": "508919",
    "end": "515760"
  },
  {
    "text": "just gave it some markup and exposed it via effective release soap",
    "start": "515760",
    "end": "521899"
  },
  {
    "text": "and the problem with that kind of design is what we bring with us",
    "start": "522719",
    "end": "528660"
  },
  {
    "text": "is this kind of call and return model so we bring this idea of there ought to",
    "start": "528660",
    "end": "534060"
  },
  {
    "text": "be some kind of main method that is actually going to initiate these call to these things that abstract entities and",
    "start": "534060",
    "end": "540060"
  },
  {
    "text": "behavior so typically what happens is we have some kind of API Gateway layer",
    "start": "540060",
    "end": "546540"
  },
  {
    "text": "which orchestrates the work amongst all of these entity services that we own or",
    "start": "546540",
    "end": "552420"
  },
  {
    "text": "we might have some Saga pattern living in some external command processor and",
    "start": "552420",
    "end": "557640"
  },
  {
    "text": "these things have a couple of problems they become bottlenecks quite quickly and they externalize an amount of our",
    "start": "557640",
    "end": "565260"
  },
  {
    "text": "logic away from The Individual Services into this God thing that basically",
    "start": "565260",
    "end": "570600"
  },
  {
    "text": "represents the main method in our distributed system and often we find ourselves not with a",
    "start": "570600",
    "end": "576480"
  },
  {
    "text": "truly distributed system but just a distributed monolith no matter how hard we try",
    "start": "576480",
    "end": "582259"
  },
  {
    "text": "the other problem with these systems is that because they typically use RPC style synchronous conversation be that",
    "start": "582420",
    "end": "589080"
  },
  {
    "text": "soap grpc even HTTP plus Json",
    "start": "589080",
    "end": "594420"
  },
  {
    "text": "they're not resilient to failure if we lose an individual service",
    "start": "594420",
    "end": "601380"
  },
  {
    "text": "then the operation being orchestrated from the Gateway or The Saga often basically stops working",
    "start": "601380",
    "end": "608420"
  },
  {
    "text": "so the question is can we look at say reactive programming which in the 1970s was an alternative",
    "start": "610200",
    "end": "618240"
  },
  {
    "text": "proposal to oo as the way forward in programming and see if actually has any insights",
    "start": "618240",
    "end": "624300"
  },
  {
    "text": "that lead to better system design and a lot of what's happened in these sort of past 10 years or so is that people have",
    "start": "624300",
    "end": "631080"
  },
  {
    "text": "said hey the reactive programming people although they didn't win the programming War actually had some really good ideas",
    "start": "631080",
    "end": "636839"
  },
  {
    "text": "and maybe we should think about basically what they were saying",
    "start": "636839",
    "end": "641660"
  },
  {
    "text": "all right so reactive programming really starts something called data flow programming",
    "start": "641880",
    "end": "647760"
  },
  {
    "text": "which comes from somebody called Jack Dennis Jackman writes the first paper the ideas",
    "start": "647760",
    "end": "653100"
  },
  {
    "text": "have been floating around for a while in various academic circles and what Jack says is we should see our",
    "start": "653100",
    "end": "659040"
  },
  {
    "text": "program as a series of nodes that represent operations or transformations to data",
    "start": "659040",
    "end": "668100"
  },
  {
    "text": "and a series of arcs that move between those nodes that represent data flowing",
    "start": "668100",
    "end": "674519"
  },
  {
    "text": "between those nodes hence the name data flow programming right",
    "start": "674519",
    "end": "680399"
  },
  {
    "text": "so rather than encapsulating State and behavior together",
    "start": "680399",
    "end": "685440"
  },
  {
    "text": "we separate it we say effectively actually we want to have Behavior we want to flow",
    "start": "685440",
    "end": "692579"
  },
  {
    "text": "the state through those behaviors where it will be transformed",
    "start": "692579",
    "end": "697760"
  },
  {
    "text": "so when we think about one of these nodes they have a typical set of",
    "start": "698880",
    "end": "704579"
  },
  {
    "text": "characteristics they tend to have an input pool and an output port",
    "start": "704579",
    "end": "710399"
  },
  {
    "text": "sometimes more than one which allows data to flow into the node for the transformation and transform data to",
    "start": "710399",
    "end": "715980"
  },
  {
    "text": "flow out and that node is basically unit of computation",
    "start": "715980",
    "end": "721019"
  },
  {
    "text": "under data flow programming a node is activated or fired because",
    "start": "721019",
    "end": "726839"
  },
  {
    "text": "there is data waiting on a port and therefore that causes it to come into existence it comes into existence",
    "start": "726839",
    "end": "733920"
  },
  {
    "text": "it's fired it processes that data and it pushes an answer at The Far Side",
    "start": "733920",
    "end": "740660"
  },
  {
    "text": "the data packets the data packets effectively can be anything dataflow programming doesn't really say too much",
    "start": "741420",
    "end": "748019"
  },
  {
    "text": "about them it can be structured unstructured and maybe effectively evil include other data packets",
    "start": "748019",
    "end": "755540"
  },
  {
    "text": "and these arcs you can look at them as pipes and they connect various nodes",
    "start": "757860",
    "end": "765240"
  },
  {
    "text": "now there are a couple of different models in dataflow programming supports one is a synchronous model",
    "start": "765240",
    "end": "770820"
  },
  {
    "text": "in which essentially these arcs are not buffered they don't have a capacity and data just basically moves through all of",
    "start": "770820",
    "end": "777420"
  },
  {
    "text": "the nodes if you buffer the arcs though right so",
    "start": "777420",
    "end": "783959"
  },
  {
    "text": "the arcs effectively have a capacity they can hold a certain number of pieces of data at waiting",
    "start": "783959",
    "end": "789839"
  },
  {
    "text": "then that allows us essentially to parallelize the operation because",
    "start": "789839",
    "end": "795360"
  },
  {
    "text": "each node can run and process basically the work in its",
    "start": "795360",
    "end": "801420"
  },
  {
    "text": "buffer put work on the other buffer at a different rate to other nodes right so each node can",
    "start": "801420",
    "end": "808500"
  },
  {
    "text": "independently run spin along eating and putting stuff outside and they can operate in parallel",
    "start": "808500",
    "end": "814920"
  },
  {
    "text": "we are constrained by the slowest node in the pipeline in terms of our",
    "start": "814920",
    "end": "820620"
  },
  {
    "text": "throughput but we are able to effectively run all these nodes independently provided we have some kind of notion of buffering",
    "start": "820620",
    "end": "828899"
  },
  {
    "text": "okay um in the classic Model basically I",
    "start": "828899",
    "end": "835019"
  },
  {
    "text": "think we mentioned earlier effectively the lifetime is essentially just there's work waiting to be done and we basically",
    "start": "835019",
    "end": "840660"
  },
  {
    "text": "don't have a node when there's no work waiting to be done",
    "start": "840660",
    "end": "844879"
  },
  {
    "text": "there's no what we do is we don't activate a node",
    "start": "847620",
    "end": "854940"
  },
  {
    "text": "in order to basically read input and this effectively acts as a form of",
    "start": "854940",
    "end": "860820"
  },
  {
    "text": "back pressure it says if the downstream from me is at",
    "start": "860820",
    "end": "866519"
  },
  {
    "text": "capacity potentially because it's working much slower than I am",
    "start": "866519",
    "end": "872760"
  },
  {
    "text": "don't read new items of data from the input",
    "start": "872760",
    "end": "878579"
  },
  {
    "text": "just leave them where they are so I won't activate the node and that creates back pressure which stops",
    "start": "878579",
    "end": "885060"
  },
  {
    "text": "effectively us filling up the buffers too much if we are effectively going too fast",
    "start": "885060",
    "end": "891500"
  },
  {
    "text": "and the big Advantage is the perception that data flow programming is data",
    "start": "893399",
    "end": "900600"
  },
  {
    "text": "coupling so when we think about coupling there's kind of a chain of tightness to",
    "start": "900600",
    "end": "906420"
  },
  {
    "text": "looseness so content is essentially I know how your code works",
    "start": "906420",
    "end": "912360"
  },
  {
    "text": "common is we share some Global state control is you send some feature flags",
    "start": "912360",
    "end": "920220"
  },
  {
    "text": "and stuff that configure my behavior down with you stamp is I may not use all of the fields",
    "start": "920220",
    "end": "927660"
  },
  {
    "text": "of the data that you're sending me so essentially there's potentially a risk that if I wanted to drop that field or",
    "start": "927660",
    "end": "935100"
  },
  {
    "text": "Etc I might not know if we're stamp coupled that you whether you don't use it",
    "start": "935100",
    "end": "940320"
  },
  {
    "text": "and data coupling effectively is the is like the best form of coupling we can we have which is you just couple to the",
    "start": "940320",
    "end": "946260"
  },
  {
    "text": "shape of the data that you use so these nodes are effectively at least",
    "start": "946260",
    "end": "951779"
  },
  {
    "text": "stamp coupled and probably if we're doing a good job data coupled which means that there's low coupling between",
    "start": "951779",
    "end": "958019"
  },
  {
    "text": "these nodes all right",
    "start": "958019",
    "end": "963439"
  },
  {
    "text": "actors so traditionally when we in programming",
    "start": "964620",
    "end": "972660"
  },
  {
    "text": "used to try and deal with the problem of access to a mutable resource in the presence basically of wanting to scale",
    "start": "972660",
    "end": "979740"
  },
  {
    "text": "what would happen is people would basically introduce multiple threads to scale but then have to use some kind of",
    "start": "979740",
    "end": "985980"
  },
  {
    "text": "synchronization primitive to control access to the mutable state",
    "start": "985980",
    "end": "991220"
  },
  {
    "text": "and this sort of multi-threaded programming as I'm sure most of you have done at some point in your life is typically error-prone and problematic",
    "start": "991860",
    "end": "1000880"
  },
  {
    "text": "so Carl Hewitt created the actor model as a kind of variation of data flow programming in",
    "start": "1001399",
    "end": "1008540"
  },
  {
    "text": "order to try and solve this problem of how do I scale without running into the",
    "start": "1008540",
    "end": "1014240"
  },
  {
    "text": "problem of synchronization Primitives so an actor is really just a node in",
    "start": "1014240",
    "end": "1020360"
  },
  {
    "text": "data flow programming it's a single threaded node and essentially it has a mail box which you",
    "start": "1020360",
    "end": "1026298"
  },
  {
    "text": "can think as a buffered input which allows a single thread to Simply chew its way through a set of work and",
    "start": "1026299",
    "end": "1033620"
  },
  {
    "text": "it may effectively then control a mutable piece of State because it's always going to pry change that mutable",
    "start": "1033620",
    "end": "1040220"
  },
  {
    "text": "state in order and you don't need a synchronization primitive",
    "start": "1040220",
    "end": "1045740"
  },
  {
    "text": "okay in the actor model then actors can send",
    "start": "1045740",
    "end": "1052580"
  },
  {
    "text": "messages from one actor to another actor each actor has a unique address",
    "start": "1052580",
    "end": "1058460"
  },
  {
    "text": "and we can effectively use that address to send messages to it we get messages we get addresses for other actors",
    "start": "1058460",
    "end": "1064220"
  },
  {
    "text": "because we created it it was passed across or it passed to us on a message",
    "start": "1064220",
    "end": "1069460"
  },
  {
    "text": "so the model in the actor model creates a dynamic graph",
    "start": "1071000",
    "end": "1077840"
  },
  {
    "text": "you don't have to have a fixed graph at the beginning we can essentially create the graph as",
    "start": "1077840",
    "end": "1083419"
  },
  {
    "text": "we go a key aspect here is basically it lets us effectively create",
    "start": "1083419",
    "end": "1089919"
  },
  {
    "text": "partitioned data in order to scale so F effectively I want to scale",
    "start": "1089919",
    "end": "1097580"
  },
  {
    "text": "shopping carts and I effectively own shopping cart state in one of my nodes",
    "start": "1097580",
    "end": "1105320"
  },
  {
    "text": "and the problem will be that I can read messages for all of the shopping carts",
    "start": "1105320",
    "end": "1110960"
  },
  {
    "text": "that I own in that in say node two and I can process them in sequence",
    "start": "1110960",
    "end": "1118400"
  },
  {
    "text": "but I may get overwhelmed at that point because a number of messages waiting in my inbox and my single thread that I",
    "start": "1118400",
    "end": "1124220"
  },
  {
    "text": "have running in my node makes it may mean that I get a huge amount of latency and lag processing",
    "start": "1124220",
    "end": "1129740"
  },
  {
    "text": "those shopping carts sorry to Partition",
    "start": "1129740",
    "end": "1135140"
  },
  {
    "text": "and by partitioning what I mean is that effectively I add another no processing shopping cart and it's going to have",
    "start": "1135140",
    "end": "1141679"
  },
  {
    "text": "shopping carts one to twenty and node two is going to have shopping carts 21 to 40. right",
    "start": "1141679",
    "end": "1148400"
  },
  {
    "text": "and that enables me then to you to scale single threaded nodes by scaling out",
    "start": "1148400",
    "end": "1155299"
  },
  {
    "text": "but note that effectively what I need to do is partition but it's okay because the parent that creates the sub nodes",
    "start": "1155299",
    "end": "1162100"
  },
  {
    "text": "understands effectively where the shopping carts live because it",
    "start": "1162100",
    "end": "1167780"
  },
  {
    "text": "was the thing that did the partitioning in the first place",
    "start": "1167780",
    "end": "1171700"
  },
  {
    "text": "let's look at flow-based programming so flow-based programming is another",
    "start": "1176720",
    "end": "1184520"
  },
  {
    "text": "reactive programming approach and this came out of Jay Paul Morrison in the 70s",
    "start": "1184520",
    "end": "1191120"
  },
  {
    "text": "so in flow-based programming again we have a node and the node has an import and an output",
    "start": "1191120",
    "end": "1198080"
  },
  {
    "text": "and we have connectors between the notes in flow-based programming connectors are",
    "start": "1198080",
    "end": "1203660"
  },
  {
    "text": "always buffered we are always asynchronous when we are using flow-based programming it does not",
    "start": "1203660",
    "end": "1209660"
  },
  {
    "text": "allow us to use essentially a uh a",
    "start": "1209660",
    "end": "1215919"
  },
  {
    "text": "non-buffered synchronous approach basically to our data flow okay data flows are typically push or",
    "start": "1215919",
    "end": "1223520"
  },
  {
    "text": "pull so a push based by data flow tends to say work is essentially given to your",
    "start": "1223520",
    "end": "1230600"
  },
  {
    "text": "your graph and a pool based one says I Yank on the graph so one poles and one",
    "start": "1230600",
    "end": "1236780"
  },
  {
    "text": "receives um",
    "start": "1236780",
    "end": "1240280"
  },
  {
    "text": "rather than data what flow-based programming talks about is an information packet",
    "start": "1242600",
    "end": "1249380"
  },
  {
    "text": "and information packets flow between nodes through ports and it's this work",
    "start": "1249380",
    "end": "1254660"
  },
  {
    "text": "of data throwing through transforms that basically gets work done",
    "start": "1254660",
    "end": "1260679"
  },
  {
    "text": "let's have a known lifetime so packets essentially are only exist",
    "start": "1262280",
    "end": "1267440"
  },
  {
    "text": "for their time on the pipe what happens is that when a notice successfully read",
    "start": "1267440",
    "end": "1273440"
  },
  {
    "text": "a job off basically the import and done its work it deletes that work that it's",
    "start": "1273440",
    "end": "1279860"
  },
  {
    "text": "done and it puts something on the out right so we've actually garbage collect",
    "start": "1279860",
    "end": "1285020"
  },
  {
    "text": "packets is what Flobots programming refers to it as",
    "start": "1285020",
    "end": "1289780"
  },
  {
    "text": "node allows us to do a couple of flow based programs let's just do a couple of things when effectively our buffer",
    "start": "1293960",
    "end": "1301340"
  },
  {
    "text": "begins to fill up oh that's the next slide but I'll just one first all right yeah node basically",
    "start": "1301340",
    "end": "1307520"
  },
  {
    "text": "says uh yeah rather than just saying activation is the only work on the input Port is the only it activates our or no",
    "start": "1307520",
    "end": "1314840"
  },
  {
    "text": "Focus programming says hey it may be expensive to start up a node so you can start up a node and keep it",
    "start": "1314840",
    "end": "1321320"
  },
  {
    "text": "running and it will just pull things off the buffered",
    "start": "1321320",
    "end": "1326780"
  },
  {
    "text": "uh connector and that allows basically under the",
    "start": "1326780",
    "end": "1331880"
  },
  {
    "text": "flow-based programming model has to have long live nodes",
    "start": "1331880",
    "end": "1336460"
  },
  {
    "text": "in terms of capacity as well as the back pressure we saw earlier with data flow",
    "start": "1338539",
    "end": "1343940"
  },
  {
    "text": "programming where essentially we say if there is no room on the output Channel don't read",
    "start": "1343940",
    "end": "1349340"
  },
  {
    "text": "from the input Channel flow-based programming also introduced the idea of load shedding",
    "start": "1349340",
    "end": "1354440"
  },
  {
    "text": "it said hey if we get too much work coming in for the output we can simply drop it on",
    "start": "1354440",
    "end": "1360320"
  },
  {
    "text": "the floor take the packet delete it and don't do the work",
    "start": "1360320",
    "end": "1366080"
  },
  {
    "text": "now you may say wow that's going to be I'm losing all my work but there are certain circumstances where that might",
    "start": "1366080",
    "end": "1372080"
  },
  {
    "text": "be quite valuable so uh I work today in the kind of food delivery business so think of something",
    "start": "1372080",
    "end": "1378140"
  },
  {
    "text": "like Drive notifications the driver notifying you continuously where they are right if you're getting a lot of",
    "start": "1378140",
    "end": "1384320"
  },
  {
    "text": "information and you're being overwhelmed you can drop some of those because all that happens is the driver will just",
    "start": "1384320",
    "end": "1389780"
  },
  {
    "text": "seem to jump on the map and flow less smoothly because you effectively only get every fifth one Etc",
    "start": "1389780",
    "end": "1396559"
  },
  {
    "text": "but that's usually acceptable in the presence of load so as well as back pressure the other thing flow based",
    "start": "1396559",
    "end": "1402679"
  },
  {
    "text": "programming tends to teach us is that we can do load shedding okay",
    "start": "1402679",
    "end": "1408860"
  },
  {
    "text": "a couple other interesting things in flowbase programming so flightless programming introduces",
    "start": "1408860",
    "end": "1414020"
  },
  {
    "text": "this idea that you could have multiple ports ports and inflate program are just named",
    "start": "1414020",
    "end": "1420260"
  },
  {
    "text": "things and the idea in the program is basically you address something by name and effectively the framework handles",
    "start": "1420260",
    "end": "1426559"
  },
  {
    "text": "how actually a port works you have no real understanding of that you just know that you connect to you send something",
    "start": "1426559",
    "end": "1433520"
  },
  {
    "text": "to out or other out and you receive things from in right multiple writers can write to an import",
    "start": "1433520",
    "end": "1441440"
  },
  {
    "text": "and that allows us to effectively to receive signals from multiple places but we only have one thread writing to Any",
    "start": "1441440",
    "end": "1448280"
  },
  {
    "text": "Given outpour internally in flow-based programming",
    "start": "1448280",
    "end": "1452919"
  },
  {
    "text": "language programming uh in about 2010 j4 Morrison had long retired uh he pointed",
    "start": "1455299",
    "end": "1461900"
  },
  {
    "text": "out then that you know he was looking at the kind of modern era uh well it didn't exist when he when he created flow-based",
    "start": "1461900",
    "end": "1468500"
  },
  {
    "text": "programming he saw a message or into middleware as a perfectly valid way of implementing the connectors that",
    "start": "1468500",
    "end": "1475340"
  },
  {
    "text": "flowbase programming had talked about and the flowbase programming could be seen in the large",
    "start": "1475340",
    "end": "1480980"
  },
  {
    "text": "as a way of basically building distributed systems",
    "start": "1480980",
    "end": "1485919"
  },
  {
    "text": "um fluidways programming also different in an initial information packet there's",
    "start": "1486320",
    "end": "1491600"
  },
  {
    "text": "only when I start up I have a specific queue from which I can grab a message which",
    "start": "1491600",
    "end": "1498320"
  },
  {
    "text": "tells me how to configure myself at startup interestingly enough anyone who's worked",
    "start": "1498320",
    "end": "1504140"
  },
  {
    "text": "with mqtt mqtt which is quite often used with devices running on unreliable connections has a very similar model",
    "start": "1504140",
    "end": "1510679"
  },
  {
    "text": "these are not an iot you can you start up effectively in mqtt has a model of",
    "start": "1510679",
    "end": "1515840"
  },
  {
    "text": "taking an initial information packing and configuring yourself it also has the notion of control",
    "start": "1515840",
    "end": "1522320"
  },
  {
    "text": "packets so the idea in flow-based programming is if I have a particularly large message I",
    "start": "1522320",
    "end": "1528919"
  },
  {
    "text": "want to chunk up into a stream on the port I sent you an initial control packet which tells you to expect to",
    "start": "1528919",
    "end": "1535460"
  },
  {
    "text": "stream and how many chunks I think are going to be in there sends you the chunks and then sends you effectively a",
    "start": "1535460",
    "end": "1540980"
  },
  {
    "text": "control packet to tell you the stream is done and you can basically you know move on",
    "start": "1540980",
    "end": "1546440"
  },
  {
    "text": "to the next item um often basically control packets are referred to inflow waste program is",
    "start": "1546440",
    "end": "1553220"
  },
  {
    "text": "brackets it's idea that I'm putting parenthesis about the things that are about to come down the pipeline all very",
    "start": "1553220",
    "end": "1558860"
  },
  {
    "text": "useful ideas okay the other thing in flow-based",
    "start": "1558860",
    "end": "1564919"
  },
  {
    "text": "programming of course is that basically it one of the things it tries to look at is this question of",
    "start": "1564919",
    "end": "1570440"
  },
  {
    "text": "uh well if basically everything is done by flowing from one node to the next",
    "start": "1570440",
    "end": "1576140"
  },
  {
    "text": "node what happens if my node needs information",
    "start": "1576140",
    "end": "1583640"
  },
  {
    "text": "in order to process the data it's received where does it get it from",
    "start": "1583640",
    "end": "1590179"
  },
  {
    "text": "so in flowbase programming right there's no notion of I can make a method call to that thing over there which in a",
    "start": "1590179",
    "end": "1597140"
  },
  {
    "text": "distributed system is the equivalent and we'll see again later of me saying I'm going to make an HTTP get or a grp",
    "start": "1597140",
    "end": "1603140"
  },
  {
    "text": "sequel to get something in a messaging environment so Morrison's solution and flow-based",
    "start": "1603140",
    "end": "1609080"
  },
  {
    "text": "programming is well all the component B needs to do here in this in this diagram",
    "start": "1609080",
    "end": "1616100"
  },
  {
    "text": "is have a port that effectively listens to signals",
    "start": "1616100",
    "end": "1621380"
  },
  {
    "text": "and Bill from from a and effectively builds a lookup table and here we",
    "start": "1621380",
    "end": "1626720"
  },
  {
    "text": "actually can see it as potentially a node that effectively listens to that builds a lookup table that b uses",
    "start": "1626720",
    "end": "1633440"
  },
  {
    "text": "okay and that means that effectively when a has a change a produces basically a data",
    "start": "1633440",
    "end": "1640640"
  },
  {
    "text": "packet on its node saying hey the information you need to look up has changed and then effectively we pass it across",
    "start": "1640640",
    "end": "1647360"
  },
  {
    "text": "to the lookup no which watch it into the table that b then uses to reference stuff",
    "start": "1647360",
    "end": "1654700"
  },
  {
    "text": "so in a distributed system this is this idea effectively that you know I want to look up customers or restaurants or",
    "start": "1654919",
    "end": "1661400"
  },
  {
    "text": "Brokers or some kind of kind of reference data and what I do is wait for",
    "start": "1661400",
    "end": "1666500"
  },
  {
    "text": "the system that produces that to produce a data packet which and then I can use to build a lookup",
    "start": "1666500",
    "end": "1672760"
  },
  {
    "text": "all right so how do we apply some of these",
    "start": "1675679",
    "end": "1681140"
  },
  {
    "text": "reactive programming Concepts to build larger systems and why does",
    "start": "1681140",
    "end": "1687520"
  },
  {
    "text": "reactive Manifesto talk about this idea is of message passing resilience elasticity and responsiveness right how",
    "start": "1687520",
    "end": "1694820"
  },
  {
    "text": "does this actually work to produce stuff",
    "start": "1694820",
    "end": "1699820"
  },
  {
    "text": "so the idea in a reactive systems is to model ourselves in the same way we",
    "start": "1702440",
    "end": "1709460"
  },
  {
    "text": "do in reactive programming we think of our services as nodes",
    "start": "1709460",
    "end": "1716120"
  },
  {
    "text": "that receive data and there's a very much a flow-based",
    "start": "1716120",
    "end": "1721880"
  },
  {
    "text": "programming model of it must be basically an asynchronous connector we receive data on some asynchronous",
    "start": "1721880",
    "end": "1728600"
  },
  {
    "text": "connector so Kafka driver mq sqs as your service bus take your pick right",
    "start": "1728600",
    "end": "1736279"
  },
  {
    "text": "we then do perform some kind of transformation and we pass the data down the line",
    "start": "1736279",
    "end": "1743000"
  },
  {
    "text": "the advantage of message passing and the buffering it offers us in an asynchronous conversation is that both",
    "start": "1743000",
    "end": "1750140"
  },
  {
    "text": "parties do not need to be present for a conversation to succeed so think about the kind of way you tend",
    "start": "1750140",
    "end": "1758179"
  },
  {
    "text": "to organize a night out with your friends right it's much easier to have them in a",
    "start": "1758179",
    "end": "1763220"
  },
  {
    "text": "WhatsApp group or on slack or Twitter DM any problem usually being they're all chosen something else to communicate",
    "start": "1763220",
    "end": "1769279"
  },
  {
    "text": "with them than it is to basically phone them all up right if you phone them",
    "start": "1769279",
    "end": "1774620"
  },
  {
    "text": "you're a bit dependent on them being there to pick up the phone when you when you phone them right send them a message",
    "start": "1774620",
    "end": "1780559"
  },
  {
    "text": "they can look at it in the next 10 minutes when they're free and it's exactly the same reason why we",
    "start": "1780559",
    "end": "1786140"
  },
  {
    "text": "tend to prefer asynchronous conversations right because someone could pick up the",
    "start": "1786140",
    "end": "1791299"
  },
  {
    "text": "message when they're ready it's the idea of having a mailbox",
    "start": "1791299",
    "end": "1795880"
  },
  {
    "text": "so reactive systems borrow this idea from flow-based programming",
    "start": "1798200",
    "end": "1804140"
  },
  {
    "text": "of having a service that has a buffered connector on which it receives an incoming message into",
    "start": "1804140",
    "end": "1810740"
  },
  {
    "text": "which it puts an outgoing message",
    "start": "1810740",
    "end": "1814299"
  },
  {
    "text": "and those Services much like nodes rather than being SOA style oh I",
    "start": "1817100",
    "end": "1824419"
  },
  {
    "text": "maintain State and I maintain data should be much more a data flow",
    "start": "1824419",
    "end": "1830179"
  },
  {
    "text": "programming style model which says I make a transformation to the data in",
    "start": "1830179",
    "end": "1835700"
  },
  {
    "text": "some way typically we tend to think of them as being a verb or noun combination",
    "start": "1835700",
    "end": "1840799"
  },
  {
    "text": "like place an order or onboard a restaurant",
    "start": "1840799",
    "end": "1846039"
  },
  {
    "text": "and workflows to specific use cases are usually data flying between a number",
    "start": "1846140",
    "end": "1852620"
  },
  {
    "text": "of nodes which perform individual Transportation steps",
    "start": "1852620",
    "end": "1857899"
  },
  {
    "text": "okay the information packets we tend to think of as commands sometimes nowadays",
    "start": "1857899",
    "end": "1863120"
  },
  {
    "text": "folks say messaging which essentially are things that I'm being told",
    "start": "1863120",
    "end": "1868880"
  },
  {
    "text": "could be an instruction it could be effectively um a a request",
    "start": "1868880",
    "end": "1874820"
  },
  {
    "text": "right or events which are facts things about the past that I've often",
    "start": "1874820",
    "end": "1881240"
  },
  {
    "text": "done so we think about the flow it may be that I receive a command do some work",
    "start": "1881240",
    "end": "1886399"
  },
  {
    "text": "and then push a command to the next node in the flow or maybe that I receive a command I do",
    "start": "1886399",
    "end": "1893419"
  },
  {
    "text": "some work and then I communicate an event which describes what happened or it may well be most commonly I do both",
    "start": "1893419",
    "end": "1901658"
  },
  {
    "text": "so basically if I get a purchase request I may have a node that basically does",
    "start": "1903380",
    "end": "1908840"
  },
  {
    "text": "some checkout processing which involves pricing basically that item and then I",
    "start": "1908840",
    "end": "1914539"
  },
  {
    "text": "may say hey I need the payment system take a payment for this so I will send it a command it will basically then take",
    "start": "1914539",
    "end": "1920899"
  },
  {
    "text": "a payment for me much like data flow programming",
    "start": "1920899",
    "end": "1928940"
  },
  {
    "text": "and reactive architectures we tend to recommend that you think about these Services as being single threaded and",
    "start": "1928940",
    "end": "1935179"
  },
  {
    "text": "scale them out one of the advantages of being single threaded as a course that you can",
    "start": "1935179",
    "end": "1941120"
  },
  {
    "text": "maintain ordering as soon as you have a multi-threaded service you will lose ordering because you can't you're",
    "start": "1941120",
    "end": "1947860"
  },
  {
    "text": "de-ordering the buffer as soon as you read from it that also implies that you would need to",
    "start": "1947860",
    "end": "1953659"
  },
  {
    "text": "Partition that's why things like Kafka work on a partition basis right",
    "start": "1953659",
    "end": "1961179"
  },
  {
    "text": "if you don't care about ordering you can use more of a competing consumers approach where multiple individual",
    "start": "1962539",
    "end": "1968059"
  },
  {
    "text": "single threaded workers read from a given buffer",
    "start": "1968059",
    "end": "1972880"
  },
  {
    "text": "so we are thinking about what we do idea of coordinating data flow we partition",
    "start": "1974480",
    "end": "1980779"
  },
  {
    "text": "our system and by that we mean how do we slice it up into individual parts",
    "start": "1980779",
    "end": "1988360"
  },
  {
    "text": "to create a continuous steady flow of information",
    "start": "1988520",
    "end": "1993559"
  },
  {
    "text": "typically you want to look for things that represent if you like processing steps often a really good model is to",
    "start": "1993559",
    "end": "2000100"
  },
  {
    "text": "look for processing steps that are paralyzable I can do this",
    "start": "2000100",
    "end": "2005860"
  },
  {
    "text": "and I can pass it down the line I can then do another one of this or someone else does the later step",
    "start": "2005860",
    "end": "2013059"
  },
  {
    "text": "these two steps don't need to be done together so I can break them apart and I can paralyze them",
    "start": "2013059",
    "end": "2020039"
  },
  {
    "text": "what would the inside of a node look like so here we're going to basically step away slightly",
    "start": "2022000",
    "end": "2027220"
  },
  {
    "text": "um from some of the reactive people and look at some work by Pat Helen anyone",
    "start": "2027220",
    "end": "2032740"
  },
  {
    "text": "know who pays a few of you so that's really important in the kind of service space he also was the guy",
    "start": "2032740",
    "end": "2039399"
  },
  {
    "text": "that created Ms DTC worked on tandem non-stop later said let's not do distributed transactions anymore",
    "start": "2039399",
    "end": "2046240"
  },
  {
    "text": "um uh and his work basically effectively includes things that generate ideas like outboxes Etc",
    "start": "2046240",
    "end": "2051940"
  },
  {
    "text": "so Pat's got a um uh reasonably recent paper out called autonomous components",
    "start": "2051940",
    "end": "2057760"
  },
  {
    "text": "you should probably read if you're interested in some of these ideas so Pat basically says that effectively",
    "start": "2057760",
    "end": "2063878"
  },
  {
    "text": "what happens in a typical node is that a note has an explicit boundary right which is basically the ports if",
    "start": "2063879",
    "end": "2071740"
  },
  {
    "text": "you like from our reactive model so explicitly you have these ports where we communicate with the outside world what",
    "start": "2071740",
    "end": "2077020"
  },
  {
    "text": "I mean by ports essentially something that basically says here is a definition of a message that I send or receive",
    "start": "2077020",
    "end": "2084638"
  },
  {
    "text": "um and here's the protocol I'm going to receive it on um and here's any additional information about what might go in headers Etc that",
    "start": "2084639",
    "end": "2091960"
  },
  {
    "text": "I need you to worry about right and so that's an explicit boundary that we communicate we receive messages in",
    "start": "2091960",
    "end": "2099880"
  },
  {
    "text": "over basically one of these ports internally your code it should probably be abstracted from you and you send one",
    "start": "2099880",
    "end": "2106060"
  },
  {
    "text": "to a port basically",
    "start": "2106060",
    "end": "2109380"
  },
  {
    "text": "have a message I can't see my screen anymore okay I think someone's saying that I'm",
    "start": "2111160",
    "end": "2117640"
  },
  {
    "text": "obscuring the antenna on the mic um",
    "start": "2117640",
    "end": "2122640"
  },
  {
    "text": "so uh having received basically a message on",
    "start": "2122740",
    "end": "2129099"
  },
  {
    "text": "one of these ports um uh we tend to kick off what's called an activity",
    "start": "2129099",
    "end": "2135940"
  },
  {
    "text": "so an activity is really just your code and some state that your code needs",
    "start": "2135940",
    "end": "2143760"
  },
  {
    "text": "so the idea is let's say that effectively I am pricing an order I would say okay great I have got",
    "start": "2145720",
    "end": "2152320"
  },
  {
    "text": "basically this activity pricing an order that I'm going to kick off I would record usually the incoming",
    "start": "2152320",
    "end": "2158740"
  },
  {
    "text": "message which says I've received a message requiring pricing for this basket",
    "start": "2158740",
    "end": "2164940"
  },
  {
    "text": "and that resource is basically the basket that I am pricing okay",
    "start": "2165040",
    "end": "2172020"
  },
  {
    "text": "and then typically my activity May well be some kind of state machine that has a",
    "start": "2175359",
    "end": "2180700"
  },
  {
    "text": "number of steps so perhaps validating pricing and then",
    "start": "2180700",
    "end": "2185980"
  },
  {
    "text": "essentially what I may need to do is coordinate later steps in the",
    "start": "2185980",
    "end": "2192040"
  },
  {
    "text": "workflow so I act effectively as an orchestrator",
    "start": "2192040",
    "end": "2197740"
  },
  {
    "text": "I don't need to have an external Saga from a command process from a message",
    "start": "2197740",
    "end": "2202960"
  },
  {
    "text": "processor I don't need to have basically an API Gateway doing that I know that",
    "start": "2202960",
    "end": "2208780"
  },
  {
    "text": "essentially this thing needs to take a payment and at that point effectively I will",
    "start": "2208780",
    "end": "2214240"
  },
  {
    "text": "save my state so that I can be resumed and I will call out to another service",
    "start": "2214240",
    "end": "2219280"
  },
  {
    "text": "sending it a command basically across a an output and wait for a response",
    "start": "2219280",
    "end": "2226500"
  },
  {
    "text": "when I call out it is important that effectively I have probably updated the state of my basket to say it is awaiting",
    "start": "2232660",
    "end": "2241060"
  },
  {
    "text": "effectively payment that essentially I coordinate that with sending the message",
    "start": "2241060",
    "end": "2247420"
  },
  {
    "text": "on the output and that leads this idea of transactional messaging",
    "start": "2247420",
    "end": "2253300"
  },
  {
    "text": "it's going to be a problem if I update the resource the basket in our example to say that it is awaiting payment that",
    "start": "2253300",
    "end": "2259780"
  },
  {
    "text": "is the state I have reached if I never send the message",
    "start": "2259780",
    "end": "2264940"
  },
  {
    "text": "because my broker could fail to send the message and I",
    "start": "2264940",
    "end": "2271540"
  },
  {
    "text": "can't include it in some kind of distributed transaction because typically it doesn't support the same DTC coordinator",
    "start": "2271540",
    "end": "2279220"
  },
  {
    "text": "and transactional messaging I typically write both to the outbox the message I intend to send",
    "start": "2279220",
    "end": "2286720"
  },
  {
    "text": "and a change to the resource indicating what state I've moved it to where it's",
    "start": "2286720",
    "end": "2291760"
  },
  {
    "text": "now pending a message that means I clearly know in my state hey I've got a",
    "start": "2291760",
    "end": "2297940"
  },
  {
    "text": "basket waiting for a pricing request and here is the message I sent to get pricing okay",
    "start": "2297940",
    "end": "2304920"
  },
  {
    "text": "now the trouble with my outbox is that I can't always know whether the",
    "start": "2305440",
    "end": "2311500"
  },
  {
    "text": "failure to send to the broker was because the broker didn't respond telling me it actually had sent the",
    "start": "2311500",
    "end": "2316780"
  },
  {
    "text": "message or whether the broker effectively hadn't sent the message at all it's a problem",
    "start": "2316780",
    "end": "2323020"
  },
  {
    "text": "with distributed systems right I can't know that the lack of a response was a failure of the communication between me",
    "start": "2323020",
    "end": "2328540"
  },
  {
    "text": "and the broker or whether essentially it was due to the fact that it genuinely couldn't send something",
    "start": "2328540",
    "end": "2333940"
  },
  {
    "text": "so that means I may have to resend from my outbox",
    "start": "2333940",
    "end": "2341040"
  },
  {
    "text": "when something essentially is not marked as dispatched and because",
    "start": "2341200",
    "end": "2347020"
  },
  {
    "text": "it could actually have been dispatched that means I will send duplicates",
    "start": "2347020",
    "end": "2352060"
  },
  {
    "text": "that's why we tend to refer to guaranteed at least once delivery when we talk about this model of",
    "start": "2352060",
    "end": "2357780"
  },
  {
    "text": "transactional messaging because I can guarantee I send it to you by keeping",
    "start": "2357780",
    "end": "2362920"
  },
  {
    "text": "basically uh polling that out box to see what needs to be sent and sending it until I mark it dispatched but at the",
    "start": "2362920",
    "end": "2371020"
  },
  {
    "text": "risk that the freighter Market dispatched was an error and effectively had been dispatched",
    "start": "2371020",
    "end": "2377020"
  },
  {
    "text": "so that tends to lead to me needing to an inbox which says what have I already seen",
    "start": "2377020",
    "end": "2383380"
  },
  {
    "text": "and if I've already seen it I cannot do the work I can de-duplicate",
    "start": "2383380",
    "end": "2390040"
  },
  {
    "text": "and that leads us to have a model where effectively with inside our service we typically have an inbox messages I'm",
    "start": "2390040",
    "end": "2396760"
  },
  {
    "text": "receiving and an outbox message as I've sent Pat's point is that essentially in some",
    "start": "2396760",
    "end": "2403119"
  },
  {
    "text": "cases that may be all the state that you need because you can determine the state of an operation that is actually happening",
    "start": "2403119",
    "end": "2409480"
  },
  {
    "text": "with inside your node by simply looking at the messages you've sent and the messages you've received",
    "start": "2409480",
    "end": "2416800"
  },
  {
    "text": "you know exactly where you are in a given workflow so if you're not managing the state of a particular resource",
    "start": "2416800",
    "end": "2424599"
  },
  {
    "text": "you can still persist effectively the state of a workflow without necessarily requiring to manage",
    "start": "2424599",
    "end": "2431140"
  },
  {
    "text": "the workflow explicitly so the inbox has told me what I've received so I know how far I got",
    "start": "2431140",
    "end": "2438280"
  },
  {
    "text": "provided the outbox message has been sent that corresponds to that step",
    "start": "2438280",
    "end": "2443320"
  },
  {
    "text": "foreign so here you can see the model that I'm using is I'm saying okay at checkout I'm",
    "start": "2443320",
    "end": "2449980"
  },
  {
    "text": "going to go through validation pricing request payment at that point effectively I need to basically send a",
    "start": "2449980",
    "end": "2456640"
  },
  {
    "text": "message to the next node Downstream which takes the payment that may be very good for me to actually make that",
    "start": "2456640",
    "end": "2462880"
  },
  {
    "text": "basically a parallelizable unit because it may well be calling a external",
    "start": "2462880",
    "end": "2468520"
  },
  {
    "text": "payment provider which may be down for some reason which may have to basically be a synchronous interaction so I would",
    "start": "2468520",
    "end": "2474040"
  },
  {
    "text": "like to effectively make it asynchronous by buffering my request to it right when it is done",
    "start": "2474040",
    "end": "2482440"
  },
  {
    "text": "I receive a payment made message and typically by a correlation ID or natural correlation ID like the order ID when I",
    "start": "2482440",
    "end": "2489460"
  },
  {
    "text": "received that back I can effectively go and see what state my activity and reach for that given order",
    "start": "2489460",
    "end": "2496300"
  },
  {
    "text": "and then move it on to purchase made and then I may raise basically another message out of my node saying there is a",
    "start": "2496300",
    "end": "2502359"
  },
  {
    "text": "new order and these activities are what govern",
    "start": "2502359",
    "end": "2507400"
  },
  {
    "text": "code and these activities replace the need for external um",
    "start": "2507400",
    "end": "2513099"
  },
  {
    "text": "processes that essentially like sagas or API gateways",
    "start": "2513099",
    "end": "2518880"
  },
  {
    "text": "and errors is just a similar flow right when we talk about business errors particularly payment refused it's just",
    "start": "2519280",
    "end": "2526720"
  },
  {
    "text": "another Port that effectively take payment can use that essentially results in me as an activity saying hey I need",
    "start": "2526720",
    "end": "2532720"
  },
  {
    "text": "to send a message saying you know give me a new card",
    "start": "2532720",
    "end": "2537000"
  },
  {
    "text": "because of the buffering between the nodes",
    "start": "2543579",
    "end": "2549160"
  },
  {
    "text": "we are resilient to failure of a node if a node fails we simply queue work",
    "start": "2549160",
    "end": "2557560"
  },
  {
    "text": "when the node resumes it'll pick up work from the buffer and just continue processing as normal",
    "start": "2557560",
    "end": "2565060"
  },
  {
    "text": "and we say this gives us bulkheads to failure so think of a ship ship has various a",
    "start": "2565060",
    "end": "2570760"
  },
  {
    "text": "series of compartments if one of those compartments is hold although it floods the Ship Won't sink the other",
    "start": "2570760",
    "end": "2577900"
  },
  {
    "text": "compartments keep it up keep it afloat similarly our system won't collapse because we simply lose a node which may",
    "start": "2577900",
    "end": "2584560"
  },
  {
    "text": "be a transient failure we'll just restart one right with uh Lambda or kubernetes",
    "start": "2584560",
    "end": "2591040"
  },
  {
    "text": "when we bring it back up it can pull the messages off the buffer",
    "start": "2591040",
    "end": "2596319"
  },
  {
    "text": "one of the problems that people get into is that people try to effectively break out of this reactive model",
    "start": "2596319",
    "end": "2603640"
  },
  {
    "text": "into a more classic oo model and make a call to some kind of pricing component",
    "start": "2603640",
    "end": "2608680"
  },
  {
    "text": "at this point saying hey well this node needs to get the price so I'm going to make basically a call to try and get",
    "start": "2608680",
    "end": "2614560"
  },
  {
    "text": "that directly and typically the concern we have is that you make some kind of HTTP get from with inside your checkout",
    "start": "2614560",
    "end": "2621640"
  },
  {
    "text": "service saying oh can you just get me the price of this or you know can you check the pricing that the customer has",
    "start": "2621640",
    "end": "2627160"
  },
  {
    "text": "put in the basket is actually still correct so you may or may not know but the",
    "start": "2627160",
    "end": "2633280"
  },
  {
    "text": "reason the Titanic sank was because although the Titanic had bulkheads",
    "start": "2633280",
    "end": "2638680"
  },
  {
    "text": "they didn't have bulkheads up to the top of the ship because that would have interrupted the ability of the first class passengers to Promenade along",
    "start": "2638680",
    "end": "2645220"
  },
  {
    "text": "their deck showing off their fine clothing so the bulk had stopped which meant that when the basic one of the",
    "start": "2645220",
    "end": "2651579"
  },
  {
    "text": "compartments flooded it over topped and began to basically fill the bolt the the",
    "start": "2651579",
    "end": "2656619"
  },
  {
    "text": "part the compartments next to it leading to the Titanic sinking and essentially when you have an asynchronous message",
    "start": "2656619",
    "end": "2663339"
  },
  {
    "text": "passing reactive architecture and you choose to make HTTP gets you are effectively allowing the first class",
    "start": "2663339",
    "end": "2669819"
  },
  {
    "text": "passengers to Promenade upon your deck and you will sink when you hit an iceberg",
    "start": "2669819",
    "end": "2674859"
  },
  {
    "text": "right so learn from the Titanic and don't do that so we know what the answer is to this",
    "start": "2674859",
    "end": "2680920"
  },
  {
    "text": "model right we looked at it in flow-based programming one or two options the first is simply",
    "start": "2680920",
    "end": "2686740"
  },
  {
    "text": "it's another node that I talk to I send a message saying hey please price this for me and it gives me a response back",
    "start": "2686740",
    "end": "2691839"
  },
  {
    "text": "saying here is the price right just another basically uh message that I",
    "start": "2691839",
    "end": "2697180"
  },
  {
    "text": "send and my activity is suspended and I record something in my outbox and then something in my inbox",
    "start": "2697180",
    "end": "2703000"
  },
  {
    "text": "the other alternative is what pattern calls a reference data which is that lookup model I listen to messages",
    "start": "2703000",
    "end": "2709660"
  },
  {
    "text": "basically from some kind of pricing component which is giving me a catalog and I have that locally and I can use",
    "start": "2709660",
    "end": "2715960"
  },
  {
    "text": "that to look up the pricing information the way I often talk about this is you",
    "start": "2715960",
    "end": "2721000"
  },
  {
    "text": "know it's a bit the equivalent of uh my customer I send them a physical catalog",
    "start": "2721000",
    "end": "2726280"
  },
  {
    "text": "which has prices and the Agents that take calls for customers for order have the same catalog and they can confirm",
    "start": "2726280",
    "end": "2732520"
  },
  {
    "text": "the prices so typically what one this is a very common model for us it's called event",
    "start": "2732520",
    "end": "2738400"
  },
  {
    "text": "card State transfer when we do it by messaging is to say let's listen to the new catalog messages store them locally",
    "start": "2738400",
    "end": "2745660"
  },
  {
    "text": "in the checkout component and use it as a lookup okay",
    "start": "2745660",
    "end": "2752380"
  },
  {
    "text": "now of course this does make us eventually consistent because we may have stale prices",
    "start": "2752380",
    "end": "2759819"
  },
  {
    "text": "but reactive talks about this trade-off between eventual consistency often thought of as latency",
    "start": "2759819",
    "end": "2766420"
  },
  {
    "text": "right and resilience or availability and we typically we are trading off having",
    "start": "2766420",
    "end": "2771760"
  },
  {
    "text": "available system for one that basically may have to cope with eventual consistency and there's usually a simple",
    "start": "2771760",
    "end": "2776859"
  },
  {
    "text": "solution for example the customer tell you on the customer's basket you understand what version of pricing",
    "start": "2776859",
    "end": "2783220"
  },
  {
    "text": "catalog the front end was using and then when you come to price if it turns out your latest version in your local table",
    "start": "2783220",
    "end": "2789819"
  },
  {
    "text": "is basically an earlier version of the catalog you typically just delay your processing until effective that one",
    "start": "2789819",
    "end": "2795040"
  },
  {
    "text": "filters through",
    "start": "2795040",
    "end": "2797640"
  },
  {
    "text": "the other thing that's quite common when we think about reactive in this model of resiliency is the idea of implementing",
    "start": "2802839",
    "end": "2808839"
  },
  {
    "text": "the let it crash pattern or crash only software so the idea behind crash only software",
    "start": "2808839",
    "end": "2814720"
  },
  {
    "text": "is that we can spend an enormous amount of time trying to figure out how to make our software resilient to failure but",
    "start": "2814720",
    "end": "2821020"
  },
  {
    "text": "often that failure is transient difficult to recover from because we're at depth and Recovery may actually",
    "start": "2821020",
    "end": "2828339"
  },
  {
    "text": "attempts at recovery may put us in a worse or very more much more complicated position",
    "start": "2828339",
    "end": "2834339"
  },
  {
    "text": "so the let it crash pattern is the idea that we just say hey in the event of some kind of exceptional failure we just",
    "start": "2834339",
    "end": "2839920"
  },
  {
    "text": "simply crash our component right it's the it's the software",
    "start": "2839920",
    "end": "2845079"
  },
  {
    "text": "architecture version have you have you tried turning on or off again right",
    "start": "2845079",
    "end": "2850619"
  },
  {
    "text": "so if you implement this approach what you begin to realize is that when I restart up",
    "start": "2851260",
    "end": "2857260"
  },
  {
    "text": "one of the things I have to do is accept that I may have terminated because I crashed and the first thing I should do",
    "start": "2857260",
    "end": "2863560"
  },
  {
    "text": "is attempt to recover anything that was potentially in flight",
    "start": "2863560",
    "end": "2869200"
  },
  {
    "text": "now if we think about the model we were talking about right we tend to have everything we need in a reactive system",
    "start": "2869200",
    "end": "2877780"
  },
  {
    "text": "to do that provided I never act or acknowledge in other words basically allow effectively",
    "start": "2877780",
    "end": "2884680"
  },
  {
    "text": "an offset to be committed or a message to be listed off a queue for the connector that comes into my component",
    "start": "2884680",
    "end": "2891940"
  },
  {
    "text": "I will never effectively have reached the point where I've updated my state to show it processed",
    "start": "2891940",
    "end": "2898839"
  },
  {
    "text": "until I've completed that action so if I crash halfway through that message will be still available and",
    "start": "2898839",
    "end": "2905680"
  },
  {
    "text": "waiting on my buffer for me to process next time I start up",
    "start": "2905680",
    "end": "2910560"
  },
  {
    "text": "my resource has only been updated prior to my effectively acting that",
    "start": "2913119",
    "end": "2919180"
  },
  {
    "text": "message my inbox helps me against duplicated requests",
    "start": "2919180",
    "end": "2924760"
  },
  {
    "text": "and my outbox will tell me what I intended to send",
    "start": "2924760",
    "end": "2929760"
  },
  {
    "text": "and those allow me to have a model where I say just crash",
    "start": "2937720",
    "end": "2942760"
  },
  {
    "text": "it just crash it and we'll recover the work when we start up",
    "start": "2942760",
    "end": "2947400"
  },
  {
    "text": "yeah okay so again we also need to think about",
    "start": "2950500",
    "end": "2956440"
  },
  {
    "text": "this model of kind of push and pull or back pressure on load shedding right",
    "start": "2956440",
    "end": "2962400"
  },
  {
    "text": "we may have the option with the middleware we're using select push or",
    "start": "2962819",
    "end": "2968020"
  },
  {
    "text": "pull push would effectively say give us the messages as they arrive and Paul would say we will Poll for them",
    "start": "2968020",
    "end": "2975760"
  },
  {
    "text": "in order to basically with pop but polling it is much easier to control back pressure",
    "start": "2975760",
    "end": "2981940"
  },
  {
    "text": "because you can stop requesting when you're full enough with push it's a little bit harder",
    "start": "2981940",
    "end": "2988780"
  },
  {
    "text": "because the thing Upstream will keep shoving you messages so one of the problems you'll meet with something like",
    "start": "2988780",
    "end": "2993880"
  },
  {
    "text": "AWS Lander is it's going to keep pushing to your component",
    "start": "2993880",
    "end": "2999339"
  },
  {
    "text": "you don't have the capacity to apply back pressure your main your main choice at that point",
    "start": "2999339",
    "end": "3006900"
  },
  {
    "text": "is load shedding so when you want to apply back pressure what you need to be able to do is",
    "start": "3006900",
    "end": "3012780"
  },
  {
    "text": "control your ability to consume stuff and better pause it if",
    "start": "3012780",
    "end": "3018540"
  },
  {
    "text": "you need to a circuit breaker is if you like a model",
    "start": "3018540",
    "end": "3023579"
  },
  {
    "text": "where effectively we say we think there is a transient error",
    "start": "3023579",
    "end": "3029160"
  },
  {
    "text": "crashing probably won't help us we'll just restart and still hit this thing that's a transient error the database is",
    "start": "3029160",
    "end": "3034859"
  },
  {
    "text": "not available the payment provider's gone down so what we'll do is essentially we will temporarily stop consuming messages",
    "start": "3034859",
    "end": "3043700"
  },
  {
    "text": "then we'll let a test one through if that one works then we'll turn on the Taps and start and start moving",
    "start": "3044040",
    "end": "3051780"
  },
  {
    "text": "so circuit breakers are really useful in this model because they essentially say apply back pressure",
    "start": "3051780",
    "end": "3057780"
  },
  {
    "text": "stop consuming from the buffer but also be aware that load shedding",
    "start": "3057780",
    "end": "3063780"
  },
  {
    "text": "just as in you know flow-based programming is a valid alternative at this point right if it doesn't matter that Downstream",
    "start": "3063780",
    "end": "3070859"
  },
  {
    "text": "doesn't receive information from you because it's likely to be out of date if you passed it on in a while simply drop",
    "start": "3070859",
    "end": "3077400"
  },
  {
    "text": "the load at that point",
    "start": "3077400",
    "end": "3080359"
  },
  {
    "text": "so in order to mean responsive you will need to scale because typically",
    "start": "3087000",
    "end": "3094200"
  },
  {
    "text": "the model we are looking for is to make these Services single threaded so that",
    "start": "3094200",
    "end": "3099540"
  },
  {
    "text": "essentially we don't have any problems with concurrency so when you scale out obviously you have",
    "start": "3099540",
    "end": "3106079"
  },
  {
    "text": "a couple of options typically with messaging there's the competing consumers model where effectively it",
    "start": "3106079",
    "end": "3111359"
  },
  {
    "text": "says the ordering doesn't matter I'm reading for some kind of queue each worker item can be action independently",
    "start": "3111359",
    "end": "3116819"
  },
  {
    "text": "I I can just scale up by introducing new ones that read the same buffer right so",
    "start": "3116819",
    "end": "3122460"
  },
  {
    "text": "if I've got a basket and it needs pricing it isn't impacted by the pricing with any other baskets in the queue so I",
    "start": "3122460",
    "end": "3128520"
  },
  {
    "text": "can just use a Queue at that point and I can scale out of our competing consumers by adding additional consumers of that",
    "start": "3128520",
    "end": "3134339"
  },
  {
    "text": "basically that of those messages if ordering is important right perhaps I",
    "start": "3134339",
    "end": "3141780"
  },
  {
    "text": "basically have changes that essentially need to be applied in sequence in order to make sense",
    "start": "3141780",
    "end": "3147119"
  },
  {
    "text": "I may be using a stream with Kafka for example to preserve ordering not only to",
    "start": "3147119",
    "end": "3152400"
  },
  {
    "text": "Partition typically the middleware the broker will handle partitioning for you by scheme",
    "start": "3152400",
    "end": "3158760"
  },
  {
    "text": "known as consistent hashing which means effectively it will always tend to give the same worker things that basically",
    "start": "3158760",
    "end": "3165420"
  },
  {
    "text": "hash to the same range",
    "start": "3165420",
    "end": "3168740"
  },
  {
    "text": "and the advantage of scaling tends to be that if something has a fault",
    "start": "3173220",
    "end": "3179280"
  },
  {
    "text": "we may already have other items that are able to take over the load of the processing",
    "start": "3179280",
    "end": "3184559"
  },
  {
    "text": "and so we remain responsive even the event of failure",
    "start": "3184559",
    "end": "3189680"
  },
  {
    "text": "we can also effectively you know typically restart something to replace that one quite quickly in a modern environment",
    "start": "3190920",
    "end": "3198380"
  },
  {
    "text": "routing is really this one is basically about the fact that if we are single threaded we need to politician which I mentioned earlier right and being single",
    "start": "3200780",
    "end": "3207720"
  },
  {
    "text": "threaded inside these components which is something that I think throws a few people because they tend to have you",
    "start": "3207720",
    "end": "3212880"
  },
  {
    "text": "know thread pools dealing with work etc it's hugely advantageous it's significantly simplifies your",
    "start": "3212880",
    "end": "3218339"
  },
  {
    "text": "programming model and if you're reading from a queue you can be single threaded",
    "start": "3218339",
    "end": "3224160"
  },
  {
    "text": "because you just scale by introducing new instances or partitioning basically effectively to allocate to new ones",
    "start": "3224160",
    "end": "3232040"
  },
  {
    "text": "all right so just to kind of recap",
    "start": "3232559",
    "end": "3237780"
  },
  {
    "text": "when we think about reactive systems we are borrowing from the ideas",
    "start": "3237780",
    "end": "3243540"
  },
  {
    "text": "basically they're expressed by reactive programming where effectively want to focus on the",
    "start": "3243540",
    "end": "3250200"
  },
  {
    "text": "flow through the system and we think of nodes which program",
    "start": "3250200",
    "end": "3256920"
  },
  {
    "text": "which which are processing steps and have data flowing between them as opposed to a kind of oosoa model",
    "start": "3256920",
    "end": "3264059"
  },
  {
    "text": "where we think about data and behavior being co-located and within basically a system scale",
    "start": "3264059",
    "end": "3270960"
  },
  {
    "text": "rather than a programming scale we think about that being message driven",
    "start": "3270960",
    "end": "3277160"
  },
  {
    "text": "so we use basically messaging middleware and that messaging",
    "start": "3277440",
    "end": "3283140"
  },
  {
    "text": "connector or buffer right I'll just be resilient to failure by",
    "start": "3283140",
    "end": "3288900"
  },
  {
    "text": "giving us bulkheads and it allows us to be elastic because",
    "start": "3288900",
    "end": "3294000"
  },
  {
    "text": "we can introduce new single threaded processes of basically of those connections either by partitioning or",
    "start": "3294000",
    "end": "3299940"
  },
  {
    "text": "competing consumers which allow us to continue to be responsive to our users even in the",
    "start": "3299940",
    "end": "3305520"
  },
  {
    "text": "event of failure all right",
    "start": "3305520",
    "end": "3311780"
  },
  {
    "text": "and that is that I've got like four minutes uh if there",
    "start": "3312300",
    "end": "3318720"
  },
  {
    "text": "are so if there are any questions um you can always outcome and ask questions at the bottom afterwards and I",
    "start": "3318720",
    "end": "3325260"
  },
  {
    "text": "do take DMS on Twitter hopefully that is a bit of an",
    "start": "3325260",
    "end": "3330300"
  },
  {
    "text": "understanding of what people mean when they talk about a reactive architecture it's one that's basically message",
    "start": "3330300",
    "end": "3336599"
  },
  {
    "text": "message driven which gives you elastic resilience and responsiveness and it's",
    "start": "3336599",
    "end": "3341700"
  },
  {
    "text": "using those reactive programming Concepts you don't have to use an active",
    "start": "3341700",
    "end": "3347099"
  },
  {
    "text": "framework to build a reactive architecture that's one of the things you should take away as well right they are very useful but you can build",
    "start": "3347099",
    "end": "3354059"
  },
  {
    "text": "reactive voltages with any system that involves message passing and notes",
    "start": "3354059",
    "end": "3359160"
  },
  {
    "text": "all right I can't see any questions although I am Blinded By the Light oh there's one at the front",
    "start": "3359160",
    "end": "3365839"
  },
  {
    "text": "okay so the question was does grpc fit well into the model no is the answer so grpc",
    "start": "3366839",
    "end": "3373140"
  },
  {
    "text": "effectively is a synchronous conversation between two components in the event that basically you lose one",
    "start": "3373140",
    "end": "3380160"
  },
  {
    "text": "component you can't base your conversation breaks so uh messaging gives you that basically",
    "start": "3380160",
    "end": "3387359"
  },
  {
    "text": "buffer which means you can be asynchronous",
    "start": "3387359",
    "end": "3392180"
  },
  {
    "text": "any other questions I think there's one over here oh gosh we",
    "start": "3393480",
    "end": "3399240"
  },
  {
    "text": "have to shout",
    "start": "3399240",
    "end": "3401720"
  },
  {
    "text": "my friend when it comes to the control packets",
    "start": "3413520",
    "end": "3419940"
  },
  {
    "text": "brackets do they send check the back pressure of the next note against the expected",
    "start": "3419940",
    "end": "3428040"
  },
  {
    "text": "size of the packages in the control brackets it is it expects to send or",
    "start": "3428040",
    "end": "3434760"
  },
  {
    "text": "does it work some other magic way now the question really is about basically the ability to apply back",
    "start": "3434760",
    "end": "3440400"
  },
  {
    "text": "pressure so interactive programming you have slight advantage in the sense that you'll tend to know the capacity of your",
    "start": "3440400",
    "end": "3446280"
  },
  {
    "text": "buffer and you'll tend to be able to understand that the buffer is full in a reactive system you don't tend to",
    "start": "3446280",
    "end": "3452940"
  },
  {
    "text": "have that so easily because you don't really know the capacity of the community may not have a capacity so",
    "start": "3452940",
    "end": "3459059"
  },
  {
    "text": "what you're looking at more is your input buffer to you when you are receiving messages and how fast or slow",
    "start": "3459059",
    "end": "3466260"
  },
  {
    "text": "you want to go so it is basically the consumer that needs to control the rate that's",
    "start": "3466260",
    "end": "3472500"
  },
  {
    "text": "why polling is easier than pushing because by polling you can say stop I'm",
    "start": "3472500",
    "end": "3477660"
  },
  {
    "text": "not I'm not going to take any more if it's push you have to have a mechanism to say for the push mechanism please",
    "start": "3477660",
    "end": "3484200"
  },
  {
    "text": "don't give me any more until I ask you to give me more again right so you can't you've got to have to suspend the push",
    "start": "3484200",
    "end": "3489599"
  },
  {
    "text": "until basically it comes back so Kafka for example has polling out the box so",
    "start": "3489599",
    "end": "3494760"
  },
  {
    "text": "it's very straightforward as there's something like sqs which works basically over HTTP anyway something like rabbit",
    "start": "3494760",
    "end": "3501540"
  },
  {
    "text": "well if actually pushes an option it works but you have to basically suspend being pushed to when effectively you",
    "start": "3501540",
    "end": "3509099"
  },
  {
    "text": "decide that you've got too much capacity in which case it's a bit like being a circuit breaker you say hey stop sending me stuff right now right",
    "start": "3509099",
    "end": "3516680"
  },
  {
    "text": "oh question over there",
    "start": "3518579",
    "end": "3521839"
  },
  {
    "text": "okay so the question basically is keeping track of all my nodes and data to queue something else so observability",
    "start": "3533040",
    "end": "3539339"
  },
  {
    "text": "is your is is what you have to do with any distributed system right you have to move to a world of logs metrics and",
    "start": "3539339",
    "end": "3544980"
  },
  {
    "text": "traces Trace is particularly um for systems that basically work in this kind of way because you get to see",
    "start": "3544980",
    "end": "3551640"
  },
  {
    "text": "basically the spans and activities and you can see where stuff moves inside its workflow but yeah",
    "start": "3551640",
    "end": "3557339"
  },
  {
    "text": "um you need to start investing in observability if you are going to use this approach",
    "start": "3557339",
    "end": "3563180"
  }
]