[
  {
    "text": "all right thank you for coming I just",
    "start": "4560",
    "end": "8200"
  },
  {
    "text": "want to take a short poll to see how",
    "start": "8200",
    "end": "10000"
  },
  {
    "text": "many of you actually use C++ on some",
    "start": "10000",
    "end": "12830"
  },
  {
    "text": "[Music]",
    "start": "12830",
    "end": "15029"
  },
  {
    "text": "okay so that's about maybe twenty",
    "start": "15029",
    "end": "18310"
  },
  {
    "text": "twenty-five percent of the people here",
    "start": "18310",
    "end": "20070"
  },
  {
    "text": "optimistically my day job is a an",
    "start": "20070",
    "end": "25480"
  },
  {
    "text": "algorithms developer I do a lot of",
    "start": "25480",
    "end": "27009"
  },
  {
    "text": "computer vision and machine learning and",
    "start": "27009",
    "end": "29259"
  },
  {
    "text": "C+ classes has been for the last twenty",
    "start": "29259",
    "end": "31929"
  },
  {
    "text": "years may be the only language that",
    "start": "31929",
    "end": "34420"
  },
  {
    "text": "actually gives me the ability to eke out",
    "start": "34420",
    "end": "36610"
  },
  {
    "text": "any performance I need from from the",
    "start": "36610",
    "end": "40260"
  },
  {
    "text": "existing hardware but at night",
    "start": "40260",
    "end": "43990"
  },
  {
    "text": "my job is a I'm a tour guide into the",
    "start": "43990",
    "end": "47110"
  },
  {
    "text": "dungeons of C++ now sleepless pass is",
    "start": "47110",
    "end": "49420"
  },
  {
    "text": "language that everybody loves and it's",
    "start": "49420",
    "end": "50920"
  },
  {
    "text": "very easy to learn and very user",
    "start": "50920",
    "end": "52930"
  },
  {
    "text": "friendly as everybody knows we're",
    "start": "52930",
    "end": "54610"
  },
  {
    "text": "beginner friendly however it does have a",
    "start": "54610",
    "end": "57760"
  },
  {
    "text": "few dark corners and in fact it has some",
    "start": "57760",
    "end": "60370"
  },
  {
    "text": "very deep dungeons and today I'm going",
    "start": "60370",
    "end": "63370"
  },
  {
    "text": "to take the bridge those of you are",
    "start": "63370",
    "end": "65198"
  },
  {
    "text": "brave enough to join me into just a few",
    "start": "65199",
    "end": "68229"
  },
  {
    "text": "of the dark corners of the dungeons this",
    "start": "68229",
    "end": "71289"
  },
  {
    "text": "is a very very cut-down version of much",
    "start": "71289",
    "end": "73659"
  },
  {
    "text": "longer talk which is in fact a series of",
    "start": "73659",
    "end": "76390"
  },
  {
    "text": "multiple talks and I'd like to take you",
    "start": "76390",
    "end": "80380"
  },
  {
    "text": "there it's a so join me and I hope I I",
    "start": "80380",
    "end": "84639"
  },
  {
    "text": "think everybody's going to learn",
    "start": "84639",
    "end": "86079"
  },
  {
    "text": "something some of these things are very",
    "start": "86079",
    "end": "87700"
  },
  {
    "text": "scary and very horrifying some of them",
    "start": "87700",
    "end": "89439"
  },
  {
    "text": "are really cool and I'm guessing most of",
    "start": "89439",
    "end": "92619"
  },
  {
    "text": "you are going to learn something alright",
    "start": "92619",
    "end": "95319"
  },
  {
    "text": "so starting at a we have something",
    "start": "95319",
    "end": "98439"
  },
  {
    "text": "called abominable abominable function",
    "start": "98439",
    "end": "100780"
  },
  {
    "text": "types now if you're not supposed as",
    "start": "100780",
    "end": "102490"
  },
  {
    "text": "developers this might appear even",
    "start": "102490",
    "end": "103869"
  },
  {
    "text": "stranger and freakier then then you're",
    "start": "103869",
    "end": "108249"
  },
  {
    "text": "used to but if you are it's probably",
    "start": "108249",
    "end": "110439"
  },
  {
    "text": "even worse because looking at this line",
    "start": "110439",
    "end": "113170"
  },
  {
    "text": "of code I'm not going to point at the",
    "start": "113170",
    "end": "114429"
  },
  {
    "text": "screen I'm just going to describe",
    "start": "114429",
    "end": "115359"
  },
  {
    "text": "because we've got multiple screens here",
    "start": "115359",
    "end": "118350"
  },
  {
    "text": "we have something that looks like a",
    "start": "118350",
    "end": "120670"
  },
  {
    "text": "function of a forward declaration or a",
    "start": "120670",
    "end": "123579"
  },
  {
    "text": "defended at a function type however this",
    "start": "123579",
    "end": "126249"
  },
  {
    "text": "function type this is a very simple",
    "start": "126249",
    "end": "127869"
  },
  {
    "text": "function doesn't return a value it",
    "start": "127869",
    "end": "129880"
  },
  {
    "text": "doesn't take any arguments that that's",
    "start": "129880",
    "end": "131470"
  },
  {
    "text": "the void open close paren but it's also",
    "start": "131470",
    "end": "134260"
  },
  {
    "text": "decorated with these constant reference",
    "start": "134260",
    "end": "137730"
  },
  {
    "text": "qualifiers and we're just giving it a",
    "start": "137730",
    "end": "140349"
  },
  {
    "text": "name I'm calling it using abominable",
    "start": "140349",
    "end": "142150"
  },
  {
    "text": "that's like a typedef giving this",
    "start": "142150",
    "end": "144489"
  },
  {
    "text": "function declaration a type name however",
    "start": "144489",
    "end": "149250"
  },
  {
    "text": "there is no such thing as a Const",
    "start": "149250",
    "end": "154000"
  },
  {
    "text": "volatile reference function this is it's",
    "start": "154000",
    "end": "157090"
  },
  {
    "text": "a kind of object that doesn't exist in",
    "start": "157090",
    "end": "160299"
  },
  {
    "text": "the C++ type system and the question is",
    "start": "160299",
    "end": "164439"
  },
  {
    "text": "how come this is actually this code",
    "start": "164439",
    "end": "167049"
  },
  {
    "text": "actually compiles and where is it",
    "start": "167049",
    "end": "168639"
  },
  {
    "text": "actually usable because abominable is",
    "start": "168639",
    "end": "171340"
  },
  {
    "text": "not a reference type it's not constant",
    "start": "171340",
    "end": "173709"
  },
  {
    "text": "it's not even volatile in this case and",
    "start": "173709",
    "end": "176409"
  },
  {
    "text": "it's impossible to create a function",
    "start": "176409",
    "end": "178389"
  },
  {
    "text": "that fits this interface and there are",
    "start": "178389",
    "end": "182409"
  },
  {
    "text": "some people are actually actively trying",
    "start": "182409",
    "end": "184180"
  },
  {
    "text": "to get rid of this but it apparently",
    "start": "184180",
    "end": "185680"
  },
  {
    "text": "it's not that easy and the reason is",
    "start": "185680",
    "end": "188409"
  },
  {
    "text": "that this type of declaration although",
    "start": "188409",
    "end": "193419"
  },
  {
    "text": "it's abominable is actually a type of",
    "start": "193419",
    "end": "195310"
  },
  {
    "text": "forward declaration for methods inside",
    "start": "195310",
    "end": "197829"
  },
  {
    "text": "classes so if I'm trying to be extremely",
    "start": "197829",
    "end": "200530"
  },
  {
    "text": "clever and I hope in none of your teams",
    "start": "200530",
    "end": "203709"
  },
  {
    "text": "this is going to pass code review let's",
    "start": "203709",
    "end": "207340"
  },
  {
    "text": "say I have a very simple rectangle class",
    "start": "207340",
    "end": "209769"
  },
  {
    "text": "and if anyone has ever implemented the",
    "start": "209769",
    "end": "213489"
  },
  {
    "text": "rectangle class they often use they",
    "start": "213489",
    "end": "215590"
  },
  {
    "text": "often have these methods called top to",
    "start": "215590",
    "end": "217780"
  },
  {
    "text": "get the top point that may be the top",
    "start": "217780",
    "end": "221079"
  },
  {
    "text": "coordinate and left bottom right width",
    "start": "221079",
    "end": "223479"
  },
  {
    "text": "and height and all of these have the",
    "start": "223479",
    "end": "225069"
  },
  {
    "text": "same signature they're basically a",
    "start": "225069",
    "end": "227260"
  },
  {
    "text": "function that don't leave their methods",
    "start": "227260",
    "end": "229299"
  },
  {
    "text": "that don't take any arguments and they",
    "start": "229299",
    "end": "231159"
  },
  {
    "text": "return some let's say an integer in this",
    "start": "231159",
    "end": "232780"
  },
  {
    "text": "case so instead of writing out these six",
    "start": "232780",
    "end": "235629"
  },
  {
    "text": "methods separately declaring them I can",
    "start": "235629",
    "end": "239590"
  },
  {
    "text": "instead use the abominable function type",
    "start": "239590",
    "end": "242699"
  },
  {
    "text": "specifier here in this case I call it",
    "start": "242699",
    "end": "244959"
  },
  {
    "text": "the int property which is the function",
    "start": "244959",
    "end": "246819"
  },
  {
    "text": "that takes no arguments returns an int",
    "start": "246819",
    "end": "249040"
  },
  {
    "text": "and can be called even on constants",
    "start": "249040",
    "end": "250959"
  },
  {
    "text": "qualified object and then I just say",
    "start": "250959",
    "end": "253150"
  },
  {
    "text": "okay I have top left bottom right width",
    "start": "253150",
    "end": "255250"
  },
  {
    "text": "and height which have this signature and",
    "start": "255250",
    "end": "257829"
  },
  {
    "text": "of course it did the implementation",
    "start": "257829",
    "end": "259570"
  },
  {
    "text": "there implemented just as usual so these",
    "start": "259570",
    "end": "262150"
  },
  {
    "text": "are abominable function types I hope you",
    "start": "262150",
    "end": "264159"
  },
  {
    "text": "never actually use this in code but it's",
    "start": "264159",
    "end": "266919"
  },
  {
    "text": "it's nice to know and it's a funny",
    "start": "266919",
    "end": "268330"
  },
  {
    "text": "quirky thing",
    "start": "268330",
    "end": "269680"
  },
  {
    "text": "now if we moved maybe to the most",
    "start": "269680",
    "end": "274700"
  },
  {
    "text": "notorious and infamous part of the C++",
    "start": "274700",
    "end": "278360"
  },
  {
    "text": "world and we add several we had this",
    "start": "278360",
    "end": "281000"
  },
  {
    "text": "morning Patricia gave a talk about",
    "start": "281000",
    "end": "282290"
  },
  {
    "text": "security and about undefined behavior in",
    "start": "282290",
    "end": "285290"
  },
  {
    "text": "C++ is the major issue and most",
    "start": "285290",
    "end": "288770"
  },
  {
    "text": "suppressor developers love talking about",
    "start": "288770",
    "end": "291610"
  },
  {
    "text": "undefined behavior it's one of the most",
    "start": "291610",
    "end": "294200"
  },
  {
    "text": "popular pastimes and tweeting about it",
    "start": "294200",
    "end": "297410"
  },
  {
    "text": "and arguing about it and discussing it",
    "start": "297410",
    "end": "300980"
  },
  {
    "text": "in length and I would say for sleep as",
    "start": "300980",
    "end": "305120"
  },
  {
    "text": "fast that most of the you be without you",
    "start": "305120",
    "end": "307730"
  },
  {
    "text": "because we love it so much most of the",
    "start": "307730",
    "end": "310130"
  },
  {
    "text": "UB related issues come originate even",
    "start": "310130",
    "end": "313640"
  },
  {
    "text": "before silicide originated in the C",
    "start": "313640",
    "end": "315410"
  },
  {
    "text": "language and some of them actually have",
    "start": "315410",
    "end": "317480"
  },
  {
    "text": "very reasonable reasons why they are in",
    "start": "317480",
    "end": "320360"
  },
  {
    "text": "the way they are but the main problem is",
    "start": "320360",
    "end": "324200"
  },
  {
    "text": "that whenever you have an undefined",
    "start": "324200",
    "end": "327230"
  },
  {
    "text": "behavior inside your program it means",
    "start": "327230",
    "end": "330050"
  },
  {
    "text": "your whole program is now completely",
    "start": "330050",
    "end": "332810"
  },
  {
    "text": "invalid and can do whatever the compiler",
    "start": "332810",
    "end": "335060"
  },
  {
    "text": "wishes to do with your program so there",
    "start": "335060",
    "end": "338540"
  },
  {
    "text": "it's it's very easy to add undefined",
    "start": "338540",
    "end": "342350"
  },
  {
    "text": "behavior to your program however the",
    "start": "342350",
    "end": "344900"
  },
  {
    "text": "compiler assumes the undefined behavior",
    "start": "344900",
    "end": "347330"
  },
  {
    "text": "never ever ever happens it's like an",
    "start": "347330",
    "end": "350300"
  },
  {
    "text": "axiom built into the way compilers are",
    "start": "350300",
    "end": "353210"
  },
  {
    "text": "constructed so whenever compiler",
    "start": "353210",
    "end": "357610"
  },
  {
    "text": "encounters undefined behavior it is not",
    "start": "357610",
    "end": "361330"
  },
  {
    "text": "required to generate an error instead",
    "start": "361330",
    "end": "364340"
  },
  {
    "text": "it's going to assume that okay this",
    "start": "364340",
    "end": "368030"
  },
  {
    "text": "might maybe this is undefined behavior",
    "start": "368030",
    "end": "369830"
  },
  {
    "text": "but I'm not going to think about it for",
    "start": "369830",
    "end": "371600"
  },
  {
    "text": "me and undefined behavior cannot happen",
    "start": "371600",
    "end": "373730"
  },
  {
    "text": "here because this is an axiom and by",
    "start": "373730",
    "end": "376970"
  },
  {
    "text": "assuming this axiom there are logical",
    "start": "376970",
    "end": "378830"
  },
  {
    "text": "implications which make your compiler",
    "start": "378830",
    "end": "380780"
  },
  {
    "text": "change completely change the logic of",
    "start": "380780",
    "end": "382880"
  },
  {
    "text": "your code sometimes to do the complete",
    "start": "382880",
    "end": "384500"
  },
  {
    "text": "opposite of what you're expecting so",
    "start": "384500",
    "end": "387440"
  },
  {
    "text": "undefined behavior is something that can",
    "start": "387440",
    "end": "389210"
  },
  {
    "text": "hit everyone and everywhere every in",
    "start": "389210",
    "end": "393200"
  },
  {
    "text": "almost every program and that's why we",
    "start": "393200",
    "end": "395420"
  },
  {
    "text": "have tools like UB sanitizer which are",
    "start": "395420",
    "end": "398180"
  },
  {
    "text": "specifically made for identifying",
    "start": "398180",
    "end": "400310"
  },
  {
    "text": "locating undefined behavior and I think",
    "start": "400310",
    "end": "403569"
  },
  {
    "text": "in 1999 the the slide is cut off a bit",
    "start": "403569",
    "end": "407259"
  },
  {
    "text": "somebody said on on complying STD I",
    "start": "407259",
    "end": "412539"
  },
  {
    "text": "think it was the C language permissible",
    "start": "412539",
    "end": "415779"
  },
  {
    "text": "undefined behavior ranges from ignoring",
    "start": "415779",
    "end": "417459"
  },
  {
    "text": "the situation completely with",
    "start": "417459",
    "end": "419919"
  },
  {
    "text": "unpredictable results to having demons",
    "start": "419919",
    "end": "421809"
  },
  {
    "text": "fly out of your nose so this is like if",
    "start": "421809",
    "end": "424659"
  },
  {
    "text": "you've ever heard about the nasal demons",
    "start": "424659",
    "end": "426339"
  },
  {
    "text": "this is the nasal demon the undefined",
    "start": "426339",
    "end": "428649"
  },
  {
    "text": "behavior and I'm going to show you an",
    "start": "428649",
    "end": "429669"
  },
  {
    "text": "example this came this was a very",
    "start": "429669",
    "end": "431949"
  },
  {
    "text": "popular on Twitter and and read it last",
    "start": "431949",
    "end": "434499"
  },
  {
    "text": "year somebody posted this five line or",
    "start": "434499",
    "end": "437800"
  },
  {
    "text": "six line piece of code which and anyone",
    "start": "437800",
    "end": "440589"
  },
  {
    "text": "who can read you know I can understand",
    "start": "440589",
    "end": "443379"
  },
  {
    "text": "even if you're not a successive",
    "start": "443379",
    "end": "444639"
  },
  {
    "text": "programmer essentially with the first",
    "start": "444639",
    "end": "447189"
  },
  {
    "text": "language just including some library the",
    "start": "447189",
    "end": "450639"
  },
  {
    "text": "second line we're defining a pointer",
    "start": "450639",
    "end": "455050"
  },
  {
    "text": "type a function pointer type so we're",
    "start": "455050",
    "end": "457059"
  },
  {
    "text": "saying we're giving a name to all",
    "start": "457059",
    "end": "459430"
  },
  {
    "text": "functions that return an integer and",
    "start": "459430",
    "end": "461490"
  },
  {
    "text": "don't take any argument so this is very",
    "start": "461490",
    "end": "463719"
  },
  {
    "text": "similar to the like the one of the",
    "start": "463719",
    "end": "465939"
  },
  {
    "text": "simplest functions you can think of in",
    "start": "465939",
    "end": "468099"
  },
  {
    "text": "our third line we have we're defining a",
    "start": "468099",
    "end": "471219"
  },
  {
    "text": "function pointer called do and this is",
    "start": "471219",
    "end": "474089"
  },
  {
    "text": "actually in global scope and because",
    "start": "474089",
    "end": "477639"
  },
  {
    "text": "it's in global scope this is an object",
    "start": "477639",
    "end": "479499"
  },
  {
    "text": "of its a function pointer and it's not",
    "start": "479499",
    "end": "482079"
  },
  {
    "text": "initialized to any actual function right",
    "start": "482079",
    "end": "484809"
  },
  {
    "text": "so because there is no assignment here",
    "start": "484809",
    "end": "487479"
  },
  {
    "text": "but because it's in global scope the",
    "start": "487479",
    "end": "489610"
  },
  {
    "text": "compiler is generous enough and it",
    "start": "489610",
    "end": "491319"
  },
  {
    "text": "actually has to do this according to the",
    "start": "491319",
    "end": "492909"
  },
  {
    "text": "standard it is initialized to zero so by",
    "start": "492909",
    "end": "496749"
  },
  {
    "text": "the time this object is instantiated",
    "start": "496749",
    "end": "498550"
  },
  {
    "text": "this do pointer is actually initialized",
    "start": "498550",
    "end": "501399"
  },
  {
    "text": "to no our set the first line we're",
    "start": "501399",
    "end": "505389"
  },
  {
    "text": "defining a function called erase all now",
    "start": "505389",
    "end": "508089"
  },
  {
    "text": "this is a very naughty function because",
    "start": "508089",
    "end": "510099"
  },
  {
    "text": "it's going to call it's going to",
    "start": "510099",
    "end": "511119"
  },
  {
    "text": "essentially array so all of our hard",
    "start": "511119",
    "end": "513518"
  },
  {
    "text": "drive and but that's okay because we're",
    "start": "513519",
    "end": "518078"
  },
  {
    "text": "not going to call this function right so",
    "start": "518079",
    "end": "519789"
  },
  {
    "text": "we can keep on with our program and",
    "start": "519789",
    "end": "521860"
  },
  {
    "text": "nothing happened and then we define",
    "start": "521860",
    "end": "524709"
  },
  {
    "text": "another function called never called and",
    "start": "524709",
    "end": "527350"
  },
  {
    "text": "all it does is it takes this global",
    "start": "527350",
    "end": "529899"
  },
  {
    "text": "global function pointer do and assigns",
    "start": "529899",
    "end": "532660"
  },
  {
    "text": "it to assigns erase all to this function",
    "start": "532660",
    "end": "536139"
  },
  {
    "text": "pointer so",
    "start": "536139",
    "end": "537400"
  },
  {
    "text": "if we ever do call never called then",
    "start": "537400",
    "end": "540160"
  },
  {
    "text": "we're going to be assigning this",
    "start": "540160",
    "end": "541600"
  },
  {
    "text": "function into the function pointer",
    "start": "541600",
    "end": "543250"
  },
  {
    "text": "however we're never going to call it so",
    "start": "543250",
    "end": "545470"
  },
  {
    "text": "up to now nothing wrong right we haven't",
    "start": "545470",
    "end": "548830"
  },
  {
    "text": "done anything too too scary or I mean",
    "start": "548830",
    "end": "552820"
  },
  {
    "text": "we're playing with fire but we're being",
    "start": "552820",
    "end": "554830"
  },
  {
    "text": "careful and our men is deceptively",
    "start": "554830",
    "end": "559330"
  },
  {
    "text": "simple it just calls do right it returns",
    "start": "559330",
    "end": "564790"
  },
  {
    "text": "the value of do now remember the entry",
    "start": "564790",
    "end": "567880"
  },
  {
    "text": "point to me at the entry point domain do",
    "start": "567880",
    "end": "570790"
  },
  {
    "text": "is in fact uninitialized or it's",
    "start": "570790",
    "end": "573670"
  },
  {
    "text": "initialized to zero so because we never",
    "start": "573670",
    "end": "575830"
  },
  {
    "text": "called you a song we never called never",
    "start": "575830",
    "end": "577810"
  },
  {
    "text": "called so in a sense this is undefined",
    "start": "577810",
    "end": "584170"
  },
  {
    "text": "behavior because we are actually trying",
    "start": "584170",
    "end": "586180"
  },
  {
    "text": "to call a function through a function",
    "start": "586180",
    "end": "587800"
  },
  {
    "text": "pointer that it's set to now this is",
    "start": "587800",
    "end": "590560"
  },
  {
    "text": "undefined behavior and when it's",
    "start": "590560",
    "end": "592900"
  },
  {
    "text": "undefined behavior all bets are off and",
    "start": "592900",
    "end": "594850"
  },
  {
    "text": "the compiler generously generate this",
    "start": "594850",
    "end": "598330"
  },
  {
    "text": "code okay even if you don't with",
    "start": "598330",
    "end": "600610"
  },
  {
    "text": "assembly and I must say I'm not a big",
    "start": "600610",
    "end": "602530"
  },
  {
    "text": "assembly reader I prefer other ebooks",
    "start": "602530",
    "end": "605670"
  },
  {
    "text": "what it actually does is it raises your",
    "start": "605670",
    "end": "608080"
  },
  {
    "text": "drive okay so what is that Tim so did",
    "start": "608080",
    "end": "617590"
  },
  {
    "text": "this were this was very popular on",
    "start": "617590",
    "end": "619120"
  },
  {
    "text": "reddit last year because basically this",
    "start": "619120",
    "end": "621400"
  },
  {
    "text": "program doesn't do anything but it does",
    "start": "621400",
    "end": "623050"
  },
  {
    "text": "invoke undefined behavior which got the",
    "start": "623050",
    "end": "626500"
  },
  {
    "text": "I think it was GCC to generate a program",
    "start": "626500",
    "end": "629320"
  },
  {
    "text": "that erases your hard drive although the",
    "start": "629320",
    "end": "630790"
  },
  {
    "text": "function was never explicitly so beware",
    "start": "630790",
    "end": "634420"
  },
  {
    "text": "of the you be demon right going on",
    "start": "634420",
    "end": "638220"
  },
  {
    "text": "continuing to duck typing duck typing is",
    "start": "638220",
    "end": "642420"
  },
  {
    "text": "an application of the duck test in type",
    "start": "642420",
    "end": "645640"
  },
  {
    "text": "safety so when we're talking about types",
    "start": "645640",
    "end": "648010"
  },
  {
    "text": "it's it's a popular term of what's",
    "start": "648010",
    "end": "651310"
  },
  {
    "text": "called in logic abductive reasoning and",
    "start": "651310",
    "end": "653170"
  },
  {
    "text": "you've most of you probably heard the",
    "start": "653170",
    "end": "655180"
  },
  {
    "text": "term heard the the small quip if it",
    "start": "655180",
    "end": "657820"
  },
  {
    "text": "looks like a duck swims like a duck and",
    "start": "657820",
    "end": "659410"
  },
  {
    "text": "quacks like a duck then it's probably a",
    "start": "659410",
    "end": "661120"
  },
  {
    "text": "duck so it's a sort of typed by",
    "start": "661120",
    "end": "664030"
  },
  {
    "text": "similarity and this is a very popular",
    "start": "664030",
    "end": "668280"
  },
  {
    "text": "type form of",
    "start": "668280",
    "end": "670790"
  },
  {
    "text": "type safety or type structure inside",
    "start": "670790",
    "end": "673940"
  },
  {
    "text": "dynamic languages so things like",
    "start": "673940",
    "end": "675980"
  },
  {
    "text": "JavaScript where once you try to call",
    "start": "675980",
    "end": "678710"
  },
  {
    "text": "some kind of method or access a member",
    "start": "678710",
    "end": "680840"
  },
  {
    "text": "of an object of some type that you don't",
    "start": "680840",
    "end": "683600"
  },
  {
    "text": "necessarily know the interpreter or the",
    "start": "683600",
    "end": "685910"
  },
  {
    "text": "compiler might is actually going to",
    "start": "685910",
    "end": "687980"
  },
  {
    "text": "check what the runtime type of that",
    "start": "687980",
    "end": "689930"
  },
  {
    "text": "object is and if it does support that",
    "start": "689930",
    "end": "692900"
  },
  {
    "text": "method or that object is gonna work it",
    "start": "692900",
    "end": "694640"
  },
  {
    "text": "otherwise it's going to crash or",
    "start": "694640",
    "end": "696080"
  },
  {
    "text": "generate some kind of error however C++",
    "start": "696080",
    "end": "699530"
  },
  {
    "text": "is a strongly typed language so all of",
    "start": "699530",
    "end": "701660"
  },
  {
    "text": "these type checks happen at compile time",
    "start": "701660",
    "end": "705550"
  },
  {
    "text": "however again c-in-c process we've got",
    "start": "705910",
    "end": "709850"
  },
  {
    "text": "these nifty things called templates and",
    "start": "709850",
    "end": "712430"
  },
  {
    "text": "tablets are statically typed and that's",
    "start": "712430",
    "end": "717560"
  },
  {
    "text": "where duck typing comes into play inside",
    "start": "717560",
    "end": "720020"
  },
  {
    "text": "C++ where when we try to instantiate a",
    "start": "720020",
    "end": "723290"
  },
  {
    "text": "template with some parameter types and",
    "start": "723290",
    "end": "726530"
  },
  {
    "text": "templates are like generics and in some",
    "start": "726530",
    "end": "729230"
  },
  {
    "text": "of the manage languages for those who",
    "start": "729230",
    "end": "731720"
  },
  {
    "text": "are not familiar then at the point of",
    "start": "731720",
    "end": "733970"
  },
  {
    "text": "instantiation when we try to call a",
    "start": "733970",
    "end": "735860"
  },
  {
    "text": "method on the parameters type the",
    "start": "735860",
    "end": "738830"
  },
  {
    "text": "compiler is going to warn us so this is",
    "start": "738830",
    "end": "740690"
  },
  {
    "text": "another form of duck typing that happens",
    "start": "740690",
    "end": "742730"
  },
  {
    "text": "it still happens at compile time but it",
    "start": "742730",
    "end": "745070"
  },
  {
    "text": "happens at in at the point of",
    "start": "745070",
    "end": "746990"
  },
  {
    "text": "instantiation so it doesn't happen when",
    "start": "746990",
    "end": "749240"
  },
  {
    "text": "I let's say I'm a library writer and",
    "start": "749240",
    "end": "751550"
  },
  {
    "text": "working on some kind of template class",
    "start": "751550",
    "end": "754060"
  },
  {
    "text": "I'm not the one is going to get there or",
    "start": "754060",
    "end": "756710"
  },
  {
    "text": "whoever is going to get the error that",
    "start": "756710",
    "end": "758720"
  },
  {
    "text": "I'm using the wrong type is the user",
    "start": "758720",
    "end": "760190"
  },
  {
    "text": "when they're actually trying to use my",
    "start": "760190",
    "end": "761630"
  },
  {
    "text": "template with a particular type that the",
    "start": "761630",
    "end": "764210"
  },
  {
    "text": "template is instantiated with and C++ 20",
    "start": "764210",
    "end": "767860"
  },
  {
    "text": "is probably going to have something",
    "start": "767860",
    "end": "770750"
  },
  {
    "text": "called concepts which allow us to",
    "start": "770750",
    "end": "772460"
  },
  {
    "text": "constrain the types that template will",
    "start": "772460",
    "end": "775070"
  },
  {
    "text": "accept and allow to be parameterized on",
    "start": "775070",
    "end": "777770"
  },
  {
    "text": "in such a way that me that I is the",
    "start": "777770",
    "end": "781130"
  },
  {
    "text": "library writer can avoid having to let",
    "start": "781130",
    "end": "784820"
  },
  {
    "text": "you see all the type errors and instead",
    "start": "784820",
    "end": "786980"
  },
  {
    "text": "you're going to the the error is going",
    "start": "786980",
    "end": "789650"
  },
  {
    "text": "to say at the point where you say okay I",
    "start": "789650",
    "end": "791450"
  },
  {
    "text": "want to instantiate your type you say no",
    "start": "791450",
    "end": "793340"
  },
  {
    "text": "this is not the writer you cannot use",
    "start": "793340",
    "end": "794960"
  },
  {
    "text": "you cannot instantiate this instead of",
    "start": "794960",
    "end": "797540"
  },
  {
    "text": "getting some cryptic errors which C++",
    "start": "797540",
    "end": "799760"
  },
  {
    "text": "cryptic and very long template errors",
    "start": "799760",
    "end": "802490"
  },
  {
    "text": "which sympathises",
    "start": "802490",
    "end": "804529"
  },
  {
    "text": "furgus for so one of the nice friendly",
    "start": "804529",
    "end": "811899"
  },
  {
    "text": "creatures we'll see today are actually",
    "start": "811899",
    "end": "814610"
  },
  {
    "text": "flying saucers or more commonly known as",
    "start": "814610",
    "end": "817999"
  },
  {
    "text": "the spaceship operator if you're never",
    "start": "817999",
    "end": "820339"
  },
  {
    "text": "seen it before this is coming this is",
    "start": "820339",
    "end": "821809"
  },
  {
    "text": "coming to see past was 20 it's a",
    "start": "821809",
    "end": "823730"
  },
  {
    "text": "wonderful new operator that we're",
    "start": "823730",
    "end": "826550"
  },
  {
    "text": "getting in the language and what it does",
    "start": "826550",
    "end": "828980"
  },
  {
    "text": "is the three-way comparison so if anyone",
    "start": "828980",
    "end": "831290"
  },
  {
    "text": "is familiar with string comparison which",
    "start": "831290",
    "end": "834499"
  },
  {
    "text": "might return a negative number if one",
    "start": "834499",
    "end": "836600"
  },
  {
    "text": "string is lexicographically or like",
    "start": "836600",
    "end": "839449"
  },
  {
    "text": "dictionary order before the other might",
    "start": "839449",
    "end": "841850"
  },
  {
    "text": "be zero when they're equal in a positive",
    "start": "841850",
    "end": "843949"
  },
  {
    "text": "number when it's when they're it's the",
    "start": "843949",
    "end": "846410"
  },
  {
    "text": "other way around so that's what a",
    "start": "846410",
    "end": "848050"
  },
  {
    "text": "three-way comparator does and the",
    "start": "848050",
    "end": "850730"
  },
  {
    "text": "beautiful thing here is that once we",
    "start": "850730",
    "end": "852740"
  },
  {
    "text": "define just this single operator the",
    "start": "852740",
    "end": "855050"
  },
  {
    "text": "compiler is going to define there were",
    "start": "855050",
    "end": "857029"
  },
  {
    "text": "all the rest of the comparison operators",
    "start": "857029",
    "end": "859009"
  },
  {
    "text": "for us using this operator and it's",
    "start": "859009",
    "end": "862249"
  },
  {
    "text": "going to be optimally generated so",
    "start": "862249",
    "end": "866649"
  },
  {
    "text": "because if we only define let's say the",
    "start": "866649",
    "end": "869420"
  },
  {
    "text": "less than operators and or less than and",
    "start": "869420",
    "end": "871550"
  },
  {
    "text": "equals and we have to start playing with",
    "start": "871550",
    "end": "873199"
  },
  {
    "text": "some logical combinations but here the",
    "start": "873199",
    "end": "875930"
  },
  {
    "text": "compiler is going to do that for us so",
    "start": "875930",
    "end": "877790"
  },
  {
    "text": "and that's beautiful so it's just a",
    "start": "877790",
    "end": "879620"
  },
  {
    "text": "single line or a single implementation",
    "start": "879620",
    "end": "881809"
  },
  {
    "text": "creating all the rest of the operators",
    "start": "881809",
    "end": "883730"
  },
  {
    "text": "for us for free it can give us a",
    "start": "883730",
    "end": "886639"
  },
  {
    "text": "consistent interface and it has a lot",
    "start": "886639",
    "end": "889069"
  },
  {
    "text": "more it has support for partial ordering",
    "start": "889069",
    "end": "891889"
  },
  {
    "text": "and things like weak weaker ordering",
    "start": "891889",
    "end": "894050"
  },
  {
    "text": "like things if you can think about like",
    "start": "894050",
    "end": "896209"
  },
  {
    "text": "lower in a case insensitive comparison",
    "start": "896209",
    "end": "899660"
  },
  {
    "text": "things like that so it's it's a very",
    "start": "899660",
    "end": "901699"
  },
  {
    "text": "beautiful thing and just to give you an",
    "start": "901699",
    "end": "904879"
  },
  {
    "text": "example of how awesome this is",
    "start": "904879",
    "end": "906500"
  },
  {
    "text": "think about a very very simple point",
    "start": "906500",
    "end": "908660"
  },
  {
    "text": "class like this is the base of the most",
    "start": "908660",
    "end": "910250"
  },
  {
    "text": "basic point you can think of it has two",
    "start": "910250",
    "end": "912819"
  },
  {
    "text": "two members x and y of into integer and",
    "start": "912819",
    "end": "916220"
  },
  {
    "text": "all we need to do to get all of the",
    "start": "916220",
    "end": "918769"
  },
  {
    "text": "comparison features that we ever might",
    "start": "918769",
    "end": "921769"
  },
  {
    "text": "ever want it just write down this line",
    "start": "921769",
    "end": "923929"
  },
  {
    "text": "and let's literally copying this line on",
    "start": "923929",
    "end": "926319"
  },
  {
    "text": "the return type is auto we're creating",
    "start": "926319",
    "end": "928879"
  },
  {
    "text": "the spaceship operator it's taking a",
    "start": "928879",
    "end": "930499"
  },
  {
    "text": "second the right hand side point and I",
    "start": "930499",
    "end": "933980"
  },
  {
    "text": "just said it to the default and the",
    "start": "933980",
    "end": "936350"
  },
  {
    "text": "compiler is going to automatically not",
    "start": "936350",
    "end": "938150"
  },
  {
    "text": "and generate the rest of the comparison",
    "start": "938150",
    "end": "940010"
  },
  {
    "text": "operator it's actually going to generate",
    "start": "940010",
    "end": "942020"
  },
  {
    "text": "the implementation for this for this",
    "start": "942020",
    "end": "945430"
  },
  {
    "text": "operator as well and this the result is",
    "start": "945430",
    "end": "948350"
  },
  {
    "text": "going to be what's called a totally",
    "start": "948350",
    "end": "949790"
  },
  {
    "text": "ordered member wise comparison so it's",
    "start": "949790",
    "end": "951950"
  },
  {
    "text": "going to check that all of the members",
    "start": "951950",
    "end": "955760"
  },
  {
    "text": "of our class one by one by the order",
    "start": "955760",
    "end": "958190"
  },
  {
    "text": "there they appear inside the definition",
    "start": "958190",
    "end": "960410"
  },
  {
    "text": "so it's going to check X and if X is I",
    "start": "960410",
    "end": "963670"
  },
  {
    "text": "have to finish all right yeah okay so I",
    "start": "963670",
    "end": "968530"
  },
  {
    "text": "have a lot to say about terminators and",
    "start": "968530",
    "end": "970990"
  },
  {
    "text": "but you want me to finish so I'll just",
    "start": "970990",
    "end": "974530"
  },
  {
    "text": "I'll just finished with this saying that",
    "start": "974530",
    "end": "977090"
  },
  {
    "text": "there are only two kinds of languages",
    "start": "977090",
    "end": "979130"
  },
  {
    "text": "this be honest truth to be said this",
    "start": "979130",
    "end": "980900"
  },
  {
    "text": "there are only two kinds of languages",
    "start": "980900",
    "end": "982970"
  },
  {
    "text": "the ones people complain about and the",
    "start": "982970",
    "end": "985130"
  },
  {
    "text": "ones nobody uses so I hope you enjoyed",
    "start": "985130",
    "end": "987890"
  },
  {
    "text": "this thank you",
    "start": "987890",
    "end": "989570"
  },
  {
    "text": "[Applause]",
    "start": "989570",
    "end": "993989"
  }
]