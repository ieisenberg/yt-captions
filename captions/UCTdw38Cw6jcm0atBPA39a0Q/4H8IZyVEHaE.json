[
  {
    "start": "0",
    "end": "149000"
  },
  {
    "text": "cool I guess most of us are here and we can start talking about error handling",
    "start": "7859",
    "end": "14940"
  },
  {
    "text": "and C plus plus so I hope you all had a nice lunch break",
    "start": "14940",
    "end": "22800"
  },
  {
    "text": "and we can start with a short information about myself",
    "start": "22800",
    "end": "28019"
  },
  {
    "text": "as you can see the title name and I've been doing Frameworks libraries and tooling for",
    "start": "28019",
    "end": "35340"
  },
  {
    "text": "quite a while mostly in C plus plus but I'll see some other languages approaches tools and so on now",
    "start": "35340",
    "end": "45059"
  },
  {
    "text": "I'm working as a senior software engineer at Zipit this is Norwegian company and we are doing human like eyes",
    "start": "45059",
    "end": "53520"
  },
  {
    "text": "for robots if you're interested you can scan this code and navigate learn we also have a",
    "start": "53520",
    "end": "60539"
  },
  {
    "text": "boost over there nearby the entrance visit us have your 3D selfie",
    "start": "60539",
    "end": "67799"
  },
  {
    "text": "and yeah regard the talk you can ask questions",
    "start": "67799",
    "end": "73680"
  },
  {
    "text": "just take attention somehow raise your hand and I also",
    "start": "73680",
    "end": "79979"
  },
  {
    "text": "will try to put like 10-15 minutes aside but don't drop the talk",
    "start": "79979",
    "end": "86299"
  },
  {
    "text": "and uh what this is be about that would be about error handling and C",
    "start": "86580",
    "end": "92759"
  },
  {
    "text": "plus plus but not only the situation when you already like have an error got",
    "start": "92759",
    "end": "98159"
  },
  {
    "text": "it and whatever and you want to somehow really handle it but also about the",
    "start": "98159",
    "end": "104460"
  },
  {
    "text": "situation when you need to propagate it somehow perhaps wraps at context and so",
    "start": "104460",
    "end": "109920"
  },
  {
    "text": "on I will start with common definitions for us to just be on the same wavelength",
    "start": "109920",
    "end": "116820"
  },
  {
    "text": "have common understanding what we are talking about and then move to the more traditional ways of error handling",
    "start": "116820",
    "end": "123060"
  },
  {
    "text": "propagation and code styles to be dependent on it then move to more modern",
    "start": "123060",
    "end": "128640"
  },
  {
    "text": "first functional approach and I'm gonna finish with at least three good",
    "start": "128640",
    "end": "135120"
  },
  {
    "text": "practices probably not the best but nice recommendation that could save you some time and you're doing another hand in",
    "start": "135120",
    "end": "141540"
  },
  {
    "text": "your software and let's get started with like error",
    "start": "141540",
    "end": "147840"
  },
  {
    "text": "handling in general and common definition here I put some classification which probably not like a",
    "start": "147840",
    "end": "154020"
  },
  {
    "start": "149000",
    "end": "149000"
  },
  {
    "text": "real classification and non-exhaustive classification but it's also's purpose to distinguish what we're going to talk",
    "start": "154020",
    "end": "161340"
  },
  {
    "text": "about from some other things the first bullet here is environment and",
    "start": "161340",
    "end": "167340"
  },
  {
    "text": "it's what basically is outside of our application or library in that sense",
    "start": "167340",
    "end": "172980"
  },
  {
    "text": "that might be Hardware you run on operation system connectivity if you",
    "start": "172980",
    "end": "179099"
  },
  {
    "text": "like I mean application lives in some sort of a network and so on there might be some resources starvation",
    "start": "179099",
    "end": "187819"
  },
  {
    "text": "any resources allocation like handlers threads memories Sonic unavailable",
    "start": "187819",
    "end": "194340"
  },
  {
    "text": "resources these things we are not going to touch here it's slightly unrelated to C plus plus and mechanisms how to handle",
    "start": "194340",
    "end": "201599"
  },
  {
    "text": "this kind of Errors so well like they are here but they're slightly different",
    "start": "201599",
    "end": "206819"
  },
  {
    "text": "the second bullet is application and here that's what basically happening",
    "start": "206819",
    "end": "212519"
  },
  {
    "text": "inside of your other application or library or whatever when an exceptional",
    "start": "212519",
    "end": "219239"
  },
  {
    "text": "situation acute say here there are no permissions to retry it from files or",
    "start": "219239",
    "end": "226980"
  },
  {
    "text": "there are calculations error and stuff like that and the third bullet I put it here because it's gonna Niche error I",
    "start": "226980",
    "end": "235260"
  },
  {
    "text": "would say a niche case when your app is not like you know a main app but it's a",
    "start": "235260",
    "end": "241080"
  },
  {
    "text": "plugin and you have some host application and in this case we can have some sort of a set of Errors",
    "start": "241080",
    "end": "247860"
  },
  {
    "text": "when host does not allow you to do what you really want because in this case from time to time you might have special",
    "start": "247860",
    "end": "255180"
  },
  {
    "text": "mechanism to allocate memory through memory pool some thread pulls some mechanisms to schedule tasks and so on",
    "start": "255180",
    "end": "261000"
  },
  {
    "text": "even main process can be okay probably not nowadays but it potentially could be 32-bit process and so on there are some",
    "start": "261000",
    "end": "268080"
  },
  {
    "text": "limitations and we are not gonna talk about this",
    "start": "268080",
    "end": "273979"
  },
  {
    "start": "274000",
    "end": "274000"
  },
  {
    "text": "right and examples of error and exceptional",
    "start": "274080",
    "end": "280080"
  },
  {
    "text": "situations that might occur during the second bullet from the previous slide it's obviously classic file input and",
    "start": "280080",
    "end": "287699"
  },
  {
    "text": "output when there are like not enough rights something is not reachable or writable there is not enough",
    "start": "287699",
    "end": "294120"
  },
  {
    "text": "space and so on any users actions if you are talking about UI app not about",
    "start": "294120",
    "end": "300240"
  },
  {
    "text": "libraries that's like the probably more or less the most common source of issues",
    "start": "300240",
    "end": "306259"
  },
  {
    "text": "the calculations whatever division by zero like overflow which is not strictly",
    "start": "306259",
    "end": "312960"
  },
  {
    "text": "defined as we learned today or yesterday and two other stuff like two loss bullet",
    "start": "312960",
    "end": "321780"
  },
  {
    "text": "software design and language specific stuff it's sort of questionable what I mean under software design it's not like",
    "start": "321780",
    "end": "328560"
  },
  {
    "text": "that your software design is so poor that it causes exceptions by its existence can be thrown out no not this",
    "start": "328560",
    "end": "336180"
  },
  {
    "text": "way but say from the previous previous talk that was here it's they decided to",
    "start": "336180",
    "end": "343080"
  },
  {
    "text": "get mislead to you like uh at some points like discussion the first iterator self views or something like",
    "start": "343080",
    "end": "350340"
  },
  {
    "text": "that because the API provide you by STEM libraries one might be like uh not",
    "start": "350340",
    "end": "355560"
  },
  {
    "text": "really nice design line and cause errors when you try to use it and you think it's right but it's not really right",
    "start": "355560",
    "end": "362280"
  },
  {
    "text": "and we're not going to talk about it but I have one nice example I guess by the end of the presentation and the language",
    "start": "362280",
    "end": "368940"
  },
  {
    "text": "specific stuff I mean we all do C plus plus we know what this is about I think",
    "start": "368940",
    "end": "374340"
  },
  {
    "text": "it's this might be it might cause in some errors but say one good example",
    "start": "374340",
    "end": "379919"
  },
  {
    "text": "when you try doing old plane C arrays and trying to determine size right when",
    "start": "379919",
    "end": "386280"
  },
  {
    "text": "you're doing size of like divided by the first element and so on in this chord it's really easy to get a car Sunday by",
    "start": "386280",
    "end": "393060"
  },
  {
    "text": "writing this stuff there are tooling preventing it yet when you static",
    "start": "393060",
    "end": "398460"
  },
  {
    "text": "analyze there's some Dynamic analysis compiler phones and so on and this stuff also will emit in current talk",
    "start": "398460",
    "end": "407720"
  },
  {
    "start": "407000",
    "end": "407000"
  },
  {
    "text": "General approach of our handling first of all you need to understand that",
    "start": "407720",
    "end": "412800"
  },
  {
    "text": "something went wrong you can either learn it through the API or something else or whatever you need to or you're",
    "start": "412800",
    "end": "419280"
  },
  {
    "text": "getting like an exceptional object or whatever then you need to restore to consistent state",
    "start": "419280",
    "end": "426240"
  },
  {
    "text": "it's probably not always possible and we'll be talking about related stuff in the exception",
    "start": "426240",
    "end": "432900"
  },
  {
    "text": "section it's exception guarantees but it's nice to have at least if you are doing system libraries",
    "start": "432900",
    "end": "438600"
  },
  {
    "text": "the first thing and you need to somehow report it to let end user whatever other",
    "start": "438600",
    "end": "445380"
  },
  {
    "text": "developers users of your framework or library or users of your say",
    "start": "445380",
    "end": "450660"
  },
  {
    "text": "General application service whatever you can form you need to do some login potentially and uploading the cloud The",
    "start": "450660",
    "end": "458880"
  },
  {
    "text": "best scenario to analyze it later and hopefully fix or document that it's not",
    "start": "458880",
    "end": "466380"
  },
  {
    "text": "really a bug how it should be don't accept this so let's start if there are no questions",
    "start": "466380",
    "end": "474479"
  },
  {
    "text": "so far let's start with the probably most well-known approach it",
    "start": "474479",
    "end": "481199"
  },
  {
    "text": "is using returns codes say we have I hope it's yeah it's",
    "start": "481199",
    "end": "487800"
  },
  {
    "text": "readable more or less uh we have like a class file that has method save and it",
    "start": "487800",
    "end": "495120"
  },
  {
    "text": "returns only one single it has a saved or not saved and Below it's how",
    "start": "495120",
    "end": "502979"
  },
  {
    "text": "you can use it some example you have a positive file then you can save it and if it's not saved you can handle error",
    "start": "502979",
    "end": "509160"
  },
  {
    "text": "right but if you start using approach like this there are some cons of it so",
    "start": "509160",
    "end": "516120"
  },
  {
    "text": "that's really hard to understand what causes this issue and because of that",
    "start": "516120",
    "end": "521880"
  },
  {
    "text": "you don't have enough context you don't have enough information and it's not really easy to react on it either in",
    "start": "521880",
    "end": "528959"
  },
  {
    "text": "this level or under in the propagation to the top level you're gonna okay you",
    "start": "528959",
    "end": "534120"
  },
  {
    "text": "cannot write how I mean what does that mean why can I like fix it can I roll back to some stage what can I do with",
    "start": "534120",
    "end": "540180"
  },
  {
    "text": "that there is one way how we can improve it",
    "start": "540180",
    "end": "545959"
  },
  {
    "text": "we can use enums there is enough we have a safe",
    "start": "547260",
    "end": "553320"
  },
  {
    "text": "operation status whatever then there are three numerators okay in unreachable",
    "start": "553320",
    "end": "559620"
  },
  {
    "text": "blah blah blah whatever other traits and then we can use it either in if",
    "start": "559620",
    "end": "564860"
  },
  {
    "text": "sections or by the way we can use switch and you will be working for enumclasses",
    "start": "564860",
    "end": "571200"
  },
  {
    "text": "as well but anyway uh this already better because you know what happened",
    "start": "571200",
    "end": "578240"
  },
  {
    "text": "but this approach also has some issues",
    "start": "578240",
    "end": "584399"
  },
  {
    "text": "that that's hard to really extend to probably maintain",
    "start": "584399",
    "end": "590160"
  },
  {
    "text": "and any of you has ever seen like this lens of switches Source handlers or whatever",
    "start": "590160",
    "end": "597959"
  },
  {
    "text": "that tries to cover all of the cases this might be painful to maintain",
    "start": "597959",
    "end": "605459"
  },
  {
    "text": "and now I have slightly unrelated let's switch from",
    "start": "605459",
    "end": "611100"
  },
  {
    "text": "enums and stuff and there is another very popular case how we can use return codes and so on in",
    "start": "611100",
    "end": "619380"
  },
  {
    "text": "this example we have a vector like class and exactly this case we have in one",
    "start": "619380",
    "end": "625680"
  },
  {
    "text": "popular Library called cute if I need examples of questionable design I go to this library",
    "start": "625680",
    "end": "632760"
  },
  {
    "text": "because it's kind of a long living and there might be many things that kind of",
    "start": "632760",
    "end": "639540"
  },
  {
    "text": "behind the time they are here inside of backwards compatibility uh in that side it's similar with C plus",
    "start": "639540",
    "end": "646140"
  },
  {
    "text": "plus anyway there is an index of and if the value is found we return its index",
    "start": "646140",
    "end": "653399"
  },
  {
    "text": "if it's not worked on minus one and that's how we can use it so if index is",
    "start": "653399",
    "end": "658800"
  },
  {
    "text": "negative or exclusively minus one we can do something with that and those was like",
    "start": "658800",
    "end": "665160"
  },
  {
    "text": "three I guess uh most of well usable cases when you decide to go",
    "start": "665160",
    "end": "672120"
  },
  {
    "text": "for error codes summarizing this we have general characteristics of trait",
    "start": "672120",
    "end": "679980"
  },
  {
    "text": "of this approach it's possible to use if you don't need to return anything from your function",
    "start": "679980",
    "end": "687000"
  },
  {
    "text": "but you will have to create like additional stuff probably meaningful",
    "start": "687000",
    "end": "692160"
  },
  {
    "text": "enums or even classes with that you automatically have to handle all cases and that's why it's",
    "start": "692160",
    "end": "699779"
  },
  {
    "text": "potentially hard to extend and also if you want to like add a context something",
    "start": "699779",
    "end": "705480"
  },
  {
    "text": "like a wise why it happened where it happened that is some traces whatever",
    "start": "705480",
    "end": "710880"
  },
  {
    "text": "you probably will have to come up with classes the data classes whatever I call it whatever but this approach can be",
    "start": "710880",
    "end": "718260"
  },
  {
    "text": "used in C API along with the next approach this all of you probably",
    "start": "718260",
    "end": "724140"
  },
  {
    "text": "remember of like you if you are not familiar with this voice star star stuff",
    "start": "724140",
    "end": "729540"
  },
  {
    "text": "and parameters yet we are moving towards uh error or",
    "start": "729540",
    "end": "736740"
  },
  {
    "text": "propagation error or status by the function parameter",
    "start": "736740",
    "end": "742740"
  },
  {
    "text": "we have another example from",
    "start": "742740",
    "end": "747959"
  },
  {
    "text": "Q stream class and my favorite uh we have a method of class called tuint",
    "start": "747959",
    "end": "755519"
  },
  {
    "text": "and this method can return your integer and also you can",
    "start": "755519",
    "end": "762060"
  },
  {
    "text": "optionally pass the current here called two inch of say some",
    "start": "762060",
    "end": "767940"
  },
  {
    "text": "variable a top so what you can do it in the example and if it's okay it's okay",
    "start": "767940",
    "end": "773880"
  },
  {
    "text": "you can do something if it's not okay well it's not okay this approach is also has some funny",
    "start": "773880",
    "end": "781200"
  },
  {
    "text": "I would say trade-offs because I mean okay it has all cons so the return codes",
    "start": "781200",
    "end": "787980"
  },
  {
    "text": "previous approach but it's well it's much less explicit",
    "start": "787980",
    "end": "794220"
  },
  {
    "text": "and it's hard to add more parameters imagine that I need to edit something here say I want to add",
    "start": "794220",
    "end": "801300"
  },
  {
    "text": "base or whatever how I will be converting or some sort about local whatever and how do I do that how do I",
    "start": "801300",
    "end": "810899"
  },
  {
    "text": "maintain it how do I maintain my source code compatibility if I'm saying Library",
    "start": "810899",
    "end": "816779"
  },
  {
    "text": "developer and stuff like that there are a lot of questions and I would advise",
    "start": "816779",
    "end": "822120"
  },
  {
    "text": "you not doing this but yet it still existed and especially in all libraries and sort of uh see like",
    "start": "822120",
    "end": "831540"
  },
  {
    "text": "apis again that's quick summary on general characteristics of this approach as I",
    "start": "831540",
    "end": "839160"
  },
  {
    "text": "mentioned the all from error codes but now you can use return value if you",
    "start": "839160",
    "end": "844560"
  },
  {
    "text": "really need it and yeah it's like mostly outdated here just like in the museum so",
    "start": "844560",
    "end": "852740"
  },
  {
    "text": "now let's move to the sync from the probably title of this talk and this is",
    "start": "853279",
    "end": "860700"
  },
  {
    "text": "exceptions the probably most recommended if I'm not mistaken even by core guidelines way of",
    "start": "860700",
    "end": "869339"
  },
  {
    "text": "dealing with exception or exceptional situation since any errors in C plus plus",
    "start": "869339",
    "end": "874800"
  },
  {
    "text": "let's talk about it a little bit start with a definition what's the",
    "start": "874800",
    "end": "882300"
  },
  {
    "text": "exception right it's uh stick with speaking like um unexpected event that happened during",
    "start": "882300",
    "end": "889680"
  },
  {
    "text": "your program execution and this time it's typically create some",
    "start": "889680",
    "end": "895740"
  },
  {
    "text": "exceptional object a career object that's uh in C plus plus we will throw",
    "start": "895740",
    "end": "901019"
  },
  {
    "text": "for this we can do it using this runtime system then this",
    "start": "901019",
    "end": "908040"
  },
  {
    "text": "runtime system will be looking for exception Handler right for the first exception Handler from time to time to",
    "start": "908040",
    "end": "914880"
  },
  {
    "text": "use an rtti for this purpose then when Handler is found right you",
    "start": "914880",
    "end": "920940"
  },
  {
    "text": "remember this stuff catch catch cage something then exception code and you",
    "start": "920940",
    "end": "927300"
  },
  {
    "text": "can process it somehow other than that it relates in this to terminate Handler",
    "start": "927300",
    "end": "933139"
  },
  {
    "text": "and most likely cause crash of your program probably not",
    "start": "933139",
    "end": "939139"
  },
  {
    "start": "940000",
    "end": "940000"
  },
  {
    "text": "we have this stuff in C plus plus four pillars of exception safety and",
    "start": "940620",
    "end": "948300"
  },
  {
    "text": "this is also very interesting thing they have like no throw nothing throws we",
    "start": "948300",
    "end": "954860"
  },
  {
    "text": "don't use exceptions really and it always succeeds very good here no",
    "start": "954860",
    "end": "961260"
  },
  {
    "text": "exceptions it's a big guarantees the second thing is a strong guarantee",
    "start": "961260",
    "end": "967860"
  },
  {
    "text": "and from my opinion that's something we should follow when we are designing Frameworks and libraries the good",
    "start": "967860",
    "end": "974040"
  },
  {
    "text": "example of this would probably be a vector vector",
    "start": "974040",
    "end": "979440"
  },
  {
    "text": "pushback because if there is something happening we keep the object and it",
    "start": "979440",
    "end": "987180"
  },
  {
    "text": "states not only consistent but it will be like exactly as before which is good",
    "start": "987180",
    "end": "992639"
  },
  {
    "text": "and that's probably expected when you start using someone's third party libraries School of it provides strong",
    "start": "992639",
    "end": "999240"
  },
  {
    "text": "guarantee basic exception guarantees that's kind of funny and this would provide more stuff for them",
    "start": "999240",
    "end": "1005959"
  },
  {
    "text": "a UI applications and stuff like that you don't really have like any I would",
    "start": "1005959",
    "end": "1011120"
  },
  {
    "text": "say explicit issues right there are like no resource leakage objects and variants are intact uh very good but it doesn't",
    "start": "1011120",
    "end": "1019160"
  },
  {
    "text": "guarantee that it is the same state what it effectively means imagine that you have sum up I'm not sure like for say",
    "start": "1019160",
    "end": "1025760"
  },
  {
    "text": "video editing you have your like after effect or whatever editing watch footage",
    "start": "1025760",
    "end": "1031040"
  },
  {
    "text": "on your internet Edition then exception happens right and everything is fine no question",
    "start": "1031040",
    "end": "1037660"
  },
  {
    "text": "but you lost all what you've been doing for hours",
    "start": "1037660",
    "end": "1044140"
  },
  {
    "text": "basic exception guarantees and the last thing at the well the worst",
    "start": "1044439",
    "end": "1051860"
  },
  {
    "text": "one no exception safety and whatever can happen there are all",
    "start": "1051860",
    "end": "1057380"
  },
  {
    "text": "terrible things listed on the slide but it might be Corruptions results leakage any kind of inconsistency whatever and",
    "start": "1057380",
    "end": "1065000"
  },
  {
    "text": "defined Behavior even probably not but anyway just try probably to strive",
    "start": "1065000",
    "end": "1071240"
  },
  {
    "text": "for either strong or libraries or at least basic for regular apps",
    "start": "1071240",
    "end": "1077620"
  },
  {
    "text": "I have an example and here and it's simple function to illustrate how",
    "start": "1077620",
    "end": "1083840"
  },
  {
    "text": "exceptions works I guess uh I guess all of us so familiar with",
    "start": "1083840",
    "end": "1090620"
  },
  {
    "text": "exceptions so right are there people who are not familiar with exceptions",
    "start": "1090620",
    "end": "1097480"
  },
  {
    "text": "so but anyway I will give you a few seconds to see here there is a function",
    "start": "1097880",
    "end": "1103160"
  },
  {
    "text": "that method Vector at throws if index is not found with nice message and here",
    "start": "1103160",
    "end": "1111620"
  },
  {
    "text": "we're trying to access force element and drop us the will cause an exception and",
    "start": "1111620",
    "end": "1117740"
  },
  {
    "text": "we are printing it but that's how try catch works another thing is that you probably if",
    "start": "1117740",
    "end": "1126500"
  },
  {
    "text": "you go for exceptions it's a good idea to well to design your own exception",
    "start": "1126500",
    "end": "1133340"
  },
  {
    "text": "hierarchy from time to time to create like your domain language to imply it to say",
    "start": "1133340",
    "end": "1139760"
  },
  {
    "text": "well to give your product more own language and here we have the same example this",
    "start": "1139760",
    "end": "1146179"
  },
  {
    "text": "file we are saving and if we cannot save the same buy this cannot be saved and",
    "start": "1146179",
    "end": "1153860"
  },
  {
    "text": "then just throw the subject will create it and the tower runtime system and goes to the",
    "start": "1153860",
    "end": "1159860"
  },
  {
    "text": "a regular routine but there is one more interesting thing",
    "start": "1159860",
    "end": "1165380"
  },
  {
    "start": "1165000",
    "end": "1165000"
  },
  {
    "text": "you can actually add a context if you want and there is special machinery for this",
    "start": "1165380",
    "end": "1172880"
  },
  {
    "text": "you can use like stood throw is nested say now we have like not only a single",
    "start": "1172880",
    "end": "1178580"
  },
  {
    "text": "file it has a document and somewhere unsafe it might be a multi-file document",
    "start": "1178580",
    "end": "1183679"
  },
  {
    "text": "whatever it is just send synthetic example and we are doing saving file",
    "start": "1183679",
    "end": "1188980"
  },
  {
    "text": "that the other thing if everything is wrong because there might be much more",
    "start": "1188980",
    "end": "1194179"
  },
  {
    "text": "exceptions around and you can throw this nested and add",
    "start": "1194179",
    "end": "1200000"
  },
  {
    "text": "one more exception if you will and that one more message and you the sense",
    "start": "1200000",
    "end": "1206059"
  },
  {
    "text": "extending context C plus plus provides some",
    "start": "1206059",
    "end": "1211760"
  },
  {
    "text": "I would say very interesting routine how we can Traverse this tree of exception",
    "start": "1211760",
    "end": "1216980"
  },
  {
    "text": "with recourse memory you can navigate to the respective page as CPP reference and",
    "start": "1216980",
    "end": "1222580"
  },
  {
    "text": "learn about it I don't want to put this code here but just for you to well have",
    "start": "1222580",
    "end": "1230600"
  },
  {
    "text": "this knowledge in your toolbox if you use exceptions you need to add extra context well you can use this one",
    "start": "1230600",
    "end": "1238580"
  },
  {
    "start": "1238000",
    "end": "1238000"
  },
  {
    "text": "now this interesting part move to the general characteristics this obviously",
    "start": "1238580",
    "end": "1247720"
  },
  {
    "text": "somehow Alters execution workflow right you had like a linear code then you do a",
    "start": "1248840",
    "end": "1254240"
  },
  {
    "text": "throw and it stops right from here we are not even talking about multi-threading cases it's just you know",
    "start": "1254240",
    "end": "1260480"
  },
  {
    "text": "single threat you have like your execution flow and then you throw and it Alters it right so it requires to add",
    "start": "1260480",
    "end": "1267860"
  },
  {
    "text": "handlers of drastic or at least one termination Handler whatever we should",
    "start": "1267860",
    "end": "1273559"
  },
  {
    "text": "like quite carefully use it if we are developing and shipping some libraries",
    "start": "1273559",
    "end": "1280220"
  },
  {
    "text": "for users because there might be some runtime issues flow some at",
    "start": "1280220",
    "end": "1288440"
  },
  {
    "text": "can be slower that returns cut when actually a cure this one is questionable",
    "start": "1288440",
    "end": "1294440"
  },
  {
    "text": "I heard this like things that you know exceptions are completely narrow cost",
    "start": "1294440",
    "end": "1300860"
  },
  {
    "text": "unless they happen okay fine I mean never seen the Zara cost unless you start using it but anyway",
    "start": "1300860",
    "end": "1308600"
  },
  {
    "text": "and they are not probably really really zero cost right because it is probably",
    "start": "1308600",
    "end": "1313700"
  },
  {
    "text": "not always but from a lot of cases you need to have rpti to match those",
    "start": "1313700",
    "end": "1320059"
  },
  {
    "text": "handlers right and it might be critical for some systems specially for embedded",
    "start": "1320059",
    "end": "1325340"
  },
  {
    "text": "system with either a zero system runtime or very tiny bit that's why many guys",
    "start": "1325340",
    "end": "1331460"
  },
  {
    "text": "doing embedded development really small stuff trying to avoid",
    "start": "1331460",
    "end": "1338360"
  },
  {
    "text": "exceptions entirely but what can help us",
    "start": "1338360",
    "end": "1345080"
  },
  {
    "text": "slightly to improve the situation all of those names comes at some point from",
    "start": "1345080",
    "end": "1350140"
  },
  {
    "text": "functional programming world and this either result is probably what",
    "start": "1350140",
    "end": "1356059"
  },
  {
    "text": "is called in boost expected that this will be called in C plus since C plus plus one is three or either monot and",
    "start": "1356059",
    "end": "1364520"
  },
  {
    "text": "let's talk about it a little bit but first I have here a special case",
    "start": "1364520",
    "end": "1370940"
  },
  {
    "start": "1366000",
    "end": "1366000"
  },
  {
    "text": "it's very probably a corner case when you have like you know two alternative there are either value or there are like",
    "start": "1370940",
    "end": "1379580"
  },
  {
    "text": "no values and it's another controversial example but slightly improved from the",
    "start": "1379580",
    "end": "1385580"
  },
  {
    "text": "previous stage when we still have this method index off but now we return",
    "start": "1385580",
    "end": "1391640"
  },
  {
    "text": "optional index and if it's not found we simply return",
    "start": "1391640",
    "end": "1396980"
  },
  {
    "text": "stood no opt and we can use it the manure",
    "start": "1396980",
    "end": "1404659"
  },
  {
    "text": "uh this uh if we can check either this good or not good and then the reference",
    "start": "1404659",
    "end": "1411440"
  },
  {
    "text": "set in use or we can use some functional style continuation and we can extract value or",
    "start": "1411440",
    "end": "1418880"
  },
  {
    "text": "some default value there are some other similar methods but not too many I'm",
    "start": "1418880",
    "end": "1425059"
  },
  {
    "text": "afraid so right let's move to suit expected as it was",
    "start": "1425059",
    "end": "1432080"
  },
  {
    "text": "like say today probably it contains either value object or error object in",
    "start": "1432080",
    "end": "1439580"
  },
  {
    "text": "the sense it's sort of Target Union discover two types can present it was",
    "start": "1439580",
    "end": "1444980"
  },
  {
    "text": "accepted for C plus 23 this winter correct and there is also implementation",
    "start": "1444980",
    "end": "1452780"
  },
  {
    "text": "available on GitHub written by cybrand it's well tested it's",
    "start": "1452780",
    "end": "1460100"
  },
  {
    "text": "available in I guess for sure for VC package and",
    "start": "1460100",
    "end": "1465140"
  },
  {
    "text": "probably for Conan as well so you can use it in your project and the cool thing is I'm not sure in which way it's",
    "start": "1465140",
    "end": "1472640"
  },
  {
    "text": "accepted for C plus plus for standard library but in",
    "start": "1472640",
    "end": "1477860"
  },
  {
    "text": "this implementation there are a lot of nice continuation from functional world like uh and and then mob error handers",
    "start": "1477860",
    "end": "1485720"
  },
  {
    "text": "and so on and I will show you example further that you can do really nice functional chains",
    "start": "1485720",
    "end": "1491720"
  },
  {
    "text": "that's probably one point for using it from this implementation rather than from standard Library",
    "start": "1491720",
    "end": "1498760"
  },
  {
    "start": "1498000",
    "end": "1498000"
  },
  {
    "text": "I have my own naive implementation here uh don't do that like and you want to do",
    "start": "1499100",
    "end": "1507080"
  },
  {
    "text": "some practicing and so on it's uh the thing I call that result the inherits to",
    "start": "1507080",
    "end": "1512960"
  },
  {
    "text": "the variant and it uh just has few methods to check whether",
    "start": "1512960",
    "end": "1518480"
  },
  {
    "text": "this is some value or error and it can you can get another obviously it's like",
    "start": "1518480",
    "end": "1525799"
  },
  {
    "text": "not exhaustive list of all operators and stuff and if you have this nice Auto",
    "start": "1525799",
    "end": "1532480"
  },
  {
    "text": "deducing this it could be written almost this way in modern C plus plus but",
    "start": "1532480",
    "end": "1538640"
  },
  {
    "text": "nowadays you have to write like six six probably like at least 12 operators to",
    "start": "1538640",
    "end": "1544279"
  },
  {
    "text": "do this stuff so here is a simple usage example of it",
    "start": "1544279",
    "end": "1551720"
  },
  {
    "text": "it's another class not file nowadays it's a decoder we have some abstract decoder which decoding something and",
    "start": "1551720",
    "end": "1560020"
  },
  {
    "text": "this code if there is an error save a person like XML whatever or custom format and run",
    "start": "1560020",
    "end": "1568100"
  },
  {
    "text": "talk is secured in Alpha V just returning our own track whatever and if",
    "start": "1568100",
    "end": "1574520"
  },
  {
    "text": "everything is fine just doing some decoding values those two classes are",
    "start": "1574520",
    "end": "1580120"
  },
  {
    "text": "declared and properly defined somewhere at top it's not important for this particular stuff yet how you can use it",
    "start": "1580120",
    "end": "1587720"
  },
  {
    "text": "as the user of decoder class hit there on the right side and what you need to do is just check",
    "start": "1587720",
    "end": "1595039"
  },
  {
    "text": "whether this is value or not and then use value if it's here",
    "start": "1595039",
    "end": "1602480"
  },
  {
    "text": "it's not use an error but you know what I think it look it looks kind of clumsy",
    "start": "1602480",
    "end": "1609200"
  },
  {
    "text": "right you need to write a lot of boilerplate code handle everything and like I mean at the glance it doesn't",
    "start": "1609200",
    "end": "1616700"
  },
  {
    "text": "give you like too much advantages right over probably error codes or something like that but just at a glance",
    "start": "1616700",
    "end": "1625120"
  },
  {
    "text": "can we do it better yes we can and",
    "start": "1626539",
    "end": "1632059"
  },
  {
    "text": "probably traditionally I have to mention rust in the C plus plus talk but we can",
    "start": "1632059",
    "end": "1637299"
  },
  {
    "text": "have an operator like question mark like from rust potentially the syntax sugar we can use",
    "start": "1637299",
    "end": "1645260"
  },
  {
    "text": "functional style as I mentioned before have an example and we can use pattern",
    "start": "1645260",
    "end": "1650480"
  },
  {
    "text": "margin that hopefully will be accepted for C plus plus I have examples for all",
    "start": "1650480",
    "end": "1655820"
  },
  {
    "text": "of three and let's look to it first of all absolutely nice thing it's",
    "start": "1655820",
    "end": "1663080"
  },
  {
    "text": "how it could look and how it looks say in okay not this is",
    "start": "1663080",
    "end": "1670400"
  },
  {
    "text": "this author but anyway in Rust there is a question mark and what this code hides",
    "start": "1670400",
    "end": "1677179"
  },
  {
    "text": "from you is if the the basically it hides previously but if there is like",
    "start": "1677179",
    "end": "1684799"
  },
  {
    "text": "not a value there is an error this code would immediately return from the",
    "start": "1684799",
    "end": "1690200"
  },
  {
    "text": "function with the value and the calculation flow flow will not go",
    "start": "1690200",
    "end": "1695840"
  },
  {
    "text": "further there are some Machinery rounded distrust you can do Panic you can like",
    "start": "1695840",
    "end": "1701539"
  },
  {
    "text": "do many other things with that it's like if it's different syntax but what you need to pay attention here",
    "start": "1701539",
    "end": "1708500"
  },
  {
    "text": "and this example you need to be very careful about return types because say",
    "start": "1708500",
    "end": "1714799"
  },
  {
    "text": "you have some function you call this code from and it's rich on type should be something compatible to the result",
    "start": "1714799",
    "end": "1721580"
  },
  {
    "text": "type right because this question mark operator quite uh implicitly returns",
    "start": "1721580",
    "end": "1727580"
  },
  {
    "text": "error if there is an error right atop so you need to be careful about types",
    "start": "1727580",
    "end": "1735400"
  },
  {
    "text": "questions so far I guess should",
    "start": "1735919",
    "end": "1741340"
  },
  {
    "text": "uh",
    "start": "1747020",
    "end": "1749860"
  },
  {
    "text": "yeah there will be like yeah the question was are there like any sort of continuations right I can use",
    "start": "1754840",
    "end": "1762799"
  },
  {
    "text": "um functions like map and so on yes we can do that and there will be like",
    "start": "1762799",
    "end": "1768440"
  },
  {
    "text": "probably even on the next slide any other question by the way how many of you have ever used or tried rust",
    "start": "1768440",
    "end": "1775460"
  },
  {
    "text": "for programming okay not enough people we should mention just more often",
    "start": "1775460",
    "end": "1783159"
  },
  {
    "start": "1783000",
    "end": "1783000"
  },
  {
    "text": "cool yeah here we go uh functional style that's what we can use",
    "start": "1783320",
    "end": "1788799"
  },
  {
    "text": "we should expected and if we say we have decode we have like on error Handler we",
    "start": "1788799",
    "end": "1795799"
  },
  {
    "text": "can map it to something and we can then even print it if we want",
    "start": "1795799",
    "end": "1801440"
  },
  {
    "text": "well this quarter is good and I like it but by the way if there is an error",
    "start": "1801440",
    "end": "1808100"
  },
  {
    "text": "there will be another end all other stuff in the chain will not be",
    "start": "1808100",
    "end": "1813140"
  },
  {
    "text": "invoked like because it is error and they unlocked only on valid results only for valid results",
    "start": "1813140",
    "end": "1820039"
  },
  {
    "text": "but even here you need to be careful about typesight but what your returns from those functions because to well to",
    "start": "1820039",
    "end": "1829100"
  },
  {
    "text": "use this continuation right to continue everything you need to return an expected compatible type again so it's",
    "start": "1829100",
    "end": "1836539"
  },
  {
    "text": "well kind of a trade-off but these things on the right side is not necessary cons but",
    "start": "1836539",
    "end": "1843260"
  },
  {
    "text": "um that's what you will probably face when you start heavily using these",
    "start": "1843260",
    "end": "1848539"
  },
  {
    "text": "things in your code base you will be like doing probably a lot of",
    "start": "1848539",
    "end": "1853700"
  },
  {
    "text": "lambdas here we don't have lambdas but all this handle can be alarmed function",
    "start": "1853700",
    "end": "1858860"
  },
  {
    "text": "right it's not bad it's just what you will have to do that",
    "start": "1858860",
    "end": "1864020"
  },
  {
    "text": "might changes your change your code style because if you use it sort of in",
    "start": "1864020",
    "end": "1869779"
  },
  {
    "text": "scope of one module in fine but if like your entire library or component or whatever design this way it would Alters",
    "start": "1869779",
    "end": "1877279"
  },
  {
    "text": "the using scenarios right this is something you also need to keep in mind if you want to experiment with that",
    "start": "1877279",
    "end": "1883580"
  },
  {
    "text": "somewhere like an implementation files like I mean please do but before scale",
    "start": "1883580",
    "end": "1888980"
  },
  {
    "text": "it discuss yeah at the same time about types yeah I already mentioned",
    "start": "1888980",
    "end": "1896000"
  },
  {
    "text": "this so pattern margin",
    "start": "1896000",
    "end": "1901039"
  },
  {
    "text": "there is uh the thing uh alsoever used pattern margin and probably any other",
    "start": "1901039",
    "end": "1906860"
  },
  {
    "text": "languages who's familiar with this technique right so that's basically",
    "start": "1906860",
    "end": "1914179"
  },
  {
    "text": "the special technique talk about it further when you can match the result of",
    "start": "1914179",
    "end": "1920299"
  },
  {
    "text": "some expression against the certain like pattern say type or whatever imagine",
    "start": "1920299",
    "end": "1928220"
  },
  {
    "text": "you're traversing like a tree and you want to match a leaves so we can",
    "start": "1928220",
    "end": "1933320"
  },
  {
    "text": "understand where the three for node and in the same time extract the leaf value it's kind of can be useful in it for",
    "start": "1933320",
    "end": "1939620"
  },
  {
    "text": "many stuff and also Alters the way how you doing code and second boot is also",
    "start": "1939620",
    "end": "1946159"
  },
  {
    "text": "important because it's like either much or not I know that there are some techniques and some functional languages",
    "start": "1946159",
    "end": "1952399"
  },
  {
    "text": "that you can have kind of partial much with extra function and so on but it's probably not the regular case",
    "start": "1952399",
    "end": "1960158"
  },
  {
    "start": "1959000",
    "end": "1959000"
  },
  {
    "text": "pattern matching in C plus there is a proposal",
    "start": "1960380",
    "end": "1965440"
  },
  {
    "text": "I will share the slides so you can copy all links and so on the second bullet I",
    "start": "1965440",
    "end": "1972440"
  },
  {
    "text": "would recommend like for everyone to watch the nice talk made by hubsutter it",
    "start": "1972440",
    "end": "1978260"
  },
  {
    "text": "was probably the last previous CPP cone so I'm just mistaken yeah just go watch",
    "start": "1978260",
    "end": "1985700"
  },
  {
    "text": "this and this is super nice with a lot of examples and live demos",
    "start": "1985700",
    "end": "1992299"
  },
  {
    "text": "the Third but it's we have experimental implementation with this circle compiler",
    "start": "1992299",
    "end": "2000940"
  },
  {
    "text": "Circle compiler the Samsung you can try at God bolt you don't need to well to",
    "start": "2000940",
    "end": "2006159"
  },
  {
    "text": "download binary so compile it for yourself just choose this link",
    "start": "2006159",
    "end": "2012279"
  },
  {
    "text": "as in a language drop down and try to experiment in with this",
    "start": "2012279",
    "end": "2018100"
  },
  {
    "text": "that's really nice and worth doing probably I have an example here",
    "start": "2018100",
    "end": "2023220"
  },
  {
    "text": "and this is a decoder Plus",
    "start": "2023220",
    "end": "2028840"
  },
  {
    "text": "we have this Machinery inspect that was proposed at least for now for",
    "start": "2028840",
    "end": "2035380"
  },
  {
    "text": "the standard and we are expecting the result of the decode method",
    "start": "2035380",
    "end": "2041620"
  },
  {
    "text": "there is this curly brackets uh something that",
    "start": "2041620",
    "end": "2047380"
  },
  {
    "text": "returns this expression returns there is a Syntax for non-returning NSN since I",
    "start": "2047380",
    "end": "2053080"
  },
  {
    "text": "remember and say if we can read it like I said if type of",
    "start": "2053080",
    "end": "2059020"
  },
  {
    "text": "the inspected value is like actually value then we can here return a string",
    "start": "2059020",
    "end": "2066099"
  },
  {
    "text": "of decoded value there is a syntax opposite to extract the value itself right and",
    "start": "2066099",
    "end": "2072099"
  },
  {
    "text": "otherwise if there is something else there is no match we can probably",
    "start": "2072099",
    "end": "2079240"
  },
  {
    "text": "like you know pass through the entire well",
    "start": "2079240",
    "end": "2084760"
  },
  {
    "text": "it's a variety of options in this set here is only two but when I was playing with this implementation it didn't work",
    "start": "2084760",
    "end": "2091179"
  },
  {
    "text": "as expected for me because if I use pattern matching like I used to it from other languages I can write here for",
    "start": "2091179",
    "end": "2097420"
  },
  {
    "text": "example is decoded value then instead of underscope ease decoded error and it",
    "start": "2097420",
    "end": "2102520"
  },
  {
    "text": "would work as expected for me unfortunately when I experiment it's like one month back it didn't work this",
    "start": "2102520",
    "end": "2108460"
  },
  {
    "text": "way it only worked with like one of the Alternatives like either decoded value or decoded error and uh that's it if I",
    "start": "2108460",
    "end": "2117640"
  },
  {
    "text": "put both here it doesn't look as expected but probably it's because of my naive implementation or there is like",
    "start": "2117640",
    "end": "2124300"
  },
  {
    "text": "very very experimental and non-official yet I would encourage you to play with that",
    "start": "2124300",
    "end": "2130440"
  },
  {
    "text": "and then when this scope ends the expression will",
    "start": "2130440",
    "end": "2136359"
  },
  {
    "text": "be returned where it's a string literal for example either decoded to no match and would be sent to their",
    "start": "2136359",
    "end": "2142960"
  },
  {
    "text": "see out any questions probably here so far",
    "start": "2142960",
    "end": "2149640"
  },
  {
    "text": "oh let's start with the good practices then",
    "start": "2149859",
    "end": "2154960"
  },
  {
    "text": "there are no more questions so what do we have here I have",
    "start": "2154960",
    "end": "2163359"
  },
  {
    "text": "a right three bullets and they will be like Bullet by Bullet so the first thing",
    "start": "2163359",
    "end": "2169359"
  },
  {
    "text": "I would probably recommend or I personally would encourage you to do is ensure prayer and post conditions",
    "start": "2169359",
    "end": "2177160"
  },
  {
    "text": "what I mean here say we have a very weird function it's",
    "start": "2177160",
    "end": "2182859"
  },
  {
    "text": "like multiply and for some reasons we have restrictions on input parameters",
    "start": "2182859",
    "end": "2188079"
  },
  {
    "text": "it's like on the positive values and the result should be also positive there will be some how testing properties of",
    "start": "2188079",
    "end": "2195220"
  },
  {
    "text": "integers and numbers but anyway this idea we have some certain conditions for free stuff and some certain conditions",
    "start": "2195220",
    "end": "2202180"
  },
  {
    "text": "on return value there is only one way how you can do that it's asserts they",
    "start": "2202180",
    "end": "2208240"
  },
  {
    "text": "might be like live in both release and debug configuration not necessary but still depends on your project",
    "start": "2208240",
    "end": "2214720"
  },
  {
    "text": "but that's the idea how we can do that and that's probably what nice to do to",
    "start": "2214720",
    "end": "2221560"
  },
  {
    "text": "guarantee some sort of environmental consistency in some point of either method or function",
    "start": "2221560",
    "end": "2227500"
  },
  {
    "text": "there is there was a proposal how we can",
    "start": "2227500",
    "end": "2233500"
  },
  {
    "text": "potentially do this these contracts not accepted not merge because there are",
    "start": "2233500",
    "end": "2239859"
  },
  {
    "text": "more questions that's answered because for example how this stuff will be evaluated when water should provoke",
    "start": "2239859",
    "end": "2247000"
  },
  {
    "text": "should it Crush our program should its role should it return something like more talks about it but so far people",
    "start": "2247000",
    "end": "2255820"
  },
  {
    "text": "and came to conclusion at all and this proposed syntax you probably can even",
    "start": "2255820",
    "end": "2261160"
  },
  {
    "text": "find a CPP reference but not sure whether or not there are implementation where you can by probably there are yet",
    "start": "2261160",
    "end": "2268660"
  },
  {
    "text": "if you also want to learn more about this contract programming there are classical books of uh Bertram Mayors if",
    "start": "2268660",
    "end": "2277060"
  },
  {
    "text": "I'm not mistaken again and you can read them and learn a bit more about contracts",
    "start": "2277060",
    "end": "2284099"
  },
  {
    "text": "so the second bullet second good practice and there will be an example of",
    "start": "2284520",
    "end": "2290980"
  },
  {
    "text": "design that I promised you at the very beginning so you probably can ensure",
    "start": "2290980",
    "end": "2297700"
  },
  {
    "text": "your prayer condition through the interface of either your",
    "start": "2297700",
    "end": "2303280"
  },
  {
    "text": "class or function so per condition example non-null",
    "start": "2303280",
    "end": "2311440"
  },
  {
    "start": "2307000",
    "end": "2307000"
  },
  {
    "text": "pointer imagine that we have a function this function called very",
    "start": "2311440",
    "end": "2318220"
  },
  {
    "text": "abstract process we are processing something full and this object might",
    "start": "2318220",
    "end": "2324280"
  },
  {
    "text": "live somewhere in our program it might be Vector of this or set or whatever of this objects that should be shared and",
    "start": "2324280",
    "end": "2330460"
  },
  {
    "text": "that's why it's a shared pointer and we start coding we need to write a function",
    "start": "2330460",
    "end": "2335619"
  },
  {
    "text": "that processes it and we like decided to do it this way okay",
    "start": "2335619",
    "end": "2341859"
  },
  {
    "text": "let's share it pointer it's not a shared pointer why don't use the shared pointer in the",
    "start": "2341859",
    "end": "2347560"
  },
  {
    "text": "interface right that's kind of cool but if we are",
    "start": "2347560",
    "end": "2352720"
  },
  {
    "text": "processing it we probably really want to make sure that this is like non-new",
    "start": "2352720",
    "end": "2358960"
  },
  {
    "text": "pointer that is something how we can do that",
    "start": "2358960",
    "end": "2364660"
  },
  {
    "text": "it's a nice way we can add a documentation string so from now on our",
    "start": "2364660",
    "end": "2370000"
  },
  {
    "text": "value cannot be no it must not be no okay if it's not well we don't care it's",
    "start": "2370000",
    "end": "2375339"
  },
  {
    "text": "like not on the other side it's like on the side of users of our API we are not",
    "start": "2375339",
    "end": "2380560"
  },
  {
    "text": "checking anything we are good like no guarantees at all some c85 work this way if it's not okay",
    "start": "2380560",
    "end": "2387820"
  },
  {
    "text": "just crushes or UB or whatever it's one way it works if users of our",
    "start": "2387820",
    "end": "2395200"
  },
  {
    "text": "API ever read documentation or like um the subjects somehow guaranteed 12 is",
    "start": "2395200",
    "end": "2403060"
  },
  {
    "text": "not been out let's probably work yet what else we can do in addition to the",
    "start": "2403060",
    "end": "2410260"
  },
  {
    "text": "documentation we can add an assert and it's either",
    "start": "2410260",
    "end": "2415780"
  },
  {
    "text": "like crash or Not Crash or just well throw or",
    "start": "2415780",
    "end": "2421660"
  },
  {
    "text": "whatever print something that might be any kind of assort that looks better",
    "start": "2421660",
    "end": "2426700"
  },
  {
    "text": "but still no troubles because nothing is guaranteed right",
    "start": "2426700",
    "end": "2432040"
  },
  {
    "text": "even better like super robust solution which value the return do nothing like",
    "start": "2432040",
    "end": "2440260"
  },
  {
    "text": "cool but the in this case this functions is well unusable in many cases right we",
    "start": "2440260",
    "end": "2445599"
  },
  {
    "text": "are not doing anything we probably write um lock or sand logs whatever",
    "start": "2445599",
    "end": "2452079"
  },
  {
    "text": "but it there probably a way to do it even better arguably better",
    "start": "2452079",
    "end": "2459460"
  },
  {
    "text": "anyone want to well to shoot an option",
    "start": "2459460",
    "end": "2464820"
  },
  {
    "text": "how we can ensure and it is possible to do",
    "start": "2466180",
    "end": "2473079"
  },
  {
    "text": "then we probably should slightly improve our API if we don't like need to blindly",
    "start": "2473079",
    "end": "2479560"
  },
  {
    "text": "follow our classes hierarchy or something like that if you need an object that always should not be new",
    "start": "2479560",
    "end": "2486820"
  },
  {
    "text": "like design your interface this way it should be either like const reference or",
    "start": "2486820",
    "end": "2492040"
  },
  {
    "text": "non-const reference and then the clients of your API whoever it is like internal",
    "start": "2492040",
    "end": "2499599"
  },
  {
    "text": "external clients they don't need to like you know to guess into whatever they probably cannot pass okay it's obviously",
    "start": "2499599",
    "end": "2506920"
  },
  {
    "text": "always possible to make a diamond reference and pass it but it will be on purpose I think for this API and this is",
    "start": "2506920",
    "end": "2515500"
  },
  {
    "text": "the way how you can potentially Ensure well your prayer conditions through the",
    "start": "2515500",
    "end": "2522460"
  },
  {
    "text": "code and if you can start utilizing those practices in your real code base I",
    "start": "2522460",
    "end": "2529180"
  },
  {
    "text": "would encourage you to do so especially if you like have a lot of helper functions in your CPP files and your",
    "start": "2529180",
    "end": "2534460"
  },
  {
    "text": "implementation let's accept something please use this one of the cool things",
    "start": "2534460",
    "end": "2542220"
  },
  {
    "start": "2542000",
    "end": "2542000"
  },
  {
    "text": "and last stuff I want to mention that is",
    "start": "2542440",
    "end": "2550000"
  },
  {
    "text": "all data you have all the data you collected through them",
    "start": "2550000",
    "end": "2556240"
  },
  {
    "text": "work of your program right that's about accept stuff that should be analyzed",
    "start": "2556240",
    "end": "2561700"
  },
  {
    "text": "because if you just you know having some logs sending something to the cloud and",
    "start": "2561700",
    "end": "2567640"
  },
  {
    "text": "you do not utilize it it's sort of useless right I know many examples when",
    "start": "2567640",
    "end": "2572920"
  },
  {
    "text": "people just collected for some reasons but do not utilize so please try to like",
    "start": "2572920",
    "end": "2578800"
  },
  {
    "text": "extract some Minion from it try to analyze find some patterns that where",
    "start": "2578800",
    "end": "2584500"
  },
  {
    "text": "your program doesn't work correct why under which circumstances so then",
    "start": "2584500",
    "end": "2590319"
  },
  {
    "text": "analyze it classify probably automatically I know a few companies probably where it's done when it's like",
    "start": "2590319",
    "end": "2596560"
  },
  {
    "text": "analyzed classified even probably some kind of tickets automatically filed and some developers are booked okay your",
    "start": "2596560",
    "end": "2603640"
  },
  {
    "text": "code right here producing a lot of Errors a lot of flow during runtime",
    "start": "2603640",
    "end": "2610240"
  },
  {
    "text": "please do something it's kind of cool there are no examples of it obviously this mustachextual stuff",
    "start": "2610240",
    "end": "2616900"
  },
  {
    "text": "and I mean with that and I promised I said right of time for discussion like",
    "start": "2616900",
    "end": "2623079"
  },
  {
    "text": "15 minutes for discussion aside that's it for me I don't want to bothering you with errors for a while",
    "start": "2623079",
    "end": "2629500"
  },
  {
    "text": "thank you [Applause]",
    "start": "2629500",
    "end": "2641429"
  }
]