[
  {
    "text": "welcome to this little session on performance profiling and troubleshooting and figuring out when",
    "start": "7839",
    "end": "14160"
  },
  {
    "text": "things go wrong why do they go wrong i've named it whodunit and so i ran into a little",
    "start": "14160",
    "end": "21119"
  },
  {
    "text": "what do you call them smart dress shop earlier to figure out get some props but all you get was this little pipe so i hope that's gonna be",
    "start": "21119",
    "end": "27199"
  },
  {
    "text": "all right i'm gonna try and use this to look smart and look like a detective throughout i hope you can at least appreciate that",
    "start": "27199",
    "end": "33440"
  },
  {
    "text": "but so let's get started ah nice this one doesn't work again perfect give me a second we can do this",
    "start": "33440",
    "end": "40320"
  },
  {
    "text": "we can find out who did it this time as well wait it does work there we go so",
    "start": "40320",
    "end": "47200"
  },
  {
    "text": "before we sort of dive into this whole thing it's just nice for you to know a bit",
    "start": "47200",
    "end": "52719"
  },
  {
    "text": "about who i am so you know what i'm talking about and maybe know more about what i'm talking about than i do anyway my name is thomas",
    "start": "52719",
    "end": "59440"
  },
  {
    "text": "hartman it says developer developer developer although now it's probably more correct to say deaf relations and",
    "start": "59440",
    "end": "66000"
  },
  {
    "text": "community because i recently started a job as developer community manager previously",
    "start": "66000",
    "end": "71439"
  },
  {
    "text": "i've been a developer for a couple years i've done a bit of everything like from the front end to the back end",
    "start": "71439",
    "end": "77280"
  },
  {
    "text": "definitely not an expert in any of it but i like it and it's good fun the most important thing is i really really like",
    "start": "77280",
    "end": "83920"
  },
  {
    "text": "learning and that is also sort of how i came into doing this talk",
    "start": "83920",
    "end": "89759"
  },
  {
    "text": "now it says here that i'm the co-organizer of the west oslo meetup group if anyone's interested want to",
    "start": "89759",
    "end": "94799"
  },
  {
    "text": "learn more about that come let me know i'm sorry i didn't bring any stickers today i forgot my home so that's not",
    "start": "94799",
    "end": "100079"
  },
  {
    "text": "gonna happen but the last point there is quite important",
    "start": "100079",
    "end": "105439"
  },
  {
    "text": "and it says that i'm quite explicitly not a performance guru so",
    "start": "105439",
    "end": "111759"
  },
  {
    "text": "why then am i giving this talk if i don't really know what i'm talking about and that goes",
    "start": "111759",
    "end": "118399"
  },
  {
    "text": "back to the first point i really really like learning as a lot of people do i thought oh you know what that sounds like a fun thing let's do a talk on it",
    "start": "118399",
    "end": "125040"
  },
  {
    "text": "and then learn how to go about now where did the idea come from and to tell you about that i need to",
    "start": "125040",
    "end": "131120"
  },
  {
    "text": "introduce you to these two fellas dave rupert and chris coyer of the",
    "start": "131120",
    "end": "136879"
  },
  {
    "text": "shopdog show shopdog show is a podcast all about finding web design and development it's run by dave rupert down",
    "start": "136879",
    "end": "143280"
  },
  {
    "text": "on the right and chris coyle up on the left now in episode 471 if you want to go look it up it's about a minute 50.",
    "start": "143280",
    "end": "151200"
  },
  {
    "text": "so it's about half a year ago they said you know what they were talking about performance and profiling and suddenly",
    "start": "151200",
    "end": "156239"
  },
  {
    "text": "they said ah it's like it's like a mystery right it's like the only sort of mystery we have in our business it's like whodunit",
    "start": "156239",
    "end": "162000"
  },
  {
    "text": "you know what that sounds really fun what's this maybe i can use this",
    "start": "162000",
    "end": "168239"
  },
  {
    "text": "to create a talk because it sounds like something that'd be fun to do uh and so that's how i ended up here",
    "start": "168239",
    "end": "174879"
  },
  {
    "text": "now this talk is language agnostic or at least it's supposed to be it doesn't say anything",
    "start": "174879",
    "end": "181519"
  },
  {
    "text": "in the brief or the little summary you got about what language it's in because it really doesn't matter well it matters",
    "start": "181519",
    "end": "187440"
  },
  {
    "text": "a little bit but the tools we're using today something you can use everywhere and not just in one specific language and it's",
    "start": "187440",
    "end": "193680"
  },
  {
    "text": "all about the mindset and how you actually work with it that's what we're looking for",
    "start": "193680",
    "end": "199920"
  },
  {
    "text": "oh and uh before we go any further i'd just like to tell you that the events depicted in this talk are fictitious and",
    "start": "199920",
    "end": "205760"
  },
  {
    "text": "that any similarity to any person living or dead is merely coincidental also no animals were harmed in the making of",
    "start": "205760",
    "end": "211920"
  },
  {
    "text": "this talk so i know i mean i know this usually comes at the end but no one's going to stay for the credits anyway so i just thought",
    "start": "211920",
    "end": "217920"
  },
  {
    "text": "i'd get it out of the way yeah um so let's talk about the sit-up",
    "start": "217920",
    "end": "225519"
  },
  {
    "text": "let's set the scene and get things going now because this is sort of a murder",
    "start": "225519",
    "end": "231519"
  },
  {
    "text": "mystery of course it starts on a dark and stormy night now if you read the little summary about",
    "start": "231519",
    "end": "238239"
  },
  {
    "text": "the talk you might think oh well i thought we were on a boat to throw on a cruise that's fine if you want to be a detective on a cruise you be a detective",
    "start": "238239",
    "end": "244640"
  },
  {
    "text": "on a cruise if you want to be in some big dark gritty city you do that if you",
    "start": "244640",
    "end": "249840"
  },
  {
    "text": "want to be in a french castle cool whatever detective you want to be now's the chance to be one",
    "start": "249840",
    "end": "255680"
  },
  {
    "text": "um and in this case this is actually even before the murder",
    "start": "255680",
    "end": "260799"
  },
  {
    "text": "because you're just sitting there clucking gleeful away on your keyboard as you do you know you're a developer you do things you implement things and",
    "start": "260799",
    "end": "266320"
  },
  {
    "text": "then the product manager comes through the door oh oh no see you used to have a service that",
    "start": "266320",
    "end": "273840"
  },
  {
    "text": "simply took some json transformed it and spat it back out super simple super easy",
    "start": "273840",
    "end": "280160"
  },
  {
    "text": "but now as product is one to do they give you additional requirements",
    "start": "280160",
    "end": "286560"
  },
  {
    "text": "now for the sake of this story this piece of json is just less of tickets or objects that",
    "start": "286560",
    "end": "294000"
  },
  {
    "text": "need to be done and so each ticket has a it's a bit of where you go and get it",
    "start": "294000",
    "end": "300000"
  },
  {
    "text": "what you're getting and who it's assigned to as it turns out the less you get in",
    "start": "300000",
    "end": "306080"
  },
  {
    "text": "can't contain duplicates but we don't like duplicates because a person can only do one thing at a time so it has to",
    "start": "306080",
    "end": "311120"
  },
  {
    "text": "be deduplicated next we like to sort the output we want a list but when it's sorted",
    "start": "311120",
    "end": "317120"
  },
  {
    "text": "that makes it easier for people to read through it manually i guess i don't know why you'd want to do that but it's product don't question it just do it",
    "start": "317120",
    "end": "324560"
  },
  {
    "text": "last thing ah we need to make some changes because right now the target string actually contains",
    "start": "324560",
    "end": "329600"
  },
  {
    "text": "three separate sections we like to split them out to make it easy to read now i'll make this clear for you",
    "start": "329600",
    "end": "336080"
  },
  {
    "text": "this is the data that we're getting in this is the json object that we're transforming",
    "start": "336080",
    "end": "343039"
  },
  {
    "text": "it's got a target it's got an id and it's got an assigned to originally in version one the one that",
    "start": "343039",
    "end": "349440"
  },
  {
    "text": "we had it does is remove the id because we don't want to",
    "start": "349440",
    "end": "355199"
  },
  {
    "text": "leak that out to members reading the data in so it was super simple transformation just remove id you could basically just read it in and write it",
    "start": "355199",
    "end": "361919"
  },
  {
    "text": "back out now we want this just only do this",
    "start": "361919",
    "end": "368080"
  },
  {
    "text": "so assigned to stays but you need to split target into three",
    "start": "368080",
    "end": "373680"
  },
  {
    "text": "separate strings so as you can tell you sort of split it on the colon and you just say oh it's this field digital in",
    "start": "373680",
    "end": "378960"
  },
  {
    "text": "that field again it's to make it easy to read and you don't really question it product says do it you do it",
    "start": "378960",
    "end": "384639"
  },
  {
    "text": "you think ah that's fairly simple right we can do that pretty quickly sit down smack something out in like",
    "start": "384639",
    "end": "391360"
  },
  {
    "text": "about an hour write some tests don't think too much about it um",
    "start": "391360",
    "end": "396800"
  },
  {
    "text": "and then you hear the screech from down the hall because something really isn't working right",
    "start": "396800",
    "end": "403520"
  },
  {
    "text": "there's been a bit of a murder you see it turns out that version 2 is up to 45",
    "start": "403520",
    "end": "410240"
  },
  {
    "text": "times slower than the actual first implementation and that is quite a lot",
    "start": "410240",
    "end": "417599"
  },
  {
    "text": "but so when you were implementing this you thought ah okay well we got this we've got to do this you've got to do this some tests here a little bit of",
    "start": "417599",
    "end": "423680"
  },
  {
    "text": "that a little bit of this you never really gave it much thought because you know you don't you're not supposed to think about performance when",
    "start": "423680",
    "end": "429680"
  },
  {
    "text": "you're writing just write whatever it is simple and easy to read and easy to understand and use that",
    "start": "429680",
    "end": "435039"
  },
  {
    "text": "uh you know across the bridge when you get there performance premature optimization yada yada yada",
    "start": "435039",
    "end": "440560"
  },
  {
    "text": "now i i just want to say i do not recommend you think about performance all the time while writing",
    "start": "440560",
    "end": "446319"
  },
  {
    "text": "that is not really the way to go about it because you need to know what is actually expensive what takes time",
    "start": "446319",
    "end": "453280"
  },
  {
    "text": "but so maybe while you were writing maybe you did some couple like small performances you run the same for 10 elements yeah it's fine it's fine it",
    "start": "453280",
    "end": "459520"
  },
  {
    "text": "doesn't really matter um but much like this dog you sort of sat there",
    "start": "459520",
    "end": "465360"
  },
  {
    "text": "and there's just all fire all around you it's burning you can say this is fine as much you want but people",
    "start": "465360",
    "end": "472560"
  },
  {
    "text": "it really it wasn't fine not at all so",
    "start": "472560",
    "end": "477680"
  },
  {
    "text": "we need ourselves a little investigation",
    "start": "477680",
    "end": "482720"
  },
  {
    "text": "and this is where the fun starts so the first thing we do is we gather all the suspects we get",
    "start": "482720",
    "end": "489360"
  },
  {
    "text": "them in together in one room and we look them all straight in the eye we don't but we make a list of potential people",
    "start": "489360",
    "end": "495680"
  },
  {
    "text": "now these people do all not exist they're pulled from this person's not exist so if they look like someone you",
    "start": "495680",
    "end": "500879"
  },
  {
    "text": "know they're probably not and if they are i'm very sorry um these are common things that might",
    "start": "500879",
    "end": "508080"
  },
  {
    "text": "cause performance issues this is not a definitive list this is not an exhaustive list it's just here are",
    "start": "508080",
    "end": "514640"
  },
  {
    "text": "things that might cause issues but we start this thing right we know our",
    "start": "514640",
    "end": "520159"
  },
  {
    "text": "application a little bit what can we do what can we know already may or may not be an issue",
    "start": "520159",
    "end": "527680"
  },
  {
    "text": "first off we know there's there's no sql there's no network calls we can rule that out",
    "start": "527680",
    "end": "532839"
  },
  {
    "text": "completely it's fine second we know the application's single threaded",
    "start": "532839",
    "end": "537920"
  },
  {
    "text": "that's not an issue now we also know a little bit about the application what the language it's",
    "start": "537920",
    "end": "543600"
  },
  {
    "text": "written in i didn't tell you but i know that it is written in rust",
    "start": "543600",
    "end": "549600"
  },
  {
    "text": "now what this means is that because rust has no run time uh it also doesn't have reflection which",
    "start": "549600",
    "end": "555920"
  },
  {
    "text": "is a runtime thing so it can't be that also rust isn't garbage collected so you can't pick up collection",
    "start": "555920",
    "end": "562800"
  },
  {
    "text": "and now we're left with five little suspects so now that we have a little list of",
    "start": "562800",
    "end": "569760"
  },
  {
    "text": "people it might be let's do some actual benchmarking and figure out what's going on",
    "start": "569760",
    "end": "577680"
  },
  {
    "text": "so the term benchmark is",
    "start": "577680",
    "end": "582880"
  },
  {
    "text": "i didn't really know how well i thought it was but it's apparently from 1838 and used in a figurative sense in the 1880s",
    "start": "582880",
    "end": "590480"
  },
  {
    "text": "it's fun if you like etymology i do um anyway what it is is it's a way to",
    "start": "590480",
    "end": "595680"
  },
  {
    "text": "measure the performance of a program and you should do it by running the",
    "start": "595680",
    "end": "601680"
  },
  {
    "text": "program and then measuring the output it's got some good pros it gives you a lot of a",
    "start": "601680",
    "end": "608160"
  },
  {
    "text": "relative overview of how well something runs so you can run multiple versions of the same algorithm you can run the same",
    "start": "608160",
    "end": "614640"
  },
  {
    "text": "algorithm on different computers and so on and so on depending on whether you want to benchmark hardware or software",
    "start": "614640",
    "end": "621040"
  },
  {
    "text": "but as a con it can also vary a lot based one thing is what's your hardware like and the other are you doing",
    "start": "621040",
    "end": "627360"
  },
  {
    "text": "anything else say you're running benchmarks if you're also playing a video game on the same computer that's",
    "start": "627360",
    "end": "633040"
  },
  {
    "text": "going to mess things up because you've only got so much computing power to you know throw out the benchmarking",
    "start": "633040",
    "end": "638720"
  },
  {
    "text": "so you need to or you should try and keep it as stable as you want or as possible between benchmarks",
    "start": "638720",
    "end": "645519"
  },
  {
    "text": "now if you're using rust this is just in that case and that's this is what i've been using here i've",
    "start": "645519",
    "end": "651279"
  },
  {
    "text": "been using criterion as a benchmarking tool and crit comp as a way to compare them",
    "start": "651279",
    "end": "657680"
  },
  {
    "text": "now the output of those two things looks a bit like this",
    "start": "657680",
    "end": "664000"
  },
  {
    "text": "so here i've benchmarked for running the program the algorithm",
    "start": "664000",
    "end": "671600"
  },
  {
    "text": "on 10 elements on a hundred elements on a thousand elements",
    "start": "671600",
    "end": "676880"
  },
  {
    "text": "on ten thousand elements where there's only 997 unique ones on",
    "start": "676880",
    "end": "682800"
  },
  {
    "text": "ten thousand elements where there's ten thousand unique ones twenty thousand elements where there's ten thousand unique",
    "start": "682800",
    "end": "688640"
  },
  {
    "text": "and a hundred thousand elements with maximum roughly a thousand unique ones",
    "start": "688640",
    "end": "694160"
  },
  {
    "text": "and how this works is you've got three columns the group explains what's been run v1 is the first version of the",
    "start": "694160",
    "end": "700240"
  },
  {
    "text": "algorithm v2 is the second one the fact that v1 is all in green means",
    "start": "700240",
    "end": "706880"
  },
  {
    "text": "that v1 was the fastest run for all of these trials",
    "start": "706880",
    "end": "712320"
  },
  {
    "text": "and so the column directly under v2 means okay this took 1.07 times long or",
    "start": "712399",
    "end": "718160"
  },
  {
    "text": "this took 3.95 times as long to run and we've got some interesting",
    "start": "718160",
    "end": "724240"
  },
  {
    "text": "properties here so for 10 elements they're actually roughly the same it doesn't really matter much right",
    "start": "724240",
    "end": "729680"
  },
  {
    "text": "for a hundred elements suddenly you take about sixty percent longer then for a thousand elements you take",
    "start": "729680",
    "end": "736399"
  },
  {
    "text": "almost four times as long that's really bad but then suddenly when you have ten",
    "start": "736399",
    "end": "741839"
  },
  {
    "text": "thousand elements but only a thousand unique ones suddenly you're not doing that bad anymore after",
    "start": "741839",
    "end": "747279"
  },
  {
    "text": "all you haven't quite caught up you're still 76 slower",
    "start": "747279",
    "end": "752560"
  },
  {
    "text": "but it's not as bad so that might give a little hint as to what might be happening there but now if you've got 10",
    "start": "752560",
    "end": "759360"
  },
  {
    "text": "000 unique elements suddenly it takes 15 times longer to run version two and my favorite is",
    "start": "759360",
    "end": "766959"
  },
  {
    "text": "20 000 elements but only 10 000 unique ones it takes 45 times as long to run version",
    "start": "766959",
    "end": "773680"
  },
  {
    "text": "two now we'll get into this and try and figure out what happens here but before",
    "start": "773680",
    "end": "779839"
  },
  {
    "text": "we get into looking at actual code and how it works i want to bring up another tool that is",
    "start": "779839",
    "end": "785360"
  },
  {
    "text": "useful for troubleshooting when something goes wrong and you're not sure exactly where",
    "start": "785360",
    "end": "790399"
  },
  {
    "text": "it went wrong because this thing happened over multiple commits you don't know exactly where things got introduced",
    "start": "790399",
    "end": "796000"
  },
  {
    "text": "and that tool is git bisect",
    "start": "796000",
    "end": "801040"
  },
  {
    "text": "um and get bisect is a tool that obviously you need to be working with get but i",
    "start": "801040",
    "end": "806240"
  },
  {
    "text": "assume most people are there are other options for version control systems and they're all valid and they're all cool in their own",
    "start": "806240",
    "end": "812240"
  },
  {
    "text": "right but a lot of people use git i like it now get bisect is an implementation or",
    "start": "812240",
    "end": "818639"
  },
  {
    "text": "it's a tool in git that uses binary search binary search",
    "start": "818639",
    "end": "824240"
  },
  {
    "text": "is an algorithm which has a big o notation that is the worst case",
    "start": "824240",
    "end": "830639"
  },
  {
    "text": "runtime is o log n now if this doesn't tell you anything you might not be",
    "start": "830639",
    "end": "837199"
  },
  {
    "text": "familiar with or comfortable with big o that what it does mean is that if you've got up to 127 elements it'll take you at",
    "start": "837199",
    "end": "844399"
  },
  {
    "text": "most seven steps to get there likewise if you've got 255 it's the most",
    "start": "844399",
    "end": "849600"
  },
  {
    "text": "eight steps to find the one single commit that you were looking for it's really really useful and gets you",
    "start": "849600",
    "end": "856320"
  },
  {
    "text": "where you need to go really fast but it only works if the collection is sorted now",
    "start": "856320",
    "end": "862160"
  },
  {
    "text": "this talk obviously is about using it in git and encode in general",
    "start": "862160",
    "end": "868639"
  },
  {
    "text": "but also i find it to be quite useful in",
    "start": "868639",
    "end": "874880"
  },
  {
    "text": "day-to-day stuff so my editor's config file is six and a",
    "start": "874880",
    "end": "880320"
  },
  {
    "text": "half thousand lines long that sounds a bit excessive but it is what it is",
    "start": "880320",
    "end": "886480"
  },
  {
    "text": "now it's written in lisp so if there's an extra closing parenthesis somewhere how do i know",
    "start": "886480",
    "end": "892160"
  },
  {
    "text": "if i type a parenthesis and then everything just breaks and i save it i didn't didn't really check it right you",
    "start": "892160",
    "end": "898000"
  },
  {
    "text": "try try and start theater up later and just doesn't work how do you find it when there's one character",
    "start": "898000",
    "end": "904639"
  },
  {
    "text": "in six and a half thousand lines binary search works really really well here too",
    "start": "904639",
    "end": "910639"
  },
  {
    "text": "so you say oh i don't know where it is you got a whole file you comment out or you delete half of it and see does it work",
    "start": "910639",
    "end": "917360"
  },
  {
    "text": "if it does work if everything does one cool you know the error was in bit you deleted if it doesn't you know it's in",
    "start": "917360",
    "end": "923199"
  },
  {
    "text": "the first bit you just keep on having and having and having and you find the end result really really quickly",
    "start": "923199",
    "end": "929600"
  },
  {
    "text": "now about get bisect i",
    "start": "929600",
    "end": "934720"
  },
  {
    "text": "know it's a bit scary it's one of those tools that i've heard and heard a lot about and people always",
    "start": "934720",
    "end": "939920"
  },
  {
    "text": "saying it's phrases but i've never really used it before this",
    "start": "939920",
    "end": "945920"
  },
  {
    "text": "so it was a fun little thing to learn and to try and what it does is it's as i said it lets you search through your",
    "start": "945920",
    "end": "951759"
  },
  {
    "text": "commits based on the binary search algorithm what you have to do is you need",
    "start": "951759",
    "end": "957759"
  },
  {
    "text": "something to tell git is this a good state or a bad state is this a good commit or a bad commit does this break",
    "start": "957759",
    "end": "962880"
  },
  {
    "text": "it or does it not and then at each commit you can check whether the state is good or bad now",
    "start": "962880",
    "end": "969120"
  },
  {
    "text": "this is quite abstract and because i've",
    "start": "969120",
    "end": "974160"
  },
  {
    "text": "never used it before i wrote this talk and i've heard people talk about it i wanted to take a minute and just actually show you how it works so we can",
    "start": "974160",
    "end": "980959"
  },
  {
    "text": "run through it so there's a little bit of interactive right here for you or you shouldn't work",
    "start": "980959",
    "end": "986800"
  },
  {
    "text": "with it all spread it this way all right so here as you can see we've got a list of",
    "start": "986800",
    "end": "993279"
  },
  {
    "text": "commits on the left and we've got a terminal on the right i'm",
    "start": "993279",
    "end": "998639"
  },
  {
    "text": "going to do this in the terminal you can use a gui for it i'm sure there's multiple ways to do it",
    "start": "998639",
    "end": "1004079"
  },
  {
    "text": "um and we know that in here this might take a little bit of building",
    "start": "1004079",
    "end": "1009680"
  },
  {
    "text": "but um that's what you do in rust you build a lot it takes time sometimes hopefully",
    "start": "1009680",
    "end": "1016079"
  },
  {
    "text": "not too much anyway we know that in this list of commits right now the tests are",
    "start": "1016079",
    "end": "1022160"
  },
  {
    "text": "failing um there is a failing test it says that's failing tests",
    "start": "1022160",
    "end": "1028240"
  },
  {
    "text": "and yes i did that that just so we could do this but um let's try and figure out where it's from",
    "start": "1028240",
    "end": "1034640"
  },
  {
    "text": "so to start a session you say git bisect start",
    "start": "1034640",
    "end": "1040558"
  },
  {
    "text": "and now we got it now we're telling it okay we're doing bisection now help me out so the first thing we do is we tell",
    "start": "1040559",
    "end": "1046480"
  },
  {
    "text": "git what's a bad state and we know that our current commit like the main branch the tip of the main branch is bad",
    "start": "1046480",
    "end": "1053760"
  },
  {
    "text": "so we say git by select bad we also know that on the left here",
    "start": "1053760",
    "end": "1060559"
  },
  {
    "text": "uh the one that says v1 that one worked we know that much so we can say okay we can use that we",
    "start": "1060559",
    "end": "1066880"
  },
  {
    "text": "can say git bisect good and put in the sha cool",
    "start": "1066880",
    "end": "1072559"
  },
  {
    "text": "it now says there's 11 revisions left to test and it'll take roughly four steps so it now is automatically checked this",
    "start": "1072559",
    "end": "1079200"
  },
  {
    "text": "out in if we jump here you can see that it can move all the way",
    "start": "1079200",
    "end": "1086240"
  },
  {
    "text": "down here and it shows us that the top one is bad",
    "start": "1086240",
    "end": "1091600"
  },
  {
    "text": "there's a good one and the at is where we're at we're halfway through we run cargo test",
    "start": "1091600",
    "end": "1098880"
  },
  {
    "text": "to see hmm does this work or does it not again it's a little bit of building",
    "start": "1098880",
    "end": "1106720"
  },
  {
    "text": "it's not too bad it's been worse and then if the tests pass",
    "start": "1106720",
    "end": "1112400"
  },
  {
    "text": "they do we can say good git by sight good then it puts us at the commit that says",
    "start": "1112400",
    "end": "1119520"
  },
  {
    "text": "add failing tests wow this this sounds very very hopeful this might be good",
    "start": "1119520",
    "end": "1125679"
  },
  {
    "text": "let's try this one out",
    "start": "1125679",
    "end": "1128559"
  },
  {
    "text": "so if this one's bad then",
    "start": "1133200",
    "end": "1139200"
  },
  {
    "text": "we'll be a lot closer it is bad who would have thought right",
    "start": "1142160",
    "end": "1148000"
  },
  {
    "text": "so we can say git bisect this is bad now",
    "start": "1148000",
    "end": "1153200"
  },
  {
    "text": "that means we're getting closer git knows it's bad but it doesn't know",
    "start": "1153200",
    "end": "1158320"
  },
  {
    "text": "it's the first bad one so obviously you gotta test again oh and this one's good",
    "start": "1158320",
    "end": "1164559"
  },
  {
    "text": "and we're really inching towards it here the last step is the one commit before",
    "start": "1164559",
    "end": "1170480"
  },
  {
    "text": "the one we found that was bad so we checked this one too is this one good or is this one bad this one's good",
    "start": "1170480",
    "end": "1176720"
  },
  {
    "text": "that means",
    "start": "1176720",
    "end": "1179840"
  },
  {
    "text": "that git tells us this is the first bad commit this is where it happened now in this case i run a script and",
    "start": "1182080",
    "end": "1189679"
  },
  {
    "text": "using just regular tests we could have done this with performance profiling but that takes a bit longer i thought well",
    "start": "1189679",
    "end": "1195760"
  },
  {
    "text": "let's just show you how it works also i did all the steps manually now",
    "start": "1195760",
    "end": "1201039"
  },
  {
    "text": "thankfully you don't have to if you have a script that outputs a or",
    "start": "1201039",
    "end": "1207039"
  },
  {
    "text": "either exits successfully or unsuccessfully you can have git run that automatically at every commit as it",
    "start": "1207039",
    "end": "1212960"
  },
  {
    "text": "checks them out and then find everything for you which makes it much quicker but this is actually how it works i know i would",
    "start": "1212960",
    "end": "1219360"
  },
  {
    "text": "have appreciated that so i hope some of you did and if not yeah it's there for austerity anyway",
    "start": "1219360",
    "end": "1225679"
  },
  {
    "text": "using that we can find things that leaves one more tool",
    "start": "1225679",
    "end": "1231200"
  },
  {
    "text": "in our arsenal i mean there's loads of them obviously but the ones that we're going to use today and that",
    "start": "1231200",
    "end": "1237120"
  },
  {
    "text": "is flame graphs now to talk about flame graphs let's first talk about",
    "start": "1237120",
    "end": "1244559"
  },
  {
    "text": "this guy brendan greg here he is shouting his lungs out at a",
    "start": "1244559",
    "end": "1251679"
  },
  {
    "text": "server in the data center this video is from 2009 i don't know if any of you seen this but he's actually",
    "start": "1251679",
    "end": "1258480"
  },
  {
    "text": "in a day center going and really just yelling at the various servers and the reason he's doing that is they're",
    "start": "1258480",
    "end": "1264720"
  },
  {
    "text": "monitoring the performance so he's got a program that's checking",
    "start": "1264720",
    "end": "1269760"
  },
  {
    "text": "right performance read performance and at the same time he's going and shouting at the servers and what he finds is it creates a or a notable spike in",
    "start": "1269760",
    "end": "1277919"
  },
  {
    "text": "the time it takes to write so showing that sound waves shock waves can impact the",
    "start": "1277919",
    "end": "1284080"
  },
  {
    "text": "performance of writing in data center so here's a slightly better or a",
    "start": "1284080",
    "end": "1290720"
  },
  {
    "text": "more flattering photo of him where he's not just looking into a bunch of servers uh he brendan greg is a so-called",
    "start": "1290720",
    "end": "1297919"
  },
  {
    "text": "internationally renowned expert in computing performance and he's done loads and loads loads of stuff i think he's currently working for netflix but",
    "start": "1297919",
    "end": "1304400"
  },
  {
    "text": "he's also been with sun oracle and so on and he's relevant",
    "start": "1304400",
    "end": "1310400"
  },
  {
    "text": "because he invented fine grass he was the one who created them or at least that's what he says and",
    "start": "1310400",
    "end": "1316320"
  },
  {
    "text": "that's what the internet says so a flame graph what is a flying graph",
    "start": "1316320",
    "end": "1322159"
  },
  {
    "text": "well it's what you see on the right here apparently he invented them in 2011 when",
    "start": "1322159",
    "end": "1327919"
  },
  {
    "text": "he was working on a mind sequel performance issue and had to understand cpu such quickly and in depth",
    "start": "1327919",
    "end": "1336159"
  },
  {
    "text": "flame graphs let you visualize stack traces and the way they work is as a graph",
    "start": "1336799",
    "end": "1344000"
  },
  {
    "text": "there's an x axis that goes along and there's a y-axis that goes up and down on the x-axis",
    "start": "1344000",
    "end": "1349760"
  },
  {
    "text": "the stacks are sorted alphabetically and then on the y-axis",
    "start": "1349760",
    "end": "1355760"
  },
  {
    "text": "you get the stack depth so every time a function calls another function it adds layer to the y-axis",
    "start": "1355760",
    "end": "1363120"
  },
  {
    "text": "um now the x-axis is not sorted according to when something's run or how or",
    "start": "1363120",
    "end": "1368960"
  },
  {
    "text": "how long it takes it is sorted according alphabetically but what we do know is that the wider a",
    "start": "1368960",
    "end": "1374880"
  },
  {
    "text": "box is the longer it took to run the more time it's spent on the cpu",
    "start": "1374880",
    "end": "1380080"
  },
  {
    "text": "and that's what you get to measure with flame graphs and just because it's cute",
    "start": "1380080",
    "end": "1386559"
  },
  {
    "text": "if you flip them upside down they're called icicle crafts because they sort of look like icicles this is also really",
    "start": "1386559",
    "end": "1392240"
  },
  {
    "text": "it's all it's really all a matter of preference some people like to start looking at the top and then see what's got the deepest icicle some",
    "start": "1392240",
    "end": "1398960"
  },
  {
    "text": "people prefer looking at flames anyway what happens is",
    "start": "1398960",
    "end": "1404240"
  },
  {
    "text": "as you see in this full flame chart you don't have to read this that's fine it's just it's just a visual",
    "start": "1404240",
    "end": "1409760"
  },
  {
    "text": "but at the bottom you have wider boxes and they get narrower and narrower and narrower and narrower",
    "start": "1409760",
    "end": "1414960"
  },
  {
    "text": "because everything comes from that first call right and then so that takes up spends a whole lot of times debut on",
    "start": "1414960",
    "end": "1421200"
  },
  {
    "text": "itself and its descendants so",
    "start": "1421200",
    "end": "1426559"
  },
  {
    "text": "what you'll also notice is some of these are really thin and really",
    "start": "1426559",
    "end": "1432000"
  },
  {
    "text": "tall and some not as tall and quite wide",
    "start": "1432000",
    "end": "1438320"
  },
  {
    "text": "and that is obviously because how they work now there are other options as well to",
    "start": "1438400",
    "end": "1445360"
  },
  {
    "text": "flame graphs flame graphs may measure cpu time",
    "start": "1445360",
    "end": "1450640"
  },
  {
    "text": "sometimes that is not optimal that's not really what you want to measure because it might be impacted by a lot of things",
    "start": "1450640",
    "end": "1457760"
  },
  {
    "text": "such as you're running other processes or maybe you suddenly you unplug your laptop and",
    "start": "1457760",
    "end": "1463120"
  },
  {
    "text": "some battery power and the cpu doesn't run as fast right so instead you can do stuff like count",
    "start": "1463120",
    "end": "1468400"
  },
  {
    "text": "cpu instructions that might be more appropriate but then again that might miss things if it's if you're doing um",
    "start": "1468400",
    "end": "1474400"
  },
  {
    "text": "io or performance sorry i o or something where it's not on the cpu where it's not cpu cycle based but it",
    "start": "1474400",
    "end": "1480640"
  },
  {
    "text": "spends time on the cpu anyway so we'll be using flame graphs today",
    "start": "1480640",
    "end": "1485840"
  },
  {
    "text": "because it's easy it's pretty intuitive and it's fun so",
    "start": "1485840",
    "end": "1492000"
  },
  {
    "text": "now that we've got the tools we've done a little bit of bisection we know where we're going",
    "start": "1492000",
    "end": "1497600"
  },
  {
    "text": "can we crack the case here is the flame graph for",
    "start": "1497600",
    "end": "1504880"
  },
  {
    "text": "when we run with the unique elements from 10 to 10 000 so that's 10 unique elements 100 unique",
    "start": "1504880",
    "end": "1510320"
  },
  {
    "text": "elements thousands and 10 000 unique elements again i don't expect you to be able to read this i can't read this from",
    "start": "1510320",
    "end": "1516559"
  },
  {
    "text": "where i'm standing so i've taken the liberty of",
    "start": "1516559",
    "end": "1521600"
  },
  {
    "text": "annotating it for you to give you a rougher view of what's happening and so going from the left we see that",
    "start": "1521600",
    "end": "1528880"
  },
  {
    "text": "okay there's a bit of allocations going on there it's mostly allocating vectors it's it's a little bit of time it's not",
    "start": "1528880",
    "end": "1534400"
  },
  {
    "text": "really that much deserializing apparently that takes a surprising amount of time it's about",
    "start": "1534400",
    "end": "1541440"
  },
  {
    "text": "20 or so serializing does not take as long",
    "start": "1541440",
    "end": "1546960"
  },
  {
    "text": "it's good to know oh but this one deduplication that's a big one that's about what",
    "start": "1546960",
    "end": "1554080"
  },
  {
    "text": "half the time roughly it's spent deduplicating that sounds really really bad doesn't it that's really bad oh",
    "start": "1554080",
    "end": "1560880"
  },
  {
    "text": "there's a tiny bit of cloning which is doing deep copies or copying something from the heap and putting somewhere else",
    "start": "1560880",
    "end": "1567039"
  },
  {
    "text": "on the heap um there's a little bit of converting what we have into the structs we use and",
    "start": "1567039",
    "end": "1572720"
  },
  {
    "text": "there's a little bit of sorting but not much here uh obviously deduplication is really really bad but this is for",
    "start": "1572720",
    "end": "1580880"
  },
  {
    "text": "unique elements right when you've only got unique gums in the list what happens when you've got 20 000 elements",
    "start": "1580880",
    "end": "1588080"
  },
  {
    "text": "but only 10 000 unique ones yeah deduplication goes through the roof",
    "start": "1588080",
    "end": "1595440"
  },
  {
    "text": "everything else is absolutely unimportant uh",
    "start": "1595440",
    "end": "1600480"
  },
  {
    "text": "so that makes us think ah maybe we should get the the suspect back in the room",
    "start": "1600480",
    "end": "1607039"
  },
  {
    "text": "um and see well okay who can we rule out now we know",
    "start": "1607039",
    "end": "1612480"
  },
  {
    "text": "because i o didn't even appear it's not i o there were a little bit of allocations",
    "start": "1612480",
    "end": "1618400"
  },
  {
    "text": "so maybe they didn't quite like performance or but they didn't they definitely didn't",
    "start": "1618400",
    "end": "1624080"
  },
  {
    "text": "kill it now d serializing and deserializing",
    "start": "1624080",
    "end": "1632080"
  },
  {
    "text": "did take a lot of time absolutely and there's some deep rooted hatred in there definitely but",
    "start": "1632080",
    "end": "1639360"
  },
  {
    "text": "it wasn't the worst thing now we're left here with algorithms and data structures they're commonly noticed",
    "start": "1639360",
    "end": "1645600"
  },
  {
    "text": "or the commonly talked about in pairs like those who go together and they do really influence each other a lot so i",
    "start": "1645600",
    "end": "1652480"
  },
  {
    "text": "think that there might be a little double murder going on",
    "start": "1652480",
    "end": "1659760"
  },
  {
    "text": "but so we take them in and we tie them up we see",
    "start": "1659760",
    "end": "1666799"
  },
  {
    "text": "trying to see who really killed performers here and",
    "start": "1666799",
    "end": "1672799"
  },
  {
    "text": "it was me i wrote the algorithm so obviously i'm the one who did it",
    "start": "1672799",
    "end": "1678720"
  },
  {
    "text": "um it was me all along and i would have gotten away with it two it wasn't for you meddling kids so",
    "start": "1678720",
    "end": "1685440"
  },
  {
    "text": "that thing always remember it's not really the functions it's about what you do and how",
    "start": "1685440",
    "end": "1690640"
  },
  {
    "text": "you measure it and all do that but the good thing in software",
    "start": "1690640",
    "end": "1696480"
  },
  {
    "text": "when something dies we can bring it back let's see what we can do",
    "start": "1696480",
    "end": "1701520"
  },
  {
    "text": "to fix things i did not bring a firefighter uniform but so i'll stick with my pipe instead",
    "start": "1701520",
    "end": "1709200"
  },
  {
    "text": "at least we will try to fix it now as we saw the really really worst thing was",
    "start": "1709200",
    "end": "1714960"
  },
  {
    "text": "deduplication click can we fix that here is the first",
    "start": "1714960",
    "end": "1720720"
  },
  {
    "text": "version of the algorithm it's in in or this is in version two so the first the duplication",
    "start": "1720720",
    "end": "1726240"
  },
  {
    "text": "now i'm not going to go super in depth here but what we do is we get a list or a vector as you call them in rust of the input",
    "start": "1726240",
    "end": "1732880"
  },
  {
    "text": "elements we then take this reverse it we allocate a new vector and then for",
    "start": "1732880",
    "end": "1739120"
  },
  {
    "text": "every element in the input we check does this id exist in the output vector",
    "start": "1739120",
    "end": "1746080"
  },
  {
    "text": "if so don't do anything and if it doesn't insert it obviously this is going to give us a really bad run time it's a",
    "start": "1746080",
    "end": "1752320"
  },
  {
    "text": "quadratic one time so that's o and square that's going to take a lot of time um",
    "start": "1752320",
    "end": "1757520"
  },
  {
    "text": "there's also a bit of cloning and unwrapping going on before sorting so this is just really really bad",
    "start": "1757520",
    "end": "1763039"
  },
  {
    "text": "but can we how best to get rid of this thing is",
    "start": "1763039",
    "end": "1769200"
  },
  {
    "text": "in rust if you want to sort or if you want to duplicate a vector the best way is to have it sorted but we can't sort",
    "start": "1769200",
    "end": "1774799"
  },
  {
    "text": "it because we need it by time instead so because the vector has all the events",
    "start": "1774799",
    "end": "1780320"
  },
  {
    "text": "in the order that they happened we can't sort them by the assignee before we de-duplicate them so we need",
    "start": "1780320",
    "end": "1785600"
  },
  {
    "text": "to de-duplicate and then sort but",
    "start": "1785600",
    "end": "1790640"
  },
  {
    "text": "thing is data structures right aren't they great we've got something called sets or maps",
    "start": "1790640",
    "end": "1797440"
  },
  {
    "text": "and they have as their property they can only contain one element per or they have unique elements right you can't",
    "start": "1797440",
    "end": "1803440"
  },
  {
    "text": "have two of a thing in a set and it might be kind of two things at the same key so using a map just pushing",
    "start": "1803440",
    "end": "1809679"
  },
  {
    "text": "everything into a map we can say okay well i'll get a new map",
    "start": "1809679",
    "end": "1815520"
  },
  {
    "text": "and then check has this thing been inserted into the map before if it has don't do it",
    "start": "1815520",
    "end": "1820960"
  },
  {
    "text": "now i said that we because the vector is time ordered and",
    "start": "1820960",
    "end": "1826720"
  },
  {
    "text": "we want the last elements because they have the right assignees we need to iterate from the back we",
    "start": "1826720",
    "end": "1832799"
  },
  {
    "text": "don't have to reverse the vector because again sorry this is a bit rust specific but rust lets you iterate from the start",
    "start": "1832799",
    "end": "1839360"
  },
  {
    "text": "or from the end so if you just start start at the end just iterate all the way around we just need to check whether it",
    "start": "1839360",
    "end": "1845360"
  },
  {
    "text": "contains the element yet or not obviously you can't say if it is contained then replace them and i tried",
    "start": "1845360",
    "end": "1851840"
  },
  {
    "text": "that originally turns out i mean it's faster but checking whether the map contains",
    "start": "1851840",
    "end": "1857760"
  },
  {
    "text": "the key before trying to insert it gains even more speed",
    "start": "1857760",
    "end": "1863039"
  },
  {
    "text": "now doing it this way you end up putting it into a map then back into a list and then sorting the list",
    "start": "1863039",
    "end": "1869519"
  },
  {
    "text": "that sounds like a lot of work it doesn't sound amazing but or at least so i thought so i had a good",
    "start": "1869519",
    "end": "1875919"
  },
  {
    "text": "idea how about we use an ordered map right because",
    "start": "1875919",
    "end": "1881519"
  },
  {
    "text": "well it's like a hat map but it's sorted by descending value i thought ah that's really clever thomas",
    "start": "1881519",
    "end": "1887760"
  },
  {
    "text": "you've cracked the case this is a good one turns out it wasn't very good at all",
    "start": "1887760",
    "end": "1892799"
  },
  {
    "text": "um because the time you spend on insertion just is too much it takes",
    "start": "1892799",
    "end": "1899120"
  },
  {
    "text": "too long to sort it when things go in so i tried many many iterations of this",
    "start": "1899120",
    "end": "1904480"
  },
  {
    "text": "because it makes sense it would be so nice we could just have it sorted automatically",
    "start": "1904480",
    "end": "1910880"
  },
  {
    "text": "but nah it doesn't work doesn't work",
    "start": "1910880",
    "end": "1916398"
  },
  {
    "text": "another thing uh and this gets to when talking about stack and the",
    "start": "1917279",
    "end": "1923360"
  },
  {
    "text": "heap and rust string types um the question is rhetorical how many",
    "start": "1923360",
    "end": "1928960"
  },
  {
    "text": "types does it have i don't really know but the ones you do see in common usage are string and stir that's what i got",
    "start": "1928960",
    "end": "1935360"
  },
  {
    "text": "that's what i'm going to call them the sdr stir and these",
    "start": "1935360",
    "end": "1941840"
  },
  {
    "text": "have different purposes the string lives on the heap the stir",
    "start": "1941840",
    "end": "1949600"
  },
  {
    "text": "lives on the stack now just very quickly",
    "start": "1949600",
    "end": "1954880"
  },
  {
    "text": "yeah uh the heap is you need to allocate stuff on heat that's where you've got large we don't",
    "start": "1954880",
    "end": "1961519"
  },
  {
    "text": "know how big they are where they can grow they can shrink and all that stuff that's why the string",
    "start": "1961519",
    "end": "1966640"
  },
  {
    "text": "lives on the because you can grow it you can mutate it you can do what you want with it a stir",
    "start": "1966640",
    "end": "1972159"
  },
  {
    "text": "is just a pointer now we know how large a pointer is so we can put it on the stack we don't need",
    "start": "1972159",
    "end": "1977840"
  },
  {
    "text": "allocate memory for it because we know exactly how large it is that makes it a lot lighter to work with and easier",
    "start": "1977840",
    "end": "1985039"
  },
  {
    "text": "now the funny thing is a stir can point to a string but it isn't a string",
    "start": "1985039",
    "end": "1991039"
  },
  {
    "text": "the ampersand in the name stir is because it's a reference so you don't really own it",
    "start": "1991039",
    "end": "1997760"
  },
  {
    "text": "again sorry this is a bit sort of rusty but the important thing here is you don't need to if if you have a",
    "start": "1997760",
    "end": "2004799"
  },
  {
    "text": "string already you don't need to clone it and create an allocate new memory and put it on the heap you can say oh i'm",
    "start": "2004799",
    "end": "2010559"
  },
  {
    "text": "just pointing to this string this is where i'm at and the sort of genius thing here as well you",
    "start": "2010559",
    "end": "2017279"
  },
  {
    "text": "don't need to point to the whole string you can point to little sections it's like you create a little window here is this bit of the string that i",
    "start": "2017279",
    "end": "2023760"
  },
  {
    "text": "want to point at and then you can take a large string and create many small ones",
    "start": "2023760",
    "end": "2029840"
  },
  {
    "text": "and the small ones will be super light so creating windows in the original version",
    "start": "2029840",
    "end": "2039279"
  },
  {
    "text": "the the target struct where we had the location the object id and the code all used strings",
    "start": "2039279",
    "end": "2047039"
  },
  {
    "text": "now strings as i said live on the heap they are owned you need to allocate for them and you don't really know how large",
    "start": "2047039",
    "end": "2052240"
  },
  {
    "text": "they are so this is why on the flame graph the allocation bit just completely went away",
    "start": "2052240",
    "end": "2058638"
  },
  {
    "text": "obviously it wasn't as big as duplication but i think that might you might take away so instead of using",
    "start": "2058639",
    "end": "2064960"
  },
  {
    "text": "strings and allocating and copying and doing all that stuff we can just point to where it comes from we got this big",
    "start": "2064960",
    "end": "2070560"
  },
  {
    "text": "json string note this is between these two indices in the string and work with it that way the weird",
    "start": "2070560",
    "end": "2076960"
  },
  {
    "text": "apostrophe a here by the way this is rus lifetimes if you don't know don't worry about it it's complicated but useful",
    "start": "2076960",
    "end": "2083760"
  },
  {
    "text": "when you get used to it so cool we got windows",
    "start": "2083760",
    "end": "2089440"
  },
  {
    "text": "but because we're doing a lot of string manipulation or not manipulation but we're cutting a lot of strings right",
    "start": "2089440",
    "end": "2096398"
  },
  {
    "text": "we've got like 10 000 strings coming in and each one we've got a split so i thought",
    "start": "2096399",
    "end": "2102960"
  },
  {
    "text": "how long is the piece of string and how long today to cut it",
    "start": "2102960",
    "end": "2108800"
  },
  {
    "text": "so we're splitting this string over here or over there into three and we're splitting it on",
    "start": "2108800",
    "end": "2114480"
  },
  {
    "text": "colon so i thought how about we actually try and write nc profile that as well see what's faster",
    "start": "2114480",
    "end": "2121920"
  },
  {
    "text": "i came up with four sensible ways of doing that i'm not",
    "start": "2121920",
    "end": "2127280"
  },
  {
    "text": "going to really go in to explain it to you because it's quite code specific we can look at",
    "start": "2127280",
    "end": "2132480"
  },
  {
    "text": "them later if you want to but it's two main ways one is using a string split method you say",
    "start": "2132480",
    "end": "2139359"
  },
  {
    "text": "i'll split the string on colons then you iterate over it because you get a list back and you can iterate and go give me this one give me this one give me that",
    "start": "2139359",
    "end": "2145040"
  },
  {
    "text": "one the other version is the more",
    "start": "2145040",
    "end": "2150400"
  },
  {
    "text": "basic perhaps you go and go in and look for the index of the first colon you go in and look for the index of the last colon",
    "start": "2150400",
    "end": "2156720"
  },
  {
    "text": "and you go and you just use you just cut the slices use substrings right you say oh well it's between this and between",
    "start": "2156720",
    "end": "2162000"
  },
  {
    "text": "that and it turns out the last version where you manually go and find the index of the",
    "start": "2162000",
    "end": "2168240"
  },
  {
    "text": "characters that you want is quite a bit faster so the slowest version",
    "start": "2168240",
    "end": "2174000"
  },
  {
    "text": "is what three times as slow as the fastest version and the funny thing is uh this",
    "start": "2174000",
    "end": "2179440"
  },
  {
    "text": "which is just in this case it's not a general thing that the height of the flame graph the",
    "start": "2179440",
    "end": "2184720"
  },
  {
    "text": "flames actually correspond to the run time so the the one that takes the longest one",
    "start": "2184720",
    "end": "2190160"
  },
  {
    "text": "has the tallest bit and so on and so on so",
    "start": "2190160",
    "end": "2195599"
  },
  {
    "text": "now that we know this we've made a couple changes can we return back to the flame graph and see",
    "start": "2195599",
    "end": "2201760"
  },
  {
    "text": "how things have changed and this",
    "start": "2201760",
    "end": "2208480"
  },
  {
    "text": "is what it looks like in the new version",
    "start": "2208480",
    "end": "2213280"
  },
  {
    "text": "uh here is annotated for you as we can see",
    "start": "2213599",
    "end": "2219119"
  },
  {
    "text": "now deserialization takes up a lot more space than it did previously it's almost",
    "start": "2219119",
    "end": "2224160"
  },
  {
    "text": "half the graph right and then there's a little bit of serialization and there's some sorting going on",
    "start": "2224160",
    "end": "2230720"
  },
  {
    "text": "the other bits are inserting into the hashmap and that's mainly actually the duplication",
    "start": "2230720",
    "end": "2236400"
  },
  {
    "text": "insertion and there's finally there's converting the input into struct and creating the",
    "start": "2236400",
    "end": "2241520"
  },
  {
    "text": "data structure we need what's interesting here is i haven't",
    "start": "2241520",
    "end": "2248079"
  },
  {
    "text": "touched the serialization or deserialization code i use a pretty standard library in rust for that",
    "start": "2248079",
    "end": "2254800"
  },
  {
    "text": "it is the go-to i'd say it's called survey it's really really good but it takes",
    "start": "2254800",
    "end": "2260320"
  },
  {
    "text": "time now that might just be the cost of entry right because at some point you can't really go faster",
    "start": "2260320",
    "end": "2265680"
  },
  {
    "text": "but because we haven't touched deserialization or serialization code",
    "start": "2265680",
    "end": "2271440"
  },
  {
    "text": "we can put this up against the flame graph we had before now we know that in this case",
    "start": "2271440",
    "end": "2279280"
  },
  {
    "text": "uh the deserialization should be roughly it should take as long in time so cpu",
    "start": "2279280",
    "end": "2284560"
  },
  {
    "text": "time should be as much but that means we can get relatively see what's happened so before",
    "start": "2284560",
    "end": "2291200"
  },
  {
    "text": "it took about yeah 20 of the time spent serialization and the rest was on other stuff now it's about 50. so that means",
    "start": "2291200",
    "end": "2298960"
  },
  {
    "text": "that while we don't get exact numbers it means that everything else has to be done a lot lot faster",
    "start": "2298960",
    "end": "2306720"
  },
  {
    "text": "and this is sort of what happens because in the end you know",
    "start": "2307520",
    "end": "2313200"
  },
  {
    "text": "there's always always going to be slowdowns when you do more the more things you want to do the more",
    "start": "2313200",
    "end": "2320079"
  },
  {
    "text": "computation you have to do obviously it's going to take longer so that's something you've got to take in account it's always going to be a thing but you",
    "start": "2320079",
    "end": "2326560"
  },
  {
    "text": "can try and find out what's causing issues might be causing issues and",
    "start": "2326560",
    "end": "2332079"
  },
  {
    "text": "find things you can do or maybe things that he cannot do as well so",
    "start": "2332079",
    "end": "2337200"
  },
  {
    "text": "i ran the benchmarks again they're not sorted as beautifully as they were before i'm sorry about that",
    "start": "2337200",
    "end": "2344160"
  },
  {
    "text": "but so we've got this group here and we've got four versions version one is the one that just strips",
    "start": "2344160",
    "end": "2350880"
  },
  {
    "text": "id and then prints it out again or literally all it does serialize it then deserialize it again",
    "start": "2350880",
    "end": "2357680"
  },
  {
    "text": "version two that's the horrible horrible horrible one with the absolutely terrible",
    "start": "2357680",
    "end": "2363280"
  },
  {
    "text": "duplication code version three is mostly what we've been talking about",
    "start": "2363280",
    "end": "2370240"
  },
  {
    "text": "but the difference between version 3 and version 4",
    "start": "2370240",
    "end": "2375520"
  },
  {
    "text": "is how we insert into the hashmap whether we check first before we insert an iterate from",
    "start": "2375520",
    "end": "2382400"
  },
  {
    "text": "the back or whether we just insert again whenever we find the new key so in version three",
    "start": "2382400",
    "end": "2387760"
  },
  {
    "text": "we iterate through the vector in order from top and you say ah i just just insert this",
    "start": "2387760",
    "end": "2393520"
  },
  {
    "text": "and rust will if the key exists already rust will swap it out and put the new object there",
    "start": "2393520",
    "end": "2399440"
  },
  {
    "text": "instead now in version 4 we go from the back which check for the key first",
    "start": "2399440",
    "end": "2404720"
  },
  {
    "text": "the interesting thing to note here is there's seven benchmarks",
    "start": "2404720",
    "end": "2412480"
  },
  {
    "text": "version one wins in three of them version four wins in four of them this",
    "start": "2412480",
    "end": "2418240"
  },
  {
    "text": "is not to say that version four is better let's look at what they're actually doing so the top one",
    "start": "2418240",
    "end": "2423680"
  },
  {
    "text": "twenty thousand elements ten thousand unique ones right",
    "start": "2423680",
    "end": "2428800"
  },
  {
    "text": "this is one of the ones that version four does better uh version one is slightly slower but",
    "start": "2428800",
    "end": "2435520"
  },
  {
    "text": "remember what we found out that serialization and deserialization takes",
    "start": "2435520",
    "end": "2440640"
  },
  {
    "text": "a lot of time version one did not do any deduplication it just printed everything out again",
    "start": "2440640",
    "end": "2445680"
  },
  {
    "text": "so when you print out 20 000 elements and write those to a file that's going to take you longer than it",
    "start": "2445680",
    "end": "2451200"
  },
  {
    "text": "is to deduplicate and write the 10 000 elements out to a file similarly for 10 elements",
    "start": "2451200",
    "end": "2458079"
  },
  {
    "text": "that's such a small sample that i don't really know it's not really relevant and if you look at the the plus minus ones",
    "start": "2458079",
    "end": "2465440"
  },
  {
    "text": "version one goes down to about 35 whereas version 4 goes down to about",
    "start": "2465440",
    "end": "2470720"
  },
  {
    "text": "38 so it doesn't really matter such small sizes at 100 elements it starts to become",
    "start": "2470720",
    "end": "2475920"
  },
  {
    "text": "noticeable because we're all unique and then version one",
    "start": "2475920",
    "end": "2481680"
  },
  {
    "text": "faster than the version 4 but not by a lot so version 4 is about 13 slower compared to version 2 which here",
    "start": "2481680",
    "end": "2488800"
  },
  {
    "text": "took an extra 60 better 1000 elements similar story",
    "start": "2488800",
    "end": "2495760"
  },
  {
    "text": "it's about 44 slower compared to four times slower that is 300 percent",
    "start": "2495760",
    "end": "2501040"
  },
  {
    "text": "slower that version 2 was definitely better again",
    "start": "2501040",
    "end": "2506400"
  },
  {
    "text": "there's no version four is faster for ten thousand and a hundred thousand elements when there's only a thousand",
    "start": "2506400",
    "end": "2511839"
  },
  {
    "text": "unique ones serialization right and then finally when there's ten",
    "start": "2511839",
    "end": "2517680"
  },
  {
    "text": "thousand unique ones version one is sas freaking but not by a whole lot so it takes 30 longer to do",
    "start": "2517680",
    "end": "2524319"
  },
  {
    "text": "all of that extra processing compared to the original which was 15 times",
    "start": "2524319",
    "end": "2529599"
  },
  {
    "text": "so like as a summary",
    "start": "2529599",
    "end": "2534720"
  },
  {
    "text": "the less you do the faster it's going to be the less things you have to calculate obviously faster and that's why version one always",
    "start": "2534720",
    "end": "2541440"
  },
  {
    "text": "wins when there's only unique items when there are duplicates it's going to be and you need to get them out",
    "start": "2541440",
    "end": "2546800"
  },
  {
    "text": "obviously before it's going to be faster so all this to say that you need to know",
    "start": "2546800",
    "end": "2553119"
  },
  {
    "text": "what your code is doing and what it needs to optimize for you need to know what the hot code paths are",
    "start": "2553119",
    "end": "2559920"
  },
  {
    "text": "so you know what it's worth optimizing so the allocation thing the string thing i did",
    "start": "2559920",
    "end": "2565599"
  },
  {
    "text": "it's not really worth a whole lot but to me it was funny it was something i wanted to look into",
    "start": "2565599",
    "end": "2571200"
  },
  {
    "text": "but obviously the deduplication is that on the whole thing a thing we could do here",
    "start": "2571200",
    "end": "2576560"
  },
  {
    "text": "because serialization takes that long is look into are there better ways of serializing are there better serializers",
    "start": "2576560",
    "end": "2582880"
  },
  {
    "text": "these serializers i keep messing those up by the way i mean deserialization because that's the biggest one but serialization two",
    "start": "2582880",
    "end": "2590560"
  },
  {
    "text": "can we make that faster this is an external library do are there faster ones that serve the same purpose",
    "start": "2590560",
    "end": "2597280"
  },
  {
    "text": "and so it's all about trying to figure out what you need to do for your code to run where it is but now",
    "start": "2597280",
    "end": "2602960"
  },
  {
    "text": "i've given you a couple tools and we've looked at them and had a little bit of fun a couple laughs and that's really all i can give",
    "start": "2602960",
    "end": "2609440"
  },
  {
    "text": "you today so thank you very much for coming along and any questions and stuff i'm happy to take them",
    "start": "2609440",
    "end": "2616720"
  },
  {
    "text": "generally upload myself should it's a bit dodgy all right",
    "start": "2617599",
    "end": "2624480"
  },
  {
    "text": "any questions at all no all right watch case thank you very much",
    "start": "2625040",
    "end": "2630800"
  },
  {
    "text": "enjoy the rest of your day enjoy the rest of the conference as much as you can and have a great weekend",
    "start": "2630800",
    "end": "2638039"
  }
]