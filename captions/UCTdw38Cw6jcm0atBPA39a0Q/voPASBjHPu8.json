[
  {
    "text": "hi see that worked I got rid of all the nerves so that's good hi um my name is",
    "start": "5720",
    "end": "11280"
  },
  {
    "text": "hanis today I'm going to talk about uh Lego and marbles um so first of all I suspect",
    "start": "11280",
    "end": "18039"
  },
  {
    "text": "that about half of you are here because the title of my talk disrespects Lego",
    "start": "18039",
    "end": "23800"
  },
  {
    "text": "right um and you came to see what that was all about now first disclaimer uh",
    "start": "23800",
    "end": "30000"
  },
  {
    "text": "before we start this talk um our household is very much a legal household",
    "start": "30000",
    "end": "36440"
  },
  {
    "text": "like the last victim was my wife but then Lego came out with all of these great floral sets and she's hooked as",
    "start": "36440",
    "end": "42680"
  },
  {
    "text": "well so everybody does Lego this is a set and and at the risk of showing my age this is a set that I used to dream",
    "start": "42680",
    "end": "49960"
  },
  {
    "text": "about as a kid the 80 94 control center it is basically the predecessor of what",
    "start": "49960",
    "end": "57199"
  },
  {
    "text": "Mindstorms became to be it was wired and very rudimentary and if the batteries",
    "start": "57199",
    "end": "63600"
  },
  {
    "text": "died like your programs didn't exactly do what they were supposed to do anymore it was great and but I think marble",
    "start": "63600",
    "end": "69479"
  },
  {
    "text": "tracks are awesome as well like who here during Co watched those marble tracks",
    "start": "69479",
    "end": "75840"
  },
  {
    "text": "that were commented on like Formula 1 races yeah yeah we all binged those",
    "start": "75840",
    "end": "81360"
  },
  {
    "text": "didn't we um but marble tracks are awesome and this is my oldest talk I",
    "start": "81360",
    "end": "86960"
  },
  {
    "text": "wrote it in 2018 and the weeks before I first wrote it my kids did this and what",
    "start": "86960",
    "end": "93840"
  },
  {
    "text": "you can see here is like there's some Duplo support here and Dupo is a Lego",
    "start": "93840",
    "end": "99079"
  },
  {
    "text": "Product and they Ed that as a support be because they didn't have enough blocks to build their marble track so we can",
    "start": "99079",
    "end": "106040"
  },
  {
    "text": "always coexist between Marbles and Lego right um now second disclaimer this talk",
    "start": "106040",
    "end": "112960"
  },
  {
    "text": "is not going to be about hipster Frameworks or fancy libraries and we will in fact just be talking about Good",
    "start": "112960",
    "end": "120320"
  },
  {
    "text": "Old Co code structure if that makes you want to walk out to another talk like please feel free to do so um and then a",
    "start": "120320",
    "end": "128280"
  },
  {
    "text": "service announcement Lego is a brand name and it gets used as an adjective so",
    "start": "128280",
    "end": "134440"
  },
  {
    "text": "you say LEGO sets LEGO brick you never say Legos if you say Legos you piss off",
    "start": "134440",
    "end": "141800"
  },
  {
    "text": "Lego people right don't do that but even this is a service",
    "start": "141800",
    "end": "147760"
  },
  {
    "text": "announcement from the Lego website itself so use it as an adjective just makes you look foolish if you say Legos",
    "start": "147760",
    "end": "154000"
  },
  {
    "text": "just so you know now before I dive into the technical parts of what I had to do to",
    "start": "154000",
    "end": "160959"
  },
  {
    "text": "make all of this work let me sketch a picture of what the environment was that",
    "start": "160959",
    "end": "166920"
  },
  {
    "text": "we were working in when we needed this solution now I was working for a company",
    "start": "166920",
    "end": "174720"
  },
  {
    "text": "that was a huge iot integrator so what we had is this embedded Gateway that was",
    "start": "174720",
    "end": "180959"
  },
  {
    "text": "running on embedded Linux and we had this mechanism of plugging bricks into that not Lego bricks but like bricks was",
    "start": "180959",
    "end": "189200"
  },
  {
    "text": "actually a small print that had a um zero Force insertion socket but that was",
    "start": "189200",
    "end": "195599"
  },
  {
    "text": "actually electrically that was a USB connection and the cool thing is on those USB devices we could have antennas",
    "start": "195599",
    "end": "202840"
  },
  {
    "text": "for different types of iot devic so if we had to deal with a different frequency or a different protocol our",
    "start": "202840",
    "end": "208959"
  },
  {
    "text": "Hardware designer would build a new break we could plug that in and that allowed us to talk to virtually anything",
    "start": "208959",
    "end": "216200"
  },
  {
    "text": "right and the um the goal of this platform was to have that Gateway inside",
    "start": "216200",
    "end": "222920"
  },
  {
    "text": "a home and that would talk to all of the different iot devices and then we could integrate that in a c uh in a central",
    "start": "222920",
    "end": "230319"
  },
  {
    "text": "platform and from that platform with a with an app you could control your devices check your thermostat all that",
    "start": "230319",
    "end": "236720"
  },
  {
    "text": "sort of stuff and the whole thing was deployed in one big multi-tenant backand so all",
    "start": "236720",
    "end": "243720"
  },
  {
    "text": "of our customers because we usually talk to integrators um so we didn't sell directly to the to the End customer we",
    "start": "243720",
    "end": "250640"
  },
  {
    "text": "usually went through um people who sold iot devices or people like electricity",
    "start": "250640",
    "end": "256560"
  },
  {
    "text": "companies and because for instance in the Netherlands it's very common that the electricity company also installs",
    "start": "256560",
    "end": "262320"
  },
  {
    "text": "your boiler and your termostat and that sort of stuff and they do maintenance on them so we had some monitoring for that",
    "start": "262320",
    "end": "268840"
  },
  {
    "text": "as well and every implementation that we did was a new type of device and in our codebase",
    "start": "268840",
    "end": "275440"
  },
  {
    "text": "that meant that we would often write code to talk to those devices even",
    "start": "275440",
    "end": "280800"
  },
  {
    "text": "before we had a contract with our customer so we were talking with someone like hey can you like control our",
    "start": "280800",
    "end": "287560"
  },
  {
    "text": "devices with your platform as well so we would build a proof of concept and as these things",
    "start": "287560",
    "end": "293919"
  },
  {
    "text": "go um they came all the time so we were basically that was the main job of our team is doing all these um Integrations",
    "start": "293919",
    "end": "301759"
  },
  {
    "text": "but not all of the deals went through in fact only about a quarter of the deals went through which means that three4 of",
    "start": "301759",
    "end": "308560"
  },
  {
    "text": "the devices that we implemented never saw the light of day in production but",
    "start": "308560",
    "end": "315120"
  },
  {
    "text": "our product people had this sun cost fallacy problem in their heads like yeah",
    "start": "315120",
    "end": "321479"
  },
  {
    "text": "but we've invested in this code so we're not going to throw it away right sound",
    "start": "321479",
    "end": "326520"
  },
  {
    "text": "familiar who has had that maintenance health yeah um we've all had that and this was",
    "start": "326520",
    "end": "334600"
  },
  {
    "text": "this led us to think about how we could structure that code a lot better so that",
    "start": "334600",
    "end": "340759"
  },
  {
    "text": "we could basically deal with the situation what we wanted to be able to do is take a wrecking ball to that code",
    "start": "340759",
    "end": "348000"
  },
  {
    "text": "all of that code that never went to production because there was no deal",
    "start": "348000",
    "end": "353319"
  },
  {
    "text": "with the customer the devices were not live that needed to be taken out and if",
    "start": "353319",
    "end": "358840"
  },
  {
    "text": "you would ask my two sons which one of these two you would need they would disagree because they have different",
    "start": "358840",
    "end": "364639"
  },
  {
    "text": "favorite colors but they would both agree that they need one of those and there's this famous coote from Kent",
    "start": "364639",
    "end": "370280"
  },
  {
    "text": "Thompson saying one of my most productive days was throwing away a thousand lines of coat and that is how",
    "start": "370280",
    "end": "377400"
  },
  {
    "text": "we felt all the time we wanted to take a wrecking ball to that Cod and get out",
    "start": "377400",
    "end": "382880"
  },
  {
    "text": "all of those devices that were just getting in the way of refactorings getting in the way of Maintenance um and",
    "start": "382880",
    "end": "389280"
  },
  {
    "text": "that was really frustrating to us so of course we first talked to our product",
    "start": "389280",
    "end": "394520"
  },
  {
    "text": "management and asked them like hey can we just throw away this code and they were not really ready to give up on that",
    "start": "394520",
    "end": "402120"
  },
  {
    "text": "and we were not in a position where we actually could win this argument because the head of product management was also",
    "start": "402120",
    "end": "407880"
  },
  {
    "text": "the CEO of the company so uh he made it very clear that he expected us to keep",
    "start": "407880",
    "end": "413720"
  },
  {
    "text": "all that code around so we figured like is there a way that we can deal with it so it it's not painful to us",
    "start": "413720",
    "end": "420039"
  },
  {
    "text": "but we can still keep that code and resurrect it when we need it and that is what led to the story that I'm going to",
    "start": "420039",
    "end": "426479"
  },
  {
    "text": "tell you today so the dev team what we wanted is we wanted to be able to very quickly",
    "start": "426479",
    "end": "432360"
  },
  {
    "text": "Implement new device types if we saw a new device coming in we basically wanted",
    "start": "432360",
    "end": "437440"
  },
  {
    "text": "to write a quick and dirty implementation for it and then maybe refactor that if the deal went through",
    "start": "437440",
    "end": "444840"
  },
  {
    "text": "and we had to put that in production but what we also wanted is as soon as we got",
    "start": "444840",
    "end": "450479"
  },
  {
    "text": "to a point where the deal did not go true we could just take it out of our deployment and get rid of it like park",
    "start": "450479",
    "end": "457039"
  },
  {
    "text": "it to the side and that meant that we would have to limit our dependencies between our core um platform and all the",
    "start": "457039",
    "end": "465440"
  },
  {
    "text": "dependencies that we had through those uh devices and that led us to make our",
    "start": "465440",
    "end": "470879"
  },
  {
    "text": "abstractions in our codebase a lot cleaner and it made us think about all of those",
    "start": "470879",
    "end": "476720"
  },
  {
    "text": "things so you're probably already thinking in your head like okay hanas you're going to do microservices now if",
    "start": "476720",
    "end": "484039"
  },
  {
    "text": "you have I'm going to park that question for a second um if if you have read my",
    "start": "484039",
    "end": "490400"
  },
  {
    "text": "Twitter tagline you will see that I am a monolith advocate so I don't think",
    "start": "490400",
    "end": "497400"
  },
  {
    "text": "microservices are necessarily the solution to every problem and there is a good reason for that and I've been",
    "start": "497400",
    "end": "504159"
  },
  {
    "text": "coaching Developers for more than a decade now and I've seen a lot of Developers go through the same path and",
    "start": "504159",
    "end": "511960"
  },
  {
    "text": "I'm talking about um I'm coaching net death so let's generalize a little bit",
    "start": "511960",
    "end": "517479"
  },
  {
    "text": "like objectoriented backand developers um first project you do probably ends up",
    "start": "517479",
    "end": "523080"
  },
  {
    "text": "looking like this maybe in college maybe in your free time but what you do is you copy paste some code of the internet you",
    "start": "523080",
    "end": "529720"
  },
  {
    "text": "make it all work uh when you when product management needs new features or you need new features you drag in more",
    "start": "529720",
    "end": "536320"
  },
  {
    "text": "code and it becomes unmaintainable really quickly right we've all had a project like that hopefully you get this",
    "start": "536320",
    "end": "543399"
  },
  {
    "text": "out of the way before somebody is paying you to write code but hey we all do what we got to do",
    "start": "543399",
    "end": "548480"
  },
  {
    "text": "right so when you make this mistake you fail and you learn and you realize I can",
    "start": "548480",
    "end": "554040"
  },
  {
    "text": "never let it get that bad again how can I make sure that I never let it get that",
    "start": "554040",
    "end": "559240"
  },
  {
    "text": "bad again and then we think about layers somebody teaches you about layers and",
    "start": "559240",
    "end": "564279"
  },
  {
    "text": "for those who were in my workshop this week we had this discussion very briefly like layers is still the state of the",
    "start": "564279",
    "end": "569959"
  },
  {
    "text": "industry if you listen to college professors like layered architecture is still something they teach in college",
    "start": "569959",
    "end": "575800"
  },
  {
    "text": "today and what they teach us is like yeah you should have everything clean you have a database at the bottom and a",
    "start": "575800",
    "end": "581440"
  },
  {
    "text": "UI at the top and every layer depends on the next bonus points if you deploy them",
    "start": "581440",
    "end": "587399"
  },
  {
    "text": "separately then you can call them tiers but it will still be a layered architecture and the problem with that",
    "start": "587399",
    "end": "593640"
  },
  {
    "text": "is that change ripples through from the bottom to the top so if you need a",
    "start": "593640",
    "end": "599399"
  },
  {
    "text": "change you're still touching all of the code right and the reason for that is if",
    "start": "599399",
    "end": "604720"
  },
  {
    "text": "you put your architecture this way what you're essentially doing is putting your database in the center of your",
    "start": "604720",
    "end": "611360"
  },
  {
    "text": "architecture because everything points down to the database so every layer",
    "start": "611360",
    "end": "616560"
  },
  {
    "text": "consumes the next if you consume cake you eat all of them at once it's very tasty",
    "start": "616560",
    "end": "622240"
  },
  {
    "text": "so you realize after a while that layers is not the solution to your problem so you learn more somebody tells you about",
    "start": "622240",
    "end": "629519"
  },
  {
    "text": "solid and you think yes this is the solution I'm just going to write solid but what I've seen is a lot of code",
    "start": "629519",
    "end": "635720"
  },
  {
    "text": "bases that still look like this they apply all these patterns I've actually worked in a code base",
    "start": "635720",
    "end": "642639"
  },
  {
    "text": "where all of these got implemented for every single API call and a lot of those classes were",
    "start": "642639",
    "end": "650279"
  },
  {
    "text": "oneline calls to the next that meant that we had a whole bunch of classes",
    "start": "650279",
    "end": "655720"
  },
  {
    "text": "that didn't do anything right that is not what solid is and at some point it clicks and there's always an appropriate",
    "start": "655720",
    "end": "663040"
  },
  {
    "text": "XKCD comic for everything I think Randall Monroe is fantastic if you've never read the W if book you really",
    "start": "663040",
    "end": "669800"
  },
  {
    "text": "should it got me um like spitting my drink a couple of times and my wife was",
    "start": "669800",
    "end": "675040"
  },
  {
    "text": "wondering what I was actually reading um but Sol it at some point it clicks and",
    "start": "675040",
    "end": "680760"
  },
  {
    "text": "for me what made it click was the realization that if you have an",
    "start": "680760",
    "end": "686240"
  },
  {
    "text": "interface it should be owned by its consumer and not by its",
    "start": "686240",
    "end": "691360"
  },
  {
    "text": "implementation because that's the only way that you can predefine the behavior what that you expect from something",
    "start": "691360",
    "end": "698720"
  },
  {
    "text": "instead of first writing some code and then doing extract interface because it will always be something that onetoone",
    "start": "698720",
    "end": "704480"
  },
  {
    "text": "matches your implementation it's not necessarily the best way of thinking about it and that for me made Solid",
    "start": "704480",
    "end": "710959"
  },
  {
    "text": "click into place and that is why I had a title of this talk if you take the Lego",
    "start": "710959",
    "end": "716760"
  },
  {
    "text": "castle on the left and the marble on the right and you have to replace the blue",
    "start": "716760",
    "end": "722519"
  },
  {
    "text": "with the green in both scenarios um on the left that would",
    "start": "722519",
    "end": "727560"
  },
  {
    "text": "actually be really tricky because I'm kind of an so the gray walls go into the two towers on the outside",
    "start": "727560",
    "end": "734720"
  },
  {
    "text": "they're high enough so that you're deconstructing part of the yellow and the red Tower to just put in the green",
    "start": "734720",
    "end": "741480"
  },
  {
    "text": "one you're going to have to tear a whole lot of stuff down and build it back up again and I feel that often when we are",
    "start": "741480",
    "end": "747959"
  },
  {
    "text": "refactoring Cod it feels like that you're touching a whole bunch of stuff just to make the one replacement that",
    "start": "747959",
    "end": "753600"
  },
  {
    "text": "you really want to make now if it if our Cod were more like a jar of marbles we",
    "start": "753600",
    "end": "759639"
  },
  {
    "text": "could just spread them out take all out all the blue ones pour in the green ones and we'd be done right proper solid code",
    "start": "759639",
    "end": "767600"
  },
  {
    "text": "is what looks like the right side it's like Marbles and it makes it a whole lot",
    "start": "767600",
    "end": "772839"
  },
  {
    "text": "easier to refector in a code base where it is easier to remove stuff and put it",
    "start": "772839",
    "end": "778320"
  },
  {
    "text": "back now solid is one thing but you can also do in an architectural level because all",
    "start": "778320",
    "end": "784079"
  },
  {
    "text": "of the things that I've talked about right now is stuff that happens inside a single deployment unit but sometimes",
    "start": "784079",
    "end": "789760"
  },
  {
    "text": "your systems grow and they become more complex and I feel like you should only be messing with",
    "start": "789760",
    "end": "795920"
  },
  {
    "text": "that after you understand what goes on inside a single server and uh service",
    "start": "795920",
    "end": "801079"
  },
  {
    "text": "and how you can make that clean and there are a whole bunch of ways to do",
    "start": "801079",
    "end": "806240"
  },
  {
    "text": "deployments I feel like our industry is Def falling to if you want to have multiple things going on in your",
    "start": "806240",
    "end": "812600"
  },
  {
    "text": "architecture you should be doing microservices there are different ways of dealing with that and as a o def like",
    "start": "812600",
    "end": "820720"
  },
  {
    "text": "when you master all these things I feel like you graduate and you you know what you're doing um as a senior",
    "start": "820720",
    "end": "828399"
  },
  {
    "text": "right so let's get back to my parked question um we parked that question",
    "start": "828399",
    "end": "833639"
  },
  {
    "text": "about microservices now our problem the",
    "start": "833639",
    "end": "838759"
  },
  {
    "text": "problem was our team wasn't at step five yet we had a lot of Juniors um we had a",
    "start": "838759",
    "end": "846040"
  },
  {
    "text": "lot of people that were actually um on boarding and leaving the team we had a lot of uh churn and it made it really",
    "start": "846040",
    "end": "853320"
  },
  {
    "text": "hard and I stole this image from Martin Fowler um and it's true microservices",
    "start": "853320",
    "end": "860720"
  },
  {
    "text": "are a fantastic solution to a set of problems and once you get those problems",
    "start": "860720",
    "end": "868079"
  },
  {
    "text": "there's literally almost no other way out especially when I think about having",
    "start": "868079",
    "end": "875959"
  },
  {
    "text": "multiple teams working on the same product at some point you will have too many teams and you can no longer get",
    "start": "875959",
    "end": "882160"
  },
  {
    "text": "away with a monolit you'll probably end up cutting it up into Services if you need different technology Stacks to",
    "start": "882160",
    "end": "888880"
  },
  {
    "text": "implement your Solution that's a technical reason to do microservices but also if you need to",
    "start": "888880",
    "end": "895199"
  },
  {
    "text": "scale certain parts independently at some point you may need microservices but our team wasn't there",
    "start": "895199",
    "end": "903079"
  },
  {
    "text": "yet our code base looked a little bit like that it wasn't as bad as the worst I've",
    "start": "903079",
    "end": "908199"
  },
  {
    "text": "seen um and we already had a little bit of distribution going on because it was already cut up into um how we call it it",
    "start": "908199",
    "end": "917720"
  },
  {
    "text": "was basically a distributed monolith because it was all writing to the same",
    "start": "917720",
    "end": "923240"
  },
  {
    "text": "database but they were different Services we made our lives really hard um and I think the first rule that we",
    "start": "923240",
    "end": "929240"
  },
  {
    "text": "need to take away from this um I'm paraphrasing here because I really like the Fight Club movie um but as long as",
    "start": "929240",
    "end": "937920"
  },
  {
    "text": "you can get away with not Distributing your Software System you're probably going to be happier for it and since we",
    "start": "937920",
    "end": "945720"
  },
  {
    "text": "were a single team working on this like shipping it as a Monet actually made kind of",
    "start": "945720",
    "end": "951399"
  },
  {
    "text": "sense now if I would have to make a quote about this never solve a code",
    "start": "951399",
    "end": "957880"
  },
  {
    "text": "Problem by introducing deployment problem because you will run into the wall right um it's usually not a",
    "start": "957880",
    "end": "964720"
  },
  {
    "text": "solution to something that you cannot solve um on an atomic scale inside a",
    "start": "964720",
    "end": "971040"
  },
  {
    "text": "single surface so the challenges that we were faced with is what we actually want and",
    "start": "971040",
    "end": "977120"
  },
  {
    "text": "now we're going to get to the technical side our monolith was an asp.net",
    "start": "977120",
    "end": "982880"
  },
  {
    "text": "application we had a rest API that was the entry point into everything that our backend did and and what we wanted to do",
    "start": "982880",
    "end": "990040"
  },
  {
    "text": "is for every device that we added to our backend for new controller methods to",
    "start": "990040",
    "end": "995079"
  },
  {
    "text": "appear we also wanted them to extend existing controller methods the existing",
    "start": "995079",
    "end": "1001480"
  },
  {
    "text": "controller methods had to do different stuff depended uh depending on what we post to certain apis if we would post",
    "start": "1001480",
    "end": "1009680"
  },
  {
    "text": "something for a specific thermostat maybe would we would have to run some custom code but we didn't want to have",
    "start": "1009680",
    "end": "1016440"
  },
  {
    "text": "different thermostat apis for every different AR stat that we supported there there was a central functionality",
    "start": "1016440",
    "end": "1023319"
  },
  {
    "text": "as well and of course all of that had to write to a certain database and we",
    "start": "1023319",
    "end": "1028798"
  },
  {
    "text": "needed to migrate that database and the best way of getting me to do something",
    "start": "1028799",
    "end": "1034558"
  },
  {
    "text": "is tell me that it's impossible and it's funny before we started a talk we were talking about Entity framework one of",
    "start": "1034559",
    "end": "1040199"
  },
  {
    "text": "our devs told me like Entity framework can never do that um you you're never going to make it work and of course that",
    "start": "1040199",
    "end": "1047160"
  },
  {
    "text": "triggers me and I I'll try to do that so we figured that with plugins we could",
    "start": "1047160",
    "end": "1053000"
  },
  {
    "text": "get all the things that we wanted have a single deployment unit plug-in",
    "start": "1053000",
    "end": "1058039"
  },
  {
    "text": "assemblies with extra functionality that would enable all the things that we wanted to do so we built a successful",
    "start": "1058039",
    "end": "1065120"
  },
  {
    "text": "proof of concept but this is a while ago this was net 4.7 times um with um at",
    "start": "1065120",
    "end": "1073440"
  },
  {
    "text": "that time I think web API 2 or three um and we started doing this but it",
    "start": "1073440",
    "end": "1080440"
  },
  {
    "text": "wouldn't be interesting today because a lot of the complexity that we had ran into at that time has now been solved in",
    "start": "1080440",
    "end": "1088240"
  },
  {
    "text": "net core so this is where my story will divert from what we actually did into",
    "start": "1088240",
    "end": "1093640"
  },
  {
    "text": "how would you do it today in the modern. net stack and the first thing I want to",
    "start": "1093640",
    "end": "1100000"
  },
  {
    "text": "tell you about is onion architecture and there's many different names for onion architecture um the the term onion",
    "start": "1100000",
    "end": "1107039"
  },
  {
    "text": "architecture comes from Jeff poo um he used that in 2008 you may notice that",
    "start": "1107039",
    "end": "1113600"
  },
  {
    "text": "this is before the clean architecture book was written um but you may have heard of it as hexagon architecture",
    "start": "1113600",
    "end": "1120720"
  },
  {
    "text": "ports and adapters clean architecture all these things are very similar they're not exactly the same but very",
    "start": "1120720",
    "end": "1126320"
  },
  {
    "text": "very similar to one another and the thing that they have in common remember that I told you that layered",
    "start": "1126320",
    "end": "1133039"
  },
  {
    "text": "architecture is basically putting your database in the center of your architecture all these all these",
    "start": "1133039",
    "end": "1139440"
  },
  {
    "text": "architectures are basically putting your domain code at the center of your architecture and that makes way more",
    "start": "1139440",
    "end": "1146200"
  },
  {
    "text": "sense because if you need to change something in an application your domain is the most important bit it should be",
    "start": "1146200",
    "end": "1152120"
  },
  {
    "text": "in control of all the things so all of these architectures focus on two things like shielding all",
    "start": "1152120",
    "end": "1159080"
  },
  {
    "text": "your dependencies with abstraction and having very nice isolated domain so that",
    "start": "1159080",
    "end": "1164240"
  },
  {
    "text": "you can very easily test it now how it looks like the way that Jeffrey",
    "start": "1164240",
    "end": "1169400"
  },
  {
    "text": "um showed it in his articles um from 2008 is you put your domain model and",
    "start": "1169400",
    "end": "1176120"
  },
  {
    "text": "that's mainly your entities at the center and around that you write your core um your core uh your core domain",
    "start": "1176120",
    "end": "1184360"
  },
  {
    "text": "services that is your core domain Logic the stuff that doesn't change as use",
    "start": "1184360",
    "end": "1190080"
  },
  {
    "text": "cases change the stuff that doesn't change when um you change your UI or",
    "start": "1190080",
    "end": "1195880"
  },
  {
    "text": "your persistence layer and all of your reference only point in so every layer",
    "start": "1195880",
    "end": "1200960"
  },
  {
    "text": "from the outside can reference the domain model but the domain model can't have any",
    "start": "1200960",
    "end": "1206600"
  },
  {
    "text": "references I'll possibly make exceptions for things like a daytime Library like",
    "start": "1206600",
    "end": "1211799"
  },
  {
    "text": "NOA time um but like that should be kind of reference free it should be a bare",
    "start": "1211799",
    "end": "1217799"
  },
  {
    "text": "class library with nothing in it well code but no dependencies and then around the domain",
    "start": "1217799",
    "end": "1224000"
  },
  {
    "text": "Services you're going to write your application services and those are your use cases very similar to uh clean",
    "start": "1224000",
    "end": "1229960"
  },
  {
    "text": "architecture where uh the basically the center two layers are like combined into",
    "start": "1229960",
    "end": "1236480"
  },
  {
    "text": "one and then around that all of your other stuff is Integrations because what",
    "start": "1236480",
    "end": "1241919"
  },
  {
    "text": "you'll do is in your application Services you're going to define the interfaces that allow the outside to",
    "start": "1241919",
    "end": "1248000"
  },
  {
    "text": "talk to your model and then you will Implement them from the outside layers",
    "start": "1248000",
    "end": "1253240"
  },
  {
    "text": "so when you talk to your file system or your database or even a nugat package",
    "start": "1253240",
    "end": "1258760"
  },
  {
    "text": "what you do is you implement an interface that was defined in your core and that way you Shield your",
    "start": "1258760",
    "end": "1264039"
  },
  {
    "text": "implementation from your domain and remember that I said what made Solid click for me was that interfaces are",
    "start": "1264039",
    "end": "1271279"
  },
  {
    "text": "owned by their consumer that's exactly what this architecture forces you to do",
    "start": "1271279",
    "end": "1276720"
  },
  {
    "text": "because before you do an implementation even of your your database repositories you're forced to think about what",
    "start": "1276720",
    "end": "1282559"
  },
  {
    "text": "interface do I want to be implementing here so that it works for my domain model so this forces you in the",
    "start": "1282559",
    "end": "1289520"
  },
  {
    "text": "Direction now the benefits to me of doing this is that there's no",
    "start": "1289520",
    "end": "1294640"
  },
  {
    "text": "dependencies that can actually leak into your core and all your dependencies",
    "start": "1294640",
    "end": "1300120"
  },
  {
    "text": "become very replaceable think about our marbles we can very easily take something that is in that outer layer",
    "start": "1300120",
    "end": "1307120"
  },
  {
    "text": "write a new implementation for the same interface and be sure that all of our",
    "start": "1307120",
    "end": "1312480"
  },
  {
    "text": "essential code our domain code still works right so it forces you in the right way",
    "start": "1312480",
    "end": "1320679"
  },
  {
    "text": "now if we look at testing also that story becomes quite straightforward because your domain",
    "start": "1320679",
    "end": "1327279"
  },
  {
    "text": "model and your uh use cases don't have any dependencies writing tests can often",
    "start": "1327279",
    "end": "1332840"
  },
  {
    "text": "even done be done without mocking anything because you have very um predictable behaviors sometimes you have",
    "start": "1332840",
    "end": "1340200"
  },
  {
    "text": "to mock some infrastructure stuff but even that is all going to be hidden behind very clear interfaces that are a",
    "start": "1340200",
    "end": "1346760"
  },
  {
    "text": "lot easier to mock because what is the problem if you do a rightclick extract",
    "start": "1346760",
    "end": "1352120"
  },
  {
    "text": "interface is that you get a very complex one that is not that fun to mock when you're doing unit tests all of your ex",
    "start": "1352120",
    "end": "1360240"
  },
  {
    "text": "uh your integration tests go against your infrastructure layer and the cool thing there is that they will not",
    "start": "1360240",
    "end": "1365919"
  },
  {
    "text": "require you to do anything with your domain model because you have an",
    "start": "1365919",
    "end": "1371039"
  },
  {
    "text": "interface to what you want this dependency to do write something to a database writing an integration test for",
    "start": "1371039",
    "end": "1377720"
  },
  {
    "text": "something that lives there is actually very straightforward and obviously you can do UI and acceptance tests for your user",
    "start": "1377720",
    "end": "1384760"
  },
  {
    "text": "interface everything nicely points in and it's easy to test now sometimes you need weird stuff",
    "start": "1384760",
    "end": "1392640"
  },
  {
    "text": "and I'm going to use this as an example like you at some point you need a DI container in the story to tie some stuff",
    "start": "1392640",
    "end": "1398600"
  },
  {
    "text": "together and if you want to implement a service locator because you need it in your domain code and why we need it I'll",
    "start": "1398600",
    "end": "1404520"
  },
  {
    "text": "show you that in a minute um if you need something like that what you're going to think about is what do I expect from my",
    "start": "1404520",
    "end": "1411400"
  },
  {
    "text": "di container and you write that contract in your core and then you look at",
    "start": "1411400",
    "end": "1417120"
  },
  {
    "text": "available packages on the market we used out ofac for instance at the time and then writing an implementation that",
    "start": "1417120",
    "end": "1423760"
  },
  {
    "text": "consumes outo fact and out ofac and implements those very few",
    "start": "1423760",
    "end": "1429120"
  },
  {
    "text": "functionalities that you require from a DI container is actually not that hard to do it's going to be pretty",
    "start": "1429120",
    "end": "1435799"
  },
  {
    "text": "straightforward and that is how you do all your integration uh Integrations from packages is you think about what",
    "start": "1435799",
    "end": "1443559"
  },
  {
    "text": "you expect from it in your core and then you write those Integrations and that is how you can consume all kinds of",
    "start": "1443559",
    "end": "1449840"
  },
  {
    "text": "libraries but keep them out of your domain code um so when we do this it limits the",
    "start": "1449840",
    "end": "1457000"
  },
  {
    "text": "contact surface between your packages and um the way that your code consumes",
    "start": "1457000",
    "end": "1463440"
  },
  {
    "text": "them and that is often the tricky thing if we drag nougat packages into our solution and we just leave them exposed",
    "start": "1463440",
    "end": "1471640"
  },
  {
    "text": "that means that every Dev is going to use them in their own way they're all going to um use different",
    "start": "1471640",
    "end": "1477520"
  },
  {
    "text": "functionalities effectively making them impossible to replace right so that's the kind of",
    "start": "1477520",
    "end": "1483320"
  },
  {
    "text": "stuff that we need to think about so when we think about our Integrations this way we will have happy developers",
    "start": "1483320",
    "end": "1489600"
  },
  {
    "text": "sitting in the wood anxious that their laptop is going to die because they don't have a power outlet right I don't",
    "start": "1489600",
    "end": "1495440"
  },
  {
    "text": "know who makes these kind of stock photos doesn't make sense in my brain I get anxious when I see that man",
    "start": "1495440",
    "end": "1502799"
  },
  {
    "text": "um but we can make stuff not leak into our core and all of our tests are easy to",
    "start": "1502799",
    "end": "1510159"
  },
  {
    "text": "write all of our Integrations are easy to write and it makes our life as developer in the long run so much",
    "start": "1510159",
    "end": "1517720"
  },
  {
    "text": "easier so let's talk about plugins and we're living in an age where we're all",
    "start": "1517720",
    "end": "1523919"
  },
  {
    "text": "plugging in our car who here is is driving full electric already",
    "start": "1523919",
    "end": "1528960"
  },
  {
    "text": "ready yeah range xiy a thing for you not",
    "start": "1528960",
    "end": "1534000"
  },
  {
    "text": "really is it now you get used really easily I feel like range anxiety is something that people who don't drive",
    "start": "1534000",
    "end": "1540640"
  },
  {
    "text": "electrics invented to mock the people who drive electric uh I have zero R range anxiety",
    "start": "1540640",
    "end": "1548440"
  },
  {
    "text": "about driving electric I think it's great fun um now plugins what we wanted",
    "start": "1548440",
    "end": "1555080"
  },
  {
    "text": "is we wanted to have a way to plug our new device implementations into our core",
    "start": "1555080",
    "end": "1561200"
  },
  {
    "text": "and deploy them along with our application and we wanted to make them as easy to develop as humanly possible",
    "start": "1561200",
    "end": "1569159"
  },
  {
    "text": "and they had to seamlessly expand our core functionality as I said we wanted",
    "start": "1569159",
    "end": "1574279"
  },
  {
    "text": "to maybe run run some custom code when certain Central apis were called on a",
    "start": "1574279",
    "end": "1580520"
  },
  {
    "text": "device type that required some extra steps and the cool thing is what we",
    "start": "1580520",
    "end": "1586799"
  },
  {
    "text": "really wanted is we take the assembly and put it in our deployment pipeline then that will enable everything and if",
    "start": "1586799",
    "end": "1592600"
  },
  {
    "text": "we remove it again all of the functionality is gone that way it would allow us to write new implementations",
    "start": "1592600",
    "end": "1599159"
  },
  {
    "text": "quick and dirty and refector them if we had a deal with the customer that meant that we could not",
    "start": "1599159",
    "end": "1605200"
  },
  {
    "text": "have any references in our core to all of our device types they had to point in",
    "start": "1605200",
    "end": "1610799"
  },
  {
    "text": "basically blowing up that onion architecture ideology to a bigger",
    "start": "1610799",
    "end": "1616520"
  },
  {
    "text": "architectural idea as well as well and that works really well we wanted to have",
    "start": "1616520",
    "end": "1622240"
  },
  {
    "text": "some rules great movie by the way um the plugins could only reference our",
    "start": "1622240",
    "end": "1629399"
  },
  {
    "text": "core because that's the only way we could make it work and we did a whole bunch of stuff by convention because",
    "start": "1629399",
    "end": "1636640"
  },
  {
    "text": "well we were in control of the entire solution not just the core but also the plugins so we could get away with a lot",
    "start": "1636640",
    "end": "1642559"
  },
  {
    "text": "of convention stuff if somebody else is writing your plugins you may have to code a little bit more defensively than",
    "start": "1642559",
    "end": "1648600"
  },
  {
    "text": "we did and we should just be able to deploy them and they should not break anything",
    "start": "1648600",
    "end": "1656240"
  },
  {
    "text": "when we remove them and that turned out to be a little bit trickier back in the day nowadays it's actually gotten a lot",
    "start": "1656240",
    "end": "1662960"
  },
  {
    "text": "easier so let's dive into the code and see what we need and the application",
    "start": "1662960",
    "end": "1668039"
  },
  {
    "text": "that we'll be building today is a toy collector we're going to be collecting toys and we're going to start with Lego",
    "start": "1668039",
    "end": "1674159"
  },
  {
    "text": "and with marbles um but we're we might collect any arbitrary type of",
    "start": "1674159",
    "end": "1680440"
  },
  {
    "text": "toy so I'm going to walk through these six things and hopefully that will be",
    "start": "1680440",
    "end": "1685600"
  },
  {
    "text": "before the end of the hour so I can let you go and have some coffee uh but these are the things that we struggled with a",
    "start": "1685600",
    "end": "1691720"
  },
  {
    "text": "little bit when we were implementing all of this so I'm going to walk you through how you solve those problems and it has",
    "start": "1691720",
    "end": "1697880"
  },
  {
    "text": "gotten so much easier in modern versions of done that so dealing with our di",
    "start": "1697880",
    "end": "1703799"
  },
  {
    "text": "container was the first thing because we needed to scan all of the plugins at",
    "start": "1703799",
    "end": "1710120"
  },
  {
    "text": "startup which meant that we needed to use some reflection to find some service locating code inside our plugins to find",
    "start": "1710120",
    "end": "1719080"
  },
  {
    "text": "all the new services that we implemented in each plugin when the application would start we made type registar in",
    "start": "1719080",
    "end": "1726720"
  },
  {
    "text": "every uh assembly that we wanted to be scanned um and that actually worked really well for us now where it became",
    "start": "1726720",
    "end": "1734360"
  },
  {
    "text": "painful is because your startup project in your e doesn't have a dependency a",
    "start": "1734360",
    "end": "1741960"
  },
  {
    "text": "project dependency to your plugin that meant that your plugin wouldn't automatically built when you would start",
    "start": "1741960",
    "end": "1749320"
  },
  {
    "text": "up your application now there's a couple of ways to solve this um we did it with",
    "start": "1749320",
    "end": "1755279"
  },
  {
    "text": "copy post build uh copy the plugin in the post build actions that worked you",
    "start": "1755279",
    "end": "1761039"
  },
  {
    "text": "can also make a development startup project that calls your startup project",
    "start": "1761039",
    "end": "1766240"
  },
  {
    "text": "and has all your plugins in it and that is probably the easiest way to get around 10 and nowadays when you start up",
    "start": "1766240",
    "end": "1774039"
  },
  {
    "text": "um asp.net applications basically what you're calling is the host Builder you can call that from another startup",
    "start": "1774039",
    "end": "1780640"
  },
  {
    "text": "project and solve it like that and that's the way that is the easiest way to get your development environment to do what you need it to do now our type",
    "start": "1780640",
    "end": "1788480"
  },
  {
    "text": "regist what we did is we just had a wrapper around um the service um",
    "start": "1788480",
    "end": "1794679"
  },
  {
    "text": "collection in net and that repper just allowed us again that is an interface",
    "start": "1794679",
    "end": "1799840"
  },
  {
    "text": "that we defined about around what we expected from our di container um with",
    "start": "1799840",
    "end": "1804880"
  },
  {
    "text": "that type registration container we could just uh register all of our",
    "start": "1804880",
    "end": "1811039"
  },
  {
    "text": "types sorry so what that led us to do is we",
    "start": "1811039",
    "end": "1816919"
  },
  {
    "text": "had type register uh type register that we could run in every single assembly",
    "start": "1816919",
    "end": "1824960"
  },
  {
    "text": "that we would scan and all it would do is would register all the services that",
    "start": "1824960",
    "end": "1830000"
  },
  {
    "text": "we had in that very simple class now as.net was another tricky",
    "start": "1830000",
    "end": "1836600"
  },
  {
    "text": "thing and remember we wrote this in Old um asp.net times if you want to add more",
    "start": "1836600",
    "end": "1843799"
  },
  {
    "text": "controllers to a running application um that used to be very",
    "start": "1843799",
    "end": "1849279"
  },
  {
    "text": "tricky you had to write a custom uh controller locator you had to uh find",
    "start": "1849279",
    "end": "1855039"
  },
  {
    "text": "your views in a different way now what you can do is you can basically add um",
    "start": "1855039",
    "end": "1861720"
  },
  {
    "text": "other dlls in um asbet core and you can for that you can use even the compiled",
    "start": "1861720",
    "end": "1868320"
  },
  {
    "text": "uh razor assembly parts to get razor views from other assemblies as well so",
    "start": "1868320",
    "end": "1874440"
  },
  {
    "text": "all you need to do at startup is basically run code that looks a little bit like this where we do application",
    "start": "1874440",
    "end": "1881720"
  },
  {
    "text": "parts. add and then you can add controllers from other projects into your running ASB container and all you",
    "start": "1881720",
    "end": "1889039"
  },
  {
    "text": "have to just make sure that the routes don't Collide but apart from that it's all fine so just calling this little bit",
    "start": "1889039",
    "end": "1896440"
  },
  {
    "text": "of code solves that problem in modern uh C in Old C you had to write a whole",
    "start": "1896440",
    "end": "1902720"
  },
  {
    "text": "bunch of code it was possible to do it we did it but it was so it's so much easier today so what we do is we just",
    "start": "1902720",
    "end": "1910039"
  },
  {
    "text": "scan all of our plugin DLS and if they have asp.net in into it we just call",
    "start": "1910039",
    "end": "1915639"
  },
  {
    "text": "them in this way",
    "start": "1915639",
    "end": "1919840"
  },
  {
    "text": "now also fun I feel like I have a flashback to the beginning of the uh of the week one of the things you're",
    "start": "1920799",
    "end": "1927320"
  },
  {
    "text": "inevitably going to have to deal with is polymorphic deserialization I see like yes it's",
    "start": "1927320",
    "end": "1933960"
  },
  {
    "text": "nodding it was in the workshop a polymorphic deserialization is you are able to post polymorphic types to an API",
    "start": "1933960",
    "end": "1943399"
  },
  {
    "text": "endpoint let's say that we post a toy to one of our controllers but in the back end we want to either",
    "start": "1943399",
    "end": "1949760"
  },
  {
    "text": "process it as a Lego set or a marble that means that our serializer has to",
    "start": "1949760",
    "end": "1955360"
  },
  {
    "text": "somehow understand what I'm posting and in XML days this was really easy because",
    "start": "1955360",
    "end": "1960760"
  },
  {
    "text": "we had opening and closing tags so we could just say hey I have a Lego set",
    "start": "1960760",
    "end": "1965840"
  },
  {
    "text": "here and all of these properties until we're done is a Lego set and your serializer would just pick up those task",
    "start": "1965840",
    "end": "1971519"
  },
  {
    "text": "uh those tax and you would be done now in Jason well if I'm I'm posting to an endpoint",
    "start": "1971519",
    "end": "1979279"
  },
  {
    "text": "that accepts a toy how am I going to know that this is a toy that this is a",
    "start": "1979279",
    "end": "1985559"
  },
  {
    "text": "Lego set and not just a toy and what most serializers will do by",
    "start": "1985559",
    "end": "1990880"
  },
  {
    "text": "default is drop all the properties that are not in the toy Base Class so you're",
    "start": "1990880",
    "end": "1996519"
  },
  {
    "text": "going to have to work with that and if you've used Newton soft Jason before you could do this type name handling Auto",
    "start": "1996519",
    "end": "2005639"
  },
  {
    "text": "right who has used that before yeah okay like I'm going to make you",
    "start": "2005639",
    "end": "2011799"
  },
  {
    "text": "really anxious about this um this is a huge injection risk if somewhere in your",
    "start": "2011799",
    "end": "2019279"
  },
  {
    "text": "API contract you have something that either accepts object or dynamic you can",
    "start": "2019279",
    "end": "2024760"
  },
  {
    "text": "this exposes fullon remote code execution on your apis because you can use that to create file handles write to",
    "start": "2024760",
    "end": "2032679"
  },
  {
    "text": "that file execute it whatever you want because you can instantiate any arbitrary class um Through The NET",
    "start": "2032679",
    "end": "2040080"
  },
  {
    "text": "Framework so there's a reason that this didn't get ported from newtonsoft Chason",
    "start": "2040080",
    "end": "2046480"
  },
  {
    "text": "to system text Chas and because James Newton King is working on that and this didn't get ported for a reason so what",
    "start": "2046480",
    "end": "2052878"
  },
  {
    "text": "we do now what this allows you to do for those who haven't used it is you have a dollar type attribute that you can post",
    "start": "2052879",
    "end": "2059320"
  },
  {
    "text": "into any class that will just tell you like you can deserialize this as and",
    "start": "2059320",
    "end": "2064480"
  },
  {
    "text": "then you pass in the fully qualified um class name now this is not good so let's do a",
    "start": "2064480",
    "end": "2072280"
  },
  {
    "text": "proper way you can write very much of the same behavior but if you write a",
    "start": "2072280",
    "end": "2077679"
  },
  {
    "text": "proper chasing converter you can basically limit um which types something",
    "start": "2077679",
    "end": "2084280"
  },
  {
    "text": "can be deserialized as and and thus protecting against set injection attack",
    "start": "2084280",
    "end": "2089960"
  },
  {
    "text": "and we can still use the string values and what we can basically achieve if we write our own is that we also no longer",
    "start": "2089960",
    "end": "2096638"
  },
  {
    "text": "need the fully qualified class names we can use something shorter something cleaner that is easier to consume right",
    "start": "2096639",
    "end": "2104240"
  },
  {
    "text": "um now you register it in your startup code and once we're done with writing",
    "start": "2104240",
    "end": "2110359"
  },
  {
    "text": "our own custom um chasing converters what we can just do is dollar type Lego",
    "start": "2110359",
    "end": "2115599"
  },
  {
    "text": "set much cleaner much easier to integrate with and that's the way that we ended up doing",
    "start": "2115599",
    "end": "2122000"
  },
  {
    "text": "that now logic and extension points are another thing and that is actually",
    "start": "2122000",
    "end": "2128400"
  },
  {
    "text": "um one of the easier ones that we needed to do let's say that you have a core API where you want to maybe run some custom",
    "start": "2128400",
    "end": "2135359"
  },
  {
    "text": "code depending on um what got posted because we now have this polymorphic",
    "start": "2135359",
    "end": "2141000"
  },
  {
    "text": "deserialization which means that people can post Lego sets to our toy apis but",
    "start": "2141000",
    "end": "2146520"
  },
  {
    "text": "maybe for Lego we need to run some extra um for that we need to make an interface",
    "start": "2146520",
    "end": "2152800"
  },
  {
    "text": "extension points for the plug-in to actually have some code to run and then",
    "start": "2152800",
    "end": "2158400"
  },
  {
    "text": "we can just Implement that on the plug-in side but for this what we need",
    "start": "2158400",
    "end": "2163800"
  },
  {
    "text": "is a service locator that can um actually resolve code based on runtime",
    "start": "2163800",
    "end": "2170520"
  },
  {
    "text": "types because when you're um when you have your injection happening for instance if you use Constructor",
    "start": "2170520",
    "end": "2176640"
  },
  {
    "text": "injection on an API controller all of that injection will happen before you",
    "start": "2176640",
    "end": "2183000"
  },
  {
    "text": "know the runtime type runtime type of what gets posted to that API right so",
    "start": "2183000",
    "end": "2189400"
  },
  {
    "text": "you're in a little bit of a situation where I'm only going to know the type in a bit and then I'm going to need to",
    "start": "2189400",
    "end": "2195160"
  },
  {
    "text": "resolve code to do it now it turned out to be not that tricky so what we ended",
    "start": "2195160",
    "end": "2201960"
  },
  {
    "text": "up was something like this we had the toy Creator custom logic which is basically the interface that we could",
    "start": "2201960",
    "end": "2208400"
  },
  {
    "text": "use to resolve um the class that is going to execute that extra code then",
    "start": "2208400",
    "end": "2214760"
  },
  {
    "text": "you make a generic version of that the reason that we did it like this is this gives us an execute method that um",
    "start": "2214760",
    "end": "2222520"
  },
  {
    "text": "accepts the super type and it saves us a bunch of reflection code now with that scoped service",
    "start": "2222520",
    "end": "2229119"
  },
  {
    "text": "locator it is basically something that wraps around our di container that allows us to resolve",
    "start": "2229119",
    "end": "2235480"
  },
  {
    "text": "something um resolve something in runtime types so what we get here in our",
    "start": "2235480",
    "end": "2241880"
  },
  {
    "text": "create type and we get into our run custom logic is we can figure out what",
    "start": "2241880",
    "end": "2247000"
  },
  {
    "text": "type of toy are we actually getting here and using that to resolve our implementation of that custom logic and",
    "start": "2247000",
    "end": "2253119"
  },
  {
    "text": "then just execute it right so whenever we needed extension points for custom",
    "start": "2253119",
    "end": "2258920"
  },
  {
    "text": "iot devices this is the approach that we took and only one or two might actually Implement them and for all of the rest",
    "start": "2258920",
    "end": "2265240"
  },
  {
    "text": "is would just do nothing pretty straightforward approach and then n framework um and I'm",
    "start": "2265240",
    "end": "2274040"
  },
  {
    "text": "a bit passionate about n framework I always have been um I wrote A Course on it recently as well um if you're",
    "start": "2274040",
    "end": "2280560"
  },
  {
    "text": "interested Shameless plug you can watch it on dome train um the thing is and",
    "start": "2280560",
    "end": "2287760"
  },
  {
    "text": "framework needs three things to function it needs to know what your classes look like it needs to know what your tables",
    "start": "2287760",
    "end": "2293520"
  },
  {
    "text": "look like and it needs to know how to map between those two things a lot of that happens by convention right but it",
    "start": "2293520",
    "end": "2301079"
  },
  {
    "text": "needs those two TR thing uh those three things if you have been using Ned Frameworks since the early days when we",
    "start": "2301079",
    "end": "2307520"
  },
  {
    "text": "still had those great edmx files you could see those three parts right the storage schema uh definition language",
    "start": "2307520",
    "end": "2314240"
  },
  {
    "text": "and then the the conceptual schema definition language and then the mapping schema um that was always merge conflict",
    "start": "2314240",
    "end": "2321319"
  },
  {
    "text": "hell those those files right who has been there yeah I'm glad that we're rid",
    "start": "2321319",
    "end": "2326640"
  },
  {
    "text": "of it but it's not because those files no longer exist that ND framework doesn't need this info anymore but the",
    "start": "2326640",
    "end": "2332200"
  },
  {
    "text": "cool thing is we can feed a lot of that information at runtime we can ch must do",
    "start": "2332200",
    "end": "2338480"
  },
  {
    "text": "n and this slide is out of date actually um it used to be able uh in N framework",
    "start": "2338480",
    "end": "2345040"
  },
  {
    "text": "core you could only map inheritance in your database in one way basically putting all the fields in a single table",
    "start": "2345040",
    "end": "2351880"
  },
  {
    "text": "and then have a discriminator that told you what type of record it is actually since the last version of n framework",
    "start": "2351880",
    "end": "2358000"
  },
  {
    "text": "core you can also do the other two things that n framework six could do which was put it in Separate Tables or",
    "start": "2358000",
    "end": "2364920"
  },
  {
    "text": "even have only the bottom tables and not the abst uh top table now the problem",
    "start": "2364920",
    "end": "2373240"
  },
  {
    "text": "here is that we used to have a problem when we would fetch data that was",
    "start": "2373240",
    "end": "2378680"
  },
  {
    "text": "created by plugins that were no longer in our system because we would have records in our database that set for",
    "start": "2378680",
    "end": "2386000"
  },
  {
    "text": "instance let's say that I would also collect Matchbox cars um if they were in",
    "start": "2386000",
    "end": "2392000"
  },
  {
    "text": "the database and I remove the magbox plugin and my ntity framework fetches a bunch of data it would see a",
    "start": "2392000",
    "end": "2398079"
  },
  {
    "text": "discriminator that it didn't know what to do with and it would actually crash the code so we had to very consciously",
    "start": "2398079",
    "end": "2403960"
  },
  {
    "text": "only fetch records um and we had to extend n framework to do that now the cool thing with ef core is if you have",
    "start": "2403960",
    "end": "2411240"
  },
  {
    "text": "some kind of inheritance um happening Entity framework automatically already",
    "start": "2411240",
    "end": "2416880"
  },
  {
    "text": "adds a wear clause about the types that it knows about so you're getting this one out of the box for free um but what",
    "start": "2416880",
    "end": "2423880"
  },
  {
    "text": "we needed to do is then feed all these new types into it because our Lego and",
    "start": "2423880",
    "end": "2428960"
  },
  {
    "text": "our marbles they are living in separate assemblies and we're starting up a core project that has no references to them",
    "start": "2428960",
    "end": "2436760"
  },
  {
    "text": "so to make that happen in the on model creating is we just would just inject a",
    "start": "2436760",
    "end": "2442599"
  },
  {
    "text": "whole bunch of um extensions into our DB context and they would just do something",
    "start": "2442599",
    "end": "2449640"
  },
  {
    "text": "like this so we had a very simple interface that would took the Builder in and that Builder obviously because it is",
    "start": "2449640",
    "end": "2456880"
  },
  {
    "text": "domain code it could not have a reference to n framework but the implementations could and there we would",
    "start": "2456880",
    "end": "2463240"
  },
  {
    "text": "tell it about the mapping of all of our different iot types and in our DB",
    "start": "2463240",
    "end": "2468880"
  },
  {
    "text": "context all we needed to do is just scan through the assemblies as they were",
    "start": "2468880",
    "end": "2475480"
  },
  {
    "text": "injected I have about 15 minutes left database migrations is probably the last",
    "start": "2475480",
    "end": "2481880"
  },
  {
    "text": "one that we need to tackle and there we can take two different approaches um and it is also the most",
    "start": "2481880",
    "end": "2488200"
  },
  {
    "text": "messy bit of this entire solution you can basically take a central approach or a distributed",
    "start": "2488200",
    "end": "2495839"
  },
  {
    "text": "approach in a central approach what you would basically do is treat your",
    "start": "2495839",
    "end": "2501800"
  },
  {
    "text": "database migrations as a onetime thing that included all of the plugins so what",
    "start": "2501800",
    "end": "2509440"
  },
  {
    "text": "you would do is you would make a startup project that had all of the plugins and generate your migrations off of 10 if",
    "start": "2509440",
    "end": "2516880"
  },
  {
    "text": "you take take that appro approach you can use any framework core migrations and it will work just",
    "start": "2516880",
    "end": "2522680"
  },
  {
    "text": "fine now the problem with that approach is it's not really clean it has all of",
    "start": "2522680",
    "end": "2527760"
  },
  {
    "text": "the fields for all of the plugins for all eternity in your database and you might not be using a lot of them it also",
    "start": "2527760",
    "end": "2535960"
  },
  {
    "text": "will have um in in certain that has been fixed in recent n framework by the way",
    "start": "2535960",
    "end": "2541440"
  },
  {
    "text": "but it will have require you to deal with uh your migration history table",
    "start": "2541440",
    "end": "2547640"
  },
  {
    "text": "because it used to be so that any framework would actually fetch like the latest migration and check the model",
    "start": "2547640",
    "end": "2554000"
  },
  {
    "text": "that was in there it no longer does that um but it used to check it and it would",
    "start": "2554000",
    "end": "2559520"
  },
  {
    "text": "throw an exception and just stop functioning if the model in your migration table didn't match the model",
    "start": "2559520",
    "end": "2564960"
  },
  {
    "text": "that it had at runtime so that's something that was really painful so what we did with our migrations was just",
    "start": "2564960",
    "end": "2571520"
  },
  {
    "text": "rename the table after our deployment was done and if it didn't find the table it didn't check that was good",
    "start": "2571520",
    "end": "2578040"
  },
  {
    "text": "the other approach which is a lot cleaner cleaner is keep your migrations with your",
    "start": "2578040",
    "end": "2583119"
  },
  {
    "text": "plugins but that has other problems because they're trickier to test if they",
    "start": "2583119",
    "end": "2588480"
  },
  {
    "text": "collide with one another and it also requires you to um do some runtime",
    "start": "2588480",
    "end": "2594680"
  },
  {
    "text": "checks whether all of the migrations have been executed because you might start up a program with new migrations",
    "start": "2594680",
    "end": "2601000"
  },
  {
    "text": "and that they have to all uh with new plugins and that would have to run the migrations",
    "start": "2601000",
    "end": "2607240"
  },
  {
    "text": "now the central migrations were easy we had a central migrations project we",
    "start": "2607240",
    "end": "2613800"
  },
  {
    "text": "could load all of the plugins um and it takes your startup project by default so",
    "start": "2613800",
    "end": "2619520"
  },
  {
    "text": "we could basically get that done in this way you if you've done any the framework",
    "start": "2619520",
    "end": "2624800"
  },
  {
    "text": "core migrations this is what worked now as I said if they're all",
    "start": "2624800",
    "end": "2630079"
  },
  {
    "text": "loaded they don't match distributed migrations you could use something like fluent migrator and this will look very",
    "start": "2630079",
    "end": "2635920"
  },
  {
    "text": "similar to framework core migrations except you're writing them by hand and",
    "start": "2635920",
    "end": "2642720"
  },
  {
    "text": "you have two paths to success here either you do a runtime check um but",
    "start": "2642720",
    "end": "2648520"
  },
  {
    "text": "that requires that your application has the ability to to change your databased schema and again that makes me anxious",
    "start": "2648520",
    "end": "2656400"
  },
  {
    "text": "um or you make sure that when you enable new plugins that that always goes",
    "start": "2656400",
    "end": "2661599"
  },
  {
    "text": "through a pipeline and you run your migrations there and that is probably the better approach",
    "start": "2661599",
    "end": "2667920"
  },
  {
    "text": "but in order for this to work we can no longer rely on nty framework core migrations it's not flexible enough to",
    "start": "2667920",
    "end": "2674119"
  },
  {
    "text": "do that so we do fluent migrator but it looks very similar this is what a",
    "start": "2674119",
    "end": "2680000"
  },
  {
    "text": "certain migration could look like and it's hand coded and it's not really that",
    "start": "2680000",
    "end": "2685319"
  },
  {
    "text": "much harder than writing the SQL code that will create this same table it's a very nice Builder API that lets you",
    "start": "2685319",
    "end": "2692319"
  },
  {
    "text": "create tables modify columns like all that sort of stuff all the stuff that you're actually used to see seeing when",
    "start": "2692319",
    "end": "2698040"
  },
  {
    "text": "you run um n framework core migrations you can find very similar stuff in the",
    "start": "2698040",
    "end": "2703880"
  },
  {
    "text": "fluent migrator API now the cool thing about these is they all have a number at",
    "start": "2703880",
    "end": "2710160"
  },
  {
    "text": "the top the migration number and it doesn't care about what has been executed which migrations come before it",
    "start": "2710160",
    "end": "2716760"
  },
  {
    "text": "or after it or whatever it just scans which ones are already executed and then",
    "start": "2716760",
    "end": "2722480"
  },
  {
    "text": "it scans which migrations it knows about and it will just execute the ones that are not executed yet in",
    "start": "2722480",
    "end": "2729640"
  },
  {
    "text": "order which makes total sense for our scenario because when we're adding a plug-in those migrations might fit in",
    "start": "2729640",
    "end": "2737119"
  },
  {
    "text": "between other migrations that have already been executed and fluent migrator just goes like okay I haven't",
    "start": "2737119",
    "end": "2743200"
  },
  {
    "text": "executed these yet just executes all of them and hopefully you don't have any SQL problems when you do that um and",
    "start": "2743200",
    "end": "2749640"
  },
  {
    "text": "they will just execute and the cool thing about this is you can keep your migrations with your plugins which makes",
    "start": "2749640",
    "end": "2755720"
  },
  {
    "text": "sense in your head as a developer so all you need to realize and",
    "start": "2755720",
    "end": "2762200"
  },
  {
    "text": "that's the only tricky part about uh fluent migrator it has this builder.",
    "start": "2762200",
    "end": "2767440"
  },
  {
    "text": "scan in method uh that scans the assemblies uh that you pass it for",
    "start": "2767440",
    "end": "2774640"
  },
  {
    "text": "migrations um the problem about that is it gives you the impression that you could call that multiple",
    "start": "2774640",
    "end": "2781200"
  },
  {
    "text": "times and you can't you have to pass in all of the assemblies in one go",
    "start": "2781200",
    "end": "2787960"
  },
  {
    "text": "um because if you call it multiple times it just takes the last time that you call it so be aware of that it's the",
    "start": "2787960",
    "end": "2794640"
  },
  {
    "text": "only one thing that is tricky about fluent migrator and what that left us with was",
    "start": "2794640",
    "end": "2801359"
  },
  {
    "text": "an architecture that looked like this we had our core in the center we had our uh",
    "start": "2801359",
    "end": "2807520"
  },
  {
    "text": "database project um referencing the core and our UI our API referencing the core",
    "start": "2807520",
    "end": "2815160"
  },
  {
    "text": "we had a project for of our di wire up that needed to happen our migrations",
    "start": "2815160",
    "end": "2820760"
  },
  {
    "text": "just point at the data project our plugins just point in our test point in",
    "start": "2820760",
    "end": "2825960"
  },
  {
    "text": "everything was nice and clean and we found this so easy to add new",
    "start": "2825960",
    "end": "2832240"
  },
  {
    "text": "plugins and to uh evolve our core as well because it was isolated from",
    "start": "2832240",
    "end": "2837599"
  },
  {
    "text": "everything else so let's wrap things up so you can grab",
    "start": "2837599",
    "end": "2843000"
  },
  {
    "text": "a cup cup of coffee um the key things that I want you to take away from the session is before",
    "start": "2843000",
    "end": "2850319"
  },
  {
    "text": "anything else structure your code make sure that the code inside your single project is easy to deal with and easy to",
    "start": "2850319",
    "end": "2858000"
  },
  {
    "text": "evolve it's the thing that's going to cause your team the most friction in the long run and it's worth investing time",
    "start": "2858000",
    "end": "2865200"
  },
  {
    "text": "in plugins are not really that hard to do but I feel like that message gets",
    "start": "2865200",
    "end": "2870880"
  },
  {
    "text": "lost in our microservice industry um but especially in asp.net for it's almost as",
    "start": "2870880",
    "end": "2878359"
  },
  {
    "text": "if a lot of the stuff that we need to do plugins is already there out of the box",
    "start": "2878359",
    "end": "2883680"
  },
  {
    "text": "you don't really need to write a lot of custom code most of the tricky code I've",
    "start": "2883680",
    "end": "2889200"
  },
  {
    "text": "shown in this presentation and I think I've only had like 10 slides with code on",
    "start": "2889200",
    "end": "2894880"
  },
  {
    "text": "it and never solve your code Problems by introducing deployment problems if",
    "start": "2894880",
    "end": "2901319"
  },
  {
    "text": "you're going to quote me on anything that is the thing you can quote me on I don't mind",
    "start": "2901319",
    "end": "2907480"
  },
  {
    "text": "and don't worry where you are in your journey because I'm still learning I hope that you're all still learning um",
    "start": "2907480",
    "end": "2913839"
  },
  {
    "text": "it's definitely why we're all here at a conference to share experiences this was mine I hope you share yours with me as",
    "start": "2913839",
    "end": "2921040"
  },
  {
    "text": "well now I get a bunch of questions I've been giving this talk for a long time",
    "start": "2921040",
    "end": "2926280"
  },
  {
    "text": "this is the first conference talk ever I wrote back in 2018 and I've compiled a",
    "start": "2926280",
    "end": "2931599"
  },
  {
    "text": "couple of things that people asked me after the talk so I'm going to go through them if you have more questions you can come to talk to me",
    "start": "2931599",
    "end": "2937839"
  },
  {
    "text": "afterwards isn't this a lot harder to code actually we didn't experience this",
    "start": "2937839",
    "end": "2943520"
  },
  {
    "text": "as very tricky um the system that we had before it was way trickier to evolve and",
    "start": "2943520",
    "end": "2950160"
  },
  {
    "text": "it made our life a lot easier to do things this way um can your plugins be onions",
    "start": "2950160",
    "end": "2958599"
  },
  {
    "text": "themselves is a question I had um a couple of times and yes definitely so",
    "start": "2958599",
    "end": "2964119"
  },
  {
    "text": "it's actually what we did our plugins were their own groups of assembly so it wasn't a single dll a plugin was usually",
    "start": "2964119",
    "end": "2970760"
  },
  {
    "text": "a bunch of dlls um but for the sake of this talk that would have been a much",
    "start": "2970760",
    "end": "2975960"
  },
  {
    "text": "harder story to tell but yes you should definitely consider doing that because then every plugin has their own domain",
    "start": "2975960",
    "end": "2981839"
  },
  {
    "text": "code and their own API code and so on around it and also the plugins will be very",
    "start": "2981839",
    "end": "2988440"
  },
  {
    "text": "clean and when should you be doing this well there's a couple of reasons to do",
    "start": "2988440",
    "end": "2993839"
  },
  {
    "text": "this um onion AR architecture I wouldn't see why you",
    "start": "2993839",
    "end": "3000040"
  },
  {
    "text": "wouldn't put your domain code at the center of your architecture I think it makes even the simplest projects a lot",
    "start": "3000040",
    "end": "3007480"
  },
  {
    "text": "easier and it usually doesn't require any um special things that you should be",
    "start": "3007480",
    "end": "3013200"
  },
  {
    "text": "doing the only thing it requires is that you fight your Frameworks a little bit",
    "start": "3013200",
    "end": "3018640"
  },
  {
    "text": "because if you do file new project and asp.net what you get is basically something that points down completely",
    "start": "3018640",
    "end": "3024640"
  },
  {
    "text": "right um so you should think about it but it doesn't really add friction",
    "start": "3024640",
    "end": "3029960"
  },
  {
    "text": "plugins is a different story plugins make sense in a couple of scenarios plugins make sense if you need like our",
    "start": "3029960",
    "end": "3038920"
  },
  {
    "text": "case like modular deployments if you want to enable and disable functionality",
    "start": "3038920",
    "end": "3044319"
  },
  {
    "text": "at will um or if you have customers that have their own deployments that have",
    "start": "3044319",
    "end": "3049960"
  },
  {
    "text": "paid features that you want to be able to enable and disable it's a perfect solution for those things",
    "start": "3049960",
    "end": "3057280"
  },
  {
    "text": "if you want to easily retire and replace stuff you can write a plugin quick and",
    "start": "3057280",
    "end": "3062520"
  },
  {
    "text": "dirty and then replace it with a proper implementation later or entirely replace",
    "start": "3062520",
    "end": "3067880"
  },
  {
    "text": "an imple implementation if you so please you can use that for a testing",
    "start": "3067880",
    "end": "3073520"
  },
  {
    "text": "obviously because you can just write two versions of something and then separately deploy",
    "start": "3073520",
    "end": "3078559"
  },
  {
    "text": "them and it also makes your build pipeline's a bunch smaller because every plug-in can have their own Pipeline and",
    "start": "3078559",
    "end": "3085280"
  },
  {
    "text": "then you have your deployment pip P line that pulls in your artifacts from your other pipelines meaning that you will",
    "start": "3085280",
    "end": "3091000"
  },
  {
    "text": "have less weight time between the time that you write the code and you actually have artifacts that you can work with in your deployment system because you don't",
    "start": "3091000",
    "end": "3098319"
  },
  {
    "text": "have to build the entire system every time if a single plugin changed and you want to deploy that is something that",
    "start": "3098319",
    "end": "3103920"
  },
  {
    "text": "this architecture could easily help you do and then there is the 101 100s Rule",
    "start": "3103920",
    "end": "3109480"
  },
  {
    "text": "and I I call it the 10100 rule but I didn't invent rule the 10100 rule is an",
    "start": "3109480",
    "end": "3115359"
  },
  {
    "text": "idea that I learned at an NDC from udid Dahan from particular and he didn't",
    "start": "3115359",
    "end": "3122599"
  },
  {
    "text": "phrase it as the 10100 rle but what he said is basically what wouldn't it be cool if you as",
    "start": "3122599",
    "end": "3129480"
  },
  {
    "text": "developers could talk to your product people and you don't really fight them",
    "start": "3129480",
    "end": "3134839"
  },
  {
    "text": "on whatever they want but you have an agreement with them that you can write any feature quick and dirty you can just",
    "start": "3134839",
    "end": "3143359"
  },
  {
    "text": "hack it together and put it out there and you put an expiry date on it it's like in two weeks we're going to decide",
    "start": "3143359",
    "end": "3149160"
  },
  {
    "text": "if you want to keep it right and if you keep it that means that we're going to throw it away and then we're going to",
    "start": "3149160",
    "end": "3154720"
  },
  {
    "text": "spend 100% of the effort not 10% of the effort 100% of the effort to do a clean",
    "start": "3154720",
    "end": "3161280"
  },
  {
    "text": "implementation but if you don't keep it we will have have invested only 10% of the time to do the quick and dirty",
    "start": "3161280",
    "end": "3167280"
  },
  {
    "text": "version and we're just going to throw that away the cool thing about this is if you do that what you're able to do is",
    "start": "3167280",
    "end": "3174960"
  },
  {
    "text": "basically try out 10 features keep one and rewrite it",
    "start": "3174960",
    "end": "3180720"
  },
  {
    "text": "properly for the price of only two right and that's our reason for being as",
    "start": "3180720",
    "end": "3188160"
  },
  {
    "text": "software developers we deliver functionality to a business we support something right and I think this is a",
    "start": "3188160",
    "end": "3195319"
  },
  {
    "text": "very efficient way to do it not with a product team that we were working for if they are unable to throw their code away",
    "start": "3195319",
    "end": "3202160"
  },
  {
    "text": "and you canot get them to agree on that deadline where the code will actually",
    "start": "3202160",
    "end": "3207520"
  },
  {
    "text": "expire you're going to be facing maintenance hell again but if you can get them on board",
    "start": "3207520",
    "end": "3214319"
  },
  {
    "text": "with that I find it an extremely productive way of trying out things and",
    "start": "3214319",
    "end": "3220000"
  },
  {
    "text": "only investing real effort in the things that are wor keeping",
    "start": "3220000",
    "end": "3225960"
  },
  {
    "text": "right going to let you have some coffee that was my talk if you have questions",
    "start": "3225960",
    "end": "3231480"
  },
  {
    "text": "come and find me I'm going to clear off stage so the next speaker can uh come and set up thank you so so much for",
    "start": "3231480",
    "end": "3236920"
  },
  {
    "text": "being here enjoy the rest of your NDC London have a very nice day [Applause]",
    "start": "3236920",
    "end": "3244989"
  }
]