[
  {
    "text": "all right everyone thanks for coming to this talk um this is pipeline oriented",
    "start": "5359",
    "end": "13080"
  },
  {
    "text": "programming um and actually I've decided that's actually a too too boring there's",
    "start": "13080",
    "end": "18680"
  },
  {
    "text": "so much more other interesting trendy techy stuff so actually going to do a completely different talk on Quantum",
    "start": "18680",
    "end": "24199"
  },
  {
    "text": "powered chat gbt in the cloud that's much more cool it's much more trendy so no actually if anyone if",
    "start": "24199",
    "end": "30759"
  },
  {
    "text": "you know me you know I'm never going to let you down I'm never going to talk about trendy stuff I'm going to talk",
    "start": "30759",
    "end": "36600"
  },
  {
    "text": "about boring stuff like software design and functional programming and stuff like that so yes I am going to be",
    "start": "36600",
    "end": "42399"
  },
  {
    "text": "talking about pipeline oriented programming so I'm Scott vloan that's me on Twitter and also on Foster",
    "start": "42399",
    "end": "49320"
  },
  {
    "text": "Don um the slides and the code if you want to play with the code it's um I have a git repo and that's linked at my",
    "start": "49320",
    "end": "57039"
  },
  {
    "text": "website fhop forun and profit pipeline I'm going to do code examples in C and F",
    "start": "57039",
    "end": "63879"
  },
  {
    "text": "and um I'll start off in C and as I get more complicated I'm going to move to F and you'll see why and this is this is",
    "start": "63879",
    "end": "71479"
  },
  {
    "text": "not really an FSH lesson you don't need to know anything about F and actually if you're kind of curious about F shop this",
    "start": "71479",
    "end": "76600"
  },
  {
    "text": "is a good a good way to see some code you know I'm actually going to some real code you can see what it looks like in",
    "start": "76600",
    "end": "82560"
  },
  {
    "text": "action so part one what is pipeline oriented programming well let me compare it with",
    "start": "82560",
    "end": "89600"
  },
  {
    "text": "object oriented programming um to show you the difference so object oriented programming you have this kind of",
    "start": "89600",
    "end": "94759"
  },
  {
    "text": "component and you send a request and you get a response so it's a message-based model and inside this component you know",
    "start": "94759",
    "end": "101600"
  },
  {
    "text": "an object will talk to another object which will talk to another object and there's lots of back and forth chatter between these objects and sometimes the",
    "start": "101600",
    "end": "109280"
  },
  {
    "text": "chatter goes both directions like something like the visitor pattern where you're going back and forth so the thing about this is in O arrows go in all",
    "start": "109280",
    "end": "117399"
  },
  {
    "text": "directions this is the main thing that that I want to take away about oo really is going get now people say don't try",
    "start": "117399",
    "end": "123759"
  },
  {
    "text": "and do that but it's it's very easy to do that in oo so in Pine or programming",
    "start": "123759",
    "end": "129360"
  },
  {
    "text": "it's a pipeline right all the arrows go in the same direction you have and it's an input output model so rather than",
    "start": "129360",
    "end": "136000"
  },
  {
    "text": "thinking of request response there's a pipeline something comes in and it goes through the pipeline and it comes out get other side and as it goes through",
    "start": "136000",
    "end": "142599"
  },
  {
    "text": "the pipeline gets transformed in various ways like each of these little individual subcomponents will transform",
    "start": "142599",
    "end": "148200"
  },
  {
    "text": "the data right so if you know Unix style pipes it's exactly the same right you",
    "start": "148200",
    "end": "154080"
  },
  {
    "text": "have a command line and you pipe the data through with First Command second command so on so it's just like Unix",
    "start": "154080",
    "end": "159680"
  },
  {
    "text": "style thing except you can actually apply to all sorts of stuff and not just like command line stuff so for example",
    "start": "159680",
    "end": "165640"
  },
  {
    "text": "you can apply it to a web backend so if you think about it a web back end is an input and output that",
    "start": "165640",
    "end": "171920"
  },
  {
    "text": "something comes in which is the request and something comes out which is the response and you can actually design a",
    "start": "171920",
    "end": "178840"
  },
  {
    "text": "web app us using these pipelines without any kind of O sty at all um there is",
    "start": "178840",
    "end": "184440"
  },
  {
    "text": "obviously branching because you make decisions obviously but the the arrows all go in the same direction and I'm",
    "start": "184440",
    "end": "191120"
  },
  {
    "text": "actually going to show you a demo later on of exactly how to do this and this is a very different way of thinking about",
    "start": "191120",
    "end": "196519"
  },
  {
    "text": "design than you would be if you're doing kind of an O style design so hopefully that'll be interesting to you so what",
    "start": "196519",
    "end": "204040"
  },
  {
    "text": "are the benefits of pipelines I'm going to talk about benefits and then I'm going to do some demos to actually kind",
    "start": "204040",
    "end": "209319"
  },
  {
    "text": "of um you know push them home so first benefit I think is composability so",
    "start": "209319",
    "end": "216200"
  },
  {
    "text": "composability means like Lego where you build bigger things and smaller things I think pipelines actually encourage you",
    "start": "216200",
    "end": "222439"
  },
  {
    "text": "to follow good design principles even more than with oo I think pipelines are",
    "start": "222439",
    "end": "227560"
  },
  {
    "text": "easy to maintain and I think pipelines make testing easier and I think pipelines fit really well with modern",
    "start": "227560",
    "end": "233959"
  },
  {
    "text": "architectures like onion architecture hexagonal architecture clean architecture etc etc right they're",
    "start": "233959",
    "end": "239120"
  },
  {
    "text": "different from the classic enter architectures so let's look at each one of these in turn let's look at",
    "start": "239120",
    "end": "245239"
  },
  {
    "text": "composability first so composability I always like to use Lego as an analogy Lego is a",
    "start": "245239",
    "end": "251760"
  },
  {
    "text": "fantastically composable toy right so here's some Lego and the thing about",
    "start": "251760",
    "end": "257320"
  },
  {
    "text": "Lego is you can take any two pieces of Lego and connect them together to make another piece of Lego right and that's what's so great about it every single",
    "start": "257320",
    "end": "263639"
  },
  {
    "text": "piece has the little bumps on it and you connect them together and the piece that you make still has little bumps on it so",
    "start": "263639",
    "end": "269400"
  },
  {
    "text": "you don't need a special adapter you know to add pieces I could take two of these little toy things and stick them",
    "start": "269400",
    "end": "274880"
  },
  {
    "text": "together to make a a double decker you know so you can keep adding and adding and um making bigger things from a bunch",
    "start": "274880",
    "end": "281160"
  },
  {
    "text": "of smaller things so that's why Lego is such a great thing and that's why pipelines are such a great thing too",
    "start": "281160",
    "end": "286840"
  },
  {
    "text": "because pipelines encourage you to do the same kind of thing they encourage you to build pieces that can be",
    "start": "286840",
    "end": "292840"
  },
  {
    "text": "connected in all sorts of different ways they're not like one use only you can actually design your if you're thinking",
    "start": "292840",
    "end": "298520"
  },
  {
    "text": "in a pipeline oriented way you like how can I build these pieces so they can be connected in different ways like they go",
    "start": "298520",
    "end": "305479"
  },
  {
    "text": "and again with with pipeline stuff you design them so they don't need adapters they can literally normally just be",
    "start": "305479",
    "end": "311360"
  },
  {
    "text": "plugged together straight away and you'll see well how you know what does that actually look like and again hold on a second I will show you in a minute",
    "start": "311360",
    "end": "318360"
  },
  {
    "text": "so you get nice composable components if you do this kind of style and of course you can glue the",
    "start": "318360",
    "end": "324319"
  },
  {
    "text": "small components together to make a bigger component and then encapsulate that by and you then now hiding what's",
    "start": "324319",
    "end": "330360"
  },
  {
    "text": "inside so you still got your encapsulation you now have a you know an input and an output but you don't actually know what's going on inside so",
    "start": "330360",
    "end": "336720"
  },
  {
    "text": "all the all the things of encapsulation and stuff you still get the same benefits of that right number two good design",
    "start": "336720",
    "end": "344639"
  },
  {
    "text": "principles so if you're used to O design patterns and oo principles like solid",
    "start": "344639",
    "end": "350120"
  },
  {
    "text": "and so on these work perfectly with pipeline oriented style design you don't",
    "start": "350120",
    "end": "356520"
  },
  {
    "text": "have to throw them away so let me give you some examples let's look at single responsibility for starters so the whole",
    "start": "356520",
    "end": "362639"
  },
  {
    "text": "point of single responsibility is you do one thing and you do it really well right you don't have a 100 different methods on your interface or your object",
    "start": "362639",
    "end": "369919"
  },
  {
    "text": "right well this has one input and one output you can't get much more single responsibility in that so by definition",
    "start": "369919",
    "end": "377000"
  },
  {
    "text": "if you're writing components like this you automatically have single responsibility you can't you don't have to check it with code of views you",
    "start": "377000",
    "end": "383680"
  },
  {
    "text": "literally can't help it right you're forced to do this way what about open closed so open close you can add new",
    "start": "383680",
    "end": "391520"
  },
  {
    "text": "functionality but you don't mess with existing code your existing code Works don't touch it right so you can add to",
    "start": "391520",
    "end": "397680"
  },
  {
    "text": "that but you don't want to you want to be messing with existing code well if you do a pipeline oriented approach it's",
    "start": "397680",
    "end": "402759"
  },
  {
    "text": "very easy just add new things into the pipeline and the rest of the pipeline you haven't touched right so you can add",
    "start": "402759",
    "end": "409960"
  },
  {
    "text": "it before you can add it after you can add it in the middle all right so you've extended the behavior but you haven't",
    "start": "409960",
    "end": "415440"
  },
  {
    "text": "touched the rest of the codes so the open close principle works really well with pipeline in fact again I think it",
    "start": "415440",
    "end": "421479"
  },
  {
    "text": "it's like it just falls out naturally you don't even have to try it just kind of comes with the territory and I'm",
    "start": "421479",
    "end": "426800"
  },
  {
    "text": "going to show you some examples of this in a minute including one that you're all very familiar with which is link so",
    "start": "426800",
    "end": "432319"
  },
  {
    "text": "I'm going to start with a link example and it'll show you it'll demonstrate this perfectly um strategy pattern right you",
    "start": "432319",
    "end": "438879"
  },
  {
    "text": "want you have some sort of piece of code and you want to parameterize how it works by passing in some sort of strategy well you just pass in a",
    "start": "438879",
    "end": "446360"
  },
  {
    "text": "component right this is my whole pipeline I want the Behavior to change based on something else well I just pass",
    "start": "446360",
    "end": "451759"
  },
  {
    "text": "in a component if I pass in a different component it's going to behave differently but I'm not messing with the",
    "start": "451759",
    "end": "457240"
  },
  {
    "text": "rest the code so that's very easy and decorator pattern again I want to change",
    "start": "457240",
    "end": "462879"
  },
  {
    "text": "I have a component I want to change the behavior let's say I want to log the input and log the output um I can just",
    "start": "462879",
    "end": "468599"
  },
  {
    "text": "add new pieces at either end and then encapsulate that and now I have a new pipeline which has the same inputs and",
    "start": "468599",
    "end": "475319"
  },
  {
    "text": "outputs as the original pipeline so it's completely substitutable everywhere I could use used the original pipeline I",
    "start": "475319",
    "end": "480360"
  },
  {
    "text": "can now use this decorated pipeline right so that's the decorator pattern so all these things are kind of",
    "start": "480360",
    "end": "486639"
  },
  {
    "text": "so obvious you don't really need you know to talk about them just kind of follow from the whole pipeline oriented",
    "start": "486639",
    "end": "492120"
  },
  {
    "text": "way of doing things right what about easy to maintain so this is a bit of a claim because I",
    "start": "492120",
    "end": "498720"
  },
  {
    "text": "don't actually have any evidence but to be honest there's hardly any kind of rigorous evidence for anything in",
    "start": "498720",
    "end": "504479"
  },
  {
    "text": "programming which is sad but um I'm going to claim that the bottom one the pipeline one is easier to maintain than",
    "start": "504479",
    "end": "510159"
  },
  {
    "text": "the top one the objectoriented one um and I think the reason is because",
    "start": "510159",
    "end": "515719"
  },
  {
    "text": "with the o1 you can really get into a mess you know I mean you can have these guidelines like don't do that don't get",
    "start": "515719",
    "end": "521760"
  },
  {
    "text": "into a mess don't have 100 methods don't have it but it's really easy to do it you know especially if you're trying to",
    "start": "521760",
    "end": "527200"
  },
  {
    "text": "some get something out of the door at you know 3:00 in the morning on a Friday whatever so you know with the pipeline",
    "start": "527200",
    "end": "532640"
  },
  {
    "text": "thing it's really hard to it's it's you're less likely to get into the mess in the first place because it just doesn't really support that way of",
    "start": "532640",
    "end": "538440"
  },
  {
    "text": "thinking and here is an example of a a real world dependency graph for a c project you can't see it and this is",
    "start": "538440",
    "end": "545360"
  },
  {
    "text": "actually just a quart of it each of these things is a little class and the",
    "start": "545360",
    "end": "551440"
  },
  {
    "text": "lines are the dependencies between the class and you can't really see them but what I can tell you is that the arrows",
    "start": "551440",
    "end": "556480"
  },
  {
    "text": "in this go in all directions and um you trying to understand how this works this kind of",
    "start": "556480",
    "end": "562240"
  },
  {
    "text": "be quite confusing way and in particular one thing which is really bad is you have these circular dependencies where a",
    "start": "562240",
    "end": "568200"
  },
  {
    "text": "class depends on another class which depends on the third class which depends on the first class and you have some sort of cycle those are deadly they",
    "start": "568200",
    "end": "575399"
  },
  {
    "text": "really shouldn't exist and again you can have guidelines to say don't do that but if you do that then you've broken your",
    "start": "575399",
    "end": "581120"
  },
  {
    "text": "lay you can't refactor these things you can't pull these things out so Cycles are really really deadly and if you're",
    "start": "581120",
    "end": "586880"
  },
  {
    "text": "using C I would recommend using something like end depend or something which will help you detect these things",
    "start": "586880",
    "end": "592320"
  },
  {
    "text": "but definitely don't have them now here's the F version and this is an F version of the same um",
    "start": "592320",
    "end": "599760"
  },
  {
    "text": "logic so it's a lot fewer these are not classes these are modules in f um but",
    "start": "599760",
    "end": "605000"
  },
  {
    "text": "what you can't see really is that all the arrows are going in left to right so if I'm if I'm trying to",
    "start": "605000",
    "end": "611240"
  },
  {
    "text": "understand this code obviously it's quite complex but um again there's no Cycles in this code it's all one way so",
    "start": "611240",
    "end": "617600"
  },
  {
    "text": "that's nice right so two more benefits I talked about which was testing and architecture",
    "start": "617600",
    "end": "624600"
  },
  {
    "text": "I will leave that to the end because I don't want to bore you with too much talking um but at the end of the talk",
    "start": "624600",
    "end": "629720"
  },
  {
    "text": "I'll I'll go back to testing an architecture you see hopefully you'll see that it works really well for this",
    "start": "629720",
    "end": "635000"
  },
  {
    "text": "right so let's actually look at some pipeline oriented code in practice enough enough enough talk here so this",
    "start": "635000",
    "end": "642440"
  },
  {
    "text": "is a for Loop in C and um it's doesn't really it's a very",
    "start": "642440",
    "end": "648120"
  },
  {
    "text": "stupid example but you know trying to figure out what it does it's not 100% easy because there's various things",
    "start": "648120",
    "end": "654600"
  },
  {
    "text": "there's a branch and there's various things going on there's a mutation and so on",
    "start": "654600",
    "end": "659639"
  },
  {
    "text": "now let's look at the same code in link right now I claim that this is",
    "start": "659639",
    "end": "665079"
  },
  {
    "text": "easier to understand than the for Loop right I mean I can just look at this and I can see what's going on now it's not",
    "start": "665079",
    "end": "671480"
  },
  {
    "text": "necessarily as performance the for Loop might be more performant but in terms of just understanding what the code's doing",
    "start": "671480",
    "end": "676880"
  },
  {
    "text": "I think this is easier because I can see that you're you're converting you're adding two to everything and then you're",
    "start": "676880",
    "end": "681920"
  },
  {
    "text": "doing a filter and then you're adding the count you're returning the count I think this is much easier than the full loop thing so link is a great example of",
    "start": "681920",
    "end": "689079"
  },
  {
    "text": "of pipeline oriented programming so if you ever done link you you already know how to do this now let's look at the composability",
    "start": "689079",
    "end": "695959"
  },
  {
    "text": "so in link all the different methods do one thing they do they single responsibility",
    "start": "695959",
    "end": "703200"
  },
  {
    "text": "they do one thing and they do one thing well and they're designed to fit together in different",
    "start": "703200",
    "end": "709800"
  },
  {
    "text": "ways right it's a composable link is a kind of Lego like system you can you can mix and match all the different",
    "start": "709800",
    "end": "715480"
  },
  {
    "text": "components right so that's nice um and so what I'm trying to say is link",
    "start": "715480",
    "end": "721680"
  },
  {
    "text": "is a great example of how you should be writing your code if you can write codes in a way where you can mix and match your components and then connect them",
    "start": "721680",
    "end": "728079"
  },
  {
    "text": "into a pipeline that'll be a it's it's a really nice design there's the single",
    "start": "728079",
    "end": "733720"
  },
  {
    "text": "responsibilties each one of these things does one thing and because of that it's easy to understand what it does once you",
    "start": "733720",
    "end": "739680"
  },
  {
    "text": "understand what this particular method does you know it doesn't do 20 different things it does one thing and it does it well and it's if you're writing this",
    "start": "739680",
    "end": "746639"
  },
  {
    "text": "kind of stuff it's easy to test because I just have to test the thing in isolation and then when I put all these",
    "start": "746639",
    "end": "752920"
  },
  {
    "text": "different pieces together each individual piece has been tested and I can pretty I can be pretty confident",
    "start": "752920",
    "end": "758399"
  },
  {
    "text": "that the whole thing's going to work right I don't have to worry that the whole thing's not going to work even though the individual pieces work like",
    "start": "758399",
    "end": "764560"
  },
  {
    "text": "if if the pieces work you know I still want to do some integration testing sure but I don't I'm not going to worry that it's broken I'm going to be pretty",
    "start": "764560",
    "end": "771079"
  },
  {
    "text": "confident that it's going to work and then of course you can add and remove things from the pipeline I can add",
    "start": "771079",
    "end": "776360"
  },
  {
    "text": "another wear Clause I can add another select clause I can do a sort I can do you know all the different things you",
    "start": "776360",
    "end": "781959"
  },
  {
    "text": "can do with link right there's there's like I know 50 different things you can do so I can I can easily add things to",
    "start": "781959",
    "end": "788800"
  },
  {
    "text": "the pipeline and I'm pretty confident I haven't broken anything now if I was going back to the for Loop and I wanted to add another",
    "start": "788800",
    "end": "795079"
  },
  {
    "text": "filter I would I be confident I haven't broken anything I don't know you know",
    "start": "795079",
    "end": "800199"
  },
  {
    "text": "I'd have to I'd have to be really careful when I change that foret because I might break something but here I'm",
    "start": "800199",
    "end": "805240"
  },
  {
    "text": "very confident if I add a new thing I haven't broken anything so here's the F",
    "start": "805240",
    "end": "810320"
  },
  {
    "text": "code the same kind of thing so F you can use Link in F but link F has its own",
    "start": "810320",
    "end": "816000"
  },
  {
    "text": "built-in collection stuff like this so select is called map in F and where is called filter and in count it's called",
    "start": "816000",
    "end": "822800"
  },
  {
    "text": "length and um this is exactly the same kind of code in F now the thing about f it uses this pipe",
    "start": "822800",
    "end": "829120"
  },
  {
    "text": "operator and in Unix it's a vertical bar and in F it's a vertical bar with an angle",
    "start": "829120",
    "end": "834839"
  },
  {
    "text": "bracket so uh it's not the vertical bar is used for something else right right so it's vertical part angle bracket and",
    "start": "834839",
    "end": "840800"
  },
  {
    "text": "you will see this all the time in F so this means take the list set the the",
    "start": "840800",
    "end": "846040"
  },
  {
    "text": "list collection feed it into the map function and you know add two to then take the output of that feed it into the",
    "start": "846040",
    "end": "851720"
  },
  {
    "text": "filter function take the output of that and feed it into the length function so it's very similar to link these are not",
    "start": "851720",
    "end": "858120"
  },
  {
    "text": "extension methods these are Standalone um Standalone functions so it's slightly",
    "start": "858120",
    "end": "863320"
  },
  {
    "text": "different right now one thing where pipelines are really useful is when you're doing a mut ility right so more",
    "start": "863320",
    "end": "871120"
  },
  {
    "text": "more people using immutability which I think is great I think everything should actually be immutable",
    "start": "871120",
    "end": "876240"
  },
  {
    "text": "um if you you are doing immutability you're probably going to need some sort of pipeline thing and I'll give you an",
    "start": "876240",
    "end": "882079"
  },
  {
    "text": "example let's say I have a a record structure here and you know this is immutable so I want to modify the name",
    "start": "882079",
    "end": "887680"
  },
  {
    "text": "and then I want to modify the email I want to modify the age and so on each time I do that I'm creating a new you",
    "start": "887680",
    "end": "894240"
  },
  {
    "text": "know a new version of the person and it's you know it's quite",
    "start": "894240",
    "end": "899519"
  },
  {
    "text": "common to do this kind of thing and this is really ugly right it's very repetitive it's kind of ugly um let's",
    "start": "899519",
    "end": "905240"
  },
  {
    "text": "not do it let's not do it this is this is kind of I would say ugly code so what's the alternative well you can just",
    "start": "905240",
    "end": "911680"
  },
  {
    "text": "dot them you know do Cascade of dots right so kind of fluent fluent interface would be another way of talking about it",
    "start": "911680",
    "end": "918600"
  },
  {
    "text": "so um fluent interface is another way of doing pipeline same you know same kind",
    "start": "918600",
    "end": "923720"
  },
  {
    "text": "of thing this is much nicer you don't have to have all these variables and stuff so pipeline oriented stuff makes",
    "start": "923720",
    "end": "930199"
  },
  {
    "text": "immutability it's very very common where you have a a chain of functions or methods and you're you're modifying",
    "start": "930199",
    "end": "935319"
  },
  {
    "text": "something as you go through and obviously this is oh de I just got a blue screen sorry about",
    "start": "935319",
    "end": "943399"
  },
  {
    "text": "that I'm just going to restart my computer that is kind of annoying sorry sorry",
    "start": "943399",
    "end": "950360"
  },
  {
    "text": "folks of course that's Murphy's law that would do a blue screen right in the middle of a presentation",
    "start": "951560",
    "end": "960600"
  },
  {
    "text": "wonder what something okay well after just uh talk",
    "start": "968160",
    "end": "975639"
  },
  {
    "text": "among yourselves anyway just so what was I going to say oh yeah mutable data so how many people I'm just curious how many people are using mutable stuff in",
    "start": "975639",
    "end": "982079"
  },
  {
    "text": "their code now a lot of people yeah so presumably you've run into this problem where you have to kind of chain um",
    "start": "982079",
    "end": "988600"
  },
  {
    "text": "actually another good example is link where the the sequences are kind of immutable you know you're making new sequences as you go through the the",
    "start": "988600",
    "end": "995000"
  },
  {
    "text": "pipeline",
    "start": "995000",
    "end": "997480"
  },
  {
    "text": "here just rebooted let see if I",
    "start": "1000279",
    "end": "1006639"
  },
  {
    "text": "can where am I right here we",
    "start": "1017480",
    "end": "1024520"
  },
  {
    "text": "go okay so uh yes this is ugly and this is",
    "start": "1024520",
    "end": "1031678"
  },
  {
    "text": "much nicer and um another thing you might be thinking about is something like link is",
    "start": "1031679",
    "end": "1038038"
  },
  {
    "text": "an extension method right what's the difference between extension methods and piping like in F you use piping and in",
    "start": "1038039",
    "end": "1044160"
  },
  {
    "text": "link use extension methods so I'm going to demonstrate that too um let's say I",
    "start": "1044160",
    "end": "1049360"
  },
  {
    "text": "have two functions right three functions actually and I want to add one and then",
    "start": "1049360",
    "end": "1054440"
  },
  {
    "text": "I want to square it and then I want to double it right so the traditional way would be to use some sort of nested Co",
    "start": "1054440",
    "end": "1059760"
  },
  {
    "text": "like this um I find that kind of sometimes you get really deeply nested and it's kind of ugly right so if I want",
    "start": "1059760",
    "end": "1066120"
  },
  {
    "text": "to make this look nicer I'll use a pipeline right I'm going to use a pipeline so five and then add one and",
    "start": "1066120",
    "end": "1072240"
  },
  {
    "text": "then square and then double that's much easier to see what's going on without all this nesting stuff problem is of",
    "start": "1072240",
    "end": "1077480"
  },
  {
    "text": "course this doesn't work because these things are not extension methods right so I can't do that however there is a",
    "start": "1077480",
    "end": "1083760"
  },
  {
    "text": "trick that I can make these work and the trick is I can make a generic helper",
    "start": "1083760",
    "end": "1090400"
  },
  {
    "text": "that will turn anything into an extension method and that is going to be called pipe right so this is the pipe in",
    "start": "1090400",
    "end": "1097799"
  },
  {
    "text": "C um it's got a lot of generic par it's got two generic parameters um so it's a",
    "start": "1097799",
    "end": "1103280"
  },
  {
    "text": "bit conf it's kind of hard to look at sometimes but basically there's an input here of and that's the input and then",
    "start": "1103280",
    "end": "1110080"
  },
  {
    "text": "the other thing you pass in is a function which has an input and output so it's a one parameter function and all",
    "start": "1110080",
    "end": "1115400"
  },
  {
    "text": "you do is just call the function with the input that's",
    "start": "1115400",
    "end": "1120880"
  },
  {
    "text": "it so that's what pipe is is pretty easy to to go with each step for all the generic stuff now if I use this pipe",
    "start": "1120880",
    "end": "1127440"
  },
  {
    "text": "extension method I can actually go back and rewrite this using piping so um you know I think that's",
    "start": "1127440",
    "end": "1134200"
  },
  {
    "text": "nicer obviously this is a in real life you would never do this for adding and squaring numbers obviously it's way too",
    "start": "1134200",
    "end": "1140000"
  },
  {
    "text": "simple but you can get the idea that you can actually if you had a more complex thing you could actually turn it into a pipeline quite",
    "start": "1140000",
    "end": "1146720"
  },
  {
    "text": "nicely now the problem is this only works for functions with one input so",
    "start": "1146720",
    "end": "1151919"
  },
  {
    "text": "how do I do two input functions well I just have a let's say adding two numbers together or multiplying two numbers",
    "start": "1151919",
    "end": "1158000"
  },
  {
    "text": "together they won't fit into the pipeline right so how do I do that well I just have another overload of pipe and",
    "start": "1158000",
    "end": "1165240"
  },
  {
    "text": "I have an extra parameter now and when I I call the function I pass in the original input and I which is coming",
    "start": "1165240",
    "end": "1171080"
  },
  {
    "text": "down the pipeline and also the extra parameter the second parameter right so that's how you would",
    "start": "1171080",
    "end": "1177440"
  },
  {
    "text": "Implement a two parameter version you can have a three parameter version a four you can have overloads you know as",
    "start": "1177440",
    "end": "1182480"
  },
  {
    "text": "many overloads as you like for this so if I do that overload as well then I can use addition and multiplication in my",
    "start": "1182480",
    "end": "1189720"
  },
  {
    "text": "pipeline by just passing in the extra parameter right so there's my extra",
    "start": "1189720",
    "end": "1195080"
  },
  {
    "text": "parameter and there's me passing in the extra so the fun five is passed down the pipeline as the first parameter and the",
    "start": "1195080",
    "end": "1201919"
  },
  {
    "text": "one is added as the second parameter that's going to be five add one right um",
    "start": "1201919",
    "end": "1207320"
  },
  {
    "text": "and then it's going to be which is going to be what six and then the second one is going to be six and multiply by",
    "start": "1207320",
    "end": "1214600"
  },
  {
    "text": "two so why again in real life you wouldn't do this for simple multiplication but why would you even",
    "start": "1215000",
    "end": "1221200"
  },
  {
    "text": "bother to go to all this trouble of having a special pipeline well again because we can do",
    "start": "1221200",
    "end": "1226559"
  },
  {
    "text": "all this stuff like adding things into the pipeline removing things in the pipeline",
    "start": "1226559",
    "end": "1231640"
  },
  {
    "text": "composing different functions together in different ways right so all the benefits I talk about with the link so",
    "start": "1231640",
    "end": "1237440"
  },
  {
    "text": "this is not link this is adding and multiplying numbers together but now I have a composable version of that if you",
    "start": "1237440",
    "end": "1243440"
  },
  {
    "text": "wanted to have a kind of building blocks for ma from doing mathematics I could do it this way same kind of thing one",
    "start": "1243440",
    "end": "1250480"
  },
  {
    "text": "really nice thing about this also is the diffs look great so if you're doing a code of view and you're seeing what code",
    "start": "1250480",
    "end": "1255799"
  },
  {
    "text": "changed when you're doing pipeline oriented stuff like like this the diffs are really clean it's really I'm just",
    "start": "1255799",
    "end": "1261280"
  },
  {
    "text": "you added something in the middle of it you know or remov something but you always see these really really nice diffs which is not going to be true if",
    "start": "1261280",
    "end": "1267840"
  },
  {
    "text": "I'd gone back to my original like for Loop and I've modified things it would get really it's not obvious really what's going on",
    "start": "1267840",
    "end": "1274120"
  },
  {
    "text": "so just in terms of communicating what's going on pipelines are great so here's",
    "start": "1274120",
    "end": "1279360"
  },
  {
    "text": "the F code for adding and multiplying and squaring and so on again I start with five I feed it into add one I feed",
    "start": "1279360",
    "end": "1286080"
  },
  {
    "text": "it into multiply two and then so and so forth so um f we'll see uses pipelines",
    "start": "1286080",
    "end": "1293400"
  },
  {
    "text": "everywhere so these are not extension methods notice I didn't have to write a special pipe helper in F you get it for",
    "start": "1293400",
    "end": "1300960"
  },
  {
    "text": "free because in f um functions are sort of pipeline compatible out of the box",
    "start": "1300960",
    "end": "1308559"
  },
  {
    "text": "most almost all functions are pipeline compatible so you know sometimes in CSH this is and I'm going to start using F",
    "start": "1308559",
    "end": "1314640"
  },
  {
    "text": "more and more because in C it can get a little bit kind of frustrated ating like using pipe I mean you can see it's it's",
    "start": "1314640",
    "end": "1320720"
  },
  {
    "text": "not really a natural fit for c i me it works sometimes but in F you know it's never going to make you cry about you",
    "start": "1320720",
    "end": "1327039"
  },
  {
    "text": "know not having the right adapter and so on so",
    "start": "1327039",
    "end": "1333480"
  },
  {
    "text": "um thing about extension methods compared to pipelines is you can't use them as",
    "start": "1333480",
    "end": "1339039"
  },
  {
    "text": "parameters so let's say I have a strategy like this I have a list and some sort of strategy function and I'm",
    "start": "1339039",
    "end": "1345880"
  },
  {
    "text": "doing that same kind of Link thing where selecting something and then I'm doing a wear clause and I'm doing my count and",
    "start": "1345880",
    "end": "1352039"
  },
  {
    "text": "in the middle I want to inject my parameterized function maybe I'm going",
    "start": "1352039",
    "end": "1357360"
  },
  {
    "text": "to do a different filter or maybe I'm going to do another select or something I'm going to decide oh the blind it's",
    "start": "1357360",
    "end": "1362760"
  },
  {
    "text": "gone again sorry people I've got another blue",
    "start": "1362760",
    "end": "1367960"
  },
  {
    "text": "screen why is it doing",
    "start": "1367960",
    "end": "1371720"
  },
  {
    "text": "that um I'll try and keep talking while I reboot again of",
    "start": "1375480",
    "end": "1381279"
  },
  {
    "text": "course don't know maybe it just doesn't like this",
    "start": "1381279",
    "end": "1385520"
  },
  {
    "text": "room hopefully there's not too much downtime between the reboots it's like",
    "start": "1387120",
    "end": "1392400"
  },
  {
    "text": "sorry about this okay so um what was I saying about the",
    "start": "1392400",
    "end": "1397520"
  },
  {
    "text": "um uh injecting a parameter um it's hard to",
    "start": "1397520",
    "end": "1403120"
  },
  {
    "text": "do that because these you know the functions that or the methods you inject can't fitted straight into the pipeline",
    "start": "1403120",
    "end": "1410720"
  },
  {
    "text": "so what you can do and if this does this again I'm going",
    "start": "1410720",
    "end": "1415880"
  },
  {
    "text": "to go crazy",
    "start": "1415880",
    "end": "1418799"
  },
  {
    "text": "here just I'm going to just",
    "start": "1421840",
    "end": "1425600"
  },
  {
    "text": "overheating",
    "start": "1436880",
    "end": "1439880"
  },
  {
    "text": "we go so um I was saying that if you if",
    "start": "1451320",
    "end": "1459000"
  },
  {
    "text": "you you can't pass in a strategy function and use it directly in the pipeline but you can um that's not going",
    "start": "1459000",
    "end": "1466960"
  },
  {
    "text": "to work right you you can't just use a function parameter but what you can do is use the pipe helper function to do",
    "start": "1466960",
    "end": "1473240"
  },
  {
    "text": "this now in f here's the same FSH code um with f as I say all functions",
    "start": "1473240",
    "end": "1480919"
  },
  {
    "text": "are kind of automatically pipeline compatible so I don't need the special helper to do this so you can see I'm",
    "start": "1480919",
    "end": "1487399"
  },
  {
    "text": "going to as I get more more into pipeline coding I'm going to do using more more F because it just gets kind of unwieldy with cop so you can do it with",
    "start": "1487399",
    "end": "1494520"
  },
  {
    "text": "cop with extension methods and with um um uh hel helper functions like pipe but",
    "start": "1494520",
    "end": "1502120"
  },
  {
    "text": "um f is like so as I get into more stuff it's going to be more F right so I'm going to do three demos to actually show",
    "start": "1502120",
    "end": "1509000"
  },
  {
    "text": "you some real code I'm going to do pipeline oriented ran numerals pipeline oriented fs buuz and a pipeline oriented",
    "start": "1509000",
    "end": "1517080"
  },
  {
    "text": "web API as I promised now all these are pipeline oriented and one of the things when you do pipelight oriented",
    "start": "1517080",
    "end": "1523360"
  },
  {
    "text": "programming you start designing the solution differently than if you're doing o so each of these is going to",
    "start": "1523360",
    "end": "1529720"
  },
  {
    "text": "have a very different design that you might think of normally right so let's start with Roman",
    "start": "1529720",
    "end": "1535200"
  },
  {
    "text": "numerals so this is something you've probably all played with a bit right you convert five into V and 12 into X11 and",
    "start": "1535200",
    "end": "1541559"
  },
  {
    "text": "so on and so forth right so there's lots of different ways of doing this but I'm going to do a pipeline oriented way and",
    "start": "1541559",
    "end": "1547240"
  },
  {
    "text": "I'm going to Bas this on the fact that I think the Roman nums were originally sort of a tally system where you kind of",
    "start": "1547240",
    "end": "1552320"
  },
  {
    "text": "make a whole bunch of marks on the wall and then you cross them out when you get to five and cross them out when you get to 10 something like that so that's",
    "start": "1552320",
    "end": "1558039"
  },
  {
    "text": "going to be my design I'm going to start with n copies of the letter I so like 42",
    "start": "1558039",
    "end": "1563240"
  },
  {
    "text": "copies of I and then every time I see five I's I'm going to replace it with a V and every time I see four v's two v's",
    "start": "1563240",
    "end": "1570240"
  },
  {
    "text": "I'm going to replace with an X and five x is going to be an l and so on so forth so literally going to do search and",
    "start": "1570240",
    "end": "1575960"
  },
  {
    "text": "replace that's my algorithm so if in a pipeline model this is what it looks like I start by making",
    "start": "1575960",
    "end": "1582520"
  },
  {
    "text": "42 copies of the I and then I just go through each replacement step in turn in the PIP",
    "start": "1582520",
    "end": "1588159"
  },
  {
    "text": "l so that's my that's my algi an algorithm you probably wouldn't come up with if you weren't thinking about pipelines you probably have some sort of",
    "start": "1588159",
    "end": "1594320"
  },
  {
    "text": "for Loop right so here's the C code right I make a string with n copies of",
    "start": "1594320",
    "end": "1600480"
  },
  {
    "text": "it and I do a replace and a replace and a replace and a",
    "start": "1600480",
    "end": "1605559"
  },
  {
    "text": "replace right now you might notice that I haven't done the extra cases like one V there's some special cases like four",
    "start": "1606000",
    "end": "1612559"
  },
  {
    "text": "is actually One V not four ones well we can just add some functionality to our pip line really easy right I can extend",
    "start": "1612559",
    "end": "1619600"
  },
  {
    "text": "the behavior of the pipeline without touching the original code so this is a good example of how I can like oh we got",
    "start": "1619600",
    "end": "1625960"
  },
  {
    "text": "a new feature request we got to add these new special cases oh just add them at the bottom of the pipeline and again",
    "start": "1625960",
    "end": "1631760"
  },
  {
    "text": "your diff is going to look really nice when you do this it's like what have you changed I changed these four",
    "start": "1631760",
    "end": "1637360"
  },
  {
    "text": "lines here's the F version very very similar except I'm using the pipeline instead of using a fluent interface like",
    "start": "1637360",
    "end": "1644200"
  },
  {
    "text": "with a C I'm using the pipeline oriented with the vertical",
    "start": "1644200",
    "end": "1650000"
  },
  {
    "text": "bar let's see if I can do a demo without crashing my computer",
    "start": "1650000",
    "end": "1656159"
  },
  {
    "text": "here whoops and now of course I have to",
    "start": "1656159",
    "end": "1662360"
  },
  {
    "text": "restart visal",
    "start": "1662360",
    "end": "1665120"
  },
  {
    "text": "Studio",
    "start": "1676519",
    "end": "1679519"
  },
  {
    "text": "super duper Speedy if uh all right so here's the C- Cod as I",
    "start": "1701840",
    "end": "1708360"
  },
  {
    "text": "promised and um let's say I want to do some logging right so in the C I can say",
    "start": "1708360",
    "end": "1714200"
  },
  {
    "text": "I can add new features into the middle of the P I can do a log you know I can do a log afterwards um I can do a log at",
    "start": "1714200",
    "end": "1721679"
  },
  {
    "text": "the bottom so in C I'm going to have to do this by having an extension method for strings to do the logging to to keep",
    "start": "1721679",
    "end": "1728600"
  },
  {
    "text": "it fluent um if I do the F code I don't have to do that so let me show you the F",
    "start": "1728600",
    "end": "1735640"
  },
  {
    "text": "code now the nice thing about sharp you can actually run it interactively so I can highlight this",
    "start": "1735640",
    "end": "1741799"
  },
  {
    "text": "code and then actually get the answer so there's the answer XXX so notice I",
    "start": "1741799",
    "end": "1747799"
  },
  {
    "text": "haven't done the special cases so here's the version of the special cases I've just added some extra code at the",
    "start": "1747799",
    "end": "1753840"
  },
  {
    "text": "bottom and now if I do it I get the nice one with the 1X and the XL and so and",
    "start": "1753840",
    "end": "1761080"
  },
  {
    "text": "then here's my logging function so this is a standalone logging function it's not an extension method so I could",
    "start": "1761080",
    "end": "1766480"
  },
  {
    "text": "actually reuse this in many different situations um because all functions are",
    "start": "1766480",
    "end": "1771559"
  },
  {
    "text": "kind of pipeline compatible I can just stick it right into my pipeline so there I'm logging in the",
    "start": "1771559",
    "end": "1777440"
  },
  {
    "text": "middle I'm logging at the thing and let me just uh put this",
    "start": "1777440",
    "end": "1782760"
  },
  {
    "text": "here there we go oops so that's what it says at the",
    "start": "1782760",
    "end": "1788440"
  },
  {
    "text": "start and then before the special Cas is and the end so the logging is working very nicely with the",
    "start": "1788440",
    "end": "1795120"
  },
  {
    "text": "pipeline right now let's talk about",
    "start": "1796320",
    "end": "1801559"
  },
  {
    "text": "fizzbuzz so if you're not familiar with fizzbuzz you're going to write a program",
    "start": "1801559",
    "end": "1806640"
  },
  {
    "text": "that prints numbers from one to n but if it's divisible by three you print Fizz instead of three and for five it's buzz",
    "start": "1806640",
    "end": "1813200"
  },
  {
    "text": "and for 15 it's fiz bar and so on hopefully you will know how this works right so here's a cop example this is a",
    "start": "1813200",
    "end": "1819919"
  },
  {
    "text": "pretty standard implementation right I'm just looping from 1 to 30 and I'm just comparing the different things so um",
    "start": "1819919",
    "end": "1828159"
  },
  {
    "text": "this is great if you're doing a job interview definitely do it this way but we're not going to do it this way because this is too easy we're going to",
    "start": "1828159",
    "end": "1834399"
  },
  {
    "text": "make it more complicated right so no I'm not going to make it more complicated but I am going to make it more",
    "start": "1834399",
    "end": "1839640"
  },
  {
    "text": "composable so the problem with the classic version is I want to add new features to it um this just a monolithic",
    "start": "1839640",
    "end": "1847000"
  },
  {
    "text": "piece of code right so if I need to add seven or something I want to add logging I'm I'm I'm touching all the code I'm",
    "start": "1847000",
    "end": "1853399"
  },
  {
    "text": "not doing the open close thing if I could make it a composable system I could add logging I could add new",
    "start": "1853399",
    "end": "1858919"
  },
  {
    "text": "numbers without touching the existing code so let's do that so the again",
    "start": "1858919",
    "end": "1864000"
  },
  {
    "text": "thinking pipeline how can I make a pipeline oriented version of this well I'm going to handle 15 I'm going to",
    "start": "1864000",
    "end": "1869320"
  },
  {
    "text": "handle three I'm going to handle five and then I'm going to have the final step where nothing's been handled right",
    "start": "1869320",
    "end": "1874799"
  },
  {
    "text": "so this is a pipeline of data flowing through this pipeline now in order to do",
    "start": "1874799",
    "end": "1880039"
  },
  {
    "text": "this let's look at each one of these steps so this number is going to come in",
    "start": "1880039",
    "end": "1885080"
  },
  {
    "text": "but there's actually two different things that going to happen one is I'm not going to handle that number like if it like three then two and seven don't",
    "start": "1885080",
    "end": "1891919"
  },
  {
    "text": "count right I'm just to ignore them on the hand you know if it's three coming in then I might want to put Fizz as the",
    "start": "1891919",
    "end": "1897760"
  },
  {
    "text": "output so I need to handle both these different um outputs possible outputs so",
    "start": "1897760",
    "end": "1902960"
  },
  {
    "text": "the one I'm going to do is create a new data structure specifically for this problem and the nice thing is you can do",
    "start": "1902960",
    "end": "1910000"
  },
  {
    "text": "it in one line of code now normally it's not like a big deal it's like it's just like one line of code just to solve this problem I I think that's price worth",
    "start": "1910000",
    "end": "1916720"
  },
  {
    "text": "paying to get the composability so my Vis data structure down here whoops is",
    "start": "1916720",
    "end": "1922559"
  },
  {
    "text": "going to have a string which is the output and the number that's being passed through now if the string empty",
    "start": "1922559",
    "end": "1928399"
  },
  {
    "text": "if the output string is empty that means I haven't processed it and if the output string is not empty it means I have",
    "start": "1928399",
    "end": "1933519"
  },
  {
    "text": "processed it so there are other ways of doing this but I'm just going to keep it very simple for now so let's how see how we handle",
    "start": "1933519",
    "end": "1940799"
  },
  {
    "text": "something right so I pass in the data structure and it's an extension method because this is cop um the I'm dividing",
    "start": "1940799",
    "end": "1947760"
  },
  {
    "text": "by and the output that I only have fiz or buz whatever so if it's already been processed if it's not empty I'm going to",
    "start": "1947760",
    "end": "1953559"
  },
  {
    "text": "do nothing just return the data if it's not divisible by the thing it's not applicable I'm going to",
    "start": "1953559",
    "end": "1959000"
  },
  {
    "text": "return the thing otherwise I'm going to create a new version of the data structure and put the output in it right so now it's been handled so that's my",
    "start": "1959000",
    "end": "1967639"
  },
  {
    "text": "Handler right now once I have a Handler like this I can chain them together right there's the",
    "start": "1967639",
    "end": "1973840"
  },
  {
    "text": "input and that is the data that's being passed down the pipeline because it's an extension method right that's the first",
    "start": "1973840",
    "end": "1979080"
  },
  {
    "text": "parameter is what is what's being passed through the pipeline so I start off with an empty data structure I handle the 15",
    "start": "1979080",
    "end": "1984840"
  },
  {
    "text": "case I handle the three case I handle the five case and then the final step is basically turn it into if it hasn't been",
    "start": "1984840",
    "end": "1990840"
  },
  {
    "text": "handled turn it into a string so this is my fizzbuzz pipeline implementation now",
    "start": "1990840",
    "end": "1996919"
  },
  {
    "text": "this is probably something you would not normally do if unless you were thinking about",
    "start": "1996919",
    "end": "2002480"
  },
  {
    "text": "pipelines and then finally I can actually do the 1 to 30 I can do that as a pip well I'll start with a numerable",
    "start": "2002760",
    "end": "2008919"
  },
  {
    "text": "and then do a select I'm going to use Link so there's a little mini pipeline in there as well just for fun so that's",
    "start": "2008919",
    "end": "2014360"
  },
  {
    "text": "going to print it out right so let me do a demo and I'm also going to show you how I can do",
    "start": "2014360",
    "end": "2019880"
  },
  {
    "text": "parallelization with um with the pipeline oriented program which is very",
    "start": "2019880",
    "end": "2026440"
  },
  {
    "text": "nice right where is my FB so here's the classic version of fbus in fop same kind",
    "start": "2027120",
    "end": "2033799"
  },
  {
    "text": "of thing as the cop version but let let me show you the the f one so um here is my data",
    "start": "2033799",
    "end": "2042240"
  },
  {
    "text": "structure here's my Handler same it's the same code as the c one right if I if",
    "start": "2042240",
    "end": "2047480"
  },
  {
    "text": "it's empty uh if it's not empty I've already processed it and so on Here's the final step which I didn't show you",
    "start": "2047480",
    "end": "2053480"
  },
  {
    "text": "which basically when turns it into string if it's not been processed here's a little logging thing which I'm going to use later on right so here's my FSB",
    "start": "2053480",
    "end": "2060800"
  },
  {
    "text": "Bar's pipeline right you can see that it's piping each step through the hand handle",
    "start": "2060800",
    "end": "2067240"
  },
  {
    "text": "15 handle three handle five and so on and so and again we want run it with",
    "start": "2067240",
    "end": "2073520"
  },
  {
    "text": "different numbers there we go let's one and see what happens there we go one two Fizz",
    "start": "2073520",
    "end": "2080200"
  },
  {
    "text": "four Buzz six is Fizz 15 is fizzbuzz and so on so forth so it's",
    "start": "2080200",
    "end": "2086560"
  },
  {
    "text": "working right now um let me add some logging and let me add a new Handler so let's let's start with seven so you say",
    "start": "2086560",
    "end": "2094079"
  },
  {
    "text": "well you need to handle seven as well so okay I've got new Fe feature and I don't need to change any",
    "start": "2094079",
    "end": "2100320"
  },
  {
    "text": "of exting code I can just add it so I'm very confident this is going to work if I was doing that for Loop thing I mean f",
    "start": "2100320",
    "end": "2107280"
  },
  {
    "text": "is not that hard right but if it's a more complicated I wouldn't I wouldn't necessarily be confident it's going to",
    "start": "2107280",
    "end": "2112480"
  },
  {
    "text": "work but this I'm very very confident it's going to work so let me do",
    "start": "2112480",
    "end": "2117520"
  },
  {
    "text": "this and where's the answers there we go so I got zap in s zpp in 14 now what I",
    "start": "2117520",
    "end": "2123320"
  },
  {
    "text": "haven't got if it's seven and three I should have Fizz zap but I only got",
    "start": "2123320",
    "end": "2129400"
  },
  {
    "text": "Fizz so I'm not handling the combinations right and you say well that's a that's a that's a problem and",
    "start": "2129400",
    "end": "2135560"
  },
  {
    "text": "I'm going to fix that in a minute so just hold on and then let me add some logging I'm just going to put a log",
    "start": "2135560",
    "end": "2142040"
  },
  {
    "text": "right here log after",
    "start": "2142040",
    "end": "2146680"
  },
  {
    "text": "five and I I can say log after 15 okay so I've got some logging going",
    "start": "2148520",
    "end": "2155800"
  },
  {
    "text": "on I can stick it in the pipeline no problem and",
    "start": "2155800",
    "end": "2161040"
  },
  {
    "text": "now if I look at the output you can see it's leing after 15 um you know so after 15 30 like 30 is",
    "start": "2161040",
    "end": "2171960"
  },
  {
    "text": "outputting f buzz and so on so you can actually see I've got logging going on automatically right now let's talk about",
    "start": "2171960",
    "end": "2177200"
  },
  {
    "text": "this thing where um I want to do it in parallel so um I can handle seven and",
    "start": "2177200",
    "end": "2182520"
  },
  {
    "text": "more complicated things without having to do um uh special cases all the time",
    "start": "2182520",
    "end": "2188720"
  },
  {
    "text": "so what I'm going to do is I'm going to do a parallel version I'm going to pass in a list of",
    "start": "2188720",
    "end": "2195200"
  },
  {
    "text": "handlers and um what I'm going to do is just run each one independently in parallel and then add the results",
    "start": "2195359",
    "end": "2201440"
  },
  {
    "text": "together so I just need this combine operation here and there's my Handler by the way notice I'm doing a",
    "start": "2201440",
    "end": "2209000"
  },
  {
    "text": "map followed by a reduce so if you know about parallel program you know there's a thing called map reduce and here I am",
    "start": "2209000",
    "end": "2215920"
  },
  {
    "text": "actually using it in real code so uh let's do the parallel",
    "start": "2215920",
    "end": "2222160"
  },
  {
    "text": "version so here are I'm getting my Fizz Buzz automatically even though I didn't",
    "start": "2222160",
    "end": "2227480"
  },
  {
    "text": "actually have the fizzbuzz case because it's doing inal and if I add seven again I can just add seven I don't",
    "start": "2227480",
    "end": "2234319"
  },
  {
    "text": "have to like change any other codes and now if I do it in",
    "start": "2234319",
    "end": "2240200"
  },
  {
    "text": "parallel I'm getting uh oops I should it should been zap",
    "start": "2240200",
    "end": "2245599"
  },
  {
    "text": "here",
    "start": "2245599",
    "end": "2248599"
  },
  {
    "text": "right there's that but I'm getting um if I go to 21 I'm getting fiz zap right",
    "start": "2251280",
    "end": "2257640"
  },
  {
    "text": "three and seven and if I go to 35 I'm getting Buzz zap so it's doing the I",
    "start": "2257640",
    "end": "2262720"
  },
  {
    "text": "don't have to have all these special cases anymore because I'm doing in parallel so this is something that you would never think of doing really unless",
    "start": "2262720",
    "end": "2268599"
  },
  {
    "text": "you were thinking about these components like I've got this little Handler and this is a single responsibility thing and once I've got this Handler for one I",
    "start": "2268599",
    "end": "2275319"
  },
  {
    "text": "can compose the the handlers for different numbers together run them in parallel you know combine the results",
    "start": "2275319",
    "end": "2280800"
  },
  {
    "text": "it's a whole different way of thinking about how you might write a program but it all started because I was thinking about composability",
    "start": "2280800",
    "end": "2288240"
  },
  {
    "text": "right now let's finish up with a web API so what does a a component um in a web",
    "start": "2290400",
    "end": "2299079"
  },
  {
    "text": "pipeline look like so I'm going to have a pipeline for my website and it's going to have components which are composed",
    "start": "2299079",
    "end": "2304839"
  },
  {
    "text": "together so how do you even do that right so here's what a web component is",
    "start": "2304839",
    "end": "2309880"
  },
  {
    "text": "going to be it's going to have an input and an output right now the input is going to be called HTTP context which",
    "start": "2309880",
    "end": "2317520"
  },
  {
    "text": "contains the request and the cookies and everything you need to know it's also going to have the response because you",
    "start": "2317520",
    "end": "2323319"
  },
  {
    "text": "might have partially written to the response right so the response is also going to be part of the input for this thing and you might add to the response",
    "start": "2323319",
    "end": "2328839"
  },
  {
    "text": "or replace the response and so on now there's two different cases one case is you've handled it you say oh this is I",
    "start": "2328839",
    "end": "2335160"
  },
  {
    "text": "this is something I can deal with and I'm going to handle it just like fuz and another case is like no this is a",
    "start": "2335160",
    "end": "2340920"
  },
  {
    "text": "situation I don't want to handle so I'm not going to handle it so again there's two different",
    "start": "2340920",
    "end": "2346000"
  },
  {
    "text": "outputs so if you think about if you're used to middleware in in net um asp.net",
    "start": "2346000",
    "end": "2351440"
  },
  {
    "text": "it's kind of like that but I actually think this is easier than the middleware thing because it actually works everywhere you'll see that this works I",
    "start": "2351440",
    "end": "2357599"
  },
  {
    "text": "can build the entire site this way so again going back to the sort of Railway track analogy which I like to use it's",
    "start": "2357599",
    "end": "2363680"
  },
  {
    "text": "like having a branch in your Railway right so either something comes in and I",
    "start": "2363680",
    "end": "2368880"
  },
  {
    "text": "either handle it and return something and by the way it's actually a in practice it's an async that comes back",
    "start": "2368880",
    "end": "2374839"
  },
  {
    "text": "so because you can actually go out and hit the database or something um and then you know if it doesn't handle it it",
    "start": "2374839",
    "end": "2379920"
  },
  {
    "text": "just returns to nor so I got this branching code so let's look at a very simple web",
    "start": "2379920",
    "end": "2385040"
  },
  {
    "text": "component this is called get so all it does is look at the request and see if",
    "start": "2385040",
    "end": "2390560"
  },
  {
    "text": "it's a get verb and if it is I've handled it and if I if it doesn't match",
    "start": "2390560",
    "end": "2395599"
  },
  {
    "text": "the verb I don't handle it that's that's all it does one thing single responsibility all right let's look at",
    "start": "2395599",
    "end": "2401440"
  },
  {
    "text": "another one this one is called roots or routes and it looks at the input and it sees what the root of Route is and if it",
    "start": "2401440",
    "end": "2408839"
  },
  {
    "text": "matches I'm saying yeah I handled it and if it doesn't match I didn't handle it",
    "start": "2408839",
    "end": "2414640"
  },
  {
    "text": "right again single responsibility um here's another one set the status code so all it does is set",
    "start": "2414640",
    "end": "2420400"
  },
  {
    "text": "the St code to something right now this one always going to work because it's just going to replace the response",
    "start": "2420400",
    "end": "2427000"
  },
  {
    "text": "so I have these three different components and I want to glue them together into a pipeline how do I do",
    "start": "2427000",
    "end": "2432160"
  },
  {
    "text": "that right so I have a get followed by a root followed by a set status code well",
    "start": "2432160",
    "end": "2437720"
  },
  {
    "text": "I'm actually not going to tell you well I'm going to show you how to glue them together we're going to use this special kind of pipeline this is not the normal",
    "start": "2437720",
    "end": "2443760"
  },
  {
    "text": "pipeline it's angle bracket equal angle bracket special kind of pipeline for these kinds of things um so I'm not",
    "start": "2443760",
    "end": "2450680"
  },
  {
    "text": "going to really show you how it works but if you've ever played with a toy train set um it looks like this after",
    "start": "2450680",
    "end": "2457560"
  },
  {
    "text": "you've combine them right so if you know how to work with model wellways that's how it works so that's how it works",
    "start": "2457560",
    "end": "2463200"
  },
  {
    "text": "inside it's actually pretty easy but I'm not going to go into it right now let's look at another web components let's",
    "start": "2463200",
    "end": "2468359"
  },
  {
    "text": "look at choose so what choose is is it takes a list a list of web components",
    "start": "2468359",
    "end": "2473920"
  },
  {
    "text": "and each web component can you know return I handle it or I didn't handle it so what choose does is it goes through",
    "start": "2473920",
    "end": "2480040"
  },
  {
    "text": "each one in turn and it finds the first one that handles the input so if you know in this Cas maybe",
    "start": "2480040",
    "end": "2486599"
  },
  {
    "text": "it's the first one now if none of them handle the input the whole the whole choose thing doesn't handle it right so",
    "start": "2486599",
    "end": "2492359"
  },
  {
    "text": "choose itself is one of these things where there's an input and if it's successful",
    "start": "2492359",
    "end": "2498359"
  },
  {
    "text": "it will return an output and if none of them work if none of them match it will return nothing so it itself is another",
    "start": "2498359",
    "end": "2504720"
  },
  {
    "text": "web component so you can see I've built a bigger web component from a bunch of smaller web",
    "start": "2504720",
    "end": "2510200"
  },
  {
    "text": "components so um here's here's an example of a very simple web app so I've got the get combined with the root",
    "start": "2510200",
    "end": "2518319"
  },
  {
    "text": "combined with the okay which is our 200 right so if it matches get and it matches the root then it's going to",
    "start": "2518319",
    "end": "2523920"
  },
  {
    "text": "return okay hello and if it matches get and if it doesn't match the first one is going to fail now if it matches get and",
    "start": "2523920",
    "end": "2531160"
  },
  {
    "text": "it matches the root and it the root is goodbye then it's going to turn out goodbye so if that one succeeds the whole thing will succeed if none of",
    "start": "2531160",
    "end": "2537160"
  },
  {
    "text": "these succeed then the whole choose itself is going to fail right so there's a little very very",
    "start": "2537160",
    "end": "2542880"
  },
  {
    "text": "tiny web app written using pipeline approach right so it's a very different way of",
    "start": "2542880",
    "end": "2548319"
  },
  {
    "text": "writing a a web app that you might normally write so of course because this is a",
    "start": "2548319",
    "end": "2554119"
  },
  {
    "text": "pipeline you get all the benefits of pipelines so I can add a new uh a new pipeline a new thing to my choice right",
    "start": "2554119",
    "end": "2560839"
  },
  {
    "text": "I have a a post if it's a post and the rout is bad it's a bad request and so on and I can do things like checking",
    "start": "2560839",
    "end": "2567720"
  },
  {
    "text": "whether you're logged in uh if you are logged in are you in the right role so all these things I can just have these",
    "start": "2567720",
    "end": "2573200"
  },
  {
    "text": "single responsibility PR uh components that I stick in my pipeline to build my",
    "start": "2573200",
    "end": "2578559"
  },
  {
    "text": "entire web app so each one of these things is very small it does one thing well and they can be tested",
    "start": "2578559",
    "end": "2583880"
  },
  {
    "text": "independently plus I think this is easy to understand if you're if you're looking at my code and you're saying",
    "start": "2583880",
    "end": "2590079"
  },
  {
    "text": "what does it do you can look at this code and say oh yeah well you have to be you have to be it's this you know it's this path and uh you have to be",
    "start": "2590079",
    "end": "2596680"
  },
  {
    "text": "authorized and you have to be an admin you know it's it's a lot easier to understand this code I think than trying",
    "start": "2596680",
    "end": "2602200"
  },
  {
    "text": "to understand some complicated other kind of code so again just like with link all",
    "start": "2602200",
    "end": "2609440"
  },
  {
    "text": "the components are composable they're reusable they're testable in isolation they're single",
    "start": "2609440",
    "end": "2615040"
  },
  {
    "text": "responsibility all the stuff all the good stuff I was talking about this is a real a real world example of it so the",
    "start": "2615040",
    "end": "2620480"
  },
  {
    "text": "Lego model applied to website development now let me actually prove",
    "start": "2620480",
    "end": "2626160"
  },
  {
    "text": "it's not just a a toy thing I'm actually going to do a real app",
    "start": "2626160",
    "end": "2631920"
  },
  {
    "text": "here so this is my program and by the way you can this is actually",
    "start": "2631920",
    "end": "2637800"
  },
  {
    "text": "using um it's it's sitting on top of net there's my this is actually very old version of this is like four years old",
    "start": "2637800",
    "end": "2644640"
  },
  {
    "text": "now so I'm using a a framework called giraffe which is an F framework to do this stuff but you can see it actually",
    "start": "2644640",
    "end": "2651359"
  },
  {
    "text": "it's got a startup function and so on so once you get out of the net stuff",
    "start": "2651359",
    "end": "2657559"
  },
  {
    "text": "um you're into this nice F stuff so here's my thing so get uh if it's hello",
    "start": "2657559",
    "end": "2663720"
  },
  {
    "text": "I'm going to return hello if it's uh a post so I can differentiate between a",
    "start": "2663720",
    "end": "2669160"
  },
  {
    "text": "get and a post if you post a hello it's going to turn post hello if you pass in a parameter like a you know your name",
    "start": "2669160",
    "end": "2675640"
  },
  {
    "text": "it's going to say hello with name so this is a little uh function I wrote myself and all it does is it takes the",
    "start": "2675640",
    "end": "2681440"
  },
  {
    "text": "name parameter and it just spits out the name instead um goodbye all it does is it",
    "start": "2681440",
    "end": "2688880"
  },
  {
    "text": "says goodbye um there's a ping pong Handler let's look at this one um so it",
    "start": "2688880",
    "end": "2694960"
  },
  {
    "text": "says another little choose this component is a choose right so if you if if the input is Ping it's going to",
    "start": "2694960",
    "end": "2700359"
  },
  {
    "text": "return pong and if the input's pong it's going to return ping right uh what the next one Jason so",
    "start": "2700359",
    "end": "2706040"
  },
  {
    "text": "here's a good example little Jason so all I've done is a very little simple data structure and I'm going to serialize it to Jason and to it that's",
    "start": "2706040",
    "end": "2713400"
  },
  {
    "text": "this about as easy as get right what else do we have oh yeah here's a proper database so this is",
    "start": "2713400",
    "end": "2720359"
  },
  {
    "text": "something that loads A customer from the database and I have this is my customer",
    "start": "2720359",
    "end": "2725480"
  },
  {
    "text": "database and um if I let's look at this code this is actually my database but you could",
    "start": "2725480",
    "end": "2731160"
  },
  {
    "text": "imagine real a real database behind the scenes but basically I've got two customers and if it's one or two I",
    "start": "2731160",
    "end": "2737359"
  },
  {
    "text": "return the customer and if it's anything if it's not one or two I've got the customer's not found right so obviously",
    "start": "2737359",
    "end": "2742559"
  },
  {
    "text": "I could replace this with a real async code because all this could work totally with async so that's my my my customer",
    "start": "2742559",
    "end": "2749000"
  },
  {
    "text": "database so what I'm going to do is load the customer from the database and it might exist or it might be an error",
    "start": "2749000",
    "end": "2755240"
  },
  {
    "text": "right so if it is is if it does exist it's going to serialize the customer and return it uh if the customer doesn't",
    "start": "2755240",
    "end": "2762240"
  },
  {
    "text": "exist I'm going to return a 400 and I'm also going to take that error message and return it in the response as well so",
    "start": "2762240",
    "end": "2770240"
  },
  {
    "text": "there's a you know very obviously it's a very simple example but you can see that you can get more complicated stuff going here um how about access denied right so",
    "start": "2770240",
    "end": "2777920"
  },
  {
    "text": "if you go to the denied let's see what that does so denied I'm setting the status code to",
    "start": "2777920",
    "end": "2783520"
  },
  {
    "text": "401 and I'm going to turn this text as well and finally the homepage is just",
    "start": "2783520",
    "end": "2791240"
  },
  {
    "text": "literally going to uh load up a static site a static page and uh show on the",
    "start": "2791240",
    "end": "2797280"
  },
  {
    "text": "screen so let's actually run this see if it",
    "start": "2797280",
    "end": "2803359"
  },
  {
    "text": "works don't want one time thank",
    "start": "2814800",
    "end": "2821838"
  },
  {
    "text": "you right so I've got it my static page just has a bunch of pre-built buttons so I don't have to type all this stuff in",
    "start": "2822119",
    "end": "2828760"
  },
  {
    "text": "so I've got hello right and that just returns hello and there's the post so I've got a",
    "start": "2828760",
    "end": "2836319"
  },
  {
    "text": "post and a get and you can see that returns different things if there's the parameterized version of hello with",
    "start": "2836319",
    "end": "2841640"
  },
  {
    "text": "somebody's name and just to prove it works I could put in somebody else's name in here",
    "start": "2841640",
    "end": "2847079"
  },
  {
    "text": "and it still works fine uh what else do we have here right",
    "start": "2847079",
    "end": "2852400"
  },
  {
    "text": "get goodbye so this is my message don't say goodbye NDC never going to say goodbye going to say hello to",
    "start": "2852400",
    "end": "2859800"
  },
  {
    "text": "NDC right there's ping returns pong and there's pong which",
    "start": "2859800",
    "end": "2866000"
  },
  {
    "text": "returns ping and there's my Jason example right so I had a data structure in F and I",
    "start": "2866000",
    "end": "2872839"
  },
  {
    "text": "just serialized it to Jason and there it is um uh what else do we have oh here's",
    "start": "2872839",
    "end": "2877920"
  },
  {
    "text": "my customers right so there's customer number one partied By Number One",
    "start": "2877920",
    "end": "2883359"
  },
  {
    "text": "customer number two uh and if I put in customer whoops uh another customer which doesn't exist",
    "start": "2883359",
    "end": "2889400"
  },
  {
    "text": "customer 42 doesn't exist that's not found and by the way never write your apis where you're passing in custom IDs",
    "start": "2889400",
    "end": "2896000"
  },
  {
    "text": "that's it's just for demo purposes this is like really bad security right okay",
    "start": "2896000",
    "end": "2901520"
  },
  {
    "text": "what else do we have oh yeah get denied so actually let me open up the uh",
    "start": "2901520",
    "end": "2907359"
  },
  {
    "text": "Network and show you that it really was denied there we go uh you can see over",
    "start": "2907359",
    "end": "2915119"
  },
  {
    "text": "here with look there you go I got a four whoops I got a 401",
    "start": "2915119",
    "end": "2920880"
  },
  {
    "text": "there right so it really did return a 401 and it really did return an access to n",
    "start": "2921520",
    "end": "2928760"
  },
  {
    "text": "message right okay so this is a working website obviously it's pretty simple pretty crude",
    "start": "2930799",
    "end": "2936319"
  },
  {
    "text": "but you know I did some database access I did some Json calization I did some security with access Den KN you know you",
    "start": "2936319",
    "end": "2944240"
  },
  {
    "text": "know you can actually write serious apps now you might think f is that the best",
    "start": "2944240",
    "end": "2949559"
  },
  {
    "text": "thing well it's running on net it's just as performant of C so if you can if you're happy to write a backend in C",
    "start": "2949559",
    "end": "2955160"
  },
  {
    "text": "there's no reason why you can't write a back end in F it's just as performant so and oh and I I can also of",
    "start": "2955160",
    "end": "2963240"
  },
  {
    "text": "course I can put logging in there these all these little pipelines you know I can do all the stuff I can add to the",
    "start": "2963240",
    "end": "2969280"
  },
  {
    "text": "pipeline I can move things I can add logging I can add you know authorization and stuff because it's a",
    "start": "2969280",
    "end": "2975400"
  },
  {
    "text": "pipeline so this is f j so highly encourage you to um check it out if you",
    "start": "2975400",
    "end": "2980720"
  },
  {
    "text": "want so all the code I've shown you is actually on my GitHub um and if you go",
    "start": "2980720",
    "end": "2985760"
  },
  {
    "text": "to the fop for Fun and Profit pipeline there's a link to my GitHub repo so you can download it and play with the code",
    "start": "2985760",
    "end": "2992799"
  },
  {
    "text": "yourself right so let's finish up with talking about testing and architecture so I said at the beginning",
    "start": "2992799",
    "end": "2999160"
  },
  {
    "text": "I think that pipelines encourage good architecture so what do I mean by that",
    "start": "2999160",
    "end": "3004440"
  },
  {
    "text": "well if you think about the modern architectures you know onion and clean and hexagonal and ports and adapters and",
    "start": "3004440",
    "end": "3010040"
  },
  {
    "text": "all those things the difference between them and the old style database Centric",
    "start": "3010040",
    "end": "3015440"
  },
  {
    "text": "ones like an enter classic enter so in classic enter the databases the bottom is the core of the system in the modern",
    "start": "3015440",
    "end": "3021599"
  },
  {
    "text": "architectures the domain is the core of the system and everything else is on the outside the infrastructure and any apis",
    "start": "3021599",
    "end": "3027920"
  },
  {
    "text": "that you're interacting with the database and so on all this is an outside and your core domain is in the middle that's the most important thing",
    "start": "3027920",
    "end": "3034160"
  },
  {
    "text": "right so how does this fit into the pipeline well you write your pipeline the same way you put you have a piece of",
    "start": "3034160",
    "end": "3040559"
  },
  {
    "text": "pipeline which is pure domain logic just business rules and whatever decisions and then anytime you interact with the",
    "start": "3040559",
    "end": "3047000"
  },
  {
    "text": "outside world you do that at the edges of your pipeline so this is very easy um",
    "start": "3047000",
    "end": "3054680"
  },
  {
    "text": "to work with I actually think it's easier than trying to do this o stuff you know if you're using Entity framework or something it's kind of",
    "start": "3054680",
    "end": "3059920"
  },
  {
    "text": "messy but if you're using this kind of pipeline stuff it's really it's kind of natural to put the io",
    "start": "3059920",
    "end": "3066839"
  },
  {
    "text": "outside so the core domain is pure it's very it's deterministic is predictable",
    "start": "3066839",
    "end": "3072760"
  },
  {
    "text": "anything which is unpredictable um anything to do with networks and databases and you know all that stuff is",
    "start": "3072760",
    "end": "3078599"
  },
  {
    "text": "on the outside and the outside of your app so I think it encourages good uh good architecture so here's here's a",
    "start": "3078599",
    "end": "3084960"
  },
  {
    "text": "pipeline with the business Logic the decision making is in the middle right and it's",
    "start": "3084960",
    "end": "3090520"
  },
  {
    "text": "like I say it's really easy to enforce this when I'm looking at the code into if you're doing a code review because you you're not mixing up different",
    "start": "3090520",
    "end": "3096839"
  },
  {
    "text": "things in the same each piece is single responsibility so it's it's really obvious whether it's doing wrong things you know so you classic things is you",
    "start": "3096839",
    "end": "3103680"
  },
  {
    "text": "load some data from the database or you receive some data on the network you process it you know you analyze it you",
    "start": "3103680",
    "end": "3109200"
  },
  {
    "text": "come to a decisions like should I do this should I do that and then based on that you write some more data out of the",
    "start": "3109200",
    "end": "3114400"
  },
  {
    "text": "database or you turn some more data back on the network or whatever so that's a classic obviously",
    "start": "3114400",
    "end": "3120599"
  },
  {
    "text": "you know 99% of business applications literally just follow this model sometimes you have to make multiple",
    "start": "3120599",
    "end": "3126480"
  },
  {
    "text": "decisions that's fine but you in that case I recommend you keep each step separate so you have a decision-making",
    "start": "3126480",
    "end": "3132400"
  },
  {
    "text": "step and an IO step and another decision-making step and another IO step and keep them",
    "start": "3132400",
    "end": "3137920"
  },
  {
    "text": "separate now what about testing why is this easier to test than conventional",
    "start": "3137920",
    "end": "3142960"
  },
  {
    "text": "code well again looking at this thing this bit in the middle doesn't use any",
    "start": "3142960",
    "end": "3148000"
  },
  {
    "text": "IO doesn't so it's completely deterministic right if you have a particular input you'll always get the",
    "start": "3148000",
    "end": "3153720"
  },
  {
    "text": "same output right it's what you call Pure code right the stuff on the edges is not",
    "start": "3153720",
    "end": "3159760"
  },
  {
    "text": "deterministic you every time you load the record from the DAT you might get a different answer so um you know that's",
    "start": "3159760",
    "end": "3167799"
  },
  {
    "text": "very hard to test so but if you design your code this way the testing falls out",
    "start": "3167799",
    "end": "3173240"
  },
  {
    "text": "really easily you do your unit tests on the middle bit and you do your integration tests on the entire",
    "start": "3173240",
    "end": "3178640"
  },
  {
    "text": "pipeline so it just just falls out and by the way a unit test is not a class-based thing a unit is a unit of",
    "start": "3178640",
    "end": "3185440"
  },
  {
    "text": "functionality right you're testing that's what a unit is so don't think of unit test as class based test it's a",
    "start": "3185440",
    "end": "3190599"
  },
  {
    "text": "unit of business logic is what you're testing so here's I'm testing the middle bit and it's very easy because it's like",
    "start": "3190599",
    "end": "3196040"
  },
  {
    "text": "there's no IO it's like completely deterministic this input gives me that output it's really fast to run really",
    "start": "3196040",
    "end": "3201559"
  },
  {
    "text": "easy to write and then you can save the integration tests within the tire p so to finish up why bother with all this",
    "start": "3201559",
    "end": "3209040"
  },
  {
    "text": "pipeline stuff well hopefully you know I said at the beginning and hopefully I'm going to go to to to persuaded you that",
    "start": "3209040",
    "end": "3215480"
  },
  {
    "text": "these things are actually useful I talked about reusable components and you can see especially like with a web app",
    "start": "3215480",
    "end": "3220960"
  },
  {
    "text": "that each of these little individual things are completely reusable I can mix and match build pipelines in complicated",
    "start": "3220960",
    "end": "3226480"
  },
  {
    "text": "ways um I said I think it's more understandable and again if you look at that web app I think I actually think",
    "start": "3226480",
    "end": "3233440"
  },
  {
    "text": "there is a lot more understandable than the classic we about because all the code is like in one all the kind of overview is in one place and all the",
    "start": "3233440",
    "end": "3239960"
  },
  {
    "text": "individual components do their stuff just like with the link the link code was more understandable than a",
    "start": "3239960",
    "end": "3245599"
  },
  {
    "text": "complicated for Loop right so I I definitely think pipelines are easy to understand we talked about extendability",
    "start": "3245599",
    "end": "3251760"
  },
  {
    "text": "you can see it's really easy to add new components I can add new components I can add new features to my pipeline um",
    "start": "3251760",
    "end": "3259240"
  },
  {
    "text": "really easily and I'm not touching any old code so I have very high confidence when I do add a new piece to my pipeline",
    "start": "3259240",
    "end": "3265359"
  },
  {
    "text": "I'm not going to break anything and that to me that's worth a lot um much more testable each of these",
    "start": "3265359",
    "end": "3271280"
  },
  {
    "text": "individual pieces are one single responsibility they can do one thing they're much easier to test in isolation",
    "start": "3271280",
    "end": "3276880"
  },
  {
    "text": "and then when I do combine them I have again I have high confidence that they're going to work as a whole that there's not going to be some weird side",
    "start": "3276880",
    "end": "3283640"
  },
  {
    "text": "effects and interaction between them that I wasn't expecting and finally it's just a different way of thinking I do",
    "start": "3283640",
    "end": "3289760"
  },
  {
    "text": "think that it's different it's good for your brain to learn different ways of thinking and if you've only ever done o",
    "start": "3289760",
    "end": "3295599"
  },
  {
    "text": "I highly recommend you learn other ways of thinking I suggest pipeline oriented functional programming logic programming",
    "start": "3295599",
    "end": "3301920"
  },
  {
    "text": "like prologue stack based programming like fourth is it's really good for your brain to learn these different ways",
    "start": "3301920",
    "end": "3307119"
  },
  {
    "text": "because if you learn these different things you will come up with different solutions like pipeline thinking gave me",
    "start": "3307119",
    "end": "3313400"
  },
  {
    "text": "three different solutions for things you probably would do normally in a very different way you'd probably never write",
    "start": "3313400",
    "end": "3318760"
  },
  {
    "text": "the rumal thing that way you probably never write F buuz that way and you probably never write a web app that way",
    "start": "3318760",
    "end": "3324039"
  },
  {
    "text": "but I think there you know if if you're thinking pipelines you'll start thinking that way about solving your problems so",
    "start": "3324039",
    "end": "3332480"
  },
  {
    "text": "is it going to work in every situation no I'm not claiming this is a universal tool that will help you for everything",
    "start": "3332480",
    "end": "3338400"
  },
  {
    "text": "but I think it's part of your toolkit right every developer should know about databases they should know about o",
    "start": "3338400",
    "end": "3344359"
  },
  {
    "text": "programming they should definitely know about domain Des different design and I think they should know about pipeline",
    "start": "3344359",
    "end": "3349960"
  },
  {
    "text": "programs so it's just a part of your toolkit that you can reach for when you have a particular problem so that's the talk um as I said",
    "start": "3349960",
    "end": "3357200"
  },
  {
    "text": "I'm going to put the slides and the video up on my website so this is f forun and profit Pipeline and also my",
    "start": "3357200",
    "end": "3363319"
  },
  {
    "text": "code is there if you want to run the code for yourself if you like this talk I have other talks I have one on",
    "start": "3363319",
    "end": "3368640"
  },
  {
    "text": "composition and I have one on wellway Ed programming which is where I talk about how you can combine these uh multiple",
    "start": "3368640",
    "end": "3374039"
  },
  {
    "text": "track Railways into a single system it's all about error handling functional error handling so I like that one and",
    "start": "3374039",
    "end": "3379400"
  },
  {
    "text": "then of course I have a book uh domain model made functional and you can find me on Twitter at Lan and I'm also on",
    "start": "3379400",
    "end": "3386520"
  },
  {
    "text": "Foster done with the same handle and uh yeah if you have any questions please",
    "start": "3386520",
    "end": "3391559"
  },
  {
    "text": "contact me there so thanks very much and I'll be here for questions um I'll stick",
    "start": "3391559",
    "end": "3396920"
  },
  {
    "text": "around for a bit if you have if you want to come up and ask me questions so thanks very [Applause]",
    "start": "3396920",
    "end": "3409089"
  },
  {
    "text": "much",
    "start": "3413880",
    "end": "3416880"
  }
]