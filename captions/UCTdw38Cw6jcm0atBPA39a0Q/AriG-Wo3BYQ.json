[
  {
    "text": "okay hi welcome thanks for joining",
    "start": "7220",
    "end": "12300"
  },
  {
    "text": "um let's talk about code smells who recognizes that image over there or",
    "start": "12300",
    "end": "18539"
  },
  {
    "text": "over there from back in the days right when I think Internet Explorer and similar browsers",
    "start": "18539",
    "end": "25380"
  },
  {
    "text": "wouldn't load an image for some reason then this thing would appear",
    "start": "25380",
    "end": "31500"
  },
  {
    "text": "so this is basically an indicator something has gone wrong but we don't know what exactly right",
    "start": "31500",
    "end": "38640"
  },
  {
    "text": "so we will be talking about similar things where we can have a look at the code and something is not right wrong so",
    "start": "38640",
    "end": "44340"
  },
  {
    "text": "these are indicators um short introduction on my site my name is",
    "start": "44340",
    "end": "50820"
  },
  {
    "text": "Anna I'm a software engineer at Circle and",
    "start": "50820",
    "end": "56280"
  },
  {
    "text": "um I'm mostly working embedded but my my history so my first 10 ish years were in",
    "start": "56280",
    "end": "63120"
  },
  {
    "text": "Enterprise development and um I've been learning C plus plus",
    "start": "63120",
    "end": "68220"
  },
  {
    "text": "for close to 20 years right now I say I have been learning because um with all",
    "start": "68220",
    "end": "73799"
  },
  {
    "text": "the new standards and all the stuff here never stop learning I hope",
    "start": "73799",
    "end": "78960"
  },
  {
    "text": "um and I'm a trainer for C plus and for clean code topics like the one we are doing right now",
    "start": "78960",
    "end": "85080"
  },
  {
    "text": "um internally and as a freelancer so what's a code smell so this is a",
    "start": "85080",
    "end": "93180"
  },
  {
    "text": "definition by Martin Fowlers a code smell is a Surface indication that usually corresponds to a deeper problem",
    "start": "93180",
    "end": "98880"
  },
  {
    "text": "in the system so like the image we have just seen that's an indication that something",
    "start": "98880",
    "end": "104460"
  },
  {
    "text": "there's some problem but it's a surface indication",
    "start": "104460",
    "end": "109700"
  },
  {
    "text": "there are a few things here surface indication so the code smell itself is",
    "start": "110100",
    "end": "115619"
  },
  {
    "text": "not the actual problem so we have to look deeper we have to",
    "start": "115619",
    "end": "120720"
  },
  {
    "text": "understand what's what might be the problem behind the smell",
    "start": "120720",
    "end": "125659"
  },
  {
    "text": "um so the deeper problem usually",
    "start": "125880",
    "end": "131099"
  },
  {
    "text": "when I talk about code smells there's violation or there may be a violation of programming principles of design",
    "start": "131099",
    "end": "137580"
  },
  {
    "text": "principles um maybe there are some abstractions that are missing that there are maybe",
    "start": "137580",
    "end": "143879"
  },
  {
    "text": "some idioms we could use so it depends on the code smell and we will see a few examples of code smells",
    "start": "143879",
    "end": "149760"
  },
  {
    "text": "and we will talk a bit about um what the underlying problem might be",
    "start": "149760",
    "end": "156800"
  },
  {
    "text": "and the important part is usually so you can't say okay I found a code smell this is a problem there is definitely a",
    "start": "159420",
    "end": "166260"
  },
  {
    "text": "problem when you have to fix this so seeing a code smart is a good indicator",
    "start": "166260",
    "end": "171300"
  },
  {
    "text": "usually you have to look into it do I need to fix this do I have to fix this",
    "start": "171300",
    "end": "176340"
  },
  {
    "text": "should I fix this in most cases or in many cases the answer is yes but it's not always yes sometimes you try to fix",
    "start": "176340",
    "end": "183780"
  },
  {
    "text": "what's behind it and you see you end up worse so you can roll back and say well we'll just leave it like this it's it's",
    "start": "183780",
    "end": "190379"
  },
  {
    "text": "not that bad",
    "start": "190379",
    "end": "193099"
  },
  {
    "text": "um just a few disclaimers I'm I'll be showing code here",
    "start": "195540",
    "end": "201300"
  },
  {
    "text": "um it's all open source code um I usually have the links in the slides",
    "start": "201300",
    "end": "206420"
  },
  {
    "text": "this by no means should be like a a blame game for the developers who have",
    "start": "206420",
    "end": "212519"
  },
  {
    "text": "written that software right so the software usually works or the software does work",
    "start": "212519",
    "end": "219599"
  },
  {
    "text": "and it is good as it is but we have the smells so there might be improvements",
    "start": "219599",
    "end": "225599"
  },
  {
    "text": "but I think that's the case with any software we write right so we can just spend so much time on the software",
    "start": "225599",
    "end": "231239"
  },
  {
    "text": "there's always room for improvement this does not mean that I think that the code we are seeing here is bad",
    "start": "231239",
    "end": "237659"
  },
  {
    "text": "some examples I would say they are really bad and they should be improved other examples I say well",
    "start": "237659",
    "end": "244080"
  },
  {
    "text": "we can use them like them like they are and it's it's a matter of of priorities what you need",
    "start": "244080",
    "end": "251400"
  },
  {
    "text": "to do with the code base whether you think those code examples should be improved or not",
    "start": "251400",
    "end": "258120"
  },
  {
    "text": "however many offices of the examples I will be showing you are um",
    "start": "258120",
    "end": "264360"
  },
  {
    "text": "not production code but code examples so they're basically documentation and",
    "start": "264360",
    "end": "269880"
  },
  {
    "text": "they should make the reader obvious how code is to be used so there's a few",
    "start": "269880",
    "end": "274979"
  },
  {
    "text": "libraries and their Library usage examples and I think there's usage example should",
    "start": "274979",
    "end": "281160"
  },
  {
    "text": "be really readable because they're meant to teach us how to use those libraries",
    "start": "281160",
    "end": "286380"
  },
  {
    "text": "right so if there's like if those examples get a bit complicated and harder to read then maybe they can be",
    "start": "286380",
    "end": "292259"
  },
  {
    "text": "improved for us to to make it easier for us to actually learn to use this kind of",
    "start": "292259",
    "end": "297300"
  },
  {
    "text": "thing so first example code ssml",
    "start": "297300",
    "end": "303780"
  },
  {
    "text": "is a multimedia Library that has things like controllers for for",
    "start": "303780",
    "end": "310340"
  },
  {
    "text": "the controller drivers lots of like Sprites for for graphic interfaces and",
    "start": "310340",
    "end": "317220"
  },
  {
    "text": "this is an example um where we have a tennis example in earlier versions it was named pong",
    "start": "317220",
    "end": "322979"
  },
  {
    "text": "because it's basically this right here like you have the pedal right and left and you have this ball going back and",
    "start": "322979",
    "end": "328919"
  },
  {
    "text": "forth so relatively simple and they put the whole example the",
    "start": "328919",
    "end": "336900"
  },
  {
    "text": "complete program in a 260 lines main function",
    "start": "336900",
    "end": "342840"
  },
  {
    "text": "so that's the complete program 260 lines one function",
    "start": "342840",
    "end": "348020"
  },
  {
    "text": "um so this first example is an example of a code smell called Long Function",
    "start": "348660",
    "end": "357259"
  },
  {
    "text": "what's bad about having long functions well there are the deeper problems behind",
    "start": "357840",
    "end": "364919"
  },
  {
    "text": "that code smell are that when we have a really long function we usually have a violation of a signal",
    "start": "364919",
    "end": "372960"
  },
  {
    "text": "responsibility principle which says the function or one class should be",
    "start": "372960",
    "end": "378000"
  },
  {
    "text": "irresponsible for one thing and not for everything right so usually in a Long Function not only",
    "start": "378000",
    "end": "385440"
  },
  {
    "text": "in a long main function but in any function that is long um if you have like multiple hundreds",
    "start": "385440",
    "end": "391440"
  },
  {
    "text": "lines even I think Kate yesterday in the in the keynote was talking about thousands of lines if you have that kind",
    "start": "391440",
    "end": "397199"
  },
  {
    "text": "of thing then the function is doing multiple things and another principle that is usually",
    "start": "397199",
    "end": "404819"
  },
  {
    "text": "violated in this kind of function is um it's not only done doing multiple things but on different layer of often",
    "start": "404819",
    "end": "411900"
  },
  {
    "text": "different levels of abstraction so we usually want to be on one level of",
    "start": "411900",
    "end": "416940"
  },
  {
    "text": "abstraction inside a function so we have like these very general overarching functions so main function usually would",
    "start": "416940",
    "end": "423600"
  },
  {
    "text": "like be like yeah set up my playing field run the game show the score that's it",
    "start": "423600",
    "end": "430560"
  },
  {
    "text": "and the details of setting up the playing fields and running the game and so on should be shifted to other",
    "start": "430560",
    "end": "435960"
  },
  {
    "text": "functions that are then on a lower level and we can stack those levels to to multiple levels",
    "start": "435960",
    "end": "441780"
  },
  {
    "text": "and um well the surface indication here for Long Function is as the same as the name",
    "start": "441780",
    "end": "448860"
  },
  {
    "text": "says the function is too long the question is",
    "start": "448860",
    "end": "454380"
  },
  {
    "text": "how long is too long what do you think",
    "start": "454380",
    "end": "459440"
  },
  {
    "text": "it depends largely on the content so um who here has read the clean code book",
    "start": "465720",
    "end": "474800"
  },
  {
    "text": "couple of hands okay the clean code book discusses discusses",
    "start": "474960",
    "end": "480479"
  },
  {
    "text": "this this kind of problem uh functions that are too long and I think there are relatively",
    "start": "480479",
    "end": "488419"
  },
  {
    "text": "restrictive guidelines in there that say well the function should ideally have no more than like three or four lines or",
    "start": "488419",
    "end": "495060"
  },
  {
    "text": "maybe five lines or something like that and depending on what code you write",
    "start": "495060",
    "end": "500460"
  },
  {
    "text": "this can be very restrictive and you have like no other choice but to say okay these are six lines of code I just",
    "start": "500460",
    "end": "506940"
  },
  {
    "text": "like um part one part two I just factor out two functions and then I'm below these three",
    "start": "506940",
    "end": "512159"
  },
  {
    "text": "uh five line limits um that's not a good idea if there's three six lines of code",
    "start": "512159",
    "end": "517380"
  },
  {
    "text": "belong together or if it's ten lines of code that belong together and that are on the same level and any",
    "start": "517380",
    "end": "524399"
  },
  {
    "text": "um breaking up those 10 lines would just be an artificial step that actually",
    "start": "524399",
    "end": "529440"
  },
  {
    "text": "makes it the problem worse because you like have to dig into those different functions to actually get the big the",
    "start": "529440",
    "end": "535260"
  },
  {
    "text": "big picture if those 10 or 50 lines are just okay then it's not a too long function",
    "start": "535260",
    "end": "543000"
  },
  {
    "text": "but there can be functions that have less than 50 lines that are too long",
    "start": "543000",
    "end": "548399"
  },
  {
    "text": "because they just do multiple different things or on different levels of a structure",
    "start": "548399",
    "end": "554580"
  },
  {
    "text": "so um there are these tools like sonar Cube",
    "start": "554580",
    "end": "560399"
  },
  {
    "text": "and and other tools that do static checking and that say okay this function is more than 20 lines of code you have",
    "start": "560399",
    "end": "566339"
  },
  {
    "text": "to break it up and um we have to use our personal judgment to",
    "start": "566339",
    "end": "573000"
  },
  {
    "text": "say if the function is too long if it's not too long like just listening to those queue to those tools is playing to",
    "start": "573000",
    "end": "578760"
  },
  {
    "text": "the numbers right then we will break the function up and say okay it's now it's 15 lines and five lines it's good as it",
    "start": "578760",
    "end": "584940"
  },
  {
    "text": "is if there's 15 lines or those five lines are still breaking the single",
    "start": "584940",
    "end": "590160"
  },
  {
    "text": "responsibility rule or the the multiple single level of abstraction then even",
    "start": "590160",
    "end": "595260"
  },
  {
    "text": "those 15 lines all those five lines can be too long so 20 lines can be perfectly okay it's a judgment call",
    "start": "595260",
    "end": "602519"
  },
  {
    "text": "so one other indicator that I had on the previous side um is that usually those functions or",
    "start": "602519",
    "end": "609899"
  },
  {
    "text": "very often those functions are like broken into those different blocks of code with a blank line between them",
    "start": "609899",
    "end": "617160"
  },
  {
    "text": "and the comment what the next block is doing right who is he who has seen this kind of code",
    "start": "617160",
    "end": "624740"
  },
  {
    "text": "lots of people okay so um going back to Kate's talk which is",
    "start": "624920",
    "end": "630959"
  },
  {
    "text": "really which I really found a great um preparation for this kind of thing right you have these load wiring uh",
    "start": "630959",
    "end": "638700"
  },
  {
    "text": "blank lines between those blocks here and the usual thing to get rid of this kind",
    "start": "638700",
    "end": "645480"
  },
  {
    "text": "of too long function is basically take those blocks and factor out functions and those comments over there",
    "start": "645480",
    "end": "654839"
  },
  {
    "text": "are very good indicator for the names of those functions maybe it's not exactly the same but you get a guess what it's",
    "start": "654839",
    "end": "660839"
  },
  {
    "text": "doing what's been doing in the uh what's been done in those blocks and you just have an indication what",
    "start": "660839",
    "end": "667440"
  },
  {
    "text": "your function that you factor out should be so here's another example which is um",
    "start": "667440",
    "end": "674940"
  },
  {
    "text": "from the cute documentation and example how to write a main window so",
    "start": "674940",
    "end": "680700"
  },
  {
    "text": "the function goes on and on it's like um I think 80 100 lines of code that goes",
    "start": "680700",
    "end": "686339"
  },
  {
    "text": "on and on like this so those are different levels of abstraction and also it's just very long",
    "start": "686339",
    "end": "693740"
  },
  {
    "text": "but many of those blocks that are down there if you try to factor them out they get",
    "start": "693740",
    "end": "700079"
  },
  {
    "text": "to like 20 25 lines of code because it's just a very detailed work and there's no real",
    "start": "700079",
    "end": "706800"
  },
  {
    "text": "difference no real good scene where you can basically break it up into several functions",
    "start": "706800",
    "end": "713540"
  },
  {
    "text": "so I said how do we fix if we factor out those functions and those comments are a good indication occasion",
    "start": "714720",
    "end": "721320"
  },
  {
    "text": "so this shape update function is another example from the sfml library so this is",
    "start": "721320",
    "end": "727500"
  },
  {
    "text": "production code where you can basically see that",
    "start": "727500",
    "end": "732899"
  },
  {
    "text": "part of this has happened in the past so we have like this huge block up there",
    "start": "732899",
    "end": "737940"
  },
  {
    "text": "that um works with the points with the vertices of the shape and then there is um",
    "start": "737940",
    "end": "744600"
  },
  {
    "text": "suddenly there's a comment and a single line of code where the function is called so we can imagine that maybe sometime in",
    "start": "744600",
    "end": "752100"
  },
  {
    "text": "the past someone has taken all the part about the fill colors and refactored it",
    "start": "752100",
    "end": "757980"
  },
  {
    "text": "into a function update fill colors and another function of the text coordinates objects coords sorry and update outline",
    "start": "757980",
    "end": "767399"
  },
  {
    "text": "so um if I were to refactor this my function would look like this",
    "start": "767399",
    "end": "774060"
  },
  {
    "text": "the first part is the vertices that have to be updated the second part is the fill colors that have to be updated I",
    "start": "774060",
    "end": "780180"
  },
  {
    "text": "mean the color comment on the right side is basically well it's less specific",
    "start": "780180",
    "end": "785339"
  },
  {
    "text": "than the actual name of the function right so the the comment is less than",
    "start": "785339",
    "end": "790980"
  },
  {
    "text": "redundant it's just not helpful for the texture coordinates I don't know why someone would",
    "start": "790980",
    "end": "797880"
  },
  {
    "text": "well maybe 222 shorten the typing but usually like these days with Ides with autocompletion",
    "start": "797880",
    "end": "805019"
  },
  {
    "text": "and stuff like that instead of writing text coords we can write update texture coordinates because that's what the",
    "start": "805019",
    "end": "811019"
  },
  {
    "text": "function does and then update outline is just SSS",
    "start": "811019",
    "end": "816800"
  },
  {
    "text": "and so we see like this is a four line function and we see all the four things that are done there and if we are",
    "start": "816959",
    "end": "822660"
  },
  {
    "text": "interested in how the colors have to be updated or in how the vertices have to be updated we can look into the details",
    "start": "822660",
    "end": "828899"
  },
  {
    "text": "in the respective implementation",
    "start": "828899",
    "end": "832399"
  },
  {
    "text": "um this is another one again from the pong or tennis example",
    "start": "836940",
    "end": "843660"
  },
  {
    "text": "where we have like a rectangle shape this is my left pedal and the rectangular shape that is the right",
    "start": "843660",
    "end": "848760"
  },
  {
    "text": "petal and a circle shape that is a ball and then it gets updated with all these kind",
    "start": "848760",
    "end": "853860"
  },
  {
    "text": "of things what we can do here is basically okay if you factor out the",
    "start": "853860",
    "end": "860100"
  },
  {
    "text": "colors for the two petals and beyond that the two petals are basically the same right",
    "start": "860100",
    "end": "865200"
  },
  {
    "text": "so we create to a pedal for the left or the blue color and the pedal with the",
    "start": "865200",
    "end": "870240"
  },
  {
    "text": "Retro color and we create a ball so we have put here in the name of the function what we're actually creating",
    "start": "870240",
    "end": "875820"
  },
  {
    "text": "because before that it was just in the name of the variable it was like a rectangle shape",
    "start": "875820",
    "end": "882240"
  },
  {
    "text": "and a circle shape and now we say we have those functions here",
    "start": "882240",
    "end": "887399"
  },
  {
    "text": "and those functions can just create a rectangle shape and just set all the",
    "start": "887399",
    "end": "892560"
  },
  {
    "text": "parameters we have seen before and just return the rectangle shape that's just the first step but then later we will see um",
    "start": "892560",
    "end": "899699"
  },
  {
    "text": "that maybe there is some some complex functionality associated with those rectangles or with those balls that",
    "start": "899699",
    "end": "906120"
  },
  {
    "text": "maybe so maybe we should make a class out of it so we can say okay we just make a pedal",
    "start": "906120",
    "end": "912180"
  },
  {
    "text": "class and we make a born class so we have those missing abstractions that were",
    "start": "912180",
    "end": "917760"
  },
  {
    "text": "that we didn't have before and usually it's like a good thing to",
    "start": "917760",
    "end": "924600"
  },
  {
    "text": "have the the domain names we talk about when we talk about our programs as classes or",
    "start": "924600",
    "end": "931199"
  },
  {
    "text": "as functions inside our program because we want we're not talking about well and",
    "start": "931199",
    "end": "936240"
  },
  {
    "text": "when the circle hits the rectangle when we talk about this game we talk about when the ball hits the pedal right",
    "start": "936240",
    "end": "941820"
  },
  {
    "text": "and then the ball gets reflected",
    "start": "941820",
    "end": "945139"
  },
  {
    "text": "um so this refactoring I would have done",
    "start": "948180",
    "end": "954420"
  },
  {
    "text": "brings us to the next little code smell",
    "start": "954420",
    "end": "959120"
  },
  {
    "text": "um so this is basically more or less symmetrically so we have the pedal that",
    "start": "959639",
    "end": "964680"
  },
  {
    "text": "gets the color and we have the ball that gets the color however in this game there's only one",
    "start": "964680",
    "end": "970740"
  },
  {
    "text": "ball so why do we have to pass the color in the Constructor",
    "start": "970740",
    "end": "977820"
  },
  {
    "text": "I mean by definition a ball in this game is white that's that's it that's its period there are no differently colored",
    "start": "977820",
    "end": "983940"
  },
  {
    "text": "balls so this um thing in the cons passing the color to the Constructor is just not needed",
    "start": "983940",
    "end": "992839"
  },
  {
    "text": "so this code smell is called well premature generalization",
    "start": "993540",
    "end": "999120"
  },
  {
    "text": "um so this is the what if something happens in the future",
    "start": "999120",
    "end": "1004120"
  },
  {
    "text": "so we have parameters that only get one value ever like the white color here or",
    "start": "1004279",
    "end": "1011240"
  },
  {
    "text": "we have parameters that never get actually used in C plus plus we have templates that",
    "start": "1011240",
    "end": "1018139"
  },
  {
    "text": "only get instantiated with one single class why would we make it a template if it",
    "start": "1018139",
    "end": "1024260"
  },
  {
    "text": "could be just a normal function that takes a single class right um base classes that have only one",
    "start": "1024260",
    "end": "1031280"
  },
  {
    "text": "derived class except when you don't actually have one derived class but you",
    "start": "1031280",
    "end": "1037760"
  },
  {
    "text": "also derive like mocks for for testing and stuff like that um",
    "start": "1037760",
    "end": "1043400"
  },
  {
    "text": "and the problem beyond Behind that is um violation of the case and the acne",
    "start": "1043400",
    "end": "1049640"
  },
  {
    "text": "principles so cases keep it simple and stupid so just writing ball braces and be done",
    "start": "1049640",
    "end": "1056900"
  },
  {
    "text": "with it is simpler than writing Bond and uh I have to pass the white color here",
    "start": "1056900",
    "end": "1062120"
  },
  {
    "text": "and yagni is uh you ain't gonna need it so we tend to think okay what if in",
    "start": "1062120",
    "end": "1069080"
  },
  {
    "text": "future we need this and that feature and we tend to go there and",
    "start": "1069080",
    "end": "1074419"
  },
  {
    "text": "provide the way to actually make this happen in the future the thing is",
    "start": "1074419",
    "end": "1081140"
  },
  {
    "text": "a this may not ever happen so we basically have done work into preparing",
    "start": "1081140",
    "end": "1086539"
  },
  {
    "text": "something that never happens or B um the requirements actually change and",
    "start": "1086539",
    "end": "1092840"
  },
  {
    "text": "something like that happens but it's only something like that and it's slightly different than we had anticipated and we basically have to",
    "start": "1092840",
    "end": "1099260"
  },
  {
    "text": "rework the thing we have done to actually provide for the needed requirement",
    "start": "1099260",
    "end": "1104660"
  },
  {
    "text": "so don't block yourself from future improvements but don't just yet prepare",
    "start": "1104660",
    "end": "1111380"
  },
  {
    "text": "those things so there's there's a balance to be have",
    "start": "1111380",
    "end": "1117280"
  },
  {
    "text": "and yeah the last line is also important if we do this if you make for example",
    "start": "1120380",
    "end": "1126740"
  },
  {
    "text": "templates for uh for a function then it's not enough to test that",
    "start": "1126740",
    "end": "1132919"
  },
  {
    "text": "template with a single type that we have in mind because a template can be instantiated with anything with integers",
    "start": "1132919",
    "end": "1138500"
  },
  {
    "text": "with handwritten types let's move a little bit non-copyable types and stuff like that in theory we would have to actually test",
    "start": "1138500",
    "end": "1145039"
  },
  {
    "text": "those template functions in those very generic functions with all the kinds of different parameters that they could get",
    "start": "1145039",
    "end": "1151460"
  },
  {
    "text": "right even though they're never called with that in our code base",
    "start": "1151460",
    "end": "1156860"
  },
  {
    "text": "because people will assume this is a template this is well tested for any type",
    "start": "1156860",
    "end": "1162080"
  },
  {
    "text": "and I will just call it later um they'd see that thing and is well this is something I could use I will",
    "start": "1162080",
    "end": "1168380"
  },
  {
    "text": "just call it and then realize oh it has never been tested with my use case and suddenly we have a broken function",
    "start": "1168380",
    "end": "1176919"
  },
  {
    "text": "foreign so this solution is relatively simple keep it as simple as possible",
    "start": "1179080",
    "end": "1184940"
  },
  {
    "text": "throw away anything that is too generic make it as specialized it needs to be not more specialized of course",
    "start": "1184940",
    "end": "1191419"
  },
  {
    "text": "and in this case for the board example just um move it out of the Constructor plan",
    "start": "1191419",
    "end": "1198080"
  },
  {
    "text": "right and just initialize it hard coded with white if you later need a ball in another color then you can bring back",
    "start": "1198080",
    "end": "1204320"
  },
  {
    "text": "the The Constructor parameter probably you won't need a ball with another color but you will need a ball",
    "start": "1204320",
    "end": "1210260"
  },
  {
    "text": "with a different diameter then you bring that as a Constructor parameter",
    "start": "1210260",
    "end": "1215320"
  },
  {
    "text": "also part of the well in a game Loop or this is the start of the inner game Loop",
    "start": "1220100",
    "end": "1225440"
  },
  {
    "text": "for the uh for the tennis example so we have this comment then we have",
    "start": "1225440",
    "end": "1231740"
  },
  {
    "text": "like handle events so we poll events from the window and see if our keys are pressed",
    "start": "1231740",
    "end": "1237500"
  },
  {
    "text": "so we move the pedals up and down and stuff like that um depending on on the key on the event",
    "start": "1237500",
    "end": "1244160"
  },
  {
    "text": "then I do something or other events get just discarded um if the game has actually started so if",
    "start": "1244160",
    "end": "1251059"
  },
  {
    "text": "we are playing then we have to do things so there are all these three dots comments are just hundreds of lines of",
    "start": "1251059",
    "end": "1258320"
  },
  {
    "text": "missing code or dozens of lines at least and um this gets really complicated to actually",
    "start": "1258320",
    "end": "1264919"
  },
  {
    "text": "see it actually keep in mind okay we are inside this while loop",
    "start": "1264919",
    "end": "1270260"
  },
  {
    "text": "um we are inside this for Loop we are inside this if and this hour if and inside this new while loop right",
    "start": "1270260",
    "end": "1276740"
  },
  {
    "text": "so the smell is the name of the smell is the deeply nested control flow",
    "start": "1276740",
    "end": "1282500"
  },
  {
    "text": "so um basically you see like lots of indentations going on",
    "start": "1282500",
    "end": "1287780"
  },
  {
    "text": "and it's just a mental load to keep in mind where we actually are worth all the conditions are to actually get here",
    "start": "1287780",
    "end": "1295159"
  },
  {
    "text": "and um the problems aren't exactly that and",
    "start": "1295159",
    "end": "1301580"
  },
  {
    "text": "that and also usually um single responsibility because all those",
    "start": "1301580",
    "end": "1306919"
  },
  {
    "text": "different ifs and else's are doing lots of different things and again single level of instruction",
    "start": "1306919",
    "end": "1312320"
  },
  {
    "text": "because usually what is down there in the midst of this of the smallest if and",
    "start": "1312320",
    "end": "1318200"
  },
  {
    "text": "else or for Loop is very detailed very low level and the Very outer while loop",
    "start": "1318200",
    "end": "1324679"
  },
  {
    "text": "is basically the the the high level concept that we are doing here",
    "start": "1324679",
    "end": "1330039"
  },
  {
    "text": "I mean usually found together with long functions because well to actually have all those indentations and ifs and",
    "start": "1330740",
    "end": "1337159"
  },
  {
    "text": "else's you need a lot of lines of code right so what you see here when we refactor",
    "start": "1337159",
    "end": "1345679"
  },
  {
    "text": "this a bit and factor out Parts into functions",
    "start": "1345679",
    "end": "1352280"
  },
  {
    "text": "then you basically see this is just uh",
    "start": "1352280",
    "end": "1357679"
  },
  {
    "text": "a simple input process output Loop so while the window is open so it hasn't",
    "start": "1357679",
    "end": "1363860"
  },
  {
    "text": "been closed so we are still running we handle all the events that come from",
    "start": "1363860",
    "end": "1369140"
  },
  {
    "text": "the window when the actual game inside the window is running then we move all the entities",
    "start": "1369140",
    "end": "1375559"
  },
  {
    "text": "according to the inputs and then we redraw the window",
    "start": "1375559",
    "end": "1381760"
  },
  {
    "text": "so this is relatively simple on a high level what you actually input processing",
    "start": "1381980",
    "end": "1388159"
  },
  {
    "text": "and the actual restructuring of the entities and the redrawing of the window is these are details and this we can",
    "start": "1388159",
    "end": "1395240"
  },
  {
    "text": "look up in that function should we need to know them",
    "start": "1395240",
    "end": "1400360"
  },
  {
    "text": "another example somewhere inside the big while loop the the handle entities Loop",
    "start": "1404780",
    "end": "1412600"
  },
  {
    "text": "um does that look right to you",
    "start": "1413659",
    "end": "1418700"
  },
  {
    "text": "do you know what's happening here have you do you have an idea",
    "start": "1418700",
    "end": "1423039"
  },
  {
    "text": "this is detecting the collision between the left pedal and the ball",
    "start": "1423919",
    "end": "1429080"
  },
  {
    "text": "is this Collision detect detection correct",
    "start": "1429080",
    "end": "1433658"
  },
  {
    "text": "can you see no why not okay so um",
    "start": "1434480",
    "end": "1440179"
  },
  {
    "text": "actually figuring out that this is Collision detection well okay we see something with the left with the ball",
    "start": "1440179",
    "end": "1445460"
  },
  {
    "text": "and the left pedal and something about the radius and the positions and we yes something this this Compares this kind",
    "start": "1445460",
    "end": "1451820"
  },
  {
    "text": "of thing this should be Collision detection because we know what's what's happening in the game right but um figuring out why the problem is",
    "start": "1451820",
    "end": "1460220"
  },
  {
    "text": "here um it's not that simple so",
    "start": "1460220",
    "end": "1467179"
  },
  {
    "text": "next code smile the name is complicated expression um",
    "start": "1467179",
    "end": "1472640"
  },
  {
    "text": "again violating single level of instruction so what the if condition is meant to be",
    "start": "1472640",
    "end": "1478340"
  },
  {
    "text": "testing are these two colliding this is a higher level concept",
    "start": "1478340",
    "end": "1484940"
  },
  {
    "text": "and all those calculations going on there are the low level details of actually",
    "start": "1484940",
    "end": "1490840"
  },
  {
    "text": "calculating whether there is a collision or not",
    "start": "1490840",
    "end": "1495220"
  },
  {
    "text": "how can we fix this kind of thing well you can factor out functions and or",
    "start": "1496400",
    "end": "1501440"
  },
  {
    "text": "variables with names there is a name of this higher level",
    "start": "1501440",
    "end": "1506780"
  },
  {
    "text": "concept if the ball hits the left pedal um",
    "start": "1506780",
    "end": "1512659"
  },
  {
    "text": "the ball hits the left pedal when the ball touches the pedal on the left so there's like the only left touching and",
    "start": "1512659",
    "end": "1519799"
  },
  {
    "text": "this is the x coordinate and the ball is at the same height right so the ball doesn't like flow over or or under the",
    "start": "1519799",
    "end": "1526760"
  },
  {
    "text": "pedal and those two can then be written well it's the ball is above the lower Edge",
    "start": "1526760",
    "end": "1532700"
  },
  {
    "text": "and the ball is below the upper edge of the pedal so it's more or less at the same height and",
    "start": "1532700",
    "end": "1538580"
  },
  {
    "text": "um then the left edge of the ball and the right edge of the pedal and all those those little details can be put together",
    "start": "1538580",
    "end": "1544880"
  },
  {
    "text": "so we put all those Concepts like is it at the same at the right height is it at the right X position we can put names to",
    "start": "1544880",
    "end": "1552140"
  },
  {
    "text": "all those kind of things and factor out variables and well it gets relatively",
    "start": "1552140",
    "end": "1557240"
  },
  {
    "text": "long so we want to have the upper edge of the ball which is the position dot y plus",
    "start": "1557240",
    "end": "1563900"
  },
  {
    "text": "the radius which okay so from this I want to write it like this now we can see that the",
    "start": "1563900",
    "end": "1570260"
  },
  {
    "text": "dot Y and Dot X position of the bone are actually the center of the bone and for the pedal it's like I think the lower",
    "start": "1570260",
    "end": "1576320"
  },
  {
    "text": "left corner or something like that from the thing we have seen before we can just guess what X and Y of the of the",
    "start": "1576320",
    "end": "1583580"
  },
  {
    "text": "different entities are right so here we put like names to all this",
    "start": "1583580",
    "end": "1590240"
  },
  {
    "text": "kind of things um however um as I said before when we make the",
    "start": "1590240",
    "end": "1597140"
  },
  {
    "text": "ball when there is like complex logic associated with the ball and maybe you're not even that complex logic and",
    "start": "1597140",
    "end": "1602960"
  },
  {
    "text": "the pedal then we can just use a class and have member functions member",
    "start": "1602960",
    "end": "1608120"
  },
  {
    "text": "variables and have it lights nicely tucked away to the class it belongs to so get the upper edge of the ball get",
    "start": "1608120",
    "end": "1615080"
  },
  {
    "text": "the lower edge of the ball and stuff like that and then still if this is too much text",
    "start": "1615080",
    "end": "1623559"
  },
  {
    "text": "right before the if condition too much to put all those names to them",
    "start": "1623559",
    "end": "1628760"
  },
  {
    "text": "um we can still have a function that just takes in this case nothing maybe because the ball and the in the pedals",
    "start": "1628760",
    "end": "1635240"
  },
  {
    "text": "are member functions or you can just pass the ball and the edge to this function and say is there a collision",
    "start": "1635240",
    "end": "1641360"
  },
  {
    "text": "between those two and then the function contains the details of actually figuring out",
    "start": "1641360",
    "end": "1647120"
  },
  {
    "text": "whether we have that Collision and again that's this puts basically the domain name the",
    "start": "1647120",
    "end": "1654140"
  },
  {
    "text": "concepts we are thinking about when you're writing the code AS names into the code which is a good thing because",
    "start": "1654140",
    "end": "1659299"
  },
  {
    "text": "the next person who has to read this code doesn't have to think um ball dot X and the radius and this left",
    "start": "1659299",
    "end": "1666980"
  },
  {
    "text": "Center and the and the width and so on of this rectangle which is actually the pedal and so on having those names makes",
    "start": "1666980",
    "end": "1674059"
  },
  {
    "text": "it much really a much much easier to read and to understand for us",
    "start": "1674059",
    "end": "1679659"
  },
  {
    "text": "um that's a lot of code to write right I mean you have seen like these three slides before this is quite some some",
    "start": "1683960",
    "end": "1691820"
  },
  {
    "text": "amount of code but it's a lot of details that we have",
    "start": "1691820",
    "end": "1698539"
  },
  {
    "text": "set our minds to and putting down those details in code",
    "start": "1698539",
    "end": "1705279"
  },
  {
    "text": "makes it just a bit more work than just thinking about it but for the next person who is reading",
    "start": "1706279",
    "end": "1712400"
  },
  {
    "text": "the code it's a lot less work because I don't have to do all those mental gymnastics as well",
    "start": "1712400",
    "end": "1720220"
  },
  {
    "text": "I mean yeah there's a sentiment well I had to think about it and make I let I will make them to think about it too",
    "start": "1720260",
    "end": "1726140"
  },
  {
    "text": "right they have to figure out why should they have it easy I'm out they will thank you for it",
    "start": "1726140",
    "end": "1732700"
  },
  {
    "text": "um who cares about performance here",
    "start": "1735080",
    "end": "1741940"
  },
  {
    "text": "yes that's a good 50 I would say maybe even more um",
    "start": "1742940",
    "end": "1748159"
  },
  {
    "text": "writing all these functions and uh variables all those intermediates",
    "start": "1748159",
    "end": "1754580"
  },
  {
    "text": "is that good for performance that can't be a good performance right I just write this thing out and that's",
    "start": "1754580",
    "end": "1761120"
  },
  {
    "text": "by far far so than anything with functions and stuff like that",
    "start": "1761120",
    "end": "1766220"
  },
  {
    "text": "question is how do you know I see many people writing things for for",
    "start": "1766220",
    "end": "1773779"
  },
  {
    "text": "for uh to help the compiler to actually be more performant um these days we have optimizers that",
    "start": "1773779",
    "end": "1782120"
  },
  {
    "text": "can do way more mental gymnastics than we can do so um",
    "start": "1782120",
    "end": "1788020"
  },
  {
    "text": "if you have seen Talks by by Matt godbold about the the compiler explorer",
    "start": "1788020",
    "end": "1793340"
  },
  {
    "text": "that he says like um he shows like this big piece of code where someone has really gone through",
    "start": "1793340",
    "end": "1798919"
  },
  {
    "text": "the motions to actually do some calculations the compiler on the optimizer just says yeah I know that one",
    "start": "1798919",
    "end": "1805039"
  },
  {
    "text": "it's just this number so the optimizer in most cases is way smarter than we are",
    "start": "1805039",
    "end": "1810740"
  },
  {
    "text": "and in those cases where we think we are smarter and we just",
    "start": "1810740",
    "end": "1815779"
  },
  {
    "text": "try to be smarter and we tend to more obfuscate the code for the optimizer so",
    "start": "1815779",
    "end": "1821179"
  },
  {
    "text": "the optimizers actually maybe less able to figure out what we are wanting to do",
    "start": "1821179",
    "end": "1826580"
  },
  {
    "text": "so as more straightforward the code is the more easier we make it for the optimizer to actually",
    "start": "1826580",
    "end": "1832220"
  },
  {
    "text": "put out better code and um so first advice is trust your",
    "start": "1832220",
    "end": "1837860"
  },
  {
    "text": "optimizer and if you still think that can't be performant use a profiler",
    "start": "1837860",
    "end": "1844880"
  },
  {
    "text": "use the profiler because only the profiler can actually tell you tell you how many how much time it takes what's",
    "start": "1844880",
    "end": "1850520"
  },
  {
    "text": "going on is in the CPU and compare the two things to check what's actually faster or is it worse or",
    "start": "1850520",
    "end": "1857659"
  },
  {
    "text": "is it has it less performance",
    "start": "1857659",
    "end": "1861820"
  },
  {
    "text": "so the only thing that can't be good for for performance is not for the execution",
    "start": "1862820",
    "end": "1868399"
  },
  {
    "text": "performance but for our reading performance and this in most cases is much more",
    "start": "1868399",
    "end": "1874940"
  },
  {
    "text": "valuable than uh just a bit of execution performance",
    "start": "1874940",
    "end": "1879980"
  },
  {
    "text": "but uh in the corner cases we're actually execution performance cards when we are in those tightener Loops",
    "start": "1879980",
    "end": "1885919"
  },
  {
    "text": "then user profiler and not just look at the code and say that's that's not as good as the one as a code I would have",
    "start": "1885919",
    "end": "1891799"
  },
  {
    "text": "written foreign very often it's just I don't want to",
    "start": "1891799",
    "end": "1898760"
  },
  {
    "text": "type that much",
    "start": "1898760",
    "end": "1901299"
  },
  {
    "text": "so talking about optimizers talking about profilers",
    "start": "1905899",
    "end": "1911120"
  },
  {
    "text": "um there's another smell that's not actually code smell but the the build smell lack of tooling",
    "start": "1911120",
    "end": "1918919"
  },
  {
    "text": "tooling especially in C plus plus has gotten so good in those last five to ten",
    "start": "1918919",
    "end": "1925279"
  },
  {
    "text": "years I would say um use them use the automations you have use your",
    "start": "1925279",
    "end": "1931700"
  },
  {
    "text": "compiler warnings use optimizers use profilers",
    "start": "1931700",
    "end": "1937640"
  },
  {
    "text": "use static analysis Dynamic analysis tool like UB sanitizers memory",
    "start": "1937640",
    "end": "1943100"
  },
  {
    "text": "sanitizers to actually find your bottlenecks and your your memory leaks and stuff like that right",
    "start": "1943100",
    "end": "1949580"
  },
  {
    "text": "and also use IDE tooling um there are great additions to Ides and",
    "start": "1949580",
    "end": "1954919"
  },
  {
    "text": "great Ides out there that help you do those refactorings like going from this initial Big Blob of",
    "start": "1954919",
    "end": "1962480"
  },
  {
    "text": "inside the if condition to go to all these variables the main thing to do there was like Mark",
    "start": "1962480",
    "end": "1969200"
  },
  {
    "text": "a few words hit a key combination type in your name and you affected all the new variable or",
    "start": "1969200",
    "end": "1974960"
  },
  {
    "text": "affected audio function if you're using notepad that's much harder to do but if you're using an IDE",
    "start": "1974960",
    "end": "1980779"
  },
  {
    "text": "with all the tooling and all the bells and whistles that's really simple takes a bit of practice to get it into",
    "start": "1980779",
    "end": "1987679"
  },
  {
    "text": "your fingers to actually find the right key combinations but it's it makes life easier and makes it's really fast to do",
    "start": "1987679",
    "end": "1994640"
  },
  {
    "text": "though so um",
    "start": "1994640",
    "end": "2001960"
  },
  {
    "text": "I know not maybe not everyone in here is the C plus developer so um these previous code smells were like more",
    "start": "2001960",
    "end": "2008740"
  },
  {
    "text": "General to show they apply to basically any language we have a PSC Plus Code smells in here",
    "start": "2008740",
    "end": "2014620"
  },
  {
    "text": "um this is from a library that is used relatively widespread which is called",
    "start": "2014620",
    "end": "2022299"
  },
  {
    "text": "lips who has heard about it if someone here using web development",
    "start": "2022299",
    "end": "2032260"
  },
  {
    "text": "JavaScript CSS scss so thus is a compiler that takes some",
    "start": "2032260",
    "end": "2040260"
  },
  {
    "text": "pre-css stuff and compiles it into CSS for your web project so that all the styles are consistent and stuff like",
    "start": "2040260",
    "end": "2046600"
  },
  {
    "text": "that and this is part of the approach of the of the project which is open source you can find it on GitHub",
    "start": "2046600",
    "end": "2053740"
  },
  {
    "text": "um so um",
    "start": "2053740",
    "end": "2060220"
  },
  {
    "text": "the thing is um what is part of the object's visible",
    "start": "2060220",
    "end": "2065440"
  },
  {
    "text": "State here and um do you spot the the problems that are here",
    "start": "2065440",
    "end": "2071820"
  },
  {
    "text": "so when I take the debug line from a shared object does it change the shared",
    "start": "2077399",
    "end": "2083260"
  },
  {
    "text": "object um looking at the code it doesn't right",
    "start": "2083260",
    "end": "2089138"
  },
  {
    "text": "but for the compiler it does because we haven't marked the function const",
    "start": "2089139",
    "end": "2094618"
  },
  {
    "text": "so missing const is basically one of the C plus codes mods especially if you have",
    "start": "2095280",
    "end": "2101500"
  },
  {
    "text": "to deal with uh older style code where it's very often omitted",
    "start": "2101500",
    "end": "2107260"
  },
  {
    "text": "so functions and objects that aren't that should be marked coins or could be",
    "start": "2107260",
    "end": "2112599"
  },
  {
    "text": "marked coins because they don't change the actual object they work on um when they are not",
    "start": "2112599",
    "end": "2118420"
  },
  {
    "text": "then we have unclear semantics we have accidental modifications because we",
    "start": "2118420",
    "end": "2123460"
  },
  {
    "text": "can't make all the functions cons that work on those objects because well even if they are supposed to only call those",
    "start": "2123460",
    "end": "2129820"
  },
  {
    "text": "Getters when when the Getters are not const then we can't take the object by console reference we can only take it by",
    "start": "2129820",
    "end": "2135640"
  },
  {
    "text": "an on the reference and then we might actually accidentally do something to the object that actually changes it",
    "start": "2135640",
    "end": "2141820"
  },
  {
    "text": "so introducing all those const modifiers to makes it harder for us to do",
    "start": "2141820",
    "end": "2148240"
  },
  {
    "text": "accidental modifications",
    "start": "2148240",
    "end": "2151560"
  },
  {
    "text": "so there's a great talk by by Jason Turner about",
    "start": "2158020",
    "end": "2163960"
  },
  {
    "text": "it's only about C plus code smells where especially has really good section about a constantness much deeper than I can go",
    "start": "2163960",
    "end": "2171220"
  },
  {
    "text": "into right now and here",
    "start": "2171220",
    "end": "2175200"
  },
  {
    "text": "um next example so this is a completely different Library",
    "start": "2176680",
    "end": "2182619"
  },
  {
    "text": "um I think is letter is is the the vendor of some some Hardware sensors and they have written their their own",
    "start": "2182619",
    "end": "2188920"
  },
  {
    "text": "Wireless driver library to to deal with it and there's like an example program",
    "start": "2188920",
    "end": "2194920"
  },
  {
    "text": "again where they have like this huge while loop and at the end of like a couple of",
    "start": "2194920",
    "end": "2201099"
  },
  {
    "text": "hundred lines of code they have if this pointer is set then I have to first disconnect it then delete",
    "start": "2201099",
    "end": "2207099"
  },
  {
    "text": "the pointer and then set it to a null pointer um and the same for the next sensor and for",
    "start": "2207099",
    "end": "2214720"
  },
  {
    "text": "maybe for the player and stuff like that and if something in there throws an",
    "start": "2214720",
    "end": "2220240"
  },
  {
    "text": "exception then I have to go into the cat block and do the things again",
    "start": "2220240",
    "end": "2225480"
  },
  {
    "text": "um so the code smell here is missing r a i i so all these lines of code are most",
    "start": "2225940",
    "end": "2232839"
  },
  {
    "text": "of these lines of code could have just been omitted by using smart pointers um maybe a wrapper around a smart",
    "start": "2232839",
    "end": "2239320"
  },
  {
    "text": "pointer to actually uh do the disconnects that are done here in the in the back",
    "start": "2239320",
    "end": "2245440"
  },
  {
    "text": "um but as far as I could claim from the code is when you actually delete those",
    "start": "2245440",
    "end": "2251560"
  },
  {
    "text": "elements then in the destructor they have the the disconnect maybe the",
    "start": "2251560",
    "end": "2256660"
  },
  {
    "text": "disconnect method itself has has additional logging or something like that but um you can form or you can",
    "start": "2256660",
    "end": "2264160"
  },
  {
    "text": "improve probably this destructed to actually do the disconnect if not you just write a wrapper that first does a",
    "start": "2264160",
    "end": "2271599"
  },
  {
    "text": "disconnect and then resets the smart pointer",
    "start": "2271599",
    "end": "2275338"
  },
  {
    "text": "um use the existing classes from the standard Library like uh unique pointer",
    "start": "2277000",
    "end": "2282220"
  },
  {
    "text": "shared point or whatever you need um the the lock classes and so on when you write your own classes and you",
    "start": "2282220",
    "end": "2289060"
  },
  {
    "text": "have to you have to do clean up um don't rely on the user of those classes to actually call those cleanup",
    "start": "2289060",
    "end": "2294760"
  },
  {
    "text": "methods do the cleanup in your destructors because that makes it basically",
    "start": "2294760",
    "end": "2299980"
  },
  {
    "text": "impossible to forget to do the cleanup because the compiler will guarantee that those destructors are called right",
    "start": "2299980",
    "end": "2307680"
  },
  {
    "text": "and um well the last one is um like if you have like third-party libraries that have for example open closed stuff and",
    "start": "2308560",
    "end": "2314560"
  },
  {
    "text": "and things like that you can write little wrappers for you or just little local objects that take care of the",
    "start": "2314560",
    "end": "2320859"
  },
  {
    "text": "clothes for you automatically when you leave the function either via an early return via late return while throwing a",
    "start": "2320859",
    "end": "2327880"
  },
  {
    "text": "an exception and you don't have to see like oh I return here but I have to do the cleanup first and here when I throw",
    "start": "2327880",
    "end": "2333940"
  },
  {
    "text": "an exception I have to do in the cleanup first and when there is another exception and I go into the cat block I have to do the cleanup here",
    "start": "2333940",
    "end": "2340060"
  },
  {
    "text": "if you just do it in the destructor then you have one place where you do the cleanup and not multiple places and you",
    "start": "2340060",
    "end": "2346720"
  },
  {
    "text": "won't miss any of those places um",
    "start": "2346720",
    "end": "2352960"
  },
  {
    "text": "this is also from the letter one there is a chemical model which is a a",
    "start": "2352960",
    "end": "2359800"
  },
  {
    "text": "interface for a can bus and the thing is copyable by default",
    "start": "2359800",
    "end": "2366339"
  },
  {
    "text": "because the compiler will generate copy Constructors happily for us and copy assignment and stuff like that right and",
    "start": "2366339",
    "end": "2372460"
  },
  {
    "text": "move and assignments and things like that and there is a handle to some",
    "start": "2372460",
    "end": "2378400"
  },
  {
    "text": "underlying Library object for us um and there is a Destructor which is",
    "start": "2378400",
    "end": "2386380"
  },
  {
    "text": "basically um marked as a virtual but it should be override because it's overriding the virtual Base Class Destructor",
    "start": "2386380",
    "end": "2392680"
  },
  {
    "text": "and um well what happens if I have two of these objects with the same handle",
    "start": "2392680",
    "end": "2399579"
  },
  {
    "text": "because I have by accident copied them well let's look in the destructor if",
    "start": "2399579",
    "end": "2406300"
  },
  {
    "text": "there is some Mr that I didn't put in the first listing and if the handle isn't null then recall disconnect and",
    "start": "2406300",
    "end": "2413859"
  },
  {
    "text": "disconnect looks at the handle and calls um on the underlying Library which is",
    "start": "2413859",
    "end": "2420160"
  },
  {
    "text": "the C library disable this handle closes handle and set the handle to zero",
    "start": "2420160",
    "end": "2426760"
  },
  {
    "text": "um I have not actually looked into the library into the C library if it's",
    "start": "2426760",
    "end": "2431980"
  },
  {
    "text": "actually safe to disable and close a handle twice",
    "start": "2431980",
    "end": "2437500"
  },
  {
    "text": "but in very many cases it is not safe to do like things like that so this is",
    "start": "2437500",
    "end": "2443500"
  },
  {
    "text": "basically on a handle the the equivalent to double delete right so",
    "start": "2443500",
    "end": "2450400"
  },
  {
    "text": "the code smile here is violating the rule of five which means if I have to do one of the",
    "start": "2450400",
    "end": "2457359"
  },
  {
    "text": "copy assignment or Constructor move assignment or Constructor or Destructor then I should definitely have a look at",
    "start": "2457359",
    "end": "2463720"
  },
  {
    "text": "the other four in this case there was a Destructor that was taking care of closing the handle",
    "start": "2463720",
    "end": "2470260"
  },
  {
    "text": "and so I should have a look at the copy Constructor and at the copy move move",
    "start": "2470260",
    "end": "2476079"
  },
  {
    "text": "Constructor so moving probably just the should just move the active handle from one object",
    "start": "2476079",
    "end": "2482200"
  },
  {
    "text": "to the other and set the original to zero so it doesn't get closed in the in the destructor",
    "start": "2482200",
    "end": "2487740"
  },
  {
    "text": "copying probably should have been prohibited because um this is probably meant to be a unique handle",
    "start": "2487740",
    "end": "2494619"
  },
  {
    "text": "whatever the semantics is",
    "start": "2494619",
    "end": "2498000"
  },
  {
    "text": "this is another class from the uh sfml Library again so there we have like",
    "start": "2504339",
    "end": "2511780"
  },
  {
    "text": "um implementation for for the joystick interface this is a Windows",
    "start": "2511780",
    "end": "2517660"
  },
  {
    "text": "implementation where which you see like down here with the H result",
    "start": "2517660",
    "end": "2523180"
  },
  {
    "text": "so um there are Loops over the list of of active joysticks or of known",
    "start": "2523180",
    "end": "2528640"
  },
  {
    "text": "joysticks and um they find the correct index for the uh",
    "start": "2528640",
    "end": "2534400"
  },
  {
    "text": "they they find the joystick record with the correct Index right and down there again if the joystick",
    "start": "2534400",
    "end": "2540160"
  },
  {
    "text": "record has a correct index then we do something on it and um if not we just do",
    "start": "2540160",
    "end": "2545619"
  },
  {
    "text": "nothing with it this is another C plus smell where",
    "start": "2545619",
    "end": "2551859"
  },
  {
    "text": "people say um instead of using blank for Loops or just range base for Loops over",
    "start": "2551859",
    "end": "2557859"
  },
  {
    "text": "iterations we should prefer to use standard algorithms",
    "start": "2557859",
    "end": "2564099"
  },
  {
    "text": "so um if you look at the first one it just goes through all the things and finds whether the index is actually in",
    "start": "2564099",
    "end": "2571540"
  },
  {
    "text": "this list of Records right and for the second one it finds the one with the correct record and x on it so",
    "start": "2571540",
    "end": "2578680"
  },
  {
    "text": "this is like multiple smells this is just not just only a loop because it's 280 lines of code it's pretty sure also",
    "start": "2578680",
    "end": "2585880"
  },
  {
    "text": "a Long Function and maybe deeply nested control flow and and multiple of those smells",
    "start": "2585880",
    "end": "2593818"
  },
  {
    "text": "so find by index is just a small function where you used to find if",
    "start": "2594400",
    "end": "2600400"
  },
  {
    "text": "and I go over the list of joysticks and find the one where the record is that has the same index",
    "start": "2600400",
    "end": "2607560"
  },
  {
    "text": "and um the first one though is the input connected is just um well find me the",
    "start": "2607900",
    "end": "2614859"
  },
  {
    "text": "one with the index if it's and then it's not there if it's not and then it's in there",
    "start": "2614859",
    "end": "2621099"
  },
  {
    "text": "and the next one is basically find the one by index and I have my record and then I don't can outside of my Loop um",
    "start": "2621099",
    "end": "2628839"
  },
  {
    "text": "go over all these things and I don't have this additional indentation right",
    "start": "2628839",
    "end": "2634440"
  },
  {
    "text": "foreign the very beginning I said usually there",
    "start": "2637119",
    "end": "2646180"
  },
  {
    "text": "is not always a fix or sometimes the fix makes the proposed fix makes things",
    "start": "2646180",
    "end": "2651880"
  },
  {
    "text": "worse so let's have a look at this um hypothetical code so this is made up",
    "start": "2651880",
    "end": "2657339"
  },
  {
    "text": "this is not from some open source parts I have a container of employees",
    "start": "2657339",
    "end": "2662740"
  },
  {
    "text": "and um I want to convert it into a vector of employees",
    "start": "2662740",
    "end": "2668200"
  },
  {
    "text": "so the trivial way to do this which will create the vector maybe reserve some space in",
    "start": "2668200",
    "end": "2674500"
  },
  {
    "text": "it to to um save some time on the recurring locations and then just push back every",
    "start": "2674500",
    "end": "2681579"
  },
  {
    "text": "employee from this source to the vector of course using algorithms you can use",
    "start": "2681579",
    "end": "2686920"
  },
  {
    "text": "State copy um",
    "start": "2686920",
    "end": "2692140"
  },
  {
    "text": "if you know use that Vector interface then you know it has a Constructor that just takes two",
    "start": "2692140",
    "end": "2698680"
  },
  {
    "text": "iterators and it just will copy everything that is in this iterator range",
    "start": "2698680",
    "end": "2704079"
  },
  {
    "text": "so this is definitely better than the the uh previous one because it just",
    "start": "2704079",
    "end": "2709599"
  },
  {
    "text": "makes the thing as as simple as it as it can be right",
    "start": "2709599",
    "end": "2715200"
  },
  {
    "text": "so let's say we have a map of salaries by name so we have the name of some",
    "start": "2717220",
    "end": "2723579"
  },
  {
    "text": "employee um maybe since a Bjorn's talk yesterday we know that the employee probably",
    "start": "2723579",
    "end": "2730420"
  },
  {
    "text": "should not be or the employee name should probably not be as that string but in proper employee name class but",
    "start": "2730420",
    "end": "2736900"
  },
  {
    "text": "besides that um we have then the unsigned it's the amount of money they earn per year or",
    "start": "2736900",
    "end": "2742720"
  },
  {
    "text": "month or something and um",
    "start": "2742720",
    "end": "2747599"
  },
  {
    "text": "then we just go through all our employees we just had in the vector and just say Okay is the salaries by name is",
    "start": "2747880",
    "end": "2754420"
  },
  {
    "text": "just the employee name and this employee salary right so we have this container to work with",
    "start": "2754420",
    "end": "2759520"
  },
  {
    "text": "it later um instead of like using the bracket",
    "start": "2759520",
    "end": "2766780"
  },
  {
    "text": "operator we can just use and place which does an In-Place construction and so instead of like having the construction",
    "start": "2766780",
    "end": "2772540"
  },
  {
    "text": "first and then setting the value it's it's more or less equivalent",
    "start": "2772540",
    "end": "2777640"
  },
  {
    "text": "foreign s this is the algorithm to do this Stitch",
    "start": "2777640",
    "end": "2783160"
  },
  {
    "text": "transform we trans we run over the employees vector or container from begin to end",
    "start": "2783160",
    "end": "2790180"
  },
  {
    "text": "and then we need to provide an iterator where to insert",
    "start": "2790180",
    "end": "2796780"
  },
  {
    "text": "so this is a state inserter salaries by name but the inserted also wants not only the",
    "start": "2796780",
    "end": "2803140"
  },
  {
    "text": "container but also the position in which it probably needs to insert into the Container so this is State end of",
    "start": "2803140",
    "end": "2810220"
  },
  {
    "text": "salaries by name because because we just could also write provides that begin of salaries by name and then we have to",
    "start": "2810220",
    "end": "2817359"
  },
  {
    "text": "provide the actual transformation function where we take an employee and give this salary and name or name and",
    "start": "2817359",
    "end": "2823180"
  },
  {
    "text": "salary Payback right so who thinks that this Stitch transform",
    "start": "2823180",
    "end": "2829119"
  },
  {
    "text": "block on the right is more readable than either the first or the second for loop on the left side",
    "start": "2829119",
    "end": "2837839"
  },
  {
    "text": "I thought as much so if it's like it before a little bit just one line of code is most in most cases it's pretty",
    "start": "2838599",
    "end": "2844359"
  },
  {
    "text": "readable right and this to transform gets pretty involved",
    "start": "2844359",
    "end": "2850780"
  },
  {
    "text": "so this is a case where it would say well it is a code smell that we have the blank for Loop in there but the proposed",
    "start": "2850780",
    "end": "2859119"
  },
  {
    "text": "solution to go for this algorithm nah just leave it like it is",
    "start": "2859119",
    "end": "2866760"
  },
  {
    "text": "um the example is a bit more complicated um we only make this salaries by name if we",
    "start": "2868180",
    "end": "2875319"
  },
  {
    "text": "don't if if the employee is not a manager because we don't want to the the manager salaries to appear in our little",
    "start": "2875319",
    "end": "2881740"
  },
  {
    "text": "tool right so if the employee is not a manager then we",
    "start": "2881740",
    "end": "2888460"
  },
  {
    "text": "just put the same thing we had before we use the name of the employee in the salary and put it into our map",
    "start": "2888460",
    "end": "2896740"
  },
  {
    "text": "still pretty readable as three lines of code right but it's the same code smile we have the",
    "start": "2896740",
    "end": "2902500"
  },
  {
    "text": "loop instead of the algorithm can someone tell me what the name of that algorithm is",
    "start": "2902500",
    "end": "2909420"
  },
  {
    "text": "part of it is filter yes so in terms in Old School C plus plus",
    "start": "2912540",
    "end": "2919960"
  },
  {
    "text": "yes it's not copy if it's transform if which doesn't exist in the standard Library we",
    "start": "2919960",
    "end": "2926440"
  },
  {
    "text": "have transform we have copy if but we don't have transform if so we want to do the transformation from",
    "start": "2926440",
    "end": "2933339"
  },
  {
    "text": "the employee to the name and salary pair that's a transform part and the if is basically if it's not a manager right",
    "start": "2933339",
    "end": "2940900"
  },
  {
    "text": "so um transform if is there written on the",
    "start": "2940900",
    "end": "2946000"
  },
  {
    "text": "left so if you dig a bit into the standard library look at the copy of look at this transform then you can",
    "start": "2946000",
    "end": "2951819"
  },
  {
    "text": "piece together Transformer relatively simply but there's still quite a lot of things to write and you'll write it",
    "start": "2951819",
    "end": "2957099"
  },
  {
    "text": "yourself so you better write unit tests for that right",
    "start": "2957099",
    "end": "2961680"
  },
  {
    "text": "um and then you call it transform if we go from begin to end over the employees we have this same complicated inserter",
    "start": "2962560",
    "end": "2969940"
  },
  {
    "text": "for our map again and then we have at first we have the transformation function and the second one is the",
    "start": "2969940",
    "end": "2977099"
  },
  {
    "text": "predicate to do the actual if condition in there",
    "start": "2977099",
    "end": "2982119"
  },
  {
    "text": "but that's quite a handful right that's not as readable as the loop with a single if in there we had before so",
    "start": "2982119",
    "end": "2988420"
  },
  {
    "text": "another example of have a look maybe try the transformation to the",
    "start": "2988420",
    "end": "2995740"
  },
  {
    "text": "supposed solution for the code smell but in this case it's really not worth it",
    "start": "2995740",
    "end": "3001520"
  },
  {
    "text": "how does it look when we use ranges so here you have the filter so we take the employees first we filter",
    "start": "3002400",
    "end": "3010020"
  },
  {
    "text": "all those that are not a man that are a manager um then we have to transform the",
    "start": "3010020",
    "end": "3016140"
  },
  {
    "text": "employees to the pair and then we just have a range of pairs and we have to make a map out of it",
    "start": "3016140",
    "end": "3023599"
  },
  {
    "text": "yes that's modern C plus plus that's C plus plus 20 right how we should deal",
    "start": "3023880",
    "end": "3028920"
  },
  {
    "text": "with ranges um I would still prefer the follow-up to be honest",
    "start": "3028920",
    "end": "3034560"
  },
  {
    "text": "yes you can use this kind of thing as an exercise but um and this particular example",
    "start": "3034560",
    "end": "3042200"
  },
  {
    "text": "if the for Loop we had in the beginning gets even more complex because there are other conditions and stuff like that",
    "start": "3042720",
    "end": "3048599"
  },
  {
    "text": "then maybe at some point the for Loop gets so interleaved and and and different things in there that may be",
    "start": "3048599",
    "end": "3055079"
  },
  {
    "text": "just like this okay I take this range then I apply a filter then I apply the transformation then maybe I apply",
    "start": "3055079",
    "end": "3061319"
  },
  {
    "text": "another filter and maybe then unzip it with some other data that I get from this site maybe at some point the ranges",
    "start": "3061319",
    "end": "3067020"
  },
  {
    "text": "get more readable or your handwritten algorithm or something like that gets more readable",
    "start": "3067020",
    "end": "3072240"
  },
  {
    "text": "but always try out the different solutions and not just yeah that's the code smell I want to replace it and then",
    "start": "3072240",
    "end": "3079260"
  },
  {
    "text": "we're done with it so as I said it's still a code smell but",
    "start": "3079260",
    "end": "3086339"
  },
  {
    "text": "there's this usually part right so wait until it actually gets more readable to have the ranges or the",
    "start": "3086339",
    "end": "3093119"
  },
  {
    "text": "algorithms so what we looked at was the Long",
    "start": "3093119",
    "end": "3098640"
  },
  {
    "text": "Function pretty much a generalization deeply nested control flow complicated",
    "start": "3098640",
    "end": "3103680"
  },
  {
    "text": "Expressions those are all General smells that not only apply to C plus plus those apply to Java to c-sharp to any language",
    "start": "3103680",
    "end": "3110220"
  },
  {
    "text": "right and there's a huge catalog out there in the web so if you look like for a code",
    "start": "3110220",
    "end": "3117180"
  },
  {
    "text": "smile catalog then you probably will find different uh instances of those where I have like 40 50-ish different",
    "start": "3117180",
    "end": "3124260"
  },
  {
    "text": "code smells that can appear in code some more often I think these are the ones that we come across most often",
    "start": "3124260",
    "end": "3132300"
  },
  {
    "text": "some less often and the other four five on the on the on the bottom four I think are C plus plus",
    "start": "3132300",
    "end": "3140280"
  },
  {
    "text": "specific but again those are the most often seen smells in C plus plus leg",
    "start": "3140280",
    "end": "3147059"
  },
  {
    "text": "missing const and or const expert even um missing our AIA classes um",
    "start": "3147059",
    "end": "3154380"
  },
  {
    "text": "missing or violating the rule of five or rule of zero and these raw Loops to algorithms which",
    "start": "3154380",
    "end": "3161160"
  },
  {
    "text": "we have seen is not always correct to fix",
    "start": "3161160",
    "end": "3166520"
  },
  {
    "text": "with that I um done I think",
    "start": "3170520",
    "end": "3175818"
  },
  {
    "text": "so this is again the the code smart by Jason Turner I I uh I've shown the",
    "start": "3176640",
    "end": "3184700"
  },
  {
    "text": "thumbnail screen earlier um naming actually is really hard",
    "start": "3184700",
    "end": "3191640"
  },
  {
    "text": "so like when I look at these ball hits left pedal I've talked about Collision",
    "start": "3191640",
    "end": "3196859"
  },
  {
    "text": "so maybe we should have renamed it like collision between ball and pedal or something like that so finding the",
    "start": "3196859",
    "end": "3202740"
  },
  {
    "text": "correct names for these kind of things especially if you factor out new functions factor out new variables is not easy",
    "start": "3202740",
    "end": "3209640"
  },
  {
    "text": "but it's better to have them with a name that's slightly off than actually not to have them and have like these big walls",
    "start": "3209640",
    "end": "3215700"
  },
  {
    "text": "of code where you haven't like no concept at all what's Happening Here",
    "start": "3215700",
    "end": "3220338"
  },
  {
    "text": "and um the other talk by Kate um from Echo conf",
    "start": "3220920",
    "end": "3226200"
  },
  {
    "text": "this year um which goes into bit into the direction of what she did in in the keynote here um abstraction patterns",
    "start": "3226200",
    "end": "3232920"
  },
  {
    "text": "like see in your code how you where you can like identify those structs and those",
    "start": "3232920",
    "end": "3238920"
  },
  {
    "text": "little abstractions that you can just factor out to actually get started to get a better View and this is not like I",
    "start": "3238920",
    "end": "3245640"
  },
  {
    "text": "take one big step from my messy code to the most beautiful code there's ever been this is an iterative process right",
    "start": "3245640",
    "end": "3252119"
  },
  {
    "text": "if you find some small things you factor out an abstraction and you suddenly see some of the other things where you can",
    "start": "3252119",
    "end": "3257400"
  },
  {
    "text": "still factor out more abstractions so the same for the ball and pedal that we had with the set well let's just make",
    "start": "3257400",
    "end": "3264359"
  },
  {
    "text": "it a class and then we suddenly see oh here's more things related to the through the border to the pedal let's just move this into the class and then",
    "start": "3264359",
    "end": "3271380"
  },
  {
    "text": "later you find more things that are related to those things so this is an iterative process and you don't have to",
    "start": "3271380",
    "end": "3276960"
  },
  {
    "text": "do it all in one run run this can be done over time right",
    "start": "3276960",
    "end": "3284300"
  },
  {
    "text": "any questions any comments I think we have like five minutes left",
    "start": "3284460",
    "end": "3290300"
  },
  {
    "text": "okay thank you very much",
    "start": "3292140",
    "end": "3297260"
  }
]