[
  {
    "text": "hello everyone I'm mads I design programming languages um that's a new C every year",
    "start": "10920",
    "end": "18720"
  },
  {
    "text": "we just put one out a couple of months ago so",
    "start": "18720",
    "end": "23800"
  },
  {
    "text": "everything I'm about to tell you is incredibly tentative okay cuz it's about",
    "start": "23800",
    "end": "30000"
  },
  {
    "text": "the next version and we're actually just sort of figuring out our own plans but",
    "start": "30000",
    "end": "37200"
  },
  {
    "text": "um there's a big benefit to talking about it early it's probably a couple benefits",
    "start": "37200",
    "end": "43520"
  },
  {
    "text": "but for me the great benefit is that the earlier we talk about it the more great",
    "start": "43520",
    "end": "49640"
  },
  {
    "text": "uh input we can get and course correction we can do and prioritization and so on so please please please tell",
    "start": "49640",
    "end": "57760"
  },
  {
    "text": "me your thoughts afterwards find me tell me ask any questions you have any suggestions you have because we still",
    "start": "57760",
    "end": "64320"
  },
  {
    "text": "have maybe you know eight or nine months to make",
    "start": "64320",
    "end": "70280"
  },
  {
    "text": "changes and um and we really do so one way to do that I know we can't all have",
    "start": "70280",
    "end": "76400"
  },
  {
    "text": "a one-on-one conversation in this room during this hour but um right after the talk I'll head up to the Microsoft booth",
    "start": "76400",
    "end": "83320"
  },
  {
    "text": "on the fifth floor and um I'll hang out",
    "start": "83320",
    "end": "88640"
  },
  {
    "text": "there and I invite you to to come and chat ask questions whatever you want any",
    "start": "88640",
    "end": "93840"
  },
  {
    "text": "thoughts you have based on this talk or or otherwise please please do um this is",
    "start": "93840",
    "end": "99920"
  },
  {
    "text": "this is a an information gathering exercise for me as well but first the information is going to go in that",
    "start": "99920",
    "end": "105600"
  },
  {
    "text": "direction I'm going to start by taking you to something ugly but",
    "start": "105600",
    "end": "110920"
  },
  {
    "text": "useful um uh so let's let's see let's head",
    "start": "110920",
    "end": "116799"
  },
  {
    "text": "to that was not what I expected to have happened let's head what is that the magnifier okay um let's head",
    "start": "116799",
    "end": "126360"
  },
  {
    "text": "to Bing um and look at so we deigned C",
    "start": "127640",
    "end": "133480"
  },
  {
    "text": "on GitHub right and uh with the participation of the um of the community",
    "start": "133480",
    "end": "139599"
  },
  {
    "text": "of many of you and that uh that includes features that not only are suggested by",
    "start": "139599",
    "end": "148239"
  },
  {
    "text": "people in the community but that are actually uh driven designed sometimes implemented by people who who do not",
    "start": "148239",
    "end": "155920"
  },
  {
    "text": "work for Microsoft but who just um love participating in in the C design um so",
    "start": "155920",
    "end": "163280"
  },
  {
    "text": "there's two GitHub repos that's the Roslin here rosling repo which is where the compiler is built and uh we track",
    "start": "163280",
    "end": "171159"
  },
  {
    "text": "our we track our plant in here we have this um we have this longer and longer",
    "start": "171159",
    "end": "177480"
  },
  {
    "text": "list of features uh that are currently being there's implementation",
    "start": "177480",
    "end": "184319"
  },
  {
    "text": "work going on with those um so this heading here of working set c those are",
    "start": "184319",
    "end": "190879"
  },
  {
    "text": "features that there are implementers working on you can see that's a pretty long list and we will say hello to",
    "start": "190879",
    "end": "198560"
  },
  {
    "text": "pretty much all of this list um today um some of them only with a single sentence",
    "start": "198560",
    "end": "205200"
  },
  {
    "text": "um and then the the broader picture you might get over on the C Lang repo which",
    "start": "205200",
    "end": "213280"
  },
  {
    "text": "is the repo for the language design right so we have a separate repo the code over here is documents and stuff um",
    "start": "213280",
    "end": "220760"
  },
  {
    "text": "and that's also like where where it all happens and uh this particular page is",
    "start": "220760",
    "end": "226720"
  },
  {
    "text": "where the active proposals can be found in the current state some of them are more complete than others uh they will",
    "start": "226720",
    "end": "233760"
  },
  {
    "text": "probably all change before they they make it into the product but you can see some really interesting stuff here or",
    "start": "233760",
    "end": "239439"
  },
  {
    "text": "EXT that sounds great dictionary Expressions I want some of those you know so but a lot of the stuff that's in",
    "start": "239439",
    "end": "244840"
  },
  {
    "text": "here is not yet being implemented it may not be",
    "start": "244840",
    "end": "250040"
  },
  {
    "text": "headed for um a c version soon or maybe ever you know so um just giving you some",
    "start": "250040",
    "end": "258880"
  },
  {
    "text": "pointers to where you can find out more uh after this talk and giving you an impression of where where are the",
    "start": "258880",
    "end": "264320"
  },
  {
    "text": "artifacts that we work from when we uh when we make C now",
    "start": "264320",
    "end": "271240"
  },
  {
    "text": "I'm going to demo C 14 for you I know I told you we haven't implemented it yet",
    "start": "271240",
    "end": "278560"
  },
  {
    "text": "but who's afraid of a little red squiggle you know we can we can still",
    "start": "278560",
    "end": "283800"
  },
  {
    "text": "demo it so I'm going to start with there are some big features and some small features um and there's one very big",
    "start": "283800",
    "end": "290400"
  },
  {
    "text": "feature and probably the most kind of controversial interesting which I'll save kind of for last because I just",
    "start": "290400",
    "end": "296759"
  },
  {
    "text": "want to take you through like the different kinds of things we do in in a g in a typical language release um which",
    "start": "296759",
    "end": "303960"
  },
  {
    "text": "which ranges from like oh something it's kind of annoying that you can't do this in C or this is a weird restriction",
    "start": "303960",
    "end": "310880"
  },
  {
    "text": "let's remove it it's like like just the paper cut things all the way up to",
    "start": "310880",
    "end": "316080"
  },
  {
    "text": "things we've thought about for multiple years and that are finally kind of coming to a",
    "start": "316080",
    "end": "321759"
  },
  {
    "text": "conclusion so part of our work as language designers is to you know try to",
    "start": "321880",
    "end": "327000"
  },
  {
    "text": "make sure that there's always something in the hopper for like there's always",
    "start": "327000",
    "end": "332759"
  },
  {
    "text": "like the big that we always spent some time in a given release working on things that aren't for that release so",
    "start": "332759",
    "end": "338840"
  },
  {
    "text": "that the big things can still happen even though we're on a on an everye cycle um I was really worried about that",
    "start": "338840",
    "end": "346440"
  },
  {
    "text": "when we went on on the every year cycle but it turns out it's actually not that hard so um so here we go if you have",
    "start": "346440",
    "end": "354360"
  },
  {
    "text": "questions along the way just feel free to yell or I don't know their mics they might work jump up and ask and if if",
    "start": "354360",
    "end": "361199"
  },
  {
    "text": "kind of if it's I feel like we're running out of time I'll I'll I'll um um",
    "start": "361199",
    "end": "366639"
  },
  {
    "text": "I guess cut it off but um but feel free to do so um so let's demo some of the",
    "start": "366639",
    "end": "374520"
  },
  {
    "text": "small to medium things in um in um C 14 the next C essentially by by seeing that",
    "start": "374520",
    "end": "382840"
  },
  {
    "text": "they are not there yet and lamenting it together okay so we can all go a so",
    "start": "382840",
    "end": "389199"
  },
  {
    "text": "let's start let's start with one that I think actually is is is is very cool you know we added collection Expressions there an",
    "start": "389199",
    "end": "395479"
  },
  {
    "text": "example here of something that works collection Expressions a couple versions ago they're really lovely I do you also",
    "start": "395479",
    "end": "401360"
  },
  {
    "text": "love love them do you use them a lot like who who has used a collection expression in here yes right it's good",
    "start": "401360",
    "end": "407840"
  },
  {
    "text": "finally finally things get less clunky around this so um it was kind of part of",
    "start": "407840",
    "end": "415039"
  },
  {
    "text": "the vision all all along to also have dictionary expressions and now we're now we know how we want to do it mostly we",
    "start": "415039",
    "end": "421960"
  },
  {
    "text": "have there's still some open open questions because isn't it really annoying that as soon as I get to a dictionary I can't there's no way to",
    "start": "421960",
    "end": "428560"
  },
  {
    "text": "like create a dictionary um with a collection expression um and essentially the thing",
    "start": "428560",
    "end": "436840"
  },
  {
    "text": "we're going to add syntactically is we we thought about should there be a completely separate kind of expression",
    "start": "436840",
    "end": "442080"
  },
  {
    "text": "for dictionaries and we're like no we let's just expand collection expressions and then they there's one more kind of",
    "start": "442080",
    "end": "447280"
  },
  {
    "text": "element they collection Expressions have two kinds of elements element right they have two kinds of",
    "start": "447280",
    "end": "454039"
  },
  {
    "text": "um uh things you can have in them they can have like a single element or they can have a spread element which is a dot",
    "start": "454039",
    "end": "459759"
  },
  {
    "text": "dot thing here and we just add another kind which is a I guess a key value",
    "start": "459759",
    "end": "465599"
  },
  {
    "text": "element um we should probably come up with a good name for it which is I'm associating key with this",
    "start": "465599",
    "end": "470919"
  },
  {
    "text": "value and you can list those out as well if you have something that is a key value pair as the as um the net type key",
    "start": "470919",
    "end": "478120"
  },
  {
    "text": "value pair sure you can pass that and but it's added in a dictionary way like think of it",
    "start": "478120",
    "end": "485400"
  },
  {
    "text": "as as using the indexer of the dictionary like indexing with the key",
    "start": "485400",
    "end": "490520"
  },
  {
    "text": "and assigning the value um and and spread elements as well",
    "start": "490520",
    "end": "495599"
  },
  {
    "text": "why can't we do that like that would be great so that that's what we are uh that's what we're currently building um",
    "start": "495599",
    "end": "503159"
  },
  {
    "text": "and um and there's some like there's some new design questions you have to face other",
    "start": "503159",
    "end": "510199"
  },
  {
    "text": "than syntax as well when you're talking about dictionaries um like what happens",
    "start": "510199",
    "end": "515399"
  },
  {
    "text": "if the same key is used twice in in a in a dictionary expression this blow up",
    "start": "515399",
    "end": "522599"
  },
  {
    "text": "this the first one win this the last one win you kind of have to decide on these things so people can trust them across",
    "start": "522599",
    "end": "529360"
  },
  {
    "text": "all the different dictionary types that is going going to support um let's actually do a",
    "start": "529360",
    "end": "537760"
  },
  {
    "text": "vote who would like like it to clash if you have the same key",
    "start": "537760",
    "end": "544120"
  },
  {
    "text": "twice okay wow who would like it to have",
    "start": "544120",
    "end": "549800"
  },
  {
    "text": "the first one win okay that's pretty clear who would like it to have the last one",
    "start": "549800",
    "end": "557160"
  },
  {
    "text": "wins okay that's what we do the last one wins that's what we decided to do um so it's interesting that so many",
    "start": "557160",
    "end": "564880"
  },
  {
    "text": "of you uh if if some of you can come up to me after and and talk me through that",
    "start": "564880",
    "end": "569959"
  },
  {
    "text": "that seems right to you the reason why we chose the last one wins uh what was",
    "start": "569959",
    "end": "575000"
  },
  {
    "text": "the reason again no um is",
    "start": "575000",
    "end": "580399"
  },
  {
    "text": "that we think the intuition similar to the intuition",
    "start": "580399",
    "end": "586240"
  },
  {
    "text": "around collection Expressions is that you add the elements it's true you can make like one by one that like we did",
    "start": "586240",
    "end": "593640"
  },
  {
    "text": "with collection initializers and and we think that this add the elements one by one into intuition is good even if it's",
    "start": "593640",
    "end": "600959"
  },
  {
    "text": "actually an immutable or readon dictionary and and they do need to all be added at once um there's still some",
    "start": "600959",
    "end": "607959"
  },
  {
    "text": "temporary collection being created behind the scenes where they add it one by one we feel like that has less",
    "start": "607959",
    "end": "613200"
  },
  {
    "text": "potential for blowing up code and having bugs that are hard to debug um if you",
    "start": "613200",
    "end": "618800"
  },
  {
    "text": "just know that the last one's going to win but maybe we're wrong so it seems like we're not we're certainly not in um",
    "start": "618800",
    "end": "625399"
  },
  {
    "text": "we're not in alignment with a European audience at this point",
    "start": "625399",
    "end": "630640"
  },
  {
    "text": "thank you for that um so that's that's currently being built and I I hope uh I",
    "start": "630640",
    "end": "636040"
  },
  {
    "text": "hope very much that it's going to go in um any any does anyone have a question",
    "start": "636040",
    "end": "641320"
  },
  {
    "text": "or something on this one um yes say last one week what happen",
    "start": "641320",
    "end": "650160"
  },
  {
    "text": "then is will update the first one or yeah if the if the last one wins uh the",
    "start": "650160",
    "end": "656760"
  },
  {
    "text": "way it works is that like all the I mean all the Expressions here still",
    "start": "656760",
    "end": "661800"
  },
  {
    "text": "get evaluated [Music] um",
    "start": "661800",
    "end": "667160"
  },
  {
    "text": "this the the first one will not necessarily get added to the actual dictionary there might be a a temporary",
    "start": "667160",
    "end": "673720"
  },
  {
    "text": "dictionary that gets built up but in in some sense it will be added right and then um and then it'll get overridden",
    "start": "673720",
    "end": "681360"
  },
  {
    "text": "that's that's what happens and because often times you don't the keys are computed you don't know it's hard to",
    "start": "681360",
    "end": "687200"
  },
  {
    "text": "it's hard to keep track of has this one already been added especially when you're doing a literal and and not",
    "start": "687200",
    "end": "693200"
  },
  {
    "text": "programmatically building up your dictionary where are you going to ask the question has this one already been added when you're in the middle of just",
    "start": "693200",
    "end": "699160"
  },
  {
    "text": "a a literal an expression so that's kind of why we why we aim for that yeah okay",
    "start": "699160",
    "end": "706680"
  },
  {
    "text": "was there another one I'll I'll take I'll take two and then move on",
    "start": "706680",
    "end": "712079"
  },
  {
    "text": "yes P curly bra rather than brackets",
    "start": "712120",
    "end": "720480"
  },
  {
    "text": "is the syns in Python it's curly brackets not square brackets can we have it more like",
    "start": "721040",
    "end": "727600"
  },
  {
    "text": "python I'm I'm paraphrasing a little um the syntax is fixed because uh because",
    "start": "727600",
    "end": "736680"
  },
  {
    "text": "we as soon as we decided that it's better to have dictionary expressions and collection Expressions unified into",
    "start": "736680",
    "end": "743600"
  },
  {
    "text": "one feature one of which we already shipped then it was kind of too late",
    "start": "743600",
    "end": "750959"
  },
  {
    "text": "I will say that when we did collection Expressions curly versus Square was a",
    "start": "750959",
    "end": "756199"
  },
  {
    "text": "big discussion and I was on team curly for a long time I think I actually caused the feature to slip by aversion",
    "start": "756199",
    "end": "763040"
  },
  {
    "text": "because I I kept insisting on curly braces and I eventually I realized I was",
    "start": "763040",
    "end": "769000"
  },
  {
    "text": "wrong so um so there you go you're here are your square brackets you're",
    "start": "769000",
    "end": "775839"
  },
  {
    "text": "welcome okay um now and I'm sorry if you're in the back and raising your hand",
    "start": "775839",
    "end": "782480"
  },
  {
    "text": "um yeah you should have come up front um let's look at some really small",
    "start": "782480",
    "end": "789160"
  },
  {
    "text": "features now um so uh just these things that people like oh",
    "start": "789160",
    "end": "796440"
  },
  {
    "text": "this keeps biting me so so so Lambda Expressions have been around since c 3 I",
    "start": "796440",
    "end": "802079"
  },
  {
    "text": "I talked about them yesterday and there's this long form where you give the type and everything and then there's",
    "start": "802079",
    "end": "807320"
  },
  {
    "text": "a short form with or without parenthesis you know you can still put parenthesis if you want where you emit the types but",
    "start": "807320",
    "end": "814480"
  },
  {
    "text": "what about modifiers on parameters there are more and more modifiers you can have on um you can you can have modifiers on",
    "start": "814480",
    "end": "821839"
  },
  {
    "text": "Lambda parameters right and um and up until now it's been the short form has",
    "start": "821839",
    "end": "827639"
  },
  {
    "text": "not allowed modifiers either so if you want if if you and that means that if you have something like an out parameter",
    "start": "827639",
    "end": "834680"
  },
  {
    "text": "um you're essentially forced to always use the long form if the delegate has an parameter you you must also put the out",
    "start": "834680",
    "end": "842800"
  },
  {
    "text": "um the out keyword in the in the parameter list of the Lambda and because you must do that that means now you also",
    "start": "842800",
    "end": "849480"
  },
  {
    "text": "must put all the types of all the things and so you fall off this cliff syntactically and we're like why can't",
    "start": "849480",
    "end": "854839"
  },
  {
    "text": "you just why can't we just let you uh put the why can't we just let you put modifiers in the short form as well so",
    "start": "854839",
    "end": "862519"
  },
  {
    "text": "um so we're GNA just fix that it's that kind that's what I mean by paper cuts it's just like fewer places people will",
    "start": "862519",
    "end": "869519"
  },
  {
    "text": "never consider this oh have you heard C is getting like they're getting modifiers in typ less lamp parameters",
    "start": "869519",
    "end": "877600"
  },
  {
    "text": "isn't that awesome it's more like fewer people will go like oh that sucks that's kind of that's annoying again so so we",
    "start": "877600",
    "end": "884600"
  },
  {
    "text": "try to always like improve some of those things and here's another one um so type",
    "start": "884600",
    "end": "892360"
  },
  {
    "text": "of in C you can you can pass an a generic without its type parameters",
    "start": "892360",
    "end": "898480"
  },
  {
    "text": "right you you and you get something for nameof when we introduced that somehow",
    "start": "898480",
    "end": "903800"
  },
  {
    "text": "you for some reason we decided that you always had to you always had to put a type argument",
    "start": "903800",
    "end": "911160"
  },
  {
    "text": "to the uh to a generic which is particularly stupid because the thing",
    "start": "911160",
    "end": "918240"
  },
  {
    "text": "you get out of it is a string list without any Trace those type parameters",
    "start": "918240",
    "end": "923560"
  },
  {
    "text": "there's no way that they can influence the outcome they're just like the stupid tax that you have to pay of time it's",
    "start": "923560",
    "end": "929959"
  },
  {
    "text": "like the language designers are making me do this over and over and over why so",
    "start": "929959",
    "end": "935560"
  },
  {
    "text": "that one we're fixing as well I'm I'm showing you this in in C 13 I will go and turn on the preview flag in a little",
    "start": "935560",
    "end": "942240"
  },
  {
    "text": "bit and we can see which one of ones of these are already in preview in um in the bits I have here which is a preview",
    "start": "942240",
    "end": "950319"
  },
  {
    "text": "version as well but those are things that will show up if if they aren't already they will show up in retail bits",
    "start": "950319",
    "end": "958360"
  },
  {
    "text": "of the of of net um in in the coming few months right and you can play with them",
    "start": "958360",
    "end": "963880"
  },
  {
    "text": "too null conditional assignment so we we have various kinds of null conditional",
    "start": "963880",
    "end": "970759"
  },
  {
    "text": "expressions in C for a couple releases now you question Dot and those kinds of things where we essentially do things",
    "start": "970759",
    "end": "977240"
  },
  {
    "text": "only if the receiver is not null um so you can",
    "start": "977240",
    "end": "985720"
  },
  {
    "text": "um uh so why can't you do that with assignment right assign assignment be pretty useful to say well I'm going to",
    "start": "985720",
    "end": "991560"
  },
  {
    "text": "assign to the to this property but only if C is not null like why do we have to",
    "start": "991560",
    "end": "997199"
  },
  {
    "text": "say if C is not null then do the assignment that would be that would be useful same for like um event um event",
    "start": "997199",
    "end": "1006360"
  },
  {
    "text": "sign up so so why do these not work and um we just going to just going to make",
    "start": "1006360",
    "end": "1011800"
  },
  {
    "text": "them work um no conditional assignment",
    "start": "1011800",
    "end": "1017560"
  },
  {
    "text": "um part we just added partial so we partial methods for a long time we just",
    "start": "1017560",
    "end": "1023360"
  },
  {
    "text": "added partial properties and partial indexers but why didn't we add partial events and partial Constructors um well",
    "start": "1023360",
    "end": "1032480"
  },
  {
    "text": "nobody asked us for them didn't get to it whatever so we just GNA now somebody asked us for them and we're like yeah",
    "start": "1032480",
    "end": "1038918"
  },
  {
    "text": "that should work it'll work as well so those are all like I think the",
    "start": "1038919",
    "end": "1044720"
  },
  {
    "text": "the dictionary Expressions is a pretty big one but the other ones are just like just for you to get a sense of stuff we",
    "start": "1044720",
    "end": "1050120"
  },
  {
    "text": "also do so that the so that the nuisances don't accumulate over time but",
    "start": "1050120",
    "end": "1055160"
  },
  {
    "text": "that hopefully we're keeping them in check right there'll be new nuisances introduced that we will deal with later",
    "start": "1055160",
    "end": "1061520"
  },
  {
    "text": "uh but you know and there but we we have to also like address some top ones of",
    "start": "1061520",
    "end": "1066880"
  },
  {
    "text": "them so it's not that we have like it's not that we have Telemetry and that we",
    "start": "1066880",
    "end": "1072240"
  },
  {
    "text": "we carefully triar which are the most the annoying nuisances or to most people",
    "start": "1072240",
    "end": "1079159"
  },
  {
    "text": "or whatever it's kind of like a I think this is cheap to fix and I've heard this a number of times let's do",
    "start": "1079159",
    "end": "1084799"
  },
  {
    "text": "that one sometimes it's even just like developer preference like I I want to I I for some reason I'm fired up about",
    "start": "1084799",
    "end": "1092280"
  },
  {
    "text": "this one let me go fix it in an afternoon um but here's a here's a thing",
    "start": "1092280",
    "end": "1098640"
  },
  {
    "text": "that I think is more uh impactful um which is addressing the cliff that we",
    "start": "1098640",
    "end": "1106880"
  },
  {
    "text": "always had with auto properties so when you have an auto property you you the",
    "start": "1106880",
    "end": "1112640"
  },
  {
    "text": "the whole point is you don't Implement anything it's just implemented for you and yes you can have them with Setters",
    "start": "1112640",
    "end": "1119039"
  },
  {
    "text": "or without or with inits and there a few a few things you can Tinker with but by and large they generate a backing field",
    "start": "1119039",
    "end": "1126840"
  },
  {
    "text": "and they generate the accessors that go into the backing field and if you don't like it if you even want to do a little",
    "start": "1126840",
    "end": "1133679"
  },
  {
    "text": "thing like like trim the the white space off of a string before you before you",
    "start": "1133679",
    "end": "1139120"
  },
  {
    "text": "store it on the setter then you fall off the cliff and you have to you have to declare your own backing field and both",
    "start": "1139120",
    "end": "1145600"
  },
  {
    "text": "accessors and and now your backing field is exposed to all the other members in the uh in the class so that they might",
    "start": "1145600",
    "end": "1152840"
  },
  {
    "text": "accidentally use the backing field instead of the property and get themselves into trouble because something isn't verified and you know",
    "start": "1152840",
    "end": "1159679"
  },
  {
    "text": "fall off the cliff it's annoying can we can we remove the cliff and um and that is that is indeed",
    "start": "1159679",
    "end": "1168480"
  },
  {
    "text": "what this features is attempting to do we're saying you can be an auto property even if you have accessors um in the",
    "start": "1168480",
    "end": "1176880"
  },
  {
    "text": "sense that we will we will generate um a backing field if you use",
    "start": "1176880",
    "end": "1182720"
  },
  {
    "text": "the new field keyword we will generate a backing field for you and",
    "start": "1182720",
    "end": "1189240"
  },
  {
    "text": "um and you can still have accessors and then interact with that backing field",
    "start": "1189240",
    "end": "1194440"
  },
  {
    "text": "through the field keyword and it would actually be interesting to see this Fe you're working today so and it does so",
    "start": "1194440",
    "end": "1202320"
  },
  {
    "text": "I'm going to go and um and turn on language and preview and we can play",
    "start": "1202320",
    "end": "1208679"
  },
  {
    "text": "with it for a bit we can play with that feature and um and you can ask questions",
    "start": "1208679",
    "end": "1214000"
  },
  {
    "text": "about it and so on um and then we can go through and see which are the things that are actually already that that we",
    "start": "1214000",
    "end": "1219840"
  },
  {
    "text": "have actually already built and that are available in preview um so you can see we um dictionary Expressions not yet",
    "start": "1219840",
    "end": "1226840"
  },
  {
    "text": "still being worked on uh um the um uh the the lampda parameter thing",
    "start": "1226840",
    "end": "1234520"
  },
  {
    "text": "actually already working the name of thing already working still working on the uh null conditional thing still",
    "start": "1234520",
    "end": "1240320"
  },
  {
    "text": "working on the partials I think we just had a design meeting about that one um a week or two",
    "start": "1240320",
    "end": "1245400"
  },
  {
    "text": "ago that's still in flux but hey so uh so actually this feature is already implemented it we when we shipped C 13",
    "start": "1245400",
    "end": "1253640"
  },
  {
    "text": "this feature was already implemented but under the Lang version preview flag you saw me change the Lang ver you know",
    "start": "1253640",
    "end": "1259080"
  },
  {
    "text": "about language and preview that's that's how we preview language features is in the in the retail bits just behind the",
    "start": "1259080",
    "end": "1267919"
  },
  {
    "text": "flag um so you can so this one you can just you can get out your laptop right now and and turn on language and preview",
    "start": "1267919",
    "end": "1274600"
  },
  {
    "text": "and and start playing with it if you want so so let's play with this feature a little bit so so field you see field",
    "start": "1274600",
    "end": "1280480"
  },
  {
    "text": "is now blue which means it's a keyword at least right here C has many",
    "start": "1280480",
    "end": "1286159"
  },
  {
    "text": "contextual keywords I think every single blue thing here is",
    "start": "1286159",
    "end": "1291840"
  },
  {
    "text": "a contextual keyword in this in the curries here none is a true keyword in C there are only keywords because of where",
    "start": "1291840",
    "end": "1297400"
  },
  {
    "text": "they occur um that's how we roll so but",
    "start": "1297400",
    "end": "1302919"
  },
  {
    "text": "um but Fiel now designates a backing field probably I don't know it shouldn't show the compiler generated name in",
    "start": "1302919",
    "end": "1309919"
  },
  {
    "text": "Visual Studio but uh whatever that refers to the backing field of this",
    "start": "1309919",
    "end": "1317039"
  },
  {
    "text": "property um and if I and I can still it's an auto property because it has an autogenerated backing field and if I",
    "start": "1317039",
    "end": "1323640"
  },
  {
    "text": "want I can still uh choose to only Implement some of one of the accessors",
    "start": "1323640",
    "end": "1328720"
  },
  {
    "text": "and the other one still gets Auto implemented uh to the default Behavior which is you know just return what was",
    "start": "1328720",
    "end": "1335520"
  },
  {
    "text": "in the field um so that that just works",
    "start": "1335520",
    "end": "1344320"
  },
  {
    "text": "now it's a bit more of a breaking change than we usually have done and we are",
    "start": "1344919",
    "end": "1350440"
  },
  {
    "text": "interested in whe How much of a problem that is um",
    "start": "1350440",
    "end": "1356200"
  },
  {
    "text": "what we currently did in the in the preview bits is so why is it a breaking",
    "start": "1356200",
    "end": "1361480"
  },
  {
    "text": "change first of all let's say that we have a let's say that we have",
    "start": "1361480",
    "end": "1366960"
  },
  {
    "text": "a um a field called field um in C 13 that would mean that",
    "start": "1366960",
    "end": "1376559"
  },
  {
    "text": "this would this would bind to that field that that that would just be a variable name like any others and now you can see",
    "start": "1376559",
    "end": "1383360"
  },
  {
    "text": "it's blue but we give a warning saying hey in C this this changed in C 13 this would have",
    "start": "1383360",
    "end": "1391360"
  },
  {
    "text": "referenced the field that is called field so just beware like we're giving",
    "start": "1391360",
    "end": "1397320"
  },
  {
    "text": "you a warning as an as a sign that there's a breaking change happening here",
    "start": "1397320",
    "end": "1402880"
  },
  {
    "text": "um that's that's some I mean it's not like you don't probably",
    "start": "1402880",
    "end": "1409279"
  },
  {
    "text": "don't all have Fields all over the place called field and many people have different naming conventions and so on",
    "start": "1409279",
    "end": "1414320"
  },
  {
    "text": "it's not like everyone's going to be hit by this breaking change but it's also not like",
    "start": "1414320",
    "end": "1420880"
  },
  {
    "text": "inconceivable that there are things out there called field right there's there are surprising number of fields that use",
    "start": "1420880",
    "end": "1427919"
  },
  {
    "text": "the field word um I just used it in one um and you know Agriculture and and uh",
    "start": "1427919",
    "end": "1436080"
  },
  {
    "text": "particle physics and you know um there are lots of fields around",
    "start": "1436080",
    "end": "1442559"
  },
  {
    "text": "so um we're going to go with it and then we're going to Tinker with what's the",
    "start": "1442559",
    "end": "1449240"
  },
  {
    "text": "breaking changes experience but anything like if you can try it out um or if you",
    "start": "1449240",
    "end": "1455120"
  },
  {
    "text": "have thoughts on that that that's a kind of feedback that would also be really useful now is uh instead of in a year",
    "start": "1455120",
    "end": "1460720"
  },
  {
    "text": "when we've already shipped it and um and the crap storm is upon us um so um",
    "start": "1460720",
    "end": "1469399"
  },
  {
    "text": "This Is Us attempting to push the boundaries a little bit for how how we can evolve",
    "start": "1469399",
    "end": "1476559"
  },
  {
    "text": "C the more you already have in a language the harder it is to add new features that don't somehow",
    "start": "1476559",
    "end": "1484240"
  },
  {
    "text": "interact with some code that already exists out there and and we know of a couple of",
    "start": "1484240",
    "end": "1491200"
  },
  {
    "text": "situations in the past where we sort of regret what we did in the name of backwards compatibility there are some",
    "start": "1491200",
    "end": "1497960"
  },
  {
    "text": "features uh I I like to bring up like the original one that everybody knows about",
    "start": "1497960",
    "end": "1503360"
  },
  {
    "text": "is VAR um maybe you don't know about it but if you if you declare a class called",
    "start": "1503360",
    "end": "1509720"
  },
  {
    "text": "VAR lowercase V VAR then where that is in scope the VAR",
    "start": "1509720",
    "end": "1515559"
  },
  {
    "text": "keyword doesn't work when you say VAR it refers to that class instead so somebody can turn off a language feature by",
    "start": "1515559",
    "end": "1522200"
  },
  {
    "text": "declaring a class somewhere and there are people who have turned off people don't like VAR I don't like implicit",
    "start": "1522200",
    "end": "1527640"
  },
  {
    "text": "types they so they turn it off for the whole team by sticking in a useless class somewhere and then nobody can use",
    "start": "1527640",
    "end": "1533840"
  },
  {
    "text": "the feature like I've seen it it's not I'm not joking I've seen this for real it's like that's not how languages",
    "start": "1533840",
    "end": "1539080"
  },
  {
    "text": "should work that's spooky action at a distance right something over there can make this mean something else",
    "start": "1539080",
    "end": "1547200"
  },
  {
    "text": "um but the but the one that's probably the that's you can live with that nobody has VAR types anymore and we even worn",
    "start": "1547200",
    "end": "1553840"
  },
  {
    "text": "on lowercase uh class names nowadays um but",
    "start": "1553840",
    "end": "1559399"
  },
  {
    "text": "the one I really regret is discards um they're a little underscore that you can",
    "start": "1559399",
    "end": "1565120"
  },
  {
    "text": "use when you need a variable but you don't care about about it you just need to provide a variable um so it's really",
    "start": "1565120",
    "end": "1572279"
  },
  {
    "text": "useful sometimes but if somebody declared something called underscore because underscore is a valid identifier",
    "start": "1572279",
    "end": "1578919"
  },
  {
    "text": "then it's not a discard and you can't use discards because that name is taken and that means that when you use",
    "start": "1578919",
    "end": "1584600"
  },
  {
    "text": "discards it's it's um it's something you have to worry about",
    "start": "1584600",
    "end": "1590200"
  },
  {
    "text": "is it actually a discard if you if you squint you can see if it's blue or not but it's just a little line I um it's",
    "start": "1590200",
    "end": "1597120"
  },
  {
    "text": "hard to see um those those details so it if we had been less worried about saying",
    "start": "1597120",
    "end": "1603480"
  },
  {
    "text": "okay sorry everything everything named underscore is now a discard then we",
    "start": "1603480",
    "end": "1610279"
  },
  {
    "text": "would have broken more people and they would maybe have been a fixer that you could go and and change the name of the",
    "start": "1610279",
    "end": "1615880"
  },
  {
    "text": "of the underscore things to something else and it would have been it and the feature would have been much better",
    "start": "1615880",
    "end": "1622480"
  },
  {
    "text": "so we're thinking to maybe lean into that kind of thing a little more but I'm interested in your thoughts on it so",
    "start": "1622480",
    "end": "1628200"
  },
  {
    "text": "this is sort of like the the feature that we're going to try to experiment with that approach with",
    "start": "1628200",
    "end": "1633919"
  },
  {
    "text": "that more bold approach uh in okay",
    "start": "1633919",
    "end": "1639880"
  },
  {
    "text": "um that's it for the smaller features I have a few more that I want to mention",
    "start": "1639880",
    "end": "1645200"
  },
  {
    "text": "in slides and then we'll get into something a little more grand",
    "start": "1645200",
    "end": "1650720"
  },
  {
    "text": "um uh so uh let's go to PowerPoint let's re",
    "start": "1650720",
    "end": "1657000"
  },
  {
    "text": "um we are me project so a few more uh",
    "start": "1657000",
    "end": "1662200"
  },
  {
    "text": "features I just want to mention um first class spans those of you who've been working with",
    "start": "1662200",
    "end": "1667559"
  },
  {
    "text": "spans um they haven't really been fully embraced with the language the conversions of spans are like user",
    "start": "1667559",
    "end": "1674399"
  },
  {
    "text": "defined conversions in the libraries and that causes some problems uh it's with extension methods",
    "start": "1674399",
    "end": "1682200"
  },
  {
    "text": "and other interactions we're just going to make them those conversions language conversions that's also a little bit of a breaking change but it means that",
    "start": "1682200",
    "end": "1689080"
  },
  {
    "text": "spans work better all over become so popular now that um that we should",
    "start": "1689080",
    "end": "1694200"
  },
  {
    "text": "probably just embrace them um compound assignment in when you have userdefined",
    "start": "1694200",
    "end": "1701159"
  },
  {
    "text": "operators um and you say plus equals where you can overwrite the plus and then",
    "start": "1701159",
    "end": "1706679"
  },
  {
    "text": "um uh that is being used in the plus equals as well but sometimes if you have really",
    "start": "1706679",
    "end": "1712200"
  },
  {
    "text": "large types uh then it would be better if plus equals could be itself over",
    "start": "1712200",
    "end": "1720480"
  },
  {
    "text": "overloaded because then you could mutate the original value instead of uh",
    "start": "1720480",
    "end": "1726840"
  },
  {
    "text": "creating a new one if they're big and expensive then you can save a lot of allocation and memory and so on so uh",
    "start": "1726840",
    "end": "1732880"
  },
  {
    "text": "for instance the tensor work that is going on currently with tensors are very big value types um they really want that",
    "start": "1732880",
    "end": "1740039"
  },
  {
    "text": "so we we're going to um try to chase being able to declare your declare plus",
    "start": "1740039",
    "end": "1746640"
  },
  {
    "text": "equals separately and then if you have that then that's what gets picked instead of using the plus operator for",
    "start": "1746640",
    "end": "1753159"
  },
  {
    "text": "compound um assignment I'm saying the plus operator but it should work for other operators as",
    "start": "1753159",
    "end": "1759480"
  },
  {
    "text": "well um fast racing honorable mention um if all goes well this will not affect",
    "start": "1759480",
    "end": "1765360"
  },
  {
    "text": "the language but when we did async um it was all a compiler trick uh so we",
    "start": "1765360",
    "end": "1771159"
  },
  {
    "text": "rewrite your very beautiful code into a fabulously complicated State",
    "start": "1771159",
    "end": "1776440"
  },
  {
    "text": "machine that uh we then pass on to the runtime and it knows nothing about it",
    "start": "1776440",
    "end": "1782080"
  },
  {
    "text": "which means it just gets some complicated code it can't know that it's async so it has a hard time",
    "start": "1782080",
    "end": "1789840"
  },
  {
    "text": "optimizing uh it making assumptions about that that will help it optimize um",
    "start": "1789840",
    "end": "1795799"
  },
  {
    "text": "we throw away too much information uh there's a project now in the runtime",
    "start": "1795799",
    "end": "1801360"
  },
  {
    "text": "to implement async directly in the runtime and then there's that that is",
    "start": "1801360",
    "end": "1807039"
  },
  {
    "text": "complicated in and of itself and then we also have to make it seamlessly work together with the existing",
    "start": "1807039",
    "end": "1812320"
  },
  {
    "text": "implementation of async which is already out there in in compiled code all over the world we can't tell the whole world",
    "start": "1812320",
    "end": "1818080"
  },
  {
    "text": "to recompile because we changed the implementation of a feature and so if that all works out in C 14 or",
    "start": "1818080",
    "end": "1825840"
  },
  {
    "text": "later then async will just become much faster um and much better because the",
    "start": "1825840",
    "end": "1831840"
  },
  {
    "text": "runtime Now can do smart things at runtime with it um so uh but that should",
    "start": "1831840",
    "end": "1840279"
  },
  {
    "text": "the the speed should be the only thing you notice um I bet we will end up having a having conversations about",
    "start": "1840279",
    "end": "1846760"
  },
  {
    "text": "Corner cases that that it's hard to make work exactly the same and so on so there",
    "start": "1846760",
    "end": "1852200"
  },
  {
    "text": "might be slight breaking changes around it but I hope not um I hope not but I I think probably a",
    "start": "1852200",
    "end": "1859000"
  },
  {
    "text": "few so so that's that's uh the list of small things and",
    "start": "1859000",
    "end": "1865960"
  },
  {
    "text": "then Tada extensions extension all the things is sort of like the big feature",
    "start": "1866679",
    "end": "1873240"
  },
  {
    "text": "that we're going to start on in C 14 if we can okay so since time and Memorial",
    "start": "1873240",
    "end": "1879679"
  },
  {
    "text": "you've had extension methods and that's it and for as long as they have been",
    "start": "1879679",
    "end": "1884760"
  },
  {
    "text": "there people have been asking for okay so what about exension prob ities what if I want to make my extension method",
    "start": "1884760",
    "end": "1890440"
  },
  {
    "text": "static actually extension indexers can you do that and we're like shouldn't be so hard and then we try and then we fail",
    "start": "1890440",
    "end": "1897880"
  },
  {
    "text": "okay and we've tried and failed a number of times now but this time we're going to",
    "start": "1897880",
    "end": "1903720"
  },
  {
    "text": "succeed and um and I will show you",
    "start": "1903720",
    "end": "1909720"
  },
  {
    "text": "how so um just to be clear we are hoping to do this in sh 14",
    "start": "1909720",
    "end": "1918559"
  },
  {
    "text": "but we have a lot of work ahead of us we have um one and a half people working full-time on implementing the feature um",
    "start": "1918559",
    "end": "1927000"
  },
  {
    "text": "and we have the design pretty much worked out though you can all tell me things that will help us like adjust but",
    "start": "1927000",
    "end": "1935200"
  },
  {
    "text": "um I don't expect all of this feature to be in C 14 even if we get something out",
    "start": "1935200",
    "end": "1940799"
  },
  {
    "text": "I I expect that it will be per member kind like we will Implement one kind of",
    "start": "1940799",
    "end": "1946000"
  },
  {
    "text": "member or two kinds of members at a time until like and we may stop at some point",
    "start": "1946000",
    "end": "1951760"
  },
  {
    "text": "when we're like nobody wants extension Constructors or whatever it is like we might not do all of them ever um but",
    "start": "1951760",
    "end": "1957840"
  },
  {
    "text": "even if we do it'll be like a trickle out over multiple releases based on what we think is most urgent or or easiest to",
    "start": "1957840",
    "end": "1964840"
  },
  {
    "text": "do okay so so what I'm about to show you is kind of like the the full vision of it but that is almost certainly not what",
    "start": "1964840",
    "end": "1972000"
  },
  {
    "text": "you'll get in C 14 that's sort of like an end goal it's it's proving to ourselves that if we want to go all the",
    "start": "1972000",
    "end": "1977960"
  },
  {
    "text": "way this approach will work for it so first why what's why is it so hard going",
    "start": "1977960",
    "end": "1986279"
  },
  {
    "text": "from extension methods to other kinds of members what what's so hard about it and",
    "start": "1986279",
    "end": "1992000"
  },
  {
    "text": "essentially it's because of the way we did extension methods to begin with this is this is complicated because they they",
    "start": "1992000",
    "end": "1998240"
  },
  {
    "text": "do get complicated I like I had to I had to break it in many lines so that the",
    "start": "1998240",
    "end": "2003760"
  },
  {
    "text": "font would be big enough that you can see it in the back and this is one of the existing exension method it's a select method right it take and and it",
    "start": "2003760",
    "end": "2011039"
  },
  {
    "text": "has but if you look at it it has some elements that are about it being an",
    "start": "2011039",
    "end": "2018639"
  },
  {
    "text": "extension method and some elements that are about how it's how it works when",
    "start": "2018639",
    "end": "2025960"
  },
  {
    "text": "it's called as an instance members you can kind of separate them into two parts right these are the things that are",
    "start": "2025960",
    "end": "2031279"
  },
  {
    "text": "about oh I'm an extension method method on that type right I'm saying um",
    "start": "2031279",
    "end": "2038480"
  },
  {
    "text": "iable of t- source for some t- Source that's a type type argument uh for that",
    "start": "2038480",
    "end": "2044399"
  },
  {
    "text": "purpose that that that's what I'm in extension on and the rest of it really",
    "start": "2044399",
    "end": "2049638"
  },
  {
    "text": "is if you remove that stuff and let's yank it out into a comment all that",
    "start": "2049639",
    "end": "2055079"
  },
  {
    "text": "extension method specific stuff then what's left is really an instance method that looks like the method you think",
    "start": "2055079",
    "end": "2061960"
  },
  {
    "text": "you're calling when you're call it as an extension method right it it's the method it's pretending to be that's the",
    "start": "2061960",
    "end": "2067398"
  },
  {
    "text": "remaining stuff there um and so if we so",
    "start": "2067399",
    "end": "2073240"
  },
  {
    "text": "that suggests a good approach right if you if you can if we can find a way to specify the extension stuff",
    "start": "2073240",
    "end": "2080118"
  },
  {
    "text": "separately and then then then you this approach generalizes to okay that look",
    "start": "2080119",
    "end": "2087000"
  },
  {
    "text": "just looks like an instance method then I guess an extension property should just look like an instance property then",
    "start": "2087000",
    "end": "2092679"
  },
  {
    "text": "I guess an extension operator overload should just look like an operator overload like we can essentially",
    "start": "2092679",
    "end": "2100359"
  },
  {
    "text": "the as long as we can isolate the strange stuff then it's easy to say",
    "start": "2100359",
    "end": "2108200"
  },
  {
    "text": "well it looks just the same as if you were writing it in the class itself at",
    "start": "2108200",
    "end": "2113440"
  },
  {
    "text": "least as far as the signature of it is is uh is concerned right so that makes",
    "start": "2113440",
    "end": "2120160"
  },
  {
    "text": "it much easier to understand um how extension methods work and it kind of uh",
    "start": "2120160",
    "end": "2127000"
  },
  {
    "text": "extension members work and it applies orthogonally to all member kinds it's",
    "start": "2127000",
    "end": "2132480"
  },
  {
    "text": "just a little question of but so we can we can explore that a bit just like assuming that we find some way of doing",
    "start": "2132480",
    "end": "2138560"
  },
  {
    "text": "the stuff in the comment like um here's an extension property here's an",
    "start": "2138560",
    "end": "2143920"
  },
  {
    "text": "extension indexer it just looks like the thing it is right an extension index is just an indexer where somebody else",
    "start": "2143920",
    "end": "2150359"
  },
  {
    "text": "somewhere said where it's going to go what it's going to apply to extension static members would be really useful",
    "start": "2150359",
    "end": "2155760"
  },
  {
    "text": "too um so it's just that little now it's just that little syntactic matter of",
    "start": "2155760",
    "end": "2161359"
  },
  {
    "text": "well how and where do you say that extension stuff and we felt we were left with two",
    "start": "2161359",
    "end": "2169839"
  },
  {
    "text": "options neither of which were really appealing and we had Wars about it on",
    "start": "2169839",
    "end": "2179160"
  },
  {
    "text": "the design team to be honest because well not Wars so we were all still alive",
    "start": "2179160",
    "end": "2184400"
  },
  {
    "text": "but um because it was easy to see the problems with the other approach and we",
    "start": "2184400",
    "end": "2192359"
  },
  {
    "text": "and in the end we were like okay we should actually take seriously that both of these have problems and maybe there's",
    "start": "2192359",
    "end": "2198160"
  },
  {
    "text": "a third option of course it was someone from the community who who suggested the third option and So",
    "start": "2198160",
    "end": "2204160"
  },
  {
    "text": "eventually um just kind of previewing what we're going to go through here eventually we picked like this the",
    "start": "2204160",
    "end": "2210440"
  },
  {
    "text": "surprising middle ground that emerged and it may take a little squinting to get used to but the more the more I've",
    "start": "2210440",
    "end": "2216720"
  },
  {
    "text": "been playing with it over the last couple months the more I like it myself so that's at least probably a sign that",
    "start": "2216720",
    "end": "2222440"
  },
  {
    "text": "I'm I don't know living in an echo chamber or something or maybe that it's that is a quite good idea so first",
    "start": "2222440",
    "end": "2228960"
  },
  {
    "text": "approach is to stick the stick the the extension",
    "start": "2228960",
    "end": "2235359"
  },
  {
    "text": "stuff on each member so that's a bit like philosophically it's like what we",
    "start": "2235359",
    "end": "2240880"
  },
  {
    "text": "do today every extension member has all the extension stuff for it on it inside",
    "start": "2240880",
    "end": "2247000"
  },
  {
    "text": "of the static class so we could just say put some syntax like this extension",
    "start": "2247000",
    "end": "2253480"
  },
  {
    "text": "whatever type parameters we need for the underlying type the underlying type itself as a",
    "start": "2253480",
    "end": "2258599"
  },
  {
    "text": "parameter just like in extension methods today and then followed by the the full",
    "start": "2258599",
    "end": "2264240"
  },
  {
    "text": "member declaration and you I don't know what you think that",
    "start": "2264240",
    "end": "2271839"
  },
  {
    "text": "and we we could squibble about exactly how that should be all arranged",
    "start": "2271839",
    "end": "2277319"
  },
  {
    "text": "but it kind of feels it's a big mouthful and it's a while you have to read quite far to see where the actual member",
    "start": "2277319",
    "end": "2283560"
  },
  {
    "text": "starts and like oh you know you know 120 characters over oh it was an",
    "start": "2283560",
    "end": "2289599"
  },
  {
    "text": "extension indexer I get it now should they and it kind of it's sort",
    "start": "2289599",
    "end": "2295800"
  },
  {
    "text": "of like a preamble like an attribute should is it really does it seem right that it goes before even the the",
    "start": "2295800",
    "end": "2302200"
  },
  {
    "text": "modifiers or should but if it goes after the modifiers then I don't know it it's",
    "start": "2302200",
    "end": "2308480"
  },
  {
    "text": "a and there's a lot of angle brackets and forends that kind of might get jumbled up with all the angle brackets",
    "start": "2308480",
    "end": "2313680"
  },
  {
    "text": "and forends in the member itself and so on feels feels heavy feels impenetrable",
    "start": "2313680",
    "end": "2320800"
  },
  {
    "text": "and the other option is to go the other way and say hey let's let's somehow put it at the type declaration level okay so",
    "start": "2320800",
    "end": "2325839"
  },
  {
    "text": "let's let's instead of just having a static class wrapping it all let's have",
    "start": "2325839",
    "end": "2331400"
  },
  {
    "text": "type level declarations for each underlying type",
    "start": "2331400",
    "end": "2336800"
  },
  {
    "text": "okay so we say actually this instead of We Now we move away from the Paradigm of having them in static classes we say",
    "start": "2336800",
    "end": "2342880"
  },
  {
    "text": "there are new kinds of type declarations they're extension declarations they each have their own name um and they they are",
    "start": "2342880",
    "end": "2349920"
  },
  {
    "text": "then where you say oh this is an extension on non-generic iable this is an extension on generic",
    "start": "2349920",
    "end": "2355599"
  },
  {
    "text": "iable um and then all the members in there are for that okay so that's more",
    "start": "2355599",
    "end": "2361839"
  },
  {
    "text": "appealing in a sense um you get a separation between the extension stuff",
    "start": "2361839",
    "end": "2367240"
  },
  {
    "text": "and the member stuff that's visible and nice but it gets it still",
    "start": "2367240",
    "end": "2374480"
  },
  {
    "text": "gets difficult there there are many many things about it that aren't so great um",
    "start": "2374480",
    "end": "2380200"
  },
  {
    "text": "maybe if we were starting from scratch now doing extension members all over this would be fine uh even though once",
    "start": "2380200",
    "end": "2387720"
  },
  {
    "text": "we tried applying it to real world scenarios and now you know for instance system. link. inumerable",
    "start": "2387720",
    "end": "2394640"
  },
  {
    "text": "which that one has 14 I I think 14 different uh underlying types there are",
    "start": "2394640",
    "end": "2402440"
  },
  {
    "text": "extension methods for 14 different receiver types in that so that would",
    "start": "2402440",
    "end": "2407640"
  },
  {
    "text": "mean we would have to create 14 separate extension declarations come up with a name for each oh here's here's",
    "start": "2407640",
    "end": "2414839"
  },
  {
    "text": "int inumerable here's key value pair inumerable and those kinds of things and it would also",
    "start": "2414839",
    "end": "2421359"
  },
  {
    "text": "mean actually that we would we would lose the connection",
    "start": "2421359",
    "end": "2427960"
  },
  {
    "text": "to uh the current extension methods both in terms of kind of like mental model",
    "start": "2427960",
    "end": "2433480"
  },
  {
    "text": "but also we would lose all hope of there being a compatible path to move from the",
    "start": "2433480",
    "end": "2438599"
  },
  {
    "text": "old syntax to the new this would have different semantics um even just from being living",
    "start": "2438599",
    "end": "2444920"
  },
  {
    "text": "in declarations that have that have different names from from the ones they have today and so people would have to",
    "start": "2444920",
    "end": "2452960"
  },
  {
    "text": "keep their old extension methods around forever or break their consumers",
    "start": "2452960",
    "end": "2458359"
  },
  {
    "text": "so that ended up also being a an important argument against it so it's not just the syntax in and of itself but",
    "start": "2458359",
    "end": "2464200"
  },
  {
    "text": "it's also in context of what's already there and both in terms of code and mental model so both kind of",
    "start": "2464200",
    "end": "2470560"
  },
  {
    "text": "suck and then his name is Joseph said well can we",
    "start": "2470560",
    "end": "2476680"
  },
  {
    "text": "just add an extra layer if it shouldn't go up there and it shouldn't go in here can we just like put something in the",
    "start": "2476680",
    "end": "2482560"
  },
  {
    "text": "middle and that's and that's what we're going to do so essentially uh we stay in",
    "start": "2482560",
    "end": "2487800"
  },
  {
    "text": "static classes there can be all the other usual things in the static classes even your old extension methods if you",
    "start": "2487800",
    "end": "2492839"
  },
  {
    "text": "want but there's a new kind of Declaration you can have in a static class and that's an extension declaration and it's Anonymous it's just",
    "start": "2492839",
    "end": "2499880"
  },
  {
    "text": "the extension keyword any type parameters it needs and then and then that this",
    "start": "2499880",
    "end": "2506920"
  },
  {
    "text": "parameter um and then inside of it then you can a Level separated from all that Gunk",
    "start": "2506920",
    "end": "2514920"
  },
  {
    "text": "that's where you can then declare your members with instance syntax or with the usual syntax from from when they're just",
    "start": "2514920",
    "end": "2521640"
  },
  {
    "text": "declared in normal classes okay make sense so if pushing it up is too far pushing",
    "start": "2521640",
    "end": "2529200"
  },
  {
    "text": "it down is too far put it in the middle and I Know It introduces an extra",
    "start": "2529200",
    "end": "2534599"
  },
  {
    "text": "nesting level um and sometimes that might be annoying",
    "start": "2534599",
    "end": "2539839"
  },
  {
    "text": "but we do have the option we may not do it out of the gate but we have the option of saying okay let's it seems",
    "start": "2539839",
    "end": "2545920"
  },
  {
    "text": "that people get annoyed when they only have one underlying type for all the extension members in a given like they",
    "start": "2545920",
    "end": "2552400"
  },
  {
    "text": "get annoyed about having to have that extra layer anyway well maybe we can give you a short hand for removing the",
    "start": "2552400",
    "end": "2558480"
  },
  {
    "text": "layer in those cases or the other way around I have a bunch of extension",
    "start": "2558480",
    "end": "2564880"
  },
  {
    "text": "members that are the only extension member for their given type like um that",
    "start": "2564880",
    "end": "2570440"
  },
  {
    "text": "you see that as well sometimes well maybe there a short hand for then pushing it down getting rid of the curries and pushing it down onto that",
    "start": "2570440",
    "end": "2576839"
  },
  {
    "text": "memory so we have that option later if we want to but the general",
    "start": "2576839",
    "end": "2582200"
  },
  {
    "text": "case I think works do what do you",
    "start": "2582200",
    "end": "2586720"
  },
  {
    "text": "think you think I I two thumbs",
    "start": "2587280",
    "end": "2593119"
  },
  {
    "text": "up if you love it raise your",
    "start": "2593640",
    "end": "2599280"
  },
  {
    "text": "hand okay if you hate it raise your hand okay let's talk afterwards",
    "start": "2599800",
    "end": "2608559"
  },
  {
    "text": "the one the denter is always this is a language design meeting uh secret the",
    "start": "2608559",
    "end": "2613800"
  },
  {
    "text": "denter is always the most uh interesting person in the room um we very much",
    "start": "2613800",
    "end": "2619280"
  },
  {
    "text": "encourage our language design team to descent and whenever we have a like a a rise of hand like this we call it a read",
    "start": "2619280",
    "end": "2625800"
  },
  {
    "text": "of the room because it's not a formal vote and somebody's like especially if they haven't spoken up in the meeting",
    "start": "2625800",
    "end": "2631880"
  },
  {
    "text": "yet and they're like I want something else if it's one or two and it's like oh",
    "start": "2631880",
    "end": "2637119"
  },
  {
    "text": "awesome maybe there's something we haven't thought about please tell us more so please tell me more when we get there um but",
    "start": "2637119",
    "end": "2645720"
  },
  {
    "text": "um yeah this is the this is the general approach that we're going with that's still not the whole design um we have",
    "start": "2646760",
    "end": "2653960"
  },
  {
    "text": "I've just been showing you dot dot dot for all the bodies so far because there a lot of code to have on screen now let's talk about the bodies of extension",
    "start": "2653960",
    "end": "2662119"
  },
  {
    "text": "members uh yeah so those were the we have these groupings here and then we",
    "start": "2662119",
    "end": "2667319"
  },
  {
    "text": "have extension members inside and then could be in principle any member kind with as long as they're not as long as",
    "start": "2667319",
    "end": "2674920"
  },
  {
    "text": "they're not instance members with state so we can't have instance Fields extension instance Fields because who",
    "start": "2674920",
    "end": "2680559"
  },
  {
    "text": "creates them and where do they live and stuff but other than",
    "start": "2680559",
    "end": "2685920"
  },
  {
    "text": "that now what happens in the bodies here is another",
    "start": "2687200",
    "end": "2693240"
  },
  {
    "text": "discussion the what we went with is is continuity from current extension",
    "start": "2693240",
    "end": "2700800"
  },
  {
    "text": "methods the underlying type the receiver is specified as a parameter we kept that",
    "start": "2700800",
    "end": "2707559"
  },
  {
    "text": "from when it really was a parameter in a static method um so it's just it has the same",
    "start": "2707559",
    "end": "2713520"
  },
  {
    "text": "intuition it also means that if there are any extra annotations um a ref modifier an",
    "start": "2713520",
    "end": "2719520"
  },
  {
    "text": "attribute a nullable annotation something like that the natural place is to put it because it's a",
    "start": "2719520",
    "end": "2725800"
  },
  {
    "text": "parameter if um and so what we decided is that just like current extension",
    "start": "2725800",
    "end": "2732400"
  },
  {
    "text": "methods the way you the way you refer to the uh receiver is with that parameter",
    "start": "2732400",
    "end": "2737920"
  },
  {
    "text": "name okay so we just and that's probably not surprising if you're used to writing extension methods so it's called source",
    "start": "2737920",
    "end": "2744079"
  },
  {
    "text": "and I refer to it as Source but and you see you see um you",
    "start": "2744079",
    "end": "2749359"
  },
  {
    "text": "see Source you know just that that's how we refer to the the the receiver but",
    "start": "2749359",
    "end": "2754800"
  },
  {
    "text": "there was a school of thought um that I was certainly part of uh for for a while",
    "start": "2754800",
    "end": "2760559"
  },
  {
    "text": "which is well since the member signatures look exactly like they do in",
    "start": "2760559",
    "end": "2766160"
  },
  {
    "text": "a class shouldn't the body also look like it would be in a class and when you're in a class you refer to the",
    "start": "2766160",
    "end": "2773079"
  },
  {
    "text": "receiver with this keyword and in fact you can even omit it and just you know",
    "start": "2773079",
    "end": "2778800"
  },
  {
    "text": "uh refer to your neighboring members as a simple name instead of saying this do",
    "start": "2778800",
    "end": "2784839"
  },
  {
    "text": "method you can just say method shouldn't that we preserve that also and have that",
    "start": "2784839",
    "end": "2791119"
  },
  {
    "text": "consistency and essentially it comes down to like one way of thinking of it is come it comes down to do I do I want",
    "start": "2791119",
    "end": "2798240"
  },
  {
    "text": "to be able to copy paste from existing extension methods to uh to new extension members or do I",
    "start": "2798240",
    "end": "2805839"
  },
  {
    "text": "want to be able to copy paste from existing instance members to extension",
    "start": "2805839",
    "end": "2811440"
  },
  {
    "text": "members right which which um consistency is more important",
    "start": "2811440",
    "end": "2817559"
  },
  {
    "text": "and at the end of the day we went with consistency with existing extension methods this is and and this again helps",
    "start": "2817559",
    "end": "2825240"
  },
  {
    "text": "us it it's just a mental model and you you just have to pick one but it also helps us with the actual coexistence of",
    "start": "2825240",
    "end": "2833000"
  },
  {
    "text": "those two features it helps this be a full air if you will to the old feature",
    "start": "2833000",
    "end": "2839200"
  },
  {
    "text": "it makes it so that we can let you compatibly migrate all of your old extension methods into this new syntax",
    "start": "2839200",
    "end": "2845720"
  },
  {
    "text": "so that without them breaking their consumers um instead of you having to leave them",
    "start": "2845720",
    "end": "2852920"
  },
  {
    "text": "behind and not be able to co-mingle with their new extension property uh",
    "start": "2852920",
    "end": "2860520"
  },
  {
    "text": "um kind of uh family members right so this way you can take your existing",
    "start": "2860520",
    "end": "2865720"
  },
  {
    "text": "extensions move them into a new syntax if you want to add now add other",
    "start": "2865720",
    "end": "2870920"
  },
  {
    "text": "extension members with them and it all kind of sits in one place using the new syntax um and nobody gets gets no no",
    "start": "2870920",
    "end": "2878040"
  },
  {
    "text": "existing customer gets upset so it feels like the best compromise for us but I'm just trying to give you all the trade-offs as we've had them um so you",
    "start": "2878040",
    "end": "2886720"
  },
  {
    "text": "understand why we arrived at this and so that when you give me feedback that there's something we're not thinking about or that we were thinking about",
    "start": "2886720",
    "end": "2892960"
  },
  {
    "text": "wrong then um then you you you get to start from that level so to speak right",
    "start": "2892960",
    "end": "2901559"
  },
  {
    "text": "yes uh um couldn't you like are you",
    "start": "2905640",
    "end": "2910720"
  },
  {
    "text": "asking in this design could a user just do",
    "start": "2910720",
    "end": "2915400"
  },
  {
    "text": "that yeah so essentially could you just use this as the parameter name and then use and then this inside as well um with",
    "start": "2921920",
    "end": "2930440"
  },
  {
    "text": "the current design no because this is a keyword in C but you could write at this",
    "start": "2930440",
    "end": "2937839"
  },
  {
    "text": "where at is the the thing that quotes um but um",
    "start": "2937839",
    "end": "2945200"
  },
  {
    "text": "we just to have the TW best to have the best of the Two Worlds um we could potentially allow",
    "start": "2945200",
    "end": "2953079"
  },
  {
    "text": "something like that we talked about allowing that on top like allow also allowing you to use this but",
    "start": "2953079",
    "end": "2960000"
  },
  {
    "text": "um let's see if this doesn't do the trick and then if uh if if it turns out",
    "start": "2960000",
    "end": "2966520"
  },
  {
    "text": "that there's that people have good reason like there's a lot of people like can I just write this then maybe we will",
    "start": "2966520",
    "end": "2973880"
  },
  {
    "text": "introduce an alternative Syntax for it but I really I don't want to introduce two ways of doing the same thing out of",
    "start": "2973880",
    "end": "2980079"
  },
  {
    "text": "the gate sometimes you end up with two ways of doing a thing but it should be because",
    "start": "2980079",
    "end": "2985880"
  },
  {
    "text": "um one came up later that was better or like um",
    "start": "2985880",
    "end": "2992760"
  },
  {
    "text": "so yeah we it's that that kind of thing is on the it is on the radar a little bit that we",
    "start": "2992760",
    "end": "2998960"
  },
  {
    "text": "have options of doing something like that so yeah good point okay",
    "start": "2998960",
    "end": "3005359"
  },
  {
    "text": "um that's extensions um oh uh let's take one more",
    "start": "3005359",
    "end": "3011079"
  },
  {
    "text": "question what happens create",
    "start": "3011079",
    "end": "3017760"
  },
  {
    "text": "exion great question what happened if you create an extension method or",
    "start": "3024240",
    "end": "3029799"
  },
  {
    "text": "member and then in a in a later release of the type you're extending that type",
    "start": "3029799",
    "end": "3035880"
  },
  {
    "text": "itself gets a member uh that Shadows it really well the same thing happens as",
    "start": "3035880",
    "end": "3041240"
  },
  {
    "text": "with the extension methods today and that brings me to a thing that I I should mention which is today extension methods are also",
    "start": "3041240",
    "end": "3049119"
  },
  {
    "text": "static methods and that means if somebody in a later version Shadows them",
    "start": "3049119",
    "end": "3054599"
  },
  {
    "text": "at least there's another syntax that you can still call the extension method with you can just like not call it as an extension method but as the static",
    "start": "3054599",
    "end": "3060480"
  },
  {
    "text": "method it also is it does break so it you can be an extension method can",
    "start": "3060480",
    "end": "3065839"
  },
  {
    "text": "always be overwritten by something coming in on the underlying type and that is that problem will persist with",
    "start": "3065839",
    "end": "3071400"
  },
  {
    "text": "this design as well the the important thing is well and maybe that is",
    "start": "3071400",
    "end": "3076440"
  },
  {
    "text": "unfortunate in our itself but but what helps is if there's a way for you to still refer to the original extension",
    "start": "3076440",
    "end": "3082280"
  },
  {
    "text": "method um and so uh that's",
    "start": "3082280",
    "end": "3087839"
  },
  {
    "text": "that's ongoing for us to try to decide what's the best we call it disambiguation syntax but it's not",
    "start": "3087839",
    "end": "3094240"
  },
  {
    "text": "really just for disambiguation what's the best Syntax for saying even though it's hidden get me that extension",
    "start": "3094240",
    "end": "3101920"
  },
  {
    "text": "member and the challenge with designing that the reason why it's not just",
    "start": "3101920",
    "end": "3108160"
  },
  {
    "text": "straightforward is that it's it we can't just like call the static method when",
    "start": "3108160",
    "end": "3114480"
  },
  {
    "text": "you haven't declared it as a static method like um but",
    "start": "3114480",
    "end": "3120319"
  },
  {
    "text": "also what if the what if it's an extension operator or an extension Constructors how do you like call that",
    "start": "3120319",
    "end": "3128280"
  },
  {
    "text": "directly what is the Syntax for that so that is so we have to come up with a sy",
    "start": "3128280",
    "end": "3133359"
  },
  {
    "text": "just like we came up with a Syntax for declaration that's independent that works independently of the member kind",
    "start": "3133359",
    "end": "3138599"
  },
  {
    "text": "we have to come up with a Syntax for disambiguation that works independently of the member kind and and it's",
    "start": "3138599",
    "end": "3145119"
  },
  {
    "text": "certainly possible we have many many candidates that satisfy that but they kind of poke Us in the eyes we don't",
    "start": "3145119",
    "end": "3150559"
  },
  {
    "text": "love any of them so that's something that's an ongoing thing so thanks for pointing that out",
    "start": "3150559",
    "end": "3155839"
  },
  {
    "text": "um it's definitely Our intention that there is a way to um to pick an",
    "start": "3155839",
    "end": "3162359"
  },
  {
    "text": "extension method that isn't otherwise the thing that is picked or that is ambiguous with another extension method",
    "start": "3162359",
    "end": "3168000"
  },
  {
    "text": "or whatever it might be we just haven't landed that part of the design yet so any ideas there are also like come and",
    "start": "3168000",
    "end": "3174799"
  },
  {
    "text": "come and tell me please if you have a a good idea there thank you okay I'm going to have one more topic uh so let's um",
    "start": "3174799",
    "end": "3184559"
  },
  {
    "text": "that I'm going to touch on just briefly so let's uh let's look at like we've we've seen some examples of extension",
    "start": "3184559",
    "end": "3190839"
  },
  {
    "text": "member kinds you could also Imagine actually extension Constructors um and I think it would be",
    "start": "3190839",
    "end": "3198680"
  },
  {
    "text": "kind of cool but extension Constructors are probably the the one thing that would look different than its instance",
    "start": "3198680",
    "end": "3205680"
  },
  {
    "text": "member cousin because in an instance member a Constructor is part of",
    "start": "3205680",
    "end": "3210720"
  },
  {
    "text": "like it calls its base Constructors and it's part of this whole uh process that",
    "start": "3210720",
    "end": "3216200"
  },
  {
    "text": "when you get to the body of the Constructor the object has already been created",
    "start": "3216200",
    "end": "3222000"
  },
  {
    "text": "and we think that is hard to make right we think extension Constructors if we do",
    "start": "3222000",
    "end": "3228960"
  },
  {
    "text": "them should be more like a fancy static Factory so the so the signature of it",
    "start": "3228960",
    "end": "3234319"
  },
  {
    "text": "would still look like a Constructor but you don't don't get to call base or anything you don't get to have base of",
    "start": "3234319",
    "end": "3239359"
  },
  {
    "text": "this calls instead you you get like a method body where you actually create the object and return it that feels",
    "start": "3239359",
    "end": "3246400"
  },
  {
    "text": "better then you can create an object of the underlying type using one of the underlying types Constructors or a",
    "start": "3246400",
    "end": "3251799"
  },
  {
    "text": "factory method for it or whatever you like then you get to choose the means of construction you can and you can Tinker",
    "start": "3251799",
    "end": "3256920"
  },
  {
    "text": "with it whichever way you like and then return it that seems better than trying to like squeeze it into uh what",
    "start": "3256920",
    "end": "3264160"
  },
  {
    "text": "Constructors do but it's still been but the benefit of it would still be that your users can then use the new keyword",
    "start": "3264160",
    "end": "3271920"
  },
  {
    "text": "to create the object in a way that they couldn't on the underlying tip right so you're so you're adding the right",
    "start": "3271920",
    "end": "3278079"
  },
  {
    "text": "surface area but the the means of implementation is different okay um",
    "start": "3278079",
    "end": "3284359"
  },
  {
    "text": "another thing extension operators um I mentioned the t uh tensor people before",
    "start": "3284359",
    "end": "3290760"
  },
  {
    "text": "they really want this as well um uh they want and and you think about like think",
    "start": "3290760",
    "end": "3297960"
  },
  {
    "text": "about a matrix type sometimes you can do math on the",
    "start": "3297960",
    "end": "3303440"
  },
  {
    "text": "elements in a matrix and sometimes there's something else but wouldn't it be neat that if you could do",
    "start": "3303440",
    "end": "3309880"
  },
  {
    "text": "math if the element type is one that you can do math on then you can also do math on the matrices right having that kind",
    "start": "3309880",
    "end": "3316640"
  },
  {
    "text": "of that kind of um declaration well an extension operator could do that because",
    "start": "3316640",
    "end": "3322359"
  },
  {
    "text": "it could it could this one doesn't but it could apply to I numerable of T where",
    "start": "3322359",
    "end": "3328520"
  },
  {
    "text": "T colon I number like the the math",
    "start": "3328520",
    "end": "3333839"
  },
  {
    "text": "interfaces so where so if the underlying type or where the underlying type supports adding and multiplying for",
    "start": "3333839",
    "end": "3340640"
  },
  {
    "text": "instance you could specify that then this extension method applies and you can also add and multiply the the",
    "start": "3340640",
    "end": "3348079"
  },
  {
    "text": "matrices or whatever math you want to do on them so it gives this way of",
    "start": "3348079",
    "end": "3353280"
  },
  {
    "text": "properties of of element types proper to Bubble Up to the surface area of of a",
    "start": "3353280",
    "end": "3361400"
  },
  {
    "text": "the a compound type in neat ways and this is just like a simple example of that where if it happens to be an Nal of",
    "start": "3361400",
    "end": "3368160"
  },
  {
    "text": "int then it has a plus operator where you can add the add an INT and it go it adds to all the elements right um just",
    "start": "3368160",
    "end": "3375280"
  },
  {
    "text": "as a very as a trivial example of that and speaking of operators should we",
    "start": "3375280",
    "end": "3381200"
  },
  {
    "text": "allow userdefined conversion operators like um",
    "start": "3381200",
    "end": "3388240"
  },
  {
    "text": "should and are uh is it this is one of those it might be controversial just because imp you know usually to find",
    "start": "3388319",
    "end": "3395280"
  },
  {
    "text": "conversions are controversial in general because it can be a bit unpredictable what happens in code when there are",
    "start": "3395280",
    "end": "3401520"
  },
  {
    "text": "these extra conversions that might apply um could it all of a sudden make existing calls ambiguous if there's a",
    "start": "3401520",
    "end": "3408039"
  },
  {
    "text": "new conversion that comes in and that kind of stuff so maybe we shouldn't do it but on the other hand sometimes it",
    "start": "3408039",
    "end": "3413599"
  },
  {
    "text": "might be useful so scenarios or dangers we we'd love to hear about them we'll probably not do this in C 14 but it will",
    "start": "3413599",
    "end": "3420319"
  },
  {
    "text": "be on the table at some point and we'll have to decide do the dangers outweigh the benefits that kind of stuff but if",
    "start": "3420319",
    "end": "3427920"
  },
  {
    "text": "we want it we can do it okay two minutes left let's talk about",
    "start": "3427920",
    "end": "3433880"
  },
  {
    "text": "unions um so we're not going to do unions in in C 14 we still don't know",
    "start": "3433880",
    "end": "3440039"
  },
  {
    "text": "how to do them what are unions even uh people disagree on this point even so um",
    "start": "3440039",
    "end": "3446200"
  },
  {
    "text": "functional programmers have something like this and that is how that's what they have instead of objectoriented",
    "start": "3446200",
    "end": "3452240"
  },
  {
    "text": "inheritance they're like I have a type called U and it can be either an A or a B okay but it can be nothing else so",
    "start": "3452240",
    "end": "3459079"
  },
  {
    "text": "it's kind of a Clos list it's it's exhaustive and then they do their fancy pattern matching and they know that when",
    "start": "3459079",
    "end": "3464440"
  },
  {
    "text": "they checked for a and they checked for B they don't have to complain about you not having checked all the things it's",
    "start": "3464440",
    "end": "3469960"
  },
  {
    "text": "exhaustive and that's a really useful thing that we don't have with uh with inheritance so maybe we should have that",
    "start": "3469960",
    "end": "3476680"
  },
  {
    "text": "and then they also have fancy short syntax and maybe fancy short syntax is also cool so those are kind of the two",
    "start": "3476680",
    "end": "3483599"
  },
  {
    "text": "benefits we might get from functional style unions and then you can create an A and it's a u and we could merge it",
    "start": "3483599",
    "end": "3490640"
  },
  {
    "text": "with object rer programming by having this mean inheritance like a inherits from you and we you could even maybe add",
    "start": "3490640",
    "end": "3497839"
  },
  {
    "text": "members and stuff as well um but we also guarantee the exhaustiveness and give",
    "start": "3497839",
    "end": "3502880"
  },
  {
    "text": "you the neat thing maybe there's a struck version that is more efficient that's a case for records so maybe we",
    "start": "3502880",
    "end": "3508839"
  },
  {
    "text": "could do that for un for unions as well but it has problems so maybe not um",
    "start": "3508839",
    "end": "3516079"
  },
  {
    "text": "there's also a completely different approach to unions which some of you might know from typescript which is that a union is just is not like a separate",
    "start": "3516079",
    "end": "3523640"
  },
  {
    "text": "type you declare it's just something you can create from other types whenever you need it uh this right here this this",
    "start": "3523640",
    "end": "3530079"
  },
  {
    "text": "argument this this local variable is an A or a b and that's just you you create",
    "start": "3530079",
    "end": "3536440"
  },
  {
    "text": "the union Types on the fly or maybe there's something in between where you declare the unions but instead of A and",
    "start": "3536440",
    "end": "3543160"
  },
  {
    "text": "B being new things you also declare you can declare a union between two existing A and B types we may do any all or none",
    "start": "3543160",
    "end": "3550200"
  },
  {
    "text": "of these um we're exploring currently we're like this this one here is the",
    "start": "3550200",
    "end": "3555280"
  },
  {
    "text": "most feasible the union classes it's the one that we know we think we know how to solve all the technical problems because",
    "start": "3555280",
    "end": "3560799"
  },
  {
    "text": "that's what F shab already does and how it compiles it so we can we can steal um so we EXP exploring the details of that",
    "start": "3560799",
    "end": "3568000"
  },
  {
    "text": "design and we may we may go do it uh at the same time we want to also keep thinking about the technical problems",
    "start": "3568000",
    "end": "3574119"
  },
  {
    "text": "that the other ones have and eventually one day we will pick a winner and we'll",
    "start": "3574119",
    "end": "3579680"
  },
  {
    "text": "do it or do a couple of them if they fit nicely together uh we're on this journey",
    "start": "3579680",
    "end": "3584760"
  },
  {
    "text": "we're making progress it's going to take a while I'm always very interested in your thoughts so even though I don't",
    "start": "3584760",
    "end": "3590559"
  },
  {
    "text": "have a lot to show I'm I'm putting it here at the end just to please ask you if you have thoughts",
    "start": "3590559",
    "end": "3597240"
  },
  {
    "text": "come and find me and tell me um and that's a good way to end the talk again",
    "start": "3597240",
    "end": "3603920"
  },
  {
    "text": "I will walk up to the Microsoft booth on level five right after the talk come and",
    "start": "3603920",
    "end": "3610119"
  },
  {
    "text": "chat with me there or hunt me down at another time during the rest of the conference because I know you all have",
    "start": "3610119",
    "end": "3615760"
  },
  {
    "text": "thoughts and I want to hear them thank you all have a great rest of your conference",
    "start": "3615760",
    "end": "3622279"
  }
]