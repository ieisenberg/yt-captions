[
  {
    "text": "before they release it I'm not going to trust any of the features that that they've said that they're going to release I've been bitten by this before",
    "start": "5520",
    "end": "12400"
  },
  {
    "text": "they say they're going to build some amazing features and they pull them out of the language at the last minute I",
    "start": "12400",
    "end": "17680"
  },
  {
    "text": "have an example of that later on as well so while we are going to touch on some C 13 feature uh I can't promise that",
    "start": "17680",
    "end": "24359"
  },
  {
    "text": "they're actually going to make it to the language which is why we're going to go back and talk a little bit about highlights from C 8 for first and the",
    "start": "24359",
    "end": "31000"
  },
  {
    "text": "reason I want to do this is because there are some changes in C 8 that are improved upon in newer versions as well",
    "start": "31000",
    "end": "37719"
  },
  {
    "text": "and they tend to do this with every version of C they introduce a feature that's either new or it builds on an",
    "start": "37719",
    "end": "43559"
  },
  {
    "text": "older one to improve that functionality some of the features in C 8 are less important than others like",
    "start": "43559",
    "end": "50920"
  },
  {
    "text": "default interface methods I'm I rarely use that but that required a runtime change what I do use though is switch",
    "start": "50920",
    "end": "57719"
  },
  {
    "text": "Expressions which is a way for us to Define patterns and use pattern matching",
    "start": "57719",
    "end": "62879"
  },
  {
    "text": "have a lot of examples of this in just a moment they introduce a further less",
    "start": "62879",
    "end": "68080"
  },
  {
    "text": "useful features or some that are important in different situations but one that's really important is nullable",
    "start": "68080",
    "end": "74119"
  },
  {
    "text": "reference types again this changes how the compiler looks at our code not only",
    "start": "74119",
    "end": "79640"
  },
  {
    "text": "does it change how we build our applications but we can avoid having some really nasty",
    "start": "79640",
    "end": "85000"
  },
  {
    "text": "problems the third and finally important feature in my opinion is asynchronous dreams a synchronous programming was",
    "start": "85000",
    "end": "90920"
  },
  {
    "text": "first introduced in C 5 so versions many versions and many years after that they",
    "start": "90920",
    "end": "96159"
  },
  {
    "text": "still improve upon this language feature to introduce Concepts like streaming data using for each Loops to subscribe",
    "start": "96159",
    "end": "103560"
  },
  {
    "text": "to messages arriving into the application is synchronously which is quite amazing and then there's a lot more",
    "start": "103560",
    "end": "110200"
  },
  {
    "text": "features like being the eighth iteration of the language there's quite a lot of features here and there's quite hard to",
    "start": "110200",
    "end": "115520"
  },
  {
    "text": "digest all of this so we're going to spend some time talking about a couple of features here and then build upon",
    "start": "115520",
    "end": "121799"
  },
  {
    "text": "that using C 9 10 11 and 12 as well so I'd like to spend some time talking about the nullable reference types which",
    "start": "121799",
    "end": "128119"
  },
  {
    "text": "is probably the second most important thing next to pattern matching n",
    "start": "128119",
    "end": "133400"
  },
  {
    "text": "reference types is really just a way to tell the compiler that you're now going to look at all my reference types A",
    "start": "133400",
    "end": "139599"
  },
  {
    "text": "little bit differently without assuming that things can be said to null the compiler will",
    "start": "139599",
    "end": "145480"
  },
  {
    "text": "look at my reference types and assume they will always always be set to an instance and if you try to set something",
    "start": "145480",
    "end": "151400"
  },
  {
    "text": "to null the compiler is going to smack you on the fingers unless you explicitly say that you're allowing this to be null",
    "start": "151400",
    "end": "158760"
  },
  {
    "text": "now I mean most of us have probably run into this issue before anyone in here never seen this",
    "start": "158760",
    "end": "164879"
  },
  {
    "text": "before you're either lying or it's your first week as a developer and I welcome you to this amazing world you're going",
    "start": "164879",
    "end": "171159"
  },
  {
    "text": "to see this in a couple of weeks so this here is problematic and nullable reference or null reference",
    "start": "171159",
    "end": "176680"
  },
  {
    "text": "exceptions is probably one of the most expensive problems ever introduced so I'm going to jump over to visual studio",
    "start": "176680",
    "end": "183000"
  },
  {
    "text": "I have a solution here or a project this is a file new project for",
    "start": "183000",
    "end": "188280"
  },
  {
    "text": "net 8 could have been net 9 as well but there's one important change here from net 6 and onwards there's this attribute",
    "start": "188280",
    "end": "194920"
  },
  {
    "text": "or this setting saying we want to enable nullable and this is by default on all new projects in net what this means is",
    "start": "194920",
    "end": "201280"
  },
  {
    "text": "that the compiler will now look at all my reference types differently so if I open a file in this project if I use my",
    "start": "201280",
    "end": "209519"
  },
  {
    "text": "if I code incorrectly which I sometimes tend to do I'm going to get some",
    "start": "209519",
    "end": "215280"
  },
  {
    "text": "warnings and um how many of you in here open this warnings Tab and attend to all",
    "start": "215280",
    "end": "220879"
  },
  {
    "text": "your warnings all the time oh my God so many",
    "start": "220879",
    "end": "226439"
  },
  {
    "text": "liars there's a fix for this so that we actually attend to them we can treat them as errors and the compiler will",
    "start": "227840",
    "end": "234920"
  },
  {
    "text": "fail at least a handful of you uh are are actually looking at your warnings which is great and this language feature",
    "start": "234920",
    "end": "241120"
  },
  {
    "text": "will now warn me that this class has two publicly exposed properties and it",
    "start": "241120",
    "end": "246360"
  },
  {
    "text": "cannot deem that I've set these to an a valid instance what the compiler is actually",
    "start": "246360",
    "end": "251480"
  },
  {
    "text": "doing is that it's assuming that string is now not supposed to be null and there's nothing in this class that dictates that I've set it to a value so",
    "start": "251480",
    "end": "258239"
  },
  {
    "text": "the compiler has no clue or cannot promise that I've set it to a value I could mark it as optional or ually say",
    "start": "258239",
    "end": "264440"
  },
  {
    "text": "that this is a nullable reference type just like we've done with value types before and this could be with any reference type really with any class",
    "start": "264440",
    "end": "271000"
  },
  {
    "text": "doesn't have to be a string so now with a question mark here I've moved this warning to whoever's consuming last name",
    "start": "271000",
    "end": "277880"
  },
  {
    "text": "if they access properties on the string without null checking they will get a warning as an example if I scroll up I",
    "start": "277880",
    "end": "286199"
  },
  {
    "text": "actually doing that up here so now I have a warning up here that's saying you should probably null check this because I cannot promise that this won't throw a",
    "start": "286199",
    "end": "293080"
  },
  {
    "text": "null reference exception which is quite amazing that was a state of all of this in in C 8 but then there's a couple of",
    "start": "293080",
    "end": "301680"
  },
  {
    "text": "things here that's annoying because I don't really want to change the contract of this class the way to get rid of this",
    "start": "301680",
    "end": "307000"
  },
  {
    "text": "warning would have been to introduce a Constructor to move that that responsibility of setting this to a",
    "start": "307000",
    "end": "312600"
  },
  {
    "text": "value to the Constructor we can now see here that you should probably set first name to a value that would require that",
    "start": "312600",
    "end": "318479"
  },
  {
    "text": "I take this as a parameter and then set this property to that now the problem",
    "start": "318479",
    "end": "324720"
  },
  {
    "text": "here is that I've now changed how I create an instance of this every consumer of this class now will have to update this with which is quite annoying",
    "start": "324720",
    "end": "331120"
  },
  {
    "text": "in my opinion because that would require a lot of work if I'm using object initializers all over my project then or",
    "start": "331120",
    "end": "337960"
  },
  {
    "text": "even Json destabilizing that would be a little bit tricky so instead in C 11 it",
    "start": "337960",
    "end": "343880"
  },
  {
    "text": "took a couple of versions but they improved upon this and introduce another keyword which is required so I can now",
    "start": "343880",
    "end": "350360"
  },
  {
    "text": "say that well I'm going to require whoever creates an instance of this be it you do that through a object",
    "start": "350360",
    "end": "356160"
  },
  {
    "text": "initializer or Json deserialization that that deserialization or that object",
    "start": "356160",
    "end": "361680"
  },
  {
    "text": "initialization has to set this to a value otherwise there's going to be well you can't do it with an object",
    "start": "361680",
    "end": "367240"
  },
  {
    "text": "initializer and the Json der serializer should throw an exception so it wasn't up until C 11",
    "start": "367240",
    "end": "374400"
  },
  {
    "text": "which is last year or two years ago where this feature got a little bit more complete so now I'm going to be required",
    "start": "374400",
    "end": "381479"
  },
  {
    "text": "to set this to an instance there's also a thing called in it only instead of using set which means that once I've set",
    "start": "381479",
    "end": "388280"
  },
  {
    "text": "this to a value in an object initializer I can no longer change the value it's immutable after that which is good if",
    "start": "388280",
    "end": "394319"
  },
  {
    "text": "we're working in multi-threaded environments or using async and a weight and changing things from different",
    "start": "394319",
    "end": "399960"
  },
  {
    "text": "threads I'm going to say the same required keyword to this other class and we'll see how this is going to be used",
    "start": "399960",
    "end": "405560"
  },
  {
    "text": "in just a moment now because the null reference exceptions were probably not happening in this class they were probably happening somewhere",
    "start": "405560",
    "end": "412120"
  },
  {
    "text": "else and if I scroll up here again and show you this code piece what I could do is that I could say well I know that",
    "start": "412120",
    "end": "418120"
  },
  {
    "text": "this have been deserialized let's just assume that I had some code on the lines above that deserialized this from a text",
    "start": "418120",
    "end": "423199"
  },
  {
    "text": "file and I know that this has been set to an instance I can tell the compiler that damn it I know better and there is",
    "start": "423199",
    "end": "428960"
  },
  {
    "text": "no more warning the problem here is that I very rarely know better than the compiler and so we probably shouldn't do",
    "start": "428960",
    "end": "435759"
  },
  {
    "text": "that this is not called the damage operator it's the null forgiving operator what I can do though is either",
    "start": "435759",
    "end": "441400"
  },
  {
    "text": "use null conditional or I can introduce a null check so the compiler introduces",
    "start": "441400",
    "end": "446479"
  },
  {
    "text": "a concept called null State static analysis to keep keep track of if I've performed a null check or not so I could",
    "start": "446479",
    "end": "452479"
  },
  {
    "text": "say that if person. details. last name is null I want to continue and do",
    "start": "452479",
    "end": "458479"
  },
  {
    "text": "something else or continue to the next one in the iterator and then the warning disappears so now I've introduced a null",
    "start": "458479",
    "end": "463919"
  },
  {
    "text": "check and the compiler knows that I've done this doesn't have to rely on an if statement this could also be for example",
    "start": "463919",
    "end": "470440"
  },
  {
    "text": "passing this into an argument null exception throw if null and then take",
    "start": "470440",
    "end": "475599"
  },
  {
    "text": "person. details. last name and it would now be smart enough to know",
    "start": "475599",
    "end": "481240"
  },
  {
    "text": "that if I pass something into this method that's null this method is decorated with an attribute saying that",
    "start": "481240",
    "end": "486680"
  },
  {
    "text": "if this was null I'm going to throw an exception meaning we will never reach this line if this was null so the",
    "start": "486680",
    "end": "492240"
  },
  {
    "text": "compiler is trying to be super clever and rely on attributes set on different methods and helpers in both net uh and",
    "start": "492240",
    "end": "498360"
  },
  {
    "text": "in your code as well so that's good what's interesting here is that this will now let me find potential problems",
    "start": "498360",
    "end": "504960"
  },
  {
    "text": "in the code much faster but back with c h this feature wasn't really felt complete we had to do a lot of",
    "start": "504960",
    "end": "512159"
  },
  {
    "text": "workarounds to get this work nicely and get rid of those warnings and actually find these problems and of course I have",
    "start": "512159",
    "end": "519240"
  },
  {
    "text": "a method down here at the bottom as well where I say that I return null and I shouldn't because this method indicates",
    "start": "519240",
    "end": "524880"
  },
  {
    "text": "that this is going to return an inumerable which is a reference type and without specifying a question mark it's",
    "start": "524880",
    "end": "530720"
  },
  {
    "text": "allowed to be null if I were to specify a question mark here and say that this is optional the warning would go",
    "start": "530720",
    "end": "536560"
  },
  {
    "text": "somewhere else and of course I can tell compiler that damn it I know better I promise that this isn't null and then",
    "start": "536560",
    "end": "544440"
  },
  {
    "text": "that's problematic the warning disappears but someone's going to have a headache",
    "start": "544440",
    "end": "550360"
  },
  {
    "text": "instead it would be much better to just return something and this is nice using a yield here so I don't have to create a",
    "start": "550360",
    "end": "556519"
  },
  {
    "text": "new temporary list so do yield return if I just have to return one value and now I'm going to introduce a new feature",
    "start": "556519",
    "end": "561680"
  },
  {
    "text": "from C 9 called the target type new expression so I could say yield return new thing what this will do is it it",
    "start": "561680",
    "end": "568120"
  },
  {
    "text": "will look at whatever this is and figure out exactly what instance I want to create and which type I want to create",
    "start": "568120",
    "end": "574560"
  },
  {
    "text": "so so that here will now be a new person it gives me an error here because",
    "start": "574560",
    "end": "579600"
  },
  {
    "text": "I have a required property the details is required I have to set that remember the remember the C 11 feature so details",
    "start": "579600",
    "end": "586600"
  },
  {
    "text": "can also be set to a new thing and then I also have to set the first name to to",
    "start": "586600",
    "end": "592600"
  },
  {
    "text": "something as well and that's also required so that's really nice so what",
    "start": "592600",
    "end": "598040"
  },
  {
    "text": "happens here is now that if I have one place in my application where I forgot to set that to an instance and that",
    "start": "598040",
    "end": "603760"
  },
  {
    "text": "would eventually lead to a n reference exception adding these keywords and enabling this language feature will then",
    "start": "603760",
    "end": "609640"
  },
  {
    "text": "let me know where that could potentially be a problem so the nullable reference types",
    "start": "609640",
    "end": "615120"
  },
  {
    "text": "even though you know they try to solve this quite annoying problem they won't magically just solve",
    "start": "615120",
    "end": "621560"
  },
  {
    "text": "all of it for you you have to do some manual work as well and one tip I do have is to enable this thing called",
    "start": "621560",
    "end": "627040"
  },
  {
    "text": "treat warnings as errors I tell people to do this right before they go on holiday and then check in your code and",
    "start": "627040",
    "end": "634920"
  },
  {
    "text": "let someone else fix all the compiler uh warnings and errors then you're probably not going to have a job to come back to",
    "start": "634920",
    "end": "641639"
  },
  {
    "text": "but at least it was a little bit fun now I probably don't do that but starting a new project this is really interesting",
    "start": "641639",
    "end": "647320"
  },
  {
    "text": "to turn on because it will actually tell you immediately that you have something that you should attend to and either you",
    "start": "647320",
    "end": "652880"
  },
  {
    "text": "ignore warnings by using attributes in C to ignore that warning or you actually fix the potential not reference",
    "start": "652880",
    "end": "658519"
  },
  {
    "text": "exception if you haven't enabled this and you run into a null reference exception I would",
    "start": "658519",
    "end": "664279"
  },
  {
    "text": "encourage you to then afterwards enable it and try to back track if you could have found this with that null reference",
    "start": "664279",
    "end": "671040"
  },
  {
    "text": "exception because that would tell you if this was a valuable refactoring or valuable work to do all right so the",
    "start": "671040",
    "end": "678399"
  },
  {
    "text": "next feature of C 8 was asynchron streams we're not going to spend a lot of time talking about this but I do want to highlight how you use this this is a",
    "start": "678399",
    "end": "685200"
  },
  {
    "text": "new way of using the for each Loop you pend the await keyword in front of it which indicates that each element that",
    "start": "685200",
    "end": "691320"
  },
  {
    "text": "comes into the for each Loop will be retrieved asynchronously so imagine that get",
    "start": "691320",
    "end": "696600"
  },
  {
    "text": "elements that's simply setting up a a let's say a stream to a message box in",
    "start": "696600",
    "end": "702399"
  },
  {
    "text": "Asher or reading from a file on disk and it reads each line or whatever or it gets a message passed into it from Asher",
    "start": "702399",
    "end": "710440"
  },
  {
    "text": "you will enter the for each loop as soon as there's a message added to the Asher message Buzz that will then trigger and",
    "start": "710440",
    "end": "716680"
  },
  {
    "text": "run this for each Loop for you or the body of it as it waits for the next message to be added so essentially you",
    "start": "716680",
    "end": "722839"
  },
  {
    "text": "can use this to stream data into a for each Loop in a very nice and concise manner but without understanding how",
    "start": "722839",
    "end": "729160"
  },
  {
    "text": "async and a weight works this can get really tricky and you can run into some some problems with multi-threading and",
    "start": "729160",
    "end": "735399"
  },
  {
    "text": "async and a wait and get some interesting overhead so even though this looks very simple as with any language feature if",
    "start": "735399",
    "end": "742279"
  },
  {
    "text": "you don't really understand the impact of introducing that you could run into problems with that being said let's talk",
    "start": "742279",
    "end": "748320"
  },
  {
    "text": "a little bit more about 9 while we did take a look at some of the features that are introduced like in it only and the",
    "start": "748320",
    "end": "754079"
  },
  {
    "text": "target type new expression there's other things like record types which changes how we create reference types classes a",
    "start": "754079",
    "end": "762519"
  },
  {
    "text": "more concise syntax that gives us a lot of bang for the buck and we're going to look at an example of this as well C 9",
    "start": "762519",
    "end": "768680"
  },
  {
    "text": "gave us the init only Setters top level statements is the new way of building your applications so whenever you do",
    "start": "768680",
    "end": "774880"
  },
  {
    "text": "file new project the program.cs file is going to look extremely minimal compared",
    "start": "774880",
    "end": "779959"
  },
  {
    "text": "to what it did 10 years ago and this is because it there's no reason to have the public static void main stuff just right",
    "start": "779959",
    "end": "786959"
  },
  {
    "text": "in your face it's better that the compiler takes care of this for you what this then enabled is something called",
    "start": "786959",
    "end": "792920"
  },
  {
    "text": "minimal apis which is an ap. net core way of in as. net core you build",
    "start": "792920",
    "end": "798000"
  },
  {
    "text": "applications in your program. CS file to set up really minimal applications to say that c 99 only got a",
    "start": "798000",
    "end": "805639"
  },
  {
    "text": "couple of enhancements to pattern matching is quite an understatement they introduced a lot of patterns that built",
    "start": "805639",
    "end": "811199"
  },
  {
    "text": "upon the the switch Expressions introduced in C 8 and we're going to spend the next moment talking about that",
    "start": "811199",
    "end": "816279"
  },
  {
    "text": "as well there's a Target type new expression and then there's a whole lot of different things that you know cater",
    "start": "816279",
    "end": "822440"
  },
  {
    "text": "for high performance cater for very specific edge cases I would say so what",
    "start": "822440",
    "end": "829760"
  },
  {
    "text": "I say here that there are a lot of features on this list here but the most important one is probably records and",
    "start": "829760",
    "end": "836399"
  },
  {
    "text": "the top level statements and the pattern mag enhancements so there's a lot in C 9 as",
    "start": "836399",
    "end": "842079"
  },
  {
    "text": "well like being the ninth iteration of the language there's a lot here to digest and we're going to spend the next moment talking about the pattern",
    "start": "842079",
    "end": "847639"
  },
  {
    "text": "matching and record types like pattern matching is not really A New Concept this has been",
    "start": "847639",
    "end": "852880"
  },
  {
    "text": "around for a long time for other programming languages like cotlin Swift and Java and and whatnot they've all had",
    "start": "852880",
    "end": "859959"
  },
  {
    "text": "pattern matching for quite a while so C is kind of a little bit behind here or or we're behind here at this point so",
    "start": "859959",
    "end": "867240"
  },
  {
    "text": "what pattern matching allows us to do is essentially look at what is the contents of an object what does this thing look",
    "start": "867240",
    "end": "873959"
  },
  {
    "text": "like I have a puzzle piece here is it a corner piece is it an edible fruit is it",
    "start": "873959",
    "end": "879560"
  },
  {
    "text": "something of a certain you know is it an apple an orange is it green yellow or whatnot that sounds quite simple but we",
    "start": "879560",
    "end": "886199"
  },
  {
    "text": "can use patter matching for a whole lot of different things for example I could also say I received this response from",
    "start": "886199",
    "end": "891839"
  },
  {
    "text": "the database was it successful or was it a failure was it a user or was it an admin we can do a whole lot of different",
    "start": "891839",
    "end": "898320"
  },
  {
    "text": "things with these different patterns and surely enough it's really just matching on a type and an attribute and we have",
    "start": "898320",
    "end": "906320"
  },
  {
    "text": "been able to do this since c 1 where you can say give me the type of the object compare that to what I'm looking for and",
    "start": "906320",
    "end": "912440"
  },
  {
    "text": "then look at a property value and then we have to typ test this to use it in inside a different",
    "start": "912440",
    "end": "918399"
  },
  {
    "text": "context looks okay like all of us probably have code that looks like this and and works like this and it's nothing",
    "start": "918399",
    "end": "923959"
  },
  {
    "text": "wrong with this I will say this with every language feature in C you don't",
    "start": "923959",
    "end": "929199"
  },
  {
    "text": "have to jump on the newest thing just because it's released in language use it where it makes sense if this works then",
    "start": "929199",
    "end": "935360"
  },
  {
    "text": "by all means don't go back and refactor your code to use this instead now if you ask me as a consultant you should hire",
    "start": "935360",
    "end": "941959"
  },
  {
    "text": "me to refactor all your code I'm just kidding in c 7 they",
    "start": "941959",
    "end": "947160"
  },
  {
    "text": "improved this a little bit or rather they introduced the compiler feature of looking at this as a pattern instead so",
    "start": "947160",
    "end": "953600"
  },
  {
    "text": "I can pass the instance into a switch statement and then write cases here for",
    "start": "953600",
    "end": "958639"
  },
  {
    "text": "different things that I'm looking for I no longer have to cast it to the type that I'm I'm looking for I've ensured",
    "start": "958639",
    "end": "964839"
  },
  {
    "text": "that it's an apple it's an instance of an apple that's now declared in a variable but honestly by c 7 I wouldn't",
    "start": "964839",
    "end": "971199"
  },
  {
    "text": "write this code because there's a lot more of it but this was just to initial",
    "start": "971199",
    "end": "976279"
  },
  {
    "text": "or initiate this this work of introducing patterns and pattern matching in the",
    "start": "976279",
    "end": "981399"
  },
  {
    "text": "language and of course we can have a default as well since it's a switch expression or a switch now in C 8 they",
    "start": "981399",
    "end": "988079"
  },
  {
    "text": "they swap this around because they've done all the work in c 7 to introduce this and now we have something called a switch expression which looks very",
    "start": "988079",
    "end": "994759"
  },
  {
    "text": "different to a normal switch looks very different from you know an if statement but basically we are saying here that",
    "start": "994759",
    "end": "1000759"
  },
  {
    "text": "I'd like to get a result doesn't matter what that result is it could be an object could be a string could be an integer whatnot but the result will be",
    "start": "1000759",
    "end": "1007959"
  },
  {
    "text": "based off what the input is and with this switch expression I can now fill this here uh with patterns for this",
    "start": "1007959",
    "end": "1015120"
  },
  {
    "text": "object and what I like to do here is that I'd like to fill this with expression or rather patterns combined with",
    "start": "1015120",
    "end": "1022360"
  },
  {
    "text": "Expressions so as an example going back to that very simple fruit analogy here we can say",
    "start": "1022360",
    "end": "1028400"
  },
  {
    "text": "that I'd like to get a string representation of this instance so if it's an instance of an apple return this",
    "start": "1028400",
    "end": "1034199"
  },
  {
    "text": "string if it's anything else it could be null it could be a different fruit or",
    "start": "1034199",
    "end": "1039480"
  },
  {
    "text": "whatever a totally different object then we're going to run that that last part",
    "start": "1039480",
    "end": "1044918"
  },
  {
    "text": "and then this part here on the right hand side of that expression is what's going to be returned doesn't have to be a string again it could be",
    "start": "1044919",
    "end": "1051000"
  },
  {
    "text": "whatever now this looks very simple but what it's actually allowing us to do is that that Apple part that validates that",
    "start": "1051000",
    "end": "1058360"
  },
  {
    "text": "it's actually set to an instance of that and I could capture that and ensure that it's not null which is",
    "start": "1058360",
    "end": "1063520"
  },
  {
    "text": "great if I wanted to capture null I'd probably do like apple nullable and then that could be null as well so patterns",
    "start": "1063520",
    "end": "1070840"
  },
  {
    "text": "in C there's a whole lot of them we've seen the most simple one which is a type pattern there's one pattern called",
    "start": "1070840",
    "end": "1076799"
  },
  {
    "text": "positional pattern which allows you to work with a deconstructed object which is not very common but it is there it",
    "start": "1076799",
    "end": "1083280"
  },
  {
    "text": "looks like a topple pattern then you have a property pattern if you want to validate a certain value on a property",
    "start": "1083280",
    "end": "1090240"
  },
  {
    "text": "you can write patterns for tupes or tuples how you like to pronounce that there's something called a relational",
    "start": "1090240",
    "end": "1096039"
  },
  {
    "text": "pattern so as assuming that I have a test result for example I'd like to check if the test is failed or if it's",
    "start": "1096039",
    "end": "1102039"
  },
  {
    "text": "passed I'd like to check how many days ago was this I could say test date is more than 10 days ago or less than 10",
    "start": "1102039",
    "end": "1108440"
  },
  {
    "text": "days I can do that in a very nice syntax I have a lot of example of this as well we can combine a lot of them by using",
    "start": "1108440",
    "end": "1114000"
  },
  {
    "text": "conjunctive and or disjunctive or we can write patterns for different lists which",
    "start": "1114000",
    "end": "1119679"
  },
  {
    "text": "was introduced in I believe c c 11 and we can parenthesize patterns but if we",
    "start": "1119679",
    "end": "1126000"
  },
  {
    "text": "have to parenthesize our patterns meaning that we have to group them in different portions then maybe we are",
    "start": "1126000",
    "end": "1131559"
  },
  {
    "text": "designing our code a little bit incorrectly so that could be a little bit of a code smell and of course there's this negation of saying if the",
    "start": "1131559",
    "end": "1138000"
  },
  {
    "text": "pattern is is the opposite you could for example say if",
    "start": "1138000",
    "end": "1143080"
  },
  {
    "text": "the object is not null that's a negation for null and we can combine all of these",
    "start": "1143080",
    "end": "1148679"
  },
  {
    "text": "different patterns together for example we can say that we have a type pattern and we can then check a property and we then can check something in relation to",
    "start": "1148679",
    "end": "1155440"
  },
  {
    "text": "a different value so let's jump over to visual studio again and I have an example of",
    "start": "1155440",
    "end": "1161720"
  },
  {
    "text": "this but before we look at how we use pattern matching I do want to show you record types if you haven't seen these",
    "start": "1161720",
    "end": "1167039"
  },
  {
    "text": "before this is really just a way to define a class so really what happens is",
    "start": "1167039",
    "end": "1172480"
  },
  {
    "text": "that this here generates a class we could write record class as well but in this case since the default is a class",
    "start": "1172480",
    "end": "1178000"
  },
  {
    "text": "we could remove that which means that we could also use a record struct to make",
    "start": "1178000",
    "end": "1184159"
  },
  {
    "text": "it immutable we can do a readon record struct but that's really for um some",
    "start": "1184159",
    "end": "1189799"
  },
  {
    "text": "different scenarios we're going to stick with a record class for now or just simply a record this lets us introduce a",
    "start": "1189799",
    "end": "1195840"
  },
  {
    "text": "reference type with two primary Properties or a primary Constructor that",
    "start": "1195840",
    "end": "1201360"
  },
  {
    "text": "requires the the parameter number of attempts and a test date these will be added as publicly",
    "start": "1201360",
    "end": "1208080"
  },
  {
    "text": "exposed properties they will be immutable they will be used when comparing two instances so we get value",
    "start": "1208080",
    "end": "1213679"
  },
  {
    "text": "based equality when when creating this here so if we uh decompile this and just",
    "start": "1213679",
    "end": "1220559"
  },
  {
    "text": "like a TV chef I've already pasted this into sharp laab it's the exact same code I have a record called test result takes",
    "start": "1220559",
    "end": "1227480"
  },
  {
    "text": "two parameters or it has two properties and this on the right hand side is everything that's that's",
    "start": "1227480",
    "end": "1233360"
  },
  {
    "text": "now generated here so we have an implementation of I equatable we have",
    "start": "1233360",
    "end": "1239080"
  },
  {
    "text": "two backing fields we have a publicly exposed property for that backing field",
    "start": "1239080",
    "end": "1244280"
  },
  {
    "text": "and if we scroll down there's an overload uh or we are implementing the",
    "start": "1244280",
    "end": "1250039"
  },
  {
    "text": "equality operator and this is where it gets interesting because normally reference types they are using reference based",
    "start": "1250039",
    "end": "1257320"
  },
  {
    "text": "equality checks if you have two in distances of a class it's going to compare the references but what this is doing is that it's it's overwriting",
    "start": "1257320",
    "end": "1264000"
  },
  {
    "text": "equals for the same object so meaning that it's going to if we scroll here a little bit just to show you it's going",
    "start": "1264000",
    "end": "1269600"
  },
  {
    "text": "to compare the backing field of one of them with the other backing field so it",
    "start": "1269600",
    "end": "1275200"
  },
  {
    "text": "will in fact be value based equality which is tremendously useful and most of the time when you",
    "start": "1275200",
    "end": "1281480"
  },
  {
    "text": "compare two instances that's really what you might want records also allow us to um do",
    "start": "1281480",
    "end": "1287600"
  },
  {
    "text": "inheritance we can have a body of this class or this record and add more methods more properties and",
    "start": "1287600",
    "end": "1293480"
  },
  {
    "text": "whatnot and we use it similarly to um to normal class as well because that's really what's generated so I have a a",
    "start": "1293480",
    "end": "1301039"
  },
  {
    "text": "class here or or this is my top level statement this is a program at CS file super simple also using this file scoped",
    "start": "1301039",
    "end": "1307679"
  },
  {
    "text": "namespace in one of the classes as you might have seen here we no longer have to indent the entire file into the",
    "start": "1307679",
    "end": "1312799"
  },
  {
    "text": "namespace this is enough to add at the top all right let's uh now take a look",
    "start": "1312799",
    "end": "1318880"
  },
  {
    "text": "here so I've created an instance of this this record here and as I said they're immutable that means that I cannot now",
    "start": "1318880",
    "end": "1325880"
  },
  {
    "text": "go ahead and say I'd like to change I don't want to do a software",
    "start": "1325880",
    "end": "1331520"
  },
  {
    "text": "update I'd like to change the number of attempts not to the same value that doesn't make any sense but this here",
    "start": "1331520",
    "end": "1337279"
  },
  {
    "text": "doesn't allow me to do that so how would I then change the value we can dreference this and say the test is now",
    "start": "1337279",
    "end": "1343320"
  },
  {
    "text": "equal to a test with a certain value I can say number of attempts is equal to five and that will now give me a new",
    "start": "1343320",
    "end": "1349679"
  },
  {
    "text": "instance with that new value so using this wither here is a really nice way of doing",
    "start": "1349679",
    "end": "1355840"
  },
  {
    "text": "this all right so back to pattern matching that's records I can undo that just to give you",
    "start": "1355840",
    "end": "1361840"
  },
  {
    "text": "uh the opportunity to to have a look at that so now I'm calling this method I",
    "start": "1361840",
    "end": "1367039"
  },
  {
    "text": "know that it returns a failed test which is a subass of my record or sub record",
    "start": "1367039",
    "end": "1372520"
  },
  {
    "text": "but I don't know that up here where I'm consuming this method so what I like to do is that I I'd like to say what the",
    "start": "1372520",
    "end": "1378679"
  },
  {
    "text": "outcome of this is going to be um equal to result and",
    "start": "1378679",
    "end": "1385120"
  },
  {
    "text": "switch and now I'd like to write some patterns to say that well based on what",
    "start": "1385120",
    "end": "1391440"
  },
  {
    "text": "the this result is what type it is what property values it has I'd like I'd like to do a couple of different things and",
    "start": "1391440",
    "end": "1398120"
  },
  {
    "text": "again I'm going to use a very simple example to say that I'm just going to return a string so the outcome will just be the string representation but could",
    "start": "1398120",
    "end": "1404440"
  },
  {
    "text": "just as well have been a method call and get the result from that a complex type whatnot so I can say that well if it's",
    "start": "1404440",
    "end": "1411440"
  },
  {
    "text": "passed I'd like to just return past if it's failed I'd like to return",
    "start": "1411440",
    "end": "1418799"
  },
  {
    "text": "failed and then for anything else this is called a",
    "start": "1418799",
    "end": "1424519"
  },
  {
    "text": "discard and this will match on nulls it will match on other sub classes it will",
    "start": "1424760",
    "end": "1430480"
  },
  {
    "text": "in this case match on the base type if that was what we got here instead it's the same as doing for example I said",
    "start": "1430480",
    "end": "1437159"
  },
  {
    "text": "earlier you can capture the value so I could capture for example past as a local variable of past I could capture",
    "start": "1437159",
    "end": "1444200"
  },
  {
    "text": "that as failed and I could then use this inside the expression if I wanted to so I can",
    "start": "1444200",
    "end": "1449960"
  },
  {
    "text": "access the properties on that concrete type and where I'm going with this is",
    "start": "1449960",
    "end": "1455000"
  },
  {
    "text": "that I can do the same here for the Discord I could say VAR X because I'm really not that uh",
    "start": "1455000",
    "end": "1463320"
  },
  {
    "text": "good at coming up with good names so now this here is going to be the base type",
    "start": "1463320",
    "end": "1468960"
  },
  {
    "text": "but it could also match on nulls here so we have to be quite careful that we're not getting a null value so this here is the is the really",
    "start": "1468960",
    "end": "1476600"
  },
  {
    "text": "the most simple way of defining our expressions or or our our pet matches",
    "start": "1476600",
    "end": "1482200"
  },
  {
    "text": "and I've now used a type pattern together with a declaration pattern to to declare this to a local variable but",
    "start": "1482200",
    "end": "1487880"
  },
  {
    "text": "what if I also want to say that well if it's a past test not that thing if it's",
    "start": "1487880",
    "end": "1493600"
  },
  {
    "text": "a past test and the test dates year was",
    "start": "1493600",
    "end": "1500159"
  },
  {
    "text": "2020 then you're gonna have to retake because I know that the tests that year",
    "start": "1500159",
    "end": "1505240"
  },
  {
    "text": "all every student cheated on the test so they have to retake it I could also do this that's a",
    "start": "1505240",
    "end": "1510760"
  },
  {
    "text": "relational pattern or actually it's a property pattern but I could convert this into a relational pattern saying",
    "start": "1510760",
    "end": "1515919"
  },
  {
    "text": "that it has to be between 2022 and uh less than or equal",
    "start": "1515919",
    "end": "1522960"
  },
  {
    "text": "to 2023 for example now I'm using this relational pattern together with the the conjunctive and pattern to say that it",
    "start": "1522960",
    "end": "1529559"
  },
  {
    "text": "has to be these different things I could also completely remove past here which means that I don't really care what kind",
    "start": "1529559",
    "end": "1535600"
  },
  {
    "text": "of subass this is it just has to be a either past or a fail test this using",
    "start": "1535600",
    "end": "1541960"
  },
  {
    "text": "the CER brackets here says it has to be an instance so an instance where it has these different values now what happens",
    "start": "1541960",
    "end": "1549440"
  },
  {
    "text": "if I negate this the code becomes a little bit",
    "start": "1549440",
    "end": "1555240"
  },
  {
    "text": "unreadable especially if I start adding more things but the compiler is going to be try to be smart enough here to figure",
    "start": "1555240",
    "end": "1561520"
  },
  {
    "text": "out which of my tests are then um are then useless because we can never reach",
    "start": "1561520",
    "end": "1568039"
  },
  {
    "text": "this code piece here because we already have a pattern that that dictate this here so be careful when using",
    "start": "1568039",
    "end": "1574399"
  },
  {
    "text": "not and honestly don't use it to say that that Aban is not false or not true",
    "start": "1574399",
    "end": "1581480"
  },
  {
    "text": "because that doesn't make any sense what we can also do we we're not limited to use this with the switch",
    "start": "1581480",
    "end": "1587799"
  },
  {
    "text": "expression I can take my patterns and I could say for example if the test or if the result is and Then followed by a",
    "start": "1587799",
    "end": "1594679"
  },
  {
    "text": "pattern I can do this as well and if I want to capture this to a local variable that's available only in",
    "start": "1594679",
    "end": "1601240"
  },
  {
    "text": "my if here I could say the test and why is that important in this",
    "start": "1601240",
    "end": "1607159"
  },
  {
    "text": "case because now the test here is going to be the concrete type but it's also interesting because what happens if we",
    "start": "1607159",
    "end": "1612919"
  },
  {
    "text": "completely remove this variable declaration up here at the top and instead use it like this",
    "start": "1612919",
    "end": "1619399"
  },
  {
    "text": "that's where pattern matching and the Declaration pattern all of this becomes quite nice to to work with but again",
    "start": "1619399",
    "end": "1625880"
  },
  {
    "text": "with with as with any other language feature be careful with how you use this try to write code that makes sense don't",
    "start": "1625880",
    "end": "1633559"
  },
  {
    "text": "simply write patterns just for the sake of writing them but in most cases where we use this instead of the traditional",
    "start": "1633559",
    "end": "1640039"
  },
  {
    "text": "approach from c 1 through six this is easier to use when communicating with someone in the team or in the business",
    "start": "1640039",
    "end": "1646960"
  },
  {
    "text": "now I'm not saying that your business owners should sit in GitHub or whatever Source control you use and read your code they probably do but they're",
    "start": "1646960",
    "end": "1654240"
  },
  {
    "text": "probably not going to give you suggestions on how to improve the patterns even though it makes it easier to communicate the intent",
    "start": "1654240",
    "end": "1660519"
  },
  {
    "text": "here so a lot of this has been improved upon in C 9 10 and 11 and there's a",
    "start": "1660519",
    "end": "1666480"
  },
  {
    "text": "couple of more patterns from C 11 that I'd like to show you as well there's uh something called a list pattern Or List",
    "start": "1666480",
    "end": "1673760"
  },
  {
    "text": "patterns because we have different ways of working with a with a collection of data so in this case here I've set up a",
    "start": "1673760",
    "end": "1680200"
  },
  {
    "text": "payload of data and I'm using a bite array here primarily because it makes me look like a",
    "start": "1680200",
    "end": "1686960"
  },
  {
    "text": "hacker I'm not though um so I have this payload could be a string could be objects could be whatever and basically",
    "start": "1686960",
    "end": "1694240"
  },
  {
    "text": "what I'm doing here is saying that well if the payload is an instance of a",
    "start": "1694240",
    "end": "1699519"
  },
  {
    "text": "collection and the first element matches this and I don't care about what the rest of that collection is we're going",
    "start": "1699519",
    "end": "1705440"
  },
  {
    "text": "to enter this if statement that's a list pattern and and we could write patterns to check if it's if it simply just has a",
    "start": "1705440",
    "end": "1712480"
  },
  {
    "text": "value I don't care if it's null or not it just has to to have that particular value and I could write patterns like",
    "start": "1712480",
    "end": "1718799"
  },
  {
    "text": "this for for different parts of it as well if I'd like to say that well it has to start with with that value don't care",
    "start": "1718799",
    "end": "1727519"
  },
  {
    "text": "about the second one and give me a slice of the last portion this will then slice off the last elements in this this",
    "start": "1727519",
    "end": "1734279"
  },
  {
    "text": "collection actually will skip the first two and give me the rest that's a called a slice pattern and then finally we have",
    "start": "1734279",
    "end": "1739880"
  },
  {
    "text": "something called a span pattern so if if you're ever working with the really memory efficient span of t or read only",
    "start": "1739880",
    "end": "1745640"
  },
  {
    "text": "span of T I can say here that I have my name here as a span of characters and I can write a pattern that uses a simple",
    "start": "1745640",
    "end": "1751760"
  },
  {
    "text": "string and this is called a span pattern so again they introduce new patterns to",
    "start": "1751760",
    "end": "1756919"
  },
  {
    "text": "allow us to work with this language feature that they introduced in an older version even back in c 7 they introduced",
    "start": "1756919",
    "end": "1762799"
  },
  {
    "text": "the fundamentals of this but keep improving upon it and that's kind of a um a common theme for the compiler Team",
    "start": "1762799",
    "end": "1770799"
  },
  {
    "text": "all right so let's uh switch gears and talk a little bit about C 10 C 10 improved upon",
    "start": "1770799",
    "end": "1779360"
  },
  {
    "text": "the way that we work with records by introducing record structs they're a little bit different from record classes",
    "start": "1779360",
    "end": "1785240"
  },
  {
    "text": "record structs are not immutable by default so you have to add that read only keyword in front of a record struct",
    "start": "1785240",
    "end": "1791559"
  },
  {
    "text": "if you'd like to make it um read only there's some more things in C 10 like Global using directives there's file",
    "start": "1791559",
    "end": "1797840"
  },
  {
    "text": "scope namespace declarations that I showed you as well they've made improvements to the property pattern so if you have nested properties and you",
    "start": "1797840",
    "end": "1804200"
  },
  {
    "text": "access them in a pattern it will perform a null check for each of them which is very nice doing that previously was a",
    "start": "1804200",
    "end": "1809799"
  },
  {
    "text": "little bit tedious and not very good-look and honestly there's a lot more things happening in C 10 but none",
    "start": "1809799",
    "end": "1817200"
  },
  {
    "text": "of these are really as groundbreaking as introducing pattern matching or async in a weight this is the LTS version for net",
    "start": "1817200",
    "end": "1824559"
  },
  {
    "text": "6 and they just focused on improving things and making some caterings for for",
    "start": "1824559",
    "end": "1830440"
  },
  {
    "text": "the minimal apis like fil scope namespaces and Global using directives that's to make it easier to work with",
    "start": "1830440",
    "end": "1836200"
  },
  {
    "text": "that language feature what is useful though is one of them is to uh to improve Lambda",
    "start": "1836200",
    "end": "1843159"
  },
  {
    "text": "expressions and what I did here was in C 9 you had to explicitly declare exactly",
    "start": "1843159",
    "end": "1848760"
  },
  {
    "text": "which delegate type that you were referencing which is a little bit odd because if I look at this here like I'm",
    "start": "1848760",
    "end": "1855840"
  },
  {
    "text": "not saying I'm smarter than the compiler but I clearly see that I take a number as an input and I return an integer so",
    "start": "1855840",
    "end": "1861840"
  },
  {
    "text": "why wouldn't the compiler be able to do the same thing well someone else thought of this as well at the compiler team and",
    "start": "1861840",
    "end": "1867600"
  },
  {
    "text": "surely enough we can now infer the delegate type which is nice this means a couple of less",
    "start": "1867600",
    "end": "1873600"
  },
  {
    "text": "characters and building upon the idea of improving the uh minimal apis they also",
    "start": "1873600",
    "end": "1878639"
  },
  {
    "text": "now allow attributes in lambdas while we were able to do the same thing without",
    "start": "1878639",
    "end": "1883799"
  },
  {
    "text": "using an attribute or an input to this Anonymous method having attrib in lambdas builds upon you know minimal",
    "start": "1883799",
    "end": "1890760"
  },
  {
    "text": "apis and make that concept a lot more complete and this here and a couple of",
    "start": "1890760",
    "end": "1897320"
  },
  {
    "text": "more lines is all that it takes nowadays to build an API or build a website using asp.net",
    "start": "1897320",
    "end": "1903600"
  },
  {
    "text": "core and this is powered because we we can do this because it's powered by that top level statements the global using",
    "start": "1903600",
    "end": "1910000"
  },
  {
    "text": "directives and the implicit usings and all of that so I'm not going to spend more time",
    "start": "1910000",
    "end": "1915240"
  },
  {
    "text": "talking about C 10 we're going to spend a little bit more time talking about C 11 instead where we introduced the list",
    "start": "1915240",
    "end": "1920760"
  },
  {
    "text": "patterns slice patterns and span patterns we already looked at them when introducing pattern matching and again",
    "start": "1920760",
    "end": "1927000"
  },
  {
    "text": "improving upon already existing features and they're going to continue to do this in new versions of C as",
    "start": "1927000",
    "end": "1932960"
  },
  {
    "text": "well C 11 also introduced a couple of other things like name off a parameter",
    "start": "1932960",
    "end": "1938360"
  },
  {
    "text": "and caching delegates for static method groups caching delegates for for the",
    "start": "1938360",
    "end": "1943600"
  },
  {
    "text": "static method groups is just a performance Improvement but again working on stability and performance and",
    "start": "1943600",
    "end": "1949519"
  },
  {
    "text": "doing small tweaks in the language can have a huge impact and then making sure that that doesn't break things is",
    "start": "1949519",
    "end": "1956120"
  },
  {
    "text": "probably quite tricky in C 11 they introduced a required property so it took a little",
    "start": "1956120",
    "end": "1961559"
  },
  {
    "text": "while like C 8 introduced nullable reference types and this is you know three versions after so it's taking a",
    "start": "1961559",
    "end": "1968480"
  },
  {
    "text": "little while to get to the state where it feels like the notable reference types is something that we could all",
    "start": "1968480",
    "end": "1973799"
  },
  {
    "text": "very much use in any type of application there's a concept of raw string literals static abstract members",
    "start": "1973799",
    "end": "1980200"
  },
  {
    "text": "and interfaces there's a utf8 string literal so I can now have utf8 strings if I'd like to in my",
    "start": "1980200",
    "end": "1986600"
  },
  {
    "text": "application there's generic math support generic attributes which I honestly",
    "start": "1986600",
    "end": "1991720"
  },
  {
    "text": "don't know why they didn't introduce this earlier like even back in the day when I did I believe like asp.net web",
    "start": "1991720",
    "end": "1997320"
  },
  {
    "text": "forms I wanted to build things where I used a generic attribute and I just",
    "start": "1997320",
    "end": "2003360"
  },
  {
    "text": "couldn't then C 11 had an interesting feature called parameter null check in",
    "start": "2003360",
    "end": "2008559"
  },
  {
    "text": "which was unfortunately withdrawn from the language this is the first time where",
    "start": "2008559",
    "end": "2015159"
  },
  {
    "text": "they've removed a language feature that both upset a lot of people and also made",
    "start": "2015159",
    "end": "2020960"
  },
  {
    "text": "a lot of people very happy so parameter null checking I'm going to show you this even though this feature will'll",
    "start": "2020960",
    "end": "2026159"
  },
  {
    "text": "probably never see the light of day again uh we're going to go back to one of the samples here instead of having to",
    "start": "2026159",
    "end": "2032200"
  },
  {
    "text": "null check this portion here they wanted to do double bangs and what this would do would it would automat a atically",
    "start": "2032200",
    "end": "2038240"
  },
  {
    "text": "introduce a null check and if it was null it would throw an exception surely enough we would then",
    "start": "2038240",
    "end": "2044200"
  },
  {
    "text": "end up having less null null checks in the application and that would be great",
    "start": "2044200",
    "end": "2049679"
  },
  {
    "text": "the problem though is that it kind of clutters a codebase and by C 15 it's going to look like this which is not very nice so after a",
    "start": "2049679",
    "end": "2058760"
  },
  {
    "text": "lot of community backlash they remove that language feature and um like that's fine right",
    "start": "2058760",
    "end": "2066240"
  },
  {
    "text": "but the problem was that the teams at Microsoft they all used preview versions",
    "start": "2066240",
    "end": "2071720"
  },
  {
    "text": "of the compiler all the teams went into their GitHub repositories and refactored to use this language feature so when",
    "start": "2071720",
    "end": "2079560"
  },
  {
    "text": "they pulled it from the language they had to go back and revert all their changes which is why I never use preview",
    "start": "2079560",
    "end": "2087839"
  },
  {
    "text": "versions of the compiler anymore because I don't trust that until it's released like the day off the release then I'm",
    "start": "2087839",
    "end": "2093480"
  },
  {
    "text": "I'm fine using all the newest features so we saw the list patterns",
    "start": "2093480",
    "end": "2099000"
  },
  {
    "text": "this is a really nice way of of using I have a collection here where I can then look at this and say if the first ver",
    "start": "2099000",
    "end": "2105800"
  },
  {
    "text": "first name in this list is philli and the last one is my youngest daughter give me all of the names in between and",
    "start": "2105800",
    "end": "2111200"
  },
  {
    "text": "then I can use this as a variable inside my expression I don't care about the first one but if the second one is",
    "start": "2111200",
    "end": "2117119"
  },
  {
    "text": "Sophie and it has some following elements it's going to match the second one if it's empty or just give me all of",
    "start": "2117119",
    "end": "2123160"
  },
  {
    "text": "the other ones if it doesn't match any of that or at the bottom we can say if it's not an in",
    "start": "2123160",
    "end": "2128280"
  },
  {
    "text": "of a collection so a lot of things happening here it's both slicing off data it's",
    "start": "2128280",
    "end": "2133680"
  },
  {
    "text": "looking at the contents of this as well we can have this concept of a raw",
    "start": "2133680",
    "end": "2139040"
  },
  {
    "text": "string literal so three double quotes will allow us to paste XML Json and",
    "start": "2139040",
    "end": "2144200"
  },
  {
    "text": "persist the the uh the whites space characters we can even use this with",
    "start": "2144200",
    "end": "2149280"
  },
  {
    "text": "string interpolation like I've done here to interpolate that connection string into this if we do this in Visual Studio",
    "start": "2149280",
    "end": "2155599"
  },
  {
    "text": "I believe it's the same in in vs code as well and maybe in writer we get syntax highlighting for whatever we have inside",
    "start": "2155599",
    "end": "2161520"
  },
  {
    "text": "our RW string literals so if we have a Json document or XML and we want to have that inside our our code this is a very",
    "start": "2161520",
    "end": "2168880"
  },
  {
    "text": "nice way of doing it now we also have this utf8 string",
    "start": "2168880",
    "end": "2174079"
  },
  {
    "text": "literal so why is this an important language feature traditionally everything in net is",
    "start": "2174079",
    "end": "2180079"
  },
  {
    "text": "utf16 and everything on the web is utf8 meaning that when we get data into our applications everything has to be",
    "start": "2180079",
    "end": "2186880"
  },
  {
    "text": "converted into utf16 that takes a couple of CPU Cycles to do that it takes extra",
    "start": "2186880",
    "end": "2192319"
  },
  {
    "text": "allocations and it puts a little bit more stress on the garbage collector in normal applications doesn't matter much",
    "start": "2192319",
    "end": "2198359"
  },
  {
    "text": "but in really scaled and high performance applications it has a huge impact so therefore I can now declare",
    "start": "2198359",
    "end": "2204440"
  },
  {
    "text": "that I have a utf8 string here it's a bite array in memory and then I've also introduced the concept of ranges and",
    "start": "2204440",
    "end": "2211280"
  },
  {
    "text": "slicing off data using the spans here and this here is an example of writing totally allocation free code",
    "start": "2211280",
    "end": "2218040"
  },
  {
    "text": "I'm slicing off my first name and last name into two different different pointers so to say so I have two",
    "start": "2218040",
    "end": "2224280"
  },
  {
    "text": "different spans one pointing to my first name and one pointing to the second they're not copying any memory they're",
    "start": "2224280",
    "end": "2229920"
  },
  {
    "text": "not doing a lot of excessive allocations this puts less stress on the garbage collector it reduces the amount of",
    "start": "2229920",
    "end": "2236440"
  },
  {
    "text": "allocations surely I have two additional or actually three additional things that",
    "start": "2236440",
    "end": "2242200"
  },
  {
    "text": "are references on my stack but that allocation is like minimal in comparison",
    "start": "2242200",
    "end": "2248280"
  },
  {
    "text": "to copying memory over to a totally new array and next week I have a new course",
    "start": "2248280",
    "end": "2253440"
  },
  {
    "text": "coming out on plural site where I talk about benchmarking in C and profiling in C where I use this as an example",
    "start": "2253440",
    "end": "2260200"
  },
  {
    "text": "compared to the traditional approach of using substring and and all of that or even using link and it's a huge",
    "start": "2260200",
    "end": "2266880"
  },
  {
    "text": "difference and while this may clutter the code a little bit this is making a huge difference all right so in C 11 we",
    "start": "2266880",
    "end": "2275400"
  },
  {
    "text": "also got the support for static abstract members in interfaces so there's a problem if I have a static member in my",
    "start": "2275400",
    "end": "2282000"
  },
  {
    "text": "interface and in my class then implements this it doesn't tell me that I have to implement that static member",
    "start": "2282000",
    "end": "2287839"
  },
  {
    "text": "but if I know Market as abstract I'm going to get a compiler error saying that it doesn't implement this so we should probably go ahead and",
    "start": "2287839",
    "end": "2294800"
  },
  {
    "text": "do that so while C 11 introduced a whole lot of features we're now at C 12 which",
    "start": "2294800",
    "end": "2302440"
  },
  {
    "text": "is the current version of C was released in November last year and there are a couple of things are really important in",
    "start": "2302440",
    "end": "2308760"
  },
  {
    "text": "this release one of them is the support for primary Constructors they took the",
    "start": "2308760",
    "end": "2314960"
  },
  {
    "text": "concept from the record types and apply that to normal classes but made it different so that it's going to confuse",
    "start": "2314960",
    "end": "2321319"
  },
  {
    "text": "everyone and we're going to look at why this is a little bit confusing soon they introduced collection",
    "start": "2321319",
    "end": "2327119"
  },
  {
    "text": "expressions and the spread element the spread element was previously referred to the spread operator but that has",
    "start": "2327119",
    "end": "2333319"
  },
  {
    "text": "since been changed so if you've heard about this or seen it before spread operator was previously used to to talk",
    "start": "2333319",
    "end": "2339119"
  },
  {
    "text": "about this language feature there's a concept of interceptors optional parameters in",
    "start": "2339119",
    "end": "2344440"
  },
  {
    "text": "lambdas there's Alias any type inline arrays refere only parameters and",
    "start": "2344440",
    "end": "2350079"
  },
  {
    "text": "finally my favorite language feature is experimental attribute it's",
    "start": "2350079",
    "end": "2355640"
  },
  {
    "text": "the opposite to the obsolete attribute where you would say that this here is no longer going to be supported this here",
    "start": "2355640",
    "end": "2362599"
  },
  {
    "text": "is instead saying this code is experimental and you should be careful using this although it annoys my team",
    "start": "2362599",
    "end": "2368599"
  },
  {
    "text": "that I put this on all my code which you probably shouldn't but it",
    "start": "2368599",
    "end": "2374079"
  },
  {
    "text": "is experimental isn't it let's take a look at visual studio for a final time",
    "start": "2374079",
    "end": "2379319"
  },
  {
    "text": "today so I have I have let's see",
    "start": "2379319",
    "end": "2385440"
  },
  {
    "text": "here I have an application here where I've introduced The Collection",
    "start": "2385440",
    "end": "2390839"
  },
  {
    "text": "expression this here is a collection expression where I simply indicate a couple of things actually there's a lot",
    "start": "2390839",
    "end": "2396720"
  },
  {
    "text": "happening in here this looks like it's just creating an instance of a new collection and then adding a couple of",
    "start": "2396720",
    "end": "2402079"
  },
  {
    "text": "values to that but there's a lot more happening in here while it does create a new instance of a collection it all also",
    "start": "2402079",
    "end": "2408880"
  },
  {
    "text": "looks at the Target type so I could change the target to a bite array I could change it to a list of a",
    "start": "2408880",
    "end": "2416000"
  },
  {
    "text": "bite and then actually let's do this list there we go and that would work as",
    "start": "2416000",
    "end": "2423040"
  },
  {
    "text": "well so it looks at the Target it looks at the content it it figures out what the most appropriate collection would be and it it it creates",
    "start": "2423040",
    "end": "2429720"
  },
  {
    "text": "this in this case a list of a bite so again being a hacker I'd like to take my payload and my check sum and I'd",
    "start": "2429720",
    "end": "2435640"
  },
  {
    "text": "like to append that to a result as you can see here I have my payload at the start I have a checkm at the end to ver",
    "start": "2435640",
    "end": "2441599"
  },
  {
    "text": "validate that this is all intact now this here duplicates all my information and I don't really want that it would be",
    "start": "2441599",
    "end": "2447599"
  },
  {
    "text": "better if I could simply indicate that I'd like to spread the first one across the beginning of this collection and",
    "start": "2447599",
    "end": "2454240"
  },
  {
    "text": "then do the same for the check sum to say that this here is going to be a new collection where I first spread the",
    "start": "2454240",
    "end": "2460119"
  },
  {
    "text": "content of the payload and then afterwards I spread the content of the check sum and while you're not limited",
    "start": "2460119",
    "end": "2466040"
  },
  {
    "text": "to use it simply once or twice you could do this if you wanted to as well so the",
    "start": "2466040",
    "end": "2471079"
  },
  {
    "text": "spread element is really handy of course this introduces extra allocations",
    "start": "2471079",
    "end": "2476480"
  },
  {
    "text": "there's more stress on the garbage collector but that's kind of obvious when using this language feature even if",
    "start": "2476480",
    "end": "2482119"
  },
  {
    "text": "you were using spans which are very memory efficient it would still have to copy that memory over to a new one",
    "start": "2482119",
    "end": "2488440"
  },
  {
    "text": "so the collection expression in conjunction with the spread element is super handy next we have the primary",
    "start": "2488440",
    "end": "2494000"
  },
  {
    "text": "Constructors so primary Constructors they look like the primary Constructor you have on a record but the difference",
    "start": "2494000",
    "end": "2500040"
  },
  {
    "text": "here is that notice how I use a lower case instead of an uppercase like I did on the record if you remember that I'd",
    "start": "2500040",
    "end": "2507319"
  },
  {
    "text": "be tremendously impressed but here I use a lower case to say to indicate that this here is going to be a private ver",
    "start": "2507319",
    "end": "2515040"
  },
  {
    "text": "private member in my class and it doesn't matter if I do an uppercase here or not it's just to indicate that it",
    "start": "2515040",
    "end": "2521000"
  },
  {
    "text": "actually is a private so instead of having a publicly exposed property when using the primary Constructors on a",
    "start": "2521000",
    "end": "2527319"
  },
  {
    "text": "class that will only generate a backing field introduce a Constructor and allow you to then set that value in the",
    "start": "2527319",
    "end": "2534599"
  },
  {
    "text": "Constructor if we want to publicly expose this we have to create our own public property and set it to that value",
    "start": "2534599",
    "end": "2542400"
  },
  {
    "text": "so you may be wondering what the reason behind this language feature is well probably some of you in here work in MVC",
    "start": "2542400",
    "end": "2549359"
  },
  {
    "text": "or in asp.net core or use view models or whatnot where you have like a million dependencies that are injected",
    "start": "2549359",
    "end": "2555280"
  },
  {
    "text": "automatically into your class so in that case it would be great if we could just add those at one place instead of",
    "start": "2555280",
    "end": "2561839"
  },
  {
    "text": "manually having to introduce a Constructor that takes the parameter that sets it to your private field there",
    "start": "2561839",
    "end": "2567079"
  },
  {
    "text": "just a lot of boilerplate code to write and if you're like me like I have like probably 50 dependencies for every",
    "start": "2567079",
    "end": "2573920"
  },
  {
    "text": "controller which I which is probably bad a sign on my part but this at least reduces the amount of code",
    "start": "2573920",
    "end": "2579680"
  },
  {
    "text": "quite a lot and we can access this like any private private uh field in our",
    "start": "2579680",
    "end": "2584920"
  },
  {
    "text": "class like accesses like this here wherever I want inside my my class all",
    "start": "2584920",
    "end": "2590359"
  },
  {
    "text": "right and if you haven't seen this before this is a way to return multiple values for my method without creating a",
    "start": "2590359",
    "end": "2595920"
  },
  {
    "text": "class I'm returning a topple which was introduced in c 7 nice way of uh returning multiple",
    "start": "2595920",
    "end": "2603520"
  },
  {
    "text": "having multiple return types now finally in C 12 they introduce the concept of",
    "start": "2603520",
    "end": "2609599"
  },
  {
    "text": "interceptors I have this class called a logger I'm going to call logger.log with a string if I simply step into this here",
    "start": "2609599",
    "end": "2615880"
  },
  {
    "text": "and take a look it's going to call its internal method which will throw a new not implemented exception running this",
    "start": "2615880",
    "end": "2623400"
  },
  {
    "text": "will show me that well this is in fact not throwing an exception it's saying hello world which is a little bit odd",
    "start": "2623400",
    "end": "2630040"
  },
  {
    "text": "because I don't have any console right line anywhere what's actually happening in here is that I've written some code",
    "start": "2630040",
    "end": "2636359"
  },
  {
    "text": "to replace this during compile time so when my application compiles this line of code will be replaced and that's been",
    "start": "2636359",
    "end": "2643319"
  },
  {
    "text": "possible before with il weaving we've been able to do this in different ways using aspect oriented programming for",
    "start": "2643319",
    "end": "2650280"
  },
  {
    "text": "example but now I can use a concept called interceptors to say that look at",
    "start": "2650280",
    "end": "2656760"
  },
  {
    "text": "this this uh I have this attribute in this file at this line at this column",
    "start": "2656760",
    "end": "2662880"
  },
  {
    "text": "you should replace it with this extension method the method call has to be exactly the same as the one that I'm",
    "start": "2662880",
    "end": "2670359"
  },
  {
    "text": "replacing and it looks odd though I have to point to the direct file right I have to point to the exact line but if I pull",
    "start": "2670359",
    "end": "2677760"
  },
  {
    "text": "down a nug package that could use Source generation and codee Analysis to figure out what to replace it could generate an",
    "start": "2677760",
    "end": "2684640"
  },
  {
    "text": "Interceptor for me and then by just pulling down a package from nugit that could replace some code in my solution",
    "start": "2684640",
    "end": "2691200"
  },
  {
    "text": "which sounds very dangerous but it's an opt-in feature you have to manually enable who can replace play code and who",
    "start": "2691200",
    "end": "2698160"
  },
  {
    "text": "can't so don't be scared of using nugit it's totally safe and if I run this with",
    "start": "2698160",
    "end": "2703640"
  },
  {
    "text": "a debugger I'll show you here as well that I'm going to try to step into this and that doesn't work",
    "start": "2703640",
    "end": "2710079"
  },
  {
    "text": "because um I added this attribute as well debugger hidden which is another funny prank to",
    "start": "2710079",
    "end": "2716760"
  },
  {
    "text": "pull on your co-workers I'm just giving you ideas on how to get",
    "start": "2716760",
    "end": "2722359"
  },
  {
    "text": "fired now I love this so I guess the question is what's the reasoning behind",
    "start": "2722359",
    "end": "2727800"
  },
  {
    "text": "a language feature like this well it can generate code look at your solution look at what you're trying to Target which",
    "start": "2727800",
    "end": "2733920"
  },
  {
    "text": "platform or you publishing for ahead of time compilation for a specific architecture then maybe it's better to",
    "start": "2733920",
    "end": "2740000"
  },
  {
    "text": "generate some code that replaces some of your method calls and they're doing this in asp.net core so it's it's a quite",
    "start": "2740000",
    "end": "2746079"
  },
  {
    "text": "nice language feature I don't think that we're going to see ourselves writing a lot of",
    "start": "2746079",
    "end": "2751720"
  },
  {
    "text": "interceptors but um using pre-built ones for Microsoft or using Source generation",
    "start": "2751720",
    "end": "2756760"
  },
  {
    "text": "will will allow us to to use this all right so just to recap this we looked at",
    "start": "2756760",
    "end": "2761800"
  },
  {
    "text": "the collection Expressions allowing us to easily create collections spread elements across new collections as well",
    "start": "2761800",
    "end": "2768920"
  },
  {
    "text": "the primary Constructors are really useful for things like controllers view controllers uh view models and so forth",
    "start": "2768920",
    "end": "2775359"
  },
  {
    "text": "but maybe less so important for things like a normal data class especially if we look here at the decompile code I'm",
    "start": "2775359",
    "end": "2782079"
  },
  {
    "text": "not sure if you can see this but there's just generated a backing field and there's also a Constructor generated and",
    "start": "2782079",
    "end": "2788000"
  },
  {
    "text": "a two string override so I wouldn't use this for a normal class like this now they also",
    "start": "2788000",
    "end": "2794680"
  },
  {
    "text": "improve the lambdas again so lambdas have been around for a long time but still you know improving attributes on",
    "start": "2794680",
    "end": "2799760"
  },
  {
    "text": "lambdas and in this case here we can now have optional parameters or or default Lambda parameters this is useful in",
    "start": "2799760",
    "end": "2806280"
  },
  {
    "text": "minimal apis instead of having to create multiple different overloads I can now",
    "start": "2806280",
    "end": "2811520"
  },
  {
    "text": "have one where I have optional parameters we can also Alias any type I",
    "start": "2811520",
    "end": "2817079"
  },
  {
    "text": "could add this at the top of my class to say like Dimensions whenever you refer to this it's going to be a tuple with",
    "start": "2817079",
    "end": "2822640"
  },
  {
    "text": "these two different fields then I don't have to create my separate class I don't have to create a",
    "start": "2822640",
    "end": "2828480"
  },
  {
    "text": "separate struct this would just work finally we looked at the interceptors which then allows us to",
    "start": "2828480",
    "end": "2835400"
  },
  {
    "text": "take this method call and replace it with this extension method it has to be an extension method it has to match the",
    "start": "2835400",
    "end": "2841480"
  },
  {
    "text": "signature you have to know the exact file and the exact line of code when compiling and again this is not",
    "start": "2841480",
    "end": "2848359"
  },
  {
    "text": "something that you probably write unless you pull pranks on your co-workers but it is used inside for",
    "start": "2848359",
    "end": "2854359"
  },
  {
    "text": "example h.net core to improve performance they have this thing called a request delegate generator which is",
    "start": "2854359",
    "end": "2860520"
  },
  {
    "text": "specifically used when you're using ahead of time compilation to improve performance to to generate code that's",
    "start": "2860520",
    "end": "2866319"
  },
  {
    "text": "more suitable for your particular use case so with that being said then this",
    "start": "2866319",
    "end": "2871839"
  },
  {
    "text": "is all there is to C 12 now still quite a lot of things added",
    "start": "2871839",
    "end": "2877040"
  },
  {
    "text": "to the language and with C 13 the goal has been to further work on stability",
    "start": "2877040",
    "end": "2884240"
  },
  {
    "text": "and introduce things that build upon the language features already existing in the",
    "start": "2884240",
    "end": "2890240"
  },
  {
    "text": "language they're not really going to introduce any groundbreaking features",
    "start": "2890240",
    "end": "2895280"
  },
  {
    "text": "someone's probably sad in here that are thinking about discriminated unions not coming yet I'm",
    "start": "2895280",
    "end": "2900559"
  },
  {
    "text": "sorry we probably come by the time I retire so C 13 will",
    "start": "2900559",
    "end": "2907280"
  },
  {
    "text": "introduce params collection so if you look at this code piece here I could say",
    "start": "2907280",
    "end": "2912400"
  },
  {
    "text": "that I have a params of an i inumerable of a string as an input to My Method now",
    "start": "2912400",
    "end": "2917680"
  },
  {
    "text": "looking at this would that indicate that I can pass parameters off arrays or does it mean that I can build up an array of",
    "start": "2917680",
    "end": "2924680"
  },
  {
    "text": "strings without creating the first collection well I can do this both different ways I could say for example",
    "start": "2924680",
    "end": "2930480"
  },
  {
    "text": "that I have my new collection here where I use collection Expressions to create this I then pass it into process and",
    "start": "2930480",
    "end": "2937240"
  },
  {
    "text": "that just works that's what I would assume this would be doing as well what I can also do is that I can now instead",
    "start": "2937240",
    "end": "2943640"
  },
  {
    "text": "of creating that collection call this method and just pass all the different values I don't have to create that",
    "start": "2943640",
    "end": "2948839"
  },
  {
    "text": "temporary list anymore or create a new list and pass the values into it the compiler will do that for me which is",
    "start": "2948839",
    "end": "2955680"
  },
  {
    "text": "quite handy we're also going to get a new lock type a new lock semantic so there's some improvements as to how it",
    "start": "2955680",
    "end": "2961720"
  },
  {
    "text": "works with locking locking in multi-threaded applications is extremely difficult it's not something that you",
    "start": "2961720",
    "end": "2967960"
  },
  {
    "text": "should take lightly so to help with this to avoid using a a syn root or a the",
    "start": "2967960",
    "end": "2973400"
  },
  {
    "text": "normal object type in your classes to create a lock you can use this new thing",
    "start": "2973400",
    "end": "2978680"
  },
  {
    "text": "called a system. Threading do loock and that should be a static in your class but just showing you exactly how you",
    "start": "2978680",
    "end": "2984119"
  },
  {
    "text": "could how you could use this and this together with the lock well there's some things happening",
    "start": "2984119",
    "end": "2989559"
  },
  {
    "text": "behind the scenes here this there's this new type there's a whole bunch of reasonings around why this is better",
    "start": "2989559",
    "end": "2995319"
  },
  {
    "text": "than using the traditional approach of a sync route using a static object they improving partials so you",
    "start": "2995319",
    "end": "3001880"
  },
  {
    "text": "can now do partial properties for example like you do with classes and methods we could have a partial property",
    "start": "3001880",
    "end": "3007880"
  },
  {
    "text": "in the class this is again something that you use for Source generation partial classes and partial methods have",
    "start": "3007880",
    "end": "3013960"
  },
  {
    "text": "been used for for code generation for a long time if you look at the code behind for some of the different types of",
    "start": "3013960",
    "end": "3020480"
  },
  {
    "text": "projects that you could use they all rely on partials and now having partial properties also allow us to further",
    "start": "3020480",
    "end": "3026720"
  },
  {
    "text": "expand on this idea there's a way to now use implicit index access I don't have an example of",
    "start": "3026720",
    "end": "3033319"
  },
  {
    "text": "this but essentially it means that when you're initializing a type that has an array on it you can refer to like the",
    "start": "3033319",
    "end": "3039440"
  },
  {
    "text": "last element of that list without going through the entire indexing of that",
    "start": "3039440",
    "end": "3044920"
  },
  {
    "text": "collection there's a new escape sequence if you're into that method groups for natural type improvements and there's a",
    "start": "3044920",
    "end": "3051599"
  },
  {
    "text": "lot more and a lot more in terms of features that improve stability features",
    "start": "3051599",
    "end": "3058079"
  },
  {
    "text": "smaller features that let maybe the net team do some of their work more efficiently but there's a lot happening",
    "start": "3058079",
    "end": "3063960"
  },
  {
    "text": "in C and I like that they have these types of language versions as well where they don't introduce like a 15 new",
    "start": "3063960",
    "end": "3070880"
  },
  {
    "text": "features and a couple of them are really groundbreaking so looking at this here there's not really there's going to be a",
    "start": "3070880",
    "end": "3076880"
  },
  {
    "text": "couple of more maybe important features coming in C 13 but we'll know more about that after",
    "start": "3076880",
    "end": "3082440"
  },
  {
    "text": "November Honestly though we don't have to jump on all of the new features and it as I said in the beginning it can be",
    "start": "3082440",
    "end": "3088920"
  },
  {
    "text": "a bit daunting when they keep introducing 10 or 15 new features in every version coming in from CP and",
    "start": "3088920",
    "end": "3095000"
  },
  {
    "text": "having been out for a while it can be extremely difficult to keep track so one of the the things they try to work on as",
    "start": "3095000",
    "end": "3101599"
  },
  {
    "text": "well is to make sure that every feature feels like it belongs in C even though",
    "start": "3101599",
    "end": "3107079"
  },
  {
    "text": "they take inspiration from other programming languages that is a big big thing that they work on as well so you",
    "start": "3107079",
    "end": "3113720"
  },
  {
    "text": "may have heard about this thing called extensions everything they talked about this at build for example this year and",
    "start": "3113720",
    "end": "3119440"
  },
  {
    "text": "they talked about last year as well and they wanted to allow us to extend every type and and all everything available in",
    "start": "3119440",
    "end": "3126200"
  },
  {
    "text": "C but unfortunately as they want to work on more performance improving already",
    "start": "3126200",
    "end": "3132640"
  },
  {
    "text": "existing language features introducing this and then also getting support in visual studio and other idees might take",
    "start": "3132640",
    "end": "3138680"
  },
  {
    "text": "a little bit more time so that maybe coming in C 14 or 15 who knows again we",
    "start": "3138680",
    "end": "3144520"
  },
  {
    "text": "can keep keep track of what's happening if if we go on to GitHub and check the language feature status page we can take",
    "start": "3144520",
    "end": "3150000"
  },
  {
    "text": "a look at exactly what's going to happen with the language what's coming in C 145 what are",
    "start": "3150000",
    "end": "3156079"
  },
  {
    "text": "the reasonings behind things like discriminated unions not making it into the language now there are some water",
    "start": "3156079",
    "end": "3162200"
  },
  {
    "text": "dividers that we can read up on that that has a tremendous amount of people involved even though there's a team at",
    "start": "3162200",
    "end": "3168839"
  },
  {
    "text": "Microsoft working around the clock basically figuring out how to improve the language they also have to take into",
    "start": "3168839",
    "end": "3175960"
  },
  {
    "text": "account all the comments and all the participation from the community so it's great to take a look at this and again",
    "start": "3175960",
    "end": "3182480"
  },
  {
    "text": "it can be a little bit overwhelming all of the uh all of the features in C they're here to help us write code",
    "start": "3182480",
    "end": "3188119"
  },
  {
    "text": "that's less buggy that's more performant and we should really just use new language features if it makes sense like",
    "start": "3188119",
    "end": "3195160"
  },
  {
    "text": "if you ask me to come in and refactor your entire codebase I'm going to first ask like do you really have a problem or",
    "start": "3195160",
    "end": "3201440"
  },
  {
    "text": "do you just want to use the new things because it's more appealing to new developers surely enough they take",
    "start": "3201440",
    "end": "3207119"
  },
  {
    "text": "inspiration from other programming languages and new new developers on the market might like to to have a nod-like",
    "start": "3207119",
    "end": "3213400"
  },
  {
    "text": "programming experience in C but people that have worked in C for a long time they still want to feel comfortable with",
    "start": "3213400",
    "end": "3219880"
  },
  {
    "text": "this this codebase as well so it's a difficult trade-off but using all of the language",
    "start": "3219880",
    "end": "3225559"
  },
  {
    "text": "features in the way that they're they're meant to is probably more important than just jumping on the the next big thing",
    "start": "3225559",
    "end": "3232599"
  },
  {
    "text": "so with that being said if you like to learn more about C I have a lot of course on plural site everything from",
    "start": "3232599",
    "end": "3238640"
  },
  {
    "text": "all of the language features to more in detail on async I wait as synchronous programming and next week I have this",
    "start": "3238640",
    "end": "3244520"
  },
  {
    "text": "course coming up on profiling and benchmarking in C and I said this in the beginning as",
    "start": "3244520",
    "end": "3249799"
  },
  {
    "text": "well if you have any questions I'm always happy to answer questions on either email send me a ping on Twitter",
    "start": "3249799",
    "end": "3256359"
  },
  {
    "text": "grab me in the hallway just talk to me about C orn net in general there's so much happening with both C and net and I",
    "start": "3256359",
    "end": "3263680"
  },
  {
    "text": "know it can be a little bit difficult to keep track and therefore you know just send me an email if you have any questions I really hope you enjoy this",
    "start": "3263680",
    "end": "3270599"
  },
  {
    "text": "and on the way out there's a little box where you can put your vote put a green vote in the box if you didn't like this",
    "start": "3270599",
    "end": "3276760"
  },
  {
    "text": "feel free to skip the line and go grab a coffee all right thank you so much for coming enjoy the rest of the conference",
    "start": "3276760",
    "end": "3285359"
  }
]