[
  {
    "text": "okay all right well welcome everybody my name is John Laika's I'm work at Bloomberg I've been there for now almost",
    "start": "4090",
    "end": "10820"
  },
  {
    "text": "20 years and I've been doing the same thing for about 20 years which is working on large-scale C++ software",
    "start": "10820",
    "end": "17240"
  },
  {
    "text": "design at a company that does a lot of large-scale C++ software design so it's",
    "start": "17240",
    "end": "22280"
  },
  {
    "text": "good good fit what I'm going to talk to you about is a little different than",
    "start": "22280",
    "end": "27290"
  },
  {
    "text": "perhaps you might be used to because I'm not going to talk about the state of the",
    "start": "27290",
    "end": "32480"
  },
  {
    "text": "working paper with modules because that still is changing and it's it's part of",
    "start": "32480",
    "end": "38690"
  },
  {
    "text": "C++ 20 but people are still working on it and getting it just so and the tooling and such is quite an issue what",
    "start": "38690",
    "end": "45170"
  },
  {
    "text": "I'm going to talk about is how we would use a modules feature in other words what it means to you as an everyday",
    "start": "45170",
    "end": "50780"
  },
  {
    "text": "person and it's going to be a while before modules are are actually in in use but that doesn't mean that we can't",
    "start": "50780",
    "end": "57980"
  },
  {
    "text": "start thinking about designing with them because I've been designing with modules for 30 years and so modules are a tool",
    "start": "57980",
    "end": "64549"
  },
  {
    "text": "that help us to do our jobs better but that doesn't mean we can't do our jobs today because if we had to wait till",
    "start": "64549",
    "end": "69979"
  },
  {
    "text": "today you know when modules are out to do our jobs we wouldn't be doing anything until now and that's silly",
    "start": "69979",
    "end": "76370"
  },
  {
    "text": "so we're going to talk about stuff how to use it and so on so C++ modules",
    "start": "76370",
    "end": "81909"
  },
  {
    "text": "that's the talk for today here's my copyright notice because I have to do that here's an abstract but you're",
    "start": "81909",
    "end": "89270"
  },
  {
    "text": "already here so don't worry about this this is for the viewers on the at home",
    "start": "89270",
    "end": "94369"
  },
  {
    "text": "we're going to talk about what we're going to talk about and I always start out with large-scale C++ has many",
    "start": "94369",
    "end": "100549"
  },
  {
    "text": "dimensions it involves logical and physical design we should know that by now we need to be able to isolate the",
    "start": "100549",
    "end": "107360"
  },
  {
    "text": "functionality into fine grained physical components we need to be able to explain",
    "start": "107360",
    "end": "113840"
  },
  {
    "text": "what our functionality is and we will be doing that in terms of English contracts",
    "start": "113840",
    "end": "120650"
  },
  {
    "text": "and then the language itself C++ lacks a higher level of ways to describe",
    "start": "120650",
    "end": "130328"
  },
  {
    "text": "software both logically and physically that are coherent so we have the notion",
    "start": "130329",
    "end": "135530"
  },
  {
    "text": "of a translation unit we would like something we'd like something that we can use at a higher",
    "start": "135530",
    "end": "141110"
  },
  {
    "text": "level of abstraction and modules eventually may get us there so the",
    "start": "141110",
    "end": "149510"
  },
  {
    "text": "purpose of this talk is I want to review what I'm going to call component based design and component based design is",
    "start": "149510",
    "end": "155990"
  },
  {
    "text": "thinking about things at a higher level than a class modules at a higher level",
    "start": "155990",
    "end": "161690"
  },
  {
    "text": "of abstraction than a class so we're going to talk about component properties implied dependency basically the stuff",
    "start": "161690",
    "end": "168860"
  },
  {
    "text": "that I've talked about for ever since 1996 but just to bring you up to speed",
    "start": "168860",
    "end": "175310"
  },
  {
    "text": "I am I literally have a deadline for my next book which is coming out this year",
    "start": "175310",
    "end": "181100"
  },
  {
    "text": "I swear I absolutely swear that it's coming out this year I know because my",
    "start": "181100",
    "end": "187010"
  },
  {
    "text": "deadline is Friday I worked all the way here I work till 6:00 in the morning and I'm here talking I'm going to go have",
    "start": "187010",
    "end": "194180"
  },
  {
    "text": "dinner that I'm gonna work all night then I'm gonna get on a train and then a plane and then a very long plane ride",
    "start": "194180",
    "end": "199910"
  },
  {
    "text": "and then I have to turn it in so that's how sure I am that it's going to be done so really really not kidding it's going",
    "start": "199910",
    "end": "208250"
  },
  {
    "text": "to be done it will be out I have a promise from my publisher that it'll be out this year that's why they're killing",
    "start": "208250",
    "end": "213710"
  },
  {
    "text": "me so anyway this talk that I'm about to give right now it's the book is almost a",
    "start": "213710",
    "end": "218960"
  },
  {
    "text": "thousand pages I'm going to give you the entire book right now in less than an hour so it's no problem",
    "start": "218960",
    "end": "224240"
  },
  {
    "text": "it's all good oh good so we're going to review these physical design things here",
    "start": "224240",
    "end": "230060"
  },
  {
    "text": "we go that's the first part by the way this talk is for parts but I have time for only the first two the good news is",
    "start": "230060",
    "end": "235820"
  },
  {
    "text": "the second two parts don't exist yet because they're what we're working on to get modules to be even more expressive",
    "start": "235820",
    "end": "242360"
  },
  {
    "text": "and more powerful so I'm not going to really tell you all about the other two parts until they happen but I'll give",
    "start": "242360",
    "end": "248450"
  },
  {
    "text": "you a good idea of what we're looking for so anyway what we're looking at here",
    "start": "248450",
    "end": "253970"
  },
  {
    "text": "this thing this slide I'm not going to tell you when I wrote this slide but I wrote it a long time ago this is really",
    "start": "253970",
    "end": "259040"
  },
  {
    "text": "representing a module it has a logical component and a physical component in fact I call it a component so logical",
    "start": "259040",
    "end": "265820"
  },
  {
    "text": "for classes and functions physical for files and libraries I have these rectangles that I represent",
    "start": "265820",
    "end": "270860"
  },
  {
    "text": "physical things and I have these these either capsules or oval-shaped things or represent logical things and the idea is",
    "start": "270860",
    "end": "277430"
  },
  {
    "text": "that we have units that are both logically and physically coherent and if that has some intuitive meaning to you",
    "start": "277430",
    "end": "283280"
  },
  {
    "text": "that's great hopefully it will there are some much more precise ways of saying that but",
    "start": "283280",
    "end": "288460"
  },
  {
    "text": "intuitively the logical nature of the thing is encapsulated in some physical",
    "start": "288460",
    "end": "294020"
  },
  {
    "text": "entity and isn't distributed throughout the ether it's really what it means so here I have this collection of physical",
    "start": "294020",
    "end": "299960"
  },
  {
    "text": "entities which heretofore we called components and ideally might be called modules and they consist of logical",
    "start": "299960",
    "end": "307340"
  },
  {
    "text": "content as you can see and in the old module way which consisted of a dot H",
    "start": "307340",
    "end": "313819"
  },
  {
    "text": "and a dot CPP and possibly a standalone test-driver to exercise your code and guess what new modules will look just",
    "start": "313819",
    "end": "320150"
  },
  {
    "text": "like that most likely so anyway this is what we have we have an implementation",
    "start": "320150",
    "end": "325789"
  },
  {
    "text": "file we have a header file nothing is different about modules they also have these things and a test driver and by",
    "start": "325789",
    "end": "333379"
  },
  {
    "text": "the way modules need to be tested they don't solve that problem in case anybody thought modules don't need to be that",
    "start": "333379",
    "end": "338569"
  },
  {
    "text": "they do components and modules are the fundamental units of design not classes",
    "start": "338569",
    "end": "344719"
  },
  {
    "text": "because you're building things that need to be assembled and you don't assemble classes you put the classes than the",
    "start": "344719",
    "end": "351289"
  },
  {
    "text": "modules and you assemble the modules so anyway so what is a module or what is a",
    "start": "351289",
    "end": "357409"
  },
  {
    "text": "component it's not just did not h dot cpp pair there are additional properties now one of the interesting things is",
    "start": "357409",
    "end": "364240"
  },
  {
    "text": "originally modules were a way of making things run faster and it kind of like",
    "start": "364240",
    "end": "370490"
  },
  {
    "text": "didn't seem to be as important that they had certain architectural properties so a little over two years ago I actually",
    "start": "370490",
    "end": "378139"
  },
  {
    "text": "wrote a paper which we're gonna see a little bit later that said very short it's like three pages in ASCII and it's",
    "start": "378139",
    "end": "383930"
  },
  {
    "text": "just like whatever modules do I don't care but they have to satisfy these business requirements or I won't use them period and so that's that paper",
    "start": "383930",
    "end": "392210"
  },
  {
    "text": "we'll see that later anyway there are some properties that modules have to have and there's some properties that component have components have been",
    "start": "392210",
    "end": "398959"
  },
  {
    "text": "there four of them and the first one is that the dot CPP file includes its",
    "start": "398959",
    "end": "404000"
  },
  {
    "text": "header file as the first substantive line of code that's been a requirement for C++ and C design for me forever and there's a very",
    "start": "404000",
    "end": "411740"
  },
  {
    "text": "good reason for it does anybody know why we do that why do we include the header file as the first line of code of the",
    "start": "411740",
    "end": "417620"
  },
  {
    "text": "component up specifically my dot H file I'm including it in my dot CPP file yes",
    "start": "417620",
    "end": "424450"
  },
  {
    "text": "okay so you need to include the header somewhere but why does it have to be the first line why the first line why don't",
    "start": "424450",
    "end": "431390"
  },
  {
    "text": "I include standard yes to make the header compile in isolation yes you",
    "start": "431390",
    "end": "440390"
  },
  {
    "text": "avoid Linko include order dependencies by including your header first it means that my",
    "start": "440390",
    "end": "446270"
  },
  {
    "text": "header has to compile without any other headers so if you've every people to take nothing else away from this talk",
    "start": "446270",
    "end": "451460"
  },
  {
    "text": "please from now on always include your own dot H first just do that for me that",
    "start": "451460",
    "end": "456500"
  },
  {
    "text": "alone is worth the price of admission all right even if the CPP file is empty",
    "start": "456500",
    "end": "462440"
  },
  {
    "text": "at least you'll have some place before your clients find out that it does or",
    "start": "462440",
    "end": "468020"
  },
  {
    "text": "doesn't compile all right the second one is all logical constructs having external linkage defined in a dot CPP",
    "start": "468020",
    "end": "474500"
  },
  {
    "text": "file are declared in the corresponding die th file all right before we go further what do I mean by defined and",
    "start": "474500",
    "end": "482900"
  },
  {
    "text": "declared what's the difference what",
    "start": "482900",
    "end": "489440"
  },
  {
    "text": "about internal versus external linkage what does that mean ok so fortunately we",
    "start": "489440",
    "end": "496550"
  },
  {
    "text": "can talk about that so every definition",
    "start": "496550",
    "end": "502729"
  },
  {
    "text": "is a declaration I hate that but apparently it's self so for our purposes",
    "start": "502729",
    "end": "509960"
  },
  {
    "text": "a declaration is going to do so introduce a name into a scope that's",
    "start": "509960",
    "end": "516770"
  },
  {
    "text": "what we're going to mean for our purposes apparently a declaration can introduce something else into a scope but I don't care the standard has some",
    "start": "516770",
    "end": "523849"
  },
  {
    "text": "very interesting corners that I as I said it just makes life difficult this",
    "start": "523849",
    "end": "528860"
  },
  {
    "text": "thing that you just appeared is that a declaration or a definition",
    "start": "528860",
    "end": "533890"
  },
  {
    "text": "what do you think how many people think it's a declaration okay how many people",
    "start": "535310",
    "end": "540779"
  },
  {
    "text": "think it's a definition how many think it's both okay",
    "start": "540779",
    "end": "546510"
  },
  {
    "text": "the answer is it's both okay this is a test what is this is it a",
    "start": "546510",
    "end": "553140"
  },
  {
    "text": "declaration a definition or both what's this declaration definition or",
    "start": "553140",
    "end": "560730"
  },
  {
    "text": "both what's this what's this what's this",
    "start": "560730",
    "end": "575360"
  },
  {
    "text": "what's this do you notice a pattern do",
    "start": "577200",
    "end": "583440"
  },
  {
    "text": "you see it like I can try to explain this or I can do it by example turns out there's no way to explain it it's by",
    "start": "583440",
    "end": "589470"
  },
  {
    "text": "example but you get it what's this this",
    "start": "589470",
    "end": "596010"
  },
  {
    "text": "is a trick question this is an interview question it's a declaration only now in",
    "start": "596010",
    "end": "602310"
  },
  {
    "text": "certain platforms it'll zero it out sometimes maybe whatever it's the Declaration of it",
    "start": "602310",
    "end": "607410"
  },
  {
    "text": "what's this",
    "start": "607410",
    "end": "610490"
  },
  {
    "text": "no I created an object it exists I can take its address it's a definition",
    "start": "613310",
    "end": "619699"
  },
  {
    "text": "what's this it's a definition only now I",
    "start": "619699",
    "end": "628170"
  },
  {
    "text": "was told by Chandler Carruth that this is a redecoration and a definition I told him all right but it's really a",
    "start": "628170",
    "end": "634440"
  },
  {
    "text": "definition only really because that's my definition of definition okay it's not self declaring do you see what I mean",
    "start": "634440",
    "end": "641209"
  },
  {
    "text": "it's that kind of definition that doesn't declare itself that's why it's a definition only even though it's a",
    "start": "641209",
    "end": "647010"
  },
  {
    "text": "redecoration because the standard says so okay all right so int a that has",
    "start": "647010",
    "end": "654540"
  },
  {
    "text": "external linkage what do I mean by external linkage I mean it's visible outside this translation unit do you see",
    "start": "654540",
    "end": "661589"
  },
  {
    "text": "why this stuff is important for modules you see it's like we have to learn this stuff modules are gonna make our lives",
    "start": "661589",
    "end": "666660"
  },
  {
    "text": "of really hard because we gonna have to get really smart about these things and know whether something is visible outside of the translation unit and",
    "start": "666660",
    "end": "672990"
  },
  {
    "text": "things like that that's what modules do that's what components do all right so this has external linkage it means that",
    "start": "672990",
    "end": "679440"
  },
  {
    "text": "I can use it in another translation unit what about this thing can I use it in another translation unit we have Andre",
    "start": "679440",
    "end": "689040"
  },
  {
    "text": "here so you can check me destroy me on this no he's here to destroy me not to learn he told me so all right so what's",
    "start": "689040",
    "end": "698610"
  },
  {
    "text": "this is it a declaration or a definition okay does it have internal or external",
    "start": "698610",
    "end": "704190"
  },
  {
    "text": "linkage external linkage right I can call that",
    "start": "704190",
    "end": "709980"
  },
  {
    "text": "from somewhere else all I have to do is declare it somewhere else and then I can call it right does anybody is anybody confused by this",
    "start": "709980",
    "end": "717300"
  },
  {
    "text": "don't worry about the idea that you might think it's in line or something like that I mean I'm just this is a",
    "start": "717300",
    "end": "722670"
  },
  {
    "text": "definition and therefore I can call it from somewhere else okay what about this",
    "start": "722670",
    "end": "729530"
  },
  {
    "text": "external or internal okay what about",
    "start": "729530",
    "end": "734610"
  },
  {
    "text": "this external the years to be treated",
    "start": "734610",
    "end": "741960"
  },
  {
    "text": "kind of funny before it was standardized this is external linkage okay what about",
    "start": "741960",
    "end": "748020"
  },
  {
    "text": "this internal okay what about this okay",
    "start": "748020",
    "end": "757080"
  },
  {
    "text": "this this",
    "start": "757080",
    "end": "765350"
  },
  {
    "text": "good this good okay that's a declaration",
    "start": "766100",
    "end": "774190"
  },
  {
    "text": "this is a definition okay namespace",
    "start": "774190",
    "end": "780040"
  },
  {
    "text": "class foo what its internal this is a",
    "start": "780040",
    "end": "789320"
  },
  {
    "text": "namespace it's an unnamed namespace right please okay how about static int",
    "start": "789320",
    "end": "798490"
  },
  {
    "text": "no there's no name how about this this static in the underscore s",
    "start": "798490",
    "end": "805270"
  },
  {
    "text": "all right what about this doesn't really have anything just saying it's kind of",
    "start": "822729",
    "end": "829279"
  },
  {
    "text": "externally squared it doesn't really have anything no no no linkage how are you so class phooey in this named",
    "start": "829279",
    "end": "835669"
  },
  {
    "text": "namespace static what what where did it",
    "start": "835669",
    "end": "844099"
  },
  {
    "text": "what did I spell wrong oh that's about extra credit yeah thank",
    "start": "844099",
    "end": "850549"
  },
  {
    "text": "you I have to fix this for CP pika that's good I have to remember that all right",
    "start": "850549",
    "end": "855609"
  },
  {
    "text": "so this is external linkage this has external linkage that is external",
    "start": "855609",
    "end": "862099"
  },
  {
    "text": "linkage what about this doesn't compile",
    "start": "862099",
    "end": "869809"
  },
  {
    "text": "why so that's a declaration that's a",
    "start": "869809",
    "end": "875119"
  },
  {
    "text": "definition that's a declaration that's a definition and that's a definition and these guys are fighting because they're",
    "start": "875119",
    "end": "882709"
  },
  {
    "text": "defining the same thing if I take that out then this is internal linkage if I",
    "start": "882709",
    "end": "888799"
  },
  {
    "text": "take that out this doesn't compile again anyway that's a tour of some stuff now",
    "start": "888799",
    "end": "894109"
  },
  {
    "text": "that we know what I was talking about all constructs having external or dual binding declared in a dot H file if",
    "start": "894109",
    "end": "903199"
  },
  {
    "text": "defined it all are defined within the component wait a minute I forgot to tell you about this guy I have to tell you what it means",
    "start": "903199",
    "end": "909619"
  },
  {
    "text": "here so what I'm saying is if something is visible potentially visible outside",
    "start": "909619",
    "end": "916999"
  },
  {
    "text": "this translation unit then I want to declare it in the header so human beings can know visibly that it's not just an",
    "start": "916999",
    "end": "924859"
  },
  {
    "text": "ABI collision it's actually here so it doesn't matter whether it's public protected or private it's that it can be",
    "start": "924859",
    "end": "931369"
  },
  {
    "text": "seen outside the translation unit if it can be seen it needs to be part of the physical interface that human beings can see that's what this means all logical",
    "start": "931369",
    "end": "938059"
  },
  {
    "text": "constructs having external linkage that can be seen outside the translation unit or module defined in the CPP file must",
    "start": "938059",
    "end": "945559"
  },
  {
    "text": "be declared in the corresponding dot H file they can be the clear public or private they can be free operators",
    "start": "945559",
    "end": "950989"
  },
  {
    "text": "whatever they are but they have to be declared now this one is saying all constructs having",
    "start": "950989",
    "end": "956240"
  },
  {
    "text": "Journal or dual bindings what is binding binding is something different binding",
    "start": "956240",
    "end": "962120"
  },
  {
    "text": "is something I made up what are examples of binding can anybody think of what I",
    "start": "962120",
    "end": "967370"
  },
  {
    "text": "might mean by and it has to do with tools if the compiler is doing the",
    "start": "967370",
    "end": "973790"
  },
  {
    "text": "binding binding a name to its use then we say it has internal binding the",
    "start": "973790",
    "end": "979670"
  },
  {
    "text": "compilers doing it if something is being handled by the linker then we say it has",
    "start": "979670",
    "end": "984830"
  },
  {
    "text": "external binding because the linkers doing it now here's the tricky question can anybody think of something that has",
    "start": "984830",
    "end": "992330"
  },
  {
    "text": "dual bindings meaning the compiler might deal with it or the linker might deal",
    "start": "992330",
    "end": "998959"
  },
  {
    "text": "with it what do you think templates that's one can anybody think of any other construct inline functions excellent those are the",
    "start": "998959",
    "end": "1006250"
  },
  {
    "text": "only two that I know of templates and inline functions they behave the same way what's interesting about them is",
    "start": "1006250",
    "end": "1012279"
  },
  {
    "text": "their source code the bodies exist in the header file so the compiler has a",
    "start": "1012279",
    "end": "1017950"
  },
  {
    "text": "crack had in lining them so templates that are not marked inline are still",
    "start": "1017950",
    "end": "1023410"
  },
  {
    "text": "fair game to be in like you realize this ok so that's fine and if the compiler",
    "start": "1023410",
    "end": "1029500"
  },
  {
    "text": "chooses not to inline them then the linker gets a shot so that's duel binding okay sorry so the example here",
    "start": "1029500",
    "end": "1037569"
  },
  {
    "text": "is all constructs having external or dual bondage in other words if the linker can get involved if it's possible",
    "start": "1037569",
    "end": "1043209"
  },
  {
    "text": "for the linker to get involved then we must not have a local declaration we",
    "start": "1043209",
    "end": "1048700"
  },
  {
    "text": "must include its header does that make sense what we're saying is if there's a possibility that the compiler my",
    "start": "1048700",
    "end": "1056110"
  },
  {
    "text": "compiler will never see the definition of that thing then it is not okay to declare it locally it is just not okay",
    "start": "1056110",
    "end": "1063640"
  },
  {
    "text": "you must found include now if I know that later on my compiler will get a",
    "start": "1063640",
    "end": "1069250"
  },
  {
    "text": "whack at this thing then it's okay to forward declare so if you have a class declaration and there are reasons not to",
    "start": "1069250",
    "end": "1074950"
  },
  {
    "text": "forward declare classes but it's not evil like for declaring a function so",
    "start": "1074950",
    "end": "1080350"
  },
  {
    "text": "keep the difference in mind okay and the last one is a component of components",
    "start": "1080350",
    "end": "1087160"
  },
  {
    "text": "functionality is accessed via pound clewd this idea is somewhat redundant to",
    "start": "1087160",
    "end": "1093280"
  },
  {
    "text": "the others but what it's saying is in order for me to discover the physical",
    "start": "1093280",
    "end": "1098650"
  },
  {
    "text": "dependencies of my system my collection of modules I want to look at the pound",
    "start": "1098650",
    "end": "1104169"
  },
  {
    "text": "include or alternatively the import directives of my module and I don't want",
    "start": "1104169",
    "end": "1109840"
  },
  {
    "text": "to have to look at anything else and if I look at just those things and modules will help me because where I have to be",
    "start": "1109840",
    "end": "1116620"
  },
  {
    "text": "a good citizen and not do things in header files modules will hold my hand",
    "start": "1116620",
    "end": "1121960"
  },
  {
    "text": "and make sure that I don't do some awful things which we'll discuss later some",
    "start": "1121960",
    "end": "1128290"
  },
  {
    "text": "very awful things the modules won't let you do that and that's not an accident that is actually after long arguments",
    "start": "1128290",
    "end": "1135220"
  },
  {
    "text": "with people there are certain things that the Standards Committee does where they try to tell you it's not good for",
    "start": "1135220",
    "end": "1140350"
  },
  {
    "text": "you don't do it people say we're we wait I need to do that but it's really not it well and eventually we say live and let",
    "start": "1140350",
    "end": "1146260"
  },
  {
    "text": "live and we say if you want to do it do it I don't think it's a good idea whatever but then there are some things",
    "start": "1146260",
    "end": "1151270"
  },
  {
    "text": "like polio where you say no we're just not going to do that we really aren't",
    "start": "1151270",
    "end": "1156370"
  },
  {
    "text": "and there are two things that modules do three things actually two of them are like polio and one of them is closed so",
    "start": "1156370",
    "end": "1163480"
  },
  {
    "text": "there are three things that modules do that are awesome that stop you from making the classic mistakes that people",
    "start": "1163480",
    "end": "1169929"
  },
  {
    "text": "have made throughout history so that's where modules come in really handy and they do something I mean you can guard",
    "start": "1169929",
    "end": "1175570"
  },
  {
    "text": "against certain things but some things just happen by accident and modules will help us in those cases we'll talk about that so anyway what we're saying here is",
    "start": "1175570",
    "end": "1182350"
  },
  {
    "text": "if you use something substantively not just its name if you use it",
    "start": "1182350",
    "end": "1187600"
  },
  {
    "text": "substantively pound included okay so we're gonna talk about logical relationships just because that's an",
    "start": "1187600",
    "end": "1193929"
  },
  {
    "text": "important thing to know about I put this stuff up this is sort of a classical thing we don't really have value types",
    "start": "1193929",
    "end": "1200110"
  },
  {
    "text": "that have inheritance we don't do that but this is a good illustration so we have this notion of is ax and so",
    "start": "1200110",
    "end": "1206230"
  },
  {
    "text": "intuitively a polygon is a shape and you can see that I have this capsule the capsule relationship these are logical",
    "start": "1206230",
    "end": "1211929"
  },
  {
    "text": "relationships I have uses in the interface and a polygon would typically use what point in its interface say to",
    "start": "1211929",
    "end": "1219520"
  },
  {
    "text": "add a vertex so we have this notation and it turns out that a point list and a",
    "start": "1219520",
    "end": "1224730"
  },
  {
    "text": "pointless link both of them will have the name point in the interface of one",
    "start": "1224730",
    "end": "1229980"
  },
  {
    "text": "of their functions by the way a function uses a type in its interface if it names it as part of its signature or part of",
    "start": "1229980",
    "end": "1236249"
  },
  {
    "text": "its return type and a class uses a type in its interface if it has a member",
    "start": "1236249",
    "end": "1241379"
  },
  {
    "text": "function that uses the type in its interface so that's what we're talking about here so polygon has a member",
    "start": "1241379",
    "end": "1247859"
  },
  {
    "text": "function add vertex and so polygon uses point and point list point list",
    "start": "1247859",
    "end": "1253679"
  },
  {
    "text": "obviously you can append a point to a list again this is a toy example we",
    "start": "1253679",
    "end": "1260190"
  },
  {
    "text": "wouldn't do this we didn't do it this way but and we're trying to teach the notation so this is useful now something",
    "start": "1260190",
    "end": "1265919"
  },
  {
    "text": "is not programmatically accessible but it's still used let's say it hasn't or",
    "start": "1265919",
    "end": "1271139"
  },
  {
    "text": "holds up something then we say it's used in the implementation we use a solid",
    "start": "1271139",
    "end": "1276149"
  },
  {
    "text": "like bubble so a polygon might have a pointless sitting as a data member that",
    "start": "1276149",
    "end": "1281340"
  },
  {
    "text": "you can't get hold up you can't see it you don't know it's there so the point list is an implementation detail of",
    "start": "1281340",
    "end": "1287249"
  },
  {
    "text": "polygons actually that's a little overstated the polygon the point list the use of the point list is an",
    "start": "1287249",
    "end": "1294029"
  },
  {
    "text": "implementation detail of polygons I might change it to a vector later but right now it's a point list and no one",
    "start": "1294029",
    "end": "1299489"
  },
  {
    "text": "knows programmatically just look at the code and see that so anyway it's used in the implementation pointless happened to",
    "start": "1299489",
    "end": "1307049"
  },
  {
    "text": "use pointless link in its implementation but that's not a big deal because it's in the same component so it has no",
    "start": "1307049",
    "end": "1312539"
  },
  {
    "text": "physical implications anyway and then we have this funny thing that that people have a lot of trouble understanding",
    "start": "1312539",
    "end": "1318059"
  },
  {
    "text": "which is uses the name only and it turns out that a shape uses point in name only",
    "start": "1318059",
    "end": "1323129"
  },
  {
    "text": "because nowhere in the shape component not in the CPP not in the age because it's abstract nowhere in that component",
    "start": "1323129",
    "end": "1329879"
  },
  {
    "text": "does it pound include point and still we can have the shape component so this is surprising to people but yes in fact",
    "start": "1329879",
    "end": "1336379"
  },
  {
    "text": "shape does not need to do that yes sir",
    "start": "1336379",
    "end": "1342139"
  },
  {
    "text": "depends on and know the but this is",
    "start": "1342160",
    "end": "1348620"
  },
  {
    "text": "an abstract type shape is abstract they know it's a pure abstract type it",
    "start": "1348620",
    "end": "1355880"
  },
  {
    "text": "doesn't have any members all it has is a non pure virtual destructor and every single function including get origin is",
    "start": "1355880",
    "end": "1362510"
  },
  {
    "text": "a pure virtual function and therefore it doesn't need to by the way let me be",
    "start": "1362510",
    "end": "1369080"
  },
  {
    "text": "clear it's not just an abstract I'm making certain assumptions for example I",
    "start": "1369080",
    "end": "1374210"
  },
  {
    "text": "would never design a protocol a hierarchy like this where the base thing is anything but a pure abstract",
    "start": "1374210",
    "end": "1381110"
  },
  {
    "text": "interface I call it a protocol but I just assume that people do create structural inheritance things and use",
    "start": "1381110",
    "end": "1390290"
  },
  {
    "text": "them in strange ways that I just hurts my head so I don't even think about them but yes you could design something",
    "start": "1390290",
    "end": "1396470"
  },
  {
    "text": "that's kind of broken and then certain things would be true but in this particular case where we have a pure",
    "start": "1396470",
    "end": "1401929"
  },
  {
    "text": "abstract interface where all we have is a destructor that's declared empty and out of line for reasons we can leave out",
    "start": "1401929",
    "end": "1408020"
  },
  {
    "text": "of this and every other function is a pure virtual function which will see life is good are we good no what's the",
    "start": "1408020",
    "end": "1417620"
  },
  {
    "text": "problem so suppose the pure abstract function",
    "start": "1417620",
    "end": "1425059"
  },
  {
    "text": "returns point by value do I need to include it",
    "start": "1425059",
    "end": "1430809"
  },
  {
    "text": "think about it we'll get there alright so anyway what I'm saying is there is no",
    "start": "1431590",
    "end": "1439190"
  },
  {
    "text": "physical implication it's only a collaborative one it'll turn out then",
    "start": "1439190",
    "end": "1445190"
  },
  {
    "text": "there's this thing called depends on depends on is totally different it's between modules it's not between types",
    "start": "1445190",
    "end": "1450679"
  },
  {
    "text": "so here the polygon module notice I'm cheating I'm we're using this slide calling it something else though",
    "start": "1450679",
    "end": "1456289"
  },
  {
    "text": "bait-and-switch polygons module depends on the shape module because inheritance",
    "start": "1456289",
    "end": "1463070"
  },
  {
    "text": "is a very strong logical relationship that has the implication of dependency polygon uses point in its interface and",
    "start": "1463070",
    "end": "1470479"
  },
  {
    "text": "that too has a very strong implication same with pointless for the same reason",
    "start": "1470479",
    "end": "1476359"
  },
  {
    "text": "and pointless link also and both of those are in the same direction they have the same implication and then",
    "start": "1476359",
    "end": "1481369"
  },
  {
    "text": "finally uses in the implementation has that implication these are called implied dependencies if something uses",
    "start": "1481369",
    "end": "1488450"
  },
  {
    "text": "something in the implementation subsidy you will need to include it what's",
    "start": "1488450",
    "end": "1493460"
  },
  {
    "text": "interesting is that's not true of shape and point so that's why we have this dotted line there is no implied",
    "start": "1493460",
    "end": "1498999"
  },
  {
    "text": "dependency and so when we use the dotted line we're saying there's a collaborative dependency but it's not a physical one all right level numbers if",
    "start": "1498999",
    "end": "1507619"
  },
  {
    "text": "you just look at this picture you know you can assign level numbers it should be fairly intuitive I'm gonna start us",
    "start": "1507619",
    "end": "1512779"
  },
  {
    "text": "out things that don't depend on anything else for at level one what level is shape at correct shape is at level one",
    "start": "1512779",
    "end": "1523039"
  },
  {
    "text": "what's in level two what's at level",
    "start": "1523039",
    "end": "1528559"
  },
  {
    "text": "three okay that's all you need to know that's level numbers moving right along",
    "start": "1528559",
    "end": "1534349"
  },
  {
    "text": "central physical design rules there are two does anybody know what the two module enforced design rules are and",
    "start": "1534349",
    "end": "1542589"
  },
  {
    "text": "there's a third but these are the two big ones big-ticket what do we not like",
    "start": "1542589",
    "end": "1547999"
  },
  {
    "text": "if you've ever read my book what is it I hate what kind of dependencies cyclic",
    "start": "1547999",
    "end": "1555409"
  },
  {
    "text": "dependency there are two one of them is no cyclic physical dependencies we don't do that because that hurts our head what's the",
    "start": "1555409",
    "end": "1562700"
  },
  {
    "text": "other one Chapter three and lejos 96 at the end no",
    "start": "1562700",
    "end": "1569140"
  },
  {
    "text": "long distance friendships so it's interesting there these these guys maybe",
    "start": "1569140",
    "end": "1574220"
  },
  {
    "text": "you've heard of him Dykstra and Parnas little did we know that Dykstra was really big on no cyclic physical",
    "start": "1574220",
    "end": "1580490"
  },
  {
    "text": "dependencies and partes was really big on no long-distance friendship and I didn't know that when I wrote the first",
    "start": "1580490",
    "end": "1585500"
  },
  {
    "text": "book until I did my PhD dissertation year afterwards and found out oh these guys knew that too awesome so these are",
    "start": "1585500",
    "end": "1593720"
  },
  {
    "text": "the two big rules so let's not do that then we like to have fine grain reusable",
    "start": "1593720",
    "end": "1602230"
  },
  {
    "text": "compulsory fine grain reusable modules so we'd like to put if we can to the",
    "start": "1602230",
    "end": "1608809"
  },
  {
    "text": "extent that we can one primary class and associated free operators in that module",
    "start": "1608809",
    "end": "1615669"
  },
  {
    "text": "also known as a component so there are four reasons to co-locate logical",
    "start": "1615669",
    "end": "1620840"
  },
  {
    "text": "content classes public classes we can have private classes there are reasons to do that but that's not important",
    "start": "1620840",
    "end": "1627380"
  },
  {
    "text": "that's an empty tail because they're private they're part of the module and modules thank goodness allow us to have",
    "start": "1627380",
    "end": "1634280"
  },
  {
    "text": "a private section so we don't need to irritate people by saying I have a convention this class has an underscore",
    "start": "1634280",
    "end": "1640070"
  },
  {
    "text": "which I forgot to mention the underscore means it's private but now in modules you could make it private you can make",
    "start": "1640070",
    "end": "1646220"
  },
  {
    "text": "it really private even though it's used in the implementation could still be private so that's a great thing but",
    "start": "1646220",
    "end": "1652760"
  },
  {
    "text": "there are four reasons to co-locate public classes in a module can anybody",
    "start": "1652760",
    "end": "1657770"
  },
  {
    "text": "think of what those four reasons might be any one of them why might you do it",
    "start": "1657770",
    "end": "1662960"
  },
  {
    "text": "there's a number one reason like family feud there's one reason that that's the number one answer what is it inheritance",
    "start": "1662960",
    "end": "1671809"
  },
  {
    "text": "actually that would be a reason not to do it right because I have a base class and now I want to have an open system",
    "start": "1671809",
    "end": "1678500"
  },
  {
    "text": "and I don't want to couple my derived class with my base class I want to be able to hand my base class to my client and then I want to be able to create new",
    "start": "1678500",
    "end": "1685190"
  },
  {
    "text": "drive classes so no not inheritance what if they refer to each other so if",
    "start": "1685190",
    "end": "1692200"
  },
  {
    "text": "they caused it would cause a cyclic dependency okay that is it that is reason number two but that's very rare",
    "start": "1692200",
    "end": "1698080"
  },
  {
    "text": "and in our methodology we would try not to let that happen even within a single component because it's hard to think",
    "start": "1698080",
    "end": "1704470"
  },
  {
    "text": "about we do it only if it's necessary for example recursive templates anybody",
    "start": "1704470",
    "end": "1710410"
  },
  {
    "text": "what's the number one reason okay so",
    "start": "1710410",
    "end": "1718600"
  },
  {
    "text": "okay well that would be a reason to what you do what was just said is we want to have a facade we'll would go and look at",
    "start": "1718600",
    "end": "1725620"
  },
  {
    "text": "something but that facade or wrapper is up here but I'm talking about the",
    "start": "1725620",
    "end": "1730919"
  },
  {
    "text": "subsystem that it controls so why would I put two classes in the same component",
    "start": "1730919",
    "end": "1736510"
  },
  {
    "text": "that's the question why would I do that all right here's a hint beause I had a",
    "start": "1736510",
    "end": "1743200"
  },
  {
    "text": "container in its iterator and I wouldn't nest them and their reasons for that leave that alone so I have I have the",
    "start": "1743200",
    "end": "1748960"
  },
  {
    "text": "iterator and the container why would I put them in the same component",
    "start": "1748960",
    "end": "1754590"
  },
  {
    "text": "it's not the one can't be used without the other that's not that that's not the reason okay the number one reason is",
    "start": "1757110",
    "end": "1763470"
  },
  {
    "text": "friendship if I need private access and in the case of iterators I need private access because the whole point is to",
    "start": "1763470",
    "end": "1768749"
  },
  {
    "text": "allow the open closed principle to be realized right iterators allow me to do",
    "start": "1768749",
    "end": "1773879"
  },
  {
    "text": "things I can write code using iterators I don't have to go in and add a method I can iterate over the elements the",
    "start": "1773879",
    "end": "1779789"
  },
  {
    "text": "iterators have private access if I change the implementation the iterator changes they're together they have private access so friendship is the",
    "start": "1779789",
    "end": "1786749"
  },
  {
    "text": "number one answer if there would be a cyclic dependency that's the second answer but that doesn't happen you",
    "start": "1786749",
    "end": "1791820"
  },
  {
    "text": "shouldn't be doing that unless it's provably necessary which is recursive templates there's no reason to",
    "start": "1791820",
    "end": "1798029"
  },
  {
    "text": "do that so don't do that the third reason which has gone away",
    "start": "1798029",
    "end": "1804119"
  },
  {
    "text": "mostly for C++ is what I'll call single solution so if I don't have very attic",
    "start": "1804119",
    "end": "1809249"
  },
  {
    "text": "templates or macros and I need to create a whole bunch of like things that",
    "start": "1809249",
    "end": "1814409"
  },
  {
    "text": "together solve a single problem but don't actually depend on each other they're collaborative that they look",
    "start": "1814409",
    "end": "1820619"
  },
  {
    "text": "like this then that's okay but don't get confused with this here's a situation",
    "start": "1820619",
    "end": "1826529"
  },
  {
    "text": "where I have for example a point and then I have a coordinate or a coordinate",
    "start": "1826529",
    "end": "1832830"
  },
  {
    "text": "and then I have a point and then I have a box and then I have a box collection",
    "start": "1832830",
    "end": "1838590"
  },
  {
    "text": "and then I have a garage and you can see that at each level going up I have more more things going on that's not a reason",
    "start": "1838590",
    "end": "1847440"
  },
  {
    "text": "to put something in the same component you might argue well how can I use a box",
    "start": "1847440",
    "end": "1853440"
  },
  {
    "text": "collection without a box that's silly of course I'm going to put the box in the same component as the Box collection or",
    "start": "1853440",
    "end": "1859440"
  },
  {
    "text": "say module and the answer is no that's not silly because I may be able to use a box and not need a collection of them",
    "start": "1859440",
    "end": "1866580"
  },
  {
    "text": "certainly I don't need a garage certainly not so I'm gonna put all of them in the set in different components",
    "start": "1866580",
    "end": "1872989"
  },
  {
    "text": "that's a bad idea this is a good idea and now I can use the coordinate the",
    "start": "1872989",
    "end": "1878070"
  },
  {
    "text": "point the coordinate point and box the coordinate point box and box collection independently of the garage and that's",
    "start": "1878070",
    "end": "1884460"
  },
  {
    "text": "fine grain hierarchical reuse and that's good this is fine do you see the",
    "start": "1884460",
    "end": "1889649"
  },
  {
    "text": "distinction so I have a bunch of templates together that solve a problem a problem they",
    "start": "1889649",
    "end": "1895830"
  },
  {
    "text": "don't depend on each other one component single solution I have a bunch of things that depend on each other as I go up the",
    "start": "1895830",
    "end": "1901980"
  },
  {
    "text": "line different components and I don't care now there is an exception and that exception",
    "start": "1901980",
    "end": "1908190"
  },
  {
    "text": "is called flee on an elephant so if you are a flee and an example of a flee",
    "start": "1908190",
    "end": "1914730"
  },
  {
    "text": "would be a tiny little class or a tiny little operator like operator double",
    "start": "1914730",
    "end": "1920279"
  },
  {
    "text": "equals that doesn't need private access it's just a little thing I could put it in a separate component but anybody",
    "start": "1920279",
    "end": "1927059"
  },
  {
    "text": "using this thing would need it and in fact the usage example for the module would want it instead of having to",
    "start": "1927059",
    "end": "1934139"
  },
  {
    "text": "synthesize one and say you know posit a in a guard that initializes this logger",
    "start": "1934139",
    "end": "1942629"
  },
  {
    "text": "know here it is it's a little piece of sugar that's fine then we're not talking about nonsense what we're talking about",
    "start": "1942629",
    "end": "1948509"
  },
  {
    "text": "is the other way around where I have a point and I have a graphical engine the",
    "start": "1948509",
    "end": "1953909"
  },
  {
    "text": "point is of the flee and the graphical engine is oh my goodness and to put them in the same component is nuts now the",
    "start": "1953909",
    "end": "1960809"
  },
  {
    "text": "idea here is don't do that and don't have a slippery slope where you say well",
    "start": "1960809",
    "end": "1967249"
  },
  {
    "text": "well no it really has to be a flee in an elephant and it can't be anything else",
    "start": "1967249",
    "end": "1973980"
  },
  {
    "text": "can't be a goat in a pig or a dog and a cat no has to be a flee honest-to-goodness flea and an elephant",
    "start": "1973980",
    "end": "1979529"
  },
  {
    "text": "alright now we're going to talk about another aspect of physical design that",
    "start": "1979529",
    "end": "1984720"
  },
  {
    "text": "you may or may not care about encapsulation versus insulation does",
    "start": "1984720",
    "end": "1990239"
  },
  {
    "text": "anybody want to venture a guess at what those things mean or why they're different or how what is encapsulation",
    "start": "1990239",
    "end": "2002149"
  },
  {
    "text": "what do I mean when I say something is encapsulated what does it mean what",
    "start": "2002149",
    "end": "2010350"
  },
  {
    "text": "class or namespace what is it if I say",
    "start": "2010350",
    "end": "2015730"
  },
  {
    "text": "if I say you're encapsulated what are you are you a class or a namespace",
    "start": "2015730",
    "end": "2021120"
  },
  {
    "text": "something's in there okay so what does it mean to encapsulate something what does that achieve yes contain good",
    "start": "2023220",
    "end": "2032640"
  },
  {
    "text": "isolate I like that what okay so hide so here contain and",
    "start": "2032640",
    "end": "2038799"
  },
  {
    "text": "hide originally encapsulate just meant contain so if I encapsulate the methods",
    "start": "2038799",
    "end": "2046600"
  },
  {
    "text": "of a class within an object I didn't say anything about hiding its data but it",
    "start": "2046600",
    "end": "2053830"
  },
  {
    "text": "came to mean that so encapsulation tends to include hiding private data",
    "start": "2053830",
    "end": "2060480"
  },
  {
    "text": "that's what encapsulation means but what do we mean by hide hide it how would how",
    "start": "2060480",
    "end": "2066908"
  },
  {
    "text": "am i hiding it can the clients compiler see my stuff if I have a point and it",
    "start": "2066909",
    "end": "2072760"
  },
  {
    "text": "has index in why can the kind of clients compilers see my private data absolutely",
    "start": "2072760",
    "end": "2081040"
  },
  {
    "text": "because the client can use my point class to build a box and in order for the clients compiler to make sense of it",
    "start": "2081040",
    "end": "2087929"
  },
  {
    "text": "it needs to know how big it is right so that's necessary stuff okay so that's",
    "start": "2087929",
    "end": "2094030"
  },
  {
    "text": "encapsulation but then there's insulation what's insulation how is that different from encapsulation the",
    "start": "2094030",
    "end": "2105400"
  },
  {
    "text": "compiler doesn't see it okay so let's look at some definitions and",
    "start": "2105400",
    "end": "2110440"
  },
  {
    "text": "implementation detail of a component type data or function that can be altered added or removed without forcing",
    "start": "2110440",
    "end": "2115990"
  },
  {
    "text": "clients to rework their code is said to be encapsulated compare that with an",
    "start": "2115990",
    "end": "2122410"
  },
  {
    "text": "implementation detail of a component type data function that can be altered to added or removed without forcing clients to recompile is said to be",
    "start": "2122410",
    "end": "2130420"
  },
  {
    "text": "insulated all right now I'm going to ask the hard question for the people who really know their stuff you ready how",
    "start": "2130420",
    "end": "2138609"
  },
  {
    "text": "many people think modules will help us",
    "start": "2138609",
    "end": "2143940"
  },
  {
    "text": "with insulating our implementation details yes you do think so",
    "start": "2143940",
    "end": "2151539"
  },
  {
    "text": "can you please inform me how that will happen because I have no idea will it do",
    "start": "2151539",
    "end": "2156700"
  },
  {
    "text": "one blessed thing to help you with insulation so this gentleman I need to",
    "start": "2156700",
    "end": "2170109"
  },
  {
    "text": "buy you a drink because the point of modules is to solve all problems",
    "start": "2170109",
    "end": "2175559"
  },
  {
    "text": "including world hunger you don't need to test them they insulate everything so",
    "start": "2175559",
    "end": "2181749"
  },
  {
    "text": "they cause no problems whatsoever and all of the code that you write is perfect okay so it turns out the modules",
    "start": "2181749",
    "end": "2189069"
  },
  {
    "text": "aren't quite that good yet and in fact do absolutely nothing for insulation",
    "start": "2189069",
    "end": "2194589"
  },
  {
    "text": "purposes just to be clear we'll talk about that more anyway let me explain",
    "start": "2194589",
    "end": "2200440"
  },
  {
    "text": "what I mean by insulation I have some components here ABC DNA okay so now let's say that a is",
    "start": "2200440",
    "end": "2207519"
  },
  {
    "text": "the client okay let's say that C is a",
    "start": "2207519",
    "end": "2213099"
  },
  {
    "text": "library component let's say that D is an implementation detail if I make a change",
    "start": "2213099",
    "end": "2219910"
  },
  {
    "text": "to the header of D or if I make a change",
    "start": "2219910",
    "end": "2225069"
  },
  {
    "text": "to the public part the interface of the module if you prefer the thing that gets",
    "start": "2225069",
    "end": "2233619"
  },
  {
    "text": "imported if I make a change to that what happens well it turns out that that",
    "start": "2233619",
    "end": "2241359"
  },
  {
    "text": "include imports to here which imports to here and this guy will have to recompile",
    "start": "2241359",
    "end": "2250109"
  },
  {
    "text": "in other words if the public part of the thing that I'm doing the thing that I'm",
    "start": "2251190",
    "end": "2256329"
  },
  {
    "text": "exporting which is what header files do if that if that is propagated to the",
    "start": "2256329",
    "end": "2261910"
  },
  {
    "text": "client if that's necessary for the client to do its job and you change it then the clients gonna have to recompile",
    "start": "2261910",
    "end": "2268539"
  },
  {
    "text": "that's just the way life is okay so hold on that's interesting it's",
    "start": "2268539",
    "end": "2280060"
  },
  {
    "text": "not an implementation detail if you change it to do something else but you",
    "start": "2280060",
    "end": "2290770"
  },
  {
    "text": "can you can differ well it's included in the header but that is the body of an inline function an implementation detail or not so my",
    "start": "2290770",
    "end": "2301690"
  },
  {
    "text": "definition of implementation detail is that it's not programmatically accessible and if I change it and I",
    "start": "2301690",
    "end": "2307510"
  },
  {
    "text": "don't change the contract life should be good if I change the contract if I",
    "start": "2307510",
    "end": "2314380"
  },
  {
    "text": "change the behavior um it's over if I change the signature might be over right",
    "start": "2314380",
    "end": "2322240"
  },
  {
    "text": "but if I don't change the contract or the signature and so it does the same thing then I call it an empty tail even",
    "start": "2322240",
    "end": "2330850"
  },
  {
    "text": "if the client has to recompile yeah okay all right so D is encapsulated by by C",
    "start": "2330850",
    "end": "2339790"
  },
  {
    "text": "now this is a short shorthand that's not really true anybody can use D right under it anybody can use D but they",
    "start": "2339790",
    "end": "2347890"
  },
  {
    "text": "can't know that the client they can't know that C is using D necessarily so the use of D did I get",
    "start": "2347890",
    "end": "2355990"
  },
  {
    "text": "that right the use of D is encapsulated by C D is still available to be reused",
    "start": "2355990",
    "end": "2361800"
  },
  {
    "text": "hierarchically you use it somewhere else but the fact that I changed it yeah okay",
    "start": "2361800",
    "end": "2367440"
  },
  {
    "text": "now I've got this thing this empty tail e now he's a little different it's used",
    "start": "2367440",
    "end": "2372700"
  },
  {
    "text": "from the dot CPP file or the module implementation part here if I change",
    "start": "2372700",
    "end": "2379030"
  },
  {
    "text": "this yes she has to recompile but the part that's exported to a doesn't change",
    "start": "2379030",
    "end": "2387250"
  },
  {
    "text": "so the use of e is in fact insulated now if I take e throw it out and write",
    "start": "2387250",
    "end": "2394510"
  },
  {
    "text": "something completely different he is still available for reuse elsewhere that's great and none of my",
    "start": "2394510",
    "end": "2401680"
  },
  {
    "text": "clients have to do anything but relink okay good so criteria for having to pound",
    "start": "2401680",
    "end": "2410050"
  },
  {
    "text": "include in a dot H Nico I'm going to address your question now just so you know a header file must be self",
    "start": "2410050",
    "end": "2417430"
  },
  {
    "text": "sufficient with respect to compilation there are five major reasons for",
    "start": "2417430",
    "end": "2423390"
  },
  {
    "text": "including a header in a header is ax is the first one that's the strongest one",
    "start": "2423390",
    "end": "2430330"
  },
  {
    "text": "if I if I is a that you don't even need",
    "start": "2430330",
    "end": "2435369"
  },
  {
    "text": "to pound include that directly just know that because I am that I'm inherently that that must come along for the ride",
    "start": "2435369",
    "end": "2442359"
  },
  {
    "text": "so the one place where you don't have to include what you use if you use a",
    "start": "2442359",
    "end": "2448060"
  },
  {
    "text": "derived class you don't need to separately include its base class but nothing else is strong enough so just",
    "start": "2448060",
    "end": "2454690"
  },
  {
    "text": "using something else even in the interface you still want to include it",
    "start": "2454690",
    "end": "2460180"
  },
  {
    "text": "the rule is if you include it if you use it included don't rely on something else",
    "start": "2460180",
    "end": "2465280"
  },
  {
    "text": "to include it now something else uses something in the implementation and you rely on that you could get hosed right",
    "start": "2465280",
    "end": "2472990"
  },
  {
    "text": "because they change their implementation they take it out you were counting on that header file that's called a",
    "start": "2472990",
    "end": "2478090"
  },
  {
    "text": "transitive include guess what modules fix that modules if you've got something",
    "start": "2478090",
    "end": "2484000"
  },
  {
    "text": "that's that's that your object uses in its implementation the client compiler",
    "start": "2484000",
    "end": "2490720"
  },
  {
    "text": "can still know about it without allowing clients to be able to create new ones of it",
    "start": "2490720",
    "end": "2495880"
  },
  {
    "text": "so modules got that part right that's really great the transitive includes of headers is solved so is it is one has ax",
    "start": "2495880",
    "end": "2503850"
  },
  {
    "text": "has it means I've got an object embedded in my thing that's a strong relationship",
    "start": "2503850",
    "end": "2509550"
  },
  {
    "text": "what's another one that I would have to pound include I'm waiting somebody's",
    "start": "2509550",
    "end": "2518560"
  },
  {
    "text": "going to say it there you go not users okay we'll get to that let's",
    "start": "2518560",
    "end": "2525580"
  },
  {
    "text": "leap but users alone is not enough so for example point append right to see",
    "start": "2525580",
    "end": "2532180"
  },
  {
    "text": "this example here I'm using point by reference well that I certainly don't",
    "start": "2532180",
    "end": "2537400"
  },
  {
    "text": "need to write B I can just say class point and I'm good in the header file but here's the part",
    "start": "2537400",
    "end": "2544150"
  },
  {
    "text": "that you might not realize see how it returns point by value turns out that I",
    "start": "2544150",
    "end": "2550720"
  },
  {
    "text": "don't need to pound included even there unless the client needs to know the",
    "start": "2550720",
    "end": "2556359"
  },
  {
    "text": "definition of point I can simply say class point a lot of people don't know this but it is in fact true so this is I",
    "start": "2556359",
    "end": "2563770"
  },
  {
    "text": "think in response to Nico's question only if the client needs it or as was",
    "start": "2563770",
    "end": "2571030"
  },
  {
    "text": "pointed out in line functions if the if it's used in the body of an inline function absolutely and by inline",
    "start": "2571030",
    "end": "2580720"
  },
  {
    "text": "function you know you get the idea and then any enumerations enumerations in",
    "start": "2580720",
    "end": "2586480"
  },
  {
    "text": "c++ so three you have to do this now yes in C++ eleven there are ways to forward",
    "start": "2586480",
    "end": "2592329"
  },
  {
    "text": "declare them they are absolutely evil absolutely as bad as for declaring an",
    "start": "2592329",
    "end": "2598869"
  },
  {
    "text": "int do not do that I could explain why but I'll spare you and the fifth one is",
    "start": "2598869",
    "end": "2604180"
  },
  {
    "text": "if you might have like STD string that's not really an STD string you can't really forward declare that you really",
    "start": "2604180",
    "end": "2611230"
  },
  {
    "text": "have to pound include at least the forward yes okay so long time ago in a",
    "start": "2611230",
    "end": "2619390"
  },
  {
    "text": "place far far away nested classes didn't work finally people beat on them enough that you can actually make nested",
    "start": "2619390",
    "end": "2625270"
  },
  {
    "text": "classes kind of sort of work but to save you any further discussion we do not use nested classes what we use instead are",
    "start": "2625270",
    "end": "2632020"
  },
  {
    "text": "classes that are private to the component so that you don't get that problem of some sort of weird you know",
    "start": "2632020",
    "end": "2640480"
  },
  {
    "text": "friendship cycle it's all backwards and goofy and I don't understand it except",
    "start": "2640480",
    "end": "2645520"
  },
  {
    "text": "well enough to write about it once to say don't do it and then I forgot about it because no one needs that what they",
    "start": "2645520",
    "end": "2650650"
  },
  {
    "text": "need is to create whatever you need here get that get your head around that then",
    "start": "2650650",
    "end": "2656020"
  },
  {
    "text": "have this thing depend on that inside the same module and make that private now that we have modules we don't need",
    "start": "2656020",
    "end": "2661599"
  },
  {
    "text": "to have this telescoping down into this micro thing by the way have you ever seen something that has public and",
    "start": "2661599",
    "end": "2667450"
  },
  {
    "text": "private layered in it this is public private public private like like but nested it's unreadable don't don't",
    "start": "2667450",
    "end": "2676050"
  },
  {
    "text": "even if you have a if you have a struct that has two things in it and no methods",
    "start": "2676050",
    "end": "2681390"
  },
  {
    "text": "maybe maybe nested that's the limit okay so there are other things like Kovarian",
    "start": "2681390",
    "end": "2687510"
  },
  {
    "text": "return types and edge cases but don't worry about these are the five reasons so are there any questions on this yes",
    "start": "2687510",
    "end": "2698000"
  },
  {
    "text": "is there any - we'll help we have something called BD verify that we've been working on forever spits clang",
    "start": "2698000",
    "end": "2705240"
  },
  {
    "text": "based and what it does is it basically looks at what you have and just as no no",
    "start": "2705240",
    "end": "2710940"
  },
  {
    "text": "no no no no no no and it does a lot of",
    "start": "2710940",
    "end": "2715980"
  },
  {
    "text": "good stuff to it rewrites it so that it can be yes yes yes yes yes so we have",
    "start": "2715980",
    "end": "2721050"
  },
  {
    "text": "actually that - this has many many many years in development by a really senior developer who really likes to write",
    "start": "2721050",
    "end": "2728070"
  },
  {
    "text": "these kinds of things I mean that's his job is to write these crazy analysis and refactoring things you know it's like",
    "start": "2728070",
    "end": "2734640"
  },
  {
    "text": "Google does it Bloomberg does it it's and it's awesome and it's it's part of our development process because why",
    "start": "2734640",
    "end": "2742020"
  },
  {
    "text": "would you make somebody review your code if it doesn't compile so why would you make them review your code if it's wrong",
    "start": "2742020",
    "end": "2748400"
  },
  {
    "text": "and we don't yes there's tool support so here's some questions you might want to",
    "start": "2748400",
    "end": "2753630"
  },
  {
    "text": "ask we have only like 13 minutes left and I have another part so I'm going to try to go a little bit quickly by the",
    "start": "2753630",
    "end": "2758640"
  },
  {
    "text": "way I might go over by five minutes and just saying I hope I don't go over by more than that but if anybody needs to",
    "start": "2758640",
    "end": "2764340"
  },
  {
    "text": "leave and get a break I'll try not to go over too much any other questions how do",
    "start": "2764340",
    "end": "2771510"
  },
  {
    "text": "we extract opponents component dependencies efficiently what is the rule what is the thing that allows us to do that so if we use something where a",
    "start": "2771510",
    "end": "2781650"
  },
  {
    "text": "dependency is needed or there's an actual dependency we don't forward declare it we pound included then we can",
    "start": "2781650",
    "end": "2788250"
  },
  {
    "text": "look at the envelope of includes or imports and instantly without clang and",
    "start": "2788250",
    "end": "2793890"
  },
  {
    "text": "we've been doing this for 30 years instantly know what the dependency graph is",
    "start": "2793890",
    "end": "2799850"
  },
  {
    "text": "when would I put an include directive in a header file what are the reasons izi",
    "start": "2800630",
    "end": "2806670"
  },
  {
    "text": "has a inline enum and typed if the template and you're not supposed to",
    "start": "2806670",
    "end": "2813630"
  },
  {
    "text": "forward declare standard stuff anyway huh what benefit is generally associated",
    "start": "2813630",
    "end": "2821579"
  },
  {
    "text": "with insulation why do I like insulation and why am I really sad that modules",
    "start": "2821579",
    "end": "2826799"
  },
  {
    "text": "will give us none of it do I want modules to give us insulation would that be nice the answer is no I don't want",
    "start": "2826799",
    "end": "2834210"
  },
  {
    "text": "modules to give us insulation because insulation implies slowness it means",
    "start": "2834210",
    "end": "2839369"
  },
  {
    "text": "that I'm putting overhead to separate myself from something else which means an extra level of indirection memory",
    "start": "2839369",
    "end": "2845309"
  },
  {
    "text": "allocation all kinds of stuff I don't want modules give you none of that",
    "start": "2845309",
    "end": "2850859"
  },
  {
    "text": "so modules provide no performance cost that's good but if you have that then",
    "start": "2850859",
    "end": "2857190"
  },
  {
    "text": "you don't have insulation that's the way life is you can't have it all there's no",
    "start": "2857190",
    "end": "2866490"
  },
  {
    "text": "runtime performance cost because a module to be determined right do you",
    "start": "2866490",
    "end": "2873119"
  },
  {
    "text": "agree what is your comment does does the do modules help or hurt compile time we",
    "start": "2873119",
    "end": "2881579"
  },
  {
    "text": "will find out Nikko has said because spoken all right ah so we have to get to",
    "start": "2881579",
    "end": "2887490"
  },
  {
    "text": "the second part I'm just going to quickly summarize my paper that I'm what I'm hoping for because modules are what",
    "start": "2887490",
    "end": "2893940"
  },
  {
    "text": "they are as a result to some extent of pushes in this direction so this is the",
    "start": "2893940",
    "end": "2899520"
  },
  {
    "text": "paper I'm putting the paper up here and the blue stuff is what I'm going to talk",
    "start": "2899520",
    "end": "2904559"
  },
  {
    "text": "about it's a critically needed language feature but we're really looking for I'm",
    "start": "2904559",
    "end": "2910349"
  },
  {
    "text": "looking for something architectural it was originally motivated for performance the performance will come but we need to",
    "start": "2910349",
    "end": "2917940"
  },
  {
    "text": "get the architecture right that's basically what this is saying the",
    "start": "2917940",
    "end": "2923400"
  },
  {
    "text": "purpose of this paper is to focus on what features we need to have modules",
    "start": "2923400",
    "end": "2928579"
  },
  {
    "text": "provide you just saw components those slides if modules are now",
    "start": "2928579",
    "end": "2933750"
  },
  {
    "text": "an absolute plug-in substitute for what I just talked about I will not use them fortunately I think they are okay so",
    "start": "2933750",
    "end": "2946010"
  },
  {
    "text": "tooling is an issue that's my biggest concern but this talk is not not about",
    "start": "2946010",
    "end": "2951270"
  },
  {
    "text": "what I'm concerned about premature optimization is is definitely something",
    "start": "2951270",
    "end": "2956880"
  },
  {
    "text": "I was concerned about and I think what we've got now is we've got the architecture right enough not complete",
    "start": "2956880",
    "end": "2963360"
  },
  {
    "text": "but right enough that it's going to give us those things that we need so some of the properties that we want are we want",
    "start": "2963360",
    "end": "2970020"
  },
  {
    "text": "to make the introduction of modules possible so it simply be con a couple of",
    "start": "2970020",
    "end": "2975870"
  },
  {
    "text": "years ago after someone explained what modules are I said hi my name is John Lagos I'm from Bloomberg I want to use",
    "start": "2975870",
    "end": "2982410"
  },
  {
    "text": "modules could you tell me what is the migration path for modules you can go",
    "start": "2982410",
    "end": "2988350"
  },
  {
    "text": "look at this on youtubes right after the talk and yeah he said well wait wait let me just ask you is it possible you for",
    "start": "2988350",
    "end": "2994800"
  },
  {
    "text": "you to change all of your code and all of your clients code to modules at one time I had no words I said I wish there",
    "start": "2994800",
    "end": "3004550"
  },
  {
    "text": "were a stronger word for this but no and and he said well then you're over constrained I was speechless and I still",
    "start": "3004550",
    "end": "3012890"
  },
  {
    "text": "in I have no I don't know what to tell you anyway we need to make sure that people can adopt modules in an additive",
    "start": "3012890",
    "end": "3018350"
  },
  {
    "text": "way in an incremental way in a hierarchical way and in an interoperable",
    "start": "3018350",
    "end": "3023930"
  },
  {
    "text": "way so what do I mean by that so if some group if my company wants to start using modules let them as long as nobody is",
    "start": "3023930",
    "end": "3032060"
  },
  {
    "text": "depending on them who doesn't have access to a C++ 20 compiler life is good right they do what they want we don't",
    "start": "3032060",
    "end": "3037880"
  },
  {
    "text": "care but as an infrastructure group if I start using modules then I sound sorry",
    "start": "3037880",
    "end": "3043610"
  },
  {
    "text": "we just took away all your header files I mean being fired would be the least of my worries you know I mean that's not",
    "start": "3043610",
    "end": "3049550"
  },
  {
    "text": "going to happen so the next thing is if some group is using modules and some other group is still using header files",
    "start": "3049550",
    "end": "3055220"
  },
  {
    "text": "and now some new group comes along that is module aware are these guys",
    "start": "3055220",
    "end": "3060560"
  },
  {
    "text": "interoperable can I use both in the same program well that it better be true right if I add a module",
    "start": "3060560",
    "end": "3067550"
  },
  {
    "text": "or if I do something here it better not affect the code down here this code better do the same stuff you could",
    "start": "3067550",
    "end": "3072770"
  },
  {
    "text": "imagine some weird world in which this thing stuffed something down here that changes this behavior well that can't",
    "start": "3072770",
    "end": "3078860"
  },
  {
    "text": "happen so everything that was is everything that's added is additive it can be done in in independent places and",
    "start": "3078860",
    "end": "3085610"
  },
  {
    "text": "then finally and this is the critical part if I have a date class down here",
    "start": "3085610",
    "end": "3090740"
  },
  {
    "text": "and I have a module that exports that date class and I have a header file that",
    "start": "3090740",
    "end": "3096470"
  },
  {
    "text": "exports that date class and that I have a client that consumes that date class it had better be the same date class and",
    "start": "3096470",
    "end": "3105050"
  },
  {
    "text": "it better might be an OD or violation that better be true right otherwise guess what okay",
    "start": "3105050",
    "end": "3111350"
  },
  {
    "text": "that doesn't seem like too much to ask so I asked it and I believe it was satisfied there was somebody in my",
    "start": "3111350",
    "end": "3117410"
  },
  {
    "text": "company where I basically said here's the paper here's the world make the world look like this paper good thank",
    "start": "3117410",
    "end": "3123080"
  },
  {
    "text": "you go and he did I mean he did his job it's good kid not a big task anyway so",
    "start": "3123080",
    "end": "3129860"
  },
  {
    "text": "logical versus physical encapsulation that's one of the things that modules do really well logic logical encapsulation",
    "start": "3129860",
    "end": "3137510"
  },
  {
    "text": "whereas we're header files we were able to simulate what we want we had to be",
    "start": "3137510",
    "end": "3143030"
  },
  {
    "text": "very careful and write tools and whatever modules actually satisfy that by not allowing access to things that",
    "start": "3143030",
    "end": "3150440"
  },
  {
    "text": "are not explicitly exported so if I have a box and a point and my point class is",
    "start": "3150440",
    "end": "3155720"
  },
  {
    "text": "an empty tail of my box my box has two points and I ship that out to clients",
    "start": "3155720",
    "end": "3162130"
  },
  {
    "text": "clients are free to use my box and they can go ahead and make a box collection and they can go ahead and make a garage",
    "start": "3162130",
    "end": "3167600"
  },
  {
    "text": "and do all that good stuff and if later I come in and I take point out of the box and put in four ends none of my",
    "start": "3167600",
    "end": "3176150"
  },
  {
    "text": "clients will have to rework their code because they never had access to a point to begin with that's fine they will have",
    "start": "3176150",
    "end": "3183440"
  },
  {
    "text": "to recompile them is that clear they won't have to rework their code do two transitive imports but they will have to",
    "start": "3183440",
    "end": "3191500"
  },
  {
    "text": "recompile so that's one of the things that we wanted to have here's something",
    "start": "3191500",
    "end": "3197600"
  },
  {
    "text": "that I want to have this is a particular clause in the thing that we don't have I would like when I have this",
    "start": "3197600",
    "end": "3203960"
  },
  {
    "text": "client over here using modules and this client over here using modules I wanted to provide different views on my sub",
    "start": "3203960",
    "end": "3211670"
  },
  {
    "text": "system so here's my sub system it has lots of classes in the data and here is a module that provides a facade with a",
    "start": "3211670",
    "end": "3220700"
  },
  {
    "text": "subset in the in the inverse Liskov sense a subset of the functionality that",
    "start": "3220700",
    "end": "3228560"
  },
  {
    "text": "this stuff has so it's a view on what you can do here so imagine you have a",
    "start": "3228560",
    "end": "3234260"
  },
  {
    "text": "stack class and this view gives you push and this view gives you pop imagine a",
    "start": "3234260",
    "end": "3242510"
  },
  {
    "text": "client up here that includes both definitions both views of stack they get",
    "start": "3242510",
    "end": "3248630"
  },
  {
    "text": "united into the union of capabilities so what this is like doing in some sense",
    "start": "3248630",
    "end": "3254000"
  },
  {
    "text": "this is like hiding header files on a per function basis to give you a view of",
    "start": "3254000",
    "end": "3260840"
  },
  {
    "text": "a subsystem but the reason we want this is to try to do this in code by creating",
    "start": "3260840",
    "end": "3266960"
  },
  {
    "text": "a wrapper or whatever it has two problems one it's extremely costly in time consuming and clunky and two the",
    "start": "3266960",
    "end": "3274730"
  },
  {
    "text": "vocabulary if I try to wrap a date with my date I have the multi component",
    "start": "3274730",
    "end": "3281480"
  },
  {
    "text": "wrapper problem where now I want to take this date and put it in that thing but I've got two things here so I have to",
    "start": "3281480",
    "end": "3287030"
  },
  {
    "text": "look inside and that's long-distance friendship and that's no good what we can get away with here is if we provide",
    "start": "3287030",
    "end": "3292970"
  },
  {
    "text": "a view on something the thing that you have is a handle - it's actually a handle - that thing much in the same way",
    "start": "3292970",
    "end": "3300589"
  },
  {
    "text": "that a procedural interface which has also talked about in the paper which is Clause D a procedural interface when you",
    "start": "3300589",
    "end": "3307099"
  },
  {
    "text": "get back an opaque pointer in C to a C++ object it really is that object and if",
    "start": "3307099",
    "end": "3312770"
  },
  {
    "text": "somebody were to toss you the header file and change your compiler to C++ that pointer that you got back you could",
    "start": "3312770",
    "end": "3318619"
  },
  {
    "text": "just use it in C++ we want those same properties to hold at the not at the",
    "start": "3318619",
    "end": "3325520"
  },
  {
    "text": "installation level but in the encapsulation level for modules so that's a goal so that's what Part D is",
    "start": "3325520",
    "end": "3331730"
  },
  {
    "text": "here now if you go read this paper it's literally three pages in ASCII it's I mean I typed it in",
    "start": "3331730",
    "end": "3336880"
  },
  {
    "text": "one evening it's just off the top of my head but it's kind of a good paper because it kind of set the tone so given",
    "start": "3336880",
    "end": "3343450"
  },
  {
    "text": "that we have only a few minutes left I'm going to just quickly run through this here I have a basic system written in",
    "start": "3343450",
    "end": "3350140"
  },
  {
    "text": "header files this is my library system and I have a client some system has header files and then I have a module",
    "start": "3350140",
    "end": "3355390"
  },
  {
    "text": "system that's that little diagram at the bottom and now I add a new module system that depends on the old one and now",
    "start": "3355390",
    "end": "3361600"
  },
  {
    "text": "let's say I have a client that uses both the new module system and the old header system this has to work that's what I'm",
    "start": "3361600",
    "end": "3368320"
  },
  {
    "text": "saying then the next requirement this is the thing I was talking about this is the",
    "start": "3368320",
    "end": "3383770"
  },
  {
    "text": "part where they have to be the same type so again the procedural interface",
    "start": "3383770",
    "end": "3389740"
  },
  {
    "text": "concept Google was doing something about a year ago I admit I haven't kept up",
    "start": "3389740",
    "end": "3396400"
  },
  {
    "text": "with what they're doing so anything that I would say here is out of date so I'm going to skip that once we've addressed",
    "start": "3396400",
    "end": "3402280"
  },
  {
    "text": "all three of these important issues all",
    "start": "3402280",
    "end": "3407440"
  },
  {
    "text": "of the other requirements then we can focus on performance and I think performance is very important but it's",
    "start": "3407440",
    "end": "3413200"
  },
  {
    "text": "something that comes after it's like the big rocks get the big rocks right and then the little rocks and then the sand",
    "start": "3413200",
    "end": "3418960"
  },
  {
    "text": "and then the water I would say the performance is more in the sand and water area not in the big rock and little rock area so there are many",
    "start": "3418960",
    "end": "3427960"
  },
  {
    "text": "different reasons for dealing with for having modules they're competing ideas and whatever but they have to solve",
    "start": "3427960",
    "end": "3435070"
  },
  {
    "text": "certain business requirements or they're not going to be useful particularly large legacy code bases exist and so I'm",
    "start": "3435070",
    "end": "3442690"
  },
  {
    "text": "putting up this chart just basically for people to to look at and here are the four requirements that I had and we want",
    "start": "3442690",
    "end": "3451750"
  },
  {
    "text": "to fix the transitive include problem that's a big deal we want to make sure that in modules we have the ability when",
    "start": "3451750",
    "end": "3458860"
  },
  {
    "text": "we set a contract assertion level that it comes with the module so that it's",
    "start": "3458860",
    "end": "3463870"
  },
  {
    "text": "not it's not that the entire program has to be set at one contract assertion level this module",
    "start": "3463870",
    "end": "3469249"
  },
  {
    "text": "could be set higher or lower and ultimately contracts are still under investigation because we want to make",
    "start": "3469249",
    "end": "3474890"
  },
  {
    "text": "sure we give them proper granularity and now that modules are out we can look at the contracts in terms of what modules",
    "start": "3474890",
    "end": "3481039"
  },
  {
    "text": "might afford so that's also a slight benefit I want to be as I said in the",
    "start": "3481039",
    "end": "3486829"
  },
  {
    "text": "future not for C++ 20 but for C++ 23 or 26 I'd like modules to be able to provide",
    "start": "3486829",
    "end": "3492049"
  },
  {
    "text": "fine-grained views so that we don't have to do these crazy sort of perturbations of things and then we get the union of",
    "start": "3492049",
    "end": "3499069"
  },
  {
    "text": "the capability so again just a quick picture I start out with what I have today which is libraries and clients and",
    "start": "3499069",
    "end": "3504589"
  },
  {
    "text": "enter files that I add some modules I had some more modules I had a client that uses modules he he or she wants to",
    "start": "3504589",
    "end": "3511549"
  },
  {
    "text": "use this this header file that's no problem or originally I want to use the base directly that's fine then I get",
    "start": "3511549",
    "end": "3518359"
  },
  {
    "text": "this other client that wants to use is modules then this guy can point to that guy instead you know that's a",
    "start": "3518359",
    "end": "3524209"
  },
  {
    "text": "replacement or not it doesn't matter then client two could come along and use the module one and all of this stuff has",
    "start": "3524209",
    "end": "3529880"
  },
  {
    "text": "to work together and it has to be able to be built up over time seamlessly right it can't be oh my goodness let's",
    "start": "3529880",
    "end": "3536809"
  },
  {
    "text": "recompile the world because that's not a real thing and then maybe eventually this client comes back over alright",
    "start": "3536809",
    "end": "3543079"
  },
  {
    "text": "anyway that's pretty much yeah we don't",
    "start": "3543079",
    "end": "3548169"
  },
  {
    "text": "this is just a repetition of what I said before so I'll just put that up and we",
    "start": "3548169",
    "end": "3553609"
  },
  {
    "text": "are just about out of time do we have any questions yes",
    "start": "3553609",
    "end": "3562179"
  },
  {
    "text": "oh so in 2017 there was a huge pressure",
    "start": "3563260",
    "end": "3572350"
  },
  {
    "text": "to get modules out the door and what I said was I'm not going to use",
    "start": "3572350",
    "end": "3578500"
  },
  {
    "text": "them unless they at least do this for me and I'm it's not grandstanding it's if they don't do this I can't I just can't",
    "start": "3578500",
    "end": "3584230"
  },
  {
    "text": "use them so they have to do this so there was a lot of effort made to make them do this so I think that modules do",
    "start": "3584230",
    "end": "3591400"
  },
  {
    "text": "the basic functionality now that they need to there's still a huge question about tooling there's still a huge",
    "start": "3591400",
    "end": "3596950"
  },
  {
    "text": "question about how do you discover where something is in a module there may need to be a lot of convention built around",
    "start": "3596950",
    "end": "3603550"
  },
  {
    "text": "how to use modules the way there is now with header files that convention doesn't seem to exist yet so so what are",
    "start": "3603550",
    "end": "3613210"
  },
  {
    "text": "the engineering requirements for modules whoops did I I just jump over that think I did but we're out of time anyway",
    "start": "3613210",
    "end": "3619090"
  },
  {
    "text": "aren't we doesn't matter this is good enough so if",
    "start": "3619090",
    "end": "3625180"
  },
  {
    "text": "there any other questions well alright",
    "start": "3625180",
    "end": "3630850"
  },
  {
    "text": "well yes",
    "start": "3630850",
    "end": "3633690"
  },
  {
    "text": "say again I can't speak to Java or C",
    "start": "3636269",
    "end": "3644229"
  },
  {
    "text": "sharp about modules modules or something about C++ where there's a huge effort to",
    "start": "3644229",
    "end": "3649869"
  },
  {
    "text": "achieve encapsulation so I I don't know what Java does that would have anything",
    "start": "3649869",
    "end": "3655779"
  },
  {
    "text": "like modules modules are they're very very specific to ad hoc PPP are getting",
    "start": "3655779",
    "end": "3663640"
  },
  {
    "text": "rid of very specific things plus I'm not a Java or C sharp expert I wouldn't know",
    "start": "3663640",
    "end": "3669660"
  },
  {
    "text": "anything else all right well thank you for coming there's another talk",
    "start": "3669660",
    "end": "3676140"
  },
  {
    "text": "[Applause]",
    "start": "3676140",
    "end": "3685239"
  }
]