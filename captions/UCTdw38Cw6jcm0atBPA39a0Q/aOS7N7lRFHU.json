[
  {
    "start": "0",
    "end": "58000"
  },
  {
    "text": "well I don't want to make anybody stay late so I'm gonna start and thank you thank you for not slipping out to catch",
    "start": "3180",
    "end": "9450"
  },
  {
    "text": "an earlier train or whatever your options were instead of coming and listening to me this is actually the first time I've",
    "start": "9450",
    "end": "14850"
  },
  {
    "text": "given this talk so I hope it's a talk I hope you like it I talked yesterday about code as",
    "start": "14850",
    "end": "24630"
  },
  {
    "text": "communication right so we write for the compiler in that if we don't write in a",
    "start": "24630",
    "end": "29820"
  },
  {
    "text": "way the compiler is happy with we don't get what we want so we have to write for the compiler but you know like they",
    "start": "29820",
    "end": "35670"
  },
  {
    "text": "don't care what you call your function we care all right so we're trying to",
    "start": "35670",
    "end": "41340"
  },
  {
    "text": "read our code we're trying to understand our code and of course we hope that if we have to come back to this code",
    "start": "41340",
    "end": "46760"
  },
  {
    "text": "tomorrow or in six months or in ten years that we will also still be able to understand it or perhaps that we can",
    "start": "46760",
    "end": "53100"
  },
  {
    "text": "pass it off to other people and they won't be coming back to us to get us to explain it so I really strongly feel",
    "start": "53100",
    "end": "59100"
  },
  {
    "start": "58000",
    "end": "58000"
  },
  {
    "text": "that you know yes you're writing code to solve a problem you can't forget that but it's also a way of communicating and",
    "start": "59100",
    "end": "66020"
  },
  {
    "text": "communicating with our future selves then with some future people we don't",
    "start": "66020",
    "end": "72450"
  },
  {
    "text": "know yet that Roy Rogers says a friend is strangers just a friend you haven't met so your future maintainer is just a",
    "start": "72450",
    "end": "79740"
  },
  {
    "text": "friend you haven't met and so we leave behind kind of trail markers and trail",
    "start": "79740",
    "end": "85050"
  },
  {
    "text": "markers vary in their usefulness in this picture I took this picture because I",
    "start": "85050",
    "end": "90180"
  },
  {
    "text": "thought it was ridiculous that you could have a canoe on your head and if you took the wrong turn you'd be on the 50 mile trail so port oars go straight",
    "start": "90180",
    "end": "98700"
  },
  {
    "text": "hikers turn left but it's not the big picture that I want you to see it's the two little there's a yellow diamond and",
    "start": "98700",
    "end": "105479"
  },
  {
    "text": "a blue diamond nestled in the trees right and that the the hiking trail is",
    "start": "105479",
    "end": "111360"
  },
  {
    "text": "got the blue diamonds every once in a while and the portage trail has the yellow diamonds with the universal",
    "start": "111360",
    "end": "116909"
  },
  {
    "text": "portage symbol mister can you head and that's what you're leaving in your coat",
    "start": "116909",
    "end": "122670"
  },
  {
    "text": "and some of them are big and obvious and they say this is an intersection pay",
    "start": "122670",
    "end": "127830"
  },
  {
    "text": "attention you do not want to carry your canoe 50 kilometers and some of them are much more subtle like that little blue",
    "start": "127830",
    "end": "134930"
  },
  {
    "text": "diamond so compiling is necessary but it's not",
    "start": "134930",
    "end": "140490"
  },
  {
    "text": "sufficient it's not really what we're here for it's not enough that it runs and works",
    "start": "140490",
    "end": "145830"
  },
  {
    "text": "and doesn't explode you know you want people to understand the code and that",
    "start": "145830",
    "end": "153660"
  },
  {
    "start": "153000",
    "end": "153000"
  },
  {
    "text": "means that reading code is a skill you ask yourself questions while you're",
    "start": "153660",
    "end": "158910"
  },
  {
    "text": "reading code you say what does this do why is doing that does it actually do",
    "start": "158910",
    "end": "164610"
  },
  {
    "text": "what it claims to do like it says it updates the orders but I'm not seeing any updating happening so I don't know",
    "start": "164610",
    "end": "170670"
  },
  {
    "text": "why it's called update orders and all those conversations you know that monologue back and forth in your head",
    "start": "170670",
    "end": "175830"
  },
  {
    "text": "while you're reading the code and and my favorite of course is like what kind of",
    "start": "175830",
    "end": "181020"
  },
  {
    "text": "terrible person is responsible for this atrocity and it's usually me and I'm",
    "start": "181020",
    "end": "188760"
  },
  {
    "text": "sure whoever it was never thought about bla bla bla so when you write code",
    "start": "188760",
    "end": "196350"
  },
  {
    "start": "196000",
    "end": "196000"
  },
  {
    "text": "that's well written right yeah it works I'll stand for working and it works even",
    "start": "196350",
    "end": "204030"
  },
  {
    "text": "if you go to a different compiler and it works even on another platform but also it has pre imagined those questions",
    "start": "204030",
    "end": "212040"
  },
  {
    "text": "being asked and the code itself answers them not like this we start to do this",
    "start": "212040",
    "end": "221190"
  },
  {
    "text": "all the time and they were terrible they were never useful at all for one thing",
    "start": "221190",
    "end": "226680"
  },
  {
    "text": "it would say things like calculate efficiency purpose calculates the efficiency oh I've learned something",
    "start": "226680",
    "end": "232380"
  },
  {
    "text": "that was helpful but it answers them because it tells a story because it",
    "start": "232380",
    "end": "239370"
  },
  {
    "text": "expresses your intent because it leads the reader through what you're doing and so in that context I started thinking",
    "start": "239370",
    "end": "246750"
  },
  {
    "text": "about the amount of information you could convey with the least number of",
    "start": "246750",
    "end": "252090"
  },
  {
    "text": "tokens right so if I write a giant loop to sort something I might need a hundred",
    "start": "252090",
    "end": "258570"
  },
  {
    "text": "lines of code or if I just called stood sort if I've got a namespace in place I",
    "start": "258570",
    "end": "264390"
  },
  {
    "text": "might just need four letters to get across the idea of sorting and maybe your code can be",
    "start": "264390",
    "end": "269919"
  },
  {
    "text": "consider to be pretty expressive if you think about that ratio of the amount of information you're getting across versus",
    "start": "269919",
    "end": "276249"
  },
  {
    "text": "the number of characters you're using up so it who was at B Arnaz talked opening",
    "start": "276249",
    "end": "282699"
  },
  {
    "start": "279000",
    "end": "279000"
  },
  {
    "text": "night right so he quoted this too this is a very popular thing to quote that",
    "start": "282699",
    "end": "287770"
  },
  {
    "text": "Wow like think about what you're saying and that single character of space you know",
    "start": "287770",
    "end": "293199"
  },
  {
    "text": "you only used up a bite and yet you're saying please clean up everything that",
    "start": "293199",
    "end": "298210"
  },
  {
    "text": "was on this stack and voila you know there's all kinds of stuff going on here but I can beat it with this there's no",
    "start": "298210",
    "end": "307509"
  },
  {
    "text": "build that's the slide sometimes not",
    "start": "307509",
    "end": "313569"
  },
  {
    "text": "saying anything doesn't mean anything here's a class if you've ever written any introductory C++ stuff you've",
    "start": "313569",
    "end": "319659"
  },
  {
    "text": "probably written a class like this it's called holder it holds a number that's the private member virbull it's cut some constructors and some functions that do",
    "start": "319659",
    "end": "326409"
  },
  {
    "text": "some stuff take a look at this version of holder and I'm just gonna go back to",
    "start": "326409",
    "end": "333490"
  },
  {
    "text": "this one and then this one oh so in the first one we didn't say anything on the",
    "start": "333490",
    "end": "339430"
  },
  {
    "text": "one argument constructor we didn't say explicit we were kind of saying something right we were saying you can",
    "start": "339430",
    "end": "346599"
  },
  {
    "text": "just ask the compiler to make you a holder out of a random integer if there's some context where the compiler feels like doing that get number and two",
    "start": "346599",
    "end": "355210"
  },
  {
    "text": "string or now marked as Const meaning that they do not change the number and I",
    "start": "355210",
    "end": "361479"
  },
  {
    "text": "would hope so right from their names but compilers remember don't care what things are called back here we didn't bother marking them",
    "start": "361479",
    "end": "368259"
  },
  {
    "text": "as Const and we also didn't bother marking to string as virtual so if we were to extend holder by inheriting from",
    "start": "368259",
    "end": "375939"
  },
  {
    "text": "it well would we want polymorphic behavior on the two string huh Nana so",
    "start": "375939",
    "end": "382680"
  },
  {
    "text": "the absence of these red key words in the other version of holder was in fact",
    "start": "382680",
    "end": "389529"
  },
  {
    "text": "carrying information and as a code reviewer as a pair programmer as a side",
    "start": "389529",
    "end": "397149"
  },
  {
    "text": "by side teammate we're often called on to notice that absence of information",
    "start": "397149",
    "end": "403220"
  },
  {
    "text": "so earlier today we were told a ae almost always explicit noticing that the",
    "start": "403220",
    "end": "410090"
  },
  {
    "text": "first constructor there is not marked explicit and saying hey should you think about marking that constructor explicit",
    "start": "410090",
    "end": "416480"
  },
  {
    "text": "and maybe the person would say no I totally want to be able to just randomly pass integers to functions that take",
    "start": "416480",
    "end": "421550"
  },
  {
    "text": "holders and have them get wrapped up without any work on behalf of the caller but they're not telling you that by",
    "start": "421550",
    "end": "428030"
  },
  {
    "text": "leading it out now a lot of things in C++ come in pairs right plus is the",
    "start": "428030",
    "end": "436100"
  },
  {
    "text": "opposite of minus and times is the opposite of star or maybe address sub is the opposite of star so on but there's",
    "start": "436100",
    "end": "442520"
  },
  {
    "text": "all kinds of stuff that doesn't have opposites they just are and I want to",
    "start": "442520",
    "end": "449270"
  },
  {
    "start": "449000",
    "end": "449000"
  },
  {
    "text": "talk about this set so we have virtual and it's cousin override we have",
    "start": "449270",
    "end": "457130"
  },
  {
    "text": "explicit Const the opposite of Const is not always mutable right I mean they are opposites",
    "start": "457130",
    "end": "465110"
  },
  {
    "text": "but not completely there are contexts in which you can say constantly you can't say mutable and vice-versa",
    "start": "465110",
    "end": "471550"
  },
  {
    "text": "public/private sticking ref qualifiers",
    "start": "471580",
    "end": "477290"
  },
  {
    "text": "and CB qualifiers out on the ends of functions but also on your parameters and two things I want talked about",
    "start": "477290",
    "end": "484160"
  },
  {
    "text": "specifically because they're new in C++ seventeen fall through and who's seen",
    "start": "484160",
    "end": "490790"
  },
  {
    "text": "fall through before and recognizes this just a really small number of people so if you don't break at the end of cases",
    "start": "490790",
    "end": "496760"
  },
  {
    "text": "you fall through to the next case and some compilers will warn you",
    "start": "496760",
    "end": "501970"
  },
  {
    "text": "so this attribute which is a suppose plus seventeen attribute doesn't change the way your code behaves in any way",
    "start": "501970",
    "end": "508160"
  },
  {
    "text": "shape or form okay the only thing it does is in a crop compiler way tells the compiler not to",
    "start": "508160",
    "end": "515330"
  },
  {
    "text": "warn you because you're doing it on purpose as a compared to slash slash fall through which tells humans to leave",
    "start": "515330",
    "end": "521150"
  },
  {
    "text": "you alone about it right so this is still the compiler to leave you alone about it you can have opinions about",
    "start": "521150",
    "end": "527030"
  },
  {
    "text": "whether or not falling through is good or bad but that's what that attribute is for so without it you're relying on a",
    "start": "527030",
    "end": "534350"
  },
  {
    "text": "person noticing there's no break in case three and being okay with falling through to",
    "start": "534350",
    "end": "539820"
  },
  {
    "text": "also do the case for stuff and we also have two more attributes again they",
    "start": "539820",
    "end": "546030"
  },
  {
    "start": "543000",
    "end": "543000"
  },
  {
    "text": "don't change how your program works there's change what the compiler has to say about it we have maybe unused this",
    "start": "546030",
    "end": "552960"
  },
  {
    "text": "is perhaps pointless but then perhaps not here's what why you need it",
    "start": "552960",
    "end": "559940"
  },
  {
    "text": "building this code in debug the assert stays and the J is a used local variable",
    "start": "559940",
    "end": "566610"
  },
  {
    "text": "you build the same code and release the assert falls away now that J is unused now you could argue well why don't you",
    "start": "566610",
    "end": "573570"
  },
  {
    "text": "just assert function with side-effects but you know why right because you want the side-effects and release or in debug",
    "start": "573570",
    "end": "580730"
  },
  {
    "text": "so I mean you can do dumb things like after are they assert I'll just arbitrarily set J to another number or",
    "start": "580730",
    "end": "586980"
  },
  {
    "text": "I'll increment J or something just to shut the compiler up that's that's not smart so maybe unused says trust me I have my",
    "start": "586980",
    "end": "595500"
  },
  {
    "text": "reasons for why I'm putting this in this variable do not warn me if I then do not go on to to use the variable now the",
    "start": "595500",
    "end": "603150"
  },
  {
    "text": "opposite of that is no discard question was asked it's starting to blur together",
    "start": "603150",
    "end": "608880"
  },
  {
    "text": "I can't remember was yesterday today when did you last check the return value from printf right we have functions",
    "start": "608880",
    "end": "615150"
  },
  {
    "text": "we're checking the return value is actually super important and so if you",
    "start": "615150",
    "end": "620430"
  },
  {
    "text": "call get number I expect you to put the resulting number which is a very important one into a variable and not",
    "start": "620430",
    "end": "627060"
  },
  {
    "text": "throw it away and if you just call get number I'll give you a warning and I'll tell you you shouldn't have done that",
    "start": "627060",
    "end": "632220"
  },
  {
    "text": "you shouldn't shouldn't discard in my warning so this brings up the idea of a couple different kinds of nothing",
    "start": "632220",
    "end": "638720"
  },
  {
    "text": "because that's a piece of nothing right there when I just call get number and I don't put its return value into anything",
    "start": "638720",
    "end": "645330"
  },
  {
    "text": "and I don't pass it to an F I don't in any way use it that's a nothingness that again as a",
    "start": "645330",
    "end": "651450"
  },
  {
    "text": "code reviewer or a side by side pair program or whatever to react to and say hey why is there nothing there before",
    "start": "651450",
    "end": "658500"
  },
  {
    "text": "that call to get number why aren't you saving the number in a local variable that you're going to do something with why why did somebody go to the trouble",
    "start": "658500",
    "end": "665370"
  },
  {
    "text": "of writing a function that returns integers or strings or whatever it returns if you don't care it gets back now whenever I ask a",
    "start": "665370",
    "end": "675810"
  },
  {
    "text": "question why that's actually literally what I ask so why don't you use the",
    "start": "675810",
    "end": "681510"
  },
  {
    "text": "return value is not the same as you should use the return value and someone may have an answer but why isn't the",
    "start": "681510",
    "end": "691140"
  },
  {
    "text": "answer in the code so and I don't mean that you put a comma after the end that says I don't care what this function",
    "start": "691140",
    "end": "696870"
  },
  {
    "text": "returns there has to be a story that the code leans out to you about why you know",
    "start": "696870",
    "end": "703440"
  },
  {
    "text": "how many bytes were successfully written or whatever is not important to you so",
    "start": "703440",
    "end": "712620"
  },
  {
    "start": "710000",
    "end": "710000"
  },
  {
    "text": "I'm imagining myself writing in a room all alone and I'm writing code and",
    "start": "712620",
    "end": "718350"
  },
  {
    "text": "because so many of our defaults are wrong I'm specifying some things and",
    "start": "718350",
    "end": "724050"
  },
  {
    "text": "leaving some things at default but not many because so many of our defaults are wrong but I want to tell the people",
    "start": "724050",
    "end": "730830"
  },
  {
    "text": "after me I did this on purpose this is",
    "start": "730830",
    "end": "736140"
  },
  {
    "text": "not a nothing of forgetting this is a nothing of a choice and that's really the key point here and I don't",
    "start": "736140",
    "end": "743430"
  },
  {
    "text": "necessarily have an answer to it how do you communicate that in this particular",
    "start": "743430",
    "end": "748650"
  },
  {
    "text": "case the reason you didn't type any tokens whatsoever is because you made a deliberate informed expressive choice so the first",
    "start": "748650",
    "end": "759000"
  },
  {
    "text": "thing you can do is repeat yourself over and above the default so when I write a",
    "start": "759000",
    "end": "766020"
  },
  {
    "text": "class and I know there are people here who don't do this and and will just disagree because I'm right",
    "start": "766020",
    "end": "772140"
  },
  {
    "text": "I say class whatever private Collin stuff public : stuff I know I don't have",
    "start": "772140",
    "end": "778410"
  },
  {
    "text": "to say private : because I know that's the default I'm trained on that but I do it anyway and if I'm writing struct",
    "start": "778410",
    "end": "785070"
  },
  {
    "text": "point I'll go public : and then the things yes I know they're public if I",
    "start": "785070",
    "end": "790170"
  },
  {
    "text": "don't say it but I'm saying it anyway it's it's harmless it doesn't slit a compiler down and it makes it clear that",
    "start": "790170",
    "end": "796020"
  },
  {
    "text": "I actually did think about it if you write a void function you know you don't",
    "start": "796020",
    "end": "801510"
  },
  {
    "text": "need a return statement at the end and then enough case of the super expressive clothes brace when we hit the close brace we're",
    "start": "801510",
    "end": "807389"
  },
  {
    "text": "done it's harmless enough to count on that unless you also have a return in",
    "start": "807389",
    "end": "813689"
  },
  {
    "text": "the middle right so you have some kind of an if or maybe a loop or something that you under certain circumstances",
    "start": "813689",
    "end": "819689"
  },
  {
    "text": "you'll blow out in the middle and you don't have a return at the bottom I don't know if you ever intend to come",
    "start": "819689",
    "end": "826289"
  },
  {
    "text": "out the bottom like maybe you think it's an infinite loop and the only way they're getting out is from the middle",
    "start": "826289",
    "end": "831559"
  },
  {
    "text": "if you put a return statement last and I know that you also expect to fall out of the loop or the switch or whatever it is",
    "start": "831559",
    "end": "838349"
  },
  {
    "text": "and also return out the bottom it's not needed for the compiler compiler would be fine if you call your functions a 1 a",
    "start": "838349",
    "end": "845249"
  },
  {
    "text": "2 a 3 and so on until you used up as many numbers and then moved on to the B's but for humans put that return there",
    "start": "845249",
    "end": "853470"
  },
  {
    "text": "even though strictly speaking it's not needed every time you override a virtual",
    "start": "853470",
    "end": "860459"
  },
  {
    "text": "function put override on it but once a year you'll put override on a virtual",
    "start": "860459",
    "end": "865679"
  },
  {
    "text": "function and the compiler will say you can't override that it's not a virtual function and you'll go what what and",
    "start": "865679",
    "end": "871949"
  },
  {
    "text": "then he'll go back and put virtual in the base class which you had forgotten to do but even when it's not catching that mistake it's just communicating to",
    "start": "871949",
    "end": "879359"
  },
  {
    "text": "the people who are reading the code you could leave it off everything compiles fine if you leave it off but I'm just",
    "start": "879359",
    "end": "885029"
  },
  {
    "text": "asking you please don't leave it off and",
    "start": "885029",
    "end": "890369"
  },
  {
    "text": "we have no except false you know what the difference between no except false",
    "start": "890369",
    "end": "895739"
  },
  {
    "text": "and absolutely nothing is to the compiler absolutely nothing but to",
    "start": "895739",
    "end": "904139"
  },
  {
    "text": "humans it says I thought about this and baby I throw deal with it ok it gives",
    "start": "904139",
    "end": "913439"
  },
  {
    "text": "you a chance to put kind of a stake in the ground and say this is this is what",
    "start": "913439",
    "end": "918689"
  },
  {
    "text": "this function does",
    "start": "918689",
    "end": "921259"
  },
  {
    "text": "you could leave a comment but yarnís",
    "start": "924180",
    "end": "929350"
  },
  {
    "text": "says the compiler doesn't read comments and neither do i I'm gonna adopt that as my philosophy too however we do not have",
    "start": "929350",
    "end": "938050"
  },
  {
    "text": "implicit we do not have constant false we do not have non virtual and in the",
    "start": "938050",
    "end": "943750"
  },
  {
    "text": "nod to the visual basic heritage we do not have by Val right so when you take a",
    "start": "943750",
    "end": "950430"
  },
  {
    "text": "foo versus taking a foo ref right we don't have this like danger danger I'm",
    "start": "950430",
    "end": "956470"
  },
  {
    "text": "doing this we don't have these keywords don't do this I've seen this don't do it",
    "start": "956470",
    "end": "965020"
  },
  {
    "text": "um not because it's it's arrogant or anything but because it's vague okay I",
    "start": "965020",
    "end": "971590"
  },
  {
    "text": "mean you may feel while you're typing it that the oddity of your code is obvious and so you can just say like stop I know",
    "start": "971590",
    "end": "978370"
  },
  {
    "text": "you think you're smarter than me and you want to change it don't change it but five years from now I may not be clear on what it is that I'm not supposed to",
    "start": "978370",
    "end": "985540"
  },
  {
    "text": "change this is only marginally better",
    "start": "985540",
    "end": "990690"
  },
  {
    "text": "okay here I'm being really specific about what I'm doing that's good but now",
    "start": "990690",
    "end": "996550"
  },
  {
    "text": "I have no reasons like I did this because reasons is not actually an explanation so we're back to this issue",
    "start": "996550",
    "end": "1006300"
  },
  {
    "text": "that if I leave a keyword out did I not think about it at all or did I think",
    "start": "1006300",
    "end": "1013290"
  },
  {
    "text": "about it and make a careful and considered decision like the expert that I supposedly am and often the best way",
    "start": "1013290",
    "end": "1022290"
  },
  {
    "text": "for me to get an answer for that is to look at the rest of your code so if you",
    "start": "1022290",
    "end": "1028110"
  },
  {
    "text": "think back to the two versions of holder once I marked a get number and two",
    "start": "1028110",
    "end": "1036120"
  },
  {
    "text": "string as Const you knew that ink changed number because it's not mark",
    "start": "1036120",
    "end": "1043800"
  },
  {
    "text": "Const and I'm clearly a constant marking person so it must be the only reason I",
    "start": "1043800",
    "end": "1048900"
  },
  {
    "text": "didn't mark that function as constants that I can't mark it as constant because it changes a member variable",
    "start": "1048900",
    "end": "1054930"
  },
  {
    "text": "when nothing was labeled you had to guess based on their names or go and read the code both of which suck as",
    "start": "1054930",
    "end": "1060930"
  },
  {
    "text": "strategies for guessing so having a consistent I use override I mark things",
    "start": "1060930",
    "end": "1069330"
  },
  {
    "text": "Const I take things by reference I this I that then when I don't this is a",
    "start": "1069330",
    "end": "1076410"
  },
  {
    "text": "thoughtful developer who would have done it if it was appropriate therefore doesn't consider it appropriate if you",
    "start": "1076410",
    "end": "1084540"
  },
  {
    "text": "have to put in a comment only do it where you think you're maybe tricking people so this comet says I know this",
    "start": "1084540",
    "end": "1091950"
  },
  {
    "text": "looks like it might be an override of foo but it's actually a different signature so I didn't put the word",
    "start": "1091950",
    "end": "1097770"
  },
  {
    "text": "override on it normally I would I didn't put an override on it because it's not an override and then I'm being really",
    "start": "1097770",
    "end": "1103620"
  },
  {
    "text": "specific about why it's not an override that the signature is different in some way if you for some reason don't have a",
    "start": "1103620",
    "end": "1112860"
  },
  {
    "text": "return at the bottom of your void function maybe a comment that says we never return out the bottom only return",
    "start": "1112860",
    "end": "1119580"
  },
  {
    "text": "from inside that if or what have you so",
    "start": "1119580",
    "end": "1123769"
  },
  {
    "text": "think about other choices you can make in your code this is maybe coming a",
    "start": "1125720",
    "end": "1130950"
  },
  {
    "text": "little bit off my brief of strictly speaking leaving out a token if I have a",
    "start": "1130950",
    "end": "1139680"
  },
  {
    "start": "1138000",
    "end": "1138000"
  },
  {
    "text": "raw pointer a t-star am I just pro pointers and enjoy typing new and delete",
    "start": "1139680",
    "end": "1147860"
  },
  {
    "text": "you know who owns this PE is is send",
    "start": "1147860",
    "end": "1153570"
  },
  {
    "text": "emails responsible for cleaning up afterwards or can I be confident that hey this person would never give me a",
    "start": "1153570",
    "end": "1159780"
  },
  {
    "text": "raw pointer unless it was strictly for observer purposes it's harder here if",
    "start": "1159780",
    "end": "1167490"
  },
  {
    "text": "send emails is going to return a message pointer like maybe maybe they created",
    "start": "1167490",
    "end": "1172620"
  },
  {
    "text": "that and I'm supposed to clean it up right and you don't know yeah you could go read it you could also go read the",
    "start": "1172620",
    "end": "1179160"
  },
  {
    "text": "wiki but I bet you're not going to write but if I look elsewhere in the code and I see that this developer has heard of",
    "start": "1179160",
    "end": "1186600"
  },
  {
    "text": "unique pointer has heard of share Poynter then the fact that they're using a raw pointer here assuming it's not",
    "start": "1186600",
    "end": "1193790"
  },
  {
    "text": "some transitional thing that's halfway through being converted into being more modern this is probably just an observer",
    "start": "1193790",
    "end": "1200210"
  },
  {
    "text": "pointer I just gave you the pointer to the message in case you want to look at it right okay that's all right I can't",
    "start": "1200210",
    "end": "1208460"
  },
  {
    "text": "find any new I can't find any deletes I can't find constructors and copy destructors and copy constructors and",
    "start": "1208460",
    "end": "1215090"
  },
  {
    "text": "move assignment operators and whatnot okay a person is a stack semantics person right they're not expecting me to",
    "start": "1215090",
    "end": "1222500"
  },
  {
    "text": "manage these things excellent I don't have to manage them so the absence right",
    "start": "1222500",
    "end": "1228020"
  },
  {
    "text": "the following the rule of zero that's a very powerful nothing it says this is",
    "start": "1228020",
    "end": "1233750"
  },
  {
    "text": "all stack semantics here we've got we got people for that whether it's whether it's vector or whether it's string or",
    "start": "1233750",
    "end": "1239990"
  },
  {
    "text": "whether it's the smart pointers I got people for that I don't manage memory when you see a lot of that then you can",
    "start": "1239990",
    "end": "1245570"
  },
  {
    "text": "relax when you see a raw pointer when you see all the hard work of people",
    "start": "1245570",
    "end": "1251210"
  },
  {
    "text": "mooing and deleting all over the place and you see that I'm gonna give you a message pointer cold icy hand should be",
    "start": "1251210",
    "end": "1258950"
  },
  {
    "text": "gripping your guts you know you're fine Lord I'm gonna be responsible for that I don't think I want to remember how to be",
    "start": "1258950",
    "end": "1264530"
  },
  {
    "text": "responsible for that speaking of punctuation if I take",
    "start": "1264530",
    "end": "1271640"
  },
  {
    "start": "1267000",
    "end": "1267000"
  },
  {
    "text": "something by ref if I take something by address as a parameter you know does that mean I'm changing it",
    "start": "1271640",
    "end": "1278110"
  },
  {
    "text": "especially if I didn't put the Const in there again back to the nothing and there are there are people who have",
    "start": "1278110",
    "end": "1284990"
  },
  {
    "text": "these as their style guidelines you know they'll say if I give you a reference I'm just trying to save the copy it's",
    "start": "1284990",
    "end": "1292640"
  },
  {
    "text": "yours to look at blah blah blah but if I give you a pointer you own it and you have to delete it you can you can read",
    "start": "1292640",
    "end": "1298640"
  },
  {
    "text": "style guides today that say that I hate it but you can totally read them the",
    "start": "1298640",
    "end": "1304520"
  },
  {
    "text": "compiler doesn't care right pass by reference verses pass by address the only difference to the compiler is all",
    "start": "1304520",
    "end": "1309890"
  },
  {
    "text": "the punctuation you have to type but the humans may see a difference and if you",
    "start": "1309890",
    "end": "1315050"
  },
  {
    "text": "want to take that as a point you can communicate on then you need to take on that consistency throughout the code",
    "start": "1315050",
    "end": "1320750"
  },
  {
    "text": "base you need so here's what it means when I pass by nan construe it means you will change it",
    "start": "1320750",
    "end": "1326490"
  },
  {
    "text": "here's what it means when I pass by address and so on I'm well I was gonna",
    "start": "1326490",
    "end": "1337710"
  },
  {
    "start": "1333000",
    "end": "1333000"
  },
  {
    "text": "say I'm Pro ranged four but that's not really true I'm just anti original four not super pro ranged four because I'd",
    "start": "1337710",
    "end": "1343770"
  },
  {
    "text": "really rather you just called a function but if I see a traditional for loop for",
    "start": "1343770",
    "end": "1350910"
  },
  {
    "text": "int I equals zero semicolon is that just another day at the office or is that",
    "start": "1350910",
    "end": "1357060"
  },
  {
    "text": "like wait why not arranged for what's going on maybe this function sorry this",
    "start": "1357060",
    "end": "1363900"
  },
  {
    "text": "loop does not touch every element because if it touches every element you used to range for right so something",
    "start": "1363900",
    "end": "1370710"
  },
  {
    "text": "weird happening here what's the weird thing that's happening here now sometimes the weird thing is I need the",
    "start": "1370710",
    "end": "1376080"
  },
  {
    "text": "index right I've had this from all kinds of people that like I need I I need to know that I'm on the fifth element so I",
    "start": "1376080",
    "end": "1382560"
  },
  {
    "text": "did a traditional for loop there's just an unfortunate response but I always ask why then we'll solve that problem why",
    "start": "1382560",
    "end": "1391110"
  },
  {
    "text": "aren't you calling find why aren't you calling count why aren't you calling all of usually the answer - why aren't you",
    "start": "1391110",
    "end": "1398370"
  },
  {
    "text": "calling all of is what is all of and then we have a little conversation and then they're like wow it turns out I'm",
    "start": "1398370",
    "end": "1405690"
  },
  {
    "text": "not the only person ever who needed to know if all the orders have been shipped by going through and",
    "start": "1405690",
    "end": "1411570"
  },
  {
    "text": "checking to see that all of them have they're shipped bit flipped but again",
    "start": "1411570",
    "end": "1418170"
  },
  {
    "text": "back to what you're doing the rest of the code base if all the rest of your code shows me that you know what",
    "start": "1418170",
    "end": "1423930"
  },
  {
    "text": "countess you know what sort is you even know what rotate is and when to use it but here you wrote a loop now I'm paying",
    "start": "1423930",
    "end": "1431370"
  },
  {
    "text": "attention right there's something going on here I don't know what it is I'm gonna have to read the loop to find out",
    "start": "1431370",
    "end": "1436440"
  },
  {
    "text": "maybe it's going to be exciting but it means something now that you wrote a loop where as your office mate who can't",
    "start": "1436440",
    "end": "1444450"
  },
  {
    "text": "even type algorithm and has never included the header ever has got loops everywhere and we're just like ho-hum",
    "start": "1444450",
    "end": "1450300"
  },
  {
    "text": "another loop but here it means something",
    "start": "1450300",
    "end": "1455180"
  },
  {
    "start": "1455000",
    "end": "1455000"
  },
  {
    "text": "where do you initialize things Simon brand has this blog post called",
    "start": "1456830",
    "end": "1462420"
  },
  {
    "text": "initialization is bonkers it's my new favorite adjective he's completely right but this isn't about that this is about",
    "start": "1462420",
    "end": "1469640"
  },
  {
    "text": "I'm writing a constructor and when I started teaching C++ we said the best",
    "start": "1469640",
    "end": "1475200"
  },
  {
    "text": "place to set the member variables is after the colon right so what if",
    "start": "1475200",
    "end": "1481080"
  },
  {
    "text": "something doesn't you're looking at a constructor and there's a member variable that is not initialized right",
    "start": "1481080",
    "end": "1487620"
  },
  {
    "text": "after that : what's going on first of all it's not the best place anymore actually I think the best place is non",
    "start": "1487620",
    "end": "1493350"
  },
  {
    "text": "static memory initializers if you want to initialize to a default value obviously if you want to use the parameter from the constructor no but",
    "start": "1493350",
    "end": "1500550"
  },
  {
    "text": "it's possible that the bank accounts open date is today and that's just what",
    "start": "1500550",
    "end": "1506370"
  },
  {
    "text": "it is we don't have to mention that in the constructor or that the bank accounts opening balance is zero or who",
    "start": "1506370",
    "end": "1512100"
  },
  {
    "text": "all knows what else right sometimes people set things in the body",
    "start": "1512100",
    "end": "1518390"
  },
  {
    "text": "again why probably whatever they say is wrong but I'll listen sometimes it's",
    "start": "1518390",
    "end": "1525120"
  },
  {
    "text": "because of initializer order for those who don't know I don't have a sample here you think the initializers happen",
    "start": "1525120",
    "end": "1532950"
  },
  {
    "text": "in the order you write them after the colon but they don't they happen in the order the variables are declared and",
    "start": "1532950",
    "end": "1538290"
  },
  {
    "text": "someone who's been bitten by that if they have something that has to be last they'll initialize it in the body so",
    "start": "1538290",
    "end": "1544020"
  },
  {
    "text": "they're 100% sure that whatever other things it's depending on have gotten their values not maybe the right fix but",
    "start": "1544020",
    "end": "1550350"
  },
  {
    "text": "it's a fix but my favorite right we have five constructors and we added I don't",
    "start": "1550350",
    "end": "1558180"
  },
  {
    "text": "know status or priority or importance or something and in four of the five",
    "start": "1558180",
    "end": "1564480"
  },
  {
    "text": "constructors we remembered about this variable and gave it a value but in the fifth we didn't write and so again when",
    "start": "1564480",
    "end": "1571650"
  },
  {
    "text": "I'm just looking at the constructor and I'm saying hey this doesn't set priority I have to now work out why I got a",
    "start": "1571650",
    "end": "1580380"
  },
  {
    "text": "backup in the header and find all it's a non-static member initializer that's fine or maybe I got to go into the",
    "start": "1580380",
    "end": "1585810"
  },
  {
    "text": "implementation file and see that it's in the body a lot of like sleuthing to do about why you didn't do something the solution to",
    "start": "1585810",
    "end": "1594899"
  },
  {
    "text": "which course is try to be consistent don't do half your variables with",
    "start": "1594899",
    "end": "1601019"
  },
  {
    "text": "non-static member initializers and the other half after the colon and that every once in a while one in the body",
    "start": "1601019",
    "end": "1606989"
  },
  {
    "text": "just to keep me on my toes the more consistent you are the less time I spend being puzzled and trying to understand",
    "start": "1606989",
    "end": "1612419"
  },
  {
    "text": "did you forget about priority is that what happened here and you know unfortunately a lot of the time that is",
    "start": "1612419",
    "end": "1617940"
  },
  {
    "text": "the answers I can't rule that out that's a really likely part of the problem and",
    "start": "1617940",
    "end": "1624690"
  },
  {
    "text": "and what about these down here string s equals quote quote vector of employee",
    "start": "1624690",
    "end": "1631619"
  },
  {
    "text": "Dept round brackets zero and while initialization is bonkers I will tell you that gets you a zero length vector",
    "start": "1631619",
    "end": "1638869"
  },
  {
    "text": "as it would if you didn't say round brackets zero right you just said vector",
    "start": "1638869",
    "end": "1645389"
  },
  {
    "text": "of employees department you'd get a zero inspector just say string s you'd get quote quote so what what communicate",
    "start": "1645389",
    "end": "1652649"
  },
  {
    "text": "compiler doesn't care right runtime doesn't care this have zero impact on how your code behaves but they have a",
    "start": "1652649",
    "end": "1658109"
  },
  {
    "text": "huge impact on how I behave like what are you trying to tell me do you not",
    "start": "1658109",
    "end": "1663330"
  },
  {
    "text": "know the defaults that's possible right are you just coming from another",
    "start": "1663330",
    "end": "1669480"
  },
  {
    "text": "language where there aren't defaults also possible did you used to have something in there right did you use to",
    "start": "1669480",
    "end": "1677190"
  },
  {
    "text": "like automatically I'm just gonna reserve for twenty because performance and then discover you didn't need to do",
    "start": "1677190",
    "end": "1682320"
  },
  {
    "text": "that so then you just deleted the - so just reserving zero I don't want to",
    "start": "1682320",
    "end": "1688769"
  },
  {
    "text": "shake the screen what are you trying to tell me what do I need to know what's going on here so this is the opposite of the rest most",
    "start": "1688769",
    "end": "1694830"
  },
  {
    "text": "of the rest of time I'm like you know try not to say nothing but here nothing would be way better because the presence",
    "start": "1694830",
    "end": "1701100"
  },
  {
    "text": "of this unnecessary code has gotten me perturbed and that's really kind of",
    "start": "1701100",
    "end": "1707009"
  },
  {
    "text": "where I'm at with this what are you trying to tell people we need trying to leave trail marker wise to say I would",
    "start": "1707009",
    "end": "1713940"
  },
  {
    "text": "like my string unlike all other new born strings to have nothing in it okay",
    "start": "1713940",
    "end": "1721398"
  },
  {
    "text": "you guys recognize this it's a little snippet if you go to I so sleepy org you",
    "start": "1722590",
    "end": "1728809"
  },
  {
    "text": "see so what's in flight and how we're doing standards wise and there's all this stuff and there's a there's a map",
    "start": "1728809",
    "end": "1734510"
  },
  {
    "text": "out for the next X years do we want more all right should we continue to add",
    "start": "1734510",
    "end": "1739880"
  },
  {
    "text": "things to C++ to make it simpler I'm generally a fan of that but what would",
    "start": "1739880",
    "end": "1746179"
  },
  {
    "text": "you do with implicit you know marking your constructor or your conversion",
    "start": "1746179",
    "end": "1753049"
  },
  {
    "text": "operators or whatnot as implicit to say I've thought about it and I'm good with",
    "start": "1753049",
    "end": "1758419"
  },
  {
    "text": "this that one you may actually get not in the form of implicit but explicit at",
    "start": "1758419",
    "end": "1765410"
  },
  {
    "text": "false in a spirit of no accept false which I believe is really for template metaprogramming and blah blah so that",
    "start": "1765410",
    "end": "1771559"
  },
  {
    "text": "you can wrap a value and then have the wrapper preserve the explicit",
    "start": "1771559",
    "end": "1777380"
  },
  {
    "text": "requirements of the wrapped but then I don't care we could do it in a regular class if we get it we could say explicit",
    "start": "1777380",
    "end": "1783080"
  },
  {
    "text": "at false on our constructors and just like no except at false it means I have",
    "start": "1783080",
    "end": "1788090"
  },
  {
    "text": "thought about this and here's my decision so we may get that one I don't",
    "start": "1788090",
    "end": "1793100"
  },
  {
    "text": "think we're gonna get constant false I don't think we're gonna get non virtual or virtual at false I don't think we're",
    "start": "1793100",
    "end": "1799730"
  },
  {
    "text": "gonna get by Val for when you're taking something by value and you actually meant to take it by value and you didn't",
    "start": "1799730",
    "end": "1805309"
  },
  {
    "text": "just forget to type some punctuation but how do you feel about them like do you",
    "start": "1805309",
    "end": "1810679"
  },
  {
    "text": "want the language to gain more keywords is this how we fix our problem with our",
    "start": "1810679",
    "end": "1815900"
  },
  {
    "text": "defaults being backwards how can you express right in the code in a way that",
    "start": "1815900",
    "end": "1821780"
  },
  {
    "text": "stays I didn't just skip it so we have fall",
    "start": "1821780",
    "end": "1827900"
  },
  {
    "text": "through we have maybe unused they change nothing other than the brain well maybe",
    "start": "1827900",
    "end": "1834169"
  },
  {
    "text": "your compiler warning but mostly the brain of the person who's reading your code anybody using them at all three",
    "start": "1834169",
    "end": "1841520"
  },
  {
    "text": "hands in the whole room so that's the natural question that I would ask in a code review like why not now maybe it's",
    "start": "1841520",
    "end": "1848510"
  },
  {
    "text": "because why I always use my local variables or I never fall through and switches so",
    "start": "1848510",
    "end": "1854140"
  },
  {
    "text": "I don't need to be able to say I'm deliberately falling through in this switch those are those are good answers but there's also a fair amount of like",
    "start": "1854140",
    "end": "1861570"
  },
  {
    "text": "we're not on C++ 17 yet which is probably still a reasonable answer and I",
    "start": "1861570",
    "end": "1866650"
  },
  {
    "text": "don't know I never thought about it and I think most of the nothing in our code",
    "start": "1866650",
    "end": "1871750"
  },
  {
    "text": "today is a giant pile of I don't know I never thought about it and that's what I",
    "start": "1871750",
    "end": "1877750"
  },
  {
    "text": "really want you to do I want you to think about how to change all of your",
    "start": "1877750",
    "end": "1883210"
  },
  {
    "text": "nothing's from I never thought about it - you can trust me on this this is a",
    "start": "1883210",
    "end": "1888850"
  },
  {
    "text": "choice it's a very narrow choice that took no time to type but it took a lot of time to think and I want you to read",
    "start": "1888850",
    "end": "1895810"
  },
  {
    "text": "it and to see that nothing as the choice that it is because you know code is communication you're telling that future",
    "start": "1895810",
    "end": "1903550"
  },
  {
    "start": "1899000",
    "end": "1899000"
  },
  {
    "text": "reader which could be you and when you get to be as old as me the timeframe in",
    "start": "1903550",
    "end": "1910000"
  },
  {
    "text": "which you forget what on earth you were thinking when you wrote it it goes down a lot when I when I was 20 I wrote code",
    "start": "1910000",
    "end": "1915430"
  },
  {
    "text": "5 10 years later I could read that same code and I knew why I did it when I get",
    "start": "1915430",
    "end": "1922060"
  },
  {
    "text": "home sometimes from conferences I go back to what I was doing when I had to leave for the plane and I'm like what idiot did this it's a fairly small group",
    "start": "1922060",
    "end": "1930880"
  },
  {
    "text": "of potential idiots that it could be especially on my own laptop right so what am i telling that future me why did",
    "start": "1930880",
    "end": "1939010"
  },
  {
    "text": "I do this what can I leave in the code itself not in the comment that will tell people why",
    "start": "1939010",
    "end": "1944620"
  },
  {
    "text": "I did what I did don't leave people mysteries and I know",
    "start": "1944620",
    "end": "1952570"
  },
  {
    "text": "our work days could be a little more interesting than they currently are I get that but this is not how we spice up",
    "start": "1952570",
    "end": "1959290"
  },
  {
    "text": "our work life by sitting there going what why who oh well good here's a",
    "start": "1959290",
    "end": "1965650"
  },
  {
    "text": "comment that says it was in 2002 by Joe programmer I feel better now and let's defend our own reputations",
    "start": "1965650",
    "end": "1972700"
  },
  {
    "text": "right you don't want the next person saying what complete buffoon is",
    "start": "1972700",
    "end": "1978520"
  },
  {
    "text": "responsible for this you shouldn't talk badly about yourself it's not good for your self-esteem right negative",
    "start": "1978520",
    "end": "1983590"
  },
  {
    "text": "self-talk is bad so leave behind things that won't cause that negative self-talk by you about you",
    "start": "1983590",
    "end": "1989860"
  },
  {
    "text": "later and really it's what's not on the screen and what's not in the code I don't think",
    "start": "1989860",
    "end": "1996610"
  },
  {
    "start": "1992000",
    "end": "1992000"
  },
  {
    "text": "much of us think about that very often we want to type we want to hit run we",
    "start": "1996610",
    "end": "2001950"
  },
  {
    "text": "want to get the test score get the debugger loaded up so we can see it all happening and even when we read it we",
    "start": "2001950",
    "end": "2007170"
  },
  {
    "text": "read what's there and so all I'm really here for today is to say think about what you didn't do think about a",
    "start": "2007170",
    "end": "2016050"
  },
  {
    "text": "different way you could have done the same thing because this is C++ and we have seven ways to do everything and",
    "start": "2016050",
    "end": "2021150"
  },
  {
    "text": "think about the message that you're sending with the choices that you made you could have used arranged for a",
    "start": "2021150",
    "end": "2027840"
  },
  {
    "text": "regular for a while do you remember that when style guides would have like 15 pages on how to choose four verses while",
    "start": "2027840",
    "end": "2033990"
  },
  {
    "text": "I would be in arguments like late at night over a dolt beverages about know",
    "start": "2033990",
    "end": "2039360"
  },
  {
    "text": "you should only use awhile if you don't know how many times the loop is going to go like if you're reading a file and things like that",
    "start": "2039360",
    "end": "2044370"
  },
  {
    "text": "which was kind of nonsense but you are communicating when you make a choice",
    "start": "2044370",
    "end": "2049590"
  },
  {
    "text": "like that so think about what you're communicating and do it deliberately because although it seems like it's just random flip a",
    "start": "2049590",
    "end": "2056669"
  },
  {
    "text": "coin I like to alternate between fours and Wiles there's actually a potential",
    "start": "2056669",
    "end": "2062340"
  },
  {
    "text": "for you to carry a little bit of extra encoded meaning and what you're doing I",
    "start": "2062340",
    "end": "2068060"
  },
  {
    "start": "2067000",
    "end": "2067000"
  },
  {
    "text": "would prefer it if you could communicate without any nothing toss the override on",
    "start": "2069380",
    "end": "2077040"
  },
  {
    "text": "the end right say public say private put in a return statement who's it gonna",
    "start": "2077040",
    "end": "2083010"
  },
  {
    "text": "hurt that's my that's my purse personal preference you cannot always do",
    "start": "2083010",
    "end": "2089040"
  },
  {
    "text": "it so if there is no way to say implicit",
    "start": "2089040",
    "end": "2094310"
  },
  {
    "text": "non-virtual by Val you know put context around it like this code is full of",
    "start": "2094310",
    "end": "2103620"
  },
  {
    "text": "smart pointers so this is almost certainly just an observer pointer that gives people what they need to",
    "start": "2103620",
    "end": "2109170"
  },
  {
    "text": "understand what that nothingness is saying in this context and really try to",
    "start": "2109170",
    "end": "2114360"
  },
  {
    "text": "use your nothings in a generous way and give the people who are reading your",
    "start": "2114360",
    "end": "2120180"
  },
  {
    "text": "code what they need so that your nothing is actually highly communicative it speaks",
    "start": "2120180",
    "end": "2125730"
  },
  {
    "text": "volumes it tells them what you mean when you say nothing at all thank you I have",
    "start": "2125730",
    "end": "2140880"
  },
  {
    "text": "time for a small number of questions for those who don't have trains and planes to catch Tony that's a good question",
    "start": "2140880",
    "end": "2156690"
  },
  {
    "text": "so should you always put a return at the bottom or only if there's another return somewhere else to full people probably",
    "start": "2156690",
    "end": "2162420"
  },
  {
    "text": "the beginner level would be always and then if you totally knew what you were doing you might be able to have like a",
    "start": "2162420",
    "end": "2168300"
  },
  {
    "text": "return free function but even then there's still that moment of puzzled Ness from someone's like I don't understand",
    "start": "2168300",
    "end": "2173580"
  },
  {
    "text": "how do we get out of here oh right it doesn't actually return anything so it must be at this close brace and although it's a very short puzzle like",
    "start": "2173580",
    "end": "2180750"
  },
  {
    "text": "it probably wouldn't want a lot of prizes as puzzles go it's easy enough to skip it yeah not too much because are",
    "start": "2180750",
    "end": "2190800"
  },
  {
    "text": "you saying string s equals quote quote like",
    "start": "2190800",
    "end": "2194720"
  },
  {
    "text": "okay so the helpful tidy our upper who comes and adds a return where it will",
    "start": "2212280",
    "end": "2217750"
  },
  {
    "text": "never be reached right and and the compiler can't tell because it's not maybe while true or something so you're",
    "start": "2217750",
    "end": "2224110"
  },
  {
    "text": "not gonna get unreachable code detected yeah well all rules contradict each other yeah here no because because it's",
    "start": "2224110",
    "end": "2245170"
  },
  {
    "text": "so I personally don't write asserts that can't run you know assert we should",
    "start": "2245170",
    "end": "2251230"
  },
  {
    "text": "never get here I don't do if we should never get here maybe I'm gonna throw or something if we",
    "start": "2251230",
    "end": "2257020"
  },
  {
    "text": "do get there rather than just I know the assert has the advantage of compiling out the comments saying you know the",
    "start": "2257020",
    "end": "2263170"
  },
  {
    "text": "only way out of here is is the return in the middle of the while true would at least prevent that mr. healthy from",
    "start": "2263170",
    "end": "2269530"
  },
  {
    "text": "coming along and adding a return at the bottom that can never be reached you can certainly come up with a",
    "start": "2269530",
    "end": "2276190"
  },
  {
    "text": "strategy that works for you to me the important thing is the consistency if I know that you would have put a return",
    "start": "2276190",
    "end": "2283600"
  },
  {
    "text": "statement if control would fall out the bottom then I don't see a return statement I'm like I bet control never",
    "start": "2283600",
    "end": "2288610"
  },
  {
    "text": "falls at the bottom and I go on and look a little closer at the while but if you're random about it sometimes there's returns at the bottom",
    "start": "2288610",
    "end": "2294430"
  },
  {
    "text": "sometimes there isn't then I haven't learned anything and I have to go read the loop this is really about taking away those moments where I'm trying to",
    "start": "2294430",
    "end": "2300970"
  },
  {
    "text": "puzzle it out and understand what it does is I'm biased to that because I spend a lot of time doing that people",
    "start": "2300970",
    "end": "2306580"
  },
  {
    "text": "are like hi here is a million lines of code that we don't understand could you understand it and would Thursday be good",
    "start": "2306580",
    "end": "2312640"
  },
  {
    "text": "for when you will tell us what it does and so I've got this like allergy to that took me 14 seconds that I shouldn't",
    "start": "2312640",
    "end": "2320440"
  },
  {
    "text": "have had to spend you know but they add up they really add up",
    "start": "2320440",
    "end": "2325650"
  },
  {
    "text": "all right thank you all very much again and I hope to see you next year [Applause]",
    "start": "2326619",
    "end": "2337059"
  }
]