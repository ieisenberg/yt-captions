[
  {
    "start": "0",
    "end": "116000"
  },
  {
    "text": "thank you so much for coming along I hope you find this talk interesting I actually gave my first public talk at",
    "start": "30",
    "end": "7770"
  },
  {
    "text": "NDC tech town last year and so I was really really pleased to get the email to be invited back so I hope you enjoy",
    "start": "7770",
    "end": "14940"
  },
  {
    "text": "it and what I'm going to talk about and this is just a kind of taster of what's coming later so this is the thing called the Bloomberg terminal which is a",
    "start": "14940",
    "end": "21270"
  },
  {
    "text": "basically a trainer workstation that's all over the the trading clause of the world and this is this is a real-time",
    "start": "21270",
    "end": "27420"
  },
  {
    "text": "analysis of the UI thread this is actually running right now and we're going to we're going to talk about what",
    "start": "27420",
    "end": "33030"
  },
  {
    "text": "this means and how we how we get there and how we actually make a system that runs reasonably fast it this also gives",
    "start": "33030",
    "end": "39870"
  },
  {
    "text": "you a scale of the data that's that's coming in you know these are these are new story headlines that are being",
    "start": "39870",
    "end": "45840"
  },
  {
    "text": "generated in real time right now so this isn't like Twitter you know behind each one of these there is a story which may",
    "start": "45840",
    "end": "51840"
  },
  {
    "text": "have media it may have pictures you may have deep analysis but this is this is how they're coming in from you know all",
    "start": "51840",
    "end": "58530"
  },
  {
    "text": "over the world and this is just you know mostly human generated news",
    "start": "58530",
    "end": "63870"
  },
  {
    "text": "there's also actual real-time financial data which is in orders of magnitude more than that but it just gives you a",
    "start": "63870",
    "end": "70470"
  },
  {
    "text": "sense of the fact this is a very dynamic kind of place for data anyway coming",
    "start": "70470",
    "end": "78090"
  },
  {
    "text": "back to that to that later on",
    "start": "78090",
    "end": "82310"
  },
  {
    "text": "okay so going away right okay",
    "start": "87120",
    "end": "94640"
  },
  {
    "text": "so as I said welcome I'm Paul Williams I work at Bloomberg in in London mainly",
    "start": "99159",
    "end": "104890"
  },
  {
    "text": "and this is a talk about how we design a desktop platform for near real-time",
    "start": "104890",
    "end": "110740"
  },
  {
    "text": "financial data and how we go about measuring how this thing is actually behaving so the agenda is really talking",
    "start": "110740",
    "end": "118119"
  },
  {
    "start": "116000",
    "end": "189000"
  },
  {
    "text": "about this terminal I'm talking about one of the the core systems embedded into this terminal called data layer",
    "start": "118119",
    "end": "125610"
  },
  {
    "text": "which is a layer that processes data we're not so good at names for things I'm also going to talk about embedding",
    "start": "125610",
    "end": "132519"
  },
  {
    "text": "chromium and pretty much all of our GUI is rendered using open source chromium",
    "start": "132519",
    "end": "139950"
  },
  {
    "text": "embedded browser core and I'm talk about what that means in in a in our world I'm",
    "start": "139950",
    "end": "145720"
  },
  {
    "text": "gonna talk about instrumentation the kind of principles we use to measure how things are behaving how we actually",
    "start": "145720",
    "end": "151090"
  },
  {
    "text": "assess slowness if the user says this feels slow what does that actually mean how we record and playback what's going",
    "start": "151090",
    "end": "158380"
  },
  {
    "text": "on so we can actually generate reproducible and kind of in test cases",
    "start": "158380",
    "end": "163930"
  },
  {
    "text": "and also some of their current research we're doing into web assembly I know that really the one of the first times I",
    "start": "163930",
    "end": "170319"
  },
  {
    "text": "heard about webassembly was actually at this conference last year when addy Chabot was talking about cross-platform",
    "start": "170319",
    "end": "175389"
  },
  {
    "text": "development he grabbed a break talk including how you can actually incorporate C++ into into a browser",
    "start": "175389",
    "end": "182440"
  },
  {
    "text": "platform and it's something we've been looking at very very intently anism produced some very interesting and",
    "start": "182440",
    "end": "188380"
  },
  {
    "text": "intriguing results so far so am i very quickly I will white trousers in the 80s I learnt most of my kind of how",
    "start": "188380",
    "end": "196780"
  },
  {
    "start": "189000",
    "end": "280000"
  },
  {
    "text": "computers work from actually programming at very early sort of music sequences for live used in the university bar I",
    "start": "196780",
    "end": "202950"
  },
  {
    "text": "did some work in the games industry I then spent nine years doing kind of a",
    "start": "202950",
    "end": "209400"
  },
  {
    "text": "traditional full-stack which was basically from the firmware you know up through devoted drivers operating",
    "start": "209400",
    "end": "216819"
  },
  {
    "text": "systems port and compilers and one custom parallel processing hardware who",
    "start": "216819",
    "end": "221859"
  },
  {
    "text": "remembers the i860 probably nobody in this room it was a at the time it was he",
    "start": "221859",
    "end": "227229"
  },
  {
    "text": "was the fastest floating-point processor I've been involved in actually",
    "start": "227229",
    "end": "232910"
  },
  {
    "text": "up teams in some of our other offices around the world and this is our San Francisco meetup space that we have and",
    "start": "232910",
    "end": "239330"
  },
  {
    "text": "the last 20 years I've been working at Bloomberg primarily involved in the",
    "start": "239330",
    "end": "245480"
  },
  {
    "text": "desktop side actually which is very much the world of high-performance C++ and",
    "start": "245480",
    "end": "251600"
  },
  {
    "text": "nowadays integration with JavaScript as a scripting environment within the same processes and I'm a manager developer",
    "start": "251600",
    "end": "259549"
  },
  {
    "text": "still like to think of myself as a developer mentoring in in our offices and I'm in a very very passionate about",
    "start": "259549",
    "end": "266000"
  },
  {
    "text": "seeing the next generation do this stuff and more and you know improving",
    "start": "266000",
    "end": "271880"
  },
  {
    "text": "diversity and actually seeing us be more kind in this industry which I see a lot happening particularly at conferences",
    "start": "271880",
    "end": "277490"
  },
  {
    "text": "like this it's really really wonderful to see so a first stage Bloomberg terminal what is it",
    "start": "277490",
    "end": "282740"
  },
  {
    "start": "280000",
    "end": "341000"
  },
  {
    "text": "it's from the if you ask one of our product or salespeople it's a financial",
    "start": "282740",
    "end": "287900"
  },
  {
    "text": "business data analytics portal connecting the most influential people in this field what makes it interesting",
    "start": "287900",
    "end": "293780"
  },
  {
    "text": "that it's near real-time it's not just you know static financial reports and so on multi window multi-screen some",
    "start": "293780",
    "end": "300620"
  },
  {
    "text": "traders have 8 HD or 4k monitors a lot of pixels to update built using hybrid",
    "start": "300620",
    "end": "306080"
  },
  {
    "text": "desktop technologies a lot of C++ a lot of integration with JavaScript a lot of JavaScript code actually and embedding",
    "start": "306080",
    "end": "312860"
  },
  {
    "text": "chromium and the way we think of it is a cluster of 300,000 desktop computers that we can't see we can't touch we",
    "start": "312860",
    "end": "320210"
  },
  {
    "text": "really care about we really care about how they behave and they're not only running our software they're running other people's software as well so we",
    "start": "320210",
    "end": "327020"
  },
  {
    "text": "have to be really good citizens the restaurants not like programming an Xbox or a PlayStation where you can kind of take over the machine and nobody else",
    "start": "327020",
    "end": "333770"
  },
  {
    "text": "cares when you're when you're running a game and users expect it to be fast and reliable it's not cheap there it's a",
    "start": "333770",
    "end": "340580"
  },
  {
    "text": "high quality service and what's going on inside and our server side which I'm not",
    "start": "340580",
    "end": "345919"
  },
  {
    "start": "341000",
    "end": "396000"
  },
  {
    "text": "really going to talk about I'm just going to touch on it here we have obviously application engines they've",
    "start": "345919",
    "end": "351980"
  },
  {
    "text": "got a lot of our business logic and we have continuously running data services now some some data is actually prices",
    "start": "351980",
    "end": "358040"
  },
  {
    "text": "overnight to be ready for the next day and at one point we actually were using GPU farms to do some of this work",
    "start": "358040",
    "end": "363410"
  },
  {
    "text": "because if we if we for example ran a Monte Carlo simulation using traditional hardware it wouldn't",
    "start": "363410",
    "end": "368870"
  },
  {
    "text": "finish on time we just couldn't scale it so we actually found that you know GP for mortgage calculations kind of sounds",
    "start": "368870",
    "end": "374840"
  },
  {
    "text": "a little bit odd but actually it really it really helps us and then we have a real-time database which we call the",
    "start": "374840",
    "end": "380240"
  },
  {
    "text": "ticket plant which is the thing that is is feeding out real-time updates you know it can be up to 100 billion updates",
    "start": "380240",
    "end": "387860"
  },
  {
    "text": "a day sometimes 10 10 million updates in the in the first second of one of the",
    "start": "387860",
    "end": "393680"
  },
  {
    "text": "New York exchanges actually opening we have a kind of network to do what you deliver this data out to our clients",
    "start": "393680",
    "end": "400580"
  },
  {
    "text": "around the world and then we have these terminals running in this kind of environment this is the New York Stock",
    "start": "400580",
    "end": "407389"
  },
  {
    "text": "Exchange for example many banks and so on have you know have have these terminals so it's a pretty simple",
    "start": "407389",
    "end": "414979"
  },
  {
    "text": "architecture with a few you know a few little interesting details so if we you",
    "start": "414979",
    "end": "421160"
  },
  {
    "text": "know think of a typical impanel function so what you know somebody people like",
    "start": "421160",
    "end": "428060"
  },
  {
    "text": "the keyboard and in our world very much you know somebody will run what's called an in panel function there would be data coming from our servers to populate this",
    "start": "428060",
    "end": "434900"
  },
  {
    "text": "screen and then it will open a subscription that will then feed real-time data in a push fashion down to",
    "start": "434900",
    "end": "440419"
  },
  {
    "text": "the desktop and then much of the interaction will go on purely on the client side while real-time data is still flowing and then you know this you",
    "start": "440419",
    "end": "447800"
  },
  {
    "text": "know so we try and limit to our server interactions as much as we can but obviously when you try and do something new you're going to have to go back to",
    "start": "447800",
    "end": "453530"
  },
  {
    "text": "our servers on the on the back end looking inside this what's actually",
    "start": "453530",
    "end": "460039"
  },
  {
    "start": "456000",
    "end": "506000"
  },
  {
    "text": "going on there traditionally and this is where I did a lot of my own development and through the years was actually a",
    "start": "460039",
    "end": "465520"
  },
  {
    "text": "fully you know purely homegrown UI stack written in C++ which served us well for",
    "start": "465520",
    "end": "473030"
  },
  {
    "text": "quite a lot of years but it kind of you know every time you've got a roll out",
    "start": "473030",
    "end": "478099"
  },
  {
    "text": "new software to actually change anything it's not so great so we did introduce we actually got some PlayStation developers",
    "start": "478099",
    "end": "484250"
  },
  {
    "text": "on the team and they brought this little thing called Lua and very very lightweight scripting engine which is our first foray into I'm actually doing",
    "start": "484250",
    "end": "491690"
  },
  {
    "text": "scripting within the desktop product within the infrastructure layer and there again that served us quite well",
    "start": "491690",
    "end": "496700"
  },
  {
    "text": "but it was fast but relatively inflexible because everything was you know the the the look",
    "start": "496700",
    "end": "503419"
  },
  {
    "text": "and feel was compute coded in c++ for a long time more recently we've come up",
    "start": "503419",
    "end": "509180"
  },
  {
    "start": "506000",
    "end": "545000"
  },
  {
    "text": "with a much more flexible scalable model where we have multiple processes to start with and run indistinct",
    "start": "509180",
    "end": "514880"
  },
  {
    "text": "applications much more geared to modern hardware where you've got multiple cores in a machine and we've got a far more",
    "start": "514880",
    "end": "520339"
  },
  {
    "text": "flexible render subsystem and it kind of looks the same but that's intentional you know we now have the capability to",
    "start": "520339",
    "end": "527360"
  },
  {
    "text": "make it look like anything but for many of our users they basically wanted to look like a little 30 years ago you know",
    "start": "527360",
    "end": "533480"
  },
  {
    "text": "with more powerful analytics and and much wider breadth of data but you know",
    "start": "533480",
    "end": "539240"
  },
  {
    "text": "many many users still you know kind of like to use it in the way they have been using it before so if we if we dive a",
    "start": "539240",
    "end": "546680"
  },
  {
    "start": "545000",
    "end": "580000"
  },
  {
    "text": "little bit deeper what do we find inside one of these application container processes there's obvious um management",
    "start": "546680",
    "end": "553430"
  },
  {
    "text": "layer going on data subscription is you imagine as you might imagine there's going to be this thing called data layer",
    "start": "553430",
    "end": "559160"
  },
  {
    "text": "which I'm going to dive into in a moment an application engine and then beneath that kind of underpinning all of this we",
    "start": "559160",
    "end": "566839"
  },
  {
    "text": "have the embedded chromium subsystem which which comprises the browser core and the v8 JavaScript engine beneath all",
    "start": "566839",
    "end": "574880"
  },
  {
    "text": "this which is really very much where my my technology passion is is the the metrics subsystem so thinking about how",
    "start": "574880",
    "end": "582950"
  },
  {
    "start": "580000",
    "end": "666000"
  },
  {
    "text": "this whole thing fits together and people often ask you to know what just use the web for this you know surely the",
    "start": "582950",
    "end": "588709"
  },
  {
    "text": "web nowadays is is good enough the web is still primarily request response you know asynchronous Ajax related stuff is",
    "start": "588709",
    "end": "596329"
  },
  {
    "text": "obviously you know that you know surprise that's all initially and then became incredibly popular it still",
    "start": "596329",
    "end": "603399"
  },
  {
    "text": "currently doesn't beat you know being able to push real time data at the same time as handling a kind of request",
    "start": "603399",
    "end": "610550"
  },
  {
    "text": "response service and we're finding you know for some of our data processing we're not quite at the stage where a",
    "start": "610550",
    "end": "616130"
  },
  {
    "text": "browser is is fast and efficient enough for us you know typical Bloomberg user experience might involve you know 10 to",
    "start": "616130",
    "end": "622820"
  },
  {
    "text": "50,000 updates per second across you know 100 or sometimes 200 and top-level",
    "start": "622820",
    "end": "629089"
  },
  {
    "text": "windows on the desktop from only 2d grids and charts so you know good",
    "start": "629089",
    "end": "634160"
  },
  {
    "text": "GPU accelerators don't really help us that much lots of flying texts complex",
    "start": "634160",
    "end": "640699"
  },
  {
    "text": "visualizations in some cases but with live data and it's common to have you know orders of magnitude more rows",
    "start": "640699",
    "end": "646850"
  },
  {
    "text": "off-screen then you can actually see you know I might have a hundred thousand trade orders in my blotter but I only",
    "start": "646850",
    "end": "653089"
  },
  {
    "text": "want to see the 20 that are most relevant to me right right this second so there is a need for a high",
    "start": "653089",
    "end": "658550"
  },
  {
    "text": "performance native processing layer and alongside the the UI which is what we're",
    "start": "658550",
    "end": "664790"
  },
  {
    "text": "going to talk about next so data layer kind of fits in here in the in the",
    "start": "664790",
    "end": "670819"
  },
  {
    "start": "666000",
    "end": "711000"
  },
  {
    "text": "scheme of things what is it it's a pure a fully programmable fully implemented in C++ near real-time streaming data",
    "start": "670819",
    "end": "678740"
  },
  {
    "text": "transformation engine integrated with the other components and with Crimean",
    "start": "678740",
    "end": "684170"
  },
  {
    "text": "via via the a JavaScript engine much like a browser if you were if you're a",
    "start": "684170",
    "end": "689870"
  },
  {
    "text": "traditional web developer you might want to hook up to indexdb or local storage services which are implemented natively",
    "start": "689870",
    "end": "695750"
  },
  {
    "text": "in the browser but the things that you can actually access from your familiy javascript this the data script",
    "start": "695750",
    "end": "702350"
  },
  {
    "text": "subscription module brings in the the pushed real-time data into this into",
    "start": "702350",
    "end": "707870"
  },
  {
    "text": "this world based on programmable rules that can be set by our application teams so inside this this data layer component",
    "start": "707870",
    "end": "715130"
  },
  {
    "start": "711000",
    "end": "773000"
  },
  {
    "text": "well this is really just a set of building blocks that we can that an application developer can piece together",
    "start": "715130",
    "end": "720470"
  },
  {
    "text": "to form this the streaming pipeline so we have a thing called work sheet which is analogous to Excel basically if",
    "start": "720470",
    "end": "727579"
  },
  {
    "text": "you're you know you can you can express it so like expressions primarily you",
    "start": "727579",
    "end": "732589"
  },
  {
    "text": "know per column rather than individual cells or you can actually do it any way you like and it also supports hooking up",
    "start": "732589",
    "end": "739579"
  },
  {
    "text": "to the subscription layer we have obviously components they can do things like filtering sorting based on what can",
    "start": "739579",
    "end": "746779"
  },
  {
    "text": "be quite complex criteria and a component call the data source which is really a an engine that using templates",
    "start": "746779",
    "end": "755809"
  },
  {
    "text": "can transform numerical and string data into the formats you actually want to see on the screen with all the sort of",
    "start": "755809",
    "end": "761870"
  },
  {
    "text": "formatting rules that you might want to apply to actually get the data into the into the GUI so seeing you tend to set it up as a",
    "start": "761870",
    "end": "768270"
  },
  {
    "text": "rules-based system and let it run for your particular application use case you",
    "start": "768270",
    "end": "774420"
  },
  {
    "start": "773000",
    "end": "821000"
  },
  {
    "text": "can do more with it so for example you can combine data together you might have streaming data coming through your worksheet combined with some reference",
    "start": "774420",
    "end": "780510"
  },
  {
    "text": "data in another table that you want to show together within a particular piece",
    "start": "780510",
    "end": "786150"
  },
  {
    "text": "of the GUI or you might want to split it so you know the same data pipeline might be driving something like a you know a",
    "start": "786150",
    "end": "792330"
  },
  {
    "text": "trading blotter and a trading ticket and maybe some kind of chart so you can you",
    "start": "792330",
    "end": "797580"
  },
  {
    "text": "can hook these these things together in any way that makes sense you can build trees we have something called aggregation view which transform this",
    "start": "797580",
    "end": "803700"
  },
  {
    "text": "data into trees with partial sums and averages at each node and so on row history view for example if you if",
    "start": "803700",
    "end": "809220"
  },
  {
    "text": "you've got streaming news headlines coming in you might want to turn that into a 2d representation in as each",
    "start": "809220",
    "end": "816120"
  },
  {
    "text": "headline comes in so you can actually display that in some kind of scrolling URI with history roll back and so on to",
    "start": "816120",
    "end": "822810"
  },
  {
    "start": "821000",
    "end": "861000"
  },
  {
    "text": "actually program and understand this pipeline we have a thing called data now inspector which is actually written in",
    "start": "822810",
    "end": "829830"
  },
  {
    "text": "JavaScript and allows you to understand what's going on inside this pipeline and you think this looks kind of crazy for",
    "start": "829830",
    "end": "836490"
  },
  {
    "text": "this this kind of display but you know there's going to be lots of rules embedded here which allow this display",
    "start": "836490",
    "end": "843180"
  },
  {
    "text": "to handle all the nuances of different kinds of trades that may happen that allowed me to maybe drill down into this",
    "start": "843180",
    "end": "849120"
  },
  {
    "text": "system and do you know interesting things without having to go back to this to the server you know this is going to be a lot of state held in this in this",
    "start": "849120",
    "end": "857220"
  },
  {
    "text": "system in a specifically for this kind of application how do we make it fast",
    "start": "857220",
    "end": "863670"
  },
  {
    "start": "861000",
    "end": "908000"
  },
  {
    "text": "and how do we make it run efficiently in a small footprint and there's a few things we have something called datum",
    "start": "863670",
    "end": "871710"
  },
  {
    "text": "which I'm going to talk about for a moment we make use of polymorphic allocators now of course I'm from",
    "start": "871710",
    "end": "877140"
  },
  {
    "text": "Bloomberg I have to mention allocators sorry about that but there you know that it's something that that really helps us",
    "start": "877140",
    "end": "883290"
  },
  {
    "text": "and now that they are you know there's this new polymorphic alligator in the standard in C++ 17 it's it's something",
    "start": "883290",
    "end": "891390"
  },
  {
    "text": "that we really feel it's we really want to show the world how we how we've used them because it's actually very easy and",
    "start": "891390",
    "end": "898050"
  },
  {
    "text": "it for us it really really helps us some of the optimization tricks we actually use with the sort of within the",
    "start": "898050",
    "end": "903600"
  },
  {
    "text": "data layer infrastructure to to minimize CPU usage so why might we want around",
    "start": "903600",
    "end": "912089"
  },
  {
    "start": "908000",
    "end": "981000"
  },
  {
    "text": "custom data types within each grid cell because we have bridge like this now",
    "start": "912089",
    "end": "917190"
  },
  {
    "text": "something like this is a we call it a worksheet component you know a user might have 20 30 of these on the screen",
    "start": "917190",
    "end": "923820"
  },
  {
    "text": "at the same time probably not sorted by time because that's fairly useful useless but I thought I'd give you a an",
    "start": "923820",
    "end": "929970"
  },
  {
    "text": "idea of the data and what you can't really see here is there's probably you know that there's going to be tens of",
    "start": "929970",
    "end": "936120"
  },
  {
    "text": "thousands of rows of this data and maybe hundreds of columns because you know a",
    "start": "936120",
    "end": "941130"
  },
  {
    "text": "lot of the again the nuances of how this data needs to be displayed and the rules for processing it is often done in",
    "start": "941130",
    "end": "947310"
  },
  {
    "text": "off-screen equations so the numbers add up you know so if I've got for example it you know maybe a worst case 100,000",
    "start": "947310",
    "end": "954600"
  },
  {
    "text": "rows of data with 300 columns even if each cell is only represented by one double and it's gonna be more than that",
    "start": "954600",
    "end": "961380"
  },
  {
    "text": "usually because there's going to be other other data associated with each cell that would be 240 megabytes of data",
    "start": "961380",
    "end": "967279"
  },
  {
    "text": "and if you know our data type for a Cell doubled in size that's another two",
    "start": "967279",
    "end": "972750"
  },
  {
    "text": "hundred forty megabytes so it matters it matters you know paying attention to the",
    "start": "972750",
    "end": "978660"
  },
  {
    "text": "detail at this at this level so what is datum datum is a compact bit wise bit",
    "start": "978660",
    "end": "986160"
  },
  {
    "start": "981000",
    "end": "1028000"
  },
  {
    "text": "wise got people variant type a trivial unoptimized implementation would look",
    "start": "986160",
    "end": "991440"
  },
  {
    "text": "something like this where there's a union of all your different cut things it can be and something that allows you",
    "start": "991440",
    "end": "997079"
  },
  {
    "text": "to select which of those it currently is but me is that you there's quite a lot of waste in here partly through you know",
    "start": "997079",
    "end": "1005180"
  },
  {
    "text": "having that extra Union type field partly through alignment issues typically so for example you know this",
    "start": "1005180",
    "end": "1011420"
  },
  {
    "text": "is holding a double then it's you know is even if type is only a few bits this",
    "start": "1011420",
    "end": "1018440"
  },
  {
    "text": "thing is probably going to end up being 16 bytes in this kind of implementation because because of alignment so that's",
    "start": "1018440",
    "end": "1025339"
  },
  {
    "text": "as we've just shown that's not ideal so can we do better now you know ideally",
    "start": "1025339",
    "end": "1030380"
  },
  {
    "start": "1028000",
    "end": "1070000"
  },
  {
    "text": "we'd want to do something like this you know is there any way we can actually overlay the type somehow in into the",
    "start": "1030380",
    "end": "1036770"
  },
  {
    "text": "data and you think well that's not gonna work because you're going to be trashing your actual data by putting the the type",
    "start": "1036770",
    "end": "1042890"
  },
  {
    "text": "in there however you look at all these data types particularly on a 32-bit platform only double uses the whole",
    "start": "1042890",
    "end": "1052490"
  },
  {
    "text": "thing if the whole eight bytes so all the rest actually have a few bits pair",
    "start": "1052490",
    "end": "1058670"
  },
  {
    "text": "in the pointers obviously would only be 32-bit in the in this particular example",
    "start": "1058670",
    "end": "1063890"
  },
  {
    "text": "the others generally you can keep smaller than the full eight bytes so is",
    "start": "1063890",
    "end": "1068900"
  },
  {
    "text": "there anything we can do here well who remembers I should believe floating-point format from their their",
    "start": "1068900",
    "end": "1074450"
  },
  {
    "start": "1070000",
    "end": "1135000"
  },
  {
    "text": "days of at school or college all right so I kind of had to refresh myself on",
    "start": "1074450",
    "end": "1081920"
  },
  {
    "text": "this as well what's one of the interesting things about this you know I'm sure you'll remember you have the significant which is the numeric part",
    "start": "1081920",
    "end": "1088460"
  },
  {
    "text": "and then really the son of scale factor it's the exponent you know how you know where this is actually in reality and",
    "start": "1088460",
    "end": "1095150"
  },
  {
    "text": "the sign on the end just so happens there is it there's a whole range within the possible bit patterns here which",
    "start": "1095150",
    "end": "1101300"
  },
  {
    "text": "represent the signaling nan Valley so if you get a nan which means not a number it's the excuse why isn't this a number",
    "start": "1101300",
    "end": "1108410"
  },
  {
    "text": "what's what's the reason for this not being a number but in many real-world scenarios you don't really know need to",
    "start": "1108410",
    "end": "1114260"
  },
  {
    "text": "know that the reason I've got not a number you just need to know it's not a number because probably you're going to",
    "start": "1114260",
    "end": "1119660"
  },
  {
    "text": "display blank or error or something like that so if we sacrifice all the distinct",
    "start": "1119660",
    "end": "1125720"
  },
  {
    "text": "nan values except one which we used to represent generic cannot a number we can actually use these bit patterns or some",
    "start": "1125720",
    "end": "1132860"
  },
  {
    "text": "of them for our type if we're careful and it's kind of a little bit naughty code but it does work so we can",
    "start": "1132860",
    "end": "1138950"
  },
  {
    "start": "1135000",
    "end": "1218000"
  },
  {
    "text": "effectively remove a separate field from this from this Union and kind of overlay",
    "start": "1138950",
    "end": "1146450"
  },
  {
    "text": "these these distinct types into these spare values with inside double you",
    "start": "1146450",
    "end": "1152570"
  },
  {
    "text": "might be feeling this is disgusting it actually obviously you know if you",
    "start": "1152570",
    "end": "1158210"
  },
  {
    "text": "surround this by a serious set of unit tests and you know really test",
    "start": "1158210",
    "end": "1163880"
  },
  {
    "text": "everything out of it you can be pretty sure this is going to work you know and if that's exactly what we",
    "start": "1163880",
    "end": "1168950"
  },
  {
    "text": "we do it's a little bit more tricky because you kind of have to move everything else around so that you know things like you know the pointer kind of",
    "start": "1168950",
    "end": "1175460"
  },
  {
    "text": "aligns correctly so it doesn't actually trash those bits and so on but you can make it work and not only that you can",
    "start": "1175460",
    "end": "1181130"
  },
  {
    "text": "even end up storing music as a short string optimization if you've got",
    "start": "1181130",
    "end": "1186950"
  },
  {
    "text": "strings which are only up to six bytes you can actually accommodate those in line and actually we find in reality",
    "start": "1186950",
    "end": "1192620"
  },
  {
    "text": "there are a lot of strings in the world that are pretty short so you can actually keep this as a very very lightweight bitwise copyable small data",
    "start": "1192620",
    "end": "1200540"
  },
  {
    "text": "structure that kind of does most of the things a variant and do one of our colleague engineers from New York",
    "start": "1200540",
    "end": "1206930"
  },
  {
    "text": "actually gave a talk at CPP Khan last year which is which is here I'm happy to",
    "start": "1206930",
    "end": "1214070"
  },
  {
    "text": "send round links and to anybody who's interested afterwards so another thing",
    "start": "1214070",
    "end": "1219680"
  },
  {
    "start": "1218000",
    "end": "1299000"
  },
  {
    "text": "we do is we make use of PM are polymorphic allocators so for those that",
    "start": "1219680",
    "end": "1226190"
  },
  {
    "text": "don't know about this this thing yet we all know c++ is typical c++ memory use",
    "start": "1226190",
    "end": "1233510"
  },
  {
    "text": "is very dynamic you know the language supports incredibly powerful complex data structures which need to grow in",
    "start": "1233510",
    "end": "1240440"
  },
  {
    "text": "all kinds of different ways so heap operations are going to be inevitable so",
    "start": "1240440",
    "end": "1245720"
  },
  {
    "text": "I have an example here where I've just got it using a set the fact that the set",
    "start": "1245720",
    "end": "1251510"
  },
  {
    "text": "just has a you know a new unique unique entry for each value you give it I'm using it to count the number of unique",
    "start": "1251510",
    "end": "1257240"
  },
  {
    "text": "characters in a string that I give it the set itself is on the stack here that's great but it's going to reach out",
    "start": "1257240",
    "end": "1263960"
  },
  {
    "text": "to the heap in order to build its own internal data structures and in order to which is typically a tree and that could",
    "start": "1263960",
    "end": "1271400"
  },
  {
    "text": "potentially result in a in a large number of heap allocation which we all know can be can be slow heap allocations",
    "start": "1271400",
    "end": "1278240"
  },
  {
    "text": "sometimes lock sometimes they result in fragmentation you know they're very complex algorithms but they don't always",
    "start": "1278240",
    "end": "1284750"
  },
  {
    "text": "deliver data fast also they're not so great for cache access because heaps tend to give you pointers from one over",
    "start": "1284750",
    "end": "1291230"
  },
  {
    "text": "the place so how can we easily make you make more use of stack or contiguous heap in dynamic data structures and the",
    "start": "1291230",
    "end": "1297680"
  },
  {
    "text": "focus is on the easily here C++ standard library has always had",
    "start": "1297680",
    "end": "1304600"
  },
  {
    "text": "allocators the the so it's always been possible to do this it's just being one",
    "start": "1304600",
    "end": "1311300"
  },
  {
    "text": "of those situations where you end up getting those horrible long template errors which take your ages to to decode",
    "start": "1311300",
    "end": "1317300"
  },
  {
    "text": "it's it's never been a nice thing to do and and it's actually put a lot of people off I think actually really",
    "start": "1317300",
    "end": "1323300"
  },
  {
    "text": "really doing this and some of the problems are you know once you start to do this if you have two different custom",
    "start": "1323300",
    "end": "1329540"
  },
  {
    "text": "allocators a string type with declaring one allocator is a different type from one do declare with another type of",
    "start": "1329540",
    "end": "1334580"
  },
  {
    "text": "allocator which is annoying if often what you just want to do is say well here's a container you use this allocator for",
    "start": "1334580",
    "end": "1341180"
  },
  {
    "text": "everything inside you and it's it can be tricky to do that also you end up",
    "start": "1341180",
    "end": "1347240"
  },
  {
    "text": "proliferating template arguments kind of all the way down into your functions because you're now dealing with all these customer types everywhere not not",
    "start": "1347240",
    "end": "1355610"
  },
  {
    "text": "nice so c++ 17 STL supports an alternative approach which actually",
    "start": "1355610",
    "end": "1361340"
  },
  {
    "text": "bloomberg as you probably know have been involved in developing polymorphic memory sources so this is a custom",
    "start": "1361340",
    "end": "1367100"
  },
  {
    "text": "allocator that can be specified at runtime without it being part of the type so strings of your strings vectors",
    "start": "1367100",
    "end": "1374270"
  },
  {
    "text": "vectors maps are just maps regardless of allocator the allocator is automatically",
    "start": "1374270",
    "end": "1379490"
  },
  {
    "text": "propagated to nodes and the internal objects in the and these implementations",
    "start": "1379490",
    "end": "1384560"
  },
  {
    "text": "of the containers that support the polymorphic allocator which is which is",
    "start": "1384560",
    "end": "1390230"
  },
  {
    "text": "neat and you don't have to worry about this template proliferation all the time",
    "start": "1390230",
    "end": "1395590"
  },
  {
    "start": "1395000",
    "end": "1465000"
  },
  {
    "text": "so how does this work the c++ 17 STL",
    "start": "1395590",
    "end": "1401450"
  },
  {
    "text": "defines this interface for a new kind of allocator which you can very easily",
    "start": "1401450",
    "end": "1406460"
  },
  {
    "text": "build your own allocators from and all you really have to do is override du allocate doodie allocate and du is equal",
    "start": "1406460",
    "end": "1412910"
  },
  {
    "text": "du is equal just it's just allowed to allow you to say well my allocate if i if you use my allocator for allocating",
    "start": "1412910",
    "end": "1419900"
  },
  {
    "text": "some data you can use this allocate other allocator to free it it's a it's a it's a helpful thing I've never actually",
    "start": "1419900",
    "end": "1427070"
  },
  {
    "text": "needed that but it's a it's in the standard and for backward compatibility there is a thing",
    "start": "1427070",
    "end": "1433460"
  },
  {
    "text": "polymorphic allocator which is the thin wrapper around a pointer to PM RM resource for backward compatibility with",
    "start": "1433460",
    "end": "1441050"
  },
  {
    "text": "the old standards so you can actually plug this into the old containers if you",
    "start": "1441050",
    "end": "1447560"
  },
  {
    "text": "need to visual studio if you're using Windows have this in production from",
    "start": "1447560",
    "end": "1454540"
  },
  {
    "text": "2017 onwards and my understanding is Lib C has it in still in experimental that",
    "start": "1454540",
    "end": "1460940"
  },
  {
    "text": "information may be a little bit out of date now I'm primarily working on the Windows platform so let's see how this",
    "start": "1460940",
    "end": "1468620"
  },
  {
    "text": "thing actually works and also how easy it is to use I think that is maybe not the more important point that I'd like",
    "start": "1468620",
    "end": "1475670"
  },
  {
    "text": "to I'd like to make so here we are here's my new example code it's going to take this roughly 80 character string",
    "start": "1475670",
    "end": "1482990"
  },
  {
    "text": "and find out how many unique characters are in this so before we do that we kind",
    "start": "1482990",
    "end": "1491150"
  },
  {
    "start": "1488000",
    "end": "1511000"
  },
  {
    "text": "of need to be able to understand the behavior and observe it so I'd like to be able to write a custom allocator that",
    "start": "1491150",
    "end": "1498470"
  },
  {
    "text": "just counts for me hopefully this would one day be in the standard I'd like to",
    "start": "1498470",
    "end": "1504050"
  },
  {
    "text": "write a custom and okay to plug it into my set a runtime because that's easy now and then just see what happens so how do",
    "start": "1504050",
    "end": "1510020"
  },
  {
    "text": "I write that allocator this is basically it I just had to override to allocate and deallocate and",
    "start": "1510020",
    "end": "1515690"
  },
  {
    "text": "all I'm doing is keeping track of how much I've currently got allocated how many allocations I've done and what the",
    "start": "1515690",
    "end": "1522530"
  },
  {
    "text": "maximum size I ever hit was so my team do allocate and deallocate and function",
    "start": "1522530",
    "end": "1527570"
  },
  {
    "text": "so the actual allocations are just going to be whatever is passing by the parent which by default is going to be the",
    "start": "1527570",
    "end": "1533000"
  },
  {
    "text": "default allocator which eventually calls malloc and free so who wants to guess",
    "start": "1533000",
    "end": "1539480"
  },
  {
    "text": "how many times we're going to call malloc when I run this for this roughly",
    "start": "1539480",
    "end": "1545150"
  },
  {
    "text": "80 character string handy there one time any other one okay this is true this is",
    "start": "1545150",
    "end": "1556610"
  },
  {
    "text": "run with full optimization release mode build 86 allocations",
    "start": "1556610",
    "end": "1563179"
  },
  {
    "text": "surprising right Wow and but then you think about what actually what's going on every time I",
    "start": "1563179",
    "end": "1568710"
  },
  {
    "text": "pass a string in a string character in as we're to wait around I'm if it's a if",
    "start": "1568710",
    "end": "1574139"
  },
  {
    "text": "it's a unique character I'm having to add a new node within this tree inside the set and if the sets not being",
    "start": "1574139",
    "end": "1581279"
  },
  {
    "text": "particularly smart it's going to just call mal up to make space for that node each time round plus some extra",
    "start": "1581279",
    "end": "1587610"
  },
  {
    "text": "housekeeping - the times when we actually duplicate characters but yeah",
    "start": "1587610",
    "end": "1593429"
  },
  {
    "text": "it's surprising right so nice and neat code but not the best in terms of",
    "start": "1593429",
    "end": "1598740"
  },
  {
    "text": "performance in this case thirteen point three microseconds so introducing the",
    "start": "1598740",
    "end": "1604889"
  },
  {
    "start": "1601000",
    "end": "1874000"
  },
  {
    "text": "monotonic buffer resource which people might know as and there are sequential allocator there's all kinds of other",
    "start": "1604889",
    "end": "1610350"
  },
  {
    "text": "words for this and allocator that when you allocate it just advances a pointer",
    "start": "1610350",
    "end": "1616830"
  },
  {
    "text": "along any buffer that you give it when you di locate it does absolutely nothing so in this case when I a locate 24 bytes",
    "start": "1616830",
    "end": "1623370"
  },
  {
    "text": "I get a allocate another factor to I get B when I delete a I completely do",
    "start": "1623370",
    "end": "1629039"
  },
  {
    "text": "nothing when I ask for C 8 characters I get it from here as if a you were still in use very very fast can use lots of",
    "start": "1629039",
    "end": "1636659"
  },
  {
    "text": "memory but very very fast I can just plug this in and to see what happens so",
    "start": "1636659",
    "end": "1642720"
  },
  {
    "text": "if I if I plug this in very easy to cascade so I've now got my accounting",
    "start": "1642720",
    "end": "1648179"
  },
  {
    "text": "memory resource which is think the thing that really calls malloc and free is going to be plugged into my monotonic",
    "start": "1648179",
    "end": "1655169"
  },
  {
    "text": "buffer resource so when it needs memory it gets it from my counting allocated which gets it from the system and I'm",
    "start": "1655169",
    "end": "1660450"
  },
  {
    "text": "going to pass that to the set see what happens so hurrah we've done better eight allocations four",
    "start": "1660450",
    "end": "1667019"
  },
  {
    "text": "and a half times faster already the reason for this is that the monotonic buffer resource itself will grab data in",
    "start": "1667019",
    "end": "1675059"
  },
  {
    "text": "chunks it doesn't actually it basically says well I'm gonna have it you know a",
    "start": "1675059",
    "end": "1680360"
  },
  {
    "text": "reasonable size of buffer that I'm going to get i'm gonna i'm then going to use maybe i need to extend eventually and it",
    "start": "1680360",
    "end": "1686639"
  },
  {
    "text": "would end up extending eight times in this was seven more times in in this case so this is a great improvement",
    "start": "1686639",
    "end": "1691889"
  },
  {
    "text": "we're still eventually going to the heap eight times but it's a it's a great improvement can we do even better well",
    "start": "1691889",
    "end": "1698610"
  },
  {
    "text": "based on the kind of work we know we're going to be doing let's actually give it a bit of a hint and so well actually",
    "start": "1698610",
    "end": "1704100"
  },
  {
    "text": "what you get when you first start up on a sunny buffer resource why not grab 4k of data yes there's a little favor we",
    "start": "1704100",
    "end": "1710760"
  },
  {
    "text": "just giving you the favor so now what happens we run this one allocation it",
    "start": "1710760",
    "end": "1715890"
  },
  {
    "text": "goes for that 4k that's all it needs so we've shaved off a little bit more time now you think we can do even better",
    "start": "1715890",
    "end": "1724040"
  },
  {
    "text": "any suggestions at the back there I line",
    "start": "1724040",
    "end": "1734070"
  },
  {
    "text": "it I think it's probably going to be aligned anyway actually I know Victor",
    "start": "1734070",
    "end": "1741180"
  },
  {
    "text": "know the answer I go behind right great so if we use the stack you think trivial",
    "start": "1741180",
    "end": "1749190"
  },
  {
    "text": "change right it's going to make much difference let's run it zero allocations",
    "start": "1749190",
    "end": "1755010"
  },
  {
    "text": "because the monitor clear buffer resource has no idea where that date has come from you know if you if you give it",
    "start": "1755010",
    "end": "1761700"
  },
  {
    "text": "a size it'll allocate some if you give it a buffer it'll just use it so we give it a buffer to other happy that buffer",
    "start": "1761700",
    "end": "1766740"
  },
  {
    "text": "is it would extend if it needs to but in this particular and hopefully the common use case it literally uses the stack",
    "start": "1766740",
    "end": "1775010"
  },
  {
    "text": "allocated on the stack is really fast you've literally move the stack pointer",
    "start": "1775010",
    "end": "1780320"
  },
  {
    "text": "this is local to the thread so there's no need for any thread local storage or locking or anything like that this is",
    "start": "1780320",
    "end": "1786420"
  },
  {
    "text": "literally the stack so if you know what your code is doing something like a",
    "start": "1786420",
    "end": "1792270"
  },
  {
    "text": "monotonic buffer resource is really really helpful you can get it wrong you know you can easily end up you know",
    "start": "1792270",
    "end": "1798330"
  },
  {
    "text": "looping with one of these things and you end up using huge amounts of memory but if you really understand what your algorithms are doing and then this can",
    "start": "1798330",
    "end": "1805290"
  },
  {
    "text": "really help but the point I'm really trying to make here is not so much monotonic buffer resource which is a",
    "start": "1805290",
    "end": "1810960"
  },
  {
    "text": "great tool but the fact it's so easy it's so easy to plug these allocators in question just there the the monotonic",
    "start": "1810960",
    "end": "1821250"
  },
  {
    "text": "buffer resource itself will extend so if if you yeah it will go LLL go to heap",
    "start": "1821250",
    "end": "1826670"
  },
  {
    "text": "well it will go to its parent allocator so you could cascade things in fact example here is actually these are these",
    "start": "1826670",
    "end": "1835080"
  },
  {
    "text": "are the the pre-canned allocators you get the null one is interesting which is great for tests if you want to prove",
    "start": "1835080",
    "end": "1841350"
  },
  {
    "text": "that your your code is not making any real heap allocation to plug in a null memory resource and it will assert if if",
    "start": "1841350",
    "end": "1847650"
  },
  {
    "text": "you try and do any but they're also pools which can be thread safe or not you know here I'm actually building a",
    "start": "1847650",
    "end": "1853050"
  },
  {
    "text": "heat effectively at what a pool on the stack so here's my monotonic buffer resource using the stack and then I'm",
    "start": "1853050",
    "end": "1859920"
  },
  {
    "text": "actually cascading and unsynchronized pool because he doesn't need any thread safety for data within this thread on",
    "start": "1859920",
    "end": "1867540"
  },
  {
    "text": "top of that so it's kind of a stack based pool requiring no locks but probably lots of memory so interesting",
    "start": "1867540",
    "end": "1874130"
  },
  {
    "start": "1874000",
    "end": "1891000"
  },
  {
    "text": "so try it you know it's I think it's a it's a real refreshing update to what",
    "start": "1874130",
    "end": "1880140"
  },
  {
    "text": "we've had for for a long time so I'm now going to quickly talk about how we make",
    "start": "1880140",
    "end": "1885540"
  },
  {
    "text": "data layer algorithms themselves run a little bit faster using a few techniques",
    "start": "1885540",
    "end": "1890910"
  },
  {
    "text": "so imagine a worksheet and we're going to be currently displaying these three",
    "start": "1890910",
    "end": "1897080"
  },
  {
    "text": "rows on the screen so as these rows update obviously we're going to have to do any calculation and formatting and",
    "start": "1897080",
    "end": "1903630"
  },
  {
    "text": "get them on the screen if the scroll position changes we're going to only throw the the rows we need to the",
    "start": "1903630",
    "end": "1911190"
  },
  {
    "text": "display the concept of virtual grids is known pretty well you know that's how many UI systems work however what",
    "start": "1911190",
    "end": "1918480"
  },
  {
    "start": "1917000",
    "end": "1968000"
  },
  {
    "text": "happens if we sort the change column over here we only need these three",
    "start": "1918480",
    "end": "1925680"
  },
  {
    "text": "security and price rows but knowing which three rows we needs depends on us",
    "start": "1925680",
    "end": "1931760"
  },
  {
    "text": "evaluating the entire sorted column so we have this concept not only of windowing rows but actually having non",
    "start": "1931760",
    "end": "1939630"
  },
  {
    "text": "view portable columns so there are the minimum set of the columns that you need to fully evaluate in order to decide",
    "start": "1939630",
    "end": "1946500"
  },
  {
    "text": "what should be on the screen so this kind of you know collection of we call",
    "start": "1946500",
    "end": "1952080"
  },
  {
    "text": "them windows within the data allow us to still doing minimum amounts of work to",
    "start": "1952080",
    "end": "1959250"
  },
  {
    "text": "update the screen obviously in a small example like this it doesn't make much difference but once you've got you know huge",
    "start": "1959250",
    "end": "1964920"
  },
  {
    "text": "numbers of columns and large numbers of rows it really really helps something else that we we do is we try",
    "start": "1964920",
    "end": "1971370"
  },
  {
    "start": "1968000",
    "end": "2003000"
  },
  {
    "text": "and not do work within worksheet expressions as much as possible so you",
    "start": "1971370",
    "end": "1977730"
  },
  {
    "text": "know and you find that actually the kind of expressions people put in these worksheets particular application teams they're not just you know like this one",
    "start": "1977730",
    "end": "1984840"
  },
  {
    "text": "asked - beard for example maybe it should be past - beard that's right they",
    "start": "1984840",
    "end": "1991620"
  },
  {
    "text": "can be machine generated you know expressions with tens of thousands of characters in them sometimes it's we've",
    "start": "1991620",
    "end": "1998280"
  },
  {
    "text": "been quite surprised how enterprising some of their application teams can be so what we'd like to do is actually just",
    "start": "1998280",
    "end": "2005210"
  },
  {
    "text": "mark cells dirty until they're actually required so in these two cells update in the bid column we mark their",
    "start": "2005210",
    "end": "2011780"
  },
  {
    "text": "dependencies dirty but we don't actually evaluate them until we really need them so at some point the UI is well the you",
    "start": "2011780",
    "end": "2018800"
  },
  {
    "text": "arts going to be told there's an update it's going to come back and say that the rows and columns it needs and in this",
    "start": "2018800",
    "end": "2024770"
  },
  {
    "text": "case it's only going to calculate the top one it does actually need the next one so we have a system where we we try",
    "start": "2024770",
    "end": "2032510"
  },
  {
    "text": "and minimize the amount of work we do all the time another thing we do is update coalescing so you can imagine if",
    "start": "2032510",
    "end": "2038360"
  },
  {
    "start": "2034000",
    "end": "2100000"
  },
  {
    "text": "this is a trading blotter not only a price is going to be changing but new orders are going to be coming in all the",
    "start": "2038360",
    "end": "2043640"
  },
  {
    "text": "time resulting in row inserts and deletes and moving things around and so on so here we've got maybe an important",
    "start": "2043640",
    "end": "2051378"
  },
  {
    "text": "order coming to the top we're going to insert a new one that's coming in we're gonna update the values in that one",
    "start": "2051379",
    "end": "2057260"
  },
  {
    "text": "we're going to now delete two row because it's become stale maybe and this is going to obviously be a lot more",
    "start": "2057260",
    "end": "2063290"
  },
  {
    "text": "complicated there's a very simple example but they're all going to be these continuous stream with operations going on if we choose to sort of package",
    "start": "2063290",
    "end": "2071658"
  },
  {
    "text": "some of them together we can actually do more efficient operations and in this",
    "start": "2071659",
    "end": "2077510"
  },
  {
    "text": "particular case we could just the result of those four operations can be more",
    "start": "2077510",
    "end": "2083510"
  },
  {
    "text": "simply done by just deleting one row and certainly new your own updating it and",
    "start": "2083510",
    "end": "2088929"
  },
  {
    "text": "so we've actually in this case just reduce the number of operations by one in reality it can be",
    "start": "2088929",
    "end": "2097289"
  },
  {
    "text": "large percentage of operations can be coalesced and reduced I think okay so",
    "start": "2097289",
    "end": "2103500"
  },
  {
    "start": "2100000",
    "end": "2109000"
  },
  {
    "text": "far everybody's still still here embedding chromium I'm going to talk about just for a moment going back to",
    "start": "2103500",
    "end": "2111000"
  },
  {
    "start": "2109000",
    "end": "2119000"
  },
  {
    "text": "the the picture of the application container process what's actually going",
    "start": "2111000",
    "end": "2119069"
  },
  {
    "start": "2119000",
    "end": "2284000"
  },
  {
    "text": "on in here so we have these sort of fundamental pieces as I said we used to",
    "start": "2119069",
    "end": "2124770"
  },
  {
    "text": "have this sort of homegrown C++ UI it was very fast and efficient but it needed programmers to change anything in",
    "start": "2124770",
    "end": "2130500"
  },
  {
    "text": "it and you could kind of tell that the UI was built by programmers it wasn't prettiest thing in the world it didn't",
    "start": "2130500",
    "end": "2138119"
  },
  {
    "text": "have any of the attention to detail that the graphics designers and proper UX experts can bring to things",
    "start": "2138119",
    "end": "2144500"
  },
  {
    "text": "inventing chromium brings us the full richness of html5 css3 and JavaScript so",
    "start": "2144500",
    "end": "2149880"
  },
  {
    "text": "graphic designers can now use tools standard tools to actually build pieces of the of the UI even though this isn't",
    "start": "2149880",
    "end": "2156599"
  },
  {
    "text": "actually a web app and it's not just looking for what actually behaviors so nice rollover effects and so on and in",
    "start": "2156599",
    "end": "2164039"
  },
  {
    "text": "animations and all these kind of things if they're needed we get a few things for free as well the renderer itself",
    "start": "2164039",
    "end": "2169980"
  },
  {
    "text": "building to chromium supports hardware acceleration GPU acceleration which is a nice thing not to have to implement",
    "start": "2169980",
    "end": "2175650"
  },
  {
    "text": "yourself things like accessibility integration you know there are platforms within Windows in our case to allow third-party",
    "start": "2175650",
    "end": "2183660"
  },
  {
    "text": "tools to that are there for example for people who have slight difficulties to",
    "start": "2183660",
    "end": "2189720"
  },
  {
    "text": "you know to read out the text in the UI you know in a way that allows them to navigate an even trade and by embedding",
    "start": "2189720",
    "end": "2199170"
  },
  {
    "text": "chromium and using that UI layer we get a lot of that for free which again is a",
    "start": "2199170",
    "end": "2204180"
  },
  {
    "text": "really really nice thing to to have to do it's amazing seeing somebody actually",
    "start": "2204180",
    "end": "2209849"
  },
  {
    "text": "trading with the screen switched off absolutely wonderful and to see that and",
    "start": "2209849",
    "end": "2215730"
  },
  {
    "text": "you know people who have they would typically have real challenges can can use our system in that and that sort of way",
    "start": "2215730",
    "end": "2222049"
  },
  {
    "text": "javascript is required to update the Dom you know we tried when we were first experimenting you know directly going in",
    "start": "2222049",
    "end": "2228299"
  },
  {
    "text": "C++ straight into which kind of works but you end up with the consistent and inconsistent view of",
    "start": "2228299",
    "end": "2234709"
  },
  {
    "text": "the of the UI world from your JavaScript and it just got us into into a big mess",
    "start": "2234709",
    "end": "2240019"
  },
  {
    "text": "so we settled on it is design we're really you have to go via JavaScript to",
    "start": "2240019",
    "end": "2245150"
  },
  {
    "text": "get to the DOM and you might think oh that's going to be really slow but actually I as a super-fast",
    "start": "2245150",
    "end": "2251930"
  },
  {
    "text": "programmer I'm continually surprised how fast modern JavaScript can run in one of",
    "start": "2251930",
    "end": "2257599"
  },
  {
    "text": "these modern engines it's pretty impressive the jitters in there sometimes do you know we often do",
    "start": "2257599",
    "end": "2265279"
  },
  {
    "text": "surprisingly well and it's because they have a lot more context than maybe a compiler or C++ might have a compile",
    "start": "2265279",
    "end": "2271009"
  },
  {
    "text": "time like you know they can really understand what really hot code right now and and optimize incredibly well for",
    "start": "2271009",
    "end": "2278989"
  },
  {
    "text": "that you know so yeah the what the world has been changing it's it's really interesting so",
    "start": "2278989",
    "end": "2287559"
  },
  {
    "start": "2284000",
    "end": "2327000"
  },
  {
    "text": "this is kind of how the whole thing fits together we still have a native C++ layer but some bindings that allow us to",
    "start": "2287559",
    "end": "2294650"
  },
  {
    "text": "efficiently and plug in to JavaScript we also have some extra services that allow",
    "start": "2294650",
    "end": "2300469"
  },
  {
    "text": "us to do screen management to access you know in a protected way some system",
    "start": "2300469",
    "end": "2306440"
  },
  {
    "text": "resources that we do want to expose into the JavaScript world and you know we",
    "start": "2306440",
    "end": "2311989"
  },
  {
    "text": "actually have you know various kind of protection levels to you know allow us to control actually what is what is",
    "start": "2311989",
    "end": "2318529"
  },
  {
    "text": "allowed to be used plus the fact that the embedding engine itself supports you",
    "start": "2318529",
    "end": "2323869"
  },
  {
    "text": "know proper sandboxing on to the OS so what are some of the challenges to make",
    "start": "2323869",
    "end": "2330349"
  },
  {
    "start": "2327000",
    "end": "2433000"
  },
  {
    "text": "this work really really well as I said we kind of have to use the Dom to update JavaScript to write efficient JavaScript",
    "start": "2330349",
    "end": "2337180"
  },
  {
    "text": "we actually use tools to help us a lot we have booting to our CI and deployment",
    "start": "2337180",
    "end": "2343130"
  },
  {
    "text": "systems pipelines that actually do a lot of pre optimizing of JavaScript using an",
    "start": "2343130",
    "end": "2348319"
  },
  {
    "text": "industry an industry standard tooling module inlining minification dead code elimination and so on get rid of all the",
    "start": "2348319",
    "end": "2354799"
  },
  {
    "text": "comments you know you don't need you to keep remembering that this stuff is actually gonna be interpreted when it first hits the hits the the desktop",
    "start": "2354799",
    "end": "2362059"
  },
  {
    "text": "system and you know introducing discipline to JavaScript really helps when building a JavaScript infrastructure layer you know",
    "start": "2362059",
    "end": "2369060"
  },
  {
    "text": "something that we actually sponsored with the ECMO standard committee is private class rules in JavaScript so",
    "start": "2369060",
    "end": "2376440"
  },
  {
    "text": "having the concept of private data in your in your outer ap is that actually",
    "start": "2376440",
    "end": "2382830"
  },
  {
    "text": "anywhere within JavaScript but we you know so that people can't abuse the API is that you you give them quite a",
    "start": "2382830",
    "end": "2389070"
  },
  {
    "text": "contentious subject you know some JavaScript developers want to do anything in JavaScript but actually",
    "start": "2389070",
    "end": "2394350"
  },
  {
    "text": "having this support in the language and is really really helping us and also we are migrating to typescript which just",
    "start": "2394350",
    "end": "2401430"
  },
  {
    "text": "brings in a kind of an infrastructure style discipline to writing a script style code and now that can leverage",
    "start": "2401430",
    "end": "2408120"
  },
  {
    "text": "these natively supported private class fields and that's something that we're actually contributing back to the to the",
    "start": "2408120",
    "end": "2415080"
  },
  {
    "text": "the the the groups are build and maintain the tools as I say javascript",
    "start": "2415080",
    "end": "2420480"
  },
  {
    "text": "is actually pretty fast so often the efficient needs the the focus needs to be on efficient marshalling to and from JavaScript so we",
    "start": "2420480",
    "end": "2428100"
  },
  {
    "text": "spent a lot of time making things like our datum data type Marshall very efficiently across that boundary",
    "start": "2428100",
    "end": "2434930"
  },
  {
    "start": "2433000",
    "end": "2522000"
  },
  {
    "text": "minimizing GC you know welcome to GC for anybody who's you know only does C++",
    "start": "2434930",
    "end": "2440190"
  },
  {
    "text": "it's a whole interesting new world jaesi algorithms nowadays are actually",
    "start": "2440190",
    "end": "2446790"
  },
  {
    "text": "garbage collection by the way and for anybody who doesn't know that terminology has really evolved over the",
    "start": "2446790",
    "end": "2454230"
  },
  {
    "text": "years very sophisticated now JavaScript engines will do a lot of the scanning phase actually in background threads but",
    "start": "2454230",
    "end": "2461190"
  },
  {
    "text": "at some point we'll need to synchronize with the main thread doing the the JavaScript work and you really want to",
    "start": "2461190",
    "end": "2466560"
  },
  {
    "text": "be careful particularly this is the UI thread to not have you know a stutter",
    "start": "2466560",
    "end": "2472890"
  },
  {
    "text": "enos on the screen just because GC is happening so really the objective is to minimize GC it doesn't always just",
    "start": "2472890",
    "end": "2480540"
  },
  {
    "text": "happen when your JavaScript heap is full and it needs to actually free space these engines tend to want to do GC",
    "start": "2480540",
    "end": "2489180"
  },
  {
    "text": "anytime they feel oh there's some cleanup to be done because I've got a lot of temporary objects so and we can",
    "start": "2489180",
    "end": "2494340"
  },
  {
    "text": "find that even in efficient code that kind of goes in and out of the hot sort of hot path and gets cheated and D",
    "start": "2494340",
    "end": "2500760"
  },
  {
    "text": "opted and back and forth results in extra GC because objects containing code",
    "start": "2500760",
    "end": "2506730"
  },
  {
    "text": "are being continually created and destroyed so something you have to be really really watchful of and often you",
    "start": "2506730",
    "end": "2513660"
  },
  {
    "text": "know the sign of an efficient running system is when GC is low and even if you're not using that much memory so",
    "start": "2513660",
    "end": "2520440"
  },
  {
    "text": "it's it's a very interesting measurement life cycle obviously with GC you've got",
    "start": "2520440",
    "end": "2526740"
  },
  {
    "start": "2522000",
    "end": "2553000"
  },
  {
    "text": "non-deterministic life cycle of objects if you're right in pure JavaScript the",
    "start": "2526740",
    "end": "2532619"
  },
  {
    "text": "engine handles it really really well however we've got this hybrid model where you know many of our JavaScript",
    "start": "2532619",
    "end": "2538829"
  },
  {
    "text": "objects are going to be managing native C++ objects and of course life cycle has",
    "start": "2538829",
    "end": "2545940"
  },
  {
    "text": "to be preserved across that boundary for things to work so what we find is that",
    "start": "2545940",
    "end": "2551220"
  },
  {
    "text": "native C++ objects can end up living much longer than we might expect them to so here's my application I'm gonna you",
    "start": "2551220",
    "end": "2559140"
  },
  {
    "start": "2558000",
    "end": "2584000"
  },
  {
    "text": "know run run it through once produce some stuff on the screen maybe I'm going to have a JavaScript proxy object that",
    "start": "2559140",
    "end": "2564960"
  },
  {
    "text": "is backing my native C++ data layer pipeline for example now I'm going to",
    "start": "2564960",
    "end": "2571020"
  },
  {
    "text": "you know click on a button and because I'm running maybe a react style model where you know changing a little piece",
    "start": "2571020",
    "end": "2577589"
  },
  {
    "text": "of data rebuilds a whole chunk of the the the object tree that I'm going to be",
    "start": "2577589",
    "end": "2583200"
  },
  {
    "text": "rendering so we get a new object created backing and another native data layer",
    "start": "2583200",
    "end": "2589859"
  },
  {
    "start": "2584000",
    "end": "2691000"
  },
  {
    "text": "pipeline which might be quite big we're at the mercy of the GC engine now you know the old object which we no longer",
    "start": "2589859",
    "end": "2595829"
  },
  {
    "text": "need may still exist you know there's no reason there's no guarantee that the the",
    "start": "2595829",
    "end": "2601740"
  },
  {
    "text": "JavaScript engine is going to destroy that first object so we may end up using",
    "start": "2601740",
    "end": "2607020"
  },
  {
    "text": "much more memory on the nature side than we we want to ideally so what can we do",
    "start": "2607020",
    "end": "2612809"
  },
  {
    "text": "about that something we actually borrowed from C sharp is the dispose pattern where you can introduce",
    "start": "2612809",
    "end": "2618799"
  },
  {
    "text": "deterministic lifecycle of expensive components even in a GC environment so",
    "start": "2618799",
    "end": "2625530"
  },
  {
    "text": "what I would do is actually write in my code in JavaScript at the point where I know I'm finish",
    "start": "2625530",
    "end": "2630690"
  },
  {
    "text": "with an object even though it may still exist for longer call dispose which we can proxy through to actually you know",
    "start": "2630690",
    "end": "2637440"
  },
  {
    "text": "releasing the final reference on to our underlying C++ object and actually more deterministically control the lifecycle",
    "start": "2637440",
    "end": "2643800"
  },
  {
    "text": "of things happening down at this level some purists say you know you shouldn't need that level of detail we're",
    "start": "2643800",
    "end": "2650460"
  },
  {
    "text": "engineers you know sometimes you have to make these compromises and move away from the sort of the purest approach you",
    "start": "2650460",
    "end": "2656910"
  },
  {
    "text": "know we've actually talked to the the teams at Google about you know is the more country you know can we give a hint",
    "start": "2656910",
    "end": "2662579"
  },
  {
    "text": "to an object that it really it it's expensive it although it's a cheap",
    "start": "2662579",
    "end": "2668310"
  },
  {
    "text": "JavaScript object it backs something expensive but generally the solutions",
    "start": "2668310",
    "end": "2674250"
  },
  {
    "text": "we've come up with have not really been general enough to actually fix into the to the engine so this is the the sort of",
    "start": "2674250",
    "end": "2679950"
  },
  {
    "text": "current approach we we take which to be honest works pretty well for us so",
    "start": "2679950",
    "end": "2686150"
  },
  {
    "text": "instrumentation are we doing for time a little bit left getting towards the end",
    "start": "2686150",
    "end": "2692450"
  },
  {
    "text": "it's really important for us to understand what's actually going on within this when in this system and",
    "start": "2692450",
    "end": "2698130"
  },
  {
    "text": "there are very you know obvious things we can measure we can measure CPU load we can measure memory utilization the",
    "start": "2698130",
    "end": "2703460"
  },
  {
    "text": "slightly harder things to understand or measure are things like Headroom use or",
    "start": "2703460",
    "end": "2709920"
  },
  {
    "text": "it particularly user responsiveness what it how does this system actually feel to to an end user and these are some of the",
    "start": "2709920",
    "end": "2718530"
  },
  {
    "text": "things we we do so CPU load pretty obvious we can ask the OS how busy a",
    "start": "2718530",
    "end": "2724380"
  },
  {
    "text": "process is how busy a thread is we also have this concept of busyness which is really and using elapsed time",
    "start": "2724380",
    "end": "2730770"
  },
  {
    "text": "measurements how long we spend doing a certain types of activity during a sample period you know how long do we",
    "start": "2730770",
    "end": "2737430"
  },
  {
    "text": "spend actually in the in the chromium render how long do we spend processing",
    "start": "2737430",
    "end": "2742800"
  },
  {
    "text": "incoming data how long do you spend updating a updating a worksheet calculation and together these really",
    "start": "2742800",
    "end": "2749819"
  },
  {
    "text": "give us a good indication of where this isn't spending its time even when you can't afford to run a profiler in a full",
    "start": "2749819",
    "end": "2757829"
  },
  {
    "text": "profiler and also give us a good indication of spare capacity it also",
    "start": "2757829",
    "end": "2763319"
  },
  {
    "text": "tells us things you know high busyness using a lap time but low load indicates weight or even time slicing you know we might be",
    "start": "2763319",
    "end": "2769980"
  },
  {
    "text": "running on a on a VM which is you know as you know there may be at the end",
    "start": "2769980",
    "end": "2775319"
  },
  {
    "text": "that's supplying you know eight users but it's maybe it's only got four cores you know so something's got to give",
    "start": "2775319",
    "end": "2780390"
  },
  {
    "text": "there and we can we can actually measure these these kind of things and these are the sort of tools you know I would use",
    "start": "2780390",
    "end": "2786390"
  },
  {
    "start": "2783000",
    "end": "2800000"
  },
  {
    "text": "to look at my own terminal to understand how its behaving the white line is overall CPU load on my PC you can see",
    "start": "2786390",
    "end": "2793230"
  },
  {
    "text": "why I ran a compiled the software this is this is the Bloomberg app you know",
    "start": "2793230",
    "end": "2798930"
  },
  {
    "text": "bubbling away at the bottom and this is telling me you know a breakdown of my different layers in my in my Bloomberg",
    "start": "2798930",
    "end": "2806519"
  },
  {
    "start": "2800000",
    "end": "2842000"
  },
  {
    "text": "system so this is the kind of core manager process in grey this blue thing is is instant bloom like it's an",
    "start": "2806519",
    "end": "2812460"
  },
  {
    "text": "interesting messaging chat system which we originally built for our own use showed it to clients they loved it and",
    "start": "2812460",
    "end": "2818940"
  },
  {
    "text": "we now see clients with three or four hundred chat rooms open at a time actually trading through through the chat room it's because it's considered",
    "start": "2818940",
    "end": "2826230"
  },
  {
    "text": "so reliable there's this community at 300,000 people that can instantly chat to each other within this secure",
    "start": "2826230",
    "end": "2832680"
  },
  {
    "text": "environment and everything is you know compliant you know everything's logged you know so it's a in a very well",
    "start": "2832680",
    "end": "2840329"
  },
  {
    "text": "respected system so another view which is kind of interesting is a 3d view I",
    "start": "2840329",
    "end": "2846299"
  },
  {
    "start": "2842000",
    "end": "2881000"
  },
  {
    "text": "asked the team to build this and they said why Jim what 3d it's just purely gratuitous right never going to be",
    "start": "2846299",
    "end": "2853019"
  },
  {
    "text": "useful but actually I find it is useful you know the green here is our main process the light blue is light instant",
    "start": "2853019",
    "end": "2858420"
  },
  {
    "text": "messaging process there's a few other background things churning away for a while and then I can see these other little things that pop up occasionally",
    "start": "2858420",
    "end": "2864599"
  },
  {
    "text": "which a little in some cases of the management tasks that it may be making sure that my JavaScript is up-to-date",
    "start": "2864599",
    "end": "2870359"
  },
  {
    "text": "there's no there's been no you know emergency fixed release or you know",
    "start": "2870359",
    "end": "2875670"
  },
  {
    "text": "other kind of things that wake up which maybe I would never really notice in a 2d view and equally we can uh we can",
    "start": "2875670",
    "end": "2883289"
  },
  {
    "start": "2881000",
    "end": "2950000"
  },
  {
    "text": "look at memory memory is really critical for us not only overall memory usage on the machine but per process you know we",
    "start": "2883289",
    "end": "2890970"
  },
  {
    "text": "tend to run 32-bit processes people people think why why partly is because",
    "start": "2890970",
    "end": "2896160"
  },
  {
    "text": "of the the size of these grid cell objects you know if we move to",
    "start": "2896160",
    "end": "2902190"
  },
  {
    "text": "to a 64-bit platform suddenly pointers get a lot bigger so if these these",
    "start": "2902190",
    "end": "2908730"
  },
  {
    "text": "objects like the datums are having to now sometimes hold pointers - long strings suddenly the thing has got a lot",
    "start": "2908730",
    "end": "2915430"
  },
  {
    "text": "bigger and which may not be an issue you know we can't control how much RAM our clients have on their desktops so we",
    "start": "2915430",
    "end": "2920980"
  },
  {
    "text": "have to be quite conservative if you know we'd love to go 64-bit throughout and I really hope we'll get that",
    "start": "2920980",
    "end": "2925990"
  },
  {
    "text": "opportunity we might have to make some tricks like maybe you know assuming that we don't use the full 8 8 byte address",
    "start": "2925990",
    "end": "2932920"
  },
  {
    "text": "space in pointers which not sure I want to do that that might be even more",
    "start": "2932920",
    "end": "2938260"
  },
  {
    "text": "extreme than you know reusing the unused bits of a double but wait you know we'll",
    "start": "2938260",
    "end": "2943359"
  },
  {
    "text": "see we'll see what happens there but yeah so we tend to be 32-bit which means we have a limited address space for each",
    "start": "2943359",
    "end": "2949690"
  },
  {
    "text": "each process this I call this the cake view so you can kind of see how memory",
    "start": "2949690",
    "end": "2955900"
  },
  {
    "start": "2950000",
    "end": "2980000"
  },
  {
    "text": "usage grows and you think harm somebody must be leaking here but actually over the day I'm going to be caching more and more data so this may be actually be",
    "start": "2955900",
    "end": "2964150"
  },
  {
    "text": "normal graze I management layer blue is our instant messaging system the blue and the yellow and Victoria the orange",
    "start": "2964150",
    "end": "2970420"
  },
  {
    "text": "and the other ones are actually I started running these metrics viewers and then gradually loaded those up with with with data so again we can get a",
    "start": "2970420",
    "end": "2976779"
  },
  {
    "text": "really good understanding of how our system on the desktop is behaving as a whole when we want to drill down into",
    "start": "2976779",
    "end": "2982450"
  },
  {
    "start": "2980000",
    "end": "3006000"
  },
  {
    "text": "where memory usage is the talk I gave last year which is actually on YouTube is how we can do live profiling of",
    "start": "2982450",
    "end": "2992589"
  },
  {
    "text": "memory usage within within a process and we end up getting these histograms and trees that actually show you the call",
    "start": "2992589",
    "end": "2998829"
  },
  {
    "text": "stacks that actually use them and make the most memory allocations so if you're interested in that kind of thing please",
    "start": "2998829",
    "end": "3004650"
  },
  {
    "text": "have a look at the the talk there use a responsiveness so how do we measure you know this this concept of",
    "start": "3004650",
    "end": "3012720"
  },
  {
    "start": "3006000",
    "end": "3082000"
  },
  {
    "text": "slowness and actually something that we've we've really settled on is that",
    "start": "3012720",
    "end": "3018140"
  },
  {
    "text": "what's the thing you first do when you trying to see how responsive your network is you run ping right so",
    "start": "3018140",
    "end": "3025079"
  },
  {
    "text": "actually pinging the UI thread is a really good way of understanding how ready the UI thread is to do new work",
    "start": "3025079",
    "end": "3031950"
  },
  {
    "text": "and we use that a lot because you know if the UI thread isn't is busy doing something else then it can't respond to",
    "start": "3031950",
    "end": "3037380"
  },
  {
    "text": "a key press or a mouse click or a mouse move or a mouse hover or any of these any of these kind of things so actually",
    "start": "3037380",
    "end": "3042420"
  },
  {
    "text": "having the UI thread ready to do new work as often as possible is a really",
    "start": "3042420",
    "end": "3048300"
  },
  {
    "text": "good way of ensuring a good user experience obviously there's other factors you know how long it takes to do a net request and so on how long it",
    "start": "3048300",
    "end": "3054960"
  },
  {
    "text": "takes you a service to respond but what users are really looking for is they want something to happen as soon as they",
    "start": "3054960",
    "end": "3060480"
  },
  {
    "text": "interact with the system you know even if it's not the full thing they're looking for it just has to feel responsive and so you know how do we how",
    "start": "3060480",
    "end": "3069030"
  },
  {
    "text": "do we measure these measure these these kind of things and how do we really understand what's going on that might",
    "start": "3069030",
    "end": "3074849"
  },
  {
    "text": "slow down that that the threads that matters such as the DOI thread it's kind",
    "start": "3074849",
    "end": "3082140"
  },
  {
    "start": "3082000",
    "end": "3096000"
  },
  {
    "text": "of what I just said they're actually so here's a very quick example this is that instant message system and you know I'm",
    "start": "3082140",
    "end": "3087869"
  },
  {
    "text": "typing here and it feels jerky so what's a what you know why is that how can I",
    "start": "3087869",
    "end": "3093750"
  },
  {
    "text": "actually analyze that the thing you saw at the the yeah one of the is we can",
    "start": "3093750",
    "end": "3102810"
  },
  {
    "start": "3096000",
    "end": "3104000"
  },
  {
    "text": "look at the JavaScript levels so because we're embedding chromium we can actually use the chrome dev tools inspector to see what's going on in the JavaScript",
    "start": "3102810",
    "end": "3109170"
  },
  {
    "start": "3104000",
    "end": "3179000"
  },
  {
    "text": "world so this is very good for sort of you know nice quiet analysis in our own time when you you know you have the you",
    "start": "3109170",
    "end": "3115619"
  },
  {
    "text": "know no distractions you can really understand what's going on at that level it doesn't really help us at the native level so we have this tool built into",
    "start": "3115619",
    "end": "3122160"
  },
  {
    "text": "the terminal which allows us to see things like you know what kind of work is going on here",
    "start": "3122160",
    "end": "3127260"
  },
  {
    "text": "chromium work towards the top the the the yellow is chromium work the blue is data layer work down here we are",
    "start": "3127260",
    "end": "3134220"
  },
  {
    "text": "measuring the yellow triangles are actually basically this ping time to the UI thread and you can see where the",
    "start": "3134220",
    "end": "3140400"
  },
  {
    "text": "keyboard was stuttering it's because this is a one second actually the scale here and for each of these little charts",
    "start": "3140400",
    "end": "3146400"
  },
  {
    "text": "and you can see that there were a significant delays in the UI thread the red are actually timer latency so I I",
    "start": "3146400",
    "end": "3152970"
  },
  {
    "text": "fired some timers or queued some timers but they fired late because on Windows",
    "start": "3152970",
    "end": "3158160"
  },
  {
    "text": "timers are the lowest priority thing they only fire when there's no other work to do so seeing how late timers are",
    "start": "3158160",
    "end": "3164369"
  },
  {
    "text": "is also a great indication / of whether we're too busy so this can show us you know the points where we're",
    "start": "3164369",
    "end": "3171540"
  },
  {
    "text": "actually causing the UI to feel bad for",
    "start": "3171540",
    "end": "3178020"
  },
  {
    "text": "users and really drill down there how do we actually do timing in the UI thread this is just a nice trick which I",
    "start": "3178020",
    "end": "3184620"
  },
  {
    "start": "3179000",
    "end": "3360000"
  },
  {
    "text": "thought I'd just quickly show you well we've got a few minutes so this is a very typical way of timing some work",
    "start": "3184620",
    "end": "3191720"
  },
  {
    "text": "Rai principles you have a little scoped guard that when it's constructed starts",
    "start": "3191720",
    "end": "3197790"
  },
  {
    "text": "timing something when it's when it goes out of scope it stops timing and you do some work within that maybe you have",
    "start": "3197790",
    "end": "3203700"
  },
  {
    "text": "different kinds of work in some enumeration that I'm going to I'm going to do want to measure what does the",
    "start": "3203700",
    "end": "3210060"
  },
  {
    "text": "implementation look like I probably got a little stack although it probably wouldn't be built using a stack because that's actually a deck inside maybe some",
    "start": "3210060",
    "end": "3217170"
  },
  {
    "text": "handcrafted little thing and I'm going to just have the vector of timers which start timing and stop timing and so I",
    "start": "3217170",
    "end": "3223680"
  },
  {
    "text": "can measure different kinds of work what does one of these timers actually look like this is actually one something that I",
    "start": "3223680",
    "end": "3230010"
  },
  {
    "text": "just think is a really neat trick done by one of the members of my team in London so this is a timer that can be",
    "start": "3230010",
    "end": "3238080"
  },
  {
    "text": "called from one thread but observe from another thread so I can I can have the UI thread running and separately I can",
    "start": "3238080",
    "end": "3243810"
  },
  {
    "text": "come in and say how busy are you right now whether you're currently doing some work or not so we have this simple data",
    "start": "3243810",
    "end": "3252150"
  },
  {
    "text": "structure which just has a level which protects against recursion so I can actually start timing the same kind of",
    "start": "3252150",
    "end": "3257970"
  },
  {
    "text": "work recursively and stop it without with the only measure at the acid level but also I have this interesting way of",
    "start": "3257970",
    "end": "3267060"
  },
  {
    "text": "actually subtracting time now from my track time when I start timing and",
    "start": "3267060",
    "end": "3272220"
  },
  {
    "text": "adding it when I when I come back it seems a little bit odd but if you see how this works if from my observer sites",
    "start": "3272220",
    "end": "3278760"
  },
  {
    "text": "and imagine this is running in another thread that I'm using to observe what's going on this is just a really neat way",
    "start": "3278760",
    "end": "3284280"
  },
  {
    "text": "of in one atomic variable tracking how much time I'm using but also whether I'm",
    "start": "3284280",
    "end": "3290850"
  },
  {
    "text": "currently timing because if I if I come in and I'm actually currently timing something all I've stored is the time",
    "start": "3290850",
    "end": "3297120"
  },
  {
    "text": "that that work started so I need to add in my current time now in order to say well I'm still doing",
    "start": "3297120",
    "end": "3303299"
  },
  {
    "text": "that kind of work so the amount I've done so far includes the time now however if I've done some work but",
    "start": "3303299",
    "end": "3309659"
  },
  {
    "text": "finished the value is going to be positive so I can just return it directly and this is just a you know",
    "start": "3309659",
    "end": "3317429"
  },
  {
    "text": "maybe this is obvious to everybody I found it really clever actually just to be able to have this notion of how much",
    "start": "3317429",
    "end": "3324029"
  },
  {
    "text": "how much work I'm doing plus whether I'm doing work so neatly Herald in a you",
    "start": "3324029",
    "end": "3330059"
  },
  {
    "text": "know in a single atomic and variable so we actually use this ourselves in in in",
    "start": "3330059",
    "end": "3336569"
  },
  {
    "text": "this kind of system where we have the main thread timing things saying what it's doing in a very lightweight way we",
    "start": "3336569",
    "end": "3342209"
  },
  {
    "text": "have a monitor thread which basically writes this data into circular buffers and then we have a separate UI thread running this thing which allows us to",
    "start": "3342209",
    "end": "3349619"
  },
  {
    "text": "observe what's what's going on and it's relatively unusual to have multiple UI thread in a set in the same processing",
    "start": "3349619",
    "end": "3354900"
  },
  {
    "text": "window so but this really works very well for us something that we do do the",
    "start": "3354900",
    "end": "3360869"
  },
  {
    "text": "last few minutes is we actually allow this system to be recorded and it relies",
    "start": "3360869",
    "end": "3366989"
  },
  {
    "text": "on the fact that the way we create data is to create objects from our servers is to avoid round trips so rather than",
    "start": "3366989",
    "end": "3373079"
  },
  {
    "text": "saying create object and give me a handle we typically say give me a you know let's find a free handle without",
    "start": "3373079",
    "end": "3379199"
  },
  {
    "text": "any kind of round trips and let's use that handle to create an object and then send data to that handle so it's purely",
    "start": "3379199",
    "end": "3386339"
  },
  {
    "text": "push so the nice thing about this scheme is that not only does it result in no round trips on the application between",
    "start": "3386339",
    "end": "3393839"
  },
  {
    "text": "the application and our clients but it's recordable and we playable and we use that too for example you know here's a",
    "start": "3393839",
    "end": "3401459"
  },
  {
    "start": "3400000",
    "end": "3420000"
  },
  {
    "text": "bunch of interactions running we can be in recording mode we're not actually",
    "start": "3401459",
    "end": "3407459"
  },
  {
    "text": "recording what the user does but we're recording the result and that comes from our servers - to those particularly user",
    "start": "3407459",
    "end": "3415739"
  },
  {
    "text": "interactions in such a way is now I can run in a slightly different environment",
    "start": "3415739",
    "end": "3420890"
  },
  {
    "start": "3420000",
    "end": "3447000"
  },
  {
    "text": "here which is running a different executable but embedding the same chromium the same data layer and so on",
    "start": "3420890",
    "end": "3427469"
  },
  {
    "text": "and actually replay at different speeds in different versions of software so actually this kind of gives us",
    "start": "3427469",
    "end": "3433140"
  },
  {
    "text": "a lot of free integration testing because we can just record all these things that are that are going on and",
    "start": "3433140",
    "end": "3438780"
  },
  {
    "text": "replay them through profilers through our test systems to really understand how our systems are behaving in these",
    "start": "3438780",
    "end": "3445320"
  },
  {
    "text": "different scenarios last piece in my last three minutes webassembly who's",
    "start": "3445320",
    "end": "3456720"
  },
  {
    "start": "3449000",
    "end": "3510000"
  },
  {
    "text": "heard of webassembly most people probably who's used webassembly for you",
    "start": "3456720",
    "end": "3462770"
  },
  {
    "text": "is is in my team course he seized it whoever sam is interesting i actually",
    "start": "3462770",
    "end": "3468540"
  },
  {
    "text": "heard about webassembly first really this time last year as I said when Addie was talking about it and when be honest",
    "start": "3468540",
    "end": "3474390"
  },
  {
    "text": "rostered was here doing the keynote last year he I just happened to bump into him in the bar which is a real privilege and",
    "start": "3474390",
    "end": "3480090"
  },
  {
    "text": "I asked him about webassembly expecting him to kind of poopoo the idea and so no no no new platform for C++ fantastic",
    "start": "3480090",
    "end": "3486810"
  },
  {
    "text": "really really interested so you heard it here first this conference that he said",
    "start": "3486810",
    "end": "3493020"
  },
  {
    "text": "that and it's just been a really intriguing journey we've actually started to really look into this you",
    "start": "3493020",
    "end": "3499260"
  },
  {
    "text": "know how can we bring c++ you know mature complex c++ into the the browser",
    "start": "3499260",
    "end": "3504510"
  },
  {
    "text": "environment and yeah i just wanted to touch on a couple of things that we",
    "start": "3504510",
    "end": "3509610"
  },
  {
    "text": "we've been doing so what is web assembly it's a binary instruction format for a stack base virtual machine it's very",
    "start": "3509610",
    "end": "3516300"
  },
  {
    "start": "3510000",
    "end": "3528000"
  },
  {
    "text": "fast it's very compact it's close to machine code and it's pre optimized secure runs in the same sandbox as",
    "start": "3516300",
    "end": "3523050"
  },
  {
    "text": "JavaScript and it standard it is currently supported by all the major browsers it's portable and you know you",
    "start": "3523050",
    "end": "3530940"
  },
  {
    "text": "can actually target or you can actually bring in code from different languages",
    "start": "3530940",
    "end": "3536730"
  },
  {
    "text": "and run them in any of these browsers so for C++ there's a there's a tool suite called in scriptum which generates this",
    "start": "3536730",
    "end": "3543330"
  },
  {
    "text": "thing called a wesen bundle and for something like rust there is wesen pack which generates the same the same bundle",
    "start": "3543330",
    "end": "3550170"
  },
  {
    "text": "and bytecode system around it in detail",
    "start": "3550170",
    "end": "3555240"
  },
  {
    "start": "3553000",
    "end": "3586000"
  },
  {
    "text": "all the C++ tool train looks a bit like this it's using clang and all of the LLVM so this is credible powerful you",
    "start": "3555240",
    "end": "3562860"
  },
  {
    "text": "know industry standard tool chain no there's nothing you know there's no throw away and sort of prototype about",
    "start": "3562860",
    "end": "3569220"
  },
  {
    "text": "this this is this is real and the end result through this is something that",
    "start": "3569220",
    "end": "3574710"
  },
  {
    "text": "could be hosted directly in the JavaScript engine and it brings in actually if you need it there's a whole sort of POSIX runtime to allow you to",
    "start": "3574710",
    "end": "3581930"
  },
  {
    "text": "use this kind of in the confines of the sandbox obviously how do we hook up to",
    "start": "3581930",
    "end": "3588210"
  },
  {
    "start": "3586000",
    "end": "3600000"
  },
  {
    "text": "it you know this is our normal production desktop system the experiments we've been doing involve",
    "start": "3588210",
    "end": "3594090"
  },
  {
    "text": "actually taking the entire data layer pipeline running it through these this toolset and producing and the western",
    "start": "3594090",
    "end": "3599880"
  },
  {
    "text": "version of this directly running inside the JavaScript engine and get some",
    "start": "3599880",
    "end": "3606480"
  },
  {
    "text": "benefits dynamic download obviously efficient binding and the actual binding layer we've done some benchmarks as",
    "start": "3606480",
    "end": "3612180"
  },
  {
    "text": "you'll see and it kind of opens up a lot of intriguing possibilities of sort of blurring the lines between what should",
    "start": "3612180",
    "end": "3618600"
  },
  {
    "text": "be in JavaScript what should be in C++ and we're thinking you know there's you know everything from calculations to",
    "start": "3618600",
    "end": "3624869"
  },
  {
    "text": "maybe taking pieces of our UI layer that do some complex transformations on the for the Dom maybe they they belong in",
    "start": "3624869",
    "end": "3632609"
  },
  {
    "text": "this world maybe you know charting packages you know the calculations for those belong in this this layer how you",
    "start": "3632609",
    "end": "3639930"
  },
  {
    "text": "actually hook this up together from the Java stream of C++ if you have to you know make use of some macros currently",
    "start": "3639930",
    "end": "3646130"
  },
  {
    "text": "the guys here and my team who are kind of dotted around have been actually using a lot of modern C++ very edit",
    "start": "3646130",
    "end": "3655650"
  },
  {
    "text": "templates index sequences on tuples and so on to actually automate this whole",
    "start": "3655650",
    "end": "3661350"
  },
  {
    "text": "process I don't understand this stuff I had a slide on it but I thought I'm too scared to talk about it so find the",
    "start": "3661350",
    "end": "3668640"
  },
  {
    "text": "bloom where guys if you want to understand how this this works but it's allowed us to build a generic binding layer that can target web assembly",
    "start": "3668640",
    "end": "3675420"
  },
  {
    "text": "bindings v8 JavaScript bindings Python bindings and so on for our for our c++ and we're actually",
    "start": "3675420",
    "end": "3681570"
  },
  {
    "text": "contributing this back to the inscription focus so they can actually make this more generally available",
    "start": "3681570",
    "end": "3687500"
  },
  {
    "text": "performances is very interesting what we found is worst case is where we're doing heavy c++ computation work but only 40%",
    "start": "3687500",
    "end": "3696330"
  },
  {
    "text": "slower than native C++ running on the same hardware so it's within the order an order of magnitude so it's not ultimate",
    "start": "3696330",
    "end": "3703599"
  },
  {
    "text": "performance but it's close enough for many scenarios which I find really intriguing the best case is actually",
    "start": "3703599",
    "end": "3709839"
  },
  {
    "text": "where we doing a lot of Martian across the boundary we've actually found that the boundary between JavaScript and wasm",
    "start": "3709839",
    "end": "3715450"
  },
  {
    "text": "is actually more efficient than the current boundary between native C++ and",
    "start": "3715450",
    "end": "3721119"
  },
  {
    "text": "JavaScript so it's very very practical you know this is a very intriguing sort",
    "start": "3721119",
    "end": "3728170"
  },
  {
    "text": "of world we're living in now what's not what's quite nice is that something we",
    "start": "3728170",
    "end": "3733839"
  },
  {
    "text": "actually sponsored on the JavaScript world was this was a new data type called big int to allow us to have long",
    "start": "3733839",
    "end": "3740829"
  },
  {
    "text": "length integers in JavaScript you know particularly financial people you know have sometimes very large numbers",
    "start": "3740829",
    "end": "3746589"
  },
  {
    "text": "they're dealing with a profit and loss they want full precision on these integers javascript used to not support that to big int last week I noticed a",
    "start": "3746589",
    "end": "3755410"
  },
  {
    "text": "tweet from one of the web assembly team this this guy is actually using that to",
    "start": "3755410",
    "end": "3761710"
  },
  {
    "text": "actually implement marshalling in my 64 for web assembly so it's quite nice that it you know these these worlds are sort",
    "start": "3761710",
    "end": "3767500"
  },
  {
    "text": "of colliding yeah a bunch of references and we a couple of our web assembly folks are on Twitter if you follow them",
    "start": "3767500",
    "end": "3775809"
  },
  {
    "text": "and see who they are T or you'll get in you'll get in with a whole web assembly ecosystem there's some you know really",
    "start": "3775809",
    "end": "3782140"
  },
  {
    "text": "interesting work going on there so in conclusion couple minutes over sorry",
    "start": "3782140",
    "end": "3787869"
  },
  {
    "text": "about that I know it's lunch time it's possible to leverage modern open-source software in",
    "start": "3787869",
    "end": "3794400"
  },
  {
    "text": "conjunction with specialized custom components to build a high-performance reliable desktop front-end for what at",
    "start": "3794400",
    "end": "3802329"
  },
  {
    "text": "certain what our clients consider is a mission mission-critical data service C plus a JavaScript can be played it can",
    "start": "3802329",
    "end": "3808809"
  },
  {
    "text": "be made to play very nicely together and but in order to do that and in order to",
    "start": "3808809",
    "end": "3813819"
  },
  {
    "text": "make efficient C++ systems on the desktop you do need to pay attention to detail something that seemed plus plus",
    "start": "3813819",
    "end": "3820599"
  },
  {
    "text": "is obviously great for helping us do and you just have to have a real understanding of your system behavior",
    "start": "3820599",
    "end": "3825930"
  },
  {
    "text": "and by how'd you do that you add in comprehensive metrics and as I say webassembly hints at a very intriguing",
    "start": "3825930",
    "end": "3832089"
  },
  {
    "text": "future you know maybe our system will run in a browser one day and won't actually need",
    "start": "3832089",
    "end": "3837340"
  },
  {
    "text": "a lot of this custom sort of stuff around that but you know interesting",
    "start": "3837340",
    "end": "3843160"
  },
  {
    "text": "times thank you so much for coming along I hope that was mildly interesting for",
    "start": "3843160",
    "end": "3849430"
  },
  {
    "text": "all of you I'm happy to answer any questions but please go and have lunch",
    "start": "3849430",
    "end": "3854820"
  },
  {
    "text": "thank you [Applause]",
    "start": "3854820",
    "end": "3863900"
  }
]