[
  {
    "start": "0",
    "end": "29000"
  },
  {
    "text": "thank you for the introduction so I'm going to say something about",
    "start": "7960",
    "end": "13789"
  },
  {
    "text": "embedded systems programming in C++ I have built on very small systems but not",
    "start": "13789",
    "end": "20640"
  },
  {
    "text": "very recently so if I'm making a big goof kind be kind anyway so I'm going to",
    "start": "20640",
    "end": "29730"
  },
  {
    "start": "29000",
    "end": "29000"
  },
  {
    "text": "tell give my view of what embedded systems programming is some C++",
    "start": "29730",
    "end": "35629"
  },
  {
    "text": "fundamentals and then I'm going to go into to sort of case studies what do you",
    "start": "35629",
    "end": "41399"
  },
  {
    "text": "do when you're really pressed for for speed and and and space and the other",
    "start": "41399",
    "end": "48120"
  },
  {
    "text": "one is what can you actually do if you can use the whole language and and that's that's sort of it and the",
    "start": "48120",
    "end": "55739"
  },
  {
    "text": "emphasis is on reliably in liability maintainability predictability fast",
    "start": "55739",
    "end": "62520"
  },
  {
    "text": "enough and small enough if you want the world record and speed and something",
    "start": "62520",
    "end": "68520"
  },
  {
    "text": "like that you can do that too but that's not what I'm talking about here if it's fast enough it's fast enough and that's",
    "start": "68520",
    "end": "75749"
  },
  {
    "text": "to run for a few years without anybody touching it that's more interesting in",
    "start": "75749",
    "end": "81929"
  },
  {
    "text": "this context so basically oops this thing is very touchy so basically the",
    "start": "81929",
    "end": "92340"
  },
  {
    "text": "point about embedded systems is that it's so many things that there are",
    "start": "92340",
    "end": "98310"
  },
  {
    "text": "people especially people who's not doing it who thinks it's one thing and think they know what it is I know at least as",
    "start": "98310",
    "end": "105149"
  },
  {
    "text": "much to know that I don't know what it is yeah that is there's no one thing for",
    "start": "105149",
    "end": "110429"
  },
  {
    "text": "it to programming a wind turbine and a",
    "start": "110429",
    "end": "115709"
  },
  {
    "text": "coffee machine is not the same there are certain similarities like you won't get",
    "start": "115709",
    "end": "121229"
  },
  {
    "text": "an operator on-site but things are different constraints are not the same",
    "start": "121229",
    "end": "127700"
  },
  {
    "text": "hard real-time is very important soft real-time if you're doing a video",
    "start": "127700",
    "end": "137330"
  },
  {
    "text": "or an amplifier something that gives sound or music if you lose a frame or",
    "start": "137930",
    "end": "144680"
  },
  {
    "text": "part of a timing measure yeah so what nobody dies and we can't hear it we",
    "start": "144680",
    "end": "153480"
  },
  {
    "text": "can't see it but with hard real-time if you're adjusting the wingtips you better",
    "start": "153480",
    "end": "158640"
  },
  {
    "text": "get it right precisely so these things are different and that's that that's important it also",
    "start": "158640",
    "end": "163920"
  },
  {
    "text": "makes it really really hard to talk about you can talk about one specific thing how do you program the coffee",
    "start": "163920",
    "end": "170220"
  },
  {
    "text": "machine that's not part or how do you program the rocket motor that is harder",
    "start": "170220",
    "end": "176490"
  },
  {
    "text": "but it is again specific point is from a point of view of the language we don't",
    "start": "176490",
    "end": "182370"
  },
  {
    "text": "know we don't know what you are programming and what the constraints are and oops did it again",
    "start": "182370",
    "end": "191570"
  },
  {
    "text": "so I'm having some technical problem here so there's commonalities Oh Pro no",
    "start": "191570",
    "end": "199080"
  },
  {
    "start": "192000",
    "end": "192000"
  },
  {
    "text": "program on present and the computer is an integral part of a gadget you don't",
    "start": "199080",
    "end": "206250"
  },
  {
    "text": "actually go and buy and program you buy a gadget that contains one it could",
    "start": "206250",
    "end": "212370"
  },
  {
    "text": "could be a rocket it could be one of those microcontrollers there and there's",
    "start": "212370",
    "end": "217620"
  },
  {
    "text": "common questions that we always ask can it be connected if it's connected how what about security can it fail and how",
    "start": "217620",
    "end": "225750"
  },
  {
    "text": "will you recover I mean if you're there was that that read distributed system",
    "start": "225750",
    "end": "231060"
  },
  {
    "text": "with wheels and previous it has more than a hundred processors in it if one",
    "start": "231060",
    "end": "236730"
  },
  {
    "text": "of them crashes you can get rebooted and take know or unless one of the specialized ones where you only have one",
    "start": "236730",
    "end": "243630"
  },
  {
    "text": "so it gets house of failure recover is always an issue concurrency I just heard",
    "start": "243630",
    "end": "250410"
  },
  {
    "text": "about embedded systems running eight cores and using load balancing for for",
    "start": "250410",
    "end": "257459"
  },
  {
    "text": "power preservation I'd never thought that I should use a multi-core to save",
    "start": "257459",
    "end": "263340"
  },
  {
    "text": "power but I was in ship and about a month ago and they were doing it",
    "start": "263340",
    "end": "270270"
  },
  {
    "text": "and so if there's a human operator the human interface human machine interface",
    "start": "270270",
    "end": "276389"
  },
  {
    "text": "is really critical think of a plane C or a modern car and course that's all this",
    "start": "276389",
    "end": "283110"
  },
  {
    "text": "telemetry comes out of it this is fairly standard questions and again there's",
    "start": "283110",
    "end": "291209"
  },
  {
    "text": "questions from the programming point of view can we afford priests or dynamic",
    "start": "291209",
    "end": "297629"
  },
  {
    "text": "store heap whatever it is I mean one of the the rules in many cases is don't",
    "start": "297629",
    "end": "302759"
  },
  {
    "text": "malloc in any form shape shape or form after the plane takes off that's just",
    "start": "302759",
    "end": "309479"
  },
  {
    "text": "not allowed on the flight and regulations for instance and should we",
    "start": "309479",
    "end": "315029"
  },
  {
    "text": "worry about runtime performance it may be that we just have to do a little bit steadily along the way and there's other",
    "start": "315029",
    "end": "321869"
  },
  {
    "text": "cases where we're really pressed for time the processor is slow relative to",
    "start": "321869",
    "end": "327449"
  },
  {
    "text": "what we have achieved we don't know this this this drives me nuts from the point",
    "start": "327449",
    "end": "332729"
  },
  {
    "text": "of view of saying something general I can't and should we worry about memory",
    "start": "332729",
    "end": "338789"
  },
  {
    "text": "cost usually the answer is yes I mean if you are on a satellite you have to carry",
    "start": "338789",
    "end": "344009"
  },
  {
    "text": "that stuff into space and get destroyed by heart radiation so we need all the",
    "start": "344009",
    "end": "349110"
  },
  {
    "text": "memory we can get and we can't afford to send it you want to build something and ship a hundred million gadgets well a",
    "start": "349110",
    "end": "357539"
  },
  {
    "text": "little bit of memory and each sensor and what our embedded systems programmers",
    "start": "357539",
    "end": "364469"
  },
  {
    "start": "361000",
    "end": "361000"
  },
  {
    "text": "it's well it's roughly everybody presume everybody in this room at least some of",
    "start": "364469",
    "end": "370740"
  },
  {
    "text": "professional programmers they code for a living they've got an education and in",
    "start": "370740",
    "end": "375869"
  },
  {
    "text": "in computer science or software development or something and then there's a lot of Engineers for no",
    "start": "375869",
    "end": "381929"
  },
  {
    "text": "programming training and still write code some of the best people I know for",
    "start": "381929",
    "end": "386999"
  },
  {
    "text": "writing code I electrical engineers but I've seen examples of people who I know",
    "start": "386999",
    "end": "392610"
  },
  {
    "text": "everything I'm an engineer that is not a good attitude to code the code has",
    "start": "392610",
    "end": "398669"
  },
  {
    "text": "changed or as complexities have changed techniques have changed and if you think what you learn in a",
    "start": "398669",
    "end": "405250"
  },
  {
    "text": "simply code back in pickle University 20 years ago yeah probably in slight",
    "start": "405250",
    "end": "412720"
  },
  {
    "text": "trouble and so between those two caricatures we have everybody else and",
    "start": "412720",
    "end": "418270"
  },
  {
    "text": "we tend to have a mixture of the domain-specific knowledge maybe coffee",
    "start": "418270",
    "end": "424570"
  },
  {
    "text": "machines it may be flight trolls and our knowledge about code and I find that",
    "start": "424570",
    "end": "431650"
  },
  {
    "text": "most people don't really want to be C++ experts they just want to get their work done with the least pain and that's very",
    "start": "431650",
    "end": "439960"
  },
  {
    "text": "reasonable and good and I think I understand that I'm not sure everybody",
    "start": "439960",
    "end": "445210"
  },
  {
    "text": "who into programming languages understand that one thing that's driving",
    "start": "445210",
    "end": "451030"
  },
  {
    "start": "448000",
    "end": "448000"
  },
  {
    "text": "a lot of what we are doing is complexity the code component of our systems is",
    "start": "451030",
    "end": "457900"
  },
  {
    "text": "steadily increasing I mean 20 30 years ago those hardly any code and embedded",
    "start": "457900",
    "end": "463360"
  },
  {
    "text": "gadget today it is a huge component and of course it's always the last bit to",
    "start": "463360",
    "end": "468970"
  },
  {
    "text": "get finished so we get the blame the complexity of the code we're writing is",
    "start": "468970",
    "end": "475479"
  },
  {
    "text": "complete is is increasing with the size of the programs we are writing and also with the complexity of the tasks that",
    "start": "475479",
    "end": "483190"
  },
  {
    "text": "that that we are trying to achieve and so our needs change I can reasonably confidently predict",
    "start": "483190",
    "end": "491949"
  },
  {
    "text": "that our programs will be more complicated and more complex more",
    "start": "491949",
    "end": "498250"
  },
  {
    "text": "demanding in five years than they are today we need all the help we can get",
    "start": "498250",
    "end": "503979"
  },
  {
    "text": "and that's my way of approaching the code is that we are working at the",
    "start": "503979",
    "end": "509320"
  },
  {
    "text": "limits of what we can handle and we need to to help there and well we need all",
    "start": "509320",
    "end": "518320"
  },
  {
    "text": "the help we can get so I was reading a survey recently there's interest surveys about what",
    "start": "518320",
    "end": "524829"
  },
  {
    "start": "519000",
    "end": "519000"
  },
  {
    "text": "people do and this particular one set the 50% of of embedded code was see 25%",
    "start": "524829",
    "end": "532690"
  },
  {
    "text": "with C++ and 25 was the now I could also have picked another",
    "start": "532690",
    "end": "539160"
  },
  {
    "text": "review that I read on the same day which said something completely different so just to get me an idea about who you are",
    "start": "539160",
    "end": "547690"
  },
  {
    "text": "- to call a little hands up to get a view you see I'm going to tell you what",
    "start": "547690",
    "end": "554020"
  },
  {
    "text": "they are and then I'm going to call it C and C++ and all the things I have never actually built a system in a single",
    "start": "554020",
    "end": "560800"
  },
  {
    "text": "language there's always something else going on if nothing else in the testing framework and such so I assume other C++",
    "start": "560800",
    "end": "569529"
  },
  {
    "text": "and not C the C and C++ and other only",
    "start": "569529",
    "end": "574600"
  },
  {
    "text": "so who is doing see and not C++",
    "start": "574600",
    "end": "580170"
  },
  {
    "text": "okay who's doing C++ and not C Wow and",
    "start": "580170",
    "end": "586260"
  },
  {
    "text": "who's doing both yeah that's me okay so and other only",
    "start": "586260",
    "end": "595950"
  },
  {
    "text": "okay thanks Matt that gives idea it also gives me an idea that you may know more",
    "start": "596250",
    "end": "602770"
  },
  {
    "start": "599000",
    "end": "599000"
  },
  {
    "text": "than I expected when I wrote this and well we'll see what happens but but",
    "start": "602770",
    "end": "607930"
  },
  {
    "text": "here's my view of programming languages there are two lines of development there's a low line down there that deals",
    "start": "607930",
    "end": "614050"
  },
  {
    "text": "were hardware you want to get every byte and every cycle done well you go from",
    "start": "614050",
    "end": "619720"
  },
  {
    "text": "assembler to BCPL to C and C++ and then people notice that dealing with a",
    "start": "619720",
    "end": "625870"
  },
  {
    "text": "machine directly is somewhat tedious in many cases and you need better abstractions that are more suitable for",
    "start": "625870",
    "end": "632950"
  },
  {
    "text": "humans for a particular domain so it starts with Fortran and this john backus",
    "start": "632950",
    "end": "638980"
  },
  {
    "text": "up there that gave the domain-specific",
    "start": "638980",
    "end": "643230"
  },
  {
    "text": "abstractions for linear algebra dense linear algebra that's Fortran and once",
    "start": "644850",
    "end": "651579"
  },
  {
    "text": "was done everybody wanted one for their domain so the business people got COBOL",
    "start": "651579",
    "end": "656980"
  },
  {
    "text": "you didn't want any of this cryptic a equals B plus C stuff that is too",
    "start": "656980",
    "end": "662320"
  },
  {
    "text": "complicated but you got something else more appropriate for that domain",
    "start": "662320",
    "end": "667820"
  },
  {
    "text": "and in about five to ten years those depending on how you count call it a few",
    "start": "667820",
    "end": "674060"
  },
  {
    "text": "dozen a few hundred languages and the communities couldn't talk to each other because well Fortran even the basic",
    "start": "674060",
    "end": "681800"
  },
  {
    "text": "arithmetic looks different from the basic and second COBOL and so on and this is theis new go or come in and olio",
    "start": "681800",
    "end": "690200"
  },
  {
    "text": "Honda but there's only room for one picture here said Y built in the application specific concepts into the",
    "start": "690200",
    "end": "699140"
  },
  {
    "text": "language why don't we instead give people the ability to build in their own ideas",
    "start": "699140",
    "end": "704510"
  },
  {
    "text": "their own concepts built their own types or type hierarchy is something like that that's how we got Simula and I had a",
    "start": "704510",
    "end": "713000"
  },
  {
    "text": "problem when I started at Bell Labs I wanted to build a distributed system and I needed something to write the",
    "start": "713000",
    "end": "720170"
  },
  {
    "text": "schedulers process schedulers memory managers device drivers network drivers",
    "start": "720170",
    "end": "725450"
  },
  {
    "text": "and such so obviously I had to operate on the low line here and I also needed",
    "start": "725450",
    "end": "731810"
  },
  {
    "text": "to be able to talk about the system there's this bit here that talk to that bit there they talk in this particular",
    "start": "731810",
    "end": "738710"
  },
  {
    "text": "way through this communication infrastructure I needed abstraction so",
    "start": "738710",
    "end": "744340"
  },
  {
    "text": "no language could do both so I built C++ by taking basically ideas from Simula",
    "start": "744340",
    "end": "750650"
  },
  {
    "text": "and putting it into C and and everything came came from there later",
    "start": "750650",
    "end": "756080"
  },
  {
    "start": "755000",
    "end": "755000"
  },
  {
    "text": "my background started out with small machines that up there is a small",
    "start": "756080",
    "end": "762260"
  },
  {
    "text": "machine it is a PDP 11 7 C it's consumption and Dennis Ritchie working",
    "start": "762260",
    "end": "768800"
  },
  {
    "text": "on it I worked on that machine - you could get 256 K of memory half of it was",
    "start": "768800",
    "end": "776930"
  },
  {
    "text": "read/write the other half was was read-only so and then I worked on the",
    "start": "776930",
    "end": "783920"
  },
  {
    "text": "LSI Elevens that was smaller the idea of having a whole megabyte of memory is",
    "start": "783920",
    "end": "790250"
  },
  {
    "text": "sort of Wow lots of memory ok so that my background and when people tell me they",
    "start": "790250",
    "end": "796520"
  },
  {
    "text": "can't get their program running on a 10 gig machine scratch my head and wonder how they",
    "start": "796520",
    "end": "801710"
  },
  {
    "text": "could waste that much that that takes Talent but anyway this is kind of tough",
    "start": "801710",
    "end": "807980"
  },
  {
    "text": "and I like blood I hate bloated code I like sort of concise code that can also",
    "start": "807980",
    "end": "815090"
  },
  {
    "text": "understand it better than bloated code and I don't like bugs I have repeatedly",
    "start": "815090",
    "end": "820880"
  },
  {
    "text": "had worked on systems that must in crash and so that that that's that's how I get",
    "start": "820880",
    "end": "826730"
  },
  {
    "text": "into programming C++ has a machine that it shares mostly will see that basically",
    "start": "826730",
    "end": "835370"
  },
  {
    "start": "827000",
    "end": "827000"
  },
  {
    "text": "says we map straight to Hardware hardware is right there if I do a plus I get the add instruction if I want to",
    "start": "835370",
    "end": "842780"
  },
  {
    "text": "access memory memory is just a sequence of object sequence of bytes usually and you can point to it with an address very",
    "start": "842780",
    "end": "850250"
  },
  {
    "text": "simple and if you want to combine something if you want to to build something higher you can stick objects",
    "start": "850250",
    "end": "857510"
  },
  {
    "text": "at the same time next to each other and call it an array and you can stick objects of different types together and",
    "start": "857510",
    "end": "863600"
  },
  {
    "text": "you can call it a structure a class and yeah in C++ a class an astrologist it's",
    "start": "863600",
    "end": "870470"
  },
  {
    "text": "roughly the same and if you want to have something that has parts in different",
    "start": "870470",
    "end": "875840"
  },
  {
    "text": "parts of the memory you can point to them with a pointer that's that's an address that's it it's very very simple",
    "start": "875840",
    "end": "882320"
  },
  {
    "text": "it's it's about the simplest thing you you see I assume everybody here can understand this you take a bunch of",
    "start": "882320",
    "end": "889730"
  },
  {
    "text": "students right out of an undergraduate course and they can find this complicated because it have all the",
    "start": "889730",
    "end": "895990"
  },
  {
    "text": "things to hiding the machine that they're used to okay but this is this is",
    "start": "895990",
    "end": "902060"
  },
  {
    "text": "important there's only a snag here that's not why machine look like machines are much more complicated than",
    "start": "902060",
    "end": "908150"
  },
  {
    "text": "that you know they all were when Dennis came up with this so this is an",
    "start": "908150",
    "end": "915140"
  },
  {
    "text": "abstraction of the machine this is something that allows us to think about the machine it's something that allows",
    "start": "915140",
    "end": "920810"
  },
  {
    "text": "compilers that you know write code for that model it's something allows optimizers to generate good code from it",
    "start": "920810",
    "end": "927890"
  },
  {
    "text": "and if we have to explicitly deal with all of these things things get",
    "start": "927890",
    "end": "933500"
  },
  {
    "text": "complicated hate it so we want to hide as much of it as possible and the C++ machine model",
    "start": "933500",
    "end": "940100"
  },
  {
    "text": "therefore is an abstraction itself and as a matter of fact its abstractions all the way down because your hardware's an",
    "start": "940100",
    "end": "947420"
  },
  {
    "text": "abstraction to mean an ADA x86 does not execute 886 instructions there's a layer",
    "start": "947420",
    "end": "954830"
  },
  {
    "text": "of silicon the translate 886 instructions into something that's better to execute for those of you who",
    "start": "954830",
    "end": "962630"
  },
  {
    "text": "old enough MIPS machines is what it's like and that that way you can do dynamic scheduling and all the other",
    "start": "962630",
    "end": "968810"
  },
  {
    "text": "good stuff so it's abstractions all the way down and we have to find the",
    "start": "968810",
    "end": "974900"
  },
  {
    "text": "abstractions are suitable for what we are doing on the machine we are doing it on so way I look at abstraction is that",
    "start": "974900",
    "end": "986960"
  },
  {
    "start": "980000",
    "end": "980000"
  },
  {
    "text": "I would like abstraction but I would like abstraction I can afford and especially when we are close to the",
    "start": "986960",
    "end": "993470"
  },
  {
    "text": "hardware you you really don't want abstractions that adds helpful things to",
    "start": "993470",
    "end": "999020"
  },
  {
    "text": "your data structures there are languages that can tell you for a given object what type it is and what the time was",
    "start": "999020",
    "end": "1007660"
  },
  {
    "text": "when it was created that just mean every object has to have two more words you",
    "start": "1007660",
    "end": "1013270"
  },
  {
    "text": "have languages where every object has to live in the FreeStore so it has to have",
    "start": "1013270",
    "end": "1018640"
  },
  {
    "text": "a free store header over there and you have to indirect to get it as far as I can count that's just three words wasted",
    "start": "1018640",
    "end": "1024930"
  },
  {
    "text": "sometimes that's wonderful it helps but sometimes it isn't so what I don't want",
    "start": "1024930",
    "end": "1031839"
  },
  {
    "text": "any room below C++ except possibly assembler I I wrote that somewhere in",
    "start": "1031839",
    "end": "1037150"
  },
  {
    "text": "the 80s and we're repeating it ever since and it's maybe not even that I think sometimes we can beat human",
    "start": "1037150",
    "end": "1044140"
  },
  {
    "text": "written a simpler without too much trouble I'm going to go there not if for",
    "start": "1044140",
    "end": "1049660"
  },
  {
    "text": "everything not for machines that has instructions that we don't have etc that's inline assembly what you don't",
    "start": "1049660",
    "end": "1056770"
  },
  {
    "text": "use you don't pay for no distributors fat and what you do use a language feature you shouldn't be able to hand",
    "start": "1056770",
    "end": "1063370"
  },
  {
    "text": "code any faster and Sarah or head obviously does not mean zero cost you always pay",
    "start": "1063370",
    "end": "1069640"
  },
  {
    "text": "for what you use if you want an indirection you pay for going through that indirection if you want some extra",
    "start": "1069640",
    "end": "1075850"
  },
  {
    "text": "data associated in your object you have to pay for the bytes in it okay I say that because I've been",
    "start": "1075850",
    "end": "1082510"
  },
  {
    "text": "actually repeatedly attacked for for having overhead yeah of course I asked",
    "start": "1082510",
    "end": "1088320"
  },
  {
    "text": "on the virtual function you get an indirection that's what it's for if you don't want the indirection have a",
    "start": "1088320",
    "end": "1094600"
  },
  {
    "text": "virtual function and so know what you ask for there is no magic so a lot to do with",
    "start": "1094600",
    "end": "1102970"
  },
  {
    "start": "1100000",
    "end": "1100000"
  },
  {
    "text": "software development has to do with tools but I have about 60 minutes and you can go to the rest of the conference",
    "start": "1102970",
    "end": "1110110"
  },
  {
    "text": "here and you can get something of the tools I just listed there I'm just not",
    "start": "1110110",
    "end": "1115300"
  },
  {
    "text": "going to there I'm going to focus on on language issues so different kind of",
    "start": "1115300",
    "end": "1123280"
  },
  {
    "start": "1120000",
    "end": "1120000"
  },
  {
    "text": "systems to require different styles of usage I've had lots of confused",
    "start": "1123280",
    "end": "1128650"
  },
  {
    "text": "discussions I remember one case talking to a guy at a conference and everything he said made no sense to me and nothing",
    "start": "1128650",
    "end": "1135730"
  },
  {
    "text": "I said seems to get through to him and I couldn't understand what on earth is going on I mean I'm not usually that",
    "start": "1135730",
    "end": "1142380"
  },
  {
    "text": "wrong and neither are the people I talked to say okay let's back off here",
    "start": "1142380",
    "end": "1148260"
  },
  {
    "text": "what are you programming oh I thought I told you fuel injectors they do listen",
    "start": "1148260",
    "end": "1158560"
  },
  {
    "text": "to squirt every every through my",
    "start": "1158560",
    "end": "1163570"
  },
  {
    "text": "milliseconds anyway so I thought it was one of these big things to the screen",
    "start": "1163570",
    "end": "1169330"
  },
  {
    "text": "and that's why nothing said though said",
    "start": "1169330",
    "end": "1175240"
  },
  {
    "text": "made sense on both sides so you have to know what you are talking about for big",
    "start": "1175240",
    "end": "1180880"
  },
  {
    "text": "systems I recommend to full C++ it's whatever you want from the language you",
    "start": "1180880",
    "end": "1187210"
  },
  {
    "text": "can afford if you have a big system big systems with real time constraints use the full language except for the",
    "start": "1187210",
    "end": "1193810"
  },
  {
    "text": "critical path I mean if I'm doing also a low latency code the first no Melek you're just",
    "start": "1193810",
    "end": "1202360"
  },
  {
    "text": "before that if you if you're counting in the seconds with something I sometimes",
    "start": "1202360",
    "end": "1208030"
  },
  {
    "text": "do in my day job and you use a predictable subset there that's that's",
    "start": "1208030",
    "end": "1215110"
  },
  {
    "text": "fine your hand you must be caught into the situation of putting the constraints",
    "start": "1215110",
    "end": "1223090"
  },
  {
    "text": "of the hardest thing we do into everything we do because the critical path tend to be maybe 1% 5% 10% of the",
    "start": "1223090",
    "end": "1231280"
  },
  {
    "text": "code and we could destroy our productivity for the rest of the code",
    "start": "1231280",
    "end": "1237460"
  },
  {
    "text": "for for 95% of what we are doing we could have our productivity by saying",
    "start": "1237460",
    "end": "1243070"
  },
  {
    "text": "really we need to hand craft every allocation and we have to not use",
    "start": "1243070",
    "end": "1248710"
  },
  {
    "text": "anything that's possibly expensive as if we were on the critical path we actually",
    "start": "1248710",
    "end": "1254080"
  },
  {
    "text": "have to separate what we're doing separate the way we are thinking about our code from the critical bits that",
    "start": "1254080",
    "end": "1261010"
  },
  {
    "text": "we're performance and compact does matter to the rest and small critical",
    "start": "1261010",
    "end": "1267460"
  },
  {
    "text": "systems you just write the the predictable subset of C++ all the time",
    "start": "1267460",
    "end": "1272680"
  },
  {
    "text": "which is basically avoid FreeStore and",
    "start": "1272680",
    "end": "1278370"
  },
  {
    "text": "usually avoid exceptions and the smaller safety critical systems but apart the rest of the language is pretty",
    "start": "1278370",
    "end": "1284500"
  },
  {
    "text": "predictable if you don't have more than 4 bits in a word probably C++ is not the",
    "start": "1284500",
    "end": "1290260"
  },
  {
    "text": "answer for you and if you have 8-bit controllers yeah it can be done but it's",
    "start": "1290260",
    "end": "1296440"
  },
  {
    "text": "a it's it's a very small subset and basically in most cases I worry about",
    "start": "1296440",
    "end": "1302230"
  },
  {
    "text": "space because space is time if I have to traverse a lot of data to get the answer",
    "start": "1302230",
    "end": "1307660"
  },
  {
    "text": "it's going to be slow if I can be compact yeah I can be faster so I I'm",
    "start": "1307660",
    "end": "1312850"
  },
  {
    "text": "always worrying about the amount of restore so I'm going to do two sort of",
    "start": "1312850",
    "end": "1319510"
  },
  {
    "start": "1315000",
    "end": "1315000"
  },
  {
    "text": "almost case studies first I'm going to look at things where compactness matters",
    "start": "1319510",
    "end": "1325080"
  },
  {
    "text": "little gadgets mostly and then I'm going to go and talk about when we can have",
    "start": "1325080",
    "end": "1330550"
  },
  {
    "text": "the full-system full language for Falacci things it roughly corresponds to Nia",
    "start": "1330550",
    "end": "1336930"
  },
  {
    "text": "that low-level way hardware performance use of hardware really matters versus",
    "start": "1336930",
    "end": "1344010"
  },
  {
    "text": "where you can use your full abstraction mechanisms so let's look at where compactness matters I I hear reasonably",
    "start": "1344010",
    "end": "1353730"
  },
  {
    "start": "1348000",
    "end": "1348000"
  },
  {
    "text": "often and probably not in this room given your hands up that C++ is",
    "start": "1353730",
    "end": "1359790"
  },
  {
    "text": "inherently slower than C I actually think on average it is faster than C and",
    "start": "1359790",
    "end": "1366120"
  },
  {
    "text": "we'll get there but let's look at a simple example we have the smallest class I could think of it has a",
    "start": "1366120",
    "end": "1371760"
  },
  {
    "text": "constructor that does a check and stores a value and it has an operation that",
    "start": "1371760",
    "end": "1377250"
  },
  {
    "text": "does something in this case it squares the value and we can do that in c++ blue and in C that's you have a struct",
    "start": "1377250",
    "end": "1385710"
  },
  {
    "text": "instead and you have to access functions now of course there of course both C++ so it's a matter of style but the C",
    "start": "1385710",
    "end": "1394110"
  },
  {
    "text": "proponents will go for the low level so let's look what the difference is there",
    "start": "1394110",
    "end": "1400620"
  },
  {
    "text": "is a use of the struct and there is a use of the of the class and I was very",
    "start": "1400620",
    "end": "1410730"
  },
  {
    "text": "pleased to know that the compiler figured out it was exactly the same code",
    "start": "1410730",
    "end": "1416280"
  },
  {
    "text": "it's just the surface change if you prefer if you prefer the top version and",
    "start": "1416280",
    "end": "1424470"
  },
  {
    "text": "if you prefer the bottom version you you get exactly the same assembly code I'm",
    "start": "1424470",
    "end": "1431070"
  },
  {
    "text": "using compiler Explorer here so just to show the assembly code it's not actually",
    "start": "1431070",
    "end": "1437580"
  },
  {
    "text": "matter too much what the assembler code is but it's about the best you can do in anyway but the fact that it's the",
    "start": "1437580",
    "end": "1445740"
  },
  {
    "text": "same is I think the interesting bit and now I made a difference and they're now",
    "start": "1445740",
    "end": "1451890"
  },
  {
    "text": "slightly different and now you can see the the code is different that the C++",
    "start": "1451890",
    "end": "1458340"
  },
  {
    "text": "verse style is has an eight where the the the c-style has a seven and you look",
    "start": "1458340",
    "end": "1463990"
  },
  {
    "text": "it's identical cold with one constant changed so yeah fine you can and remove",
    "start": "1463990",
    "end": "1473410"
  },
  {
    "text": "those inline functions I cheated I inline the C functions so that the",
    "start": "1473410",
    "end": "1479920"
  },
  {
    "text": "compiler would generate good code if I had forgotten that in a separately compiled program in many cases this plus",
    "start": "1479920",
    "end": "1488110"
  },
  {
    "text": "version would have won hands down because there would have been function caught in the C code",
    "start": "1488110",
    "end": "1493240"
  },
  {
    "text": "but I was being fair I put in line on giving the hint so the compiler should",
    "start": "1493240",
    "end": "1498250"
  },
  {
    "text": "try harder and so there's no difference between the hand coded version using the",
    "start": "1498250",
    "end": "1504220"
  },
  {
    "text": "struck directly and using the functions for accessing it in either C++ style or",
    "start": "1504220",
    "end": "1510040"
  },
  {
    "text": "in C style and again it's just figured out it was the same and let's let's go",
    "start": "1510040",
    "end": "1517570"
  },
  {
    "text": "to simply there are people who avoid templates because they're supposedly",
    "start": "1517570",
    "end": "1522990"
  },
  {
    "text": "expensive and complicated but what I've done there instead of having the class X",
    "start": "1522990",
    "end": "1528760"
  },
  {
    "text": "I have X of T where the member is of T which is a parameter and then I try that",
    "start": "1528760",
    "end": "1535570"
  },
  {
    "text": "I try with and use it instead off the X that I had in the previous slide see",
    "start": "1535570",
    "end": "1543309"
  },
  {
    "text": "this it is with XFX and there it is with FX X which is a template version and",
    "start": "1543309",
    "end": "1550120"
  },
  {
    "text": "again it figured out it was set the same code and just did a jump to what I just",
    "start": "1550120",
    "end": "1556059"
  },
  {
    "text": "done before if that nipping the template aversion of course you would have gotten",
    "start": "1556059",
    "end": "1561070"
  },
  {
    "text": "the code that you got for FX identically let's try a bit more let's try doubles",
    "start": "1561070",
    "end": "1568179"
  },
  {
    "text": "doubles are not the same as its so therefore it has to generate different code and the floating point is a little",
    "start": "1568179",
    "end": "1576550"
  },
  {
    "text": "bit more complicated and integers but as far as I could see for this machine for",
    "start": "1576550",
    "end": "1583510"
  },
  {
    "text": "this code generator this is not code it is exactly the same code as you would have gotten if your hand written that X",
    "start": "1583510",
    "end": "1590590"
  },
  {
    "text": "is like XD with that with a double in there nothing glow there so basically serie or",
    "start": "1590590",
    "end": "1597980"
  },
  {
    "text": "warhead has met its you may be able to write better on hand code but in any",
    "start": "1597980",
    "end": "1604910"
  },
  {
    "text": "large amount of code you couldn't so try it for yourself so what i do when i want to know whether",
    "start": "1604910",
    "end": "1611210"
  },
  {
    "text": "a feature is affordable for my use in constrained environments i just type it",
    "start": "1611210",
    "end": "1618530"
  },
  {
    "text": "in to to the to compile i explore and",
    "start": "1618530",
    "end": "1626150"
  },
  {
    "text": "see what happens it does not do every machine there is but it does do eighty",
    "start": "1626150",
    "end": "1633680"
  },
  {
    "text": "sixes and arms and it does linux windows things like that so you can get a good",
    "start": "1633680",
    "end": "1641150"
  },
  {
    "text": "idea of what a feature cost and by the way though I don't think anybody here",
    "start": "1641150",
    "end": "1646700"
  },
  {
    "text": "would make the mistake of a running code without having right turn the optimizer on but I actually get in discussions",
    "start": "1646700",
    "end": "1654320"
  },
  {
    "text": "with people that genuinely talk about efficiency and forgotten to turn the optimizer on and want to write fancier",
    "start": "1654320",
    "end": "1660800"
  },
  {
    "text": "code to run faster that's pretty and you",
    "start": "1660800",
    "end": "1665900"
  },
  {
    "text": "have to know your tool chain for this kind of thing if you really really don't want to compute things you can compute",
    "start": "1665900",
    "end": "1673550"
  },
  {
    "text": "at compare at runtime you can compute them at compile time and there's some",
    "start": "1673550",
    "end": "1679310"
  },
  {
    "text": "really nice aspects do that like you don't have to have error handling because the errors turned out to be",
    "start": "1679310",
    "end": "1685400"
  },
  {
    "text": "compile time errors rather than calling an error handler and figuring out what",
    "start": "1685400",
    "end": "1690890"
  },
  {
    "text": "to do you can't have a race condition on a constant if you have concurrency in",
    "start": "1690890",
    "end": "1696110"
  },
  {
    "text": "your system as most of us do most of the time days having calculate things at",
    "start": "1696110",
    "end": "1703220"
  },
  {
    "text": "compile time so that you can't have a race condition is good most of the time looking up the answer that has been pre",
    "start": "1703220",
    "end": "1711680"
  },
  {
    "text": "computed as faster than computing it the exception being if you've been so",
    "start": "1711680",
    "end": "1717560"
  },
  {
    "text": "fanatical that there is just so many different places that the access is expensive okay timidly",
    "start": "1717560",
    "end": "1724790"
  },
  {
    "text": "more object code so we we can do things like this example I have here integer",
    "start": "1724790",
    "end": "1732920"
  },
  {
    "start": "1729000",
    "end": "1729000"
  },
  {
    "text": "script was requested by somebody in the Japanese embedded systems industry they",
    "start": "1732920",
    "end": "1739160"
  },
  {
    "text": "they wanted an integer square root and so I did one and I use this in example",
    "start": "1739160",
    "end": "1745040"
  },
  {
    "text": "for constant evaluation so basically their constant expression s1 is the",
    "start": "1745040",
    "end": "1750770"
  },
  {
    "text": "square root into the square root of nine even I could do that in the head it's",
    "start": "1750770",
    "end": "1755840"
  },
  {
    "text": "three but one two three four what would I do I would calculate it and I calculate on",
    "start": "1755840",
    "end": "1762350"
  },
  {
    "text": "a doodle pad or something and then outside the result in the problem with the doodle pad or calculator on the side",
    "start": "1762350",
    "end": "1769760"
  },
  {
    "text": "is one there's a human involved so there's a larger chance of error",
    "start": "1769760",
    "end": "1774800"
  },
  {
    "text": "furthermore once you're taking the constant and moved it into the code only",
    "start": "1774800",
    "end": "1780290"
  },
  {
    "text": "the constant is there if something changes in the for for what you calculate so I'm some thing you are",
    "start": "1780290",
    "end": "1787100"
  },
  {
    "text": "dependent on like the size of a word or something like that now the program is broken when it gets recompiled with the",
    "start": "1787100",
    "end": "1793970"
  },
  {
    "text": "changed assumptions you have to have a magic constant so I like to calculate it like that and the the load thing down",
    "start": "1793970",
    "end": "1802970"
  },
  {
    "text": "here with weekdays is an example it shows we can abstract from the simple things like integers and actually use",
    "start": "1802970",
    "end": "1809870"
  },
  {
    "text": "fairly powerful C++ abstraction mechanisms at zero cost so I want to",
    "start": "1809870",
    "end": "1814970"
  },
  {
    "text": "know the weekday of October 19 2007 printed out fine the interesting thing",
    "start": "1814970",
    "end": "1821960"
  },
  {
    "text": "here is I can do a static assert let the compiler check that the weekday of",
    "start": "1821960",
    "end": "1828020"
  },
  {
    "text": "October 19 2007 teen is a Thursday it'll",
    "start": "1828020",
    "end": "1834200"
  },
  {
    "text": "do that at compile time and if I guessed wrong about the day the program will not",
    "start": "1834200",
    "end": "1839270"
  },
  {
    "text": "compile this is a non-trivial library this is by the way it's going to be the 2000 C++ 20 date library that care it's",
    "start": "1839270",
    "end": "1849950"
  },
  {
    "text": "and time zones and other good things and it's blindingly fast by the way as you",
    "start": "1849950",
    "end": "1855950"
  },
  {
    "text": "can guess by the fact that we could actually do simple things if the if we're only dealing with constants we can do it at",
    "start": "1855950",
    "end": "1862790"
  },
  {
    "text": "compile time if we're using the balls about days and such then it has to be",
    "start": "1862790",
    "end": "1868910"
  },
  {
    "text": "done at at runtime but this is fast and simple enough to use for this kind of",
    "start": "1868910",
    "end": "1874700"
  },
  {
    "text": "stuff so we don't have to just deal with with intz we can do more complicated",
    "start": "1874700",
    "end": "1880220"
  },
  {
    "start": "1879000",
    "end": "1879000"
  },
  {
    "text": "things the other thing we do at compile time a lot is we select names like I'm",
    "start": "1880220",
    "end": "1888010"
  },
  {
    "text": "choosing a library there so I can switch from one library to another I'm",
    "start": "1888010",
    "end": "1895960"
  },
  {
    "text": "providing simplified names there the storage is a vector of T that's the",
    "start": "1897400",
    "end": "1902600"
  },
  {
    "text": "storage I use for T's and down here we are composing things a policies and",
    "start": "1902600",
    "end": "1908300"
  },
  {
    "text": "executor and a locator so that I can say I want the policy that's sequential and using the default a locator imagine",
    "start": "1908300",
    "end": "1916220"
  },
  {
    "text": "you're doing a multi-threaded system that would be something like that so a lot of this stuff is done in the",
    "start": "1916220",
    "end": "1922580"
  },
  {
    "text": "type system at compile time to make sure we have a symbol notation and a without",
    "start": "1922580",
    "end": "1930260"
  },
  {
    "text": "extra overhead two extra calls I mean just because you have something that's usually defined doesn't mean you have to",
    "start": "1930260",
    "end": "1937340"
  },
  {
    "text": "pay for it the compiler can absorb a lot of that stuff here's an example of a",
    "start": "1937340",
    "end": "1943420"
  },
  {
    "text": "traditional example here I want a handle and if if I can put the things it's a",
    "start": "1943420",
    "end": "1950600"
  },
  {
    "text": "handle - on the stack if it's small enough I use the unstack way of",
    "start": "1950600",
    "end": "1957980"
  },
  {
    "text": "allocating it otherwise they use on heap I can compute that small objects goes on",
    "start": "1957980",
    "end": "1963650"
  },
  {
    "text": "the stack big obstacles on the heap that that in some cases is a very useful",
    "start": "1963650",
    "end": "1968960"
  },
  {
    "text": "technique the thing below there is is using something called enable if in C++",
    "start": "1968960",
    "end": "1977080"
  },
  {
    "text": "in 11 and beyond it says if the if G is",
    "start": "1977080",
    "end": "1984230"
  },
  {
    "text": "printable you give it an operator give the collection the operator",
    "start": "1984230",
    "end": "1992210"
  },
  {
    "text": "put so you can conditionally add functions to a shoot to a class which",
    "start": "1992210",
    "end": "2001600"
  },
  {
    "text": "can be quite useful to get absolute minimal footprint of your code that is",
    "start": "2001600",
    "end": "2008200"
  },
  {
    "text": "about the ugliest syntax I ever saw no it's it's it's very ugly I've seen much",
    "start": "2008200",
    "end": "2015070"
  },
  {
    "text": "worse and but it does the thing that is",
    "start": "2015070",
    "end": "2021010"
  },
  {
    "text": "useful of giving properties to two types if and only if they can actually",
    "start": "2021010",
    "end": "2027640"
  },
  {
    "text": "implement them I'm not going to explain the details of this you can look it up",
    "start": "2027640",
    "end": "2033640"
  },
  {
    "text": "there's quite a few books that'll do it there are courses at this conference",
    "start": "2033640",
    "end": "2038890"
  },
  {
    "text": "that will explain to you how to read that one so I'm not going to go there what I'm going to do is I'm going to",
    "start": "2038890",
    "end": "2045640"
  },
  {
    "text": "talk a little bit about how right at driver the traditional way of writing a",
    "start": "2045640",
    "end": "2050679"
  },
  {
    "text": "driver and C++ is you have an interface with some virtual functions so you",
    "start": "2050680",
    "end": "2056409"
  },
  {
    "text": "interact through the driver to get the right operation and so you can have driver one driver too and the user can",
    "start": "2056410",
    "end": "2064419"
  },
  {
    "text": "can use the appropriate driver without knowing what it is basically gets double",
    "start": "2064420",
    "end": "2070360"
  },
  {
    "text": "indirection you go through the driver driver goes to the virtual function table of the driver object which gets",
    "start": "2070360",
    "end": "2077440"
  },
  {
    "text": "you to the right right operation there so if you have say 15 50 electro motors",
    "start": "2077440",
    "end": "2085210"
  },
  {
    "text": "in a in in some gadget maybe one of the flying ones and they use different",
    "start": "2085210",
    "end": "2093690"
  },
  {
    "text": "different concrete drivers but you can write your code to says just just",
    "start": "2093690",
    "end": "2099790"
  },
  {
    "text": "manipulate the the electro motor through the probe way interface things like that",
    "start": "2099790",
    "end": "2105700"
  },
  {
    "text": "that's that's usually good enough but",
    "start": "2105700",
    "end": "2110950"
  },
  {
    "text": "what if it's not good enough what what if this double indirection is killing",
    "start": "2110950",
    "end": "2116500"
  },
  {
    "text": "your response time or what is if the allocations that you go with this",
    "start": "2116500",
    "end": "2123550"
  },
  {
    "text": "object-oriented style is painful in your system what can you do instead so let's just look whoops let's",
    "start": "2123550",
    "end": "2133700"
  },
  {
    "text": "see how to write a driver and I'll write another driver and then I'll say that",
    "start": "2133700",
    "end": "2139820"
  },
  {
    "text": "for character devices I will use driver one and by the way those drivers take",
    "start": "2139820",
    "end": "2145550"
  },
  {
    "text": "the device register as a template parameter and the block device where I'm",
    "start": "2145550",
    "end": "2152630"
  },
  {
    "text": "using packets I use the packet and I'm using a different different device",
    "start": "2152630",
    "end": "2159230"
  },
  {
    "text": "register for that really building in exactly what I'm doing",
    "start": "2159230",
    "end": "2164630"
  },
  {
    "text": "there's no polymorphism here no in directions I'm simply saying characters",
    "start": "2164630",
    "end": "2170000"
  },
  {
    "text": "are right out using driver one on device right with the device register",
    "start": "2170000",
    "end": "2176500"
  },
  {
    "text": "hexadecimal 18 fine so let's have a look I'm now going to do something I am using",
    "start": "2176500",
    "end": "2184580"
  },
  {
    "start": "2181000",
    "end": "2181000"
  },
  {
    "text": "a data structure sorry yes a span which",
    "start": "2184580",
    "end": "2190160"
  },
  {
    "text": "is basically a pointer and a range which is a really good way of passing things",
    "start": "2190160",
    "end": "2195980"
  },
  {
    "text": "around and it's also really good for for simplifying code it's really good for",
    "start": "2195980",
    "end": "2201560"
  },
  {
    "text": "range checking if that's what you're doing but basically you can you can you",
    "start": "2201560",
    "end": "2206750"
  },
  {
    "text": "can pass data as a pointer and and the size so I'm having a span of packets",
    "start": "2206750",
    "end": "2213820"
  },
  {
    "text": "sort of in packets for some in and the span of characters in characters and I",
    "start": "2213820",
    "end": "2220520"
  },
  {
    "text": "write the one output the block device and one out for the character device now the problem is that yes this is simple",
    "start": "2220520",
    "end": "2227810"
  },
  {
    "text": "but I have no which kind of device I'm using all the time why can't it just",
    "start": "2227810",
    "end": "2233570"
  },
  {
    "text": "picked the right one which is what the polymorphism is for what the standard interfaces is forward we use virtual",
    "start": "2233570",
    "end": "2240650"
  },
  {
    "text": "functions for but you know if I really know what I want a compile time I don't need those in directions so what I can",
    "start": "2240650",
    "end": "2247609"
  },
  {
    "text": "do here is say I'm writing a writer which take a span of cheese whatever she",
    "start": "2247609",
    "end": "2253010"
  },
  {
    "text": "is and if she happens to be a character if constant expression",
    "start": "2253010",
    "end": "2258980"
  },
  {
    "text": "is same character and so that that is a",
    "start": "2258980",
    "end": "2266000"
  },
  {
    "text": "notation for saying at compile time check whether it's a character that sees a character then use the character",
    "start": "2266000",
    "end": "2273320"
  },
  {
    "text": "device driver and with the block device",
    "start": "2273320",
    "end": "2278750"
  },
  {
    "text": "we use the other one and you can see the the code down there is exactly the same",
    "start": "2278750",
    "end": "2286040"
  },
  {
    "text": "as the code as if I'd handwritten the chords to the specific driver so there",
    "start": "2286040",
    "end": "2291470"
  },
  {
    "text": "you have polymorphism without directions and it's basically optimal and if you",
    "start": "2291470",
    "end": "2301130"
  },
  {
    "start": "2293000",
    "end": "2293000"
  },
  {
    "text": "don't like the function calls through the two drivers you can inline them",
    "start": "2301130",
    "end": "2306440"
  },
  {
    "text": "sometimes that makes sense if it's a symbol driver it makes sense if it's a",
    "start": "2306440",
    "end": "2311720"
  },
  {
    "text": "big complicated driver it's a dumb idea but you can know that you can look at it",
    "start": "2311720",
    "end": "2316730"
  },
  {
    "text": "is it's really straightforward in terms of you are writing something and the",
    "start": "2316730",
    "end": "2322310"
  },
  {
    "text": "assembler the machine code looks just right so basically if you want to",
    "start": "2322310",
    "end": "2328070"
  },
  {
    "start": "2325000",
    "end": "2325000"
  },
  {
    "text": "program that way you have to know what you're doing but you end up using",
    "start": "2328070",
    "end": "2334910"
  },
  {
    "text": "classes templates some aliasing quite often Atomics and lambdas is a is common",
    "start": "2334910",
    "end": "2343790"
  },
  {
    "text": "this kind of code arrays and spans are common they are arrays a container that",
    "start": "2343790",
    "end": "2352340"
  },
  {
    "text": "doesn't use any interactions as span is a way of referring to a set of elements with without any allocation without any",
    "start": "2352340",
    "end": "2361040"
  },
  {
    "text": "way and be careful I worry about interactions a lot that has to do with",
    "start": "2361040",
    "end": "2367250"
  },
  {
    "text": "the fact that a lot of what I'm doing has has serious cash effects involved",
    "start": "2367250",
    "end": "2372609"
  },
  {
    "text": "indirect function calls in particular dangerous that was why I eliminated them",
    "start": "2372609",
    "end": "2378080"
  },
  {
    "text": "here that was that by the way was a real example from a real",
    "start": "2378080",
    "end": "2385390"
  },
  {
    "text": "gadgets that's deployed in the field not from a big computer and class",
    "start": "2385390",
    "end": "2390400"
  },
  {
    "text": "hierarchies and virtual functions be sure you need them before you use them because is the cost involved in them and",
    "start": "2390400",
    "end": "2396610"
  },
  {
    "text": "they bias you towards writing in a certain style of code which usually involves more in directions and more",
    "start": "2396610",
    "end": "2403180"
  },
  {
    "text": "locations and free stall allocation and de-allocation usually I don't do that",
    "start": "2403180",
    "end": "2410260"
  },
  {
    "text": "go to pores or stack allocators or something like that that's much more predictable okay so",
    "start": "2410260",
    "end": "2418650"
  },
  {
    "start": "2416000",
    "end": "2416000"
  },
  {
    "text": "let's let's look at some more ordinary code that is assumed you can use the",
    "start": "2418650",
    "end": "2424660"
  },
  {
    "text": "whole language assume you are not really squeezed for time and and memory that",
    "start": "2424660",
    "end": "2431770"
  },
  {
    "text": "you can be happy being twice or 50 times faster than the competition but you are",
    "start": "2431770",
    "end": "2438220"
  },
  {
    "text": "not actually worried about the last nanosecond so let's let's do that that's",
    "start": "2438220",
    "end": "2443530"
  },
  {
    "text": "another embedded gadget for my definition of a gadget it runs I think",
    "start": "2443530",
    "end": "2450070"
  },
  {
    "text": "about 25 UNIX systems but if it gets it wrong things go boom in very interesting",
    "start": "2450070",
    "end": "2455950"
  },
  {
    "text": "ways because what it does is the drill into rocks and then stick in explosives",
    "start": "2455950",
    "end": "2461220"
  },
  {
    "text": "a reliability is a very important thing",
    "start": "2461220",
    "end": "2467520"
  },
  {
    "text": "basically yes I've said that so",
    "start": "2467520",
    "end": "2473980"
  },
  {
    "start": "2473000",
    "end": "2473000"
  },
  {
    "text": "basically I would like to have type rich code I I find that when code gets win",
    "start": "2473980",
    "end": "2480460"
  },
  {
    "text": "there's more and more code you need abstractions you can deal with integers and pointers and such at a low level but",
    "start": "2480460",
    "end": "2488230"
  },
  {
    "text": "you can't read it when you get much more code when it gets into the ten thousand hundred thousand lines of code you you",
    "start": "2488230",
    "end": "2495430"
  },
  {
    "text": "need better abstractions it just handles complexity better and this shows a",
    "start": "2495430",
    "end": "2501640"
  },
  {
    "text": "difference between two kinds of programmers which I have labeled C and C++ and I have noticed that people with",
    "start": "2501640",
    "end": "2509740"
  },
  {
    "text": "sort of the C attitude says okay let this thing compile and now can start the real work which is debugging I hate diba",
    "start": "2509740",
    "end": "2518920"
  },
  {
    "text": "it's what oil burns - and that that's not good the the default class way is",
    "start": "2518920",
    "end": "2526240"
  },
  {
    "text": "basically a compile as your best friend express your ideas in such a way that the compiler can tell you when you screw",
    "start": "2526240",
    "end": "2532720"
  },
  {
    "text": "up because you do we do okay so different attitudes so we want to",
    "start": "2532720",
    "end": "2540250"
  },
  {
    "text": "structure the code in such a way that it's more comprehensible more easy to",
    "start": "2540250",
    "end": "2546100"
  },
  {
    "text": "check by the compiler and that handles complexity scale better maybe the old",
    "start": "2546100",
    "end": "2551920"
  },
  {
    "text": "way will will will work when there's a thousand lines of code it does not work with a hundred thousand lines of code",
    "start": "2551920",
    "end": "2557880"
  },
  {
    "text": "more opportunities for portability better optimization you can do compile",
    "start": "2557880",
    "end": "2563110"
  },
  {
    "text": "time code as I showed you and one of the main things here we do is resource",
    "start": "2563110",
    "end": "2569290"
  },
  {
    "start": "2565000",
    "end": "2565000"
  },
  {
    "text": "management a resource is anything that you have to acquire and then give back and as we all know giving back is harder",
    "start": "2569290",
    "end": "2577150"
  },
  {
    "text": "to get right and so to take so we will look that to be sit in particular and",
    "start": "2577150",
    "end": "2584200"
  },
  {
    "text": "large code I assume that if you have to give something back you're going to forget it some of the times at least I",
    "start": "2584200",
    "end": "2590740"
  },
  {
    "text": "do so that's and so a resource should have an owner usually a handle so the",
    "start": "2590740",
    "end": "2596170"
  },
  {
    "text": "general model is here's something to represent ownership and that's the own thing over there and we should make the",
    "start": "2596170",
    "end": "2603450"
  },
  {
    "text": "acquisition explicit and the release implicit that's the the name of the game",
    "start": "2603450",
    "end": "2610690"
  },
  {
    "start": "2610000",
    "end": "2610000"
  },
  {
    "text": "here's the classical example give me a fire you said is it very timber only and",
    "start": "2610690",
    "end": "2618790"
  },
  {
    "text": "that unknown source of bugs the problem being that you have but too close and",
    "start": "2618790",
    "end": "2625930"
  },
  {
    "text": "you have a return statement or a long jump and see or an exception in C++ and",
    "start": "2625930",
    "end": "2632770"
  },
  {
    "text": "that use F you never get to the if close and you have a bug we need to do better",
    "start": "2632770",
    "end": "2638410"
  },
  {
    "text": "the problem is that that just manipulates pointers and you don't know what the point well if you're the author",
    "start": "2638410",
    "end": "2644860"
  },
  {
    "text": "you may know what those pointers mean you may know that something comes out of F open must go back",
    "start": "2644860",
    "end": "2651020"
  },
  {
    "text": "into if closed the documentation say so but you didn't read it neither did the",
    "start": "2651020",
    "end": "2656420"
  },
  {
    "text": "compiler so it can't help you and so we do something like this we create a",
    "start": "2656420",
    "end": "2662660"
  },
  {
    "text": "handle explicitly the type handle and it says you open the file if you can't open",
    "start": "2662660",
    "end": "2669170"
  },
  {
    "text": "it throws an exception you can have several ways of opening a file and the",
    "start": "2669170",
    "end": "2674900"
  },
  {
    "text": "important thing is the destructor there it closes the file so we can now write the code simpler just give me a handler",
    "start": "2674900",
    "end": "2682250"
  },
  {
    "text": "to the file called s with read permissions and however you get out of",
    "start": "2682250",
    "end": "2689390"
  },
  {
    "text": "that block you you get you you you get the file closed and that's that simple",
    "start": "2689390",
    "end": "2697100"
  },
  {
    "text": "and safe and it's it's pervasive in the in the C++ standard library has been for",
    "start": "2697100",
    "end": "2705260"
  },
  {
    "text": "for 20 years and so and there are still people who don't want to use it because they say usually that exceptions are",
    "start": "2705260",
    "end": "2712370"
  },
  {
    "text": "evil or something like that I don't think they're evil we need error codes",
    "start": "2712370",
    "end": "2718280"
  },
  {
    "start": "2716000",
    "end": "2716000"
  },
  {
    "text": "and exceptions if a failure to do something is normal and expected ok let",
    "start": "2718280",
    "end": "2725180"
  },
  {
    "text": "me check it ok get an error code and if you meet yet core I can be expected to",
    "start": "2725180",
    "end": "2730730"
  },
  {
    "text": "handle the problem that that's fine that's what error codes are for but we have a lot of cases where errors are",
    "start": "2730730",
    "end": "2736970"
  },
  {
    "text": "really rare and therefore likely to be forgotten so for those of you who use printf when",
    "start": "2736970",
    "end": "2744560"
  },
  {
    "text": "did you last check the return value of printf because sometimes it fails it",
    "start": "2744560",
    "end": "2753800"
  },
  {
    "text": "take live your system is running and with a network file system or something",
    "start": "2753800",
    "end": "2758900"
  },
  {
    "text": "like that or you're writing through a socket the write can fail and if your F",
    "start": "2758900",
    "end": "2764030"
  },
  {
    "text": "print wasn't checked you have a bug latent bug in your code so I only",
    "start": "2764030",
    "end": "2770480"
  },
  {
    "text": "dislike having to remember to check error codes because I forget and the",
    "start": "2770480",
    "end": "2777770"
  },
  {
    "text": "more unlikely the error is the more likely I am to forget and the harder it",
    "start": "2777770",
    "end": "2782840"
  },
  {
    "text": "is to find the bug because I didn't think about it era propagated up to an ultimate caller quite often in a system",
    "start": "2782840",
    "end": "2789770"
  },
  {
    "text": "that is a play parrots are handled quite often it's quite near the top of the",
    "start": "2789770",
    "end": "2795590"
  },
  {
    "text": "system if anything goes wrong get me up here clean up any messes if I can",
    "start": "2795590",
    "end": "2801260"
  },
  {
    "text": "otherwise write out some log information and then you can either bum out and try and reboot something like that that's",
    "start": "2801260",
    "end": "2807080"
  },
  {
    "text": "quite common but if you have to put percolate your error through 15 function",
    "start": "2807080",
    "end": "2812600"
  },
  {
    "text": "calls then you have 50 cases where you get an error indicator plus a value you",
    "start": "2812600",
    "end": "2818540"
  },
  {
    "text": "have to check the error indicator and then use the value you do this 50 times the answer is no you don't do it 50",
    "start": "2818540",
    "end": "2825200"
  },
  {
    "text": "times you forget so you do it 48 times and now the propagation broken so I worry about that no suitable return path",
    "start": "2825200",
    "end": "2832730"
  },
  {
    "text": "I mean if I do a plus B where's a return path for the air handler da da da I have",
    "start": "2832730",
    "end": "2839300"
  },
  {
    "text": "many things so basically I I think we have to choose and big systems we have",
    "start": "2839300",
    "end": "2845630"
  },
  {
    "text": "the nuisance of having to decide whether an error is an error or some exceptional condition and how do we do that some",
    "start": "2845630",
    "end": "2853400"
  },
  {
    "text": "guidelines for that but here is my saying if it has to do with overhead and",
    "start": "2853400",
    "end": "2863270"
  },
  {
    "start": "2855000",
    "end": "2855000"
  },
  {
    "text": "be able to remember and forget things there's an implementation overhead for",
    "start": "2863270",
    "end": "2869210"
  },
  {
    "text": "exceptions with a normal and normal implementation if and only if the",
    "start": "2869210",
    "end": "2875360"
  },
  {
    "text": "exception actually happens that is most if most of the times there is no",
    "start": "2875360",
    "end": "2881440"
  },
  {
    "text": "exception nothing happens it's fast if and if an",
    "start": "2881440",
    "end": "2886910"
  },
  {
    "text": "exception never happens which should for most programs be in mode for most exceptions you actually",
    "start": "2886910",
    "end": "2894680"
  },
  {
    "text": "don't have any cost if you have virtual memory the whole mechanism can be sitting out in the virtual memory this",
    "start": "2894680",
    "end": "2901820"
  },
  {
    "text": "makes it very costly to do your first exception it has to then go and grab all",
    "start": "2901820",
    "end": "2909290"
  },
  {
    "text": "the mechanism that you hadn't been using before so don't use this for hard real time but look if you can",
    "start": "2909290",
    "end": "2917830"
  },
  {
    "text": "for a millisecond you can properly afford even the most expensive exception",
    "start": "2917830",
    "end": "2922840"
  },
  {
    "text": "and most of the time they don't happen and after you have done the initial initialization it actually will happen",
    "start": "2922840",
    "end": "2930130"
  },
  {
    "start": "2930000",
    "end": "2930000"
  },
  {
    "text": "so there's a simple experiment that I've done repeatedly and other people have done go in levels deep in a chord",
    "start": "2930130",
    "end": "2937780"
  },
  {
    "text": "sequence and then report an error and",
    "start": "2937780",
    "end": "2944350"
  },
  {
    "text": "you can do that with exceptions you can do that with error codes and so which is",
    "start": "2944350",
    "end": "2950350"
  },
  {
    "text": "a more expensive it's it's it's really if you do that experiment a couple of",
    "start": "2950350",
    "end": "2957010"
  },
  {
    "text": "times and you will find that sometimes error handling is is with error codes",
    "start": "2957010",
    "end": "2965020"
  },
  {
    "text": "it's really much faster and simpler I mean Sony and level is one error codes",
    "start": "2965020",
    "end": "2972730"
  },
  {
    "text": "tend to win big factors not just a little percents if you go down a course",
    "start": "2972730",
    "end": "2980800"
  },
  {
    "text": "and the error handling happens the the error happens infrequently like 100",
    "start": "2980800",
    "end": "2988270"
  },
  {
    "text": "exceptions when hands down for performance and Stan leave things so how",
    "start": "2988270",
    "end": "2994960"
  },
  {
    "text": "rare must an arrow beads would be considered exceptional that's actually a question I tend to ask myself a lot and",
    "start": "2994960",
    "end": "3002310"
  },
  {
    "text": "it depends on a lot of things C++ exceptions were designed the shoe may",
    "start": "3002310",
    "end": "3007410"
  },
  {
    "text": "announce of that exercise were about 100 that is if if you if an error happens",
    "start": "3007410",
    "end": "3014520"
  },
  {
    "text": "more than 100 times you core down there it's not optional you better deal with it specifically this is not where you",
    "start": "3014520",
    "end": "3022110"
  },
  {
    "text": "just say oh something happened whoop somebody deals with it which is what the accept thing does and and it works",
    "start": "3022110",
    "end": "3029010"
  },
  {
    "text": "rather nicely and it takes care of the cases where you go or networking things like that okay so when you use",
    "start": "3029010",
    "end": "3039660"
  },
  {
    "start": "3034000",
    "end": "3034000"
  },
  {
    "text": "exceptions try not to have try-catch in your code that belongs in",
    "start": "3039660",
    "end": "3047000"
  },
  {
    "text": "implementations and just at the top level if every level",
    "start": "3047000",
    "end": "3052010"
  },
  {
    "text": "test the try-catch for whether there was an exception in the function you chord",
    "start": "3052010",
    "end": "3057080"
  },
  {
    "text": "you should have used error codes if you really want explicit checks all over the place error codes is just the same as try",
    "start": "3057080",
    "end": "3064730"
  },
  {
    "text": "catch try catch it you can use that as a very slow ugly way of writing",
    "start": "3064730",
    "end": "3070940"
  },
  {
    "text": "if-then-else don't it's it just drives you nuts this is not Java you do not have to have",
    "start": "3070940",
    "end": "3078410"
  },
  {
    "text": "a try on everything where an exception can propagate and so just show an exam",
    "start": "3078410",
    "end": "3084950"
  },
  {
    "text": "example here is a mutex as a matter of",
    "start": "3084950",
    "end": "3090290"
  },
  {
    "text": "fact there are two mutexes that are standard and there's one I designed",
    "start": "3090290",
    "end": "3096410"
  },
  {
    "text": "myself and I can do access like that scope block da-da-da-dah access data",
    "start": "3096410",
    "end": "3102650"
  },
  {
    "text": "implicit core that doesn't have any exceptions in it but it's still our AII",
    "start": "3102650",
    "end": "3108860"
  },
  {
    "text": "it is a general idea that you initialize something and it's implicitly released",
    "start": "3108860",
    "end": "3113930"
  },
  {
    "text": "so you can't say that you don't use our AII because you're not using exceptions",
    "start": "3113930",
    "end": "3120380"
  },
  {
    "text": "you can use that the general style of initializing and owner use the stuff and",
    "start": "3120380",
    "end": "3129080"
  },
  {
    "text": "implicit in release even if you don't use exceptions that scoped lock that's a C++ 17 feature and that is the way you",
    "start": "3129080",
    "end": "3138020"
  },
  {
    "text": "acquire three mutexes without danger of deadlock because you do will not proceed",
    "start": "3138020",
    "end": "3145160"
  },
  {
    "text": "beyond that point unless you have all three so it's obviously implemented to",
    "start": "3145160",
    "end": "3153410"
  },
  {
    "text": "try the one try the other if you could couldn't get the third back off again and that kind of technique there any",
    "start": "3153410",
    "end": "3160820"
  },
  {
    "text": "kind of stuff bumbum if you really can't",
    "start": "3160820",
    "end": "3167960"
  },
  {
    "start": "3164000",
    "end": "3164000"
  },
  {
    "text": "use exceptions my main example is flight controls because you can never afford",
    "start": "3167960",
    "end": "3175280"
  },
  {
    "text": "the the unpredictable exceptions if we",
    "start": "3175280",
    "end": "3180320"
  },
  {
    "text": "had tools that could measure the maximum propagation time we could use it but I haven't been in that",
    "start": "3180320",
    "end": "3187029"
  },
  {
    "text": "situation so you can introduce a notion of a valid object and so where you would",
    "start": "3187029",
    "end": "3193479"
  },
  {
    "text": "have thrown an exception before you you don't set the valid bit and so you can",
    "start": "3193479",
    "end": "3198940"
  },
  {
    "text": "write for all of your code open the file handle or check it was valid now it's",
    "start": "3198940",
    "end": "3206229"
  },
  {
    "text": "not as pretty as as throwing an exception and you still have the problem",
    "start": "3206229",
    "end": "3212380"
  },
  {
    "text": "what on earth do you do if the file handle wasn't handle wasn't valid you",
    "start": "3212380",
    "end": "3219969"
  },
  {
    "text": "can do something for a file handle but if you have to do it with all of your resources for whenever you use acquire",
    "start": "3219969",
    "end": "3226630"
  },
  {
    "text": "some memory say it becomes a real pain to have all of those error hands and code there but you sometimes have to do",
    "start": "3226630",
    "end": "3233200"
  },
  {
    "start": "3233000",
    "end": "3233000"
  },
  {
    "text": "it so basically for ordinary code you can use most C++ features the STL",
    "start": "3233200",
    "end": "3239140"
  },
  {
    "text": "containers come in really handy I always start with a vector and don't use anything else as I have a good",
    "start": "3239140",
    "end": "3245289"
  },
  {
    "text": "reason to the good reason may be that I'm doing lookups so I need a hash table that's called an unordered map but",
    "start": "3245289",
    "end": "3251979"
  },
  {
    "text": "basically start with those containers unless they are unless they don't work",
    "start": "3251979",
    "end": "3258880"
  },
  {
    "text": "the unless there's a problem with that you don't need to go any further it's a good start",
    "start": "3258880",
    "end": "3264940"
  },
  {
    "text": "and then you can optimize exceptions or find Crono for time and now if you need",
    "start": "3264940",
    "end": "3270460"
  },
  {
    "text": "time zones use use date it has just been voted into the standard you can download",
    "start": "3270460",
    "end": "3276279"
  },
  {
    "text": "it from the github for it the name is Howard Hinnant it was a",
    "start": "3276279",
    "end": "3282700"
  },
  {
    "text": "really good guy and if you can remember that name you can look it up and github and find what is going to be put into",
    "start": "3282700",
    "end": "3289089"
  },
  {
    "text": "the standard actually it was voted in so it will comments when she exceptions are find lambdas I haven't gone into lambdas",
    "start": "3289089",
    "end": "3296799"
  },
  {
    "text": "today they're really useful for things you do code you execute only once sorry",
    "start": "3296799",
    "end": "3303160"
  },
  {
    "text": "you only call once and four parameterizing things to make your exit",
    "start": "3303160",
    "end": "3308650"
  },
  {
    "text": "your applications more flexible also to stop repeating the range for is",
    "start": "3308650",
    "end": "3315099"
  },
  {
    "text": "is really useful for for for writing simple loops and most loops are simple for all X in V do something 2 X that's",
    "start": "3315099",
    "end": "3324960"
  },
  {
    "text": "simplification it actually matters when you're looking at the code it's easier",
    "start": "3324960",
    "end": "3330249"
  },
  {
    "text": "to read you don't have to worry somebody's messing with the loop variable something like that",
    "start": "3330249",
    "end": "3335319"
  },
  {
    "text": "it's likely less error-prone and if you if you have to do anything that's really",
    "start": "3335319",
    "end": "3344170"
  },
  {
    "text": "critical you have to look at the things that are not predictable in the sense that you can guarantee they run enough",
    "start": "3344170",
    "end": "3349569"
  },
  {
    "text": "enough in a fixed constant time usually slow usually short fixed constant time",
    "start": "3349569",
    "end": "3356739"
  },
  {
    "text": "new or malloc throw run time type identification STL containers used new",
    "start": "3356739",
    "end": "3365499"
  },
  {
    "text": "when you grow them so either you have to be careful to set them up before you you",
    "start": "3365499",
    "end": "3372910"
  },
  {
    "text": "start the engine you can't have new and delete in in a program that's supposedly",
    "start": "3372910",
    "end": "3381579"
  },
  {
    "text": "last forever because you can get fragmentation so you need something like pools avoid STD function it may contain",
    "start": "3381579",
    "end": "3390130"
  },
  {
    "text": "a malloc so basically the the first rule of thumb is for really critical code don't anything that does a malloc if you",
    "start": "3390130",
    "end": "3399940"
  },
  {
    "text": "have a malloc you need to delete Sariah free if you need a free you're going to",
    "start": "3399940",
    "end": "3405339"
  },
  {
    "text": "get it wrong with a high probability furthermore it costs something and if you get fragmentation you you may not",
    "start": "3405339",
    "end": "3412539"
  },
  {
    "text": "last forever ok keep simple thing for my opinion",
    "start": "3412539",
    "end": "3419859"
  },
  {
    "start": "3415000",
    "end": "3415000"
  },
  {
    "text": "simple means symbol in quality code it does not mean the lowest level facility it's fairly easy to tell people to use a",
    "start": "3419859",
    "end": "3427710"
  },
  {
    "text": "a macro and avoid star and an inch the problem is there's also very easy to",
    "start": "3427710",
    "end": "3435549"
  },
  {
    "text": "make bugs at that level cannot be caught by any analyze or compiler so so you",
    "start": "3435549",
    "end": "3441849"
  },
  {
    "text": "want to get up with that and so symbol does not mean low level",
    "start": "3441849",
    "end": "3447540"
  },
  {
    "text": "I mean symbol in real use and you can do anything with low-level features and",
    "start": "3447540",
    "end": "3452970"
  },
  {
    "text": "that exactly the problem I mean why don't we use go to the answer is it can",
    "start": "3452970",
    "end": "3458160"
  },
  {
    "text": "do innit we want something that's better behaved like a for loop or an if-statement",
    "start": "3458160",
    "end": "3463320"
  },
  {
    "text": "thing like that or an algorithm at next level so that's it and build on the",
    "start": "3463320",
    "end": "3470280"
  },
  {
    "start": "3468000",
    "end": "3468000"
  },
  {
    "text": "sound foundation that is work a lot to make sure that the foundation is solid that your abstractions are solid that",
    "start": "3470280",
    "end": "3477030"
  },
  {
    "text": "the libraries you use are appropriate for your task I don't spend all your",
    "start": "3477030",
    "end": "3483119"
  },
  {
    "text": "time on the world statues and fancy canons up on the high decks because you",
    "start": "3483119",
    "end": "3488609"
  },
  {
    "text": "may get trouble I am act using this picture to scare the Standards Committee from putting too",
    "start": "3488609",
    "end": "3494880"
  },
  {
    "text": "many fancy features on instead of working on the foundations but that",
    "start": "3494880",
    "end": "3500310"
  },
  {
    "text": "that's that's that's a good story that one I am about to run out of time I'm",
    "start": "3500310",
    "end": "3509100"
  },
  {
    "text": "good ok so then I'm going to tell you a little bit about how what we're trying to address here the standards what you",
    "start": "3509100",
    "end": "3517770"
  },
  {
    "text": "can do and what it means like this is undefined behavior the standard will",
    "start": "3517770",
    "end": "3525720"
  },
  {
    "text": "tell you all of that it doesn't tell you what is good code and the language is big and complicated and you need",
    "start": "3525720",
    "end": "3532260"
  },
  {
    "text": "guidance I need guidance and so we are trying to attack the problem of in terms",
    "start": "3532260",
    "end": "3538380"
  },
  {
    "text": "of what would you like your code to look like in five years like just like today",
    "start": "3538380",
    "end": "3544470"
  },
  {
    "text": "is not a good answer it's not good enough we can do much better than what we are today we're very proud of our code today often",
    "start": "3544470",
    "end": "3550770"
  },
  {
    "text": "but we know we can do better in five years we know if you could use all the facilities of the language if we know if",
    "start": "3550770",
    "end": "3558330"
  },
  {
    "text": "we use them better what would we like to do and we are tagging the problem in",
    "start": "3558330",
    "end": "3564090"
  },
  {
    "text": "terms of a cocktail of problems language design coding rules it says what is good",
    "start": "3564090",
    "end": "3572030"
  },
  {
    "text": "libraries for easier writing code and static analysis for enforcement so the",
    "start": "3572030",
    "end": "3578520"
  },
  {
    "text": "basic idea is the way the the the doctors kill or kill kill is",
    "start": "3578520",
    "end": "3583740"
  },
  {
    "text": "illnesses sometimes one medicine isn't sufficient but a cocktail of them will work will kill whatever it was that",
    "start": "3583740",
    "end": "3589980"
  },
  {
    "text": "ailed you and so we're trying to do that combination there the the targets are",
    "start": "3589980",
    "end": "3596540"
  },
  {
    "text": "type safety and resource safety problems we want to eliminate those we want to go",
    "start": "3596540",
    "end": "3604020"
  },
  {
    "text": "after known complicated techniques you look to the web and there are no shortage of people showing how clever",
    "start": "3604020",
    "end": "3610440"
  },
  {
    "text": "they are and that leads to complicated code and complicated techniques we would",
    "start": "3610440",
    "end": "3616350"
  },
  {
    "text": "like to point out when this is gonna walk board I mean the way I optimize code these days is first I throw away",
    "start": "3616350",
    "end": "3623310"
  },
  {
    "text": "all the clever stuff that's usually the complicated stuff it's the one with all",
    "start": "3623310",
    "end": "3629580"
  },
  {
    "text": "these fancy pointers going left right and center and clever uses of multi-core",
    "start": "3629580",
    "end": "3637680"
  },
  {
    "text": "things like that get rid of all of that and see if it's good enough now if not we start building the clever stuff back",
    "start": "3637680",
    "end": "3644130"
  },
  {
    "text": "again but in in a reasonably good way so we go after all complicated techniques",
    "start": "3644130",
    "end": "3649920"
  },
  {
    "text": "known bug sources bugs hide in complicated code bugs correlate with",
    "start": "3649920",
    "end": "3655560"
  },
  {
    "text": "certain uses of code so we try for that and known inefficiencies and so this is",
    "start": "3655560",
    "end": "3662400"
  },
  {
    "text": "the core guidelines it's a joint project between quite a few people it's open",
    "start": "3662400",
    "end": "3667740"
  },
  {
    "text": "source the the main players is Morgan Stanley Microsoft Red Hat Facebook and",
    "start": "3667740",
    "end": "3676920"
  },
  {
    "text": "there's a lot of people adding in this is a very interesting group I mean Facebook Red Hat and Microsoft in the",
    "start": "3676920",
    "end": "3685200"
  },
  {
    "text": "same meeting the joint project this is good there's progress and what we're",
    "start": "3685200",
    "end": "3690990"
  },
  {
    "text": "after is what I showed on the previous slide but in particular I want to get",
    "start": "3690990",
    "end": "3696420"
  },
  {
    "text": "type and resource safe C++ absolutely no violations of the type system no violate",
    "start": "3696420",
    "end": "3701790"
  },
  {
    "text": "no leaks of it no leaks no memory corruption no garbage character if you",
    "start": "3701790",
    "end": "3707370"
  },
  {
    "text": "don't generate any garbage you don't need a garbage collector no limits on what you can say",
    "start": "3707370",
    "end": "3713050"
  },
  {
    "text": "to be C++ and you're very expressive no performance degradation and I wanted in",
    "start": "3713050",
    "end": "3718750"
  },
  {
    "text": "C++ because well I don't want to write another language it takes too much work and we want the tool enforced and we",
    "start": "3718750",
    "end": "3726070"
  },
  {
    "text": "can't quite do that the latest I've heard is that the Microsoft's analyzer",
    "start": "3726070",
    "end": "3731230"
  },
  {
    "text": "which is part of issues to Joe and should be separated out as a program you",
    "start": "3731230",
    "end": "3736480"
  },
  {
    "text": "can run by yourself but they haven't done yet can catch essentially all dangling pointers so anything you ever",
    "start": "3736480",
    "end": "3744700"
  },
  {
    "text": "saw with a pointer pointing to something that wasn't there should go away at",
    "start": "3744700",
    "end": "3750700"
  },
  {
    "text": "compile time actually you static analysis time you were understanding analyzer whenever you feel like it so",
    "start": "3750700",
    "end": "3757990"
  },
  {
    "text": "this is being tested on million line programs and so it you can find it there",
    "start": "3757990",
    "end": "3763510"
  },
  {
    "text": "on the github it's called C++ core guidelines and there's a tiny support",
    "start": "3763510",
    "end": "3768790"
  },
  {
    "text": "library like the span I showed you earlier that's actually we're trying to",
    "start": "3768790",
    "end": "3774040"
  },
  {
    "text": "get that into the standard because we think it's our business to put the GSL out of business by making what is useful",
    "start": "3774040",
    "end": "3781090"
  },
  {
    "text": "part of the standard and what turned out to be not useful which I hope is nothing",
    "start": "3781090",
    "end": "3786300"
  },
  {
    "text": "to go away so that's basically it",
    "start": "3786300",
    "end": "3792450"
  },
  {
    "text": "I'm not too happy about the support for embedded systems programming like I I've",
    "start": "3792450",
    "end": "3800950"
  },
  {
    "text": "never written a real program in this field that didn't need a pool so I write",
    "start": "3800950",
    "end": "3806440"
  },
  {
    "text": "my own pool of time morale I fish out my old pool and modified I don't want to do",
    "start": "3806440",
    "end": "3811900"
  },
  {
    "text": "then I shouldn't have to do that there should be there are library supports",
    "start": "3811900",
    "end": "3817270"
  },
  {
    "text": "like pools and Stata a snag alligators should be standard some flat flat data",
    "start": "3817270",
    "end": "3823300"
  },
  {
    "text": "structures should be in the instead of the the chained one why don't we have a flat map and the answer is that the",
    "start": "3823300",
    "end": "3831340"
  },
  {
    "text": "standard library was designed by people who thought free stole allocation was",
    "start": "3831340",
    "end": "3836680"
  },
  {
    "text": "was cheap and that think structures were good well with caches and with with with",
    "start": "3836680",
    "end": "3843580"
  },
  {
    "text": "constraints on on memory and L okay that's not good enough also the",
    "start": "3843580",
    "end": "3850300"
  },
  {
    "text": "guidelines are quite weak on on embedded systems programming we are trying to",
    "start": "3850300",
    "end": "3857170"
  },
  {
    "text": "deal with that there is a group in the Standards Committee led by Mike Wong from Coldplay he used to be at IBM it's",
    "start": "3857170",
    "end": "3865000"
  },
  {
    "text": "called the study group 14 games and low latency if you're interested in this",
    "start": "3865000",
    "end": "3871810"
  },
  {
    "text": "kind of stuff think about enjoying this one and it seems less embedded than formally a lot",
    "start": "3871810",
    "end": "3879490"
  },
  {
    "text": "of financial types have joined for the low latency so we actually need more",
    "start": "3879490",
    "end": "3885280"
  },
  {
    "text": "embedded systems programmers to build this and the purpose of that group is to",
    "start": "3885280",
    "end": "3891310"
  },
  {
    "text": "come up with a list of things that will be useful for standardized mostly library things and and and then guide",
    "start": "3891310",
    "end": "3900550"
  },
  {
    "text": "the committee in in that area and so that's that's something that that's",
    "start": "3900550",
    "end": "3907210"
  },
  {
    "text": "coming up I had hoped to be more specific about this but I ran out of",
    "start": "3907210",
    "end": "3912220"
  },
  {
    "text": "time as could be expected so basically that's what I wanted to say and I hope",
    "start": "3912220",
    "end": "3919990"
  },
  {
    "text": "we have time for some Q&A thank you five",
    "start": "3919990",
    "end": "3925450"
  },
  {
    "text": "minutes any questions",
    "start": "3925450",
    "end": "3928830"
  },
  {
    "text": "oh yes",
    "start": "3934280",
    "end": "3939580"
  },
  {
    "text": "oh yeah yes yes you can use priest yeah",
    "start": "3949349",
    "end": "3959369"
  },
  {
    "text": "repeat the question here I said that you shouldn't use malloc and free in critical systems that's right especially",
    "start": "3959369",
    "end": "3965369"
  },
  {
    "text": "free because if you use both malloc and free you can get fragmentation but as",
    "start": "3965369",
    "end": "3972180"
  },
  {
    "text": "you correctly pointed out the rules very often is during startup you can allocate",
    "start": "3972180",
    "end": "3978180"
  },
  {
    "text": "memory provided you can prove that you didn't run over and a runtime check will",
    "start": "3978180",
    "end": "3983970"
  },
  {
    "text": "do that and so it's it's quite common that during startup you can do new or malloc but never delete because",
    "start": "3983970",
    "end": "3991700"
  },
  {
    "text": "fragmentation is not predictable",
    "start": "3991700",
    "end": "3995390"
  },
  {
    "text": "is there any way of enforcing the rule against new and delete and the answer is",
    "start": "4011140",
    "end": "4017210"
  },
  {
    "text": "in the language no but there are static analyzers for sale and for free that can",
    "start": "4017210",
    "end": "4024560"
  },
  {
    "text": "do that no that says justjust if they're",
    "start": "4024560",
    "end": "4036740"
  },
  {
    "text": "for the way no that will not work because you need it during startup furthermore new on deletes can be hidden",
    "start": "4036740",
    "end": "4044030"
  },
  {
    "text": "very cleverly in other code the place I mentioned earlier that bit a lot of",
    "start": "4044030",
    "end": "4050480"
  },
  {
    "text": "people was that inside is TD function which is the abstraction that can hold",
    "start": "4050480",
    "end": "4057020"
  },
  {
    "text": "anything executable there lurks a malloc and so if you just instead of using",
    "start": "4057020",
    "end": "4065090"
  },
  {
    "text": "pointers to function use STD function which is much more elegant and say 4x",
    "start": "4065090",
    "end": "4070490"
  },
  {
    "text": "error you get hit by by Maalox and it's",
    "start": "4070490",
    "end": "4077510"
  },
  {
    "text": "not that easy but the aesthetic analyzers that are pretty good at it",
    "start": "4077510",
    "end": "4082990"
  },
  {
    "text": "thank you",
    "start": "4092300",
    "end": "4095420"
  }
]