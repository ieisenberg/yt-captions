[
  {
    "text": "all right oh it's sloud hello um welcome",
    "start": "4600",
    "end": "9920"
  },
  {
    "text": "and good morning to NDC Tech Town um I see the room is full except of maybe",
    "start": "9920",
    "end": "16080"
  },
  {
    "text": "three or four seats so it's excellent um thank you for your interest in this talk I'm Andreas fic I work as a trainer and",
    "start": "16080",
    "end": "23599"
  },
  {
    "text": "consultant for C++ and occasionally you also act as a speaker at least I try to",
    "start": "23599",
    "end": "29359"
  },
  {
    "text": "you can Chou your yourself and there's always something",
    "start": "29359",
    "end": "35200"
  },
  {
    "text": "that goes wrong so the picture is back let's see how we are doing um the topic",
    "start": "35200",
    "end": "41719"
  },
  {
    "text": "of the talk today is C++ Co routines from scratch so the idea is to show you",
    "start": "41719",
    "end": "49039"
  },
  {
    "text": "teach you co routines and well hopefully you go out of this talk thinking there",
    "start": "49039",
    "end": "54680"
  },
  {
    "text": "are a real benefit to the language I'm German by the way and um my",
    "start": "54680",
    "end": "63280"
  },
  {
    "text": "last name might not be the most typical German name there are others like Miller or Schmid um but nonetheless it's a very",
    "start": "63280",
    "end": "71400"
  },
  {
    "text": "German word um my last name is ftic and um despite me",
    "start": "71400",
    "end": "77680"
  },
  {
    "text": "being older than 40 years now I still pronounce my last name wrong um proper",
    "start": "77680",
    "end": "84159"
  },
  {
    "text": "German it's FSH so it's a not a hard g at the end but at the end will get it I",
    "start": "84159",
    "end": "90880"
  },
  {
    "text": "think um I have a couple of years to live hopefully if you translated to English it translates to finished ready",
    "start": "90880",
    "end": "98159"
  },
  {
    "text": "complete or completed so it's an excellent name if you're on the team everybody thinks everything is finished",
    "start": "98159",
    "end": "103799"
  },
  {
    "text": "just because somebody yells your name which isn't the fact um I recently had",
    "start": "103799",
    "end": "109560"
  },
  {
    "text": "my mother's phone um to you know configure it somehow and it's set to German my own phone is set to English so",
    "start": "109560",
    "end": "116600"
  },
  {
    "text": "I didn't never notice that but for all the dialogues you have there it's an iPhone so it's iOS whenever you have to",
    "start": "116600",
    "end": "124399"
  },
  {
    "text": "confirm something because you changed something and they ask you save it or",
    "start": "124399",
    "end": "130920"
  },
  {
    "text": "okay they say fatic so you have to push the fatic button it's really nice I",
    "start": "130920",
    "end": "136800"
  },
  {
    "text": "didn't catch a screenshot so sorry about that but um yeah it's very common um",
    "start": "136800",
    "end": "141959"
  },
  {
    "text": "word here but enough about the German um as you know I cannot pronounce my last",
    "start": "141959",
    "end": "147519"
  },
  {
    "text": "name so maybe I'm not the best German teacher so let's try C++",
    "start": "147519",
    "end": "152840"
  },
  {
    "text": "Instead This diagram here shows you a comparison functions versus cor routines",
    "start": "152840",
    "end": "158879"
  },
  {
    "text": "so on the left you have the control flow of a function so this is what everybody of you knows um to their deepest heart",
    "start": "158879",
    "end": "166040"
  },
  {
    "text": "right we have a caller that places a call to a function that means this function becomes alive it runs either",
    "start": "166040",
    "end": "172879"
  },
  {
    "text": "with a signal or with an early return whatever you prefer multiple returns doesn't matter as soon as the function",
    "start": "172879",
    "end": "179400"
  },
  {
    "text": "returns the entire State the knowledge of this function goes away you get a",
    "start": "179400",
    "end": "184920"
  },
  {
    "text": "result maybe the function returns void but whatever was on the stack for this function",
    "start": "184920",
    "end": "191080"
  },
  {
    "text": "disappears we return to the caller the caller can process the resol or is just",
    "start": "191080",
    "end": "196879"
  },
  {
    "text": "happy having called this function and continues its functionality very simple",
    "start": "196879",
    "end": "202360"
  },
  {
    "text": "very easy works for a whole lot of cases in fact it worked for 30 plus years for",
    "start": "202360",
    "end": "207640"
  },
  {
    "text": "C++ very well not having cortines a potential control flow of a",
    "start": "207640",
    "end": "214560"
  },
  {
    "text": "cortine is the one on the right so here we have a caller and the potential",
    "start": "214560",
    "end": "219720"
  },
  {
    "text": "cortine and the caller now can place a call to cortine it's more or less like",
    "start": "219720",
    "end": "225200"
  },
  {
    "text": "calling a function with one very crucial difference a quotin can suspend itself",
    "start": "225200",
    "end": "232319"
  },
  {
    "text": "and it can be resumed and that means during that time it preserves the state",
    "start": "232319",
    "end": "237799"
  },
  {
    "text": "where it was left off and this is the power of Co routines this is the key here and for paing a CO routine we have",
    "start": "237799",
    "end": "248040"
  },
  {
    "text": "two different new keywords it's co yield and Coe we'll see them later I only use",
    "start": "248040",
    "end": "254000"
  },
  {
    "text": "Co yield here and we have a third one that's when you really want to end a coroutine and this is Kur return so my",
    "start": "254000",
    "end": "261560"
  },
  {
    "text": "control flow here is that my Calla invokes the cortine my cortine becomes alive does some work and then it decides",
    "start": "261560",
    "end": "269199"
  },
  {
    "text": "to Co yield usually we do that by yielding a value to the caller but you",
    "start": "269199",
    "end": "274600"
  },
  {
    "text": "can also have a void yield in Co routine if you so want so we giving back control to the",
    "start": "274600",
    "end": "281600"
  },
  {
    "text": "caller the caller continues its task and at some point it decides to resume the",
    "start": "281600",
    "end": "288120"
  },
  {
    "text": "coutin so that means my ctin now gets resumed exactly where it was left off",
    "start": "288120",
    "end": "293960"
  },
  {
    "text": "the entire state is there continues its work it decides to co yield another",
    "start": "293960",
    "end": "299000"
  },
  {
    "text": "value my caller once again takes control runs invokes the coroutine in my example",
    "start": "299000",
    "end": "306080"
  },
  {
    "text": "here one final time the coroutine runs and at the end it co returns that means",
    "start": "306080",
    "end": "311800"
  },
  {
    "text": "like for a function where you return this Co routine is finished whenever you say Kur K return you should never invoke",
    "start": "311800",
    "end": "319800"
  },
  {
    "text": "this coroutine again it's undefined Behavior we will dive a little deeper in",
    "start": "319800",
    "end": "328080"
  },
  {
    "text": "into coroutines of course but for now you can see like the first call to coroutine it's like creating an object",
    "start": "328080",
    "end": "336880"
  },
  {
    "text": "with new so you get back a handle this the trick how you can invoke the kurtin or can resume it again and again and",
    "start": "336880",
    "end": "344400"
  },
  {
    "text": "once you say Kur turn it's like you've set delete so your handle has gone away",
    "start": "344400",
    "end": "349880"
  },
  {
    "text": "so no more invoking this coroutine so these are the two different control",
    "start": "349880",
    "end": "355479"
  },
  {
    "text": "flows and the power of the C routine simply is that it reserves its state",
    "start": "355479",
    "end": "360880"
  },
  {
    "text": "once it got paed and you can resume",
    "start": "360880",
    "end": "365639"
  },
  {
    "text": "it what are coroutines well the term coroutine itself is well established",
    "start": "367479",
    "end": "373520"
  },
  {
    "text": "since it was first coined by mandin Conway back in",
    "start": "373520",
    "end": "379280"
  },
  {
    "text": "1958 this what might be appear as trickery to the outside having something",
    "start": "379280",
    "end": "386400"
  },
  {
    "text": "more or less a function that goes to sleep and get that's resumed dist trickery here is a very very simple way",
    "start": "386400",
    "end": "395240"
  },
  {
    "text": "of doing that and this is we have two different flavors of Co routines among",
    "start": "395240",
    "end": "401520"
  },
  {
    "text": "programming languages in general we can have stack full cortines or stack less",
    "start": "401520",
    "end": "409199"
  },
  {
    "text": "cortines and this full or lessness of the stack means where this data we need",
    "start": "409199",
    "end": "416720"
  },
  {
    "text": "to preserve for this cortine so its entire state where is that state",
    "start": "416720",
    "end": "422360"
  },
  {
    "text": "safed and you can either have an implementation which stores all this",
    "start": "422360",
    "end": "427759"
  },
  {
    "text": "data on a dedicated stack piece or you do not use the stack and that means you",
    "start": "427759",
    "end": "434000"
  },
  {
    "text": "use the Heap and this is what C++ does so whenever you invoke a coroutine for",
    "start": "434000",
    "end": "440280"
  },
  {
    "text": "the first time that means in the background you get an Heap allocation if we do not think about he",
    "start": "440280",
    "end": "447800"
  },
  {
    "text": "alition which compil us might do but this is the general idea and this is where all this data is stored from a",
    "start": "447800",
    "end": "455599"
  },
  {
    "text": "coutin we call this the coroutine frame which contains all the information that",
    "start": "455599",
    "end": "461599"
  },
  {
    "text": "this coroutine needs to encapsulate that are parameters to the coroutine functions local variables and the",
    "start": "461599",
    "end": "470080"
  },
  {
    "text": "internal State the compiler maintains for us to know where we left off the ctin and where it needs to be",
    "start": "470080",
    "end": "477400"
  },
  {
    "text": "resumed so for the appears to be magic from the outside you can hand code",
    "start": "477400",
    "end": "483840"
  },
  {
    "text": "this when we are talking about cortines one term also pops up that's Cooperative",
    "start": "483840",
    "end": "489560"
  },
  {
    "text": "multitasking because a coroutine doesn't do threading it decides when to give up",
    "start": "489560",
    "end": "495080"
  },
  {
    "text": "control to a caller and by that you can Implement scheduling but the ctin itself",
    "start": "495080",
    "end": "501360"
  },
  {
    "text": "says when it gives up control so you never get interrupted as long as you're",
    "start": "501360",
    "end": "506599"
  },
  {
    "text": "not mixing cortines with multithreading or concurrency in general the benefit of cortines is that",
    "start": "506599",
    "end": "513880"
  },
  {
    "text": "it can simplify your code we can replace some function pointer AK okay call backs with cortines",
    "start": "513880",
    "end": "521000"
  },
  {
    "text": "and make our control flow easier to read parsers especially become much more",
    "start": "521000",
    "end": "527560"
  },
  {
    "text": "readable once you start using coroutines um because of the third point we do no",
    "start": "527560",
    "end": "534320"
  },
  {
    "text": "longer have to maintain the state this is the what a cortin know does for us so",
    "start": "534320",
    "end": "540120"
  },
  {
    "text": "we can simply code and can rate it in the control flow where we are and we do",
    "start": "540120",
    "end": "545640"
  },
  {
    "text": "not have to look up oh what's my state currently and I'm going to the switch block and so forth so courtin make your",
    "start": "545640",
    "end": "553160"
  },
  {
    "text": "code in general better to read and",
    "start": "553160",
    "end": "557879"
  },
  {
    "text": "easier how can you interact with a coroutine as I already said we have",
    "start": "560959",
    "end": "566519"
  },
  {
    "text": "three new keywords to work with coroutine whenever you see such a keyword you know you're looking at a",
    "start": "566519",
    "end": "572959"
  },
  {
    "text": "cool routine and by that this function must satisfy a couple of requirements",
    "start": "572959",
    "end": "578440"
  },
  {
    "text": "but first of all we have the three new keywords Co yield Co return Co weight um",
    "start": "578440",
    "end": "584640"
  },
  {
    "text": "if you want to know more about why this Co underscore thing ask me after the",
    "start": "584640",
    "end": "590279"
  },
  {
    "text": "talk it's long story um Co yield means it's basically an",
    "start": "590279",
    "end": "597600"
  },
  {
    "text": "output action it's like returning a value from a function the caller of the",
    "start": "597600",
    "end": "602800"
  },
  {
    "text": "coroutine can receive a value back and the state of the coroutine usually is",
    "start": "602800",
    "end": "609480"
  },
  {
    "text": "suspended well as we will later see it's all up to your implementation what",
    "start": "609480",
    "end": "614600"
  },
  {
    "text": "really happens but for the broader picture this is how I like to see it cor",
    "start": "614600",
    "end": "620079"
  },
  {
    "text": "returns cor return is also an output action that means we are returning a value for the final time of this",
    "start": "620079",
    "end": "626320"
  },
  {
    "text": "coroutine and my coroutine ends here as for regular functions you can return",
    "start": "626320",
    "end": "631680"
  },
  {
    "text": "a value or you can return void at this point the state of the core routine after that is ended so you're not",
    "start": "631680",
    "end": "638320"
  },
  {
    "text": "supposed to resume it again as I already said that's undefined",
    "start": "638320",
    "end": "643480"
  },
  {
    "text": "Behavior the certain new keyword which I haven't used so far is co we and this is",
    "start": "643480",
    "end": "649720"
  },
  {
    "text": "the other way around so this is an input action if we are co- waiting in a coroutine that means the cortine gets",
    "start": "649720",
    "end": "657200"
  },
  {
    "text": "suspended usually and we are waiting for from the input from the outside so you",
    "start": "657200",
    "end": "662279"
  },
  {
    "text": "can see this like passing a parameter to a function but this time in the middle",
    "start": "662279",
    "end": "668760"
  },
  {
    "text": "of a function you pause and wait for the input of this parameter okay so at any point in a CO",
    "start": "668760",
    "end": "675600"
  },
  {
    "text": "routine you can say okay I need some user input like a yes or no answer and",
    "start": "675600",
    "end": "681360"
  },
  {
    "text": "then I can co- that answer and some other task can take",
    "start": "681360",
    "end": "687959"
  },
  {
    "text": "over the elements of a cortine so what a cortine consists of in",
    "start": "687959",
    "end": "695480"
  },
  {
    "text": "C++ are basically two elements but they can go up to four so the two basic",
    "start": "695480",
    "end": "702920"
  },
  {
    "text": "things is that in C++ we must have a reper type um",
    "start": "702920",
    "end": "710639"
  },
  {
    "text": "to well have an interface into the C routine so this repper type is the",
    "start": "710639",
    "end": "717399"
  },
  {
    "text": "return type of our C routine functions prototype and it allows us to control",
    "start": "717399",
    "end": "723440"
  },
  {
    "text": "the C routine from the outside so we are totally free in what functions to add to",
    "start": "723440",
    "end": "729120"
  },
  {
    "text": "this type um how we model it but the reper type must be there it can also go",
    "start": "729120",
    "end": "736279"
  },
  {
    "text": "without any functions because the compiler looks into this reper type for a definition of",
    "start": "736279",
    "end": "744079"
  },
  {
    "text": "another type called Promise type with the exact same spelling as on the slide",
    "start": "744079",
    "end": "750240"
  },
  {
    "text": "and This Promise type is a bunch of customization points where you can control your Coe routine and this is",
    "start": "750240",
    "end": "758079"
  },
  {
    "text": "what makes coroutines in C++ I would say at least difficult for",
    "start": "758079",
    "end": "763680"
  },
  {
    "text": "beginners because you have the full flexibility and the full flexibility means you have to configure it in some",
    "start": "763680",
    "end": "770760"
  },
  {
    "text": "way and that means you have to know a lot because you need to configure",
    "start": "770760",
    "end": "776000"
  },
  {
    "text": "It This Promise type inside my reper type can either be a type alers A type",
    "start": "776000",
    "end": "781440"
  },
  {
    "text": "Dev or you place the type in form of a struct or class directly in the reper",
    "start": "781440",
    "end": "787760"
  },
  {
    "text": "type we will see examples about that later so these are the two basic things",
    "start": "787760",
    "end": "793079"
  },
  {
    "text": "we always need the third one which you might add depending on what your coroutine does is an awaitable type that",
    "start": "793079",
    "end": "800760"
  },
  {
    "text": "one comes into play once you're using core weight and the fourth component",
    "start": "800760",
    "end": "806519"
  },
  {
    "text": "that often also comes with core is an iterator part because what",
    "start": "806519",
    "end": "812040"
  },
  {
    "text": "cortines can do is yield value after value so practically they can model an",
    "start": "812040",
    "end": "818120"
  },
  {
    "text": "infinite sequence of data and that's usually something where we say oh we want to iterate over that some kind of",
    "start": "818120",
    "end": "825199"
  },
  {
    "text": "iterator state so this is why iterators often come to play here a cortin itself you can see it",
    "start": "825199",
    "end": "833040"
  },
  {
    "text": "because it is a finite State machine in the background it's just that we do not have to hand code it",
    "start": "833040",
    "end": "839320"
  },
  {
    "text": "it's the compiler's implementation and we just have the customization points in the promise type to find unit my actual",
    "start": "839320",
    "end": "847120"
  },
  {
    "text": "cotin function this the one where I say co- yield Co weight or Co return um this",
    "start": "847120",
    "end": "853440"
  },
  {
    "text": "is for communication with the outside world and this function gets transformed",
    "start": "853440",
    "end": "858920"
  },
  {
    "text": "by the compiler to match the customization points or to call the customization points but we will see",
    "start": "858920",
    "end": "865320"
  },
  {
    "text": "examples for that all right good so",
    "start": "865320",
    "end": "870600"
  },
  {
    "text": "far this slide makes me sad and it's twice as sad because it's my own slide",
    "start": "870600",
    "end": "876160"
  },
  {
    "text": "set right I shouldn't have a slide in there which makes me sad um but anyways it's there so um this is a little",
    "start": "876160",
    "end": "883320"
  },
  {
    "text": "disclaimer um please note for this presentation I tried to keep the code",
    "start": "883320",
    "end": "889240"
  },
  {
    "text": "you will see as simple as possible um focusing on Co routines",
    "start": "889240",
    "end": "895600"
  },
  {
    "text": "only in production code I hope you believe me that I work with way more",
    "start": "895600",
    "end": "901040"
  },
  {
    "text": "public and private as well as potential Getters and Setters but due to screen",
    "start": "901040",
    "end": "906440"
  },
  {
    "text": "space and other constraints here I chose to not go this road um additionally I",
    "start": "906440",
    "end": "912199"
  },
  {
    "text": "would use way more generic code in production to keep repetition slow",
    "start": "912199",
    "end": "917639"
  },
  {
    "text": "especially with co- routines I'm not doing this today I totally ripped out all the generic Parts",
    "start": "917639",
    "end": "924320"
  },
  {
    "text": "because I want us to focus solely on cortines okay not to distract you with something where you later ask oh is that",
    "start": "924320",
    "end": "931199"
  },
  {
    "text": "part of the ctin does that need to be there everything is out because my goal",
    "start": "931199",
    "end": "936360"
  },
  {
    "text": "is to help you understand coroutines and I'm totally confident that you can improve the code you will see with the",
    "start": "936360",
    "end": "941959"
  },
  {
    "text": "usual C++ best practices okay that's that's something um I'm confident you",
    "start": "941959",
    "end": "947440"
  },
  {
    "text": "can do that's not a sad part actually that's just a disclaimer the last sentence is the is the sad part",
    "start": "947440",
    "end": "955560"
  },
  {
    "text": "um I also never declare more than one varable per line I teach that I do that",
    "start": "955560",
    "end": "962399"
  },
  {
    "text": "believe me um this presentation actually is the",
    "start": "962399",
    "end": "967560"
  },
  {
    "text": "only exception so far I know of and the other instances I gave that talk um once",
    "start": "967560",
    "end": "973880"
  },
  {
    "text": "again constraints in screen space so apologize for that but now let's look at",
    "start": "973880",
    "end": "981759"
  },
  {
    "text": "a cortine C++ a cortine chat so it's a chaty",
    "start": "981759",
    "end": "987519"
  },
  {
    "text": "cortine if you look here at a in line number one we can see we have a function",
    "start": "987519",
    "end": "993759"
  },
  {
    "text": "fun here and fun returns a type called chat we don't know anything about that",
    "start": "993759",
    "end": "999800"
  },
  {
    "text": "type yet but if we start looking into the body of fun we can see a CO yield so",
    "start": "999800",
    "end": "1006040"
  },
  {
    "text": "that that's enough we can read further down and see co- weit and Co return but the co yield here is enough to",
    "start": "1006040",
    "end": "1011920"
  },
  {
    "text": "know this must be a cool routine and by that we now know that chat is a rapper",
    "start": "1011920",
    "end": "1018920"
  },
  {
    "text": "type so inside chat the compiler must find a promise type otherwise that thing wouldn't compile so we know that already",
    "start": "1018920",
    "end": "1026678"
  },
  {
    "text": "still without knowing much about chat itself if you look at B here we can see",
    "start": "1026679",
    "end": "1032480"
  },
  {
    "text": "I say Co yield and I'm yielding the stood string s and then in C my coroutine uses Co and",
    "start": "1032480",
    "end": "1041079"
  },
  {
    "text": "it awaits a stood string object so because in the background we will see",
    "start": "1041079",
    "end": "1046319"
  },
  {
    "text": "it's it's just about invoking f functions I need something here to trigger the Machinery in the background",
    "start": "1046319",
    "end": "1052960"
  },
  {
    "text": "so I'm using a default constructed stood string object for this co- we I will",
    "start": "1052960",
    "end": "1058000"
  },
  {
    "text": "receive a stood string and see all that here in C and then finally last step in",
    "start": "1058000",
    "end": "1063559"
  },
  {
    "text": "the C routine in D I say Co return and I return the string",
    "start": "1063559",
    "end": "1070880"
  },
  {
    "text": "here okay very simple I also annotated here when I say",
    "start": "1070880",
    "end": "1077600"
  },
  {
    "text": "Co yield that means in the promise type you will find a function yield value which gets called if we say Co weight we",
    "start": "1077600",
    "end": "1085799"
  },
  {
    "text": "will find a function called a we transform inside our promise type and for Co there uh for Co return there is a",
    "start": "1085799",
    "end": "1093760"
  },
  {
    "text": "return value customization point we will see them next but this is where the",
    "start": "1093760",
    "end": "1099559"
  },
  {
    "text": "compiler does reite our function the using part here Below in",
    "start": "1099559",
    "end": "1105080"
  },
  {
    "text": "use in e i call fun for the first time that is like for object creation when",
    "start": "1105080",
    "end": "1111919"
  },
  {
    "text": "I'm calling the Constructor of an object with new maybe because I'm getting back",
    "start": "1111919",
    "end": "1117679"
  },
  {
    "text": "something like a handle and I'm storing that in form of chat in the object chat",
    "start": "1117679",
    "end": "1124640"
  },
  {
    "text": "okay so this is the first step cortine got invoked the first time became alive",
    "start": "1124640",
    "end": "1131840"
  },
  {
    "text": "in F now we can see I'm calling chat. listen I know I haven't shown you the",
    "start": "1131840",
    "end": "1137320"
  },
  {
    "text": "definition of chat but you now know it comes at least with a member function listen that's supposed to return",
    "start": "1137320",
    "end": "1143520"
  },
  {
    "text": "something that can be SE outed and then in G I call chat. answer passing a stood",
    "start": "1143520",
    "end": "1149760"
  },
  {
    "text": "string to that member function and finally in h i call chat. listen again",
    "start": "1149760",
    "end": "1157200"
  },
  {
    "text": "if you run this code with the rest that we will um see on the next slide that means there the control flow is roughly",
    "start": "1157200",
    "end": "1164240"
  },
  {
    "text": "that the cortin says hello and then my use function asks where are you and the",
    "start": "1164240",
    "end": "1171120"
  },
  {
    "text": "cortin replies here so it's a chat",
    "start": "1171120",
    "end": "1176640"
  },
  {
    "text": "right now if you look into the mechanics this is the promise",
    "start": "1176640",
    "end": "1181760"
  },
  {
    "text": "type and in a you can see well two variables in one line but I decided I",
    "start": "1181760",
    "end": "1187640"
  },
  {
    "text": "wanted to split MSG in and MSG out for more clarity these are my two V variables",
    "start": "1187640",
    "end": "1194600"
  },
  {
    "text": "here which I use a storage space to preserve the information I receive or I",
    "start": "1194600",
    "end": "1200039"
  },
  {
    "text": "should send out in B we have our first customization Point unhandled exception",
    "start": "1200039",
    "end": "1206840"
  },
  {
    "text": "I'm not going to talk about exceptions and Co routines in general today so this implementation will always remain empty",
    "start": "1206840",
    "end": "1213559"
  },
  {
    "text": "but you can customize the behavior what should happen if you encounter an",
    "start": "1213559",
    "end": "1219120"
  },
  {
    "text": "exception inside a Coe routine okay it's beneficial and",
    "start": "1219120",
    "end": "1224480"
  },
  {
    "text": "crucial terminate this would just terminate yes with um out doing anything",
    "start": "1224480",
    "end": "1230720"
  },
  {
    "text": "it just terminates but here you can control that you lck more that you try to um keep your program alive but a CO",
    "start": "1230720",
    "end": "1239000"
  },
  {
    "text": "routine is gone anyways let's say that way so once you encounter an exception",
    "start": "1239000",
    "end": "1244159"
  },
  {
    "text": "in a coroutine that coroutine is gone all you can do is preserve the rest of",
    "start": "1244159",
    "end": "1250200"
  },
  {
    "text": "your program or let everything",
    "start": "1250200",
    "end": "1256039"
  },
  {
    "text": "die in C I have the customization Point get return object so the compiler knows",
    "start": "1256080",
    "end": "1264200"
  },
  {
    "text": "that in the return type of the Coury in the reper type chat there is the promise type the compiler knows how to construct",
    "start": "1264200",
    "end": "1272039"
  },
  {
    "text": "This Promise type but it doesn't know how to construct the reper type because you can have a Constructor",
    "start": "1272039",
    "end": "1279480"
  },
  {
    "text": "that takes zero arguments that takes a bunch of arguments that takes a single argument like here so this is our way to",
    "start": "1279480",
    "end": "1286559"
  },
  {
    "text": "teach the compiler how to construct the rapper type and in my case I'm saying",
    "start": "1286559",
    "end": "1291760"
  },
  {
    "text": "well I'm passing a this pointer of Promise type to chat building the",
    "start": "1291760",
    "end": "1297240"
  },
  {
    "text": "relationship that chat can control the kutin the next two customization points",
    "start": "1297240",
    "end": "1304279"
  },
  {
    "text": "are when the cortine first is cread there is an initial suspension point at",
    "start": "1304279",
    "end": "1311039"
  },
  {
    "text": "least a possibility this is initial suspend there I can control should this",
    "start": "1311039",
    "end": "1317039"
  },
  {
    "text": "coroutine return or pause better after it's being",
    "start": "1317039",
    "end": "1322400"
  },
  {
    "text": "created or should it continue directly as a mental model you can see",
    "start": "1322400",
    "end": "1327679"
  },
  {
    "text": "it like if you're creating an object and you have a Constructor most of the time you only",
    "start": "1327679",
    "end": "1334720"
  },
  {
    "text": "initialize all the members of the class in your Constructor and then return",
    "start": "1334720",
    "end": "1340240"
  },
  {
    "text": "means you have a valid object somebody can work with that but I've also seen",
    "start": "1340240",
    "end": "1345679"
  },
  {
    "text": "like a thousand lines in the constructor's body doing some additional work more or less the entire program",
    "start": "1345679",
    "end": "1351840"
  },
  {
    "text": "right um so that means the Constructor doesn't return immediately because he had a lot of work to do and this initial",
    "start": "1351840",
    "end": "1358320"
  },
  {
    "text": "suspend is practically the same thing if initial suspend says suspend always that",
    "start": "1358320",
    "end": "1364000"
  },
  {
    "text": "means our cortin after being created directly suspend but we can also have it",
    "start": "1364000",
    "end": "1369679"
  },
  {
    "text": "run to its first or last suspension Point whatever we want here so it's",
    "start": "1369679",
    "end": "1376960"
  },
  {
    "text": "customizable for yield value this is being called once we say Co yield so I take a stood",
    "start": "1376960",
    "end": "1384559"
  },
  {
    "text": "string um by copy here I move it into my variable MSG out and I return a default",
    "start": "1384559",
    "end": "1391159"
  },
  {
    "text": "constructed stood suspend always suspend always is one new type that we have in",
    "start": "1391159",
    "end": "1398400"
  },
  {
    "text": "the standard Library together with suspend never all they should practically signal is does the",
    "start": "1398400",
    "end": "1404640"
  },
  {
    "text": "suspension Point suspend always or never we will see an implementation of them",
    "start": "1404640",
    "end": "1410720"
  },
  {
    "text": "later for yield value you're totally free in what you want to do here so",
    "start": "1410720",
    "end": "1415760"
  },
  {
    "text": "yield value can take a reference a con reference a pointer con pointer and so forth you have the full Bunch available",
    "start": "1415760",
    "end": "1422320"
  },
  {
    "text": "but it must match what you're co- yielding and you can also build the coroutine which has different overloads",
    "start": "1422320",
    "end": "1429600"
  },
  {
    "text": "for different usages of yield value taking con reference taking temporary and so Force you can try to optimize",
    "start": "1429600",
    "end": "1436120"
  },
  {
    "text": "this here so this just just a function that the compiler calls looking before",
    "start": "1436120",
    "end": "1441720"
  },
  {
    "text": "that at the overload set which one to invoke because I have a CO weight in",
    "start": "1441720",
    "end": "1448279"
  },
  {
    "text": "here I implemented a weight transform my next customiz customization point I'm",
    "start": "1448279",
    "end": "1453559"
  },
  {
    "text": "not interested in any data here that I could also transfer during the core",
    "start": "1453559",
    "end": "1458960"
  },
  {
    "text": "weight so I'm simply taking a stood string to have the correct overload invoked but I'm not looking at the data",
    "start": "1458960",
    "end": "1466840"
  },
  {
    "text": "of this stood string now inside a way transform I do something that I picked up once I",
    "start": "1466840",
    "end": "1472840"
  },
  {
    "text": "started working with coroutines I declare this struct directly in a weight to transform I call that one a",
    "start": "1472840",
    "end": "1479600"
  },
  {
    "text": "waiter and um its purpose is now it basically implements the three functions",
    "start": "1479600",
    "end": "1484919"
  },
  {
    "text": "a weight ready a weight resume a weight suspend so this is what's behind suspend",
    "start": "1484919",
    "end": "1490039"
  },
  {
    "text": "always so this is my suspension configuration and for weight ready I say",
    "start": "1490039",
    "end": "1495200"
  },
  {
    "text": "always true a weight resume means it's called once the ctin gets resumed so at",
    "start": "1495200",
    "end": "1501200"
  },
  {
    "text": "this point I need to get a value out and this is where I'm moving MSG in out um",
    "start": "1501200",
    "end": "1508039"
  },
  {
    "text": "so I'm returning a stood string here and the we suspend here takes a coroutine",
    "start": "1508039",
    "end": "1513279"
  },
  {
    "text": "handle we will see an example of that later currently I'm not interested in storing the handle from the core team",
    "start": "1513279",
    "end": "1518960"
  },
  {
    "text": "that paed me um but there are use cases when we want to do that so that",
    "start": "1518960",
    "end": "1524679"
  },
  {
    "text": "implementation here is empty and I'm storing a reference to my promise type here to be able to move the MSG in out",
    "start": "1524679",
    "end": "1533480"
  },
  {
    "text": "in my await resume call and then in line 22 here I return a freshly constructed a",
    "start": "1533480",
    "end": "1540760"
  },
  {
    "text": "waiter object passing a reference to this basically the final two customization",
    "start": "1540760",
    "end": "1547960"
  },
  {
    "text": "points at the bottom of the slide are return value because I have a core return in there this is what a compiler",
    "start": "1547960",
    "end": "1554640"
  },
  {
    "text": "looks for in my promise type and it's the same same as for yield value you can",
    "start": "1554640",
    "end": "1560520"
  },
  {
    "text": "provide it with different signatures here so in my case it simply takes a stood string but you can also have it",
    "start": "1560520",
    "end": "1567320"
  },
  {
    "text": "take a St string by reference con reference and so forth same as before the only difference between yield value",
    "start": "1567320",
    "end": "1574159"
  },
  {
    "text": "and return value is return value does always return void because it's it's",
    "start": "1574159",
    "end": "1579760"
  },
  {
    "text": "nothing where the cortin suspends and um you have the ability to say suspend",
    "start": "1579760",
    "end": "1586000"
  },
  {
    "text": "always or suspend never at this point so what I'm doing here I store the received value in MSG out and my final",
    "start": "1586000",
    "end": "1593760"
  },
  {
    "text": "final customization point is final suspend as for initial suspend there is",
    "start": "1593760",
    "end": "1599080"
  },
  {
    "text": "one final suspension point where you can say after the return value or after the",
    "start": "1599080",
    "end": "1604559"
  },
  {
    "text": "last suspension point in general what should be the behavior of the C routine shall it flow to the end of the control",
    "start": "1604559",
    "end": "1612000"
  },
  {
    "text": "flow or shall it pause here and the configuration here depends on what you",
    "start": "1612000",
    "end": "1617440"
  },
  {
    "text": "want want usually if you have a return value there so cor return and want to grab that value you want your Co routine",
    "start": "1617440",
    "end": "1625080"
  },
  {
    "text": "to suspend at a final suspension point because if you let it flow to the end",
    "start": "1625080",
    "end": "1630200"
  },
  {
    "text": "it's destroyed it's like a autof free if you want so this is where you can configure",
    "start": "1630200",
    "end": "1637600"
  },
  {
    "text": "that here I have my type chat and well",
    "start": "1639600",
    "end": "1644880"
  },
  {
    "text": "another thing I'm not very fond of at the top here this include should visualize that the code that we just saw",
    "start": "1644880",
    "end": "1652039"
  },
  {
    "text": "goes in this place okay that's the easiest to visualize that was to",
    "start": "1652039",
    "end": "1657120"
  },
  {
    "text": "include what I'm doing next here in a um there is a type St coroutine handle",
    "start": "1657120",
    "end": "1663600"
  },
  {
    "text": "which is a template and I type that one with the promise type of my co routine and I create myself a shortcut an alias",
    "start": "1663600",
    "end": "1670679"
  },
  {
    "text": "handle which I used to declare a member here Muro handle then I implementing a Constructor",
    "start": "1670679",
    "end": "1678640"
  },
  {
    "text": "which takes a promise type pointer and in this St coroutine handle there is a",
    "start": "1678640",
    "end": "1684880"
  },
  {
    "text": "static member function from promise you see that in C so this is asking the",
    "start": "1684880",
    "end": "1693200"
  },
  {
    "text": "internal Machinery to convert from a promise type to core routine handle the",
    "start": "1693200",
    "end": "1699559"
  },
  {
    "text": "compiler internally has a mapping table of that it needs to know that and with this function we can invoke intrinsics",
    "start": "1699559",
    "end": "1706480"
  },
  {
    "text": "and get this information so at this point I have the handle um that belongs to This Promise type",
    "start": "1706480",
    "end": "1713039"
  },
  {
    "text": "because of this handle situation this is much like having a pointer in a class",
    "start": "1713039",
    "end": "1718720"
  },
  {
    "text": "and whenever you have a class that stores a pointer to dynamic memory or anything like that then you usually do",
    "start": "1718720",
    "end": "1725360"
  },
  {
    "text": "not want the default generated copy Constructor because that would simply duplicate the pointer but not the memory",
    "start": "1725360",
    "end": "1732000"
  },
  {
    "text": "behind it so this is the same here for the coroutine we do not want that to be",
    "start": "1732000",
    "end": "1737720"
  },
  {
    "text": "copiable because then we have two objects pointing to the same coroutine that calls for trouble so by",
    "start": "1737720",
    "end": "1744640"
  },
  {
    "text": "implementing only the move Constructor in this case I disable the move the copy",
    "start": "1744640",
    "end": "1750000"
  },
  {
    "text": "operations so it's only um move constructible here and I exchange the",
    "start": "1750000",
    "end": "1757799"
  },
  {
    "text": "other sides cortin handle with a null pointer and receive um the cortin handle from the other side so it's movable at",
    "start": "1757799",
    "end": "1765159"
  },
  {
    "text": "this point but not copyable again because of that handle I have a",
    "start": "1765159",
    "end": "1770440"
  },
  {
    "text": "Destructor here in E that one checks whether the cortine handle is still",
    "start": "1770440",
    "end": "1775799"
  },
  {
    "text": "valid and if so it calls Destroyer but it is more or less like",
    "start": "1775799",
    "end": "1782080"
  },
  {
    "text": "delete and then we see the two member functions we previously saw in the example listen and answer listen here",
    "start": "1782080",
    "end": "1791399"
  },
  {
    "text": "once again checks whether the cortine is done or not if it's not done it means we",
    "start": "1791399",
    "end": "1797760"
  },
  {
    "text": "can still use it so it getss resumed and after that resume I use the courtin",
    "start": "1797760",
    "end": "1805120"
  },
  {
    "text": "handle and there is a function promise which brings me to the promise type and",
    "start": "1805120",
    "end": "1810320"
  },
  {
    "text": "this gives me access to MSG out so this is how I track the do string out of the",
    "start": "1810320",
    "end": "1817360"
  },
  {
    "text": "promise type out of the internal of the coroutine okay so this directly reaching",
    "start": "1817360",
    "end": "1822799"
  },
  {
    "text": "into the coutin dragging that value out",
    "start": "1822799",
    "end": "1827880"
  },
  {
    "text": "the other way around is answer that one takes a St string and I do the same",
    "start": "1827880",
    "end": "1833600"
  },
  {
    "text": "thing I use the ctin handle to get to the promise type to get access to my St",
    "start": "1833600",
    "end": "1839039"
  },
  {
    "text": "string MSG in and I move the just received St string to MSG in so this is",
    "start": "1839039",
    "end": "1844799"
  },
  {
    "text": "how I get a value into the promise type and with that into the C routine and after that step I once again check is",
    "start": "1844799",
    "end": "1851760"
  },
  {
    "text": "the coroutine still um alive and if so I resume it and now it has the",
    "start": "1851760",
    "end": "1860120"
  },
  {
    "text": "value so this is the implementation for the city",
    "start": "1860200",
    "end": "1865480"
  },
  {
    "text": "jet in a picture you can see it like this on the very left we have the user",
    "start": "1865480",
    "end": "1872559"
  },
  {
    "text": "written code in C++ this is what you saw in use before this is me calling the",
    "start": "1872559",
    "end": "1879519"
  },
  {
    "text": "ctin fun calling chat. listen chat. answer and listen",
    "start": "1879519",
    "end": "1884559"
  },
  {
    "text": "again this regular C++ code in the middle we can see chat is my",
    "start": "1884559",
    "end": "1890960"
  },
  {
    "text": "reper type and for this reper type I know inside this reper type I have the",
    "start": "1890960",
    "end": "1896360"
  },
  {
    "text": "promise type always whether This Promise type stores",
    "start": "1896360",
    "end": "1901799"
  },
  {
    "text": "additional information like it did in my case of chat whether it stores a couple of stood string a couple of integers or",
    "start": "1901799",
    "end": "1909200"
  },
  {
    "text": "nothing that's up to our implementation the compiler doesn't border there are no requirements my promise type can be",
    "start": "1909200",
    "end": "1914720"
  },
  {
    "text": "totally empty okay the repid type itself must contain the promised type whether",
    "start": "1914720",
    "end": "1921760"
  },
  {
    "text": "it comes with a function listen and answer whether you spell it with capital",
    "start": "1921760",
    "end": "1926919"
  },
  {
    "text": "case or anything else doesn't matter to the compiler so it's our implementation",
    "start": "1926919",
    "end": "1932840"
  },
  {
    "text": "we can also directly reach to the promise type because by exposing the handle as a",
    "start": "1932840",
    "end": "1939279"
  },
  {
    "text": "public member okay we are free to do so what do we store the coein handle in the",
    "start": "1939279",
    "end": "1945440"
  },
  {
    "text": "reper type is our decision compiler can live without that",
    "start": "1945440",
    "end": "1951360"
  },
  {
    "text": "but if you want to reach into the coroutine we need a coroutine handle but depending on the implementation we might",
    "start": "1951360",
    "end": "1957120"
  },
  {
    "text": "not need that so we have a couple of optional Parts in here for my repid",
    "start": "1957120",
    "end": "1962840"
  },
  {
    "text": "type on the right there we have the compiler implementation this is my co",
    "start": "1962840",
    "end": "1969639"
  },
  {
    "text": "routine you can see in there there is the original co- routine code so this the implementation of fun but that one",
    "start": "1969639",
    "end": "1975799"
  },
  {
    "text": "gets heavily transformed formed by the compiler I do not plan to show this",
    "start": "1975799",
    "end": "1981240"
  },
  {
    "text": "today but if you want to head over to C++ insides um I implemented this transformation so you can clse behind",
    "start": "1981240",
    "end": "1988559"
  },
  {
    "text": "the scenes of a coroutine and you will see the finite State machine there and how your original function gets",
    "start": "1988559",
    "end": "1994240"
  },
  {
    "text": "transformed but it's just blowing up and I think for today it's too",
    "start": "1994240",
    "end": "1999760"
  },
  {
    "text": "much so that means the compiler here rewrites my code and extracts",
    "start": "1999760",
    "end": "2004840"
  },
  {
    "text": "information like parameters and local variables they are not ending",
    "start": "2004840",
    "end": "2010519"
  },
  {
    "text": "up on the stack like normally they are ending up on the cortine frame okay so",
    "start": "2010519",
    "end": "2016960"
  },
  {
    "text": "this is the trick every variable you declare in a coutin and every parameter you have there it's not in its usual",
    "start": "2016960",
    "end": "2023720"
  },
  {
    "text": "spot it's on the coroutine frame compiler rewrites your code here that's",
    "start": "2023720",
    "end": "2029799"
  },
  {
    "text": "the trick and this is how you preserve all this information because it's in a storage bace that doesn't go away once",
    "start": "2029799",
    "end": "2036919"
  },
  {
    "text": "wants to return only if it destroyed a few definitions before we",
    "start": "2036919",
    "end": "2044360"
  },
  {
    "text": "continue um for the rest of this talk I will refer to a task as a core team that",
    "start": "2044360",
    "end": "2050158"
  },
  {
    "text": "does a job without returning a value just has a job it's a task I will refer",
    "start": "2050159",
    "end": "2056480"
  },
  {
    "text": "to a generator as a core te that does a job and returns a value either by co-",
    "start": "2056480",
    "end": "2062240"
  },
  {
    "text": "return or co- yield right I promise you to show you also the",
    "start": "2062240",
    "end": "2068200"
  },
  {
    "text": "helper types so here are they um we have suspend always and suspend",
    "start": "2068200",
    "end": "2075480"
  },
  {
    "text": "never in the standard library and we saw our customization Point sealed value",
    "start": "2075480",
    "end": "2081638"
  },
  {
    "text": "initial suspend final suspend and um the co we or a weight transform they all can",
    "start": "2081639",
    "end": "2088800"
  },
  {
    "text": "or have to return one of these customization points one again and",
    "start": "2088800",
    "end": "2095679"
  },
  {
    "text": "usually we use the functions in the standard library but we will also see that I sometimes",
    "start": "2095679",
    "end": "2102599"
  },
  {
    "text": "Implement them myself or modify them the only difference between suspend always and suspend never is practically that",
    "start": "2102599",
    "end": "2109240"
  },
  {
    "text": "suspend always in a way ready returns false and in suspend never it returns",
    "start": "2109240",
    "end": "2115320"
  },
  {
    "text": "true okay so that's the difference everything else is empty because it's a default implementation and there is",
    "start": "2115320",
    "end": "2122200"
  },
  {
    "text": "nothing sensible to do here all right",
    "start": "2122200",
    "end": "2127640"
  },
  {
    "text": "how are we doing are you up for say another",
    "start": "2127640",
    "end": "2132960"
  },
  {
    "text": "task in the leaving two St Vector objects okay couldn't that be",
    "start": "2132960",
    "end": "2139040"
  },
  {
    "text": "fun so I have two St vectors A and B and what I want to achieve is that I want to",
    "start": "2139040",
    "end": "2145920"
  },
  {
    "text": "get a value from a then from B then from a then from B then from a and so forth so interleaf should one of the two",
    "start": "2145920",
    "end": "2152760"
  },
  {
    "text": "vectors be smaller than the other one only the other one get gets printed out for the rest of the values okay so they",
    "start": "2152760",
    "end": "2161520"
  },
  {
    "text": "do not need to be balanced like I have it here on the slide how do we do that of course with a",
    "start": "2161520",
    "end": "2168160"
  },
  {
    "text": "cortin right with a couple of cortines maybe that's a fun here so I have a",
    "start": "2168160",
    "end": "2173839"
  },
  {
    "text": "coroutine in the Le why is it a coroutine because in line number four you can see it comes with a CO",
    "start": "2173839",
    "end": "2180480"
  },
  {
    "text": "yield actually that might be a false positive because that Co yield is inside the Lambda here yeah lambdas can be Coes",
    "start": "2180480",
    "end": "2188040"
  },
  {
    "text": "as well but if you go down you see in line number 12 another Coy yield in the",
    "start": "2188040",
    "end": "2193200"
  },
  {
    "text": "function in the Lea itself so starting at the top I have the",
    "start": "2193200",
    "end": "2198880"
  },
  {
    "text": "function interleaf that takes two two stood vectors of int A and B and inside",
    "start": "2198880",
    "end": "2205640"
  },
  {
    "text": "my ctin I create myself a Lambda lamp that one takes a St Vector of in by",
    "start": "2205640",
    "end": "2211800"
  },
  {
    "text": "reference and returns a generator the same type by the way that my coroutine",
    "start": "2211800",
    "end": "2217359"
  },
  {
    "text": "in the Le returns so this is the repid type they are obviously the same my",
    "start": "2217359",
    "end": "2222760"
  },
  {
    "text": "Lambda here has a real simple chop it implements a range based full loop which",
    "start": "2222760",
    "end": "2227839"
  },
  {
    "text": "goes over the stood Vector element by element and Co yields that element so practically every time you call it it",
    "start": "2227839",
    "end": "2234520"
  },
  {
    "text": "throws out the value of the St Vector the next one by the way so not randomly just the next one in line number seven",
    "start": "2234520",
    "end": "2241440"
  },
  {
    "text": "and eight I invoke the Lambda two times one was the parameter a and the second one one with the parameter B creating",
    "start": "2241440",
    "end": "2248960"
  },
  {
    "text": "myself two new coroutine handles if you so want X and",
    "start": "2248960",
    "end": "2255040"
  },
  {
    "text": "Epsilon and I can now use them as I do it in line number 10 where",
    "start": "2255040",
    "end": "2260200"
  },
  {
    "text": "you can see this y Loop which checks where X is not finished or Epsilon is",
    "start": "2260200",
    "end": "2266319"
  },
  {
    "text": "not finished so we are once again looking at member functions of my reper",
    "start": "2266319",
    "end": "2271560"
  },
  {
    "text": "type generator we haven't seen that one yet but we know it comes with the two functions fit or with the function",
    "start": "2271560",
    "end": "2278119"
  },
  {
    "text": "finished this y Loop construct is something that also occurs quite often",
    "start": "2278119",
    "end": "2283880"
  },
  {
    "text": "in core teens because they can yield an infinite",
    "start": "2283880",
    "end": "2289359"
  },
  {
    "text": "sequence of data so if you look for example to a network data stream you can",
    "start": "2289359",
    "end": "2297400"
  },
  {
    "text": "usually not say when it ends you can say that you want to close",
    "start": "2297400",
    "end": "2303240"
  },
  {
    "text": "the connection but as long as you're not doing that data com com in and comes in in the protocol layer you might know",
    "start": "2303240",
    "end": "2309760"
  },
  {
    "text": "when a message ended but you do not know up front when the data stream will end because the network cable is unplugged",
    "start": "2309760",
    "end": "2317119"
  },
  {
    "text": "or if nothing happens it might run for years so this is why you often have this",
    "start": "2317119",
    "end": "2322880"
  },
  {
    "text": "while constructs or infinite for Loops because some other condition terminates",
    "start": "2322880",
    "end": "2328560"
  },
  {
    "text": "that thing it's a little ugly and itchy for me coming from the embedded world that's usually a Cod smell having a",
    "start": "2328560",
    "end": "2335160"
  },
  {
    "text": "potentially infinite Loop but with cool routines it's a little different so in my y Loop here I'm checking whether X or",
    "start": "2335160",
    "end": "2342640"
  },
  {
    "text": "Epsilon still has values left okay this practically the check here and if so I'm",
    "start": "2342640",
    "end": "2348880"
  },
  {
    "text": "first processing X doing the same check again is X not finished yes then Co",
    "start": "2348880",
    "end": "2354319"
  },
  {
    "text": "yield the value of x and then resume X if you look closely you can see this",
    "start": "2354319",
    "end": "2362319"
  },
  {
    "text": "is the other way around as before so I'm grabing a value from the C routine and",
    "start": "2362319",
    "end": "2368040"
  },
  {
    "text": "then I'm resuming it it's all configuration and then I'm",
    "start": "2368040",
    "end": "2374079"
  },
  {
    "text": "doing the same thing for Epsilon in the same order so that means I first get a value from X if one is there and then",
    "start": "2374079",
    "end": "2380800"
  },
  {
    "text": "one from Epsilon is one there the promise type stores a integer",
    "start": "2380800",
    "end": "2390880"
  },
  {
    "text": "Val here I Implement get return object the same way as chat before I'm passing",
    "start": "2390880",
    "end": "2397319"
  },
  {
    "text": "the disp pointer to the Constructor and now look closely initial suspend this time says suspend never and",
    "start": "2397319",
    "end": "2405359"
  },
  {
    "text": "this is why I can immediately get a value from the core routine and then resume it because initial suspend was",
    "start": "2405359",
    "end": "2413480"
  },
  {
    "text": "passed and I or the cortin suspended at the first other suspension point which",
    "start": "2413480",
    "end": "2419960"
  },
  {
    "text": "is a COR yield so I let this coroutine run until it got the first value out of",
    "start": "2419960",
    "end": "2425319"
  },
  {
    "text": "this St vector that means I can immediately crap that value and after that resume the cotin",
    "start": "2425319",
    "end": "2431359"
  },
  {
    "text": "again final suspend and yield value return um always fals so we want to",
    "start": "2431359",
    "end": "2437200"
  },
  {
    "text": "suspend here and yeld value takes my integer stores it internally and returns",
    "start": "2437200",
    "end": "2442440"
  },
  {
    "text": "a default constructed stood always because my coroutine only Co",
    "start": "2442440",
    "end": "2449160"
  },
  {
    "text": "yields um I have to implement return void here to signal that this cortin",
    "start": "2449160",
    "end": "2455040"
  },
  {
    "text": "doesn't return anything should I flow through the end of the function so",
    "start": "2455040",
    "end": "2460200"
  },
  {
    "text": "should I escape the Y Loop there has to be something it's the implicit return void and therefore I have this",
    "start": "2460200",
    "end": "2467240"
  },
  {
    "text": "customization point and as previously unhandled exception is",
    "start": "2467240",
    "end": "2472880"
  },
  {
    "text": "empty my reper type generator now is the following I do the same as before I",
    "start": "2472920",
    "end": "2478960"
  },
  {
    "text": "shortcut my handle um I stood cortin handle of the promise",
    "start": "2478960",
    "end": "2484240"
  },
  {
    "text": "type and I implement a Constructor here for my generator",
    "start": "2484240",
    "end": "2491520"
  },
  {
    "text": "taking a promise type pointer does the same thing as before uses the static member function from promise to get to",
    "start": "2491520",
    "end": "2498560"
  },
  {
    "text": "the coroutine handle it's move constructible only copy construction is",
    "start": "2498560",
    "end": "2504079"
  },
  {
    "text": "disabled and I have my Destructor in here which takes care of clearing up the",
    "start": "2504079",
    "end": "2509359"
  },
  {
    "text": "Coe routine if it's still alive at this point I'm destroying it I have a member function Val value",
    "start": "2509359",
    "end": "2517240"
  },
  {
    "text": "that uses the cortin handles promise type to get to the value member get that",
    "start": "2517240",
    "end": "2523319"
  },
  {
    "text": "value out and I have this additional function finished here which checks whether my co routine is already done or",
    "start": "2523319",
    "end": "2530079"
  },
  {
    "text": "not and I have resume here which uses finished as the implementation",
    "start": "2530079",
    "end": "2535240"
  },
  {
    "text": "previously and if it's not finished and I call resume I call resume on the",
    "start": "2535240",
    "end": "2541440"
  },
  {
    "text": "coroutine handle so I let I added a little bit of abstraction here",
    "start": "2541440",
    "end": "2546760"
  },
  {
    "text": "so this is my generator my reper",
    "start": "2546760",
    "end": "2554200"
  },
  {
    "text": "type the usage is now the following I have my two stood vectors A and B as they were on the slide I create a",
    "start": "2554200",
    "end": "2562040"
  },
  {
    "text": "generated G by calling my co routine inter Le moving the two St vectors A and B into",
    "start": "2562040",
    "end": "2568880"
  },
  {
    "text": "the co routine and now I have another y Loop that calls g. finished and asks",
    "start": "2568880",
    "end": "2576319"
  },
  {
    "text": "whether that returns false and if so I'm see outing g. value and after that I'm",
    "start": "2576319",
    "end": "2582680"
  },
  {
    "text": "calling g. resume very nice and",
    "start": "2582680",
    "end": "2589040"
  },
  {
    "text": "easy totally ugly is also a fair judgment here that W",
    "start": "2589040",
    "end": "2596000"
  },
  {
    "text": "loop it's bad that you have to know in which order to call Value and resume ah",
    "start": "2596000",
    "end": "2602720"
  },
  {
    "text": "that just calls for long debug sessions um right so let's add another task I think there",
    "start": "2602720",
    "end": "2610200"
  },
  {
    "text": "is a plastic surgeon required not one that tempers with your facial muscles",
    "start": "2610200",
    "end": "2615359"
  },
  {
    "text": "but some that tempers with our coat because I'm sure we all would like to use a range bit for Loop instead of that",
    "start": "2615359",
    "end": "2622480"
  },
  {
    "text": "ugly W Loop here because that would make everything become more beautiful and a lot of questions go away how do we do",
    "start": "2622480",
    "end": "2630800"
  },
  {
    "text": "that simple we need to add support for range",
    "start": "2630800",
    "end": "2636200"
  },
  {
    "text": "base for Loop and we do that by satisfying the iterator concept so that",
    "start": "2636200",
    "end": "2641319"
  },
  {
    "text": "means my type here must be equal comparable increment and D referenceable",
    "start": "2641319",
    "end": "2647400"
  },
  {
    "text": "to be precise it must be not equal comparable but since C++ 20 we have the operator rewies and the inversions I can",
    "start": "2647400",
    "end": "2654760"
  },
  {
    "text": "stay on the positive side and implement the operator equals equals instead of the not",
    "start": "2654760",
    "end": "2660920"
  },
  {
    "text": "equals I do that by declaring a sentinel type here in line number one it's just a",
    "start": "2660920",
    "end": "2666720"
  },
  {
    "text": "simple TCH type and then I declare my iterator my iterator stores a CO routine handle it",
    "start": "2666720",
    "end": "2674119"
  },
  {
    "text": "implements the operator equals equals and that one takes the Sentinel type",
    "start": "2674119",
    "end": "2679280"
  },
  {
    "text": "it's just to invoke this function to make this Machinery work we do not want",
    "start": "2679280",
    "end": "2686280"
  },
  {
    "text": "to transfer any data at this point and my operator equals equals checks or",
    "start": "2686280",
    "end": "2691520"
  },
  {
    "text": "Returns the result of the check whether the ctin is already done or not",
    "start": "2691520",
    "end": "2697800"
  },
  {
    "text": "operator Plus+ the pre-increment operator of course because I do not pass an empty parameter here that one resumes",
    "start": "2697800",
    "end": "2705079"
  },
  {
    "text": "the cortine and returns a reference to the iterator and then finally my D reference",
    "start": "2705079",
    "end": "2712079"
  },
  {
    "text": "operator uh line number 17 reaches to the promise type wi the cortin handle",
    "start": "2712079",
    "end": "2719040"
  },
  {
    "text": "and therefore the member well and Returns the value so these are the three functions I",
    "start": "2719040",
    "end": "2726359"
  },
  {
    "text": "need the coroutine itself here has the entire state so I do not",
    "start": "2726359",
    "end": "2732599"
  },
  {
    "text": "need to spawn off other iterators I can simply use it like that and this code",
    "start": "2732599",
    "end": "2737920"
  },
  {
    "text": "here now um you either put it directly in the generator or you add a little bit",
    "start": "2737920",
    "end": "2744280"
  },
  {
    "text": "of generic parts to have one generic iterator and put it somewhere else",
    "start": "2744280",
    "end": "2749520"
  },
  {
    "text": "inside my reper type generator must provide two member functions begin and",
    "start": "2749520",
    "end": "2754880"
  },
  {
    "text": "end if I do not want want to go for the free functions of course begin here returns my iterator by creating an",
    "start": "2754880",
    "end": "2762839"
  },
  {
    "text": "iterator by passing the cortin handle and end here returns my Sentinel type so",
    "start": "2762839",
    "end": "2769319"
  },
  {
    "text": "this is just to have the Machinery work that I have something that I can compare begin and end with and because my",
    "start": "2769319",
    "end": "2775319"
  },
  {
    "text": "operator equals equals takes a sentinel type I can always compare to the end but",
    "start": "2775319",
    "end": "2780480"
  },
  {
    "text": "the quity knows the end I do not have to pass it in the actual call to end",
    "start": "2780480",
    "end": "2787240"
  },
  {
    "text": "usage wise I still have my two student vectors A and B I create my generator G",
    "start": "2787240",
    "end": "2793559"
  },
  {
    "text": "my cortine by calling the cortine inter Lea moving the two St vectors A and B",
    "start": "2793559",
    "end": "2798960"
  },
  {
    "text": "into the cortine and now the nice part is that I have a range based full loop",
    "start": "2798960",
    "end": "2804079"
  },
  {
    "text": "now where I can iterate overg grab a value and see out that one so all the",
    "start": "2804079",
    "end": "2809960"
  },
  {
    "text": "other abstraction is now gone no need to know whether to call resume or Value First",
    "start": "2809960",
    "end": "2816520"
  },
  {
    "text": "the abstraction does it so this is how I wanted to present it to my users the other part was",
    "start": "2816520",
    "end": "2824720"
  },
  {
    "text": "LLY all right we just have time for another",
    "start": "2825000",
    "end": "2830240"
  },
  {
    "text": "task scheduling multiple tasks isn't that a great task we don't do too much only",
    "start": "2830240",
    "end": "2837800"
  },
  {
    "text": "two so what I want to achieve is I want to schedule two tasks and the code",
    "start": "2837800",
    "end": "2844040"
  },
  {
    "text": "should roughly look like this I have a function use that creates aular object and it creates two tasks A and B and",
    "start": "2844040",
    "end": "2851400"
  },
  {
    "text": "passes the Schuler to these tasks and then later in line number eight it invokes schedule on the schuer",
    "start": "2851400",
    "end": "2858960"
  },
  {
    "text": "scheduling the two tasks that's the idea my two tasks are very",
    "start": "2858960",
    "end": "2864240"
  },
  {
    "text": "simple they are more or less the same the only difference is that one says a and the other one says",
    "start": "2864240",
    "end": "2870920"
  },
  {
    "text": "b so they say hello from task a a is back doing work work a is back doing",
    "start": "2870920",
    "end": "2877200"
  },
  {
    "text": "more work and between these three outputs they use Co weade to call",
    "start": "2877200",
    "end": "2884680"
  },
  {
    "text": "suspend on the schul so my schedular obviously comes with a suspend member",
    "start": "2884680",
    "end": "2890960"
  },
  {
    "text": "function as I said the two tasks are absolutely identical except for the A",
    "start": "2890960",
    "end": "2896079"
  },
  {
    "text": "and B part this Co weights",
    "start": "2896079",
    "end": "2901160"
  },
  {
    "text": "here there are in Cooperative multitasking where you give up control",
    "start": "2901160",
    "end": "2906280"
  },
  {
    "text": "because now another task can run so do not get interrupted like in regular concurrency multithreading where you",
    "start": "2906280",
    "end": "2913000"
  },
  {
    "text": "have to lock all your data structures against concurrent access here you say",
    "start": "2913000",
    "end": "2918599"
  },
  {
    "text": "when you want to give up that's the beauty my schedular",
    "start": "2918599",
    "end": "2924079"
  },
  {
    "text": "implementation uses a stood list of Quine handles of type white because I'm",
    "start": "2924079",
    "end": "2930839"
  },
  {
    "text": "not interested in the promise type I do not want to do anything in particular with this C",
    "start": "2930839",
    "end": "2936280"
  },
  {
    "text": "except for basic functionality checking whether it's done and resuming it I'm",
    "start": "2936280",
    "end": "2941319"
  },
  {
    "text": "happy with a void cortin handle type erased",
    "start": "2941319",
    "end": "2946640"
  },
  {
    "text": "erased in schedule here I grab the first entry in my list",
    "start": "2946680",
    "end": "2953359"
  },
  {
    "text": "of coroutine handles check whether this coroutine is done if not I resume it and",
    "start": "2953359",
    "end": "2959799"
  },
  {
    "text": "the result of schedule is to check whether my list of coroutines my list of",
    "start": "2959799",
    "end": "2965079"
  },
  {
    "text": "tasks is empty that's the result of schedule the implementation of suspend",
    "start": "2965079",
    "end": "2972040"
  },
  {
    "text": "now does something a little bit different than before I have this aito struct here but this time just to show",
    "start": "2972040",
    "end": "2979440"
  },
  {
    "text": "you a different approach I derive from suspend always the type we have in the standard",
    "start": "2979440",
    "end": "2986839"
  },
  {
    "text": "library and that should signal what this awaited does in general it suspends and",
    "start": "2986839",
    "end": "2993119"
  },
  {
    "text": "I'm overriding only the additional functions that change so because of that",
    "start": "2993119",
    "end": "2999119"
  },
  {
    "text": "inheritance I need a Constructor here to initialize my reference um to schedule",
    "start": "2999119",
    "end": "3005000"
  },
  {
    "text": "or SC but the only function I'm overwriting from suspend always is a",
    "start": "3005000",
    "end": "3010319"
  },
  {
    "text": "weight suspend remember a weight suspend can take a coroutine handle and this",
    "start": "3010319",
    "end": "3015480"
  },
  {
    "text": "time I'm interested in that coroutine handle because I use a weight suspend and the cortin handle I get here to",
    "start": "3015480",
    "end": "3022240"
  },
  {
    "text": "store that cortin handle in the schula this is why I have the reference here in",
    "start": "3022240",
    "end": "3027599"
  },
  {
    "text": "the task list at the end so I'm pushing back that cortine handle to the end of my task list and this is why this time",
    "start": "3027599",
    "end": "3035160"
  },
  {
    "text": "I'm interested in the Quin handle once the cortin gets suspended because I need",
    "start": "3035160",
    "end": "3040400"
  },
  {
    "text": "a way to resume it well the good thing now is that this",
    "start": "3040400",
    "end": "3047400"
  },
  {
    "text": "repper type and the promise type might be the shortest that you can write",
    "start": "3047400",
    "end": "3053480"
  },
  {
    "text": "that's it so my reper type task here it's only a vehicle for my promise",
    "start": "3053480",
    "end": "3061880"
  },
  {
    "text": "type it doesn't come with any additional member functions it doesn't come with any state it's totally careless it's",
    "start": "3061880",
    "end": "3069280"
  },
  {
    "text": "just hey compiler I'm the reper type but here is your promise type you're interested in that one and my promise",
    "start": "3069280",
    "end": "3076000"
  },
  {
    "text": "type is also quite simple because the reper type task this is default",
    "start": "3076000",
    "end": "3081480"
  },
  {
    "text": "constructible get return object simply returns a default construct the task object initial suspend and final suspend",
    "start": "3081480",
    "end": "3089200"
  },
  {
    "text": "this time Say Never we saw initial suspend previously saying never but",
    "start": "3089200",
    "end": "3094280"
  },
  {
    "text": "final suspend this time also says never because I have no um cor turn in this coroutine and it",
    "start": "3094280",
    "end": "3104520"
  },
  {
    "text": "can or it will flow through the end of the function and my reper type here does",
    "start": "3104520",
    "end": "3110160"
  },
  {
    "text": "not store a handle to the promise type there's no way to destroying the C here",
    "start": "3110160",
    "end": "3115960"
  },
  {
    "text": "but it needs to be destroyed right there's there's Heap memory behind it so if I say file suspend never because I do",
    "start": "3115960",
    "end": "3122440"
  },
  {
    "text": "not want to get a value after the final return the compiler will handle the destruction because final suspend never",
    "start": "3122440",
    "end": "3129520"
  },
  {
    "text": "means the compiler flows off the end of the entire Coe routine and that means it destroys it itself so this is the trick",
    "start": "3129520",
    "end": "3136599"
  },
  {
    "text": "here so this is why in this specific case final suspend is never but if you",
    "start": "3136599",
    "end": "3143000"
  },
  {
    "text": "do that and still want to get a value out you are in trouble because the memory already was deleted so this is",
    "start": "3143000",
    "end": "3149280"
  },
  {
    "text": "the combination you have to watch out for as I said because the Coe routine",
    "start": "3149280",
    "end": "3154400"
  },
  {
    "text": "doesn't return anything here I implement the customization Point return void empty of course these are all",
    "start": "3154400",
    "end": "3159839"
  },
  {
    "text": "customization points maybe you find for your application something sensible to do here maybe you want to lock this",
    "start": "3159839",
    "end": "3165359"
  },
  {
    "text": "state or whatsoever you can do it here and unhandled exceptions are also not",
    "start": "3165359",
    "end": "3171440"
  },
  {
    "text": "doing anything so this is one approach appr of implementing a very very basic schuer",
    "start": "3171440",
    "end": "3178480"
  },
  {
    "text": "using coroutines there's another one what if I say I still want to",
    "start": "3178480",
    "end": "3186400"
  },
  {
    "text": "implement the two tasks what we just saw but instead of having to pass the schul",
    "start": "3186400",
    "end": "3193040"
  },
  {
    "text": "to the tasks I make that one a clobal object because it's a schul it's always",
    "start": "3193040",
    "end": "3198359"
  },
  {
    "text": "there so maybe that's an okay idea so task A and B in this example do not take",
    "start": "3198359",
    "end": "3204520"
  },
  {
    "text": "any parameters we can see I have this G schedule or object here in line number six which",
    "start": "3204520",
    "end": "3211440"
  },
  {
    "text": "should indicate that we are looking at a global variable and that one now calls",
    "start": "3211440",
    "end": "3217359"
  },
  {
    "text": "schedule with that change my two task signatures A and B become different so",
    "start": "3217359",
    "end": "3223760"
  },
  {
    "text": "they obviously do not take any parameters anymore and that means they have to do something different for the",
    "start": "3223760",
    "end": "3229599"
  },
  {
    "text": "co we because they no longer can reach for the schedulers Coe function well let's see",
    "start": "3229599",
    "end": "3236160"
  },
  {
    "text": "global object so technically they can but I want to show you a different way here Co this time creates a default",
    "start": "3236160",
    "end": "3243960"
  },
  {
    "text": "constructed suspend object this is something I implemented so this is different they do",
    "start": "3243960",
    "end": "3250920"
  },
  {
    "text": "not reach for the global um object themselves the implementation of my",
    "start": "3250920",
    "end": "3257599"
  },
  {
    "text": "schuer here still uses a St list of void cortin",
    "start": "3257599",
    "end": "3263400"
  },
  {
    "text": "handles it come comes with another member function this time suspend which",
    "start": "3263400",
    "end": "3268880"
  },
  {
    "text": "takes a void coroutine handle and pushes that one back to the task list and schedule is the same",
    "start": "3268880",
    "end": "3276280"
  },
  {
    "text": "implementation as before get the first entry from the list see whether the ctin",
    "start": "3276280",
    "end": "3281720"
  },
  {
    "text": "is still resumable if so resume it and as a result return the amount of tasks",
    "start": "3281720",
    "end": "3288799"
  },
  {
    "text": "left in the list the different part this time is",
    "start": "3288799",
    "end": "3295720"
  },
  {
    "text": "this one here so first of all I have my global object static GCU here but I also",
    "start": "3295720",
    "end": "3302640"
  },
  {
    "text": "have the implementation of this struct suspend and I wanted to show you this",
    "start": "3302640",
    "end": "3307839"
  },
  {
    "text": "because there's another thing we got with cortin in C++ 20 and that's another",
    "start": "3307839",
    "end": "3314240"
  },
  {
    "text": "operator this is the co weight operator and this is what suspend here uses",
    "start": "3314240",
    "end": "3320640"
  },
  {
    "text": "suspend in line number four implements the co weight operator internally you can see I once again declare this waito",
    "start": "3320640",
    "end": "3328640"
  },
  {
    "text": "struct it deres from suspend always and this time the only function I'm",
    "start": "3328640",
    "end": "3333839"
  },
  {
    "text": "overwriting is a weight suspend it takes a void cortine handle and it calls T",
    "start": "3333839",
    "end": "3340760"
  },
  {
    "text": "sked do suspend passing the cortine handle in line number 10 then I'm",
    "start": "3340760",
    "end": "3347480"
  },
  {
    "text": "default constructing such an a waer object and returning that so my core weight operator here also returns",
    "start": "3347480",
    "end": "3354359"
  },
  {
    "text": "something like suspend always or suspend never so this is how you can have",
    "start": "3354359",
    "end": "3361960"
  },
  {
    "text": "something let's say more or less unrelated to your original coroutine that still can play together okay does",
    "start": "3361960",
    "end": "3370119"
  },
  {
    "text": "not have everything to be encoded into your reper type or",
    "start": "3370119",
    "end": "3376359"
  },
  {
    "text": "your promise type you can also split it a part so this is",
    "start": "3376359",
    "end": "3383920"
  },
  {
    "text": "scheduling tasks with coroutines",
    "start": "3383920",
    "end": "3390200"
  },
  {
    "text": "well what's next I don't know what's next for you I",
    "start": "3390200",
    "end": "3395599"
  },
  {
    "text": "hope um this talk leaves you in a state where you either say cines are great and beneficial thing to",
    "start": "3395599",
    "end": "3401760"
  },
  {
    "text": "C++ um I want to learn more or maybe you said well there was nothing new in this",
    "start": "3401760",
    "end": "3408160"
  },
  {
    "text": "talk for me I already knew that or you say oh gosh that guy so scared me away",
    "start": "3408160",
    "end": "3414319"
  },
  {
    "text": "from C what do I do next I have an answer for all three cases I believe it's a single answer so",
    "start": "3414319",
    "end": "3421440"
  },
  {
    "text": "it's perfect tomorrow same time but room number plus one if I'm right room number",
    "start": "3421440",
    "end": "3428839"
  },
  {
    "text": "four should it be at the same time there's a talk by Hannah also about cor",
    "start": "3428839",
    "end": "3434000"
  },
  {
    "text": "teens and knowing her I believe it's a very very great talk so if I got your interest in cortines or scared you away",
    "start": "3434000",
    "end": "3441400"
  },
  {
    "text": "whatever it is give it another try and and watch kind talk um I will be",
    "start": "3441400",
    "end": "3448079"
  },
  {
    "text": "there so that being said um if you're interested more in coroutines you can go",
    "start": "3448079",
    "end": "3454119"
  },
  {
    "text": "to my newsletter and C up my cotin cheat sheet which by the way Hanah helped to",
    "start": "3454119",
    "end": "3459880"
  },
  {
    "text": "bug fix and improve a little or you can grab my C++ 20 book in print or um",
    "start": "3459880",
    "end": "3466119"
  },
  {
    "text": "online addition it comes with coroutines explain and of course other C++ 20",
    "start": "3466119",
    "end": "3473559"
  },
  {
    "text": "parts that's it from my side um I'm happy to open the floor for questions",
    "start": "3473559",
    "end": "3480720"
  },
  {
    "text": "all I have to say is I am ftic thank",
    "start": "3480720",
    "end": "3485720"
  },
  {
    "text": "you thank you so are there any questions I'm not sure if we have a microphone but I can EO",
    "start": "3491760",
    "end": "3498960"
  },
  {
    "text": "them yes you said that a routine does not have a stack",
    "start": "3499240",
    "end": "3506720"
  },
  {
    "text": "what I said that a cortine does not have a stack or what um maybe I said that so",
    "start": "3507319",
    "end": "3516000"
  },
  {
    "text": "what I meant to say is um all the variables all the parameters",
    "start": "3516000",
    "end": "3523559"
  },
  {
    "text": "that we find in a CO routine they are not on the stack they are in a specific",
    "start": "3523559",
    "end": "3530240"
  },
  {
    "text": "Heap allocated piece of memory the cortine",
    "start": "3530240",
    "end": "3536079"
  },
  {
    "text": "itself um gets transformed by the compiler so in the end it's a normal",
    "start": "3536079",
    "end": "3543319"
  },
  {
    "text": "function um which is way bigger if you look at the transformation in C++ insides than your original code it comes",
    "start": "3543319",
    "end": "3550000"
  },
  {
    "text": "with the setup it comes practically with a big switch case switching over all",
    "start": "3550000",
    "end": "3555240"
  },
  {
    "text": "your suspension points figuring the index out so where you left index one index two index four so every suspension",
    "start": "3555240",
    "end": "3561119"
  },
  {
    "text": "Point practically becomes a number so this is the trick how you switch back",
    "start": "3561119",
    "end": "3566520"
  },
  {
    "text": "and this index is also on your HEAP the function itself then that one is on the",
    "start": "3566520",
    "end": "3573039"
  },
  {
    "text": "stack so but the usual variables usual candidates",
    "start": "3573039",
    "end": "3578839"
  },
  {
    "text": "where we are interested in they're in this Heap segment",
    "start": "3578839",
    "end": "3584319"
  },
  {
    "text": "so yes there is some stack involved but",
    "start": "3584319",
    "end": "3589480"
  },
  {
    "text": "um not that much I would say and then the Vital Information is preserved on the Heap frame so it's also not the case",
    "start": "3589480",
    "end": "3596520"
  },
  {
    "text": "that when we leave the cortine that the stack is moved into this Heap you're",
    "start": "3596520",
    "end": "3602720"
  },
  {
    "text": "always accessing or all the variables are rerouted to the Heap so there there is no copy phase um it's only the the",
    "start": "3602720",
    "end": "3610920"
  },
  {
    "text": "usual things that you need um for a function call that are on stack so",
    "start": "3610920",
    "end": "3618880"
  },
  {
    "text": "the register for the the return value for potential parameters and so forth um",
    "start": "3618880",
    "end": "3626520"
  },
  {
    "text": "after the the initial setup so after the first invocation of a CO routine your",
    "start": "3626520",
    "end": "3631680"
  },
  {
    "text": "subsequent calls will practically call A variation of the coroutine which gets",
    "start": "3631680",
    "end": "3639319"
  },
  {
    "text": "the um cortine frame point or pass to it so this is um how you can have one",
    "start": "3639319",
    "end": "3646680"
  },
  {
    "text": "quotin that that works with or is in created multiple times you only have one",
    "start": "3646680",
    "end": "3651880"
  },
  {
    "text": "time to code but the variable are outsourced in different um dynamic memory segments Does this answer a",
    "start": "3651880",
    "end": "3657920"
  },
  {
    "text": "question Perfect Peter do we have microphone or yes um",
    "start": "3657920",
    "end": "3663599"
  },
  {
    "text": "yeah we have one I think a lot of confusion is the",
    "start": "3663599",
    "end": "3668880"
  },
  {
    "text": "terminology of stackless and stack pool and it is kind of confusing it confused",
    "start": "3668880",
    "end": "3676319"
  },
  {
    "text": "me a lot and the stack full co- routines which are not in",
    "start": "3676319",
    "end": "3681680"
  },
  {
    "text": "C++ uh are in a way where you from within a co- routine you call other",
    "start": "3681680",
    "end": "3686960"
  },
  {
    "text": "functions and those functions can actually uh suspend to the original starting function of the original",
    "start": "3686960",
    "end": "3694319"
  },
  {
    "text": "coroutine in C++ we have stackless so the the suspension only goes one level",
    "start": "3694319",
    "end": "3700559"
  },
  {
    "text": "deep you cannot uh uh go deeper and that that's the this kind of confusion that",
    "start": "3700559",
    "end": "3706799"
  },
  {
    "text": "that uh tends to be there consider that if you have a u a DIY threading",
    "start": "3706799",
    "end": "3713160"
  },
  {
    "text": "infrastructure if you yield a threat it goes outside wherever other threats are",
    "start": "3713160",
    "end": "3719599"
  },
  {
    "text": "there with the uh stackless coroutines you only can more or less yield to the",
    "start": "3719599",
    "end": "3726079"
  },
  {
    "text": "direct immediate outside where you're let's say your that magic return type",
    "start": "3726079",
    "end": "3731319"
  },
  {
    "text": "with the handle is actually living that that's where you more or less return to perfect thanks more questions yeah we",
    "start": "3731319",
    "end": "3740240"
  },
  {
    "text": "have one",
    "start": "3740240",
    "end": "3746359"
  },
  {
    "text": "so things I I need I can simplify but you always mentions the things are",
    "start": "3746480",
    "end": "3753839"
  },
  {
    "text": "living in in Dynamic allocated memory and I didn't see any customization point",
    "start": "3753839",
    "end": "3761359"
  },
  {
    "text": "where I can get rid of the internal generated new where I can find this",
    "start": "3761359",
    "end": "3767680"
  },
  {
    "text": "information I could so to um rephrase your entire",
    "start": "3767680",
    "end": "3773799"
  },
  {
    "text": "question because the first part wasn't on the microphone thank you um you say that um you see cortines in",
    "start": "3773799",
    "end": "3781279"
  },
  {
    "text": "general as perfect thing for the embedded World um because it helps a lot",
    "start": "3781279",
    "end": "3787520"
  },
  {
    "text": "there but the uh one eye with a teardrop is the",
    "start": "3787520",
    "end": "3792640"
  },
  {
    "text": "Heap allocation that happens and does not seem to be customizable",
    "start": "3792640",
    "end": "3798039"
  },
  {
    "text": "um that in fact is an issue you can custom it in um you",
    "start": "3798039",
    "end": "3807279"
  },
  {
    "text": "can overload operator new okay um one tricky part is knowing",
    "start": "3807279",
    "end": "3816079"
  },
  {
    "text": "the um the entire size of the coroutine frame because that one obviously depends",
    "start": "3816079",
    "end": "3822680"
  },
  {
    "text": "on how many parameters you are passing to the coroutine and how many local variables do you have in the cortine so",
    "start": "3822680",
    "end": "3829160"
  },
  {
    "text": "this is nothing that you know in your generator up front I have have",
    "start": "3829160",
    "end": "3836559"
  },
  {
    "text": "a trickerish code snippet from Gore who",
    "start": "3836599",
    "end": "3841880"
  },
  {
    "text": "um was small as the creative coroutines in um C++ um I'm happy to share that with you",
    "start": "3841880",
    "end": "3850119"
  },
  {
    "text": "they use a two-step approach over Lambda so it's not necessarily nice or",
    "start": "3850119",
    "end": "3856039"
  },
  {
    "text": "beautiful but you can make it work so you can come to a bit more control",
    "start": "3856039",
    "end": "3863200"
  },
  {
    "text": "and if I'm correct then we are looking currently into that but the problem",
    "start": "3863200",
    "end": "3869359"
  },
  {
    "text": "is knowing how large this coroutine Frame ends up to at a very very early",
    "start": "3869359",
    "end": "3876559"
  },
  {
    "text": "stage during compilation so what you want to in a perfect world is having a",
    "start": "3876559",
    "end": "3882359"
  },
  {
    "text": "constant that tells you this cortin Frame is 100 bytes so then you know your",
    "start": "3882359",
    "end": "3888200"
  },
  {
    "text": "promise type size and so forth you can calculate that but you need that at compile time as a constant to allocate a",
    "start": "3888200",
    "end": "3894960"
  },
  {
    "text": "fixed size array thing so that's the usual so this is um this is the tricky",
    "start": "3894960",
    "end": "3900760"
  },
  {
    "text": "part even for implementers in compilers to get this Val value early enough as",
    "start": "3900760",
    "end": "3906200"
  },
  {
    "text": "far as I understood it the other thing that I know that a lot of",
    "start": "3906200",
    "end": "3911760"
  },
  {
    "text": "um embedded systems do as one iscape path is they",
    "start": "3911760",
    "end": "3917880"
  },
  {
    "text": "have an amount of time where Dynamic allocations are allowed during budup and",
    "start": "3917880",
    "end": "3923640"
  },
  {
    "text": "after that phase no allocations are allowed anymore so you set up everything you need up",
    "start": "3923640",
    "end": "3930319"
  },
  {
    "text": "front assuming knowing that you have enough dynamic memory and then after that there are no he allocations anymore",
    "start": "3930319",
    "end": "3936920"
  },
  {
    "text": "so this is one other way but both are not",
    "start": "3936920",
    "end": "3942839"
  },
  {
    "text": "perfect you're welcome all right maybe one last question before we close out if there is still",
    "start": "3942839",
    "end": "3950359"
  },
  {
    "text": "any all right perfect then thank you very much and enjoy NDC Tech",
    "start": "3952839",
    "end": "3957920"
  },
  {
    "text": "toone thank you",
    "start": "3957920",
    "end": "3962680"
  }
]