[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": "so good morning everyone thank you for coming it's good to see so many people here who are curious about Swift at",
    "start": "3560",
    "end": "10679"
  },
  {
    "text": "least I hope you're all curious about Swift uh it's a very deliberate choice of words in in my title that I selected",
    "start": "10679",
    "end": "16880"
  },
  {
    "text": "because I wanted to try and appeal to people who aren't necessarily intending to write Swift uh always keep an open",
    "start": "16880",
    "end": "23080"
  },
  {
    "text": "mind of course but um I think it's a healthy attitude uh as a developer to you know keep an eye on other",
    "start": "23080",
    "end": "28760"
  },
  {
    "text": "Technologies and languages see what's going on um and particular language like Swift which certainly in the Apple",
    "start": "28760",
    "end": "35000"
  },
  {
    "text": "ecosystem is becoming really important as we'll um we'll look at a little bit later uh and and how that might s leak",
    "start": "35000",
    "end": "41120"
  },
  {
    "text": "out into other ecosystems as well we'll touch a bit on that um so we are going",
    "start": "41120",
    "end": "46840"
  },
  {
    "text": "to look a little bit at the the the context and history that Swift exists in",
    "start": "46840",
    "end": "52480"
  },
  {
    "text": "but that said the majority of this session is going to be live coding um I want to show you what the language looks",
    "start": "52480",
    "end": "58719"
  },
  {
    "text": "like and how it feels um and the nature of live coding of course is it's a bit unpredictable I've",
    "start": "58719",
    "end": "64838"
  },
  {
    "text": "got um got seven demos to get through here uh most of them are quite short so don't let that put you off but um",
    "start": "64839",
    "end": "71360"
  },
  {
    "text": "remains to be seen if we'll get through all of them so we'll keep that open as well so I wanted to start with a bit of",
    "start": "71360",
    "end": "79560"
  },
  {
    "text": "the prehistory of Swift to to really put it into context and to really dig into",
    "start": "79560",
    "end": "86840"
  },
  {
    "start": "80000",
    "end": "447000"
  },
  {
    "text": "that we actually need to go right back to the early ' 80s toward beginning in the ' 80s uh Brad",
    "start": "86840",
    "end": "94320"
  },
  {
    "text": "Cox and Tom love at stepstone uh developed a new language called",
    "start": "94320",
    "end": "99680"
  },
  {
    "text": "Objective C which was basically the marriage of small talk and C uh to bring",
    "start": "99680",
    "end": "106560"
  },
  {
    "text": "um o to to the SE language see C++ was coming along at the same time there actually quite a few objectoriented",
    "start": "106560",
    "end": "113159"
  },
  {
    "text": "versions of C around um Objective C is one of the one of the few that survived to this day and uh there's a whole story",
    "start": "113159",
    "end": "121079"
  },
  {
    "text": "about um how objective SE evolved over the years which I'm not going to dig into too much I want to actually track a",
    "start": "121079",
    "end": "128000"
  },
  {
    "text": "parallel story that happened started happening around the same sort of time and then we'll see how they come together at the",
    "start": "128000",
    "end": "133680"
  },
  {
    "text": "end because the iconic year of 1984 came of course uh we're familiar with the uh",
    "start": "133680",
    "end": "140959"
  },
  {
    "text": "the book by um George Orwell of that name and apple in 1984 used that imagery",
    "start": "140959",
    "end": "148840"
  },
  {
    "text": "in a video for an advert that they ran in the Super Bowl to introduce a new",
    "start": "148840",
    "end": "154720"
  },
  {
    "text": "computer first time the world had seen this computer it was of course the very first Apple",
    "start": "154720",
    "end": "161319"
  },
  {
    "text": "Macintosh and it's difficult to really appreciate Looking Back Now just how revolutionary this computer was as a as",
    "start": "161319",
    "end": "168080"
  },
  {
    "text": "a mainstream Compu consumer computer um it was the first at least commercially",
    "start": "168080",
    "end": "174519"
  },
  {
    "text": "available graphical OS it's a graphical kind of gooey first",
    "start": "174519",
    "end": "180440"
  },
  {
    "text": "um brought you know Windows icons um the uh the mouse menus to the masses for the",
    "start": "180440",
    "end": "187959"
  },
  {
    "text": "first time but also had an unprecedented level of integration between the software and the hardware that's really",
    "start": "187959",
    "end": "194440"
  },
  {
    "text": "been Apple's key strength right from the beginning um remains so to this day for",
    "start": "194440",
    "end": "200280"
  },
  {
    "text": "better or worse people have different opinions on that but it definitely in the case of the Mac really resulted in a",
    "start": "200280",
    "end": "207360"
  },
  {
    "text": "a complete end to-end product that was not necessarily that commercially successful at the time but was",
    "start": "207360",
    "end": "212840"
  },
  {
    "text": "definitely highly regarded so that was in 1984 um if you fast forward just a few",
    "start": "212840",
    "end": "219959"
  },
  {
    "text": "more years to 1994 situation actually changed quite a",
    "start": "219959",
    "end": "226120"
  },
  {
    "text": "bit in the intervening years uh Steve Jobs of course the the co-founder of apple and also the the head of the U the",
    "start": "226120",
    "end": "233400"
  },
  {
    "text": "McIntosh team at the time had been pushed out of apple had gotone on to form his own company NeXT uh next",
    "start": "233400",
    "end": "240640"
  },
  {
    "text": "actually ended up licensing Objective C that's where that comes into the story and perform the basis of their uh Next",
    "start": "240640",
    "end": "247239"
  },
  {
    "text": "Step operating system Apple meantime were in trouble",
    "start": "247239",
    "end": "252599"
  },
  {
    "text": "because their operating system hadn't really moved on very much and uh even Windows was was coming along to to eat",
    "start": "252599",
    "end": "259600"
  },
  {
    "text": "its lunch uh not to mention os2 and other Platforms in fact there were two",
    "start": "259600",
    "end": "265960"
  },
  {
    "text": "uh key issues in the operating system Arena at the time that um basically they",
    "start": "265960",
    "end": "271960"
  },
  {
    "text": "they weren't so on these they were looking to uh to run out basically those two",
    "start": "271960",
    "end": "278520"
  },
  {
    "text": "issues are preemptive multitasking and protective memory turned out to be really tricky things to retrospectively",
    "start": "278520",
    "end": "284600"
  },
  {
    "text": "add to an operating system Apple had a few attempts uh the probably the biggest",
    "start": "284600",
    "end": "289919"
  },
  {
    "text": "one the last one it's called project Copeland they had a string of projects named after American",
    "start": "289919",
    "end": "296360"
  },
  {
    "text": "composers um and basically after a lot of setbacks by 1996 that project was",
    "start": "296360",
    "end": "302960"
  },
  {
    "text": "cancelled um famously Apple at this point was said to be uh days away from",
    "start": "302960",
    "end": "308639"
  },
  {
    "text": "bankruptcy unless they could you know pull off some some big stunt which they did they looked around for an external",
    "start": "308639",
    "end": "315759"
  },
  {
    "text": "operating system and they ended up buying next Steve Jobs company so that's how Steve Jobs came back into Apple of",
    "start": "315759",
    "end": "323479"
  },
  {
    "text": "course eventually became CEO again but importantly to our story brought the",
    "start": "323479",
    "end": "328600"
  },
  {
    "text": "next step operating system system in which uh formed the basis of the the Mac",
    "start": "328600",
    "end": "334520"
  },
  {
    "text": "OS 10 operating system so that the marriage of the Mac OS and next step and that",
    "start": "334520",
    "end": "341600"
  },
  {
    "text": "brought Objective C back in as well or rather brought it in for the first",
    "start": "341600",
    "end": "347000"
  },
  {
    "text": "time so what does this have to do with swift well we'll get to that but a",
    "start": "347000",
    "end": "353039"
  },
  {
    "text": "little bit more on this story because forward on a few more years Again by",
    "start": "353039",
    "end": "358440"
  },
  {
    "text": "2005 gu called John syracusa who if you're in the Apple ecosystem you",
    "start": "358440",
    "end": "363639"
  },
  {
    "text": "probably know the name well he wrote an article for AR Technica called avoiding Copeland 2010 that's a reference back to",
    "start": "363639",
    "end": "371560"
  },
  {
    "text": "that failed operating system project from the '90s that almost cost Apple",
    "start": "371560",
    "end": "376919"
  },
  {
    "text": "their business because they couldn't pull it off uh he was arguing they're facing another crisis of a similar scale",
    "start": "376919",
    "end": "383120"
  },
  {
    "text": "this time not to do with the operating system but to do with their main development language objectives was",
    "start": "383120",
    "end": "389960"
  },
  {
    "text": "Central to The Next Step but it was really showing its age and his argument",
    "start": "389960",
    "end": "395039"
  },
  {
    "text": "was that it didn't come up with a replacement a modern development language then they were going to be facing a similar problem that they",
    "start": "395039",
    "end": "402080"
  },
  {
    "text": "couldn't head off by pulling something out of the bag at the last minute they needed to be working on it well he said",
    "start": "402080",
    "end": "407840"
  },
  {
    "text": "by 2010 hence the name avoiding cop in 2010 well 2010 came and went not a word",
    "start": "407840",
    "end": "416199"
  },
  {
    "text": "from Apple which of course is Apple's way of doing things um 2011 came and",
    "start": "416199",
    "end": "422319"
  },
  {
    "text": "went and so on but soser actually wrote a follow-up article in 2010 where he he",
    "start": "422319",
    "end": "429360"
  },
  {
    "text": "Revisited uh this this idea and he basically said that the Advent of the iPhone in particular had sort of set the",
    "start": "429360",
    "end": "436199"
  },
  {
    "text": "clock back a little bit given Apple a little bit more time but his prediction was basically still sound they didn't",
    "start": "436199",
    "end": "441759"
  },
  {
    "text": "come up with this new language soon they were going to be in trouble finally we get to",
    "start": "441759",
    "end": "448360"
  },
  {
    "start": "447000",
    "end": "848000"
  },
  {
    "text": "2014 and and Craig fedi gets up on stage at WWDC the Apple developer conference",
    "start": "448360",
    "end": "454919"
  },
  {
    "text": "and says what if we could have Objective C without the C and he didn't he wasn't talking about",
    "start": "454919",
    "end": "461800"
  },
  {
    "text": "just a variation and Objective C he was talking about a whole new programming language which of course turned out to",
    "start": "461800",
    "end": "467720"
  },
  {
    "text": "be Swift in fact they even named it at the conference and even showed us a",
    "start": "467720",
    "end": "473919"
  },
  {
    "text": "teaser of some of the features that were going to be in the language and if you were Vel oper in the",
    "start": "473919",
    "end": "480000"
  },
  {
    "text": "appal system at the time um this was a really big deal because not only did",
    "start": "480000",
    "end": "486960"
  },
  {
    "text": "this language appear to have all of the features we've been asking for for all these years but it went far beyond that",
    "start": "486960",
    "end": "493039"
  },
  {
    "text": "as well in fact looking at some of these features we got uh quite a few that appear to be coming from functional",
    "start": "493039",
    "end": "498680"
  },
  {
    "text": "programming languages and there were a lot of questions about you know is Swift going to be a functional programming",
    "start": "498680",
    "end": "503840"
  },
  {
    "text": "language so we're going to ask that question as well but that was 2014 few years are",
    "start": "503840",
    "end": "510120"
  },
  {
    "text": "past since then you know how's it looking now I actually put these sides",
    "start": "510120",
    "end": "515240"
  },
  {
    "text": "together uh originally um last year so next few slides are from the uh",
    "start": "515240",
    "end": "522080"
  },
  {
    "text": "2016 uh stack Overflow developer survey uh I did go to um to refresh them",
    "start": "522080",
    "end": "529320"
  },
  {
    "text": "uh to bring the up to- dat numbers but um they hadn't changed that much and actually it wasn't quite as clear the",
    "start": "529320",
    "end": "535720"
  },
  {
    "text": "way they categorize things anymore so I've kept these ones bear in mind that things are slightly different now but um few of the graphs that I've",
    "start": "535720",
    "end": "543640"
  },
  {
    "text": "selected from from that survey that relate to Swift first of all most popular Technologies uh per Dev type in this",
    "start": "543640",
    "end": "550320"
  },
  {
    "text": "case mobile so Swift is obviously important in Mobile um and this is technologes not just languages so you",
    "start": "550320",
    "end": "556680"
  },
  {
    "text": "know we've got Android at the top there the first language there was Objective C but already last year followed closely",
    "start": "556680",
    "end": "564760"
  },
  {
    "text": "by Swift and I believe that has now overtaken it in the the latest developer survey but this is most popular not in",
    "start": "564760",
    "end": "571680"
  },
  {
    "text": "the sense of what people like necessarily but just what they're actually actively using so there's",
    "start": "571680",
    "end": "577680"
  },
  {
    "text": "obviously a huge Legacy uh code base of objective c code bases out there and",
    "start": "577680",
    "end": "583839"
  },
  {
    "text": "Swift was already overtaking it so that's actually quite amazing I think fact there we go there's uh",
    "start": "583839",
    "end": "590600"
  },
  {
    "text": "there's Swift there but another chart was most loved",
    "start": "590600",
    "end": "595959"
  },
  {
    "text": "so this is more about what people actually want and this was uh this languages so rust was top in the list",
    "start": "595959",
    "end": "602600"
  },
  {
    "text": "last year I think that's changed a bit this year and Swift was already number two which is amazing for a a language",
    "start": "602600",
    "end": "609959"
  },
  {
    "text": "that was just over a year old at the time uh F be number three I'm quite",
    "start": "609959",
    "end": "615040"
  },
  {
    "text": "pleased about it's one of my favorite languages as well but what's missing from this list is",
    "start": "615040",
    "end": "621320"
  },
  {
    "text": "objective c where does that coming well there was the most dreaded tab as well on there and Objective C is right there",
    "start": "621320",
    "end": "629040"
  },
  {
    "text": "at the bottom I think that says everything you you need to know about the um the",
    "start": "629040",
    "end": "634920"
  },
  {
    "text": "developer community's opinion of these two languages at least the ones that visit sack",
    "start": "634920",
    "end": "641360"
  },
  {
    "text": "overflow so the other thing that happened um just at the beginning of of",
    "start": "641360",
    "end": "647079"
  },
  {
    "text": "last year or December of the year before was as promised Swift went fully open source and I want to emphasize the word",
    "start": "647079",
    "end": "653519"
  },
  {
    "text": "fully because some open source projects um are sort of nomally Open Source",
    "start": "653519",
    "end": "658760"
  },
  {
    "text": "they'll do code drops every now and then but the actual development goes on uh privately uh that's not the case with",
    "start": "658760",
    "end": "664959"
  },
  {
    "text": "Swift in fact the whole uh git repository was was checked into to",
    "start": "664959",
    "end": "670200"
  },
  {
    "text": "GitHub you can actually go back and look at the very first commit made by Chris lner in",
    "start": "670200",
    "end": "676760"
  },
  {
    "text": "2010 remember that date uh we can see the whole thing there not only that but",
    "start": "676760",
    "end": "682399"
  },
  {
    "text": "moving forwards the um de development of the language the evolution of the language",
    "start": "682399",
    "end": "687920"
  },
  {
    "text": "uh is all going to be taking place or is now taking place in public on public forums and not just between Apple",
    "start": "687920",
    "end": "695320"
  },
  {
    "text": "employees but the whole Community is contributing there are Swift language features in in there now that have been",
    "start": "695320",
    "end": "700720"
  },
  {
    "text": "proposed and implemented by the community so this is a true open source project um a lot of people from outside",
    "start": "700720",
    "end": "707880"
  },
  {
    "text": "the Apple ecosystem don't necessarily appreciate that it's obviously initiated by Apple still controlled to a large",
    "start": "707880",
    "end": "713880"
  },
  {
    "text": "extent by Apple but it's it's a community language now that's important so",
    "start": "713880",
    "end": "720200"
  },
  {
    "text": "I mentioned that date we'll come back to that in a moment actually um WWDC the worldwide developers",
    "start": "720200",
    "end": "727399"
  },
  {
    "text": "conference where all the uh Apple developer news first comes out in um",
    "start": "727399",
    "end": "733320"
  },
  {
    "text": "last year's conference Swift 3E was announced uh and the first few versions",
    "start": "733320",
    "end": "738880"
  },
  {
    "text": "of Swift um it was actually promised right at the start that they would have um significant breaking changes between",
    "start": "738880",
    "end": "745040"
  },
  {
    "text": "releases so uh it's another reason that it's it's phenomenal that Swift has um",
    "start": "745040",
    "end": "750680"
  },
  {
    "text": "got such a wide acceptance so quickly uh on the basis that your codee's going to",
    "start": "750680",
    "end": "756279"
  },
  {
    "text": "be breaking regularly and you're going to have to fix it up uh it's been a pain point for many people but they've been prepared to take that on but a big push",
    "start": "756279",
    "end": "763240"
  },
  {
    "text": "with swift fre was to get those breaking changes out of the way as much as possible and stabilize the language at",
    "start": "763240",
    "end": "768680"
  },
  {
    "text": "least at the the language level so there's a lot of breaking changes in Swift 3 um and they they've achieved a",
    "start": "768680",
    "end": "775959"
  },
  {
    "text": "certain level of language stability now so Swift 4 was announced a couple of weeks ago um we've known for some time",
    "start": "775959",
    "end": "782399"
  },
  {
    "text": "what features are going to be in it because it's now developed in the open um and very very few actual breaking",
    "start": "782399",
    "end": "788079"
  },
  {
    "text": "changes so it's it all seems to be working all into the plan",
    "start": "788079",
    "end": "794320"
  },
  {
    "text": "um in fact I didn't uh come back to that that date must have deleted that",
    "start": "794320",
    "end": "799680"
  },
  {
    "text": "slide 2010 was also the the date that um John syracusa was pointing to in his",
    "start": "799680",
    "end": "807000"
  },
  {
    "text": "article and actually the um his follow-up article written in 2010 was",
    "start": "807000",
    "end": "812320"
  },
  {
    "text": "one month before that first checkin and the last time I gave this talk it was just pure speculation you know was that",
    "start": "812320",
    "end": "818839"
  },
  {
    "text": "actually a factor um and I you know I said at the time we probably never know and about a",
    "start": "818839",
    "end": "825480"
  },
  {
    "text": "month later Chris nler left apple and he we on all the podcasts and um one person",
    "start": "825480",
    "end": "831480"
  },
  {
    "text": "did ask him you know was that a factor and he actually admitted that it was on his mind at least when he decided to",
    "start": "831480",
    "end": "838040"
  },
  {
    "text": "start writing Swift so so yep just if you're writing for for an article on the internet uh you can actually change",
    "start": "838040",
    "end": "845680"
  },
  {
    "text": "things at this scale so that's the um the context that",
    "start": "845680",
    "end": "851839"
  },
  {
    "start": "848000",
    "end": "898000"
  },
  {
    "text": "this uh this appears in um want to get on to some code demos because I really want to show you what the language",
    "start": "851839",
    "end": "857480"
  },
  {
    "text": "itself is like so going to switch over to that now let's uh try there we",
    "start": "857480",
    "end": "866639"
  },
  {
    "text": "go and can you read that okay it's a interesting configuration",
    "start": "866639",
    "end": "872759"
  },
  {
    "text": "with the the screens in here so hopefully that's going to be okay for everyone now this is something called",
    "start": "872759",
    "end": "878759"
  },
  {
    "text": "Swift playgrounds uh it's part of xcode um and it's a really interesting",
    "start": "878759",
    "end": "886399"
  },
  {
    "text": "way of exploring the language and exploring language features or experimenting with with bits of code if",
    "start": "886399",
    "end": "892560"
  },
  {
    "text": "you've ever used a language of a raal before well it's like that but actually takes it even further show you what I",
    "start": "892560",
    "end": "898279"
  },
  {
    "start": "898000",
    "end": "1128000"
  },
  {
    "text": "mean if I just uh type some code here so",
    "start": "898279",
    "end": "903519"
  },
  {
    "text": "just initialize this this integer and you can see on the the right hand side we' got the evaluation of that code",
    "start": "903519",
    "end": "910199"
  },
  {
    "text": "pretty much immediately sometimes it takes a little while to catch up it's so it's not perfect uh so if I write",
    "start": "910199",
    "end": "916399"
  },
  {
    "text": "another one here oops if I can type again we see that come up",
    "start": "916399",
    "end": "923440"
  },
  {
    "text": "immediately then notice we've got an integer here and a string I haven't had to mention any types so first question",
    "start": "923440",
    "end": "930160"
  },
  {
    "text": "is is this a dynamic language or is it a you know static language with type inference and if we hover over this uh",
    "start": "930160",
    "end": "938800"
  },
  {
    "text": "string here we can ask it to tell us the type I don't know if you can read that",
    "start": "938800",
    "end": "944160"
  },
  {
    "text": "haven't increased the the font size for that but it is telling us that that's a string so this is type inference it it's",
    "start": "944160",
    "end": "950480"
  },
  {
    "text": "pretty good um better than say C++ is type inference inference but um not",
    "start": "950480",
    "end": "956639"
  },
  {
    "text": "quite as good as some functional languages uh okay now we can annotate our types if",
    "start": "956639",
    "end": "965120"
  },
  {
    "text": "we want to be explicit so type annotations suggest that the language is",
    "start": "965120",
    "end": "970480"
  },
  {
    "text": "is designed uh from the ground up to expect type inference as the default uh",
    "start": "970480",
    "end": "975680"
  },
  {
    "text": "you only annotate the types when you need to be explicit about them so most of the time we don't do",
    "start": "975680",
    "end": "981839"
  },
  {
    "text": "that we just let the compiler do its thing um there's a lot less um implicit conversions between types so is usually",
    "start": "981839",
    "end": "988279"
  },
  {
    "text": "pretty safe so what else can we do well let's try and add to that",
    "start": "988279",
    "end": "994319"
  },
  {
    "text": "string yeah to get our typical hello world and now we get an error if we have",
    "start": "994319",
    "end": "1000639"
  },
  {
    "text": "a look what the error says if I can move that up okay so it's telling us the left",
    "start": "1000639",
    "end": "1007319"
  },
  {
    "text": "side of the mutating operator that's the plus equals is immutable and it goes further strau is a",
    "start": "1007319",
    "end": "1013680"
  },
  {
    "text": "let constant so now that's telling us well let introduces the constant and it even",
    "start": "1013680",
    "end": "1019720"
  },
  {
    "text": "tells us what we can do to fix it we can change the let to VAR in fact if I click",
    "start": "1019720",
    "end": "1025798"
  },
  {
    "text": "here um again that's maybe a bit too small to read but it's telling us that we can we can fix it by changing L ofar",
    "start": "1025799",
    "end": "1032038"
  },
  {
    "text": "and it's done it automatically for us so it's a really productive environment to",
    "start": "1032039",
    "end": "1037240"
  },
  {
    "text": "to explore the language and um just mess about with things really so",
    "start": "1037240",
    "end": "1043400"
  },
  {
    "text": "we got let to introduce a constant or a name binding and and to introduce a variable",
    "start": "1043400",
    "end": "1049440"
  },
  {
    "text": "so this is already telling us a little bit about the character of the language so if you've used some sort of",
    "start": "1049440",
    "end": "1055120"
  },
  {
    "text": "traditional oo or imperative language like you know Java or C++ c um you'll",
    "start": "1055120",
    "end": "1061559"
  },
  {
    "text": "know that mutability is sort of the default and you have to add extra keywords to get something con or immutable like like the con keyword for",
    "start": "1061559",
    "end": "1068720"
  },
  {
    "text": "example um a a typical functional programming language where immutability",
    "start": "1068720",
    "end": "1073799"
  },
  {
    "text": "is the default you have to add the extra keyword to get mutability Swift is sort of playing it",
    "start": "1073799",
    "end": "1079919"
  },
  {
    "text": "down the middle it's it's just as much syntactical noise to introduce a constant as a as immutable variable so",
    "start": "1079919",
    "end": "1087000"
  },
  {
    "text": "it's sort of saying well I don't really have an opinion on this as a language you know you do what what you think is best but you know immutability is",
    "start": "1087000",
    "end": "1093720"
  },
  {
    "text": "important so that that's an interesting uh nod towards uh the character of the",
    "start": "1093720",
    "end": "1099400"
  },
  {
    "text": "language so we do that got our string now now we've been evaluating strings",
    "start": "1099400",
    "end": "1105000"
  },
  {
    "text": "but we can print them we've got a console down here at the bottom so there we go we printed our string um",
    "start": "1105000",
    "end": "1112799"
  },
  {
    "text": "so print is a function and we could also print our integer if we wanted to so it will just",
    "start": "1112799",
    "end": "1120480"
  },
  {
    "text": "automatically convert that to a string for us um but if we wanted to put the two together now we're going to do some",
    "start": "1120480",
    "end": "1126120"
  },
  {
    "text": "sort of string formatting and Swift has um string interpolation so what we do is we put",
    "start": "1126120",
    "end": "1133440"
  },
  {
    "start": "1128000",
    "end": "1528000"
  },
  {
    "text": "them sorry put the variables in round brackets within the string preceded by a a back SL uh we could do that for for",
    "start": "1133440",
    "end": "1141200"
  },
  {
    "text": "different types and there we got a formatted string now because that's interpolated",
    "start": "1141200",
    "end": "1149400"
  },
  {
    "text": "into the string we're not relying on the the print function actually doing its job for us so in fact rather than",
    "start": "1149400",
    "end": "1155799"
  },
  {
    "text": "printing it we can just assign that to another",
    "start": "1155799",
    "end": "1161200"
  },
  {
    "text": "variable there when it catches up there we go and then we've got a a formatted",
    "start": "1161200",
    "end": "1166400"
  },
  {
    "text": "string it's uh it's actually quite nice quite clean I think so what else can we",
    "start": "1166400",
    "end": "1176120"
  },
  {
    "text": "do so we have um",
    "start": "1177280",
    "end": "1183280"
  },
  {
    "text": "arrays one going to this too much because we'll come back to this in a minute so we got array literals we have",
    "start": "1183280",
    "end": "1189159"
  },
  {
    "text": "um dictionary literals so we can do our",
    "start": "1189159",
    "end": "1195799"
  },
  {
    "text": "mappings like this so you know any self-respecting modern language will let",
    "start": "1195799",
    "end": "1201000"
  },
  {
    "text": "you do this sort of thing what have I done wrong didn't put the equals in um so it's good to know that that",
    "start": "1201000",
    "end": "1207039"
  },
  {
    "text": "Swift has it all and now interestingly if we uh if we reference into um that",
    "start": "1207039",
    "end": "1214559"
  },
  {
    "text": "dictionary so you can see well we we' we've looked up uh one and got a value",
    "start": "1214559",
    "end": "1219640"
  },
  {
    "text": "back it looks like it's returned an integer but if if we assign that to another",
    "start": "1219640",
    "end": "1226760"
  },
  {
    "text": "variable here let it catch up again there we go can we inspect the value of",
    "start": "1226760",
    "end": "1233480"
  },
  {
    "text": "that um yeah you can't read that again but it's it's actually telling us that the type of X is int question",
    "start": "1233480",
    "end": "1242280"
  },
  {
    "text": "mark you may be familiar with this from some other languages but if not it's uh it might look a bit unusual in fact if",
    "start": "1242280",
    "end": "1248720"
  },
  {
    "text": "we create a um a new variable here let's make that a VAR actually we can give it",
    "start": "1248720",
    "end": "1255799"
  },
  {
    "text": "the type say string question mark wait for that to catch up and it's",
    "start": "1255799",
    "end": "1262760"
  },
  {
    "text": "giving us a nil we we can go back and with that dictionary do something similar here's a",
    "start": "1262760",
    "end": "1268360"
  },
  {
    "text": "a Miss on the dictionary gives us a nil so this looks like we've got pointers going on but actually Swift doesn't have",
    "start": "1268360",
    "end": "1274080"
  },
  {
    "text": "pointers at least not that are accessible at this level uh it's a very safe language what this is is an",
    "start": "1274080",
    "end": "1280000"
  },
  {
    "text": "optional type and in fact that question mark is just a syntactic shorthand for",
    "start": "1280000",
    "end": "1286400"
  },
  {
    "text": "an optional of string gives us the same thing um so we can now assign that",
    "start": "1286400",
    "end": "1295760"
  },
  {
    "text": "to give it a",
    "start": "1295760",
    "end": "1299120"
  },
  {
    "text": "value really can't type this morning so now it has a value so that's",
    "start": "1300880",
    "end": "1308320"
  },
  {
    "text": "good but then how do we work with optionals if we want to do something with the value well we we could test it",
    "start": "1308320",
    "end": "1314559"
  },
  {
    "text": "with an if statement like this we can compare it against nil um and then we might want to",
    "start": "1314559",
    "end": "1322799"
  },
  {
    "text": "say printed if we have it that works it's a bit clunky uh it's",
    "start": "1322799",
    "end": "1328679"
  },
  {
    "text": "not particularly safe and now we can see that it's evaluated to this this string",
    "start": "1328679",
    "end": "1333880"
  },
  {
    "text": "with optional in the name that's probably not what we wanted so we we want to get the value out of the optional but we can explicitly unwrap",
    "start": "1333880",
    "end": "1340600"
  },
  {
    "text": "the optional by putting the exclamation mark or or bang um symbol on the",
    "start": "1340600",
    "end": "1346520"
  },
  {
    "text": "end um there's a reason that that symbol was chosen because it looks like a warning you know there danger here if",
    "start": "1346520",
    "end": "1353480"
  },
  {
    "text": "you if you're using this in your code um you should probably think about whether there's an alternative way of doing it",
    "start": "1353480",
    "end": "1358760"
  },
  {
    "text": "and there is so you can do that but if we didn't have the if statement there",
    "start": "1358760",
    "end": "1366159"
  },
  {
    "text": "and we didn't have a value that then blows up at runtime with",
    "start": "1366159",
    "end": "1373000"
  },
  {
    "text": "a with a hard error it's going to terminate your your program so don't do that what you we do instead is we can",
    "start": "1373000",
    "end": "1380960"
  },
  {
    "text": "use something called an iflat and what that does is if the",
    "start": "1380960",
    "end": "1386360"
  },
  {
    "text": "optional has a value um our bound variable in in the let now has that",
    "start": "1386360",
    "end": "1391400"
  },
  {
    "text": "value unwrapped safely only within the scope of the condition",
    "start": "1391400",
    "end": "1396559"
  },
  {
    "text": "so now we can safely print it there and if I again remove that it's",
    "start": "1396559",
    "end": "1404159"
  },
  {
    "text": "not going to go into the statement so that's a much nicer way of doing things",
    "start": "1404159",
    "end": "1409200"
  },
  {
    "text": "now optionals are really important in Swift um they're actually quite a big deal for people who came from The",
    "start": "1409200",
    "end": "1414679"
  },
  {
    "text": "Objective C uh world and they're still coming to terms of it but it's a really Safe Way of of interacting with things",
    "start": "1414679",
    "end": "1421320"
  },
  {
    "text": "that may or may not have a value so there's actually a number of different ways that you can deal with optionals in Swift um going to show a few sort of as",
    "start": "1421320",
    "end": "1429600"
  },
  {
    "text": "we go further through some later demos um just one more I'm going to show now it's called Uh optional chaining so if",
    "start": "1429600",
    "end": "1437000"
  },
  {
    "text": "we look back at that string we had earlier earlier um so this is just a string not an optional we can get the",
    "start": "1437000",
    "end": "1443279"
  },
  {
    "text": "characters and get the counter characters on there by calling a method that's how we do that now if we wanted",
    "start": "1443279",
    "end": "1449559"
  },
  {
    "text": "to do that on our optional string well we could explicitly unwrap",
    "start": "1449559",
    "end": "1455640"
  },
  {
    "text": "it and then get characters. count but of course that'll blow up if it's um it",
    "start": "1455640",
    "end": "1463200"
  },
  {
    "text": "doesn't have a value as we have there what we can do instead is we can put a",
    "start": "1463200",
    "end": "1469080"
  },
  {
    "text": "question mark on the end of the value and that will now say if we have a",
    "start": "1469080",
    "end": "1474279"
  },
  {
    "text": "value now carry on and call the the method on it and so on if we don't have",
    "start": "1474279",
    "end": "1479399"
  },
  {
    "text": "a value we skip the rest of the the expression and just return a nil that's",
    "start": "1479399",
    "end": "1485440"
  },
  {
    "text": "why we got the nil there so if I put that value back in we now get the",
    "start": "1485440",
    "end": "1492480"
  },
  {
    "text": "value it's simple it's safe and you don't actually need to know that this is",
    "start": "1492480",
    "end": "1498440"
  },
  {
    "text": "is technically an example of a monadic binding built into the language in a hard-coded case you can just benefit",
    "start": "1498440",
    "end": "1504799"
  },
  {
    "text": "from from what that gives you instead there are way of ways of of doing magnetic binding more explicitly if that",
    "start": "1504799",
    "end": "1510799"
  },
  {
    "text": "sort of thing interests you um we're not going to cover that too much we'll touch on it a little bit later uh but there",
    "start": "1510799",
    "end": "1516760"
  },
  {
    "text": "there's a number of features like this sprinkled through the language to to Really make working with optionals uh safer and convenient which is quite",
    "start": "1516760",
    "end": "1524919"
  },
  {
    "text": "nice so that was the the first demo just to give you a little taster of some of",
    "start": "1524919",
    "end": "1531320"
  },
  {
    "start": "1528000",
    "end": "1823000"
  },
  {
    "text": "the the fundamentals of the language um we've just been dealing with values so far I'm going to go straight into",
    "start": "1531320",
    "end": "1538880"
  },
  {
    "text": "another demo where we we look at functions so let's define a function",
    "start": "1538880",
    "end": "1544600"
  },
  {
    "text": "to just say hello so I'm just going to",
    "start": "1544600",
    "end": "1552039"
  },
  {
    "text": "print something to the to the console so pretty simple no arguments no return",
    "start": "1552120",
    "end": "1557600"
  },
  {
    "text": "value um we use the funk keyword to introduce the function and we can call it much as",
    "start": "1557600",
    "end": "1564080"
  },
  {
    "text": "you might expect from most other languages you'd be familiar with uh and certainly not like Objective C um not",
    "start": "1564080",
    "end": "1571200"
  },
  {
    "text": "too many surprises there so let's parameterize that now with with an argument so let's say",
    "start": "1571200",
    "end": "1579679"
  },
  {
    "text": "um name make that a string of course you have to annotate the type here we can",
    "start": "1579679",
    "end": "1585399"
  },
  {
    "text": "use uh string interpolation here now",
    "start": "1585399",
    "end": "1590760"
  },
  {
    "text": "and you might expect that we can just",
    "start": "1590760",
    "end": "1596360"
  },
  {
    "text": "pass the string to the function like that but we can't it's saying we're",
    "start": "1596640",
    "end": "1602360"
  },
  {
    "text": "missing the argument label again we'll accept the um the Fixit so we have to label our arguments",
    "start": "1602360",
    "end": "1610399"
  },
  {
    "text": "by default this appears like um you may seen some languages that have um the",
    "start": "1610399",
    "end": "1617440"
  },
  {
    "text": "optional named arguments it's not quite like that uh this traces its lineage back to Objective C where the labels for",
    "start": "1617440",
    "end": "1625600"
  },
  {
    "text": "arguments were actually part of the method name in fact you insert the arguments into the um the signature of",
    "start": "1625600",
    "end": "1633440"
  },
  {
    "text": "the method it's really weird thing that most people new to Objective C really struggle with um they made it look a bit",
    "start": "1633440",
    "end": "1640200"
  },
  {
    "text": "more um familiar in Swift but it's still the same thing going on we have a bit more control though so we um we can",
    "start": "1640200",
    "end": "1647679"
  },
  {
    "text": "actually surpress the need for a label if we put an underscore up there so we can do that or",
    "start": "1647679",
    "end": "1653360"
  },
  {
    "text": "we can give it a different name um going to think of a better example",
    "start": "1653360",
    "end": "1660200"
  },
  {
    "text": "but we can do that so we got some control over it but",
    "start": "1660200",
    "end": "1665240"
  },
  {
    "text": "by default we have to name our arguments and this might seem a little bit um bit of a hassle but what it does is it",
    "start": "1665240",
    "end": "1672039"
  },
  {
    "text": "forces you to to make your methods much more readable and I'll uh hopefully",
    "start": "1672039",
    "end": "1677080"
  },
  {
    "text": "build this up into an example that shows that in a moment so if we um in fact yes that was the one that I",
    "start": "1677080",
    "end": "1684120"
  },
  {
    "text": "meant to do so that works now so what I've done here is we've",
    "start": "1684120",
    "end": "1690960"
  },
  {
    "text": "actually given two names to the argument so the first one is the external name that's that's the label the second name",
    "start": "1690960",
    "end": "1697559"
  },
  {
    "text": "is the internal name the name of the argument coming in look how this reads so the function",
    "start": "1697559",
    "end": "1704799"
  },
  {
    "text": "definition is say hello to name hello name and now the call is say hello to",
    "start": "1704799",
    "end": "1712640"
  },
  {
    "text": "Oslo it reads really nicely it doesn't always drop out quite so neatly as that",
    "start": "1712640",
    "end": "1719159"
  },
  {
    "text": "but actually very often it does it's actually a really nice property um of the language that of forces you to write",
    "start": "1719159",
    "end": "1724679"
  },
  {
    "text": "things in a way that makes things more more readable uh in natural",
    "start": "1724679",
    "end": "1729720"
  },
  {
    "text": "language so going to add a um another",
    "start": "1729720",
    "end": "1736440"
  },
  {
    "text": "function now uh let's say make greeting and this",
    "start": "1736440",
    "end": "1743640"
  },
  {
    "text": "time I'm going to parameterize the greeting itself so it's another string and then I'm going to have a name",
    "start": "1743640",
    "end": "1752200"
  },
  {
    "text": "again and this time we're going to return a string as well so we use this Arrow syntax after the function to say",
    "start": "1752200",
    "end": "1758919"
  },
  {
    "text": "what we're returning so now I'm going to just build",
    "start": "1758919",
    "end": "1763960"
  },
  {
    "text": "the string again using string interpolation",
    "start": "1763960",
    "end": "1770039"
  },
  {
    "text": "and now I can I can use that in uh in our say hello",
    "start": "1773000",
    "end": "1780240"
  },
  {
    "text": "function I've uh suppressed the first argument label so we can just say hello",
    "start": "1781159",
    "end": "1786279"
  },
  {
    "text": "there and then pass name that",
    "start": "1786279",
    "end": "1791399"
  },
  {
    "text": "should work it doesn't what did I",
    "start": "1791399",
    "end": "1796559"
  },
  {
    "text": "miss um missed the second label",
    "start": "1797039",
    "end": "1802840"
  },
  {
    "text": "okay there it's all working so now we've seen a function with two arguments uh",
    "start": "1803080",
    "end": "1808799"
  },
  {
    "text": "we've got suppressing a label including a label we got a return value so we've",
    "start": "1808799",
    "end": "1813840"
  },
  {
    "text": "seen most things that we can do with uh with functions now um interesting with the labels but",
    "start": "1813840",
    "end": "1820720"
  },
  {
    "text": "otherwise not nothing too complex yet so let's go a little bit further on",
    "start": "1820720",
    "end": "1827440"
  },
  {
    "start": "1823000",
    "end": "2210000"
  },
  {
    "text": "this our third demo and for this one going to",
    "start": "1827440",
    "end": "1832519"
  },
  {
    "text": "build up an array of language names so I did a talk on C++ yesterday",
    "start": "1832519",
    "end": "1840039"
  },
  {
    "text": "so we'll include that doing a talk on Swift now we'll include that I work at jet brain so let's put cotlin in there",
    "start": "1840039",
    "end": "1846720"
  },
  {
    "text": "because why not said earlier that F was one of my favorite languages let's",
    "start": "1846720",
    "end": "1852440"
  },
  {
    "text": "include that one and of course we'll put haskal in because that just makes it sound more impressive",
    "start": "1852440",
    "end": "1859519"
  },
  {
    "text": "so we've got a list of languages see what we can do with that so we've got a method salt here now if",
    "start": "1859519",
    "end": "1868360"
  },
  {
    "text": "we try and call that that's going to give us an error because actually the error in this case not so helpful",
    "start": "1868360",
    "end": "1875320"
  },
  {
    "text": "because what it really means is that this is a mutable method um we've Ed",
    "start": "1875320",
    "end": "1880480"
  },
  {
    "text": "that if we change that to V this will work it was F in place a big part of the",
    "start": "1880480",
    "end": "1885679"
  },
  {
    "text": "um the changes in in Swift last year was sort of formalizing this idea of mutable",
    "start": "1885679",
    "end": "1892320"
  },
  {
    "text": "and immutable um functions on on U objects",
    "start": "1892320",
    "end": "1897519"
  },
  {
    "text": "so if you got salt then you can predict that there'll also be a method called saled that will return uh a new array in",
    "start": "1897519",
    "end": "1905600"
  },
  {
    "text": "fact that's exactly what it does as we can see here got our sorted array but",
    "start": "1905600",
    "end": "1911360"
  },
  {
    "text": "now we've got a problem because this is the talk on Swift well we got C++ first",
    "start": "1911360",
    "end": "1916720"
  },
  {
    "text": "Swift is actually last in the Le that's not what we want at all so let's see if we can fix that OB we want to",
    "start": "1916720",
    "end": "1922760"
  },
  {
    "text": "sort the other way so if we come back a little bit we can see from our code",
    "start": "1922760",
    "end": "1928600"
  },
  {
    "text": "completion that there's another form of sorted that takes a function called by",
    "start": "1928600",
    "end": "1934240"
  },
  {
    "text": "which takes two strings and returns a Boolean so we can clearly see the the signature of this function that it takes",
    "start": "1934240",
    "end": "1940880"
  },
  {
    "text": "so let's try and use that to um to sort our uh languages backwards so one way we",
    "start": "1940880",
    "end": "1948080"
  },
  {
    "text": "can do that is to write a function here like we did in the last",
    "start": "1948080",
    "end": "1953320"
  },
  {
    "text": "demo we said it's going to take whoops two strings got S1 and",
    "start": "1953320",
    "end": "1960840"
  },
  {
    "text": "S2 and return a Boolean and all we want to",
    "start": "1960840",
    "end": "1967159"
  },
  {
    "text": "do is just provide an ordering between those two",
    "start": "1967159",
    "end": "1973120"
  },
  {
    "text": "strings and now sure enough we've got Swift first that's what we wanted so that's great that's what we wanted to do",
    "start": "1973120",
    "end": "1980120"
  },
  {
    "text": "but what year is this we had to write a full function there surely this language has closures",
    "start": "1980120",
    "end": "1987240"
  },
  {
    "text": "or lambdas depending on what you call them and of course it does so how can we use that let's grab that function and",
    "start": "1987240",
    "end": "1996200"
  },
  {
    "text": "I'm just going to drop that straight in it's not quite right yet Al if we can get rid of the fun keyword and the",
    "start": "1996200",
    "end": "2003039"
  },
  {
    "text": "name and now we just move that opening curly",
    "start": "2003039",
    "end": "2008600"
  },
  {
    "text": "brace Back to Before the list of arguments and replace it with the in",
    "start": "2008600",
    "end": "2013799"
  },
  {
    "text": "keyword and that's our Lambda that should now work it does so",
    "start": "2013799",
    "end": "2019639"
  },
  {
    "text": "that's nice so we're getting somewhere uh we're not saving a lot yet still quite a bit of code there but now we've",
    "start": "2019639",
    "end": "2026480"
  },
  {
    "text": "got this Lambda in context presumably we can take advantage of that type inference and and clean this up a bit",
    "start": "2026480",
    "end": "2032639"
  },
  {
    "text": "more so you know we know these Must Be Strings so yeah we can get rid of those don't know those anotations anymore same",
    "start": "2032639",
    "end": "2039159"
  },
  {
    "text": "with the return type we can get rid of that and in fact once you've done that",
    "start": "2039159",
    "end": "2046159"
  },
  {
    "text": "if the the body of the the Lambda is just a simple expression you don't even need the return keyword so we can get",
    "start": "2046159",
    "end": "2052599"
  },
  {
    "text": "rid of that as well in fact if I put that I put that on the next",
    "start": "2052599",
    "end": "2058398"
  },
  {
    "text": "line so we see the whole thing um by the way I would put this all on that line",
    "start": "2058399",
    "end": "2063679"
  },
  {
    "text": "but then it obscures the the evaluation on the right so I'll keep that down there",
    "start": "2063679",
    "end": "2068878"
  },
  {
    "text": "so we can also now now we've got rid of the types we can get rid of these round brackets as",
    "start": "2068879",
    "end": "2074960"
  },
  {
    "text": "well that's starting to look quite clean in fact I would be tempted to stop there",
    "start": "2074960",
    "end": "2081440"
  },
  {
    "text": "um I'm I'm quite happy with the readability of that but if you want you can go further so one thing we can do",
    "start": "2081440",
    "end": "2089320"
  },
  {
    "text": "because we just got two two strings there we immediately use them we can just do that with positional names we",
    "start": "2089320",
    "end": "2097280"
  },
  {
    "text": "don't need to introduce new names here so dollar 0 and dollar one gives us the first and second argument respectively",
    "start": "2097280",
    "end": "2104720"
  },
  {
    "text": "so we can get even further now you might be thinking at this point know that Sur that's as far as you can go we've got",
    "start": "2104720",
    "end": "2111280"
  },
  {
    "text": "some more tricks uh closures or lambas are so important in Swift that there's a number",
    "start": "2111280",
    "end": "2117359"
  },
  {
    "text": "of edge uh special cases to handle them um so most often um if you got a Lambda",
    "start": "2117359",
    "end": "2124520"
  },
  {
    "text": "as one of the arguments it'll be the last argument and where it is you can put outside of the round brackets so lose the label as well so we",
    "start": "2124520",
    "end": "2134040"
  },
  {
    "text": "could do that and if there are no arguments we can also get rid of the round brackets so we're almost at the limit",
    "start": "2134040",
    "end": "2140920"
  },
  {
    "text": "but not quite yet we can go further so let's get rid of that for a",
    "start": "2140920",
    "end": "2148160"
  },
  {
    "text": "second go back to our code completion so we saw that what we actually wanted was",
    "start": "2148160",
    "end": "2153200"
  },
  {
    "text": "a function that takes two strings and returns a Boolean and what the function is going",
    "start": "2153200",
    "end": "2158319"
  },
  {
    "text": "to do is provide an ordering on those two strings we already have a function",
    "start": "2158319",
    "end": "2163720"
  },
  {
    "text": "that does that in the standard Library it's called greater than so we can do",
    "start": "2163720",
    "end": "2171079"
  },
  {
    "text": "that um I would probably not do that I I was I was happy where we were earlier",
    "start": "2171079",
    "end": "2177280"
  },
  {
    "text": "but I think you can see how important lambdas are in Swift um there's lots of",
    "start": "2177280",
    "end": "2182520"
  },
  {
    "text": "different ways that you can do them with different degrees of uh expressiveness verbosity depending on what fits the",
    "start": "2182520",
    "end": "2189880"
  },
  {
    "text": "context that it's in um does mean that Swift is not a simple language there is",
    "start": "2189880",
    "end": "2196040"
  },
  {
    "text": "extra complexity because there these different ways of doing things um but you get a lot of conveniences for for the very common cases so again shows you",
    "start": "2196040",
    "end": "2203920"
  },
  {
    "text": "a bit of the the character of the language what it thinks is",
    "start": "2203920",
    "end": "2208680"
  },
  {
    "text": "important okay how are we doing got a a bit more talk about on the subject",
    "start": "2210480",
    "end": "2218160"
  },
  {
    "text": "of optionals let's bring our maybe string back again",
    "start": "2218160",
    "end": "2225079"
  },
  {
    "text": "uh that was what we had earlier so another thing we can do now we've looked at what we can do with",
    "start": "2226319",
    "end": "2234520"
  },
  {
    "text": "lambas there's a there's a method on on all optionals called map that if you've",
    "start": "2234520",
    "end": "2239880"
  },
  {
    "text": "worked with any functional language or or modern language you you should know exactly how that works and now you can see how we can use that in a very",
    "start": "2239880",
    "end": "2246599"
  },
  {
    "text": "succinct way um I'm going to use the in syntax here and just",
    "start": "2246599",
    "end": "2253319"
  },
  {
    "text": "print the result so when we map the optional we'll get the unwrapped value",
    "start": "2253319",
    "end": "2259359"
  },
  {
    "text": "in the map when use that to print it um but if you have used a functional language you'll be really cringing at",
    "start": "2259359",
    "end": "2265680"
  },
  {
    "text": "this because we've put a side effect in our map you should never really do that what you should be doing is Computing a",
    "start": "2265680",
    "end": "2271720"
  },
  {
    "text": "new value so let's do something like that um instead of printing it let's",
    "start": "2271720",
    "end": "2279280"
  },
  {
    "text": "lowercase it instead if I put that on the next line and see the evaluation",
    "start": "2279280",
    "end": "2285400"
  },
  {
    "text": "there you go now we got our lowercase string um so using map here is not buying as much we would have been much",
    "start": "2285400",
    "end": "2291160"
  },
  {
    "text": "cleaner just to use um uh anlet or optional chaining even would have done it uh so let's look at what else we can",
    "start": "2291160",
    "end": "2298920"
  },
  {
    "text": "do um going to introduce a uh an integer",
    "start": "2298920",
    "end": "2305839"
  },
  {
    "text": "now the constru for integers uh well there's a Constructor",
    "start": "2305839",
    "end": "2311119"
  },
  {
    "text": "that takes a string so we can pass a string to an integer and it will",
    "start": "2311119",
    "end": "2316160"
  },
  {
    "text": "automatically convert it for us at least it will when that catches up there we go but again if I hover over",
    "start": "2316160",
    "end": "2323800"
  },
  {
    "text": "and inspect the type um that's telling us that it's an in question mark so it's returning an optional which makes sense",
    "start": "2323800",
    "end": "2330480"
  },
  {
    "text": "because we can put a string in there that um that's not a a an integer like",
    "start": "2330480",
    "end": "2336560"
  },
  {
    "text": "this one and then then we get a nil that's what we would expect so let's now",
    "start": "2336560",
    "end": "2343680"
  },
  {
    "text": "create an array of strings that we want to interpret as numbers so we can't have a code demo",
    "start": "2343680",
    "end": "2351200"
  },
  {
    "text": "without the Fibonacci sequence so let's uh let's do that now so now we",
    "start": "2351200",
    "end": "2358520"
  },
  {
    "text": "can map our array",
    "start": "2358520",
    "end": "2365079"
  },
  {
    "text": "by uh that's right uh we want to convert it to an end didn't we",
    "start": "2365599",
    "end": "2372640"
  },
  {
    "text": "yeah so I use the positional arguments again Sor right let's put that on the",
    "start": "2372680",
    "end": "2378000"
  },
  {
    "text": "next line I'll do it this way ignore that right okay so that has",
    "start": "2378000",
    "end": "2385480"
  },
  {
    "text": "done the conversions but now each item in the resulting array is an optional um",
    "start": "2385480",
    "end": "2391240"
  },
  {
    "text": "and every item has a value so that's probably not what we wanted so let's map",
    "start": "2391240",
    "end": "2397079"
  },
  {
    "text": "again and well we know we can explicitly",
    "start": "2397079",
    "end": "2402880"
  },
  {
    "text": "whoops wrong currency explicitly unwrap the optional like",
    "start": "2402880",
    "end": "2408040"
  },
  {
    "text": "this now we've got our integers that's good but we've got an explicit unrap",
    "start": "2408040",
    "end": "2414000"
  },
  {
    "text": "what if we throw a spanner in the works now of course it uh blows up at",
    "start": "2414000",
    "end": "2422359"
  },
  {
    "text": "runtime so what we can do is we can add a filter in there",
    "start": "2422359",
    "end": "2428160"
  },
  {
    "text": "and say only continue if we're not equal to",
    "start": "2428160",
    "end": "2433640"
  },
  {
    "text": "nil now that all works we filtered out the things that are not integers and we've got our array of mapped integers",
    "start": "2434160",
    "end": "2441000"
  },
  {
    "text": "at the end uh so that's quite nice in fact that's such a common pattern that",
    "start": "2441000",
    "end": "2446880"
  },
  {
    "text": "there's a name for it in the functional programming world and Swift",
    "start": "2446880",
    "end": "2452280"
  },
  {
    "text": "provides just that method called flat map and we can do this",
    "start": "2452280",
    "end": "2459240"
  },
  {
    "text": "oops that gives this exactly the same thing in one step so flat map will",
    "start": "2464000",
    "end": "2469800"
  },
  {
    "text": "effectively flatten like a two-dimensional uh view of your um resulting",
    "start": "2469800",
    "end": "2477079"
  },
  {
    "text": "data so that's some some fun things that we can do with with functions and lambas",
    "start": "2477079",
    "end": "2483240"
  },
  {
    "text": "as well as optionals hope got time for",
    "start": "2483240",
    "end": "2489440"
  },
  {
    "start": "2486000",
    "end": "2926000"
  },
  {
    "text": "this next quick demo going up a slightly different tack now and for this demo",
    "start": "2489440",
    "end": "2495359"
  },
  {
    "text": "want us to imagine that we're writing uh a tool to help us to organize uh conferences so we want to take talk",
    "start": "2495359",
    "end": "2502480"
  },
  {
    "text": "submissions in um so let's imagine that we have an enum",
    "start": "2502480",
    "end": "2508119"
  },
  {
    "text": "for a a session type and this say do eoms and Swift use the case keyword but",
    "start": "2508119",
    "end": "2514319"
  },
  {
    "text": "it's otherwise much as you would expect so let's have say keynote um a sort of normal track",
    "start": "2514319",
    "end": "2521720"
  },
  {
    "text": "session like this one and we might have lightning talks as well so we're sort of starting to build up our model here",
    "start": "2521720",
    "end": "2528359"
  },
  {
    "text": "using enums so nothing too surprising yet so let's now imagine that we",
    "start": "2528359",
    "end": "2535280"
  },
  {
    "text": "have an instance of one of these uh let's make it this one a",
    "start": "2535280",
    "end": "2540680"
  },
  {
    "text": "keynote um there you know much as You' expect um so now let's imagine we want",
    "start": "2540680",
    "end": "2548599"
  },
  {
    "text": "to write a function that will give us the length of a particular talk",
    "start": "2548599",
    "end": "2556040"
  },
  {
    "text": "so going to take one of our session types and probably return an",
    "start": "2556040",
    "end": "2562760"
  },
  {
    "text": "integer so now we can do a switch on D",
    "start": "2562760",
    "end": "2568880"
  },
  {
    "text": "num oops wrong casing and again this looks much as you",
    "start": "2568880",
    "end": "2574359"
  },
  {
    "text": "would expect so we we've got each of our cases we're going to return um let's say",
    "start": "2574359",
    "end": "2582319"
  },
  {
    "text": "a keynote is uh 60 Minute there time um track",
    "start": "2582319",
    "end": "2589800"
  },
  {
    "text": "sessions um some conferences I go to the track sessions are actually 90 minutes",
    "start": "2589800",
    "end": "2595880"
  },
  {
    "text": "so let's um let's put that in so we' got a different time there and lightning talk make that five",
    "start": "2595880",
    "end": "2602200"
  },
  {
    "text": "minutes so now we can call that",
    "start": "2602200",
    "end": "2610039"
  },
  {
    "text": "function to tell us how long our Talk's going to be what did I do wrong there oh let's uh suppress the",
    "start": "2610640",
    "end": "2619559"
  },
  {
    "text": "label so yeah Del this a keynote 60 minutes that's fine let's uh put track",
    "start": "2619640",
    "end": "2625040"
  },
  {
    "text": "session in that's 90 minutes but um you might not be familiar with uh conferences",
    "start": "2625040",
    "end": "2631559"
  },
  {
    "text": "where the talks are 90 minutes and in fact a lot of conferences have different lengths for for the track session",
    "start": "2631559",
    "end": "2637800"
  },
  {
    "text": "uh so the Accu conference I was at just a few weeks ago they do 90minut sessions and 45 minute sessions so how can we",
    "start": "2637800",
    "end": "2645480"
  },
  {
    "text": "build that into our model we could just put some extra instances in our enum up",
    "start": "2645480",
    "end": "2651000"
  },
  {
    "text": "here we can have a 90minut track session a 45 minute track session but now we're sort of conflating two different things",
    "start": "2651000",
    "end": "2657800"
  },
  {
    "text": "because we'll often want to just decide whether this is a track session or a keynote or a lightning talk and other",
    "start": "2657800",
    "end": "2663720"
  },
  {
    "text": "times we want to get the length we want to keep those two things separate that nice if we could sort of associate a bit",
    "start": "2663720",
    "end": "2668800"
  },
  {
    "text": "more data with the enum value itself and in fact we can do exactly that so in",
    "start": "2668800",
    "end": "2675839"
  },
  {
    "text": "this case we might want to say well if it's a track session we've got an extra integer now that's going to give us some more some more",
    "start": "2675839",
    "end": "2682359"
  },
  {
    "text": "data so now in our declaration down here we can",
    "start": "2682359",
    "end": "2688920"
  },
  {
    "text": "construct it with let's give it 45 minute track session um now still saying it's 90",
    "start": "2688920",
    "end": "2696000"
  },
  {
    "text": "minutes to the bottom because we have haven't changed our talk L function yet so you don't have to worry about the",
    "start": "2696000",
    "end": "2703440"
  },
  {
    "text": "associated data here but if we do want to we can actually bind that value",
    "start": "2703440",
    "end": "2710000"
  },
  {
    "text": "directly out in the case statement and return that and if you've",
    "start": "2710000",
    "end": "2717680"
  },
  {
    "text": "used the language that has pattern matching you'll recognize this as as a pattern match so switch statements in",
    "start": "2717680",
    "end": "2725160"
  },
  {
    "text": "Swift are actually full pattern matches and enums are actually discriminated",
    "start": "2725160",
    "end": "2730280"
  },
  {
    "text": "unions uh or arithmetic data types so that's quite good but now we",
    "start": "2730280",
    "end": "2737119"
  },
  {
    "text": "can do things like I can create a 37 minute track session well that that's",
    "start": "2737119",
    "end": "2742359"
  },
  {
    "text": "probably not what we wanted to allow either how can we sort of get back some some safety that we had with the enum",
    "start": "2742359",
    "end": "2748240"
  },
  {
    "text": "have only been able to construct the uh the values that we wanted well we can have another enum for",
    "start": "2748240",
    "end": "2756040"
  },
  {
    "text": "session length and I can put just the cases that we support in there now we can't have",
    "start": "2756040",
    "end": "2762680"
  },
  {
    "text": "numeric cases but if we just use a leading underscore we can fake it so",
    "start": "2762680",
    "end": "2768000"
  },
  {
    "text": "let's say we want to have 15 minute 45 minute and 90",
    "start": "2768000",
    "end": "2773119"
  },
  {
    "text": "minute sessions now instead of an integer here I can just put session",
    "start": "2773119",
    "end": "2780039"
  },
  {
    "text": "Len down here well I could say session Len Dot",
    "start": "2780599",
    "end": "2787319"
  },
  {
    "text": "let's say 45 but actually because we know what type we're",
    "start": "2787319",
    "end": "2793800"
  },
  {
    "text": "passing in we can use type inference and it will infer the type of the enom itself so we can use this this shortcut where we just say dot but we we're using",
    "start": "2793800",
    "end": "2800720"
  },
  {
    "text": "that in the uh the case statement as well by the way so we're not quite done yet because for now we need to fix up um our talk L",
    "start": "2800720",
    "end": "2809200"
  },
  {
    "text": "now this is an enom we we'll need another function to deal with that so",
    "start": "2809200",
    "end": "2818838"
  },
  {
    "text": "uh let's call it Len oops that was right wasn't it yeah so",
    "start": "2820040",
    "end": "2827040"
  },
  {
    "text": "this will return another integer and we' got much the same",
    "start": "2827040",
    "end": "2835119"
  },
  {
    "text": "whoops that's the same thing going on here so 15 going to return 15 minutes I'll",
    "start": "2835559",
    "end": "2843520"
  },
  {
    "text": "cheat copy and paste",
    "start": "2843520",
    "end": "2848839"
  },
  {
    "text": "now we can just pass on to to that function",
    "start": "2853440",
    "end": "2860280"
  },
  {
    "text": "here that should now give us what we expected so yeah we've got 45 minutes we've got 15 minutes and we do",
    "start": "2860280",
    "end": "2868760"
  },
  {
    "text": "the same with 90 so it's important to actually follow",
    "start": "2868760",
    "end": "2875079"
  },
  {
    "text": "what's really going on here forget the language features for the moment what we've been able to build is an exact",
    "start": "2875079",
    "end": "2880960"
  },
  {
    "text": "model of our requirements that only allows us to construct values that are",
    "start": "2880960",
    "end": "2886000"
  },
  {
    "text": "valid if they're not valid it just won't let them won't let us construct them so it's concept called correct by",
    "start": "2886000",
    "end": "2892920"
  },
  {
    "text": "construction arithmetic data types and patent matching give us really powerful ways to to build models that work that",
    "start": "2892920",
    "end": "2898880"
  },
  {
    "text": "way with just a little bit of effort so if we get time there's some",
    "start": "2898880",
    "end": "2905960"
  },
  {
    "text": "refinements we can make to to that code to come back to it but um I wanted to come back to slides for a",
    "start": "2905960",
    "end": "2914440"
  },
  {
    "text": "second I can switch that back",
    "start": "2914440",
    "end": "2921720"
  },
  {
    "text": "so that's the one we go",
    "start": "2922599",
    "end": "2928319"
  },
  {
    "start": "2926000",
    "end": "3061000"
  },
  {
    "text": "because we showed values and expressions and functions some functional",
    "start": "2928319",
    "end": "2933599"
  },
  {
    "text": "programming techniques and all of this does tend to support this idea that Swift is a is a functional programming",
    "start": "2933599",
    "end": "2939680"
  },
  {
    "text": "language but is it what does it actually mean to be a functional programming",
    "start": "2939680",
    "end": "2945480"
  },
  {
    "text": "language so did did anyone here come to my functional C++ talk yesterday yeah one one or two people",
    "start": "2945480",
    "end": "2953160"
  },
  {
    "text": "because the next slide will be familiar because um I did the same thing in that talk I quoted from the hasool wiki uh",
    "start": "2953160",
    "end": "2960280"
  },
  {
    "text": "for a definition of what functional programming actually is because it may not be what you expect um says there",
    "start": "2960280",
    "end": "2966079"
  },
  {
    "text": "that functional programming is a style of programming Which models computations as the evaluation of",
    "start": "2966079",
    "end": "2972799"
  },
  {
    "text": "Expressions that's actually the the central defining concept to functional programming and bit further down the",
    "start": "2972799",
    "end": "2978720"
  },
  {
    "text": "same page clarifies a bit more in functional programming programs are executed by again evaluating expressions",
    "start": "2978720",
    "end": "2987640"
  },
  {
    "text": "in contrast with imperative programs where programs are composed of",
    "start": "2987640",
    "end": "2994200"
  },
  {
    "text": "statements which change Global State when EX Ed functional programming typically avoids using mutable state so",
    "start": "2994200",
    "end": "3000880"
  },
  {
    "text": "it's this interesting contrast between expressions and statements and if you look at Swift as a language Swift has",
    "start": "3000880",
    "end": "3008599"
  },
  {
    "text": "statements uh things like if statements switch statements um I went into this more in the Su Plus+ context yesterday",
    "start": "3008599",
    "end": "3015359"
  },
  {
    "text": "but basically this prevents it from being a true functional programming language so it's definitely a language",
    "start": "3015359",
    "end": "3020839"
  },
  {
    "text": "that's borrowed a lot of techniques and and Concepts from functional programming has good support for immutability but as",
    "start": "3020839",
    "end": "3027160"
  },
  {
    "text": "we saw it's not um not really favoring immutability as such so it's a pragmatic",
    "start": "3027160",
    "end": "3033119"
  },
  {
    "text": "language that tries to strike the line down the middle and we see this in a number of modern languages like rust and",
    "start": "3033119",
    "end": "3040040"
  },
  {
    "text": "cotlin as well very similar sort of you know giving equal weight to sort of O",
    "start": "3040040",
    "end": "3045480"
  },
  {
    "text": "and imperative Styles and and functional programming Styles U and Swift is is much the same in that",
    "start": "3045480",
    "end": "3051440"
  },
  {
    "text": "respect but we haven't really looked at the O side of Swift yet so",
    "start": "3051440",
    "end": "3057319"
  },
  {
    "text": "so I got think I've got time to do some",
    "start": "3057319",
    "end": "3062440"
  },
  {
    "start": "3061000",
    "end": "3256000"
  },
  {
    "text": "o demos so let's go back to the",
    "start": "3062440",
    "end": "3069720"
  },
  {
    "text": "playground and yeah starting with this one so we haven't looked at classes",
    "start": "3069720",
    "end": "3076839"
  },
  {
    "text": "yet so let's uh that's actually next page let's come down here and imagine",
    "start": "3076839",
    "end": "3083720"
  },
  {
    "text": "that we're going to continue this uh this idea of um something for modeling conference talks and we're going to",
    "start": "3083720",
    "end": "3089280"
  },
  {
    "text": "create a class for um",
    "start": "3089280",
    "end": "3094960"
  },
  {
    "text": "session so familiar syntax I'm sure but actually before I do that I'm",
    "start": "3094960",
    "end": "3102720"
  },
  {
    "text": "going to create a struct as well so what's the difference between a",
    "start": "3102720",
    "end": "3108400"
  },
  {
    "text": "struct and a class um depending on which language you have familiarity with you'll have a different answer to that",
    "start": "3108400",
    "end": "3113799"
  },
  {
    "text": "so in Swift it's much like um in c um certain other languages as well",
    "start": "3113799",
    "end": "3120520"
  },
  {
    "text": "where structs declare value types and classes def declare reference types so",
    "start": "3120520",
    "end": "3126760"
  },
  {
    "text": "it's a strict uh difference there so structs are typically immutable they",
    "start": "3126760",
    "end": "3132000"
  },
  {
    "text": "don't have to be um and they have a set of values so it's",
    "start": "3132000",
    "end": "3137440"
  },
  {
    "text": "our session type that we looked at earlier and I'm going to put some other information in there as well like uh",
    "start": "3137440",
    "end": "3144760"
  },
  {
    "text": "title and oops who the presenter",
    "start": "3144760",
    "end": "3151359"
  },
  {
    "text": "is so because those are all lets that means we have to construct our struct um",
    "start": "3153280",
    "end": "3159720"
  },
  {
    "text": "in a fully valid State and in fact if we don't add a Constructor explicitly we'll effectively get one for free where we",
    "start": "3159720",
    "end": "3167000"
  },
  {
    "text": "just populate it using the um uh the same name so let's create one of those down here",
    "start": "3167000",
    "end": "3175240"
  },
  {
    "text": "um like this so now I can say uh",
    "start": "3175240",
    "end": "3183599"
  },
  {
    "text": "oops should",
    "start": "3183599",
    "end": "3186799"
  },
  {
    "text": "be let's make that a 45 minute maybe a 90 minute track",
    "start": "3189280",
    "end": "3196400"
  },
  {
    "text": "session uh the title is Swift for the",
    "start": "3196400",
    "end": "3202720"
  },
  {
    "text": "curious and presenter funny enough is",
    "start": "3204440",
    "end": "3211798"
  },
  {
    "text": "me so but there something wrong there is it just catching",
    "start": "3212839",
    "end": "3218359"
  },
  {
    "text": "up did I miss not have added floating Point ah why is that",
    "start": "3223520",
    "end": "3231119"
  },
  {
    "text": "not oh I didn't put the uh underscore",
    "start": "3235440",
    "end": "3242400"
  },
  {
    "text": "see that should catch up now think it has",
    "start": "3243319",
    "end": "3248799"
  },
  {
    "text": "yep so we created our info so now we can put that in the class so we're going to use",
    "start": "3248799",
    "end": "3256720"
  },
  {
    "start": "3256000",
    "end": "3371000"
  },
  {
    "text": "let again there so to create a session you already have to add that info so that that info",
    "start": "3256720",
    "end": "3262480"
  },
  {
    "text": "is what a um a presenter would typically submit during the call for papers for",
    "start": "3262480",
    "end": "3267720"
  },
  {
    "text": "the for the conference but then you have additional information that won't be known uh initially for example the",
    "start": "3267720",
    "end": "3275559"
  },
  {
    "text": "date that the presentation is going to take place so we'll make that optional make it a mutable",
    "start": "3275559",
    "end": "3281680"
  },
  {
    "text": "variable so now we can uh we need to add a Constructor to",
    "start": "3281680",
    "end": "3288720"
  },
  {
    "text": "this so Constructors in Swift are called initializers let's use the init keyword",
    "start": "3288720",
    "end": "3294000"
  },
  {
    "text": "otherwise they look much like uh functions that don't return a",
    "start": "3294000",
    "end": "3300720"
  },
  {
    "text": "value and we can refer to self to disambiguate",
    "start": "3300720",
    "end": "3307359"
  },
  {
    "text": "between arguments and member variables or Fields so should be reasonably familiar",
    "start": "3307359",
    "end": "3315599"
  },
  {
    "text": "for anyone coming from from most objectoriented backgrounds nothing too um interesting just yet so now we can",
    "start": "3315599",
    "end": "3323520"
  },
  {
    "text": "construct one of those",
    "start": "3323520",
    "end": "3328319"
  },
  {
    "text": "like so catching up again and dat ah yes",
    "start": "3334000",
    "end": "3344599"
  },
  {
    "text": "so to use dates I need to um import Foundation I",
    "start": "3344599",
    "end": "3351880"
  },
  {
    "text": "think so let's say a library type yeah that's done it",
    "start": "3351880",
    "end": "3356960"
  },
  {
    "text": "so we have our session with a date um so at some point obviously we do know what",
    "start": "3356960",
    "end": "3363520"
  },
  {
    "text": "date we want to schedule that talk for so going to fill that out so we can say",
    "start": "3363520",
    "end": "3370920"
  },
  {
    "text": "session. equals and they you'd expect the date class to have some um nice",
    "start": "3370920",
    "end": "3377559"
  },
  {
    "start": "3371000",
    "end": "3600000"
  },
  {
    "text": "friendly Constructor that we can make a date with um but it turns out not because the date class actually comes",
    "start": "3377559",
    "end": "3384799"
  },
  {
    "text": "from The Objective C runtime uh originally NS date uh it's a very old class and it's not particularly friendly",
    "start": "3384799",
    "end": "3390839"
  },
  {
    "text": "so we got things like time interval since 1970 um I can't really do that",
    "start": "3390839",
    "end": "3396640"
  },
  {
    "text": "calculation in my head very easily these days so yeah you can uh you can find",
    "start": "3396640",
    "end": "3402680"
  },
  {
    "text": "some code online that will do the conversion for you if I",
    "start": "3402680",
    "end": "3408599"
  },
  {
    "text": "um remember rightly I should have a should have it in these clips",
    "start": "3408599",
    "end": "3415240"
  },
  {
    "text": "somewhere",
    "start": "3415240",
    "end": "3418240"
  },
  {
    "text": "that's the one so there we go I got this from stack",
    "start": "3422640",
    "end": "3429359"
  },
  {
    "text": "Overflow let's fix it up a little bit don't need to worry about what's going on here just that it works it's the main",
    "start": "3429359",
    "end": "3436440"
  },
  {
    "text": "thing so it takes a string and returns an optional date so now we can",
    "start": "3436440",
    "end": "3443000"
  },
  {
    "text": "say make date and give it a string",
    "start": "3443000",
    "end": "3450000"
  },
  {
    "text": "with uh what's the month it's the six isn't",
    "start": "3450000",
    "end": "3456280"
  },
  {
    "text": "it we need from",
    "start": "3458559",
    "end": "3462920"
  },
  {
    "text": "string that should yep give us the date I'll put it on the next line",
    "start": "3466760",
    "end": "3474119"
  },
  {
    "text": "again so we can see the evaluation uh in fact there we see it that's uh I",
    "start": "3474119",
    "end": "3481240"
  },
  {
    "text": "think today's date tomorrow's date actually isn't it you get the idea so yeah we can do",
    "start": "3481240",
    "end": "3488039"
  },
  {
    "text": "that and that's fine but if we're working a lot with dates it's um it's a",
    "start": "3488039",
    "end": "3493160"
  },
  {
    "text": "bit cumbersome having to use these helper functions it' be nice if that was actually built in as one of the constructors of",
    "start": "3493160",
    "end": "3498920"
  },
  {
    "text": "date and we can actually extend the date",
    "start": "3498920",
    "end": "3504640"
  },
  {
    "text": "class to do exactly that so going to",
    "start": "3504640",
    "end": "3512119"
  },
  {
    "text": "say extension date to extend it and you might see extension methods in in other",
    "start": "3512119",
    "end": "3518680"
  },
  {
    "text": "languages like C has has a syntax very similar usually you can only add additional methods but",
    "start": "3518680",
    "end": "3526000"
  },
  {
    "text": "here we're going to add a Constructor Which is less common so we'll make that",
    "start": "3526000",
    "end": "3531200"
  },
  {
    "text": "in it but remember also that our method wants to return an optional how can we",
    "start": "3531200",
    "end": "3536640"
  },
  {
    "text": "add that to a Constructor Swift has something called failable Constructors so in it question mark when",
    "start": "3536640",
    "end": "3543559"
  },
  {
    "text": "you construct one of these will actually give you an optional of that type so we're almost done and this is",
    "start": "3543559",
    "end": "3550520"
  },
  {
    "text": "where it gets a little bit weird um but I have to check my notes too even remember the syntax but what we need to",
    "start": "3550520",
    "end": "3557960"
  },
  {
    "text": "do um with in a failable Constructor is either um forward on to another",
    "start": "3557960",
    "end": "3564839"
  },
  {
    "text": "initializer or or return nil so it's a little bit weird we're either returning something or not so we say let date",
    "start": "3564839",
    "end": "3575880"
  },
  {
    "text": "equal this bit so we constructed our date now we",
    "start": "3575880",
    "end": "3581640"
  },
  {
    "text": "can fold on to another oops",
    "start": "3581640",
    "end": "3587079"
  },
  {
    "text": "Constructor and we'll have to use this one because it's",
    "start": "3587079",
    "end": "3593440"
  },
  {
    "text": "uh time interval colon",
    "start": "3593440",
    "end": "3598039"
  },
  {
    "text": "one so since this since time interval zero this",
    "start": "3598680",
    "end": "3606400"
  },
  {
    "text": "date uh ah yes that's what I missed if we've got a date we'll forward",
    "start": "3607760",
    "end": "3613200"
  },
  {
    "text": "on otherwise we'll return",
    "start": "3613200",
    "end": "3618400"
  },
  {
    "text": "nil so like I say it's a bit cumbersome um one of the little WS of the language",
    "start": "3618400",
    "end": "3624119"
  },
  {
    "text": "that I was hoping they would have sorted out by now um that going to work and now we",
    "start": "3624119",
    "end": "3632440"
  },
  {
    "text": "can actually use the date Constructor instead down",
    "start": "3632440",
    "end": "3637359"
  },
  {
    "text": "here still catching up and there we go that does seem to have",
    "start": "3638760",
    "end": "3645960"
  },
  {
    "text": "worked can't see the data in there now so we extended an existing Library class",
    "start": "3645960",
    "end": "3652440"
  },
  {
    "text": "with a new failable initializer and just a few lines of code I think that's quite a nice",
    "start": "3652440",
    "end": "3658720"
  },
  {
    "text": "property and another thing we can do I won't do",
    "start": "3658720",
    "end": "3665839"
  },
  {
    "text": "all of this but we had our helper functions for our enums earlier what we can actually do",
    "start": "3665839",
    "end": "3672920"
  },
  {
    "text": "is make those members of the enum so enums are first class types like",
    "start": "3672920",
    "end": "3680839"
  },
  {
    "text": "classes that can have uh methods on them so now rather than passing in our",
    "start": "3680839",
    "end": "3687720"
  },
  {
    "text": "session length we are one so to say self",
    "start": "3687720",
    "end": "3694359"
  },
  {
    "text": "here and that should work as",
    "start": "3694720",
    "end": "3700680"
  },
  {
    "text": "before in fact we can go a stage further and we can also",
    "start": "3701960",
    "end": "3708880"
  },
  {
    "text": "inherit interfaces on any them so we if we Implement custom string",
    "start": "3708880",
    "end": "3718799"
  },
  {
    "text": "convertible standard Library interface or protocol in Swift terms",
    "start": "3718799",
    "end": "3726039"
  },
  {
    "text": "that has one method it's actually a property called",
    "start": "3726039",
    "end": "3731440"
  },
  {
    "text": "duration and this is the Syntax for a property if we do that then this enum",
    "start": "3731440",
    "end": "3736839"
  },
  {
    "text": "automatically becomes convertible to a string",
    "start": "3736839",
    "end": "3742000"
  },
  {
    "text": "uh sorry to an integer that's not the one I wanted was it",
    "start": "3742000",
    "end": "3749759"
  },
  {
    "text": "okay yeah getting ahead of",
    "start": "3750279",
    "end": "3753960"
  },
  {
    "text": "myself but we can write that as a property and now we can come back down here and instead say",
    "start": "3756279",
    "end": "3766039"
  },
  {
    "text": "um",
    "start": "3766039",
    "end": "3769039"
  },
  {
    "text": "turn l. duration",
    "start": "3773359",
    "end": "3777838"
  },
  {
    "text": "so I I'll skip over the the custom string convertible bit um but enums can",
    "start": "3779480",
    "end": "3785720"
  },
  {
    "text": "conform to protocols and you can also extend enums in the same way that we we saw we date",
    "start": "3785720",
    "end": "3792119"
  },
  {
    "text": "so there's actually really good o support in Swift uh with with extensions",
    "start": "3792119",
    "end": "3797760"
  },
  {
    "text": "you can even extend a type an existing type to implement a new interface it's",
    "start": "3797760",
    "end": "3804079"
  },
  {
    "text": "actually something that I've not really seen in in any other language uh which if you think about it is a really",
    "start": "3804079",
    "end": "3810160"
  },
  {
    "text": "powerful concept because it allows you to take take a type that has one interface and make it conform to some",
    "start": "3810160",
    "end": "3816760"
  },
  {
    "text": "other interface that wasn't intended at the time allows you to make different types work together even though they've",
    "start": "3816760",
    "end": "3823480"
  },
  {
    "text": "been written entirely independently so I don't think we've got time to to show that one now because I",
    "start": "3823480",
    "end": "3831079"
  },
  {
    "text": "wanted to get on to one more demo",
    "start": "3831079",
    "end": "3836599"
  },
  {
    "text": "because this one's quite quite fun actually um I'm going to bring up my",
    "start": "3836599",
    "end": "3841839"
  },
  {
    "text": "Snippets again to see this",
    "start": "3841839",
    "end": "3847240"
  },
  {
    "text": "one so let's find",
    "start": "3847240",
    "end": "3853640"
  },
  {
    "text": "that here's the one all",
    "start": "3854160",
    "end": "3858160"
  },
  {
    "text": "right so this is based on a um a sample I I found in a book and I thought it's",
    "start": "3860839",
    "end": "3866880"
  },
  {
    "text": "quite a nice um example uh to start with so what it's",
    "start": "3866880",
    "end": "3873480"
  },
  {
    "text": "doing is it's using the Google suggest API so this is going out to the network to the internet to to look up uh Search",
    "start": "3873480",
    "end": "3881480"
  },
  {
    "text": "terms in real time uh so I've commented some of this out because um some of this",
    "start": "3881480",
    "end": "3887319"
  },
  {
    "text": "is going to cause a problem that let's uh let's put that in for a second because there are some problems",
    "start": "3887319",
    "end": "3894480"
  },
  {
    "text": "with this as it's currently written uh so what I'm going to do",
    "start": "3894480",
    "end": "3901200"
  },
  {
    "text": "is call this this function with string",
    "start": "3901200",
    "end": "3907640"
  },
  {
    "text": "um so let's put a Search terms y do and now look you can see on",
    "start": "3908000",
    "end": "3915680"
  },
  {
    "text": "the right hand side it's actually evaluating this by going out to the internet and getting the top Search",
    "start": "3915680",
    "end": "3921599"
  },
  {
    "text": "terms for for y do um not not particular good ones today",
    "start": "3921599",
    "end": "3926680"
  },
  {
    "text": "sometimes they're a bit more fun uh we could put anything we want in there but what happens if we don't have",
    "start": "3926680",
    "end": "3934520"
  },
  {
    "text": "Internet let's turn the Wi-Fi off and f that to refresh uh now it",
    "start": "3934520",
    "end": "3941520"
  },
  {
    "text": "falls over horribly because there's no error handling in this we've got number of things going on we've got pausing of",
    "start": "3941520",
    "end": "3947440"
  },
  {
    "text": "URLs we got calls out to the internet um and then we got pausing of Jason coming",
    "start": "3947440",
    "end": "3953440"
  },
  {
    "text": "back there's all sorts of places this can go wrong uh but we're just not handling it at all",
    "start": "3953440",
    "end": "3959279"
  },
  {
    "text": "so what we could do is uh say um take this one where we are",
    "start": "3959279",
    "end": "3966520"
  },
  {
    "text": "constructing a URL object this first basic can go wrong we could put an IFL",
    "start": "3966520",
    "end": "3972079"
  },
  {
    "text": "around this because it returns an optional rather than that exclamation mark at the end then we're going to have to indent",
    "start": "3972079",
    "end": "3978599"
  },
  {
    "text": "everything underneath it and then we'll go to the next F and we're going to indent that as well and so on and we get",
    "start": "3978599",
    "end": "3984319"
  },
  {
    "text": "what a lot of people call the Pyramid of Doom or the arrow of Doom where everything just gets indented for the",
    "start": "3984319",
    "end": "3989520"
  },
  {
    "text": "sake of the error handling which is not really what you want so instead of if letting we can use another construct",
    "start": "3989520",
    "end": "3996240"
  },
  {
    "text": "called godlet and this works the way around it says we'll continue on if we've got the",
    "start": "3996240",
    "end": "4002440"
  },
  {
    "text": "value else we'll do the error handling bit so",
    "start": "4002440",
    "end": "4008640"
  },
  {
    "text": "let's return um we're returning an array of string so return an empty",
    "start": "4008640",
    "end": "4014520"
  },
  {
    "text": "one and we can do that with with all of these so we've got another exclamation mark there we can get rid",
    "start": "4014520",
    "end": "4021520"
  },
  {
    "text": "of and again here we got a few of them actually so I'll convert that",
    "start": "4024520",
    "end": "4032760"
  },
  {
    "text": "to work with",
    "start": "4032760",
    "end": "4036160"
  },
  {
    "text": "optionals and then finally whoops getting the uh the result out we're",
    "start": "4038839",
    "end": "4044520"
  },
  {
    "text": "assuming its position",
    "start": "4044520",
    "end": "4047520"
  },
  {
    "text": "so you guys key word is doing a cast right that should now work what did",
    "start": "4052880",
    "end": "4061799"
  },
  {
    "text": "I miss expect did I miss an else",
    "start": "4061799",
    "end": "4067039"
  },
  {
    "text": "yeah here still missing",
    "start": "4067039",
    "end": "4074240"
  },
  {
    "text": "something and necessary not",
    "start": "4074240",
    "end": "4077960"
  },
  {
    "text": "unwrapped is that that one",
    "start": "4084240",
    "end": "4088160"
  },
  {
    "text": "no quite sure the Miss there let's put that back I think we need to split that",
    "start": "4089520",
    "end": "4096719"
  },
  {
    "text": "up okay that's now working it's um it's aing out here so we've got our empty",
    "start": "4096719",
    "end": "4104040"
  },
  {
    "text": "empty string but maybe we want better error handling rather than just returning an empty array we want",
    "start": "4104040",
    "end": "4110719"
  },
  {
    "text": "something that tells us what actually went wrong so Swift has something that looks like",
    "start": "4110719",
    "end": "4118520"
  },
  {
    "text": "exceptions um with many of the same constructs but it's not exactly what",
    "start": "4118520",
    "end": "4123640"
  },
  {
    "text": "you'll be familiar with in most other languages and in fact in a way it's more of an encoding in the language of um the",
    "start": "4123640",
    "end": "4131400"
  },
  {
    "text": "result moned that functional programmers may be familiar with made to look like",
    "start": "4131400",
    "end": "4136679"
  },
  {
    "text": "exceptions so the first thing we need to do is put the froze keyword on the",
    "start": "4136679",
    "end": "4142400"
  },
  {
    "text": "function so it's part of the function's type or its contract to say this this function froze a",
    "start": "4142400",
    "end": "4149798"
  },
  {
    "text": "uh an exception and that means that the call site now has to handle that and it",
    "start": "4149799",
    "end": "4156640"
  },
  {
    "text": "won't compile if you don't so you had to say",
    "start": "4156640",
    "end": "4162238"
  },
  {
    "text": "try make that call for it to compile that's not compiling phas my oh put the wrong",
    "start": "4163239",
    "end": "4172880"
  },
  {
    "text": "place okay goes there now actually what try will do is",
    "start": "4174400",
    "end": "4179798"
  },
  {
    "text": "it will propagate the exception if it's thrown but there's two Alternatives we can also use we can use try question",
    "start": "4179799",
    "end": "4185520"
  },
  {
    "text": "mark and that's interesting because that will convert the exception to an optional so if we don't want to deal",
    "start": "4185520",
    "end": "4191318"
  },
  {
    "text": "with exceptions we can stop it at this point or we can do try exclamation mark and that will be a hard error at this",
    "start": "4191319",
    "end": "4197159"
  },
  {
    "text": "point so we've got quite a bit of um scope for what we want to do with that so going to go with just",
    "start": "4197159",
    "end": "4204199"
  },
  {
    "text": "try and then we can put a a throw",
    "start": "4204199",
    "end": "4211199"
  },
  {
    "text": "here and what we'll throw is an enum",
    "start": "4211199",
    "end": "4217040"
  },
  {
    "text": "type that implements error and I'll just give it a few cases",
    "start": "4217080",
    "end": "4223640"
  },
  {
    "text": "because this is an enum we can have associate ated data if we want I'm not going to do it",
    "start": "4223640",
    "end": "4228800"
  },
  {
    "text": "here but we can say what our different um error types are",
    "start": "4228800",
    "end": "4235719"
  },
  {
    "text": "so going to throw that query error and this is a",
    "start": "4235719",
    "end": "4242880"
  },
  {
    "text": "uh it's a network",
    "start": "4242880",
    "end": "4246520"
  },
  {
    "text": "error and that should now throw the network error to catch it",
    "start": "4249960",
    "end": "4257120"
  },
  {
    "text": "we put this in a a do catch",
    "start": "4257120",
    "end": "4262920"
  },
  {
    "text": "block and then the catch itself supports pattern",
    "start": "4263880",
    "end": "4269639"
  },
  {
    "text": "matching so so I'm rushing through this a bit just to hopefully demonstrate the",
    "start": "4269880",
    "end": "4277960"
  },
  {
    "text": "power and of course we can have a catch all as",
    "start": "4283840",
    "end": "4289040"
  },
  {
    "text": "well so it does look very much like exception handling that you'll have seen in other languages except that you're",
    "start": "4292600",
    "end": "4299120"
  },
  {
    "text": "always forced to deal with them um you have a number of different options for how you deal with them and the compiler",
    "start": "4299120",
    "end": "4306679"
  },
  {
    "text": "will will enforce that you're doing the right thing at all levels",
    "start": "4306679",
    "end": "4314000"
  },
  {
    "text": "um and you get the power of patn matching uh for unwrapping them so this is not",
    "start": "4314239",
    "end": "4321560"
  },
  {
    "text": "like checked exceptions in in some other languages this is a a better alternative",
    "start": "4321560",
    "end": "4326960"
  },
  {
    "text": "that does actually work at least in everything that i' I've thrown at it um as you seen we just done a networking",
    "start": "4326960",
    "end": "4332800"
  },
  {
    "text": "demo at a conference and it's worked both ways so that's the the par Swift",
    "start": "4332800",
    "end": "4338880"
  },
  {
    "text": "That's the uh the last demo think we're um going to to the end did I have a last",
    "start": "4338880",
    "end": "4348080"
  },
  {
    "text": "slide I did it's just this one where I want to say thank you for coming for",
    "start": "4348080",
    "end": "4354040"
  },
  {
    "text": "listening and all of the code that I showed I've put in a playground on GitHub so that's the um GitHub",
    "start": "4354040",
    "end": "4361000"
  },
  {
    "text": "repository for it there or you can follow me on Twitter um thanks for",
    "start": "4361000",
    "end": "4366480"
  },
  {
    "text": "listening have you got any questions yeah",
    "start": "4366480",
    "end": "4372920"
  },
  {
    "text": "what's sorry what's what is Swift written in C++ it's not",
    "start": "4372920",
    "end": "4379760"
  },
  {
    "text": "yet self-hosting I don't know if there are any plans for it to to be self-hosting but it's certainly written",
    "start": "4379760",
    "end": "4386280"
  },
  {
    "text": "as a or designed as a systems language so there's no reason that it couldn't be um it just isn't",
    "start": "4386280",
    "end": "4394320"
  },
  {
    "text": "currently hey yeah sorry support for async did you",
    "start": "4394600",
    "end": "4403480"
  },
  {
    "text": "say um not yet um that's something that's on",
    "start": "4404120",
    "end": "4409600"
  },
  {
    "text": "the cards for Swift 5 I believe be working on over the next year was going to be swift 4 but they they push other",
    "start": "4409600",
    "end": "4415800"
  },
  {
    "text": "things ahead of it um but on the on the platform itself on Mac and iOS there is",
    "start": "4415800",
    "end": "4422000"
  },
  {
    "text": "um basically a cap API that's not bad called Grand Central Dispatch but um get",
    "start": "4422000",
    "end": "4427719"
  },
  {
    "text": "guess you part of the way there but it's still a bit more manual um than than a full um async moned uh but that's",
    "start": "4427719",
    "end": "4435120"
  },
  {
    "text": "definitely something that's on the cards so good question Yeahs can",
    "start": "4435120",
    "end": "4441239"
  },
  {
    "text": "runft yeah very good question I did mean to bring that up uh when I was talking about the open source because it is open",
    "start": "4441239",
    "end": "4446960"
  },
  {
    "text": "source you can you can actually build it on any platform you want but there's an official uh maintained port for",
    "start": "4446960",
    "end": "4453760"
  },
  {
    "text": "iunu um and that's used quite extensively by IBM they're doing a lot of Swift on the server uh and they're",
    "start": "4453760",
    "end": "4459400"
  },
  {
    "text": "building out some of the Frameworks for that there's a there's a web server written in Swift um that that IBM",
    "start": "4459400",
    "end": "4464679"
  },
  {
    "text": "maintain um it's early days on the server it's not a complete story there yet in fact",
    "start": "4464679",
    "end": "4470080"
  },
  {
    "text": "the async stuff will really play into that um but it's it's looking",
    "start": "4470080",
    "end": "4475360"
  },
  {
    "text": "promising yep okay so I think if You' got any more questions you can uh you",
    "start": "4475360",
    "end": "4480600"
  },
  {
    "text": "can come and catch me afterwards thank",
    "start": "4480600",
    "end": "4485679"
  },
  {
    "text": "you",
    "start": "4486560",
    "end": "4489560"
  }
]